{"info": {"author": "Patrick Lehmann", "author_email": "Paebbels@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Utilities"], "description": "[![License](https://img.shields.io/badge/Apache%20License,%202.0-bd0000.svg?longCache=true&label=code%20license&logo=Apache&logoColor=D22128)](LICENSE.md)\n[![GitHub tag (latest SemVer incl. pre-release)](https://img.shields.io/github/v/tag/Paebbels/pyVHDLParser?logo=GitHub&include_prereleases)](https://github.com/Paebbels/pyVHDLParser/tags)\n[![GitHub release (latest SemVer incl. including pre-releases)](https://img.shields.io/github/v/release/Paebbels/pyVHDLParser?logo=GitHub&include_prereleases)](https://github.com/Paebbels/pyVHDLParser/releases/latest)\n[![GitHub release date](https://img.shields.io/github/release-date/Paebbels/pyVHDLParser?logo=GitHub&)](https://github.com/Paebbels/pyVHDLParser/releases)\n[![Libraries.io status for latest release](https://img.shields.io/librariesio/release/pypi/pyVHDLParser)](https://libraries.io/github/Paebbels/pyVHDLParser)\n[![Requires.io](https://img.shields.io/requires/github/Paebbels/pyVHDLParser)](https://requires.io/github/Paebbels/pyVHDLParser/requirements/?branch=master)  \n[![Travis](https://img.shields.io/travis/com/Paebbels/pyVHDLParser?logo=Travis)](https://travis-ci.com/Paebbels/pyVHDLParser)\n[![PyPI](https://img.shields.io/pypi/v/pyVHDLParser?logo=PyPI)](https://pypi.org/project/pyVHDLParser/)\n![PyPI - Status](https://img.shields.io/pypi/status/pyVHDLParser?logo=PyPI)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pyVHDLParser?logo=PyPI)\n[![Dependent repos (via libraries.io)](https://img.shields.io/librariesio/dependent-repos/pypi/pyVHDLParser)](https://github.com/Paebbels/pyVHDLParser/network/dependents)  \n[![Codacy Badge](https://img.shields.io/codacy/grade/1155f244b6f54a3a95abdaa80d6771f8?logo=codacy)](https://www.codacy.com/manual/Paebbels/pyVHDLParser)\n[![Libraries.io SourceRank](https://img.shields.io/librariesio/sourcerank/pypi/pyVHDLParser)](https://libraries.io/github/Paebbels/pyVHDLParser/sourcerank)\n[![Read the Docs](https://img.shields.io/readthedocs/pyvhdlparser)](https://pyVHDLParser.readthedocs.io/en/latest/)\n\n# pyVHDLParser\n\nThis is a token-stream based parser for VHDL-2008.\n\n## Intruduction\n\n### Main Goals\n\n* **Parsing**\n  * slice an input document into **tokens** and text **blocks** which are categorized\n  * preserve case, whitespace and comments\n  * recover on parsing errors\n  * good error reporting / throw exceptions\n* **Fast Processing**\n  * multi-pass parsing and analysis\n  * delay analysis if not needed at current pass\n  * link tokens and blocks for fast-forward scanning\n* **Generic VHDL Language Model**\n  * Assemble a document-object-model (Code-DOM)\n  * Provide an API for code introspection\n\n### Use Cases\n\n* generate documentation by using the fast-forward scanner\n* generate a document/language model by using the grouped text-block scanner\n* extract compile orders and other dependency graphs\n* generate highlighted syntax\n* re-annotate documenting comments to their objects for doc extraction\n\n### Parsing approach\n\n1. slice an input document into **tokens**\n2. assemble tokens to text **blocks** which are categorized\n3. assemble text blocks for fast-forward scanning into **groups**\n4. translate groups into a document-object-model (DOM)\n5. provide a generic VHDL language model\n\n### Long time goals\n\n* A Sphinx language plugin for VHDL \n\n    TODO: Move the following documentation to ReadTheDocs and replace it with a more lightweight version.\n\n## Basic Concept\n\n[![][concept]][concept]\n\n[concept]: https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/doc/images/Linking_TokenBlockGroup.png\n\n## Example 1\n\nThis is an input file:\n\n```VHDL\n-- Copryright 2016\nlibrary IEEE;\nuse     IEEE.std_logic_1164.all;\n\nentity myEntity is\n  generic (\n    BITS : positive := 8\n  );\n  port (\n    Clock   : in   std_logic;\n    Output  : out  std_logic_vector(BITS - 1 downto 0)\n  );\nend entity;\n\narchitecture rtl of myEntity is\n  constant const0 : integer := 5;\nbegin\n  process(Clock)\n  begin\n  end process;\nend architecture;\n\nlibrary IEEE, PoC;\nuse     PoC.Utils.all, PoC.Common.all;\n\npackage pkg0 is\n  function func0(a : integer) return string;\nend package;\n\npackage body Components is\n  function func0(a : integer) return string is\n    procedure proc0 is\n    begin\n    end procedure;\n  begin\n  end function\nend package body;\n```\n\n### Step 1\nThe input file (stream of characters) is translated into stream of basic tokens:\n* `StartOfDocumentToken`\n* `LinebreakToken`\n* `SpaceToken`\n  * `IndentationToken`\n* `WordToken`\n* `CharacterToken`\n  * `FusedCharacterToken`\n* CommentToken\n  * `SingleLineCommentToken`\n  * `MultiLineCommentToken`\n* `EndOfDocumentToken`\n\n\nThe stream looks like this:\n```\n<StartOfDocumentToken>\n<SLCommentToken '-- Copryright 2016\\n'  ................ at 1:1>\n<WordToken      'library'  ............................. at 2:1>\n<SpaceToken     ' '  ................................... at 2:8>\n<WordToken      'IEEE'  ................................ at 2:9>\n<CharacterToken ';'  ................................... at 2:13>\n<LinebreakToken ---------------------------------------- at 2:14>\n<WordToken      'use'  ................................. at 3:1>\n<SpaceToken     '     '  ............................... at 3:4>\n<WordToken      'IEEE'  ................................ at 3:9>\n<CharacterToken '.'  ................................... at 3:13>\n<WordToken      'std_logic_1164'  ...................... at 3:14>\n<CharacterToken '.'  ................................... at 3:28>\n<WordToken      'all'  ................................. at 3:29>\n<CharacterToken ';'  ................................... at 3:32>\n<LinebreakToken ---------------------------------------- at 3:33>\n<LinebreakToken ---------------------------------------- at 4:1>\n<WordToken      'entity'  .............................. at 5:1>\n<SpaceToken     ' '  ................................... at 5:7>\n<WordToken      'myEntity'  ............................ at 5:8>\n<SpaceToken     ' '  ................................... at 5:16>\n<WordToken      'is'  .................................. at 5:17>\n<LinebreakToken ---------------------------------------- at 5:19>\n<IndentToken    '\\t'  .................................. at 6:1>\n<WordToken      'generic'  ............................. at 6:2>\n<SpaceToken     ' '  ................................... at 6:9>\n<CharacterToken '('  ................................... at 6:10>\n<LinebreakToken ---------------------------------------- at 6:11>\n<IndentToken    '\\t\\t'  ................................ at 7:1>\n<WordToken      'BITS'  ................................ at 7:3>\n<SpaceToken     ' '  ................................... at 7:7>\n<CharacterToken ':'  ................................... at 7:8>\n<SpaceToken     ' '  ................................... at 7:8>\n<WordToken      'positive'  ............................ at 7:10>\n<SpaceToken     ' '  ................................... at 7:18>\n<FusedCharToken ':='  .................................. at 7:19>\n<SpaceToken     ' '  ................................... at 7:21>\n<WordToken      '8'  ................................... at 7:22>\n<LinebreakToken ---------------------------------------- at 7:23>\n<IndentToken    '\\t'  .................................. at 8:1>\n<CharacterToken ')'  ................................... at 8:2>\n<CharacterToken ';'  ................................... at 8:3>\n<LinebreakToken ---------------------------------------- at 8:4>\n<IndentToken    '\\t'  .................................. at 9:1>\n<WordToken      'port'  ................................ at 9:2>\n<SpaceToken     ' '  ................................... at 9:6>\n<CharacterToken '('  ................................... at 9:7>\n<LinebreakToken ---------------------------------------- at 9:8>\n<IndentToken    '\\t\\t'  ................................ at 10:1>\n<WordToken      'Clock'  ............................... at 10:3>\n<SpaceToken     '   '  ................................. at 10:8>\n<CharacterToken ':'  ................................... at 10:11>\n<SpaceToken     ' '  ................................... at 10:11>\n<WordToken      'in'  .................................. at 10:13>\n<SpaceToken     '  '  .................................. at 10:15>\n<WordToken      'std_logic'  ........................... at 10:17>\n<CharacterToken ';'  ................................... at 10:26>\n<LinebreakToken ---------------------------------------- at 10:27>\n<IndentToken    '\\t\\t'  ................................ at 11:1>\n<WordToken      'Output'  .............................. at 11:3>\n<SpaceToken     '       '  ................................... at 11:9>\n<CharacterToken ':'  ................................... at 11:10>\n<SpaceToken     ' '  ................................... at 11:10>\n<WordToken      'out'  ................................. at 11:12>\n<SpaceToken     '       '  ................................... at 11:15>\n<WordToken      'std_logic_vector'  .................... at 11:16>\n<CharacterToken '('  ................................... at 11:32>\n<WordToken      'BITS'  ................................ at 11:33>\n<SpaceToken     ' '  ................................... at 11:37>\n<CharacterToken '-'  ................................... at 11:38>\n<SpaceToken     ' '  ................................... at 11:38>\n<WordToken      '1'  ................................... at 11:40>\n<SpaceToken     ' '  ................................... at 11:41>\n<WordToken      'downto'  .............................. at 11:42>\n<SpaceToken     ' '  ................................... at 11:48>\n<WordToken      '0'  ................................... at 11:49>\n<CharacterToken ')'  ................................... at 11:50>\n<LinebreakToken ---------------------------------------- at 11:51>\n<IndentToken    '\\t'  .................................. at 12:1>\n<CharacterToken ')'  ................................... at 12:2>\n<CharacterToken ';'  ................................... at 12:3>\n<LinebreakToken ---------------------------------------- at 12:4>\n<WordToken      'end'  ................................. at 13:1>\n<SpaceToken     ' '  ................................... at 13:4>\n<WordToken      'entity'  .............................. at 13:5>\n<CharacterToken ';'  ................................... at 13:11>\n<LinebreakToken ---------------------------------------- at 13:12>\n<LinebreakToken ---------------------------------------- at 14:1>\n<WordToken      'architecture'  ........................ at 15:1>\n<SpaceToken     ' '  ................................... at 15:13>\n<WordToken      'rtl'  ................................. at 15:14>\n<SpaceToken     ' '  ................................... at 15:17>\n<WordToken      'of'  .................................. at 15:18>\n<SpaceToken     ' '  ................................... at 15:20>\n<WordToken      'myEntity'  ............................ at 15:21>\n<SpaceToken     ' '  ................................... at 15:29>\n<WordToken      'is'  .................................. at 15:30>\n<LinebreakToken ---------------------------------------- at 15:32>\n<IndentToken    '\\t'  .................................. at 16:1>\n<WordToken      'constant'  ............................ at 16:2>\n<SpaceToken     ' '  ................................... at 16:10>\n<WordToken      'const0'  .............................. at 16:11>\n<SpaceToken     ' '  ................................... at 16:17>\n<CharacterToken ':'  ................................... at 16:18>\n<SpaceToken     ' '  ................................... at 16:18>\n<WordToken      'integer'  ............................. at 16:20>\n<SpaceToken     ' '  ................................... at 16:27>\n<FusedCharToken ':='  .................................. at 16:28>\n<SpaceToken     ' '  ................................... at 16:30>\n<WordToken      '5'  ................................... at 16:31>\n<CharacterToken ';'  ................................... at 16:32>\n<LinebreakToken ---------------------------------------- at 16:33>\n<WordToken      'begin'  ............................... at 17:1>\n<LinebreakToken ---------------------------------------- at 17:6>\n<IndentToken    '\\t'  .................................. at 18:1>\n<WordToken      'process'  ............................. at 18:2>\n<CharacterToken '('  ................................... at 18:9>\n<WordToken      'Clock'  ............................... at 18:10>\n<CharacterToken ')'  ................................... at 18:15>\n<LinebreakToken ---------------------------------------- at 18:16>\n<IndentToken    '\\t'  .................................. at 19:1>\n<WordToken      'begin'  ............................... at 19:2>\n<LinebreakToken ---------------------------------------- at 19:7>\n<IndentToken    '\\t'  .................................. at 20:1>\n<WordToken      'end'  ................................. at 20:2>\n<SpaceToken     ' '  ................................... at 20:5>\n<WordToken      'process'  ............................. at 20:6>\n<CharacterToken ';'  ................................... at 20:13>\n<LinebreakToken ---------------------------------------- at 20:14>\n<WordToken      'end'  ................................. at 21:1>\n<SpaceToken     ' '  ................................... at 21:4>\n<WordToken      'architecture'  ........................ at 21:5>\n<CharacterToken ';'  ................................... at 21:17>\n<LinebreakToken ---------------------------------------- at 21:18>\n<LinebreakToken ---------------------------------------- at 22:1>\n<WordToken      'library'  ............................. at 23:1>\n<SpaceToken     ' '  ................................... at 23:8>\n<WordToken      'IEEE'  ................................ at 23:9>\n<CharacterToken ','  ................................... at 23:13>\n<SpaceToken     ' '  ................................... at 23:14>\n<WordToken      'PoC'  ................................. at 23:15>\n<CharacterToken ';'  ................................... at 23:18>\n<LinebreakToken ---------------------------------------- at 23:19>\n<WordToken      'use'  ................................. at 24:1>\n<SpaceToken     '     '  ............................... at 24:4>\n<WordToken      'PoC'  ................................. at 24:9>\n<CharacterToken '.'  ................................... at 24:12>\n<WordToken      'Utils'  ............................... at 24:13>\n<CharacterToken '.'  ................................... at 24:18>\n<WordToken      'all'  ................................. at 24:19>\n<CharacterToken ','  ................................... at 24:22>\n<SpaceToken     ' '  ................................... at 24:23>\n<WordToken      'PoC'  ................................. at 24:24>\n<CharacterToken '.'  ................................... at 24:27>\n<WordToken      'Common'  .............................. at 24:28>\n<CharacterToken '.'  ................................... at 24:34>\n<WordToken      'all'  ................................. at 24:35>\n<CharacterToken ';'  ................................... at 24:38>\n<LinebreakToken ---------------------------------------- at 24:39>\n<LinebreakToken ---------------------------------------- at 25:1>\n<WordToken      'package'  ............................. at 26:1>\n<SpaceToken     ' '  ................................... at 26:8>\n<WordToken      'pkg0'  ................................ at 26:9>\n<SpaceToken     ' '  ................................... at 26:13>\n<WordToken      'is'  .................................. at 26:14>\n<LinebreakToken ---------------------------------------- at 26:16>\n<IndentToken    '\\t'  .................................. at 27:1>\n<WordToken      'function'  ............................ at 27:2>\n<SpaceToken     ' '  ................................... at 27:10>\n<WordToken      'func0'  ............................... at 27:11>\n<CharacterToken '('  ................................... at 27:16>\n<WordToken      'a'  ................................... at 27:17>\n<SpaceToken     ' '  ................................... at 27:18>\n<CharacterToken ':'  ................................... at 27:19>\n<SpaceToken     ' '  ................................... at 27:19>\n<WordToken      'integer'  ............................. at 27:21>\n<CharacterToken ')'  ................................... at 27:28>\n<SpaceToken     ' '  ................................... at 27:29>\n<WordToken      'return'  .............................. at 27:30>\n<SpaceToken     ' '  ................................... at 27:36>\n<WordToken      'string'  .............................. at 27:37>\n<CharacterToken ';'  ................................... at 27:43>\n<LinebreakToken ---------------------------------------- at 27:44>\n<WordToken      'end'  ................................. at 28:1>\n<SpaceToken     ' '  ................................... at 28:4>\n<WordToken      'package'  ............................. at 28:5>\n<CharacterToken ';'  ................................... at 28:12>\n<LinebreakToken ---------------------------------------- at 28:13>\n<LinebreakToken ---------------------------------------- at 29:1>\n<WordToken      'package'  ............................. at 30:1>\n<SpaceToken     ' '  ................................... at 30:8>\n<WordToken      'body'  ................................ at 30:9>\n<SpaceToken     ' '  ................................... at 30:13>\n<WordToken      'Components'  .......................... at 30:14>\n<SpaceToken     ' '  ................................... at 30:24>\n<WordToken      'is'  .................................. at 30:25>\n<LinebreakToken ---------------------------------------- at 30:27>\n<IndentToken    '\\t'  .................................. at 31:1>\n<WordToken      'function'  ............................ at 31:2>\n<SpaceToken     ' '  ................................... at 31:10>\n<WordToken      'func0'  ............................... at 31:11>\n<CharacterToken '('  ................................... at 31:16>\n<WordToken      'a'  ................................... at 31:17>\n<SpaceToken     ' '  ................................... at 31:18>\n<CharacterToken ':'  ................................... at 31:19>\n<SpaceToken     ' '  ................................... at 31:19>\n<WordToken      'integer'  ............................. at 31:21>\n<CharacterToken ')'  ................................... at 31:28>\n<SpaceToken     ' '  ................................... at 31:29>\n<WordToken      'return'  .............................. at 31:30>\n<SpaceToken     ' '  ................................... at 31:36>\n<WordToken      'string'  .............................. at 31:37>\n<SpaceToken     ' '  ................................... at 31:43>\n<WordToken      'is'  .................................. at 31:44>\n<LinebreakToken ---------------------------------------- at 31:46>\n<IndentToken    '\\t\\t'  ................................ at 32:1>\n<WordToken      'procedure'  ........................... at 32:3>\n<SpaceToken     ' '  ................................... at 32:12>\n<WordToken      'proc0'  ............................... at 32:13>\n<SpaceToken     ' '  ................................... at 32:18>\n<WordToken      'is'  .................................. at 32:19>\n<LinebreakToken ---------------------------------------- at 32:21>\n<IndentToken    '\\t\\t'  ................................ at 33:1>\n<WordToken      'begin'  ............................... at 33:3>\n<LinebreakToken ---------------------------------------- at 33:8>\n<IndentToken    '\\t\\t'  ................................ at 34:1>\n<WordToken      'end'  ................................. at 34:3>\n<SpaceToken     ' '  ................................... at 34:6>\n<WordToken      'procedure'  ........................... at 34:7>\n<CharacterToken ';'  ................................... at 34:16>\n<LinebreakToken ---------------------------------------- at 34:17>\n<IndentToken    '\\t'  .................................. at 35:1>\n<WordToken      'begin'  ............................... at 35:2>\n<LinebreakToken ---------------------------------------- at 35:7>\n<IndentToken    '\\t'  .................................. at 36:1>\n<WordToken      'end'  ................................. at 36:2>\n<SpaceToken     ' '  ................................... at 36:5>\n<WordToken      'function'  ............................ at 36:6>\n<LinebreakToken ---------------------------------------- at 36:14>\n<WordToken      'end'  ................................. at 37:1>\n<SpaceToken     ' '  ................................... at 37:4>\n<WordToken      'package'  ............................. at 37:5>\n<SpaceToken     ' '  ................................... at 37:12>\n<WordToken      'body'  ................................ at 37:13>\n<CharacterToken ';'  ................................... at 37:17>\n<LinebreakToken ---------------------------------------- at 37:18>\n```\n\n[![Screenshot][10]][10]\n\n### Step 2\nThe token stream from step 1 is translated into typed tokens like\n`DelimiterToken` (:), `EndToken` (;) or subtypes of `KeywordToken`.\nThese tokens are then grouped into blocks.\n\nThe example generates:\n```\n[StartOfDocumentBlock]\n[Blocks.CommentBlock            '-- Copryright 2016\\n'                                         at (line:   1, col:  1) .. (line:   1, col: 19)]\n[Library.LibraryBlock           'library '                                                     at (line:   2, col:  1) .. (line:   2, col:  8)]\n[Library.LibraryNameBlock       'IEEE'                                                         at (line:   2, col:  9) .. (line:   2, col: 13)]\n[Library.LibraryEndBlock        ';'                                                            at (line:   2, col: 13) .. (line:   2, col: 13)]\n[LinebreakBlock                                                                                at (line:   2, col: 14) .. (line:   2, col: 14)]\n[Use.UseBlock                   'use     '                                                     at (line:   3, col:  1) .. (line:   3, col:  8)]\n[Use.UseNameBlock               'IEEE.std_logic_1164.all'                                      at (line:   3, col:  9) .. (line:   3, col: 32)]\n[Use.UseEndBlock                ';'                                                            at (line:   3, col: 32) .. (line:   3, col: 32)]\n[LinebreakBlock                                                                                at (line:   3, col: 33) .. (line:   3, col: 33)]\n[EmptyLineBlock                                                                                at (line:   4, col:  1) .. (line:   4, col:  1)]\n[Entity.NameBlock               'entity myEntity is'                                           at (line:   5, col:  1) .. (line:   5, col: 19)]\n[LinebreakBlock                                                                                at (line:   5, col: 19) .. (line:   5, col: 19)]\n[IndentationBlock                length=1 (2)                                                  at (line:   6, col:  1) .. (line:   6, col:  1)]\n[GenericList.OpenBlock          'generic ('                                                    at (line:   6, col:  2) .. (line:   6, col: 10)]\n[LinebreakBlock                                                                                at (line:   6, col: 11) .. (line:   6, col: 11)]\n[IndentationBlock                length=2 (4)                                                  at (line:   7, col:  1) .. (line:   7, col:  2)]\n[GenericList.ItemBlock          'BITS : positive := 8\\n\\t'                                     at (line:   7, col:  3) .. (line:   8, col:  1)]\n[GenericList.CloseBlock         ');'                                                           at (line:   8, col:  2) .. (line:   8, col:  3)]\n[LinebreakBlock                                                                                at (line:   8, col:  4) .. (line:   8, col:  4)]\n[IndentationBlock                length=1 (2)                                                  at (line:   9, col:  1) .. (line:   9, col:  1)]\n[PortList.OpenBlock             'port ('                                                       at (line:   9, col:  2) .. (line:   9, col:  7)]\n[LinebreakBlock                                                                                at (line:   9, col:  8) .. (line:   9, col:  8)]\n[IndentationBlock                length=2 (4)                                                  at (line:  10, col:  1) .. (line:  10, col:  2)]\n[PortList.ItemBlock             'Clock   : in  std_logic'                                      at (line:  10, col:  3) .. (line:  10, col: 26)]\n[PortList.DelimiterBlock        ';'                                                            at (line:  10, col: 26) .. (line:  10, col: 26)]\n[LinebreakBlock                                                                                at (line:  10, col: 27) .. (line:  10, col: 27)]\n[IndentationBlock                length=2 (4)                                                  at (line:  11, col:  1) .. (line:  11, col:  2)]\n[PortList.ItemBlock             'Output\\t: out\\tstd_logic_vector(BITS - 1 downto 0)\\n\\t'       at (line:  11, col:  3) .. (line:  12, col:  1)]\n[PortList.CloseBlock            ');'                                                           at (line:  12, col:  2) .. (line:  12, col:  3)]\n[LinebreakBlock                                                                                at (line:  12, col:  4) .. (line:  12, col:  4)]\n[Entity.EndBlock                'end entity;'                                                  at (line:  13, col:  1) .. (line:  13, col: 11)]\n[LinebreakBlock                                                                                at (line:  13, col: 12) .. (line:  13, col: 12)]\n[EmptyLineBlock                                                                                at (line:  14, col:  1) .. (line:  14, col:  1)]\n[Architecture.NameBlock         'architecture rtl of myEntity is'                              at (line:  15, col:  1) .. (line:  15, col: 32)]\n[LinebreakBlock                                                                                at (line:  15, col: 32) .. (line:  15, col: 32)]\n[IndentationBlock                length=1 (2)                                                  at (line:  16, col:  1) .. (line:  16, col:  1)]\n[Constant.ConstantBlock         'constant const0 : integer := 5;'                              at (line:  16, col:  2) .. (line:  16, col: 32)]\n[LinebreakBlock                                                                                at (line:  16, col: 33) .. (line:  16, col: 33)]\n[EmptyLineBlock                                                                                at (line:  17, col:  6) .. (line:  17, col:  6)]\n[IndentationBlock                length=1 (2)                                                  at (line:  18, col:  1) .. (line:  18, col:  1)]\n[Process.OpenBlock              'process('                                                     at (line:  18, col:  2) .. (line:  18, col:  9)]\n[SensitivityList.ItemBlock      'Clock'                                                        at (line:  18, col: 10) .. (line:  18, col: 15)]\n[Process.OpenBlock2*            ')'                                                            at (line:  18, col: 15) .. (line:  18, col: 15)]\n[LinebreakBlock                                                                                at (line:  18, col: 16) .. (line:  18, col: 16)]\n...\n```\n\nThe following screenshot shows the resulting stream of blocks:\n[![][20]][20]\n\n\n[outdated]\nThe block stream can also be \"opened\" to show the stream of tokens within each block. This is shown in the next screenshot:\n[![][21]][21]\n\n### Step 3\nThe stream of blocks from step 2 is transformed into a stream of groups.\n\n### Step 4\nOne of many post processing steps could be to remove whitespaces, indentation and comment blocks. So a filter can be applied to remove these block types. Additionally, multiparted blocks (e.g. if a comment or linebreak was inserted between consecutive code sequences, which belong to one block) can be fused to one single block.\n\nThis screenshot shows the filtered results:\n[![][30]][30] \n\n [10]: https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/TokenStream_Example_1.png\n [20]: https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Example_1.png\n [21]: https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Uses_Detailed.png\n [30]: https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Uses_Fused.png\n\n## Example 2 - Simple_1\n\nThis is an input file:\n\n```VHDL\n-- Copryright 2016\nlibrary IEEE;\nuse     IEEE.std_logic_1164.all;\nuse      IEEE.numeric_std.all;\n\nentity myEntity is\n  generic (\n    BITS : positive := 8\n  );\n  port (\n    Clock   : in  std_logic;\n    Reset   : in  std_logic;\n    Output  : out  std_logic_vector(BITS - 1 downto 0)\n  );\nend entity;\n\narchitecture rtl of myEntity is\n\nbegin\n\nend architecture;\n```\n\nThis is the result stream:\n[![][40]][40] \n\nAnd this is the filtered and fused result stream:\n[![][41]][41]\n\n [40]: https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Simple_1.png\n [41]: https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Simple_1_Fused.png\n\n\n#### License\n\nLicensed under [Apache License 2.0](LICENSE.md).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Paebbels/pyVHDLParser", "keywords": "Python3 Parser VHDL Streaming Documentation", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyVHDLParser", "package_url": "https://pypi.org/project/pyVHDLParser/", "platform": "", "project_url": "https://pypi.org/project/pyVHDLParser/", "project_urls": {"Documentation": "https://pyVHDLParser.readthedocs.io/en/latest/", "Homepage": "https://github.com/Paebbels/pyVHDLParser", "Issue Tracker": "https://github.com/Paebbels/pyVHDLParser/issues", "Source Code": "https://github.com/Paebbels/pyVHDLParser"}, "release_url": "https://pypi.org/project/pyVHDLParser/0.4.3/", "requires_dist": ["colorama (>=0.4.3)", "py-flags (>=1.1.3)", "pyExceptions (>=0.1.11)", "pyAttributes (>=0.2.6)", "pyCallBy (>=1.0.0)", "pyTerminalUI (>=1.2.1)"], "requires_python": ">=3.4", "summary": "A streaming-based VHDL parser.", "version": "0.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"LICENSE.md\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0a453285b0967dfa04a7e628b1582bc3bc12ded/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4170616368652532304c6963656e73652c253230322e302d6264303030302e7376673f6c6f6e6743616368653d74727565266c6162656c3d636f64652532306c6963656e7365266c6f676f3d417061636865266c6f676f436f6c6f723d443232313238\"></a>\n<a href=\"https://github.com/Paebbels/pyVHDLParser/tags\" rel=\"nofollow\"><img alt=\"GitHub tag (latest SemVer incl. pre-release)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f420f81ff784c61325a1b63b29e51cd98d5dad7/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f5061656262656c732f70795648444c5061727365723f6c6f676f3d47697448756226696e636c7564655f70726572656c6561736573\"></a>\n<a href=\"https://github.com/Paebbels/pyVHDLParser/releases/latest\" rel=\"nofollow\"><img alt=\"GitHub release (latest SemVer incl. including pre-releases)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4ea5fc7006343591447fa478db00512fa5e6011a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f5061656262656c732f70795648444c5061727365723f6c6f676f3d47697448756226696e636c7564655f70726572656c6561736573\"></a>\n<a href=\"https://github.com/Paebbels/pyVHDLParser/releases\" rel=\"nofollow\"><img alt=\"GitHub release date\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7d55dd17014b04fdb71d4a5430df5f35cf139e64/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652d646174652f5061656262656c732f70795648444c5061727365723f6c6f676f3d47697448756226\"></a>\n<a href=\"https://libraries.io/github/Paebbels/pyVHDLParser\" rel=\"nofollow\"><img alt=\"Libraries.io status for latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f35d8ffc609f4289470394f3091f51662b83c3f/68747470733a2f2f696d672e736869656c64732e696f2f6c6962726172696573696f2f72656c656173652f707970692f70795648444c506172736572\"></a>\n<a href=\"https://requires.io/github/Paebbels/pyVHDLParser/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requires.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d261757805e96b30317ade427a2498b606cef41/68747470733a2f2f696d672e736869656c64732e696f2f72657175697265732f6769746875622f5061656262656c732f70795648444c506172736572\"></a><br>\n<a href=\"https://travis-ci.com/Paebbels/pyVHDLParser\" rel=\"nofollow\"><img alt=\"Travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3bf21a6ce3b1580d6d9da646a0d4fe43530d3b2/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f636f6d2f5061656262656c732f70795648444c5061727365723f6c6f676f3d547261766973\"></a>\n<a href=\"https://pypi.org/project/pyVHDLParser/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c4b37115917ad44ea627583ed03469f8c078f6c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70795648444c5061727365723f6c6f676f3d50795049\"></a>\n<img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1efcc232c916048e23a6bacf966cfa350fd3a84/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f70795648444c5061727365723f6c6f676f3d50795049\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/902bb9e77768e4e3d6cb13c0c8037889569081f8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70795648444c5061727365723f6c6f676f3d50795049\">\n<a href=\"https://github.com/Paebbels/pyVHDLParser/network/dependents\" rel=\"nofollow\"><img alt=\"Dependent repos (via libraries.io)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2141edaf8f248139047ef9dee282cc10508156a4/68747470733a2f2f696d672e736869656c64732e696f2f6c6962726172696573696f2f646570656e64656e742d7265706f732f707970692f70795648444c506172736572\"></a><br>\n<a href=\"https://www.codacy.com/manual/Paebbels/pyVHDLParser\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6b51321bc888e540de81fba35c48cfcd92ee8c4/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f67726164652f31313535663234346236663534613361393561626461613830643637373166383f6c6f676f3d636f64616379\"></a>\n<a href=\"https://libraries.io/github/Paebbels/pyVHDLParser/sourcerank\" rel=\"nofollow\"><img alt=\"Libraries.io SourceRank\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13c9f65fa4265e2f249f75807cb51d574361a6d8/68747470733a2f2f696d672e736869656c64732e696f2f6c6962726172696573696f2f736f7572636572616e6b2f707970692f70795648444c506172736572\"></a>\n<a href=\"https://pyVHDLParser.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Read the Docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb1b7060371d7a02cac17164363ad74e77ac0f8a/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f70797668646c706172736572\"></a></p>\n<h1>pyVHDLParser</h1>\n<p>This is a token-stream based parser for VHDL-2008.</p>\n<h2>Intruduction</h2>\n<h3>Main Goals</h3>\n<ul>\n<li><strong>Parsing</strong>\n<ul>\n<li>slice an input document into <strong>tokens</strong> and text <strong>blocks</strong> which are categorized</li>\n<li>preserve case, whitespace and comments</li>\n<li>recover on parsing errors</li>\n<li>good error reporting / throw exceptions</li>\n</ul>\n</li>\n<li><strong>Fast Processing</strong>\n<ul>\n<li>multi-pass parsing and analysis</li>\n<li>delay analysis if not needed at current pass</li>\n<li>link tokens and blocks for fast-forward scanning</li>\n</ul>\n</li>\n<li><strong>Generic VHDL Language Model</strong>\n<ul>\n<li>Assemble a document-object-model (Code-DOM)</li>\n<li>Provide an API for code introspection</li>\n</ul>\n</li>\n</ul>\n<h3>Use Cases</h3>\n<ul>\n<li>generate documentation by using the fast-forward scanner</li>\n<li>generate a document/language model by using the grouped text-block scanner</li>\n<li>extract compile orders and other dependency graphs</li>\n<li>generate highlighted syntax</li>\n<li>re-annotate documenting comments to their objects for doc extraction</li>\n</ul>\n<h3>Parsing approach</h3>\n<ol>\n<li>slice an input document into <strong>tokens</strong></li>\n<li>assemble tokens to text <strong>blocks</strong> which are categorized</li>\n<li>assemble text blocks for fast-forward scanning into <strong>groups</strong></li>\n<li>translate groups into a document-object-model (DOM)</li>\n<li>provide a generic VHDL language model</li>\n</ol>\n<h3>Long time goals</h3>\n<ul>\n<li>\n<p>A Sphinx language plugin for VHDL</p>\n<p>TODO: Move the following documentation to ReadTheDocs and replace it with a more lightweight version.</p>\n</li>\n</ul>\n<h2>Basic Concept</h2>\n<p><a href=\"https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/doc/images/Linking_TokenBlockGroup.png\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/abffbe64b7e0677a72ab729fe3b65b73085737eb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5061656262656c732f70795648444c5061727365722f6d61737465722f646f632f696d616765732f4c696e6b696e675f546f6b656e426c6f636b47726f75702e706e67\"></a></p>\n<h2>Example 1</h2>\n<p>This is an input file:</p>\n<pre><span class=\"c1\">-- Copryright 2016</span>\n<span class=\"k\">library</span> <span class=\"nn\">IEEE</span><span class=\"p\">;</span>\n<span class=\"k\">use</span>     <span class=\"nn\">IEEE.std_logic_1164.</span><span class=\"k\">all</span><span class=\"p\">;</span>\n\n<span class=\"k\">entity</span> <span class=\"nc\">myEntity</span> <span class=\"k\">is</span>\n  <span class=\"k\">generic</span> <span class=\"p\">(</span>\n    <span class=\"n\">BITS</span> <span class=\"o\">:</span> <span class=\"kt\">positive</span> <span class=\"o\">:=</span> <span class=\"mi\">8</span>\n  <span class=\"p\">);</span>\n  <span class=\"k\">port</span> <span class=\"p\">(</span>\n    <span class=\"n\">Clock</span>   <span class=\"o\">:</span> <span class=\"k\">in</span>   <span class=\"kt\">std_logic</span><span class=\"p\">;</span>\n    <span class=\"n\">Output</span>  <span class=\"o\">:</span> <span class=\"k\">out</span>  <span class=\"kt\">std_logic_vector</span><span class=\"p\">(</span><span class=\"n\">BITS</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">downto</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">);</span>\n<span class=\"k\">end</span> <span class=\"k\">entity</span><span class=\"p\">;</span>\n\n<span class=\"k\">architecture</span> <span class=\"nc\">rtl</span> <span class=\"k\">of</span> <span class=\"nc\">myEntity</span> <span class=\"k\">is</span>\n  <span class=\"k\">constant</span> <span class=\"n\">const0</span> <span class=\"o\">:</span> <span class=\"kt\">integer</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">process</span><span class=\"p\">(</span><span class=\"n\">Clock</span><span class=\"p\">)</span>\n  <span class=\"k\">begin</span>\n  <span class=\"k\">end</span> <span class=\"k\">process</span><span class=\"p\">;</span>\n<span class=\"k\">end</span> <span class=\"k\">architecture</span><span class=\"p\">;</span>\n\n<span class=\"k\">library</span> <span class=\"nn\">IEEE</span><span class=\"p\">,</span> <span class=\"n\">PoC</span><span class=\"p\">;</span>\n<span class=\"k\">use</span>     <span class=\"nn\">PoC.Utils.</span><span class=\"k\">all</span><span class=\"p\">,</span> <span class=\"n\">PoC</span><span class=\"p\">.</span><span class=\"n\">Common</span><span class=\"p\">.</span><span class=\"k\">all</span><span class=\"p\">;</span>\n\n<span class=\"k\">package</span> <span class=\"n\">pkg0</span> <span class=\"k\">is</span>\n  <span class=\"k\">function</span> <span class=\"n\">func0</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">integer</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kt\">string</span><span class=\"p\">;</span>\n<span class=\"k\">end</span> <span class=\"k\">package</span><span class=\"p\">;</span>\n\n<span class=\"k\">package</span> <span class=\"k\">body</span> <span class=\"n\">Components</span> <span class=\"k\">is</span>\n  <span class=\"k\">function</span> <span class=\"n\">func0</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">integer</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"kt\">string</span> <span class=\"k\">is</span>\n    <span class=\"k\">procedure</span> <span class=\"n\">proc0</span> <span class=\"k\">is</span>\n    <span class=\"k\">begin</span>\n    <span class=\"k\">end</span> <span class=\"k\">procedure</span><span class=\"p\">;</span>\n  <span class=\"k\">begin</span>\n  <span class=\"k\">end</span> <span class=\"k\">function</span>\n<span class=\"k\">end</span> <span class=\"k\">package</span> <span class=\"k\">body</span><span class=\"p\">;</span>\n</pre>\n<h3>Step 1</h3>\n<p>The input file (stream of characters) is translated into stream of basic tokens:</p>\n<ul>\n<li><code>StartOfDocumentToken</code></li>\n<li><code>LinebreakToken</code></li>\n<li><code>SpaceToken</code>\n<ul>\n<li><code>IndentationToken</code></li>\n</ul>\n</li>\n<li><code>WordToken</code></li>\n<li><code>CharacterToken</code>\n<ul>\n<li><code>FusedCharacterToken</code></li>\n</ul>\n</li>\n<li>CommentToken\n<ul>\n<li><code>SingleLineCommentToken</code></li>\n<li><code>MultiLineCommentToken</code></li>\n</ul>\n</li>\n<li><code>EndOfDocumentToken</code></li>\n</ul>\n<p>The stream looks like this:</p>\n<pre><code>&lt;StartOfDocumentToken&gt;\n&lt;SLCommentToken '-- Copryright 2016\\n'  ................ at 1:1&gt;\n&lt;WordToken      'library'  ............................. at 2:1&gt;\n&lt;SpaceToken     ' '  ................................... at 2:8&gt;\n&lt;WordToken      'IEEE'  ................................ at 2:9&gt;\n&lt;CharacterToken ';'  ................................... at 2:13&gt;\n&lt;LinebreakToken ---------------------------------------- at 2:14&gt;\n&lt;WordToken      'use'  ................................. at 3:1&gt;\n&lt;SpaceToken     '     '  ............................... at 3:4&gt;\n&lt;WordToken      'IEEE'  ................................ at 3:9&gt;\n&lt;CharacterToken '.'  ................................... at 3:13&gt;\n&lt;WordToken      'std_logic_1164'  ...................... at 3:14&gt;\n&lt;CharacterToken '.'  ................................... at 3:28&gt;\n&lt;WordToken      'all'  ................................. at 3:29&gt;\n&lt;CharacterToken ';'  ................................... at 3:32&gt;\n&lt;LinebreakToken ---------------------------------------- at 3:33&gt;\n&lt;LinebreakToken ---------------------------------------- at 4:1&gt;\n&lt;WordToken      'entity'  .............................. at 5:1&gt;\n&lt;SpaceToken     ' '  ................................... at 5:7&gt;\n&lt;WordToken      'myEntity'  ............................ at 5:8&gt;\n&lt;SpaceToken     ' '  ................................... at 5:16&gt;\n&lt;WordToken      'is'  .................................. at 5:17&gt;\n&lt;LinebreakToken ---------------------------------------- at 5:19&gt;\n&lt;IndentToken    '\\t'  .................................. at 6:1&gt;\n&lt;WordToken      'generic'  ............................. at 6:2&gt;\n&lt;SpaceToken     ' '  ................................... at 6:9&gt;\n&lt;CharacterToken '('  ................................... at 6:10&gt;\n&lt;LinebreakToken ---------------------------------------- at 6:11&gt;\n&lt;IndentToken    '\\t\\t'  ................................ at 7:1&gt;\n&lt;WordToken      'BITS'  ................................ at 7:3&gt;\n&lt;SpaceToken     ' '  ................................... at 7:7&gt;\n&lt;CharacterToken ':'  ................................... at 7:8&gt;\n&lt;SpaceToken     ' '  ................................... at 7:8&gt;\n&lt;WordToken      'positive'  ............................ at 7:10&gt;\n&lt;SpaceToken     ' '  ................................... at 7:18&gt;\n&lt;FusedCharToken ':='  .................................. at 7:19&gt;\n&lt;SpaceToken     ' '  ................................... at 7:21&gt;\n&lt;WordToken      '8'  ................................... at 7:22&gt;\n&lt;LinebreakToken ---------------------------------------- at 7:23&gt;\n&lt;IndentToken    '\\t'  .................................. at 8:1&gt;\n&lt;CharacterToken ')'  ................................... at 8:2&gt;\n&lt;CharacterToken ';'  ................................... at 8:3&gt;\n&lt;LinebreakToken ---------------------------------------- at 8:4&gt;\n&lt;IndentToken    '\\t'  .................................. at 9:1&gt;\n&lt;WordToken      'port'  ................................ at 9:2&gt;\n&lt;SpaceToken     ' '  ................................... at 9:6&gt;\n&lt;CharacterToken '('  ................................... at 9:7&gt;\n&lt;LinebreakToken ---------------------------------------- at 9:8&gt;\n&lt;IndentToken    '\\t\\t'  ................................ at 10:1&gt;\n&lt;WordToken      'Clock'  ............................... at 10:3&gt;\n&lt;SpaceToken     '   '  ................................. at 10:8&gt;\n&lt;CharacterToken ':'  ................................... at 10:11&gt;\n&lt;SpaceToken     ' '  ................................... at 10:11&gt;\n&lt;WordToken      'in'  .................................. at 10:13&gt;\n&lt;SpaceToken     '  '  .................................. at 10:15&gt;\n&lt;WordToken      'std_logic'  ........................... at 10:17&gt;\n&lt;CharacterToken ';'  ................................... at 10:26&gt;\n&lt;LinebreakToken ---------------------------------------- at 10:27&gt;\n&lt;IndentToken    '\\t\\t'  ................................ at 11:1&gt;\n&lt;WordToken      'Output'  .............................. at 11:3&gt;\n&lt;SpaceToken     '       '  ................................... at 11:9&gt;\n&lt;CharacterToken ':'  ................................... at 11:10&gt;\n&lt;SpaceToken     ' '  ................................... at 11:10&gt;\n&lt;WordToken      'out'  ................................. at 11:12&gt;\n&lt;SpaceToken     '       '  ................................... at 11:15&gt;\n&lt;WordToken      'std_logic_vector'  .................... at 11:16&gt;\n&lt;CharacterToken '('  ................................... at 11:32&gt;\n&lt;WordToken      'BITS'  ................................ at 11:33&gt;\n&lt;SpaceToken     ' '  ................................... at 11:37&gt;\n&lt;CharacterToken '-'  ................................... at 11:38&gt;\n&lt;SpaceToken     ' '  ................................... at 11:38&gt;\n&lt;WordToken      '1'  ................................... at 11:40&gt;\n&lt;SpaceToken     ' '  ................................... at 11:41&gt;\n&lt;WordToken      'downto'  .............................. at 11:42&gt;\n&lt;SpaceToken     ' '  ................................... at 11:48&gt;\n&lt;WordToken      '0'  ................................... at 11:49&gt;\n&lt;CharacterToken ')'  ................................... at 11:50&gt;\n&lt;LinebreakToken ---------------------------------------- at 11:51&gt;\n&lt;IndentToken    '\\t'  .................................. at 12:1&gt;\n&lt;CharacterToken ')'  ................................... at 12:2&gt;\n&lt;CharacterToken ';'  ................................... at 12:3&gt;\n&lt;LinebreakToken ---------------------------------------- at 12:4&gt;\n&lt;WordToken      'end'  ................................. at 13:1&gt;\n&lt;SpaceToken     ' '  ................................... at 13:4&gt;\n&lt;WordToken      'entity'  .............................. at 13:5&gt;\n&lt;CharacterToken ';'  ................................... at 13:11&gt;\n&lt;LinebreakToken ---------------------------------------- at 13:12&gt;\n&lt;LinebreakToken ---------------------------------------- at 14:1&gt;\n&lt;WordToken      'architecture'  ........................ at 15:1&gt;\n&lt;SpaceToken     ' '  ................................... at 15:13&gt;\n&lt;WordToken      'rtl'  ................................. at 15:14&gt;\n&lt;SpaceToken     ' '  ................................... at 15:17&gt;\n&lt;WordToken      'of'  .................................. at 15:18&gt;\n&lt;SpaceToken     ' '  ................................... at 15:20&gt;\n&lt;WordToken      'myEntity'  ............................ at 15:21&gt;\n&lt;SpaceToken     ' '  ................................... at 15:29&gt;\n&lt;WordToken      'is'  .................................. at 15:30&gt;\n&lt;LinebreakToken ---------------------------------------- at 15:32&gt;\n&lt;IndentToken    '\\t'  .................................. at 16:1&gt;\n&lt;WordToken      'constant'  ............................ at 16:2&gt;\n&lt;SpaceToken     ' '  ................................... at 16:10&gt;\n&lt;WordToken      'const0'  .............................. at 16:11&gt;\n&lt;SpaceToken     ' '  ................................... at 16:17&gt;\n&lt;CharacterToken ':'  ................................... at 16:18&gt;\n&lt;SpaceToken     ' '  ................................... at 16:18&gt;\n&lt;WordToken      'integer'  ............................. at 16:20&gt;\n&lt;SpaceToken     ' '  ................................... at 16:27&gt;\n&lt;FusedCharToken ':='  .................................. at 16:28&gt;\n&lt;SpaceToken     ' '  ................................... at 16:30&gt;\n&lt;WordToken      '5'  ................................... at 16:31&gt;\n&lt;CharacterToken ';'  ................................... at 16:32&gt;\n&lt;LinebreakToken ---------------------------------------- at 16:33&gt;\n&lt;WordToken      'begin'  ............................... at 17:1&gt;\n&lt;LinebreakToken ---------------------------------------- at 17:6&gt;\n&lt;IndentToken    '\\t'  .................................. at 18:1&gt;\n&lt;WordToken      'process'  ............................. at 18:2&gt;\n&lt;CharacterToken '('  ................................... at 18:9&gt;\n&lt;WordToken      'Clock'  ............................... at 18:10&gt;\n&lt;CharacterToken ')'  ................................... at 18:15&gt;\n&lt;LinebreakToken ---------------------------------------- at 18:16&gt;\n&lt;IndentToken    '\\t'  .................................. at 19:1&gt;\n&lt;WordToken      'begin'  ............................... at 19:2&gt;\n&lt;LinebreakToken ---------------------------------------- at 19:7&gt;\n&lt;IndentToken    '\\t'  .................................. at 20:1&gt;\n&lt;WordToken      'end'  ................................. at 20:2&gt;\n&lt;SpaceToken     ' '  ................................... at 20:5&gt;\n&lt;WordToken      'process'  ............................. at 20:6&gt;\n&lt;CharacterToken ';'  ................................... at 20:13&gt;\n&lt;LinebreakToken ---------------------------------------- at 20:14&gt;\n&lt;WordToken      'end'  ................................. at 21:1&gt;\n&lt;SpaceToken     ' '  ................................... at 21:4&gt;\n&lt;WordToken      'architecture'  ........................ at 21:5&gt;\n&lt;CharacterToken ';'  ................................... at 21:17&gt;\n&lt;LinebreakToken ---------------------------------------- at 21:18&gt;\n&lt;LinebreakToken ---------------------------------------- at 22:1&gt;\n&lt;WordToken      'library'  ............................. at 23:1&gt;\n&lt;SpaceToken     ' '  ................................... at 23:8&gt;\n&lt;WordToken      'IEEE'  ................................ at 23:9&gt;\n&lt;CharacterToken ','  ................................... at 23:13&gt;\n&lt;SpaceToken     ' '  ................................... at 23:14&gt;\n&lt;WordToken      'PoC'  ................................. at 23:15&gt;\n&lt;CharacterToken ';'  ................................... at 23:18&gt;\n&lt;LinebreakToken ---------------------------------------- at 23:19&gt;\n&lt;WordToken      'use'  ................................. at 24:1&gt;\n&lt;SpaceToken     '     '  ............................... at 24:4&gt;\n&lt;WordToken      'PoC'  ................................. at 24:9&gt;\n&lt;CharacterToken '.'  ................................... at 24:12&gt;\n&lt;WordToken      'Utils'  ............................... at 24:13&gt;\n&lt;CharacterToken '.'  ................................... at 24:18&gt;\n&lt;WordToken      'all'  ................................. at 24:19&gt;\n&lt;CharacterToken ','  ................................... at 24:22&gt;\n&lt;SpaceToken     ' '  ................................... at 24:23&gt;\n&lt;WordToken      'PoC'  ................................. at 24:24&gt;\n&lt;CharacterToken '.'  ................................... at 24:27&gt;\n&lt;WordToken      'Common'  .............................. at 24:28&gt;\n&lt;CharacterToken '.'  ................................... at 24:34&gt;\n&lt;WordToken      'all'  ................................. at 24:35&gt;\n&lt;CharacterToken ';'  ................................... at 24:38&gt;\n&lt;LinebreakToken ---------------------------------------- at 24:39&gt;\n&lt;LinebreakToken ---------------------------------------- at 25:1&gt;\n&lt;WordToken      'package'  ............................. at 26:1&gt;\n&lt;SpaceToken     ' '  ................................... at 26:8&gt;\n&lt;WordToken      'pkg0'  ................................ at 26:9&gt;\n&lt;SpaceToken     ' '  ................................... at 26:13&gt;\n&lt;WordToken      'is'  .................................. at 26:14&gt;\n&lt;LinebreakToken ---------------------------------------- at 26:16&gt;\n&lt;IndentToken    '\\t'  .................................. at 27:1&gt;\n&lt;WordToken      'function'  ............................ at 27:2&gt;\n&lt;SpaceToken     ' '  ................................... at 27:10&gt;\n&lt;WordToken      'func0'  ............................... at 27:11&gt;\n&lt;CharacterToken '('  ................................... at 27:16&gt;\n&lt;WordToken      'a'  ................................... at 27:17&gt;\n&lt;SpaceToken     ' '  ................................... at 27:18&gt;\n&lt;CharacterToken ':'  ................................... at 27:19&gt;\n&lt;SpaceToken     ' '  ................................... at 27:19&gt;\n&lt;WordToken      'integer'  ............................. at 27:21&gt;\n&lt;CharacterToken ')'  ................................... at 27:28&gt;\n&lt;SpaceToken     ' '  ................................... at 27:29&gt;\n&lt;WordToken      'return'  .............................. at 27:30&gt;\n&lt;SpaceToken     ' '  ................................... at 27:36&gt;\n&lt;WordToken      'string'  .............................. at 27:37&gt;\n&lt;CharacterToken ';'  ................................... at 27:43&gt;\n&lt;LinebreakToken ---------------------------------------- at 27:44&gt;\n&lt;WordToken      'end'  ................................. at 28:1&gt;\n&lt;SpaceToken     ' '  ................................... at 28:4&gt;\n&lt;WordToken      'package'  ............................. at 28:5&gt;\n&lt;CharacterToken ';'  ................................... at 28:12&gt;\n&lt;LinebreakToken ---------------------------------------- at 28:13&gt;\n&lt;LinebreakToken ---------------------------------------- at 29:1&gt;\n&lt;WordToken      'package'  ............................. at 30:1&gt;\n&lt;SpaceToken     ' '  ................................... at 30:8&gt;\n&lt;WordToken      'body'  ................................ at 30:9&gt;\n&lt;SpaceToken     ' '  ................................... at 30:13&gt;\n&lt;WordToken      'Components'  .......................... at 30:14&gt;\n&lt;SpaceToken     ' '  ................................... at 30:24&gt;\n&lt;WordToken      'is'  .................................. at 30:25&gt;\n&lt;LinebreakToken ---------------------------------------- at 30:27&gt;\n&lt;IndentToken    '\\t'  .................................. at 31:1&gt;\n&lt;WordToken      'function'  ............................ at 31:2&gt;\n&lt;SpaceToken     ' '  ................................... at 31:10&gt;\n&lt;WordToken      'func0'  ............................... at 31:11&gt;\n&lt;CharacterToken '('  ................................... at 31:16&gt;\n&lt;WordToken      'a'  ................................... at 31:17&gt;\n&lt;SpaceToken     ' '  ................................... at 31:18&gt;\n&lt;CharacterToken ':'  ................................... at 31:19&gt;\n&lt;SpaceToken     ' '  ................................... at 31:19&gt;\n&lt;WordToken      'integer'  ............................. at 31:21&gt;\n&lt;CharacterToken ')'  ................................... at 31:28&gt;\n&lt;SpaceToken     ' '  ................................... at 31:29&gt;\n&lt;WordToken      'return'  .............................. at 31:30&gt;\n&lt;SpaceToken     ' '  ................................... at 31:36&gt;\n&lt;WordToken      'string'  .............................. at 31:37&gt;\n&lt;SpaceToken     ' '  ................................... at 31:43&gt;\n&lt;WordToken      'is'  .................................. at 31:44&gt;\n&lt;LinebreakToken ---------------------------------------- at 31:46&gt;\n&lt;IndentToken    '\\t\\t'  ................................ at 32:1&gt;\n&lt;WordToken      'procedure'  ........................... at 32:3&gt;\n&lt;SpaceToken     ' '  ................................... at 32:12&gt;\n&lt;WordToken      'proc0'  ............................... at 32:13&gt;\n&lt;SpaceToken     ' '  ................................... at 32:18&gt;\n&lt;WordToken      'is'  .................................. at 32:19&gt;\n&lt;LinebreakToken ---------------------------------------- at 32:21&gt;\n&lt;IndentToken    '\\t\\t'  ................................ at 33:1&gt;\n&lt;WordToken      'begin'  ............................... at 33:3&gt;\n&lt;LinebreakToken ---------------------------------------- at 33:8&gt;\n&lt;IndentToken    '\\t\\t'  ................................ at 34:1&gt;\n&lt;WordToken      'end'  ................................. at 34:3&gt;\n&lt;SpaceToken     ' '  ................................... at 34:6&gt;\n&lt;WordToken      'procedure'  ........................... at 34:7&gt;\n&lt;CharacterToken ';'  ................................... at 34:16&gt;\n&lt;LinebreakToken ---------------------------------------- at 34:17&gt;\n&lt;IndentToken    '\\t'  .................................. at 35:1&gt;\n&lt;WordToken      'begin'  ............................... at 35:2&gt;\n&lt;LinebreakToken ---------------------------------------- at 35:7&gt;\n&lt;IndentToken    '\\t'  .................................. at 36:1&gt;\n&lt;WordToken      'end'  ................................. at 36:2&gt;\n&lt;SpaceToken     ' '  ................................... at 36:5&gt;\n&lt;WordToken      'function'  ............................ at 36:6&gt;\n&lt;LinebreakToken ---------------------------------------- at 36:14&gt;\n&lt;WordToken      'end'  ................................. at 37:1&gt;\n&lt;SpaceToken     ' '  ................................... at 37:4&gt;\n&lt;WordToken      'package'  ............................. at 37:5&gt;\n&lt;SpaceToken     ' '  ................................... at 37:12&gt;\n&lt;WordToken      'body'  ................................ at 37:13&gt;\n&lt;CharacterToken ';'  ................................... at 37:17&gt;\n&lt;LinebreakToken ---------------------------------------- at 37:18&gt;\n</code></pre>\n<p><a href=\"https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/TokenStream_Example_1.png\" rel=\"nofollow\"><img alt=\"Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34e7e84c77cc25ea80bc7fc7d1f39ba167a1913d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5061656262656c732f70795648444c5061727365722f6d61737465722f646f63732f73637265656e732f546f6b656e53747265616d5f4578616d706c655f312e706e67\"></a></p>\n<h3>Step 2</h3>\n<p>The token stream from step 1 is translated into typed tokens like\n<code>DelimiterToken</code> (:), <code>EndToken</code> (;) or subtypes of <code>KeywordToken</code>.\nThese tokens are then grouped into blocks.</p>\n<p>The example generates:</p>\n<pre><code>[StartOfDocumentBlock]\n[Blocks.CommentBlock            '-- Copryright 2016\\n'                                         at (line:   1, col:  1) .. (line:   1, col: 19)]\n[Library.LibraryBlock           'library '                                                     at (line:   2, col:  1) .. (line:   2, col:  8)]\n[Library.LibraryNameBlock       'IEEE'                                                         at (line:   2, col:  9) .. (line:   2, col: 13)]\n[Library.LibraryEndBlock        ';'                                                            at (line:   2, col: 13) .. (line:   2, col: 13)]\n[LinebreakBlock                                                                                at (line:   2, col: 14) .. (line:   2, col: 14)]\n[Use.UseBlock                   'use     '                                                     at (line:   3, col:  1) .. (line:   3, col:  8)]\n[Use.UseNameBlock               'IEEE.std_logic_1164.all'                                      at (line:   3, col:  9) .. (line:   3, col: 32)]\n[Use.UseEndBlock                ';'                                                            at (line:   3, col: 32) .. (line:   3, col: 32)]\n[LinebreakBlock                                                                                at (line:   3, col: 33) .. (line:   3, col: 33)]\n[EmptyLineBlock                                                                                at (line:   4, col:  1) .. (line:   4, col:  1)]\n[Entity.NameBlock               'entity myEntity is'                                           at (line:   5, col:  1) .. (line:   5, col: 19)]\n[LinebreakBlock                                                                                at (line:   5, col: 19) .. (line:   5, col: 19)]\n[IndentationBlock                length=1 (2)                                                  at (line:   6, col:  1) .. (line:   6, col:  1)]\n[GenericList.OpenBlock          'generic ('                                                    at (line:   6, col:  2) .. (line:   6, col: 10)]\n[LinebreakBlock                                                                                at (line:   6, col: 11) .. (line:   6, col: 11)]\n[IndentationBlock                length=2 (4)                                                  at (line:   7, col:  1) .. (line:   7, col:  2)]\n[GenericList.ItemBlock          'BITS : positive := 8\\n\\t'                                     at (line:   7, col:  3) .. (line:   8, col:  1)]\n[GenericList.CloseBlock         ');'                                                           at (line:   8, col:  2) .. (line:   8, col:  3)]\n[LinebreakBlock                                                                                at (line:   8, col:  4) .. (line:   8, col:  4)]\n[IndentationBlock                length=1 (2)                                                  at (line:   9, col:  1) .. (line:   9, col:  1)]\n[PortList.OpenBlock             'port ('                                                       at (line:   9, col:  2) .. (line:   9, col:  7)]\n[LinebreakBlock                                                                                at (line:   9, col:  8) .. (line:   9, col:  8)]\n[IndentationBlock                length=2 (4)                                                  at (line:  10, col:  1) .. (line:  10, col:  2)]\n[PortList.ItemBlock             'Clock   : in  std_logic'                                      at (line:  10, col:  3) .. (line:  10, col: 26)]\n[PortList.DelimiterBlock        ';'                                                            at (line:  10, col: 26) .. (line:  10, col: 26)]\n[LinebreakBlock                                                                                at (line:  10, col: 27) .. (line:  10, col: 27)]\n[IndentationBlock                length=2 (4)                                                  at (line:  11, col:  1) .. (line:  11, col:  2)]\n[PortList.ItemBlock             'Output\\t: out\\tstd_logic_vector(BITS - 1 downto 0)\\n\\t'       at (line:  11, col:  3) .. (line:  12, col:  1)]\n[PortList.CloseBlock            ');'                                                           at (line:  12, col:  2) .. (line:  12, col:  3)]\n[LinebreakBlock                                                                                at (line:  12, col:  4) .. (line:  12, col:  4)]\n[Entity.EndBlock                'end entity;'                                                  at (line:  13, col:  1) .. (line:  13, col: 11)]\n[LinebreakBlock                                                                                at (line:  13, col: 12) .. (line:  13, col: 12)]\n[EmptyLineBlock                                                                                at (line:  14, col:  1) .. (line:  14, col:  1)]\n[Architecture.NameBlock         'architecture rtl of myEntity is'                              at (line:  15, col:  1) .. (line:  15, col: 32)]\n[LinebreakBlock                                                                                at (line:  15, col: 32) .. (line:  15, col: 32)]\n[IndentationBlock                length=1 (2)                                                  at (line:  16, col:  1) .. (line:  16, col:  1)]\n[Constant.ConstantBlock         'constant const0 : integer := 5;'                              at (line:  16, col:  2) .. (line:  16, col: 32)]\n[LinebreakBlock                                                                                at (line:  16, col: 33) .. (line:  16, col: 33)]\n[EmptyLineBlock                                                                                at (line:  17, col:  6) .. (line:  17, col:  6)]\n[IndentationBlock                length=1 (2)                                                  at (line:  18, col:  1) .. (line:  18, col:  1)]\n[Process.OpenBlock              'process('                                                     at (line:  18, col:  2) .. (line:  18, col:  9)]\n[SensitivityList.ItemBlock      'Clock'                                                        at (line:  18, col: 10) .. (line:  18, col: 15)]\n[Process.OpenBlock2*            ')'                                                            at (line:  18, col: 15) .. (line:  18, col: 15)]\n[LinebreakBlock                                                                                at (line:  18, col: 16) .. (line:  18, col: 16)]\n...\n</code></pre>\n<p>The following screenshot shows the resulting stream of blocks:\n<a href=\"https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Example_1.png\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d0bc824ef1344e4c816ec05ca4359c6448e037b6/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5061656262656c732f70795648444c5061727365722f6d61737465722f646f63732f73637265656e732f426c6f636b53747265616d5f4578616d706c655f312e706e67\"></a></p>\n<p>[outdated]\nThe block stream can also be \"opened\" to show the stream of tokens within each block. This is shown in the next screenshot:\n<a href=\"https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Uses_Detailed.png\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9fb519ed2fed7203539c9ce2e44a32fe879e431/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5061656262656c732f70795648444c5061727365722f6d61737465722f646f63732f73637265656e732f426c6f636b53747265616d5f557365735f44657461696c65642e706e67\"></a></p>\n<h3>Step 3</h3>\n<p>The stream of blocks from step 2 is transformed into a stream of groups.</p>\n<h3>Step 4</h3>\n<p>One of many post processing steps could be to remove whitespaces, indentation and comment blocks. So a filter can be applied to remove these block types. Additionally, multiparted blocks (e.g. if a comment or linebreak was inserted between consecutive code sequences, which belong to one block) can be fused to one single block.</p>\n<p>This screenshot shows the filtered results:\n<a href=\"https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Uses_Fused.png\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7b9f227b71eb9e8ea7f0876f6d40c4dfa0c462c/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5061656262656c732f70795648444c5061727365722f6d61737465722f646f63732f73637265656e732f426c6f636b53747265616d5f557365735f46757365642e706e67\"></a></p>\n<h2>Example 2 - Simple_1</h2>\n<p>This is an input file:</p>\n<pre><span class=\"c1\">-- Copryright 2016</span>\n<span class=\"k\">library</span> <span class=\"nn\">IEEE</span><span class=\"p\">;</span>\n<span class=\"k\">use</span>     <span class=\"nn\">IEEE.std_logic_1164.</span><span class=\"k\">all</span><span class=\"p\">;</span>\n<span class=\"k\">use</span>      <span class=\"nn\">IEEE.numeric_std.</span><span class=\"k\">all</span><span class=\"p\">;</span>\n\n<span class=\"k\">entity</span> <span class=\"nc\">myEntity</span> <span class=\"k\">is</span>\n  <span class=\"k\">generic</span> <span class=\"p\">(</span>\n    <span class=\"n\">BITS</span> <span class=\"o\">:</span> <span class=\"kt\">positive</span> <span class=\"o\">:=</span> <span class=\"mi\">8</span>\n  <span class=\"p\">);</span>\n  <span class=\"k\">port</span> <span class=\"p\">(</span>\n    <span class=\"n\">Clock</span>   <span class=\"o\">:</span> <span class=\"k\">in</span>  <span class=\"kt\">std_logic</span><span class=\"p\">;</span>\n    <span class=\"n\">Reset</span>   <span class=\"o\">:</span> <span class=\"k\">in</span>  <span class=\"kt\">std_logic</span><span class=\"p\">;</span>\n    <span class=\"n\">Output</span>  <span class=\"o\">:</span> <span class=\"k\">out</span>  <span class=\"kt\">std_logic_vector</span><span class=\"p\">(</span><span class=\"n\">BITS</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"k\">downto</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">);</span>\n<span class=\"k\">end</span> <span class=\"k\">entity</span><span class=\"p\">;</span>\n\n<span class=\"k\">architecture</span> <span class=\"nc\">rtl</span> <span class=\"k\">of</span> <span class=\"nc\">myEntity</span> <span class=\"k\">is</span>\n\n<span class=\"k\">begin</span>\n\n<span class=\"k\">end</span> <span class=\"k\">architecture</span><span class=\"p\">;</span>\n</pre>\n<p>This is the result stream:\n<a href=\"https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Simple_1.png\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afa4d8bc6c51f7eeb46128b40ac465bb03ce6b91/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5061656262656c732f70795648444c5061727365722f6d61737465722f646f63732f73637265656e732f426c6f636b53747265616d5f53696d706c655f312e706e67\"></a></p>\n<p>And this is the filtered and fused result stream:\n<a href=\"https://raw.githubusercontent.com/Paebbels/pyVHDLParser/master/docs/screens/BlockStream_Simple_1_Fused.png\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aff5c03b1f28d5fabad0deb423cc3fa23843e58a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f5061656262656c732f70795648444c5061727365722f6d61737465722f646f63732f73637265656e732f426c6f636b53747265616d5f53696d706c655f315f46757365642e706e67\"></a></p>\n<h4>License</h4>\n<p>Licensed under <a href=\"LICENSE.md\" rel=\"nofollow\">Apache License 2.0</a>.</p>\n\n          </div>"}, "last_serial": 6414923, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "d50a1fc749c5a9e708a4059c57cd6adf", "sha256": "4a58b17654de98f789011b5cfe5fcbabad38d0f4f04da4ff2f1bdf784d758946"}, "downloads": -1, "filename": "pyVHDLParser-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d50a1fc749c5a9e708a4059c57cd6adf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 197798, "upload_time": "2019-12-26T23:41:01", "upload_time_iso_8601": "2019-12-26T23:41:01.911855Z", "url": "https://files.pythonhosted.org/packages/bf/d8/168a940624a8c97736c95ae98cc87901c80293c450da1cb0e4fddb66d0b7/pyVHDLParser-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eee0c8659131892daf6e0e20ee58e3f0", "sha256": "d3cdbc72c1b761cc8b569d9e0edf9ff45f88340e638d8ee32de824b0a38c2591"}, "downloads": -1, "filename": "pyVHDLParser-0.4.0.tar.gz", "has_sig": false, "md5_digest": "eee0c8659131892daf6e0e20ee58e3f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 75055, "upload_time": "2019-12-26T23:41:04", "upload_time_iso_8601": "2019-12-26T23:41:04.494565Z", "url": "https://files.pythonhosted.org/packages/71/8e/5a1b99e2a0a0e2bbe3a7b5c2b450feb0407eb69a70c1527c98a3f8be7824/pyVHDLParser-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "21d51171ff6951e1212b9102f15336f2", "sha256": "6b568a2ff82e68663cd2a3455cff77a37477239a5ef081baed61a686010a6be2"}, "downloads": -1, "filename": "pyVHDLParser-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "21d51171ff6951e1212b9102f15336f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 202060, "upload_time": "2019-12-27T10:26:47", "upload_time_iso_8601": "2019-12-27T10:26:47.199705Z", "url": "https://files.pythonhosted.org/packages/98/d2/7d6effde0b5b9e09ac362d461d27af5e3fe75366c7bac302119d1d5f6637/pyVHDLParser-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b767212d4031c05d677d5d689b5db90", "sha256": "ecc827f49cd00ff9991c30a9ee86b47306b1cb2f08d0514165e0f1d4d748fdde"}, "downloads": -1, "filename": "pyVHDLParser-0.4.1.tar.gz", "has_sig": false, "md5_digest": "6b767212d4031c05d677d5d689b5db90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 75908, "upload_time": "2019-12-27T10:26:48", "upload_time_iso_8601": "2019-12-27T10:26:48.886419Z", "url": "https://files.pythonhosted.org/packages/9d/ef/629f4f245f08b1d98a0a06a38f97e753ba5eeeea5f049c5dd44e88b9c69d/pyVHDLParser-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "fa9aaf819e46fa49f2575b880b7db322", "sha256": "2a771629e6b8bdd7be0fba0411346317825504139af9a985143405fd0149807b"}, "downloads": -1, "filename": "pyVHDLParser-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fa9aaf819e46fa49f2575b880b7db322", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 202522, "upload_time": "2019-12-27T21:41:40", "upload_time_iso_8601": "2019-12-27T21:41:40.651083Z", "url": "https://files.pythonhosted.org/packages/bf/af/96f8b3f1210485876f9a85c97a10650b17e8b78a08c3cf1d133772eb67e9/pyVHDLParser-0.4.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2411a47caf2edf4587b4d164678baa26", "sha256": "07f0ae8b1449f81742b5cb07cf64b43e256a166af91b033d094cee1799e23e5b"}, "downloads": -1, "filename": "pyVHDLParser-0.4.2.tar.gz", "has_sig": false, "md5_digest": "2411a47caf2edf4587b4d164678baa26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 78054, "upload_time": "2019-12-27T21:41:42", "upload_time_iso_8601": "2019-12-27T21:41:42.415460Z", "url": "https://files.pythonhosted.org/packages/99/96/50ac1f36f57d223097d2cf545c825214d6a60cc653672813c0a1f075bc89/pyVHDLParser-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "45f216dc2362a487e709c5378e985415", "sha256": "3835710b457858cfcf446199d6804b92c7d8ed8c883a95c6330676115bc727e2"}, "downloads": -1, "filename": "pyVHDLParser-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "45f216dc2362a487e709c5378e985415", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 210917, "upload_time": "2020-01-08T12:27:26", "upload_time_iso_8601": "2020-01-08T12:27:26.646670Z", "url": "https://files.pythonhosted.org/packages/d8/0d/a221dd3ce6cf385ae6e7db05688885542ca266c5536e7fbc4d82c47d84c5/pyVHDLParser-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfdebaebb65eabc017ec2c2e483fbb90", "sha256": "6fe6e845b6f42a79d0be633d2de936516eb15d342d4c5d6c0ac266c367f6a72a"}, "downloads": -1, "filename": "pyVHDLParser-0.4.3.tar.gz", "has_sig": false, "md5_digest": "cfdebaebb65eabc017ec2c2e483fbb90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 80982, "upload_time": "2020-01-08T12:27:28", "upload_time_iso_8601": "2020-01-08T12:27:28.483169Z", "url": "https://files.pythonhosted.org/packages/8c/5c/9226d358b67f866bc761a9ca00cede0612c5ed1a7becde8df89ed70c214c/pyVHDLParser-0.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "45f216dc2362a487e709c5378e985415", "sha256": "3835710b457858cfcf446199d6804b92c7d8ed8c883a95c6330676115bc727e2"}, "downloads": -1, "filename": "pyVHDLParser-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "45f216dc2362a487e709c5378e985415", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 210917, "upload_time": "2020-01-08T12:27:26", "upload_time_iso_8601": "2020-01-08T12:27:26.646670Z", "url": "https://files.pythonhosted.org/packages/d8/0d/a221dd3ce6cf385ae6e7db05688885542ca266c5536e7fbc4d82c47d84c5/pyVHDLParser-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfdebaebb65eabc017ec2c2e483fbb90", "sha256": "6fe6e845b6f42a79d0be633d2de936516eb15d342d4c5d6c0ac266c367f6a72a"}, "downloads": -1, "filename": "pyVHDLParser-0.4.3.tar.gz", "has_sig": false, "md5_digest": "cfdebaebb65eabc017ec2c2e483fbb90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 80982, "upload_time": "2020-01-08T12:27:28", "upload_time_iso_8601": "2020-01-08T12:27:28.483169Z", "url": "https://files.pythonhosted.org/packages/8c/5c/9226d358b67f866bc761a9ca00cede0612c5ed1a7becde8df89ed70c214c/pyVHDLParser-0.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:01 2020"}