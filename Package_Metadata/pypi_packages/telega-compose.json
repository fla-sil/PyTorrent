{"info": {"author": "Django Stars", "author_email": "alexander.ryabtsev@djangostars.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Utilities"], "description": "telega-compose\n--------------\n\n.. image:: https://travis-ci.org/django-stars/telega-compose.svg?branch=master\n    :target: https://travis-ci.org/django-stars/telega-compose\n\n.. image:: https://codecov.io/gh/django-stars/telega-compose/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/django-stars/telega-compose\n\n.. image:: https://badge.fury.io/py/telega-compose.svg\n    :target: https://badge.fury.io/py/telega-compose\n\nThis is a wrapper on `docker-compose`_, which extends `compose file`_ syntax to keep several configurations (states) of your services in one file, with similar to docker-compose file syntax using native YAML `anchors and aliases`_.\n\nHow it works:\n=============\n\n- Render in-memory docker-compose file for required state from states file.\n- Call docker-compose app with rendered file (state) and apply required docker-compose command on it.\n\nStates file reference:\n======================\n\nIt's a YAML file with two required sections: **compose** and **states**.\n\nSection **compose** is regular docker-compose config excluding `services`_ section:\n\n.. code-block:: yaml\n\n    compose:\n      version: '3.4'\n      configs:\n        my_config:\n          file: ./my_config.txt\n        my_other_config:\n          external: true\n      secrets:\n        my_secret:\n          file: ./my_secret.txt\n        my_other_secret:\n          external: true\n      volumes:\n        data:\n        media:\n\n\nSection **states** is a list of states with description of `services`_ section for each state:\n\n.. code-block:: yaml\n\n    states:\n      live:\n        services:\n          backend: *backend_service\n          database: *database_service\n          webserver: *webserver_service\n\nYou can describe service in separate section or inside **states** section. Also, you can inherit early described service and override some parameters in place:\n\n.. code-block:: yaml\n\n    states:\n      local:\n        services:\n          database: &database_local_service\n            <<: *database_service\n            ports:\n              - \"127.0.0.1:5432:5432\"\n\n\nThe rest of the sections you can use for you own purposes. For example to configure logging for all services:\n\n.. code-block:: yaml\n\n    ---\n    compose:\n      ...\n\n    config:\n      logging: &logging_config\n        driver: \"json-file\"\n        options:\n          max-size: 50m\n\n    components:\n\n      backend: &backend_service\n        ...\n        logging: *logging_config\n\n      database: &database_service\n        ...\n        logging: *logging_config\n\n      webserver: &webserver_service\n        ...\n        logging: *logging_config\n\n    states:\n\n      live:\n        services:\n          backend: *backend_service\n          database: *database_service\n          webserver: *webserver_service\n\nCLI usage:\n==========\n\n.. code-block:: bash\n\n    tcompose [-h] [-f FILE] state [docker-compose parameters]\n\nPositional arguments:\n\n- *state* - state to render docker-compose file\n- *docker-compose parameters* - any `command and its parameters accepted by docker-compose`_ except parameter for docker-compose file (*-f*, *--file*)\n\nOptional arguments:\n\n- *-h*, *--help* - to show help message\n- *-f FILE*, *--file FILE* - path to states file, by default: *states.yml*\n\nExamples:\n\n.. code-block:: bash\n\n     tcompose local_dev config\n     tcompose live -f /path/to/my-custom-states.yml up -d\n     tcompose qa -f /path/to/states.yml --project-name acme up\n\n.. _docker-compose: https://docs.docker.com/compose/\n.. _compose file: https://docs.docker.com/compose/compose-file/\n.. _command and its parameters accepted by docker-compose: https://docs.docker.com/compose/reference/\n.. _anchors and aliases: http://www.yaml.org/spec/1.2/spec.html#id2760395\n.. _services: https://docs.docker.com/compose/compose-file/#service-configuration-reference\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/django-stars/telega-compose", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "telega-compose", "package_url": "https://pypi.org/project/telega-compose/", "platform": "", "project_url": "https://pypi.org/project/telega-compose/", "project_urls": {"Homepage": "https://github.com/django-stars/telega-compose"}, "release_url": "https://pypi.org/project/telega-compose/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Utility to render docker-compose files with different states", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/django-stars/telega-compose\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/django-stars/telega-compose.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8ba00f3e272bcfe8b956ccf142fff2ac8a3eee6/68747470733a2f2f7472617669732d63692e6f72672f646a616e676f2d73746172732f74656c6567612d636f6d706f73652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/django-stars/telega-compose\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/django-stars/telega-compose/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93ee956c1b9f2347e0d524b83b855332f1bde01e/68747470733a2f2f636f6465636f762e696f2f67682f646a616e676f2d73746172732f74656c6567612d636f6d706f73652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://badge.fury.io/py/telega-compose\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/telega-compose.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73757021e91248b4958dbf3b7ef6b44211f60eeb/68747470733a2f2f62616467652e667572792e696f2f70792f74656c6567612d636f6d706f73652e737667\"></a>\n<p>This is a wrapper on <a href=\"https://docs.docker.com/compose/\" rel=\"nofollow\">docker-compose</a>, which extends <a href=\"https://docs.docker.com/compose/compose-file/\" rel=\"nofollow\">compose file</a> syntax to keep several configurations (states) of your services in one file, with similar to docker-compose file syntax using native YAML <a href=\"http://www.yaml.org/spec/1.2/spec.html#id2760395\" rel=\"nofollow\">anchors and aliases</a>.</p>\n<div id=\"how-it-works\">\n<h2>How it works:</h2>\n<ul>\n<li>Render in-memory docker-compose file for required state from states file.</li>\n<li>Call docker-compose app with rendered file (state) and apply required docker-compose command on it.</li>\n</ul>\n</div>\n<div id=\"states-file-reference\">\n<h2>States file reference:</h2>\n<p>It\u2019s a YAML file with two required sections: <strong>compose</strong> and <strong>states</strong>.</p>\n<p>Section <strong>compose</strong> is regular docker-compose config excluding <a href=\"https://docs.docker.com/compose/compose-file/#service-configuration-reference\" rel=\"nofollow\">services</a> section:</p>\n<pre><span class=\"nt\">compose</span><span class=\"p\">:</span>\n  <span class=\"nt\">version</span><span class=\"p\">:</span> <span class=\"s\">'3.4'</span>\n  <span class=\"nt\">configs</span><span class=\"p\">:</span>\n    <span class=\"nt\">my_config</span><span class=\"p\">:</span>\n      <span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">./my_config.txt</span>\n    <span class=\"nt\">my_other_config</span><span class=\"p\">:</span>\n      <span class=\"nt\">external</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n  <span class=\"nt\">secrets</span><span class=\"p\">:</span>\n    <span class=\"nt\">my_secret</span><span class=\"p\">:</span>\n      <span class=\"nt\">file</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">./my_secret.txt</span>\n    <span class=\"nt\">my_other_secret</span><span class=\"p\">:</span>\n      <span class=\"nt\">external</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n  <span class=\"nt\">volumes</span><span class=\"p\">:</span>\n    <span class=\"nt\">data</span><span class=\"p\">:</span>\n    <span class=\"nt\">media</span><span class=\"p\">:</span>\n</pre>\n<p>Section <strong>states</strong> is a list of states with description of <a href=\"https://docs.docker.com/compose/compose-file/#service-configuration-reference\" rel=\"nofollow\">services</a> section for each state:</p>\n<pre><span class=\"nt\">states</span><span class=\"p\">:</span>\n  <span class=\"nt\">live</span><span class=\"p\">:</span>\n    <span class=\"nt\">services</span><span class=\"p\">:</span>\n      <span class=\"nt\">backend</span><span class=\"p\">:</span> <span class=\"nv\">*backend_service</span>\n      <span class=\"nt\">database</span><span class=\"p\">:</span> <span class=\"nv\">*database_service</span>\n      <span class=\"nt\">webserver</span><span class=\"p\">:</span> <span class=\"nv\">*webserver_service</span>\n</pre>\n<p>You can describe service in separate section or inside <strong>states</strong> section. Also, you can inherit early described service and override some parameters in place:</p>\n<pre><span class=\"nt\">states</span><span class=\"p\">:</span>\n  <span class=\"nt\">local</span><span class=\"p\">:</span>\n    <span class=\"nt\">services</span><span class=\"p\">:</span>\n      <span class=\"nt\">database</span><span class=\"p\">:</span> <span class=\"nl\">&amp;database_local_service</span>\n        <span class=\"nt\">&lt;&lt;</span><span class=\"p\">:</span> <span class=\"nv\">*database_service</span>\n        <span class=\"nt\">ports</span><span class=\"p\">:</span>\n          <span class=\"p-Indicator\">-</span> <span class=\"s\">\"127.0.0.1:5432:5432\"</span>\n</pre>\n<p>The rest of the sections you can use for you own purposes. For example to configure logging for all services:</p>\n<pre><span class=\"nn\">---</span>\n<span class=\"nt\">compose</span><span class=\"p\">:</span>\n  <span class=\"l-Scalar-Plain\">...</span>\n\n<span class=\"nt\">config</span><span class=\"p\">:</span>\n  <span class=\"nt\">logging</span><span class=\"p\">:</span> <span class=\"nl\">&amp;logging_config</span>\n    <span class=\"nt\">driver</span><span class=\"p\">:</span> <span class=\"s\">\"json-file\"</span>\n    <span class=\"nt\">options</span><span class=\"p\">:</span>\n      <span class=\"nt\">max-size</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">50m</span>\n\n<span class=\"nt\">components</span><span class=\"p\">:</span>\n\n  <span class=\"nt\">backend</span><span class=\"p\">:</span> <span class=\"nl\">&amp;backend_service</span>\n    <span class=\"l-Scalar-Plain\">...</span>\n    <span class=\"l-Scalar-Plain\">logging</span><span class=\"p-Indicator\">:</span> <span class=\"nv\">*logging_config</span>\n\n  <span class=\"nt\">database</span><span class=\"p\">:</span> <span class=\"nl\">&amp;database_service</span>\n    <span class=\"l-Scalar-Plain\">...</span>\n    <span class=\"l-Scalar-Plain\">logging</span><span class=\"p-Indicator\">:</span> <span class=\"nv\">*logging_config</span>\n\n  <span class=\"nt\">webserver</span><span class=\"p\">:</span> <span class=\"nl\">&amp;webserver_service</span>\n    <span class=\"l-Scalar-Plain\">...</span>\n    <span class=\"l-Scalar-Plain\">logging</span><span class=\"p-Indicator\">:</span> <span class=\"nv\">*logging_config</span>\n\n<span class=\"nt\">states</span><span class=\"p\">:</span>\n\n  <span class=\"nt\">live</span><span class=\"p\">:</span>\n    <span class=\"nt\">services</span><span class=\"p\">:</span>\n      <span class=\"nt\">backend</span><span class=\"p\">:</span> <span class=\"nv\">*backend_service</span>\n      <span class=\"nt\">database</span><span class=\"p\">:</span> <span class=\"nv\">*database_service</span>\n      <span class=\"nt\">webserver</span><span class=\"p\">:</span> <span class=\"nv\">*webserver_service</span>\n</pre>\n</div>\n<div id=\"cli-usage\">\n<h2>CLI usage:</h2>\n<pre>tcompose <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-f FILE<span class=\"o\">]</span> state <span class=\"o\">[</span>docker-compose parameters<span class=\"o\">]</span>\n</pre>\n<p>Positional arguments:</p>\n<ul>\n<li><em>state</em> - state to render docker-compose file</li>\n<li><em>docker-compose parameters</em> - any <a href=\"https://docs.docker.com/compose/reference/\" rel=\"nofollow\">command and its parameters accepted by docker-compose</a> except parameter for docker-compose file (<em>-f</em>, <em>\u2013file</em>)</li>\n</ul>\n<p>Optional arguments:</p>\n<ul>\n<li><em>-h</em>, <em>\u2013help</em> - to show help message</li>\n<li><em>-f FILE</em>, <em>\u2013file FILE</em> - path to states file, by default: <em>states.yml</em></li>\n</ul>\n<p>Examples:</p>\n<pre>tcompose local_dev config\ntcompose live -f /path/to/my-custom-states.yml up -d\ntcompose qa -f /path/to/states.yml --project-name acme up\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3909391, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6e78e9c73597796b3507c47a60c67381", "sha256": "04be537129a0c400b6bed8c8dc1176c00aeefea98d3cad469a06ffbb13ced249"}, "downloads": -1, "filename": "telega-compose-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6e78e9c73597796b3507c47a60c67381", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4752, "upload_time": "2018-05-29T07:43:05", "upload_time_iso_8601": "2018-05-29T07:43:05.760050Z", "url": "https://files.pythonhosted.org/packages/5f/f8/acc00e18e1b17ea75a207f17cbbdb10b3539d26a65f9a6372742aa4b0f08/telega-compose-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0e0dfcfe2538da6bb723eea42f0e9ece", "sha256": "cb28884cf89a6f119df88a39bd9cfb93d970dc6849019b5d8df1f5d0b46c263a"}, "downloads": -1, "filename": "telega-compose-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0e0dfcfe2538da6bb723eea42f0e9ece", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4884, "upload_time": "2018-05-29T14:37:49", "upload_time_iso_8601": "2018-05-29T14:37:49.987467Z", "url": "https://files.pythonhosted.org/packages/52/2d/62f5a977232cd10bcf0cedf2c471eb72da4647d20479914828b01108a5fa/telega-compose-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e0dfcfe2538da6bb723eea42f0e9ece", "sha256": "cb28884cf89a6f119df88a39bd9cfb93d970dc6849019b5d8df1f5d0b46c263a"}, "downloads": -1, "filename": "telega-compose-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0e0dfcfe2538da6bb723eea42f0e9ece", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4884, "upload_time": "2018-05-29T14:37:49", "upload_time_iso_8601": "2018-05-29T14:37:49.987467Z", "url": "https://files.pythonhosted.org/packages/52/2d/62f5a977232cd10bcf0cedf2c471eb72da4647d20479914828b01108a5fa/telega-compose-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:57 2020"}