{"info": {"author": "Faical Yannick Palingwende Congo", "author_email": "yannick.congo@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning"], "description": "This python module and tool is the implementation of a effort to enforce a logic in API endpoint and Backend logic through a single endpoint: logic.\r\nThis endpoint when provided an element id from the backend will bring back a set of critical meta data that is necessary to interact with the element using the API:\r\n- type: The base nature of the element\r\n- endpoints: The diverse HTTP endpoints, methods and in the case of a POST/UPDATE/PUT the template of the envelop.\r\nThis effort concentrates on making Database and API design express the logic of the user interaction by basing it on the logic endpoint.\r\nTo be compliant, an API should provide the logic element id resolver. It should express the map of how to manipulate any element in the backend.\r\nWe are encouraging the design of web apps that care about APIs to follow two stage:\r\nNaming: Models -> Endpoints\r\nStructuring: Fields -> Envelops\r\nLogic: From the four steps in the two stages one will have an ease of building the logical map behind the API.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "api, logic, automation, design, backend, web, app, database, endpoints, type, HTTP", "license": "", "maintainer": "Faical Yannick Palingwende Congo", "maintainer_email": "yannick.congo@gmail.com", "name": "pyapi-logic", "package_url": "https://pypi.org/project/pyapi-logic/", "platform": "", "project_url": "https://pypi.org/project/pyapi-logic/", "project_urls": null, "release_url": "https://pypi.org/project/pyapi-logic/1.0/", "requires_dist": null, "requires_python": null, "summary": "Python implementation of logical API design command line access tool", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This python module and tool is the implementation of a effort to enforce a logic in API endpoint and Backend logic through a single endpoint: logic.\nThis endpoint when provided an element id from the backend will bring back a set of critical meta data that is necessary to interact with the element using the API:\n- type: The base nature of the element\n- endpoints: The diverse HTTP endpoints, methods and in the case of a POST/UPDATE/PUT the template of the envelop.\nThis effort concentrates on making Database and API design express the logic of the user interaction by basing it on the logic endpoint.\nTo be compliant, an API should provide the logic element id resolver. It should express the map of how to manipulate any element in the backend.\nWe are encouraging the design of web apps that care about APIs to follow two stage:\nNaming: Models -&gt; Endpoints\nStructuring: Fields -&gt; Envelops\nLogic: From the four steps in the two stages one will have an ease of building the logical map behind the API.</p>\n\n          </div>"}, "last_serial": 1903182, "releases": {"1.0": []}, "urls": [], "timestamp": "Fri May  8 03:10:28 2020"}