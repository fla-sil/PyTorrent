{"info": {"author": "Worthwhile", "author_email": "devs@worthwhile.com", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "# django-herald\n\n[![Latest PyPI version](https://badge.fury.io/py/django-herald.svg)](https://pypi.python.org/pypi/django-herald)\n[![Build Status](https://travis-ci.org/worthwhile/django-herald.svg?branch=master)](https://travis-ci.org/worthwhile/django-herald)\n[![Coverage Status](https://coveralls.io/repos/github/worthwhile/django-herald/badge.svg?branch=master)](https://coveralls.io/github/worthwhile/django-herald?branch=master)\n\n[![Logo](https://github.com/worthwhile/django-herald/blob/master/logo.png)](https://github.com/worthwhile/django-herald)\n\nA Django messaging library that features:\n\n- Class-based declaration and registry approach, like Django Admin\n- Supports multiple transmission methods (Email, SMS, Slack, etc) per message\n- Browser-based previewing of messages\n- Maintains a history of messaging sending attempts and can view these messages\n- Disabling notifications per user\n\n# Python/Django Support\n\nWe try to make herald support all versions of django that django supports + all versions in between. \n\nFor python, herald supports all versions of python that the above versions of django support.\n\nSo as of herald v0.2 we support django 1.11, 2.0, 2.1, and 2.2, and python 2.7, 3.4, 3.5, 3.6, and 3.7.\n\n## What version of herald do I need if I have django x and python x?\n\nIf the django/python version combination has a `---` in the table, it is not guaranteed to be supported.\n\n|                   | py 2.7   | py 3.3   | py 3.4   | py 3.5   | py 3.6   | py 3.7   |\n|:-----------------:|:--------:|:--------:|:--------:|:--------:|:--------:|:--------:|\n| **dj 1.8**        | <0.2     | <0.2     | <0.2     | <0.2     | ---      | ---      |\n| **dj 1.9 - 1.10** | <0.2     | ---      | <0.2     | <0.2     | ---      | ---      |\n| **dj 1.11**       | \\>=0.1.5 | ---      | \\>=0.1.5 | \\>=0.1.5 | \\>=0.1.5 | ---      |\n| **dj 2.0**        | ---      | ---      | \\>=0.1.5 | \\>=0.1.5 | \\>=0.1.5 | \\>=0.2   |\n| **dj 2.1**        | ---      | ---      | ---      | \\>=0.2   | \\>=0.2   | \\>=0.2   |\n| **dj 2.2**        | ---      | ---      | ---      | \\>=0.2   | \\>=0.2   | \\>=0.2   |\n\n\n# Installation\n\n1. `pip install django-herald`\n2. Add `herald` and `django.contrib.sites` to `INSTALLED_APPS`.\n3. Add herald's URLS:\n\n    ```python\n    if settings.DEBUG:\n        urlpatterns = [\n            url(r'^herald/', include('herald.urls')),\n        ] + urlpatterns\n    ```\n\n# Usage\n\n1. Create a `notifications.py` file in any django app. This is where your notification classes will live. Add a class like this:\n\n```python\nfrom herald import registry\nfrom herald.base import EmailNotification\n\n\nclass WelcomeEmail(EmailNotification):  # extend from EmailNotification for emails\n    template_name = 'welcome_email'  # name of template, without extension\n    subject = 'Welcome'  # subject of email\n\n    def __init__(self, user):  # optionally customize the initialization\n        self.context = {'user': user}  # set context for the template rendering\n        self.to_emails = [user.email]  # set list of emails to send to\n\n    @staticmethod\n    def get_demo_args():  # define a static method to return list of args needed to initialize class for testing\n        from users.models import User\n        return [User.objects.order_by('?')[0]]\n\nregistry.register(WelcomeEmail)  # finally, register your notification class\n\n# Alternatively, a class decorator can be used to register the notification:\n\n@registry.register_decorator()\nclass WelcomeEmail(EmailNotification):\n    ...\n```\n\n\n2. Create templates for rendering the email using this file structure:\n\n        templates/\n            herald/\n                text/\n                    welcome_email.txt\n                html/\n                    welcome_email.html\n\n3. Test how your email looks by navigating to `/herald/`.\n\n4. Send your email wherever you need in your code:\n\n        WelcomeEmail(user).send()\n\n5. View the sent emails in django admin and even be able to resend it.\n\n## Email options\n\nThe following options can be set on the email notification class. For Example:\n\n```\nclass WelcomeEmail(EmailNotification):\n    cc = ['test@example.com']\n```\n\n- `from_email`: (`str`, default: `settings.DEFAULT_FROM_EMAIL`) email address of sender\n- `subject`: (`str`, default: ) email subject\n- `to_emails`: (`List[str]`, default: `None`) list of email strings to send to\n- `bcc`: (`List[str]`, default: `None`) list of email strings to send as bcc\n- `cc`: (`List[str]`, default: `None`) list of email strings to send as cc\n- `headers`: (`dict`, default: `None`) extra headers to be passed along to the `EmailMultiAlternatives` object\n- `reply_to`: (`List[str]`, default: `None`) list of email strings to send as the Reply-To emails\n- `attachments`: (`list`) list of attachments. See \"Email Attachments\" below for more info\n\n\n## Automatically Deleting Old Notifications\n\nHerald can automatically delete old notifications whenever a new notification is sent.\n\nTo enable this, set the `HERALD_NOTIFICATION_RETENTION_TIME` setting to a timedelta instance.\n\nFor example:\n\n```\nHERALD_NOTIFICATION_RETENTION_TIME = timedelta(weeks=8)\n```\n\nWill delete all notifications older than 8 weeks every time a new notification is sent.\n\n## Manually Deleting Old Notifications\n\nThe `delnotifs` command is useful for purging the notification history.\n\nThe default usage will delete everything from sent during today:\n\n```bash\npython manage.py delnotifs\n```\n\nHowever, you can also pass arguments for `start` or `end` dates. `end` is up to, but not including that date.\n\n```bash\npython manage.py delnotifs --start='2016-01-01' --end='2016-01-10'\n```\n\n\n## Asynchronous Email Sending\n\nIf you are sending slightly different emails to a large number of people, it might take quite a while to process. By default, Django will process this all synchronously. For asynchronous support, we recommend django-celery-email. It is very straightfoward to setup and integrate: https://github.com/pmclanahan/django-celery-email\n\n\n## herald.contrib.auth\n\nDjango has built-in support for sending password reset emails. If you would like to send those emails using herald, you can use the notification class in herald.contrib.auth.\n\nFirst, add `herald.contrib.auth` to `INSTALLED_APPS` (in addition to `herald`).\n\nSecond, use the `HeraldPasswordResetForm` in place of django's built in `PasswordResetForm`. This step is entirely dependant on your project structure, but it essentially just involves changing the form class on the password reset view in some way:\n\n```python\n# you may simply just need to override the password reset url like so:\nurl(r'^password_reset/$', password_reset, name='password_reset', {'password_reset_form': HeraldPasswordResetForm}),\n\n# of if you are using something like django-authtools:\nurl(r'^password_reset/$', PasswordResetView.as_view(form_class=HeraldPasswordResetForm), name='password_reset'),\n\n# or you may have a customized version of the password reset view:\nclass MyPasswordResetView(FormView):\n    form_class = HeraldPasswordResetForm  # change the form class here\n\n# or, you may have a custom password reset form already. In that case, you will want to extend from the HeraldPasswordResetForm:\nclass MyPasswordResetForm(HeraldPasswordResetForm):\n    ...\n\n# alternatively, you could even just send the notification wherever you wish, seperate from the form:\nPasswordResetEmail(some_user).send()\n```\n\nThird, you may want to customize the templates for the email. By default, herald will use the `registration/password_reset_email.html` that is provided by django for both the html and text versions of the email. But you can simply override `herald/html/password_reset.html` and/or `herald/text/password_reset.txt` to suit your needs.\n\n## User Disabled Notifications\n\nIf you want to disable certain notifications per user, add a record to the UserNotification table and\nadd notifications to the disabled_notifications many to many table.\n\nFor example:\n\n```python\nuser = User.objects.get(id=user.id)\n\nnotification = Notification.objects.get(notification_class=MyNotification.get_class_path())\n\n# disable the notification\nuser.usernotification.disabled_notifications.add(notification)\n```\n\nBy default, notifications can be disabled.  You can put can_disable = False in your notification class and the system will\npopulate the database with this default.  Your Notification class can also override the verbose_name by setting it in your\ninherited Notification class.  Like this:\n\n```python\nclass MyNotification(EmailNotification):\n    can_disable = False\n    verbose_name = \"My Required Notification\"\n```\n\n## Email Attachments\n\nTo send attachments, assign a list of attachments to the attachments attribute of your EmailNotification instance, or override the get_attachments() method.\n\nEach attachment in the list can be one of the following:\n\n1. A tuple which consists of the filename, the raw attachment data, and the mimetype. It is up to you to get the attachment data. Like this:\n\n```python\nraw_data = get_pdf_data()\n\nemail.attachments = [\n    ('Report.pdf', raw_data, 'application/pdf'),\n    ('report.txt', 'text version of report', 'text/plain')\n]\nemail.send()\n```\n\n2. A MIMEBase object. See the documentation for attachments under EmailMessage Objects/attachments in the Django documentation.\n\n3. A django `File` object.\n\n### Inline Attachments\n\nSometimes you want to embed an image directly into the email content.  Do that by using a MIMEImage assigning a content id header to a MIMEImage, like this:\n\n```python\nemail = WelcomeEmail(user)\nim = get_thumbnail(image_file.name, '600x600', quality=95)\nmy_image = MIMEImage(im.read()) # MIMEImage inherits from MIMEBase\nmy_image.add_header('Content-ID', '<{}>'.format(image_file.name))\n```\n\nYou can refer to these images in your html email templates using the Content ID (cid) like this:\n\n```html\n<img src=\"cid:{{image_file.name}}\" />\n```\n\nYou would of course need to add the \"image_file\" to your template context in the example above.  You can also accomplish this using file operations.  In this example we overrode the get_attachments method of an EmailNotification.\n\n```python\nclass MyNotification(EmailNotification):\n    context = {'hello': 'world'}\n    template_name = 'welcome_email'\n    to_emails = ['somebody@example.com']\n    subject = \"My email test\"\n\n    def get_attachments(self):\n        fp = open('python.jpeg', 'rb')\n        img = MIMEImage(fp.read())\n        img.add_header('Content-ID', '<{}>'.format('python.jpeg'))\n        return [\n            img,\n        ]\n```\n\nAnd in your template you would refer to it like this, and you would not need to add anything to the context:\n\n```html\n    <img src=\"cid:python.jpeg\" />\n```\n\n### Other MIME attachments\n\nYou can also attach any MIMEBase objects as regular attachments, but you must add a content-disposition header, or they will be inaccessible:  \n\n```python\nmy_image.add_header('Content-Disposition', 'attachment; filename=\"python.jpg\"')\n```\n\nAttachments can cause your database to become quite large, so you should be sure to run the management commands to purge the database of old messages.\n\n# Running Tests\n\n```bash\npython runtests.py\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/worthwhile/django-herald/tarball/0.2.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/worthwhile/django-herald/", "keywords": "django,notifications,messaging", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-herald", "package_url": "https://pypi.org/project/django-herald/", "platform": "", "project_url": "https://pypi.org/project/django-herald/", "project_urls": {"Download": "https://github.com/worthwhile/django-herald/tarball/0.2.1", "Homepage": "https://github.com/worthwhile/django-herald/"}, "release_url": "https://pypi.org/project/django-herald/0.2.1/", "requires_dist": ["django (>=1.8)", "six", "jsonpickle"], "requires_python": "", "summary": "Django library for separating the message content from transmission method", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-herald</h1>\n<p><a href=\"https://pypi.python.org/pypi/django-herald\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01146b733d7c83577db432c17e34ed167c579163/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d686572616c642e737667\"></a>\n<a href=\"https://travis-ci.org/worthwhile/django-herald\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b27a2021e6f063d1a21c976d1e8629b1023953b2/68747470733a2f2f7472617669732d63692e6f72672f776f7274687768696c652f646a616e676f2d686572616c642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/worthwhile/django-herald?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f9dd4839f90d536645316e630f9190e448dfbae/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f776f7274687768696c652f646a616e676f2d686572616c642f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"https://github.com/worthwhile/django-herald\" rel=\"nofollow\"><img alt=\"Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21a1560015006b8f5a759d272da5763d245146ea/68747470733a2f2f6769746875622e636f6d2f776f7274687768696c652f646a616e676f2d686572616c642f626c6f622f6d61737465722f6c6f676f2e706e67\"></a></p>\n<p>A Django messaging library that features:</p>\n<ul>\n<li>Class-based declaration and registry approach, like Django Admin</li>\n<li>Supports multiple transmission methods (Email, SMS, Slack, etc) per message</li>\n<li>Browser-based previewing of messages</li>\n<li>Maintains a history of messaging sending attempts and can view these messages</li>\n<li>Disabling notifications per user</li>\n</ul>\n<h1>Python/Django Support</h1>\n<p>We try to make herald support all versions of django that django supports + all versions in between.</p>\n<p>For python, herald supports all versions of python that the above versions of django support.</p>\n<p>So as of herald v0.2 we support django 1.11, 2.0, 2.1, and 2.2, and python 2.7, 3.4, 3.5, 3.6, and 3.7.</p>\n<h2>What version of herald do I need if I have django x and python x?</h2>\n<p>If the django/python version combination has a <code>---</code> in the table, it is not guaranteed to be supported.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">py 2.7</th>\n<th align=\"center\">py 3.3</th>\n<th align=\"center\">py 3.4</th>\n<th align=\"center\">py 3.5</th>\n<th align=\"center\">py 3.6</th>\n<th align=\"center\">py 3.7</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><strong>dj 1.8</strong></td>\n<td align=\"center\">&lt;0.2</td>\n<td align=\"center\">&lt;0.2</td>\n<td align=\"center\">&lt;0.2</td>\n<td align=\"center\">&lt;0.2</td>\n<td align=\"center\">---</td>\n<td align=\"center\">---</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>dj 1.9 - 1.10</strong></td>\n<td align=\"center\">&lt;0.2</td>\n<td align=\"center\">---</td>\n<td align=\"center\">&lt;0.2</td>\n<td align=\"center\">&lt;0.2</td>\n<td align=\"center\">---</td>\n<td align=\"center\">---</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>dj 1.11</strong></td>\n<td align=\"center\">&gt;=0.1.5</td>\n<td align=\"center\">---</td>\n<td align=\"center\">&gt;=0.1.5</td>\n<td align=\"center\">&gt;=0.1.5</td>\n<td align=\"center\">&gt;=0.1.5</td>\n<td align=\"center\">---</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>dj 2.0</strong></td>\n<td align=\"center\">---</td>\n<td align=\"center\">---</td>\n<td align=\"center\">&gt;=0.1.5</td>\n<td align=\"center\">&gt;=0.1.5</td>\n<td align=\"center\">&gt;=0.1.5</td>\n<td align=\"center\">&gt;=0.2</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>dj 2.1</strong></td>\n<td align=\"center\">---</td>\n<td align=\"center\">---</td>\n<td align=\"center\">---</td>\n<td align=\"center\">&gt;=0.2</td>\n<td align=\"center\">&gt;=0.2</td>\n<td align=\"center\">&gt;=0.2</td>\n</tr>\n<tr>\n<td align=\"center\"><strong>dj 2.2</strong></td>\n<td align=\"center\">---</td>\n<td align=\"center\">---</td>\n<td align=\"center\">---</td>\n<td align=\"center\">&gt;=0.2</td>\n<td align=\"center\">&gt;=0.2</td>\n<td align=\"center\">&gt;=0.2</td>\n</tr></tbody></table>\n<h1>Installation</h1>\n<ol>\n<li>\n<p><code>pip install django-herald</code></p>\n</li>\n<li>\n<p>Add <code>herald</code> and <code>django.contrib.sites</code> to <code>INSTALLED_APPS</code>.</p>\n</li>\n<li>\n<p>Add herald's URLS:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">:</span>\n    <span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^herald/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'herald.urls'</span><span class=\"p\">)),</span>\n    <span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">urlpatterns</span>\n</pre>\n</li>\n</ol>\n<h1>Usage</h1>\n<ol>\n<li>Create a <code>notifications.py</code> file in any django app. This is where your notification classes will live. Add a class like this:</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">herald</span> <span class=\"kn\">import</span> <span class=\"n\">registry</span>\n<span class=\"kn\">from</span> <span class=\"nn\">herald.base</span> <span class=\"kn\">import</span> <span class=\"n\">EmailNotification</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">WelcomeEmail</span><span class=\"p\">(</span><span class=\"n\">EmailNotification</span><span class=\"p\">):</span>  <span class=\"c1\"># extend from EmailNotification for emails</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'welcome_email'</span>  <span class=\"c1\"># name of template, without extension</span>\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"s1\">'Welcome'</span>  <span class=\"c1\"># subject of email</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">):</span>  <span class=\"c1\"># optionally customize the initialization</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"p\">}</span>  <span class=\"c1\"># set context for the template rendering</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">to_emails</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">]</span>  <span class=\"c1\"># set list of emails to send to</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_demo_args</span><span class=\"p\">():</span>  <span class=\"c1\"># define a static method to return list of args needed to initialize class for testing</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">users.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'?'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">WelcomeEmail</span><span class=\"p\">)</span>  <span class=\"c1\"># finally, register your notification class</span>\n\n<span class=\"c1\"># Alternatively, a class decorator can be used to register the notification:</span>\n\n<span class=\"nd\">@registry</span><span class=\"o\">.</span><span class=\"n\">register_decorator</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">WelcomeEmail</span><span class=\"p\">(</span><span class=\"n\">EmailNotification</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<ol>\n<li>\n<p>Create templates for rendering the email using this file structure:</p>\n<pre><code> templates/\n     herald/\n         text/\n             welcome_email.txt\n         html/\n             welcome_email.html\n</code></pre>\n</li>\n<li>\n<p>Test how your email looks by navigating to <code>/herald/</code>.</p>\n</li>\n<li>\n<p>Send your email wherever you need in your code:</p>\n<pre><code> WelcomeEmail(user).send()\n</code></pre>\n</li>\n<li>\n<p>View the sent emails in django admin and even be able to resend it.</p>\n</li>\n</ol>\n<h2>Email options</h2>\n<p>The following options can be set on the email notification class. For Example:</p>\n<pre><code>class WelcomeEmail(EmailNotification):\n    cc = ['test@example.com']\n</code></pre>\n<ul>\n<li><code>from_email</code>: (<code>str</code>, default: <code>settings.DEFAULT_FROM_EMAIL</code>) email address of sender</li>\n<li><code>subject</code>: (<code>str</code>, default: ) email subject</li>\n<li><code>to_emails</code>: (<code>List[str]</code>, default: <code>None</code>) list of email strings to send to</li>\n<li><code>bcc</code>: (<code>List[str]</code>, default: <code>None</code>) list of email strings to send as bcc</li>\n<li><code>cc</code>: (<code>List[str]</code>, default: <code>None</code>) list of email strings to send as cc</li>\n<li><code>headers</code>: (<code>dict</code>, default: <code>None</code>) extra headers to be passed along to the <code>EmailMultiAlternatives</code> object</li>\n<li><code>reply_to</code>: (<code>List[str]</code>, default: <code>None</code>) list of email strings to send as the Reply-To emails</li>\n<li><code>attachments</code>: (<code>list</code>) list of attachments. See \"Email Attachments\" below for more info</li>\n</ul>\n<h2>Automatically Deleting Old Notifications</h2>\n<p>Herald can automatically delete old notifications whenever a new notification is sent.</p>\n<p>To enable this, set the <code>HERALD_NOTIFICATION_RETENTION_TIME</code> setting to a timedelta instance.</p>\n<p>For example:</p>\n<pre><code>HERALD_NOTIFICATION_RETENTION_TIME = timedelta(weeks=8)\n</code></pre>\n<p>Will delete all notifications older than 8 weeks every time a new notification is sent.</p>\n<h2>Manually Deleting Old Notifications</h2>\n<p>The <code>delnotifs</code> command is useful for purging the notification history.</p>\n<p>The default usage will delete everything from sent during today:</p>\n<pre>python manage.py delnotifs\n</pre>\n<p>However, you can also pass arguments for <code>start</code> or <code>end</code> dates. <code>end</code> is up to, but not including that date.</p>\n<pre>python manage.py delnotifs --start<span class=\"o\">=</span><span class=\"s1\">'2016-01-01'</span> --end<span class=\"o\">=</span><span class=\"s1\">'2016-01-10'</span>\n</pre>\n<h2>Asynchronous Email Sending</h2>\n<p>If you are sending slightly different emails to a large number of people, it might take quite a while to process. By default, Django will process this all synchronously. For asynchronous support, we recommend django-celery-email. It is very straightfoward to setup and integrate: <a href=\"https://github.com/pmclanahan/django-celery-email\" rel=\"nofollow\">https://github.com/pmclanahan/django-celery-email</a></p>\n<h2>herald.contrib.auth</h2>\n<p>Django has built-in support for sending password reset emails. If you would like to send those emails using herald, you can use the notification class in herald.contrib.auth.</p>\n<p>First, add <code>herald.contrib.auth</code> to <code>INSTALLED_APPS</code> (in addition to <code>herald</code>).</p>\n<p>Second, use the <code>HeraldPasswordResetForm</code> in place of django's built in <code>PasswordResetForm</code>. This step is entirely dependant on your project structure, but it essentially just involves changing the form class on the password reset view in some way:</p>\n<pre><span class=\"c1\"># you may simply just need to override the password reset url like so:</span>\n<span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^password_reset/$'</span><span class=\"p\">,</span> <span class=\"n\">password_reset</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'password_reset'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'password_reset_form'</span><span class=\"p\">:</span> <span class=\"n\">HeraldPasswordResetForm</span><span class=\"p\">}),</span>\n\n<span class=\"c1\"># of if you are using something like django-authtools:</span>\n<span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^password_reset/$'</span><span class=\"p\">,</span> <span class=\"n\">PasswordResetView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">form_class</span><span class=\"o\">=</span><span class=\"n\">HeraldPasswordResetForm</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'password_reset'</span><span class=\"p\">),</span>\n\n<span class=\"c1\"># or you may have a customized version of the password reset view:</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyPasswordResetView</span><span class=\"p\">(</span><span class=\"n\">FormView</span><span class=\"p\">):</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">HeraldPasswordResetForm</span>  <span class=\"c1\"># change the form class here</span>\n\n<span class=\"c1\"># or, you may have a custom password reset form already. In that case, you will want to extend from the HeraldPasswordResetForm:</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyPasswordResetForm</span><span class=\"p\">(</span><span class=\"n\">HeraldPasswordResetForm</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"c1\"># alternatively, you could even just send the notification wherever you wish, seperate from the form:</span>\n<span class=\"n\">PasswordResetEmail</span><span class=\"p\">(</span><span class=\"n\">some_user</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n</pre>\n<p>Third, you may want to customize the templates for the email. By default, herald will use the <code>registration/password_reset_email.html</code> that is provided by django for both the html and text versions of the email. But you can simply override <code>herald/html/password_reset.html</code> and/or <code>herald/text/password_reset.txt</code> to suit your needs.</p>\n<h2>User Disabled Notifications</h2>\n<p>If you want to disable certain notifications per user, add a record to the UserNotification table and\nadd notifications to the disabled_notifications many to many table.</p>\n<p>For example:</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n<span class=\"n\">notification</span> <span class=\"o\">=</span> <span class=\"n\">Notification</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">notification_class</span><span class=\"o\">=</span><span class=\"n\">MyNotification</span><span class=\"o\">.</span><span class=\"n\">get_class_path</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># disable the notification</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">usernotification</span><span class=\"o\">.</span><span class=\"n\">disabled_notifications</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">notification</span><span class=\"p\">)</span>\n</pre>\n<p>By default, notifications can be disabled.  You can put can_disable = False in your notification class and the system will\npopulate the database with this default.  Your Notification class can also override the verbose_name by setting it in your\ninherited Notification class.  Like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyNotification</span><span class=\"p\">(</span><span class=\"n\">EmailNotification</span><span class=\"p\">):</span>\n    <span class=\"n\">can_disable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"My Required Notification\"</span>\n</pre>\n<h2>Email Attachments</h2>\n<p>To send attachments, assign a list of attachments to the attachments attribute of your EmailNotification instance, or override the get_attachments() method.</p>\n<p>Each attachment in the list can be one of the following:</p>\n<ol>\n<li>A tuple which consists of the filename, the raw attachment data, and the mimetype. It is up to you to get the attachment data. Like this:</li>\n</ol>\n<pre><span class=\"n\">raw_data</span> <span class=\"o\">=</span> <span class=\"n\">get_pdf_data</span><span class=\"p\">()</span>\n\n<span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">attachments</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s1\">'Report.pdf'</span><span class=\"p\">,</span> <span class=\"n\">raw_data</span><span class=\"p\">,</span> <span class=\"s1\">'application/pdf'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'report.txt'</span><span class=\"p\">,</span> <span class=\"s1\">'text version of report'</span><span class=\"p\">,</span> <span class=\"s1\">'text/plain'</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n</pre>\n<ol>\n<li>\n<p>A MIMEBase object. See the documentation for attachments under EmailMessage Objects/attachments in the Django documentation.</p>\n</li>\n<li>\n<p>A django <code>File</code> object.</p>\n</li>\n</ol>\n<h3>Inline Attachments</h3>\n<p>Sometimes you want to embed an image directly into the email content.  Do that by using a MIMEImage assigning a content id header to a MIMEImage, like this:</p>\n<pre><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">WelcomeEmail</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">get_thumbnail</span><span class=\"p\">(</span><span class=\"n\">image_file</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">'600x600'</span><span class=\"p\">,</span> <span class=\"n\">quality</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">)</span>\n<span class=\"n\">my_image</span> <span class=\"o\">=</span> <span class=\"n\">MIMEImage</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span> <span class=\"c1\"># MIMEImage inherits from MIMEBase</span>\n<span class=\"n\">my_image</span><span class=\"o\">.</span><span class=\"n\">add_header</span><span class=\"p\">(</span><span class=\"s1\">'Content-ID'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;</span><span class=\"si\">{}</span><span class=\"s1\">&gt;'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">image_file</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</pre>\n<p>You can refer to these images in your html email templates using the Content ID (cid) like this:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"cid:{{image_file.name}}\"</span> <span class=\"p\">/&gt;</span>\n</pre>\n<p>You would of course need to add the \"image_file\" to your template context in the example above.  You can also accomplish this using file operations.  In this example we overrode the get_attachments method of an EmailNotification.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyNotification</span><span class=\"p\">(</span><span class=\"n\">EmailNotification</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">}</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s1\">'welcome_email'</span>\n    <span class=\"n\">to_emails</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'somebody@example.com'</span><span class=\"p\">]</span>\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"s2\">\"My email test\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_attachments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'python.jpeg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n        <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">MIMEImage</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n        <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">add_header</span><span class=\"p\">(</span><span class=\"s1\">'Content-ID'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;</span><span class=\"si\">{}</span><span class=\"s1\">&gt;'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">'python.jpeg'</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"n\">img</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n</pre>\n<p>And in your template you would refer to it like this, and you would not need to add anything to the context:</p>\n<pre>    <span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"cid:python.jpeg\"</span> <span class=\"p\">/&gt;</span>\n</pre>\n<h3>Other MIME attachments</h3>\n<p>You can also attach any MIMEBase objects as regular attachments, but you must add a content-disposition header, or they will be inaccessible:</p>\n<pre><span class=\"n\">my_image</span><span class=\"o\">.</span><span class=\"n\">add_header</span><span class=\"p\">(</span><span class=\"s1\">'Content-Disposition'</span><span class=\"p\">,</span> <span class=\"s1\">'attachment; filename=\"python.jpg\"'</span><span class=\"p\">)</span>\n</pre>\n<p>Attachments can cause your database to become quite large, so you should be sure to run the management commands to purge the database of old messages.</p>\n<h1>Running Tests</h1>\n<pre>python runtests.py\n</pre>\n\n          </div>"}, "last_serial": 5437491, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "fb086cd61dafd1ecb10394ad869926e3", "sha256": "d28b48111cb2c3d49f01dd9c931c700168e23d5fa0ace5f5a1bc826521eaa597"}, "downloads": -1, "filename": "django_herald-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fb086cd61dafd1ecb10394ad869926e3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13505, "upload_time": "2016-07-22T16:07:45", "upload_time_iso_8601": "2016-07-22T16:07:45.853240Z", "url": "https://files.pythonhosted.org/packages/dc/ce/3639deae651b3bbb8cbe2188d0fea80b603fcb1be19f603be2d744403d5f/django_herald-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69e88b340ae39b03c9c34b5da1a6b8ab", "sha256": "5e44a117215ae0dd76fc41aa5ed98991561c337c332db358775e498289f28376"}, "downloads": -1, "filename": "django-herald-0.1.1.tar.gz", "has_sig": false, "md5_digest": "69e88b340ae39b03c9c34b5da1a6b8ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9240, "upload_time": "2016-07-22T16:07:48", "upload_time_iso_8601": "2016-07-22T16:07:48.268286Z", "url": "https://files.pythonhosted.org/packages/fd/87/e7134636eaaa7ea4ece038d1443eb82f650526ba5103c86c8a06f4d09b97/django-herald-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "fa7ff829ca07bb7803e62d99ec427b57", "sha256": "94ddbac8e0dbc1c9463fc6d19dab859c0ec4dedfeace5a9a5550ac6332de00f5"}, "downloads": -1, "filename": "django_herald-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa7ff829ca07bb7803e62d99ec427b57", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14885, "upload_time": "2016-07-22T17:17:56", "upload_time_iso_8601": "2016-07-22T17:17:56.034730Z", "url": "https://files.pythonhosted.org/packages/8d/67/36d890fe25d1047abc77cd520c0fed0390a695d5b7c6864abf0e29410d0a/django_herald-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d84016f9b110e59539dd0719194045f3", "sha256": "22c317853156f5eec6c9f2834be562a17f123841949621b3a909a0d8e9eb8c60"}, "downloads": -1, "filename": "django-herald-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d84016f9b110e59539dd0719194045f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9842, "upload_time": "2016-07-22T17:17:58", "upload_time_iso_8601": "2016-07-22T17:17:58.533769Z", "url": "https://files.pythonhosted.org/packages/34/75/5d44b40c9a78a8450a080e84120fcf46cce57f6f416fa996ea4b9d532978/django-herald-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1bdedfe5af8bf673883bcb92a57d0e14", "sha256": "ab0b2666972d212aa97bed728267c5edb46043ae0de5e094e803ce4f79522b01"}, "downloads": -1, "filename": "django_herald-0.1.3-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1bdedfe5af8bf673883bcb92a57d0e14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24144, "upload_time": "2016-12-22T14:46:04", "upload_time_iso_8601": "2016-12-22T14:46:04.914128Z", "url": "https://files.pythonhosted.org/packages/8d/a5/6abc3e037a7f84e5cef60df57b915763cc45f831740804353afd49a0a077/django_herald-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc8520830fc8a56b01e544cdeb598544", "sha256": "bd5990c807cc261cd107094b15a26e8271610d6b949825937ca08bb1550761b8"}, "downloads": -1, "filename": "django-herald-0.1.3.tar.gz", "has_sig": true, "md5_digest": "cc8520830fc8a56b01e544cdeb598544", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16060, "upload_time": "2016-12-22T14:46:07", "upload_time_iso_8601": "2016-12-22T14:46:07.102741Z", "url": "https://files.pythonhosted.org/packages/85/a5/88a5f7f0b0f96d253c56f9f25b4352cf73abd12a46acdf6b8ac4f6224fab/django-herald-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "acef915fd7a27c5bc2c8af6ea94aef21", "sha256": "8488cded08bbb33348d6e593a16b111f7910dd779cc6e2f80000dd5ed66fa5e4"}, "downloads": -1, "filename": "django_herald-0.1.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "acef915fd7a27c5bc2c8af6ea94aef21", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24924, "upload_time": "2017-01-06T20:12:22", "upload_time_iso_8601": "2017-01-06T20:12:22.934541Z", "url": "https://files.pythonhosted.org/packages/f6/59/0310bf58f301d2be614b0f47f9117b3fd4ff0fdb138380be592f9aca6310/django_herald-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7fd272ed2848d0116640c4922144f0c", "sha256": "c5a5ae0946345951aa5e6198aad213e0483718bad5685d5c4557a02bd8503e89"}, "downloads": -1, "filename": "django-herald-0.1.4.tar.gz", "has_sig": true, "md5_digest": "a7fd272ed2848d0116640c4922144f0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16499, "upload_time": "2017-01-06T20:12:24", "upload_time_iso_8601": "2017-01-06T20:12:24.740238Z", "url": "https://files.pythonhosted.org/packages/9b/a6/bd8e38f28ed3791e706910478144b8be63ccc18f7828745f86f09d47bf9a/django-herald-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "d0ba166e5645b4160798307ee8e7bd69", "sha256": "312c861b644ef564f7350d0afce3c1548fe45e60914ec63ca13f420209e43571"}, "downloads": -1, "filename": "django_herald-0.1.5-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "d0ba166e5645b4160798307ee8e7bd69", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25148, "upload_time": "2017-02-10T16:36:48", "upload_time_iso_8601": "2017-02-10T16:36:48.836968Z", "url": "https://files.pythonhosted.org/packages/ba/25/261817725e7bf331234a5eb00c6bca8e2e1e69f70232b54f68e69bc44aaa/django_herald-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8726a353fc623b315bbee37ad5b75ef7", "sha256": "b4be7cbd4e3c5bb17e5a88772a25319d86e70afeeb1a532306ac3fcdac25d1fd"}, "downloads": -1, "filename": "django-herald-0.1.5.tar.gz", "has_sig": true, "md5_digest": "8726a353fc623b315bbee37ad5b75ef7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16749, "upload_time": "2017-02-10T16:36:51", "upload_time_iso_8601": "2017-02-10T16:36:51.178085Z", "url": "https://files.pythonhosted.org/packages/27/67/4ff0be27ddcb57f5c94d0fba0d8ebfa464acaf240cedcde94478a95679a8/django-herald-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "8f916760c0e17d7caf4f8855afd7c47c", "sha256": "b8cb5cc8516186ff1088210f8b0806a07c97e4faedb838239228bdf63e9d7e81"}, "downloads": -1, "filename": "django_herald-0.1.6-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "8f916760c0e17d7caf4f8855afd7c47c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28146, "upload_time": "2017-06-30T14:42:03", "upload_time_iso_8601": "2017-06-30T14:42:03.892157Z", "url": "https://files.pythonhosted.org/packages/fc/96/b9ce0ab2f1a1979e3c99a221c4ce4a327c91c0d92640f2aea99c52a43552/django_herald-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afc832ffb4d2350a71b919f17c0876db", "sha256": "3333c6ecd7ade13a2f4ec47fcaac80e842a9318748cc9af5e4f64bf1cb835be0"}, "downloads": -1, "filename": "django-herald-0.1.6.tar.gz", "has_sig": true, "md5_digest": "afc832ffb4d2350a71b919f17c0876db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19651, "upload_time": "2017-06-30T14:42:06", "upload_time_iso_8601": "2017-06-30T14:42:06.078854Z", "url": "https://files.pythonhosted.org/packages/a5/a4/fb080d0fb427ba38daee84aca29ad9d0c6de01b1410c3809742563003d8f/django-herald-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "a37d3621cb3c8c4463acb70824b0949c", "sha256": "350e40487df620a5ff1b9fc9f8607b64da9eaeab93d47aace574f765944f4831"}, "downloads": -1, "filename": "django_herald-0.1.7-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "a37d3621cb3c8c4463acb70824b0949c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30552, "upload_time": "2017-08-31T12:54:45", "upload_time_iso_8601": "2017-08-31T12:54:45.147527Z", "url": "https://files.pythonhosted.org/packages/96/d2/58dd8076ff57c47122ec5ecbaa427f78379fa32004ab0e7913aa148cde8e/django_herald-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36fe464920c76f3239c126bab7fb91a1", "sha256": "cd6be532460fd08efaa1dbfb2229fa6e8bd4d5607d5b4c2048269fef9e228e68"}, "downloads": -1, "filename": "django-herald-0.1.7.tar.gz", "has_sig": true, "md5_digest": "36fe464920c76f3239c126bab7fb91a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21325, "upload_time": "2017-08-31T12:54:48", "upload_time_iso_8601": "2017-08-31T12:54:48.396966Z", "url": "https://files.pythonhosted.org/packages/51/eb/436a195ad48de0e6ce7dfe7c65501b860b638ebec5901e58ac15cb317079/django-herald-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "1fb87069ccf11ae996b57bd7aa58978e", "sha256": "1b0f2970c03b402e810d1f6e7c49d63386b89ebf2b2c1f61d5f1e361a85be45d"}, "downloads": -1, "filename": "django_herald-0.1.8-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1fb87069ccf11ae996b57bd7aa58978e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30478, "upload_time": "2017-09-05T19:27:29", "upload_time_iso_8601": "2017-09-05T19:27:29.815276Z", "url": "https://files.pythonhosted.org/packages/a0/e7/e5bafb5ef7175a001f89efee08e6d3bb9e9c93f178c91fea631c45e46aee/django_herald-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "529c617227e9d247db657da997b2a443", "sha256": "95f96f62d816707347739205ac6b443be96030994a5c16a6b936e764e0d88569"}, "downloads": -1, "filename": "django-herald-0.1.8.tar.gz", "has_sig": true, "md5_digest": "529c617227e9d247db657da997b2a443", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21253, "upload_time": "2017-09-05T19:27:31", "upload_time_iso_8601": "2017-09-05T19:27:31.749561Z", "url": "https://files.pythonhosted.org/packages/0a/08/a5c2618c6aea63b9860c9ab2de27263a4b7876b8402d2dc47ab457bfdc55/django-herald-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "e19a7de0427b59752733ce50d35de635", "sha256": "859984fe0a49aba9a3c93be18d33e37c3413d2868b3eb94d621ab06da7541c67"}, "downloads": -1, "filename": "django_herald-0.1.9-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "e19a7de0427b59752733ce50d35de635", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 31010, "upload_time": "2017-10-09T14:30:53", "upload_time_iso_8601": "2017-10-09T14:30:53.868627Z", "url": "https://files.pythonhosted.org/packages/df/1e/db2b8c11c81d8fd0429bcc473820ccf0b9e6bfa1541904764ddba0c098e2/django_herald-0.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35d69b17002c99d33f93086482f74120", "sha256": "f99e51b34820099f02db030eafaf988a7d4035d215b0bfdcd755721294e15d65"}, "downloads": -1, "filename": "django-herald-0.1.9.tar.gz", "has_sig": true, "md5_digest": "35d69b17002c99d33f93086482f74120", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21951, "upload_time": "2017-10-09T14:30:55", "upload_time_iso_8601": "2017-10-09T14:30:55.417048Z", "url": "https://files.pythonhosted.org/packages/57/95/6477bad4a5c3d3c1e1ce8b1b621df5d7b0c9cc850135587e94990c44d0e6/django-herald-0.1.9.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "eddd603e28c0ae7a4bbc53de5bd3fa40", "sha256": "9a078f48bda4753d14655066ff53f30e217937543bd0472efa55607ac430d4e1"}, "downloads": -1, "filename": "django_herald-0.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "eddd603e28c0ae7a4bbc53de5bd3fa40", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 32216, "upload_time": "2018-08-16T20:40:18", "upload_time_iso_8601": "2018-08-16T20:40:18.611914Z", "url": "https://files.pythonhosted.org/packages/8d/47/8ac9c4d53db54e90b178154846f8130437edb32ca384dd383669d091ee97/django_herald-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "072be328b21c55e7326d0ea54f0c7358", "sha256": "2f5325a17b21f691205a9edcab84db5439c6f3282286c3b52f5b4524fcdcc25a"}, "downloads": -1, "filename": "django-herald-0.2.tar.gz", "has_sig": true, "md5_digest": "072be328b21c55e7326d0ea54f0c7358", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22762, "upload_time": "2018-08-16T20:40:20", "upload_time_iso_8601": "2018-08-16T20:40:20.692904Z", "url": "https://files.pythonhosted.org/packages/e1/82/523827cdd133acd23a228ec75d3965e9bd7ad457aa613f8433fdc6607699/django-herald-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "fcfe8079ea6d4c079dc952bf51a3dbe5", "sha256": "dd634f5c63e8f2d058659b725dad4806b74de10780d55640cb858d56ae1bccc8"}, "downloads": -1, "filename": "django_herald-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fcfe8079ea6d4c079dc952bf51a3dbe5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22258, "upload_time": "2019-06-23T14:44:07", "upload_time_iso_8601": "2019-06-23T14:44:07.273992Z", "url": "https://files.pythonhosted.org/packages/b5/90/b36852f078fac616c2a9628ace87fd1467e0a69b21884a0638fba2169eac/django_herald-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fd992ad46bea584e1e9bd265fcd8a6a", "sha256": "8b312e6b9be6fa21acdef513abd723c10ee5ef6c9ebef52977908f79c661ca3d"}, "downloads": -1, "filename": "django-herald-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2fd992ad46bea584e1e9bd265fcd8a6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16508, "upload_time": "2019-06-23T14:44:09", "upload_time_iso_8601": "2019-06-23T14:44:09.048177Z", "url": "https://files.pythonhosted.org/packages/81/de/cc16536f100fc1ebb122ef7c16c1afc055df06e523c32dba18d1884073ca/django-herald-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fcfe8079ea6d4c079dc952bf51a3dbe5", "sha256": "dd634f5c63e8f2d058659b725dad4806b74de10780d55640cb858d56ae1bccc8"}, "downloads": -1, "filename": "django_herald-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fcfe8079ea6d4c079dc952bf51a3dbe5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22258, "upload_time": "2019-06-23T14:44:07", "upload_time_iso_8601": "2019-06-23T14:44:07.273992Z", "url": "https://files.pythonhosted.org/packages/b5/90/b36852f078fac616c2a9628ace87fd1467e0a69b21884a0638fba2169eac/django_herald-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fd992ad46bea584e1e9bd265fcd8a6a", "sha256": "8b312e6b9be6fa21acdef513abd723c10ee5ef6c9ebef52977908f79c661ca3d"}, "downloads": -1, "filename": "django-herald-0.2.1.tar.gz", "has_sig": false, "md5_digest": "2fd992ad46bea584e1e9bd265fcd8a6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16508, "upload_time": "2019-06-23T14:44:09", "upload_time_iso_8601": "2019-06-23T14:44:09.048177Z", "url": "https://files.pythonhosted.org/packages/81/de/cc16536f100fc1ebb122ef7c16c1afc055df06e523c32dba18d1884073ca/django-herald-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:44 2020"}