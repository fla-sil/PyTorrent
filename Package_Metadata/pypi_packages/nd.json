{"info": {"author": "Johannes Hansen", "author_email": "johannes.hansen@ed.ac.uk", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "[![Build Status](https://travis-ci.com/jnhansen/nd.svg?branch=master)](https://travis-ci.com/jnhansen/nd)\n[![codecov](https://codecov.io/gh/jnhansen/nd/branch/master/graph/badge.svg)](https://codecov.io/gh/jnhansen/nd)\n[![Documentation](https://readthedocs.org/projects/nd/badge/?version=latest)](https://nd.readthedocs.io/en/latest/?badge=latest)\n[![PyPI version](https://badge.fury.io/py/nd.svg)](https://badge.fury.io/py/nd)\n\n\n# nd\n\nThis package contains a selection of tools to handle and analyze satellite data.\n``nd`` is making heavy use of the ``xarray`` and ``rasterio`` libraries.\nThe GDAL library is only used via ``rasterio`` as a compatibility layer to enable reading supported file formats.\nInternally, all data is passed around as ``xarray`` Datasets and all provided methods expect this format as inputs.\n`nd.open_dataset` may be used to read any NetCDF file or any GDAL-readable file into an ``xarray.Dataset``.\n\nAn ``xarray.Dataset`` is essentially a Python representation of the NetCDF file format and as such easily reads/writes NetCDF files.\n\n\n## What does this library add?\n\n``xarray`` provides all data structures required for dealing with `n`-dimensional data in Python. ``nd`` explicitly does not aim to add additional data structures or file formats.\nRather, the aim is to bring the various corners of the scientific ecosystem in Python closer together.\n\nAs such, ``nd`` adds functionality to more seamlessly integrate libraries like ``xarray``, ``rasterio``, ``scikit-learn``, etc.\n\nFor example:\n\n * ``nd`` allows to reproject an entire multivariate and multi-temporal dataset between different coordinate systems by wrapping ``rasterio`` methods.\n\n * ``nd`` provides a wrapper for ``scikit-learn`` estimators to easily apply classification algorithms to raster data [in progress].\n\nAdditionally, ``nd`` contains a growing library of algorithms that are especially useful for spatio-temporal datacubes, for example:\n\n * change detection algorithms\n\n * spatio-temporal filters\n\nSince ``xarray`` is our library of choice for representing geospatial raster data, this is also an attempt to promote the use of ``xarray`` and the NetCDF file format in the Earth Observation community.\n\n\n## Why NetCDF?\n\nNetCDF (specifically NetCDF-4) is a highly efficient file format that was built on top of HDF5. It is capable of random access which ties in with indexing and slicing in ``numpy``.\nBecause slices of a large dataset can be accessed independently, it becomes feasible to handle larger-than-memory file sizes. NetCDF-4 also supports data compression using ``zlib``. Random access capability for compressed data is maintained through data chunking.\nFurthermore, NetCDF is designed to be fully self-descriptive. Crucially, it has a concept of named dimensions and coordinates, can store units and arbitrary metadata.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jnhansen/nd", "keywords": "earth observation,satellite data,datacube,remote sensing,geospatial,raster,spacetime", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nd", "package_url": "https://pypi.org/project/nd/", "platform": "", "project_url": "https://pypi.org/project/nd/", "project_urls": {"Homepage": "https://github.com/jnhansen/nd"}, "release_url": "https://pypi.org/project/nd/0.1/", "requires_dist": null, "requires_python": "", "summary": "A Python library for n-dimensional Earth observation data processing", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.com/jnhansen/nd\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e34fc843aee607ab8e4f556682c3c4af15f19d4/68747470733a2f2f7472617669732d63692e636f6d2f6a6e68616e73656e2f6e642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/jnhansen/nd\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8147b995b50037fa3a8d6b9f87862a483c29ff61/68747470733a2f2f636f6465636f762e696f2f67682f6a6e68616e73656e2f6e642f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://nd.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5389976fde0d1d49c70355c7ab24bedebdf98220/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6e642f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://badge.fury.io/py/nd\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/acaefa3ad54a6b5f809af3863f1c0642d66a9fb0/68747470733a2f2f62616467652e667572792e696f2f70792f6e642e737667\"></a></p>\n<h1>nd</h1>\n<p>This package contains a selection of tools to handle and analyze satellite data.\n<code>nd</code> is making heavy use of the <code>xarray</code> and <code>rasterio</code> libraries.\nThe GDAL library is only used via <code>rasterio</code> as a compatibility layer to enable reading supported file formats.\nInternally, all data is passed around as <code>xarray</code> Datasets and all provided methods expect this format as inputs.\n<code>nd.open_dataset</code> may be used to read any NetCDF file or any GDAL-readable file into an <code>xarray.Dataset</code>.</p>\n<p>An <code>xarray.Dataset</code> is essentially a Python representation of the NetCDF file format and as such easily reads/writes NetCDF files.</p>\n<h2>What does this library add?</h2>\n<p><code>xarray</code> provides all data structures required for dealing with <code>n</code>-dimensional data in Python. <code>nd</code> explicitly does not aim to add additional data structures or file formats.\nRather, the aim is to bring the various corners of the scientific ecosystem in Python closer together.</p>\n<p>As such, <code>nd</code> adds functionality to more seamlessly integrate libraries like <code>xarray</code>, <code>rasterio</code>, <code>scikit-learn</code>, etc.</p>\n<p>For example:</p>\n<ul>\n<li>\n<p><code>nd</code> allows to reproject an entire multivariate and multi-temporal dataset between different coordinate systems by wrapping <code>rasterio</code> methods.</p>\n</li>\n<li>\n<p><code>nd</code> provides a wrapper for <code>scikit-learn</code> estimators to easily apply classification algorithms to raster data [in progress].</p>\n</li>\n</ul>\n<p>Additionally, <code>nd</code> contains a growing library of algorithms that are especially useful for spatio-temporal datacubes, for example:</p>\n<ul>\n<li>\n<p>change detection algorithms</p>\n</li>\n<li>\n<p>spatio-temporal filters</p>\n</li>\n</ul>\n<p>Since <code>xarray</code> is our library of choice for representing geospatial raster data, this is also an attempt to promote the use of <code>xarray</code> and the NetCDF file format in the Earth Observation community.</p>\n<h2>Why NetCDF?</h2>\n<p>NetCDF (specifically NetCDF-4) is a highly efficient file format that was built on top of HDF5. It is capable of random access which ties in with indexing and slicing in <code>numpy</code>.\nBecause slices of a large dataset can be accessed independently, it becomes feasible to handle larger-than-memory file sizes. NetCDF-4 also supports data compression using <code>zlib</code>. Random access capability for compressed data is maintained through data chunking.\nFurthermore, NetCDF is designed to be fully self-descriptive. Crucially, it has a concept of named dimensions and coordinates, can store units and arbitrary metadata.</p>\n\n          </div>"}, "last_serial": 5827509, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "5d4e0c0cd4ac96978a615c88bf40e3db", "sha256": "44e7a24cd289ae135e008dcf77b33e07f6b4220a2d9a34593d95587aa37c182c"}, "downloads": -1, "filename": "nd-0.0.0.tar.gz", "has_sig": false, "md5_digest": "5d4e0c0cd4ac96978a615c88bf40e3db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 539470, "upload_time": "2018-11-24T11:44:27", "upload_time_iso_8601": "2018-11-24T11:44:27.478328Z", "url": "https://files.pythonhosted.org/packages/15/5a/dd0f70360ccf9664695a692410d8cd35d11d55224620b80c7e024a64c4af/nd-0.0.0.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "ccfe3254ed514ec5329a00a7f301adba", "sha256": "c0ebd71fd80a6064ed39201ce3e35b0f8978ad7bd8fb4e93e35c8dece4c9ba01"}, "downloads": -1, "filename": "nd-0.1.tar.gz", "has_sig": false, "md5_digest": "ccfe3254ed514ec5329a00a7f301adba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2919481, "upload_time": "2019-09-13T19:44:25", "upload_time_iso_8601": "2019-09-13T19:44:25.534777Z", "url": "https://files.pythonhosted.org/packages/ee/b2/2d13c90e8c259a4d31505e4700aa879614778722d6cca8bf948fb825065b/nd-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ccfe3254ed514ec5329a00a7f301adba", "sha256": "c0ebd71fd80a6064ed39201ce3e35b0f8978ad7bd8fb4e93e35c8dece4c9ba01"}, "downloads": -1, "filename": "nd-0.1.tar.gz", "has_sig": false, "md5_digest": "ccfe3254ed514ec5329a00a7f301adba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2919481, "upload_time": "2019-09-13T19:44:25", "upload_time_iso_8601": "2019-09-13T19:44:25.534777Z", "url": "https://files.pythonhosted.org/packages/ee/b2/2d13c90e8c259a4d31505e4700aa879614778722d6cca8bf948fb825065b/nd-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:46 2020"}