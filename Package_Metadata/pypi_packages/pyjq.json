{"info": {"author": "Omoto Kenji", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: JavaScript", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "pyjq: Binding for jq JSON Processor\n===================================\n\n[![CircleCI](https://circleci.com/gh/doloopwhile/pyjq.svg?style=svg)](https://circleci.com/gh/doloopwhile/pyjq)\n\npyjq is a Python bindings for jq (<http://stedolan.github.io/jq/>).\n\n> jq is like sed for JSON data \u2013 you can use it to slice and filter and\n> map and transform structured data with the same ease that sed, awk,\n> grep and friends let you play with text.\n>\n> <http://stedolan.github.io/jq/>\n\nYou can seamlessly call jq script (like regular expression) and process\nplain python data structure.\n\nFor your information, <https://pypi.python.org/pypi/jq> is a also jq\nbindings but different and incompatible with pyjq.\n\nExample\n-------\n\n```python\n>>> data = dict(\n...     parameters= [\n...         dict(name=\"PKG_TAG_NAME\", value=\"trunk\"),\n...         dict(name=\"GIT_COMMIT\", value=\"master\"),\n...         dict(name=\"TRIGGERED_JOB\", value=\"trunk-buildall\")\n...     ],\n...     id=\"2013-12-27_00-09-37\",\n...     changeSet=dict(items=[], kind=\"git\"),\n... )\n>>> import pyjq\n>>> pyjq.first('.parameters[] | {\"param_name\": .name, \"param_type\":.type}', data)\n{'param_type': None, 'param_name': 'PKG_TAG_NAME'}\n```\n\nInstall\n-------\n\nIt requires build tools such as make, automake, libtool, etc...\n\nYou can install from PyPI by usual way.\n\n    pip install pyjq\n\nAPI\n---\n\nFor jq script, [see its manual](http://stedolan.github.io/jq/manual/).\n\nOnly four APIs are provided:\n\n- `all`\n- `first`\n- `one`\n- `compile`\n\n`all` transforms a value by JSON script and returns all results as a list.\n\n```python\n>>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n>>> pyjq.all('{user, title: .titles[]}', value)\n[{'user': 'stedolan', 'title': 'JQ Primer'}, {'user': 'stedolan', 'title': 'More JQ'}]\n```\n\n`all` takes an optional argument `vars`.\n`vars` is a dictonary of predefined variables for `script`.\nThe values in `vars` are avaiable in the `script` as a `$key`.\nThat is, `vars` works like `--arg` option and `--argjson` option of jq command.\n```python\n>>> pyjq.all('{user, title: .titles[]} | select(.title == $title)', value, vars={\"title\": \"More JQ\"})\n[{'user': 'stedolan', 'title': 'More JQ'}]\n```\n\n`all` takes an optional argument `url`.\nIf `url` is given, the subject of transformation is got from the `url`.\n\n```python\n>> pyjq.all(\".[] | .login\", url=\"https://api.github.com/repos/stedolan/jq/contributors\") # get all contributors of jq\n['nicowilliams', 'stedolan', 'dtolnay', ... ]\n```\n\nAdditionally, `all` takes an optional argument `opener`.\nThe default `opener` will simply download contents by `urllib.request.urlopen` and decode by `json.decode`.\nHowever, you can customize this behavior using custom `opener`.\n\n`first` is almost some to `all` but it `first` returns the first result of transformation.\n\n```python\n>>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n>>> pyjq.all('{user, title: .titles[]}', value)\n[{'user': 'stedolan', 'title': 'JQ Primer'}, {'user': 'stedolan', 'title': 'More JQ'}]\n```\n\n`first` returns `default` when there are no results.\n\n```python\n>>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n>>> pyjq.first('.titles[] | select(test(\"e\"))', value) # The first title which is contains \"e\"\n'JQ Primer'\n```\n\n`first` returns the first result of transformation. It returns `default` when there are no results.\n\n```python\n>>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n>>> pyjq.first('.titles[] | select(test(\"T\"))', value, \"Third JS\") # The first title which is contains \"T\"\n'Third JS'\n```\n\n`one` do also returns the first result of transformation but raise Exception if there are no results.\n\n```python\n>>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n>>> pyjq.one('.titles[] | select(test(\"T\"))', value)\nIndexError: Result of jq is empty\n```\n\nLimitation\n----------\n\njq is a JSON Processor. Therefore pyjq is able to process only\n\"JSON compatible\" data (object made only from str, int, float, list, dict).\n\nQ&A\n---\n\n### How can I process json string got from API by pyjq?\n\nYou should apply `json.loads` in the standard library before pass to pyjq.\n\nAuthor\n------\n[OMOTO Kenji](https://github.com/doloopwhile)\n\nLicense\n-------\n\nReleased under the MIT license. See LICENSE for details.\n\nDevelopment\n-----------\n\n## Pipenv\n\nThis project uses [Pipenv](https://docs.pipenv.org/en/latest/) to manage dependencies.\n\nPlease install development tools with folloing command:\n\n```python\npipenv install --dev -e\n```\n\n## We DO commit `_pyjq.c`\n\nWhen you edit `_pyjq.pyx`, you need to run `pipenv run cython _pyjq.pyx` before to run `pipenv run python setup.py develop`.\nIt is because `setup.py` in this project does not compile .pyx to .c.\n\nOf course, we can use `Cython.Build.cythonize` in setup.py to automatically compile .pyx to .c .\nBut, it cause bootstrap problem in ``pip install``.\n\nSo, we DO commit both of `_pyjq.pyx` and `_pyjq.c`.\n\nLicense\n-------\nMIT License. See [LICENSE](./LICENSE).\n\nThis package includes [jq](https://github.com/stedolan/jq) and [oniguruma](https://github.com/kkos/oniguruma). Their license files are included in archive files.\n\n- jq: `dependencies/jq-1.5.tar.gz`\n- oniguruma: `dependencies/onig-6.9.0.tar.gz`\n\nChangelog\n---------\n\n### 2.4.0\n\n- Dropped support for Python 2.7, 3.4, 3.5 (Supports only 3.6+).\n\n### 2.3.0\n\n- Supported WindowsPE(msys)\n\n### 2.2.0\n\n- Added `library_paths=` option.\n\n### 2.1.0\n\n- API's translate JS object not to `dict` but to `collections.OrderedDict`.\n\n### 2.0.0\n\n- Semantic versioning.\n- Bundle source codes of jq and oniguruma.\n- Supported Python 3.5.\n- Dropped support for Python 3.2.\n- Aeded `all` method.\n\n### 1.0\n\n- First release.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/doloopwhile/pyjq", "keywords": "jq", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pyjq", "package_url": "https://pypi.org/project/pyjq/", "platform": "", "project_url": "https://pypi.org/project/pyjq/", "project_urls": {"Homepage": "http://github.com/doloopwhile/pyjq"}, "release_url": "https://pypi.org/project/pyjq/2.4.0/", "requires_dist": null, "requires_python": "", "summary": "Binding for jq JSON processor.", "version": "2.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyjq: Binding for jq JSON Processor</h1>\n<p><a href=\"https://circleci.com/gh/doloopwhile/pyjq\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a5bf1721e4a3b7c9a75428be72f5f1597470ad2/68747470733a2f2f636972636c6563692e636f6d2f67682f646f6c6f6f707768696c652f70796a712e7376673f7374796c653d737667\"></a></p>\n<p>pyjq is a Python bindings for jq (<a href=\"http://stedolan.github.io/jq/\" rel=\"nofollow\">http://stedolan.github.io/jq/</a>).</p>\n<blockquote>\n<p>jq is like sed for JSON data \u2013 you can use it to slice and filter and\nmap and transform structured data with the same ease that sed, awk,\ngrep and friends let you play with text.</p>\n<p><a href=\"http://stedolan.github.io/jq/\" rel=\"nofollow\">http://stedolan.github.io/jq/</a></p>\n</blockquote>\n<p>You can seamlessly call jq script (like regular expression) and process\nplain python data structure.</p>\n<p>For your information, <a href=\"https://pypi.python.org/pypi/jq\" rel=\"nofollow\">https://pypi.python.org/pypi/jq</a> is a also jq\nbindings but different and incompatible with pyjq.</p>\n<h2>Example</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">parameters</span><span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"o\">...</span>         <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"PKG_TAG_NAME\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"trunk\"</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>         <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"GIT_COMMIT\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"master\"</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>         <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"TRIGGERED_JOB\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">\"trunk-buildall\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"p\">],</span>\n<span class=\"o\">...</span>     <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"2013-12-27_00-09-37\"</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">changeSet</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">\"git\"</span><span class=\"p\">),</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pyjq</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyjq</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"s1\">'.parameters[] | {\"param_name\": .name, \"param_type\":.type}'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'param_type'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'param_name'</span><span class=\"p\">:</span> <span class=\"s1\">'PKG_TAG_NAME'</span><span class=\"p\">}</span>\n</pre>\n<h2>Install</h2>\n<p>It requires build tools such as make, automake, libtool, etc...</p>\n<p>You can install from PyPI by usual way.</p>\n<pre><code>pip install pyjq\n</code></pre>\n<h2>API</h2>\n<p>For jq script, <a href=\"http://stedolan.github.io/jq/manual/\" rel=\"nofollow\">see its manual</a>.</p>\n<p>Only four APIs are provided:</p>\n<ul>\n<li><code>all</code></li>\n<li><code>first</code></li>\n<li><code>one</code></li>\n<li><code>compile</code></li>\n</ul>\n<p><code>all</code> transforms a value by JSON script and returns all results as a list.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"user\"</span><span class=\"p\">:</span><span class=\"s2\">\"stedolan\"</span><span class=\"p\">,</span><span class=\"s2\">\"titles\"</span><span class=\"p\">:[</span><span class=\"s2\">\"JQ Primer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"More JQ\"</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyjq</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"s1\">'{user, title: .titles[]}'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'stedolan'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'JQ Primer'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'stedolan'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'More JQ'</span><span class=\"p\">}]</span>\n</pre>\n<p><code>all</code> takes an optional argument <code>vars</code>.\n<code>vars</code> is a dictonary of predefined variables for <code>script</code>.\nThe values in <code>vars</code> are avaiable in the <code>script</code> as a <code>$key</code>.\nThat is, <code>vars</code> works like <code>--arg</code> option and <code>--argjson</code> option of jq command.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyjq</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"s1\">'{user, title: .titles[]} | select(.title == $title)'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"More JQ\"</span><span class=\"p\">})</span>\n<span class=\"p\">[{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'stedolan'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'More JQ'</span><span class=\"p\">}]</span>\n</pre>\n<p><code>all</code> takes an optional argument <code>url</code>.\nIf <code>url</code> is given, the subject of transformation is got from the <code>url</code>.</p>\n<pre><span class=\"o\">&gt;&gt;</span> <span class=\"n\">pyjq</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"s2\">\".[] | .login\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"https://api.github.com/repos/stedolan/jq/contributors\"</span><span class=\"p\">)</span> <span class=\"c1\"># get all contributors of jq</span>\n<span class=\"p\">[</span><span class=\"s1\">'nicowilliams'</span><span class=\"p\">,</span> <span class=\"s1\">'stedolan'</span><span class=\"p\">,</span> <span class=\"s1\">'dtolnay'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">]</span>\n</pre>\n<p>Additionally, <code>all</code> takes an optional argument <code>opener</code>.\nThe default <code>opener</code> will simply download contents by <code>urllib.request.urlopen</code> and decode by <code>json.decode</code>.\nHowever, you can customize this behavior using custom <code>opener</code>.</p>\n<p><code>first</code> is almost some to <code>all</code> but it <code>first</code> returns the first result of transformation.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"user\"</span><span class=\"p\">:</span><span class=\"s2\">\"stedolan\"</span><span class=\"p\">,</span><span class=\"s2\">\"titles\"</span><span class=\"p\">:[</span><span class=\"s2\">\"JQ Primer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"More JQ\"</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyjq</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"s1\">'{user, title: .titles[]}'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'stedolan'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'JQ Primer'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"s1\">'stedolan'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'More JQ'</span><span class=\"p\">}]</span>\n</pre>\n<p><code>first</code> returns <code>default</code> when there are no results.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"user\"</span><span class=\"p\">:</span><span class=\"s2\">\"stedolan\"</span><span class=\"p\">,</span><span class=\"s2\">\"titles\"</span><span class=\"p\">:[</span><span class=\"s2\">\"JQ Primer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"More JQ\"</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyjq</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"s1\">'.titles[] | select(test(\"e\"))'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"c1\"># The first title which is contains \"e\"</span>\n<span class=\"s1\">'JQ Primer'</span>\n</pre>\n<p><code>first</code> returns the first result of transformation. It returns <code>default</code> when there are no results.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"user\"</span><span class=\"p\">:</span><span class=\"s2\">\"stedolan\"</span><span class=\"p\">,</span><span class=\"s2\">\"titles\"</span><span class=\"p\">:[</span><span class=\"s2\">\"JQ Primer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"More JQ\"</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyjq</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"s1\">'.titles[] | select(test(\"T\"))'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">\"Third JS\"</span><span class=\"p\">)</span> <span class=\"c1\"># The first title which is contains \"T\"</span>\n<span class=\"s1\">'Third JS'</span>\n</pre>\n<p><code>one</code> do also returns the first result of transformation but raise Exception if there are no results.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"user\"</span><span class=\"p\">:</span><span class=\"s2\">\"stedolan\"</span><span class=\"p\">,</span><span class=\"s2\">\"titles\"</span><span class=\"p\">:[</span><span class=\"s2\">\"JQ Primer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"More JQ\"</span><span class=\"p\">]}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pyjq</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">(</span><span class=\"s1\">'.titles[] | select(test(\"T\"))'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"ne\">IndexError</span><span class=\"p\">:</span> <span class=\"n\">Result</span> <span class=\"n\">of</span> <span class=\"n\">jq</span> <span class=\"ow\">is</span> <span class=\"n\">empty</span>\n</pre>\n<h2>Limitation</h2>\n<p>jq is a JSON Processor. Therefore pyjq is able to process only\n\"JSON compatible\" data (object made only from str, int, float, list, dict).</p>\n<h2>Q&amp;A</h2>\n<h3>How can I process json string got from API by pyjq?</h3>\n<p>You should apply <code>json.loads</code> in the standard library before pass to pyjq.</p>\n<h2>Author</h2>\n<p><a href=\"https://github.com/doloopwhile\" rel=\"nofollow\">OMOTO Kenji</a></p>\n<h2>License</h2>\n<p>Released under the MIT license. See LICENSE for details.</p>\n<h2>Development</h2>\n<h2>Pipenv</h2>\n<p>This project uses <a href=\"https://docs.pipenv.org/en/latest/\" rel=\"nofollow\">Pipenv</a> to manage dependencies.</p>\n<p>Please install development tools with folloing command:</p>\n<pre><span class=\"n\">pipenv</span> <span class=\"n\">install</span> <span class=\"o\">--</span><span class=\"n\">dev</span> <span class=\"o\">-</span><span class=\"n\">e</span>\n</pre>\n<h2>We DO commit <code>_pyjq.c</code></h2>\n<p>When you edit <code>_pyjq.pyx</code>, you need to run <code>pipenv run cython _pyjq.pyx</code> before to run <code>pipenv run python setup.py develop</code>.\nIt is because <code>setup.py</code> in this project does not compile .pyx to .c.</p>\n<p>Of course, we can use <code>Cython.Build.cythonize</code> in setup.py to automatically compile .pyx to .c .\nBut, it cause bootstrap problem in <code>pip install</code>.</p>\n<p>So, we DO commit both of <code>_pyjq.pyx</code> and <code>_pyjq.c</code>.</p>\n<h2>License</h2>\n<p>MIT License. See <a href=\"./LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n<p>This package includes <a href=\"https://github.com/stedolan/jq\" rel=\"nofollow\">jq</a> and <a href=\"https://github.com/kkos/oniguruma\" rel=\"nofollow\">oniguruma</a>. Their license files are included in archive files.</p>\n<ul>\n<li>jq: <code>dependencies/jq-1.5.tar.gz</code></li>\n<li>oniguruma: <code>dependencies/onig-6.9.0.tar.gz</code></li>\n</ul>\n<h2>Changelog</h2>\n<h3>2.4.0</h3>\n<ul>\n<li>Dropped support for Python 2.7, 3.4, 3.5 (Supports only 3.6+).</li>\n</ul>\n<h3>2.3.0</h3>\n<ul>\n<li>Supported WindowsPE(msys)</li>\n</ul>\n<h3>2.2.0</h3>\n<ul>\n<li>Added <code>library_paths=</code> option.</li>\n</ul>\n<h3>2.1.0</h3>\n<ul>\n<li>API's translate JS object not to <code>dict</code> but to <code>collections.OrderedDict</code>.</li>\n</ul>\n<h3>2.0.0</h3>\n<ul>\n<li>Semantic versioning.</li>\n<li>Bundle source codes of jq and oniguruma.</li>\n<li>Supported Python 3.5.</li>\n<li>Dropped support for Python 3.2.</li>\n<li>Aeded <code>all</code> method.</li>\n</ul>\n<h3>1.0</h3>\n<ul>\n<li>First release.</li>\n</ul>\n\n          </div>"}, "last_serial": 5848300, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "9fa52399691d3989f262d36c4e5b66da", "sha256": "fc06f90a351ebb05e7ab6c12bb769d7771a0d76df6eb07ea00de137e67c348b5"}, "downloads": -1, "filename": "pyjq-1.0.tar.gz", "has_sig": false, "md5_digest": "9fa52399691d3989f262d36c4e5b66da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60081, "upload_time": "2014-01-08T16:55:48", "upload_time_iso_8601": "2014-01-08T16:55:48.246841Z", "url": "https://files.pythonhosted.org/packages/14/c8/03bc4f41abe4b1e900d9bc1f1cebdb79f998a5563364e6ea1533f7b228f8/pyjq-1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "1372aeaf5bab821eb7522c2c53d1bfb5", "sha256": "c34e69b0bcad21877e82c146d6e13e15f999d429d33b36dac2a18899fda2abc4"}, "downloads": -1, "filename": "pyjq-2.0.0.zip", "has_sig": false, "md5_digest": "1372aeaf5bab821eb7522c2c53d1bfb5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1744963, "upload_time": "2016-02-13T15:45:45", "upload_time_iso_8601": "2016-02-13T15:45:45.270432Z", "url": "https://files.pythonhosted.org/packages/3d/ce/a67e6a4ad12e766f01f67caff3313e876bcfcf4360512194db9af55b80c0/pyjq-2.0.0.zip", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "2d75ad2f2f063b381378e17f1f2a7518", "sha256": "f6f89c851ad90bc29c8570982343ca9ccf626ba9424c276d7fe37bbdc1d60fe2"}, "downloads": -1, "filename": "pyjq-2.1.0.tar.gz", "has_sig": false, "md5_digest": "2d75ad2f2f063b381378e17f1f2a7518", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1783597, "upload_time": "2017-06-28T04:40:08", "upload_time_iso_8601": "2017-06-28T04:40:08.779284Z", "url": "https://files.pythonhosted.org/packages/ec/c1/b5fcba48cb715b88b5ad619d1769204411383e2a275dfddda2d2fa8f99dd/pyjq-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "3032b66926a4248ebd52ea36d3b3922a", "sha256": "1150e9362fcfcb8a53e7dafba1eae8e99931ca990c3f3c922ea8c0028e31db13"}, "downloads": -1, "filename": "pyjq-2.2.0.tar.gz", "has_sig": false, "md5_digest": "3032b66926a4248ebd52ea36d3b3922a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1743159, "upload_time": "2018-07-28T07:59:30", "upload_time_iso_8601": "2018-07-28T07:59:30.061491Z", "url": "https://files.pythonhosted.org/packages/9d/af/311eef77dddb0cd2e65f01778b0cae9a769b6129edf4cb8be1982589bec6/pyjq-2.2.0.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "64c14e7a98370876815ee056b34e2a84", "sha256": "40aa57815b8e5b9781f0e1fe017721f671c9033b776535506f4ee103cf8fa2c0"}, "downloads": -1, "filename": "pyjq-2.3.0.tar.gz", "has_sig": false, "md5_digest": "64c14e7a98370876815ee056b34e2a84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2059081, "upload_time": "2018-12-07T09:08:24", "upload_time_iso_8601": "2018-12-07T09:08:24.276070Z", "url": "https://files.pythonhosted.org/packages/ab/e5/975a4a393c9376f183556b66796b7b8d6589bc49e7db6a2f555b967499dd/pyjq-2.3.0.tar.gz", "yanked": false}], "2.3.1": [{"comment_text": "", "digests": {"md5": "cdc117d755cba30bf5a76a290ce0f5c5", "sha256": "45f7688d8191a4043e7c4839d6cabff8f16abc98fe48c3a4a0cc2da05c62096d"}, "downloads": -1, "filename": "pyjq-2.3.1-cp37-cp37m-macosx_10_12_x86_64.whl", "has_sig": false, "md5_digest": "cdc117d755cba30bf5a76a290ce0f5c5", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 571403, "upload_time": "2019-02-08T04:31:42", "upload_time_iso_8601": "2019-02-08T04:31:42.236244Z", "url": "https://files.pythonhosted.org/packages/54/c4/80f1af2d33b787ee3c92f0083d0cc3b81fed8a5c313c1927008f50562bb3/pyjq-2.3.1-cp37-cp37m-macosx_10_12_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71759c6e1a67a74f2df8027cb9d8861b", "sha256": "5f3cd45b856ae4b42a1058d2e91e13d84df5ea188aedc3ae397dc0e01c270db9"}, "downloads": -1, "filename": "pyjq-2.3.1.tar.gz", "has_sig": false, "md5_digest": "71759c6e1a67a74f2df8027cb9d8861b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2059176, "upload_time": "2018-12-07T09:12:33", "upload_time_iso_8601": "2018-12-07T09:12:33.447628Z", "url": "https://files.pythonhosted.org/packages/66/74/7f5c7789c894a943088040a0c148f7ac5daddf4096cf820e3ff15ae75ea0/pyjq-2.3.1.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "95cac58f2c79bbf3c5224629096c1839", "sha256": "562e62a18d306d4fefe691d2ced951b34e44f0d300da505727cd66e2aa70aa0c"}, "downloads": -1, "filename": "pyjq-2.4.0-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "95cac58f2c79bbf3c5224629096c1839", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 329356, "upload_time": "2019-09-18T07:22:28", "upload_time_iso_8601": "2019-09-18T07:22:28.559125Z", "url": "https://files.pythonhosted.org/packages/c7/95/8d179833f58bd07e11570fd9e51e432a4e000e801554c6fc6ebf6d4e49b6/pyjq-2.4.0-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3d0c4284aae94445754ccd6331ef5e5", "sha256": "651f7a3ab2087e7c69cf00f1ba5433d7afe7b72f4ff499dcaf9c86cb1c2ae3c1"}, "downloads": -1, "filename": "pyjq-2.4.0.tar.gz", "has_sig": false, "md5_digest": "d3d0c4284aae94445754ccd6331ef5e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2033014, "upload_time": "2019-09-18T07:22:47", "upload_time_iso_8601": "2019-09-18T07:22:47.168244Z", "url": "https://files.pythonhosted.org/packages/a5/7c/b7fdc7b9653d5f05552cb08b6e9883db13db21ca0c8b0cd100e5a5ed3a35/pyjq-2.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "95cac58f2c79bbf3c5224629096c1839", "sha256": "562e62a18d306d4fefe691d2ced951b34e44f0d300da505727cd66e2aa70aa0c"}, "downloads": -1, "filename": "pyjq-2.4.0-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "95cac58f2c79bbf3c5224629096c1839", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 329356, "upload_time": "2019-09-18T07:22:28", "upload_time_iso_8601": "2019-09-18T07:22:28.559125Z", "url": "https://files.pythonhosted.org/packages/c7/95/8d179833f58bd07e11570fd9e51e432a4e000e801554c6fc6ebf6d4e49b6/pyjq-2.4.0-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3d0c4284aae94445754ccd6331ef5e5", "sha256": "651f7a3ab2087e7c69cf00f1ba5433d7afe7b72f4ff499dcaf9c86cb1c2ae3c1"}, "downloads": -1, "filename": "pyjq-2.4.0.tar.gz", "has_sig": false, "md5_digest": "d3d0c4284aae94445754ccd6331ef5e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2033014, "upload_time": "2019-09-18T07:22:47", "upload_time_iso_8601": "2019-09-18T07:22:47.168244Z", "url": "https://files.pythonhosted.org/packages/a5/7c/b7fdc7b9653d5f05552cb08b6e9883db13db21ca0c8b0cd100e5a5ed3a35/pyjq-2.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:43 2020"}