{"info": {"author": "XiaoTao Wang", "author_email": "wangxiaotao686@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "HiCPeaks\n========\n*hicpeaks* provide a Python CPU-based implementation for BH-FDR and HiCCUPS, two peak calling algorithms\nfor Hi-C data, proposed by Rao et al [1]_.\n\nInstallation\n============\n*hicpeaks* is developed and tested on UNIX-like operating system, and following packages or softwares are\nrequired:\n\nPython requirements:\n\na) Python 2.7/3.5+\nb) Multiprocess\nc) Numpy\nd) Scipy\ne) Matplotlib\nf) Pandas\ng) Statsmodels\nh) Scikit-Learn\ni) H5py\nj) Cooler\n\nOther requirements:\n\n- ucsc-fetchchromsizes\n\n*conda*, an excellent package manager, can be used to install all requirements above.\n\nInstall Conda\n-------------\n.. note:: If you have the Anaconda Distribution installed, you already have it.\n\nChoose an appropriate `Miniconda installer <https://conda.io/miniconda.html>`_ for your system,\nthen in your terminal window type the following and follow the prompts on the installer screens::\n\n    $ bash Miniconda2-latest-Linux-x86_64.sh\n\nAfter that, update the environment variables to finish the Conda installation::\n\n    $ source ~/.bashrc\n\nInstall Packages through Conda\n------------------------------\nFirst set up the channels to make all packages listed above accessible (note that the order is\nimportant to guarantee the correct priority)::\n\n    $ conda config --add channels defaults\n    $ conda config --add channels bioconda\n    $ conda config --add channels conda-forge\n\nThen just type and execute the following command::\n\n    $ conda install numpy scipy matplotlib pandas statsmodels scikit-learn h5py multiprocess cooler ucsc-fetchchromsizes\n\nInstall hicpeaks\n----------------\nNow download the `hicpeaks source code <https://pypi.org/project/hicpeaks/>`_ from PyPI, extract it and run\nthe setup.py script::\n\n    $ python setup.py install\n\nOverview\n========\n*hicpeaks* comes with 6 scripts: *toCooler*, *pyBHFDR*, *pyHICCUPS*, *combine-resolutions*, *peak-plot* and *apa-analysis*.\n\n- toCooler\n\n  Store TXT/NPZ bin-level Hi-C data into `cooler <https://github.com/mirnylab/cooler>`_ container.\n\n  1. I have included a sample data with *hicpeaks* source code to illustrate how you should prepare your\n     data in TXT format. It's quite easy, just remember 3 points: 1. the file name should follow this pattern\n     \"chrom1_chrom2.txt\" (remove prefix from your chromosome labels, i.e. \"chr1\" should be \"1\", and \"chrX\" should\n     be \"X\"); 2. each file should only contain 3 columns, corresponding to \"bin1\" of \"chrom1\", \"bin2\" of \"chrom2\",\n     and \"contact frequency\" (**don't** perform any normalization processes); 3. all files at the same resolution\n     should be placed under a single folder.\n  2. NPZ format is another bin-level Hi-C data container which can extremely speed up data loading. *hicpeaks*\n     supports NPZ files generated by old version of `runHiC (<0.8.0) <https://github.com/XiaoTaoWang/HiC_pipeline>`_ and\n     `TADLib (<0.4.0) <https://github.com/XiaoTaoWang/TADLib>`_.\n\n- pyBHFDR\n\n  A CPU-based python implementation for BH-FDR algorithm. Rao et al (2014) states in their supplementary material that\n  this algorithm is robust enough to obtain all main results of their paper. Compared with HiCCUPS, BH-FDR doesn't use\n  \u03bb-chunk in multiple hypothesis test, and only considers the Donut background region when calculating the\n  expected values.\n\n- pyHICCUPS\n\n  A CPU-based python implementation for HiCCUPS algorithm. Besides the donut region, HiCCUPS also considers the\n  lower-left, vertical and horizontal backgrounds when calculating the expected values. And \u03bb-chunk is used to overcome\n  several multiple hypothesis testing challenges for Hi-C data. Finally, while BH-FDR has to limit the detected pixels\n  near the diagonal (<2Mb), HiCCUPS is able to generalize itself to any genomic distance in theory. Here, *pyHICCUPS*\n  keeps all main concepts of the original algorithm except for these points:\n\n  1. *pyHICCUPS* excludes vertical and horizontal backgrounds from its calculation.\n  2. There are two critical parameters related to the loop definition in HiCCUPS: the peak width *p* and the donut width *w*.\n     In original implementation, they are set exclusively for each certain resolution, specifically, *p=1* and *w=3* at 25Kb,\n     *p=2* and *w=5* at 10Kb, and *p=4* and *w=7* at 5Kb. To improve the sensitivity, *pyHICCUPS* calculates and outputs\n     the union of the peak calls from all parameter settings *(1,3)*, *(2,5)*, *(4,7)* in a single run.\n  3. Due to computational complexity, you should still limit the genomic distance of 2 loci to some degree (5Mb/10Mb).\n\n- combine-resolutions\n\n  Combine peak calls from different resolutions in a way similar to original *HiCCUPS*. Briefly, it excludes redundant lower\n  resolution peaks while filters out low-confidence high resolution peaks.\n\n- peak-plot\n\n  Visualize peaks (or loops) detected by *pyBHFDR* or *pyHICCUPS* on heatmap. Just provide a cooler file, a loop\n  annotation file in *bedpe* format, and input your interested region (chrom, start, end).\n\n- apa-analysis\n\n  Perform Aggregate Peak Analysis (APA). The inputs are a Hi-C matrix in *.cool* format and a loop annotation file in\n  *.bedpe* format.\n\n\nQuickStart\n==========\nThis tutorial will guide you through the basic usage of all scripts distributed with *hicpeaks*.\n\ntoCooler\n--------\nIf you have already created a cooler file for your Hi-C data, skip to the next section\n`pyBHFDR and pyHICCUPS <https://github.com/XiaoTaoWang/HiCPeaks/blob/master/README.rst#pybhfdr-and-pyhiccups>`_,\ngo on otherwise.\n\nFirst, you should store your TXT/NPZ bin-level Hi-C data into a cooler file by using *toCooler*. Let's begin\nwith our sample data below. Suppose you are still in the *hicpeaks* distribution root folder: change your current\nworking directory to the sub-folder *example*::\n\n    $ cd example\n    $ ls -lh *\n\n    -rw-r--r-- 1 xtwang  18 May  4 18:00 datasets\n    -rw-r--r-- 1 xtwang 293 May  4 18:00 hg38.chromsizes\n\n    25K:\n    total 12M\n    -rw-r--r-- 1 xtwang 12M May  4 18:00 21_21.txt\n\nThere is one sub-directory called *25K* which contains interactions within the smallest chromosome in K562 cell line at\n25K resolution, and one metadata file *datasets* which we can pass directly to *toCooler*::\n\n    $ cd 25K\n    $ head -5 21_21.txt\n\n    201\t703\t1\n    201\t1347\t1\n    201\t1351\t1\n    201\t1524\t1\n    201\t1691\t1\n\n    $ cd ..\n    $ cat datasets\n\n    res:25000\n      ./25K\n\nYou should construct your TXT files (no head, no tail) with 3 columns, which indicate \"bin1 of the 1st chromosome\",\n\"bin2 of the 2nd chromosome\" and \"contact frequency\" respectively. See `Overview <https://github.com/XiaoTaoWang/HiCPeaks#overview>`_\nabove.\n\nTo transform this data to *cooler* format, just run the command below::\n\n    $ toCooler -O K562-MboI-parts.cool -d datasets --assembly hg38 --nproc 1\n\n*toCooler* routinely fetch sizes of each chromosome from UCSC with the provided genome assembly name (here hg38).\nHowever, if your reference genome is not holded in UCSC, you can also build a file like \"hg38.chromsizes\" in\ncurrent working directory, and pass the file path to the argument \"--chromsizes-file\".\n\nType ``toCooler`` with no arguments on your terminal to print detailed help information for each parameter.\n\nFor this datasets, *toCooler* will create a cooler file named \"K562-MboI-parts.cool\", and your data will be stored under\nthe URI \"K562-MboI-parts.cool::25000\".\n\nThis tutorial only illustrates a very simple case, in fact the metadata file may contain list of resolutions (if you\nhave data at different resolutions for the same cell line) and corresponding folder paths (both relative and absolute\npath are accepted, and if your data are NPZ format, this path should point to the NPZ file)::\n\n    res:10000\n      /absoultepath/10K\n\n    res:25000\n      ../relativepath/25K\n\n    res:40000\n      /npzfile/anyprefix.npz\n\nThen *toCooler* will generate a single cooler file storing all the specified data under different cooler URI:\n\"specified_cooler_path::10000\", \"specified_cooler_path::25000\" and \"specified_cooler_path::40000\".\n\npyBHFDR and pyHICCUPS\n---------------------\nWith cooler URI, you can perform peak annotation by *pyBHFDR* or *pyHICCUPS*::\n\n    $ pyBHFDR -O K562-MboI-BHFDR-loops.txt -p K562-MboI-parts.cool::25000 -C 21 --pw 1 --ww 3\n\nOr::\n\n    $ pyHICCUPS -O K562-MboI-HICCUPS-loops.txt -p K562-MboI-parts.cool::25000 --pw 1 2 4 --ww 3 5 7 --only-anchors\n\nType ``pyBHFDR`` or ``pyHICCUPS`` on your terminal to print detailed help information for each parameter.\n\nBefore step to the next section, let's list the contents under current working directory again::\n\n    $ ls -lh\n\n    total 852K\n    drwxr-xr-x 4 xtwang  128 May  4 18:21 25K/\n    -rw-r--r-- 1 xtwang  17K May  4 18:23 K562-MboI-BHFDR-loops.txt\n    -rw-r--r-- 1 xtwang  15K May  4 18:23 K562-MboI-HICCUPS-loops.txt\n    -rw-r--r-- 1 xtwang 723K May  4 18:22 K562-MboI-parts.cool\n    -rw-r--r-- 1 xtwang   18 May  4 18:21 datasets\n    -rw-r--r-- 1 xtwang  293 May  4 18:21 hg38.chromsizes\n    -rw-r--r-- 1 xtwang 2.2K May  4 18:23 pyBHFDR.log\n    -rw-r--r-- 1 xtwang 8.5K May  4 18:23 pyHICCUPS.log\n    -rw-r--r-- 1 xtwang  17K May  4 18:22 tocooler.log\n\nThe detected loops are reported in a customized `bedpe <https://bedtools.readthedocs.io/en/latest/content/general-usage.html#bedpe-format>`_\nformat. The first 10 columns are identical to the `official definition <https://bedtools.readthedocs.io/en/latest/content/general-usage.html#bedpe-format>`_,\nand the additional fields are:\n\n11. Fold enrichment score calculated from the donut background.\n12. The p value calculated from the donut background.\n13. The q value calculated from the donut background.\n14. Fold enrichment score calculated from the lower-left background.\n15. The p value calculated from the lower-left background.\n16. The q value calculated from the lower-left background.\n\nPeak Visualization\n------------------\nNow, you can visualize BH-FDR and HICCUPS peak annotations on heatmap with *peak-plot*.\n\nFor HICCUPS peaks::\n\n    $ peak-plot -O test-HICCUPS.png --dpi 200 -p K562-MboI-parts.cool::25000 -I K562-MboI-HICCUPS-loops.txt -C 21 -S 25000000 -E 31000000 --correct\n\nThe output figure should look like this:\n\n.. image:: ./figures/test-HICCUPS.png\n        :align: center\n\n\nAggregate Peak Analysis\n-----------------------\nTo inspect the overall loop patterns of the detected peaks, you can use the *apa-analysis* script::\n\n    $ apa-analysis -O apa.png -p K562-MboI-parts.cool::25000 -I K562-MboI-HICCUPS-loops.txt -U\n\nThe output plot should look like this:\n\n.. image:: ./figures/apa.png\n        :align: center\n\nCombine different resolutions\n-----------------------------\nThe inputs to *combine-resolutions* are loop annotation files (*bedpe*) at different resolutions. If an interaction\nis detected as a peak in both resolutions, this script records the precise coordinates in finer resolutions and discards\nthe coarser resolution one. And a long-range (determined by the ``--min-dis`` parameter) peak call at high resolutions\n(determined by the ``--good-res`` parameter) will be treated as a false positive if it could not be identified at lower\nresolutions. Here's a *pseudo* command with 3 loop files at 5Kb, 10Kb, and 20Kb respectively::\n\n    $ combine-resolutions -O K562-MboI-pyHICCUPS-combined.bedpe -p K562-MboI-pyHICCUPS-5K.txt K562-MboI-pyHICCUPS-10K.txt K562-MboI-pyHICCUPS-20K.txt -R 5000 10000 20000 -G 20000 -M 100000\n\nPerformance\n===========\nThe tables below show the performance test of *toCooler*, *pyBHFDR* and *pyHICCUPS* with low (T47D) and high (K562)\nsequencing data, at low (40K) and high (10K) resolutions.\n\n- Processor: 2.6 GHz Intel Core i7, Memory: 16 GB 2400 MHz DDR4\n- Software version: *hicpeaks 0.3.0*\n- At 40Kb resolution, ``--pw`` and ``--ww`` are set to 1 and 3 respectively; at 10Kb resolution, they are set to 2\n  and 5 respectively.\n- The original Hi-C data is stored in TXT\n- Number of proccesses assigned: 1\n- Valid contacts: total number of non-zero pixels on intra-chromosomal matrices\n- Running time format: hr: min: sec\n\n+--------------+----------------+--------------+--------------+--------------+--------------+--------------+--------------+\n| Datasets     | Valid contacts |          toCooler           |           pyBHFDR           |          pyHICCUPS          |\n+--------------+----------------+--------------+--------------+--------------+--------------+--------------+--------------+\n|                               | Memory Usage | Running time | Memory Usage | Running time | Memory Usage | Running time |\n+==============+================+==============+==============+==============+==============+==============+==============+\n| T47D (40K)   |   25,216,875   |    <600M     |    0:07:55   |    <600M     |    0:01:34   |    <600M     |    0:04:17   |\n+--------------+----------------+--------------+--------------+--------------+--------------+--------------+--------------+\n| K562 (40K)   |   49,088,465   |    <1.2G     |    0:21:37   |    <1.0G     |    0:01:49   |    <1.0G     |    0:03:21   |\n+--------------+----------------+--------------+--------------+--------------+--------------+--------------+--------------+\n| K562 (10K)   |  139,884,876   |    <3.0G     |    1:00:07   |    <2.0G     |    0:24:53   |    <4.0G     |    1:57:33   |\n+--------------+----------------+--------------+--------------+--------------+--------------+--------------+--------------+\n\n.. note:: Both *pyBHFDR* and *pyHICCUPS* support multiple processes (``--nproc``). If your computer has sufficient memory, the\n          calculation should end within 30 minutes even for high resolutions.\n\nRelease Notes\n=============\nVersion 0.3.4 (05/04/2019)\n--------------------------\n- Improved the local clustering efficiency\n- Changed output loop format to bedpe\n\nVersion 0.3.3 (03/08/2019)\n--------------------------\n- Float matrix support in *toCooler* transformation\n- Removed ticklabels in APA plot\n\nVersion 0.3.2 (03/03/2019)\n--------------------------\n1. Supported combination of different resolutions\n2. Changed local clustering algorithm\n3. Added APA module\n4. Compatible with cooler 0.8\n5. Old distutils to setuptools\n\nVersion 0.3.0 (09/03/2018)\n--------------------------\n1. Removed horizontal and vertical backgrounds for performance\n2. Supported multiple parameters (pw and ww)\n3. Supported Python 3\n4. Optimized the calculation\n5. Code refactoring\n6. Fixed bugs when users provide with external .cool files.\n\nVersion 0.2.0-r1 (08/26/2018)\n-----------------------------\n1. Speeded up the program by dynamically limiting donut width\n2. Added performance table in README.rst\n\nVersion 0.2.0 (08/25/2018)\n--------------------------\n1. Added vertical and horizontal backgrounds \n2. Added additional filtering based on dbscan clusters and more stringent q value thresholds\n3. Fixed bugs in storing interchromosomal data\n\nVersion 0.1.1 (08/24/2018)\n--------------------------\n1. Lower memory usage and more efficient calculation\n\nVersion 0.1.0 (08/22/2018)\n--------------------------\n1. The first release.\n2. Added *toCooler* and *peak-plot*.\n3. Added multiple process support.\n\nPre-Release (05/04/2015)\n-----------------------------\n1. Implemented core algorithms of BH-FDR and HICCUPS\n\n\n\nReference\n=========\n.. [1] Rao SS, Huntley MH, Durand NC et al. A 3D Map of the Human Genome at Kilobase Resolution\n      Reveals Principles of Chromatin Looping. Cell, 2014, 159(7):1665-80.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/XiaoTaoWang/HiCPeaks/", "keywords": "Hi-C interaction contact loop peak", "license": "", "maintainer": "", "maintainer_email": "", "name": "hicpeaks", "package_url": "https://pypi.org/project/hicpeaks/", "platform": "", "project_url": "https://pypi.org/project/hicpeaks/", "project_urls": {"Homepage": "https://github.com/XiaoTaoWang/HiCPeaks/"}, "release_url": "https://pypi.org/project/hicpeaks/0.3.4/", "requires_dist": null, "requires_python": "", "summary": "Identify real loops from Hi-C data.", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"hicpeaks\">\n<h2>HiCPeaks</h2>\n<p><em>hicpeaks</em> provide a Python CPU-based implementation for BH-FDR and HiCCUPS, two peak calling algorithms\nfor Hi-C data, proposed by Rao et al <a href=\"#id4\" id=\"id1\" rel=\"nofollow\">[1]</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><em>hicpeaks</em> is developed and tested on UNIX-like operating system, and following packages or softwares are\nrequired:</p>\n<p>Python requirements:</p>\n<ol>\n<li>Python 2.7/3.5+</li>\n<li>Multiprocess</li>\n<li>Numpy</li>\n<li>Scipy</li>\n<li>Matplotlib</li>\n<li>Pandas</li>\n<li>Statsmodels</li>\n<li>Scikit-Learn</li>\n<li>H5py</li>\n<li>Cooler</li>\n</ol>\n<p>Other requirements:</p>\n<ul>\n<li>ucsc-fetchchromsizes</li>\n</ul>\n<p><em>conda</em>, an excellent package manager, can be used to install all requirements above.</p>\n<div id=\"install-conda\">\n<h3>Install Conda</h3>\n<div>\n<p>Note</p>\n<p>If you have the Anaconda Distribution installed, you already have it.</p>\n</div>\n<p>Choose an appropriate <a href=\"https://conda.io/miniconda.html\" rel=\"nofollow\">Miniconda installer</a> for your system,\nthen in your terminal window type the following and follow the prompts on the installer screens:</p>\n<pre>$ bash Miniconda2-latest-Linux-x86_64.sh\n</pre>\n<p>After that, update the environment variables to finish the Conda installation:</p>\n<pre>$ source ~/.bashrc\n</pre>\n</div>\n<div id=\"install-packages-through-conda\">\n<h3>Install Packages through Conda</h3>\n<p>First set up the channels to make all packages listed above accessible (note that the order is\nimportant to guarantee the correct priority):</p>\n<pre>$ conda config --add channels defaults\n$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n</pre>\n<p>Then just type and execute the following command:</p>\n<pre>$ conda install numpy scipy matplotlib pandas statsmodels scikit-learn h5py multiprocess cooler ucsc-fetchchromsizes\n</pre>\n</div>\n<div id=\"install-hicpeaks\">\n<h3>Install hicpeaks</h3>\n<p>Now download the <a href=\"https://pypi.org/project/hicpeaks/\" rel=\"nofollow\">hicpeaks source code</a> from PyPI, extract it and run\nthe setup.py script:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><em>hicpeaks</em> comes with 6 scripts: <em>toCooler</em>, <em>pyBHFDR</em>, <em>pyHICCUPS</em>, <em>combine-resolutions</em>, <em>peak-plot</em> and <em>apa-analysis</em>.</p>\n<ul>\n<li><p>toCooler</p>\n<p>Store TXT/NPZ bin-level Hi-C data into <a href=\"https://github.com/mirnylab/cooler\" rel=\"nofollow\">cooler</a> container.</p>\n<ol>\n<li>I have included a sample data with <em>hicpeaks</em> source code to illustrate how you should prepare your\ndata in TXT format. It\u2019s quite easy, just remember 3 points: 1. the file name should follow this pattern\n\u201cchrom1_chrom2.txt\u201d (remove prefix from your chromosome labels, i.e. \u201cchr1\u201d should be \u201c1\u201d, and \u201cchrX\u201d should\nbe \u201cX\u201d); 2. each file should only contain 3 columns, corresponding to \u201cbin1\u201d of \u201cchrom1\u201d, \u201cbin2\u201d of \u201cchrom2\u201d,\nand \u201ccontact frequency\u201d (<strong>don\u2019t</strong> perform any normalization processes); 3. all files at the same resolution\nshould be placed under a single folder.</li>\n<li>NPZ format is another bin-level Hi-C data container which can extremely speed up data loading. <em>hicpeaks</em>\nsupports NPZ files generated by old version of <a href=\"https://github.com/XiaoTaoWang/HiC_pipeline\" rel=\"nofollow\">runHiC (&lt;0.8.0)</a> and\n<a href=\"https://github.com/XiaoTaoWang/TADLib\" rel=\"nofollow\">TADLib (&lt;0.4.0)</a>.</li>\n</ol>\n</li>\n<li><p>pyBHFDR</p>\n<p>A CPU-based python implementation for BH-FDR algorithm. Rao et al (2014) states in their supplementary material that\nthis algorithm is robust enough to obtain all main results of their paper. Compared with HiCCUPS, BH-FDR doesn\u2019t use\n\u03bb-chunk in multiple hypothesis test, and only considers the Donut background region when calculating the\nexpected values.</p>\n</li>\n<li><p>pyHICCUPS</p>\n<p>A CPU-based python implementation for HiCCUPS algorithm. Besides the donut region, HiCCUPS also considers the\nlower-left, vertical and horizontal backgrounds when calculating the expected values. And \u03bb-chunk is used to overcome\nseveral multiple hypothesis testing challenges for Hi-C data. Finally, while BH-FDR has to limit the detected pixels\nnear the diagonal (&lt;2Mb), HiCCUPS is able to generalize itself to any genomic distance in theory. Here, <em>pyHICCUPS</em>\nkeeps all main concepts of the original algorithm except for these points:</p>\n<ol>\n<li><em>pyHICCUPS</em> excludes vertical and horizontal backgrounds from its calculation.</li>\n<li>There are two critical parameters related to the loop definition in HiCCUPS: the peak width <em>p</em> and the donut width <em>w</em>.\nIn original implementation, they are set exclusively for each certain resolution, specifically, <em>p=1</em> and <em>w=3</em> at 25Kb,\n<em>p=2</em> and <em>w=5</em> at 10Kb, and <em>p=4</em> and <em>w=7</em> at 5Kb. To improve the sensitivity, <em>pyHICCUPS</em> calculates and outputs\nthe union of the peak calls from all parameter settings <em>(1,3)</em>, <em>(2,5)</em>, <em>(4,7)</em> in a single run.</li>\n<li>Due to computational complexity, you should still limit the genomic distance of 2 loci to some degree (5Mb/10Mb).</li>\n</ol>\n</li>\n<li><p>combine-resolutions</p>\n<p>Combine peak calls from different resolutions in a way similar to original <em>HiCCUPS</em>. Briefly, it excludes redundant lower\nresolution peaks while filters out low-confidence high resolution peaks.</p>\n</li>\n<li><p>peak-plot</p>\n<p>Visualize peaks (or loops) detected by <em>pyBHFDR</em> or <em>pyHICCUPS</em> on heatmap. Just provide a cooler file, a loop\nannotation file in <em>bedpe</em> format, and input your interested region (chrom, start, end).</p>\n</li>\n<li><p>apa-analysis</p>\n<p>Perform Aggregate Peak Analysis (APA). The inputs are a Hi-C matrix in <em>.cool</em> format and a loop annotation file in\n<em>.bedpe</em> format.</p>\n</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>QuickStart</h2>\n<p>This tutorial will guide you through the basic usage of all scripts distributed with <em>hicpeaks</em>.</p>\n<div id=\"tocooler\">\n<h3>toCooler</h3>\n<p>If you have already created a cooler file for your Hi-C data, skip to the next section\n<a href=\"https://github.com/XiaoTaoWang/HiCPeaks/blob/master/README.rst#pybhfdr-and-pyhiccups\" rel=\"nofollow\">pyBHFDR and pyHICCUPS</a>,\ngo on otherwise.</p>\n<p>First, you should store your TXT/NPZ bin-level Hi-C data into a cooler file by using <em>toCooler</em>. Let\u2019s begin\nwith our sample data below. Suppose you are still in the <em>hicpeaks</em> distribution root folder: change your current\nworking directory to the sub-folder <em>example</em>:</p>\n<pre>$ cd example\n$ ls -lh *\n\n-rw-r--r-- 1 xtwang  18 May  4 18:00 datasets\n-rw-r--r-- 1 xtwang 293 May  4 18:00 hg38.chromsizes\n\n25K:\ntotal 12M\n-rw-r--r-- 1 xtwang 12M May  4 18:00 21_21.txt\n</pre>\n<p>There is one sub-directory called <em>25K</em> which contains interactions within the smallest chromosome in K562 cell line at\n25K resolution, and one metadata file <em>datasets</em> which we can pass directly to <em>toCooler</em>:</p>\n<pre>$ cd 25K\n$ head -5 21_21.txt\n\n201 703     1\n201 1347    1\n201 1351    1\n201 1524    1\n201 1691    1\n\n$ cd ..\n$ cat datasets\n\nres:25000\n  ./25K\n</pre>\n<p>You should construct your TXT files (no head, no tail) with 3 columns, which indicate \u201cbin1 of the 1st chromosome\u201d,\n\u201cbin2 of the 2nd chromosome\u201d and \u201ccontact frequency\u201d respectively. See <a href=\"https://github.com/XiaoTaoWang/HiCPeaks#overview\" rel=\"nofollow\">Overview</a>\nabove.</p>\n<p>To transform this data to <em>cooler</em> format, just run the command below:</p>\n<pre>$ toCooler -O K562-MboI-parts.cool -d datasets --assembly hg38 --nproc 1\n</pre>\n<p><em>toCooler</em> routinely fetch sizes of each chromosome from UCSC with the provided genome assembly name (here hg38).\nHowever, if your reference genome is not holded in UCSC, you can also build a file like \u201chg38.chromsizes\u201d in\ncurrent working directory, and pass the file path to the argument \u201c\u2013chromsizes-file\u201d.</p>\n<p>Type <tt>toCooler</tt> with no arguments on your terminal to print detailed help information for each parameter.</p>\n<p>For this datasets, <em>toCooler</em> will create a cooler file named \u201cK562-MboI-parts.cool\u201d, and your data will be stored under\nthe URI \u201cK562-MboI-parts.cool::25000\u201d.</p>\n<p>This tutorial only illustrates a very simple case, in fact the metadata file may contain list of resolutions (if you\nhave data at different resolutions for the same cell line) and corresponding folder paths (both relative and absolute\npath are accepted, and if your data are NPZ format, this path should point to the NPZ file):</p>\n<pre>res:10000\n  /absoultepath/10K\n\nres:25000\n  ../relativepath/25K\n\nres:40000\n  /npzfile/anyprefix.npz\n</pre>\n<p>Then <em>toCooler</em> will generate a single cooler file storing all the specified data under different cooler URI:\n\u201cspecified_cooler_path::10000\u201d, \u201cspecified_cooler_path::25000\u201d and \u201cspecified_cooler_path::40000\u201d.</p>\n</div>\n<div id=\"id3\">\n<h3>pyBHFDR and pyHICCUPS</h3>\n<p>With cooler URI, you can perform peak annotation by <em>pyBHFDR</em> or <em>pyHICCUPS</em>:</p>\n<pre>$ pyBHFDR -O K562-MboI-BHFDR-loops.txt -p K562-MboI-parts.cool::25000 -C 21 --pw 1 --ww 3\n</pre>\n<p>Or:</p>\n<pre>$ pyHICCUPS -O K562-MboI-HICCUPS-loops.txt -p K562-MboI-parts.cool::25000 --pw 1 2 4 --ww 3 5 7 --only-anchors\n</pre>\n<p>Type <tt>pyBHFDR</tt> or <tt>pyHICCUPS</tt> on your terminal to print detailed help information for each parameter.</p>\n<p>Before step to the next section, let\u2019s list the contents under current working directory again:</p>\n<pre>$ ls -lh\n\ntotal 852K\ndrwxr-xr-x 4 xtwang  128 May  4 18:21 25K/\n-rw-r--r-- 1 xtwang  17K May  4 18:23 K562-MboI-BHFDR-loops.txt\n-rw-r--r-- 1 xtwang  15K May  4 18:23 K562-MboI-HICCUPS-loops.txt\n-rw-r--r-- 1 xtwang 723K May  4 18:22 K562-MboI-parts.cool\n-rw-r--r-- 1 xtwang   18 May  4 18:21 datasets\n-rw-r--r-- 1 xtwang  293 May  4 18:21 hg38.chromsizes\n-rw-r--r-- 1 xtwang 2.2K May  4 18:23 pyBHFDR.log\n-rw-r--r-- 1 xtwang 8.5K May  4 18:23 pyHICCUPS.log\n-rw-r--r-- 1 xtwang  17K May  4 18:22 tocooler.log\n</pre>\n<p>The detected loops are reported in a customized <a href=\"https://bedtools.readthedocs.io/en/latest/content/general-usage.html#bedpe-format\" rel=\"nofollow\">bedpe</a>\nformat. The first 10 columns are identical to the <a href=\"https://bedtools.readthedocs.io/en/latest/content/general-usage.html#bedpe-format\" rel=\"nofollow\">official definition</a>,\nand the additional fields are:</p>\n<ol>\n<li>Fold enrichment score calculated from the donut background.</li>\n<li>The p value calculated from the donut background.</li>\n<li>The q value calculated from the donut background.</li>\n<li>Fold enrichment score calculated from the lower-left background.</li>\n<li>The p value calculated from the lower-left background.</li>\n<li>The q value calculated from the lower-left background.</li>\n</ol>\n</div>\n<div id=\"peak-visualization\">\n<h3>Peak Visualization</h3>\n<p>Now, you can visualize BH-FDR and HICCUPS peak annotations on heatmap with <em>peak-plot</em>.</p>\n<p>For HICCUPS peaks:</p>\n<pre>$ peak-plot -O test-HICCUPS.png --dpi 200 -p K562-MboI-parts.cool::25000 -I K562-MboI-HICCUPS-loops.txt -C 21 -S 25000000 -E 31000000 --correct\n</pre>\n<p>The output figure should look like this:</p>\n<img alt=\"./figures/test-HICCUPS.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d8530df11ea3437e88e62fbc8928acebb53384f6/2e2f666967757265732f746573742d484943435550532e706e67\">\n</div>\n<div id=\"aggregate-peak-analysis\">\n<h3>Aggregate Peak Analysis</h3>\n<p>To inspect the overall loop patterns of the detected peaks, you can use the <em>apa-analysis</em> script:</p>\n<pre>$ apa-analysis -O apa.png -p K562-MboI-parts.cool::25000 -I K562-MboI-HICCUPS-loops.txt -U\n</pre>\n<p>The output plot should look like this:</p>\n<img alt=\"./figures/apa.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77ccffe4fcec4b286ea4406f3e81cbeadf843a08/2e2f666967757265732f6170612e706e67\">\n</div>\n<div id=\"combine-different-resolutions\">\n<h3>Combine different resolutions</h3>\n<p>The inputs to <em>combine-resolutions</em> are loop annotation files (<em>bedpe</em>) at different resolutions. If an interaction\nis detected as a peak in both resolutions, this script records the precise coordinates in finer resolutions and discards\nthe coarser resolution one. And a long-range (determined by the <tt><span class=\"pre\">--min-dis</span></tt> parameter) peak call at high resolutions\n(determined by the <tt><span class=\"pre\">--good-res</span></tt> parameter) will be treated as a false positive if it could not be identified at lower\nresolutions. Here\u2019s a <em>pseudo</em> command with 3 loop files at 5Kb, 10Kb, and 20Kb respectively:</p>\n<pre>$ combine-resolutions -O K562-MboI-pyHICCUPS-combined.bedpe -p K562-MboI-pyHICCUPS-5K.txt K562-MboI-pyHICCUPS-10K.txt K562-MboI-pyHICCUPS-20K.txt -R 5000 10000 20000 -G 20000 -M 100000\n</pre>\n</div>\n</div>\n<div id=\"performance\">\n<h2>Performance</h2>\n<p>The tables below show the performance test of <em>toCooler</em>, <em>pyBHFDR</em> and <em>pyHICCUPS</em> with low (T47D) and high (K562)\nsequencing data, at low (40K) and high (10K) resolutions.</p>\n<ul>\n<li>Processor: 2.6 GHz Intel Core i7, Memory: 16 GB 2400 MHz DDR4</li>\n<li>Software version: <em>hicpeaks 0.3.0</em></li>\n<li>At 40Kb resolution, <tt><span class=\"pre\">--pw</span></tt> and <tt><span class=\"pre\">--ww</span></tt> are set to 1 and 3 respectively; at 10Kb resolution, they are set to 2\nand 5 respectively.</li>\n<li>The original Hi-C data is stored in TXT</li>\n<li>Number of proccesses assigned: 1</li>\n<li>Valid contacts: total number of non-zero pixels on intra-chromosomal matrices</li>\n<li>Running time format: hr: min: sec</li>\n</ul>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Datasets</th>\n<th>Valid contacts</th>\n<th>toCooler</th>\n<th>pyBHFDR</th>\n<th>pyHICCUPS</th>\n</tr>\n<tr><th>\u00a0</th>\n<th>Memory Usage</th>\n<th>Running time</th>\n<th>Memory Usage</th>\n<th>Running time</th>\n<th>Memory Usage</th>\n<th>Running time</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>T47D (40K)</td>\n<td>25,216,875</td>\n<td>&lt;600M</td>\n<td>0:07:55</td>\n<td>&lt;600M</td>\n<td>0:01:34</td>\n<td>&lt;600M</td>\n<td>0:04:17</td>\n</tr>\n<tr><td>K562 (40K)</td>\n<td>49,088,465</td>\n<td>&lt;1.2G</td>\n<td>0:21:37</td>\n<td>&lt;1.0G</td>\n<td>0:01:49</td>\n<td>&lt;1.0G</td>\n<td>0:03:21</td>\n</tr>\n<tr><td>K562 (10K)</td>\n<td>139,884,876</td>\n<td>&lt;3.0G</td>\n<td>1:00:07</td>\n<td>&lt;2.0G</td>\n<td>0:24:53</td>\n<td>&lt;4.0G</td>\n<td>1:57:33</td>\n</tr>\n</tbody>\n</table>\n<div>\n<p>Note</p>\n<p>Both <em>pyBHFDR</em> and <em>pyHICCUPS</em> support multiple processes (<tt><span class=\"pre\">--nproc</span></tt>). If your computer has sufficient memory, the\ncalculation should end within 30 minutes even for high resolutions.</p>\n</div>\n</div>\n<div id=\"release-notes\">\n<h2>Release Notes</h2>\n<div id=\"version-0-3-4-05-04-2019\">\n<h3>Version 0.3.4 (05/04/2019)</h3>\n<ul>\n<li>Improved the local clustering efficiency</li>\n<li>Changed output loop format to bedpe</li>\n</ul>\n</div>\n<div id=\"version-0-3-3-03-08-2019\">\n<h3>Version 0.3.3 (03/08/2019)</h3>\n<ul>\n<li>Float matrix support in <em>toCooler</em> transformation</li>\n<li>Removed ticklabels in APA plot</li>\n</ul>\n</div>\n<div id=\"version-0-3-2-03-03-2019\">\n<h3>Version 0.3.2 (03/03/2019)</h3>\n<ol>\n<li>Supported combination of different resolutions</li>\n<li>Changed local clustering algorithm</li>\n<li>Added APA module</li>\n<li>Compatible with cooler 0.8</li>\n<li>Old distutils to setuptools</li>\n</ol>\n</div>\n<div id=\"version-0-3-0-09-03-2018\">\n<h3>Version 0.3.0 (09/03/2018)</h3>\n<ol>\n<li>Removed horizontal and vertical backgrounds for performance</li>\n<li>Supported multiple parameters (pw and ww)</li>\n<li>Supported Python 3</li>\n<li>Optimized the calculation</li>\n<li>Code refactoring</li>\n<li>Fixed bugs when users provide with external .cool files.</li>\n</ol>\n</div>\n<div id=\"version-0-2-0-r1-08-26-2018\">\n<h3>Version 0.2.0-r1 (08/26/2018)</h3>\n<ol>\n<li>Speeded up the program by dynamically limiting donut width</li>\n<li>Added performance table in README.rst</li>\n</ol>\n</div>\n<div id=\"version-0-2-0-08-25-2018\">\n<h3>Version 0.2.0 (08/25/2018)</h3>\n<ol>\n<li>Added vertical and horizontal backgrounds</li>\n<li>Added additional filtering based on dbscan clusters and more stringent q value thresholds</li>\n<li>Fixed bugs in storing interchromosomal data</li>\n</ol>\n</div>\n<div id=\"version-0-1-1-08-24-2018\">\n<h3>Version 0.1.1 (08/24/2018)</h3>\n<ol>\n<li>Lower memory usage and more efficient calculation</li>\n</ol>\n</div>\n<div id=\"version-0-1-0-08-22-2018\">\n<h3>Version 0.1.0 (08/22/2018)</h3>\n<ol>\n<li>The first release.</li>\n<li>Added <em>toCooler</em> and <em>peak-plot</em>.</li>\n<li>Added multiple process support.</li>\n</ol>\n</div>\n<div id=\"pre-release-05-04-2015\">\n<h3>Pre-Release (05/04/2015)</h3>\n<ol>\n<li>Implemented core algorithms of BH-FDR and HICCUPS</li>\n</ol>\n</div>\n</div>\n<div id=\"reference\">\n<h2>Reference</h2>\n<table id=\"id4\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>Rao SS, Huntley MH, Durand NC et al. A 3D Map of the Human Genome at Kilobase Resolution\nReveals Principles of Chromatin Looping. Cell, 2014, 159(7):1665-80.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 5226839, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "710f749c28498287ee66d75505b8be93", "sha256": "762f53cb87b8fc010f1e9e982d6c373dbb6812fbf294c7ee3801c1c3a800cb12"}, "downloads": -1, "filename": "hicpeaks-0.1.0.tar.gz", "has_sig": false, "md5_digest": "710f749c28498287ee66d75505b8be93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1778606, "upload_time": "2018-08-22T16:05:24", "upload_time_iso_8601": "2018-08-22T16:05:24.627044Z", "url": "https://files.pythonhosted.org/packages/e6/c0/eb29b49d9bff47e2f2ddeef9c90f893aa5b5e6477e3df423c5101b66b744/hicpeaks-0.1.0.tar.gz", "yanked": false}], "0.1.0-r1": [{"comment_text": "", "digests": {"md5": "ff2f882fc9ec7cfe323a5cc11341b59c", "sha256": "0ff42d835dff82368f472bac81d8fb3e21aecff40791f0427134061c9c952d9b"}, "downloads": -1, "filename": "hicpeaks-0.1.0-r1.tar.gz", "has_sig": false, "md5_digest": "ff2f882fc9ec7cfe323a5cc11341b59c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1778504, "upload_time": "2018-08-22T19:50:49", "upload_time_iso_8601": "2018-08-22T19:50:49.246346Z", "url": "https://files.pythonhosted.org/packages/7c/27/ec33e0e2ca77b9833475fec739765d0193c942a781696ca1cadce63a7179/hicpeaks-0.1.0-r1.tar.gz", "yanked": false}], "0.1.0-r2": [{"comment_text": "", "digests": {"md5": "2071fc34db4b4a436e1805a12282420c", "sha256": "4936635ed4db12bedd8adfb41ab76059bb5ee305f9e7808be7261e19fe9c8a37"}, "downloads": -1, "filename": "hicpeaks-0.1.0-r2.tar.gz", "has_sig": false, "md5_digest": "2071fc34db4b4a436e1805a12282420c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1779164, "upload_time": "2018-08-24T01:19:55", "upload_time_iso_8601": "2018-08-24T01:19:55.622695Z", "url": "https://files.pythonhosted.org/packages/97/7c/e3586620ba87cb9a62f1bbb0c69857e1a97a6bb6ad9267439b11c32c4256/hicpeaks-0.1.0-r2.tar.gz", "yanked": false}], "0.1.0-r3": [{"comment_text": "", "digests": {"md5": "c8d282deaa12d0c190d42f32789635d8", "sha256": "f1fbd7fee021e3e3eaa763ff463c38ea2091b9e811e69fa020cdc6e8e5a5bbfd"}, "downloads": -1, "filename": "hicpeaks-0.1.0-r3.tar.gz", "has_sig": false, "md5_digest": "c8d282deaa12d0c190d42f32789635d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1779200, "upload_time": "2018-08-24T23:23:14", "upload_time_iso_8601": "2018-08-24T23:23:14.653301Z", "url": "https://files.pythonhosted.org/packages/b7/a1/83e1be33a854136a176884dfcac5b85eb3f69209329ed7a1c6272956bc18/hicpeaks-0.1.0-r3.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6ad3eb8be7c693f26082813d79ae6fef", "sha256": "77524992d7ffbeb1f6b90ffb1ac5d5248614c1485ed10003179531e7da82ba06"}, "downloads": -1, "filename": "hicpeaks-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6ad3eb8be7c693f26082813d79ae6fef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1779269, "upload_time": "2018-08-25T03:20:36", "upload_time_iso_8601": "2018-08-25T03:20:36.355818Z", "url": "https://files.pythonhosted.org/packages/61/e2/0866b589b56c119bc23a013a97834efd30e7e817fd2f96faa0019928c9c8/hicpeaks-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e84c93403130ccc1e04222e3b4e24f37", "sha256": "401f4e7d6c0464e9afff35a4476e092c9c4705d33232ea75945abda9e6aee331"}, "downloads": -1, "filename": "hicpeaks-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e84c93403130ccc1e04222e3b4e24f37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1781196, "upload_time": "2018-08-26T03:31:46", "upload_time_iso_8601": "2018-08-26T03:31:46.551802Z", "url": "https://files.pythonhosted.org/packages/87/27/b24eaf78bfdaecafaf088cce0a5fa6bcee270dce50391cdcfdd686782145/hicpeaks-0.2.0.tar.gz", "yanked": false}], "0.2.0-r1": [{"comment_text": "", "digests": {"md5": "5f9563e75711f378d93bc9f54bebb0fc", "sha256": "23a4fb806d0ddfa933bd43e13a168af0efe5bfce846dec06efe9187023b8b65c"}, "downloads": -1, "filename": "hicpeaks-0.2.0-r1.tar.gz", "has_sig": false, "md5_digest": "5f9563e75711f378d93bc9f54bebb0fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1782913, "upload_time": "2018-08-26T19:20:53", "upload_time_iso_8601": "2018-08-26T19:20:53.114997Z", "url": "https://files.pythonhosted.org/packages/0c/d3/64645583ee76a06853972e003145e19970e1cb470e4ad60c667bd11a69e1/hicpeaks-0.2.0-r1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ed2af45808f106cd7a8c0480ac34f10f", "sha256": "cc12a0a58cd063e57785577c01e2aa45ee4cc33e7dfd23f105d986db034d0931"}, "downloads": -1, "filename": "hicpeaks-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ed2af45808f106cd7a8c0480ac34f10f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1796625, "upload_time": "2018-09-03T19:43:27", "upload_time_iso_8601": "2018-09-03T19:43:27.513857Z", "url": "https://files.pythonhosted.org/packages/7d/f8/b4dd43340760a9db542f5418746775165e4d3d17173f99c607cb8384c6b0/hicpeaks-0.3.0.tar.gz", "yanked": false}], "0.3.0-r1": [{"comment_text": "", "digests": {"md5": "9a3ad905a581d118e081d9d4045da771", "sha256": "c7df7bb566ddcc6ff7f628d8b986aec78c717a8a4242b6907980a6e44312f619"}, "downloads": -1, "filename": "hicpeaks-0.3.0-r1.tar.gz", "has_sig": false, "md5_digest": "9a3ad905a581d118e081d9d4045da771", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1797220, "upload_time": "2018-09-05T15:14:28", "upload_time_iso_8601": "2018-09-05T15:14:28.819354Z", "url": "https://files.pythonhosted.org/packages/50/1f/d046bf84ddb61f0ffc0a9a032ccd12dcbc6193fcaf11b125da163a01ff7c/hicpeaks-0.3.0-r1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "3af9eaad291c64a5483e4ba419ee1ccf", "sha256": "31e2333b7f4dd73d25f582c8297183274b131dbe6f30c691427e5573161bcfda"}, "downloads": -1, "filename": "hicpeaks-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3af9eaad291c64a5483e4ba419ee1ccf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 46690, "upload_time": "2019-03-04T04:24:06", "upload_time_iso_8601": "2019-03-04T04:24:06.009477Z", "url": "https://files.pythonhosted.org/packages/d7/9f/94873d7abaea415c4be621d3618597b4ac1652bebbd2bc98d1271ba4bd45/hicpeaks-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fef5a9e2f0189667af612861571b049d", "sha256": "b556993674834e93c2d7508dc470b5b7bd49ca8baedc88de7b571db200fb99ec"}, "downloads": -1, "filename": "hicpeaks-0.3.2.tar.gz", "has_sig": false, "md5_digest": "fef5a9e2f0189667af612861571b049d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1803021, "upload_time": "2019-03-04T04:24:10", "upload_time_iso_8601": "2019-03-04T04:24:10.937830Z", "url": "https://files.pythonhosted.org/packages/b6/ef/c050ebc05d95fc62ceac570c5d9db8bb800ceb00dcc6215de500d6b0789e/hicpeaks-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "ed501dd31ca0770e70d9315a9ab446c0", "sha256": "f8d3c17526bb5ac106d9e507727d9c0a6b5c1610ab2f42c21a467c834caaaf5d"}, "downloads": -1, "filename": "hicpeaks-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ed501dd31ca0770e70d9315a9ab446c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47139, "upload_time": "2019-03-08T15:59:30", "upload_time_iso_8601": "2019-03-08T15:59:30.084473Z", "url": "https://files.pythonhosted.org/packages/f2/62/e9885cbd898f04ca2f137fb6141b433434b1acdfed216b8f8c68fe801b9c/hicpeaks-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0986059d547fccc0325cffc43e5afb9", "sha256": "44929d21a9a2c1389bd24731e4665aede2862c7bad18478fa8e87ee3ec48a7cd"}, "downloads": -1, "filename": "hicpeaks-0.3.3.tar.gz", "has_sig": false, "md5_digest": "d0986059d547fccc0325cffc43e5afb9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1803438, "upload_time": "2019-03-08T15:59:31", "upload_time_iso_8601": "2019-03-08T15:59:31.785740Z", "url": "https://files.pythonhosted.org/packages/fb/c6/e843845521488e4824e0cf7d971bf32b98bf2675ddcea5985d97d93b4e02/hicpeaks-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "a9bdae18053f5d2d2bf4595b1dc9c718", "sha256": "bc2b68bb372a8c901fc69d61706d6466c7f89836fc2de82ef2e15cca146bf335"}, "downloads": -1, "filename": "hicpeaks-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a9bdae18053f5d2d2bf4595b1dc9c718", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47406, "upload_time": "2019-05-04T22:53:58", "upload_time_iso_8601": "2019-05-04T22:53:58.287791Z", "url": "https://files.pythonhosted.org/packages/92/bd/955344cfbb8742a7cd300199bfbf42deab0998ed5740c6162758b2acc829/hicpeaks-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebfab27c08984342f76df523bf2413a9", "sha256": "06e893b077b8bbb14a25fc11d4e4be54e8ceecc4258a13a4c2e18ddd195e926e"}, "downloads": -1, "filename": "hicpeaks-0.3.4.tar.gz", "has_sig": false, "md5_digest": "ebfab27c08984342f76df523bf2413a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3061126, "upload_time": "2019-05-04T22:54:04", "upload_time_iso_8601": "2019-05-04T22:54:04.995862Z", "url": "https://files.pythonhosted.org/packages/71/4c/a23b7837baf3121635792625be0e5eaac1a1891d0ebd95d06b3d62628381/hicpeaks-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a9bdae18053f5d2d2bf4595b1dc9c718", "sha256": "bc2b68bb372a8c901fc69d61706d6466c7f89836fc2de82ef2e15cca146bf335"}, "downloads": -1, "filename": "hicpeaks-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a9bdae18053f5d2d2bf4595b1dc9c718", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 47406, "upload_time": "2019-05-04T22:53:58", "upload_time_iso_8601": "2019-05-04T22:53:58.287791Z", "url": "https://files.pythonhosted.org/packages/92/bd/955344cfbb8742a7cd300199bfbf42deab0998ed5740c6162758b2acc829/hicpeaks-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebfab27c08984342f76df523bf2413a9", "sha256": "06e893b077b8bbb14a25fc11d4e4be54e8ceecc4258a13a4c2e18ddd195e926e"}, "downloads": -1, "filename": "hicpeaks-0.3.4.tar.gz", "has_sig": false, "md5_digest": "ebfab27c08984342f76df523bf2413a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3061126, "upload_time": "2019-05-04T22:54:04", "upload_time_iso_8601": "2019-05-04T22:54:04.995862Z", "url": "https://files.pythonhosted.org/packages/71/4c/a23b7837baf3121635792625be0e5eaac1a1891d0ebd95d06b3d62628381/hicpeaks-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:17 2020"}