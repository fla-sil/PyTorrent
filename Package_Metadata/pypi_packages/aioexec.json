{"info": {"author": "Felix Meyer-Wolters", "author_email": "felix@meyerwolters.de", "bugtrack_url": null, "classifiers": [], "description": "# aioexec\n\n## Description\n\nAioexec is a simple, intuitive interface around the `concurrent.futures` package and asyncio's `loop.run_in_executor` method. Aioexec is leightweight, no dependencies and ~100 LOC.\n\n## Requirements\n\naioexec requires Python `>= 3.6`\n\n## Install\n\n    pip install aioexec\n\nor\n\n    pipenv install aioexec\n\n## Usage\n\n**Without** `aioexec` you usually run an executor something like this:\n\n```python\nimport aysncio\nfrom concurrent.futures import ProcessPoolExecutor\n\n# ...\n\nloop = asyncio.get_event_loop()\n\nfoo = await loop.run_in_executor(\n    ProcessPoolExecutor(1), lambda: my_func(foo='baz')\n)\n```\n\n**With** `aioexec` you would do the same like this:\n\n```python\nfrom aioexec import Procs\n\n# ...\n\nfoo = await Procs(1).call(my_func, foo='baz')\n```\n\nYou can call a `batch` of functions in the same executor like this:\n\n```python\nimport asyncio\nfrom aioexec import Procs, Call\n\n# ...\n\nmy_values = await asyncio.gather(\n    *Procs(3).batch(\n        Call(my_func, foo='bar'),\n        Call(my_func, foo='baz'),\n        Call(my_func, foo='qux'),\n    )\n)\n```\n\nThis plays nicely with comprehensions:\n\n```python\nimport asyncio\nfrom aioexec import Procs, Call\n\n# ...\n\nmy_values = await asyncio.gather(\n    *Procs(10).batch(\n        Call(my_func, foo=i) for i in range(0, 10)\n    )\n)\n```\n\nYou can also spawn a `pool` and make multiple different calls with the same executor:\n\n```python\nimport asyncio\nfrom aioexec import Procs, Call\n\n# ...\n\nwith Procs(10) as pool:\n\n    value_a = await pool.call(my_func, foo='baz')\n\n    value_b = await aio.gather(\n        *pool.batch(\n            Call(my_func, foo=i) for i in range(0, 10)\n        )\n    )\n\n    # etc...\n```\n\nThe examples from above work the same for `Threads`, e.g.:\n\n```python\nfrom aioexec import Threads\n\n# ...\n\nfoo = await Threads(1).call(my_func, foo='baz')\n\n```\n\nIf necessary, you can pass an event `loop` to the executors like this:\n\n```python\nfoo = await Threads(1, my_loop).call(my_func, foo='baz')\nfoo = await Procs(1, my_loop).call(my_func, foo='baz')\n```\n\n## Development / Testing\n\nClone the repo and install dev packages:\n\n    pipenv install --dev\n\nRun tests:\n\n    pipenv run python make.py test\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/feluxe/aioexec/tarball/0.4.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/feluxe/aioexec", "keywords": "", "license": "unlicensed", "maintainer": "Felix Meyer-Wolters", "maintainer_email": "felix@meyerwolters.de", "name": "aioexec", "package_url": "https://pypi.org/project/aioexec/", "platform": "", "project_url": "https://pypi.org/project/aioexec/", "project_urls": {"Download": "https://github.com/feluxe/aioexec/tarball/0.4.0", "Homepage": "https://github.com/feluxe/aioexec"}, "release_url": "https://pypi.org/project/aioexec/0.4.0/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aioexec</h1>\n<h2>Description</h2>\n<p>Aioexec is a simple, intuitive interface around the <code>concurrent.futures</code> package and asyncio's <code>loop.run_in_executor</code> method. Aioexec is leightweight, no dependencies and ~100 LOC.</p>\n<h2>Requirements</h2>\n<p>aioexec requires Python <code>&gt;= 3.6</code></p>\n<h2>Install</h2>\n<pre><code>pip install aioexec\n</code></pre>\n<p>or</p>\n<pre><code>pipenv install aioexec\n</code></pre>\n<h2>Usage</h2>\n<p><strong>Without</strong> <code>aioexec</code> you usually run an executor something like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aysncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessPoolExecutor</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span>\n    <span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">my_func</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>With</strong> <code>aioexec</code> you would do the same like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioexec</span> <span class=\"kn\">import</span> <span class=\"n\">Procs</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Procs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n</pre>\n<p>You can call a <code>batch</code> of functions in the same executor like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioexec</span> <span class=\"kn\">import</span> <span class=\"n\">Procs</span><span class=\"p\">,</span> <span class=\"n\">Call</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">my_values</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n    <span class=\"o\">*</span><span class=\"n\">Procs</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">(</span>\n        <span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'bar'</span><span class=\"p\">),</span>\n        <span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">),</span>\n        <span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'qux'</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>This plays nicely with comprehensions:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioexec</span> <span class=\"kn\">import</span> <span class=\"n\">Procs</span><span class=\"p\">,</span> <span class=\"n\">Call</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">my_values</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n    <span class=\"o\">*</span><span class=\"n\">Procs</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">(</span>\n        <span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can also spawn a <code>pool</code> and make multiple different calls with the same executor:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aioexec</span> <span class=\"kn\">import</span> <span class=\"n\">Procs</span><span class=\"p\">,</span> <span class=\"n\">Call</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Procs</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pool</span><span class=\"p\">:</span>\n\n    <span class=\"n\">value_a</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">value_b</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">aio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n        <span class=\"o\">*</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">(</span>\n            <span class=\"n\">Call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># etc...</span>\n</pre>\n<p>The examples from above work the same for <code>Threads</code>, e.g.:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aioexec</span> <span class=\"kn\">import</span> <span class=\"n\">Threads</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Threads</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n</pre>\n<p>If necessary, you can pass an event <code>loop</code> to the executors like this:</p>\n<pre><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Threads</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">my_loop</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n<span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">Procs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">my_loop</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">my_func</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">'baz'</span><span class=\"p\">)</span>\n</pre>\n<h2>Development / Testing</h2>\n<p>Clone the repo and install dev packages:</p>\n<pre><code>pipenv install --dev\n</code></pre>\n<p>Run tests:</p>\n<pre><code>pipenv run python make.py test\n</code></pre>\n\n          </div>"}, "last_serial": 5502176, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "5c6ec1ef903bd737fa329b951c03d937", "sha256": "d3caeeea6729d1a4979e4046baaaf3992344a887291a714fa74bda6783e798f6"}, "downloads": -1, "filename": "aioexec-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5c6ec1ef903bd737fa329b951c03d937", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 3938, "upload_time": "2018-03-27T05:31:48", "upload_time_iso_8601": "2018-03-27T05:31:48.372560Z", "url": "https://files.pythonhosted.org/packages/31/1b/6171910dc6eb78553d9d23a37da4b1c47d810ebbb2c9a9e7a192a3128c16/aioexec-0.3.0-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "988e37e70b8c74f75ed70dcc31e00d81", "sha256": "124b26c54d204b862f488fd5389f7cbd5a7036da361fc1f0066d8f9eac23c4a1"}, "downloads": -1, "filename": "aioexec-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "988e37e70b8c74f75ed70dcc31e00d81", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 4022, "upload_time": "2018-03-28T04:06:49", "upload_time_iso_8601": "2018-03-28T04:06:49.810726Z", "url": "https://files.pythonhosted.org/packages/dc/73/d389bab0a64b7825220c61462d74b4342409f9d78fb672d589382e1035c8/aioexec-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "47b983326c38f2425a9e342fcba97a7b", "sha256": "5817d889247be649e0636054349b98a17762ff005bf9d657b407a6033e04c967"}, "downloads": -1, "filename": "aioexec-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "47b983326c38f2425a9e342fcba97a7b", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 4024, "upload_time": "2018-03-28T04:16:39", "upload_time_iso_8601": "2018-03-28T04:16:39.977366Z", "url": "https://files.pythonhosted.org/packages/3a/55/20b851abf8fb37272d02eed24e700a8564aa0b7e98cc622d77ea74a72653/aioexec-0.3.2-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "07f85d60cbd46dc3da8fec247079a49a", "sha256": "4dd9bb62865d3b038892217e56c38065f1d256e4afd760bedfab10a43e039172"}, "downloads": -1, "filename": "aioexec-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "07f85d60cbd46dc3da8fec247079a49a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7192, "upload_time": "2019-07-08T17:10:41", "upload_time_iso_8601": "2019-07-08T17:10:41.061058Z", "url": "https://files.pythonhosted.org/packages/50/9f/c8f09b5d65e7224b98d7dd78ed03a08c1f450c2ea013a860db02bc2c88b6/aioexec-0.4.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "07f85d60cbd46dc3da8fec247079a49a", "sha256": "4dd9bb62865d3b038892217e56c38065f1d256e4afd760bedfab10a43e039172"}, "downloads": -1, "filename": "aioexec-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "07f85d60cbd46dc3da8fec247079a49a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7192, "upload_time": "2019-07-08T17:10:41", "upload_time_iso_8601": "2019-07-08T17:10:41.061058Z", "url": "https://files.pythonhosted.org/packages/50/9f/c8f09b5d65e7224b98d7dd78ed03a08c1f450c2ea013a860db02bc2c88b6/aioexec-0.4.0-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:21:37 2020"}