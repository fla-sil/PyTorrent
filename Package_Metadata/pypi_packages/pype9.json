{"info": {"author": "The PyPe9 Team (see AUTHORS)", "author_email": "tom.g.close@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering"], "description": "Pype9\n=====\n\n.. image:: https://travis-ci.org/NeuralEnsemble/pype9.svg?branch=master\n    :target: https://travis-ci.org/NeuralEnsemble/pype9\n.. image:: https://coveralls.io/repos/github/NeuralEnsemble/pype9/badge.svg?branch=master\n    :target: https://coveralls.io/github/NeuralEnsemble/pype9?branch=master\n.. image:: https://img.shields.io/pypi/pyversions/pype9.svg\n    :target: https://pypi.python.org/pypi/pype9/\n    :alt: Supported Python versions\n.. image:: https://img.shields.io/pypi/v/pype9.svg\n    :target: https://pypi.python.org/pypi/pype9/\n    :alt: Latest Version    \n.. image:: https://readthedocs.org/projects/pype9/badge/?version=latest\n    :target: http://pype9.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status \n\nPYthon PipelinEs for 9ML (Pype9) is a collection of Python pipelines\nfor simulating networks of neuron models described in NineML_ with various\nsimulator backends.\n\n\nLinks\n-----\n\n* Documentation: http://pype9.readthedocs.org\n* Mailing list: `NeuralEnsemble Google Group`_\n* Issue tracker: https://github.com/NeuralEnsemble/pype9/issues\n\n\nSupported Simulators\n--------------------\n\nPype9 works with either or both of the following simulator backends\n\n* Neuron_ >= 7.3\n* NEST_ >= 2.12.0\n\nDetailed instructions on how to install these simulators on different platforms\ncan be found in the `Installation documentation`_.\n\n\nUnsupported NineML\n------------------\n\nNineML_ aims to be a comprehensive description language for neural simulation. This\nmeans that it allows the expression of some uncommon configurations that are\ndifficult to implement in Neuron_ and NEST_. Work is planned to make the NEURON\nand NEST pipelines in Pype9 support NineML_ fully, however until then the\nfollowing restrictions apply to models that can be used with Pype9.\n\n* synapses must be linear\n* synapses can only have one variable that varies over a projection (e.g.\n  weight)\n* no recurrent analog connections between populations (e.g. gap junctions)\n* only one event send port per cell\n* names given to NineML_ elements are not escaped and therefore can clash with\n  built-in keywords and some PyPe9 method names (e.g. 'lambda' is a reserved\n  keyword in Python). Please avoid using names that clash with C++ or Python\n  keywords (NB: This will be fixed in future versions).\n\n\nExamples\n--------\n\nGiven a cell model described in NineML_ saved in\n``my_hodgkin_huxley.xml``, the simulator pipeline can run from the command line:\n\n.. code-block:: bash\n\n   $ pype9 simulate my_hodgkin_huxley.xml#hh_props neuron 100.0 0.01 \\\n     --play isyn isyn.neo.pkl --record v v.neo.pkl --init_value v -65.0 mV\n\nor in a Python script\n\n.. code-block:: python\n\n   from pype9.simulator.neuron import cell, Simulation\n   from nineml import units as un\n\n   HodgkinHuxley = cell.MetaClass('my_hodgkin_huxley.xml#hh_class')\n   with Simulation(dt=0.01 * un.ms, seed=1234) as sim: \n      hh = HodgkinHuxley('my_hodgkin_huxley.xml#hh_props', v=-65.0 * un.mV)\n      hh.record('v')\n      sim.run(100.0 * un.ms)\n   v = hh.recording('v')\n\nPype9 also supports network models described in NineML_ via integration with PyNN_\n\n.. code-block:: bash\n\n   $ pype9 simulate brunel.xml nest 1000.0 0.01 \\\n     --record Exc.spike_output Exc-nest.neo.pkl \\\n     --record Inh.spike_output Inh-nest.neo.pkl \\\n     --seed 12345\n\nor\n\n.. code-block:: python\n\n   from pype9.simulator.neuron import Network, Simulation\n   from nineml import units as un\n\n   with Simulation(dt=0.01 * un.ms, seed=1234) as sim: \n      brunel_ai = Network('brunel.xml#AI')\n      brunel_ai.component_array('Exc').record('spike_output')\n      brunel_ai.component_array('Inh').record('spike_output')\n      sim.run(1000.0 * un.ms)\n   exc_spikes = brunel_ai.component_array('Exc').recording('spike_output')\n   inh_spikes = brunel_ai.component_array('Inh').recording('spike_output')\n\nSee `Creating Simulations in Python`_ in the Pype9 docs for more examples and pipelines.\n\nIn addition to the ``simulate`` command there is also a ``plot`` command for\nconveniently plotting the results of the simulation with Matplotlib_,\nand a ``convert`` command to convert NineML_ files between different serialization\nformats (XML, YAML, JSON and HDF5) and NineML_ versions (1.0 and 2.0dev). See the\ndocumentation for details.\n\n\n:copyright: Copyright 20012-2016 by the Pype9 team, see AUTHORS.\n:license: MIT, see LICENSE for details.\n\n.. _PyNN: http://neuralensemble.org/docs/PyNN/\n.. _`NeuralEnsemble Google Group`: https://groups.google.com/forum/#!forum/neuralensemble\n.. _Matplotlib: http://matplotlib.org\n.. _`Creating Simulations in Python`: http://pype9.readthedocs.io/latest/scripting.html\n.. _`Installation documentation`: http://pype9.readthedocs.io/en/latest/installation.html\n.. _NineML: http://nineml.net\n.. _NEST: https://nest-simulator.org\n.. _Neuron: https://neuron.yale.edu.au\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://readthedocs.io/pype9", "keywords": "NineML pipeline computational neuroscience modeling interoperability XML YAML JSON HDF5 9ML neuron nest", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pype9", "package_url": "https://pypi.org/project/pype9/", "platform": "", "project_url": "https://pypi.org/project/pype9/", "project_urls": {"Homepage": "http://readthedocs.io/pype9"}, "release_url": "https://pypi.org/project/pype9/0.2/", "requires_dist": ["nineml (>=1.0)", "ninemlcatalog (>=0.1)", "sympy (>=1.1)", "Jinja2 (>=2.6)", "docutils (>=0.10)", "mock (>=1.0)", "numpy (>=1.5)", "quantities (>=0.11.1)", "neo (>=0.5.1)", "mpi4py (>=1.3.1)", "pyNN (>=0.9.1)", "lazyarray (>=0.2.7)", "diophantine (>=0.2.0)", "PyYAML (>=3.11)", "h5py (>=2.7.0)", "future (>=0.16)", "matplotlib (>=2.0); extra == 'plot'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "summary": "PYthon PipelinEs for 9ML (Pype9) is a collection of Python pipelines for simulating networks of neuron models described in 9ML with various simulator backends.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/NeuralEnsemble/pype9\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/NeuralEnsemble/pype9.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9133da555f64bab059536ddfbc18cffb927e9205/68747470733a2f2f7472617669732d63692e6f72672f4e657572616c456e73656d626c652f70797065392e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/NeuralEnsemble/pype9?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/NeuralEnsemble/pype9/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/324794198e611d1f83e5cf11235e4baa4bf49f10/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4e657572616c456e73656d626c652f70797065392f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/pype9/\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e0100c8f8d2dbfed5e161b668347e0a5f3e2910/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70797065392e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pype9/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/070d5569229dc984916045ebd9fc8bc1596a55dd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70797065392e737667\"></a>\n<a href=\"http://pype9.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8cf5dbd819cd513aef851e48e63e24fc3b6b4e27/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70797065392f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>PYthon PipelinEs for 9ML (Pype9) is a collection of Python pipelines\nfor simulating networks of neuron models described in <a href=\"http://nineml.net\" rel=\"nofollow\">NineML</a> with various\nsimulator backends.</p>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>Documentation: <a href=\"http://pype9.readthedocs.org\" rel=\"nofollow\">http://pype9.readthedocs.org</a></li>\n<li>Mailing list: <a href=\"https://groups.google.com/forum/#!forum/neuralensemble\" rel=\"nofollow\">NeuralEnsemble Google Group</a></li>\n<li>Issue tracker: <a href=\"https://github.com/NeuralEnsemble/pype9/issues\" rel=\"nofollow\">https://github.com/NeuralEnsemble/pype9/issues</a></li>\n</ul>\n</div>\n<div id=\"supported-simulators\">\n<h2>Supported Simulators</h2>\n<p>Pype9 works with either or both of the following simulator backends</p>\n<ul>\n<li><a href=\"https://neuron.yale.edu.au\" rel=\"nofollow\">Neuron</a> &gt;= 7.3</li>\n<li><a href=\"https://nest-simulator.org\" rel=\"nofollow\">NEST</a> &gt;= 2.12.0</li>\n</ul>\n<p>Detailed instructions on how to install these simulators on different platforms\ncan be found in the <a href=\"http://pype9.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">Installation documentation</a>.</p>\n</div>\n<div id=\"unsupported-nineml\">\n<h2>Unsupported NineML</h2>\n<p><a href=\"http://nineml.net\" rel=\"nofollow\">NineML</a> aims to be a comprehensive description language for neural simulation. This\nmeans that it allows the expression of some uncommon configurations that are\ndifficult to implement in <a href=\"https://neuron.yale.edu.au\" rel=\"nofollow\">Neuron</a> and <a href=\"https://nest-simulator.org\" rel=\"nofollow\">NEST</a>. Work is planned to make the NEURON\nand NEST pipelines in Pype9 support <a href=\"http://nineml.net\" rel=\"nofollow\">NineML</a> fully, however until then the\nfollowing restrictions apply to models that can be used with Pype9.</p>\n<ul>\n<li>synapses must be linear</li>\n<li>synapses can only have one variable that varies over a projection (e.g.\nweight)</li>\n<li>no recurrent analog connections between populations (e.g. gap junctions)</li>\n<li>only one event send port per cell</li>\n<li>names given to <a href=\"http://nineml.net\" rel=\"nofollow\">NineML</a> elements are not escaped and therefore can clash with\nbuilt-in keywords and some PyPe9 method names (e.g. \u2018lambda\u2019 is a reserved\nkeyword in Python). Please avoid using names that clash with C++ or Python\nkeywords (NB: This will be fixed in future versions).</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Given a cell model described in <a href=\"http://nineml.net\" rel=\"nofollow\">NineML</a> saved in\n<tt>my_hodgkin_huxley.xml</tt>, the simulator pipeline can run from the command line:</p>\n<pre>$ pype9 simulate my_hodgkin_huxley.xml#hh_props neuron <span class=\"m\">100</span>.0 <span class=\"m\">0</span>.01 <span class=\"se\">\\\n</span>  --play isyn isyn.neo.pkl --record v v.neo.pkl --init_value v -65.0 mV\n</pre>\n<p>or in a Python script</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pype9.simulator.neuron</span> <span class=\"kn\">import</span> <span class=\"n\">cell</span><span class=\"p\">,</span> <span class=\"n\">Simulation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nineml</span> <span class=\"kn\">import</span> <span class=\"n\">units</span> <span class=\"k\">as</span> <span class=\"n\">un</span>\n\n<span class=\"n\">HodgkinHuxley</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">MetaClass</span><span class=\"p\">(</span><span class=\"s1\">'my_hodgkin_huxley.xml#hh_class'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">Simulation</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.01</span> <span class=\"o\">*</span> <span class=\"n\">un</span><span class=\"o\">.</span><span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">sim</span><span class=\"p\">:</span>\n   <span class=\"n\">hh</span> <span class=\"o\">=</span> <span class=\"n\">HodgkinHuxley</span><span class=\"p\">(</span><span class=\"s1\">'my_hodgkin_huxley.xml#hh_props'</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"o\">=-</span><span class=\"mf\">65.0</span> <span class=\"o\">*</span> <span class=\"n\">un</span><span class=\"o\">.</span><span class=\"n\">mV</span><span class=\"p\">)</span>\n   <span class=\"n\">hh</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"s1\">'v'</span><span class=\"p\">)</span>\n   <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mf\">100.0</span> <span class=\"o\">*</span> <span class=\"n\">un</span><span class=\"o\">.</span><span class=\"n\">ms</span><span class=\"p\">)</span>\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">hh</span><span class=\"o\">.</span><span class=\"n\">recording</span><span class=\"p\">(</span><span class=\"s1\">'v'</span><span class=\"p\">)</span>\n</pre>\n<p>Pype9 also supports network models described in <a href=\"http://nineml.net\" rel=\"nofollow\">NineML</a> via integration with <a href=\"http://neuralensemble.org/docs/PyNN/\" rel=\"nofollow\">PyNN</a></p>\n<pre>$ pype9 simulate brunel.xml nest <span class=\"m\">1000</span>.0 <span class=\"m\">0</span>.01 <span class=\"se\">\\\n</span>  --record Exc.spike_output Exc-nest.neo.pkl <span class=\"se\">\\\n</span>  --record Inh.spike_output Inh-nest.neo.pkl <span class=\"se\">\\\n</span>  --seed <span class=\"m\">12345</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pype9.simulator.neuron</span> <span class=\"kn\">import</span> <span class=\"n\">Network</span><span class=\"p\">,</span> <span class=\"n\">Simulation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nineml</span> <span class=\"kn\">import</span> <span class=\"n\">units</span> <span class=\"k\">as</span> <span class=\"n\">un</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Simulation</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"mf\">0.01</span> <span class=\"o\">*</span> <span class=\"n\">un</span><span class=\"o\">.</span><span class=\"n\">ms</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">1234</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">sim</span><span class=\"p\">:</span>\n   <span class=\"n\">brunel_ai</span> <span class=\"o\">=</span> <span class=\"n\">Network</span><span class=\"p\">(</span><span class=\"s1\">'brunel.xml#AI'</span><span class=\"p\">)</span>\n   <span class=\"n\">brunel_ai</span><span class=\"o\">.</span><span class=\"n\">component_array</span><span class=\"p\">(</span><span class=\"s1\">'Exc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"s1\">'spike_output'</span><span class=\"p\">)</span>\n   <span class=\"n\">brunel_ai</span><span class=\"o\">.</span><span class=\"n\">component_array</span><span class=\"p\">(</span><span class=\"s1\">'Inh'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"s1\">'spike_output'</span><span class=\"p\">)</span>\n   <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mf\">1000.0</span> <span class=\"o\">*</span> <span class=\"n\">un</span><span class=\"o\">.</span><span class=\"n\">ms</span><span class=\"p\">)</span>\n<span class=\"n\">exc_spikes</span> <span class=\"o\">=</span> <span class=\"n\">brunel_ai</span><span class=\"o\">.</span><span class=\"n\">component_array</span><span class=\"p\">(</span><span class=\"s1\">'Exc'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">recording</span><span class=\"p\">(</span><span class=\"s1\">'spike_output'</span><span class=\"p\">)</span>\n<span class=\"n\">inh_spikes</span> <span class=\"o\">=</span> <span class=\"n\">brunel_ai</span><span class=\"o\">.</span><span class=\"n\">component_array</span><span class=\"p\">(</span><span class=\"s1\">'Inh'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">recording</span><span class=\"p\">(</span><span class=\"s1\">'spike_output'</span><span class=\"p\">)</span>\n</pre>\n<p>See <a href=\"http://pype9.readthedocs.io/latest/scripting.html\" rel=\"nofollow\">Creating Simulations in Python</a> in the Pype9 docs for more examples and pipelines.</p>\n<p>In addition to the <tt>simulate</tt> command there is also a <tt>plot</tt> command for\nconveniently plotting the results of the simulation with <a href=\"http://matplotlib.org\" rel=\"nofollow\">Matplotlib</a>,\nand a <tt>convert</tt> command to convert <a href=\"http://nineml.net\" rel=\"nofollow\">NineML</a> files between different serialization\nformats (XML, YAML, JSON and HDF5) and <a href=\"http://nineml.net\" rel=\"nofollow\">NineML</a> versions (1.0 and 2.0dev). See the\ndocumentation for details.</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>copyright:</th><td>Copyright 20012-2016 by the Pype9 team, see AUTHORS.</td>\n</tr>\n<tr><th>license:</th><td>MIT, see LICENSE for details.</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 3367790, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b5d104f3454b2edebdbdd8592426f90a", "sha256": "d7e63e31e199720859a1e4a2cd479ec583c7a63c0ccba47f6d3818c956805110"}, "downloads": -1, "filename": "pype9-0.1.tar.gz", "has_sig": false, "md5_digest": "b5d104f3454b2edebdbdd8592426f90a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118423, "upload_time": "2017-11-27T11:12:56", "upload_time_iso_8601": "2017-11-27T11:12:56.554501Z", "url": "https://files.pythonhosted.org/packages/e8/e1/705bd64520705381c81dc865ec701ccb3c1fa77680cf8b93266757261a77/pype9-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7c95d009ddf96fde435b41eaebcafdbe", "sha256": "9251a4bb8fd670e2041952ae85bd8e4675fbc6c60cfff393469718ec75f12fb8"}, "downloads": -1, "filename": "pype9-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7c95d009ddf96fde435b41eaebcafdbe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 245195, "upload_time": "2017-11-27T12:53:46", "upload_time_iso_8601": "2017-11-27T12:53:46.155849Z", "url": "https://files.pythonhosted.org/packages/33/46/483dbaa574873d15cc65f04942b265ae7f9b76d536cc94831a1d096b9e90/pype9-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "453b09dbab2ad95c701d1c8e5733c6ad", "sha256": "c4942701e3729e96e2984e9cd828bd043a4f57ae749ee5bacfa27c6380966a64"}, "downloads": -1, "filename": "pype9-0.2.tar.gz", "has_sig": false, "md5_digest": "453b09dbab2ad95c701d1c8e5733c6ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 116089, "upload_time": "2017-11-27T12:53:48", "upload_time_iso_8601": "2017-11-27T12:53:48.993704Z", "url": "https://files.pythonhosted.org/packages/76/09/28f22b2804dfa0896be38c2aaeb44628668c2d5a0efa6c5c28461d04eb3e/pype9-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c95d009ddf96fde435b41eaebcafdbe", "sha256": "9251a4bb8fd670e2041952ae85bd8e4675fbc6c60cfff393469718ec75f12fb8"}, "downloads": -1, "filename": "pype9-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7c95d009ddf96fde435b41eaebcafdbe", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 245195, "upload_time": "2017-11-27T12:53:46", "upload_time_iso_8601": "2017-11-27T12:53:46.155849Z", "url": "https://files.pythonhosted.org/packages/33/46/483dbaa574873d15cc65f04942b265ae7f9b76d536cc94831a1d096b9e90/pype9-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "453b09dbab2ad95c701d1c8e5733c6ad", "sha256": "c4942701e3729e96e2984e9cd828bd043a4f57ae749ee5bacfa27c6380966a64"}, "downloads": -1, "filename": "pype9-0.2.tar.gz", "has_sig": false, "md5_digest": "453b09dbab2ad95c701d1c8e5733c6ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 116089, "upload_time": "2017-11-27T12:53:48", "upload_time_iso_8601": "2017-11-27T12:53:48.993704Z", "url": "https://files.pythonhosted.org/packages/76/09/28f22b2804dfa0896be38c2aaeb44628668c2d5a0efa6c5c28461d04eb3e/pype9-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:46 2020"}