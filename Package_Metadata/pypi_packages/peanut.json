{"info": {"author": "Johannes K\u00f6ster", "author_email": "johannes.koester@tu-dortmund.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "=======================================\nPEANUT - The ParallEl AligNment UTility\n=======================================\n\nPEANUT is a read mapper for DNA or RNA sequence reads. Read mapping is the\nprocess of aligning biological DNA or RNA sequencing reads to a known\nreference genome.\n\nBy exploiting the massive parallelism of modern graphics processors and a novel\nindex datastructure (the q-group index), PEANUT achieves supreme speed compared\nto current state of the art read mappers like BWA MEM, Bowtie2 and RazerS3\nwhile maintaining their accuracy. PEANUT thereby allows to report both only the\nbest hit or all hits of a read.\n\nWhen using PEANUT, please cite our article:\n\n    K\u00f6ster J, Rahmann S (2014).\n    Massively parallel read mapping on GPUs with the q-group index and PEANUT.\n    PeerJ 2:e606 http://dx.doi.org/10.7717/peerj.606\n\n\nRequirements\n------------\n\n* A POSIX compatible OS (e.g. Linux, MacOS X, FreeBSD)\n* an NVIDIA GPU with up-to-date proprietary drivers and at least 1.5GB RAM\n  (this may change in the future as the AMD drivers become more mature)\n* Python >= 3.2\n* Numpy >= 1.7\n* Cython >= 0.19\n* PyOpenCL >= 2013.1\n\n\nInstallation\n------------\n\nIf not already present, you will need the proprietary NVIDIA drivers, Python3,\nsetuptools, Cython, Numpy and PyOpenCL.\nOn Ubuntu or Debian based systems, the NVIDIA drivers can be installed with::\n\n   $ sudo apt-get install nvidia-current\n\nwhich requires admin rights.\nWith admin rights, you should install setuptools, Cython and Numpy via::\n\n   $ sudo apt-get install python3-setuptools python3-numpy cython\n\nWithout admin rights, you can use a userspace Python 3 distribution like\nhttps://store.continuum.io/cshop/anaconda.\n\nYou can install PEANUT using the easy_install3 tool provided by setuptools.\nAll missing dependencies will be installed automatically::\n\n   $ easy_install3 --user peanut\n\nWhen installing manually from setup.py, just execute::\n\n   $ python3 setup.py install --user\n\nTo update PEANUT, issue::\n\n   $ easy_install3 -U peanut --user\n\nUsage\n-----\n\nPEANUT will be available as a command line tool.\nTo index a reference genome *genome.fasta*, issue the following::\n\n   $ peanut index genome.fasta genome.index.hdf5\n\nTo map paired end reads *reads.1.fastq* and *reads.2.fastq* onto the indexed\nreference, use the following invocation::\n\n   $ peanut map --threads 8 --insert-size 200 --insert-size-error 50 genome.index.hdf5 reads.1.fastq reads.2.fastq | samtools view -Sb - > mapped.bam\n\nHere, an insert size or 200 with a tolerance of 50 is expected. Defining the\nexpected insert size is required for PEANUT to be able to detect properly\npaired reads. Setting the wrong insert size here can lead to reduced\nperformance since PEANUT will try to rescue reads not properly paired by\nperforming additional alignments. As can be seen, PEANUT outputs hits in the\nSAM format. Hence, output has to be piped into samtools to obtain a BAM file.\n\nPer default, PEANUT reports the best and all equally good hits of a read.\nAlternatively, it can be configured to report a desired number of strata of\nequally good hits::\n\n   $ peanut map --strata <N> ...\n\nHere, N is the number of desired strata, with N=all telling PEANUT to report\nall hits of a read down to a given error tolerance.\n\nPEANUT buffers reads and hits in GPU and CPU memory. The default buffer\nsettings of PEANUT are optimized for a GPU with at least 1.5 GB memory and a\nCPU with 16 GB memory (but 8 GB should do, too). You can lower both buffer\nsizes to adapt for weaker systems, e.g.::\n\n   $ peanut map --read-buffer 100000 --hits-buffer 500000 ...\n\nThis, however, can reduce performance since the amount of possible parallelism\non the GPU is affected. For further help, invoke::\n\n   $ peanut --help\n\nor visit http://peanut.readthedocs.org.\n\nFAQ\n---\n\nThe following questions might be of general interest.\n\n* Which resource requirements does PEANUT have?\n\n  With default settings, it needs 16GB RAM for the CPU and a decent NVIDIA GPU\n  with 1.5GB RAM.\n\n* How many reads are mapped in one step?\n\n  Per default, PEANUT maps one million reads per step. In case of paired end,\n  half a million from each end are mapped.\n  This influences the amount of memory used, and can be regulated as shown above.\n\n* How do you decide which hit is the right one to report?\n\n  The hit with the highest percent identity to the reference is reported as the best hit.\n  With paired-end reads, percent identities of properly paired hits are summed for\n  this decision. If no hit is properly paired, PEANUT tries to rescue the pair for the\n  best hit by performing an alignment within the given expected insert size.\n  When reporting more than one hit, they are sorted into equally\n  scoring strata and the given number of strata is reported (see above).\n\n* I would like to modify PEANUT. How should I start?\n\n  You can download the source or checkout from Git (see above).\n  Then modify anything you want, and issue the following, instructing Python to\n  automatically rebuild and install everything that was changed::\n\n   $ python3 setup.py install\n\nNews\n----\n\n=========== ===================================================================\n16 Jul 2015 Release 1.3.7 of PEANUT. Fixed a bug in cigar string calculation\n            that could cause shifted alignments in some cases.\n----------- -------------------------------------------------------------------\n25 Apr 2015 Release 1.3.6 of PEANUT. Allow to choose device type from command \n            line. This should enable PEANUT to run on other OpenCL devices.\n            The nature of the algorithm suits best to GPUs, though.\n----------- -------------------------------------------------------------------\n9 Nov 2014  Release 1.3.5 of PEANUT. Added missing .pyx and .pxd files to \n            source tarball distributed via Pypi.\n----------- -------------------------------------------------------------------\n5 Sep 2014  Release 1.3.2 of PEANUT. Fixed a bug causing an invalid OpenCL work\n            group size with uneven number of reads (special thanks to Sean Li\n            for reporting this).\n----------- -------------------------------------------------------------------\n18 Aug 2014 Release 1.3.1 of PEANUT. Added rescue mode for paired-end\n            sequencing.\n----------- -------------------------------------------------------------------\n7 Jul 2014  Release 1.2 of PEANUT. Improved mapping quality estimate that\n            reflects the original posterior probability like defined in the MAQ\n            paper of Heng Li.\n----------- -------------------------------------------------------------------\n26 May 2014 Release 1.1 of PEANUT. Reduced memory usage (at most 1/2 if you are\n            lucky).\n----------- -------------------------------------------------------------------\n16 May 2014 Release 1.0.3 of PEANUT. Changed the argument order for the map\n            subcommand to agree with other mappers.\n----------- -------------------------------------------------------------------\n7 May 2014  Release 1.0.2 of PEANUT. More fixes for alignment selection in case\n            of paired end reads. Fixed missing import and --query-buffer not\n            being considered.\n----------- -------------------------------------------------------------------\n30 Apr 2014 Release 1.0.1 of PEANUT. Improved flag usage in SAM output.\n            Rescaled mapping quality in accordance with the paper. Fixed rare\n            cases of where the wrong mate alignment was chosen as the best\n            alignment.\n=========== ===================================================================\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://peanut.readthedocs.org", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "peanut", "package_url": "https://pypi.org/project/peanut/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/peanut/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://peanut.readthedocs.org"}, "release_url": "https://pypi.org/project/peanut/1.3.7/", "requires_dist": null, "requires_python": null, "summary": "A massively parallel GPU read mapper using OpenCL.", "version": "1.3.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PEANUT is a read mapper for DNA or RNA sequence reads. Read mapping is the\nprocess of aligning biological DNA or RNA sequencing reads to a known\nreference genome.</p>\n<p>By exploiting the massive parallelism of modern graphics processors and a novel\nindex datastructure (the q-group index), PEANUT achieves supreme speed compared\nto current state of the art read mappers like BWA MEM, Bowtie2 and RazerS3\nwhile maintaining their accuracy. PEANUT thereby allows to report both only the\nbest hit or all hits of a read.</p>\n<p>When using PEANUT, please cite our article:</p>\n<blockquote>\nK\u00f6ster J, Rahmann S (2014).\nMassively parallel read mapping on GPUs with the q-group index and PEANUT.\nPeerJ 2:e606 <a href=\"http://dx.doi.org/10.7717/peerj.606\" rel=\"nofollow\">http://dx.doi.org/10.7717/peerj.606</a></blockquote>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>A POSIX compatible OS (e.g. Linux, MacOS X, FreeBSD)</li>\n<li>an NVIDIA GPU with up-to-date proprietary drivers and at least 1.5GB RAM\n(this may change in the future as the AMD drivers become more mature)</li>\n<li>Python &gt;= 3.2</li>\n<li>Numpy &gt;= 1.7</li>\n<li>Cython &gt;= 0.19</li>\n<li>PyOpenCL &gt;= 2013.1</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>If not already present, you will need the proprietary NVIDIA drivers, Python3,\nsetuptools, Cython, Numpy and PyOpenCL.\nOn Ubuntu or Debian based systems, the NVIDIA drivers can be installed with:</p>\n<pre>$ sudo apt-get install nvidia-current\n</pre>\n<p>which requires admin rights.\nWith admin rights, you should install setuptools, Cython and Numpy via:</p>\n<pre>$ sudo apt-get install python3-setuptools python3-numpy cython\n</pre>\n<p>Without admin rights, you can use a userspace Python 3 distribution like\n<a href=\"https://store.continuum.io/cshop/anaconda\" rel=\"nofollow\">https://store.continuum.io/cshop/anaconda</a>.</p>\n<p>You can install PEANUT using the easy_install3 tool provided by setuptools.\nAll missing dependencies will be installed automatically:</p>\n<pre>$ easy_install3 --user peanut\n</pre>\n<p>When installing manually from setup.py, just execute:</p>\n<pre>$ python3 setup.py install --user\n</pre>\n<p>To update PEANUT, issue:</p>\n<pre>$ easy_install3 -U peanut --user\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>PEANUT will be available as a command line tool.\nTo index a reference genome <em>genome.fasta</em>, issue the following:</p>\n<pre>$ peanut index genome.fasta genome.index.hdf5\n</pre>\n<p>To map paired end reads <em>reads.1.fastq</em> and <em>reads.2.fastq</em> onto the indexed\nreference, use the following invocation:</p>\n<pre>$ peanut map --threads 8 --insert-size 200 --insert-size-error 50 genome.index.hdf5 reads.1.fastq reads.2.fastq | samtools view -Sb - &gt; mapped.bam\n</pre>\n<p>Here, an insert size or 200 with a tolerance of 50 is expected. Defining the\nexpected insert size is required for PEANUT to be able to detect properly\npaired reads. Setting the wrong insert size here can lead to reduced\nperformance since PEANUT will try to rescue reads not properly paired by\nperforming additional alignments. As can be seen, PEANUT outputs hits in the\nSAM format. Hence, output has to be piped into samtools to obtain a BAM file.</p>\n<p>Per default, PEANUT reports the best and all equally good hits of a read.\nAlternatively, it can be configured to report a desired number of strata of\nequally good hits:</p>\n<pre>$ peanut map --strata &lt;N&gt; ...\n</pre>\n<p>Here, N is the number of desired strata, with N=all telling PEANUT to report\nall hits of a read down to a given error tolerance.</p>\n<p>PEANUT buffers reads and hits in GPU and CPU memory. The default buffer\nsettings of PEANUT are optimized for a GPU with at least 1.5 GB memory and a\nCPU with 16 GB memory (but 8 GB should do, too). You can lower both buffer\nsizes to adapt for weaker systems, e.g.:</p>\n<pre>$ peanut map --read-buffer 100000 --hits-buffer 500000 ...\n</pre>\n<p>This, however, can reduce performance since the amount of possible parallelism\non the GPU is affected. For further help, invoke:</p>\n<pre>$ peanut --help\n</pre>\n<p>or visit <a href=\"http://peanut.readthedocs.org\" rel=\"nofollow\">http://peanut.readthedocs.org</a>.</p>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<p>The following questions might be of general interest.</p>\n<ul>\n<li><p>Which resource requirements does PEANUT have?</p>\n<p>With default settings, it needs 16GB RAM for the CPU and a decent NVIDIA GPU\nwith 1.5GB RAM.</p>\n</li>\n<li><p>How many reads are mapped in one step?</p>\n<p>Per default, PEANUT maps one million reads per step. In case of paired end,\nhalf a million from each end are mapped.\nThis influences the amount of memory used, and can be regulated as shown above.</p>\n</li>\n<li><p>How do you decide which hit is the right one to report?</p>\n<p>The hit with the highest percent identity to the reference is reported as the best hit.\nWith paired-end reads, percent identities of properly paired hits are summed for\nthis decision. If no hit is properly paired, PEANUT tries to rescue the pair for the\nbest hit by performing an alignment within the given expected insert size.\nWhen reporting more than one hit, they are sorted into equally\nscoring strata and the given number of strata is reported (see above).</p>\n</li>\n<li><p>I would like to modify PEANUT. How should I start?</p>\n<p>You can download the source or checkout from Git (see above).\nThen modify anything you want, and issue the following, instructing Python to\nautomatically rebuild and install everything that was changed:</p>\n<pre>$ python3 setup.py install\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"news\">\n<h2>News</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>16 Jul 2015</td>\n<td>Release 1.3.7 of PEANUT. Fixed a bug in cigar string calculation\nthat could cause shifted alignments in some cases.</td>\n</tr>\n<tr><td>25 Apr 2015</td>\n<td>Release 1.3.6 of PEANUT. Allow to choose device type from command\nline. This should enable PEANUT to run on other OpenCL devices.\nThe nature of the algorithm suits best to GPUs, though.</td>\n</tr>\n<tr><td>9 Nov 2014</td>\n<td>Release 1.3.5 of PEANUT. Added missing .pyx and .pxd files to\nsource tarball distributed via Pypi.</td>\n</tr>\n<tr><td>5 Sep 2014</td>\n<td>Release 1.3.2 of PEANUT. Fixed a bug causing an invalid OpenCL work\ngroup size with uneven number of reads (special thanks to Sean Li\nfor reporting this).</td>\n</tr>\n<tr><td>18 Aug 2014</td>\n<td>Release 1.3.1 of PEANUT. Added rescue mode for paired-end\nsequencing.</td>\n</tr>\n<tr><td>7 Jul 2014</td>\n<td>Release 1.2 of PEANUT. Improved mapping quality estimate that\nreflects the original posterior probability like defined in the MAQ\npaper of Heng Li.</td>\n</tr>\n<tr><td>26 May 2014</td>\n<td>Release 1.1 of PEANUT. Reduced memory usage (at most 1/2 if you are\nlucky).</td>\n</tr>\n<tr><td>16 May 2014</td>\n<td>Release 1.0.3 of PEANUT. Changed the argument order for the map\nsubcommand to agree with other mappers.</td>\n</tr>\n<tr><td>7 May 2014</td>\n<td>Release 1.0.2 of PEANUT. More fixes for alignment selection in case\nof paired end reads. Fixed missing import and \u2013query-buffer not\nbeing considered.</td>\n</tr>\n<tr><td>30 Apr 2014</td>\n<td>Release 1.0.1 of PEANUT. Improved flag usage in SAM output.\nRescaled mapping quality in accordance with the paper. Fixed rare\ncases of where the wrong mate alignment was chosen as the best\nalignment.</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 1635912, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6dc377e97acae4e75f23d7de98887e83", "sha256": "4475186bb1a38d8835122d2f4e32e473fae5031fdfd7f9e933e3c8bf56d13d23"}, "downloads": -1, "filename": "peanut-0.1.tar.gz", "has_sig": false, "md5_digest": "6dc377e97acae4e75f23d7de98887e83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 591870, "upload_time": "2014-03-07T10:16:38", "upload_time_iso_8601": "2014-03-07T10:16:38.211075Z", "url": "https://files.pythonhosted.org/packages/84/e1/78a80a4222ac86ab0a2af487b92fbe59c4abf2904a707c1be5d7a6658fc8/peanut-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5bfd0e5b3f32fc3ee105a39b4a10ea25", "sha256": "c39be2b5cd7e999c450b567bb8033aa1b99f2e7c4542a5228bf9329b6acd1111"}, "downloads": -1, "filename": "peanut-0.2.tar.gz", "has_sig": false, "md5_digest": "5bfd0e5b3f32fc3ee105a39b4a10ea25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 589158, "upload_time": "2014-03-10T10:34:13", "upload_time_iso_8601": "2014-03-10T10:34:13.447638Z", "url": "https://files.pythonhosted.org/packages/6b/94/ece96a1e60e4861b83b1ec933526ed872caa97f274ab27fde7ecddf2f842/peanut-0.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "5423cb8bc2c98a8e098a8fc74c2b8865", "sha256": "880f444285b9e81026057724c386c12ed217fe79282db7f38aadc7ac9ae11784"}, "downloads": -1, "filename": "peanut-1.0.tar.gz", "has_sig": false, "md5_digest": "5423cb8bc2c98a8e098a8fc74c2b8865", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 597955, "upload_time": "2014-03-27T11:59:54", "upload_time_iso_8601": "2014-03-27T11:59:54.324068Z", "url": "https://files.pythonhosted.org/packages/62/b2/dda4e46f466a3a29af2d55a2da9aea7805c32f158abfdcfc9a2fba7abec7/peanut-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c12ae41e14fe139f685d6ee8f3819b4b", "sha256": "c99c9d38cd780203f6b6c0c235a75691d246214c29ea73fea7089a36fdce45a3"}, "downloads": -1, "filename": "peanut-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c12ae41e14fe139f685d6ee8f3819b4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 584784, "upload_time": "2014-04-30T14:02:16", "upload_time_iso_8601": "2014-04-30T14:02:16.794846Z", "url": "https://files.pythonhosted.org/packages/a7/50/f9c265f4fff9d82bd5c728a0a6b36f243909d18f502ed2a5c412cbb39606/peanut-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "c6873ded264af09b819872f8a6d40235", "sha256": "647091fc5028f112a278e4b7053230e7bd187e813f9d0877a08725d757b07c65"}, "downloads": -1, "filename": "peanut-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c6873ded264af09b819872f8a6d40235", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 586162, "upload_time": "2014-05-07T16:17:34", "upload_time_iso_8601": "2014-05-07T16:17:34.640361Z", "url": "https://files.pythonhosted.org/packages/f4/f6/3bb0af5275a8489bd5fed7d1fd704208db4b0ccee863c268f88d56766e9c/peanut-1.0.2.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "523ee72e14c7e279b190b846387b6417", "sha256": "230a0b292fe90496fd2fa4a148d7617636d52064c7cdf93cd47dfc3feda562f3"}, "downloads": -1, "filename": "peanut-1.1.tar.gz", "has_sig": false, "md5_digest": "523ee72e14c7e279b190b846387b6417", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 587409, "upload_time": "2014-05-26T12:55:24", "upload_time_iso_8601": "2014-05-26T12:55:24.493482Z", "url": "https://files.pythonhosted.org/packages/fa/d2/ed983acd1bad664a324bf05d29cda3e8b35f38e871b69245b835b5694662/peanut-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "38f9d9806580035da2d06df7181791f7", "sha256": "9e892ce348c38a78df55cc29fb2465a6e37436195adc6fe1141d417ded7de01b"}, "downloads": -1, "filename": "peanut-1.2.tar.gz", "has_sig": false, "md5_digest": "38f9d9806580035da2d06df7181791f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 591507, "upload_time": "2014-07-07T14:49:42", "upload_time_iso_8601": "2014-07-07T14:49:42.120134Z", "url": "https://files.pythonhosted.org/packages/f4/22/943bbad5dba27e823e99d562ab307ac64cd7cfa26d529b63d1fca50ef77b/peanut-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "ca838307a86a62734ecce545a9fca0dc", "sha256": "c2c70b1a0b0a1de725abcd43e477f27cbdcd80acb673cb880402bb4fe8fe544f"}, "downloads": -1, "filename": "peanut-1.3.tar.gz", "has_sig": false, "md5_digest": "ca838307a86a62734ecce545a9fca0dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 696927, "upload_time": "2014-08-18T08:31:02", "upload_time_iso_8601": "2014-08-18T08:31:02.862034Z", "url": "https://files.pythonhosted.org/packages/bf/57/73eb98f9846e72be965bc243810178715e0710a8421b634dd7165a6e1f53/peanut-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "4efe104e6b1bac69fcadf453186d8706", "sha256": "83abf5bf2f963977de66371c40107fd11086346a1b287c726a4ff1a6d145056a"}, "downloads": -1, "filename": "peanut-1.3.1.tar.gz", "has_sig": false, "md5_digest": "4efe104e6b1bac69fcadf453186d8706", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 697363, "upload_time": "2014-08-18T11:36:39", "upload_time_iso_8601": "2014-08-18T11:36:39.465756Z", "url": "https://files.pythonhosted.org/packages/2e/2a/db82a90ca5be42a65f9fe5c2f66033a7f4f3fd0e70e86701d70022dcad12/peanut-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "e4819f69ec01249eb9bef2e5c1825987", "sha256": "ef2c2b8a2e895ba348afd5943ce737aa32a3fffcd3651e00782a929bffd96c3f"}, "downloads": -1, "filename": "peanut-1.3.2.tar.gz", "has_sig": false, "md5_digest": "e4819f69ec01249eb9bef2e5c1825987", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 697444, "upload_time": "2014-09-05T11:15:46", "upload_time_iso_8601": "2014-09-05T11:15:46.849502Z", "url": "https://files.pythonhosted.org/packages/32/a8/7cd20fa972451a02f2f1c0117201178f99529214539fe91a5bf5456f170e/peanut-1.3.2.tar.gz", "yanked": false}], "1.3.3": [{"comment_text": "", "digests": {"md5": "875b0a2f025bf375fc0de9e7a774ac6d", "sha256": "6805dce5df52125457106cd72d99323e879cd081b0dc8363c0b9b49985a5215b"}, "downloads": -1, "filename": "peanut-1.3.3.tar.gz", "has_sig": false, "md5_digest": "875b0a2f025bf375fc0de9e7a774ac6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1082445, "upload_time": "2014-11-09T17:49:56", "upload_time_iso_8601": "2014-11-09T17:49:56.783972Z", "url": "https://files.pythonhosted.org/packages/d4/3c/5736b6d944ec4651d5abc07897a56088e79a7ed3db98adc03cfca92da7bb/peanut-1.3.3.tar.gz", "yanked": false}], "1.3.4": [{"comment_text": "", "digests": {"md5": "f2c0f3b66bfc683fbf3726a5d4f94b14", "sha256": "566acc361e7965c9c95618ff088c4b3fe5a5899c9ef4f219a1a663d598b357eb"}, "downloads": -1, "filename": "peanut-1.3.4.tar.gz", "has_sig": false, "md5_digest": "f2c0f3b66bfc683fbf3726a5d4f94b14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 730890, "upload_time": "2014-11-09T18:50:55", "upload_time_iso_8601": "2014-11-09T18:50:55.166835Z", "url": "https://files.pythonhosted.org/packages/bc/7d/dead404bf0adb4ed055281ea85ce542a08abf09d1f27932245462ac24705/peanut-1.3.4.tar.gz", "yanked": false}], "1.3.5": [{"comment_text": "", "digests": {"md5": "6b5b2a8630ac95838c15d7717b3a61d7", "sha256": "a83d5d516bcc0321928d09ce3186d4ca22123c8de5c09e0cdc5bfe749e3f1028"}, "downloads": -1, "filename": "peanut-1.3.5.tar.gz", "has_sig": false, "md5_digest": "6b5b2a8630ac95838c15d7717b3a61d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 730906, "upload_time": "2014-11-09T18:59:49", "upload_time_iso_8601": "2014-11-09T18:59:49.133239Z", "url": "https://files.pythonhosted.org/packages/ae/c1/aa0c9e97283abc35a572750b5ee2bdb67bbc528aa13be64301dacdda1cfe/peanut-1.3.5.tar.gz", "yanked": false}], "1.3.6": [{"comment_text": "", "digests": {"md5": "1e8dca6bd2a0582637cd8591ff6bafe0", "sha256": "3b81ffb3128c29b015620972bf75715175bf5c4fb90a4bcdb5d8beeddc9b2620"}, "downloads": -1, "filename": "peanut-1.3.6.tar.gz", "has_sig": false, "md5_digest": "1e8dca6bd2a0582637cd8591ff6bafe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 732007, "upload_time": "2015-04-25T22:04:40", "upload_time_iso_8601": "2015-04-25T22:04:40.557496Z", "url": "https://files.pythonhosted.org/packages/81/7b/4181cb01ac9af94e3272ba340d6d21a3cb147c91ceb510425701ed808b37/peanut-1.3.6.tar.gz", "yanked": false}], "1.3.7": [{"comment_text": "", "digests": {"md5": "e69d2ed05d115c32311a5b760bb6c5d1", "sha256": "50f81a1bcb0669ad50e1ed9eceb8a8566f6d937672ecf4abec8e638718a5f4df"}, "downloads": -1, "filename": "peanut-1.3.7.tar.gz", "has_sig": false, "md5_digest": "e69d2ed05d115c32311a5b760bb6c5d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 714879, "upload_time": "2015-07-16T11:09:49", "upload_time_iso_8601": "2015-07-16T11:09:49.260497Z", "url": "https://files.pythonhosted.org/packages/f6/50/5fcc48d40c1ca876e4dfc9f79cf38f7b1a8adc75fb70ba52730ff7779b95/peanut-1.3.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e69d2ed05d115c32311a5b760bb6c5d1", "sha256": "50f81a1bcb0669ad50e1ed9eceb8a8566f6d937672ecf4abec8e638718a5f4df"}, "downloads": -1, "filename": "peanut-1.3.7.tar.gz", "has_sig": false, "md5_digest": "e69d2ed05d115c32311a5b760bb6c5d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 714879, "upload_time": "2015-07-16T11:09:49", "upload_time_iso_8601": "2015-07-16T11:09:49.260497Z", "url": "https://files.pythonhosted.org/packages/f6/50/5fcc48d40c1ca876e4dfc9f79cf38f7b1a8adc75fb70ba52730ff7779b95/peanut-1.3.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:57 2020"}