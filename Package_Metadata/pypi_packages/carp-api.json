{"info": {"author": "Drachenfels <drachenfels@protonmail.com>", "author_email": "drachenfels@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Version Control :: Git"], "description": "# CarpApi\n\n## What is CarpApi\n\nProject is extension of Flask. Main goal is to simplify creation of restful\napi's. On high level carp-api is just standard flask app with a few additional\nfeatures on top of it:\n\n * endpoints are grouped into namespaces and namespaces use versioning (ie. we\n   can have /1.0/user/create/ and /1.1/user/create/)\n * endpoints are automatically propagated to every version that we have\n * endpoints can override any existing endpoint from given version up\n * input/output normalisation is provided by python-schema that will allow\n   normalisation, validation and error handling\n * support of open-api standard generation based on defined endpoints (TODO)\n * error handling is configured out-of-box (TODO)\n * user session and loggers are initially configured and easy to de-stub\n\n## Why CarpApi\n\nIt's answer to CRUD principle, carp-api helps you create any api that\ncreates, amends, removes or picks resources (alternatively craft, alter,\nrecover and pillage)\n\n## Installation\n\nVia pypi:\n\n    `pip install carp-api`\n\nOr from source code:\n\n    `pip install -e git+git@github.com:Drachenfels/carp-api.git#egg=carp_api`\n\nYou are ready to roll!\n\n## Usage\n\n### Note about mandatory variables\n\nFramework wraps around a standard Flask application and documentation for Flask\ncan be consulted. The main variable FLASK_APP is already preconfigured and set\nto `carp_api.server_factory.server_factory:create_app`. For most cases it's\ngood enough and server_factory allows to override any and all components it\nuses to build an application. Another variable is SIMPLE_SETTINGS that defaults\nto `carp_api.settings.base` and should be replaced with project specific\nsettings file. Also all the variables typically exposed by Flask can be\noverriden via settings module.\n\n### First run\n\nAfter successful installation new command will be available in shell\n`carp_api`. This is a wrapper around flask with additional checks and defaults\nset. For example standard flask would be `flask run` vs `carp_api run` or\n`flask routes` is replaced with `carp_api routes`.\n\nRun:\n\n    `carp_api run`\n\nOpen base api in a browser by typing:\n\n    `sensible-browser http://localhost:5000`\n\nOn default 3 endpoints are present /ping, /favicon.ico and / that returns list\nof all available endpoints.\n\n### Adding more endpoints\n\nAssuming for versions 1.0 we want to add capaibilities to create a user, get\nlist of all users and details about specific user, it would look like as follows.\n\nIn version 1.1 we want to add addresses that can be created for given user,\naltered and removed from user, while obtaining user details should return\nadditional information. Also address deletion is considered dangerous and we do\nnot want it to propagate to any future version.\n\nIn version 1.2 we want to add tags creation and deletion.\n\nEnd effect all available urls will be as follows:\n\n```\n    /1.0/user/ (POST) - creates a new user\n    /1.0/user/ (GET) - get list of users\n    /1.0/user/uid/<uid>/ (GET) - get specific user\n\n    /1.1/user/ (POST) - creates a new user\n    /1.1/user/ (GET) - get list of users\n    /1.1/user/uid/<uid>/ (GET) - get specific user with address\n    /1.1/user/uid/<uid>/address/ (POST) - create address for specific user\n    /1.1/user/uid/<uid>/address/uid/<uid>/ (PUT) - alter existing address\n    /1.1/user/uid/<uid>/address/<uid>/ (DELETE) - remove address\n\n    /1.2/tag/ (POST) - create a tag\n    /1.2/tag/ (GET) - get a tag\n    /1.2/user/ (POST) - creates a new user\n    /1.2/user/ (GET) - get list of users\n    /1.2/user/uid/<uid>/ (GET) - get specific user with address\n    /1.2/user/uid/<uid>/address/ (POST) - create address for specific user\n    /1.2/user/uid/<uid>/address/uid/<uid>/ (PUT) - alter existing address\n```\n\nFirst inside of your project (let's call it `my_api`) create file `routing.py`,\nit should contain following code:\n\n```\n    from carp_api.routing import router\n\n    from my_api import endpoints\n\n    # version can be either, tuple, string or float number\n    router.enable('1.0', 'user', endpoints=[\n        endpoints.CreateUser,\n        endpoints.GetListOfUsers,\n    ])\n\n    # we can keep enabling as many times as we like in non specific order\n    # also version if provided as tuple may be build using strings or digits\n    router.enable((1, '0'), 'user', endpoints=[\n        endpoints.GetUserByPk,\n    ])\n\n    # this will override GetUserByPk from previous version\n    router.enable('1.1', 'user', endpoints=[\n        endpoints.GetUserWithAddressByPk,\n    ])\n\n    # namespace user/address will have no effect on url building\n    router.enable('1.1', 'user/address', endpoints=[\n        endpoints.CreateUserAddress,\n        endpoints.ChangeUserAddress,\n        endpoints.DeleteUserAddress,\n    ])\n\n    # enable version 1.2 that will have some additional functionality in form of\n    # tags\n    router.enable('1.2', 'tag', endpoints=[\n        endpoints.CreateTag,\n        endpoints.GetListOfTags,\n    ])\n```\n\nThen in a file `endpoints.py`\n\n```\n    from carp_api.endpoint import BaseEndpoint\n\n\n    class CreateUser(BaseEndpoint):\n        url = '/'\n\n        methods = ['POST']\n\n\n    class GetListOfUsers(BaseEndpoint):\n        url = '/'\n\n\n    class GetUserByPk(BaseEndpoint):\n        url = '/uid/<id>'\n\n        # add custom name to the endpoint to make easier override with another\n        # class\n        name = 'GetUserByPk'\n\n\n    class CreateUserAddress(BaseEndpoint):\n        url = '/'\n\n        methods = ['POST']\n\n        @classmethod\n        def get_final_url(cls, version, namespace, host=None):\n            # method will override default url building\n            return '/user/uid/<id>/address/'\n\n\n    class ChangeUserAddress(BaseEndpoint):\n        url = '/'\n\n        methods = ['PUT']\n\n        @classmethod\n        def get_final_url(cls, version, namespace, host=None):\n            # method will override default url building\n            return '/user/uid/<id>/address/uid/<id>/'\n\n\n    class DeleteUserAddress(BaseEndpoint):\n        url = '/'\n\n        methods = ['DELETE']\n\n        # we do not want endpoint to go into future versions\n        propagate = False\n\n\n    class GetUserWithAddressByPk(GetUserByPk):\n        url = '/uid/<id>/'\n\n\n    class CreateTag(BaseEndpoint):\n        url = '/'\n\n        methods = ['POST']\n\n\n    class GetListOfTags(BaseEndpoint):\n        url = '/'\n```\n\nFinally we will need to create project specific settings `my_api/settings.py`\nthat will keep following code:\n\n```\n    from carp_api.settings.base import *  # NOQA\n\n\n    CARP_API_ROUTING = 'my_api.routing'\n```\n\nNow we can run our project with command: `SIMPLE_SETTINGS=my_api.settings carp_api run`\n\nAnd done, after we launch project it should have all endpoints resolved and\nready to go.\n\n## Sample project ready to clone\n\nGit clone [Carp-Api Sample Project](https://github.com/Drachenfels/carp-api-sample-project)\nin order to have local project serving responses.\n\nPlanned features for sample project involve:\n\n * pytest testing endpoints\n * docker containers\n * google app engine ready to use\n * all main features of endpoint creation present\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Drachenfels/carp-api", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "carp-api", "package_url": "https://pypi.org/project/carp-api/", "platform": "", "project_url": "https://pypi.org/project/carp-api/", "project_urls": {"Homepage": "https://github.com/Drachenfels/carp-api"}, "release_url": "https://pypi.org/project/carp-api/0.1.1/", "requires_dist": ["Flask (>=1.0)", "blinker (>=1.4)", "simple-settings (>=0.13)", "python-dateutil (>=2.7)", "pytz (>=2018.4)", "url2vapi (>=1.2)", "validators (>=0.12)", "python-schema (>=0.4.1)"], "requires_python": "", "summary": "Carp-Api is an extension on top of flask micro-framework, it allows to build endpoints and sort outs exception handling. Allowing developers to just start coding restful-api and not be concerned by standard and mundane fuff.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CarpApi</h1>\n<h2>What is CarpApi</h2>\n<p>Project is extension of Flask. Main goal is to simplify creation of restful\napi's. On high level carp-api is just standard flask app with a few additional\nfeatures on top of it:</p>\n<ul>\n<li>endpoints are grouped into namespaces and namespaces use versioning (ie. we\ncan have /1.0/user/create/ and /1.1/user/create/)</li>\n<li>endpoints are automatically propagated to every version that we have</li>\n<li>endpoints can override any existing endpoint from given version up</li>\n<li>input/output normalisation is provided by python-schema that will allow\nnormalisation, validation and error handling</li>\n<li>support of open-api standard generation based on defined endpoints (TODO)</li>\n<li>error handling is configured out-of-box (TODO)</li>\n<li>user session and loggers are initially configured and easy to de-stub</li>\n</ul>\n<h2>Why CarpApi</h2>\n<p>It's answer to CRUD principle, carp-api helps you create any api that\ncreates, amends, removes or picks resources (alternatively craft, alter,\nrecover and pillage)</p>\n<h2>Installation</h2>\n<p>Via pypi:</p>\n<pre><code>`pip install carp-api`\n</code></pre>\n<p>Or from source code:</p>\n<pre><code>`pip install -e git+git@github.com:Drachenfels/carp-api.git#egg=carp_api`\n</code></pre>\n<p>You are ready to roll!</p>\n<h2>Usage</h2>\n<h3>Note about mandatory variables</h3>\n<p>Framework wraps around a standard Flask application and documentation for Flask\ncan be consulted. The main variable FLASK_APP is already preconfigured and set\nto <code>carp_api.server_factory.server_factory:create_app</code>. For most cases it's\ngood enough and server_factory allows to override any and all components it\nuses to build an application. Another variable is SIMPLE_SETTINGS that defaults\nto <code>carp_api.settings.base</code> and should be replaced with project specific\nsettings file. Also all the variables typically exposed by Flask can be\noverriden via settings module.</p>\n<h3>First run</h3>\n<p>After successful installation new command will be available in shell\n<code>carp_api</code>. This is a wrapper around flask with additional checks and defaults\nset. For example standard flask would be <code>flask run</code> vs <code>carp_api run</code> or\n<code>flask routes</code> is replaced with <code>carp_api routes</code>.</p>\n<p>Run:</p>\n<pre><code>`carp_api run`\n</code></pre>\n<p>Open base api in a browser by typing:</p>\n<pre><code>`sensible-browser http://localhost:5000`\n</code></pre>\n<p>On default 3 endpoints are present /ping, /favicon.ico and / that returns list\nof all available endpoints.</p>\n<h3>Adding more endpoints</h3>\n<p>Assuming for versions 1.0 we want to add capaibilities to create a user, get\nlist of all users and details about specific user, it would look like as follows.</p>\n<p>In version 1.1 we want to add addresses that can be created for given user,\naltered and removed from user, while obtaining user details should return\nadditional information. Also address deletion is considered dangerous and we do\nnot want it to propagate to any future version.</p>\n<p>In version 1.2 we want to add tags creation and deletion.</p>\n<p>End effect all available urls will be as follows:</p>\n<pre><code>    /1.0/user/ (POST) - creates a new user\n    /1.0/user/ (GET) - get list of users\n    /1.0/user/uid/&lt;uid&gt;/ (GET) - get specific user\n\n    /1.1/user/ (POST) - creates a new user\n    /1.1/user/ (GET) - get list of users\n    /1.1/user/uid/&lt;uid&gt;/ (GET) - get specific user with address\n    /1.1/user/uid/&lt;uid&gt;/address/ (POST) - create address for specific user\n    /1.1/user/uid/&lt;uid&gt;/address/uid/&lt;uid&gt;/ (PUT) - alter existing address\n    /1.1/user/uid/&lt;uid&gt;/address/&lt;uid&gt;/ (DELETE) - remove address\n\n    /1.2/tag/ (POST) - create a tag\n    /1.2/tag/ (GET) - get a tag\n    /1.2/user/ (POST) - creates a new user\n    /1.2/user/ (GET) - get list of users\n    /1.2/user/uid/&lt;uid&gt;/ (GET) - get specific user with address\n    /1.2/user/uid/&lt;uid&gt;/address/ (POST) - create address for specific user\n    /1.2/user/uid/&lt;uid&gt;/address/uid/&lt;uid&gt;/ (PUT) - alter existing address\n</code></pre>\n<p>First inside of your project (let's call it <code>my_api</code>) create file <code>routing.py</code>,\nit should contain following code:</p>\n<pre><code>    from carp_api.routing import router\n\n    from my_api import endpoints\n\n    # version can be either, tuple, string or float number\n    router.enable('1.0', 'user', endpoints=[\n        endpoints.CreateUser,\n        endpoints.GetListOfUsers,\n    ])\n\n    # we can keep enabling as many times as we like in non specific order\n    # also version if provided as tuple may be build using strings or digits\n    router.enable((1, '0'), 'user', endpoints=[\n        endpoints.GetUserByPk,\n    ])\n\n    # this will override GetUserByPk from previous version\n    router.enable('1.1', 'user', endpoints=[\n        endpoints.GetUserWithAddressByPk,\n    ])\n\n    # namespace user/address will have no effect on url building\n    router.enable('1.1', 'user/address', endpoints=[\n        endpoints.CreateUserAddress,\n        endpoints.ChangeUserAddress,\n        endpoints.DeleteUserAddress,\n    ])\n\n    # enable version 1.2 that will have some additional functionality in form of\n    # tags\n    router.enable('1.2', 'tag', endpoints=[\n        endpoints.CreateTag,\n        endpoints.GetListOfTags,\n    ])\n</code></pre>\n<p>Then in a file <code>endpoints.py</code></p>\n<pre><code>    from carp_api.endpoint import BaseEndpoint\n\n\n    class CreateUser(BaseEndpoint):\n        url = '/'\n\n        methods = ['POST']\n\n\n    class GetListOfUsers(BaseEndpoint):\n        url = '/'\n\n\n    class GetUserByPk(BaseEndpoint):\n        url = '/uid/&lt;id&gt;'\n\n        # add custom name to the endpoint to make easier override with another\n        # class\n        name = 'GetUserByPk'\n\n\n    class CreateUserAddress(BaseEndpoint):\n        url = '/'\n\n        methods = ['POST']\n\n        @classmethod\n        def get_final_url(cls, version, namespace, host=None):\n            # method will override default url building\n            return '/user/uid/&lt;id&gt;/address/'\n\n\n    class ChangeUserAddress(BaseEndpoint):\n        url = '/'\n\n        methods = ['PUT']\n\n        @classmethod\n        def get_final_url(cls, version, namespace, host=None):\n            # method will override default url building\n            return '/user/uid/&lt;id&gt;/address/uid/&lt;id&gt;/'\n\n\n    class DeleteUserAddress(BaseEndpoint):\n        url = '/'\n\n        methods = ['DELETE']\n\n        # we do not want endpoint to go into future versions\n        propagate = False\n\n\n    class GetUserWithAddressByPk(GetUserByPk):\n        url = '/uid/&lt;id&gt;/'\n\n\n    class CreateTag(BaseEndpoint):\n        url = '/'\n\n        methods = ['POST']\n\n\n    class GetListOfTags(BaseEndpoint):\n        url = '/'\n</code></pre>\n<p>Finally we will need to create project specific settings <code>my_api/settings.py</code>\nthat will keep following code:</p>\n<pre><code>    from carp_api.settings.base import *  # NOQA\n\n\n    CARP_API_ROUTING = 'my_api.routing'\n</code></pre>\n<p>Now we can run our project with command: <code>SIMPLE_SETTINGS=my_api.settings carp_api run</code></p>\n<p>And done, after we launch project it should have all endpoints resolved and\nready to go.</p>\n<h2>Sample project ready to clone</h2>\n<p>Git clone <a href=\"https://github.com/Drachenfels/carp-api-sample-project\" rel=\"nofollow\">Carp-Api Sample Project</a>\nin order to have local project serving responses.</p>\n<p>Planned features for sample project involve:</p>\n<ul>\n<li>pytest testing endpoints</li>\n<li>docker containers</li>\n<li>google app engine ready to use</li>\n<li>all main features of endpoint creation present</li>\n</ul>\n\n          </div>"}, "last_serial": 6562238, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3ee92d30cfc0f97427e2dce3909ae620", "sha256": "a7d3951b177b14b6add48775247c65cacbe013de96aad12e23914d06ea824247"}, "downloads": -1, "filename": "carp_api-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3ee92d30cfc0f97427e2dce3909ae620", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40790, "upload_time": "2020-02-03T11:41:12", "upload_time_iso_8601": "2020-02-03T11:41:12.744091Z", "url": "https://files.pythonhosted.org/packages/45/db/78195cb4b46ea0bf128321e70da5022bcd48b633c525195e436c18548502/carp_api-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4de67573f795731f019f15e65828097", "sha256": "fecd99b208e3af3252198a7117842b9b209952e2615620e4294398c63435b46a"}, "downloads": -1, "filename": "carp_api-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d4de67573f795731f019f15e65828097", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35726, "upload_time": "2020-02-03T11:41:15", "upload_time_iso_8601": "2020-02-03T11:41:15.122210Z", "url": "https://files.pythonhosted.org/packages/e3/45/ad8bd733de758b397b29aa916fc4ad5d49c28c591ce9c0a7e3187fbf332f/carp_api-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "235d8535172d65039ab9054927e24e16", "sha256": "7bd8500e4d8d0a8773f4078340a050b006eb0c522a0c7526d09b4ecb7f63150b"}, "downloads": -1, "filename": "carp_api-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "235d8535172d65039ab9054927e24e16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40791, "upload_time": "2020-02-03T11:52:57", "upload_time_iso_8601": "2020-02-03T11:52:57.575783Z", "url": "https://files.pythonhosted.org/packages/3c/ef/027952e6664029513600fc89b70d20e8e8fffd1131eb6e32dccf5f102dda/carp_api-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbeb75e5bea0388544cbfc5a8c8a995d", "sha256": "71a24fcb9d425e2308782834ba63931f8d9a83628b9e9208f31de081f1b14b9e"}, "downloads": -1, "filename": "carp_api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cbeb75e5bea0388544cbfc5a8c8a995d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35722, "upload_time": "2020-02-03T11:52:59", "upload_time_iso_8601": "2020-02-03T11:52:59.110968Z", "url": "https://files.pythonhosted.org/packages/09/9c/69a65b32b9ae03dffd9003f0c63b15cd7ef6b70b3094fb6c37c384206a12/carp_api-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "235d8535172d65039ab9054927e24e16", "sha256": "7bd8500e4d8d0a8773f4078340a050b006eb0c522a0c7526d09b4ecb7f63150b"}, "downloads": -1, "filename": "carp_api-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "235d8535172d65039ab9054927e24e16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40791, "upload_time": "2020-02-03T11:52:57", "upload_time_iso_8601": "2020-02-03T11:52:57.575783Z", "url": "https://files.pythonhosted.org/packages/3c/ef/027952e6664029513600fc89b70d20e8e8fffd1131eb6e32dccf5f102dda/carp_api-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbeb75e5bea0388544cbfc5a8c8a995d", "sha256": "71a24fcb9d425e2308782834ba63931f8d9a83628b9e9208f31de081f1b14b9e"}, "downloads": -1, "filename": "carp_api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cbeb75e5bea0388544cbfc5a8c8a995d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35722, "upload_time": "2020-02-03T11:52:59", "upload_time_iso_8601": "2020-02-03T11:52:59.110968Z", "url": "https://files.pythonhosted.org/packages/09/9c/69a65b32b9ae03dffd9003f0c63b15cd7ef6b70b3094fb6c37c384206a12/carp_api-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:24 2020"}