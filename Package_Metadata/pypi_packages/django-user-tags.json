{"info": {"author": "Martin Brochhaus", "author_email": "mbrochh@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Django User Tags\n================\n\n**WORK IN PROGRESS. DO NOT USE THIS!**\n\nA Django application for allowing users to add tags to any object. Each user's\ntags are nicely separated so that the auto-suggest functionality will never\nsuggest tags that have been entered by a different user (unless you want so).\n\nInstallation\n------------\n\nYou need to install the following prerequisites in order to use this app::\n\n    pip install Django\n    pip install South\n\nIf you want to install the latest stable release from PyPi::\n\n    $ pip install django-user-tags\n\nIf you feel adventurous and want to install the latest commit from GitHub::\n\n    $ pip install -e git://github.com/bitmazk/django-user-tags.git#egg=user_tags\n\nAdd ``user_tags`` to your ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...,\n        'user_tags',\n    )\n\nDon't forget to migrate your database::\n\n    ./manage.py migrate user_tags\n\nAdd jQuery and jQuery UI and tag-it to your base template or at least to the\ntemplate that should display forms with tag fields::\n\n    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.12/jquery-ui.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script src=\"{{ STATIC_URL }}user_tags/js/tag-it.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n\nAlso add a jQuery UI theme and the tag-it theme to your template::\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1/themes/flick/jquery-ui.css\">\n    <link href=\"{{ STATIC_URL }}user_tags/css/jquery.tagit.css\" rel=\"stylesheet\" type=\"text/css\">\n\nUsage\n-----\n\nFirst you need to modify the model that should be able to hold tags::\n\n    class YourModel(models.Model):\n        TAG_FIELDS = {\n            'tags': {\n                'verbose_name': _('Tags'),\n                'help_text': _('Help text'),\n                'with_user': True,\n            },\n            'global_tags': {\n                'verbose_name': _('Global Tags'),\n                'with_user': False,\n            }\n        }\n\n``TAG_FIELDS`` is a dictionary of dictionaries. The dictionaries can have the\nfollowing keys:\n\n1. **key in main dict**. This will be the name of the tag group in the\n   database and also the form field's name.\n2. **verbose_name**. This will be the label of the form field. If not provided\n   it will be the same as ``name``.\n3. **help_text**. This will be the help text of the form field.\n4. **with user**. If ``True``, the item that gets tagged must have a ForeignKey\n   to a ``User`` object or provide a ``get_user`` method. If ``False`` we\n   assume that the tags for this item are global.\n\nNext you would create a ``ModelForm`` for your taggable model::\n\n    from django import forms\n    from user_tags.forms import UserTagsFormMixin\n    from your_app.models import YourModel\n\n    class YourModelForm(UserTagsFormMixin, forms.ModelForm):\n        class Meta:\n            model = DummyModel\n\nThe ``UserTagsFormMixin`` will do the magic for you and add a form field for\nevery item in ``TAG_FIELDS`` on your model. These fields will have a class\n``tagItInput``. Additionally the mixin will add a method\n``fieldname_tags_values`` to the form (for each of your tag fields) which will\nreturn the available tags for that field::\n\n    <script type=\"text/javascript\">\n    $(document).ready(function() {\n        $(\"#id_fieldname\").tagit({\n            allowSpaces: true\n            ,availableTags: {{ form.fieldname_tags_values|safe }}\n            ,caseSensitive: false\n        });\n    });\n    </script>\n\nThis is just a sane set of settings that we like to use. You can of course\ntweak that to your liking. See the `tag-it documentation <https://github.com/aehlke/tag-it>`_\nfor further reference.\n\nSettings\n--------\n\nUSER_TAG_RELATED_NAME\n+++++++++++++++++++++\n\nIf for some reason one of your models already has a foreign key to\n``ContentType`` with a related name of ``user_tags_tagged_items`` you can\nchange the related name used  by ``django-user-tags`` using this setting.\n\nDefault: 'user_tags_tagged_items'\n\nContribute\n----------\n\nIf you want to contribute to this project, please perform the following steps::\n\n    # Fork this repository\n    # Clone your fork\n    $ mkvirtualenv -p python2.7 django-user-tags\n    $ pip install -r requirements.txt\n    $ ./user_tags/tests/runtests.sh\n    # You should get no failing tests\n\n    $ git co -b feature_branch master\n    # Implement your feature and tests\n    $ ./user_tags/tests/runtests.sh\n    # You should still get no failing tests\n    # Describe your change in the CHANGELOG.txt\n    $ git add . && git commit\n    $ git push origin feature_branch\n    # Send us a pull request for your feature branch\n\nWhenever you run the tests a coverage output will be generated in\n``tests/coverage/index.html``. When adding new features, please make sure that\nyou keep the coverage at 100%.\n\nIf you are making changes that need to be tested in a browser (i.e. to the\nCSS or JS files), you might want to setup a Django project, follow the\ninstallation insttructions above, then run ``python setup.py develop``. This\nwill just place an egg-link to your cloned fork in your project's virtualenv.\n\nRoadmap\n-------\n\nCheck the issue tracker on github for milestones and features to come.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bitmazk/django-user-tags", "keywords": "django,tagging,ajax,user", "license": "The MIT License", "maintainer": null, "maintainer_email": null, "name": "django-user-tags", "package_url": "https://pypi.org/project/django-user-tags/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django-user-tags/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/bitmazk/django-user-tags"}, "release_url": "https://pypi.org/project/django-user-tags/1.2.1/", "requires_dist": null, "requires_python": null, "summary": "A reusable Django app that enables users of your site to tag items. Each user's\ntags are separated so that the auto-suggest functionality will never suggest\ntags another user has entered.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>WORK IN PROGRESS. DO NOT USE THIS!</strong></p>\n<p>A Django application for allowing users to add tags to any object. Each user\u2019s\ntags are nicely separated so that the auto-suggest functionality will never\nsuggest tags that have been entered by a different user (unless you want so).</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You need to install the following prerequisites in order to use this app:</p>\n<pre>pip install Django\npip install South\n</pre>\n<p>If you want to install the latest stable release from PyPi:</p>\n<pre>$ pip install django-user-tags\n</pre>\n<p>If you feel adventurous and want to install the latest commit from GitHub:</p>\n<pre>$ pip install -e git://github.com/bitmazk/django-user-tags.git#egg=user_tags\n</pre>\n<p>Add <tt>user_tags</tt> to your <tt>INSTALLED_APPS</tt>:</p>\n<pre>INSTALLED_APPS = (\n    ...,\n    'user_tags',\n)\n</pre>\n<p>Don\u2019t forget to migrate your database:</p>\n<pre>./manage.py migrate user_tags\n</pre>\n<p>Add jQuery and jQuery UI and tag-it to your base template or at least to the\ntemplate that should display forms with tag fields:</p>\n<pre>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.12/jquery-ui.min.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n&lt;script src=\"{{ STATIC_URL }}user_tags/js/tag-it.js\" type=\"text/javascript\" charset=\"utf-8\"&gt;&lt;/script&gt;\n</pre>\n<p>Also add a jQuery UI theme and the tag-it theme to your template:</p>\n<pre>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1/themes/flick/jquery-ui.css\"&gt;\n&lt;link href=\"{{ STATIC_URL }}user_tags/css/jquery.tagit.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>First you need to modify the model that should be able to hold tags:</p>\n<pre>class YourModel(models.Model):\n    TAG_FIELDS = {\n        'tags': {\n            'verbose_name': _('Tags'),\n            'help_text': _('Help text'),\n            'with_user': True,\n        },\n        'global_tags': {\n            'verbose_name': _('Global Tags'),\n            'with_user': False,\n        }\n    }\n</pre>\n<p><tt>TAG_FIELDS</tt> is a dictionary of dictionaries. The dictionaries can have the\nfollowing keys:</p>\n<ol>\n<li><strong>key in main dict</strong>. This will be the name of the tag group in the\ndatabase and also the form field\u2019s name.</li>\n<li><strong>verbose_name</strong>. This will be the label of the form field. If not provided\nit will be the same as <tt>name</tt>.</li>\n<li><strong>help_text</strong>. This will be the help text of the form field.</li>\n<li><strong>with user</strong>. If <tt>True</tt>, the item that gets tagged must have a ForeignKey\nto a <tt>User</tt> object or provide a <tt>get_user</tt> method. If <tt>False</tt> we\nassume that the tags for this item are global.</li>\n</ol>\n<p>Next you would create a <tt>ModelForm</tt> for your taggable model:</p>\n<pre>from django import forms\nfrom user_tags.forms import UserTagsFormMixin\nfrom your_app.models import YourModel\n\nclass YourModelForm(UserTagsFormMixin, forms.ModelForm):\n    class Meta:\n        model = DummyModel\n</pre>\n<p>The <tt>UserTagsFormMixin</tt> will do the magic for you and add a form field for\nevery item in <tt>TAG_FIELDS</tt> on your model. These fields will have a class\n<tt>tagItInput</tt>. Additionally the mixin will add a method\n<tt>fieldname_tags_values</tt> to the form (for each of your tag fields) which will\nreturn the available tags for that field:</p>\n<pre>&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function() {\n    $(\"#id_fieldname\").tagit({\n        allowSpaces: true\n        ,availableTags: {{ form.fieldname_tags_values|safe }}\n        ,caseSensitive: false\n    });\n});\n&lt;/script&gt;\n</pre>\n<p>This is just a sane set of settings that we like to use. You can of course\ntweak that to your liking. See the <a href=\"https://github.com/aehlke/tag-it\" rel=\"nofollow\">tag-it documentation</a>\nfor further reference.</p>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<h2 id=\"user-tag-related-name\"><span class=\"section-subtitle\">USER_TAG_RELATED_NAME</span></h2>\n<p>If for some reason one of your models already has a foreign key to\n<tt>ContentType</tt> with a related name of <tt>user_tags_tagged_items</tt> you can\nchange the related name used  by <tt><span class=\"pre\">django-user-tags</span></tt> using this setting.</p>\n<p>Default: \u2018user_tags_tagged_items\u2019</p>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>If you want to contribute to this project, please perform the following steps:</p>\n<pre># Fork this repository\n# Clone your fork\n$ mkvirtualenv -p python2.7 django-user-tags\n$ pip install -r requirements.txt\n$ ./user_tags/tests/runtests.sh\n# You should get no failing tests\n\n$ git co -b feature_branch master\n# Implement your feature and tests\n$ ./user_tags/tests/runtests.sh\n# You should still get no failing tests\n# Describe your change in the CHANGELOG.txt\n$ git add . &amp;&amp; git commit\n$ git push origin feature_branch\n# Send us a pull request for your feature branch\n</pre>\n<p>Whenever you run the tests a coverage output will be generated in\n<tt>tests/coverage/index.html</tt>. When adding new features, please make sure that\nyou keep the coverage at 100%.</p>\n<p>If you are making changes that need to be tested in a browser (i.e. to the\nCSS or JS files), you might want to setup a Django project, follow the\ninstallation insttructions above, then run <tt>python setup.py develop</tt>. This\nwill just place an egg-link to your cloned fork in your project\u2019s virtualenv.</p>\n</div>\n<div id=\"roadmap\">\n<h2>Roadmap</h2>\n<p>Check the issue tracker on github for milestones and features to come.</p>\n</div>\n\n          </div>"}, "last_serial": 2574566, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "d1f927b3ae23daecaeaa7644c9a20eaa", "sha256": "64cc8bc09b02625dccd9d73b86e26976097739118ff7ac438319451421a5f35d"}, "downloads": -1, "filename": "django-user-tags-0.2.tar.gz", "has_sig": false, "md5_digest": "d1f927b3ae23daecaeaa7644c9a20eaa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103823, "upload_time": "2012-07-25T14:28:31", "upload_time_iso_8601": "2012-07-25T14:28:31.818983Z", "url": "https://files.pythonhosted.org/packages/fe/fd/ab550bba9d59fe3dc41f6c3ce22dac299a50b4c29669620c091006ef14b7/django-user-tags-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "59173623b1e7f61e5cdef1860badc2f3", "sha256": "8902c28d8560893e98f65eb5de78ea1edf68c5023c602e9972bece94253df8f8"}, "downloads": -1, "filename": "django-user-tags-0.3.tar.gz", "has_sig": false, "md5_digest": "59173623b1e7f61e5cdef1860badc2f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104078, "upload_time": "2012-11-01T15:12:49", "upload_time_iso_8601": "2012-11-01T15:12:49.304541Z", "url": "https://files.pythonhosted.org/packages/e0/fd/2c65378af697b5befa6a65275f6979c07125206a036964098ced32979c2e/django-user-tags-0.3.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "2055b8a475e597baa002b29c70f2f13e", "sha256": "6ac3a647fd820e2c76389aa6eb26b0ab5cf86cf00cc3b5d9b20df4c6d8fa00fe"}, "downloads": -1, "filename": "django-user-tags-1.0.tar.gz", "has_sig": false, "md5_digest": "2055b8a475e597baa002b29c70f2f13e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105111, "upload_time": "2013-01-25T14:29:04", "upload_time_iso_8601": "2013-01-25T14:29:04.736864Z", "url": "https://files.pythonhosted.org/packages/bb/79/b5f9509289822c11dc6f8ae1a0f97a4f206b78e99d1cbffcb4ba2169ec5d/django-user-tags-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "6bbcde23c4a98dc7f8eecd831786e948", "sha256": "031a601500207387ef177194f2f4cadecafb164abe3bca4b60d53dfe4cc00d52"}, "downloads": -1, "filename": "django-user-tags-1.1.tar.gz", "has_sig": false, "md5_digest": "6bbcde23c4a98dc7f8eecd831786e948", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105305, "upload_time": "2013-01-25T16:06:57", "upload_time_iso_8601": "2013-01-25T16:06:57.920271Z", "url": "https://files.pythonhosted.org/packages/8f/cf/af7c1ad41a6ccdc37ce9ec27d92af38df855e3d720a3d35771a94134b3f3/django-user-tags-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "879719b4da38fcd0887cc96d19e3b563", "sha256": "5196310e59eb573d538da1a20ecf148c80d4698be19ab7beee8a27c092d34016"}, "downloads": -1, "filename": "django-user-tags-1.2.tar.gz", "has_sig": false, "md5_digest": "879719b4da38fcd0887cc96d19e3b563", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 104922, "upload_time": "2017-01-13T16:43:34", "upload_time_iso_8601": "2017-01-13T16:43:34.560224Z", "url": "https://files.pythonhosted.org/packages/0a/21/3fbfd61403d31c8b2e4d885bbb21066e3fe3527d340630c31dc5ebabc0dc/django-user-tags-1.2.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "26f9ead2bb164e9150005a4f898c9c77", "sha256": "9027c3dd12e1c7639baa9430847081608059b0e08415f22044fb8bcea61afe80"}, "downloads": -1, "filename": "django-user-tags-1.2.1.tar.gz", "has_sig": false, "md5_digest": "26f9ead2bb164e9150005a4f898c9c77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105455, "upload_time": "2017-01-14T21:56:05", "upload_time_iso_8601": "2017-01-14T21:56:05.053720Z", "url": "https://files.pythonhosted.org/packages/09/f4/b1088deec95edf6829975a3a7c80d892d825182ff9e0cf06615b8ea53145/django-user-tags-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26f9ead2bb164e9150005a4f898c9c77", "sha256": "9027c3dd12e1c7639baa9430847081608059b0e08415f22044fb8bcea61afe80"}, "downloads": -1, "filename": "django-user-tags-1.2.1.tar.gz", "has_sig": false, "md5_digest": "26f9ead2bb164e9150005a4f898c9c77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 105455, "upload_time": "2017-01-14T21:56:05", "upload_time_iso_8601": "2017-01-14T21:56:05.053720Z", "url": "https://files.pythonhosted.org/packages/09/f4/b1088deec95edf6829975a3a7c80d892d825182ff9e0cf06615b8ea53145/django-user-tags-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:06 2020"}