{"info": {"author": "Micha\u0142 Lowas-Rzechonek", "author_email": "michal@rzechonek.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing"], "description": "===============\npytest-paramark\n===============\n\n.. image:: https://img.shields.io/pypi/v/pytest-paramark.svg\n    :target: https://pypi.org/project/pytest-paramark\n    :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-paramark.svg\n    :target: https://pypi.org/project/pytest-paramark\n    :alt: Python versions\n\n.. image:: https://travis-ci.org/mrzechonek/pytest-paramark.svg?branch=master\n    :target: https://travis-ci.org/mrzechonek/pytest-paramark\n    :alt: See Build Status on Travis CI\n\nConfigure pytest fixtures using combination of parametrize and markers\n\n----\n\n\nWhat is this thing?\n-------------------\n\nThe problem\n===========\n\nPytest fixture names must be unique within the whole dependency graph\n(`#3966`_).\n\nThis means that when you want to parametrize fixtures, each parameter name must\nbe unique:\n\n.. code-block:: python\n\n   import pytest\n\n   @pytest.fixture\n   def foo(foo_option):\n      return {'option': foo_option}\n\n\n   @pytest.fixture\n   def bar(bar_option):\n      return {'option': bar_option}\n\n\n   @pytest.mark.parametrize(\n      'foo_option, bar_option',\n      [\n         (42, 24),\n      ]\n   )\n   def test_options(foo, bar):\n      assert foo['option'] == 42\n      assert bar['option'] == 24\n\nAlso, if you want to provide default vaules for options, they need to be fixtures as well:\n\n.. code-block:: python\n\n   @pytest.fixture\n   def foo_option():\n      return 'default_foo_option'\n\n\n   @pytest.fixture\n   def bar_option():\n      return 'default_bar_option'\n\n\n   @pytest.fixture\n   def foo(foo_option):\n      return {'option': foo_option}\n\n\n   @pytest.fixture\n   def bar(bar_option):\n      return {'option': bar_option}\n\n\n   def test_options(foo, bar):\n      assert foo['option'] == 'default_foo_option'\n      assert bar['option'] == 'default_bar_option'\n\nThis is inconvenient when number of options and fixtures increases, and you end\nup with lots of boilerplate code like this:\n\n.. code-block:: python\n\n   @pytest.fixture()\n   def app_elements():\n      {}\n\n\n   @pytest.fixture()\n   def app_sequence():\n      return None\n\n\n   @pytest.fixture()\n   def app_uuid(uuid=None):\n      return uuid or uuid4()\n\n\n   @pytest.fixture\n   def app_app_key():\n      return ApplicationKey(bytes.fromhex('63964771734fbd76e3b40519d1d94a48'))\n\n\n   @pytest.fixture\n   def app_net_key():\n      return NetworkKey(bytes.fromhex('7dd7364cd842ad18c17c2b820c84c3d6'))\n\n\n   @pytest.fixture\n   def app_dev_key():\n      return DeviceKey(bytes.fromhex('9d6dd0e96eb25dc19a40ed9914f8f03f'))\n\n\n   @pytest.fixture\n   def app_addr():\n      return 0x5f2\n\n\n   @pytest.fixture\n   def app_iv_index():\n      return 0\n\n\n   @pytest.fixture()\n   def application(app_uuid, app_elements, app_dev_key, app_app_key, app_net_ket,\n                   app_addr, app_iv_index, app_sequence):\n      ...\n\n\nThe solution\n============\n\nThis plugin provides a cleaner way to pass such options to selected fixutres,\nby implementing a magic fixture called ``paramark``, which returns a *different* value\nfor each of the fixtures that depend on it:\n\n.. code-block:: python\n\n   @pytest.fixture\n   def foo(paramark):\n      return paramark\n\n\n   @pytest.fixture\n   def bar(paramark):\n      return paramark\n\n\n   @pytest.mark.foo(option=42)\n   @pytest.mark.bar(option=24)\n   def test_options(foo, bar):\n      assert foo['option'] == 42\n      assert bar['option'] == 24\n\nAs can be seen in the example, ``paramark`` returns a dictionary with keys and\nvalues pulled from a custom mark with *the same name* as the dependant fixture.\nNote that these marks still need to be `registered`_.\n\nThis also works with ``parametrize``, by extending the argument name syntax to include a dot:\n\n.. code-block:: python\n\n   @pytest.mark.parametrize(\n      'foo.option, bar.option',\n      [\n         (43, 24),\n      ]\n   )\n   @pytest.mark.bar(option=24)\n   def test_options(foo, bar):\n      assert foo['option'] == 42\n      assert bar['option'] == 24\n\nor, if you want to parametrize the whole dictionary:\n\n.. code-block:: python\n\n   @pytest.mark.parametrize(\n      'foo.*, bar.option',\n      [\n         ({'option': 42, 'another: 17}, 24),\n      ]\n   )\n   @pytest.mark.bar(option=24)\n   def test_options(foo, bar):\n      assert foo['option'] == 42\n      assert foo['another'] == 17\n      assert bar['option'] == 24\n\nHaving this, defining default values no longer requires separate fixture for each option:\n\n.. code-block:: python\n\n   @pytest.fixture\n   def foo(paramark):\n      default = {'option': 'default_foo_option'}\n      return {**default, **paramark)\n\n\n   @pytest.fixture\n   def bar(paramark):\n      default = {'option': 'default_bar_option'}\n      return {**default, **paramark)\n\n\n   @pytest.mark.foo(option='custom_foo_option')\n   def test_options(foo, bar):\n      assert foo['option'] == 'custom_foo_option'\n      assert bar['option'] == 'default_bar_option'\n\nor, if you want to be safer and fancier:\n\n.. code-block:: python\n\n   import typing\n\n\n   @pytest.fixture\n   def foo(paramark):\n      class Foo(typing.NamedTuple):\n         option: str = 'default_foo_option'\n\n      return Foo(**paramark)\n\n\n   def test_options(foo):\n      assert foo.option == 'default_foo_option'\n\n\nInstallation\n------------\n\nYou can install \"pytest-paramark\" via `pip`_ from `PyPI`_::\n\n    $ pip install pytest-paramark\n\n\nContributing\n------------\nContributions are very welcome. Tests can be run with `tox`_, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\n\nLicense\n-------\n\nDistributed under the terms of the `MIT`_ license, \"pytest-paramark\" is free and open source software\n\n\nIssues\n------\n\nIf you encounter any problems, please `file an issue`_ along with a detailed description.\n\n.. _`MIT`: http://opensource.org/licenses/MIT\n.. _`file an issue`: https://github.com/mrzechonek/pytest-paramark/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.org/project/pip/\n.. _`PyPI`: https://pypi.org/project\n.. _`#3966`: https://github.com/pytest-dev/pytest/issues/3966\n.. _`registered`: http://doc.pytest.org/en/latest/example/markers.html#registering-markers\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mrzechonek/pytest-paramark", "keywords": "", "license": "MIT", "maintainer": "Micha\u0142 Lowas-Rzechonek", "maintainer_email": "michal@rzechonek.net", "name": "pytest-paramark", "package_url": "https://pypi.org/project/pytest-paramark/", "platform": "", "project_url": "https://pypi.org/project/pytest-paramark/", "project_urls": {"Homepage": "https://github.com/mrzechonek/pytest-paramark"}, "release_url": "https://pypi.org/project/pytest-paramark/0.1.1/", "requires_dist": ["pytest (>=4.5.0)"], "requires_python": ">=3.4", "summary": "Configure pytest fixtures using a combination of\"parametrize\" and markers", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/pytest-paramark\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02f59997f524fd3fae3ea9fc3994c6c3e51e32ca/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d706172616d61726b2e737667\"></a>\n<a href=\"https://pypi.org/project/pytest-paramark\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d78af6f7912c383178b10f5c3e6b90a1b3737c1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d706172616d61726b2e737667\"></a>\n<a href=\"https://travis-ci.org/mrzechonek/pytest-paramark\" rel=\"nofollow\"><img alt=\"See Build Status on Travis CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/232434eaf7acdd8f01b3b918eceef4c057a8e2ee/68747470733a2f2f7472617669732d63692e6f72672f6d727a6563686f6e656b2f7079746573742d706172616d61726b2e7376673f6272616e63683d6d6173746572\"></a>\n<p>Configure pytest fixtures using combination of parametrize and markers</p>\n<hr class=\"docutils\">\n<div id=\"what-is-this-thing\">\n<h2>What is this thing?</h2>\n<div id=\"the-problem\">\n<h3>The problem</h3>\n<p>Pytest fixture names must be unique within the whole dependency graph\n(<a href=\"https://github.com/pytest-dev/pytest/issues/3966\" rel=\"nofollow\">#3966</a>).</p>\n<p>This means that when you want to parametrize fixtures, each parameter name must\nbe unique:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">foo_option</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'option'</span><span class=\"p\">:</span> <span class=\"n\">foo_option</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">bar_option</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'option'</span><span class=\"p\">:</span> <span class=\"n\">bar_option</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span>\n   <span class=\"s1\">'foo_option, bar_option'</span><span class=\"p\">,</span>\n   <span class=\"p\">[</span>\n      <span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">),</span>\n   <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_options</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n   <span class=\"k\">assert</span> <span class=\"n\">bar</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">24</span>\n</pre>\n<p>Also, if you want to provide default vaules for options, they need to be fixtures as well:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo_option</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"s1\">'default_foo_option'</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar_option</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"s1\">'default_bar_option'</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">foo_option</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'option'</span><span class=\"p\">:</span> <span class=\"n\">foo_option</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">bar_option</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'option'</span><span class=\"p\">:</span> <span class=\"n\">bar_option</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_options</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'default_foo_option'</span>\n   <span class=\"k\">assert</span> <span class=\"n\">bar</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'default_bar_option'</span>\n</pre>\n<p>This is inconvenient when number of options and fixtures increases, and you end\nup with lots of boilerplate code like this:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_elements</span><span class=\"p\">():</span>\n   <span class=\"p\">{}</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_sequence</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_uuid</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"n\">uuid</span> <span class=\"ow\">or</span> <span class=\"n\">uuid4</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_app_key</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"n\">ApplicationKey</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'63964771734fbd76e3b40519d1d94a48'</span><span class=\"p\">))</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_net_key</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"n\">NetworkKey</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'7dd7364cd842ad18c17c2b820c84c3d6'</span><span class=\"p\">))</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_dev_key</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"n\">DeviceKey</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"s1\">'9d6dd0e96eb25dc19a40ed9914f8f03f'</span><span class=\"p\">))</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_addr</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"mh\">0x5f2</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">app_iv_index</span><span class=\"p\">():</span>\n   <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">app_uuid</span><span class=\"p\">,</span> <span class=\"n\">app_elements</span><span class=\"p\">,</span> <span class=\"n\">app_dev_key</span><span class=\"p\">,</span> <span class=\"n\">app_app_key</span><span class=\"p\">,</span> <span class=\"n\">app_net_ket</span><span class=\"p\">,</span>\n                <span class=\"n\">app_addr</span><span class=\"p\">,</span> <span class=\"n\">app_iv_index</span><span class=\"p\">,</span> <span class=\"n\">app_sequence</span><span class=\"p\">):</span>\n   <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"the-solution\">\n<h3>The solution</h3>\n<p>This plugin provides a cleaner way to pass such options to selected fixutres,\nby implementing a magic fixture called <tt>paramark</tt>, which returns a <em>different</em> value\nfor each of the fixtures that depend on it:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">paramark</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"n\">paramark</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">paramark</span><span class=\"p\">):</span>\n   <span class=\"k\">return</span> <span class=\"n\">paramark</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_options</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n   <span class=\"k\">assert</span> <span class=\"n\">bar</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">24</span>\n</pre>\n<p>As can be seen in the example, <tt>paramark</tt> returns a dictionary with keys and\nvalues pulled from a custom mark with <em>the same name</em> as the dependant fixture.\nNote that these marks still need to be <a href=\"http://doc.pytest.org/en/latest/example/markers.html#registering-markers\" rel=\"nofollow\">registered</a>.</p>\n<p>This also works with <tt>parametrize</tt>, by extending the argument name syntax to include a dot:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span>\n   <span class=\"s1\">'foo.option, bar.option'</span><span class=\"p\">,</span>\n   <span class=\"p\">[</span>\n      <span class=\"p\">(</span><span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">),</span>\n   <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_options</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n   <span class=\"k\">assert</span> <span class=\"n\">bar</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">24</span>\n</pre>\n<p>or, if you want to parametrize the whole dictionary:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span>\n   <span class=\"s1\">'foo.*, bar.option'</span><span class=\"p\">,</span>\n   <span class=\"p\">[</span>\n      <span class=\"p\">({</span><span class=\"s1\">'option'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"s1\">'another: 17}, 24),</span>\n   <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_options</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">42</span>\n   <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'another'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">17</span>\n   <span class=\"k\">assert</span> <span class=\"n\">bar</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">24</span>\n</pre>\n<p>Having this, defining default values no longer requires separate fixture for each option:</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">paramark</span><span class=\"p\">):</span>\n   <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'option'</span><span class=\"p\">:</span> <span class=\"s1\">'default_foo_option'</span><span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">paramark</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">paramark</span><span class=\"p\">):</span>\n   <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'option'</span><span class=\"p\">:</span> <span class=\"s1\">'default_bar_option'</span><span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">paramark</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"o\">=</span><span class=\"s1\">'custom_foo_option'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_options</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'custom_foo_option'</span>\n   <span class=\"k\">assert</span> <span class=\"n\">bar</span><span class=\"p\">[</span><span class=\"s1\">'option'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'default_bar_option'</span>\n</pre>\n<p>or, if you want to be safer and fancier:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">paramark</span><span class=\"p\">):</span>\n   <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">NamedTuple</span><span class=\"p\">):</span>\n      <span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'default_foo_option'</span>\n\n   <span class=\"k\">return</span> <span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">paramark</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_options</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">):</span>\n   <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">option</span> <span class=\"o\">==</span> <span class=\"s1\">'default_foo_option'</span>\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install \u201cpytest-paramark\u201d via <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a> from <a href=\"https://pypi.org/project\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install pytest-paramark\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are very welcome. Tests can be run with <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>, please ensure\nthe coverage at least stays the same before you submit a pull request.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Distributed under the terms of the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a> license, \u201cpytest-paramark\u201d is free and open source software</p>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>If you encounter any problems, please <a href=\"https://github.com/mrzechonek/pytest-paramark/issues\" rel=\"nofollow\">file an issue</a> along with a detailed description.</p>\n</div>\n\n          </div>"}, "last_serial": 6529132, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "05d7ee3cbc389aa11a11ce638bd3d4b6", "sha256": "a1ed8a0a59400498f76dd90d111aa2ffee28c4edcd5bbe69e0fafe1cde6abf18"}, "downloads": -1, "filename": "pytest-paramark-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "05d7ee3cbc389aa11a11ce638bd3d4b6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4266, "upload_time": "2020-01-06T22:41:51", "upload_time_iso_8601": "2020-01-06T22:41:51.350703Z", "url": "https://files.pythonhosted.org/packages/2a/36/9fcb856542bf7f539022e7e3365c99e4e3d1c588b670d727238af99ba38b/pytest-paramark-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "56a72ec0bf11a8ced6eb2d331dd3038d", "sha256": "ae18b757b7e1fce31140a57bad368c800d74fddacc4f96844f2131e22e0036a9"}, "downloads": -1, "filename": "pytest_paramark-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "56a72ec0bf11a8ced6eb2d331dd3038d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 4150, "upload_time": "2020-01-06T22:41:48", "upload_time_iso_8601": "2020-01-06T22:41:48.878569Z", "url": "https://files.pythonhosted.org/packages/98/63/2b4b8b95b37b4c27d65b0a4620638a8fe7efb98c10ee0d5b245a76422f72/pytest_paramark-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9fb2e908ea11f7aba9e3bdeaed372471", "sha256": "c36daf9de6b79147258115a491256674cab4b5a342912fa2e77f585df45a3f82"}, "downloads": -1, "filename": "pytest-paramark-0.1.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "9fb2e908ea11f7aba9e3bdeaed372471", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5625, "upload_time": "2020-01-10T21:18:14", "upload_time_iso_8601": "2020-01-10T21:18:14.388715Z", "url": "https://files.pythonhosted.org/packages/be/c8/4b960c136b385b39ed3e87d87c8fba2dedfd428b900d64063780f465a65e/pytest-paramark-0.1.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "870eaa619334a64400bb256b401e6478", "sha256": "42f5002bd13fb0652e916a11dc292557eaa5c328eb3ece095d05406fe8257fdc"}, "downloads": -1, "filename": "pytest_paramark-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "870eaa619334a64400bb256b401e6478", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 5412, "upload_time": "2020-01-10T21:18:12", "upload_time_iso_8601": "2020-01-10T21:18:12.067070Z", "url": "https://files.pythonhosted.org/packages/0a/0e/c7b04e63cdfc845691592cb54301eab824b60f52c15a859917e0ef115cb3/pytest_paramark-0.1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9fb2e908ea11f7aba9e3bdeaed372471", "sha256": "c36daf9de6b79147258115a491256674cab4b5a342912fa2e77f585df45a3f82"}, "downloads": -1, "filename": "pytest-paramark-0.1.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "9fb2e908ea11f7aba9e3bdeaed372471", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5625, "upload_time": "2020-01-10T21:18:14", "upload_time_iso_8601": "2020-01-10T21:18:14.388715Z", "url": "https://files.pythonhosted.org/packages/be/c8/4b960c136b385b39ed3e87d87c8fba2dedfd428b900d64063780f465a65e/pytest-paramark-0.1.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "870eaa619334a64400bb256b401e6478", "sha256": "42f5002bd13fb0652e916a11dc292557eaa5c328eb3ece095d05406fe8257fdc"}, "downloads": -1, "filename": "pytest_paramark-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "870eaa619334a64400bb256b401e6478", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 5412, "upload_time": "2020-01-10T21:18:12", "upload_time_iso_8601": "2020-01-10T21:18:12.067070Z", "url": "https://files.pythonhosted.org/packages/0a/0e/c7b04e63cdfc845691592cb54301eab824b60f52c15a859917e0ef115cb3/pytest_paramark-0.1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:54 2020"}