{"info": {"author": "SoftFIRE", "author_email": "softfire@softfire.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License"], "description": "<img src=\"https://www.softfire.eu/wp-content/uploads/SoftFIRE_Logo_Fireball-300x300.png\" width=\"120\"/>\n\n  Copyright \u00a9 2016-2018 [SoftFIRE](https://www.softfire.eu/).\n  Licensed under [Apache v2 License](http://www.apache.org/licenses/LICENSE-2.0).\n\n# Security Manager\nThe Security Manager inside the SoftFIRE Middleware makes available to the Experimenters a\nset of security related functionalities that they might decide to include and use within their\nactivities on the SoftFIRE platform.\n\nHere is the list of the available features for every type of Resource.\n\n1. The Experimenters can deploy a Security Resource\n2. The Experimenters can statically configure the Security Resource by means of its descriptor\n1. The Experimenter can statically configure some features on her Resource\n3. The Experimenters can dynamically configure the Resource once it has been deployed\n\nFeatures **not** available for Resource _pfsense_\n\n1. The Experimenters can enable logs collection from their Resource\n4. The Experimenters can see Resources logs in a web dashboard\n5. The Experimenters can perform searches among the Resources logs in a web dashboard\n6. The Experimenters can see statistics related to the Resources logs in a web dashboard  \n\n### Security Resources\nA Security Resource is a commonly used security agent that the Experimenters can include in their\nexperiment. They can access and configure it through a static initial configuration, included in the\nTOSCA description of the Experiment, or, once deployed, through the interfaces that expose its\nmain services. These interfaces can include SSH, a dashboard, or ReST APIs.\nDepending on the type of Resource, Experimenters can also ask the Security Resource to send its log messages to a remote log\ncollector, which makes them available in a simple web page reserved to them. The Experimenters\ncould easily access it through its web browser and check the behaviour of all their security agents,\nand to see some related statistics.\n\nThe Experimenters can get the Security Resource in two different formats:\n\n* As an agent directly installed in the VM that they want to monitor. The system will\nprovide them a script that the Experimenters have just to run inside the VM. It will be already\nconfigured as required in the TOSCA description of the resource. The output of the script\nwill provide to the Experimenters information on how to access the deployed resource\n(URLs, etc.)\n\n* As a standalone VM. The Security Resource will be deployed directly by the Security\nManager in the testbed chosen by the Experimenter. The Security Manager will take\ncare of the initial configuration of the resource.\nThe Experimenters have to set up on their own the redirection of the network traffic that they want\nto control through the Security Resource VM (by means of OS configuration, or SDN capabilities provided by the SoftFIRE platform).  \n\nThe Security Manager provides three types of resources:\n\n* [firewall][firewall]\n* [suricata][suricata]\n* [pfsense][pfsense]\n\n\n### Security Resource definition\nIn this section the attributes that can be defined for a TOSCA node of type _SecurityResource_ are listed. Please note that\nthe meaning of the specific property depends on the type of resource (specified in the *resource_id* field). \nFor more details, refer to the specific sections of the documentation. \n\n```yaml\nSecurityResource:\n    derived_from: eu.softfire.BaseResource\n    description: \"Defines a Security agent to be deployed. More details on [docu_url]\"\n    properties:\n\n        resource_id:\n            type: string\n            required: true\n\n        testbed:\n            type: string\n            required: false\n\n        lan_name:\n            type: string\n            required: false\n\n        wan_name: \n            type: string\n            required: false\n            description: valid for pfsense\n\n        ssh_key:\n            type: string\n            required: false\n            description: valid for firewall and suricata\n\n        want_agent:\n            type: boolean\n            required: false\n            description: valid for firewall and suricata\n\n        logging:\n            type: boolean\n            required: false\n            description: valid for firewall and suricata\n\n        allowed_ips:\n            type: list\n            entry_schema:\n                type: string\n            required: false\n            description: valid for firewall\n\n        denied_ips:\n            type: list\n            entry_schema:\n                type: string\n            required: false\n            description: valid for firewall\n\n        default_rule:\n            type: string\n            required: false\n            description: valid for firewall\n\n        rules: \n            type: list\n            entry_schema:\n                type: string \n            required: false\n            description: valid for suricata\n```\n\nEvery node has different properties. Here they are listed for each type of resource:\n\n**resource_id = [firewall][firewall]**\n\n* **testbed**: Defines where to deploy the Security Resource selected. It is ignored if want_agent is True\n* **want_agent**: Defines if the Experimenter wants the security resource to be an agent directly installed on the VM that he wants to monitor\n* **ssh_key**: Defines the SSH public key to be pushed on the VM in order to be able to log into it\n* **lan_name**: Select the network on which the VM is deployed (if __want_agent__ is False). If no value is entered, __softfire-internal__ is chosen\n* **logging**: Defines if the Experimenter wants the security resource to send its log messages to a collector and he wants to see them on a dashboard\n* **allowed_ips**: List of IPs (or CIDR  masks) allowed by the firewall. [allow from *IP*]\n* **denied_ips**: List of IPs (or CIDR masks) denied by the firewall [deny from *IP*]\n* **default_rule**: Default rule applied by the firewall (allow/deny)\n\n**resource_id = [suricata][suricata]**\n\n* **testbed**: Defines where to deploy the Security Resource selected. It is ignored if want_agent is True\n* **want_agent**: Defines if the Experimenter wants the security resource to be an agent directly installed on the VM that he wants to monitor\n* **ssh_key**: Defines the SSH public key to be pushed on the VM in order to be able to log into it\n* **lan_name**: Select the network on which the VM is deployed (if __want_agent__ is False). If no value is entered, __softfire-internal__ is chosen\n* **logging**: Defines if the Experimenter wants the security resource to send its log messages to a collector and he wants to see them on a dashboard\n* **rules**: Defines the list of rules to be configured in Suricata VM. These rules follow the syntax \n\n**resource_id = [pfsense][pfsense]**\n\n* **testbed**: Defines where to deploy the Security Resource selected\n* **wan_name**: Selects the network on which the first interface of the VM is attached. It is configured as WAN on pfSense. It must be a network connected to the SoftFIRE-public network \n* **lan_name**: Selects the network on which the second interface of the VM is attached. It is configured as LAN on pfSense\n\n\n##### Testbed Names\n\n| Alias    | Testbed                          |\n|----------|----------------------------------|\n| fokus    | FOKUS testbed, Berlin            |\n| ericsson | ERICSSON testbed, Rome           |\n| surrey   | SURREY testbed, Surrey           |\n| ads      | ADS testbed, Rome                |\n\n## Technical details\nThis sequence diagram specifies the operations performed by the Security Manager based on the inputs received by the Experimenter.\n![Security Manager sequence diagram][sequence]\n\n## Technical Requirements\n\nThe Security Manager requires Python 3.5 or higher.\n\n## Installation and configuration\nYou can install the Security Manager using pip:\n\n```bash\n$ pip install security-manager\n```\nand then start it with the security-manager command.\n\nOr you can run it from source code by cloning the git repository, installing the dependencies as specified in the setup.py file and executing the security-manager script.\n\nThe Security Manager needs a configuration file present at /etc/softfire/security-manager.ini. An example of the configuration file can be found [here](https://github.com/softfire-eu/security-manager/blob/master/etc/template/security-manager.ini).\n\nIn order to deploy security resources you have to create a pfsense image and to configure a ELK server for logging functionalities\n\n## pfSense installation guide\n\nPfSense is an open source firewall/router computer software distribution based on FreeBSD.\nIn order to successfully deploy a pfsense resource, the Security Manager has to find a pfsense image stored inside the Openstack\nwe want to use.\n\nIn the following tutorial will be explained how to create and configure such kind of image.\nVirtualBox is choosed as hypervisor to create the pfSense virtual disk, but users can choose alternative products (i.e. qemu, vmware, ...).\n\nSo, let's start!\n\n### Download pfSense\n\ndownload the latest pfSense stable version from [the official website](https://www.pfsense.org/download/).\nLatest version of the Security Manager is using  pfSense 2.4.2-release (amd64) but should also works with recent pfsense build.\n\nOnce downloaded, unzip the archive.\n\n\n### Install OS via VirtualBox\n\nFirst of all, make sure to create an host-only virtual network interface in order to get access to the guest virtual machine from the host machine.\n\nOpen VirtualBox and create a new virtual machine:\n    1. Choose 'BSD' as type and 'FreeBSD (64-bit)' as version;\n    2. give virtual machine 512 MB of RAM (in case more RAM it is chosed more RAM remember to choose a different Openstack image flavor according to this value);\n    3. create a fixed size virtual hard disk using 'VirtualBox Disk Image' type. Minimum suggested size is 1 GB. if you create a bigger disk remember to use a bigger Openstack flavour;\n\nBefore boot the newly create virtual machine, go onto settings and configure network and storage interfaces:\n    1. Select 'Storage' from left panel and add optical driver clicking on 'adds new storage attachment'. When asked provide the location of the pfSense image;\n    2. Select 'Network' from left panel and add following intefaces:\n        - '''adapter 1''': the type of 'attached to' doesn't matter. it is only important to have the pfSense WAN interfaces mapped onto this one.\n        - '''adapter 2''': this is the interface on which the pfSense LAN interface will be mapped. select 'host only adapter' because will be necessary to access the machine web dashboard\n        in order to further configure it.\n\nNow boot the virtual machine and follow the 'Quick/easy Install' instruction. Remember to detach the optical drive when installation will be completed.\n\n### pfSense configuration\n\nOnce booted the following message will be promted to the user:\n\n```bash\n*** Welcome to pfSense 2.4.2-RELEASE (amd64) on pfSense ***\n\n WAN (wan)       -> em0        -> v4/DHCP4: 10.0.0.2/24\n LAN (lan)       -> em1        -> static\n\n 0) Logout (SSH only)                  9) pfTop\n 1) Assign Interfaces                 10) Filter Logs\n 2) Set interface(s) IP address       11) Restart webConfigurator\n 3) Reset webConfigurator password    12) PHP shell + pfSense tools\n 4) Reset to factory defaults         13) Update from console\n 5) Reboot system                     14) Disable Secure Shell (sshd)\n 6) Halt system                       15) Restore recent configuration\n 7) Ping host                         16) Restart PHP-FPM\n 8) Shell\n\nEnter an option:\n```\n\nIt is necessary to configure network interfaces so select option '2) Set Interface(s) IP address and LAN interface':\n    1. '''WAN''': this interface will receive an ip address from the virtual gateway provided by Openstack, so configure it to use DHCP4;\n    2. '''LAN''': it is necessary to get access to pfSense web dashbord so we assign a static ip based on the subnet asigned from the host machine (in our case 192.168.56.0/24).\n```bash\nEnter the new LAN IPV4 address. Press <ENTER> for None:\n> 192.168.56.2\n\n...\n\nEnter the new Lan IPv4 subnet bit count (1 to 31):\n> 24\n\nFor a WAN, enter the new LAN IPv4 upstream gateway address.\nFor a LAN, press <ENTER> for none:\n> 192.168.56.1\n...\n```\n\nEnter the web dashboard at 192.168.56.2 using 'admin' as username and 'pfsense' as passsword.\nSelect 'LAN' from the 'interfaces' dropdown menu and set IPv4 configuration type to 'DHCP'. Save and close.\nWhen you will boot your pfsense image on Openstack, it will assign you an ip on the LAN interface so you can get ssh access and customize it based on your experiment requirement.\n\nFinally you have to enable ssh by selecting '14) Enable Secure Shell (sshd)' and open port 22 on pfSense. The latter is done by executing the command inside a pfSense shell:\n```bash\n$ easyrule pass LAN TCP any any 22\n```\n\n### Prepare the pfSense image\n\nBefore shutdown the virtual machine you have to compact VirtualBox's VDI file size issuing the following command on the guest machine:\n```bash\n$ dd if=/dev/zero of=/empty; rm /empty\n```\n\nOn the host machine:\n```bash\n$ vboxmanage modifymedium --compact /path/to/pfsense.vdi\n```\n\nFinally convert the VDI disk to qcow2 format:\n```bash\n$ qemu-img convert pfsense.vdi -O qcow2 pfsense.qcow2\n```\n\nNow you can upload the pfsense image on your Openstack using the label and the flavor name provided inside the 'security-manage.ini'.\n\n## Install and configure ELK stack\n\nELK stack provide logging functionalities to suricata and firewall resources. An user can visualize these logs through a web dashboard.\nIt is required to install Elastichsearch, Logstash and Kibana on a separate server or directly inside the same server in which the security manager is running.\n\nFirst of all, you have to proerly set port values through which ELK will listen. Inside the directory 'logging ELK/' there are three files:\n    1. default-conf.conf: it containts logstash configuration parameters;\n    2. elasticsearch.yml: it containts elastichsearch configuration parameters;\n    3. kibana.yml: it containts kibana configuration parameters.\n\nSubsequently you have to also use these ports and the ELK server ip address inside the security-manage.ini file otherwise the Security Manager will be unable to contact the logging server.\n\nTo start the installation and execute all the component, simply launch the 'logging ELK/setuo.sh' script.\n\nFinally you have to load through the kibana dashbaord (see configuration file to know the port to use) the templates located inside 'logging ELK/kibana_template' directory:\n    - dashboard.json contains all views that compose the html page;\n    - others files containt views definition.\nOnce you have created the dashboard, you have to specifiy the template id assigned by kibana inside the 'security-manager.ini' file.\n\n## Issue tracker\n\nIssues and bug reports should be posted to the GitHub Issue Tracker of this project.\n\n# What is SoftFIRE?\n\nSoftFIRE provides a set of technologies for building a federated experimental platform aimed at the construction and experimentation of services and functionalities built on top of NFV and SDN technologies.\nThe platform is a loose federation of already existing testbed owned and operated by distinct organizations for purposes of research and development.\n\nSoftFIRE has three main objectives: supporting interoperability, programming and security of the federated testbed.\nSupporting the programmability of the platform is then a major goal and it is the focus of the SoftFIRE\u2019s Second Open Call.\n\n## Licensing and distribution\nCopyright \u00a9 [2016-2018] SoftFIRE project\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n<!--\n References\n-->\n\n[node_types]:etc/softfire_node_types.yaml\n[firewall]:firewall.md\n[suricata]:suricata.md\n[pfsense]:pfsense.md\n[docu_url]:http://docs.softfire.eu/security-manager/\n[sequence]:security-manager.png\n\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/softfire-eu/security-manager", "keywords": "python vnfm nfvo open baton openbaton sdk experiment manager softfire tosca openstack rest security firewall ips", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "security-manager", "package_url": "https://pypi.org/project/security-manager/", "platform": "", "project_url": "https://pypi.org/project/security-manager/", "project_urls": {"Homepage": "https://github.com/softfire-eu/security-manager"}, "release_url": "https://pypi.org/project/security-manager/0.2.7/", "requires_dist": ["bcrypt", "bottle", "IPy", "keystoneauth", "python-neutronclient", "python-novaclient", "python-glanceclient", "openbaton-cli (==5.0.1)", "python-neutronclient", "PyYAML", "requests", "softfire-sdk (==1.1.4)", "beaker", "paramiko", "scp", "idstools", "pexpect"], "requires_python": "", "summary": "The SoftFIRE Security Manager", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            &lt;img src=\"https://www.softfire.eu/wp-content/uploads/SoftFIRE_Logo_Fireball-300x300.png\" width=\"120\"/&gt;<br><br>  Copyright \u00a9 2016-2018 [SoftFIRE](https://www.softfire.eu/).<br>  Licensed under [Apache v2 License](http://www.apache.org/licenses/LICENSE-2.0).<br><br># Security Manager<br>The Security Manager inside the SoftFIRE Middleware makes available to the Experimenters a<br>set of security related functionalities that they might decide to include and use within their<br>activities on the SoftFIRE platform.<br><br>Here is the list of the available features for every type of Resource.<br><br>1. The Experimenters can deploy a Security Resource<br>2. The Experimenters can statically configure the Security Resource by means of its descriptor<br>1. The Experimenter can statically configure some features on her Resource<br>3. The Experimenters can dynamically configure the Resource once it has been deployed<br><br>Features **not** available for Resource _pfsense_<br><br>1. The Experimenters can enable logs collection from their Resource<br>4. The Experimenters can see Resources logs in a web dashboard<br>5. The Experimenters can perform searches among the Resources logs in a web dashboard<br>6. The Experimenters can see statistics related to the Resources logs in a web dashboard  <br><br>### Security Resources<br>A Security Resource is a commonly used security agent that the Experimenters can include in their<br>experiment. They can access and configure it through a static initial configuration, included in the<br>TOSCA description of the Experiment, or, once deployed, through the interfaces that expose its<br>main services. These interfaces can include SSH, a dashboard, or ReST APIs.<br>Depending on the type of Resource, Experimenters can also ask the Security Resource to send its log messages to a remote log<br>collector, which makes them available in a simple web page reserved to them. The Experimenters<br>could easily access it through its web browser and check the behaviour of all their security agents,<br>and to see some related statistics.<br><br>The Experimenters can get the Security Resource in two different formats:<br><br>* As an agent directly installed in the VM that they want to monitor. The system will<br>provide them a script that the Experimenters have just to run inside the VM. It will be already<br>configured as required in the TOSCA description of the resource. The output of the script<br>will provide to the Experimenters information on how to access the deployed resource<br>(URLs, etc.)<br><br>* As a standalone VM. The Security Resource will be deployed directly by the Security<br>Manager in the testbed chosen by the Experimenter. The Security Manager will take<br>care of the initial configuration of the resource.<br>The Experimenters have to set up on their own the redirection of the network traffic that they want<br>to control through the Security Resource VM (by means of OS configuration, or SDN capabilities provided by the SoftFIRE platform).  <br><br>The Security Manager provides three types of resources:<br><br>* [firewall][firewall]<br>* [suricata][suricata]<br>* [pfsense][pfsense]<br><br><br>### Security Resource definition<br>In this section the attributes that can be defined for a TOSCA node of type _SecurityResource_ are listed. Please note that<br>the meaning of the specific property depends on the type of resource (specified in the *resource_id* field). <br>For more details, refer to the specific sections of the documentation. <br><br>```yaml<br>SecurityResource:<br>    derived_from: eu.softfire.BaseResource<br>    description: \"Defines a Security agent to be deployed. More details on [docu_url]\"<br>    properties:<br><br>        resource_id:<br>            type: string<br>            required: true<br><br>        testbed:<br>            type: string<br>            required: false<br><br>        lan_name:<br>            type: string<br>            required: false<br><br>        wan_name: <br>            type: string<br>            required: false<br>            description: valid for pfsense<br><br>        ssh_key:<br>            type: string<br>            required: false<br>            description: valid for firewall and suricata<br><br>        want_agent:<br>            type: boolean<br>            required: false<br>            description: valid for firewall and suricata<br><br>        logging:<br>            type: boolean<br>            required: false<br>            description: valid for firewall and suricata<br><br>        allowed_ips:<br>            type: list<br>            entry_schema:<br>                type: string<br>            required: false<br>            description: valid for firewall<br><br>        denied_ips:<br>            type: list<br>            entry_schema:<br>                type: string<br>            required: false<br>            description: valid for firewall<br><br>        default_rule:<br>            type: string<br>            required: false<br>            description: valid for firewall<br><br>        rules: <br>            type: list<br>            entry_schema:<br>                type: string <br>            required: false<br>            description: valid for suricata<br>```<br><br>Every node has different properties. Here they are listed for each type of resource:<br><br>**resource_id = [firewall][firewall]**<br><br>* **testbed**: Defines where to deploy the Security Resource selected. It is ignored if want_agent is True<br>* **want_agent**: Defines if the Experimenter wants the security resource to be an agent directly installed on the VM that he wants to monitor<br>* **ssh_key**: Defines the SSH public key to be pushed on the VM in order to be able to log into it<br>* **lan_name**: Select the network on which the VM is deployed (if __want_agent__ is False). If no value is entered, __softfire-internal__ is chosen<br>* **logging**: Defines if the Experimenter wants the security resource to send its log messages to a collector and he wants to see them on a dashboard<br>* **allowed_ips**: List of IPs (or CIDR  masks) allowed by the firewall. [allow from *IP*]<br>* **denied_ips**: List of IPs (or CIDR masks) denied by the firewall [deny from *IP*]<br>* **default_rule**: Default rule applied by the firewall (allow/deny)<br><br>**resource_id = [suricata][suricata]**<br><br>* **testbed**: Defines where to deploy the Security Resource selected. It is ignored if want_agent is True<br>* **want_agent**: Defines if the Experimenter wants the security resource to be an agent directly installed on the VM that he wants to monitor<br>* **ssh_key**: Defines the SSH public key to be pushed on the VM in order to be able to log into it<br>* **lan_name**: Select the network on which the VM is deployed (if __want_agent__ is False). If no value is entered, __softfire-internal__ is chosen<br>* **logging**: Defines if the Experimenter wants the security resource to send its log messages to a collector and he wants to see them on a dashboard<br>* **rules**: Defines the list of rules to be configured in Suricata VM. These rules follow the syntax <br><br>**resource_id = [pfsense][pfsense]**<br><br>* **testbed**: Defines where to deploy the Security Resource selected<br>* **wan_name**: Selects the network on which the first interface of the VM is attached. It is configured as WAN on pfSense. It must be a network connected to the SoftFIRE-public network <br>* **lan_name**: Selects the network on which the second interface of the VM is attached. It is configured as LAN on pfSense<br><br><br>##### Testbed Names<br><br>| Alias    | Testbed                          |<br>|----------|----------------------------------|<br>| fokus    | FOKUS testbed, Berlin            |<br>| ericsson | ERICSSON testbed, Rome           |<br>| surrey   | SURREY testbed, Surrey           |<br>| ads      | ADS testbed, Rome                |<br><br>## Technical details<br>This sequence diagram specifies the operations performed by the Security Manager based on the inputs received by the Experimenter.<br>![Security Manager sequence diagram][sequence]<br><br>## Technical Requirements<br><br>The Security Manager requires Python 3.5 or higher.<br><br>## Installation and configuration<br>You can install the Security Manager using pip:<br><br>```bash<br>$ pip install security-manager<br>```<br>and then start it with the security-manager command.<br><br>Or you can run it from source code by cloning the git repository, installing the dependencies as specified in the setup.py file and executing the security-manager script.<br><br>The Security Manager needs a configuration file present at /etc/softfire/security-manager.ini. An example of the configuration file can be found [here](https://github.com/softfire-eu/security-manager/blob/master/etc/template/security-manager.ini).<br><br>In order to deploy security resources you have to create a pfsense image and to configure a ELK server for logging functionalities<br><br>## pfSense installation guide<br><br>PfSense is an open source firewall/router computer software distribution based on FreeBSD.<br>In order to successfully deploy a pfsense resource, the Security Manager has to find a pfsense image stored inside the Openstack<br>we want to use.<br><br>In the following tutorial will be explained how to create and configure such kind of image.<br>VirtualBox is choosed as hypervisor to create the pfSense virtual disk, but users can choose alternative products (i.e. qemu, vmware, ...).<br><br>So, let's start!<br><br>### Download pfSense<br><br>download the latest pfSense stable version from [the official website](https://www.pfsense.org/download/).<br>Latest version of the Security Manager is using  pfSense 2.4.2-release (amd64) but should also works with recent pfsense build.<br><br>Once downloaded, unzip the archive.<br><br><br>### Install OS via VirtualBox<br><br>First of all, make sure to create an host-only virtual network interface in order to get access to the guest virtual machine from the host machine.<br><br>Open VirtualBox and create a new virtual machine:<br>    1. Choose 'BSD' as type and 'FreeBSD (64-bit)' as version;<br>    2. give virtual machine 512 MB of RAM (in case more RAM it is chosed more RAM remember to choose a different Openstack image flavor according to this value);<br>    3. create a fixed size virtual hard disk using 'VirtualBox Disk Image' type. Minimum suggested size is 1 GB. if you create a bigger disk remember to use a bigger Openstack flavour;<br><br>Before boot the newly create virtual machine, go onto settings and configure network and storage interfaces:<br>    1. Select 'Storage' from left panel and add optical driver clicking on 'adds new storage attachment'. When asked provide the location of the pfSense image;<br>    2. Select 'Network' from left panel and add following intefaces:<br>        - '''adapter 1''': the type of 'attached to' doesn't matter. it is only important to have the pfSense WAN interfaces mapped onto this one.<br>        - '''adapter 2''': this is the interface on which the pfSense LAN interface will be mapped. select 'host only adapter' because will be necessary to access the machine web dashboard<br>        in order to further configure it.<br><br>Now boot the virtual machine and follow the 'Quick/easy Install' instruction. Remember to detach the optical drive when installation will be completed.<br><br>### pfSense configuration<br><br>Once booted the following message will be promted to the user:<br><br>```bash<br>*** Welcome to pfSense 2.4.2-RELEASE (amd64) on pfSense ***<br><br> WAN (wan)       -&gt; em0        -&gt; v4/DHCP4: 10.0.0.2/24<br> LAN (lan)       -&gt; em1        -&gt; static<br><br> 0) Logout (SSH only)                  9) pfTop<br> 1) Assign Interfaces                 10) Filter Logs<br> 2) Set interface(s) IP address       11) Restart webConfigurator<br> 3) Reset webConfigurator password    12) PHP shell + pfSense tools<br> 4) Reset to factory defaults         13) Update from console<br> 5) Reboot system                     14) Disable Secure Shell (sshd)<br> 6) Halt system                       15) Restore recent configuration<br> 7) Ping host                         16) Restart PHP-FPM<br> 8) Shell<br><br>Enter an option:<br>```<br><br>It is necessary to configure network interfaces so select option '2) Set Interface(s) IP address and LAN interface':<br>    1. '''WAN''': this interface will receive an ip address from the virtual gateway provided by Openstack, so configure it to use DHCP4;<br>    2. '''LAN''': it is necessary to get access to pfSense web dashbord so we assign a static ip based on the subnet asigned from the host machine (in our case 192.168.56.0/24).<br>```bash<br>Enter the new LAN IPV4 address. Press &lt;ENTER&gt; for None:<br>&gt; 192.168.56.2<br><br>...<br><br>Enter the new Lan IPv4 subnet bit count (1 to 31):<br>&gt; 24<br><br>For a WAN, enter the new LAN IPv4 upstream gateway address.<br>For a LAN, press &lt;ENTER&gt; for none:<br>&gt; 192.168.56.1<br>...<br>```<br><br>Enter the web dashboard at 192.168.56.2 using 'admin' as username and 'pfsense' as passsword.<br>Select 'LAN' from the 'interfaces' dropdown menu and set IPv4 configuration type to 'DHCP'. Save and close.<br>When you will boot your pfsense image on Openstack, it will assign you an ip on the LAN interface so you can get ssh access and customize it based on your experiment requirement.<br><br>Finally you have to enable ssh by selecting '14) Enable Secure Shell (sshd)' and open port 22 on pfSense. The latter is done by executing the command inside a pfSense shell:<br>```bash<br>$ easyrule pass LAN TCP any any 22<br>```<br><br>### Prepare the pfSense image<br><br>Before shutdown the virtual machine you have to compact VirtualBox's VDI file size issuing the following command on the guest machine:<br>```bash<br>$ dd if=/dev/zero of=/empty; rm /empty<br>```<br><br>On the host machine:<br>```bash<br>$ vboxmanage modifymedium --compact /path/to/pfsense.vdi<br>```<br><br>Finally convert the VDI disk to qcow2 format:<br>```bash<br>$ qemu-img convert pfsense.vdi -O qcow2 pfsense.qcow2<br>```<br><br>Now you can upload the pfsense image on your Openstack using the label and the flavor name provided inside the 'security-manage.ini'.<br><br>## Install and configure ELK stack<br><br>ELK stack provide logging functionalities to suricata and firewall resources. An user can visualize these logs through a web dashboard.<br>It is required to install Elastichsearch, Logstash and Kibana on a separate server or directly inside the same server in which the security manager is running.<br><br>First of all, you have to proerly set port values through which ELK will listen. Inside the directory 'logging ELK/' there are three files:<br>    1. default-conf.conf: it containts logstash configuration parameters;<br>    2. elasticsearch.yml: it containts elastichsearch configuration parameters;<br>    3. kibana.yml: it containts kibana configuration parameters.<br><br>Subsequently you have to also use these ports and the ELK server ip address inside the security-manage.ini file otherwise the Security Manager will be unable to contact the logging server.<br><br>To start the installation and execute all the component, simply launch the 'logging ELK/setuo.sh' script.<br><br>Finally you have to load through the kibana dashbaord (see configuration file to know the port to use) the templates located inside 'logging ELK/kibana_template' directory:<br>    - dashboard.json contains all views that compose the html page;<br>    - others files containt views definition.<br>Once you have created the dashboard, you have to specifiy the template id assigned by kibana inside the 'security-manager.ini' file.<br><br>## Issue tracker<br><br>Issues and bug reports should be posted to the GitHub Issue Tracker of this project.<br><br># What is SoftFIRE?<br><br>SoftFIRE provides a set of technologies for building a federated experimental platform aimed at the construction and experimentation of services and functionalities built on top of NFV and SDN technologies.<br>The platform is a loose federation of already existing testbed owned and operated by distinct organizations for purposes of research and development.<br><br>SoftFIRE has three main objectives: supporting interoperability, programming and security of the federated testbed.<br>Supporting the programmability of the platform is then a major goal and it is the focus of the SoftFIRE\u2019s Second Open Call.<br><br>## Licensing and distribution<br>Copyright \u00a9 [2016-2018] SoftFIRE project<br><br>Licensed under the Apache License, Version 2.0 (the \"License\");<br><br>you may not use this file except in compliance with the License.<br>You may obtain a copy of the License at<br><br>  http://www.apache.org/licenses/LICENSE-2.0<br><br>Unless required by applicable law or agreed to in writing, software<br>distributed under the License is distributed on an \"AS IS\" BASIS,<br>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>See the License for the specific language governing permissions and<br>limitations under the License.<br><br><br><br>&lt;!--<br> References<br>--&gt;<br><br>[node_types]:etc/softfire_node_types.yaml<br>[firewall]:firewall.md<br>[suricata]:suricata.md<br>[pfsense]:pfsense.md<br>[docu_url]:http://docs.softfire.eu/security-manager/<br>[sequence]:security-manager.png<br><br><br><br><br><br>\n          </div>"}, "last_serial": 3752602, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "60321795dd84363da27ac554696b1696", "sha256": "c161a0c7f61827686f9ffe7aaf4d2b388c848f2f08efea54dc2b65502b0f8449"}, "downloads": -1, "filename": "security-manager-0.1.tar.gz", "has_sig": false, "md5_digest": "60321795dd84363da27ac554696b1696", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10398, "upload_time": "2017-06-28T07:39:12", "upload_time_iso_8601": "2017-06-28T07:39:12.444633Z", "url": "https://files.pythonhosted.org/packages/28/bf/9223a283b470c7a87eb8fdb70fc0a42e8db43a3101aadcf39d85281735fd/security-manager-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f6f78fe22506be43e193be174507ab90", "sha256": "2f9134872c7ec3b073aac5676fbded51e1c4350ca6b6401600fbcdb420db65ec"}, "downloads": -1, "filename": "security-manager-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f6f78fe22506be43e193be174507ab90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10433, "upload_time": "2017-06-28T09:32:44", "upload_time_iso_8601": "2017-06-28T09:32:44.206595Z", "url": "https://files.pythonhosted.org/packages/65/08/5d6f7e67f431ebc0e74c1452b37c0975656abde4dab2081042cadf5f137f/security-manager-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d5b6c77ea30953d9d9a8635a451261e0", "sha256": "ff41abe860fcbe0639ea2390ad48922c115b728b843c2aa41ccbb443d9dda0fe"}, "downloads": -1, "filename": "security-manager-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d5b6c77ea30953d9d9a8635a451261e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10436, "upload_time": "2017-06-28T13:54:47", "upload_time_iso_8601": "2017-06-28T13:54:47.414985Z", "url": "https://files.pythonhosted.org/packages/9e/ae/1ea2a810b5cb4fcc00a1713ac306c5c1758d2c0a2fdd8660171c7ea8b5a8/security-manager-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "fb56d25f8eff4433b69c038bc1eb189e", "sha256": "99f1e1659adc38d90de465a999a340a6552920d65e8749af93a13041c82516eb"}, "downloads": -1, "filename": "security-manager-0.1.3.tar.gz", "has_sig": false, "md5_digest": "fb56d25f8eff4433b69c038bc1eb189e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10532, "upload_time": "2017-06-28T16:21:48", "upload_time_iso_8601": "2017-06-28T16:21:48.103866Z", "url": "https://files.pythonhosted.org/packages/17/d4/4a4d212645b5560a242a1fc0077ebef9ce47156d5a04bfc34dad24459e64/security-manager-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "83ce2b669e1cfe606d3023f1150bbd5e", "sha256": "77c8325dcf2690a37acdf78e8317df063194f2c8c3d021fab99f17d095d0f596"}, "downloads": -1, "filename": "security-manager-0.1.4.tar.gz", "has_sig": false, "md5_digest": "83ce2b669e1cfe606d3023f1150bbd5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10584, "upload_time": "2017-06-29T07:11:11", "upload_time_iso_8601": "2017-06-29T07:11:11.340710Z", "url": "https://files.pythonhosted.org/packages/ad/04/63a07bfe1cb211425ca1fade9c92ab0d0fdd05375f1d32551f502ea07ef3/security-manager-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "1fa46da3e26db6244d451137c67c39b9", "sha256": "6f44591f8327ad47a2a06e9a873a87789714057ee41f4cc2e52933592f7bfb3e"}, "downloads": -1, "filename": "security-manager-0.1.5.tar.gz", "has_sig": false, "md5_digest": "1fa46da3e26db6244d451137c67c39b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10695, "upload_time": "2017-07-03T10:16:27", "upload_time_iso_8601": "2017-07-03T10:16:27.055606Z", "url": "https://files.pythonhosted.org/packages/3e/e9/7ba1e8b02401780361c94243f1ef50992e1ac97f6cffbe39d604275ba8cd/security-manager-0.1.5.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3e733040c0d62b289268e81577700432", "sha256": "d6283bcf6ecfb182f08afa2736323281efc8d8fdf4e9068ec749bfd7e13c123b"}, "downloads": -1, "filename": "security_manager-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e733040c0d62b289268e81577700432", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26898, "upload_time": "2017-12-14T10:51:22", "upload_time_iso_8601": "2017-12-14T10:51:22.500517Z", "url": "https://files.pythonhosted.org/packages/f5/f9/99783c4f69d78d274bc3e494de242b5e399730194455a466596cc18fb881/security_manager-0.2.1-py2.py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "06cb16b4f4a4395a3754d1a017168695", "sha256": "e5bb94580402fa527b8710543de6ee487a0e6263fb5ede762057a308ee85cc11"}, "downloads": -1, "filename": "security_manager-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "06cb16b4f4a4395a3754d1a017168695", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28392, "upload_time": "2018-01-11T12:15:13", "upload_time_iso_8601": "2018-01-11T12:15:13.502230Z", "url": "https://files.pythonhosted.org/packages/b4/b0/1d3ded069ff163cc82ef3fcb51956734c3be0f4b01448c7a9135fb87adb7/security_manager-0.2.2-py2.py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "6bd5402096fdd4fe5a3fdb30bd7c6507", "sha256": "e7ca5ff0bf8e4170a949f44c07499bd0ba9ef60f56bce9d5f745ba715e0c2edb"}, "downloads": -1, "filename": "security_manager-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6bd5402096fdd4fe5a3fdb30bd7c6507", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28465, "upload_time": "2018-01-11T15:02:39", "upload_time_iso_8601": "2018-01-11T15:02:39.688012Z", "url": "https://files.pythonhosted.org/packages/38/90/355b6fd217d82e3e28b21f2609d6f2bd74d371659220bfa69de3ad4c684e/security_manager-0.2.3-py2.py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "cf8b2e38c7eeb16f714b404a34c17058", "sha256": "9156eafde40f018b14f3e67f230f8c82b474088d164b4efba849851ae478e83c"}, "downloads": -1, "filename": "security_manager-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cf8b2e38c7eeb16f714b404a34c17058", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28521, "upload_time": "2018-02-02T16:01:10", "upload_time_iso_8601": "2018-02-02T16:01:10.610239Z", "url": "https://files.pythonhosted.org/packages/fe/4e/62810ee3e7ff4dbafa97fe147c5b1b90fe45cde918c24126d615fcb07c95/security_manager-0.2.4-py2.py3-none-any.whl", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "2962b23b517f7b878cc15e1ef8745308", "sha256": "37054d5b21b012e3045ed28efe944b374503e3ce0bbb99127f511d1d6b66b694"}, "downloads": -1, "filename": "security_manager-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2962b23b517f7b878cc15e1ef8745308", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36335, "upload_time": "2018-03-07T10:24:15", "upload_time_iso_8601": "2018-03-07T10:24:15.177460Z", "url": "https://files.pythonhosted.org/packages/6d/3f/1633363a4ac68498965eec6d35a210630084d37feaa23f4784dc2ed3f2ae/security_manager-0.2.5-py2.py3-none-any.whl", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "ce82b27e2b5a297393aa6517b6d6c0bf", "sha256": "2b7514e375bf07591bdbde4507b736deb6595be90e4f11df242ee87aa15f1574"}, "downloads": -1, "filename": "security_manager-0.2.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce82b27e2b5a297393aa6517b6d6c0bf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36276, "upload_time": "2018-03-12T15:09:29", "upload_time_iso_8601": "2018-03-12T15:09:29.582414Z", "url": "https://files.pythonhosted.org/packages/12/e8/ac9f220ca82d494622812d7a9711ceb29d289770f7b593e69848d742866f/security_manager-0.2.6-py2.py3-none-any.whl", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "b2f2a38939883271fb378f7b856d705b", "sha256": "a025b69d94d7671e3a00dbe8ed18c77efe678e8e515e463dee5cb14e53c2b33c"}, "downloads": -1, "filename": "security_manager-0.2.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2f2a38939883271fb378f7b856d705b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36174, "upload_time": "2018-04-10T15:36:13", "upload_time_iso_8601": "2018-04-10T15:36:13.450588Z", "url": "https://files.pythonhosted.org/packages/57/8b/7e5a74f38d0f0e856f093e618bf510ed71ccd3ad526e011be27ef73e8572/security_manager-0.2.7-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b2f2a38939883271fb378f7b856d705b", "sha256": "a025b69d94d7671e3a00dbe8ed18c77efe678e8e515e463dee5cb14e53c2b33c"}, "downloads": -1, "filename": "security_manager-0.2.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2f2a38939883271fb378f7b856d705b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36174, "upload_time": "2018-04-10T15:36:13", "upload_time_iso_8601": "2018-04-10T15:36:13.450588Z", "url": "https://files.pythonhosted.org/packages/57/8b/7e5a74f38d0f0e856f093e618bf510ed71ccd3ad526e011be27ef73e8572/security_manager-0.2.7-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:55:53 2020"}