{"info": {"author": "Mitchell Currie", "author_email": "mitch@mitchellcurrie.com", "bugtrack_url": null, "classifiers": [], "description": "# micropython-wifimanager\nA simple network configuration utility for MicroPython on boards such as ESP8266 and ESP32.\n\n#### Configuration\n\nSimply upload your JSON file with your networks, the default path is '/networks.json', which is specified in the class property `config_file`.\n\nA sample configuration may look like this:\n\n\t{\n\t\t\"schema\": 2,\n\t\t\"known_networks\": [\n\t\t\t{\n\t\t\t\t\"ssid\": \"User\\u2019s iPhone\",\n\t\t\t\t\"password\": \"Password1\",\n\t\t\t\t\"enables_webrepl\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ssid\": \"HomeNetwork\",\n\t\t\t\t\"password\": \"Password2\",\n\t\t\t\t\"enables_webrepl\": true\n\t\t\t}\n\t\t],\n\t\t\"access_point\": {\n\t\t\t\"config\": {\n\t\t\t\t\"essid\": \"Micropython-Dev\",\n\t\t\t\t\"channel\": 11,\n\t\t\t\t\"hidden\": false,\n\t\t\t\t\"password\": \"P@55W0rd\"\n\t\t\t},\n\t\t\t\"enables_webrepl\": true,\n\t\t\t\"start_policy\": \"fallback\"\n\t\t}\n\t}\n\n#### Configuration schema\n\n* **schema**: currently this should be `2`\n* **known_networks**: list of networks to connect to, in order of most preferred first\n\t* SSID - the name of the access point\n\t* password - the clear test password to use\n\t* enables_webrepl - a boolean value to indicate if connection to this network desires webrepl being started\n* **access_point**: the details for the access point (AP) of this device\n\t* config - the keys for the AP config, exactly as per the micropython documentation\n\t* enables_weprepl - a boolean value to indicate if ceating this network desires webrepl being started\n\t* start_policy - A policy from the below list to indicate when to enable the AP\n\t\t* 'always' - regardless of the connection to any base station, AP will be started\n\t\t* 'fallback' - the AP will only be started if no network could be connected to\n\t\t* 'never' - The AP will not be started under any condition\n\n#### Simple usage (one shot)\n\nHere's an example of how to use the WifiManager.\n\n\tMicroPython v1.9.4 on 2018-05-11; ESP32 module with ESP32\n\tType \"help()\" for more information.\n\t>>> from wifi_manager import WifiManager\n\t>>> WifiManager.setup_network()\n\tconnecting to network Foo-Network...\n\tWebREPL daemon started on ws://10.1.1.234:8266\n\tStarted webrepl in normal mode\n\tTrue\n\n\n#### Asynchronous usage (event loop)\n\nThe WifiManager can be run asynchronously, via the cooperative scheduling that micropthon has in uasyncio. If you call `WifiManager.start_managing()` as follows, it will ensure that periodically the network status is scanned, and connection will be re-established as per preferences as needed.\n\n\timport uasyncio as asyncio\n\tfrom wifi_manager import WifiManager\n\n\tWifiManager.start_managing()\n\tasyncio.get_event_loop().run_forever()\n\n\n#### Contribution\n\nFound a bug, or want a feature? open an issue.\n\nIf you want to contribute, create a pull request.\n\n#### System flow\n\n![System flow](https://github.com/mitchins/micropython-wifimanager/raw/master/system_flow.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/mitchins/micropython-wifimanager/archive/0.3.4.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mitchins/micropython-wifimanager", "keywords": "micropython,esp8266,esp32,wifi,manager", "license": "", "maintainer": "", "maintainer_email": "", "name": "micropython-wifimanager", "package_url": "https://pypi.org/project/micropython-wifimanager/", "platform": "", "project_url": "https://pypi.org/project/micropython-wifimanager/", "project_urls": {"Download": "https://github.com/mitchins/micropython-wifimanager/archive/0.3.4.tar.gz", "Homepage": "https://github.com/mitchins/micropython-wifimanager"}, "release_url": "https://pypi.org/project/micropython-wifimanager/0.3.6/", "requires_dist": null, "requires_python": "", "summary": "A simple network configuration utility for MicroPython on the ESP-8266 and ESP-32 boards", "version": "0.3.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>micropython-wifimanager</h1>\n<p>A simple network configuration utility for MicroPython on boards such as ESP8266 and ESP32.</p>\n<h4>Configuration</h4>\n<p>Simply upload your JSON file with your networks, the default path is '/networks.json', which is specified in the class property <code>config_file</code>.</p>\n<p>A sample configuration may look like this:</p>\n<pre><code>{\n\t\"schema\": 2,\n\t\"known_networks\": [\n\t\t{\n\t\t\t\"ssid\": \"User\\u2019s iPhone\",\n\t\t\t\"password\": \"Password1\",\n\t\t\t\"enables_webrepl\": false\n\t\t},\n\t\t{\n\t\t\t\"ssid\": \"HomeNetwork\",\n\t\t\t\"password\": \"Password2\",\n\t\t\t\"enables_webrepl\": true\n\t\t}\n\t],\n\t\"access_point\": {\n\t\t\"config\": {\n\t\t\t\"essid\": \"Micropython-Dev\",\n\t\t\t\"channel\": 11,\n\t\t\t\"hidden\": false,\n\t\t\t\"password\": \"P@55W0rd\"\n\t\t},\n\t\t\"enables_webrepl\": true,\n\t\t\"start_policy\": \"fallback\"\n\t}\n}\n</code></pre>\n<h4>Configuration schema</h4>\n<ul>\n<li><strong>schema</strong>: currently this should be <code>2</code></li>\n<li><strong>known_networks</strong>: list of networks to connect to, in order of most preferred first\n<ul>\n<li>SSID - the name of the access point</li>\n<li>password - the clear test password to use</li>\n<li>enables_webrepl - a boolean value to indicate if connection to this network desires webrepl being started</li>\n</ul>\n</li>\n<li><strong>access_point</strong>: the details for the access point (AP) of this device\n<ul>\n<li>config - the keys for the AP config, exactly as per the micropython documentation</li>\n<li>enables_weprepl - a boolean value to indicate if ceating this network desires webrepl being started</li>\n<li>start_policy - A policy from the below list to indicate when to enable the AP\n<ul>\n<li>'always' - regardless of the connection to any base station, AP will be started</li>\n<li>'fallback' - the AP will only be started if no network could be connected to</li>\n<li>'never' - The AP will not be started under any condition</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Simple usage (one shot)</h4>\n<p>Here's an example of how to use the WifiManager.</p>\n<pre><code>MicroPython v1.9.4 on 2018-05-11; ESP32 module with ESP32\nType \"help()\" for more information.\n&gt;&gt;&gt; from wifi_manager import WifiManager\n&gt;&gt;&gt; WifiManager.setup_network()\nconnecting to network Foo-Network...\nWebREPL daemon started on ws://10.1.1.234:8266\nStarted webrepl in normal mode\nTrue\n</code></pre>\n<h4>Asynchronous usage (event loop)</h4>\n<p>The WifiManager can be run asynchronously, via the cooperative scheduling that micropthon has in uasyncio. If you call <code>WifiManager.start_managing()</code> as follows, it will ensure that periodically the network status is scanned, and connection will be re-established as per preferences as needed.</p>\n<pre><code>import uasyncio as asyncio\nfrom wifi_manager import WifiManager\n\nWifiManager.start_managing()\nasyncio.get_event_loop().run_forever()\n</code></pre>\n<h4>Contribution</h4>\n<p>Found a bug, or want a feature? open an issue.</p>\n<p>If you want to contribute, create a pull request.</p>\n<h4>System flow</h4>\n<p><img alt=\"System flow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/398f85af5724ac05220c4805f0fbcb99d896058e/68747470733a2f2f6769746875622e636f6d2f6d69746368696e732f6d6963726f707974686f6e2d776966696d616e616765722f7261772f6d61737465722f73797374656d5f666c6f772e706e67\"></p>\n\n          </div>"}, "last_serial": 4784808, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "86c75b93059cb1ae3079cd9bbb48ee6d", "sha256": "6f11c9ab6636882583ca61cd986a61ed1de20eb5085d55a0fc26a9c6dbf5268b"}, "downloads": -1, "filename": "micropython-wifimanager-0.1.tar.gz", "has_sig": false, "md5_digest": "86c75b93059cb1ae3079cd9bbb48ee6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2316, "upload_time": "2017-09-03T07:17:27", "upload_time_iso_8601": "2017-09-03T07:17:27.540305Z", "url": "https://files.pythonhosted.org/packages/26/a0/e6188211f1b6573ebfed00f6c2f0dea729773b56b897781ea2881e8145fd/micropython-wifimanager-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "20ee7acd73f484c810b842b1dc28df8b", "sha256": "86ac43cb4261f10c33a07454ad92a8477c88491513f668b71f647eacf59bb721"}, "downloads": -1, "filename": "micropython-wifimanager-0.2.tar.gz", "has_sig": false, "md5_digest": "20ee7acd73f484c810b842b1dc28df8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2523, "upload_time": "2017-09-03T12:35:17", "upload_time_iso_8601": "2017-09-03T12:35:17.845307Z", "url": "https://files.pythonhosted.org/packages/2b/df/42d9bfd838c43737af7b2e6fc33012f156a9d5b49d54de4f044ca793e9a3/micropython-wifimanager-0.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "8f2cd0f917047213f4d6ac09559c4030", "sha256": "05fccc04aac0ff094b91d75f020819509595eda420785a0291b773071d01f46a"}, "downloads": -1, "filename": "micropython-wifimanager-0.3.3.tar.gz", "has_sig": false, "md5_digest": "8f2cd0f917047213f4d6ac09559c4030", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4986, "upload_time": "2018-07-23T11:03:23", "upload_time_iso_8601": "2018-07-23T11:03:23.718310Z", "url": "https://files.pythonhosted.org/packages/ab/bf/5f896441ca23c794fc7011f5429a04b44018a686789d592cf8d9911afd1a/micropython-wifimanager-0.3.3.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "31f3bf6a71eaba2e7a03f85e6e6321d3", "sha256": "ab87110e58a3fc141b8b2cb73c7cedb9d4af6d21809e713e7ae35b9bdba744fd"}, "downloads": -1, "filename": "micropython_wifimanager-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "31f3bf6a71eaba2e7a03f85e6e6321d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5163, "upload_time": "2019-02-06T03:23:40", "upload_time_iso_8601": "2019-02-06T03:23:40.368994Z", "url": "https://files.pythonhosted.org/packages/c7/09/a1d00d0b2ab19417d2fe90e8550f73463243cebb78da29c134970eb041c9/micropython_wifimanager-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1111a4312cdd8fae412c94c4817906e4", "sha256": "aedb07308cd2c836b63243cd7c4e663adb6fa8dfb0a5cc5dbaa2fe15de4e9801"}, "downloads": -1, "filename": "micropython-wifimanager-0.3.6.tar.gz", "has_sig": false, "md5_digest": "1111a4312cdd8fae412c94c4817906e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4163, "upload_time": "2019-02-06T03:23:41", "upload_time_iso_8601": "2019-02-06T03:23:41.862222Z", "url": "https://files.pythonhosted.org/packages/c2/6a/60dc1437be8f825616970041a0c2032b08995e328e4a58dd69b6687579a0/micropython-wifimanager-0.3.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "31f3bf6a71eaba2e7a03f85e6e6321d3", "sha256": "ab87110e58a3fc141b8b2cb73c7cedb9d4af6d21809e713e7ae35b9bdba744fd"}, "downloads": -1, "filename": "micropython_wifimanager-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "31f3bf6a71eaba2e7a03f85e6e6321d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5163, "upload_time": "2019-02-06T03:23:40", "upload_time_iso_8601": "2019-02-06T03:23:40.368994Z", "url": "https://files.pythonhosted.org/packages/c7/09/a1d00d0b2ab19417d2fe90e8550f73463243cebb78da29c134970eb041c9/micropython_wifimanager-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1111a4312cdd8fae412c94c4817906e4", "sha256": "aedb07308cd2c836b63243cd7c4e663adb6fa8dfb0a5cc5dbaa2fe15de4e9801"}, "downloads": -1, "filename": "micropython-wifimanager-0.3.6.tar.gz", "has_sig": false, "md5_digest": "1111a4312cdd8fae412c94c4817906e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4163, "upload_time": "2019-02-06T03:23:41", "upload_time_iso_8601": "2019-02-06T03:23:41.862222Z", "url": "https://files.pythonhosted.org/packages/c2/6a/60dc1437be8f825616970041a0c2032b08995e328e4a58dd69b6687579a0/micropython-wifimanager-0.3.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:58 2020"}