{"info": {"author": "Stephen Rosen", "author_email": "sirosen@globus.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. image:: https://travis-ci.org/sirosen/tinyprompt.svg?branch=master\n    :alt: build status\n    :target: https://travis-ci.org/sirosen/tinyprompt\n\n.. image:: https://img.shields.io/pypi/v/tinyprompt.svg\n    :alt: Latest Released Version\n    :target: https://pypi.org/project/tinyprompt/\n\n.. image:: https://img.shields.io/pypi/pyversions/tinyprompt.svg\n    :alt: Supported Python Versions\n    :target: https://pypi.org/project/tinyprompt/\n\n.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :alt: License\n    :target: https://opensource.org/licenses/Apache-2.0\n\n\ntinyprompt\n==========\n\nA tiny lib for nice, handy prompts, primarily for Ops scripts.\n\nThis README contains all documentation.\n\nUsage\n-----\n\n``pip install tinyprompt``\n\nUse `tinyprompt.skippable` to wrap script steps with a `Yes / Skip / Quit`\nprompt. This is very useful for simple scripted operations where\n- `yes` is the normal case\n- `skip` can be used to resume after a failure or abort\n- `quit` is used to abort when issues are encountered\n\n.. code-block:: python\n\n    import tinyprompt\n\n    # note: tinyprompt.skippable passes arguments through verbatim, but it's\n    # not guaranteed to return a meaningful result\n    # `quit` does a sys.exit(1) and `skip` makes it return `None`\n\n    @tinyprompt.skippable('skippable script step')\n    def my_func():\n        \"\"\"\n        Do some things, this docstring will show up as a command description\n        when the script is run.\n        The \"skippable script step\" arg will be uppercased and used as the step\n        name.\n        \"\"\"\n        print('this skippable step')\n\n\n    @tinyprompt.skippable('other skippable script step', color=False)\n    def my_func2():\n        \"\"\"another func\"\"\"\n        print('hi')\n\n\n    def otherfunc():\n        # yes, it's on purpose\n        tinyprompt.color_print('red string', tinyprompt.RED)\n        tinyprompt.color_print('yellow string', tinyprompt.BLUE)\n        tinyprompt.color_print('green string', tinyprompt.GRAY)\n        tinyprompt.color_print('blue string', tinyprompt.GREEN)\n        tinyprompt.color_print('gray  string', tinyprompt.YELLOW)\n\n\n    def main():\n        my_func()  # skippable\n        my_func2()  # skippable\n        otherfunc()  # not skippable, but not reached on quit\n\n    if __name__ == '__main__':\n        main()\n\n\nContributing\n------------\n\n- All code must pass `make test`\n- All code is autoformatted with `black` and `isort`\n- Try to write a test whenever you find a bug\n- Make your PRs clean. Rebase to avoid merge conflicts and squash fixup commits", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sirosen/tinyprompt", "keywords": "cli,prompt,utility", "license": "", "maintainer": "", "maintainer_email": "", "name": "tinyprompt", "package_url": "https://pypi.org/project/tinyprompt/", "platform": "", "project_url": "https://pypi.org/project/tinyprompt/", "project_urls": {"Homepage": "https://github.com/sirosen/tinyprompt"}, "release_url": "https://pypi.org/project/tinyprompt/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Tiny Handy Prompting Lib", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/sirosen/tinyprompt\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f10eab2854565db16d663b3f1af96d778c8424d/68747470733a2f2f7472617669732d63692e6f72672f7369726f73656e2f74696e7970726f6d70742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/tinyprompt/\" rel=\"nofollow\"><img alt=\"Latest Released Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c12b69efb7103d90956498f814837b77cc14871/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74696e7970726f6d70742e737667\"></a>\n<a href=\"https://pypi.org/project/tinyprompt/\" rel=\"nofollow\"><img alt=\"Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2791e04e556d8d2b04a731b1ba535f42fcf0cab5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74696e7970726f6d70742e737667\"></a>\n<a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<div id=\"tinyprompt\">\n<h2>tinyprompt</h2>\n<p>A tiny lib for nice, handy prompts, primarily for Ops scripts.</p>\n<p>This README contains all documentation.</p>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p><tt>pip install tinyprompt</tt></p>\n<p>Use <cite>tinyprompt.skippable</cite> to wrap script steps with a <cite>Yes / Skip / Quit</cite>\nprompt. This is very useful for simple scripted operations where\n- <cite>yes</cite> is the normal case\n- <cite>skip</cite> can be used to resume after a failure or abort\n- <cite>quit</cite> is used to abort when issues are encountered</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tinyprompt</span>\n\n<span class=\"c1\"># note: tinyprompt.skippable passes arguments through verbatim, but it's</span>\n<span class=\"c1\"># not guaranteed to return a meaningful result</span>\n<span class=\"c1\"># `quit` does a sys.exit(1) and `skip` makes it return `None`</span>\n\n<span class=\"nd\">@tinyprompt</span><span class=\"o\">.</span><span class=\"n\">skippable</span><span class=\"p\">(</span><span class=\"s1\">'skippable script step'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_func</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"\n    Do some things, this docstring will show up as a command description\n    when the script is run.\n    The \"skippable script step\" arg will be uppercased and used as the step\n    name.\n    \"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'this skippable step'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@tinyprompt</span><span class=\"o\">.</span><span class=\"n\">skippable</span><span class=\"p\">(</span><span class=\"s1\">'other skippable script step'</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_func2</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"another func\"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'hi'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">otherfunc</span><span class=\"p\">():</span>\n    <span class=\"c1\"># yes, it's on purpose</span>\n    <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">color_print</span><span class=\"p\">(</span><span class=\"s1\">'red string'</span><span class=\"p\">,</span> <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">RED</span><span class=\"p\">)</span>\n    <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">color_print</span><span class=\"p\">(</span><span class=\"s1\">'yellow string'</span><span class=\"p\">,</span> <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">BLUE</span><span class=\"p\">)</span>\n    <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">color_print</span><span class=\"p\">(</span><span class=\"s1\">'green string'</span><span class=\"p\">,</span> <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">GRAY</span><span class=\"p\">)</span>\n    <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">color_print</span><span class=\"p\">(</span><span class=\"s1\">'blue string'</span><span class=\"p\">,</span> <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">GREEN</span><span class=\"p\">)</span>\n    <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">color_print</span><span class=\"p\">(</span><span class=\"s1\">'gray  string'</span><span class=\"p\">,</span> <span class=\"n\">tinyprompt</span><span class=\"o\">.</span><span class=\"n\">YELLOW</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">my_func</span><span class=\"p\">()</span>  <span class=\"c1\"># skippable</span>\n    <span class=\"n\">my_func2</span><span class=\"p\">()</span>  <span class=\"c1\"># skippable</span>\n    <span class=\"n\">otherfunc</span><span class=\"p\">()</span>  <span class=\"c1\"># not skippable, but not reached on quit</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<ul>\n<li>All code must pass <cite>make test</cite></li>\n<li>All code is autoformatted with <cite>black</cite> and <cite>isort</cite></li>\n<li>Try to write a test whenever you find a bug</li>\n<li>Make your PRs clean. Rebase to avoid merge conflicts and squash fixup commits</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4446756, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1a39babf78b5daf1d17b8b474de07a64", "sha256": "cfa6a67b9f31e3a745f262317814b7701cedfd60d4459b17e1b84fbfbba10f6c"}, "downloads": -1, "filename": "tinyprompt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1a39babf78b5daf1d17b8b474de07a64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4224, "upload_time": "2018-11-03T05:04:13", "upload_time_iso_8601": "2018-11-03T05:04:13.502550Z", "url": "https://files.pythonhosted.org/packages/56/ed/7685ecf5e549536df8a18ea6c3a889835bcd7e391fcc1d056499828d4a31/tinyprompt-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a39babf78b5daf1d17b8b474de07a64", "sha256": "cfa6a67b9f31e3a745f262317814b7701cedfd60d4459b17e1b84fbfbba10f6c"}, "downloads": -1, "filename": "tinyprompt-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1a39babf78b5daf1d17b8b474de07a64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4224, "upload_time": "2018-11-03T05:04:13", "upload_time_iso_8601": "2018-11-03T05:04:13.502550Z", "url": "https://files.pythonhosted.org/packages/56/ed/7685ecf5e549536df8a18ea6c3a889835bcd7e391fcc1d056499828d4a31/tinyprompt-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:57 2020"}