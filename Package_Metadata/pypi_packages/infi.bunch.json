{"info": {"author": "Rotem Yaari", "author_email": "vmalloc@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "bunch\n=====\n\nBunch is a dictionary that supports attribute-style access, a la JavaScript.\n\n>>> b = Bunch()\n>>> b.hello = 'world'\n>>> b.hello\n'world'\n>>> b['hello'] += \"!\"\n>>> b.hello\n'world!'\n>>> b.foo = Bunch(lol=True)\n>>> b.foo.lol\nTrue\n>>> b.foo is b['foo']\nTrue\n\n\nDictionary Methods\n------------------\n\nA Bunch is a subclass of ``dict``; it supports all the methods a ``dict`` does:\n\n>>> b.keys()\n['foo', 'hello']\n\nIncluding ``update()``:\n\n>>> b.update({ 'ponies': 'are pretty!' }, hello=42)\n>>> print repr(b)\nBunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n\nAs well as iteration:\n\n>>> [ (k,b[k]) for k in b ]\n[('ponies', 'are pretty!'), ('foo', Bunch(lol=True)), ('hello', 42)]\n\nAnd \"splats\":\n\n>>> \"The {knights} who say {ni}!\".format(**Bunch(knights='lolcats', ni='can haz'))\n'The lolcats who say can haz!'\n\n\nSerialization\n-------------\n\nBunches happily and transparently serialize to JSON and YAML.\n\n>>> b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n>>> import json\n>>> json.dumps(b)\n'{\"ponies\": \"are pretty!\", \"foo\": {\"lol\": true}, \"hello\": 42}'\n\nIf JSON support is present (``json`` or ``simplejson``), ``Bunch`` will have a ``toJSON()`` method which returns the object as a JSON string.\n\nIf you have PyYAML_ installed, Bunch attempts to register itself with the various YAML Representers so that Bunches can be transparently dumped and loaded.\n\n>>> b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n>>> import yaml\n>>> yaml.dump(b)\n'!bunch.Bunch\\nfoo: !bunch.Bunch {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\n>>> yaml.safe_dump(b)\n'foo: {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\n\nIn addition, Bunch instances will have a ``toYAML()`` method that returns the YAML string using ``yaml.safe_dump()``. This method also replaces ``__str__`` if present, as I find it far more readable. You can revert back to Python's default use of ``__repr__`` with a simple assignment: ``Bunch.__str__ = Bunch.__repr__``. The Bunch class will also have a static method ``Bunch.fromYAML()``, which loads a Bunch out of a YAML string.\n\nFinally, Bunch converts easily and recursively to (``unbunchify()``, ``Bunch.toDict()``) and from (``bunchify()``, ``Bunch.fromDict()``) a normal ``dict``, making it easy to cleanly serialize them in other formats.\n\n\nMiscellaneous\n-------------\n\n* It is safe to ``import *`` from this module. You'll get: ``Bunch``, ``bunchify``, and ``unbunchify``.\n\n* Ample doctests::\n\n    $ python -m bunch.test\n    $ python -m bunch.test -v | tail -n22\n    1 items had no tests:\n        bunch.fromYAML\n    16 items passed all tests:\n       8 tests in bunch\n      13 tests in bunch.Bunch\n       7 tests in bunch.Bunch.__contains__\n       4 tests in bunch.Bunch.__delattr__\n       7 tests in bunch.Bunch.__getattr__\n       3 tests in bunch.Bunch.__repr__\n       5 tests in bunch.Bunch.__setattr__\n       2 tests in bunch.Bunch.fromDict\n       2 tests in bunch.Bunch.toDict\n       5 tests in bunch.bunchify\n       2 tests in bunch.from_yaml\n       3 tests in bunch.toJSON\n       6 tests in bunch.toYAML\n       3 tests in bunch.to_yaml\n       3 tests in bunch.to_yaml_safe\n       4 tests in bunch.unbunchify\n    77 tests in 17 items.\n    77 passed and 0 failed.\n    Test passed.\n\n\nFeedback\n--------\n\nOpen a ticket / fork the project on GitHub_, or send me an email at `dsc@less.ly`_.\n\n.. _PyYAML: http://pyyaml.org/wiki/PyYAML\n.. _GitHub: http://github.com/dsc/bunch\n.. _dsc@less.ly: mailto:dsc@less.ly", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Infinidat/infi.bunch", "keywords": "bunch,dict,mapping,container,collection", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "infi.bunch", "package_url": "https://pypi.org/project/infi.bunch/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/infi.bunch/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/Infinidat/infi.bunch"}, "release_url": "https://pypi.org/project/infi.bunch/2.0.0/", "requires_dist": null, "requires_python": null, "summary": "A dot-accessible dictionary (a la JavaScript objects)", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Bunch is a dictionary that supports attribute-style access, a la JavaScript.</p>\n<pre>&gt;&gt;&gt; b = Bunch()\n&gt;&gt;&gt; b.hello = 'world'\n&gt;&gt;&gt; b.hello\n'world'\n&gt;&gt;&gt; b['hello'] += \"!\"\n&gt;&gt;&gt; b.hello\n'world!'\n&gt;&gt;&gt; b.foo = Bunch(lol=True)\n&gt;&gt;&gt; b.foo.lol\nTrue\n&gt;&gt;&gt; b.foo is b['foo']\nTrue\n</pre>\n<div id=\"dictionary-methods\">\n<h2>Dictionary Methods</h2>\n<p>A Bunch is a subclass of <tt>dict</tt>; it supports all the methods a <tt>dict</tt> does:</p>\n<pre>&gt;&gt;&gt; b.keys()\n['foo', 'hello']\n</pre>\n<p>Including <tt>update()</tt>:</p>\n<pre>&gt;&gt;&gt; b.update({ 'ponies': 'are pretty!' }, hello=42)\n&gt;&gt;&gt; print repr(b)\nBunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n</pre>\n<p>As well as iteration:</p>\n<pre>&gt;&gt;&gt; [ (k,b[k]) for k in b ]\n[('ponies', 'are pretty!'), ('foo', Bunch(lol=True)), ('hello', 42)]\n</pre>\n<p>And \u201csplats\u201d:</p>\n<pre>&gt;&gt;&gt; \"The {knights} who say {ni}!\".format(**Bunch(knights='lolcats', ni='can haz'))\n'The lolcats who say can haz!'\n</pre>\n</div>\n<div id=\"serialization\">\n<h2>Serialization</h2>\n<p>Bunches happily and transparently serialize to JSON and YAML.</p>\n<pre>&gt;&gt;&gt; b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; json.dumps(b)\n'{\"ponies\": \"are pretty!\", \"foo\": {\"lol\": true}, \"hello\": 42}'\n</pre>\n<p>If JSON support is present (<tt>json</tt> or <tt>simplejson</tt>), <tt>Bunch</tt> will have a <tt>toJSON()</tt> method which returns the object as a JSON string.</p>\n<p>If you have <a href=\"http://pyyaml.org/wiki/PyYAML\" rel=\"nofollow\">PyYAML</a> installed, Bunch attempts to register itself with the various YAML Representers so that Bunches can be transparently dumped and loaded.</p>\n<pre>&gt;&gt;&gt; b = Bunch(foo=Bunch(lol=True), hello=42, ponies='are pretty!')\n&gt;&gt;&gt; import yaml\n&gt;&gt;&gt; yaml.dump(b)\n'!bunch.Bunch\\nfoo: !bunch.Bunch {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\n&gt;&gt;&gt; yaml.safe_dump(b)\n'foo: {lol: true}\\nhello: 42\\nponies: are pretty!\\n'\n</pre>\n<p>In addition, Bunch instances will have a <tt>toYAML()</tt> method that returns the YAML string using <tt>yaml.safe_dump()</tt>. This method also replaces <tt>__str__</tt> if present, as I find it far more readable. You can revert back to Python\u2019s default use of <tt>__repr__</tt> with a simple assignment: <tt>Bunch.__str__ = Bunch.__repr__</tt>. The Bunch class will also have a static method <tt>Bunch.fromYAML()</tt>, which loads a Bunch out of a YAML string.</p>\n<p>Finally, Bunch converts easily and recursively to (<tt>unbunchify()</tt>, <tt>Bunch.toDict()</tt>) and from (<tt>bunchify()</tt>, <tt>Bunch.fromDict()</tt>) a normal <tt>dict</tt>, making it easy to cleanly serialize them in other formats.</p>\n</div>\n<div id=\"miscellaneous\">\n<h2>Miscellaneous</h2>\n<ul>\n<li><p>It is safe to <tt>import *</tt> from this module. You\u2019ll get: <tt>Bunch</tt>, <tt>bunchify</tt>, and <tt>unbunchify</tt>.</p>\n</li>\n<li><p>Ample doctests:</p>\n<pre>$ python -m bunch.test\n$ python -m bunch.test -v | tail -n22\n1 items had no tests:\n    bunch.fromYAML\n16 items passed all tests:\n   8 tests in bunch\n  13 tests in bunch.Bunch\n   7 tests in bunch.Bunch.__contains__\n   4 tests in bunch.Bunch.__delattr__\n   7 tests in bunch.Bunch.__getattr__\n   3 tests in bunch.Bunch.__repr__\n   5 tests in bunch.Bunch.__setattr__\n   2 tests in bunch.Bunch.fromDict\n   2 tests in bunch.Bunch.toDict\n   5 tests in bunch.bunchify\n   2 tests in bunch.from_yaml\n   3 tests in bunch.toJSON\n   6 tests in bunch.toYAML\n   3 tests in bunch.to_yaml\n   3 tests in bunch.to_yaml_safe\n   4 tests in bunch.unbunchify\n77 tests in 17 items.\n77 passed and 0 failed.\nTest passed.\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"feedback\">\n<h2>Feedback</h2>\n<p>Open a ticket / fork the project on <a href=\"http://github.com/dsc/bunch\" rel=\"nofollow\">GitHub</a>, or send me an email at <a href=\"mailto:dsc%40less.ly\">dsc<span>@</span>less<span>.</span>ly</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 793277, "releases": {"1.0.1": [], "2.0.0": [{"comment_text": "", "digests": {"md5": "1dfc0ea092ad5aa5641d7413169a1e65", "sha256": "76a655ae3fa4a27a3233f5f18440ba4cb3023af08d0355a4fb3584e26f9eaebb"}, "downloads": -1, "filename": "infi.bunch-2.0.0.tar.gz", "has_sig": false, "md5_digest": "1dfc0ea092ad5aa5641d7413169a1e65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7305, "upload_time": "2012-07-22T16:16:45", "upload_time_iso_8601": "2012-07-22T16:16:45.588909Z", "url": "https://files.pythonhosted.org/packages/cf/95/dc268b05012ddaf5e0e120bd59521f69a4dba2b6595541c12fbd2ad718d5/infi.bunch-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1dfc0ea092ad5aa5641d7413169a1e65", "sha256": "76a655ae3fa4a27a3233f5f18440ba4cb3023af08d0355a4fb3584e26f9eaebb"}, "downloads": -1, "filename": "infi.bunch-2.0.0.tar.gz", "has_sig": false, "md5_digest": "1dfc0ea092ad5aa5641d7413169a1e65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7305, "upload_time": "2012-07-22T16:16:45", "upload_time_iso_8601": "2012-07-22T16:16:45.588909Z", "url": "https://files.pythonhosted.org/packages/cf/95/dc268b05012ddaf5e0e120bd59521f69a4dba2b6595541c12fbd2ad718d5/infi.bunch-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:12 2020"}