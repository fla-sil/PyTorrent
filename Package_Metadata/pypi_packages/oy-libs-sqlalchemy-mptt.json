{"info": {"author": "Svintsov Dmitry", "author_email": "sacrud@uralbash.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Framework :: Flask", "Framework :: Pyramid", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database", "Topic :: Internet"], "description": "|Build Status| |Coverage Status|\n\nLibrary for implementing Modified Preorder Tree Traversal with your\nSQLAlchemy Models and working with trees of Model instances, like\ndjango-mptt. Docs http://sqlalchemy-mptt.readthedocs.io/\n\n.. image:: https://cdn.rawgit.com/uralbash/sqlalchemy_mptt/master/docs/img/2_sqlalchemy_mptt_traversal.svg\n   :alt: Nested sets traversal\n   :width: 800px\n\nThe nested set model is a particular technique for representing nested\nsets (also known as trees or hierarchies) in relational databases.\n\nInstalling\n----------\n\nInstall from github:\n\n.. code-block:: bash\n\n    pip install git+http://github.com/uralbash/sqlalchemy_mptt.git\n\nPyPi:\n\n.. code-block:: bash\n\n    pip install sqlalchemy_mptt\n\nSource:\n\n.. code-block:: bash\n\n    pip install -e .\n\nUsage\n-----\n\nAdd mixin to model\n\n.. code-block:: python\n\n    from sqlalchemy import Column, Integer, Boolean\n    from sqlalchemy.ext.declarative import declarative_base\n\n    from sqlalchemy_mptt.mixins import BaseNestedSets\n\n    Base = declarative_base()\n\n\n    class Tree(Base, BaseNestedSets):\n        __tablename__ = \"tree\"\n\n        id = Column(Integer, primary_key=True)\n        visible = Column(Boolean)\n\n        def __repr__(self):\n            return \"<Node (%s)>\" % self.id\n\nNow you can add, move and delete obj!\n\nInsert node\n-----------\n\n.. code-block:: python\n\n    node = Tree(parent_id=6)\n    session.add(node)\n\n::\n\n            level           Nested sets example\n            1                    1(1)22\n                    _______________|___________________\n                   |               |                   |\n            2    2(2)5           6(4)11             12(7)21\n                   |               ^                   ^\n            3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                                  |          |\n            4                                  14(9)15   18(11)19\n\n            level     Insert node with parent_id == 6\n            1                    1(1)24\n                    _______________|_________________\n                   |               |                 |\n            2    2(2)5           6(4)13           14(7)23\n                   |           ____|____          ___|____\n                   |          |         |        |        |\n            3    3(3)4      7(5)8    9(6)12  15(8)18   19(10)22\n                                       |        |         |\n            4                      10(23)11  16(9)17  20(11)21\n\nDelete node\n-----------\n\n.. code:: python\n\n    node = session.query(Tree).filter(Tree.id == 4).one()\n    session.delete(node)\n\n::\n\n            level           Nested sets example\n            1                    1(1)22\n                    _______________|___________________\n                   |               |                   |\n            2    2(2)5           6(4)11             12(7)21\n                   |               ^                   ^\n            3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                                  |          |\n            4                                  14(9)15   18(11)19\n\n            level         Delete node == 4\n            1                    1(1)16\n                    _______________|_____\n                   |                     |\n            2    2(2)5                 6(7)15\n                   |                     ^\n            3    3(3)4            7(8)10   11(10)14\n                                    |          |\n            4                     8(9)9    12(11)13\n\nUpdate node\n-----------\n\n.. code:: python\n\n    node = session.query(Tree).filter(Tree.id == 8).one()\n    node.parent_id = 5\n    session.add(node)\n\n::\n\n            level           Nested sets example\n                1                    1(1)22\n                        _______________|___________________\n                       |               |                   |\n                2    2(2)5           6(4)11             12(7)21\n                       |               ^                   ^\n                3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                                      |          |\n                4                                  14(9)15   18(11)19\n\n            level               Move 8 - > 5\n                1                     1(1)22\n                         _______________|__________________\n                        |               |                  |\n                2     2(2)5           6(4)15            16(7)21\n                        |               ^                  |\n                3     3(3)4      7(5)12   13(6)14      17(10)20\n                                   |                        |\n                4                8(8)11                18(11)19\n                                   |\n                5                9(9)10\n\nMove node (support multitree)\n-----------------------------\n\n.. figure:: https://cdn.rawgit.com/uralbash/sqlalchemy_mptt/master/docs/img/3_sqlalchemy_mptt_multitree.svg\n   :alt: Nested sets multitree\n   :width: 600px\n\n   Nested sets multitree\n\nMove inside\n\n.. code:: python\n\n    node = session.query(Tree).filter(Tree.id == 4).one()\n    node.move_inside(\"15\")\n\n::\n\n                     4 -> 15\n            level           Nested sets tree1\n            1                    1(1)16\n                    _______________|_____________________\n                   |                                     |\n            2    2(2)5                                 6(7)15\n                   |                                     ^\n            3    3(3)4                            7(8)10   11(10)14\n                                                    |          |\n            4                                     8(9)9    12(11)13\n\n            level           Nested sets tree2\n            1                     1(12)28\n                     ________________|_______________________\n                    |                |                       |\n            2    2(13)5            6(15)17                18(18)27\n                   |                 ^                        ^\n            3    3(14)4    7(4)12 13(16)14  15(17)16  19(19)22  23(21)26\n                             ^                            |         |\n            4          8(5)9  10(6)11                 20(20)21  24(22)25\n\nMove after\n\n.. code:: python\n\n    node = session.query(Tree).filter(Tree.id == 8).one()\n    node.move_after(\"5\")\n\n::\n\n           level           Nested sets example\n                1                    1(1)22\n                        _______________|___________________\n                       |               |                   |\n                2    2(2)5           6(4)11             12(7)21\n                       |               ^                   ^\n                3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                                      |          |\n                4                                  14(9)15   18(11)19\n\n            level               Move 8 after 5\n                1                     1(1)22\n                         _______________|__________________\n                        |               |                  |\n                2     2(2)5           6(4)15            16(7)21\n                        |               ^                  |\n                3     3(3)4    7(5)8  9(8)12  13(6)14   17(10)20\n                                        |                  |\n                4                    10(9)11            18(11)19\n\nMove to top level\n\n.. code:: python\n\n    node = session.query(Tree).filter(Tree.id == 15).one()\n    node.move_after(\"1\")\n\n::\n\n            level           tree_id = 1\n            1                    1(1)22\n                    _______________|___________________\n                   |               |                   |\n            2    2(2)5           6(4)11             12(7)21\n                   |               ^                   ^\n            3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                                  |          |\n            4                                  14(9)15   18(11)19\n\n            level           tree_id = 2\n            1                     1(15)6\n                                     ^\n            2                 2(16)3   4(17)5\n\n            level           tree_id = 3\n            1                    1(12)16\n                     _______________|\n                    |               |\n            2    2(13)5          6(18)15\n                    |               ^\n            3    3(14)4     7(19)10   11(21)14\n                               |          |\n            4               8(20)9    12(22)13\n\nSupport and Development\n=======================\n\nTo report bugs, use the `issue tracker\n<https://github.com/uralbash/sqlalchemy_mptt/issues>`_.\n\nWe welcome any contribution: suggestions, ideas, commits with new\nfutures, bug fixes, refactoring, docs, tests, translations, etc...\n\nIf you have question, contact me sacrud@uralbash.ru or #sacrud IRC\nchannel |IRC Freenode|\n\nLicense\n=======\n\nThe project is licensed under the MIT license.\n\n.. |Build Status| image:: https://travis-ci.org/uralbash/sqlalchemy_mptt.svg?branch=master\n   :target: https://travis-ci.org/uralbash/sqlalchemy_mptt\n.. |Coverage Status| image:: https://coveralls.io/repos/uralbash/sqlalchemy_mptt/badge.png\n   :target: https://coveralls.io/r/uralbash/sqlalchemy_mptt\n.. |IRC Freenode| image:: https://img.shields.io/badge/irc-freenode-blue.svg\n   :target: https://webchat.freenode.net/?channels=sacrud\n\n0.2.4 (2018-12-14)\n==================\n\nsee PR #61\n\n- Allow to specify ordering of path_to_root\n\n0.2.3 (2018-06-03)\n==================\n\nsee issue #57\n\n- Fix rebuild tree\n- Added support node's identifier start from 0\n\n0.2.2 (2017-10-05)\n==================\n\nsee issue #56\n\n- Added custom default root level. Support Django style level=0\n\n0.2.1 (2016-01-23)\n==================\n\nsee PR #51\n\n- fix of index columns names\n\n0.2.0 (2015-11-13)\n==================\n\nsee PR #50\n\n- Changed ``parent_id`` to dynamically match the type of the primary_key\n- exposed drilldown_tree's logic and path_to_root's logic as both instance and\n  class level method\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mush42/sqlalchemy_mptt/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "oy-libs-sqlalchemy-mptt", "package_url": "https://pypi.org/project/oy-libs-sqlalchemy-mptt/", "platform": "", "project_url": "https://pypi.org/project/oy-libs-sqlalchemy-mptt/", "project_urls": {"Homepage": "http://github.com/mush42/sqlalchemy_mptt/"}, "release_url": "https://pypi.org/project/oy-libs-sqlalchemy-mptt/0.2.4/", "requires_dist": ["SQLAlchemy (>=1.0.0)"], "requires_python": "", "summary": "SQLAlchemy MPTT mixins (Nested Sets)", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/uralbash/sqlalchemy_mptt\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c100bd9317d65cb0ae9a3568dc1f47b5da71f8c7/68747470733a2f2f7472617669732d63692e6f72672f7572616c626173682f73716c616c6368656d795f6d7074742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/uralbash/sqlalchemy_mptt\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47df69af753b6dd38be289a8d60de46a36b953ec/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7572616c626173682f73716c616c6368656d795f6d7074742f62616467652e706e67\"></a></p>\n<p>Library for implementing Modified Preorder Tree Traversal with your\nSQLAlchemy Models and working with trees of Model instances, like\ndjango-mptt. Docs <a href=\"http://sqlalchemy-mptt.readthedocs.io/\" rel=\"nofollow\">http://sqlalchemy-mptt.readthedocs.io/</a></p>\n<img alt=\"Nested sets traversal\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83ef4282e86163a76d260e45575fae2df72b71d8/68747470733a2f2f63646e2e7261776769742e636f6d2f7572616c626173682f73716c616c6368656d795f6d7074742f6d61737465722f646f63732f696d672f325f73716c616c6368656d795f6d7074745f74726176657273616c2e737667\" width=\"800px\">\n<p>The nested set model is a particular technique for representing nested\nsets (also known as trees or hierarchies) in relational databases.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install from github:</p>\n<pre>pip install git+http://github.com/uralbash/sqlalchemy_mptt.git\n</pre>\n<p>PyPi:</p>\n<pre>pip install sqlalchemy_mptt\n</pre>\n<p>Source:</p>\n<pre>pip install -e .\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Add mixin to model</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">Boolean</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.ext.declarative</span> <span class=\"kn\">import</span> <span class=\"n\">declarative_base</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy_mptt.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">BaseNestedSets</span>\n\n<span class=\"n\">Base</span> <span class=\"o\">=</span> <span class=\"n\">declarative_base</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Tree</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">,</span> <span class=\"n\">BaseNestedSets</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"tree\"</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">visible</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Boolean</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"&lt;Node (</span><span class=\"si\">%s</span><span class=\"s2\">)&gt;\"</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span>\n</pre>\n<p>Now you can add, move and delete obj!</p>\n</div>\n<div id=\"insert-node\">\n<h2>Insert node</h2>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">Tree</span><span class=\"p\">(</span><span class=\"n\">parent_id</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</pre>\n<pre>level           Nested sets example\n1                    1(1)22\n        _______________|___________________\n       |               |                   |\n2    2(2)5           6(4)11             12(7)21\n       |               ^                   ^\n3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                      |          |\n4                                  14(9)15   18(11)19\n\nlevel     Insert node with parent_id == 6\n1                    1(1)24\n        _______________|_________________\n       |               |                 |\n2    2(2)5           6(4)13           14(7)23\n       |           ____|____          ___|____\n       |          |         |        |        |\n3    3(3)4      7(5)8    9(6)12  15(8)18   19(10)22\n                           |        |         |\n4                      10(23)11  16(9)17  20(11)21\n</pre>\n</div>\n<div id=\"delete-node\">\n<h2>Delete node</h2>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">()</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</pre>\n<pre>level           Nested sets example\n1                    1(1)22\n        _______________|___________________\n       |               |                   |\n2    2(2)5           6(4)11             12(7)21\n       |               ^                   ^\n3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                      |          |\n4                                  14(9)15   18(11)19\n\nlevel         Delete node == 4\n1                    1(1)16\n        _______________|_____\n       |                     |\n2    2(2)5                 6(7)15\n       |                     ^\n3    3(3)4            7(8)10   11(10)14\n                        |          |\n4                     8(9)9    12(11)13\n</pre>\n</div>\n<div id=\"update-node\">\n<h2>Update node</h2>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">()</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">parent_id</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n</pre>\n<pre>level           Nested sets example\n    1                    1(1)22\n            _______________|___________________\n           |               |                   |\n    2    2(2)5           6(4)11             12(7)21\n           |               ^                   ^\n    3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                          |          |\n    4                                  14(9)15   18(11)19\n\nlevel               Move 8 - &gt; 5\n    1                     1(1)22\n             _______________|__________________\n            |               |                  |\n    2     2(2)5           6(4)15            16(7)21\n            |               ^                  |\n    3     3(3)4      7(5)12   13(6)14      17(10)20\n                       |                        |\n    4                8(8)11                18(11)19\n                       |\n    5                9(9)10\n</pre>\n</div>\n<div id=\"move-node-support-multitree\">\n<h2>Move node (support multitree)</h2>\n<div>\n<img alt=\"Nested sets multitree\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70a84178990221502e6078c558a64e03cf715fab/68747470733a2f2f63646e2e7261776769742e636f6d2f7572616c626173682f73716c616c6368656d795f6d7074742f6d61737465722f646f63732f696d672f335f73716c616c6368656d795f6d7074745f6d756c7469747265652e737667\" width=\"600px\">\n<p>Nested sets multitree</p>\n</div>\n<p>Move inside</p>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">()</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">move_inside</span><span class=\"p\">(</span><span class=\"s2\">\"15\"</span><span class=\"p\">)</span>\n</pre>\n<pre>         4 -&gt; 15\nlevel           Nested sets tree1\n1                    1(1)16\n        _______________|_____________________\n       |                                     |\n2    2(2)5                                 6(7)15\n       |                                     ^\n3    3(3)4                            7(8)10   11(10)14\n                                        |          |\n4                                     8(9)9    12(11)13\n\nlevel           Nested sets tree2\n1                     1(12)28\n         ________________|_______________________\n        |                |                       |\n2    2(13)5            6(15)17                18(18)27\n       |                 ^                        ^\n3    3(14)4    7(4)12 13(16)14  15(17)16  19(19)22  23(21)26\n                 ^                            |         |\n4          8(5)9  10(6)11                 20(20)21  24(22)25\n</pre>\n<p>Move after</p>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">()</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">move_after</span><span class=\"p\">(</span><span class=\"s2\">\"5\"</span><span class=\"p\">)</span>\n</pre>\n<pre>level           Nested sets example\n     1                    1(1)22\n             _______________|___________________\n            |               |                   |\n     2    2(2)5           6(4)11             12(7)21\n            |               ^                   ^\n     3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                           |          |\n     4                                  14(9)15   18(11)19\n\n level               Move 8 after 5\n     1                     1(1)22\n              _______________|__________________\n             |               |                  |\n     2     2(2)5           6(4)15            16(7)21\n             |               ^                  |\n     3     3(3)4    7(5)8  9(8)12  13(6)14   17(10)20\n                             |                  |\n     4                    10(9)11            18(11)19\n</pre>\n<p>Move to top level</p>\n<pre><span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Tree</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"mi\">15</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">()</span>\n<span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">move_after</span><span class=\"p\">(</span><span class=\"s2\">\"1\"</span><span class=\"p\">)</span>\n</pre>\n<pre>level           tree_id = 1\n1                    1(1)22\n        _______________|___________________\n       |               |                   |\n2    2(2)5           6(4)11             12(7)21\n       |               ^                   ^\n3    3(3)4       7(5)8   9(6)10    13(8)16   17(10)20\n                                      |          |\n4                                  14(9)15   18(11)19\n\nlevel           tree_id = 2\n1                     1(15)6\n                         ^\n2                 2(16)3   4(17)5\n\nlevel           tree_id = 3\n1                    1(12)16\n         _______________|\n        |               |\n2    2(13)5          6(18)15\n        |               ^\n3    3(14)4     7(19)10   11(21)14\n                   |          |\n4               8(20)9    12(22)13\n</pre>\n<div id=\"support-and-development\">\n<h3>Support and Development</h3>\n<p>To report bugs, use the <a href=\"https://github.com/uralbash/sqlalchemy_mptt/issues\" rel=\"nofollow\">issue tracker</a>.</p>\n<p>We welcome any contribution: suggestions, ideas, commits with new\nfutures, bug fixes, refactoring, docs, tests, translations, etc\u2026</p>\n<p>If you have question, contact me <a href=\"mailto:sacrud%40uralbash.ru\">sacrud<span>@</span>uralbash<span>.</span>ru</a> or #sacrud IRC\nchannel <a href=\"https://webchat.freenode.net/?channels=sacrud\" rel=\"nofollow\"><img alt=\"IRC Freenode\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d83c2ad95625d7fc075d1f31afd8ca7b5431104/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6972632d667265656e6f64652d626c75652e737667\"></a></p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>The project is licensed under the MIT license.</p>\n</div>\n<div id=\"id1\">\n<h3>0.2.4 (2018-12-14)</h3>\n<p>see PR #61</p>\n<ul>\n<li>Allow to specify ordering of path_to_root</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.3 (2018-06-03)</h3>\n<p>see issue #57</p>\n<ul>\n<li>Fix rebuild tree</li>\n<li>Added support node\u2019s identifier start from 0</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.2.2 (2017-10-05)</h3>\n<p>see issue #56</p>\n<ul>\n<li>Added custom default root level. Support Django style level=0</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.2.1 (2016-01-23)</h3>\n<p>see PR #51</p>\n<ul>\n<li>fix of index columns names</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.2.0 (2015-11-13)</h3>\n<p>see PR #50</p>\n<ul>\n<li>Changed <tt>parent_id</tt> to dynamically match the type of the primary_key</li>\n<li>exposed drilldown_tree\u2019s logic and path_to_root\u2019s logic as both instance and\nclass level method</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4810413, "releases": {"0.2.4": [{"comment_text": "", "digests": {"md5": "0499e6b2d090ba40957bab771baf17f5", "sha256": "1b71aa827ee376d073f5bafab99f039b36eb0df7c301a750b5225c4a07cb21d6"}, "downloads": -1, "filename": "oy_libs_sqlalchemy_mptt-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0499e6b2d090ba40957bab771baf17f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12678, "upload_time": "2019-02-12T11:49:19", "upload_time_iso_8601": "2019-02-12T11:49:19.983743Z", "url": "https://files.pythonhosted.org/packages/7d/7b/b0bee5eb1cea9e8a8cddf065b76cd6003187c002ad22599c21fd4755b763/oy_libs_sqlalchemy_mptt-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97f451cfab4cb8bb4609dedab2f8eebd", "sha256": "2c924a695c87782a986b248a58e0dd27ff7f42b745d532ecfb9c4173f022c4c1"}, "downloads": -1, "filename": "oy-libs-sqlalchemy_mptt-0.2.4.tar.gz", "has_sig": false, "md5_digest": "97f451cfab4cb8bb4609dedab2f8eebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11869, "upload_time": "2019-02-12T12:02:47", "upload_time_iso_8601": "2019-02-12T12:02:47.769123Z", "url": "https://files.pythonhosted.org/packages/78/c3/2e5c18bb76c1977d7b7ae23d27039b04e12ab6accba3c8c2914ce6183cc6/oy-libs-sqlalchemy_mptt-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0499e6b2d090ba40957bab771baf17f5", "sha256": "1b71aa827ee376d073f5bafab99f039b36eb0df7c301a750b5225c4a07cb21d6"}, "downloads": -1, "filename": "oy_libs_sqlalchemy_mptt-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0499e6b2d090ba40957bab771baf17f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12678, "upload_time": "2019-02-12T11:49:19", "upload_time_iso_8601": "2019-02-12T11:49:19.983743Z", "url": "https://files.pythonhosted.org/packages/7d/7b/b0bee5eb1cea9e8a8cddf065b76cd6003187c002ad22599c21fd4755b763/oy_libs_sqlalchemy_mptt-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "97f451cfab4cb8bb4609dedab2f8eebd", "sha256": "2c924a695c87782a986b248a58e0dd27ff7f42b745d532ecfb9c4173f022c4c1"}, "downloads": -1, "filename": "oy-libs-sqlalchemy_mptt-0.2.4.tar.gz", "has_sig": false, "md5_digest": "97f451cfab4cb8bb4609dedab2f8eebd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11869, "upload_time": "2019-02-12T12:02:47", "upload_time_iso_8601": "2019-02-12T12:02:47.769123Z", "url": "https://files.pythonhosted.org/packages/78/c3/2e5c18bb76c1977d7b7ae23d27039b04e12ab6accba3c8c2914ce6183cc6/oy-libs-sqlalchemy_mptt-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:26 2020"}