{"info": {"author": "Yaowu Zhang", "author_email": "BiarFordlander@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Terminals"], "description": "Sheen:\n==========================\n\n**Pythonic** cross-platform colored terminal text **[support 16/256 colors]**\n> Let color be your _new dimension_ to integrate _more imagination_.\n\n<div align=center><img src=\"https://raw.githubusercontent.com/EchoShoot/Sheen/master/docs/Intro.gif\"></div>\n\nQuick Learn\n---\n> Come to try the code below, in your IDLE\n\n```{.sourceCode .python}\n>>> from sheen import Str\n>>>\n>>> Str.red('render font color with lowercase')\n>>> Str.RED('render background color with uppercase')\n>>> Str.Underline('render style with capital')\n>>> \n>>> Str.red.BLUE('joint rendering with dot')\n>>> Str.BLUE.red(\"yes! it's free, no order restrain\")\n>>> Str.cyan.LIGHTBLUE.Underline('esay to lean, ease to use')\n>>>\n>>> Str.red(\"You can use it like builtin 'str'\").split(' ')\n>>> text = Str.lightcyan.Twinkle(\"Let us integrate more imagination\")\n>>> text.replace('Let us', Str.lightred('pip install sheen, to'))\n>>> Str.LIGHTWHITE('@!$#!&*&simplify for human! i am sheen!#@$#%^&').title().strip('!@#$%^&*')\n```\n<p align=\"right\">Simple is better than complex. flat is better than nested. Readability counts. </br>-- excerpt from the zen of python</p>\n\n**Str Type Supported:**\n<table style=\"text-align: center; align: center;\">\n<thead><tr><td colspan=5 bgcolor=\"#c0c0c0\"><b>Str Type Supported Attribute Chain</b></td></tr></thead>\n<tr>\n\t<td rowspan=4 bgcolor=#f0f0f0>Font Color</td><td>black</td><td>red</td><td>green</td><td>yellow</td>\n</tr>\n<tr>\n\t<td>lightblack</td><td>lightred</td><td>lightgreen</td><td>lightyellow</td>\n</tr>\n<tr>\n\t<td>blue</td><td>magenta</td><td>cyan</td><td>white</td>\n</tr>\n<tr>\n    <td>lightblue</td><td>lightmagenta</td><td>lightcyan</td><td>lightwhite</td>\n</tr>\n<tr>\n\t<td rowspan=4 bgcolor=#f0f0f0>Background Color</td><td>BLACK</td><td>RED</td><td>GREEN</td><td>YELLOW</td>\n</tr>\n<tr>\n\t<td>BLUE</td><td>MAGENTA</td><td>CYAN</td><td>WHITE</td>\n</tr>\n<tr>\n\t<td>LIGHTBLACK</td><td>LIGHTRED</td><td>LIGHTGREEN</td><td>LIGHTYELLOW</td>\n</tr>\n<tr>\n\t<td>LIGHTBLUE</td><td>LIGHTMAGENTA</td><td>LIGHTCYAN</td><td>LIGHTWHITE</td>\n</tr>\n<tr>\n<td bgcolor=#f0f0f0>Style Type</td><td>Bold</td><td>Italic</td><td>Underline</td><td>Twinkle</td>\n</tr>\n</table>\n\n\nInstallation\n---\n> To install sheen, simply use pip:\n\n```{.sourceCode .bash}\n$ pip install sheen\n$ python -m sheen\n```\n\n**If it's successfully installed, it will be as shown below.**\n\n<div align=center><img src=\"https://raw.githubusercontent.com/EchoShoot/Sheen/master/docs/Tutor.gif\"></div>\n\n<p align=\"right\">It's a simple way to get tutorial, you don't need to come here every time\n<br>when you forget the usage of sheen</p>\n\nLearn More\n---\n###  How to display with 256 colors\n> Your can choose the color that your like with 'Color' type\n\n```{.sourceCode .python}\n>>> from sheen import Str, Color\n>>> Color.palette()  # Reference color code\n>>>\n>>> Color.rgb(222)('render font color with rgb')\n>>> Color.RGB(123)('render background color with RGB')\n>>> \n>>> Color.rgb([255,200,190])('render font color with rgb')\n>>> Color.RGB([150,120,250])('render background color with RGB')\n>>>\n>>> DIYcolor = Color.rgb(222) | Color.RGB(123) | Str.Underline\n>>> DIYcolor(\"It's my color style\")\n>>>\n>>> text = Str.Underline('Use slice to modification color')\n>>> text[:] = Color.rgb(222)\n>>> text[-3:-5] = Color.RGB(123)\n>>> text\n``` \n\n<div align=center><img src=\"https://raw.githubusercontent.com/EchoShoot/Sheen/master/docs/Paletee.png\"></div>\n\n<p align=\"right\"> It's said that 256 colors can be valid in the terminal<br>but maybe invalid in the IDE</p>\n\n### How to config Multicolored logging\n> Sheen has been build-in scheme, which can prints different colored logs based on log level:\n\n<div align=center><img src=\"https://raw.githubusercontent.com/EchoShoot/Sheen/master/docs/ColoredHandler.png\"></div>\n\n<p align=\"right\"> As you can see, sheen <b>only takes 5 lines</b> to complete\n<br> the configuration of the Multicolored logging</p>\n\n> You can design 'Formatter', to get color scheme which belong to yourself\n\n```python\nimport logging\nfrom sheen import Str, ColoredHandler\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n\nhandle = ColoredHandler()\nhandle.setFormatter({\n    logging.DEBUG: logging.Formatter(fmt=str(Str.blue('%(asctime)s - %(levelname)s | %(message)s')), datefmt='%Y-%m-%d'),\n    logging.INFO: Str.magenta('%(asctime)s - %(levelname)s | %(message)s'),\n})\nlogger.addHandler(handle)\n\nlogger.debug('debug')\nlogger.info('info')\nlogger.warning('warning')\nlogger.error('error')\nlogger.critical('critical')\n```\n<p align=\"right\"> Take it easy, it will be use after rendered as 'str' type \n<br> <b>without affecting the logging output speed</b> <p>\n\n### How to get the best performance\n> Sheen was born for convenience, when you want the fastest, there is a way.\n\n```{.sourceCode .python}\n>>> from sheen import Str, Color\n>>> str(Str.cyan.BLUE('... content ...'))\n'\\x1b[36;44m... content ...\\x1b[0m'\n>>>\n``` \n\n<div align=center><img src=\"https://raw.githubusercontent.com/EchoShoot/Sheen/master/docs/BestPerformance.png\"></div>\n\n<p align='right'> Don't forget to 'import sheen', It's necessary on windows.\n<br> -- Windows 10 is default closed <i>ANSI Escape Code<i> </p>\n\nFAQ\n---\n- :speech_balloon: Why not support python2.7\n    > Python 2.7 will retire in 2020 https://pythonclock.org/, \n    > Many libraries already or will to give up compatibility 2.7, \n    > such as NumPy, Pandas, Ipython, Matplotlib ... \n- :speech_balloon:  Why not support version below Windows 10\n    > Windows support _ANSI Escape Code_ start with win10, \n    > this gives the possibility to use ANSI to display colors for sheen.\n    > the version below Windows 10 will retire in future, just like python2.7\n- :speech_balloon:  How to get the best running performance\n    > Render to _ANSI Escape Code_, and then copy it into your code, no faster than this.\n    > but in most cases you needn't to do this\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EchoShoot/Sheen", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sheen", "package_url": "https://pypi.org/project/sheen/", "platform": "", "project_url": "https://pypi.org/project/sheen/", "project_urls": {"Homepage": "https://github.com/EchoShoot/Sheen"}, "release_url": "https://pypi.org/project/sheen/0.1.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Pythonic cross-platform colored terminal text [support 16/256 colors]", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sheen:</h1>\n<p><strong>Pythonic</strong> cross-platform colored terminal text <strong>[support 16/256 colors]</strong></p>\n<blockquote>\n<p>Let color be your <em>new dimension</em> to integrate <em>more imagination</em>.</p>\n</blockquote>\n<div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69413678428fcaaa597295f72163fed17e1ea53e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4563686f53686f6f742f536865656e2f6d61737465722f646f63732f496e74726f2e676966\"></div>\n<h2>Quick Learn</h2>\n<blockquote>\n<p>Come to try the code below, in your IDLE</p>\n</blockquote>\n<pre>&gt;&gt;&gt; from sheen import Str\n&gt;&gt;&gt;\n&gt;&gt;&gt; Str.red('render font color with lowercase')\n&gt;&gt;&gt; Str.RED('render background color with uppercase')\n&gt;&gt;&gt; Str.Underline('render style with capital')\n&gt;&gt;&gt; \n&gt;&gt;&gt; Str.red.BLUE('joint rendering with dot')\n&gt;&gt;&gt; Str.BLUE.red(\"yes! it's free, no order restrain\")\n&gt;&gt;&gt; Str.cyan.LIGHTBLUE.Underline('esay to lean, ease to use')\n&gt;&gt;&gt;\n&gt;&gt;&gt; Str.red(\"You can use it like builtin 'str'\").split(' ')\n&gt;&gt;&gt; text = Str.lightcyan.Twinkle(\"Let us integrate more imagination\")\n&gt;&gt;&gt; text.replace('Let us', Str.lightred('pip install sheen, to'))\n&gt;&gt;&gt; Str.LIGHTWHITE('@!$#!&amp;*&amp;simplify for human! i am sheen!#@$#%^&amp;').title().strip('!@#$%^&amp;*')\n</pre>\n<p align=\"right\">Simple is better than complex. flat is better than nested. Readability counts. <br>-- excerpt from the zen of python</p>\n<p><strong>Str Type Supported:</strong></p>\n<table>\n<thead><tr><td><b>Str Type Supported Attribute Chain</b></td></tr></thead>\n<tr>\n\t<td>Font Color</td><td>black</td><td>red</td><td>green</td><td>yellow</td>\n</tr>\n<tr>\n\t<td>lightblack</td><td>lightred</td><td>lightgreen</td><td>lightyellow</td>\n</tr>\n<tr>\n\t<td>blue</td><td>magenta</td><td>cyan</td><td>white</td>\n</tr>\n<tr>\n    <td>lightblue</td><td>lightmagenta</td><td>lightcyan</td><td>lightwhite</td>\n</tr>\n<tr>\n\t<td>Background Color</td><td>BLACK</td><td>RED</td><td>GREEN</td><td>YELLOW</td>\n</tr>\n<tr>\n\t<td>BLUE</td><td>MAGENTA</td><td>CYAN</td><td>WHITE</td>\n</tr>\n<tr>\n\t<td>LIGHTBLACK</td><td>LIGHTRED</td><td>LIGHTGREEN</td><td>LIGHTYELLOW</td>\n</tr>\n<tr>\n\t<td>LIGHTBLUE</td><td>LIGHTMAGENTA</td><td>LIGHTCYAN</td><td>LIGHTWHITE</td>\n</tr>\n<tr>\n<td>Style Type</td><td>Bold</td><td>Italic</td><td>Underline</td><td>Twinkle</td>\n</tr>\n</table>\n<h2>Installation</h2>\n<blockquote>\n<p>To install sheen, simply use pip:</p>\n</blockquote>\n<pre>$ pip install sheen\n$ python -m sheen\n</pre>\n<p><strong>If it's successfully installed, it will be as shown below.</strong></p>\n<div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/801fd1f8154d101a9be02124582cf119001697e7/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4563686f53686f6f742f536865656e2f6d61737465722f646f63732f5475746f722e676966\"></div>\n<p align=\"right\">It's a simple way to get tutorial, you don't need to come here every time\n<br>when you forget the usage of sheen</p>\n<h2>Learn More</h2>\n<h3>How to display with 256 colors</h3>\n<blockquote>\n<p>Your can choose the color that your like with 'Color' type</p>\n</blockquote>\n<pre>&gt;&gt;&gt; from sheen import Str, Color\n&gt;&gt;&gt; Color.palette()  # Reference color code\n&gt;&gt;&gt;\n&gt;&gt;&gt; Color.rgb(222)('render font color with rgb')\n&gt;&gt;&gt; Color.RGB(123)('render background color with RGB')\n&gt;&gt;&gt; \n&gt;&gt;&gt; Color.rgb([255,200,190])('render font color with rgb')\n&gt;&gt;&gt; Color.RGB([150,120,250])('render background color with RGB')\n&gt;&gt;&gt;\n&gt;&gt;&gt; DIYcolor = Color.rgb(222) | Color.RGB(123) | Str.Underline\n&gt;&gt;&gt; DIYcolor(\"It's my color style\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; text = Str.Underline('Use slice to modification color')\n&gt;&gt;&gt; text[:] = Color.rgb(222)\n&gt;&gt;&gt; text[-3:-5] = Color.RGB(123)\n&gt;&gt;&gt; text\n</pre>\n<div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bddd12f88577d50a0c4cb3d7b0bd41ebc46dead0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4563686f53686f6f742f536865656e2f6d61737465722f646f63732f50616c657465652e706e67\"></div>\n<p align=\"right\"> It's said that 256 colors can be valid in the terminal<br>but maybe invalid in the IDE</p>\n<h3>How to config Multicolored logging</h3>\n<blockquote>\n<p>Sheen has been build-in scheme, which can prints different colored logs based on log level:</p>\n</blockquote>\n<div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b078fc0d629b79150cb79e8e64ece0ec63502c51/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4563686f53686f6f742f536865656e2f6d61737465722f646f63732f436f6c6f72656448616e646c65722e706e67\"></div>\n<p align=\"right\"> As you can see, sheen <b>only takes 5 lines</b> to complete\n<br> the configuration of the Multicolored logging</p>\n<blockquote>\n<p>You can design 'Formatter', to get color scheme which belong to yourself</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sheen</span> <span class=\"kn\">import</span> <span class=\"n\">Str</span><span class=\"p\">,</span> <span class=\"n\">ColoredHandler</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">ColoredHandler</span><span class=\"p\">()</span>\n<span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">({</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Formatter</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> | </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">)),</span> <span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">'</span><span class=\"p\">),</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">:</span> <span class=\"n\">Str</span><span class=\"o\">.</span><span class=\"n\">magenta</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> | </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span><span class=\"p\">),</span>\n<span class=\"p\">})</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'debug'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'info'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"s1\">'warning'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s1\">'critical'</span><span class=\"p\">)</span>\n</pre>\n<p align=\"right\"> Take it easy, it will be use after rendered as 'str' type \n<br> <b>without affecting the logging output speed</b> </p><p>\n</p><h3>How to get the best performance</h3>\n<blockquote>\n<p>Sheen was born for convenience, when you want the fastest, there is a way.</p>\n</blockquote>\n<pre>&gt;&gt;&gt; from sheen import Str, Color\n&gt;&gt;&gt; str(Str.cyan.BLUE('... content ...'))\n'\\x1b[36;44m... content ...\\x1b[0m'\n&gt;&gt;&gt;\n</pre>\n<div><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/513f8bd8c7ff80ebe86fc1dbddd050ec3ff72647/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4563686f53686f6f742f536865656e2f6d61737465722f646f63732f42657374506572666f726d616e63652e706e67\"></div>\n<p align=\"right\"> Don't forget to 'import sheen', It's necessary on windows.\n<br> -- Windows 10 is default closed <i>ANSI Escape Code<i> </i></i></p><i><i>\n<h2>FAQ</h2>\n<ul>\n<li>:speech_balloon: Why not support python2.7\n<blockquote>\n<p>Python 2.7 will retire in 2020 <a href=\"https://pythonclock.org/\" rel=\"nofollow\">https://pythonclock.org/</a>,\nMany libraries already or will to give up compatibility 2.7,\nsuch as NumPy, Pandas, Ipython, Matplotlib ...</p>\n</blockquote>\n</li>\n<li>:speech_balloon:  Why not support version below Windows 10\n<blockquote>\n<p>Windows support <em>ANSI Escape Code</em> start with win10,\nthis gives the possibility to use ANSI to display colors for sheen.\nthe version below Windows 10 will retire in future, just like python2.7</p>\n</blockquote>\n</li>\n<li>:speech_balloon:  How to get the best running performance\n<blockquote>\n<p>Render to <em>ANSI Escape Code</em>, and then copy it into your code, no faster than this.\nbut in most cases you needn't to do this</p>\n</blockquote>\n</li>\n</ul>\n</i></i>\n          </div>"}, "last_serial": 6638709, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "455a9de8a896749ddec5f831afa40c35", "sha256": "3cad9c61f70f0b783293b01cd02e88a008ee729c288b071f4beb78ce42ea05d0"}, "downloads": -1, "filename": "sheen-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "455a9de8a896749ddec5f831afa40c35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11851, "upload_time": "2019-09-23T05:39:21", "upload_time_iso_8601": "2019-09-23T05:39:21.064013Z", "url": "https://files.pythonhosted.org/packages/34/b0/da2c71ec34e1c5a1820ce5f17793c4a8481a93a5d40780a3499219f7c83a/sheen-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13d3aa5cc8637c8be237b80b30ea1eb7", "sha256": "0b18fb13a35c9d229c74c70720145d29aa8a312322d552a72a3db37ae48c75cc"}, "downloads": -1, "filename": "sheen-0.0.1.tar.gz", "has_sig": false, "md5_digest": "13d3aa5cc8637c8be237b80b30ea1eb7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12859, "upload_time": "2019-09-23T05:39:24", "upload_time_iso_8601": "2019-09-23T05:39:24.965728Z", "url": "https://files.pythonhosted.org/packages/13/1c/0b4ba0d2c94fd1924ec3b969d4d3f1d8af673c96c29d567c333c6fd5d47b/sheen-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "caa827ca9c5d7b9d373797b03cbe7681", "sha256": "9276742e86ddb9ddd29c2c8987f5457e0b463cf7c68a3bf6cc5ee6bbf7112ef9"}, "downloads": -1, "filename": "sheen-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "caa827ca9c5d7b9d373797b03cbe7681", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 11992, "upload_time": "2019-09-24T12:02:14", "upload_time_iso_8601": "2019-09-24T12:02:14.431035Z", "url": "https://files.pythonhosted.org/packages/8e/4f/5f80a5935d91158ca28064d2536557a7baee78f3742cb87e29a275a75195/sheen-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf22272d8b8c6fc492670b51826aee2c", "sha256": "8ad865adb5bacd17a506f5e42df19392bd89adac495858325b6241deb37c0ae7"}, "downloads": -1, "filename": "sheen-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cf22272d8b8c6fc492670b51826aee2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13153, "upload_time": "2019-09-24T12:02:17", "upload_time_iso_8601": "2019-09-24T12:02:17.123356Z", "url": "https://files.pythonhosted.org/packages/77/9d/a328e42a01857b3c856c4f206c2de4d72ada27bdb2c33baf61067d173862/sheen-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "cb6d3f15df68b45d4f1e5947782e0a50", "sha256": "37dfc7864851c345eb9a9df7ff77875feeea9912dd091ba5b0e90e0433ed0e33"}, "downloads": -1, "filename": "sheen-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cb6d3f15df68b45d4f1e5947782e0a50", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12598, "upload_time": "2019-10-09T06:33:23", "upload_time_iso_8601": "2019-10-09T06:33:23.430872Z", "url": "https://files.pythonhosted.org/packages/7b/78/36c4d1451d6de640f6907dca5d3a389a7e55bbbf18c9c4a44098f53aa051/sheen-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1676cee49f66b3c59b10a932c8a208d5", "sha256": "3222615ba74f51e2f04bd344aa1bd122e97ec561cd2d52ff4a6184c04aafa743"}, "downloads": -1, "filename": "sheen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1676cee49f66b3c59b10a932c8a208d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13759, "upload_time": "2019-10-09T06:33:25", "upload_time_iso_8601": "2019-10-09T06:33:25.490786Z", "url": "https://files.pythonhosted.org/packages/76/63/90a2a4d0097a9524a36542fdfb3996312d1fc7d30851ffdfa8780458b216/sheen-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "cb0563fe63efd1962957ecd6d60a466f", "sha256": "4b24179c71c26fb4036afffa11c72719c927d307ac0b284a0d62eb4e828c1e51"}, "downloads": -1, "filename": "sheen-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cb0563fe63efd1962957ecd6d60a466f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13018, "upload_time": "2020-02-16T04:12:43", "upload_time_iso_8601": "2020-02-16T04:12:43.077556Z", "url": "https://files.pythonhosted.org/packages/bf/1e/2a7df403ba237be17eeab327f71baa32c2beffe0cec6416835a0274450b6/sheen-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b5ee8ef0d1e9b28bb3aa4d4b45b29a0", "sha256": "bf06acc95d9c8ec72b9a2cbac48b14dcd40c2688aaf981a582a9b59804fcfed2"}, "downloads": -1, "filename": "sheen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8b5ee8ef0d1e9b28bb3aa4d4b45b29a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14147, "upload_time": "2020-02-16T04:12:45", "upload_time_iso_8601": "2020-02-16T04:12:45.039288Z", "url": "https://files.pythonhosted.org/packages/74/37/9d73f77aa6e4e492a0d1279011822fb8a6941aa69ab4fcf79ae1f7415168/sheen-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cb0563fe63efd1962957ecd6d60a466f", "sha256": "4b24179c71c26fb4036afffa11c72719c927d307ac0b284a0d62eb4e828c1e51"}, "downloads": -1, "filename": "sheen-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cb0563fe63efd1962957ecd6d60a466f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13018, "upload_time": "2020-02-16T04:12:43", "upload_time_iso_8601": "2020-02-16T04:12:43.077556Z", "url": "https://files.pythonhosted.org/packages/bf/1e/2a7df403ba237be17eeab327f71baa32c2beffe0cec6416835a0274450b6/sheen-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b5ee8ef0d1e9b28bb3aa4d4b45b29a0", "sha256": "bf06acc95d9c8ec72b9a2cbac48b14dcd40c2688aaf981a582a9b59804fcfed2"}, "downloads": -1, "filename": "sheen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8b5ee8ef0d1e9b28bb3aa4d4b45b29a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14147, "upload_time": "2020-02-16T04:12:45", "upload_time_iso_8601": "2020-02-16T04:12:45.039288Z", "url": "https://files.pythonhosted.org/packages/74/37/9d73f77aa6e4e492a0d1279011822fb8a6941aa69ab4fcf79ae1f7415168/sheen-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:31 2020"}