{"info": {"author": "Shusaku Miwa", "author_email": "shusakumiwa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python"], "description": "# pipe-subprocess\n' Connects input/ouput streams between multiple subprocesses easily just like shell pipe.\n' Provides almost the same interface as python subprocess module with some exceptions.\n\n## Install\n```shell\npip3 install pipe-subprocess\n```\n\n## Quick how to\nJust pass commands to run function.\n\n```python\n>>> import pipesubprocess as pipesub\n>>> result = pipesub.run([\"ls /usr/bin/\", \"grep py\", \"head -2\"], stdout=pipesub.PIPE)\n>>> print(result.stdout)\npbcopy\npydoc\n\n# Commands can be written just as *args.\n\n```python\n>>> result = pipesub.run(\"ls /usr/bin/\", \"grep py\", \"head -2\")\n>>> print(result.stdout)\npbcopy\npydoc\n```\n\n# run() quick glance.\nUse *run()* function to run multiple piped subprocesses. In more complecated case, use pipesubporcess.Popen.\n\n```python\ndef run(*cmdlist, shlex=True, stdin=None, input=None, stdout=None, stderr=None, capture_output=True, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=True, env=None, universal_newlines=None)\n```\n\n* It runs multiple process specified in *cmdlist* and connects stdout and stdin in the order of *cmdlist*.\n* It returns *CompletedProcess()*\n* *input* is written to stdin of the first command.\n* When *timeout* ([second] in float) is specified, it raises *pipesubprocess.TimeoutExpired()* when commands takes longer than that timeout.\n* If *check=True*, it raises *pipesubprocess.CalledProcessError()* when there is a command with exit code not zero.\n' See [README_details.md] for other options.\n\n\n## class pipesubprocess.PipeSubprocessError\nAll exceptions of pipesubprocess module inherits this exception. So all exceptions of thie module can be catched by this exception.\n\n## class pipesubprocess.PopenArgs\n* It represents the arguments of one process passed to *subproces.Popen().\n* *name*\n    * name of the argument. The first args by default.\n* See [README_details.md] for other attributes.\n\n## class pipesubprocess.CompletedProcess\n* The return value from *run()*, representing the finish status of processes.\n* *popen_args_list*\n    * List of PopenArgs instance.\n* *returncodes*\n    * List of return codes. None if all commands have not finished yet.\n* *stdout*\n    * stdout of the last command.\n, *stderr*\n    * gathred stderr of all the commands.\n* *check_returncodes()*\n    * raises *pipesubprocess.CalledProcessError()* when *returncodes* have any non-zero status.\n\n## class pipesubprocess.TimeoutExpired\n* *popen_args*\n    * List of PopenArgs instance.\n* *timeout*\n    * timeout value specified.\n* *stdout*\n    * stdout of the last command.\n* *stderr*\n    * gathred stderr of all the commands.\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ssk38/pipesubprocess", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pipe-subprocess", "package_url": "https://pypi.org/project/pipe-subprocess/", "platform": "", "project_url": "https://pypi.org/project/pipe-subprocess/", "project_urls": {"Homepage": "https://github.com/ssk38/pipesubprocess"}, "release_url": "https://pypi.org/project/pipe-subprocess/0.3.7/", "requires_dist": null, "requires_python": "", "summary": "Connects subprocesses as pipe easily", "version": "0.3.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pipe-subprocess</h1>\n<p>' Connects input/ouput streams between multiple subprocesses easily just like shell pipe.\n' Provides almost the same interface as python subprocess module with some exceptions.</p>\n<h2>Install</h2>\n<pre>pip3 install pipe-subprocess\n</pre>\n<h2>Quick how to</h2>\n<p>Just pass commands to run function.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pipesubprocess</span> <span class=\"k\">as</span> <span class=\"nn\">pipesub</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">pipesub</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s2\">\"ls /usr/bin/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"grep py\"</span><span class=\"p\">,</span> <span class=\"s2\">\"head -2\"</span><span class=\"p\">],</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">pipesub</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"n\">pbcopy</span>\n<span class=\"n\">pydoc</span>\n\n<span class=\"c1\"># Commands can be written just as *args.</span>\n\n<span class=\"err\">```</span><span class=\"n\">python</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">pipesub</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">\"ls /usr/bin/\"</span><span class=\"p\">,</span> <span class=\"s2\">\"grep py\"</span><span class=\"p\">,</span> <span class=\"s2\">\"head -2\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"n\">pbcopy</span>\n<span class=\"n\">pydoc</span>\n</pre>\n<h1>run() quick glance.</h1>\n<p>Use <em>run()</em> function to run multiple piped subprocesses. In more complecated case, use pipesubporcess.Popen.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">cmdlist</span><span class=\"p\">,</span> <span class=\"n\">shlex</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">capture_output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">universal_newlines</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>It runs multiple process specified in <em>cmdlist</em> and connects stdout and stdin in the order of <em>cmdlist</em>.</li>\n<li>It returns <em>CompletedProcess()</em></li>\n<li><em>input</em> is written to stdin of the first command.</li>\n<li>When <em>timeout</em> ([second] in float) is specified, it raises <em>pipesubprocess.TimeoutExpired()</em> when commands takes longer than that timeout.</li>\n<li>If <em>check=True</em>, it raises <em>pipesubprocess.CalledProcessError()</em> when there is a command with exit code not zero.\n' See [README_details.md] for other options.</li>\n</ul>\n<h2>class pipesubprocess.PipeSubprocessError</h2>\n<p>All exceptions of pipesubprocess module inherits this exception. So all exceptions of thie module can be catched by this exception.</p>\n<h2>class pipesubprocess.PopenArgs</h2>\n<ul>\n<li>It represents the arguments of one process passed to *subproces.Popen().</li>\n<li><em>name</em>\n<ul>\n<li>name of the argument. The first args by default.</li>\n</ul>\n</li>\n<li>See [README_details.md] for other attributes.</li>\n</ul>\n<h2>class pipesubprocess.CompletedProcess</h2>\n<ul>\n<li>The return value from <em>run()</em>, representing the finish status of processes.</li>\n<li><em>popen_args_list</em>\n<ul>\n<li>List of PopenArgs instance.</li>\n</ul>\n</li>\n<li><em>returncodes</em>\n<ul>\n<li>List of return codes. None if all commands have not finished yet.</li>\n</ul>\n</li>\n<li><em>stdout</em>\n<ul>\n<li>stdout of the last command.\n, <em>stderr</em></li>\n<li>gathred stderr of all the commands.</li>\n</ul>\n</li>\n<li><em>check_returncodes()</em>\n<ul>\n<li>raises <em>pipesubprocess.CalledProcessError()</em> when <em>returncodes</em> have any non-zero status.</li>\n</ul>\n</li>\n</ul>\n<h2>class pipesubprocess.TimeoutExpired</h2>\n<ul>\n<li><em>popen_args</em>\n<ul>\n<li>List of PopenArgs instance.</li>\n</ul>\n</li>\n<li><em>timeout</em>\n<ul>\n<li>timeout value specified.</li>\n</ul>\n</li>\n<li><em>stdout</em>\n<ul>\n<li>stdout of the last command.</li>\n</ul>\n</li>\n<li><em>stderr</em>\n<ul>\n<li>gathred stderr of all the commands.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6262738, "releases": {"0.3.6": [{"comment_text": "", "digests": {"md5": "0a9747c96b498be89049bb4304c38496", "sha256": "39c48012d307cc8cc4c0505f8643c533b49dca2fbd9fbd9036e8816b5ad45741"}, "downloads": -1, "filename": "pipe_subprocess-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "0a9747c96b498be89049bb4304c38496", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12379, "upload_time": "2019-12-08T17:03:51", "upload_time_iso_8601": "2019-12-08T17:03:51.988849Z", "url": "https://files.pythonhosted.org/packages/33/6d/3a7db75901e9da2ffaff856df4921174557983dcb74f281bff0f44dde523/pipe_subprocess-0.3.6-py3-none-any.whl", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "1196b1ae124ce5e4fbbaed90ab51bdea", "sha256": "3a626db1459578b8e31f3c3a46c117e14199a11ce7ac49461efa4ca7aaeaecb0"}, "downloads": -1, "filename": "pipe_subprocess-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1196b1ae124ce5e4fbbaed90ab51bdea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12400, "upload_time": "2019-12-08T17:10:34", "upload_time_iso_8601": "2019-12-08T17:10:34.131105Z", "url": "https://files.pythonhosted.org/packages/b0/77/682a0160106f00c5de35bb0758ffb249f92ebbb1d7f2231f3c3be010f4c6/pipe_subprocess-0.3.7-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1196b1ae124ce5e4fbbaed90ab51bdea", "sha256": "3a626db1459578b8e31f3c3a46c117e14199a11ce7ac49461efa4ca7aaeaecb0"}, "downloads": -1, "filename": "pipe_subprocess-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1196b1ae124ce5e4fbbaed90ab51bdea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12400, "upload_time": "2019-12-08T17:10:34", "upload_time_iso_8601": "2019-12-08T17:10:34.131105Z", "url": "https://files.pythonhosted.org/packages/b0/77/682a0160106f00c5de35bb0758ffb249f92ebbb1d7f2231f3c3be010f4c6/pipe_subprocess-0.3.7-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:15 2020"}