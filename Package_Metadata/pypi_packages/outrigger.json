{"info": {"author": "Olga Botvinnik", "author_email": "olga.botvinnik@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": ".. -*- mode: rst -*-\n\n|OutriggerLogo|\n\n|BuildStatus|\\ |codecov|\\ |PyPIVersions|\\ |PythonVersionCompatibility|\n\n.. |OutriggerLogo| image:: https://raw.githubusercontent.com/YeoLab/outrigger/master/logo/logo-1x.png\n    :target: https://github.com/YeoLab/outrigger\n.. |BuildStatus| image:: https://travis-ci.org/YeoLab/outrigger.svg?branch=master\n    :target: https://travis-ci.org/YeoLab/outrigger\n.. |codecov| image:: https://codecov.io/gh/YeoLab/outrigger/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/YeoLab/outrigger\n.. |PyPIVersions| image:: https://img.shields.io/pypi/v/outrigger.svg\n    :target: https://pypi.python.org/pypi/outrigger\n.. |PythonVersionCompatibility| image:: https://img.shields.io/pypi/pyversions/outrigger.svg\n    :target: https://pypi.python.org/pypi/outrigger\n\n=============================================================================\nLarge-scale detection and calculation of alternative splicing with Outrigger_\n=============================================================================\n\nOutrigger_ is a program which uses junction reads from RNA seq data, and\na graph database to create a *de novo* alternative splicing annotation\nwith a graph database, and quantify percent spliced-in (Psi) of the\nevents.\n\n-  Free software: BSD license\n-  Documentation is available here: http://yeolab.github.io/outrigger/\n\nFeatures\n========\n\n-  Finds novel splicing events, including novel exons!\n   (``outrigger index``) from ``.bam`` files\n-  (optional) Validates that exons have correct splice sites, e.g. GT/AG\n   and AT/AC for mammalian systems (``outrigger validate``)\n-  Calculate \"percent spliced-in\" (Psi/\u03a8) scores for all your samples\n   given the validated events (or the original events if you opted not\n   to validate) via ``outrigger psi``\n\n|OutriggerOverview|\n\n.. |OutriggerOverview| image:: https://raw.githubusercontent.com/YeoLab/outrigger/master/docs/_static/outrigger_overview-300ppi.png\n    :target: https://raw.githubusercontent.com/YeoLab/outrigger/master/docs/_static/outrigger_overview-300ppi.png\n\nInstallation\n============\n\nTo install ``outrigger``, we recommend using the `Anaconda Python\nDistribution <http://anaconda.org/>`__ and creating an environment.\n\nYou'll want to add the `bioconda <https://bioconda.github.io/>`__\nchannel to make installing `bedtools <bedtools.readthedocs.io>`__ and\nits Python wrapper, `pybedtools <https://daler.github.io/pybedtools/>`__\neasy (these programs are necessary for both ``outrigger index`` and\n``outrigger validate``).\n\n::\n\n    conda config --add channels r\n    conda config --add channels bioconda\n\nCreate an environment called ``outrigger-env``. Python 2.7, Python 3.4, Python 3.5, and Python 3.6 are supported.\n\n::\n\n    conda create --name outrigger-env outrigger\n\nNow activate that environment:\n\n::\n\n    source activate outrigger-env\n\nTo check that it installed properly, try the command with the help\noption (``-h``), ``outrigger -h``. The output should look like this:\n\n::\n\n    $ outrigger -h\n    usage: outrigger [-h] [--version] {index,validate,psi} ...\n\n    outrigger (1.0.0dev). Calculate \"percent-spliced in\" (Psi) scores of\n    alternative splicing on a *de novo*, custom-built splicing index -- just for\n    you!\n\n    positional arguments:\n      {index,validate,psi}  Sub-commands\n        index               Build an index of splicing events using a graph\n                            database on your junction reads and an annotation\n        validate            Ensure that the splicing events found all have the\n                            correct splice sites\n        psi                 Calculate \"percent spliced-in\" (Psi) values using the\n                            splicing event index built with \"outrigger index\"\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --version             show program's version number and exit\n\nBleeding edge code from Github (here)\n-------------------------------------\n\nFor advanced users, if you have `git <https://git-scm.com/>`__ and\n`Anaconda Python <https://www.continuum.io/downloads>`__ installed, you\ncan:\n\n#. Clone this repository\n#. Change into that directory\n#. Create an environment named ``outrigger-env`` with the necessary packages\n   from Anaconda and the Python Package Index (PyPI).\n#. Activate the environment\n\nThese steps are shown in code below.\n\n::\n\n    git clone https://github.com/YeoLab/outrigger.git\n    cd outrigger\n    conda env create --file environment.yml\n    source activate outrigger-env\n\nQuick start\n===========\n\nIf you just want to know how to run this on your data with the default\nparameters, start here. Let's say you performed your alignment in the\nfolder called ``~/projects/tasic2016/analysis/tasic2016_v1``, and that's\nwhere your ``SJ.out.tab`` files from the STAR aligner are (they're\noutput into the same folder as the ``.bam`` files). First you'll need to\nchange directories to that folder with ``cd``.\n\n::\n\n    cd ~/projects/tasic2016/analysis/tasic2016_v1\n\nThen you need find all alternative splicing events, which you do by\nrunning ``outrigger index`` on the splice junction files and the gtf.\nHere is an example command:\n\nInput: ``.SJ.out.tab`` files\n----------------------------\n\n::\n\n    outrigger index --sj-out-tab *SJ.out.tab \\\n        --gtf /projects/ps-yeolab/genomes/mm10/gencode/m10/gencode.vM10.annotation.gtf\n\nInput: ``.bam`` files\n---------------------\n\nIf you're using ``.bam`` files instead of ``SJ.out.tab`` files, never despair!\nBelow is an example command. Keep in mind that for this program to work, the\nevents must be sorted and indexed.\n\n::\n\n    outrigger index --bam *sorted.bam \\\n        --gtf /projects/ps-yeolab/genomes/mm10/gencode/m10/gencode.vM10.annotation.gtf\n\nNext, you'll want to validate that the splicing events you found follow\nbiological rules, such as being containing GT/AG (mammalian major\nspliceosome) or AT/AC (mammalian minor splicesome) sequences. To do\nthat, you'll need to provide the genome name (e.g. ``mm10``) and the\ngenome sequences. An example command is below:\n\n::\n\n    outrigger validate --genome mm10 \\\n        --fasta /projects/ps-yeolab/genomes/mm10/GRCm38.primary_assembly.genome.fa\n\nFinally, you can calculate percent spliced in (Psi) of your splicing\nevents! Thankfully this is very easy:\n\n::\n\n    outrigger psi\n\nIt should be noted that ALL of these commands should be performed in the\nsame directory, so no moving.\n\nQuick start summary\n-------------------\n\nHere is a summary the commands in the order you would use them for\noutrigger!\n\n::\n\n    cd ~/projects/tasic2016/analysis/tasic2016_v1\n    outrigger index --sj-out-tab *SJ.out.tab \\\n        --gtf /projects/ps-yeolab/genomes/mm10/gencode/m10/gencode.vM10.annotation.gtf\n    outrigger validate --genome mm10 \\\n        --fasta /projects/ps-yeolab/genomes/mm10/GRCm38.primary_assembly.genome.fa\n    outrigger psi\n\nThis will create a folder called ``outrigger_output``, which at the end\nshould look like the one below. Each file and folder is annotated with which command\nproduced it.\n\n::\n\n    $ tree outrigger_output\n    outrigger_output..........................................................index\n    \u251c\u2500\u2500 index.................................................................index\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 gtf...............................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gencode.vM10.annotation.gtf...................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gencode.vM10.annotation.gtf.db................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 novel_exons.gtf...............................................index\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon_direction_junction_triples.csv...............................index\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 mxe...............................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 event.bed.....................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 events.csv....................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon1.bed.....................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon2.bed.....................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon3.bed.....................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon4.bed.....................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 intron.bed....................................................index\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 splice_sites.csv...........................................validate\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 validated..................................................validate\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 events.csv.............................................validate\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 se................................................................index\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 event.bed.....................................................index\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 events.csv....................................................index\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 exon1.bed.....................................................index\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 exon2.bed.....................................................index\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 exon3.bed.....................................................index\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 intron.bed....................................................index\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 splice_sites.csv...........................................validate\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 validated..................................................validate\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 events.csv.............................................validate\n    \u251c\u2500\u2500 junctions.............................................................index\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.csv......................................................index\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 reads.csv.........................................................index\n    \u2514\u2500\u2500 psi.....................................................................psi\n        \u251c\u2500\u2500 mxe.................................................................psi\n        |   \u251c\u2500\u2500 psi.csv.........................................................psi\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 summary.csv.....................................................psi\n        \u251c\u2500\u2500 outrigger_psi.csv...................................................psi\n        \u2514\u2500\u2500 se..................................................................psi\n            \u251c\u2500\u2500 psi.csv.........................................................psi\n            \u2514\u2500\u2500 summary.csv.....................................................psi\n\n    10 directories, 26 files\n\n\n.. _Outrigger: https://github.com/YeoLab/outrigger\n\n\n\n\nHistory\n=======\n\nv1.1.0 (June 28th, 2017)\n------------------------\n\nThis is a minor release to ```outrigger``.\n\nBug fixes\n~~~~~~~~~\n\n- Fixed `UNIQUE ID` error that happened somewhat stochastically when adding new exons to the database\n\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n- Explicitly added Python 3.6 compatibility\n- Change logo location to `logo/` instead of `logo/v1` since there's only one\n  version anyway...\n\n\nv1.0.0 (April 3rd, 2017)\n------------------------\n\nThis is the first major release of ``outrigger``!!!\n\nv1.0.0 New features\n~~~~~~~~~~~~~~~~~~~\n\n- Parallelized event across chromosomes\n- Added ``--low-memory`` flag for ``index``, ``validate``, and ``psi`` commands\n  to use a smaller memory footprint when reading CSV files.\n- Added ``--splice-types`` option to specify only one kind of splicing you'd\n  like to find\n- So the user can double-check the Psi calculation, create a ``summary.csv``\n  file indicating the number of reads found at each junction, for all samples\n  - This also shows which \"Case\" corresponds to each event in each sample, so you can see whether there were sufficient or insufficient reads on the junctions of each event, and how ``outrigger`` judged it.\n- Added functions to extract constitutive and alternative exons separately\n\nv1.0.0 Bug fixes\n~~~~~~~~~~~~~~~~\n\n- Fixed a bug that stalled on ``.bam`` files while counting the junctions\n\nv1.0.0 Miscellaneous\n~~~~~~~~~~~~~~~~~~~~\n\n- Added ``GC/AG`` to valid splice sites\n\n\nv0.2.9 (November 11th, 2016)\n----------------------------\n\nThis is a non-breaking release with many speed improvements, and upgrade is\nrecommended.\n\n\nv0.2.9 New features\n~~~~~~~~~~~~~~~~~~~\n\n- Add ``bam`` alignment files as input option\n\n\nMiscellaneous\n~~~~~~~~~~~~~\n\n- Parallelized Psi calculation, the exact number of processors can be specified\n  with ``--n-jobs``, and by default, ``--n-jobs`` is ``-1``, which means use as\n  many processors as are available.\n\n\nv0.2.8 (October 23rd, 2016)\n---------------------------\n\nUpdated README/HISTORY files\n\n\nv0.2.7 (October 23rd, 2016)\n---------------------------\n\nv0.2.7 New features\n~~~~~~~~~~~~~~~~~~~\n\n- Added ``outrigger validate`` command to check for canonical splice sites\n  by default: ``GT/AG`` (U1, major spliceosome) and ``AT/AC``\n  (U12, minor spliceosome). Both of these are user-adjustable as they are only\n  the standard for mammalian genomes.\n\nv0.2.7 API changes\n~~~~~~~~~~~~~~~~~~\n\n- Added ``--resume`` and ``--force`` options to ``outrigger index`` to prevent\n  the overwriting of interrupted indexing operations, or to force overwriting.\n  By default, ``outrigger`` complains and cowardly exits.\n\nv0.2.7 Bug fixes\n~~~~~~~~~~~~~~~~\n\n- Support ENSEMBL gtf files which specify chromsome names with a number, e.g.\n  ``4`` instead of ``chr4``. Thank you to lcscs12345_ for pointing this out!\n\nv0.2.7 Miscellaneous\n~~~~~~~~~~~~~~~~~~~~\n\n- Added version info with ``outrigger --version``\n- Sped up gffutils queries and event finding by running ``ANALYZE`` on SQLite\n  databases.\n\n\n.. _lcscs12345: https://github.com/lcscs12345\n\n\nv0.2.6 (September 15th, 2016)\n-----------------------------\n\nThis is a non-breaking patch release\n\nv0.2.6 Bug fixes\n~~~~~~~~~~~~~~~~\n\n- Wasn't concatenating exons properly after parallelizing\n\n\nv0.2.6 Miscellaneous\n~~~~~~~~~~~~~~~~~~~~\n\n- Clarified ``.gtf`` file example for directory output\n\n\n\nv0.2.5 (September 14th, 2016)\n-----------------------------\n\n\nv0.2.5 Bug fixes\n~~~~~~~~~~~~~~~~\n\n- Added ``joblib`` to requirements\n\n\nv0.2.4 (September 14th, 2016)\n-----------------------------\n\nThis is a non-breaking patch release of ``outrigger``.\n\nv0.2.4 New features\n~~~~~~~~~~~~~~~~~~~\n\n- **Actually** parallelized exon finding for novel exons. Before had written the code and tested the non-parallelized version but now using actually parallelized version!\n\n\nv0.2.4 Bug fixes\n~~~~~~~~~~~~~~~~\n\n- Don't need to turn on ``--debug`` command for outrigger to even run\n\n\n\nv0.2.3 (September 13th, 2016)\n-----------------------------\n\nThis is a patch release of outrigger, with non-breaking changes from the\nprevious one.\n\n\nBug fixes\n~~~~~~~~~\n\n- Subfolders get copied when installing\n- Add test for checking that ``outrigger -h`` command works\n\n\nv0.2.2 (September 12th, 2016)\n-----------------------------\n\nThis is a point release which includes the ``index`` submodule in the ``__all__`` statement.\n\n\nv0.2.1 (September 12th, 2016)\n-----------------------------\n\nThis is a point release which actually includes the ``requirements.txt`` file that specifies which packages ``outrigger`` depends on.\n\n\nv0.2.0 (September 9th, 2016)\n----------------------------\n\nThis is the second release of ``outrigger``!\n\nNew features\n~~~~~~~~~~~~\n\n- Parallelized exon finding for novel exons\n- Added ``outrigger validate`` command to check that your new exons have proper splice sites (e.g. GT/AG and AT/AC)\n- Added more test data for other event types (even though we don't detect them yet)\n\n\nv0.1.0 (May 25, 2016)\n---------------------\n\nThis is the initial release of ``outrigger``\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://yeolab.github.io/outrigger", "keywords": "outrigger", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "outrigger", "package_url": "https://pypi.org/project/outrigger/", "platform": "", "project_url": "https://pypi.org/project/outrigger/", "project_urls": {"Homepage": "https://yeolab.github.io/outrigger"}, "release_url": "https://pypi.org/project/outrigger/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Outrigger detects *de novo* exons and quantifies their percent spliced-in", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/YeoLab/outrigger\" rel=\"nofollow\"><img alt=\"OutriggerLogo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19df1df3c1a80a02fb8184372d92fd56d5492041/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f59656f4c61622f6f75747269676765722f6d61737465722f6c6f676f2f6c6f676f2d31782e706e67\"></a></p>\n<p><a href=\"https://travis-ci.org/YeoLab/outrigger\" rel=\"nofollow\"><img alt=\"BuildStatus\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c73bd45b6d80543a57319b5b5c89f0d2bf58872/68747470733a2f2f7472617669732d63692e6f72672f59656f4c61622f6f75747269676765722e7376673f6272616e63683d6d6173746572\"></a><a href=\"https://codecov.io/gh/YeoLab/outrigger\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a70831e1e551ae4d9facaff1a579d062a228a788/68747470733a2f2f636f6465636f762e696f2f67682f59656f4c61622f6f75747269676765722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a><a href=\"https://pypi.python.org/pypi/outrigger\" rel=\"nofollow\"><img alt=\"PyPIVersions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30301fc875d20d9efa15f5bbb742ad20502d4b74/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f75747269676765722e737667\"></a><a href=\"https://pypi.python.org/pypi/outrigger\" rel=\"nofollow\"><img alt=\"PythonVersionCompatibility\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/132caa4535f3c00a018ddb6467651217ed3405d4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6f75747269676765722e737667\"></a></p>\n<div id=\"large-scale-detection-and-calculation-of-alternative-splicing-with-outrigger\">\n<h2>Large-scale detection and calculation of alternative splicing with <a href=\"https://github.com/YeoLab/outrigger\" rel=\"nofollow\">Outrigger</a></h2>\n<p><a href=\"https://github.com/YeoLab/outrigger\" rel=\"nofollow\">Outrigger</a> is a program which uses junction reads from RNA seq data, and\na graph database to create a <em>de novo</em> alternative splicing annotation\nwith a graph database, and quantify percent spliced-in (Psi) of the\nevents.</p>\n<ul>\n<li>Free software: BSD license</li>\n<li>Documentation is available here: <a href=\"http://yeolab.github.io/outrigger/\" rel=\"nofollow\">http://yeolab.github.io/outrigger/</a></li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Finds novel splicing events, including novel exons!\n(<tt>outrigger index</tt>) from <tt>.bam</tt> files</li>\n<li>(optional) Validates that exons have correct splice sites, e.g. GT/AG\nand AT/AC for mammalian systems (<tt>outrigger validate</tt>)</li>\n<li>Calculate \u201cpercent spliced-in\u201d (Psi/\u03a8) scores for all your samples\ngiven the validated events (or the original events if you opted not\nto validate) via <tt>outrigger psi</tt></li>\n</ul>\n<p><a href=\"https://raw.githubusercontent.com/YeoLab/outrigger/master/docs/_static/outrigger_overview-300ppi.png\" rel=\"nofollow\"><img alt=\"OutriggerOverview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/045ff4445169864def7e06f23cbb6e9f142f38ba/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f59656f4c61622f6f75747269676765722f6d61737465722f646f63732f5f7374617469632f6f75747269676765725f6f766572766965772d3330307070692e706e67\"></a></p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install <tt>outrigger</tt>, we recommend using the <a href=\"http://anaconda.org/\" rel=\"nofollow\">Anaconda Python\nDistribution</a> and creating an environment.</p>\n<p>You\u2019ll want to add the <a href=\"https://bioconda.github.io/\" rel=\"nofollow\">bioconda</a>\nchannel to make installing <a href=\"bedtools.readthedocs.io\" rel=\"nofollow\">bedtools</a> and\nits Python wrapper, <a href=\"https://daler.github.io/pybedtools/\" rel=\"nofollow\">pybedtools</a>\neasy (these programs are necessary for both <tt>outrigger index</tt> and\n<tt>outrigger validate</tt>).</p>\n<pre>conda config --add channels r\nconda config --add channels bioconda\n</pre>\n<p>Create an environment called <tt><span class=\"pre\">outrigger-env</span></tt>. Python 2.7, Python 3.4, Python 3.5, and Python 3.6 are supported.</p>\n<pre>conda create --name outrigger-env outrigger\n</pre>\n<p>Now activate that environment:</p>\n<pre>source activate outrigger-env\n</pre>\n<p>To check that it installed properly, try the command with the help\noption (<tt><span class=\"pre\">-h</span></tt>), <tt>outrigger <span class=\"pre\">-h</span></tt>. The output should look like this:</p>\n<pre>$ outrigger -h\nusage: outrigger [-h] [--version] {index,validate,psi} ...\n\noutrigger (1.0.0dev). Calculate \"percent-spliced in\" (Psi) scores of\nalternative splicing on a *de novo*, custom-built splicing index -- just for\nyou!\n\npositional arguments:\n  {index,validate,psi}  Sub-commands\n    index               Build an index of splicing events using a graph\n                        database on your junction reads and an annotation\n    validate            Ensure that the splicing events found all have the\n                        correct splice sites\n    psi                 Calculate \"percent spliced-in\" (Psi) values using the\n                        splicing event index built with \"outrigger index\"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n</pre>\n<div id=\"bleeding-edge-code-from-github-here\">\n<h4>Bleeding edge code from Github (here)</h4>\n<p>For advanced users, if you have <a href=\"https://git-scm.com/\" rel=\"nofollow\">git</a> and\n<a href=\"https://www.continuum.io/downloads\" rel=\"nofollow\">Anaconda Python</a> installed, you\ncan:</p>\n<ol>\n<li>Clone this repository</li>\n<li>Change into that directory</li>\n<li>Create an environment named <tt><span class=\"pre\">outrigger-env</span></tt> with the necessary packages\nfrom Anaconda and the Python Package Index (PyPI).</li>\n<li>Activate the environment</li>\n</ol>\n<p>These steps are shown in code below.</p>\n<pre>git clone https://github.com/YeoLab/outrigger.git\ncd outrigger\nconda env create --file environment.yml\nsource activate outrigger-env\n</pre>\n</div>\n</div>\n<div id=\"quick-start\">\n<h3>Quick start</h3>\n<p>If you just want to know how to run this on your data with the default\nparameters, start here. Let\u2019s say you performed your alignment in the\nfolder called <tt>~/projects/tasic2016/analysis/tasic2016_v1</tt>, and that\u2019s\nwhere your <tt>SJ.out.tab</tt> files from the STAR aligner are (they\u2019re\noutput into the same folder as the <tt>.bam</tt> files). First you\u2019ll need to\nchange directories to that folder with <tt>cd</tt>.</p>\n<pre>cd ~/projects/tasic2016/analysis/tasic2016_v1\n</pre>\n<p>Then you need find all alternative splicing events, which you do by\nrunning <tt>outrigger index</tt> on the splice junction files and the gtf.\nHere is an example command:</p>\n<div id=\"input-sj-out-tab-files\">\n<h4>Input: <tt>.SJ.out.tab</tt> files</h4>\n<pre>outrigger index --sj-out-tab *SJ.out.tab \\\n    --gtf /projects/ps-yeolab/genomes/mm10/gencode/m10/gencode.vM10.annotation.gtf\n</pre>\n</div>\n<div id=\"input-bam-files\">\n<h4>Input: <tt>.bam</tt> files</h4>\n<p>If you\u2019re using <tt>.bam</tt> files instead of <tt>SJ.out.tab</tt> files, never despair!\nBelow is an example command. Keep in mind that for this program to work, the\nevents must be sorted and indexed.</p>\n<pre>outrigger index --bam *sorted.bam \\\n    --gtf /projects/ps-yeolab/genomes/mm10/gencode/m10/gencode.vM10.annotation.gtf\n</pre>\n<p>Next, you\u2019ll want to validate that the splicing events you found follow\nbiological rules, such as being containing GT/AG (mammalian major\nspliceosome) or AT/AC (mammalian minor splicesome) sequences. To do\nthat, you\u2019ll need to provide the genome name (e.g. <tt>mm10</tt>) and the\ngenome sequences. An example command is below:</p>\n<pre>outrigger validate --genome mm10 \\\n    --fasta /projects/ps-yeolab/genomes/mm10/GRCm38.primary_assembly.genome.fa\n</pre>\n<p>Finally, you can calculate percent spliced in (Psi) of your splicing\nevents! Thankfully this is very easy:</p>\n<pre>outrigger psi\n</pre>\n<p>It should be noted that ALL of these commands should be performed in the\nsame directory, so no moving.</p>\n</div>\n<div id=\"quick-start-summary\">\n<h4>Quick start summary</h4>\n<p>Here is a summary the commands in the order you would use them for\noutrigger!</p>\n<pre>cd ~/projects/tasic2016/analysis/tasic2016_v1\noutrigger index --sj-out-tab *SJ.out.tab \\\n    --gtf /projects/ps-yeolab/genomes/mm10/gencode/m10/gencode.vM10.annotation.gtf\noutrigger validate --genome mm10 \\\n    --fasta /projects/ps-yeolab/genomes/mm10/GRCm38.primary_assembly.genome.fa\noutrigger psi\n</pre>\n<p>This will create a folder called <tt>outrigger_output</tt>, which at the end\nshould look like the one below. Each file and folder is annotated with which command\nproduced it.</p>\n<pre>$ tree outrigger_output\noutrigger_output..........................................................index\n\u251c\u2500\u2500 index.................................................................index\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gtf...............................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gencode.vM10.annotation.gtf...................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gencode.vM10.annotation.gtf.db................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 novel_exons.gtf...............................................index\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 exon_direction_junction_triples.csv...............................index\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mxe...............................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 event.bed.....................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 events.csv....................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon1.bed.....................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon2.bed.....................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon3.bed.....................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 exon4.bed.....................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 intron.bed....................................................index\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 splice_sites.csv...........................................validate\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 validated..................................................validate\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 events.csv.............................................validate\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 se................................................................index\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 event.bed.....................................................index\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 events.csv....................................................index\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 exon1.bed.....................................................index\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 exon2.bed.....................................................index\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 exon3.bed.....................................................index\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 intron.bed....................................................index\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 splice_sites.csv...........................................validate\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 validated..................................................validate\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 events.csv.............................................validate\n\u251c\u2500\u2500 junctions.............................................................index\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metadata.csv......................................................index\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 reads.csv.........................................................index\n\u2514\u2500\u2500 psi.....................................................................psi\n    \u251c\u2500\u2500 mxe.................................................................psi\n    |   \u251c\u2500\u2500 psi.csv.........................................................psi\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 summary.csv.....................................................psi\n    \u251c\u2500\u2500 outrigger_psi.csv...................................................psi\n    \u2514\u2500\u2500 se..................................................................psi\n        \u251c\u2500\u2500 psi.csv.........................................................psi\n        \u2514\u2500\u2500 summary.csv.....................................................psi\n\n10 directories, 26 files\n</pre>\n</div>\n</div>\n<div id=\"history\">\n<h3>History</h3>\n<div id=\"v1-1-0-june-28th-2017\">\n<h4>v1.1.0 (June 28th, 2017)</h4>\n<p>This is a minor release to <tt>`outrigger</tt>.</p>\n<div id=\"bug-fixes\">\n<h5>Bug fixes</h5>\n<ul>\n<li>Fixed <cite>UNIQUE ID</cite> error that happened somewhat stochastically when adding new exons to the database</li>\n</ul>\n</div>\n<div id=\"miscellaneous\">\n<h5>Miscellaneous</h5>\n<ul>\n<li>Explicitly added Python 3.6 compatibility</li>\n<li>Change logo location to <cite>logo/</cite> instead of <cite>logo/v1</cite> since there\u2019s only one\nversion anyway\u2026</li>\n</ul>\n</div>\n</div>\n<div id=\"v1-0-0-april-3rd-2017\">\n<h4>v1.0.0 (April 3rd, 2017)</h4>\n<p>This is the first major release of <tt>outrigger</tt>!!!</p>\n<div id=\"v1-0-0-new-features\">\n<h5>v1.0.0 New features</h5>\n<ul>\n<li>Parallelized event across chromosomes</li>\n<li>Added <tt><span class=\"pre\">--low-memory</span></tt> flag for <tt>index</tt>, <tt>validate</tt>, and <tt>psi</tt> commands\nto use a smaller memory footprint when reading CSV files.</li>\n<li>Added <tt><span class=\"pre\">--splice-types</span></tt> option to specify only one kind of splicing you\u2019d\nlike to find</li>\n<li>So the user can double-check the Psi calculation, create a <tt>summary.csv</tt>\nfile indicating the number of reads found at each junction, for all samples\n- This also shows which \u201cCase\u201d corresponds to each event in each sample, so you can see whether there were sufficient or insufficient reads on the junctions of each event, and how <tt>outrigger</tt> judged it.</li>\n<li>Added functions to extract constitutive and alternative exons separately</li>\n</ul>\n</div>\n<div id=\"v1-0-0-bug-fixes\">\n<h5>v1.0.0 Bug fixes</h5>\n<ul>\n<li>Fixed a bug that stalled on <tt>.bam</tt> files while counting the junctions</li>\n</ul>\n</div>\n<div id=\"v1-0-0-miscellaneous\">\n<h5>v1.0.0 Miscellaneous</h5>\n<ul>\n<li>Added <tt>GC/AG</tt> to valid splice sites</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-2-9-november-11th-2016\">\n<h4>v0.2.9 (November 11th, 2016)</h4>\n<p>This is a non-breaking release with many speed improvements, and upgrade is\nrecommended.</p>\n<div id=\"v0-2-9-new-features\">\n<h5>v0.2.9 New features</h5>\n<ul>\n<li>Add <tt>bam</tt> alignment files as input option</li>\n</ul>\n</div>\n<div id=\"id1\">\n<h5>Miscellaneous</h5>\n<ul>\n<li>Parallelized Psi calculation, the exact number of processors can be specified\nwith <tt><span class=\"pre\">--n-jobs</span></tt>, and by default, <tt><span class=\"pre\">--n-jobs</span></tt> is <tt><span class=\"pre\">-1</span></tt>, which means use as\nmany processors as are available.</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-2-8-october-23rd-2016\">\n<h4>v0.2.8 (October 23rd, 2016)</h4>\n<p>Updated README/HISTORY files</p>\n</div>\n<div id=\"v0-2-7-october-23rd-2016\">\n<h4>v0.2.7 (October 23rd, 2016)</h4>\n<div id=\"v0-2-7-new-features\">\n<h5>v0.2.7 New features</h5>\n<ul>\n<li>Added <tt>outrigger validate</tt> command to check for canonical splice sites\nby default: <tt>GT/AG</tt> (U1, major spliceosome) and <tt>AT/AC</tt>\n(U12, minor spliceosome). Both of these are user-adjustable as they are only\nthe standard for mammalian genomes.</li>\n</ul>\n</div>\n<div id=\"v0-2-7-api-changes\">\n<h5>v0.2.7 API changes</h5>\n<ul>\n<li>Added <tt><span class=\"pre\">--resume</span></tt> and <tt><span class=\"pre\">--force</span></tt> options to <tt>outrigger index</tt> to prevent\nthe overwriting of interrupted indexing operations, or to force overwriting.\nBy default, <tt>outrigger</tt> complains and cowardly exits.</li>\n</ul>\n</div>\n<div id=\"v0-2-7-bug-fixes\">\n<h5>v0.2.7 Bug fixes</h5>\n<ul>\n<li>Support ENSEMBL gtf files which specify chromsome names with a number, e.g.\n<tt>4</tt> instead of <tt>chr4</tt>. Thank you to <a href=\"https://github.com/lcscs12345\" rel=\"nofollow\">lcscs12345</a> for pointing this out!</li>\n</ul>\n</div>\n<div id=\"v0-2-7-miscellaneous\">\n<h5>v0.2.7 Miscellaneous</h5>\n<ul>\n<li>Added version info with <tt>outrigger <span class=\"pre\">--version</span></tt></li>\n<li>Sped up gffutils queries and event finding by running <tt>ANALYZE</tt> on SQLite\ndatabases.</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-2-6-september-15th-2016\">\n<h4>v0.2.6 (September 15th, 2016)</h4>\n<p>This is a non-breaking patch release</p>\n<div id=\"v0-2-6-bug-fixes\">\n<h5>v0.2.6 Bug fixes</h5>\n<ul>\n<li>Wasn\u2019t concatenating exons properly after parallelizing</li>\n</ul>\n</div>\n<div id=\"v0-2-6-miscellaneous\">\n<h5>v0.2.6 Miscellaneous</h5>\n<ul>\n<li>Clarified <tt>.gtf</tt> file example for directory output</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-2-5-september-14th-2016\">\n<h4>v0.2.5 (September 14th, 2016)</h4>\n<h4 id=\"v0-2-5-bug-fixes\"><span class=\"section-subtitle\">v0.2.5 Bug fixes</span></h4>\n<ul>\n<li>Added <tt>joblib</tt> to requirements</li>\n</ul>\n</div>\n<div id=\"v0-2-4-september-14th-2016\">\n<h4>v0.2.4 (September 14th, 2016)</h4>\n<p>This is a non-breaking patch release of <tt>outrigger</tt>.</p>\n<div id=\"v0-2-4-new-features\">\n<h5>v0.2.4 New features</h5>\n<ul>\n<li><strong>Actually</strong> parallelized exon finding for novel exons. Before had written the code and tested the non-parallelized version but now using actually parallelized version!</li>\n</ul>\n</div>\n<div id=\"v0-2-4-bug-fixes\">\n<h5>v0.2.4 Bug fixes</h5>\n<ul>\n<li>Don\u2019t need to turn on <tt><span class=\"pre\">--debug</span></tt> command for outrigger to even run</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-2-3-september-13th-2016\">\n<h4>v0.2.3 (September 13th, 2016)</h4>\n<p>This is a patch release of outrigger, with non-breaking changes from the\nprevious one.</p>\n<div id=\"id2\">\n<h5>Bug fixes</h5>\n<ul>\n<li>Subfolders get copied when installing</li>\n<li>Add test for checking that <tt>outrigger <span class=\"pre\">-h</span></tt> command works</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-2-2-september-12th-2016\">\n<h4>v0.2.2 (September 12th, 2016)</h4>\n<p>This is a point release which includes the <tt>index</tt> submodule in the <tt>__all__</tt> statement.</p>\n</div>\n<div id=\"v0-2-1-september-12th-2016\">\n<h4>v0.2.1 (September 12th, 2016)</h4>\n<p>This is a point release which actually includes the <tt>requirements.txt</tt> file that specifies which packages <tt>outrigger</tt> depends on.</p>\n</div>\n<div id=\"v0-2-0-september-9th-2016\">\n<h4>v0.2.0 (September 9th, 2016)</h4>\n<p>This is the second release of <tt>outrigger</tt>!</p>\n<div id=\"new-features\">\n<h5>New features</h5>\n<ul>\n<li>Parallelized exon finding for novel exons</li>\n<li>Added <tt>outrigger validate</tt> command to check that your new exons have proper splice sites (e.g. GT/AG and AT/AC)</li>\n<li>Added more test data for other event types (even though we don\u2019t detect them yet)</li>\n</ul>\n</div>\n</div>\n<div id=\"v0-1-0-may-25-2016\">\n<h4>v0.1.0 (May 25, 2016)</h4>\n<p>This is the initial release of <tt>outrigger</tt></p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2986608, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "47ccbb10fcfd0143715a6f689048e715", "sha256": "3302dd5ff55757e39d8c79e4b374cc03bdd54b80269262a86aad7cb249a917f8"}, "downloads": -1, "filename": "outrigger-0.1.0.tar.gz", "has_sig": false, "md5_digest": "47ccbb10fcfd0143715a6f689048e715", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17599, "upload_time": "2016-07-14T23:47:56", "upload_time_iso_8601": "2016-07-14T23:47:56.549558Z", "url": "https://files.pythonhosted.org/packages/dd/d1/ac2a678297f169b8d3c71ba99840af217f76812c1b51c0a73ec099cdbf83/outrigger-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6f6f2300c34bf44e8575fd74bc6fa3a9", "sha256": "cff068c81a2ef9100367fe29e2df034fc2a3c62e1f1d7614e1745b5a7a4700ab"}, "downloads": -1, "filename": "outrigger-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6f6f2300c34bf44e8575fd74bc6fa3a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34306, "upload_time": "2016-09-10T05:58:30", "upload_time_iso_8601": "2016-09-10T05:58:30.857575Z", "url": "https://files.pythonhosted.org/packages/68/ce/c80047e39edbe6ac85b72b7140e9708942bdd92cc9ff58eadd127af3f6f4/outrigger-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7201da89ca9a82a1ec7d76b4e5b6f7cf", "sha256": "9e642c47c7635141b3009f74ba12db8e5dc3b6f672db40761ebc9d14ee541e0b"}, "downloads": -1, "filename": "outrigger-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7201da89ca9a82a1ec7d76b4e5b6f7cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34730, "upload_time": "2016-09-12T18:51:11", "upload_time_iso_8601": "2016-09-12T18:51:11.310480Z", "url": "https://files.pythonhosted.org/packages/ac/2d/f62643d2fdd7db4361e04747bea05ddb81e64d38821f76c1f611ef3524aa/outrigger-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "b0a0ccc9813aab7db412c87ad12de791", "sha256": "e218f0f4febc4bda0f94d5c62257be998f229a66ccf068989d35b5752a27ffc0"}, "downloads": -1, "filename": "outrigger-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b0a0ccc9813aab7db412c87ad12de791", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34865, "upload_time": "2016-09-12T19:41:57", "upload_time_iso_8601": "2016-09-12T19:41:57.773008Z", "url": "https://files.pythonhosted.org/packages/6e/ca/949fe3d8e66ed398b9f9679bb24af1c0e4b15f8ed26c2df63f65299c4fbe/outrigger-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "1a0c1b851f5bf69c3dcd9f309fef23b5", "sha256": "040be59060e766cfbe3624f4cc3a775a689f070d7053c230f85796d3b6fc453c"}, "downloads": -1, "filename": "outrigger-0.2.3.tar.gz", "has_sig": false, "md5_digest": "1a0c1b851f5bf69c3dcd9f309fef23b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48271, "upload_time": "2016-09-13T22:49:41", "upload_time_iso_8601": "2016-09-13T22:49:41.654745Z", "url": "https://files.pythonhosted.org/packages/f9/ef/b7076bbcc92ad6d867a4bd0381ee66b4407bc66b62b94eac6e91cef13d78/outrigger-0.2.3.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "30e860e7eb9468196db0b2884f62ae16", "sha256": "036db91a279f6e4aaa2bcc107ad92927b0c029b09ac09737fba0908cfebf3b4d"}, "downloads": -1, "filename": "outrigger-0.2.5.tar.gz", "has_sig": false, "md5_digest": "30e860e7eb9468196db0b2884f62ae16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49219, "upload_time": "2016-09-14T17:41:17", "upload_time_iso_8601": "2016-09-14T17:41:17.010119Z", "url": "https://files.pythonhosted.org/packages/56/b8/58a2d88b39c916c7350f36bc6a211929f9c20a5bfbd38db56745873f49c8/outrigger-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "138822b0cc52526759aa2c850dd02d2a", "sha256": "d1f80e450f7a6c15c8a4f1cf7fd2e57877da78b7dc4b33ab147eb06243fb4568"}, "downloads": -1, "filename": "outrigger-0.2.6.tar.gz", "has_sig": false, "md5_digest": "138822b0cc52526759aa2c850dd02d2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49753, "upload_time": "2016-09-15T22:49:30", "upload_time_iso_8601": "2016-09-15T22:49:30.648549Z", "url": "https://files.pythonhosted.org/packages/0a/fc/c253ec23127e1a5e28dce28204a957aca5d8d1ecff12b73ba3a8691eadb9/outrigger-0.2.6.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "d2d26abb4529cde89dccf682ccbaa406", "sha256": "858dbf856e4eb2bb0f99238c66602ddba5ec1b8a35e35a989873055ca9d97d3e"}, "downloads": -1, "filename": "outrigger-0.2.8.tar.gz", "has_sig": false, "md5_digest": "d2d26abb4529cde89dccf682ccbaa406", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53493, "upload_time": "2016-10-23T21:40:55", "upload_time_iso_8601": "2016-10-23T21:40:55.697156Z", "url": "https://files.pythonhosted.org/packages/a0/a8/1ba86bff036a9082a8fab59d51885c23c05fe67fb9763954b223edcbe34e/outrigger-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "987ce3ebef2df2501483d176d5cf0c95", "sha256": "ff002410bd3b438845d5ab4cbd23fd5f921153e2a0758b154a922ba846f0b508"}, "downloads": -1, "filename": "outrigger-0.2.9.tar.gz", "has_sig": false, "md5_digest": "987ce3ebef2df2501483d176d5cf0c95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49127, "upload_time": "2016-11-11T23:31:21", "upload_time_iso_8601": "2016-11-11T23:31:21.547690Z", "url": "https://files.pythonhosted.org/packages/aa/16/6cf8b51f4233b85fd2e20018c94033bb062297bcf71078bca1a3b78ff0a9/outrigger-0.2.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "6b7c5a8ae752f79c49e2e124e609a099", "sha256": "712b41b7fdbd7bdbefc83ecbd344d4b59b99354339d771f6f80cb50a88041ef7"}, "downloads": -1, "filename": "outrigger-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6b7c5a8ae752f79c49e2e124e609a099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59216, "upload_time": "2017-04-04T00:07:01", "upload_time_iso_8601": "2017-04-04T00:07:01.993278Z", "url": "https://files.pythonhosted.org/packages/13/b9/02d6db3140448685a9651918e3c2831401983d8123dd2560320283abddcc/outrigger-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "559f2ae6b4f8a15937041bed0f33406e", "sha256": "23f69926b6c6d057bb6fd48d753093706494471dcdc8cbaec0b8ec9332690b1b"}, "downloads": -1, "filename": "outrigger-1.1.0.tar.gz", "has_sig": false, "md5_digest": "559f2ae6b4f8a15937041bed0f33406e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57787, "upload_time": "2017-06-28T21:13:43", "upload_time_iso_8601": "2017-06-28T21:13:43.743594Z", "url": "https://files.pythonhosted.org/packages/df/85/ea04b3dd1fa2d89d1c1db8c4ca74a18b4d6223dc0ffcd8d26c8195109704/outrigger-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "ac911a16daa78480902ae7cdcde655b0", "sha256": "456f882f2562cab6543aec4b8e177815384b72b7b33363b6982d9fd752fe2526"}, "downloads": -1, "filename": "outrigger-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ac911a16daa78480902ae7cdcde655b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57725, "upload_time": "2017-06-29T03:35:18", "upload_time_iso_8601": "2017-06-29T03:35:18.041116Z", "url": "https://files.pythonhosted.org/packages/ca/03/860e2dda28aeba28f9fc552c6af9e9e2ff13e806a4437726c8c024c0efd2/outrigger-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac911a16daa78480902ae7cdcde655b0", "sha256": "456f882f2562cab6543aec4b8e177815384b72b7b33363b6982d9fd752fe2526"}, "downloads": -1, "filename": "outrigger-1.1.1.tar.gz", "has_sig": false, "md5_digest": "ac911a16daa78480902ae7cdcde655b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57725, "upload_time": "2017-06-29T03:35:18", "upload_time_iso_8601": "2017-06-29T03:35:18.041116Z", "url": "https://files.pythonhosted.org/packages/ca/03/860e2dda28aeba28f9fc552c6af9e9e2ff13e806a4437726c8c024c0efd2/outrigger-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:38 2020"}