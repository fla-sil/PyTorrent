{"info": {"author": "Carlos Perez", "author_email": "charlsagente@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Utilities"], "description": "[![Build Status](https://travis-ci.org/charlsagente/python-settings.svg?branch=master)](https://travis-ci.org/charlsagente/python-settings)\n\n# python-settings\nThis module provides you easy access to your **config/settings** properties from all your python modules, it supports normal and lazy initialization for each property. It is based on \n [django.conf.settings](https://github.com/django/django/blob/stable/1.11.x/django/conf/__init__.py#L58').\n\n ## Installation\n From pip\n ```bash\n pip install python-settings\n```\n\nOr\n\nClone this repo and type\n```bash\npython setup.py install\n```\n\n ## How to configure\n\nCreate a python file like **settings.py** in your project, the variable names must be in Capital Letters (A-Z), example:\n```python\n# settings.py\n\n# Variables definition\nDATABASE_HOST = '10.0.0.1'\n\nDATABASE_NAME = 'DATABASENAME'\n\n```\n\n Two optional patterns to initialize this library\n\n * Option 1. Using an **environment variable**. \n You must have an environment variable called **SETTINGS_MODULE** and as a value your just created python settings file in the format {module}.\n {name}. With no .py extension.\n\n    Example in bash:\n   ```bash\n    export SETTINGS_MODULE=settings\n   ```\n\n    Example in Python\n\n   ```python\n   import os\n   os.environ[\"SETTINGS_MODULE\"] = 'settings' \n   ```\n\n *  Option 2. Calling the configure function from our settings module and passing it your python file\n\n    ```python\n    from python_settings import settings\n    from . import settings as my_local_settings\n\n    settings.configure(my_local_settings) # configure() receives a python module\n    assert settings.configured # now you are set\n    ```  \n\n\n## How to use\n\nImport the settings module and access directly to your properties:\n```python\nfrom python_settings import settings \n\nprint(settings.DATABASE_HOST) # Will print '10.0.0.1'\nprint(settings.DATABASE_NAME) # Will print 'DATABASENAME'\n``` \n\n## Lazy Initialization \n\nEvery time you start/restart your python project, \nall your defined variables are evaluated many times, \nif you are dealing with heavy to instantiate objects like\ndatabase connections or similar network calls you will expect some delay. \n\nUsing Lazy Initialization increases the performance of this process, \nchanging the behavior of evaluating the variables only when is needed.   \n\n### Use the Lazy Initializer\n\nIn your python settings file, you have to import our LazySetting class located in python_settings.\n\n\n```python\nfrom python_settings import LazySetting\nfrom my_awesome_library import HeavyInitializationClass # Heavy to initialize object\n\nLAZY_INITIALIZATION = LazySetting(HeavyInitializationClass, \"127.0.0.1:4222\") \n# LazySetting(Class, *args, **kwargs)\n\n```\n\nOnly the first time you call this property, the HeavyInitializationClass will be instantiated and the \n*args and **kwargs parameters will be passed. Every time you call this property the same instance will be returned.  \n\nAnd now from any place in your code, you have to call the property\n ```python\nfrom python_settings import settings \n\nobject_initialized = settings.LAZY_INITIALIZATION # Will return an instance of your object\n\n``` \n\n## Example for different environments\nYou can use as many settings files as you need for different environments.\nExample for development environment settings:\n```python\n# development_settings.py\nimport os\n\nfrom .base_settings import *\n\n\nTOKEN_API = os.environ.get(\"TOKEN_API\")\n\n\n```\n\n Example for testing environment\n ```python\n# testing_settings.py\nimport os\n\nfrom .settings import *\n\nDATABASE_HOST = '10.0.0.1'\n\nTOKEN_API = os.environ.get(\"TOKEN_API\")\n```\n\nAnd update your **SETTINGS_MODULE** variable \n ```bash\nexport SETTINGS_MODULE = 'myproject.settings.testing_settings'\n```\nor use the config function\n\nTODO LIST: \n*   Add function to update default environment variable name\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/charlsagente/python-settings", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-settings", "package_url": "https://pypi.org/project/python-settings/", "platform": "", "project_url": "https://pypi.org/project/python-settings/", "project_urls": {"Homepage": "https://github.com/charlsagente/python-settings"}, "release_url": "https://pypi.org/project/python-settings/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "This module provides you easy access to your config/settings properties from all your python modules", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/charlsagente/python-settings\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41d218191680579f23fa3a7f5164eb8b23eb2dde/68747470733a2f2f7472617669732d63692e6f72672f636861726c736167656e74652f707974686f6e2d73657474696e67732e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>python-settings</h1>\n<p>This module provides you easy access to your <strong>config/settings</strong> properties from all your python modules, it supports normal and lazy initialization for each property. It is based on\n<a href=\"https://github.com/django/django/blob/stable/1.11.x/django/conf/__init__.py#L58'\" rel=\"nofollow\">django.conf.settings</a>.</p>\n<h2>Installation</h2>\n<p>From pip</p>\n<pre>pip install python-settings\n</pre>\n<p>Or</p>\n<p>Clone this repo and type</p>\n<pre>python setup.py install\n</pre>\n<h2>How to configure</h2>\n<p>Create a python file like <strong>settings.py</strong> in your project, the variable names must be in Capital Letters (A-Z), example:</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"c1\"># Variables definition</span>\n<span class=\"n\">DATABASE_HOST</span> <span class=\"o\">=</span> <span class=\"s1\">'10.0.0.1'</span>\n\n<span class=\"n\">DATABASE_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'DATABASENAME'</span>\n</pre>\n<p>Two optional patterns to initialize this library</p>\n<ul>\n<li>\n<p>Option 1. Using an <strong>environment variable</strong>.\nYou must have an environment variable called <strong>SETTINGS_MODULE</strong> and as a value your just created python settings file in the format {module}.\n{name}. With no .py extension.</p>\n<p>Example in bash:</p>\n<pre> <span class=\"nb\">export</span> <span class=\"nv\">SETTINGS_MODULE</span><span class=\"o\">=</span>settings\n</pre>\n<p>Example in Python</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">\"SETTINGS_MODULE\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'settings'</span> \n</pre>\n</li>\n<li>\n<p>Option 2. Calling the configure function from our settings module and passing it your python file</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span> <span class=\"k\">as</span> <span class=\"n\">my_local_settings</span>\n\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">my_local_settings</span><span class=\"p\">)</span> <span class=\"c1\"># configure() receives a python module</span>\n<span class=\"k\">assert</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configured</span> <span class=\"c1\"># now you are set</span>\n</pre>\n</li>\n</ul>\n<h2>How to use</h2>\n<p>Import the settings module and access directly to your properties:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span> \n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASE_HOST</span><span class=\"p\">)</span> <span class=\"c1\"># Will print '10.0.0.1'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASE_NAME</span><span class=\"p\">)</span> <span class=\"c1\"># Will print 'DATABASENAME'</span>\n</pre>\n<h2>Lazy Initialization</h2>\n<p>Every time you start/restart your python project,\nall your defined variables are evaluated many times,\nif you are dealing with heavy to instantiate objects like\ndatabase connections or similar network calls you will expect some delay.</p>\n<p>Using Lazy Initialization increases the performance of this process,\nchanging the behavior of evaluating the variables only when is needed.</p>\n<h3>Use the Lazy Initializer</h3>\n<p>In your python settings file, you have to import our LazySetting class located in python_settings.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_settings</span> <span class=\"kn\">import</span> <span class=\"n\">LazySetting</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_awesome_library</span> <span class=\"kn\">import</span> <span class=\"n\">HeavyInitializationClass</span> <span class=\"c1\"># Heavy to initialize object</span>\n\n<span class=\"n\">LAZY_INITIALIZATION</span> <span class=\"o\">=</span> <span class=\"n\">LazySetting</span><span class=\"p\">(</span><span class=\"n\">HeavyInitializationClass</span><span class=\"p\">,</span> <span class=\"s2\">\"127.0.0.1:4222\"</span><span class=\"p\">)</span> \n<span class=\"c1\"># LazySetting(Class, *args, **kwargs)</span>\n</pre>\n<p>Only the first time you call this property, the HeavyInitializationClass will be instantiated and the\n*args and **kwargs parameters will be passed. Every time you call this property the same instance will be returned.</p>\n<p>And now from any place in your code, you have to call the property</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_settings</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span> \n\n<span class=\"n\">object_initialized</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">LAZY_INITIALIZATION</span> <span class=\"c1\"># Will return an instance of your object</span>\n</pre>\n<h2>Example for different environments</h2>\n<p>You can use as many settings files as you need for different environments.\nExample for development environment settings:</p>\n<pre><span class=\"c1\"># development_settings.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.base_settings</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"n\">TOKEN_API</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"TOKEN_API\"</span><span class=\"p\">)</span>\n</pre>\n<p>Example for testing environment</p>\n<pre><span class=\"c1\"># testing_settings.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.settings</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">DATABASE_HOST</span> <span class=\"o\">=</span> <span class=\"s1\">'10.0.0.1'</span>\n\n<span class=\"n\">TOKEN_API</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"TOKEN_API\"</span><span class=\"p\">)</span>\n</pre>\n<p>And update your <strong>SETTINGS_MODULE</strong> variable</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">SETTINGS_MODULE</span> <span class=\"o\">=</span> <span class=\"s1\">'myproject.settings.testing_settings'</span>\n</pre>\n<p>or use the config function</p>\n<p>TODO LIST:</p>\n<ul>\n<li>Add function to update default environment variable name</li>\n</ul>\n\n          </div>"}, "last_serial": 6282863, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "14d7a9c7f87e4afa89e08bde209c402c", "sha256": "e97384cd9d722829525240347d5e5709a64f0babbe3322bb92d6e66a76d1b61c"}, "downloads": -1, "filename": "python_settings-0.2.tar.gz", "has_sig": false, "md5_digest": "14d7a9c7f87e4afa89e08bde209c402c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3785, "upload_time": "2019-05-01T02:42:07", "upload_time_iso_8601": "2019-05-01T02:42:07.622781Z", "url": "https://files.pythonhosted.org/packages/35/59/db7ed0a348fd12f5e6110f67593da1af400e501a12aa6e5de8544ec0e2ed/python_settings-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7c82e62391b8bfda57bb10a60bcb1946", "sha256": "3ae94a4272e0b76a2ad4441a2767929d42a4ce68528a56cd7eec1aac3fccaf58"}, "downloads": -1, "filename": "python_settings-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7c82e62391b8bfda57bb10a60bcb1946", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7959, "upload_time": "2019-12-12T07:00:15", "upload_time_iso_8601": "2019-12-12T07:00:15.061194Z", "url": "https://files.pythonhosted.org/packages/68/5a/c73c4fe8dab80901dbb4099299eab062c1d49c4e078ef9e14ec5bbbb42bc/python_settings-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b29c41eaba3d266ae7b894165a83653f", "sha256": "b8c3f494480b4281f303d47b40cc5a440a42e1606f949d009ee93feb78c5eb45"}, "downloads": -1, "filename": "python-settings-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b29c41eaba3d266ae7b894165a83653f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6069, "upload_time": "2019-12-12T07:00:16", "upload_time_iso_8601": "2019-12-12T07:00:16.295155Z", "url": "https://files.pythonhosted.org/packages/d8/3e/7a80b94047868294b6b057f176210d92c1c266005999776b6dce81697e4d/python-settings-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c82e62391b8bfda57bb10a60bcb1946", "sha256": "3ae94a4272e0b76a2ad4441a2767929d42a4ce68528a56cd7eec1aac3fccaf58"}, "downloads": -1, "filename": "python_settings-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7c82e62391b8bfda57bb10a60bcb1946", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7959, "upload_time": "2019-12-12T07:00:15", "upload_time_iso_8601": "2019-12-12T07:00:15.061194Z", "url": "https://files.pythonhosted.org/packages/68/5a/c73c4fe8dab80901dbb4099299eab062c1d49c4e078ef9e14ec5bbbb42bc/python_settings-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b29c41eaba3d266ae7b894165a83653f", "sha256": "b8c3f494480b4281f303d47b40cc5a440a42e1606f949d009ee93feb78c5eb45"}, "downloads": -1, "filename": "python-settings-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b29c41eaba3d266ae7b894165a83653f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6069, "upload_time": "2019-12-12T07:00:16", "upload_time_iso_8601": "2019-12-12T07:00:16.295155Z", "url": "https://files.pythonhosted.org/packages/d8/3e/7a80b94047868294b6b057f176210d92c1c266005999776b6dce81697e4d/python-settings-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:25 2020"}