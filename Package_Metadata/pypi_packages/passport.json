{"info": {"author": "Gavin M. Roy", "author_email": "gavinmroy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database", "Topic :: Software Development :: Libraries"], "description": "Passport\r\n========\r\n*Light weight configuration management using Consul*\r\n\r\nPassport is a command line tool for rendering templates containing information\r\ngained from Consul's Service Discovery API and Key/Value database.\r\n\r\n|Version| |Downloads| |License|\r\n\r\nInstallation\r\n------------\r\nPassport is available via `pypi <https://pypi.python.org/pypi/passport>`_ and \r\ncan be installed with easy_install or pip:\r\n\r\n.. code:: bash\r\n\r\n    pip install passport\r\n\r\nUsage\r\n-----\r\n\r\n.. code:: bash\r\n\r\n    usage: passport.py [-h] [--host HOST] [--port PORT] [--datacenter DATACENTER]\r\n                       {kv,file} path destination\r\n                            \r\nExample\r\n-------\r\nAs an example, the following template is stored in the KV database as\r\n``templates/memcached/memcached.conf``\r\n\r\n.. code:: python\r\n\r\n    {% set nodes = ['%s:%s' % (r['Address'], r['ServicePort']) for r in consul.catalog.service('memcached')] %}\r\n\r\n    [memcached]\r\n        servers = {{ ','.join(nodes) }}\r\n\r\nInvoking passport will render the file with a list of all memcached nodes to\r\n``/etc/memcached.conf``.\r\n\r\n.. code:: bash\r\n\r\n    passport kv templates/memcached/memcached.conf /etc/memcached.conf\r\n\r\nAnd the output would look something like:\r\n\r\n.. code:: ini\r\n\r\n    [memcached]\r\n        servers = 172.17.0.7:11211,172.17.0.8:11211\r\n\r\nTemplate rendering is done via the `Tornado Template <https://tornado.readthedocs.org/en/latest/template.html>`_ engine.\r\n\r\nTodo\r\n----\r\n- Add a *managed* mode where Passport will check for new services on a regular interval and when changes occur, update the rendered template and notify a process using HUP\r\n- Add daemonization for managed mode\r\n- Add the ability to specify pairs of templates/destinations in a single invocation\r\n\r\n.. |Version| image:: https://badge.fury.io/py/passport.svg?\r\n   :target: http://badge.fury.io/py/passport\r\n  \r\n.. |Downloads| image:: https://pypip.in/d/passport/badge.svg?\r\n   :target: https://pypi.python.org/pypi/passport\r\n   \r\n.. |License| image:: https://pypip.in/license/passport/badge.svg?\r\n   :target: https://pypi.python.org/pypi/passport", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gmr/passport", "keywords": "", "license": "Copyright (c) 2014 AWeber Communications\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification,\r\nare permitted provided that the following conditions are met:\r\n\r\n * Redistributions of source code must retain the above copyright notice, this\r\n   list of conditions and the following disclaimer.\r\n * Redistributions in binary form must reproduce the above copyright notice,\r\n   this list of conditions and the following disclaimer in the documentation\r\n   and/or other materials provided with the distribution.\r\n * Neither the name of passport nor the names of its\r\n   contributors may be used to endorse or promote products derived from this\r\n   software without specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\nIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\r\nBUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\r\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\r\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "maintainer": "", "maintainer_email": "", "name": "passport", "package_url": "https://pypi.org/project/passport/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/passport/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/gmr/passport"}, "release_url": "https://pypi.org/project/passport/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Light weight configuration management using Consul", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Light weight configuration management using Consul</em></p>\n<p>Passport is a command line tool for rendering templates containing information\ngained from Consul\u2019s Service Discovery API and Key/Value database.</p>\n<p><a href=\"http://badge.fury.io/py/passport\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e1778a664dc817f7cae2ac3b56059663e6787ea/68747470733a2f2f62616467652e667572792e696f2f70792f70617373706f72742e7376673f\"></a> <a href=\"https://pypi.python.org/pypi/passport\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d7ba0528af909b46c4d199482ba0d33cbdab9dac/68747470733a2f2f70797069702e696e2f642f70617373706f72742f62616467652e7376673f\"></a> <a href=\"https://pypi.python.org/pypi/passport\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8bf623d4acf7e170bcd9c48ee63808e1c11912c0/68747470733a2f2f70797069702e696e2f6c6963656e73652f70617373706f72742f62616467652e7376673f\"></a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Passport is available via <a href=\"https://pypi.python.org/pypi/passport\" rel=\"nofollow\">pypi</a> and\ncan be installed with easy_install or pip:</p>\n<pre>pip install passport\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>usage: passport.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--host HOST<span class=\"o\">]</span> <span class=\"o\">[</span>--port PORT<span class=\"o\">]</span> <span class=\"o\">[</span>--datacenter DATACENTER<span class=\"o\">]</span>\n                   <span class=\"o\">{</span>kv,file<span class=\"o\">}</span> path destination\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>As an example, the following template is stored in the KV database as\n<tt>templates/memcached/memcached.conf</tt></p>\n<pre><span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"nb\">set</span> <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">:</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'Address'</span><span class=\"p\">],</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'ServicePort'</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">consul</span><span class=\"o\">.</span><span class=\"n\">catalog</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"p\">(</span><span class=\"s1\">'memcached'</span><span class=\"p\">)]</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n\n<span class=\"p\">[</span><span class=\"n\">memcached</span><span class=\"p\">]</span>\n    <span class=\"n\">servers</span> <span class=\"o\">=</span> <span class=\"p\">{{</span> <span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">)</span> <span class=\"p\">}}</span>\n</pre>\n<p>Invoking passport will render the file with a list of all memcached nodes to\n<tt>/etc/memcached.conf</tt>.</p>\n<pre>passport kv templates/memcached/memcached.conf /etc/memcached.conf\n</pre>\n<p>And the output would look something like:</p>\n<pre><span class=\"k\">[memcached]</span>\n    <span class=\"na\">servers</span> <span class=\"o\">=</span> <span class=\"s\">172.17.0.7:11211,172.17.0.8:11211</span>\n</pre>\n<p>Template rendering is done via the <a href=\"https://tornado.readthedocs.org/en/latest/template.html\" rel=\"nofollow\">Tornado Template</a> engine.</p>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>Add a <em>managed</em> mode where Passport will check for new services on a regular interval and when changes occur, update the rendered template and notify a process using HUP</li>\n<li>Add daemonization for managed mode</li>\n<li>Add the ability to specify pairs of templates/destinations in a single invocation</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1165857, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6ee1b72acd41d7f41ef37a09722086dd", "sha256": "48ce6372cf2c09a67847b68c45acd765b3458657ac557c95366b6e6f6a0e7c78"}, "downloads": -1, "filename": "passport-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6ee1b72acd41d7f41ef37a09722086dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4147, "upload_time": "2014-07-22T18:27:59", "upload_time_iso_8601": "2014-07-22T18:27:59.146624Z", "url": "https://files.pythonhosted.org/packages/2f/6c/34708e0d225d87e3a8f4385cddb7ddf9158327b00773c680489048d53284/passport-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c3f478bf8a46236006e602945ea2cb76", "sha256": "5c8e545ffea7cc581cac26b173de53acff602766522656be8deacb601fa2e068"}, "downloads": -1, "filename": "passport-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c3f478bf8a46236006e602945ea2cb76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4392, "upload_time": "2014-07-22T18:36:01", "upload_time_iso_8601": "2014-07-22T18:36:01.366423Z", "url": "https://files.pythonhosted.org/packages/2a/30/1f1542a65510253e80ef838b347946e9e66ae4e4512fa24dbfc230043644/passport-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c3f478bf8a46236006e602945ea2cb76", "sha256": "5c8e545ffea7cc581cac26b173de53acff602766522656be8deacb601fa2e068"}, "downloads": -1, "filename": "passport-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c3f478bf8a46236006e602945ea2cb76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4392, "upload_time": "2014-07-22T18:36:01", "upload_time_iso_8601": "2014-07-22T18:36:01.366423Z", "url": "https://files.pythonhosted.org/packages/2a/30/1f1542a65510253e80ef838b347946e9e66ae4e4512fa24dbfc230043644/passport-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:04 2020"}