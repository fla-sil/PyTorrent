{"info": {"author": "Lea Provenzano", "author_email": "leaprovenzano@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=============\ncollectionish\n=============\n\n.. image:: https://img.shields.io/pypi/v/collectionish.svg\n        :target: https://pypi.python.org/pypi/collectionish\n\n.. image:: https://img.shields.io/travis/leaprovenzano/collectionish.svg\n        :target: https://travis-ci.com/leaprovenzano/collectionish\n\n.. image:: https://readthedocs.org/projects/collectionish/badge/?version=latest\n        :target: https://collectionish.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n----\n\n* Free software: MIT license\n* Documentation: https://collectionish.readthedocs.io.\n\n----\n\nCollectionish is a pure python library extending the basic collection data types and operations for working with them.\n\nGetting Started:\n~~~~~~~~~~~~~~~~\n\nInstall the latest stable version with pip::\n\n   $ pip install collectionish\n\n**A quick note about python version support**:\n\n``collectionish`` works with python 3 and has been fully tested with\npython 3.7 and 3.8. There is no plan to support backwards compatability\nfor python 2 or 3.5.\n\n**Checkout the docs**:\n\nIt's best to checkout the `docs`_. There you'll find detailed\ndocumentation of ``collectionish``'s features and lots of examples of\nhow to use them.\n\nWhat's is it?\n~~~~~~~~~~~~~\n\nPython is a wonderful language when it comes to extending inbuilt types\nand making things that quack. ``collectionish`` subscribes to the\nideology that the behaviour of data structures belongs *in* data\nstructures and that it's better and more graceful to bake the behavior\ninto a type than to complicate surrounding business logic creating many\nmore wtf moments and room for bugs to sneak in.\n\nPython's own `collections`_ module is a great example. take\n``defaultdict``, how many times have you seen something like this?\n\n.. code:: python\n\n\n   pets = [('cat', 'tabby'),\n           ('cat', 'ginger'),\n           ('dog', 'beagle'),\n           ('dog', 'poodle'),\n           ('lizard', 'gecko')\n          ]\n\n   pet_dict = {}\n   for typ, subtyp in pets:\n       try:\n           pet_dict[typ].append(subtyp)\n       except KeyError:\n           # now we'll need to make an comment to explain...\n           # if the key doesn't exist pet_dict we make a new\n           # list containing the pet's subtype\n           pet_dict[typ] = [subtyp]\n\n\nvs:\n\n.. code:: python\n\n\n   from collections import defaultdict\n\n   pet_dict = defaultdict(list)\n   for typ, subtyp in pets:\n       pet_dict[typ].append(subtyp)\n\n``collectionish`` adds some extra collections such like `AttyDict`_ (a\nstraightforward recursive dot access ``dict`` ) and `UniqueTuple`_ ( a\ntuple of unique items that remembers insertion order). New collections\nwill be added fairly regularly on the basis that they are generic enough\nand useful enough that i find myself repeating them in other projects.\n\nIn addition to data structures ``collectionish`` also provides some\noperations for working with data structures (from both standard python\nand ``collections``) like the recursive getters and setters\n`collectionish.ops`_.\n\nPrinciples:\n~~~~~~~~~~~\n\n**useful enough:**\n    Inspirations for data structures should come from stuff we've written or needed before at some point.\n\n**generic enough:**\n    To be extended within reason.\n\n**specific enough:**\n    To be clear about what things do. We don't aim to make *the* data structure or stand in for a pandas\n    dataframe that does everything.\n\n**intuitive enough**:\n    type hinting should generally work the same as it does with parent types, signatures should not be wildly\n    different, obvious magic methods or such as ``__iter__`` should not generally be missing from data types.\n\n**documented enough:**\n    All public structures and ops should be documented and have doctest examples so we know its correct and\n    It should be fairly obvious from somethings name what it is.\n\n**tested more than enough:**\n    we test with the excellent `hypothesis`_ library wherever possible. We do doctests to keep documentation correct.\n\n.. _docs: https://collectionish.readthedocs.io\n.. _collections: https://docs.python.org/library/collections.html\n.. _AttyDict: https://collectionish.readthedocs.io/_autosummary/collectionish.AttyDict.html\n.. _UniqueTuple: https://collectionish.readthedocs.io/_autosummary/collectionish.UniqueTuple.html\n.. _collectionish.ops: https://collectionish.readthedocs.io/en/stable/_autosummary/collectionish.ops.html#module-collectionish.ops\n.. _hypothesis: https://github.com/HypothesisWorks/hypothesis", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leaprovenzano/collectionish", "keywords": "collectionish", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "collectionish", "package_url": "https://pypi.org/project/collectionish/", "platform": "", "project_url": "https://pypi.org/project/collectionish/", "project_urls": {"Homepage": "https://github.com/leaprovenzano/collectionish"}, "release_url": "https://pypi.org/project/collectionish/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Collectionish is a pure python library extending the basic collection data types and operations for working with them.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/collectionish\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/collectionish.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d36728428bfda85f46c5e4efbc6a8641ac847773/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f6c6c656374696f6e6973682e737667\"></a>\n<a href=\"https://travis-ci.com/leaprovenzano/collectionish\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/leaprovenzano/collectionish.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77df3558a1ad93cfcc8ea3ad656b2da4cdd63316/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6c656170726f76656e7a616e6f2f636f6c6c656374696f6e6973682e737667\"></a>\n<a href=\"https://collectionish.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c55f17babc5850014efa9923a04b11d4d9d4f49b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636f6c6c656374696f6e6973682f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<hr class=\"docutils\">\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://collectionish.readthedocs.io\" rel=\"nofollow\">https://collectionish.readthedocs.io</a>.</li>\n</ul>\n<hr class=\"docutils\">\n<p>Collectionish is a pure python library extending the basic collection data types and operations for working with them.</p>\n<div id=\"getting-started\">\n<h2>Getting Started:</h2>\n<p>Install the latest stable version with pip:</p>\n<pre>$ pip install collectionish\n</pre>\n<p><strong>A quick note about python version support</strong>:</p>\n<p><tt>collectionish</tt> works with python 3 and has been fully tested with\npython 3.7 and 3.8. There is no plan to support backwards compatability\nfor python 2 or 3.5.</p>\n<p><strong>Checkout the docs</strong>:</p>\n<p>It\u2019s best to checkout the <a href=\"https://collectionish.readthedocs.io\" rel=\"nofollow\">docs</a>. There you\u2019ll find detailed\ndocumentation of <tt>collectionish</tt>\u2019s features and lots of examples of\nhow to use them.</p>\n</div>\n<div id=\"what-s-is-it\">\n<h2>What\u2019s is it?</h2>\n<p>Python is a wonderful language when it comes to extending inbuilt types\nand making things that quack. <tt>collectionish</tt> subscribes to the\nideology that the behaviour of data structures belongs <em>in</em> data\nstructures and that it\u2019s better and more graceful to bake the behavior\ninto a type than to complicate surrounding business logic creating many\nmore wtf moments and room for bugs to sneak in.</p>\n<p>Python\u2019s own <a href=\"https://docs.python.org/library/collections.html\" rel=\"nofollow\">collections</a> module is a great example. take\n<tt>defaultdict</tt>, how many times have you seen something like this?</p>\n<pre><span class=\"n\">pets</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'cat'</span><span class=\"p\">,</span> <span class=\"s1\">'tabby'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'cat'</span><span class=\"p\">,</span> <span class=\"s1\">'ginger'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'beagle'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'poodle'</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">'lizard'</span><span class=\"p\">,</span> <span class=\"s1\">'gecko'</span><span class=\"p\">)</span>\n       <span class=\"p\">]</span>\n\n<span class=\"n\">pet_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">for</span> <span class=\"n\">typ</span><span class=\"p\">,</span> <span class=\"n\">subtyp</span> <span class=\"ow\">in</span> <span class=\"n\">pets</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">pet_dict</span><span class=\"p\">[</span><span class=\"n\">typ</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">subtyp</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># now we'll need to make an comment to explain...</span>\n        <span class=\"c1\"># if the key doesn't exist pet_dict we make a new</span>\n        <span class=\"c1\"># list containing the pet's subtype</span>\n        <span class=\"n\">pet_dict</span><span class=\"p\">[</span><span class=\"n\">typ</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">subtyp</span><span class=\"p\">]</span>\n</pre>\n<p>vs:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n\n<span class=\"n\">pet_dict</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">typ</span><span class=\"p\">,</span> <span class=\"n\">subtyp</span> <span class=\"ow\">in</span> <span class=\"n\">pets</span><span class=\"p\">:</span>\n    <span class=\"n\">pet_dict</span><span class=\"p\">[</span><span class=\"n\">typ</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">subtyp</span><span class=\"p\">)</span>\n</pre>\n<p><tt>collectionish</tt> adds some extra collections such like <a href=\"https://collectionish.readthedocs.io/_autosummary/collectionish.AttyDict.html\" rel=\"nofollow\">AttyDict</a> (a\nstraightforward recursive dot access <tt>dict</tt> ) and <a href=\"https://collectionish.readthedocs.io/_autosummary/collectionish.UniqueTuple.html\" rel=\"nofollow\">UniqueTuple</a> ( a\ntuple of unique items that remembers insertion order). New collections\nwill be added fairly regularly on the basis that they are generic enough\nand useful enough that i find myself repeating them in other projects.</p>\n<p>In addition to data structures <tt>collectionish</tt> also provides some\noperations for working with data structures (from both standard python\nand <tt>collections</tt>) like the recursive getters and setters\n<a href=\"https://collectionish.readthedocs.io/en/stable/_autosummary/collectionish.ops.html#module-collectionish.ops\" rel=\"nofollow\">collectionish.ops</a>.</p>\n</div>\n<div id=\"principles\">\n<h2>Principles:</h2>\n<dl>\n<dt><strong>useful enough:</strong></dt>\n<dd>Inspirations for data structures should come from stuff we\u2019ve written or needed before at some point.</dd>\n<dt><strong>generic enough:</strong></dt>\n<dd>To be extended within reason.</dd>\n<dt><strong>specific enough:</strong></dt>\n<dd>To be clear about what things do. We don\u2019t aim to make <em>the</em> data structure or stand in for a pandas\ndataframe that does everything.</dd>\n<dt><strong>intuitive enough</strong>:</dt>\n<dd>type hinting should generally work the same as it does with parent types, signatures should not be wildly\ndifferent, obvious magic methods or such as <tt>__iter__</tt> should not generally be missing from data types.</dd>\n<dt><strong>documented enough:</strong></dt>\n<dd>All public structures and ops should be documented and have doctest examples so we know its correct and\nIt should be fairly obvious from somethings name what it is.</dd>\n<dt><strong>tested more than enough:</strong></dt>\n<dd>we test with the excellent <a href=\"https://github.com/HypothesisWorks/hypothesis\" rel=\"nofollow\">hypothesis</a> library wherever possible. We do doctests to keep documentation correct.</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 6380258, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e3ba2eeb44e0dc9432ec2cac49303adc", "sha256": "fd855f797b43a704f3407dca365176bc59f1534e4e9d2109e739da1c845aa8e4"}, "downloads": -1, "filename": "collectionish-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e3ba2eeb44e0dc9432ec2cac49303adc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10065, "upload_time": "2019-12-30T18:08:31", "upload_time_iso_8601": "2019-12-30T18:08:31.385978Z", "url": "https://files.pythonhosted.org/packages/ae/3e/5e13c5f0573f6cca00bfa3bd0569d2fb06242fc9ac39437314a847499c13/collectionish-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e0552ff79d75dbdca189f2ed30ebad0c", "sha256": "3e246d1779e0f17cb3865a945589725dd0da3d126e69e6f5aebc30b3662df188"}, "downloads": -1, "filename": "collectionish-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e0552ff79d75dbdca189f2ed30ebad0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10013, "upload_time": "2019-12-30T18:44:33", "upload_time_iso_8601": "2019-12-30T18:44:33.097577Z", "url": "https://files.pythonhosted.org/packages/f4/a0/7e68577f11195d4a9a25b5e1f7a026226d88b7355df8c01ecb80f294b70c/collectionish-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f38a7fda0f69712a8672e66ac303c38b", "sha256": "445aa7595fbbfc288f4fc57992065bc2350543e0c902ddda157026c3e856375b"}, "downloads": -1, "filename": "collectionish-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f38a7fda0f69712a8672e66ac303c38b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12567, "upload_time": "2019-12-31T18:01:46", "upload_time_iso_8601": "2019-12-31T18:01:46.972855Z", "url": "https://files.pythonhosted.org/packages/ee/08/b1fd04f573bf326514a1c7e9bbeab8f388ba38980d8290add5ee44db2fb5/collectionish-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f38a7fda0f69712a8672e66ac303c38b", "sha256": "445aa7595fbbfc288f4fc57992065bc2350543e0c902ddda157026c3e856375b"}, "downloads": -1, "filename": "collectionish-0.1.2.tar.gz", "has_sig": false, "md5_digest": "f38a7fda0f69712a8672e66ac303c38b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12567, "upload_time": "2019-12-31T18:01:46", "upload_time_iso_8601": "2019-12-31T18:01:46.972855Z", "url": "https://files.pythonhosted.org/packages/ee/08/b1fd04f573bf326514a1c7e9bbeab8f388ba38980d8290add5ee44db2fb5/collectionish-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:03 2020"}