{"info": {"author": "Robin 'r0w' Weiland", "author_email": "robinweiland@gmx.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": "# letmegetcoffee\nA python module that provides functionality to notify you when something\ngoes wrong\n\n# Usage\n\n    from letmegetcoffee import lmgc  # or use wild import since it equals to lmgc only\n\nerror(s) to catch; defaults to (Exception,); not necessary to set\n\n    lmgc.EXCEPTIONS = ValueError\n\nwhat to do if an error occurred; necessary to set after import, since it\ndefaults to `print` and just silently prints the exception-object\n\n    lmgc.ON_EXCEPTION = lmgc.on_exception_beep\n\n# on_exception_ - functions\n\n- ```on_exception_beep(e):```\n\n     Beep in a while loop to notify if something goes wrong.\n     **Remeber to turn your volume up**\n\n- ```on_exception_mail(e):``` **[IN DEVELOPEMENT]**\n\n    Send an email to notify if something goes wrong.\n\n- ```on_exception_webpage(e):```  **[IN DEVELOPEMENT]**\n\n    Host a webpage inside the local network to show the state of the\n    running program.\n    Seems unlikly though since hosting an http server (during the entire\n    runtime, not only when an error occured) is a rather\n    resource-expensive task\n\nIt is also possible to use your own function. Just note:\n\n- the function has to take the excepion-object as an argument\n\n    exception-object like in ```except Exception as e: pass```\n\n- ```lmgc.ON_EXCEPTION = yourFunction``` has to be set before the\n  decorator is used\n\n\n# Example\n```\nfrom random import randint\nfrom letmegetcoffee import lmgc\nlmgc.ON_EXCEPTION = lmgc.on_exception_beep\n\n\n@lmgc.catch\ndef testing(number, message):\n    print(message)\n    while True: number / randint(0, number)\n\n\nif __name__ == '__main__':\n    testing(1000000, message='Hello World!!!')  # args and kwargs work\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RoW171/letmegetcoffee", "keywords": "exception notification", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "letmegetcoffee", "package_url": "https://pypi.org/project/letmegetcoffee/", "platform": "", "project_url": "https://pypi.org/project/letmegetcoffee/", "project_urls": {"Homepage": "https://github.com/RoW171/letmegetcoffee"}, "release_url": "https://pypi.org/project/letmegetcoffee/0.1.0/", "requires_dist": null, "requires_python": ">=3", "summary": "Provides functionality to notify if an exception occurred", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>letmegetcoffee</h1>\n<p>A python module that provides functionality to notify you when something\ngoes wrong</p>\n<h1>Usage</h1>\n<pre><code>from letmegetcoffee import lmgc  # or use wild import since it equals to lmgc only\n</code></pre>\n<p>error(s) to catch; defaults to (Exception,); not necessary to set</p>\n<pre><code>lmgc.EXCEPTIONS = ValueError\n</code></pre>\n<p>what to do if an error occurred; necessary to set after import, since it\ndefaults to <code>print</code> and just silently prints the exception-object</p>\n<pre><code>lmgc.ON_EXCEPTION = lmgc.on_exception_beep\n</code></pre>\n<h1>on_exception_ - functions</h1>\n<ul>\n<li>\n<p><code>on_exception_beep(e):</code></p>\n<p>Beep in a while loop to notify if something goes wrong.\n<strong>Remeber to turn your volume up</strong></p>\n</li>\n<li>\n<p><code>on_exception_mail(e):</code> <strong>[IN DEVELOPEMENT]</strong></p>\n<p>Send an email to notify if something goes wrong.</p>\n</li>\n<li>\n<p><code>on_exception_webpage(e):</code>  <strong>[IN DEVELOPEMENT]</strong></p>\n<p>Host a webpage inside the local network to show the state of the\nrunning program.\nSeems unlikly though since hosting an http server (during the entire\nruntime, not only when an error occured) is a rather\nresource-expensive task</p>\n</li>\n</ul>\n<p>It is also possible to use your own function. Just note:</p>\n<ul>\n<li>\n<p>the function has to take the excepion-object as an argument</p>\n<p>exception-object like in <code>except Exception as e: pass</code></p>\n</li>\n<li>\n<p><code>lmgc.ON_EXCEPTION = yourFunction</code> has to be set before the\ndecorator is used</p>\n</li>\n</ul>\n<h1>Example</h1>\n<pre><code>from random import randint\nfrom letmegetcoffee import lmgc\nlmgc.ON_EXCEPTION = lmgc.on_exception_beep\n\n\n@lmgc.catch\ndef testing(number, message):\n    print(message)\n    while True: number / randint(0, number)\n\n\nif __name__ == '__main__':\n    testing(1000000, message='Hello World!!!')  # args and kwargs work\n\n</code></pre>\n\n          </div>"}, "last_serial": 5064816, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f5d545ceb40983711b6707e6428576c6", "sha256": "37edc9f49995f9e4cf6d061694c5aa8ed893a838885a10c40bade4db0e8b2fd8"}, "downloads": -1, "filename": "letmegetcoffee-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f5d545ceb40983711b6707e6428576c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4413, "upload_time": "2019-04-02T16:49:04", "upload_time_iso_8601": "2019-04-02T16:49:04.949167Z", "url": "https://files.pythonhosted.org/packages/5b/f0/208f7b0c4cf83f40a9d579f3b8823e7093b8cb3c6b148353bdd9b11e8015/letmegetcoffee-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d532426612c448192637ef16b5a55485", "sha256": "8ee9c954ee19a82f41092f26534adcb56bb134d700d98d392db8229e9144e508"}, "downloads": -1, "filename": "letmegetcoffee-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d532426612c448192637ef16b5a55485", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3284, "upload_time": "2019-04-02T16:49:07", "upload_time_iso_8601": "2019-04-02T16:49:07.169601Z", "url": "https://files.pythonhosted.org/packages/3b/e4/31832e650963d8561c402611ea8e3037234440b2c32a642d67da779dc62c/letmegetcoffee-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5d545ceb40983711b6707e6428576c6", "sha256": "37edc9f49995f9e4cf6d061694c5aa8ed893a838885a10c40bade4db0e8b2fd8"}, "downloads": -1, "filename": "letmegetcoffee-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f5d545ceb40983711b6707e6428576c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4413, "upload_time": "2019-04-02T16:49:04", "upload_time_iso_8601": "2019-04-02T16:49:04.949167Z", "url": "https://files.pythonhosted.org/packages/5b/f0/208f7b0c4cf83f40a9d579f3b8823e7093b8cb3c6b148353bdd9b11e8015/letmegetcoffee-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d532426612c448192637ef16b5a55485", "sha256": "8ee9c954ee19a82f41092f26534adcb56bb134d700d98d392db8229e9144e508"}, "downloads": -1, "filename": "letmegetcoffee-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d532426612c448192637ef16b5a55485", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3284, "upload_time": "2019-04-02T16:49:07", "upload_time_iso_8601": "2019-04-02T16:49:07.169601Z", "url": "https://files.pythonhosted.org/packages/3b/e4/31832e650963d8561c402611ea8e3037234440b2c32a642d67da779dc62c/letmegetcoffee-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:55 2020"}