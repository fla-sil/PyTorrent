{"info": {"author": "Daniel Kn\u00fcttel", "author_email": "daknuett@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.5"], "description": "Python3 NUIO\n************\n\n\nnuio is an attempt to add a standardized\nand easy-to-use user input/output interface for python.\n\nThe goal is to provide a set of classes with *print-alike-operating* methods\nand a few other methods for markup & co to deal with user input/output.\n\nFeatures\n========\n\nCurrently nuio is able to eal with POSIX Terminals.\nThe corresponding classes are in ``nuio.input.terminal`` and ``nio.output.terminal``.\n\nPhilosopy\n=========\n\nnuio tries to keep stuff as simple as possible,\nbut it requires python3.5.1+ language features.\n\nAny blocking user-input is done using async features, this\nwill become handy in future.\n\n\nPlans\n=====\n\nThe following features should be added:\n\n- curses based I/O\n- an AJAX based I/O system\n- non-POSIX terminals\n- fancy frames for BlockOutput\n\n\nExample\n=======\n\nThis is a simple example for nuio:\n\n::\n\n\t#!/usr/bin/python3\n\n\tfrom nuio.input.terminal import POSIXTerminalInput\n\tfrom nuio.output.terminal import TerminalOutput, ESCAPES, TerminalBlockOutput\n\timport asyncio, shutil\n\n\n\tasync def main():\n\t\twidth, height = shutil.get_terminal_size()\n\n\t\t# an output device\n\t\tout = TerminalBlockOutput(height - 10, width)\n\t\tout.print(\"This is a test\")\n\n\t\t# input devices require an output device to handle prompts.\n\t\tinp = POSIXTerminalInput(out)\n\n\t\tdata = await inp.input_int(prompt = \"enter an integer > \")\n\n\t\t# You are able to use a bunch of ANSI escape sequences.\n\t\t# Usually you should use nuio.output.terminal.colors instead,\n\t\t# this will be compatible with other output devices.\n\n\t\tout.print_colored(ESCAPES[\"underline\"], \"you entered:\", data)\n\n\t\tdata = await inp.input_int(prompt = \"enter an integer [4-100] > \",\n\t\t\t\trange = range(4, 100))\n\t\tout.print_colored(ESCAPES[\"fg_red\"], \"you entered:\", data)\n\n\t\tdata = await inp.input_float(prompt = \"enter an float [4-100] > \",\n\t\t\t\trange = range(4, 100))\n\t\tout.print_colored(ESCAPES[\"bg_cyan\"] + ESCAPES[\"fg_black\"], \"you entered:\", data)\n\n\n\n\t# Usually you should make the input async,\n\t# but to simplify this the complete main function is async.\n\tloop = asyncio.get_event_loop()\n\tloop.run_until_complete(main())\n\tloop.close()\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/daknuett/python3-nuio", "keywords": "input output user stdio", "license": "GPL v3", "maintainer": "", "maintainer_email": "", "name": "nuio", "package_url": "https://pypi.org/project/nuio/", "platform": "", "project_url": "https://pypi.org/project/nuio/", "project_urls": {"Homepage": "https://github.com/daknuett/python3-nuio"}, "release_url": "https://pypi.org/project/nuio/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "A user I/O handler", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>nuio is an attempt to add a standardized\nand easy-to-use user input/output interface for python.</p>\n<p>The goal is to provide a set of classes with <em>print-alike-operating</em> methods\nand a few other methods for markup &amp; co to deal with user input/output.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<p>Currently nuio is able to eal with POSIX Terminals.\nThe corresponding classes are in <tt>nuio.input.terminal</tt> and <tt>nio.output.terminal</tt>.</p>\n</div>\n<div id=\"philosopy\">\n<h2>Philosopy</h2>\n<p>nuio tries to keep stuff as simple as possible,\nbut it requires python3.5.1+ language features.</p>\n<p>Any blocking user-input is done using async features, this\nwill become handy in future.</p>\n</div>\n<div id=\"plans\">\n<h2>Plans</h2>\n<p>The following features should be added:</p>\n<ul>\n<li>curses based I/O</li>\n<li>an AJAX based I/O system</li>\n<li>non-POSIX terminals</li>\n<li>fancy frames for BlockOutput</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>This is a simple example for nuio:</p>\n<pre>#!/usr/bin/python3\n\nfrom nuio.input.terminal import POSIXTerminalInput\nfrom nuio.output.terminal import TerminalOutput, ESCAPES, TerminalBlockOutput\nimport asyncio, shutil\n\n\nasync def main():\n        width, height = shutil.get_terminal_size()\n\n        # an output device\n        out = TerminalBlockOutput(height - 10, width)\n        out.print(\"This is a test\")\n\n        # input devices require an output device to handle prompts.\n        inp = POSIXTerminalInput(out)\n\n        data = await inp.input_int(prompt = \"enter an integer &gt; \")\n\n        # You are able to use a bunch of ANSI escape sequences.\n        # Usually you should use nuio.output.terminal.colors instead,\n        # this will be compatible with other output devices.\n\n        out.print_colored(ESCAPES[\"underline\"], \"you entered:\", data)\n\n        data = await inp.input_int(prompt = \"enter an integer [4-100] &gt; \",\n                        range = range(4, 100))\n        out.print_colored(ESCAPES[\"fg_red\"], \"you entered:\", data)\n\n        data = await inp.input_float(prompt = \"enter an float [4-100] &gt; \",\n                        range = range(4, 100))\n        out.print_colored(ESCAPES[\"bg_cyan\"] + ESCAPES[\"fg_black\"], \"you entered:\", data)\n\n\n\n# Usually you should make the input async,\n# but to simplify this the complete main function is async.\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\nloop.close()\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2651278, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "24ea720e66d5e050c2e7030403da9a71", "sha256": "07fec5696250c118d8738c028d4a0d3005fd1d6964e11dfbe6c7319a59aa5fcb"}, "downloads": -1, "filename": "nuio-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "24ea720e66d5e050c2e7030403da9a71", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9640, "upload_time": "2017-02-06T14:02:05", "upload_time_iso_8601": "2017-02-06T14:02:05.932195Z", "url": "https://files.pythonhosted.org/packages/f5/b6/b4c9679882f179887a37bc7f5bb243c6992d4c7fc504da1456233e228a99/nuio-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "221a7b75a0874fbb2418530c8c4ce1e0", "sha256": "3855f9adbc34876fc47f9f251b6407d41cfe3b2ce7f9b85380031259f3226fc0"}, "downloads": -1, "filename": "nuio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "221a7b75a0874fbb2418530c8c4ce1e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6145, "upload_time": "2017-02-06T14:02:20", "upload_time_iso_8601": "2017-02-06T14:02:20.790459Z", "url": "https://files.pythonhosted.org/packages/b7/05/ece9afe38383827706461b153c802558be6f066cd2c2240b5d9b99778503/nuio-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "112ea58a7480f26eeebe410f1d838a2f", "sha256": "285923b356fe7b2f5f420de308cdc41a82148dc4429aacef20d9360a8e77bf1e"}, "downloads": -1, "filename": "nuio-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "112ea58a7480f26eeebe410f1d838a2f", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9648, "upload_time": "2017-02-13T08:03:59", "upload_time_iso_8601": "2017-02-13T08:03:59.680552Z", "url": "https://files.pythonhosted.org/packages/4e/10/726231c7ff042d8379a43a0a8d2d6f0413c4d9190fefdd69d159cf68eff1/nuio-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c51262ad54891a3b3226500930adcab", "sha256": "3be5a5bf4f74399b0f836660378af7b67fe26416e42874d0db785355b1fe121c"}, "downloads": -1, "filename": "nuio-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0c51262ad54891a3b3226500930adcab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6164, "upload_time": "2017-02-13T08:04:13", "upload_time_iso_8601": "2017-02-13T08:04:13.993329Z", "url": "https://files.pythonhosted.org/packages/ca/c2/dbe9a894209769e9168b7ec2c1a7824fbcbf2bb6f06fe7e33a236488a41b/nuio-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "59aea670148ac36ebb2cf52bd51d93bb", "sha256": "386f3e450f0b3f55b6620c06be794d057b0c9464d0af15684e4a272ff51a9b76"}, "downloads": -1, "filename": "nuio-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "59aea670148ac36ebb2cf52bd51d93bb", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9649, "upload_time": "2017-02-13T08:19:20", "upload_time_iso_8601": "2017-02-13T08:19:20.208448Z", "url": "https://files.pythonhosted.org/packages/c4/89/8bd58ab4955e49fdde947d128fb443867801d474dcb58b66443ab7ef393d/nuio-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6ac80933099d400ce1a2e055fd69867", "sha256": "ae4a7f90ba02e7000d7bf98463d0ad58c67c42881d6a45b4d1f5c035f7a76d94"}, "downloads": -1, "filename": "nuio-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a6ac80933099d400ce1a2e055fd69867", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6163, "upload_time": "2017-02-13T08:19:52", "upload_time_iso_8601": "2017-02-13T08:19:52.835457Z", "url": "https://files.pythonhosted.org/packages/95/b2/43d89b3a798b6e20fcdc8cfe1039d60ecbc08e5e09d1074a673d3c17fe13/nuio-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "fb09a18fd81dbbe17e2dd96e9c719c36", "sha256": "3bc1de853ac737e8e8d24bfc1379d5d45df094e97ccf7d7cfa51bcabcd0cd68d"}, "downloads": -1, "filename": "nuio-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "fb09a18fd81dbbe17e2dd96e9c719c36", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9699, "upload_time": "2017-02-18T09:25:31", "upload_time_iso_8601": "2017-02-18T09:25:31.956299Z", "url": "https://files.pythonhosted.org/packages/6b/18/0f454c859bbacbcabcd5391dab0afa6102adb172b6d9d5e06514f75e3289/nuio-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd56b0e01c174704b4fd669692fcc6c6", "sha256": "7a36590cba768925be97113849a1524ba6b7ed39787f2fd0689d0e0a30aca2ac"}, "downloads": -1, "filename": "nuio-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bd56b0e01c174704b4fd669692fcc6c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6219, "upload_time": "2017-02-18T09:25:40", "upload_time_iso_8601": "2017-02-18T09:25:40.733406Z", "url": "https://files.pythonhosted.org/packages/d9/27/2baa3afd37fddc91388606686d6e75a291d83be34727c564b88e42c752a7/nuio-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb09a18fd81dbbe17e2dd96e9c719c36", "sha256": "3bc1de853ac737e8e8d24bfc1379d5d45df094e97ccf7d7cfa51bcabcd0cd68d"}, "downloads": -1, "filename": "nuio-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "fb09a18fd81dbbe17e2dd96e9c719c36", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 9699, "upload_time": "2017-02-18T09:25:31", "upload_time_iso_8601": "2017-02-18T09:25:31.956299Z", "url": "https://files.pythonhosted.org/packages/6b/18/0f454c859bbacbcabcd5391dab0afa6102adb172b6d9d5e06514f75e3289/nuio-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd56b0e01c174704b4fd669692fcc6c6", "sha256": "7a36590cba768925be97113849a1524ba6b7ed39787f2fd0689d0e0a30aca2ac"}, "downloads": -1, "filename": "nuio-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bd56b0e01c174704b4fd669692fcc6c6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6219, "upload_time": "2017-02-18T09:25:40", "upload_time_iso_8601": "2017-02-18T09:25:40.733406Z", "url": "https://files.pythonhosted.org/packages/d9/27/2baa3afd37fddc91388606686d6e75a291d83be34727c564b88e42c752a7/nuio-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:17 2020"}