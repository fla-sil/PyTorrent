{"info": {"author": "Joshua Jamison", "author_email": "joshjamison1@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Jawf\nJust Another Web Framework - streamlining flask application development\n\n## Setup\n\n    $git clone https://github.com/codemation/Jawf.git\n\n    $ sudo ./setup.py install\n\n    $ jawf --help\n\n## Basic Usage\n\n### Initialize a JAWF Project directory\n\n    $ jawf --init <projName> \n\n    $ jawf --init Project1\n\n    Not inside existing jawf project\n    Succesfully created jawf project: Project1\n\n### Add an app to project\n\n    Usage: jawf --add-app <app-name> [--route <urlpattern> default: /app-name]\n    $ jawf --add-app myfirstapp\n    $ jawf --add-app homepage --route /\n\n    $ jawf --add-app myfirstapp\n    Not inside existing jawf project\n    --add-app\n    must be used within an existing project directory\n    or combined with --project <project-path> \n\n    $ cd Project1/\n    /Project1 $ jawf --add-app myfirstapp\n    Detected Existing project:Project1\n    app myfirstapp was created successfully within /home/josh/python/mysql/Project1/\n\nThis creates an application which is immedietly wired up to the project. Can be tested right away. \n\n    /Project1$ python3 server.py \n    * Serving Flask app \"server\" (lazy loading)\n    * Environment: production\n    WARNING: This is a development server. Do not use it in a production deployment.\n    Use a production WSGI server instead.\n    * Debug mode: on\n    * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)\n    * Restarting with stat\n    * Debugger is active!\n    * Debugger PIN: 144-714-176\n\n    $ curl http://0.0.0.0:8080/myfirstapp\n    <h1>Hello myfirstapp World</h1>\n\nA closer look at the skeleton of the application created.\n\n    Project1/apps/myfirstapp/myfirstapp.py\n\n    # myfirstapp\n    def run(server):\n        # Add import libraries here, run only once, when server is started\n        @server.route('/myfirstapp')\n        def myfirstapp_func():\n            # Add repeatable logic here, run as often as endpoint is called.\n            print(\"Hello myfirstapp World\") \n            return \"<h1>Hello myfirstapp World</h1>\", 200\n\nIf you are familiar with flask routing, this is exactly the same. The work of wiring together multiple endpoints to a primary server app is done for you.    \n### Add an DB to project\n\nJAWF makes it easy to add new databaes, tables to a project as well as accessing the data in combination with [pyql]<https://github.com/codemation/pyql>\n\n#### Supported database types: sqlite3, mysql\n\n    jawf --add-db <db-name> [--type mysql default: sqlite3]\n    jawf --add-db finance --type mysql\n    jawf --add-db stocks \n\nsqlite3 is a builtin library with python3 and creates light-weight databases in place for storing / retreiving data. \n\n#### sqlite3\n\n    Project1$ jawf --add-db stocks\n    Detected Existing project:Project1\n    db stocks created successfully\n\nThis does not immedietly create a database until a table is added, and server is started.\n\n##### Lets have a look at the DB file created at Project1/dbs/stocks/\n\n    stocks_db.py\n\n    # stocks - type sqlite3\n    def run(server):\n        import sys, os\n        @server.route('/stocks_attach')\n        def stocks_attach():\n            config=dict()\n\n            with open('.cmddir', 'r') as projDir:\n                for projectPath in projDir:\n                    config['database'] = f'{projectPath}dbs/stocks/stocks'\n            #USE ENV PATH for PYQL library or /pyql/\n            sys.path.append('/pyql/' if os.getenv('PYQL_PATH') == None else os.getenv('PYQL_PATH'))\n            try:\n                import data, sqlite3\n                from . import setup\n                server.data['stocks'] = data.database(sqlite3.connect, **config)\n                setup.attach_tables(server)\n                return {\"status\": 200, \"message\": \"stocks attached successfully\"}, 200\n            except Exception as e:\n                return {\"status\": 200, \"message\": repr(e)}, 500\n        stocks_attach()\n\n##### Whats happening here:\nSimilar to app's there is an endpoint created to allow app developers control on when the web-server will attempt to access the DB\nThis becomes more useful with remote-db's or in micro-service deployments, when a DB server may not be ready as soon as the APP server. \n\n    # stocks - type sqlite3\n    def run(server):\n        import sys, os\n        @server.route('/stocks_attach')\n        def stocks_attach():\n            config=dict()\n\nHere we are first checking the project relative directory, as this is important wth sqlite3 databases which are always locally existing within the server.\nBy default, mysqlite Db will exist within dbs/db-name/db\n\n            with open('.cmddir', 'r') as projDir:\n                for projectPath in projDir:\n                    config['database'] = f'{projectPath}dbs/stocks/stocks'\n\nPYQL is a dependency. If not directly install int a venv, this can be accessed using a ENV Variable PYQL_PATH or default /pyql/ system path.\n\n            #USE ENV PATH for PYQL library or /pyql/\n            sys.path.append('/pyql/' if os.getenv('PYQL_PATH') == None else os.getenv('PYQL_PATH'))\n\nFinally PYQL libraryies are imported, and DB connector is attached to the server object (available in all JAWF apps), then tables are attached, and configured if not existing.\n\n            try:\n                import data, sqlite3\n                from . import setup\n                server.data['stocks'] = data.database(sqlite3.connect, **config)\n                setup.attach_tables(server)\n                return {\"status\": 200, \"message\": \"stocks attached successfully\"}, 200\n            except Exception as e:\n                return {\"status\": 200, \"message\": repr(e)}, 500\n\n\n#### mysql\n\n    Project1$$ jawf --add-db trades --type mysql\n    Detected Existing project:Project1\n    db trades created successfully \n\nDatabases must be created already within the mysql instance, as well as appropiate user / permissions for accessing the DB, creating tables.\n\n    trades.py\n\n    # trades - type mysql\n    def run(server):\n        import sys, os\n        @server.route('/trades_attach')\n        def trades_attach():\n            config=dict()\n\n            env = ['DB_USER','DB_PASSWORD','DB_HOST', 'DB_PORT']\n            conf = ['user','password','database','host','port']\n            try:\n                config = {cnfVal: os.getenv(dbVal).rstrip() for dbVal,cnfVal in zip(env,conf)}\n            except Exception as e:\n                print('Missing an environment variable')\n                config= {cnfVal: os.getenv(dbVal) for dbVal,cnfVal in zip(env,conf)}\n                print(config)\n                return {\n                    \"status\": 500, \n                    \"message\": \"Missing environment variable(s)\",\n                    \"env-vars\": config\n                }, 500 \n            #USE ENV PATH for PYQL library or /pyql/\n            sys.path.append('/pyql/' if os.getenv('PYQL_PATH') == None else os.getenv('PYQL_PATH'))\n            try:\n                import data, mysql\n                from . import setup\n                server.data['trades'] = data.database(mysql.connector.connect, **config)\n                setup.attach_tables(server)\n                return {\"status\": 200, \"message\": \"trades attached successfully\"}, 200\n            except Exception as e:\n                return {\"status\": 200, \"message\": repr(e)}, 500\n        trades_attach()\n\nMuch of the same logic is shared with SQLITE3 databases, but the most important different is the DB connector requirements. As this is not always a DB locally existing(it could be), we need to know a few more details on how to access the database.\n\nHere we are looking for 4 different ENV vars. These can be set in a number of different ways or passed into the /DB_NAME_attach endpoint via a POST request, passing in a JSON key-value pair for 'user','password','database','host','port'\n\n            env = ['DB_USER','DB_PASSWORD','DB_HOST', 'DB_PORT', DB_NAME]\n            conf = ['user','password','host','port', database]\n            try:\n                config = {cnfVal: os.getenv(dbVal).rstrip() for dbVal,cnfVal in zip(env,conf)}\n            except Exception as e:\n                print('Missing an environment variable')\n                config= {cnfVal: os.getenv(dbVal) for dbVal,cnfVal in zip(env,conf)}\n                print(config)\n                return {\n                    \"status\": 500, \n                    \"message\": \"Missing environment variable(s)\",\n                    \"env-vars\": config\n                }, 500 \n\n#### Add a Table to a DB\nDatabases are comprised of tables, so we need to configure the schema for each of the tables we want the JAWF project to create. PYQL will automatically discover tables which already exist and be made accessible via the server.data['databaseName'].tables['tableName']\n\n    jawf --add-db-table <db-name> --table <table-name>\n    jawf --add-db-table finance --table purchaseOrders\n\n    $ jawf --add-db-table trades --table daytrades\n    Detected Existing project:Project1\n    table daytrades config created within db trades\n\nThis creates a daytrades table within the tables dir of the trades database. \n\n    def db_attach(server):\n        db = server.data['trades']\n        # Example \n        # db.create_table(\n        #    'users', # table-name\n        #     [\n        #        ('userid', int, 'AUTOINCREMENT'),\n        #        ('username', str, 'UNIQUE NOT NULL'),\n        #        ('email', str, 'NOT NULL'),\n        #        ('join_date', str),\n        #        ('last_login', str),\n        #     ],\n        # 'userid' # Primary Key\n        # )\n        #UNCOMMENT Below to create\n        #\n        #db.create_table(\n        #    'daytrades', [\n        #        (), \n        #        (), \n        #        ()\n        #)\n        pass # Enter db.create_table statement here\n\nSee PYQL docs for more information Table SCHEMA usage, but the above template gets you started. \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/codemation/Jawf", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Jawf", "package_url": "https://pypi.org/project/Jawf/", "platform": "", "project_url": "https://pypi.org/project/Jawf/", "project_urls": {"Homepage": "https://github.com/codemation/Jawf"}, "release_url": "https://pypi.org/project/Jawf/0.3/", "requires_dist": ["flask"], "requires_python": ">=3.4, <4", "summary": "Just Another Web Framework - streamlining flask application development", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Jawf</h1>\n<p>Just Another Web Framework - streamlining flask application development</p>\n<h2>Setup</h2>\n<pre><code>$git clone https://github.com/codemation/Jawf.git\n\n$ sudo ./setup.py install\n\n$ jawf --help\n</code></pre>\n<h2>Basic Usage</h2>\n<h3>Initialize a JAWF Project directory</h3>\n<pre><code>$ jawf --init &lt;projName&gt; \n\n$ jawf --init Project1\n\nNot inside existing jawf project\nSuccesfully created jawf project: Project1\n</code></pre>\n<h3>Add an app to project</h3>\n<pre><code>Usage: jawf --add-app &lt;app-name&gt; [--route &lt;urlpattern&gt; default: /app-name]\n$ jawf --add-app myfirstapp\n$ jawf --add-app homepage --route /\n\n$ jawf --add-app myfirstapp\nNot inside existing jawf project\n--add-app\nmust be used within an existing project directory\nor combined with --project &lt;project-path&gt; \n\n$ cd Project1/\n/Project1 $ jawf --add-app myfirstapp\nDetected Existing project:Project1\napp myfirstapp was created successfully within /home/josh/python/mysql/Project1/\n</code></pre>\n<p>This creates an application which is immedietly wired up to the project. Can be tested right away.</p>\n<pre><code>/Project1$ python3 server.py \n* Serving Flask app \"server\" (lazy loading)\n* Environment: production\nWARNING: This is a development server. Do not use it in a production deployment.\nUse a production WSGI server instead.\n* Debug mode: on\n* Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 144-714-176\n\n$ curl http://0.0.0.0:8080/myfirstapp\n&lt;h1&gt;Hello myfirstapp World&lt;/h1&gt;\n</code></pre>\n<p>A closer look at the skeleton of the application created.</p>\n<pre><code>Project1/apps/myfirstapp/myfirstapp.py\n\n# myfirstapp\ndef run(server):\n    # Add import libraries here, run only once, when server is started\n    @server.route('/myfirstapp')\n    def myfirstapp_func():\n        # Add repeatable logic here, run as often as endpoint is called.\n        print(\"Hello myfirstapp World\") \n        return \"&lt;h1&gt;Hello myfirstapp World&lt;/h1&gt;\", 200\n</code></pre>\n<p>If you are familiar with flask routing, this is exactly the same. The work of wiring together multiple endpoints to a primary server app is done for you.</p>\n<h3>Add an DB to project</h3>\n<p>JAWF makes it easy to add new databaes, tables to a project as well as accessing the data in combination with [pyql]<a href=\"https://github.com/codemation/pyql\" rel=\"nofollow\">https://github.com/codemation/pyql</a></p>\n<h4>Supported database types: sqlite3, mysql</h4>\n<pre><code>jawf --add-db &lt;db-name&gt; [--type mysql default: sqlite3]\njawf --add-db finance --type mysql\njawf --add-db stocks \n</code></pre>\n<p>sqlite3 is a builtin library with python3 and creates light-weight databases in place for storing / retreiving data.</p>\n<h4>sqlite3</h4>\n<pre><code>Project1$ jawf --add-db stocks\nDetected Existing project:Project1\ndb stocks created successfully\n</code></pre>\n<p>This does not immedietly create a database until a table is added, and server is started.</p>\n<h5>Lets have a look at the DB file created at Project1/dbs/stocks/</h5>\n<pre><code>stocks_db.py\n\n# stocks - type sqlite3\ndef run(server):\n    import sys, os\n    @server.route('/stocks_attach')\n    def stocks_attach():\n        config=dict()\n\n        with open('.cmddir', 'r') as projDir:\n            for projectPath in projDir:\n                config['database'] = f'{projectPath}dbs/stocks/stocks'\n        #USE ENV PATH for PYQL library or /pyql/\n        sys.path.append('/pyql/' if os.getenv('PYQL_PATH') == None else os.getenv('PYQL_PATH'))\n        try:\n            import data, sqlite3\n            from . import setup\n            server.data['stocks'] = data.database(sqlite3.connect, **config)\n            setup.attach_tables(server)\n            return {\"status\": 200, \"message\": \"stocks attached successfully\"}, 200\n        except Exception as e:\n            return {\"status\": 200, \"message\": repr(e)}, 500\n    stocks_attach()\n</code></pre>\n<h5>Whats happening here:</h5>\n<p>Similar to app's there is an endpoint created to allow app developers control on when the web-server will attempt to access the DB\nThis becomes more useful with remote-db's or in micro-service deployments, when a DB server may not be ready as soon as the APP server.</p>\n<pre><code># stocks - type sqlite3\ndef run(server):\n    import sys, os\n    @server.route('/stocks_attach')\n    def stocks_attach():\n        config=dict()\n</code></pre>\n<p>Here we are first checking the project relative directory, as this is important wth sqlite3 databases which are always locally existing within the server.\nBy default, mysqlite Db will exist within dbs/db-name/db</p>\n<pre><code>        with open('.cmddir', 'r') as projDir:\n            for projectPath in projDir:\n                config['database'] = f'{projectPath}dbs/stocks/stocks'\n</code></pre>\n<p>PYQL is a dependency. If not directly install int a venv, this can be accessed using a ENV Variable PYQL_PATH or default /pyql/ system path.</p>\n<pre><code>        #USE ENV PATH for PYQL library or /pyql/\n        sys.path.append('/pyql/' if os.getenv('PYQL_PATH') == None else os.getenv('PYQL_PATH'))\n</code></pre>\n<p>Finally PYQL libraryies are imported, and DB connector is attached to the server object (available in all JAWF apps), then tables are attached, and configured if not existing.</p>\n<pre><code>        try:\n            import data, sqlite3\n            from . import setup\n            server.data['stocks'] = data.database(sqlite3.connect, **config)\n            setup.attach_tables(server)\n            return {\"status\": 200, \"message\": \"stocks attached successfully\"}, 200\n        except Exception as e:\n            return {\"status\": 200, \"message\": repr(e)}, 500\n</code></pre>\n<h4>mysql</h4>\n<pre><code>Project1$$ jawf --add-db trades --type mysql\nDetected Existing project:Project1\ndb trades created successfully \n</code></pre>\n<p>Databases must be created already within the mysql instance, as well as appropiate user / permissions for accessing the DB, creating tables.</p>\n<pre><code>trades.py\n\n# trades - type mysql\ndef run(server):\n    import sys, os\n    @server.route('/trades_attach')\n    def trades_attach():\n        config=dict()\n\n        env = ['DB_USER','DB_PASSWORD','DB_HOST', 'DB_PORT']\n        conf = ['user','password','database','host','port']\n        try:\n            config = {cnfVal: os.getenv(dbVal).rstrip() for dbVal,cnfVal in zip(env,conf)}\n        except Exception as e:\n            print('Missing an environment variable')\n            config= {cnfVal: os.getenv(dbVal) for dbVal,cnfVal in zip(env,conf)}\n            print(config)\n            return {\n                \"status\": 500, \n                \"message\": \"Missing environment variable(s)\",\n                \"env-vars\": config\n            }, 500 \n        #USE ENV PATH for PYQL library or /pyql/\n        sys.path.append('/pyql/' if os.getenv('PYQL_PATH') == None else os.getenv('PYQL_PATH'))\n        try:\n            import data, mysql\n            from . import setup\n            server.data['trades'] = data.database(mysql.connector.connect, **config)\n            setup.attach_tables(server)\n            return {\"status\": 200, \"message\": \"trades attached successfully\"}, 200\n        except Exception as e:\n            return {\"status\": 200, \"message\": repr(e)}, 500\n    trades_attach()\n</code></pre>\n<p>Much of the same logic is shared with SQLITE3 databases, but the most important different is the DB connector requirements. As this is not always a DB locally existing(it could be), we need to know a few more details on how to access the database.</p>\n<p>Here we are looking for 4 different ENV vars. These can be set in a number of different ways or passed into the /DB_NAME_attach endpoint via a POST request, passing in a JSON key-value pair for 'user','password','database','host','port'</p>\n<pre><code>        env = ['DB_USER','DB_PASSWORD','DB_HOST', 'DB_PORT', DB_NAME]\n        conf = ['user','password','host','port', database]\n        try:\n            config = {cnfVal: os.getenv(dbVal).rstrip() for dbVal,cnfVal in zip(env,conf)}\n        except Exception as e:\n            print('Missing an environment variable')\n            config= {cnfVal: os.getenv(dbVal) for dbVal,cnfVal in zip(env,conf)}\n            print(config)\n            return {\n                \"status\": 500, \n                \"message\": \"Missing environment variable(s)\",\n                \"env-vars\": config\n            }, 500 \n</code></pre>\n<h4>Add a Table to a DB</h4>\n<p>Databases are comprised of tables, so we need to configure the schema for each of the tables we want the JAWF project to create. PYQL will automatically discover tables which already exist and be made accessible via the server.data['databaseName'].tables['tableName']</p>\n<pre><code>jawf --add-db-table &lt;db-name&gt; --table &lt;table-name&gt;\njawf --add-db-table finance --table purchaseOrders\n\n$ jawf --add-db-table trades --table daytrades\nDetected Existing project:Project1\ntable daytrades config created within db trades\n</code></pre>\n<p>This creates a daytrades table within the tables dir of the trades database.</p>\n<pre><code>def db_attach(server):\n    db = server.data['trades']\n    # Example \n    # db.create_table(\n    #    'users', # table-name\n    #     [\n    #        ('userid', int, 'AUTOINCREMENT'),\n    #        ('username', str, 'UNIQUE NOT NULL'),\n    #        ('email', str, 'NOT NULL'),\n    #        ('join_date', str),\n    #        ('last_login', str),\n    #     ],\n    # 'userid' # Primary Key\n    # )\n    #UNCOMMENT Below to create\n    #\n    #db.create_table(\n    #    'daytrades', [\n    #        (), \n    #        (), \n    #        ()\n    #)\n    pass # Enter db.create_table statement here\n</code></pre>\n<p>See PYQL docs for more information Table SCHEMA usage, but the above template gets you started.</p>\n\n          </div>"}, "last_serial": 6123907, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "b3fd95584c3f3f636ff50961cdeed83b", "sha256": "c3b40b6f2bcdd845df122db21c0d700f26b7fb98ea139b7e527751910638934f"}, "downloads": -1, "filename": "Jawf-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b3fd95584c3f3f636ff50961cdeed83b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 11488, "upload_time": "2019-11-12T13:00:18", "upload_time_iso_8601": "2019-11-12T13:00:18.002509Z", "url": "https://files.pythonhosted.org/packages/b0/ab/74fe7877613537c88271b57b8ef473a3f79003756b36bf26ae35fb225d06/Jawf-0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3fd95584c3f3f636ff50961cdeed83b", "sha256": "c3b40b6f2bcdd845df122db21c0d700f26b7fb98ea139b7e527751910638934f"}, "downloads": -1, "filename": "Jawf-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b3fd95584c3f3f636ff50961cdeed83b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4, <4", "size": 11488, "upload_time": "2019-11-12T13:00:18", "upload_time_iso_8601": "2019-11-12T13:00:18.002509Z", "url": "https://files.pythonhosted.org/packages/b0/ab/74fe7877613537c88271b57b8ef473a3f79003756b36bf26ae35fb225d06/Jawf-0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:53:03 2020"}