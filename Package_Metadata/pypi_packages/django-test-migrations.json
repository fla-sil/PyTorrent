{"info": {"author": "sobolevn", "author_email": "mail@sobolevn.me", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# django-test-migrations\n\n[![wemake.services](https://img.shields.io/badge/%20-wemake.services-green.svg?label=%20&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAABGdBTUEAALGPC%2FxhBQAAAAFzUkdCAK7OHOkAAAAbUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP%2F%2F%2F5TvxDIAAAAIdFJOUwAjRA8xXANAL%2Bv0SAAAADNJREFUGNNjYCAIOJjRBdBFWMkVQeGzcHAwksJnAPPZGOGAASzPzAEHEGVsLExQwE7YswCb7AFZSF3bbAAAAABJRU5ErkJggg%3D%3D)](https://wemake.services)\n[![Build Status](https://travis-ci.com/wemake-services/django-test-migrations.svg?branch=master)](https://travis-ci.com/wemake-services/django-test-migrations)\n[![Coverage](https://coveralls.io/repos/github/wemake-services/django-test-migrations/badge.svg?branch=master)](https://coveralls.io/github/wemake-services/django-test-migrations?branch=master)\n[![Python Version](https://img.shields.io/pypi/pyversions/django-test-migrations.svg)](https://pypi.org/project/django-test-migrations/)\n[![wemake-python-styleguide](https://img.shields.io/badge/style-wemake-000000.svg)](https://github.com/wemake-services/wemake-python-styleguide)\n\n\n## Features\n\n- Allows to test `django` schema and data migrations\n- Allows to test both forward and rollback migrations\n- Allows to test the migrations order\n- Allows to test migration names\n- Fully typed with annotations and checked with `mypy`, [PEP561 compatible](https://www.python.org/dev/peps/pep-0561/)\n- Easy to start: has lots of docs, tests, and tutorials\n\nRead the [announcing post](https://sobolevn.me/2019/10/testing-django-migrations).\nSee real-world [usage example](https://github.com/wemake-services/wemake-django-template).\n\n\n## Installation\n\n```bash\npip install django-test-migrations\n```\n\nWe support several `django` versions:\n\n- `1.11`\n- `2.1`\n- `2.2`\n\nOther versions might work too, but they are not officially supported.\n\n\n## Testing django migrations\n\nTesting migrations is not a frequent thing in `django` land.\nBut, sometimes it is totally required. When?\n\nWhen we do complex schema or data changes\nand what to be sure that existing data won't be corrupted.\nWe might also want to be sure that all migrations can be safely rolled back.\nAnd as a final touch we want to be sure that migrations\nare in the correct order and have correct dependencies.\n\n### Testing forward migrations\n\nTo test all migrations we have a [`Migrator`](https://github.com/wemake-services/django-test-migrations/blob/master/django_test_migrations/migrator.py) class.\n\nIt has three methods to work with:\n\n- `.before()` which takes app and migration names to generate a state\n  before the actual migration happens.\n  It creates the `before state` by applying all migrations up to and including\n  the one passed as an argument.\n\n- `.after()` which takes app and migration names to perform the actual migration\n- `.reset()` to clean everything up after we are done with testing\n\nSo, here's an example:\n\n```python\nfrom django_test_migrations.migrator import Migrator\n\nmigrator = Migrator(database='default')\n\n# Initial migration, currently our model has only a single string field:\n# Note:\n# We are testing migration `0002_someitem_is_clean`, so we are specifying\n# the name of the previous migration (`0001_initial`) in the .before()\n# method in order to prepare a state of the database before applying\n# the migration we are going to test.\n#\nold_state = migrator.before(('main_app', '0001_initial'))\nSomeItem = old_state.apps.get_model('main_app', 'SomeItem')\n\n# Let's create a model with just a single field specified:\nSomeItem.objects.create(string_field='a')\nassert len(SomeItem._meta.get_fields()) == 2  # id + string_field\n\n# Now this migration will add `is_clean` field to the model:\nnew_state = migrator.after(('main_app', '0002_someitem_is_clean'))\nSomeItem = new_state.apps.get_model('main_app', 'SomeItem')\n\n# We can now test how our migration worked, new field is there:\nassert SomeItem.objects.filter(is_clean=True).count() == 0\nassert len(SomeItem._meta.get_fields()) == 3  # id + string_field + is_clean\n\n# Cleanup:\nmigrator.reset()\n```\n\nThat was an example of a forward migration.\n\n### Backward migration\n\nThe thing is that you can also test backward migrations.\nNothing really changes except migration names that you pass and your logic:\n\n```python\nmigrator = Migrator()\n\n# Currently our model has two field, but we need a rollback:\nold_state = migrator.before(('main_app', '0002_someitem_is_clean'))\nSomeItem = old_state.apps.get_model('main_app', 'SomeItem')\n\n# Create some data to illustrate your cases:\n# ...\n\n# Now this migration will drop `is_clean` field:\nnew_state = migrator.after(('main_app', '0001_initial'))\n\n# Assert the results:\n# ...\n\n# Cleanup:\nmigrator.reset()\n```\n\n### Testing migrations ordering\n\nSometimes we also want to be sure that our migrations are in the correct order.\nAnd all our `dependecies = [...]` are correct.\n\nTo achieve that we have [`plan.py`](https://github.com/wemake-services/django-test-migrations/blob/master/django_test_migrations/plan.py) module.\n\nThat's how it can be used:\n\n```python\nfrom django_test_migrations.plan import all_migrations, nodes_to_tuples\n\nmain_migrations = all_migrations('default', ['main_app', 'other_app'])\nassert nodes_to_tuples(main_migrations) == [\n    ('main_app', '0001_initial'),\n    ('main_app', '0002_someitem_is_clean'),\n    ('other_app', '0001_initial'),\n    ('main_app', '0003_update_is_clean'),\n    ('main_app', '0004_auto_20191119_2125'),\n    ('other_app', '0002_auto_20191120_2230'),\n]\n```\n\nThis way you can be sure that migrations\nand apps that depend on each other will be executed in the correct order.\n\n\n## Test framework integrations \ud83d\udc0d\n\nWe support several test frameworks as first-class citizens.\nThat's a testing tool after all!\n\n### pytest\n\nWe ship `django-test-migrations` with a `pytest` plugin\nthat provides two convinient fixtures:\n\n- `migrator_factory` that gives you an opportunity\n  to create `Migrator` classes for any database\n- `migrator` instance for the `'default'` database\n\nThat's how it can be used:\n\n```python\nimport pytest\n\n@pytest.mark.django_db\ndef test_pytest_plugin_initial(migrator):\n    \"\"\"Ensures that the initial migration works.\"\"\"\n    old_state = migrator.before(('main_app', None))\n\n    with pytest.raises(LookupError):\n        # Models does not yet exist:\n        old_state.apps.get_model('main_app', 'SomeItem')\n\n    new_state = migrator.after(('main_app', '0001_initial'))\n    # After the initial migration is done, we can use the model state:\n    SomeItem = new_state.apps.get_model('main_app', 'SomeItem')\n    assert SomeItem.objects.filter(string_field='').count() == 0\n```\n\n### unittest\n\nWe also ship an integration with the built-in `unittest` framework.\n\nHere's how it can be used:\n\n```python\nfrom django_test_migrations.contrib.unittest_case import MigratorTestCase\n\nclass TestDirectMigration(MigratorTestCase):\n    \"\"\"This class is used to test direct migrations.\"\"\"\n\n    migrate_from = ('main_app', '0002_someitem_is_clean')\n    migrate_to = ('main_app', '0003_update_is_clean')\n\n    def prepare(self):\n        \"\"\"Prepare some data before the migration.\"\"\"\n        SomeItem = self.old_state.apps.get_model('main_app', 'SomeItem')\n        SomeItem.objects.create(string_field='a')\n        SomeItem.objects.create(string_field='a b')\n\n    def test_migration_main0003(self):\n        \"\"\"Run the test itself.\"\"\"\n        SomeItem = self.new_state.apps.get_model('main_app', 'SomeItem')\n\n        assert SomeItem.objects.count() == 2\n        assert SomeItem.objects.filter(is_clean=True).count() == 1\n```\n\n\n## Testing migration names\n\n`django` generates migration names for you when you run `makemigrations`.\nAnd these names are bad ([read more](https://adamj.eu/tech/2020/02/24/how-to-disallow-auto-named-django-migrations/) about why it is bad)!\nJust look at this: `0004_auto_20191119_2125.py`\n\nWhat does this migration do? What changes does it have?\n\nOne can also pass `--name` attribute when creating migrations, but it is easy to forget.\n\nWe offer an automated solution: `django` check\nthat produces a warning for each badly named migration.\n\nAdd our check into your `INSTALLED_APPS`:\n\n```python\nINSTALLED_APPS = [\n    # ...\n\n    # Our custom check:\n    'django_test_migrations.contrib.django_checks.AutoNames',\n]\n```\n\nAnd then in your CI run:\n\n```bash\npython manage.py check --deploy --fail-level WARNING\n```\n\nThis way you will be safe from wrong names in your migrations.\n\nDo you have a migrations that cannot be renamed? Add them to the ignore list:\n\n```python\n# settings.py\n\nDTM_IGNORED_MIGRATIONS = {\n    ('main_app', '0004_auto_20191119_2125'),\n    ('dependency_app', '0001_auto_20201110_2100'),\n}\n```\n\nAnd we won't complain about them.\n\n\n## Credits\n\nThis project is based on work of other awesome people:\n\n- [@asfaltboy](https://gist.github.com/asfaltboy/b3e6f9b5d95af8ba2cc46f2ba6eae5e2)\n- [@blueyed](https://gist.github.com/blueyed/4fb0a807104551f103e6)\n- [@fernandogrd](https://gist.github.com/blueyed/4fb0a807104551f103e6#gistcomment-1546191)\n- [@adamchainz](https://adamj.eu/tech/2020/02/24/how-to-disallow-auto-named-django-migrations/)\n\n\n## License\n\nMIT.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wemake-services/django-test-migrations", "keywords": "django,django-tests,django-migrations,django-orm,migrations,orm,sql,tests,test,pytest,pytest-plugin", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-test-migrations", "package_url": "https://pypi.org/project/django-test-migrations/", "platform": "", "project_url": "https://pypi.org/project/django-test-migrations/", "project_urls": {"Homepage": "https://github.com/wemake-services/django-test-migrations", "Repository": "https://github.com/wemake-services/django-test-migrations"}, "release_url": "https://pypi.org/project/django-test-migrations/0.2.0/", "requires_dist": null, "requires_python": ">=3.6,<4.0", "summary": "Test django schema and data migrations, including ordering", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-test-migrations</h1>\n<p><a href=\"https://wemake.services\" rel=\"nofollow\"><img alt=\"wemake.services\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ade5058c018453d62341c910fb13a3046b58d6c0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2532302d77656d616b652e73657276696365732d677265656e2e7376673f6c6162656c3d253230266c6f676f3d64617461253341696d616765253246706e672533426261736536342532436956424f5277304b47676f414141414e5355684555674141414241414141415143414d414141416f4c513954414141414247644254554541414c4750432532467868425141414141467a556b6443414b374f484f6b41414141625545785552514141414141414141414141414141414141414141414141414141414141414150253246253246253246355476784449414141414964464a4f5577416a5241387858414e414c25324276305341414141444e4a52454655474e4e6a594341494f4a6a5242644246574d6b565165477a634841776b734a6e4150505a474f474141537a507a414548454756734c45785177453759737743623741465a53463362624141414141424a52553545726b4a676767253344253344\"></a>\n<a href=\"https://travis-ci.com/wemake-services/django-test-migrations\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/297ccc768a33ae4fc8a6505c3b8c4bdce6dedef0/68747470733a2f2f7472617669732d63692e636f6d2f77656d616b652d73657276696365732f646a616e676f2d746573742d6d6967726174696f6e732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/wemake-services/django-test-migrations?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e3db238af81157579cbf1efa8724392e52b79c9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f77656d616b652d73657276696365732f646a616e676f2d746573742d6d6967726174696f6e732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/django-test-migrations/\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/376224104fe913eb9ca8906438907293a9b1cc87/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d746573742d6d6967726174696f6e732e737667\"></a>\n<a href=\"https://github.com/wemake-services/wemake-python-styleguide\" rel=\"nofollow\"><img alt=\"wemake-python-styleguide\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8b7ab66b651e55b1e788d412c25d402dfc132f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7374796c652d77656d616b652d3030303030302e737667\"></a></p>\n<h2>Features</h2>\n<ul>\n<li>Allows to test <code>django</code> schema and data migrations</li>\n<li>Allows to test both forward and rollback migrations</li>\n<li>Allows to test the migrations order</li>\n<li>Allows to test migration names</li>\n<li>Fully typed with annotations and checked with <code>mypy</code>, <a href=\"https://www.python.org/dev/peps/pep-0561/\" rel=\"nofollow\">PEP561 compatible</a></li>\n<li>Easy to start: has lots of docs, tests, and tutorials</li>\n</ul>\n<p>Read the <a href=\"https://sobolevn.me/2019/10/testing-django-migrations\" rel=\"nofollow\">announcing post</a>.\nSee real-world <a href=\"https://github.com/wemake-services/wemake-django-template\" rel=\"nofollow\">usage example</a>.</p>\n<h2>Installation</h2>\n<pre>pip install django-test-migrations\n</pre>\n<p>We support several <code>django</code> versions:</p>\n<ul>\n<li><code>1.11</code></li>\n<li><code>2.1</code></li>\n<li><code>2.2</code></li>\n</ul>\n<p>Other versions might work too, but they are not officially supported.</p>\n<h2>Testing django migrations</h2>\n<p>Testing migrations is not a frequent thing in <code>django</code> land.\nBut, sometimes it is totally required. When?</p>\n<p>When we do complex schema or data changes\nand what to be sure that existing data won't be corrupted.\nWe might also want to be sure that all migrations can be safely rolled back.\nAnd as a final touch we want to be sure that migrations\nare in the correct order and have correct dependencies.</p>\n<h3>Testing forward migrations</h3>\n<p>To test all migrations we have a <a href=\"https://github.com/wemake-services/django-test-migrations/blob/master/django_test_migrations/migrator.py\" rel=\"nofollow\"><code>Migrator</code></a> class.</p>\n<p>It has three methods to work with:</p>\n<ul>\n<li>\n<p><code>.before()</code> which takes app and migration names to generate a state\nbefore the actual migration happens.\nIt creates the <code>before state</code> by applying all migrations up to and including\nthe one passed as an argument.</p>\n</li>\n<li>\n<p><code>.after()</code> which takes app and migration names to perform the actual migration</p>\n</li>\n<li>\n<p><code>.reset()</code> to clean everything up after we are done with testing</p>\n</li>\n</ul>\n<p>So, here's an example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_test_migrations.migrator</span> <span class=\"kn\">import</span> <span class=\"n\">Migrator</span>\n\n<span class=\"n\">migrator</span> <span class=\"o\">=</span> <span class=\"n\">Migrator</span><span class=\"p\">(</span><span class=\"n\">database</span><span class=\"o\">=</span><span class=\"s1\">'default'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initial migration, currently our model has only a single string field:</span>\n<span class=\"c1\"># Note:</span>\n<span class=\"c1\"># We are testing migration `0002_someitem_is_clean`, so we are specifying</span>\n<span class=\"c1\"># the name of the previous migration (`0001_initial`) in the .before()</span>\n<span class=\"c1\"># method in order to prepare a state of the database before applying</span>\n<span class=\"c1\"># the migration we are going to test.</span>\n<span class=\"c1\">#</span>\n<span class=\"n\">old_state</span> <span class=\"o\">=</span> <span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">before</span><span class=\"p\">((</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_initial'</span><span class=\"p\">))</span>\n<span class=\"n\">SomeItem</span> <span class=\"o\">=</span> <span class=\"n\">old_state</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'SomeItem'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Let's create a model with just a single field specified:</span>\n<span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">string_field</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get_fields</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>  <span class=\"c1\"># id + string_field</span>\n\n<span class=\"c1\"># Now this migration will add `is_clean` field to the model:</span>\n<span class=\"n\">new_state</span> <span class=\"o\">=</span> <span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">((</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0002_someitem_is_clean'</span><span class=\"p\">))</span>\n<span class=\"n\">SomeItem</span> <span class=\"o\">=</span> <span class=\"n\">new_state</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'SomeItem'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We can now test how our migration worked, new field is there:</span>\n<span class=\"k\">assert</span> <span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_clean</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n<span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get_fields</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>  <span class=\"c1\"># id + string_field + is_clean</span>\n\n<span class=\"c1\"># Cleanup:</span>\n<span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n</pre>\n<p>That was an example of a forward migration.</p>\n<h3>Backward migration</h3>\n<p>The thing is that you can also test backward migrations.\nNothing really changes except migration names that you pass and your logic:</p>\n<pre><span class=\"n\">migrator</span> <span class=\"o\">=</span> <span class=\"n\">Migrator</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Currently our model has two field, but we need a rollback:</span>\n<span class=\"n\">old_state</span> <span class=\"o\">=</span> <span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">before</span><span class=\"p\">((</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0002_someitem_is_clean'</span><span class=\"p\">))</span>\n<span class=\"n\">SomeItem</span> <span class=\"o\">=</span> <span class=\"n\">old_state</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'SomeItem'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create some data to illustrate your cases:</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># Now this migration will drop `is_clean` field:</span>\n<span class=\"n\">new_state</span> <span class=\"o\">=</span> <span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">((</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_initial'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Assert the results:</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># Cleanup:</span>\n<span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n</pre>\n<h3>Testing migrations ordering</h3>\n<p>Sometimes we also want to be sure that our migrations are in the correct order.\nAnd all our <code>dependecies = [...]</code> are correct.</p>\n<p>To achieve that we have <a href=\"https://github.com/wemake-services/django-test-migrations/blob/master/django_test_migrations/plan.py\" rel=\"nofollow\"><code>plan.py</code></a> module.</p>\n<p>That's how it can be used:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_test_migrations.plan</span> <span class=\"kn\">import</span> <span class=\"n\">all_migrations</span><span class=\"p\">,</span> <span class=\"n\">nodes_to_tuples</span>\n\n<span class=\"n\">main_migrations</span> <span class=\"o\">=</span> <span class=\"n\">all_migrations</span><span class=\"p\">(</span><span class=\"s1\">'default'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'other_app'</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">nodes_to_tuples</span><span class=\"p\">(</span><span class=\"n\">main_migrations</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_initial'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0002_someitem_is_clean'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'other_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_initial'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0003_update_is_clean'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0004_auto_20191119_2125'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'other_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0002_auto_20191120_2230'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>This way you can be sure that migrations\nand apps that depend on each other will be executed in the correct order.</p>\n<h2>Test framework integrations \ud83d\udc0d</h2>\n<p>We support several test frameworks as first-class citizens.\nThat's a testing tool after all!</p>\n<h3>pytest</h3>\n<p>We ship <code>django-test-migrations</code> with a <code>pytest</code> plugin\nthat provides two convinient fixtures:</p>\n<ul>\n<li><code>migrator_factory</code> that gives you an opportunity\nto create <code>Migrator</code> classes for any database</li>\n<li><code>migrator</code> instance for the <code>'default'</code> database</li>\n</ul>\n<p>That's how it can be used:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">django_db</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_pytest_plugin_initial</span><span class=\"p\">(</span><span class=\"n\">migrator</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Ensures that the initial migration works.\"\"\"</span>\n    <span class=\"n\">old_state</span> <span class=\"o\">=</span> <span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">before</span><span class=\"p\">((</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">LookupError</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Models does not yet exist:</span>\n        <span class=\"n\">old_state</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'SomeItem'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">new_state</span> <span class=\"o\">=</span> <span class=\"n\">migrator</span><span class=\"o\">.</span><span class=\"n\">after</span><span class=\"p\">((</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_initial'</span><span class=\"p\">))</span>\n    <span class=\"c1\"># After the initial migration is done, we can use the model state:</span>\n    <span class=\"n\">SomeItem</span> <span class=\"o\">=</span> <span class=\"n\">new_state</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'SomeItem'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">string_field</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre>\n<h3>unittest</h3>\n<p>We also ship an integration with the built-in <code>unittest</code> framework.</p>\n<p>Here's how it can be used:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_test_migrations.contrib.unittest_case</span> <span class=\"kn\">import</span> <span class=\"n\">MigratorTestCase</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestDirectMigration</span><span class=\"p\">(</span><span class=\"n\">MigratorTestCase</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"This class is used to test direct migrations.\"\"\"</span>\n\n    <span class=\"n\">migrate_from</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0002_someitem_is_clean'</span><span class=\"p\">)</span>\n    <span class=\"n\">migrate_to</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0003_update_is_clean'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">prepare</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Prepare some data before the migration.\"\"\"</span>\n        <span class=\"n\">SomeItem</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">old_state</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'SomeItem'</span><span class=\"p\">)</span>\n        <span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">string_field</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n        <span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">string_field</span><span class=\"o\">=</span><span class=\"s1\">'a b'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_migration_main0003</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Run the test itself.\"\"\"</span>\n        <span class=\"n\">SomeItem</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">new_state</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'SomeItem'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n        <span class=\"k\">assert</span> <span class=\"n\">SomeItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_clean</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<h2>Testing migration names</h2>\n<p><code>django</code> generates migration names for you when you run <code>makemigrations</code>.\nAnd these names are bad (<a href=\"https://adamj.eu/tech/2020/02/24/how-to-disallow-auto-named-django-migrations/\" rel=\"nofollow\">read more</a> about why it is bad)!\nJust look at this: <code>0004_auto_20191119_2125.py</code></p>\n<p>What does this migration do? What changes does it have?</p>\n<p>One can also pass <code>--name</code> attribute when creating migrations, but it is easy to forget.</p>\n<p>We offer an automated solution: <code>django</code> check\nthat produces a warning for each badly named migration.</p>\n<p>Add our check into your <code>INSTALLED_APPS</code>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"c1\"># Our custom check:</span>\n    <span class=\"s1\">'django_test_migrations.contrib.django_checks.AutoNames'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n<p>And then in your CI run:</p>\n<pre>python manage.py check --deploy --fail-level WARNING\n</pre>\n<p>This way you will be safe from wrong names in your migrations.</p>\n<p>Do you have a migrations that cannot be renamed? Add them to the ignore list:</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"n\">DTM_IGNORED_MIGRATIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"s1\">'main_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0004_auto_20191119_2125'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'dependency_app'</span><span class=\"p\">,</span> <span class=\"s1\">'0001_auto_20201110_2100'</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</pre>\n<p>And we won't complain about them.</p>\n<h2>Credits</h2>\n<p>This project is based on work of other awesome people:</p>\n<ul>\n<li><a href=\"https://gist.github.com/asfaltboy/b3e6f9b5d95af8ba2cc46f2ba6eae5e2\" rel=\"nofollow\">@asfaltboy</a></li>\n<li><a href=\"https://gist.github.com/blueyed/4fb0a807104551f103e6\" rel=\"nofollow\">@blueyed</a></li>\n<li><a href=\"https://gist.github.com/blueyed/4fb0a807104551f103e6#gistcomment-1546191\" rel=\"nofollow\">@fernandogrd</a></li>\n<li><a href=\"https://adamj.eu/tech/2020/02/24/how-to-disallow-auto-named-django-migrations/\" rel=\"nofollow\">@adamchainz</a></li>\n</ul>\n<h2>License</h2>\n<p>MIT.</p>\n\n          </div>"}, "last_serial": 6696913, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a164cb74e168625bbddfe9e57d193f15", "sha256": "9d53a25b91c75f7385d84c2d804bcfe5b96bbf8219c280d7f436a859e55fbe2c"}, "downloads": -1, "filename": "django_test_migrations-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a164cb74e168625bbddfe9e57d193f15", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 9410, "upload_time": "2019-11-21T15:13:31", "upload_time_iso_8601": "2019-11-21T15:13:31.713923Z", "url": "https://files.pythonhosted.org/packages/77/83/72ff82a8dd823ecc76c31c45999a2ba23260a8384f2bde166a32285dad4a/django_test_migrations-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3695f28df3c691e9de4f0b5670c30a4", "sha256": "b8885dc22d4fedb177879af30225ecb48ddcbff0b31d5aa081d0ad5797951588"}, "downloads": -1, "filename": "django-test-migrations-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a3695f28df3c691e9de4f0b5670c30a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10151, "upload_time": "2019-11-21T15:13:27", "upload_time_iso_8601": "2019-11-21T15:13:27.626963Z", "url": "https://files.pythonhosted.org/packages/41/46/35bd85339ca6e97d583bf8059daf9cea70fdafdb5d649d6c2fa1d50f5a29/django-test-migrations-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "bf0d76f9cab8cb73ad96817c4aad7f38", "sha256": "4ca2c1fadfbc2d078a3868f015c23968f03cfab7ca27339de7275365223a51cb"}, "downloads": -1, "filename": "django_test_migrations-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bf0d76f9cab8cb73ad96817c4aad7f38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12284, "upload_time": "2020-02-25T14:50:14", "upload_time_iso_8601": "2020-02-25T14:50:14.816150Z", "url": "https://files.pythonhosted.org/packages/26/9e/11e3b375ed5d681c2960d04d5ef1e47c0314743341e943b0710623c6b276/django_test_migrations-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28d4539a2d0ba4526d67b15aec4da1fd", "sha256": "bb4c20f7dd7ec2c589f400042aafb0d4d5a8d4add5a0b54b9ab43a00b7a6b736"}, "downloads": -1, "filename": "django-test-migrations-0.2.0.tar.gz", "has_sig": false, "md5_digest": "28d4539a2d0ba4526d67b15aec4da1fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13263, "upload_time": "2020-02-25T14:50:13", "upload_time_iso_8601": "2020-02-25T14:50:13.353840Z", "url": "https://files.pythonhosted.org/packages/a7/a1/4b8a264ecfc2e19e8054186f630954ab151ff3179ecbeda383dd9101ef5c/django-test-migrations-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf0d76f9cab8cb73ad96817c4aad7f38", "sha256": "4ca2c1fadfbc2d078a3868f015c23968f03cfab7ca27339de7275365223a51cb"}, "downloads": -1, "filename": "django_test_migrations-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bf0d76f9cab8cb73ad96817c4aad7f38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12284, "upload_time": "2020-02-25T14:50:14", "upload_time_iso_8601": "2020-02-25T14:50:14.816150Z", "url": "https://files.pythonhosted.org/packages/26/9e/11e3b375ed5d681c2960d04d5ef1e47c0314743341e943b0710623c6b276/django_test_migrations-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28d4539a2d0ba4526d67b15aec4da1fd", "sha256": "bb4c20f7dd7ec2c589f400042aafb0d4d5a8d4add5a0b54b9ab43a00b7a6b736"}, "downloads": -1, "filename": "django-test-migrations-0.2.0.tar.gz", "has_sig": false, "md5_digest": "28d4539a2d0ba4526d67b15aec4da1fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13263, "upload_time": "2020-02-25T14:50:13", "upload_time_iso_8601": "2020-02-25T14:50:13.353840Z", "url": "https://files.pythonhosted.org/packages/a7/a1/4b8a264ecfc2e19e8054186f630954ab151ff3179ecbeda383dd9101ef5c/django-test-migrations-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:33 2020"}