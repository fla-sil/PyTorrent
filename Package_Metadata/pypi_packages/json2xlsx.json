{"info": {"author": "Masahiro Kasahara", "author_email": "mkasa@cb.k.u-tokyo.ac.jp", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "=========\njson2xlsx\n=========\njson2xlsx is a tool to generate MS-Excel Spreadsheets from JSON files.\n\nInstallation\n------------\nInstall as general python modules. Briefly, do as follows::\n\n    $ sudo easy_install json2xlsx\n\nYou can also use pip::\n\n    $ sudo pip install json2xlsx\n\nIf you want to install the latest (likely development) version, then do as follows::\n\n    $ cd some_temporary_dir\n    $ git clone git://github.com/mkasa/json2xlsx.git\n    $ cd json2xlsx\n    $ python setup.py build\n    $ sudo python setup.py install\n\nNote that you may encounter an error while installing pyparsing on which json2xlsx\ndepends. This is probably because pyparsing 1.x runs only on Python 2.x while\npyparsing 2.x runs only on Python 3.x. Currently, json2xlsx declares in the package\nthat pyparsing 1.x is required, which means that Python 3.x users must install\njson2xlsx from GitHub with manual modificatin to setup.py. I do not use Python 3.x\noften, so please let me know a workaround.\n\nSimple Example\n--------------\nLet's begin with a smallest example::\n\n    $ cat test.json\n    {\"name\": \"John\", \"age\": 30, \"sex\": \"male\"}\n    $ cat test.ts\n    table { \"name\"; \"age\"; \"sex\"; }\n    $ json2xlsx test.ts -j test.json -o output.xlsx\n\nThis will create an Excel Spreadsheet 'output.xlsx' that contains\na table like this:\n\n+-----+-----+-----+\n|name | age | sex |\n+-----+-----+-----+\n|John | 30  | male|\n+-----+-----+-----+\n\nIsn't it super-easy? Here, `test.ts` is a script that defines the table.\nLet's call it *table script*.\n`-j` option specifies an input JSON file. You can specify as many `-j`\nas you wish. `-o` gives the name of the output file::\n\n    $ cat test.json\n    [{\"name\": \"John\", \"age\": 30,\n      \"sex\": \"male\"},\n     {\"name\": \"Alice\", \"age\": 18,\n      \"sex\": \"female\"}\n    ]\n\nThis would give the following result.\n\n+-----+-----+------+\n|name | age | sex  |\n+-----+-----+------+\n|John | 30  | male |\n+-----+-----+------+\n|Alice| 18  |female|\n+-----+-----+------+\n\nAnother way is that you give `-l` option to specify that each line in the input\ncomprises a single JSON object. In this mode, each line must contain strictly\none JSON object::\n\n    $ cat test.json\n    {\"name\": \"John\", \"age\": 30, \"sex\": \"male\"}\n    {\"name\": \"Alice\", \"age\": 18, \"sex\": \"female\"}\n    $ json2xlsx test.ts -l -j test.json -o output.xlsx\n\nThis would give the same table as above.\n\nMultiple Rows\n-------------\nIf you would like to add more than one row, there are two ways to go.\nThe first one is that you can give an JSON array as input.\n\nad hoc Query Example\n--------------------\nWhen `-` is specified for input table script, the standard input is used.\n`--open` is specified, the generated xlsx file is opened immediately.\nThose two options are useful when you want to craete a xlsx file with\nan ad hoc query like this::\n\n    $ json2xlsx - -j test.json -o output.xlsx --open\n    table { \"name\"; \"age\"; \"sex\"; }\n    ^D\n    (MS Excel pops up immediately)\n\nRenaming Columns\n----------------\nKeys in a JSON file are often not appropriate for display use.\nFor example, you may want to use \"Full Name (Family, Given)\" instead of\na JSON key \"name\". You can use `as` modifiers to do this::\n\n    table {\n        \"name\" as \"Full Name (Family, Given)\";\n    }\n\nYou can use `\"\\n\"` to wrap in a cell::\n\n    table {\n        \"name\" as \"Full Name\\n(Family, Given)\";\n    }\n\nSaving a Few Types\n------------------\nIf a string literal does not contain any spaces, symbols or special characters,\nthe double quotations can be omitted. This table script::\n\n    table { \"name\"; \"age\"; \"sex\"; }\n\nis equivalent to::\n\n    table { name; age; sex; }\n\nDelimiter\n---------\nYou can use `,` instead of `;`::\n\n    table { name; age; sex; }\n\n`,` and `;` are interchangable except for specifying coordinates.\n\nAdding Title to Table\n---------------------\nYou can put the table title between `table` and `{`::\n\n    table \"Employee\" { name; age; sex; }\n\nThis will create a table like this.\n\n+------------------+\n|Employee          |\n+-----+-----+------+\n|name | age | sex  |\n+-----+-----+------+\n|John | 30  | male |\n+-----+-----+------+\n|Alice| 18  |female|\n+-----+-----+------+\n\nAdding Styles\n-------------\nYou can add styles to columns::\n\n  table \"Analysis Summary\" border thinbottom {\n    \"file_caption\" as \"Sample\" width 20 align right;\n    \"nSeqs\" as \"# of \\nscaffolds\" align right halign center number \"#,#\";\n    \"Min\" color \"green\" align right;\n    \"_1st_Qu\" as \"1st quantile\" align right number \"#,#\";\n  }\n\n1. `width` specifies the width of the column. The unit is unknown (I do not know), so please refer to the openpyxl document for details (although even I have not yet found the answer there).\n2. `align right`, `align center`, `align left` will align columns (without the heading) as specified.\n3. `halign right`, `halign center`, `halign left` will align the heading columns as specified.\n4. `color` specifies the color of the cell. See Color class in style.py of openpyxl for the complete list of the preset colors. Please let me know if you need hex-style colors (json2xlsx does not support it yet).\n5. `number` gives the number style of the cell. This will be described in details later.\n6. `border` adds a border to the cell. Currently, \"thinbottom\", \"thickbottom\" and \"doublebottom\" are the only available options. Please let me know if you find any use case in which you need others (Border class in style.py of openpyxl tells you what kinds of borders are available) and you would like to see it implemented.\n\nNumber Style\n------------\nThe number style is presumably an internal string used in MS Excel.\nHere are a couple of examples. See NumberFormat class in style.py\nof openpyxl for other examples.\n\n+---------------------+----------+-----------------------------------+\n| Number Format Style | Example  | Description                       |\n+---------------------+----------+-----------------------------------+\n| `%`                 |  24%     | Percentage                        |\n+---------------------+----------+-----------------------------------+\n| `#,##`              | 123,456  | Insert ',' every 3 digits         |\n+---------------------+----------+-----------------------------------+\n| `0.000`             |  12.345  | Three digits after decimal point  |\n+---------------------+----------+-----------------------------------+\n| `@`                 |24        | Force text                        |\n+---------------------+----------+-----------------------------------+\n| `yyyy-mm-dd`        |2013/11/23| Date                              |\n+---------------------+----------+-----------------------------------+\n| `0.00+E00`          |1.23+E10  | Scientific notation               |\n+---------------------+----------+-----------------------------------+\n\nGrouping\n--------\nYou can group multiple columns. An example table script is here::\n\n    table {\n        \"name\";\n        group \"personal info\" {\n            \"age\",\n            \"sex\";\n        }\n    }\n\nThe generated table will look like this.\n\n+-----+---------------+\n|     | personal info |\n|     +-------+-------+\n|name | age   | sex   |\n+-----+-------+-------+\n|John | 30    | male  |\n+-----+-------+-------+\n\nNesting is allowed.\n\nMultiple Tables, Multiple Sheets\n--------------------------------\nYou can create multiple tables in a sheet::\n\n    # You can write comments here.\n    namesheet \"Employee List\";\n    table { \"name\", \"age\", \"sex\"; }\n    # equivalent to \"-l -j employee1.json\" in the command line\n    load \"employee1.json\" linebyline;\n    # vskip adds specified number of blank rows.\n    vskip 1;\n    table { \"company\", \"revenue\"; }\n    # You can add as many files.\n    load \"company1.json\";\n    load \"company2.json\";\n    # Create a new sheet. The first sheet is implicitly created so we did not need it.\n    newsheet;\n    namesheet \"Products\";\n    table { \"product\", \"code\", \"price\"; }\n    load \"product1.json\";\n    load \"product2.json\";\n    # You can add \"-o output.xlsx\" in the command line, but here we specify it in the script.\n    write \"output.xlsx\";\n\nAdding a comment in a sheet\n---------------------------\nWe often want to add a comment to a spreadsheet::\n\n    table { \"name\", \"age\", \"sex\"; }\n    load \"employee1.json\";\n    legend 2, 0 \"As of Apr. 2000\";\n\n`legend` command takes coordinates and a string, and writes the string in the cell.\nThe coordinates is a pair of two integers, *row, column*.\nIt originates at the cell right next to the top right of the table.\nBelow we show the coordinates.\n\n+-----+---------------+-------+-------+\n|     | personal info | (0,0) | (0,1) |\n|     +-------+-------+-------+-------+\n|name | age   | sex   | (1,0) | (1,1) |\n+-----+-------+-------+-------+-------+\n|John | 30    | male  | (2,0) | (2,1) |\n+-----+-------+-------+-------+-------+\n\nCSV Support\n-----------\nComma Separated Values (CSV) is also supported.\nLet's see an example::\n\n    table { \"name\", \"age\", \"sex\"; }\n    loadcsv \"employee1.csv\";\n\nHere is the content of employee1.csv::\n\n    \"John\",\"30\",\"male\"\n    \"Alice\",\"18\",\"female\"\n\nNote that the order of the column must be the same as the column definition in the table.\nIf you would like to reorder the columns, you can specify the column order::\n\n    table { \"sex\", \"age\", \"name\"; }\n    loadcsv \"employee1.csv\" 2,1,0;\n\nYou can use `-1` for a blank column::\n\n    table { \"sex\", \"blank\", \"name\"; }\n    loadcsv \"employee1.csv\" 2,-1,0;\n\nWhen the first line of the input CSV file is a header, give `withheader`::\n\n    table { \"sex\", \"age\", \"name\"; }\n    loadcsv \"employee1.csv\" 2,1,0 withheader;\n\nthen you can skip the first line.\n\nMiscellanous\n------------\nYou can use non-ASCII characters. UTF-8 is the only supported coding.\n\nChangelog\n---------\n2016/05/26 FIX: work with newer pyparsing/openpyxl packages.\n2013/06/05 FIX: attributes did not show up when the table caption is specified.\n2013/06/05 ADD: better document on cell styles.\n2013/05/24 Initial upload to PyPI\n\nNote\n----\nSuggestions and comments are welcome.\n\nLicense\n-------\nModified BSD License.\n\nAuthor\n------\nMasahiro Kasahara", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mkasa/json2xlsx", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "json2xlsx", "package_url": "https://pypi.org/project/json2xlsx/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/json2xlsx/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mkasa/json2xlsx"}, "release_url": "https://pypi.org/project/json2xlsx/1.3/", "requires_dist": null, "requires_python": null, "summary": "Tool to generate xlsx (Excel spreadsheet) from JSON", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>json2xlsx is a tool to generate MS-Excel Spreadsheets from JSON files.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install as general python modules. Briefly, do as follows:</p>\n<pre>$ sudo easy_install json2xlsx\n</pre>\n<p>You can also use pip:</p>\n<pre>$ sudo pip install json2xlsx\n</pre>\n<p>If you want to install the latest (likely development) version, then do as follows:</p>\n<pre>$ cd some_temporary_dir\n$ git clone git://github.com/mkasa/json2xlsx.git\n$ cd json2xlsx\n$ python setup.py build\n$ sudo python setup.py install\n</pre>\n<p>Note that you may encounter an error while installing pyparsing on which json2xlsx\ndepends. This is probably because pyparsing 1.x runs only on Python 2.x while\npyparsing 2.x runs only on Python 3.x. Currently, json2xlsx declares in the package\nthat pyparsing 1.x is required, which means that Python 3.x users must install\njson2xlsx from GitHub with manual modificatin to setup.py. I do not use Python 3.x\noften, so please let me know a workaround.</p>\n</div>\n<div id=\"simple-example\">\n<h2>Simple Example</h2>\n<p>Let\u2019s begin with a smallest example:</p>\n<pre>$ cat test.json\n{\"name\": \"John\", \"age\": 30, \"sex\": \"male\"}\n$ cat test.ts\ntable { \"name\"; \"age\"; \"sex\"; }\n$ json2xlsx test.ts -j test.json -o output.xlsx\n</pre>\n<p>This will create an Excel Spreadsheet \u2018output.xlsx\u2019 that contains\na table like this:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>name</td>\n<td>age</td>\n<td>sex</td>\n</tr>\n<tr><td>John</td>\n<td>30</td>\n<td>male</td>\n</tr>\n</tbody>\n</table>\n<p>Isn\u2019t it super-easy? Here, <cite>test.ts</cite> is a script that defines the table.\nLet\u2019s call it <em>table script</em>.\n<cite>-j</cite> option specifies an input JSON file. You can specify as many <cite>-j</cite>\nas you wish. <cite>-o</cite> gives the name of the output file:</p>\n<pre>$ cat test.json\n[{\"name\": \"John\", \"age\": 30,\n  \"sex\": \"male\"},\n {\"name\": \"Alice\", \"age\": 18,\n  \"sex\": \"female\"}\n]\n</pre>\n<p>This would give the following result.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>name</td>\n<td>age</td>\n<td>sex</td>\n</tr>\n<tr><td>John</td>\n<td>30</td>\n<td>male</td>\n</tr>\n<tr><td>Alice</td>\n<td>18</td>\n<td>female</td>\n</tr>\n</tbody>\n</table>\n<p>Another way is that you give <cite>-l</cite> option to specify that each line in the input\ncomprises a single JSON object. In this mode, each line must contain strictly\none JSON object:</p>\n<pre>$ cat test.json\n{\"name\": \"John\", \"age\": 30, \"sex\": \"male\"}\n{\"name\": \"Alice\", \"age\": 18, \"sex\": \"female\"}\n$ json2xlsx test.ts -l -j test.json -o output.xlsx\n</pre>\n<p>This would give the same table as above.</p>\n</div>\n<div id=\"multiple-rows\">\n<h2>Multiple Rows</h2>\n<p>If you would like to add more than one row, there are two ways to go.\nThe first one is that you can give an JSON array as input.</p>\n</div>\n<div id=\"ad-hoc-query-example\">\n<h2>ad hoc Query Example</h2>\n<p>When <cite>-</cite> is specified for input table script, the standard input is used.\n<cite>\u2013open</cite> is specified, the generated xlsx file is opened immediately.\nThose two options are useful when you want to craete a xlsx file with\nan ad hoc query like this:</p>\n<pre>$ json2xlsx - -j test.json -o output.xlsx --open\ntable { \"name\"; \"age\"; \"sex\"; }\n^D\n(MS Excel pops up immediately)\n</pre>\n</div>\n<div id=\"renaming-columns\">\n<h2>Renaming Columns</h2>\n<p>Keys in a JSON file are often not appropriate for display use.\nFor example, you may want to use \u201cFull Name (Family, Given)\u201d instead of\na JSON key \u201cname\u201d. You can use <cite>as</cite> modifiers to do this:</p>\n<pre>table {\n    \"name\" as \"Full Name (Family, Given)\";\n}\n</pre>\n<p>You can use <cite>\u201cn\u201d</cite> to wrap in a cell:</p>\n<pre>table {\n    \"name\" as \"Full Name\\n(Family, Given)\";\n}\n</pre>\n</div>\n<div id=\"saving-a-few-types\">\n<h2>Saving a Few Types</h2>\n<p>If a string literal does not contain any spaces, symbols or special characters,\nthe double quotations can be omitted. This table script:</p>\n<pre>table { \"name\"; \"age\"; \"sex\"; }\n</pre>\n<p>is equivalent to:</p>\n<pre>table { name; age; sex; }\n</pre>\n</div>\n<div id=\"delimiter\">\n<h2>Delimiter</h2>\n<p>You can use <cite>,</cite> instead of <cite>;</cite>:</p>\n<pre>table { name; age; sex; }\n</pre>\n<p><cite>,</cite> and <cite>;</cite> are interchangable except for specifying coordinates.</p>\n</div>\n<div id=\"adding-title-to-table\">\n<h2>Adding Title to Table</h2>\n<p>You can put the table title between <cite>table</cite> and <cite>{</cite>:</p>\n<pre>table \"Employee\" { name; age; sex; }\n</pre>\n<p>This will create a table like this.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Employee</td>\n</tr>\n<tr><td>name</td>\n<td>age</td>\n<td>sex</td>\n</tr>\n<tr><td>John</td>\n<td>30</td>\n<td>male</td>\n</tr>\n<tr><td>Alice</td>\n<td>18</td>\n<td>female</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"adding-styles\">\n<h2>Adding Styles</h2>\n<p>You can add styles to columns:</p>\n<pre>table \"Analysis Summary\" border thinbottom {\n  \"file_caption\" as \"Sample\" width 20 align right;\n  \"nSeqs\" as \"# of \\nscaffolds\" align right halign center number \"#,#\";\n  \"Min\" color \"green\" align right;\n  \"_1st_Qu\" as \"1st quantile\" align right number \"#,#\";\n}\n</pre>\n<ol>\n<li><cite>width</cite> specifies the width of the column. The unit is unknown (I do not know), so please refer to the openpyxl document for details (although even I have not yet found the answer there).</li>\n<li><cite>align right</cite>, <cite>align center</cite>, <cite>align left</cite> will align columns (without the heading) as specified.</li>\n<li><cite>halign right</cite>, <cite>halign center</cite>, <cite>halign left</cite> will align the heading columns as specified.</li>\n<li><cite>color</cite> specifies the color of the cell. See Color class in style.py of openpyxl for the complete list of the preset colors. Please let me know if you need hex-style colors (json2xlsx does not support it yet).</li>\n<li><cite>number</cite> gives the number style of the cell. This will be described in details later.</li>\n<li><cite>border</cite> adds a border to the cell. Currently, \u201cthinbottom\u201d, \u201cthickbottom\u201d and \u201cdoublebottom\u201d are the only available options. Please let me know if you find any use case in which you need others (Border class in style.py of openpyxl tells you what kinds of borders are available) and you would like to see it implemented.</li>\n</ol>\n</div>\n<div id=\"number-style\">\n<h2>Number Style</h2>\n<p>The number style is presumably an internal string used in MS Excel.\nHere are a couple of examples. See NumberFormat class in style.py\nof openpyxl for other examples.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Number Format Style</td>\n<td>Example</td>\n<td>Description</td>\n</tr>\n<tr><td><cite>%</cite></td>\n<td>24%</td>\n<td>Percentage</td>\n</tr>\n<tr><td><cite>#,##</cite></td>\n<td>123,456</td>\n<td>Insert \u2018,\u2019 every 3 digits</td>\n</tr>\n<tr><td><cite>0.000</cite></td>\n<td>12.345</td>\n<td>Three digits after decimal point</td>\n</tr>\n<tr><td><cite>@</cite></td>\n<td>24</td>\n<td>Force text</td>\n</tr>\n<tr><td><cite>yyyy-mm-dd</cite></td>\n<td>2013/11/23</td>\n<td>Date</td>\n</tr>\n<tr><td><cite>0.00+E00</cite></td>\n<td>1.23+E10</td>\n<td>Scientific notation</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"grouping\">\n<h2>Grouping</h2>\n<p>You can group multiple columns. An example table script is here:</p>\n<pre>table {\n    \"name\";\n    group \"personal info\" {\n        \"age\",\n        \"sex\";\n    }\n}\n</pre>\n<p>The generated table will look like this.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>name</td>\n<td>personal info</td>\n</tr>\n<tr><td>age</td>\n<td>sex</td>\n</tr>\n<tr><td>John</td>\n<td>30</td>\n<td>male</td>\n</tr>\n</tbody>\n</table>\n<p>Nesting is allowed.</p>\n</div>\n<div id=\"multiple-tables-multiple-sheets\">\n<h2>Multiple Tables, Multiple Sheets</h2>\n<p>You can create multiple tables in a sheet:</p>\n<pre># You can write comments here.\nnamesheet \"Employee List\";\ntable { \"name\", \"age\", \"sex\"; }\n# equivalent to \"-l -j employee1.json\" in the command line\nload \"employee1.json\" linebyline;\n# vskip adds specified number of blank rows.\nvskip 1;\ntable { \"company\", \"revenue\"; }\n# You can add as many files.\nload \"company1.json\";\nload \"company2.json\";\n# Create a new sheet. The first sheet is implicitly created so we did not need it.\nnewsheet;\nnamesheet \"Products\";\ntable { \"product\", \"code\", \"price\"; }\nload \"product1.json\";\nload \"product2.json\";\n# You can add \"-o output.xlsx\" in the command line, but here we specify it in the script.\nwrite \"output.xlsx\";\n</pre>\n</div>\n<div id=\"adding-a-comment-in-a-sheet\">\n<h2>Adding a comment in a sheet</h2>\n<p>We often want to add a comment to a spreadsheet:</p>\n<pre>table { \"name\", \"age\", \"sex\"; }\nload \"employee1.json\";\nlegend 2, 0 \"As of Apr. 2000\";\n</pre>\n<p><cite>legend</cite> command takes coordinates and a string, and writes the string in the cell.\nThe coordinates is a pair of two integers, <em>row, column</em>.\nIt originates at the cell right next to the top right of the table.\nBelow we show the coordinates.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>name</td>\n<td>personal info</td>\n<td>(0,0)</td>\n<td>(0,1)</td>\n</tr>\n<tr><td>age</td>\n<td>sex</td>\n<td>(1,0)</td>\n<td>(1,1)</td>\n</tr>\n<tr><td>John</td>\n<td>30</td>\n<td>male</td>\n<td>(2,0)</td>\n<td>(2,1)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"csv-support\">\n<h2>CSV Support</h2>\n<p>Comma Separated Values (CSV) is also supported.\nLet\u2019s see an example:</p>\n<pre>table { \"name\", \"age\", \"sex\"; }\nloadcsv \"employee1.csv\";\n</pre>\n<p>Here is the content of employee1.csv:</p>\n<pre>\"John\",\"30\",\"male\"\n\"Alice\",\"18\",\"female\"\n</pre>\n<p>Note that the order of the column must be the same as the column definition in the table.\nIf you would like to reorder the columns, you can specify the column order:</p>\n<pre>table { \"sex\", \"age\", \"name\"; }\nloadcsv \"employee1.csv\" 2,1,0;\n</pre>\n<p>You can use <cite>-1</cite> for a blank column:</p>\n<pre>table { \"sex\", \"blank\", \"name\"; }\nloadcsv \"employee1.csv\" 2,-1,0;\n</pre>\n<p>When the first line of the input CSV file is a header, give <cite>withheader</cite>:</p>\n<pre>table { \"sex\", \"age\", \"name\"; }\nloadcsv \"employee1.csv\" 2,1,0 withheader;\n</pre>\n<p>then you can skip the first line.</p>\n</div>\n<div id=\"miscellanous\">\n<h2>Miscellanous</h2>\n<p>You can use non-ASCII characters. UTF-8 is the only supported coding.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>2016/05/26 FIX: work with newer pyparsing/openpyxl packages.\n2013/06/05 FIX: attributes did not show up when the table caption is specified.\n2013/06/05 ADD: better document on cell styles.\n2013/05/24 Initial upload to PyPI</p>\n</div>\n<div id=\"note\">\n<h2>Note</h2>\n<p>Suggestions and comments are welcome.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Modified BSD License.</p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Masahiro Kasahara</p>\n</div>\n\n          </div>"}, "last_serial": 2132630, "releases": {"1.2.4": [{"comment_text": "", "digests": {"md5": "95b261990191eb49073c4e8a0ae6b462", "sha256": "32f457529adb2bc102169e147eae7722ad26c2b2abed9fcd1ebc74948167e4f4"}, "downloads": -1, "filename": "json2xlsx-1.2.4.tar.gz", "has_sig": false, "md5_digest": "95b261990191eb49073c4e8a0ae6b462", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10855, "upload_time": "2013-05-24T06:25:20", "upload_time_iso_8601": "2013-05-24T06:25:20.317635Z", "url": "https://files.pythonhosted.org/packages/77/4a/9c851591bc631f13b424fe4aa968acb8ca44e7eb91849063568cbd696f14/json2xlsx-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "91ec9393459fd28a743431d199034b9a", "sha256": "afe61d3bfaa9f55ea626004386b3dfd0ea29188767920e4f7910feb3cb277cdf"}, "downloads": -1, "filename": "json2xlsx-1.2.5.tar.gz", "has_sig": false, "md5_digest": "91ec9393459fd28a743431d199034b9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11309, "upload_time": "2013-06-05T12:52:28", "upload_time_iso_8601": "2013-06-05T12:52:28.533918Z", "url": "https://files.pythonhosted.org/packages/a8/c7/c08183d686fd87c7ab4f23d286938ee8e49751528110300b0b941db39e32/json2xlsx-1.2.5.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "3dfa0d3aa2cf13089148aeeffcb57bcb", "sha256": "0349ef9eb62f56809cfd5789e7258ccb76b8ad45f453e09e40be212cbcbc9d94"}, "downloads": -1, "filename": "json2xlsx-1.3.tar.gz", "has_sig": false, "md5_digest": "3dfa0d3aa2cf13089148aeeffcb57bcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11345, "upload_time": "2016-05-25T08:43:34", "upload_time_iso_8601": "2016-05-25T08:43:34.930799Z", "url": "https://files.pythonhosted.org/packages/66/1a/2ef6311176f55e04db3947ce41fd06fa17a1919af5571f91bcaf21e1a33a/json2xlsx-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3dfa0d3aa2cf13089148aeeffcb57bcb", "sha256": "0349ef9eb62f56809cfd5789e7258ccb76b8ad45f453e09e40be212cbcbc9d94"}, "downloads": -1, "filename": "json2xlsx-1.3.tar.gz", "has_sig": false, "md5_digest": "3dfa0d3aa2cf13089148aeeffcb57bcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11345, "upload_time": "2016-05-25T08:43:34", "upload_time_iso_8601": "2016-05-25T08:43:34.930799Z", "url": "https://files.pythonhosted.org/packages/66/1a/2ef6311176f55e04db3947ce41fd06fa17a1919af5571f91bcaf21e1a33a/json2xlsx-1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:55 2020"}