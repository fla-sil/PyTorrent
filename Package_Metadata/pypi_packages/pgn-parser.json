{"info": {"author": "Brett Bates", "author_email": "b@bmb.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PGN Parser\n\nA Python library for parsing pgn files into a python friendly format.\n\nThe parser is built using [canopy](http://canopy.jcoglan.com/), the rest is Python.\n\nThe PGN spec is based on (and thanks to) the spec at [saremba.de](http://www.saremba.de/chessgml/standards/pgn/pgn-complete.htm).\n\n## Setup\n### Installing\n\nMake sure you have python 3 installed.\n\n```\npip install pgn_parser\n```\n\nThen import like so:\n\n```\nfrom pgn_parser import pgn, parser\n```\n\n\n### Testing\n\nThe tests are written using pytest and behave, these must be installed first:\n```\npip install pytest behave\n```\n\nFor running unit tests:\n```\npytest\n```\n\nFor running behavioural tests:\n```\nbehave\n```\n\n\n### Building pip distributables\n\n```\nmake build\n```\n\n## Using\n### Parsing a pgn file\nTo parse a pgn, you just give the string to the parser.parse along with the Actions()\nwhich the parser uses to create python structures.\n```Python\n>>> from pgn_parser import parser, pgn\n\n>>> game = parser.parse(\"1. e4 e5\", actions=pgn.Actions())\n>>> print(game.move(1))\n1. e4 e5\n>>> print(game.move(1).black.san)\ne5\n```\n\n### Games\nAfter parsing a game, it will be structured into the following classes which are \nnested in eachother:\n\nGame: Container for the whole game\nTo get a specific move (5 here) from a game\n```Python\ngame.move(5)\n```\n\nTo retrieve the Movetext\n```\ngame.movetext\n```\n\nTo access the TagPairs\n```\ngame.tag_pairs\n```\n\nTo access the final score\n```\ngame.score\n```\n\nMovetext: The container of all the moves, e.g \"1. c4 c5 2. e4 e5\"\nIt is just a list so can be iterated over to retrieve the moves.\nBe warned, Movetext[0] will be the first move parsed, whether 1. or 31. so \nuse Game.move() if you want a movenumber\n\nMove: A move is a move number, optionally a white Ply and or a black Ply\n\nPly: Is the unit of moving, in standard algebraic notation (SAN), \ne.g. the black ply from \"1.e4 e5\" is e5\n\nTagPairs: An ordered dictionary of all TagPair objects.\nThese are ordered so it keeps the order read in, but will change to \nseven tag roster order if printed/stringified.\n\n\n### TagPairs\nTo store meta data about a game you do so in TagPairs\n\nThe header of a pgn file \n```PGN\n[\"Site\" \"github.com\"]\n```\n\nIs represented like so in python\n```Python\ngame.tag_pairs[\"Site\"] == \"github.com\"\n```\n\n\n### Moves\nEach move has a move number and two ply's, white and black. \nEach ply can be anything from empty to having comments, variations and \n[nags](https://en.wikipedia.org/wiki/Numeric_Annotation_Glyphs).\n\n```PGN\nmoves = \"1. e4 $1 {a comment} (1.d5)\"\n```\n\nIs represented like so:\n```Python\nm1 = game.move(1)\n\nassert m1.white.san == \"e4\"\nassert m1.white.comment == \"a comment\"\nassert m1.white.nags[0] == \"$1\"\nassert m1.white.variations[0].move(1).white.san == \"d5\"\n```\n\nIf a ply is empty, then its san will be represented \"\".\n\n\n### Limitations\nNo support for RAV style variations\nNo support for multiple games in one parse, must be single games\nDoesn't attempt to parse turn times as this is not in the original spec and I am\nnot sure what to support.\n\n## Authors\n\n* **Brett Bates** - *Initial work* - [github](https://github.com/brettbates)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brettbates/pgn_parser", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pgn-parser", "package_url": "https://pypi.org/project/pgn-parser/", "platform": "", "project_url": "https://pypi.org/project/pgn-parser/", "project_urls": {"Homepage": "https://github.com/brettbates/pgn_parser"}, "release_url": "https://pypi.org/project/pgn-parser/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "PGN Parser is for parsing .pgn chess files", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PGN Parser</h1>\n<p>A Python library for parsing pgn files into a python friendly format.</p>\n<p>The parser is built using <a href=\"http://canopy.jcoglan.com/\" rel=\"nofollow\">canopy</a>, the rest is Python.</p>\n<p>The PGN spec is based on (and thanks to) the spec at <a href=\"http://www.saremba.de/chessgml/standards/pgn/pgn-complete.htm\" rel=\"nofollow\">saremba.de</a>.</p>\n<h2>Setup</h2>\n<h3>Installing</h3>\n<p>Make sure you have python 3 installed.</p>\n<pre><code>pip install pgn_parser\n</code></pre>\n<p>Then import like so:</p>\n<pre><code>from pgn_parser import pgn, parser\n</code></pre>\n<h3>Testing</h3>\n<p>The tests are written using pytest and behave, these must be installed first:</p>\n<pre><code>pip install pytest behave\n</code></pre>\n<p>For running unit tests:</p>\n<pre><code>pytest\n</code></pre>\n<p>For running behavioural tests:</p>\n<pre><code>behave\n</code></pre>\n<h3>Building pip distributables</h3>\n<pre><code>make build\n</code></pre>\n<h2>Using</h2>\n<h3>Parsing a pgn file</h3>\n<p>To parse a pgn, you just give the string to the parser.parse along with the Actions()\nwhich the parser uses to create python structures.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pgn_parser</span> <span class=\"kn\">import</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">pgn</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">game</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"1. e4 e5\"</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"o\">=</span><span class=\"n\">pgn</span><span class=\"o\">.</span><span class=\"n\">Actions</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"mf\">1.</span> <span class=\"n\">e4</span> <span class=\"n\">e5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">black</span><span class=\"o\">.</span><span class=\"n\">san</span><span class=\"p\">)</span>\n<span class=\"n\">e5</span>\n</pre>\n<h3>Games</h3>\n<p>After parsing a game, it will be structured into the following classes which are\nnested in eachother:</p>\n<p>Game: Container for the whole game\nTo get a specific move (5 here) from a game</p>\n<pre><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>To retrieve the Movetext</p>\n<pre><code>game.movetext\n</code></pre>\n<p>To access the TagPairs</p>\n<pre><code>game.tag_pairs\n</code></pre>\n<p>To access the final score</p>\n<pre><code>game.score\n</code></pre>\n<p>Movetext: The container of all the moves, e.g \"1. c4 c5 2. e4 e5\"\nIt is just a list so can be iterated over to retrieve the moves.\nBe warned, Movetext[0] will be the first move parsed, whether 1. or 31. so\nuse Game.move() if you want a movenumber</p>\n<p>Move: A move is a move number, optionally a white Ply and or a black Ply</p>\n<p>Ply: Is the unit of moving, in standard algebraic notation (SAN),\ne.g. the black ply from \"1.e4 e5\" is e5</p>\n<p>TagPairs: An ordered dictionary of all TagPair objects.\nThese are ordered so it keeps the order read in, but will change to\nseven tag roster order if printed/stringified.</p>\n<h3>TagPairs</h3>\n<p>To store meta data about a game you do so in TagPairs</p>\n<p>The header of a pgn file</p>\n<pre>[\"Site\" \"github.com\"]\n</pre>\n<p>Is represented like so in python</p>\n<pre><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">tag_pairs</span><span class=\"p\">[</span><span class=\"s2\">\"Site\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"github.com\"</span>\n</pre>\n<h3>Moves</h3>\n<p>Each move has a move number and two ply's, white and black.\nEach ply can be anything from empty to having comments, variations and\n<a href=\"https://en.wikipedia.org/wiki/Numeric_Annotation_Glyphs\" rel=\"nofollow\">nags</a>.</p>\n<pre>moves = \"1. e4 $1 {a comment} (1.d5)\"\n</pre>\n<p>Is represented like so:</p>\n<pre><span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"o\">.</span><span class=\"n\">san</span> <span class=\"o\">==</span> <span class=\"s2\">\"e4\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"o\">.</span><span class=\"n\">comment</span> <span class=\"o\">==</span> <span class=\"s2\">\"a comment\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"o\">.</span><span class=\"n\">nags</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"$1\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"o\">.</span><span class=\"n\">variations</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"o\">.</span><span class=\"n\">san</span> <span class=\"o\">==</span> <span class=\"s2\">\"d5\"</span>\n</pre>\n<p>If a ply is empty, then its san will be represented \"\".</p>\n<h3>Limitations</h3>\n<p>No support for RAV style variations\nNo support for multiple games in one parse, must be single games\nDoesn't attempt to parse turn times as this is not in the original spec and I am\nnot sure what to support.</p>\n<h2>Authors</h2>\n<ul>\n<li><strong>Brett Bates</strong> - <em>Initial work</em> - <a href=\"https://github.com/brettbates\" rel=\"nofollow\">github</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details</p>\n\n          </div>"}, "last_serial": 6931274, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3f711bd3d1c218ef921a268f875fc8a7", "sha256": "c2ff6879076903a81d564bebd605a5ef778f0551bb5b3b69527d6b1dbf0225ef"}, "downloads": -1, "filename": "pgn_parser-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f711bd3d1c218ef921a268f875fc8a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14742, "upload_time": "2019-03-11T00:28:27", "upload_time_iso_8601": "2019-03-11T00:28:27.417380Z", "url": "https://files.pythonhosted.org/packages/0f/a7/ae755b969a0375deffd37e4556f37433c0858120088ba5e919ab8bcc74f3/pgn_parser-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afe7fb7b49b044767903f58d21e6c8bd", "sha256": "fd8c267dc4fc2b8e6d2efa1e011049fd6e8bd34efcaaee6ea71fb712defb253b"}, "downloads": -1, "filename": "pgn-parser-1.0.0.tar.gz", "has_sig": false, "md5_digest": "afe7fb7b49b044767903f58d21e6c8bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10475, "upload_time": "2019-03-11T00:28:29", "upload_time_iso_8601": "2019-03-11T00:28:29.288850Z", "url": "https://files.pythonhosted.org/packages/0e/7f/24fb88d5c6f5630a56e65939261103b8f716d4cfc7fd4afad9fcb3d44205/pgn-parser-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "88da55bc5ab9ac752ce3bf6badd0db5b", "sha256": "157f46a1be220db35b02045ae0b93bdae3460950c60c90d3a1e6786bcc243391"}, "downloads": -1, "filename": "pgn_parser-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "88da55bc5ab9ac752ce3bf6badd0db5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14752, "upload_time": "2019-03-11T00:34:46", "upload_time_iso_8601": "2019-03-11T00:34:46.130905Z", "url": "https://files.pythonhosted.org/packages/08/38/3c369311bf00566c1e8f0354fc530edb916110b0af4c9c04f08096ed66bb/pgn_parser-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f81a65fbd3dbc1db7217aa5f9b7ed78a", "sha256": "3fd07407b05ebddda3044acf16db7a54e217bf904a280349e4cc8a59a9787f01"}, "downloads": -1, "filename": "pgn-parser-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f81a65fbd3dbc1db7217aa5f9b7ed78a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10476, "upload_time": "2019-03-11T00:34:48", "upload_time_iso_8601": "2019-03-11T00:34:48.607646Z", "url": "https://files.pythonhosted.org/packages/a0/2b/e2cbc26b4119b6b64bbda7de5fa5702609c41755dc656055ba32764ce041/pgn-parser-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b62d0597658e22ef5246f328f1ea248c", "sha256": "c5a73cb7af56a91e1aa9c2376f463a22f4be4006f49186339f32175a0ba9a320"}, "downloads": -1, "filename": "pgn_parser-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b62d0597658e22ef5246f328f1ea248c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12195, "upload_time": "2020-04-01T21:16:17", "upload_time_iso_8601": "2020-04-01T21:16:17.802379Z", "url": "https://files.pythonhosted.org/packages/40/ae/34194276b66f81c7905783fd9eba95b6dfd909d0887fa52ee65f2d532b36/pgn_parser-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcac744a899fbb745bf3b273a4027a9d", "sha256": "58504a2444cfb8461d58429b8568a1cca514233b12a4b2becfb1cf7f87c9fb60"}, "downloads": -1, "filename": "pgn-parser-1.1.0.tar.gz", "has_sig": false, "md5_digest": "bcac744a899fbb745bf3b273a4027a9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12548, "upload_time": "2020-04-01T21:16:19", "upload_time_iso_8601": "2020-04-01T21:16:19.160480Z", "url": "https://files.pythonhosted.org/packages/fa/f9/c447b0ba6a6b710ae4e97d7cfa02c945e18f95bf10bcf4f33068b3823d5c/pgn-parser-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b62d0597658e22ef5246f328f1ea248c", "sha256": "c5a73cb7af56a91e1aa9c2376f463a22f4be4006f49186339f32175a0ba9a320"}, "downloads": -1, "filename": "pgn_parser-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b62d0597658e22ef5246f328f1ea248c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12195, "upload_time": "2020-04-01T21:16:17", "upload_time_iso_8601": "2020-04-01T21:16:17.802379Z", "url": "https://files.pythonhosted.org/packages/40/ae/34194276b66f81c7905783fd9eba95b6dfd909d0887fa52ee65f2d532b36/pgn_parser-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcac744a899fbb745bf3b273a4027a9d", "sha256": "58504a2444cfb8461d58429b8568a1cca514233b12a4b2becfb1cf7f87c9fb60"}, "downloads": -1, "filename": "pgn-parser-1.1.0.tar.gz", "has_sig": false, "md5_digest": "bcac744a899fbb745bf3b273a4027a9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12548, "upload_time": "2020-04-01T21:16:19", "upload_time_iso_8601": "2020-04-01T21:16:19.160480Z", "url": "https://files.pythonhosted.org/packages/fa/f9/c447b0ba6a6b710ae4e97d7cfa02c945e18f95bf10bcf4f33068b3823d5c/pgn-parser-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:45 2020"}