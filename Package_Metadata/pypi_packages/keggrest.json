{"info": {"author": "Enrico Giampieri", "author_email": "enrico.giampieri@unibo.it", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "keggrest\n========\n\nimplementation of the rest API to access the kegg database\n\nImplemented functions\n--------\n\nRESTrequest(*args, **kwargs) -> response string\n\n    create a request to the KEGG url, is the basis for all the other call.\n    Take as argument the pieces of the rest call.\n\nKEGGlink(db1, db2, **kwargs) -> (dict, dict)\n\n    evaluate the connection between two databases, return two dictionaries\n    of list that gives how each element of the database is related to the\n    elements of the other\n\nKEGGconv(db1, db2, **kwargs) -> (dict, dict)\n\n    convert between one kegg database and an external one. currently supported\n    are the uniprot, ncbi-gi and ncbi-geneid for genes and pubchem, chebi\n    for chemical compounds. Return the two lookup table (dicts) two convert\n    from one dictionary to the other\n\nKEGGlist(db, organism='', **kwargs) -> dict\n\n    return all the element of a specific database for a certain organism,\n    in the form of a dictionary element: description\n\nKEGGget(element, option='', **kwargs) -> dict\n\n    return the dictionary of description of the required object.\n    possible options are: aaseq | ntseq | mol | kcf | image | kgml\n\nKEGGbrite(britename, option='', **kwargs) -> dict of dicts\n\n    analize a brite ontology and return a dictionary of dictionaries.\n    still in beta version, works up to three level of hierarchy.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/EnricoGiampieri/keggrest.git", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EnricoGiampieri/keggrest.git", "keywords": "rest API bioinformatics", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "keggrest", "package_url": "https://pypi.org/project/keggrest/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/keggrest/", "project_urls": {"Download": "https://github.com/EnricoGiampieri/keggrest.git", "Homepage": "https://github.com/EnricoGiampieri/keggrest.git"}, "release_url": "https://pypi.org/project/keggrest/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Basic frontend for the kegg database rest API", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            keggrest<br>========<br><br>implementation of the rest API to access the kegg database<br><br>Implemented functions<br>--------<br><br>RESTrequest(*args, **kwargs) -&gt; response string<br><br>    create a request to the KEGG url, is the basis for all the other call.<br>    Take as argument the pieces of the rest call.<br><br>KEGGlink(db1, db2, **kwargs) -&gt; (dict, dict)<br><br>    evaluate the connection between two databases, return two dictionaries<br>    of list that gives how each element of the database is related to the<br>    elements of the other<br><br>KEGGconv(db1, db2, **kwargs) -&gt; (dict, dict)<br><br>    convert between one kegg database and an external one. currently supported<br>    are the uniprot, ncbi-gi and ncbi-geneid for genes and pubchem, chebi<br>    for chemical compounds. Return the two lookup table (dicts) two convert<br>    from one dictionary to the other<br><br>KEGGlist(db, organism='', **kwargs) -&gt; dict<br><br>    return all the element of a specific database for a certain organism,<br>    in the form of a dictionary element: description<br><br>KEGGget(element, option='', **kwargs) -&gt; dict<br><br>    return the dictionary of description of the required object.<br>    possible options are: aaseq | ntseq | mol | kcf | image | kgml<br><br>KEGGbrite(britename, option='', **kwargs) -&gt; dict of dicts<br><br>    analize a brite ontology and return a dictionary of dictionaries.<br>    still in beta version, works up to three level of hierarchy.\n          </div>"}, "last_serial": 793918, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7ffe412492a420c1f82365b79a968ed2", "sha256": "a877f73b305150d6273c82518ee14dda748c7103af5c8c1d3c80da7626996461"}, "downloads": -1, "filename": "keggrest-0.1.tar.gz", "has_sig": false, "md5_digest": "7ffe412492a420c1f82365b79a968ed2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1964, "upload_time": "2013-03-06T17:08:59", "upload_time_iso_8601": "2013-03-06T17:08:59.379619Z", "url": "https://files.pythonhosted.org/packages/45/41/2ac5cff7aca75e3ad768363037fab12bf3841b3b6660a7ff4d0030e3017d/keggrest-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "09b78953c05f0707bc831bfc2ce3e87e", "sha256": "36289111252d61b39b4171e89cd5c7a313f23c8d9fb6c3845ae8c86bf6708706"}, "downloads": -1, "filename": "keggrest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "09b78953c05f0707bc831bfc2ce3e87e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3469, "upload_time": "2013-03-06T17:24:20", "upload_time_iso_8601": "2013-03-06T17:24:20.918694Z", "url": "https://files.pythonhosted.org/packages/dc/5c/9fce8a45287d1b5734d01afac5b6b6d609751cb6e2b49fc521f0d83dbafb/keggrest-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "09b78953c05f0707bc831bfc2ce3e87e", "sha256": "36289111252d61b39b4171e89cd5c7a313f23c8d9fb6c3845ae8c86bf6708706"}, "downloads": -1, "filename": "keggrest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "09b78953c05f0707bc831bfc2ce3e87e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3469, "upload_time": "2013-03-06T17:24:20", "upload_time_iso_8601": "2013-03-06T17:24:20.918694Z", "url": "https://files.pythonhosted.org/packages/dc/5c/9fce8a45287d1b5734d01afac5b6b6d609751cb6e2b49fc521f0d83dbafb/keggrest-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:18 2020"}