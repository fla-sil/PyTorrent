{"info": {"author": "michaelb", "author_email": "michaelpb@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "=============================\nDjango Actable\n=============================\n\n.. image:: https://badge.fury.io/py/actable.svg\n    :target: https://badge.fury.io/py/actable\n\n.. image:: https://travis-ci.org/michaelpb/actable.svg?branch=master\n    :target: https://travis-ci.org/michaelpb/actable\n\n.. image:: https://codecov.io/gh/michaelpb/actable/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/michaelpb/actable\n\n* **NOTE:** Presently *only* supports Python 3.5+ and Django 1.9+ (see `issue\n  #1 <https://github.com/michaelpb/actable/issues/1>`_)\n\nActivity stream for Python Django. Unlike other activity streams, it is much\nmore flexible, with every event designed to supporting an arbitrary number of\nassociated objects. It also is designed to be unobtrusive: Any of your models\ncan be registered as an activity generator, all you need to do is generate a\ndata structure for context, or an HTML fragment.\n\nFeatures\n--------\n\n- Very easily / magically integrated into an existing system, with signals\n  being auto-generated based on principle objects\n- Arbitrary number of objects can be associated with every event\n- Fast look ups with denormalized events (no joins)\n- Looking up streams for particular actors or objects\n- Decent test coverage\n- Handy Paginator helper class to page through stream\n- Example project\n\n- **Not yet implemented:** Follow\n\n\nQuick start\n------------\n\n**Overview:**\n\n1. Install actable and put in requirements file\n\n2. Add to INSTALLED_APPS\n\n3. Pick several important models to implement the actable interface so that\nevery save or update generates an event\n\n4. Add those models to ACTABLE_MODELS\n\n5. Use helper classes to add a streams to your views\n\n---------------\n\nInstall:\n\n.. code-block:: bash\n\n    pip install actable\n\n\nAdd it to your `INSTALLED_APPS`:\n\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'actable.apps.ActableConfig',\n        ...\n    )\n\nPick one or more models to be your actable models. Whenever these models are\nupdated or created, it will generate events. These events can involve any\nnumber of other objects.\n\nYou must implement at least 2 methods on your actable models. The first method\nis ``get_actable_relations`` which must return a dictionary where all the\nvalues are model instances that are related to this action.  Instead of\nlimiting yourself to \"Actor, Verb, Object\", this allows you to have any number\nof relations.  Each one of these model instances will receive a copy of this\nevent to its activity stream.\n\nExample:\n\n.. code-block:: python\n\n    class ProjectBlogPost:\n        def get_actable_relations(self, event):\n            return {\n                'subject': self.user,\n                'object': self,\n                'project': self.project,\n            }\n\nNow you must choose one of 2 other methods to implement. These constitute the\ndata to cache for each event.\n\nThe most versatile of the two is one that returns a dictionary containing\nentirely simple (serializable) data types. This will be stored in serialized\nform in your database.\n\nExample:\n\n.. code-block:: python\n\n    class ProjectBlogPost:\n        def get_actable_json(self, event):\n            verb = 'posted' if event.is_creation else 'updated'\n            return {\n                'subject': self.user.username,\n                'subject_url': self.user.get_absolute_url(),\n                'object': self.title,\n                'object_url': self.get_absolute_url(),\n                'project': self.project.title,\n                'verb': verb,\n            }\n\n\nThe other option is caching an HTML snippet (string) that can be generated any\nway you see fit.\n\nExample:\n\n.. code-block:: python\n\n    class ProjectBlogPost:\n        def get_actable_html(self, event):\n            return '<a href=\"%s\">%s</a> wrote %s' % (\n                self.user.get_absolute_url(),\n                self.user.username,\n                self.title\n            )\n\nFinally, you should list your newly improved as an ``ACTABLE_MODEL``, as such:\n\n.. code-block:: python\n\n    ACTABLE_MODELS = [\n        'myapp.ProjectBlogPost',\n    ]\n\n\nCredits\n-------\n\nTools used in creating this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n\n0.1.0 (2017-11-10)\n++++++++++++++++++\n\n* First release on PyPI.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michaelpb/actable", "keywords": "actable", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "actable", "package_url": "https://pypi.org/project/actable/", "platform": "", "project_url": "https://pypi.org/project/actable/", "project_urls": {"Homepage": "https://github.com/michaelpb/actable"}, "release_url": "https://pypi.org/project/actable/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Flexible activity stream supporting multiple associated objects and fast denormalized look-ups", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/actable\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/actable.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ab29b75e349723b3d62abedf0ac24124a858f10/68747470733a2f2f62616467652e667572792e696f2f70792f61637461626c652e737667\"></a>\n<a href=\"https://travis-ci.org/michaelpb/actable\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/michaelpb/actable.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba0a67f340e03eef60a16f4136b567828257f258/68747470733a2f2f7472617669732d63692e6f72672f6d69636861656c70622f61637461626c652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/michaelpb/actable\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/michaelpb/actable/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58b91431ecf26abb4c85c405c18236a405d8ce20/68747470733a2f2f636f6465636f762e696f2f67682f6d69636861656c70622f61637461626c652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<ul>\n<li><strong>NOTE:</strong> Presently <em>only</em> supports Python 3.5+ and Django 1.9+ (see <a href=\"https://github.com/michaelpb/actable/issues/1\" rel=\"nofollow\">issue\n#1</a>)</li>\n</ul>\n<p>Activity stream for Python Django. Unlike other activity streams, it is much\nmore flexible, with every event designed to supporting an arbitrary number of\nassociated objects. It also is designed to be unobtrusive: Any of your models\ncan be registered as an activity generator, all you need to do is generate a\ndata structure for context, or an HTML fragment.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Very easily / magically integrated into an existing system, with signals\nbeing auto-generated based on principle objects</li>\n<li>Arbitrary number of objects can be associated with every event</li>\n<li>Fast look ups with denormalized events (no joins)</li>\n<li>Looking up streams for particular actors or objects</li>\n<li>Decent test coverage</li>\n<li>Handy Paginator helper class to page through stream</li>\n<li>Example project</li>\n<li><strong>Not yet implemented:</strong> Follow</li>\n</ul>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<p><strong>Overview:</strong></p>\n<ol>\n<li>Install actable and put in requirements file</li>\n<li>Add to INSTALLED_APPS</li>\n</ol>\n<p>3. Pick several important models to implement the actable interface so that\nevery save or update generates an event</p>\n<ol>\n<li>Add those models to ACTABLE_MODELS</li>\n<li>Use helper classes to add a streams to your views</li>\n</ol>\n<hr class=\"docutils\">\n<p>Install:</p>\n<pre>pip install actable\n</pre>\n<p>Add it to your <cite>INSTALLED_APPS</cite>:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'actable.apps.ActableConfig'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Pick one or more models to be your actable models. Whenever these models are\nupdated or created, it will generate events. These events can involve any\nnumber of other objects.</p>\n<p>You must implement at least 2 methods on your actable models. The first method\nis <tt>get_actable_relations</tt> which must return a dictionary where all the\nvalues are model instances that are related to this action.  Instead of\nlimiting yourself to \u201cActor, Verb, Object\u201d, this allows you to have any number\nof relations.  Each one of these model instances will receive a copy of this\nevent to its activity stream.</p>\n<p>Example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ProjectBlogPost</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_actable_relations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'subject'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span>\n            <span class=\"s1\">'object'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"s1\">'project'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>Now you must choose one of 2 other methods to implement. These constitute the\ndata to cache for each event.</p>\n<p>The most versatile of the two is one that returns a dictionary containing\nentirely simple (serializable) data types. This will be stored in serialized\nform in your database.</p>\n<p>Example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ProjectBlogPost</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_actable_json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"s1\">'posted'</span> <span class=\"k\">if</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">is_creation</span> <span class=\"k\">else</span> <span class=\"s1\">'updated'</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'subject'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span>\n            <span class=\"s1\">'subject_url'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get_absolute_url</span><span class=\"p\">(),</span>\n            <span class=\"s1\">'object'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"s1\">'object_url'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_absolute_url</span><span class=\"p\">(),</span>\n            <span class=\"s1\">'project'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">project</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"s1\">'verb'</span><span class=\"p\">:</span> <span class=\"n\">verb</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n</pre>\n<p>The other option is caching an HTML snippet (string) that can be generated any\nway you see fit.</p>\n<p>Example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ProjectBlogPost</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_actable_html</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'&lt;a href=\"</span><span class=\"si\">%s</span><span class=\"s1\">\"&gt;</span><span class=\"si\">%s</span><span class=\"s1\">&lt;/a&gt; wrote </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get_absolute_url</span><span class=\"p\">(),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>Finally, you should list your newly improved as an <tt>ACTABLE_MODEL</tt>, as such:</p>\n<pre><span class=\"n\">ACTABLE_MODELS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'myapp.ProjectBlogPost'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Tools used in creating this package:</p>\n<ul>\n<li><a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a></li>\n<li><a href=\"https://github.com/pydanny/cookiecutter-djangopackage\" rel=\"nofollow\">cookiecutter-djangopackage</a></li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2017-11-10)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3301919, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "24be7bc15eab820a78a78b56d5e36d05", "sha256": "073820a4a6895e7ce17c5dc6b58ccf386dbdbaf0d354d8782c789da53232480e"}, "downloads": -1, "filename": "actable-0.1.1.tar.gz", "has_sig": false, "md5_digest": "24be7bc15eab820a78a78b56d5e36d05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9639, "upload_time": "2017-11-03T01:53:03", "upload_time_iso_8601": "2017-11-03T01:53:03.211280Z", "url": "https://files.pythonhosted.org/packages/ff/07/4f0e662f7707989c8bf00fb7f79eb1df0ffd922b9d2ce4b5bb3ac33b1d50/actable-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "18d3d7424b851185e4ee21c5eebb1b7c", "sha256": "39b4d32084be4f53094ac4c6b5495e736ede71d04ec70a5b95930cf04a20e530"}, "downloads": -1, "filename": "actable-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "18d3d7424b851185e4ee21c5eebb1b7c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 11611, "upload_time": "2017-11-03T01:54:12", "upload_time_iso_8601": "2017-11-03T01:54:12.104519Z", "url": "https://files.pythonhosted.org/packages/1d/aa/7d3e020be458070670dc389f55650e9b9234910d638abcd614916bf28943/actable-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a20a3a73a303cac1fcf7ba181a21039", "sha256": "9069b1e19e42f3d3f18ec01f07b4979292309ba60444655a766579f4de244fc7"}, "downloads": -1, "filename": "actable-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9a20a3a73a303cac1fcf7ba181a21039", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9643, "upload_time": "2017-11-03T01:54:09", "upload_time_iso_8601": "2017-11-03T01:54:09.221221Z", "url": "https://files.pythonhosted.org/packages/69/c9/90460b8ec3a0f737cf0af41909340e8d89eb2f270245e907a59204742c4f/actable-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "18d3d7424b851185e4ee21c5eebb1b7c", "sha256": "39b4d32084be4f53094ac4c6b5495e736ede71d04ec70a5b95930cf04a20e530"}, "downloads": -1, "filename": "actable-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "18d3d7424b851185e4ee21c5eebb1b7c", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 11611, "upload_time": "2017-11-03T01:54:12", "upload_time_iso_8601": "2017-11-03T01:54:12.104519Z", "url": "https://files.pythonhosted.org/packages/1d/aa/7d3e020be458070670dc389f55650e9b9234910d638abcd614916bf28943/actable-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a20a3a73a303cac1fcf7ba181a21039", "sha256": "9069b1e19e42f3d3f18ec01f07b4979292309ba60444655a766579f4de244fc7"}, "downloads": -1, "filename": "actable-0.1.2.tar.gz", "has_sig": false, "md5_digest": "9a20a3a73a303cac1fcf7ba181a21039", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9643, "upload_time": "2017-11-03T01:54:09", "upload_time_iso_8601": "2017-11-03T01:54:09.221221Z", "url": "https://files.pythonhosted.org/packages/69/c9/90460b8ec3a0f737cf0af41909340e8d89eb2f270245e907a59204742c4f/actable-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:24 2020"}