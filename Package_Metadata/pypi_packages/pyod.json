{"info": {"author": "Yue Zhao", "author_email": "zhaoy@cmu.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "Python Outlier Detection (PyOD)\n===============================\n\n**Deployment & Documentation & Stats**\n\n.. image:: https://img.shields.io/pypi/v/pyod.svg?color=brightgreen\n   :target: https://pypi.org/project/pyod/\n   :alt: PyPI version\n\n\n.. image:: https://anaconda.org/conda-forge/pyod/badges/version.svg\n   :target: https://anaconda.org/conda-forge/pyod\n   :alt: Anaconda version\n\n\n.. image:: https://readthedocs.org/projects/pyod/badge/?version=latest\n   :target: https://pyod.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation status\n\n\n.. image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/yzhao062/pyod/master\n   :alt: Binder\n\n\n.. image:: https://img.shields.io/github/stars/yzhao062/pyod.svg\n   :target: https://github.com/yzhao062/pyod/stargazers\n   :alt: GitHub stars\n\n\n.. image:: https://img.shields.io/github/forks/yzhao062/pyod.svg?color=blue\n   :target: https://github.com/yzhao062/pyod/network\n   :alt: GitHub forks\n\n\n.. image:: https://pepy.tech/badge/pyod\n   :target: https://pepy.tech/project/pyod\n   :alt: Downloads\n\n\n.. image:: https://pepy.tech/badge/pyod/month\n   :target: https://pepy.tech/project/pyod\n   :alt: Downloads\n\n-----\n\n**Build Status & Coverage & Maintainability & License**\n\n\n.. image:: https://ci.appveyor.com/api/projects/status/1kupdy87etks5n3r/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/yzhao062/pyod/branch/master\n   :alt: Build status\n\n\n.. image:: https://travis-ci.org/yzhao062/pyod.svg?branch=master\n   :target: https://travis-ci.org/yzhao062/pyod\n   :alt: Build Status\n\n\n.. image:: https://circleci.com/gh/yzhao062/pyod.svg?style=svg\n   :target: https://circleci.com/gh/yzhao062/pyod\n   :alt: Circle CI\n\n\n.. image:: https://coveralls.io/repos/github/yzhao062/pyod/badge.svg\n   :target: https://coveralls.io/github/yzhao062/pyod\n   :alt: Coverage Status\n\n\n.. image:: https://api.codeclimate.com/v1/badges/bdc3d8d0454274c753c4/maintainability\n   :target: https://codeclimate.com/github/yzhao062/Pyod/maintainability\n   :alt: Maintainability\n\n\n.. image:: https://img.shields.io/github/license/yzhao062/pyod.svg\n   :target: https://github.com/yzhao062/pyod/blob/master/LICENSE\n   :alt: License\n\n\n-----\n\nPyOD is a comprehensive and scalable **Python toolkit** for **detecting outlying objects** in \nmultivariate data. This exciting yet challenging field is commonly referred as \n`Outlier Detection <https://en.wikipedia.org/wiki/Anomaly_detection>`_\nor `Anomaly Detection <https://en.wikipedia.org/wiki/Anomaly_detection>`_.\nSince 2017, PyOD has been successfully used in various academic researches and\ncommercial products [#Gopalan2019PIDForest]_ [#Li2019MADGAN]_ [#Wang2020adVAE]_ [#Zhao2019LSCP]_.\nIt is also well acknowledged by the machine learning community with various dedicated posts/tutorials, including\n`Analytics Vidhya <https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/>`_,\n`KDnuggets <https://www.kdnuggets.com/2019/02/outlier-detection-methods-cheat-sheet.html>`_,\n`Towards Data Science <https://towardsdatascience.com/anomaly-detection-for-dummies-15f148e559c1>`_,\n`Computer Vision News <https://rsipvision.com/ComputerVisionNews-2019March/18/>`_, and\n`awesome-machine-learning <https://github.com/josephmisiti/awesome-machine-learning#python-general-purpose>`_.\n\n\nPyOD is featured for:\n\n* **Unified APIs, detailed documentation, and interactive examples** across various algorithms.\n* **Advanced models**\\ , including **Neural Networks/Deep Learning** and **Outlier Ensembles**.\n* **Optimized performance with JIT and parallelization** when possible, using `numba <https://github.com/numba/numba>`_ and `joblib <https://github.com/joblib/joblib>`_.\n* **Compatible with both Python 2 & 3**.\n\n\n**Note on Python 2.7**\\ :\nThe maintenance of Python 2.7 will be stopped by January 1, 2020 (see `official announcement <https://github.com/python/devguide/pull/344>`_).\nTo be consistent with the Python change and PyOD's dependent libraries, e.g., scikit-learn, we will\nstop supporting Python 2.7 in the near future (dates are still to be decided). We encourage you to use\nPython 3.5 or newer for the latest functions and bug fixes. More information can\nbe found at `Moving to require Python 3 <https://python3statement.org/>`_.\n\n\n**API Demo**\\ :\n\n\n   .. code-block:: python\n\n\n       # train the KNN detector\n       from pyod.models.knn import KNN\n       clf = KNN()\n       clf.fit(X_train)\n\n       # get outlier scores\n       y_train_scores = clf.decision_scores_  # raw outlier scores\n       y_test_scores = clf.decision_function(X_test)  # outlier scores\n\n\n**Citing PyOD**\\ :\n\n`PyOD paper <http://www.jmlr.org/papers/volume20/19-011/19-011.pdf>`_ is published in\n`JMLR <http://www.jmlr.org/>`_ (machine learning open-source software track).\nIf you use PyOD in a scientific publication, we would appreciate\ncitations to the following paper::\n\n    @article{zhao2019pyod,\n      author  = {Zhao, Yue and Nasrullah, Zain and Li, Zheng},\n      title   = {PyOD: A Python Toolbox for Scalable Outlier Detection},\n      journal = {Journal of Machine Learning Research},\n      year    = {2019},\n      volume  = {20},\n      number  = {96},\n      pages   = {1-7},\n      url     = {http://jmlr.org/papers/v20/19-011.html}\n    }\n\nor::\n\n    Zhao, Y., Nasrullah, Z. and Li, Z., 2019. PyOD: A Python Toolbox for Scalable Outlier Detection. Journal of machine learning research (JMLR), 20(96), pp.1-7.\n\n\n**Key Links and Resources**\\ :\n\n\n* `View the latest codes on Github <https://github.com/yzhao062/pyod>`_\n* `Execute Interactive Jupyter Notebooks <https://mybinder.org/v2/gh/yzhao062/pyod/master>`_\n* `Anomaly Detection Resources <https://github.com/yzhao062/anomaly-detection-resources>`_\n\n\n**Table of Contents**\\ :\n\n\n* `Installation <#installation>`_\n* `API Cheatsheet & Reference <#api-cheatsheet--reference>`_\n* `Implemented Algorithms <#implemented-algorithms>`_\n* `Algorithm Benchmark <#algorithm-benchmark>`_\n* `Quick Start for Outlier Detection <#quick-start-for-outlier-detection>`_\n* `Quick Start for Combining Outlier Scores from Various Base Detectors <#quick-start-for-combining-outlier-scores-from-various-base-detectors>`_\n* `How to Contribute <#how-to-contribute>`_\n* `Inclusion Criteria <#inclusion-criteria>`_\n\n\n----\n\n\nInstallation\n^^^^^^^^^^^^\n\nIt is recommended to use **pip** for installation. Please make sure\n**the latest version** is installed, as PyOD is updated frequently:\n\n.. code-block:: bash\n\n   pip install pyod            # normal install\n   pip install --upgrade pyod  # or update if needed\n   pip install --pre pyod      # or include pre-release version for new features\n\nAlternatively, you could clone and run setup.py file:\n\n.. code-block:: bash\n\n   git clone https://github.com/yzhao062/pyod.git\n   cd pyod\n   pip install .\n\n\n**Note on Python 2.7**\\ :\nThe maintenance of Python 2.7 will be stopped by January 1, 2020 (see `official announcement <https://github.com/python/devguide/pull/344>`_)\nTo be consistent with the Python change and PyOD's dependent libraries, e.g., scikit-learn, we will\nstop supporting Python 2.7 in the near future (dates are still to be decided). We encourage you to use\nPython 3.5 or newer for the latest functions and bug fixes. More information can\nbe found at `Moving to require Python 3 <https://python3statement.org/>`_.\n\n\n**Required Dependencies**\\ :\n\n\n* Python 2.7, 3.5, 3.6, or 3.7\n* combo>=0.0.8\n* numpy>=1.13\n* numba>=0.35\n* scipy>=0.19.1\n* scikit_learn>=0.19.1\n\n**Optional Dependencies (see details below)**\\ :\n\n\n* keras (optional, required for AutoEncoder)\n* matplotlib (optional, required for running examples)\n* pandas (optional, required for running benchmark)\n* tensorflow (optional, required for AutoEncoder, other backend works)\n* xgboost (optional, required for XGBOD)\n\n**Warning 1**\\ :\nPyOD has multiple neural network based models, e.g., AutoEncoders, which are\nimplemented in Keras. However, PyOD does **NOT** install **keras** and/or\n**tensorflow** for you. This reduces the risk of interfering with your local copies.\nIf you want to use neural-net based models, please make sure Keras and a backend library, e.g., TensorFlow, are installed.\nInstructions are provided: `neural-net FAQ <https://github.com/yzhao062/pyod/wiki/Setting-up-Keras-and-Tensorflow-for-Neural-net-Based-models>`_.\nSimilarly, models depending on **xgboost**, e.g., XGBOD, would **NOT** enforce xgboost installation by default.\n\n**Warning 2**\\ :\nRunning examples needs **matplotlib**, which may throw errors in conda\nvirtual environment on mac OS. See reasons and solutions `mac_matplotlib <https://github.com/yzhao062/pyod/issues/6>`_.\n\n**Warning 3**\\ :\nPyOD contains multiple models that also exist in scikit-learn. However, these two\nlibraries' API is not exactly the same--it is recommended to use only one of them\nfor consistency but not mix the results. Refer `Differences between sckit-learn and PyOD <https://pyod.readthedocs.io/en/latest/issues.html>`_\nfor more information.\n\n\n----\n\n\nAPI Cheatsheet & Reference\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFull API Reference: (https://pyod.readthedocs.io/en/latest/pyod.html). API cheatsheet for all detectors:\n\n\n* **fit(X)**\\ : Fit detector.\n* **decision_function(X)**\\ : Predict raw anomaly score of X using the fitted detector.\n* **predict(X)**\\ : Predict if a particular sample is an outlier or not using the fitted detector.\n* **predict_proba(X)**\\ : Predict the probability of a sample being outlier using the fitted detector.\n* **fit_predict(X)**\\ : **[Deprecated in V0.6.9]** Fit detector first and then predict whether a particular sample is an outlier or not.\n* **fit_predict_score(X, y)**\\ : **[Deprecated in V0.6.9]** Fit the detector, predict on samples, and evaluate the model by predefined metrics, e.g., ROC.\n\n\nKey Attributes of a fitted model:\n\n\n* **decision_scores_**\\ : The outlier scores of the training data. The higher, the more abnormal.\n  Outliers tend to have higher scores.\n* **labels_**\\ : The binary labels of the training data. 0 stands for inliers and 1 for outliers/anomalies.\n\n\n**Note** \\ : fit_predict() and fit_predict_score() are deprecated in V0.6.9 due\nto consistency issue and will be removed in V0.8.0. To get the binary labels\nof the training data X_train, one should call clf.fit(X_train) and use\nclf.labels\\_, instead of calling clf.predict(X_train).\n\n\n----\n\nImplemented Algorithms\n^^^^^^^^^^^^^^^^^^^^^^\n\nPyOD toolkit consists of three major functional groups:\n\n**(i) Individual Detection Algorithms** :\n\n===================  ================  ======================================================================================================  =====  ========================================\nType                 Abbr              Algorithm                                                                                               Year   Ref\n===================  ================  ======================================================================================================  =====  ========================================\nLinear Model         PCA               Principal Component Analysis (the sum of weighted projected distances to the eigenvector hyperplanes)   2003   [#Shyu2003A]_\nLinear Model         MCD               Minimum Covariance Determinant (use the mahalanobis distances as the outlier scores)                    1999   [#Hardin2004Outlier]_ [#Rousseeuw1999A]_\nLinear Model         OCSVM             One-Class Support Vector Machines                                                                       2001   [#Scholkopf2001Estimating]_\nLinear Model         LMDD              Deviation-based Outlier Detection (LMDD)                                                                1996   [#Arning1996A]_\nProximity-Based      LOF               Local Outlier Factor                                                                                    2000   [#Breunig2000LOF]_\nProximity-Based      COF               Connectivity-Based Outlier Factor                                                                       2002   [#Tang2002Enhancing]_\nProximity-Based      CBLOF             Clustering-Based Local Outlier Factor                                                                   2003   [#He2003Discovering]_\nProximity-Based      LOCI              LOCI: Fast outlier detection using the local correlation integral                                       2003   [#Papadimitriou2003LOCI]_\nProximity-Based      HBOS              Histogram-based Outlier Score                                                                           2012   [#Goldstein2012Histogram]_\nProximity-Based      kNN               k Nearest Neighbors (use the distance to the kth nearest neighbor as the outlier score)                 2000   [#Ramaswamy2000Efficient]_\nProximity-Based      AvgKNN            Average kNN (use the average distance to k nearest neighbors as the outlier score)                      2002   [#Angiulli2002Fast]_\nProximity-Based      MedKNN            Median kNN (use the median distance to k nearest neighbors as the outlier score)                        2002   [#Angiulli2002Fast]_\nProximity-Based      SOD               Subspace Outlier Detection                                                                              2009   [#Kriegel2009Outlier]_\nProbabilistic        ABOD              Angle-Based Outlier Detection                                                                           2008   [#Kriegel2008Angle]_\nProbabilistic        FastABOD          Fast Angle-Based Outlier Detection using approximation                                                  2008   [#Kriegel2008Angle]_\nProbabilistic        SOS               Stochastic Outlier Selection                                                                            2012   [#Janssens2012Stochastic]_\nOutlier Ensembles    IForest           Isolation Forest                                                                                        2008   [#Liu2008Isolation]_\nOutlier Ensembles                      Feature Bagging                                                                                         2005   [#Lazarevic2005Feature]_\nOutlier Ensembles    LSCP              LSCP: Locally Selective Combination of Parallel Outlier Ensembles                                       2019   [#Zhao2019LSCP]_\nOutlier Ensembles    XGBOD             Extreme Boosting Based Outlier Detection **(Supervised)**                                               2018   [#Zhao2018XGBOD]_\nOutlier Ensembles    LODA              Lightweight On-line Detector of Anomalies                                                               2016   [#Pevny2016Loda]_\nNeural Networks      AutoEncoder       Fully connected AutoEncoder (use reconstruction error as the outlier score)                                    [#Aggarwal2015Outlier]_ [Ch.3]\nNeural Networks      VAE               Variational AutoEncoder (use reconstruction error as the outlier score)                                 2013   [#Kingma2013Auto]_\nNeural Networks      Beta-VAE          Variational AutoEncoder (all customized loss term by varying gamma and capacity)                        2018   [#Burgess2018Understanding]_\nNeural Networks      SO_GAAL           Single-Objective Generative Adversarial Active Learning                                                 2019   [#Liu2019Generative]_\nNeural Networks      MO_GAAL           Multiple-Objective Generative Adversarial Active Learning                                               2019   [#Liu2019Generative]_\n===================  ================  ======================================================================================================  =====  ========================================\n\n\n**(ii) Outlier Ensembles & Outlier Detector Combination Frameworks**:\n\n===================  ================  =====================================================================================================  =====  ========================================\nType                 Abbr              Algorithm                                                                                              Year   Ref\n===================  ================  =====================================================================================================  =====  ========================================\nOutlier Ensembles                      Feature Bagging                                                                                        2005   [#Lazarevic2005Feature]_\nOutlier Ensembles    LSCP              LSCP: Locally Selective Combination of Parallel Outlier Ensembles                                      2019   [#Zhao2019LSCP]_\nOutlier Ensembles    XGBOD             Extreme Boosting Based Outlier Detection **(Supervised)**                                              2018   [#Zhao2018XGBOD]_\nOutlier Ensembles    LODA              Lightweight On-line Detector of Anomalies                                                              2016   [#Pevny2016Loda]_\nCombination          Average           Simple combination by averaging the scores                                                             2015   [#Aggarwal2015Theoretical]_\nCombination          Weighted Average  Simple combination by averaging the scores with detector weights                                       2015   [#Aggarwal2015Theoretical]_\nCombination          Maximization      Simple combination by taking the maximum scores                                                        2015   [#Aggarwal2015Theoretical]_\nCombination          AOM               Average of Maximum                                                                                     2015   [#Aggarwal2015Theoretical]_\nCombination          MOA               Maximization of Average                                                                                2015   [#Aggarwal2015Theoretical]_\nCombination          Median            Simple combination by taking the median of the scores                                                  2015   [#Aggarwal2015Theoretical]_\nCombination          majority Vote     Simple combination by taking the majority vote of the labels (weights can be used)                     2015   [#Aggarwal2015Theoretical]_\n===================  ================  =====================================================================================================  =====  ========================================\n\n\n**(iii) Utility Functions**:\n\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\nType                 Name                    Function                                                                                                                                               Documentation\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\nData                 generate_data           Synthesized data generation; normal data is generated by a multivariate Gaussian and outliers are generated by a uniform distribution                  `generate_data <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.data.generate_data>`_\nData                 generate_data_clusters  Synthesized data generation in clusters; more complex data patterns can be created with multiple clusters                                              `generate_data_clusters <https://pyod.readthedocs.io/en/latest/pyod.utils.html#pyod.utils.data.generate_data_clusters>`_\nStat                 wpearsonr               Calculate the weighted Pearson correlation of two samples                                                                                              `wpearsonr <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.stat_models.wpearsonr>`_\nUtility              get_label_n             Turn raw outlier scores into binary labels by assign 1 to top n outlier scores                                                                         `get_label_n <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.utility.get_label_n>`_\nUtility              precision_n_scores      calculate precision @ rank n                                                                                                                           `precision_n_scores <https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.utility.precision_n_scores>`_\n===================  ======================  =====================================================================================================================================================  ======================================================================================================================================\n\n----\n\n\nAlgorithm Benchmark\n^^^^^^^^^^^^^^^^^^^\n\n**The comparison among of implemented models** is made available below\n(\\ `Figure <https://raw.githubusercontent.com/yzhao062/pyod/master/examples/ALL.png>`_\\ ,\n`compare_all_models.py <https://github.com/yzhao062/pyod/blob/master/examples/compare_all_models.py>`_\\ ,\n`Interactive Jupyter Notebooks <https://mybinder.org/v2/gh/yzhao062/pyod/master>`_\\ ).\nFor Jupyter Notebooks, please navigate to **\"/notebooks/Compare All Models.ipynb\"**.\n\n\n.. image:: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/ALL.png\n   :target: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/ALL.png\n   :alt: Comparision_of_All\n\nA benchmark is supplied for select algorithms to provide an overview of the implemented models.\nIn total, 17 benchmark datasets are used for comparison, which\ncan be downloaded at `ODDS <http://odds.cs.stonybrook.edu/#table1>`_.\n\nFor each dataset, it is first split into 60% for training and 40% for testing.\nAll experiments are repeated 10 times independently with random splits.\nThe mean of 10 trials is regarded as the final result. Three evaluation metrics\nare provided:\n\n- The area under receiver operating characteristic (ROC) curve\n- Precision @ rank n (P@N)\n- Execution time\n\nCheck the latest `benchmark <https://pyod.readthedocs.io/en/latest/benchmark.html>`_. You could replicate this process by running\n`benchmark.py <https://github.com/yzhao062/pyod/blob/master/notebooks/benchmark.py>`_.\n\n\n----\n\n\nQuick Start for Outlier Detection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPyOD has been well acknowledged by the machine learning community with a few featured posts and tutorials.\n\n**Analytics Vidhya**: `An Awesome Tutorial to Learn Outlier Detection in Python using PyOD Library <https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/>`_\n\n**KDnuggets**: `Intuitive Visualization of Outlier Detection Methods <https://www.kdnuggets.com/2019/02/outlier-detection-methods-cheat-sheet.html>`_, `An Overview of Outlier Detection Methods from PyOD <https://www.kdnuggets.com/2019/06/overview-outlier-detection-methods-pyod.html>`_\n\n**Towards Data Science**: `Anomaly Detection for Dummies <https://towardsdatascience.com/anomaly-detection-for-dummies-15f148e559c1>`_\n\n**Computer Vision News (March 2019)**: `Python Open Source Toolbox for Outlier Detection <https://rsipvision.com/ComputerVisionNews-2019March/18/>`_\n\n`\"examples/knn_example.py\" <https://github.com/yzhao062/pyod/blob/master/examples/knn_example.py>`_\ndemonstrates the basic API of using kNN detector. **It is noted that the API across all other algorithms are consistent/similar**.\n\nMore detailed instructions for running examples can be found in `examples directory <https://github.com/yzhao062/pyod/blob/master/examples>`_.\n\n\n#. Initialize a kNN detector, fit the model, and make the prediction.\n\n   .. code-block:: python\n\n\n       from pyod.models.knn import KNN   # kNN detector\n\n       # train kNN detector\n       clf_name = 'KNN'\n       clf = KNN()\n       clf.fit(X_train)\n\n       # get the prediction label and outlier scores of the training data\n       y_train_pred = clf.labels_  # binary labels (0: inliers, 1: outliers)\n       y_train_scores = clf.decision_scores_  # raw outlier scores\n\n       # get the prediction on the test data\n       y_test_pred = clf.predict(X_test)  # outlier labels (0 or 1)\n       y_test_scores = clf.decision_function(X_test)  # outlier scores\n\n#. Evaluate the prediction by ROC and Precision @ Rank n (p@n).\n\n   .. code-block:: python\n\n\n       # evaluate and print the results\n       print(\"\\nOn Training Data:\")\n       evaluate_print(clf_name, y_train, y_train_scores)\n       print(\"\\nOn Test Data:\")\n       evaluate_print(clf_name, y_test, y_test_scores)\n\n\n#. See a sample output & visualization.\n\n\n   .. code-block:: python\n\n\n       On Training Data:\n       KNN ROC:1.0, precision @ rank n:1.0\n\n       On Test Data:\n       KNN ROC:0.9989, precision @ rank n:0.9\n\n   .. code-block:: python\n\n\n       visualize(clf_name, X_train, y_train, X_test, y_test, y_train_pred,\n           y_test_pred, show_figure=True, save_figure=False)\n\nVisualization (\\ `knn_figure <https://raw.githubusercontent.com/yzhao062/pyod/master/examples/KNN.png>`_\\ ):\n\n.. image:: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/KNN.png\n   :target: https://raw.githubusercontent.com/yzhao062/pyod/master/examples/KNN.png\n   :alt: kNN example figure\n\n\n----\n\nQuick Start for Combining Outlier Scores from Various Base Detectors\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOutlier detection often suffers from model instability due to its unsupervised\nnature. Thus, it is recommended to combine various detector outputs, e.g., by averaging,\nto improve its robustness. Detector combination is a subfield of outlier ensembles;\nrefer [#Aggarwal2017Outlier]_ for more information.\n\n\nFour score combination mechanisms are shown in this demo:\n\n\n#. **Average**: average scores of all detectors.\n#. **maximization**: maximum score across all detectors.\n#. **Average of Maximum (AOM)**: divide base detectors into subgroups and take the maximum score for each subgroup. The final score is the average of all subgroup scores.\n#. **Maximum of Average (MOA)**: divide base detectors into subgroups and take the average score for each subgroup. The final score is the maximum of all subgroup scores.\n\n\n\"examples/comb_example.py\" illustrates the API for combining the output of multiple base detectors\n(\\ `comb_example.py <https://github.com/yzhao062/pyod/blob/master/examples/comb_example.py>`_\\ ,\n`Jupyter Notebooks <https://mybinder.org/v2/gh/yzhao062/pyod/master>`_\\ ). For Jupyter Notebooks,\nplease navigate to **\"/notebooks/Model Combination.ipynb\"**\n\n\n#. Import models and generate sample data.\n\n   .. code-block:: python\n\n       from pyod.models.knn import KNN\n       from pyod.models.combination import aom, moa, average, maximization\n       from pyod.utils.data import generate_data\n\n       X, y = generate_data(train_only=True)  # load data\n\n#. First initialize 20 kNN outlier detectors with different k (10 to 200), and get the outlier scores.\n\n   .. code-block:: python\n\n       # initialize 20 base detectors for combination\n       k_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,\n                   150, 160, 170, 180, 190, 200]\n\n       train_scores = np.zeros([X_train.shape[0], n_clf])\n       test_scores = np.zeros([X_test.shape[0], n_clf])\n\n       for i in range(n_clf):\n           k = k_list[i]\n\n           clf = KNN(n_neighbors=k, method='largest')\n           clf.fit(X_train_norm)\n\n           train_scores[:, i] = clf.decision_scores_\n           test_scores[:, i] = clf.decision_function(X_test_norm)\n\n#. Then the output scores are standardized into zero mean and unit variance before combination.\n   This step is crucial to adjust the detector outputs to the same scale.\n\n\n   .. code-block:: python\n\n       from pyod.utils.utility import standardizer\n       train_scores_norm, test_scores_norm = standardizer(train_scores, test_scores)\n\n#. Then four different combination algorithms are applied as described above.\n\n   .. code-block:: python\n\n       comb_by_average = average(test_scores_norm)\n       comb_by_maximization = maximization(test_scores_norm)\n       comb_by_aom = aom(test_scores_norm, 5) # 5 groups\n       comb_by_moa = moa(test_scores_norm, 5)) # 5 groups\n\n#. Finally, all four combination methods are evaluated with ROC and Precision @ Rank n.\n\n   .. code-block:: bash\n\n       Combining 20 kNN detectors\n       Combination by Average ROC:0.9194, precision @ rank n:0.4531\n       Combination by Maximization ROC:0.9198, precision @ rank n:0.4688\n       Combination by AOM ROC:0.9257, precision @ rank n:0.4844\n       Combination by MOA ROC:0.9263, precision @ rank n:0.4688\n\n----\n\nHow to Contribute\n^^^^^^^^^^^^^^^^^\n\nYou are welcome to contribute to this exciting project:\n\n\n* Please first check Issue lists for \"help wanted\" tag and comment the one\n  you are interested. We will assign the issue to you.\n\n* Fork the master branch and add your improvement/modification/fix.\n\n* Create a pull request to **development branch** and follow the pull request template `PR template <https://github.com/yzhao062/pyod/blob/master/PULL_REQUEST_TEMPLATE.md>`_\n\n* Automatic tests will be triggered. Make sure all tests are passed. Please make sure all added modules are accompanied with proper test functions.\n\n\nTo make sure the code has the same style and standard, please refer to abod.py, hbos.py, or feature_bagging.py for example.\n\nYou are also welcome to share your ideas by opening an issue or dropping me an email at zhaoy@cmu.edu :)\n\n\nInclusion Criteria\n^^^^^^^^^^^^^^^^^^\n\nSimilarly to `scikit-learn <https://scikit-learn.org/stable/faq.html#what-are-the-inclusion-criteria-for-new-algorithms>`_,\nWe mainly consider well-established algorithms for inclusion.\nA rule of thumb is at least two years since publication, 50+ citations, and usefulness.\n\nHowever, we encourage the author(s) of newly proposed models to share and add your implementation into PyOD\nfor boosting ML accessibility and reproducibility.\nThis exception only applies if you could commit to the maintenance of your model for at least two year period.\n\n\n----\n\nReference\n^^^^^^^^^\n\n\n.. [#Aggarwal2015Outlier] Aggarwal, C.C., 2015. Outlier analysis. In Data mining (pp. 237-263). Springer, Cham.\n\n.. [#Aggarwal2015Theoretical] Aggarwal, C.C. and Sathe, S., 2015. Theoretical foundations and algorithms for outlier ensembles.\\ *ACM SIGKDD Explorations Newsletter*\\ , 17(1), pp.24-47.\n\n.. [#Aggarwal2017Outlier] Aggarwal, C.C. and Sathe, S., 2017. Outlier ensembles: An introduction. Springer.\n\n.. [#Angiulli2002Fast] Angiulli, F. and Pizzuti, C., 2002, August. Fast outlier detection in high dimensional spaces. In *European Conference on Principles of Data Mining and Knowledge Discovery* pp. 15-27.\n\n.. [#Arning1996A] Arning, A., Agrawal, R. and Raghavan, P., 1996, August. A Linear Method for Deviation Detection in Large Databases. In *KDD* (Vol. 1141, No. 50, pp. 972-981).\n\n.. [#Breunig2000LOF] Breunig, M.M., Kriegel, H.P., Ng, R.T. and Sander, J., 2000, May. LOF: identifying density-based local outliers. *ACM Sigmod Record*\\ , 29(2), pp. 93-104.\n\n.. [#Burgess2018Understanding] Burgess, Christopher P., et al. \"Understanding disentangling in beta-VAE.\" arXiv preprint arXiv:1804.03599 (2018).\n\n.. [#Goldstein2012Histogram] Goldstein, M. and Dengel, A., 2012. Histogram-based outlier score (hbos): A fast unsupervised anomaly detection algorithm. In *KI-2012: Poster and Demo Track*\\ , pp.59-63.\n\n.. [#Gopalan2019PIDForest] Gopalan, P., Sharan, V. and Wieder, U., 2019. PIDForest: Anomaly Detection via Partial Identification. In Advances in Neural Information Processing Systems, pp. 15783-15793.\n\n.. [#Hardin2004Outlier] Hardin, J. and Rocke, D.M., 2004. Outlier detection in the multiple cluster setting using the minimum covariance determinant estimator. *Computational Statistics & Data Analysis*\\ , 44(4), pp.625-638.\n\n.. [#He2003Discovering] He, Z., Xu, X. and Deng, S., 2003. Discovering cluster-based local outliers. *Pattern Recognition Letters*\\ , 24(9-10), pp.1641-1650.\n\n.. [#Janssens2012Stochastic] Janssens, J.H.M., Husz\u00e1r, F., Postma, E.O. and van den Herik, H.J., 2012. Stochastic outlier selection. Technical report TiCC TR 2012-001, Tilburg University, Tilburg Center for Cognition and Communication, Tilburg, The Netherlands.\n\n.. [#Kingma2013Auto] Kingma, D.P. and Welling, M., 2013. Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114.\n\n.. [#Kriegel2008Angle] Kriegel, H.P. and Zimek, A., 2008, August. Angle-based outlier detection in high-dimensional data. In *KDD '08*\\ , pp. 444-452. ACM.\n\n.. [#Kriegel2009Outlier] Kriegel, H.P., Kr\u00f6ger, P., Schubert, E. and Zimek, A., 2009, April. Outlier detection in axis-parallel subspaces of high dimensional data. In *Pacific-Asia Conference on Knowledge Discovery and Data Mining*\\ , pp. 831-838. Springer, Berlin, Heidelberg.\n\n.. [#Lazarevic2005Feature] Lazarevic, A. and Kumar, V., 2005, August. Feature bagging for outlier detection. In *KDD '05*. 2005.\n\n.. [#Li2019MADGAN] Li, D., Chen, D., Jin, B., Shi, L., Goh, J. and Ng, S.K., 2019, September. MAD-GAN: Multivariate anomaly detection for time series data with generative adversarial networks. In *International Conference on Artificial Neural Networks* (pp. 703-716). Springer, Cham.\n\n.. [#Liu2008Isolation] Liu, F.T., Ting, K.M. and Zhou, Z.H., 2008, December. Isolation forest. In *International Conference on Data Mining*\\ , pp. 413-422. IEEE.\n\n.. [#Liu2019Generative] Liu, Y., Li, Z., Zhou, C., Jiang, Y., Sun, J., Wang, M. and He, X., 2019. Generative adversarial active learning for unsupervised outlier detection. *IEEE Transactions on Knowledge and Data Engineering*.\n\n.. [#Papadimitriou2003LOCI] Papadimitriou, S., Kitagawa, H., Gibbons, P.B. and Faloutsos, C., 2003, March. LOCI: Fast outlier detection using the local correlation integral. In *ICDE '03*, pp. 315-326. IEEE.\n\n.. [#Pevny2016Loda] Pevn\u00fd, T., 2016. Loda: Lightweight on-line detector of anomalies. *Machine Learning*, 102(2), pp.275-304.\n\n.. [#Ramaswamy2000Efficient] Ramaswamy, S., Rastogi, R. and Shim, K., 2000, May. Efficient algorithms for mining outliers from large data sets. *ACM Sigmod Record*\\ , 29(2), pp. 427-438.\n\n.. [#Rousseeuw1999A] Rousseeuw, P.J. and Driessen, K.V., 1999. A fast algorithm for the minimum covariance determinant estimator. *Technometrics*\\ , 41(3), pp.212-223.\n\n.. [#Scholkopf2001Estimating] Scholkopf, B., Platt, J.C., Shawe-Taylor, J., Smola, A.J. and Williamson, R.C., 2001. Estimating the support of a high-dimensional distribution. *Neural Computation*, 13(7), pp.1443-1471.\n\n.. [#Shyu2003A] Shyu, M.L., Chen, S.C., Sarinnapakorn, K. and Chang, L., 2003. A novel anomaly detection scheme based on principal component classifier. *MIAMI UNIV CORAL GABLES FL DEPT OF ELECTRICAL AND COMPUTER ENGINEERING*.\n\n.. [#Tang2002Enhancing] Tang, J., Chen, Z., Fu, A.W.C. and Cheung, D.W., 2002, May. Enhancing effectiveness of outlier detections for low density patterns. In *Pacific-Asia Conference on Knowledge Discovery and Data Mining*, pp. 535-548. Springer, Berlin, Heidelberg.\n\n.. [#Wang2020adVAE] Wang, X., Du, Y., Lin, S., Cui, P., Shen, Y. and Yang, Y., 2019. adVAE: A self-adversarial variational autoencoder with Gaussian anomaly prior knowledge for anomaly detection. *Knowledge-Based Systems*.\n\n.. [#Zhao2018XGBOD] Zhao, Y. and Hryniewicki, M.K. XGBOD: Improving Supervised Outlier Detection with Unsupervised Representation Learning. *IEEE International Joint Conference on Neural Networks*\\ , 2018.\n\n.. [#Zhao2019LSCP] Zhao, Y., Nasrullah, Z., Hryniewicki, M.K. and Li, Z., 2019, May. LSCP: Locally selective combination in parallel outlier ensembles. In *Proceedings of the 2019 SIAM International Conference on Data Mining (SDM)*, pp. 585-593. Society for Industrial and Applied Mathematics.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "https://github.com/yzhao062/pyod/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yzhao062/pyod", "keywords": "outlier detection,anomaly detection,outlier ensembles,data mining,neural networks", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyod", "package_url": "https://pypi.org/project/pyod/", "platform": "", "project_url": "https://pypi.org/project/pyod/", "project_urls": {"Download": "https://github.com/yzhao062/pyod/archive/master.zip", "Homepage": "https://github.com/yzhao062/pyod"}, "release_url": "https://pypi.org/project/pyod/0.7.9/", "requires_dist": null, "requires_python": "", "summary": "A Python Toolbox for Scalable Outlier Detection (Anomaly Detection)", "version": "0.7.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Deployment &amp; Documentation &amp; Stats</strong></p>\n<a href=\"https://pypi.org/project/pyod/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40f8d0cbab46c0391ac4b039d51296c01ab5d281/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796f642e7376673f636f6c6f723d627269676874677265656e\"></a>\n<a href=\"https://anaconda.org/conda-forge/pyod\" rel=\"nofollow\"><img alt=\"Anaconda version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44612014d0854816680b1f2d535f349039871231/68747470733a2f2f616e61636f6e64612e6f72672f636f6e64612d666f7267652f70796f642f6261646765732f76657273696f6e2e737667\"></a>\n<a href=\"https://pyod.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4681198a1a98e4dda2843bb9e81d79c1d20e7782/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796f642f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://mybinder.org/v2/gh/yzhao062/pyod/master\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a>\n<a href=\"https://github.com/yzhao062/pyod/stargazers\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a570c9af2f3f6ff91f753a2acc5b493f26291cc4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f797a68616f3036322f70796f642e737667\"></a>\n<a href=\"https://github.com/yzhao062/pyod/network\" rel=\"nofollow\"><img alt=\"GitHub forks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff45e9bb4a0472c33560306d77db187ef112ae18/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f797a68616f3036322f70796f642e7376673f636f6c6f723d626c7565\"></a>\n<a href=\"https://pepy.tech/project/pyod\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e93b4981d8410345ad2258a82c1b330a7d146367/68747470733a2f2f706570792e746563682f62616467652f70796f64\"></a>\n<a href=\"https://pepy.tech/project/pyod\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b7421f352823312bc4329e28879adec95213cec/68747470733a2f2f706570792e746563682f62616467652f70796f642f6d6f6e7468\"></a>\n<hr class=\"docutils\">\n<p><strong>Build Status &amp; Coverage &amp; Maintainability &amp; License</strong></p>\n<a href=\"https://ci.appveyor.com/project/yzhao062/pyod/branch/master\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ba1c61d2c35f4646df6fa049e38868c3d3c80c6a/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f316b75706479383765746b73356e33722f6272616e63682f6d61737465723f7376673d74727565\"></a>\n<a href=\"https://travis-ci.org/yzhao062/pyod\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe3363252b31156a007a760e07f7b0f3fccc5a3e/68747470733a2f2f7472617669732d63692e6f72672f797a68616f3036322f70796f642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://circleci.com/gh/yzhao062/pyod\" rel=\"nofollow\"><img alt=\"Circle CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/271c5a756d7b0ab2f99c7ee15e2e0ae4c7afc997/68747470733a2f2f636972636c6563692e636f6d2f67682f797a68616f3036322f70796f642e7376673f7374796c653d737667\"></a>\n<a href=\"https://coveralls.io/github/yzhao062/pyod\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c47292ea79eada7ee1219b1ca96fc66d603a0cf/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f797a68616f3036322f70796f642f62616467652e737667\"></a>\n<a href=\"https://codeclimate.com/github/yzhao062/Pyod/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6fe47436cb5fe06ab5255ec4bf5db0ab9438d39a/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f62646333643864303435343237346337353363342f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://github.com/yzhao062/pyod/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1511237d2d1765f9e027f792113d5ef86ac48d34/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f797a68616f3036322f70796f642e737667\"></a>\n<hr class=\"docutils\">\n<p>PyOD is a comprehensive and scalable <strong>Python toolkit</strong> for <strong>detecting outlying objects</strong> in\nmultivariate data. This exciting yet challenging field is commonly referred as\n<a href=\"https://en.wikipedia.org/wiki/Anomaly_detection\" rel=\"nofollow\">Outlier Detection</a>\nor <a href=\"https://en.wikipedia.org/wiki/Anomaly_detection\" rel=\"nofollow\">Anomaly Detection</a>.\nSince 2017, PyOD has been successfully used in various academic researches and\ncommercial products <a href=\"#gopalan2019pidforest\" id=\"id1\" rel=\"nofollow\">[9]</a> <a href=\"#li2019madgan\" id=\"id2\" rel=\"nofollow\">[17]</a> <a href=\"#wang2020advae\" id=\"id3\" rel=\"nofollow\">[27]</a> <a href=\"#zhao2019lscp\" id=\"id4\" rel=\"nofollow\">[29]</a>.\nIt is also well acknowledged by the machine learning community with various dedicated posts/tutorials, including\n<a href=\"https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/\" rel=\"nofollow\">Analytics Vidhya</a>,\n<a href=\"https://www.kdnuggets.com/2019/02/outlier-detection-methods-cheat-sheet.html\" rel=\"nofollow\">KDnuggets</a>,\n<a href=\"https://towardsdatascience.com/anomaly-detection-for-dummies-15f148e559c1\" rel=\"nofollow\">Towards Data Science</a>,\n<a href=\"https://rsipvision.com/ComputerVisionNews-2019March/18/\" rel=\"nofollow\">Computer Vision News</a>, and\n<a href=\"https://github.com/josephmisiti/awesome-machine-learning#python-general-purpose\" rel=\"nofollow\">awesome-machine-learning</a>.</p>\n<p>PyOD is featured for:</p>\n<ul>\n<li><strong>Unified APIs, detailed documentation, and interactive examples</strong> across various algorithms.</li>\n<li><strong>Advanced models</strong>, including <strong>Neural Networks/Deep Learning</strong> and <strong>Outlier Ensembles</strong>.</li>\n<li><strong>Optimized performance with JIT and parallelization</strong> when possible, using <a href=\"https://github.com/numba/numba\" rel=\"nofollow\">numba</a> and <a href=\"https://github.com/joblib/joblib\" rel=\"nofollow\">joblib</a>.</li>\n<li><strong>Compatible with both Python 2 &amp; 3</strong>.</li>\n</ul>\n<p><strong>Note on Python 2.7</strong>:\nThe maintenance of Python 2.7 will be stopped by January 1, 2020 (see <a href=\"https://github.com/python/devguide/pull/344\" rel=\"nofollow\">official announcement</a>).\nTo be consistent with the Python change and PyOD\u2019s dependent libraries, e.g., scikit-learn, we will\nstop supporting Python 2.7 in the near future (dates are still to be decided). We encourage you to use\nPython 3.5 or newer for the latest functions and bug fixes. More information can\nbe found at <a href=\"https://python3statement.org/\" rel=\"nofollow\">Moving to require Python 3</a>.</p>\n<p><strong>API Demo</strong>:</p>\n<blockquote>\n<pre><span class=\"c1\"># train the KNN detector</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyod.models.knn</span> <span class=\"kn\">import</span> <span class=\"n\">KNN</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">KNN</span><span class=\"p\">()</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get outlier scores</span>\n<span class=\"n\">y_train_scores</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">decision_scores_</span>  <span class=\"c1\"># raw outlier scores</span>\n<span class=\"n\">y_test_scores</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">decision_function</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>  <span class=\"c1\"># outlier scores</span>\n</pre>\n</blockquote>\n<p><strong>Citing PyOD</strong>:</p>\n<p><a href=\"http://www.jmlr.org/papers/volume20/19-011/19-011.pdf\" rel=\"nofollow\">PyOD paper</a> is published in\n<a href=\"http://www.jmlr.org/\" rel=\"nofollow\">JMLR</a> (machine learning open-source software track).\nIf you use PyOD in a scientific publication, we would appreciate\ncitations to the following paper:</p>\n<pre>@article{zhao2019pyod,\n  author  = {Zhao, Yue and Nasrullah, Zain and Li, Zheng},\n  title   = {PyOD: A Python Toolbox for Scalable Outlier Detection},\n  journal = {Journal of Machine Learning Research},\n  year    = {2019},\n  volume  = {20},\n  number  = {96},\n  pages   = {1-7},\n  url     = {http://jmlr.org/papers/v20/19-011.html}\n}\n</pre>\n<p>or:</p>\n<pre>Zhao, Y., Nasrullah, Z. and Li, Z., 2019. PyOD: A Python Toolbox for Scalable Outlier Detection. Journal of machine learning research (JMLR), 20(96), pp.1-7.\n</pre>\n<p><strong>Key Links and Resources</strong>:</p>\n<ul>\n<li><a href=\"https://github.com/yzhao062/pyod\" rel=\"nofollow\">View the latest codes on Github</a></li>\n<li><a href=\"https://mybinder.org/v2/gh/yzhao062/pyod/master\" rel=\"nofollow\">Execute Interactive Jupyter Notebooks</a></li>\n<li><a href=\"https://github.com/yzhao062/anomaly-detection-resources\" rel=\"nofollow\">Anomaly Detection Resources</a></li>\n</ul>\n<p><strong>Table of Contents</strong>:</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#api-cheatsheet--reference\" rel=\"nofollow\">API Cheatsheet &amp; Reference</a></li>\n<li><a href=\"#implemented-algorithms\" rel=\"nofollow\">Implemented Algorithms</a></li>\n<li><a href=\"#algorithm-benchmark\" rel=\"nofollow\">Algorithm Benchmark</a></li>\n<li><a href=\"#quick-start-for-outlier-detection\" rel=\"nofollow\">Quick Start for Outlier Detection</a></li>\n<li><a href=\"#quick-start-for-combining-outlier-scores-from-various-base-detectors\" rel=\"nofollow\">Quick Start for Combining Outlier Scores from Various Base Detectors</a></li>\n<li><a href=\"#how-to-contribute\" rel=\"nofollow\">How to Contribute</a></li>\n<li><a href=\"#inclusion-criteria\" rel=\"nofollow\">Inclusion Criteria</a></li>\n</ul>\n<hr class=\"docutils\">\n<div id=\"id5\">\n<h2>Installation</h2>\n<p>It is recommended to use <strong>pip</strong> for installation. Please make sure\n<strong>the latest version</strong> is installed, as PyOD is updated frequently:</p>\n<pre>pip install pyod            <span class=\"c1\"># normal install\n</span>pip install --upgrade pyod  <span class=\"c1\"># or update if needed\n</span>pip install --pre pyod      <span class=\"c1\"># or include pre-release version for new features</span>\n</pre>\n<p>Alternatively, you could clone and run setup.py file:</p>\n<pre>git clone https://github.com/yzhao062/pyod.git\n<span class=\"nb\">cd</span> pyod\npip install .\n</pre>\n<p><strong>Note on Python 2.7</strong>:\nThe maintenance of Python 2.7 will be stopped by January 1, 2020 (see <a href=\"https://github.com/python/devguide/pull/344\" rel=\"nofollow\">official announcement</a>)\nTo be consistent with the Python change and PyOD\u2019s dependent libraries, e.g., scikit-learn, we will\nstop supporting Python 2.7 in the near future (dates are still to be decided). We encourage you to use\nPython 3.5 or newer for the latest functions and bug fixes. More information can\nbe found at <a href=\"https://python3statement.org/\" rel=\"nofollow\">Moving to require Python 3</a>.</p>\n<p><strong>Required Dependencies</strong>:</p>\n<ul>\n<li>Python 2.7, 3.5, 3.6, or 3.7</li>\n<li>combo&gt;=0.0.8</li>\n<li>numpy&gt;=1.13</li>\n<li>numba&gt;=0.35</li>\n<li>scipy&gt;=0.19.1</li>\n<li>scikit_learn&gt;=0.19.1</li>\n</ul>\n<p><strong>Optional Dependencies (see details below)</strong>:</p>\n<ul>\n<li>keras (optional, required for AutoEncoder)</li>\n<li>matplotlib (optional, required for running examples)</li>\n<li>pandas (optional, required for running benchmark)</li>\n<li>tensorflow (optional, required for AutoEncoder, other backend works)</li>\n<li>xgboost (optional, required for XGBOD)</li>\n</ul>\n<p><strong>Warning 1</strong>:\nPyOD has multiple neural network based models, e.g., AutoEncoders, which are\nimplemented in Keras. However, PyOD does <strong>NOT</strong> install <strong>keras</strong> and/or\n<strong>tensorflow</strong> for you. This reduces the risk of interfering with your local copies.\nIf you want to use neural-net based models, please make sure Keras and a backend library, e.g., TensorFlow, are installed.\nInstructions are provided: <a href=\"https://github.com/yzhao062/pyod/wiki/Setting-up-Keras-and-Tensorflow-for-Neural-net-Based-models\" rel=\"nofollow\">neural-net FAQ</a>.\nSimilarly, models depending on <strong>xgboost</strong>, e.g., XGBOD, would <strong>NOT</strong> enforce xgboost installation by default.</p>\n<p><strong>Warning 2</strong>:\nRunning examples needs <strong>matplotlib</strong>, which may throw errors in conda\nvirtual environment on mac OS. See reasons and solutions <a href=\"https://github.com/yzhao062/pyod/issues/6\" rel=\"nofollow\">mac_matplotlib</a>.</p>\n<p><strong>Warning 3</strong>:\nPyOD contains multiple models that also exist in scikit-learn. However, these two\nlibraries\u2019 API is not exactly the same\u2013it is recommended to use only one of them\nfor consistency but not mix the results. Refer <a href=\"https://pyod.readthedocs.io/en/latest/issues.html\" rel=\"nofollow\">Differences between sckit-learn and PyOD</a>\nfor more information.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"id8\">\n<h2>API Cheatsheet &amp; Reference</h2>\n<p>Full API Reference: (<a href=\"https://pyod.readthedocs.io/en/latest/pyod.html\" rel=\"nofollow\">https://pyod.readthedocs.io/en/latest/pyod.html</a>). API cheatsheet for all detectors:</p>\n<ul>\n<li><strong>fit(X)</strong>: Fit detector.</li>\n<li><strong>decision_function(X)</strong>: Predict raw anomaly score of X using the fitted detector.</li>\n<li><strong>predict(X)</strong>: Predict if a particular sample is an outlier or not using the fitted detector.</li>\n<li><strong>predict_proba(X)</strong>: Predict the probability of a sample being outlier using the fitted detector.</li>\n<li><strong>fit_predict(X)</strong>: <strong>[Deprecated in V0.6.9]</strong> Fit detector first and then predict whether a particular sample is an outlier or not.</li>\n<li><strong>fit_predict_score(X, y)</strong>: <strong>[Deprecated in V0.6.9]</strong> Fit the detector, predict on samples, and evaluate the model by predefined metrics, e.g., ROC.</li>\n</ul>\n<p>Key Attributes of a fitted model:</p>\n<ul>\n<li><strong>decision_scores_</strong>: The outlier scores of the training data. The higher, the more abnormal.\nOutliers tend to have higher scores.</li>\n<li><strong>labels_</strong>: The binary labels of the training data. 0 stands for inliers and 1 for outliers/anomalies.</li>\n</ul>\n<p><strong>Note</strong> : fit_predict() and fit_predict_score() are deprecated in V0.6.9 due\nto consistency issue and will be removed in V0.8.0. To get the binary labels\nof the training data X_train, one should call clf.fit(X_train) and use\nclf.labels_, instead of calling clf.predict(X_train).</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"id9\">\n<h2>Implemented Algorithms</h2>\n<p>PyOD toolkit consists of three major functional groups:</p>\n<p><strong>(i) Individual Detection Algorithms</strong> :</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Type</th>\n<th>Abbr</th>\n<th>Algorithm</th>\n<th>Year</th>\n<th>Ref</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Linear Model</td>\n<td>PCA</td>\n<td>Principal Component Analysis (the sum of weighted projected distances to the eigenvector hyperplanes)</td>\n<td>2003</td>\n<td><a href=\"#shyu2003a\" id=\"id10\" rel=\"nofollow\">[25]</a></td>\n</tr>\n<tr><td>Linear Model</td>\n<td>MCD</td>\n<td>Minimum Covariance Determinant (use the mahalanobis distances as the outlier scores)</td>\n<td>1999</td>\n<td><a href=\"#hardin2004outlier\" id=\"id11\" rel=\"nofollow\">[10]</a> <a href=\"#rousseeuw1999a\" id=\"id12\" rel=\"nofollow\">[23]</a></td>\n</tr>\n<tr><td>Linear Model</td>\n<td>OCSVM</td>\n<td>One-Class Support Vector Machines</td>\n<td>2001</td>\n<td><a href=\"#scholkopf2001estimating\" id=\"id13\" rel=\"nofollow\">[24]</a></td>\n</tr>\n<tr><td>Linear Model</td>\n<td>LMDD</td>\n<td>Deviation-based Outlier Detection (LMDD)</td>\n<td>1996</td>\n<td><a href=\"#arning1996a\" id=\"id14\" rel=\"nofollow\">[5]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>LOF</td>\n<td>Local Outlier Factor</td>\n<td>2000</td>\n<td><a href=\"#breunig2000lof\" id=\"id15\" rel=\"nofollow\">[6]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>COF</td>\n<td>Connectivity-Based Outlier Factor</td>\n<td>2002</td>\n<td><a href=\"#tang2002enhancing\" id=\"id16\" rel=\"nofollow\">[26]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>CBLOF</td>\n<td>Clustering-Based Local Outlier Factor</td>\n<td>2003</td>\n<td><a href=\"#he2003discovering\" id=\"id17\" rel=\"nofollow\">[11]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>LOCI</td>\n<td>LOCI: Fast outlier detection using the local correlation integral</td>\n<td>2003</td>\n<td><a href=\"#papadimitriou2003loci\" id=\"id18\" rel=\"nofollow\">[20]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>HBOS</td>\n<td>Histogram-based Outlier Score</td>\n<td>2012</td>\n<td><a href=\"#goldstein2012histogram\" id=\"id19\" rel=\"nofollow\">[8]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>kNN</td>\n<td>k Nearest Neighbors (use the distance to the kth nearest neighbor as the outlier score)</td>\n<td>2000</td>\n<td><a href=\"#ramaswamy2000efficient\" id=\"id20\" rel=\"nofollow\">[22]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>AvgKNN</td>\n<td>Average kNN (use the average distance to k nearest neighbors as the outlier score)</td>\n<td>2002</td>\n<td><a href=\"#angiulli2002fast\" id=\"id21\" rel=\"nofollow\">[4]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>MedKNN</td>\n<td>Median kNN (use the median distance to k nearest neighbors as the outlier score)</td>\n<td>2002</td>\n<td><a href=\"#angiulli2002fast\" id=\"id22\" rel=\"nofollow\">[4]</a></td>\n</tr>\n<tr><td>Proximity-Based</td>\n<td>SOD</td>\n<td>Subspace Outlier Detection</td>\n<td>2009</td>\n<td><a href=\"#kriegel2009outlier\" id=\"id23\" rel=\"nofollow\">[15]</a></td>\n</tr>\n<tr><td>Probabilistic</td>\n<td>ABOD</td>\n<td>Angle-Based Outlier Detection</td>\n<td>2008</td>\n<td><a href=\"#kriegel2008angle\" id=\"id24\" rel=\"nofollow\">[14]</a></td>\n</tr>\n<tr><td>Probabilistic</td>\n<td>FastABOD</td>\n<td>Fast Angle-Based Outlier Detection using approximation</td>\n<td>2008</td>\n<td><a href=\"#kriegel2008angle\" id=\"id25\" rel=\"nofollow\">[14]</a></td>\n</tr>\n<tr><td>Probabilistic</td>\n<td>SOS</td>\n<td>Stochastic Outlier Selection</td>\n<td>2012</td>\n<td><a href=\"#janssens2012stochastic\" id=\"id26\" rel=\"nofollow\">[12]</a></td>\n</tr>\n<tr><td>Outlier Ensembles</td>\n<td>IForest</td>\n<td>Isolation Forest</td>\n<td>2008</td>\n<td><a href=\"#liu2008isolation\" id=\"id27\" rel=\"nofollow\">[18]</a></td>\n</tr>\n<tr><td>Outlier Ensembles</td>\n<td>\u00a0</td>\n<td>Feature Bagging</td>\n<td>2005</td>\n<td><a href=\"#lazarevic2005feature\" id=\"id28\" rel=\"nofollow\">[16]</a></td>\n</tr>\n<tr><td>Outlier Ensembles</td>\n<td>LSCP</td>\n<td>LSCP: Locally Selective Combination of Parallel Outlier Ensembles</td>\n<td>2019</td>\n<td><a href=\"#zhao2019lscp\" id=\"id29\" rel=\"nofollow\">[29]</a></td>\n</tr>\n<tr><td>Outlier Ensembles</td>\n<td>XGBOD</td>\n<td>Extreme Boosting Based Outlier Detection <strong>(Supervised)</strong></td>\n<td>2018</td>\n<td><a href=\"#zhao2018xgbod\" id=\"id30\" rel=\"nofollow\">[28]</a></td>\n</tr>\n<tr><td>Outlier Ensembles</td>\n<td>LODA</td>\n<td>Lightweight On-line Detector of Anomalies</td>\n<td>2016</td>\n<td><a href=\"#pevny2016loda\" id=\"id31\" rel=\"nofollow\">[21]</a></td>\n</tr>\n<tr><td>Neural Networks</td>\n<td>AutoEncoder</td>\n<td>Fully connected AutoEncoder (use reconstruction error as the outlier score)</td>\n<td>\u00a0</td>\n<td><a href=\"#aggarwal2015outlier\" id=\"id32\" rel=\"nofollow\">[1]</a> [Ch.3]</td>\n</tr>\n<tr><td>Neural Networks</td>\n<td>VAE</td>\n<td>Variational AutoEncoder (use reconstruction error as the outlier score)</td>\n<td>2013</td>\n<td><a href=\"#kingma2013auto\" id=\"id33\" rel=\"nofollow\">[13]</a></td>\n</tr>\n<tr><td>Neural Networks</td>\n<td>Beta-VAE</td>\n<td>Variational AutoEncoder (all customized loss term by varying gamma and capacity)</td>\n<td>2018</td>\n<td><a href=\"#burgess2018understanding\" id=\"id34\" rel=\"nofollow\">[7]</a></td>\n</tr>\n<tr><td>Neural Networks</td>\n<td>SO_GAAL</td>\n<td>Single-Objective Generative Adversarial Active Learning</td>\n<td>2019</td>\n<td><a href=\"#liu2019generative\" id=\"id35\" rel=\"nofollow\">[19]</a></td>\n</tr>\n<tr><td>Neural Networks</td>\n<td>MO_GAAL</td>\n<td>Multiple-Objective Generative Adversarial Active Learning</td>\n<td>2019</td>\n<td><a href=\"#liu2019generative\" id=\"id36\" rel=\"nofollow\">[19]</a></td>\n</tr>\n</tbody>\n</table>\n<p><strong>(ii) Outlier Ensembles &amp; Outlier Detector Combination Frameworks</strong>:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Type</th>\n<th>Abbr</th>\n<th>Algorithm</th>\n<th>Year</th>\n<th>Ref</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Outlier Ensembles</td>\n<td>\u00a0</td>\n<td>Feature Bagging</td>\n<td>2005</td>\n<td><a href=\"#lazarevic2005feature\" id=\"id37\" rel=\"nofollow\">[16]</a></td>\n</tr>\n<tr><td>Outlier Ensembles</td>\n<td>LSCP</td>\n<td>LSCP: Locally Selective Combination of Parallel Outlier Ensembles</td>\n<td>2019</td>\n<td><a href=\"#zhao2019lscp\" id=\"id38\" rel=\"nofollow\">[29]</a></td>\n</tr>\n<tr><td>Outlier Ensembles</td>\n<td>XGBOD</td>\n<td>Extreme Boosting Based Outlier Detection <strong>(Supervised)</strong></td>\n<td>2018</td>\n<td><a href=\"#zhao2018xgbod\" id=\"id39\" rel=\"nofollow\">[28]</a></td>\n</tr>\n<tr><td>Outlier Ensembles</td>\n<td>LODA</td>\n<td>Lightweight On-line Detector of Anomalies</td>\n<td>2016</td>\n<td><a href=\"#pevny2016loda\" id=\"id40\" rel=\"nofollow\">[21]</a></td>\n</tr>\n<tr><td>Combination</td>\n<td>Average</td>\n<td>Simple combination by averaging the scores</td>\n<td>2015</td>\n<td><a href=\"#aggarwal2015theoretical\" id=\"id41\" rel=\"nofollow\">[2]</a></td>\n</tr>\n<tr><td>Combination</td>\n<td>Weighted Average</td>\n<td>Simple combination by averaging the scores with detector weights</td>\n<td>2015</td>\n<td><a href=\"#aggarwal2015theoretical\" id=\"id42\" rel=\"nofollow\">[2]</a></td>\n</tr>\n<tr><td>Combination</td>\n<td>Maximization</td>\n<td>Simple combination by taking the maximum scores</td>\n<td>2015</td>\n<td><a href=\"#aggarwal2015theoretical\" id=\"id43\" rel=\"nofollow\">[2]</a></td>\n</tr>\n<tr><td>Combination</td>\n<td>AOM</td>\n<td>Average of Maximum</td>\n<td>2015</td>\n<td><a href=\"#aggarwal2015theoretical\" id=\"id44\" rel=\"nofollow\">[2]</a></td>\n</tr>\n<tr><td>Combination</td>\n<td>MOA</td>\n<td>Maximization of Average</td>\n<td>2015</td>\n<td><a href=\"#aggarwal2015theoretical\" id=\"id45\" rel=\"nofollow\">[2]</a></td>\n</tr>\n<tr><td>Combination</td>\n<td>Median</td>\n<td>Simple combination by taking the median of the scores</td>\n<td>2015</td>\n<td><a href=\"#aggarwal2015theoretical\" id=\"id46\" rel=\"nofollow\">[2]</a></td>\n</tr>\n<tr><td>Combination</td>\n<td>majority Vote</td>\n<td>Simple combination by taking the majority vote of the labels (weights can be used)</td>\n<td>2015</td>\n<td><a href=\"#aggarwal2015theoretical\" id=\"id47\" rel=\"nofollow\">[2]</a></td>\n</tr>\n</tbody>\n</table>\n<p><strong>(iii) Utility Functions</strong>:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Type</th>\n<th>Name</th>\n<th>Function</th>\n<th>Documentation</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Data</td>\n<td>generate_data</td>\n<td>Synthesized data generation; normal data is generated by a multivariate Gaussian and outliers are generated by a uniform distribution</td>\n<td><a href=\"https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.data.generate_data\" rel=\"nofollow\">generate_data</a></td>\n</tr>\n<tr><td>Data</td>\n<td>generate_data_clusters</td>\n<td>Synthesized data generation in clusters; more complex data patterns can be created with multiple clusters</td>\n<td><a href=\"https://pyod.readthedocs.io/en/latest/pyod.utils.html#pyod.utils.data.generate_data_clusters\" rel=\"nofollow\">generate_data_clusters</a></td>\n</tr>\n<tr><td>Stat</td>\n<td>wpearsonr</td>\n<td>Calculate the weighted Pearson correlation of two samples</td>\n<td><a href=\"https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.stat_models.wpearsonr\" rel=\"nofollow\">wpearsonr</a></td>\n</tr>\n<tr><td>Utility</td>\n<td>get_label_n</td>\n<td>Turn raw outlier scores into binary labels by assign 1 to top n outlier scores</td>\n<td><a href=\"https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.utility.get_label_n\" rel=\"nofollow\">get_label_n</a></td>\n</tr>\n<tr><td>Utility</td>\n<td>precision_n_scores</td>\n<td>calculate precision @ rank n</td>\n<td><a href=\"https://pyod.readthedocs.io/en/latest/pyod.utils.html#module-pyod.utils.utility.precision_n_scores\" rel=\"nofollow\">precision_n_scores</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr class=\"docutils\">\n<div id=\"id48\">\n<h2>Algorithm Benchmark</h2>\n<p><strong>The comparison among of implemented models</strong> is made available below\n(<a href=\"https://raw.githubusercontent.com/yzhao062/pyod/master/examples/ALL.png\" rel=\"nofollow\">Figure</a>,\n<a href=\"https://github.com/yzhao062/pyod/blob/master/examples/compare_all_models.py\" rel=\"nofollow\">compare_all_models.py</a>,\n<a href=\"https://mybinder.org/v2/gh/yzhao062/pyod/master\" rel=\"nofollow\">Interactive Jupyter Notebooks</a>).\nFor Jupyter Notebooks, please navigate to <strong>\u201c/notebooks/Compare All Models.ipynb\u201d</strong>.</p>\n<a href=\"https://raw.githubusercontent.com/yzhao062/pyod/master/examples/ALL.png\" rel=\"nofollow\"><img alt=\"Comparision_of_All\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d65e1da27c0523df0ce1fd2c850266e3f15d856e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f797a68616f3036322f70796f642f6d61737465722f6578616d706c65732f414c4c2e706e67\"></a>\n<p>A benchmark is supplied for select algorithms to provide an overview of the implemented models.\nIn total, 17 benchmark datasets are used for comparison, which\ncan be downloaded at <a href=\"http://odds.cs.stonybrook.edu/#table1\" rel=\"nofollow\">ODDS</a>.</p>\n<p>For each dataset, it is first split into 60% for training and 40% for testing.\nAll experiments are repeated 10 times independently with random splits.\nThe mean of 10 trials is regarded as the final result. Three evaluation metrics\nare provided:</p>\n<ul>\n<li>The area under receiver operating characteristic (ROC) curve</li>\n<li>Precision @ rank n (P@N)</li>\n<li>Execution time</li>\n</ul>\n<p>Check the latest <a href=\"https://pyod.readthedocs.io/en/latest/benchmark.html\" rel=\"nofollow\">benchmark</a>. You could replicate this process by running\n<a href=\"https://github.com/yzhao062/pyod/blob/master/notebooks/benchmark.py\" rel=\"nofollow\">benchmark.py</a>.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"id49\">\n<h2>Quick Start for Outlier Detection</h2>\n<p>PyOD has been well acknowledged by the machine learning community with a few featured posts and tutorials.</p>\n<p><strong>Analytics Vidhya</strong>: <a href=\"https://www.analyticsvidhya.com/blog/2019/02/outlier-detection-python-pyod/\" rel=\"nofollow\">An Awesome Tutorial to Learn Outlier Detection in Python using PyOD Library</a></p>\n<p><strong>KDnuggets</strong>: <a href=\"https://www.kdnuggets.com/2019/02/outlier-detection-methods-cheat-sheet.html\" rel=\"nofollow\">Intuitive Visualization of Outlier Detection Methods</a>, <a href=\"https://www.kdnuggets.com/2019/06/overview-outlier-detection-methods-pyod.html\" rel=\"nofollow\">An Overview of Outlier Detection Methods from PyOD</a></p>\n<p><strong>Towards Data Science</strong>: <a href=\"https://towardsdatascience.com/anomaly-detection-for-dummies-15f148e559c1\" rel=\"nofollow\">Anomaly Detection for Dummies</a></p>\n<p><strong>Computer Vision News (March 2019)</strong>: <a href=\"https://rsipvision.com/ComputerVisionNews-2019March/18/\" rel=\"nofollow\">Python Open Source Toolbox for Outlier Detection</a></p>\n<p><a href=\"https://github.com/yzhao062/pyod/blob/master/examples/knn_example.py\" rel=\"nofollow\">\u201cexamples/knn_example.py\u201d</a>\ndemonstrates the basic API of using kNN detector. <strong>It is noted that the API across all other algorithms are consistent/similar</strong>.</p>\n<p>More detailed instructions for running examples can be found in <a href=\"https://github.com/yzhao062/pyod/blob/master/examples\" rel=\"nofollow\">examples directory</a>.</p>\n<ol>\n<li><p>Initialize a kNN detector, fit the model, and make the prediction.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyod.models.knn</span> <span class=\"kn\">import</span> <span class=\"n\">KNN</span>   <span class=\"c1\"># kNN detector</span>\n\n<span class=\"c1\"># train kNN detector</span>\n<span class=\"n\">clf_name</span> <span class=\"o\">=</span> <span class=\"s1\">'KNN'</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">KNN</span><span class=\"p\">()</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the prediction label and outlier scores of the training data</span>\n<span class=\"n\">y_train_pred</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">labels_</span>  <span class=\"c1\"># binary labels (0: inliers, 1: outliers)</span>\n<span class=\"n\">y_train_scores</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">decision_scores_</span>  <span class=\"c1\"># raw outlier scores</span>\n\n<span class=\"c1\"># get the prediction on the test data</span>\n<span class=\"n\">y_test_pred</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>  <span class=\"c1\"># outlier labels (0 or 1)</span>\n<span class=\"n\">y_test_scores</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">decision_function</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>  <span class=\"c1\"># outlier scores</span>\n</pre>\n</li>\n<li><p>Evaluate the prediction by ROC and Precision @ Rank n (p@n).</p>\n<pre><span class=\"c1\"># evaluate and print the results</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">On Training Data:\"</span><span class=\"p\">)</span>\n<span class=\"n\">evaluate_print</span><span class=\"p\">(</span><span class=\"n\">clf_name</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_train_scores</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">On Test Data:\"</span><span class=\"p\">)</span>\n<span class=\"n\">evaluate_print</span><span class=\"p\">(</span><span class=\"n\">clf_name</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_test_scores</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>See a sample output &amp; visualization.</p>\n<pre><span class=\"n\">On</span> <span class=\"n\">Training</span> <span class=\"n\">Data</span><span class=\"p\">:</span>\n<span class=\"n\">KNN</span> <span class=\"n\">ROC</span><span class=\"p\">:</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">precision</span> <span class=\"o\">@</span> <span class=\"n\">rank</span> <span class=\"n\">n</span><span class=\"p\">:</span><span class=\"mf\">1.0</span>\n\n<span class=\"n\">On</span> <span class=\"n\">Test</span> <span class=\"n\">Data</span><span class=\"p\">:</span>\n<span class=\"n\">KNN</span> <span class=\"n\">ROC</span><span class=\"p\">:</span><span class=\"mf\">0.9989</span><span class=\"p\">,</span> <span class=\"n\">precision</span> <span class=\"o\">@</span> <span class=\"n\">rank</span> <span class=\"n\">n</span><span class=\"p\">:</span><span class=\"mf\">0.9</span>\n</pre>\n<pre><span class=\"n\">visualize</span><span class=\"p\">(</span><span class=\"n\">clf_name</span><span class=\"p\">,</span> <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_train_pred</span><span class=\"p\">,</span>\n    <span class=\"n\">y_test_pred</span><span class=\"p\">,</span> <span class=\"n\">show_figure</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">save_figure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<p>Visualization (<a href=\"https://raw.githubusercontent.com/yzhao062/pyod/master/examples/KNN.png\" rel=\"nofollow\">knn_figure</a>):</p>\n<a href=\"https://raw.githubusercontent.com/yzhao062/pyod/master/examples/KNN.png\" rel=\"nofollow\"><img alt=\"kNN example figure\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f301f670adbea6143ec255accc4cb4eee5cc256/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f797a68616f3036322f70796f642f6d61737465722f6578616d706c65732f4b4e4e2e706e67\"></a>\n</div>\n<hr class=\"docutils\">\n<div id=\"id50\">\n<h2>Quick Start for Combining Outlier Scores from Various Base Detectors</h2>\n<p>Outlier detection often suffers from model instability due to its unsupervised\nnature. Thus, it is recommended to combine various detector outputs, e.g., by averaging,\nto improve its robustness. Detector combination is a subfield of outlier ensembles;\nrefer <a href=\"#aggarwal2017outlier\" id=\"id51\" rel=\"nofollow\">[3]</a> for more information.</p>\n<p>Four score combination mechanisms are shown in this demo:</p>\n<ol>\n<li><strong>Average</strong>: average scores of all detectors.</li>\n<li><strong>maximization</strong>: maximum score across all detectors.</li>\n<li><strong>Average of Maximum (AOM)</strong>: divide base detectors into subgroups and take the maximum score for each subgroup. The final score is the average of all subgroup scores.</li>\n<li><strong>Maximum of Average (MOA)</strong>: divide base detectors into subgroups and take the average score for each subgroup. The final score is the maximum of all subgroup scores.</li>\n</ol>\n<p>\u201cexamples/comb_example.py\u201d illustrates the API for combining the output of multiple base detectors\n(<a href=\"https://github.com/yzhao062/pyod/blob/master/examples/comb_example.py\" rel=\"nofollow\">comb_example.py</a>,\n<a href=\"https://mybinder.org/v2/gh/yzhao062/pyod/master\" rel=\"nofollow\">Jupyter Notebooks</a>). For Jupyter Notebooks,\nplease navigate to <strong>\u201c/notebooks/Model Combination.ipynb\u201d</strong></p>\n<ol>\n<li><p>Import models and generate sample data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyod.models.knn</span> <span class=\"kn\">import</span> <span class=\"n\">KNN</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyod.models.combination</span> <span class=\"kn\">import</span> <span class=\"n\">aom</span><span class=\"p\">,</span> <span class=\"n\">moa</span><span class=\"p\">,</span> <span class=\"n\">average</span><span class=\"p\">,</span> <span class=\"n\">maximization</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyod.utils.data</span> <span class=\"kn\">import</span> <span class=\"n\">generate_data</span>\n\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">generate_data</span><span class=\"p\">(</span><span class=\"n\">train_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># load data</span>\n</pre>\n</li>\n<li><p>First initialize 20 kNN outlier detectors with different k (10 to 200), and get the outlier scores.</p>\n<pre><span class=\"c1\"># initialize 20 base detectors for combination</span>\n<span class=\"n\">k_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">130</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">,</span>\n            <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">170</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">]</span>\n\n<span class=\"n\">train_scores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">X_train</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">n_clf</span><span class=\"p\">])</span>\n<span class=\"n\">test_scores</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"n\">X_test</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">n_clf</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n_clf</span><span class=\"p\">):</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">k_list</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">KNN</span><span class=\"p\">(</span><span class=\"n\">n_neighbors</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'largest'</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train_norm</span><span class=\"p\">)</span>\n\n    <span class=\"n\">train_scores</span><span class=\"p\">[:,</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">decision_scores_</span>\n    <span class=\"n\">test_scores</span><span class=\"p\">[:,</span> <span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">decision_function</span><span class=\"p\">(</span><span class=\"n\">X_test_norm</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Then the output scores are standardized into zero mean and unit variance before combination.\nThis step is crucial to adjust the detector outputs to the same scale.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyod.utils.utility</span> <span class=\"kn\">import</span> <span class=\"n\">standardizer</span>\n<span class=\"n\">train_scores_norm</span><span class=\"p\">,</span> <span class=\"n\">test_scores_norm</span> <span class=\"o\">=</span> <span class=\"n\">standardizer</span><span class=\"p\">(</span><span class=\"n\">train_scores</span><span class=\"p\">,</span> <span class=\"n\">test_scores</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Then four different combination algorithms are applied as described above.</p>\n<pre><span class=\"n\">comb_by_average</span> <span class=\"o\">=</span> <span class=\"n\">average</span><span class=\"p\">(</span><span class=\"n\">test_scores_norm</span><span class=\"p\">)</span>\n<span class=\"n\">comb_by_maximization</span> <span class=\"o\">=</span> <span class=\"n\">maximization</span><span class=\"p\">(</span><span class=\"n\">test_scores_norm</span><span class=\"p\">)</span>\n<span class=\"n\">comb_by_aom</span> <span class=\"o\">=</span> <span class=\"n\">aom</span><span class=\"p\">(</span><span class=\"n\">test_scores_norm</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\"># 5 groups</span>\n<span class=\"n\">comb_by_moa</span> <span class=\"o\">=</span> <span class=\"n\">moa</span><span class=\"p\">(</span><span class=\"n\">test_scores_norm</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"c1\"># 5 groups</span>\n</pre>\n</li>\n<li><p>Finally, all four combination methods are evaluated with ROC and Precision @ Rank n.</p>\n<pre>Combining <span class=\"m\">20</span> kNN detectors\nCombination by Average ROC:0.9194, precision @ rank n:0.4531\nCombination by Maximization ROC:0.9198, precision @ rank n:0.4688\nCombination by AOM ROC:0.9257, precision @ rank n:0.4844\nCombination by MOA ROC:0.9263, precision @ rank n:0.4688\n</pre>\n</li>\n</ol>\n</div>\n<hr class=\"docutils\">\n<div id=\"id52\">\n<h2>How to Contribute</h2>\n<p>You are welcome to contribute to this exciting project:</p>\n<ul>\n<li>Please first check Issue lists for \u201chelp wanted\u201d tag and comment the one\nyou are interested. We will assign the issue to you.</li>\n<li>Fork the master branch and add your improvement/modification/fix.</li>\n<li>Create a pull request to <strong>development branch</strong> and follow the pull request template <a href=\"https://github.com/yzhao062/pyod/blob/master/PULL_REQUEST_TEMPLATE.md\" rel=\"nofollow\">PR template</a></li>\n<li>Automatic tests will be triggered. Make sure all tests are passed. Please make sure all added modules are accompanied with proper test functions.</li>\n</ul>\n<p>To make sure the code has the same style and standard, please refer to abod.py, hbos.py, or feature_bagging.py for example.</p>\n<p>You are also welcome to share your ideas by opening an issue or dropping me an email at <a href=\"mailto:zhaoy%40cmu.edu\">zhaoy<span>@</span>cmu<span>.</span>edu</a> :)</p>\n</div>\n<div id=\"id53\">\n<h2>Inclusion Criteria</h2>\n<p>Similarly to <a href=\"https://scikit-learn.org/stable/faq.html#what-are-the-inclusion-criteria-for-new-algorithms\" rel=\"nofollow\">scikit-learn</a>,\nWe mainly consider well-established algorithms for inclusion.\nA rule of thumb is at least two years since publication, 50+ citations, and usefulness.</p>\n<p>However, we encourage the author(s) of newly proposed models to share and add your implementation into PyOD\nfor boosting ML accessibility and reproducibility.\nThis exception only applies if you could commit to the maintenance of your model for at least two year period.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"reference\">\n<h2>Reference</h2>\n<table id=\"aggarwal2015outlier\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id32\" rel=\"nofollow\">[1]</a></td><td>Aggarwal, C.C., 2015. Outlier analysis. In Data mining (pp. 237-263). Springer, Cham.</td></tr>\n</tbody>\n</table>\n<table id=\"aggarwal2015theoretical\">\n<col><col>\n<tbody>\n<tr><td>[2]</td><td><em>(<a href=\"#id41\" rel=\"nofollow\">1</a>, <a href=\"#id42\" rel=\"nofollow\">2</a>, <a href=\"#id43\" rel=\"nofollow\">3</a>, <a href=\"#id44\" rel=\"nofollow\">4</a>, <a href=\"#id45\" rel=\"nofollow\">5</a>, <a href=\"#id46\" rel=\"nofollow\">6</a>, <a href=\"#id47\" rel=\"nofollow\">7</a>)</em> Aggarwal, C.C. and Sathe, S., 2015. Theoretical foundations and algorithms for outlier ensembles.<em>ACM SIGKDD Explorations Newsletter</em>, 17(1), pp.24-47.</td></tr>\n</tbody>\n</table>\n<table id=\"aggarwal2017outlier\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id51\" rel=\"nofollow\">[3]</a></td><td>Aggarwal, C.C. and Sathe, S., 2017. Outlier ensembles: An introduction. Springer.</td></tr>\n</tbody>\n</table>\n<table id=\"angiulli2002fast\">\n<col><col>\n<tbody>\n<tr><td>[4]</td><td><em>(<a href=\"#id21\" rel=\"nofollow\">1</a>, <a href=\"#id22\" rel=\"nofollow\">2</a>)</em> Angiulli, F. and Pizzuti, C., 2002, August. Fast outlier detection in high dimensional spaces. In <em>European Conference on Principles of Data Mining and Knowledge Discovery</em> pp. 15-27.</td></tr>\n</tbody>\n</table>\n<table id=\"arning1996a\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id14\" rel=\"nofollow\">[5]</a></td><td>Arning, A., Agrawal, R. and Raghavan, P., 1996, August. A Linear Method for Deviation Detection in Large Databases. In <em>KDD</em> (Vol. 1141, No. 50, pp. 972-981).</td></tr>\n</tbody>\n</table>\n<table id=\"breunig2000lof\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id15\" rel=\"nofollow\">[6]</a></td><td>Breunig, M.M., Kriegel, H.P., Ng, R.T. and Sander, J., 2000, May. LOF: identifying density-based local outliers. <em>ACM Sigmod Record</em>, 29(2), pp. 93-104.</td></tr>\n</tbody>\n</table>\n<table id=\"burgess2018understanding\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id34\" rel=\"nofollow\">[7]</a></td><td>Burgess, Christopher P., et al. \u201cUnderstanding disentangling in beta-VAE.\u201d arXiv preprint arXiv:1804.03599 (2018).</td></tr>\n</tbody>\n</table>\n<table id=\"goldstein2012histogram\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id19\" rel=\"nofollow\">[8]</a></td><td>Goldstein, M. and Dengel, A., 2012. Histogram-based outlier score (hbos): A fast unsupervised anomaly detection algorithm. In <em>KI-2012: Poster and Demo Track</em>, pp.59-63.</td></tr>\n</tbody>\n</table>\n<table id=\"gopalan2019pidforest\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[9]</a></td><td>Gopalan, P., Sharan, V. and Wieder, U., 2019. PIDForest: Anomaly Detection via Partial Identification. In Advances in Neural Information Processing Systems, pp. 15783-15793.</td></tr>\n</tbody>\n</table>\n<table id=\"hardin2004outlier\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id11\" rel=\"nofollow\">[10]</a></td><td>Hardin, J. and Rocke, D.M., 2004. Outlier detection in the multiple cluster setting using the minimum covariance determinant estimator. <em>Computational Statistics &amp; Data Analysis</em>, 44(4), pp.625-638.</td></tr>\n</tbody>\n</table>\n<table id=\"he2003discovering\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id17\" rel=\"nofollow\">[11]</a></td><td>He, Z., Xu, X. and Deng, S., 2003. Discovering cluster-based local outliers. <em>Pattern Recognition Letters</em>, 24(9-10), pp.1641-1650.</td></tr>\n</tbody>\n</table>\n<table id=\"janssens2012stochastic\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id26\" rel=\"nofollow\">[12]</a></td><td>Janssens, J.H.M., Husz\u00e1r, F., Postma, E.O. and van den Herik, H.J., 2012. Stochastic outlier selection. Technical report TiCC TR 2012-001, Tilburg University, Tilburg Center for Cognition and Communication, Tilburg, The Netherlands.</td></tr>\n</tbody>\n</table>\n<table id=\"kingma2013auto\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id33\" rel=\"nofollow\">[13]</a></td><td>Kingma, D.P. and Welling, M., 2013. Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114.</td></tr>\n</tbody>\n</table>\n<table id=\"kriegel2008angle\">\n<col><col>\n<tbody>\n<tr><td>[14]</td><td><em>(<a href=\"#id24\" rel=\"nofollow\">1</a>, <a href=\"#id25\" rel=\"nofollow\">2</a>)</em> Kriegel, H.P. and Zimek, A., 2008, August. Angle-based outlier detection in high-dimensional data. In <em>KDD \u201808</em>, pp. 444-452. ACM.</td></tr>\n</tbody>\n</table>\n<table id=\"kriegel2009outlier\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id23\" rel=\"nofollow\">[15]</a></td><td>Kriegel, H.P., Kr\u00f6ger, P., Schubert, E. and Zimek, A., 2009, April. Outlier detection in axis-parallel subspaces of high dimensional data. In <em>Pacific-Asia Conference on Knowledge Discovery and Data Mining</em>, pp. 831-838. Springer, Berlin, Heidelberg.</td></tr>\n</tbody>\n</table>\n<table id=\"lazarevic2005feature\">\n<col><col>\n<tbody>\n<tr><td>[16]</td><td><em>(<a href=\"#id28\" rel=\"nofollow\">1</a>, <a href=\"#id37\" rel=\"nofollow\">2</a>)</em> Lazarevic, A. and Kumar, V., 2005, August. Feature bagging for outlier detection. In <em>KDD \u201805</em>. 2005.</td></tr>\n</tbody>\n</table>\n<table id=\"li2019madgan\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id2\" rel=\"nofollow\">[17]</a></td><td>Li, D., Chen, D., Jin, B., Shi, L., Goh, J. and Ng, S.K., 2019, September. MAD-GAN: Multivariate anomaly detection for time series data with generative adversarial networks. In <em>International Conference on Artificial Neural Networks</em> (pp. 703-716). Springer, Cham.</td></tr>\n</tbody>\n</table>\n<table id=\"liu2008isolation\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id27\" rel=\"nofollow\">[18]</a></td><td>Liu, F.T., Ting, K.M. and Zhou, Z.H., 2008, December. Isolation forest. In <em>International Conference on Data Mining</em>, pp. 413-422. IEEE.</td></tr>\n</tbody>\n</table>\n<table id=\"liu2019generative\">\n<col><col>\n<tbody>\n<tr><td>[19]</td><td><em>(<a href=\"#id35\" rel=\"nofollow\">1</a>, <a href=\"#id36\" rel=\"nofollow\">2</a>)</em> Liu, Y., Li, Z., Zhou, C., Jiang, Y., Sun, J., Wang, M. and He, X., 2019. Generative adversarial active learning for unsupervised outlier detection. <em>IEEE Transactions on Knowledge and Data Engineering</em>.</td></tr>\n</tbody>\n</table>\n<table id=\"papadimitriou2003loci\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id18\" rel=\"nofollow\">[20]</a></td><td>Papadimitriou, S., Kitagawa, H., Gibbons, P.B. and Faloutsos, C., 2003, March. LOCI: Fast outlier detection using the local correlation integral. In <em>ICDE \u201803</em>, pp. 315-326. IEEE.</td></tr>\n</tbody>\n</table>\n<table id=\"pevny2016loda\">\n<col><col>\n<tbody>\n<tr><td>[21]</td><td><em>(<a href=\"#id31\" rel=\"nofollow\">1</a>, <a href=\"#id40\" rel=\"nofollow\">2</a>)</em> Pevn\u00fd, T., 2016. Loda: Lightweight on-line detector of anomalies. <em>Machine Learning</em>, 102(2), pp.275-304.</td></tr>\n</tbody>\n</table>\n<table id=\"ramaswamy2000efficient\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id20\" rel=\"nofollow\">[22]</a></td><td>Ramaswamy, S., Rastogi, R. and Shim, K., 2000, May. Efficient algorithms for mining outliers from large data sets. <em>ACM Sigmod Record</em>, 29(2), pp. 427-438.</td></tr>\n</tbody>\n</table>\n<table id=\"rousseeuw1999a\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id12\" rel=\"nofollow\">[23]</a></td><td>Rousseeuw, P.J. and Driessen, K.V., 1999. A fast algorithm for the minimum covariance determinant estimator. <em>Technometrics</em>, 41(3), pp.212-223.</td></tr>\n</tbody>\n</table>\n<table id=\"scholkopf2001estimating\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id13\" rel=\"nofollow\">[24]</a></td><td>Scholkopf, B., Platt, J.C., Shawe-Taylor, J., Smola, A.J. and Williamson, R.C., 2001. Estimating the support of a high-dimensional distribution. <em>Neural Computation</em>, 13(7), pp.1443-1471.</td></tr>\n</tbody>\n</table>\n<table id=\"shyu2003a\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id10\" rel=\"nofollow\">[25]</a></td><td>Shyu, M.L., Chen, S.C., Sarinnapakorn, K. and Chang, L., 2003. A novel anomaly detection scheme based on principal component classifier. <em>MIAMI UNIV CORAL GABLES FL DEPT OF ELECTRICAL AND COMPUTER ENGINEERING</em>.</td></tr>\n</tbody>\n</table>\n<table id=\"tang2002enhancing\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id16\" rel=\"nofollow\">[26]</a></td><td>Tang, J., Chen, Z., Fu, A.W.C. and Cheung, D.W., 2002, May. Enhancing effectiveness of outlier detections for low density patterns. In <em>Pacific-Asia Conference on Knowledge Discovery and Data Mining</em>, pp. 535-548. Springer, Berlin, Heidelberg.</td></tr>\n</tbody>\n</table>\n<table id=\"wang2020advae\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id3\" rel=\"nofollow\">[27]</a></td><td>Wang, X., Du, Y., Lin, S., Cui, P., Shen, Y. and Yang, Y., 2019. adVAE: A self-adversarial variational autoencoder with Gaussian anomaly prior knowledge for anomaly detection. <em>Knowledge-Based Systems</em>.</td></tr>\n</tbody>\n</table>\n<table id=\"zhao2018xgbod\">\n<col><col>\n<tbody>\n<tr><td>[28]</td><td><em>(<a href=\"#id30\" rel=\"nofollow\">1</a>, <a href=\"#id39\" rel=\"nofollow\">2</a>)</em> Zhao, Y. and Hryniewicki, M.K. XGBOD: Improving Supervised Outlier Detection with Unsupervised Representation Learning. <em>IEEE International Joint Conference on Neural Networks</em>, 2018.</td></tr>\n</tbody>\n</table>\n<table id=\"zhao2019lscp\">\n<col><col>\n<tbody>\n<tr><td>[29]</td><td><em>(<a href=\"#id4\" rel=\"nofollow\">1</a>, <a href=\"#id29\" rel=\"nofollow\">2</a>, <a href=\"#id38\" rel=\"nofollow\">3</a>)</em> Zhao, Y., Nasrullah, Z., Hryniewicki, M.K. and Li, Z., 2019, May. LSCP: Locally selective combination in parallel outlier ensembles. In <em>Proceedings of the 2019 SIAM International Conference on Data Mining (SDM)</em>, pp. 585-593. Society for Industrial and Applied Mathematics.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 7167447, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "23e1d57c7107a8589de27fbd88ea5961", "sha256": "1de465ee9192a4e399c7d4407dcc4210e7fb65ab50c10c503e73c61e1084142c"}, "downloads": -1, "filename": "pyod-0.1.1.tar.gz", "has_sig": false, "md5_digest": "23e1d57c7107a8589de27fbd88ea5961", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5988, "upload_time": "2018-05-20T22:35:09", "upload_time_iso_8601": "2018-05-20T22:35:09.493243Z", "url": "https://files.pythonhosted.org/packages/57/39/1502244e550e0f5a44c62c64910df506318024f4ee0c46f1c669807b9fb0/pyod-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d8026060a24d92629b8d29c0c95195fd", "sha256": "34433c6f245b23974d3a6264dcd3f413a745cec842010e7e920617f6674e4ba4"}, "downloads": -1, "filename": "pyod-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d8026060a24d92629b8d29c0c95195fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 976048, "upload_time": "2018-05-21T00:34:17", "upload_time_iso_8601": "2018-05-21T00:34:17.448931Z", "url": "https://files.pythonhosted.org/packages/4d/49/8351e8fb8813c2554db119822ca136675e421676ddbd0a6c51d2eb55836c/pyod-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f41d0171ce116938cc089b0e6135feea", "sha256": "1e409b674f98cd820449468e0e213abbec8750075f4acf964dd5e0aa8a42076e"}, "downloads": -1, "filename": "pyod-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f41d0171ce116938cc089b0e6135feea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 977253, "upload_time": "2018-05-21T18:31:38", "upload_time_iso_8601": "2018-05-21T18:31:38.087989Z", "url": "https://files.pythonhosted.org/packages/8c/e0/61c07fd9d5fa2fa41d7af7186371c71a12edfde0963e406c53360a43e769/pyod-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "4c5c755f935b36132e07dfb93edfef10", "sha256": "240916736bb40f2845f8892d222e73e19d20aae41c44ce0fcfc1f77ae3006ca2"}, "downloads": -1, "filename": "pyod-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4c5c755f935b36132e07dfb93edfef10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113777, "upload_time": "2018-05-23T18:10:35", "upload_time_iso_8601": "2018-05-23T18:10:35.260044Z", "url": "https://files.pythonhosted.org/packages/56/a8/0842b3faa61474b5544cee2eccc3ac593d6795c4aecd19caf62a04044a55/pyod-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3a2b5ab14b94f8accd19cf6352462d63", "sha256": "b9e4d823839df5c4f3b546adaf64aed77513187c93322935fbadd99235c7fd6f"}, "downloads": -1, "filename": "pyod-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3a2b5ab14b94f8accd19cf6352462d63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113864, "upload_time": "2018-05-23T18:45:08", "upload_time_iso_8601": "2018-05-23T18:45:08.683945Z", "url": "https://files.pythonhosted.org/packages/91/17/87fd5ece7e606523eb5176bff852c72057c07eaef9a28a7f39d67d1be40a/pyod-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "86508a97459ed69a720519c379e2ce4e", "sha256": "a49155a793038d8ecc29e05dd4f607fafdf25fe3bb1f358a1b484107db08231a"}, "downloads": -1, "filename": "pyod-0.2.2.tar.gz", "has_sig": false, "md5_digest": "86508a97459ed69a720519c379e2ce4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 118008, "upload_time": "2018-05-25T21:14:14", "upload_time_iso_8601": "2018-05-25T21:14:14.784213Z", "url": "https://files.pythonhosted.org/packages/5d/3c/d8e29c5b7a19cb4fe7ecd4642cfb06db6a6edc5e48f9ab0a2da74a586a8b/pyod-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "6adb9f71d2f24d330e2b903616b59d44", "sha256": "0602aab8136497301395fc627d0873ac3ca0cfb4b97c97a07575a339d9b6756a"}, "downloads": -1, "filename": "pyod-0.2.3.tar.gz", "has_sig": false, "md5_digest": "6adb9f71d2f24d330e2b903616b59d44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191749, "upload_time": "2018-05-26T22:41:53", "upload_time_iso_8601": "2018-05-26T22:41:53.830140Z", "url": "https://files.pythonhosted.org/packages/af/99/544d72691c19886e1b754819961bfc131b2cd07f8337a4a9650a73d38500/pyod-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "4d1b36164d5426fd9ce0c14b812e9d51", "sha256": "e70f5b434e4dc2126d7e8f6595a9825eba8eab4554d75ca2531506f5a65c72b5"}, "downloads": -1, "filename": "pyod-0.3.0.tar.gz", "has_sig": false, "md5_digest": "4d1b36164d5426fd9ce0c14b812e9d51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 191090, "upload_time": "2018-05-27T21:58:04", "upload_time_iso_8601": "2018-05-27T21:58:04.304442Z", "url": "https://files.pythonhosted.org/packages/d2/cb/9edfba41f0a918a451e9a7844bdadf1d7043222955070042c05d8359a813/pyod-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "816a22920bf01dc4d69b08236a05376f", "sha256": "c7fbd72ce5d104ae5b948791adf16bdaae15bd6fb7fa204bb3ca28237a7a050c"}, "downloads": -1, "filename": "pyod-0.3.1.tar.gz", "has_sig": false, "md5_digest": "816a22920bf01dc4d69b08236a05376f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 192421, "upload_time": "2018-05-28T22:58:41", "upload_time_iso_8601": "2018-05-28T22:58:41.422368Z", "url": "https://files.pythonhosted.org/packages/50/41/6afe48823d6db5495fac627639d990c4f143918b9515e67ea0406fdc4e22/pyod-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "3f2ab095c5532a22528e89e3e404e267", "sha256": "874c61aa99b3bb4a98c7cf675743a3429d5b8a2ac57d22953822533c631e0653"}, "downloads": -1, "filename": "pyod-0.3.2.tar.gz", "has_sig": false, "md5_digest": "3f2ab095c5532a22528e89e3e404e267", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194262, "upload_time": "2018-05-30T02:47:03", "upload_time_iso_8601": "2018-05-30T02:47:03.648148Z", "url": "https://files.pythonhosted.org/packages/83/b8/a11dc9b1d8ac6c9ba38d6584634f2365898f1f574b0662626523ebacfb62/pyod-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "b7065bfaf261d120ec2351873894d8c7", "sha256": "258e1f647c1781ea6b83190124813a76876fe16257476b22b2ba8857d6a92c59"}, "downloads": -1, "filename": "pyod-0.3.3.tar.gz", "has_sig": false, "md5_digest": "b7065bfaf261d120ec2351873894d8c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194243, "upload_time": "2018-05-30T02:54:03", "upload_time_iso_8601": "2018-05-30T02:54:03.306646Z", "url": "https://files.pythonhosted.org/packages/8c/bb/abb2b39a397eddcbe4e8960ce76ca50c7f224ef9171c70465dc646d67920/pyod-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "dc1ad7a894afd8403ebcd7ca2e103087", "sha256": "4d3aed3c701a2e968e6713569a3044428c1de4187ac103381b337b8e26ce390a"}, "downloads": -1, "filename": "pyod-0.3.4.tar.gz", "has_sig": false, "md5_digest": "dc1ad7a894afd8403ebcd7ca2e103087", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 194357, "upload_time": "2018-05-30T03:12:43", "upload_time_iso_8601": "2018-05-30T03:12:43.992042Z", "url": "https://files.pythonhosted.org/packages/5b/a6/a394ec8a7ca840c32057430aabcef89c731f4402b7a92f2098e58d520ca5/pyod-0.3.4.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "ef12d57fd5c8457318d07179ecbd6ee6", "sha256": "3f5dd5d0aa0f717b04c113c83ae84d398214b393e44854f700ebadb7df27f42b"}, "downloads": -1, "filename": "pyod-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ef12d57fd5c8457318d07179ecbd6ee6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203444, "upload_time": "2018-06-01T03:34:21", "upload_time_iso_8601": "2018-06-01T03:34:21.168460Z", "url": "https://files.pythonhosted.org/packages/00/d2/e796e4575f79cdb48e65aca3da503afd263e068b48580eaaee704255577e/pyod-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "f82b07f30388b1884ac72b2887befd22", "sha256": "c56ae61e8981f30e30f0ae8c8a36cbd5232efac1e667b22216ddc8e242375fad"}, "downloads": -1, "filename": "pyod-0.4.1.tar.gz", "has_sig": false, "md5_digest": "f82b07f30388b1884ac72b2887befd22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 204111, "upload_time": "2018-06-01T21:14:46", "upload_time_iso_8601": "2018-06-01T21:14:46.614415Z", "url": "https://files.pythonhosted.org/packages/31/39/42ecac68be0576aec01d818226f8bd40cb5406c7a7c0cf3aa27c1eff276f/pyod-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "728f4cedf8ffcd5b81c25bf1feb6eb64", "sha256": "2ecb6d3964c41f393002ca557e6f9d4b5b2d8fc1141a9c94f0e0daf0b50d9f8d"}, "downloads": -1, "filename": "pyod-0.4.2.tar.gz", "has_sig": false, "md5_digest": "728f4cedf8ffcd5b81c25bf1feb6eb64", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 204115, "upload_time": "2018-06-02T01:38:20", "upload_time_iso_8601": "2018-06-02T01:38:20.124113Z", "url": "https://files.pythonhosted.org/packages/aa/74/c881e5347f123a3fea777fe71cd36158ddd6aa6352d0db0d7f450aab4883/pyod-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "e83d34d298649c937a732048875ef2e8", "sha256": "bc170992bb72b743ea7be84cb9acc1cda25d4ec6e44dccbd554d5d9edb1c0a37"}, "downloads": -1, "filename": "pyod-0.4.3.tar.gz", "has_sig": false, "md5_digest": "e83d34d298649c937a732048875ef2e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 402634, "upload_time": "2018-06-02T23:53:41", "upload_time_iso_8601": "2018-06-02T23:53:41.136056Z", "url": "https://files.pythonhosted.org/packages/05/e0/385f68893c5a149cef29b4cac5f6ed200617e0e339e272c5d9e024ec5bef/pyod-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "105b9a31760dc6d2fc70c96f785d3c31", "sha256": "d794760bbc912d57701473e5e1870ea5f32bb08e9dd6247d64a1593aefaf3c6e"}, "downloads": -1, "filename": "pyod-0.4.4.tar.gz", "has_sig": false, "md5_digest": "105b9a31760dc6d2fc70c96f785d3c31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 205512, "upload_time": "2018-06-03T23:31:20", "upload_time_iso_8601": "2018-06-03T23:31:20.458524Z", "url": "https://files.pythonhosted.org/packages/b9/9c/35fb7cca81ce86b3ec1aeeb43d0e51e50f41465ee66f5004ea7981cab50c/pyod-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "b16a6b5ff535b95769a03435ae5030fb", "sha256": "deab82415894dc1b30fe31766f5966e77a2a95117d02365f62dd1c37b946ca4d"}, "downloads": -1, "filename": "pyod-0.4.5.tar.gz", "has_sig": false, "md5_digest": "b16a6b5ff535b95769a03435ae5030fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 206947, "upload_time": "2018-06-05T02:19:30", "upload_time_iso_8601": "2018-06-05T02:19:30.702281Z", "url": "https://files.pythonhosted.org/packages/c8/65/2752d8dc441321d165b8e69c1d97a268c870094f2c6a8e2c11f776edf060/pyod-0.4.5.tar.gz", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "46b374b49337e2e140fbe4ced64b1b5b", "sha256": "1e9e6ea058934e49981dbdc95b5e64717e2aebad454b04e9f762cb55ef11a1b8"}, "downloads": -1, "filename": "pyod-0.4.6.tar.gz", "has_sig": false, "md5_digest": "46b374b49337e2e140fbe4ced64b1b5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 207896, "upload_time": "2018-06-06T02:33:15", "upload_time_iso_8601": "2018-06-06T02:33:15.992226Z", "url": "https://files.pythonhosted.org/packages/3c/3f/df6759aabacb915ba62e278cf4eed3c0b1e278fabaa4ef29d76d5f549c70/pyod-0.4.6.tar.gz", "yanked": false}], "0.4.7": [{"comment_text": "", "digests": {"md5": "537e221e48173c065db32ed971067ce9", "sha256": "9eec844ca94d285e00fa5edfa693829adffba8907b361facd5a3dd3e1fd0b934"}, "downloads": -1, "filename": "pyod-0.4.7.tar.gz", "has_sig": false, "md5_digest": "537e221e48173c065db32ed971067ce9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 210321, "upload_time": "2018-06-06T23:44:28", "upload_time_iso_8601": "2018-06-06T23:44:28.964325Z", "url": "https://files.pythonhosted.org/packages/6a/70/ab3a4a31f96c12b26341d8b20467b372f4da9cfa2f6363ac45ca213f7cd4/pyod-0.4.7.tar.gz", "yanked": false}], "0.4.8": [{"comment_text": "", "digests": {"md5": "6087c6c1bb4c4549cbc85330116483f2", "sha256": "63fb396faf32bc4f5a374297405531db7ab60efad44a672770178e8e1712979c"}, "downloads": -1, "filename": "pyod-0.4.8.tar.gz", "has_sig": false, "md5_digest": "6087c6c1bb4c4549cbc85330116483f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 209533, "upload_time": "2018-06-08T01:55:20", "upload_time_iso_8601": "2018-06-08T01:55:20.003054Z", "url": "https://files.pythonhosted.org/packages/f2/dc/89406d387ad4494134ce42da525dccb0f54451802791ece00960260400f9/pyod-0.4.8.tar.gz", "yanked": false}], "0.4.9": [{"comment_text": "", "digests": {"md5": "f373a21afb31ac5734b8d658cf761574", "sha256": "ddf071e16577a3b509b775f8df1534a5e89f5c96766c2801fe2ec18f1d6a1b35"}, "downloads": -1, "filename": "pyod-0.4.9.tar.gz", "has_sig": false, "md5_digest": "f373a21afb31ac5734b8d658cf761574", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 210939, "upload_time": "2018-06-10T01:09:59", "upload_time_iso_8601": "2018-06-10T01:09:59.905642Z", "url": "https://files.pythonhosted.org/packages/d5/2f/66f6d2c7e8f0736e2697a848bd69f6d4827d9da1b2b6a1c13ab38d9a0657/pyod-0.4.9.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "ed8e2aaa5f00e99850c27ab2b8d6ab3c", "sha256": "c4dd1c9ea32aa192af6ff0e71dd9c2f2f6599fbdf0d336d493e69d8673c47d0d"}, "downloads": -1, "filename": "pyod-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ed8e2aaa5f00e99850c27ab2b8d6ab3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 213512, "upload_time": "2018-06-11T01:44:56", "upload_time_iso_8601": "2018-06-11T01:44:56.180504Z", "url": "https://files.pythonhosted.org/packages/c9/8c/6774fa2e7ae6fe9c2c648114d15ba584f950002377480e14183a0999af30/pyod-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "d49372ecb6feafa205fbf1221aab9ad6", "sha256": "60c1fde4ff21faf72875f4105316175d9c57e629a1af08b57477824694d9ae02"}, "downloads": -1, "filename": "pyod-0.5.1.tar.gz", "has_sig": false, "md5_digest": "d49372ecb6feafa205fbf1221aab9ad6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39770, "upload_time": "2018-06-13T01:06:16", "upload_time_iso_8601": "2018-06-13T01:06:16.927010Z", "url": "https://files.pythonhosted.org/packages/5e/d7/05e159e8e9cdf60d7e81469af956e8d24d49916db22ce78f5da99cc8ea2c/pyod-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "7678ced404379d0712ce4eb3c99d9a63", "sha256": "1401d51a050105071fa926c99c8244b6f6ab94d352d5a05f14daf8b74b3dbc98"}, "downloads": -1, "filename": "pyod-0.5.2.tar.gz", "has_sig": false, "md5_digest": "7678ced404379d0712ce4eb3c99d9a63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39715, "upload_time": "2018-06-13T02:25:30", "upload_time_iso_8601": "2018-06-13T02:25:30.405421Z", "url": "https://files.pythonhosted.org/packages/e0/40/8e8213a6e12a5bc95d2e6cd8ffe0886f67285dda42ae17f9bc8a6e308313/pyod-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "393b97b50781300a34a8973027d11ecb", "sha256": "f2f59c00a9c999564add0ebb04f2877246adc1e3fe73e573656e11ab62a38645"}, "downloads": -1, "filename": "pyod-0.5.3.tar.gz", "has_sig": false, "md5_digest": "393b97b50781300a34a8973027d11ecb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40706, "upload_time": "2018-06-15T11:31:36", "upload_time_iso_8601": "2018-06-15T11:31:36.649382Z", "url": "https://files.pythonhosted.org/packages/05/57/41ca21b0a65254ec55abe0ec378b052e856735c2112cfdd9a0c658614428/pyod-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "4ec0b76105c081295cfaed7720e0a3fc", "sha256": "1912a66e3ffdc363543c687cad18f1ff084bb905833135e639edcf11ad9aec9f"}, "downloads": -1, "filename": "pyod-0.5.4.tar.gz", "has_sig": false, "md5_digest": "4ec0b76105c081295cfaed7720e0a3fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44177, "upload_time": "2018-06-18T22:54:28", "upload_time_iso_8601": "2018-06-18T22:54:28.307024Z", "url": "https://files.pythonhosted.org/packages/08/bf/05bef83df97f81a6492818e0a42034e1bcc222894fd66bd4ce66c23a8654/pyod-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "8867d9ccf22b4bf44b29c17b716d0894", "sha256": "06d5b87e57f83681ab9d543667473d1911edef8ce1ca3fe1f39d8423185c6887"}, "downloads": -1, "filename": "pyod-0.5.5.tar.gz", "has_sig": false, "md5_digest": "8867d9ccf22b4bf44b29c17b716d0894", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44053, "upload_time": "2018-07-25T20:40:15", "upload_time_iso_8601": "2018-07-25T20:40:15.026016Z", "url": "https://files.pythonhosted.org/packages/f8/7c/cc1976360a3b407db3b504f0e5377a6ba7f69c57779be5e8d61bc9377c8e/pyod-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "413782a3a64911003ce441e4d4684099", "sha256": "a18c3131cc7e08460f1f1aa56ae00680454bc445eaab5c8cbfe410a694905158"}, "downloads": -1, "filename": "pyod-0.5.6.tar.gz", "has_sig": false, "md5_digest": "413782a3a64911003ce441e4d4684099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44064, "upload_time": "2018-07-25T21:05:25", "upload_time_iso_8601": "2018-07-25T21:05:25.723735Z", "url": "https://files.pythonhosted.org/packages/1b/be/e3d575d1d0d6573e51db2d505f2f5b093ec328936369fbb21ede484b168a/pyod-0.5.6.tar.gz", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "fbd9dede019173664b04e83935d080e5", "sha256": "25b20ffedaaf0cb9571eb7bac9ab646d5203a1d4eb52a287ef3579bdc3a04502"}, "downloads": -1, "filename": "pyod-0.5.7.tar.gz", "has_sig": false, "md5_digest": "fbd9dede019173664b04e83935d080e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46492, "upload_time": "2018-09-03T21:06:04", "upload_time_iso_8601": "2018-09-03T21:06:04.788340Z", "url": "https://files.pythonhosted.org/packages/34/63/2abe6f6ddce4bca73a16abe535f8dad784a936a2a3b176d7f24c35442b33/pyod-0.5.7.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "0d8118b621a7b952b998e589993baed6", "sha256": "6de56d2099dc60a6eb2e9eea146c361d35aefb9225c441619c636e3472590ebe"}, "downloads": -1, "filename": "pyod-0.5.8.tar.gz", "has_sig": false, "md5_digest": "0d8118b621a7b952b998e589993baed6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47130, "upload_time": "2018-09-04T16:25:03", "upload_time_iso_8601": "2018-09-04T16:25:03.377157Z", "url": "https://files.pythonhosted.org/packages/68/88/875694e2dda668cf9003224bbcd84fa22c7a5b3f23b7c33fd05f6a3d4189/pyod-0.5.8.tar.gz", "yanked": false}], "0.5.9": [{"comment_text": "", "digests": {"md5": "20b1ca0ad6e63a2eeba2dc60c05accd0", "sha256": "b77d5c4d572d935b4e3d736e63f05cbf487ab38c9d411a4d5dbab7a79a096b3c"}, "downloads": -1, "filename": "pyod-0.5.9.tar.gz", "has_sig": false, "md5_digest": "20b1ca0ad6e63a2eeba2dc60c05accd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47670, "upload_time": "2018-09-04T20:21:05", "upload_time_iso_8601": "2018-09-04T20:21:05.898839Z", "url": "https://files.pythonhosted.org/packages/8b/da/909324559bc5f5bc7978fd501e0552579283074577087940b3bc0bc11226/pyod-0.5.9.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "5bc5a4563749968052aff3f34d343cf5", "sha256": "8167e68f7359859b414468fb3b06b3850ea0512d70cf3a0493b496e0bb2704b7"}, "downloads": -1, "filename": "pyod-0.6.0.tar.gz", "has_sig": false, "md5_digest": "5bc5a4563749968052aff3f34d343cf5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48591, "upload_time": "2018-10-19T21:47:29", "upload_time_iso_8601": "2018-10-19T21:47:29.924367Z", "url": "https://files.pythonhosted.org/packages/b3/bf/921f0c62d1d453640314ef8026a57561414017c96dd929f7685a3172af04/pyod-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "a601c79cbd801a01d32339d94fc564bf", "sha256": "0835891b3196beb632c8e5d07a01580f5821b3327739309a666b26c095613d2d"}, "downloads": -1, "filename": "pyod-0.6.1.tar.gz", "has_sig": false, "md5_digest": "a601c79cbd801a01d32339d94fc564bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48736, "upload_time": "2018-11-10T21:41:51", "upload_time_iso_8601": "2018-11-10T21:41:51.044290Z", "url": "https://files.pythonhosted.org/packages/d0/81/c97f3d800bc6ea52ea4bf085d0c4b929b0e24b523754e4c5b62dc63e45fb/pyod-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "ab5d237e9694e5ba4bc011f67e120405", "sha256": "60b97da76967c07e46be786675535c29430cb73eda5d56c1ffcaef6451cbaedc"}, "downloads": -1, "filename": "pyod-0.6.2.tar.gz", "has_sig": false, "md5_digest": "ab5d237e9694e5ba4bc011f67e120405", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49371, "upload_time": "2018-11-26T21:04:50", "upload_time_iso_8601": "2018-11-26T21:04:50.312018Z", "url": "https://files.pythonhosted.org/packages/54/ff/78843e2654fef0a7e191a981ec86c597ed64bf9d67b8fe0c3b211fbf2603/pyod-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "c4900b7c344b100d7c9a168cce663a7e", "sha256": "a82f86b79a01a01b0d7e1951dcaead325463d86364e775cbb27a8ffed2b7898a"}, "downloads": -1, "filename": "pyod-0.6.3.tar.gz", "has_sig": false, "md5_digest": "c4900b7c344b100d7c9a168cce663a7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49436, "upload_time": "2018-11-26T23:05:30", "upload_time_iso_8601": "2018-11-26T23:05:30.279712Z", "url": "https://files.pythonhosted.org/packages/02/c6/d36335e97ccd8960e06e192824ee5cb3e9fe81b0adb06c6aaebba85987ae/pyod-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "7b241facfc3fd8b92c91ff7ed8c07769", "sha256": "38b02eb907b211117e4700ad015102cb713f554c02af9e200124e2490f5a31c0"}, "downloads": -1, "filename": "pyod-0.6.4.tar.gz", "has_sig": false, "md5_digest": "7b241facfc3fd8b92c91ff7ed8c07769", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49673, "upload_time": "2018-11-27T01:00:01", "upload_time_iso_8601": "2018-11-27T01:00:01.802320Z", "url": "https://files.pythonhosted.org/packages/f6/2f/085d714c9cc50aea4a96c5378366e92186095369f63d0c358e6f04c379fe/pyod-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "6a6259aded9b0640406281592cd62540", "sha256": "58c909199e0229e25f705abcac86a3aacd10331efd16ed645afadafcde213dac"}, "downloads": -1, "filename": "pyod-0.6.5.tar.gz", "has_sig": false, "md5_digest": "6a6259aded9b0640406281592cd62540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60017, "upload_time": "2018-12-03T22:01:10", "upload_time_iso_8601": "2018-12-03T22:01:10.187144Z", "url": "https://files.pythonhosted.org/packages/46/0b/a2ff966866100e7d1588d4f2b900578816e40c477b73a34f6018e65a652d/pyod-0.6.5.tar.gz", "yanked": false}], "0.6.6": [{"comment_text": "", "digests": {"md5": "7a4a0ef55e1cd132c88f493dbc1cb217", "sha256": "86af36fc7942afd066e929e3ebdf8655118412aeeb88937874b3fbe6515e793e"}, "downloads": -1, "filename": "pyod-0.6.6.tar.gz", "has_sig": false, "md5_digest": "7a4a0ef55e1cd132c88f493dbc1cb217", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72644, "upload_time": "2018-12-24T00:12:53", "upload_time_iso_8601": "2018-12-24T00:12:53.579649Z", "url": "https://files.pythonhosted.org/packages/a3/e8/7cd914fd8259391f5dc7d6ba504fa9f64c4f1934f697f0f0a96d86403878/pyod-0.6.6.tar.gz", "yanked": false}], "0.6.6b1": [{"comment_text": "", "digests": {"md5": "4b2ad1433d786af53de1f5b12c2191e3", "sha256": "21ae52eb82a73513901e9744dcc483e4bb89f63dd758b4cef8219301e15bafed"}, "downloads": -1, "filename": "pyod-0.6.6b1.tar.gz", "has_sig": false, "md5_digest": "4b2ad1433d786af53de1f5b12c2191e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71412, "upload_time": "2018-12-19T19:47:53", "upload_time_iso_8601": "2018-12-19T19:47:53.049233Z", "url": "https://files.pythonhosted.org/packages/04/2e/abd6b86e6eb0f2bde672965d7e995f06da08970f962f3e360ff65665b3ec/pyod-0.6.6b1.tar.gz", "yanked": false}], "0.6.7": [{"comment_text": "", "digests": {"md5": "cc5895e6c39a59697513533266af445d", "sha256": "829d7a4c9db3b4892486eb019fc6efd2b00a591c7d20eb445d90b9fe5132ee95"}, "downloads": -1, "filename": "pyod-0.6.7.tar.gz", "has_sig": false, "md5_digest": "cc5895e6c39a59697513533266af445d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72233, "upload_time": "2018-12-30T23:39:10", "upload_time_iso_8601": "2018-12-30T23:39:10.129787Z", "url": "https://files.pythonhosted.org/packages/e8/69/6bccbabed95ceec365482c00e13d52984a2e4b5cfe81733e40807b78b50d/pyod-0.6.7.tar.gz", "yanked": false}], "0.6.8": [{"comment_text": "", "digests": {"md5": "d145792955be4a0e5d66c9fc41c0a190", "sha256": "c1df6e949ddbf1767b8cd652fe517aecdc16c290edd3bcc164221d309cd33da0"}, "downloads": -1, "filename": "pyod-0.6.8.tar.gz", "has_sig": false, "md5_digest": "d145792955be4a0e5d66c9fc41c0a190", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73227, "upload_time": "2019-02-10T22:07:40", "upload_time_iso_8601": "2019-02-10T22:07:40.700953Z", "url": "https://files.pythonhosted.org/packages/6e/43/58619a5f5e29fc28642fbd381b465b2f48d97da2b1a0aba3052d110b2232/pyod-0.6.8.tar.gz", "yanked": false}], "0.6.9": [{"comment_text": "", "digests": {"md5": "dd04858699cea90b198e198c179a4db1", "sha256": "a8295930627335b369e9fadbff5144739fb5887b78d50424f395593b570477cf"}, "downloads": -1, "filename": "pyod-0.6.9.tar.gz", "has_sig": false, "md5_digest": "dd04858699cea90b198e198c179a4db1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78804, "upload_time": "2019-04-10T21:08:16", "upload_time_iso_8601": "2019-04-10T21:08:16.360133Z", "url": "https://files.pythonhosted.org/packages/36/32/55a801adac7443a0d33853b8f3c0a3e3b605c7113c00c60fc81ae62c0172/pyod-0.6.9.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "2e12714f9ea4b2d7a1ea08b1df35f643", "sha256": "c11209b6e412cd8a45f9e747ca87f51c032c95096dff2c9918469aa0fe6f0013"}, "downloads": -1, "filename": "pyod-0.7.0.tar.gz", "has_sig": false, "md5_digest": "2e12714f9ea4b2d7a1ea08b1df35f643", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81892, "upload_time": "2019-04-30T20:25:08", "upload_time_iso_8601": "2019-04-30T20:25:08.866780Z", "url": "https://files.pythonhosted.org/packages/9e/58/599b5ad7f6e2aed1682fc382c14b9e00111f184370a2548f109e83a0cf1e/pyod-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "9a71f7ffaae6492e1ee0f6f4fe16606f", "sha256": "1d096149aa1219a54c69ddcd123f852dfb3a6345d445f1a1dd116bc4e489a968"}, "downloads": -1, "filename": "pyod-0.7.1.tar.gz", "has_sig": false, "md5_digest": "9a71f7ffaae6492e1ee0f6f4fe16606f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81875, "upload_time": "2019-05-13T16:40:28", "upload_time_iso_8601": "2019-05-13T16:40:28.060106Z", "url": "https://files.pythonhosted.org/packages/00/68/b1f2b7c0d862710de65162c0fdcc0599683814f24ade9653bec2966a9d25/pyod-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "52251fd336e8a5212647935b1666dec7", "sha256": "ffba159432c67d87a025d38fb86cdf0900d7b9df48748d8f84554cb5be1e879e"}, "downloads": -1, "filename": "pyod-0.7.2.tar.gz", "has_sig": false, "md5_digest": "52251fd336e8a5212647935b1666dec7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83144, "upload_time": "2019-05-29T22:23:32", "upload_time_iso_8601": "2019-05-29T22:23:32.374440Z", "url": "https://files.pythonhosted.org/packages/55/0d/64acae8eeda7213be3c2092b1b5fd7e29ec71b52e9088bfc4dbc27804291/pyod-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "1350e0e80ca276388f8f6ee236ab2868", "sha256": "24c5c458111c8b08f590b583a3a4d36f7f8e87bc26e957005354970cbcb13967"}, "downloads": -1, "filename": "pyod-0.7.3.tar.gz", "has_sig": false, "md5_digest": "1350e0e80ca276388f8f6ee236ab2868", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84765, "upload_time": "2019-06-12T21:48:32", "upload_time_iso_8601": "2019-06-12T21:48:32.485527Z", "url": "https://files.pythonhosted.org/packages/43/f1/d7454100a91df739af2c619863ac05559ce594affd1a0e659a4dd377e251/pyod-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "f4fa0506cd35a807e2eec87eec0daa2e", "sha256": "4826666511669b8e7e047ad35297422df1df533af6cda45af2488317579b351b"}, "downloads": -1, "filename": "pyod-0.7.4.tar.gz", "has_sig": false, "md5_digest": "f4fa0506cd35a807e2eec87eec0daa2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84939, "upload_time": "2019-07-19T10:52:58", "upload_time_iso_8601": "2019-07-19T10:52:58.109086Z", "url": "https://files.pythonhosted.org/packages/70/c3/02949ae2c7d5b9f917654009d2c41e3e55f4bd23d2ac0557a09e12d97e2c/pyod-0.7.4.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "323e2214b18fb08abac79c4b311aef16", "sha256": "a93c22bff97593ccc7be6a8e597c75fa66c047bd22e537f8f78360610085c9ae"}, "downloads": -1, "filename": "pyod-0.7.5.tar.gz", "has_sig": false, "md5_digest": "323e2214b18fb08abac79c4b311aef16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 86029, "upload_time": "2019-10-13T21:47:49", "upload_time_iso_8601": "2019-10-13T21:47:49.597962Z", "url": "https://files.pythonhosted.org/packages/f9/40/2bffcde2edbbea4e8ae50a868684fd285d746401bd8051732d3a6d6111c4/pyod-0.7.5.tar.gz", "yanked": false}], "0.7.5.1": [{"comment_text": "", "digests": {"md5": "5cad6ab076672bed28a3123b83713837", "sha256": "402394e245f3d7794b0bb03b7a04baab1344e73f7cca1abf2df9db031144a4a7"}, "downloads": -1, "filename": "pyod-0.7.5.1.tar.gz", "has_sig": false, "md5_digest": "5cad6ab076672bed28a3123b83713837", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85997, "upload_time": "2019-12-05T22:51:59", "upload_time_iso_8601": "2019-12-05T22:51:59.627073Z", "url": "https://files.pythonhosted.org/packages/de/e4/9410fe258c4ea39b197f2b7adb9e293665e6db7427d0e91858430dd4450b/pyod-0.7.5.1.tar.gz", "yanked": false}], "0.7.6": [{"comment_text": "", "digests": {"md5": "028c708d34c89619b7fad15e11e833d9", "sha256": "2eabfd4f73e78c42990bcc9bab5caa26b9a598f4475c34d6e9d6fa666f4fdde3"}, "downloads": -1, "filename": "pyod-0.7.6.tar.gz", "has_sig": false, "md5_digest": "028c708d34c89619b7fad15e11e833d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88144, "upload_time": "2019-12-19T16:28:10", "upload_time_iso_8601": "2019-12-19T16:28:10.995156Z", "url": "https://files.pythonhosted.org/packages/88/71/d91ab84fa65f938d9b07b6ff3fc02bb462fe687d2b3c77d89c7525dc08bb/pyod-0.7.6.tar.gz", "yanked": false}], "0.7.7": [{"comment_text": "", "digests": {"md5": "713a71e41764398391d1cc256a6ce2d4", "sha256": "4001d8e7599de477eba94185e0e249e5e2875aa1e0b140409f03dc003beea6cd"}, "downloads": -1, "filename": "pyod-0.7.7.tar.gz", "has_sig": false, "md5_digest": "713a71e41764398391d1cc256a6ce2d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87300, "upload_time": "2019-12-23T00:43:42", "upload_time_iso_8601": "2019-12-23T00:43:42.831637Z", "url": "https://files.pythonhosted.org/packages/ba/a4/3c216a651ecacff2d1e854cc0893f2a7877654fbb15a2a76c44dad13f516/pyod-0.7.7.tar.gz", "yanked": false}], "0.7.7.1": [{"comment_text": "", "digests": {"md5": "ae9df5c97cd82787a796098742f1faf1", "sha256": "22cd28595187ca54e06418522b699b80ab6eae658ac3de194c3ef85730127016"}, "downloads": -1, "filename": "pyod-0.7.7.1.tar.gz", "has_sig": false, "md5_digest": "ae9df5c97cd82787a796098742f1faf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87327, "upload_time": "2019-12-30T21:26:13", "upload_time_iso_8601": "2019-12-30T21:26:13.168913Z", "url": "https://files.pythonhosted.org/packages/17/d5/12bf702a918ac36e944fedb2257d51167b049b951f2b72503fc9a54dc9e8/pyod-0.7.7.1.tar.gz", "yanked": false}], "0.7.8": [{"comment_text": "", "digests": {"md5": "93a566d0452e1d45ea6baf342324387c", "sha256": "cfc803cadb59c54855d26d3264cc8c9e6e49ab2de2f3efdcddc9ec8bbabbf1f7"}, "downloads": -1, "filename": "pyod-0.7.8.tar.gz", "has_sig": false, "md5_digest": "93a566d0452e1d45ea6baf342324387c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92409, "upload_time": "2020-03-17T22:03:48", "upload_time_iso_8601": "2020-03-17T22:03:48.276180Z", "url": "https://files.pythonhosted.org/packages/32/7a/476af50396cfc7c96590f6447e95e6ec154c8da7f23502f0dc1e546480ec/pyod-0.7.8.tar.gz", "yanked": false}], "0.7.8.1": [{"comment_text": "", "digests": {"md5": "442b36110f41a14c742c7facdfa8ec70", "sha256": "d23c87ec6e0b6c3460009e0c26f7ad2e1c231524f5d15ffe85f90f564aaf899a"}, "downloads": -1, "filename": "pyod-0.7.8.1.tar.gz", "has_sig": false, "md5_digest": "442b36110f41a14c742c7facdfa8ec70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92429, "upload_time": "2020-04-07T22:17:14", "upload_time_iso_8601": "2020-04-07T22:17:14.298055Z", "url": "https://files.pythonhosted.org/packages/84/7a/b9502cf12dd8bb9bdf8d219583d5a6f451a14244d24f0eecc21dd509d837/pyod-0.7.8.1.tar.gz", "yanked": false}], "0.7.8.2": [{"comment_text": "", "digests": {"md5": "cceb2c30dc65e2aeaea0856aaef087a3", "sha256": "07be45b6e9784b77fb5df5d7d5696e6a15646acd132e9056adc20bf1cf49cec8"}, "downloads": -1, "filename": "pyod-0.7.8.2.tar.gz", "has_sig": false, "md5_digest": "cceb2c30dc65e2aeaea0856aaef087a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 92429, "upload_time": "2020-04-15T19:06:51", "upload_time_iso_8601": "2020-04-15T19:06:51.289019Z", "url": "https://files.pythonhosted.org/packages/7e/7d/0f00ff0e939317bdf00446e517d4ce161de06824f7e0e47544ecf6019516/pyod-0.7.8.2.tar.gz", "yanked": false}], "0.7.9": [{"comment_text": "", "digests": {"md5": "e8d3aef4bfd718b626c0ea3764908d1e", "sha256": "8ce9fe9e1ea9df52fc9c27880d8220e6022b7e83c73a31f312204a60a3fa35be"}, "downloads": -1, "filename": "pyod-0.7.9.tar.gz", "has_sig": false, "md5_digest": "e8d3aef4bfd718b626c0ea3764908d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93102, "upload_time": "2020-05-04T20:12:59", "upload_time_iso_8601": "2020-05-04T20:12:59.679312Z", "url": "https://files.pythonhosted.org/packages/ff/8b/a8a11d822624f5bac28ba74563b4fcf6347d83c3ad452d41881e795aaf42/pyod-0.7.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e8d3aef4bfd718b626c0ea3764908d1e", "sha256": "8ce9fe9e1ea9df52fc9c27880d8220e6022b7e83c73a31f312204a60a3fa35be"}, "downloads": -1, "filename": "pyod-0.7.9.tar.gz", "has_sig": false, "md5_digest": "e8d3aef4bfd718b626c0ea3764908d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93102, "upload_time": "2020-05-04T20:12:59", "upload_time_iso_8601": "2020-05-04T20:12:59.679312Z", "url": "https://files.pythonhosted.org/packages/ff/8b/a8a11d822624f5bac28ba74563b4fcf6347d83c3ad452d41881e795aaf42/pyod-0.7.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:24 2020"}