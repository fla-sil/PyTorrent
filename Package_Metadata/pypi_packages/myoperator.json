{"info": {"author": "MyOperator", "author_email": "dev@myoperator.co", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "==========\ncentrallog\n==========\n\n\nCentralLog helps recording the logs by MyOperator standards.\n\nThe format of the log message is\n::\n\n    {\n        \"time\":<unix-epoch>,\n        \"mc_time\":<unix-epoch in microseconds>,\n        \"ip\":\"<host-ip-address>\",\n        \"service\": <application/service name>,\n        \"class\":\"<source class name logging this>\",\n        \"data\":{\n            \"uid\":\"<unique log identifier>\",\n            \"msg\":\"<actual message>\",\n            \"acl\":<acl numeric representation>\n        },\n        \"title\": <logging context provider>\n    }\n\nFor description please refer to `Documentation <http://docs.myoperator.biz/books/standards/page/technical-documentation>`_.\n\nFeatures\n--------\n- Auto-format log message to desired form by simply configuring the logger.\n\nInstallation\n------------\nTo install the centrallog package run the following commands::\n\n    $ git clone https://github.com/myoperator/centrallog-py.git\n    $ pip install -e centrallog-py\n\nQuickstart\n----------\n\nFor the impatient:\n\n.. code:: python\n\n    from myoperator.centrallog import centrallog\n    FORMAT = '%(name)s: (%(asctime)s) [%(levelname)s] - %(message)s'\n    centrallog.basicConfig(format=FORMAT)\n    logger = centrallog.getLogger('testlogger')\n    logger.error(\"Log message\")\n\nConfigurations\n--------------\nThe basic configuration of logger is same as the python's builtin `logging <https://docs.python.org/3.7/library/logging.html>`_ library.\n\nFor customizing message-format use the following class methods.\n\nbasicConfig(\\*\\*kwargs)\n#######################\n\n    This method is same as the logging's `basicConfig(**kwargs) <https://docs.python.org/3.7/library/logging.html#logging.basicConfig>`_.\n\nconfigure(servicename, hostname='', uid='')\n###########################################\n\n    This method is used to configure the servicename, the hostname, the uuid of the logger throughout the \n    program.\n\n    ``TIP: Use this method once throughout the program before logging any message.``\n\n\nis_configured()\n###############\n\n    Check if a logger is configured and return true if it is configured, else false.\n\nget_configuration()\n###################\n\n    Returns the configuration *tuple(servicename, hostname, uid)*.\n\nLogging Methods\n---------------\ncentrallog supports all the log methods of the logging library with an additional optional keyword-argument ``acl`` which shows the relevancy of the log.\n\nThe value of acl(Access Control List) can only be one of the following::\n\n    1 - developer (default)\n    2 - support\n    4 - customer\n\nExample: To log an error message relevant to the customer(acl = 4).\n\n.. code:: python\n\n    logger.error('message', acl=4)\n\n\ncentrallog also provide some additional methods with default acl behaviour.\n\ndlog(level, message, \\*args, \\*\\*kwargs)\n########################################\n  developer specific log(acl=1).\n\nslog(level, message, \\*args, \\*\\*kwargs)\n########################################\n  support specific log(acl=2).\n\nclog(level, message, \\*args, \\*\\*kwargs)\n########################################\n  customer specific log(acl=4).\n\nLoggin with title\n#################\n  To add a title to the log message centrallog provide one of the two ways.\n\n  Using *title* keyword argument in every log message.\n\n  And using **title(text)** method.\n\n  Example::\n\n    logger.title('title here').dlog('message here')\n    logger.warning('message...', title='Title here')\n\n  ``Tip: On using both method and keyword, keyword will get higher precedence.``\n\n  For further technical documentation please visit `here <http://docs.myoperator.biz/books/standards/page/technical-documentation>`_.\n\n\n=======\nHistory\n=======\n\n0.1.0 (2020-01-04)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/myoperator/centrallog", "keywords": "centrallog", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "myoperator", "package_url": "https://pypi.org/project/myoperator/", "platform": "", "project_url": "https://pypi.org/project/myoperator/", "project_urls": {"Homepage": "https://github.com/myoperator/centrallog"}, "release_url": "https://pypi.org/project/myoperator/0.1.0/", "requires_dist": ["Django (==3.0.3)", "statsd (==3.3.0)"], "requires_python": ">=3.5", "summary": "CentralLog helps recording the logs by MyOperator standards", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"centrallog\">\n<h2>centrallog</h2>\n<p>CentralLog helps recording the logs by MyOperator standards.</p>\n<p>The format of the log message is</p>\n<pre>{\n    \"time\":&lt;unix-epoch&gt;,\n    \"mc_time\":&lt;unix-epoch in microseconds&gt;,\n    \"ip\":\"&lt;host-ip-address&gt;\",\n    \"service\": &lt;application/service name&gt;,\n    \"class\":\"&lt;source class name logging this&gt;\",\n    \"data\":{\n        \"uid\":\"&lt;unique log identifier&gt;\",\n        \"msg\":\"&lt;actual message&gt;\",\n        \"acl\":&lt;acl numeric representation&gt;\n    },\n    \"title\": &lt;logging context provider&gt;\n}\n</pre>\n<p>For description please refer to <a href=\"http://docs.myoperator.biz/books/standards/page/technical-documentation\" rel=\"nofollow\">Documentation</a>.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Auto-format log message to desired form by simply configuring the logger.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install the centrallog package run the following commands:</p>\n<pre>$ git clone https://github.com/myoperator/centrallog-py.git\n$ pip install -e centrallog-py\n</pre>\n</div>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<p>For the impatient:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">myoperator.centrallog</span> <span class=\"kn\">import</span> <span class=\"n\">centrallog</span>\n<span class=\"n\">FORMAT</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%(name)s</span><span class=\"s1\">: (</span><span class=\"si\">%(asctime)s</span><span class=\"s1\">) [</span><span class=\"si\">%(levelname)s</span><span class=\"s1\">] - </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n<span class=\"n\">centrallog</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"n\">FORMAT</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">centrallog</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'testlogger'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">\"Log message\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"configurations\">\n<h3>Configurations</h3>\n<p>The basic configuration of logger is same as the python\u2019s builtin <a href=\"https://docs.python.org/3.7/library/logging.html\" rel=\"nofollow\">logging</a> library.</p>\n<p>For customizing message-format use the following class methods.</p>\n<div id=\"basicconfig-kwargs\">\n<h4>basicConfig(**kwargs)</h4>\n<blockquote>\nThis method is same as the logging\u2019s <a href=\"https://docs.python.org/3.7/library/logging.html#logging.basicConfig\" rel=\"nofollow\">basicConfig(**kwargs)</a>.</blockquote>\n</div>\n<div id=\"configure-servicename-hostname-uid\">\n<h4>configure(servicename, hostname=\u2019\u2019, uid=\u2019\u2019)</h4>\n<blockquote>\n<p>This method is used to configure the servicename, the hostname, the uuid of the logger throughout the\nprogram.</p>\n<p><tt>TIP: Use this method once throughout the program before logging any message.</tt></p>\n</blockquote>\n</div>\n<div id=\"is-configured\">\n<h4>is_configured()</h4>\n<blockquote>\nCheck if a logger is configured and return true if it is configured, else false.</blockquote>\n</div>\n<div id=\"get-configuration\">\n<h4>get_configuration()</h4>\n<blockquote>\nReturns the configuration <em>tuple(servicename, hostname, uid)</em>.</blockquote>\n</div>\n</div>\n<div id=\"logging-methods\">\n<h3>Logging Methods</h3>\n<p>centrallog supports all the log methods of the logging library with an additional optional keyword-argument <tt>acl</tt> which shows the relevancy of the log.</p>\n<p>The value of acl(Access Control List) can only be one of the following:</p>\n<pre>1 - developer (default)\n2 - support\n4 - customer\n</pre>\n<p>Example: To log an error message relevant to the customer(acl = 4).</p>\n<pre><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s1\">'message'</span><span class=\"p\">,</span> <span class=\"n\">acl</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<p>centrallog also provide some additional methods with default acl behaviour.</p>\n<div id=\"dlog-level-message-args-kwargs\">\n<h4>dlog(level, message, *args, **kwargs)</h4>\n<blockquote>\ndeveloper specific log(acl=1).</blockquote>\n</div>\n<div id=\"slog-level-message-args-kwargs\">\n<h4>slog(level, message, *args, **kwargs)</h4>\n<blockquote>\nsupport specific log(acl=2).</blockquote>\n</div>\n<div id=\"clog-level-message-args-kwargs\">\n<h4>clog(level, message, *args, **kwargs)</h4>\n<blockquote>\ncustomer specific log(acl=4).</blockquote>\n</div>\n<div id=\"loggin-with-title\">\n<h4>Loggin with title</h4>\n<blockquote>\n<p>To add a title to the log message centrallog provide one of the two ways.</p>\n<p>Using <em>title</em> keyword argument in every log message.</p>\n<p>And using <strong>title(text)</strong> method.</p>\n<p>Example:</p>\n<pre>logger.title('title here').dlog('message here')\nlogger.warning('message...', title='Title here')\n</pre>\n<p><tt>Tip: On using both method and keyword, keyword will get higher precedence.</tt></p>\n<p>For further technical documentation please visit <a href=\"http://docs.myoperator.biz/books/standards/page/technical-documentation\" rel=\"nofollow\">here</a>.</p>\n</blockquote>\n</div>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id2\"><span class=\"section-subtitle\">0.1.0 (2020-01-04)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6811599, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9c453334c9d3b5b20a57ad4e1d18dc46", "sha256": "77a6527f28ab8b001ea0e5de330efbefb9da4ad41418eedb4707b7d23ba3ad9f"}, "downloads": -1, "filename": "myoperator-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9c453334c9d3b5b20a57ad4e1d18dc46", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 5084, "upload_time": "2020-03-14T14:32:15", "upload_time_iso_8601": "2020-03-14T14:32:15.367490Z", "url": "https://files.pythonhosted.org/packages/9b/87/da8681b81051d25c601cfcd230a6d47d58b44e052342baf86084b8a3e5f7/myoperator-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc66f0a3b2036169f7a4682949620f33", "sha256": "713fc59a8c9fe4303e979cd8920be9f94a9fa9488fd5068dbaab269c05493cf0"}, "downloads": -1, "filename": "myoperator-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "bc66f0a3b2036169f7a4682949620f33", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 2844, "upload_time": "2020-03-14T14:32:17", "upload_time_iso_8601": "2020-03-14T14:32:17.882270Z", "url": "https://files.pythonhosted.org/packages/65/ff/ec09876bc6e89a759f96309cfa701a310ec23af29d639587d602731eebee/myoperator-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e1f6c25e84d52649f1b658ae35bc518", "sha256": "7321510cb426610771624fa243cb21e19cf2d777398da1e161044c11cff506d4"}, "downloads": -1, "filename": "myoperator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9e1f6c25e84d52649f1b658ae35bc518", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17126, "upload_time": "2020-03-14T14:32:19", "upload_time_iso_8601": "2020-03-14T14:32:19.782221Z", "url": "https://files.pythonhosted.org/packages/38/ce/df7bd004cbe39eed2dfef4383749f75ba3900d8867cf16fb3c9988485a00/myoperator-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c453334c9d3b5b20a57ad4e1d18dc46", "sha256": "77a6527f28ab8b001ea0e5de330efbefb9da4ad41418eedb4707b7d23ba3ad9f"}, "downloads": -1, "filename": "myoperator-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9c453334c9d3b5b20a57ad4e1d18dc46", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 5084, "upload_time": "2020-03-14T14:32:15", "upload_time_iso_8601": "2020-03-14T14:32:15.367490Z", "url": "https://files.pythonhosted.org/packages/9b/87/da8681b81051d25c601cfcd230a6d47d58b44e052342baf86084b8a3e5f7/myoperator-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc66f0a3b2036169f7a4682949620f33", "sha256": "713fc59a8c9fe4303e979cd8920be9f94a9fa9488fd5068dbaab269c05493cf0"}, "downloads": -1, "filename": "myoperator-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "bc66f0a3b2036169f7a4682949620f33", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 2844, "upload_time": "2020-03-14T14:32:17", "upload_time_iso_8601": "2020-03-14T14:32:17.882270Z", "url": "https://files.pythonhosted.org/packages/65/ff/ec09876bc6e89a759f96309cfa701a310ec23af29d639587d602731eebee/myoperator-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e1f6c25e84d52649f1b658ae35bc518", "sha256": "7321510cb426610771624fa243cb21e19cf2d777398da1e161044c11cff506d4"}, "downloads": -1, "filename": "myoperator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9e1f6c25e84d52649f1b658ae35bc518", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17126, "upload_time": "2020-03-14T14:32:19", "upload_time_iso_8601": "2020-03-14T14:32:19.782221Z", "url": "https://files.pythonhosted.org/packages/38/ce/df7bd004cbe39eed2dfef4383749f75ba3900d8867cf16fb3c9988485a00/myoperator-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:26 2020"}