{"info": {"author": "Hernan E. Grecco", "author_email": "hernan.grecco@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": "Serialize: A common Python API for multiple serialization formats\r\n=================================================================\r\n\r\nThere are multiple serialization formats out there ...\r\n                        ... and great packages to use them.\r\n\r\nBut they all have a different API and switching among them is not so simple\r\nas it should be. Serialize helps you to do it, including dealing with custom\r\nclasses. Let's dump a dict using the `pickle` format:\r\n\r\n.. code:: python\r\n\r\n    >>> from serialize import dumps, loads\r\n    >>> dumps(dict(answer=42), fmt='pickle')\r\n    b'\\x80\\x03}q\\x00X\\x06\\x00\\x00\\x00answerq\\x01K*s.'\r\n    >>> loads(_, fmt='pickle')\r\n    {'answer': 42}\r\n\r\nAnd here comes the cool thing, you can just change the serialization format\r\nwithout having to learn a new API. Let's now dump it using msgpack:\r\n\r\n.. code:: python\r\n\r\n    >>> dumps(dict(answer=42), fmt='msgpack')\r\n    b'\\x81\\xa6answer*'\r\n    >>> loads(_, fmt='msgpack')\r\n    {'answer': 42}\r\n\r\nSerialize currently support 8 different formats: `bson`, `dill`, `json`, `msgpack`,\r\n`phpserialize`, `pickle`, `serpent` and `yaml`. Serialize does not implement these\r\nformats but rather relies on established, well tested packages. If they are installed,\r\nserialize will use them.\r\n\r\n     ** Serialize allows you to use them all with the same API! **\r\n\r\nYou can also use the `dump` and `load` to write directly to file-like object:\r\n\r\n.. code:: python\r\n\r\n    >>> from serialize import dump, load\r\n    >>> with open('output.yaml', 'wb') as fp:\r\n    ...     dump(dict(answer=42), fp, fmt='yaml')\r\n    >>> with open('output.yaml', 'rb') as fp:\r\n    ...     load(fp, fmt='yaml')\r\n    {'answer': 42}\r\n\r\nor use directly the filename and the format will be inferred:\r\n\r\n.. code:: python\r\n\r\n    >>> dump(dict(answer=42), 'output.yaml')\r\n    >>> load('output.yaml')\r\n    {'answer': 42}\r\n\r\nA very common case is to dump and load objects from custom classes such as:\r\n\r\n.. code:: python\r\n\r\n    >>> class User:\r\n    ...     def __init__(self, name, age):\r\n    ...         self.name = name\r\n    ...         self.age = age\r\n    ...\r\n    >>> john = User('John Smith', 27)\r\n\r\n\r\nBut some serialization packages do not support this important feature and the\r\nrest usually have very different API between them. Serialize provides\r\nyou a common, simple interface for this. You just need to define a function\r\nthat is able to convert the object to an instance of a builtin type and the\r\nconverse:\r\n\r\n.. code:: python\r\n\r\n    >>> from serialize import register_class\r\n    >>> def user_to_builtin(u):\r\n    ...     return (u.name, u.age)\r\n    ...\r\n    >>> def user_from_builtin(c):\r\n    ...     return User(c[0], c[1])\r\n    ...\r\n\r\n    >>> register_class(User, user_to_builtin, user_from_builtin)\r\n\r\n\r\nAnd that's all. You can then use it directly without any hassle:\r\n\r\n.. code:: python\r\n\r\n    >>> dumps(john, fmt='bson')\r\n    b\"y\\x00\\x00\\x00\\x03__bson_follow__\\x00c\\x00\\x00\\x00\\x04\r\n    __dumped_obj__\\x00\\x1e\\x00\\x00\\x00\\x020\\x00\\x0b\\x00\\x00\r\n    \\x00John Smith\\x00\\x101\\x00\\x1b\\x00\\x00\\x00\\x00\\x02__class_name__\r\n    \\x00\\x1c\\x00\\x00\\x00<class '__main__.Username'>\\x00\\x00\\x00\"\r\n    >>> v = loads(_, fmt='bson')\r\n    >>> v.name\r\n    'John Smith'\r\n    >>> v.age\r\n    27\r\n\r\n\r\nEnjoy!\r\n\r\n\r\n\r\nSerialize is written and maintained by Hernan E. Grecco <hernan.grecco@gmail.com>.\r\n\r\n\r\nSerialize Changelog\r\n===================\r\n\r\n\r\n0.1 (2016-01-28)\r\n----------------\r\n- Initial Release. Implement a generic dump/dumps and load/loads.\r\n- Added support for registering new serializer/deserializer.\r\n- Added support for registering custom classes.\r\n- Format inference for file extension.\r\n- Added support for bson using https://pypi.python.org/pypi/bson\r\n- Added support for dill using https://pypi.python.org/pypi/dill\r\n- Added support for json using https://docs.python.org/3/library/json.html\r\n- Added support for msgpack using https://pypi.python.org/pypi/msgpack-python\r\n- Added support for phpserialize using https://pypi.python.org/pypi/phpserialize\r\n- Added support for pickle using https://docs.python.org/3/library/pickle.html\r\n- Added support for serpent using https://pypi.python.org/pypi/serpent\r\n- Added support for yaml using https://pypi.python.org/pypi/pyyaml", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hgrecco/serialize", "keywords": "serialization deserialization packing unpacking", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "Serialize", "package_url": "https://pypi.org/project/Serialize/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Serialize/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/hgrecco/serialize"}, "release_url": "https://pypi.org/project/Serialize/0.1/", "requires_dist": null, "requires_python": null, "summary": "A common API for multiple serialization formats with support for custom classes", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"serialize-a-common-python-api-for-multiple-serialization-formats\">\n<h2>Serialize: A common Python API for multiple serialization formats</h2>\n<dl>\n<dt>There are multiple serialization formats out there \u2026</dt>\n<dd>\u2026 and great packages to use them.</dd>\n</dl>\n<p>But they all have a different API and switching among them is not so simple\nas it should be. Serialize helps you to do it, including dealing with custom\nclasses. Let\u2019s dump a dict using the <cite>pickle</cite> format:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">serialize</span> <span class=\"kn\">import</span> <span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">),</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'pickle'</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x80\\x03</span><span class=\"s1\">}q</span><span class=\"se\">\\x00</span><span class=\"s1\">X</span><span class=\"se\">\\x06\\x00\\x00\\x00</span><span class=\"s1\">answerq</span><span class=\"se\">\\x01</span><span class=\"s1\">K*s.'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'pickle'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'answer'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}</span>\n</pre>\n<p>And here comes the cool thing, you can just change the serialization format\nwithout having to learn a new API. Let\u2019s now dump it using msgpack:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">),</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'msgpack'</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x81\\xa6</span><span class=\"s1\">answer*'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'msgpack'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'answer'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}</span>\n</pre>\n<p>Serialize currently support 8 different formats: <cite>bson</cite>, <cite>dill</cite>, <cite>json</cite>, <cite>msgpack</cite>,\n<cite>phpserialize</cite>, <cite>pickle</cite>, <cite>serpent</cite> and <cite>yaml</cite>. Serialize does not implement these\nformats but rather relies on established, well tested packages. If they are installed,\nserialize will use them.</p>\n<blockquote>\n** Serialize allows you to use them all with the same API! **</blockquote>\n<p>You can also use the <cite>dump</cite> and <cite>load</cite> to write directly to file-like object:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">serialize</span> <span class=\"kn\">import</span> <span class=\"n\">dump</span><span class=\"p\">,</span> <span class=\"n\">load</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output.yaml'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">),</span> <span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'yaml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'output.yaml'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'yaml'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'answer'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}</span>\n</pre>\n<p>or use directly the filename and the format will be inferred:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">),</span> <span class=\"s1\">'output.yaml'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'output.yaml'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'answer'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}</span>\n</pre>\n<p>A very common case is to dump and load objects from custom classes such as:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">john</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"s1\">'John Smith'</span><span class=\"p\">,</span> <span class=\"mi\">27</span><span class=\"p\">)</span>\n</pre>\n<p>But some serialization packages do not support this important feature and the\nrest usually have very different API between them. Serialize provides\nyou a common, simple interface for this. You just need to define a function\nthat is able to convert the object to an instance of a builtin type and the\nconverse:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">serialize</span> <span class=\"kn\">import</span> <span class=\"n\">register_class</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">user_to_builtin</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">user_from_builtin</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">register_class</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">user_to_builtin</span><span class=\"p\">,</span> <span class=\"n\">user_from_builtin</span><span class=\"p\">)</span>\n</pre>\n<p>And that\u2019s all. You can then use it directly without any hassle:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">john</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'bson'</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s2\">\"y</span><span class=\"se\">\\x00\\x00\\x00\\x03</span><span class=\"s2\">__bson_follow__</span><span class=\"se\">\\x00</span><span class=\"s2\">c</span><span class=\"se\">\\x00\\x00\\x00\\x04</span>\n<span class=\"n\">__dumped_obj__</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x1e</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x020</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x0b</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x00</span>\n\\<span class=\"n\">x00John</span> <span class=\"n\">Smith</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x101</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x1b</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x02__class_name__</span>\n\\<span class=\"n\">x00</span>\\<span class=\"n\">x1c</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x00</span>\\<span class=\"n\">x00</span><span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">__main__</span><span class=\"o\">.</span><span class=\"n\">Username</span><span class=\"s1\">'&gt;</span><span class=\"se\">\\x00\\x00\\x00</span><span class=\"s1\">\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'bson'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'John Smith'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">age</span>\n<span class=\"mi\">27</span>\n</pre>\n<p>Enjoy!</p>\n<p>Serialize is written and maintained by Hernan E. Grecco &lt;<a href=\"mailto:hernan.grecco%40gmail.com\">hernan<span>.</span>grecco<span>@</span>gmail<span>.</span>com</a>&gt;.</p>\n</div>\n<div id=\"serialize-changelog\">\n<h2>Serialize Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1 (2016-01-28)</span></h2>\n<ul>\n<li>Initial Release. Implement a generic dump/dumps and load/loads.</li>\n<li>Added support for registering new serializer/deserializer.</li>\n<li>Added support for registering custom classes.</li>\n<li>Format inference for file extension.</li>\n<li>Added support for bson using <a href=\"https://pypi.python.org/pypi/bson\" rel=\"nofollow\">https://pypi.python.org/pypi/bson</a></li>\n<li>Added support for dill using <a href=\"https://pypi.python.org/pypi/dill\" rel=\"nofollow\">https://pypi.python.org/pypi/dill</a></li>\n<li>Added support for json using <a href=\"https://docs.python.org/3/library/json.html\" rel=\"nofollow\">https://docs.python.org/3/library/json.html</a></li>\n<li>Added support for msgpack using <a href=\"https://pypi.python.org/pypi/msgpack-python\" rel=\"nofollow\">https://pypi.python.org/pypi/msgpack-python</a></li>\n<li>Added support for phpserialize using <a href=\"https://pypi.python.org/pypi/phpserialize\" rel=\"nofollow\">https://pypi.python.org/pypi/phpserialize</a></li>\n<li>Added support for pickle using <a href=\"https://docs.python.org/3/library/pickle.html\" rel=\"nofollow\">https://docs.python.org/3/library/pickle.html</a></li>\n<li>Added support for serpent using <a href=\"https://pypi.python.org/pypi/serpent\" rel=\"nofollow\">https://pypi.python.org/pypi/serpent</a></li>\n<li>Added support for yaml using <a href=\"https://pypi.python.org/pypi/pyyaml\" rel=\"nofollow\">https://pypi.python.org/pypi/pyyaml</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1928488, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a0b2f3da2772a7699d1a668c15290588", "sha256": "b3d6effdd3651067712a6b9d8b21fdee30ef7cd524f1597d8acc26b0250b94ad"}, "downloads": -1, "filename": "Serialize-0.1.tar.gz", "has_sig": false, "md5_digest": "a0b2f3da2772a7699d1a668c15290588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12222, "upload_time": "2016-01-29T02:56:37", "upload_time_iso_8601": "2016-01-29T02:56:37.206754Z", "url": "https://files.pythonhosted.org/packages/7a/63/edc2f11c62301f4b4512367df32217826101d87bb4faa0d0931c11fae8eb/Serialize-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a0b2f3da2772a7699d1a668c15290588", "sha256": "b3d6effdd3651067712a6b9d8b21fdee30ef7cd524f1597d8acc26b0250b94ad"}, "downloads": -1, "filename": "Serialize-0.1.tar.gz", "has_sig": false, "md5_digest": "a0b2f3da2772a7699d1a668c15290588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12222, "upload_time": "2016-01-29T02:56:37", "upload_time_iso_8601": "2016-01-29T02:56:37.206754Z", "url": "https://files.pythonhosted.org/packages/7a/63/edc2f11c62301f4b4512367df32217826101d87bb4faa0d0931c11fae8eb/Serialize-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:17 2020"}