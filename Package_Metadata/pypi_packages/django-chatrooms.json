{"info": {"author": "Vincenzo E. Antignano (@qubird)", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python"], "description": "====================\nDjango Chatrooms\n====================\n\nChatrooms is an app that provides multi-user chat rooms for your django site.\n\nIt's completely based on jQuery and `gevent <http://www.gevent.org/>`_, whose libraries\nhave been used to implement long polling.\n\nIt provides a set of models, views and templates ready out of the box and easily\ncustomizable.\n\n\nInstallation\n************\n\nInstall the egg from pypi::\n\n    $ pip install django-chatrooms\n\nor get the latest revision from github::\n\n    $ pip install -e git+git://github.com/qubird/django-chatrooms#egg=chatrooms\n\nIf you use buildout, just add ``django-chatrooms`` to your eggs part.\n\nThe egg setup takes care of installing all the needed dependencies, anyway you might need to install `greenlet <http://pypi.python.org/pypi/greenlet/>`_ and `libevent <http://www.libevent.org/>`_ to let gevent work properly.\n \nOnce the egg is installed, add the following apps to your settings.INSTALLED_APPS::\n\n    INSTALLED_APPS = (\n        # ...,\n        'polymorphic',\n        'chatrooms',\n        # ...,\n    )\n\nThen include chatrooms urls to your urlpatterns::\n\n    urlpatterns = patterns('',\n        # ...,\n        url(r'^chat/', include('chatrooms.urls')),\n        # ...,\n    )\n\nMake sure you also added ``staticfiles_urlpatterns`` to urlconf like::\n\n    from django.contrib.staticfiles.urls import staticfiles_urlpatterns\n    urlpatterns += staticfiles_urlpatterns()\n\nand ``'django.contrib.staticfiles'`` is amongst ``INSTALLED_APPS``.\n\nThen you're ready to run ``syncdb``.\n\n\nImportant Note\n**************\n\ndjango-chatrooms works properly in a multithreading environment (like `gevent patched wsgi server <https://github.com/gabrielfalcao/djangogevent>`_, or `uwsgi server with gevent plugin <http://projects.unbit.it/uwsgi/wiki/Gevent>`_).\n\nTo use the app with servers that pre-fork the application before running, like \n`gunicorn <http://gunicorn.org>`_ does, you need to use some sort of interprocess\ncommunication.\n\n``chatrooms.utils.redis_handlers`` module contains the ``RedisMessageHandler`` class,\nwhich can be set as ``settings.CHATROOMS_MESSAGE_HANDLERS`` to use the application\nin a gunicorn-like environment.\nThe module needs a `redis <http://redis.io>`_ instance installed and running to work.\n\nAlso a ``chatrooms.utils.celery_handlers.CeleryMessageHandler`` class has been included.\nIt can be used as ``settings.CHATROOMS_MESSAGE_HANDLERS`` as well, but needs `celery <http://www.celeryproject.org>`_ to be installed.\n\nSee the `Message Handlers`_ section to know how to implement your own handlers.\n\n\nUsing the app\n*************\n\nModels\n------\nThe app installs two models: Room and Message.\nRooms can be created by Admin Site.\nRoom objects have the following fields:\n\n:name:\n:description: almost self-explaining\n:slug: which identifies the room in urls and views\n:subscribers: which references a set of users (not used by default)\n:allow_anonymous_access: which tells whether the room is accessible only to logged users, or event to \"guests\". A guest user is asked to choose a guest name before entering the room.\n:private:\n:password: These fields aren't used by default. They might be useful for implementing custom policies of access. See the `Custom access policies`_ section for further details.\n\n\nViews\n-----\nBesides the core views that handle ajax requests to make the chat work, some class-based views have been designed.\n\nThese are in ``views.py``:\n\n- ``RoomsListView``, which shows the list of rooms filtering the ones requiring a logged user if the user is not authenticated\n- ``RoomView``, which renders the actual room page\n- ``GuestNameView``, which is shown to non-logged users entering an ``allow_anonymous_access`` room to choose a guest name\n\n\nTemplates\n---------\nThe templates you might want to override are\n\n- ``chatrooms/guestname_form.html``, which is rendered by GuestNameView: it shows the form for choosing a guest name\n- ``chatrooms/rooms_list.html``, which is rendered by RoomsListView\n- ``chatrooms/room.html``, which is the skeleton of the page where chat objects are placed dynamically. The page includes the ``js/room.js`` script which requires a ``getContext()`` function like::\n\n    <script type=\"text/javascript\">\n        getContext = function(){\n            return {\n                \"username\": \"{{ user.username }}\",\n                \"room_id\": {{ room.id }},\n            }\n        }\n    </script>\n\n\nSome elements are required by ``room.js`` and need to be included in ``room.html``:\n\n| ``#chatText``: an empty ``div``,\n| ``#chatSendText``: text input where the user enters the text to send,\n| ``#chatSendButton``: button input pressed by user to submit text,\n| ``#connectedUsersList``: a list element where connected users are shown.\n\n\nStyles\n------\n``static/css`` folder contains the file ``room.css`` you might want to override to re-style the room page.\n\n\nTests\n-----\nThe ``test_gevent`` command has been implemented to test the chat features that use gevent libraries.\n\n\nMessage Handlers\n****************\n\n``utils.handlers.MessageHandler`` class implements the methods\n\n- ``handle_received_message(sender, room_id, username, message, date, [user])``\n\n    :sender: the ChatView instance\n    :room_id: the id of the room where the message was sent\n    :username: username or guest name of the user who sent the message\n    :message: the content of the sent message\n    :date: the timestamp of the sent message\n    :user: request.user if user is authenticated, else ``None``\n\n- ``retrieve_messages(chatobj, room_id, latest_msg_id)``\n\n    :chatobj: the ChatView instance\n    :room_id: the id of the room whose messages are requested\n    :latest_msg_id: the id of the latest message sent to the room\n\n- ``get_latest_message_id(chatobj, room_id)``\n\n    :chatobj: the ChatView instance\n    :room_id: the id of the room whose latest message id is requested\n\n``handle_received_message`` method is designed to perform operations\nwith the received message such that ``retrieve_messages`` is able to\nretrieve it afterwards.\n\n``retrieve_messages`` must return a list of tuples like ``[(message_id, message_obj), ...]``, where ``message_obj`` is an instance of ``Message`` or an object with at least the following attributes:\n\n- ``username``\n- ``date``\n- ``content``\n\nand ``message_id`` is a unique progressive identifier.\n\n``get_latest_message_id`` must give back the id of the latest message received,\nconsistently to the ways messages are stored and retrieved.\n\n\nTo implement your handlers you need to create a class extending ``chatrooms.utils.handlers.MessageHandler``, say ``my.app.MyHandlerClass``,\noverride the aforementioned methods, and add to your settings::\n\n    CHATROOMS_HANDLERS_CLASS = 'my.app.MyHandlerClass'\n\nThis way your defined methods will be used as default handlers for received messages and requests for messages.\n\n\nSee ``utils.handlers.MessageHandler`` and ``ajax.chat.ChatView`` docstrings for further details on these classes.\n\n\nCustom access policies\n**********************\n\nAccess to rooms can be controlled defining a function which takes ``request`` and ``user`` as arguments, and returns True or False whether the user is allowed to access the room or not (``room_id`` is given as a GET parameter of the request).\n\nOnce you defined your function, say ``my.app.user_can_enter_foo``, add to your settings::\n\n    CHATROOMS_TEST_USER_FUNCTION = 'my.app.user_can_enter_foo'\n\nYour function will be used as a test by view decorators.\nWhen the user sends ajax requests to send or get chat messages, or get the connected users list, ``request`` and ``user`` are passed to your function.\nIf it returns ``False``, a 403 Forbidden Resource response is given, else the request is normally processed.\n\n\nAcknowledgements\n****************\n\n`Denis Bilenko \\'s webchat example <https://bitbucket.org/denis/gevent/src/tip/examples/webchat/>`_ has been a great starting point for the design of this app.\n\n\nFurther improvements\n********************\n\n- Users list methods could be improved to work properly in multi-process environments, as it's been done with message handlers.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/qubird/django-chatrooms", "keywords": "django chat ajax", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "django-chatrooms", "package_url": "https://pypi.org/project/django-chatrooms/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-chatrooms/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/qubird/django-chatrooms"}, "release_url": "https://pypi.org/project/django-chatrooms/1.2adev/", "requires_dist": null, "requires_python": null, "summary": "A django app providing reverse-ajax chat rooms", "version": "1.2adev", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Chatrooms is an app that provides multi-user chat rooms for your django site.</p>\n<p>It\u2019s completely based on jQuery and <a href=\"http://www.gevent.org/\" rel=\"nofollow\">gevent</a>, whose libraries\nhave been used to implement long polling.</p>\n<p>It provides a set of models, views and templates ready out of the box and easily\ncustomizable.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the egg from pypi:</p>\n<pre>$ pip install django-chatrooms\n</pre>\n<p>or get the latest revision from github:</p>\n<pre>$ pip install -e git+git://github.com/qubird/django-chatrooms#egg=chatrooms\n</pre>\n<p>If you use buildout, just add <tt><span class=\"pre\">django-chatrooms</span></tt> to your eggs part.</p>\n<p>The egg setup takes care of installing all the needed dependencies, anyway you might need to install <a href=\"http://pypi.python.org/pypi/greenlet/\" rel=\"nofollow\">greenlet</a> and <a href=\"http://www.libevent.org/\" rel=\"nofollow\">libevent</a> to let gevent work properly.</p>\n<p>Once the egg is installed, add the following apps to your settings.INSTALLED_APPS:</p>\n<pre>INSTALLED_APPS = (\n    # ...,\n    'polymorphic',\n    'chatrooms',\n    # ...,\n)\n</pre>\n<p>Then include chatrooms urls to your urlpatterns:</p>\n<pre>urlpatterns = patterns('',\n    # ...,\n    url(r'^chat/', include('chatrooms.urls')),\n    # ...,\n)\n</pre>\n<p>Make sure you also added <tt>staticfiles_urlpatterns</tt> to urlconf like:</p>\n<pre>from django.contrib.staticfiles.urls import staticfiles_urlpatterns\nurlpatterns += staticfiles_urlpatterns()\n</pre>\n<p>and <tt>'django.contrib.staticfiles'</tt> is amongst <tt>INSTALLED_APPS</tt>.</p>\n<p>Then you\u2019re ready to run <tt>syncdb</tt>.</p>\n</div>\n<div id=\"important-note\">\n<h2>Important Note</h2>\n<p>django-chatrooms works properly in a multithreading environment (like <a href=\"https://github.com/gabrielfalcao/djangogevent\" rel=\"nofollow\">gevent patched wsgi server</a>, or <a href=\"http://projects.unbit.it/uwsgi/wiki/Gevent\" rel=\"nofollow\">uwsgi server with gevent plugin</a>).</p>\n<p>To use the app with servers that pre-fork the application before running, like\n<a href=\"http://gunicorn.org\" rel=\"nofollow\">gunicorn</a> does, you need to use some sort of interprocess\ncommunication.</p>\n<p><tt>chatrooms.utils.redis_handlers</tt> module contains the <tt>RedisMessageHandler</tt> class,\nwhich can be set as <tt>settings.CHATROOMS_MESSAGE_HANDLERS</tt> to use the application\nin a gunicorn-like environment.\nThe module needs a <a href=\"http://redis.io\" rel=\"nofollow\">redis</a> instance installed and running to work.</p>\n<p>Also a <tt>chatrooms.utils.celery_handlers.CeleryMessageHandler</tt> class has been included.\nIt can be used as <tt>settings.CHATROOMS_MESSAGE_HANDLERS</tt> as well, but needs <a href=\"http://www.celeryproject.org\" rel=\"nofollow\">celery</a> to be installed.</p>\n<p>See the <a href=\"#message-handlers\" rel=\"nofollow\">Message Handlers</a> section to know how to implement your own handlers.</p>\n</div>\n<div id=\"using-the-app\">\n<h2>Using the app</h2>\n<div id=\"models\">\n<h3>Models</h3>\n<p>The app installs two models: Room and Message.\nRooms can be created by Admin Site.\nRoom objects have the following fields:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>name:</th><td></td>\n</tr>\n<tr><th>description:</th><td>almost self-explaining</td>\n</tr>\n<tr><th>slug:</th><td>which identifies the room in urls and views</td>\n</tr>\n<tr><th>subscribers:</th><td>which references a set of users (not used by default)</td>\n</tr>\n<tr><th>allow_anonymous_access:</th></tr>\n<tr><td>\u00a0</td><td>which tells whether the room is accessible only to logged users, or event to \u201cguests\u201d. A guest user is asked to choose a guest name before entering the room.</td>\n</tr>\n<tr><th>private:</th><td></td>\n</tr>\n<tr><th>password:</th><td>These fields aren\u2019t used by default. They might be useful for implementing custom policies of access. See the <a href=\"#custom-access-policies\" rel=\"nofollow\">Custom access policies</a> section for further details.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"views\">\n<h3>Views</h3>\n<p>Besides the core views that handle ajax requests to make the chat work, some class-based views have been designed.</p>\n<p>These are in <tt>views.py</tt>:</p>\n<ul>\n<li><tt>RoomsListView</tt>, which shows the list of rooms filtering the ones requiring a logged user if the user is not authenticated</li>\n<li><tt>RoomView</tt>, which renders the actual room page</li>\n<li><tt>GuestNameView</tt>, which is shown to non-logged users entering an <tt>allow_anonymous_access</tt> room to choose a guest name</li>\n</ul>\n</div>\n<div id=\"templates\">\n<h3>Templates</h3>\n<p>The templates you might want to override are</p>\n<ul>\n<li><p><tt>chatrooms/guestname_form.html</tt>, which is rendered by GuestNameView: it shows the form for choosing a guest name</p>\n</li>\n<li><p><tt>chatrooms/rooms_list.html</tt>, which is rendered by RoomsListView</p>\n</li>\n<li><p><tt>chatrooms/room.html</tt>, which is the skeleton of the page where chat objects are placed dynamically. The page includes the <tt>js/room.js</tt> script which requires a <tt>getContext()</tt> function like:</p>\n<pre>&lt;script type=\"text/javascript\"&gt;\n    getContext = function(){\n        return {\n            \"username\": \"{{ user.username }}\",\n            \"room_id\": {{ room.id }},\n        }\n    }\n&lt;/script&gt;\n</pre>\n</li>\n</ul>\n<p>Some elements are required by <tt>room.js</tt> and need to be included in <tt>room.html</tt>:</p>\n<div>\n<div><tt>#chatText</tt>: an empty <tt>div</tt>,</div>\n<div><tt>#chatSendText</tt>: text input where the user enters the text to send,</div>\n<div><tt>#chatSendButton</tt>: button input pressed by user to submit text,</div>\n<div><tt>#connectedUsersList</tt>: a list element where connected users are shown.</div>\n</div>\n</div>\n<div id=\"styles\">\n<h3>Styles</h3>\n<p><tt>static/css</tt> folder contains the file <tt>room.css</tt> you might want to override to re-style the room page.</p>\n</div>\n<div id=\"tests\">\n<h3>Tests</h3>\n<p>The <tt>test_gevent</tt> command has been implemented to test the chat features that use gevent libraries.</p>\n</div>\n</div>\n<div id=\"message-handlers\">\n<h2>Message Handlers</h2>\n<p><tt>utils.handlers.MessageHandler</tt> class implements the methods</p>\n<ul>\n<li><p><tt>handle_received_message(sender, room_id, username, message, date, [user])</tt></p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>sender:</th><td>the ChatView instance</td>\n</tr>\n<tr><th>room_id:</th><td>the id of the room where the message was sent</td>\n</tr>\n<tr><th>username:</th><td>username or guest name of the user who sent the message</td>\n</tr>\n<tr><th>message:</th><td>the content of the sent message</td>\n</tr>\n<tr><th>date:</th><td>the timestamp of the sent message</td>\n</tr>\n<tr><th>user:</th><td>request.user if user is authenticated, else <tt>None</tt></td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</li>\n<li><p><tt>retrieve_messages(chatobj, room_id, latest_msg_id)</tt></p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>chatobj:</th><td>the ChatView instance</td>\n</tr>\n<tr><th>room_id:</th><td>the id of the room whose messages are requested</td>\n</tr>\n<tr><th>latest_msg_id:</th><td>the id of the latest message sent to the room</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</li>\n<li><p><tt>get_latest_message_id(chatobj, room_id)</tt></p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>chatobj:</th><td>the ChatView instance</td>\n</tr>\n<tr><th>room_id:</th><td>the id of the room whose latest message id is requested</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</li>\n</ul>\n<p><tt>handle_received_message</tt> method is designed to perform operations\nwith the received message such that <tt>retrieve_messages</tt> is able to\nretrieve it afterwards.</p>\n<p><tt>retrieve_messages</tt> must return a list of tuples like <tt>[(message_id, message_obj), <span class=\"pre\">...]</span></tt>, where <tt>message_obj</tt> is an instance of <tt>Message</tt> or an object with at least the following attributes:</p>\n<ul>\n<li><tt>username</tt></li>\n<li><tt>date</tt></li>\n<li><tt>content</tt></li>\n</ul>\n<p>and <tt>message_id</tt> is a unique progressive identifier.</p>\n<p><tt>get_latest_message_id</tt> must give back the id of the latest message received,\nconsistently to the ways messages are stored and retrieved.</p>\n<p>To implement your handlers you need to create a class extending <tt>chatrooms.utils.handlers.MessageHandler</tt>, say <tt>my.app.MyHandlerClass</tt>,\noverride the aforementioned methods, and add to your settings:</p>\n<pre>CHATROOMS_HANDLERS_CLASS = 'my.app.MyHandlerClass'\n</pre>\n<p>This way your defined methods will be used as default handlers for received messages and requests for messages.</p>\n<p>See <tt>utils.handlers.MessageHandler</tt> and <tt>ajax.chat.ChatView</tt> docstrings for further details on these classes.</p>\n</div>\n<div id=\"custom-access-policies\">\n<h2>Custom access policies</h2>\n<p>Access to rooms can be controlled defining a function which takes <tt>request</tt> and <tt>user</tt> as arguments, and returns True or False whether the user is allowed to access the room or not (<tt>room_id</tt> is given as a GET parameter of the request).</p>\n<p>Once you defined your function, say <tt>my.app.user_can_enter_foo</tt>, add to your settings:</p>\n<pre>CHATROOMS_TEST_USER_FUNCTION = 'my.app.user_can_enter_foo'\n</pre>\n<p>Your function will be used as a test by view decorators.\nWhen the user sends ajax requests to send or get chat messages, or get the connected users list, <tt>request</tt> and <tt>user</tt> are passed to your function.\nIf it returns <tt>False</tt>, a 403 Forbidden Resource response is given, else the request is normally processed.</p>\n</div>\n<div id=\"acknowledgements\">\n<h2>Acknowledgements</h2>\n<p><a href=\"https://bitbucket.org/denis/gevent/src/tip/examples/webchat/\" rel=\"nofollow\">Denis Bilenko \u2018s webchat example</a> has been a great starting point for the design of this app.</p>\n</div>\n<div id=\"further-improvements\">\n<h2>Further improvements</h2>\n<ul>\n<li>Users list methods could be improved to work properly in multi-process environments, as it\u2019s been done with message handlers.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 789278, "releases": {"1.0adev": [{"comment_text": "", "digests": {"md5": "49c81100551d5de7260152140eb71b53", "sha256": "880d0be6542d87e59bc785117acc4bbff961b33199d7105bee6c630ea9bb9253"}, "downloads": -1, "filename": "django-chatrooms-1.0adev.tar.gz", "has_sig": false, "md5_digest": "49c81100551d5de7260152140eb71b53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11457, "upload_time": "2011-12-15T17:17:13", "upload_time_iso_8601": "2011-12-15T17:17:13.341598Z", "url": "https://files.pythonhosted.org/packages/91/db/6559c65ac17208c305a4f0fcaf8cb164c50b5ec4fcc0c56f6720cf0c3b34/django-chatrooms-1.0adev.tar.gz", "yanked": false}], "1.1adev": [{"comment_text": "", "digests": {"md5": "594f9d45478e182038d71cbc297172d9", "sha256": "3c20b9d16220e1da591049c8c39f5f2c4b2814547ffe50744ddbaa615d3bceca"}, "downloads": -1, "filename": "django-chatrooms-1.1adev.tar.gz", "has_sig": false, "md5_digest": "594f9d45478e182038d71cbc297172d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16551, "upload_time": "2011-12-20T01:48:36", "upload_time_iso_8601": "2011-12-20T01:48:36.313906Z", "url": "https://files.pythonhosted.org/packages/37/09/dbb18d8d7777013c83a7c8b584df3c6df3ed68f5fa0035b20ddab1a22834/django-chatrooms-1.1adev.tar.gz", "yanked": false}], "1.2adev": [{"comment_text": "", "digests": {"md5": "edbf544820a29f9ed5845ff7617fb5fb", "sha256": "5f0a0bdf9b83adbf93f197d8c7b685c47c75ae1c603f4c6fdaea72972256f54e"}, "downloads": -1, "filename": "django-chatrooms-1.2adev.tar.gz", "has_sig": false, "md5_digest": "edbf544820a29f9ed5845ff7617fb5fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18025, "upload_time": "2011-12-27T22:10:38", "upload_time_iso_8601": "2011-12-27T22:10:38.258221Z", "url": "https://files.pythonhosted.org/packages/43/2c/ed8cd28e5340fc1e0c6895b3a21431ee01649bd23fecba72d55e35f0fc11/django-chatrooms-1.2adev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "edbf544820a29f9ed5845ff7617fb5fb", "sha256": "5f0a0bdf9b83adbf93f197d8c7b685c47c75ae1c603f4c6fdaea72972256f54e"}, "downloads": -1, "filename": "django-chatrooms-1.2adev.tar.gz", "has_sig": false, "md5_digest": "edbf544820a29f9ed5845ff7617fb5fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18025, "upload_time": "2011-12-27T22:10:38", "upload_time_iso_8601": "2011-12-27T22:10:38.258221Z", "url": "https://files.pythonhosted.org/packages/43/2c/ed8cd28e5340fc1e0c6895b3a21431ee01649bd23fecba72d55e35f0fc11/django-chatrooms-1.2adev.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:10 2020"}