{"info": {"author": "Shaun Viguerie", "author_email": "shaunvig114@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: System :: Shells", "Topic :: System :: System Shells"], "description": "# jsonlike [![Build Status](https://travis-ci.org/shaunvxc/jsonlike.svg?branch=master)](https://travis-ci.org/shaunvxc/jsonlike) [![PyPI version](https://badge.fury.io/py/jsonlike.svg)](https://badge.fury.io/py/jsonlike)\n###Why?\nSometimes, especially when working with `JSON` data from the web, you will find that the data format is not quite JSON and thus have to do a little bit of fighting with it in order to successfully call `json.loads()`.  \n\n###Goal\nThe goal of this package is **try** and provide the same functionality as `json.loads()` for data that **looks** like JSON, but doesn't play nicely with `json.loads()` or other common solutions.  \n\nIn its current state, it simply applies some heuristics that solve some of the common cases I've run into while working with not-quite `json` structured data. Overtime, I'd like to see it turn into something a bit more robust.\n\n###Usage\n```python\nimport jsonlike\njsonlike.loads(invalid_json_string)\n```\n\nCurrently, `jsonlike.loads` will\n* strip out bad escape characters\n* strip out HTML content with JSON values\n* add missing commas\n* correct errors due to nested `\"`'s\n\n##### Strip response callback wrappers\n```python\nimport jsonlike\njsonlike.unwrap_and_load(\"callback({\"a\": \"\"hello\"\"})\") # yields {\"a\":\"hello\"}\n```\nFor JSON surrounded by a callback wrapper, calling `unwrap_and_load` will use the `unwrapper` library to strip away the callback, before returning `loads()` on the remaining content.\n\n###Installation\n`$ pip install jsonlike`\n\n## Contributing\n1. Fork it ( https://github.com/shaunvxc/envy/fork )\n1. Create your feature branch (`git checkout -b new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Run the tests (`make test`)\n1. Push change to the branch (`git push origin new-feature`)\n1. Create a Pull Request\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shaunvxc/jsonlike", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "jsonlike", "package_url": "https://pypi.org/project/jsonlike/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/jsonlike/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/shaunvxc/jsonlike"}, "release_url": "https://pypi.org/project/jsonlike/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "repair and parse invalid but jsonlike content", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># jsonlike [![Build Status](<a href=\"https://travis-ci.org/shaunvxc/jsonlike.svg?branch=master)%5D(https://travis-ci.org/shaunvxc/jsonlike\" rel=\"nofollow\">https://travis-ci.org/shaunvxc/jsonlike.svg?branch=master)](https://travis-ci.org/shaunvxc/jsonlike</a>) [![PyPI version](<a href=\"https://badge.fury.io/py/jsonlike.svg)%5D(https://badge.fury.io/py/jsonlike\" rel=\"nofollow\">https://badge.fury.io/py/jsonlike.svg)](https://badge.fury.io/py/jsonlike</a>)\n###Why?\nSometimes, especially when working with <cite>JSON</cite> data from the web, you will find that the data format is not quite JSON and thus have to do a little bit of fighting with it in order to successfully call <cite>json.loads()</cite>.</p>\n<p>###Goal\nThe goal of this package is <strong>try</strong> and provide the same functionality as <cite>json.loads()</cite> for data that <strong>looks</strong> like JSON, but doesn\u2019t play nicely with <cite>json.loads()</cite> or other common solutions.</p>\n<p>In its current state, it simply applies some heuristics that solve some of the common cases I\u2019ve run into while working with not-quite <cite>json</cite> structured data. Overtime, I\u2019d like to see it turn into something a bit more robust.</p>\n<p>###Usage\n<tt>`python\nimport jsonlike\njsonlike.loads(invalid_json_string)\n`</tt></p>\n<p>Currently, <cite>jsonlike.loads</cite> will\n* strip out bad escape characters\n* strip out HTML content with JSON values\n* add missing commas\n* correct errors due to nested <cite>\u201c</cite>\u2019s</p>\n<p>##### Strip response callback wrappers\n<tt>`python\nimport jsonlike\n<span class=\"pre\">jsonlike.unwrap_and_load(\"callback({\"a\":</span> <span class=\"pre\">\"\"hello\"\"})\")</span> # yields <span class=\"pre\">{\"a\":\"hello\"}</span>\n`</tt>\nFor JSON surrounded by a callback wrapper, calling <cite>unwrap_and_load</cite> will use the <cite>unwrapper</cite> library to strip away the callback, before returning <cite>loads()</cite> on the remaining content.</p>\n<p>###Installation\n<cite>$ pip install jsonlike</cite></p>\n<p>## Contributing\n1. Fork it ( <a href=\"https://github.com/shaunvxc/envy/fork\" rel=\"nofollow\">https://github.com/shaunvxc/envy/fork</a> )\n1. Create your feature branch (<cite>git checkout -b new-feature</cite>)\n1. Commit your changes (<cite>git commit -am \u2018Add some feature\u2019</cite>)\n1. Run the tests (<cite>make test</cite>)\n1. Push change to the branch (<cite>git push origin new-feature</cite>)\n1. Create a Pull Request</p>\n\n          </div>"}, "last_serial": 2583980, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1981369d166a7bbe151311cbb8608064", "sha256": "73c1a43c87b7e2e23d245f7a299dbf34247264552fe399c5b8e60ceb3a578c0f"}, "downloads": -1, "filename": "jsonlike-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1981369d166a7bbe151311cbb8608064", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3141, "upload_time": "2016-04-17T21:40:29", "upload_time_iso_8601": "2016-04-17T21:40:29.677912Z", "url": "https://files.pythonhosted.org/packages/1b/87/88722b2fe5f17907a4526664d165fcf5c0f6e5e790c68d1ef765f8ca63f5/jsonlike-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "78c33df3091d6e00b2d23f0a035e43da", "sha256": "fd962b6ac07f8cbc4a54b7ce4396ddc3e667340dae08cf2c7e6eff73823bc0a2"}, "downloads": -1, "filename": "jsonlike-0.0.2.tar.gz", "has_sig": false, "md5_digest": "78c33df3091d6e00b2d23f0a035e43da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4114, "upload_time": "2017-01-19T02:32:02", "upload_time_iso_8601": "2017-01-19T02:32:02.419061Z", "url": "https://files.pythonhosted.org/packages/34/0b/cb2509938ae0024df46938a799dc043235b957c3015831b6cb99094a314e/jsonlike-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "78c33df3091d6e00b2d23f0a035e43da", "sha256": "fd962b6ac07f8cbc4a54b7ce4396ddc3e667340dae08cf2c7e6eff73823bc0a2"}, "downloads": -1, "filename": "jsonlike-0.0.2.tar.gz", "has_sig": false, "md5_digest": "78c33df3091d6e00b2d23f0a035e43da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4114, "upload_time": "2017-01-19T02:32:02", "upload_time_iso_8601": "2017-01-19T02:32:02.419061Z", "url": "https://files.pythonhosted.org/packages/34/0b/cb2509938ae0024df46938a799dc043235b957c3015831b6cb99094a314e/jsonlike-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:46 2020"}