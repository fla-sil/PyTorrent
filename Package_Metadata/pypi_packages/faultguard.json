{"info": {"author": "Benedikt Bieringer", "author_email": "2xB.coding@wwu.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Faultguard\n\n[![Build Status](https://travis-ci.com/2xB/faultguard.svg?branch=master)](https://travis-ci.com/2xB/faultguard)\n[![GitHub license](https://img.shields.io/github/license/2xB/faultguard.svg)](https://github.com/2xB/faultguard)\n[![pypi version](https://img.shields.io/pypi/v/faultguard.svg)](https://pypi.org/project/faultguard/)\n\nRescuing data from abrubt process termination in Python3.\n\n## Introduction\n\nIf a process experiences e.g. a segmentation fault, it cannot execute further operations to recover. Also, memory of a process is considered inconsistent after a segmentation fault. As soon as a project depends on third party libraries, the appearence of such faults is out of hand. Therefore, to implement a crash handler for important data, an approach to prepare for rescuing data after an abrupt process termination is needed. This module uses the Python modules 'pickle', 'multiprocessing' and 'collections', to serialize and deserialize various types of data and provides a dictory-like data type to save and recover important data in the adress space of an independent process.\n\nThis module is really simple, although its functionality is very reuseable. If you are versed in this topic, feel encouraged to look into the source code and to contribute through (well documented ;) ) pull requests.\n\n## Installation\n\nThis module is available through pip or can be installed manually via setup.py.\n\n## Disclamer\n\nThis module is focused on projects that e.g. rely on native libraries and have important data. It will not provide you any help in fixing a segmentation fault and you should feel encouraged to learn about the Python module 'faulthandler' and the use of 'gdm' to fix faults in your own code. If you somehow manage to generate a segmentation fault in the faultguard data dictionary, and therefore destroy the guard process, the rescue will of course not work. This module is an additional security option, not an excuse for irresponsible programming!\n\n## Example\n\nIt follows a minimal working example for this module:\n\n```python\nimport faultguard\nimport numpy as np\n\ndef launch(faultguard_data, args):\n    \"\"\"\n    Demo software main method\n    \n    :param faultguard_data: Faultguard data dictionary\n    :param args: Data passed from faultguard.start.\n    \"\"\"\n    print(\"Launching demo\")\n    \n    # Some important data\n    important_data_1 = np.array([1,2,3])\n    important_data_2 = args[0] + \" \" + args[1]\n    \n    # Some dummy important data manipulation\n    for i in range(10):\n        important_data_1[i%3] = i\n        important_data_2 += str(i)\n        print(\"important_data_1:\", important_data_1)\n        print(\"important_data_2:\", important_data_2)\n        \n        # Sending important data to faultguard process\n        faultguard_data[\"important_data_1\"] = important_data_1\n        faultguard_data[\"important_data_2\"] = important_data_2\n        \n        # Generate segfault\n        if i == 7:\n            import ctypes\n            ctypes.string_at(0)\n            \ndef rescue(faultguard_data, exit_code, args):\n    \"\"\"\n    Demo rescue handler\n    \n    :param faultguard_data: Faultguard data dictionary\n    :param exit_code: Exit code of occured fault.\n    :param args: Data passed from faultguard.start.\n    \"\"\"\n    print(\"Fault occured. Exit code: {}. Rescued data:\".format(exit_code))\n    \n    # Check if fault occurs before data was initialized\n    if \"important_data_1\" not in faultguard_data or \"important_data_2\" not in faultguard_data:\n        return\n    \n    # Restore data\n    important_data_1 = faultguard_data[\"important_data_1\"]\n    important_data_2 = faultguard_data[\"important_data_2\"]\n    \n    # You might need to assign the class here by important_data_1.__class__ = ...\n    print(\"important_data_1:\", important_data_1)\n    print(\"important_data_2:\", important_data_2)\n    \ndef main():\n    faultguard.start(launch, rescue, args=(\"Hello\", \"World\"))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Credit\n\nThis project was initially developed for a hardware project at the University of M\u00fcnster.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/2xB/faultguard", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "faultguard", "package_url": "https://pypi.org/project/faultguard/", "platform": "", "project_url": "https://pypi.org/project/faultguard/", "project_urls": {"Homepage": "https://github.com/2xB/faultguard"}, "release_url": "https://pypi.org/project/faultguard/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Rescuing data from abrubt process termination in python.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Faultguard</h1>\n<p><a href=\"https://travis-ci.com/2xB/faultguard\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73da36bcb42a82a6fc49ef95009a08d95daca9fc/68747470733a2f2f7472617669732d63692e636f6d2f3278422f6661756c7467756172642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/2xB/faultguard\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/437006384f801cbd4e15d349f626b0aaf20a341c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f3278422f6661756c7467756172642e737667\"></a>\n<a href=\"https://pypi.org/project/faultguard/\" rel=\"nofollow\"><img alt=\"pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3382576dea6d41362441bcf3104c1fafecb65439/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6661756c7467756172642e737667\"></a></p>\n<p>Rescuing data from abrubt process termination in Python3.</p>\n<h2>Introduction</h2>\n<p>If a process experiences e.g. a segmentation fault, it cannot execute further operations to recover. Also, memory of a process is considered inconsistent after a segmentation fault. As soon as a project depends on third party libraries, the appearence of such faults is out of hand. Therefore, to implement a crash handler for important data, an approach to prepare for rescuing data after an abrupt process termination is needed. This module uses the Python modules 'pickle', 'multiprocessing' and 'collections', to serialize and deserialize various types of data and provides a dictory-like data type to save and recover important data in the adress space of an independent process.</p>\n<p>This module is really simple, although its functionality is very reuseable. If you are versed in this topic, feel encouraged to look into the source code and to contribute through (well documented ;) ) pull requests.</p>\n<h2>Installation</h2>\n<p>This module is available through pip or can be installed manually via setup.py.</p>\n<h2>Disclamer</h2>\n<p>This module is focused on projects that e.g. rely on native libraries and have important data. It will not provide you any help in fixing a segmentation fault and you should feel encouraged to learn about the Python module 'faulthandler' and the use of 'gdm' to fix faults in your own code. If you somehow manage to generate a segmentation fault in the faultguard data dictionary, and therefore destroy the guard process, the rescue will of course not work. This module is an additional security option, not an excuse for irresponsible programming!</p>\n<h2>Example</h2>\n<p>It follows a minimal working example for this module:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">faultguard</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">faultguard_data</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Demo software main method</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    :param faultguard_data: Faultguard data dictionary</span>\n<span class=\"sd\">    :param args: Data passed from faultguard.start.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Launching demo\"</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># Some important data</span>\n    <span class=\"n\">important_data_1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n    <span class=\"n\">important_data_2</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\" \"</span> <span class=\"o\">+</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    \n    <span class=\"c1\"># Some dummy important data manipulation</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">important_data_1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n        <span class=\"n\">important_data_2</span> <span class=\"o\">+=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"important_data_1:\"</span><span class=\"p\">,</span> <span class=\"n\">important_data_1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"important_data_2:\"</span><span class=\"p\">,</span> <span class=\"n\">important_data_2</span><span class=\"p\">)</span>\n        \n        <span class=\"c1\"># Sending important data to faultguard process</span>\n        <span class=\"n\">faultguard_data</span><span class=\"p\">[</span><span class=\"s2\">\"important_data_1\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">important_data_1</span>\n        <span class=\"n\">faultguard_data</span><span class=\"p\">[</span><span class=\"s2\">\"important_data_2\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">important_data_2</span>\n        \n        <span class=\"c1\"># Generate segfault</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">7</span><span class=\"p\">:</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n            <span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">string_at</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            \n<span class=\"k\">def</span> <span class=\"nf\">rescue</span><span class=\"p\">(</span><span class=\"n\">faultguard_data</span><span class=\"p\">,</span> <span class=\"n\">exit_code</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Demo rescue handler</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    :param faultguard_data: Faultguard data dictionary</span>\n<span class=\"sd\">    :param exit_code: Exit code of occured fault.</span>\n<span class=\"sd\">    :param args: Data passed from faultguard.start.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Fault occured. Exit code: </span><span class=\"si\">{}</span><span class=\"s2\">. Rescued data:\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">exit_code</span><span class=\"p\">))</span>\n    \n    <span class=\"c1\"># Check if fault occurs before data was initialized</span>\n    <span class=\"k\">if</span> <span class=\"s2\">\"important_data_1\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">faultguard_data</span> <span class=\"ow\">or</span> <span class=\"s2\">\"important_data_2\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">faultguard_data</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n    \n    <span class=\"c1\"># Restore data</span>\n    <span class=\"n\">important_data_1</span> <span class=\"o\">=</span> <span class=\"n\">faultguard_data</span><span class=\"p\">[</span><span class=\"s2\">\"important_data_1\"</span><span class=\"p\">]</span>\n    <span class=\"n\">important_data_2</span> <span class=\"o\">=</span> <span class=\"n\">faultguard_data</span><span class=\"p\">[</span><span class=\"s2\">\"important_data_2\"</span><span class=\"p\">]</span>\n    \n    <span class=\"c1\"># You might need to assign the class here by important_data_1.__class__ = ...</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"important_data_1:\"</span><span class=\"p\">,</span> <span class=\"n\">important_data_1</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"important_data_2:\"</span><span class=\"p\">,</span> <span class=\"n\">important_data_2</span><span class=\"p\">)</span>\n    \n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">faultguard</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">launch</span><span class=\"p\">,</span> <span class=\"n\">rescue</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"World\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>Credit</h2>\n<p>This project was initially developed for a hardware project at the University of M\u00fcnster.</p>\n\n          </div>"}, "last_serial": 6145235, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "bfc6a9916464182f9d94d37e7bfb87bb", "sha256": "2f62e7c50992fd41d311cbee97df3464acf1bc767d4e221241d924a4c0f407fc"}, "downloads": -1, "filename": "faultguard-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bfc6a9916464182f9d94d37e7bfb87bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4663, "upload_time": "2019-02-25T18:10:30", "upload_time_iso_8601": "2019-02-25T18:10:30.907219Z", "url": "https://files.pythonhosted.org/packages/78/69/bdc1f169d70dbe414d76daa61d9215bb72101a587b179f456dd9a92c5d30/faultguard-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d529911981954e664729edacdc84ba0c", "sha256": "9dbd1d229b341257fde64396a7904d40cde7d88fafcdc733827f13a1c4b05482"}, "downloads": -1, "filename": "faultguard-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d529911981954e664729edacdc84ba0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3598, "upload_time": "2019-02-25T18:10:33", "upload_time_iso_8601": "2019-02-25T18:10:33.067261Z", "url": "https://files.pythonhosted.org/packages/21/85/8793a9b6b0a71e852526dd2895255afb2f62a477ef8c3d475539c870ca69/faultguard-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "341c897b6b5bc9eaa11fc7bbd4032b13", "sha256": "14024cc8d306691cbb6584d3eaf0e69c033c417a6522d8c5d42575983f183215"}, "downloads": -1, "filename": "faultguard-1.0.1.tar.gz", "has_sig": false, "md5_digest": "341c897b6b5bc9eaa11fc7bbd4032b13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3576, "upload_time": "2019-03-05T16:57:36", "upload_time_iso_8601": "2019-03-05T16:57:36.885808Z", "url": "https://files.pythonhosted.org/packages/3e/1a/5e2b612b7960d3e629cbfb3868a4170b119d40129cbc5b649592b5a3ca98/faultguard-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "396f4ca6508c520fd0e387878d6b1b9f", "sha256": "11a170e2e4cf367b9e33adcc85888dd6d91dd386d1cad00d08d8d9e526555ebc"}, "downloads": -1, "filename": "faultguard-1.0.2.tar.gz", "has_sig": false, "md5_digest": "396f4ca6508c520fd0e387878d6b1b9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3527, "upload_time": "2019-11-15T22:47:48", "upload_time_iso_8601": "2019-11-15T22:47:48.432069Z", "url": "https://files.pythonhosted.org/packages/f6/33/b60a2039166c404886384b5d7681bf28b6646c07c765157a9879b5f4b8fa/faultguard-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "396f4ca6508c520fd0e387878d6b1b9f", "sha256": "11a170e2e4cf367b9e33adcc85888dd6d91dd386d1cad00d08d8d9e526555ebc"}, "downloads": -1, "filename": "faultguard-1.0.2.tar.gz", "has_sig": false, "md5_digest": "396f4ca6508c520fd0e387878d6b1b9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3527, "upload_time": "2019-11-15T22:47:48", "upload_time_iso_8601": "2019-11-15T22:47:48.432069Z", "url": "https://files.pythonhosted.org/packages/f6/33/b60a2039166c404886384b5d7681bf28b6646c07c765157a9879b5f4b8fa/faultguard-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:19 2020"}