{"info": {"author": "Sean Parsons", "author_email": "seanpatrick2013@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6"], "description": "Validator\n=========\n|PyPI| |PyPI version|\n\nA simple way to validate dictionary values by using functions.\n\n\nInstallation\n------------\n- ``pip3 install simple-validator``\n\n\nUsage\n-----\nThere are 2 main classes to create custom validation classes(``Field``, ``Validator``).\n\n.. code:: python\n\n    from validator import Field, Validator\n\n\n    def is_valid_email(val: str):\n        \"\"\" A horrible way to check if a string is a valid email. \"\"\"\n        passed = False\n        err_msg = \"{} isn't a valid email.\".format(val)\n\n        if '@' in val:\n            passed = True\n        return passed, err_msg\n\n\n    class UserValidator(Validator):\n        \"\"\" Validates a user dictionary. \"\"\"\n        email = Field(data_type=str, validators=[is_valid_email])\n\n\nValidation\n----------\nThe Validator provides the same api as Django forms for checking if all the fields\nare valid.\n\n.. code:: python\n\n    data = {\n        'email': 'Sean@parsons.com'\n    }\n\n    user = UserValidator(data)\n\n    if user.is_valid():\n        # Do things in here...\n        email = user.email # Optionally you can do user.data['email']\n    else:\n        print(user.errors)\n\nRequired Fields\n---------------\nTo make a ``Field`` required, all that needs to be done is add ``required=True`` as a kwarg\nto the definition\n\nIf the field isn't present it will be added to ```Validator.errors`` under the key for the declared Field\nthat is set to required.\n\n.. code:: python\n\n   class UserValidator(Validator):\n        \"\"\" Validates a user dictionary. \"\"\"\n\n        email = Field(\n            data_type=str,\n            validators=[is_valid_email],\n            required=True\n        )\n\nErrors\n------\nThe ``Validator.errors`` attribute is a ``defaultdict(list)``.\n\nWhen validators don't pass, the declared field(Ex: 'email', 'password' etc..) errors\ngets populated with the return error string from the validator or required errors if the data is missing.\n\n.. code:: python\n\n    data = {\n        'email': 'sean'\n    }\n\n    user = UserValidator(data)\n\n    if user.is_valid():\n        # Do things in here...\n    else:\n        print(user.errors['email'])\n\n        # \"sean isn't a valid email.\"\n\n\nValidating Field Types\n----------------------\nThe ``Field`` class has a ``data_type`` parameter which should be used to validate a field value\nbefore passing it into validators.\n\nThis prevents from having ``try, except, else`` blocks inside of validator functions because your guaranteed\nit won't be passed into validators until it's the correct type.\n\n**If the field value is the wrong type, it will ony return an error like the one below**\n\n\n.. code:: python\n\n    data = {\n        'email': 1\n    }\n\n    user = UserValidator(data)\n\n    if user.is_valid():\n        # Do things in here...\n    else:\n        print(user.errors['email'])\n\n        # \"'1' is expected to be a 'String'\"\n\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/simple-validator.svg\n   :target: https://pypi.python.org/pypi/simple-validator/\n\n.. |PyPI version| image:: https://img.shields.io/pypi/pyversions/simple-validator.svg\n   :target: https://pypi.python.org/pypi/simple-validator/\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/seanpar203/validator/archive/1.0.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seanpar203/validator", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "simple-validator", "package_url": "https://pypi.org/project/simple-validator/", "platform": "any", "project_url": "https://pypi.org/project/simple-validator/", "project_urls": {"Download": "https://github.com/seanpar203/validator/archive/1.0.3.tar.gz", "Homepage": "https://github.com/seanpar203/validator"}, "release_url": "https://pypi.org/project/simple-validator/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "A simple way to validate dictionary values by using functions.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/simple-validator/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad3fbd1016e42a325cf5a0dac3a34632b88b303f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73696d706c652d76616c696461746f722e737667\"></a> <a href=\"https://pypi.python.org/pypi/simple-validator/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78c51af16c6ebaffea98fa35e8b069558f1c895a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73696d706c652d76616c696461746f722e737667\"></a></p>\n<p>A simple way to validate dictionary values by using functions.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li><tt>pip3 install <span class=\"pre\">simple-validator</span></tt></li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>There are 2 main classes to create custom validation classes(<tt>Field</tt>, <tt>Validator</tt>).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">validator</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">Validator</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">is_valid_email</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" A horrible way to check if a string is a valid email. \"\"\"</span>\n    <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">err_msg</span> <span class=\"o\">=</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\"> isn't a valid email.\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"s1\">'@'</span> <span class=\"ow\">in</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n        <span class=\"n\">passed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">passed</span><span class=\"p\">,</span> <span class=\"n\">err_msg</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserValidator</span><span class=\"p\">(</span><span class=\"n\">Validator</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Validates a user dictionary. \"\"\"</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">is_valid_email</span><span class=\"p\">])</span>\n</pre>\n</div>\n<div id=\"validation\">\n<h2>Validation</h2>\n<p>The Validator provides the same api as Django forms for checking if all the fields\nare valid.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'Sean@parsons.com'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserValidator</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do things in here...</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span> <span class=\"c1\"># Optionally you can do user.data['email']</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"required-fields\">\n<h2>Required Fields</h2>\n<p>To make a <tt>Field</tt> required, all that needs to be done is add <tt>required=True</tt> as a kwarg\nto the definition</p>\n<p>If the field isn\u2019t present it will be added to <tt>`Validator.errors</tt> under the key for the declared Field\nthat is set to required.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UserValidator</span><span class=\"p\">(</span><span class=\"n\">Validator</span><span class=\"p\">):</span>\n     <span class=\"sd\">\"\"\" Validates a user dictionary. \"\"\"</span>\n\n     <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n         <span class=\"n\">data_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span>\n         <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">is_valid_email</span><span class=\"p\">],</span>\n         <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n     <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"errors\">\n<h2>Errors</h2>\n<p>The <tt>Validator.errors</tt> attribute is a <tt>defaultdict(list)</tt>.</p>\n<p>When validators don\u2019t pass, the declared field(Ex: \u2018email\u2019, \u2018password\u2019 etc..) errors\ngets populated with the return error string from the validator or required errors if the data is missing.</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'sean'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserValidator</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do things in here...</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># \"sean isn't a valid email.\"</span>\n</pre>\n</div>\n<div id=\"validating-field-types\">\n<h2>Validating Field Types</h2>\n<p>The <tt>Field</tt> class has a <tt>data_type</tt> parameter which should be used to validate a field value\nbefore passing it into validators.</p>\n<p>This prevents from having <tt>try, except, else</tt> blocks inside of validator functions because your guaranteed\nit won\u2019t be passed into validators until it\u2019s the correct type.</p>\n<p><strong>If the field value is the wrong type, it will ony return an error like the one below</strong></p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">UserValidator</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do things in here...</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># \"'1' is expected to be a 'String'\"</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3037209, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e16407cd7ce016ff1693643dd23ed250", "sha256": "276237e4fb691b97da6dba522e8796c0cf52ce8007cc0a55fc8c3916a119c064"}, "downloads": -1, "filename": "simple-validator-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e16407cd7ce016ff1693643dd23ed250", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1890, "upload_time": "2017-07-19T18:25:46", "upload_time_iso_8601": "2017-07-19T18:25:46.850054Z", "url": "https://files.pythonhosted.org/packages/72/82/f3566a3f5e6086e826658b42c6f9650a2e06a95e1b46a764e05616ee73d6/simple-validator-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "33145fa2150c956f304281bd503136f2", "sha256": "9d562024e63e451e9422e66b2c1d885a5f9d1cca0694395e15cfca43720ea2d9"}, "downloads": -1, "filename": "simple-validator-1.0.2.tar.gz", "has_sig": false, "md5_digest": "33145fa2150c956f304281bd503136f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3156, "upload_time": "2017-07-20T13:59:52", "upload_time_iso_8601": "2017-07-20T13:59:52.616269Z", "url": "https://files.pythonhosted.org/packages/b1/49/97639675b764f6208d04cf1fa46d644780ed2ed1b8220caf29dcd42eed4a/simple-validator-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "e9736109714d094789f1a54e3d5856b9", "sha256": "d51a4595bc9ca46b497f6149c1223e7613d5400275d6df68d65ff5d3bfbe9482"}, "downloads": -1, "filename": "simple-validator-1.0.3.tar.gz", "has_sig": false, "md5_digest": "e9736109714d094789f1a54e3d5856b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3693, "upload_time": "2017-07-20T15:39:06", "upload_time_iso_8601": "2017-07-20T15:39:06.914618Z", "url": "https://files.pythonhosted.org/packages/ea/50/d074164786c16428058e9fac08742920cca9059d9c80b304f3779a73ad08/simple-validator-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9736109714d094789f1a54e3d5856b9", "sha256": "d51a4595bc9ca46b497f6149c1223e7613d5400275d6df68d65ff5d3bfbe9482"}, "downloads": -1, "filename": "simple-validator-1.0.3.tar.gz", "has_sig": false, "md5_digest": "e9736109714d094789f1a54e3d5856b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3693, "upload_time": "2017-07-20T15:39:06", "upload_time_iso_8601": "2017-07-20T15:39:06.914618Z", "url": "https://files.pythonhosted.org/packages/ea/50/d074164786c16428058e9fac08742920cca9059d9c80b304f3779a73ad08/simple-validator-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:52 2020"}