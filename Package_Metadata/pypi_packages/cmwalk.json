{"info": {"author": "Max Peng", "author_email": "max.peng1768@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "cmWalk\n======\n\n1. Introduction\n---------------\n\n``cmWalk`` is a python script to walk the directory tree of a C/C++\nproject of embedded system to generate CMakeLists.txt files for building\nthe executable.\n\n2. Usage\n--------\n\nusage: cmwalk.py [-h] input_dir\n\nA python script to generate CMakeLists.txt of a C/C++ project - 0.0.7.\n\npositional arguments: input_dir The base directory of C/C++ project.\n\noptional arguments: -h, \u2013help show this help message and exit\n\n3. Configuration File\n---------------------\n\nYou can create a json file for each directory of project directory tree\nto configure how ``cmwalk`` to generate CMakeLists.txt. The\nconfiguration filename of ``cmwalk`` is ``cmwalk.json``.\n\nIf there is no ``cmwalk.json`` in a directory of project directory tree, then all the files and\nsubdirectories of that directory will be parsed for CMakeLists.txt generation.\n\n3.1 Supported properties of ``cmwalk.json``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  **cmakeToolchainFile**\n\n   Specifying the toolchain file of the used compiler for current\n   project. You can also set the used toolchain file by invoking\n   ``cmake`` with the command line parameter\n   ``-DCMAKE_TOOLCHAIN_FILE=path/to/file``.\n\n   Refer cmake documentation\n   `cmake-toolchains(7) <https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html>`__\n   for the details.\n\n   Example:\n\n   .. code:: json\n\n        {\n            \"cmakeToolchainFile\": \"gcc_arm_none_eabi_toolchain.cmake\"\n        }\n\n   For above example, ``cmwalk`` will generate following command before ``project`` command to set the used toolchain.\n\n   .. code:: cmake\n\n        # set the toolchain file.\n        # toolchain file should be set before \"project\" command.\n        # the toolchain file can also be set via \"cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file\".\n        set(CMAKE_TOOLCHAIN_FILE gcc_arm_none_eabi_toolchain.cmake)\n\n   An example of toolchain file:\n\n   .. code:: cmake\n\n       # refer https://cmake.org/Wiki/CMake_Cross_Compiling\n       #include(CMakeForceCompiler)    # cmake_force_c_compiler and cmake_force_cxx_compiler are deprecated.\n\n       set(CMAKE_SYSTEM_NAME Generic)\n       set(CMAKE_SYSTEM_VERSION 1)\n       set(CMAKE_SYSTEM_PROCESSOR \"armv7-m\")\n\n\n       # refer https://cmake.org/pipermail/cmake-developers/2016-February/027871.html\n       # about how to solve this problem: \"arm-none-eabi-gcc.exe\" is not able to compile a simple test program.\n       set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\n\n       # find the cross compiler and associated tools that we need:\n       find_program(ARM_NONE_EABI_GCC arm-none-eabi-gcc)\n       find_program(ARM_NONE_EABI_GPP arm-none-eabi-g++)\n       find_program(ARM_NONE_EABI_OBJCOPY arm-none-eabi-objcopy)\n\n\n       macro(gcc_program_notfound progname)\n           message(\"**************************************************************************\\n\")\n           message(\" ERROR: the arm gcc program ${progname} could not be found\\n\")\n           if(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Windows\" OR CMAKE_HOST_SYSTEM_NAME STREQUAL \"Linux\")\n               message(\" you can install the ARM GCC embedded compiler tools from:\")\n               message(\" https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\")\n           elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Darwin\")\n               message(\" it is included in the arm-none-eabi-gcc package that you can install\")\n               message(\" with homebrew:\\n\")\n               message(\"   brew tap ARMmbed/homebrew-formulae\")\n               message(\"   brew install arm-none-eabi-gcc\")\n           endif()\n           message(\"\\n**************************************************************************\")\n           message(FATAL_ERROR \"missing program prevents build\")\n           return()\n       endmacro(gcc_program_notfound)\n\n       if(NOT ARM_NONE_EABI_GCC)\n           gcc_program_notfound(\"arm-none-eabi-gcc\")\n       endif()\n\n       if(NOT ARM_NONE_EABI_GPP)\n           gcc_program_notfound(\"arm-none-eabi-g++\")\n       endif()\n\n       if(NOT ARM_NONE_EABI_OBJCOPY)\n           gcc_program_notfound(\"arm-none-eabi-objcopy\")\n       endif()\n\n\n       set(CMAKE_C_COMPILER arm-none-eabi-gcc)\n       set(CMAKE_CXX_COMPILER arm-none-eabi-g++)\n\n       set(C_FAMILY_FLAGS_INIT \"-ffunction-sections -fdata-sections -g -fno-common -fmessage-length=0 --specs=nosys.specs --specs=nano.specs\")\n       set(CMAKE_C_FLAGS_INIT \"${C_FAMILY_FLAGS_INIT} -std=c99\")\n       set(CMAKE_CXX_FLAGS_INIT \"${C_FAMILY_FLAGS_INI} -std=c++11\")\n       set(CMAKE_ASM_FLAGS_INIT \"-fno-exceptions -fno-unwind-tables -x assembler-with-cpp\")\n       set(CMAKE_EXE_LINKER_FLAGS_INIT \"-Wl,-gc-sections,-print-memory-usage\")\n\n-  **cmakeCompilerOptionsFile**\n\n   Specifying a file that contains the additional compiler settings\n   to be included in the top-level CMakeLists.txt file.\n\n   Example:\n\n   .. code:: json\n\n       {\n           \"cmakeCompilerOptionsFile\": \"gcc_arm_none_eabi_opts.cmake\"\n       }\n\n   For above example, ``cmwalk`` will generate following command after ``project`` command to set the compiler options.\n\n   .. code:: cmake\n\n       # load and run the CMake code from the given file to specify project specific options.\n       include(gcc_arm_none_eabi_opts.cmake)\n\n   An example of compiler option files for `GNU Arm Embedded\n   Toolchain <https://developer.arm.com/open-source/gnu-toolchain/gnu-rm>`__:\n\n   .. code:: cmake\n\n       set(EXTRA_COMMON_FLAGS \"-mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -DUSE_HAL_DRIVER -DSTM32F429xx\")\n       set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${EXTRA_COMMON_FLAGS}\")\n       set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${EXTRA_COMMON_FLAGS}\")\n\n       set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16\")\n\n       set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/app/STM32F429ZITx_FLASH.ld)\n       set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-Map=${CMAKE_BINARY_DIR}/${PROJECT_NAME}.map -T${LINKER_SCRIPT}\")\n\n-  **addToCompilerIncludeDirectories**\n\n   A flag to control if current directory should be added to the include directories of compiler.\n\n   The default option is true when ``addToCompilerIncludeDirectories`` does not exist.\n\n   An example of not adding current directory to include directories of compiler.\n\n   .. code:: json\n\n       {\n            \"addToCompilerIncludeDirectories\": false\n       }\n\n-  **sourceDirectories**\n\n   A list of source directories.\n\n   If ``sourceDirectories`` is specified in ``cmwalk.json``, then only\n   the specified directories will be included for parsing, other\n   directories will be excluded. If ``sourceDirectories`` does not exist\n   but ``ignoredDirectories`` exist, then all the directories except\n   those specified by ``ignoredDirectories`` will be excluded.\n\n   An example of specifying the source subdirectories for searching the\n   source files:\n\n   .. code:: json\n\n       {\n            \"sourceDirectories\": [\"app\", \"libs\"]\n       }\n\n-  **ignoredDirectories** - A list of ignored directories.\n\n   ``sourceDirectories`` property has higher priority than ``ignoredDirectories``\n   property. If both of ``sourceDirectories`` and ``ignoredDirectories`` properties\n   are specified in ``cmwalk.json``, ``ignoredDirectories`` property has no\n   effect.\n\n   An example of excluding subdirectories for searching the source\n   files:\n\n   .. code:: json\n\n       {\n            \"ignoredDirectories\": [\"docs\"]\n       }\n\n-  **ignoredFiles** - A list of ignored files.\n\n   An example of excluding a file from ``cmake`` build system:\n\n   .. code:: json\n\n       {\n            \"ignoredFiles\": [\"cfg.h.template\"]\n       }\n\n\n4. Example of generated CMakeLists.txt\n--------------------------------------\n\nThis is an example of generated top-level ``CMakeLists.txt``:\n\n.. code:: cmake\n\n    cmake_minimum_required(VERSION 3.9)\n\n    # set the toolchain file.\n    # toolchain file should be set before \"project\" command.\n    # the toolchain file can also be set via \"cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file\".\n    set(CMAKE_TOOLCHAIN_FILE gcc_arm_none_eabi_toolchain.cmake)\n\n    project(nucleo_f429zi_freertos_lwip)\n    enable_language(C CXX ASM)\n\n    # load and run the CMake code from the given file to specify project specific options.\n    include(gcc_arm_none_eabi_opts.cmake)\n\n\n    # export the executable target through a variable to CMakeLists.txt files in subdirectories.\n    # update the dependent sources.\n    add_executable(nucleo_f429zi_freertos_lwip.elf\n        \"\"\n    )\n\n    if (${LINK_SCRIPT})\n        set_target_properties(nucleo_f429zi_freertos_lwip.elf PROPERTIES LINK_DEPENDS ${LINKER_SCRIPT})\n    endif()\n\n\n    # export the name of executable target via a variable to CMakeLists.txt files in subdirectories.\n    set(CURRENT_EXE_NAME ${PROJECT_NAME}.elf)\n    # load and run the CMake code from subdirectories for current target.\n    include(app/CMakeLists.txt)\n    include(libs/CMakeLists.txt)\n\n    # if compiler is GNU gcc/g++, then generate *.bin & *.hex files.\n    if (\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\")\n        # generate the hex file from the built target.\n        set(HEX_FILE ${PROJECT_NAME}.hex)\n        add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD\n            COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}\n            COMMENT \"Building ${HEX_FILE}...\")\n\n        # generate the bin file from the built target.\n        set(BIN_FILE ${PROJECT_NAME}.bin)\n        add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD\n            COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}\n            COMMENT \"Building ${BIN_FILE}...\")\n    endif()\n\n5. References\n-------------\n\n1. `Enhanced source file handling with target_sources() \u2013\n   Crascit <https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/>`__\n2. `CLion for embedded development \\| CLion\n   Blog <https://blog.jetbrains.com/clion/2016/06/clion-for-embedded-development/>`__\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maxpeng/cmWalk", "keywords": "cmake", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cmwalk", "package_url": "https://pypi.org/project/cmwalk/", "platform": "", "project_url": "https://pypi.org/project/cmwalk/", "project_urls": {"Homepage": "https://github.com/maxpeng/cmWalk"}, "release_url": "https://pypi.org/project/cmwalk/0.1.0/", "requires_dist": ["jinja2", "walkdir"], "requires_python": "", "summary": "A python script to walk subdirectories of a C/C++ project of embedded system to generate CMakeLists.txt files for building the executable.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>1. Introduction</h2>\n<p><tt>cmWalk</tt> is a python script to walk the directory tree of a C/C++\nproject of embedded system to generate CMakeLists.txt files for building\nthe executable.</p>\n</div>\n<div id=\"usage\">\n<h2>2. Usage</h2>\n<p>usage: cmwalk.py [-h] input_dir</p>\n<p>A python script to generate CMakeLists.txt of a C/C++ project - 0.0.7.</p>\n<p>positional arguments: input_dir The base directory of C/C++ project.</p>\n<p>optional arguments: -h, \u2013help show this help message and exit</p>\n</div>\n<div id=\"configuration-file\">\n<h2>3. Configuration File</h2>\n<p>You can create a json file for each directory of project directory tree\nto configure how <tt>cmwalk</tt> to generate CMakeLists.txt. The\nconfiguration filename of <tt>cmwalk</tt> is <tt>cmwalk.json</tt>.</p>\n<p>If there is no <tt>cmwalk.json</tt> in a directory of project directory tree, then all the files and\nsubdirectories of that directory will be parsed for CMakeLists.txt generation.</p>\n<div id=\"supported-properties-of-cmwalk-json\">\n<h3>3.1 Supported properties of <tt>cmwalk.json</tt></h3>\n<ul>\n<li><p><strong>cmakeToolchainFile</strong></p>\n<p>Specifying the toolchain file of the used compiler for current\nproject. You can also set the used toolchain file by invoking\n<tt>cmake</tt> with the command line parameter\n<tt><span class=\"pre\">-DCMAKE_TOOLCHAIN_FILE=path/to/file</span></tt>.</p>\n<p>Refer cmake documentation\n<a href=\"https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html\" rel=\"nofollow\">cmake-toolchains(7)</a>\nfor the details.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"cmakeToolchainFile\"</span><span class=\"p\">:</span> <span class=\"s2\">\"gcc_arm_none_eabi_toolchain.cmake\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For above example, <tt>cmwalk</tt> will generate following command before <tt>project</tt> command to set the used toolchain.</p>\n<pre><span class=\"c\"># set the toolchain file.\n# toolchain file should be set before \"project\" command.\n# the toolchain file can also be set via \"cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file\".\n</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_TOOLCHAIN_FILE</span> <span class=\"s\">gcc_arm_none_eabi_toolchain.cmake</span><span class=\"p\">)</span>\n</pre>\n<p>An example of toolchain file:</p>\n<pre><span class=\"c\"># refer https://cmake.org/Wiki/CMake_Cross_Compiling\n#include(CMakeForceCompiler)    # cmake_force_c_compiler and cmake_force_cxx_compiler are deprecated.\n</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_SYSTEM_NAME</span> <span class=\"s\">Generic</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_SYSTEM_VERSION</span> <span class=\"s\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_SYSTEM_PROCESSOR</span> <span class=\"s2\">\"armv7-m\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c\"># refer https://cmake.org/pipermail/cmake-developers/2016-February/027871.html\n# about how to solve this problem: \"arm-none-eabi-gcc.exe\" is not able to compile a simple test program.\n</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_TRY_COMPILE_TARGET_TYPE</span> <span class=\"s\">STATIC_LIBRARY</span><span class=\"p\">)</span>\n\n<span class=\"c\"># find the cross compiler and associated tools that we need:\n</span><span class=\"nb\">find_program</span><span class=\"p\">(</span><span class=\"s\">ARM_NONE_EABI_GCC</span> <span class=\"s\">arm-none-eabi-gcc</span><span class=\"p\">)</span>\n<span class=\"nb\">find_program</span><span class=\"p\">(</span><span class=\"s\">ARM_NONE_EABI_GPP</span> <span class=\"s\">arm-none-eabi-g++</span><span class=\"p\">)</span>\n<span class=\"nb\">find_program</span><span class=\"p\">(</span><span class=\"s\">ARM_NONE_EABI_OBJCOPY</span> <span class=\"s\">arm-none-eabi-objcopy</span><span class=\"p\">)</span>\n\n\n<span class=\"nb\">macro</span><span class=\"p\">(</span><span class=\"s\">gcc_program_notfound</span> <span class=\"s\">progname</span><span class=\"p\">)</span>\n    <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\"**************************************************************************\\n\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\" ERROR: the arm gcc program ${progname} could not be found\\n\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">CMAKE_HOST_SYSTEM_NAME</span> <span class=\"s\">STREQUAL</span> <span class=\"s2\">\"Windows\"</span> <span class=\"s\">OR</span> <span class=\"s\">CMAKE_HOST_SYSTEM_NAME</span> <span class=\"s\">STREQUAL</span> <span class=\"s2\">\"Linux\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\" you can install the ARM GCC embedded compiler tools from:\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\" https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">elseif</span><span class=\"p\">(</span><span class=\"s\">CMAKE_HOST_SYSTEM_NAME</span> <span class=\"s\">STREQUAL</span> <span class=\"s2\">\"Darwin\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\" it is included in the arm-none-eabi-gcc package that you can install\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\" with homebrew:\\n\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\"   brew tap ARMmbed/homebrew-formulae\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\"   brew install arm-none-eabi-gcc\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">endif</span><span class=\"p\">()</span>\n    <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s2\">\"\\n**************************************************************************\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">message</span><span class=\"p\">(</span><span class=\"s\">FATAL_ERROR</span> <span class=\"s2\">\"missing program prevents build\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">return</span><span class=\"p\">()</span>\n<span class=\"nb\">endmacro</span><span class=\"p\">(</span><span class=\"s\">gcc_program_notfound</span><span class=\"p\">)</span>\n\n<span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">ARM_NONE_EABI_GCC</span><span class=\"p\">)</span>\n    <span class=\"nb\">gcc_program_notfound</span><span class=\"p\">(</span><span class=\"s2\">\"arm-none-eabi-gcc\"</span><span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n<span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">ARM_NONE_EABI_GPP</span><span class=\"p\">)</span>\n    <span class=\"nb\">gcc_program_notfound</span><span class=\"p\">(</span><span class=\"s2\">\"arm-none-eabi-g++\"</span><span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n<span class=\"nb\">if</span><span class=\"p\">(</span><span class=\"s\">NOT</span> <span class=\"s\">ARM_NONE_EABI_OBJCOPY</span><span class=\"p\">)</span>\n    <span class=\"nb\">gcc_program_notfound</span><span class=\"p\">(</span><span class=\"s2\">\"arm-none-eabi-objcopy\"</span><span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_C_COMPILER</span> <span class=\"s\">arm-none-eabi-gcc</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_CXX_COMPILER</span> <span class=\"s\">arm-none-eabi-g++</span><span class=\"p\">)</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">C_FAMILY_FLAGS_INIT</span> <span class=\"s2\">\"-ffunction-sections -fdata-sections -g -fno-common -fmessage-length=0 --specs=nosys.specs --specs=nano.specs\"</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_C_FLAGS_INIT</span> <span class=\"s2\">\"${C_FAMILY_FLAGS_INIT} -std=c99\"</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_CXX_FLAGS_INIT</span> <span class=\"s2\">\"${C_FAMILY_FLAGS_INI} -std=c++11\"</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_ASM_FLAGS_INIT</span> <span class=\"s2\">\"-fno-exceptions -fno-unwind-tables -x assembler-with-cpp\"</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_EXE_LINKER_FLAGS_INIT</span> <span class=\"s2\">\"-Wl,-gc-sections,-print-memory-usage\"</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p><strong>cmakeCompilerOptionsFile</strong></p>\n<p>Specifying a file that contains the additional compiler settings\nto be included in the top-level CMakeLists.txt file.</p>\n<p>Example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"cmakeCompilerOptionsFile\"</span><span class=\"p\">:</span> <span class=\"s2\">\"gcc_arm_none_eabi_opts.cmake\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For above example, <tt>cmwalk</tt> will generate following command after <tt>project</tt> command to set the compiler options.</p>\n<pre><span class=\"c\"># load and run the CMake code from the given file to specify project specific options.\n</span><span class=\"nb\">include</span><span class=\"p\">(</span><span class=\"s\">gcc_arm_none_eabi_opts.cmake</span><span class=\"p\">)</span>\n</pre>\n<p>An example of compiler option files for <a href=\"https://developer.arm.com/open-source/gnu-toolchain/gnu-rm\" rel=\"nofollow\">GNU Arm Embedded\nToolchain</a>:</p>\n<pre><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">EXTRA_COMMON_FLAGS</span> <span class=\"s2\">\"-mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -DUSE_HAL_DRIVER -DSTM32F429xx\"</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_C_FLAGS</span> <span class=\"s2\">\"${CMAKE_C_FLAGS} ${EXTRA_COMMON_FLAGS}\"</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_CXX_FLAGS</span> <span class=\"s2\">\"${CMAKE_CXX_FLAGS} ${EXTRA_COMMON_FLAGS}\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_ASM_FLAGS</span> <span class=\"s2\">\"${CMAKE_ASM_FLAGS} -mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">LINKER_SCRIPT</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_SOURCE_DIR</span><span class=\"o\">}</span><span class=\"s\">/app/STM32F429ZITx_FLASH.ld</span><span class=\"p\">)</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_EXE_LINKER_FLAGS</span> <span class=\"s2\">\"${CMAKE_EXE_LINKER_FLAGS} -Wl,-Map=${CMAKE_BINARY_DIR}/${PROJECT_NAME}.map -T${LINKER_SCRIPT}\"</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p><strong>addToCompilerIncludeDirectories</strong></p>\n<p>A flag to control if current directory should be added to the include directories of compiler.</p>\n<p>The default option is true when <tt>addToCompilerIncludeDirectories</tt> does not exist.</p>\n<p>An example of not adding current directory to include directories of compiler.</p>\n<pre><span class=\"p\">{</span>\n     <span class=\"nt\">\"addToCompilerIncludeDirectories\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li><p><strong>sourceDirectories</strong></p>\n<p>A list of source directories.</p>\n<p>If <tt>sourceDirectories</tt> is specified in <tt>cmwalk.json</tt>, then only\nthe specified directories will be included for parsing, other\ndirectories will be excluded. If <tt>sourceDirectories</tt> does not exist\nbut <tt>ignoredDirectories</tt> exist, then all the directories except\nthose specified by <tt>ignoredDirectories</tt> will be excluded.</p>\n<p>An example of specifying the source subdirectories for searching the\nsource files:</p>\n<pre><span class=\"p\">{</span>\n     <span class=\"nt\">\"sourceDirectories\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"app\"</span><span class=\"p\">,</span> <span class=\"s2\">\"libs\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li><p><strong>ignoredDirectories</strong> - A list of ignored directories.</p>\n<p><tt>sourceDirectories</tt> property has higher priority than <tt>ignoredDirectories</tt>\nproperty. If both of <tt>sourceDirectories</tt> and <tt>ignoredDirectories</tt> properties\nare specified in <tt>cmwalk.json</tt>, <tt>ignoredDirectories</tt> property has no\neffect.</p>\n<p>An example of excluding subdirectories for searching the source\nfiles:</p>\n<pre><span class=\"p\">{</span>\n     <span class=\"nt\">\"ignoredDirectories\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"docs\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n<li><p><strong>ignoredFiles</strong> - A list of ignored files.</p>\n<p>An example of excluding a file from <tt>cmake</tt> build system:</p>\n<pre><span class=\"p\">{</span>\n     <span class=\"nt\">\"ignoredFiles\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"cfg.h.template\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"example-of-generated-cmakelists-txt\">\n<h2>4. Example of generated CMakeLists.txt</h2>\n<p>This is an example of generated top-level <tt>CMakeLists.txt</tt>:</p>\n<pre><span class=\"nb\">cmake_minimum_required</span><span class=\"p\">(</span><span class=\"s\">VERSION</span> <span class=\"s\">3.9</span><span class=\"p\">)</span>\n\n<span class=\"c\"># set the toolchain file.\n# toolchain file should be set before \"project\" command.\n# the toolchain file can also be set via \"cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file\".\n</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CMAKE_TOOLCHAIN_FILE</span> <span class=\"s\">gcc_arm_none_eabi_toolchain.cmake</span><span class=\"p\">)</span>\n\n<span class=\"nb\">project</span><span class=\"p\">(</span><span class=\"s\">nucleo_f429zi_freertos_lwip</span><span class=\"p\">)</span>\n<span class=\"nb\">enable_language</span><span class=\"p\">(</span><span class=\"s\">C</span> <span class=\"s\">CXX</span> <span class=\"s\">ASM</span><span class=\"p\">)</span>\n\n<span class=\"c\"># load and run the CMake code from the given file to specify project specific options.\n</span><span class=\"nb\">include</span><span class=\"p\">(</span><span class=\"s\">gcc_arm_none_eabi_opts.cmake</span><span class=\"p\">)</span>\n\n\n<span class=\"c\"># export the executable target through a variable to CMakeLists.txt files in subdirectories.\n# update the dependent sources.\n</span><span class=\"nb\">add_executable</span><span class=\"p\">(</span><span class=\"s\">nucleo_f429zi_freertos_lwip.elf</span>\n    <span class=\"s2\">\"\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">if</span> <span class=\"p\">(</span><span class=\"o\">${</span><span class=\"nv\">LINK_SCRIPT</span><span class=\"o\">}</span><span class=\"p\">)</span>\n    <span class=\"nb\">set_target_properties</span><span class=\"p\">(</span><span class=\"s\">nucleo_f429zi_freertos_lwip.elf</span> <span class=\"s\">PROPERTIES</span> <span class=\"s\">LINK_DEPENDS</span> <span class=\"o\">${</span><span class=\"nv\">LINKER_SCRIPT</span><span class=\"o\">}</span><span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n\n\n<span class=\"c\"># export the name of executable target via a variable to CMakeLists.txt files in subdirectories.\n</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">CURRENT_EXE_NAME</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">.elf</span><span class=\"p\">)</span>\n<span class=\"c\"># load and run the CMake code from subdirectories for current target.\n</span><span class=\"nb\">include</span><span class=\"p\">(</span><span class=\"s\">app/CMakeLists.txt</span><span class=\"p\">)</span>\n<span class=\"nb\">include</span><span class=\"p\">(</span><span class=\"s\">libs/CMakeLists.txt</span><span class=\"p\">)</span>\n\n<span class=\"c\"># if compiler is GNU gcc/g++, then generate *.bin &amp; *.hex files.\n</span><span class=\"nb\">if</span> <span class=\"p\">(</span><span class=\"s2\">\"${CMAKE_C_COMPILER_ID}\"</span> <span class=\"s\">STREQUAL</span> <span class=\"s2\">\"GNU\"</span><span class=\"p\">)</span>\n    <span class=\"c\"># generate the hex file from the built target.\n</span>    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">HEX_FILE</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">.hex</span><span class=\"p\">)</span>\n    <span class=\"nb\">add_custom_command</span><span class=\"p\">(</span><span class=\"s\">TARGET</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">.elf</span> <span class=\"s\">POST_BUILD</span>\n        <span class=\"s\">COMMAND</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_OBJCOPY</span><span class=\"o\">}</span> <span class=\"s\">-O</span> <span class=\"s\">ihex</span> <span class=\"o\">$&lt;</span><span class=\"nv\">TARGET_FILE:${PROJECT_NAME}.elf</span><span class=\"o\">&gt;</span> <span class=\"o\">${</span><span class=\"nv\">HEX_FILE</span><span class=\"o\">}</span>\n        <span class=\"s\">COMMENT</span> <span class=\"s2\">\"Building ${HEX_FILE}...\"</span><span class=\"p\">)</span>\n\n    <span class=\"c\"># generate the bin file from the built target.\n</span>    <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">BIN_FILE</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">.bin</span><span class=\"p\">)</span>\n    <span class=\"nb\">add_custom_command</span><span class=\"p\">(</span><span class=\"s\">TARGET</span> <span class=\"o\">${</span><span class=\"nv\">PROJECT_NAME</span><span class=\"o\">}</span><span class=\"s\">.elf</span> <span class=\"s\">POST_BUILD</span>\n        <span class=\"s\">COMMAND</span> <span class=\"o\">${</span><span class=\"nv\">CMAKE_OBJCOPY</span><span class=\"o\">}</span> <span class=\"s\">-O</span> <span class=\"s\">binary</span> <span class=\"o\">$&lt;</span><span class=\"nv\">TARGET_FILE:${PROJECT_NAME}.elf</span><span class=\"o\">&gt;</span> <span class=\"o\">${</span><span class=\"nv\">BIN_FILE</span><span class=\"o\">}</span>\n        <span class=\"s\">COMMENT</span> <span class=\"s2\">\"Building ${BIN_FILE}...\"</span><span class=\"p\">)</span>\n<span class=\"nb\">endif</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"references\">\n<h2>5. References</h2>\n<ol>\n<li><a href=\"https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/\" rel=\"nofollow\">Enhanced source file handling with target_sources() \u2013\nCrascit</a></li>\n<li><a href=\"https://blog.jetbrains.com/clion/2016/06/clion-for-embedded-development/\" rel=\"nofollow\">CLion for embedded development | CLion\nBlog</a></li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 3520581, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "20a757b9da6a57978a6857cac4f31346", "sha256": "8de8731e01d73fef1446647de56989ba96b2cd4ec4e2b2735fc80e49258a2299"}, "downloads": -1, "filename": "cmwalk-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "20a757b9da6a57978a6857cac4f31346", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17618, "upload_time": "2017-12-22T00:51:40", "upload_time_iso_8601": "2017-12-22T00:51:40.953072Z", "url": "https://files.pythonhosted.org/packages/8f/5b/ad2d9a0c1888faebc5073ab8f12b8a01d50bfd7178eec004accc24f8aec7/cmwalk-0.0.6-py2.py3-none-any.whl", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "7927fb8e2c4f8957170fedc976229bd0", "sha256": "94293d4c42ecdc22eb4d5fa6281df936e1ac3d1f7d2f95d30fe5bdd27af2e17c"}, "downloads": -1, "filename": "cmwalk-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7927fb8e2c4f8957170fedc976229bd0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17883, "upload_time": "2017-12-24T06:48:55", "upload_time_iso_8601": "2017-12-24T06:48:55.910796Z", "url": "https://files.pythonhosted.org/packages/96/2a/492c9a2f618d5df7d7f5d46b85a3ecbd0d2f4ed14a24a667698b94678c8b/cmwalk-0.0.7-py2.py3-none-any.whl", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "563e160b3ea6f10328cd26399a947865", "sha256": "87698b04a4a30b99dcf0a649d1db784cfa2648d5cd144e5cf9d4511ac5bf0450"}, "downloads": -1, "filename": "cmwalk-0.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "563e160b3ea6f10328cd26399a947865", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15570, "upload_time": "2018-01-23T13:00:20", "upload_time_iso_8601": "2018-01-23T13:00:20.917679Z", "url": "https://files.pythonhosted.org/packages/6a/d1/85e533bf22c36c33737317ee51802fda5ba4cf43eb993fcd441a5be2960d/cmwalk-0.0.8-py2.py3-none-any.whl", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "c426d176c8b6ecf02ebe055e185909c6", "sha256": "f0cbe303d23eb03d879a44e7eac3f79f43d7afe3213143e58989acf828b62210"}, "downloads": -1, "filename": "cmwalk-0.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c426d176c8b6ecf02ebe055e185909c6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15572, "upload_time": "2018-01-24T00:34:10", "upload_time_iso_8601": "2018-01-24T00:34:10.180944Z", "url": "https://files.pythonhosted.org/packages/50/3f/5ed6983a2222e6eca9fe8b2be31221334a2bcad0beafa40cff2530e062f1/cmwalk-0.0.9-py2.py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d2e81aa7c5c03ccb581234f361ec2c11", "sha256": "bc841f9900f9cb13224602a9b55dc3b4b23835cb9aa959eaf997d41b4559c171"}, "downloads": -1, "filename": "cmwalk-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d2e81aa7c5c03ccb581234f361ec2c11", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15640, "upload_time": "2018-01-25T13:59:39", "upload_time_iso_8601": "2018-01-25T13:59:39.677085Z", "url": "https://files.pythonhosted.org/packages/a6/84/487f07f34277b08595ea359ab7753c5b2733cbda0b549686444733ec1590/cmwalk-0.1.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d2e81aa7c5c03ccb581234f361ec2c11", "sha256": "bc841f9900f9cb13224602a9b55dc3b4b23835cb9aa959eaf997d41b4559c171"}, "downloads": -1, "filename": "cmwalk-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d2e81aa7c5c03ccb581234f361ec2c11", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15640, "upload_time": "2018-01-25T13:59:39", "upload_time_iso_8601": "2018-01-25T13:59:39.677085Z", "url": "https://files.pythonhosted.org/packages/a6/84/487f07f34277b08595ea359ab7753c5b2733cbda0b549686444733ec1590/cmwalk-0.1.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:18:29 2020"}