{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# girder_geospatial\n[![CircleCI](https://circleci.com/gh/OpenGeoscience/girder_geospatial/tree/master.svg?style=svg)](https://circleci.com/gh/OpenGeoscience/girder_geospatial/tree/master)\n[![codecov](https://codecov.io/gh/OpenGeoscience/girder_geospatial/branch/master/graph/badge.svg)](https://codecov.io/gh/OpenGeoscience/girder_geospatial)\n\n## Installation\n1. [Install girder](https://girder.readthedocs.io/en/latest/installation.html).\n2. Install [gdal](http://gdal.org/) version 2 or higher on to your system.\n\n    * To install with a wheel, run:\n\n            pip install gdal -f https://manthey.github.io/large_image_wheels/\n\n\n    * If not installing with a wheel:\n        * Install gdal to your system with the instructions above\n        * Check system gdal version by running `gdal-config --version`\n        * Pip install the corresponding version of gdal\n\n3. Test your gdal installation by running\n```sh\npython -c \"import gdal\"\n```\n\n4. Install the geospatial plugin and desired types packages.\n```sh\npip install girder-geospatial\npip install girder-geospatial-raster \\\n            girder-geospatial-vector \\\n            girder-geospatial-grid\n```\n\n5. Enable Girder cache by adding following to your [girder config file](https://girder.readthedocs.io/en/latest/configuration.html):\n```sh\n[cache]\nenabled = True\ncache.global.backend = \"dogpile.cache.memory\"\ncache.request.backend = \"cherrypy_request\"\n```\n\n## Usage\n1. **Uploading a geospatial file**\n\n    After the plugin is enabled in Girder, simply upload a geospatial file that gdal or ogr can handle.\n    To see lists of supported formats see the [gdal](http://www.gdal.org/formats_list.html) and [ogr](http://www.gdal.org/ogr_formats.html) format documentation.\n    This plugin responds to the [upload file](https://github.com/OpenGeoscience/girder_geospatial/blob/master/server/__init__.py#L16-L17) event.  File uploads will trigger a handler setting geospatial metadata on the uploaded file's item automatically.\n\n2. **Creating geospatial metadata on an already existing item**\n\n    If you already have data in Girder, and you don't want to reupload your data. There is an\n    endpoint which takes an item id and creates geospatial metadata on the item.\n    ```sh\n    curl '{girderApiUrl}/item/{itemId}/geometa' -X PUT\n    ```\n    This endpoint will inspect the file and attach 'geometa' key to the given item.\n\n3. **Creating arbitrary geospatial metadata on an existing item**\n\n    Some users might want more control on what they are saving. The same endpoint in option 2 can be used\n    to create arbitrary metadata following the [base schema](https://github.com/OpenGeoscience/girder_geospatial/blob/master/geometa/schema/base.py#L29-L48).\n    In other words, as long as you have the required parameters that are defined in the base\n    schema, you are free to add your own additional data for your own purposes.\n    ```sh\n    curl '{girderApiUrl}/item/{itemId}/geometa?geometa={geospatialMetadata}' -X PUT\n    ```\n\n4. **Querying mongo for geospatial datasets**\n\n\tTo query mongo, use the following endpoint with required query parameters.\n\t```sh\n\tcurl '{girderApiUrl}/item/geometa?{necessaryQueryStringParameters} -X GET\n\t```\n\n\tThis endpoint accepts a number of geospatial queries, including:\n\t1. WKT geometry and relation\n\t2. Bounding box and relation\n\t3. Geojson geometry and relation\n\t4. Latitude, longitude and radius.\n\n\tWhen providing latitude, longitude, and radius, the relation will be always \"within\" as opposed to\n\t\"intersects\". This might create unexpected results. We recommend using options 1, 2 or 3\n\tabove.\n\n\tAlso, please note these options are mutually exclusive so you cannot pass both geojson and bounding\n\tbox options. The [Opensearch Geo Schema validators](https://github.com/OpenGeoscience/girder_geospatial/blob/add-endpoint-documentation/geometa/schema/opensearchgeo.py#L61-L147) will raise an exception if mutually exclusive\n\tparameters are passed.\n\n5. **Getting geometa from an item**\n\n   To get geospatial metadata on an item, call the following endpoint:\n   ```sh\n   curl '{girderApiUrl}/item/{itemId}/geometa' -X GET\n   ```\n\n## Vagrant Examples\nThere are currently [2 vagrant examples](https://github.com/OpenGeoscience/girder_geospatial/tree/master/devops/ansible/examples) to quickly get up and running.\nIf you are having problems installing this plugin check ansible playbooks for\n[ubuntu-16.04](https://github.com/OpenGeoscience/girder_geospatial/blob/master/devops/ansible/examples/ubuntu-16.04/playbook.yml) and\n[ubuntu-18.04](https://github.com/OpenGeoscience/girder_geospatial/blob/master/devops/ansible/examples/ubuntu-18.04/playbook.yml).\n\n## Running tests\n```sh\ncd geometa\npip install -r requirements-dev.txt\npytest -n 4\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OpenGeoscience/girder_geospatial", "keywords": "", "license": "", "maintainer": "Kitware, Inc.", "maintainer_email": "kitware@kitware.com", "name": "girder-geospatial", "package_url": "https://pypi.org/project/girder-geospatial/", "platform": "", "project_url": "https://pypi.org/project/girder-geospatial/", "project_urls": {"Homepage": "https://github.com/OpenGeoscience/girder_geospatial"}, "release_url": "https://pypi.org/project/girder-geospatial/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Generate metadata for various geospatial datasets", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>girder_geospatial</h1>\n<p><a href=\"https://circleci.com/gh/OpenGeoscience/girder_geospatial/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fdd0784d618bedd269429fcfcbcbb8945d956dc0/68747470733a2f2f636972636c6563692e636f6d2f67682f4f70656e47656f736369656e63652f6769726465725f67656f7370617469616c2f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/OpenGeoscience/girder_geospatial\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b16500487087d5bb2baae9b4034d1905ace0be1/68747470733a2f2f636f6465636f762e696f2f67682f4f70656e47656f736369656e63652f6769726465725f67656f7370617469616c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h2>Installation</h2>\n<ol>\n<li>\n<p><a href=\"https://girder.readthedocs.io/en/latest/installation.html\" rel=\"nofollow\">Install girder</a>.</p>\n</li>\n<li>\n<p>Install <a href=\"http://gdal.org/\" rel=\"nofollow\">gdal</a> version 2 or higher on to your system.</p>\n<ul>\n<li>\n<p>To install with a wheel, run:</p>\n<pre><code>  pip install gdal -f https://manthey.github.io/large_image_wheels/\n</code></pre>\n</li>\n<li>\n<p>If not installing with a wheel:</p>\n<ul>\n<li>Install gdal to your system with the instructions above</li>\n<li>Check system gdal version by running <code>gdal-config --version</code></li>\n<li>Pip install the corresponding version of gdal</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Test your gdal installation by running</p>\n</li>\n</ol>\n<pre>python -c <span class=\"s2\">\"import gdal\"</span>\n</pre>\n<ol>\n<li>Install the geospatial plugin and desired types packages.</li>\n</ol>\n<pre>pip install girder-geospatial\npip install girder-geospatial-raster <span class=\"se\">\\</span>\n            girder-geospatial-vector <span class=\"se\">\\</span>\n            girder-geospatial-grid\n</pre>\n<ol>\n<li>Enable Girder cache by adding following to your <a href=\"https://girder.readthedocs.io/en/latest/configuration.html\" rel=\"nofollow\">girder config file</a>:</li>\n</ol>\n<pre><span class=\"o\">[</span>cache<span class=\"o\">]</span>\n<span class=\"nv\">enabled</span> <span class=\"o\">=</span> True\ncache.global.backend <span class=\"o\">=</span> <span class=\"s2\">\"dogpile.cache.memory\"</span>\ncache.request.backend <span class=\"o\">=</span> <span class=\"s2\">\"cherrypy_request\"</span>\n</pre>\n<h2>Usage</h2>\n<ol>\n<li>\n<p><strong>Uploading a geospatial file</strong></p>\n<p>After the plugin is enabled in Girder, simply upload a geospatial file that gdal or ogr can handle.\nTo see lists of supported formats see the <a href=\"http://www.gdal.org/formats_list.html\" rel=\"nofollow\">gdal</a> and <a href=\"http://www.gdal.org/ogr_formats.html\" rel=\"nofollow\">ogr</a> format documentation.\nThis plugin responds to the <a href=\"https://github.com/OpenGeoscience/girder_geospatial/blob/master/server/__init__.py#L16-L17\" rel=\"nofollow\">upload file</a> event.  File uploads will trigger a handler setting geospatial metadata on the uploaded file's item automatically.</p>\n</li>\n<li>\n<p><strong>Creating geospatial metadata on an already existing item</strong></p>\n<p>If you already have data in Girder, and you don't want to reupload your data. There is an\nendpoint which takes an item id and creates geospatial metadata on the item.</p>\n<pre>curl <span class=\"s1\">'{girderApiUrl}/item/{itemId}/geometa'</span> -X PUT\n</pre>\n<p>This endpoint will inspect the file and attach 'geometa' key to the given item.</p>\n</li>\n<li>\n<p><strong>Creating arbitrary geospatial metadata on an existing item</strong></p>\n<p>Some users might want more control on what they are saving. The same endpoint in option 2 can be used\nto create arbitrary metadata following the <a href=\"https://github.com/OpenGeoscience/girder_geospatial/blob/master/geometa/schema/base.py#L29-L48\" rel=\"nofollow\">base schema</a>.\nIn other words, as long as you have the required parameters that are defined in the base\nschema, you are free to add your own additional data for your own purposes.</p>\n<pre>curl <span class=\"s1\">'{girderApiUrl}/item/{itemId}/geometa?geometa={geospatialMetadata}'</span> -X PUT\n</pre>\n</li>\n<li>\n<p><strong>Querying mongo for geospatial datasets</strong></p>\n<p>To query mongo, use the following endpoint with required query parameters.</p>\n<pre>curl <span class=\"err\">'</span><span class=\"o\">{</span>girderApiUrl<span class=\"o\">}</span>/item/geometa?<span class=\"o\">{</span>necessaryQueryStringParameters<span class=\"o\">}</span> -X GET\n</pre>\n<p>This endpoint accepts a number of geospatial queries, including:</p>\n<ol>\n<li>WKT geometry and relation</li>\n<li>Bounding box and relation</li>\n<li>Geojson geometry and relation</li>\n<li>Latitude, longitude and radius.</li>\n</ol>\n<p>When providing latitude, longitude, and radius, the relation will be always \"within\" as opposed to\n\"intersects\". This might create unexpected results. We recommend using options 1, 2 or 3\nabove.</p>\n<p>Also, please note these options are mutually exclusive so you cannot pass both geojson and bounding\nbox options. The <a href=\"https://github.com/OpenGeoscience/girder_geospatial/blob/add-endpoint-documentation/geometa/schema/opensearchgeo.py#L61-L147\" rel=\"nofollow\">Opensearch Geo Schema validators</a> will raise an exception if mutually exclusive\nparameters are passed.</p>\n</li>\n<li>\n<p><strong>Getting geometa from an item</strong></p>\n<p>To get geospatial metadata on an item, call the following endpoint:</p>\n<pre>curl <span class=\"s1\">'{girderApiUrl}/item/{itemId}/geometa'</span> -X GET\n</pre>\n</li>\n</ol>\n<h2>Vagrant Examples</h2>\n<p>There are currently <a href=\"https://github.com/OpenGeoscience/girder_geospatial/tree/master/devops/ansible/examples\" rel=\"nofollow\">2 vagrant examples</a> to quickly get up and running.\nIf you are having problems installing this plugin check ansible playbooks for\n<a href=\"https://github.com/OpenGeoscience/girder_geospatial/blob/master/devops/ansible/examples/ubuntu-16.04/playbook.yml\" rel=\"nofollow\">ubuntu-16.04</a> and\n<a href=\"https://github.com/OpenGeoscience/girder_geospatial/blob/master/devops/ansible/examples/ubuntu-18.04/playbook.yml\" rel=\"nofollow\">ubuntu-18.04</a>.</p>\n<h2>Running tests</h2>\n<pre><span class=\"nb\">cd</span> geometa\npip install -r requirements-dev.txt\npytest -n <span class=\"m\">4</span>\n</pre>\n\n          </div>"}, "last_serial": 5401263, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f923b649db2d32f848b0dd7efd982a21", "sha256": "277238a3ae2fa0c10326535d864d325aee5b76e38bd9ee743eafaf6c881a74cf"}, "downloads": -1, "filename": "girder-geospatial-0.1.0.zip", "has_sig": false, "md5_digest": "f923b649db2d32f848b0dd7efd982a21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21144, "upload_time": "2019-05-28T15:19:21", "upload_time_iso_8601": "2019-05-28T15:19:21.844965Z", "url": "https://files.pythonhosted.org/packages/f8/ee/8b9d1969d5900be83e374932ffac3a531d8a440cdb22f29541ee6370d5f4/girder-geospatial-0.1.0.zip", "yanked": false}], "0.1.0a1": [{"comment_text": "", "digests": {"md5": "ce88f492e86b2267c4389cd0f9233406", "sha256": "ce3fe9e068d8cc1583adef44f35543e32cf6c7f6cf8610ef136853b0018b88d6"}, "downloads": -1, "filename": "girder-geospatial-0.1.0a1.zip", "has_sig": false, "md5_digest": "ce88f492e86b2267c4389cd0f9233406", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7876, "upload_time": "2019-05-23T17:44:27", "upload_time_iso_8601": "2019-05-23T17:44:27.503901Z", "url": "https://files.pythonhosted.org/packages/7a/df/0de9a510453a09f88f66e7f7d8fcae9000e8c838c770d24f9c0fda23a7eb/girder-geospatial-0.1.0a1.zip", "yanked": false}], "0.1.0a2": [{"comment_text": "", "digests": {"md5": "cb0daf89f59e9a93c68e3dcfe8e4fc61", "sha256": "7248dbf663bd3adce3d2aa5c854b98df14e00298597c1d19432f73bba8c0dccc"}, "downloads": -1, "filename": "girder-geospatial-0.1.0a2.zip", "has_sig": false, "md5_digest": "cb0daf89f59e9a93c68e3dcfe8e4fc61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7888, "upload_time": "2019-05-23T18:01:06", "upload_time_iso_8601": "2019-05-23T18:01:06.582750Z", "url": "https://files.pythonhosted.org/packages/6e/89/7fa61a0db8e772913ff8c3a85f68ee572ad7c7386142244770d9de707284/girder-geospatial-0.1.0a2.zip", "yanked": false}], "0.1.0a3": [{"comment_text": "", "digests": {"md5": "fb8630c452cdfa2aacb7e31399149477", "sha256": "770717aee48c7b3cefcf5f8e76ab96e819b228561f04cf5bab82274933443885"}, "downloads": -1, "filename": "girder-geospatial-0.1.0a3.zip", "has_sig": false, "md5_digest": "fb8630c452cdfa2aacb7e31399149477", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7896, "upload_time": "2019-05-24T14:55:19", "upload_time_iso_8601": "2019-05-24T14:55:19.216806Z", "url": "https://files.pythonhosted.org/packages/33/70/b550e6c93d59ae48efe8808322ca336ac97648f5e2c9bf21e303837b5ae4/girder-geospatial-0.1.0a3.zip", "yanked": false}], "0.1.0a4": [{"comment_text": "", "digests": {"md5": "755545d740de984445d31fe483d9fac5", "sha256": "b2bc945986883f789693c7ff303ed68971b18bf64e19074fc594458156c0b961"}, "downloads": -1, "filename": "girder-geospatial-0.1.0a4.zip", "has_sig": false, "md5_digest": "755545d740de984445d31fe483d9fac5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7911, "upload_time": "2019-05-24T16:48:04", "upload_time_iso_8601": "2019-05-24T16:48:04.896600Z", "url": "https://files.pythonhosted.org/packages/29/06/6645d3e3d4d428b1f81a5828ae1297edfcc1c18d2b9916be6f5c8813e787/girder-geospatial-0.1.0a4.zip", "yanked": false}], "0.1.0a5": [{"comment_text": "", "digests": {"md5": "11040e273032974057648d17fd4f5ee6", "sha256": "3c619f5b54840d191308594b4ba41f6c974d33f237851e8c00d4bcfed4adf77c"}, "downloads": -1, "filename": "girder-geospatial-0.1.0a5.zip", "has_sig": false, "md5_digest": "11040e273032974057648d17fd4f5ee6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17279, "upload_time": "2019-05-24T17:03:22", "upload_time_iso_8601": "2019-05-24T17:03:22.221649Z", "url": "https://files.pythonhosted.org/packages/df/41/bed0f4381faf3b6b60764af6ed044783819151709f02189f4816ef1965e3/girder-geospatial-0.1.0a5.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "200d26b6dbd59b6e9e4794f4c6857de7", "sha256": "d89a1baecdeafceb9be4085fdab5046a02596f4f71cd64953575000fc8207725"}, "downloads": -1, "filename": "girder-geospatial-0.2.0.zip", "has_sig": false, "md5_digest": "200d26b6dbd59b6e9e4794f4c6857de7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19263, "upload_time": "2019-06-14T16:01:31", "upload_time_iso_8601": "2019-06-14T16:01:31.506372Z", "url": "https://files.pythonhosted.org/packages/0e/c5/352f42e76f9286f3cfa445f6a9109ce7b2f85f725318dcc93c81b3151b4e/girder-geospatial-0.2.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "200d26b6dbd59b6e9e4794f4c6857de7", "sha256": "d89a1baecdeafceb9be4085fdab5046a02596f4f71cd64953575000fc8207725"}, "downloads": -1, "filename": "girder-geospatial-0.2.0.zip", "has_sig": false, "md5_digest": "200d26b6dbd59b6e9e4794f4c6857de7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19263, "upload_time": "2019-06-14T16:01:31", "upload_time_iso_8601": "2019-06-14T16:01:31.506372Z", "url": "https://files.pythonhosted.org/packages/0e/c5/352f42e76f9286f3cfa445f6a9109ce7b2f85f725318dcc93c81b3151b4e/girder-geospatial-0.2.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:57:19 2020"}