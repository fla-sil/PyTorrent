{"info": {"author": "Alex Hall", "author_email": "alex.mojaki@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# dryenv\n\n[![Build Status](https://travis-ci.org/alexmojaki/dryenv.svg?branch=master)](https://travis-ci.org/alexmojaki/dryenv) [![Coverage Status](https://coveralls.io/repos/github/alexmojaki/dryenv/badge.svg?branch=master)](https://coveralls.io/github/alexmojaki/dryenv?branch=master) [![Supports Python versions 3.6+](https://img.shields.io/pypi/pyversions/dryenv.svg)](https://pypi.python.org/pypi/dryenv)\n\nSimple configuration with environment variables and pydantic, without repeating yourself!\n\n    pip install dryenv\n\n  * [Basic usage](#basic-usage)\n  * [Based on pydantic.](#based-on-pydantic)\n  * [Configuring DryEnv](#configuring-dryenv)\n  * [Additional features](#additional-features)\n  * [Usage with Django and PyCharm](#usage-with-django-and-pycharm)\n\n## Basic usage\n\nFor example, instead of writing:\n\n```python\n# settings.py\n\nimport os\n\nDATABASE_HOST = os.getenv(\"DATABASE_HOST\", \"localhost\")\nDATABASE_USERNAME = os.getenv(\"DATABASE_USERNAME\", \"admin\")\nDATABASE_PASSWORD = os.getenv(\"DATABASE_PASSWORD\", \"secretpassword\")\nDATABASE_TIMEOUT = int(os.getenv(\"DATABASE_TIMEOUT\", 10))\nDATABASE_PERSIST_CONNECTION = os.getenv(\"DATABASE_PERSIST_CONNECTION\", \"true\").lower() == \"true\"\n\n# database.py\n\nimport settings\n\nconnection = connect(\n    host=settings.DATABASE_HOST,\n    username=settings.DATABASE_USERNAME,\n    password=settings.DATABASE_PASSWORD,\n    timeout=settings.DATABASE_TIMEOUT,\n    persist_connection=settings.DATABASE_PERSIST_CONNECTION,\n)\n```\n\nwrite:\n\n```python\n# settings.py\n\nfrom dryenv import DryEnv\n\nclass DATABASE(DryEnv):\n    HOST = \"localhost\"\n    USERNAME = \"admin\"\n    PASSWORD = \"secretpassword\"\n    TIMEOUT = 10\n    PERSIST_CONNECTION = True\n\n# database.py\n\nfrom settings import DATABASE\n\nconnection = connect(\n    host=DATABASE.HOST,\n    username=DATABASE.USERNAME,\n    password=DATABASE.PASSWORD,\n    timeout=DATABASE.TIMEOUT,\n    persist_connection=DATABASE.PERSIST_CONNECTION,\n)\n```\n\nor even:\n\n```python\n# settings.py\n\nfrom dryenv import DryEnv\n\nclass DATABASE(DryEnv):\n    # Looking up environment variables is case-insensitive\n    host = \"localhost\"\n    username = \"admin\"\n    password = \"secretpassword\"\n    timeout = 10\n    persist_connection = True\n\n# database.py\n\nfrom settings import DATABASE\n\nconnection = connect(**DATABASE.dict())\n```\n\n## Based on pydantic.\n\n`DryEnv` is a thin wrapper around [`pydantic.BaseSettings`](https://pydantic-docs.helpmanual.io/usage/settings/), which does most of the heavy lifting. `DryEnv` makes things a little neater and more convenient by automatically:\n\n1. Setting `env_prefix` based on the class name, unless the class name is `Root` (case insensitive) in which case the prefix is empty.\n2. Instantiating the class to trigger the environment lookups.\n \nFor example, this:\n\n```python\nfrom dryenv import DryEnv\n\nclass DATABASE(DryEnv):\n    HOST = \"localhost\"\n    USERNAME = \"admin\"\n    PASSWORD = \"secretpassword\"\n    TIMEOUT = 10\n    PERSIST_CONNECTION = True\n```\n\nis roughly equivalent to:\n\n```python\nfrom pydantic import BaseSettings\n\nclass DATABASE(BaseSettings):\n    class Config:\n        env_prefix = \"DATABASE_\"\n\n    HOST = \"localhost\"\n    USERNAME = \"admin\"\n    PASSWORD = \"secretpassword\"\n    TIMEOUT = 10\n    PERSIST_CONNECTION = True\n\nDATABASE = DATABASE()\n```\n\nHere are the most important points about what pydantic provides:\n\n1. You can omit the default value and just declare a variable with a type annotation, e.g. `HOST: str`. This makes the setting required.\n2. Variables will be parsed based on their type, which is determined by the annotation or the default value.\n3. For most simple field types (such as int, float, str, etc.), the environment variable value is parsed the same way it would be if passed directly to the initialiser (as a string). Booleans are parsed more intelligently, [see here](https://pydantic-docs.helpmanual.io/usage/types/#booleans). Complex types like list, set, dict, and sub-models are populated from the environment by treating the environment variable's value as a JSON-encoded string.\n\nFor more information [read the pydantic documentation](https://pydantic-docs.helpmanual.io/usage/settings/).\n\nThis package could quite easily be part of pydantic itself. If you'd like that, [vote on the issue here](https://github.com/samuelcolvin/pydantic/issues/1450).\n\n## Configuring DryEnv\n\nYou can override the automatic `env_prefix` setting by either:\n\n- Naming your class `Root` (case insensitive) in which case the prefix is empty, or\n- Setting `env_prefix` as normal under the `Config` class.\n\nYou can turn off the automatic instantiation by setting `auto_init = False` in the `Config`.\n\nYou can instantiate `DryEnv` yourself with your own constructor arguments by simply calling it as if it were the class. You can also access the class itself as normal with `type()`.\n\n## Additional features\n\nThe instance method **`DryEnv.prefixed_dict()`** is similar to pydantic's `dict()`, but the `env_prefix` is included in the keys, so they match the original environment variable names.\n\nFor example:\n\n```python\nclass DATABASE(DryEnv):\n    HOST = \"localhost\"\n    USERNAME = \"admin\"\n\nassert DATABASE.dict() == {\"HOST\": \"localhost\", \"USERNAME\": \"admin\"}\nassert DATABASE.prefixed_dict() == {\"DATABASE_HOST\": \"localhost\", \"DATABASE_USERNAME\": \"admin\"}\n```\n\nThe function **`populate_globals()`** will search for instances of `DryEnv` in the global variables in the calling context and then update the global variables with the `prefixed_dict()` of those `DryEnv` isntances. For example, if you called `populate_globals()` after the example above, `DATABASE_HOST` and `DATABASE_USERNAME` would become global variables. This is useful in e.g. Django where settings need to be declared at the global level. You can pass your own dict for the function to use instead of the current global variables.\n\n## Usage with Django and PyCharm\n\nIf you use PyCharm with the Django integration, it's able to intelligently inspect and navigate to values in `django.conf.settings`...most of the time. For some reason a class declared in `settings.py` doesn't work, so you can't navigate to the definition of a `DryEnv` or autocomplete its values. To work around this, I suggest you:\n\n1. Declare appropriate settings in a different file e.g. `simple_settings.py`.\n2. Import values from there in your apps instead of `django.conf.settings` so that PyCharm understands them.\n3. In your `settings.py`, write `from simple_settings import *` and call `populate_globals()` in one of the settings files. This will allow Django and libraries to find settings like `DEBUG` and `SECRET_KEY` at the global level while letting you define them with `dryenv` and then forgetting about them.\n\nAlternatively, you can add the line `DATABASE = DATABASE` or `DATABASE = DATABASE()` and then PyCharm will recognise this as a normal variable instead of a class.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/alexmojaki/dryenv", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dryenv", "package_url": "https://pypi.org/project/dryenv/", "platform": "", "project_url": "https://pypi.org/project/dryenv/", "project_urls": {"Homepage": "http://github.com/alexmojaki/dryenv"}, "release_url": "https://pypi.org/project/dryenv/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Simple DRY configuration with environment variables and pydantic.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dryenv</h1>\n<p><a href=\"https://travis-ci.org/alexmojaki/dryenv\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88f515e0151b1bbb73846cbd28e1a4db2e808368/68747470733a2f2f7472617669732d63692e6f72672f616c65786d6f6a616b692f647279656e762e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/alexmojaki/dryenv?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2f27c63b33ad2699c6e1ed3058d0d7a114d159a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f616c65786d6f6a616b692f647279656e762f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/dryenv\" rel=\"nofollow\"><img alt=\"Supports Python versions 3.6+\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31c152f35d634c4e1ea1f3b2acc9a283eb6a0ad2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f647279656e762e737667\"></a></p>\n<p>Simple configuration with environment variables and pydantic, without repeating yourself!</p>\n<pre><code>pip install dryenv\n</code></pre>\n<ul>\n<li><a href=\"#basic-usage\" rel=\"nofollow\">Basic usage</a></li>\n<li><a href=\"#based-on-pydantic\" rel=\"nofollow\">Based on pydantic.</a></li>\n<li><a href=\"#configuring-dryenv\" rel=\"nofollow\">Configuring DryEnv</a></li>\n<li><a href=\"#additional-features\" rel=\"nofollow\">Additional features</a></li>\n<li><a href=\"#usage-with-django-and-pycharm\" rel=\"nofollow\">Usage with Django and PyCharm</a></li>\n</ul>\n<h2>Basic usage</h2>\n<p>For example, instead of writing:</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">DATABASE_HOST</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"DATABASE_HOST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">)</span>\n<span class=\"n\">DATABASE_USERNAME</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"DATABASE_USERNAME\"</span><span class=\"p\">,</span> <span class=\"s2\">\"admin\"</span><span class=\"p\">)</span>\n<span class=\"n\">DATABASE_PASSWORD</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"DATABASE_PASSWORD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"secretpassword\"</span><span class=\"p\">)</span>\n<span class=\"n\">DATABASE_TIMEOUT</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"DATABASE_TIMEOUT\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">DATABASE_PERSIST_CONNECTION</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s2\">\"DATABASE_PERSIST_CONNECTION\"</span><span class=\"p\">,</span> <span class=\"s2\">\"true\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"true\"</span>\n\n<span class=\"c1\"># database.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">settings</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASE_HOST</span><span class=\"p\">,</span>\n    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASE_USERNAME</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASE_PASSWORD</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASE_TIMEOUT</span><span class=\"p\">,</span>\n    <span class=\"n\">persist_connection</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASE_PERSIST_CONNECTION</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>write:</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dryenv</span> <span class=\"kn\">import</span> <span class=\"n\">DryEnv</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DATABASE</span><span class=\"p\">(</span><span class=\"n\">DryEnv</span><span class=\"p\">):</span>\n    <span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span>\n    <span class=\"n\">USERNAME</span> <span class=\"o\">=</span> <span class=\"s2\">\"admin\"</span>\n    <span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"s2\">\"secretpassword\"</span>\n    <span class=\"n\">TIMEOUT</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">PERSIST_CONNECTION</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># database.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">settings</span> <span class=\"kn\">import</span> <span class=\"n\">DATABASE</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">DATABASE</span><span class=\"o\">.</span><span class=\"n\">HOST</span><span class=\"p\">,</span>\n    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">DATABASE</span><span class=\"o\">.</span><span class=\"n\">USERNAME</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">DATABASE</span><span class=\"o\">.</span><span class=\"n\">PASSWORD</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">DATABASE</span><span class=\"o\">.</span><span class=\"n\">TIMEOUT</span><span class=\"p\">,</span>\n    <span class=\"n\">persist_connection</span><span class=\"o\">=</span><span class=\"n\">DATABASE</span><span class=\"o\">.</span><span class=\"n\">PERSIST_CONNECTION</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>or even:</p>\n<pre><span class=\"c1\"># settings.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dryenv</span> <span class=\"kn\">import</span> <span class=\"n\">DryEnv</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DATABASE</span><span class=\"p\">(</span><span class=\"n\">DryEnv</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Looking up environment variables is case-insensitive</span>\n    <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s2\">\"admin\"</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s2\">\"secretpassword\"</span>\n    <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">persist_connection</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># database.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">settings</span> <span class=\"kn\">import</span> <span class=\"n\">DATABASE</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">DATABASE</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">())</span>\n</pre>\n<h2>Based on pydantic.</h2>\n<p><code>DryEnv</code> is a thin wrapper around <a href=\"https://pydantic-docs.helpmanual.io/usage/settings/\" rel=\"nofollow\"><code>pydantic.BaseSettings</code></a>, which does most of the heavy lifting. <code>DryEnv</code> makes things a little neater and more convenient by automatically:</p>\n<ol>\n<li>Setting <code>env_prefix</code> based on the class name, unless the class name is <code>Root</code> (case insensitive) in which case the prefix is empty.</li>\n<li>Instantiating the class to trigger the environment lookups.</li>\n</ol>\n<p>For example, this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dryenv</span> <span class=\"kn\">import</span> <span class=\"n\">DryEnv</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DATABASE</span><span class=\"p\">(</span><span class=\"n\">DryEnv</span><span class=\"p\">):</span>\n    <span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span>\n    <span class=\"n\">USERNAME</span> <span class=\"o\">=</span> <span class=\"s2\">\"admin\"</span>\n    <span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"s2\">\"secretpassword\"</span>\n    <span class=\"n\">TIMEOUT</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">PERSIST_CONNECTION</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>is roughly equivalent to:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSettings</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DATABASE</span><span class=\"p\">(</span><span class=\"n\">BaseSettings</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Config</span><span class=\"p\">:</span>\n        <span class=\"n\">env_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"DATABASE_\"</span>\n\n    <span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span>\n    <span class=\"n\">USERNAME</span> <span class=\"o\">=</span> <span class=\"s2\">\"admin\"</span>\n    <span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"s2\">\"secretpassword\"</span>\n    <span class=\"n\">TIMEOUT</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"n\">PERSIST_CONNECTION</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">DATABASE</span> <span class=\"o\">=</span> <span class=\"n\">DATABASE</span><span class=\"p\">()</span>\n</pre>\n<p>Here are the most important points about what pydantic provides:</p>\n<ol>\n<li>You can omit the default value and just declare a variable with a type annotation, e.g. <code>HOST: str</code>. This makes the setting required.</li>\n<li>Variables will be parsed based on their type, which is determined by the annotation or the default value.</li>\n<li>For most simple field types (such as int, float, str, etc.), the environment variable value is parsed the same way it would be if passed directly to the initialiser (as a string). Booleans are parsed more intelligently, <a href=\"https://pydantic-docs.helpmanual.io/usage/types/#booleans\" rel=\"nofollow\">see here</a>. Complex types like list, set, dict, and sub-models are populated from the environment by treating the environment variable's value as a JSON-encoded string.</li>\n</ol>\n<p>For more information <a href=\"https://pydantic-docs.helpmanual.io/usage/settings/\" rel=\"nofollow\">read the pydantic documentation</a>.</p>\n<p>This package could quite easily be part of pydantic itself. If you'd like that, <a href=\"https://github.com/samuelcolvin/pydantic/issues/1450\" rel=\"nofollow\">vote on the issue here</a>.</p>\n<h2>Configuring DryEnv</h2>\n<p>You can override the automatic <code>env_prefix</code> setting by either:</p>\n<ul>\n<li>Naming your class <code>Root</code> (case insensitive) in which case the prefix is empty, or</li>\n<li>Setting <code>env_prefix</code> as normal under the <code>Config</code> class.</li>\n</ul>\n<p>You can turn off the automatic instantiation by setting <code>auto_init = False</code> in the <code>Config</code>.</p>\n<p>You can instantiate <code>DryEnv</code> yourself with your own constructor arguments by simply calling it as if it were the class. You can also access the class itself as normal with <code>type()</code>.</p>\n<h2>Additional features</h2>\n<p>The instance method <strong><code>DryEnv.prefixed_dict()</code></strong> is similar to pydantic's <code>dict()</code>, but the <code>env_prefix</code> is included in the keys, so they match the original environment variable names.</p>\n<p>For example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">DATABASE</span><span class=\"p\">(</span><span class=\"n\">DryEnv</span><span class=\"p\">):</span>\n    <span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span>\n    <span class=\"n\">USERNAME</span> <span class=\"o\">=</span> <span class=\"s2\">\"admin\"</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">DATABASE</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s2\">\"HOST\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"s2\">\"USERNAME\"</span><span class=\"p\">:</span> <span class=\"s2\">\"admin\"</span><span class=\"p\">}</span>\n<span class=\"k\">assert</span> <span class=\"n\">DATABASE</span><span class=\"o\">.</span><span class=\"n\">prefixed_dict</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s2\">\"DATABASE_HOST\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"s2\">\"DATABASE_USERNAME\"</span><span class=\"p\">:</span> <span class=\"s2\">\"admin\"</span><span class=\"p\">}</span>\n</pre>\n<p>The function <strong><code>populate_globals()</code></strong> will search for instances of <code>DryEnv</code> in the global variables in the calling context and then update the global variables with the <code>prefixed_dict()</code> of those <code>DryEnv</code> isntances. For example, if you called <code>populate_globals()</code> after the example above, <code>DATABASE_HOST</code> and <code>DATABASE_USERNAME</code> would become global variables. This is useful in e.g. Django where settings need to be declared at the global level. You can pass your own dict for the function to use instead of the current global variables.</p>\n<h2>Usage with Django and PyCharm</h2>\n<p>If you use PyCharm with the Django integration, it's able to intelligently inspect and navigate to values in <code>django.conf.settings</code>...most of the time. For some reason a class declared in <code>settings.py</code> doesn't work, so you can't navigate to the definition of a <code>DryEnv</code> or autocomplete its values. To work around this, I suggest you:</p>\n<ol>\n<li>Declare appropriate settings in a different file e.g. <code>simple_settings.py</code>.</li>\n<li>Import values from there in your apps instead of <code>django.conf.settings</code> so that PyCharm understands them.</li>\n<li>In your <code>settings.py</code>, write <code>from simple_settings import *</code> and call <code>populate_globals()</code> in one of the settings files. This will allow Django and libraries to find settings like <code>DEBUG</code> and <code>SECRET_KEY</code> at the global level while letting you define them with <code>dryenv</code> and then forgetting about them.</li>\n</ol>\n<p>Alternatively, you can add the line <code>DATABASE = DATABASE</code> or <code>DATABASE = DATABASE()</code> and then PyCharm will recognise this as a normal variable instead of a class.</p>\n\n          </div>"}, "last_serial": 7143496, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "64ae282bda4220900d96666e4fa4c34b", "sha256": "f15f63c6fe752141891fd7cd55a29614d9022db20af7ca2c39aef130b725d02e"}, "downloads": -1, "filename": "dryenv-0.0.1.tar.gz", "has_sig": false, "md5_digest": "64ae282bda4220900d96666e4fa4c34b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3144, "upload_time": "2020-04-01T19:58:53", "upload_time_iso_8601": "2020-04-01T19:58:53.534491Z", "url": "https://files.pythonhosted.org/packages/80/d9/e0420d6780d2cee6dc5346c4fb35c9a3d4b2a3b7c68cf87355ebd3a98023/dryenv-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "70184b562bd051368596fb97392069dc", "sha256": "0a6944a4b2a253350b6d123b2a4915d99268291bd205b81be0904f8145c52d91"}, "downloads": -1, "filename": "dryenv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70184b562bd051368596fb97392069dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6121, "upload_time": "2020-05-01T08:45:43", "upload_time_iso_8601": "2020-05-01T08:45:43.989572Z", "url": "https://files.pythonhosted.org/packages/9c/12/b6fdc76b6d7dc3139fde66fd358d05e4ffffb5a89ec7559b6b2fecada3ff/dryenv-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "70184b562bd051368596fb97392069dc", "sha256": "0a6944a4b2a253350b6d123b2a4915d99268291bd205b81be0904f8145c52d91"}, "downloads": -1, "filename": "dryenv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "70184b562bd051368596fb97392069dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6121, "upload_time": "2020-05-01T08:45:43", "upload_time_iso_8601": "2020-05-01T08:45:43.989572Z", "url": "https://files.pythonhosted.org/packages/9c/12/b6fdc76b6d7dc3139fde66fd358d05e4ffffb5a89ec7559b6b2fecada3ff/dryenv-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:28 2020"}