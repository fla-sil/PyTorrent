{"info": {"author": "Chris McDonough, Florent Aide, Christopher Perkins", "author_email": "repoze-dev@lists.repoze.org", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"], "description": "Sample repoze.who middleware config and plugins for TG2.  This package\ndepends on repoze.who 0.8 or better.\n\nTrying it Out\n\n - Install TG2 into a virtualenv.\n\n - Install this package into the same virtualenv via \"setup.py\n   install\".\n\n - Create a TG2 quickstart project using the virtualenv's python.\n\n - In the development.ini of you project...\n\n - In the config.middleware module of your project, add the following\n   just under \"CUSTOM MIDDLEWARE HERE\"::\n\n     # CUSTOM MIDDLEWARE HERE (filtered by error handling middlewares)\n\n     from tgrepozewho.middleware import make_who_middleware\n     app = make_who_middleware(app, config, User, user_criterion, user_id_col,\n            DBSession)\n\n - Add the following definitions in you model.__init__::\n\ngroups_table = Table('tg_group', metadata,\n    Column('group_id', Integer, primary_key=True),\n    Column('group_name', Unicode(16), unique=True),\n    Column('display_name', Unicode(255)),\n    Column('created', DateTime, default=datetime.datetime.now)\n)\n\nusers_table = Table('tg_user', metadata,\n    Column('user_id', Integer, primary_key=True),\n    Column('user_name', Unicode(16), unique=True),\n    Column('email_address', Unicode(255), unique=True),\n    Column('display_name', Unicode(255)),\n    Column('password', Unicode(40)),\n    Column('created', DateTime, default=datetime.datetime.now)\n)\n\npermissions_table = Table('tg_permission', metadata,\n    Column('permission_id', Integer, primary_key=True),\n    Column('permission_name', Unicode(16), unique=True),\n    Column('description', Unicode(255))\n)\n\nuser_group_table = Table('tg_user_group', metadata,\n    Column('user_id', Integer, ForeignKey('tg_user.user_id',\n        onupdate=\"CASCADE\", ondelete=\"CASCADE\")),\n    Column('group_id', Integer, ForeignKey('tg_group.group_id',\n        onupdate=\"CASCADE\", ondelete=\"CASCADE\"))\n)\n\ngroup_permission_table = Table('tg_group_permission', metadata,\n    Column('group_id', Integer, ForeignKey('tg_group.group_id',\n        onupdate=\"CASCADE\", ondelete=\"CASCADE\")),\n    Column('permission_id', Integer, ForeignKey('tg_permission.permission_id',\n        onupdate=\"CASCADE\", ondelete=\"CASCADE\"))\n)\n\n# identity model\nclass Group(object):\n    \"\"\"An ultra-simple group definition.\n    \"\"\"\n    def __repr__(self):\n        return '<Group: name=%s>' % self.group_name\n\nclass User(object):\n    \"\"\"Reasonably basic User definition. Probably would want additional\n    attributes.\n    \"\"\"\n    def __repr__(self):\n        return '<User: email=\"%s\", display name=\"%s\">' % (\n                self.email_address, self.display_name)\n\n    def permissions(self):\n        perms = set()\n        for g in self.groups:\n            perms = perms | set(g.permissions)\n        return perms\n    permissions = property(permissions)\n\n    def by_email_address(klass, email):\n        \"\"\"A class method that can be used to search users\n        based on their email addresses since it is unique.\n        \"\"\"\n        session = DBSession()\n        return session.query(klass).filter(klass.email_address==email).first()\n\n    by_email_address = classmethod(by_email_address)\n\n    def by_user_name(klass, username):\n        \"\"\"A class method that permits to search users\n        based on their user_name attribute.\n        \"\"\"\n        session = DBSession()\n        return session.query(klass).filter(klass.user_name==username).first()\n\n    by_user_name = classmethod(by_user_name)\n\n    def _set_password(self, password):\n        \"\"\"encrypts password on the fly using the encryption\n        algo defined in the configuration\n        \"\"\"\n        algorithm = config.get('authorize.hashmethod', None)\n        self._password = self.__encrypt_password(algorithm, password)\n\n    def _get_password(self):\n        \"\"\"returns password\n        \"\"\"\n        return self._password\n\n    password = property(_get_password, _set_password)\n\n    def __encrypt_password(self, algorithm, password):\n        \"\"\"Hash the given password with the specified algorithm. Valid values\n        for algorithm are 'md5' and 'sha1'. All other algorithm values will\n        be essentially a no-op.\"\"\"\n        hashed_password = password\n\n        if isinstance(password, unicode):\n            password_8bit = password.encode('UTF-8')\n\n        else:\n            password_8bit = password\n\n        if \"md5\" == algorithm:\n            hashed_password = md5.new(password_8bit).hexdigest()\n\n        elif \"sha1\" == algorithm:\n            hashed_password = sha.new(password_8bit).hexdigest()\n\n        # TODO: re-add the possibility to provide own hasing algo\n        # here... just get the real config...\n\n        #elif \"custom\" == algorithm:\n        #    custom_encryption_path = turbogears.config.get(\n        #        \"identity.custom_encryption\", None )\n        #\n        #    if custom_encryption_path:\n        #        custom_encryption = turbogears.util.load_class(\n        #            custom_encryption_path)\n\n        #    if custom_encryption:\n        #        hashed_password = custom_encryption(password_8bit)\n\n        # make sure the hased password is an UTF-8 object at the end of the\n        # process because SQLAlchemy _wants_ a unicode object for Unicode columns\n        if not isinstance(hashed_password, unicode):\n            hashed_password = hashed_password.decode('UTF-8')\n\n        return hashed_password\n\n    def validate_password(self, password):\n        \"\"\"Check the password against existing credentials.\n        \"\"\"\n        algorithm = config.get('authorize.hashmethod', None)\n        return self.password == self.__encrypt_password(algorithm, password)\n\nclass Permission(object):\n    \"\"\"A relationship that determines what each Group can do\n    \"\"\"\n    pass\n\nmapper(User, users_table,\n        properties=dict(_password=users_table.c.password))\n\nmapper(Group, groups_table,\n        properties=dict(users=relation(User,\n                secondary=user_group_table, backref='groups')))\n\nmapper(Permission, permissions_table,\n        properties=dict(groups=relation(Group,\n                secondary=group_permission_table, backref='permissions')))\n\n\n - Add the following import in you controllers.root file::\n\n   from tgrepozewho import authorize\n\n - Add the following methods to your controllers.root:RootController\n   class::\n\n    @expose('whotg.templates.about')\n    @authorize.require(authorize.has_permission('manage'))\n    def manage_permission_only(self, **kw):\n        return dict(now=now, page='about')\n    \n    @expose('whotg.templates.about')\n    @authorize.require(authorize.is_user('editor'))\n    def editor_user_only(self, **kw):\n        return dict(now=now, page='about')\n\n    @expose('whotg.templates.login')\n    def login(self, **kw):\n        came_from = kw.get('came_from', '/')\n        return dict(now=now, page='login', header=lambda *arg: None,\n                    footer=lambda *arg: None, came_from=came_from)\n\n\n\n - Add the following template as \"login.html\" into your project's\n   'templates' directory::\n\n      <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n                            \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n      <html xmlns=\"http://www.w3.org/1999/xhtml\"\n            xmlns:py=\"http://genshi.edgewall.org/\"\n            xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n\n      <xi:include href=\"master.html\" />\n\n      <head>\n        <meta content=\"text/html; charset=UTF-8\" http-equiv=\"content-type\" py:replace=\"''\"/>\n        <title>Login Form</title>\n      </head>\n\n      <body>\n\n        <form action=\"/login_handler?came_from=${came_from}\" method=\"POST\">\n            Login: <input type=\"text\" name=\"login\"></input><br/>\n            Password: <input type=\"password\" name=\"password\"></input><br/>\n            <input type=\"submit\" name=\"submit\"/>\n        </form>\n\n      </body>\n      </html>\n\n - Setup you database config in the normal way by tweaking the development.ini file\n\n - Create the necessary tables by using::\n\n   paster setup-app development.ini\n\n - Create a user manually in your database\n\n - Create a group (any name), and a permission named \"manage\", link this permission\n   to the group you just created and also add a user to your group.\n\n - Create another user which is in no group but is named \"editor\"\n\n - Start the project's server via paster serve::\n\n   paster server --reload development.ini\n\n - Visit http://localhost:8080/editor_user_only in your browser.  You\n   will be presented with the login form.  The \"right\"\n   username/password combination is \"editor/editpass\" (this user has the\n   username 'editor').  Submitting this set of credentials will show\n   the about page.  Any other username/password combination will\n   result in the user being presented the login form again.  Note that\n   once you've obtained the credentials for the first time, if you\n   visit the /editor_user_only page again, you are not asked to\n   reauthenticate.  Log out forcibly by visiting\n   http://localhost:8080/logout_handler.\n\n - Visit http://localhost:8080/manage_permission_only in your browser.\n   You will be presented with the login form.  The \"right\"\n   username/password combination is \"manager/managepass\" (this user\n   possesses the manage permission).  Submitting this set of\n   credentials will show the about page.  Any other username/password\n   combination will result in the user being presented the login form\n   again.  Note that if you've authenticated as the 'editor' user, and\n   you visit the /manage_permission_only page, you will be logged out\n   and asked for credentials (editors cannot see this page).  Note\n   that once you've obtained the credentials for the first time, if\n   you visit the /manage_permission_only page again, you are not asked\n   to reauthenticate.  Log out forcibly by visiting\n   http://localhost:8080/logout_handler.\n\nMisc\n\n  If you start \"paster serve\" in a shell with the WHO_LOG environment\n  variable set to \"1\", you will see repoze.who logging output on the\n  console.\n\nNot yet finished\n\n  You can run the unit tests by using \"python setup.py test\" in the\n  source package.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.repoze.org", "keywords": "web application server wsgi tg2", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "tg.ext.repoze.who", "package_url": "https://pypi.org/project/tg.ext.repoze.who/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tg.ext.repoze.who/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.repoze.org"}, "release_url": "https://pypi.org/project/tg.ext.repoze.who/0.1-r26/", "requires_dist": null, "requires_python": null, "summary": "tg.ext.repoze.who are repoze.who plugins for TurboGears 2", "version": "0.1-r26", "yanked": false, "html_description": "<div class=\"project-description\">\n            Sample repoze.who middleware config and plugins for TG2.  This package<br>depends on repoze.who 0.8 or better.<br><br>Trying it Out<br><br> - Install TG2 into a virtualenv.<br><br> - Install this package into the same virtualenv via \"setup.py<br>   install\".<br><br> - Create a TG2 quickstart project using the virtualenv's python.<br><br> - In the development.ini of you project...<br><br> - In the config.middleware module of your project, add the following<br>   just under \"CUSTOM MIDDLEWARE HERE\"::<br><br>     # CUSTOM MIDDLEWARE HERE (filtered by error handling middlewares)<br><br>     from tgrepozewho.middleware import make_who_middleware<br>     app = make_who_middleware(app, config, User, user_criterion, user_id_col,<br>            DBSession)<br><br> - Add the following definitions in you model.__init__::<br><br>groups_table = Table('tg_group', metadata,<br>    Column('group_id', Integer, primary_key=True),<br>    Column('group_name', Unicode(16), unique=True),<br>    Column('display_name', Unicode(255)),<br>    Column('created', DateTime, default=datetime.datetime.now)<br>)<br><br>users_table = Table('tg_user', metadata,<br>    Column('user_id', Integer, primary_key=True),<br>    Column('user_name', Unicode(16), unique=True),<br>    Column('email_address', Unicode(255), unique=True),<br>    Column('display_name', Unicode(255)),<br>    Column('password', Unicode(40)),<br>    Column('created', DateTime, default=datetime.datetime.now)<br>)<br><br>permissions_table = Table('tg_permission', metadata,<br>    Column('permission_id', Integer, primary_key=True),<br>    Column('permission_name', Unicode(16), unique=True),<br>    Column('description', Unicode(255))<br>)<br><br>user_group_table = Table('tg_user_group', metadata,<br>    Column('user_id', Integer, ForeignKey('tg_user.user_id',<br>        onupdate=\"CASCADE\", ondelete=\"CASCADE\")),<br>    Column('group_id', Integer, ForeignKey('tg_group.group_id',<br>        onupdate=\"CASCADE\", ondelete=\"CASCADE\"))<br>)<br><br>group_permission_table = Table('tg_group_permission', metadata,<br>    Column('group_id', Integer, ForeignKey('tg_group.group_id',<br>        onupdate=\"CASCADE\", ondelete=\"CASCADE\")),<br>    Column('permission_id', Integer, ForeignKey('tg_permission.permission_id',<br>        onupdate=\"CASCADE\", ondelete=\"CASCADE\"))<br>)<br><br># identity model<br>class Group(object):<br>    \"\"\"An ultra-simple group definition.<br>    \"\"\"<br>    def __repr__(self):<br>        return '&lt;Group: name=%s&gt;' % self.group_name<br><br>class User(object):<br>    \"\"\"Reasonably basic User definition. Probably would want additional<br>    attributes.<br>    \"\"\"<br>    def __repr__(self):<br>        return '&lt;User: email=\"%s\", display name=\"%s\"&gt;' % (<br>                self.email_address, self.display_name)<br><br>    def permissions(self):<br>        perms = set()<br>        for g in self.groups:<br>            perms = perms | set(g.permissions)<br>        return perms<br>    permissions = property(permissions)<br><br>    def by_email_address(klass, email):<br>        \"\"\"A class method that can be used to search users<br>        based on their email addresses since it is unique.<br>        \"\"\"<br>        session = DBSession()<br>        return session.query(klass).filter(klass.email_address==email).first()<br><br>    by_email_address = classmethod(by_email_address)<br><br>    def by_user_name(klass, username):<br>        \"\"\"A class method that permits to search users<br>        based on their user_name attribute.<br>        \"\"\"<br>        session = DBSession()<br>        return session.query(klass).filter(klass.user_name==username).first()<br><br>    by_user_name = classmethod(by_user_name)<br><br>    def _set_password(self, password):<br>        \"\"\"encrypts password on the fly using the encryption<br>        algo defined in the configuration<br>        \"\"\"<br>        algorithm = config.get('authorize.hashmethod', None)<br>        self._password = self.__encrypt_password(algorithm, password)<br><br>    def _get_password(self):<br>        \"\"\"returns password<br>        \"\"\"<br>        return self._password<br><br>    password = property(_get_password, _set_password)<br><br>    def __encrypt_password(self, algorithm, password):<br>        \"\"\"Hash the given password with the specified algorithm. Valid values<br>        for algorithm are 'md5' and 'sha1'. All other algorithm values will<br>        be essentially a no-op.\"\"\"<br>        hashed_password = password<br><br>        if isinstance(password, unicode):<br>            password_8bit = password.encode('UTF-8')<br><br>        else:<br>            password_8bit = password<br><br>        if \"md5\" == algorithm:<br>            hashed_password = md5.new(password_8bit).hexdigest()<br><br>        elif \"sha1\" == algorithm:<br>            hashed_password = sha.new(password_8bit).hexdigest()<br><br>        # TODO: re-add the possibility to provide own hasing algo<br>        # here... just get the real config...<br><br>        #elif \"custom\" == algorithm:<br>        #    custom_encryption_path = turbogears.config.get(<br>        #        \"identity.custom_encryption\", None )<br>        #<br>        #    if custom_encryption_path:<br>        #        custom_encryption = turbogears.util.load_class(<br>        #            custom_encryption_path)<br><br>        #    if custom_encryption:<br>        #        hashed_password = custom_encryption(password_8bit)<br><br>        # make sure the hased password is an UTF-8 object at the end of the<br>        # process because SQLAlchemy _wants_ a unicode object for Unicode columns<br>        if not isinstance(hashed_password, unicode):<br>            hashed_password = hashed_password.decode('UTF-8')<br><br>        return hashed_password<br><br>    def validate_password(self, password):<br>        \"\"\"Check the password against existing credentials.<br>        \"\"\"<br>        algorithm = config.get('authorize.hashmethod', None)<br>        return self.password == self.__encrypt_password(algorithm, password)<br><br>class Permission(object):<br>    \"\"\"A relationship that determines what each Group can do<br>    \"\"\"<br>    pass<br><br>mapper(User, users_table,<br>        properties=dict(_password=users_table.c.password))<br><br>mapper(Group, groups_table,<br>        properties=dict(users=relation(User,<br>                secondary=user_group_table, backref='groups')))<br><br>mapper(Permission, permissions_table,<br>        properties=dict(groups=relation(Group,<br>                secondary=group_permission_table, backref='permissions')))<br><br><br> - Add the following import in you controllers.root file::<br><br>   from tgrepozewho import authorize<br><br> - Add the following methods to your controllers.root:RootController<br>   class::<br><br>    @expose('whotg.templates.about')<br>    @authorize.require(authorize.has_permission('manage'))<br>    def manage_permission_only(self, **kw):<br>        return dict(now=now, page='about')<br>    <br>    @expose('whotg.templates.about')<br>    @authorize.require(authorize.is_user('editor'))<br>    def editor_user_only(self, **kw):<br>        return dict(now=now, page='about')<br><br>    @expose('whotg.templates.login')<br>    def login(self, **kw):<br>        came_from = kw.get('came_from', '/')<br>        return dict(now=now, page='login', header=lambda *arg: None,<br>                    footer=lambda *arg: None, came_from=came_from)<br><br><br><br> - Add the following template as \"login.html\" into your project's<br>   'templates' directory::<br><br>      &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" <br>                            \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;<br>      &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"<br>            xmlns:py=\"http://genshi.edgewall.org/\"<br>            xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;<br><br>      &lt;xi:include href=\"master.html\" /&gt;<br><br>      &lt;head&gt;<br>        &lt;meta content=\"text/html; charset=UTF-8\" http-equiv=\"content-type\" py:replace=\"''\"/&gt;<br>        &lt;title&gt;Login Form&lt;/title&gt;<br>      &lt;/head&gt;<br><br>      &lt;body&gt;<br><br>        &lt;form action=\"/login_handler?came_from=${came_from}\" method=\"POST\"&gt;<br>            Login: &lt;input type=\"text\" name=\"login\"&gt;&lt;/input&gt;&lt;br/&gt;<br>            Password: &lt;input type=\"password\" name=\"password\"&gt;&lt;/input&gt;&lt;br/&gt;<br>            &lt;input type=\"submit\" name=\"submit\"/&gt;<br>        &lt;/form&gt;<br><br>      &lt;/body&gt;<br>      &lt;/html&gt;<br><br> - Setup you database config in the normal way by tweaking the development.ini file<br><br> - Create the necessary tables by using::<br><br>   paster setup-app development.ini<br><br> - Create a user manually in your database<br><br> - Create a group (any name), and a permission named \"manage\", link this permission<br>   to the group you just created and also add a user to your group.<br><br> - Create another user which is in no group but is named \"editor\"<br><br> - Start the project's server via paster serve::<br><br>   paster server --reload development.ini<br><br> - Visit http://localhost:8080/editor_user_only in your browser.  You<br>   will be presented with the login form.  The \"right\"<br>   username/password combination is \"editor/editpass\" (this user has the<br>   username 'editor').  Submitting this set of credentials will show<br>   the about page.  Any other username/password combination will<br>   result in the user being presented the login form again.  Note that<br>   once you've obtained the credentials for the first time, if you<br>   visit the /editor_user_only page again, you are not asked to<br>   reauthenticate.  Log out forcibly by visiting<br>   http://localhost:8080/logout_handler.<br><br> - Visit http://localhost:8080/manage_permission_only in your browser.<br>   You will be presented with the login form.  The \"right\"<br>   username/password combination is \"manager/managepass\" (this user<br>   possesses the manage permission).  Submitting this set of<br>   credentials will show the about page.  Any other username/password<br>   combination will result in the user being presented the login form<br>   again.  Note that if you've authenticated as the 'editor' user, and<br>   you visit the /manage_permission_only page, you will be logged out<br>   and asked for credentials (editors cannot see this page).  Note<br>   that once you've obtained the credentials for the first time, if<br>   you visit the /manage_permission_only page again, you are not asked<br>   to reauthenticate.  Log out forcibly by visiting<br>   http://localhost:8080/logout_handler.<br><br>Misc<br><br>  If you start \"paster serve\" in a shell with the WHO_LOG environment<br>  variable set to \"1\", you will see repoze.who logging output on the<br>  console.<br><br>Not yet finished<br><br>  You can run the unit tests by using \"python setup.py test\" in the<br>  source package.\n          </div>"}, "last_serial": 800517, "releases": {"0.1-r11": [{"comment_text": "", "digests": {"md5": "ef9217434b8ad0a11234393d3eddd792", "sha256": "0405611607e0f3117534616f6fef2290f2a1250b8fdcf1d92ef6307c8293fd86"}, "downloads": -1, "filename": "tg.ext.repoze.who-0.1_r11-py2.5.egg", "has_sig": false, "md5_digest": "ef9217434b8ad0a11234393d3eddd792", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 17187, "upload_time": "2008-06-01T22:19:48", "upload_time_iso_8601": "2008-06-01T22:19:48Z", "url": "https://files.pythonhosted.org/packages/3c/41/2e898980bd637995adb82c103a2533bf759ab64a66832a59c60437936427/tg.ext.repoze.who-0.1_r11-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7179123346935d780b46b00015436c6a", "sha256": "b9fd03490af6c28e95483b654e16026012d00496d11f281037c74312c39c3672"}, "downloads": -1, "filename": "tg.ext.repoze.who-0.1-r11.tar.gz", "has_sig": false, "md5_digest": "7179123346935d780b46b00015436c6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18982, "upload_time": "2008-06-01T22:19:46", "upload_time_iso_8601": "2008-06-01T22:19:46Z", "url": "https://files.pythonhosted.org/packages/ff/27/b584a085d05fa34d6206c19d2dcbab2e62769c7d0ddaf47b6e69022db3e5/tg.ext.repoze.who-0.1-r11.tar.gz", "yanked": false}], "0.1-r26": [{"comment_text": "", "digests": {"md5": "f3c16ec5651fab57c7355731f837d46c", "sha256": "c9558a69528e8c28bb8162e8315ca1f92db1a9a3a0cf0ab722de86f3bd76aecd"}, "downloads": -1, "filename": "tg.ext.repoze.who-0.1_r26-py2.5.egg", "has_sig": false, "md5_digest": "f3c16ec5651fab57c7355731f837d46c", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 17194, "upload_time": "2008-06-04T15:12:04", "upload_time_iso_8601": "2008-06-04T15:12:04Z", "url": "https://files.pythonhosted.org/packages/4c/10/5f0b7f9cad20da6619153b698226444c21848265191bb6390b0c3ca28573/tg.ext.repoze.who-0.1_r26-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "91c6166158fe7c2ceafe41d1abd8daf4", "sha256": "dbbc5323eadd4ef8ddaad83016158caf624276abf2c4296f27e1de1652d91672"}, "downloads": -1, "filename": "tg.ext.repoze.who-0.1-r26.tar.gz", "has_sig": false, "md5_digest": "91c6166158fe7c2ceafe41d1abd8daf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19009, "upload_time": "2008-06-04T15:12:03", "upload_time_iso_8601": "2008-06-04T15:12:03Z", "url": "https://files.pythonhosted.org/packages/3a/16/ad3f6e5ee2d1b7364505131914882f7056b2fb2ea4e98b1c97ff2754cef1/tg.ext.repoze.who-0.1-r26.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f3c16ec5651fab57c7355731f837d46c", "sha256": "c9558a69528e8c28bb8162e8315ca1f92db1a9a3a0cf0ab722de86f3bd76aecd"}, "downloads": -1, "filename": "tg.ext.repoze.who-0.1_r26-py2.5.egg", "has_sig": false, "md5_digest": "f3c16ec5651fab57c7355731f837d46c", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 17194, "upload_time": "2008-06-04T15:12:04", "upload_time_iso_8601": "2008-06-04T15:12:04Z", "url": "https://files.pythonhosted.org/packages/4c/10/5f0b7f9cad20da6619153b698226444c21848265191bb6390b0c3ca28573/tg.ext.repoze.who-0.1_r26-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "91c6166158fe7c2ceafe41d1abd8daf4", "sha256": "dbbc5323eadd4ef8ddaad83016158caf624276abf2c4296f27e1de1652d91672"}, "downloads": -1, "filename": "tg.ext.repoze.who-0.1-r26.tar.gz", "has_sig": false, "md5_digest": "91c6166158fe7c2ceafe41d1abd8daf4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19009, "upload_time": "2008-06-04T15:12:03", "upload_time_iso_8601": "2008-06-04T15:12:03Z", "url": "https://files.pythonhosted.org/packages/3a/16/ad3f6e5ee2d1b7364505131914882f7056b2fb2ea4e98b1c97ff2754cef1/tg.ext.repoze.who-0.1-r26.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:14 2020"}