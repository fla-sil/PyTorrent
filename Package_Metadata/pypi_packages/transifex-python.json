{"info": {"author": "Transifex", "author_email": "info@transifex.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6"], "description": "[![Build Status](https://travis-ci.org/transifex/transifex-python.svg?branch=master)](https://travis-ci.org/transifex/transifex-python)\n[![codecov](https://codecov.io/gh/transifex/transifex-python/branch/master/graph/badge.svg)](https://codecov.io/gh/transifex/transifex-python)\n\n# Transifex Python Toolkit\n\nTransifex Python Toolkit (referred as **the Toolkit** for brevity) is a collection of tools that allow you to easily localize your applications using Transifex (TX). The toolkit features fetching translations over the air (OTA) to your apps.\n\nUsing Transifex (TX) the localization workflow typically consists of the following steps:\n1. Find - extract the source strings in your source code\n2. Push them into a Transifex project\n3. In Transifex your source strings get translated by translators in target languages\n4. Retrieve a string translation of a target language from Transifex to display it\n\nTransifex Python Toolkit is used in steps 1, 2, 4 above. Possible usage scenarios:\n* [In a Django web application](#scenario-1-integrate-with-a-django-app) The toolkit is fully integrated in Django framework. It contains utilities to mark your source strings for translation, **retrieve the translated strings** and display translation in templates or views. It also provides special CLI commands for pushing to TX and even migrating your existing template code to the new syntax.\n* [In a Python application](#scenario-2-use-transifex-native-as-a-python-library) In other python applications or frameworks you can utilize the toolkit as a python library. The building blocks are there: you can push your source strings to TX and retrieve translations over the air to display them to your users.\n\n# Generic Features - Supported Functionality\nThis section refers to the generic functionality provided by the Toolkit. For implementation details refer to the specific usage scenario detailed in following sections.\n\n- **ICU message Format** (variables, plurals), context, metadata (comment, charlimit, tags) support\n- HTML escaping & un-escaping\n- Automatic fetch of translations over-the-air (OTA) via a background thread\n- Policies to handle missing translations or errors\n- Use of an intermediary service, [CDS](#hosting-translations-on-your-servers),to retrieve translations and an in-toolkit memory cache to serve them fast.\n\n# Installation\nInstall the Toolkit to your project\n```python\npip install transifex-python\n```\n\n## Transifex Setup\nBefore you begin using the Toolkit, you will also need an account in [Transifex](https://www.transifex.com) and a project.\nTo set a project compatible with this toolkit contact [support](https://www.transifex.com/contact/) and you\nwill be given a set of credentials (a public token and a secret), that you can use in your code for authentication.\nWe will refer to these credentials in the text below as:\n- `project_token` (used for pulling translations from Transifex)\n- `project_secret` (used for pushing source content to Transifex)\n\n\n# Use-case Scenarios\n\n## Scenario 1: Integrate with a Django app\n\n- [Setup](#setup)\n- [Quick guide](#quick-guide)\n- [Detailed usage](#detailed-usage)\n  * [Internationalization in template code](#internationalization-in-template-code)\n  * [Internationalization in Python code](#internationalization-in-python-code)\n  * [Fetching translations from Transifex](#fetching-translations-from-transifex)\n  * [Uploading source content to Transifex](#uploading-source-content-to-transifex)\n  * [Missing translations](#missing-translations)\n  * [Rendering errors](#rendering-errors)\n\n### Setup\n\nAdd the following entries in the settings file of your Django project.\n\nNote: The Transifex Python Toolkit uses some parts of Django's i18n framework, like the available languages and current language. Some of these settings will affect your project as a whole, while others are only used by the Transifex Toolkit.\n\n```python\nINSTALLED_APPS = [\n    ...,\n    'transifex.native.django',\n]\n\nLANGUAGE_CODE = 'en-us'  # replace with your project's source language\nUSE_I18N = True\nUSE_L10N = True\n\n# Replace with the proper values for the Transifex project token and secret,\n# as found in the Transifex UI under your project\nTRANSIFEX_TOKEN = <project_token>  # used for pulling translations from Transifex\nTRANSIFEX_SECRET = <project_secret>  # used for pushing source content to Transifex\nTRANSIFEX_SYNC_INTERVAL = <seconds> # used for defining the daemon running interval in seconds\n```\n\nA list of supported language codes is available [here](https://www.transifex.com/explore/languages/) and should\nbe declared in the `ll-cc` format, compatible with the `Accept-Language` HTTP header specification, for example\n`pt-br` instead of `pt_BR`.\n\n### Quick guide\n\nThese are the minimum steps required for testing the Transifex Toolkit with a Django project end-to-end:\n\n1. Add translation hooks in your templates\n2. Push the source content to Transifex\n3. Translate content on Transifex\n4. Display translated content to your users\n\n#### 1. Add translation hooks\n\nOpen a Django template file (e.g. an `.html` file) and add the following:\n```\n{% load transifex %}\n\n<p>{% t \"Hello!\" %}</p>\n<p>{% t \"I want to be translated.\" %}</p>\n```\n\n#### 2. Push source content to Transifex\n\nThis command will collect all translatable strings and push them to Transifex.\n```\n./manage.py transifex push\n```\n\n#### 3. Translate content on Transifex\n\nThe next step is for your translators to translate the strings in various languages using Transifex.\nWhen a translation is added on Transifex, it becomes available over-the-air on your app.\nPlease note that it can take a few minutes for the translations to become available on your app.\n\n#### 4. Display translated content\n\nThe Transifex Toolkit automatically displays translated content in the language currently selected in your Django project.\n\nIn order to allow changing the current language, you will need the following:\n\n##### 4.1 A language picker\n\nHere is an example of how you can add a language picker in your app.\nYou can add this on the same HTML file you added the translatable strings before, like so:\n\n```html\n{% load i18n %}\n{% load transifex %}\n\n<p>{% t \"Hello!\" %}</p>\n<p>{% t \"I want to be translated.\" %}</p>\n\n<form action=\"{% url 'set_language' %}\" method=\"post\">{% csrf_token %}\n    <input name=\"next\" type=\"hidden\" value=\"/\" />\n    <select name=\"language\">\n        {% get_current_language as LANGUAGE_CODE %}\n        {% get_available_languages as LANGUAGES %}\n        {% get_language_info_list for LANGUAGES as languages %}\n        {% for language in languages %}\n        <option value=\"{{ language.code }}\"{% if language.code == LANGUAGE_CODE %} selected{% endif %}>\n        {{ language.name_local }} ({{ language.code }})\n        </option>\n        {% endfor %}\n    </select>\n    <input type=\"submit\" value=\"Go\" />\n</form>\n```\n\nAdd the following route in your Project's routes, so that the `set_language` hook shown above will work when submitting the form.\n```python\nfrom django.conf.urls import url, include\n\nurlpatterns = [\n    ...,\n    url(r'^i18n/', include('django.conf.urls.i18n')),\n]\n```\nLast, add `'django.middleware.locale.LocaleMiddleware'` in your `settings.MIDDLEWARE` to enable the functionality.\n\nNow you can test the language picker. Each string will be shown translated in the current language.\n\nIf a translation is not available on Transifex, the source string will appear instead by default.\nThis behavior is configurable by defining a different [missing policy](#missing-translations).\nFor example, you can choose to show dummy content instead of the source string, a method often referred to as \u201cpseudo-localization\u201d.\nThis way, you can test the UI and allow strings that have not been translated to stand out.\n\n```python\nTRANSIFEX_MISSING_POLICY = 'transifex.native.rendering.PseudoTranslationPolicy'\n# _t(\"Hello, friend\") -> returns \"\u021e\u00ea\u013a\u013a\u00f8, \u0192\u0213\u0131\u00ea\u00f1\u0111\"\n```\n\n### Detailed usage\n\nYou can use the toolkit both inside Django templates as well as inside views.\n\n#### Internationalization in template code\n\nFirst of all, near the top of every template in which you want to include\nlocalized content, add the following template tag:\n\n```\n{% load transifex %}\n```\n\nTranslations in Django templates use one of two template tags, `{% t %}` and\n`{% ut %}`. They translate strings or variables that contain strings. The\nstrings themselves can be constant, or they can contain variables which can be\nresolved either from the parameters of the template tags or the context of the\ntemplate. The difference between the two tags will be addressed later, under\n[XML escaping](#XML-escaping).\n\n```html\n<p>{% t \"This is a great sentence.\" %}</p>\n<h2>{% t \"Welcome, {username}\" username=user.name %}</h2>\n<pre>{% t snippet.code  %}</pre>\n```\n\n##### Inline and Block syntax\n\nBoth template tags support two styles:\n\n1. The inline syntax\n\n   ```\n   {% t  <source>[|filters...] [key=param[|filters...]...] [as <var_name>] %}\n   {% ut <source>[|filters...] [key=param[|filters...]...] [as <var_name>] %}\n   ```\n\n2. The block syntax\n\n   ```\n   {% t  [|filters...] [key=param[|filters...]...] [as <var_name>] %}\n     <source>\n   {% endt %}\n   {% ut [|filters...] [key=param[|filters...]...] [as <var_name>] %}\n     <source>\n   {% endut %}\n   ```\n\n   In general, the outcome of the block syntax will be identical to the inline\n   syntax, if you had supplied the block contents as a literal argument. ie\n   this:\n\n   ```\n   {% t ... %}hello world{% endt %}\n   ```\n\n   should be identical to this:\n\n   ```\n   {% t \"hello world\" ... %}\n   ```\n\n   With the block syntax, however, you can include characters that would be\n   problematic with the inline syntax, like quotes (`\"`) or newlines.\n\n##### Plurals and other complex structures\n\nThe Transifex Toolkit supports the [ICU Message Format](http://userguide.icu-project.org/formatparse/messages).\n\nUsing the Message Format syntax you can support various types of logic, with\nthe same template tag:\n\n```\n{% t \"{num, plural, one {Found {num} user} other {Found {num} users} }\" num=total_users %}\n```\n\n```\n{% t num=total_users visit_type=user.visit.type username=user.name %}\n  {visit_type, select,\n    first {Welcome, {username}}\n    returning {Welcome back, {username}}\n  }\n{% endt %}\n```\n\nA more complex example, using nested rules, is the following:\n```\n{% t gender_of_host=\"female\" total_guests=current_event.total_guests host=current_event.host.user.name guest=guest.name %}\n  {gender_of_host, select,\n    female {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to her party.}\n        =2 {{host} invites {guest} and one other person to her party.}\n        other {{host} invites {guest} and # other people to her party.}\n      }\n    }\n    male {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to his party.}\n        =2 {{host} invites {guest} and one other person to his party.}\n        other {{host} invites {guest} and # other people to his party.}\n      }\n    }\n    other {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to their party.}\n        =2 {{host} invites {guest} and one other person to their party.}\n        other {{host} invites {guest} and # other people to their party.}\n      }\n    }\n  }\n{% endt %}\n```\n\n##### Parameters\n\nContext variables will be used to render ICU parameters in translations. For\nexample, if you have a context variable called `username`, you can render the\nfollowing:\n\n```\n{% t \"Hello {username}\" %}\n```\n\nYou can also pass variables as parameters to the tag:\n\n```\n{% t \"Hello {user_name}\" user_name=username %}\n```\n\nTemplate filters are fully supported, so you can use something like the\nfollowing in order to display the total number of items inside a list object or\ntransform a string to uppercase:\n\n```html\n{% t \"Found {total} errors.\" total=result.errors|length %}\n{% t \"PROJECT '{name}'\" name=project.name|upper %}\n```\n\nSeveral parameter keys can be used in order to annotate the string with\nmetadata that will be used in Transifex. The parameter keys that are recognized\nare: `_context`, `_comment`, `_charlimit` and `_tags`. `_context` and `_tags`\naccept a comma-separated list of strings.\n\n```\n{% t \"Contact us\" _context=\"Support page CTA\" _tags=\"important,footer\" %}\n```\n\nDefining context makes it possible to distinguish between two identical source\nstrings and disambiguate the translation.\n\n\n##### Saving the outcome to a variable\n\nUsing the `as <var_name>` suffix, instead of displaying the outcome of the\ntranslation, you will save it in a variable which you can later use however you\nlike:\n\n```\n{% t \"Your credit card was accepted\" as success_msg %}\n{% t \"Your credit card was declined\" as failure_msg %}\n{% if success %}\n    {{ success_msg }}\n{% else %}\n    {{ failure_msg }}\n{% endif %}\n```\n\nThis also works for block syntax:\n\n```\n{% t as text %}\n    Hello world\n{% endt %}\n{{ text }}\n```\n\n##### Applying filters to the source string\n\nApart from using filters for parameters, you can also apply them on the source\nstring:\n\n```\n{% t \"Hello {username}\"|capitalize %}\n{% t source_string|capitalize %}\n```\n\nThe important thing to note here is that the filter will be applied to the\n**translation**, not the source string. For example, if you had the following\ntranslations in French:\n\n```json\n{\n    \"hello\": \"bonjour\",\n    \"Hello\": \"I like pancakes\"\n}\n```\n\nand you translate to French using this tag:\n\n```\n{% t \"hello\"|capitalize %}\n```\n\nYou will get `Bonjour`. If the filter had been applied to the source string\nbefore a translation was looked up, then the second translation would have been\nmatched and you would have gotten `I like pancakes`.\n\nSource string filters work with block syntax as well, just make sure you\nprepend the filter(s) with `|`:\n\n```\n{% t |capitalize %}\n    hello world\n{% endt %}\n```\n\n##### XML escaping\n\nChoosing between the `{% t %}` or the `{% ut %}` tags will determine whether\nyou want to perform escaping on the **translation** (or the source string if a\ntranslation isn't available). Using `t` will apply escaping on the translation\nwhile `ut` will not.\n\nSo for example, if you use:\n\n```\n{% t '<a href=\"{url}\" title=\"help page\">click here</a>' %}\n```\n\nYour translators in Transifex will be presented with:\n\n```html\n<a href=\"{url}\" title=\"help page\">click here</a>\n```\n\nbut your application will actually render the XML-escaped version of the\ntranslation (or source string if a translation isn't found):\n\n```xml\n&lt;a href=&quot;https://some.url/&quot; title=&quot;\u03a3\u03b5\u03bb\u03af\u03b4\u03b1 \u03b2\u03bf\u03ae\u03b8\u03b5\u03b9\u03b1\u03c2&quot;&gt;\u039a\u03ac\u03bd\u03c4\u03b5 \u03ba\u03bb\u03b9\u03ba \u03b5\u03b4\u03ce&lt;/a&gt;\n```\n\nIf you want to avoid this, you should use the `{% ut %}` tag instead. Just keep\nin mind that your translators would be able to include malicious content in the\ntranslations, so make sure you have a proofreading process in place.\n\nEscaping of the ICU parameters is not affected by the choice of tag. If a\ncontext variable is used without specifying a parameter in the tag, then\nwhether the variable will be escaped or not depends on the choice of the\nautoescape setting, which is usually set to true. Otherwise, you can apply the\n`|safe` or `|escape` filters on the parameters to specify the behavior you\nwant. For example, assuming you have the following translation:\n\n```json\n{\"<b>hello</b> {var}\": \"<b>\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1</b> {var}\"}\n```\n\nand the following context variable:\n\n```json\n{\"var\": \"<b>world</b>\"}\n```\n\nyou can expect the following outcomes:\n\n| Template                                        | Result                                                 |\n| ----------------------------------------------- | ------------------------------------------------------ |\n| `{% t  \"<b>hello</b> {var}\" var=var\\|escape %}` | `&lt;b&gt;\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1&lt;/b&gt; &lt;b&gt;world&lt;/b&gt;` |\n| `{% t  \"<b>hello</b> {var}\" var=var\\|safe   %}` | `&lt;b&gt;\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1&lt;/b&gt; <b>world</b>`             |\n| `{% ut \"<b>hello</b> {var}\" var=var\\|escape %}` | `<b>\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1</b>             &lt;b&gt;world&lt;/b&gt;` |\n| `{% ut \"<b>hello</b> {var}\" var=var\\|safe   %}` | `<b>\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1</b>             <b>world</b>`             |\n\nBecause using the above two mechanisms (the choice of tag and applying\nescape-related filters to the parameters) gives you good control over escaping,\nthe outcome of the tag is always marked as _safe_ and applying escape-related\nfilters to it will not have any effect. This effectively means that the use of\n`|escape` or `|safe` as source string filters or as filters applied to a saved\ntranslation outcome will be ignored, ie the following examples in each column\nshould behave identically:\n\n| Source string filters                    | Saved variable filters                                     |\n| ---------------------------------------- | ---------------------------------------------------------- |\n| `{% t/ut <source_string> ... %}`         | `{% t/ut <source_string> ... as text %}{{ text }}`         |\n| `{% t/ut <source_string>\\|safe ... %}`   | `{% t/ut <source_string> ... as text %}{{ text\\|safe }}`   |\n| `{% t/ut <source_string>\\|escape ... %}` | `{% t/ut <source_string> ... as text %}{{ text\\|escape }}` |\n\n_Because of the complexity of the cases with regards to how escaping works, the\ntoolkit comes with a django management command that acts as a sandbox for all\ncombinations of tags, filters etc. You can invoke it with_\n`./manage.py transifex try-templatetag --interactive`\n\n##### Useful filters\n\n1. `escapejs`\n\n   This filter is provided by Django and is very useful when you want to set\n   translations as the values of javascript variables. Consider the following\n   example:\n\n   ```html\n   <script>var msg = '{% ut \"hello world\" %}';</script>\n   ```\n\n   If a translation has the single-quote (`'`) character in it, this would\n   break your javascript code as the browser would end up reading something\n   like:\n\n   ```html\n   <script>var msg = 'one ' two';</script>\n   ```\n\n   To counter this, you can use the `escapejs` filter:\n\n   ```html\n   <script>var msg = '{% ut \"hello world\"|escapejs %}';</script>\n   ```\n\n   In which case your browser would end up reading something like:\n\n   ```html\n   <script>var msg = 'one \\u0027 two';</script>\n   ```\n\n   which is the correct way to include a single-quote character in a javascript\n   string literal.\n\n2. `trimmed`\n\n   This is a filter included in our template library, so it will be available\n   to you since you included the library with `{% load transifex %}`. Its\n   purpose is to allow you to split a long source string into multiple lines\n   using the block syntax, without having the splitting appear in the\n   translation outcome. It essentially returns all non-empty lines of the\n   translation joined with a single space. So this:\n\n   ```\n   {% t |trimmed %}\n     First line\n     Second line\n   {% endt %}\n   ```\n\n   would be rendered as\n\n   ```\n   \u03a0\u03c1\u03ce\u03c4\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u0394\u03b5\u03cd\u03c4\u03b5\u03c1\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\n   ```\n\n\n#### Internationalizing in Python code\n\nIn order to mark translatable strings inside Python code, import a function and wrap your strings with it.\n\n```python\nfrom transifex.native.django import t\nfrom django.http import HttpResponse\n\ndef my_view(request):\n    output = t(\"Welcome aboard!\")\n    return HttpResponse(output)\n```\n\nAgain, ICU Message Format is supported, so you can use the same string syntax as in Django templates, and pass all variables as named arguments.\n\n```python\ntext = t(\"Welcome, {username}\", username=user.name)\ntext = t(\"Contact\", _context=\"support\")\n```\n\n```python\ntext = t(\n    \"{num, plural, \"\n    \"    one {There is {num} user in this team.} \"\n    \"    other {There are {num} users in this team.}\"\n    \"}\",\n    num=total_users,\n)\n```\n\n```python\ntext = t(\"\"\"\n  {gender_of_host, select,\n    female {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to her party.}\n        =2 {{host} invites {guest} and one other person to her party.}\n        other {{host} invites {guest} and # other people to her party.}\n      }\n    }\n    male {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to his party.}\n        =2 {{host} invites {guest} and one other person to his party.}\n        other {{host} invites {guest} and # other people to his party.}\n      }\n    }\n    other {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to their party.}\n        =2 {{host} invites {guest} and one other person to their party.}\n        other {{host} invites {guest} and # other people to their party.}\n      }\n    }\n  }\"\"\",\n  gender_of_host=\"female\",\n  total_guests=current_event.total_guests,\n  host=current_event.host.user.name,\n  guest=guest.name,\n)\n```\n\n##### Metadata\n\nAlong with the string and its contexts you can also send optional metadata that can support your localization flow:\n- `_comment`: A comment to the translators\n- `_charlimit`: The maximum length of characters for the translation\n- `_tags`: Comma separated _tags that accompany the source string\n\n```python\nt(\n    \"A string\",\n    _comment=\"A comment to the translators\",\n    _charlimit=30,\n    _tags=\"t1,t2\",\n)\n```\n\nIn total, the reserved keywords that have special meaning and cannot be used as variable placholders are the following:\n- `_context`\n- `_comment`\n- `_charlimit`\n- `_tags`\n\nLearn more on how metadata can improve the localization process\nby reading about [character limits](https://docs.transifex.com/translation/tools-in-the-editor#character-limits),\n[developer comments](https://docs.transifex.com/translation/tools-in-the-editor#string-instruction-and-developer-notes) and\n[tags](https://docs.transifex.com/translation/tools-in-the-editor#section-tags) in Transifex documentation.\n\n\n##### Escaping & unescaping strings\n\nThe `t()` method escapes HTML. If you want to display unescaped text, you can\nuse `ut()`. This way, the source & translation string will **not** be escaped,\nhowever any variables that replace placeholders in the string will be escaped.\nUse the method wisely, because otherwise, you might be prone to XSS attacks.\n\n```python\nfrom transifex.native.django import t, ut\nt('<script type=\"text/javascript\">alert({name})</script>', name='<b>Joe</b>')\n# Renders as &lt;script type=&quot;text/javascript&quot;&gt;alert(&lt;b&gt;Joe&lt;/b&gt;)&lt;/script&gt;\n\nut('<script type=\"text/javascript\">alert({name})</script>', name='<b>Joe</b>')\n# Renders as <script type=\"text/javascript\">alert(&lt;b&gt;Joe&lt;/b&gt;)</script>\n```\n\n#### Fetching translations from Transifex\n\nThe Django integration fetches translations **automatically** from Transifex continuously over-the-air (OTA), **without having to restart your server**.\n\nWhat actually happens is:\n\n* The first time the application starts, the integration populates its internal memory with the state of translations in Transifex.\n* A daemon (thread) runs in the background to periodically re-fetch translations & update the internal memory.\n\nThis functionality starts with your application. However, it does not start by default when running a Django shell or any `./manage.py <command>` commands, which means that in those cases by default translations will not be available on your application.\n\n##### Advanced\n\nTranslation are available over the air for your app when the Django server is running and listening for HTTP requests.\nHowever if you need to run Django shell or Django commands and have Transifex Toolkit provide localized content,\nyou can control this using the `FORCE_TRANSLATIONS_SYNC` environment variable,\nwhich will start the daemon and fetch translations periodically.\n\nSo, for example, if you want to run a Django shell with translations available & receive OTA updates you can do so by running:\n```python\nFORCE_TRANSLATIONS_SYNC=true ./manage.py shell\n```\n\n#### Uploading source content to Transifex\n\nAfter the strings have been marked either inside templates or Python code, you can push them to Transifex.\n\nIn order to be able to do so, first make sure your Transifex project secret is in your Django settings file,\nas described in the [setup section](#setup), and then simply run:\n\n```\n./manage.py transifex push\n```\n\nThis command works in two phases:\n1. First it goes through all files of the current directory (and subdirectories) and collects all translatable strings in memory\n2. Then it contacts Transifex and pushes the strings with all metadata to the project (and resource) that is associated with the token you have given during setup\n\nThis way, the source strings reach Transifex and become available for translation.\n\n#### Missing translations\n\nIf a translation on a specific locale is missing, by default the Transifex Toolkit will return the string in the source language. However, you can change that behavior by providing a different \"missing policy\".\n\nThe currently available options are:\n\n- Source String\n- Pseudo translation\n- Source string inside brackets\n- Source string with extra characters\n- A custom policy of yours\n- A combined policy\n\nYou can set the policy with a Django setting named `TRANSIFEX_MISSING_POLICY` and you could easily define a different policy for development and production environments.\n\n##### Source string (default)\n\nThis is the default policy, where the source string will appear when a translation is missing.\n\n```python\nTRANSIFEX_MISSING_POLICY = 'transifex.native.rendering.SourceStringPolicy'\n# _t(\"Hello, friend\") -> returns \"Hello, friend\"\n```\n\n##### Pseudo translation\n\nThis is a nice way to do translation QA during development, as pseudo-translated strings stand out and are easy to identify.\n\n```python\nTRANSIFEX_MISSING_POLICY = 'transifex.native.rendering.PseudoTranslationPolicy'\n# _t(\"Hello, friend\") -> returns \"\u021e\u00ea\u013a\u013a\u00f8, \u0192\u0213\u0131\u00ea\u00f1\u0111\"\n```\n\nIt's advised that you do that only for your development environment, as you probably don't want to show pseudo translations to your actual users on production.\n\n##### Source string inside brackets\n\nAnother way to show that a string is placeholder text is to show it wrapped around some symbols.\n\n```python\nTRANSIFEX_MISSING_POLICY = (\n    'transifex.native.rendering.WrappedStringPolicy',\n    {'start': '[', 'end': ']'},\n)\n# _t(\"Hello, friend\") -> returns \"[Hello, friend]\"\n```\n\n##### Source string with extra characters\n\nTranslations in some locales are typically longer than in English. This policy allows you to do QA for your UI during development and make sure that longer strings can be accommodated by your current UI elements.\n\n```python\nTRANSIFEX_MISSING_POLICY = (\n    'transifex.native.rendering.WrappedStringPolicy',\n    {'extra_percentage': 0.5, 'extra_str': '~#'},\n)\n# _t(\"Hello, friend\") -> returns \"Hello, friend~#~#~#\"\n```\n\n##### A complex policy\n\nYou can also combine multiple policies to get a result that stands out even more visually and also supports features like extra length or something custom you want.\n\nSimply set the policy to a list, with each item being a tuple of a string, depending on whether or not it needs parameters:\n\n```python\nTRANSIFEX_MISSING_POLICY = [\n    'transifex.native.rendering.PseudoTranslationPolicy',\n    (\n        'transifex.native.rendering.ExtraLengthPolicy',\n        {'extra_percentage': 0.5},\n    ),\n    (\n        'transifex.native.rendering.WrappedStringPolicy',\n        {'start': '{', 'end': '}'},\n    )\n]\n# _t(\"Hello, friend\") -> returns \"{\u021e\u00ea\u013a\u013a\u00f8, \u0192\u0213\u0131\u00ea\u00f1\u0111~extra~}\"\n```\n\n##### Custom policy\n\nYou can easily create your own policy:\n\n```python\nTRANSIFEX_MISSING_POLICY = (\n    'myapp.module_name.MyMissingPolicy',\n    {'param1': 'value1', 'param2': 'value2'},\n)\n# _t(\"Hello, friend\") -> returns a custom string\n```\n\n#### Rendering errors\n\nThe Transifex Native solution protects the application from errors caused during rendering. Examples of those could be:\n* Missing variables (variables that exist in the translation but their value is not provided)\n* Malformed ICU messages (those would break the rendering of the ICU message)\n* Unspecified rendering errors\n\nThe way this works is that every time a string is being rendered, if rendering fails, then an \"error policy\" is invocated, which defines what to render instead.\n\nCurrently, a `SourceStringErrorPolicy` is implemented, which tries to render the source string. If this also fails, a default text is rendered instead.\n\nThe default text is configured by setting the `TRANSIFEX_ERROR_POLICY` setting. An example of setting a different default text would be configuring the setting as such:\n\n```python\nTRANSIFEX_ERROR_POLICY = (\n    'transifex.native.rendering.SourceStringErrorPolicy',\n    {'default_text': 'some_custom_text'},\n)\n```\n\nYou can implement your own error policies. The interface can mimic the one described in `AbstractErrorPolicy`, and it is suggest to subclass this for your implementation. The structure & configuration options of error policies mimic the way missing policies are implemented, so you can take a look there as well for inspiration.\n\n## Scenario 2: Use Transifex Native as a python library\nA sample usage of the library is given below where we initialize it and call it's `translate()` method to get a translation:\n\n```python\nfrom __future__ import absolute_import\n\nfrom transifex.native import init, tx\n# Simple case of initializing the library to be able to retrieve\n# en (source language) and el, fr translations\ninit('project_token', ['el', 'fr', 'en'], ), 'project_secret')\n# populate toolkit memory cache with translations from CDS service the first time\ntx.fetch_translations()\n# get a translation of your project strings, the translation is served from cache\nel_translation = tx.translate('my source string', 'el')\nprint(el_translation)\n# get a translation with plurals and variable\ntranslation = tx.translate(\n            u'{cnt, plural, one {{cnt} {gender} duck} other {{cnt} {gender} ducks}}',\n            'el',\n            params={'cnt': 1, 'gender': 'ugly'}\n)\n```\nThe `translate()` method can be further parameterized by the following kwargs:\n- `is_source` boolean, False by default, to return the source string if True\n- `escape` boolean, True by default, to HTML escape the translation\n- `_context` either a list[str] or a comma delimited string of the context of the source string in TX\n\nThe initialization of the Toolkit we can be further parameterized by:\n- the missing translation policy: what `translation()` returns when an actual translation is missing.\n- the error policy: how translation rendering errors are handled\n- the cds host: point to your CDS server instead of Transifex's\n\n```python\nfrom transifex.native import init, tx\n\nfrom transifex.native.rendering import PseudoTranslationPolicy, SourceStringErrorPolicy\n\n# PseudoTranslationPolicy: on missing translation return a string that looks like the\n#                          source string but contains accented characters\n# SourceStringErrorPolicy: if an error happens when trying to render the translation\n#                          default to the source string\ninit('project_token', ['el', 'fr', 'en'], ), 'project_secret',\n     cds_host='http://127.0.0.1:10300',  # local dev environment CDS\n     missing_policy=PseudoTranslationPolicy(),\n     error_policy=SourceStringErrorPolicy())\n```\nThe available missing policies are `SourceStringPolicy, PseudoTranslationPolicy, WrappedStringPolicy, ExtraLengthPolicy, ChainedPolicy`. For details please look into `transifex.native.rendering` package for all classes that inherit `AbstractRenderingPolicy`. The same package contains the available error policies. Of course you can base on these policies and extend them to cater for your needs.\n\nWe saw that to force fetching all translations from the CDS we called:\n```python\ntx.fetch_translations()\n```\n\nWe can further automate this by using a background thread:\n```python\nfrom transifex.native.daemon import daemon\n# ...\n# start a thread that every interval secs fetches translations in cache\ndaemon.start_daemon(interval=30)\n```\n\nFinally let's use the Toolkit to push source strings to Transifex:\n```python\nfrom transifex.native.parsing import SourceString\n# construct a list of strings to send\nsource1 = SourceString(u'Hello stranger',\n            _context=u'one,two,three',\n            _comment=u'A crucial comment',\n            _charlimit=33,\n            _tags=u' t1,t2 ,  t3')\nsource2 = SourceString(u'Hello stranger',\n            _context=u'context1,context2,context3',\n            _tags=' t1,t2')\nsource3 = SourceString(u'{cnt, plural, one {{cnt} {gender} duck} other {{cnt} {gender} ducks}}')\n# use purge=True only if you want to delete all other Transifex strings\n# except the ones we send. Alternatively all push strings are appended\n# to those existing in Tx.\nresponse_code, response_content = tx.push_source_strings([source1, source2, source3], purge=True)\n\n```\n\n# Hosting translations on your servers\n\nThe Transifex Native solution retrieves the translated content via an intermediate called Content Delivery Service (CDS). It works similarly to a CDN and serves all translations from a cache, so that the retrieval is fast.\n\nWe offer a cloud-based CDS instance at Transifex, however, you can (and we encourage you) to host it yourself, so that translations are served directly from your servers.\nIn order to do that, you need to provide its host in the settings file of your Django project:\n\n```python\nTRANSIFEX_CDS_HOST = 'https://cds.example.com'\n```\n\n# Tests\n\nIn order to run tests, use:\n\n```\nmake localtests\n```\n\nIf this the first time you are doing it, you will also have to run `make build` too.\n\nThis will spawn a docker container & run all the builds that run on the CI platform.\nIn the end, it will produce a coverage report as well.\n\nDuring development, in case you want to run tests with a debugger (interactive debugging),\nyou can use `pytest -s`. However, since tests will also test the Django integration, you will need\nto install `pytest-django` and a supported Django version (currently 1.11). Then, run `pytest` as follows\n\n```\nPYTHONPATH=$PYTHONPATH:$(pwd) DJANGO_SETTINGS_MODULE=tests.native.django.settings pytest\n```\n\nUse `pytest -s` to enable interactive debugging.\n\n# License\n\nLicensed under Apache License 2.0, see `LICENSE` file.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/transifex/transifex-python", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "transifex-python", "package_url": "https://pypi.org/project/transifex-python/", "platform": "", "project_url": "https://pypi.org/project/transifex-python/", "project_urls": {"Homepage": "https://github.com/transifex/transifex-python"}, "release_url": "https://pypi.org/project/transifex-python/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Transifex Python Toolkit", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/transifex/transifex-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b95fbac36845d91b05514e43c4c2a63bfa4ae7f6/68747470733a2f2f7472617669732d63692e6f72672f7472616e73696665782f7472616e73696665782d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/transifex/transifex-python\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/414d6f57f36c17541c8bdbbd88fc27ad0f153f71/68747470733a2f2f636f6465636f762e696f2f67682f7472616e73696665782f7472616e73696665782d707974686f6e2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>Transifex Python Toolkit</h1>\n<p>Transifex Python Toolkit (referred as <strong>the Toolkit</strong> for brevity) is a collection of tools that allow you to easily localize your applications using Transifex (TX). The toolkit features fetching translations over the air (OTA) to your apps.</p>\n<p>Using Transifex (TX) the localization workflow typically consists of the following steps:</p>\n<ol>\n<li>Find - extract the source strings in your source code</li>\n<li>Push them into a Transifex project</li>\n<li>In Transifex your source strings get translated by translators in target languages</li>\n<li>Retrieve a string translation of a target language from Transifex to display it</li>\n</ol>\n<p>Transifex Python Toolkit is used in steps 1, 2, 4 above. Possible usage scenarios:</p>\n<ul>\n<li><a href=\"#scenario-1-integrate-with-a-django-app\" rel=\"nofollow\">In a Django web application</a> The toolkit is fully integrated in Django framework. It contains utilities to mark your source strings for translation, <strong>retrieve the translated strings</strong> and display translation in templates or views. It also provides special CLI commands for pushing to TX and even migrating your existing template code to the new syntax.</li>\n<li><a href=\"#scenario-2-use-transifex-native-as-a-python-library\" rel=\"nofollow\">In a Python application</a> In other python applications or frameworks you can utilize the toolkit as a python library. The building blocks are there: you can push your source strings to TX and retrieve translations over the air to display them to your users.</li>\n</ul>\n<h1>Generic Features - Supported Functionality</h1>\n<p>This section refers to the generic functionality provided by the Toolkit. For implementation details refer to the specific usage scenario detailed in following sections.</p>\n<ul>\n<li><strong>ICU message Format</strong> (variables, plurals), context, metadata (comment, charlimit, tags) support</li>\n<li>HTML escaping &amp; un-escaping</li>\n<li>Automatic fetch of translations over-the-air (OTA) via a background thread</li>\n<li>Policies to handle missing translations or errors</li>\n<li>Use of an intermediary service, <a href=\"#hosting-translations-on-your-servers\" rel=\"nofollow\">CDS</a>,to retrieve translations and an in-toolkit memory cache to serve them fast.</li>\n</ul>\n<h1>Installation</h1>\n<p>Install the Toolkit to your project</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">transifex</span><span class=\"o\">-</span><span class=\"n\">python</span>\n</pre>\n<h2>Transifex Setup</h2>\n<p>Before you begin using the Toolkit, you will also need an account in <a href=\"https://www.transifex.com\" rel=\"nofollow\">Transifex</a> and a project.\nTo set a project compatible with this toolkit contact <a href=\"https://www.transifex.com/contact/\" rel=\"nofollow\">support</a> and you\nwill be given a set of credentials (a public token and a secret), that you can use in your code for authentication.\nWe will refer to these credentials in the text below as:</p>\n<ul>\n<li><code>project_token</code> (used for pulling translations from Transifex)</li>\n<li><code>project_secret</code> (used for pushing source content to Transifex)</li>\n</ul>\n<h1>Use-case Scenarios</h1>\n<h2>Scenario 1: Integrate with a Django app</h2>\n<ul>\n<li><a href=\"#setup\" rel=\"nofollow\">Setup</a></li>\n<li><a href=\"#quick-guide\" rel=\"nofollow\">Quick guide</a></li>\n<li><a href=\"#detailed-usage\" rel=\"nofollow\">Detailed usage</a>\n<ul>\n<li><a href=\"#internationalization-in-template-code\" rel=\"nofollow\">Internationalization in template code</a></li>\n<li><a href=\"#internationalization-in-python-code\" rel=\"nofollow\">Internationalization in Python code</a></li>\n<li><a href=\"#fetching-translations-from-transifex\" rel=\"nofollow\">Fetching translations from Transifex</a></li>\n<li><a href=\"#uploading-source-content-to-transifex\" rel=\"nofollow\">Uploading source content to Transifex</a></li>\n<li><a href=\"#missing-translations\" rel=\"nofollow\">Missing translations</a></li>\n<li><a href=\"#rendering-errors\" rel=\"nofollow\">Rendering errors</a></li>\n</ul>\n</li>\n</ul>\n<h3>Setup</h3>\n<p>Add the following entries in the settings file of your Django project.</p>\n<p>Note: The Transifex Python Toolkit uses some parts of Django's i18n framework, like the available languages and current language. Some of these settings will affect your project as a whole, while others are only used by the Transifex Toolkit.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'transifex.native.django'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">LANGUAGE_CODE</span> <span class=\"o\">=</span> <span class=\"s1\">'en-us'</span>  <span class=\"c1\"># replace with your project's source language</span>\n<span class=\"n\">USE_I18N</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">USE_L10N</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Replace with the proper values for the Transifex project token and secret,</span>\n<span class=\"c1\"># as found in the Transifex UI under your project</span>\n<span class=\"n\">TRANSIFEX_TOKEN</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">project_token</span><span class=\"o\">&gt;</span>  <span class=\"c1\"># used for pulling translations from Transifex</span>\n<span class=\"n\">TRANSIFEX_SECRET</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">project_secret</span><span class=\"o\">&gt;</span>  <span class=\"c1\"># used for pushing source content to Transifex</span>\n<span class=\"n\">TRANSIFEX_SYNC_INTERVAL</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">seconds</span><span class=\"o\">&gt;</span> <span class=\"c1\"># used for defining the daemon running interval in seconds</span>\n</pre>\n<p>A list of supported language codes is available <a href=\"https://www.transifex.com/explore/languages/\" rel=\"nofollow\">here</a> and should\nbe declared in the <code>ll-cc</code> format, compatible with the <code>Accept-Language</code> HTTP header specification, for example\n<code>pt-br</code> instead of <code>pt_BR</code>.</p>\n<h3>Quick guide</h3>\n<p>These are the minimum steps required for testing the Transifex Toolkit with a Django project end-to-end:</p>\n<ol>\n<li>Add translation hooks in your templates</li>\n<li>Push the source content to Transifex</li>\n<li>Translate content on Transifex</li>\n<li>Display translated content to your users</li>\n</ol>\n<h4>1. Add translation hooks</h4>\n<p>Open a Django template file (e.g. an <code>.html</code> file) and add the following:</p>\n<pre><code>{% load transifex %}\n\n&lt;p&gt;{% t \"Hello!\" %}&lt;/p&gt;\n&lt;p&gt;{% t \"I want to be translated.\" %}&lt;/p&gt;\n</code></pre>\n<h4>2. Push source content to Transifex</h4>\n<p>This command will collect all translatable strings and push them to Transifex.</p>\n<pre><code>./manage.py transifex push\n</code></pre>\n<h4>3. Translate content on Transifex</h4>\n<p>The next step is for your translators to translate the strings in various languages using Transifex.\nWhen a translation is added on Transifex, it becomes available over-the-air on your app.\nPlease note that it can take a few minutes for the translations to become available on your app.</p>\n<h4>4. Display translated content</h4>\n<p>The Transifex Toolkit automatically displays translated content in the language currently selected in your Django project.</p>\n<p>In order to allow changing the current language, you will need the following:</p>\n<h5>4.1 A language picker</h5>\n<p>Here is an example of how you can add a language picker in your app.\nYou can add this on the same HTML file you added the translatable strings before, like so:</p>\n<pre>{% load i18n %}\n{% load transifex %}\n\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>{% t \"Hello!\" %}<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>{% t \"I want to be translated.\" %}<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">\"{% url 'set_language' %}\"</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">\"post\"</span><span class=\"p\">&gt;</span>{% csrf_token %}\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"next\"</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"hidden\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"/\"</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">select</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"language\"</span><span class=\"p\">&gt;</span>\n        {% get_current_language as LANGUAGE_CODE %}\n        {% get_available_languages as LANGUAGES %}\n        {% get_language_info_list for LANGUAGES as languages %}\n        {% for language in languages %}\n        <span class=\"p\">&lt;</span><span class=\"nt\">option</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"{{ language.code }}\"</span><span class=\"err\">{%</span> <span class=\"na\">if</span> <span class=\"na\">language</span><span class=\"err\">.</span><span class=\"na\">code </span><span class=\"o\">=</span><span class=\"s\">=</span> <span class=\"na\">LANGUAGE_CODE</span> <span class=\"err\">%}</span> <span class=\"na\">selected</span><span class=\"err\">{%</span> <span class=\"na\">endif</span> <span class=\"err\">%}</span><span class=\"p\">&gt;</span>\n        {{ language.name_local }} ({{ language.code }})\n        <span class=\"p\">&lt;/</span><span class=\"nt\">option</span><span class=\"p\">&gt;</span>\n        {% endfor %}\n    <span class=\"p\">&lt;/</span><span class=\"nt\">select</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"Go\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Add the following route in your Project's routes, so that the <code>set_language</code> hook shown above will work when submitting the form.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^i18n/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'django.conf.urls.i18n'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Last, add <code>'django.middleware.locale.LocaleMiddleware'</code> in your <code>settings.MIDDLEWARE</code> to enable the functionality.</p>\n<p>Now you can test the language picker. Each string will be shown translated in the current language.</p>\n<p>If a translation is not available on Transifex, the source string will appear instead by default.\nThis behavior is configurable by defining a different <a href=\"#missing-translations\" rel=\"nofollow\">missing policy</a>.\nFor example, you can choose to show dummy content instead of the source string, a method often referred to as \u201cpseudo-localization\u201d.\nThis way, you can test the UI and allow strings that have not been translated to stand out.</p>\n<pre><span class=\"n\">TRANSIFEX_MISSING_POLICY</span> <span class=\"o\">=</span> <span class=\"s1\">'transifex.native.rendering.PseudoTranslationPolicy'</span>\n<span class=\"c1\"># _t(\"Hello, friend\") -&gt; returns \"\u021e\u00ea\u013a\u013a\u00f8, \u0192\u0213\u0131\u00ea\u00f1\u0111\"</span>\n</pre>\n<h3>Detailed usage</h3>\n<p>You can use the toolkit both inside Django templates as well as inside views.</p>\n<h4>Internationalization in template code</h4>\n<p>First of all, near the top of every template in which you want to include\nlocalized content, add the following template tag:</p>\n<pre><code>{% load transifex %}\n</code></pre>\n<p>Translations in Django templates use one of two template tags, <code>{% t %}</code> and\n<code>{% ut %}</code>. They translate strings or variables that contain strings. The\nstrings themselves can be constant, or they can contain variables which can be\nresolved either from the parameters of the template tags or the context of the\ntemplate. The difference between the two tags will be addressed later, under\n<a href=\"#XML-escaping\" rel=\"nofollow\">XML escaping</a>.</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>{% t \"This is a great sentence.\" %}<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>{% t \"Welcome, {username}\" username=user.name %}<span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">pre</span><span class=\"p\">&gt;</span>{% t snippet.code  %}<span class=\"p\">&lt;/</span><span class=\"nt\">pre</span><span class=\"p\">&gt;</span>\n</pre>\n<h5>Inline and Block syntax</h5>\n<p>Both template tags support two styles:</p>\n<ol>\n<li>\n<p>The inline syntax</p>\n<pre><code>{% t  &lt;source&gt;[|filters...] [key=param[|filters...]...] [as &lt;var_name&gt;] %}\n{% ut &lt;source&gt;[|filters...] [key=param[|filters...]...] [as &lt;var_name&gt;] %}\n</code></pre>\n</li>\n<li>\n<p>The block syntax</p>\n<pre><code>{% t  [|filters...] [key=param[|filters...]...] [as &lt;var_name&gt;] %}\n  &lt;source&gt;\n{% endt %}\n{% ut [|filters...] [key=param[|filters...]...] [as &lt;var_name&gt;] %}\n  &lt;source&gt;\n{% endut %}\n</code></pre>\n<p>In general, the outcome of the block syntax will be identical to the inline\nsyntax, if you had supplied the block contents as a literal argument. ie\nthis:</p>\n<pre><code>{% t ... %}hello world{% endt %}\n</code></pre>\n<p>should be identical to this:</p>\n<pre><code>{% t \"hello world\" ... %}\n</code></pre>\n<p>With the block syntax, however, you can include characters that would be\nproblematic with the inline syntax, like quotes (<code>\"</code>) or newlines.</p>\n</li>\n</ol>\n<h5>Plurals and other complex structures</h5>\n<p>The Transifex Toolkit supports the <a href=\"http://userguide.icu-project.org/formatparse/messages\" rel=\"nofollow\">ICU Message Format</a>.</p>\n<p>Using the Message Format syntax you can support various types of logic, with\nthe same template tag:</p>\n<pre><code>{% t \"{num, plural, one {Found {num} user} other {Found {num} users} }\" num=total_users %}\n</code></pre>\n<pre><code>{% t num=total_users visit_type=user.visit.type username=user.name %}\n  {visit_type, select,\n    first {Welcome, {username}}\n    returning {Welcome back, {username}}\n  }\n{% endt %}\n</code></pre>\n<p>A more complex example, using nested rules, is the following:</p>\n<pre><code>{% t gender_of_host=\"female\" total_guests=current_event.total_guests host=current_event.host.user.name guest=guest.name %}\n  {gender_of_host, select,\n    female {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to her party.}\n        =2 {{host} invites {guest} and one other person to her party.}\n        other {{host} invites {guest} and # other people to her party.}\n      }\n    }\n    male {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to his party.}\n        =2 {{host} invites {guest} and one other person to his party.}\n        other {{host} invites {guest} and # other people to his party.}\n      }\n    }\n    other {\n      {total_guests, plural, offset:1\n        =0 {{host} does not give a party.}\n        =1 {{host} invites {guest} to their party.}\n        =2 {{host} invites {guest} and one other person to their party.}\n        other {{host} invites {guest} and # other people to their party.}\n      }\n    }\n  }\n{% endt %}\n</code></pre>\n<h5>Parameters</h5>\n<p>Context variables will be used to render ICU parameters in translations. For\nexample, if you have a context variable called <code>username</code>, you can render the\nfollowing:</p>\n<pre><code>{% t \"Hello {username}\" %}\n</code></pre>\n<p>You can also pass variables as parameters to the tag:</p>\n<pre><code>{% t \"Hello {user_name}\" user_name=username %}\n</code></pre>\n<p>Template filters are fully supported, so you can use something like the\nfollowing in order to display the total number of items inside a list object or\ntransform a string to uppercase:</p>\n<pre>{% t \"Found {total} errors.\" total=result.errors|length %}\n{% t \"PROJECT '{name}'\" name=project.name|upper %}\n</pre>\n<p>Several parameter keys can be used in order to annotate the string with\nmetadata that will be used in Transifex. The parameter keys that are recognized\nare: <code>_context</code>, <code>_comment</code>, <code>_charlimit</code> and <code>_tags</code>. <code>_context</code> and <code>_tags</code>\naccept a comma-separated list of strings.</p>\n<pre><code>{% t \"Contact us\" _context=\"Support page CTA\" _tags=\"important,footer\" %}\n</code></pre>\n<p>Defining context makes it possible to distinguish between two identical source\nstrings and disambiguate the translation.</p>\n<h5>Saving the outcome to a variable</h5>\n<p>Using the <code>as &lt;var_name&gt;</code> suffix, instead of displaying the outcome of the\ntranslation, you will save it in a variable which you can later use however you\nlike:</p>\n<pre><code>{% t \"Your credit card was accepted\" as success_msg %}\n{% t \"Your credit card was declined\" as failure_msg %}\n{% if success %}\n    {{ success_msg }}\n{% else %}\n    {{ failure_msg }}\n{% endif %}\n</code></pre>\n<p>This also works for block syntax:</p>\n<pre><code>{% t as text %}\n    Hello world\n{% endt %}\n{{ text }}\n</code></pre>\n<h5>Applying filters to the source string</h5>\n<p>Apart from using filters for parameters, you can also apply them on the source\nstring:</p>\n<pre><code>{% t \"Hello {username}\"|capitalize %}\n{% t source_string|capitalize %}\n</code></pre>\n<p>The important thing to note here is that the filter will be applied to the\n<strong>translation</strong>, not the source string. For example, if you had the following\ntranslations in French:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bonjour\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"Hello\"</span><span class=\"p\">:</span> <span class=\"s2\">\"I like pancakes\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>and you translate to French using this tag:</p>\n<pre><code>{% t \"hello\"|capitalize %}\n</code></pre>\n<p>You will get <code>Bonjour</code>. If the filter had been applied to the source string\nbefore a translation was looked up, then the second translation would have been\nmatched and you would have gotten <code>I like pancakes</code>.</p>\n<p>Source string filters work with block syntax as well, just make sure you\nprepend the filter(s) with <code>|</code>:</p>\n<pre><code>{% t |capitalize %}\n    hello world\n{% endt %}\n</code></pre>\n<h5>XML escaping</h5>\n<p>Choosing between the <code>{% t %}</code> or the <code>{% ut %}</code> tags will determine whether\nyou want to perform escaping on the <strong>translation</strong> (or the source string if a\ntranslation isn't available). Using <code>t</code> will apply escaping on the translation\nwhile <code>ut</code> will not.</p>\n<p>So for example, if you use:</p>\n<pre><code>{% t '&lt;a href=\"{url}\" title=\"help page\"&gt;click here&lt;/a&gt;' %}\n</code></pre>\n<p>Your translators in Transifex will be presented with:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{url}\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"help page\"</span><span class=\"p\">&gt;</span>click here<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</pre>\n<p>but your application will actually render the XML-escaped version of the\ntranslation (or source string if a translation isn't found):</p>\n<pre><span class=\"ni\">&amp;lt;</span>a href=<span class=\"ni\">&amp;quot;</span>https://some.url/<span class=\"ni\">&amp;quot;</span> title=<span class=\"ni\">&amp;quot;</span>\u03a3\u03b5\u03bb\u03af\u03b4\u03b1 \u03b2\u03bf\u03ae\u03b8\u03b5\u03b9\u03b1\u03c2<span class=\"ni\">&amp;quot;&amp;gt;</span>\u039a\u03ac\u03bd\u03c4\u03b5 \u03ba\u03bb\u03b9\u03ba \u03b5\u03b4\u03ce<span class=\"ni\">&amp;lt;</span>/a<span class=\"ni\">&amp;gt;</span>\n</pre>\n<p>If you want to avoid this, you should use the <code>{% ut %}</code> tag instead. Just keep\nin mind that your translators would be able to include malicious content in the\ntranslations, so make sure you have a proofreading process in place.</p>\n<p>Escaping of the ICU parameters is not affected by the choice of tag. If a\ncontext variable is used without specifying a parameter in the tag, then\nwhether the variable will be escaped or not depends on the choice of the\nautoescape setting, which is usually set to true. Otherwise, you can apply the\n<code>|safe</code> or <code>|escape</code> filters on the parameters to specify the behavior you\nwant. For example, assuming you have the following translation:</p>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"&lt;b&gt;hello&lt;/b&gt; {var}\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;b&gt;\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1&lt;/b&gt; {var}\"</span><span class=\"p\">}</span>\n</pre>\n<p>and the following context variable:</p>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"var\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;b&gt;world&lt;/b&gt;\"</span><span class=\"p\">}</span>\n</pre>\n<p>you can expect the following outcomes:</p>\n<table>\n<thead>\n<tr>\n<th>Template</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>{% t \"&lt;b&gt;hello&lt;/b&gt; {var}\" var=var|escape %}</code></td>\n<td><code>&amp;lt;b&amp;gt;\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1&amp;lt;/b&amp;gt; &amp;lt;b&amp;gt;world&amp;lt;/b&amp;gt;</code></td>\n</tr>\n<tr>\n<td><code>{% t \"&lt;b&gt;hello&lt;/b&gt; {var}\" var=var|safe %}</code></td>\n<td><code>&amp;lt;b&amp;gt;\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1&amp;lt;/b&amp;gt; &lt;b&gt;world&lt;/b&gt;</code></td>\n</tr>\n<tr>\n<td><code>{% ut \"&lt;b&gt;hello&lt;/b&gt; {var}\" var=var|escape %}</code></td>\n<td><code>&lt;b&gt;\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1&lt;/b&gt; &amp;lt;b&amp;gt;world&amp;lt;/b&amp;gt;</code></td>\n</tr>\n<tr>\n<td><code>{% ut \"&lt;b&gt;hello&lt;/b&gt; {var}\" var=var|safe %}</code></td>\n<td><code>&lt;b&gt;\u03ba\u03b1\u03bb\u03b7\u03bc\u03ad\u03c1\u03b1&lt;/b&gt; &lt;b&gt;world&lt;/b&gt;</code></td>\n</tr></tbody></table>\n<p>Because using the above two mechanisms (the choice of tag and applying\nescape-related filters to the parameters) gives you good control over escaping,\nthe outcome of the tag is always marked as <em>safe</em> and applying escape-related\nfilters to it will not have any effect. This effectively means that the use of\n<code>|escape</code> or <code>|safe</code> as source string filters or as filters applied to a saved\ntranslation outcome will be ignored, ie the following examples in each column\nshould behave identically:</p>\n<table>\n<thead>\n<tr>\n<th>Source string filters</th>\n<th>Saved variable filters</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>{% t/ut &lt;source_string&gt; ... %}</code></td>\n<td><code>{% t/ut &lt;source_string&gt; ... as text %}{{ text }}</code></td>\n</tr>\n<tr>\n<td><code>{% t/ut &lt;source_string&gt;|safe ... %}</code></td>\n<td><code>{% t/ut &lt;source_string&gt; ... as text %}{{ text|safe }}</code></td>\n</tr>\n<tr>\n<td><code>{% t/ut &lt;source_string&gt;|escape ... %}</code></td>\n<td><code>{% t/ut &lt;source_string&gt; ... as text %}{{ text|escape }}</code></td>\n</tr></tbody></table>\n<p><em>Because of the complexity of the cases with regards to how escaping works, the\ntoolkit comes with a django management command that acts as a sandbox for all\ncombinations of tags, filters etc. You can invoke it with</em>\n<code>./manage.py transifex try-templatetag --interactive</code></p>\n<h5>Useful filters</h5>\n<ol>\n<li>\n<p><code>escapejs</code></p>\n<p>This filter is provided by Django and is very useful when you want to set\ntranslations as the values of javascript variables. Consider the following\nexample:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"kd\">var</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">'{% ut \"hello world\" %}'</span><span class=\"p\">;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>If a translation has the single-quote (<code>'</code>) character in it, this would\nbreak your javascript code as the browser would end up reading something\nlike:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"kd\">var</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">'one '</span> <span class=\"nx\">two</span><span class=\"err\">'</span><span class=\"p\">;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>To counter this, you can use the <code>escapejs</code> filter:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"kd\">var</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">'{% ut \"hello world\"|escapejs %}'</span><span class=\"p\">;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>In which case your browser would end up reading something like:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"kd\">var</span> <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s1\">'one \\u0027 two'</span><span class=\"p\">;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre>\n<p>which is the correct way to include a single-quote character in a javascript\nstring literal.</p>\n</li>\n<li>\n<p><code>trimmed</code></p>\n<p>This is a filter included in our template library, so it will be available\nto you since you included the library with <code>{% load transifex %}</code>. Its\npurpose is to allow you to split a long source string into multiple lines\nusing the block syntax, without having the splitting appear in the\ntranslation outcome. It essentially returns all non-empty lines of the\ntranslation joined with a single space. So this:</p>\n<pre><code>{% t |trimmed %}\n  First line\n  Second line\n{% endt %}\n</code></pre>\n<p>would be rendered as</p>\n<pre><code>\u03a0\u03c1\u03ce\u03c4\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae \u0394\u03b5\u03cd\u03c4\u03b5\u03c1\u03b7 \u03b3\u03c1\u03b1\u03bc\u03bc\u03ae\n</code></pre>\n</li>\n</ol>\n<h4>Internationalizing in Python code</h4>\n<p>In order to mark translatable strings inside Python code, import a function and wrap your strings with it.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">transifex.native.django</span> <span class=\"kn\">import</span> <span class=\"n\">t</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s2\">\"Welcome aboard!\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n</pre>\n<p>Again, ICU Message Format is supported, so you can use the same string syntax as in Django templates, and pass all variables as named arguments.</p>\n<pre><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s2\">\"Welcome, </span><span class=\"si\">{username}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s2\">\"Contact\"</span><span class=\"p\">,</span> <span class=\"n\">_context</span><span class=\"o\">=</span><span class=\"s2\">\"support\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"{num, plural, \"</span>\n    <span class=\"s2\">\"    one {There is </span><span class=\"si\">{num}</span><span class=\"s2\"> user in this team.} \"</span>\n    <span class=\"s2\">\"    other {There are </span><span class=\"si\">{num}</span><span class=\"s2\"> users in this team.}\"</span>\n    <span class=\"s2\">\"}\"</span><span class=\"p\">,</span>\n    <span class=\"n\">num</span><span class=\"o\">=</span><span class=\"n\">total_users</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">  {gender_of_host, select,</span>\n<span class=\"s2\">    female {</span>\n<span class=\"s2\">      {total_guests, plural, offset:1</span>\n<span class=\"s2\">        =0 {{host} does not give a party.}</span>\n<span class=\"s2\">        =1 {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> to her party.}</span>\n<span class=\"s2\">        =2 {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> and one other person to her party.}</span>\n<span class=\"s2\">        other {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> and # other people to her party.}</span>\n<span class=\"s2\">      }</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">    male {</span>\n<span class=\"s2\">      {total_guests, plural, offset:1</span>\n<span class=\"s2\">        =0 {{host} does not give a party.}</span>\n<span class=\"s2\">        =1 {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> to his party.}</span>\n<span class=\"s2\">        =2 {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> and one other person to his party.}</span>\n<span class=\"s2\">        other {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> and # other people to his party.}</span>\n<span class=\"s2\">      }</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">    other {</span>\n<span class=\"s2\">      {total_guests, plural, offset:1</span>\n<span class=\"s2\">        =0 {{host} does not give a party.}</span>\n<span class=\"s2\">        =1 {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> to their party.}</span>\n<span class=\"s2\">        =2 {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> and one other person to their party.}</span>\n<span class=\"s2\">        other {{host} invites </span><span class=\"si\">{guest}</span><span class=\"s2\"> and # other people to their party.}</span>\n<span class=\"s2\">      }</span>\n<span class=\"s2\">    }</span>\n<span class=\"s2\">  }\"\"\"</span><span class=\"p\">,</span>\n  <span class=\"n\">gender_of_host</span><span class=\"o\">=</span><span class=\"s2\">\"female\"</span><span class=\"p\">,</span>\n  <span class=\"n\">total_guests</span><span class=\"o\">=</span><span class=\"n\">current_event</span><span class=\"o\">.</span><span class=\"n\">total_guests</span><span class=\"p\">,</span>\n  <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">current_event</span><span class=\"o\">.</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n  <span class=\"n\">guest</span><span class=\"o\">=</span><span class=\"n\">guest</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h5>Metadata</h5>\n<p>Along with the string and its contexts you can also send optional metadata that can support your localization flow:</p>\n<ul>\n<li><code>_comment</code>: A comment to the translators</li>\n<li><code>_charlimit</code>: The maximum length of characters for the translation</li>\n<li><code>_tags</code>: Comma separated _tags that accompany the source string</li>\n</ul>\n<pre><span class=\"n\">t</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"A string\"</span><span class=\"p\">,</span>\n    <span class=\"n\">_comment</span><span class=\"o\">=</span><span class=\"s2\">\"A comment to the translators\"</span><span class=\"p\">,</span>\n    <span class=\"n\">_charlimit</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">_tags</span><span class=\"o\">=</span><span class=\"s2\">\"t1,t2\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>In total, the reserved keywords that have special meaning and cannot be used as variable placholders are the following:</p>\n<ul>\n<li><code>_context</code></li>\n<li><code>_comment</code></li>\n<li><code>_charlimit</code></li>\n<li><code>_tags</code></li>\n</ul>\n<p>Learn more on how metadata can improve the localization process\nby reading about <a href=\"https://docs.transifex.com/translation/tools-in-the-editor#character-limits\" rel=\"nofollow\">character limits</a>,\n<a href=\"https://docs.transifex.com/translation/tools-in-the-editor#string-instruction-and-developer-notes\" rel=\"nofollow\">developer comments</a> and\n<a href=\"https://docs.transifex.com/translation/tools-in-the-editor#section-tags\" rel=\"nofollow\">tags</a> in Transifex documentation.</p>\n<h5>Escaping &amp; unescaping strings</h5>\n<p>The <code>t()</code> method escapes HTML. If you want to display unescaped text, you can\nuse <code>ut()</code>. This way, the source &amp; translation string will <strong>not</strong> be escaped,\nhowever any variables that replace placeholders in the string will be escaped.\nUse the method wisely, because otherwise, you might be prone to XSS attacks.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">transifex.native.django</span> <span class=\"kn\">import</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">ut</span>\n<span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s1\">'&lt;script type=\"text/javascript\"&gt;alert(</span><span class=\"si\">{name}</span><span class=\"s1\">)&lt;/script&gt;'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'&lt;b&gt;Joe&lt;/b&gt;'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Renders as &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;alert(&amp;lt;b&amp;gt;Joe&amp;lt;/b&amp;gt;)&amp;lt;/script&amp;gt;</span>\n\n<span class=\"n\">ut</span><span class=\"p\">(</span><span class=\"s1\">'&lt;script type=\"text/javascript\"&gt;alert(</span><span class=\"si\">{name}</span><span class=\"s1\">)&lt;/script&gt;'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'&lt;b&gt;Joe&lt;/b&gt;'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Renders as &lt;script type=\"text/javascript\"&gt;alert(&amp;lt;b&amp;gt;Joe&amp;lt;/b&amp;gt;)&lt;/script&gt;</span>\n</pre>\n<h4>Fetching translations from Transifex</h4>\n<p>The Django integration fetches translations <strong>automatically</strong> from Transifex continuously over-the-air (OTA), <strong>without having to restart your server</strong>.</p>\n<p>What actually happens is:</p>\n<ul>\n<li>The first time the application starts, the integration populates its internal memory with the state of translations in Transifex.</li>\n<li>A daemon (thread) runs in the background to periodically re-fetch translations &amp; update the internal memory.</li>\n</ul>\n<p>This functionality starts with your application. However, it does not start by default when running a Django shell or any <code>./manage.py &lt;command&gt;</code> commands, which means that in those cases by default translations will not be available on your application.</p>\n<h5>Advanced</h5>\n<p>Translation are available over the air for your app when the Django server is running and listening for HTTP requests.\nHowever if you need to run Django shell or Django commands and have Transifex Toolkit provide localized content,\nyou can control this using the <code>FORCE_TRANSLATIONS_SYNC</code> environment variable,\nwhich will start the daemon and fetch translations periodically.</p>\n<p>So, for example, if you want to run a Django shell with translations available &amp; receive OTA updates you can do so by running:</p>\n<pre><span class=\"n\">FORCE_TRANSLATIONS_SYNC</span><span class=\"o\">=</span><span class=\"n\">true</span> <span class=\"o\">./</span><span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">shell</span>\n</pre>\n<h4>Uploading source content to Transifex</h4>\n<p>After the strings have been marked either inside templates or Python code, you can push them to Transifex.</p>\n<p>In order to be able to do so, first make sure your Transifex project secret is in your Django settings file,\nas described in the <a href=\"#setup\" rel=\"nofollow\">setup section</a>, and then simply run:</p>\n<pre><code>./manage.py transifex push\n</code></pre>\n<p>This command works in two phases:</p>\n<ol>\n<li>First it goes through all files of the current directory (and subdirectories) and collects all translatable strings in memory</li>\n<li>Then it contacts Transifex and pushes the strings with all metadata to the project (and resource) that is associated with the token you have given during setup</li>\n</ol>\n<p>This way, the source strings reach Transifex and become available for translation.</p>\n<h4>Missing translations</h4>\n<p>If a translation on a specific locale is missing, by default the Transifex Toolkit will return the string in the source language. However, you can change that behavior by providing a different \"missing policy\".</p>\n<p>The currently available options are:</p>\n<ul>\n<li>Source String</li>\n<li>Pseudo translation</li>\n<li>Source string inside brackets</li>\n<li>Source string with extra characters</li>\n<li>A custom policy of yours</li>\n<li>A combined policy</li>\n</ul>\n<p>You can set the policy with a Django setting named <code>TRANSIFEX_MISSING_POLICY</code> and you could easily define a different policy for development and production environments.</p>\n<h5>Source string (default)</h5>\n<p>This is the default policy, where the source string will appear when a translation is missing.</p>\n<pre><span class=\"n\">TRANSIFEX_MISSING_POLICY</span> <span class=\"o\">=</span> <span class=\"s1\">'transifex.native.rendering.SourceStringPolicy'</span>\n<span class=\"c1\"># _t(\"Hello, friend\") -&gt; returns \"Hello, friend\"</span>\n</pre>\n<h5>Pseudo translation</h5>\n<p>This is a nice way to do translation QA during development, as pseudo-translated strings stand out and are easy to identify.</p>\n<pre><span class=\"n\">TRANSIFEX_MISSING_POLICY</span> <span class=\"o\">=</span> <span class=\"s1\">'transifex.native.rendering.PseudoTranslationPolicy'</span>\n<span class=\"c1\"># _t(\"Hello, friend\") -&gt; returns \"\u021e\u00ea\u013a\u013a\u00f8, \u0192\u0213\u0131\u00ea\u00f1\u0111\"</span>\n</pre>\n<p>It's advised that you do that only for your development environment, as you probably don't want to show pseudo translations to your actual users on production.</p>\n<h5>Source string inside brackets</h5>\n<p>Another way to show that a string is placeholder text is to show it wrapped around some symbols.</p>\n<pre><span class=\"n\">TRANSIFEX_MISSING_POLICY</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'transifex.native.rendering.WrappedStringPolicy'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s1\">'start'</span><span class=\"p\">:</span> <span class=\"s1\">'['</span><span class=\"p\">,</span> <span class=\"s1\">'end'</span><span class=\"p\">:</span> <span class=\"s1\">']'</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># _t(\"Hello, friend\") -&gt; returns \"[Hello, friend]\"</span>\n</pre>\n<h5>Source string with extra characters</h5>\n<p>Translations in some locales are typically longer than in English. This policy allows you to do QA for your UI during development and make sure that longer strings can be accommodated by your current UI elements.</p>\n<pre><span class=\"n\">TRANSIFEX_MISSING_POLICY</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'transifex.native.rendering.WrappedStringPolicy'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s1\">'extra_percentage'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">'extra_str'</span><span class=\"p\">:</span> <span class=\"s1\">'~#'</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># _t(\"Hello, friend\") -&gt; returns \"Hello, friend~#~#~#\"</span>\n</pre>\n<h5>A complex policy</h5>\n<p>You can also combine multiple policies to get a result that stands out even more visually and also supports features like extra length or something custom you want.</p>\n<p>Simply set the policy to a list, with each item being a tuple of a string, depending on whether or not it needs parameters:</p>\n<pre><span class=\"n\">TRANSIFEX_MISSING_POLICY</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'transifex.native.rendering.PseudoTranslationPolicy'</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span>\n        <span class=\"s1\">'transifex.native.rendering.ExtraLengthPolicy'</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span><span class=\"s1\">'extra_percentage'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n    <span class=\"p\">(</span>\n        <span class=\"s1\">'transifex.native.rendering.WrappedStringPolicy'</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span><span class=\"s1\">'start'</span><span class=\"p\">:</span> <span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'end'</span><span class=\"p\">:</span> <span class=\"s1\">'}'</span><span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"c1\"># _t(\"Hello, friend\") -&gt; returns \"{\u021e\u00ea\u013a\u013a\u00f8, \u0192\u0213\u0131\u00ea\u00f1\u0111~extra~}\"</span>\n</pre>\n<h5>Custom policy</h5>\n<p>You can easily create your own policy:</p>\n<pre><span class=\"n\">TRANSIFEX_MISSING_POLICY</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'myapp.module_name.MyMissingPolicy'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s1\">'param1'</span><span class=\"p\">:</span> <span class=\"s1\">'value1'</span><span class=\"p\">,</span> <span class=\"s1\">'param2'</span><span class=\"p\">:</span> <span class=\"s1\">'value2'</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># _t(\"Hello, friend\") -&gt; returns a custom string</span>\n</pre>\n<h4>Rendering errors</h4>\n<p>The Transifex Native solution protects the application from errors caused during rendering. Examples of those could be:</p>\n<ul>\n<li>Missing variables (variables that exist in the translation but their value is not provided)</li>\n<li>Malformed ICU messages (those would break the rendering of the ICU message)</li>\n<li>Unspecified rendering errors</li>\n</ul>\n<p>The way this works is that every time a string is being rendered, if rendering fails, then an \"error policy\" is invocated, which defines what to render instead.</p>\n<p>Currently, a <code>SourceStringErrorPolicy</code> is implemented, which tries to render the source string. If this also fails, a default text is rendered instead.</p>\n<p>The default text is configured by setting the <code>TRANSIFEX_ERROR_POLICY</code> setting. An example of setting a different default text would be configuring the setting as such:</p>\n<pre><span class=\"n\">TRANSIFEX_ERROR_POLICY</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s1\">'transifex.native.rendering.SourceStringErrorPolicy'</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s1\">'default_text'</span><span class=\"p\">:</span> <span class=\"s1\">'some_custom_text'</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre>\n<p>You can implement your own error policies. The interface can mimic the one described in <code>AbstractErrorPolicy</code>, and it is suggest to subclass this for your implementation. The structure &amp; configuration options of error policies mimic the way missing policies are implemented, so you can take a look there as well for inspiration.</p>\n<h2>Scenario 2: Use Transifex Native as a python library</h2>\n<p>A sample usage of the library is given below where we initialize it and call it's <code>translate()</code> method to get a translation:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">transifex.native</span> <span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"n\">tx</span>\n<span class=\"c1\"># Simple case of initializing the library to be able to retrieve</span>\n<span class=\"c1\"># en (source language) and el, fr translations</span>\n<span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'project_token'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'el'</span><span class=\"p\">,</span> <span class=\"s1\">'fr'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">],</span> <span class=\"p\">),</span> <span class=\"s1\">'project_secret'</span><span class=\"p\">)</span>\n<span class=\"c1\"># populate toolkit memory cache with translations from CDS service the first time</span>\n<span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">fetch_translations</span><span class=\"p\">()</span>\n<span class=\"c1\"># get a translation of your project strings, the translation is served from cache</span>\n<span class=\"n\">el_translation</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"s1\">'my source string'</span><span class=\"p\">,</span> <span class=\"s1\">'el'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">el_translation</span><span class=\"p\">)</span>\n<span class=\"c1\"># get a translation with plurals and variable</span>\n<span class=\"n\">translation</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span>\n            <span class=\"sa\">u</span><span class=\"s1\">'{cnt, plural, one {{cnt} </span><span class=\"si\">{gender}</span><span class=\"s1\"> duck} other {{cnt} </span><span class=\"si\">{gender}</span><span class=\"s1\"> ducks}}'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'el'</span><span class=\"p\">,</span>\n            <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'cnt'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'gender'</span><span class=\"p\">:</span> <span class=\"s1\">'ugly'</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The <code>translate()</code> method can be further parameterized by the following kwargs:</p>\n<ul>\n<li><code>is_source</code> boolean, False by default, to return the source string if True</li>\n<li><code>escape</code> boolean, True by default, to HTML escape the translation</li>\n<li><code>_context</code> either a list[str] or a comma delimited string of the context of the source string in TX</li>\n</ul>\n<p>The initialization of the Toolkit we can be further parameterized by:</p>\n<ul>\n<li>the missing translation policy: what <code>translation()</code> returns when an actual translation is missing.</li>\n<li>the error policy: how translation rendering errors are handled</li>\n<li>the cds host: point to your CDS server instead of Transifex's</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">transifex.native</span> <span class=\"kn\">import</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"n\">tx</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">transifex.native.rendering</span> <span class=\"kn\">import</span> <span class=\"n\">PseudoTranslationPolicy</span><span class=\"p\">,</span> <span class=\"n\">SourceStringErrorPolicy</span>\n\n<span class=\"c1\"># PseudoTranslationPolicy: on missing translation return a string that looks like the</span>\n<span class=\"c1\">#                          source string but contains accented characters</span>\n<span class=\"c1\"># SourceStringErrorPolicy: if an error happens when trying to render the translation</span>\n<span class=\"c1\">#                          default to the source string</span>\n<span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'project_token'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'el'</span><span class=\"p\">,</span> <span class=\"s1\">'fr'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">],</span> <span class=\"p\">),</span> <span class=\"s1\">'project_secret'</span><span class=\"p\">,</span>\n     <span class=\"n\">cds_host</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:10300'</span><span class=\"p\">,</span>  <span class=\"c1\"># local dev environment CDS</span>\n     <span class=\"n\">missing_policy</span><span class=\"o\">=</span><span class=\"n\">PseudoTranslationPolicy</span><span class=\"p\">(),</span>\n     <span class=\"n\">error_policy</span><span class=\"o\">=</span><span class=\"n\">SourceStringErrorPolicy</span><span class=\"p\">())</span>\n</pre>\n<p>The available missing policies are <code>SourceStringPolicy, PseudoTranslationPolicy, WrappedStringPolicy, ExtraLengthPolicy, ChainedPolicy</code>. For details please look into <code>transifex.native.rendering</code> package for all classes that inherit <code>AbstractRenderingPolicy</code>. The same package contains the available error policies. Of course you can base on these policies and extend them to cater for your needs.</p>\n<p>We saw that to force fetching all translations from the CDS we called:</p>\n<pre><span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">fetch_translations</span><span class=\"p\">()</span>\n</pre>\n<p>We can further automate this by using a background thread:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">transifex.native.daemon</span> <span class=\"kn\">import</span> <span class=\"n\">daemon</span>\n<span class=\"c1\"># ...</span>\n<span class=\"c1\"># start a thread that every interval secs fetches translations in cache</span>\n<span class=\"n\">daemon</span><span class=\"o\">.</span><span class=\"n\">start_daemon</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n<p>Finally let's use the Toolkit to push source strings to Transifex:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">transifex.native.parsing</span> <span class=\"kn\">import</span> <span class=\"n\">SourceString</span>\n<span class=\"c1\"># construct a list of strings to send</span>\n<span class=\"n\">source1</span> <span class=\"o\">=</span> <span class=\"n\">SourceString</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'Hello stranger'</span><span class=\"p\">,</span>\n            <span class=\"n\">_context</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'one,two,three'</span><span class=\"p\">,</span>\n            <span class=\"n\">_comment</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'A crucial comment'</span><span class=\"p\">,</span>\n            <span class=\"n\">_charlimit</span><span class=\"o\">=</span><span class=\"mi\">33</span><span class=\"p\">,</span>\n            <span class=\"n\">_tags</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">' t1,t2 ,  t3'</span><span class=\"p\">)</span>\n<span class=\"n\">source2</span> <span class=\"o\">=</span> <span class=\"n\">SourceString</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'Hello stranger'</span><span class=\"p\">,</span>\n            <span class=\"n\">_context</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s1\">'context1,context2,context3'</span><span class=\"p\">,</span>\n            <span class=\"n\">_tags</span><span class=\"o\">=</span><span class=\"s1\">' t1,t2'</span><span class=\"p\">)</span>\n<span class=\"n\">source3</span> <span class=\"o\">=</span> <span class=\"n\">SourceString</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'{cnt, plural, one {{cnt} </span><span class=\"si\">{gender}</span><span class=\"s1\"> duck} other {{cnt} </span><span class=\"si\">{gender}</span><span class=\"s1\"> ducks}}'</span><span class=\"p\">)</span>\n<span class=\"c1\"># use purge=True only if you want to delete all other Transifex strings</span>\n<span class=\"c1\"># except the ones we send. Alternatively all push strings are appended</span>\n<span class=\"c1\"># to those existing in Tx.</span>\n<span class=\"n\">response_code</span><span class=\"p\">,</span> <span class=\"n\">response_content</span> <span class=\"o\">=</span> <span class=\"n\">tx</span><span class=\"o\">.</span><span class=\"n\">push_source_strings</span><span class=\"p\">([</span><span class=\"n\">source1</span><span class=\"p\">,</span> <span class=\"n\">source2</span><span class=\"p\">,</span> <span class=\"n\">source3</span><span class=\"p\">],</span> <span class=\"n\">purge</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h1>Hosting translations on your servers</h1>\n<p>The Transifex Native solution retrieves the translated content via an intermediate called Content Delivery Service (CDS). It works similarly to a CDN and serves all translations from a cache, so that the retrieval is fast.</p>\n<p>We offer a cloud-based CDS instance at Transifex, however, you can (and we encourage you) to host it yourself, so that translations are served directly from your servers.\nIn order to do that, you need to provide its host in the settings file of your Django project:</p>\n<pre><span class=\"n\">TRANSIFEX_CDS_HOST</span> <span class=\"o\">=</span> <span class=\"s1\">'https://cds.example.com'</span>\n</pre>\n<h1>Tests</h1>\n<p>In order to run tests, use:</p>\n<pre><code>make localtests\n</code></pre>\n<p>If this the first time you are doing it, you will also have to run <code>make build</code> too.</p>\n<p>This will spawn a docker container &amp; run all the builds that run on the CI platform.\nIn the end, it will produce a coverage report as well.</p>\n<p>During development, in case you want to run tests with a debugger (interactive debugging),\nyou can use <code>pytest -s</code>. However, since tests will also test the Django integration, you will need\nto install <code>pytest-django</code> and a supported Django version (currently 1.11). Then, run <code>pytest</code> as follows</p>\n<pre><code>PYTHONPATH=$PYTHONPATH:$(pwd) DJANGO_SETTINGS_MODULE=tests.native.django.settings pytest\n</code></pre>\n<p>Use <code>pytest -s</code> to enable interactive debugging.</p>\n<h1>License</h1>\n<p>Licensed under Apache License 2.0, see <code>LICENSE</code> file.</p>\n\n          </div>"}, "last_serial": 7171618, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "46439b4fc48fde7d2dec6a4f62660d43", "sha256": "9c747bfe13c1da1fa923f610fe2f38e520c60c310e702a00aa363bb0f5408ac5"}, "downloads": -1, "filename": "transifex-python-0.0.1.tar.gz", "has_sig": false, "md5_digest": "46439b4fc48fde7d2dec6a4f62660d43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 58039, "upload_time": "2020-04-14T10:27:51", "upload_time_iso_8601": "2020-04-14T10:27:51.528424Z", "url": "https://files.pythonhosted.org/packages/97/c5/2136c1a1d2202b410240a7a2f058a88122da88f6ccf94dcd3ce5fc344df6/transifex-python-0.0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bec3e6d2b76c4d3f21e7335658528bc7", "sha256": "78c1c3e13850bcb093afa0e01e7773001915125be604c4de7e1396132601cb58"}, "downloads": -1, "filename": "transifex-python-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bec3e6d2b76c4d3f21e7335658528bc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75244, "upload_time": "2020-04-14T11:16:40", "upload_time_iso_8601": "2020-04-14T11:16:40.275759Z", "url": "https://files.pythonhosted.org/packages/37/0c/e6bca12ebe66be23838ff9e909ad45f2c874acd17899b755391caeb2d3dd/transifex-python-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "a204aa08d8815cef7a2d97d1bf2ec5d2", "sha256": "d1dd66098f2857551ce370d35693ba6f9e2ee63fa207d226a516fbf353f25b1a"}, "downloads": -1, "filename": "transifex-python-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a204aa08d8815cef7a2d97d1bf2ec5d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109472, "upload_time": "2020-05-05T12:30:15", "upload_time_iso_8601": "2020-05-05T12:30:15.043130Z", "url": "https://files.pythonhosted.org/packages/07/dd/f63e6539993e2a2d4af4a35bdcdfde72cf066682c257e7ef8ec872f7e5fb/transifex-python-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a204aa08d8815cef7a2d97d1bf2ec5d2", "sha256": "d1dd66098f2857551ce370d35693ba6f9e2ee63fa207d226a516fbf353f25b1a"}, "downloads": -1, "filename": "transifex-python-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a204aa08d8815cef7a2d97d1bf2ec5d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109472, "upload_time": "2020-05-05T12:30:15", "upload_time_iso_8601": "2020-05-05T12:30:15.043130Z", "url": "https://files.pythonhosted.org/packages/07/dd/f63e6539993e2a2d4af4a35bdcdfde72cf066682c257e7ef8ec872f7e5fb/transifex-python-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:48:14 2020"}