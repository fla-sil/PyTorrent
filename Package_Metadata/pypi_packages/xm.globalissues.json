{"info": {"author": "Hans-Peter Locher", "author_email": "hans-peter.locher@inquant.de", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "===============\nxm.globalissues\n===============\n\neXtremeManagement has a content type called 'Poi Task' that provides a way to link a\ntask to a story.\n\nxm.globalissues changes the way issues are being found when adding a\nPoi Task, so issues are found globally in the instance.\n\nSetup\n=====\n\n  >>> self.setRoles(['Manager'])\n  >>> workflow = self.portal.portal_workflow\n\nWe need to install Poi and eXtremeManagement:\n\n  >>> ignore = self.portal.portal_quickinstaller.installProducts(['Poi', 'eXtremeManagement'])\n\nWe create a project, an iteration, and a story.  Note that in our\nmodel, issues correspond to tasks:\n\n  >>> projectfolder = \\\n  ...     self.portal[self.portal.invokeFactory('Folder', 'folder')]\n  >>> project = projectfolder[projectfolder.invokeFactory('Project', 'project')]\n  >>> iteration1 = project[project.invokeFactory('Iteration', 'iteration1')]\n  >>> story1 = iteration1[iteration1.invokeFactory('Story', 'story1')]\n\nRemember that a story has to be estimated and marked as so, so that\nwe're able to add any tasks to it.  Therefore, right now, we shouldn't\nbe able to add any tasks. An image is allowed, though.\n\n  >>> def list_addable(context):\n  ...     allowed = context.getAllowedTypes()\n  ...     addable = context.getAddableTypesInMenu(allowed)\n  ...     return u', '.join(ad.Title() for ad in addable)\n  >>> list_addable(story1)\n  u'File, Image'\n\n  >>> story1.setRoughEstimate(1.5)\n  >>> workflow.doActionFor(story1, 'estimate')\n  >>> list_addable(story1)\n  u'File, Image, Issue Tracker Task, Task'\n\nLet's create an issue tracker in the project with two issues in it:\n\n  >>> tracker = project[project.invokeFactory('PoiTracker', 'tracker')]\n  >>> myissue = tracker[tracker.invokeFactory('PoiIssue', '1')]\n  >>> yourissue = tracker[tracker.invokeFactory('PoiIssue', '2')]\n\nPoi Tasks\n=========\n\nIn our story, we can now add two different types of tasks, the normal\n\"Task\" type and the \"Poi Task\" type.  The \"Poi Task\" is what we're\ninterested in, so let's create one and connect it with one of our\nissues:\n\n  >>> task = story1[story1.invokeFactory('PoiTask', 'task')]\n  >>> task.setIssues([myissue])\n  >>> task.getIssues()\n  [<PoiIssue at /plone/folder/project/tracker/1>]\n  >>> story1.manage_delObjects(['task'])\n\nPoi Tasks have a vocabulary method `vocabulary_issues` that'll return\na DisplayList of issues that can be referred to.  Note that this list\nonly includes open issues:\n\n  >>> task.vocabulary_issues() # doctest: +ELLIPSIS\n  <DisplayList [('...', '#1: '), ('...', '#2: ')] at ...>\n  >>> myissue.isValid = True\n  >>> workflow.doActionFor(myissue, 'post')\n  >>> workflow.doActionFor(myissue, 'resolve-unconfirmed')\n  >>> task.vocabulary_issues() # doctest: +ELLIPSIS\n  <DisplayList [('...', '#2: ')] at ...>\n  >>> workflow.doActionFor(myissue, 'open-resolved')\n  >>> task.vocabulary_issues() # doctest: +ELLIPSIS\n  <DisplayList [('...', '#1: '), ('...', '#2: ')] at ...>\n\nMass-creating Poi Tasks\n-----------------------\n\nThe `@@xm-poi` view allows us to create tasks by tags.  We use the\n`add_tasks_from_tags` method for this.\n\n  >>> from Products.statusmessages.interfaces import IStatusMessage\n  >>> storyview = story1.restrictedTraverse('@@xm-poi')\n  >>> def show_message():\n  ...     for msg in [msg.message for msg in\n  ...                 IStatusMessage(storyview.request).showStatusMessages()]:\n  ...         print msg\n\n\nFinding issues globally\n-----------------------\n\nThanks to xm.globalissues, issues that live outside our project are also\nconsidered:\n\n  >>> folder = self.folder\n  >>> tracker2 = folder[folder.invokeFactory('PoiTracker', 'tracker2')]\n  >>> other_issue = tracker2[tracker2.invokeFactory('PoiIssue', 'other-issue')]\n  >>> other_issue.setSubject(['yourtag'])\n  >>> other_issue.reindexObject()\n  >>> storyview.add_tasks_from_tags(['yourtag'])\n  >>> show_message() # doctest: +NORMALIZE_WHITESPACE\n  Added tasks for issues: other-issue.\n\nChangelog\n=========\n\n1.0 (2009-02-20)\n----------------\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://svn.plone.org/svn/collective/xm.globalissues", "keywords": "Plone", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "xm.globalissues", "package_url": "https://pypi.org/project/xm.globalissues/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/xm.globalissues/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://svn.plone.org/svn/collective/xm.globalissues"}, "release_url": "https://pypi.org/project/xm.globalissues/1.0/", "requires_dist": null, "requires_python": null, "summary": "Find Poi issues globally in the site when adding issue tracker tasks", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>eXtremeManagement has a content type called \u2018Poi Task\u2019 that provides a way to link a\ntask to a story.</p>\n<p>xm.globalissues changes the way issues are being found when adding a\nPoi Task, so issues are found globally in the instance.</p>\n<div id=\"setup\">\n<h2>Setup</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; self.setRoles(['Manager'])\n&gt;&gt;&gt; workflow = self.portal.portal_workflow\n</pre>\n</blockquote>\n<p>We need to install Poi and eXtremeManagement:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; ignore = self.portal.portal_quickinstaller.installProducts(['Poi', 'eXtremeManagement'])\n</pre>\n</blockquote>\n<p>We create a project, an iteration, and a story.  Note that in our\nmodel, issues correspond to tasks:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; projectfolder = \\\n...     self.portal[self.portal.invokeFactory('Folder', 'folder')]\n&gt;&gt;&gt; project = projectfolder[projectfolder.invokeFactory('Project', 'project')]\n&gt;&gt;&gt; iteration1 = project[project.invokeFactory('Iteration', 'iteration1')]\n&gt;&gt;&gt; story1 = iteration1[iteration1.invokeFactory('Story', 'story1')]\n</pre>\n</blockquote>\n<p>Remember that a story has to be estimated and marked as so, so that\nwe\u2019re able to add any tasks to it.  Therefore, right now, we shouldn\u2019t\nbe able to add any tasks. An image is allowed, though.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; def list_addable(context):\n...     allowed = context.getAllowedTypes()\n...     addable = context.getAddableTypesInMenu(allowed)\n...     return u', '.join(ad.Title() for ad in addable)\n&gt;&gt;&gt; list_addable(story1)\nu'File, Image'\n</pre>\n<pre>&gt;&gt;&gt; story1.setRoughEstimate(1.5)\n&gt;&gt;&gt; workflow.doActionFor(story1, 'estimate')\n&gt;&gt;&gt; list_addable(story1)\nu'File, Image, Issue Tracker Task, Task'\n</pre>\n</blockquote>\n<p>Let\u2019s create an issue tracker in the project with two issues in it:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; tracker = project[project.invokeFactory('PoiTracker', 'tracker')]\n&gt;&gt;&gt; myissue = tracker[tracker.invokeFactory('PoiIssue', '1')]\n&gt;&gt;&gt; yourissue = tracker[tracker.invokeFactory('PoiIssue', '2')]\n</pre>\n</blockquote>\n</div>\n<div id=\"poi-tasks\">\n<h2>Poi Tasks</h2>\n<p>In our story, we can now add two different types of tasks, the normal\n\u201cTask\u201d type and the \u201cPoi Task\u201d type.  The \u201cPoi Task\u201d is what we\u2019re\ninterested in, so let\u2019s create one and connect it with one of our\nissues:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; task = story1[story1.invokeFactory('PoiTask', 'task')]\n&gt;&gt;&gt; task.setIssues([myissue])\n&gt;&gt;&gt; task.getIssues()\n[&lt;PoiIssue at /plone/folder/project/tracker/1&gt;]\n&gt;&gt;&gt; story1.manage_delObjects(['task'])\n</pre>\n</blockquote>\n<p>Poi Tasks have a vocabulary method <cite>vocabulary_issues</cite> that\u2019ll return\na DisplayList of issues that can be referred to.  Note that this list\nonly includes open issues:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; task.vocabulary_issues() # doctest: +ELLIPSIS\n&lt;DisplayList [('...', '#1: '), ('...', '#2: ')] at ...&gt;\n&gt;&gt;&gt; myissue.isValid = True\n&gt;&gt;&gt; workflow.doActionFor(myissue, 'post')\n&gt;&gt;&gt; workflow.doActionFor(myissue, 'resolve-unconfirmed')\n&gt;&gt;&gt; task.vocabulary_issues() # doctest: +ELLIPSIS\n&lt;DisplayList [('...', '#2: ')] at ...&gt;\n&gt;&gt;&gt; workflow.doActionFor(myissue, 'open-resolved')\n&gt;&gt;&gt; task.vocabulary_issues() # doctest: +ELLIPSIS\n&lt;DisplayList [('...', '#1: '), ('...', '#2: ')] at ...&gt;\n</pre>\n</blockquote>\n<div id=\"mass-creating-poi-tasks\">\n<h3>Mass-creating Poi Tasks</h3>\n<p>The <cite>@@xm-poi</cite> view allows us to create tasks by tags.  We use the\n<cite>add_tasks_from_tags</cite> method for this.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from Products.statusmessages.interfaces import IStatusMessage\n&gt;&gt;&gt; storyview = story1.restrictedTraverse('@@xm-poi')\n&gt;&gt;&gt; def show_message():\n...     for msg in [msg.message for msg in\n...                 IStatusMessage(storyview.request).showStatusMessages()]:\n...         print msg\n</pre>\n</blockquote>\n</div>\n<div id=\"finding-issues-globally\">\n<h3>Finding issues globally</h3>\n<p>Thanks to xm.globalissues, issues that live outside our project are also\nconsidered:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; folder = self.folder\n&gt;&gt;&gt; tracker2 = folder[folder.invokeFactory('PoiTracker', 'tracker2')]\n&gt;&gt;&gt; other_issue = tracker2[tracker2.invokeFactory('PoiIssue', 'other-issue')]\n&gt;&gt;&gt; other_issue.setSubject(['yourtag'])\n&gt;&gt;&gt; other_issue.reindexObject()\n&gt;&gt;&gt; storyview.add_tasks_from_tags(['yourtag'])\n&gt;&gt;&gt; show_message() # doctest: +NORMALIZE_WHITESPACE\nAdded tasks for issues: other-issue.\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">1.0 (2009-02-20)</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 801840, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "8118c76284690947198c270244dcb5be", "sha256": "b8f7746032fad23617b4fcbacdb3487715f53b95224fcc10b3a24e7fce4a3862"}, "downloads": -1, "filename": "xm.globalissues-1.0-py2.4.egg", "has_sig": false, "md5_digest": "8118c76284690947198c270244dcb5be", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 9942, "upload_time": "2009-02-20T09:33:24", "upload_time_iso_8601": "2009-02-20T09:33:24.003622Z", "url": "https://files.pythonhosted.org/packages/16/2d/9723a589fef84527e4faaab5927c3bbc602c9127493f68722d2581c925db/xm.globalissues-1.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "174c8c3d3c46763c387acbbd5dd50494", "sha256": "605f5d09e132b548d81ebd45fa12c61ab20bcd62c6107a03000fa3c3962590b7"}, "downloads": -1, "filename": "xm.globalissues-1.0.tar.gz", "has_sig": false, "md5_digest": "174c8c3d3c46763c387acbbd5dd50494", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10241, "upload_time": "2009-02-20T09:33:23", "upload_time_iso_8601": "2009-02-20T09:33:23.772000Z", "url": "https://files.pythonhosted.org/packages/02/48/3b0bc5621beafe5d3892cb964c2d6eb5078075ab3dcc50255ddb6cf6b594/xm.globalissues-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8118c76284690947198c270244dcb5be", "sha256": "b8f7746032fad23617b4fcbacdb3487715f53b95224fcc10b3a24e7fce4a3862"}, "downloads": -1, "filename": "xm.globalissues-1.0-py2.4.egg", "has_sig": false, "md5_digest": "8118c76284690947198c270244dcb5be", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 9942, "upload_time": "2009-02-20T09:33:24", "upload_time_iso_8601": "2009-02-20T09:33:24.003622Z", "url": "https://files.pythonhosted.org/packages/16/2d/9723a589fef84527e4faaab5927c3bbc602c9127493f68722d2581c925db/xm.globalissues-1.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "174c8c3d3c46763c387acbbd5dd50494", "sha256": "605f5d09e132b548d81ebd45fa12c61ab20bcd62c6107a03000fa3c3962590b7"}, "downloads": -1, "filename": "xm.globalissues-1.0.tar.gz", "has_sig": false, "md5_digest": "174c8c3d3c46763c387acbbd5dd50494", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10241, "upload_time": "2009-02-20T09:33:23", "upload_time_iso_8601": "2009-02-20T09:33:23.772000Z", "url": "https://files.pythonhosted.org/packages/02/48/3b0bc5621beafe5d3892cb964c2d6eb5078075ab3dcc50255ddb6cf6b594/xm.globalissues-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:10 2020"}