{"info": {"author": "Alexander Maretskiy", "author_email": "amaretskiy@mirantis.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "Mirantis OSS Tooling Library\n============================\n\nA library which contains various functions and classes which help to build\nunified OSS Tools services.\n\nConfiguration and Logging\n-------------------------\n\n``oss_lib.config`` a module for finding configuration files, parsing them and\nvalidating.\n\nLocation of Configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``oss_lib.config`` provides two functions, such as ``process_args`` and\n``process_env``, to find a configuration file and use it as a source of\nsettings.\n\nThe ``process_args`` function accepts arguments from the command line at first\npriority. If some of them are not specified, then suitable environment\nvariables are used, otherwise the default values are used.\n\nThe ``process_env`` gets environment variables, otherwise default values are\nused.\n\nTwo of these functions accept the first position argument which is used as\na prefix for environment variables, e.g. if ``\"CEAGLE\"`` was specified, then\n``CEAGLE_CONF`` will be expected as an environment variable.\n\nThe full list of supported command line arguments and environment variables:\n\n=================  ====================  =======  =====================================\nArgument           Environment variable  Default  Description\n=================  ====================  =======  =====================================\n--debug            <SERVICE>_DEBUG       false    Use DEBUG instead of INFO for\n                                                  logging, possible values true/false.\n--config-file      <SERVICE>_CONF                 Path to a YAML-configuration file.\n--log-config-file  <SERVICE>_LOG_CONF             Path to a file with configuration for\n                                                  `Python logging module`_\n=================  ====================  =======  =====================================\n\n.. _Python logging module: https://docs.python.org/3/library/logging.config.html#configuration-file-format\n\nBoth functions support the default location of a configuration file in case if\nit was not specified through ``--config-file`` or ``<SERVICE>_CONF``.\nThe default location can be set using the ``default_config_path`` parameter and\nit will be used only if this file exists.\n\nThe list of examples to understand priorities how a configuration file is\nchoosen:\n\n================  ================  ===================  =================\n--config-file     <SERVICE>_CONF    default_config_path  Result\n================  ================  ===================  =================\n/etc/ceagle.yaml  /etc/config.yaml  /etc/default.yaml    /etc/ceagle.yaml\n<not set>         /etc/config.yaml  /etc/default.yaml    /etc/config.yaml\n<not set>         <not set>         /etc/default.yaml    /etc/default.yaml\n                                    (exists)\n<not set>         <not set>         /etc/default.yaml    <not set>\n                                    (does not exist)\n================  ================  ===================  =================\n\nValidation and Defaults\n~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default ``oss_lib.config`` expects that all configuration settings pass\nthrough validation in the JSON Schema-like format.\nThe ``validation_schema`` parameter expects a dict which populates only\nthe ``properties`` parameter in the schema. For example, if your application\nexpects two top defined parameters in :\n\n.. code-block:: python\n\n      SCHEMA = {\n          \"elasticsearch\": {\n              \"type\": \"object\",\n              \"properties\": {\n                  \"hosts\": {\n                      \"type\": \"array\",\n                      \"minItems\": 1,\n                      \"uniqueItems\": True,\n                      \"items\": {\n                         \"type\": \"object\",\n                         \"properties\": {\n                             \"host\": {\"type\": \"string\"},\n                             \"port\": {\"type\": \"integer\"},\n                         },\n                         \"required\": [\"host\"],\n                         \"additionalProperties\": False,\n                      },\n                  },\n              },\n              \"required\": [\"hosts\"],\n              \"additionalProperties\": False,\n          },\n          \"config\": {\n              \"type\": \"object\",\n              \"properties\": {\n                  \"run_every_minutes\": {\n                      \"type\": \"integer\",\n                      \"minimum\": 1,\n                  },\n              },\n              \"required\": [\"run_every_minutes\"],\n              \"additionalProperties\": False,\n          },\n      }\n\n      config.process_env(...,\n                         validation_schema=SCHEMA,\n                         ....)\n\nThe default values for settings can be also specified through the ``defaults``\nparameter, e.g.:\n\n.. code-block:: python\n\n      DEFAULTS = {\n          \"elasticsearch\": {\"hosts\": [\n              {\"host\": \"127.0.0.1\", \"port\": 9200},\n          ]},\n          \"config\": {\"run_every_minutes\": 2},\n      }\n\n      config.process_env(...,\n                         validation_schema=SCHEMA,\n                         defaults=DEFAULTS,\n                         ....)\n\nIf defaults are specified, then they will be used as settings and\nloaded settings from specified configuration files will be merged into them.\nFor example, if the configuration file contains:\n\n.. code-block::\n\n      elasticsearch:\n        hosts:\n          - host: 172.16.169.4\n            port: 9200\n\nThe resulting config will look like that:\n\n.. code-block:: python\n\n      {\n          \"elasticsearch\": {\n              \"hosts\": [\n                  {\"host\": \"172.16.169.4\", \"port\": 9200},\n              ],\n          },\n          \"config\": {\"run_every_minutes\": 2},\n      }\n\nIt means that only dictionary values are merged but primitives are just\nreplaced.\n\nUsage Examples\n~~~~~~~~~~~~~~\n\nAfter initialization of configuration ``oss_lib.config`` module provides\na single tone object to interect with configuration settings. This object can\nbe accessed through the ``oss_lib.config.CONF`` variables in a dict-like way.\n\nLet's take a look on the example how to initialize configuration accepting\ncommand line arguments and environment variables ``example.py``:\n\n.. code-block:: python\n\n      from oss_lib import config\n\n      SCHEMA = {\n          \"driver\": {\"enum\": [\"noop\", \"openstack\"]},\n      }\n\n      DEFAULTS = {\n          \"driver\": \"noop\",\n      }\n\n      config.process_args(\"CEAGLE\",\n                          default_config_path=\"/etc/default.yaml\",\n                          validation_schema=SCHEMA,\n                          defaults=DEFAULTS)\n      print(config.CONF[\"driver\"])\n\nSo, after that you can run your application in various ways using:\n\n#. The command line argument ``--config-file``:\n\n.. code-block:: sh\n\n      echo \"driver: openstack\" > /etc/ceagle.yaml\n      python example.py --config-file /etc/ceagle.yaml  #-> openstack\n\n#. The environment variable ``CEAGLE_CONF``:\n\n.. code-block:: sh\n\n      CEAGLE_CONF=/etc/ceagle.yaml\n      echo \"driver: openstack\" > $CEAGLE_CONF\n      python example.py #-> openstack\n\n#. Or without any variables because the ``default_config_path`` parameter was\n   specified:\n\n.. code-block:: sh\n\n      echo \"driver: openstack\" > /etc/default.yaml\n      python example.py #-> openstack\n\n#. Or even you can specify nothing because the ``defaults`` parameter was set:\n\n.. code-block:: sh\n\n      python example.py #-> noop\n\n\nUseful Stuff for Flask\n----------------------\n\nrouting.py\n~~~~~~~~~~\n\nRouting stuff like auto-generated HTML and JSON pages\nwith map of routes. This is useful for development\nprocess and for exposing APIs.\n\nExample:\n\n.. code-block:: python\n\n    from oss_lib import routing\n    ...\n\n    app = Flask(...)\n    ...\n    app.add_url_rule(...)  # add routes\n    ...\n\n    # Now add routing map pages\n    app = routing.add_routing_map(app,\n                                  html_uri=\"/api.html\",\n                                  json_uri=\"/api.json\")\n\n\nNow run the application and find auto-generated pages\non given URIs */api.html* and */api.json*\n", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seecloud/oss-lib", "keywords": null, "license": "Apache 2.0", "maintainer": null, "maintainer_email": null, "name": "oss-lib", "package_url": "https://pypi.org/project/oss-lib/", "platform": "any", "project_url": "https://pypi.org/project/oss-lib/", "project_urls": {"Homepage": "https://github.com/seecloud/oss-lib"}, "release_url": "https://pypi.org/project/oss-lib/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "OSS Tooling Library", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A library which contains various functions and classes which help to build\nunified OSS Tools services.</p>\n<div id=\"configuration-and-logging\">\n<h2>Configuration and Logging</h2>\n<p><tt>oss_lib.config</tt> a module for finding configuration files, parsing them and\nvalidating.</p>\n<div id=\"location-of-configuration\">\n<h3>Location of Configuration</h3>\n<p><tt>oss_lib.config</tt> provides two functions, such as <tt>process_args</tt> and\n<tt>process_env</tt>, to find a configuration file and use it as a source of\nsettings.</p>\n<p>The <tt>process_args</tt> function accepts arguments from the command line at first\npriority. If some of them are not specified, then suitable environment\nvariables are used, otherwise the default values are used.</p>\n<p>The <tt>process_env</tt> gets environment variables, otherwise default values are\nused.</p>\n<p>Two of these functions accept the first position argument which is used as\na prefix for environment variables, e.g. if <tt>\"CEAGLE\"</tt> was specified, then\n<tt>CEAGLE_CONF</tt> will be expected as an environment variable.</p>\n<p>The full list of supported command line arguments and environment variables:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Argument</th>\n<th>Environment variable</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>\u2013debug</td>\n<td>&lt;SERVICE&gt;_DEBUG</td>\n<td>false</td>\n<td>Use DEBUG instead of INFO for\nlogging, possible values true/false.</td>\n</tr>\n<tr><td>\u2013config-file</td>\n<td>&lt;SERVICE&gt;_CONF</td>\n<td>\u00a0</td>\n<td>Path to a YAML-configuration file.</td>\n</tr>\n<tr><td>\u2013log-config-file</td>\n<td>&lt;SERVICE&gt;_LOG_CONF</td>\n<td>\u00a0</td>\n<td>Path to a file with configuration for\n<a href=\"https://docs.python.org/3/library/logging.config.html#configuration-file-format\" rel=\"nofollow\">Python logging module</a></td>\n</tr>\n</tbody>\n</table>\n<p>Both functions support the default location of a configuration file in case if\nit was not specified through <tt><span class=\"pre\">--config-file</span></tt> or <tt>&lt;SERVICE&gt;_CONF</tt>.\nThe default location can be set using the <tt>default_config_path</tt> parameter and\nit will be used only if this file exists.</p>\n<p>The list of examples to understand priorities how a configuration file is\nchoosen:</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>\u2013config-file</th>\n<th>&lt;SERVICE&gt;_CONF</th>\n<th>default_config_path</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>/etc/ceagle.yaml</td>\n<td>/etc/config.yaml</td>\n<td>/etc/default.yaml</td>\n<td>/etc/ceagle.yaml</td>\n</tr>\n<tr><td>&lt;not set&gt;</td>\n<td>/etc/config.yaml</td>\n<td>/etc/default.yaml</td>\n<td>/etc/config.yaml</td>\n</tr>\n<tr><td>&lt;not set&gt;</td>\n<td>&lt;not set&gt;</td>\n<td>/etc/default.yaml\n(exists)</td>\n<td>/etc/default.yaml</td>\n</tr>\n<tr><td>&lt;not set&gt;</td>\n<td>&lt;not set&gt;</td>\n<td>/etc/default.yaml\n(does not exist)</td>\n<td>&lt;not set&gt;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"validation-and-defaults\">\n<h3>Validation and Defaults</h3>\n<p>By default <tt>oss_lib.config</tt> expects that all configuration settings pass\nthrough validation in the JSON Schema-like format.\nThe <tt>validation_schema</tt> parameter expects a dict which populates only\nthe <tt>properties</tt> parameter in the schema. For example, if your application\nexpects two top defined parameters in :</p>\n<pre><span class=\"n\">SCHEMA</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"elasticsearch\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"hosts\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"array\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"minItems\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"uniqueItems\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                   <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n                   <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                       <span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span><span class=\"p\">},</span>\n                       <span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">},</span>\n                   <span class=\"p\">},</span>\n                   <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"host\"</span><span class=\"p\">],</span>\n                   <span class=\"s2\">\"additionalProperties\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"p\">},</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"hosts\"</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"additionalProperties\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"config\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"run_every_minutes\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"integer\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"minimum\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"run_every_minutes\"</span><span class=\"p\">],</span>\n        <span class=\"s2\">\"additionalProperties\"</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">process_env</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span>\n                   <span class=\"n\">validation_schema</span><span class=\"o\">=</span><span class=\"n\">SCHEMA</span><span class=\"p\">,</span>\n                   <span class=\"o\">....</span><span class=\"p\">)</span>\n</pre>\n<p>The default values for settings can be also specified through the <tt>defaults</tt>\nparameter, e.g.:</p>\n<pre><span class=\"n\">DEFAULTS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"elasticsearch\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"hosts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">9200</span><span class=\"p\">},</span>\n    <span class=\"p\">]},</span>\n    <span class=\"s2\">\"config\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"run_every_minutes\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">process_env</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span>\n                   <span class=\"n\">validation_schema</span><span class=\"o\">=</span><span class=\"n\">SCHEMA</span><span class=\"p\">,</span>\n                   <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"n\">DEFAULTS</span><span class=\"p\">,</span>\n                   <span class=\"o\">....</span><span class=\"p\">)</span>\n</pre>\n<p>If defaults are specified, then they will be used as settings and\nloaded settings from specified configuration files will be merged into them.\nFor example, if the configuration file contains:</p>\n<pre>elasticsearch:\n  hosts:\n    - host: 172.16.169.4\n      port: 9200\n</pre>\n<p>The resulting config will look like that:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"elasticsearch\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"hosts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"172.16.169.4\"</span><span class=\"p\">,</span> <span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">9200</span><span class=\"p\">},</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"config\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"run_every_minutes\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>It means that only dictionary values are merged but primitives are just\nreplaced.</p>\n</div>\n<div id=\"usage-examples\">\n<h3>Usage Examples</h3>\n<p>After initialization of configuration <tt>oss_lib.config</tt> module provides\na single tone object to interect with configuration settings. This object can\nbe accessed through the <tt>oss_lib.config.CONF</tt> variables in a dict-like way.</p>\n<p>Let\u2019s take a look on the example how to initialize configuration accepting\ncommand line arguments and environment variables <tt>example.py</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oss_lib</span> <span class=\"kn\">import</span> <span class=\"n\">config</span>\n\n<span class=\"n\">SCHEMA</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"driver\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"enum\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"noop\"</span><span class=\"p\">,</span> <span class=\"s2\">\"openstack\"</span><span class=\"p\">]},</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">DEFAULTS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"driver\"</span><span class=\"p\">:</span> <span class=\"s2\">\"noop\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">process_args</span><span class=\"p\">(</span><span class=\"s2\">\"CEAGLE\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">default_config_path</span><span class=\"o\">=</span><span class=\"s2\">\"/etc/default.yaml\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">validation_schema</span><span class=\"o\">=</span><span class=\"n\">SCHEMA</span><span class=\"p\">,</span>\n                    <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"n\">DEFAULTS</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">CONF</span><span class=\"p\">[</span><span class=\"s2\">\"driver\"</span><span class=\"p\">])</span>\n</pre>\n<p>So, after that you can run your application in various ways using:</p>\n<ol>\n<li>The command line argument <tt><span class=\"pre\">--config-file</span></tt>:</li>\n</ol>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"driver: openstack\"</span> &gt; /etc/ceagle.yaml\npython example.py --config-file /etc/ceagle.yaml  <span class=\"c1\">#-&gt; openstack</span>\n</pre>\n<ol>\n<li>The environment variable <tt>CEAGLE_CONF</tt>:</li>\n</ol>\n<pre><span class=\"nv\">CEAGLE_CONF</span><span class=\"o\">=</span>/etc/ceagle.yaml\n<span class=\"nb\">echo</span> <span class=\"s2\">\"driver: openstack\"</span> &gt; <span class=\"nv\">$CEAGLE_CONF</span>\npython example.py <span class=\"c1\">#-&gt; openstack</span>\n</pre>\n<ol>\n<li>Or without any variables because the <tt>default_config_path</tt> parameter was\nspecified:</li>\n</ol>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"driver: openstack\"</span> &gt; /etc/default.yaml\npython example.py <span class=\"c1\">#-&gt; openstack</span>\n</pre>\n<ol>\n<li>Or even you can specify nothing because the <tt>defaults</tt> parameter was set:</li>\n</ol>\n<pre>python example.py <span class=\"c1\">#-&gt; noop</span>\n</pre>\n</div>\n</div>\n<div id=\"useful-stuff-for-flask\">\n<h2>Useful Stuff for Flask</h2>\n<h2 id=\"routing-py\"><span class=\"section-subtitle\">routing.py</span></h2>\n<p>Routing stuff like auto-generated HTML and JSON pages\nwith map of routes. This is useful for development\nprocess and for exposing APIs.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">oss_lib</span> <span class=\"kn\">import</span> <span class=\"n\">routing</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_url_rule</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># add routes</span>\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># Now add routing map pages</span>\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">routing</span><span class=\"o\">.</span><span class=\"n\">add_routing_map</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span>\n                              <span class=\"n\">html_uri</span><span class=\"o\">=</span><span class=\"s2\">\"/api.html\"</span><span class=\"p\">,</span>\n                              <span class=\"n\">json_uri</span><span class=\"o\">=</span><span class=\"s2\">\"/api.json\"</span><span class=\"p\">)</span>\n</pre>\n<p>Now run the application and find auto-generated pages\non given URIs <em>/api.html</em> and <em>/api.json</em></p>\n</div>\n\n          </div>"}, "last_serial": 2537435, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e9885b728108a57141ca3cedc37a3d3b", "sha256": "ce7d16290fb66a6c992bf518da8ac52ed167ae5c2d03471a5105320f08094ce4"}, "downloads": -1, "filename": "oss_lib-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e9885b728108a57141ca3cedc37a3d3b", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 4427, "upload_time": "2016-12-14T15:45:27", "upload_time_iso_8601": "2016-12-14T15:45:27.547230Z", "url": "https://files.pythonhosted.org/packages/7a/99/b2695b150f21c986fea6b259420f98c4604cb0d4b2c582b8e33a892e729d/oss_lib-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0e331780c33f531532d7b77fa7032f7", "sha256": "df544542d399fd2690d829a0819ddfc3e9f212c172cd05b7f94adec468190e03"}, "downloads": -1, "filename": "oss_lib-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f0e331780c33f531532d7b77fa7032f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3152, "upload_time": "2016-12-14T15:43:43", "upload_time_iso_8601": "2016-12-14T15:43:43.089924Z", "url": "https://files.pythonhosted.org/packages/c2/61/36d8f97ff58ad0a3861e31795c912dc9d3fbf3fe39c0a965c7aeca3cc6e3/oss_lib-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5bd1fa0b71feaddc13cc81c24511c520", "sha256": "e6b0e5d9053f8e4066d93d438150da38b0e42680276030761ea36dee3e85eb7c"}, "downloads": -1, "filename": "oss_lib-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5bd1fa0b71feaddc13cc81c24511c520", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 6411, "upload_time": "2016-12-23T22:34:37", "upload_time_iso_8601": "2016-12-23T22:34:37.494857Z", "url": "https://files.pythonhosted.org/packages/50/e4/c91850f148276f65e9cb7e4e1aab75048c12dc5ae31d2282532c031ac6ba/oss_lib-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "513c4fc2329b6a370a163fdd3874f8b9", "sha256": "87293ffd224c7d50df7b01d5f5606fa684c7f420ec9fc6f6304da5062221f9c5"}, "downloads": -1, "filename": "oss_lib-0.1.1.tar.gz", "has_sig": false, "md5_digest": "513c4fc2329b6a370a163fdd3874f8b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6593, "upload_time": "2016-12-23T22:34:20", "upload_time_iso_8601": "2016-12-23T22:34:20.379158Z", "url": "https://files.pythonhosted.org/packages/7a/e4/6020a26180df6cc2f61185fcaea3708164c1b21dd78459cd10c170e108ae/oss_lib-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5bd1fa0b71feaddc13cc81c24511c520", "sha256": "e6b0e5d9053f8e4066d93d438150da38b0e42680276030761ea36dee3e85eb7c"}, "downloads": -1, "filename": "oss_lib-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5bd1fa0b71feaddc13cc81c24511c520", "packagetype": "bdist_wheel", "python_version": "any", "requires_python": null, "size": 6411, "upload_time": "2016-12-23T22:34:37", "upload_time_iso_8601": "2016-12-23T22:34:37.494857Z", "url": "https://files.pythonhosted.org/packages/50/e4/c91850f148276f65e9cb7e4e1aab75048c12dc5ae31d2282532c031ac6ba/oss_lib-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "513c4fc2329b6a370a163fdd3874f8b9", "sha256": "87293ffd224c7d50df7b01d5f5606fa684c7f420ec9fc6f6304da5062221f9c5"}, "downloads": -1, "filename": "oss_lib-0.1.1.tar.gz", "has_sig": false, "md5_digest": "513c4fc2329b6a370a163fdd3874f8b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6593, "upload_time": "2016-12-23T22:34:20", "upload_time_iso_8601": "2016-12-23T22:34:20.379158Z", "url": "https://files.pythonhosted.org/packages/7a/e4/6020a26180df6cc2f61185fcaea3708164c1b21dd78459cd10c170e108ae/oss_lib-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:58 2020"}