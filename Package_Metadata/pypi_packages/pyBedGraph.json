{"info": {"author": "Henry Zhang", "author_email": "henrybzhang.99@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/c0ver/pyBedGraph.svg?branch=master)](https://travis-ci.org/c0ver/pyBedGraph)\n\n# pyBedGraph\nA Python package for fast operations on 1-dimensional genomic signal tracks.\n\n## Features\n- Finds the mean, approx. mean, max, min, coverage, or standard deviation for a given interval in a bedGraph file\n- Partly written in Cython for speed improvements\n- Can look up exact statistics of 1 million regions in ~0.26 second on a conventional laptop\n- An approximate mean for 10,000 regions can be computed in ~0.0012 second w/ error rate of less than 5 percent\n\n## Drawbacks\n- Uses memory to load files\n    - 16 bytes per line in bedGraph file\n    - 4 bytes per basePair in every chromosome loaded\n- Loading the bedGraph file can take up to a minute or two\n- Only works with sorted bedgraph files\n\n## Installation\n\nDependency requirements:\n- Numpy >= v1.16.4\n- pyBigWig >= v0.3.16 (For reading bigWig files)\n    - pyBigWig == 0.3.16 (For Benchmarking)\n\nWith pip:\n```bash\npip3 install pyBedGraph\npip3 install pyBigWig # if using bigwig files\n```\n\nWith conda:\n```bash\nconda create -n test\nconda activate test\nconda install -c bioconda pyBedGraph\nconda install -c bioconda pyBigWig # if using bigwig files\n```\n\n## Usage\n\n### Download the test files here:\nhttps://thejacksonlaboratory.ent.box.com/s/3jglutwf3d54pnomnp33ivo7a9546vhe\n\nTest files are also included in this Github repository: `test/test_files`.\n\nEnter the directory with the test files.\n\n### Create the object:\n```python\nfrom pyBedGraph import BedGraph\n\n# arg1 - chromosome sizes file\n# arg2 - bedgraph file\n# arg3 - (optional) chromosome_name\n# Just load chromosome 'chr1' (uses less memory and takes less time)\nbedGraph = BedGraph('myChrom.sizes', 'random_test.bedGraph', 'chr1')\n\n# Load the whole bedGraph file\nbedGraph = BedGraph('myChrom.sizes', 'random_test.bedGraph')\n\n# Option to not ignore missing basePairs when calculating statistics\n# Used the exact same way but produces slightly different results\ninclusive_bedGraph = BedGraph('myChrom.sizes', 'random_test.bedGraph', ignore_missing_bp=False)\n```\n\n### Choose and load a chromosome to search for:\n```python\nbedGraph.load_chrom_data('chr1')\ninclusive_bedGraph.load_chrom_data('chr1')\n```\n### Load bins for finding mean:\nFor approx_mean:\n1. Smaller bin size -> more accurate but slower\n2. Larger bin size -> less accurate but faster\n```python\nbedGraph.load_chrom_bins('chr1', 3)\ninclusive_bedGraph.load_chrom_bins('chr1', 3)\n```\n### Choose a specific statistic to search for:\n  - `'mean'`\n  - `'approx_mean'` - an approximate mean is faster than exact mean, with < 5% error rate\n  - `'max'`\n  - `'min'`\n  - `'coverage'`\n  - `'std'` - (population standard deviation)\n\n### Search from a list of intervals:\n```python\nimport numpy as np\n\n# Option 1\ntest_intervals = [\n    ['chr1', 24, 26],\n    ['chr1', 12, 15],\n    ['chr1', 8, 12],\n    ['chr1', 9, 10],\n    ['chr1', 0, 5]\n]\nvalues = bedGraph.stats(intervals=test_intervals)\n\n# [-1.          0.9         0.1        -1.          0.82        0.72222222]\nprint(values)\n\n# Option 2\nstart_list = np.array([24, 12, 8, 9, 0], dtype=np.int32)\nend_list = np.array([26, 15, 12, 10, 5], dtype=np.int32)\nchrom_name = 'chr1'\n\n# arg1 - (optional) stat (default is 'mean')\n# arg2 - intervals\n# arg3 - start_list\n# arg4 - end_list\n# arg5 - chrom_name\n# must have either intervals or start_list, end_list, chrom_name\n# returns a numpy array of values\nresult = bedGraph.stats(start_list=start_list, end_list=end_list, chrom_name=chrom_name)\n\n# [-1.          0.9         0.1        -1.          0.82        0.72222222]\nprint(result)\n```\n\n### Search from a file:\n```python\n# arg1 - interval file\n# arg2 - (optional) output_to_file (default is True and outputs to 'chr1_out.txt'\n# arg3 - (optional) stat (default is 'mean')\n# returns a dictionary; keys are chromosome names, values are numpy arrays\nresult = bedGraph.stats_from_file('test_intervals.txt', output_to_file=False, stat='mean')\n\n# {'chr1': array([-1.        ,  0.9       ,  0.1       , -1.        ,  0.82      ,\n#        0.72222222])}\nprint(result)\n```\n\n### Sample Tests (from included test files):\n```python\n# [-1.    0.9   0.1  -1.    0.82    0.72222222]\nbedGraph.stats('mean', test_intervals)\n\n# [-1.          0.9         0.1        -1.          0.80769231  0.72222222]\nbedGraph.stats('approx_mean', test_intervals)\n\n# [0.         0.33333333 0.25       0.         1.         0.3       ]\nbedGraph.stats('coverage', test_intervals)\n\n# [-1.   0.9  0.1 -1.   0.7  0.1]\nbedGraph.stats('min', test_intervals)\n\n# [-1.   0.9  0.1 -1.   0.9  1. ]\nbedGraph.stats('max', test_intervals)\n\n# [-1.          0.          0.         -1.          0.09797959  0.27799991]\nbedGraph.stats('std', test_intervals)\n```\n\n```python\n# [0.         0.3        0.025      0.         0.82       0.21666667]\ninclusive_bedGraph.stats('mean', test_intervals)\n\n# [0.         0.3        0.00833333 0.         0.7        0.21666667]\ninclusive_bedGraph.stats('approx_mean', test_intervals)\n\n# [0.         0.33333333 0.25       0.         1.         0.3       ]\ninclusive_bedGraph.stats('coverage', test_intervals)\n\n# [0.  0.  0.1 0.  0.7 0.1]\ninclusive_bedGraph.stats('min', test_intervals)\n\n# [0.  0.9 0.1 0.  0.9 1. ]\ninclusive_bedGraph.stats('max', test_intervals)\n\n# [0.         0.42426407 0.04330127 0.         0.09797959 0.36431061]\ninclusive_bedGraph.stats('std', test_intervals)\n```\n\n## Benchmarking pyBedGraph\nActual values are found from the `stats` function in pyBigWig with the `exact` argument being `True`. The error for exact stats will be ~1e-8 due to rounding error of conversion of bigWig and bedGraph files.\n\nAlternatively, one can make actual values be pyBedGraph's exact statistics.\n\nEnter the `graphs` folder in the Github project repository.\n```python\nfrom pyBedGraph import BedGraph\nfrom Benchmark import Benchmark\n\n# These files can be downloaded from the link given above\nbedGraph = BedGraph('mm10.chrom.sizes', 'ENCFF376VCU.bedGraph', 'chr1')\n\n# Alternatively using a bigwig file\n# bedGraph = BedGraph('mm10.chrom.sizes', 'ENCFF376VCU.bigWig', 'chr1')\n\nbedGraph.load_chrom_data('chr1')\nbedGraph.load_chrom_bins('chr1', 100)\n\n# arg1 - BedGraph object\n# arg2 - bigwig file\nbench = Benchmark(bedGraph, 'ENCFF376VCU.bigWig')\n\n# arg1 - num_tests\n# arg2 - interval_size\n# arg3 - chrom_nam\n# arg4 - bin_size\n# arg5 - stats (optional) (Default is all stats)\n# arg6 - just_runtime (optional) (Default is False)\n# arg6 - bench_pyBigWig_approx (optional) (Default is True)\n# arg6 - make_pyBigWig_baseline (optional) (Default is True)\n# Test all statistics\nresult = bench.benchmark(10000, 5000, 'chr1', 100)\n\nfor key in result:\n    print(key, result[key])\n\n# mean {'run_time': 0.008324861526489258, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# pyBigWig_mean {'approx_run_time': 1.4333949089050293, 'exact_run_time': 0.7698564529418945, 'error': {'percent_error': 0.06567272540694802, 'ms_error': 0.001222419386871348, 'abs_error': 0.023540340949669364, 'not_included': 79}}\n# approx_mean {'run_time': 0.002111673355102539, 'error': {'percent_error': 0.006529644707171326, 'ms_error': 7.858080037556034e-06, 'abs_error': 0.001824641073039555, 'not_included': 4}}\n# max {'run_time': 0.005040645599365234, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# pyBigWig_max {'approx_run_time': 1.2673799991607666, 'exact_run_time': 0.7933700084686279, 'error': {'percent_error': 0.10220448242023446, 'ms_error': 1.2678718593032368, 'abs_error': 0.25865022624731066, 'not_included': 79}}\n# min {'run_time': 0.005083560943603516, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# pyBigWig_min {'approx_run_time': 1.2120039463043213, 'exact_run_time': 0.7468140125274658, 'error': {'percent_error': 0.0001, 'ms_error': 7.109862619931795e-07, 'abs_error': 8.432000130414962e-06, 'not_included': 0}}\n# coverage {'run_time': 0.0063626766204833984, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# pyBigWig_coverage {'approx_run_time': 1.2101118564605713, 'exact_run_time': 0.7483360767364502, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}\n# std {'run_time': 0.0422673225402832, 'error': {'percent_error': 9.690484548456011e-05, 'ms_error': 4.764358150024449e-09, 'abs_error': 6.25265457158463e-05, 'not_included': 0}}\n# pyBigWig_std {'approx_run_time': 1.219078540802002, 'exact_run_time': 0.7484426498413086, 'error': {'percent_error': 0.04560011737269686, 'ms_error': 0.005008324729263816, 'abs_error': 0.02569405301725115, 'not_included': 79}}\n```\n\n## Testing pyBedGraph\nSome tests are provided in `test/test.py`. Additional bedgraph and bigwig files for ENCFF376VCU are needed to run extensive_test.py. Build badge comes from a forked repository, [https://github.com/c0ver/pyBedGraph](https://github.com/c0ver/pyBedGraph), that has the same version as this repository.\n\n## Reference \n[pyBedGraph: a Python package for fast operations on 1-dimensional genomic signal tracks](https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa061/5733724), Zhang et al., Bioinformatics, 2020\n\n## Common Errors\n```\npyBedGraph/include_missing_bp.pyx in pyBedGraph.include_missing_bp.get_exact_means()\npyBedGraph/include_missing_bp.pyx in pyBedGraph.include_missing_bp.get_exact_means()\nIndexError: Out of bounds on buffer access (axis 0)\n```\nThis is frequently caused by giving an interval that is outside the chromosome size.\n\nNote that bedgraph files need to be sorted.  To do so, try\n``` sort -k1,1 -k2,2 example.bedgraph > example.sorted.bedgraph```\n\n## Bug reports\nTo report bugs, contact Henry (henrybzhang.99@gmail.com) and Minji (minji.kim@jax.org) or visit the [Issues](https://github.com/TheJacksonLaboratory/pyBedGraph/issues) page.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TheJacksonLaboratory/pyBedGraph", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyBedGraph", "package_url": "https://pypi.org/project/pyBedGraph/", "platform": "", "project_url": "https://pypi.org/project/pyBedGraph/", "project_urls": {"Homepage": "https://github.com/TheJacksonLaboratory/pyBedGraph"}, "release_url": "https://pypi.org/project/pyBedGraph/0.5.43/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package for fast operations on 1-dimensional genomic signal tracks", "version": "0.5.43", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/c0ver/pyBedGraph\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a64ac017c5f292662a11a937353172855948e02d/68747470733a2f2f7472617669732d63692e6f72672f63307665722f707942656447726170682e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>pyBedGraph</h1>\n<p>A Python package for fast operations on 1-dimensional genomic signal tracks.</p>\n<h2>Features</h2>\n<ul>\n<li>Finds the mean, approx. mean, max, min, coverage, or standard deviation for a given interval in a bedGraph file</li>\n<li>Partly written in Cython for speed improvements</li>\n<li>Can look up exact statistics of 1 million regions in ~0.26 second on a conventional laptop</li>\n<li>An approximate mean for 10,000 regions can be computed in ~0.0012 second w/ error rate of less than 5 percent</li>\n</ul>\n<h2>Drawbacks</h2>\n<ul>\n<li>Uses memory to load files\n<ul>\n<li>16 bytes per line in bedGraph file</li>\n<li>4 bytes per basePair in every chromosome loaded</li>\n</ul>\n</li>\n<li>Loading the bedGraph file can take up to a minute or two</li>\n<li>Only works with sorted bedgraph files</li>\n</ul>\n<h2>Installation</h2>\n<p>Dependency requirements:</p>\n<ul>\n<li>Numpy &gt;= v1.16.4</li>\n<li>pyBigWig &gt;= v0.3.16 (For reading bigWig files)\n<ul>\n<li>pyBigWig == 0.3.16 (For Benchmarking)</li>\n</ul>\n</li>\n</ul>\n<p>With pip:</p>\n<pre>pip3 install pyBedGraph\npip3 install pyBigWig <span class=\"c1\"># if using bigwig files</span>\n</pre>\n<p>With conda:</p>\n<pre>conda create -n <span class=\"nb\">test</span>\nconda activate <span class=\"nb\">test</span>\nconda install -c bioconda pyBedGraph\nconda install -c bioconda pyBigWig <span class=\"c1\"># if using bigwig files</span>\n</pre>\n<h2>Usage</h2>\n<h3>Download the test files here:</h3>\n<p><a href=\"https://thejacksonlaboratory.ent.box.com/s/3jglutwf3d54pnomnp33ivo7a9546vhe\" rel=\"nofollow\">https://thejacksonlaboratory.ent.box.com/s/3jglutwf3d54pnomnp33ivo7a9546vhe</a></p>\n<p>Test files are also included in this Github repository: <code>test/test_files</code>.</p>\n<p>Enter the directory with the test files.</p>\n<h3>Create the object:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyBedGraph</span> <span class=\"kn\">import</span> <span class=\"n\">BedGraph</span>\n\n<span class=\"c1\"># arg1 - chromosome sizes file</span>\n<span class=\"c1\"># arg2 - bedgraph file</span>\n<span class=\"c1\"># arg3 - (optional) chromosome_name</span>\n<span class=\"c1\"># Just load chromosome 'chr1' (uses less memory and takes less time)</span>\n<span class=\"n\">bedGraph</span> <span class=\"o\">=</span> <span class=\"n\">BedGraph</span><span class=\"p\">(</span><span class=\"s1\">'myChrom.sizes'</span><span class=\"p\">,</span> <span class=\"s1\">'random_test.bedGraph'</span><span class=\"p\">,</span> <span class=\"s1\">'chr1'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load the whole bedGraph file</span>\n<span class=\"n\">bedGraph</span> <span class=\"o\">=</span> <span class=\"n\">BedGraph</span><span class=\"p\">(</span><span class=\"s1\">'myChrom.sizes'</span><span class=\"p\">,</span> <span class=\"s1\">'random_test.bedGraph'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Option to not ignore missing basePairs when calculating statistics</span>\n<span class=\"c1\"># Used the exact same way but produces slightly different results</span>\n<span class=\"n\">inclusive_bedGraph</span> <span class=\"o\">=</span> <span class=\"n\">BedGraph</span><span class=\"p\">(</span><span class=\"s1\">'myChrom.sizes'</span><span class=\"p\">,</span> <span class=\"s1\">'random_test.bedGraph'</span><span class=\"p\">,</span> <span class=\"n\">ignore_missing_bp</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h3>Choose and load a chromosome to search for:</h3>\n<pre><span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">load_chrom_data</span><span class=\"p\">(</span><span class=\"s1\">'chr1'</span><span class=\"p\">)</span>\n<span class=\"n\">inclusive_bedGraph</span><span class=\"o\">.</span><span class=\"n\">load_chrom_data</span><span class=\"p\">(</span><span class=\"s1\">'chr1'</span><span class=\"p\">)</span>\n</pre>\n<h3>Load bins for finding mean:</h3>\n<p>For approx_mean:</p>\n<ol>\n<li>Smaller bin size -&gt; more accurate but slower</li>\n<li>Larger bin size -&gt; less accurate but faster</li>\n</ol>\n<pre><span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">load_chrom_bins</span><span class=\"p\">(</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">inclusive_bedGraph</span><span class=\"o\">.</span><span class=\"n\">load_chrom_bins</span><span class=\"p\">(</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h3>Choose a specific statistic to search for:</h3>\n<ul>\n<li><code>'mean'</code></li>\n<li><code>'approx_mean'</code> - an approximate mean is faster than exact mean, with &lt; 5% error rate</li>\n<li><code>'max'</code></li>\n<li><code>'min'</code></li>\n<li><code>'coverage'</code></li>\n<li><code>'std'</code> - (population standard deviation)</li>\n</ul>\n<h3>Search from a list of intervals:</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Option 1</span>\n<span class=\"n\">test_intervals</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">26</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"o\">=</span><span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [-1.          0.9         0.1        -1.          0.82        0.72222222]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Option 2</span>\n<span class=\"n\">start_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n<span class=\"n\">end_list</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n<span class=\"n\">chrom_name</span> <span class=\"o\">=</span> <span class=\"s1\">'chr1'</span>\n\n<span class=\"c1\"># arg1 - (optional) stat (default is 'mean')</span>\n<span class=\"c1\"># arg2 - intervals</span>\n<span class=\"c1\"># arg3 - start_list</span>\n<span class=\"c1\"># arg4 - end_list</span>\n<span class=\"c1\"># arg5 - chrom_name</span>\n<span class=\"c1\"># must have either intervals or start_list, end_list, chrom_name</span>\n<span class=\"c1\"># returns a numpy array of values</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"n\">start_list</span><span class=\"o\">=</span><span class=\"n\">start_list</span><span class=\"p\">,</span> <span class=\"n\">end_list</span><span class=\"o\">=</span><span class=\"n\">end_list</span><span class=\"p\">,</span> <span class=\"n\">chrom_name</span><span class=\"o\">=</span><span class=\"n\">chrom_name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [-1.          0.9         0.1        -1.          0.82        0.72222222]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<h3>Search from a file:</h3>\n<pre><span class=\"c1\"># arg1 - interval file</span>\n<span class=\"c1\"># arg2 - (optional) output_to_file (default is True and outputs to 'chr1_out.txt'</span>\n<span class=\"c1\"># arg3 - (optional) stat (default is 'mean')</span>\n<span class=\"c1\"># returns a dictionary; keys are chromosome names, values are numpy arrays</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats_from_file</span><span class=\"p\">(</span><span class=\"s1\">'test_intervals.txt'</span><span class=\"p\">,</span> <span class=\"n\">output_to_file</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">stat</span><span class=\"o\">=</span><span class=\"s1\">'mean'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># {'chr1': array([-1.        ,  0.9       ,  0.1       , -1.        ,  0.82      ,</span>\n<span class=\"c1\">#        0.72222222])}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<h3>Sample Tests (from included test files):</h3>\n<pre><span class=\"c1\"># [-1.    0.9   0.1  -1.    0.82    0.72222222]</span>\n<span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'mean'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [-1.          0.9         0.1        -1.          0.80769231  0.72222222]</span>\n<span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'approx_mean'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [0.         0.33333333 0.25       0.         1.         0.3       ]</span>\n<span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'coverage'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [-1.   0.9  0.1 -1.   0.7  0.1]</span>\n<span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'min'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [-1.   0.9  0.1 -1.   0.9  1. ]</span>\n<span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'max'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [-1.          0.          0.         -1.          0.09797959  0.27799991]</span>\n<span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'std'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\"># [0.         0.3        0.025      0.         0.82       0.21666667]</span>\n<span class=\"n\">inclusive_bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'mean'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [0.         0.3        0.00833333 0.         0.7        0.21666667]</span>\n<span class=\"n\">inclusive_bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'approx_mean'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [0.         0.33333333 0.25       0.         1.         0.3       ]</span>\n<span class=\"n\">inclusive_bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'coverage'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [0.  0.  0.1 0.  0.7 0.1]</span>\n<span class=\"n\">inclusive_bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'min'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [0.  0.9 0.1 0.  0.9 1. ]</span>\n<span class=\"n\">inclusive_bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'max'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [0.         0.42426407 0.04330127 0.         0.09797959 0.36431061]</span>\n<span class=\"n\">inclusive_bedGraph</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">(</span><span class=\"s1\">'std'</span><span class=\"p\">,</span> <span class=\"n\">test_intervals</span><span class=\"p\">)</span>\n</pre>\n<h2>Benchmarking pyBedGraph</h2>\n<p>Actual values are found from the <code>stats</code> function in pyBigWig with the <code>exact</code> argument being <code>True</code>. The error for exact stats will be ~1e-8 due to rounding error of conversion of bigWig and bedGraph files.</p>\n<p>Alternatively, one can make actual values be pyBedGraph's exact statistics.</p>\n<p>Enter the <code>graphs</code> folder in the Github project repository.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyBedGraph</span> <span class=\"kn\">import</span> <span class=\"n\">BedGraph</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Benchmark</span> <span class=\"kn\">import</span> <span class=\"n\">Benchmark</span>\n\n<span class=\"c1\"># These files can be downloaded from the link given above</span>\n<span class=\"n\">bedGraph</span> <span class=\"o\">=</span> <span class=\"n\">BedGraph</span><span class=\"p\">(</span><span class=\"s1\">'mm10.chrom.sizes'</span><span class=\"p\">,</span> <span class=\"s1\">'ENCFF376VCU.bedGraph'</span><span class=\"p\">,</span> <span class=\"s1\">'chr1'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Alternatively using a bigwig file</span>\n<span class=\"c1\"># bedGraph = BedGraph('mm10.chrom.sizes', 'ENCFF376VCU.bigWig', 'chr1')</span>\n\n<span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">load_chrom_data</span><span class=\"p\">(</span><span class=\"s1\">'chr1'</span><span class=\"p\">)</span>\n<span class=\"n\">bedGraph</span><span class=\"o\">.</span><span class=\"n\">load_chrom_bins</span><span class=\"p\">(</span><span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># arg1 - BedGraph object</span>\n<span class=\"c1\"># arg2 - bigwig file</span>\n<span class=\"n\">bench</span> <span class=\"o\">=</span> <span class=\"n\">Benchmark</span><span class=\"p\">(</span><span class=\"n\">bedGraph</span><span class=\"p\">,</span> <span class=\"s1\">'ENCFF376VCU.bigWig'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># arg1 - num_tests</span>\n<span class=\"c1\"># arg2 - interval_size</span>\n<span class=\"c1\"># arg3 - chrom_nam</span>\n<span class=\"c1\"># arg4 - bin_size</span>\n<span class=\"c1\"># arg5 - stats (optional) (Default is all stats)</span>\n<span class=\"c1\"># arg6 - just_runtime (optional) (Default is False)</span>\n<span class=\"c1\"># arg6 - bench_pyBigWig_approx (optional) (Default is True)</span>\n<span class=\"c1\"># arg6 - make_pyBigWig_baseline (optional) (Default is True)</span>\n<span class=\"c1\"># Test all statistics</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">bench</span><span class=\"o\">.</span><span class=\"n\">benchmark</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"s1\">'chr1'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># mean {'run_time': 0.008324861526489258, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}</span>\n<span class=\"c1\"># pyBigWig_mean {'approx_run_time': 1.4333949089050293, 'exact_run_time': 0.7698564529418945, 'error': {'percent_error': 0.06567272540694802, 'ms_error': 0.001222419386871348, 'abs_error': 0.023540340949669364, 'not_included': 79}}</span>\n<span class=\"c1\"># approx_mean {'run_time': 0.002111673355102539, 'error': {'percent_error': 0.006529644707171326, 'ms_error': 7.858080037556034e-06, 'abs_error': 0.001824641073039555, 'not_included': 4}}</span>\n<span class=\"c1\"># max {'run_time': 0.005040645599365234, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}</span>\n<span class=\"c1\"># pyBigWig_max {'approx_run_time': 1.2673799991607666, 'exact_run_time': 0.7933700084686279, 'error': {'percent_error': 0.10220448242023446, 'ms_error': 1.2678718593032368, 'abs_error': 0.25865022624731066, 'not_included': 79}}</span>\n<span class=\"c1\"># min {'run_time': 0.005083560943603516, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}</span>\n<span class=\"c1\"># pyBigWig_min {'approx_run_time': 1.2120039463043213, 'exact_run_time': 0.7468140125274658, 'error': {'percent_error': 0.0001, 'ms_error': 7.109862619931795e-07, 'abs_error': 8.432000130414962e-06, 'not_included': 0}}</span>\n<span class=\"c1\"># coverage {'run_time': 0.0063626766204833984, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}</span>\n<span class=\"c1\"># pyBigWig_coverage {'approx_run_time': 1.2101118564605713, 'exact_run_time': 0.7483360767364502, 'error': {'percent_error': 0.0, 'ms_error': 0.0, 'abs_error': 0.0, 'not_included': 0}}</span>\n<span class=\"c1\"># std {'run_time': 0.0422673225402832, 'error': {'percent_error': 9.690484548456011e-05, 'ms_error': 4.764358150024449e-09, 'abs_error': 6.25265457158463e-05, 'not_included': 0}}</span>\n<span class=\"c1\"># pyBigWig_std {'approx_run_time': 1.219078540802002, 'exact_run_time': 0.7484426498413086, 'error': {'percent_error': 0.04560011737269686, 'ms_error': 0.005008324729263816, 'abs_error': 0.02569405301725115, 'not_included': 79}}</span>\n</pre>\n<h2>Testing pyBedGraph</h2>\n<p>Some tests are provided in <code>test/test.py</code>. Additional bedgraph and bigwig files for ENCFF376VCU are needed to run extensive_test.py. Build badge comes from a forked repository, <a href=\"https://github.com/c0ver/pyBedGraph\" rel=\"nofollow\">https://github.com/c0ver/pyBedGraph</a>, that has the same version as this repository.</p>\n<h2>Reference</h2>\n<p><a href=\"https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btaa061/5733724\" rel=\"nofollow\">pyBedGraph: a Python package for fast operations on 1-dimensional genomic signal tracks</a>, Zhang et al., Bioinformatics, 2020</p>\n<h2>Common Errors</h2>\n<pre><code>pyBedGraph/include_missing_bp.pyx in pyBedGraph.include_missing_bp.get_exact_means()\npyBedGraph/include_missing_bp.pyx in pyBedGraph.include_missing_bp.get_exact_means()\nIndexError: Out of bounds on buffer access (axis 0)\n</code></pre>\n<p>This is frequently caused by giving an interval that is outside the chromosome size.</p>\n<p>Note that bedgraph files need to be sorted.  To do so, try\n<code>sort -k1,1 -k2,2 example.bedgraph &gt; example.sorted.bedgraph</code></p>\n<h2>Bug reports</h2>\n<p>To report bugs, contact Henry (<a href=\"mailto:henrybzhang.99@gmail.com\">henrybzhang.99@gmail.com</a>) and Minji (<a href=\"mailto:minji.kim@jax.org\">minji.kim@jax.org</a>) or visit the <a href=\"https://github.com/TheJacksonLaboratory/pyBedGraph/issues\" rel=\"nofollow\">Issues</a> page.</p>\n\n          </div>"}, "last_serial": 6946947, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "27bbd9140df9c4292f3c85f355fb4ce2", "sha256": "234e7a63f3808955284ae71b89f4e76b4dd02310f4a7a4825c6390738d80403a"}, "downloads": -1, "filename": "pyBedGraph-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "27bbd9140df9c4292f3c85f355fb4ce2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8931, "upload_time": "2019-06-27T22:40:05", "upload_time_iso_8601": "2019-06-27T22:40:05.518240Z", "url": "https://files.pythonhosted.org/packages/ff/82/2751b7cc8b0cfbd52102e15536cfdde4549f8c6f49ed88e6201c13fa7f53/pyBedGraph-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21dbbdee4d16999fc6cc7eccb0613e26", "sha256": "e50319a6c79f62d16be824327b00d5f24eeba57b7336f4b0c909fbcfc31cc57f"}, "downloads": -1, "filename": "pyBedGraph-0.1.tar.gz", "has_sig": false, "md5_digest": "21dbbdee4d16999fc6cc7eccb0613e26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6696, "upload_time": "2019-06-27T22:40:07", "upload_time_iso_8601": "2019-06-27T22:40:07.792187Z", "url": "https://files.pythonhosted.org/packages/8a/15/696d8731ff29d70c7314fc7a21e5c4a76da217f9879f71b92ef634b063a2/pyBedGraph-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e9e6850019baf7c75dff541f03f00bec", "sha256": "6de6af858ad9b0e3afc6f240e13c715e87d012fe300073959634626dd9f2d0eb"}, "downloads": -1, "filename": "pyBedGraph-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9e6850019baf7c75dff541f03f00bec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9116, "upload_time": "2019-06-27T23:10:02", "upload_time_iso_8601": "2019-06-27T23:10:02.696155Z", "url": "https://files.pythonhosted.org/packages/9f/4b/5fb93b5a104c0d0a29aef9b3d7bd6721ad57d97cf5687c412272da761c58/pyBedGraph-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8037919d28b0eea35f20ef08a78b4954", "sha256": "32d81502681660d5797ba62b8153248c6ca3af0e0bd4873d0dfc53e1ff15a952"}, "downloads": -1, "filename": "pyBedGraph-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8037919d28b0eea35f20ef08a78b4954", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6745, "upload_time": "2019-06-27T23:10:05", "upload_time_iso_8601": "2019-06-27T23:10:05.645578Z", "url": "https://files.pythonhosted.org/packages/f5/f9/b5469a022fad42c2adf62526f4523cdd298be4ce63ea0cb9120291c845fb/pyBedGraph-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "87a525f9f2e6dc12c45120f29efee7f0", "sha256": "1c972f6b5d3db827adf471e3c29551a35cf94f4842e92dc2f74419df8336bdf8"}, "downloads": -1, "filename": "pyBedGraph-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "87a525f9f2e6dc12c45120f29efee7f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9094, "upload_time": "2019-06-27T23:10:04", "upload_time_iso_8601": "2019-06-27T23:10:04.114589Z", "url": "https://files.pythonhosted.org/packages/7f/fa/6977839bab49d87486e576503ccadd2bcb033526026272e90a2b8ab649ad/pyBedGraph-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "08e887a5205caa539d1d0c8ec4411e8e", "sha256": "147664403dbec1206e2b7b8960851ecb1281f7619c44846de2f4126949410b17"}, "downloads": -1, "filename": "pyBedGraph-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "08e887a5205caa539d1d0c8ec4411e8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8149, "upload_time": "2019-06-28T14:42:37", "upload_time_iso_8601": "2019-06-28T14:42:37.437552Z", "url": "https://files.pythonhosted.org/packages/0c/7f/65ca4c6cf98852c26785033a7ea896d423947433edc28a81538c06dceb84/pyBedGraph-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2406c0cec137afa1ecc7d3167a9f633", "sha256": "f66d4c9e6e3af141aba6f89f3736d4aaee35dacd4660516797998aaa35ee3c85"}, "downloads": -1, "filename": "pyBedGraph-0.3.tar.gz", "has_sig": false, "md5_digest": "a2406c0cec137afa1ecc7d3167a9f633", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6176, "upload_time": "2019-06-28T14:42:38", "upload_time_iso_8601": "2019-06-28T14:42:38.825786Z", "url": "https://files.pythonhosted.org/packages/63/e6/a664646263702738e3a61d5c64be8572cfa5666a4ab7f03db0479006ad54/pyBedGraph-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "399c20906962854b8fc10a1e8745c31d", "sha256": "094b91f3ecc3fc4e6d9b5907488c81b1ee3fe093c46ea02595a283471753c8fe"}, "downloads": -1, "filename": "pyBedGraph-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "399c20906962854b8fc10a1e8745c31d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8171, "upload_time": "2019-06-28T14:51:32", "upload_time_iso_8601": "2019-06-28T14:51:32.512506Z", "url": "https://files.pythonhosted.org/packages/eb/e6/ae7e5c805de5dcce6a6c5c87f6a8c9c98acf53f94d81a956287877ffc423/pyBedGraph-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ccf7ffc53459cb9b3aff832dfbd5020", "sha256": "9e538bb0e31664f97aca699f542152f392b6ee5d5d52675ebb110d487da03185"}, "downloads": -1, "filename": "pyBedGraph-0.3.1.tar.gz", "has_sig": false, "md5_digest": "5ccf7ffc53459cb9b3aff832dfbd5020", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6184, "upload_time": "2019-06-28T14:51:33", "upload_time_iso_8601": "2019-06-28T14:51:33.853532Z", "url": "https://files.pythonhosted.org/packages/a8/d2/f3b7dfbc271f4ac62a4295e859de9a60483e3c7047600402b61766a82b04/pyBedGraph-0.3.1.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "63fbdab3338d3f40edd903f475fce9ab", "sha256": "67ebec86f46835afe09dbd62f9616735a936f03b90824a8098d3220b08fc6e5d"}, "downloads": -1, "filename": "pyBedGraph-0.4.1.tar.gz", "has_sig": false, "md5_digest": "63fbdab3338d3f40edd903f475fce9ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 345823, "upload_time": "2019-07-11T20:52:26", "upload_time_iso_8601": "2019-07-11T20:52:26.058824Z", "url": "https://files.pythonhosted.org/packages/5a/f0/6aea1ea89e9385bcac8caa8e25f01e5ee2c420ea336759e7630cc127d76f/pyBedGraph-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "10aad32050fa7fcecf536ec8ca8476dd", "sha256": "b0eda13398b55c2e5fff7a3c0e01bf7d114f85d2b5419cd09a56c675bc9abecc"}, "downloads": -1, "filename": "pyBedGraph-0.5.0.tar.gz", "has_sig": false, "md5_digest": "10aad32050fa7fcecf536ec8ca8476dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 355647, "upload_time": "2019-07-18T17:56:58", "upload_time_iso_8601": "2019-07-18T17:56:58.546785Z", "url": "https://files.pythonhosted.org/packages/82/c9/12a628dccea68d7732db5f6d1477774e792e0cb86d266b96afb55f300f79/pyBedGraph-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "df3cf1fda1fb3ef40c18e395e3e9a35a", "sha256": "2a5d8a66492cc93b285536505ebaba9be1df26fc657815154cdd57b463f44617"}, "downloads": -1, "filename": "pyBedGraph-0.5.1.tar.gz", "has_sig": false, "md5_digest": "df3cf1fda1fb3ef40c18e395e3e9a35a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 355835, "upload_time": "2019-07-19T15:34:11", "upload_time_iso_8601": "2019-07-19T15:34:11.336528Z", "url": "https://files.pythonhosted.org/packages/40/da/b9432a07a366c3f3ba2b7a81ec482ecad316749463263c197d371cefa8f7/pyBedGraph-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "b0cc40a398ddc8efc07630738ab06a76", "sha256": "81708ea44e68457e9a4c8200749d1136ca48392bd8f3c3ad84f8d5567b08367c"}, "downloads": -1, "filename": "pyBedGraph-0.5.2.tar.gz", "has_sig": false, "md5_digest": "b0cc40a398ddc8efc07630738ab06a76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 353628, "upload_time": "2019-07-19T16:25:16", "upload_time_iso_8601": "2019-07-19T16:25:16.024316Z", "url": "https://files.pythonhosted.org/packages/1a/c3/51e0b758d5e5e98bf5aad7665148da9571c7fa121c7df67a44792e6a71f5/pyBedGraph-0.5.2.tar.gz", "yanked": false}], "0.5.21": [{"comment_text": "", "digests": {"md5": "acb7011892131b6c0685acd67064f4c8", "sha256": "75c2c2a815f95e038fdb5f7f1dad9c5841b19b953bfcf3816a51dddfe03177c8"}, "downloads": -1, "filename": "pyBedGraph-0.5.21.tar.gz", "has_sig": false, "md5_digest": "acb7011892131b6c0685acd67064f4c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 353781, "upload_time": "2019-07-19T18:19:25", "upload_time_iso_8601": "2019-07-19T18:19:25.372692Z", "url": "https://files.pythonhosted.org/packages/42/c6/f68a8753e19bf06e8eb2ad181a44d34da3f41779bb8de67421c1c79b4f42/pyBedGraph-0.5.21.tar.gz", "yanked": false}], "0.5.22": [{"comment_text": "", "digests": {"md5": "49778d6448d9552916b61154198e4e5d", "sha256": "d2263b51af01de2ca30bc5bf92c9aed4f9b8cf831bf25e699c8472a88963d053"}, "downloads": -1, "filename": "pyBedGraph-0.5.22.tar.gz", "has_sig": false, "md5_digest": "49778d6448d9552916b61154198e4e5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 357365, "upload_time": "2019-08-15T17:40:13", "upload_time_iso_8601": "2019-08-15T17:40:13.707226Z", "url": "https://files.pythonhosted.org/packages/78/81/0da47f00957e82d0e02ca1756f4a3c29d313cf9dd796d08442e9e0d600f6/pyBedGraph-0.5.22.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "1e7800536a34d732ab54edcf42222ad2", "sha256": "4ec4c4d2322022e1c7bc9905a648fb732f0f9709a8531eb550cdc5f176d631a9"}, "downloads": -1, "filename": "pyBedGraph-0.5.3.tar.gz", "has_sig": false, "md5_digest": "1e7800536a34d732ab54edcf42222ad2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 359015, "upload_time": "2019-08-21T18:14:14", "upload_time_iso_8601": "2019-08-21T18:14:14.046777Z", "url": "https://files.pythonhosted.org/packages/1d/24/fb04a30be664fffe9c6c54cabaf1cd965b29b9c0ece5770f8695779b7b7d/pyBedGraph-0.5.3.tar.gz", "yanked": false}], "0.5.30": [{"comment_text": "", "digests": {"md5": "93b2c78078b5bd2527eb115c2cc34586", "sha256": "0448135ea6f7c8d248ac13ef2fff06bedc9dadd43e51247b093760676e82a98a"}, "downloads": -1, "filename": "pyBedGraph-0.5.30.tar.gz", "has_sig": false, "md5_digest": "93b2c78078b5bd2527eb115c2cc34586", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 359029, "upload_time": "2019-08-21T18:19:57", "upload_time_iso_8601": "2019-08-21T18:19:57.930603Z", "url": "https://files.pythonhosted.org/packages/c8/4c/e6364564bc6227092e571751ccc4ba080ccba4ffee852ce70ccd8b882d30/pyBedGraph-0.5.30.tar.gz", "yanked": false}], "0.5.31": [{"comment_text": "", "digests": {"md5": "d2fc17fb427c76e7dd4ea56f0415e8f7", "sha256": "3f88fa71751eae27e0792bcbb8c4f48866b194d9b5d15d05bb6242f298e48f5a"}, "downloads": -1, "filename": "pyBedGraph-0.5.31.tar.gz", "has_sig": false, "md5_digest": "d2fc17fb427c76e7dd4ea56f0415e8f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 359195, "upload_time": "2019-09-13T20:38:02", "upload_time_iso_8601": "2019-09-13T20:38:02.607092Z", "url": "https://files.pythonhosted.org/packages/07/f1/f37eb4eaa6cb9b34090539fbf55f8d3e22b5cf29d6827c0f701761212b3e/pyBedGraph-0.5.31.tar.gz", "yanked": false}], "0.5.32": [{"comment_text": "", "digests": {"md5": "647ca9ac379ec78273cad064d99df6e9", "sha256": "b18ed0d56b2f62b9f46a14551b12b19601d33dc39062d391053c0686c0e7b530"}, "downloads": -1, "filename": "pyBedGraph-0.5.32.tar.gz", "has_sig": false, "md5_digest": "647ca9ac379ec78273cad064d99df6e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 358828, "upload_time": "2019-09-19T17:51:11", "upload_time_iso_8601": "2019-09-19T17:51:11.891777Z", "url": "https://files.pythonhosted.org/packages/00/ef/9005f4916c3ffeb21be99d4e173c1e84aa1aaaa9248f2ed6552057848e2c/pyBedGraph-0.5.32.tar.gz", "yanked": false}], "0.5.33": [{"comment_text": "", "digests": {"md5": "0d8f99cc4d7a7456c42c520eaf9173ab", "sha256": "a117863499fd85772b6d73daa0d5a4443efcc26c2afbcbfa7238afc2eb22c0e9"}, "downloads": -1, "filename": "pyBedGraph-0.5.33.tar.gz", "has_sig": false, "md5_digest": "0d8f99cc4d7a7456c42c520eaf9173ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 359096, "upload_time": "2019-10-10T04:36:37", "upload_time_iso_8601": "2019-10-10T04:36:37.871001Z", "url": "https://files.pythonhosted.org/packages/38/c4/0d8595140630e79859b92bc9ee0afca9fabd47da078fe5c22f6a338d32b7/pyBedGraph-0.5.33.tar.gz", "yanked": false}], "0.5.34": [{"comment_text": "", "digests": {"md5": "7d32b6204188bb5407648aa3af704b46", "sha256": "d977000762a4514a2d519a7de23930f70159941c0a7c93fde76a93343a66df29"}, "downloads": -1, "filename": "pyBedGraph-0.5.34.tar.gz", "has_sig": false, "md5_digest": "7d32b6204188bb5407648aa3af704b46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 356509, "upload_time": "2019-10-20T01:30:00", "upload_time_iso_8601": "2019-10-20T01:30:00.509632Z", "url": "https://files.pythonhosted.org/packages/a7/6e/d318d7e874588cbb31cfd702165c7fe9bca3685484e4645febaf27e340c3/pyBedGraph-0.5.34.tar.gz", "yanked": false}], "0.5.35": [{"comment_text": "", "digests": {"md5": "d14034c1128045b63862073cddefc1ef", "sha256": "43c8658caac0eff943323f963c13d20c2f3f553319cf3fc8fa8857129c0dc074"}, "downloads": -1, "filename": "pyBedGraph-0.5.35.tar.gz", "has_sig": false, "md5_digest": "d14034c1128045b63862073cddefc1ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 352732, "upload_time": "2019-10-20T01:33:30", "upload_time_iso_8601": "2019-10-20T01:33:30.237199Z", "url": "https://files.pythonhosted.org/packages/ac/da/df8550b7d31b3a6210c8faa83281d6db4276367cce31ccb8c640290d2b77/pyBedGraph-0.5.35.tar.gz", "yanked": false}], "0.5.36": [{"comment_text": "", "digests": {"md5": "8f5b91cf879ae3f18d105586e864036c", "sha256": "2c1c34c5bbdf8665f7a54ecd4c8603d2aa2fd914d610b670a1d9b7d992bd2cf3"}, "downloads": -1, "filename": "pyBedGraph-0.5.36.tar.gz", "has_sig": false, "md5_digest": "8f5b91cf879ae3f18d105586e864036c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 356792, "upload_time": "2019-12-17T01:53:10", "upload_time_iso_8601": "2019-12-17T01:53:10.989429Z", "url": "https://files.pythonhosted.org/packages/14/08/266c18ddcd55292724b99b2a23c545733099f594fce84987ee66eea52cea/pyBedGraph-0.5.36.tar.gz", "yanked": false}], "0.5.37": [{"comment_text": "", "digests": {"md5": "94e7f11b3fd88e3bd5675444ee5389aa", "sha256": "79b812f2ee460aa2352aa009b10a6e0506a6d3a2a60d2b16ab42abcdee817fdc"}, "downloads": -1, "filename": "pyBedGraph-0.5.37.tar.gz", "has_sig": false, "md5_digest": "94e7f11b3fd88e3bd5675444ee5389aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 353325, "upload_time": "2019-12-18T00:09:03", "upload_time_iso_8601": "2019-12-18T00:09:03.207821Z", "url": "https://files.pythonhosted.org/packages/7a/26/e954d405ea0dee658201736458497b74ed586eaf414544f37d3ad08a88c9/pyBedGraph-0.5.37.tar.gz", "yanked": false}], "0.5.38": [{"comment_text": "", "digests": {"md5": "24bb77e27aae7e2a6c4b2b475c533928", "sha256": "b19381fe7245ba5957e5b1790dd531e92848a3b494aa24da05f2bec4074cb02a"}, "downloads": -1, "filename": "pyBedGraph-0.5.38.tar.gz", "has_sig": false, "md5_digest": "24bb77e27aae7e2a6c4b2b475c533928", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 353448, "upload_time": "2019-12-18T22:01:31", "upload_time_iso_8601": "2019-12-18T22:01:31.753809Z", "url": "https://files.pythonhosted.org/packages/10/79/d02ed41f7c2e29b76377076a0345f77910a844fe62b2066c1999a722c3e2/pyBedGraph-0.5.38.tar.gz", "yanked": false}], "0.5.39": [{"comment_text": "", "digests": {"md5": "eba011cfb6a472c0ef0964dee184c80f", "sha256": "ca216b4717e8cb30d54d4cfb145212ff56d251c0e944c17a09890f1c9e714097"}, "downloads": -1, "filename": "pyBedGraph-0.5.39.tar.gz", "has_sig": false, "md5_digest": "eba011cfb6a472c0ef0964dee184c80f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 353945, "upload_time": "2019-12-23T16:10:49", "upload_time_iso_8601": "2019-12-23T16:10:49.585539Z", "url": "https://files.pythonhosted.org/packages/0d/6d/72457710bd46dd6676243dbcbc58c70083f95f0c728f7d2a80c08bef8c15/pyBedGraph-0.5.39.tar.gz", "yanked": false}], "0.5.41": [{"comment_text": "", "digests": {"md5": "1074ba68f2502db44712c07230638758", "sha256": "1c9852c46d1077312e7893f5a7a883ab5215bc7abdcf610fb749570f3d194806"}, "downloads": -1, "filename": "pyBedGraph-0.5.41.tar.gz", "has_sig": false, "md5_digest": "1074ba68f2502db44712c07230638758", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 354064, "upload_time": "2019-12-26T15:15:33", "upload_time_iso_8601": "2019-12-26T15:15:33.128857Z", "url": "https://files.pythonhosted.org/packages/57/29/444f982a4e366909bb069de32b021c054b8fb3fec6d4b21d06ad3763bf45/pyBedGraph-0.5.41.tar.gz", "yanked": false}], "0.5.42": [{"comment_text": "", "digests": {"md5": "f973048211204d1b6d7a89ef5addb856", "sha256": "3d01b1329aef457f67418f43605483940d0d2e9493d3e6cdbe475e3917361783"}, "downloads": -1, "filename": "pyBedGraph-0.5.42.tar.gz", "has_sig": false, "md5_digest": "f973048211204d1b6d7a89ef5addb856", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 358640, "upload_time": "2019-12-27T20:51:57", "upload_time_iso_8601": "2019-12-27T20:51:57.065072Z", "url": "https://files.pythonhosted.org/packages/e7/0a/31637391f427915c6e0ea110be8c61564477763f2fc5742f632e99cd60ee/pyBedGraph-0.5.42.tar.gz", "yanked": false}], "0.5.43": [{"comment_text": "", "digests": {"md5": "dcbead14d1d090f27f7b65931e9b1556", "sha256": "b3064790c4b47439846ad2d121ba6f9b1b0c2b4810f5aaa7fff8138fe13c86a9"}, "downloads": -1, "filename": "pyBedGraph-0.5.43.tar.gz", "has_sig": false, "md5_digest": "dcbead14d1d090f27f7b65931e9b1556", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 361640, "upload_time": "2020-04-03T22:35:36", "upload_time_iso_8601": "2020-04-03T22:35:36.062516Z", "url": "https://files.pythonhosted.org/packages/69/5f/ca850da21d1357ff1e2d96ead61cff763ae022dbf066f7bfb6b8d7da2e9f/pyBedGraph-0.5.43.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dcbead14d1d090f27f7b65931e9b1556", "sha256": "b3064790c4b47439846ad2d121ba6f9b1b0c2b4810f5aaa7fff8138fe13c86a9"}, "downloads": -1, "filename": "pyBedGraph-0.5.43.tar.gz", "has_sig": false, "md5_digest": "dcbead14d1d090f27f7b65931e9b1556", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 361640, "upload_time": "2020-04-03T22:35:36", "upload_time_iso_8601": "2020-04-03T22:35:36.062516Z", "url": "https://files.pythonhosted.org/packages/69/5f/ca850da21d1357ff1e2d96ead61cff763ae022dbf066f7bfb6b8d7da2e9f/pyBedGraph-0.5.43.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:19 2020"}