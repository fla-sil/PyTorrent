{"info": {"author": "Shoobx, Inc.", "author_email": "dev@shoobx.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython"], "description": "=======================================\n``shoobx.immutable`` -- Immutable Types\n=======================================\n\n.. image:: https://travis-ci.org/Shoobx/shoobx.immutable.png?branch=master\n   :target: https://travis-ci.org/Shoobx/shoobx.immutable\n\n.. image:: https://coveralls.io/repos/github/Shoobx/shoobx.immutable/badge.svg?branch=master\n   :target: https://coveralls.io/github/Shoobx/shoobx.immutable?branch=master\n\n.. image:: https://img.shields.io/pypi/v/shoobx.immutable.svg\n    :target: https://pypi.python.org/pypi/shoobx.immutable\n\n.. image:: https://img.shields.io/pypi/pyversions/shoobx.immutable.svg\n    :target: https://pypi.python.org/pypi/shoobx.immutable/\n\n.. image:: https://readthedocs.org/projects/shoobximmutable/badge/?version=latest\n        :target: http://shoobximmutable.readthedocs.org/en/latest/\n        :alt: Documentation Status\n\nThis library provides a state-based implementation of immutable types,\nincluding lists, sets and dicts. It handles an arbitrarily deep structure of\nnested objects.\n\nIn addition, support for revisioned immutables is provided, which allows for\nfull revision histories of an immutable. A sample implementation of a\nrevisioned immutable manager is also provided.\n\nOptional: A pjpersist-based storage mechanism for revisioned immutables is\nprovided, which allows for easy storage of versioned immutables.\n\n\n================\nUsing Immutables\n================\n\nImmutable objects can make certain complex systems more reasonable, because they\ntightly control when an object is modified and how. It also guarantees that an\nobject can never change for another accessor in a different subsystem.\n\nIntroduction\n------------\n\nLet's start with a simple dictionary:\n\n  >>> import shoobx.immutable as im\n\n  >>> with im.create(im.ImmutableDict) as factory:\n  ...     answer = factory({\n  ...         'question': 'Answer to the ultimate question of life, ...',\n  ...         'answer': 0\n  ...     })\n\n  >>> answer['answer']\n  0\n\nBut no value can be changed anymore:\n\n  >>> answer['answer'] = 42\n  Traceback (most recent call last):\n  ...\n  AttributeError: Cannot update locked immutable object.\n\nImmutable objects are updated through a special context manager that creates a\nnew version of the object that can be modified within the context manager\nblock.\n\n  >>> orig = answer\n  >>> with im.update(answer) as answer:\n  ...     answer['answer'] = 42\n\n  >>> answer['answer']\n  42\n\nNote that the `answer` dictionary is a completely new object and that the\noriginal object is still unmodified.\n\n  >>> orig is not answer\n  True\n  >>> orig['answer']\n  0\n\nOf course we can also create complex object structures, for example by adding\na list:\n\n  >>> with im.update(answer) as answer:\n  ...     answer['witnesses'] = ['Arthur', 'Gag']\n\n  >>> answer['witnesses']\n  ['Arthur', 'Gag']\n\nOf course, the list has been converted to its immutable equal, so that items\ncannot be modified.\n\n  >>> isinstance(answer['witnesses'], im.ImmutableList)\n  True\n  >>> answer['witnesses'].append('Deep Thought')\n  Traceback (most recent call last):\n  ...\n  AttributeError: Cannot update locked immutable object.\n\nHowever, updating from an child/sub-object is not allowed, since creating a\nnew version of a child would sematically modify its parent thus violating the\nimmutability constraint:\n\n  >>> with im.update(answer['witnesses']) as witnesses:\n  ...     pass\n  Traceback (most recent call last):\n  ...\n  AttributeError: update() is only available for master immutables.\n\nThe system accomplishes this by assigning \"master\" and \"slave\" modes to the\nimmutables. The root immutable is the master and any sub-objects below are\nslaves.\n\nImmutable sets are also supported as a core immutable:\n\n  >>> data = im.ImmutableSet({6})\n  >>> data\n  {6}\n\n  >>> with im.update(data) as data:\n  ...     data.discard(6)\n  ...     data.add(9)\n  >>> data\n  {9}\n\n\nCustom Immutables\n-----------------\n\nCreating your own immutable objects is simple:\n\n  >>> class Answer(im.Immutable):\n  ...     def __init__(self, question=None, answer=None, witnesses=None):\n  ...         self.question = question\n  ...         self.answer = answer\n  ...         self.witnesses = witnesses\n\n  >>> answer = Answer('The Answer', 42, ['Arthur', 'Gag'])\n  >>> answer.answer\n  42\n\nNote how the list is automatically converted to its immutable equivalent:\n\n  >>> isinstance(answer.witnesses, im.ImmutableList)\n  True\n\nOf course you cannot modify an immutable other than the update context:\n\n  >>> answer.answer = 54\n  Traceback (most recent call last):\n  ...\n  AttributeError: Cannot update locked immutable object.\n\n  >>> with im.update(answer) as answer:\n  ...     answer.answer = 54\n  >>> answer.answer\n  54\n\n\nRevisioned Immutables\n---------------------\n\nSince mutables create a new object for every change, they are ideal for\ncreating systems that have to keep track of their entire history. This package\nprovides support for such systems by defining a revision manager API and\nrevisioned immutable that are managed within it.\n\nLet's start by creating a custom revisioned immutable:\n\n  >>> class Answer(im.RevisionedImmutable):\n  ...\n  ...     def __init__(self, question=None, answer=None):\n  ...         self.question = question\n  ...         self.answer = answer\n\nA simple implementation of the revision manager API is provided to demonstrate\na possible implementation path.\n\n  >>> data = im.RevisionedMapping()\n  >>> data['a'] = answer = Answer('Answer to the ultimate question')\n\nThe answer is the current revision and has been added to the\nmanager.\n\n  >>> data['a'] is answer\n  True\n\nIn addition to the usual immutability features, the Revisioned\nimmutable has several additional attributes that help with the management of\nthe revisions:\n\n  >>> answer.__im_start_on__\n  datetime.datetime(...)\n  >>> answer.__im_end_on__ is None\n  True\n  >>> answer.__im_manager__\n  <shoobx.immutable.revisioned.SimpleRevisionedImmutableManager ...>\n  >>> answer.__im_creator__ is None\n  True\n  >>> answer.__im_comment__ is None\n  True\n\nThe update API is extended to support setting the creator and comment of the\nchange:\n\n  >>> answer_r1 = answer\n  >>> with im.update(answer, 'universe', 'Provide Answer') as answer:\n  ...     answer.answer = 42\n\nWe now have a second revision of the answer that has the comemnt and creator\nset:\n\n  >>> answer.answer\n  42\n\n  >>> answer.__im_start_on__\n  datetime.datetime(...)\n  >>> answer.__im_end_on__ is None\n  True\n  >>> answer.__im_creator__\n  'universe'\n  >>> answer.__im_comment__\n  'Provide Answer'\n\nThe first revision is now retired and has an end date/time (which equals the\nstart date/time of the new revision):\n\n  >>> answer_r1.__im_start_on__\n  datetime.datetime(...)\n  >>> answer_r1.__im_end_on__ == answer.__im_start_on__\n  True\n  >>> answer_r1.__im_state__ == im.interfaces.IM_STATE_RETIRED\n  True\n\nThe manager has APIs to manage the various revisions.\n\n  >>> revisions = data.getRevisionManager('a')\n  >>> len(revisions.getRevisionHistory())\n  2\n\n  >>> revisions.getCurrentRevision(answer_r1) is answer\n  True\n\nWe can even roll back to a previous revision:\n\n  >>> revisions.rollbackToRevision(answer_r1)\n\n  >>> len(revisions.getRevisionHistory())\n  1\n  >>> answer_r1.__im_end_on__ is None\n  True\n  >>> answer_r1.__im_state__ == im.interfaces.IM_STATE_LOCKED\n  True\n\n\nOptional `pjpersist` Support\n----------------------------\n\nA more serious and production-ready implementation of the revision manager API\nis provided in `shoobx.immutable.pjpersist` which utilizes `pjpersist` to\nstore all data.\n\n\nNotes\n-----\n\nA technical discussion on the system's inner workings is located in the\ndoc strings of the corresponding interfaces. In addition, the tests covera a\nlot of special cases not dicsussed here.\n\n\n=======\nCHANGES\n=======\n\n\n2.0.2 (2020-04-27)\n------------------\n\n- Added `enum.Enum` as immutable type / constant. This allows assigning an\n  Enum to a `ImmutableBase` attribute.\n\n\n2.0.1 (2020-04-23)\n------------------\n\n- Allow ``defaultInfo()`` decorator to be nested.\n\n\n2.0.0 (2020-04-21)\n------------------\n\n- IMPORTANT: Add immutable state as a column to the table. This will require a\n  migration of your database schema and data.\n\n- Introduced new ``IM_STATE_DELETED`` state which marks an object as deleted.\n\n- Add new ``_pj_with_deleted_items`` flag that when set will change the\n  container API to return deleted items as well.\n\n- Added ``ImmutableContainer.withDeletedItems()`` method that will clone the\n  container and set the ``_pj_with_deleted_items`` flag. That will by\n  definition reset all caches to prohibit inconsistent results.\n\n- The ``test_functional_deletionAndRevival()`` demonstrates the deletion and\n  revivial functionality.\n\n\n1.5.0 (2020-04-20)\n------------------\n\n- Honor the ``_pj_remove_documents`` flag in the pjpersist\n  ``ImmutableContainer`` by simply marking the last version of the object as\n  retired and assigning an end date. This way deletions can be undone. Also,\n  audit logs can now be complete.\n\n- Allow the creator and comment to be specified globally, so that APIs don't\n  have to carry that information through all the layers.\n\n\n1.4.3 (2020-02-22)\n------------------\n\n- Make sure that `ImmutableContainer` does not accept transient objects. This\n  is particularly important since objects can be initialized in transient\n  state when not using the `create()` context manager. It also protects the\n  object from being updated in a container before completing its update.\n\n- Refactored `__delitem__` tests to be more minimal and document the use cases\n  more clearly.\n\n\n1.4.2 (2020-02-15)\n------------------\n\n- 1.4.1 was a brown bag release.\n\n\n1.4.1 (2020-02-15)\n------------------\n\n- Missed to re-export `shoobx.immutable.immutable.create`\n\n\n1.4.0 (2020-02-14)\n------------------\n\n- Changed the pattern of creating an immutable object to a context manager.\n  NOTE, just creating an object like `Immutable()` will give you a transient\n  object.\n  The preferred pattern is:\n\n  >>> import shoobx.immutable as im\n  >>> with im.create(im.Immutable) as factory:\n  ...     imObj = factory()\n\n  This makes it way easier to set initial attributes.\n  See README.rst and docs and tests for details.\n\n\n1.3.1 (2020-02-10)\n------------------\n\n- Fixing leftover `_pj_get_resolve_filter` occurrences in `ImmutableContainer`\n\n\n1.3.0 (2020-02-06)\n------------------\n\n- Fix `ImmutableContainer.__delitem__` : In order to delete all revisions of\n  an object, the delete method used an internal super() call to get query\n  filters. That ended up ignoring subclass filters causing deletes across\n  contianer boundaries.\n\n  As a solution, a new `_pj_get_resolve_filter_all_versions` method has been\n  introduced to return a query for all versions within a container. The\n  `_pj_get_resolve_filter` method now uses the other one and simply adds the\n  \"latest version\" constraint. All sub-containers should now override\n  `_pj_get_resolve_filter_all_versions` instead of `_pj_get_resolve_filter`.\n\n\n1.2.1 (2020-02-02)\n------------------\n\n- Fix `ImmutableContainer.__delitem__` : it did not remove revisions of the\n  deleted object\n\n- Fix `ImmutableContainer.rollbackToRevision` : it rolled back ALL objects\n  to the given revision\n\n\n1.2.0 (2020-01-20)\n------------------\n\n- Extended `IRevisionedImmutableManager` to support efficient version\n  management.\n\n  * Added `getNumberOfRevisions(obj)` method to return the number of revisions\n    available for a given object. Note that this does not necessarily equal to\n    the latest revision number.\n\n  * Exended `getRevisionHistory()` with multiple new arguments to support\n    filtering, sorting and batching:\n\n    Filter Arguments:\n\n    * `creator`: The creator of the revision must match the argument.\n\n    * `comment`: The comment must contain the argument as a substring.\n\n    * `startBefore`: The revision must start before the given date/time.\n\n    * `startAfter`: The revision must start after the given date/time.\n\n    Ordering Arguments:\n\n    * `reversed`: When true, the history will be return in reverse\n                  chronological order, specifically the latest revision is\n                  listed first.\n\n    Batching Arguments:\n\n    * `batchStart`: The index at which to start the batch.\n\n    * `batchSize`: The size the of the batch. It is thus the max length of\n                   the iterable.\n\n- Provided an implementation of the new arguments for both the simple revision\n  manage and the pjpersist container.\n\n- Declare that `ImmutableContainer` implements `IRevisionedImmutableManager`.\n\n- Increased test coverage back to 100%.\n\n\n1.1.1 (2019-06-11)\n------------------\n\n- Added `datetime` classes as system immutable types.\n\n\n1.1.0 (2019-05-31)\n------------------\n\n- Introduced `__im_version__` to `IRevisionedImmutable` and use it instead of\n  timestamps to create a chronological order of revisions. (Timestamps might be\n  slightly different accross servers and cause bad history.)\n\n- Do not duplicate implementation of `__im_update__()` in\n  `RevisionedImmutableBase`. Use `__im_[before|after]_update__()` to do all\n  revision-related tasks.\n\n- Tweak `copy()` implementation for `ImmutableList` and `ImmutableDict`.\n\n- Properly implement `ImmutableDict.fromkeys()`.\n\n\n1.0.5 (2019-05-31)\n------------------\n\n- Fix `ImmutableList.copy()` to just work when locked. This allows for only\n  making a shallow clone, since any update will cause a deep copy and thus\n  immutability is guaranteed.\n\n- Implemented `ImmutableDict.copy()`. Raise error on `ImmutableDict.fromkeys()`.\n\n- `ImmutableContainer` also needs an updated `_pj_column_fields` list.\n\n- Minor test fixes.\n\n- Minor documentation fixes and code comment enhancements.\n\n\n1.0.4 (2019-05-30)\n------------------\n\n- Add API documentation.\n\n\n1.0.3 (2019-05-30)\n------------------\n\n- Moved documentation to Read the Docs.\n\n\n1.0.2 (2019-05-30)\n------------------\n\n- Add some readable documentation.\n\n- Added high-level `shoobx.immutable.update(im, *args, **kw)` function.\n\n- Implemented `__repr__()` for `ImmutableSet` to mimic behavior of\n  `ImmutableDict` and `ImmutableList`.\n\n\n1.0.1 (2019-05-30)\n------------------\n\n- Fix package description.\n\n\n1.0.0 (2019-05-30)\n------------------\n\n- Immutable Types, Immutable Dict, Immutable Set, Immutable List\n\n- Revisioned Immutable with Revision Manager sample implementation\n\n- Optional: pjpersist support for immutables. Requires pjpersist>=1.7.0.\n\n- Initial Release", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/shoobx.immutable", "keywords": "immutable revisioned pjpersist", "license": "ZPL 2.1", "maintainer": "", "maintainer_email": "", "name": "shoobx.immutable", "package_url": "https://pypi.org/project/shoobx.immutable/", "platform": "", "project_url": "https://pypi.org/project/shoobx.immutable/", "project_urls": {"Homepage": "http://pypi.python.org/pypi/shoobx.immutable"}, "release_url": "https://pypi.org/project/shoobx.immutable/2.0.2/", "requires_dist": null, "requires_python": "", "summary": "Immutable Types", "version": "2.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"shoobx-immutable-immutable-types\">\n<h2><tt>shoobx.immutable</tt> \u2013 Immutable Types</h2>\n<a href=\"https://travis-ci.org/Shoobx/shoobx.immutable\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/Shoobx/shoobx.immutable.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51606b84d208da3ed45e6ceec673850ee3838f70/68747470733a2f2f7472617669732d63692e6f72672f53686f6f62782f73686f6f62782e696d6d757461626c652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/Shoobx/shoobx.immutable?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/Shoobx/shoobx.immutable/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b36f1354e3e8889b049d5931df0c4d5c77716041/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f53686f6f62782f73686f6f62782e696d6d757461626c652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/shoobx.immutable\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/shoobx.immutable.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a78f83fe9be3288f04bd40f3de6ec895e88e2b36/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73686f6f62782e696d6d757461626c652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/shoobx.immutable/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/shoobx.immutable.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc9202ea69ff4bab8a3f17527ba8585e9a29a046/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73686f6f62782e696d6d757461626c652e737667\"></a>\n<a href=\"http://shoobximmutable.readthedocs.org/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e8cb76463012f5c481994b82e0d7265d3685bb3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f73686f6f6278696d6d757461626c652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>This library provides a state-based implementation of immutable types,\nincluding lists, sets and dicts. It handles an arbitrarily deep structure of\nnested objects.</p>\n<p>In addition, support for revisioned immutables is provided, which allows for\nfull revision histories of an immutable. A sample implementation of a\nrevisioned immutable manager is also provided.</p>\n<p>Optional: A pjpersist-based storage mechanism for revisioned immutables is\nprovided, which allows for easy storage of versioned immutables.</p>\n</div>\n<div id=\"using-immutables\">\n<h2>Using Immutables</h2>\n<p>Immutable objects can make certain complex systems more reasonable, because they\ntightly control when an object is modified and how. It also guarantees that an\nobject can never change for another accessor in a different subsystem.</p>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>Let\u2019s start with a simple dictionary:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import shoobx.immutable as im\n</pre>\n<pre>&gt;&gt;&gt; with im.create(im.ImmutableDict) as factory:\n...     answer = factory({\n...         'question': 'Answer to the ultimate question of life, ...',\n...         'answer': 0\n...     })\n</pre>\n<pre>&gt;&gt;&gt; answer['answer']\n0\n</pre>\n</blockquote>\n<p>But no value can be changed anymore:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; answer['answer'] = 42\nTraceback (most recent call last):\n...\nAttributeError: Cannot update locked immutable object.\n</pre>\n</blockquote>\n<p>Immutable objects are updated through a special context manager that creates a\nnew version of the object that can be modified within the context manager\nblock.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; orig = answer\n&gt;&gt;&gt; with im.update(answer) as answer:\n...     answer['answer'] = 42\n</pre>\n<pre>&gt;&gt;&gt; answer['answer']\n42\n</pre>\n</blockquote>\n<p>Note that the <cite>answer</cite> dictionary is a completely new object and that the\noriginal object is still unmodified.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; orig is not answer\nTrue\n&gt;&gt;&gt; orig['answer']\n0\n</pre>\n</blockquote>\n<p>Of course we can also create complex object structures, for example by adding\na list:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; with im.update(answer) as answer:\n...     answer['witnesses'] = ['Arthur', 'Gag']\n</pre>\n<pre>&gt;&gt;&gt; answer['witnesses']\n['Arthur', 'Gag']\n</pre>\n</blockquote>\n<p>Of course, the list has been converted to its immutable equal, so that items\ncannot be modified.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; isinstance(answer['witnesses'], im.ImmutableList)\nTrue\n&gt;&gt;&gt; answer['witnesses'].append('Deep Thought')\nTraceback (most recent call last):\n...\nAttributeError: Cannot update locked immutable object.\n</pre>\n</blockquote>\n<p>However, updating from an child/sub-object is not allowed, since creating a\nnew version of a child would sematically modify its parent thus violating the\nimmutability constraint:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; with im.update(answer['witnesses']) as witnesses:\n...     pass\nTraceback (most recent call last):\n...\nAttributeError: update() is only available for master immutables.\n</pre>\n</blockquote>\n<p>The system accomplishes this by assigning \u201cmaster\u201d and \u201cslave\u201d modes to the\nimmutables. The root immutable is the master and any sub-objects below are\nslaves.</p>\n<p>Immutable sets are also supported as a core immutable:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; data = im.ImmutableSet({6})\n&gt;&gt;&gt; data\n{6}\n</pre>\n<pre>&gt;&gt;&gt; with im.update(data) as data:\n...     data.discard(6)\n...     data.add(9)\n&gt;&gt;&gt; data\n{9}\n</pre>\n</blockquote>\n</div>\n<div id=\"custom-immutables\">\n<h3>Custom Immutables</h3>\n<p>Creating your own immutable objects is simple:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class Answer(im.Immutable):\n...     def __init__(self, question=None, answer=None, witnesses=None):\n...         self.question = question\n...         self.answer = answer\n...         self.witnesses = witnesses\n</pre>\n<pre>&gt;&gt;&gt; answer = Answer('The Answer', 42, ['Arthur', 'Gag'])\n&gt;&gt;&gt; answer.answer\n42\n</pre>\n</blockquote>\n<p>Note how the list is automatically converted to its immutable equivalent:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; isinstance(answer.witnesses, im.ImmutableList)\nTrue\n</pre>\n</blockquote>\n<p>Of course you cannot modify an immutable other than the update context:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; answer.answer = 54\nTraceback (most recent call last):\n...\nAttributeError: Cannot update locked immutable object.\n</pre>\n<pre>&gt;&gt;&gt; with im.update(answer) as answer:\n...     answer.answer = 54\n&gt;&gt;&gt; answer.answer\n54\n</pre>\n</blockquote>\n</div>\n<div id=\"revisioned-immutables\">\n<h3>Revisioned Immutables</h3>\n<p>Since mutables create a new object for every change, they are ideal for\ncreating systems that have to keep track of their entire history. This package\nprovides support for such systems by defining a revision manager API and\nrevisioned immutable that are managed within it.</p>\n<p>Let\u2019s start by creating a custom revisioned immutable:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class Answer(im.RevisionedImmutable):\n...\n...     def __init__(self, question=None, answer=None):\n...         self.question = question\n...         self.answer = answer\n</pre>\n</blockquote>\n<p>A simple implementation of the revision manager API is provided to demonstrate\na possible implementation path.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; data = im.RevisionedMapping()\n&gt;&gt;&gt; data['a'] = answer = Answer('Answer to the ultimate question')\n</pre>\n</blockquote>\n<p>The answer is the current revision and has been added to the\nmanager.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; data['a'] is answer\nTrue\n</pre>\n</blockquote>\n<p>In addition to the usual immutability features, the Revisioned\nimmutable has several additional attributes that help with the management of\nthe revisions:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; answer.__im_start_on__\ndatetime.datetime(...)\n&gt;&gt;&gt; answer.__im_end_on__ is None\nTrue\n&gt;&gt;&gt; answer.__im_manager__\n&lt;shoobx.immutable.revisioned.SimpleRevisionedImmutableManager ...&gt;\n&gt;&gt;&gt; answer.__im_creator__ is None\nTrue\n&gt;&gt;&gt; answer.__im_comment__ is None\nTrue\n</pre>\n</blockquote>\n<p>The update API is extended to support setting the creator and comment of the\nchange:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; answer_r1 = answer\n&gt;&gt;&gt; with im.update(answer, 'universe', 'Provide Answer') as answer:\n...     answer.answer = 42\n</pre>\n</blockquote>\n<p>We now have a second revision of the answer that has the comemnt and creator\nset:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; answer.answer\n42\n</pre>\n<pre>&gt;&gt;&gt; answer.__im_start_on__\ndatetime.datetime(...)\n&gt;&gt;&gt; answer.__im_end_on__ is None\nTrue\n&gt;&gt;&gt; answer.__im_creator__\n'universe'\n&gt;&gt;&gt; answer.__im_comment__\n'Provide Answer'\n</pre>\n</blockquote>\n<p>The first revision is now retired and has an end date/time (which equals the\nstart date/time of the new revision):</p>\n<blockquote>\n<pre>&gt;&gt;&gt; answer_r1.__im_start_on__\ndatetime.datetime(...)\n&gt;&gt;&gt; answer_r1.__im_end_on__ == answer.__im_start_on__\nTrue\n&gt;&gt;&gt; answer_r1.__im_state__ == im.interfaces.IM_STATE_RETIRED\nTrue\n</pre>\n</blockquote>\n<p>The manager has APIs to manage the various revisions.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; revisions = data.getRevisionManager('a')\n&gt;&gt;&gt; len(revisions.getRevisionHistory())\n2\n</pre>\n<pre>&gt;&gt;&gt; revisions.getCurrentRevision(answer_r1) is answer\nTrue\n</pre>\n</blockquote>\n<p>We can even roll back to a previous revision:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; revisions.rollbackToRevision(answer_r1)\n</pre>\n<pre>&gt;&gt;&gt; len(revisions.getRevisionHistory())\n1\n&gt;&gt;&gt; answer_r1.__im_end_on__ is None\nTrue\n&gt;&gt;&gt; answer_r1.__im_state__ == im.interfaces.IM_STATE_LOCKED\nTrue\n</pre>\n</blockquote>\n</div>\n<div id=\"optional-pjpersist-support\">\n<h3>Optional <cite>pjpersist</cite> Support</h3>\n<p>A more serious and production-ready implementation of the revision manager API\nis provided in <cite>shoobx.immutable.pjpersist</cite> which utilizes <cite>pjpersist</cite> to\nstore all data.</p>\n</div>\n<div id=\"notes\">\n<h3>Notes</h3>\n<p>A technical discussion on the system\u2019s inner workings is located in the\ndoc strings of the corresponding interfaces. In addition, the tests covera a\nlot of special cases not dicsussed here.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>2.0.2 (2020-04-27)</h3>\n<ul>\n<li>Added <cite>enum.Enum</cite> as immutable type / constant. This allows assigning an\nEnum to a <cite>ImmutableBase</cite> attribute.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.0.1 (2020-04-23)</h3>\n<ul>\n<li>Allow <tt>defaultInfo()</tt> decorator to be nested.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>2.0.0 (2020-04-21)</h3>\n<ul>\n<li>IMPORTANT: Add immutable state as a column to the table. This will require a\nmigration of your database schema and data.</li>\n<li>Introduced new <tt>IM_STATE_DELETED</tt> state which marks an object as deleted.</li>\n<li>Add new <tt>_pj_with_deleted_items</tt> flag that when set will change the\ncontainer API to return deleted items as well.</li>\n<li>Added <tt>ImmutableContainer.withDeletedItems()</tt> method that will clone the\ncontainer and set the <tt>_pj_with_deleted_items</tt> flag. That will by\ndefinition reset all caches to prohibit inconsistent results.</li>\n<li>The <tt>test_functional_deletionAndRevival()</tt> demonstrates the deletion and\nrevivial functionality.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.5.0 (2020-04-20)</h3>\n<ul>\n<li>Honor the <tt>_pj_remove_documents</tt> flag in the pjpersist\n<tt>ImmutableContainer</tt> by simply marking the last version of the object as\nretired and assigning an end date. This way deletions can be undone. Also,\naudit logs can now be complete.</li>\n<li>Allow the creator and comment to be specified globally, so that APIs don\u2019t\nhave to carry that information through all the layers.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.4.3 (2020-02-22)</h3>\n<ul>\n<li>Make sure that <cite>ImmutableContainer</cite> does not accept transient objects. This\nis particularly important since objects can be initialized in transient\nstate when not using the <cite>create()</cite> context manager. It also protects the\nobject from being updated in a container before completing its update.</li>\n<li>Refactored <cite>__delitem__</cite> tests to be more minimal and document the use cases\nmore clearly.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.4.2 (2020-02-15)</h3>\n<ul>\n<li>1.4.1 was a brown bag release.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.4.1 (2020-02-15)</h3>\n<ul>\n<li>Missed to re-export <cite>shoobx.immutable.immutable.create</cite></li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.4.0 (2020-02-14)</h3>\n<ul>\n<li><p>Changed the pattern of creating an immutable object to a context manager.\nNOTE, just creating an object like <cite>Immutable()</cite> will give you a transient\nobject.\nThe preferred pattern is:</p>\n<pre>&gt;&gt;&gt; import shoobx.immutable as im\n&gt;&gt;&gt; with im.create(im.Immutable) as factory:\n...     imObj = factory()\n</pre>\n<p>This makes it way easier to set initial attributes.\nSee README.rst and docs and tests for details.</p>\n</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.3.1 (2020-02-10)</h3>\n<ul>\n<li>Fixing leftover <cite>_pj_get_resolve_filter</cite> occurrences in <cite>ImmutableContainer</cite></li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.3.0 (2020-02-06)</h3>\n<ul>\n<li><p>Fix <cite>ImmutableContainer.__delitem__</cite> : In order to delete all revisions of\nan object, the delete method used an internal super() call to get query\nfilters. That ended up ignoring subclass filters causing deletes across\ncontianer boundaries.</p>\n<p>As a solution, a new <cite>_pj_get_resolve_filter_all_versions</cite> method has been\nintroduced to return a query for all versions within a container. The\n<cite>_pj_get_resolve_filter</cite> method now uses the other one and simply adds the\n\u201clatest version\u201d constraint. All sub-containers should now override\n<cite>_pj_get_resolve_filter_all_versions</cite> instead of <cite>_pj_get_resolve_filter</cite>.</p>\n</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.2.1 (2020-02-02)</h3>\n<ul>\n<li>Fix <cite>ImmutableContainer.__delitem__</cite> : it did not remove revisions of the\ndeleted object</li>\n<li>Fix <cite>ImmutableContainer.rollbackToRevision</cite> : it rolled back ALL objects\nto the given revision</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>1.2.0 (2020-01-20)</h3>\n<ul>\n<li><p>Extended <cite>IRevisionedImmutableManager</cite> to support efficient version\nmanagement.</p>\n<ul>\n<li><p>Added <cite>getNumberOfRevisions(obj)</cite> method to return the number of revisions\navailable for a given object. Note that this does not necessarily equal to\nthe latest revision number.</p>\n</li>\n<li><p>Exended <cite>getRevisionHistory()</cite> with multiple new arguments to support\nfiltering, sorting and batching:</p>\n<p>Filter Arguments:</p>\n<ul>\n<li><cite>creator</cite>: The creator of the revision must match the argument.</li>\n<li><cite>comment</cite>: The comment must contain the argument as a substring.</li>\n<li><cite>startBefore</cite>: The revision must start before the given date/time.</li>\n<li><cite>startAfter</cite>: The revision must start after the given date/time.</li>\n</ul>\n<p>Ordering Arguments:</p>\n<ul>\n<li><dl>\n<dt><cite>reversed</cite>: When true, the history will be return in reverse</dt>\n<dd>chronological order, specifically the latest revision is\nlisted first.</dd>\n</dl>\n</li>\n</ul>\n<p>Batching Arguments:</p>\n<ul>\n<li><cite>batchStart</cite>: The index at which to start the batch.</li>\n<li><dl>\n<dt><cite>batchSize</cite>: The size the of the batch. It is thus the max length of</dt>\n<dd>the iterable.</dd>\n</dl>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Provided an implementation of the new arguments for both the simple revision\nmanage and the pjpersist container.</p>\n</li>\n<li><p>Declare that <cite>ImmutableContainer</cite> implements <cite>IRevisionedImmutableManager</cite>.</p>\n</li>\n<li><p>Increased test coverage back to 100%.</p>\n</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>1.1.1 (2019-06-11)</h3>\n<ul>\n<li>Added <cite>datetime</cite> classes as system immutable types.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>1.1.0 (2019-05-31)</h3>\n<ul>\n<li>Introduced <cite>__im_version__</cite> to <cite>IRevisionedImmutable</cite> and use it instead of\ntimestamps to create a chronological order of revisions. (Timestamps might be\nslightly different accross servers and cause bad history.)</li>\n<li>Do not duplicate implementation of <cite>__im_update__()</cite> in\n<cite>RevisionedImmutableBase</cite>. Use <cite>__im_[before|after]_update__()</cite> to do all\nrevision-related tasks.</li>\n<li>Tweak <cite>copy()</cite> implementation for <cite>ImmutableList</cite> and <cite>ImmutableDict</cite>.</li>\n<li>Properly implement <cite>ImmutableDict.fromkeys()</cite>.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>1.0.5 (2019-05-31)</h3>\n<ul>\n<li>Fix <cite>ImmutableList.copy()</cite> to just work when locked. This allows for only\nmaking a shallow clone, since any update will cause a deep copy and thus\nimmutability is guaranteed.</li>\n<li>Implemented <cite>ImmutableDict.copy()</cite>. Raise error on <cite>ImmutableDict.fromkeys()</cite>.</li>\n<li><cite>ImmutableContainer</cite> also needs an updated <cite>_pj_column_fields</cite> list.</li>\n<li>Minor test fixes.</li>\n<li>Minor documentation fixes and code comment enhancements.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>1.0.4 (2019-05-30)</h3>\n<ul>\n<li>Add API documentation.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>1.0.3 (2019-05-30)</h3>\n<ul>\n<li>Moved documentation to Read the Docs.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>1.0.2 (2019-05-30)</h3>\n<ul>\n<li>Add some readable documentation.</li>\n<li>Added high-level <cite>shoobx.immutable.update(im, *args, **kw)</cite> function.</li>\n<li>Implemented <cite>__repr__()</cite> for <cite>ImmutableSet</cite> to mimic behavior of\n<cite>ImmutableDict</cite> and <cite>ImmutableList</cite>.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>1.0.1 (2019-05-30)</h3>\n<ul>\n<li>Fix package description.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>1.0.0 (2019-05-30)</h3>\n<ul>\n<li>Immutable Types, Immutable Dict, Immutable Set, Immutable List</li>\n<li>Revisioned Immutable with Revision Manager sample implementation</li>\n<li>Optional: pjpersist support for immutables. Requires pjpersist&gt;=1.7.0.</li>\n<li>Initial Release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7113309, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "fddd9204454d199ed57951a73cbddb9b", "sha256": "1cf50ddffacd6a123d2d8160fde656ecd3a5d5a123abf58f3efca5800c386d00"}, "downloads": -1, "filename": "shoobx.immutable-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fddd9204454d199ed57951a73cbddb9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20339, "upload_time": "2019-05-30T15:04:14", "upload_time_iso_8601": "2019-05-30T15:04:14.677119Z", "url": "https://files.pythonhosted.org/packages/24/7e/e920be04d39df95596783c3ed334c102488fbf4b6ed4fcb3cd82ebd38d8c/shoobx.immutable-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9368129ec56774f4d3ef390cf6a5edc6", "sha256": "06077805fcea5c730c9f9603d8cc52b052cf2359233a4133f61b770bf31cc2d9"}, "downloads": -1, "filename": "shoobx.immutable-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9368129ec56774f4d3ef390cf6a5edc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20344, "upload_time": "2019-05-30T15:06:38", "upload_time_iso_8601": "2019-05-30T15:06:38.891699Z", "url": "https://files.pythonhosted.org/packages/f7/8b/c8ff61e734ff41d31c0fdb64742c33239b1d8e8572ebbf363714b272cae0/shoobx.immutable-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "0213846e8ea18f162e574f435b052565", "sha256": "393fdadbd1c76dd3ba3db663408501205bec1d338adcbd107c885ca08ee9976e"}, "downloads": -1, "filename": "shoobx.immutable-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0213846e8ea18f162e574f435b052565", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25536, "upload_time": "2019-05-30T17:13:35", "upload_time_iso_8601": "2019-05-30T17:13:35.393868Z", "url": "https://files.pythonhosted.org/packages/0d/f5/5b46df70ff524e73e48378e57784ed547898365909e7ec0122e9158be109/shoobx.immutable-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "caeceebe558faa13c85ed83c1855c17d", "sha256": "5f30fc2bd5b8bca57791a90d1b8f971289d0500afd67e3272e9f038479198e63"}, "downloads": -1, "filename": "shoobx.immutable-1.0.3.tar.gz", "has_sig": false, "md5_digest": "caeceebe558faa13c85ed83c1855c17d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29008, "upload_time": "2019-05-30T20:14:43", "upload_time_iso_8601": "2019-05-30T20:14:43.495384Z", "url": "https://files.pythonhosted.org/packages/d9/15/809d26c9642a633d991ad73a12f759adf81bbf5af31debbddd83babbe00e/shoobx.immutable-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "0d8228570089687aca372fc9650ea586", "sha256": "c499660d0af694a2ccdc750764b91b4da125667d4a93883c6753b553b998c143"}, "downloads": -1, "filename": "shoobx.immutable-1.0.4.tar.gz", "has_sig": false, "md5_digest": "0d8228570089687aca372fc9650ea586", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29698, "upload_time": "2019-05-31T00:50:01", "upload_time_iso_8601": "2019-05-31T00:50:01.165911Z", "url": "https://files.pythonhosted.org/packages/2c/b0/0211c9db12528282b17edbe5be5fe3a17f8117daaa281c61214d4d7fcc96/shoobx.immutable-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "04d5f2b4cb38b8a69af066a0afbcdb11", "sha256": "51ace7942435fa3c86f4f45927d687c2cd37172705283af737ac052ae5a695ad"}, "downloads": -1, "filename": "shoobx.immutable-1.0.5.tar.gz", "has_sig": false, "md5_digest": "04d5f2b4cb38b8a69af066a0afbcdb11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30409, "upload_time": "2019-05-31T11:32:33", "upload_time_iso_8601": "2019-05-31T11:32:33.100676Z", "url": "https://files.pythonhosted.org/packages/b0/b6/53f3c2775b787bd09b6802d7a05c86ae28bc081fc02cee0a7c51d6087c05/shoobx.immutable-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1eeeeba9fbf4069ccb6b4a6370b5d007", "sha256": "06b485c6bcff542586e87552981e158ebb91700cbe057ffcbd75755830dcde3c"}, "downloads": -1, "filename": "shoobx.immutable-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1eeeeba9fbf4069ccb6b4a6370b5d007", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31372, "upload_time": "2019-05-31T12:26:45", "upload_time_iso_8601": "2019-05-31T12:26:45.950783Z", "url": "https://files.pythonhosted.org/packages/11/55/f076898b31de825214d440e5116f75b8f57a4a4e8f7d85bece4e73c2ea35/shoobx.immutable-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "8a8afda65cfe5dc12a70667515c65794", "sha256": "5c94510f0cb8b7f52cc7ec73e18250e52764ea8a5f0cd4fb5e168de6d80dde4c"}, "downloads": -1, "filename": "shoobx.immutable-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8a8afda65cfe5dc12a70667515c65794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31226, "upload_time": "2019-06-11T09:13:01", "upload_time_iso_8601": "2019-06-11T09:13:01.105658Z", "url": "https://files.pythonhosted.org/packages/3e/84/af2c78c45e0518d8caaf93f1982adbf41664fe07b3c7cf965c60a9186eca/shoobx.immutable-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "68169a77dda10683a79e77b790588733", "sha256": "8b74c13ae0bf6a97b98428248c10651becdaf67d9520ea019d6256bb580f740e"}, "downloads": -1, "filename": "shoobx.immutable-1.2.0.tar.gz", "has_sig": false, "md5_digest": "68169a77dda10683a79e77b790588733", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34204, "upload_time": "2020-01-20T15:29:02", "upload_time_iso_8601": "2020-01-20T15:29:02.192647Z", "url": "https://files.pythonhosted.org/packages/e0/e9/f83b639ae9667a9c63ae7a8db39a62d3b184a950d8908e5d2154bef56eb6/shoobx.immutable-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "6c04ac960da2c99327a5852f613a4cac", "sha256": "670843d7d2282023fe6c148e36f9dd56c91ca8514e8f789680627f955000e66d"}, "downloads": -1, "filename": "shoobx.immutable-1.2.1.tar.gz", "has_sig": false, "md5_digest": "6c04ac960da2c99327a5852f613a4cac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33670, "upload_time": "2020-02-02T16:48:15", "upload_time_iso_8601": "2020-02-02T16:48:15.405380Z", "url": "https://files.pythonhosted.org/packages/89/26/96634cdf45bfbaffe7fdb6d4e21a56267d67aa60f0bc31888cde6c82ec46/shoobx.immutable-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "dd64ab02775065b27fab13f3d7b0aa35", "sha256": "3c2d6be043e6f0b215ad549335f48788c87c2a4f4869d4723f6eab06020dd841"}, "downloads": -1, "filename": "shoobx.immutable-1.3.0.tar.gz", "has_sig": false, "md5_digest": "dd64ab02775065b27fab13f3d7b0aa35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34896, "upload_time": "2020-02-06T13:43:31", "upload_time_iso_8601": "2020-02-06T13:43:31.003514Z", "url": "https://files.pythonhosted.org/packages/29/70/afb21f8e60b9e40da23a32070660d6d0668116768289068fcc7612dfb676/shoobx.immutable-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "ba553b62866d615d0b712fff6466a5cc", "sha256": "bc7edb31cbb59013309483c4307a882c4f6afb94fa91b443590737b24dd21bd1"}, "downloads": -1, "filename": "shoobx.immutable-1.3.1.tar.gz", "has_sig": false, "md5_digest": "ba553b62866d615d0b712fff6466a5cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35000, "upload_time": "2020-02-10T10:36:22", "upload_time_iso_8601": "2020-02-10T10:36:22.672665Z", "url": "https://files.pythonhosted.org/packages/1f/f7/eccd6db75fbced32e37960779c58c6411a8b5bc7e7deb44f0eaec97e11ef/shoobx.immutable-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "43ba0bdff07247f6adfe755107a7f8e5", "sha256": "c60aa9ea1a56e6451b1d907f54c9377f6d2783e4e9229164217c60ced93f1204"}, "downloads": -1, "filename": "shoobx.immutable-1.4.0.tar.gz", "has_sig": false, "md5_digest": "43ba0bdff07247f6adfe755107a7f8e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36223, "upload_time": "2020-02-14T15:27:40", "upload_time_iso_8601": "2020-02-14T15:27:40.150653Z", "url": "https://files.pythonhosted.org/packages/35/4e/071aab4ccaa8a07fc1ca22eee5b9fca7da3135ae67825d56c946c64abc0f/shoobx.immutable-1.4.0.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "3d4d902df83b055c81aefa7abe99bc92", "sha256": "40227eb814834708e9cbb35d1f93708afa9f6dd33ba9dd89bc5da108c3e5da93"}, "downloads": -1, "filename": "shoobx.immutable-1.4.2.tar.gz", "has_sig": false, "md5_digest": "3d4d902df83b055c81aefa7abe99bc92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36322, "upload_time": "2020-02-15T07:54:26", "upload_time_iso_8601": "2020-02-15T07:54:26.913926Z", "url": "https://files.pythonhosted.org/packages/38/de/b49dc1849c0e3adfa8acf602579098cc21cc31a07e3121b52d45c2e3f7ef/shoobx.immutable-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "d50b71e3f691cd9a003ccb0508cd533c", "sha256": "de35f6f7edaa8e793969d41a4ea981ba819ef70d1b79029779aa4a554dab9a7f"}, "downloads": -1, "filename": "shoobx.immutable-1.4.3.tar.gz", "has_sig": false, "md5_digest": "d50b71e3f691cd9a003ccb0508cd533c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39679, "upload_time": "2020-02-22T12:37:38", "upload_time_iso_8601": "2020-02-22T12:37:38.972383Z", "url": "https://files.pythonhosted.org/packages/eb/1e/66bb9f1e4627237cafe0a56c535d06d5c334c742912d7435c37bbcf0beb6/shoobx.immutable-1.4.3.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "463d08bc364f2cf2ec0d4af919fc735a", "sha256": "dcb25b9a450c0e309a2f2274749a8b6707cf955531286e8b58b1046311980f28"}, "downloads": -1, "filename": "shoobx.immutable-1.5.0.tar.gz", "has_sig": false, "md5_digest": "463d08bc364f2cf2ec0d4af919fc735a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40834, "upload_time": "2020-04-20T19:48:25", "upload_time_iso_8601": "2020-04-20T19:48:25.794952Z", "url": "https://files.pythonhosted.org/packages/42/a0/8b2037a60ae1e624856dc428edd99de5680be1d2feaf60af0925ac6fb3d6/shoobx.immutable-1.5.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "311ebad64acae26048876072c2e963c1", "sha256": "4d35692ef5c51934b2cf82c3196427063d135f732425da6a9b9a9cacd1a8235a"}, "downloads": -1, "filename": "shoobx.immutable-2.0.0.tar.gz", "has_sig": false, "md5_digest": "311ebad64acae26048876072c2e963c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42128, "upload_time": "2020-04-21T13:06:10", "upload_time_iso_8601": "2020-04-21T13:06:10.779371Z", "url": "https://files.pythonhosted.org/packages/31/60/142bb75dc45eab22543cd94933c5204b1a569852a077721ec46dd133a73f/shoobx.immutable-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "eec527c2b457c611efc4fd532926454b", "sha256": "dc82f08149df89f8d4239a2f777eb385ffabde91e67a56393f8cfa4f40eed116"}, "downloads": -1, "filename": "shoobx.immutable-2.0.1.tar.gz", "has_sig": false, "md5_digest": "eec527c2b457c611efc4fd532926454b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42282, "upload_time": "2020-04-23T18:06:10", "upload_time_iso_8601": "2020-04-23T18:06:10.292395Z", "url": "https://files.pythonhosted.org/packages/f4/91/17f76b92c3e14213b33c9870a0149472dd7239e5cd9ba4dd428f09bdcd7a/shoobx.immutable-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "841a0fb6fe842a410f6b0c980e07b838", "sha256": "7bb35785220fc66c62aa54aa9c01135a92804ca2f9bf3d44e1271e85811e8dc2"}, "downloads": -1, "filename": "shoobx.immutable-2.0.2.tar.gz", "has_sig": false, "md5_digest": "841a0fb6fe842a410f6b0c980e07b838", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39199, "upload_time": "2020-04-27T17:14:56", "upload_time_iso_8601": "2020-04-27T17:14:56.971317Z", "url": "https://files.pythonhosted.org/packages/d7/de/26033c86315ab8611893cae768fcd691df7fde97493b0cad644522020775/shoobx.immutable-2.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "841a0fb6fe842a410f6b0c980e07b838", "sha256": "7bb35785220fc66c62aa54aa9c01135a92804ca2f9bf3d44e1271e85811e8dc2"}, "downloads": -1, "filename": "shoobx.immutable-2.0.2.tar.gz", "has_sig": false, "md5_digest": "841a0fb6fe842a410f6b0c980e07b838", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39199, "upload_time": "2020-04-27T17:14:56", "upload_time_iso_8601": "2020-04-27T17:14:56.971317Z", "url": "https://files.pythonhosted.org/packages/d7/de/26033c86315ab8611893cae768fcd691df7fde97493b0cad644522020775/shoobx.immutable-2.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:46 2020"}