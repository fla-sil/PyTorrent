{"info": {"author": "Michael Shaffer", "author_email": "michael.t.shaffer@colostate.edu", "bugtrack_url": null, "classifiers": [], "description": "# DRAM\n[![Build Status](https://travis-ci.com/shafferm/checkMetab.svg?branch=master)](https://travis-ci.com/shafferm/checkMetab)\n\nDRAM (Distilled and Refined Annotation of Metabolism) is a tool for annotating metagenomic assembled genomes and [VirSorter](https://github.com/simroux/VirSorter) identified viral contigs. DRAM annotates MAGs and viral contigs using [KEGG](https://www.kegg.jp/) (if provided by the user), [UniRef90](https://www.uniprot.org/), [PFAM](https://pfam.xfam.org/), [dbCAN](http://bcb.unl.edu/dbCAN2/), [RefSeq viral](https://www.ncbi.nlm.nih.gov/genome/viruses/), [VOGDB](http://vogdb.org/) and the [MEROPS](https://www.ebi.ac.uk/merops/) peptidase database as well as custom user databases. DRAM is run in two stages. First an annotation step to assign database identifiers to gene and then a distill step to curate these annotations into useful functional categories. Additionally viral contigs are further analyzed during to identify potential AMGs. This is done via assigning an auxiliary score and flags representing the confidence that a gene is both metabolic and viral.\n\nFor more detail on DRAM and how DRAM works please see the wiki: https://github.com/shafferm/DRAM/wiki\n\n## Installation\nTo install DRAM some dependencies need to be installed first then DRAM can be installed from this repository. In the future DRAM will be available via both pip and conda.\n\n0. Install Dependencies\n    \n    Dependencies can be installed via conda or manually.\n    \n    _Conda Installation_\n    \n    Installed DRAM into a new [conda](https://docs.conda.io/en/latest/) environment using the provided \nenviornment.yaml file.\n    ```bash\n    wget https://raw.githubusercontent.com/shafferm/DRAM/master/environment.yaml\n    conda env create -f environment.yaml -n DRAM\n    ```\n    If this installation method is used then all further steps should be run inside the newly created DRAM environment. This environment can be activated using this command:\n    ```bash\n    conda activate DRAM\n    ```\n\n    _Manual Installation_\n    \n    If you do not install via a conda enviornment, then the dependencies [pandas](https://pandas.pydata.org/), [networkx](https://networkx.github.io/), [scikit-bio](http://scikit-bio.org/), [prodigal](https://github.com/hyattpd/Prodigal), [mmseqs2](https://github.com/soedinglab/mmseqs2), [hmmer](http://hmmer.org/) and [tRNAscan-SE](http://lowelab.ucsc.edu/tRNAscan-SE/) need to be installed manually.\n\n1. Download this repository using `git clone https://github.com/shafferm/DRAM.git`\n2. Change directory into the DRAM directory and install DRAM using `pip install -e .`\n\nYou have now installed DRAM.\n\n## Setup\n\nTo run DRAM you need to set up the required databases in order to get annotations. All databases except for KEGG can be downloaded and set up for use with DRAM for you automatically. In order to get KEGG gene annotations and you must have access to the KEGG database. KEGG is a paid subscription service to download the protein files used by this annotator. If you do not have access to KEGG then DRAM will automatically use the [KOfam](https://www.genome.jp/tools/kofamkoala/) HMM database to get KEGG Orthology identifiers.\n\n_I have access to KEGG_\n\nSet up DRAM using the following command:\n\n```bash\nDRAM-setup.py prepare_databases --output_dir DRAM_data --kegg_loc kegg.pep\n```\n\n`kegg.pep` is the path to the amino acid FASTA file downloaded from KEGG. This can be any of the gene fasta files that are provided by the KEGG FTP server or a concatenated version of them. `DRAM_data` is the path  to the processed databases used by DRAM. If you already have any of the databases downloaded to your server and don't want to download them again then you can pass them to the `prepare_databases` command by use the `--{db_name}_loc` flags such as `--uniref_loc` and `--viral_loc`.\n\n_I don't have access to KEGG_\n\nNot a problem. Then use this command:\n\n```bash\nDRAM-setup.py prepare_databases --output_dir DRAM_data\n```\n\nSimilar to above you can still provide locations of databases you have already downloaded so you don't have to do it\nagain.\n\nTo test that your set up worked use the command `DRAM.py print_config` and the location of all databases provided \nwill be shown as well as the presence of additional annotation information.\n\n*NOTE:* Setting up DRAM can take a long time (up to 5 hours) depending on the number of processors which you tell \nit to use (using the `--threads` argument) and the speed of your internet connection. On my university server using 10 \nprocessors it takes about 2 hours to process the data when databases do not need to be downloaded.\n\n## Usage\n\nOnce DRAM is set up you are ready to annotate some MAGs. The following command will generate your full annotation: \n\n```bash\nDRAM.py annotate -i 'my_bins/*.fa' -o annotation\n```\n\n`my_bins` should be replaced with the path to a directory which contains all of your bins you would like to annotated and `.fa` should be replaced with the file extension used for your bins (i.e. `.fasta`, `.fna`, etc). If you only need to annotated a single genome (or an entire assembly) a direct path to a nucleotide fasta should be provided. Using 20 processors DRAM.py takes about 17 hours to annotate ~80 MAGs of medium quality or higher from a mouse gut metagenome.\n\nIn the output `annotation` folder there will be various files. `genes.faa` and `genes.fna` are fasta files with all genes called by prodigal with additional header information gained from the annotation as nucleotide and amino acid records respectively. `genes.gff` is a GFF3 with the same annotation information as well as gene locations. `scaffolds.fna` is a collection of all scaffolds/contigs given as input to `DRAM.py annotate` with added bin information in the headers. `annotations.tsv` is the most important output of the annotation. This includes all annotation information about every gene from all MAGs. Each line is a different gene and each column contains annotation information. `trnas.tsv` contains a summary of the tRNAs found in each MAG.\n\nThen after your annotation is finished you can summarize these annotations with the following command:\n\n```bash\nDRAM.py distill -i annotation/annotations.tsv -o genome_summaries --trna_path annotation/trnas.tsv --rrna_path --rrna_path annotation/rrnas.tsv\n```\nThis will generate the distillate and liquor files.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/shafferm/DRAM/tarball/1.0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shafferm/DRAM/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "DRAM-bio", "package_url": "https://pypi.org/project/DRAM-bio/", "platform": "", "project_url": "https://pypi.org/project/DRAM-bio/", "project_urls": {"Download": "https://github.com/shafferm/DRAM/tarball/1.0.2", "Homepage": "https://github.com/shafferm/DRAM/"}, "release_url": "https://pypi.org/project/DRAM-bio/1.0.2/", "requires_dist": null, "requires_python": ">=3", "summary": "Distilled and Refined Annotation of Metabolism: A tool for the annotation and curation of function for microbial and viral genomes", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DRAM</h1>\n<p><a href=\"https://travis-ci.com/shafferm/checkMetab\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2b47f5d268b01f2f36ee3139b706c8374ea24a14/68747470733a2f2f7472617669732d63692e636f6d2f736861666665726d2f636865636b4d657461622e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>DRAM (Distilled and Refined Annotation of Metabolism) is a tool for annotating metagenomic assembled genomes and <a href=\"https://github.com/simroux/VirSorter\" rel=\"nofollow\">VirSorter</a> identified viral contigs. DRAM annotates MAGs and viral contigs using <a href=\"https://www.kegg.jp/\" rel=\"nofollow\">KEGG</a> (if provided by the user), <a href=\"https://www.uniprot.org/\" rel=\"nofollow\">UniRef90</a>, <a href=\"https://pfam.xfam.org/\" rel=\"nofollow\">PFAM</a>, <a href=\"http://bcb.unl.edu/dbCAN2/\" rel=\"nofollow\">dbCAN</a>, <a href=\"https://www.ncbi.nlm.nih.gov/genome/viruses/\" rel=\"nofollow\">RefSeq viral</a>, <a href=\"http://vogdb.org/\" rel=\"nofollow\">VOGDB</a> and the <a href=\"https://www.ebi.ac.uk/merops/\" rel=\"nofollow\">MEROPS</a> peptidase database as well as custom user databases. DRAM is run in two stages. First an annotation step to assign database identifiers to gene and then a distill step to curate these annotations into useful functional categories. Additionally viral contigs are further analyzed during to identify potential AMGs. This is done via assigning an auxiliary score and flags representing the confidence that a gene is both metabolic and viral.</p>\n<p>For more detail on DRAM and how DRAM works please see the wiki: <a href=\"https://github.com/shafferm/DRAM/wiki\" rel=\"nofollow\">https://github.com/shafferm/DRAM/wiki</a></p>\n<h2>Installation</h2>\n<p>To install DRAM some dependencies need to be installed first then DRAM can be installed from this repository. In the future DRAM will be available via both pip and conda.</p>\n<ol>\n<li>\n<p>Install Dependencies</p>\n<p>Dependencies can be installed via conda or manually.</p>\n<p><em>Conda Installation</em></p>\n<p>Installed DRAM into a new <a href=\"https://docs.conda.io/en/latest/\" rel=\"nofollow\">conda</a> environment using the provided\nenviornment.yaml file.</p>\n<pre>wget https://raw.githubusercontent.com/shafferm/DRAM/master/environment.yaml\nconda env create -f environment.yaml -n DRAM\n</pre>\n<p>If this installation method is used then all further steps should be run inside the newly created DRAM environment. This environment can be activated using this command:</p>\n<pre>conda activate DRAM\n</pre>\n<p><em>Manual Installation</em></p>\n<p>If you do not install via a conda enviornment, then the dependencies <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas</a>, <a href=\"https://networkx.github.io/\" rel=\"nofollow\">networkx</a>, <a href=\"http://scikit-bio.org/\" rel=\"nofollow\">scikit-bio</a>, <a href=\"https://github.com/hyattpd/Prodigal\" rel=\"nofollow\">prodigal</a>, <a href=\"https://github.com/soedinglab/mmseqs2\" rel=\"nofollow\">mmseqs2</a>, <a href=\"http://hmmer.org/\" rel=\"nofollow\">hmmer</a> and <a href=\"http://lowelab.ucsc.edu/tRNAscan-SE/\" rel=\"nofollow\">tRNAscan-SE</a> need to be installed manually.</p>\n</li>\n<li>\n<p>Download this repository using <code>git clone https://github.com/shafferm/DRAM.git</code></p>\n</li>\n<li>\n<p>Change directory into the DRAM directory and install DRAM using <code>pip install -e .</code></p>\n</li>\n</ol>\n<p>You have now installed DRAM.</p>\n<h2>Setup</h2>\n<p>To run DRAM you need to set up the required databases in order to get annotations. All databases except for KEGG can be downloaded and set up for use with DRAM for you automatically. In order to get KEGG gene annotations and you must have access to the KEGG database. KEGG is a paid subscription service to download the protein files used by this annotator. If you do not have access to KEGG then DRAM will automatically use the <a href=\"https://www.genome.jp/tools/kofamkoala/\" rel=\"nofollow\">KOfam</a> HMM database to get KEGG Orthology identifiers.</p>\n<p><em>I have access to KEGG</em></p>\n<p>Set up DRAM using the following command:</p>\n<pre>DRAM-setup.py prepare_databases --output_dir DRAM_data --kegg_loc kegg.pep\n</pre>\n<p><code>kegg.pep</code> is the path to the amino acid FASTA file downloaded from KEGG. This can be any of the gene fasta files that are provided by the KEGG FTP server or a concatenated version of them. <code>DRAM_data</code> is the path  to the processed databases used by DRAM. If you already have any of the databases downloaded to your server and don't want to download them again then you can pass them to the <code>prepare_databases</code> command by use the <code>--{db_name}_loc</code> flags such as <code>--uniref_loc</code> and <code>--viral_loc</code>.</p>\n<p><em>I don't have access to KEGG</em></p>\n<p>Not a problem. Then use this command:</p>\n<pre>DRAM-setup.py prepare_databases --output_dir DRAM_data\n</pre>\n<p>Similar to above you can still provide locations of databases you have already downloaded so you don't have to do it\nagain.</p>\n<p>To test that your set up worked use the command <code>DRAM.py print_config</code> and the location of all databases provided\nwill be shown as well as the presence of additional annotation information.</p>\n<p><em>NOTE:</em> Setting up DRAM can take a long time (up to 5 hours) depending on the number of processors which you tell\nit to use (using the <code>--threads</code> argument) and the speed of your internet connection. On my university server using 10\nprocessors it takes about 2 hours to process the data when databases do not need to be downloaded.</p>\n<h2>Usage</h2>\n<p>Once DRAM is set up you are ready to annotate some MAGs. The following command will generate your full annotation:</p>\n<pre>DRAM.py annotate -i <span class=\"s1\">'my_bins/*.fa'</span> -o annotation\n</pre>\n<p><code>my_bins</code> should be replaced with the path to a directory which contains all of your bins you would like to annotated and <code>.fa</code> should be replaced with the file extension used for your bins (i.e. <code>.fasta</code>, <code>.fna</code>, etc). If you only need to annotated a single genome (or an entire assembly) a direct path to a nucleotide fasta should be provided. Using 20 processors DRAM.py takes about 17 hours to annotate ~80 MAGs of medium quality or higher from a mouse gut metagenome.</p>\n<p>In the output <code>annotation</code> folder there will be various files. <code>genes.faa</code> and <code>genes.fna</code> are fasta files with all genes called by prodigal with additional header information gained from the annotation as nucleotide and amino acid records respectively. <code>genes.gff</code> is a GFF3 with the same annotation information as well as gene locations. <code>scaffolds.fna</code> is a collection of all scaffolds/contigs given as input to <code>DRAM.py annotate</code> with added bin information in the headers. <code>annotations.tsv</code> is the most important output of the annotation. This includes all annotation information about every gene from all MAGs. Each line is a different gene and each column contains annotation information. <code>trnas.tsv</code> contains a summary of the tRNAs found in each MAG.</p>\n<p>Then after your annotation is finished you can summarize these annotations with the following command:</p>\n<pre>DRAM.py distill -i annotation/annotations.tsv -o genome_summaries --trna_path annotation/trnas.tsv --rrna_path --rrna_path annotation/rrnas.tsv\n</pre>\n<p>This will generate the distillate and liquor files.</p>\n\n          </div>"}, "last_serial": 6990359, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "35884cbe39ea516e39d49bbe8c540e7f", "sha256": "2f446709a501d77d78fe8617086157ff6dbdf5fb2100afb5415bf6ea460d6ad8"}, "downloads": -1, "filename": "DRAM_bio-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "35884cbe39ea516e39d49bbe8c540e7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 80076, "upload_time": "2020-03-11T01:24:12", "upload_time_iso_8601": "2020-03-11T01:24:12.179581Z", "url": "https://files.pythonhosted.org/packages/e4/26/c5b5bbfc8cb584e67272bc9d12dfa0354d7b8868f5c50d9dcd3ecfa8cdca/DRAM_bio-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b13603f507210cc0d7e2af1851d36ef", "sha256": "c8758fb8cc338ad267b27de015a29d5bcb1aaa17841c115aa69290a4831d1d18"}, "downloads": -1, "filename": "DRAM-bio-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7b13603f507210cc0d7e2af1851d36ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 63721, "upload_time": "2020-03-11T01:24:14", "upload_time_iso_8601": "2020-03-11T01:24:14.477370Z", "url": "https://files.pythonhosted.org/packages/3d/66/40cd801e2b6753ff59ac2708747b925dfe12d081f4237ef75750b6517b12/DRAM-bio-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f90a9749b66bc9b1b16f87dee28e7622", "sha256": "fd4dd1dc4eeaf2c1bd936f7770f0609f4e537102d079ae03eda41bf44da8f544"}, "downloads": -1, "filename": "DRAM-bio-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f90a9749b66bc9b1b16f87dee28e7622", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 65155, "upload_time": "2020-03-27T21:02:07", "upload_time_iso_8601": "2020-03-27T21:02:07.006525Z", "url": "https://files.pythonhosted.org/packages/a9/bb/dccccac98c8725a79eb18efec859972b4f47e6bb4b92f18da102c5046e08/DRAM-bio-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "aa44bb8e4a76e8398504b957d2fbafa6", "sha256": "5872bc7cbb1cfc0c1a8a0c58aa188fb43e585e53de2f78379ad265da6629da22"}, "downloads": -1, "filename": "DRAM-bio-1.0.2.tar.gz", "has_sig": false, "md5_digest": "aa44bb8e4a76e8398504b957d2fbafa6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 66964, "upload_time": "2020-04-10T02:40:57", "upload_time_iso_8601": "2020-04-10T02:40:57.308989Z", "url": "https://files.pythonhosted.org/packages/8e/8b/52fe9817dd63b9306f53516d7415e9d04020ceecb6ed813124c69f9451e3/DRAM-bio-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa44bb8e4a76e8398504b957d2fbafa6", "sha256": "5872bc7cbb1cfc0c1a8a0c58aa188fb43e585e53de2f78379ad265da6629da22"}, "downloads": -1, "filename": "DRAM-bio-1.0.2.tar.gz", "has_sig": false, "md5_digest": "aa44bb8e4a76e8398504b957d2fbafa6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 66964, "upload_time": "2020-04-10T02:40:57", "upload_time_iso_8601": "2020-04-10T02:40:57.308989Z", "url": "https://files.pythonhosted.org/packages/8e/8b/52fe9817dd63b9306f53516d7415e9d04020ceecb6ed813124c69f9451e3/DRAM-bio-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:52 2020"}