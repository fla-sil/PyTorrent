{"info": {"author": "Luke McCarthy", "author_email": "luke@iogopro.co.uk", "bugtrack_url": null, "classifiers": [], "description": "fsmonitor - Filesystem Monitoring for Python\n============================================\n\nSupported Platforms\n-------------------\n\n* Linux 2.6 (inotify)\n* Windows (ReadDirectoryChangesW with I/O completion ports)\n* Any other platform (polling)\n\nInstallation\n------------\n\n$ python setup.py install\n\nIntroduction\n------------\n\nThe fsmonitor module provides live filesystem monitoring. It can be used to monitor for\nevents such as file creation, deletion, modification and so on::\n\n    from fsmonitor import FSMonitor\n\nThe FSMonitor class manages filesystem watches and is used to receive events. Call the\nadd_dir_watch() method to add a directory watch to the monitor::\n\n    m = FSMonitor()\n    watch = m.add_dir_watch(\"/dir/to/watch\")\n\nOnce a watch has been added, you can call read_events() to read a list of filesystem\nevents. This is a blocking call and in some cases it might return an empty list, so it\nneeds to be re-called repeatedly to get more events::\n\n    while True:\n        for evt in m.read_events():\n            print evt.action_name, evt.name\n\nThe FSMonitorThread class can be used to receive events asynchronously with a callback.\nThe callback will be called from another thread so it is responsible for thread-safety.\nIf a callback is not specified, the thread will collect events in a list which can be\nread by calling read_events().\n\nMore Details\n------------\n\nSee the example code in the examples directory.\n\nContact Details\n---------------\n\nPlease send any comments or questions to: luke@iogopro.co.uk\n\nPlease report bugs on the `github issue tracker <http://github.com/shaurz/fsmonitor/issues>`_.\n\n-- Luke McCarthy\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/shaurz/fsmonitor", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fsmonitor", "package_url": "https://pypi.org/project/fsmonitor/", "platform": "", "project_url": "https://pypi.org/project/fsmonitor/", "project_urls": {"Homepage": "http://github.com/shaurz/fsmonitor"}, "release_url": "https://pypi.org/project/fsmonitor/0.1/", "requires_dist": null, "requires_python": "", "summary": "Filesystem monitoring", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"supported-platforms\">\n<h2>Supported Platforms</h2>\n<ul>\n<li>Linux 2.6 (inotify)</li>\n<li>Windows (ReadDirectoryChangesW with I/O completion ports)</li>\n<li>Any other platform (polling)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>$ python setup.py install</p>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The fsmonitor module provides live filesystem monitoring. It can be used to monitor for\nevents such as file creation, deletion, modification and so on:</p>\n<pre>from fsmonitor import FSMonitor\n</pre>\n<p>The FSMonitor class manages filesystem watches and is used to receive events. Call the\nadd_dir_watch() method to add a directory watch to the monitor:</p>\n<pre>m = FSMonitor()\nwatch = m.add_dir_watch(\"/dir/to/watch\")\n</pre>\n<p>Once a watch has been added, you can call read_events() to read a list of filesystem\nevents. This is a blocking call and in some cases it might return an empty list, so it\nneeds to be re-called repeatedly to get more events:</p>\n<pre>while True:\n    for evt in m.read_events():\n        print evt.action_name, evt.name\n</pre>\n<p>The FSMonitorThread class can be used to receive events asynchronously with a callback.\nThe callback will be called from another thread so it is responsible for thread-safety.\nIf a callback is not specified, the thread will collect events in a list which can be\nread by calling read_events().</p>\n</div>\n<div id=\"more-details\">\n<h2>More Details</h2>\n<p>See the example code in the examples directory.</p>\n</div>\n<div id=\"contact-details\">\n<h2>Contact Details</h2>\n<p>Please send any comments or questions to: <a href=\"mailto:luke%40iogopro.co.uk\">luke<span>@</span>iogopro<span>.</span>co<span>.</span>uk</a></p>\n<p>Please report bugs on the <a href=\"http://github.com/shaurz/fsmonitor/issues\" rel=\"nofollow\">github issue tracker</a>.</p>\n<p>\u2013 Luke McCarthy</p>\n</div>\n\n          </div>"}, "last_serial": 3205132, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "46c2fc01401bd6c79cf9eafef33db8c2", "sha256": "397fc47e339ce8aaa6f7a27fe376d4e614579038ff9c61bf28c6733fb1d0c5cd"}, "downloads": -1, "filename": "fsmonitor-0.1.tar.gz", "has_sig": false, "md5_digest": "46c2fc01401bd6c79cf9eafef33db8c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6340, "upload_time": "2017-09-26T20:54:47", "upload_time_iso_8601": "2017-09-26T20:54:47.230077Z", "url": "https://files.pythonhosted.org/packages/31/15/62befc5ae5117fd4e6b7dfb367e992226080d6d206d27dd2212c03300b2d/fsmonitor-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "46c2fc01401bd6c79cf9eafef33db8c2", "sha256": "397fc47e339ce8aaa6f7a27fe376d4e614579038ff9c61bf28c6733fb1d0c5cd"}, "downloads": -1, "filename": "fsmonitor-0.1.tar.gz", "has_sig": false, "md5_digest": "46c2fc01401bd6c79cf9eafef33db8c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6340, "upload_time": "2017-09-26T20:54:47", "upload_time_iso_8601": "2017-09-26T20:54:47.230077Z", "url": "https://files.pythonhosted.org/packages/31/15/62befc5ae5117fd4e6b7dfb367e992226080d6d206d27dd2212c03300b2d/fsmonitor-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:03 2020"}