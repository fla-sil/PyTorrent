{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "|Build Status| |codecov.io|\n\nMethod Capture\n==============\n\n*Wraps callables to capture stdout, stderr, exceptions and the return.*\n\nWhy?\n----\n\nThis library was created to assist in the testing of Python code, where\nreturn values and exceptions are important, in addition to what is\nwritten to stdout and stderr. It allows for a callable to be ran without\nthe caller being concerned with how important outputs are captured.\n\nAn example use is when writing common code to test both a Python\ninterface and a corresponding CLI (tested by invoking ``main``). A\ncommon test procedure - which may involve a complex setup and tear down\n- can be ran using the different interfaces and return results that\nencapsulate the outputs, without concern over the form they take (e.g.\nthe Python interface may have returned ``True`` on success but the\n``CLI`` may have called ``exit(0)``, with raises a ``SystemExit``\nexception).\n\nOther `alternatives <#alternatives>`__ exist for capturing stdout and\nstderr but none also handle exceptions.\n\nHow?\n----\n\nGeneral\n~~~~~~~\n\n.. code:: python\n\n    from capturewrap import CaptureWrapBuilder\n\n    builder = CaptureWrapBuilder(capture_stdout=True, capture_stderr=True, capture_exceptions=True)\n    wrapped = builder.build(my_method)\n\n    result = wrapped(*args, **kwargs)\n    print(f\"stdout: {result.stdout}\")\n    print(f\"stderr: {result.stderr}\")\n    print(f\"return_value: {result.return_value}\")\n    print(f\"exception: {result.exception}\")\n\nNote: if an exception is captured, ``return_value`` will be ``None``.\n\nCustom Exception Capture\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt may be desirable to capture only some exceptions and leave others to\nget raised as normal. To do this with ``CaptureWrapBuilder``, set\n``capture_exceptions`` as a function that takes the exception as the\nfirst argument and returns back a boolean value to indicate if the\nexception should be captured. e.g.\n\n.. code:: python\n\n    from capturewrap import CaptureWrapBuilder\n\n    builder = CaptureWrapBuilder(capture_exceptions=lambda e: isinstance(e, SystemExit) and e.code == 0)\n    wrapped = builder.build(exit)\n\n    print(wrapped(0))   # {\"exception\": [\"SystemExit: 0\\n\"]}\n    print(wrapped(1))   # Raises exception\n\nRequirements\n------------\n\n-  Python >= 3.6\n\nInstallation\n------------\n\nStable releases can be installed via\n`PyPI <https://pypi.python.org/pypi?name=capturewrap&:action=display>`__:\n\n.. code:: bash\n\n    $ pip install capturewrap\n\nBleeding edge versions can be installed directly from GitHub:\n\n.. code:: bash\n\n    $ pip install git+https://github.com/wtsi-hgi/python-capturewrap.git@$commitOrBranch#egg=capturewrap\n\nImplementation\n--------------\n\nThis implementation captures stdout and stdin using\n```redirect_stdout`` <https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout>`__\nand\n```redirect_stderr`` <https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stderr>`__,\nwhich were added to the standard library in Python 3.5.\n\nAlternatives\n------------\n\n-  `iocapture <https://github.com/oinume/iocapture>`__: older solution,\n   replaces ``sys.stdout`` and ``sys.stderr`` with capturing methods.\n-  `capturer <https://github.com/xolox/python-capturer>`__: complex\n   solution that works at lower level to intercept subprocess ``stdout``\n   and ``stderr`` using a pseudo terminal.\n\n.. |Build Status| image:: https://travis-ci.org/wtsi-hgi/python-capturewrap.svg\n   :target: https://travis-ci.org/wtsi-hgi/python-capturewrap\n.. |codecov.io| image:: https://codecov.io/gh/wtsi-hgi/python-capturewrap/graph/badge.svg\n   :target: https://codecov.io/github/wtsi-hgi/python-capturewrap\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wtsi-hgi/python-capturewrap", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "capturewrap", "package_url": "https://pypi.org/project/capturewrap/", "platform": "", "project_url": "https://pypi.org/project/capturewrap/", "project_urls": {"Homepage": "https://github.com/wtsi-hgi/python-capturewrap"}, "release_url": "https://pypi.org/project/capturewrap/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Wraps callables to capture stdout, stderr, exceptions and the return", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/wtsi-hgi/python-capturewrap\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aa928ae54feb26f7fd114ea816bd311a968d2a65/68747470733a2f2f7472617669732d63692e6f72672f777473692d6867692f707974686f6e2d63617074757265777261702e737667\"></a> <a href=\"https://codecov.io/github/wtsi-hgi/python-capturewrap\" rel=\"nofollow\"><img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c8261cf5979f46e8c2c5285c46edf87fcdcfd2f/68747470733a2f2f636f6465636f762e696f2f67682f777473692d6867692f707974686f6e2d63617074757265777261702f67726170682f62616467652e737667\"></a></p>\n<div id=\"method-capture\">\n<h2>Method Capture</h2>\n<p><em>Wraps callables to capture stdout, stderr, exceptions and the return.</em></p>\n<div id=\"why\">\n<h3>Why?</h3>\n<p>This library was created to assist in the testing of Python code, where\nreturn values and exceptions are important, in addition to what is\nwritten to stdout and stderr. It allows for a callable to be ran without\nthe caller being concerned with how important outputs are captured.</p>\n<p>An example use is when writing common code to test both a Python\ninterface and a corresponding CLI (tested by invoking <tt>main</tt>). A\ncommon test procedure - which may involve a complex setup and tear down\n- can be ran using the different interfaces and return results that\nencapsulate the outputs, without concern over the form they take (e.g.\nthe Python interface may have returned <tt>True</tt> on success but the\n<tt>CLI</tt> may have called <tt>exit(0)</tt>, with raises a <tt>SystemExit</tt>\nexception).</p>\n<p>Other <a href=\"#alternatives\" rel=\"nofollow\">alternatives</a> exist for capturing stdout and\nstderr but none also handle exceptions.</p>\n</div>\n<div id=\"how\">\n<h3>How?</h3>\n<div id=\"general\">\n<h4>General</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">capturewrap</span> <span class=\"kn\">import</span> <span class=\"n\">CaptureWrapBuilder</span>\n\n<span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">CaptureWrapBuilder</span><span class=\"p\">(</span><span class=\"n\">capture_stdout</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">capture_stderr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">capture_exceptions</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">wrapped</span> <span class=\"o\">=</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">my_method</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">wrapped</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"stdout: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"stderr: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"return_value: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">return_value</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"exception: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<p>Note: if an exception is captured, <tt>return_value</tt> will be <tt>None</tt>.</p>\n</div>\n<div id=\"custom-exception-capture\">\n<h4>Custom Exception Capture</h4>\n<p>It may be desirable to capture only some exceptions and leave others to\nget raised as normal. To do this with <tt>CaptureWrapBuilder</tt>, set\n<tt>capture_exceptions</tt> as a function that takes the exception as the\nfirst argument and returns back a boolean value to indicate if the\nexception should be captured. e.g.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">capturewrap</span> <span class=\"kn\">import</span> <span class=\"n\">CaptureWrapBuilder</span>\n\n<span class=\"n\">builder</span> <span class=\"o\">=</span> <span class=\"n\">CaptureWrapBuilder</span><span class=\"p\">(</span><span class=\"n\">capture_exceptions</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">e</span><span class=\"p\">:</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"ne\">SystemExit</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">wrapped</span> <span class=\"o\">=</span> <span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">wrapped</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>   <span class=\"c1\"># {\"exception\": [\"SystemExit: 0\\n\"]}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">wrapped</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>   <span class=\"c1\"># Raises exception</span>\n</pre>\n</div>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python &gt;= 3.6</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Stable releases can be installed via\n<a href=\"https://pypi.python.org/pypi?name=capturewrap&amp;:action=display\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install capturewrap\n</pre>\n<p>Bleeding edge versions can be installed directly from GitHub:</p>\n<pre>$ pip install git+https://github.com/wtsi-hgi/python-capturewrap.git@<span class=\"nv\">$commitOrBranch</span><span class=\"c1\">#egg=capturewrap</span>\n</pre>\n</div>\n<div id=\"implementation\">\n<h3>Implementation</h3>\n<p>This implementation captures stdout and stdin using\n<tt>`redirect_stdout</tt> &lt;<a href=\"https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout\" rel=\"nofollow\">https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout</a>&gt;`__\nand\n<tt>`redirect_stderr</tt> &lt;<a href=\"https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stderr\" rel=\"nofollow\">https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stderr</a>&gt;`__,\nwhich were added to the standard library in Python 3.5.</p>\n</div>\n<div id=\"alternatives\">\n<h3>Alternatives</h3>\n<ul>\n<li><a href=\"https://github.com/oinume/iocapture\" rel=\"nofollow\">iocapture</a>: older solution,\nreplaces <tt>sys.stdout</tt> and <tt>sys.stderr</tt> with capturing methods.</li>\n<li><a href=\"https://github.com/xolox/python-capturer\" rel=\"nofollow\">capturer</a>: complex\nsolution that works at lower level to intercept subprocess <tt>stdout</tt>\nand <tt>stderr</tt> using a pseudo terminal.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3494795, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "7e959b08b7e2593bd8e6f8d0d379d249", "sha256": "606f02a0e055aab0c6abd8615defb4d90c0a635f6436ea2d6d437c2e6fe98693"}, "downloads": -1, "filename": "capturewrap-1.0.0.tar.gz", "has_sig": false, "md5_digest": "7e959b08b7e2593bd8e6f8d0d379d249", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5794, "upload_time": "2017-11-22T11:07:14", "upload_time_iso_8601": "2017-11-22T11:07:14.028476Z", "url": "https://files.pythonhosted.org/packages/19/4a/760c8b623441fcafe4dc7c0bedfd14fb91e2963cea9d23b22ce46fedea2d/capturewrap-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "80280f9b91317efea8bb311bb0f9fd69", "sha256": "edd7434f21c71b5449e636dc33ed7356b3e8ad7cdaf90ec2ed3b18c4b09c5963"}, "downloads": -1, "filename": "capturewrap-1.0.1.tar.gz", "has_sig": false, "md5_digest": "80280f9b91317efea8bb311bb0f9fd69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5817, "upload_time": "2017-11-22T11:23:23", "upload_time_iso_8601": "2017-11-22T11:23:23.386420Z", "url": "https://files.pythonhosted.org/packages/f7/5a/a7cf841ebc7c7d13d59e8db8064174e81a3cc61695314e54247fe2140695/capturewrap-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4bb957bfebfaf3e20154720ad9404b06", "sha256": "e86faa7743b2ca2400f0b77921e2f6d5e67eb92d51395a57537bf86be82b74dc"}, "downloads": -1, "filename": "capturewrap-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4bb957bfebfaf3e20154720ad9404b06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6945, "upload_time": "2018-01-16T17:09:49", "upload_time_iso_8601": "2018-01-16T17:09:49.599694Z", "url": "https://files.pythonhosted.org/packages/33/29/fc4c189e8f1f76aee7d2b7674b9eed957531317180e31ff456574c72b4ac/capturewrap-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4bb957bfebfaf3e20154720ad9404b06", "sha256": "e86faa7743b2ca2400f0b77921e2f6d5e67eb92d51395a57537bf86be82b74dc"}, "downloads": -1, "filename": "capturewrap-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4bb957bfebfaf3e20154720ad9404b06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6945, "upload_time": "2018-01-16T17:09:49", "upload_time_iso_8601": "2018-01-16T17:09:49.599694Z", "url": "https://files.pythonhosted.org/packages/33/29/fc4c189e8f1f76aee7d2b7674b9eed957531317180e31ff456574c72b4ac/capturewrap-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:27 2020"}