{"info": {"author": "djosix", "author_email": "toregenerate@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# bites\n\nThis package provides a useful class: `Bs` (Bytes), to help you do several operations on bytes without writing a lot of stupid codes.\n\n\n- [bites](#bites)\n    - [Install](#install)\n    - [Why?](#why)\n        - [When you want to conduct a simple xor](#when-you-want-to-conduct-a-simple-xor)\n        - [When you need a simple encryption](#when-you-need-a-simple-encryption)\n    - [Usage](#usage)\n        - [Creating Bs](#creating-bs)\n            - [Using the constructor](#using-the-constructor)\n            - [From integer](#from-integer)\n            - [From hex string](#from-hex-string)\n            - [From bit string](#from-bit-string)\n            - [From file](#from-file)\n            - [From base64 encoded bytes](#from-base64-encoded-bytes)\n            - [Random](#random)\n        - [Basic Operations](#basic-operations)\n            - [Slicing](#slicing)\n            - [Setting values for slice of Bs](#setting-values-for-slice-of-bs)\n            - [Other useful methods](#other-useful-methods)\n        - [Bytewise Operations](#bytewise-operations)\n            - [Eamples](#eamples)\n            - [Binary operations with other types](#binary-operations-with-other-types)\n            - [Other useful methods](#other-useful-methods)\n        - [Bitwise Operations](#bitwise-operations)\n            - [Basic properties](#basic-properties)\n            - [Logical operations](#logical-operations)\n            - [Shifting over all bits](#shifting-over-all-bits)\n            - [Other useful methods](#other-useful-methods)\n        - [Convertions](#convertions)\n            - [To integer](#to-integer)\n            - [To string](#to-string)\n        - [Other](#other)\n            - [Base64 encode](#base64-encode)\n            - [Hashing](#hashing)\n\n\n## Install\n\n```shell\npython3 -m pip install -U bites\n```\n\n## Why?\n\nAren't you mad?\n\n#### When you want to conduct a simple xor\n\n```python\na = b'deadbeef'\nb = b'faceb00k'\n\n# Standard\nc = bytes(i ^ j for i, j in zip(a, b))\n\n# NumPy\nimport numpy as np\nc = (np.array([*a]) ^ np.array([*b])).astype(np.uint8).tobytes()\n\n# Using this package\nfrom bites import Bs\nc = bytes(Bs(a) ^ b)\n```\n\n#### When you need a simple encryption\n\n```python\nm = 'the_plain_text_you_wanna_encrypt'\ne = 'the_secret_key'\n\n# Standard\nmb = m.encode()\neb = e.encode()\nmbl = len(mb)\nebl = len(eb)\nl = max(mbl, ebl)\ncb = bytes([mb[i % mbl] ^ eb[i % ebl] for i in range(l)])\n\n# NumPy\nimport numpy as np\nmb = np.array(list(m.encode()))\neb = np.array(list(e.encode()))\nprint('You should repeat these arrays to the same length to use xor, '\n      \"and you gived up just because you don't know which method to use.\\n\"\n      'You start googling then write down this code:')\neb_ = np.tile(eb, mb.size // eb.size + 1)[:mb.size]\ncb = (mb ^ eb_).astype(np.uint8).tobytes() # elegant!\n\n# After you found this package:\nfrom bites import Bs\ncb = bytes(Bs(m) ^ e)\n\n# Or, if you don't want auto-repeating / padding, use n()\ncb = bytes(Bs(m) ^ Bs(e).n())   # error!!!\ncb = bytes(Bs(m) ^ Bs(e).r())   # repeat e to fit the length of m\ncb = bytes(Bs(m) ^ Bs(e).p(0))  # pad e with 0s to fit the length of m\n```\n\n- `Bs` by default uses auto-repeating.\n- `bs.r()` explicitly specifies using auto-repeating.\n- `bs.p(c)` returns a `Bs` that pads `c` to fit the other longer operands by default.\n- `bs.n()` returns a `Bs` object that will not change its length automatically.\n\n## Usage\n\n```python\nfrom bites import Bs\n\nbs = Bs(1, 2, 3, 4)\nbs # <Bs 4: [01, 02, 03, 04]>\n```\n\n### Creating Bs\n\n#### Using the constructor\n\nThese lines create the same thing, the input parameters will be flattened and automatically converted to ints in `range(0, 256)`.\n\n```python\n# These all create `<Bs 4: [01, 02, 03, 04]>`\nBs(1, 2, 3, 4)\nBs([1, 2, 3, 4])\nBs([[1], [2], [3, [4]]])\nBs(256+1, 256+2, 256+3, 256+4)\nBs(1-256, 2-256, 3-256, 4-256)\nBs(bytes([1, 2]), 3, 4)\nBs('\\x01', b'\\x02', 3, [4])\nBs(Bs(1, 2), [3], 4)\nBs(Bs(1, Bs(2)), Bs([3, Bs(4)]))\n```\n\nSimple rules\n\n- `int` will be replaced with its remainder of 256.\n- `str` will be encoded into `bytes` (UTF-8).\n- `Iterable` will be flattened.\n\n```python\n>>> Bs(range(5))\n<Bs 5: [00, 01, 02, 03, 04]>\n\n>>> Bs([i for i in range(256) if i % 3 == i % 7 == 0 ])\n<Bs 13: [00, 15, 2a, 3f, 54, 69, 7e, 93, a8, bd, d2, e7, fc]>\n\n>>> Bs(map(lambda n: n + 3, range(5)))\n<Bs 5: [03, 04, 05, 06, 07]>\n\n>>> Bs(range(0, 3), range(10, 13))\n<Bs 6: [00, 01, 02, 0a, 0b, 0c]>\n```\n\n#### From integer\n\n```python\n# Integers will be considered as little endien\n>>> Bs.from_int(8192)\n<Bs 2: [00, 20]>\n>>> Bs.from_int(0x102030)\n<Bs 3: [30, 20, 10]>\n\n# Simply call `bs.rev()` if you want big endian\n>>> Bs.from_int(8192).rev()\n<Bs 2: [20, 00]>\n```\n\n#### From hex string\n\n```python\n# 'DE' is the first byte\n>>> Bs.from_hex('DEADBEEF')\n<Bs 4: [de, ad, be, ef]>\n\n# If the string starts with '0x', 'EF' will be the first byte\n>>> Bs.from_hex('0xDEADBEEF')\n<Bs 4: [ef, be, ad, de]>\n>>> Bs.from_int(int('0xDEADBEEF', 16))\n<Bs 4: [ef, be, ad, de]>\n```\n\n#### From bit string\n\n```python\n# The first bit is LSB\n>>> Bs.from_bin('00001111')\n<Bs 1: [f0]>\n\n# If the string starts with '0b', the first bit in the string is MSB\n>>> Bs.from_bin('0b00001111')\n<Bs 1: [0f]>\n>>> Bs.from_int(int('0b00001111', 2))\n<Bs 1: [0f]>\n\n# Notice that this will not be '00001111'\n>>> Bs.from_bin('0b00001111').bin()\n'11110000'\n```\n\n#### From file\n\n```python\nprint(Bs.load('/etc/passwd').str())\n```\n\n#### From base64 encoded bytes\n\n```python\nBs.from_base64('ZnVjaw==')\n```\n\n#### Random\n\n```python\n>>> import string\n\n>>> Bs.rand(8, cs=(string.ascii_lowercase + '0123456')).str()\n'c4u0epdn'\n\n>>> Bs.rand(8, cs=range(100)).hex()\n'4a334519435d1103'\n\n>>> Bs.rand(8, cs=string.hexdigits).str()\n'cb41fA41'\n```\n\n### Basic Operations\n\n#### Slicing\n\n```python\n>>> bs = Bs(1, 2, 3, 4)\n>>> bs\n<Bs 4: [01, 02, 03, 04]>\n\n>>> bs[:2]\n<Bs 2: [01, 02]>\n\n>>> bs[2]\n<Bs 1: [03]>\n\n>>> bs[-1]\n<Bs 1: [04]>\n\n>>> bs[::-1]\n<Bs 4: [04, 03, 02, 01]>\n\n>>> bs[::2]\n<Bs 2: [01, 03]>\n```\n\n#### Setting values for slice of Bs\n\n```python\n>>> bs = Bs(1, 2, 3, 4)\n>>> bs\n<Bs 4: [01, 02, 03, 04]>\n\n>>> bs[:2] = 0\n>>> bs\n<Bs 4: [00, 00, 03, 04]>\n\n>>> bs[:] = 0\n>>> bs\n<Bs 4: [00, 00, 00, 00]>\n\n>>> bs[:] = '1234'\n>>> bs\n<Bs 4: [31, 32, 33, 34]>\n\n>>> bs[:] = '123'\n>>> bs\n<Bs 4: [31, 32, 33, 31]>\n\n>>> bs[:] = '12345'\n>>> bs\n<Bs 4: [31, 32, 33, 34]>\n\n>>> bs[:] = Bs('12').n()\n# Error: cannot set values to range(0, 4): r=False, p=None, l=2\n\n>>> bs[:] = Bs('12').p(0)\n\n>>> bs\n<Bs 4: [31, 32, 00, 00]>\n```\n\n#### Other useful methods\n\n```python\n>>> bs = Bs('dead')\n>>> bs\n<Bs 4: [64, 65, 61, 64]>\n\n# Repeat n times\n>>> bs.rep(2)\n<Bs 8: [64, 65, 61, 64, 64, 65, 61, 64]>\n\n# Repeat to length\n>>> bs.repto(6)\n<Bs 6: [64, 65, 61, 64, 64, 65]>\n\n# Pad to length\n>>> bs.padto(6, 0)\n<Bs 6: [64, 65, 61, 64, 00, 00]>\n\n# Append or concatenate\n>>> bs @ 'beef'\n<Bs 8: [64, 65, 61, 64, 62, 65, 65, 66]>\n\n# Extend to length automatically\n>>> bs.extto(6)\n<Bs 6: [64, 65, 61, 64, 64, 65]>\n\n# Explicit automatic repeating\n>>> bs.r().extto(6)\n<Bs 6: [64, 65, 61, 64, 64, 65]>\n\n# Use automatic padding\n>>> bs.p(0).extto(6)\n<Bs 6: [64, 65, 61, 64, 00, 00]>\n\n# Disable automatic extension\n>>> bs.n().extto(6) # Error\n```\n\n### Bytewise Operations\n\nOperands with `Bs` objects will first be converted into `Bs`. If the lengths don't match, the shorter one will call `shorter_bs.extto(len(longer_bs))` to fit the longer operand's length.\n\n#### Eamples\n\n```python\n>>> a = Bs.from_int(0x0a00)\n>>> a\n<Bs 2: [00, 0a]>\n\n>>> b = Bs.from_int(0x0b)\n>>> b\n<Bs 1: [0b]>\n\n>>> a + b # b will be unrolled to <Bs 2: [0b, 0b]>\n<Bs 2: [0b, 15]>\n\n>>> a + b.n()\n# Error: length not matched: (2, 1)\n\n>>> a - b\n<Bs 2: [f5, ff]>\n\n>>> a * b\n<Bs 2: [00, 6e]>\n\n>>> a / b\n<Bs 2: [00, 00]>\n\n>>> a // b\n<Bs 2: [00, 00]>\n\n>>> a ** b\n<Bs 2: [00, 00]>\n\n>>> a % b\n<Bs 2: [00, 0a]>\n```\n\n#### Binary operations with other types\n\nThe other operand will first be converted into `Bs` as well, with automatic repeating to fit the length of our `Bs`.\n\n```python\n>>> cafe = Bs.from_hex('c01dcafe')\n>>> cafe\n<Bs 4: [c0, 1d, ca, fe]>\n\n>>> cafe + 1\n<Bs 4: [c1, 1e, cb, ff]>\n\n>>> 1 + cafe\n<Bs 4: [c1, 1e, cb, ff]>\n\n>>> cafe + '\u7cd6'\n<Bs 4: [a7, d0, 60, e5]>\n\n>>> cafe + b'cafe'\n<Bs 4: [23, 7e, 30, 63]>\n\n>>> cafe + b'sugar'\n<Bs 5: [33, 92, 31, 5f, 32]>\n\n>>> cafe + [1, 2, 3, 4]\n<Bs 4: [c1, 1f, cd, 02]>\n\n>>> cafe + range(5)\n<Bs 5: [c0, 1e, cc, 01, c4]>\n\n>>> cafe.p(0) + [0] * 6\n<Bs 6: [c0, 1d, ca, fe, 00, 00]>\n\n>>> cafe.bin()\n'00000011101110000101001101111111'\n\n>>> (cafe >> 1).bin() # for each byte\n'00000110011100001010011011111110'\n\n>>> (cafe << 1).bin() # for each byte\n'00000001010111000010100100111111'\n```\n\n#### Other useful methods\n\n```python\n>>> bs = Bs(range(7))\n>>> bs\n<Bs 7: [00, 01, 02, 03, 04, 05, 06]>\n\n# Reverse\n>>> bs.rev()\n<Bs 7: [06, 05, 04, 03, 02, 01, 00]>\n\n# Roll\n>>> bs.roll(1)\n<Bs 7: [06, 00, 01, 02, 03, 04, 05]>\n\n>>> bs.roll(-1)\n<Bs 7: [01, 02, 03, 04, 05, 06, 00]>\n\n>>> bs.rjust(10, 0xff)\n<Bs 10: [ff, ff, ff, 00, 01, 02, 03, 04, 05, 06]>\n\n>>> bs.ljust(10, 0xff)\n<Bs 10: [00, 01, 02, 03, 04, 05, 06, ff, ff, ff]>\n\n# Iterate over every n bytes\n>>> bs.every()\n[<Bs 1: [00]>, <Bs 1: [01]>, <Bs 1: [02]>, <Bs 1: [03]>, <Bs 1: [04]>, <Bs 1: [05]>, <Bs 1: [06]>]\n\n>>> bs.every(n=3)\n[<Bs 3: [00, 01, 02]>, <Bs 3: [03, 04, 05]>, <Bs 1: [06]>]\n\n>>> bs.every(n=3, m=list) # map\n[[0, 1, 2], [3, 4, 5], [6]]\n\n>>> bs.every(n=3, m=int)\n[131328, 328707, 6]\n\n>>> bs.every(n=4, m=lambda i: i.asint(32)) # with map\n[50462976, 394500]\n\n>>> bs.every(4, list, lambda i: 2 in i) # filter before map\n[[0, 1, 2, 3]]\n\n>>> bs.every(4, f=lambda i: 2 in i) # only filter\n[<Bs 4: [00, 01, 02, 03]>]\n```\n\n### Bitwise Operations\n\nOperating over bits.\n\n#### Basic properties \n\n```python\n#                       v MSB          v LSB\n>>> bs = Bs.from_bin('0b1111000011001100')\n\n>>> bs.bin()\n'0011001100001111'\n\n>>> bin(bs)\n'0b1111000011001100'\n\n>>> bs\n<Bs 2: [cc, f0]>\n\n>>> bs.int()\n61644\n\n#                     v LSB          v MSB\n>>> bs = Bs.from_bin('1111000011001100')\n\n>>> bs.bin()\n'1111000011001100'\n\n>>> bin(bs)\n'0b11001100001111'\n\n>>> bs\n<Bs 2: [0f, 33]>\n\n>>> bs.int()\n13071\n```\n\n#### Logical operations\n\n```python\n>>> x = Bs.from_bin('1111000010101010')\n\n>>> (~x).bin()\n'0000111101010101'\n\n>>> y = Bs.from_bin('1' * 16)\n\n>>> (x & y).bin()\n'1111000010101010'\n\n>>> (x | y).bin()\n'1111111111111111'\n\n>>> (x ^ y).bin()\n'0000111101010101'\n```\n\n#### Shifting over all bits\n\n```python\n>>> bs = Bs.from_bin('1100000000000001')\n\n>>> bs.shift(1).bin()\n'0110000000000000'\n\n>>> bs.shift(-1).bin()\n'1000000000000010'\n\n>>> bs.asint()\n-32765\n\n>>> bs.shift(-1, a=True).bin() # arithmetic\n'1000000000000011'\n\n>>> bs.shift(-2, a=True).bin()\n'0000000000000111'\n\n>>> bs.shift(-5, a=True).bin()\n'0000000000111111'\n\n>>> bs.shift(-100, a=True).bin()\n'1111111111111111'\n\n>>> bs = Bs.from_bin('0000000000000010')\n\n>>> bs.asint()\n16384\n\n>>> bs.shift(1, a=True).bin()\n'0000000000000000'\n\n>>> bs.shift(1, a=True).asint()\n0\n\n>>> bs.shift(-1, a=True).bin()\n'0000000000000100'\n\n>>> bs.shift(-1, a=True).asint()\n8192\n\n>>> bs.shift(-5, a=True).bin()\n'0000000001000000'\n\n>>> bs.shift(-5, a=True).asint()\n512\n\n>>> bs.shift(-100, a=True).bin()\n'0000000000000000'\n\n>>> bs.shift(-100, a=True).asint()\n0\n```\n\n#### Other useful methods\n\n```python\n>>> bs = Bs.from_bin('1100000000000001')\n\n>>> bs.revbits().bin()\n'1000000000000011'\n\n>>> bs.rollbits(1).bin()\n'1110000000000000'\n\n>>> bs.rollbits(-1).bin()\n'1000000000000011'\n\n>>> bs.bits()\n['1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1']\n\n>>> bs.bits(every=3)\n['110', '000', '000', '000', '000', '1']\n\n>>> [b for b in bs.bits(every=3) if len(b) == 3]\n['110', '000', '000', '000', '000']\n```\n\n\n### Convertions\n\n#### To integer\n\n```python\n>>> bs = Bs(0, 0b10000000)\n>>> bs\n<Bs 2: [00, 80]>\n\n>>> bs.int()\n32768\n\n>>> int(bs)\n32768\n\n>>> bs.asint()\n-32768\n\n>>> bs.asint(8)\n0\n\n>>> bs.asint(16)\n-32768\n\n>>> bs.asint(32)\n32768\n\n>>> bs.asuint()\n32768\n\n>>> bs.asuint(8)\n0\n\n>>> bs = Bs.rand(32)\n>>> bs\n<Bs 32: [51, 2a, aa, dc, 83, 08, 0c, 84, 10, 43, 5f, 5c, db, de, 97, 17, 55, 49, 4e, f3, 89, b3, 45, 03, c1, 98, 77, fc, 90, bd, 50, 6b]>\n\n>>> bs.asints(32)\n[-592827823, -2079586173, 1549746960, 395828955, -212973227, 54899593, -59270975, 1800453520]\n\n>>> bs.asuints(32)\n[3702139473, 2215381123, 1549746960, 395828955, 4081994069, 54899593, 4235696321, 1800453520]\n```\n\n#### To string\n\n```python\n>>> bs = Bs('las vegas')\n>>> bs\n<Bs 9: [6c, 61, 73, 20, 76, 65, 67, 61, 73]>\n\n>>> bs.str()\n'las vegas'\n\n>>> str(bs)\n'las vegas'\n\n>>> bs.hex()\n'6c6173207665676173'\n\n>>> hex(bs)\n'0x73616765762073616c'\n\n>>> oct(bs)\n'0o346605473127304034660554'\n\n>>> bs.bin()\n'001101101000011011001110000001000110111010100110111001101000011011001110'\n\n>>> bin(bs)\n'0b11100110110000101100111011001010111011000100000011100110110000101101100'\n```\n\n### Other\n\n#### Base64 encode\n\n```python\n\n>>> Bs('Las Vegas').base64()\n'TGFzIFZlZ2Fz'\n```\n\n#### Hashing\n\n```python\n>>> bs = Bs('Las Vegas')\n\n>>> bs.hash('md5')\n<Bs 16: [05, c2, 7b, f0, 09, 32, 57, 2d, e2, 8b, f6, 5a, 05, 39, ba, 97]>\n\n>>> bs.hash('md5').hex()\n'05c27bf00932572de28bf65a0539ba97'\n\n>>> bs.hash('sha256')\n<Bs 32: [2b, d2, 5c, d9, 60, ab, a8, b7, 06, e2, b6, 7f, 2b, b3, 8b, 75, 0e, e5, 38, 4b, 0e, 98, 83, 05, 3e, bc, 3b, 89, ef, 4d, de, f9]>\n\n>>> bs.hash('sha256').hex()\n'2bd25cd960aba8b706e2b67f2bb38b750ee5384b0e9883053ebc3b89ef4ddef9'\n\n# See what's available\n>>> import hashlib\n>>> hashlib.algorithms_guaranteed\n{'sha384', 'shake_128', 'sha3_256', 'sha3_512', 'md5', 'sha512', 'shake_256', 'sha3_384', 'sha1', 'sha3_224', 'blake2b', 'blake2s', 'sha256', 'sha224'}\n```\n\n#### Command pipe\n\n```python\n>>> Bs('stdin input').pipe('tr a-z A-Z').str()\n'STDIN INPUT'\n\n>>> Bs('stdin input').pipe('base64').pipe('tee /dev/stderr').pipe('base64 --decode').str()\nc3RkaW4gaW5wdXQ=\n'stdin input'\n\n>>> print(Bs().pipe('ls').str())\nLICENSE\nREADME.md\nbites\nbites.egg-info\nbuild\ndist\nsetup.py\n\n```\n\n#### IPv4\n\n```python\n>>> ip = Bs.from_ip4('192.168.1.1/16')\n>>> ip\n<Bs 4: [00, 00, a8, c0]>\n\n>>> ip.every(1, int)\n[0, 0, 168, 192]\n\n>>> ip.ip4()\n'192.168.0.0'\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/djosix/bites", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bites", "package_url": "https://pypi.org/project/bites/", "platform": "", "project_url": "https://pypi.org/project/bites/", "project_urls": {"Homepage": "https://github.com/djosix/bites"}, "release_url": "https://pypi.org/project/bites/0.0.10/", "requires_dist": null, "requires_python": "", "summary": "Operating bytes made easy", "version": "0.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bites</h1>\n<p>This package provides a useful class: <code>Bs</code> (Bytes), to help you do several operations on bytes without writing a lot of stupid codes.</p>\n<ul>\n<li><a href=\"#bites\" rel=\"nofollow\">bites</a>\n<ul>\n<li><a href=\"#install\" rel=\"nofollow\">Install</a></li>\n<li><a href=\"#why\" rel=\"nofollow\">Why?</a>\n<ul>\n<li><a href=\"#when-you-want-to-conduct-a-simple-xor\" rel=\"nofollow\">When you want to conduct a simple xor</a></li>\n<li><a href=\"#when-you-need-a-simple-encryption\" rel=\"nofollow\">When you need a simple encryption</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#creating-bs\" rel=\"nofollow\">Creating Bs</a>\n<ul>\n<li><a href=\"#using-the-constructor\" rel=\"nofollow\">Using the constructor</a></li>\n<li><a href=\"#from-integer\" rel=\"nofollow\">From integer</a></li>\n<li><a href=\"#from-hex-string\" rel=\"nofollow\">From hex string</a></li>\n<li><a href=\"#from-bit-string\" rel=\"nofollow\">From bit string</a></li>\n<li><a href=\"#from-file\" rel=\"nofollow\">From file</a></li>\n<li><a href=\"#from-base64-encoded-bytes\" rel=\"nofollow\">From base64 encoded bytes</a></li>\n<li><a href=\"#random\" rel=\"nofollow\">Random</a></li>\n</ul>\n</li>\n<li><a href=\"#basic-operations\" rel=\"nofollow\">Basic Operations</a>\n<ul>\n<li><a href=\"#slicing\" rel=\"nofollow\">Slicing</a></li>\n<li><a href=\"#setting-values-for-slice-of-bs\" rel=\"nofollow\">Setting values for slice of Bs</a></li>\n<li><a href=\"#other-useful-methods\" rel=\"nofollow\">Other useful methods</a></li>\n</ul>\n</li>\n<li><a href=\"#bytewise-operations\" rel=\"nofollow\">Bytewise Operations</a>\n<ul>\n<li><a href=\"#eamples\" rel=\"nofollow\">Eamples</a></li>\n<li><a href=\"#binary-operations-with-other-types\" rel=\"nofollow\">Binary operations with other types</a></li>\n<li><a href=\"#other-useful-methods\" rel=\"nofollow\">Other useful methods</a></li>\n</ul>\n</li>\n<li><a href=\"#bitwise-operations\" rel=\"nofollow\">Bitwise Operations</a>\n<ul>\n<li><a href=\"#basic-properties\" rel=\"nofollow\">Basic properties</a></li>\n<li><a href=\"#logical-operations\" rel=\"nofollow\">Logical operations</a></li>\n<li><a href=\"#shifting-over-all-bits\" rel=\"nofollow\">Shifting over all bits</a></li>\n<li><a href=\"#other-useful-methods\" rel=\"nofollow\">Other useful methods</a></li>\n</ul>\n</li>\n<li><a href=\"#convertions\" rel=\"nofollow\">Convertions</a>\n<ul>\n<li><a href=\"#to-integer\" rel=\"nofollow\">To integer</a></li>\n<li><a href=\"#to-string\" rel=\"nofollow\">To string</a></li>\n</ul>\n</li>\n<li><a href=\"#other\" rel=\"nofollow\">Other</a>\n<ul>\n<li><a href=\"#base64-encode\" rel=\"nofollow\">Base64 encode</a></li>\n<li><a href=\"#hashing\" rel=\"nofollow\">Hashing</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Install</h2>\n<pre>python3 -m pip install -U bites\n</pre>\n<h2>Why?</h2>\n<p>Aren't you mad?</p>\n<h4>When you want to conduct a simple xor</h4>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'deadbeef'</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'faceb00k'</span>\n\n<span class=\"c1\"># Standard</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">^</span> <span class=\"n\">j</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># NumPy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">])</span> <span class=\"o\">^</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">]))</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tobytes</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Using this package</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bites</span> <span class=\"kn\">import</span> <span class=\"n\">Bs</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<h4>When you need a simple encryption</h4>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"s1\">'the_plain_text_you_wanna_encrypt'</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"s1\">'the_secret_key'</span>\n\n<span class=\"c1\"># Standard</span>\n<span class=\"n\">mb</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n<span class=\"n\">eb</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n<span class=\"n\">mbl</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mb</span><span class=\"p\">)</span>\n<span class=\"n\">ebl</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">eb</span><span class=\"p\">)</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">mbl</span><span class=\"p\">,</span> <span class=\"n\">ebl</span><span class=\"p\">)</span>\n<span class=\"n\">cb</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"n\">mb</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">mbl</span><span class=\"p\">]</span> <span class=\"o\">^</span> <span class=\"n\">eb</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"n\">ebl</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)])</span>\n\n<span class=\"c1\"># NumPy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">mb</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()))</span>\n<span class=\"n\">eb</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'You should repeat these arrays to the same length to use xor, '</span>\n      <span class=\"s2\">\"and you gived up just because you don't know which method to use.</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n      <span class=\"s1\">'You start googling then write down this code:'</span><span class=\"p\">)</span>\n<span class=\"n\">eb_</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">tile</span><span class=\"p\">(</span><span class=\"n\">eb</span><span class=\"p\">,</span> <span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">//</span> <span class=\"n\">eb</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)[:</span><span class=\"n\">mb</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">]</span>\n<span class=\"n\">cb</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">mb</span> <span class=\"o\">^</span> <span class=\"n\">eb_</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">tobytes</span><span class=\"p\">()</span> <span class=\"c1\"># elegant!</span>\n\n<span class=\"c1\"># After you found this package:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bites</span> <span class=\"kn\">import</span> <span class=\"n\">Bs</span>\n<span class=\"n\">cb</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or, if you don't want auto-repeating / padding, use n()</span>\n<span class=\"n\">cb</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">())</span>   <span class=\"c1\"># error!!!</span>\n<span class=\"n\">cb</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">())</span>   <span class=\"c1\"># repeat e to fit the length of m</span>\n<span class=\"n\">cb</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>  <span class=\"c1\"># pad e with 0s to fit the length of m</span>\n</pre>\n<ul>\n<li><code>Bs</code> by default uses auto-repeating.</li>\n<li><code>bs.r()</code> explicitly specifies using auto-repeating.</li>\n<li><code>bs.p(c)</code> returns a <code>Bs</code> that pads <code>c</code> to fit the other longer operands by default.</li>\n<li><code>bs.n()</code> returns a <code>Bs</code> object that will not change its length automatically.</li>\n</ul>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bites</span> <span class=\"kn\">import</span> <span class=\"n\">Bs</span>\n\n<span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">bs</span> <span class=\"c1\"># &lt;Bs 4: [01, 02, 03, 04]&gt;</span>\n</pre>\n<h3>Creating Bs</h3>\n<h4>Using the constructor</h4>\n<p>These lines create the same thing, the input parameters will be flattened and automatically converted to ints in <code>range(0, 256)</code>.</p>\n<pre><span class=\"c1\"># These all create `&lt;Bs 4: [01, 02, 03, 04]&gt;`</span>\n<span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">Bs</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">Bs</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]]])</span>\n<span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"mi\">256</span><span class=\"p\">)</span>\n<span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\x01</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x02</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)),</span> <span class=\"n\">Bs</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]))</span>\n</pre>\n<p>Simple rules</p>\n<ul>\n<li><code>int</code> will be replaced with its remainder of 256.</li>\n<li><code>str</code> will be encoded into <code>bytes</code> (UTF-8).</li>\n<li><code>Iterable</code> will be flattened.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"p\">([</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">7</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"p\">])</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">13</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">54</span><span class=\"p\">,</span> <span class=\"mi\">69</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"n\">a8</span><span class=\"p\">,</span> <span class=\"n\">bd</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">e7</span><span class=\"p\">,</span> <span class=\"n\">fc</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">06</span><span class=\"p\">,</span> <span class=\"mi\">07</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">c</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<h4>From integer</h4>\n<pre><span class=\"c1\"># Integers will be considered as little endien</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"mh\">0x102030</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Simply call `bs.rev()` if you want big endian</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"mi\">8192</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rev</span><span class=\"p\">()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<h4>From hex string</h4>\n<pre><span class=\"c1\"># 'DE' is the first byte</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_hex</span><span class=\"p\">(</span><span class=\"s1\">'DEADBEEF'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">de</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">be</span><span class=\"p\">,</span> <span class=\"n\">ef</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># If the string starts with '0x', 'EF' will be the first byte</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_hex</span><span class=\"p\">(</span><span class=\"s1\">'0xDEADBEEF'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">ef</span><span class=\"p\">,</span> <span class=\"n\">be</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">de</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s1\">'0xDEADBEEF'</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">ef</span><span class=\"p\">,</span> <span class=\"n\">be</span><span class=\"p\">,</span> <span class=\"n\">ad</span><span class=\"p\">,</span> <span class=\"n\">de</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<h4>From bit string</h4>\n<pre><span class=\"c1\"># The first bit is LSB</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'00001111'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">f0</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># If the string starts with '0b', the first bit in the string is MSB</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'0b00001111'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s1\">'0b00001111'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Notice that this will not be '00001111'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'0b00001111'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'11110000'</span>\n</pre>\n<h4>From file</h4>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'/etc/passwd'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">())</span>\n</pre>\n<h4>From base64 encoded bytes</h4>\n<pre><span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_base64</span><span class=\"p\">(</span><span class=\"s1\">'ZnVjaw=='</span><span class=\"p\">)</span>\n</pre>\n<h4>Random</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">string</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">cs</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">ascii_lowercase</span> <span class=\"o\">+</span> <span class=\"s1\">'0123456'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">()</span>\n<span class=\"s1\">'c4u0epdn'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">cs</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n<span class=\"s1\">'4a334519435d1103'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">cs</span><span class=\"o\">=</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">hexdigits</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">()</span>\n<span class=\"s1\">'cb41fA41'</span>\n</pre>\n<h3>Basic Operations</h3>\n<h4>Slicing</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">03</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">04</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<h4>Setting values for slice of Bs</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"s1\">'1234'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"s1\">'123'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"s1\">'12345'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">34</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'12'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">()</span>\n<span class=\"c1\"># Error: cannot set values to range(0, 4): r=False, p=None, l=2</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'12'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<h4>Other useful methods</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'dead'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Repeat n times</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">rep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">8</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Repeat to length</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">repto</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Pad to length</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">padto</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Append or concatenate</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">@</span> <span class=\"s1\">'beef'</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">8</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">66</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Extend to length automatically</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">extto</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Explicit automatic repeating</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">r</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">extto</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Use automatic padding</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">extto</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Disable automatic extension</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">extto</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"c1\"># Error</span>\n</pre>\n<h3>Bytewise Operations</h3>\n<p>Operands with <code>Bs</code> objects will first be converted into <code>Bs</code>. If the lengths don't match, the shorter one will call <code>shorter_bs.extto(len(longer_bs))</code> to fit the longer operand's length.</p>\n<h4>Eamples</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"mh\">0x0a00</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">a</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"mh\">0x0b</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"c1\"># b will be unrolled to &lt;Bs 2: [0b, 0b]&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">()</span>\n<span class=\"c1\"># Error: length not matched: (2, 1)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">f5</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">//</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">**</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">b</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">a</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<h4>Binary operations with other types</h4>\n<p>The other operand will first be converted into <code>Bs</code> as well, with automatic repeating to fit the length of our <code>Bs</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_hex</span><span class=\"p\">(</span><span class=\"s1\">'c01dcafe'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">ca</span><span class=\"p\">,</span> <span class=\"n\">fe</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">cb</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">cafe</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">cb</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span> <span class=\"o\">+</span> <span class=\"s1\">'\u7cd6'</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">a7</span><span class=\"p\">,</span> <span class=\"n\">d0</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">e5</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"s1\">'cafe'</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"s1\">'sugar'</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">cd</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span> <span class=\"o\">+</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"n\">c4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span><span class=\"o\">.</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">6</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">6</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">ca</span><span class=\"p\">,</span> <span class=\"n\">fe</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cafe</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'00000011101110000101001101111111'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">cafe</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span> <span class=\"c1\"># for each byte</span>\n<span class=\"s1\">'00000110011100001010011011111110'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">cafe</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span> <span class=\"c1\"># for each byte</span>\n<span class=\"s1\">'00000001010111000010100100111111'</span>\n</pre>\n<h4>Other useful methods</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">7</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">06</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Reverse</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">rev</span><span class=\"p\">()</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">7</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">06</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Roll</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">roll</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">7</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">06</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">roll</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">7</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">06</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">rjust</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">06</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mh\">0xff</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">10</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">06</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Iterate over every n bytes</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">every</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">01</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">02</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">03</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">04</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">05</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">06</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">every</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"mi\">04</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">06</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">every</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"c1\"># map</span>\n<span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">every</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">131328</span><span class=\"p\">,</span> <span class=\"mi\">328707</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">every</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))</span> <span class=\"c1\"># with map</span>\n<span class=\"p\">[</span><span class=\"mi\">50462976</span><span class=\"p\">,</span> <span class=\"mi\">394500</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">every</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"c1\"># filter before map</span>\n<span class=\"p\">[[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">every</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"ow\">in</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"c1\"># only filter</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">01</span><span class=\"p\">,</span> <span class=\"mi\">02</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<h3>Bitwise Operations</h3>\n<p>Operating over bits.</p>\n<h4>Basic properties</h4>\n<pre><span class=\"c1\">#                       v MSB          v LSB</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'0b1111000011001100'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0011001100001111'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">bin</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n<span class=\"s1\">'0b1111000011001100'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">cc</span><span class=\"p\">,</span> <span class=\"n\">f0</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">()</span>\n<span class=\"mi\">61644</span>\n\n<span class=\"c1\">#                     v LSB          v MSB</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'1111000011001100'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'1111000011001100'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">bin</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n<span class=\"s1\">'0b11001100001111'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">()</span>\n<span class=\"mi\">13071</span>\n</pre>\n<h4>Logical operations</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'1111000010101010'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0000111101010101'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'1'</span> <span class=\"o\">*</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&amp;</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'1111000010101010'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">|</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'1111111111111111'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">^</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0000111101010101'</span>\n</pre>\n<h4>Shifting over all bits</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'1100000000000001'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0110000000000000'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'1000000000000010'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">()</span>\n<span class=\"o\">-</span><span class=\"mi\">32765</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span> <span class=\"c1\"># arithmetic</span>\n<span class=\"s1\">'1000000000000011'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0000000000000111'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0000000000111111'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'1111111111111111'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'0000000000000010'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">()</span>\n<span class=\"mi\">16384</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0000000000000000'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">()</span>\n<span class=\"mi\">0</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0000000000000100'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">()</span>\n<span class=\"mi\">8192</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0000000001000000'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">()</span>\n<span class=\"mi\">512</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'0000000000000000'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">shift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">()</span>\n<span class=\"mi\">0</span>\n</pre>\n<h4>Other useful methods</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_bin</span><span class=\"p\">(</span><span class=\"s1\">'1100000000000001'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">revbits</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'1000000000000011'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">rollbits</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'1110000000000000'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">rollbits</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'1000000000000011'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">bits</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">bits</span><span class=\"p\">(</span><span class=\"n\">every</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'110'</span><span class=\"p\">,</span> <span class=\"s1\">'000'</span><span class=\"p\">,</span> <span class=\"s1\">'000'</span><span class=\"p\">,</span> <span class=\"s1\">'000'</span><span class=\"p\">,</span> <span class=\"s1\">'000'</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"n\">b</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">bits</span><span class=\"p\">(</span><span class=\"n\">every</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"s1\">'110'</span><span class=\"p\">,</span> <span class=\"s1\">'000'</span><span class=\"p\">,</span> <span class=\"s1\">'000'</span><span class=\"p\">,</span> <span class=\"s1\">'000'</span><span class=\"p\">,</span> <span class=\"s1\">'000'</span><span class=\"p\">]</span>\n</pre>\n<h3>Convertions</h3>\n<h4>To integer</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mb\">0b10000000</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">int</span><span class=\"p\">()</span>\n<span class=\"mi\">32768</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n<span class=\"mi\">32768</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">()</span>\n<span class=\"o\">-</span><span class=\"mi\">32768</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"mi\">32768</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asint</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"mi\">32768</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asuint</span><span class=\"p\">()</span>\n<span class=\"mi\">32768</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asuint</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">32</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">51</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">aa</span><span class=\"p\">,</span> <span class=\"n\">dc</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">08</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"mi\">84</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">de</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">f3</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"n\">b3</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">03</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"n\">fc</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"n\">bd</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asints</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">592827823</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2079586173</span><span class=\"p\">,</span> <span class=\"mi\">1549746960</span><span class=\"p\">,</span> <span class=\"mi\">395828955</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">212973227</span><span class=\"p\">,</span> <span class=\"mi\">54899593</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">59270975</span><span class=\"p\">,</span> <span class=\"mi\">1800453520</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">asuints</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">3702139473</span><span class=\"p\">,</span> <span class=\"mi\">2215381123</span><span class=\"p\">,</span> <span class=\"mi\">1549746960</span><span class=\"p\">,</span> <span class=\"mi\">395828955</span><span class=\"p\">,</span> <span class=\"mi\">4081994069</span><span class=\"p\">,</span> <span class=\"mi\">54899593</span><span class=\"p\">,</span> <span class=\"mi\">4235696321</span><span class=\"p\">,</span> <span class=\"mi\">1800453520</span><span class=\"p\">]</span>\n</pre>\n<h4>To string</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'las vegas'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">9</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">61</span><span class=\"p\">,</span> <span class=\"mi\">73</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">()</span>\n<span class=\"s1\">'las vegas'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n<span class=\"s1\">'las vegas'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n<span class=\"s1\">'6c6173207665676173'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n<span class=\"s1\">'0x73616765762073616c'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">oct</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n<span class=\"s1\">'0o346605473127304034660554'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">bin</span><span class=\"p\">()</span>\n<span class=\"s1\">'001101101000011011001110000001000110111010100110111001101000011011001110'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">bin</span><span class=\"p\">(</span><span class=\"n\">bs</span><span class=\"p\">)</span>\n<span class=\"s1\">'0b11100110110000101100111011001010111011000100000011100110110000101101100'</span>\n</pre>\n<h3>Other</h3>\n<h4>Base64 encode</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'Las Vegas'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">base64</span><span class=\"p\">()</span>\n<span class=\"s1\">'TGFzIFZlZ2Fz'</span>\n</pre>\n<h4>Hashing</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'Las Vegas'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s1\">'md5'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">16</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">f0</span><span class=\"p\">,</span> <span class=\"mi\">09</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">57</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">f6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">39</span><span class=\"p\">,</span> <span class=\"n\">ba</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s1\">'md5'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n<span class=\"s1\">'05c27bf00932572de28bf65a0539ba97'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s1\">'sha256'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">32</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d9</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"n\">ab</span><span class=\"p\">,</span> <span class=\"n\">a8</span><span class=\"p\">,</span> <span class=\"n\">b7</span><span class=\"p\">,</span> <span class=\"mi\">06</span><span class=\"p\">,</span> <span class=\"n\">e2</span><span class=\"p\">,</span> <span class=\"n\">b6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">b3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">e5</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"mi\">05</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">bc</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">89</span><span class=\"p\">,</span> <span class=\"n\">ef</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">de</span><span class=\"p\">,</span> <span class=\"n\">f9</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bs</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">(</span><span class=\"s1\">'sha256'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()</span>\n<span class=\"s1\">'2bd25cd960aba8b706e2b67f2bb38b750ee5384b0e9883053ebc3b89ef4ddef9'</span>\n\n<span class=\"c1\"># See what's available</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">algorithms_guaranteed</span>\n<span class=\"p\">{</span><span class=\"s1\">'sha384'</span><span class=\"p\">,</span> <span class=\"s1\">'shake_128'</span><span class=\"p\">,</span> <span class=\"s1\">'sha3_256'</span><span class=\"p\">,</span> <span class=\"s1\">'sha3_512'</span><span class=\"p\">,</span> <span class=\"s1\">'md5'</span><span class=\"p\">,</span> <span class=\"s1\">'sha512'</span><span class=\"p\">,</span> <span class=\"s1\">'shake_256'</span><span class=\"p\">,</span> <span class=\"s1\">'sha3_384'</span><span class=\"p\">,</span> <span class=\"s1\">'sha1'</span><span class=\"p\">,</span> <span class=\"s1\">'sha3_224'</span><span class=\"p\">,</span> <span class=\"s1\">'blake2b'</span><span class=\"p\">,</span> <span class=\"s1\">'blake2s'</span><span class=\"p\">,</span> <span class=\"s1\">'sha256'</span><span class=\"p\">,</span> <span class=\"s1\">'sha224'</span><span class=\"p\">}</span>\n</pre>\n<h4>Command pipe</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'stdin input'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"s1\">'tr a-z A-Z'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">()</span>\n<span class=\"s1\">'STDIN INPUT'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Bs</span><span class=\"p\">(</span><span class=\"s1\">'stdin input'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"s1\">'base64'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"s1\">'tee /dev/stderr'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"s1\">'base64 --decode'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">()</span>\n<span class=\"n\">c3RkaW4gaW5wdXQ</span><span class=\"o\">=</span>\n<span class=\"s1\">'stdin input'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Bs</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"s1\">'ls'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"p\">())</span>\n<span class=\"n\">LICENSE</span>\n<span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">md</span>\n<span class=\"n\">bites</span>\n<span class=\"n\">bites</span><span class=\"o\">.</span><span class=\"n\">egg</span><span class=\"o\">-</span><span class=\"n\">info</span>\n<span class=\"n\">build</span>\n<span class=\"n\">dist</span>\n<span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre>\n<h4>IPv4</h4>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"n\">Bs</span><span class=\"o\">.</span><span class=\"n\">from_ip4</span><span class=\"p\">(</span><span class=\"s1\">'192.168.1.1/16'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ip</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Bs</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"n\">a8</span><span class=\"p\">,</span> <span class=\"n\">c0</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ip</span><span class=\"o\">.</span><span class=\"n\">every</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">168</span><span class=\"p\">,</span> <span class=\"mi\">192</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ip</span><span class=\"o\">.</span><span class=\"n\">ip4</span><span class=\"p\">()</span>\n<span class=\"s1\">'192.168.0.0'</span>\n</pre>\n\n          </div>"}, "last_serial": 4447898, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "446e01efc27f7701c979fa10778ec845", "sha256": "6e90466c009c3743544154cb90df64487d77e12a6e971f809c0194e2883c7c76"}, "downloads": -1, "filename": "bites-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "446e01efc27f7701c979fa10778ec845", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2923, "upload_time": "2018-09-28T20:35:36", "upload_time_iso_8601": "2018-09-28T20:35:36.205385Z", "url": "https://files.pythonhosted.org/packages/79/78/7acbcb1351e2fc91fd23c0e0e57c2319748f50e21f96a9890cfa6d4ad6f9/bites-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83e2806ea4c0f25a740f63c533b9d327", "sha256": "e3ec1ae94657a35b36c6a5ec0855f7703c5f6725337c88b03c29e25384664100"}, "downloads": -1, "filename": "bites-0.0.1.tar.gz", "has_sig": false, "md5_digest": "83e2806ea4c0f25a740f63c533b9d327", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2469, "upload_time": "2018-09-28T20:35:37", "upload_time_iso_8601": "2018-09-28T20:35:37.703851Z", "url": "https://files.pythonhosted.org/packages/22/f1/9795541fc49f4aaed7a624bf4564044256fc368dd0bbd9ce078ffe72eef6/bites-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "037bd71302882ed218aedb49ce129b47", "sha256": "aa802fafebf37796df4858cbc3f860609461cc6647f8af6be60f00b2914b2db4"}, "downloads": -1, "filename": "bites-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "037bd71302882ed218aedb49ce129b47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10478, "upload_time": "2018-11-03T17:50:39", "upload_time_iso_8601": "2018-11-03T17:50:39.407284Z", "url": "https://files.pythonhosted.org/packages/bf/3f/359a33ffebc3b50c50bdd485b2b9969c95334a5b5d55eaea85eae423c424/bites-0.0.10-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e4e11667247b178530db0b2b076024d3", "sha256": "ce47cd98fc2dfa9c11c5c5e13a85289627e05e86d12a09f5b7d34a00f76cac56"}, "downloads": -1, "filename": "bites-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e4e11667247b178530db0b2b076024d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2948, "upload_time": "2018-09-28T21:01:04", "upload_time_iso_8601": "2018-09-28T21:01:04.601685Z", "url": "https://files.pythonhosted.org/packages/e3/33/3fa7e843f56c845f5ed7e9d79dd685cccde47bd5aacecba68bee9130b3bd/bites-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5041dbbc9ae7fa9223d39848fed14100", "sha256": "5c4fedc4d0c2b935f65fdbf898f5188a90a4667a1ba52a75450108e76c989210"}, "downloads": -1, "filename": "bites-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5041dbbc9ae7fa9223d39848fed14100", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2497, "upload_time": "2018-09-28T21:01:06", "upload_time_iso_8601": "2018-09-28T21:01:06.340348Z", "url": "https://files.pythonhosted.org/packages/c7/5c/a915c5a8a84e40024c19bf4eeff9915f18e6b58cb9d526033edfe74639e3/bites-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f7db0bff5624dc3d0c047d939f4cb2ef", "sha256": "f1c90dca501f3279cae45002d631396e72d6f8549efaa8a0c7200c78e5ed4a3e"}, "downloads": -1, "filename": "bites-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f7db0bff5624dc3d0c047d939f4cb2ef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3191, "upload_time": "2018-09-28T22:02:42", "upload_time_iso_8601": "2018-09-28T22:02:42.267723Z", "url": "https://files.pythonhosted.org/packages/d5/bd/4cc5990ba903ade0ae3eda68a8b1378791fe53ae7d062a6be539bbe477eb/bites-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fbdd0da7bdc0d2b04e26216b4080dbd", "sha256": "a18131df97e22e12873b86cc45384c96fc0ed1a9ae958b7f0f26e8ecfd2c4b2c"}, "downloads": -1, "filename": "bites-0.0.3.tar.gz", "has_sig": false, "md5_digest": "0fbdd0da7bdc0d2b04e26216b4080dbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2733, "upload_time": "2018-09-28T22:02:43", "upload_time_iso_8601": "2018-09-28T22:02:43.535443Z", "url": "https://files.pythonhosted.org/packages/34/42/7458d6aaaf713531262f5163f37dd7fc174ae0e60d49c48ec0684904b8f9/bites-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "8ce350e369599de47136f623dc0e4ef7", "sha256": "550398cd1ba7e66aa16ef4904c36a4ca9632ddc16fd3b595333f139f81dba9c2"}, "downloads": -1, "filename": "bites-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "8ce350e369599de47136f623dc0e4ef7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3254, "upload_time": "2018-09-28T22:14:22", "upload_time_iso_8601": "2018-09-28T22:14:22.218764Z", "url": "https://files.pythonhosted.org/packages/cb/76/be24d048871a0dfb6bcf7947d411b05e06c79b00228a1aff7447ad50a373/bites-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "404bc41b5f8731deddb157209a72fcd0", "sha256": "40bf1fc7c77f1d54b6ece83ffea6da86798ddf24ac90188013c8ba362443b403"}, "downloads": -1, "filename": "bites-0.0.4.tar.gz", "has_sig": false, "md5_digest": "404bc41b5f8731deddb157209a72fcd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2782, "upload_time": "2018-09-28T22:14:29", "upload_time_iso_8601": "2018-09-28T22:14:29.796310Z", "url": "https://files.pythonhosted.org/packages/36/63/12f5faa3162f19e35892c7fc4516e2c654db49a64ebc7784d6aa0a2c776f/bites-0.0.4.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "ce89591467ae19a40a5569e9c85c6457", "sha256": "ee1fcd3b7c332ce447dc48c7325a09d978f37bfc6ee3a428878ff6fb7245627c"}, "downloads": -1, "filename": "bites-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ce89591467ae19a40a5569e9c85c6457", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10058, "upload_time": "2018-09-30T20:08:12", "upload_time_iso_8601": "2018-09-30T20:08:12.537835Z", "url": "https://files.pythonhosted.org/packages/78/e5/f3a269a5a3a9ea1e4b1bd4434b561e6e14a9c0beba220a806b3cb733aa75/bites-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8576f643131d32d24cf59b654ab6fef", "sha256": "26d9a83356b696616778b83eb88542b5f134877edcd64c1834ac23f0308b11e3"}, "downloads": -1, "filename": "bites-0.0.6.tar.gz", "has_sig": false, "md5_digest": "d8576f643131d32d24cf59b654ab6fef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9277, "upload_time": "2018-09-30T20:08:13", "upload_time_iso_8601": "2018-09-30T20:08:13.835141Z", "url": "https://files.pythonhosted.org/packages/28/29/30249a52ad1a2e50390ff981ce6661aed24ae6b7c6aa9fd554d64b80c041/bites-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "e1b57cbddf72dbb2de67daa85ffe335c", "sha256": "95fd8f98781af37df21957cbfd21876c7965ca892cc0c5b6982253dd36fa6b6a"}, "downloads": -1, "filename": "bites-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "e1b57cbddf72dbb2de67daa85ffe335c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10785, "upload_time": "2018-09-30T20:51:18", "upload_time_iso_8601": "2018-09-30T20:51:18.091308Z", "url": "https://files.pythonhosted.org/packages/c1/24/e797dab6b3b20dce2b628608a34c74fe7c578503a0895bbc5df45d101241/bites-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4791212b545fffe8e2a24cf4c5b6000d", "sha256": "56d01bda38e039c2824d3c836ea7c7cf39cefa4580867437f86f3dd517bd4d30"}, "downloads": -1, "filename": "bites-0.0.7.tar.gz", "has_sig": false, "md5_digest": "4791212b545fffe8e2a24cf4c5b6000d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10283, "upload_time": "2018-09-30T20:51:19", "upload_time_iso_8601": "2018-09-30T20:51:19.749342Z", "url": "https://files.pythonhosted.org/packages/f9/1e/e9584ea2f86837ed0dc5455a2edaf86152c03b1e571e5225903c4188b2d9/bites-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "94d3e0c834315956f18d04bac850e7d1", "sha256": "f6f1f5ec851120257780ce0ecaf2c81969189f4950288d32cca86842df520df1"}, "downloads": -1, "filename": "bites-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "94d3e0c834315956f18d04bac850e7d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10997, "upload_time": "2018-10-08T04:25:16", "upload_time_iso_8601": "2018-10-08T04:25:16.151372Z", "url": "https://files.pythonhosted.org/packages/81/7d/a57174b99916d7a944820925e105083316aa4f5bde3b044635ebf53cdc7d/bites-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe14d9a462d067f4f1ef753b49e5e7c1", "sha256": "a435a5ce77d087e02aa37855b3d8548334da613e004754355408beb824e4eebd"}, "downloads": -1, "filename": "bites-0.0.8.tar.gz", "has_sig": false, "md5_digest": "fe14d9a462d067f4f1ef753b49e5e7c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10503, "upload_time": "2018-10-08T04:25:18", "upload_time_iso_8601": "2018-10-08T04:25:18.145046Z", "url": "https://files.pythonhosted.org/packages/b0/cb/6c7f25284a93d7a90fb4fdf47d83a908979b98916ab14c9f7f0f26d4a81d/bites-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "71301fb176d8bbaac6afe794ca94d145", "sha256": "9846acde75874acfa0f451d7503110904472da9506d4bc1e494902492fe10798"}, "downloads": -1, "filename": "bites-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "71301fb176d8bbaac6afe794ca94d145", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11436, "upload_time": "2018-10-11T13:48:14", "upload_time_iso_8601": "2018-10-11T13:48:14.168581Z", "url": "https://files.pythonhosted.org/packages/2e/cd/4e46f7c4154de05a4cea843dea01bb7b3f155f7bd45d04aa1ea5e26477de/bites-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a682bb8aff11d15497daad1982baafb", "sha256": "f77c66a136ad97231a099a8e09dc4b5f64c9de9e61541953f7eb58465b9440ed"}, "downloads": -1, "filename": "bites-0.0.9.tar.gz", "has_sig": false, "md5_digest": "5a682bb8aff11d15497daad1982baafb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10975, "upload_time": "2018-10-11T13:48:16", "upload_time_iso_8601": "2018-10-11T13:48:16.234807Z", "url": "https://files.pythonhosted.org/packages/46/b6/2a420f95cef487681005baf9083b29a858454e0f67278f957f7326e11b43/bites-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "037bd71302882ed218aedb49ce129b47", "sha256": "aa802fafebf37796df4858cbc3f860609461cc6647f8af6be60f00b2914b2db4"}, "downloads": -1, "filename": "bites-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "037bd71302882ed218aedb49ce129b47", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10478, "upload_time": "2018-11-03T17:50:39", "upload_time_iso_8601": "2018-11-03T17:50:39.407284Z", "url": "https://files.pythonhosted.org/packages/bf/3f/359a33ffebc3b50c50bdd485b2b9969c95334a5b5d55eaea85eae423c424/bites-0.0.10-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:37:17 2020"}