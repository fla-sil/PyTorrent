{"info": {"author": "Marqeta, Inc.", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# marqeta-python\n\nThe Marqeta Python library provides access to the Marqeta platform [Core API](https://www.marqeta.com/api/docs/WYDH6igAAL8FnF21/api-introduction).\n\nThis library is released as a Beta. If you find anything that needs fixing or can be improved, please [create an issue](issues) on GitHub.\n\n## Documentation\n\nFor complete reference documentation, see the [Marqeta Core API Reference](https://www.marqeta.com/api/docs/WYDH6igAAL8FnF21/api-introduction).\n\n## Installation\n\nInstall from PyPi using [pip](https://pip.pypa.io/en/stable/), a package manager for Python.\n\n```\npip install marqeta\n```\n\n### Requirements\n\n* Python 3.7+\n\n### Dependencies\n\n* [Requests](http://docs.python-requests.org/)\n\n## Usage\n\n### Configuring the client\n\nCreate an account on marqeta.com to retrieve your application token and access token for the shared sandbox. For production, you will need to change `base_url` too.\n\nConfigure your client object.\n\n```\nfrom marqeta import Client\n\nbase_url = \"https://shared-sandbox-api.marqeta.com/v3/\"\napplication_token = \"MY_APPLICATION_TOKEN\"\naccess_token = \"MY_ACCESS_TOKEN\"\ntimeout = 60 # seconds\n\nclient = Client(base_url, application_token, access_token, timeout)\n```\n\nWhen specifying your base url, include the `/v3/` version prefix with the trailing slash.\n\n### Accessing resources\n\nAccess resource collections of the Core API as properties of the client object.\n\nFor example, to access the `/users` endpoint:\n\n```\nclient.users\n```\n\nNested resource collection are properties of the parent collection.\n\nFor example, to access the `/chargebacks/{token}/transitions` endpoint:\n\n```\nclient.chargebacks(token).transitions\n```\n\n### Listing objects\n\nThere are multiple ways to retrieve collections of objects, depending on your use case. The library will intelligently handle pagination for you, unless you request a specific page of data.\n\nTo simply retrieve every object in a collection, call `list(limit=None)` on the resource.\n\n```\nusers = client.users.list(limit=None)\n```\n\nIf an integer is specified for 'limit', the library will return up to maximum of `limit` objects. The default value of `limit` is typically `None`, however for `client.users.list()` and `client.card_products.list()` the default limits are 1000 and 25 respectively.\n\nThe `stream()` method returns a generator that efficiently downloads subsequent pages as needed, as opposed to downloading all objects into memory at once.\n\n```\nfor user in client.users.stream():\n    pass\n```\n\nTo retrieve a single page, call the `page()` method specifying `start_index` and `count`.\n\n```\npage = client.users.page(start_index=0, count=5)\nusers = page.data\n```\n\nYou can specify by which field the results should be sorted by passing a `params` dictionary:\n\n```\nclient.users.list(params={'sort_by': '-lastModifiedTime'})\n```\n\nSee [Sorting & Pagination](https://www.marqeta.com/api/docs/Vh2cbhwAAMsAF3db/sorting--pagination) for further details.\n\n### Specifying additional query parameters\n\nMost methods support specifying additional query parameters as a `params` dictionary. The keys and values are the same as the HTTP API.\n\n```\nclient.cards.find_show_pan(card_token, params={'show_cvv_number': True})\n```\n\n### Finding a specific objects\n\nCall the `find()` method on a resource collection, passing in the object's token.\n\n```\nuser = client.users.find(token)\n```\n\n### Creating objects\n\nCall the `create()` method of a resource collection, passing in `data` as a Python dict.\n\n```\ndata = {\n    'first_name': 'Sarah'\n}\ncreated_user = client.users.create(data)\n```\n\n### Updating objects\n\nCall the `save()` method of a resource collection, passing in the object's token and a Python dictionary containing the fields you wish to update.\n\n```\nfields_to_update = {\n    'first_name': 'Updated Value'\n}\nupdated_user = client.users.save(user_token, fields_to_update)\n```\n\n### Handling errors\n\nThe SDK will raise a `MarqetaError` exception for unsuccessful requests.\n\n```\nfrom marqeta import Client\nfrom marqeta.errors import MarqetaError\nfrom requests.exceptions import RequestException\n\ntry:\n    user = client.users.find(token)\nexcept MarqetaError as error:\n    print(error.code)\nexcept RequestException as error:\n    print(error)\n```\n\nThe exception's `code` card_products contains the value returned by the API in the JSON response. See [Error codes and messages](https://www.marqeta.com/api/docs/Vh2cTBwAAB8AF3aI/errors#error_codes_and_messages).\n\n## Resources\n\nThe library supports the following endpoints:\n\n| Endpoint | Python code |\n| -------- | ----------- |\n| [/acceptedcountries](#Accepted-Countries-/acceptedcountries) | `client.accepted_countries` |\n| [/accountholdergroups](#Account-Holder-Groups-/accountholdergroups) | `client.account_holder_groups` |\n| [/authcontrols](#Auth-Controls-/authcontrols) | `client.auth_controls` |\n| [/authcontrols/exemptmids](#Exempt-MIDs-/authcontrols/exemptmids) | `client.auth_controls.exempt_mids` |\n| [/autoreloads](#Autoreloads-/autoreloads) | `client.auto_reloads` |\n| [/balances](#Balances-/balances) | `client.balances` |\n| [/bulkissuances](#Bulk-Issuances-/bulkissuances) | `client.bulk_issuances` |\n| [/businesses](#Businesses-/businesses) | `client.businesses` |\n| [/businesstransitions](#Business-Transitions-/businesstransitions) | `client.businesses(business_token).transitions` |\n| [/businesses/{token}/notes](#Business-Notes-/businesses/{token}/notes) | `client.businesses(token).notes` |\n| [/cardproducts](#Card-Products-/cardproducts) | `client.card_products` |\n| [/cards](#Cards-/cards) | `client.cards` |\n| [/cardtransitions](#Card-Transitions-/cardtransitions) | `client.cards(token).transitions` |\n| [/chargebacks](#Chargebacks-/chargebacks) | `client.chargebacks` |\n| [/chargebacks/transitions](#Chargeback-Transitions-/chargebacks/transitions) | `client.chargebacks(token).transitions` |\n| [/commandomodes](#Commando-Modes-/commandomodes) | `client.commando_modes` |\n| [/commandomodes/transitions](#Commando-Mode-Transitions-/commandomodes/transitions) | `client.commando_modes(token).transitions` |\n| [/digitalwallettokens](#Digital-Wallet-Tokens-/digitalwallettokens) | `client.digital_wallet_tokens` |\n| [/digitalwallettokentransitions](#Digital-Wallet-Token-Transitions-/digitalwallettokentransitions) | `client.digital_wallet_tokens(token).transitions` |\n| [/directdeposits](#Direct-Deposits-/directdeposits) | `client.direct_deposits` |\n| [/directdeposits/transitions](#Direct-Deposit-Transitions-/directdeposits/transitions) | `client.direct_deposits(token).transitions` |\n| [/directdeposits/accounts](#Direct-Deposit-Accounts-/directdeposits/accounts) | `client.direct_deposits.accounts` |\n| [/fees](#Fees-/fees) | `client.fees` |\n| [/feetransfers](#Fee-Transfers-/feetransfers) | `client.fee_transfers` |\n| [/fundingsources](#Funding-Sources-/fundingsources) | `client.funding_sources` |\n| [/fundingsources/addresses](#Funding-Source-Addresses-/fundingsources/addresses) | `client.funding_sources.addresses` |\n| [/fundingsources/ach](#ACH-Funding-Sources-/fundingsources/ach) | `client.funding_sources.ach` |\n| [/fundingsources/paymentcard](#Payment-Card-Funding-Sources-/fundingsources/paymentcard) | `client.funding_sources.payment_card` |\n| [/fundingsources/programgateway](#Program-Gateway-Funding-Sources-/fundingsources/programgateway) | `client.funding_sources.program_gateway` |\n| [/fundingsources/program](#Program-Funding-Sources-/fundingsources/program) | `client.funding_sources.program` |\n| [/gpaorders](#GPA-Orders-/gpaorders) | `client.gpa_orders` |\n| [/gpaorders/unloads](#GPA-Returns-/gpaorders/unloads) | `client.gpa_orders.unloads` |\n| [/kyc](#KYC-/kyc) | `client.kyc` |\n| [/mccgroups](#MCC-Groups-/mccgroups) | `client.mcc_groups` |\n| [/merchants](#Merchants-/merchants) | `client.merchants` |\n| [/merchants/{token}/stores](#Merchant-Stores-/merchants/{token}/stores) | `client.merchants(token).stores` |\n| [/msaorders](#MSA-Orders-/msaorders) | `client.msa_orders` |\n| [/msaorders/unloads](#MSA-Order-Unloads-/msaorders/unloads) | `client.msa_orders.unloads` |\n| [/offerorders](#Offer-Orders-/offerorders) | `client.offer_orders` |\n| [/pins](#Pin-Control-Tokens-/pins) | `client.pins` |\n| [/programtransfers](#Program-Transfers-/programtransfers) | `client.program_transfers` |\n| [/programtransfers/types](#Program-Transfer-Types-/programtransfers/types) | `client.program_transfers.types` |\n| [/pushtocards](#Push-to-Cards-/pushtocards) | `client.push_to_cards` |\n| [/pushtocards/disburse](#Push-to-Card-Disbursements-/pushtocards/disburse) | `client.push_to_cards.disburse` |\n| [/pushtocards/paymentcard](#Push-to-Card-Payment-Cards-/pushtocards/paymentcard) | `client.push_to_cards.payment_card` |\n| [/realtimefeegroups](#Realtime-Fee-Groups-/realtimefeegroups) | `client.real_time_fee_groups` |\n| [/transactions](#Transactions-/transactions) | `client.transactions` |\n| [/transactions/{token}/related](#Related-Transations-/transactions/{token}/related) | `client.transactions(token).related` |\n| [/users](#Users-/users) | `client.users` |\n| [/usertransitions](#User-Transitions-/usertransitions) | `client.users(token).transitions` |\n| [/users/{token}/notes](#User-Notes-/users/{token}/notes) | `client.users(token).notes` |\n| [/velocitycontrols](#Velocity-Controls-/velocitycontrols) | `client.velocity_controls` |\n| [/webhooks](#Webhooks-/webhooks) | `client.webhooks` |\n\n### Examples\n\n\n#### Accepted Countries (`/acceptedcountries`)\n\n```\n# List all accepted countries\naccepted_countries = client.accepted_countries.list()\nfor accepted_country in client.accepted_countries.stream():\n    pass\naccepted_countries_page = client.accepted_countries.page(start_index=0)\n\n# Retrieve a specific accepted country\naccepted_country = client.accepted_countries.find(token)\n\n# Create an accepted country\naccepted_country = client.accepted_countries.create({...})\n\n# Update an accepted country\naccepted_country = client.accepted_countries.save(token, {...})\n```\n\n#### Account Holder Groups (`/accountholdergroups`)\n\n```\n# List all account holder groups\naccount_holder_groups = client.account_holder_groups.list()\nfor account_holder_group in client.account_holder_groups.stream():\n    pass\naccount_holder_groups_page = client.account_holder_groups.page(start_index=0)\n\n# Retrieve a specific account holder group\naccount_holder_group = client.account_holder_groups.find(token)\n\n# Create an account holder group\naccount_holder_group = client.account_holder_groups.create({...})\n\n# Update an account holder group\naccount_holder_group = client.account_holder_groups.save(token, {...})\n```\n\n#### Auth Controls (`/authcontrols`)\n\n```\n# List all auth controls\nauth_controls = client.auth_controls.list()\nfor auth_control in client.auth_controls.stream():\n    pass\nauth_controls_page = client.auth_controls.page(start_index=0)\n\n# Retrieve a specific auth control\nauth_control = client.auth_controls.find(token)\n\n# Create an auth control\nauth_control = client.auth_controls.create({...})\n\n# Update an auth control\nauth_control = client.auth_controls.save(token, {...})\n```\n\n#### Exempt MIDs (`/authcontrols/exemptmids`)\n\n```\n# List all exempt mids\nexempt_mi_ds = client.auth_controls.exempt_mids.list()\nfor exempt_mid in client.auth_controls.exempt_mids.stream():\n    pass\nexempt_mi_ds_page = client.auth_controls.exempt_mids.page(start_index=0)\n\n# Retrieve a specific exempt mid\nexempt_mid = client.auth_controls.exempt_mids.find(token)\n\n# Create an exempt mid\nexempt_mid = client.auth_controls.exempt_mids.create({...})\n\n# Update an exempt mid\nexempt_mid = client.auth_controls.exempt_mids.save(token, {...})\n```\n\n#### Autoreloads (`/autoreloads`)\n\n```\n# List all autoreloads\nautoreloads = client.auto_reloads.list()\nfor autoreload in client.auto_reloads.stream():\n    pass\nautoreloads_page = client.auto_reloads.page(start_index=0)\n\n# Retrieve a specific autoreload\nautoreload = client.auto_reloads.find(token)\n\n# Create an autoreload\nautoreload = client.auto_reloads.create({...})\n\n# Update an autoreload\nautoreload = client.auto_reloads.save(token, {...})\n```\n\n#### Balances (`/balances`)\n\n```\n# List all MSA balances\nbalances = client.balances.list_msas_for_user_or_business(token)\nfor balance in client.balances.stream_msas_for_user_or_business(token):\n    pass\n\n# Retrieve a specific balance\nbalance = client.balances.find_for_user_or_business(token)\n```\n\n#### Bulk Issuances (`/bulkissuances`)\n\n```\n# List all bulk issuances\nbulk_issuances = client.bulk_issuances.list()\nfor bulk_issuance in client.bulk_issuances.stream():\n    pass\nbulk_issuances_page = client.bulk_issuances.page(start_index=0)\n\n# Retrieve a specific bulk issuance\nbulk_issuance = client.bulk_issuances.find(token)\n\n# Create a bulk issuance\nbulk_issuance = client.bulk_issuances.create({...})\n```\n\n#### Businesses (`/businesses`)\n\n```\n# List all businesses\nbusinesses = client.businesses.list()\nfor business in client.businesses.stream():\n    pass\nbusinesses_page = client.businesses.page(start_index=0)\n\n# Retrieve a specific business\nbusiness = client.businesses.find(token)\n\n# Create a business\nbusiness = client.businesses.create({...})\n\n# Update a business\nbusiness = client.businesses.save(token, {...})\n\n# Retrieve a specific business SSN\nssn = client.businesses(token).ssn()\n\n# Retrieve a specific business Full SSN\nssn = client.businesses(token).ssn(full_ssn = True)\n\n# List all children of parent business\nchild_cardholders = client.businesses(token).children.list()\nfor child_cardholder in client.businesses(token).children.stream():\n    pass\nchild_cardholders_page = client.businesses(token).children.page(start_index=0)\n\n# Search for businesses\nbusinesss = client.businesses.look_up({...})\n```\n\n#### Business Transitions (`/businesstransitions`)\n\n```\n# Create a business transition\ntransition = client.businesses(business_token).transitions.create(...)\n\n# Retrieve a specific business transition\ntransition = client.businesses(business_token).transitions.find(token)\n\n# List transitions for a specific business\ntransitions = client.businesses(business_token).transitions.list()\nfor transition in client.businesses(business_token).transitions.stream():\n    pass\ntransitions_page = client.businesses(business_token).transitions.page(start_index=0)\n```\n\n#### Business Notes (`/businesses/{token}/notes`)\n\n```\n# List all business notes\nbusiness_notes = client.businesses(token).notes.list()\nfor business_note in client.businesses(token).notes.stream():\n    pass\nbusiness_notes_page = client.businesses(token).notes.page(start_index=0)\n\n# Create a business note\nbusiness_note = client.businesses(token).notes.create({...})\n\n# Update a business note\nbusiness_note = client.businesses(token).notes.save(token, {...})\n```\n\n#### Card Products (`/cardproducts`)\n\n```\n# List all card products. Default limit is 25.\ncard_products = client.card_products.list()\nfor card_product in client.card_products.stream():\n    pass\ncard_products_page = client.card_products.page(start_index=0)\n\n# Retrieve a specific card product\ncard_product = client.card_products.find(token)\n\n# Create a card product\ncard_product = client.card_products.create({...})\n\n# Update a card product\ncard_product = client.card_products.save(token, {...})\n```\n\n#### Cards (`/cards`)\n\n```\n# List cards by last 4\ncards = client.cards.list(last_four='6789')\nfor card in client.cards.stream():\n    pass\ncards_page = client.cards.page()\n\n# Lists all cards for one user\ncards = client.cards.list_for_user(token)\nfor card in client.cards.stream_for_user(token):\n    pass\n\n# Returns a specific card\ncard = client.cards.find(token)\n\n# Returns a specific card - PAN visible\ncard = client.cards.find_show_pan(token)\n\n# Retrieve a card by its barcode\ncard = client.cards.find_by_barcode(barcode)\n\n# Creates a card\ndata = {...}\ncard = client.cards.create(data)\n\n# Returns the user and card tokens for specified PAN\ntokens = client.cards.tokens_for_pan(pan)\n\n# Updates a card\ndata = {...}\ncard = client.cards.save(data)\n\n# Returns a merchant onboarding card\ncard = client.cards.find_for_merchant(token)\n\n# Returns a specific card - PAN visible\ncard = client.cards.find_for_merchant_show_pan(token)\n\n# Creates a merchant onboarding card\ndata = {...}\ncard = client.cards.create_for_merchant(token, data)\n```\n\n#### Card Transitions (`/cardtransitions`)\n\n```\n# Create a card transition\ntransition = client.cards(token).transitions.create(...)\n\n# Retrieve a specific card transition\ntransition = client.cards(token).transitions.find(token)\n\n# List transitions for a specific card\ntransitions = client.cards(token).transitions.list()\nfor transition in client.cards(token).transitions.stream():\n    pass\ntransitions_page = client.cards(token).transitions.page(start_index=0)\n```\n\n#### Chargebacks (`/chargebacks`)\n\n```\n# List all chargebacks\nchargebacks = client.chargebacks.list()\nfor chargeback in client.chargebacks.stream():\n    pass\nchargebacks_page = client.chargebacks.page(start_index=0)\n\n# Retrieve a specific chargeback\nchargeback = client.chargebacks.find(token)\n\n# Create a chargeback\nchargeback = client.chargebacks.create({...})\n\n# Grant provisional credit\nclient.chargebacks(token).grant_provisional_credit()\n\n# Reverse provisional credit\nclient.chargebacks(token).reverse_provisional_credit()\n```\n\n#### Chargeback Transitions (`/chargebacks/transitions`)\n\n```\n# Create a chargeback transition\ntransition = client.chargebacks(token).transitions.create(...)\n\n# Retrieve a specific chargeback transition\ntransition = client.chargebacks(token).transitions.find(token)\n\n# List transitions for a specific chargeback\ntransitions = client.chargebacks(token).transitions.list()\nfor transition in client.chargebacks(token).transitions.stream():\n    pass\ntransitions_page = client.chargebacks(token).transitions.page(start_index=0)\n```\n\n#### Commando Modes (`/commandomodes`)\n\n```\n# List all commando modes\ncommando_modes = client.commando_modes.list()\nfor commando_mode in client.commando_modes.stream():\n    pass\ncommando_modes_page = client.commando_modes.page(start_index=0)\n\n# Retrieve a specific commando mode\ncommando_mode = client.commando_modes.find(token)\n```\n\n#### Commando Mode Transitions (`/commandomodes/transitions`)\n\n```\n# Retrieve a specific commando mode transition\ntransition = client.commando_modes(token).transitions.find(token)\n\n# List transitions for a specific commando mode\ntransitions = client.commando_modes(token).transitions.list()\nfor transition in client.commando_modes(token).transitions.stream():\n    pass\ntransitions_page = client.commando_modes(token).transitions.page(start_index=0)\n```\n\n#### Digital Wallet Tokens (`/digitalwallettokens`)\n\n```\n# List all digital wallet tokens\ndigital_wallet_tokens = client.digital_wallet_tokens.list()\nfor digital_wallet_token in client.digital_wallet_tokens.stream():\n    pass\ndigital_wallet_tokens_page = client.digital_wallet_tokens.page(start_index=0)\n\n# Retrieve a specific digital wallet token\ndigital_wallet_token = client.digital_wallet_tokens.find(token)\n\n# Retrieve a specific digital wallet token with PAN\ndigital_wallet_token = client.digital_wallet_tokens.find_show_pan(token)\n```\n\n#### Digital Wallet Token Transitions (`/digitalwallettokentransitions`)\n\n```\n# Create a digital wallet token transition\ntransition = client.digital_wallet_tokens(token).transitions.create(...)\n\n# Retrieve a specific digital wallet token transition\ntransition = client.digital_wallet_tokens(token).transitions.find(token)\n\n# List transitions for a specific digital wallet token\ntransitions = client.digital_wallet_tokens(token).transitions.list()\nfor transition in client.digital_wallet_tokens(token).transitions.stream():\n    pass\ntransitions_page = client.digital_wallet_tokens(token).transitions.page(start_index=0)\n```\n\n#### Direct Deposits (`/directdeposits`)\n\n```\n# List all direct deposits\ndirect_deposits = client.direct_deposits.list()\nfor direct_deposit in client.direct_deposits.stream():\n    pass\ndirect_deposits_page = client.direct_deposits.page(start_index=0)\n\n# Retrieve a specific direct deposit\ndirect_deposit = client.direct_deposits.find(token)\n```\n\n#### Direct Deposit Transitions (`/directdeposits/transitions`)\n\n```\n# Create a direct deposit transition\ntransition = client.direct_deposits(token).transitions.create(...)\n\n# Retrieve a specific direct deposit transition\ntransition = client.direct_deposits(token).transitions.find(token)\n\n# List transitions for a specific direct deposit\ntransitions = client.direct_deposits(token).transitions.list()\nfor transition in client.direct_deposits(token).transitions.stream():\n    pass\ntransitions_page = client.direct_deposits(token).transitions.page(start_index=0)\n```\n\n#### Direct Deposit Accounts (`/directdeposits/accounts`)\n\n```\n\n# Retrieve a specific direct deposit account\ndirect_deposit_account = client.direct_deposits.accounts.find(token)\n\n# Update a direct deposit account\ndirect_deposit_account = client.direct_deposits.accounts.save(token, {...})\n```\n\n#### Fees (`/fees`)\n\n```\n# List all fees\nfees = client.fees.list()\nfor fee in client.fees.stream():\n    pass\nfees_page = client.fees.page(start_index=0)\n\n# Retrieve a specific fee\nfee = client.fees.find(token)\n\n# Create a fee\nfee = client.fees.create({...})\n\n# Update a fee\nfee = client.fees.save(token, {...})\n```\n\n#### Fee Transfers (`/feetransfers`)\n\n```\n\n# Retrieve a specific fee transfer\nfee_transfer = client.fee_transfers.find(token)\n\n# Create a fee transfer\nfee_transfer = client.fee_transfers.create({...})\n```\n\n#### Funding Sources (`/fundingsources`)\n\n```\n# List all funding sources for a specific user\nfunding_sources = client.list_for_user(user_token)\nfor funding_source in client.stream_for_user(user_token):\n    pass\n\n# List all funding sources for a specific business\nfunding_sources = client.list_for_business(business_token)\nfor funding_source in client.stream_for_business(business_token):\n    pass\n```\n\n#### Funding Source Addresses (`/fundingsources/addresses`)\n\n```\n\n# Retrieve a specific funding source address\nfunding_source_address = client.funding_sources.addresses.find(token)\n\n# Create a funding source address\nfunding_source_address = client.funding_sources.addresses.create({...})\n\n# Update a funding source address\nfunding_source_address = client.funding_sources.addresses.save(token, {...})\n\n# list funding source addresses for a specific user\naddresses = client.funding_sources.addresses.list_for_user(user_token)\nfor address in client.funding_sources.addresses.stream_for_user(user_token)\n    pass\n\n# list funding source addresses for a specific business\naddresses = client.funding_sources.addresses.list_for_business(business_token)\nfor address in client.funding_sources.addresses.stream_for_business(business_token)\n    pass\n```\n\n#### ACH Funding Sources (`/fundingsources/ach`)\n\n```\n\n# Retrieve a specific ach funding source\nach_funding_source = client.funding_sources.ach.find(token)\n\n# Create an ach funding source\nach_funding_source = client.funding_sources.ach.create({...})\n\n# Update an ach funding source\nach_funding_source = client.funding_sources.ach.save(token, {...})\n\n# Retrieve the dollar amounts used to verify an ACH funding source\nclient.funding_sources.addresses(token).verification_amounts()\n```\n\n#### Payment Card Funding Sources (`/fundingsources/paymentcard`)\n\n```\n\n# Retrieve a specific payment card funding source\npayment_card_funding_source = client.funding_sources.payment_card.find(token)\n\n# Create a payment card funding source\npayment_card_funding_source = client.funding_sources.payment_card.create({...})\n\n# Update a payment card funding source\npayment_card_funding_source = client.funding_sources.payment_card.save(token, {...})\n```\n\n#### Program Gateway Funding Sources (`/fundingsources/programgateway`)\n\n```\n\n# Retrieve a specific program gateway funding source\nprogram_gateway_funding_source = client.funding_sources.program_gateway.find(token)\n\n# Create a program gateway funding source\nprogram_gateway_funding_source = client.funding_sources.program_gateway.create({...})\n\n# Update a program gateway funding source\nprogram_gateway_funding_source = client.funding_sources.program_gateway.save(token, {...})\n```\n\n#### Program Funding Sources (`/fundingsources/program`)\n\n```\n\n# Retrieve a specific program funding source\nprogram_funding_source = client.funding_sources.program.find(token)\n\n# Create a program funding source\nprogram_funding_source = client.funding_sources.program.create({...})\n\n# Update a program funding source\nprogram_funding_source = client.funding_sources.program.save(token, {...})\n```\n\n#### GPA Orders (`/gpaorders`)\n\n```\n\n# Retrieve a specific gpa order\ngpa_order = client.gpa_orders.find(token)\n\n# Create a gpa order\ngpa_order = client.gpa_orders.create({...})\n```\n\n#### GPA Returns (`/gpaorders/unloads`)\n\n```\n# List all gpa returns\ngpa_returns = client.gpa_orders.unloads.list()\nfor gpa_return in client.gpa_orders.unloads.stream():\n    pass\ngpa_returns_page = client.gpa_orders.unloads.page(start_index=0)\n\n# Retrieve a specific gpa return\ngpa_return = client.gpa_orders.unloads.find(token)\n\n# Create a gpa return\ngpa_return = client.gpa_orders.unloads.create({...})\n```\n\n#### KYC (`/kyc`)\n\n```\n# List KYC results for a specific user\nkyc_results = client.kyc.list_for_user(user_token)\nfor kyc_result in client.kyc.stream_for_user(user_token):\n    pass\n\n# List KYC results for a specific business\nkyc_results = client.kyc.list_for_business(business_token)\nfor kyc_result in client.kyc.stream_for_business(business_token):\n    pass\n\n# Retrieve a specific KYC result\nkyc = client.kyc.find(token)\n\n# Update KYC answers\nclient.kyc.save(token, {...})\n\n# Perform a KYC operation\nclient.kyc.create({...})\n```\n\n#### MCC Groups (`/mccgroups`)\n\n```\n# List all mcc groups\nmcc_groups = client.mcc_groups.list()\nfor mcc_group in client.mcc_groups.stream():\n    pass\nmcc_groups_page = client.mcc_groups.page(start_index=0)\n\n# Retrieve a specific mcc group\nmcc_group = client.mcc_groups.find(token)\n\n# Create a mcc group\nmcc_group = client.mcc_groups.create({...})\n\n# Update a mcc group\nmcc_group = client.mcc_groups.save(token, {...})\n```\n\n#### Merchants (`/merchants`)\n\n```\n# List all merchants\nmerchants = client.merchants.list()\nfor merchant in client.merchants.stream():\n    pass\nmerchants_page = client.merchants.page(start_index=0)\n\n# Retrieve a specific merchant\nmerchant = client.merchants.find(token)\n\n# Create a merchant\nmerchant = client.merchants.create({...})\n\n# Update a merchant\nmerchant = client.merchants.save(token, {...})\n```\n\n#### Merchant Stores (`/merchants/{token}/stores`)\n\n```\n# List all merchant stores\nmerchant_stores = client.merchants(token).stores.list()\nfor merchant_store in client.merchants(token).stores.stream():\n    pass\nmerchant_stores_page = client.merchants(token).stores.page(start_index=0)\n```\n\n#### MSA Orders (`/msaorders`)\n\n```\n# Retrieve a specific msa order\nmsa_order = client.msa_orders.find(token)\n\n# Create a msa order\nmsa_order = client.msa_orders.create({...})\n\n# Update a msa order\nmsa_order = client.msa_orders.save(token, {...})\n```\n\n#### MSA Order Unloads (`/msaorders/unloads`)\n\n```\n# List all msa order unloads\nmsa_order_unloads = client.msa_orders.unloads.list()\nfor msa_order_unload in client.msa_orders.unloads.stream():\n    pass\nmsa_order_unloads_page = client.msa_orders.unloads.page(start_index=0)\n\n# Retrieve a specific msa order unload\nmsa_order_unload = client.msa_orders.unloads.find(token)\n\n# Create a msa order unload\nmsa_order_unload = client.msa_orders.unloads.create({...})\n```\n\n#### Offer Orders (`/offerorders`)\n\n```\n# Retrieve a specific offer order\noffer_order = client.offer_orders.find(token)\n\n# Create an offer order\noffer_order = client.offer_orders.create({...})\n```\n\n#### Pin Control Tokens (`/pins`)\n\n```\n# Create a pin control token\npin_control_token = client.pins.create({...})\n\n# Update a pin control token\npin_control_token = client.pins.save(token, {...})\n```\n\n#### Program Transfers (`/programtransfers`)\n\n```\n# List all program transfers\nprogram_transfers = client.program_transfers.list()\nfor program_transfer in client.program_transfers.stream():\n    pass\nprogram_transfers_page = client.program_transfers.page(start_index=0)\n\n# Retrieve a specific program transfer\nprogram_transfer = client.program_transfers.find(token)\n\n# Create a program transfer\nprogram_transfer = client.program_transfers.create({...})\n```\n\n#### Program Transfer Types (`/programtransfers/types`)\n\n```\n# List all program transfer types\nprogram_transfer_types = client.program_transfers.types.list()\nfor program_transfer_type in client.program_transfers.types.stream():\n    pass\nprogram_transfer_types_page = client.program_transfers.types.page(start_index=0)\n\n# Retrieve a specific program transfer type\nprogram_transfer_type = client.program_transfers.types.find(token)\n\n# Create a program transfer type\nprogram_transfer_type = client.program_transfers.types.create({...})\n\n# Update a program transfer type\nprogram_transfer_type = client.program_transfers.types.save(token, {...})\n```\n\n#### Push-to-Cards (`/pushtocards`)\n\n```\n# List all push-to-cards\npush_to_cards = client.push_to_cards.list()\nfor push_to_card in client.push_to_cards.stream():\n    pass\npush_to_cards_page = client.push_to_cards.page(start_index=0)\n\n# Retrieve a specific push-to-card\npush_to_card = client.push_to_cards.find(token)\n\n# Create a push-to-card\npush_to_card = client.push_to_cards.create({...})\n\n# Update a push-to-card\npush_to_card = client.push_to_cards.save(token, {...})\n```\n\n#### Push-to-Card Disbursements (`/pushtocards/disburse`)\n\n```\n# List all push-to-card disbursements\npush_to_card_disbursements = client.push_to_cards.disburse.list()\nfor push_to_card_disbursement in client.push_to_cards.disburse.stream():\n    pass\npush_to_card_disbursements_page = client.push_to_cards.disburse.page(start_index=0)\n\n# Retrieve a specific push-to-card disbursement\npush_to_card_disbursement = client.push_to_cards.disburse.find(token)\n\n# Create a push-to-card disbursement\npush_to_card_disbursement = client.push_to_cards.disburse.create({...})\n```\n\n#### Push-to-Card Payment Cards (`/pushtocards/paymentcard`)\n\n```\n# List all push-to-card payment cards\npush_to_card_payment_cards = client.push_to_cards.payment_card.list()\nfor push_to_card_payment_card in client.push_to_cards.payment_card.stream():\n    pass\npush_to_card_payment_cards_page = client.push_to_cards.payment_card.page(start_index=0)\n\n# Retrieve a specific push-to-card payment card\npush_to_card_payment_card = client.push_to_cards.payment_card.find(token)\n\n# Create a push-to-card payment card\npush_to_card_payment_card = client.push_to_cards.payment_card.create({...})\n```\n\n#### Realtime Fee Groups (`/realtimefeegroups`)\n\n```\n# List all realtime fee groups\nrealtime_fee_groups = client.real_time_fee_groups.list()\nfor realtime_fee_group in client.real_time_fee_groups.stream():\n    pass\nrealtime_fee_groups_page = client.real_time_fee_groups.page(start_index=0)\n\n# Retrieve a specific realtime fee group\nrealtime_fee_group = client.real_time_fee_groups.find(token)\n\n# Create a realtime fee group\nrealtime_fee_group = client.real_time_fee_groups.create({...})\n\n# Update a realtime fee group\nrealtime_fee_group = client.real_time_fee_groups.save(token, {...})\n```\n\n#### Transactions (`/transactions`)\n\n```\n# List all transactions\ntransactions = client.transactions.list()\nfor transaction in client.transactions.stream():\n    pass\ntransactions_page = client.transactions.page(start_index=0)\n\n# List all transactions for a specific funding source\ntransactions = client.transactions.list_for_funding_source(funding_source_token)\nfor transaction in client.transactions.stream_for_funding_source(funding_source_token):\n    pass\n\n# Retrieve a specific transaction\ntransaction = client.transactions.find(token)\n```\n\n#### Related Transations (`/transactions/{token}/related`)\n\n```\n# List all related transations\nrelated_transations = client.transactions(token).related.list()\nfor related_transation in client.transactions(token).related.stream():\n    pass\nrelated_transations_page = client.transactions(token).related.page(start_index=0)\n```\n\n#### Users (`/users`)\n\n```\n# List all users. Default limit is 1000.\nusers = client.users.list()\nfor user in client.users.stream():\n    pass\nusers_page = client.users.page(start_index=0)\n\n# Retrieve a specific user\nuser = client.users.find(token)\n\n# Create a user\nuser = client.users.create({...})\n\n# Update a user\nuser = client.users.save(token, {...})\n\n# Retrieve a specific user SSN\nssn = client.users(token).ssn()\n\n# Retrieve a specific user Full SSN\nssn = client.users(token).ssn(full_ssn = True)\n\n# List all children of parent user\nchild_cardholders = client.users(token).children.list()\nfor child_cardholder in client.users(token).children.stream():\n    pass\nchild_cardholders_page = client.users(token).children.page(start_index=0)\n\n# Search for users, if look_up data is not specified by default lists 1000 users \nusers = client.users.look_up({...})\n```\n\n#### User Transitions (`/usertransitions`)\n\n```\n# Create a user transition\ntransition = client.users(token).transitions.create(...)\n\n# Retrieve a specific user transition\ntransition = client.users(token).transitions.find(token)\n\n# List transitions for a specific user\ntransitions = client.users(token).transitions.list()\nfor transition in client.users(token).transitions.stream():\n    pass\ntransitions_page = client.users(token).transitions.page(start_index=0)\n```\n\n#### User Notes (`/users/{token}/notes`)\n\n```\n# List all user notes\nuser_notes = client.users(token).notes.list()\nfor user_note in client.users(token).notes.stream():\n    pass\nuser_notes_page = client.users(token).notes.page(start_index=0)\n\n# Create a user note\nuser_note = client.users(token).notes.create({...})\n\n# Update a user note\nuser_note = client.users(token).notes.save(token, {...})\n```\n\n#### Velocity Controls (`/velocitycontrols`)\n\n```\n# List all velocity controls\nvelocity_controls = client.velocity_controls.list()\nfor velocity_control in client.velocity_controls.stream():\n    pass\nvelocity_controls_page = client.velocity_controls.page(start_index=0)\n\n# Retrieve a specific velocity control\nvelocity_control = client.velocity_controls.find(token)\n\n# Create a velocity control\nvelocity_control = client.velocity_controls.create({...})\n\n# Update a velocity control\nvelocity_control = client.velocity_controls.save(token, {...})\n\n# List velocity controls available for a specific user\nvelocity_controls = list_available_for_user(user_token)\nfor velocity_control in stream_available_for_user(user_token):\n    pass\n```\n\n#### Webhooks (`/webhooks`)\n\n```\n# List all webhooks\nwebhooks = client.webhooks.list()\nfor webhook in client.webhooks.stream():\n    pass\nwebhooks_page = client.webhooks.page(start_index=0)\n\n# Retrieve a specific webhook\nwebhook = client.webhooks.find(token)\n\n# Create a webhook\nwebhook = client.webhooks.create({...})\n\n# Update a webhook\nwebhook = client.webhooks.save(token, {...})\n\n# Ping a webhook\nclient.webhooks(token).ping()\n\n# Resend a webhook\nclient.webhooks(token).resent(event_type, event_token)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marqeta/marqeta-python", "keywords": "marqeta", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "marqeta", "package_url": "https://pypi.org/project/marqeta/", "platform": "", "project_url": "https://pypi.org/project/marqeta/", "project_urls": {"Documentation": "https://marqeta.com/api", "Homepage": "https://github.com/marqeta/marqeta-python", "Source Code": "https://github.com/marqeta/marqeta-python"}, "release_url": "https://pypi.org/project/marqeta/0.2.1/", "requires_dist": ["requests (>=2.0.0)", "pytz (>=2019.1)", "faker (>=1.0.7)"], "requires_python": "", "summary": "Marqeta Python SDK", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>marqeta-python</h1>\n<p>The Marqeta Python library provides access to the Marqeta platform <a href=\"https://www.marqeta.com/api/docs/WYDH6igAAL8FnF21/api-introduction\" rel=\"nofollow\">Core API</a>.</p>\n<p>This library is released as a Beta. If you find anything that needs fixing or can be improved, please <a href=\"issues\" rel=\"nofollow\">create an issue</a> on GitHub.</p>\n<h2>Documentation</h2>\n<p>For complete reference documentation, see the <a href=\"https://www.marqeta.com/api/docs/WYDH6igAAL8FnF21/api-introduction\" rel=\"nofollow\">Marqeta Core API Reference</a>.</p>\n<h2>Installation</h2>\n<p>Install from PyPi using <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>, a package manager for Python.</p>\n<pre><code>pip install marqeta\n</code></pre>\n<h3>Requirements</h3>\n<ul>\n<li>Python 3.7+</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"http://docs.python-requests.org/\" rel=\"nofollow\">Requests</a></li>\n</ul>\n<h2>Usage</h2>\n<h3>Configuring the client</h3>\n<p>Create an account on marqeta.com to retrieve your application token and access token for the shared sandbox. For production, you will need to change <code>base_url</code> too.</p>\n<p>Configure your client object.</p>\n<pre><code>from marqeta import Client\n\nbase_url = \"https://shared-sandbox-api.marqeta.com/v3/\"\napplication_token = \"MY_APPLICATION_TOKEN\"\naccess_token = \"MY_ACCESS_TOKEN\"\ntimeout = 60 # seconds\n\nclient = Client(base_url, application_token, access_token, timeout)\n</code></pre>\n<p>When specifying your base url, include the <code>/v3/</code> version prefix with the trailing slash.</p>\n<h3>Accessing resources</h3>\n<p>Access resource collections of the Core API as properties of the client object.</p>\n<p>For example, to access the <code>/users</code> endpoint:</p>\n<pre><code>client.users\n</code></pre>\n<p>Nested resource collection are properties of the parent collection.</p>\n<p>For example, to access the <code>/chargebacks/{token}/transitions</code> endpoint:</p>\n<pre><code>client.chargebacks(token).transitions\n</code></pre>\n<h3>Listing objects</h3>\n<p>There are multiple ways to retrieve collections of objects, depending on your use case. The library will intelligently handle pagination for you, unless you request a specific page of data.</p>\n<p>To simply retrieve every object in a collection, call <code>list(limit=None)</code> on the resource.</p>\n<pre><code>users = client.users.list(limit=None)\n</code></pre>\n<p>If an integer is specified for 'limit', the library will return up to maximum of <code>limit</code> objects. The default value of <code>limit</code> is typically <code>None</code>, however for <code>client.users.list()</code> and <code>client.card_products.list()</code> the default limits are 1000 and 25 respectively.</p>\n<p>The <code>stream()</code> method returns a generator that efficiently downloads subsequent pages as needed, as opposed to downloading all objects into memory at once.</p>\n<pre><code>for user in client.users.stream():\n    pass\n</code></pre>\n<p>To retrieve a single page, call the <code>page()</code> method specifying <code>start_index</code> and <code>count</code>.</p>\n<pre><code>page = client.users.page(start_index=0, count=5)\nusers = page.data\n</code></pre>\n<p>You can specify by which field the results should be sorted by passing a <code>params</code> dictionary:</p>\n<pre><code>client.users.list(params={'sort_by': '-lastModifiedTime'})\n</code></pre>\n<p>See <a href=\"https://www.marqeta.com/api/docs/Vh2cbhwAAMsAF3db/sorting--pagination\" rel=\"nofollow\">Sorting &amp; Pagination</a> for further details.</p>\n<h3>Specifying additional query parameters</h3>\n<p>Most methods support specifying additional query parameters as a <code>params</code> dictionary. The keys and values are the same as the HTTP API.</p>\n<pre><code>client.cards.find_show_pan(card_token, params={'show_cvv_number': True})\n</code></pre>\n<h3>Finding a specific objects</h3>\n<p>Call the <code>find()</code> method on a resource collection, passing in the object's token.</p>\n<pre><code>user = client.users.find(token)\n</code></pre>\n<h3>Creating objects</h3>\n<p>Call the <code>create()</code> method of a resource collection, passing in <code>data</code> as a Python dict.</p>\n<pre><code>data = {\n    'first_name': 'Sarah'\n}\ncreated_user = client.users.create(data)\n</code></pre>\n<h3>Updating objects</h3>\n<p>Call the <code>save()</code> method of a resource collection, passing in the object's token and a Python dictionary containing the fields you wish to update.</p>\n<pre><code>fields_to_update = {\n    'first_name': 'Updated Value'\n}\nupdated_user = client.users.save(user_token, fields_to_update)\n</code></pre>\n<h3>Handling errors</h3>\n<p>The SDK will raise a <code>MarqetaError</code> exception for unsuccessful requests.</p>\n<pre><code>from marqeta import Client\nfrom marqeta.errors import MarqetaError\nfrom requests.exceptions import RequestException\n\ntry:\n    user = client.users.find(token)\nexcept MarqetaError as error:\n    print(error.code)\nexcept RequestException as error:\n    print(error)\n</code></pre>\n<p>The exception's <code>code</code> card_products contains the value returned by the API in the JSON response. See <a href=\"https://www.marqeta.com/api/docs/Vh2cTBwAAB8AF3aI/errors#error_codes_and_messages\" rel=\"nofollow\">Error codes and messages</a>.</p>\n<h2>Resources</h2>\n<p>The library supports the following endpoints:</p>\n<table>\n<thead>\n<tr>\n<th>Endpoint</th>\n<th>Python code</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"#Accepted-Countries-/acceptedcountries\" rel=\"nofollow\">/acceptedcountries</a></td>\n<td><code>client.accepted_countries</code></td>\n</tr>\n<tr>\n<td><a href=\"#Account-Holder-Groups-/accountholdergroups\" rel=\"nofollow\">/accountholdergroups</a></td>\n<td><code>client.account_holder_groups</code></td>\n</tr>\n<tr>\n<td><a href=\"#Auth-Controls-/authcontrols\" rel=\"nofollow\">/authcontrols</a></td>\n<td><code>client.auth_controls</code></td>\n</tr>\n<tr>\n<td><a href=\"#Exempt-MIDs-/authcontrols/exemptmids\" rel=\"nofollow\">/authcontrols/exemptmids</a></td>\n<td><code>client.auth_controls.exempt_mids</code></td>\n</tr>\n<tr>\n<td><a href=\"#Autoreloads-/autoreloads\" rel=\"nofollow\">/autoreloads</a></td>\n<td><code>client.auto_reloads</code></td>\n</tr>\n<tr>\n<td><a href=\"#Balances-/balances\" rel=\"nofollow\">/balances</a></td>\n<td><code>client.balances</code></td>\n</tr>\n<tr>\n<td><a href=\"#Bulk-Issuances-/bulkissuances\" rel=\"nofollow\">/bulkissuances</a></td>\n<td><code>client.bulk_issuances</code></td>\n</tr>\n<tr>\n<td><a href=\"#Businesses-/businesses\" rel=\"nofollow\">/businesses</a></td>\n<td><code>client.businesses</code></td>\n</tr>\n<tr>\n<td><a href=\"#Business-Transitions-/businesstransitions\" rel=\"nofollow\">/businesstransitions</a></td>\n<td><code>client.businesses(business_token).transitions</code></td>\n</tr>\n<tr>\n<td><a href=\"#Business-Notes-/businesses/%7Btoken%7D/notes\" rel=\"nofollow\">/businesses/{token}/notes</a></td>\n<td><code>client.businesses(token).notes</code></td>\n</tr>\n<tr>\n<td><a href=\"#Card-Products-/cardproducts\" rel=\"nofollow\">/cardproducts</a></td>\n<td><code>client.card_products</code></td>\n</tr>\n<tr>\n<td><a href=\"#Cards-/cards\" rel=\"nofollow\">/cards</a></td>\n<td><code>client.cards</code></td>\n</tr>\n<tr>\n<td><a href=\"#Card-Transitions-/cardtransitions\" rel=\"nofollow\">/cardtransitions</a></td>\n<td><code>client.cards(token).transitions</code></td>\n</tr>\n<tr>\n<td><a href=\"#Chargebacks-/chargebacks\" rel=\"nofollow\">/chargebacks</a></td>\n<td><code>client.chargebacks</code></td>\n</tr>\n<tr>\n<td><a href=\"#Chargeback-Transitions-/chargebacks/transitions\" rel=\"nofollow\">/chargebacks/transitions</a></td>\n<td><code>client.chargebacks(token).transitions</code></td>\n</tr>\n<tr>\n<td><a href=\"#Commando-Modes-/commandomodes\" rel=\"nofollow\">/commandomodes</a></td>\n<td><code>client.commando_modes</code></td>\n</tr>\n<tr>\n<td><a href=\"#Commando-Mode-Transitions-/commandomodes/transitions\" rel=\"nofollow\">/commandomodes/transitions</a></td>\n<td><code>client.commando_modes(token).transitions</code></td>\n</tr>\n<tr>\n<td><a href=\"#Digital-Wallet-Tokens-/digitalwallettokens\" rel=\"nofollow\">/digitalwallettokens</a></td>\n<td><code>client.digital_wallet_tokens</code></td>\n</tr>\n<tr>\n<td><a href=\"#Digital-Wallet-Token-Transitions-/digitalwallettokentransitions\" rel=\"nofollow\">/digitalwallettokentransitions</a></td>\n<td><code>client.digital_wallet_tokens(token).transitions</code></td>\n</tr>\n<tr>\n<td><a href=\"#Direct-Deposits-/directdeposits\" rel=\"nofollow\">/directdeposits</a></td>\n<td><code>client.direct_deposits</code></td>\n</tr>\n<tr>\n<td><a href=\"#Direct-Deposit-Transitions-/directdeposits/transitions\" rel=\"nofollow\">/directdeposits/transitions</a></td>\n<td><code>client.direct_deposits(token).transitions</code></td>\n</tr>\n<tr>\n<td><a href=\"#Direct-Deposit-Accounts-/directdeposits/accounts\" rel=\"nofollow\">/directdeposits/accounts</a></td>\n<td><code>client.direct_deposits.accounts</code></td>\n</tr>\n<tr>\n<td><a href=\"#Fees-/fees\" rel=\"nofollow\">/fees</a></td>\n<td><code>client.fees</code></td>\n</tr>\n<tr>\n<td><a href=\"#Fee-Transfers-/feetransfers\" rel=\"nofollow\">/feetransfers</a></td>\n<td><code>client.fee_transfers</code></td>\n</tr>\n<tr>\n<td><a href=\"#Funding-Sources-/fundingsources\" rel=\"nofollow\">/fundingsources</a></td>\n<td><code>client.funding_sources</code></td>\n</tr>\n<tr>\n<td><a href=\"#Funding-Source-Addresses-/fundingsources/addresses\" rel=\"nofollow\">/fundingsources/addresses</a></td>\n<td><code>client.funding_sources.addresses</code></td>\n</tr>\n<tr>\n<td><a href=\"#ACH-Funding-Sources-/fundingsources/ach\" rel=\"nofollow\">/fundingsources/ach</a></td>\n<td><code>client.funding_sources.ach</code></td>\n</tr>\n<tr>\n<td><a href=\"#Payment-Card-Funding-Sources-/fundingsources/paymentcard\" rel=\"nofollow\">/fundingsources/paymentcard</a></td>\n<td><code>client.funding_sources.payment_card</code></td>\n</tr>\n<tr>\n<td><a href=\"#Program-Gateway-Funding-Sources-/fundingsources/programgateway\" rel=\"nofollow\">/fundingsources/programgateway</a></td>\n<td><code>client.funding_sources.program_gateway</code></td>\n</tr>\n<tr>\n<td><a href=\"#Program-Funding-Sources-/fundingsources/program\" rel=\"nofollow\">/fundingsources/program</a></td>\n<td><code>client.funding_sources.program</code></td>\n</tr>\n<tr>\n<td><a href=\"#GPA-Orders-/gpaorders\" rel=\"nofollow\">/gpaorders</a></td>\n<td><code>client.gpa_orders</code></td>\n</tr>\n<tr>\n<td><a href=\"#GPA-Returns-/gpaorders/unloads\" rel=\"nofollow\">/gpaorders/unloads</a></td>\n<td><code>client.gpa_orders.unloads</code></td>\n</tr>\n<tr>\n<td><a href=\"#KYC-/kyc\" rel=\"nofollow\">/kyc</a></td>\n<td><code>client.kyc</code></td>\n</tr>\n<tr>\n<td><a href=\"#MCC-Groups-/mccgroups\" rel=\"nofollow\">/mccgroups</a></td>\n<td><code>client.mcc_groups</code></td>\n</tr>\n<tr>\n<td><a href=\"#Merchants-/merchants\" rel=\"nofollow\">/merchants</a></td>\n<td><code>client.merchants</code></td>\n</tr>\n<tr>\n<td><a href=\"#Merchant-Stores-/merchants/%7Btoken%7D/stores\" rel=\"nofollow\">/merchants/{token}/stores</a></td>\n<td><code>client.merchants(token).stores</code></td>\n</tr>\n<tr>\n<td><a href=\"#MSA-Orders-/msaorders\" rel=\"nofollow\">/msaorders</a></td>\n<td><code>client.msa_orders</code></td>\n</tr>\n<tr>\n<td><a href=\"#MSA-Order-Unloads-/msaorders/unloads\" rel=\"nofollow\">/msaorders/unloads</a></td>\n<td><code>client.msa_orders.unloads</code></td>\n</tr>\n<tr>\n<td><a href=\"#Offer-Orders-/offerorders\" rel=\"nofollow\">/offerorders</a></td>\n<td><code>client.offer_orders</code></td>\n</tr>\n<tr>\n<td><a href=\"#Pin-Control-Tokens-/pins\" rel=\"nofollow\">/pins</a></td>\n<td><code>client.pins</code></td>\n</tr>\n<tr>\n<td><a href=\"#Program-Transfers-/programtransfers\" rel=\"nofollow\">/programtransfers</a></td>\n<td><code>client.program_transfers</code></td>\n</tr>\n<tr>\n<td><a href=\"#Program-Transfer-Types-/programtransfers/types\" rel=\"nofollow\">/programtransfers/types</a></td>\n<td><code>client.program_transfers.types</code></td>\n</tr>\n<tr>\n<td><a href=\"#Push-to-Cards-/pushtocards\" rel=\"nofollow\">/pushtocards</a></td>\n<td><code>client.push_to_cards</code></td>\n</tr>\n<tr>\n<td><a href=\"#Push-to-Card-Disbursements-/pushtocards/disburse\" rel=\"nofollow\">/pushtocards/disburse</a></td>\n<td><code>client.push_to_cards.disburse</code></td>\n</tr>\n<tr>\n<td><a href=\"#Push-to-Card-Payment-Cards-/pushtocards/paymentcard\" rel=\"nofollow\">/pushtocards/paymentcard</a></td>\n<td><code>client.push_to_cards.payment_card</code></td>\n</tr>\n<tr>\n<td><a href=\"#Realtime-Fee-Groups-/realtimefeegroups\" rel=\"nofollow\">/realtimefeegroups</a></td>\n<td><code>client.real_time_fee_groups</code></td>\n</tr>\n<tr>\n<td><a href=\"#Transactions-/transactions\" rel=\"nofollow\">/transactions</a></td>\n<td><code>client.transactions</code></td>\n</tr>\n<tr>\n<td><a href=\"#Related-Transations-/transactions/%7Btoken%7D/related\" rel=\"nofollow\">/transactions/{token}/related</a></td>\n<td><code>client.transactions(token).related</code></td>\n</tr>\n<tr>\n<td><a href=\"#Users-/users\" rel=\"nofollow\">/users</a></td>\n<td><code>client.users</code></td>\n</tr>\n<tr>\n<td><a href=\"#User-Transitions-/usertransitions\" rel=\"nofollow\">/usertransitions</a></td>\n<td><code>client.users(token).transitions</code></td>\n</tr>\n<tr>\n<td><a href=\"#User-Notes-/users/%7Btoken%7D/notes\" rel=\"nofollow\">/users/{token}/notes</a></td>\n<td><code>client.users(token).notes</code></td>\n</tr>\n<tr>\n<td><a href=\"#Velocity-Controls-/velocitycontrols\" rel=\"nofollow\">/velocitycontrols</a></td>\n<td><code>client.velocity_controls</code></td>\n</tr>\n<tr>\n<td><a href=\"#Webhooks-/webhooks\" rel=\"nofollow\">/webhooks</a></td>\n<td><code>client.webhooks</code></td>\n</tr></tbody></table>\n<h3>Examples</h3>\n<h4>Accepted Countries (<code>/acceptedcountries</code>)</h4>\n<pre><code># List all accepted countries\naccepted_countries = client.accepted_countries.list()\nfor accepted_country in client.accepted_countries.stream():\n    pass\naccepted_countries_page = client.accepted_countries.page(start_index=0)\n\n# Retrieve a specific accepted country\naccepted_country = client.accepted_countries.find(token)\n\n# Create an accepted country\naccepted_country = client.accepted_countries.create({...})\n\n# Update an accepted country\naccepted_country = client.accepted_countries.save(token, {...})\n</code></pre>\n<h4>Account Holder Groups (<code>/accountholdergroups</code>)</h4>\n<pre><code># List all account holder groups\naccount_holder_groups = client.account_holder_groups.list()\nfor account_holder_group in client.account_holder_groups.stream():\n    pass\naccount_holder_groups_page = client.account_holder_groups.page(start_index=0)\n\n# Retrieve a specific account holder group\naccount_holder_group = client.account_holder_groups.find(token)\n\n# Create an account holder group\naccount_holder_group = client.account_holder_groups.create({...})\n\n# Update an account holder group\naccount_holder_group = client.account_holder_groups.save(token, {...})\n</code></pre>\n<h4>Auth Controls (<code>/authcontrols</code>)</h4>\n<pre><code># List all auth controls\nauth_controls = client.auth_controls.list()\nfor auth_control in client.auth_controls.stream():\n    pass\nauth_controls_page = client.auth_controls.page(start_index=0)\n\n# Retrieve a specific auth control\nauth_control = client.auth_controls.find(token)\n\n# Create an auth control\nauth_control = client.auth_controls.create({...})\n\n# Update an auth control\nauth_control = client.auth_controls.save(token, {...})\n</code></pre>\n<h4>Exempt MIDs (<code>/authcontrols/exemptmids</code>)</h4>\n<pre><code># List all exempt mids\nexempt_mi_ds = client.auth_controls.exempt_mids.list()\nfor exempt_mid in client.auth_controls.exempt_mids.stream():\n    pass\nexempt_mi_ds_page = client.auth_controls.exempt_mids.page(start_index=0)\n\n# Retrieve a specific exempt mid\nexempt_mid = client.auth_controls.exempt_mids.find(token)\n\n# Create an exempt mid\nexempt_mid = client.auth_controls.exempt_mids.create({...})\n\n# Update an exempt mid\nexempt_mid = client.auth_controls.exempt_mids.save(token, {...})\n</code></pre>\n<h4>Autoreloads (<code>/autoreloads</code>)</h4>\n<pre><code># List all autoreloads\nautoreloads = client.auto_reloads.list()\nfor autoreload in client.auto_reloads.stream():\n    pass\nautoreloads_page = client.auto_reloads.page(start_index=0)\n\n# Retrieve a specific autoreload\nautoreload = client.auto_reloads.find(token)\n\n# Create an autoreload\nautoreload = client.auto_reloads.create({...})\n\n# Update an autoreload\nautoreload = client.auto_reloads.save(token, {...})\n</code></pre>\n<h4>Balances (<code>/balances</code>)</h4>\n<pre><code># List all MSA balances\nbalances = client.balances.list_msas_for_user_or_business(token)\nfor balance in client.balances.stream_msas_for_user_or_business(token):\n    pass\n\n# Retrieve a specific balance\nbalance = client.balances.find_for_user_or_business(token)\n</code></pre>\n<h4>Bulk Issuances (<code>/bulkissuances</code>)</h4>\n<pre><code># List all bulk issuances\nbulk_issuances = client.bulk_issuances.list()\nfor bulk_issuance in client.bulk_issuances.stream():\n    pass\nbulk_issuances_page = client.bulk_issuances.page(start_index=0)\n\n# Retrieve a specific bulk issuance\nbulk_issuance = client.bulk_issuances.find(token)\n\n# Create a bulk issuance\nbulk_issuance = client.bulk_issuances.create({...})\n</code></pre>\n<h4>Businesses (<code>/businesses</code>)</h4>\n<pre><code># List all businesses\nbusinesses = client.businesses.list()\nfor business in client.businesses.stream():\n    pass\nbusinesses_page = client.businesses.page(start_index=0)\n\n# Retrieve a specific business\nbusiness = client.businesses.find(token)\n\n# Create a business\nbusiness = client.businesses.create({...})\n\n# Update a business\nbusiness = client.businesses.save(token, {...})\n\n# Retrieve a specific business SSN\nssn = client.businesses(token).ssn()\n\n# Retrieve a specific business Full SSN\nssn = client.businesses(token).ssn(full_ssn = True)\n\n# List all children of parent business\nchild_cardholders = client.businesses(token).children.list()\nfor child_cardholder in client.businesses(token).children.stream():\n    pass\nchild_cardholders_page = client.businesses(token).children.page(start_index=0)\n\n# Search for businesses\nbusinesss = client.businesses.look_up({...})\n</code></pre>\n<h4>Business Transitions (<code>/businesstransitions</code>)</h4>\n<pre><code># Create a business transition\ntransition = client.businesses(business_token).transitions.create(...)\n\n# Retrieve a specific business transition\ntransition = client.businesses(business_token).transitions.find(token)\n\n# List transitions for a specific business\ntransitions = client.businesses(business_token).transitions.list()\nfor transition in client.businesses(business_token).transitions.stream():\n    pass\ntransitions_page = client.businesses(business_token).transitions.page(start_index=0)\n</code></pre>\n<h4>Business Notes (<code>/businesses/{token}/notes</code>)</h4>\n<pre><code># List all business notes\nbusiness_notes = client.businesses(token).notes.list()\nfor business_note in client.businesses(token).notes.stream():\n    pass\nbusiness_notes_page = client.businesses(token).notes.page(start_index=0)\n\n# Create a business note\nbusiness_note = client.businesses(token).notes.create({...})\n\n# Update a business note\nbusiness_note = client.businesses(token).notes.save(token, {...})\n</code></pre>\n<h4>Card Products (<code>/cardproducts</code>)</h4>\n<pre><code># List all card products. Default limit is 25.\ncard_products = client.card_products.list()\nfor card_product in client.card_products.stream():\n    pass\ncard_products_page = client.card_products.page(start_index=0)\n\n# Retrieve a specific card product\ncard_product = client.card_products.find(token)\n\n# Create a card product\ncard_product = client.card_products.create({...})\n\n# Update a card product\ncard_product = client.card_products.save(token, {...})\n</code></pre>\n<h4>Cards (<code>/cards</code>)</h4>\n<pre><code># List cards by last 4\ncards = client.cards.list(last_four='6789')\nfor card in client.cards.stream():\n    pass\ncards_page = client.cards.page()\n\n# Lists all cards for one user\ncards = client.cards.list_for_user(token)\nfor card in client.cards.stream_for_user(token):\n    pass\n\n# Returns a specific card\ncard = client.cards.find(token)\n\n# Returns a specific card - PAN visible\ncard = client.cards.find_show_pan(token)\n\n# Retrieve a card by its barcode\ncard = client.cards.find_by_barcode(barcode)\n\n# Creates a card\ndata = {...}\ncard = client.cards.create(data)\n\n# Returns the user and card tokens for specified PAN\ntokens = client.cards.tokens_for_pan(pan)\n\n# Updates a card\ndata = {...}\ncard = client.cards.save(data)\n\n# Returns a merchant onboarding card\ncard = client.cards.find_for_merchant(token)\n\n# Returns a specific card - PAN visible\ncard = client.cards.find_for_merchant_show_pan(token)\n\n# Creates a merchant onboarding card\ndata = {...}\ncard = client.cards.create_for_merchant(token, data)\n</code></pre>\n<h4>Card Transitions (<code>/cardtransitions</code>)</h4>\n<pre><code># Create a card transition\ntransition = client.cards(token).transitions.create(...)\n\n# Retrieve a specific card transition\ntransition = client.cards(token).transitions.find(token)\n\n# List transitions for a specific card\ntransitions = client.cards(token).transitions.list()\nfor transition in client.cards(token).transitions.stream():\n    pass\ntransitions_page = client.cards(token).transitions.page(start_index=0)\n</code></pre>\n<h4>Chargebacks (<code>/chargebacks</code>)</h4>\n<pre><code># List all chargebacks\nchargebacks = client.chargebacks.list()\nfor chargeback in client.chargebacks.stream():\n    pass\nchargebacks_page = client.chargebacks.page(start_index=0)\n\n# Retrieve a specific chargeback\nchargeback = client.chargebacks.find(token)\n\n# Create a chargeback\nchargeback = client.chargebacks.create({...})\n\n# Grant provisional credit\nclient.chargebacks(token).grant_provisional_credit()\n\n# Reverse provisional credit\nclient.chargebacks(token).reverse_provisional_credit()\n</code></pre>\n<h4>Chargeback Transitions (<code>/chargebacks/transitions</code>)</h4>\n<pre><code># Create a chargeback transition\ntransition = client.chargebacks(token).transitions.create(...)\n\n# Retrieve a specific chargeback transition\ntransition = client.chargebacks(token).transitions.find(token)\n\n# List transitions for a specific chargeback\ntransitions = client.chargebacks(token).transitions.list()\nfor transition in client.chargebacks(token).transitions.stream():\n    pass\ntransitions_page = client.chargebacks(token).transitions.page(start_index=0)\n</code></pre>\n<h4>Commando Modes (<code>/commandomodes</code>)</h4>\n<pre><code># List all commando modes\ncommando_modes = client.commando_modes.list()\nfor commando_mode in client.commando_modes.stream():\n    pass\ncommando_modes_page = client.commando_modes.page(start_index=0)\n\n# Retrieve a specific commando mode\ncommando_mode = client.commando_modes.find(token)\n</code></pre>\n<h4>Commando Mode Transitions (<code>/commandomodes/transitions</code>)</h4>\n<pre><code># Retrieve a specific commando mode transition\ntransition = client.commando_modes(token).transitions.find(token)\n\n# List transitions for a specific commando mode\ntransitions = client.commando_modes(token).transitions.list()\nfor transition in client.commando_modes(token).transitions.stream():\n    pass\ntransitions_page = client.commando_modes(token).transitions.page(start_index=0)\n</code></pre>\n<h4>Digital Wallet Tokens (<code>/digitalwallettokens</code>)</h4>\n<pre><code># List all digital wallet tokens\ndigital_wallet_tokens = client.digital_wallet_tokens.list()\nfor digital_wallet_token in client.digital_wallet_tokens.stream():\n    pass\ndigital_wallet_tokens_page = client.digital_wallet_tokens.page(start_index=0)\n\n# Retrieve a specific digital wallet token\ndigital_wallet_token = client.digital_wallet_tokens.find(token)\n\n# Retrieve a specific digital wallet token with PAN\ndigital_wallet_token = client.digital_wallet_tokens.find_show_pan(token)\n</code></pre>\n<h4>Digital Wallet Token Transitions (<code>/digitalwallettokentransitions</code>)</h4>\n<pre><code># Create a digital wallet token transition\ntransition = client.digital_wallet_tokens(token).transitions.create(...)\n\n# Retrieve a specific digital wallet token transition\ntransition = client.digital_wallet_tokens(token).transitions.find(token)\n\n# List transitions for a specific digital wallet token\ntransitions = client.digital_wallet_tokens(token).transitions.list()\nfor transition in client.digital_wallet_tokens(token).transitions.stream():\n    pass\ntransitions_page = client.digital_wallet_tokens(token).transitions.page(start_index=0)\n</code></pre>\n<h4>Direct Deposits (<code>/directdeposits</code>)</h4>\n<pre><code># List all direct deposits\ndirect_deposits = client.direct_deposits.list()\nfor direct_deposit in client.direct_deposits.stream():\n    pass\ndirect_deposits_page = client.direct_deposits.page(start_index=0)\n\n# Retrieve a specific direct deposit\ndirect_deposit = client.direct_deposits.find(token)\n</code></pre>\n<h4>Direct Deposit Transitions (<code>/directdeposits/transitions</code>)</h4>\n<pre><code># Create a direct deposit transition\ntransition = client.direct_deposits(token).transitions.create(...)\n\n# Retrieve a specific direct deposit transition\ntransition = client.direct_deposits(token).transitions.find(token)\n\n# List transitions for a specific direct deposit\ntransitions = client.direct_deposits(token).transitions.list()\nfor transition in client.direct_deposits(token).transitions.stream():\n    pass\ntransitions_page = client.direct_deposits(token).transitions.page(start_index=0)\n</code></pre>\n<h4>Direct Deposit Accounts (<code>/directdeposits/accounts</code>)</h4>\n<pre><code>\n# Retrieve a specific direct deposit account\ndirect_deposit_account = client.direct_deposits.accounts.find(token)\n\n# Update a direct deposit account\ndirect_deposit_account = client.direct_deposits.accounts.save(token, {...})\n</code></pre>\n<h4>Fees (<code>/fees</code>)</h4>\n<pre><code># List all fees\nfees = client.fees.list()\nfor fee in client.fees.stream():\n    pass\nfees_page = client.fees.page(start_index=0)\n\n# Retrieve a specific fee\nfee = client.fees.find(token)\n\n# Create a fee\nfee = client.fees.create({...})\n\n# Update a fee\nfee = client.fees.save(token, {...})\n</code></pre>\n<h4>Fee Transfers (<code>/feetransfers</code>)</h4>\n<pre><code>\n# Retrieve a specific fee transfer\nfee_transfer = client.fee_transfers.find(token)\n\n# Create a fee transfer\nfee_transfer = client.fee_transfers.create({...})\n</code></pre>\n<h4>Funding Sources (<code>/fundingsources</code>)</h4>\n<pre><code># List all funding sources for a specific user\nfunding_sources = client.list_for_user(user_token)\nfor funding_source in client.stream_for_user(user_token):\n    pass\n\n# List all funding sources for a specific business\nfunding_sources = client.list_for_business(business_token)\nfor funding_source in client.stream_for_business(business_token):\n    pass\n</code></pre>\n<h4>Funding Source Addresses (<code>/fundingsources/addresses</code>)</h4>\n<pre><code>\n# Retrieve a specific funding source address\nfunding_source_address = client.funding_sources.addresses.find(token)\n\n# Create a funding source address\nfunding_source_address = client.funding_sources.addresses.create({...})\n\n# Update a funding source address\nfunding_source_address = client.funding_sources.addresses.save(token, {...})\n\n# list funding source addresses for a specific user\naddresses = client.funding_sources.addresses.list_for_user(user_token)\nfor address in client.funding_sources.addresses.stream_for_user(user_token)\n    pass\n\n# list funding source addresses for a specific business\naddresses = client.funding_sources.addresses.list_for_business(business_token)\nfor address in client.funding_sources.addresses.stream_for_business(business_token)\n    pass\n</code></pre>\n<h4>ACH Funding Sources (<code>/fundingsources/ach</code>)</h4>\n<pre><code>\n# Retrieve a specific ach funding source\nach_funding_source = client.funding_sources.ach.find(token)\n\n# Create an ach funding source\nach_funding_source = client.funding_sources.ach.create({...})\n\n# Update an ach funding source\nach_funding_source = client.funding_sources.ach.save(token, {...})\n\n# Retrieve the dollar amounts used to verify an ACH funding source\nclient.funding_sources.addresses(token).verification_amounts()\n</code></pre>\n<h4>Payment Card Funding Sources (<code>/fundingsources/paymentcard</code>)</h4>\n<pre><code>\n# Retrieve a specific payment card funding source\npayment_card_funding_source = client.funding_sources.payment_card.find(token)\n\n# Create a payment card funding source\npayment_card_funding_source = client.funding_sources.payment_card.create({...})\n\n# Update a payment card funding source\npayment_card_funding_source = client.funding_sources.payment_card.save(token, {...})\n</code></pre>\n<h4>Program Gateway Funding Sources (<code>/fundingsources/programgateway</code>)</h4>\n<pre><code>\n# Retrieve a specific program gateway funding source\nprogram_gateway_funding_source = client.funding_sources.program_gateway.find(token)\n\n# Create a program gateway funding source\nprogram_gateway_funding_source = client.funding_sources.program_gateway.create({...})\n\n# Update a program gateway funding source\nprogram_gateway_funding_source = client.funding_sources.program_gateway.save(token, {...})\n</code></pre>\n<h4>Program Funding Sources (<code>/fundingsources/program</code>)</h4>\n<pre><code>\n# Retrieve a specific program funding source\nprogram_funding_source = client.funding_sources.program.find(token)\n\n# Create a program funding source\nprogram_funding_source = client.funding_sources.program.create({...})\n\n# Update a program funding source\nprogram_funding_source = client.funding_sources.program.save(token, {...})\n</code></pre>\n<h4>GPA Orders (<code>/gpaorders</code>)</h4>\n<pre><code>\n# Retrieve a specific gpa order\ngpa_order = client.gpa_orders.find(token)\n\n# Create a gpa order\ngpa_order = client.gpa_orders.create({...})\n</code></pre>\n<h4>GPA Returns (<code>/gpaorders/unloads</code>)</h4>\n<pre><code># List all gpa returns\ngpa_returns = client.gpa_orders.unloads.list()\nfor gpa_return in client.gpa_orders.unloads.stream():\n    pass\ngpa_returns_page = client.gpa_orders.unloads.page(start_index=0)\n\n# Retrieve a specific gpa return\ngpa_return = client.gpa_orders.unloads.find(token)\n\n# Create a gpa return\ngpa_return = client.gpa_orders.unloads.create({...})\n</code></pre>\n<h4>KYC (<code>/kyc</code>)</h4>\n<pre><code># List KYC results for a specific user\nkyc_results = client.kyc.list_for_user(user_token)\nfor kyc_result in client.kyc.stream_for_user(user_token):\n    pass\n\n# List KYC results for a specific business\nkyc_results = client.kyc.list_for_business(business_token)\nfor kyc_result in client.kyc.stream_for_business(business_token):\n    pass\n\n# Retrieve a specific KYC result\nkyc = client.kyc.find(token)\n\n# Update KYC answers\nclient.kyc.save(token, {...})\n\n# Perform a KYC operation\nclient.kyc.create({...})\n</code></pre>\n<h4>MCC Groups (<code>/mccgroups</code>)</h4>\n<pre><code># List all mcc groups\nmcc_groups = client.mcc_groups.list()\nfor mcc_group in client.mcc_groups.stream():\n    pass\nmcc_groups_page = client.mcc_groups.page(start_index=0)\n\n# Retrieve a specific mcc group\nmcc_group = client.mcc_groups.find(token)\n\n# Create a mcc group\nmcc_group = client.mcc_groups.create({...})\n\n# Update a mcc group\nmcc_group = client.mcc_groups.save(token, {...})\n</code></pre>\n<h4>Merchants (<code>/merchants</code>)</h4>\n<pre><code># List all merchants\nmerchants = client.merchants.list()\nfor merchant in client.merchants.stream():\n    pass\nmerchants_page = client.merchants.page(start_index=0)\n\n# Retrieve a specific merchant\nmerchant = client.merchants.find(token)\n\n# Create a merchant\nmerchant = client.merchants.create({...})\n\n# Update a merchant\nmerchant = client.merchants.save(token, {...})\n</code></pre>\n<h4>Merchant Stores (<code>/merchants/{token}/stores</code>)</h4>\n<pre><code># List all merchant stores\nmerchant_stores = client.merchants(token).stores.list()\nfor merchant_store in client.merchants(token).stores.stream():\n    pass\nmerchant_stores_page = client.merchants(token).stores.page(start_index=0)\n</code></pre>\n<h4>MSA Orders (<code>/msaorders</code>)</h4>\n<pre><code># Retrieve a specific msa order\nmsa_order = client.msa_orders.find(token)\n\n# Create a msa order\nmsa_order = client.msa_orders.create({...})\n\n# Update a msa order\nmsa_order = client.msa_orders.save(token, {...})\n</code></pre>\n<h4>MSA Order Unloads (<code>/msaorders/unloads</code>)</h4>\n<pre><code># List all msa order unloads\nmsa_order_unloads = client.msa_orders.unloads.list()\nfor msa_order_unload in client.msa_orders.unloads.stream():\n    pass\nmsa_order_unloads_page = client.msa_orders.unloads.page(start_index=0)\n\n# Retrieve a specific msa order unload\nmsa_order_unload = client.msa_orders.unloads.find(token)\n\n# Create a msa order unload\nmsa_order_unload = client.msa_orders.unloads.create({...})\n</code></pre>\n<h4>Offer Orders (<code>/offerorders</code>)</h4>\n<pre><code># Retrieve a specific offer order\noffer_order = client.offer_orders.find(token)\n\n# Create an offer order\noffer_order = client.offer_orders.create({...})\n</code></pre>\n<h4>Pin Control Tokens (<code>/pins</code>)</h4>\n<pre><code># Create a pin control token\npin_control_token = client.pins.create({...})\n\n# Update a pin control token\npin_control_token = client.pins.save(token, {...})\n</code></pre>\n<h4>Program Transfers (<code>/programtransfers</code>)</h4>\n<pre><code># List all program transfers\nprogram_transfers = client.program_transfers.list()\nfor program_transfer in client.program_transfers.stream():\n    pass\nprogram_transfers_page = client.program_transfers.page(start_index=0)\n\n# Retrieve a specific program transfer\nprogram_transfer = client.program_transfers.find(token)\n\n# Create a program transfer\nprogram_transfer = client.program_transfers.create({...})\n</code></pre>\n<h4>Program Transfer Types (<code>/programtransfers/types</code>)</h4>\n<pre><code># List all program transfer types\nprogram_transfer_types = client.program_transfers.types.list()\nfor program_transfer_type in client.program_transfers.types.stream():\n    pass\nprogram_transfer_types_page = client.program_transfers.types.page(start_index=0)\n\n# Retrieve a specific program transfer type\nprogram_transfer_type = client.program_transfers.types.find(token)\n\n# Create a program transfer type\nprogram_transfer_type = client.program_transfers.types.create({...})\n\n# Update a program transfer type\nprogram_transfer_type = client.program_transfers.types.save(token, {...})\n</code></pre>\n<h4>Push-to-Cards (<code>/pushtocards</code>)</h4>\n<pre><code># List all push-to-cards\npush_to_cards = client.push_to_cards.list()\nfor push_to_card in client.push_to_cards.stream():\n    pass\npush_to_cards_page = client.push_to_cards.page(start_index=0)\n\n# Retrieve a specific push-to-card\npush_to_card = client.push_to_cards.find(token)\n\n# Create a push-to-card\npush_to_card = client.push_to_cards.create({...})\n\n# Update a push-to-card\npush_to_card = client.push_to_cards.save(token, {...})\n</code></pre>\n<h4>Push-to-Card Disbursements (<code>/pushtocards/disburse</code>)</h4>\n<pre><code># List all push-to-card disbursements\npush_to_card_disbursements = client.push_to_cards.disburse.list()\nfor push_to_card_disbursement in client.push_to_cards.disburse.stream():\n    pass\npush_to_card_disbursements_page = client.push_to_cards.disburse.page(start_index=0)\n\n# Retrieve a specific push-to-card disbursement\npush_to_card_disbursement = client.push_to_cards.disburse.find(token)\n\n# Create a push-to-card disbursement\npush_to_card_disbursement = client.push_to_cards.disburse.create({...})\n</code></pre>\n<h4>Push-to-Card Payment Cards (<code>/pushtocards/paymentcard</code>)</h4>\n<pre><code># List all push-to-card payment cards\npush_to_card_payment_cards = client.push_to_cards.payment_card.list()\nfor push_to_card_payment_card in client.push_to_cards.payment_card.stream():\n    pass\npush_to_card_payment_cards_page = client.push_to_cards.payment_card.page(start_index=0)\n\n# Retrieve a specific push-to-card payment card\npush_to_card_payment_card = client.push_to_cards.payment_card.find(token)\n\n# Create a push-to-card payment card\npush_to_card_payment_card = client.push_to_cards.payment_card.create({...})\n</code></pre>\n<h4>Realtime Fee Groups (<code>/realtimefeegroups</code>)</h4>\n<pre><code># List all realtime fee groups\nrealtime_fee_groups = client.real_time_fee_groups.list()\nfor realtime_fee_group in client.real_time_fee_groups.stream():\n    pass\nrealtime_fee_groups_page = client.real_time_fee_groups.page(start_index=0)\n\n# Retrieve a specific realtime fee group\nrealtime_fee_group = client.real_time_fee_groups.find(token)\n\n# Create a realtime fee group\nrealtime_fee_group = client.real_time_fee_groups.create({...})\n\n# Update a realtime fee group\nrealtime_fee_group = client.real_time_fee_groups.save(token, {...})\n</code></pre>\n<h4>Transactions (<code>/transactions</code>)</h4>\n<pre><code># List all transactions\ntransactions = client.transactions.list()\nfor transaction in client.transactions.stream():\n    pass\ntransactions_page = client.transactions.page(start_index=0)\n\n# List all transactions for a specific funding source\ntransactions = client.transactions.list_for_funding_source(funding_source_token)\nfor transaction in client.transactions.stream_for_funding_source(funding_source_token):\n    pass\n\n# Retrieve a specific transaction\ntransaction = client.transactions.find(token)\n</code></pre>\n<h4>Related Transations (<code>/transactions/{token}/related</code>)</h4>\n<pre><code># List all related transations\nrelated_transations = client.transactions(token).related.list()\nfor related_transation in client.transactions(token).related.stream():\n    pass\nrelated_transations_page = client.transactions(token).related.page(start_index=0)\n</code></pre>\n<h4>Users (<code>/users</code>)</h4>\n<pre><code># List all users. Default limit is 1000.\nusers = client.users.list()\nfor user in client.users.stream():\n    pass\nusers_page = client.users.page(start_index=0)\n\n# Retrieve a specific user\nuser = client.users.find(token)\n\n# Create a user\nuser = client.users.create({...})\n\n# Update a user\nuser = client.users.save(token, {...})\n\n# Retrieve a specific user SSN\nssn = client.users(token).ssn()\n\n# Retrieve a specific user Full SSN\nssn = client.users(token).ssn(full_ssn = True)\n\n# List all children of parent user\nchild_cardholders = client.users(token).children.list()\nfor child_cardholder in client.users(token).children.stream():\n    pass\nchild_cardholders_page = client.users(token).children.page(start_index=0)\n\n# Search for users, if look_up data is not specified by default lists 1000 users \nusers = client.users.look_up({...})\n</code></pre>\n<h4>User Transitions (<code>/usertransitions</code>)</h4>\n<pre><code># Create a user transition\ntransition = client.users(token).transitions.create(...)\n\n# Retrieve a specific user transition\ntransition = client.users(token).transitions.find(token)\n\n# List transitions for a specific user\ntransitions = client.users(token).transitions.list()\nfor transition in client.users(token).transitions.stream():\n    pass\ntransitions_page = client.users(token).transitions.page(start_index=0)\n</code></pre>\n<h4>User Notes (<code>/users/{token}/notes</code>)</h4>\n<pre><code># List all user notes\nuser_notes = client.users(token).notes.list()\nfor user_note in client.users(token).notes.stream():\n    pass\nuser_notes_page = client.users(token).notes.page(start_index=0)\n\n# Create a user note\nuser_note = client.users(token).notes.create({...})\n\n# Update a user note\nuser_note = client.users(token).notes.save(token, {...})\n</code></pre>\n<h4>Velocity Controls (<code>/velocitycontrols</code>)</h4>\n<pre><code># List all velocity controls\nvelocity_controls = client.velocity_controls.list()\nfor velocity_control in client.velocity_controls.stream():\n    pass\nvelocity_controls_page = client.velocity_controls.page(start_index=0)\n\n# Retrieve a specific velocity control\nvelocity_control = client.velocity_controls.find(token)\n\n# Create a velocity control\nvelocity_control = client.velocity_controls.create({...})\n\n# Update a velocity control\nvelocity_control = client.velocity_controls.save(token, {...})\n\n# List velocity controls available for a specific user\nvelocity_controls = list_available_for_user(user_token)\nfor velocity_control in stream_available_for_user(user_token):\n    pass\n</code></pre>\n<h4>Webhooks (<code>/webhooks</code>)</h4>\n<pre><code># List all webhooks\nwebhooks = client.webhooks.list()\nfor webhook in client.webhooks.stream():\n    pass\nwebhooks_page = client.webhooks.page(start_index=0)\n\n# Retrieve a specific webhook\nwebhook = client.webhooks.find(token)\n\n# Create a webhook\nwebhook = client.webhooks.create({...})\n\n# Update a webhook\nwebhook = client.webhooks.save(token, {...})\n\n# Ping a webhook\nclient.webhooks(token).ping()\n\n# Resend a webhook\nclient.webhooks(token).resent(event_type, event_token)\n</code></pre>\n\n          </div>"}, "last_serial": 5520607, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ab3ab414d1849242bb98402ce42e8d74", "sha256": "17414215107c8ee1be0e3a5c02755bb202e639d4f05df8ff35911d1066766f63"}, "downloads": -1, "filename": "marqeta-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ab3ab414d1849242bb98402ce42e8d74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1152, "upload_time": "2019-06-26T23:18:46", "upload_time_iso_8601": "2019-06-26T23:18:46.752786Z", "url": "https://files.pythonhosted.org/packages/33/83/f6de119e297ae3e81a923ffad18b68fbe9679817e3433be2a9d0d75995df/marqeta-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "c3ca24d122eed269fea7e06c48d5a3b5", "sha256": "5fb5f8e8205a7b483829bc44b6421614eca6c41dd34de33924c1ab14e51bb1fc"}, "downloads": -1, "filename": "marqeta-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c3ca24d122eed269fea7e06c48d5a3b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 264457, "upload_time": "2019-04-02T00:06:29", "upload_time_iso_8601": "2019-04-02T00:06:29.684607Z", "url": "https://files.pythonhosted.org/packages/82/9e/4006666e76aea6adac377011c8d3f483fca6a1c058e50da81a54bf73af94/marqeta-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "567c868e51f8b623269233eba2474d18", "sha256": "a12b7022e8ae622a50b503db178b6ea42da0c9b2b39411ce4ca986f34e2670bc"}, "downloads": -1, "filename": "marqeta-0.1.0.tar.gz", "has_sig": false, "md5_digest": "567c868e51f8b623269233eba2474d18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78021, "upload_time": "2019-04-02T00:06:32", "upload_time_iso_8601": "2019-04-02T00:06:32.143438Z", "url": "https://files.pythonhosted.org/packages/52/83/73de1a9e09389578e20045fb3f035fb579b59c17f70495bc97d06db3fcdf/marqeta-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "87699dae30737713d6474006fafc3326", "sha256": "acafa642a117328e2d725f7e8dd31a8920d2f48ccd0e708e3e5fa5326d1702b9"}, "downloads": -1, "filename": "marqeta-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "87699dae30737713d6474006fafc3326", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 260402, "upload_time": "2019-07-11T23:08:22", "upload_time_iso_8601": "2019-07-11T23:08:22.533412Z", "url": "https://files.pythonhosted.org/packages/5f/15/123f2a5c9cab7716e71560b125e1fd6d19e2b921e2383922f4c84a9f8487/marqeta-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52e2de6ae14b16db4566c94ea6733be9", "sha256": "cecef3fcb1a1a359df319ecc07514383f500d8164cc887026a00d56c7cffa2a8"}, "downloads": -1, "filename": "marqeta-0.2.1.tar.gz", "has_sig": false, "md5_digest": "52e2de6ae14b16db4566c94ea6733be9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76198, "upload_time": "2019-07-11T23:08:25", "upload_time_iso_8601": "2019-07-11T23:08:25.038669Z", "url": "https://files.pythonhosted.org/packages/19/0b/fe3b1f24f624ac1657facaf0cedfe0c23f4fc3da941d833c091981d2d92e/marqeta-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87699dae30737713d6474006fafc3326", "sha256": "acafa642a117328e2d725f7e8dd31a8920d2f48ccd0e708e3e5fa5326d1702b9"}, "downloads": -1, "filename": "marqeta-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "87699dae30737713d6474006fafc3326", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 260402, "upload_time": "2019-07-11T23:08:22", "upload_time_iso_8601": "2019-07-11T23:08:22.533412Z", "url": "https://files.pythonhosted.org/packages/5f/15/123f2a5c9cab7716e71560b125e1fd6d19e2b921e2383922f4c84a9f8487/marqeta-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "52e2de6ae14b16db4566c94ea6733be9", "sha256": "cecef3fcb1a1a359df319ecc07514383f500d8164cc887026a00d56c7cffa2a8"}, "downloads": -1, "filename": "marqeta-0.2.1.tar.gz", "has_sig": false, "md5_digest": "52e2de6ae14b16db4566c94ea6733be9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 76198, "upload_time": "2019-07-11T23:08:25", "upload_time_iso_8601": "2019-07-11T23:08:25.038669Z", "url": "https://files.pythonhosted.org/packages/19/0b/fe3b1f24f624ac1657facaf0cedfe0c23f4fc3da941d833c091981d2d92e/marqeta-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:38 2020"}