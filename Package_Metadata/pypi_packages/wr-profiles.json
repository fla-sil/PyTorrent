{"info": {"author": "Jazeps Basko", "author_email": "jazeps.basko@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "###########\nwr-profiles\n###########\n\nIntroduction\n============\n\n**wr-profiles** allows declaring a profile -- a collection of key-value pairs -- backed by environment variables\nand accessing the profile contents through dot notation with auto-complete working in your IDE.\nYou can also have multiple separate environments declared and switch between profiles by changing just one environment\nvariable (just like you normally do when working with multiple AWS accounts if you have that background).\nwr-profiles are designed with testability in mind.\n\n    *wr-* in the package name stands for *Wheel Reinvented*. Just like all other packages whose name starts with\n    *wr-*, the meaning of this library (as in *meaning of life*) lies in its existence and evolution\n    and not in any external application of it.\n\nSupported Python Versions\n-------------------------\n\n* Python 3.6\n* Python 3.7\n\nExample\n=======\n\nDeclare the profile:\n\n.. code-block:: python\n\n    from wr_profiles import envvar_profile_cls\n\n    @envvar_profile_cls\n    class WarehouseProfile:\n        host: str = \"localhost\"\n        username: str\n        password: str\n\n    warehouse_profile = WarehouseProfile()\n\n\nSet up the environments:\n\n.. code-block:: bash\n\n    export WAREHOUSE_STAGING_PARENT_PROFILE=\"production\"\n    export WAREHOUSE_STAGING_PASSWORD=\"staging-password\"\n    export WAREHOUSE_PRODUCTION_USERNAME=\"production-username\"\n    export WAREHOUSE_PRODUCTION_PASSWORD=\"production-password\"\n\nSelect the active environment:\n\n.. code-block:: shell\n\n    export WAREHOUSE_PROFILE=staging\n\n\nUse the profile:\n\n.. code-block:: python\n\n    from profiles import warehouse_profile\n\n    assert warehouse_profile.host == \"localhost\"\n    assert warehouse_profile.username == \"production-username\"\n    assert warehouse_profile.password == \"staging-password\"\n\n\nInstallation\n============\n\n.. code-block:: bash\n\n    pip install wr-profiles\n\nIf you decide to use this library, make sure you pin the version number in your requirements file.\n\nWe are following interpretation of the semantic versioning schema. Example:\n\n* ``v2.x.a -> v2.x.b`` - bugfix or non-breaking change, safe to upgrade.\n* ``v2.x.* -> v3.y.*`` - potentially breaking changes, feature added, minimal changes to user code may be required\n* ``v2.* -> v3.*`` - complete changeover\n\n\nChangelog\n=========\n\nv4.2.0\n------\n\n* Added ``profile_delegate`` feature.\n\nv4.1.0\n------\n\n* Added ``EnvvarProfile.create_env`` which creates an ``Environment`` which can be applied\n  as a context manager.\n\n\nUser Guide\n==========\n\nConcepts\n--------\n\nProfile\n^^^^^^^\n\nA **profile** represents a set of configurable **properties** of a single service\nbacked by environment variables.\n\nIn your application, there can be multiple unrelated profiles each providing interface\nto properties of a different service.\n\nInstances of profiles associated with the same service share the same base class and are identified by\n``profile_root`` specified in that base class. Is is the root from which all relevant\nenvironment variable names are formed.\n\nProfiles of unrelated services do not share any information.\nIn the discussion below, different instances or kinds of profiles all relate to the same service,\ne.g. same ``profile_root``.\n\nWarehouse Profile (Example)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nIn the discussion below, we will use a profile for a data warehouse access as an example.\nClass ``WarehouseProfile`` declares the profile and the properties it provides.\nObject ``warehouse_profile`` is the single instance through which user must look up service's\nactive configuration.\n\n.. code-block:: python\n\n    from wr_profiles import envvar_profile_cls\n\n    @envvar_profile_cls\n    class WarehouseProfile:\n        host: str = \"localhost\"\n        username: str\n        password: str\n\n    warehouse_profile = WarehouseProfile()\n\n\nProfile Name\n^^^^^^^^^^^^\n\nIndividual instances of profiles are identified by their name (``profile_name`` property).\n\n\nActive Profile\n^^^^^^^^^^^^^^\n\nThe **active profile** is the profile of a service that should be used \naccording to the environment variables.\n\nBy default, the active profile can be switched by setting a special environment variable\n``<PROFILE_ROOT>_PROFILE``. For ``WarehouseProfile`` that would be ``WAREHOUSE_PROFILE``.\n\nThe name of this variable can be customised by setting your class's ``profile_activating_envvar``.\n\nIf this variable is not set, the active profile is *an empty string*, and the environment variables\nconsulted are in the form:\n\n.. code-block:: bash\n\n    <PROFILE_ROOT>_<PROPERTY_NAME>\n\nFor example, ``WAREHOUSE_HOST``.\n\nIf ``<PROFILE_ROOT>_PROFILE`` is set then the active profile consults environment variables in the form:\n\n.. code-block::\n\n    <PROFILE_ROOT>_<PROFILE_NAME>_<PROPERTY_NAME>\n\nFor example, if ``WAREHOUSE_PROFILE`` is set to ``staging`` then ``host`` property will be looked up\nunder ``WAREHOUSE_STAGING_HOST``.\n\n\nParent Profile\n^^^^^^^^^^^^^^\n\nAny particular profile (for example, ``staging`` profile of ``WarehouseProfile``) can be instructed\nto inherit its property values from a **parent profile** by setting:\n\n.. code-block:: bash\n\n    <PROFILE_ROOT>_<PROFILE_NAME>_PARENT_PROFILE\n\nFor example, ``WAREHOUSE_STAGING_PARENT_PROFILE``, if set to ``production``, would mean that\nif environment variable ``WAREHOUSE_STAGING_HOST`` was not set, property value loader would\nconsult ``WAREHOUSE_PRODUCTION_HOST`` instead. And only if that variable was not present,\nthe default value of the property would be used.\n\n*Limitation*: The default profile (``profile_name=\"\"``) cannot be used as a parent profile.\nIf you specify empty string as ``<PROFILE_ROOT>_<PROFILE_NAME>_PARENT_PROFILE`` then this\nprofile won\"t have any parent profile. It is the same as having no value set. \n\n\nLive Profile vs Frozen Profile\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA **live** profile always consults environment variables (``os.environ``) whereas\na **frozen** profile does so only during instantiation and when explicitly loaded\nwith ``load()`` method.\n\nCommon Scenarios\n----------------\n\n\nGet Current Active Profile\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCurrent active profile is always available through the instance of your profile class which is\ninstantiated with no arguments:\n\n.. code-block:: python\n\n    warehouse_profile = WarehouseProfile()\n\nNormally you'd only need a single instance of your profile class pointing to the active profile.\n\n\nGet Concrete Profile\n^^^^^^^^^^^^^^^^^^^^\n\nTo work with a concrete profile which may not necessarily be activated, use ``load``\nfactory method:\n\n.. code-block:: python\n\n    staging = WarehouseProfile.load(\"staging\")\n\nBy default, this profile will be frozen which means it will be loaded only once during instantiation.\nIf you want it to always consult environment variables, pass ``profile_is_live=True``:\n\n.. code-block:: python\n\n    staging = WarehouseProfile.load(\"staging\", profile_is_live=True)\n\n\nCustomise Profile-Activating Environment Variable\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nImagine you have your ``WarehouseProfile`` and you want to use it in tests. In tests it should have different defaults.\n\n.. code-block:: python\n\n    @envvar_profile_cls\n    class WarehouseTestProfile(WarehouseProfile):\n\n        # If you don't set this, it would be \"WAREHOUSE_PROFILE\" which would conflict\n        # with your non-test profile.\n        profile_activating_envvar = \"WAREHOUSE_TEST_PROFILE\"\n\n        host: str = \"test-host\"\n        username: str = \"test-user\"\n\n\nIn your application you would then have two instances:\n\n.. code-block:: python\n\n    profile = WarehouseProfile()\n    test_profile = WarehouseTestProfile()\n\nNow you can reuse your non-test profiles in tests when it makes sense. For example, if you have set up environment\nvariables in the form ``WAREHOUSE_SANDBOX_*`` then this \"sandbox\" profile can be used in tests by just setting\n``WAREHOUSE_TEST_PROFILE`` to ``sandbox``.\n\nNote that ``profile_root`` for both profiles is the same.\n\nActivate Profile\n^^^^^^^^^^^^^^^^\n\nTo activate a profile, call ``activate`` method on a frozen instance of the profile without any arguments,\nor, ``activate(profile_name)`` on the live current profile instance:\n\n.. code-block:: python\n\n    staging.activate()\n    # or:\n    warehouse_profile.activate(\"staging\")\n\n\nGet All Values\n^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    warehouse_profile.to_dict()\n\n\nSet Environment Variables\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNote that the environment variables you set normally apply only to the current process and its sub-processes\nso this will have limited use -- it will only make sense when you are launching sub-processes or you do this\nsomewhere early in the code before environment variables are loaded by other parts of your code.\n\n.. code-block:: python\n\n    os.environ.update(warehouse_profile.to_envvars())\n\n\nCheck If Property Has Non-Default Value\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    warehouse_profile.has_prop_value(\"username\")\n    # or\n    warehouse_profile.has_prop_value(WarehouseProfile.username)\n\n\nInspect Property\n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from wr_profiles import EnvvarProfileProperty\n\n    assert isinstance(WarehouseProfile.username, EnvvarProfileProperty)\n    assert WarehouseProfile.username.name == \"username\"\n    assert WarehouseProfile.username.default == \"default-username\"\n\n\nEnvironment Objects\n^^^^^^^^^^^^^^^^^^^\n\nStarting from version 4.1 you can create an instance of ``Environment`` which can then be applied on ``os.environ``\nor pytest's ``monkeypatch`` fixture. ``Environment`` is a dictionary of environment variables that neet to\nbe set or unset in order to apply the specified environment. The values are determined at environment\ncreation time.\n\n.. code-block:: python\n\n    test_env = warehouse_profile.create_env(username='test', password=None)\n    with test_env.applied():\n        assert warehouse_profile.username == 'test'\n        assert os.environ['WAREHOUSE_USERNAME'] == 'test'\n\n        assert warehouse_profile.password is None\n        assert 'WAREHOUSE_PASSWORD' not in os.environ\n\n\nConfig Object that Delegates to Profile\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEnvironment variables are not necessarily the only source of configuration.\nIn a non-trivial application you probably won't be consulting the profile object from your application code\ndirectly. Instead, you'll have a config object which will consult different sources including the\nenvironment variable profile.\nIt is very likely that the properties defined in your profile class will\nbe a subset of those exposed by the config object. If you don't want to repeat yourself, you can have your\nconfig class extend the profile class and have the config class delegate all the attributes to the profile\nclass except for those implemented in the config class.\n\n.. code-block:: python\n\n    profile = WarehouseProfile()\n\n    class WarehouseConfig(WarehouseProfile):\n        @property\n        def profile_delegate(self):\n            return profile\n\n        @property\n        def username(self):\n            return profile.username or \"anonymous\"\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jbasko/wr-profiles", "keywords": "", "license": "MIT", "maintainer": "Jazeps Basko", "maintainer_email": "jazeps.basko@gmail.com", "name": "wr-profiles", "package_url": "https://pypi.org/project/wr-profiles/", "platform": "", "project_url": "https://pypi.org/project/wr-profiles/", "project_urls": {"Homepage": "https://github.com/jbasko/wr-profiles"}, "release_url": "https://pypi.org/project/wr-profiles/4.2.1/", "requires_dist": null, "requires_python": "", "summary": "Load environment variable based profiles in Python 3.6+ with ease", "version": "4.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p><strong>wr-profiles</strong> allows declaring a profile \u2013 a collection of key-value pairs \u2013 backed by environment variables\nand accessing the profile contents through dot notation with auto-complete working in your IDE.\nYou can also have multiple separate environments declared and switch between profiles by changing just one environment\nvariable (just like you normally do when working with multiple AWS accounts if you have that background).\nwr-profiles are designed with testability in mind.</p>\n<blockquote>\n<em>wr-</em> in the package name stands for <em>Wheel Reinvented</em>. Just like all other packages whose name starts with\n<em>wr-</em>, the meaning of this library (as in <em>meaning of life</em>) lies in its existence and evolution\nand not in any external application of it.</blockquote>\n<div id=\"supported-python-versions\">\n<h3>Supported Python Versions</h3>\n<ul>\n<li>Python 3.6</li>\n<li>Python 3.7</li>\n</ul>\n</div>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Declare the profile:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wr_profiles</span> <span class=\"kn\">import</span> <span class=\"n\">envvar_profile_cls</span>\n\n<span class=\"nd\">@envvar_profile_cls</span>\n<span class=\"k\">class</span> <span class=\"nc\">WarehouseProfile</span><span class=\"p\">:</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">warehouse_profile</span> <span class=\"o\">=</span> <span class=\"n\">WarehouseProfile</span><span class=\"p\">()</span>\n</pre>\n<p>Set up the environments:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">WAREHOUSE_STAGING_PARENT_PROFILE</span><span class=\"o\">=</span><span class=\"s2\">\"production\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">WAREHOUSE_STAGING_PASSWORD</span><span class=\"o\">=</span><span class=\"s2\">\"staging-password\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">WAREHOUSE_PRODUCTION_USERNAME</span><span class=\"o\">=</span><span class=\"s2\">\"production-username\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">WAREHOUSE_PRODUCTION_PASSWORD</span><span class=\"o\">=</span><span class=\"s2\">\"production-password\"</span>\n</pre>\n<p>Select the active environment:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">WAREHOUSE_PROFILE</span><span class=\"o\">=</span>staging\n</pre>\n<p>Use the profile:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">profiles</span> <span class=\"kn\">import</span> <span class=\"n\">warehouse_profile</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">host</span> <span class=\"o\">==</span> <span class=\"s2\">\"localhost\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"s2\">\"production-username\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"o\">==</span> <span class=\"s2\">\"staging-password\"</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install wr-profiles\n</pre>\n<p>If you decide to use this library, make sure you pin the version number in your requirements file.</p>\n<p>We are following interpretation of the semantic versioning schema. Example:</p>\n<ul>\n<li><tt>v2.x.a <span class=\"pre\">-&gt;</span> v2.x.b</tt> - bugfix or non-breaking change, safe to upgrade.</li>\n<li><tt>v2.x.* <span class=\"pre\">-&gt;</span> v3.y.*</tt> - potentially breaking changes, feature added, minimal changes to user code may be required</li>\n<li><tt>v2.* <span class=\"pre\">-&gt;</span> v3.*</tt> - complete changeover</li>\n</ul>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"v4-2-0\">\n<h3>v4.2.0</h3>\n<ul>\n<li>Added <tt>profile_delegate</tt> feature.</li>\n</ul>\n</div>\n<div id=\"v4-1-0\">\n<h3>v4.1.0</h3>\n<ul>\n<li>Added <tt>EnvvarProfile.create_env</tt> which creates an <tt>Environment</tt> which can be applied\nas a context manager.</li>\n</ul>\n</div>\n</div>\n<div id=\"user-guide\">\n<h2>User Guide</h2>\n<div id=\"concepts\">\n<h3>Concepts</h3>\n<div id=\"profile\">\n<h4>Profile</h4>\n<p>A <strong>profile</strong> represents a set of configurable <strong>properties</strong> of a single service\nbacked by environment variables.</p>\n<p>In your application, there can be multiple unrelated profiles each providing interface\nto properties of a different service.</p>\n<p>Instances of profiles associated with the same service share the same base class and are identified by\n<tt>profile_root</tt> specified in that base class. Is is the root from which all relevant\nenvironment variable names are formed.</p>\n<p>Profiles of unrelated services do not share any information.\nIn the discussion below, different instances or kinds of profiles all relate to the same service,\ne.g. same <tt>profile_root</tt>.</p>\n<div id=\"warehouse-profile-example\">\n<h5>Warehouse Profile (Example)</h5>\n<p>In the discussion below, we will use a profile for a data warehouse access as an example.\nClass <tt>WarehouseProfile</tt> declares the profile and the properties it provides.\nObject <tt>warehouse_profile</tt> is the single instance through which user must look up service\u2019s\nactive configuration.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wr_profiles</span> <span class=\"kn\">import</span> <span class=\"n\">envvar_profile_cls</span>\n\n<span class=\"nd\">@envvar_profile_cls</span>\n<span class=\"k\">class</span> <span class=\"nc\">WarehouseProfile</span><span class=\"p\">:</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"localhost\"</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">warehouse_profile</span> <span class=\"o\">=</span> <span class=\"n\">WarehouseProfile</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"profile-name\">\n<h4>Profile Name</h4>\n<p>Individual instances of profiles are identified by their name (<tt>profile_name</tt> property).</p>\n</div>\n<div id=\"active-profile\">\n<h4>Active Profile</h4>\n<p>The <strong>active profile</strong> is the profile of a service that should be used\naccording to the environment variables.</p>\n<p>By default, the active profile can be switched by setting a special environment variable\n<tt>&lt;PROFILE_ROOT&gt;_PROFILE</tt>. For <tt>WarehouseProfile</tt> that would be <tt>WAREHOUSE_PROFILE</tt>.</p>\n<p>The name of this variable can be customised by setting your class\u2019s <tt>profile_activating_envvar</tt>.</p>\n<p>If this variable is not set, the active profile is <em>an empty string</em>, and the environment variables\nconsulted are in the form:</p>\n<pre>&lt;PROFILE_ROOT&gt;_&lt;PROPERTY_NAME&gt;\n</pre>\n<p>For example, <tt>WAREHOUSE_HOST</tt>.</p>\n<p>If <tt>&lt;PROFILE_ROOT&gt;_PROFILE</tt> is set then the active profile consults environment variables in the form:</p>\n<pre>&lt;PROFILE_ROOT&gt;_&lt;PROFILE_NAME&gt;_&lt;PROPERTY_NAME&gt;\n</pre>\n<p>For example, if <tt>WAREHOUSE_PROFILE</tt> is set to <tt>staging</tt> then <tt>host</tt> property will be looked up\nunder <tt>WAREHOUSE_STAGING_HOST</tt>.</p>\n</div>\n<div id=\"parent-profile\">\n<h4>Parent Profile</h4>\n<p>Any particular profile (for example, <tt>staging</tt> profile of <tt>WarehouseProfile</tt>) can be instructed\nto inherit its property values from a <strong>parent profile</strong> by setting:</p>\n<pre>&lt;PROFILE_ROOT&gt;_&lt;PROFILE_NAME&gt;_PARENT_PROFILE\n</pre>\n<p>For example, <tt>WAREHOUSE_STAGING_PARENT_PROFILE</tt>, if set to <tt>production</tt>, would mean that\nif environment variable <tt>WAREHOUSE_STAGING_HOST</tt> was not set, property value loader would\nconsult <tt>WAREHOUSE_PRODUCTION_HOST</tt> instead. And only if that variable was not present,\nthe default value of the property would be used.</p>\n<p><em>Limitation</em>: The default profile (<tt><span class=\"pre\">profile_name=\"\"</span></tt>) cannot be used as a parent profile.\nIf you specify empty string as <tt>&lt;PROFILE_ROOT&gt;_&lt;PROFILE_NAME&gt;_PARENT_PROFILE</tt> then this\nprofile won\u201dt have any parent profile. It is the same as having no value set.</p>\n</div>\n<div id=\"live-profile-vs-frozen-profile\">\n<h4>Live Profile vs Frozen Profile</h4>\n<p>A <strong>live</strong> profile always consults environment variables (<tt>os.environ</tt>) whereas\na <strong>frozen</strong> profile does so only during instantiation and when explicitly loaded\nwith <tt>load()</tt> method.</p>\n</div>\n</div>\n<div id=\"common-scenarios\">\n<h3>Common Scenarios</h3>\n<div id=\"get-current-active-profile\">\n<h4>Get Current Active Profile</h4>\n<p>Current active profile is always available through the instance of your profile class which is\ninstantiated with no arguments:</p>\n<pre><span class=\"n\">warehouse_profile</span> <span class=\"o\">=</span> <span class=\"n\">WarehouseProfile</span><span class=\"p\">()</span>\n</pre>\n<p>Normally you\u2019d only need a single instance of your profile class pointing to the active profile.</p>\n</div>\n<div id=\"get-concrete-profile\">\n<h4>Get Concrete Profile</h4>\n<p>To work with a concrete profile which may not necessarily be activated, use <tt>load</tt>\nfactory method:</p>\n<pre><span class=\"n\">staging</span> <span class=\"o\">=</span> <span class=\"n\">WarehouseProfile</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"staging\"</span><span class=\"p\">)</span>\n</pre>\n<p>By default, this profile will be frozen which means it will be loaded only once during instantiation.\nIf you want it to always consult environment variables, pass <tt>profile_is_live=True</tt>:</p>\n<pre><span class=\"n\">staging</span> <span class=\"o\">=</span> <span class=\"n\">WarehouseProfile</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"staging\"</span><span class=\"p\">,</span> <span class=\"n\">profile_is_live</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"customise-profile-activating-environment-variable\">\n<h4>Customise Profile-Activating Environment Variable</h4>\n<p>Imagine you have your <tt>WarehouseProfile</tt> and you want to use it in tests. In tests it should have different defaults.</p>\n<pre><span class=\"nd\">@envvar_profile_cls</span>\n<span class=\"k\">class</span> <span class=\"nc\">WarehouseTestProfile</span><span class=\"p\">(</span><span class=\"n\">WarehouseProfile</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># If you don't set this, it would be \"WAREHOUSE_PROFILE\" which would conflict</span>\n    <span class=\"c1\"># with your non-test profile.</span>\n    <span class=\"n\">profile_activating_envvar</span> <span class=\"o\">=</span> <span class=\"s2\">\"WAREHOUSE_TEST_PROFILE\"</span>\n\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"test-host\"</span>\n    <span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"test-user\"</span>\n</pre>\n<p>In your application you would then have two instances:</p>\n<pre><span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">WarehouseProfile</span><span class=\"p\">()</span>\n<span class=\"n\">test_profile</span> <span class=\"o\">=</span> <span class=\"n\">WarehouseTestProfile</span><span class=\"p\">()</span>\n</pre>\n<p>Now you can reuse your non-test profiles in tests when it makes sense. For example, if you have set up environment\nvariables in the form <tt>WAREHOUSE_SANDBOX_*</tt> then this \u201csandbox\u201d profile can be used in tests by just setting\n<tt>WAREHOUSE_TEST_PROFILE</tt> to <tt>sandbox</tt>.</p>\n<p>Note that <tt>profile_root</tt> for both profiles is the same.</p>\n</div>\n<div id=\"activate-profile\">\n<h4>Activate Profile</h4>\n<p>To activate a profile, call <tt>activate</tt> method on a frozen instance of the profile without any arguments,\nor, <tt>activate(profile_name)</tt> on the live current profile instance:</p>\n<pre><span class=\"n\">staging</span><span class=\"o\">.</span><span class=\"n\">activate</span><span class=\"p\">()</span>\n<span class=\"c1\"># or:</span>\n<span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">activate</span><span class=\"p\">(</span><span class=\"s2\">\"staging\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-all-values\">\n<h4>Get All Values</h4>\n<pre><span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"set-environment-variables\">\n<h4>Set Environment Variables</h4>\n<p>Note that the environment variables you set normally apply only to the current process and its sub-processes\nso this will have limited use \u2013 it will only make sense when you are launching sub-processes or you do this\nsomewhere early in the code before environment variables are loaded by other parts of your code.</p>\n<pre><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">to_envvars</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"check-if-property-has-non-default-value\">\n<h4>Check If Property Has Non-Default Value</h4>\n<pre><span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">has_prop_value</span><span class=\"p\">(</span><span class=\"s2\">\"username\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">has_prop_value</span><span class=\"p\">(</span><span class=\"n\">WarehouseProfile</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"inspect-property\">\n<h4>Inspect Property</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wr_profiles</span> <span class=\"kn\">import</span> <span class=\"n\">EnvvarProfileProperty</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">WarehouseProfile</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">EnvvarProfileProperty</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">WarehouseProfile</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"username\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">WarehouseProfile</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"o\">==</span> <span class=\"s2\">\"default-username\"</span>\n</pre>\n</div>\n<div id=\"environment-objects\">\n<h4>Environment Objects</h4>\n<p>Starting from version 4.1 you can create an instance of <tt>Environment</tt> which can then be applied on <tt>os.environ</tt>\nor pytest\u2019s <tt>monkeypatch</tt> fixture. <tt>Environment</tt> is a dictionary of environment variables that neet to\nbe set or unset in order to apply the specified environment. The values are determined at environment\ncreation time.</p>\n<pre><span class=\"n\">test_env</span> <span class=\"o\">=</span> <span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">create_env</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">test_env</span><span class=\"o\">.</span><span class=\"n\">applied</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"s1\">'test'</span>\n    <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'WAREHOUSE_USERNAME'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'test'</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">warehouse_profile</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n    <span class=\"k\">assert</span> <span class=\"s1\">'WAREHOUSE_PASSWORD'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span>\n</pre>\n</div>\n<div id=\"config-object-that-delegates-to-profile\">\n<h4>Config Object that Delegates to Profile</h4>\n<p>Environment variables are not necessarily the only source of configuration.\nIn a non-trivial application you probably won\u2019t be consulting the profile object from your application code\ndirectly. Instead, you\u2019ll have a config object which will consult different sources including the\nenvironment variable profile.\nIt is very likely that the properties defined in your profile class will\nbe a subset of those exposed by the config object. If you don\u2019t want to repeat yourself, you can have your\nconfig class extend the profile class and have the config class delegate all the attributes to the profile\nclass except for those implemented in the config class.</p>\n<pre><span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">WarehouseProfile</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WarehouseConfig</span><span class=\"p\">(</span><span class=\"n\">WarehouseProfile</span><span class=\"p\">):</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">profile_delegate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">profile</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">username</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"ow\">or</span> <span class=\"s2\">\"anonymous\"</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4452638, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "d8bbdde4980d6acb7b9db70d15177d1e", "sha256": "d5f8f11724c09103c5f9c5e5dd5c4fe2f5612eecd9901349bf6e33c585ad9062"}, "downloads": -1, "filename": "wr-profiles-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d8bbdde4980d6acb7b9db70d15177d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8550, "upload_time": "2018-07-14T16:22:56", "upload_time_iso_8601": "2018-07-14T16:22:56.612233Z", "url": "https://files.pythonhosted.org/packages/e1/89/35af250f57a07277f1a32319e408b028410a0615b8670422dc503d9b8803/wr-profiles-1.0.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "6dbc80bd25519d41534687140e7e0ccc", "sha256": "6c7d3823cdfd689882ebf728ef51cc195f94cba8bde897e550ab7b5fb000defa"}, "downloads": -1, "filename": "wr-profiles-2.0.0.tar.gz", "has_sig": false, "md5_digest": "6dbc80bd25519d41534687140e7e0ccc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9830, "upload_time": "2018-07-27T09:31:29", "upload_time_iso_8601": "2018-07-27T09:31:29.431775Z", "url": "https://files.pythonhosted.org/packages/3d/23/d696f16e52e644ec92df08995afd9afec20a92b27dc04bc8c4870755b2cc/wr-profiles-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "f8f2d11c12997cebe1422bd4e56aee38", "sha256": "770ebe2796e612f7cbd487f96fe6a0f0c1c912f45290e6dbaf136417e83b6aab"}, "downloads": -1, "filename": "wr-profiles-2.1.0.tar.gz", "has_sig": false, "md5_digest": "f8f2d11c12997cebe1422bd4e56aee38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11248, "upload_time": "2018-07-29T16:45:36", "upload_time_iso_8601": "2018-07-29T16:45:36.526043Z", "url": "https://files.pythonhosted.org/packages/31/e8/9c84baf43d7a17cd04759c4698e05894c02c5e0f9fd623bf68773abfc134/wr-profiles-2.1.0.tar.gz", "yanked": false}], "2.2.4": [{"comment_text": "", "digests": {"md5": "27425238f97a5a29ac24591d82f520bc", "sha256": "be02b4e49cf3d07026541974e69e9891c1474f6f6aa583455e5e9565320762e6"}, "downloads": -1, "filename": "wr-profiles-2.2.4.tar.gz", "has_sig": false, "md5_digest": "27425238f97a5a29ac24591d82f520bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12210, "upload_time": "2018-08-04T11:13:57", "upload_time_iso_8601": "2018-08-04T11:13:57.631533Z", "url": "https://files.pythonhosted.org/packages/73/0c/cd46d3391720623681c26b3da072cbcac2219e2388f9f474414e49ca64c5/wr-profiles-2.2.4.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "eb75c971d905ef101eea56862d638cf2", "sha256": "877c1c7d91c00e4268c362cb1c36270de5feb4a17163359aa9ff3ba274639faa"}, "downloads": -1, "filename": "wr-profiles-3.0.0.tar.gz", "has_sig": false, "md5_digest": "eb75c971d905ef101eea56862d638cf2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14056, "upload_time": "2018-09-05T08:24:50", "upload_time_iso_8601": "2018-09-05T08:24:50.808535Z", "url": "https://files.pythonhosted.org/packages/ef/f2/5a7930ad9cafd4887882984530bc57866e40aaf1ab029ab2d74becad0c27/wr-profiles-3.0.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "1242e1234f11e868757c789bc1a9edb4", "sha256": "f1eedd2113e311ce1649b1e97642ec7bd782ed2330389ea35fd0bbd997613039"}, "downloads": -1, "filename": "wr-profiles-4.0.0.tar.gz", "has_sig": false, "md5_digest": "1242e1234f11e868757c789bc1a9edb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14225, "upload_time": "2018-09-08T13:21:30", "upload_time_iso_8601": "2018-09-08T13:21:30.888709Z", "url": "https://files.pythonhosted.org/packages/67/21/57821dbc2087010b6172ae5ea2d0b4d4f6167fc19da2a17e96decf4097d2/wr-profiles-4.0.0.tar.gz", "yanked": false}], "4.1.0": [{"comment_text": "", "digests": {"md5": "d551295ce788cca61c6f86f7b3adebef", "sha256": "15e38bb9f77305f604f5334a306d8e708a315950e3b043c49ceb39678bc30c1a"}, "downloads": -1, "filename": "wr-profiles-4.1.0.tar.gz", "has_sig": false, "md5_digest": "d551295ce788cca61c6f86f7b3adebef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16265, "upload_time": "2018-09-29T14:35:51", "upload_time_iso_8601": "2018-09-29T14:35:51.986861Z", "url": "https://files.pythonhosted.org/packages/c4/55/f70cf5847f993abfa1df55e0dc4a0e6993935b21280a388c96dea5e4d300/wr-profiles-4.1.0.tar.gz", "yanked": false}], "4.1.1": [{"comment_text": "", "digests": {"md5": "2235d96bc110f28286f1787d34039c0d", "sha256": "7372b995b1684952025f6ca15f68a4925c83bbc7de67267bca23f8aaa2642f1b"}, "downloads": -1, "filename": "wr-profiles-4.1.1.tar.gz", "has_sig": false, "md5_digest": "2235d96bc110f28286f1787d34039c0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16271, "upload_time": "2018-09-29T14:56:20", "upload_time_iso_8601": "2018-09-29T14:56:20.515807Z", "url": "https://files.pythonhosted.org/packages/b4/8b/ab38ab17a49ee9e1a96022196c676c07d29705c6e11c74c180232e56fd97/wr-profiles-4.1.1.tar.gz", "yanked": false}], "4.2.0": [{"comment_text": "", "digests": {"md5": "2809011d1bfd3822a128d6b19bb36549", "sha256": "2b315cbd79dcad5383d1337e8334db682278cedc5d7acb6e9006cd2c92acac29"}, "downloads": -1, "filename": "wr-profiles-4.2.0.tar.gz", "has_sig": false, "md5_digest": "2809011d1bfd3822a128d6b19bb36549", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17281, "upload_time": "2018-11-04T10:19:11", "upload_time_iso_8601": "2018-11-04T10:19:11.947828Z", "url": "https://files.pythonhosted.org/packages/ca/eb/8fe4ef683c1ca10a531786e8ea5783a32f5d4ad80c95db7d4f83a0c98096/wr-profiles-4.2.0.tar.gz", "yanked": false}], "4.2.1": [{"comment_text": "", "digests": {"md5": "e8c8af76e183d6d94fe19335f53e2728", "sha256": "18be7ec6ac7aece69e65a98b429dc93406fe99b8fbcae19197c3afbc48257140"}, "downloads": -1, "filename": "wr-profiles-4.2.1.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "e8c8af76e183d6d94fe19335f53e2728", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15522, "upload_time": "2018-11-05T11:55:20", "upload_time_iso_8601": "2018-11-05T11:55:20.694245Z", "url": "https://files.pythonhosted.org/packages/07/81/90b6d64aab0279d528bd4688a77131f38b8a76692174a4bd211c455dcb89/wr-profiles-4.2.1.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "1612076bc14e08627296c6f96cd55609", "sha256": "40167b05c757042e7693a647aa7de12dfe01715916961634c351c1a38f5a9074"}, "downloads": -1, "filename": "wr_profiles-4.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1612076bc14e08627296c6f96cd55609", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9734, "upload_time": "2018-11-05T11:55:19", "upload_time_iso_8601": "2018-11-05T11:55:19.390819Z", "url": "https://files.pythonhosted.org/packages/db/97/044a5e3ee3f49266b9768f26c34a8d951f30b5553b5a28e0b03e6af9c1f8/wr_profiles-4.2.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e8c8af76e183d6d94fe19335f53e2728", "sha256": "18be7ec6ac7aece69e65a98b429dc93406fe99b8fbcae19197c3afbc48257140"}, "downloads": -1, "filename": "wr-profiles-4.2.1.macosx-10.13-x86_64.tar.gz", "has_sig": false, "md5_digest": "e8c8af76e183d6d94fe19335f53e2728", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15522, "upload_time": "2018-11-05T11:55:20", "upload_time_iso_8601": "2018-11-05T11:55:20.694245Z", "url": "https://files.pythonhosted.org/packages/07/81/90b6d64aab0279d528bd4688a77131f38b8a76692174a4bd211c455dcb89/wr-profiles-4.2.1.macosx-10.13-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "1612076bc14e08627296c6f96cd55609", "sha256": "40167b05c757042e7693a647aa7de12dfe01715916961634c351c1a38f5a9074"}, "downloads": -1, "filename": "wr_profiles-4.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1612076bc14e08627296c6f96cd55609", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9734, "upload_time": "2018-11-05T11:55:19", "upload_time_iso_8601": "2018-11-05T11:55:19.390819Z", "url": "https://files.pythonhosted.org/packages/db/97/044a5e3ee3f49266b9768f26c34a8d951f30b5553b5a28e0b03e6af9c1f8/wr_profiles-4.2.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:27:12 2020"}