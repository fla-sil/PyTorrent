{"info": {"author": "Nico Schl\u00f6mer", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics", "Topic :: Scientific/Engineering :: Visualization"], "description": "<p align=\"center\">\n  <a href=\"https://github.com/nschloe/pygalmesh\"><img alt=\"pygalmesh\" src=\"https://nschloe.github.io/pygalmesh/pygalmesh-logo.svg\" width=\"60%\"></a>\n  <p align=\"center\">Create high-quality 3D meshes with ease.</p>\n</p>\n\n[![CircleCI](https://img.shields.io/circleci/project/github/nschloe/pygalmesh/master.svg?style=flat-square)](https://circleci.com/gh/nschloe/pygalmesh/tree/master)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/psf/black)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/pygalmesh.svg?style=flat-square)](https://pypi.org/pypi/pygalmesh/)\n[![PyPi Version](https://img.shields.io/pypi/v/pygalmesh.svg?style=flat-square)](https://pypi.org/project/pygalmesh)\n[![Debian CI](https://badges.debian.net/badges/debian/testing/python3-pygalmesh/version.svg?style=flat-square)](https://tracker.debian.org/pkg/python3-pygalmesh)\n[![GitHub stars](https://img.shields.io/github/stars/nschloe/pygalmesh.svg?style=flat-square&label=Stars&logo=github)](https://github.com/nschloe/pygalmesh)\n[![PyPi downloads](https://img.shields.io/pypi/dm/pygalmesh.svg?style=flat-square)](https://pypistats.org/packages/pygalmesh)\n[![Slack](https://img.shields.io/static/v1?logo=slack&label=chat&message=on%20slack&color=4a154b&style=flat-square)](https://join.slack.com/t/nschloe/shared_invite/zt-cofhrwm8-BgdrXAtVkOjnDmADROKD7A\n)\n\npygalmesh is a Python frontend to [CGAL](https://www.cgal.org/)'s [3D mesh generation\ncapabilities](https://doc.cgal.org/latest/Mesh_3/index.html).\npygalmesh makes it easy to create high-quality 3D volume meshes, periodic volume meshes,\nand surface meshes.\n\n### Background\n\nCGAL offers two different approaches for mesh generation:\n\n1. Meshes defined implicitly by level sets of functions.\n2. Meshes defined by a set of bounding planes.\n\npygalmesh provides a front-end to the first approach, which has the following advantages\nand disadvantages:\n\n* All boundary points are guaranteed to be in the level set within any specified\n  residual. This results in smooth curved surfaces.\n* Sharp intersections of subdomains (e.g., in unions or differences of sets) need to be\n  specified manually (via feature edges, see below), which can be tedious.\n\nOn the other hand, the bounding-plane approach (realized by\n[mshr](https://bitbucket.org/fenics-project/mshr)), has the following properties:\n\n* Smooth, curved domains are approximated by a set of bounding planes, resulting in more\n  of less visible edges.\n* Intersections of domains can be computed automatically, so domain unions etc.  have\n  sharp edges where they belong.\n\nSee [here](https://github.com/nschloe/awesome-scientific-computing#meshing) for other\nmesh generation tools.\n\n### Examples\n\n#### A simple ball\n<img src=\"https://nschloe.github.io/pygalmesh/ball.png\" width=\"30%\">\n\n```python\nimport pygalmesh\n\ns = pygalmesh.Ball([0, 0, 0], 1.0)\nmesh = pygalmesh.generate_mesh(s, cell_size=0.2)\n\n# mesh.points, mesh.cells, ...\n```\nYou can write the mesh using [meshio](https://github.com/nschloe/meshio), e.g.,\n```python\nimport meshio\nmeshio.write(\"out.vtk\", mesh)\n```\nThe mesh generation comes with many more options, described\n[here](https://doc.cgal.org/latest/Mesh_3/). Try, for example,\n```python\nmesh = pygalmesh.generate_mesh(\n    s,\n    cell_size=0.2,\n    edge_size=0.1,\n    odt=True,\n    lloyd=True,\n    verbose=False\n)\n```\n\n#### Other primitive shapes\n<img src=\"https://nschloe.github.io/pygalmesh/tetra.png\" width=\"30%\">\n\npygalmesh provides out-of-the-box support for balls, cuboids, ellipsoids, tori, cones,\ncylinders, and tetrahedra. Try for example\n```python\nimport pygalmesh\n\ns0 = pygalmesh.Tetrahedron(\n    [0.0, 0.0, 0.0],\n    [1.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0],\n    [0.0, 0.0, 1.0]\n)\nmesh = pygalmesh.generate_mesh(s0, cell_size=0.1, edge_size=0.1)\n```\n\n#### Domain combinations\n<img src=\"https://nschloe.github.io/pygalmesh/ball-difference.png\" width=\"30%\">\n\nSupported are unions, intersections, and differences of all domains. As mentioned above,\nhowever, the sharp intersections between two domains are not automatically handled. Try\nfor example\n```python\nimport pygalmesh\n\nradius = 1.0\ndisplacement = 0.5\ns0 = pygalmesh.Ball([displacement, 0, 0], radius)\ns1 = pygalmesh.Ball([-displacement, 0, 0], radius)\nu = pygalmesh.Difference(s0, s1)\n```\nTo sharpen the intersection circle, add it as a feature edge polygon line, e.g.,\n```python\na = numpy.sqrt(radius**2 - displacement**2)\nedge_size = 0.15\nn = int(2*numpy.pi*a / edge_size)\ncirc = [\n    [\n        0.0,\n        a * numpy.cos(i * 2*numpy.pi / n),\n        a * numpy.sin(i * 2*numpy.pi / n)\n    ] for i in range(n)\n    ]\ncirc.append(circ[0])\n\nmesh = pygalmesh.generate_mesh(\n    u,\n    feature_edges=[circ],\n    cell_size=0.15,\n    edge_size=edge_size,\n    facet_angle=25,\n    facet_size=0.15,\n    cell_radius_edge_ratio=2.0\n)\n```\nNote that the length of the polygon legs are kept in sync with the `edge_size` of the\nmesh generation. This makes sure that it fits in nicely with the rest of the mesh.\n\n#### Domain deformations\n<img src=\"https://nschloe.github.io/pygalmesh/egg.png\" width=\"30%\">\n\nYou can of course translate, rotate, scale, and stretch any domain. Try, for example,\n```python\nimport pygalmesh\n\ns = pygalmesh.Stretch(\n    pygalmesh.Ball([0, 0, 0], 1.0),\n    [1.0, 2.0, 0.0]\n)\n\nmesh = pygalmesh.generate_mesh(s, cell_size=0.1)\n```\n\n#### Extrusion of 2D polygons\n<img src=\"https://nschloe.github.io/pygalmesh/triangle-rotated.png\" width=\"30%\">\n\npygalmesh lets you extrude any polygon into a 3D body. It even supports rotation\nalongside!\n```python\nimport pygalmesh\n\np = pygalmesh.Polygon2D([[-0.5, -0.3], [0.5, -0.3], [0.0, 0.5]])\nedge_size = 0.1\ndomain = pygalmesh.Extrude(\n    p,\n    [0.0, 0.0, 1.0],\n    0.5 * 3.14159265359,\n    edge_size\n)\nmesh = pygalmesh.generate_mesh(\n    domain,\n    cell_size=0.1,\n    edge_size=edge_size,\n    verbose=False\n)\n```\nFeature edges are automatically preserved here, which is why an edge length needs to be\ngiven to `pygalmesh.Extrude`.\n\n#### Rotation bodies\n<img src=\"https://nschloe.github.io/pygalmesh/circle-rotate-extr.png\" width=\"30%\">\n\nPolygons in the x-z-plane can also be rotated around the z-axis to yield a rotation\nbody.\n```python\nimport pygalmesh\n\np = pygalmesh.Polygon2D([[0.5, -0.3], [1.5, -0.3], [1.0, 0.5]])\nedge_size = 0.1\ndomain = pygalmesh.RingExtrude(p, edge_size)\nmesh = pygalmesh.generate_mesh(\n    domain,\n    cell_size=0.1,\n    edge_size=edge_size,\n    verbose=False\n)\n```\n\n#### Your own custom level set function\n<img src=\"https://nschloe.github.io/pygalmesh/heart.png\" width=\"30%\">\n\nIf all of the variety is not enough for you, you can define your own custom level set\nfunction. You simply need to subclass `pygalmesh.DomainBase` and specify a function,\ne.g.,\n```python\nimport pygalmesh\nclass Heart(pygalmesh.DomainBase):\n    def __init__(self):\n        super().__init__()\n\n    def eval(self, x):\n        return (x[0]**2 + 9.0/4.0 * x[1]**2 + x[2]**2 - 1)**3 \\\n            - x[0]**2 * x[2]**3 - 9.0/80.0 * x[1]**2 * x[2]**3\n\n    def get_bounding_sphere_squared_radius(self):\n        return 10.0\n\nd = Heart()\nmesh = pygalmesh.generate_mesh(d, cell_size=0.1)\n```\nNote that you need to specify the square of a bounding sphere radius, used as an input\nto CGAL's mesh generator.\n\n\n#### Local refinement\n<img src=\"https://nschloe.github.io/pygalmesh/ball-local-refinement.png\" width=\"30%\">\n\nIf you want to have local refinement, you can use\n`generate_with_sizing_field`. It works just like `generate_mesh` except that it takes a\n`SizingFieldBase` object as `cell_size`.\n```python\n# define a cell_size function\nclass Field(pygalmesh.SizingFieldBase):\n    def eval(self, x):\n        return abs(numpy.sqrt(numpy.dot(x, x)) - 0.5) / 5 + 0.025\n\nmesh = pygalmesh.generate_with_sizing_field(\n    pygalmesh.Ball([0.0, 0.0, 0.0], 1.0),\n    facet_angle=30,\n    facet_size=0.1,\n    facet_distance=0.025,\n    cell_radius_edge_ratio=2,\n    cell_size=Field(),\n)\n```\n\n#### Surface meshes\n\nIf you're only after the surface of a body, pygalmesh has `generate_surface_mesh` for\nyou. It offers fewer options (obviously, `cell_size` is gone), but otherwise works the\nsame way:\n```python\nimport pygalmesh\n\ns = pygalmesh.Ball([0, 0, 0], 1.0)\nmesh = pygalmesh.generate_surface_mesh(\n    s,\n    angle_bound=30,\n    radius_bound=0.1,\n    distance_bound=0.1\n)\n```\nRefer to [CGAL's\ndocumention](https://doc.cgal.org/latest/Surface_mesher/index.html) for the\noptions.\n\n#### Periodic volume meshes\n<img src=\"https://nschloe.github.io/pygalmesh/periodic.png\" width=\"30%\">\n\npygalmesh also interfaces CGAL's [3D periodic\nmesh generation](https://doc.cgal.org/latest/Periodic_3_mesh_3/index.html). Besides a\ndomain, one needs to specify a bounding box, and optionally the number of copies in the\noutput (1, 2, 4, or 8). Example:\n```python\nimport pygalmesh\n\nclass Schwarz(pygalmesh.DomainBase):\n    def __init__(self):\n        super().__init__()\n\n    def eval(self, x):\n        x2 = numpy.cos(x[0] * 2 * numpy.pi)\n        y2 = numpy.cos(x[1] * 2 * numpy.pi)\n        z2 = numpy.cos(x[2] * 2 * numpy.pi)\n        return x2 + y2 + z2\n\nmesh = pygalmesh.generate_periodic_mesh(\n    Schwarz(),\n    [0, 0, 0, 1, 1, 1],\n    cell_size=0.05,\n    facet_angle=30,\n    facet_size=0.05,\n    facet_distance=0.025,\n    cell_radius_edge_ratio=2.0,\n    number_of_copies_in_output=4,\n    # odt=True,\n    # lloyd=True,\n    verbose=False\n)\n```\n\n#### Volume meshes from surface meshes\n<img src=\"https://nschloe.github.io/pygalmesh/elephant.png\" width=\"30%\">\n\nIf you have a surface mesh at hand (like\n[elephant.vtu](http://nschloe.github.io/pygalmesh/elephant.vtu)), pygalmesh generates a\nvolume mesh on the command line via\n```\npygalmesh-volume-from-surface elephant.vtu out.vtk --cell-size 1.0 --odt\n```\n(See `pygalmesh-volume-from-surface -h` for all options.)\n\nIn Python, do\n```python\nimport pygalmesh\n\nmesh = pygalmesh.generate_volume_mesh_from_surface_mesh(\n    \"elephant.vtu\",\n    facet_angle=25.0,\n    facet_size=0.15,\n    facet_distance=0.008,\n    cell_radius_edge_ratio=3.0,\n    verbose=False\n)\n```\n\n#### Meshes from INR voxel files\n<img src=\"https://nschloe.github.io/pygalmesh/liver.png\" width=\"30%\">\n\nIt is also possible to generate meshes from INR voxel files, e.g.,\n[skull_2.9.inr](https://github.com/nschloe/pygalmesh/raw/gh-pages/skull_2.9.inr)\neither on the command line\n```\npygalmesh-from-inr skull_2.9.inr out.vtu --cell-size 5.0 --odt\n```\n(see `pygalmesh-from-inr -h` for all options) or from Python\n```python\nimport pygalmesh\n\nmesh = pygalmesh.generate_from_inr(\n    \"skull_2.9.inr\",\n    cell_size=5.0,\n    verbose=False,\n)\n```\n\n## Meshes from numpy array representing 3D images\n<img src=\"https://nschloe.github.io/pygalmesh/phantom.png\" width=\"30%\">\n\npygalmesh can help generating unstructed meshes from 3D numpy arrays.\n\nThe code below creates a mesh from the 3D breast phantom from [Lou et al](http://biomedicaloptics.spiedigitallibrary.org/article.aspx?articleid=2600985) available [here](https://wustl.app.box.com/s/rqivtin0xcofjwlkz43acou8jknsbfx8/file/127108205145).\nThe phantom comprises four tissue types (background, fat, fibrograndular, skin, vascular tissues). The generated mesh conforms to tissues interfaces.\n\n```python\nimport pygalmesh\nimport meshio\n\nNx = 722\nNy = 411\nNz = 284\nh = [0.2]*3\n    \nwith open('MergedPhantom.DAT', 'rb') as fid:\n    vol = np.fromfile(fid, dtype=np.uint8)\n\nvol = vol.reshape((Nx,Ny,Nz))\n\n       \nmesh = pygalmesh.generate_from_array(vol, h, facet_distance=.2, cell_size=1.)\nmeshio.write('breast.vtk',mesh)\n```\n\nIn addition, we can specify different mesh sizes for each tissue type. The code below sets the mesh size to  *1 mm* for the skin tissue (label `4`), *0.5 mm* for the vascular tissue (label `5`), and *2 mm* for all other tissues (`default`).\n\n```python\ncell_sizes_map = {'default': 2., 4: 1., 5: .5}\nmesh = pygalmesh.generate_from_array_with_subdomain_sizing(\n           vol, h, facet_distance=.2, cell_sizes_map=cell_sizes_map)\nmeshio.write('breast_adapted.vtk',mesh)\n```\n\n#### Surface remeshing\n<img src=\"https://nschloe.github.io/pygalmesh/lion-head0.png\" width=\"100%\"> | <img src=\"https://nschloe.github.io/pygalmesh/lion-head1.png\" width=\"100%\">\n:---:|:---:|\n\npygalmesh can help remeshing an existing surface mesh, e.g.,\n[`lion-head.off`](https://github.com/nschloe/pygalmesh/raw/gh-pages/lion-head.off). On\nthe command line, use\n\n```\npygalmesh-remesh-surface lion-head.off out.vtu -e 0.025 -a 25 -s 0.1 -d 0.001\n```\n(see `pygalmesh-remesh-surface -h` for all options) or from Python\n```python\nimport pygalmesh\n\nmesh = pygalmesh.remesh_surface(\n    \"lion-head.off\",\n    edge_size=0.025,\n    facet_angle=25,\n    facet_size=0.1,\n    facet_distance=0.001,\n    verbose=False,\n)\n```\n\n### Installation\n\nFor installation, pygalmesh needs [CGAL](https://www.cgal.org/) and\n[Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page) installed on your\nsystem. They are typically available on your Linux distribution, e.g., on\nUbuntu\n```\nsudo apt install libcgal-dev libeigen3-dev\n```\nAfter that, pygalmesh can be [installed from the Python Package\nIndex](https://pypi.org/project/pygalmesh/), so with\n```\npip install -U pygalmesh\n```\nyou can install/upgrade.\n\n[meshio](https://github.com/nschloe/meshio) (`pip install meshio`)\ncan be helpful in processing the meshes.\n\n#### Manual installation\n\nFor manual installation (if you're a developer or just really keen on getting\nthe bleeding edge version of pygalmesh), there are two possibilities:\n\n * Get the sources, type `python3 setup.py install`. This does the trick\n   most the time.\n * As a fallback, there's a CMake-based installation. Simply go `cmake\n   /path/to/sources/` and `make`.\n\n### Testing\n\nTo run the pygalmesh unit tests, check out this repository and type\n```\npytest\n```\n\n### License\n\npygalmesh is published under the [GPLv3 license](https://www.gnu.org/licenses/gpl-3.0.en.html).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nschloe/pygalmesh", "keywords": "", "license": "GPL-3.0-or-later", "maintainer": "", "maintainer_email": "", "name": "pygalmesh", "package_url": "https://pypi.org/project/pygalmesh/", "platform": "", "project_url": "https://pypi.org/project/pygalmesh/", "project_urls": {"Homepage": "https://github.com/nschloe/pygalmesh"}, "release_url": "https://pypi.org/project/pygalmesh/0.6.6/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Python frontend to CGAL's 3D mesh generation capabilities", "version": "0.6.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <a href=\"https://github.com/nschloe/pygalmesh\" rel=\"nofollow\"><img alt=\"pygalmesh\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b9232912587c1f556e962832bc430231d0a7ba7f/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f707967616c6d6573682d6c6f676f2e737667\" width=\"60%\"></a>\n  </p><p align=\"center\">Create high-quality 3D meshes with ease.</p>\n<p></p>\n<p><a href=\"https://circleci.com/gh/nschloe/pygalmesh/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed20cadcf0d1d7dd0cb9e65ec2afc239d39868b6/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f6e7363686c6f652f707967616c6d6573682f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c326c58e924b9f3508f32a8ac6b3ee91f40b090/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.org/pypi/pygalmesh/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4548c008c6b729fc5cbf19f248e892bf84f87d13/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707967616c6d6573682e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.org/project/pygalmesh\" rel=\"nofollow\"><img alt=\"PyPi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b70d4f07f3c9f6113b6055cb7de417ef421b54a2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707967616c6d6573682e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://tracker.debian.org/pkg/python3-pygalmesh\" rel=\"nofollow\"><img alt=\"Debian CI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b02509c1f170a6ad5160fb6ddb65ccda69e8eb84/68747470733a2f2f6261646765732e64656269616e2e6e65742f6261646765732f64656269616e2f74657374696e672f707974686f6e332d707967616c6d6573682f76657273696f6e2e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/nschloe/pygalmesh\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a400acb5e2a09b85c693c4d06f955dc6a4ca8f4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6e7363686c6f652f707967616c6d6573682e7376673f7374796c653d666c61742d737175617265266c6162656c3d5374617273266c6f676f3d676974687562\"></a>\n<a href=\"https://pypistats.org/packages/pygalmesh\" rel=\"nofollow\"><img alt=\"PyPi downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3261f8ed2ff4649adc6550c72bc93e6d11bf35d0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f707967616c6d6573682e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://join.slack.com/t/nschloe/shared_invite/zt-cofhrwm8-BgdrXAtVkOjnDmADROKD7A\" rel=\"nofollow\"><img alt=\"Slack\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4528fa31ea57b335f69c277af747147e8d150484/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6f676f3d736c61636b266c6162656c3d63686174266d6573736167653d6f6e253230736c61636b26636f6c6f723d346131353462267374796c653d666c61742d737175617265\"></a></p>\n<p>pygalmesh is a Python frontend to <a href=\"https://www.cgal.org/\" rel=\"nofollow\">CGAL</a>'s <a href=\"https://doc.cgal.org/latest/Mesh_3/index.html\" rel=\"nofollow\">3D mesh generation\ncapabilities</a>.\npygalmesh makes it easy to create high-quality 3D volume meshes, periodic volume meshes,\nand surface meshes.</p>\n<h3>Background</h3>\n<p>CGAL offers two different approaches for mesh generation:</p>\n<ol>\n<li>Meshes defined implicitly by level sets of functions.</li>\n<li>Meshes defined by a set of bounding planes.</li>\n</ol>\n<p>pygalmesh provides a front-end to the first approach, which has the following advantages\nand disadvantages:</p>\n<ul>\n<li>All boundary points are guaranteed to be in the level set within any specified\nresidual. This results in smooth curved surfaces.</li>\n<li>Sharp intersections of subdomains (e.g., in unions or differences of sets) need to be\nspecified manually (via feature edges, see below), which can be tedious.</li>\n</ul>\n<p>On the other hand, the bounding-plane approach (realized by\n<a href=\"https://bitbucket.org/fenics-project/mshr\" rel=\"nofollow\">mshr</a>), has the following properties:</p>\n<ul>\n<li>Smooth, curved domains are approximated by a set of bounding planes, resulting in more\nof less visible edges.</li>\n<li>Intersections of domains can be computed automatically, so domain unions etc.  have\nsharp edges where they belong.</li>\n</ul>\n<p>See <a href=\"https://github.com/nschloe/awesome-scientific-computing#meshing\" rel=\"nofollow\">here</a> for other\nmesh generation tools.</p>\n<h3>Examples</h3>\n<h4>A simple ball</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d938c5314da3a31c3f610c8df5f8db33b620498/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f62616c6c2e706e67\" width=\"30%\">\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Ball</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_mesh</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># mesh.points, mesh.cells, ...</span>\n</pre>\n<p>You can write the mesh using <a href=\"https://github.com/nschloe/meshio\" rel=\"nofollow\">meshio</a>, e.g.,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">meshio</span>\n<span class=\"n\">meshio</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"out.vtk\"</span><span class=\"p\">,</span> <span class=\"n\">mesh</span><span class=\"p\">)</span>\n</pre>\n<p>The mesh generation comes with many more options, described\n<a href=\"https://doc.cgal.org/latest/Mesh_3/\" rel=\"nofollow\">here</a>. Try, for example,</p>\n<pre><span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_mesh</span><span class=\"p\">(</span>\n    <span class=\"n\">s</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"n\">odt</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">lloyd</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Other primitive shapes</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02615eb3bb2e31933c391829bf9f1f69494095c3/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f74657472612e706e67\" width=\"30%\">\n<p>pygalmesh provides out-of-the-box support for balls, cuboids, ellipsoids, tori, cones,\ncylinders, and tetrahedra. Try for example</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Tetrahedron</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_mesh</span><span class=\"p\">(</span><span class=\"n\">s0</span><span class=\"p\">,</span> <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">edge_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n</pre>\n<h4>Domain combinations</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57d053650a4ef62348efb76b7e29a2e3b65aaedb/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f62616c6c2d646966666572656e63652e706e67\" width=\"30%\">\n<p>Supported are unions, intersections, and differences of all domains. As mentioned above,\nhowever, the sharp intersections between two domains are not automatically handled. Try\nfor example</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n<span class=\"n\">displacement</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Ball</span><span class=\"p\">([</span><span class=\"n\">displacement</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">radius</span><span class=\"p\">)</span>\n<span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Ball</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"n\">displacement</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">radius</span><span class=\"p\">)</span>\n<span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Difference</span><span class=\"p\">(</span><span class=\"n\">s0</span><span class=\"p\">,</span> <span class=\"n\">s1</span><span class=\"p\">)</span>\n</pre>\n<p>To sharpen the intersection circle, add it as a feature edge polygon line, e.g.,</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">displacement</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">edge_size</span> <span class=\"o\">=</span> <span class=\"mf\">0.15</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">a</span> <span class=\"o\">/</span> <span class=\"n\">edge_size</span><span class=\"p\">)</span>\n<span class=\"n\">circ</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">n</span><span class=\"p\">),</span>\n        <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">/</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"n\">circ</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">circ</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_mesh</span><span class=\"p\">(</span>\n    <span class=\"n\">u</span><span class=\"p\">,</span>\n    <span class=\"n\">feature_edges</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">circ</span><span class=\"p\">],</span>\n    <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.15</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_size</span><span class=\"o\">=</span><span class=\"n\">edge_size</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_size</span><span class=\"o\">=</span><span class=\"mf\">0.15</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_radius_edge_ratio</span><span class=\"o\">=</span><span class=\"mf\">2.0</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Note that the length of the polygon legs are kept in sync with the <code>edge_size</code> of the\nmesh generation. This makes sure that it fits in nicely with the rest of the mesh.</p>\n<h4>Domain deformations</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b991700063b5e71c73ecabe99a0eee8110e6809/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f6567672e706e67\" width=\"30%\">\n<p>You can of course translate, rotate, scale, and stretch any domain. Try, for example,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Stretch</span><span class=\"p\">(</span>\n    <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Ball</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mf\">1.0</span><span class=\"p\">),</span>\n    <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_mesh</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n</pre>\n<h4>Extrusion of 2D polygons</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f075afd34b4f28ac132fc2c609393cd356b2bdf/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f747269616e676c652d726f74617465642e706e67\" width=\"30%\">\n<p>pygalmesh lets you extrude any polygon into a 3D body. It even supports rotation\nalongside!</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Polygon2D</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]])</span>\n<span class=\"n\">edge_size</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Extrude</span><span class=\"p\">(</span>\n    <span class=\"n\">p</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span>\n    <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"mf\">3.14159265359</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_size</span>\n<span class=\"p\">)</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_mesh</span><span class=\"p\">(</span>\n    <span class=\"n\">domain</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_size</span><span class=\"o\">=</span><span class=\"n\">edge_size</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Feature edges are automatically preserved here, which is why an edge length needs to be\ngiven to <code>pygalmesh.Extrude</code>.</p>\n<h4>Rotation bodies</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53e15a316d178e3e2af29517de21e731be23fef0/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f636972636c652d726f746174652d657874722e706e67\" width=\"30%\">\n<p>Polygons in the x-z-plane can also be rotated around the z-axis to yield a rotation\nbody.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Polygon2D</span><span class=\"p\">([[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">]])</span>\n<span class=\"n\">edge_size</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">RingExtrude</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">edge_size</span><span class=\"p\">)</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_mesh</span><span class=\"p\">(</span>\n    <span class=\"n\">domain</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_size</span><span class=\"o\">=</span><span class=\"n\">edge_size</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Your own custom level set function</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/330ac3bc4fa478c0cc7912a9130aff5ee88e3611/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f68656172742e706e67\" width=\"30%\">\n<p>If all of the variety is not enough for you, you can define your own custom level set\nfunction. You simply need to subclass <code>pygalmesh.DomainBase</code> and specify a function,\ne.g.,</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n<span class=\"k\">class</span> <span class=\"nc\">Heart</span><span class=\"p\">(</span><span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">DomainBase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mf\">9.0</span><span class=\"o\">/</span><span class=\"mf\">4.0</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">3</span> \\\n            <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mf\">9.0</span><span class=\"o\">/</span><span class=\"mf\">80.0</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">**</span><span class=\"mi\">3</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_bounding_sphere_squared_radius</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mf\">10.0</span>\n\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Heart</span><span class=\"p\">()</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_mesh</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n</pre>\n<p>Note that you need to specify the square of a bounding sphere radius, used as an input\nto CGAL's mesh generator.</p>\n<h4>Local refinement</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c0e371f26f70ed58cf7a2b65175c7f6e79591e4/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f62616c6c2d6c6f63616c2d726566696e656d656e742e706e67\" width=\"30%\">\n<p>If you want to have local refinement, you can use\n<code>generate_with_sizing_field</code>. It works just like <code>generate_mesh</code> except that it takes a\n<code>SizingFieldBase</code> object as <code>cell_size</code>.</p>\n<pre><span class=\"c1\"># define a cell_size function</span>\n<span class=\"k\">class</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">SizingFieldBase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mf\">0.025</span>\n\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_with_sizing_field</span><span class=\"p\">(</span>\n    <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Ball</span><span class=\"p\">([</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">],</span> <span class=\"mf\">1.0</span><span class=\"p\">),</span>\n    <span class=\"n\">facet_angle</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_distance</span><span class=\"o\">=</span><span class=\"mf\">0.025</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_radius_edge_ratio</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Surface meshes</h4>\n<p>If you're only after the surface of a body, pygalmesh has <code>generate_surface_mesh</code> for\nyou. It offers fewer options (obviously, <code>cell_size</code> is gone), but otherwise works the\nsame way:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">Ball</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_surface_mesh</span><span class=\"p\">(</span>\n    <span class=\"n\">s</span><span class=\"p\">,</span>\n    <span class=\"n\">angle_bound</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">radius_bound</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"n\">distance_bound</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Refer to <a href=\"https://doc.cgal.org/latest/Surface_mesher/index.html\" rel=\"nofollow\">CGAL's\ndocumention</a> for the\noptions.</p>\n<h4>Periodic volume meshes</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/adad9486a17ddf241b0ae2ade19dc00097e0ef48/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f706572696f6469632e706e67\" width=\"30%\">\n<p>pygalmesh also interfaces CGAL's <a href=\"https://doc.cgal.org/latest/Periodic_3_mesh_3/index.html\" rel=\"nofollow\">3D periodic\nmesh generation</a>. Besides a\ndomain, one needs to specify a bounding box, and optionally the number of copies in the\noutput (1, 2, 4, or 8). Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Schwarz</span><span class=\"p\">(</span><span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">DomainBase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">eval</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n        <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n        <span class=\"n\">z2</span> <span class=\"o\">=</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">x2</span> <span class=\"o\">+</span> <span class=\"n\">y2</span> <span class=\"o\">+</span> <span class=\"n\">z2</span>\n\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_periodic_mesh</span><span class=\"p\">(</span>\n    <span class=\"n\">Schwarz</span><span class=\"p\">(),</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_angle</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_size</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_distance</span><span class=\"o\">=</span><span class=\"mf\">0.025</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_radius_edge_ratio</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span>\n    <span class=\"n\">number_of_copies_in_output</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"c1\"># odt=True,</span>\n    <span class=\"c1\"># lloyd=True,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Volume meshes from surface meshes</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b76fe325997c286b45086081c2445542f0fd54d9/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f656c657068616e742e706e67\" width=\"30%\">\n<p>If you have a surface mesh at hand (like\n<a href=\"http://nschloe.github.io/pygalmesh/elephant.vtu\" rel=\"nofollow\">elephant.vtu</a>), pygalmesh generates a\nvolume mesh on the command line via</p>\n<pre><code>pygalmesh-volume-from-surface elephant.vtu out.vtk --cell-size 1.0 --odt\n</code></pre>\n<p>(See <code>pygalmesh-volume-from-surface -h</code> for all options.)</p>\n<p>In Python, do</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_volume_mesh_from_surface_mesh</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"elephant.vtu\"</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_angle</span><span class=\"o\">=</span><span class=\"mf\">25.0</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_size</span><span class=\"o\">=</span><span class=\"mf\">0.15</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_distance</span><span class=\"o\">=</span><span class=\"mf\">0.008</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_radius_edge_ratio</span><span class=\"o\">=</span><span class=\"mf\">3.0</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<h4>Meshes from INR voxel files</h4>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1256749221d55fb4c18dac087a9350af73e5c9e5/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f6c697665722e706e67\" width=\"30%\">\n<p>It is also possible to generate meshes from INR voxel files, e.g.,\n<a href=\"https://github.com/nschloe/pygalmesh/raw/gh-pages/skull_2.9.inr\" rel=\"nofollow\">skull_2.9.inr</a>\neither on the command line</p>\n<pre><code>pygalmesh-from-inr skull_2.9.inr out.vtu --cell-size 5.0 --odt\n</code></pre>\n<p>(see <code>pygalmesh-from-inr -h</code> for all options) or from Python</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_from_inr</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"skull_2.9.inr\"</span><span class=\"p\">,</span>\n    <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">5.0</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Meshes from numpy array representing 3D images</h2>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/047770ad2cd842585bfc889419d73afd0486332f/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f7068616e746f6d2e706e67\" width=\"30%\">\n<p>pygalmesh can help generating unstructed meshes from 3D numpy arrays.</p>\n<p>The code below creates a mesh from the 3D breast phantom from <a href=\"http://biomedicaloptics.spiedigitallibrary.org/article.aspx?articleid=2600985\" rel=\"nofollow\">Lou et al</a> available <a href=\"https://wustl.app.box.com/s/rqivtin0xcofjwlkz43acou8jknsbfx8/file/127108205145\" rel=\"nofollow\">here</a>.\nThe phantom comprises four tissue types (background, fat, fibrograndular, skin, vascular tissues). The generated mesh conforms to tissues interfaces.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n<span class=\"kn\">import</span> <span class=\"nn\">meshio</span>\n\n<span class=\"n\">Nx</span> <span class=\"o\">=</span> <span class=\"mi\">722</span>\n<span class=\"n\">Ny</span> <span class=\"o\">=</span> <span class=\"mi\">411</span>\n<span class=\"n\">Nz</span> <span class=\"o\">=</span> <span class=\"mi\">284</span>\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.2</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"mi\">3</span>\n    \n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'MergedPhantom.DAT'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fid</span><span class=\"p\">:</span>\n    <span class=\"n\">vol</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">fromfile</span><span class=\"p\">(</span><span class=\"n\">fid</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n\n<span class=\"n\">vol</span> <span class=\"o\">=</span> <span class=\"n\">vol</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"n\">Nx</span><span class=\"p\">,</span><span class=\"n\">Ny</span><span class=\"p\">,</span><span class=\"n\">Nz</span><span class=\"p\">))</span>\n\n       \n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_from_array</span><span class=\"p\">(</span><span class=\"n\">vol</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">facet_distance</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cell_size</span><span class=\"o\">=</span><span class=\"mf\">1.</span><span class=\"p\">)</span>\n<span class=\"n\">meshio</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'breast.vtk'</span><span class=\"p\">,</span><span class=\"n\">mesh</span><span class=\"p\">)</span>\n</pre>\n<p>In addition, we can specify different mesh sizes for each tissue type. The code below sets the mesh size to  <em>1 mm</em> for the skin tissue (label <code>4</code>), <em>0.5 mm</em> for the vascular tissue (label <code>5</code>), and <em>2 mm</em> for all other tissues (<code>default</code>).</p>\n<pre><span class=\"n\">cell_sizes_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">generate_from_array_with_subdomain_sizing</span><span class=\"p\">(</span>\n           <span class=\"n\">vol</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">facet_distance</span><span class=\"o\">=.</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cell_sizes_map</span><span class=\"o\">=</span><span class=\"n\">cell_sizes_map</span><span class=\"p\">)</span>\n<span class=\"n\">meshio</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">'breast_adapted.vtk'</span><span class=\"p\">,</span><span class=\"n\">mesh</span><span class=\"p\">)</span>\n</pre>\n<h4>Surface remeshing</h4>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4386d8c081e0a26004cdb2add9f5e4c8b35432d/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f6c696f6e2d68656164302e706e67\" width=\"100%\"></th>\n<th align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a4cab96858b1fb2cc42a953f91869d2fab1fa3dd/68747470733a2f2f6e7363686c6f652e6769746875622e696f2f707967616c6d6573682f6c696f6e2d68656164312e706e67\" width=\"100%\"></th>\n</tr>\n</thead></table>\n<p>pygalmesh can help remeshing an existing surface mesh, e.g.,\n<a href=\"https://github.com/nschloe/pygalmesh/raw/gh-pages/lion-head.off\" rel=\"nofollow\"><code>lion-head.off</code></a>. On\nthe command line, use</p>\n<pre><code>pygalmesh-remesh-surface lion-head.off out.vtu -e 0.025 -a 25 -s 0.1 -d 0.001\n</code></pre>\n<p>(see <code>pygalmesh-remesh-surface -h</code> for all options) or from Python</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygalmesh</span>\n\n<span class=\"n\">mesh</span> <span class=\"o\">=</span> <span class=\"n\">pygalmesh</span><span class=\"o\">.</span><span class=\"n\">remesh_surface</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"lion-head.off\"</span><span class=\"p\">,</span>\n    <span class=\"n\">edge_size</span><span class=\"o\">=</span><span class=\"mf\">0.025</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_size</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n    <span class=\"n\">facet_distance</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Installation</h3>\n<p>For installation, pygalmesh needs <a href=\"https://www.cgal.org/\" rel=\"nofollow\">CGAL</a> and\n<a href=\"http://eigen.tuxfamily.org/index.php?title=Main_Page\" rel=\"nofollow\">Eigen</a> installed on your\nsystem. They are typically available on your Linux distribution, e.g., on\nUbuntu</p>\n<pre><code>sudo apt install libcgal-dev libeigen3-dev\n</code></pre>\n<p>After that, pygalmesh can be <a href=\"https://pypi.org/project/pygalmesh/\" rel=\"nofollow\">installed from the Python Package\nIndex</a>, so with</p>\n<pre><code>pip install -U pygalmesh\n</code></pre>\n<p>you can install/upgrade.</p>\n<p><a href=\"https://github.com/nschloe/meshio\" rel=\"nofollow\">meshio</a> (<code>pip install meshio</code>)\ncan be helpful in processing the meshes.</p>\n<h4>Manual installation</h4>\n<p>For manual installation (if you're a developer or just really keen on getting\nthe bleeding edge version of pygalmesh), there are two possibilities:</p>\n<ul>\n<li>Get the sources, type <code>python3 setup.py install</code>. This does the trick\nmost the time.</li>\n<li>As a fallback, there's a CMake-based installation. Simply go <code>cmake /path/to/sources/</code> and <code>make</code>.</li>\n</ul>\n<h3>Testing</h3>\n<p>To run the pygalmesh unit tests, check out this repository and type</p>\n<pre><code>pytest\n</code></pre>\n<h3>License</h3>\n<p>pygalmesh is published under the <a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\" rel=\"nofollow\">GPLv3 license</a>.</p>\n\n          </div>"}, "last_serial": 7162411, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "d2d19170724f7fc4dc0f78006647628a", "sha256": "0af933f1c168297784a8a903a5b273e527c4274c540e4bc1d246884ad21c8223"}, "downloads": -1, "filename": "pygalmesh-0.2.1.tar.gz", "has_sig": true, "md5_digest": "d2d19170724f7fc4dc0f78006647628a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22580, "upload_time": "2018-02-15T20:59:38", "upload_time_iso_8601": "2018-02-15T20:59:38.933598Z", "url": "https://files.pythonhosted.org/packages/57/f4/7edd5dab6e9f1a8a1a6145935c51f3732f86839f3496e4f03f65a829ee2d/pygalmesh-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "d9b40edead46f07f35c4cf6598515723", "sha256": "97d89f06ec0a574a85b50f3a72e4f358dfe6c3a5c207639723dcde194f8cd0ee"}, "downloads": -1, "filename": "pygalmesh-0.2.2.tar.gz", "has_sig": true, "md5_digest": "d9b40edead46f07f35c4cf6598515723", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23080, "upload_time": "2018-03-02T13:34:08", "upload_time_iso_8601": "2018-03-02T13:34:08.407471Z", "url": "https://files.pythonhosted.org/packages/88/f1/3bf5a01847983ff7737dc0c9615b82fe69feed70c59f536912577461a59f/pygalmesh-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "85990b18e388823871c6f68529b51984", "sha256": "af9f41648c7fa07e0fed45f7ebd0f514173d3861557271bfea32eab0a8fde17e"}, "downloads": -1, "filename": "pygalmesh-0.2.3.tar.gz", "has_sig": false, "md5_digest": "85990b18e388823871c6f68529b51984", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22238, "upload_time": "2018-03-28T10:00:19", "upload_time_iso_8601": "2018-03-28T10:00:19.412701Z", "url": "https://files.pythonhosted.org/packages/0c/32/00393f6b26a410520bf35128b2a9a5902d21c0c31dd0fbfb91812dc251cd/pygalmesh-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "37576f1c8a5aa49633abea16a8e26e28", "sha256": "7953ae07f729911ffee6fb6877641d08c256c34c9314876687b66b3b7f4b4d7e"}, "downloads": -1, "filename": "pygalmesh-0.2.4.tar.gz", "has_sig": false, "md5_digest": "37576f1c8a5aa49633abea16a8e26e28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21916, "upload_time": "2018-03-28T12:42:04", "upload_time_iso_8601": "2018-03-28T12:42:04.845947Z", "url": "https://files.pythonhosted.org/packages/f5/46/b711c1b55d5ca12918a5b3c148db54f6b077008bb6d70ad3dbaf4219c68c/pygalmesh-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "30a9844b9ce12c33f579fb3f326eff49", "sha256": "a138d60c2af3e18f421282353cf366d0abcefa8ac0d8e28cdccbba5629b3b119"}, "downloads": -1, "filename": "pygalmesh-0.2.5.tar.gz", "has_sig": false, "md5_digest": "30a9844b9ce12c33f579fb3f326eff49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22049, "upload_time": "2018-05-20T13:09:45", "upload_time_iso_8601": "2018-05-20T13:09:45.237811Z", "url": "https://files.pythonhosted.org/packages/3d/dd/172337d9473dc1b8779838fadf2142a0aa1275fa95155b3a95f985150714/pygalmesh-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "fbaa597bf49531c4b267c3087cbe73a2", "sha256": "4546ffe2f81e8c7c4435c694f33c28a61b5a1291fbb6d80555e531da7b456a7f"}, "downloads": -1, "filename": "pygalmesh-0.2.6.tar.gz", "has_sig": false, "md5_digest": "fbaa597bf49531c4b267c3087cbe73a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21730, "upload_time": "2018-10-08T09:15:48", "upload_time_iso_8601": "2018-10-08T09:15:48.325178Z", "url": "https://files.pythonhosted.org/packages/5d/06/17023b1d0375bfceca68e3f88c9a529081e4dd179ce8678b279898a1102e/pygalmesh-0.2.6.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e1a2002f4449ecca7188d998679dd40a", "sha256": "898b7a30553e7c3d81cc96d295b4b77ccb3e3ebb2e07c36c5117c46c84cce6f4"}, "downloads": -1, "filename": "pygalmesh-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e1a2002f4449ecca7188d998679dd40a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18622, "upload_time": "2019-03-25T11:10:43", "upload_time_iso_8601": "2019-03-25T11:10:43.904728Z", "url": "https://files.pythonhosted.org/packages/71/d9/813665ba90b00874a425092e89834ef999bec7719debca63b693fa1ec537/pygalmesh-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b6ca4fc7fbbc54584430d6e3721dbeb2", "sha256": "2baf6e530852e1293d962f2e47e78822a12c1bf60c60d819b70a8aed3cba5164"}, "downloads": -1, "filename": "pygalmesh-0.3.1.tar.gz", "has_sig": false, "md5_digest": "b6ca4fc7fbbc54584430d6e3721dbeb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20778, "upload_time": "2019-04-23T14:54:12", "upload_time_iso_8601": "2019-04-23T14:54:12.168985Z", "url": "https://files.pythonhosted.org/packages/2b/2e/798619e00ae2a2634ab226f146c24b115e53a6dafac9428a1f14672df349/pygalmesh-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "f04fcad8ce0dabfb5e642ed441a72f8e", "sha256": "377b801888aa35e026ace9c123d9bec64c7ea44aa42dcbeb7a2226aa4c981ef4"}, "downloads": -1, "filename": "pygalmesh-0.3.2.tar.gz", "has_sig": false, "md5_digest": "f04fcad8ce0dabfb5e642ed441a72f8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20845, "upload_time": "2019-04-29T08:32:46", "upload_time_iso_8601": "2019-04-29T08:32:46.658781Z", "url": "https://files.pythonhosted.org/packages/4e/8b/88cd82fcfd017d2e70325ae58cd70fe3963db22c6213fde1465c88c13947/pygalmesh-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "2861ff4390bec8786f8cfc8cd9504b56", "sha256": "8a9b7b3e9349db1629ec8c627e4b1102bf46f88ae16c2cd7458e6267fab78a03"}, "downloads": -1, "filename": "pygalmesh-0.3.3.tar.gz", "has_sig": false, "md5_digest": "2861ff4390bec8786f8cfc8cd9504b56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21768, "upload_time": "2019-05-06T07:49:30", "upload_time_iso_8601": "2019-05-06T07:49:30.932544Z", "url": "https://files.pythonhosted.org/packages/7f/a3/752e5f059e2745a9d0ee9f65a1f88de8ae6419d854b8bcd6bae38394aa4c/pygalmesh-0.3.3.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "e20bba571c351cf79b77db268b4ddffd", "sha256": "acfa0caba3f66d195f7c4a41f823535daa3bc78eafb0d7a8f74332ba10defce1"}, "downloads": -1, "filename": "pygalmesh-0.3.5.tar.gz", "has_sig": false, "md5_digest": "e20bba571c351cf79b77db268b4ddffd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22579, "upload_time": "2019-05-17T08:26:58", "upload_time_iso_8601": "2019-05-17T08:26:58.622585Z", "url": "https://files.pythonhosted.org/packages/17/5e/71285e9c6bf5d18e102eff014daf66f97f236de3041e4257b53982f18221/pygalmesh-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "3cc585bd13494859b8fe08b59d0369ad", "sha256": "a86dde7ef0bae7e8726b17a1a72459879409abeb940554a6888f95938a22d55b"}, "downloads": -1, "filename": "pygalmesh-0.3.6.tar.gz", "has_sig": false, "md5_digest": "3cc585bd13494859b8fe08b59d0369ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22617, "upload_time": "2019-07-10T17:45:42", "upload_time_iso_8601": "2019-07-10T17:45:42.070630Z", "url": "https://files.pythonhosted.org/packages/4e/13/aaa7cecd775040d95eaae6e32cb32b7b8dc6dbc08adc950c0bb5fba7bdf9/pygalmesh-0.3.6.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "e01eec7110a84eba0477ddafe3d8b5d5", "sha256": "6a51dacba362c5fa3ee2c7975500b116ad470a77d15c079d6a07a4a343878ecf"}, "downloads": -1, "filename": "pygalmesh-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e01eec7110a84eba0477ddafe3d8b5d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 23919, "upload_time": "2019-08-09T20:08:30", "upload_time_iso_8601": "2019-08-09T20:08:30.435538Z", "url": "https://files.pythonhosted.org/packages/78/75/a9c03fa76890ec2f1eab766d144493f691e846cf76e17fd17c9464dbcf7e/pygalmesh-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "387c659fb6cf856c5474a5c2f10a38a8", "sha256": "38a8a58f9ffa37e8c55930540d946c62e208d2c379ca2d4b26807782a0ad996d"}, "downloads": -1, "filename": "pygalmesh-0.5.0.tar.gz", "has_sig": false, "md5_digest": "387c659fb6cf856c5474a5c2f10a38a8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 23946, "upload_time": "2019-12-06T09:06:04", "upload_time_iso_8601": "2019-12-06T09:06:04.257416Z", "url": "https://files.pythonhosted.org/packages/a4/10/49c2b53e0511e1743d248338013a42f5587e6c8b9b8abab365bf0f34552e/pygalmesh-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "05d21dc21fcd4957a284318ebe46b05d", "sha256": "4a2c5ee693a2e00e15ee1351b3c1a3c4c0f56d9f221e76a174269e37596b9929"}, "downloads": -1, "filename": "pygalmesh-0.5.1.tar.gz", "has_sig": false, "md5_digest": "05d21dc21fcd4957a284318ebe46b05d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 27516, "upload_time": "2020-02-19T12:37:09", "upload_time_iso_8601": "2020-02-19T12:37:09.933408Z", "url": "https://files.pythonhosted.org/packages/cb/42/5b556473d87d82d61e47b134e5215255cae2bfe272f04806adce73036c2e/pygalmesh-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "ee07f2885f7bfaa94ac40243200c5ab5", "sha256": "08a49e7dd76ef9e1e38b0a60485c08533cc2c115357564cfe8206979ab0f359f"}, "downloads": -1, "filename": "pygalmesh-0.5.2.tar.gz", "has_sig": false, "md5_digest": "ee07f2885f7bfaa94ac40243200c5ab5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 1176908, "upload_time": "2020-02-20T11:11:28", "upload_time_iso_8601": "2020-02-20T11:11:28.450487Z", "url": "https://files.pythonhosted.org/packages/c6/c1/97b4ceeb722745722fb0bc5ae85e8f012b36984b6c29957ec457ed008034/pygalmesh-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "084dc75ea458c4dde281a5adcc1cd174", "sha256": "afe24100d2665eeacfcc2d197ff2125358eb485dab4c1069e15f309ce70645ff"}, "downloads": -1, "filename": "pygalmesh-0.6.0.tar.gz", "has_sig": false, "md5_digest": "084dc75ea458c4dde281a5adcc1cd174", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1176872, "upload_time": "2020-03-18T16:50:31", "upload_time_iso_8601": "2020-03-18T16:50:31.026573Z", "url": "https://files.pythonhosted.org/packages/3a/c3/77068d91d028abdde7158fbad70298f15d7cc44aef5650c403efa4d7c3ed/pygalmesh-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "9dfa71ce88e81d64a9aaaeb5022e20b0", "sha256": "c077d717470d089ecdfcb0b15db11e0dc7128cc8b71f9512edf2eefb44d08269"}, "downloads": -1, "filename": "pygalmesh-0.6.1.tar.gz", "has_sig": false, "md5_digest": "9dfa71ce88e81d64a9aaaeb5022e20b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1176984, "upload_time": "2020-03-22T21:37:41", "upload_time_iso_8601": "2020-03-22T21:37:41.924302Z", "url": "https://files.pythonhosted.org/packages/5d/c1/2a5dd19d2e8b1a03315c878ed5108bd9163222186a9db70c9c4b17e3f8f8/pygalmesh-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "1390eb83abbbf5753ec804f7d0ce4a06", "sha256": "f0166d8858432cefc930757206678024e490f10bcf46779fd549e533a125d3dc"}, "downloads": -1, "filename": "pygalmesh-0.6.2.tar.gz", "has_sig": false, "md5_digest": "1390eb83abbbf5753ec804f7d0ce4a06", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1177087, "upload_time": "2020-04-13T13:21:08", "upload_time_iso_8601": "2020-04-13T13:21:08.010239Z", "url": "https://files.pythonhosted.org/packages/24/e3/408ef09d0dd111e13347bfa40688c931ecbbd0317b438de788eb04925284/pygalmesh-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "51eb6734b2b66456c28cfc584ae099b9", "sha256": "e65c61da8e2bac31bdcb067bbfd22c1bc425ce393b055c24863bafd699c155ad"}, "downloads": -1, "filename": "pygalmesh-0.6.3.tar.gz", "has_sig": false, "md5_digest": "51eb6734b2b66456c28cfc584ae099b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1193299, "upload_time": "2020-05-03T15:29:37", "upload_time_iso_8601": "2020-05-03T15:29:37.691729Z", "url": "https://files.pythonhosted.org/packages/a0/30/cdf876b85db34fb171ff59f57d5b586030656e6505c22e2b31fab6630d4b/pygalmesh-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "3b31a4d7ae7d7d0bf01004f02c6bf5b4", "sha256": "4b61386acc872482418895a14459e2e25355a3df01a5880038318ca40fe42f71"}, "downloads": -1, "filename": "pygalmesh-0.6.4.tar.gz", "has_sig": false, "md5_digest": "3b31a4d7ae7d7d0bf01004f02c6bf5b4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1193332, "upload_time": "2020-05-03T15:45:13", "upload_time_iso_8601": "2020-05-03T15:45:13.495763Z", "url": "https://files.pythonhosted.org/packages/f6/f6/edad1d0c73a447916bcc2c4261b655df1ecf7766b6c20084aa4c256568fd/pygalmesh-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "134543fb0b9670aa06674b72fa3dbb80", "sha256": "9257a03a86a585999db4f927920a96751b49f7538963d9ce157c38304c16c278"}, "downloads": -1, "filename": "pygalmesh-0.6.5.tar.gz", "has_sig": false, "md5_digest": "134543fb0b9670aa06674b72fa3dbb80", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1193309, "upload_time": "2020-05-03T22:51:57", "upload_time_iso_8601": "2020-05-03T22:51:57.266738Z", "url": "https://files.pythonhosted.org/packages/84/e5/d2e1a8d761fd1cd420988cf7f1dbc7b9c3dc55538da82141c880109ab685/pygalmesh-0.6.5.tar.gz", "yanked": false}], "0.6.6": [{"comment_text": "", "digests": {"md5": "4c4eeb0eb35c4afe516b29196689414f", "sha256": "67de2cca8914acf73385fa1aea28906187fbb7065d6338c2ab9dced1dcdff444"}, "downloads": -1, "filename": "pygalmesh-0.6.6.tar.gz", "has_sig": false, "md5_digest": "4c4eeb0eb35c4afe516b29196689414f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1193292, "upload_time": "2020-05-04T09:11:36", "upload_time_iso_8601": "2020-05-04T09:11:36.129965Z", "url": "https://files.pythonhosted.org/packages/ec/f3/cee45c29e5bcd2301ba4b4bdf716670bce88f2f11448b2d9030e48f3d072/pygalmesh-0.6.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4c4eeb0eb35c4afe516b29196689414f", "sha256": "67de2cca8914acf73385fa1aea28906187fbb7065d6338c2ab9dced1dcdff444"}, "downloads": -1, "filename": "pygalmesh-0.6.6.tar.gz", "has_sig": false, "md5_digest": "4c4eeb0eb35c4afe516b29196689414f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 1193292, "upload_time": "2020-05-04T09:11:36", "upload_time_iso_8601": "2020-05-04T09:11:36.129965Z", "url": "https://files.pythonhosted.org/packages/ec/f3/cee45c29e5bcd2301ba4b4bdf716670bce88f2f11448b2d9030e48f3d072/pygalmesh-0.6.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:22 2020"}