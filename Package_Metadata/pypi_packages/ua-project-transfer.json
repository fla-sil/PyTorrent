{"info": {"author": "Stephen Stern, Rafael Lopez, Etienne Thompson", "author_email": "sterns1@email.arizona.edu", "bugtrack_url": null, "classifiers": [], "description": "# UA-Project-Transfer\n\nTransfers service requests from Agilent's iLab software to Illumina's Clarity LIMS software.\n\n## Motivation\n\nTo transfer service requests from iLab to Clarity LIMS programmatically.\n\n## Features\n\n- Creates projects in Clarity LIMS based on corresponding iLab service requests.\n- Route samples to the correct workflow in Clarity LIMS.\n- Validates service request prices.\n- If the transfer fails at any point in sample creation, there will not be side effects of project transfer.\n\n## Installation\n\n```bash\ngit clone https://github.com/UACoreFacilitiesIT/UA-Project-Transfer.git\n```\n\n## Code Example\n\n```bash\ncd UA-Project-Transfer/ua_project_transfer\npython project_transfer.py --ilab {iLab environment} --lims {LIMS environment}\n```\n\n## Tests\n\n```bash\ncd UA-Project-Transfer/ua_project_transfer/tests\nnosetests test_project_lims_tools.py\n```\n\n## How to Use\n\nTo use project_transfer with default settings in your environment, you will need to make a few changes:\n\n#### Environment changes\n\n- Add a file named \"lims_token.json\" in the form of:\n  - {\n    \"host\": \"{api_endpoint(https://.*v2/)}\",\n    \"username\" : \"{api_creds_username)\",\n    \"password\" : \"{api_creds_password}\"\n    }\n\n- Add a file named \"ilab_token.json\" in the form of:\n  - {\n    \"token\": \"{ilab_api_token}\",\n    \"core_id\": \"{ilab_core_id}\"\n    }\n</br>\n- If you want to customize logging, run monitoring, or credential harvesting, create a \"core_specifics.py\" file with that code. Otherwise, save the \"core_specifics_template.py\" file as \"core_specifics.py\".\n\n  - To customize logging:\n        Either save the \"log_config_template.py\" as \"log_config.py\" OR create a custom log_config file, including at least what is in the template file.\n\n  - To customize run monitoring:\n        Add the setup for whichever software monitoring you decide to use. Can be left blank if no monitoring is desired.\n\n  - To customize credential harvesting:\n        Either use what is written in the template, utilizing the two token files you just created. OR delete those two token files and implement your own credential harvesting method.\n\n  - The wf_locations dictionary must also be updated to map the iLab\n        Form names to their respective next_steps functions.\n\n  - The unroutable_forms list must be updated to contain any iLab Form names\n        you want to skip.\n\n#### Clarity changes\n\n- The UDF's in either the custom form's grid or fields with _each_sample in their identifiers must be exactly the name of the target Clarity UDF.\n\n- A sample's container type's name must map exactly to a container type's name in Clarity.\n\n- Workflows can only have samples routed to them if they are active.\n\n- WF_STEPS in wf_steps.py must hold the mappings of conditions to a tuple containing (the workflow, the step name).\n\n#### iLab changes\n\n- The code that interprets service requests (ua_ilab_tools) has a few requirements with you iLab setup:\n</br>\n\n- **Sample specific changes (sample grid)**:\n\n  - The information for samples must be stored in a \"grid\" custom form data type.\n\n  - The first column of that grid will be interpreted as the sample names.\n\n  - Any text added to this grid will have it's input scrubbed so that it matches r\"[^a-zA-Z0-9:,.+]\", where '+' is replaced with \"plus\", and is encoded as ascii -- special characters are converted using\n    `unicodedata.normalize(\"NFKD\", text).encode(\"ascii\", \"ignore\").decode(\"ascii\")`\n\n  - If a form is set up with 96-well plate(s) as the form's container type (see below how to set a form's container type), the it must have the column name of \"Well Location\".\n\n    - The formats that are allowed in the \"Well Location\" column are A:1, H12, B09, or C:09 (of course including A-H and 1-12).\n\n  - If a UDF is of the \"numeric\" type in Clarity, add that UDF identifier (the column name in the grid or the .*_each_sample form field identifier) to extract_custom_forms.py's ONLY_INT_FIELDS.\n\n  - Similarly, anything that is set as a \"Toggle Switch\" UDF in CLarity should be added to extract_custom_forms.py's BOOL_FIELDS.\n\n</br>\n\n- **Price Check specific changes**:\n\n  - You will need to define the quantity of each unit of a charge in price_check.py's unit_definitions (e.g. {\"each\": 1, \"prep\":11}).\n\n</br>\n\n- **Form specific changes**:\n\n  - Custom forms with names that match the pattern in ua_ilab_tools' SKIP_FORM_PATTERNS will not be evaluated.\n\n    - You **can** have a service request with a skipped form and a not skipped form, and the request will transfer.\n\n    - Each service request can only have one form that has sample information.\n\n    - Any custom form fields that end with \"_each_sample\" will be applied to every sample in the form.\n      - For example, if your Clarity environment had the UDF \"Concentration\", and you wanted a single concentration value to be added to every sample within a form's sample grid, the identifier for that field in the custom form's iLab setup should say \"Concentration_each_sample\".\n      - These identifiers must be exactly the name of the UDF in Clarity, before the \"_each_sample\" portion.\n\n  - The container type of the form is determined by whether:\n    - There's a grid column named \"Container Name\" (multiple 96-well plates)\n    - There's a custom form field with the identifier of container_name (single 96-well plate)\n    - Else, the container type is a Tube\n\n  - If you need to add more container types or change these rules, you can do so by editing the .*_bind functions, and updating the con_strategy dict() in bind_container_info() in extract_custom_forms.py.\n\n  - Each form must have only 1 container type.\n\n  - Duplicate location values are handled based on the container type of the form. The rules for what is allowed are:\n\nContainer Type | Duplicate Names Allowed | Duplicate Wells Allowed\n:---: | :---: | :---:\nTube | :x: | Always 1:1\n96 Well Plate | :heavy_check_mark: | :x:\n\n## Credits\n\n[sterns1](https://github.com/sterns1)\n[raflopjr](https://github.com/raflopjr)\n[RyanJohannesBland](https://github.com/RyanJohannesBland)\n[EtienneThompson](https://github.com/EtienneThompson)\n\n## License\n\nMIT\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/UACoreFacilitiesIT/UA-Project-Transfer", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ua-project-transfer", "package_url": "https://pypi.org/project/ua-project-transfer/", "platform": "", "project_url": "https://pypi.org/project/ua-project-transfer/", "project_urls": {"Homepage": "https://github.com/UACoreFacilitiesIT/UA-Project-Transfer"}, "release_url": "https://pypi.org/project/ua-project-transfer/1.1.6/", "requires_dist": ["ua-stache-api", "ua-clarity-tools", "ua-ilab-tools"], "requires_python": "", "summary": "Converts iLab service requests to Illumina Clarity Projects.", "version": "1.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>UA-Project-Transfer</h1>\n<p>Transfers service requests from Agilent's iLab software to Illumina's Clarity LIMS software.</p>\n<h2>Motivation</h2>\n<p>To transfer service requests from iLab to Clarity LIMS programmatically.</p>\n<h2>Features</h2>\n<ul>\n<li>Creates projects in Clarity LIMS based on corresponding iLab service requests.</li>\n<li>Route samples to the correct workflow in Clarity LIMS.</li>\n<li>Validates service request prices.</li>\n<li>If the transfer fails at any point in sample creation, there will not be side effects of project transfer.</li>\n</ul>\n<h2>Installation</h2>\n<pre>git clone https://github.com/UACoreFacilitiesIT/UA-Project-Transfer.git\n</pre>\n<h2>Code Example</h2>\n<pre><span class=\"nb\">cd</span> UA-Project-Transfer/ua_project_transfer\npython project_transfer.py --ilab <span class=\"o\">{</span>iLab environment<span class=\"o\">}</span> --lims <span class=\"o\">{</span>LIMS environment<span class=\"o\">}</span>\n</pre>\n<h2>Tests</h2>\n<pre><span class=\"nb\">cd</span> UA-Project-Transfer/ua_project_transfer/tests\nnosetests test_project_lims_tools.py\n</pre>\n<h2>How to Use</h2>\n<p>To use project_transfer with default settings in your environment, you will need to make a few changes:</p>\n<h4>Environment changes</h4>\n<ul>\n<li>\n<p>Add a file named \"lims_token.json\" in the form of:</p>\n<ul>\n<li>{\n\"host\": \"{api_endpoint(https://.*v2/)}\",\n\"username\" : \"{api_creds_username)\",\n\"password\" : \"{api_creds_password}\"\n}</li>\n</ul>\n</li>\n<li>\n<p>Add a file named \"ilab_token.json\" in the form of:</p>\n<ul>\n<li>{\n\"token\": \"{ilab_api_token}\",\n\"core_id\": \"{ilab_core_id}\"\n}</li>\n</ul>\n</li>\n</ul>\n<br>\n- If you want to customize logging, run monitoring, or credential harvesting, create a \"core_specifics.py\" file with that code. Otherwise, save the \"core_specifics_template.py\" file as \"core_specifics.py\".\n<ul>\n<li>\n<p>To customize logging:\nEither save the \"log_config_template.py\" as \"log_config.py\" OR create a custom log_config file, including at least what is in the template file.</p>\n</li>\n<li>\n<p>To customize run monitoring:\nAdd the setup for whichever software monitoring you decide to use. Can be left blank if no monitoring is desired.</p>\n</li>\n<li>\n<p>To customize credential harvesting:\nEither use what is written in the template, utilizing the two token files you just created. OR delete those two token files and implement your own credential harvesting method.</p>\n</li>\n<li>\n<p>The wf_locations dictionary must also be updated to map the iLab\nForm names to their respective next_steps functions.</p>\n</li>\n<li>\n<p>The unroutable_forms list must be updated to contain any iLab Form names\nyou want to skip.</p>\n</li>\n</ul>\n<h4>Clarity changes</h4>\n<ul>\n<li>\n<p>The UDF's in either the custom form's grid or fields with _each_sample in their identifiers must be exactly the name of the target Clarity UDF.</p>\n</li>\n<li>\n<p>A sample's container type's name must map exactly to a container type's name in Clarity.</p>\n</li>\n<li>\n<p>Workflows can only have samples routed to them if they are active.</p>\n</li>\n<li>\n<p>WF_STEPS in wf_steps.py must hold the mappings of conditions to a tuple containing (the workflow, the step name).</p>\n</li>\n</ul>\n<h4>iLab changes</h4>\n<ul>\n<li>The code that interprets service requests (ua_ilab_tools) has a few requirements with you iLab setup:</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>Sample specific changes (sample grid)</strong>:</p>\n<ul>\n<li>\n<p>The information for samples must be stored in a \"grid\" custom form data type.</p>\n</li>\n<li>\n<p>The first column of that grid will be interpreted as the sample names.</p>\n</li>\n<li>\n<p>Any text added to this grid will have it's input scrubbed so that it matches r\"[^a-zA-Z0-9:,.+]\", where '+' is replaced with \"plus\", and is encoded as ascii -- special characters are converted using\n<code>unicodedata.normalize(\"NFKD\", text).encode(\"ascii\", \"ignore\").decode(\"ascii\")</code></p>\n</li>\n<li>\n<p>If a form is set up with 96-well plate(s) as the form's container type (see below how to set a form's container type), the it must have the column name of \"Well Location\".</p>\n<ul>\n<li>The formats that are allowed in the \"Well Location\" column are A:1, H12, B09, or C:09 (of course including A-H and 1-12).</li>\n</ul>\n</li>\n<li>\n<p>If a UDF is of the \"numeric\" type in Clarity, add that UDF identifier (the column name in the grid or the .*_each_sample form field identifier) to extract_custom_forms.py's ONLY_INT_FIELDS.</p>\n</li>\n<li>\n<p>Similarly, anything that is set as a \"Toggle Switch\" UDF in CLarity should be added to extract_custom_forms.py's BOOL_FIELDS.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>Price Check specific changes</strong>:</p>\n<ul>\n<li>You will need to define the quantity of each unit of a charge in price_check.py's unit_definitions (e.g. {\"each\": 1, \"prep\":11}).</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>Form specific changes</strong>:</p>\n<ul>\n<li>\n<p>Custom forms with names that match the pattern in ua_ilab_tools' SKIP_FORM_PATTERNS will not be evaluated.</p>\n<ul>\n<li>\n<p>You <strong>can</strong> have a service request with a skipped form and a not skipped form, and the request will transfer.</p>\n</li>\n<li>\n<p>Each service request can only have one form that has sample information.</p>\n</li>\n<li>\n<p>Any custom form fields that end with \"_each_sample\" will be applied to every sample in the form.</p>\n<ul>\n<li>For example, if your Clarity environment had the UDF \"Concentration\", and you wanted a single concentration value to be added to every sample within a form's sample grid, the identifier for that field in the custom form's iLab setup should say \"Concentration_each_sample\".</li>\n<li>These identifiers must be exactly the name of the UDF in Clarity, before the \"_each_sample\" portion.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>The container type of the form is determined by whether:</p>\n<ul>\n<li>There's a grid column named \"Container Name\" (multiple 96-well plates)</li>\n<li>There's a custom form field with the identifier of container_name (single 96-well plate)</li>\n<li>Else, the container type is a Tube</li>\n</ul>\n</li>\n<li>\n<p>If you need to add more container types or change these rules, you can do so by editing the .*_bind functions, and updating the con_strategy dict() in bind_container_info() in extract_custom_forms.py.</p>\n</li>\n<li>\n<p>Each form must have only 1 container type.</p>\n</li>\n<li>\n<p>Duplicate location values are handled based on the container type of the form. The rules for what is allowed are:</p>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Container Type</th>\n<th align=\"center\">Duplicate Names Allowed</th>\n<th align=\"center\">Duplicate Wells Allowed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Tube</td>\n<td align=\"center\">:x:</td>\n<td align=\"center\">Always 1:1</td>\n</tr>\n<tr>\n<td align=\"center\">96 Well Plate</td>\n<td align=\"center\">:heavy_check_mark:</td>\n<td align=\"center\">:x:</td>\n</tr></tbody></table>\n<h2>Credits</h2>\n<p><a href=\"https://github.com/sterns1\" rel=\"nofollow\">sterns1</a>\n<a href=\"https://github.com/raflopjr\" rel=\"nofollow\">raflopjr</a>\n<a href=\"https://github.com/RyanJohannesBland\" rel=\"nofollow\">RyanJohannesBland</a>\n<a href=\"https://github.com/EtienneThompson\" rel=\"nofollow\">EtienneThompson</a></p>\n<h2>License</h2>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6705860, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2e99406b1ed8be9963267082600e2180", "sha256": "19cc5d984da5b221ac2119e999e91f593d306cd65ea045dd1ef1432728ad0c8c"}, "downloads": -1, "filename": "ua_project_transfer-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2e99406b1ed8be9963267082600e2180", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24869, "upload_time": "2019-11-20T23:18:22", "upload_time_iso_8601": "2019-11-20T23:18:22.146605Z", "url": "https://files.pythonhosted.org/packages/59/3a/071d0191cd36778ab829ffb1adf45018916eafbee20303943c0c8070e750/ua_project_transfer-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c81b2f698f58bc2dd7696abd649b9267", "sha256": "af137aab57106c78e94f283a9b3c6676e1c04e12accc438eeb1e86414cfea0ad"}, "downloads": -1, "filename": "ua_project_transfer-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c81b2f698f58bc2dd7696abd649b9267", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24451, "upload_time": "2019-11-27T18:06:55", "upload_time_iso_8601": "2019-11-27T18:06:55.826785Z", "url": "https://files.pythonhosted.org/packages/b9/5f/11ba3ae2266990065963355c175cf0d44124190c5c0aa802d25b2a171c9d/ua_project_transfer-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9870fff0ac04abd1ff57669e6a8c0dd7", "sha256": "fa5bc3314d1a04e55cf7b605e7d201a8fbb67f3e23abbe4c763cfee32b0584d7"}, "downloads": -1, "filename": "ua_project_transfer-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9870fff0ac04abd1ff57669e6a8c0dd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23489, "upload_time": "2019-12-03T20:47:21", "upload_time_iso_8601": "2019-12-03T20:47:21.338104Z", "url": "https://files.pythonhosted.org/packages/e2/83/e61e687d27869bbe5a239b550dd833efb7e1856eb1a60dba66fa0a628d0f/ua_project_transfer-1.0.2-py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ca1b1dbd4da4741201e4c8e289812013", "sha256": "8fd1c2a4dd08a0a245fa66be7eb54d518d7b92cb381da1e150b1955e3370b3e8"}, "downloads": -1, "filename": "ua_project_transfer-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ca1b1dbd4da4741201e4c8e289812013", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23413, "upload_time": "2019-12-05T17:17:15", "upload_time_iso_8601": "2019-12-05T17:17:15.286778Z", "url": "https://files.pythonhosted.org/packages/51/e6/de3dcb7c885d377e026101955d10fa14f549285ecdcc2c7da7626f6dd666/ua_project_transfer-1.0.3-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "478a83d0dc582c95e5a546956a7eddb5", "sha256": "5b9fdf535443f4159fbd21787d88b969e2aa848e719aef111c02ed78ef4ce6ab"}, "downloads": -1, "filename": "ua_project_transfer-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "478a83d0dc582c95e5a546956a7eddb5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26593, "upload_time": "2020-02-06T21:14:26", "upload_time_iso_8601": "2020-02-06T21:14:26.124276Z", "url": "https://files.pythonhosted.org/packages/cc/36/412bfbb1615bc34d441e8dbb6da7877e1a27aa4b103d5d3f1a14cd9a3a4e/ua_project_transfer-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "93b0ce7c101b87ffc24e4d2571927723", "sha256": "0945f6debe3c6f0f7acc76cf8d97ce2173bf850f38b49d297eecd0ad871727a7"}, "downloads": -1, "filename": "ua_project_transfer-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "93b0ce7c101b87ffc24e4d2571927723", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27069, "upload_time": "2020-02-17T20:15:08", "upload_time_iso_8601": "2020-02-17T20:15:08.823825Z", "url": "https://files.pythonhosted.org/packages/de/ff/c03630df5e6c3c510ff1320ea79826c6b4241e99ddac2a05e8eed0df7423/ua_project_transfer-1.1.1-py3-none-any.whl", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "94fc9eb68ae1815db90548d862eaaba7", "sha256": "7649c525b951de3ce0d9660e9ba1d2ada7bffb63112bc9e3167da6f6c5319887"}, "downloads": -1, "filename": "ua_project_transfer-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "94fc9eb68ae1815db90548d862eaaba7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27061, "upload_time": "2020-02-17T20:53:37", "upload_time_iso_8601": "2020-02-17T20:53:37.814523Z", "url": "https://files.pythonhosted.org/packages/ed/86/40c210f763799258c17109f6d3d8579151db7061adcbe8e8254e5d1b2b61/ua_project_transfer-1.1.2-py3-none-any.whl", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "43e9b62dbbea9abfe61fe4df7925489a", "sha256": "abc3d5059ec9fb97af4bcb36f08c8d5e8dc7e40f8c958cf8c3393e805e46ffdd"}, "downloads": -1, "filename": "ua_project_transfer-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "43e9b62dbbea9abfe61fe4df7925489a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27040, "upload_time": "2020-02-18T22:12:10", "upload_time_iso_8601": "2020-02-18T22:12:10.565287Z", "url": "https://files.pythonhosted.org/packages/ee/8c/04e8477aab973d7df49f77cb49d90c6ec867eb9f66f25f76055982e8d19f/ua_project_transfer-1.1.3-py3-none-any.whl", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "d49152820bc81cc1627998e9de640337", "sha256": "9a9b922e2e0cbb867208fcacba45c2070e2bc52eb89e8851da986652c1a89f01"}, "downloads": -1, "filename": "ua_project_transfer-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "d49152820bc81cc1627998e9de640337", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27321, "upload_time": "2020-02-19T19:31:32", "upload_time_iso_8601": "2020-02-19T19:31:32.003601Z", "url": "https://files.pythonhosted.org/packages/b1/d8/c2df5b27115ea9dff0781180285179de78830f84c3bb8705e50cd0ef8f0d/ua_project_transfer-1.1.4-py3-none-any.whl", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "1f4e6dd2d7e982f399f275074e538e55", "sha256": "308c1b9c26bfa2791017143426273ece2ad5eb7cec5fd69e89b3d9f0a4afa023"}, "downloads": -1, "filename": "ua_project_transfer-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "1f4e6dd2d7e982f399f275074e538e55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27405, "upload_time": "2020-02-20T22:51:46", "upload_time_iso_8601": "2020-02-20T22:51:46.263600Z", "url": "https://files.pythonhosted.org/packages/e6/81/7f4bda4efedad5fb8f53eee42f810b2cb179f4fa590c035a6716dbfd63ca/ua_project_transfer-1.1.5-py3-none-any.whl", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "1a862da2de949f4c756954a42138960a", "sha256": "b7ac7b1273881762dddff5200149eea79f58d7bd51dc871ab09eed5606bdce9e"}, "downloads": -1, "filename": "ua_project_transfer-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1a862da2de949f4c756954a42138960a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27408, "upload_time": "2020-02-26T20:15:55", "upload_time_iso_8601": "2020-02-26T20:15:55.716386Z", "url": "https://files.pythonhosted.org/packages/aa/83/c7bf48866eb592b898f6602f526b6f9f8537d52043506f04e57f2bb30a9e/ua_project_transfer-1.1.6-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a862da2de949f4c756954a42138960a", "sha256": "b7ac7b1273881762dddff5200149eea79f58d7bd51dc871ab09eed5606bdce9e"}, "downloads": -1, "filename": "ua_project_transfer-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1a862da2de949f4c756954a42138960a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27408, "upload_time": "2020-02-26T20:15:55", "upload_time_iso_8601": "2020-02-26T20:15:55.716386Z", "url": "https://files.pythonhosted.org/packages/aa/83/c7bf48866eb592b898f6602f526b6f9f8537d52043506f04e57f2bb30a9e/ua_project_transfer-1.1.6-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:42:24 2020"}