{"info": {"author": "Sune Debel", "author_email": "sd@dybro-debel.dk", "bugtrack_url": null, "classifiers": [], "description": "# Build Status\n\nBuild status: \n\n[![CircleCI](https://circleci.com/gh/suned/serum.svg?style=svg)](https://circleci.com/gh/suned/serum)\n\nCode quality:\n\n[![Test Coverage](https://api.codeclimate.com/v1/badges/523bc990f4ef696aa22d/test_coverage)](https://codeclimate.com/github/suned/serum/test_coverage) \n\n[![Maintainability](https://api.codeclimate.com/v1/badges/523bc990f4ef696aa22d/maintainability)](https://codeclimate.com/github/suned/serum/maintainability)\n\n\n\n\n# Description\n`serum` is a fresh take on Dependency Injection in Python 3.\n\n`serum` is pure python and has no dependencies.\n# Installation\n```\n> pip install serum\n```\n# Quickstart\n```python\nfrom serum import inject, dependency, Context\n\n\n# Classes decorated with 'dependency' are injectable types.\n@dependency \nclass Log:\n    def info(self, message: str):\n        raise NotImplementedError()\n\n\nclass SimpleLog(Log):\n    def info(self, message: str):\n        print(message)\n\n\nclass StubLog(SimpleLog):\n    def info(self, message: str):\n        pass\n\n\n@inject  # Dependencies are injected using a class decorator...\nclass NeedsLog:\n    log: Log  # ...and class level annotations...\n\n\nclass NeedsSimpleLog:\n    @inject  # ...or using a function decorator\n    def __init__(self, log: SimpleLog):\n        self.log = log \n\n\n@inject\nclass NeedsNamedDependency:\n    named_dependency: str  # class level annotations annotated with a type that is not\n                           # decorated with 'dependency' will be treated as a named\n                           # dependency\n\n\n# Contexts provide dependencies\nwith Context(SimpleLog, named_dependency='this name is injected!'):\n    assert isinstance(NeedsLog().log, SimpleLog)\n    assert NeedsNamedDependency().named_dependency == 'this name is injected!'\n\n\n# Contexts will always provide the most specific \n# subtype of the requested type. This allows you to change which\n# dependencies are injected.\nwith Context(StubLog):\n    NeedsLog().log.info('Hello serum!')  # doesn't output anything\n    NeedsSimpleLog().log.info('Hello serum!')  # doesn't output anything\n```\n# Documentation\n- [`inject`](#inject)\n- [`dependency`](#dependency)\n- [`Context`](#context)\n- [`singleton`](#singleton)\n- [`mock`](#mock)\n- [`match`](#match)\n- [IPython Integration](#ipython-integration)\n\n## `inject`\n`inject` is used to decorate functions and classes in which you want to inject\ndependencies.\n```python\nfrom serum import inject, dependency\n\n@dependency\nclass MyDependency:\n    pass\n\n@inject\ndef f(dependency: MyDependency):\n    assert isinstance(dependency, MyDependency)\n\nf()\n```\nFunctions decorated with `inject` can be called as normal functions. `serum` will\nnot attempt to inject arguments given at call time.\n```python\n@inject\ndef f(dependency: MyDependency):\n    print(dependency)\n\nf('Overridden dependency')  #  outputs: Overridden dependency \n```\n`inject` will instantiate classes decorated with [`dependency`](#dependency). In\nthis way, your entire dependency graph can be specified using just `inject` and \n`dependency`.\n\nInstances of simple types and objects you want to instantiate yourself can be\ninjected using keyword arguments to [`Context`](#context).\n```python\n@inject\ndef f(dependency: str):\n    assert dependency == 'a named dependency'\n\nwith Context(dependency='a named dependency'):\n    f()\n```\n`inject` can also be used to decorate classes. \n```python\n@inject\nclass SomeClass:\n    dependency: MyDependency \n```\nThis is roughly equivalent to:\n```python\nclass SomeClass:\n    @inject\n    def __init__(self, dependency: MyDependency):\n        self.__dependency = dependency\n\n    @property\n    def dependency(self) -> MyDependency:\n        return self.__dependency\n```\nDependencies that are specified as class level annotations can be overridden\nusing key-word arguments to `__init__`\n```python\nassert SomeClass(dependency='Overridden!').dependency == 'Overridden!'\n```\n## `dependency`\nClasses decorated with `dependency` can be instantiated and injected\nby `serum`.\n```python\nfrom serum import dependency, inject\n\n@dependency\nclass Log:\n    def info(self, message):\n        print(message)\n\n\n@inject\nclass NeedsLog:\n    log: Log\n\n\nassert isinstance(NeedsLog().log, Log)\n```\n`serum` relies on being able to inject all dependencies for `dependency` decorated classes \nrecursively. To achieve this, `serum` assumes that the `__init__` method \nof `dependency` decorated classes can be called without any arguments.\nThis means that all arguments to `__init__` of `dependency` decorated classes must be injected using `inject`.\n```python\n@dependency\nclass SomeDependency:\n    def method(self):\n        pass\n\n\n@inject\n@dependency\nclass ValidDependency:  # OK!\n    some_dependency: SomeDependency\n\n    def __init__(self):\n        ...\n\n\n@dependency\nclass AlsoValidDependency:  # Also OK!\n    @inject\n    def __init__(self, some_dependency: SomeDependency):\n        ...\n\n\n@dependency\nclass InvalidDependency:\n    def __init__(self, a):\n        ...\n\n@inject\ndef f(dependency: InvalidDependency):\n    ...\n\nf()  \n# raises:\n# TypeError: __init__() missing 1 required positional argument: 'a'\n\n# The above exception was the direct cause of the following exception:\n\n# InjectionError                            Traceback (most recent call last)\n# ...\n# InjectionError: Could not instantiate dependency <class 'InvalidDependency'> \n# when injecting argument \"dependency\" in <function f at 0x10a074ea0>.\n```\n\nNote that circular dependencies preventing instantiation of `dependency` decorated\nclasses leads to an error.\n```python\n@dependency\nclass AbstractA:\n    pass\n\n@dependency\nclass AbstractB:\n    pass\n\n\nclass A(AbstractA):\n\n    @inject\n    def __init__(self, b: AbstractB):\n        self.b = b\n\nclass B(AbstractB):\n    @inject\n    def __init__(self, a: AbstractA):\n        self.a = a\n\n@inject\nclass Dependent:\n    a: AbstractA\n\n\nwith Context(A, B):\n    Dependent().a  # raises: CircularDependency: Circular dependency encountered while injecting <class 'AbstractA'> in <B object at 0x1061e3898>\n```\n## `Context`\n`Context`s provide implementations of dependencies. A `Context` will always provide the most\nspecific subtype of the requested type (in Method Resolution Order).\n```python\n@dependency\nclass Super:\n    pass\n\n\nclass Sub(Super):\n    pass\n\n@inject\nclass NeedsSuper:\n    instance: Super\n\n\nwith Context(Sub):\n    assert isinstance(NeedsSuper().instance, Sub)\n```\nIt is an error to inject a type in an `Context` that provides two or more equally specific subtypes of that type:\n```python\nclass AlsoSub(Super):\n    pass\n\n\nwith Context(Sub, AlsoSub):\n    NeedsSuper() # raises: AmbiguousDependencies: Attempt to inject type <class 'Log'> with equally specific provided subtypes: <class 'MockLog'>, <class 'FileLog'>\n```\n`Context`s can also be used as decorators:\n```python\ncontext = Context(Sub)\n\n@context\ndef f():\n    assert isinstance(NeedsSuper().instance, Sub)\n\n``` \nYou can provide named dependencies of any type using keyword arguments.\n```python\n@inject\nclass Database:\n    connection_string: str\n\n\nconnection_string = 'mysql+pymysql://root:my_pass@127.0.0.1:3333/my_db'\ncontext = Context(\n    connection_string=connection_string\n)\nwith context:\n    assert Database().connection_string == connection_string\n```\n`Context`s are local to each thread. This means that when using multi-threading\neach thread runs in its own context\n```python\nimport threading\n\n\n@singleton\nclass SomeSingleton:\n    pass\n\ndef worker_without_environment():\n    NeedsSuper().instance\n\n@inject\ndef worker(instance: SomeSingleton):\n    print(instance)\n\nwith Context():\n    worker() # outputs: <SomeSingleton object at 0x101f75470>\n    threading.Thread(target=worker).start() # outputs: <SomeSingleton object at 0x1035fb320>\n```\n\n## `singleton`\nTo always inject the same instance of a dependency in the same `Context`, annotate your type with `singleton`.\n```python\nfrom serum import singleton\n\n\n@singleton\nclass ExpensiveObject:\n    pass\n\n\n@inject\nclass NeedsExpensiveObject:\n    expensive_instance: ExpensiveObject\n\n\ninstance1 = NeedsExpensiveObject()\ninstance2 = NeedsExpensiveObject()\nassert instance1.expensive_instance is instance2.expensive_instance\n```\nNote that `Singleton` dependencies injected in different environments \nwill not refer to the same instance.\n```python\n\nwith Context():\n    instance1 = NeedsExpensiveObject()\n\nwith Context():\n    assert instance1.expensive_instance is not NeedsExpensiveObject().expensive_instance\n```\n## `mock`\n`serum` has support for injecting `MagicMock`s from the builtin\n`unittest.mock` library in unittests using the `mock` utility\nfunction. Mocks are reset\nwhen the environment context is closed.\n```python\nfrom serum import mock\n\n@dependency\nclass SomeDependency:\n    def method(self):\n        return 'some value' \n\n@inject\nclass Dependent:\n    dependency: SomeDependency\n\n\ncontext = Context()\nwith context:\n    mock_dependency = mock(SomeDependency)\n    mock_dependency.method.return_value = 'some mocked value'\n    instance = Dependent()\n    assert instance.dependency is mock_dependency\n    assert instance.dependency.method() == 'some mocked value'\n\nwith context:\n    instance = Dependent()\n    assert instance.dependency is not mock_dependency\n    assert isinstance(instance.dependency, SomeDependency)\n```\n`mock` uses its argument to spec the injected instance of `MagicMock`. This means\nthat attempting to call methods that are not defined by the mocked `Component`\nleads to an error\n```python\nwith context:\n    mock_dependency = mock(SomeDependency)\n    mock_dependency.no_method()  # raises: AttributeError: Mock object has no attribute 'no method'\n```\nNote that `mock` will only mock requests of the\nexact type supplied as its argument, but not requests of\nmore or less specific types\n```python\nfrom unittest.mock import MagicMock\n\n@dependency\nclass Super:\n    pass\n\n\nclass Sub(Super):\n    pass\n\n\nclass SubSub(Sub):\n    pass\n\n\n@inject\nclass NeedsSuper:\n    injected: Super\n\n\n@inject\nclass NeedsSub:\n    injected: Sub\n\n\n@inject\nclass NeedsSubSub:\n    injected: SubSub\n\n\nwith Context():\n    mock(Sub)\n    needs_super = NeedsSuper()\n    needs_sub = NeedsSub()\n    needs_subsub = NeedsSubSub()\n    assert isinstance(needs_super.injected, Super)\n    assert isinstance(needs_sub.injected, MagicMock)\n    assert isinstance(needs_subsub.injected, SubSub)\n```\n## `match`\n`match` is small utility function for matching `Context` instances\nwith values of an environment variable.\n```python\n# my_script.py\nfrom serum import match, dependency, Context, inject\n\n@dependency\nclass BaseDependency:\n    def method(self):\n        raise NotImplementedError()\n\n\nclass ProductionDependency(BaseDependency):\n    def method(self):\n        print('Production!')\n\n\nclass TestDependency(BaseDependency):\n    def method(self):\n        print('Test!')\n\n\n@inject\ndef f(dependency: BaseDependency):\n    dependency.method()\n\n\ncontext = match(\n    environment_variable='MY_SCRIPT_ENV', \n    default=Context(ProductionDependency),\n    PROD=Context(ProductionDependency),\n    TEST=Context(TestDependency)\n)\n\nwith context:\n    f()\n```\n```\n> python my_script.py\nProduction!\n```\n```\n> MY_SCRIPT_ENV=PROD python my_script.py\nProduction!\n```\n```\n> MY_SCRIPT_ENV=TEST python my_script.py\nTest!\n```\n## IPython Integration\nIt can be slightly annoying to import some `Context` and start it as a\ncontext manager in the beginning of every IPython session. \nMoreover, you quite often want to run an IPython REPL in a special context,\ne.g to provide configuration that is normally supplied through command line\narguments in some other way.\n\nTo this end `serum` can act as an IPython extension. To activate it,\nadd the following lines to your `ipython_config.py`:\n```python\nc.InteractiveShellApp.extensions = ['serum']\n```\nFinally, create a file named `ipython_context.py` in the root of your project. In it,\nassign the `Context` instance you would like automatically started to a global\nvariable named `context`:\n```python\n# ipython_context.py\nfrom serum import Context\n\n\ncontext = Context()\n```\nIPython will now enter this context automatically in the beginning of\nevery REPL session started in the root of your project.\n# Why?\nIf you've been researching Dependency Injection frameworks for python,\nyou've no doubt come across this opinion:\n\n>You dont need Dependency Injection in python. \n>You can just use duck typing and monkey patching!\n\nThe position behind this statement is often that you only need Dependency \nInjection in statically typed languages.\n\nIn truth, you don't really _need_ Dependency Injection in any language, \nstatically typed or otherwise. \nWhen building large applications that need to run in multiple environments however,\nDependency Injection can make your life a lot easier. In my experience,\nexcessive use of monkey patching for managing environments leads to a jumbled\nmess of implicit initialisation steps and `if value is None` type code.\n\nIn addition to being a framework, I've attempted to design `serum` to encourage\ndesigning classes that follow the Dependency Inversion Principle:\n\n> one should \u201cdepend upon abstractions, _not_ concretions.\"\n\nThis is achieved by letting inheritance being the principle way of providing\ndependencies and allowing dependencies to be abstract.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/suned/serum", "keywords": "dependency-injection,solid,inversion-of-control", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "serum", "package_url": "https://pypi.org/project/serum/", "platform": "", "project_url": "https://pypi.org/project/serum/", "project_urls": {"Homepage": "https://github.com/suned/serum"}, "release_url": "https://pypi.org/project/serum/5.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Dependency Injection library for Python 3", "version": "5.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Build Status</h1>\n<p>Build status:</p>\n<p><a href=\"https://circleci.com/gh/suned/serum\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/349c8f60d0b38128270d0457186a8b39320c9ffe/68747470733a2f2f636972636c6563692e636f6d2f67682f73756e65642f736572756d2e7376673f7374796c653d737667\"></a></p>\n<p>Code quality:</p>\n<p><a href=\"https://codeclimate.com/github/suned/serum/test_coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f74e873b1807a709897028d2c7fb04114f9e58a/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f35323362633939306634656636393661613232642f746573745f636f766572616765\"></a></p>\n<p><a href=\"https://codeclimate.com/github/suned/serum/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cbdbc62b87ec5f4f3ff0731faeb93858d894baf1/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f35323362633939306634656636393661613232642f6d61696e7461696e6162696c697479\"></a></p>\n<h1>Description</h1>\n<p><code>serum</code> is a fresh take on Dependency Injection in Python 3.</p>\n<p><code>serum</code> is pure python and has no dependencies.</p>\n<h1>Installation</h1>\n<pre><code>&gt; pip install serum\n</code></pre>\n<h1>Quickstart</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serum</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span><span class=\"p\">,</span> <span class=\"n\">dependency</span><span class=\"p\">,</span> <span class=\"n\">Context</span>\n\n\n<span class=\"c1\"># Classes decorated with 'dependency' are injectable types.</span>\n<span class=\"nd\">@dependency</span> \n<span class=\"k\">class</span> <span class=\"nc\">Log</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleLog</span><span class=\"p\">(</span><span class=\"n\">Log</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">StubLog</span><span class=\"p\">(</span><span class=\"n\">SimpleLog</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@inject</span>  <span class=\"c1\"># Dependencies are injected using a class decorator...</span>\n<span class=\"k\">class</span> <span class=\"nc\">NeedsLog</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Log</span>  <span class=\"c1\"># ...and class level annotations...</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NeedsSimpleLog</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span>  <span class=\"c1\"># ...or using a function decorator</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">SimpleLog</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">log</span> \n\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">NeedsNamedDependency</span><span class=\"p\">:</span>\n    <span class=\"n\">named_dependency</span><span class=\"p\">:</span> <span class=\"nb\">str</span>  <span class=\"c1\"># class level annotations annotated with a type that is not</span>\n                           <span class=\"c1\"># decorated with 'dependency' will be treated as a named</span>\n                           <span class=\"c1\"># dependency</span>\n\n\n<span class=\"c1\"># Contexts provide dependencies</span>\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">SimpleLog</span><span class=\"p\">,</span> <span class=\"n\">named_dependency</span><span class=\"o\">=</span><span class=\"s1\">'this name is injected!'</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">NeedsLog</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">SimpleLog</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">NeedsNamedDependency</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">named_dependency</span> <span class=\"o\">==</span> <span class=\"s1\">'this name is injected!'</span>\n\n\n<span class=\"c1\"># Contexts will always provide the most specific </span>\n<span class=\"c1\"># subtype of the requested type. This allows you to change which</span>\n<span class=\"c1\"># dependencies are injected.</span>\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">StubLog</span><span class=\"p\">):</span>\n    <span class=\"n\">NeedsLog</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Hello serum!'</span><span class=\"p\">)</span>  <span class=\"c1\"># doesn't output anything</span>\n    <span class=\"n\">NeedsSimpleLog</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Hello serum!'</span><span class=\"p\">)</span>  <span class=\"c1\"># doesn't output anything</span>\n</pre>\n<h1>Documentation</h1>\n<ul>\n<li><a href=\"#inject\" rel=\"nofollow\"><code>inject</code></a></li>\n<li><a href=\"#dependency\" rel=\"nofollow\"><code>dependency</code></a></li>\n<li><a href=\"#context\" rel=\"nofollow\"><code>Context</code></a></li>\n<li><a href=\"#singleton\" rel=\"nofollow\"><code>singleton</code></a></li>\n<li><a href=\"#mock\" rel=\"nofollow\"><code>mock</code></a></li>\n<li><a href=\"#match\" rel=\"nofollow\"><code>match</code></a></li>\n<li><a href=\"#ipython-integration\" rel=\"nofollow\">IPython Integration</a></li>\n</ul>\n<h2><code>inject</code></h2>\n<p><code>inject</code> is used to decorate functions and classes in which you want to inject\ndependencies.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serum</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span><span class=\"p\">,</span> <span class=\"n\">dependency</span>\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyDependency</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"p\">:</span> <span class=\"n\">MyDependency</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"p\">,</span> <span class=\"n\">MyDependency</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span><span class=\"p\">()</span>\n</pre>\n<p>Functions decorated with <code>inject</code> can be called as normal functions. <code>serum</code> will\nnot attempt to inject arguments given at call time.</p>\n<pre><span class=\"nd\">@inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"p\">:</span> <span class=\"n\">MyDependency</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s1\">'Overridden dependency'</span><span class=\"p\">)</span>  <span class=\"c1\">#  outputs: Overridden dependency </span>\n</pre>\n<p><code>inject</code> will instantiate classes decorated with <a href=\"#dependency\" rel=\"nofollow\"><code>dependency</code></a>. In\nthis way, your entire dependency graph can be specified using just <code>inject</code> and\n<code>dependency</code>.</p>\n<p>Instances of simple types and objects you want to instantiate yourself can be\ninjected using keyword arguments to <a href=\"#context\" rel=\"nofollow\"><code>Context</code></a>.</p>\n<pre><span class=\"nd\">@inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"n\">dependency</span> <span class=\"o\">==</span> <span class=\"s1\">'a named dependency'</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"o\">=</span><span class=\"s1\">'a named dependency'</span><span class=\"p\">):</span>\n    <span class=\"n\">f</span><span class=\"p\">()</span>\n</pre>\n<p><code>inject</code> can also be used to decorate classes.</p>\n<pre><span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">:</span>\n    <span class=\"n\">dependency</span><span class=\"p\">:</span> <span class=\"n\">MyDependency</span> \n</pre>\n<p>This is roughly equivalent to:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dependency</span><span class=\"p\">:</span> <span class=\"n\">MyDependency</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__dependency</span> <span class=\"o\">=</span> <span class=\"n\">dependency</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dependency</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">MyDependency</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__dependency</span>\n</pre>\n<p>Dependencies that are specified as class level annotations can be overridden\nusing key-word arguments to <code>__init__</code></p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">SomeClass</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"o\">=</span><span class=\"s1\">'Overridden!'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dependency</span> <span class=\"o\">==</span> <span class=\"s1\">'Overridden!'</span>\n</pre>\n<h2><code>dependency</code></h2>\n<p>Classes decorated with <code>dependency</code> can be instantiated and injected\nby <code>serum</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serum</span> <span class=\"kn\">import</span> <span class=\"n\">dependency</span><span class=\"p\">,</span> <span class=\"n\">inject</span>\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">Log</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">NeedsLog</span><span class=\"p\">:</span>\n    <span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">Log</span>\n\n\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">NeedsLog</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">Log</span><span class=\"p\">)</span>\n</pre>\n<p><code>serum</code> relies on being able to inject all dependencies for <code>dependency</code> decorated classes\nrecursively. To achieve this, <code>serum</code> assumes that the <code>__init__</code> method\nof <code>dependency</code> decorated classes can be called without any arguments.\nThis means that all arguments to <code>__init__</code> of <code>dependency</code> decorated classes must be injected using <code>inject</code>.</p>\n<pre><span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeDependency</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@inject</span>\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">ValidDependency</span><span class=\"p\">:</span>  <span class=\"c1\"># OK!</span>\n    <span class=\"n\">some_dependency</span><span class=\"p\">:</span> <span class=\"n\">SomeDependency</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">AlsoValidDependency</span><span class=\"p\">:</span>  <span class=\"c1\"># Also OK!</span>\n    <span class=\"nd\">@inject</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">some_dependency</span><span class=\"p\">:</span> <span class=\"n\">SomeDependency</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">InvalidDependency</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"p\">:</span> <span class=\"n\">InvalidDependency</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">f</span><span class=\"p\">()</span>  \n<span class=\"c1\"># raises:</span>\n<span class=\"c1\"># TypeError: __init__() missing 1 required positional argument: 'a'</span>\n\n<span class=\"c1\"># The above exception was the direct cause of the following exception:</span>\n\n<span class=\"c1\"># InjectionError                            Traceback (most recent call last)</span>\n<span class=\"c1\"># ...</span>\n<span class=\"c1\"># InjectionError: Could not instantiate dependency &lt;class 'InvalidDependency'&gt; </span>\n<span class=\"c1\"># when injecting argument \"dependency\" in &lt;function f at 0x10a074ea0&gt;.</span>\n</pre>\n<p>Note that circular dependencies preventing instantiation of <code>dependency</code> decorated\nclasses leads to an error.</p>\n<pre><span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractA</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">AbstractB</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">AbstractA</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@inject</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">AbstractB</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"n\">AbstractB</span><span class=\"p\">):</span>\n    <span class=\"nd\">@inject</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">AbstractA</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">Dependent</span><span class=\"p\">:</span>\n    <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">AbstractA</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">):</span>\n    <span class=\"n\">Dependent</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">a</span>  <span class=\"c1\"># raises: CircularDependency: Circular dependency encountered while injecting &lt;class 'AbstractA'&gt; in &lt;B object at 0x1061e3898&gt;</span>\n</pre>\n<h2><code>Context</code></h2>\n<p><code>Context</code>s provide implementations of dependencies. A <code>Context</code> will always provide the most\nspecific subtype of the requested type (in Method Resolution Order).</p>\n<pre><span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">Super</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Sub</span><span class=\"p\">(</span><span class=\"n\">Super</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">NeedsSuper</span><span class=\"p\">:</span>\n    <span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">Super</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">Sub</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">NeedsSuper</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">Sub</span><span class=\"p\">)</span>\n</pre>\n<p>It is an error to inject a type in an <code>Context</code> that provides two or more equally specific subtypes of that type:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AlsoSub</span><span class=\"p\">(</span><span class=\"n\">Super</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">Sub</span><span class=\"p\">,</span> <span class=\"n\">AlsoSub</span><span class=\"p\">):</span>\n    <span class=\"n\">NeedsSuper</span><span class=\"p\">()</span> <span class=\"c1\"># raises: AmbiguousDependencies: Attempt to inject type &lt;class 'Log'&gt; with equally specific provided subtypes: &lt;class 'MockLog'&gt;, &lt;class 'FileLog'&gt;</span>\n</pre>\n<p><code>Context</code>s can also be used as decorators:</p>\n<pre><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">Sub</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@context</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">NeedsSuper</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">Sub</span><span class=\"p\">)</span>\n</pre>\n<p>You can provide named dependencies of any type using keyword arguments.</p>\n<pre><span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">Database</span><span class=\"p\">:</span>\n    <span class=\"n\">connection_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"n\">connection_string</span> <span class=\"o\">=</span> <span class=\"s1\">'mysql+pymysql://root:my_pass@127.0.0.1:3333/my_db'</span>\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">(</span>\n    <span class=\"n\">connection_string</span><span class=\"o\">=</span><span class=\"n\">connection_string</span>\n<span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">context</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">Database</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">connection_string</span> <span class=\"o\">==</span> <span class=\"n\">connection_string</span>\n</pre>\n<p><code>Context</code>s are local to each thread. This means that when using multi-threading\neach thread runs in its own context</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n\n<span class=\"nd\">@singleton</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeSingleton</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">worker_without_environment</span><span class=\"p\">():</span>\n    <span class=\"n\">NeedsSuper</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">instance</span>\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">worker</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"n\">SomeSingleton</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">():</span>\n    <span class=\"n\">worker</span><span class=\"p\">()</span> <span class=\"c1\"># outputs: &lt;SomeSingleton object at 0x101f75470&gt;</span>\n    <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">worker</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span> <span class=\"c1\"># outputs: &lt;SomeSingleton object at 0x1035fb320&gt;</span>\n</pre>\n<h2><code>singleton</code></h2>\n<p>To always inject the same instance of a dependency in the same <code>Context</code>, annotate your type with <code>singleton</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serum</span> <span class=\"kn\">import</span> <span class=\"n\">singleton</span>\n\n\n<span class=\"nd\">@singleton</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExpensiveObject</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">NeedsExpensiveObject</span><span class=\"p\">:</span>\n    <span class=\"n\">expensive_instance</span><span class=\"p\">:</span> <span class=\"n\">ExpensiveObject</span>\n\n\n<span class=\"n\">instance1</span> <span class=\"o\">=</span> <span class=\"n\">NeedsExpensiveObject</span><span class=\"p\">()</span>\n<span class=\"n\">instance2</span> <span class=\"o\">=</span> <span class=\"n\">NeedsExpensiveObject</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">instance1</span><span class=\"o\">.</span><span class=\"n\">expensive_instance</span> <span class=\"ow\">is</span> <span class=\"n\">instance2</span><span class=\"o\">.</span><span class=\"n\">expensive_instance</span>\n</pre>\n<p>Note that <code>Singleton</code> dependencies injected in different environments\nwill not refer to the same instance.</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">():</span>\n    <span class=\"n\">instance1</span> <span class=\"o\">=</span> <span class=\"n\">NeedsExpensiveObject</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">instance1</span><span class=\"o\">.</span><span class=\"n\">expensive_instance</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">NeedsExpensiveObject</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">expensive_instance</span>\n</pre>\n<h2><code>mock</code></h2>\n<p><code>serum</code> has support for injecting <code>MagicMock</code>s from the builtin\n<code>unittest.mock</code> library in unittests using the <code>mock</code> utility\nfunction. Mocks are reset\nwhen the environment context is closed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">serum</span> <span class=\"kn\">import</span> <span class=\"n\">mock</span>\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeDependency</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'some value'</span> \n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">Dependent</span><span class=\"p\">:</span>\n    <span class=\"n\">dependency</span><span class=\"p\">:</span> <span class=\"n\">SomeDependency</span>\n\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">context</span><span class=\"p\">:</span>\n    <span class=\"n\">mock_dependency</span> <span class=\"o\">=</span> <span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">SomeDependency</span><span class=\"p\">)</span>\n    <span class=\"n\">mock_dependency</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">return_value</span> <span class=\"o\">=</span> <span class=\"s1\">'some mocked value'</span>\n    <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">Dependent</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">dependency</span> <span class=\"ow\">is</span> <span class=\"n\">mock_dependency</span>\n    <span class=\"k\">assert</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">dependency</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'some mocked value'</span>\n\n<span class=\"k\">with</span> <span class=\"n\">context</span><span class=\"p\">:</span>\n    <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">Dependent</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">dependency</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">mock_dependency</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">dependency</span><span class=\"p\">,</span> <span class=\"n\">SomeDependency</span><span class=\"p\">)</span>\n</pre>\n<p><code>mock</code> uses its argument to spec the injected instance of <code>MagicMock</code>. This means\nthat attempting to call methods that are not defined by the mocked <code>Component</code>\nleads to an error</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">context</span><span class=\"p\">:</span>\n    <span class=\"n\">mock_dependency</span> <span class=\"o\">=</span> <span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">SomeDependency</span><span class=\"p\">)</span>\n    <span class=\"n\">mock_dependency</span><span class=\"o\">.</span><span class=\"n\">no_method</span><span class=\"p\">()</span>  <span class=\"c1\"># raises: AttributeError: Mock object has no attribute 'no method'</span>\n</pre>\n<p>Note that <code>mock</code> will only mock requests of the\nexact type supplied as its argument, but not requests of\nmore or less specific types</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unittest.mock</span> <span class=\"kn\">import</span> <span class=\"n\">MagicMock</span>\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">Super</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Sub</span><span class=\"p\">(</span><span class=\"n\">Super</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SubSub</span><span class=\"p\">(</span><span class=\"n\">Sub</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">NeedsSuper</span><span class=\"p\">:</span>\n    <span class=\"n\">injected</span><span class=\"p\">:</span> <span class=\"n\">Super</span>\n\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">NeedsSub</span><span class=\"p\">:</span>\n    <span class=\"n\">injected</span><span class=\"p\">:</span> <span class=\"n\">Sub</span>\n\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">class</span> <span class=\"nc\">NeedsSubSub</span><span class=\"p\">:</span>\n    <span class=\"n\">injected</span><span class=\"p\">:</span> <span class=\"n\">SubSub</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">Context</span><span class=\"p\">():</span>\n    <span class=\"n\">mock</span><span class=\"p\">(</span><span class=\"n\">Sub</span><span class=\"p\">)</span>\n    <span class=\"n\">needs_super</span> <span class=\"o\">=</span> <span class=\"n\">NeedsSuper</span><span class=\"p\">()</span>\n    <span class=\"n\">needs_sub</span> <span class=\"o\">=</span> <span class=\"n\">NeedsSub</span><span class=\"p\">()</span>\n    <span class=\"n\">needs_subsub</span> <span class=\"o\">=</span> <span class=\"n\">NeedsSubSub</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">needs_super</span><span class=\"o\">.</span><span class=\"n\">injected</span><span class=\"p\">,</span> <span class=\"n\">Super</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">needs_sub</span><span class=\"o\">.</span><span class=\"n\">injected</span><span class=\"p\">,</span> <span class=\"n\">MagicMock</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">needs_subsub</span><span class=\"o\">.</span><span class=\"n\">injected</span><span class=\"p\">,</span> <span class=\"n\">SubSub</span><span class=\"p\">)</span>\n</pre>\n<h2><code>match</code></h2>\n<p><code>match</code> is small utility function for matching <code>Context</code> instances\nwith values of an environment variable.</p>\n<pre><span class=\"c1\"># my_script.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serum</span> <span class=\"kn\">import</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">dependency</span><span class=\"p\">,</span> <span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"n\">inject</span>\n\n<span class=\"nd\">@dependency</span>\n<span class=\"k\">class</span> <span class=\"nc\">BaseDependency</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductionDependency</span><span class=\"p\">(</span><span class=\"n\">BaseDependency</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Production!'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestDependency</span><span class=\"p\">(</span><span class=\"n\">BaseDependency</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Test!'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@inject</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">dependency</span><span class=\"p\">:</span> <span class=\"n\">BaseDependency</span><span class=\"p\">):</span>\n    <span class=\"n\">dependency</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">(</span>\n    <span class=\"n\">environment_variable</span><span class=\"o\">=</span><span class=\"s1\">'MY_SCRIPT_ENV'</span><span class=\"p\">,</span> \n    <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">ProductionDependency</span><span class=\"p\">),</span>\n    <span class=\"n\">PROD</span><span class=\"o\">=</span><span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">ProductionDependency</span><span class=\"p\">),</span>\n    <span class=\"n\">TEST</span><span class=\"o\">=</span><span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">TestDependency</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">context</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"p\">()</span>\n</pre>\n<pre><code>&gt; python my_script.py\nProduction!\n</code></pre>\n<pre><code>&gt; MY_SCRIPT_ENV=PROD python my_script.py\nProduction!\n</code></pre>\n<pre><code>&gt; MY_SCRIPT_ENV=TEST python my_script.py\nTest!\n</code></pre>\n<h2>IPython Integration</h2>\n<p>It can be slightly annoying to import some <code>Context</code> and start it as a\ncontext manager in the beginning of every IPython session.\nMoreover, you quite often want to run an IPython REPL in a special context,\ne.g to provide configuration that is normally supplied through command line\narguments in some other way.</p>\n<p>To this end <code>serum</code> can act as an IPython extension. To activate it,\nadd the following lines to your <code>ipython_config.py</code>:</p>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">InteractiveShellApp</span><span class=\"o\">.</span><span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'serum'</span><span class=\"p\">]</span>\n</pre>\n<p>Finally, create a file named <code>ipython_context.py</code> in the root of your project. In it,\nassign the <code>Context</code> instance you would like automatically started to a global\nvariable named <code>context</code>:</p>\n<pre><span class=\"c1\"># ipython_context.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">serum</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span>\n\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n</pre>\n<p>IPython will now enter this context automatically in the beginning of\nevery REPL session started in the root of your project.</p>\n<h1>Why?</h1>\n<p>If you've been researching Dependency Injection frameworks for python,\nyou've no doubt come across this opinion:</p>\n<blockquote>\n<p>You dont need Dependency Injection in python.\nYou can just use duck typing and monkey patching!</p>\n</blockquote>\n<p>The position behind this statement is often that you only need Dependency\nInjection in statically typed languages.</p>\n<p>In truth, you don't really <em>need</em> Dependency Injection in any language,\nstatically typed or otherwise.\nWhen building large applications that need to run in multiple environments however,\nDependency Injection can make your life a lot easier. In my experience,\nexcessive use of monkey patching for managing environments leads to a jumbled\nmess of implicit initialisation steps and <code>if value is None</code> type code.</p>\n<p>In addition to being a framework, I've attempted to design <code>serum</code> to encourage\ndesigning classes that follow the Dependency Inversion Principle:</p>\n<blockquote>\n<p>one should \u201cdepend upon abstractions, <em>not</em> concretions.\"</p>\n</blockquote>\n<p>This is achieved by letting inheritance being the principle way of providing\ndependencies and allowing dependencies to be abstract.</p>\n\n          </div>"}, "last_serial": 4248675, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "b0916df8abe745c63ea6a84e74b60ef6", "sha256": "7267fa04a6354af956c9cb7de137fce8ca372990e5837b85f6fecdbe5d648586"}, "downloads": -1, "filename": "serum-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b0916df8abe745c63ea6a84e74b60ef6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5566, "upload_time": "2018-01-20T00:37:07", "upload_time_iso_8601": "2018-01-20T00:37:07.367342Z", "url": "https://files.pythonhosted.org/packages/c6/2b/3db4e433803f4469ff958a2fb1f507b7e7700192a4811141df97785924f9/serum-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac2227feec3a3154ec6f9cbddb9de64c", "sha256": "23b868c84ae440e24e08717f20c9fb658f89a47dda1f9574ab591cc97d6bd288"}, "downloads": -1, "filename": "serum-0.2.2.tar.gz", "has_sig": false, "md5_digest": "ac2227feec3a3154ec6f9cbddb9de64c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4773, "upload_time": "2018-01-20T00:37:08", "upload_time_iso_8601": "2018-01-20T00:37:08.141467Z", "url": "https://files.pythonhosted.org/packages/59/b2/abb3710c1dd55d92f00b55ab4790b024a749328cf99f2651cf47aa6baa2d/serum-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "2003df898666582268f49d4778f007d8", "sha256": "cc601e43078abd3cbd308ad7de851ac4a12de249b50688faa04feed474b7ae48"}, "downloads": -1, "filename": "serum-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2003df898666582268f49d4778f007d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5575, "upload_time": "2018-01-20T00:44:01", "upload_time_iso_8601": "2018-01-20T00:44:01.787048Z", "url": "https://files.pythonhosted.org/packages/05/a3/de48c84a41c0b19870166bbde1b5fa62f3edc6af27ceea3887f7e3ba31c1/serum-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27fa9e60eac4c892faa46fa36bf0ba3e", "sha256": "55c3d6f78c6dc7aeb7da94bd8d1b47e186b71312fd5dc98e3fb98bff75b34dff"}, "downloads": -1, "filename": "serum-0.2.3.tar.gz", "has_sig": false, "md5_digest": "27fa9e60eac4c892faa46fa36bf0ba3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4809, "upload_time": "2018-01-20T00:44:02", "upload_time_iso_8601": "2018-01-20T00:44:02.566609Z", "url": "https://files.pythonhosted.org/packages/37/4e/18ec9f28934ccf7d1c15bdab9a5b9576825cbc231bcc720b9fd8ff7eae10/serum-0.2.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "b42ee63440a4983a08273edaac4f6002", "sha256": "7a73b736f13946990635219a82213a2b035863b746c1b4ce21ef4d295fa04717"}, "downloads": -1, "filename": "serum-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b42ee63440a4983a08273edaac4f6002", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5657, "upload_time": "2018-01-20T10:28:19", "upload_time_iso_8601": "2018-01-20T10:28:19.775200Z", "url": "https://files.pythonhosted.org/packages/79/de/160d6998f08eee51271abdc741538ea8c635c206f4f6225d5553ad7272af/serum-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8abc8b410e01447b3987d23600bf6b65", "sha256": "a696b0e51281074e198cb4bd7908699de761ab104da03cdac8efd400766d53a4"}, "downloads": -1, "filename": "serum-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8abc8b410e01447b3987d23600bf6b65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4864, "upload_time": "2018-01-20T10:28:20", "upload_time_iso_8601": "2018-01-20T10:28:20.749281Z", "url": "https://files.pythonhosted.org/packages/8b/0f/679c6df685e8c0f8b100c0b08f80c078c5defd02885d061941cc97f10889/serum-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "83ebb06aea342e0d3b43153216f17842", "sha256": "3924145718da50be978d75976c458cce7a6c3f1a0b08616cd74e737e967c14f2"}, "downloads": -1, "filename": "serum-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "83ebb06aea342e0d3b43153216f17842", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6025, "upload_time": "2018-01-23T18:47:34", "upload_time_iso_8601": "2018-01-23T18:47:34.259632Z", "url": "https://files.pythonhosted.org/packages/2b/85/832dbfb0777704b70ea029dd290196e1db694eddb6b477082040a46be727/serum-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "587152f80704fee102512f5cc9bc4d21", "sha256": "f2b3e62515e6a6bd9340a45e3b13aa4c7c63bac928b288ed7caf04fc91957b55"}, "downloads": -1, "filename": "serum-1.1.0.tar.gz", "has_sig": false, "md5_digest": "587152f80704fee102512f5cc9bc4d21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5436, "upload_time": "2018-01-23T18:47:35", "upload_time_iso_8601": "2018-01-23T18:47:35.370207Z", "url": "https://files.pythonhosted.org/packages/1f/a8/e06d72bc03fa42d04b6208b547ada51c6e36a3285ca7dceb0d81a70cf643/serum-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "abdbfcdffae8b512edfe2fe82cb1006e", "sha256": "0f3c45bcbcac16a6c620bf03ffdee14ae91348475032fef58551ddde260709bd"}, "downloads": -1, "filename": "serum-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "abdbfcdffae8b512edfe2fe82cb1006e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6445, "upload_time": "2018-02-01T21:21:28", "upload_time_iso_8601": "2018-02-01T21:21:28.662083Z", "url": "https://files.pythonhosted.org/packages/13/d3/837e812bb82a256c135812eea855d05d9a9e95e9b02760461f83b24b0a32/serum-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e669c47160f2f722d485426f2a0d5d01", "sha256": "9b250b1e0a4650e0100d0fe11fd6e6868b0aebad733428a3d2a2bc0cda2b0600"}, "downloads": -1, "filename": "serum-1.1.1.tar.gz", "has_sig": false, "md5_digest": "e669c47160f2f722d485426f2a0d5d01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5985, "upload_time": "2018-02-01T21:21:29", "upload_time_iso_8601": "2018-02-01T21:21:29.844883Z", "url": "https://files.pythonhosted.org/packages/21/10/03097986f292f1ee1c704a6b1e27b20d259b7d6d7d943f11b41c5bed4056/serum-1.1.1.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "f50a4e2767975a5086fd1eb05529a7ce", "sha256": "8dcdd3c32cb2e4410cd40210a25b29f3fb74fd4c25eaaf903726a8c67d9e63b2"}, "downloads": -1, "filename": "serum-1.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f50a4e2767975a5086fd1eb05529a7ce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6525, "upload_time": "2018-02-02T15:00:01", "upload_time_iso_8601": "2018-02-02T15:00:01.651827Z", "url": "https://files.pythonhosted.org/packages/b1/95/9049de9eadea0835102f7e23d7bb40481834eb2aa56252f67ec21fddb098/serum-1.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38077884e20a8c96306aa12a452655c9", "sha256": "728b7007d0ade7fd4fd0de5aab17dbb8939dc43db52102f3d548cdc772094307"}, "downloads": -1, "filename": "serum-1.1.3.tar.gz", "has_sig": false, "md5_digest": "38077884e20a8c96306aa12a452655c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6183, "upload_time": "2018-02-02T15:00:04", "upload_time_iso_8601": "2018-02-02T15:00:04.535301Z", "url": "https://files.pythonhosted.org/packages/0f/2a/8e474552095955fe0468a325a36a93520bef17952f69a676e1f94a8a42d8/serum-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "47e1742d4846b422d2a5aff96c7ee878", "sha256": "f23fa7c039aeff2705649593a63b26aa9e9d9cc1562a9203ae2b874312b40271"}, "downloads": -1, "filename": "serum-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "47e1742d4846b422d2a5aff96c7ee878", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6468, "upload_time": "2018-02-03T15:25:57", "upload_time_iso_8601": "2018-02-03T15:25:57.668232Z", "url": "https://files.pythonhosted.org/packages/1c/be/7d5b92695283f73faa608a2b738c13975a0a2da86e371dc31b758af2fc3c/serum-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "753eac3052527819a4918b177cbb61da", "sha256": "25b8aeb3d71dcbb3f51937d4b5a525a7756e5711b68c841c3d5c90250dc9f9d8"}, "downloads": -1, "filename": "serum-1.1.4.tar.gz", "has_sig": false, "md5_digest": "753eac3052527819a4918b177cbb61da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6078, "upload_time": "2018-02-03T15:25:59", "upload_time_iso_8601": "2018-02-03T15:25:59.314299Z", "url": "https://files.pythonhosted.org/packages/45/65/61ceddd3055906d159b13ae26f2ce9804bf61a15df4de0619e939db71411/serum-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "a9036935eff2c700c8ce02cd280850e5", "sha256": "e51a17b783b451a36b84e26bbbc3f055501c5274d1ec3cfc52b581c9ea6977e6"}, "downloads": -1, "filename": "serum-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a9036935eff2c700c8ce02cd280850e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6374, "upload_time": "2018-02-07T22:24:23", "upload_time_iso_8601": "2018-02-07T22:24:23.735964Z", "url": "https://files.pythonhosted.org/packages/94/59/d16984a056ce1f6582d6e9e61f1c2a53e29cdcbbda80d192c0f567cc5c32/serum-1.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b739b2b2725ba80d157c5d0013603ab", "sha256": "e09d078ff3d59604228c6fbc331fcc8015fbc4e8e42b5b1faad9dea2c03cd044"}, "downloads": -1, "filename": "serum-1.1.5.tar.gz", "has_sig": false, "md5_digest": "5b739b2b2725ba80d157c5d0013603ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6102, "upload_time": "2018-02-07T22:24:25", "upload_time_iso_8601": "2018-02-07T22:24:25.407445Z", "url": "https://files.pythonhosted.org/packages/f3/f7/8a38c2c4462c53cd8dc1a0897b1c7ca52ed469e47563c171b3cabf00c2c3/serum-1.1.5.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "fdf02112438d7793afb395cee09cb2c1", "sha256": "ad16bcec7f8a45286aa30a41f731499594940e968fcd8405a4afbe113a7b7f09"}, "downloads": -1, "filename": "serum-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fdf02112438d7793afb395cee09cb2c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6456, "upload_time": "2018-02-14T11:49:16", "upload_time_iso_8601": "2018-02-14T11:49:16.500411Z", "url": "https://files.pythonhosted.org/packages/ce/e3/df455bc0fb253dd80ad623fc5a727f1dc5afa2556daa55fd9281d9ba05cb/serum-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34a4052fe69506b80e1790bd302524e8", "sha256": "8622c201de66c5581cd495ebcb2425c8bb5b2555a96fb8a3ac729211be8cb3ee"}, "downloads": -1, "filename": "serum-1.2.0.tar.gz", "has_sig": false, "md5_digest": "34a4052fe69506b80e1790bd302524e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6461, "upload_time": "2018-02-14T11:49:17", "upload_time_iso_8601": "2018-02-14T11:49:17.529287Z", "url": "https://files.pythonhosted.org/packages/13/e6/769d84c068b77ffdcbb8067fb92538c5f20f658e51751885f7d8fd64ef5a/serum-1.2.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "f41567c240d01dd9d0ef59219b947f11", "sha256": "0e69e0d5a3dfb0bbb8313b051c1b3048f1e43ff199fa9e0237688b0806e1103f"}, "downloads": -1, "filename": "serum-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f41567c240d01dd9d0ef59219b947f11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6776, "upload_time": "2018-02-21T20:29:35", "upload_time_iso_8601": "2018-02-21T20:29:35.234312Z", "url": "https://files.pythonhosted.org/packages/02/a4/4c036636413e80f214b6634b300319d094c66c7cca2dcf1163e7ea88f8e3/serum-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "008f59ac7f764e15dcdf085c176ff2c7", "sha256": "df591ea3d8767a98f59ebfafaff1bc11a5964966efa8a51ed318a0e157431f68"}, "downloads": -1, "filename": "serum-2.0.0.tar.gz", "has_sig": false, "md5_digest": "008f59ac7f764e15dcdf085c176ff2c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7075, "upload_time": "2018-02-21T20:29:36", "upload_time_iso_8601": "2018-02-21T20:29:36.626577Z", "url": "https://files.pythonhosted.org/packages/89/a5/5168fa18c5217149ebf5e99361db1380c416ec2080d8c1349c22f8d322dc/serum-2.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "c857e0b005fcc915de670c8f746d9c6e", "sha256": "7e900dd5f2ce915e0225e80c80db564f2e640e1f5b828d36966c94e2eabc8ab5"}, "downloads": -1, "filename": "serum-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c857e0b005fcc915de670c8f746d9c6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7655, "upload_time": "2018-03-11T20:54:20", "upload_time_iso_8601": "2018-03-11T20:54:20.955243Z", "url": "https://files.pythonhosted.org/packages/cf/67/93d917d5b711017cd296fe0075c0efb949a9989077fbe053680bb68c06e3/serum-3.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1393cb82f5f1f95ea018008e930e222c", "sha256": "c24637350d89f9b46c8f755da51948ff5622d7307f39141296d993278530b9f6"}, "downloads": -1, "filename": "serum-3.0.1.tar.gz", "has_sig": false, "md5_digest": "1393cb82f5f1f95ea018008e930e222c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7973, "upload_time": "2018-03-11T20:54:21", "upload_time_iso_8601": "2018-03-11T20:54:21.846160Z", "url": "https://files.pythonhosted.org/packages/fd/13/d6138fa554d842e05cfa37d4b851501cccb547b2f87f1338b6b4cff07aba/serum-3.0.1.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "81c34dcfe6cde990c641c916b03179ac", "sha256": "67c37234ac5e66bf20f0c97259af5d13efac99d1e57ea1f3da48f3af97a54f12"}, "downloads": -1, "filename": "serum-4.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "81c34dcfe6cde990c641c916b03179ac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12312, "upload_time": "2018-04-18T13:40:11", "upload_time_iso_8601": "2018-04-18T13:40:11.551569Z", "url": "https://files.pythonhosted.org/packages/90/9d/d4424fa77d5f036a63a9682a1115639da8fd2e75cf4f3f990767dfebd5cf/serum-4.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "badf99187d900b251df6e64a5073b281", "sha256": "86b2a4730fb3484958ff7a9060d63a2e8d7662b1b7d34e9ee70393b028fa1f51"}, "downloads": -1, "filename": "serum-4.0.0.tar.gz", "has_sig": false, "md5_digest": "badf99187d900b251df6e64a5073b281", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16896, "upload_time": "2018-04-18T13:40:12", "upload_time_iso_8601": "2018-04-18T13:40:12.861488Z", "url": "https://files.pythonhosted.org/packages/be/72/c9de24b5edd8d8fe338f1ed4f95f6370a2a885588c993d854d759c898c1a/serum-4.0.0.tar.gz", "yanked": false}], "4.0.1": [{"comment_text": "", "digests": {"md5": "ee2d1380cae8368d996dbf6fe14da4e2", "sha256": "f9d6a1feeff9f70b8ff48ff652d093a05fe0ebe9de4d7644d4e418bcc896e28e"}, "downloads": -1, "filename": "serum-4.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ee2d1380cae8368d996dbf6fe14da4e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12082, "upload_time": "2018-04-18T14:35:30", "upload_time_iso_8601": "2018-04-18T14:35:30.565842Z", "url": "https://files.pythonhosted.org/packages/3e/9f/d0ba61cb137a0ac0d3facddb38b2d095989ba2b7631043c9a485d9d57211/serum-4.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de42cdcf7e9af819f27d3e03c940e2fc", "sha256": "c90a47ea999d3aa57e71431d40e6b32a2ec48704132df8b73a267515d7f1e2fa"}, "downloads": -1, "filename": "serum-4.0.1.tar.gz", "has_sig": false, "md5_digest": "de42cdcf7e9af819f27d3e03c940e2fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 20488, "upload_time": "2018-04-18T14:35:32", "upload_time_iso_8601": "2018-04-18T14:35:32.582270Z", "url": "https://files.pythonhosted.org/packages/e5/88/7ab9e0d01f422e171fcf30af5f9d64a9ccb59e3210d7673054d76d6d0cb9/serum-4.0.1.tar.gz", "yanked": false}], "4.0.2": [{"comment_text": "", "digests": {"md5": "6bc6d7f422dc8f9a7b5898493efab103", "sha256": "9620c765b826781e32b43e37bae6f66a21e4cb94856c90d7f41b1189de6a6a7d"}, "downloads": -1, "filename": "serum-4.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6bc6d7f422dc8f9a7b5898493efab103", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12116, "upload_time": "2018-04-22T19:56:54", "upload_time_iso_8601": "2018-04-22T19:56:54.769680Z", "url": "https://files.pythonhosted.org/packages/af/f6/87a08060afcc3b121d212344f90576f353f02b0c48749303691c0def5c19/serum-4.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a4342fca3688e296e3a6071c5c4837a", "sha256": "5a670938eb55f9f8fa76b903a009026e71b96d97a820935fa686012a4b3e2b8d"}, "downloads": -1, "filename": "serum-4.0.2.tar.gz", "has_sig": false, "md5_digest": "9a4342fca3688e296e3a6071c5c4837a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17868, "upload_time": "2018-04-22T19:56:55", "upload_time_iso_8601": "2018-04-22T19:56:55.795732Z", "url": "https://files.pythonhosted.org/packages/ab/06/af2b2866c3f57041cd1c384749d4d10b79a18e7033e9bdc1baff2e13a644/serum-4.0.2.tar.gz", "yanked": false}], "5.0.0": [{"comment_text": "", "digests": {"md5": "110977c839d0bc6fdd9e83022b66eb32", "sha256": "eaeac11238569a8f0d69ed9e2559ba87f130e1a5def45214f05e2984ce1037ed"}, "downloads": -1, "filename": "serum-5.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "110977c839d0bc6fdd9e83022b66eb32", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12076, "upload_time": "2018-04-24T14:59:23", "upload_time_iso_8601": "2018-04-24T14:59:23.601358Z", "url": "https://files.pythonhosted.org/packages/dd/0b/95522cc68e4d124261e93e8a014cd2feefa468e353586da13a92cdeac5fc/serum-5.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "784bc5787e737707b3099e117bc7bb28", "sha256": "c75e62fb9c0238dabf8caff74d4b6fdad0d89e09598cf76d1d3b24a7c2e0cbf1"}, "downloads": -1, "filename": "serum-5.0.0.tar.gz", "has_sig": false, "md5_digest": "784bc5787e737707b3099e117bc7bb28", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15520, "upload_time": "2018-04-24T14:59:24", "upload_time_iso_8601": "2018-04-24T14:59:24.312124Z", "url": "https://files.pythonhosted.org/packages/17/8b/d277e44d508e0c2f33885f9762b44dbf9b29845c0e9e36ee1367285899bf/serum-5.0.0.tar.gz", "yanked": false}], "5.1.0": [{"comment_text": "", "digests": {"md5": "b251ea71f5500aea6beab90d0f266b46", "sha256": "165566380d55ae9f58e76e0dcf4882d89a7130ef681d2d6ea0f8c4be0c6c77af"}, "downloads": -1, "filename": "serum-5.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b251ea71f5500aea6beab90d0f266b46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12074, "upload_time": "2018-09-07T14:35:43", "upload_time_iso_8601": "2018-09-07T14:35:43.068554Z", "url": "https://files.pythonhosted.org/packages/26/bf/0e02d4fe8b3438c7d3300648b3c64909df03daffc4d07348cf93e74a39f8/serum-5.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abdb1938dcfdde09188b745c6f66a18f", "sha256": "e3a05656583a6fce914f51e7741ce773d6e97f4516485d456e40a00afb8e2251"}, "downloads": -1, "filename": "serum-5.1.0.tar.gz", "has_sig": false, "md5_digest": "abdb1938dcfdde09188b745c6f66a18f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15373, "upload_time": "2018-09-07T14:35:43", "upload_time_iso_8601": "2018-09-07T14:35:43.892010Z", "url": "https://files.pythonhosted.org/packages/5f/c8/8f43f98bf795ec7de87c98b22c68860319ea2357573de12a2f550d794f11/serum-5.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b251ea71f5500aea6beab90d0f266b46", "sha256": "165566380d55ae9f58e76e0dcf4882d89a7130ef681d2d6ea0f8c4be0c6c77af"}, "downloads": -1, "filename": "serum-5.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b251ea71f5500aea6beab90d0f266b46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12074, "upload_time": "2018-09-07T14:35:43", "upload_time_iso_8601": "2018-09-07T14:35:43.068554Z", "url": "https://files.pythonhosted.org/packages/26/bf/0e02d4fe8b3438c7d3300648b3c64909df03daffc4d07348cf93e74a39f8/serum-5.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abdb1938dcfdde09188b745c6f66a18f", "sha256": "e3a05656583a6fce914f51e7741ce773d6e97f4516485d456e40a00afb8e2251"}, "downloads": -1, "filename": "serum-5.1.0.tar.gz", "has_sig": false, "md5_digest": "abdb1938dcfdde09188b745c6f66a18f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15373, "upload_time": "2018-09-07T14:35:43", "upload_time_iso_8601": "2018-09-07T14:35:43.892010Z", "url": "https://files.pythonhosted.org/packages/5f/c8/8f43f98bf795ec7de87c98b22c68860319ea2357573de12a2f550d794f11/serum-5.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:04 2020"}