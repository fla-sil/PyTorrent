{"info": {"author": "Chris (Someguy123) @ Privex", "author_email": "chris@privex.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "PyJWT\n=====\n\n.. image:: https://travis-ci.com/Privex/pyjwt.svg?branch=master\n   :target: http://travis-ci.com/Privex/pyjwt?branch=master\n\n.. image:: https://ci.appveyor.com/api/projects/status/h8nt70aqtwhht39t?svg=true\n   :target: https://ci.appveyor.com/project/Privex/pyjwt\n\n.. image:: https://img.shields.io/pypi/v/privex-pyjwt.svg\n   :target: https://pypi.python.org/pypi/privex-pyjwt\n\n.. image:: https://coveralls.io/repos/Privex/pyjwt/badge.svg?branch=master\n   :target: https://coveralls.io/r/Privex/pyjwt?branch=master\n\n.. image:: https://readthedocs.org/projects/pyjwt/badge/?version=latest\n   :target: https://pyjwt.readthedocs.io\n\nThis is a fork of https://github.com/jpadilla/pyjwt by `Privex Inc.`_ - allowing us to be able to add our own updates which may\nnot be accepted upstream in ``jpadilla/pyjwt``\n\nOur fork is published as ``privex-pyjwt`` while the original is published as ``PyJWT`` - the packages are mutually\nincompatible, as both use the ``jwt`` top-level namespace.\n\nNotable feature additions by Privex over the original PyJWT package:\n\n* Version 1.8.0\n    * Added support for EdDSA (Ed25519) JWT signing and verification\n\n\n---------------------------------------------------------------------------\n\nA Python implementation of `RFC 7519 <https://tools.ietf.org/html/rfc7519>`_. Original implementation was written by `@progrium <https://github.com/progrium>`_.\n\n\nInstalling\n----------\n\nInstall with **pip**::\n\n\n    pip install privex-pyjwt\n\n\nInstall with **pipenv**::\n\n\n    pipenv install privex-pyjwt\n\n\n**NOTE**:\n\nTo sign/verify with RSA and Ed25519 (EdDSA), the ``cryptography`` package is required.\n\nTo sign/verify with EcDSA, the ``ecdsa`` package is required.\n\nExtra packages::\n\n    pip install -U 'cryptography>=2.6' ecdsa\n    # or with pipenv\n    pipenv install 'cryptography>=2.6' ecdsa\n\n\nSponsor Notice\n--------------\n\n\n**This fork was created by Privex. Support it's development by buying a server from us :)**\n\n.. image:: https://cdn.privex.io/img/promo/privex-banner-728.png\n   :target: https://www.privex.io\n   :align: center\n\n\n\nUsage\n-----\n\n.. code-block:: python\n\n    >>> import jwt\n    >>> encoded = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256')\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg'\n\n    >>> jwt.decode(encoded, 'secret', algorithms=['HS256'])\n    {'some': 'payload'}\n\n\nUsing EdDSA / Ed25519\n---------------------\n\nSupport for EdDSA / Ed25519 was added as of the `Privex fork <https://github.com/Privex/pyjwt>`_ in Version 1.8.0\n\nOur privex-pyjwt package is compatible with other JWT EdDSA implementations, such as `NodeJS's Jose <https://github.com/panva/jose/>`_ package.\nIt can sign tokens with Ed25519 keys which can be verified by NodeJS Jose, and verify tokens signed with Ed25519 by NodeJS Jose.\n\n\n\n\nGenerating/loading an Ed25519 (EdDSA) key\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you want to be able to easily generate Ed25519, RSA and ECDSA public/private keys from within your Python app, consider \nusing `Privex's Python Helpers`_ which includes a cryptography module designed\nto make symmetric / asymmetric encryption simple.\n\nInstalling Privex Helpers::\n\n    # For a minimal install with just the cryptography dependencies\n    # change [full] to [crypto] (though [full] only adds a few small dependencies)\n    pip3 install 'privex-helpers[full]'\n\n\nYou can load/generate an Ed25519 private/public key however you want, but we're using `Privex Helpers`_ 's crypto module\nas an example (and showcase of our library). \n\nThe below code uses `Privex Helpers`_ to generate an Ed25519 keypair and output the private key to id_ed25519 and the public key to id_ed25519.pub.\n\nIf you don't want to save the keys to a file, you can use ``ed_priv, ed_pub = KeyManager.generate_keypair('ed25519')`` instead.\n\n\n.. code-block:: python\n\n\n    from privex.helpers import KeyManager\n\n    ed_priv, ed_pub = KeyManager.output_keypair('id_ed25519', 'id_ed25519.pub', alg='ed25519')\n\n    # ed_priv example contents:\n    # b'-----BEGIN PRIVATE KEY-----\\nMC4CAQAwBQYDK2VwBCIEIBy9N4xfv/9qOiKrxwRKeGfO5ab6lSukKHbuC5vaJ1Mg\\n-----END PRIVATE KEY-----\\n'\n    # ed_pub example contents:\n    # b'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC4pK2dePGgctIAsh0H/tmUrLzx2Vc4Ltc8TN9nfuChG'\n\n\nUsing privex-pyjwt to encode/decode JWT tokens with EdDSA\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPrivate keys must be in PEM format with PKCS8, while public keys can be in either PEM (PKCS8) format or OpenSSH format (``ssh-ed25519 ........ user@host``).\n\nSimply use ``jwt.encode`` and ``jwt.decode`` as normal, pass in your Ed25519 private key for encoding, the private/public key for decoding, \nand set the algorithm to ``EdDSA``.\n\n.. code-block:: python\n\n    import jwt\n\n    # Tokens can only encoded with an Ed25519 private key\n    token = jwt.encode({'hello': 'world'}, ed_priv, algorithm='EdDSA')\n\n    # resulting token: b'eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSJ9.eyJoZWxsbyI6IndvcmxkIn0.HEDJTw1jNaz82WuP3O1l5_i-eaaj3DBEKesPUsInSgKuvbav6XaLORERs7wPrmS14DN_WlzDUCn0LmVGl4VlCg'\n\n    # However, tokens can be decoded using EITHER the public key (PEM / OpenSSH) or the private key, \n    # as we can interpolate the public key from the private key\n    jwt.decode(token, ed_priv, algorithms=['EdDSA'])\n\n    # Output: {'hello': 'world'}\n\n\n.. _Privex's Python Helpers: https://github.com/Privex/python-helpers\n.. _Privex Helpers: https://github.com/Privex/python-helpers\n.. _Privex Inc.: https://www.privex.io/\n\n\nCommand line\n------------\n\nUsage::\n\n    pyjwt [options] INPUT\n\nDecoding examples::\n\n    pyjwt --key=secret decode TOKEN\n    pyjwt decode --no-verify TOKEN\n\nSee more options executing ``pyjwt --help``.\n\n\nDocumentation\n-------------\n\nView the full docs online at https://pyjwt.readthedocs.io/en/latest/\n\n\nTests\n-----\n\nYou can run tests from the project root after cloning with:\n\n.. code-block:: sh\n\n    $ python setup.py test\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Privex/pyjwt", "keywords": "jwt json web token security signing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "privex-pyjwt", "package_url": "https://pypi.org/project/privex-pyjwt/", "platform": "", "project_url": "https://pypi.org/project/privex-pyjwt/", "project_urls": {"Homepage": "https://github.com/Privex/pyjwt"}, "release_url": "https://pypi.org/project/privex-pyjwt/1.8.0/", "requires_dist": ["cryptography (>=1.4) ; extra == 'crypto'", "pytest (<5.0.0,>=4.0.1) ; extra == 'dev'", "pytest-cov (<3.0.0,>=2.6.0) ; extra == 'dev'", "cryptography (>=1.4) ; extra == 'dev'", "mypy ; extra == 'dev'", "pre-commit ; extra == 'dev'", "pytest (<5.0.0,>=4.0.1) ; extra == 'tests'", "pytest-cov (<3.0.0,>=2.6.0) ; extra == 'tests'"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "JSON Web Token implementation in Python (fork of PyJWT)", "version": "1.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"http://travis-ci.com/Privex/pyjwt?branch=master\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/Privex/pyjwt.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1575091020a2bca4873f15a9a6684bddb0522610/68747470733a2f2f7472617669732d63692e636f6d2f5072697665782f70796a77742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/Privex/pyjwt\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/h8nt70aqtwhht39t?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b1fa31446266e0bca4bf110dca4e235b632bed9/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f68386e743730617174776868743339743f7376673d74727565\"></a>\n<a href=\"https://pypi.python.org/pypi/privex-pyjwt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/privex-pyjwt.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d55d1881b5245f28d488674f965b789693ae1e8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7072697665782d70796a77742e737667\"></a>\n<a href=\"https://coveralls.io/r/Privex/pyjwt?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/Privex/pyjwt/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29053b291c4629fd4a99f822aeae98042e5f9471/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f5072697665782f70796a77742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pyjwt.readthedocs.io\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/pyjwt/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4ae3eed06fffa0df9a9eb5fa78ea5eb53d4fef1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796a77742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>This is a fork of <a href=\"https://github.com/jpadilla/pyjwt\" rel=\"nofollow\">https://github.com/jpadilla/pyjwt</a> by <a href=\"https://www.privex.io/\" rel=\"nofollow\">Privex Inc.</a> - allowing us to be able to add our own updates which may\nnot be accepted upstream in <tt>jpadilla/pyjwt</tt></p>\n<p>Our fork is published as <tt><span class=\"pre\">privex-pyjwt</span></tt> while the original is published as <tt>PyJWT</tt> - the packages are mutually\nincompatible, as both use the <tt>jwt</tt> top-level namespace.</p>\n<p>Notable feature additions by Privex over the original PyJWT package:</p>\n<ul>\n<li><dl>\n<dt>Version 1.8.0</dt>\n<dd><ul>\n<li>Added support for EdDSA (Ed25519) JWT signing and verification</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<hr class=\"docutils\">\n<p>A Python implementation of <a href=\"https://tools.ietf.org/html/rfc7519\" rel=\"nofollow\">RFC 7519</a>. Original implementation was written by <a href=\"https://github.com/progrium\" rel=\"nofollow\">@progrium</a>.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install with <strong>pip</strong>:</p>\n<pre>pip install privex-pyjwt\n</pre>\n<p>Install with <strong>pipenv</strong>:</p>\n<pre>pipenv install privex-pyjwt\n</pre>\n<p><strong>NOTE</strong>:</p>\n<p>To sign/verify with RSA and Ed25519 (EdDSA), the <tt>cryptography</tt> package is required.</p>\n<p>To sign/verify with EcDSA, the <tt>ecdsa</tt> package is required.</p>\n<p>Extra packages:</p>\n<pre>pip install -U 'cryptography&gt;=2.6' ecdsa\n# or with pipenv\npipenv install 'cryptography&gt;=2.6' ecdsa\n</pre>\n</div>\n<div id=\"sponsor-notice\">\n<h2>Sponsor Notice</h2>\n<p><strong>This fork was created by Privex. Support it\u2019s development by buying a server from us :)</strong></p>\n<a href=\"https://www.privex.io\" rel=\"nofollow\"><img alt=\"https://cdn.privex.io/img/promo/privex-banner-728.png\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b17237607b1753e75920cc707e803b808964617/68747470733a2f2f63646e2e7072697665782e696f2f696d672f70726f6d6f2f7072697665782d62616e6e65722d3732382e706e67\"></a>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">jwt</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">encoded</span> <span class=\"o\">=</span> <span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">({</span><span class=\"s1\">'some'</span><span class=\"p\">:</span> <span class=\"s1\">'payload'</span><span class=\"p\">},</span> <span class=\"s1\">'secret'</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"s1\">'HS256'</span><span class=\"p\">)</span>\n<span class=\"s1\">'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg'</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"s1\">'secret'</span><span class=\"p\">,</span> <span class=\"n\">algorithms</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'HS256'</span><span class=\"p\">])</span>\n<span class=\"p\">{</span><span class=\"s1\">'some'</span><span class=\"p\">:</span> <span class=\"s1\">'payload'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"using-eddsa-ed25519\">\n<h2>Using EdDSA / Ed25519</h2>\n<p>Support for EdDSA / Ed25519 was added as of the <a href=\"https://github.com/Privex/pyjwt\" rel=\"nofollow\">Privex fork</a> in Version 1.8.0</p>\n<p>Our privex-pyjwt package is compatible with other JWT EdDSA implementations, such as <a href=\"https://github.com/panva/jose/\" rel=\"nofollow\">NodeJS\u2019s Jose</a> package.\nIt can sign tokens with Ed25519 keys which can be verified by NodeJS Jose, and verify tokens signed with Ed25519 by NodeJS Jose.</p>\n<div id=\"generating-loading-an-ed25519-eddsa-key\">\n<h3>Generating/loading an Ed25519 (EdDSA) key</h3>\n<p>If you want to be able to easily generate Ed25519, RSA and ECDSA public/private keys from within your Python app, consider\nusing <a href=\"https://github.com/Privex/python-helpers\" rel=\"nofollow\">Privex\u2019s Python Helpers</a> which includes a cryptography module designed\nto make symmetric / asymmetric encryption simple.</p>\n<p>Installing Privex Helpers:</p>\n<pre># For a minimal install with just the cryptography dependencies\n# change [full] to [crypto] (though [full] only adds a few small dependencies)\npip3 install 'privex-helpers[full]'\n</pre>\n<p>You can load/generate an Ed25519 private/public key however you want, but we\u2019re using <a href=\"https://github.com/Privex/python-helpers\" rel=\"nofollow\">Privex Helpers</a> \u2018s crypto module\nas an example (and showcase of our library).</p>\n<p>The below code uses <a href=\"https://github.com/Privex/python-helpers\" rel=\"nofollow\">Privex Helpers</a> to generate an Ed25519 keypair and output the private key to id_ed25519 and the public key to id_ed25519.pub.</p>\n<p>If you don\u2019t want to save the keys to a file, you can use <tt>ed_priv, ed_pub = <span class=\"pre\">KeyManager.generate_keypair('ed25519')</span></tt> instead.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">privex.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">KeyManager</span>\n\n<span class=\"n\">ed_priv</span><span class=\"p\">,</span> <span class=\"n\">ed_pub</span> <span class=\"o\">=</span> <span class=\"n\">KeyManager</span><span class=\"o\">.</span><span class=\"n\">output_keypair</span><span class=\"p\">(</span><span class=\"s1\">'id_ed25519'</span><span class=\"p\">,</span> <span class=\"s1\">'id_ed25519.pub'</span><span class=\"p\">,</span> <span class=\"n\">alg</span><span class=\"o\">=</span><span class=\"s1\">'ed25519'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ed_priv example contents:</span>\n<span class=\"c1\"># b'-----BEGIN PRIVATE KEY-----\\nMC4CAQAwBQYDK2VwBCIEIBy9N4xfv/9qOiKrxwRKeGfO5ab6lSukKHbuC5vaJ1Mg\\n-----END PRIVATE KEY-----\\n'</span>\n<span class=\"c1\"># ed_pub example contents:</span>\n<span class=\"c1\"># b'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC4pK2dePGgctIAsh0H/tmUrLzx2Vc4Ltc8TN9nfuChG'</span>\n</pre>\n</div>\n<div id=\"using-privex-pyjwt-to-encode-decode-jwt-tokens-with-eddsa\">\n<h3>Using privex-pyjwt to encode/decode JWT tokens with EdDSA</h3>\n<p>Private keys must be in PEM format with PKCS8, while public keys can be in either PEM (PKCS8) format or OpenSSH format (<tt><span class=\"pre\">ssh-ed25519</span> <span class=\"pre\">........</span> user@host</tt>).</p>\n<p>Simply use <tt>jwt.encode</tt> and <tt>jwt.decode</tt> as normal, pass in your Ed25519 private key for encoding, the private/public key for decoding,\nand set the algorithm to <tt>EdDSA</tt>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jwt</span>\n\n<span class=\"c1\"># Tokens can only encoded with an Ed25519 private key</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">({</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">},</span> <span class=\"n\">ed_priv</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"s1\">'EdDSA'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># resulting token: b'eyJ0eXAiOiJKV1QiLCJhbGciOiJFZERTQSJ9.eyJoZWxsbyI6IndvcmxkIn0.HEDJTw1jNaz82WuP3O1l5_i-eaaj3DBEKesPUsInSgKuvbav6XaLORERs7wPrmS14DN_WlzDUCn0LmVGl4VlCg'</span>\n\n<span class=\"c1\"># However, tokens can be decoded using EITHER the public key (PEM / OpenSSH) or the private key,</span>\n<span class=\"c1\"># as we can interpolate the public key from the private key</span>\n<span class=\"n\">jwt</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">ed_priv</span><span class=\"p\">,</span> <span class=\"n\">algorithms</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'EdDSA'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Output: {'hello': 'world'}</span>\n</pre>\n</div>\n</div>\n<div id=\"command-line\">\n<h2>Command line</h2>\n<p>Usage:</p>\n<pre>pyjwt [options] INPUT\n</pre>\n<p>Decoding examples:</p>\n<pre>pyjwt --key=secret decode TOKEN\npyjwt decode --no-verify TOKEN\n</pre>\n<p>See more options executing <tt>pyjwt <span class=\"pre\">--help</span></tt>.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>View the full docs online at <a href=\"https://pyjwt.readthedocs.io/en/latest/\" rel=\"nofollow\">https://pyjwt.readthedocs.io/en/latest/</a></p>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>You can run tests from the project root after cloning with:</p>\n<pre>$ python setup.py <span class=\"nb\">test</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6073214, "releases": {"1.8.0": [{"comment_text": "", "digests": {"md5": "ba753fd07ce66090b69c12682de75df3", "sha256": "74d2e9ed97153d297fcbf60717e8de461c69e8ecb07773608ba6a2e05f797417"}, "downloads": -1, "filename": "privex_pyjwt-1.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ba753fd07ce66090b69c12682de75df3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22031, "upload_time": "2019-11-04T05:28:32", "upload_time_iso_8601": "2019-11-04T05:28:32.548980Z", "url": "https://files.pythonhosted.org/packages/d1/60/7e5e5efdbaae1321b5ab8a6b81ebb1f3b08517f01f08085ef7de1a63acbe/privex_pyjwt-1.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59a220a8aa48b5076b61e45a4b227b75", "sha256": "c4d21dfe1b8d2049697fb51175fffbe35da28f6f4fb2c23858658f8d0e7bef17"}, "downloads": -1, "filename": "privex_pyjwt-1.8.0.tar.gz", "has_sig": false, "md5_digest": "59a220a8aa48b5076b61e45a4b227b75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 85638, "upload_time": "2019-11-04T05:28:35", "upload_time_iso_8601": "2019-11-04T05:28:35.222253Z", "url": "https://files.pythonhosted.org/packages/2a/7e/1fc687c345a1b172f299db8bd9baeb634cce9fb0fa920dddc5d1d16a74cf/privex_pyjwt-1.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba753fd07ce66090b69c12682de75df3", "sha256": "74d2e9ed97153d297fcbf60717e8de461c69e8ecb07773608ba6a2e05f797417"}, "downloads": -1, "filename": "privex_pyjwt-1.8.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ba753fd07ce66090b69c12682de75df3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22031, "upload_time": "2019-11-04T05:28:32", "upload_time_iso_8601": "2019-11-04T05:28:32.548980Z", "url": "https://files.pythonhosted.org/packages/d1/60/7e5e5efdbaae1321b5ab8a6b81ebb1f3b08517f01f08085ef7de1a63acbe/privex_pyjwt-1.8.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59a220a8aa48b5076b61e45a4b227b75", "sha256": "c4d21dfe1b8d2049697fb51175fffbe35da28f6f4fb2c23858658f8d0e7bef17"}, "downloads": -1, "filename": "privex_pyjwt-1.8.0.tar.gz", "has_sig": false, "md5_digest": "59a220a8aa48b5076b61e45a4b227b75", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 85638, "upload_time": "2019-11-04T05:28:35", "upload_time_iso_8601": "2019-11-04T05:28:35.222253Z", "url": "https://files.pythonhosted.org/packages/2a/7e/1fc687c345a1b172f299db8bd9baeb634cce9fb0fa920dddc5d1d16a74cf/privex_pyjwt-1.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:09 2020"}