{"info": {"author": "inovex GmbH", "author_email": "list-ito+illuminatio@inovex.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "# illuminatio - The kubernetes network policy validator\n\n[![Build Status](https://travis-ci.org/inovex/illuminatio.svg?branch=master)](https://travis-ci.org/inovex/illuminatio)\n[![codecov](https://codecov.io/gh/inovex/illuminatio/branch/master/graph/badge.svg)](https://codecov.io/gh/inovex/illuminatio)\n\n![logo](/img/logo_small.png)\n\nilluminatio is a tool for automatically testing kubernetes network policies.\nSimply execute `illuminatio clean run`\nand illuminatio will scan your kubernetes cluster for network policies, build test cases accordingly and execute them\nto determine if the policies are in effect.\n\nAn overview of the concept is visualized in [the concept doc](docs/concept.md).\n\n## Demo\n\n![Demo with NetworkPolicy enabled](img/demo-netpol-enabled.gif)\n\nWatch it on asciinema with [NetworkPolicy enabled](https://asciinema.org/a/273548) or with [NetworkPolicy disabled](https://asciinema.org/a/273556).\n\n## Getting started\n\nFollow these instructions to get illuminatio up and running.\n\n## Prerequisites\n\n- Python 3.6 or greater\n- Pip 3\n\n## Installation\n\nwith pip:\n\n```bash\npip3 install illuminatio\n```\n\nor directly from the repository:\n\n```bash\npip install git+https://github.com/inovex/illuminatio\n```\n\n### Kubectl plugin\n\nIn order to use `illuminatio` as a [kubectl plugin](https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins) run the following command:\n\n```bash\nln -s $(which illuminatio) /usr/local/bin/kubectl-illuminatio\n```\n\nAnd now cross check that the plugin exists:\n\n```bash\nkubectl plugin list --name-only | grep illuminatio\nThe following compatible plugins are available:\n\nkubectl-illuminatio\n```\n\n## Example Usage\n\nCreate a Deployment to test with:\n\n```bash\nkubectl create deployment web --image=nginx\nkubectl expose deployment web --port 80 --target-port 80\n```\n\nDefine and create a NetworkPolicy for your Deployment:\n\n```bash\ncat <<EOF | kubectl create -f -\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: web-deny-all\nspec:\n  podSelector:\n    matchLabels:\n      app: web\n  ingress: []\nEOF\n```\n\nTest your newly created NetworkPolicy:\n\n```bash\nilluminatio clean run\nStarting cleaning resources with policies ['on-request', 'always']\nDeleting namespaces [] with cleanup policy on-request\nDeleting namespaces [] with cleanup policy always\nDeleting DSs in default with cleanup policy on-request\nDeleting pods in default with cleanup policy on-request\nDeleting svcs in default with cleanup policy on-request\nDeleting CfgMaps in default with cleanup policy on-request\nDeleting CRBs  with cleanup policy on-request globally\nDeleting SAs in default with cleanup policy on-request\nDeleting DSs in default with cleanup policy always\nDeleting pods in default with cleanup policy always\nDeleting svcs in default with cleanup policy always\nDeleting CfgMaps in default with cleanup policy always\nDeleting CRBs  with cleanup policy always globally\nDeleting SAs in default with cleanup policy always\nFinished cleanUp\n\nStarting test generation and run.\nGot cases: [NetworkTestCase(from=ClusterHost(namespace=default, podLabels={'app': 'web'}), to=ClusterHost(namespace=default, podLabels={'app': 'web'}), port=-*)]\nGenerated 1 cases in 0.0701 seconds\nFROM             TO               PORT\ndefault:app=web  default:app=web  -*\n\nUsing existing cluster role\nCreating cluster role binding\nTestResults: {'default:app=web': {'default:app=web': {'-*': {'success': True}}}}\nFinished running 1 tests in 18.7413 seconds\nFROM             TO               PORT  RESULT\ndefault:app=web  default:app=web  -*    success\n```\n\nThe `clean` keyword assures that illuminatio clears all potentially existing resources created in past illuminatio runs to prevent potential issues, however no user generated resources are affected.\n\n*PLEASE NOTE* that currently each new run requires a clean, as the runners do not continuously look for new cases.\n\nFor the case that you really want to keep the generated resources you are free to omit the `clean` keyword.\n\nIf you are done testing you might want to easily delete all resources created by illuminatio:\n\n```bash\nilluminatio clean\n```\n\nTo preview generated test cases without running tests use `illuminatio run`'s `--dry` option:\n\n```bash\nilluminatio run --dry\nStarting test generation and run.\nGot cases: [NetworkTestCase(from=ClusterHost(namespace=default, podLabels={'app': 'web'}), to=ClusterHost(namespace=default, podLabels={'app': 'web'}), port=-*)]\nGenerated 1 cases in 0.0902 seconds\nFROM             TO               PORT\ndefault:app=web  default:app=web  -*\n\nSkipping test execution as --dry was set\n```\n\nAll options and further information can be found using the `--help` flag on any level:\n\n```bash\nilluminatio --help\n```\n\n```Bash\nUsage: illuminatio [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n\nOptions:\n  -v, --verbosity LVL  Either CRITICAL, ERROR, WARNING, INFO or DEBUG\n  --incluster\n  --help               Show this message and exit.\n\nCommands:\n  clean\n  run\n```\n\n## Docker Usage\n\nInstead of installing the `illumnatio` cli on your machine you can also use our Docker image.\nYou will need to provide the `kubeconfig` to the container and probably some certificates:\n\n```bash\ndocker run -ti -v ~/.kube:/home/illuminatio/.kube:ro inovex/illuminatio clean run\n```\n\n### Minikube\n\nMinikube will store the certificates in the users home so we need to pass these to the container:\n\n```bash\ndocker run -ti -v \"${HOME}/.minikube\":\"${HOME}/.minikube\" -v \"${HOME}/.kube:\"/home/illuminatio/.kube:ro inovex/illuminatio clean run\n```\n\nIf the minikube VM is not reachable from your container try to pass the `--net=host` flag to the docker run command.\n\n## Compatibility\n\nilluminatio 1.1 was tested using:\n\n- python 3.5.2\n- pip 19.2.1\n\nilluminatio 1.1 is confirmed to be working properly with the following kubernetes environments:\n\n- minikube v0.34.1, kubernetes v1.13.3\n- Google Kubernetes Engine, v1.12.8-gke.10\n- kubeadm 1.15.0-00, kubernetes v1.15.2\n\n### PodSecurityPolicy\n\nIf your cluster has the [PodSecurityPolicy](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#podsecuritypolicy) Admission Controller you must ensure that the illuminatio runner has the following rights to be created:\n\n- Wants to run as root\n- Needs the `SYS_ADMIN` capability\n- Needs `allowPrivilegeEscalation: true`\n- Needs access to the `hostPath` for the network namespaces and the cri socket\n\nA `PodSecurityPolicy` granting these privileges needs to be bound to the `illuminatio-runner` `ServiceAccount` in the `illuminatio` namespace.\nFor more details look at the [illuminatio DaemonSet](src/illuminatio/manifests/containerd-daemonset.yaml)\n\n## References\n\nThe logo was created by Pia Blum.\n\nExample Network Policies are inspired by\n[kubernetes-network-policy-recipes](https://github.com/ahmetb/kubernetes-network-policy-recipes)\n\nPresentation from [ContainerDays 2019](https://www.youtube.com/watch?v=eEkTvAez8HA&list=PLHhKcdBlprMdg-fwPD1b3IjBRR_Ga09H0&index=36), [slides](https://www.inovex.de/de/content-pool/vortraege/network-policies)\n\n## Contributing\n\nWe are happy to read your [issues](https://github.com/inovex/illuminatio/issues) and accept your [Pull Requests.](https://github.com/inovex/illuminatio/compare)\nThis project uses the [standard github flow](https://help.github.com/en/articles/creating-a-pull-request-from-a-fork).\nFor more information on developing illuminatio refer to [the development docs](docs/developing.md).\n\n## License\n\nThis project excluding the logo is licensed under the terms of the Apache 2.0 license.\nThe logo is licensed under the terms of the CC BY-NC-ND 4.0 license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/inovex/illuminatio", "keywords": "", "license": "apache", "maintainer": "", "maintainer_email": "", "name": "illuminatio", "package_url": "https://pypi.org/project/illuminatio/", "platform": "any", "project_url": "https://pypi.org/project/illuminatio/", "project_urls": {"Homepage": "https://github.com/inovex/illuminatio"}, "release_url": "https://pypi.org/project/illuminatio/1.3.2/", "requires_dist": ["requests", "google-auth", "python-dateutil", "pyyaml", "oauthlib", "kubernetes", "click", "click-log", "docker", "nsenter", "attrs", "pluggy", "pytest", "urllib3", "setuptools", "termcolor"], "requires_python": "", "summary": "The kubernetes network policy validator.", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>illuminatio - The kubernetes network policy validator</h1>\n<p><a href=\"https://travis-ci.org/inovex/illuminatio\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1ea6637fb6afd8bdfbd33080779090762f26fab/68747470733a2f2f7472617669732d63692e6f72672f696e6f7665782f696c6c756d696e6174696f2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/inovex/illuminatio\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee8ae6261b6ab54b92a43de23ea8aeb468b5ae92/68747470733a2f2f636f6465636f762e696f2f67682f696e6f7665782f696c6c756d696e6174696f2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p><img alt=\"logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f6d084c0d6dac57d9893c7a3af8323b3a35c5ba/2f696d672f6c6f676f5f736d616c6c2e706e67\"></p>\n<p>illuminatio is a tool for automatically testing kubernetes network policies.\nSimply execute <code>illuminatio clean run</code>\nand illuminatio will scan your kubernetes cluster for network policies, build test cases accordingly and execute them\nto determine if the policies are in effect.</p>\n<p>An overview of the concept is visualized in <a href=\"docs/concept.md\" rel=\"nofollow\">the concept doc</a>.</p>\n<h2>Demo</h2>\n<p><img alt=\"Demo with NetworkPolicy enabled\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55fcd54a1f62ec4eda28cd8111b1837ee9545a58/696d672f64656d6f2d6e6574706f6c2d656e61626c65642e676966\"></p>\n<p>Watch it on asciinema with <a href=\"https://asciinema.org/a/273548\" rel=\"nofollow\">NetworkPolicy enabled</a> or with <a href=\"https://asciinema.org/a/273556\" rel=\"nofollow\">NetworkPolicy disabled</a>.</p>\n<h2>Getting started</h2>\n<p>Follow these instructions to get illuminatio up and running.</p>\n<h2>Prerequisites</h2>\n<ul>\n<li>Python 3.6 or greater</li>\n<li>Pip 3</li>\n</ul>\n<h2>Installation</h2>\n<p>with pip:</p>\n<pre>pip3 install illuminatio\n</pre>\n<p>or directly from the repository:</p>\n<pre>pip install git+https://github.com/inovex/illuminatio\n</pre>\n<h3>Kubectl plugin</h3>\n<p>In order to use <code>illuminatio</code> as a <a href=\"https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins\" rel=\"nofollow\">kubectl plugin</a> run the following command:</p>\n<pre>ln -s <span class=\"k\">$(</span>which illuminatio<span class=\"k\">)</span> /usr/local/bin/kubectl-illuminatio\n</pre>\n<p>And now cross check that the plugin exists:</p>\n<pre>kubectl plugin list --name-only <span class=\"p\">|</span> grep illuminatio\nThe following compatible plugins are available:\n\nkubectl-illuminatio\n</pre>\n<h2>Example Usage</h2>\n<p>Create a Deployment to test with:</p>\n<pre>kubectl create deployment web --image<span class=\"o\">=</span>nginx\nkubectl expose deployment web --port <span class=\"m\">80</span> --target-port <span class=\"m\">80</span>\n</pre>\n<p>Define and create a NetworkPolicy for your Deployment:</p>\n<pre>cat <span class=\"s\">&lt;&lt;EOF | kubectl create -f -</span>\n<span class=\"s\">kind: NetworkPolicy</span>\n<span class=\"s\">apiVersion: networking.k8s.io/v1</span>\n<span class=\"s\">metadata:</span>\n<span class=\"s\">  name: web-deny-all</span>\n<span class=\"s\">spec:</span>\n<span class=\"s\">  podSelector:</span>\n<span class=\"s\">    matchLabels:</span>\n<span class=\"s\">      app: web</span>\n<span class=\"s\">  ingress: []</span>\n<span class=\"s\">EOF</span>\n</pre>\n<p>Test your newly created NetworkPolicy:</p>\n<pre>illuminatio clean run\nStarting cleaning resources with policies <span class=\"o\">[</span><span class=\"s1\">'on-request'</span>, <span class=\"s1\">'always'</span><span class=\"o\">]</span>\nDeleting namespaces <span class=\"o\">[]</span> with cleanup policy on-request\nDeleting namespaces <span class=\"o\">[]</span> with cleanup policy always\nDeleting DSs in default with cleanup policy on-request\nDeleting pods in default with cleanup policy on-request\nDeleting svcs in default with cleanup policy on-request\nDeleting CfgMaps in default with cleanup policy on-request\nDeleting CRBs  with cleanup policy on-request globally\nDeleting SAs in default with cleanup policy on-request\nDeleting DSs in default with cleanup policy always\nDeleting pods in default with cleanup policy always\nDeleting svcs in default with cleanup policy always\nDeleting CfgMaps in default with cleanup policy always\nDeleting CRBs  with cleanup policy always globally\nDeleting SAs in default with cleanup policy always\nFinished cleanUp\n\nStarting <span class=\"nb\">test</span> generation and run.\nGot cases: <span class=\"o\">[</span>NetworkTestCase<span class=\"o\">(</span><span class=\"nv\">from</span><span class=\"o\">=</span>ClusterHost<span class=\"o\">(</span><span class=\"nv\">namespace</span><span class=\"o\">=</span>default, <span class=\"nv\">podLabels</span><span class=\"o\">={</span><span class=\"s1\">'app'</span>: <span class=\"s1\">'web'</span><span class=\"o\">})</span>, <span class=\"nv\">to</span><span class=\"o\">=</span>ClusterHost<span class=\"o\">(</span><span class=\"nv\">namespace</span><span class=\"o\">=</span>default, <span class=\"nv\">podLabels</span><span class=\"o\">={</span><span class=\"s1\">'app'</span>: <span class=\"s1\">'web'</span><span class=\"o\">})</span>, <span class=\"nv\">port</span><span class=\"o\">=</span>-*<span class=\"o\">)]</span>\nGenerated <span class=\"m\">1</span> cases in <span class=\"m\">0</span>.0701 seconds\nFROM             TO               PORT\ndefault:app<span class=\"o\">=</span>web  default:app<span class=\"o\">=</span>web  -*\n\nUsing existing cluster role\nCreating cluster role binding\nTestResults: <span class=\"o\">{</span><span class=\"s1\">'default:app=web'</span>: <span class=\"o\">{</span><span class=\"s1\">'default:app=web'</span>: <span class=\"o\">{</span><span class=\"s1\">'-*'</span>: <span class=\"o\">{</span><span class=\"s1\">'success'</span>: True<span class=\"o\">}}}}</span>\nFinished running <span class=\"m\">1</span> tests in <span class=\"m\">18</span>.7413 seconds\nFROM             TO               PORT  RESULT\ndefault:app<span class=\"o\">=</span>web  default:app<span class=\"o\">=</span>web  -*    success\n</pre>\n<p>The <code>clean</code> keyword assures that illuminatio clears all potentially existing resources created in past illuminatio runs to prevent potential issues, however no user generated resources are affected.</p>\n<p><em>PLEASE NOTE</em> that currently each new run requires a clean, as the runners do not continuously look for new cases.</p>\n<p>For the case that you really want to keep the generated resources you are free to omit the <code>clean</code> keyword.</p>\n<p>If you are done testing you might want to easily delete all resources created by illuminatio:</p>\n<pre>illuminatio clean\n</pre>\n<p>To preview generated test cases without running tests use <code>illuminatio run</code>'s <code>--dry</code> option:</p>\n<pre>illuminatio run --dry\nStarting <span class=\"nb\">test</span> generation and run.\nGot cases: <span class=\"o\">[</span>NetworkTestCase<span class=\"o\">(</span><span class=\"nv\">from</span><span class=\"o\">=</span>ClusterHost<span class=\"o\">(</span><span class=\"nv\">namespace</span><span class=\"o\">=</span>default, <span class=\"nv\">podLabels</span><span class=\"o\">={</span><span class=\"s1\">'app'</span>: <span class=\"s1\">'web'</span><span class=\"o\">})</span>, <span class=\"nv\">to</span><span class=\"o\">=</span>ClusterHost<span class=\"o\">(</span><span class=\"nv\">namespace</span><span class=\"o\">=</span>default, <span class=\"nv\">podLabels</span><span class=\"o\">={</span><span class=\"s1\">'app'</span>: <span class=\"s1\">'web'</span><span class=\"o\">})</span>, <span class=\"nv\">port</span><span class=\"o\">=</span>-*<span class=\"o\">)]</span>\nGenerated <span class=\"m\">1</span> cases in <span class=\"m\">0</span>.0902 seconds\nFROM             TO               PORT\ndefault:app<span class=\"o\">=</span>web  default:app<span class=\"o\">=</span>web  -*\n\nSkipping <span class=\"nb\">test</span> execution as --dry was <span class=\"nb\">set</span>\n</pre>\n<p>All options and further information can be found using the <code>--help</code> flag on any level:</p>\n<pre>illuminatio --help\n</pre>\n<pre>Usage: illuminatio <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND1 <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>... <span class=\"o\">[</span>COMMAND2 <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...<span class=\"o\">]</span>...\n\nOptions:\n  -v, --verbosity LVL  Either CRITICAL, ERROR, WARNING, INFO or DEBUG\n  --incluster\n  --help               Show this message and exit.\n\nCommands:\n  clean\n  run\n</pre>\n<h2>Docker Usage</h2>\n<p>Instead of installing the <code>illumnatio</code> cli on your machine you can also use our Docker image.\nYou will need to provide the <code>kubeconfig</code> to the container and probably some certificates:</p>\n<pre>docker run -ti -v ~/.kube:/home/illuminatio/.kube:ro inovex/illuminatio clean run\n</pre>\n<h3>Minikube</h3>\n<p>Minikube will store the certificates in the users home so we need to pass these to the container:</p>\n<pre>docker run -ti -v <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">HOME</span><span class=\"si\">}</span><span class=\"s2\">/.minikube\"</span>:<span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">HOME</span><span class=\"si\">}</span><span class=\"s2\">/.minikube\"</span> -v <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">HOME</span><span class=\"si\">}</span><span class=\"s2\">/.kube:\"</span>/home/illuminatio/.kube:ro inovex/illuminatio clean run\n</pre>\n<p>If the minikube VM is not reachable from your container try to pass the <code>--net=host</code> flag to the docker run command.</p>\n<h2>Compatibility</h2>\n<p>illuminatio 1.1 was tested using:</p>\n<ul>\n<li>python 3.5.2</li>\n<li>pip 19.2.1</li>\n</ul>\n<p>illuminatio 1.1 is confirmed to be working properly with the following kubernetes environments:</p>\n<ul>\n<li>minikube v0.34.1, kubernetes v1.13.3</li>\n<li>Google Kubernetes Engine, v1.12.8-gke.10</li>\n<li>kubeadm 1.15.0-00, kubernetes v1.15.2</li>\n</ul>\n<h3>PodSecurityPolicy</h3>\n<p>If your cluster has the <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#podsecuritypolicy\" rel=\"nofollow\">PodSecurityPolicy</a> Admission Controller you must ensure that the illuminatio runner has the following rights to be created:</p>\n<ul>\n<li>Wants to run as root</li>\n<li>Needs the <code>SYS_ADMIN</code> capability</li>\n<li>Needs <code>allowPrivilegeEscalation: true</code></li>\n<li>Needs access to the <code>hostPath</code> for the network namespaces and the cri socket</li>\n</ul>\n<p>A <code>PodSecurityPolicy</code> granting these privileges needs to be bound to the <code>illuminatio-runner</code> <code>ServiceAccount</code> in the <code>illuminatio</code> namespace.\nFor more details look at the <a href=\"src/illuminatio/manifests/containerd-daemonset.yaml\" rel=\"nofollow\">illuminatio DaemonSet</a></p>\n<h2>References</h2>\n<p>The logo was created by Pia Blum.</p>\n<p>Example Network Policies are inspired by\n<a href=\"https://github.com/ahmetb/kubernetes-network-policy-recipes\" rel=\"nofollow\">kubernetes-network-policy-recipes</a></p>\n<p>Presentation from <a href=\"https://www.youtube.com/watch?v=eEkTvAez8HA&amp;list=PLHhKcdBlprMdg-fwPD1b3IjBRR_Ga09H0&amp;index=36\" rel=\"nofollow\">ContainerDays 2019</a>, <a href=\"https://www.inovex.de/de/content-pool/vortraege/network-policies\" rel=\"nofollow\">slides</a></p>\n<h2>Contributing</h2>\n<p>We are happy to read your <a href=\"https://github.com/inovex/illuminatio/issues\" rel=\"nofollow\">issues</a> and accept your <a href=\"https://github.com/inovex/illuminatio/compare\" rel=\"nofollow\">Pull Requests.</a>\nThis project uses the <a href=\"https://help.github.com/en/articles/creating-a-pull-request-from-a-fork\" rel=\"nofollow\">standard github flow</a>.\nFor more information on developing illuminatio refer to <a href=\"docs/developing.md\" rel=\"nofollow\">the development docs</a>.</p>\n<h2>License</h2>\n<p>This project excluding the logo is licensed under the terms of the Apache 2.0 license.\nThe logo is licensed under the terms of the CC BY-NC-ND 4.0 license.</p>\n\n          </div>"}, "last_serial": 7030318, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5c5af93ff2ee36a3fddbf8e57bd16155", "sha256": "2142496f38be4ff947474b34114a11a0d72aafd299d7d6d4abb4da0052d90b45"}, "downloads": -1, "filename": "illuminatio-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5c5af93ff2ee36a3fddbf8e57bd16155", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37510, "upload_time": "2019-06-26T15:22:57", "upload_time_iso_8601": "2019-06-26T15:22:57.074660Z", "url": "https://files.pythonhosted.org/packages/a1/93/8b547b4b43e3ce5b4e66e846eb922d91901c9f254fde4640c74f753d3957/illuminatio-1.0-py2.py3-none-any.whl", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "805e8638cb9f99fe4694c02b4592265d", "sha256": "98cf2fae69b25303d96fb18c5229553ee8cbf2ba9a03ab2cb0d054af24b14b44"}, "downloads": -1, "filename": "illuminatio-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "805e8638cb9f99fe4694c02b4592265d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36375, "upload_time": "2019-08-12T12:58:17", "upload_time_iso_8601": "2019-08-12T12:58:17.343090Z", "url": "https://files.pythonhosted.org/packages/5e/8f/7b5295fe4ffd0541eac49f91b0f859a679f5dee00accc98a6e538f9fc089/illuminatio-1.1-py2.py3-none-any.whl", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "8c113e4ae69a840ac3c3ae48b0bc7557", "sha256": "1fbcfedda002d6e066fc8431adb65efa9e000c8f9bec2500457d51bfec582e7b"}, "downloads": -1, "filename": "illuminatio-1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8c113e4ae69a840ac3c3ae48b0bc7557", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36276, "upload_time": "2019-09-11T06:27:46", "upload_time_iso_8601": "2019-09-11T06:27:46.660753Z", "url": "https://files.pythonhosted.org/packages/4b/b4/bd18832c39b4703cf62139461f51e9460f793edd7339c95884f4e97777af/illuminatio-1.2-py2.py3-none-any.whl", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "e85744e5c985bfd10257906163862c57", "sha256": "b901a00a99c2d41d548d2b49b34792b4d1f3c6acf420db2e85fe59b2f8365bf5"}, "downloads": -1, "filename": "illuminatio-1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e85744e5c985bfd10257906163862c57", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36626, "upload_time": "2019-09-11T10:02:44", "upload_time_iso_8601": "2019-09-11T10:02:44.345752Z", "url": "https://files.pythonhosted.org/packages/28/b8/f8e149c5145ebbb74fb7b1dbf3c4889c86ed562718c52a7e780aff76f847/illuminatio-1.3-py2.py3-none-any.whl", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "12c666e58f2502b2bffefab890793f40", "sha256": "0b983b3ec6712304bfe42d3f781da78c6e7c350b0c106b9eb6b3a6c5a14a0ccb"}, "downloads": -1, "filename": "illuminatio-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "12c666e58f2502b2bffefab890793f40", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37437, "upload_time": "2020-04-15T14:43:57", "upload_time_iso_8601": "2020-04-15T14:43:57.803106Z", "url": "https://files.pythonhosted.org/packages/9b/fc/f620fc75410917dab2616cba899b1e62c41e4f4fb56650259a39daac990c/illuminatio-1.3.1-py2.py3-none-any.whl", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "801e4140f369dd47f56e102800c71721", "sha256": "f531e41d4bf87d4a00f7cf87cbb6252347892bc7d76cd06b13a11bfc81769a00"}, "downloads": -1, "filename": "illuminatio-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "801e4140f369dd47f56e102800c71721", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37483, "upload_time": "2020-04-16T08:06:37", "upload_time_iso_8601": "2020-04-16T08:06:37.742418Z", "url": "https://files.pythonhosted.org/packages/3a/bf/6cd69b84faf325ac80ca37a826a7972fdade9e58a064e1028ca10ef45537/illuminatio-1.3.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "801e4140f369dd47f56e102800c71721", "sha256": "f531e41d4bf87d4a00f7cf87cbb6252347892bc7d76cd06b13a11bfc81769a00"}, "downloads": -1, "filename": "illuminatio-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "801e4140f369dd47f56e102800c71721", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37483, "upload_time": "2020-04-16T08:06:37", "upload_time_iso_8601": "2020-04-16T08:06:37.742418Z", "url": "https://files.pythonhosted.org/packages/3a/bf/6cd69b84faf325ac80ca37a826a7972fdade9e58a064e1028ca10ef45537/illuminatio-1.3.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:56:58 2020"}