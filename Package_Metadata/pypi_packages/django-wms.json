{"info": {"author": "Daniel Wiesmann", "author_email": "daniel@urbmet.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Scientific/Engineering :: GIS"], "description": "Django WMS Framework\n======================\nThe Django WMS Framework is a toolkit that makes it easy to build a `Web Map Service (WMS) <http://en.wikipedia.org/wiki/Web_Map_Service>`_ or a x-y-z `Tile Map Service <http://en.wikipedia.org/wiki/Tile_Map_Service>`_. Rendering of both vector and raster data formats are supported.\n\nFor complete documentation please go to `<http://django-wms.readthedocs.org>`_\n\nRequirements\n------------\nThe processing of spatial data in django-wms relies on `MapServer <http://mapserver.org/index.html>`_ and its python bindings `MapScript <http://mapserver.org/mapscript/mapscript.html>`_. Raster data integration depends on the `django-raster <https://pypi.python.org/pypi/django-raster/0.1.0>`_ package. The use of `PostGIS <http://postgis.net/>`_ as the database backend is required as well, for raster ntegration PostGIS >= 2.0 is required (see also django-raster package).\n\nInstallation\n------------\n1. Install package with ``pip install django-wms``\n\n2. Add \"wms\" to your INSTALLED_APPS setting like this::\n\n        INSTALLED_APPS = (\n            ...\n            'wms',\n        )\n\nExample\n-------\nTo create a mapping service, subclass the django-wms layer, map and view classes and connect them to an existing model in django that has a spatial field (such as Point, Polygon or MultiPolygon). An example ``wms_config.py`` module could be specified as follows ::\n\n    ### wms_config.py\n\n    # Load django-wms classes\n    from wms import maps, layers, views\n\n    # Load model with spatial field (Point, Polygon or MultiPolygon)\n    from myapp.models import MySpatialModel\n\n\n    # Subclass the WmsVectorLayer class and point it to a spatial model.\n    # Use WmsRasterLayer for rasters\n    class MyWmsLayer(layers.WmsVectorLayer):\n        model = MySpatialModel\n\n    # Subclass the WmsMap class and add the layer to it\n    class MyWmsMap(maps.WmsMap):\n        layer_classes = [ MyWmsLayer ]\n\n    # Subclass the WmsView to create a view for the map\n    class MyWmsView(views.WmsView):\n        map_class = MyWmsMap\n\nWith the WmsView subclass in place, the only thing left to do to create a functional map service is to hook the view into a url. An example url configuration ``urls.py`` could be ::\n\n    ### urls.py\n\n    # Import the wms view\n    from myproject.wms_config import MyWmsView\n\n    # Add url patterns to setup map services from the view\n    urlpatterns = patterns('',\n\n        # This creates a WMS endpoint\n        url(r'^wms/$', MyWmsView.as_view(), name='wms'),\n\n        # This creates a TMS endpoint\n        url(r'^tile/(?P<layers>[^/]+)/(?P<z>[0-9]+)/(?P<x>[0-9]+)/(?P<y>[0-9]+)(?P<format>\\.jpg|\\.png)$',\n            MyWmsView.as_view(), name='tms'),\n    )\n\nThe django-wms package will automatically detect the first spatial field it can find in ``MySpatialModel`` and create a WMS endpoint from the class based view. If the three arguments ``x``, ``y`` and ``z`` are found in the urlpattern, the view functions as TMS endpoint.\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/geodesign/django-wms", "keywords": "django,gis,mapserver,mapscript,wms,tms,web map service,tile map service", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-wms", "package_url": "https://pypi.org/project/django-wms/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-wms/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/geodesign/django-wms"}, "release_url": "https://pypi.org/project/django-wms/0.1.12/", "requires_dist": null, "requires_python": null, "summary": "Mapscript based WMS framework for GeoDjango", "version": "0.1.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The Django WMS Framework is a toolkit that makes it easy to build a <a href=\"http://en.wikipedia.org/wiki/Web_Map_Service\" rel=\"nofollow\">Web Map Service (WMS)</a> or a x-y-z <a href=\"http://en.wikipedia.org/wiki/Tile_Map_Service\" rel=\"nofollow\">Tile Map Service</a>. Rendering of both vector and raster data formats are supported.</p>\n<p>For complete documentation please go to <a href=\"http://django-wms.readthedocs.org\" rel=\"nofollow\">http://django-wms.readthedocs.org</a></p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>The processing of spatial data in django-wms relies on <a href=\"http://mapserver.org/index.html\" rel=\"nofollow\">MapServer</a> and its python bindings <a href=\"http://mapserver.org/mapscript/mapscript.html\" rel=\"nofollow\">MapScript</a>. Raster data integration depends on the <a href=\"https://pypi.python.org/pypi/django-raster/0.1.0\" rel=\"nofollow\">django-raster</a> package. The use of <a href=\"http://postgis.net/\" rel=\"nofollow\">PostGIS</a> as the database backend is required as well, for raster ntegration PostGIS &gt;= 2.0 is required (see also django-raster package).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li><p>Install package with <tt>pip install <span class=\"pre\">django-wms</span></tt></p>\n</li>\n<li><p>Add \u201cwms\u201d to your INSTALLED_APPS setting like this:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'wms',\n)\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>To create a mapping service, subclass the django-wms layer, map and view classes and connect them to an existing model in django that has a spatial field (such as Point, Polygon or MultiPolygon). An example <tt>wms_config.py</tt> module could be specified as follows</p>\n<pre>### wms_config.py\n\n# Load django-wms classes\nfrom wms import maps, layers, views\n\n# Load model with spatial field (Point, Polygon or MultiPolygon)\nfrom myapp.models import MySpatialModel\n\n\n# Subclass the WmsVectorLayer class and point it to a spatial model.\n# Use WmsRasterLayer for rasters\nclass MyWmsLayer(layers.WmsVectorLayer):\n    model = MySpatialModel\n\n# Subclass the WmsMap class and add the layer to it\nclass MyWmsMap(maps.WmsMap):\n    layer_classes = [ MyWmsLayer ]\n\n# Subclass the WmsView to create a view for the map\nclass MyWmsView(views.WmsView):\n    map_class = MyWmsMap\n</pre>\n<p>With the WmsView subclass in place, the only thing left to do to create a functional map service is to hook the view into a url. An example url configuration <tt>urls.py</tt> could be</p>\n<pre>### urls.py\n\n# Import the wms view\nfrom myproject.wms_config import MyWmsView\n\n# Add url patterns to setup map services from the view\nurlpatterns = patterns('',\n\n    # This creates a WMS endpoint\n    url(r'^wms/$', MyWmsView.as_view(), name='wms'),\n\n    # This creates a TMS endpoint\n    url(r'^tile/(?P&lt;layers&gt;[^/]+)/(?P&lt;z&gt;[0-9]+)/(?P&lt;x&gt;[0-9]+)/(?P&lt;y&gt;[0-9]+)(?P&lt;format&gt;\\.jpg|\\.png)$',\n        MyWmsView.as_view(), name='tms'),\n)\n</pre>\n<p>The django-wms package will automatically detect the first spatial field it can find in <tt>MySpatialModel</tt> and create a WMS endpoint from the class based view. If the three arguments <tt>x</tt>, <tt>y</tt> and <tt>z</tt> are found in the urlpattern, the view functions as TMS endpoint.</p>\n</div>\n\n          </div>"}, "last_serial": 2084526, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "8bac338f216457ddb4ee044d3da3f191", "sha256": "6c471af1ad32de983b7082c7e98507f4e9228d8926528bc047e4af92e87bb7d4"}, "downloads": -1, "filename": "django-wms-0.1.10.tar.gz", "has_sig": false, "md5_digest": "8bac338f216457ddb4ee044d3da3f191", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 163909, "upload_time": "2014-09-26T16:05:07", "upload_time_iso_8601": "2014-09-26T16:05:07.977818Z", "url": "https://files.pythonhosted.org/packages/9e/cd/39ad394b2adbf0faa50d669beedc430ad1baeedb1cb82bb0d5fbafbd3a56/django-wms-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "766f8dddaace4c7739fb173b719b9e09", "sha256": "ae7672ded8a40971e1ead00b54ec7925bbde27bf9c64d99636ea5a714555b7f5"}, "downloads": -1, "filename": "django-wms-0.1.11.tar.gz", "has_sig": false, "md5_digest": "766f8dddaace4c7739fb173b719b9e09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 165018, "upload_time": "2014-11-07T15:23:20", "upload_time_iso_8601": "2014-11-07T15:23:20.104040Z", "url": "https://files.pythonhosted.org/packages/2a/ce/19156d124a904c3dc06b772343c65c25f1b468917cb7ccd38dd7f641a90c/django-wms-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "42f334f2e7a44a3a4d160939f9d51c9d", "sha256": "94825dbe6e934b4da98063cb3be2f29cf2242bd70f2e091f0e80cf3d41d81bc5"}, "downloads": -1, "filename": "django-wms-0.1.12.tar.gz", "has_sig": false, "md5_digest": "42f334f2e7a44a3a4d160939f9d51c9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9345, "upload_time": "2016-04-26T11:38:20", "upload_time_iso_8601": "2016-04-26T11:38:20.861714Z", "url": "https://files.pythonhosted.org/packages/c3/59/e0b78a875879171ba9edd29b41fb3d18e07092ac972fe5619cd8d1099f17/django-wms-0.1.12.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42f334f2e7a44a3a4d160939f9d51c9d", "sha256": "94825dbe6e934b4da98063cb3be2f29cf2242bd70f2e091f0e80cf3d41d81bc5"}, "downloads": -1, "filename": "django-wms-0.1.12.tar.gz", "has_sig": false, "md5_digest": "42f334f2e7a44a3a4d160939f9d51c9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9345, "upload_time": "2016-04-26T11:38:20", "upload_time_iso_8601": "2016-04-26T11:38:20.861714Z", "url": "https://files.pythonhosted.org/packages/c3/59/e0b78a875879171ba9edd29b41fb3d18e07092ac972fe5619cd8d1099f17/django-wms-0.1.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:51 2020"}