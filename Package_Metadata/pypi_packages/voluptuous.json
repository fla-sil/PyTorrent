{"info": {"author": "Alec Thomas", "author_email": "alec@swapoff.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Voluptuous is a Python data validation library\n\n[![Build Status](https://travis-ci.org/alecthomas/voluptuous.svg)](https://travis-ci.org/alecthomas/voluptuous)\n[![Coverage Status](https://coveralls.io/repos/github/alecthomas/voluptuous/badge.svg?branch=master)](https://coveralls.io/github/alecthomas/voluptuous?branch=master) [![Gitter chat](https://badges.gitter.im/alecthomas.svg)](https://gitter.im/alecthomas/Lobby)\n\nVoluptuous, *despite* the name, is a Python data validation library. It\nis primarily intended for validating data coming into Python as JSON,\nYAML, etc.\n\nIt has three goals:\n\n1.  Simplicity.\n2.  Support for complex data structures.\n3.  Provide useful error messages.\n\n## Contact\n\nVoluptuous now has a mailing list! Send a mail to\n[<voluptuous@librelist.com>](mailto:voluptuous@librelist.com) to subscribe. Instructions\nwill follow.\n\nYou can also contact me directly via [email](mailto:alec@swapoff.org) or\n[Twitter](https://twitter.com/alecthomas).\n\nTo file a bug, create a [new issue](https://github.com/alecthomas/voluptuous/issues/new) on GitHub with a short example of how to replicate the issue.\n\n## Documentation\n\nThe documentation is provided [here](http://alecthomas.github.io/voluptuous/).\n\n## Changelog\n\nSee [CHANGELOG.md](https://github.com/alecthomas/voluptuous/blob/master/CHANGELOG.md).\n\n## Show me an example\n\nTwitter's [user search API](https://dev.twitter.com/rest/reference/get/users/search) accepts\nquery URLs like:\n\n```\n$ curl 'https://api.twitter.com/1.1/users/search.json?q=python&per_page=20&page=1'\n```\n\nTo validate this we might use a schema like:\n\n```pycon\n>>> from voluptuous import Schema\n>>> schema = Schema({\n...   'q': str,\n...   'per_page': int,\n...   'page': int,\n... })\n\n```\n\nThis schema very succinctly and roughly describes the data required by\nthe API, and will work fine. But it has a few problems. Firstly, it\ndoesn't fully express the constraints of the API. According to the API,\n`per_page` should be restricted to at most 20, defaulting to 5, for\nexample. To describe the semantics of the API more accurately, our\nschema will need to be more thoroughly defined:\n\n```pycon\n>>> from voluptuous import Required, All, Length, Range\n>>> schema = Schema({\n...   Required('q'): All(str, Length(min=1)),\n...   Required('per_page', default=5): All(int, Range(min=1, max=20)),\n...   'page': All(int, Range(min=0)),\n... })\n\n```\n\nThis schema fully enforces the interface defined in Twitter's\ndocumentation, and goes a little further for completeness.\n\n\"q\" is required:\n\n```pycon\n>>> from voluptuous import MultipleInvalid, Invalid\n>>> try:\n...   schema({})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"required key not provided @ data['q']\"\nTrue\n\n```\n\n...must be a string:\n\n```pycon\n>>> try:\n...   schema({'q': 123})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"expected str for dictionary value @ data['q']\"\nTrue\n\n```\n\n...and must be at least one character in length:\n\n```pycon\n>>> try:\n...   schema({'q': ''})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"length of value must be at least 1 for dictionary value @ data['q']\"\nTrue\n>>> schema({'q': '#topic'}) == {'q': '#topic', 'per_page': 5}\nTrue\n\n```\n\n\"per\\_page\" is a positive integer no greater than 20:\n\n```pycon\n>>> try:\n...   schema({'q': '#topic', 'per_page': 900})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"value must be at most 20 for dictionary value @ data['per_page']\"\nTrue\n>>> try:\n...   schema({'q': '#topic', 'per_page': -10})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"value must be at least 1 for dictionary value @ data['per_page']\"\nTrue\n\n```\n\n\"page\" is an integer \\>= 0:\n\n```pycon\n>>> try:\n...   schema({'q': '#topic', 'per_page': 'one'})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc)\n\"expected int for dictionary value @ data['per_page']\"\n>>> schema({'q': '#topic', 'page': 1}) == {'q': '#topic', 'page': 1, 'per_page': 5}\nTrue\n\n```\n\n## Defining schemas\n\nSchemas are nested data structures consisting of dictionaries, lists,\nscalars and *validators*. Each node in the input schema is pattern\nmatched against corresponding nodes in the input data.\n\n### Literals\n\nLiterals in the schema are matched using normal equality checks:\n\n```pycon\n>>> schema = Schema(1)\n>>> schema(1)\n1\n>>> schema = Schema('a string')\n>>> schema('a string')\n'a string'\n\n```\n\n### Types\n\nTypes in the schema are matched by checking if the corresponding value\nis an instance of the type:\n\n```pycon\n>>> schema = Schema(int)\n>>> schema(1)\n1\n>>> try:\n...   schema('one')\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"expected int\"\nTrue\n\n```\n\n### URLs\n\nURLs in the schema are matched by using `urlparse` library.\n\n```pycon\n>>> from voluptuous import Url\n>>> schema = Schema(Url())\n>>> schema('http://w3.org')\n'http://w3.org'\n>>> try:\n...   schema('one')\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"expected a URL\"\nTrue\n\n```\n\n### Lists\n\nLists in the schema are treated as a set of valid values. Each element\nin the schema list is compared to each value in the input data:\n\n```pycon\n>>> schema = Schema([1, 'a', 'string'])\n>>> schema([1])\n[1]\n>>> schema([1, 1, 1])\n[1, 1, 1]\n>>> schema(['a', 1, 'string', 1, 'string'])\n['a', 1, 'string', 1, 'string']\n\n```\n\nHowever, an empty list (`[]`) is treated as is. If you want to specify a list that can\ncontain anything, specify it as `list`:\n\n```pycon\n>>> schema = Schema([])\n>>> try:\n...   schema([1])\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"not a valid value @ data[1]\"\nTrue\n>>> schema([])\n[]\n>>> schema = Schema(list)\n>>> schema([])\n[]\n>>> schema([1, 2])\n[1, 2]\n\n```\n\n### Sets and frozensets\n\nSets and frozensets are treated as a set of valid values. Each element\nin the schema set is compared to each value in the input data:\n\n```pycon\n>>> schema = Schema({42})\n>>> schema({42}) == {42}\nTrue\n>>> try:\n...   schema({43})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"invalid value in set\"\nTrue\n>>> schema = Schema({int})\n>>> schema({1, 2, 3}) == {1, 2, 3}\nTrue\n>>> schema = Schema({int, str})\n>>> schema({1, 2, 'abc'}) == {1, 2, 'abc'}\nTrue\n>>> schema = Schema(frozenset([int]))\n>>> try:\n...   schema({3})\n...   raise AssertionError('Invalid not raised')\n... except Invalid as e:\n...   exc = e\n>>> str(exc) == 'expected a frozenset'\nTrue\n\n```\n\nHowever, an empty set (`set()`) is treated as is. If you want to specify a set\nthat can contain anything, specify it as `set`:\n\n```pycon\n>>> schema = Schema(set())\n>>> try:\n...   schema({1})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"invalid value in set\"\nTrue\n>>> schema(set()) == set()\nTrue\n>>> schema = Schema(set)\n>>> schema({1, 2}) == {1, 2}\nTrue\n\n```\n\n### Validation functions\n\nValidators are simple callables that raise an `Invalid` exception when\nthey encounter invalid data. The criteria for determining validity is\nentirely up to the implementation; it may check that a value is a valid\nusername with `pwd.getpwnam()`, it may check that a value is of a\nspecific type, and so on.\n\nThe simplest kind of validator is a Python function that raises\nValueError when its argument is invalid. Conveniently, many builtin\nPython functions have this property. Here's an example of a date\nvalidator:\n\n```pycon\n>>> from datetime import datetime\n>>> def Date(fmt='%Y-%m-%d'):\n...   return lambda v: datetime.strptime(v, fmt)\n\n```\n\n```pycon\n>>> schema = Schema(Date())\n>>> schema('2013-03-03')\ndatetime.datetime(2013, 3, 3, 0, 0)\n>>> try:\n...   schema('2013-03')\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"not a valid value\"\nTrue\n\n```\n\nIn addition to simply determining if a value is valid, validators may\nmutate the value into a valid form. An example of this is the\n`Coerce(type)` function, which returns a function that coerces its\nargument to the given type:\n\n```python\ndef Coerce(type, msg=None):\n    \"\"\"Coerce a value to a type.\n\n    If the type constructor throws a ValueError, the value will be marked as\n    Invalid.\n    \"\"\"\n    def f(v):\n        try:\n            return type(v)\n        except ValueError:\n            raise Invalid(msg or ('expected %s' % type.__name__))\n    return f\n\n```\n\nThis example also shows a common idiom where an optional human-readable\nmessage can be provided. This can vastly improve the usefulness of the\nresulting error messages.\n\n### Dictionaries\n\nEach key-value pair in a schema dictionary is validated against each\nkey-value pair in the corresponding data dictionary:\n\n```pycon\n>>> schema = Schema({1: 'one', 2: 'two'})\n>>> schema({1: 'one'})\n{1: 'one'}\n\n```\n\n#### Extra dictionary keys\n\nBy default any additional keys in the data, not in the schema will\ntrigger exceptions:\n\n```pycon\n>>> schema = Schema({2: 3})\n>>> try:\n...   schema({1: 2, 2: 3})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"extra keys not allowed @ data[1]\"\nTrue\n\n```\n\nThis behaviour can be altered on a per-schema basis. To allow\nadditional keys use\n`Schema(..., extra=ALLOW_EXTRA)`:\n\n```pycon\n>>> from voluptuous import ALLOW_EXTRA\n>>> schema = Schema({2: 3}, extra=ALLOW_EXTRA)\n>>> schema({1: 2, 2: 3})\n{1: 2, 2: 3}\n\n```\n\nTo remove additional keys use\n`Schema(..., extra=REMOVE_EXTRA)`:\n\n```pycon\n>>> from voluptuous import REMOVE_EXTRA\n>>> schema = Schema({2: 3}, extra=REMOVE_EXTRA)\n>>> schema({1: 2, 2: 3})\n{2: 3}\n\n```\n\nIt can also be overridden per-dictionary by using the catch-all marker\ntoken `extra` as a key:\n\n```pycon\n>>> from voluptuous import Extra\n>>> schema = Schema({1: {Extra: object}})\n>>> schema({1: {'foo': 'bar'}})\n{1: {'foo': 'bar'}}\n\n```\n\n#### Required dictionary keys\n\nBy default, keys in the schema are not required to be in the data:\n\n```pycon\n>>> schema = Schema({1: 2, 3: 4})\n>>> schema({3: 4})\n{3: 4}\n\n```\n\nSimilarly to how extra\\_ keys work, this behaviour can be overridden\nper-schema:\n\n```pycon\n>>> schema = Schema({1: 2, 3: 4}, required=True)\n>>> try:\n...   schema({3: 4})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"required key not provided @ data[1]\"\nTrue\n\n```\n\nAnd per-key, with the marker token `Required(key)`:\n\n```pycon\n>>> schema = Schema({Required(1): 2, 3: 4})\n>>> try:\n...   schema({3: 4})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"required key not provided @ data[1]\"\nTrue\n>>> schema({1: 2})\n{1: 2}\n\n```\n\n#### Optional dictionary keys\n\nIf a schema has `required=True`, keys may be individually marked as\noptional using the marker token `Optional(key)`:\n\n```pycon\n>>> from voluptuous import Optional\n>>> schema = Schema({1: 2, Optional(3): 4}, required=True)\n>>> try:\n...   schema({})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"required key not provided @ data[1]\"\nTrue\n>>> schema({1: 2})\n{1: 2}\n>>> try:\n...   schema({1: 2, 4: 5})\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"extra keys not allowed @ data[4]\"\nTrue\n\n```\n\n```pycon\n>>> schema({1: 2, 3: 4})\n{1: 2, 3: 4}\n\n```\n\n### Recursive / nested schema\n\nYou can use `voluptuous.Self` to define a nested schema:\n\n```pycon\n>>> from voluptuous import Schema, Self\n>>> recursive = Schema({\"more\": Self, \"value\": int})\n>>> recursive({\"more\": {\"value\": 42}, \"value\": 41}) == {'more': {'value': 42}, 'value': 41}\nTrue\n\n```\n\n### Extending an existing Schema\n\nOften it comes handy to have a base `Schema` that is extended with more\nrequirements. In that case you can use `Schema.extend` to create a new\n`Schema`:\n\n```pycon\n>>> from voluptuous import Schema\n>>> person = Schema({'name': str})\n>>> person_with_age = person.extend({'age': int})\n>>> sorted(list(person_with_age.schema.keys()))\n['age', 'name']\n\n```\n\nThe original `Schema` remains unchanged.\n\n### Objects\n\nEach key-value pair in a schema dictionary is validated against each\nattribute-value pair in the corresponding object:\n\n```pycon\n>>> from voluptuous import Object\n>>> class Structure(object):\n...     def __init__(self, q=None):\n...         self.q = q\n...     def __repr__(self):\n...         return '<Structure(q={0.q!r})>'.format(self)\n...\n>>> schema = Schema(Object({'q': 'one'}, cls=Structure))\n>>> schema(Structure(q='one'))\n<Structure(q='one')>\n\n```\n\n### Allow None values\n\nTo allow value to be None as well, use Any:\n\n```pycon\n>>> from voluptuous import Any\n\n>>> schema = Schema(Any(None, int))\n>>> schema(None)\n>>> schema(5)\n5\n\n```\n\n## Error reporting\n\nValidators must throw an `Invalid` exception if invalid data is passed\nto them. All other exceptions are treated as errors in the validator and\nwill not be caught.\n\nEach `Invalid` exception has an associated `path` attribute representing\nthe path in the data structure to our currently validating value, as well\nas an `error_message` attribute that contains the message of the original\nexception. This is especially useful when you want to catch `Invalid`\nexceptions and give some feedback to the user, for instance in the context of\nan HTTP API.\n\n\n```pycon\n>>> def validate_email(email):\n...     \"\"\"Validate email.\"\"\"\n...     if not \"@\" in email:\n...         raise Invalid(\"This email is invalid.\")\n...     return email\n>>> schema = Schema({\"email\": validate_email})\n>>> exc = None\n>>> try:\n...     schema({\"email\": \"whatever\"})\n... except MultipleInvalid as e:\n...     exc = e\n>>> str(exc)\n\"This email is invalid. for dictionary value @ data['email']\"\n>>> exc.path\n['email']\n>>> exc.msg\n'This email is invalid.'\n>>> exc.error_message\n'This email is invalid.'\n\n```\n\nThe `path` attribute is used during error reporting, but also during matching\nto determine whether an error should be reported to the user or if the next\nmatch should be attempted. This is determined by comparing the depth of the\npath where the check is, to the depth of the path where the error occurred. If\nthe error is more than one level deeper, it is reported.\n\nThe upshot of this is that *matching is depth-first and fail-fast*.\n\nTo illustrate this, here is an example schema:\n\n```pycon\n>>> schema = Schema([[2, 3], 6])\n\n```\n\nEach value in the top-level list is matched depth-first in-order. Given\ninput data of `[[6]]`, the inner list will match the first element of\nthe schema, but the literal `6` will not match any of the elements of\nthat list. This error will be reported back to the user immediately. No\nbacktracking is attempted:\n\n```pycon\n>>> try:\n...   schema([[6]])\n...   raise AssertionError('MultipleInvalid not raised')\n... except MultipleInvalid as e:\n...   exc = e\n>>> str(exc) == \"not a valid value @ data[0][0]\"\nTrue\n\n```\n\nIf we pass the data `[6]`, the `6` is not a list type and so will not\nrecurse into the first element of the schema. Matching will continue on\nto the second element in the schema, and succeed:\n\n```pycon\n>>> schema([6])\n[6]\n\n```\n\n## Multi-field validation\n\nValidation rules that involve multiple fields can be implemented as\ncustom validators. It's recommended to use `All()` to do a two-pass\nvalidation - the first pass checking the basic structure of the data,\nand only after that, the second pass applying your cross-field\nvalidator:\n\n```python\ndef passwords_must_match(passwords):\n    if passwords['password'] != passwords['password_again']:\n        raise Invalid('passwords must match')\n    return passwords\n\ns=Schema(All(\n    # First \"pass\" for field types\n    {'password':str, 'password_again':str},\n    # Follow up the first \"pass\" with your multi-field rules\n    passwords_must_match\n))\n\n# valid\ns({'password':'123', 'password_again':'123'})\n\n# raises MultipleInvalid: passwords must match\ns({'password':'123', 'password_again':'and now for something completely different'})\n\n```\n\nWith this structure, your multi-field validator will run with\npre-validated data from the first \"pass\" and so will not have to do\nits own type checking on its inputs.\n\nThe flipside is that if the first \"pass\" of validation fails, your\ncross-field validator will not run:\n\n```\n# raises Invalid because password_again is not a string\n# passwords_must_match() will not run because first-pass validation already failed\ns({'password':'123', 'password_again': 1337})\n```\n\n## Running tests.\n\nVoluptuous is using nosetests:\n\n    $ nosetests\n\n\n## Why use Voluptuous over another validation library?\n\n**Validators are simple callables**\n:   No need to subclass anything, just use a function.\n\n**Errors are simple exceptions.**\n:   A validator can just `raise Invalid(msg)` and expect the user to get\nuseful messages.\n\n**Schemas are basic Python data structures.**\n:   Should your data be a dictionary of integer keys to strings?\n`{int: str}` does what you expect. List of integers, floats or\nstrings? `[int, float, str]`.\n\n**Designed from the ground up for validating more than just forms.**\n:   Nested data structures are treated in the same way as any other\ntype. Need a list of dictionaries? `[{}]`\n\n**Consistency.**\n:   Types in the schema are checked as types. Values are compared as\nvalues. Callables are called to validate. Simple.\n\n## Other libraries and inspirations\n\nVoluptuous is heavily inspired by\n[Validino](http://code.google.com/p/validino/), and to a lesser extent,\n[jsonvalidator](http://code.google.com/p/jsonvalidator/) and\n[json\\_schema](http://blog.sendapatch.se/category/json_schema.html).\n\n[pytest-voluptuous](https://github.com/F-Secure/pytest-voluptuous) is a\n[pytest](https://github.com/pytest-dev/pytest) plugin that helps in\nusing voluptuous validators in `assert`s.\n\nI greatly prefer the light-weight style promoted by these libraries to\nthe complexity of libraries like FormEncode.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://pypi.python.org/pypi/voluptuous", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alecthomas/voluptuous", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "voluptuous", "package_url": "https://pypi.org/project/voluptuous/", "platform": "any", "project_url": "https://pypi.org/project/voluptuous/", "project_urls": {"Download": "https://pypi.python.org/pypi/voluptuous", "Homepage": "https://github.com/alecthomas/voluptuous"}, "release_url": "https://pypi.org/project/voluptuous/0.11.7/", "requires_dist": null, "requires_python": "", "summary": "# Voluptuous is a Python data validation library", "version": "0.11.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Voluptuous is a Python data validation library</h1>\n<p><a href=\"https://travis-ci.org/alecthomas/voluptuous\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f5f9de2313db3374de533bbf69baf5b8bce6449/68747470733a2f2f7472617669732d63692e6f72672f616c656374686f6d61732f766f6c757074756f75732e737667\"></a>\n<a href=\"https://coveralls.io/github/alecthomas/voluptuous?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/94e9dc0f276326b632971afdad69d36129989e84/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f616c656374686f6d61732f766f6c757074756f75732f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://gitter.im/alecthomas/Lobby\" rel=\"nofollow\"><img alt=\"Gitter chat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c059743b38ec272cc18a26c7ca2343e07356415/68747470733a2f2f6261646765732e6769747465722e696d2f616c656374686f6d61732e737667\"></a></p>\n<p>Voluptuous, <em>despite</em> the name, is a Python data validation library. It\nis primarily intended for validating data coming into Python as JSON,\nYAML, etc.</p>\n<p>It has three goals:</p>\n<ol>\n<li>Simplicity.</li>\n<li>Support for complex data structures.</li>\n<li>Provide useful error messages.</li>\n</ol>\n<h2>Contact</h2>\n<p>Voluptuous now has a mailing list! Send a mail to\n<a href=\"mailto:voluptuous@librelist.com\"></a><a href=\"mailto:voluptuous@librelist.com\">voluptuous@librelist.com</a> to subscribe. Instructions\nwill follow.</p>\n<p>You can also contact me directly via <a href=\"mailto:alec@swapoff.org\">email</a> or\n<a href=\"https://twitter.com/alecthomas\" rel=\"nofollow\">Twitter</a>.</p>\n<p>To file a bug, create a <a href=\"https://github.com/alecthomas/voluptuous/issues/new\" rel=\"nofollow\">new issue</a> on GitHub with a short example of how to replicate the issue.</p>\n<h2>Documentation</h2>\n<p>The documentation is provided <a href=\"http://alecthomas.github.io/voluptuous/\" rel=\"nofollow\">here</a>.</p>\n<h2>Changelog</h2>\n<p>See <a href=\"https://github.com/alecthomas/voluptuous/blob/master/CHANGELOG.md\" rel=\"nofollow\">CHANGELOG.md</a>.</p>\n<h2>Show me an example</h2>\n<p>Twitter's <a href=\"https://dev.twitter.com/rest/reference/get/users/search\" rel=\"nofollow\">user search API</a> accepts\nquery URLs like:</p>\n<pre><code>$ curl 'https://api.twitter.com/1.1/users/search.json?q=python&amp;per_page=20&amp;page=1'\n</code></pre>\n<p>To validate this we might use a schema like:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Schema</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span>\n<span class=\"gp\">... </span>  <span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"s1\">'per_page'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>  <span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">})</span>\n</pre>\n<p>This schema very succinctly and roughly describes the data required by\nthe API, and will work fine. But it has a few problems. Firstly, it\ndoesn't fully express the constraints of the API. According to the API,\n<code>per_page</code> should be restricted to at most 20, defaulting to 5, for\nexample. To describe the semantics of the API more accurately, our\nschema will need to be more thoroughly defined:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Required</span><span class=\"p\">,</span> <span class=\"n\">All</span><span class=\"p\">,</span> <span class=\"n\">Length</span><span class=\"p\">,</span> <span class=\"n\">Range</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span>\n<span class=\"gp\">... </span>  <span class=\"n\">Required</span><span class=\"p\">(</span><span class=\"s1\">'q'</span><span class=\"p\">):</span> <span class=\"n\">All</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)),</span>\n<span class=\"gp\">... </span>  <span class=\"n\">Required</span><span class=\"p\">(</span><span class=\"s1\">'per_page'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">All</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)),</span>\n<span class=\"gp\">... </span>  <span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"n\">All</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)),</span>\n<span class=\"gp\">... </span><span class=\"p\">})</span>\n</pre>\n<p>This schema fully enforces the interface defined in Twitter's\ndocumentation, and goes a little further for completeness.</p>\n<p>\"q\" is required:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">MultipleInvalid</span><span class=\"p\">,</span> <span class=\"n\">Invalid</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"required key not provided @ data['q']\"</span>\n<span class=\"go\">True</span>\n</pre>\n<p>...must be a string:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"expected str for dictionary value @ data['q']\"</span>\n<span class=\"go\">True</span>\n</pre>\n<p>...and must be at least one character in length:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"length of value must be at least 1 for dictionary value @ data['q']\"</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'#topic'</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'#topic'</span><span class=\"p\">,</span> <span class=\"s1\">'per_page'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n</pre>\n<p>\"per_page\" is a positive integer no greater than 20:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'#topic'</span><span class=\"p\">,</span> <span class=\"s1\">'per_page'</span><span class=\"p\">:</span> <span class=\"mi\">900</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"value must be at most 20 for dictionary value @ data['per_page']\"</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'#topic'</span><span class=\"p\">,</span> <span class=\"s1\">'per_page'</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"value must be at least 1 for dictionary value @ data['per_page']\"</span>\n<span class=\"go\">True</span>\n</pre>\n<p>\"page\" is an integer &gt;= 0:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'#topic'</span><span class=\"p\">,</span> <span class=\"s1\">'per_page'</span><span class=\"p\">:</span> <span class=\"s1\">'one'</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n<span class=\"go\">\"expected int for dictionary value @ data['per_page']\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'#topic'</span><span class=\"p\">,</span> <span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'#topic'</span><span class=\"p\">,</span> <span class=\"s1\">'page'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'per_page'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n</pre>\n<h2>Defining schemas</h2>\n<p>Schemas are nested data structures consisting of dictionaries, lists,\nscalars and <em>validators</em>. Each node in the input schema is pattern\nmatched against corresponding nodes in the input data.</p>\n<h3>Literals</h3>\n<p>Literals in the schema are matched using normal equality checks:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"s1\">'a string'</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'a string'</span><span class=\"p\">)</span>\n<span class=\"go\">'a string'</span>\n</pre>\n<h3>Types</h3>\n<p>Types in the schema are matched by checking if the corresponding value\nis an instance of the type:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'one'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"expected int\"</span>\n<span class=\"go\">True</span>\n</pre>\n<h3>URLs</h3>\n<p>URLs in the schema are matched by using <code>urlparse</code> library.</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Url</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">Url</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'http://w3.org'</span><span class=\"p\">)</span>\n<span class=\"go\">'http://w3.org'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'one'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"expected a URL\"</span>\n<span class=\"go\">True</span>\n</pre>\n<h3>Lists</h3>\n<p>Lists in the schema are treated as a set of valid values. Each element\nin the schema list is compared to each value in the input data:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"go\">[1]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"go\">[1, 1, 1]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">([</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'string'</span><span class=\"p\">])</span>\n<span class=\"go\">['a', 1, 'string', 1, 'string']</span>\n</pre>\n<p>However, an empty list (<code>[]</code>) is treated as is. If you want to specify a list that can\ncontain anything, specify it as <code>list</code>:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">([])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"not a valid value @ data[1]\"</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">([])</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">([])</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"go\">[1, 2]</span>\n</pre>\n<h3>Sets and frozensets</h3>\n<p>Sets and frozensets are treated as a set of valid values. Each element\nin the schema set is compared to each value in the input data:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">42</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">42</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">42</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">43</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"invalid value in set\"</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"nb\">int</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'abc'</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'abc'</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"nb\">frozenset</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">]))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'Invalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">Invalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'expected a frozenset'</span>\n<span class=\"go\">True</span>\n</pre>\n<p>However, an empty set (<code>set()</code>) is treated as is. If you want to specify a set\nthat can contain anything, specify it as <code>set</code>:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"invalid value in set\"</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n</pre>\n<h3>Validation functions</h3>\n<p>Validators are simple callables that raise an <code>Invalid</code> exception when\nthey encounter invalid data. The criteria for determining validity is\nentirely up to the implementation; it may check that a value is a valid\nusername with <code>pwd.getpwnam()</code>, it may check that a value is of a\nspecific type, and so on.</p>\n<p>The simplest kind of validator is a Python function that raises\nValueError when its argument is invalid. Conveniently, many builtin\nPython functions have this property. Here's an example of a date\nvalidator:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">Date</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">'</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>  <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">Date</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'2013-03-03'</span><span class=\"p\">)</span>\n<span class=\"go\">datetime.datetime(2013, 3, 3, 0, 0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"s1\">'2013-03'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"not a valid value\"</span>\n<span class=\"go\">True</span>\n</pre>\n<p>In addition to simply determining if a value is valid, validators may\nmutate the value into a valid form. An example of this is the\n<code>Coerce(type)</code> function, which returns a function that coerces its\nargument to the given type:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">Coerce</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Coerce a value to a type.</span>\n\n<span class=\"sd\">    If the type constructor throws a ValueError, the value will be marked as</span>\n<span class=\"sd\">    Invalid.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">Invalid</span><span class=\"p\">(</span><span class=\"n\">msg</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"s1\">'expected </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"nb\">type</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">f</span>\n</pre>\n<p>This example also shows a common idiom where an optional human-readable\nmessage can be provided. This can vastly improve the usefulness of the\nresulting error messages.</p>\n<h3>Dictionaries</h3>\n<p>Each key-value pair in a schema dictionary is validated against each\nkey-value pair in the corresponding data dictionary:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'one'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"s1\">'two'</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s1\">'one'</span><span class=\"p\">})</span>\n<span class=\"go\">{1: 'one'}</span>\n</pre>\n<h4>Extra dictionary keys</h4>\n<p>By default any additional keys in the data, not in the schema will\ntrigger exceptions:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"extra keys not allowed @ data[1]\"</span>\n<span class=\"go\">True</span>\n</pre>\n<p>This behaviour can be altered on a per-schema basis. To allow\nadditional keys use\n<code>Schema(..., extra=ALLOW_EXTRA)</code>:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">ALLOW_EXTRA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"n\">ALLOW_EXTRA</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"go\">{1: 2, 2: 3}</span>\n</pre>\n<p>To remove additional keys use\n<code>Schema(..., extra=REMOVE_EXTRA)</code>:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">REMOVE_EXTRA</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"n\">REMOVE_EXTRA</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"go\">{2: 3}</span>\n</pre>\n<p>It can also be overridden per-dictionary by using the catch-all marker\ntoken <code>extra</code> as a key:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Extra</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"n\">Extra</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">}})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">}})</span>\n<span class=\"go\">{1: {'foo': 'bar'}}</span>\n</pre>\n<h4>Required dictionary keys</h4>\n<p>By default, keys in the schema are not required to be in the data:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"go\">{3: 4}</span>\n</pre>\n<p>Similarly to how extra_ keys work, this behaviour can be overridden\nper-schema:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"required key not provided @ data[1]\"</span>\n<span class=\"go\">True</span>\n</pre>\n<p>And per-key, with the marker token <code>Required(key)</code>:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"n\">Required</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"required key not provided @ data[1]\"</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"go\">{1: 2}</span>\n</pre>\n<h4>Optional dictionary keys</h4>\n<p>If a schema has <code>required=True</code>, keys may be individually marked as\noptional using the marker token <code>Optional(key)</code>:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Optional</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"mi\">4</span><span class=\"p\">},</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"required key not provided @ data[1]\"</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"go\">{1: 2}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"extra keys not allowed @ data[4]\"</span>\n<span class=\"go\">True</span>\n</pre>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"go\">{1: 2, 3: 4}</span>\n</pre>\n<h3>Recursive / nested schema</h3>\n<p>You can use <code>voluptuous.Self</code> to define a nested schema:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Schema</span><span class=\"p\">,</span> <span class=\"n\">Self</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">recursive</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"s2\">\"more\"</span><span class=\"p\">:</span> <span class=\"n\">Self</span><span class=\"p\">,</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">recursive</span><span class=\"p\">({</span><span class=\"s2\">\"more\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">},</span> <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"mi\">41</span><span class=\"p\">})</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'more'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">},</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"mi\">41</span><span class=\"p\">}</span>\n<span class=\"go\">True</span>\n</pre>\n<h3>Extending an existing Schema</h3>\n<p>Often it comes handy to have a base <code>Schema</code> that is extended with more\nrequirements. In that case you can use <code>Schema.extend</code> to create a new\n<code>Schema</code>:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Schema</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">person_with_age</span> <span class=\"o\">=</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">({</span><span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">person_with_age</span><span class=\"o\">.</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n<span class=\"go\">['age', 'name']</span>\n</pre>\n<p>The original <code>Schema</code> remains unchanged.</p>\n<h3>Objects</h3>\n<p>Each key-value pair in a schema dictionary is validated against each\nattribute-value pair in the corresponding object:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Object</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Structure</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"s1\">'&lt;Structure(q=</span><span class=\"si\">{0.q!r}</span><span class=\"s1\">)&gt;'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">Object</span><span class=\"p\">({</span><span class=\"s1\">'q'</span><span class=\"p\">:</span> <span class=\"s1\">'one'</span><span class=\"p\">},</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">Structure</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"n\">Structure</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"s1\">'one'</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;Structure(q='one')&gt;</span>\n</pre>\n<h3>Allow None values</h3>\n<p>To allow value to be None as well, use Any:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">voluptuous</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">5</span>\n</pre>\n<h2>Error reporting</h2>\n<p>Validators must throw an <code>Invalid</code> exception if invalid data is passed\nto them. All other exceptions are treated as errors in the validator and\nwill not be caught.</p>\n<p>Each <code>Invalid</code> exception has an associated <code>path</code> attribute representing\nthe path in the data structure to our currently validating value, as well\nas an <code>error_message</code> attribute that contains the message of the original\nexception. This is especially useful when you want to catch <code>Invalid</code>\nexceptions and give some feedback to the user, for instance in the context of\nan HTTP API.</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">validate_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"sd\">\"\"\"Validate email.\"\"\"</span>\n<span class=\"gp\">... </span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"s2\">\"@\"</span> <span class=\"ow\">in</span> <span class=\"n\">email</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>        <span class=\"k\">raise</span> <span class=\"n\">Invalid</span><span class=\"p\">(</span><span class=\"s2\">\"This email is invalid.\"</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">email</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">({</span><span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"n\">validate_email</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">schema</span><span class=\"p\">({</span><span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"whatever\"</span><span class=\"p\">})</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n<span class=\"go\">\"This email is invalid. for dictionary value @ data['email']\"</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">path</span>\n<span class=\"go\">['email']</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">msg</span>\n<span class=\"go\">'This email is invalid.'</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">error_message</span>\n<span class=\"go\">'This email is invalid.'</span>\n</pre>\n<p>The <code>path</code> attribute is used during error reporting, but also during matching\nto determine whether an error should be reported to the user or if the next\nmatch should be attempted. This is determined by comparing the depth of the\npath where the check is, to the depth of the path where the error occurred. If\nthe error is more than one level deeper, it is reported.</p>\n<p>The upshot of this is that <em>matching is depth-first and fail-fast</em>.</p>\n<p>To illustrate this, here is an example schema:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">([[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"mi\">6</span><span class=\"p\">])</span>\n</pre>\n<p>Each value in the top-level list is matched depth-first in-order. Given\ninput data of <code>[[6]]</code>, the inner list will match the first element of\nthe schema, but the literal <code>6</code> will not match any of the elements of\nthat list. This error will be reported back to the user immediately. No\nbacktracking is attempted:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">schema</span><span class=\"p\">([[</span><span class=\"mi\">6</span><span class=\"p\">]])</span>\n<span class=\"gp\">... </span>  <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s1\">'MultipleInvalid not raised'</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">MultipleInvalid</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>  <span class=\"n\">exc</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"not a valid value @ data[0][0]\"</span>\n<span class=\"go\">True</span>\n</pre>\n<p>If we pass the data <code>[6]</code>, the <code>6</code> is not a list type and so will not\nrecurse into the first element of the schema. Matching will continue on\nto the second element in the schema, and succeed:</p>\n<pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">schema</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"go\">[6]</span>\n</pre>\n<h2>Multi-field validation</h2>\n<p>Validation rules that involve multiple fields can be implemented as\ncustom validators. It's recommended to use <code>All()</code> to do a two-pass\nvalidation - the first pass checking the basic structure of the data,\nand only after that, the second pass applying your cross-field\nvalidator:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">passwords_must_match</span><span class=\"p\">(</span><span class=\"n\">passwords</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">passwords</span><span class=\"p\">[</span><span class=\"s1\">'password'</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">passwords</span><span class=\"p\">[</span><span class=\"s1\">'password_again'</span><span class=\"p\">]:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Invalid</span><span class=\"p\">(</span><span class=\"s1\">'passwords must match'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">passwords</span>\n\n<span class=\"n\">s</span><span class=\"o\">=</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">All</span><span class=\"p\">(</span>\n    <span class=\"c1\"># First \"pass\" for field types</span>\n    <span class=\"p\">{</span><span class=\"s1\">'password'</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"s1\">'password_again'</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">},</span>\n    <span class=\"c1\"># Follow up the first \"pass\" with your multi-field rules</span>\n    <span class=\"n\">passwords_must_match</span>\n<span class=\"p\">))</span>\n\n<span class=\"c1\"># valid</span>\n<span class=\"n\">s</span><span class=\"p\">({</span><span class=\"s1\">'password'</span><span class=\"p\">:</span><span class=\"s1\">'123'</span><span class=\"p\">,</span> <span class=\"s1\">'password_again'</span><span class=\"p\">:</span><span class=\"s1\">'123'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># raises MultipleInvalid: passwords must match</span>\n<span class=\"n\">s</span><span class=\"p\">({</span><span class=\"s1\">'password'</span><span class=\"p\">:</span><span class=\"s1\">'123'</span><span class=\"p\">,</span> <span class=\"s1\">'password_again'</span><span class=\"p\">:</span><span class=\"s1\">'and now for something completely different'</span><span class=\"p\">})</span>\n</pre>\n<p>With this structure, your multi-field validator will run with\npre-validated data from the first \"pass\" and so will not have to do\nits own type checking on its inputs.</p>\n<p>The flipside is that if the first \"pass\" of validation fails, your\ncross-field validator will not run:</p>\n<pre><code># raises Invalid because password_again is not a string\n# passwords_must_match() will not run because first-pass validation already failed\ns({'password':'123', 'password_again': 1337})\n</code></pre>\n<h2>Running tests.</h2>\n<p>Voluptuous is using nosetests:</p>\n<pre><code>$ nosetests\n</code></pre>\n<h2>Why use Voluptuous over another validation library?</h2>\n<p><strong>Validators are simple callables</strong>\n:   No need to subclass anything, just use a function.</p>\n<p><strong>Errors are simple exceptions.</strong>\n:   A validator can just <code>raise Invalid(msg)</code> and expect the user to get\nuseful messages.</p>\n<p><strong>Schemas are basic Python data structures.</strong>\n:   Should your data be a dictionary of integer keys to strings?\n<code>{int: str}</code> does what you expect. List of integers, floats or\nstrings? <code>[int, float, str]</code>.</p>\n<p><strong>Designed from the ground up for validating more than just forms.</strong>\n:   Nested data structures are treated in the same way as any other\ntype. Need a list of dictionaries? <code>[{}]</code></p>\n<p><strong>Consistency.</strong>\n:   Types in the schema are checked as types. Values are compared as\nvalues. Callables are called to validate. Simple.</p>\n<h2>Other libraries and inspirations</h2>\n<p>Voluptuous is heavily inspired by\n<a href=\"http://code.google.com/p/validino/\" rel=\"nofollow\">Validino</a>, and to a lesser extent,\n<a href=\"http://code.google.com/p/jsonvalidator/\" rel=\"nofollow\">jsonvalidator</a> and\n<a href=\"http://blog.sendapatch.se/category/json_schema.html\" rel=\"nofollow\">json_schema</a>.</p>\n<p><a href=\"https://github.com/F-Secure/pytest-voluptuous\" rel=\"nofollow\">pytest-voluptuous</a> is a\n<a href=\"https://github.com/pytest-dev/pytest\" rel=\"nofollow\">pytest</a> plugin that helps in\nusing voluptuous validators in <code>assert</code>s.</p>\n<p>I greatly prefer the light-weight style promoted by these libraries to\nthe complexity of libraries like FormEncode.</p>\n\n          </div>"}, "last_serial": 5669601, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6fabc61b962230cf9f5431e2dcdf993d", "sha256": "90fc70c36587651c3cdf118d9b326b215f764d6d8e2f252cbbd3d91f784a4d98"}, "downloads": -1, "filename": "voluptuous-0.1.tar.gz", "has_sig": false, "md5_digest": "6fabc61b962230cf9f5431e2dcdf993d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4445, "upload_time": "2010-07-15T12:24:38", "upload_time_iso_8601": "2010-07-15T12:24:38.901984Z", "url": "https://files.pythonhosted.org/packages/7f/78/24bef2dcba5dd23ad4afbef61b80c96ffbcfc94428abf061146777ef5606/voluptuous-0.1.tar.gz", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "beb0f99bb58f0e425b1063949c384ea9", "sha256": "400c437f6ba31ca0da766333f8fd5b8a67593f29b20e6588c1e1fab8e042fa23"}, "downloads": -1, "filename": "voluptuous-0.10.2.tar.gz", "has_sig": false, "md5_digest": "beb0f99bb58f0e425b1063949c384ea9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41561, "upload_time": "2017-04-12T14:22:25", "upload_time_iso_8601": "2017-04-12T14:22:25.295541Z", "url": "https://files.pythonhosted.org/packages/8c/af/c1cc6d58c8b54aa539595f61545c3e53c4d641996ed1d0c2ece4ee7e71e3/voluptuous-0.10.2.tar.gz", "yanked": false}], "0.10.4": [{"comment_text": "", "digests": {"md5": "1421321b2ee6d27380c044bc046a6b33", "sha256": "8efc23d98404beb2192fa2e9d835e223b5e9fbd95bdb44b088eab2ece95574a6"}, "downloads": -1, "filename": "voluptuous-0.10.4.tar.gz", "has_sig": false, "md5_digest": "1421321b2ee6d27380c044bc046a6b33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41442, "upload_time": "2017-04-13T11:16:18", "upload_time_iso_8601": "2017-04-13T11:16:18.747918Z", "url": "https://files.pythonhosted.org/packages/91/8b/4e7f5ddc28e86fcc69570147c417d75cf91faf55fde2f713436d7880e345/voluptuous-0.10.4.tar.gz", "yanked": false}], "0.10.5": [{"comment_text": "", "digests": {"md5": "e3fc99b75618d384cad63bc71b6507bc", "sha256": "7a7466f8dc3666a292d186d1d871a47bf2120836ccb900d5ba904674957a2396"}, "downloads": -1, "filename": "voluptuous-0.10.5.tar.gz", "has_sig": false, "md5_digest": "e3fc99b75618d384cad63bc71b6507bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41436, "upload_time": "2017-04-13T11:49:35", "upload_time_iso_8601": "2017-04-13T11:49:35.751612Z", "url": "https://files.pythonhosted.org/packages/c3/81/c84f8a3e723b760fdd1c41fc80201cb80cd29c1bce5159d8918c58df7d2a/voluptuous-0.10.5.tar.gz", "yanked": false}], "0.11.1": [{"comment_text": "", "digests": {"md5": "a7fcc30f535e6b100cbd857023b437ad", "sha256": "6bbbe83a509d948230e9f921ba2e75173590be988eeb446dbe7a54268bef4da8"}, "downloads": -1, "filename": "voluptuous-0.11.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a7fcc30f535e6b100cbd857023b437ad", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 33151, "upload_time": "2018-02-15T09:35:28", "upload_time_iso_8601": "2018-02-15T09:35:28.599929Z", "url": "https://files.pythonhosted.org/packages/f5/09/a0e20a0bd743131e237128bad3a4f83b283f70c032b7e7c0f06baf7f6862/voluptuous-0.11.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6acb0a6f8413a5cc1e194adb0c62420b", "sha256": "af7315c9fa99e0bfd195a21106c82c81619b42f0bd9b6e287b797c6b6b6a9918"}, "downloads": -1, "filename": "voluptuous-0.11.1.tar.gz", "has_sig": false, "md5_digest": "6acb0a6f8413a5cc1e194adb0c62420b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44346, "upload_time": "2018-02-15T09:35:30", "upload_time_iso_8601": "2018-02-15T09:35:30.657816Z", "url": "https://files.pythonhosted.org/packages/64/1a/bc658313d0a228ce474648c360bd06e28af3ed5e24029b1a4108739c23f4/voluptuous-0.11.1.tar.gz", "yanked": false}], "0.11.2": [{"comment_text": "", "digests": {"md5": "ae47329c725dc0b949fec25ea5a7a870", "sha256": "e464e71d7558b7fdb0102fc92bf2e9eb14d8e315532f47515cfd1a68b63e9e7f"}, "downloads": -1, "filename": "voluptuous-0.11.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae47329c725dc0b949fec25ea5a7a870", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 27650, "upload_time": "2018-07-27T08:49:38", "upload_time_iso_8601": "2018-07-27T08:49:38.942921Z", "url": "https://files.pythonhosted.org/packages/d3/dc/8de839f469b5d0bd3c03f40e5f29c12a7d0d0e8a41c29df94cda09ad4885/voluptuous-0.11.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00044d6ec7fa5ca71316bcf99180371c", "sha256": "a8088401da43cc358094d79f4604a03b0060ab0212a12a8730a03d363d144e28"}, "downloads": -1, "filename": "voluptuous-0.11.2.tar.gz", "has_sig": false, "md5_digest": "00044d6ec7fa5ca71316bcf99180371c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44259, "upload_time": "2018-07-27T08:49:36", "upload_time_iso_8601": "2018-07-27T08:49:36.402521Z", "url": "https://files.pythonhosted.org/packages/68/f3/f5aae87e16edc44ce7fc915964697c7e281dd87a8924fc06dc5b1e12eca8/voluptuous-0.11.2.tar.gz", "yanked": false}], "0.11.3": [{"comment_text": "", "digests": {"md5": "4850fe07faf70c7016c48a0c0389bfbe", "sha256": "37d85a4a081ec62abaf83254697c37b0db2c4d5513b62962550c024c05afd046"}, "downloads": -1, "filename": "voluptuous-0.11.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4850fe07faf70c7016c48a0c0389bfbe", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 27844, "upload_time": "2018-07-27T09:02:30", "upload_time_iso_8601": "2018-07-27T09:02:30.493996Z", "url": "https://files.pythonhosted.org/packages/54/8b/fcf38773d0f8fd708a3c80648b800c8d6f8806af21bb511b487cec2cbebe/voluptuous-0.11.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ded3b99f9eeef82bc38fbcfbc81f88d", "sha256": "c53ba3a5046db028080e8355ddae9a85864b62d890167041b9cb91a2fb99a6e3"}, "downloads": -1, "filename": "voluptuous-0.11.3.tar.gz", "has_sig": false, "md5_digest": "7ded3b99f9eeef82bc38fbcfbc81f88d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46620, "upload_time": "2018-07-27T09:02:27", "upload_time_iso_8601": "2018-07-27T09:02:27.274574Z", "url": "https://files.pythonhosted.org/packages/1e/e1/d4ee28be80c22d17cf2a085582fd3ced2825731a4ea53fc42ad6da920725/voluptuous-0.11.3.tar.gz", "yanked": false}], "0.11.4": [{"comment_text": "", "digests": {"md5": "af33ea1a95cde4b53d036ed8d4a5d400", "sha256": "3b4223cf94a646d1ae1e0414d2c912466d221b7250ee421457fd45a44aaac731"}, "downloads": -1, "filename": "voluptuous-0.11.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "af33ea1a95cde4b53d036ed8d4a5d400", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 27676, "upload_time": "2018-07-31T23:26:35", "upload_time_iso_8601": "2018-07-31T23:26:35.262446Z", "url": "https://files.pythonhosted.org/packages/06/5f/1b331e2d3791935359cd164011999d455c5ea811f679bb7001a279df811d/voluptuous-0.11.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a060c7414ae7d65c9feb898e26f2656", "sha256": "6f4a53794b2c040f1991f47e9d68efcbfbbb4c54c9d6d9e1e75eb7078be342fa"}, "downloads": -1, "filename": "voluptuous-0.11.4.tar.gz", "has_sig": false, "md5_digest": "1a060c7414ae7d65c9feb898e26f2656", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44215, "upload_time": "2018-07-31T23:26:32", "upload_time_iso_8601": "2018-07-31T23:26:32.527357Z", "url": "https://files.pythonhosted.org/packages/90/90/df511fae9e506f10dce8d36016a485a632773525d131f6582b853a7fa9bf/voluptuous-0.11.4.tar.gz", "yanked": false}], "0.11.5": [{"comment_text": "", "digests": {"md5": "1ff266f807970ef55b74d2395b86aaa8", "sha256": "303542b3fc07fb52ec3d7a1c614b329cdbee13a9d681935353d8ea56a7bfa9f1"}, "downloads": -1, "filename": "voluptuous-0.11.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1ff266f807970ef55b74d2395b86aaa8", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 27677, "upload_time": "2018-08-01T03:15:21", "upload_time_iso_8601": "2018-08-01T03:15:21.789861Z", "url": "https://files.pythonhosted.org/packages/59/95/fa6218477c6999c9b7fdfab7c12c1bd4da2d5930f5eb2b232ec74eb344e7/voluptuous-0.11.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "052b52db417a4670c5f0f7387e45ae90", "sha256": "567a56286ef82a9d7ae0628c5842f65f516abcb496e74f3f59f1d7b28df314ef"}, "downloads": -1, "filename": "voluptuous-0.11.5.tar.gz", "has_sig": false, "md5_digest": "052b52db417a4670c5f0f7387e45ae90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44216, "upload_time": "2018-08-01T03:15:19", "upload_time_iso_8601": "2018-08-01T03:15:19.086915Z", "url": "https://files.pythonhosted.org/packages/6e/5e/4e721e30cf175f9e11a5acccf4cd74898c32cae93580308ecd4cf7d2a454/voluptuous-0.11.5.tar.gz", "yanked": false}], "0.11.6": [{"comment_text": "", "digests": {"md5": "ce5eab651661223dabf7f058e886222b", "sha256": "d2ca99ae1d1ed0313e8965720d1d75a780fc7f312fea4e3dbbb56ccfe5a8306d"}, "downloads": -1, "filename": "voluptuous-0.11.6.tar.gz", "has_sig": false, "md5_digest": "ce5eab651661223dabf7f058e886222b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45044, "upload_time": "2019-08-13T02:15:00", "upload_time_iso_8601": "2019-08-13T02:15:00.825355Z", "url": "https://files.pythonhosted.org/packages/aa/0e/b2651c8f5e7a1b5bb426986bbef26b3a7612080ad653cf2da355aac97699/voluptuous-0.11.6.tar.gz", "yanked": false}], "0.11.7": [{"comment_text": "", "digests": {"md5": "695928b25384deba7c3d5e4de3520ab1", "sha256": "2abc341dbc740c5e2302c7f9b8e2e243194fb4772585b991931cb5b22e9bf456"}, "downloads": -1, "filename": "voluptuous-0.11.7.tar.gz", "has_sig": false, "md5_digest": "695928b25384deba7c3d5e4de3520ab1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45262, "upload_time": "2019-08-13T02:18:32", "upload_time_iso_8601": "2019-08-13T02:18:32.068416Z", "url": "https://files.pythonhosted.org/packages/24/3b/fe531688c0d9e057fccc0bc9430c0a3d4b90e0d2f015326e659c2944e328/voluptuous-0.11.7.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "2c5763ecb9515b5e7c73d130b9d53f1d", "sha256": "d77fe845df6750b6bae5fd012d4b4fe05d4a0785e838ce96c1caf90b7b6e5dc6"}, "downloads": -1, "filename": "voluptuous-0.2.tar.gz", "has_sig": false, "md5_digest": "2c5763ecb9515b5e7c73d130b9d53f1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5978, "upload_time": "2010-07-20T06:31:32", "upload_time_iso_8601": "2010-07-20T06:31:32.410948Z", "url": "https://files.pythonhosted.org/packages/f9/29/5d863699daa890a9a83c02e0c1bb853041d086eb50b8a7b3ae7e7c009a1c/voluptuous-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "bc24b67faa11a889d781c67f5cfbbff8", "sha256": "c7287e92a21459891839036d80233d02aa2536e14173f0b64218812586e92ff6"}, "downloads": -1, "filename": "voluptuous-0.3.tar.gz", "has_sig": false, "md5_digest": "bc24b67faa11a889d781c67f5cfbbff8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12274, "upload_time": "2010-07-28T03:17:06", "upload_time_iso_8601": "2010-07-28T03:17:06.392863Z", "url": "https://files.pythonhosted.org/packages/03/08/16e883597c365f0c3740e9f2aad04dc93509574eb428aa263b63c845fced/voluptuous-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "717f55ab2e0a000811b41c297c4ee100", "sha256": "b4a819a2ba5e93795a1cda56c421b5121ef203f3a15c5b68da2b8f1a4ca5231e"}, "downloads": -1, "filename": "voluptuous-0.3.1.tar.gz", "has_sig": false, "md5_digest": "717f55ab2e0a000811b41c297c4ee100", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13253, "upload_time": "2010-08-01T11:12:56", "upload_time_iso_8601": "2010-08-01T11:12:56.275261Z", "url": "https://files.pythonhosted.org/packages/1c/40/8d4948d3ca12804f1e54df45b8091528a1fccbffed8a27ed3afa0f5c04ff/voluptuous-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "031530b8cbf68f81ceaa74650714fee3", "sha256": "9440526f366032e9191c9620868c44e56575d5ad59ab4f3b03a10e3e24498587"}, "downloads": -1, "filename": "voluptuous-0.3.2.tar.gz", "has_sig": false, "md5_digest": "031530b8cbf68f81ceaa74650714fee3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13274, "upload_time": "2010-08-01T11:18:32", "upload_time_iso_8601": "2010-08-01T11:18:32.395656Z", "url": "https://files.pythonhosted.org/packages/c3/1f/8101ab7d29a09e3a9c9e618c68c98460e2daa18725471d7b62ce00547609/voluptuous-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "61be8fc522acedb82db31d861782b2be", "sha256": "2a53db7ba69db7e73373d2b44a9be84b8a82ac624d2434c198d3917ed7602523"}, "downloads": -1, "filename": "voluptuous-0.3.3.tar.gz", "has_sig": false, "md5_digest": "61be8fc522acedb82db31d861782b2be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13409, "upload_time": "2010-11-23T06:34:34", "upload_time_iso_8601": "2010-11-23T06:34:34.777065Z", "url": "https://files.pythonhosted.org/packages/aa/8c/1c3a3f900f3d6cafe50d8e405d8b9b6ce38bf0a39d1ae530b7e430e80d43/voluptuous-0.3.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "7e6879f5d2ac3410f29b67c9e7349428", "sha256": "6d676068428c58f3a963c3a01328eaa5fbdc2dc39b8c3e36d075a0d996e2d9fb"}, "downloads": -1, "filename": "voluptuous-0.4.tar.gz", "has_sig": false, "md5_digest": "7e6879f5d2ac3410f29b67c9e7349428", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10935, "upload_time": "2011-11-17T15:23:03", "upload_time_iso_8601": "2011-11-17T15:23:03.204369Z", "url": "https://files.pythonhosted.org/packages/34/3d/6477b9b759c712d8b44ec05040fad900840e3eb6f6377a059adf30c46973/voluptuous-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "20b188dbf41db6443e57ab8ba7a06d73", "sha256": "30ffca8e4f216813c7ba8556442474a48a25c2628d9bb7c156a37b83b5f7856d"}, "downloads": -1, "filename": "voluptuous-0.5.tar.gz", "has_sig": false, "md5_digest": "20b188dbf41db6443e57ab8ba7a06d73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11108, "upload_time": "2013-01-04T10:16:28", "upload_time_iso_8601": "2013-01-04T10:16:28.545104Z", "url": "https://files.pythonhosted.org/packages/1f/27/0616d90e1b90cebf607c4954f4f191c8798f9af9060e657b20cc430d7ceb/voluptuous-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "a118bb6cb232e179eac58411205c7a32", "sha256": "bdab57219ff93f91e7654ea038eacb3a357e006bc255d2fbd523010fc344c839"}, "downloads": -1, "filename": "voluptuous-0.6.tar.gz", "has_sig": false, "md5_digest": "a118bb6cb232e179eac58411205c7a32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15436, "upload_time": "2013-01-15T01:22:37", "upload_time_iso_8601": "2013-01-15T01:22:37.359430Z", "url": "https://files.pythonhosted.org/packages/0f/f3/e5561decba89a17e48ac78e1ab442e934255acab6fdbd7949859e3e220c2/voluptuous-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "cfbea220fbffc88539889f55a7b02795", "sha256": "b92e17f1670a0ff6f4f61d5c42f6c6a128ea207b3d74dfa7613e4004f740d5b3"}, "downloads": -1, "filename": "voluptuous-0.6.1.tar.gz", "has_sig": false, "md5_digest": "cfbea220fbffc88539889f55a7b02795", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15631, "upload_time": "2013-03-05T19:26:21", "upload_time_iso_8601": "2013-03-05T19:26:21.629239Z", "url": "https://files.pythonhosted.org/packages/95/b0/44f0feb38dff2134eda89e325f15adfda7f00259f88195e29ae52c6b836c/voluptuous-0.6.1.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "59fea6aae8024efaab18394ec373171f", "sha256": "9aed92f2f8d17894d5108674c653751599192d407717da25f26beb2008476657"}, "downloads": -1, "filename": "voluptuous-0.7.0.tar.gz", "has_sig": false, "md5_digest": "59fea6aae8024efaab18394ec373171f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12704, "upload_time": "2013-03-14T11:12:49", "upload_time_iso_8601": "2013-03-14T11:12:49.953986Z", "url": "https://files.pythonhosted.org/packages/97/0c/89c478eea34b011606a0feca0f6ebbce4609b71c10cd843c4bf512f6c16a/voluptuous-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "94f932a86f03bba44d05bbe1641aed09", "sha256": "31925cc622657c0c814c0235bb94adedf9b1b3a1f286483b37e5b4c4010bda3a"}, "downloads": -1, "filename": "voluptuous-0.7.1.tar.gz", "has_sig": false, "md5_digest": "94f932a86f03bba44d05bbe1641aed09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17818, "upload_time": "2013-03-20T14:48:56", "upload_time_iso_8601": "2013-03-20T14:48:56.030334Z", "url": "https://files.pythonhosted.org/packages/ae/dc/814354fb9486c98b075c7ce6cc9fbbe17d33047165eb58f899a9c6a1f0be/voluptuous-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "df629f4193dceafb8578b4061875aa47", "sha256": "aa95412f516ea93e4513f103a5ca82ce6b75a0508719e168cf0fb8c7e99dfdcc"}, "downloads": -1, "filename": "voluptuous-0.7.2.tar.gz", "has_sig": false, "md5_digest": "df629f4193dceafb8578b4061875aa47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18366, "upload_time": "2013-05-28T23:59:55", "upload_time_iso_8601": "2013-05-28T23:59:55.247997Z", "url": "https://files.pythonhosted.org/packages/0a/a2/e4349ba817a49e89ee2e76d0177d6623e2bc285e399043b121607332019a/voluptuous-0.7.2.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "15015bcf8adef34c4eb610d5b3f07abc", "sha256": "1a7961326c2267c971c02bafa87569b75c94e59fa42048edc5c447b3c278e368"}, "downloads": -1, "filename": "voluptuous-0.8.0.tar.gz", "has_sig": false, "md5_digest": "15015bcf8adef34c4eb610d5b3f07abc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15073, "upload_time": "2013-07-31T02:58:03", "upload_time_iso_8601": "2013-07-31T02:58:03.332071Z", "url": "https://files.pythonhosted.org/packages/87/bf/e1f1fbc4555e8c9d750801a5927ccf3d529dd4b5f47790a504e51fcb67d6/voluptuous-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "f7c186f490f1306ef5741df83c164f34", "sha256": "bdac31c6f098d6a8dbae3083b51b972a395e5404a86ace40e4ee5aef1a288a00"}, "downloads": -1, "filename": "voluptuous-0.8.1.tar.gz", "has_sig": false, "md5_digest": "f7c186f490f1306ef5741df83c164f34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15622, "upload_time": "2013-08-12T21:37:16", "upload_time_iso_8601": "2013-08-12T21:37:16.493356Z", "url": "https://files.pythonhosted.org/packages/4f/14/183eba0e0f6c8057bfb37578697c13f681719cba835725e760b6a428c7ac/voluptuous-0.8.1.tar.gz", "yanked": false}], "0.8.10": [{"comment_text": "", "digests": {"md5": "d92c382b21712dd64cde183ba13f7184", "sha256": "bb07b55a0a55cfcd62da69c4f2b043715549bbad00b12d100be13d2fe4790c65"}, "downloads": -1, "filename": "voluptuous-0.8.10.tar.gz", "has_sig": false, "md5_digest": "d92c382b21712dd64cde183ba13f7184", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28709, "upload_time": "2016-03-30T06:59:27", "upload_time_iso_8601": "2016-03-30T06:59:27.143328Z", "url": "https://files.pythonhosted.org/packages/fc/d6/6e93356b162b69536100087a955c3c6c53e5f6780a768681ee4cccf4f4fc/voluptuous-0.8.10.tar.gz", "yanked": false}], "0.8.11": [{"comment_text": "", "digests": {"md5": "0fb3c9de961a4acfac1cad1009657751", "sha256": "39e1d5cb3187bb49fdbe6f4efe50dc8ddbc17cd50cfe06cdf47a23d35d5b574c"}, "downloads": -1, "filename": "voluptuous-0.8.11.tar.gz", "has_sig": false, "md5_digest": "0fb3c9de961a4acfac1cad1009657751", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29160, "upload_time": "2016-04-14T00:30:42", "upload_time_iso_8601": "2016-04-14T00:30:42.975751Z", "url": "https://files.pythonhosted.org/packages/46/6e/a6102e3ebf7f63819c6fb69976dd803e570ddf1de673f51b3cf87ff0f81f/voluptuous-0.8.11.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "dda34443f3c34ab31d02ba2d7c78d8b4", "sha256": "ed65fad22c0c28dafd6692bd0690aa8f7715361b9c5df62af9ffb48a7eac4e6d"}, "downloads": -1, "filename": "voluptuous-0.8.2.tar.gz", "has_sig": false, "md5_digest": "dda34443f3c34ab31d02ba2d7c78d8b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12448, "upload_time": "2013-09-26T01:07:23", "upload_time_iso_8601": "2013-09-26T01:07:23.043900Z", "url": "https://files.pythonhosted.org/packages/f5/40/ea9e4a099451d5045bdf6f65610ead839c4cc66aa930a267c60ccd2ddd3a/voluptuous-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "637c3c1284ce33b4def7a8f4d8cd2bf0", "sha256": "1be4985467471bee9287a3d82b2d414bea19d355e9d8dd22d476568a5b0fd83f"}, "downloads": -1, "filename": "voluptuous-0.8.3.tar.gz", "has_sig": false, "md5_digest": "637c3c1284ce33b4def7a8f4d8cd2bf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16839, "upload_time": "2013-09-26T12:33:25", "upload_time_iso_8601": "2013-09-26T12:33:25.189312Z", "url": "https://files.pythonhosted.org/packages/78/f7/21bf273b62b1e7ee6944ca1fb72de985848d8062813dbe445120d3b70783/voluptuous-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "325739633a637eed06731a8c70dff1e3", "sha256": "0b44e482dffb55f099fd84bc08d3622b0278e997a87bbcd59ac1cb7142982407"}, "downloads": -1, "filename": "voluptuous-0.8.4.tar.gz", "has_sig": false, "md5_digest": "325739633a637eed06731a8c70dff1e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17382, "upload_time": "2013-11-10T02:40:06", "upload_time_iso_8601": "2013-11-10T02:40:06.361305Z", "url": "https://files.pythonhosted.org/packages/27/c0/7c7c1f05ad15f0ed3028516bda5711c0a6ad2eea21739b6aaf248d711080/voluptuous-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "8ce8b7a5db0d21488bd588827923a895", "sha256": "493c645b3d383c213b4f9a677b676c5d3f2b704e487fbca68a26f4e68832df91"}, "downloads": -1, "filename": "voluptuous-0.8.5.tar.gz", "has_sig": false, "md5_digest": "8ce8b7a5db0d21488bd588827923a895", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17990, "upload_time": "2014-03-14T12:49:35", "upload_time_iso_8601": "2014-03-14T12:49:35.788706Z", "url": "https://files.pythonhosted.org/packages/16/5f/0c1c45249b01322de3e8b144e841f244210fc7839b73592d12539e7f30cd/voluptuous-0.8.5.tar.gz", "yanked": false}], "0.8.6": [{"comment_text": "", "digests": {"md5": "7889a0de3497ae59a84098ce560fbd6e", "sha256": "ec53650e3ce082056ca7d26bea53dae443ac6a5dc1910bd13e2343aff252b87d"}, "downloads": -1, "filename": "voluptuous-0.8.6.tar.gz", "has_sig": false, "md5_digest": "7889a0de3497ae59a84098ce560fbd6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22812, "upload_time": "2014-10-10T22:00:50", "upload_time_iso_8601": "2014-10-10T22:00:50.094041Z", "url": "https://files.pythonhosted.org/packages/16/6a/b4ad1245364213460f0811f4d79d147cf24589e5e974d1d8dd97bafeff74/voluptuous-0.8.6.tar.gz", "yanked": false}], "0.8.7": [{"comment_text": "", "digests": {"md5": "0f0949147b439590b3289e391ce5330b", "sha256": "17c438cd0bc73e22988d05d3c1f6118598b260456af9a0990c00e2ba5a2fff23"}, "downloads": -1, "filename": "voluptuous-0.8.7.tar.gz", "has_sig": false, "md5_digest": "0f0949147b439590b3289e391ce5330b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24929, "upload_time": "2014-12-12T23:43:46", "upload_time_iso_8601": "2014-12-12T23:43:46.231837Z", "url": "https://files.pythonhosted.org/packages/5d/fc/c537904b527d66514c0ec7b1cada7a832d95416924e3ea481b98d31ccf65/voluptuous-0.8.7.tar.gz", "yanked": false}], "0.8.8": [{"comment_text": "", "digests": {"md5": "d39128d69dce5395c8a3c5c6474bf740", "sha256": "d9c57bf20bb27e29aabb66600dba0e323cdfc81c063bb7f668d85dab6ef89938"}, "downloads": -1, "filename": "voluptuous-0.8.8.tar.gz", "has_sig": false, "md5_digest": "d39128d69dce5395c8a3c5c6474bf740", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27543, "upload_time": "2015-12-15T14:11:27", "upload_time_iso_8601": "2015-12-15T14:11:27.772889Z", "url": "https://files.pythonhosted.org/packages/28/45/9c02558bb3e9fc585ec91855b28301fd18256b7ad518b92f2cf77bf36ab5/voluptuous-0.8.8.tar.gz", "yanked": false}], "0.8.9": [{"comment_text": "", "digests": {"md5": "dc02da0fc6c2b87b2092400da9598e39", "sha256": "6e1562d51b7ff77692509479d9e2d8ea4c00294bcc1f0236605a3c86923e04b4"}, "downloads": -1, "filename": "voluptuous-0.8.9.tar.gz", "has_sig": false, "md5_digest": "dc02da0fc6c2b87b2092400da9598e39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28152, "upload_time": "2016-03-07T00:51:08", "upload_time_iso_8601": "2016-03-07T00:51:08.756921Z", "url": "https://files.pythonhosted.org/packages/a6/46/74bb2eca8bc6780512503d09481520d1d0f5ee97d3046733ec7940c24e60/voluptuous-0.8.9.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "7fbb5e193b1c3b3dd0742f7b6bd69824", "sha256": "0e75a2c343f2e2c54440010cdc08e248583697bb657f83f54fd7475162d26ef1"}, "downloads": -1, "filename": "voluptuous-0.9.0.tar.gz", "has_sig": false, "md5_digest": "7fbb5e193b1c3b3dd0742f7b6bd69824", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29844, "upload_time": "2016-07-22T08:23:49", "upload_time_iso_8601": "2016-07-22T08:23:49.885323Z", "url": "https://files.pythonhosted.org/packages/76/94/e0a499fdbbfef8df40993690b33cf8345ce83cc60c2b7694b6f8bb0f24e1/voluptuous-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "90c916a16eb147bc84b1aa8eaa4886fe", "sha256": "3c0eb279b6bd922ad83e421a4e224ea14b0cd4e1aca70b1b4245319bab0f27ce"}, "downloads": -1, "filename": "voluptuous-0.9.1.tar.gz", "has_sig": false, "md5_digest": "90c916a16eb147bc84b1aa8eaa4886fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29860, "upload_time": "2016-07-22T11:54:56", "upload_time_iso_8601": "2016-07-22T11:54:56.969491Z", "url": "https://files.pythonhosted.org/packages/03/c4/8a00e81263cf91be18ca6f71611a86674bf7657095ad8e241bc5ccd89b13/voluptuous-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "bb27287ac1e51c972aa9ba911af846d4", "sha256": "01f21a3168a911551cbf89373763273189cb84196f0c7a5c0b86bd48c01f8d8b"}, "downloads": -1, "filename": "voluptuous-0.9.2.tar.gz", "has_sig": false, "md5_digest": "bb27287ac1e51c972aa9ba911af846d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29857, "upload_time": "2016-08-01T03:21:14", "upload_time_iso_8601": "2016-08-01T03:21:14.713278Z", "url": "https://files.pythonhosted.org/packages/4a/f8/82762db7c28d36800052a61ce26a9c8d362d765aff1c5ce8cb6a01418b7a/voluptuous-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "3dfccea158f4d48c1b7ad23d48eabb6e", "sha256": "ed5a11fda273754caabb6becd5fe172ee2621cd2c8ff8279433173bb7b0ec568"}, "downloads": -1, "filename": "voluptuous-0.9.3.tar.gz", "has_sig": false, "md5_digest": "3dfccea158f4d48c1b7ad23d48eabb6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34097, "upload_time": "2016-08-02T23:04:32", "upload_time_iso_8601": "2016-08-02T23:04:32.351829Z", "url": "https://files.pythonhosted.org/packages/e6/5d/2b9ed56f2e69fe54cf00d07b7b3b9b43e8c9763dff3015365bd4c3f6f2a6/voluptuous-0.9.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "695928b25384deba7c3d5e4de3520ab1", "sha256": "2abc341dbc740c5e2302c7f9b8e2e243194fb4772585b991931cb5b22e9bf456"}, "downloads": -1, "filename": "voluptuous-0.11.7.tar.gz", "has_sig": false, "md5_digest": "695928b25384deba7c3d5e4de3520ab1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45262, "upload_time": "2019-08-13T02:18:32", "upload_time_iso_8601": "2019-08-13T02:18:32.068416Z", "url": "https://files.pythonhosted.org/packages/24/3b/fe531688c0d9e057fccc0bc9430c0a3d4b90e0d2f015326e659c2944e328/voluptuous-0.11.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:25 2020"}