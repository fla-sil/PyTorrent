{"info": {"author": "Serafeim Papastefanos", "author_email": "spapas@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries"], "description": "==================\ndjango-authorities\n==================\n\nAn application for managing your organization's authorities (departments, directorates etc). This is an app built to mainly cover the needs of the organization I work for (a public sector organization in Greece); however feel free to use it if you like it.\n\nRationale\n=========\n\nThis more or less is a *better* ``auth.Group`` to help you building the hierarchy of an organization. Why not just use ``auth.Group``? Well, unfortunately, ``auth.Group`` is missing various needed things like:\n\n* ``category``: You may have departments, teams, directoratates\n* ``active``: Some authorities are de-activated; they should not be deleted though\n* ``parent``: You'll need to have a proper authority hierarchy\n\nAlso, for me the django ``auth.Group`` entity feels more like an application/system-related concept (vs the HR Authority provided in this add-on). I.e you can have a django auth group of \"Administrators\" or \"Advanced users\" or \"Moderators\" etc; these people may belong to various directorates; not all people in the \"IT department\" need to be Administrators of the application.\n\nNow, there are *more* things that may be useful for an authority/HR system, like\n\n* ``manager``: Who manages the authority\n* ``user-job``: The users of an authority may have different jobs like manager (this is complementary to the first one), teller, client development etc\n\nI haven't added these fields yet because I don't need them for my projects. If the need arises I'll add them.\n\nInstallation\n============\n\nInstall it with ``pip install django-authorities``, or if you want to use the latest version on github, try ``pip install git+https://github.com/spapas/django-authorities``.\n\nAfter it is installed, put ``authorities`` in your ``INSTALLED_APPS`` setting.  \n\nSimple usage\n============\n\nThis is a very simple app with two models and a couple of views for editing these.\n\nAfter you've installed it, you can visit the django admin to edit ``authorities.Authority`` and\n``authorities.AuthorityKind``. ``AuthorityKind`` only has a name (so it can be directorate, department\nteam etc) while ``Authority`` has ``kind`` (``AuthorityKind``), ``is_active`` (boolean), ``parent`` \n(an optional FK to another ``Authority`` to create hierarchies) and ``users`` (an M2M relation with \n``settings.AUTH_USER_MODEL``; each user can belong to multiple authorities and each authority will\nhave more than one user).\n\nAlso I've included a couple of non-admin views which you can use\nas they are or modify them to fit your needs. Either inherit from or and them in your own urls.py as they are or ``include`` the\nwhole ``authorities.urls``. The templates of these views inherit from a ``base.html`` which needs \nto provide a ``content`` and a ``{% page_title %}`` block. Thus your ``base.html`` template could be like this:\n\n\n.. code::\n\n    <html>\n        <body>\n            <h1>{% block page_title %}{% endblock %}</h1>\n            {% block content %}{% endblock %}\n        </body>\n    </html>\n\n\nThese views are:\n\n- authorities.views.AuthorityListView\n- authorities.views.AuthorityCreateView\n- authorities.views.AuthorityUpdateView\n- authorities.views.AuthorityDetailView\n- authorities.views.AuthorityEditUsersView\n\n\nThe names are self-explanatory; notice that the Create and Update views do not allow you to edit the users of that authority; you must use the ``AuthorityEditUsersView`` for that.\n\nYou can either use these views in your urls.py or just add something like ``path(\"authorities/\", include(\"authorities.urls\")),`` in your urls.py.\n\nTo improve security a bit I'm checking that a user has the proper permission for authority in the app's urls.py before allowing access to these views, i.e ``authorities.view_authority``\nfor list and view, ``authorities.add_authority`` for add and ``authorities.change_authority`` for edit and edit users.\n\n\nTo use the provided template tag, you need to ``{% load authorities_tags %}`` and then you can do something\nlike this in your template:\n\n.. code::\n\n    {% if user.is_authenticated %}\n        {% user_authorities as my_authorities %}\n        {% if my_authorities %}\n            My authorities are: \n            <ul>\n            {% for a in my_authorities  %}\n                <li>{{ a.name }}</li>\n            {% endfor %}\n            </ul>\n        {% endif %}\n    {% endif %}\n\t\nv.0.2.3\n-------\n\n- Improve permissions\n\nv.0.2.2\n-------\n\n- Fix MANIFEST.in to include locale files\n\n\nv.0.2.1\n-------\n\n- Add a missing migration\n\nv.0.2.0\n-------\n\n- Add greek translations\n- Improve standard views a bit\n- Add some security to the builtin views\n\n\nv.0.1.2\n-------\n\n- Add template tags to get current user authorities\n- Improve README\n\nv.0.1.0\n-------\n\n- Initial version", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spapas/django-authorities/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-authorities", "package_url": "https://pypi.org/project/django-authorities/", "platform": "", "project_url": "https://pypi.org/project/django-authorities/", "project_urls": {"Homepage": "https://github.com/spapas/django-authorities/"}, "release_url": "https://pypi.org/project/django-authorities/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "An application for managing your organization's authorities (departments, directorates etc)", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An application for managing your organization\u2019s authorities (departments, directorates etc). This is an app built to mainly cover the needs of the organization I work for (a public sector organization in Greece); however feel free to use it if you like it.</p>\n<div id=\"rationale\">\n<h2>Rationale</h2>\n<p>This more or less is a <em>better</em> <tt>auth.Group</tt> to help you building the hierarchy of an organization. Why not just use <tt>auth.Group</tt>? Well, unfortunately, <tt>auth.Group</tt> is missing various needed things like:</p>\n<ul>\n<li><tt>category</tt>: You may have departments, teams, directoratates</li>\n<li><tt>active</tt>: Some authorities are de-activated; they should not be deleted though</li>\n<li><tt>parent</tt>: You\u2019ll need to have a proper authority hierarchy</li>\n</ul>\n<p>Also, for me the django <tt>auth.Group</tt> entity feels more like an application/system-related concept (vs the HR Authority provided in this add-on). I.e you can have a django auth group of \u201cAdministrators\u201d or \u201cAdvanced users\u201d or \u201cModerators\u201d etc; these people may belong to various directorates; not all people in the \u201cIT department\u201d need to be Administrators of the application.</p>\n<p>Now, there are <em>more</em> things that may be useful for an authority/HR system, like</p>\n<ul>\n<li><tt>manager</tt>: Who manages the authority</li>\n<li><tt><span class=\"pre\">user-job</span></tt>: The users of an authority may have different jobs like manager (this is complementary to the first one), teller, client development etc</li>\n</ul>\n<p>I haven\u2019t added these fields yet because I don\u2019t need them for my projects. If the need arises I\u2019ll add them.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install it with <tt>pip install <span class=\"pre\">django-authorities</span></tt>, or if you want to use the latest version on github, try <tt>pip install <span class=\"pre\">git+https://github.com/spapas/django-authorities</span></tt>.</p>\n<p>After it is installed, put <tt>authorities</tt> in your <tt>INSTALLED_APPS</tt> setting.</p>\n</div>\n<div id=\"simple-usage\">\n<h2>Simple usage</h2>\n<p>This is a very simple app with two models and a couple of views for editing these.</p>\n<p>After you\u2019ve installed it, you can visit the django admin to edit <tt>authorities.Authority</tt> and\n<tt>authorities.AuthorityKind</tt>. <tt>AuthorityKind</tt> only has a name (so it can be directorate, department\nteam etc) while <tt>Authority</tt> has <tt>kind</tt> (<tt>AuthorityKind</tt>), <tt>is_active</tt> (boolean), <tt>parent</tt>\n(an optional FK to another <tt>Authority</tt> to create hierarchies) and <tt>users</tt> (an M2M relation with\n<tt>settings.AUTH_USER_MODEL</tt>; each user can belong to multiple authorities and each authority will\nhave more than one user).</p>\n<p>Also I\u2019ve included a couple of non-admin views which you can use\nas they are or modify them to fit your needs. Either inherit from or and them in your own urls.py as they are or <tt>include</tt> the\nwhole <tt>authorities.urls</tt>. The templates of these views inherit from a <tt>base.html</tt> which needs\nto provide a <tt>content</tt> and a <tt>{% page_title %}</tt> block. Thus your <tt>base.html</tt> template could be like this:</p>\n<pre>&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;{% block page_title %}{% endblock %}&lt;/h1&gt;\n        {% block content %}{% endblock %}\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>These views are:</p>\n<ul>\n<li>authorities.views.AuthorityListView</li>\n<li>authorities.views.AuthorityCreateView</li>\n<li>authorities.views.AuthorityUpdateView</li>\n<li>authorities.views.AuthorityDetailView</li>\n<li>authorities.views.AuthorityEditUsersView</li>\n</ul>\n<p>The names are self-explanatory; notice that the Create and Update views do not allow you to edit the users of that authority; you must use the <tt>AuthorityEditUsersView</tt> for that.</p>\n<p>You can either use these views in your urls.py or just add something like <tt><span class=\"pre\">path(\"authorities/\",</span> <span class=\"pre\">include(\"authorities.urls\")),</span></tt> in your urls.py.</p>\n<p>To improve security a bit I\u2019m checking that a user has the proper permission for authority in the app\u2019s urls.py before allowing access to these views, i.e <tt>authorities.view_authority</tt>\nfor list and view, <tt>authorities.add_authority</tt> for add and <tt>authorities.change_authority</tt> for edit and edit users.</p>\n<p>To use the provided template tag, you need to <tt>{% load authorities_tags %}</tt> and then you can do something\nlike this in your template:</p>\n<pre>{% if user.is_authenticated %}\n    {% user_authorities as my_authorities %}\n    {% if my_authorities %}\n        My authorities are:\n        &lt;ul&gt;\n        {% for a in my_authorities  %}\n            &lt;li&gt;{{ a.name }}&lt;/li&gt;\n        {% endfor %}\n        &lt;/ul&gt;\n    {% endif %}\n{% endif %}\n</pre>\n<div id=\"v-0-2-3\">\n<h3>v.0.2.3</h3>\n<ul>\n<li>Improve permissions</li>\n</ul>\n</div>\n<div id=\"v-0-2-2\">\n<h3>v.0.2.2</h3>\n<ul>\n<li>Fix MANIFEST.in to include locale files</li>\n</ul>\n</div>\n<div id=\"v-0-2-1\">\n<h3>v.0.2.1</h3>\n<ul>\n<li>Add a missing migration</li>\n</ul>\n</div>\n<div id=\"v-0-2-0\">\n<h3>v.0.2.0</h3>\n<ul>\n<li>Add greek translations</li>\n<li>Improve standard views a bit</li>\n<li>Add some security to the builtin views</li>\n</ul>\n</div>\n<div id=\"v-0-1-2\">\n<h3>v.0.1.2</h3>\n<ul>\n<li>Add template tags to get current user authorities</li>\n<li>Improve README</li>\n</ul>\n</div>\n<div id=\"v-0-1-0\">\n<h3>v.0.1.0</h3>\n<ul>\n<li>Initial version</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6894746, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0feb02ec952b5a843d2c56eac51621b1", "sha256": "4e02953358cca9c7c6085fccb1da1e3df160e49acbf8d3712ec18744ce464fa5"}, "downloads": -1, "filename": "django-authorities-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0feb02ec952b5a843d2c56eac51621b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5086, "upload_time": "2018-06-21T09:57:20", "upload_time_iso_8601": "2018-06-21T09:57:20.040818Z", "url": "https://files.pythonhosted.org/packages/46/56/491d73f7155d6406514bcfc43a0c034125c7f3c75dc46b9781869a2bfcbe/django-authorities-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0857c5ccc8974cb80a57f092b15e89cb", "sha256": "b79eeae80759a1c913ad39b110209e87049a11b9686d7e29f55bff49bfa48b13"}, "downloads": -1, "filename": "django-authorities-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0857c5ccc8974cb80a57f092b15e89cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5489, "upload_time": "2018-06-21T10:06:19", "upload_time_iso_8601": "2018-06-21T10:06:19.753048Z", "url": "https://files.pythonhosted.org/packages/ec/cf/2e654af338f45c0c357bf7eb3a977c0bee52517c9659b5185bb2c4b61ec2/django-authorities-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ef3f393775205fea3c7937f0edd1da40", "sha256": "7407ff177a26aa1957dcb6c2bbadeda767a045e1f0770c61bcf0d51d0cca02b5"}, "downloads": -1, "filename": "django-authorities-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ef3f393775205fea3c7937f0edd1da40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9485, "upload_time": "2020-02-24T11:56:13", "upload_time_iso_8601": "2020-02-24T11:56:13.205809Z", "url": "https://files.pythonhosted.org/packages/15/83/cd5096994fbd65d1c8fb79a94ab223f411122745457e33a66dda8bcbd90e/django-authorities-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4d011adbb041a97078b9e3b274f33ec3", "sha256": "b67e2a523ca4985a321b2c56ecae806d364879d53130ca95aabd756164850bcd"}, "downloads": -1, "filename": "django-authorities-0.2.1.tar.gz", "has_sig": false, "md5_digest": "4d011adbb041a97078b9e3b274f33ec3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9676, "upload_time": "2020-02-24T11:59:29", "upload_time_iso_8601": "2020-02-24T11:59:29.831581Z", "url": "https://files.pythonhosted.org/packages/85/72/cb2153a2c6f3727df7eff18a0d7f34a0e27c10072811f32eb0812bfb40cf/django-authorities-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "3836202218e0bf2cd3df9d86a18176f3", "sha256": "cbc49a1219ad037d0d369558e0af0bf46c613d6af9485da4b52a2f252beb2513"}, "downloads": -1, "filename": "django-authorities-0.2.2.tar.gz", "has_sig": false, "md5_digest": "3836202218e0bf2cd3df9d86a18176f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11591, "upload_time": "2020-03-27T07:28:23", "upload_time_iso_8601": "2020-03-27T07:28:23.244647Z", "url": "https://files.pythonhosted.org/packages/f2/30/d4af158a254a3064e087bcc552dfe9c1b698f4120eb781011f6250b233fc/django-authorities-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "11170b1f5b6080ad612ec4d86d056dad", "sha256": "6c030323b18f64a01c4db46f6d265564690067c330395cba1298c2ed7d0b05d8"}, "downloads": -1, "filename": "django-authorities-0.2.3.tar.gz", "has_sig": false, "md5_digest": "11170b1f5b6080ad612ec4d86d056dad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11884, "upload_time": "2020-03-27T09:10:23", "upload_time_iso_8601": "2020-03-27T09:10:23.517910Z", "url": "https://files.pythonhosted.org/packages/17/ca/057c1f0b7f1672e66f4cae9e2083ab738b789d7fe7b3c283d35c195ed3e7/django-authorities-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "11170b1f5b6080ad612ec4d86d056dad", "sha256": "6c030323b18f64a01c4db46f6d265564690067c330395cba1298c2ed7d0b05d8"}, "downloads": -1, "filename": "django-authorities-0.2.3.tar.gz", "has_sig": false, "md5_digest": "11170b1f5b6080ad612ec4d86d056dad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11884, "upload_time": "2020-03-27T09:10:23", "upload_time_iso_8601": "2020-03-27T09:10:23.517910Z", "url": "https://files.pythonhosted.org/packages/17/ca/057c1f0b7f1672e66f4cae9e2083ab738b789d7fe7b3c283d35c195ed3e7/django-authorities-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:33 2020"}