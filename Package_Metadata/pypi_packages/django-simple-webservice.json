{"info": {"author": "Liricus SRL", "author_email": "info@liricus.com.ar", "bugtrack_url": null, "classifiers": [], "description": "django-simple-webservice\n========================\n\nEste paquete genera una muy simple interfaz (parecida a json-rpc)\nde comunicaci\u00f3n con su aplicaci\u00f3n.\n\nSETUP\n-----\n\n1. Install ``django-summernote`` to your python environment.\n\n::\n\n        pip install django-summernote\n\n2. Add ``django_summernote`` to ``INSTALLED_APP`` in ``settings.py``.\n\n.. code-block:: python\n\n        INSTALLED_APPS += ('simple_webservice', )\n\n3. Add ``django_summernote.urls`` to ``urls.py``.\n\n.. code-block:: python\n\n        urlpatterns = patterns('',\n            ...\n            url(r'^ws/', include('simple_webservice.urls', namespace='ws')),\n            ...\n        )\n\n4. Add ``webservice_autodiscover()`` an the top os ``urls.py``\n\n.. code-block:: python\n\n    from simple_webservice import webservice_autodiscover\n    webservice_autodiscover()\n\n    urlpatterns = patterns('',\n        ...\n    )\n\n\nUSAGE\n-----\n\n1. create a file ``webservices.py`` inside the app with the webservices\n\n2. Inside the file copy and paste ne next line\n\n.. code-block:: python\n\n    import simple_webservice as ws\n\n\n3. Puedes agregar las operaciones comunes de sobre los modelos que quieres\n   exponer como tus webservices, y puedes restringir el acceso a esos servicios\n   por ejemplo, si deseamos darle permiso de lectura al modelo ``User`` del\n   sistema de autenticacion de django para que cualquier persona pueda\n   consultar a dichos registros pero solo usuarios logueados puedan\n   modificarlos podemos escibir algo como:\n\n   .. code-block:: python\n\n        from django.contrib import auth\n\n        import simple_webservice as ws\n\n        ws.register_model(auth.models.User, select=True)\n        ws.register_model(auth.models.User, select=True, login=True)\n\n\n    Pueden darse tambien varios permisos para operaciones en una misma linea\n    pero manteniendo los modificadores de acceso iguales. Por ejemplo si\n    quisieramos darle todos los permisos para todas las operaciones pero\n    sin estarlo logeado al modelo Grupos, podriamos hacer\n\n    .. code-block:: python\n\n        ws.register_model(auth.models.Group, select=True, insert=True,\n                          update=True, delete=True, login=True)\n\n4. Otra alternativa es crear webservices mas espec\u00edficos que representen mas\n   la logica de su aplicaci\u00f3n. Supongamos que tenemos el siguiente modelo\n   en su aplicacion ``foo``\n\n   .. code-block:: python\n\n        class Faa(models.Model):\n\n            some_date = models.DateTimeField()\n\n\n   Y deseamos hacer un metodo que siempre devuelva los objetos que superen un\n   cierto dia en ``some_date``. Podemos crear un webservice con la siguiente\n   forma.\n\n   .. code-block:: python\n\n        from foo.models import Faa\n\n        @ws.register_call(login=True)\n        def example_webservice(filter_date, *kwargs):\n            # the date need to como alwys in iso format\n            filter_date = ws.parse_data(\n                {\"some_date\": filter_date}, Faa\n            )[\"some_date\"]\n\n            query = Faa.objects.filter(some_date__gte=filter_date)\n            return ws.query_to_dict(query)\n\n\nComo realizar las consultas\n---------------------------\n\nPara realizar las consultas usted dispone de  una api uniforme que recive y\nemite el formato JSON.\n\nEstas llamadas siempre se encuentran diponible en la url de su aplicaci\u00f3n en\nel path ``ws/call/``. Por ejemplo si usted esta corriendo su servidor de\ndesarrollo en localhost y el pueto 8000 las llamadas se recibiran en\n\n::\n\n    http://localhost:8000/ws/call/\n\n\nLa forma de TODA llamada se parece siempre tiene la siguiente estructura:\n\n.. code-block:: javascript\n\n    {\n        \"id\": <null|string|int|bool>,\n        \"name\": \"name_of_webservice_to_execute\",\n        \"args\": { \"arguments of the call\" },\n        \"session\": \"session id if you are logged in ot null\"\n    }\n\nEl ``id`` solo sirve para identificar llamadas con respuestas\n\nLas respuestas siempre tienen la forma:\n\n      .. code-block:: javascript\n\n          {\n            'id': None,\n            \"stacktrace\": \"\",\n            \"error\": false,\n            \"response\": {\"respuesta de la llamada\"},\n            \"error_msg\": \"\"\n          }\n\n\nLas llamadas principales son:\n\n    - ``ping`` Retorna siempre *true* su objetivo es solo saber si el servicio\n      funcion.\n\n      **Llamada**\n\n      .. code-block:: javascript\n\n            {\n                \"id\": null,\n                \"name\": \"ping\",\n                \"args\": {},\n                \"session\": null\n            }\n\n      **Respuesta**\n\n      .. code-block:: javascript\n\n          {\n            'id': None,\n            \"stacktrace\": \"\",\n            \"error\": false,\n            \"response\": {\"ping\": true},\n            \"error_msg\": \"\"\n          }\n\n\n\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/liricus/django-simple-webservice", "keywords": "webservices json simple django", "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "django-simple-webservice", "package_url": "https://pypi.org/project/django-simple-webservice/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-simple-webservice/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/liricus/django-simple-webservice"}, "release_url": "https://pypi.org/project/django-simple-webservice/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Django app for simple create  json-rpc like webservices", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Este paquete genera una muy simple interfaz (parecida a json-rpc)\nde comunicaci\u00f3n con su aplicaci\u00f3n.</p>\n<div id=\"setup\">\n<h2>SETUP</h2>\n<ol>\n<li>Install <tt><span class=\"pre\">django-summernote</span></tt> to your python environment.</li>\n</ol>\n<pre>pip install django-summernote\n</pre>\n<ol>\n<li>Add <tt>django_summernote</tt> to <tt>INSTALLED_APP</tt> in <tt>settings.py</tt>.</li>\n</ol>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"s1\">'simple_webservice'</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Add <tt>django_summernote.urls</tt> to <tt>urls.py</tt>.</li>\n</ol>\n<pre><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^ws/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'simple_webservice.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'ws'</span><span class=\"p\">)),</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<ol>\n<li>Add <tt>webservice_autodiscover()</tt> an the top os <tt>urls.py</tt></li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simple_webservice</span> <span class=\"kn\">import</span> <span class=\"n\">webservice_autodiscover</span>\n<span class=\"n\">webservice_autodiscover</span><span class=\"p\">()</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>USAGE</h2>\n<ol>\n<li>create a file <tt>webservices.py</tt> inside the app with the webservices</li>\n<li>Inside the file copy and paste ne next line</li>\n</ol>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">simple_webservice</span> <span class=\"k\">as</span> <span class=\"nn\">ws</span>\n</pre>\n<ol>\n<li><p>Puedes agregar las operaciones comunes de sobre los modelos que quieres\nexponer como tus webservices, y puedes restringir el acceso a esos servicios\npor ejemplo, si deseamos darle permiso de lectura al modelo <tt>User</tt> del\nsistema de autenticacion de django para que cualquier persona pueda\nconsultar a dichos registros pero solo usuarios logueados puedan\nmodificarlos podemos escibir algo como:</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">auth</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">simple_webservice</span> <span class=\"k\">as</span> <span class=\"nn\">ws</span>\n\n    <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">register_model</span><span class=\"p\">(</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">select</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">register_model</span><span class=\"p\">(</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">select</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">login</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">Pueden</span> <span class=\"n\">darse</span> <span class=\"n\">tambien</span> <span class=\"n\">varios</span> <span class=\"n\">permisos</span> <span class=\"n\">para</span> <span class=\"n\">operaciones</span> <span class=\"n\">en</span> <span class=\"n\">una</span> <span class=\"n\">misma</span> <span class=\"n\">linea</span>\n<span class=\"n\">pero</span> <span class=\"n\">manteniendo</span> <span class=\"n\">los</span> <span class=\"n\">modificadores</span> <span class=\"n\">de</span> <span class=\"n\">acceso</span> <span class=\"n\">iguales</span><span class=\"o\">.</span> <span class=\"n\">Por</span> <span class=\"n\">ejemplo</span> <span class=\"n\">si</span>\n<span class=\"n\">quisieramos</span> <span class=\"n\">darle</span> <span class=\"n\">todos</span> <span class=\"n\">los</span> <span class=\"n\">permisos</span> <span class=\"n\">para</span> <span class=\"n\">todas</span> <span class=\"n\">las</span> <span class=\"n\">operaciones</span> <span class=\"n\">pero</span>\n<span class=\"n\">sin</span> <span class=\"n\">estarlo</span> <span class=\"n\">logeado</span> <span class=\"n\">al</span> <span class=\"n\">modelo</span> <span class=\"n\">Grupos</span><span class=\"p\">,</span> <span class=\"n\">podriamos</span> <span class=\"n\">hacer</span>\n\n<span class=\"o\">..</span> <span class=\"n\">code</span><span class=\"o\">-</span><span class=\"n\">block</span><span class=\"p\">::</span> <span class=\"n\">python</span>\n\n    <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">register_model</span><span class=\"p\">(</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">select</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">insert</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                      <span class=\"n\">update</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">delete</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">login</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Otra alternativa es crear webservices mas espec\u00edficos que representen mas\nla logica de su aplicaci\u00f3n. Supongamos que tenemos el siguiente modelo\nen su aplicacion <tt>foo</tt></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Faa</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n\n    <span class=\"n\">some_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">()</span>\n</pre>\n<p>Y deseamos hacer un metodo que siempre devuelva los objetos que superen un\ncierto dia en <tt>some_date</tt>. Podemos crear un webservice con la siguiente\nforma.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">foo.models</span> <span class=\"kn\">import</span> <span class=\"n\">Faa</span>\n\n<span class=\"nd\">@ws</span><span class=\"o\">.</span><span class=\"n\">register_call</span><span class=\"p\">(</span><span class=\"n\">login</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">example_webservice</span><span class=\"p\">(</span><span class=\"n\">filter_date</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># the date need to como alwys in iso format</span>\n    <span class=\"n\">filter_date</span> <span class=\"o\">=</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">parse_data</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span><span class=\"s2\">\"some_date\"</span><span class=\"p\">:</span> <span class=\"n\">filter_date</span><span class=\"p\">},</span> <span class=\"n\">Faa</span>\n    <span class=\"p\">)[</span><span class=\"s2\">\"some_date\"</span><span class=\"p\">]</span>\n\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Faa</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">some_date__gte</span><span class=\"o\">=</span><span class=\"n\">filter_date</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ws</span><span class=\"o\">.</span><span class=\"n\">query_to_dict</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"como-realizar-las-consultas\">\n<h2>Como realizar las consultas</h2>\n<p>Para realizar las consultas usted dispone de  una api uniforme que recive y\nemite el formato JSON.</p>\n<p>Estas llamadas siempre se encuentran diponible en la url de su aplicaci\u00f3n en\nel path <tt>ws/call/</tt>. Por ejemplo si usted esta corriendo su servidor de\ndesarrollo en localhost y el pueto 8000 las llamadas se recibiran en</p>\n<pre>http://localhost:8000/ws/call/\n</pre>\n<p>La forma de TODA llamada se parece siempre tiene la siguiente estructura:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"id\"</span><span class=\"o\">:</span> <span class=\"o\">&lt;</span><span class=\"kc\">null</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">int</span><span class=\"o\">|</span><span class=\"nx\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"name_of_webservice_to_execute\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"args\"</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"s2\">\"arguments of the call\"</span> <span class=\"p\">},</span>\n    <span class=\"s2\">\"session\"</span><span class=\"o\">:</span> <span class=\"s2\">\"session id if you are logged in ot null\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>El <tt>id</tt> solo sirve para identificar llamadas con respuestas</p>\n<p>Las respuestas siempre tienen la forma:</p>\n<blockquote>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'id'</span><span class=\"o\">:</span> <span class=\"nx\">None</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"stacktrace\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"response\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"respuesta de la llamada\"</span><span class=\"p\">},</span>\n  <span class=\"s2\">\"error_msg\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n</pre>\n</blockquote>\n<p>Las llamadas principales son:</p>\n<blockquote>\n<ul>\n<li><p><tt>ping</tt> Retorna siempre <em>true</em> su objetivo es solo saber si el servicio\nfuncion.</p>\n<p><strong>Llamada</strong></p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"id\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"ping\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"args\"</span><span class=\"o\">:</span> <span class=\"p\">{},</span>\n    <span class=\"s2\">\"session\"</span><span class=\"o\">:</span> <span class=\"kc\">null</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Respuesta</strong></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'id'</span><span class=\"o\">:</span> <span class=\"nx\">None</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"stacktrace\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"response\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"ping\"</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">},</span>\n  <span class=\"s2\">\"error_msg\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n</pre>\n</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 1138621, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ffb964d193f90e8f8b622b2858ca744f", "sha256": "a4b806648aef12710430e88c47c6a9e1755eecfab81477c761656d6e1ae12f74"}, "downloads": -1, "filename": "django-simple-webservice-0.1.tar.gz", "has_sig": false, "md5_digest": "ffb964d193f90e8f8b622b2858ca744f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11438, "upload_time": "2014-06-26T18:16:12", "upload_time_iso_8601": "2014-06-26T18:16:12.398542Z", "url": "https://files.pythonhosted.org/packages/83/30/619bebdaf861fac1e17bb6920154516131f362f312b9dd9ebb4d0cbfa849/django-simple-webservice-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b329c2ededffbca7d30760207885de40", "sha256": "9fc30a7146778bd2825eac949fc1000ffbff3646dbea390be9a5c022f3f2c807"}, "downloads": -1, "filename": "django-simple-webservice-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b329c2ededffbca7d30760207885de40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11443, "upload_time": "2014-06-26T18:18:48", "upload_time_iso_8601": "2014-06-26T18:18:48.692164Z", "url": "https://files.pythonhosted.org/packages/f0/e4/9bf0350a18497b012511baa33a142db4136d5c9705d357e174fd864d72e5/django-simple-webservice-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b329c2ededffbca7d30760207885de40", "sha256": "9fc30a7146778bd2825eac949fc1000ffbff3646dbea390be9a5c022f3f2c807"}, "downloads": -1, "filename": "django-simple-webservice-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b329c2ededffbca7d30760207885de40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11443, "upload_time": "2014-06-26T18:18:48", "upload_time_iso_8601": "2014-06-26T18:18:48.692164Z", "url": "https://files.pythonhosted.org/packages/f0/e4/9bf0350a18497b012511baa33a142db4136d5c9705d357e174fd864d72e5/django-simple-webservice-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:19 2020"}