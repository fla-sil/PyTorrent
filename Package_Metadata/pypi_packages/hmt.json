{"info": {"author": "Meeshkan Dev Team", "author_email": "dev@hmt.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# HMT\n\n[![CircleCI](https://circleci.com/gh/meeshkan/hmt.svg?style=shield)](https://circleci.com/gh/meeshkan/hmt)\n[![PyPI](https://img.shields.io/pypi/dm/hmt.svg)](https://pypi.org/project/hmt/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://black.readthedocs.io/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)\n\nThe HTTP Mocking Toolkit (HMT) is a tool that mocks HTTP APIs for use in sandboxes as well as for automated and exploratory testing. It uses a combination of API definitions, recorded traffic and code in order to make crafting mocks as enjoyable as possible.\n\n[Chat with us on Gitter](https://gitter.im/hmt/community) to let us know about questions, problems or ideas!\n\n## What's in this document\n\n- [Installation](#installation)\n- [Getting started with HMT](#getting-started-with-hmt)\n  - [Tutorial](#tutorial)\n- [Collect recordings of API traffic](#collect-recordings-of-api-traffic)\n- [Build a HMT spec from recordings](#build-a-hmt-spec-from-recordings)\n  - [Building modes](#building-modes)\n- [Mock server traffic using a HMT spec](#mock-server-traffic-using-a-hmt-spec)\n- [Development](#development)\n  - [Getting started](#getting-started)\n  - [Tests](#tests)\n  - [Type-checking](#type-checking)\n  - [Automated builds](#automated-builds)\n  - [Publishing HMT as a PyPi package](#publishing-hmt-as-a-pypi-package)\n- [Contributing](#contributing)\n  - [Code of Conduct](#code-of-conduct)\n\n## Installation\nInstall via [pip](https://pip.pypa.io/en/stable/installing/) (requires **Python 3.6+**):\n\n```bash\npip install hmt\n```\n\nmacOS users can install HMT with [Homebrew](https://brew.sh/):\n\n```sh\nbrew tap hmt/tap\nbrew install hmt\n```\n\nDebian and Ubuntu users can install HMT with `apt`:\n\n```sh\necho \"deb [trusted=yes] https://dl.bintray.com/hmt/apt all main\" | tee -a /etc/apt/sources.list\napt-get -qq update && apt-get install hmt\n```\n\n\n## Getting started with HMT\n\nThe basic HMT flow is **collect, build and mock.**\n1. First, **collect** data from recorded server traffic and/or OpenAPI specs.\n1. Then, **build** a schema that unifies these various data sources.\n1. Finally, use this schema to create a **mock** server of an API.\n\n### Tutorial\n\nThe quickest way to get an overview of HMT is to complete our interactive tutorial. It walks you through the collect, build, and mock flow - while also covering the concepts necessary for development.\n\n_Note: This tutorial has been tested on Python 3.6, 3.7, and 3.8._\n\nAfter installing HMT, you can begin the tutorial by invoking from the command line:\n\n```bash\n$ hmt tutorial\n```\n\nOnce you've run this, you should see:\n\n```bash\n    __              __ \n   / /_  ____ ___  / /_\n  / __ \\/ __ `__ \\/ __/\n / / / / / / / / / /_\n/_/ /_/_/ /_/ /_/\\__/\n\n\nThe tutorial!!\nPress ENTER to continue...\n```\n\nIf not, it's probably our fault. Please let us know by [filing an issue on this repo](https://github.com/meeshkan/hmt/issues).\n\n## Collect recordings of API traffic\n\nLet's look at how to build a HMT spec. First, you have to **collect** recordings of server traffic and/or OpenAPI server specs.\n\nTo record API traffic, the HMT CLI provides a `record` mode that captures API traffic using a proxy.\n\n```bash\n$ hmt record\n```\n\nThis command starts HMT as a reverse proxy on the default port of `8000` and creates two directories: `logs` and `specs`. \n\nWith [curl](https://curl.haxx.se/), for example, you can use HMT as a proxy like so:\n\n```bash\n$ curl http://localhost:8000/http://api.example.com\n```\n\nBy default, the recording proxy treats the path as the target URL. It then writes a [`.jsonl`](https://jsonlines.org) file containing logs of all server traffic to the `logs` directory.  All logs are created in the [`http-types`](https://github.com/meeshkan/http-types) format. This is because HMT's `build` tool expects all recordings to be represented in a `.jsonl` file containing recordings represented in the `http-types` format.\n\nFor more information about recording, including direct file writing and kafka streaming, see the [recording documentation](./docs/RECORD.md).\n\n## Build a HMT spec from recordings\n\nUsing the HMT CLI, you can **build** an OpenAPI schema from a single `.jsonl` file, in addition to any existing OpenAPI specs that describe how your service works.\n\n```bash\n$ hmt build --input-file path/to/recordings.jsonl \n```\n\n_Note: The input file should be in [JSON Lines](http://jsonlines.org/) format and every line should be in [http-types](https://hmt.github.io/http-types/) JSON format. For an example input file, see [recordings.jsonl](./resources/recordings.jsonl)._\n\nOptionally, you can also specify an output directory using the `--out` flag followed by the path to this directory. By default, HMT will build the new OpenAPI specifications in the `specs` directory. \n\nUse dash (`--input-file -`) to read from standard input:\n\n```bash\n$ hmt build --input-file - < recordings.jsonl\n```\n### Building modes\nYou can use a mode flag to indicate how the OpenAPI spec should be built, for example:\n\n```bash\nhmt build --input-file path/to/recordings.jsonl --mode gen\n```\n\nSupported modes are:\n* gen [default] - infer a schema from the recorded data\n* replay - replay the recorded data based on exact matching\n\nFor more information about building, including mixing together the two modes and editing the created OpenAPI schema, see the [building documentation](./docs/BUILD.md).\n\n## Mock server traffic using a HMT spec\n\nYou can use an OpenAPI spec, such as the one created with `hmt build`, to create a **mock** server using HMT.\n\n```bash\n$ hmt mock path/to/dir/\n```\n\n_Note: You can specify a path to the directory your OpenAPI spec is in or a path to one specific file._\n\nFor more information about mocking, including adding custom middleware and modifying the mocking schema JIT via an admin API, see the [mocking documentation](./docs/MOCK.md).\n\n## Development\n\nHere are some useful tips for building and running HMT from source. \n\nIf you run into any issues, please [reach out to our team on Gitter](https://gitter.im/HMT/community).\n\n### Getting started\n\n1. Clone this repository: `git clone https://github.com/meeshkan/hmt`\n1. Create a virtual environment: `python3 -m venv .venv && source .venv/bin/activate`\n1. Install dependencies: `pip install --upgrade -e '.[dev]'`\n1. Install [`pre-commit`](https://pre-commit.com/) hooks to automatically format code as a git hook: `pre-commit install`\n\n### Tests\n\nRun all checks:\n\n```bash\n$ python setup.py test\n```\n\n#### `pytest`\n\nRun [tests/](https://github.com/meeshkan/hmt/tree/master/tests/) with `pytest`:\n\n```bash\npytest\n# or\npython setup.py test\n```\n\nConfiguration for `pytest` is found in [pytest.ini](https://github.com/meeshkan/hmt/tree/master/pytest.ini).\n\n#### Formatting\n\nFormatting is checked by the above mentioned `python setup.py test` command.\n\nTo fix formatting:\n\n```sh\n$ python setup.py format\n```\n\n#### `flake8`\n\nRun style checks:\n\n```bash\n$ flake8 .\n```\n\n#### `pyright`\n\nYou can run type-checking by installing [pyright](https://github.com/microsoft/pyright) globally:\n\n```bash\n$ npm -i -g pyright\n```\n\nAnd then running:\n\n```bash\n$ pyright --lib\n$ # or\n$ python setup.py typecheck\n```\n\nUsing the [Pyright extension](https://marketplace.visualstudio.com/items?itemName=ms-pyright.pyright) is recommended for development in VS Code.\n\n### Automated builds\n\nConfiguration for CircleCI [build pipeline](https://app.circleci.com/github/HMT/hmt/pipelines) can be found in [.circleci/config.yml](https://github.com/meeshkan/hmt/tree/master/.circleci/config.yml).\n\n### Publishing HMT as a PyPi package\n\nTo publish HMT as a PyPi package, complete the following steps:\n\n1. Bump the version in [setup.py](https://github.com/meeshkan/hmt/tree/master/setup.py) if the version is the same as in the published [package](https://pypi.org/project/hmt/). Commit and push.\n1. Run `python setup.py test` to check that everything works\n1. To build and upload the package, run `python setup.py upload`. Insert PyPI credentials to upload the package to `PyPI`. The command will also run `git tag` to tag the commit as a release and push the tags to remote.\n\n> To see what the different commands do, see `Command` classes in [setup.py](https://github.com/meeshkan/hmt/tree/master/setup.py).\n\n## Contributing\n\nThanks for your interest in contributing! Please take a look at our [development guide](#development) for notes on how to develop the package locally.  A great way to start contributing is to [file an issue](https://github.com/meeshkan/hmt/issue) or [make a pull request](https://github.com/meeshkan/hmt/pulls).\n\n### Code of Conduct\n\nPlease note that this project is governed by the [HMT Community Code of Conduct](https://github.com/meeshkan/code-of-conduct). By participating, you agree to abide by its terms.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/hmt/hmt", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hmt", "package_url": "https://pypi.org/project/hmt/", "platform": "", "project_url": "https://pypi.org/project/hmt/", "project_urls": {"Homepage": "http://github.com/hmt/hmt"}, "release_url": "https://pypi.org/project/hmt/0.3.1/", "requires_dist": ["click (==7.0)", "lenses", "pyyaml", "jsonschema", "faker", "requests", "typing-extensions", "openapi-typed-2 (>=0.0.4)", "typeguard (>=2.7.0)", "genson", "http-types (<0.1.0,>=0.0.15)", "faust", "tornado (==5.1.1)", "urllib3 (==1.25.6)", "meeshkan-daemonocle", "clint", "pyfiglet", "progress", "psutil (>=5.6.3)", "jsonpath-rw (>=1.4.0)", "dataclasses ; python_version < \"3.7\"", "black (==19.10b0) ; extra == 'dev'", "flake8 ; extra == 'dev'", "isort ; extra == 'dev'", "mypy ; extra == 'dev'", "pre-commit ; extra == 'dev'", "pyhamcrest ; extra == 'dev'", "pylint ; extra == 'dev'", "pytest (>=5.4.1) ; extra == 'dev'", "pytest-asyncio ; extra == 'dev'", "pytest-testmon ; extra == 'dev'", "pytest-tornado ; extra == 'dev'", "pytest-watch ; extra == 'dev'", "requests-mock ; extra == 'dev'", "setuptools ; extra == 'dev'", "twine ; extra == 'dev'", "wheel ; extra == 'dev'"], "requires_python": ">=3.6.0", "summary": "Reverse engineer services with style", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>HMT</h1>\n<p><a href=\"https://circleci.com/gh/meeshkan/hmt\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/30aa071c627071702153f5ff796f11408ef0b2fb/68747470733a2f2f636972636c6563692e636f6d2f67682f6d656573686b616e2f686d742e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://pypi.org/project/hmt/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a4b5c0a53581fa09c29f34efdddae307eb0ca39/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f686d742e737667\"></a>\n<a href=\"https://black.readthedocs.io/\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5aab1d039acf22567ba072834df6bce204ac48ad/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d677265656e2e737667\"></a></p>\n<p>The HTTP Mocking Toolkit (HMT) is a tool that mocks HTTP APIs for use in sandboxes as well as for automated and exploratory testing. It uses a combination of API definitions, recorded traffic and code in order to make crafting mocks as enjoyable as possible.</p>\n<p><a href=\"https://gitter.im/hmt/community\" rel=\"nofollow\">Chat with us on Gitter</a> to let us know about questions, problems or ideas!</p>\n<h2>What's in this document</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#getting-started-with-hmt\" rel=\"nofollow\">Getting started with HMT</a>\n<ul>\n<li><a href=\"#tutorial\" rel=\"nofollow\">Tutorial</a></li>\n</ul>\n</li>\n<li><a href=\"#collect-recordings-of-api-traffic\" rel=\"nofollow\">Collect recordings of API traffic</a></li>\n<li><a href=\"#build-a-hmt-spec-from-recordings\" rel=\"nofollow\">Build a HMT spec from recordings</a>\n<ul>\n<li><a href=\"#building-modes\" rel=\"nofollow\">Building modes</a></li>\n</ul>\n</li>\n<li><a href=\"#mock-server-traffic-using-a-hmt-spec\" rel=\"nofollow\">Mock server traffic using a HMT spec</a></li>\n<li><a href=\"#development\" rel=\"nofollow\">Development</a>\n<ul>\n<li><a href=\"#getting-started\" rel=\"nofollow\">Getting started</a></li>\n<li><a href=\"#tests\" rel=\"nofollow\">Tests</a></li>\n<li><a href=\"#type-checking\" rel=\"nofollow\">Type-checking</a></li>\n<li><a href=\"#automated-builds\" rel=\"nofollow\">Automated builds</a></li>\n<li><a href=\"#publishing-hmt-as-a-pypi-package\" rel=\"nofollow\">Publishing HMT as a PyPi package</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a>\n<ul>\n<li><a href=\"#code-of-conduct\" rel=\"nofollow\">Code of Conduct</a></li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Install via <a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"nofollow\">pip</a> (requires <strong>Python 3.6+</strong>):</p>\n<pre>pip install hmt\n</pre>\n<p>macOS users can install HMT with <a href=\"https://brew.sh/\" rel=\"nofollow\">Homebrew</a>:</p>\n<pre>brew tap hmt/tap\nbrew install hmt\n</pre>\n<p>Debian and Ubuntu users can install HMT with <code>apt</code>:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"deb [trusted=yes] https://dl.bintray.com/hmt/apt all main\"</span> <span class=\"p\">|</span> tee -a /etc/apt/sources.list\napt-get -qq update <span class=\"o\">&amp;&amp;</span> apt-get install hmt\n</pre>\n<h2>Getting started with HMT</h2>\n<p>The basic HMT flow is <strong>collect, build and mock.</strong></p>\n<ol>\n<li>First, <strong>collect</strong> data from recorded server traffic and/or OpenAPI specs.</li>\n<li>Then, <strong>build</strong> a schema that unifies these various data sources.</li>\n<li>Finally, use this schema to create a <strong>mock</strong> server of an API.</li>\n</ol>\n<h3>Tutorial</h3>\n<p>The quickest way to get an overview of HMT is to complete our interactive tutorial. It walks you through the collect, build, and mock flow - while also covering the concepts necessary for development.</p>\n<p><em>Note: This tutorial has been tested on Python 3.6, 3.7, and 3.8.</em></p>\n<p>After installing HMT, you can begin the tutorial by invoking from the command line:</p>\n<pre>$ hmt tutorial\n</pre>\n<p>Once you've run this, you should see:</p>\n<pre>    __              __ \n   / /_  ____ ___  / /_\n  / __ <span class=\"se\">\\/</span> __ <span class=\"sb\">`</span>__ <span class=\"se\">\\/</span> __/\n / / / / / / / / / /_\n/_/ /_/_/ /_/ /_/<span class=\"se\">\\_</span>_/\n\n\nThe tutorial!!\nPress ENTER to <span class=\"k\">continue</span>...\n</pre>\n<p>If not, it's probably our fault. Please let us know by <a href=\"https://github.com/meeshkan/hmt/issues\" rel=\"nofollow\">filing an issue on this repo</a>.</p>\n<h2>Collect recordings of API traffic</h2>\n<p>Let's look at how to build a HMT spec. First, you have to <strong>collect</strong> recordings of server traffic and/or OpenAPI server specs.</p>\n<p>To record API traffic, the HMT CLI provides a <code>record</code> mode that captures API traffic using a proxy.</p>\n<pre>$ hmt record\n</pre>\n<p>This command starts HMT as a reverse proxy on the default port of <code>8000</code> and creates two directories: <code>logs</code> and <code>specs</code>.</p>\n<p>With <a href=\"https://curl.haxx.se/\" rel=\"nofollow\">curl</a>, for example, you can use HMT as a proxy like so:</p>\n<pre>$ curl http://localhost:8000/http://api.example.com\n</pre>\n<p>By default, the recording proxy treats the path as the target URL. It then writes a <a href=\"https://jsonlines.org\" rel=\"nofollow\"><code>.jsonl</code></a> file containing logs of all server traffic to the <code>logs</code> directory.  All logs are created in the <a href=\"https://github.com/meeshkan/http-types\" rel=\"nofollow\"><code>http-types</code></a> format. This is because HMT's <code>build</code> tool expects all recordings to be represented in a <code>.jsonl</code> file containing recordings represented in the <code>http-types</code> format.</p>\n<p>For more information about recording, including direct file writing and kafka streaming, see the <a href=\"./docs/RECORD.md\" rel=\"nofollow\">recording documentation</a>.</p>\n<h2>Build a HMT spec from recordings</h2>\n<p>Using the HMT CLI, you can <strong>build</strong> an OpenAPI schema from a single <code>.jsonl</code> file, in addition to any existing OpenAPI specs that describe how your service works.</p>\n<pre>$ hmt build --input-file path/to/recordings.jsonl \n</pre>\n<p><em>Note: The input file should be in <a href=\"http://jsonlines.org/\" rel=\"nofollow\">JSON Lines</a> format and every line should be in <a href=\"https://hmt.github.io/http-types/\" rel=\"nofollow\">http-types</a> JSON format. For an example input file, see <a href=\"./resources/recordings.jsonl\" rel=\"nofollow\">recordings.jsonl</a>.</em></p>\n<p>Optionally, you can also specify an output directory using the <code>--out</code> flag followed by the path to this directory. By default, HMT will build the new OpenAPI specifications in the <code>specs</code> directory.</p>\n<p>Use dash (<code>--input-file -</code>) to read from standard input:</p>\n<pre>$ hmt build --input-file - &lt; recordings.jsonl\n</pre>\n<h3>Building modes</h3>\n<p>You can use a mode flag to indicate how the OpenAPI spec should be built, for example:</p>\n<pre>hmt build --input-file path/to/recordings.jsonl --mode gen\n</pre>\n<p>Supported modes are:</p>\n<ul>\n<li>gen [default] - infer a schema from the recorded data</li>\n<li>replay - replay the recorded data based on exact matching</li>\n</ul>\n<p>For more information about building, including mixing together the two modes and editing the created OpenAPI schema, see the <a href=\"./docs/BUILD.md\" rel=\"nofollow\">building documentation</a>.</p>\n<h2>Mock server traffic using a HMT spec</h2>\n<p>You can use an OpenAPI spec, such as the one created with <code>hmt build</code>, to create a <strong>mock</strong> server using HMT.</p>\n<pre>$ hmt mock path/to/dir/\n</pre>\n<p><em>Note: You can specify a path to the directory your OpenAPI spec is in or a path to one specific file.</em></p>\n<p>For more information about mocking, including adding custom middleware and modifying the mocking schema JIT via an admin API, see the <a href=\"./docs/MOCK.md\" rel=\"nofollow\">mocking documentation</a>.</p>\n<h2>Development</h2>\n<p>Here are some useful tips for building and running HMT from source.</p>\n<p>If you run into any issues, please <a href=\"https://gitter.im/HMT/community\" rel=\"nofollow\">reach out to our team on Gitter</a>.</p>\n<h3>Getting started</h3>\n<ol>\n<li>Clone this repository: <code>git clone https://github.com/meeshkan/hmt</code></li>\n<li>Create a virtual environment: <code>python3 -m venv .venv &amp;&amp; source .venv/bin/activate</code></li>\n<li>Install dependencies: <code>pip install --upgrade -e '.[dev]'</code></li>\n<li>Install <a href=\"https://pre-commit.com/\" rel=\"nofollow\"><code>pre-commit</code></a> hooks to automatically format code as a git hook: <code>pre-commit install</code></li>\n</ol>\n<h3>Tests</h3>\n<p>Run all checks:</p>\n<pre>$ python setup.py <span class=\"nb\">test</span>\n</pre>\n<h4><code>pytest</code></h4>\n<p>Run <a href=\"https://github.com/meeshkan/hmt/tree/master/tests/\" rel=\"nofollow\">tests/</a> with <code>pytest</code>:</p>\n<pre>pytest\n<span class=\"c1\"># or</span>\npython setup.py <span class=\"nb\">test</span>\n</pre>\n<p>Configuration for <code>pytest</code> is found in <a href=\"https://github.com/meeshkan/hmt/tree/master/pytest.ini\" rel=\"nofollow\">pytest.ini</a>.</p>\n<h4>Formatting</h4>\n<p>Formatting is checked by the above mentioned <code>python setup.py test</code> command.</p>\n<p>To fix formatting:</p>\n<pre>$ python setup.py format\n</pre>\n<h4><code>flake8</code></h4>\n<p>Run style checks:</p>\n<pre>$ flake8 .\n</pre>\n<h4><code>pyright</code></h4>\n<p>You can run type-checking by installing <a href=\"https://github.com/microsoft/pyright\" rel=\"nofollow\">pyright</a> globally:</p>\n<pre>$ npm -i -g pyright\n</pre>\n<p>And then running:</p>\n<pre>$ pyright --lib\n$ <span class=\"c1\"># or</span>\n$ python setup.py typecheck\n</pre>\n<p>Using the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-pyright.pyright\" rel=\"nofollow\">Pyright extension</a> is recommended for development in VS Code.</p>\n<h3>Automated builds</h3>\n<p>Configuration for CircleCI <a href=\"https://app.circleci.com/github/HMT/hmt/pipelines\" rel=\"nofollow\">build pipeline</a> can be found in <a href=\"https://github.com/meeshkan/hmt/tree/master/.circleci/config.yml\" rel=\"nofollow\">.circleci/config.yml</a>.</p>\n<h3>Publishing HMT as a PyPi package</h3>\n<p>To publish HMT as a PyPi package, complete the following steps:</p>\n<ol>\n<li>Bump the version in <a href=\"https://github.com/meeshkan/hmt/tree/master/setup.py\" rel=\"nofollow\">setup.py</a> if the version is the same as in the published <a href=\"https://pypi.org/project/hmt/\" rel=\"nofollow\">package</a>. Commit and push.</li>\n<li>Run <code>python setup.py test</code> to check that everything works</li>\n<li>To build and upload the package, run <code>python setup.py upload</code>. Insert PyPI credentials to upload the package to <code>PyPI</code>. The command will also run <code>git tag</code> to tag the commit as a release and push the tags to remote.</li>\n</ol>\n<blockquote>\n<p>To see what the different commands do, see <code>Command</code> classes in <a href=\"https://github.com/meeshkan/hmt/tree/master/setup.py\" rel=\"nofollow\">setup.py</a>.</p>\n</blockquote>\n<h2>Contributing</h2>\n<p>Thanks for your interest in contributing! Please take a look at our <a href=\"#development\" rel=\"nofollow\">development guide</a> for notes on how to develop the package locally.  A great way to start contributing is to <a href=\"https://github.com/meeshkan/hmt/issue\" rel=\"nofollow\">file an issue</a> or <a href=\"https://github.com/meeshkan/hmt/pulls\" rel=\"nofollow\">make a pull request</a>.</p>\n<h3>Code of Conduct</h3>\n<p>Please note that this project is governed by the <a href=\"https://github.com/meeshkan/code-of-conduct\" rel=\"nofollow\">HMT Community Code of Conduct</a>. By participating, you agree to abide by its terms.</p>\n\n          </div>"}, "last_serial": 7186833, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "f1716bd255dbe708102775300b1e214c", "sha256": "963317f0d52ddeb03238b3c7f4a1e65af2e47a06e44f2f5f6dca19be8adc0852"}, "downloads": -1, "filename": "hmt-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f1716bd255dbe708102775300b1e214c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 119064, "upload_time": "2020-05-05T11:25:58", "upload_time_iso_8601": "2020-05-05T11:25:58.948873Z", "url": "https://files.pythonhosted.org/packages/ba/1f/c19509f11c5f2d0dd59ff7377cb56ac9ad0d243b70c192fb26ca37522c03/hmt-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7f1c629c6e523f0e60705c8bd45c188", "sha256": "f98e0e957b87b633cc5fdc790a2444ae820a06e0a960c44525c178a6daf0f3c4"}, "downloads": -1, "filename": "hmt-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e7f1c629c6e523f0e60705c8bd45c188", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 55508, "upload_time": "2020-05-05T11:26:02", "upload_time_iso_8601": "2020-05-05T11:26:02.205555Z", "url": "https://files.pythonhosted.org/packages/13/0b/666a638c4d1421793563827efba6ba978fc2a0f4cc53ce1903a1c09d7d20/hmt-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "70e5dd480c1be5b6a8a2fc614c4541aa", "sha256": "1356596eabc34baf232b73f87af8c107c6d0f173bf12360edec696a5f385ad8d"}, "downloads": -1, "filename": "hmt-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "70e5dd480c1be5b6a8a2fc614c4541aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 128953, "upload_time": "2020-05-07T09:27:33", "upload_time_iso_8601": "2020-05-07T09:27:33.153698Z", "url": "https://files.pythonhosted.org/packages/e6/99/fecb819db05c864b9b515d52e2fb1b451c6e76ef7f59b419869e19cf873a/hmt-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebd7ab912a028f65b8fd0ea139ce0602", "sha256": "43d2b250ff3f27f1febe1138ea950d003d5d07f19c040e1a6d2b43eaea648656"}, "downloads": -1, "filename": "hmt-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ebd7ab912a028f65b8fd0ea139ce0602", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 64217, "upload_time": "2020-05-07T09:27:34", "upload_time_iso_8601": "2020-05-07T09:27:34.709688Z", "url": "https://files.pythonhosted.org/packages/52/f6/74a40751c6a099679aaca8aa7b4d6bf3ec6c369b74337054382e518d9e0b/hmt-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "70e5dd480c1be5b6a8a2fc614c4541aa", "sha256": "1356596eabc34baf232b73f87af8c107c6d0f173bf12360edec696a5f385ad8d"}, "downloads": -1, "filename": "hmt-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "70e5dd480c1be5b6a8a2fc614c4541aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 128953, "upload_time": "2020-05-07T09:27:33", "upload_time_iso_8601": "2020-05-07T09:27:33.153698Z", "url": "https://files.pythonhosted.org/packages/e6/99/fecb819db05c864b9b515d52e2fb1b451c6e76ef7f59b419869e19cf873a/hmt-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebd7ab912a028f65b8fd0ea139ce0602", "sha256": "43d2b250ff3f27f1febe1138ea950d003d5d07f19c040e1a6d2b43eaea648656"}, "downloads": -1, "filename": "hmt-0.3.1.tar.gz", "has_sig": false, "md5_digest": "ebd7ab912a028f65b8fd0ea139ce0602", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 64217, "upload_time": "2020-05-07T09:27:34", "upload_time_iso_8601": "2020-05-07T09:27:34.709688Z", "url": "https://files.pythonhosted.org/packages/52/f6/74a40751c6a099679aaca8aa7b4d6bf3ec6c369b74337054382e518d9e0b/hmt-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:54 2020"}