{"info": {"author": "RapidMiner", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# RapidMiner Python package\n\nThis Python package allows you to interact with RapidMiner Studio and Server. You can collaborate using the RapidMiner repository and leverage the scalable Server infrastructure to run processes. This document shows examples on how to use the package. Additional notebook files provide more advanced examples. There is an API document for each classes: [Studio](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Studio.md), [Server](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Server.md), [Scoring](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Scoring.md).\n\n## Table of contents\n\n- [Requirements](#requirements)\n- [Known current limitations](#known-current-limitations)\n- [Overview](#requirements)\n- [Installation](#installation)\n- [Studio](#studio)\n- [Server](#server)\n- [Scoring](#scoring)\n\n## Requirements\n\n* RapidMiner Studio *9.5.0* or later for Studio class\n* RapidMiner Server *9.5.0* or later for Server class\n* Python Scripting extension *9.6.0* or later installed for both Studio and Server, download it from the [Marketplace](https://marketplace.rapidminer.com/UpdateServer/faces/product_details.xhtml?productId=rmx_python_scripting)\n\n## Known current limitations\n\n* Python version: \n  * Extensive tests were only carried out using *Python 3.7*, but earlier versions are expected to work as well.\n  * Python 2 is not supported.\n* Studio and Server processes guarantee reproducibility. That means you should always get the same result after a version update. The same feature *cannot be guaranteed* when using this Python library (the library depends on other libraries that our not in our control).\n* Server with [SAML authentication](https://redirects.rapidminer.com/web/saml-authentication) is not yet supported.\n\n## Overview\n\nBoth Studio and Server classes provide a read and a write method for reading / writing data and other objects, and a run method to run processes. The method signatures are the same, with somewhat different extra parameters.\n\nStudio class requires a local Studio installation and is suitable in the following cases:\n* Implementing certain data science steps in Python using your favorite IDE or notebook implementation. You may even use the resulting code afterwards in a RapidMiner process within an *Execute Python* operator.\n* You are using coding primarily, but you want to incorporate methods that are impemented in a RapidMiner process.\n* Creating batch tasks that also interact with the repository and / or run processes.\n\nServer class connects directly to a Server instance without the need of a Studio installation. It is suitable in the following cases:\n* Collaborating with RapidMiner users, sharing data easily.\n* Calling, running, scheduling processes on the RapidMiner Server platform from a local script.\n\n## Installation\n\nThe library can be installed easily:\n\n- install in one step:\n\n        $ pip install rapidminer\n\n- or clone the repository and install:\n\n        $ git clone https://github.com/rapidminer/python-rapidminer.git\n        $ cd python-rapidminer\n        $ python setup.py install\n\n## Studio\n\nYou need to have a locally installed RapidMiner Studio instance to use this class. The only thing you need to provide is your installation path. Once that is specified, you can read from and write data or other objects to any configured repository. You can also run processes from files or from the repository. In this section, we show you some examples on how to read and write repository data and run processes. For more advanced scenarios see the included [IPython notebook](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/examples/studio_examples.ipynb) and the [documentation of the `Studio` class](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Studio.md).\n\nNote that each `Studio` method starts a Studio instance in the background and stops it when it is done. It is not recommended to run multiple instances in parallel, e.g. on different Notebook tabs. If you have several RapidMiner extensions installed, all of them will be loaded each time, that may lead to longer runtime. Provide multiple parameters to a read or write call, if possible, to avoid the startup overhead. \n\nFirst you need a `Connector` object to interact with Studio. Once you have that, you can read and write data or run a process with a single line. To create a `Studio` `Connector` object, run the following code:\n\n```python\nimport rapidminer\nconnector = rapidminer.Studio(\"/path/to/you/studio/installation\")\n```\n\nwhere you replace `\"/path/to/you/studio/installation\"` with the location of your Studio installation. In case of Windows, a typical path is `\"C:/Program Files/RapidMiner/RapidMiner Studio\"` - note that you should either use forward \"/\" as separators or put an `r` before the first quote character to indicate raw string\n. In case of Mac, the path is usually `\"/Applications/RapidMiner Studio.app/Contents/Resources/RapidMiner-Studio\"`. Alternatively you can define this location via the `RAPIDMINER_HOME` environment variable.\n\n##### Reading ExampleSet\n\nOnce you have a connector instance, you can read a RapidMiner ExampleSet in Python by running the following line:\n\n```python\ndf = connector.read_resource(\"//Samples/data/Iris\")\n```\n\nThe resulting `df` is a `pandas` `DataFrame` object, which you can use in the conventional way.\n\n##### Writing ExampleSet\n\nYou can save any `pandas` `DataFrame` object to a RapidMiner repository (or file) with the following command:\n\n```python\nconnector.write_resource(df, \"//Local Repository/data/mydata\")\n```\n\nwhere `df` is the `DataFrame` object you want to write to the repository, and `\"//Local Repository/data/mydata\"` is the location where you want to store it.\n\n##### Running a process\n\nTo run a process execute the following line:\n\n```python\ndf = connector.run_process(\"//Samples/processes/02_Preprocessing/01_Normalization\")\n```\n\nYou will get the results as `pandas` `DataFrames`. You can also define inputs, and many more. For more examples, see the [examples notebook](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/examples/studio_examples.ipynb)\n\n## Server\n\nWith `Server` class, you can directly connect to a local or remote Server instance without the need for any local RapidMiner (Studio) installation. You can read data from and write data to the Server repository and you can execute processes using the scalable Job Agent architecture. In this section, we show you some examples on how to read and write repository data and run processes. For more advanced scenarios see the included [IPython notebook](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/examples/server_examples.ipynb) and the [documentation of the `Server` class](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Server.md).\n\n### Installation of Server API\n\nThe `Server` class requires a web service backend to be installed on RapidMiner Server. This is done automatically on the first instantiation of the Server class. The repository folder `/shared` is used by default to store the backend process. This folder exists and is accessible by anyone starting from RapidMiner Server 9.6.0.\n\n`Server` class instantiation can be fully automated (thus, no need for user input), if you specify `url`, `username` and `password` parameters.\n\nOn the RapidMiner Server web UI you can see the installed web service backend (*Processes*->*Web Services*). It has the name *Repository Service* by default, but you can change that with the optional parameter of `Server` class named `webservice`. You can change the process path location by setting 'processpath', but you need to make sure that it will be executable by all users of the Server API. If the web service is deleted, the next `Server` instantiation will re-create it.\n\n### Usage of Server API\n\nTo create a `Server` `Connector` object, run the following code:\n\n```python\nimport rapidminer\nconnector = rapidminer.Server(\"https://myserver.mycompany.com:8080\", username=\"myrmuser\")\n```\n\nwhere you replace `\"https://myserver.mycompany.com:8080\"` with the url of your Server instance and `\"myrmuser\"` with your username.\n\n##### Reading ExampleSet\n\nOnce you have a connector instance, you can read a RapidMiner ExampleSet in Python by running the following line:\n\n```python\ndf = connector.read_resource(\"/home/myrmuser/data/mydata\")\n```\n\nThe resulting `df` is a `pandas` `DataFrame` object, which you can use in the conventional way.\n\n##### Writing ExampleSet\n\nYou can save any `pandas` `DataFrame` object to the Server repository with the following command:\n\n```python\nconnector.write_resource(df, \"/home/myrmuser/data/myresult\")\n```\n\nwhere `df` is the `DataFrame` object you want to write to the repository, and `\"/home/myrmuser/data/myresult\"` is the location where you want to store it.\n\n##### Running a process\n\nTo run a process execute the following line:\n\n```python\ndf = connector.run_process(\"/home/myrmsuer/process/transform_data\", inputs=df)\n```\n\nYou will get the results as `pandas` `DataFrames`. You can also define multiple inputs, and other parameters. For more examples, see the [examples notebook](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/examples/server_examples.ipynb)\n\n## Scoring\n\nThis class allows you to easily use a deployed [Real-Time Scoring](https://docs.rapidminer.com/server/scoring-agent/) service. You only need to provide the Server url and the particular scoring service endpoint to create a class instance. After that, you can use the predict method to do scoring on a Pandas DataFrame and get the result in a Pandas DataFrame as well. For instructions on how to deploy Real-Time Scoring on Server, please refer to its documentation.\n\n```python\nsc = rapidminer.Scoring(\"http://myserver.mycompany.com:8090\", \"score-sales/score1\")\nprediction = sc.predict(df)\n```\n\nwhere the scoring endpoint is at `\"score-sales/score1\"` that can be applied to the dataset `df`, and the resulting `prediction` is a `pandas` `DataFrame` object. You can find the `Scoring` class [documentation here](https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Scoring.md).\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rapidminer/python-rapidminer", "keywords": "", "license": "AGPL", "maintainer": "", "maintainer_email": "", "name": "rapidminer", "package_url": "https://pypi.org/project/rapidminer/", "platform": "", "project_url": "https://pypi.org/project/rapidminer/", "project_urls": {"Homepage": "https://github.com/rapidminer/python-rapidminer"}, "release_url": "https://pypi.org/project/rapidminer/9.6.0.0/", "requires_dist": ["pandas", "requests", "numpy", "zeep"], "requires_python": ">=3", "summary": "Tools for running RapidMiner processes and managing RapidMiner repositories.", "version": "9.6.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>RapidMiner Python package</h1>\n<p>This Python package allows you to interact with RapidMiner Studio and Server. You can collaborate using the RapidMiner repository and leverage the scalable Server infrastructure to run processes. This document shows examples on how to use the package. Additional notebook files provide more advanced examples. There is an API document for each classes: <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Studio.md\" rel=\"nofollow\">Studio</a>, <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Server.md\" rel=\"nofollow\">Server</a>, <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Scoring.md\" rel=\"nofollow\">Scoring</a>.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#known-current-limitations\" rel=\"nofollow\">Known current limitations</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#studio\" rel=\"nofollow\">Studio</a></li>\n<li><a href=\"#server\" rel=\"nofollow\">Server</a></li>\n<li><a href=\"#scoring\" rel=\"nofollow\">Scoring</a></li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>RapidMiner Studio <em>9.5.0</em> or later for Studio class</li>\n<li>RapidMiner Server <em>9.5.0</em> or later for Server class</li>\n<li>Python Scripting extension <em>9.6.0</em> or later installed for both Studio and Server, download it from the <a href=\"https://marketplace.rapidminer.com/UpdateServer/faces/product_details.xhtml?productId=rmx_python_scripting\" rel=\"nofollow\">Marketplace</a></li>\n</ul>\n<h2>Known current limitations</h2>\n<ul>\n<li>Python version:\n<ul>\n<li>Extensive tests were only carried out using <em>Python 3.7</em>, but earlier versions are expected to work as well.</li>\n<li>Python 2 is not supported.</li>\n</ul>\n</li>\n<li>Studio and Server processes guarantee reproducibility. That means you should always get the same result after a version update. The same feature <em>cannot be guaranteed</em> when using this Python library (the library depends on other libraries that our not in our control).</li>\n<li>Server with <a href=\"https://redirects.rapidminer.com/web/saml-authentication\" rel=\"nofollow\">SAML authentication</a> is not yet supported.</li>\n</ul>\n<h2>Overview</h2>\n<p>Both Studio and Server classes provide a read and a write method for reading / writing data and other objects, and a run method to run processes. The method signatures are the same, with somewhat different extra parameters.</p>\n<p>Studio class requires a local Studio installation and is suitable in the following cases:</p>\n<ul>\n<li>Implementing certain data science steps in Python using your favorite IDE or notebook implementation. You may even use the resulting code afterwards in a RapidMiner process within an <em>Execute Python</em> operator.</li>\n<li>You are using coding primarily, but you want to incorporate methods that are impemented in a RapidMiner process.</li>\n<li>Creating batch tasks that also interact with the repository and / or run processes.</li>\n</ul>\n<p>Server class connects directly to a Server instance without the need of a Studio installation. It is suitable in the following cases:</p>\n<ul>\n<li>Collaborating with RapidMiner users, sharing data easily.</li>\n<li>Calling, running, scheduling processes on the RapidMiner Server platform from a local script.</li>\n</ul>\n<h2>Installation</h2>\n<p>The library can be installed easily:</p>\n<ul>\n<li>\n<p>install in one step:</p>\n<pre><code>  $ pip install rapidminer\n</code></pre>\n</li>\n<li>\n<p>or clone the repository and install:</p>\n<pre><code>  $ git clone https://github.com/rapidminer/python-rapidminer.git\n  $ cd python-rapidminer\n  $ python setup.py install\n</code></pre>\n</li>\n</ul>\n<h2>Studio</h2>\n<p>You need to have a locally installed RapidMiner Studio instance to use this class. The only thing you need to provide is your installation path. Once that is specified, you can read from and write data or other objects to any configured repository. You can also run processes from files or from the repository. In this section, we show you some examples on how to read and write repository data and run processes. For more advanced scenarios see the included <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/examples/studio_examples.ipynb\" rel=\"nofollow\">IPython notebook</a> and the <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Studio.md\" rel=\"nofollow\">documentation of the <code>Studio</code> class</a>.</p>\n<p>Note that each <code>Studio</code> method starts a Studio instance in the background and stops it when it is done. It is not recommended to run multiple instances in parallel, e.g. on different Notebook tabs. If you have several RapidMiner extensions installed, all of them will be loaded each time, that may lead to longer runtime. Provide multiple parameters to a read or write call, if possible, to avoid the startup overhead.</p>\n<p>First you need a <code>Connector</code> object to interact with Studio. Once you have that, you can read and write data or run a process with a single line. To create a <code>Studio</code> <code>Connector</code> object, run the following code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rapidminer</span>\n<span class=\"n\">connector</span> <span class=\"o\">=</span> <span class=\"n\">rapidminer</span><span class=\"o\">.</span><span class=\"n\">Studio</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/you/studio/installation\"</span><span class=\"p\">)</span>\n</pre>\n<p>where you replace <code>\"/path/to/you/studio/installation\"</code> with the location of your Studio installation. In case of Windows, a typical path is <code>\"C:/Program Files/RapidMiner/RapidMiner Studio\"</code> - note that you should either use forward \"/\" as separators or put an <code>r</code> before the first quote character to indicate raw string\n. In case of Mac, the path is usually <code>\"/Applications/RapidMiner Studio.app/Contents/Resources/RapidMiner-Studio\"</code>. Alternatively you can define this location via the <code>RAPIDMINER_HOME</code> environment variable.</p>\n<h5>Reading ExampleSet</h5>\n<p>Once you have a connector instance, you can read a RapidMiner ExampleSet in Python by running the following line:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">connector</span><span class=\"o\">.</span><span class=\"n\">read_resource</span><span class=\"p\">(</span><span class=\"s2\">\"//Samples/data/Iris\"</span><span class=\"p\">)</span>\n</pre>\n<p>The resulting <code>df</code> is a <code>pandas</code> <code>DataFrame</code> object, which you can use in the conventional way.</p>\n<h5>Writing ExampleSet</h5>\n<p>You can save any <code>pandas</code> <code>DataFrame</code> object to a RapidMiner repository (or file) with the following command:</p>\n<pre><span class=\"n\">connector</span><span class=\"o\">.</span><span class=\"n\">write_resource</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s2\">\"//Local Repository/data/mydata\"</span><span class=\"p\">)</span>\n</pre>\n<p>where <code>df</code> is the <code>DataFrame</code> object you want to write to the repository, and <code>\"//Local Repository/data/mydata\"</code> is the location where you want to store it.</p>\n<h5>Running a process</h5>\n<p>To run a process execute the following line:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">connector</span><span class=\"o\">.</span><span class=\"n\">run_process</span><span class=\"p\">(</span><span class=\"s2\">\"//Samples/processes/02_Preprocessing/01_Normalization\"</span><span class=\"p\">)</span>\n</pre>\n<p>You will get the results as <code>pandas</code> <code>DataFrames</code>. You can also define inputs, and many more. For more examples, see the <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/examples/studio_examples.ipynb\" rel=\"nofollow\">examples notebook</a></p>\n<h2>Server</h2>\n<p>With <code>Server</code> class, you can directly connect to a local or remote Server instance without the need for any local RapidMiner (Studio) installation. You can read data from and write data to the Server repository and you can execute processes using the scalable Job Agent architecture. In this section, we show you some examples on how to read and write repository data and run processes. For more advanced scenarios see the included <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/examples/server_examples.ipynb\" rel=\"nofollow\">IPython notebook</a> and the <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Server.md\" rel=\"nofollow\">documentation of the <code>Server</code> class</a>.</p>\n<h3>Installation of Server API</h3>\n<p>The <code>Server</code> class requires a web service backend to be installed on RapidMiner Server. This is done automatically on the first instantiation of the Server class. The repository folder <code>/shared</code> is used by default to store the backend process. This folder exists and is accessible by anyone starting from RapidMiner Server 9.6.0.</p>\n<p><code>Server</code> class instantiation can be fully automated (thus, no need for user input), if you specify <code>url</code>, <code>username</code> and <code>password</code> parameters.</p>\n<p>On the RapidMiner Server web UI you can see the installed web service backend (<em>Processes</em>-&gt;<em>Web Services</em>). It has the name <em>Repository Service</em> by default, but you can change that with the optional parameter of <code>Server</code> class named <code>webservice</code>. You can change the process path location by setting 'processpath', but you need to make sure that it will be executable by all users of the Server API. If the web service is deleted, the next <code>Server</code> instantiation will re-create it.</p>\n<h3>Usage of Server API</h3>\n<p>To create a <code>Server</code> <code>Connector</code> object, run the following code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">rapidminer</span>\n<span class=\"n\">connector</span> <span class=\"o\">=</span> <span class=\"n\">rapidminer</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s2\">\"https://myserver.mycompany.com:8080\"</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"myrmuser\"</span><span class=\"p\">)</span>\n</pre>\n<p>where you replace <code>\"https://myserver.mycompany.com:8080\"</code> with the url of your Server instance and <code>\"myrmuser\"</code> with your username.</p>\n<h5>Reading ExampleSet</h5>\n<p>Once you have a connector instance, you can read a RapidMiner ExampleSet in Python by running the following line:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">connector</span><span class=\"o\">.</span><span class=\"n\">read_resource</span><span class=\"p\">(</span><span class=\"s2\">\"/home/myrmuser/data/mydata\"</span><span class=\"p\">)</span>\n</pre>\n<p>The resulting <code>df</code> is a <code>pandas</code> <code>DataFrame</code> object, which you can use in the conventional way.</p>\n<h5>Writing ExampleSet</h5>\n<p>You can save any <code>pandas</code> <code>DataFrame</code> object to the Server repository with the following command:</p>\n<pre><span class=\"n\">connector</span><span class=\"o\">.</span><span class=\"n\">write_resource</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s2\">\"/home/myrmuser/data/myresult\"</span><span class=\"p\">)</span>\n</pre>\n<p>where <code>df</code> is the <code>DataFrame</code> object you want to write to the repository, and <code>\"/home/myrmuser/data/myresult\"</code> is the location where you want to store it.</p>\n<h5>Running a process</h5>\n<p>To run a process execute the following line:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">connector</span><span class=\"o\">.</span><span class=\"n\">run_process</span><span class=\"p\">(</span><span class=\"s2\">\"/home/myrmsuer/process/transform_data\"</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p>You will get the results as <code>pandas</code> <code>DataFrames</code>. You can also define multiple inputs, and other parameters. For more examples, see the <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/examples/server_examples.ipynb\" rel=\"nofollow\">examples notebook</a></p>\n<h2>Scoring</h2>\n<p>This class allows you to easily use a deployed <a href=\"https://docs.rapidminer.com/server/scoring-agent/\" rel=\"nofollow\">Real-Time Scoring</a> service. You only need to provide the Server url and the particular scoring service endpoint to create a class instance. After that, you can use the predict method to do scoring on a Pandas DataFrame and get the result in a Pandas DataFrame as well. For instructions on how to deploy Real-Time Scoring on Server, please refer to its documentation.</p>\n<pre><span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">rapidminer</span><span class=\"o\">.</span><span class=\"n\">Scoring</span><span class=\"p\">(</span><span class=\"s2\">\"http://myserver.mycompany.com:8090\"</span><span class=\"p\">,</span> <span class=\"s2\">\"score-sales/score1\"</span><span class=\"p\">)</span>\n<span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p>where the scoring endpoint is at <code>\"score-sales/score1\"</code> that can be applied to the dataset <code>df</code>, and the resulting <code>prediction</code> is a <code>pandas</code> <code>DataFrame</code> object. You can find the <code>Scoring</code> class <a href=\"https://github.com/rapidminer/python-rapidminer/blob/9.6.0.0/docs/api/Scoring.md\" rel=\"nofollow\">documentation here</a>.</p>\n\n          </div>"}, "last_serial": 6697782, "releases": {"9.6.0.0": [{"comment_text": "", "digests": {"md5": "b3b50fb27078712399d2d0064e191675", "sha256": "f4daa95e70d8791762c5ed065e6e6394b4f2f5744230295bc2fe82a7fd19e4b3"}, "downloads": -1, "filename": "rapidminer-9.6.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b3b50fb27078712399d2d0064e191675", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 31675, "upload_time": "2020-02-25T17:24:36", "upload_time_iso_8601": "2020-02-25T17:24:36.873028Z", "url": "https://files.pythonhosted.org/packages/23/54/6f32a2803c8ea7809ae99f3b558439bca19fa80889f6d3ce067524d21912/rapidminer-9.6.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a793c7808df7b1feda57bd1f8d9565ca", "sha256": "fc7cbf65ebfa97c6e9e3099732ce7fd035380792825a184571a71349aeac8ab6"}, "downloads": -1, "filename": "rapidminer-9.6.0.0.tar.gz", "has_sig": false, "md5_digest": "a793c7808df7b1feda57bd1f8d9565ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 28011, "upload_time": "2020-02-25T17:24:39", "upload_time_iso_8601": "2020-02-25T17:24:39.530782Z", "url": "https://files.pythonhosted.org/packages/42/f7/96cc3f01b6c74a2b45c3d087654a014082a1ea495b8019ae7a0a0e6ce7ce/rapidminer-9.6.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3b50fb27078712399d2d0064e191675", "sha256": "f4daa95e70d8791762c5ed065e6e6394b4f2f5744230295bc2fe82a7fd19e4b3"}, "downloads": -1, "filename": "rapidminer-9.6.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b3b50fb27078712399d2d0064e191675", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 31675, "upload_time": "2020-02-25T17:24:36", "upload_time_iso_8601": "2020-02-25T17:24:36.873028Z", "url": "https://files.pythonhosted.org/packages/23/54/6f32a2803c8ea7809ae99f3b558439bca19fa80889f6d3ce067524d21912/rapidminer-9.6.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a793c7808df7b1feda57bd1f8d9565ca", "sha256": "fc7cbf65ebfa97c6e9e3099732ce7fd035380792825a184571a71349aeac8ab6"}, "downloads": -1, "filename": "rapidminer-9.6.0.0.tar.gz", "has_sig": false, "md5_digest": "a793c7808df7b1feda57bd1f8d9565ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 28011, "upload_time": "2020-02-25T17:24:39", "upload_time_iso_8601": "2020-02-25T17:24:39.530782Z", "url": "https://files.pythonhosted.org/packages/42/f7/96cc3f01b6c74a2b45c3d087654a014082a1ea495b8019ae7a0a0e6ce7ce/rapidminer-9.6.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:28 2020"}