{"info": {"author": "Jakub Matys", "author_email": "matys.jakub@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Twisted", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "txmsgpackrpc\n============\n\n.. image:: https://travis-ci.org/jakm/txmsgpackrpc.svg?branch=master\n   :target: https://travis-ci.org/jakm/txmsgpackrpc\n\nFor the latest source code, see http://github.com/jakm/txmsgpackrpc\n\n``txmsgpackrpc`` is a library for writing asynchronous\n`msgpack-rpc <https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md>`__\nservers and clients in Python, using `Twisted\nframework <http://twistedmatrix.com>`__. Library is based on\n`txMsgpack <https://github.com/donalm/txMsgpack>`__, but some\nimprovements and fixes were made.\n\nFeatures\n--------\n\n-  user friendly API\n-  modular object model\n-  working timeouts and reconnecting\n-  connection pool support\n-  TCP, SSL, UDP and UNIX sockets\n\nPython 3 note\n-------------\n\nTo use UNIX sockets with Python 3 please use Twisted framework 15.3.0 and above.\n\nDependencies\n------------\n\n-  msgpack-python https://pypi.python.org/pypi/msgpack-python/\n-  Twisted http://twistedmatrix.com/trac/\n\nInstallation\n------------\n\n.. code:: sh\n\n    % pip install txmsgpackrpc\n\nDebian packages are available on project's `Releases\npage <https://github.com/jakm/txmsgpackrpc/releases/latest>`__.\n\nTCP example\n-----------\n\nComputation of PI using Chudnovsky algorithm in subprocess. For details,\nsee http://www.craig-wood.com/nick/articles/pi-chudnovsky/.\n\nResults\n~~~~~~~\n\n::\n\n    Computation of PI with 5 places finished in 0.022390 seconds\n\n    Computation of PI with 100 places finished in 0.037856 seconds\n\n    Computation of PI with 1000 places finished in 0.038070 seconds\n\n    Computation of PI with 10000 places finished in 0.073907 seconds\n\n    Computation of PI with 100000 places finished in 6.741683 seconds\n\n    Computation of PI with 5 places finished in 0.001142 seconds\n\n    Computation of PI with 100 places finished in 0.001182 seconds\n\n    Computation of PI with 1000 places finished in 0.001206 seconds\n\n    Computation of PI with 10000 places finished in 0.001230 seconds\n\n    Computation of PI with 100000 places finished in 0.001255 seconds\n\n    Computation of PI with 1000000 places finished in 432.574457 seconds\n\n    Computation of PI with 1000000 places finished in 402.551226 seconds\n\n    DONE\n\nServer\n~~~~~~\n\n.. code:: python\n\n    from __future__ import print_function\n\n    from collections import defaultdict\n    from twisted.internet import defer, reactor, utils\n    from twisted.python import failure\n    from txmsgpackrpc.server import MsgpackRPCServer\n\n\n    pi_chudovsky_bs = '''\n    \"\"\"\n    Python3 program to calculate Pi using python long integers, binary\n    splitting and the Chudnovsky algorithm\n\n    See: http://www.craig-wood.com/nick/articles/pi-chudnovsky/ for more\n    info\n\n    Nick Craig-Wood <nick@craig-wood.com>\n    \"\"\"\n\n    import math\n    from time import time\n\n    def sqrt(n, one):\n        \"\"\"\n        Return the square root of n as a fixed point number with the one\n        passed in.  It uses a second order Newton-Raphson convgence.  This\n        doubles the number of significant figures on each iteration.\n        \"\"\"\n        # Use floating point arithmetic to make an initial guess\n        floating_point_precision = 10**16\n        n_float = float((n * floating_point_precision) // one) / floating_point_precision\n        x = (int(floating_point_precision * math.sqrt(n_float)) * one) // floating_point_precision\n        n_one = n * one\n        while 1:\n            x_old = x\n            x = (x + n_one // x) // 2\n            if x == x_old:\n                break\n        return x\n\n    def pi_chudnovsky_bs(digits):\n        \"\"\"\n        Compute int(pi * 10**digits)\n\n        This is done using Chudnovsky's series with binary splitting\n        \"\"\"\n        C = 640320\n        C3_OVER_24 = C**3 // 24\n        def bs(a, b):\n            \"\"\"\n            Computes the terms for binary splitting the Chudnovsky infinite series\n\n            a(a) = +/- (13591409 + 545140134*a)\n            p(a) = (6*a-5)*(2*a-1)*(6*a-1)\n            b(a) = 1\n            q(a) = a*a*a*C3_OVER_24\n\n            returns P(a,b), Q(a,b) and T(a,b)\n            \"\"\"\n            if b - a == 1:\n                # Directly compute P(a,a+1), Q(a,a+1) and T(a,a+1)\n                if a == 0:\n                    Pab = Qab = 1\n                else:\n                    Pab = (6*a-5)*(2*a-1)*(6*a-1)\n                    Qab = a*a*a*C3_OVER_24\n                Tab = Pab * (13591409 + 545140134*a) # a(a) * p(a)\n                if a & 1:\n                    Tab = -Tab\n            else:\n                # Recursively compute P(a,b), Q(a,b) and T(a,b)\n                # m is the midpoint of a and b\n                m = (a + b) // 2\n                # Recursively calculate P(a,m), Q(a,m) and T(a,m)\n                Pam, Qam, Tam = bs(a, m)\n                # Recursively calculate P(m,b), Q(m,b) and T(m,b)\n                Pmb, Qmb, Tmb = bs(m, b)\n                # Now combine\n                Pab = Pam * Pmb\n                Qab = Qam * Qmb\n                Tab = Qmb * Tam + Pam * Tmb\n            return Pab, Qab, Tab\n        # how many terms to compute\n        DIGITS_PER_TERM = math.log10(C3_OVER_24/6/2/6)\n        N = int(digits/DIGITS_PER_TERM + 1)\n        # Calclate P(0,N) and Q(0,N)\n        P, Q, T = bs(0, N)\n        one = 10**digits\n        sqrtC = sqrt(10005*one, one)\n        return (Q*426880*sqrtC) // T\n\n    if __name__ == \"__main__\":\n        import sys\n        digits = int(sys.argv[1])\n        pi = pi_chudnovsky_bs(digits)\n        print(pi)\n    '''\n\n\n    def set_timeout(deferred, timeout=30):\n        def callback(value):\n            if not watchdog.called:\n                watchdog.cancel()\n            return value\n\n        deferred.addBoth(callback)\n\n        watchdog = reactor.callLater(timeout, defer.timeout, deferred)\n\n\n    class ComputePI(MsgpackRPCServer):\n\n        def __init__(self):\n            self.waiting = defaultdict(list)\n            self.results = {}\n\n        def remote_PI(self, digits, timeout=None):\n            if digits in self.results:\n                return defer.succeed(self.results[digits])\n\n            d = defer.Deferred()\n\n            if digits not in self.waiting:\n                subprocessDeferred = self.computePI(digits, timeout)\n\n                def callWaiting(res):\n                    waiting = self.waiting[digits]\n                    del self.waiting[digits]\n\n                    if isinstance(res, failure.Failure):\n                        func = lambda d: d.errback(res)\n                    else:\n                        func = lambda d: d.callback(res)\n\n                    for d in waiting:\n                        func(d)\n\n                subprocessDeferred.addBoth(callWaiting)\n\n            self.waiting[digits].append(d)\n\n            return d\n\n        def computePI(self, digits, timeout):\n            d = utils.getProcessOutputAndValue('/usr/bin/python', args=('-c', pi_chudovsky_bs, str(digits)))\n\n            def callback((out, err, code)):\n                if code == 0:\n                    pi = int(out)\n                    self.results[digits] = pi\n                    return pi\n                else:\n                    return failure.Failure(RuntimeError('Computation failed: ' + err))\n\n            if timeout is not None:\n                set_timeout(d, timeout)\n\n            d.addCallback(callback)\n\n            return d\n\n\n    def main():\n        server = ComputePI()\n        reactor.listenTCP(8000, server.getStreamFactory())\n\n    if __name__ == '__main__':\n        reactor.callWhenRunning(main)\n        reactor.run()\n\nClient\n~~~~~~\n\n.. code:: python\n\n    from __future__ import print_function\n\n    import sys\n    import time\n    from twisted.internet import defer, reactor, task\n    from twisted.python import failure\n\n    @defer.inlineCallbacks\n    def main():\n        try:\n\n            from txmsgpackrpc.client import connect\n\n            c = yield connect('localhost', 8000, waitTimeout=900)\n\n            def callback(res, digits, start_time):\n                if isinstance(res, failure.Failure):\n                    print('Computation of PI with %d places failed: %s' %\n                          (digits, res.getErrorMessage()), end='\\n\\n')\n                else:\n                    print('Computation of PI with %d places finished in %f seconds' %\n                          (digits, time.time() - start_time), end='\\n\\n')\n                sys.stdout.flush()\n\n            defers = []\n            for _ in range(2):\n                for digits in (5, 100, 1000, 10000, 100000, 1000000):\n                    d = c.createRequest('PI', digits, 600)\n                    d.addBoth(callback, digits, time.time())\n                    defers.append(d)\n                # wait for 30 seconds\n                yield task.deferLater(reactor, 30, lambda: None)\n\n            yield defer.DeferredList(defers)\n\n            print('DONE')\n\n        except Exception:\n            import traceback\n            traceback.print_exc()\n        finally:\n            reactor.stop()\n\n    if __name__ == '__main__':\n        reactor.callWhenRunning(main)\n        reactor.run()\n\nMulticast UDP example\n---------------------\n\nExample servers join to group 224.0.0.5 and listen on port 8000. Their only\nmethod ``echo`` returns its parameter.\n\nClient joins group to 224.0.0.5, sends multicast request to group on port 8000\nand waits for 5 seconds for responses. If some responses are received,\nprotocol callbacks with tuple of results and individual parts are checked for\nerrors. If no responses are received, protocol errbacks with TimeoutError.\n\nBecause there is no common way to determine number of peers in group,\nMsgpackMulticastDatagramProtocol always wait for responses until waitTimeout\nexpires.\n\n.. code:: sh\n\n    $ # setup multicast routing\n    $ ip route add 224.0.0.0/4 dev eth0\n    $ echo 1 > /proc/sys/net/ipv4/ip_forward\n    $\n    $ # start servers listening on port 8000\n    $ python examples/tx_rpc_server_udp_multicast.py &\n    [1] 3584\n    $ python examples/tx_rpc_server_udp_multicast.py &\n    [2] 3585\n    $ python examples/tx_rpc_server_udp_multicast.py &\n    [3] 3586\n    $ python examples/tx_rpc_server_udp_multicast.py &\n    [4] 3587\n    $ python examples/tx_rpc_server_udp_multicast.py &\n    [5] 3588\n    $\n    $ # execute client\n    $ python examples/tx_rpc_client_udp_multicast.py\n    Received results from 5 peers\n    $\n\nServer\n~~~~~~\n\n.. code:: python\n\n    from twisted.internet import defer, reactor, task\n    from txmsgpackrpc.server import MsgpackRPCServer\n\n\n    class EchoRPC(MsgpackRPCServer):\n\n        @defer.inlineCallbacks\n        def remote_echo(self, value, delay=None, msgid=None):\n            if delay is not None:\n                yield task.deferLater(reactor, delay, lambda: None)\n            defer.returnValue(value)\n\n\n    def main():\n        server = EchoRPC()\n        reactor.listenMulticast(8000, server.getMulticastProtocol('228.0.0.5', ttl=5),\n                                listenMultiple=True)\n\n    if __name__ == '__main__':\n        reactor.callWhenRunning(main)\n        reactor.run()\n\n\nClient\n~~~~~~\n\n.. code:: python\n\n    from __future__ import print_function\n\n    from twisted.internet import defer, reactor\n\n    @defer.inlineCallbacks\n    def main():\n        try:\n\n            from txmsgpackrpc.client import connect_multicast\n\n            c = yield connect_multicast('228.0.0.5', 8000, ttl=5, waitTimeout=5)\n\n            data = {\n                        'firstName': 'John',\n                        'lastName': 'Smith',\n                        'isAlive': True,\n                        'age': 25,\n                        'height_cm': 167.6,\n                        'address': {\n                          'streetAddress': \"21 2nd Street\",\n                          \"city\": 'New York',\n                          \"state\": 'NY',\n                          'postalCode': '10021-3100'\n                        },\n                        'phoneNumbers': [\n                          {\n                            'type': 'home',\n                            'number': '212 555-1234'\n                          },\n                          {\n                            'type': 'office',\n                            'number': '646 555-4567'\n                          }\n                        ],\n                        'children': [],\n                        'spouse': None\n                      }\n\n            results = yield c.createRequest('echo', data)\n\n            assert isinstance(results, tuple)\n\n            print('Received results from %d peers' % len(results))\n\n            for i, result in enumerate(results):\n                if result != data:\n                    print('Result %d mismatch' % i)\n                    print(result)\n\n        except Exception:\n            import traceback\n            traceback.print_exc()\n        finally:\n            reactor.stop()\n\n    if __name__ == '__main__':\n        reactor.callWhenRunning(main)\n        reactor.run()\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jakm/txmsgpackrpc", "keywords": "twisted msgpack rpc", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "txmsgpackrpc", "package_url": "https://pypi.org/project/txmsgpackrpc/", "platform": "", "project_url": "https://pypi.org/project/txmsgpackrpc/", "project_urls": {"Homepage": "https://github.com/jakm/txmsgpackrpc"}, "release_url": "https://pypi.org/project/txmsgpackrpc/1.2/", "requires_dist": null, "requires_python": "", "summary": "txmsgpackrpc is a Twisted library to support msgpack-rpc", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/jakm/txmsgpackrpc\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jakm/txmsgpackrpc.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95f71d77da7dc4cdbc18fdc58d4dde2cbc59bce4/68747470733a2f2f7472617669732d63692e6f72672f6a616b6d2f74786d73677061636b7270632e7376673f6272616e63683d6d6173746572\"></a>\n<p>For the latest source code, see <a href=\"http://github.com/jakm/txmsgpackrpc\" rel=\"nofollow\">http://github.com/jakm/txmsgpackrpc</a></p>\n<p><tt>txmsgpackrpc</tt> is a library for writing asynchronous\n<a href=\"https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md\" rel=\"nofollow\">msgpack-rpc</a>\nservers and clients in Python, using <a href=\"http://twistedmatrix.com\" rel=\"nofollow\">Twisted\nframework</a>. Library is based on\n<a href=\"https://github.com/donalm/txMsgpack\" rel=\"nofollow\">txMsgpack</a>, but some\nimprovements and fixes were made.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>user friendly API</li>\n<li>modular object model</li>\n<li>working timeouts and reconnecting</li>\n<li>connection pool support</li>\n<li>TCP, SSL, UDP and UNIX sockets</li>\n</ul>\n</div>\n<div id=\"python-3-note\">\n<h2>Python 3 note</h2>\n<p>To use UNIX sockets with Python 3 please use Twisted framework 15.3.0 and above.</p>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ul>\n<li>msgpack-python <a href=\"https://pypi.python.org/pypi/msgpack-python/\" rel=\"nofollow\">https://pypi.python.org/pypi/msgpack-python/</a></li>\n<li>Twisted <a href=\"http://twistedmatrix.com/trac/\" rel=\"nofollow\">http://twistedmatrix.com/trac/</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>% pip install txmsgpackrpc\n</pre>\n<p>Debian packages are available on project\u2019s <a href=\"https://github.com/jakm/txmsgpackrpc/releases/latest\" rel=\"nofollow\">Releases\npage</a>.</p>\n</div>\n<div id=\"tcp-example\">\n<h2>TCP example</h2>\n<p>Computation of PI using Chudnovsky algorithm in subprocess. For details,\nsee <a href=\"http://www.craig-wood.com/nick/articles/pi-chudnovsky/\" rel=\"nofollow\">http://www.craig-wood.com/nick/articles/pi-chudnovsky/</a>.</p>\n<div id=\"results\">\n<h3>Results</h3>\n<pre>Computation of PI with 5 places finished in 0.022390 seconds\n\nComputation of PI with 100 places finished in 0.037856 seconds\n\nComputation of PI with 1000 places finished in 0.038070 seconds\n\nComputation of PI with 10000 places finished in 0.073907 seconds\n\nComputation of PI with 100000 places finished in 6.741683 seconds\n\nComputation of PI with 5 places finished in 0.001142 seconds\n\nComputation of PI with 100 places finished in 0.001182 seconds\n\nComputation of PI with 1000 places finished in 0.001206 seconds\n\nComputation of PI with 10000 places finished in 0.001230 seconds\n\nComputation of PI with 100000 places finished in 0.001255 seconds\n\nComputation of PI with 1000000 places finished in 432.574457 seconds\n\nComputation of PI with 1000000 places finished in 402.551226 seconds\n\nDONE\n</pre>\n</div>\n<div id=\"server\">\n<h3>Server</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span><span class=\"p\">,</span> <span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.python</span> <span class=\"kn\">import</span> <span class=\"n\">failure</span>\n<span class=\"kn\">from</span> <span class=\"nn\">txmsgpackrpc.server</span> <span class=\"kn\">import</span> <span class=\"n\">MsgpackRPCServer</span>\n\n\n<span class=\"n\">pi_chudovsky_bs</span> <span class=\"o\">=</span> <span class=\"s1\">'''\n\"\"\"\nPython3 program to calculate Pi using python long integers, binary\nsplitting and the Chudnovsky algorithm\n\nSee: http://www.craig-wood.com/nick/articles/pi-chudnovsky/ for more\ninfo\n\nNick Craig-Wood &lt;nick@craig-wood.com&gt;\n\"\"\"\n\nimport math\nfrom time import time\n\ndef sqrt(n, one):\n    \"\"\"\n    Return the square root of n as a fixed point number with the one\n    passed in.  It uses a second order Newton-Raphson convgence.  This\n    doubles the number of significant figures on each iteration.\n    \"\"\"\n    # Use floating point arithmetic to make an initial guess\n    floating_point_precision = 10**16\n    n_float = float((n * floating_point_precision) // one) / floating_point_precision\n    x = (int(floating_point_precision * math.sqrt(n_float)) * one) // floating_point_precision\n    n_one = n * one\n    while 1:\n        x_old = x\n        x = (x + n_one // x) // 2\n        if x == x_old:\n            break\n    return x\n\ndef pi_chudnovsky_bs(digits):\n    \"\"\"\n    Compute int(pi * 10**digits)\n\n    This is done using Chudnovsky's series with binary splitting\n    \"\"\"\n    C = 640320\n    C3_OVER_24 = C**3 // 24\n    def bs(a, b):\n        \"\"\"\n        Computes the terms for binary splitting the Chudnovsky infinite series\n\n        a(a) = +/- (13591409 + 545140134*a)\n        p(a) = (6*a-5)*(2*a-1)*(6*a-1)\n        b(a) = 1\n        q(a) = a*a*a*C3_OVER_24\n\n        returns P(a,b), Q(a,b) and T(a,b)\n        \"\"\"\n        if b - a == 1:\n            # Directly compute P(a,a+1), Q(a,a+1) and T(a,a+1)\n            if a == 0:\n                Pab = Qab = 1\n            else:\n                Pab = (6*a-5)*(2*a-1)*(6*a-1)\n                Qab = a*a*a*C3_OVER_24\n            Tab = Pab * (13591409 + 545140134*a) # a(a) * p(a)\n            if a &amp; 1:\n                Tab = -Tab\n        else:\n            # Recursively compute P(a,b), Q(a,b) and T(a,b)\n            # m is the midpoint of a and b\n            m = (a + b) // 2\n            # Recursively calculate P(a,m), Q(a,m) and T(a,m)\n            Pam, Qam, Tam = bs(a, m)\n            # Recursively calculate P(m,b), Q(m,b) and T(m,b)\n            Pmb, Qmb, Tmb = bs(m, b)\n            # Now combine\n            Pab = Pam * Pmb\n            Qab = Qam * Qmb\n            Tab = Qmb * Tam + Pam * Tmb\n        return Pab, Qab, Tab\n    # how many terms to compute\n    DIGITS_PER_TERM = math.log10(C3_OVER_24/6/2/6)\n    N = int(digits/DIGITS_PER_TERM + 1)\n    # Calclate P(0,N) and Q(0,N)\n    P, Q, T = bs(0, N)\n    one = 10**digits\n    sqrtC = sqrt(10005*one, one)\n    return (Q*426880*sqrtC) // T\n\nif __name__ == \"__main__\":\n    import sys\n    digits = int(sys.argv[1])\n    pi = pi_chudnovsky_bs(digits)\n    print(pi)\n'''</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">set_timeout</span><span class=\"p\">(</span><span class=\"n\">deferred</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">watchdog</span><span class=\"o\">.</span><span class=\"n\">called</span><span class=\"p\">:</span>\n            <span class=\"n\">watchdog</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"n\">deferred</span><span class=\"o\">.</span><span class=\"n\">addBoth</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n\n    <span class=\"n\">watchdog</span> <span class=\"o\">=</span> <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callLater</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"n\">deferred</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ComputePI</span><span class=\"p\">(</span><span class=\"n\">MsgpackRPCServer</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">remote_PI</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">digits</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">succeed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">digits</span><span class=\"p\">])</span>\n\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">Deferred</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">digits</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting</span><span class=\"p\">:</span>\n            <span class=\"n\">subprocessDeferred</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">computePI</span><span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">callWaiting</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">):</span>\n                <span class=\"n\">waiting</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting</span><span class=\"p\">[</span><span class=\"n\">digits</span><span class=\"p\">]</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting</span><span class=\"p\">[</span><span class=\"n\">digits</span><span class=\"p\">]</span>\n\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">):</span>\n                    <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">errback</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">waiting</span><span class=\"p\">:</span>\n                    <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n\n            <span class=\"n\">subprocessDeferred</span><span class=\"o\">.</span><span class=\"n\">addBoth</span><span class=\"p\">(</span><span class=\"n\">callWaiting</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">waiting</span><span class=\"p\">[</span><span class=\"n\">digits</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">d</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">computePI</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">):</span>\n        <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">getProcessOutputAndValue</span><span class=\"p\">(</span><span class=\"s1\">'/usr/bin/python'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'-c'</span><span class=\"p\">,</span> <span class=\"n\">pi_chudovsky_bs</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">)))</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">((</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">code</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">pi</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"n\">digits</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pi</span>\n                <span class=\"k\">return</span> <span class=\"n\">pi</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">(</span><span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s1\">'Computation failed: '</span> <span class=\"o\">+</span> <span class=\"n\">err</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">set_timeout</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">)</span>\n\n        <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">d</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">ComputePI</span><span class=\"p\">()</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">listenTCP</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">,</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">getStreamFactory</span><span class=\"p\">())</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callWhenRunning</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"client\">\n<h3>Client</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span><span class=\"p\">,</span> <span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"n\">task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.python</span> <span class=\"kn\">import</span> <span class=\"n\">failure</span>\n\n<span class=\"nd\">@defer</span><span class=\"o\">.</span><span class=\"n\">inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">txmsgpackrpc.client</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">8000</span><span class=\"p\">,</span> <span class=\"n\">waitTimeout</span><span class=\"o\">=</span><span class=\"mi\">900</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">callback</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"n\">start_time</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span> <span class=\"n\">failure</span><span class=\"o\">.</span><span class=\"n\">Failure</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Computation of PI with </span><span class=\"si\">%d</span><span class=\"s1\"> places failed: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span>\n                      <span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">getErrorMessage</span><span class=\"p\">()),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Computation of PI with </span><span class=\"si\">%d</span><span class=\"s1\"> places finished in </span><span class=\"si\">%f</span><span class=\"s1\"> seconds'</span> <span class=\"o\">%</span>\n                      <span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n        <span class=\"n\">defers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">digits</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">100000</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">):</span>\n                <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">createRequest</span><span class=\"p\">(</span><span class=\"s1\">'PI'</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">)</span>\n                <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">addBoth</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">())</span>\n                <span class=\"n\">defers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n            <span class=\"c1\"># wait for 30 seconds</span>\n            <span class=\"k\">yield</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">deferLater</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">yield</span> <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">DeferredList</span><span class=\"p\">(</span><span class=\"n\">defers</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'DONE'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n        <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">print_exc</span><span class=\"p\">()</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callWhenRunning</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"multicast-udp-example\">\n<h2>Multicast UDP example</h2>\n<p>Example servers join to group 224.0.0.5 and listen on port 8000. Their only\nmethod <tt>echo</tt> returns its parameter.</p>\n<p>Client joins group to 224.0.0.5, sends multicast request to group on port 8000\nand waits for 5 seconds for responses. If some responses are received,\nprotocol callbacks with tuple of results and individual parts are checked for\nerrors. If no responses are received, protocol errbacks with TimeoutError.</p>\n<p>Because there is no common way to determine number of peers in group,\nMsgpackMulticastDatagramProtocol always wait for responses until waitTimeout\nexpires.</p>\n<pre>$ <span class=\"c1\"># setup multicast routing\n</span>$ ip route add <span class=\"m\">224</span>.0.0.0/4 dev eth0\n$ <span class=\"nb\">echo</span> <span class=\"m\">1</span> &gt; /proc/sys/net/ipv4/ip_forward\n$\n$ <span class=\"c1\"># start servers listening on port 8000\n</span>$ python examples/tx_rpc_server_udp_multicast.py <span class=\"p\">&amp;</span>\n<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span> <span class=\"m\">3584</span>\n$ python examples/tx_rpc_server_udp_multicast.py <span class=\"p\">&amp;</span>\n<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span> <span class=\"m\">3585</span>\n$ python examples/tx_rpc_server_udp_multicast.py <span class=\"p\">&amp;</span>\n<span class=\"o\">[</span><span class=\"m\">3</span><span class=\"o\">]</span> <span class=\"m\">3586</span>\n$ python examples/tx_rpc_server_udp_multicast.py <span class=\"p\">&amp;</span>\n<span class=\"o\">[</span><span class=\"m\">4</span><span class=\"o\">]</span> <span class=\"m\">3587</span>\n$ python examples/tx_rpc_server_udp_multicast.py <span class=\"p\">&amp;</span>\n<span class=\"o\">[</span><span class=\"m\">5</span><span class=\"o\">]</span> <span class=\"m\">3588</span>\n$\n$ <span class=\"c1\"># execute client\n</span>$ python examples/tx_rpc_client_udp_multicast.py\nReceived results from <span class=\"m\">5</span> peers\n$\n</pre>\n<div id=\"id1\">\n<h3>Server</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span><span class=\"p\">,</span> <span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"n\">task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">txmsgpackrpc.server</span> <span class=\"kn\">import</span> <span class=\"n\">MsgpackRPCServer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EchoRPC</span><span class=\"p\">(</span><span class=\"n\">MsgpackRPCServer</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@defer</span><span class=\"o\">.</span><span class=\"n\">inlineCallbacks</span>\n    <span class=\"k\">def</span> <span class=\"nf\">remote_echo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">msgid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">delay</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">deferLater</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"n\">delay</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">returnValue</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">EchoRPC</span><span class=\"p\">()</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">listenMulticast</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">,</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">getMulticastProtocol</span><span class=\"p\">(</span><span class=\"s1\">'228.0.0.5'</span><span class=\"p\">,</span> <span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">),</span>\n                            <span class=\"n\">listenMultiple</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callWhenRunning</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"id2\">\n<h3>Client</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span><span class=\"p\">,</span> <span class=\"n\">reactor</span>\n\n<span class=\"nd\">@defer</span><span class=\"o\">.</span><span class=\"n\">inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n\n        <span class=\"kn\">from</span> <span class=\"nn\">txmsgpackrpc.client</span> <span class=\"kn\">import</span> <span class=\"n\">connect_multicast</span>\n\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">connect_multicast</span><span class=\"p\">(</span><span class=\"s1\">'228.0.0.5'</span><span class=\"p\">,</span> <span class=\"mi\">8000</span><span class=\"p\">,</span> <span class=\"n\">ttl</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">waitTimeout</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">'firstName'</span><span class=\"p\">:</span> <span class=\"s1\">'John'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'lastName'</span><span class=\"p\">:</span> <span class=\"s1\">'Smith'</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'isAlive'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'height_cm'</span><span class=\"p\">:</span> <span class=\"mf\">167.6</span><span class=\"p\">,</span>\n                    <span class=\"s1\">'address'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                      <span class=\"s1\">'streetAddress'</span><span class=\"p\">:</span> <span class=\"s2\">\"21 2nd Street\"</span><span class=\"p\">,</span>\n                      <span class=\"s2\">\"city\"</span><span class=\"p\">:</span> <span class=\"s1\">'New York'</span><span class=\"p\">,</span>\n                      <span class=\"s2\">\"state\"</span><span class=\"p\">:</span> <span class=\"s1\">'NY'</span><span class=\"p\">,</span>\n                      <span class=\"s1\">'postalCode'</span><span class=\"p\">:</span> <span class=\"s1\">'10021-3100'</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"s1\">'phoneNumbers'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                      <span class=\"p\">{</span>\n                        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'home'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'number'</span><span class=\"p\">:</span> <span class=\"s1\">'212 555-1234'</span>\n                      <span class=\"p\">},</span>\n                      <span class=\"p\">{</span>\n                        <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'office'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'number'</span><span class=\"p\">:</span> <span class=\"s1\">'646 555-4567'</span>\n                      <span class=\"p\">}</span>\n                    <span class=\"p\">],</span>\n                    <span class=\"s1\">'children'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n                    <span class=\"s1\">'spouse'</span><span class=\"p\">:</span> <span class=\"kc\">None</span>\n                  <span class=\"p\">}</span>\n\n        <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">createRequest</span><span class=\"p\">(</span><span class=\"s1\">'echo'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Received results from </span><span class=\"si\">%d</span><span class=\"s1\"> peers'</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">))</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"o\">!=</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Result </span><span class=\"si\">%d</span><span class=\"s1\"> mismatch'</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n        <span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">print_exc</span><span class=\"p\">()</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">callWhenRunning</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2526528, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "2800a7c440bf8bcbb2dc6f2552493a9d", "sha256": "0cc0be7e6b4f72207d0c20d1378d266be33133eabba88d9c4324fcdbf2da89c9"}, "downloads": -1, "filename": "txmsgpackrpc-0.4.tar.gz", "has_sig": false, "md5_digest": "2800a7c440bf8bcbb2dc6f2552493a9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11611, "upload_time": "2015-02-20T09:59:23", "upload_time_iso_8601": "2015-02-20T09:59:23.279203Z", "url": "https://files.pythonhosted.org/packages/93/44/930b1a5d43489bdb882da509d47dbae4e47a1eb14271fd373ff5d1b30567/txmsgpackrpc-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "b93eaf6d303e1e8e611c92638c8e8929", "sha256": "83c3c52a49bc4d19b2fc17e16873ca8cfc8c0919c4c238aebc03850d28aee5e8"}, "downloads": -1, "filename": "txmsgpackrpc-0.5.tar.gz", "has_sig": false, "md5_digest": "b93eaf6d303e1e8e611c92638c8e8929", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14693, "upload_time": "2015-02-24T23:20:50", "upload_time_iso_8601": "2015-02-24T23:20:50.897781Z", "url": "https://files.pythonhosted.org/packages/4f/df/0cd8de3aeec403c4b82040e07bb685f660e24e6e482ff99c5e2df555bca3/txmsgpackrpc-0.5.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "e1825be3865cde1e013f953114a5cfd0", "sha256": "5e52a25f07ccd3b10558ef5462031142cc4dfe404a2f3431542d96c409280fae"}, "downloads": -1, "filename": "txmsgpackrpc-1.0.tar.gz", "has_sig": false, "md5_digest": "e1825be3865cde1e013f953114a5cfd0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18944, "upload_time": "2015-02-25T17:27:24", "upload_time_iso_8601": "2015-02-25T17:27:24.241936Z", "url": "https://files.pythonhosted.org/packages/c8/e2/a132bc15f88114de20aeb59aac6e0497b1d09c1d575f2f1ab1f3c4decd29/txmsgpackrpc-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "563c23246af76d4dbfeb9037b5f0c06e", "sha256": "e3ad34850f450b86be6f1a85a3c3d6d31e61ce797d97d681431ad29d7d6d83ce"}, "downloads": -1, "filename": "txmsgpackrpc-1.1.tar.gz", "has_sig": false, "md5_digest": "563c23246af76d4dbfeb9037b5f0c06e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18560, "upload_time": "2015-10-06T09:14:02", "upload_time_iso_8601": "2015-10-06T09:14:02.733095Z", "url": "https://files.pythonhosted.org/packages/69/81/25ac3feea9af76f684e6d1a2dbf4d1e1f20ed612b7f9236e96a3a4499e4e/txmsgpackrpc-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "3001608f140b5aed2680ecad113e1f84", "sha256": "8740361ae55781bc7ee1f639fa398fd0c6f892d0046879716cd6ab3091c41ac3"}, "downloads": -1, "filename": "txmsgpackrpc-1.2.tar.gz", "has_sig": false, "md5_digest": "3001608f140b5aed2680ecad113e1f84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21020, "upload_time": "2016-12-18T13:39:10", "upload_time_iso_8601": "2016-12-18T13:39:10.981071Z", "url": "https://files.pythonhosted.org/packages/6e/58/fefe6b5206b9a7d5f13a55917e132c674e50f4be8c167ff1dbba3c983f02/txmsgpackrpc-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3001608f140b5aed2680ecad113e1f84", "sha256": "8740361ae55781bc7ee1f639fa398fd0c6f892d0046879716cd6ab3091c41ac3"}, "downloads": -1, "filename": "txmsgpackrpc-1.2.tar.gz", "has_sig": false, "md5_digest": "3001608f140b5aed2680ecad113e1f84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21020, "upload_time": "2016-12-18T13:39:10", "upload_time_iso_8601": "2016-12-18T13:39:10.981071Z", "url": "https://files.pythonhosted.org/packages/6e/58/fefe6b5206b9a7d5f13a55917e132c674e50f4be8c167ff1dbba3c983f02/txmsgpackrpc-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:43:11 2020"}