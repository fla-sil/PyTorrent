{"info": {"author": "Robert Wright", "author_email": "madman.bob@hotmail.co.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "Smart Fruit\n===========\n\nPurpose\n-------\n\nA Python machine learning library, for creating quick and easy machine learning models.\nIt is schema-based, and wraps `scikit-learn <http://scikit-learn.org/stable/>`_.\n\nUsage\n-----\n\nCreate and use a machine learning model in 3 steps:\n\n1. Create a schema representing your input and output features.\n2. Train a model from your data.\n3. Make predictions from your model.\n\nExample\n-------\n\nTo get a feel for the library, consider the classic `Iris <https://archive.ics.uci.edu/ml/datasets/Iris>`_ dataset,\nwhere we predict the class of iris plant from measurements of the sepal, and petal.\n\nFirst, we create a schema describing our inputs and outputs.\nFor our inputs, we have the length, and width, of both the sepal, and the petal.\nAll of these input values happen to be numbers.\nFor our output, we have just the class of iris, which may be one of the labels ``Iris-setosa``, ``Iris-versicolor``, or ``Iris-virginica``.\n\nWe define this in code as follows:\n\n.. code:: python\n\n    from smart_fruit import Model\n    from smart_fruit.feature_types import Number, Label\n\n\n    class Iris(Model):\n        class Input:\n            sepal_length_cm = Number()\n            sepal_width_cm = Number()\n            petal_length_cm = Number()\n            petal_width_cm = Number()\n\n        class Output:\n            iris_class = Label(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])\n\nThen, we train a model:\n\n.. code:: python\n\n    model = Iris.train(Iris.features_from_csv('iris_data.csv'))\n\nwith data file `iris_data.csv <https://github.com/madman-bob/Smart-Fruit/blob/master/examples/iris_data.csv>`_.\n\n::\n\n    sepal_length_cm,sepal_width_cm,petal_length_cm,petal_width_cm,iris_class\n    5.1,3.5,1.4,0.2,Iris-setosa\n    ...\n\nFinally, we use our new model to make predictions:\n\n.. code:: python\n\n    for prediction in model.predict([Iris.Input(5.1, 3.5, 1.4, 0.2)]):\n        print(prediction.iris_class)\n\nReference\n---------\n\nModels\n~~~~~~\n\n- ``Model.Input`` - Schema for defining your input features.\n\n- ``Model.Output`` - Schema for defining your output features.\n\n  Define ``Model.Input`` and ``Model.Output`` as classes with ``FeatureType`` attributes.\n\n  eg. Consider the ``Iris`` class defined above.\n\n  These classes can then be used to create objects representing the appropriate collections of features.\n\n  eg.\n\n  .. code:: python\n\n    >>> iris_input = Iris.Input(5.1, 3.5, 1.4, 0.2)\n    >>> iris_input\n    Input(sepal_length_cm=5.1, sepal_width_cm=3.5, petal_length_cm=1.4, petal_width_cm=0.2)\n    >>> iris_input.sepal_length\n    5.1\n\n    >>> Iris.Input.from_json({'sepal_length_cm': 5.1, 'sepal_width_cm': 3.5, 'petal_length_cm': 1.4, 'petal_width_cm': 0.2})\n    Input(sepal_length_cm=5.1, sepal_width_cm=3.5, petal_length_cm=1.4, petal_width_cm=0.2)\n\n- ``Model.features_from_list(lists)`` - Deserialize an iterable of lists into an iterable of input/output feature pairs.\n\n  eg.\n\n  .. code:: python\n\n    >>> list(Iris.features_from_list([[5.1, 3.5, 1.4, 0.2, 'Iris-setosa']]))\n    [(Input(sepal_length_cm=5.1, sepal_width_cm=3.5, petal_length_cm=1.4, petal_width_cm=0.2), Output(iris_class='Iris-setosa'))]\n\n- ``Model.input_features_from_list(lists)`` - Deserialize an iterable of lists into an iterable of input features.\n\n  eg.\n\n  .. code:: python\n\n    >>> list(Iris.input_features_from_list([[5.1, 3.5, 1.4, 0.2]]))\n    [Input(sepal_length_cm=5.1, sepal_width_cm=3.5, petal_length_cm=1.4, petal_width_cm=0.2)]\n\n- ``Model.features_from_json(json)`` - Deserialize an iterable of dictionaries into an iterable of input/output feature pairs.\n\n  eg.\n\n  .. code:: python\n\n    >>> list(Iris.features_from_json([{'sepal_length_cm': 5.1, 'sepal_width_cm': 3.5, 'petal_length_cm': 1.4, 'petal_width_cm': 0.2, 'iris_class': 'Iris-setosa'}]))\n    [(Input(sepal_length_cm=5.1, sepal_width_cm=3.5, petal_length_cm=1.4, petal_width_cm=0.2), Output(iris_class='Iris-setosa'))]\n\n- ``Model.input_features_from_json(json)`` - Deserialize an iterable of dictionaries into an iterable of input features.\n\n  eg.\n\n  .. code:: python\n\n    >>> list(Iris.input_features_from_json([{'sepal_length_cm': 5.1, 'sepal_width_cm': 3.5, 'petal_length_cm': 1.4, 'petal_width_cm': 0.2}]))\n    [Input(sepal_length_cm=5.1, sepal_width_cm=3.5, petal_length_cm=1.4, petal_width_cm=0.2)]\n\n- ``Model.features_from_csv(csv_path)`` - Take a path to a CSV file, or a file-like object, and deserialize it into an iterable of input/output feature pairs.\n\n  If column headings are not given in the file, assume the input features are followed by the output features, in the order they are defined in their respective classes.\n\n  eg.\n\n  .. code:: python\n\n    >>> list(Iris.features_from_csv('iris_data.csv'))\n    [(Input(sepal_length_cm=5.1, sepal_width_cm=3.5, petal_length_cm=1.4, petal_width_cm=0.2), Output(iris_class='Iris-setosa')), ...]\n\n- ``Model.input_features_from_csv(csv_path)`` - Take a path to a CSV file, or a file-like object, and deserialize it into an iterable of input features.\n\n  If column headings are not given in the file, assume they are in the order they are defined in the ``Input`` class.\n\n  eg.\n\n  .. code:: python\n\n    >>> list(Iris.input_features_from_csv('iris_data.csv'))\n    [Input(sepal_length_cm=5.1, sepal_width_cm=3.5, petal_length_cm=1.4, petal_width_cm=0.2), ...]\n\n- ``Model.model_class`` - How to model the relation between the input and output data.\n\n  Default: ``sklearn.linear_model.LinearRegression``\n\n  This attribute accepts any class with ``fit``, ``predict``, and ``score`` methods defined as for ``scikit-learn`` multi-response regression models.\n  In particular, this attribute accepts any ``scikit-learn`` multi-response regression models,\n  ie. any ``scikit-learn`` regression model where the ``y`` parameter of ``fit`` accepts a numpy array of shape ``[n_samples, n_targets]``.\n\n- ``Model.train(features, train_test_split_ratio=None, test_sample_count=None, random_state=None)``\n\n  Train a new model on the given iterable of input/output pairs.\n\n  Parameters:\n\n  - ``features`` - An iterable of input/output pairs.\n\n  - ``train_test_split_ratio`` - Proportion of data to use as cross-validation test data.\n\n  - ``test_sample_count`` - Number of samples of data to use as cross-validation test data.\n\n    If ``train_test_split_ratio`` or ``test_sample_count`` are provided, perform cross-validation of the given data.\n    Return both the trained model, and the score of the test data on that model.\n\n  - ``random_state`` - Either a ``numpy`` ``RandomState``, or the seed to use for the PRNG.\n\n  Useful for getting consistent results, for example for automated tests.\n  Do not use this parameter when generating models you plan to use in production settings.\n\n  eg.\n\n  .. code:: python\n\n    >>> iris_model = Iris.train([(Iris.Input(5.1, 3.5, 1.4, 0.2), Iris.Output('Iris-setosa'))])\n\n- ``model.predict(input_features, yield_inputs=False)`` - Predict the outputs for a given iterable of inputs.\n\n  If ``yield_inputs`` is ``True`` then yield the prediction with the input used to generate it, as ``input``, ``output`` pairs.\n  Otherwise, yield just the predictions, in the same order the inputs are given to the model.\n\n  eg.\n\n  .. code:: python\n\n    >>> list(iris_model.predict([Iris.Input(5.1, 3.5, 1.4, 0.2)]))\n    [Output(iris_class='Iris-setosa')]\n\nFeature Types\n~~~~~~~~~~~~~\n\nSmart Fruit recognizes the following data types for input and output features.\nCustom types may be made by extending the ``FeatureType`` class.\n\n- ``Number()`` - A real-valued feature.\n\n  eg. ``0``, ``1``, ``3.141592``, ``-17``, ...\n\n- ``Integer()`` - A whole number feature.\n\n  eg. ``0``, ``1``, ``3``, ``-17``, ...\n\n- ``Complex()`` - A complex-valued number feature.\n\n  eg. ``0``, ``1``, ``3 + 4j``, ``-1 + 7j``, ...\n\n- ``Label(labels)`` - An enumerated feature, ie. one which may take one of a pre-defined list of available values.\n\n  eg. For ``labels = ['red', 'green', 'blue']``, our label may take the value ``'red'``, but not ``'purple'``.\n\n- ``Vector(feature_types)`` - A feature made of other features. Useful for grouping conceptually related features.\n\n  eg. For ``feature_types = [Number(), Label(['red', 'green', 'blue'])]``, we may take values such as ``(0, 'red')``, and ``(1, 'blue')``.\n\n- ``Tag()`` - A feature that is ignored when making predictions. Useful for keeping track of ID numbers.\n\n  Accepts any Python value.\n\nRequirements\n------------\n\nSmart Fruit requires Python 3.6+, and uses\n`scikit-learn <http://scikit-learn.org/stable/>`_,\n`scipy <https://www.scipy.org/>`_,\nand `pandas <https://pandas.pydata.org/>`_.\n\nInstallation\n------------\n\nInstall and update using the standard Python package manager `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code:: text\n\n    pip install smart-fruit\n\nDonate\n------\n\nTo support the continued development of Smart Fruit, please\n`donate <https://salt.bountysource.com/checkout/amount?team=smart-fruit>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/madman-bob/Smart-Fruit", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "smart-fruit", "package_url": "https://pypi.org/project/smart-fruit/", "platform": "", "project_url": "https://pypi.org/project/smart-fruit/", "project_urls": {"Homepage": "https://github.com/madman-bob/Smart-Fruit"}, "release_url": "https://pypi.org/project/smart-fruit/1.2.1/", "requires_dist": ["pandas", "scikit-learn", "scipy"], "requires_python": "", "summary": "A Python schema-based machine learning library", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"purpose\">\n<h2>Purpose</h2>\n<p>A Python machine learning library, for creating quick and easy machine learning models.\nIt is schema-based, and wraps <a href=\"http://scikit-learn.org/stable/\" rel=\"nofollow\">scikit-learn</a>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create and use a machine learning model in 3 steps:</p>\n<ol>\n<li>Create a schema representing your input and output features.</li>\n<li>Train a model from your data.</li>\n<li>Make predictions from your model.</li>\n</ol>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>To get a feel for the library, consider the classic <a href=\"https://archive.ics.uci.edu/ml/datasets/Iris\" rel=\"nofollow\">Iris</a> dataset,\nwhere we predict the class of iris plant from measurements of the sepal, and petal.</p>\n<p>First, we create a schema describing our inputs and outputs.\nFor our inputs, we have the length, and width, of both the sepal, and the petal.\nAll of these input values happen to be numbers.\nFor our output, we have just the class of iris, which may be one of the labels <tt><span class=\"pre\">Iris-setosa</span></tt>, <tt><span class=\"pre\">Iris-versicolor</span></tt>, or <tt><span class=\"pre\">Iris-virginica</span></tt>.</p>\n<p>We define this in code as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smart_fruit</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smart_fruit.feature_types</span> <span class=\"kn\">import</span> <span class=\"n\">Number</span><span class=\"p\">,</span> <span class=\"n\">Label</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Iris</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Input</span><span class=\"p\">:</span>\n        <span class=\"n\">sepal_length_cm</span> <span class=\"o\">=</span> <span class=\"n\">Number</span><span class=\"p\">()</span>\n        <span class=\"n\">sepal_width_cm</span> <span class=\"o\">=</span> <span class=\"n\">Number</span><span class=\"p\">()</span>\n        <span class=\"n\">petal_length_cm</span> <span class=\"o\">=</span> <span class=\"n\">Number</span><span class=\"p\">()</span>\n        <span class=\"n\">petal_width_cm</span> <span class=\"o\">=</span> <span class=\"n\">Number</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Output</span><span class=\"p\">:</span>\n        <span class=\"n\">iris_class</span> <span class=\"o\">=</span> <span class=\"n\">Label</span><span class=\"p\">([</span><span class=\"s1\">'Iris-setosa'</span><span class=\"p\">,</span> <span class=\"s1\">'Iris-versicolor'</span><span class=\"p\">,</span> <span class=\"s1\">'Iris-virginica'</span><span class=\"p\">])</span>\n</pre>\n<p>Then, we train a model:</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">features_from_csv</span><span class=\"p\">(</span><span class=\"s1\">'iris_data.csv'</span><span class=\"p\">))</span>\n</pre>\n<p>with data file <a href=\"https://github.com/madman-bob/Smart-Fruit/blob/master/examples/iris_data.csv\" rel=\"nofollow\">iris_data.csv</a>.</p>\n<pre>sepal_length_cm,sepal_width_cm,petal_length_cm,petal_width_cm,iris_class\n5.1,3.5,1.4,0.2,Iris-setosa\n...\n</pre>\n<p>Finally, we use our new model to make predictions:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">prediction</span> <span class=\"ow\">in</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)]):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">prediction</span><span class=\"o\">.</span><span class=\"n\">iris_class</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"reference\">\n<h2>Reference</h2>\n<div id=\"models\">\n<h3>Models</h3>\n<ul>\n<li><p><tt>Model.Input</tt> - Schema for defining your input features.</p>\n</li>\n<li><p><tt>Model.Output</tt> - Schema for defining your output features.</p>\n<p>Define <tt>Model.Input</tt> and <tt>Model.Output</tt> as classes with <tt>FeatureType</tt> attributes.</p>\n<p>eg. Consider the <tt>Iris</tt> class defined above.</p>\n<p>These classes can then be used to create objects representing the appropriate collections of features.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iris_input</span> <span class=\"o\">=</span> <span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iris_input</span>\n<span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">sepal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"n\">sepal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">petal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"n\">petal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iris_input</span><span class=\"o\">.</span><span class=\"n\">sepal_length</span>\n<span class=\"mf\">5.1</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"o\">.</span><span class=\"n\">from_json</span><span class=\"p\">({</span><span class=\"s1\">'sepal_length_cm'</span><span class=\"p\">:</span> <span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"s1\">'sepal_width_cm'</span><span class=\"p\">:</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"s1\">'petal_length_cm'</span><span class=\"p\">:</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"s1\">'petal_width_cm'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">})</span>\n<span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">sepal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"n\">sepal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">petal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"n\">petal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p><tt>Model.features_from_list(lists)</tt> - Deserialize an iterable of lists into an iterable of input/output feature pairs.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">features_from_list</span><span class=\"p\">([[</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"s1\">'Iris-setosa'</span><span class=\"p\">]]))</span>\n<span class=\"p\">[(</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">sepal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"n\">sepal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">petal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"n\">petal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">),</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">iris_class</span><span class=\"o\">=</span><span class=\"s1\">'Iris-setosa'</span><span class=\"p\">))]</span>\n</pre>\n</li>\n<li><p><tt>Model.input_features_from_list(lists)</tt> - Deserialize an iterable of lists into an iterable of input features.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">input_features_from_list</span><span class=\"p\">([[</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">]]))</span>\n<span class=\"p\">[</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">sepal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"n\">sepal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">petal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"n\">petal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)]</span>\n</pre>\n</li>\n<li><p><tt>Model.features_from_json(json)</tt> - Deserialize an iterable of dictionaries into an iterable of input/output feature pairs.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">features_from_json</span><span class=\"p\">([{</span><span class=\"s1\">'sepal_length_cm'</span><span class=\"p\">:</span> <span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"s1\">'sepal_width_cm'</span><span class=\"p\">:</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"s1\">'petal_length_cm'</span><span class=\"p\">:</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"s1\">'petal_width_cm'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"s1\">'iris_class'</span><span class=\"p\">:</span> <span class=\"s1\">'Iris-setosa'</span><span class=\"p\">}]))</span>\n<span class=\"p\">[(</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">sepal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"n\">sepal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">petal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"n\">petal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">),</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">iris_class</span><span class=\"o\">=</span><span class=\"s1\">'Iris-setosa'</span><span class=\"p\">))]</span>\n</pre>\n</li>\n<li><p><tt>Model.input_features_from_json(json)</tt> - Deserialize an iterable of dictionaries into an iterable of input features.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">input_features_from_json</span><span class=\"p\">([{</span><span class=\"s1\">'sepal_length_cm'</span><span class=\"p\">:</span> <span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"s1\">'sepal_width_cm'</span><span class=\"p\">:</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"s1\">'petal_length_cm'</span><span class=\"p\">:</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"s1\">'petal_width_cm'</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"p\">}]))</span>\n<span class=\"p\">[</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">sepal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"n\">sepal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">petal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"n\">petal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)]</span>\n</pre>\n</li>\n<li><p><tt>Model.features_from_csv(csv_path)</tt> - Take a path to a CSV file, or a file-like object, and deserialize it into an iterable of input/output feature pairs.</p>\n<p>If column headings are not given in the file, assume the input features are followed by the output features, in the order they are defined in their respective classes.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">features_from_csv</span><span class=\"p\">(</span><span class=\"s1\">'iris_data.csv'</span><span class=\"p\">))</span>\n<span class=\"p\">[(</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">sepal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"n\">sepal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">petal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"n\">petal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">),</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">iris_class</span><span class=\"o\">=</span><span class=\"s1\">'Iris-setosa'</span><span class=\"p\">)),</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n</li>\n<li><p><tt>Model.input_features_from_csv(csv_path)</tt> - Take a path to a CSV file, or a file-like object, and deserialize it into an iterable of input features.</p>\n<p>If column headings are not given in the file, assume they are in the order they are defined in the <tt>Input</tt> class.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">input_features_from_csv</span><span class=\"p\">(</span><span class=\"s1\">'iris_data.csv'</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">sepal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"n\">sepal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">petal_length_cm</span><span class=\"o\">=</span><span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"n\">petal_width_cm</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">),</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n</li>\n<li><p><tt>Model.model_class</tt> - How to model the relation between the input and output data.</p>\n<p>Default: <tt>sklearn.linear_model.LinearRegression</tt></p>\n<p>This attribute accepts any class with <tt>fit</tt>, <tt>predict</tt>, and <tt>score</tt> methods defined as for <tt><span class=\"pre\">scikit-learn</span></tt> multi-response regression models.\nIn particular, this attribute accepts any <tt><span class=\"pre\">scikit-learn</span></tt> multi-response regression models,\nie. any <tt><span class=\"pre\">scikit-learn</span></tt> regression model where the <tt>y</tt> parameter of <tt>fit</tt> accepts a numpy array of shape <tt>[n_samples, n_targets]</tt>.</p>\n</li>\n<li><p><tt>Model.train(features, train_test_split_ratio=None, test_sample_count=None, random_state=None)</tt></p>\n<p>Train a new model on the given iterable of input/output pairs.</p>\n<p>Parameters:</p>\n<ul>\n<li><p><tt>features</tt> - An iterable of input/output pairs.</p>\n</li>\n<li><p><tt>train_test_split_ratio</tt> - Proportion of data to use as cross-validation test data.</p>\n</li>\n<li><p><tt>test_sample_count</tt> - Number of samples of data to use as cross-validation test data.</p>\n<p>If <tt>train_test_split_ratio</tt> or <tt>test_sample_count</tt> are provided, perform cross-validation of the given data.\nReturn both the trained model, and the score of the test data on that model.</p>\n</li>\n<li><p><tt>random_state</tt> - Either a <tt>numpy</tt> <tt>RandomState</tt>, or the seed to use for the PRNG.</p>\n</li>\n</ul>\n<p>Useful for getting consistent results, for example for automated tests.\nDo not use this parameter when generating models you plan to use in production settings.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">iris_model</span> <span class=\"o\">=</span> <span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">([(</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">),</span> <span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"s1\">'Iris-setosa'</span><span class=\"p\">))])</span>\n</pre>\n</li>\n<li><p><tt>model.predict(input_features, yield_inputs=False)</tt> - Predict the outputs for a given iterable of inputs.</p>\n<p>If <tt>yield_inputs</tt> is <tt>True</tt> then yield the prediction with the input used to generate it, as <tt>input</tt>, <tt>output</tt> pairs.\nOtherwise, yield just the predictions, in the same order the inputs are given to the model.</p>\n<p>eg.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">iris_model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([</span><span class=\"n\">Iris</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"mf\">5.1</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">1.4</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)]))</span>\n<span class=\"p\">[</span><span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">iris_class</span><span class=\"o\">=</span><span class=\"s1\">'Iris-setosa'</span><span class=\"p\">)]</span>\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"feature-types\">\n<h3>Feature Types</h3>\n<p>Smart Fruit recognizes the following data types for input and output features.\nCustom types may be made by extending the <tt>FeatureType</tt> class.</p>\n<ul>\n<li><p><tt>Number()</tt> - A real-valued feature.</p>\n<p>eg. <tt>0</tt>, <tt>1</tt>, <tt>3.141592</tt>, <tt><span class=\"pre\">-17</span></tt>, \u2026</p>\n</li>\n<li><p><tt>Integer()</tt> - A whole number feature.</p>\n<p>eg. <tt>0</tt>, <tt>1</tt>, <tt>3</tt>, <tt><span class=\"pre\">-17</span></tt>, \u2026</p>\n</li>\n<li><p><tt>Complex()</tt> - A complex-valued number feature.</p>\n<p>eg. <tt>0</tt>, <tt>1</tt>, <tt>3 + 4j</tt>, <tt><span class=\"pre\">-1</span> + 7j</tt>, \u2026</p>\n</li>\n<li><p><tt>Label(labels)</tt> - An enumerated feature, ie. one which may take one of a pre-defined list of available values.</p>\n<p>eg. For <tt>labels = ['red', 'green', 'blue']</tt>, our label may take the value <tt>'red'</tt>, but not <tt>'purple'</tt>.</p>\n</li>\n<li><p><tt>Vector(feature_types)</tt> - A feature made of other features. Useful for grouping conceptually related features.</p>\n<p>eg. For <tt>feature_types = <span class=\"pre\">[Number(),</span> <span class=\"pre\">Label(['red',</span> 'green', <span class=\"pre\">'blue'])]</span></tt>, we may take values such as <tt>(0, 'red')</tt>, and <tt>(1, 'blue')</tt>.</p>\n</li>\n<li><p><tt>Tag()</tt> - A feature that is ignored when making predictions. Useful for keeping track of ID numbers.</p>\n<p>Accepts any Python value.</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Smart Fruit requires Python 3.6+, and uses\n<a href=\"http://scikit-learn.org/stable/\" rel=\"nofollow\">scikit-learn</a>,\n<a href=\"https://www.scipy.org/\" rel=\"nofollow\">scipy</a>,\nand <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install and update using the standard Python package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a>:</p>\n<pre>pip install smart-fruit\n</pre>\n</div>\n<div id=\"donate\">\n<h2>Donate</h2>\n<p>To support the continued development of Smart Fruit, please\n<a href=\"https://salt.bountysource.com/checkout/amount?team=smart-fruit\" rel=\"nofollow\">donate</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 4120457, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "38b1c551bd7a9ef2c47ba43c95401036", "sha256": "9b8e23dc3978f6c7ba5528a111f967a3ad91f651bc7a41307a310858cb35c564"}, "downloads": -1, "filename": "smart_fruit-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "38b1c551bd7a9ef2c47ba43c95401036", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7166, "upload_time": "2018-06-26T15:13:10", "upload_time_iso_8601": "2018-06-26T15:13:10.130825Z", "url": "https://files.pythonhosted.org/packages/b1/46/ee57f87ee3bfe512ee76682e4ff7d1e53b214acddfd4e30bf3653cd95a35/smart_fruit-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "033592c96b74a47389f8a8e66b5b1265", "sha256": "0ec193b8456329d93d08aa3116e1c6bb9851da3065c0b22eae2049fc742bed69"}, "downloads": -1, "filename": "smart-fruit-1.0.1.tar.gz", "has_sig": false, "md5_digest": "033592c96b74a47389f8a8e66b5b1265", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4615, "upload_time": "2018-06-26T15:13:10", "upload_time_iso_8601": "2018-06-26T15:13:10.868100Z", "url": "https://files.pythonhosted.org/packages/ba/e2/08221b5a42bf2198f9dfbd33a284aabb63f74a9eb026e5e2864c4886131a/smart-fruit-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ebd3f8418830dfa4c539ad997388c380", "sha256": "ea763ba2172505a6f3cdc45d6501f7168977bd45ea84cf10552a34ac763ad763"}, "downloads": -1, "filename": "smart_fruit-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ebd3f8418830dfa4c539ad997388c380", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7163, "upload_time": "2018-06-26T15:36:48", "upload_time_iso_8601": "2018-06-26T15:36:48.781310Z", "url": "https://files.pythonhosted.org/packages/84/ef/a27a2ada9081c79092b340753a763b8cc4ba3e4e3b402f2d1b26b8bb7864/smart_fruit-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca90c92d9226b9123d1bc34c589e6380", "sha256": "8bf298306987cd862ffd09fb06b73d4d7cfe3d05a7a1a74f6c3653f8e7ea233f"}, "downloads": -1, "filename": "smart-fruit-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ca90c92d9226b9123d1bc34c589e6380", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4601, "upload_time": "2018-06-26T15:36:49", "upload_time_iso_8601": "2018-06-26T15:36:49.864089Z", "url": "https://files.pythonhosted.org/packages/b3/cb/b0d88266ba75d5b8ddbf09be88a515196d78488d84787c1f116f48c157b5/smart-fruit-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "97b02d2b079d3f3459529ec4e3eb69c8", "sha256": "0c74f2922a022c7794b112f9e229f744b433c26b2cf80a94cef6e181d859ab1d"}, "downloads": -1, "filename": "smart_fruit-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "97b02d2b079d3f3459529ec4e3eb69c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7161, "upload_time": "2018-06-26T15:54:14", "upload_time_iso_8601": "2018-06-26T15:54:14.709389Z", "url": "https://files.pythonhosted.org/packages/da/e1/909a0d89efa6af04c43efc82760f8a215b79bfb2b4a11658ddc42fe2d04b/smart_fruit-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ccf9c4ea4117a7ffe0c9b42fd9bd7f5e", "sha256": "35e65993157aee750a41a84efd92f0965e64d9c6790cdfb7435b834d3c155108"}, "downloads": -1, "filename": "smart-fruit-1.0.3.tar.gz", "has_sig": false, "md5_digest": "ccf9c4ea4117a7ffe0c9b42fd9bd7f5e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4592, "upload_time": "2018-06-26T15:54:15", "upload_time_iso_8601": "2018-06-26T15:54:15.968585Z", "url": "https://files.pythonhosted.org/packages/f6/55/8418e7fcc55ed21b02a6e147ef02deea650ab2f787e926b44b260cd72706/smart-fruit-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "4016b32c260256491d8c4b34ef169f9d", "sha256": "77de938466e9de5ea7d0008c85da8337cab9b59e39900925cc52b7651d7f0055"}, "downloads": -1, "filename": "smart_fruit-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4016b32c260256491d8c4b34ef169f9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7164, "upload_time": "2018-06-26T16:02:48", "upload_time_iso_8601": "2018-06-26T16:02:48.778885Z", "url": "https://files.pythonhosted.org/packages/6e/72/fd67e15fa09dab1067224b2e1c4d59d741cc3e5eab9385f4681938e4c755/smart_fruit-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88266a174b2ba0d763ee85d010c0dbb9", "sha256": "8f69aaaab76c25c5e1cc3f6819ec236028837e71d2adcf0e489e9b80a4f0e4a8"}, "downloads": -1, "filename": "smart-fruit-1.0.4.tar.gz", "has_sig": false, "md5_digest": "88266a174b2ba0d763ee85d010c0dbb9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4593, "upload_time": "2018-06-26T16:02:49", "upload_time_iso_8601": "2018-06-26T16:02:49.559520Z", "url": "https://files.pythonhosted.org/packages/34/e4/89eab3ac959c3da18efbd0bcfaa4c4374a8913212a46b7cdac73aa8b1459/smart-fruit-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "ba69f3038df8426a3656fb9d7b875f8c", "sha256": "3c757d5ac5ff4f838015526703f195c07260c6333bf8f3b15f2efab4284810ae"}, "downloads": -1, "filename": "smart_fruit-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "ba69f3038df8426a3656fb9d7b875f8c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7164, "upload_time": "2018-06-26T16:20:33", "upload_time_iso_8601": "2018-06-26T16:20:33.633533Z", "url": "https://files.pythonhosted.org/packages/59/88/3c1a421b62d4e7ac0871a24b617962a367098300bc1a308f8b0f3a7200d0/smart_fruit-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "deeed38b7bb708053d0afa0d7844fe8e", "sha256": "614274a75cae138068f41890d952d41faae0bdf1a2dc65a3206754f1bdc9acad"}, "downloads": -1, "filename": "smart-fruit-1.0.5.tar.gz", "has_sig": false, "md5_digest": "deeed38b7bb708053d0afa0d7844fe8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4592, "upload_time": "2018-06-26T16:20:34", "upload_time_iso_8601": "2018-06-26T16:20:34.924011Z", "url": "https://files.pythonhosted.org/packages/ea/f2/34891710563992edb06d2567d8b38e68ce5c231b11a7d71b52867aafa77f/smart-fruit-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "d33e757c067a64657e7695b7b01c3f0f", "sha256": "adec3f19d830961b45dcc0fcc831dc3cbff97d509794b9692ffcd29bb69cc958"}, "downloads": -1, "filename": "smart_fruit-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d33e757c067a64657e7695b7b01c3f0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7406, "upload_time": "2018-06-29T10:33:44", "upload_time_iso_8601": "2018-06-29T10:33:44.577061Z", "url": "https://files.pythonhosted.org/packages/03/6e/27e943d94fe8a1f062d7387e4685519dbb476fe6e2c0bb55ff3819ca6565/smart_fruit-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ca38c8a078b57240ba81652afc7f892", "sha256": "171d696f7387c1e605eb7a24274ea87c3f6f98b995de9a1be56baa8fb72e9015"}, "downloads": -1, "filename": "smart-fruit-1.0.6.tar.gz", "has_sig": false, "md5_digest": "3ca38c8a078b57240ba81652afc7f892", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4805, "upload_time": "2018-06-29T10:33:45", "upload_time_iso_8601": "2018-06-29T10:33:45.839238Z", "url": "https://files.pythonhosted.org/packages/09/45/115dbf8b0e305393c2f75b9dd1a7cf428eb6f3aa7fd438d817c1b0dda23c/smart-fruit-1.0.6.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8a993aacc692644a0b22c3b32ba91a5d", "sha256": "26ed76b785b52be2df29db182c39acc2486d5468961e82128fe48debec4492f6"}, "downloads": -1, "filename": "smart_fruit-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8a993aacc692644a0b22c3b32ba91a5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9468, "upload_time": "2018-07-12T13:42:44", "upload_time_iso_8601": "2018-07-12T13:42:44.445721Z", "url": "https://files.pythonhosted.org/packages/00/e9/a5f4634a5f9076ef82bd013b2a1f884fcb07017b09c5b845592c5f013202/smart_fruit-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "779d999abb592875772be1d4178bfb18", "sha256": "85bd489fcdec47c6b8baf9d5d0c61ca1ebb1df0aa22bc394f8a7cb99cb071b19"}, "downloads": -1, "filename": "smart-fruit-1.1.0.tar.gz", "has_sig": false, "md5_digest": "779d999abb592875772be1d4178bfb18", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6373, "upload_time": "2018-07-12T13:42:45", "upload_time_iso_8601": "2018-07-12T13:42:45.584629Z", "url": "https://files.pythonhosted.org/packages/aa/33/21ac5e998e8415a9ec205c886642de924dc1e866cc35663ed793af8a56ff/smart-fruit-1.1.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "cfb12dbcbd4c73ab3fe829e1ce7908f2", "sha256": "402e4c497bfd5f84f597373c9f48c935bdee67c99cd2c0c7e755a344eb73274a"}, "downloads": -1, "filename": "smart_fruit-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cfb12dbcbd4c73ab3fe829e1ce7908f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13188, "upload_time": "2018-07-31T14:34:54", "upload_time_iso_8601": "2018-07-31T14:34:54.037183Z", "url": "https://files.pythonhosted.org/packages/b0/49/39fa4197686c5d8b3cb4271b89a511a5410d5db50deba13b71bfa43ee719/smart_fruit-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb6ebeedc5d4d984360bfedcacf53669", "sha256": "49645a3ea0a02bddbcab22c920bae5b175e52af771ff5c5cee2994e50dedf313"}, "downloads": -1, "filename": "smart-fruit-1.2.1.tar.gz", "has_sig": false, "md5_digest": "bb6ebeedc5d4d984360bfedcacf53669", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9949, "upload_time": "2018-07-31T14:34:55", "upload_time_iso_8601": "2018-07-31T14:34:55.127635Z", "url": "https://files.pythonhosted.org/packages/1e/4f/3f7c9ff85ddfbb3661a125f935ba5428b9d7175ba7faebf6b9011fd5755d/smart-fruit-1.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfb12dbcbd4c73ab3fe829e1ce7908f2", "sha256": "402e4c497bfd5f84f597373c9f48c935bdee67c99cd2c0c7e755a344eb73274a"}, "downloads": -1, "filename": "smart_fruit-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cfb12dbcbd4c73ab3fe829e1ce7908f2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13188, "upload_time": "2018-07-31T14:34:54", "upload_time_iso_8601": "2018-07-31T14:34:54.037183Z", "url": "https://files.pythonhosted.org/packages/b0/49/39fa4197686c5d8b3cb4271b89a511a5410d5db50deba13b71bfa43ee719/smart_fruit-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb6ebeedc5d4d984360bfedcacf53669", "sha256": "49645a3ea0a02bddbcab22c920bae5b175e52af771ff5c5cee2994e50dedf313"}, "downloads": -1, "filename": "smart-fruit-1.2.1.tar.gz", "has_sig": false, "md5_digest": "bb6ebeedc5d4d984360bfedcacf53669", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9949, "upload_time": "2018-07-31T14:34:55", "upload_time_iso_8601": "2018-07-31T14:34:55.127635Z", "url": "https://files.pythonhosted.org/packages/1e/4f/3f7c9ff85ddfbb3661a125f935ba5428b9d7175ba7faebf6b9011fd5755d/smart-fruit-1.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:04 2020"}