{"info": {"author": "", "author_email": "waipu@cirno.de", "bugtrack_url": null, "classifiers": [], "description": "Multiple Dispatch\n=================\n\n|Build Status|\n\nA relatively sane approach to multiple dispatch in Python.\n\nForked from to support and use annotations for dispatch.\nThis implementation of multiple dispatch is efficient, mostly complete,\nperforms static analysis to avoid conflicts, and provides optional namespace\nsupport. It looks good too.\n\n\nExample\n-------\n\n.. code-block:: python\n\n   >>> from adispatch import adispatch\n\n   >>> @adispatch()\n   ... def add(x: int, y: int):\n   ...     return x + y\n\n   >>> @adispatch()\n   ... def add(x: object, y: object):\n   ...     return \"%s + %s\" % (x, y)\n\n   >>> add(1, 2)\n   3\n\n   >>> add(1, 'hello')\n   '1 + hello'\n\nWhat this does\n--------------\n\n-  Dispatches on all non-keyword arguments\n\n-  Supports inheritance\n\n-  Supports instance methods\n\n-  Supports union types, e.g. ``(int, float)``\n\n-  Supports builtin abstract classes, e.g. ``Iterator, Number, ...``\n\n-  Caches for fast repeated lookup\n\n-  Identifies possible ambiguities at function definition time\n\n-  Provides hints to resolve ambiguities when they occur\n\n-  Supports namespaces with optional keyword arguments\n\nWhat this doesn't do\n--------------------\n\n-  Vararg dispatch\n\n.. code-block:: python\n\n   @adispatch()\n   def add(*args: [int]):\n       ...\n\n-  Diagonal dispatch\n\n.. code-block:: python\n\n   a = arbitrary_type()\n   @adispatch()\n   def are_same_type(x: a, y: a):\n       return True\n\n\nInstallation and Dependencies\n-----------------------------\n\n``adispatch`` supports Python 3.2+, is pure python and requires no other dependencies.\n\nLicense\n-------\n\nNew BSD. See License_.\n\n\nLinks\n-----\n\n-  `Five-minute Multimethods in Python by Guido`_\n-  `multimethods package on PyPI`_\n-  `singledispatch in Python 3.4's functools`_\n-  `Clojure Protocols`_\n-  `Julia methods docs`_\n-  `Karpinksi notebook: *The Design Impact of Multiple Dispatch*`_\n-  `Wikipedia article`_\n-  `PEP 3124 - *Overloading, Generic Functions, Interfaces, and Adaptation*`_\n\n\n.. _`Five-minute Multimethods in Python by Guido`:\n  http://www.artima.com/weblogs/viewpost.jsp?thread=101605\n.. _`multimethods package on PyPI`:\n  https://pypi.python.org/pypi/multimethods\n.. _`singledispatch in Python 3.4's functools`:\n  http://docs.python.org/3.4/library/functools.html#functools.singledispatch\n.. _`Clojure Protocols`:\n  http://clojure.org/protocols\n.. _`Julia methods docs`:\n  http://julia.readthedocs.org/en/latest/manual/methods/\n.. _`Karpinksi notebook: *The Design Impact of Multiple Dispatch*`:\n  http://nbviewer.ipython.org/gist/StefanKarpinski/b8fe9dbb36c1427b9f22\n.. _`Wikipedia article`:\n  http://en.wikipedia.org/wiki/Multiple_dispatch\n.. _`PEP 3124 - *Overloading, Generic Functions, Interfaces, and Adaptation*`:\n  http://legacy.python.org/dev/peps/pep-3124/\n\n.. |Build Status| image:: https://travis-ci.org/waipu/adispatch.png\n   :target: https://travis-ci.org/waipu/adispatch\n.. _License: https://github.com/waipu/adispatch/blob/master/LICENSE", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/waipu/adispatch/", "keywords": "dispatch", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "adispatch", "package_url": "https://pypi.org/project/adispatch/", "platform": "", "project_url": "https://pypi.org/project/adispatch/", "project_urls": {"Homepage": "http://github.com/waipu/adispatch/"}, "release_url": "https://pypi.org/project/adispatch/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Multiple dispatch in function annotaions", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/waipu/adispatch\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62dd0eafee1ffe594f81d48c01d8e4dd6ee1108c/68747470733a2f2f7472617669732d63692e6f72672f77616970752f6164697370617463682e706e67\"></a></p>\n<p>A relatively sane approach to multiple dispatch in Python.</p>\n<p>Forked from to support and use annotations for dispatch.\nThis implementation of multiple dispatch is efficient, mostly complete,\nperforms static analysis to avoid conflicts, and provides optional namespace\nsupport. It looks good too.</p>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">adispatch</span> <span class=\"kn\">import</span> <span class=\"n\">adispatch</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@adispatch</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@adispatch</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"s2\"> + </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'hello'</span><span class=\"p\">)</span>\n<span class=\"s1\">'1 + hello'</span>\n</pre>\n</div>\n<div id=\"what-this-does\">\n<h2>What this does</h2>\n<ul>\n<li>Dispatches on all non-keyword arguments</li>\n<li>Supports inheritance</li>\n<li>Supports instance methods</li>\n<li>Supports union types, e.g. <tt>(int, float)</tt></li>\n<li>Supports builtin abstract classes, e.g. <tt>Iterator, Number, ...</tt></li>\n<li>Caches for fast repeated lookup</li>\n<li>Identifies possible ambiguities at function definition time</li>\n<li>Provides hints to resolve ambiguities when they occur</li>\n<li>Supports namespaces with optional keyword arguments</li>\n</ul>\n</div>\n<div id=\"what-this-doesn-t-do\">\n<h2>What this doesn\u2019t do</h2>\n<ul>\n<li>Vararg dispatch</li>\n</ul>\n<pre><span class=\"nd\">@adispatch</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]):</span>\n    <span class=\"o\">...</span>\n</pre>\n<ul>\n<li>Diagonal dispatch</li>\n</ul>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">arbitrary_type</span><span class=\"p\">()</span>\n<span class=\"nd\">@adispatch</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">are_same_type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"installation-and-dependencies\">\n<h2>Installation and Dependencies</h2>\n<p><tt>adispatch</tt> supports Python 3.2+, is pure python and requires no other dependencies.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>New BSD. See <a href=\"https://github.com/waipu/adispatch/blob/master/LICENSE\" rel=\"nofollow\">License</a>.</p>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=101605\" rel=\"nofollow\">Five-minute Multimethods in Python by Guido</a></li>\n<li><a href=\"https://pypi.python.org/pypi/multimethods\" rel=\"nofollow\">multimethods package on PyPI</a></li>\n<li><a href=\"http://docs.python.org/3.4/library/functools.html#functools.singledispatch\" rel=\"nofollow\">singledispatch in Python 3.4\u2019s functools</a></li>\n<li><a href=\"http://clojure.org/protocols\" rel=\"nofollow\">Clojure Protocols</a></li>\n<li><a href=\"http://julia.readthedocs.org/en/latest/manual/methods/\" rel=\"nofollow\">Julia methods docs</a></li>\n<li><a href=\"http://nbviewer.ipython.org/gist/StefanKarpinski/b8fe9dbb36c1427b9f22\" rel=\"nofollow\">Karpinksi notebook: *The Design Impact of Multiple Dispatch*</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/Multiple_dispatch\" rel=\"nofollow\">Wikipedia article</a></li>\n<li><a href=\"http://legacy.python.org/dev/peps/pep-3124/\" rel=\"nofollow\">PEP 3124 - *Overloading, Generic Functions, Interfaces, and Adaptation*</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4685567, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "2a8afd255dbff0ad37ed1298e5ee5fb0", "sha256": "e3bd82b2b227ec12d444de95bdb3416742821ca2fdf175d64db9a9fc4f645a48"}, "downloads": -1, "filename": "adispatch-0.5.0.tar.gz", "has_sig": false, "md5_digest": "2a8afd255dbff0ad37ed1298e5ee5fb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7804, "upload_time": "2019-01-11T14:03:29", "upload_time_iso_8601": "2019-01-11T14:03:29.838218Z", "url": "https://files.pythonhosted.org/packages/9b/27/4866facebc15c5458cb709c4022e7cbc150c6fad7d388eb512ae8ae47b37/adispatch-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a8afd255dbff0ad37ed1298e5ee5fb0", "sha256": "e3bd82b2b227ec12d444de95bdb3416742821ca2fdf175d64db9a9fc4f645a48"}, "downloads": -1, "filename": "adispatch-0.5.0.tar.gz", "has_sig": false, "md5_digest": "2a8afd255dbff0ad37ed1298e5ee5fb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7804, "upload_time": "2019-01-11T14:03:29", "upload_time_iso_8601": "2019-01-11T14:03:29.838218Z", "url": "https://files.pythonhosted.org/packages/9b/27/4866facebc15c5458cb709c4022e7cbc150c6fad7d388eb512ae8ae47b37/adispatch-0.5.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:24 2020"}