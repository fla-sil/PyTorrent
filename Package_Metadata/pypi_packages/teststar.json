{"info": {"author": "{", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: System :: Distributed Computing"], "description": "Celery TestStar\r\n        =============\r\n        \r\n        TestStar is based on Mher's Flower but extends the functionality to scheduled automated test suites\r\n        \r\n        Features\r\n        --------\r\n        \r\n        - Scheduled automated python test suites\r\n        \r\n            - Across multiple celery workers\r\n            - Broker is RabbitMQ\r\n        \r\n        - Real-time monitoring using Celery Events\r\n        \r\n            - Task progress and history\r\n            - Ability to show task details (arguments, start time, runtime, and more)\r\n            - Graphs and statistics\r\n        \r\n        - Remote Control\r\n        \r\n            - View worker status and statistics\r\n            - Shutdown and restart worker instances\r\n            - Control worker pool size and autoscale settings\r\n            - View and modify the queues a worker instance consumes from\r\n            - View currently running tasks\r\n            - View scheduled tasks (ETA/countdown)\r\n            - View reserved and revoked tasks\r\n            - Apply time and rate limits\r\n            - Configuration viewer\r\n            - Revoke or terminate tasks\r\n        \r\n        - Broker monitoring\r\n        \r\n            - View statistics for all Celery queues\r\n            - Queue length graphs\r\n        \r\n        - HTTP API\r\n        - Basic Auth and Google OpenID authentication\r\n        \r\n        API\r\n        ---\r\n        \r\n        Flower API enables to manage the cluster via REST api, call tasks and receive task\r\n        events in real-time via WebSockets.\r\n        \r\n        For example you can schedule a deployment of packages: ::\r\n        \r\n            $ curl -X POST http://localhost:8888/api/deploy/package/myworker\r\n        \r\n        \r\n        Or restart worker's pool by: ::\r\n        \r\n            $ curl -X POST http://localhost:8888/api/worker/pool/restart/myworker\r\n        \r\n        Or call a task by: ::\r\n        \r\n            $ curl -X POST -d '{\"args\":[1,2]}' http://localhost:8888/api/task/async-apply/tasks.add\r\n        \r\n        Or terminate executing task by: ::\r\n        \r\n            $ curl -X POST -d 'terminate=True' http://localhost:8888/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\r\n        \r\n        Or receive task completion events in real-time: ::\r\n        \r\n            var ws = new WebSocket('ws://localhost:8888/api/task/events/task-succeeded/');\r\n            ws.onmessage = function (event) {\r\n                console.log(event.data);\r\n            }\r\n        \r\n        Installation\r\n        ------------\r\n        \r\n        To install, simply: ::\r\n        \r\n            $ pip install teststar\r\n        \r\n        Usage\r\n        -----\r\n        \r\n        Launch the server and open http://localhost:8888: ::\r\n        \r\n            $ teststar --port=8888\r\n        \r\n        Or launch from celery: ::\r\n        \r\n            $ celery teststar --address=127.0.0.1 --port=8888\r\n        \r\n        Broker URL and other configuration options can be passed through the standard Celery options: ::\r\n        \r\n            $ celery teststar --broker=amqp://guest:guest@localhost:5672//\r\n            \r\n            $ celery teststar --broker_url=amqp://guest:guest@localhost:5672// --broker_api=http://guest:guest@localhost:55672/api/\r\n        \r\n        Screenshots\r\n        -----------\r\n        \r\n        .. image:: https://raw.github.com/mdaloia/teststar/master/docs/screenshots/dashboard.png\r\n           :width: 800px\r\n        \r\n        .. image:: https://raw.github.com/mdaloia/teststar/docs/screenshots/pool.png\r\n           :width: 800px\r\n        \r\n        .. image:: https://raw.github.com/mdaloia/teststar/master/docs/screenshots/tasks.png\r\n           :width: 800px\r\n        \r\n        .. image:: https://raw.github.com/mdaloia/teststar/master/docs/screenshots/task.png\r\n           :width: 800px\r\n        \r\n        .. image:: https://raw.github.com/mdaloia/teststar/master/docs/screenshots/monitor.png\r\n           :width: 800px\r\n        \r\n        More screenshots_\r\n        \r\n        .. _screenshots: https://github.com/mdaloia/teststar/tree/master/docs/screenshots\r\n        \r\n        Getting help\r\n        ------------\r\n        \r\n        Please head over to #celery IRC channel on irc.freenode.net or\r\n        `open an issue`_.\r\n        \r\n        .. _open an issue: https://github.com/mher/flower/issues", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/donzeno/TestStar", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "teststar", "package_url": "https://pypi.org/project/teststar/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/teststar/", "project_urls": {"Homepage": "https://github.com/donzeno/TestStar"}, "release_url": "https://pypi.org/project/teststar/0.1.6/", "requires_dist": null, "requires_python": null, "summary": "Celery TestStar", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            Celery TestStar\n<br>        =============\n<br>        \n<br>        TestStar is based on Mher's Flower but extends the functionality to scheduled automated test suites\n<br>        \n<br>        Features\n<br>        --------\n<br>        \n<br>        - Scheduled automated python test suites\n<br>        \n<br>            - Across multiple celery workers\n<br>            - Broker is RabbitMQ\n<br>        \n<br>        - Real-time monitoring using Celery Events\n<br>        \n<br>            - Task progress and history\n<br>            - Ability to show task details (arguments, start time, runtime, and more)\n<br>            - Graphs and statistics\n<br>        \n<br>        - Remote Control\n<br>        \n<br>            - View worker status and statistics\n<br>            - Shutdown and restart worker instances\n<br>            - Control worker pool size and autoscale settings\n<br>            - View and modify the queues a worker instance consumes from\n<br>            - View currently running tasks\n<br>            - View scheduled tasks (ETA/countdown)\n<br>            - View reserved and revoked tasks\n<br>            - Apply time and rate limits\n<br>            - Configuration viewer\n<br>            - Revoke or terminate tasks\n<br>        \n<br>        - Broker monitoring\n<br>        \n<br>            - View statistics for all Celery queues\n<br>            - Queue length graphs\n<br>        \n<br>        - HTTP API\n<br>        - Basic Auth and Google OpenID authentication\n<br>        \n<br>        API\n<br>        ---\n<br>        \n<br>        Flower API enables to manage the cluster via REST api, call tasks and receive task\n<br>        events in real-time via WebSockets.\n<br>        \n<br>        For example you can schedule a deployment of packages: ::\n<br>        \n<br>            $ curl -X POST http://localhost:8888/api/deploy/package/myworker\n<br>        \n<br>        \n<br>        Or restart worker's pool by: ::\n<br>        \n<br>            $ curl -X POST http://localhost:8888/api/worker/pool/restart/myworker\n<br>        \n<br>        Or call a task by: ::\n<br>        \n<br>            $ curl -X POST -d '{\"args\":[1,2]}' http://localhost:8888/api/task/async-apply/tasks.add\n<br>        \n<br>        Or terminate executing task by: ::\n<br>        \n<br>            $ curl -X POST -d 'terminate=True' http://localhost:8888/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n<br>        \n<br>        Or receive task completion events in real-time: ::\n<br>        \n<br>            var ws = new WebSocket('ws://localhost:8888/api/task/events/task-succeeded/');\n<br>            ws.onmessage = function (event) {\n<br>                console.log(event.data);\n<br>            }\n<br>        \n<br>        Installation\n<br>        ------------\n<br>        \n<br>        To install, simply: ::\n<br>        \n<br>            $ pip install teststar\n<br>        \n<br>        Usage\n<br>        -----\n<br>        \n<br>        Launch the server and open http://localhost:8888: ::\n<br>        \n<br>            $ teststar --port=8888\n<br>        \n<br>        Or launch from celery: ::\n<br>        \n<br>            $ celery teststar --address=127.0.0.1 --port=8888\n<br>        \n<br>        Broker URL and other configuration options can be passed through the standard Celery options: ::\n<br>        \n<br>            $ celery teststar --broker=amqp://guest:guest@localhost:5672//\n<br>            \n<br>            $ celery teststar --broker_url=amqp://guest:guest@localhost:5672// --broker_api=http://guest:guest@localhost:55672/api/\n<br>        \n<br>        Screenshots\n<br>        -----------\n<br>        \n<br>        .. image:: https://raw.github.com/mdaloia/teststar/master/docs/screenshots/dashboard.png\n<br>           :width: 800px\n<br>        \n<br>        .. image:: https://raw.github.com/mdaloia/teststar/docs/screenshots/pool.png\n<br>           :width: 800px\n<br>        \n<br>        .. image:: https://raw.github.com/mdaloia/teststar/master/docs/screenshots/tasks.png\n<br>           :width: 800px\n<br>        \n<br>        .. image:: https://raw.github.com/mdaloia/teststar/master/docs/screenshots/task.png\n<br>           :width: 800px\n<br>        \n<br>        .. image:: https://raw.github.com/mdaloia/teststar/master/docs/screenshots/monitor.png\n<br>           :width: 800px\n<br>        \n<br>        More screenshots_\n<br>        \n<br>        .. _screenshots: https://github.com/mdaloia/teststar/tree/master/docs/screenshots\n<br>        \n<br>        Getting help\n<br>        ------------\n<br>        \n<br>        Please head over to #celery IRC channel on irc.freenode.net or\n<br>        `open an issue`_.\n<br>        \n<br>        .. _open an issue: https://github.com/mher/flower/issues\n          </div>"}, "last_serial": 870175, "releases": {"0.1.6": [{"comment_text": "", "digests": {"md5": "ac23cab8d60c2599dce7566768443596", "sha256": "a6787a4df14ccc041da09446a31c62096bc548fa409f169c65aaf4ff816658ea"}, "downloads": -1, "filename": "teststar-0.1.6.tar.gz", "has_sig": false, "md5_digest": "ac23cab8d60c2599dce7566768443596", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 293180, "upload_time": "2013-09-20T18:15:20", "upload_time_iso_8601": "2013-09-20T18:15:20.686461Z", "url": "https://files.pythonhosted.org/packages/3b/a1/9fe807906121ac825a035f67c461bb92ee102df560767c52276e06b5c59f/teststar-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac23cab8d60c2599dce7566768443596", "sha256": "a6787a4df14ccc041da09446a31c62096bc548fa409f169c65aaf4ff816658ea"}, "downloads": -1, "filename": "teststar-0.1.6.tar.gz", "has_sig": false, "md5_digest": "ac23cab8d60c2599dce7566768443596", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 293180, "upload_time": "2013-09-20T18:15:20", "upload_time_iso_8601": "2013-09-20T18:15:20.686461Z", "url": "https://files.pythonhosted.org/packages/3b/a1/9fe807906121ac825a035f67c461bb92ee102df560767c52276e06b5c59f/teststar-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:17 2020"}