{"info": {"author": "Raccoon Serious Games", "author_email": "BEP@raccoon.games", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Developing with sciler \n\n## Client computer library for S.C.I.L.E.R. system\nThis is the library to create devices to work together with the SCILER system \n\n### Installation\n- pip install with ```pip install sciler```\n\n### Using this library\n- import lib with `from sciler.device import Device`\n##### create a class that extends `Device`\n- in order to do this:\n    - implement `get_status()` which should return a dictionary of the current status\n    - implement `perform_instruction(action)` which should return a boolean of whether the instruction can be performed, where action has:\n        - `instruction`: string with the name of the instruction (special case `time`)\n        - `value`: any type with a value specific for this instruction (not in case of `time` instruction )\n        - `component_id`: string with the name of the component for which the instruction is meant (not in case of `time` instruction ) (can be undefined) \n        - `id` in case of `time` instruction: string id of timer (`general` is the main duration of the escape room)\n        - `duration` in case of `time` instruction: integer in milliseconds\n        - `state` in case of `time` instruction: string of state of timer (`stateActive`, `stateIdle`, or `stateExpired`)    \n    - implement `test()` which returns nothing, this method should do something visible so the operator can test this device works correctly\n    - implement `reset()` which returns nothing, this method should make the device return to its starting state so that the escape room can be started again\n    - create a constructor which calls the constructor of `Device` with `super(config, logger)` where:\n        - config is a dictionary which has keys:\n            - `id`: this is the id of a device. Write it in camelCase, e.g. \"controlBoard\".\n            - `host`: the IP address of the host for the broker, formatted as a string.\n            - `port` the port of the host for the broker, formatted as a number.\n            - `labels`: these are the labels to which this device should also subscribe, labels is an array of strings, \n        - logger is a function(date, level, message) in which an own logger is implemented where\n             - `date` is an Date object\n             - `level` is one of the following strings: 'debug', 'info', 'warn', 'error', 'fatal'\n             - `message` is a custom string containing more information\n        - it should also add event listeners to GPIO for all input components.\n    - implement `main()` which should call `start(loop, stop)` with an optional event loop and ending function.  \n##### Now in your class which implements `Device` \n- you can call:\n    - `log(level, message)` which logs using the logger provided in `Device` where level one of the following strings: 'debug', 'info', 'warn', 'error', 'fatal' and message custom string containing more information\n    -  `status_changed()` which can be called to signal to `Device` that the status is changed, this will send a new status to SCILER\n##### To now start the system\n - initialize the device in your main program and call `device.main() `\n\n### Example\n```python\nimport os\n\nfrom sciler.device import Device\n\n\nclass Display(Device):\n    def __init__(self):\n        two_up = os.path.abspath(os.path.join(__file__, \"..\"))\n        rel_path = \"display_config.json\"\n        abs_file_path = os.path.join(two_up, rel_path)\n        abs_file_path = os.path.abspath(os.path.realpath(abs_file_path))\n        config = open(file=abs_file_path)\n        super().__init__(config)\n        self.hint = \"\"\n\n    def get_status(self):\n        return {\"hint\": self.hint}\n\n    def perform_instruction(self, action):\n        instruction = action.get(\"instruction\")\n        if instruction == \"hint\":\n            self.show_hint(action)\n        else:\n            return False, action\n        return True, None\n\n    def test(self):\n        self.hint = \"test\"\n        print(self.hint)\n        self.status_changed()\n\n    def show_hint(self, data):\n        self.hint = data.get(\"value\")\n        print(self.hint)\n        self.status_changed()\n\n    def reset(self):\n        self.hint = \"\"\n        self.status_changed()\n\n    def main(self):\n        self.start()\n\n\nif __name__ == \"__main__\":\n    device = Display()\n    device.main()\n```\nwhere `display_config.json` is\n```json\n{\n  \"id\": \"display\",\n  \"description\": \"Display can print hints\",\n  \"host\": \"192.168.178.82\",\n  \"labels\": [\"hint\"],\n  \"port\": 1883\n}\n```\nexample of `main()` with loop and stop:\n```python\n    def loop(self):\n        previous = self.get_sliders_analog_reading()\n        while True:\n            positions = self.get_sliders_analog_reading()\n            if previous != positions:\n                self.status_changed()\n                previous = positions\n\n    def main(self):\n        self.setup_events()\n        self.start(loop=self.loop, stop=GPIO.cleanup)\n```\n\n##### To run on boot\n- use tool like supervisord:\n- run `sudo apt-get install supervisor`\n- run `sudo nano /etc/supervisor/conf.d/<devicename>.conf` and save:\n```\n[program:devicename]\ndirectory=/home/pi\ncommand=python3 devicename.py\nuser=pi\ngroup_name=pi\nstdout_logfile=/home/pi/sciler_logs/logs_devicename.txt\nredirect_stderr=true\nautostart=true\nautorestart=true\n```\n- run `sudo supervisorctl reread` and `sudo supervisorctl update`\n- run `sudo supervisorctl` to check status\n\n\n## License\nThis library is licensed with GNU GPL v3, see `LICENSE.md`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/IssaHanou/BEP_1920_Q2", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sciler", "package_url": "https://pypi.org/project/sciler/", "platform": "", "project_url": "https://pypi.org/project/sciler/", "project_urls": {"Homepage": "https://github.com/IssaHanou/BEP_1920_Q2"}, "release_url": "https://pypi.org/project/sciler/0.2.3/", "requires_dist": ["paho-mqtt"], "requires_python": ">=3.5", "summary": "Client library for S.C.I.L.E.R.", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Developing with sciler</h1>\n<h2>Client computer library for S.C.I.L.E.R. system</h2>\n<p>This is the library to create devices to work together with the SCILER system</p>\n<h3>Installation</h3>\n<ul>\n<li>pip install with <code>pip install sciler</code></li>\n</ul>\n<h3>Using this library</h3>\n<ul>\n<li>import lib with <code>from sciler.device import Device</code></li>\n</ul>\n<h5>create a class that extends <code>Device</code></h5>\n<ul>\n<li>in order to do this:\n<ul>\n<li>implement <code>get_status()</code> which should return a dictionary of the current status</li>\n<li>implement <code>perform_instruction(action)</code> which should return a boolean of whether the instruction can be performed, where action has:\n<ul>\n<li><code>instruction</code>: string with the name of the instruction (special case <code>time</code>)</li>\n<li><code>value</code>: any type with a value specific for this instruction (not in case of <code>time</code> instruction )</li>\n<li><code>component_id</code>: string with the name of the component for which the instruction is meant (not in case of <code>time</code> instruction ) (can be undefined)</li>\n<li><code>id</code> in case of <code>time</code> instruction: string id of timer (<code>general</code> is the main duration of the escape room)</li>\n<li><code>duration</code> in case of <code>time</code> instruction: integer in milliseconds</li>\n<li><code>state</code> in case of <code>time</code> instruction: string of state of timer (<code>stateActive</code>, <code>stateIdle</code>, or <code>stateExpired</code>)</li>\n</ul>\n</li>\n<li>implement <code>test()</code> which returns nothing, this method should do something visible so the operator can test this device works correctly</li>\n<li>implement <code>reset()</code> which returns nothing, this method should make the device return to its starting state so that the escape room can be started again</li>\n<li>create a constructor which calls the constructor of <code>Device</code> with <code>super(config, logger)</code> where:\n<ul>\n<li>config is a dictionary which has keys:\n<ul>\n<li><code>id</code>: this is the id of a device. Write it in camelCase, e.g. \"controlBoard\".</li>\n<li><code>host</code>: the IP address of the host for the broker, formatted as a string.</li>\n<li><code>port</code> the port of the host for the broker, formatted as a number.</li>\n<li><code>labels</code>: these are the labels to which this device should also subscribe, labels is an array of strings,</li>\n</ul>\n</li>\n<li>logger is a function(date, level, message) in which an own logger is implemented where\n<ul>\n<li><code>date</code> is an Date object</li>\n<li><code>level</code> is one of the following strings: 'debug', 'info', 'warn', 'error', 'fatal'</li>\n<li><code>message</code> is a custom string containing more information</li>\n</ul>\n</li>\n<li>it should also add event listeners to GPIO for all input components.</li>\n</ul>\n</li>\n<li>implement <code>main()</code> which should call <code>start(loop, stop)</code> with an optional event loop and ending function.</li>\n</ul>\n</li>\n</ul>\n<h5>Now in your class which implements <code>Device</code></h5>\n<ul>\n<li>you can call:\n<ul>\n<li><code>log(level, message)</code> which logs using the logger provided in <code>Device</code> where level one of the following strings: 'debug', 'info', 'warn', 'error', 'fatal' and message custom string containing more information</li>\n<li><code>status_changed()</code> which can be called to signal to <code>Device</code> that the status is changed, this will send a new status to SCILER</li>\n</ul>\n</li>\n</ul>\n<h5>To now start the system</h5>\n<ul>\n<li>initialize the device in your main program and call <code>device.main()</code></li>\n</ul>\n<h3>Example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sciler.device</span> <span class=\"kn\">import</span> <span class=\"n\">Device</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Display</span><span class=\"p\">(</span><span class=\"n\">Device</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">two_up</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">,</span> <span class=\"s2\">\"..\"</span><span class=\"p\">))</span>\n        <span class=\"n\">rel_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"display_config.json\"</span>\n        <span class=\"n\">abs_file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">two_up</span><span class=\"p\">,</span> <span class=\"n\">rel_path</span><span class=\"p\">)</span>\n        <span class=\"n\">abs_file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">realpath</span><span class=\"p\">(</span><span class=\"n\">abs_file_path</span><span class=\"p\">))</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">abs_file_path</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"hint\"</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">perform_instruction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">):</span>\n        <span class=\"n\">instruction</span> <span class=\"o\">=</span> <span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"instruction\"</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">instruction</span> <span class=\"o\">==</span> <span class=\"s2\">\"hint\"</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">show_hint</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">action</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">\"test\"</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_changed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">show_hint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"value\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_changed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hint</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_changed</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">Display</span><span class=\"p\">()</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>where <code>display_config.json</code> is</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"display\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Display can print hints\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"192.168.178.82\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"labels\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"hint\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">1883</span>\n<span class=\"p\">}</span>\n</pre>\n<p>example of <code>main()</code> with loop and stop:</p>\n<pre>    <span class=\"k\">def</span> <span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_sliders_analog_reading</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">positions</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_sliders_analog_reading</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">previous</span> <span class=\"o\">!=</span> <span class=\"n\">positions</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_changed</span><span class=\"p\">()</span>\n                <span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"n\">positions</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_events</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"n\">GPIO</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">)</span>\n</pre>\n<h5>To run on boot</h5>\n<ul>\n<li>use tool like supervisord:</li>\n<li>run <code>sudo apt-get install supervisor</code></li>\n<li>run <code>sudo nano /etc/supervisor/conf.d/&lt;devicename&gt;.conf</code> and save:</li>\n</ul>\n<pre><code>[program:devicename]\ndirectory=/home/pi\ncommand=python3 devicename.py\nuser=pi\ngroup_name=pi\nstdout_logfile=/home/pi/sciler_logs/logs_devicename.txt\nredirect_stderr=true\nautostart=true\nautorestart=true\n</code></pre>\n<ul>\n<li>run <code>sudo supervisorctl reread</code> and <code>sudo supervisorctl update</code></li>\n<li>run <code>sudo supervisorctl</code> to check status</li>\n</ul>\n<h2>License</h2>\n<p>This library is licensed with GNU GPL v3, see <code>LICENSE.md</code>.</p>\n\n          </div>"}, "last_serial": 6711471, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "19e2001f835cfcf3e484850db7bf2e2e", "sha256": "771f2039a07e5ee070ed50301024019a765a28663495e798131277734d74204c"}, "downloads": -1, "filename": "sciler-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "19e2001f835cfcf3e484850db7bf2e2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20687, "upload_time": "2020-01-24T12:54:04", "upload_time_iso_8601": "2020-01-24T12:54:04.996673Z", "url": "https://files.pythonhosted.org/packages/b9/1a/144e0625b51e008d4f98db10d1fdf826fe6cea4e3dc1c597f581b782788a/sciler-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "751ef82706ee16410948979632171af1", "sha256": "dbab3363aa173ac3852a74e4649ac39987414101f21d0dad944e116a013f1636"}, "downloads": -1, "filename": "sciler-0.2.0.tar.gz", "has_sig": false, "md5_digest": "751ef82706ee16410948979632171af1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7864, "upload_time": "2020-01-24T12:54:07", "upload_time_iso_8601": "2020-01-24T12:54:07.330784Z", "url": "https://files.pythonhosted.org/packages/3a/bd/7f5d8b5586b21e2b489bc353add2f0668aefa49c22b2ed88b3e0ee903734/sciler-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "da60855f9e01bc8fb1b0ab2c61283869", "sha256": "943c616883f195ad021f89cbc627030f68ff3923665c668b499fa45b9c922e60"}, "downloads": -1, "filename": "sciler-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "da60855f9e01bc8fb1b0ab2c61283869", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21096, "upload_time": "2020-01-29T15:50:17", "upload_time_iso_8601": "2020-01-29T15:50:17.028732Z", "url": "https://files.pythonhosted.org/packages/e7/ac/e8b62f79391cbdfb41fd72230f6ddeffd56ccc9d09fb75267d0c2dd138d9/sciler-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a1a09ec6cae54ca202c388b56442735", "sha256": "4e454dcac047d719f05a38dd6956d34a9e09e75df31b9ea50c07fa1fd87e8607"}, "downloads": -1, "filename": "sciler-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6a1a09ec6cae54ca202c388b56442735", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8515, "upload_time": "2020-01-29T15:50:18", "upload_time_iso_8601": "2020-01-29T15:50:18.834136Z", "url": "https://files.pythonhosted.org/packages/6e/1e/5cd3d93d9a71dab5353d535b8af4ef7f964169e08b2bf7f20303faee4c06/sciler-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0743e8660ebe0d6916d55a1550697637", "sha256": "97c5a7eb1fc5c297547e5efb6535387148b40494c085de08cefee2417e501f52"}, "downloads": -1, "filename": "sciler-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0743e8660ebe0d6916d55a1550697637", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21112, "upload_time": "2020-02-04T12:45:47", "upload_time_iso_8601": "2020-02-04T12:45:47.998660Z", "url": "https://files.pythonhosted.org/packages/47/d5/567ca09b42963cb44519ba1f265a6ee2480bcb076a436d2205e4c5824c03/sciler-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1715f9bfcd523530d1f30f1dbeb0c59f", "sha256": "a646fd6441281f32f85f6c9c714c0b5de091b07947495037a1d3cda9220524f2"}, "downloads": -1, "filename": "sciler-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1715f9bfcd523530d1f30f1dbeb0c59f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8529, "upload_time": "2020-02-04T12:45:49", "upload_time_iso_8601": "2020-02-04T12:45:49.441106Z", "url": "https://files.pythonhosted.org/packages/ec/b0/c1ca06fdcb8009dff4bd258b400f9c422fd0c538b7bc2726208ecbf7e9d4/sciler-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "80defd6bae501b76ca56eedb641b37cf", "sha256": "ef20fe55f1593327f131964ccc5c04b47b5fd7d3325fc88cfad0803f6cb592ce"}, "downloads": -1, "filename": "sciler-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "80defd6bae501b76ca56eedb641b37cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21211, "upload_time": "2020-02-27T14:57:54", "upload_time_iso_8601": "2020-02-27T14:57:54.730225Z", "url": "https://files.pythonhosted.org/packages/15/85/5fb18f7af9ba95ab2b6a13d96214c5d9c562efbceaff697d8a2088d1f827/sciler-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ddf78dd88626ea25ed619a148d0d2ef", "sha256": "264be592c1eca6be1f7694f0a2cfea1a4d0c458e528e648c9d770449bd1feb71"}, "downloads": -1, "filename": "sciler-0.2.3.tar.gz", "has_sig": false, "md5_digest": "8ddf78dd88626ea25ed619a148d0d2ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8655, "upload_time": "2020-02-27T14:57:56", "upload_time_iso_8601": "2020-02-27T14:57:56.043045Z", "url": "https://files.pythonhosted.org/packages/69/c7/3744e6e406e904b6d0bf671d93ab59f2d0232f47b4d1fe424425b312b476/sciler-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "80defd6bae501b76ca56eedb641b37cf", "sha256": "ef20fe55f1593327f131964ccc5c04b47b5fd7d3325fc88cfad0803f6cb592ce"}, "downloads": -1, "filename": "sciler-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "80defd6bae501b76ca56eedb641b37cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 21211, "upload_time": "2020-02-27T14:57:54", "upload_time_iso_8601": "2020-02-27T14:57:54.730225Z", "url": "https://files.pythonhosted.org/packages/15/85/5fb18f7af9ba95ab2b6a13d96214c5d9c562efbceaff697d8a2088d1f827/sciler-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ddf78dd88626ea25ed619a148d0d2ef", "sha256": "264be592c1eca6be1f7694f0a2cfea1a4d0c458e528e648c9d770449bd1feb71"}, "downloads": -1, "filename": "sciler-0.2.3.tar.gz", "has_sig": false, "md5_digest": "8ddf78dd88626ea25ed619a148d0d2ef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8655, "upload_time": "2020-02-27T14:57:56", "upload_time_iso_8601": "2020-02-27T14:57:56.043045Z", "url": "https://files.pythonhosted.org/packages/69/c7/3744e6e406e904b6d0bf671d93ab59f2d0232f47b4d1fe424425b312b476/sciler-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:22 2020"}