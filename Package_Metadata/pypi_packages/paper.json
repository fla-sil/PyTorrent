{"info": {"author": "R\u00e9my Sanchez", "author_email": "remy.sanchez@activkonnect.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Intended Audience :: Developers", "License :: Other/Proprietary License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Paper\n=====\n\n.. image:: https://travis-ci.org/ActivKonnect/paper.svg?branch=develop\n    :target: https://travis-ci.org/ActivKonnect/paper\n\nKeep generated fields in cache for your Django models.\n\nUsage\n~~~~~\n\nYou have two options: ``@paper`` will help you to create a calculated field that is stored in\nDjango's cache, and ``@cardboard`` will create a regular field in your model and update it in\ndatabase automatically.\n\n@paper\n------\n\nJust like the ``@property`` decorator, you just need to use the ``@paper`` decorator, that will\ntransform a method of your class into a cached property.\n\n.. code-block:: python\n\n   class ModelA(models.Model):\n       name = models.TextField()\n\n       @paper(1, [\n           ('testpaper.ModelB', lambda i: ModelA.objects.filter(children=i)),\n       ])\n       def count(self):\n           return ModelA.objects\\\n               .filter(pk=self.pk)\\\n               .annotate(count=Coalesce(Sum('children__count'), 0))\\\n               .values_list('count', flat=True)[0]\n\n\n   class ModelB(models.Model):\n       parent = models.ForeignKey('ModelA', related_name='children')\n       count = models.IntegerField()\n\n``@paper`` takes 2 arguments:\n\n- The method's version number, in case you want to change the format of what is returned. By\n  example, imagine you're returning a complex denormalized data structure. If at some point you\n  want to add some data in it, you can simply bump the version number and it will invalidate the\n  caches automatically.\n- A list of model/lister couples.\n  - The model is either a model class, either an 'app.Model' string\n  - The lister takes a single argument which is an instance of the updated model (here a ModelB\n  objet) and returns a list of affected objects to invalidate (here a queryset of ModelA objects).\n\nThe value will be cached using Django's default cache. Please note that this requires the cache to\nbe shared across all your web worker instances, otherwise invalidation won't have any the intended\neffect.\n\nInvalidation is based on Django signals, so it requires ``save()`` or ``delete()`` to be called in\norder to work correctly. Bulk/SQL operations won't be detected automatically.\n\n@cardboard\n----------\n\nUse is very similar to ``@paper``, the main differences being the absence of versioning and the fact\nthat result is going to be stored in the model itself instead of caching it.\n\n.. code-block:: python\n\n   class ModelA(models.Model):\n       name = models.TextField()\n\n       @cardboard(models.IntegerField(default=0), [\n           ('testpaper.ModelB', lambda i: ModelA.objects.filter(children=i)),\n       ])\n       def count(self):\n           return ModelA.objects\\\n               .filter(pk=self.pk)\\\n               .annotate(count=Coalesce(Sum('children__count'), 0))\\\n               .values_list('count', flat=True)[0]\n\n\n   class ModelB(models.Model):\n       parent = models.ForeignKey('ModelA', related_name='children')\n       count = models.IntegerField()\n\n``@cardboard`` takes two arguments:\n\n- The field that will be used to store results. You have to give it a sensible default value,\n  because no calculation will be made upon object creation. Calculation are only triggered by the\n  ``dependencies`` functions.\n- A list of dependencies, just like in ``@paper``.\n\nThe same remark goes for this technique being ``save()``/``delete()`` driven: bulk or SQL operations\nwon't trigger recalculation.\n\nLicence\n~~~~~~~\n\nThis software is licenced by ActivKonnect under the terms of the WTFPL.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ActivKonnect/paper", "keywords": null, "license": "WTFPL", "maintainer": null, "maintainer_email": null, "name": "paper", "package_url": "https://pypi.org/project/paper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/paper/", "project_urls": {"Homepage": "https://github.com/ActivKonnect/paper"}, "release_url": "https://pypi.org/project/paper/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Keep generated fields in cache for your Django models.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/ActivKonnect/paper\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ActivKonnect/paper.svg?branch=develop\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce7c5fb846b36ff733f62c4a56a2bd823c305f23/68747470733a2f2f7472617669732d63692e6f72672f41637469764b6f6e6e6563742f70617065722e7376673f6272616e63683d646576656c6f70\"></a>\n<p>Keep generated fields in cache for your Django models.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>You have two options: <tt>@paper</tt> will help you to create a calculated field that is stored in\nDjango\u2019s cache, and <tt>@cardboard</tt> will create a regular field in your model and update it in\ndatabase automatically.</p>\n<div id=\"id1\">\n<h3>@paper</h3>\n<p>Just like the <tt>@property</tt> decorator, you just need to use the <tt>@paper</tt> decorator, that will\ntransform a method of your class into a cached property.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ModelA</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@paper</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'testpaper.ModelB'</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">ModelA</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">children</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)),</span>\n    <span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ModelA</span><span class=\"o\">.</span><span class=\"n\">objects</span>\\\n            <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span>\\\n            <span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"n\">Coalesce</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"s1\">'children__count'</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\\\n            <span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ModelB</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'ModelA'</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'children'</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n</pre>\n<p><tt>@paper</tt> takes 2 arguments:</p>\n<ul>\n<li>The method\u2019s version number, in case you want to change the format of what is returned. By\nexample, imagine you\u2019re returning a complex denormalized data structure. If at some point you\nwant to add some data in it, you can simply bump the version number and it will invalidate the\ncaches automatically.</li>\n<li>A list of model/lister couples.\n- The model is either a model class, either an \u2018app.Model\u2019 string\n- The lister takes a single argument which is an instance of the updated model (here a ModelB\nobjet) and returns a list of affected objects to invalidate (here a queryset of ModelA objects).</li>\n</ul>\n<p>The value will be cached using Django\u2019s default cache. Please note that this requires the cache to\nbe shared across all your web worker instances, otherwise invalidation won\u2019t have any the intended\neffect.</p>\n<p>Invalidation is based on Django signals, so it requires <tt>save()</tt> or <tt>delete()</tt> to be called in\norder to work correctly. Bulk/SQL operations won\u2019t be detected automatically.</p>\n</div>\n<div id=\"cardboard\">\n<h3>@cardboard</h3>\n<p>Use is very similar to <tt>@paper</tt>, the main differences being the absence of versioning and the fact\nthat result is going to be stored in the model itself instead of caching it.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ModelA</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@cardboard</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s1\">'testpaper.ModelB'</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">ModelA</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">children</span><span class=\"o\">=</span><span class=\"n\">i</span><span class=\"p\">)),</span>\n    <span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ModelA</span><span class=\"o\">.</span><span class=\"n\">objects</span>\\\n            <span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span>\\\n            <span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"n\">Coalesce</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"s1\">'children__count'</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\\\n            <span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s1\">'count'</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ModelB</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'ModelA'</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s1\">'children'</span><span class=\"p\">)</span>\n    <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n</pre>\n<p><tt>@cardboard</tt> takes two arguments:</p>\n<ul>\n<li>The field that will be used to store results. You have to give it a sensible default value,\nbecause no calculation will be made upon object creation. Calculation are only triggered by the\n<tt>dependencies</tt> functions.</li>\n<li>A list of dependencies, just like in <tt>@paper</tt>.</li>\n</ul>\n<p>The same remark goes for this technique being <tt>save()</tt>/<tt>delete()</tt> driven: bulk or SQL operations\nwon\u2019t trigger recalculation.</p>\n</div>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>This software is licenced by ActivKonnect under the terms of the WTFPL.</p>\n</div>\n\n          </div>"}, "last_serial": 1720544, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3455d335553242bdefa8a3d036ab0ee5", "sha256": "0fb3b6d972d7dbffa4fa595bfa10b79c3c0d966e16340d9f5d87c05f546c2df7"}, "downloads": -1, "filename": "paper-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3455d335553242bdefa8a3d036ab0ee5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3191, "upload_time": "2015-08-01T19:26:57", "upload_time_iso_8601": "2015-08-01T19:26:57.897438Z", "url": "https://files.pythonhosted.org/packages/8c/9c/1127a692ebb74776026f33ac5bff343db9929f2019e4fa19c96c54315cf3/paper-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "037ed490d0699630613817c24fdec235", "sha256": "7ea5df169877ca5322cf911f0db0a5ed5edf36d923e4a877de283c57655f87d9"}, "downloads": -1, "filename": "paper-0.2.0.tar.gz", "has_sig": false, "md5_digest": "037ed490d0699630613817c24fdec235", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3879, "upload_time": "2015-09-13T09:35:38", "upload_time_iso_8601": "2015-09-13T09:35:38.833305Z", "url": "https://files.pythonhosted.org/packages/59/ee/f1ddb006ee51d722b8fd7760f7988a75425299419f21d32b285212efe105/paper-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "037ed490d0699630613817c24fdec235", "sha256": "7ea5df169877ca5322cf911f0db0a5ed5edf36d923e4a877de283c57655f87d9"}, "downloads": -1, "filename": "paper-0.2.0.tar.gz", "has_sig": false, "md5_digest": "037ed490d0699630613817c24fdec235", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3879, "upload_time": "2015-09-13T09:35:38", "upload_time_iso_8601": "2015-09-13T09:35:38.833305Z", "url": "https://files.pythonhosted.org/packages/59/ee/f1ddb006ee51d722b8fd7760f7988a75425299419f21d32b285212efe105/paper-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:48 2020"}