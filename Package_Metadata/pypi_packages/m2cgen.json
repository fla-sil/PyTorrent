{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# m2cgen\n\n[![Build Status](https://travis-ci.org/BayesWitnesses/m2cgen.svg?branch=master)](https://travis-ci.org/BayesWitnesses/m2cgen)\n[![Coverage Status](https://coveralls.io/repos/github/BayesWitnesses/m2cgen/badge.svg?branch=master)](https://coveralls.io/github/BayesWitnesses/m2cgen?branch=master)\n[![License: MIT](https://img.shields.io/github/license/BayesWitnesses/m2cgen.svg)](https://github.com/BayesWitnesses/m2cgen/blob/master/LICENSE)\n[![Python Versions](https://img.shields.io/pypi/pyversions/m2cgen.svg?logo=python&logoColor=white)](https://pypi.org/project/m2cgen)\n[![PyPI Version](https://img.shields.io/pypi/v/m2cgen.svg?logo=pypi&logoColor=white)](https://pypi.org/project/m2cgen)\n[![Downloads](https://pepy.tech/badge/m2cgen)](https://pepy.tech/project/m2cgen)\n\n**m2cgen** (Model 2 Code Generator) - is a lightweight library which provides an easy way to transpile trained statistical models into a native code (Python, C, Java, Go, JavaScript, Visual Basic, C#, PowerShell, R, PHP, Dart).\n\n* [Installation](#installation)\n* [Supported Languages](#supported-languages)\n* [Supported Models](#supported-models)\n* [Classification Output](#classification-output)\n* [Usage](#usage)\n* [CLI](#cli)\n* [FAQ](#faq)\n\n## Installation\nSupported Python version is >= **3.5**.\n```\npip install m2cgen\n```\n\n\n## Supported Languages\n\n- C\n- C#\n- Dart\n- Go\n- Java\n- JavaScript\n- PHP\n- PowerShell\n- Python\n- R\n- Visual Basic\n\n## Supported Models\n\n|  | Classification | Regression |\n| --- | --- | --- |\n| **Linear** | <ul><li>scikit-learn<ul><li>LogisticRegression</li><li>LogisticRegressionCV</li><li>PassiveAggressiveClassifier</li><li>Perceptron</li><li>RidgeClassifier</li><li>RidgeClassifierCV</li><li>SGDClassifier</li></ul></li><li>lightning<ul><li>AdaGradClassifier</li><li>CDClassifier</li><li>FistaClassifier</li><li>SAGAClassifier</li><li>SAGClassifier</li><li>SDCAClassifier</li><li>SGDClassifier</li></ul></li></ul> | <ul><li>scikit-learn<ul><li>ARDRegression</li><li>BayesianRidge</li><li>ElasticNet</li><li>ElasticNetCV</li><li>HuberRegressor</li><li>Lars</li><li>LarsCV</li><li>Lasso</li><li>LassoCV</li><li>LassoLars</li><li>LassoLarsCV</li><li>LassoLarsIC</li><li>LinearRegression</li><li>OrthogonalMatchingPursuit</li><li>OrthogonalMatchingPursuitCV</li><li>PassiveAggressiveRegressor</li><li>RANSACRegressor(only supported regression estimators can be used as a base estimator)</li><li>Ridge</li><li>RidgeCV</li><li>SGDRegressor</li><li>TheilSenRegressor</li></ul><li>StatsModels<ul><li>Generalized Least Squares (GLS)</li><li>Generalized Least Squares with AR Errors (GLSAR)</li><li>Ordinary Least Squares (OLS)</li><li>[Gaussian] Process Regression Using Maximum Likelihood-based Estimation (ProcessMLE)</li><li>Quantile Regression (QuantReg)</li><li>Weighted Least Squares (WLS)</li></ul><li>lightning<ul><li>AdaGradRegressor</li><li>CDRegressor</li><li>FistaRegressor</li><li>SAGARegressor</li><li>SAGRegressor</li><li>SDCARegressor</li></ul></li></ul> |\n| **SVM** | <ul><li>scikit-learn<ul><li>LinearSVC</li><li>NuSVC</li><li>SVC</li></ul></li><li>lightning<ul><li>KernelSVC</li><li>LinearSVC</li></ul></li></ul> | <ul><li>scikit-learn<ul><li>LinearSVR</li><li>NuSVR</li><li>SVR</li></ul></li><li>lightning<ul><li>LinearSVR</li></ul></li></ul> |\n| **Tree** | <ul><li>DecisionTreeClassifier</li><li>ExtraTreeClassifier</li></ul> | <ul><li>DecisionTreeRegressor</li><li>ExtraTreeRegressor</li></ul> |\n| **Random Forest** | <ul><li>ExtraTreesClassifier</li><li>LGBMClassifier(rf booster only)</li><li>RandomForestClassifier</li><li>XGBRFClassifier(binary only, multiclass is not supported yet)</li></ul> | <ul><li>ExtraTreesRegressor</li><li>LGBMRegressor(rf booster only)</li><li>RandomForestRegressor</li><li>XGBRFRegressor</li></ul> |\n| **Boosting** | <ul><li>LGBMClassifier(gbdt/dart/goss booster only)</li><li>XGBClassifier(gbtree/gblinear booster only)</li><ul> | <ul><li>LGBMRegressor(gbdt/dart/goss booster only)</li><li>XGBRegressor(gbtree/gblinear booster only)</li></ul> |\n\n## Classification Output\n### Linear / Linear SVM / Kernel SVM\n#### Binary\nScalar value; signed distance of the sample to the hyperplane for the second class.\n#### Multiclass\nVector value; signed distance of the sample to the hyperplane per each class.\n#### Comment\nThe output is consistent with the output of ```LinearClassifierMixin.decision_function```.\n\n### SVM\n#### Binary\nScalar value; signed distance of the sample to the hyperplane for the second class.\n#### Multiclass\nVector value; one-vs-one score for each class, shape (n_samples, n_classes * (n_classes-1) / 2).\n#### Comment\nThe output is consistent with the output of ```BaseSVC.decision_function``` when the `decision_function_shape` is set to `ovo`.\n\n### Tree / Random Forest / Boosting\n#### Binary\nVector value; class probabilities.\n#### Multiclass\nVector value; class probabilities.\n#### Comment\nThe output is consistent with the output of the `predict_proba` method of `DecisionTreeClassifier` / `ExtraTreeClassifier` / `ExtraTreesClassifier` / `RandomForestClassifier` / `XGBRFClassifier` / `XGBClassifier` / `LGBMClassifier`.\n\n## Usage\n\nHere's a simple example of how a linear model trained in Python environment can be represented in Java code:\n```python\nfrom sklearn.datasets import load_boston\nfrom sklearn import linear_model\nimport m2cgen as m2c\n\nboston = load_boston()\nX, y = boston.data, boston.target\n\nestimator = linear_model.LinearRegression()\nestimator.fit(X, y)\n\ncode = m2c.export_to_java(estimator)\n```\n\nGenerated Java code:\n```java\npublic class Model {\n\n    public static double score(double[] input) {\n        return (((((((((((((36.45948838508965) + ((input[0]) * (-0.10801135783679647))) + ((input[1]) * (0.04642045836688297))) + ((input[2]) * (0.020558626367073608))) + ((input[3]) * (2.6867338193449406))) + ((input[4]) * (-17.76661122830004))) + ((input[5]) * (3.8098652068092163))) + ((input[6]) * (0.0006922246403454562))) + ((input[7]) * (-1.475566845600257))) + ((input[8]) * (0.30604947898516943))) + ((input[9]) * (-0.012334593916574394))) + ((input[10]) * (-0.9527472317072884))) + ((input[11]) * (0.009311683273794044))) + ((input[12]) * (-0.5247583778554867));\n    }\n}\n```\n\n**You can find more examples of generated code for different models/languages [here](https://github.com/BayesWitnesses/m2cgen/tree/master/generated_code_examples).**\n\n## CLI\n\n`m2cgen` can be used as a CLI tool to generate code using serialized model objects (pickle protocol):\n```\n$ m2cgen <pickle_file> --language <language> [--indent <indent>] [--function_name <function_name>]\n         [--class_name <class_name>] [--module_name <module_name>] [--package_name <package_name>]\n         [--namespace <namespace>] [--recursion-limit <recursion_limit>]\n```\nDon't forget that for unpickling serialized model objects their classes must be defined in the top level of an importable module in the unpickling environment.\n\nPiping is also supported:\n```\n$ cat <pickle_file> | m2cgen --language <language>\n```\n\n## FAQ\n**Q: Generation fails with `RuntimeError: maximum recursion depth exceeded` error.**\n\nA: If this error occurs while generating code using an ensemble model, try to reduce the number of trained estimators within that model. Alternatively you can increase the maximum recursion depth with `sys.setrecursionlimit(<new_depth>)`.\n\n**Q: Generation fails with `ImportError: No module named <module_name_here>` error while transpiling model from a serialized model object.**\n\nA: This error indicates that pickle protocol cannot deserialize model object. For unpickling serialized model objects, it is required that their classes must be defined in the top level of an importable module in the unpickling environment. So installation of package which provided model's class definition should solve the problem.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BayesWitnesses/m2cgen", "keywords": "sklearn ml code-generation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "m2cgen", "package_url": "https://pypi.org/project/m2cgen/", "platform": "", "project_url": "https://pypi.org/project/m2cgen/", "project_urls": {"Homepage": "https://github.com/BayesWitnesses/m2cgen"}, "release_url": "https://pypi.org/project/m2cgen/0.7.0/", "requires_dist": ["numpy"], "requires_python": ">=3.5", "summary": "Code-generation for various ML models into native code.", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>m2cgen</h1>\n<p><a href=\"https://travis-ci.org/BayesWitnesses/m2cgen\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7685e2e5c0ccff404b11de8c316eb4671175766a/68747470733a2f2f7472617669732d63692e6f72672f42617965735769746e65737365732f6d326367656e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/BayesWitnesses/m2cgen?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81a9d0be73f1bb7dff9b9f8cf9a5a2ee8a2518f8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f42617965735769746e65737365732f6d326367656e2f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/BayesWitnesses/m2cgen/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7cfe5dd6ce74ec875afc8ebf217625d818e99aa2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f42617965735769746e65737365732f6d326367656e2e737667\"></a>\n<a href=\"https://pypi.org/project/m2cgen\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f2a036ceb161f47f16d409095b4dd17cb976a06/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d326367656e2e7376673f6c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pypi.org/project/m2cgen\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91a466584aae9ceb602721d7cec614a04cb3b7f2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d326367656e2e7376673f6c6f676f3d70797069266c6f676f436f6c6f723d7768697465\"></a>\n<a href=\"https://pepy.tech/project/m2cgen\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f25b97b19f5ff7a935a614ce985aaf2ebfb5c60f/68747470733a2f2f706570792e746563682f62616467652f6d326367656e\"></a></p>\n<p><strong>m2cgen</strong> (Model 2 Code Generator) - is a lightweight library which provides an easy way to transpile trained statistical models into a native code (Python, C, Java, Go, JavaScript, Visual Basic, C#, PowerShell, R, PHP, Dart).</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#supported-languages\" rel=\"nofollow\">Supported Languages</a></li>\n<li><a href=\"#supported-models\" rel=\"nofollow\">Supported Models</a></li>\n<li><a href=\"#classification-output\" rel=\"nofollow\">Classification Output</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#cli\" rel=\"nofollow\">CLI</a></li>\n<li><a href=\"#faq\" rel=\"nofollow\">FAQ</a></li>\n</ul>\n<h2>Installation</h2>\n<p>Supported Python version is &gt;= <strong>3.5</strong>.</p>\n<pre><code>pip install m2cgen\n</code></pre>\n<h2>Supported Languages</h2>\n<ul>\n<li>C</li>\n<li>C#</li>\n<li>Dart</li>\n<li>Go</li>\n<li>Java</li>\n<li>JavaScript</li>\n<li>PHP</li>\n<li>PowerShell</li>\n<li>Python</li>\n<li>R</li>\n<li>Visual Basic</li>\n</ul>\n<h2>Supported Models</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Classification</th>\n<th>Regression</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Linear</strong></td>\n<td><ul><li>scikit-learn<ul><li>LogisticRegression</li><li>LogisticRegressionCV</li><li>PassiveAggressiveClassifier</li><li>Perceptron</li><li>RidgeClassifier</li><li>RidgeClassifierCV</li><li>SGDClassifier</li></ul></li><li>lightning<ul><li>AdaGradClassifier</li><li>CDClassifier</li><li>FistaClassifier</li><li>SAGAClassifier</li><li>SAGClassifier</li><li>SDCAClassifier</li><li>SGDClassifier</li></ul></li></ul></td>\n<td><ul><li>scikit-learn<ul><li>ARDRegression</li><li>BayesianRidge</li><li>ElasticNet</li><li>ElasticNetCV</li><li>HuberRegressor</li><li>Lars</li><li>LarsCV</li><li>Lasso</li><li>LassoCV</li><li>LassoLars</li><li>LassoLarsCV</li><li>LassoLarsIC</li><li>LinearRegression</li><li>OrthogonalMatchingPursuit</li><li>OrthogonalMatchingPursuitCV</li><li>PassiveAggressiveRegressor</li><li>RANSACRegressor(only supported regression estimators can be used as a base estimator)</li><li>Ridge</li><li>RidgeCV</li><li>SGDRegressor</li><li>TheilSenRegressor</li></ul></li><li>StatsModels<ul><li>Generalized Least Squares (GLS)</li><li>Generalized Least Squares with AR Errors (GLSAR)</li><li>Ordinary Least Squares (OLS)</li><li>[Gaussian] Process Regression Using Maximum Likelihood-based Estimation (ProcessMLE)</li><li>Quantile Regression (QuantReg)</li><li>Weighted Least Squares (WLS)</li></ul></li><li>lightning<ul><li>AdaGradRegressor</li><li>CDRegressor</li><li>FistaRegressor</li><li>SAGARegressor</li><li>SAGRegressor</li><li>SDCARegressor</li></ul></li></ul></td>\n</tr>\n<tr>\n<td><strong>SVM</strong></td>\n<td><ul><li>scikit-learn<ul><li>LinearSVC</li><li>NuSVC</li><li>SVC</li></ul></li><li>lightning<ul><li>KernelSVC</li><li>LinearSVC</li></ul></li></ul></td>\n<td><ul><li>scikit-learn<ul><li>LinearSVR</li><li>NuSVR</li><li>SVR</li></ul></li><li>lightning<ul><li>LinearSVR</li></ul></li></ul></td>\n</tr>\n<tr>\n<td><strong>Tree</strong></td>\n<td><ul><li>DecisionTreeClassifier</li><li>ExtraTreeClassifier</li></ul></td>\n<td><ul><li>DecisionTreeRegressor</li><li>ExtraTreeRegressor</li></ul></td>\n</tr>\n<tr>\n<td><strong>Random Forest</strong></td>\n<td><ul><li>ExtraTreesClassifier</li><li>LGBMClassifier(rf booster only)</li><li>RandomForestClassifier</li><li>XGBRFClassifier(binary only, multiclass is not supported yet)</li></ul></td>\n<td><ul><li>ExtraTreesRegressor</li><li>LGBMRegressor(rf booster only)</li><li>RandomForestRegressor</li><li>XGBRFRegressor</li></ul></td>\n</tr>\n<tr>\n<td><strong>Boosting</strong></td>\n<td><ul><li>LGBMClassifier(gbdt/dart/goss booster only)</li><li>XGBClassifier(gbtree/gblinear booster only)</li><ul></ul></ul></td>\n<td><ul><li>LGBMRegressor(gbdt/dart/goss booster only)</li><li>XGBRegressor(gbtree/gblinear booster only)</li></ul></td>\n</tr></tbody></table>\n<h2>Classification Output</h2>\n<h3>Linear / Linear SVM / Kernel SVM</h3>\n<h4>Binary</h4>\n<p>Scalar value; signed distance of the sample to the hyperplane for the second class.</p>\n<h4>Multiclass</h4>\n<p>Vector value; signed distance of the sample to the hyperplane per each class.</p>\n<h4>Comment</h4>\n<p>The output is consistent with the output of <code>LinearClassifierMixin.decision_function</code>.</p>\n<h3>SVM</h3>\n<h4>Binary</h4>\n<p>Scalar value; signed distance of the sample to the hyperplane for the second class.</p>\n<h4>Multiclass</h4>\n<p>Vector value; one-vs-one score for each class, shape (n_samples, n_classes * (n_classes-1) / 2).</p>\n<h4>Comment</h4>\n<p>The output is consistent with the output of <code>BaseSVC.decision_function</code> when the <code>decision_function_shape</code> is set to <code>ovo</code>.</p>\n<h3>Tree / Random Forest / Boosting</h3>\n<h4>Binary</h4>\n<p>Vector value; class probabilities.</p>\n<h4>Multiclass</h4>\n<p>Vector value; class probabilities.</p>\n<h4>Comment</h4>\n<p>The output is consistent with the output of the <code>predict_proba</code> method of <code>DecisionTreeClassifier</code> / <code>ExtraTreeClassifier</code> / <code>ExtraTreesClassifier</code> / <code>RandomForestClassifier</code> / <code>XGBRFClassifier</code> / <code>XGBClassifier</code> / <code>LGBMClassifier</code>.</p>\n<h2>Usage</h2>\n<p>Here's a simple example of how a linear model trained in Python environment can be represented in Java code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_boston</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n<span class=\"kn\">import</span> <span class=\"nn\">m2cgen</span> <span class=\"k\">as</span> <span class=\"nn\">m2c</span>\n\n<span class=\"n\">boston</span> <span class=\"o\">=</span> <span class=\"n\">load_boston</span><span class=\"p\">()</span>\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">m2c</span><span class=\"o\">.</span><span class=\"n\">export_to_java</span><span class=\"p\">(</span><span class=\"n\">estimator</span><span class=\"p\">)</span>\n</pre>\n<p>Generated Java code:</p>\n<pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Model</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">double</span> <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"o\">[]</span> <span class=\"n\">input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(((((((((((((</span><span class=\"mf\">36.45948838508965</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.10801135783679647</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">0.04642045836688297</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">0.020558626367073608</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">2.6867338193449406</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">17.76661122830004</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">3.8098652068092163</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">0.0006922246403454562</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">1.475566845600257</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">0.30604947898516943</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.012334593916574394</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.9527472317072884</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">11</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mf\">0.009311683273794044</span><span class=\"p\">)))</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"n\">input</span><span class=\"o\">[</span><span class=\"mi\">12</span><span class=\"o\">]</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.5247583778554867</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>You can find more examples of generated code for different models/languages <a href=\"https://github.com/BayesWitnesses/m2cgen/tree/master/generated_code_examples\" rel=\"nofollow\">here</a>.</strong></p>\n<h2>CLI</h2>\n<p><code>m2cgen</code> can be used as a CLI tool to generate code using serialized model objects (pickle protocol):</p>\n<pre><code>$ m2cgen &lt;pickle_file&gt; --language &lt;language&gt; [--indent &lt;indent&gt;] [--function_name &lt;function_name&gt;]\n         [--class_name &lt;class_name&gt;] [--module_name &lt;module_name&gt;] [--package_name &lt;package_name&gt;]\n         [--namespace &lt;namespace&gt;] [--recursion-limit &lt;recursion_limit&gt;]\n</code></pre>\n<p>Don't forget that for unpickling serialized model objects their classes must be defined in the top level of an importable module in the unpickling environment.</p>\n<p>Piping is also supported:</p>\n<pre><code>$ cat &lt;pickle_file&gt; | m2cgen --language &lt;language&gt;\n</code></pre>\n<h2>FAQ</h2>\n<p><strong>Q: Generation fails with <code>RuntimeError: maximum recursion depth exceeded</code> error.</strong></p>\n<p>A: If this error occurs while generating code using an ensemble model, try to reduce the number of trained estimators within that model. Alternatively you can increase the maximum recursion depth with <code>sys.setrecursionlimit(&lt;new_depth&gt;)</code>.</p>\n<p><strong>Q: Generation fails with <code>ImportError: No module named &lt;module_name_here&gt;</code> error while transpiling model from a serialized model object.</strong></p>\n<p>A: This error indicates that pickle protocol cannot deserialize model object. For unpickling serialized model objects, it is required that their classes must be defined in the top level of an importable module in the unpickling environment. So installation of package which provided model's class definition should solve the problem.</p>\n\n          </div>"}, "last_serial": 6971349, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "67f1db8ef0e2d556f69c2178aacf6fe1", "sha256": "f173aa41c5b767c84203182935d76670a11209b3a29d374573be8ae51c96927b"}, "downloads": -1, "filename": "m2cgen-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "67f1db8ef0e2d556f69c2178aacf6fe1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 25259, "upload_time": "2019-02-12T23:35:26", "upload_time_iso_8601": "2019-02-12T23:35:26.035928Z", "url": "https://files.pythonhosted.org/packages/23/96/47f93d4b43b913bc1f776bbbc276990760ff0ddaff419b6c9cbd30978f7e/m2cgen-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "424123c2a1bfa8faa294fe10e5940800", "sha256": "1ee3f4d9ff7d4d1b8f1cc418f8257fabca339346e27b316d53b840d582279d52"}, "downloads": -1, "filename": "m2cgen-0.1.0.tar.gz", "has_sig": false, "md5_digest": "424123c2a1bfa8faa294fe10e5940800", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16831, "upload_time": "2019-02-12T23:35:28", "upload_time_iso_8601": "2019-02-12T23:35:28.229254Z", "url": "https://files.pythonhosted.org/packages/ef/96/9fa889bdd491b0ade7ef601c21f9ea4bd121f0649dc8cf0433f369aeb5bf/m2cgen-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8d9afd0cb92e3f67c246eccf503eeacd", "sha256": "6e90917a9ca355da0430f776ce2ec6d86c61d3d90e8d0b6f446c4323010b0d84"}, "downloads": -1, "filename": "m2cgen-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "8d9afd0cb92e3f67c246eccf503eeacd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 25341, "upload_time": "2019-03-05T04:42:11", "upload_time_iso_8601": "2019-03-05T04:42:11.541131Z", "url": "https://files.pythonhosted.org/packages/4b/48/38123b8ce0a0040e3ebdea032eb25886a9ad814829f2d665241aeeafb41f/m2cgen-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56b096c44cee98190d446ecb7d42c79e", "sha256": "6ae87daec8c70c6680e7b76c7dfe7f124459d740f49351a9564bcbad9d6af72e"}, "downloads": -1, "filename": "m2cgen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "56b096c44cee98190d446ecb7d42c79e", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16989, "upload_time": "2019-03-05T04:42:13", "upload_time_iso_8601": "2019-03-05T04:42:13.123047Z", "url": "https://files.pythonhosted.org/packages/b5/5c/ef3e1b205e3463ffc1dd00b9e12428855d2f595e06e260bb67c9d2b0a1a5/m2cgen-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ac92ce4a2133e88b1ff572e79136b442", "sha256": "42a1d4ad439ed4cc8f67aa8f88b60e711b139116fd23b1dc658b3c5479296e41"}, "downloads": -1, "filename": "m2cgen-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ac92ce4a2133e88b1ff572e79136b442", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 27261, "upload_time": "2019-03-22T21:40:58", "upload_time_iso_8601": "2019-03-22T21:40:58.396959Z", "url": "https://files.pythonhosted.org/packages/da/05/ca8607a1a2d7320ec301fc8d60f1ea25956e22cba03e5e5b497c5009ec00/m2cgen-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecb978dcf9d835964e68b5c6978c066f", "sha256": "73029ff46baefb96b766932444adeca7de992cf6702a1a83a02373d85da0236c"}, "downloads": -1, "filename": "m2cgen-0.2.0.tar.gz", "has_sig": false, "md5_digest": "ecb978dcf9d835964e68b5c6978c066f", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 18128, "upload_time": "2019-03-22T21:40:59", "upload_time_iso_8601": "2019-03-22T21:40:59.705353Z", "url": "https://files.pythonhosted.org/packages/92/0d/e81a903f4a406e33e75dd92377046ef81d740c6b466887c440ecb1a7f242/m2cgen-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "855bef63532a2716038728ed0a088f20", "sha256": "639b0df78d6eb2e2c95df84b701c65cf5d56d32cfc2244b13d169c5a15033346"}, "downloads": -1, "filename": "m2cgen-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "855bef63532a2716038728ed0a088f20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 27388, "upload_time": "2019-04-17T18:02:31", "upload_time_iso_8601": "2019-04-17T18:02:31.938986Z", "url": "https://files.pythonhosted.org/packages/c1/43/bede30bac17ee0651d66f189726cfaa72a92758ef2266b847eccaf1818ae/m2cgen-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96cdeb246db57e368b4a02aa828ea063", "sha256": "90323222082fb139891a3f0735090274daadb4e38e3113a242f064a085330dc6"}, "downloads": -1, "filename": "m2cgen-0.2.1.tar.gz", "has_sig": false, "md5_digest": "96cdeb246db57e368b4a02aa828ea063", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 17725, "upload_time": "2019-04-17T18:02:33", "upload_time_iso_8601": "2019-04-17T18:02:33.193835Z", "url": "https://files.pythonhosted.org/packages/d8/7e/309b4d9f9218a126b544612602b72e1ac313a91a5aba75182d34af305b23/m2cgen-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "876447a4f938b6a3cef810118a9a10e6", "sha256": "3f3826c21d6091a57834236504835447a430338b7a57170551b8e9094be092d7"}, "downloads": -1, "filename": "m2cgen-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "876447a4f938b6a3cef810118a9a10e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 29231, "upload_time": "2019-05-21T15:56:54", "upload_time_iso_8601": "2019-05-21T15:56:54.622472Z", "url": "https://files.pythonhosted.org/packages/f0/85/f1ca625f28016f2254acda0abea2371bc318318577542ef38bc2ca72d3af/m2cgen-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "074726cf52977d0c676a9fb7dd83d26a", "sha256": "8a0f75b9b179d5cf67c7c1ffa4012dfb091334cc42f4b7c3684525c325b70ca9"}, "downloads": -1, "filename": "m2cgen-0.3.0.tar.gz", "has_sig": false, "md5_digest": "074726cf52977d0c676a9fb7dd83d26a", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 19761, "upload_time": "2019-05-21T15:56:56", "upload_time_iso_8601": "2019-05-21T15:56:56.026359Z", "url": "https://files.pythonhosted.org/packages/3b/a1/56c6b051ab3c23c7372fdf5cbb5a465f37d74d4132669aaf277ab9e62002/m2cgen-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e5eb1488c009d94cd29ff22a28a23f72", "sha256": "f8a5dca1bbd12e988b3e442b8df4024626a0487499c3ea9503747f62b1c6fc63"}, "downloads": -1, "filename": "m2cgen-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e5eb1488c009d94cd29ff22a28a23f72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 29248, "upload_time": "2019-08-15T15:56:01", "upload_time_iso_8601": "2019-08-15T15:56:01.615603Z", "url": "https://files.pythonhosted.org/packages/f6/1a/b82307097e556593d5e355204d727f6b4893cadb7031c17257a76d816344/m2cgen-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c814c805f5891e5604297337d9e0f4", "sha256": "5ec9e1987c211c5dc6fffaecf2116ff28543238dbff0cfcd42800eb5ba4f3d5c"}, "downloads": -1, "filename": "m2cgen-0.3.1.tar.gz", "has_sig": false, "md5_digest": "04c814c805f5891e5604297337d9e0f4", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 20004, "upload_time": "2019-08-15T15:56:03", "upload_time_iso_8601": "2019-08-15T15:56:03.842031Z", "url": "https://files.pythonhosted.org/packages/d2/6f/2b5b5dfd28cb43403af0d863c28452ce1ec7a7b3f191aa7b54f5c0888978/m2cgen-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "177fdd80d84446df0604f755d3672882", "sha256": "3b36c6ce230ba2ed0d5d36e21ddac3161aa35f56e395861ba6b706cc04c9dd16"}, "downloads": -1, "filename": "m2cgen-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "177fdd80d84446df0604f755d3672882", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 31179, "upload_time": "2019-09-28T22:45:43", "upload_time_iso_8601": "2019-09-28T22:45:43.345569Z", "url": "https://files.pythonhosted.org/packages/7c/b3/45ac272dfeef6cdaa720bded9359cf2cedabc013533f095539ba3a213ae1/m2cgen-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53e3906f64cb1eab371772b8bc436575", "sha256": "58745f1cb5eb0fc13f9acc7be0bfdc96c8090988389d69142c38be7be68c4ddd"}, "downloads": -1, "filename": "m2cgen-0.4.0.tar.gz", "has_sig": false, "md5_digest": "53e3906f64cb1eab371772b8bc436575", "packagetype": "sdist", "python_version": "source", "requires_python": "!=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 20398, "upload_time": "2019-09-28T22:45:44", "upload_time_iso_8601": "2019-09-28T22:45:44.612092Z", "url": "https://files.pythonhosted.org/packages/26/36/505258047d12cb96e3b71f49c754b6490e5c06c870f77a026f81ec905ace/m2cgen-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "68c5fd8b232d4a0261a49495b0d0e33f", "sha256": "2988e24922ada85af741a4fce77a1333451c967d61505a7655617d4cc96d930f"}, "downloads": -1, "filename": "m2cgen-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "68c5fd8b232d4a0261a49495b0d0e33f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 39217, "upload_time": "2019-12-01T18:23:33", "upload_time_iso_8601": "2019-12-01T18:23:33.233941Z", "url": "https://files.pythonhosted.org/packages/ed/6f/f4ab71cf8b6add55ab79ba53de06dd73bda01ea72fad3fd960c1e0dbd5eb/m2cgen-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "559d96d0ccba68f1b69ce97f46d46414", "sha256": "d75e0c01a46e3b1ff46d96a5da3db19bb15d3a14b9c0cf292619c29ea182faba"}, "downloads": -1, "filename": "m2cgen-0.5.0.tar.gz", "has_sig": false, "md5_digest": "559d96d0ccba68f1b69ce97f46d46414", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 25614, "upload_time": "2019-12-01T18:23:35", "upload_time_iso_8601": "2019-12-01T18:23:35.138368Z", "url": "https://files.pythonhosted.org/packages/6b/72/03b6b0c2e4debdfc8723d78a1df5590b93e1126a852f95e6a53cbc6b7691/m2cgen-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "89be9985d35bce7a5745ae631e659030", "sha256": "6bb7a2892abe185d2fbc0c2c2fef11f4612dfa1224965b7c443db2aa26e9d584"}, "downloads": -1, "filename": "m2cgen-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "89be9985d35bce7a5745ae631e659030", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 47187, "upload_time": "2020-02-17T03:52:19", "upload_time_iso_8601": "2020-02-17T03:52:19.275161Z", "url": "https://files.pythonhosted.org/packages/b6/e6/d784c7fe408467ab38692f5456dbd2926d366c3afcb9760eadec34ede881/m2cgen-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ad891a77e53bcbb64958b7f7becfb7b", "sha256": "43fdc396c04acc18b4713e52d161171441bbd59fbc30d9924bc158c05df97890"}, "downloads": -1, "filename": "m2cgen-0.6.0.tar.gz", "has_sig": false, "md5_digest": "7ad891a77e53bcbb64958b7f7becfb7b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26835, "upload_time": "2020-02-17T03:52:21", "upload_time_iso_8601": "2020-02-17T03:52:21.238221Z", "url": "https://files.pythonhosted.org/packages/58/f8/496c6d5d0d754fd6c7680674414b60e4a2dffb47f2ab584fdfb273ce9df3/m2cgen-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "b1154108061480941c8201c2dbcce761", "sha256": "8d0060ed15da825ba280439e41fd9b1565ae420f8cfd17ae8770cf2023db2ba3"}, "downloads": -1, "filename": "m2cgen-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b1154108061480941c8201c2dbcce761", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 51800, "upload_time": "2020-04-07T16:46:48", "upload_time_iso_8601": "2020-04-07T16:46:48.526122Z", "url": "https://files.pythonhosted.org/packages/97/1d/152be6a58ecd68cbb8d1eaf90d1ec2c58451b2e88a419113348f407f9354/m2cgen-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "371d096c42aef7381ca1241bbee7eb6c", "sha256": "22d3f05251c7fce9d0c9d01cb430f780b86b7b2a3430ae706b7ed0c372998b54"}, "downloads": -1, "filename": "m2cgen-0.7.0.tar.gz", "has_sig": false, "md5_digest": "371d096c42aef7381ca1241bbee7eb6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 31946, "upload_time": "2020-04-07T16:46:49", "upload_time_iso_8601": "2020-04-07T16:46:49.896843Z", "url": "https://files.pythonhosted.org/packages/5e/fa/03418cce9864ae11568ef9ad3f426cf72cfec907ed6f09bdc87608562340/m2cgen-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1154108061480941c8201c2dbcce761", "sha256": "8d0060ed15da825ba280439e41fd9b1565ae420f8cfd17ae8770cf2023db2ba3"}, "downloads": -1, "filename": "m2cgen-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b1154108061480941c8201c2dbcce761", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 51800, "upload_time": "2020-04-07T16:46:48", "upload_time_iso_8601": "2020-04-07T16:46:48.526122Z", "url": "https://files.pythonhosted.org/packages/97/1d/152be6a58ecd68cbb8d1eaf90d1ec2c58451b2e88a419113348f407f9354/m2cgen-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "371d096c42aef7381ca1241bbee7eb6c", "sha256": "22d3f05251c7fce9d0c9d01cb430f780b86b7b2a3430ae706b7ed0c372998b54"}, "downloads": -1, "filename": "m2cgen-0.7.0.tar.gz", "has_sig": false, "md5_digest": "371d096c42aef7381ca1241bbee7eb6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 31946, "upload_time": "2020-04-07T16:46:49", "upload_time_iso_8601": "2020-04-07T16:46:49.896843Z", "url": "https://files.pythonhosted.org/packages/5e/fa/03418cce9864ae11568ef9ad3f426cf72cfec907ed6f09bdc87608562340/m2cgen-0.7.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:34 2020"}