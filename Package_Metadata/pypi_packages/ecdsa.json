{"info": {"author": "Brian Warner", "author_email": "warner@lothar.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Pure-Python ECDSA\n\n[![build status](https://travis-ci.org/warner/python-ecdsa.png)](http://travis-ci.org/warner/python-ecdsa)\n[![Coverage Status](https://coveralls.io/repos/warner/python-ecdsa/badge.svg)](https://coveralls.io/r/warner/python-ecdsa)\n[![condition coverage](https://img.shields.io/badge/condition%20coverage-81%25-yellow)](https://travis-ci.org/warner/python-ecdsa/jobs/626479178#L776)\n[![Latest Version](https://img.shields.io/pypi/v/ecdsa.svg?style=flat)](https://pypi.python.org/pypi/ecdsa/)\n\n\nThis is an easy-to-use implementation of ECDSA cryptography (Elliptic Curve\nDigital Signature Algorithm), implemented purely in Python, released under\nthe MIT license. With this library, you can quickly create keypairs (signing\nkey and verifying key), sign messages, and verify the signatures. The keys\nand signatures are very short, making them easy to handle and incorporate\ninto other protocols.\n\n## Features\n\nThis library provides key generation, signing, and verifying, for five\npopular NIST \"Suite B\" GF(p) (_prime field_) curves, with key lengths of 192,\n224, 256, 384, and 521 bits. The \"short names\" for these curves, as known by\nthe OpenSSL tool (`openssl ecparam -list_curves`), are: `prime192v1`,\n`secp224r1`, `prime256v1`, `secp384r1`, and `secp521r1`. It includes the\n256-bit curve `secp256k1` used by Bitcoin. There is also support for the\nregular (non-twisted) variants of Brainpool curves from 160 to 512 bits. The\n\"short names\" of those curves are: `brainpoolP160r1`, `brainpoolP192r1`,\n`brainpoolP224r1`, `brainpoolP256r1`, `brainpoolP320r1`, `brainpoolP384r1`,\n`brainpoolP512r1`.\nNo other curves are included, but it is not too hard to add support for more\ncurves over prime fields.\n\n## Dependencies\n\nThis library uses only Python and the 'six' package. It is compatible with\nPython 2.6, 2.7 and 3.3+. It also supports execution on the alternative\nimplementations like pypy and pypy3.\n\nIf `gmpy2` or `gmpy` is installed, they will be used for faster arithmetic.\nEither of them can be installed after this library is installed,\n`python-ecdsa` will detect their presence on start-up and use them\nautomatically.\n\nTo run the OpenSSL compatibility tests, the 'openssl' tool must be in your\n`PATH`. This release has been tested successfully against OpenSSL 0.9.8o,\n1.0.0a, 1.0.2f and 1.1.1d (among others).\n\n\n## Installation\n\nThis library is available on PyPI, it's recommended to install it using `pip`:\n\n```\npip install ecdsa\n```\n\nIn case higher performance is wanted and using native code is not a problem,\nit's possible to specify installation together with `gmpy2`:\n\n```\npip install ecdsa[gmpy2]\n```\n\nor (slower, legacy option):\n```\npip install ecdsa[gmpy]\n```\n\n## Speed\n\nThe following table shows how long this library takes to generate keypairs\n(`keygen`), to sign data (`sign`), and to verify those signatures (`verify`).\nAll those values are in seconds.\nFor convenience, the inverses of those values are also provided:\nhow many keys per second can be generated (`keygen/s`), how many signatures\ncan be made per second (`sign/s`) and how many signatures can be verified\nper second (`verify/s`). The size of raw signature (generally the smallest\nway a signature can be encoded) is also provided in the `siglen` column.\nUse `tox -e speed` to generate this table on your own computer.\nOn an Intel Core i7 4790K @ 4.0GHz I'm getting the following performance:\n\n```\n                  siglen    keygen   keygen/s      sign     sign/s    verify   verify/s\n        NIST192p:     48   0.00035s   2893.02   0.00038s   2620.53   0.00069s   1458.92\n        NIST224p:     56   0.00043s   2307.11   0.00048s   2092.00   0.00088s   1131.33\n        NIST256p:     64   0.00056s   1793.70   0.00061s   1639.87   0.00113s    883.79\n        NIST384p:     96   0.00116s    864.33   0.00124s    806.29   0.00233s    429.87\n        NIST521p:    132   0.00221s    452.16   0.00234s    427.31   0.00460s    217.19\n       SECP256k1:     64   0.00056s   1772.65   0.00061s   1628.73   0.00110s    912.13\n BRAINPOOLP160r1:     40   0.00026s   3801.86   0.00029s   3401.11   0.00052s   1930.47\n BRAINPOOLP192r1:     48   0.00034s   2925.73   0.00038s   2634.34   0.00070s   1438.06\n BRAINPOOLP224r1:     56   0.00044s   2287.98   0.00048s   2083.87   0.00088s   1137.52\n BRAINPOOLP256r1:     64   0.00056s   1774.11   0.00061s   1628.25   0.00112s    890.71\n BRAINPOOLP320r1:     80   0.00081s   1238.18   0.00087s   1146.71   0.00151s    661.95\n BRAINPOOLP384r1:     96   0.00117s    855.47   0.00124s    804.56   0.00241s    414.83\n BRAINPOOLP512r1:    128   0.00223s    447.99   0.00234s    427.49   0.00437s    229.09\n\n                       ecdh     ecdh/s\n        NIST192p:   0.00110s    910.70\n        NIST224p:   0.00143s    701.17\n        NIST256p:   0.00178s    560.44\n        NIST384p:   0.00383s    261.03\n        NIST521p:   0.00745s    134.23\n       SECP256k1:   0.00168s    596.23\n BRAINPOOLP160r1:   0.00085s   1174.02\n BRAINPOOLP192r1:   0.00113s    883.47\n BRAINPOOLP224r1:   0.00145s    687.82\n BRAINPOOLP256r1:   0.00195s    514.03\n BRAINPOOLP320r1:   0.00277s    360.80\n BRAINPOOLP384r1:   0.00412s    242.58\n BRAINPOOLP512r1:   0.00787s    127.12\n```\n\nTo test performance with `gmpy2` loaded, use `tox -e speedgmpy2`.\nOn the same machine I'm getting the following performance with `gmpy2`:\n```\n                  siglen    keygen   keygen/s      sign     sign/s    verify   verify/s\n        NIST192p:     48   0.00017s   5945.50   0.00018s   5544.66   0.00033s   3002.54\n        NIST224p:     56   0.00021s   4742.14   0.00022s   4463.52   0.00044s   2248.59\n        NIST256p:     64   0.00024s   4155.73   0.00025s   3994.28   0.00047s   2105.34\n        NIST384p:     96   0.00041s   2415.06   0.00043s   2316.41   0.00085s   1177.18\n        NIST521p:    132   0.00072s   1391.14   0.00074s   1359.63   0.00140s    716.31\n       SECP256k1:     64   0.00024s   4216.50   0.00025s   3994.52   0.00047s   2120.57\n BRAINPOOLP160r1:     40   0.00014s   7038.99   0.00015s   6501.55   0.00029s   3397.79\n BRAINPOOLP192r1:     48   0.00017s   5983.18   0.00018s   5626.08   0.00035s   2843.62\n BRAINPOOLP224r1:     56   0.00021s   4727.54   0.00022s   4464.86   0.00043s   2326.84\n BRAINPOOLP256r1:     64   0.00024s   4221.00   0.00025s   4010.26   0.00049s   2046.40\n BRAINPOOLP320r1:     80   0.00032s   3142.14   0.00033s   3009.15   0.00061s   1652.88\n BRAINPOOLP384r1:     96   0.00041s   2415.98   0.00043s   2340.35   0.00083s   1198.77\n BRAINPOOLP512r1:    128   0.00064s   1567.27   0.00066s   1526.33   0.00127s    788.51\n\n                       ecdh     ecdh/s\n        NIST192p:   0.00051s   1960.26\n        NIST224p:   0.00067s   1502.97\n        NIST256p:   0.00073s   1376.12\n        NIST384p:   0.00132s    758.68\n        NIST521p:   0.00231s    433.23\n       SECP256k1:   0.00072s   1387.18\n BRAINPOOLP160r1:   0.00042s   2366.60\n BRAINPOOLP192r1:   0.00049s   2026.80\n BRAINPOOLP224r1:   0.00067s   1486.52\n BRAINPOOLP256r1:   0.00076s   1310.31\n BRAINPOOLP320r1:   0.00101s    986.16\n BRAINPOOLP384r1:   0.00131s    761.35\n BRAINPOOLP512r1:   0.00211s    473.30\n```\n\n(there's also `gmpy` version, execute it using `tox -e speedgmpy`)\n\nFor comparison, a highly optimised implementation (including curve-specific\nassembly for some curves), like the one in OpenSSL 1.1.1d, provides following\nperformance numbers on the same machine.\nRun `openssl speed ecdsa` and `openssl speed ecdh` to reproduce it:\n```\n                              sign    verify    sign/s verify/s\n 192 bits ecdsa (nistp192)   0.0002s   0.0002s   4785.6   5380.7\n 224 bits ecdsa (nistp224)   0.0000s   0.0001s  22475.6   9822.0\n 256 bits ecdsa (nistp256)   0.0000s   0.0001s  45069.6  14166.6\n 384 bits ecdsa (nistp384)   0.0008s   0.0006s   1265.6   1648.1\n 521 bits ecdsa (nistp521)   0.0003s   0.0005s   3753.1   1819.5\n 256 bits ecdsa (brainpoolP256r1)   0.0003s   0.0003s   2983.5   3333.2\n 384 bits ecdsa (brainpoolP384r1)   0.0008s   0.0007s   1258.8   1528.1\n 512 bits ecdsa (brainpoolP512r1)   0.0015s   0.0012s    675.1    860.1\n\n                               op      op/s\n 192 bits ecdh (nistp192)   0.0002s   4853.4\n 224 bits ecdh (nistp224)   0.0001s  15252.1\n 256 bits ecdh (nistp256)   0.0001s  18436.3\n 384 bits ecdh (nistp384)   0.0008s   1292.7\n 521 bits ecdh (nistp521)   0.0003s   2884.7\n 256 bits ecdh (brainpoolP256r1)   0.0003s   3066.5\n 384 bits ecdh (brainpoolP384r1)   0.0008s   1298.0\n 512 bits ecdh (brainpoolP512r1)   0.0014s    694.8\n```\n\nKeys and signature can be serialized in different ways (see Usage, below).\nFor a NIST192p key, the three basic representations require strings of the\nfollowing lengths (in bytes):\n\n    to_string:  signkey= 24, verifykey= 48, signature=48\n    compressed: signkey=n/a, verifykey= 25, signature=n/a\n    DER:        signkey=106, verifykey= 80, signature=55\n    PEM:        signkey=278, verifykey=162, (no support for PEM signatures)\n\n## History\n\nIn 2006, Peter Pearson announced his pure-python implementation of ECDSA in a\n[message to sci.crypt][1], available from his [download site][2]. In 2010,\nBrian Warner wrote a wrapper around this code, to make it a bit easier and\nsafer to use. Hubert Kario then included an implementation of elliptic curve\ncryptography that uses Jacobian coordinates internally, improving performance\nabout 20-fold. You are looking at the README for this wrapper.\n\n[1]: http://www.derkeiler.com/Newsgroups/sci.crypt/2006-01/msg00651.html\n[2]: http://webpages.charter.net/curryfans/peter/downloads.html\n\n## Testing\n\nTo run the full test suite, do this:\n\n    tox -e coverage\n\nOn an Intel Core i7 4790K @ 4.0GHz, the tests take about 16 seconds to execute.\nThe test suite uses\n[`hypothesis`](https://github.com/HypothesisWorks/hypothesis) so there is some\ninherent variability in the test suite execution time.\n\nOne part of `test_pyecdsa.py` checks compatibility with OpenSSL, by\nrunning the \"openssl\" CLI tool, make sure it's in your `PATH` if you want\nto test compatibility with it.\n\n## Security\n\nThis library was not designed with security in mind. If you are processing\ndata that needs to be protected we suggest you use a quality wrapper around\nOpenSSL. [pyca/cryptography](https://cryptography.io) is one example of such\na wrapper. The primary use-case of this library is as a portable library for\ninteroperability testing and as a teaching tool.\n\n**This library does not protect against side channel attacks.**\n\nDo not allow attackers to measure how long it takes you to generate a keypair\nor sign a message. Do not allow attackers to run code on the same physical\nmachine when keypair generation or signing is taking place (this includes\nvirtual machines). Do not allow attackers to measure how much power your\ncomputer uses while generating the keypair or signing a message. Do not allow\nattackers to measure RF interference coming from your computer while generating\na keypair or signing a message. Note: just loading the private key will cause\nkeypair generation. Other operations or attack vectors may also be\nvulnerable to attacks. **For a sophisticated attacker observing just one\noperation with a private key will be sufficient to completely\nreconstruct the private key**.\n\nPlease also note that any Pure-python cryptographic library will be vulnerable\nto the same side channel attacks. This is because Python does not provide\nside-channel secure primitives (with the exception of\n[`hmac.compare_digest()`][3]), making side-channel secure programming\nimpossible.\n\nThis library depends upon a strong source of random numbers. Do not use it on\na system where `os.urandom()` does not provide cryptographically secure\nrandom numbers.\n\n[3]: https://docs.python.org/3/library/hmac.html#hmac.compare_digest\n\n## Usage\n\nYou start by creating a `SigningKey`. You can use this to sign data, by passing\nin data as a byte string and getting back the signature (also a byte string).\nYou can also ask a `SigningKey` to give you the corresponding `VerifyingKey`.\nThe `VerifyingKey` can be used to verify a signature, by passing it both the\ndata string and the signature byte string: it either returns True or raises\n`BadSignatureError`.\n\n```python\nfrom ecdsa import SigningKey\nsk = SigningKey.generate() # uses NIST192p\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\nEach `SigningKey`/`VerifyingKey` is associated with a specific curve, like\nNIST192p (the default one). Longer curves are more secure, but take longer to\nuse, and result in longer keys and signatures.\n\n```python\nfrom ecdsa import SigningKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nvk = sk.verifying_key\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\nThe `SigningKey` can be serialized into several different formats: the shortest\nis to call `s=sk.to_string()`, and then re-create it with\n`SigningKey.from_string(s, curve)` . This short form does not record the\ncurve, so you must be sure to pass to `from_string()` the same curve you used\nfor the original key. The short form of a NIST192p-based signing key is just 24\nbytes long. If a point encoding is invalid or it does not lie on the specified\ncurve, `from_string()` will raise `MalformedPointError`.\n\n```python\nfrom ecdsa import SigningKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nsk_string = sk.to_string()\nsk2 = SigningKey.from_string(sk_string, curve=NIST384p)\nprint(sk_string.hex())\nprint(sk2.to_string().hex())\n```\n\nNote: while the methods are called `to_string()` the type they return is\nactually `bytes`, the \"string\" part is leftover from Python 2.\n\n`sk.to_pem()` and `sk.to_der()` will serialize the signing key into the same\nformats that OpenSSL uses. The PEM file looks like the familiar ASCII-armored\n`\"-----BEGIN EC PRIVATE KEY-----\"` base64-encoded format, and the DER format\nis a shorter binary form of the same data.\n`SigningKey.from_pem()/.from_der()` will undo this serialization. These\nformats include the curve name, so you do not need to pass in a curve\nidentifier to the deserializer. In case the file is malformed `from_der()`\nand `from_pem()` will raise `UnexpectedDER` or` MalformedPointError`.\n\n```python\nfrom ecdsa import SigningKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nsk_pem = sk.to_pem()\nsk2 = SigningKey.from_pem(sk_pem)\n# sk and sk2 are the same key\n```\n\nLikewise, the `VerifyingKey` can be serialized in the same way:\n`vk.to_string()/VerifyingKey.from_string()`, `to_pem()/from_pem()`, and\n`to_der()/from_der()`. The same `curve=` argument is needed for\n`VerifyingKey.from_string()`.\n\n```python\nfrom ecdsa import SigningKey, VerifyingKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nvk = sk.verifying_key\nvk_string = vk.to_string()\nvk2 = VerifyingKey.from_string(vk_string, curve=NIST384p)\n# vk and vk2 are the same key\n\nfrom ecdsa import SigningKey, VerifyingKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nvk = sk.verifying_key\nvk_pem = vk.to_pem()\nvk2 = VerifyingKey.from_pem(vk_pem)\n# vk and vk2 are the same key\n```\n\nThere are a couple of different ways to compute a signature. Fundamentally,\nECDSA takes a number that represents the data being signed, and returns a\npair of numbers that represent the signature. The `hashfunc=` argument to\n`sk.sign()` and `vk.verify()` is used to turn an arbitrary string into\nfixed-length digest, which is then turned into a number that ECDSA can sign,\nand both sign and verify must use the same approach. The default value is\n`hashlib.sha1`, but if you use NIST256p or a longer curve, you can use\n`hashlib.sha256` instead.\n\nThere are also multiple ways to represent a signature. The default\n`sk.sign()` and `vk.verify()` methods present it as a short string, for\nsimplicity and minimal overhead. To use a different scheme, use the\n`sk.sign(sigencode=)` and `vk.verify(sigdecode=)` arguments. There are helper\nfunctions in the `ecdsa.util` module that can be useful here.\n\nIt is also possible to create a `SigningKey` from a \"seed\", which is\ndeterministic. This can be used in protocols where you want to derive\nconsistent signing keys from some other secret, for example when you want\nthree separate keys and only want to store a single master secret. You should\nstart with a uniformly-distributed unguessable seed with about `curve.baselen`\nbytes of entropy, and then use one of the helper functions in `ecdsa.util` to\nconvert it into an integer in the correct range, and then finally pass it\ninto `SigningKey.from_secret_exponent()`, like this:\n\n```python\nimport os\nfrom ecdsa import NIST384p, SigningKey\nfrom ecdsa.util import randrange_from_seed__trytryagain\n\ndef make_key(seed):\n  secexp = randrange_from_seed__trytryagain(seed, NIST384p.order)\n  return SigningKey.from_secret_exponent(secexp, curve=NIST384p)\n\nseed = os.urandom(NIST384p.baselen) # or other starting point\nsk1a = make_key(seed)\nsk1b = make_key(seed)\n# note: sk1a and sk1b are the same key\nassert sk1a.to_string() == sk1b.to_string()\nsk2 = make_key(b\"2-\"+seed)  # different key\nassert sk1a.to_string() != sk2.to_string()\n```\n\nIn case the application will verify a lot of signatures made with a single\nkey, it's possible to precompute some of the internal values to make\nsignature verification significantly faster. The break-even point occurs at\nabout 100 signatures verified.\n\nTo perform precomputation, you can call the `precompute()` method\non `VerifyingKey` instance:\n```python\nfrom ecdsa import SigningKey, NIST384p\nsk = SigningKey.generate(curve=NIST384p)\nvk = sk.verifying_key\nvk.precompute()\nsignature = sk.sign(b\"message\")\nassert vk.verify(signature, b\"message\")\n```\n\nOnce `precompute()` was called, all signature verifications with this key will\nbe faster to execute.\n\n## OpenSSL Compatibility\n\nTo produce signatures that can be verified by OpenSSL tools, or to verify\nsignatures that were produced by those tools, use:\n\n```python\n# openssl ecparam -name prime256v1 -genkey -out sk.pem\n# openssl ec -in sk.pem -pubout -out vk.pem\n# echo \"data for signing\" > data\n# openssl dgst -sha256 -sign sk.pem -out data.sig data\n# openssl dgst -sha256 -verify vk.pem -signature data.sig data\n# openssl dgst -sha256 -prverify sk.pem -signature data.sig data\n\nimport hashlib\nfrom ecdsa import SigningKey, VerifyingKey\nfrom ecdsa.util import sigencode_der, sigdecode_der\n\nwith open(\"vk.pem\") as f:\n   vk = VerifyingKey.from_pem(f.read())\n\nwith open(\"data\", \"rb\") as f:\n   data = f.read()\n\nwith open(\"data.sig\", \"rb\") as f:\n   signature = f.read()\n\nassert vk.verify(signature, data, hashlib.sha256, sigdecode=sigdecode_der)\n\nwith open(\"sk.pem\") as f:\n   sk = SigningKey.from_pem(f.read(), hashlib.sha256)\n\nnew_signature = sk.sign_deterministic(data, sigencode=sigencode_der)\n\nwith open(\"data.sig2\", \"wb\") as f:\n   f.write(new_signature)\n\n# openssl dgst -sha256 -verify vk.pem -signature data.sig2 data\n```\n\nNote: if compatibility with OpenSSL 1.0.0 or earlier is necessary, the\n`sigencode_string` and `sigdecode_string` from `ecdsa.util` can be used for\nrespectively writing and reading the signatures.\n\nThe keys also can be written in format that openssl can handle:\n\n```python\nfrom ecdsa import SigningKey, VerifyingKey\n\nwith open(\"sk.pem\") as f:\n    sk = SigningKey.from_pem(f.read())\nwith open(\"sk.pem\", \"wb\") as f:\n    f.write(sk.to_pem())\n\nwith open(\"vk.pem\") as f:\n    vk = VerifyingKey.from_pem(f.read())\nwith open(\"vk.pem\", \"wb\") as f:\n    f.write(vk.to_pem())\n```\n\n## Entropy\n\nCreating a signing key with `SigningKey.generate()` requires some form of\nentropy (as opposed to\n`from_secret_exponent`/`from_string`/`from_der`/`from_pem`,\nwhich are deterministic and do not require an entropy source). The default\nsource is `os.urandom()`, but you can pass any other function that behaves\nlike `os.urandom` as the `entropy=` argument to do something different. This\nmay be useful in unit tests, where you want to achieve repeatable results. The\n`ecdsa.util.PRNG` utility is handy here: it takes a seed and produces a strong\npseudo-random stream from it:\n\n```python\nfrom ecdsa.util import PRNG\nfrom ecdsa import SigningKey\nrng1 = PRNG(b\"seed\")\nsk1 = SigningKey.generate(entropy=rng1)\nrng2 = PRNG(b\"seed\")\nsk2 = SigningKey.generate(entropy=rng2)\n# sk1 and sk2 are the same key\n```\n\nLikewise, ECDSA signature generation requires a random number, and each\nsignature must use a different one (using the same number twice will\nimmediately reveal the private signing key). The `sk.sign()` method takes an\n`entropy=` argument which behaves the same as `SigningKey.generate(entropy=)`.\n\n## Deterministic Signatures\n\nIf you call `SigningKey.sign_deterministic(data)` instead of `.sign(data)`,\nthe code will generate a deterministic signature instead of a random one.\nThis uses the algorithm from RFC6979 to safely generate a unique `k` value,\nderived from the private key and the message being signed. Each time you sign\nthe same message with the same key, you will get the same signature (using\nthe same `k`).\n\nThis may become the default in a future version, as it is not vulnerable to\nfailures of the entropy source.\n\n## Examples\n\nCreate a NIST192p keypair and immediately save both to disk:\n\n```python\nfrom ecdsa import SigningKey\nsk = SigningKey.generate()\nvk = sk.verifying_key\nwith open(\"private.pem\", \"wb\") as f:\n    f.write(sk.to_pem())\nwith open(\"public.pem\", \"wb\") as f:\n    f.write(vk.to_pem())\n```\n\nLoad a signing key from disk, use it to sign a message (using SHA-1), and write\nthe signature to disk:\n\n```python\nfrom ecdsa import SigningKey\nwith open(\"private.pem\") as f:\n    sk = SigningKey.from_pem(f.read())\nwith open(\"message\", \"rb\") as f:\n    message = f.read()\nsig = sk.sign(message)\nwith open(\"signature\", \"wb\") as f:\n    f.write(sig)\n```\n\nLoad the verifying key, message, and signature from disk, and verify the\nsignature (assume SHA-1 hash):\n\n```python\nfrom ecdsa import VerifyingKey, BadSignatureError\nvk = VerifyingKey.from_pem(open(\"public.pem\").read())\nwith open(\"message\", \"rb\") as f:\n    message = f.read()\nwith open(\"signature\", \"rb\") as f:\n    sig = f.read()\ntry:\n    vk.verify(sig, message)\n    print \"good signature\"\nexcept BadSignatureError:\n    print \"BAD SIGNATURE\"\n```\n\nCreate a NIST521p keypair:\n\n```python\nfrom ecdsa import SigningKey, NIST521p\nsk = SigningKey.generate(curve=NIST521p)\nvk = sk.verifying_key\n```\n\nCreate three independent signing keys from a master seed:\n\n```python\nfrom ecdsa import NIST192p, SigningKey\nfrom ecdsa.util import randrange_from_seed__trytryagain\n\ndef make_key_from_seed(seed, curve=NIST192p):\n    secexp = randrange_from_seed__trytryagain(seed, curve.order)\n    return SigningKey.from_secret_exponent(secexp, curve)\n\nsk1 = make_key_from_seed(\"1:%s\" % seed)\nsk2 = make_key_from_seed(\"2:%s\" % seed)\nsk3 = make_key_from_seed(\"3:%s\" % seed)\n```\n\nLoad a verifying key from disk and print it using hex encoding in\nuncompressed and compressed format (defined in X9.62 and SEC1 standards):\n\n```python\nfrom ecdsa import VerifyingKey\n\nwith open(\"public.pem\") as f:\n    vk = VerifyingKey.from_pem(f.read())\n\nprint(\"uncompressed: {0}\".format(vk.to_string(\"uncompressed\").hex()))\nprint(\"compressed: {0}\".format(vk.to_string(\"compressed\").hex()))\n```\n\nLoad a verifying key from a hex string from compressed format, output\nuncompressed:\n\n```python\nfrom ecdsa import VerifyingKey, NIST256p\n\ncomp_str = '022799c0d0ee09772fdd337d4f28dc155581951d07082fb19a38aa396b67e77759'\nvk = VerifyingKey.from_string(bytearray.fromhex(comp_str), curve=NIST256p)\nprint(vk.to_string(\"uncompressed\").hex())\n```\n\nECDH key exchange with remote party\n\n```python\nfrom ecdsa import ECDH, NIST256p\n\necdh = ECDH(curve=NIST256p)\necdh.generate_private_key()\nlocal_public_key = ecdh.get_public_key()\n#send `local_public_key` to remote party and receive `remote_public_key` from remote party\nwith open(\"remote_public_key.pem\") as e:\n    remote_public_key = e.read()\necdh.load_received_public_key_pem(remote_public_key)\nsecret = ecdh.generate_sharedsecret_bytes()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/warner/python-ecdsa", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ecdsa", "package_url": "https://pypi.org/project/ecdsa/", "platform": "", "project_url": "https://pypi.org/project/ecdsa/", "project_urls": {"Homepage": "http://github.com/warner/python-ecdsa"}, "release_url": "https://pypi.org/project/ecdsa/0.15/", "requires_dist": ["six (>=1.9.0)", "gmpy ; extra == 'gmpy'", "gmpy2 ; extra == 'gmpy2'"], "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "summary": "ECDSA cryptographic signature library (pure python)", "version": "0.15", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pure-Python ECDSA</h1>\n<p><a href=\"http://travis-ci.org/warner/python-ecdsa\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43d6384154c797ff1e98fb128687d47a07fdc997/68747470733a2f2f7472617669732d63692e6f72672f7761726e65722f707974686f6e2d65636473612e706e67\"></a>\n<a href=\"https://coveralls.io/r/warner/python-ecdsa\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7acc74f9b5feadcfd791fdc4f05c9d894bc58e6d/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7761726e65722f707974686f6e2d65636473612f62616467652e737667\"></a>\n<a href=\"https://travis-ci.org/warner/python-ecdsa/jobs/626479178#L776\" rel=\"nofollow\"><img alt=\"condition coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9154061945498d031351d92ccb23bba25c515fe9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e646974696f6e253230636f7665726167652d38312532352d79656c6c6f77\"></a>\n<a href=\"https://pypi.python.org/pypi/ecdsa/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c5e62116438e943f100cef318a4cf87e04b215d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f65636473612e7376673f7374796c653d666c6174\"></a></p>\n<p>This is an easy-to-use implementation of ECDSA cryptography (Elliptic Curve\nDigital Signature Algorithm), implemented purely in Python, released under\nthe MIT license. With this library, you can quickly create keypairs (signing\nkey and verifying key), sign messages, and verify the signatures. The keys\nand signatures are very short, making them easy to handle and incorporate\ninto other protocols.</p>\n<h2>Features</h2>\n<p>This library provides key generation, signing, and verifying, for five\npopular NIST \"Suite B\" GF(p) (<em>prime field</em>) curves, with key lengths of 192,\n224, 256, 384, and 521 bits. The \"short names\" for these curves, as known by\nthe OpenSSL tool (<code>openssl ecparam -list_curves</code>), are: <code>prime192v1</code>,\n<code>secp224r1</code>, <code>prime256v1</code>, <code>secp384r1</code>, and <code>secp521r1</code>. It includes the\n256-bit curve <code>secp256k1</code> used by Bitcoin. There is also support for the\nregular (non-twisted) variants of Brainpool curves from 160 to 512 bits. The\n\"short names\" of those curves are: <code>brainpoolP160r1</code>, <code>brainpoolP192r1</code>,\n<code>brainpoolP224r1</code>, <code>brainpoolP256r1</code>, <code>brainpoolP320r1</code>, <code>brainpoolP384r1</code>,\n<code>brainpoolP512r1</code>.\nNo other curves are included, but it is not too hard to add support for more\ncurves over prime fields.</p>\n<h2>Dependencies</h2>\n<p>This library uses only Python and the 'six' package. It is compatible with\nPython 2.6, 2.7 and 3.3+. It also supports execution on the alternative\nimplementations like pypy and pypy3.</p>\n<p>If <code>gmpy2</code> or <code>gmpy</code> is installed, they will be used for faster arithmetic.\nEither of them can be installed after this library is installed,\n<code>python-ecdsa</code> will detect their presence on start-up and use them\nautomatically.</p>\n<p>To run the OpenSSL compatibility tests, the 'openssl' tool must be in your\n<code>PATH</code>. This release has been tested successfully against OpenSSL 0.9.8o,\n1.0.0a, 1.0.2f and 1.1.1d (among others).</p>\n<h2>Installation</h2>\n<p>This library is available on PyPI, it's recommended to install it using <code>pip</code>:</p>\n<pre><code>pip install ecdsa\n</code></pre>\n<p>In case higher performance is wanted and using native code is not a problem,\nit's possible to specify installation together with <code>gmpy2</code>:</p>\n<pre><code>pip install ecdsa[gmpy2]\n</code></pre>\n<p>or (slower, legacy option):</p>\n<pre><code>pip install ecdsa[gmpy]\n</code></pre>\n<h2>Speed</h2>\n<p>The following table shows how long this library takes to generate keypairs\n(<code>keygen</code>), to sign data (<code>sign</code>), and to verify those signatures (<code>verify</code>).\nAll those values are in seconds.\nFor convenience, the inverses of those values are also provided:\nhow many keys per second can be generated (<code>keygen/s</code>), how many signatures\ncan be made per second (<code>sign/s</code>) and how many signatures can be verified\nper second (<code>verify/s</code>). The size of raw signature (generally the smallest\nway a signature can be encoded) is also provided in the <code>siglen</code> column.\nUse <code>tox -e speed</code> to generate this table on your own computer.\nOn an Intel Core i7 4790K @ 4.0GHz I'm getting the following performance:</p>\n<pre><code>                  siglen    keygen   keygen/s      sign     sign/s    verify   verify/s\n        NIST192p:     48   0.00035s   2893.02   0.00038s   2620.53   0.00069s   1458.92\n        NIST224p:     56   0.00043s   2307.11   0.00048s   2092.00   0.00088s   1131.33\n        NIST256p:     64   0.00056s   1793.70   0.00061s   1639.87   0.00113s    883.79\n        NIST384p:     96   0.00116s    864.33   0.00124s    806.29   0.00233s    429.87\n        NIST521p:    132   0.00221s    452.16   0.00234s    427.31   0.00460s    217.19\n       SECP256k1:     64   0.00056s   1772.65   0.00061s   1628.73   0.00110s    912.13\n BRAINPOOLP160r1:     40   0.00026s   3801.86   0.00029s   3401.11   0.00052s   1930.47\n BRAINPOOLP192r1:     48   0.00034s   2925.73   0.00038s   2634.34   0.00070s   1438.06\n BRAINPOOLP224r1:     56   0.00044s   2287.98   0.00048s   2083.87   0.00088s   1137.52\n BRAINPOOLP256r1:     64   0.00056s   1774.11   0.00061s   1628.25   0.00112s    890.71\n BRAINPOOLP320r1:     80   0.00081s   1238.18   0.00087s   1146.71   0.00151s    661.95\n BRAINPOOLP384r1:     96   0.00117s    855.47   0.00124s    804.56   0.00241s    414.83\n BRAINPOOLP512r1:    128   0.00223s    447.99   0.00234s    427.49   0.00437s    229.09\n\n                       ecdh     ecdh/s\n        NIST192p:   0.00110s    910.70\n        NIST224p:   0.00143s    701.17\n        NIST256p:   0.00178s    560.44\n        NIST384p:   0.00383s    261.03\n        NIST521p:   0.00745s    134.23\n       SECP256k1:   0.00168s    596.23\n BRAINPOOLP160r1:   0.00085s   1174.02\n BRAINPOOLP192r1:   0.00113s    883.47\n BRAINPOOLP224r1:   0.00145s    687.82\n BRAINPOOLP256r1:   0.00195s    514.03\n BRAINPOOLP320r1:   0.00277s    360.80\n BRAINPOOLP384r1:   0.00412s    242.58\n BRAINPOOLP512r1:   0.00787s    127.12\n</code></pre>\n<p>To test performance with <code>gmpy2</code> loaded, use <code>tox -e speedgmpy2</code>.\nOn the same machine I'm getting the following performance with <code>gmpy2</code>:</p>\n<pre><code>                  siglen    keygen   keygen/s      sign     sign/s    verify   verify/s\n        NIST192p:     48   0.00017s   5945.50   0.00018s   5544.66   0.00033s   3002.54\n        NIST224p:     56   0.00021s   4742.14   0.00022s   4463.52   0.00044s   2248.59\n        NIST256p:     64   0.00024s   4155.73   0.00025s   3994.28   0.00047s   2105.34\n        NIST384p:     96   0.00041s   2415.06   0.00043s   2316.41   0.00085s   1177.18\n        NIST521p:    132   0.00072s   1391.14   0.00074s   1359.63   0.00140s    716.31\n       SECP256k1:     64   0.00024s   4216.50   0.00025s   3994.52   0.00047s   2120.57\n BRAINPOOLP160r1:     40   0.00014s   7038.99   0.00015s   6501.55   0.00029s   3397.79\n BRAINPOOLP192r1:     48   0.00017s   5983.18   0.00018s   5626.08   0.00035s   2843.62\n BRAINPOOLP224r1:     56   0.00021s   4727.54   0.00022s   4464.86   0.00043s   2326.84\n BRAINPOOLP256r1:     64   0.00024s   4221.00   0.00025s   4010.26   0.00049s   2046.40\n BRAINPOOLP320r1:     80   0.00032s   3142.14   0.00033s   3009.15   0.00061s   1652.88\n BRAINPOOLP384r1:     96   0.00041s   2415.98   0.00043s   2340.35   0.00083s   1198.77\n BRAINPOOLP512r1:    128   0.00064s   1567.27   0.00066s   1526.33   0.00127s    788.51\n\n                       ecdh     ecdh/s\n        NIST192p:   0.00051s   1960.26\n        NIST224p:   0.00067s   1502.97\n        NIST256p:   0.00073s   1376.12\n        NIST384p:   0.00132s    758.68\n        NIST521p:   0.00231s    433.23\n       SECP256k1:   0.00072s   1387.18\n BRAINPOOLP160r1:   0.00042s   2366.60\n BRAINPOOLP192r1:   0.00049s   2026.80\n BRAINPOOLP224r1:   0.00067s   1486.52\n BRAINPOOLP256r1:   0.00076s   1310.31\n BRAINPOOLP320r1:   0.00101s    986.16\n BRAINPOOLP384r1:   0.00131s    761.35\n BRAINPOOLP512r1:   0.00211s    473.30\n</code></pre>\n<p>(there's also <code>gmpy</code> version, execute it using <code>tox -e speedgmpy</code>)</p>\n<p>For comparison, a highly optimised implementation (including curve-specific\nassembly for some curves), like the one in OpenSSL 1.1.1d, provides following\nperformance numbers on the same machine.\nRun <code>openssl speed ecdsa</code> and <code>openssl speed ecdh</code> to reproduce it:</p>\n<pre><code>                              sign    verify    sign/s verify/s\n 192 bits ecdsa (nistp192)   0.0002s   0.0002s   4785.6   5380.7\n 224 bits ecdsa (nistp224)   0.0000s   0.0001s  22475.6   9822.0\n 256 bits ecdsa (nistp256)   0.0000s   0.0001s  45069.6  14166.6\n 384 bits ecdsa (nistp384)   0.0008s   0.0006s   1265.6   1648.1\n 521 bits ecdsa (nistp521)   0.0003s   0.0005s   3753.1   1819.5\n 256 bits ecdsa (brainpoolP256r1)   0.0003s   0.0003s   2983.5   3333.2\n 384 bits ecdsa (brainpoolP384r1)   0.0008s   0.0007s   1258.8   1528.1\n 512 bits ecdsa (brainpoolP512r1)   0.0015s   0.0012s    675.1    860.1\n\n                               op      op/s\n 192 bits ecdh (nistp192)   0.0002s   4853.4\n 224 bits ecdh (nistp224)   0.0001s  15252.1\n 256 bits ecdh (nistp256)   0.0001s  18436.3\n 384 bits ecdh (nistp384)   0.0008s   1292.7\n 521 bits ecdh (nistp521)   0.0003s   2884.7\n 256 bits ecdh (brainpoolP256r1)   0.0003s   3066.5\n 384 bits ecdh (brainpoolP384r1)   0.0008s   1298.0\n 512 bits ecdh (brainpoolP512r1)   0.0014s    694.8\n</code></pre>\n<p>Keys and signature can be serialized in different ways (see Usage, below).\nFor a NIST192p key, the three basic representations require strings of the\nfollowing lengths (in bytes):</p>\n<pre><code>to_string:  signkey= 24, verifykey= 48, signature=48\ncompressed: signkey=n/a, verifykey= 25, signature=n/a\nDER:        signkey=106, verifykey= 80, signature=55\nPEM:        signkey=278, verifykey=162, (no support for PEM signatures)\n</code></pre>\n<h2>History</h2>\n<p>In 2006, Peter Pearson announced his pure-python implementation of ECDSA in a\n<a href=\"http://www.derkeiler.com/Newsgroups/sci.crypt/2006-01/msg00651.html\" rel=\"nofollow\">message to sci.crypt</a>, available from his <a href=\"http://webpages.charter.net/curryfans/peter/downloads.html\" rel=\"nofollow\">download site</a>. In 2010,\nBrian Warner wrote a wrapper around this code, to make it a bit easier and\nsafer to use. Hubert Kario then included an implementation of elliptic curve\ncryptography that uses Jacobian coordinates internally, improving performance\nabout 20-fold. You are looking at the README for this wrapper.</p>\n<h2>Testing</h2>\n<p>To run the full test suite, do this:</p>\n<pre><code>tox -e coverage\n</code></pre>\n<p>On an Intel Core i7 4790K @ 4.0GHz, the tests take about 16 seconds to execute.\nThe test suite uses\n<a href=\"https://github.com/HypothesisWorks/hypothesis\" rel=\"nofollow\"><code>hypothesis</code></a> so there is some\ninherent variability in the test suite execution time.</p>\n<p>One part of <code>test_pyecdsa.py</code> checks compatibility with OpenSSL, by\nrunning the \"openssl\" CLI tool, make sure it's in your <code>PATH</code> if you want\nto test compatibility with it.</p>\n<h2>Security</h2>\n<p>This library was not designed with security in mind. If you are processing\ndata that needs to be protected we suggest you use a quality wrapper around\nOpenSSL. <a href=\"https://cryptography.io\" rel=\"nofollow\">pyca/cryptography</a> is one example of such\na wrapper. The primary use-case of this library is as a portable library for\ninteroperability testing and as a teaching tool.</p>\n<p><strong>This library does not protect against side channel attacks.</strong></p>\n<p>Do not allow attackers to measure how long it takes you to generate a keypair\nor sign a message. Do not allow attackers to run code on the same physical\nmachine when keypair generation or signing is taking place (this includes\nvirtual machines). Do not allow attackers to measure how much power your\ncomputer uses while generating the keypair or signing a message. Do not allow\nattackers to measure RF interference coming from your computer while generating\na keypair or signing a message. Note: just loading the private key will cause\nkeypair generation. Other operations or attack vectors may also be\nvulnerable to attacks. <strong>For a sophisticated attacker observing just one\noperation with a private key will be sufficient to completely\nreconstruct the private key</strong>.</p>\n<p>Please also note that any Pure-python cryptographic library will be vulnerable\nto the same side channel attacks. This is because Python does not provide\nside-channel secure primitives (with the exception of\n<a href=\"https://docs.python.org/3/library/hmac.html#hmac.compare_digest\" rel=\"nofollow\"><code>hmac.compare_digest()</code></a>), making side-channel secure programming\nimpossible.</p>\n<p>This library depends upon a strong source of random numbers. Do not use it on\na system where <code>os.urandom()</code> does not provide cryptographically secure\nrandom numbers.</p>\n<h2>Usage</h2>\n<p>You start by creating a <code>SigningKey</code>. You can use this to sign data, by passing\nin data as a byte string and getting back the signature (also a byte string).\nYou can also ask a <code>SigningKey</code> to give you the corresponding <code>VerifyingKey</code>.\nThe <code>VerifyingKey</code> can be used to verify a signature, by passing it both the\ndata string and the signature byte string: it either returns True or raises\n<code>BadSignatureError</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">()</span> <span class=\"c1\"># uses NIST192p</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">verifying_key</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"message\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"message\"</span><span class=\"p\">)</span>\n</pre>\n<p>Each <code>SigningKey</code>/<code>VerifyingKey</code> is associated with a specific curve, like\nNIST192p (the default one). Longer curves are more secure, but take longer to\nuse, and result in longer keys and signatures.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">NIST384p</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">verifying_key</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"message\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"message\"</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>SigningKey</code> can be serialized into several different formats: the shortest\nis to call <code>s=sk.to_string()</code>, and then re-create it with\n<code>SigningKey.from_string(s, curve)</code> . This short form does not record the\ncurve, so you must be sure to pass to <code>from_string()</code> the same curve you used\nfor the original key. The short form of a NIST192p-based signing key is just 24\nbytes long. If a point encoding is invalid or it does not lie on the specified\ncurve, <code>from_string()</code> will raise <code>MalformedPointError</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">NIST384p</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n<span class=\"n\">sk_string</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"n\">sk2</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"n\">sk_string</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sk_string</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">())</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sk2</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">())</span>\n</pre>\n<p>Note: while the methods are called <code>to_string()</code> the type they return is\nactually <code>bytes</code>, the \"string\" part is leftover from Python 2.</p>\n<p><code>sk.to_pem()</code> and <code>sk.to_der()</code> will serialize the signing key into the same\nformats that OpenSSL uses. The PEM file looks like the familiar ASCII-armored\n<code>\"-----BEGIN EC PRIVATE KEY-----\"</code> base64-encoded format, and the DER format\nis a shorter binary form of the same data.\n<code>SigningKey.from_pem()/.from_der()</code> will undo this serialization. These\nformats include the curve name, so you do not need to pass in a curve\nidentifier to the deserializer. In case the file is malformed <code>from_der()</code>\nand <code>from_pem()</code> will raise <code>UnexpectedDER</code> or<code>MalformedPointError</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">NIST384p</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n<span class=\"n\">sk_pem</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">to_pem</span><span class=\"p\">()</span>\n<span class=\"n\">sk2</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"n\">sk_pem</span><span class=\"p\">)</span>\n<span class=\"c1\"># sk and sk2 are the same key</span>\n</pre>\n<p>Likewise, the <code>VerifyingKey</code> can be serialized in the same way:\n<code>vk.to_string()/VerifyingKey.from_string()</code>, <code>to_pem()/from_pem()</code>, and\n<code>to_der()/from_der()</code>. The same <code>curve=</code> argument is needed for\n<code>VerifyingKey.from_string()</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">VerifyingKey</span><span class=\"p\">,</span> <span class=\"n\">NIST384p</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">verifying_key</span>\n<span class=\"n\">vk_string</span> <span class=\"o\">=</span> <span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"n\">vk2</span> <span class=\"o\">=</span> <span class=\"n\">VerifyingKey</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"n\">vk_string</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n<span class=\"c1\"># vk and vk2 are the same key</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">VerifyingKey</span><span class=\"p\">,</span> <span class=\"n\">NIST384p</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">verifying_key</span>\n<span class=\"n\">vk_pem</span> <span class=\"o\">=</span> <span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">to_pem</span><span class=\"p\">()</span>\n<span class=\"n\">vk2</span> <span class=\"o\">=</span> <span class=\"n\">VerifyingKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"n\">vk_pem</span><span class=\"p\">)</span>\n<span class=\"c1\"># vk and vk2 are the same key</span>\n</pre>\n<p>There are a couple of different ways to compute a signature. Fundamentally,\nECDSA takes a number that represents the data being signed, and returns a\npair of numbers that represent the signature. The <code>hashfunc=</code> argument to\n<code>sk.sign()</code> and <code>vk.verify()</code> is used to turn an arbitrary string into\nfixed-length digest, which is then turned into a number that ECDSA can sign,\nand both sign and verify must use the same approach. The default value is\n<code>hashlib.sha1</code>, but if you use NIST256p or a longer curve, you can use\n<code>hashlib.sha256</code> instead.</p>\n<p>There are also multiple ways to represent a signature. The default\n<code>sk.sign()</code> and <code>vk.verify()</code> methods present it as a short string, for\nsimplicity and minimal overhead. To use a different scheme, use the\n<code>sk.sign(sigencode=)</code> and <code>vk.verify(sigdecode=)</code> arguments. There are helper\nfunctions in the <code>ecdsa.util</code> module that can be useful here.</p>\n<p>It is also possible to create a <code>SigningKey</code> from a \"seed\", which is\ndeterministic. This can be used in protocols where you want to derive\nconsistent signing keys from some other secret, for example when you want\nthree separate keys and only want to store a single master secret. You should\nstart with a uniformly-distributed unguessable seed with about <code>curve.baselen</code>\nbytes of entropy, and then use one of the helper functions in <code>ecdsa.util</code> to\nconvert it into an integer in the correct range, and then finally pass it\ninto <code>SigningKey.from_secret_exponent()</code>, like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">NIST384p</span><span class=\"p\">,</span> <span class=\"n\">SigningKey</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ecdsa.util</span> <span class=\"kn\">import</span> <span class=\"n\">randrange_from_seed__trytryagain</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_key</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">):</span>\n  <span class=\"n\">secexp</span> <span class=\"o\">=</span> <span class=\"n\">randrange_from_seed__trytryagain</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">NIST384p</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">from_secret_exponent</span><span class=\"p\">(</span><span class=\"n\">secexp</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n\n<span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">urandom</span><span class=\"p\">(</span><span class=\"n\">NIST384p</span><span class=\"o\">.</span><span class=\"n\">baselen</span><span class=\"p\">)</span> <span class=\"c1\"># or other starting point</span>\n<span class=\"n\">sk1a</span> <span class=\"o\">=</span> <span class=\"n\">make_key</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">)</span>\n<span class=\"n\">sk1b</span> <span class=\"o\">=</span> <span class=\"n\">make_key</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">)</span>\n<span class=\"c1\"># note: sk1a and sk1b are the same key</span>\n<span class=\"k\">assert</span> <span class=\"n\">sk1a</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">sk1b</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"n\">sk2</span> <span class=\"o\">=</span> <span class=\"n\">make_key</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"2-\"</span><span class=\"o\">+</span><span class=\"n\">seed</span><span class=\"p\">)</span>  <span class=\"c1\"># different key</span>\n<span class=\"k\">assert</span> <span class=\"n\">sk1a</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">sk2</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n</pre>\n<p>In case the application will verify a lot of signatures made with a single\nkey, it's possible to precompute some of the internal values to make\nsignature verification significantly faster. The break-even point occurs at\nabout 100 signatures verified.</p>\n<p>To perform precomputation, you can call the <code>precompute()</code> method\non <code>VerifyingKey</code> instance:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">NIST384p</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST384p</span><span class=\"p\">)</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">verifying_key</span>\n<span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">precompute</span><span class=\"p\">()</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"message\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">\"message\"</span><span class=\"p\">)</span>\n</pre>\n<p>Once <code>precompute()</code> was called, all signature verifications with this key will\nbe faster to execute.</p>\n<h2>OpenSSL Compatibility</h2>\n<p>To produce signatures that can be verified by OpenSSL tools, or to verify\nsignatures that were produced by those tools, use:</p>\n<pre><span class=\"c1\"># openssl ecparam -name prime256v1 -genkey -out sk.pem</span>\n<span class=\"c1\"># openssl ec -in sk.pem -pubout -out vk.pem</span>\n<span class=\"c1\"># echo \"data for signing\" &gt; data</span>\n<span class=\"c1\"># openssl dgst -sha256 -sign sk.pem -out data.sig data</span>\n<span class=\"c1\"># openssl dgst -sha256 -verify vk.pem -signature data.sig data</span>\n<span class=\"c1\"># openssl dgst -sha256 -prverify sk.pem -signature data.sig data</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">VerifyingKey</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ecdsa.util</span> <span class=\"kn\">import</span> <span class=\"n\">sigencode_der</span><span class=\"p\">,</span> <span class=\"n\">sigdecode_der</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"vk.pem\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n   <span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">VerifyingKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"data\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n   <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"data.sig\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n   <span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha256</span><span class=\"p\">,</span> <span class=\"n\">sigdecode</span><span class=\"o\">=</span><span class=\"n\">sigdecode_der</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sk.pem\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n   <span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha256</span><span class=\"p\">)</span>\n\n<span class=\"n\">new_signature</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">sign_deterministic</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sigencode</span><span class=\"o\">=</span><span class=\"n\">sigencode_der</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"data.sig2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n   <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">new_signature</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># openssl dgst -sha256 -verify vk.pem -signature data.sig2 data</span>\n</pre>\n<p>Note: if compatibility with OpenSSL 1.0.0 or earlier is necessary, the\n<code>sigencode_string</code> and <code>sigdecode_string</code> from <code>ecdsa.util</code> can be used for\nrespectively writing and reading the signatures.</p>\n<p>The keys also can be written in format that openssl can handle:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">VerifyingKey</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sk.pem\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sk.pem\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">to_pem</span><span class=\"p\">())</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"vk.pem\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">VerifyingKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"vk.pem\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">to_pem</span><span class=\"p\">())</span>\n</pre>\n<h2>Entropy</h2>\n<p>Creating a signing key with <code>SigningKey.generate()</code> requires some form of\nentropy (as opposed to\n<code>from_secret_exponent</code>/<code>from_string</code>/<code>from_der</code>/<code>from_pem</code>,\nwhich are deterministic and do not require an entropy source). The default\nsource is <code>os.urandom()</code>, but you can pass any other function that behaves\nlike <code>os.urandom</code> as the <code>entropy=</code> argument to do something different. This\nmay be useful in unit tests, where you want to achieve repeatable results. The\n<code>ecdsa.util.PRNG</code> utility is handy here: it takes a seed and produces a strong\npseudo-random stream from it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa.util</span> <span class=\"kn\">import</span> <span class=\"n\">PRNG</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span>\n<span class=\"n\">rng1</span> <span class=\"o\">=</span> <span class=\"n\">PRNG</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"seed\"</span><span class=\"p\">)</span>\n<span class=\"n\">sk1</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">entropy</span><span class=\"o\">=</span><span class=\"n\">rng1</span><span class=\"p\">)</span>\n<span class=\"n\">rng2</span> <span class=\"o\">=</span> <span class=\"n\">PRNG</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"seed\"</span><span class=\"p\">)</span>\n<span class=\"n\">sk2</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">entropy</span><span class=\"o\">=</span><span class=\"n\">rng2</span><span class=\"p\">)</span>\n<span class=\"c1\"># sk1 and sk2 are the same key</span>\n</pre>\n<p>Likewise, ECDSA signature generation requires a random number, and each\nsignature must use a different one (using the same number twice will\nimmediately reveal the private signing key). The <code>sk.sign()</code> method takes an\n<code>entropy=</code> argument which behaves the same as <code>SigningKey.generate(entropy=)</code>.</p>\n<h2>Deterministic Signatures</h2>\n<p>If you call <code>SigningKey.sign_deterministic(data)</code> instead of <code>.sign(data)</code>,\nthe code will generate a deterministic signature instead of a random one.\nThis uses the algorithm from RFC6979 to safely generate a unique <code>k</code> value,\nderived from the private key and the message being signed. Each time you sign\nthe same message with the same key, you will get the same signature (using\nthe same <code>k</code>).</p>\n<p>This may become the default in a future version, as it is not vulnerable to\nfailures of the entropy source.</p>\n<h2>Examples</h2>\n<p>Create a NIST192p keypair and immediately save both to disk:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">()</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">verifying_key</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"private.pem\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">to_pem</span><span class=\"p\">())</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"public.pem\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">to_pem</span><span class=\"p\">())</span>\n</pre>\n<p>Load a signing key from disk, use it to sign a message (using SHA-1), and write\nthe signature to disk:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"private.pem\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"message\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"signature\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">)</span>\n</pre>\n<p>Load the verifying key, message, and signature from disk, and verify the\nsignature (assume SHA-1 hash):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyingKey</span><span class=\"p\">,</span> <span class=\"n\">BadSignatureError</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">VerifyingKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"public.pem\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"message\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"signature\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"good signature\"</span>\n<span class=\"k\">except</span> <span class=\"n\">BadSignatureError</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"s2\">\"BAD SIGNATURE\"</span>\n</pre>\n<p>Create a NIST521p keypair:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">SigningKey</span><span class=\"p\">,</span> <span class=\"n\">NIST521p</span>\n<span class=\"n\">sk</span> <span class=\"o\">=</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST521p</span><span class=\"p\">)</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">sk</span><span class=\"o\">.</span><span class=\"n\">verifying_key</span>\n</pre>\n<p>Create three independent signing keys from a master seed:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">NIST192p</span><span class=\"p\">,</span> <span class=\"n\">SigningKey</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ecdsa.util</span> <span class=\"kn\">import</span> <span class=\"n\">randrange_from_seed__trytryagain</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_key_from_seed</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST192p</span><span class=\"p\">):</span>\n    <span class=\"n\">secexp</span> <span class=\"o\">=</span> <span class=\"n\">randrange_from_seed__trytryagain</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"o\">.</span><span class=\"n\">order</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">SigningKey</span><span class=\"o\">.</span><span class=\"n\">from_secret_exponent</span><span class=\"p\">(</span><span class=\"n\">secexp</span><span class=\"p\">,</span> <span class=\"n\">curve</span><span class=\"p\">)</span>\n\n<span class=\"n\">sk1</span> <span class=\"o\">=</span> <span class=\"n\">make_key_from_seed</span><span class=\"p\">(</span><span class=\"s2\">\"1:</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">seed</span><span class=\"p\">)</span>\n<span class=\"n\">sk2</span> <span class=\"o\">=</span> <span class=\"n\">make_key_from_seed</span><span class=\"p\">(</span><span class=\"s2\">\"2:</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">seed</span><span class=\"p\">)</span>\n<span class=\"n\">sk3</span> <span class=\"o\">=</span> <span class=\"n\">make_key_from_seed</span><span class=\"p\">(</span><span class=\"s2\">\"3:</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">seed</span><span class=\"p\">)</span>\n</pre>\n<p>Load a verifying key from disk and print it using hex encoding in\nuncompressed and compressed format (defined in X9.62 and SEC1 standards):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyingKey</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"public.pem\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">VerifyingKey</span><span class=\"o\">.</span><span class=\"n\">from_pem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"uncompressed: </span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"s2\">\"uncompressed\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"compressed: </span><span class=\"si\">{0}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"s2\">\"compressed\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">()))</span>\n</pre>\n<p>Load a verifying key from a hex string from compressed format, output\nuncompressed:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">VerifyingKey</span><span class=\"p\">,</span> <span class=\"n\">NIST256p</span>\n\n<span class=\"n\">comp_str</span> <span class=\"o\">=</span> <span class=\"s1\">'022799c0d0ee09772fdd337d4f28dc155581951d07082fb19a38aa396b67e77759'</span>\n<span class=\"n\">vk</span> <span class=\"o\">=</span> <span class=\"n\">VerifyingKey</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"nb\">bytearray</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"n\">comp_str</span><span class=\"p\">),</span> <span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST256p</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vk</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"s2\">\"uncompressed\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"p\">())</span>\n</pre>\n<p>ECDH key exchange with remote party</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">ECDH</span><span class=\"p\">,</span> <span class=\"n\">NIST256p</span>\n\n<span class=\"n\">ecdh</span> <span class=\"o\">=</span> <span class=\"n\">ECDH</span><span class=\"p\">(</span><span class=\"n\">curve</span><span class=\"o\">=</span><span class=\"n\">NIST256p</span><span class=\"p\">)</span>\n<span class=\"n\">ecdh</span><span class=\"o\">.</span><span class=\"n\">generate_private_key</span><span class=\"p\">()</span>\n<span class=\"n\">local_public_key</span> <span class=\"o\">=</span> <span class=\"n\">ecdh</span><span class=\"o\">.</span><span class=\"n\">get_public_key</span><span class=\"p\">()</span>\n<span class=\"c1\">#send `local_public_key` to remote party and receive `remote_public_key` from remote party</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"remote_public_key.pem\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">remote_public_key</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">ecdh</span><span class=\"o\">.</span><span class=\"n\">load_received_public_key_pem</span><span class=\"p\">(</span><span class=\"n\">remote_public_key</span><span class=\"p\">)</span>\n<span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">ecdh</span><span class=\"o\">.</span><span class=\"n\">generate_sharedsecret_bytes</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6386674, "releases": {"0.10": [{"comment_text": "", "digests": {"md5": "e95941b3bcbf1726472bb724d7478551", "sha256": "67dae9e1af2b0fd71bc9a378654f7dc89211c1c5aee71e160f8cfce1fa6d6980"}, "downloads": -1, "filename": "ecdsa-0.10.tar.gz", "has_sig": false, "md5_digest": "e95941b3bcbf1726472bb724d7478551", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45153, "upload_time": "2013-10-23T18:47:11", "upload_time_iso_8601": "2013-10-23T18:47:11.942558Z", "url": "https://files.pythonhosted.org/packages/8a/52/d5517842ba27739f0fcf83afb3b33a40c4abbb3fb954719e44b02f2a0ef8/ecdsa-0.10.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "8ef586fe4dbb156697d756900cb41d7c", "sha256": "8e3b6c193f91dc94b2f3b0261e3eabbdc604f78ff99fdad324a56fdd0b5e958c"}, "downloads": -1, "filename": "ecdsa-0.11.tar.gz", "has_sig": false, "md5_digest": "8ef586fe4dbb156697d756900cb41d7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45689, "upload_time": "2014-03-10T22:54:27", "upload_time_iso_8601": "2014-03-10T22:54:27.566378Z", "url": "https://files.pythonhosted.org/packages/6c/3f/92fe5dcdcaa7bd117be21e5520c9a54375112b66ec000d209e9e9519fad1/ecdsa-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "553233ea1ab15a601dbe7ab69f641375", "sha256": "f52785ccb624a420dfee6d450c9fd043d03e3032a6ba650c97909bfd8a86ec73"}, "downloads": -1, "filename": "ecdsa-0.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "553233ea1ab15a601dbe7ab69f641375", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 86918, "upload_time": "2015-02-06T21:42:40", "upload_time_iso_8601": "2015-02-06T21:42:40.872501Z", "url": "https://files.pythonhosted.org/packages/fb/56/2d9097441b091c6ff1a7996cf1d47f1913924ee9cb756cc3c6665f220cb3/ecdsa-0.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3a4f41156392f71e0c790e497dae8b5", "sha256": "226fd3deb98dc62e9dbe300eb88a6f4db5d765ffae97c71e39c12c3eb4d5f0d9"}, "downloads": -1, "filename": "ecdsa-0.12.tar.gz", "has_sig": false, "md5_digest": "c3a4f41156392f71e0c790e497dae8b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55487, "upload_time": "2015-02-06T21:42:48", "upload_time_iso_8601": "2015-02-06T21:42:48.256569Z", "url": "https://files.pythonhosted.org/packages/1b/06/2d1896aa07c3fe0b5a46d02cb0b102abeb0453c92a50e58fbaf0b8b3313b/ecdsa-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "a325d50195d049599f9b578ec4417bc6", "sha256": "40d002cf360d0e035cf2cb985e1308d41aaa087cbfc135b2dc2d844296ea546c"}, "downloads": -1, "filename": "ecdsa-0.13-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a325d50195d049599f9b578ec4417bc6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 86911, "upload_time": "2015-02-07T18:26:20", "upload_time_iso_8601": "2015-02-07T18:26:20.328584Z", "url": "https://files.pythonhosted.org/packages/63/f4/73669d51825516ce8c43b816c0a6b64cd6eb71d08b99820c00792cb42222/ecdsa-0.13-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f60eda9cb5c46722856db41a3ae6670", "sha256": "64cf1ee26d1cde3c73c6d7d107f835fed7c6a2904aef9eac223d57ad800c43fa"}, "downloads": -1, "filename": "ecdsa-0.13.tar.gz", "has_sig": false, "md5_digest": "1f60eda9cb5c46722856db41a3ae6670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55579, "upload_time": "2015-02-07T18:26:23", "upload_time_iso_8601": "2015-02-07T18:26:23.030995Z", "url": "https://files.pythonhosted.org/packages/f9/e5/99ebb176e47f150ac115ffeda5fedb6a3dbb3c00c74a59fd84ddf12f5857/ecdsa-0.13.tar.gz", "yanked": false}], "0.13.1": [{"comment_text": "", "digests": {"md5": "9f9fc9a654bf0743bc0a7b213324d244", "sha256": "47d64429e90998846a141f5beadc1e4e8dc1d8a614e321a0609fef5df616a44a"}, "downloads": -1, "filename": "ecdsa-0.13.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9f9fc9a654bf0743bc0a7b213324d244", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 59034, "upload_time": "2019-04-17T14:02:43", "upload_time_iso_8601": "2019-04-17T14:02:43.375697Z", "url": "https://files.pythonhosted.org/packages/f9/2a/ed9be4ad09ee37a75d68ee2d7bf535148de4546a875da42e1135bc84d51a/ecdsa-0.13.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c77bcde4dc8e3b291d1362d406a5c43", "sha256": "713271197ad6e5bdf69d0b74118d4632de01e235ac4bdecc9fa565451cbfb3df"}, "downloads": -1, "filename": "ecdsa-0.13.1.tar.gz", "has_sig": false, "md5_digest": "9c77bcde4dc8e3b291d1362d406a5c43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61523, "upload_time": "2019-04-17T14:02:44", "upload_time_iso_8601": "2019-04-17T14:02:44.996604Z", "url": "https://files.pythonhosted.org/packages/db/2e/843cf62fb8807e02acac95caa4bc8dba792b5068e68c16c043c7f903714c/ecdsa-0.13.1.tar.gz", "yanked": false}], "0.13.2": [{"comment_text": "", "digests": {"md5": "07e6070e33de157448afc9f47b04e3a8", "sha256": "20c17e527e75acad8f402290e158a6ac178b91b881f941fc6ea305bfdfb9657c"}, "downloads": -1, "filename": "ecdsa-0.13.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "07e6070e33de157448afc9f47b04e3a8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 59060, "upload_time": "2019-04-17T19:34:16", "upload_time_iso_8601": "2019-04-17T19:34:16.411689Z", "url": "https://files.pythonhosted.org/packages/23/a8/8aa68e70959e1287da9154e5164bb8bd5dd7025e41ae54e8d177b8d165c9/ecdsa-0.13.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ce51d17c0751e5232be4eafd69b7f13", "sha256": "5c034ffa23413ac923541ceb3ac14ec15a0d2530690413bff58c12b80e56d884"}, "downloads": -1, "filename": "ecdsa-0.13.2.tar.gz", "has_sig": false, "md5_digest": "0ce51d17c0751e5232be4eafd69b7f13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 61595, "upload_time": "2019-04-17T19:34:18", "upload_time_iso_8601": "2019-04-17T19:34:18.134924Z", "url": "https://files.pythonhosted.org/packages/51/76/139bf6e9b7b6684d5891212cdbd9e0739f2bfc03f380a1a6ffa700f392ac/ecdsa-0.13.2.tar.gz", "yanked": false}], "0.13.3": [{"comment_text": "", "digests": {"md5": "531b03c68145ac3629461fc451bd0426", "sha256": "9814e700890991abeceeb2242586024d4758c8fc18445b194a49bd62d85861db"}, "downloads": -1, "filename": "ecdsa-0.13.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "531b03c68145ac3629461fc451bd0426", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 52113, "upload_time": "2019-10-07T14:05:22", "upload_time_iso_8601": "2019-10-07T14:05:22.583372Z", "url": "https://files.pythonhosted.org/packages/a6/81/2b170b460c84fdc8700cf08aa077ac6a9ff41f4ad3f05d0b3a64ba9f8f2e/ecdsa-0.13.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1b33f7fe171eb1278de6f93eefc34f8", "sha256": "163c80b064a763ea733870feb96f9dd9b92216cfcacd374837af18e4e8ec3d4d"}, "downloads": -1, "filename": "ecdsa-0.13.3.tar.gz", "has_sig": false, "md5_digest": "b1b33f7fe171eb1278de6f93eefc34f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 60477, "upload_time": "2019-10-07T14:05:24", "upload_time_iso_8601": "2019-10-07T14:05:24.318783Z", "url": "https://files.pythonhosted.org/packages/8c/d8/9c3596fd0f18ae0a76333492a119c00183323d8e64de1a4f4bd642856963/ecdsa-0.13.3.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "2f843c7399c5ceb46c6652fca64b04d2", "sha256": "da25d37406a664e9e4bcf009834bddfd98ec8d334cf2000621486515c6d1bc58"}, "downloads": -1, "filename": "ecdsa-0.14-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2f843c7399c5ceb46c6652fca64b04d2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 83204, "upload_time": "2019-11-06T19:06:52", "upload_time_iso_8601": "2019-11-06T19:06:52.056993Z", "url": "https://files.pythonhosted.org/packages/f9/67/ee62e7c338e7385bdd04d2702499cb504927d1d6db48aeb2b5e595c42cdf/ecdsa-0.14-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c16ceeeedce296f054aea35c1f7f1f7", "sha256": "4c8367f83216f9185c9b500d700c494e593af62a7980bfdfad9bd41e7969d69a"}, "downloads": -1, "filename": "ecdsa-0.14.tar.gz", "has_sig": false, "md5_digest": "9c16ceeeedce296f054aea35c1f7f1f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 100260, "upload_time": "2019-11-06T19:06:54", "upload_time_iso_8601": "2019-11-06T19:06:54.295416Z", "url": "https://files.pythonhosted.org/packages/2c/c3/99eed2aa1215c6f771c64e798c948b09b56ffcd0d06731bb64f73b9d9e1f/ecdsa-0.14.tar.gz", "yanked": false}], "0.14.1": [{"comment_text": "", "digests": {"md5": "2984f3cde64e614bf37e7d7fe1b4c55f", "sha256": "e108a5fe92c67639abae3260e43561af914e7fd0d27bae6d2ec1312ae7934dfe"}, "downloads": -1, "filename": "ecdsa-0.14.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2984f3cde64e614bf37e7d7fe1b4c55f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 79359, "upload_time": "2019-11-06T21:49:15", "upload_time_iso_8601": "2019-11-06T21:49:15.204402Z", "url": "https://files.pythonhosted.org/packages/a2/25/3bb32da623b39a27a07d194cd58e4540224421d924661de2e694304ae4fa/ecdsa-0.14.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e846959fcd69e4152e68dfaf8ba768b8", "sha256": "64c613005f13efec6541bb0a33290d0d03c27abab5f15fbab20fb0ee162bdd8e"}, "downloads": -1, "filename": "ecdsa-0.14.1.tar.gz", "has_sig": false, "md5_digest": "e846959fcd69e4152e68dfaf8ba768b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 100303, "upload_time": "2019-11-06T21:49:17", "upload_time_iso_8601": "2019-11-06T21:49:17.851876Z", "url": "https://files.pythonhosted.org/packages/b0/9e/dffa648ea8f2bc9e58e96a9fcb8702c4b4f520047071b257acfb41d6924f/ecdsa-0.14.1.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "b975940fb31e0fff0ec0e95fda07db72", "sha256": "867ec9cf6df0b03addc8ef66b56359643cb5d0c1dc329df76ba7ecfe256c8061"}, "downloads": -1, "filename": "ecdsa-0.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b975940fb31e0fff0ec0e95fda07db72", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 100181, "upload_time": "2020-01-02T16:06:42", "upload_time_iso_8601": "2020-01-02T16:06:42.015376Z", "url": "https://files.pythonhosted.org/packages/b8/11/4b4d30e4746584684c758d8f1ddc1fa5ab1470b6bf70bce4d9b235965e99/ecdsa-0.15-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "821d543047941dd26f543f62912230d4", "sha256": "8f12ac317f8a1318efa75757ef0a651abe12e51fc1af8838fb91079445227277"}, "downloads": -1, "filename": "ecdsa-0.15.tar.gz", "has_sig": false, "md5_digest": "821d543047941dd26f543f62912230d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 122119, "upload_time": "2020-01-02T16:06:44", "upload_time_iso_8601": "2020-01-02T16:06:44.098254Z", "url": "https://files.pythonhosted.org/packages/e3/7c/b508ade1feb47cd79222e06d85e477f5cfc4fb0455ad3c70eb6330fc49aa/ecdsa-0.15.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "7a4750df7b7b5147a78a69ff92056ead", "sha256": "f963025a4f6ced53ec63951aa4b1c1774b4d3ec7f008a5671abcf137c857aa00"}, "downloads": -1, "filename": "ecdsa-0.6.tar.gz", "has_sig": false, "md5_digest": "7a4750df7b7b5147a78a69ff92056ead", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35072, "upload_time": "2010-10-16T02:50:08", "upload_time_iso_8601": "2010-10-16T02:50:08.090445Z", "url": "https://files.pythonhosted.org/packages/50/ad/2ac887c3773a770a396995f2f74cd0cc64942cdeaf2bcc243cd2355d072b/ecdsa-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "cdf12b87e2f3cd96bac221b87a8eee52", "sha256": "3fe6ec84b6efadc5523e1549cec1cbd3f19f83bab28163802d024a717a7671cd"}, "downloads": -1, "filename": "ecdsa-0.7.tar.gz", "has_sig": false, "md5_digest": "cdf12b87e2f3cd96bac221b87a8eee52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35375, "upload_time": "2010-12-28T20:07:56", "upload_time_iso_8601": "2010-12-28T20:07:56.288499Z", "url": "https://files.pythonhosted.org/packages/fb/c5/49e23d246bda83e37a6a99ca0e2f6455d0b78f3a6c43b3d939a1f0dd02cf/ecdsa-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "a3575705afb24d7cbc1694960d3965b1", "sha256": "926dbc7f31f5e099079884e1ae8121d25c43b17f1db48d77c9540cd1e40acc1a"}, "downloads": -1, "filename": "ecdsa-0.8.tar.gz", "has_sig": false, "md5_digest": "a3575705afb24d7cbc1694960d3965b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35754, "upload_time": "2012-07-13T21:13:19", "upload_time_iso_8601": "2012-07-13T21:13:19.133900Z", "url": "https://files.pythonhosted.org/packages/92/de/b4299eab4b538170c089c2b1c4e75c031b6c3d71c29540fe15861cd178e3/ecdsa-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "2b9c35245ce391d6b7d8f991aad5c630", "sha256": "3f283a4769220dc59587677d264c6687ecd0dc068d6ad792d891d53757735800"}, "downloads": -1, "filename": "ecdsa-0.9.tar.gz", "has_sig": false, "md5_digest": "2b9c35245ce391d6b7d8f991aad5c630", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45178, "upload_time": "2013-10-02T00:11:45", "upload_time_iso_8601": "2013-10-02T00:11:45.804319Z", "url": "https://files.pythonhosted.org/packages/8d/b5/4956a11caa082de8b1f54d4bf0bd7e90076154c1dba152db58f79f2b638c/ecdsa-0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b975940fb31e0fff0ec0e95fda07db72", "sha256": "867ec9cf6df0b03addc8ef66b56359643cb5d0c1dc329df76ba7ecfe256c8061"}, "downloads": -1, "filename": "ecdsa-0.15-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b975940fb31e0fff0ec0e95fda07db72", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 100181, "upload_time": "2020-01-02T16:06:42", "upload_time_iso_8601": "2020-01-02T16:06:42.015376Z", "url": "https://files.pythonhosted.org/packages/b8/11/4b4d30e4746584684c758d8f1ddc1fa5ab1470b6bf70bce4d9b235965e99/ecdsa-0.15-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "821d543047941dd26f543f62912230d4", "sha256": "8f12ac317f8a1318efa75757ef0a651abe12e51fc1af8838fb91079445227277"}, "downloads": -1, "filename": "ecdsa-0.15.tar.gz", "has_sig": false, "md5_digest": "821d543047941dd26f543f62912230d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*", "size": 122119, "upload_time": "2020-01-02T16:06:44", "upload_time_iso_8601": "2020-01-02T16:06:44.098254Z", "url": "https://files.pythonhosted.org/packages/e3/7c/b508ade1feb47cd79222e06d85e477f5cfc4fb0455ad3c70eb6330fc49aa/ecdsa-0.15.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:03 2020"}