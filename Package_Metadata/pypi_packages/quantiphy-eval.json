{"info": {"author": "Ken Kundert", "author_email": "quantiphy@nurdletech.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering", "Topic :: Utilities"], "description": "QuantiPhy Eval \u2014 Computations with Physical Quantities\n======================================================\n\n:Author: Ken Kundert\n:Version: 0.2.0\n:Released: 2020-03-06\n\n\nA companion to `QuantiPhy <https://quantiphy.readthedocs.io>`_, *quantiphy_eval* \nevaluates strings containing simple algebraic expressions that involve \nquantities. It returns a quantity.  For example::\n\n    >>> from quantiphy_eval import evaluate\n\n    >>> average = evaluate('($1.2M + $1.3M)/2', '$')\n    >>> print(f'{average}')\n    $1.25M\n\n    >>> f_avg = evaluate('(122.317MHz + 129.349MHz)/2', 'Hz')\n    >>> print(f'{f_avg}')\n    125.83 MHz\n\nWith *QuantiPhy* the units do not survive operations, so you can specify the \nresolved units using the second argument.  In fact, the second argument is \npassed to *QuantiPhy* as the `model \n<https://quantiphy.readthedocs.io/en/stable/user.html#the-second-argument-the-model>`_, \nwhich allows you to give the return value a name and description along with \nunits, as demonstrated in the next example.\n\n*QuantiPhy Eval* provides three constants built-in: ``pi``, ``tau``, and ``e``.  \nHowever, you can pass in additional constants::\n\n    >>> from quantiphy import Quantity\n\n    >>> my_constants = dict(\n    ...     k = Quantity('k'),\n    ...     q = Quantity('q'),\n    ...     T = Quantity('25\u00b0C', scale='K'),\n    ... )\n    >>> Vt = evaluate('k*T/q', 'Vt V thermal voltage', constants=my_constants)\n    >>> print(Vt.render(show_label='f'))\n    Vt = 25.693 mV -- thermal voltage\n\n*QuantiPhy Eval* provides the following functions built-in: ``sin``, ``cos``, \n``tan``, ``sqrt``, ``abs``, ``trunc``, ``round`` and ``sgn``.  However, you can \npass in additional functions::\n\n    >>> def median(*args):\n    ...    args = sorted(args)\n    ...    l = len(args)\n    ...    m = l//2\n    ...    if l % 2:\n    ...        return args[m]\n    ...    return (args[m] + args[m-1])/2\n\n    >>> my_functions = dict(median=median)\n    >>> median_price = evaluate(\n    ...     'median($636122, $749151, $706781)',\n    ...     '$',\n    ...     functions=my_functions\n    ... )\n    >>> print(median_price.fixed(show_commas=True))\n    $706,781\n\n*QuantiPhy Eval* provides ``rm_commas`` function for removing commas from an \nexpression. This is used if your number contain commas. Simply stripping the \ncommas it would prevent you from using multi-argument functions, however after \nremoving the commas ``rm_commas`` also converts semicolons to commas.  So the \nprevious example could be rewritten as::\n\n    >>> from quantiphy_eval import evaluate, rm_commas\n\n    >>> median_price = evaluate(\n    ...     rm_commas('median($636,122; $749,151; $706,781)'),\n    ...     '$',\n    ...     functions=my_functions\n    ... )\n    >>> print(median_price.fixed(show_commas=True))\n    $706,781\n\nFinally, *QuantiPhy Eval* supports comments. A ``#`` and anything that follows \nit to the end of the line is ignored::\n\n    >>> average_price = evaluate(\n    ...     rm_commas('''\n    ...         (\n    ...             $636,122 +   # Zillow\n    ...             $749,151 +   # Redfin\n    ...             $706,781     # Trulia\n    ...         )/3\n    ...     '''),\n    ...     '$'\n    ... )\n    >>> print(average_price.fixed(show_commas=True, prec=2, strip_zeros=False))\n    $697,351.33\n\n\nReleases\n--------\n\n**Latest development release**:\n    | Version: 0.2.0\n    | Released: 2020-03-06\n\n**0.2 (2020-03-06)**:\n    - ``rm_commas`` now converts semicolons to commas\n    - support comments\n\n**0.1 (2020-03-05)**:\n    - Add support for user-defined constants and functions.\n    - add ``rm_commas`` function.\n\n**0.0 (2020-02-14)**:\n    Initial version.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "https://github.com/kenkundert/quantiphy_eval/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kenkundert/quantiphy_eval", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "quantiphy-eval", "package_url": "https://pypi.org/project/quantiphy-eval/", "platform": "", "project_url": "https://pypi.org/project/quantiphy-eval/", "project_urls": {"Download": "https://github.com/kenkundert/quantiphy_eval/tarball/master", "Homepage": "https://github.com/kenkundert/quantiphy_eval"}, "release_url": "https://pypi.org/project/quantiphy-eval/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "calculations with physical quantities", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td>Ken Kundert</td></tr>\n<tr><th>Version:</th>\n<td>0.2.0</td></tr>\n<tr><th>Released:</th><td>2020-03-06</td>\n</tr>\n</tbody>\n</table>\n<p>A companion to <a href=\"https://quantiphy.readthedocs.io\" rel=\"nofollow\">QuantiPhy</a>, <em>quantiphy_eval</em>\nevaluates strings containing simple algebraic expressions that involve\nquantities. It returns a quantity.  For example:</p>\n<pre>&gt;&gt;&gt; from quantiphy_eval import evaluate\n\n&gt;&gt;&gt; average = evaluate('($1.2M + $1.3M)/2', '$')\n&gt;&gt;&gt; print(f'{average}')\n$1.25M\n\n&gt;&gt;&gt; f_avg = evaluate('(122.317MHz + 129.349MHz)/2', 'Hz')\n&gt;&gt;&gt; print(f'{f_avg}')\n125.83 MHz\n</pre>\n<p>With <em>QuantiPhy</em> the units do not survive operations, so you can specify the\nresolved units using the second argument.  In fact, the second argument is\npassed to <em>QuantiPhy</em> as the <a href=\"https://quantiphy.readthedocs.io/en/stable/user.html#the-second-argument-the-model\" rel=\"nofollow\">model</a>,\nwhich allows you to give the return value a name and description along with\nunits, as demonstrated in the next example.</p>\n<p><em>QuantiPhy Eval</em> provides three constants built-in: <tt>pi</tt>, <tt>tau</tt>, and <tt>e</tt>.\nHowever, you can pass in additional constants:</p>\n<pre>&gt;&gt;&gt; from quantiphy import Quantity\n\n&gt;&gt;&gt; my_constants = dict(\n...     k = Quantity('k'),\n...     q = Quantity('q'),\n...     T = Quantity('25\u00b0C', scale='K'),\n... )\n&gt;&gt;&gt; Vt = evaluate('k*T/q', 'Vt V thermal voltage', constants=my_constants)\n&gt;&gt;&gt; print(Vt.render(show_label='f'))\nVt = 25.693 mV -- thermal voltage\n</pre>\n<p><em>QuantiPhy Eval</em> provides the following functions built-in: <tt>sin</tt>, <tt>cos</tt>,\n<tt>tan</tt>, <tt>sqrt</tt>, <tt>abs</tt>, <tt>trunc</tt>, <tt>round</tt> and <tt>sgn</tt>.  However, you can\npass in additional functions:</p>\n<pre>&gt;&gt;&gt; def median(*args):\n...    args = sorted(args)\n...    l = len(args)\n...    m = l//2\n...    if l % 2:\n...        return args[m]\n...    return (args[m] + args[m-1])/2\n\n&gt;&gt;&gt; my_functions = dict(median=median)\n&gt;&gt;&gt; median_price = evaluate(\n...     'median($636122, $749151, $706781)',\n...     '$',\n...     functions=my_functions\n... )\n&gt;&gt;&gt; print(median_price.fixed(show_commas=True))\n$706,781\n</pre>\n<p><em>QuantiPhy Eval</em> provides <tt>rm_commas</tt> function for removing commas from an\nexpression. This is used if your number contain commas. Simply stripping the\ncommas it would prevent you from using multi-argument functions, however after\nremoving the commas <tt>rm_commas</tt> also converts semicolons to commas.  So the\nprevious example could be rewritten as:</p>\n<pre>&gt;&gt;&gt; from quantiphy_eval import evaluate, rm_commas\n\n&gt;&gt;&gt; median_price = evaluate(\n...     rm_commas('median($636,122; $749,151; $706,781)'),\n...     '$',\n...     functions=my_functions\n... )\n&gt;&gt;&gt; print(median_price.fixed(show_commas=True))\n$706,781\n</pre>\n<p>Finally, <em>QuantiPhy Eval</em> supports comments. A <tt>#</tt> and anything that follows\nit to the end of the line is ignored:</p>\n<pre>&gt;&gt;&gt; average_price = evaluate(\n...     rm_commas('''\n...         (\n...             $636,122 +   # Zillow\n...             $749,151 +   # Redfin\n...             $706,781     # Trulia\n...         )/3\n...     '''),\n...     '$'\n... )\n&gt;&gt;&gt; print(average_price.fixed(show_commas=True, prec=2, strip_zeros=False))\n$697,351.33\n</pre>\n<div id=\"releases\">\n<h2>Releases</h2>\n<dl>\n<dt><strong>Latest development release</strong>:</dt>\n<dd><div>\n<div>Version: 0.2.0</div>\n<div>Released: 2020-03-06</div>\n</div>\n</dd>\n<dt><strong>0.2 (2020-03-06)</strong>:</dt>\n<dd><ul>\n<li><tt>rm_commas</tt> now converts semicolons to commas</li>\n<li>support comments</li>\n</ul>\n</dd>\n<dt><strong>0.1 (2020-03-05)</strong>:</dt>\n<dd><ul>\n<li>Add support for user-defined constants and functions.</li>\n<li>add <tt>rm_commas</tt> function.</li>\n</ul>\n</dd>\n<dt><strong>0.0 (2020-02-14)</strong>:</dt>\n<dd>Initial version.</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 6765587, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "be39ca82ad91850297650db8a591948d", "sha256": "3d650f37f2783db31cbd23c7b50b642242d3d8b740838ce98aa1cfb00ace39f8"}, "downloads": -1, "filename": "quantiphy_eval-0.1.0.tar.gz", "has_sig": false, "md5_digest": "be39ca82ad91850297650db8a591948d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5544, "upload_time": "2020-03-06T09:30:47", "upload_time_iso_8601": "2020-03-06T09:30:47.160806Z", "url": "https://files.pythonhosted.org/packages/d7/52/3286f97087a2ce78e69ba36b60ac1f629c3711604762ca32430738b16b23/quantiphy_eval-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "87290092b031d2a3a95c05dd1495b7cf", "sha256": "2172936c799952ef049022b70beaacd097638a22fae43b65792b3f956ead2b4c"}, "downloads": -1, "filename": "quantiphy_eval-0.2.0.tar.gz", "has_sig": false, "md5_digest": "87290092b031d2a3a95c05dd1495b7cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6115, "upload_time": "2020-03-06T22:46:22", "upload_time_iso_8601": "2020-03-06T22:46:22.746639Z", "url": "https://files.pythonhosted.org/packages/10/da/09696bce10c00e84c1d90b052f5fb8a44c2ccd25ffc4f5a5a7c4819901cb/quantiphy_eval-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "87290092b031d2a3a95c05dd1495b7cf", "sha256": "2172936c799952ef049022b70beaacd097638a22fae43b65792b3f956ead2b4c"}, "downloads": -1, "filename": "quantiphy_eval-0.2.0.tar.gz", "has_sig": false, "md5_digest": "87290092b031d2a3a95c05dd1495b7cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6115, "upload_time": "2020-03-06T22:46:22", "upload_time_iso_8601": "2020-03-06T22:46:22.746639Z", "url": "https://files.pythonhosted.org/packages/10/da/09696bce10c00e84c1d90b052f5fb8a44c2ccd25ffc4f5a5a7c4819901cb/quantiphy_eval-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:54 2020"}