{"info": {"author": "David Donna", "author_email": "davidadonna@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "Minform\n=======\n\n.. image:: https://img.shields.io/travis/daviddonna/minform.svg\n   :target: https://travis-ci.org/daviddonna/minform\n.. image:: http://img.shields.io/pypi/v/minform.svg\n   :target: https://pypi.python.org/pypi/minform\n\nThe declarative ease of\n`WTForms <https://github.com/wtforms/wtforms>`_, the small data\nfootprint of\n`struct <https://docs.python.org/3/library/struct.html>`_.\n\nFor more detailed examples, read the full docs at\nhttps://minform.readthedocs.org.\n\nWhy does Minform exist?\n-----------------------\n\nLet's talk about data size.\n\nSay you have a fleet of devices with cell modems that report to a web server.\nHere's an example of a data packet struct you might use:\n\n.. code-block:: c\n\n    struct sensor_data {\n        char version[8];\n        char serial[12];\n        int32_t latitude;    // fixed-point * 100000\n        int32_t longitude;   // fixed-point * 100000\n        int16_t temperature; // fixed-point * 100\n        uint16_t pings;\n        uint8_t battery_pct;\n    };\n\nLet's say they're reporting their data in JSON format, because that's lighter\nthan XML but still coherent to most server frameworks. Here's a data packet:\n\n.. code-block:: javascript\n\n    {\n        \"version\": \"1.0\",\n        \"serial\": \"DEADBEEF\",\n        \"latitude\": 4071270,\n        \"longitude\": -7400590,\n        \"temperature\": 3200,\n        \"pings\": 123,\n        \"battery_pct\": 62\n    }\n\nIf you take out all the whitespace, that's **144 bytes**. (ASCII encoding).\nMaybe that's all you need, but maybe you need to store billions or trillions\nof these little guys. Worse, maybe you need to pay through the tear ducts for\ncellular data. It would be nice for that data to be smaller, and to be\npredictably sized.\n\nBesides, let's face it: serializing to JSON from C is a pain in the patoot.\nDepending on the library, you could be looking at ten or twenty lines of code\n(or a truly epic ``sprintf``), just to serialize a record.\n\nOn the Python side, we can probably just use a form library like WTForms to\nvalidate incoming data, but we've already paid a price to make that data\nserver-friendly.\n\nWhat can Minform do for me?\n---------------------------\n\nLet's build a Minform form to handle incoming sensor data.\n\n.. code-block:: python\n\n    from minform import *\n\n    class SensorData(BinaryForm):\n\n        order = LITTLE_ENDIAN  # let's say our devices are little-endian\n        version = BytesField(max_length=8, length=AUTOMATIC)\n        serial = BytesField(max_length=12, length=AUTOMATIC)\n        latitude = Int32Field()\n        longitude = Int32Field()\n        temperature = Int16Field()\n        pings = UInt16Field()\n        battery_pct = UInt8Field()\n\n        # We could cut the serialized record off three bytes early, but let's\n        # say we want to break on four-byte word boundaries for reasons.\n        padding = BlankBytes(3)\n\nHere's the C code that will serialize your structure:\n\n.. code-block:: c\n\n    #include <string.h>\n\n    char send_buffer[36];\n    struct sensor_data data;\n\n    // ...\n\n    memcpy(send_buffer, &data, sizeof(data));\n\nAnd here's the Python that will receive it:\n\n.. code-block:: python\n\n    form = SensorData.unpack(serialized_data)\n\nThat serialized record is **36 bytes**. 36 on the wire, 36 in a file. You may\nneed to tweak the form definition, depending on your C compiler and the target\narchitecture, but Minforms gives you the tools to cope with padding bytes, and\neven mixed byte ordering.\n\nLet's fill in some gaps\n-----------------------\n\nMinforms are an awful lot like WTForms: you subclass ``minform.BinaryForm``,\nand add ``BinaryField``\\ s as class properties. Here's another quick example:\n\n.. code:: python\n\n    import minform\n\n    class MyForm(minform.BinaryForm):\n        '''\n        This is a subclass of wtforms.Form: you can validate data with it,\n        construct it from an HTML form, extract the data as a Python dict, etc.\n        '''\n        first_name = minform.BytesField('First Name', max_length=10)\n        last_name = minform.BytesField('Last Name', max_length=10)\n        age = minform.UInt8Field('Age')\n\n    #               first_name (10)          last_name (10)           age (1)\n    packed_data = b'David\\x00\\x00\\x00\\x00\\x00Donna\\x00\\x00\\x00\\x00\\x00\\x18'\n    form = MyForm.unpack(packed_data)\n    assert form.data == {\n        'first_name': b'David',\n        'last_name': b'Donna',\n        'age': 24,\n    }\n\n    next_form = MyForm(first_name=b'Foo', last_name=b'Barsson', age=100)\n    packed = next_form.pack()\n    assert packed == b'Foo\\x00\\x00\\x00\\x00\\x00\\x00\\x00Barsson\\x00\\x00\\x00\\x64'\n\nBecause the library is built on ``struct``, binary serializations of a form's\ndata are in fixed-length buffers. This makes them easier to store, and easy to\nmap onto relatively naive serializations of C structs. It also allows for\nclear documentation of the binary format, because the data maps predictably\nonto different positions in a packed buffer.\n\nCompound BinaryFields allow you to create nested structures that still\nserialize into flat buffers.\n\n.. code:: python\n\n    class MyBigBadForm(minform.BinaryForm):\n        \"\"\"\n        This is taking a turn for campy criminality.\n        \"\"\"\n        riches = minform.Int16Field()\n        goons = minform.BinaryFieldList(Person, max_entries=4, length=minform.EXPLICIT)\n\n    squad = MyBigBadForm(riches=55223, goons=[\n        {'first_name': 'Joey', 'last_name': 'Schmoey', 'age': 32},\n        {'first_name': 'Manny', 'last_name': 'The Man', 'age': 40},\n        {'first_name': 'Gerta', 'last_name': 'Goethe', 'age': 52},\n    ])\n    assert squad.pack() == (b'\\xd7\\xb7' +                                  # riches\n                            b'\\x03' +                                      # goons prefix\n                            b'Joey\\0\\0\\0\\0\\0\\0Schmoey\\0\\0\\0\\x20' +         # goons[0]\n                            b'Manny\\0\\0\\0\\0\\0The Man\\0\\0\\0\\x28' +          # goons[1]\n                            b'Gerta\\0\\0\\0\\0\\0Goethe\\0\\0\\0\\0\\x34' +         # goons[2]\n                            b'\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0') # goons[3]\n\nEven with an entire set of blank bytes for ``goons[3]``, that's 87 bytes, vs\n185 for the JSON representation.\n\n\n\n\nHistory\n-------\n\n0.1.0 (10/28/2015)\n\n    Initial release\n\n0.2.1 (11/22/2015)\n\n    - Add pack_into and unpack_from methods to BinaryForm and BinaryItem.\n    - Rename all 'buf' arguments to 'buffer'.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/daviddonna/minform", "keywords": "minform wtforms struct binary", "license": "ISCL", "maintainer": null, "maintainer_email": null, "name": "minform", "package_url": "https://pypi.org/project/minform/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/minform/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/daviddonna/minform"}, "release_url": "https://pypi.org/project/minform/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "WTForms/struct integration to validate and serialize to packed buffers of binary data.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/daviddonna/minform\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/daviddonna/minform.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/243faacadc06475e6183d85efeb88ff168ab9525/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6461766964646f6e6e612f6d696e666f726d2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/minform\" rel=\"nofollow\"><img alt=\"http://img.shields.io/pypi/v/minform.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89cb3644ab16ed90ea37596657ca62541eb66b73/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f6d696e666f726d2e737667\"></a>\n<p>The declarative ease of\n<a href=\"https://github.com/wtforms/wtforms\" rel=\"nofollow\">WTForms</a>, the small data\nfootprint of\n<a href=\"https://docs.python.org/3/library/struct.html\" rel=\"nofollow\">struct</a>.</p>\n<p>For more detailed examples, read the full docs at\n<a href=\"https://minform.readthedocs.org\" rel=\"nofollow\">https://minform.readthedocs.org</a>.</p>\n<div id=\"why-does-minform-exist\">\n<h2>Why does Minform exist?</h2>\n<p>Let\u2019s talk about data size.</p>\n<p>Say you have a fleet of devices with cell modems that report to a web server.\nHere\u2019s an example of a data packet struct you might use:</p>\n<pre><span class=\"k\">struct</span> <span class=\"n\">sensor_data</span> <span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">version</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">];</span>\n    <span class=\"kt\">char</span> <span class=\"n\">serial</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">];</span>\n    <span class=\"kt\">int32_t</span> <span class=\"n\">latitude</span><span class=\"p\">;</span>    <span class=\"c1\">// fixed-point * 100000\n</span>    <span class=\"kt\">int32_t</span> <span class=\"n\">longitude</span><span class=\"p\">;</span>   <span class=\"c1\">// fixed-point * 100000\n</span>    <span class=\"kt\">int16_t</span> <span class=\"n\">temperature</span><span class=\"p\">;</span> <span class=\"c1\">// fixed-point * 100\n</span>    <span class=\"kt\">uint16_t</span> <span class=\"n\">pings</span><span class=\"p\">;</span>\n    <span class=\"kt\">uint8_t</span> <span class=\"n\">battery_pct</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</pre>\n<p>Let\u2019s say they\u2019re reporting their data in JSON format, because that\u2019s lighter\nthan XML but still coherent to most server frameworks. Here\u2019s a data packet:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"version\"</span><span class=\"o\">:</span> <span class=\"s2\">\"1.0\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"serial\"</span><span class=\"o\">:</span> <span class=\"s2\">\"DEADBEEF\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"latitude\"</span><span class=\"o\">:</span> <span class=\"mi\">4071270</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"longitude\"</span><span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">7400590</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"temperature\"</span><span class=\"o\">:</span> <span class=\"mi\">3200</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"pings\"</span><span class=\"o\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"battery_pct\"</span><span class=\"o\">:</span> <span class=\"mi\">62</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If you take out all the whitespace, that\u2019s <strong>144 bytes</strong>. (ASCII encoding).\nMaybe that\u2019s all you need, but maybe you need to store billions or trillions\nof these little guys. Worse, maybe you need to pay through the tear ducts for\ncellular data. It would be nice for that data to be smaller, and to be\npredictably sized.</p>\n<p>Besides, let\u2019s face it: serializing to JSON from C is a pain in the patoot.\nDepending on the library, you could be looking at ten or twenty lines of code\n(or a truly epic <tt>sprintf</tt>), just to serialize a record.</p>\n<p>On the Python side, we can probably just use a form library like WTForms to\nvalidate incoming data, but we\u2019ve already paid a price to make that data\nserver-friendly.</p>\n</div>\n<div id=\"what-can-minform-do-for-me\">\n<h2>What can Minform do for me?</h2>\n<p>Let\u2019s build a Minform form to handle incoming sensor data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">minform</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SensorData</span><span class=\"p\">(</span><span class=\"n\">BinaryForm</span><span class=\"p\">):</span>\n\n    <span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"n\">LITTLE_ENDIAN</span>  <span class=\"c1\"># let's say our devices are little-endian</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">BytesField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">AUTOMATIC</span><span class=\"p\">)</span>\n    <span class=\"n\">serial</span> <span class=\"o\">=</span> <span class=\"n\">BytesField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">AUTOMATIC</span><span class=\"p\">)</span>\n    <span class=\"n\">latitude</span> <span class=\"o\">=</span> <span class=\"n\">Int32Field</span><span class=\"p\">()</span>\n    <span class=\"n\">longitude</span> <span class=\"o\">=</span> <span class=\"n\">Int32Field</span><span class=\"p\">()</span>\n    <span class=\"n\">temperature</span> <span class=\"o\">=</span> <span class=\"n\">Int16Field</span><span class=\"p\">()</span>\n    <span class=\"n\">pings</span> <span class=\"o\">=</span> <span class=\"n\">UInt16Field</span><span class=\"p\">()</span>\n    <span class=\"n\">battery_pct</span> <span class=\"o\">=</span> <span class=\"n\">UInt8Field</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># We could cut the serialized record off three bytes early, but let's</span>\n    <span class=\"c1\"># say we want to break on four-byte word boundaries for reasons.</span>\n    <span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"n\">BlankBytes</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>Here\u2019s the C code that will serialize your structure:</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span>\n<span class=\"kt\">char</span> <span class=\"n\">send_buffer</span><span class=\"p\">[</span><span class=\"mi\">36</span><span class=\"p\">];</span>\n<span class=\"k\">struct</span> <span class=\"n\">sensor_data</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// ...\n</span>\n<span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">send_buffer</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">));</span>\n</pre>\n<p>And here\u2019s the Python that will receive it:</p>\n<pre><span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">SensorData</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">serialized_data</span><span class=\"p\">)</span>\n</pre>\n<p>That serialized record is <strong>36 bytes</strong>. 36 on the wire, 36 in a file. You may\nneed to tweak the form definition, depending on your C compiler and the target\narchitecture, but Minforms gives you the tools to cope with padding bytes, and\neven mixed byte ordering.</p>\n</div>\n<div id=\"let-s-fill-in-some-gaps\">\n<h2>Let\u2019s fill in some gaps</h2>\n<p>Minforms are an awful lot like WTForms: you subclass <tt>minform.BinaryForm</tt>,\nand add <tt>BinaryField</tt>s as class properties. Here\u2019s another quick example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">minform</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyForm</span><span class=\"p\">(</span><span class=\"n\">minform</span><span class=\"o\">.</span><span class=\"n\">BinaryForm</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''\n    This is a subclass of wtforms.Form: you can validate data with it,\n    construct it from an HTML form, extract the data as a Python dict, etc.\n    '''</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">minform</span><span class=\"o\">.</span><span class=\"n\">BytesField</span><span class=\"p\">(</span><span class=\"s1\">'First Name'</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">minform</span><span class=\"o\">.</span><span class=\"n\">BytesField</span><span class=\"p\">(</span><span class=\"s1\">'Last Name'</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">minform</span><span class=\"o\">.</span><span class=\"n\">UInt8Field</span><span class=\"p\">(</span><span class=\"s1\">'Age'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#               first_name (10)          last_name (10)           age (1)</span>\n<span class=\"n\">packed_data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'David</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00</span><span class=\"s1\">Donna</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00\\x18</span><span class=\"s1\">'</span>\n<span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">packed_data</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'David'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">'Donna'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">24</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">next_form</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'Foo'</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s1\">'Barsson'</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">packed</span> <span class=\"o\">=</span> <span class=\"n\">next_form</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">packed</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">'Foo</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span class=\"s1\">Barsson</span><span class=\"se\">\\x00\\x00\\x00\\x64</span><span class=\"s1\">'</span>\n</pre>\n<p>Because the library is built on <tt>struct</tt>, binary serializations of a form\u2019s\ndata are in fixed-length buffers. This makes them easier to store, and easy to\nmap onto relatively naive serializations of C structs. It also allows for\nclear documentation of the binary format, because the data maps predictably\nonto different positions in a packed buffer.</p>\n<p>Compound BinaryFields allow you to create nested structures that still\nserialize into flat buffers.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyBigBadForm</span><span class=\"p\">(</span><span class=\"n\">minform</span><span class=\"o\">.</span><span class=\"n\">BinaryForm</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    This is taking a turn for campy criminality.\n    \"\"\"</span>\n    <span class=\"n\">riches</span> <span class=\"o\">=</span> <span class=\"n\">minform</span><span class=\"o\">.</span><span class=\"n\">Int16Field</span><span class=\"p\">()</span>\n    <span class=\"n\">goons</span> <span class=\"o\">=</span> <span class=\"n\">minform</span><span class=\"o\">.</span><span class=\"n\">BinaryFieldList</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">max_entries</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"n\">minform</span><span class=\"o\">.</span><span class=\"n\">EXPLICIT</span><span class=\"p\">)</span>\n\n<span class=\"n\">squad</span> <span class=\"o\">=</span> <span class=\"n\">MyBigBadForm</span><span class=\"p\">(</span><span class=\"n\">riches</span><span class=\"o\">=</span><span class=\"mi\">55223</span><span class=\"p\">,</span> <span class=\"n\">goons</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Joey'</span><span class=\"p\">,</span> <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Schmoey'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">32</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Manny'</span><span class=\"p\">,</span> <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'The Man'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'first_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Gerta'</span><span class=\"p\">,</span> <span class=\"s1\">'last_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Goethe'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">52</span><span class=\"p\">},</span>\n<span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">squad</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xd7\\xb7</span><span class=\"s1\">'</span> <span class=\"o\">+</span>                                  <span class=\"c1\"># riches</span>\n                        <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x03</span><span class=\"s1\">'</span> <span class=\"o\">+</span>                                      <span class=\"c1\"># goons prefix</span>\n                        <span class=\"sa\">b</span><span class=\"s1\">'Joey</span><span class=\"se\">\\0\\0\\0\\0\\0\\0</span><span class=\"s1\">Schmoey</span><span class=\"se\">\\0\\0\\0\\x20</span><span class=\"s1\">'</span> <span class=\"o\">+</span>         <span class=\"c1\"># goons[0]</span>\n                        <span class=\"sa\">b</span><span class=\"s1\">'Manny</span><span class=\"se\">\\0\\0\\0\\0\\0</span><span class=\"s1\">The Man</span><span class=\"se\">\\0\\0\\0\\x28</span><span class=\"s1\">'</span> <span class=\"o\">+</span>          <span class=\"c1\"># goons[1]</span>\n                        <span class=\"sa\">b</span><span class=\"s1\">'Gerta</span><span class=\"se\">\\0\\0\\0\\0\\0</span><span class=\"s1\">Goethe</span><span class=\"se\">\\0\\0\\0\\0\\x34</span><span class=\"s1\">'</span> <span class=\"o\">+</span>         <span class=\"c1\"># goons[2]</span>\n                        <span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0</span><span class=\"s1\">'</span><span class=\"p\">)</span> <span class=\"c1\"># goons[3]</span>\n</pre>\n<p>Even with an entire set of blank bytes for <tt>goons[3]</tt>, that\u2019s 87 bytes, vs\n185 for the JSON representation.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<p>0.1.0 (10/28/2015)</p>\n<blockquote>\nInitial release</blockquote>\n<p>0.2.1 (11/22/2015)</p>\n<blockquote>\n<ul>\n<li>Add pack_into and unpack_from methods to BinaryForm and BinaryItem.</li>\n<li>Rename all \u2018buf\u2019 arguments to \u2018buffer\u2019.</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 1828569, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fe621934ed6d32bcb5c871bf919e508c", "sha256": "9731b533ea395101a815bd21b4cc4d67e4a30f0af7b98759eefba18ea28fca3c"}, "downloads": -1, "filename": "minform-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fe621934ed6d32bcb5c871bf919e508c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24269, "upload_time": "2015-10-29T04:22:16", "upload_time_iso_8601": "2015-10-29T04:22:16.315295Z", "url": "https://files.pythonhosted.org/packages/c1/78/80d76b5c3dbb0296d8e3910b8c6e96acbe2423fba47eda6192606d2ce838/minform-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "d6cd1637809c8d841d6811a9355bed13", "sha256": "be9d54c35c6ad6db2c9c305eb9329a076777d1ca6427552d869a835bd3a73016"}, "downloads": -1, "filename": "minform-0.1.2.tar.gz", "has_sig": false, "md5_digest": "d6cd1637809c8d841d6811a9355bed13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25658, "upload_time": "2015-11-21T09:11:02", "upload_time_iso_8601": "2015-11-21T09:11:02.138124Z", "url": "https://files.pythonhosted.org/packages/ec/52/b3522adb3963acc4d96f04191bd8465b65e258db3d862b0702ea1440c977/minform-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "801397191e864e6cce00d144f1583c27", "sha256": "bb38b59e66fd2dd6fe973dc1dcd95a8a62ff2b073e2de57ebc61243b0af4493b"}, "downloads": -1, "filename": "minform-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "801397191e864e6cce00d144f1583c27", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 15465, "upload_time": "2015-11-22T01:56:43", "upload_time_iso_8601": "2015-11-22T01:56:43.597270Z", "url": "https://files.pythonhosted.org/packages/2f/1a/37d68eb34ee977e042b026d2a39620c428cccb29afa538263f98f436e337/minform-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22a8bafb5ee562fc5c6a0092e200b833", "sha256": "89672dfc43d1353b70b5ac1b075cdc357e757c1d2a2dc196bba02441f5fc6dae"}, "downloads": -1, "filename": "minform-0.1.3.tar.gz", "has_sig": false, "md5_digest": "22a8bafb5ee562fc5c6a0092e200b833", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26377, "upload_time": "2015-11-22T01:56:30", "upload_time_iso_8601": "2015-11-22T01:56:30.239690Z", "url": "https://files.pythonhosted.org/packages/63/b4/5d72ee0e4a19b69216835ae44ce257ff3c86ca2fd285936963dd35c24001/minform-0.1.3.tar.gz", "yanked": false}], "0.2.0": [], "0.2.1": [{"comment_text": "", "digests": {"md5": "b0bb03506282da3bed884dfffaca6552", "sha256": "694a23555cad023b334bac8afc1471149c246230c300ecf8acb49dc90b1a34d9"}, "downloads": -1, "filename": "minform-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0bb03506282da3bed884dfffaca6552", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 16255, "upload_time": "2015-11-22T22:02:25", "upload_time_iso_8601": "2015-11-22T22:02:25.842361Z", "url": "https://files.pythonhosted.org/packages/be/b1/1419f6fabbf884fa552f997996f1914fdef5e96c0dd4054021c2adf7ff2d/minform-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a98da02b1c5efa9730826483419b4f52", "sha256": "713644aee229459519cbcf1bbf8254731098302537e02f98bd43ce3688c76e5c"}, "downloads": -1, "filename": "minform-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a98da02b1c5efa9730826483419b4f52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27688, "upload_time": "2015-11-22T22:01:28", "upload_time_iso_8601": "2015-11-22T22:01:28.680561Z", "url": "https://files.pythonhosted.org/packages/b3/49/bbb2c727d0d9dfca48ea6b8e60de93d04f390cbf0fc2faeb8fea66041198/minform-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b0bb03506282da3bed884dfffaca6552", "sha256": "694a23555cad023b334bac8afc1471149c246230c300ecf8acb49dc90b1a34d9"}, "downloads": -1, "filename": "minform-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0bb03506282da3bed884dfffaca6552", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 16255, "upload_time": "2015-11-22T22:02:25", "upload_time_iso_8601": "2015-11-22T22:02:25.842361Z", "url": "https://files.pythonhosted.org/packages/be/b1/1419f6fabbf884fa552f997996f1914fdef5e96c0dd4054021c2adf7ff2d/minform-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a98da02b1c5efa9730826483419b4f52", "sha256": "713644aee229459519cbcf1bbf8254731098302537e02f98bd43ce3688c76e5c"}, "downloads": -1, "filename": "minform-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a98da02b1c5efa9730826483419b4f52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27688, "upload_time": "2015-11-22T22:01:28", "upload_time_iso_8601": "2015-11-22T22:01:28.680561Z", "url": "https://files.pythonhosted.org/packages/b3/49/bbb2c727d0d9dfca48ea6b8e60de93d04f390cbf0fc2faeb8fea66041198/minform-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:29 2020"}