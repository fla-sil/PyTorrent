{"info": {"author": "Carlos Huamani", "author_email": "carlos.hs.92@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "==================\nEasy Test Selenium\n==================\n\n**Easy Test Selenium** es un mini framework el cual da una propuesta de como debe ser ordenado las pruebas funcionales\ny asu vez presenta un marco de trabajo escalable y facil de editar.\n\nPara comenzar a usar **Easy Test Selenium** se debe ejecutar lo siguiente:\n\n\n    pip install easy_test\n    easy_test startproject \"nombre de proyecto\"\n\n\nLuego de haber ejecutado estas lineas. Dentro de la carpeta creada, podemos ver que tenemos una carpeta llamada\n**principal** y un archivo con el nombre de **manage.py**\n\nEl directorio **principal** contiene el archivo de configuraci\u00f3n **settings.py**. Este archivo contiene la\nconfiguraci\u00f3n de los webdrivers a utilizar, las apps a ser testeadas, entre otros.\n\nAgregando pruebas\n-----------------\n\nNecesitamos entrar al proyecto creado y luego ejecutar lo siguiente:\n\n\n    python manage.py newtest 'prueba_1'\n\n\nLuego entramos a nuestro archivo settings.py y donde dice WEB_DRIVERS agregamos el webdriver a utilizar indicando\nel navegador y el path si lo tuviera.\n\n\nEjecutando nuestros tests\n-------------------------\n\nPara ejecutar todos nuestros tests ingresamos el siguiente comando:\n\n\n    python manage.py test all\n\n\nEn caso que deseemos ejecutar solo un test pues indicamos el test en vez indicar all:\n\n\n    python manage.py 'prueba_1'\n\n\nLa documentaci\u00f3n estar\u00e1 pr\u00f3ximamente en `FrontEnd Labs <http://frontend-labs.com/>`_.\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/carloshs92/easy_test_selenium/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/carloshs92/easy_test_selenium", "keywords": "test,functional test,selenium", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "easy_test", "package_url": "https://pypi.org/project/easy_test/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/easy_test/", "project_urls": {"Download": "https://github.com/carloshs92/easy_test_selenium/archive/master.zip", "Homepage": "https://github.com/carloshs92/easy_test_selenium"}, "release_url": "https://pypi.org/project/easy_test/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "A python mini framework for tests that use Selenium", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Easy Test Selenium</strong> es un mini framework el cual da una propuesta de como debe ser ordenado las pruebas funcionales\ny asu vez presenta un marco de trabajo escalable y facil de editar.</p>\n<p>Para comenzar a usar <strong>Easy Test Selenium</strong> se debe ejecutar lo siguiente:</p>\n<blockquote>\npip install easy_test\neasy_test startproject \u201cnombre de proyecto\u201d</blockquote>\n<p>Luego de haber ejecutado estas lineas. Dentro de la carpeta creada, podemos ver que tenemos una carpeta llamada\n<strong>principal</strong> y un archivo con el nombre de <strong>manage.py</strong></p>\n<p>El directorio <strong>principal</strong> contiene el archivo de configuraci\u00f3n <strong>settings.py</strong>. Este archivo contiene la\nconfiguraci\u00f3n de los webdrivers a utilizar, las apps a ser testeadas, entre otros.</p>\n<div id=\"agregando-pruebas\">\n<h2>Agregando pruebas</h2>\n<p>Necesitamos entrar al proyecto creado y luego ejecutar lo siguiente:</p>\n<blockquote>\npython manage.py newtest \u2018prueba_1\u2019</blockquote>\n<p>Luego entramos a nuestro archivo settings.py y donde dice WEB_DRIVERS agregamos el webdriver a utilizar indicando\nel navegador y el path si lo tuviera.</p>\n</div>\n<div id=\"ejecutando-nuestros-tests\">\n<h2>Ejecutando nuestros tests</h2>\n<p>Para ejecutar todos nuestros tests ingresamos el siguiente comando:</p>\n<blockquote>\npython manage.py test all</blockquote>\n<p>En caso que deseemos ejecutar solo un test pues indicamos el test en vez indicar all:</p>\n<blockquote>\npython manage.py \u2018prueba_1\u2019</blockquote>\n<p>La documentaci\u00f3n estar\u00e1 pr\u00f3ximamente en <a href=\"http://frontend-labs.com/\" rel=\"nofollow\">FrontEnd Labs</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1150998, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3d0889eee297f1c500c35fb7e184784c", "sha256": "7c1e9a2378dcde8506746e06bbef83c26217e085847261bccda4399cba365bdc"}, "downloads": -1, "filename": "easy_test-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3d0889eee297f1c500c35fb7e184784c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5759, "upload_time": "2014-07-08T14:24:21", "upload_time_iso_8601": "2014-07-08T14:24:21.344289Z", "url": "https://files.pythonhosted.org/packages/6c/70/c13c7dfd9f9664dbc91428a8143f9506b5a31c0df6b162d2e76b65911c96/easy_test-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d0889eee297f1c500c35fb7e184784c", "sha256": "7c1e9a2378dcde8506746e06bbef83c26217e085847261bccda4399cba365bdc"}, "downloads": -1, "filename": "easy_test-0.0.1.tar.gz", "has_sig": false, "md5_digest": "3d0889eee297f1c500c35fb7e184784c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5759, "upload_time": "2014-07-08T14:24:21", "upload_time_iso_8601": "2014-07-08T14:24:21.344289Z", "url": "https://files.pythonhosted.org/packages/6c/70/c13c7dfd9f9664dbc91428a8143f9506b5a31c0df6b162d2e76b65911c96/easy_test-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:13 2020"}