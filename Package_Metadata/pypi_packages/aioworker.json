{"info": {"author": "Marcos Schroh", "author_email": "schrohm@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8"], "description": "## aioworker\n\nA Python worker running over `asyncio`\n\n[![Build Status](https://travis-ci.org/python-streaming/aioworker.svg?branch=master)](https://travis-ci.org/python-streaming/aioworker)\n![python version](https://img.shields.io/badge/python-3.8%2B-yellowgreen)\n[![License](https://img.shields.io/github/license/python-streaming/aioworker.svg)](https://github.com/python-streaming/aioworker/blob/master/LICENSE)\n[![codecov](https://codecov.io/gh/python-streaming/aioworker/branch/master/graph/badge.svg)](https://codecov.io/gh/python-streaming/aioworker)\n\n\n### Requirements\n\npython 3.8+\n\n### Installation\n\n```bash\npip install aioworker\n```\n\n### Usage\n\n```python\nimport asyncio\n\nfrom aioworker import Service, Worker\n\nasync def task_1(loop):\n    while True:\n        print('Hello world')\n        await asyncio.sleep(2)\n\n\nif __name__ == '__main__':\n    #  Run the server using 1 worker processes.\n    Worker(tasks=[task_1]).run(workers=1)\n```\n\nor run tasks and the webserver\n\n```python\nimport asyncio\n\nfrom aioworker import Service, Worker\n\n\nasync def sleeping(loop):\n    while True:\n        print('Sleeping for 2 seconds...')\n        await asyncio.sleep(2)\n\n\nasync def on_client_connect(reader, writer):\n    \"\"\"\n    Read up tp 300 bytes of TCP. This could be parsed usign the HTTP protocol for example\n    \"\"\"\n    data = await reader.read(300)\n    print(f'TCP Server data received: {data} \\n')\n    writer.write(data)\n    await writer.drain()\n    writer.close()\n\n\nif __name__ == '__main__':\n    # Run the server using 1 worker processes.\n    Worker(\n        tasks=[sleeping],\n        web_server_config={\n            'client_connected_cb': on_client_connect,\n        },\n    )).run(workers=1)\n```\n\n### How to stop the worker\n\n`ctrl+c`\n\n### Default values\n\n| Variable | Default |\n|----------|---------|\n| TCP server host| 0.0.0.0|\n| TPC server port | 8888 |\n\n\n### Examples\n\n1. [Hello world](https://github.com/python-streaming/aioworker/blob/master/examples/hello_world.py)\n2. [TCP Server](https://github.com/python-streaming/aioworker/blob/master/examples/worker_tcp_server.py)\n3. [Kafka Consumer](https://github.com/python-streaming/aioworker/blob/master/examples/worker_kafka_consumer.py)\n\n\n### Development\n\n1. Clone this repo\n2. Run `poetry install`\n3. Test using `./scripts/test`\n4. Lint automatically using `./scripts/lint`\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "aioworker,kafka,streaming,async", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aioworker", "package_url": "https://pypi.org/project/aioworker/", "platform": "", "project_url": "https://pypi.org/project/aioworker/", "project_urls": null, "release_url": "https://pypi.org/project/aioworker/0.2.0/", "requires_dist": ["aiotools (>=0.8.5,<0.9.0)"], "requires_python": ">=3.8,<4.0", "summary": "Python async worker", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>aioworker</h2>\n<p>A Python worker running over <code>asyncio</code></p>\n<p><a href=\"https://travis-ci.org/python-streaming/aioworker\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d31a090349085528312aa2bc3d96b51c382ce51/68747470733a2f2f7472617669732d63692e6f72672f707974686f6e2d73747265616d696e672f61696f776f726b65722e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"python version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8a5bc8b0028ba5ea3f7f68df2cff4dc55ab32ab7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e382532422d79656c6c6f77677265656e\">\n<a href=\"https://github.com/python-streaming/aioworker/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f12075791fcf0b4c02cdcb409185bb27756e44fd/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f707974686f6e2d73747265616d696e672f61696f776f726b65722e737667\"></a>\n<a href=\"https://codecov.io/gh/python-streaming/aioworker\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b33fe3b0222374400c5ed96155b36bce7ae9959f/68747470733a2f2f636f6465636f762e696f2f67682f707974686f6e2d73747265616d696e672f61696f776f726b65722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h3>Requirements</h3>\n<p>python 3.8+</p>\n<h3>Installation</h3>\n<pre>pip install aioworker\n</pre>\n<h3>Usage</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aioworker</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span><span class=\"p\">,</span> <span class=\"n\">Worker</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">task_1</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Hello world'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\">#  Run the server using 1 worker processes.</span>\n    <span class=\"n\">Worker</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">task_1</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>or run tasks and the webserver</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aioworker</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span><span class=\"p\">,</span> <span class=\"n\">Worker</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">sleeping</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sleeping for 2 seconds...'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">on_client_connect</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Read up tp 300 bytes of TCP. This could be parsed usign the HTTP protocol for example</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'TCP Server data received: </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Run the server using 1 worker processes.</span>\n    <span class=\"n\">Worker</span><span class=\"p\">(</span>\n        <span class=\"n\">tasks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">sleeping</span><span class=\"p\">],</span>\n        <span class=\"n\">web_server_config</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">'client_connected_cb'</span><span class=\"p\">:</span> <span class=\"n\">on_client_connect</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h3>How to stop the worker</h3>\n<p><code>ctrl+c</code></p>\n<h3>Default values</h3>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TCP server host</td>\n<td>0.0.0.0</td>\n</tr>\n<tr>\n<td>TPC server port</td>\n<td>8888</td>\n</tr></tbody></table>\n<h3>Examples</h3>\n<ol>\n<li><a href=\"https://github.com/python-streaming/aioworker/blob/master/examples/hello_world.py\" rel=\"nofollow\">Hello world</a></li>\n<li><a href=\"https://github.com/python-streaming/aioworker/blob/master/examples/worker_tcp_server.py\" rel=\"nofollow\">TCP Server</a></li>\n<li><a href=\"https://github.com/python-streaming/aioworker/blob/master/examples/worker_kafka_consumer.py\" rel=\"nofollow\">Kafka Consumer</a></li>\n</ol>\n<h3>Development</h3>\n<ol>\n<li>Clone this repo</li>\n<li>Run <code>poetry install</code></li>\n<li>Test using <code>./scripts/test</code></li>\n<li>Lint automatically using <code>./scripts/lint</code></li>\n</ol>\n\n          </div>"}, "last_serial": 6561977, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0d8acf2964366ba6c79b67b47ede2f2d", "sha256": "0917c27747c111c2abf29a2f3955a8d1cb412b4d7207f48b3912f68409930e0a"}, "downloads": -1, "filename": "aioworker-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0d8acf2964366ba6c79b67b47ede2f2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 3672, "upload_time": "2020-01-31T17:24:06", "upload_time_iso_8601": "2020-01-31T17:24:06.546808Z", "url": "https://files.pythonhosted.org/packages/27/e2/9b55c40583c7ce83bc6f9c023dce3fa83bc58c5ca1728ab524e1d5f7683d/aioworker-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8e9463a9c4720de588ea8eb753632b7", "sha256": "c75ecc5b0a2060fdea2d8d5bce5fc5e235b6c5e2f701f777c0850a013210d056"}, "downloads": -1, "filename": "aioworker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d8e9463a9c4720de588ea8eb753632b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3580, "upload_time": "2020-01-31T17:24:09", "upload_time_iso_8601": "2020-01-31T17:24:09.622505Z", "url": "https://files.pythonhosted.org/packages/31/1d/9406bc5388785e6926597a7b36a794b492840b338220e22c8d47fbc1e1ae/aioworker-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "410b1cf2fc70dfbdfc01a84fd4573318", "sha256": "8783be75c124f1a100a163710ba5ce69718efc548648b2e28c016403884e0b71"}, "downloads": -1, "filename": "aioworker-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "410b1cf2fc70dfbdfc01a84fd4573318", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 3793, "upload_time": "2020-01-31T18:05:25", "upload_time_iso_8601": "2020-01-31T18:05:25.670336Z", "url": "https://files.pythonhosted.org/packages/44/6b/99482e7269bfcf8aed19c3ce9dbf9bc9083bb471d0a7029b61f3cd986433/aioworker-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76c4cab1fcd9c3e54c50176026b180ba", "sha256": "337c97f78cbfe2bbf4d0ae3ad7cd961e231a5e9acfe2713f7976bf8e8b2d71ce"}, "downloads": -1, "filename": "aioworker-0.1.1.tar.gz", "has_sig": false, "md5_digest": "76c4cab1fcd9c3e54c50176026b180ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3729, "upload_time": "2020-01-31T18:05:27", "upload_time_iso_8601": "2020-01-31T18:05:27.066146Z", "url": "https://files.pythonhosted.org/packages/20/95/24482529e9fd78f0c0ea5c7d7cfe0b0ef207ffbe456154f3d36815671fd0/aioworker-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "331238cdc1c05d4667cdc328cbfe3913", "sha256": "57e39360366b437f7f1caefc07691cec33d14e2051d12b81527fb22c9abd3b25"}, "downloads": -1, "filename": "aioworker-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "331238cdc1c05d4667cdc328cbfe3913", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 4424, "upload_time": "2020-02-03T10:34:19", "upload_time_iso_8601": "2020-02-03T10:34:19.872240Z", "url": "https://files.pythonhosted.org/packages/6a/b8/b071746f4fa4fc8b587605e773bbb87b1e1b61f3796a231e80e55d87e624/aioworker-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fd6035c056a5142191d617d2c30bd11", "sha256": "e9e6a3bba7b2c0cc93901f844fba8253a0e7f7e375c3721edbf64d6377f1977b"}, "downloads": -1, "filename": "aioworker-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3fd6035c056a5142191d617d2c30bd11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 4484, "upload_time": "2020-02-03T10:34:21", "upload_time_iso_8601": "2020-02-03T10:34:21.569440Z", "url": "https://files.pythonhosted.org/packages/f0/fa/0d4c245e61ddcd970de34cbfed6ca7153d691160b66b1d83b2ce7e8d8e8c/aioworker-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "331238cdc1c05d4667cdc328cbfe3913", "sha256": "57e39360366b437f7f1caefc07691cec33d14e2051d12b81527fb22c9abd3b25"}, "downloads": -1, "filename": "aioworker-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "331238cdc1c05d4667cdc328cbfe3913", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 4424, "upload_time": "2020-02-03T10:34:19", "upload_time_iso_8601": "2020-02-03T10:34:19.872240Z", "url": "https://files.pythonhosted.org/packages/6a/b8/b071746f4fa4fc8b587605e773bbb87b1e1b61f3796a231e80e55d87e624/aioworker-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fd6035c056a5142191d617d2c30bd11", "sha256": "e9e6a3bba7b2c0cc93901f844fba8253a0e7f7e375c3721edbf64d6377f1977b"}, "downloads": -1, "filename": "aioworker-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3fd6035c056a5142191d617d2c30bd11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 4484, "upload_time": "2020-02-03T10:34:21", "upload_time_iso_8601": "2020-02-03T10:34:21.569440Z", "url": "https://files.pythonhosted.org/packages/f0/fa/0d4c245e61ddcd970de34cbfed6ca7153d691160b66b1d83b2ce7e8d8e8c/aioworker-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:36 2020"}