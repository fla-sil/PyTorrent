{"info": {"author": "Sean Hammond", "author_email": "ckanapi-exporter@seanh.cc", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 2.7"], "description": "[![Build Status](https://travis-ci.org/ckan/ckanapi-exporter.svg)](https://travis-ci.org/ckan/ckanapi-exporter)\n[![Coverage Status](https://img.shields.io/coveralls/ckan/ckanapi-exporter.svg)](https://coveralls.io/r/ckan/ckanapi-exporter)\n[![Latest Version](https://img.shields.io/pypi/v/ckanapi-exporter.svg)](https://pypi.python.org/pypi/ckanapi-exporter/)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/ckanapi-exporter.svg)](https://pypi.python.org/pypi/ckanapi-exporter/)\n[![Development Status](https://img.shields.io/pypi/status/ckanapi-exporter.svg)](https://pypi.python.org/pypi/ckanapi-exporter/)\n[![License](https://img.shields.io/pypi/l/ckanapi-exporter.svg)](https://pypi.python.org/pypi/ckanapi-exporter/)\n\nckanapi-exporter\n================\n\nAn API client (usable as a command-line script or as a Python library) for\nexporting dataset metadata from CKAN sites to Excel-compatible CSV files.\n\n\nInstallation\n------------\n\nTo install run:\n\n    pip install ckanapi-exporter\n\n\nUsage\n-----\n\n```bash\nckanapi-exporter --url 'https://demo.ckan.org' \\\n    --column \"Title\" --pattern '^title$' > output.csv\n```\n\nThis searches each dataset on demo.ckan.org for fields matching the\n[regular expression](https://docs.python.org/2/howto/regex.html#regex-howto)\n`^title$` (the `--pattern` argument) and puts the values into a\ncolumn called \"Title\" in the CSV file (the `--column` argument).  It'll create\nan `output.csv` file something like this:\n\n<table>\n  <tr>\n    <th>Title</th>\n  </tr>\n  <tr>\n    <td>Senior Salaries Information</td>\n  </tr>\n  <tr>\n    <td>Demo Data for Open Data in 1 Day - Spending Over \u00a3500</td>\n  </tr>\n  <tr>\n    <td>UK Cat Burglaries</td>\n  </tr>\n  <tr>\n    <td>...</td>\n  </tr>\n</table>\n\nYou can add as many columns as you want: just add a `--column` and a\n`--pattern` argument for each column. The title of the column in the CSV file\ncan be anything you want - it doesn't have to match the name of the field in\nCKAN. Let's add a second column titled \"Rights\" that contains the\n`license_title` fields from the datasets:\n\n```bash\nckanapi-exporter --url 'https://demo.ckan.org' \\\n    --column \"Title\" --pattern '^title$' \\\n    --column \"Rights\" --pattern '^license_title$' > output.csv\n```\n\n<table>\n  <tr>\n    <th>Title</th>\n    <th>Rights</th>\n  </tr>\n  <tr>\n    <td>Senior Salaries Information</td>\n    <td>Creative Commons Attribution</td>\n  </tr>\n  <tr>\n    <td>Demo Data for Open Data in 1 Day - Spending Over \u00a3500</td>\n    <td>Creative Commons CCZero</td>\n  </tr>\n  <tr>\n    <td>UK Cat Burglaries</td>\n    <td>UK Open Government Licence (OGL)</td>\n  </tr>\n  <tr>\n    <td>...</td>\n    <td>...</td>\n  </tr>\n</table>\n\n### API Parameters\nThe ckanapi-exporter calls the [`package_search`](http://docs.ckan.org/en/latest/api/index.html#ckan.logic.action.get.package_search)\nAPI action and you can pass in related query parameters by using the `--params`\nargument and passing in a string formated as a dictionary. Each key: value pair\nrepresents a query passed to the API call.\n\nFor example if you wanted to only export datasets between a date range you can\npass in the `fq` (filtered query) parameter and use `metadata_created` to filter\nthe results.\n\n```bash\nckanapi-exporter --url 'https://demo.ckan.org' \\\n    --params \"{'fq':'metadata_created:[2017-01-01T00:00:00Z TO 2017-01-31T23:59:99.999Z]'}\" \\\n    --column \"Title\" --pattern '^title$' \\\n    --column \"Rights\" --pattern '^license_title$' > output.csv\n```\n\n\n### Transformations\n\nYou can apply certain transformations to the values from the datasets.\nFor example, let's add a third column with the first 50 characters of each\ndataset's description (the `notes` field in the CKAN API):\n\n```bash\nckanapi-exporter --url 'https://demo.ckan.org' \\\n    --column \"Title\" --pattern '^title$' \\\n    --column \"Rights\" --pattern '^license_title$' \\\n    --column \"Description\" --pattern '^notes$' --max-length 50 > output.csv\n```\n\n<table>\n  <tr>\n    <th>Title</th>\n    <th>Rights</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>Senior Salaries Information</td>\n    <td>Creative Commons Attribution</td>\n    <td>Demo information about senior salaries from 11/04/</td>\n  </tr>\n  <tr>\n    <td>Demo Data for Open Data in 1 Day - Spending Over \u00a3500</td>\n    <td>Creative Commons CCZero</td>\n    <td>Data on spending over \u00a3500 generated for Open Data</td>\n  </tr>\n  <tr>\n    <td>UK Cat Burglaries</td>\n    <td>UK Open Government Licence (OGL)</td>\n    <td>A record of cat burgalries, listing the cat names,</td>\n  </tr>\n  <tr>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n  </tr>\n</table>\n\n\n### Exporting Resource Fields\n\nLet's add a column containing the formats of each datasets' resources:\n\n```bash\nckanapi-exporter --url 'https://demo.ckan.org' \\\n    --column \"Title\" --pattern '^title$' \\\n    --column \"Rights\" --pattern '^license_title$' \\\n    --column \"Description\" --pattern '^notes$' --max-length 50 \\\n    --column Formats --pattern '^resources$' '^format$' > output.csv\n```\n\nThis time the pattern has two arguments: `--pattern '^resources$' '^format$'`.\nThis means find the \"resources\" field of each dataset and then find the\n\"format\" field of each resource. When a dataset has more than one resource\nthe formats will be combined into a quoted, comma-separated list in a single\ntable cell. It'll create a CSV file something like this:\n\n<table>\n  <tr>\n    <th>Title</th>\n    <th>Rights</th>\n    <th>Description</th>\n    <th>Formats</th>\n  </tr>\n  <tr>\n    <td>Senior Salaries Information</td>\n    <td>Creative Commons Attribution</td>\n    <td>Demo information about senior salaries from 11/04/</td>\n    <td>XLSX, CSV</td>\n  </tr>\n  <tr>\n    <td>Demo Data for Open Data in 1 Day - Spending Over \u00a3500</td>\n    <td>Creative Commons CCZero</td>\n    <td>Data on spending over \u00a3500 generated for Open Data</td>\n    <td>CSV, CSV, CSV, CSV</td>\n  </tr>\n  <tr>\n    <td>UK Cat Burglaries</td>\n    <td>UK Open Government Licence (OGL)</td>\n    <td>A record of cat burgalries, listing the cat names,</td>\n    <td>JPEG, CSV, CSV</td>\n  </tr>\n  <tr>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n  </tr>\n</table>\n\nCSV is repeated a lot because lots of the datasets have multiple CSV resources.\nYou can add the `--deduplicate` option to the column to remove the duplication:\n\n```bash\nckanapi-exporter --url 'https://demo.ckan.org' \\\n    --column \"Title\" --pattern '^title$' \\\n    --column \"Rights\" --pattern '^license_title$' \\\n    --column \"Description\" --pattern '^notes$' --max-length 50 \\\n    --column Formats --pattern '^resources$' '^format$' --deduplicate \\\n    > output.csv\n```\n\n<table>\n  <tr>\n    <th>Title</th>\n    <th>Rights</th>\n    <th>Description</th>\n    <th>Formats</th>\n  </tr>\n  <tr>\n    <td>Senior Salaries Information</td>\n    <td>Creative Commons Attribution</td>\n    <td>Demo information about senior salaries from 11/04/</td>\n    <td>XLSX, CSV</td>\n  </tr>\n  <tr>\n    <td>Demo Data for Open Data in 1 Day - Spending Over \u00a3500</td>\n    <td>Creative Commons CCZero</td>\n    <td>Data on spending over \u00a3500 generated for Open Data</td>\n    <td>CSV</td>\n  </tr>\n  <tr>\n    <td>UK Cat Burglaries</td>\n    <td>UK Open Government Licence (OGL)</td>\n    <td>A record of cat burgalries, listing the cat names,</td>\n    <td>JPEG, CSV</td>\n  </tr>\n  <tr>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n    <td>...</td>\n  </tr>\n</table>\n\n\n### Exporting Dataset Extras\n\nLet's add a column with the values of the \"Next Update\" extra from each\ndataset. Dataset publishers have been inconsistent with naming this column,\nit's sometimes \"Next Update\" and sometimes \"next update\", \"Next update day\",\n\"Next Update Time\" etc. We'll use a regular expression that matches all of\nthese possible names and combine them into a single \"Next Update\" column:\n\n```bash\nckanapi-exporter --url 'https://demo.ckan.org' \\\n    --column \"Title\" --pattern '^title$' \\\n    --column \"Rights\" --pattern '^license_title$' \\\n    --column \"Description\" --pattern '^notes$' --max-length 50 \\\n    --column Formats --pattern '^resources$' '^format$' --deduplicate \\\n    --column \"Next Update\" --pattern '^extras$' '^next update.*' --unique \\\n    > output.csv\n```\n\nThe two-part pattern `'^extras$' '^next update.*'` means to look in the\n\"extras\" field of each dataset for extras whose name matches\n`^next update.*`. We're expecting each dataset to have only one matching\nextra so we add the `--unique` argument which will crash if a dataset has more\nthan one extra matching the pattern.\n\nBy default patterns are matched case-insensitively and whitespace is stripped\nfrom field names before matching. To match case-sensitively and without\nstripping whitespace add `--case-sensitive --strip false` to the column.\n\nWe can also find multiple extras and combine them into a single column.\nFor example, let's say our datasets have a \"contributor\" extra\n(sometimes spelled \"contributor\", sometimes \"Contributor\"). Some datasets have\nmultiple extras named \"Contributor 1\", \"Contributor 2\" etc. We can find all of\nthese contributor extras and combine them into a single quoted, comma-separated\nlist with a pattern like this:\n\n    --column Contributors --pattern '^extras$' '^contributor.*'\n\n\n### Using a columns.json File\n\nYou can specify your columns in a `columns.json` file instead of on the command\nline. Here's an example of the format:\n\n```json\n{\n  \"Data Owner\": {\n      \"pattern\": \"^author$\",\n      \"unique\": true,\n      \"case_sensitive\": true\n  },\n  \"Delivery Unit\": {\n      \"pattern\": [\"^extras$\", \"^Delivery Unit$\"],\n      \"unique\": true\n  },\n  \"Contributor\": {\n      \"pattern\": [\"^extras$\", \"^Contributor.*\"]\n  },\n  \"Description\": {\n      \"pattern\": \"^notes$\",\n      \"unique\": true,\n      \"case_sensitive\": true,\n      \"max_length\": 255\n  },\n  \"Format\": {\n      \"pattern\": [\"^resources$\", \"^format$\"],\n      \"case_sensitive\": true,\n      \"deduplicate\": true\n  }\n}\n```\n\nThen tell ckanapi-exporter to read the column options from this file instead of\ngiving them on the command line:\n\n```bash\nckanapi-exporter --url 'https://demo.ckan.org' --columns columns.json > output.csv\n```\n\nFor a working example `columns.json` file that you can use against demo.ckan.org,\nsee [test_columns.json](ckanapi_exporter/test_columns.json).\n\nckanapi-exporter is a thin wrapper around\n[losser](https://github.com/ckan/losser), hooking it up to the CKAN API.\nFor more documentation of the filtering and transforming options run\n`ckanapi-exporter --help` or read losser's docs.\n\n\nUsing as a Python Library\n-------------------------\n\nYou can also import ckanapi-exporter in Python and use it from your CKAN API\nclient or plugin:\n\n```python\nimport ckanapi_exporter.exporter as exporter\ncsv_string = exporter.export('https://demo.ckan.org', 'columns.json')\n```\n\nReturns a UTF8-encoded string.\n\nThe second argument can be either the filename of the columns.json file as a\nstring, or a list of dictionaries (equivalent to the contents of columns.json\nfile after loading the JSON).\n\n\nDevelopment\n-----------\n\nTo install for development, create and activate a Python virtual environment\nthen do:\n\n```bash\ngit clone https://github.com/ckan/ckanapi-exporter.git\ncd ckanapi-exporter\npython setup.py develop\npip install -r dev-requirements.txt\n```\n\nTo run the tests do:\n\n    nosetests", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ckan/ckanapi-exporter", "keywords": "ckan csv export excel api", "license": "AGPL", "maintainer": "", "maintainer_email": "", "name": "ckanapi-exporter", "package_url": "https://pypi.org/project/ckanapi-exporter/", "platform": "", "project_url": "https://pypi.org/project/ckanapi-exporter/", "project_urls": {"Homepage": "https://github.com/ckan/ckanapi-exporter"}, "release_url": "https://pypi.org/project/ckanapi-exporter/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Export dataset metadata from CKAN to Excel", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            [![Build Status](https://travis-ci.org/ckan/ckanapi-exporter.svg)](https://travis-ci.org/ckan/ckanapi-exporter)<br>[![Coverage Status](https://img.shields.io/coveralls/ckan/ckanapi-exporter.svg)](https://coveralls.io/r/ckan/ckanapi-exporter)<br>[![Latest Version](https://img.shields.io/pypi/v/ckanapi-exporter.svg)](https://pypi.python.org/pypi/ckanapi-exporter/)<br>[![Supported Python versions](https://img.shields.io/pypi/pyversions/ckanapi-exporter.svg)](https://pypi.python.org/pypi/ckanapi-exporter/)<br>[![Development Status](https://img.shields.io/pypi/status/ckanapi-exporter.svg)](https://pypi.python.org/pypi/ckanapi-exporter/)<br>[![License](https://img.shields.io/pypi/l/ckanapi-exporter.svg)](https://pypi.python.org/pypi/ckanapi-exporter/)<br><br>ckanapi-exporter<br>================<br><br>An API client (usable as a command-line script or as a Python library) for<br>exporting dataset metadata from CKAN sites to Excel-compatible CSV files.<br><br><br>Installation<br>------------<br><br>To install run:<br><br>    pip install ckanapi-exporter<br><br><br>Usage<br>-----<br><br>```bash<br>ckanapi-exporter --url 'https://demo.ckan.org' \\<br>    --column \"Title\" --pattern '^title$' &gt; output.csv<br>```<br><br>This searches each dataset on demo.ckan.org for fields matching the<br>[regular expression](https://docs.python.org/2/howto/regex.html#regex-howto)<br>`^title$` (the `--pattern` argument) and puts the values into a<br>column called \"Title\" in the CSV file (the `--column` argument).  It'll create<br>an `output.csv` file something like this:<br><br>&lt;table&gt;<br>  &lt;tr&gt;<br>    &lt;th&gt;Title&lt;/th&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Senior Salaries Information&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Demo Data for Open Data in 1 Day - Spending Over \u00a3500&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;UK Cat Burglaries&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;/table&gt;<br><br>You can add as many columns as you want: just add a `--column` and a<br>`--pattern` argument for each column. The title of the column in the CSV file<br>can be anything you want - it doesn't have to match the name of the field in<br>CKAN. Let's add a second column titled \"Rights\" that contains the<br>`license_title` fields from the datasets:<br><br>```bash<br>ckanapi-exporter --url 'https://demo.ckan.org' \\<br>    --column \"Title\" --pattern '^title$' \\<br>    --column \"Rights\" --pattern '^license_title$' &gt; output.csv<br>```<br><br>&lt;table&gt;<br>  &lt;tr&gt;<br>    &lt;th&gt;Title&lt;/th&gt;<br>    &lt;th&gt;Rights&lt;/th&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Senior Salaries Information&lt;/td&gt;<br>    &lt;td&gt;Creative Commons Attribution&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Demo Data for Open Data in 1 Day - Spending Over \u00a3500&lt;/td&gt;<br>    &lt;td&gt;Creative Commons CCZero&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;UK Cat Burglaries&lt;/td&gt;<br>    &lt;td&gt;UK Open Government Licence (OGL)&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;/table&gt;<br><br>### API Parameters<br>The ckanapi-exporter calls the [`package_search`](http://docs.ckan.org/en/latest/api/index.html#ckan.logic.action.get.package_search)<br>API action and you can pass in related query parameters by using the `--params`<br>argument and passing in a string formated as a dictionary. Each key: value pair<br>represents a query passed to the API call.<br><br>For example if you wanted to only export datasets between a date range you can<br>pass in the `fq` (filtered query) parameter and use `metadata_created` to filter<br>the results.<br><br>```bash<br>ckanapi-exporter --url 'https://demo.ckan.org' \\<br>    --params \"{'fq':'metadata_created:[2017-01-01T00:00:00Z TO 2017-01-31T23:59:99.999Z]'}\" \\<br>    --column \"Title\" --pattern '^title$' \\<br>    --column \"Rights\" --pattern '^license_title$' &gt; output.csv<br>```<br><br><br>### Transformations<br><br>You can apply certain transformations to the values from the datasets.<br>For example, let's add a third column with the first 50 characters of each<br>dataset's description (the `notes` field in the CKAN API):<br><br>```bash<br>ckanapi-exporter --url 'https://demo.ckan.org' \\<br>    --column \"Title\" --pattern '^title$' \\<br>    --column \"Rights\" --pattern '^license_title$' \\<br>    --column \"Description\" --pattern '^notes$' --max-length 50 &gt; output.csv<br>```<br><br>&lt;table&gt;<br>  &lt;tr&gt;<br>    &lt;th&gt;Title&lt;/th&gt;<br>    &lt;th&gt;Rights&lt;/th&gt;<br>    &lt;th&gt;Description&lt;/th&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Senior Salaries Information&lt;/td&gt;<br>    &lt;td&gt;Creative Commons Attribution&lt;/td&gt;<br>    &lt;td&gt;Demo information about senior salaries from 11/04/&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Demo Data for Open Data in 1 Day - Spending Over \u00a3500&lt;/td&gt;<br>    &lt;td&gt;Creative Commons CCZero&lt;/td&gt;<br>    &lt;td&gt;Data on spending over \u00a3500 generated for Open Data&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;UK Cat Burglaries&lt;/td&gt;<br>    &lt;td&gt;UK Open Government Licence (OGL)&lt;/td&gt;<br>    &lt;td&gt;A record of cat burgalries, listing the cat names,&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;/table&gt;<br><br><br>### Exporting Resource Fields<br><br>Let's add a column containing the formats of each datasets' resources:<br><br>```bash<br>ckanapi-exporter --url 'https://demo.ckan.org' \\<br>    --column \"Title\" --pattern '^title$' \\<br>    --column \"Rights\" --pattern '^license_title$' \\<br>    --column \"Description\" --pattern '^notes$' --max-length 50 \\<br>    --column Formats --pattern '^resources$' '^format$' &gt; output.csv<br>```<br><br>This time the pattern has two arguments: `--pattern '^resources$' '^format$'`.<br>This means find the \"resources\" field of each dataset and then find the<br>\"format\" field of each resource. When a dataset has more than one resource<br>the formats will be combined into a quoted, comma-separated list in a single<br>table cell. It'll create a CSV file something like this:<br><br>&lt;table&gt;<br>  &lt;tr&gt;<br>    &lt;th&gt;Title&lt;/th&gt;<br>    &lt;th&gt;Rights&lt;/th&gt;<br>    &lt;th&gt;Description&lt;/th&gt;<br>    &lt;th&gt;Formats&lt;/th&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Senior Salaries Information&lt;/td&gt;<br>    &lt;td&gt;Creative Commons Attribution&lt;/td&gt;<br>    &lt;td&gt;Demo information about senior salaries from 11/04/&lt;/td&gt;<br>    &lt;td&gt;XLSX, CSV&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Demo Data for Open Data in 1 Day - Spending Over \u00a3500&lt;/td&gt;<br>    &lt;td&gt;Creative Commons CCZero&lt;/td&gt;<br>    &lt;td&gt;Data on spending over \u00a3500 generated for Open Data&lt;/td&gt;<br>    &lt;td&gt;CSV, CSV, CSV, CSV&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;UK Cat Burglaries&lt;/td&gt;<br>    &lt;td&gt;UK Open Government Licence (OGL)&lt;/td&gt;<br>    &lt;td&gt;A record of cat burgalries, listing the cat names,&lt;/td&gt;<br>    &lt;td&gt;JPEG, CSV, CSV&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;/table&gt;<br><br>CSV is repeated a lot because lots of the datasets have multiple CSV resources.<br>You can add the `--deduplicate` option to the column to remove the duplication:<br><br>```bash<br>ckanapi-exporter --url 'https://demo.ckan.org' \\<br>    --column \"Title\" --pattern '^title$' \\<br>    --column \"Rights\" --pattern '^license_title$' \\<br>    --column \"Description\" --pattern '^notes$' --max-length 50 \\<br>    --column Formats --pattern '^resources$' '^format$' --deduplicate \\<br>    &gt; output.csv<br>```<br><br>&lt;table&gt;<br>  &lt;tr&gt;<br>    &lt;th&gt;Title&lt;/th&gt;<br>    &lt;th&gt;Rights&lt;/th&gt;<br>    &lt;th&gt;Description&lt;/th&gt;<br>    &lt;th&gt;Formats&lt;/th&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Senior Salaries Information&lt;/td&gt;<br>    &lt;td&gt;Creative Commons Attribution&lt;/td&gt;<br>    &lt;td&gt;Demo information about senior salaries from 11/04/&lt;/td&gt;<br>    &lt;td&gt;XLSX, CSV&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;Demo Data for Open Data in 1 Day - Spending Over \u00a3500&lt;/td&gt;<br>    &lt;td&gt;Creative Commons CCZero&lt;/td&gt;<br>    &lt;td&gt;Data on spending over \u00a3500 generated for Open Data&lt;/td&gt;<br>    &lt;td&gt;CSV&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;UK Cat Burglaries&lt;/td&gt;<br>    &lt;td&gt;UK Open Government Licence (OGL)&lt;/td&gt;<br>    &lt;td&gt;A record of cat burgalries, listing the cat names,&lt;/td&gt;<br>    &lt;td&gt;JPEG, CSV&lt;/td&gt;<br>  &lt;/tr&gt;<br>  &lt;tr&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>    &lt;td&gt;...&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;/table&gt;<br><br><br>### Exporting Dataset Extras<br><br>Let's add a column with the values of the \"Next Update\" extra from each<br>dataset. Dataset publishers have been inconsistent with naming this column,<br>it's sometimes \"Next Update\" and sometimes \"next update\", \"Next update day\",<br>\"Next Update Time\" etc. We'll use a regular expression that matches all of<br>these possible names and combine them into a single \"Next Update\" column:<br><br>```bash<br>ckanapi-exporter --url 'https://demo.ckan.org' \\<br>    --column \"Title\" --pattern '^title$' \\<br>    --column \"Rights\" --pattern '^license_title$' \\<br>    --column \"Description\" --pattern '^notes$' --max-length 50 \\<br>    --column Formats --pattern '^resources$' '^format$' --deduplicate \\<br>    --column \"Next Update\" --pattern '^extras$' '^next update.*' --unique \\<br>    &gt; output.csv<br>```<br><br>The two-part pattern `'^extras$' '^next update.*'` means to look in the<br>\"extras\" field of each dataset for extras whose name matches<br>`^next update.*`. We're expecting each dataset to have only one matching<br>extra so we add the `--unique` argument which will crash if a dataset has more<br>than one extra matching the pattern.<br><br>By default patterns are matched case-insensitively and whitespace is stripped<br>from field names before matching. To match case-sensitively and without<br>stripping whitespace add `--case-sensitive --strip false` to the column.<br><br>We can also find multiple extras and combine them into a single column.<br>For example, let's say our datasets have a \"contributor\" extra<br>(sometimes spelled \"contributor\", sometimes \"Contributor\"). Some datasets have<br>multiple extras named \"Contributor 1\", \"Contributor 2\" etc. We can find all of<br>these contributor extras and combine them into a single quoted, comma-separated<br>list with a pattern like this:<br><br>    --column Contributors --pattern '^extras$' '^contributor.*'<br><br><br>### Using a columns.json File<br><br>You can specify your columns in a `columns.json` file instead of on the command<br>line. Here's an example of the format:<br><br>```json<br>{<br>  \"Data Owner\": {<br>      \"pattern\": \"^author$\",<br>      \"unique\": true,<br>      \"case_sensitive\": true<br>  },<br>  \"Delivery Unit\": {<br>      \"pattern\": [\"^extras$\", \"^Delivery Unit$\"],<br>      \"unique\": true<br>  },<br>  \"Contributor\": {<br>      \"pattern\": [\"^extras$\", \"^Contributor.*\"]<br>  },<br>  \"Description\": {<br>      \"pattern\": \"^notes$\",<br>      \"unique\": true,<br>      \"case_sensitive\": true,<br>      \"max_length\": 255<br>  },<br>  \"Format\": {<br>      \"pattern\": [\"^resources$\", \"^format$\"],<br>      \"case_sensitive\": true,<br>      \"deduplicate\": true<br>  }<br>}<br>```<br><br>Then tell ckanapi-exporter to read the column options from this file instead of<br>giving them on the command line:<br><br>```bash<br>ckanapi-exporter --url 'https://demo.ckan.org' --columns columns.json &gt; output.csv<br>```<br><br>For a working example `columns.json` file that you can use against demo.ckan.org,<br>see [test_columns.json](ckanapi_exporter/test_columns.json).<br><br>ckanapi-exporter is a thin wrapper around<br>[losser](https://github.com/ckan/losser), hooking it up to the CKAN API.<br>For more documentation of the filtering and transforming options run<br>`ckanapi-exporter --help` or read losser's docs.<br><br><br>Using as a Python Library<br>-------------------------<br><br>You can also import ckanapi-exporter in Python and use it from your CKAN API<br>client or plugin:<br><br>```python<br>import ckanapi_exporter.exporter as exporter<br>csv_string = exporter.export('https://demo.ckan.org', 'columns.json')<br>```<br><br>Returns a UTF8-encoded string.<br><br>The second argument can be either the filename of the columns.json file as a<br>string, or a list of dictionaries (equivalent to the contents of columns.json<br>file after loading the JSON).<br><br><br>Development<br>-----------<br><br>To install for development, create and activate a Python virtual environment<br>then do:<br><br>```bash<br>git clone https://github.com/ckan/ckanapi-exporter.git<br>cd ckanapi-exporter<br>python setup.py develop<br>pip install -r dev-requirements.txt<br>```<br><br>To run the tests do:<br><br>    nosetests\n          </div>"}, "last_serial": 5006452, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a00530d7c990cde3280727045350ac3f", "sha256": "7d36f5a6a7c033677e631de8d81d33b2e5a532ce01f019b36c84d9df9a6e8280"}, "downloads": -1, "filename": "ckanapi-exporter-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a00530d7c990cde3280727045350ac3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3738, "upload_time": "2014-10-22T19:51:12", "upload_time_iso_8601": "2014-10-22T19:51:12.281332Z", "url": "https://files.pythonhosted.org/packages/df/9d/033dd92f2f7ae3a1db45fe60cd308c6da97a0fc5aeb5ca7e87b00c229fed/ckanapi-exporter-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "adb37e2249d76171a5ab0a397854623a", "sha256": "8dbed1fa7ef964ae7da2985ecb13c8df5199b9e67be1b8470e75aed7e23508d2"}, "downloads": -1, "filename": "ckanapi-exporter-0.0.2.tar.gz", "has_sig": false, "md5_digest": "adb37e2249d76171a5ab0a397854623a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6352, "upload_time": "2014-11-06T19:30:20", "upload_time_iso_8601": "2014-11-06T19:30:20.442908Z", "url": "https://files.pythonhosted.org/packages/da/b3/478cd782ae1d6183f3236c9c64ac1d3883b4d3307bdf0a7aad19713e9d4b/ckanapi-exporter-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "60e1a4087392e3ece0907a3f1f883d4c", "sha256": "398ecf927f560406f10a02325c79088cfb60f5c32e69cb53b200482a273a1284"}, "downloads": -1, "filename": "ckanapi-exporter-0.0.3.tar.gz", "has_sig": false, "md5_digest": "60e1a4087392e3ece0907a3f1f883d4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6446, "upload_time": "2014-11-06T19:42:36", "upload_time_iso_8601": "2014-11-06T19:42:36.595469Z", "url": "https://files.pythonhosted.org/packages/73/e9/e933b954e0d86051e5e1e3dcef6b81497dba3238cc69a6472336febf79d4/ckanapi-exporter-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "7ea5e355d27288b6073fc557c50898a3", "sha256": "095d1caa70c022da6eefd4b81340bf760f832e6be4e25f6d195295e56972713b"}, "downloads": -1, "filename": "ckanapi-exporter-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7ea5e355d27288b6073fc557c50898a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8293, "upload_time": "2014-11-09T15:50:35", "upload_time_iso_8601": "2014-11-09T15:50:35.702264Z", "url": "https://files.pythonhosted.org/packages/d0/ad/9f752b853bda6033fa92a99a872a80d505bbb819bf853068c3a468ac3c09/ckanapi-exporter-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "e50c53a03911e6456b5f0a2b4b88f014", "sha256": "dfecd1d04f68c2e9d10d029edd18d1798025ee25da3731468cd2069e09215a53"}, "downloads": -1, "filename": "ckanapi-exporter-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e50c53a03911e6456b5f0a2b4b88f014", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8304, "upload_time": "2014-11-20T10:37:02", "upload_time_iso_8601": "2014-11-20T10:37:02.514119Z", "url": "https://files.pythonhosted.org/packages/68/7a/5ba2ca49bc53dbd06e8c1bbde3477e77e706be42b94abce393c21519afbd/ckanapi-exporter-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b6ddac36be93482689a9572d46b93e1a", "sha256": "b0e1d0ec23b6940ab020f96df909820d7948b1ec6d3716ff90453127f2807c2d"}, "downloads": -1, "filename": "ckanapi-exporter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b6ddac36be93482689a9572d46b93e1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8139, "upload_time": "2019-03-30T08:51:19", "upload_time_iso_8601": "2019-03-30T08:51:19.043022Z", "url": "https://files.pythonhosted.org/packages/c1/9a/c2a7f0dc0da61d45be7c065514b2607b2397b16a33f5940ec34029f7e856/ckanapi-exporter-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6ddac36be93482689a9572d46b93e1a", "sha256": "b0e1d0ec23b6940ab020f96df909820d7948b1ec6d3716ff90453127f2807c2d"}, "downloads": -1, "filename": "ckanapi-exporter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b6ddac36be93482689a9572d46b93e1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8139, "upload_time": "2019-03-30T08:51:19", "upload_time_iso_8601": "2019-03-30T08:51:19.043022Z", "url": "https://files.pythonhosted.org/packages/c1/9a/c2a7f0dc0da61d45be7c065514b2607b2397b16a33f5940ec34029f7e856/ckanapi-exporter-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:14 2020"}