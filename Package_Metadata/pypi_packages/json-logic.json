{"info": {"author": "nadir.izr", "author_email": "nadir@soundmindtech.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "json-logic-py\n=============\n\nThis parser accepts `JsonLogic <http://jsonlogic.com>`__ rules and\nexecutes them in Python.\n\nThis is a Python porting of the excellent GitHub project by\n`jwadhams <https://github.com/jwadhams>`__ for JavaScript:\n`json-logic-js <https://github.com/jwadhams/json-logic-js>`__.\n\nAll credit goes to him, this is simply an implementation of the same\nlogic in Python (small differences below).\n\nThe JsonLogic format is designed to allow you to share rules (logic)\nbetween front-end and back-end code (regardless of language difference),\neven to store logic along with a record in a database. JsonLogic is\ndocumented extensively at `JsonLogic.com <http://jsonlogic.com>`__,\nincluding examples of every `supported\noperation <http://jsonlogic.com/operations.html>`__ and a place to `try\nout rules in your browser <http://jsonlogic.com/play.html>`__.\n\nThe same format can also be executed in PHP by the library\n`json-logic-php <https://github.com/jwadhams/json-logic-php/>`__\n\nExamples\n--------\n\nSimple\n~~~~~~\n\n.. code:: python\n\n    from json_logic import jsonLogic\n    jsonLogic( { \"==\" : [1, 1] } )\n    # True\n\nThis is a simple test, equivalent to ``1 == 1``. A few things about the\nformat:\n\n1. The operator is always in the \"key\" position. There is only one key\n   per JsonLogic rule.\n2. The values are typically an array.\n3. Each value can be a string, number, boolean, array (non-associative),\n   or null\n\nCompound\n~~~~~~~~\n\nHere we're beginning to nest rules.\n\n.. code:: python\n\n    jsonLogic(\n      {\"and\" : [\n        { \">\" : [3,1] },\n        { \"<\" : [1,3] }\n      ] }\n    )\n    # True\n\nIn an infix language (like Python) this could be written as:\n\n.. code:: python\n\n    ( (3 > 1) and (1 < 3) )\n\nData-Driven\n~~~~~~~~~~~\n\nObviously these rules aren't very interesting if they can only take\nstatic literal data. Typically ``jsonLogic`` will be called with a rule\nobject and a data object. You can use the ``var`` operator to get\nattributes of the data object:\n\n.. code:: python\n\n    jsonLogic(\n      { \"var\" : [\"a\"] }, # Rule\n      { a : 1, b : 2 }   # Data\n    )\n    # 1\n\nIf you like, we support `syntactic\nsugar <https://en.wikipedia.org/wiki/Syntactic_sugar>`__ on unary\noperators to skip the array around values:\n\n.. code:: python\n\n    jsonLogic(\n      { \"var\" : \"a\" },\n      { a : 1, b : 2 }\n    )\n    # 1\n\nYou can also use the ``var`` operator to access an array by numeric\nindex:\n\n.. code:: python\n\n    jsonLogic(\n      {\"var\" : 1 },\n      [ \"apple\", \"banana\", \"carrot\" ]\n    )\n    # \"banana\"\n\nHere's a complex rule that mixes literals and data. The pie isn't ready\nto eat unless it's cooler than 110 degrees, *and* filled with apples.\n\n.. code:: python\n\n    rules = { \"and\" : [\n      {\"<\" : [ { \"var\" : \"temp\" }, 110 ]},\n      {\"==\" : [ { \"var\" : \"pie.filling\" }, \"apple\" ] }\n    ] }\n\n    data = { \"temp\" : 100, \"pie\" : { \"filling\" : \"apple\" } }\n\n    jsonLogic(rules, data)\n    # True\n\nAlways and Never\n~~~~~~~~~~~~~~~~\n\nSometimes the rule you want to process is \"Always\" or \"Never.\" If the\nfirst parameter passed to ``jsonLogic`` is a non-object,\nnon-associative-array, it is returned immediately.\n\n.. code:: python\n\n    #Always\n    jsonLogic(True, data_will_be_ignored);\n    # True\n\n    #Never\n    jsonLogic(false, i_wasnt_even_supposed_to_be_here);\n    # False\n\nInstallation\n------------\n\nThe best way to install this library is via\n`PIP <https://pypi.python.org/pypi/>`__:\n\n.. code:: bash\n\n    pip install json-logic\n\nIf that doesn't suit you, and you want to manage updates yourself, the\nentire library is self-contained in ``json_logic.py`` and you can\ndownload it straight into your project as you see fit.\n\n.. code:: bash\n\n    curl -O https://raw.githubusercontent.com/nadirizr/json-logic-py/master/json_logic.py\n\nDifferences from the original `JavaScript version <https://github.com/jwadhams/json-logic-js>`__\n------------------------------------------------------------------------------------------------\n\nThe only difference is in the straightforward '==' and '===' comparison\noperators, since they have different expected behavior in Python than in\nJavaScript.\n\nIn JS: \\* '==' - Performs type coercion and compares. \\* '===' - Does\nnot perform type coercion.\n\nIn Python: \\* '==' - Does not perform type coercion, compares using\nPyton's **eq** operator. \\* '===' - Does not perform type coercion,\ncompares using Python's 'is' operator.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nadirizr/json-logic-py", "keywords": "json-logic", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "json-logic", "package_url": "https://pypi.org/project/json-logic/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/json-logic/", "project_urls": {"Homepage": "https://github.com/nadirizr/json-logic-py"}, "release_url": "https://pypi.org/project/json-logic/0.6.3/", "requires_dist": ["coverage; extra == 'test'", "check-manifest; extra == 'dev'"], "requires_python": "", "summary": "Build complex rules, serialize them as JSON, and execute them in Python", "version": "0.6.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This parser accepts <a href=\"http://jsonlogic.com\" rel=\"nofollow\">JsonLogic</a> rules and\nexecutes them in Python.</p>\n<p>This is a Python porting of the excellent GitHub project by\n<a href=\"https://github.com/jwadhams\" rel=\"nofollow\">jwadhams</a> for JavaScript:\n<a href=\"https://github.com/jwadhams/json-logic-js\" rel=\"nofollow\">json-logic-js</a>.</p>\n<p>All credit goes to him, this is simply an implementation of the same\nlogic in Python (small differences below).</p>\n<p>The JsonLogic format is designed to allow you to share rules (logic)\nbetween front-end and back-end code (regardless of language difference),\neven to store logic along with a record in a database. JsonLogic is\ndocumented extensively at <a href=\"http://jsonlogic.com\" rel=\"nofollow\">JsonLogic.com</a>,\nincluding examples of every <a href=\"http://jsonlogic.com/operations.html\" rel=\"nofollow\">supported\noperation</a> and a place to <a href=\"http://jsonlogic.com/play.html\" rel=\"nofollow\">try\nout rules in your browser</a>.</p>\n<p>The same format can also be executed in PHP by the library\n<a href=\"https://github.com/jwadhams/json-logic-php/\" rel=\"nofollow\">json-logic-php</a></p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"simple\">\n<h3>Simple</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json_logic</span> <span class=\"kn\">import</span> <span class=\"n\">jsonLogic</span>\n<span class=\"n\">jsonLogic</span><span class=\"p\">(</span> <span class=\"p\">{</span> <span class=\"s2\">\"==\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</pre>\n<p>This is a simple test, equivalent to <tt>1 == 1</tt>. A few things about the\nformat:</p>\n<ol>\n<li>The operator is always in the \u201ckey\u201d position. There is only one key\nper JsonLogic rule.</li>\n<li>The values are typically an array.</li>\n<li>Each value can be a string, number, boolean, array (non-associative),\nor null</li>\n</ol>\n</div>\n<div id=\"compound\">\n<h3>Compound</h3>\n<p>Here we\u2019re beginning to nest rules.</p>\n<pre><span class=\"n\">jsonLogic</span><span class=\"p\">(</span>\n  <span class=\"p\">{</span><span class=\"s2\">\"and\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n  <span class=\"p\">]</span> <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</pre>\n<p>In an infix language (like Python) this could be written as:</p>\n<pre><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"data-driven\">\n<h3>Data-Driven</h3>\n<p>Obviously these rules aren\u2019t very interesting if they can only take\nstatic literal data. Typically <tt>jsonLogic</tt> will be called with a rule\nobject and a data object. You can use the <tt>var</tt> operator to get\nattributes of the data object:</p>\n<pre><span class=\"n\">jsonLogic</span><span class=\"p\">(</span>\n  <span class=\"p\">{</span> <span class=\"s2\">\"var\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span> <span class=\"p\">},</span> <span class=\"c1\"># Rule</span>\n  <span class=\"p\">{</span> <span class=\"n\">a</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">}</span>   <span class=\"c1\"># Data</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n</pre>\n<p>If you like, we support <a href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\" rel=\"nofollow\">syntactic\nsugar</a> on unary\noperators to skip the array around values:</p>\n<pre><span class=\"n\">jsonLogic</span><span class=\"p\">(</span>\n  <span class=\"p\">{</span> <span class=\"s2\">\"var\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"a\"</span> <span class=\"p\">},</span>\n  <span class=\"p\">{</span> <span class=\"n\">a</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"p\">:</span> <span class=\"mi\">2</span> <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n</pre>\n<p>You can also use the <tt>var</tt> operator to access an array by numeric\nindex:</p>\n<pre><span class=\"n\">jsonLogic</span><span class=\"p\">(</span>\n  <span class=\"p\">{</span><span class=\"s2\">\"var\"</span> <span class=\"p\">:</span> <span class=\"mi\">1</span> <span class=\"p\">},</span>\n  <span class=\"p\">[</span> <span class=\"s2\">\"apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"banana\"</span><span class=\"p\">,</span> <span class=\"s2\">\"carrot\"</span> <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># \"banana\"</span>\n</pre>\n<p>Here\u2019s a complex rule that mixes literals and data. The pie isn\u2019t ready\nto eat unless it\u2019s cooler than 110 degrees, <em>and</em> filled with apples.</p>\n<pre><span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s2\">\"and\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span><span class=\"s2\">\"&lt;\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">\"var\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"temp\"</span> <span class=\"p\">},</span> <span class=\"mi\">110</span> <span class=\"p\">]},</span>\n  <span class=\"p\">{</span><span class=\"s2\">\"==\"</span> <span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"p\">{</span> <span class=\"s2\">\"var\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"pie.filling\"</span> <span class=\"p\">},</span> <span class=\"s2\">\"apple\"</span> <span class=\"p\">]</span> <span class=\"p\">}</span>\n<span class=\"p\">]</span> <span class=\"p\">}</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s2\">\"temp\"</span> <span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s2\">\"pie\"</span> <span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s2\">\"filling\"</span> <span class=\"p\">:</span> <span class=\"s2\">\"apple\"</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n\n<span class=\"n\">jsonLogic</span><span class=\"p\">(</span><span class=\"n\">rules</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n</pre>\n</div>\n<div id=\"always-and-never\">\n<h3>Always and Never</h3>\n<p>Sometimes the rule you want to process is \u201cAlways\u201d or \u201cNever.\u201d If the\nfirst parameter passed to <tt>jsonLogic</tt> is a non-object,\nnon-associative-array, it is returned immediately.</p>\n<pre><span class=\"c1\">#Always</span>\n<span class=\"n\">jsonLogic</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">data_will_be_ignored</span><span class=\"p\">);</span>\n<span class=\"c1\"># True</span>\n\n<span class=\"c1\">#Never</span>\n<span class=\"n\">jsonLogic</span><span class=\"p\">(</span><span class=\"n\">false</span><span class=\"p\">,</span> <span class=\"n\">i_wasnt_even_supposed_to_be_here</span><span class=\"p\">);</span>\n<span class=\"c1\"># False</span>\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The best way to install this library is via\n<a href=\"https://pypi.python.org/pypi/\" rel=\"nofollow\">PIP</a>:</p>\n<pre>pip install json-logic\n</pre>\n<p>If that doesn\u2019t suit you, and you want to manage updates yourself, the\nentire library is self-contained in <tt>json_logic.py</tt> and you can\ndownload it straight into your project as you see fit.</p>\n<pre>curl -O https://raw.githubusercontent.com/nadirizr/json-logic-py/master/json_logic.py\n</pre>\n</div>\n<div id=\"differences-from-the-original-javascript-version\">\n<h2>Differences from the original <a href=\"https://github.com/jwadhams/json-logic-js\" rel=\"nofollow\">JavaScript version</a></h2>\n<p>The only difference is in the straightforward \u2018==\u2019 and \u2018===\u2019 comparison\noperators, since they have different expected behavior in Python than in\nJavaScript.</p>\n<p>In JS: * \u2018==\u2019 - Performs type coercion and compares. * \u2018===\u2019 - Does\nnot perform type coercion.</p>\n<p>In Python: * \u2018==\u2019 - Does not perform type coercion, compares using\nPyton\u2019s <strong>eq</strong> operator. * \u2018===\u2019 - Does not perform type coercion,\ncompares using Python\u2019s \u2018is\u2019 operator.</p>\n</div>\n\n          </div>"}, "last_serial": 2743533, "releases": {"0.6.2": [{"comment_text": "", "digests": {"md5": "96141840c2c8443742a486ea69644ce8", "sha256": "de32d2e59f57aa9a4d8958234443fa2f35a37c323624b155f784ffdec2cc5922"}, "downloads": -1, "filename": "json_logic-0.6.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "96141840c2c8443742a486ea69644ce8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8198, "upload_time": "2015-12-03T15:22:07", "upload_time_iso_8601": "2015-12-03T15:22:07.638159Z", "url": "https://files.pythonhosted.org/packages/ba/f0/3324a879fd34b955faf3f309d2e7c4d454193384ea87f8ff135be152d364/json_logic-0.6.2-py2.py3-none-any.whl", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "3387d84c302b93e37262199a4532d3c3", "sha256": "dd873af85ae44292cdd708357c16d7788cf7590befa8fa1250cced27589fa7f0"}, "downloads": -1, "filename": "json_logic-0.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3387d84c302b93e37262199a4532d3c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8282, "upload_time": "2015-12-04T10:35:12", "upload_time_iso_8601": "2015-12-04T10:35:12.298185Z", "url": "https://files.pythonhosted.org/packages/03/7f/6ccb8a3f78f891944eaf916b9fc35f3135f995ec6c871e873ba1e5933544/json_logic-0.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af583d1030cb8c97a89847180cb68bda", "sha256": "d67d4656f4f5b427858141fa8247bf3062d612ebed99005b069d92e31139375f"}, "downloads": -1, "filename": "json_logic-0.6.3.tar.gz", "has_sig": false, "md5_digest": "af583d1030cb8c97a89847180cb68bda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5783, "upload_time": "2015-12-04T10:35:17", "upload_time_iso_8601": "2015-12-04T10:35:17.322153Z", "url": "https://files.pythonhosted.org/packages/72/e6/676a25a57eddf96fc2d693e609bc1c235a3084be6474d3b5fdad8a4e4417/json_logic-0.6.3.tar.gz", "yanked": false}], "0.7.0a0": [{"comment_text": "", "digests": {"md5": "86ff82eb68b7e04f7cf57144013e0d8e", "sha256": "a7af2e3673212279b4c7b63d0b0ead5f6b3d89cef8970bdbf60595d3bc9dd819"}, "downloads": -1, "filename": "json_logic-0.7.0a0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "86ff82eb68b7e04f7cf57144013e0d8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7552, "upload_time": "2017-03-31T11:22:49", "upload_time_iso_8601": "2017-03-31T11:22:49.634273Z", "url": "https://files.pythonhosted.org/packages/47/cc/65de2481a8b7fae1582c564527d47ecae82f9c9e7ba60ad570b012f22634/json_logic-0.7.0a0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "689d04e0a3a388c0ef63408b8c925cd4", "sha256": "84580b974bcfec7b00d63745f19ca363939fc2b93c579f578d41d7d10c12fe0c"}, "downloads": -1, "filename": "json_logic-0.7.0a0.tar.gz", "has_sig": false, "md5_digest": "689d04e0a3a388c0ef63408b8c925cd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6295, "upload_time": "2017-03-31T11:22:51", "upload_time_iso_8601": "2017-03-31T11:22:51.672378Z", "url": "https://files.pythonhosted.org/packages/7d/05/5b516986c0706b7ae5f4b2155b1c32979479b378b55c0dd9bcc48e70fc5d/json_logic-0.7.0a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3387d84c302b93e37262199a4532d3c3", "sha256": "dd873af85ae44292cdd708357c16d7788cf7590befa8fa1250cced27589fa7f0"}, "downloads": -1, "filename": "json_logic-0.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3387d84c302b93e37262199a4532d3c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8282, "upload_time": "2015-12-04T10:35:12", "upload_time_iso_8601": "2015-12-04T10:35:12.298185Z", "url": "https://files.pythonhosted.org/packages/03/7f/6ccb8a3f78f891944eaf916b9fc35f3135f995ec6c871e873ba1e5933544/json_logic-0.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af583d1030cb8c97a89847180cb68bda", "sha256": "d67d4656f4f5b427858141fa8247bf3062d612ebed99005b069d92e31139375f"}, "downloads": -1, "filename": "json_logic-0.6.3.tar.gz", "has_sig": false, "md5_digest": "af583d1030cb8c97a89847180cb68bda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5783, "upload_time": "2015-12-04T10:35:17", "upload_time_iso_8601": "2015-12-04T10:35:17.322153Z", "url": "https://files.pythonhosted.org/packages/72/e6/676a25a57eddf96fc2d693e609bc1c235a3084be6474d3b5fdad8a4e4417/json_logic-0.6.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:46 2020"}