{"info": {"author": "Gere L\u00f3r\u00e1nt", "author_email": "gerelorant@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Flask-MailAlchemy\nSQLAlchemy based e-mail sending extension for Flask.\n\n## Usage\n\nThe provided MailAlchemy extension object registers a Flask-Mail instance and an\nEmail model class through Flask-SQLAlchemy.\n\nFlask-MailAlchemy can be configured with the same parameters as \n[Flask-Mail](https://pythonhosted.org/Flask-Mail/#configuring-flask-mail)\nAdditional parameters include `MAIL_PER_MINUTE`, `MAIL_PER_HOUR` and \n`MAIL_PER_DAY`.\n\n### Initialize\n\nThe MailAlchemy extension can be initialized like any other Flask extension.\nFlask-SQLAlchemy instance is needed. Custom Email model can be provided for\nextending the model with extra functionality (e.g.: Adding foreign key to user\ntable). If `email_class` is `None`, a simple Email model is used. You can also \nprovide the Flask app after initialization with `mail.init_app(app)`. \n```python\nfrom flask import Flask\nfrom flask_mailalchemy import MailAlchemy, Message, EmailMixin\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\ndb = SQLAlchemy(app)\n\n\nclass Email(db.Model, EmailMixin):\n    recipient_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    \n\nmail = MailAlchemy(app, db, Email)\n\n\nif __name__ == '__main__':\n    app.run()\n```\n \n ### Sending mails\n To send email instantly, use the `send()` or `send_message()` methods just like\n in Flask-Mail. Additionally, message content can be rendered from templates \n with the `render_template()` method.\n Templates should be saved in the `templates/mail/` directory. The method expects \n the template name without extension and uses `.html` and `.txt` files for \n message body.\n ```python\nmsg = Message(\n    subject=\"Test Mail\",\n    sender=(\"Sender Name\", \"sender@address.com\"),\n    recipients=(\"recipient1@example.com\", \"recipient2@example.com\")\n)\nmail.render_template(msg, \"hello_world\", name=\"John\")\n\nmail.send(msg)\n```\n\n### Using worker\nIt might be a good idea to handle the sending of e-mails in the background in a\nseparate thread. This way we can schedule e-mails to be sent at a specific time\nin the future and handle mail server limitations. These limitations can be set\nin the Flask config with the values `MAIL_PER_MINUTE`, `MAIL_PER_HOUR` and \n`MAIL_PER_DAY`. To schedule an e-mail to send, use the `schedule()` or \n`schedule_mesage()`  methods.\n```python\n@app.route(\"/mail_test\")\ndef mail_test():\n    msg = Message(\n        subject=\"Test Mail\",\n        sender=(\"Sender Name\", \"sender@address.com\"),\n        recipients=(\"recipient1@example.com\", \"recipient2@example.com\")\n    )\n    mail.render_template(msg, \"hello_world\", name=\"John\")\n    \n    mail.schedule(msg, datetime.datetime(2020, 1, 1, 8, 0, 0))\n\nif __name__ == '__main__':\n    mail.run_worker()\n    app.run()\n```\n\n### Templates\nThere is a base template available in the `templates/mail/` directory, which is\nconsists of 4 regular blocks and one content block.\n```jinja2\n{% block header %}{% include \"mail/blocks/header.html\" %}{% endblock %}\n\n{% block greetings %}{% include \"mail/blocks/greetings.html\" %}{% endblock %}\n\n{% block content%}{% endblock %}\n\n{% block sign_off %}{% include \"mail/blocks/sign_off.html\" %}{% endblock %}\n\n{% block footer %}{% include \"mail/blocks/footer.html\" %}{% endblock %}\n```\nThe regular blocks are found in `templates/mail/blocks`. The base and block \ntemplates have both an HTML and a plaintext version. For your e-mail templates\nsimply extend the base template and override the `content` block.\n```jinja2\n{% extends 'mail/base.html' %}\n\n{% block content %}\n<p>Hello {{name}}!</p>\n{% endblock %}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gerelorant/flask-mailalchemy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Flask-MailAlchemy", "package_url": "https://pypi.org/project/Flask-MailAlchemy/", "platform": "", "project_url": "https://pypi.org/project/Flask-MailAlchemy/", "project_urls": {"Homepage": "https://github.com/gerelorant/flask-mailalchemy"}, "release_url": "https://pypi.org/project/Flask-MailAlchemy/0.4/", "requires_dist": null, "requires_python": "", "summary": "SQLAlchemy based e-mail sending extension for Flask", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flask-MailAlchemy</h1>\n<p>SQLAlchemy based e-mail sending extension for Flask.</p>\n<h2>Usage</h2>\n<p>The provided MailAlchemy extension object registers a Flask-Mail instance and an\nEmail model class through Flask-SQLAlchemy.</p>\n<p>Flask-MailAlchemy can be configured with the same parameters as\n<a href=\"https://pythonhosted.org/Flask-Mail/#configuring-flask-mail\" rel=\"nofollow\">Flask-Mail</a>\nAdditional parameters include <code>MAIL_PER_MINUTE</code>, <code>MAIL_PER_HOUR</code> and\n<code>MAIL_PER_DAY</code>.</p>\n<h3>Initialize</h3>\n<p>The MailAlchemy extension can be initialized like any other Flask extension.\nFlask-SQLAlchemy instance is needed. Custom Email model can be provided for\nextending the model with extra functionality (e.g.: Adding foreign key to user\ntable). If <code>email_class</code> is <code>None</code>, a simple Email model is used. You can also\nprovide the Flask app after initialization with <code>mail.init_app(app)</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_mailalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">MailAlchemy</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">EmailMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemy</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">SQLAlchemy</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Email</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">EmailMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">recipient_id</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'user.id'</span><span class=\"p\">))</span>\n    \n\n<span class=\"n\">mail</span> <span class=\"o\">=</span> <span class=\"n\">MailAlchemy</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">Email</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>Sending mails</h3>\n<p>To send email instantly, use the <code>send()</code> or <code>send_message()</code> methods just like\nin Flask-Mail. Additionally, message content can be rendered from templates\nwith the <code>render_template()</code> method.\nTemplates should be saved in the <code>templates/mail/</code> directory. The method expects\nthe template name without extension and uses <code>.html</code> and <code>.txt</code> files for\nmessage body.</p>\n<pre><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span>\n   <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">\"Test Mail\"</span><span class=\"p\">,</span>\n   <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"Sender Name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sender@address.com\"</span><span class=\"p\">),</span>\n   <span class=\"n\">recipients</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"recipient1@example.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"recipient2@example.com\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"s2\">\"hello_world\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"John\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</pre>\n<h3>Using worker</h3>\n<p>It might be a good idea to handle the sending of e-mails in the background in a\nseparate thread. This way we can schedule e-mails to be sent at a specific time\nin the future and handle mail server limitations. These limitations can be set\nin the Flask config with the values <code>MAIL_PER_MINUTE</code>, <code>MAIL_PER_HOUR</code> and\n<code>MAIL_PER_DAY</code>. To schedule an e-mail to send, use the <code>schedule()</code> or\n<code>schedule_mesage()</code>  methods.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/mail_test\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">mail_test</span><span class=\"p\">():</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">Message</span><span class=\"p\">(</span>\n        <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">\"Test Mail\"</span><span class=\"p\">,</span>\n        <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"Sender Name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sender@address.com\"</span><span class=\"p\">),</span>\n        <span class=\"n\">recipients</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"recipient1@example.com\"</span><span class=\"p\">,</span> <span class=\"s2\">\"recipient2@example.com\"</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"s2\">\"hello_world\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"John\"</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">schedule</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">run_worker</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h3>Templates</h3>\n<p>There is a base template available in the <code>templates/mail/</code> directory, which is\nconsists of 4 regular blocks and one content block.</p>\n<pre>{% block header %}{% include \"mail/blocks/header.html\" %}{% endblock %}\n\n{% block greetings %}{% include \"mail/blocks/greetings.html\" %}{% endblock %}\n\n{% block content%}{% endblock %}\n\n{% block sign_off %}{% include \"mail/blocks/sign_off.html\" %}{% endblock %}\n\n{% block footer %}{% include \"mail/blocks/footer.html\" %}{% endblock %}\n</pre>\n<p>The regular blocks are found in <code>templates/mail/blocks</code>. The base and block\ntemplates have both an HTML and a plaintext version. For your e-mail templates\nsimply extend the base template and override the <code>content</code> block.</p>\n<pre>{% extends 'mail/base.html' %}\n\n{% block content %}\n&lt;p&gt;Hello {{name}}!&lt;/p&gt;\n{% endblock %}\n</pre>\n\n          </div>"}, "last_serial": 6182867, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "cc6677061804f4b1dc5f375d02834a5a", "sha256": "61d39e1610b083d2e62e180ee547c5311485a617d56404a900bfb735afe767f9"}, "downloads": -1, "filename": "Flask-MailAlchemy-0.1.tar.gz", "has_sig": false, "md5_digest": "cc6677061804f4b1dc5f375d02834a5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4607, "upload_time": "2019-11-22T11:03:29", "upload_time_iso_8601": "2019-11-22T11:03:29.836947Z", "url": "https://files.pythonhosted.org/packages/39/2e/17527e9af3c0c3c6a174d8f9dd14ec746c6e7f5df23ab0d54462d769f718/Flask-MailAlchemy-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3ed934afc6b7adc7c4eadaef773207f9", "sha256": "1f5c021807adc4ca2ef72a6c4a0ce3f000d81a8ab06356f073cf57b3de52158a"}, "downloads": -1, "filename": "Flask-MailAlchemy-0.2.tar.gz", "has_sig": false, "md5_digest": "3ed934afc6b7adc7c4eadaef773207f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5143, "upload_time": "2019-11-22T11:12:35", "upload_time_iso_8601": "2019-11-22T11:12:35.022064Z", "url": "https://files.pythonhosted.org/packages/7c/9c/c4afd807c496e1df070c51e74fbc75e3c5f6a194180ff05b70ff8fd6735c/Flask-MailAlchemy-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0eeef70234e197c426c7c25cede0ae62", "sha256": "6fd14070ec5a502476b929255e98b50264a166436a9c19b71c357632d1bb3556"}, "downloads": -1, "filename": "Flask-MailAlchemy-0.3.tar.gz", "has_sig": false, "md5_digest": "0eeef70234e197c426c7c25cede0ae62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6093, "upload_time": "2019-11-22T14:17:02", "upload_time_iso_8601": "2019-11-22T14:17:02.232004Z", "url": "https://files.pythonhosted.org/packages/71/73/29968f1142264f98a8601315a9986a5629120f571b4d604613341e8c8619/Flask-MailAlchemy-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "b5f7e81b2befbc6ea4f461080a4e169e", "sha256": "769beee37585595df2b748a02061f4dc4faf224843ff37b196cef7ba06fa1b5c"}, "downloads": -1, "filename": "Flask-MailAlchemy-0.4.tar.gz", "has_sig": false, "md5_digest": "b5f7e81b2befbc6ea4f461080a4e169e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6539, "upload_time": "2019-11-22T18:58:57", "upload_time_iso_8601": "2019-11-22T18:58:57.308775Z", "url": "https://files.pythonhosted.org/packages/1c/d5/a7ab1325038e4a6d6d248056d0da6b87b819b79f817990a40ba4470ac9fe/Flask-MailAlchemy-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b5f7e81b2befbc6ea4f461080a4e169e", "sha256": "769beee37585595df2b748a02061f4dc4faf224843ff37b196cef7ba06fa1b5c"}, "downloads": -1, "filename": "Flask-MailAlchemy-0.4.tar.gz", "has_sig": false, "md5_digest": "b5f7e81b2befbc6ea4f461080a4e169e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6539, "upload_time": "2019-11-22T18:58:57", "upload_time_iso_8601": "2019-11-22T18:58:57.308775Z", "url": "https://files.pythonhosted.org/packages/1c/d5/a7ab1325038e4a6d6d248056d0da6b87b819b79f817990a40ba4470ac9fe/Flask-MailAlchemy-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:39 2020"}