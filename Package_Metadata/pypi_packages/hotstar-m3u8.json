{"info": {"author": "hotstar.com", "author_email": "gaurav.s@hotstar.com", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://travis-ci.org/globocom/m3u8.svg\n    :target: https://travis-ci.org/globocom/m3u8\n\n.. image:: https://coveralls.io/repos/globocom/m3u8/badge.png?branch=master\n    :target: https://coveralls.io/r/globocom/m3u8?branch=master\n\n.. image:: https://badge.fury.io/py/m3u8.svg\n    :target: https://badge.fury.io/py/m3u8\n\nm3u8\n====\n\nPython `m3u8`_ parser.\n\nDocumentation\n=============\n\nThe basic usage is to create a playlist object from uri, file path or\ndirectly from a string:\n\n.. code-block:: python\n\n    import m3u8\n\n    m3u8_obj = m3u8.load('http://videoserver.com/playlist.m3u8')  # this could also be an absolute filename\n    print m3u8_obj.segments\n    print m3u8_obj.target_duration\n\n    # if you already have the content as string, use\n    \n    m3u8_obj = m3u8.loads('#EXTM3U8 ... etc ... ')\n\nSupported tags\n==============\n\n* `#EXT-X-TARGETDURATION`_\n* `#EXT-X-MEDIA-SEQUENCE`_\n* `#EXT-X-DISCONTINUITY-SEQUENCE`_\n* `#EXT-X-PROGRAM-DATE-TIME`_\n* `#EXT-X-MEDIA`_\n* `#EXT-X-PLAYLIST-TYPE`_\n* `#EXT-X-KEY`_\n* `#EXT-X-STREAM-INF`_\n* `#EXT-X-VERSION`_\n* #EXT-X-ALLOW-CACHE\n* `#EXT-X-ENDLIST`_\n* `#EXTINF`_\n* `#EXT-X-I-FRAMES-ONLY`_\n* `#EXT-X-BYTERANGE`_\n* `#EXT-X-I-FRAME-STREAM-INF`_\n* `#EXT-X-DISCONTINUITY`_\n* #EXT-X-CUE-OUT\n* #EXT-X-CUE-OUT-CONT\n* #EXT-X-CUE-IN\n* #EXT-X-CUE-SPAN\n* #EXT-OATCLS-SCTE35\n* `#EXT-X-INDEPENDENT-SEGMENTS`_\n* `#EXT-X-MAP`_\n* `#EXT-X-START`_\n* #EXT-X-SERVER-CONTROL\n* #EXT-X-PART-INF\n* #EXT-X-PART\n* #EXT-X-RENDITION-REPORT\n* #EXT-X-SKIP\n* `#EXT-X-SESSION-DATA`_\n\nEncryption keys\n---------------\n\nThe segments may be or not encrypted. The ``keys`` attribute list will\nbe a list  with all the different keys as described with `#EXT-X-KEY`_:\n\nEach key has the next properties:\n\n-  ``method``: ex.: \"AES-128\"\n-  ``uri``: the key uri, ex.: \"http://videoserver.com/key.bin\"\n-  ``iv``: the initialization vector, if available. Otherwise ``None``.\n\nIf no ``#EXT-X-KEY`` is found, the ``keys`` list will have a unique element ``None``. Multiple keys are supported.\n\nIf unencrypted and encrypted segments are mixed in the M3U8 file, then the list will contain a ``None`` element, with one\nor more keys afterwards.\n\nTo traverse the list of keys available:\n\n.. code-block:: python\n\n    import m3u8\n\n    m3u8_obj = m3u8.loads('#EXTM3U8 ... etc ...')\n    len(m3u8_obj.keys) => returns the number of keys available in the list (normally 1)\n    for key in m3u8_obj.keys:\n       if key:  # First one could be None\n          key.uri\n          key.method\n          key.iv\n\n\nGetting segments encrypted with one key\n---------------------------------------\n\nThere are cases where listing segments for a given key is important. It's possible to\nretrieve the list of segments encrypted with one key via ``by_key`` method in the\n``segments`` list.\n\nExample of getting the segments with no encryption:\n\n.. code-block:: python\n\n    import m3u8\n\n    m3u8_obj = m3u8.loads('#EXTM3U8 ... etc ...')\n    segmk1 = m3u8_obj.segments.by_key(None)\n\n    # Get the list of segments encrypted using last key\n    segm = m3u8_obj.segments.by_key( m3u8_obj.keys[-1] )\n\n\nWith this method, is now possible also to change the key from some of the segments programmatically:\n\n\n.. code-block:: python\n\n    import m3u8\n\n    m3u8_obj = m3u8.loads('#EXTM3U8 ... etc ...')\n\n    # Create a new Key and replace it\n    new_key = m3u8.Key(\"AES-128\", \"/encrypted/newkey.bin\", None, iv=\"0xf123ad23f22e441098aa87ee\")\n    for segment in m3u8_obj.segments.by_key( m3u8_obj.keys[-1] ):\n        segm.key = new_key\n    # Remember to sync the key from the list as well\n    m3u8_obj.keys[-1] = new_key\n\n\n\nVariant playlists (variable bitrates)\n-------------------------------------\n\nA playlist can have a list to other playlist files, this is used to\nrepresent multiple bitrates videos, and it's called `variant streams`_.\nSee an `example here`_.\n\n.. code-block:: python\n\n    variant_m3u8 = m3u8.loads('#EXTM3U8 ... contains a variant stream ...')\n    variant_m3u8.is_variant    # in this case will be True\n\n    for playlist in variant_m3u8.playlists:\n        playlist.uri\n        playlist.stream_info.bandwidth\n\nthe playlist object used in the for loop above has a few attributes:\n\n-  ``uri``: the url to the stream\n-  ``stream_info``: a ``StreamInfo`` object (actually a namedtuple) with\n   all the attributes available to `#EXT-X-STREAM-INF`_\n-  ``media``: a list of related ``Media`` objects with all the attributes\n   available to `#EXT-X-MEDIA`_\n-  ``playlist_type``: the type of the playlist, which can be one of `VOD`_\n   (video on demand) or `EVENT`_\n\n**NOTE: the following attributes are not implemented yet**, follow\n`issue 4`_ for updates\n\n-  ``alternative_audios``: its an empty list, unless it's a playlist\n   with `Alternative audio`_, in this case it's a list with ``Media``\n   objects with all the attributes available to `#EXT-X-MEDIA`_\n-  ``alternative_videos``: same as ``alternative_audios``\n\nA variant playlist can also have links to `I-frame playlists`_, which are used\nto specify where the I-frames are in a video. See `Apple's documentation`_ on\nthis for more information. These I-frame playlists can be accessed in a similar\nway to regular playlists.\n\n.. code-block:: python\n\n    variant_m3u8 = m3u8.loads('#EXTM3U ... contains a variant stream ...')\n\n    for iframe_playlist in variant_m3u8.iframe_playlists:\n        iframe_playlist.uri\n        iframe_playlist.iframe_stream_info.bandwidth\n\nThe iframe_playlist object used in the for loop above has a few attributes:\n\n-  ``uri``: the url to the I-frame playlist\n-  ``base_uri``: the base uri of the variant playlist (if given)\n-  ``iframe_stream_info``: a ``StreamInfo`` object (same as a regular playlist)\n\nCustom tags\n-----------\n\nQuoting the documentation::\n\n    Lines that start with the character '#' are either comments or tags.\n    Tags begin with #EXT.  They are case-sensitive.  All other lines that\n    begin with '#' are comments and SHOULD be ignored.\n\nThis library ignores all the non standard tags by default. If you want them to be collected while loading the file content,\nyou need to pass a function to the `load/loads` functions, following the example below:\n\n.. code-block:: python\n\n    import m3u8\n\n    def get_movie(line, data, lineno):\n        if line.startswith('#MOVIE-NAME:'):\n            custom_tag = line.split(':')\n            data['movie'] = custom_tag[1].strip()\n\n    m3u8_obj = m3u8.load('http://videoserver.com/playlist.m3u8', custom_tags_parser=get_movie)\n    print(m3u8_obj.data['movie'])  #  million dollar baby\n\n\nRunning Tests\n=============\n\n.. code-block:: bash\n\n    $ ./runtests\n\nContributing\n============\n\nAll contribution is welcome, but we will merge a pull request if, and only if, it\n\n-  has tests\n-  follows the code conventions\n\nIf you plan to implement a new feature or something that will take more\nthan a few minutes, please open an issue to make sure we don't work on\nthe same thing.\n\n.. _m3u8: https://tools.ietf.org/html/rfc8216\n.. _#EXT-X-VERSION: https://tools.ietf.org/html/rfc8216#section-4.3.1.2\n.. _#EXTINF: https://tools.ietf.org/html/rfc8216#section-4.3.2.1\n.. _#EXT-X-BYTERANGE: https://tools.ietf.org/html/rfc8216#section-4.3.2.2\n.. _#EXT-X-DISCONTINUITY: https://tools.ietf.org/html/rfc8216#section-4.3.2.3\n.. _#EXT-X-KEY: https://tools.ietf.org/html/rfc8216#section-4.3.2.4\n.. _#EXT-X-MAP: https://tools.ietf.org/html/rfc8216#section-4.3.2.5\n.. _#EXT-X-PROGRAM-DATE-TIME: https://tools.ietf.org/html/rfc8216#section-4.3.2.6\n.. _#EXT-X-DATERANGE: https://tools.ietf.org/html/rfc8216#section-4.3.2.7\n.. _#EXT-X-TARGETDURATION: https://tools.ietf.org/html/rfc8216#section-4.3.3.1\n.. _#EXT-X-MEDIA-SEQUENCE: https://tools.ietf.org/html/rfc8216#section-4.3.3.2\n.. _#EXT-X-DISCONTINUITY-SEQUENCE: https://tools.ietf.org/html/rfc8216#section-4.3.3.3\n.. _#EXT-X-ENDLIST: https://tools.ietf.org/html/rfc8216#section-4.3.3.4\n.. _#EXT-X-PLAYLIST-TYPE: https://tools.ietf.org/html/rfc8216#section-4.3.3.5\n.. _#EXT-X-I-FRAMES-ONLY: https://tools.ietf.org/html/rfc8216#section-4.3.3.6\n.. _#EXT-X-MEDIA: https://tools.ietf.org/html/rfc8216#section-4.3.4.1\n.. _#EXT-X-STREAM-INF: https://tools.ietf.org/html/rfc8216#section-4.3.4.2\n.. _#EXT-X-I-FRAME-STREAM-INF: https://tools.ietf.org/html/rfc8216#section-4.3.4.3\n.. _#EXT-X-SESSION-DATA: https://tools.ietf.org/html/rfc8216#section-4.3.4.4\n.. _#EXT-X-INDEPENDENT-SEGMENTS: https://tools.ietf.org/html/rfc8216#section-4.3.5.1\n.. _#EXT-X-START: https://tools.ietf.org/html/rfc8216#section-4.3.5.2\n.. _issue 1: https://github.com/globocom/m3u8/issues/1\n.. _variant streams: https://tools.ietf.org/html/rfc8216#section-6.2.4\n.. _example here: http://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-8.5\n.. _issue 4: https://github.com/globocom/m3u8/issues/4\n.. _I-frame playlists: https://tools.ietf.org/html/rfc8216#section-4.3.4.3\n.. _Apple's documentation: https://developer.apple.com/library/ios/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-I_FRAME_PLAYLIST\n.. _Alternative audio: http://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-8.7\n.. _VOD: https://developer.apple.com/library/mac/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-TNTAG2\n.. _EVENT: https://developer.apple.com/library/mac/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-EVENT_PLAYLIST", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gsingh42/m3u8", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hotstar-m3u8", "package_url": "https://pypi.org/project/hotstar-m3u8/", "platform": "", "project_url": "https://pypi.org/project/hotstar-m3u8/", "project_urls": {"Homepage": "https://github.com/gsingh42/m3u8"}, "release_url": "https://pypi.org/project/hotstar-m3u8/0.5.5/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Python m3u8 parser", "version": "0.5.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/globocom/m3u8\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/globocom/m3u8.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7de4c622d14d80481f34288cd9632c927ba14858/68747470733a2f2f7472617669732d63692e6f72672f676c6f626f636f6d2f6d3375382e737667\"></a>\n<a href=\"https://coveralls.io/r/globocom/m3u8?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/globocom/m3u8/badge.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4276f469a9047ebac5ef47d1dbb4d189bf951446/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f676c6f626f636f6d2f6d3375382f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/m3u8\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/m3u8.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/57a5f80edfdbf71eeee28a5ba9baa32cf4611e74/68747470733a2f2f62616467652e667572792e696f2f70792f6d3375382e737667\"></a>\n<div id=\"m3u8\">\n<h2>m3u8</h2>\n<p>Python <a href=\"https://tools.ietf.org/html/rfc8216\" rel=\"nofollow\">m3u8</a> parser.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The basic usage is to create a playlist object from uri, file path or\ndirectly from a string:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">m3u8</span>\n\n<span class=\"n\">m3u8_obj</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'http://videoserver.com/playlist.m3u8'</span><span class=\"p\">)</span>  <span class=\"c1\"># this could also be an absolute filename</span>\n<span class=\"nb\">print</span> <span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">segments</span>\n<span class=\"nb\">print</span> <span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">target_duration</span>\n\n<span class=\"c1\"># if you already have the content as string, use</span>\n\n<span class=\"n\">m3u8_obj</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'#EXTM3U8 ... etc ... '</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"supported-tags\">\n<h2>Supported tags</h2>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.3.1\" rel=\"nofollow\">#EXT-X-TARGETDURATION</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.3.2\" rel=\"nofollow\">#EXT-X-MEDIA-SEQUENCE</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.3.3\" rel=\"nofollow\">#EXT-X-DISCONTINUITY-SEQUENCE</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.2.6\" rel=\"nofollow\">#EXT-X-PROGRAM-DATE-TIME</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.4.1\" rel=\"nofollow\">#EXT-X-MEDIA</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.3.5\" rel=\"nofollow\">#EXT-X-PLAYLIST-TYPE</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.2.4\" rel=\"nofollow\">#EXT-X-KEY</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.4.2\" rel=\"nofollow\">#EXT-X-STREAM-INF</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.1.2\" rel=\"nofollow\">#EXT-X-VERSION</a></li>\n<li>#EXT-X-ALLOW-CACHE</li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.3.4\" rel=\"nofollow\">#EXT-X-ENDLIST</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.2.1\" rel=\"nofollow\">#EXTINF</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.3.6\" rel=\"nofollow\">#EXT-X-I-FRAMES-ONLY</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.2.2\" rel=\"nofollow\">#EXT-X-BYTERANGE</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.4.3\" rel=\"nofollow\">#EXT-X-I-FRAME-STREAM-INF</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.2.3\" rel=\"nofollow\">#EXT-X-DISCONTINUITY</a></li>\n<li>#EXT-X-CUE-OUT</li>\n<li>#EXT-X-CUE-OUT-CONT</li>\n<li>#EXT-X-CUE-IN</li>\n<li>#EXT-X-CUE-SPAN</li>\n<li>#EXT-OATCLS-SCTE35</li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.5.1\" rel=\"nofollow\">#EXT-X-INDEPENDENT-SEGMENTS</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.2.5\" rel=\"nofollow\">#EXT-X-MAP</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.5.2\" rel=\"nofollow\">#EXT-X-START</a></li>\n<li>#EXT-X-SERVER-CONTROL</li>\n<li>#EXT-X-PART-INF</li>\n<li>#EXT-X-PART</li>\n<li>#EXT-X-RENDITION-REPORT</li>\n<li>#EXT-X-SKIP</li>\n<li><a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.4.4\" rel=\"nofollow\">#EXT-X-SESSION-DATA</a></li>\n</ul>\n<div id=\"encryption-keys\">\n<h3>Encryption keys</h3>\n<p>The segments may be or not encrypted. The <tt>keys</tt> attribute list will\nbe a list  with all the different keys as described with <a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.2.4\" rel=\"nofollow\">#EXT-X-KEY</a>:</p>\n<p>Each key has the next properties:</p>\n<ul>\n<li><tt>method</tt>: ex.: \u201cAES-128\u201d</li>\n<li><tt>uri</tt>: the key uri, ex.: \u201c<a href=\"http://videoserver.com/key.bin\" rel=\"nofollow\">http://videoserver.com/key.bin</a>\u201d</li>\n<li><tt>iv</tt>: the initialization vector, if available. Otherwise <tt>None</tt>.</li>\n</ul>\n<p>If no <tt><span class=\"pre\">#EXT-X-KEY</span></tt> is found, the <tt>keys</tt> list will have a unique element <tt>None</tt>. Multiple keys are supported.</p>\n<p>If unencrypted and encrypted segments are mixed in the M3U8 file, then the list will contain a <tt>None</tt> element, with one\nor more keys afterwards.</p>\n<p>To traverse the list of keys available:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">m3u8</span>\n\n<span class=\"n\">m3u8_obj</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'#EXTM3U8 ... etc ...'</span><span class=\"p\">)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">returns</span> <span class=\"n\">the</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">keys</span> <span class=\"n\">available</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"nb\">list</span> <span class=\"p\">(</span><span class=\"n\">normally</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">:</span>\n   <span class=\"k\">if</span> <span class=\"n\">key</span><span class=\"p\">:</span>  <span class=\"c1\"># First one could be None</span>\n      <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">uri</span>\n      <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">method</span>\n      <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">iv</span>\n</pre>\n</div>\n<div id=\"getting-segments-encrypted-with-one-key\">\n<h3>Getting segments encrypted with one key</h3>\n<p>There are cases where listing segments for a given key is important. It\u2019s possible to\nretrieve the list of segments encrypted with one key via <tt>by_key</tt> method in the\n<tt>segments</tt> list.</p>\n<p>Example of getting the segments with no encryption:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">m3u8</span>\n\n<span class=\"n\">m3u8_obj</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'#EXTM3U8 ... etc ...'</span><span class=\"p\">)</span>\n<span class=\"n\">segmk1</span> <span class=\"o\">=</span> <span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">segments</span><span class=\"o\">.</span><span class=\"n\">by_key</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the list of segments encrypted using last key</span>\n<span class=\"n\">segm</span> <span class=\"o\">=</span> <span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">segments</span><span class=\"o\">.</span><span class=\"n\">by_key</span><span class=\"p\">(</span> <span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">)</span>\n</pre>\n<p>With this method, is now possible also to change the key from some of the segments programmatically:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">m3u8</span>\n\n<span class=\"n\">m3u8_obj</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'#EXTM3U8 ... etc ...'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a new Key and replace it</span>\n<span class=\"n\">new_key</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">Key</span><span class=\"p\">(</span><span class=\"s2\">\"AES-128\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/encrypted/newkey.bin\"</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">iv</span><span class=\"o\">=</span><span class=\"s2\">\"0xf123ad23f22e441098aa87ee\"</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">segment</span> <span class=\"ow\">in</span> <span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">segments</span><span class=\"o\">.</span><span class=\"n\">by_key</span><span class=\"p\">(</span> <span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"p\">):</span>\n    <span class=\"n\">segm</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">new_key</span>\n<span class=\"c1\"># Remember to sync the key from the list as well</span>\n<span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_key</span>\n</pre>\n</div>\n<div id=\"variant-playlists-variable-bitrates\">\n<h3>Variant playlists (variable bitrates)</h3>\n<p>A playlist can have a list to other playlist files, this is used to\nrepresent multiple bitrates videos, and it\u2019s called <a href=\"https://tools.ietf.org/html/rfc8216#section-6.2.4\" rel=\"nofollow\">variant streams</a>.\nSee an <a href=\"http://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-8.5\" rel=\"nofollow\">example here</a>.</p>\n<pre><span class=\"n\">variant_m3u8</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'#EXTM3U8 ... contains a variant stream ...'</span><span class=\"p\">)</span>\n<span class=\"n\">variant_m3u8</span><span class=\"o\">.</span><span class=\"n\">is_variant</span>    <span class=\"c1\"># in this case will be True</span>\n\n<span class=\"k\">for</span> <span class=\"n\">playlist</span> <span class=\"ow\">in</span> <span class=\"n\">variant_m3u8</span><span class=\"o\">.</span><span class=\"n\">playlists</span><span class=\"p\">:</span>\n    <span class=\"n\">playlist</span><span class=\"o\">.</span><span class=\"n\">uri</span>\n    <span class=\"n\">playlist</span><span class=\"o\">.</span><span class=\"n\">stream_info</span><span class=\"o\">.</span><span class=\"n\">bandwidth</span>\n</pre>\n<p>the playlist object used in the for loop above has a few attributes:</p>\n<ul>\n<li><tt>uri</tt>: the url to the stream</li>\n<li><tt>stream_info</tt>: a <tt>StreamInfo</tt> object (actually a namedtuple) with\nall the attributes available to <a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.4.2\" rel=\"nofollow\">#EXT-X-STREAM-INF</a></li>\n<li><tt>media</tt>: a list of related <tt>Media</tt> objects with all the attributes\navailable to <a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.4.1\" rel=\"nofollow\">#EXT-X-MEDIA</a></li>\n<li><tt>playlist_type</tt>: the type of the playlist, which can be one of <a href=\"https://developer.apple.com/library/mac/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-TNTAG2\" rel=\"nofollow\">VOD</a>\n(video on demand) or <a href=\"https://developer.apple.com/library/mac/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-EVENT_PLAYLIST\" rel=\"nofollow\">EVENT</a></li>\n</ul>\n<p><strong>NOTE: the following attributes are not implemented yet</strong>, follow\n<a href=\"https://github.com/globocom/m3u8/issues/4\" rel=\"nofollow\">issue 4</a> for updates</p>\n<ul>\n<li><tt>alternative_audios</tt>: its an empty list, unless it\u2019s a playlist\nwith <a href=\"http://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-8.7\" rel=\"nofollow\">Alternative audio</a>, in this case it\u2019s a list with <tt>Media</tt>\nobjects with all the attributes available to <a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.4.1\" rel=\"nofollow\">#EXT-X-MEDIA</a></li>\n<li><tt>alternative_videos</tt>: same as <tt>alternative_audios</tt></li>\n</ul>\n<p>A variant playlist can also have links to <a href=\"https://tools.ietf.org/html/rfc8216#section-4.3.4.3\" rel=\"nofollow\">I-frame playlists</a>, which are used\nto specify where the I-frames are in a video. See <a href=\"https://developer.apple.com/library/ios/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-I_FRAME_PLAYLIST\" rel=\"nofollow\">Apple\u2019s documentation</a> on\nthis for more information. These I-frame playlists can be accessed in a similar\nway to regular playlists.</p>\n<pre><span class=\"n\">variant_m3u8</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'#EXTM3U ... contains a variant stream ...'</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">iframe_playlist</span> <span class=\"ow\">in</span> <span class=\"n\">variant_m3u8</span><span class=\"o\">.</span><span class=\"n\">iframe_playlists</span><span class=\"p\">:</span>\n    <span class=\"n\">iframe_playlist</span><span class=\"o\">.</span><span class=\"n\">uri</span>\n    <span class=\"n\">iframe_playlist</span><span class=\"o\">.</span><span class=\"n\">iframe_stream_info</span><span class=\"o\">.</span><span class=\"n\">bandwidth</span>\n</pre>\n<p>The iframe_playlist object used in the for loop above has a few attributes:</p>\n<ul>\n<li><tt>uri</tt>: the url to the I-frame playlist</li>\n<li><tt>base_uri</tt>: the base uri of the variant playlist (if given)</li>\n<li><tt>iframe_stream_info</tt>: a <tt>StreamInfo</tt> object (same as a regular playlist)</li>\n</ul>\n</div>\n<div id=\"custom-tags\">\n<h3>Custom tags</h3>\n<p>Quoting the documentation:</p>\n<pre>Lines that start with the character '#' are either comments or tags.\nTags begin with #EXT.  They are case-sensitive.  All other lines that\nbegin with '#' are comments and SHOULD be ignored.\n</pre>\n<p>This library ignores all the non standard tags by default. If you want them to be collected while loading the file content,\nyou need to pass a function to the <cite>load/loads</cite> functions, following the example below:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">m3u8</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_movie</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'#MOVIE-NAME:'</span><span class=\"p\">):</span>\n        <span class=\"n\">custom_tag</span> <span class=\"o\">=</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">':'</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'movie'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">custom_tag</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n<span class=\"n\">m3u8_obj</span> <span class=\"o\">=</span> <span class=\"n\">m3u8</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'http://videoserver.com/playlist.m3u8'</span><span class=\"p\">,</span> <span class=\"n\">custom_tags_parser</span><span class=\"o\">=</span><span class=\"n\">get_movie</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m3u8_obj</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'movie'</span><span class=\"p\">])</span>  <span class=\"c1\">#  million dollar baby</span>\n</pre>\n</div>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<pre>$ ./runtests\n</pre>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>All contribution is welcome, but we will merge a pull request if, and only if, it</p>\n<ul>\n<li>has tests</li>\n<li>follows the code conventions</li>\n</ul>\n<p>If you plan to implement a new feature or something that will take more\nthan a few minutes, please open an issue to make sure we don\u2019t work on\nthe same thing.</p>\n</div>\n\n          </div>"}, "last_serial": 6682265, "releases": {"0.5.5": [{"comment_text": "", "digests": {"md5": "14b7ba68b20fac6ac1b8bb03750a4ca5", "sha256": "385874bcfa4313f7128d6a5fd8db81a65b7d8f38456ca465548568686beac209"}, "downloads": -1, "filename": "hotstar_m3u8-0.5.5.tar.gz", "has_sig": false, "md5_digest": "14b7ba68b20fac6ac1b8bb03750a4ca5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 18350, "upload_time": "2020-02-22T23:00:51", "upload_time_iso_8601": "2020-02-22T23:00:51.277061Z", "url": "https://files.pythonhosted.org/packages/5c/23/d161b2a3757002e0d4d3af31840999281ff2dfddfa3cda4fa3b0147d025e/hotstar_m3u8-0.5.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "14b7ba68b20fac6ac1b8bb03750a4ca5", "sha256": "385874bcfa4313f7128d6a5fd8db81a65b7d8f38456ca465548568686beac209"}, "downloads": -1, "filename": "hotstar_m3u8-0.5.5.tar.gz", "has_sig": false, "md5_digest": "14b7ba68b20fac6ac1b8bb03750a4ca5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 18350, "upload_time": "2020-02-22T23:00:51", "upload_time_iso_8601": "2020-02-22T23:00:51.277061Z", "url": "https://files.pythonhosted.org/packages/5c/23/d161b2a3757002e0d4d3af31840999281ff2dfddfa3cda4fa3b0147d025e/hotstar_m3u8-0.5.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:31 2020"}