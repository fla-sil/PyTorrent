{"info": {"author": "Robertus Johansyah", "author_email": "kororola@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: POSIX :: BSD", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "conff\n=====\n\nSimple config parser with evaluator library.\n\n.. image:: https://badge.fury.io/py/conff.svg\n    :target: https://badge.fury.io/py/conff\n\n.. image:: https://travis-ci.com/kororo/conff.svg?branch=master\n    :target: https://travis-ci.com/kororo/conff\n\n.. image:: https://coveralls.io/repos/github/kororo/conff/badge.svg?branch=master\n    :target: https://coveralls.io/github/kororo/conff?branch=master\n\n.. image:: https://api.codeclimate.com/v1/badges/c476e9c6bfe505bc4b4d/maintainability\n    :target: https://codeclimate.com/github/kororo/conff/maintainability\n    :alt: Maintainability\n\n.. image:: https://badges.gitter.im/kororo-conff.png\n    :target: https://gitter.im/kororo-conff\n    :alt: Gitter\n\n\nWhy Another Config Parser Module?\n---------------------------------\n\nThis project inspired of the necessity complex config in a project. By means complex:\n\n- Reusability\n\n  - Import values from file\n  - Reference values from other object\n\n- Secure\n\n  - Encrypt/decrypt sensitive values\n\n- Flexible\n\n  - Make logical expression to derive values\n  - Combine with `jinja2 <http://jinja.pocoo.org/docs/2.10/>`_ template based\n\n- Powerful\n\n  - Add custom functions in Python\n  - Link name data from Python\n\nFeedback and Discussion\n-----------------------\n\nCome to Gitter channel to discuss, pass any feedbacks and suggestions. If you like to be contributor, please do let me know.\n\nImportant Notes\n---------------\n\nParsing Order\n^^^^^^^^^^^^^\n\nconff will only parse and resolve variable/names top to bottom order. Please ensure you arrange your configuration\nin the same manner, there is no auto-dependencies resolver to handle complex and advanced names currently.\n\ndict vs collections.OrderedDict\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn Python 3.5, the dict data type has inconsistent ordering, it is **STRONGLY** recommended to use **OrderedDict** if\nyou manually parse object. If you load from YAML file, the library already handled it. The reason of order is important,\nthis due to simplification and assumption of order execution. The library will parse the values from top to bottom as\nper order in the key-value dictionary.\n\nInstall\n-------\n\n.. code:: bash\n\n   [sudo] pip install conff\n\nBasic Usage\n-----------\n\nTo get very basic parsing:\n\nSimple parse\n^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    p = conff.Parser()\n    r = p.parse({'math': '1 + 3'})\n    assert r == {'math': 4}\n\nLoad YAML file\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    p = conff.Parser()\n    r = p.load('path_of_file.yml')\n\nTemplate based config\n^^^^^^^^^^^^^^^^^^^^^\n\nUsing `jinja2 <http://jinja.pocoo.org/docs/2.10/>`_ to craft more powerful config.\n\n.. code:: python\n\n    import conff\n    p = conff.Parser()\n    r = p.parse('F.template(\"{{ 1 + 2 }}\")')\n    assert r == 3\n\n\nExamples\n--------\n\nMore advances examples:\n\nParse with simple expression\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    p = conff.Parser()\n    r = p.parse('1 + 2')\n    assert r == 3\n\nParse object\n^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    p = conff.Parser()\n    r = p.parse({\"math\": \"1 + 2\"})\n    assert r == {'math': 3}\n\nIgnore expression (declare it as string)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    p = conff.Parser()\n    r = conff.parse('\"1 + 2\"')\n    assert r == '1 + 2'\n\nParse error behaviours\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    p = conff.Parser()\n    r = p.parse({'math': '1 / 0'})\n    # Exception raised\n    # ZeroDivisionError: division by zero\n\n\nimport files\n^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    ## y1.yml\n    # shared_conf: 1\n    ## y2.yml\n    # conf: F.inc('y1.yml')\n\n    p = conff.Parser()\n    r = p.load('y2.yml')\n    assert r == {'conf': {'shared_conf': 1}}\n\nParse with functions\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    def fn_add(a, b):\n        return a + b\n    p = conff.Parser(fns={'add': fn_add})\n    r = p.parse('F.add(1, 2)')\n    assert r == 3\n\nParse with names\n^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    p = conff.Parser(names={'a': 1, 'b': 2})\n    r = conff.parse('a + b')\n    assert r == 3\n\nParse with extends\n^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    data = {\n       't1': {'a': 'a'},\n       't2': {\n           'F.extend': 'R.t1',\n           'b': 'b'\n       }\n    }\n    p = conff.Parser()\n    r = p.parse(data)\n    assert r == {'t1': {'a': 'a'}, 't2': {'a': 'a', 'b': 'b'}}\n\nParse with updates\n^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    data = {\n       't1': {'a': 'a'},\n       't2': {\n           'b': 'b',\n           'F.update': {\n               'c': 'c'\n           },\n       }\n    }\n    p = conff.Parser()\n    r = p.parse(data)\n    assert r == {'t1': {'a': 'a'}, 't2': {'b': 'b', 'c': 'c'}}\n\nParse with extends and updates\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import conff\n    data = {\n       't1': {'a': 'a'},\n       't2': {\n           'F.extend': 'R.t1',\n           'b': 'b',\n           'F.update': {\n               'a': 'A',\n               'c': 'c'\n           },\n       }\n    }\n    p = conff.Parser()\n    r = p.parse(data)\n    assert r == {'t1': {'a': 'a'}, 't2': {'a': 'A', 'b': 'b', 'c': 'c'}}\n\nCreate a list of values\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThis creates a list of floats, similar to numpy.linspace\n\n.. code:: python\n\n    import conff\n    data = {'t2': 'F.linspace(0, 10, 5)'}\n    p = conff.Parser()\n    r = p.parse(data)\n    assert r == {'t2': [0.0, 2.5, 5.0, 7.5, 10.0]}\n\nThis also creates a list of floats, but behaves like numpy.arange (although\nslightly different in that it is inclusive of the endpoint).\n\n.. code:: python\n\n    import conff\n    data = {'t2': 'F.arange(0, 10, 2)'}\n    p = conff.Parser()\n    r = p.parse(data)\n    assert r == {'t2': [0, 2, 4, 6, 8, 10]}\n\nParse with for each\n^^^^^^^^^^^^^^^^^^^\n\nOne can mimic the logic of a for loop with the following example\n\n.. code:: python\n\n    import conff\n    data = {'t1': 2,\n           'F.foreach': {\n               'values': 'F.linspace(0, 10, 2)',\n               # You have access to loop.index, loop.value, and loop.length\n               # within the template, as well as all the usual names\n               'template': {\n                    '\"test%i\"%loop.index': 'R.t1*loop.value',\n                    'length': 'loop.length'\n                    }\n               }\n          }\n    p = conff.Parser()\n    r = p.parse(data)\n    assert r == {'length': 3, 't1': 2, 'test0': 0.0, 'test1': 10.0, 'test2': 20.0}\n\nEncryption\n----------\n\nThis section to help you to quickly generate encryption key, initial encrypt values and test to decrypt the value.\n\n.. code:: python\n\n    import conff\n    # generate key, save it somewhere safe\n    names = {'R': {'_': {'etype': 'fernet'}}}\n    etype = conff.generate_key(names)()\n    # or just\n    ekey = conff.generate_key()('fernet')\n\n    # encrypt data\n    # BIG WARNING: this should be retrieved somewhere secured for example in ~/.secret\n    # below just for example purposes\n    ekey = 'FOb7DBRftamqsyRFIaP01q57ZLZZV6MVB2xg1Cg_E7g='\n    names = {'R': {'_': {'etype': 'fernet', 'ekey': ekey}}}\n    # gAAAAABbBBhOJDMoQSbF9jfNgt97FwyflQEZRxv2L2buv6YD_Jiq8XNrxv8VqFis__J7YlpZQA07nDvzYwMU562Mlm978uP9BQf6M9Priy3btidL6Pm406w=\n    encrypted_value = conff.encrypt(names)('ACCESSSECRETPLAIN1234')\n\n    # decrypt data\n    ekey = 'FOb7DBRftamqsyRFIaP01q57ZLZZV6MVB2xg1Cg_E7g='\n    names = {'R': {'_': {'etype': 'fernet', 'ekey': ekey}}}\n    encrypted_value = 'gAAAAABbBBhOJDMoQSbF9jfNgt97FwyflQEZRxv2L2buv6YD_Jiq8XNrxv8VqFis__J7YlpZQA07nDvzYwMU562Mlm978uP9BQf6M9Priy3btidL6Pm406w='\n    conff.decrypt(names)(encrypted_value)\n\nReal World Examples\n-------------------\n\nAll the example below located in `data directory <https://github.com/kororo/conff/tree/master/conff/data>`_.\nImagine you start an important project, your code need to analyse image/videos which involves workflow\nwith set of tasks with AWS Rekognition. The steps will be more/less like this:\n\n    1. Read images/videos from a specific folder, if images goes to (2), if videos goes to (3).\n\n    2. Analyse the images with AWS API, then goes (4)\n\n    3. Analyse the videos with AWS API, then goes (4)\n\n    4. Write the result back to JSON file, finished\n\nThe configuration required:\n\n    1. Read images/videos (where is the folder)\n\n    2. Analyse images (AWS API credential and max resolution for image)\n\n    3. Analyse videos (AWS API credential and max resolution for video)\n\n    4. Write results (where is the result should be written)\n\n1. Without conff library\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nFile: `data/sample_config_01.yml <https://github.com/kororo/conff/tree/master/conff/data/sample_config_01.yml>`_\n\nWhere it is all started, if we require to store the configuration as per normally, it should be like this.\n\n.. code:: yaml\n\n    job:\n      read_image:\n        # R01\n        root_path: /data/project/images_and_videos/\n      analyse_image:\n        # R02\n        api_cred:\n          region_name: ap-southeast-2\n          aws_access_key_id: ACCESSKEY1234\n          # R03\n          aws_secret_access_key: ACCESSSECRETPLAIN1234\n        max_res: [1024, 768]\n      analyse_video:\n        # R04\n        api_cred:\n          region_name: ap-southeast-2\n          aws_access_key_id: ACCESSKEY1234\n          aws_secret_access_key: ACCESSSECRETPLAIN1234\n        max_res: [800, 600]\n      write_result:\n        # R05\n        output_path: /data/project/result.json\n\n.. code:: python\n\n    import yaml\n    with open('data/sample_config_01.yml') as stream:\n        r1 = yaml.safe_load(stream)\n\nNotes:\n\n    - R01: The subpath of \"/data/project\" is repeated between R01 and R05\n    - R02: api_cred is repeatedly defined with R04\n    - R03: the secret is plain visible, if this stored in GIT, it is pure disaster\n\n2. Fix the repeat\n^^^^^^^^^^^^^^^^^\n\nFile: `data/sample_config_02.yml <https://github.com/kororo/conff/tree/master/conff/data/sample_config_02.yml>`_\n\nRepeating values/configuration is bad, this could potentially cause human mistake if changes made is not\nconsistently applied in all occurences.\n\n.. code:: yaml\n\n    # this can be any name, as long as not reserved in Python\n    shared:\n      project_path: /data/project\n      aws_cred:\n        region_name: ap-southeast-2\n        aws_access_key_id: ACCESSKEY1234\n        # F03\n        aws_secret_access_key: F.decrypt('gAAAAABbBBhOJDMoQSbF9jfNgt97FwyflQEZRxv2L2buv6YD_Jiq8XNrxv8VqFis__J7YlpZQA07nDvzYwMU562Mlm978uP9BQf6M9Priy3btidL6Pm406w=')\n\n    job:\n      read_image:\n        # F01\n        root_path: R.shared.project_path + '/images_and_videos/'\n      analyse_image:\n        # F02\n        api_cred: R.shared.aws_cred\n        max_res: [1024, 768]\n      analyse_video:\n        # F04\n        api_cred: R.shared.aws_cred\n        max_res: [800, 600]\n      write_result:\n        # F05\n        output_path: R.shared.project_path + '/result.json'\n\n.. code:: python\n\n    import conff\n    # ekey is the secured encryption key\n    # WARNING: this is just demonstration purposes\n    ekey = 'FOb7DBRftamqsyRFIaP01q57ZLZZV6MVB2xg1Cg_E7g='\n    r2 = conff.load(fs_path='data/sample_config_02.yml', params={'ekey': ekey})\n\nNotes:\n\n    - F01: it is safe if the prefix '/data/project' need to be changed, it will automatically changed for F05\n    - F02: no more duplicated config with F04\n    - F03: it is secured to save this to GIT, as long as the encryption key is stored securely somewhere in server such\n      as ~/.secret\n\n3. Optimise to the extreme\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFile: `data/sample_config_03.yml <https://github.com/kororo/conff/tree/master/conff/data/sample_config_03.yml>`_\n\nThis is just demonstration purposes to see the full capabilities of this library.\n\n.. code:: yaml\n\n    # this can be any name, as long as not reserved in Python\n    shared:\n      project_path: /data/project\n      analyse_image_video:\n        api_cred:\n          region_name: ap-southeast-2\n          aws_access_key_id: ACCESSKEY1234\n          aws_secret_access_key: F.decrypt('gAAAAABbBBhOJDMoQSbF9jfNgt97FwyflQEZRxv2L2buv6YD_Jiq8XNrxv8VqFis__J7YlpZQA07nDvzYwMU562Mlm978uP9BQf6M9Priy3btidL6Pm406w=')\n        max_res: [1024, 768]\n    job:\n      read_image:\n        root_path: R.shared.project_path + '/images_and_videos/'\n      analyse_image: R.shared.analyse_image_video\n      analyse_video:\n        F.extend: R.shared.analyse_image_video\n        F.update:\n          max_res: [800, 600]\n      write_result:\n        output_path: R.shared.project_path + '/result.json'\n\nFor completeness, ensuring data is consistent and correct between sample_config_01.yml, sample_config_02.yml\nand sample_config_03.yml.\n\n.. code:: python\n\n    # nose2 conff.test.ConffTestCase.test_sample\n    fs_path = 'data/sample_config_01.yml'\n    with open(fs_path) as stream:\n        r1 = yaml.safe_load(stream)\n    fs_path = 'data/sample_config_02.yml'\n    ekey = 'FOb7DBRftamqsyRFIaP01q57ZLZZV6MVB2xg1Cg_E7g='\n    r2 = conff.load(fs_path=fs_path, params={'ekey': ekey})\n    fs_path = 'data/sample_config_03.yml'\n    r3 = conff.load(fs_path=fs_path, params={'ekey': ekey})\n    self.assertDictEqual(r1['job'], r2['job'], 'Mismatch value')\n    self.assertDictEqual(r2['job'], r3['job'], 'Mismatch value')\n\nTest\n----\n\nTo test this project:\n\n.. code:: bash\n\n   # default test\n   nose2\n\n   # test with coverage\n   nose2 --with-coverage\n\n   # test specific\n   nose2 conff.test.ConffTestCase.test_sample\n\nTODO\n----\n\n- [X] Setup basic necessity\n\n  - [X] Stop procrastinating\n  - [X] Project registration in pypi\n  - [X] Create unit tests\n  - [X] Setup travis\n  - [X] Setup coveralls\n\n- [ ] Add more support on `Python versions <https://en.wikipedia.org/wiki/CPython#Version_history>`_\n\n  - [ ] 2.7\n  - [ ] 3.4\n  - [X] 3.5\n  - [X] 3.6\n\n- [ ] Features\n\n  - Wish List Features now moved to `wiki page <https://github.com/kororo/conff/wiki/Wish-List-Features>`_.\n\n- [ ] Improve docs\n\n  - [ ] Add more code comments and visibilities\n  - [ ] Make github layout code into two left -> right\n  - [X] Put more examples\n  - [ ] Setup readthedocs\n  - [ ] Add code conduct, issue template into git project.\n  - [ ] Add information that conff currently accept YML and it not limited, it can take any objects\n\n\nOther Open Source\n-----------------\n\nThis project uses other awesome projects:\n\n- `cryptography <https://github.com/pyca/cryptography>`_\n- `jinja2 <http://jinja.pocoo.org/docs/2.10/>`_\n- `munch <https://github.com/Infinidat/munch>`_\n- `simpleeval <https://github.com/danthedeckie/simpleeval>`_\n- `yaml <https://github.com/yaml/pyyaml>`_\n\nWho uses conff?\n---------------\n\nPlease send a PR to keep the list growing, if you may please add your handle and company.\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/kororo/conff/tarball/0.5.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kororo/conff", "keywords": "config", "license": "", "maintainer": "", "maintainer_email": "", "name": "conff", "package_url": "https://pypi.org/project/conff/", "platform": "", "project_url": "https://pypi.org/project/conff/", "project_urls": {"Download": "https://github.com/kororo/conff/tarball/0.5.0", "Homepage": "https://github.com/kororo/conff"}, "release_url": "https://pypi.org/project/conff/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "Simple config parser with evaluator library.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple config parser with evaluator library.</p>\n<a href=\"https://badge.fury.io/py/conff\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/conff.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6681f5f1dc7e99a88e558cdd6000a0e2ac24c914/68747470733a2f2f62616467652e667572792e696f2f70792f636f6e66662e737667\"></a>\n<a href=\"https://travis-ci.com/kororo/conff\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/kororo/conff.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5cd64d04632d897d3e0c2c6569a1d5c27a9f09a9/68747470733a2f2f7472617669732d63692e636f6d2f6b6f726f726f2f636f6e66662e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/kororo/conff?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/kororo/conff/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37e70665702f4f6046e9b645175300f22004cb91/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6b6f726f726f2f636f6e66662f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/kororo/conff/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a4a317e44261204980d164329fa40bba72d2b2d6/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f63343736653963366266653530356263346234642f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://gitter.im/kororo-conff\" rel=\"nofollow\"><img alt=\"Gitter\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5257b293d14e86b3015650c912be567cc28e2dd3/68747470733a2f2f6261646765732e6769747465722e696d2f6b6f726f726f2d636f6e66662e706e67\"></a>\n<div id=\"why-another-config-parser-module\">\n<h2>Why Another Config Parser Module?</h2>\n<p>This project inspired of the necessity complex config in a project. By means complex:</p>\n<ul>\n<li>Reusability<ul>\n<li>Import values from file</li>\n<li>Reference values from other object</li>\n</ul>\n</li>\n<li>Secure<ul>\n<li>Encrypt/decrypt sensitive values</li>\n</ul>\n</li>\n<li>Flexible<ul>\n<li>Make logical expression to derive values</li>\n<li>Combine with <a href=\"http://jinja.pocoo.org/docs/2.10/\" rel=\"nofollow\">jinja2</a> template based</li>\n</ul>\n</li>\n<li>Powerful<ul>\n<li>Add custom functions in Python</li>\n<li>Link name data from Python</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"feedback-and-discussion\">\n<h2>Feedback and Discussion</h2>\n<p>Come to Gitter channel to discuss, pass any feedbacks and suggestions. If you like to be contributor, please do let me know.</p>\n</div>\n<div id=\"important-notes\">\n<h2>Important Notes</h2>\n<div id=\"parsing-order\">\n<h3>Parsing Order</h3>\n<p>conff will only parse and resolve variable/names top to bottom order. Please ensure you arrange your configuration\nin the same manner, there is no auto-dependencies resolver to handle complex and advanced names currently.</p>\n</div>\n<div id=\"dict-vs-collections-ordereddict\">\n<h3>dict vs collections.OrderedDict</h3>\n<p>In Python 3.5, the dict data type has inconsistent ordering, it is <strong>STRONGLY</strong> recommended to use <strong>OrderedDict</strong> if\nyou manually parse object. If you load from YAML file, the library already handled it. The reason of order is important,\nthis due to simplification and assumption of order execution. The library will parse the values from top to bottom as\nper order in the key-value dictionary.</p>\n</div>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre><span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip install conff\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p>To get very basic parsing:</p>\n<div id=\"simple-parse\">\n<h3>Simple parse</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">({</span><span class=\"s1\">'math'</span><span class=\"p\">:</span> <span class=\"s1\">'1 + 3'</span><span class=\"p\">})</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'math'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"load-yaml-file\">\n<h3>Load YAML file</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'path_of_file.yml'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"template-based-config\">\n<h3>Template based config</h3>\n<p>Using <a href=\"http://jinja.pocoo.org/docs/2.10/\" rel=\"nofollow\">jinja2</a> to craft more powerful config.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'F.template(\"{{ 1 + 2 }}\")'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>More advances examples:</p>\n<div id=\"parse-with-simple-expression\">\n<h3>Parse with simple expression</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'1 + 2'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre>\n</div>\n<div id=\"parse-object\">\n<h3>Parse object</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">({</span><span class=\"s2\">\"math\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1 + 2\"</span><span class=\"p\">})</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'math'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"ignore-expression-declare-it-as-string\">\n<h3>Ignore expression (declare it as string)</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'\"1 + 2\"'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"s1\">'1 + 2'</span>\n</pre>\n</div>\n<div id=\"parse-error-behaviours\">\n<h3>Parse error behaviours</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">({</span><span class=\"s1\">'math'</span><span class=\"p\">:</span> <span class=\"s1\">'1 / 0'</span><span class=\"p\">})</span>\n<span class=\"c1\"># Exception raised</span>\n<span class=\"c1\"># ZeroDivisionError: division by zero</span>\n</pre>\n</div>\n<div id=\"import-files\">\n<h3>import files</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"c1\">## y1.yml</span>\n<span class=\"c1\"># shared_conf: 1</span>\n<span class=\"c1\">## y2.yml</span>\n<span class=\"c1\"># conf: F.inc('y1.yml')</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'y2.yml'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'conf'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'shared_conf'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}}</span>\n</pre>\n</div>\n<div id=\"parse-with-functions\">\n<h3>Parse with functions</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"k\">def</span> <span class=\"nf\">fn_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">(</span><span class=\"n\">fns</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'add'</span><span class=\"p\">:</span> <span class=\"n\">fn_add</span><span class=\"p\">})</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'F.add(1, 2)'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre>\n</div>\n<div id=\"parse-with-names\">\n<h3>Parse with names</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s1\">'a + b'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre>\n</div>\n<div id=\"parse-with-extends\">\n<h3>Parse with extends</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s1\">'t1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">},</span>\n   <span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'F.extend'</span><span class=\"p\">:</span> <span class=\"s1\">'R.t1'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'t1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">},</span> <span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">}}</span>\n</pre>\n</div>\n<div id=\"parse-with-updates\">\n<h3>Parse with updates</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s1\">'t1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">},</span>\n   <span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'F.update'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n           <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span>\n       <span class=\"p\">},</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'t1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">},</span> <span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">}}</span>\n</pre>\n</div>\n<div id=\"parse-with-extends-and-updates\">\n<h3>Parse with extends and updates</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s1\">'t1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">},</span>\n   <span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'F.extend'</span><span class=\"p\">:</span> <span class=\"s1\">'R.t1'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span>\n       <span class=\"s1\">'F.update'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n           <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span>\n           <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span>\n       <span class=\"p\">},</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'t1'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'a'</span><span class=\"p\">},</span> <span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"s1\">'c'</span><span class=\"p\">}}</span>\n</pre>\n</div>\n<div id=\"create-a-list-of-values\">\n<h3>Create a list of values</h3>\n<p>This creates a list of floats, similar to numpy.linspace</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"s1\">'F.linspace(0, 10, 5)'</span><span class=\"p\">}</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">,</span> <span class=\"mf\">7.5</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">]}</span>\n</pre>\n<p>This also creates a list of floats, but behaves like numpy.arange (although\nslightly different in that it is inclusive of the endpoint).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"s1\">'F.arange(0, 10, 2)'</span><span class=\"p\">}</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'t2'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]}</span>\n</pre>\n</div>\n<div id=\"parse-with-for-each\">\n<h3>Parse with for each</h3>\n<p>One can mimic the logic of a for loop with the following example</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'t1'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n       <span class=\"s1\">'F.foreach'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n           <span class=\"s1\">'values'</span><span class=\"p\">:</span> <span class=\"s1\">'F.linspace(0, 10, 2)'</span><span class=\"p\">,</span>\n           <span class=\"c1\"># You have access to loop.index, loop.value, and loop.length</span>\n           <span class=\"c1\"># within the template, as well as all the usual names</span>\n           <span class=\"s1\">'template'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'\"test</span><span class=\"si\">%i</span><span class=\"s1\">\"</span><span class=\"si\">%lo</span><span class=\"s1\">op.index'</span><span class=\"p\">:</span> <span class=\"s1\">'R.t1*loop.value'</span><span class=\"p\">,</span>\n                <span class=\"s1\">'length'</span><span class=\"p\">:</span> <span class=\"s1\">'loop.length'</span>\n                <span class=\"p\">}</span>\n           <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">r</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'length'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'t1'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'test0'</span><span class=\"p\">:</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"s1\">'test1'</span><span class=\"p\">:</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"s1\">'test2'</span><span class=\"p\">:</span> <span class=\"mf\">20.0</span><span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"encryption\">\n<h2>Encryption</h2>\n<p>This section to help you to quickly generate encryption key, initial encrypt values and test to decrypt the value.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"c1\"># generate key, save it somewhere safe</span>\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'R'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'_'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'etype'</span><span class=\"p\">:</span> <span class=\"s1\">'fernet'</span><span class=\"p\">}}}</span>\n<span class=\"n\">etype</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">generate_key</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)()</span>\n<span class=\"c1\"># or just</span>\n<span class=\"n\">ekey</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">generate_key</span><span class=\"p\">()(</span><span class=\"s1\">'fernet'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># encrypt data</span>\n<span class=\"c1\"># BIG WARNING: this should be retrieved somewhere secured for example in ~/.secret</span>\n<span class=\"c1\"># below just for example purposes</span>\n<span class=\"n\">ekey</span> <span class=\"o\">=</span> <span class=\"s1\">'FOb7DBRftamqsyRFIaP01q57ZLZZV6MVB2xg1Cg_E7g='</span>\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'R'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'_'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'etype'</span><span class=\"p\">:</span> <span class=\"s1\">'fernet'</span><span class=\"p\">,</span> <span class=\"s1\">'ekey'</span><span class=\"p\">:</span> <span class=\"n\">ekey</span><span class=\"p\">}}}</span>\n<span class=\"c1\"># gAAAAABbBBhOJDMoQSbF9jfNgt97FwyflQEZRxv2L2buv6YD_Jiq8XNrxv8VqFis__J7YlpZQA07nDvzYwMU562Mlm978uP9BQf6M9Priy3btidL6Pm406w=</span>\n<span class=\"n\">encrypted_value</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)(</span><span class=\"s1\">'ACCESSSECRETPLAIN1234'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># decrypt data</span>\n<span class=\"n\">ekey</span> <span class=\"o\">=</span> <span class=\"s1\">'FOb7DBRftamqsyRFIaP01q57ZLZZV6MVB2xg1Cg_E7g='</span>\n<span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'R'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'_'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'etype'</span><span class=\"p\">:</span> <span class=\"s1\">'fernet'</span><span class=\"p\">,</span> <span class=\"s1\">'ekey'</span><span class=\"p\">:</span> <span class=\"n\">ekey</span><span class=\"p\">}}}</span>\n<span class=\"n\">encrypted_value</span> <span class=\"o\">=</span> <span class=\"s1\">'gAAAAABbBBhOJDMoQSbF9jfNgt97FwyflQEZRxv2L2buv6YD_Jiq8XNrxv8VqFis__J7YlpZQA07nDvzYwMU562Mlm978uP9BQf6M9Priy3btidL6Pm406w='</span>\n<span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">)(</span><span class=\"n\">encrypted_value</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"real-world-examples\">\n<h2>Real World Examples</h2>\n<p>All the example below located in <a href=\"https://github.com/kororo/conff/tree/master/conff/data\" rel=\"nofollow\">data directory</a>.\nImagine you start an important project, your code need to analyse image/videos which involves workflow\nwith set of tasks with AWS Rekognition. The steps will be more/less like this:</p>\n<blockquote>\n<ol>\n<li>Read images/videos from a specific folder, if images goes to (2), if videos goes to (3).</li>\n<li>Analyse the images with AWS API, then goes (4)</li>\n<li>Analyse the videos with AWS API, then goes (4)</li>\n<li>Write the result back to JSON file, finished</li>\n</ol>\n</blockquote>\n<p>The configuration required:</p>\n<blockquote>\n<ol>\n<li>Read images/videos (where is the folder)</li>\n<li>Analyse images (AWS API credential and max resolution for image)</li>\n<li>Analyse videos (AWS API credential and max resolution for video)</li>\n<li>Write results (where is the result should be written)</li>\n</ol>\n</blockquote>\n<div id=\"without-conff-library\">\n<h3>1. Without conff library</h3>\n<p>File: <a href=\"https://github.com/kororo/conff/tree/master/conff/data/sample_config_01.yml\" rel=\"nofollow\">data/sample_config_01.yml</a></p>\n<p>Where it is all started, if we require to store the configuration as per normally, it should be like this.</p>\n<pre><span class=\"nt\">job</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_image</span><span class=\"p\">:</span>\n    <span class=\"c1\"># R01</span>\n    <span class=\"nt\">root_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/data/project/images_and_videos/</span>\n  <span class=\"nt\">analyse_image</span><span class=\"p\">:</span>\n    <span class=\"c1\"># R02</span>\n    <span class=\"nt\">api_cred</span><span class=\"p\">:</span>\n      <span class=\"nt\">region_name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ap-southeast-2</span>\n      <span class=\"nt\">aws_access_key_id</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ACCESSKEY1234</span>\n      <span class=\"c1\"># R03</span>\n      <span class=\"nt\">aws_secret_access_key</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ACCESSSECRETPLAIN1234</span>\n    <span class=\"nt\">max_res</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">1024</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">768</span><span class=\"p-Indicator\">]</span>\n  <span class=\"nt\">analyse_video</span><span class=\"p\">:</span>\n    <span class=\"c1\"># R04</span>\n    <span class=\"nt\">api_cred</span><span class=\"p\">:</span>\n      <span class=\"nt\">region_name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ap-southeast-2</span>\n      <span class=\"nt\">aws_access_key_id</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ACCESSKEY1234</span>\n      <span class=\"nt\">aws_secret_access_key</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ACCESSSECRETPLAIN1234</span>\n    <span class=\"nt\">max_res</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">800</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">600</span><span class=\"p-Indicator\">]</span>\n  <span class=\"nt\">write_result</span><span class=\"p\">:</span>\n    <span class=\"c1\"># R05</span>\n    <span class=\"nt\">output_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/data/project/result.json</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'data/sample_config_01.yml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n    <span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n</pre>\n<p>Notes:</p>\n<blockquote>\n<ul>\n<li>R01: The subpath of \u201c/data/project\u201d is repeated between R01 and R05</li>\n<li>R02: api_cred is repeatedly defined with R04</li>\n<li>R03: the secret is plain visible, if this stored in GIT, it is pure disaster</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"fix-the-repeat\">\n<h3>2. Fix the repeat</h3>\n<p>File: <a href=\"https://github.com/kororo/conff/tree/master/conff/data/sample_config_02.yml\" rel=\"nofollow\">data/sample_config_02.yml</a></p>\n<p>Repeating values/configuration is bad, this could potentially cause human mistake if changes made is not\nconsistently applied in all occurences.</p>\n<pre><span class=\"c1\"># this can be any name, as long as not reserved in Python</span>\n<span class=\"nt\">shared</span><span class=\"p\">:</span>\n  <span class=\"nt\">project_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/data/project</span>\n  <span class=\"nt\">aws_cred</span><span class=\"p\">:</span>\n    <span class=\"nt\">region_name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ap-southeast-2</span>\n    <span class=\"nt\">aws_access_key_id</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ACCESSKEY1234</span>\n    <span class=\"c1\"># F03</span>\n    <span class=\"nt\">aws_secret_access_key</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">F.decrypt('gAAAAABbBBhOJDMoQSbF9jfNgt97FwyflQEZRxv2L2buv6YD_Jiq8XNrxv8VqFis__J7YlpZQA07nDvzYwMU562Mlm978uP9BQf6M9Priy3btidL6Pm406w=')</span>\n\n<span class=\"nt\">job</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_image</span><span class=\"p\">:</span>\n    <span class=\"c1\"># F01</span>\n    <span class=\"nt\">root_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">R.shared.project_path + '/images_and_videos/'</span>\n  <span class=\"nt\">analyse_image</span><span class=\"p\">:</span>\n    <span class=\"c1\"># F02</span>\n    <span class=\"nt\">api_cred</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">R.shared.aws_cred</span>\n    <span class=\"nt\">max_res</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">1024</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">768</span><span class=\"p-Indicator\">]</span>\n  <span class=\"nt\">analyse_video</span><span class=\"p\">:</span>\n    <span class=\"c1\"># F04</span>\n    <span class=\"nt\">api_cred</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">R.shared.aws_cred</span>\n    <span class=\"nt\">max_res</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">800</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">600</span><span class=\"p-Indicator\">]</span>\n  <span class=\"nt\">write_result</span><span class=\"p\">:</span>\n    <span class=\"c1\"># F05</span>\n    <span class=\"nt\">output_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">R.shared.project_path + '/result.json'</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">conff</span>\n<span class=\"c1\"># ekey is the secured encryption key</span>\n<span class=\"c1\"># WARNING: this is just demonstration purposes</span>\n<span class=\"n\">ekey</span> <span class=\"o\">=</span> <span class=\"s1\">'FOb7DBRftamqsyRFIaP01q57ZLZZV6MVB2xg1Cg_E7g='</span>\n<span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fs_path</span><span class=\"o\">=</span><span class=\"s1\">'data/sample_config_02.yml'</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ekey'</span><span class=\"p\">:</span> <span class=\"n\">ekey</span><span class=\"p\">})</span>\n</pre>\n<p>Notes:</p>\n<blockquote>\n<ul>\n<li>F01: it is safe if the prefix \u2018/data/project\u2019 need to be changed, it will automatically changed for F05</li>\n<li>F02: no more duplicated config with F04</li>\n<li>F03: it is secured to save this to GIT, as long as the encryption key is stored securely somewhere in server such\nas ~/.secret</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"optimise-to-the-extreme\">\n<h3>3. Optimise to the extreme</h3>\n<p>File: <a href=\"https://github.com/kororo/conff/tree/master/conff/data/sample_config_03.yml\" rel=\"nofollow\">data/sample_config_03.yml</a></p>\n<p>This is just demonstration purposes to see the full capabilities of this library.</p>\n<pre><span class=\"c1\"># this can be any name, as long as not reserved in Python</span>\n<span class=\"nt\">shared</span><span class=\"p\">:</span>\n  <span class=\"nt\">project_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/data/project</span>\n  <span class=\"nt\">analyse_image_video</span><span class=\"p\">:</span>\n    <span class=\"nt\">api_cred</span><span class=\"p\">:</span>\n      <span class=\"nt\">region_name</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ap-southeast-2</span>\n      <span class=\"nt\">aws_access_key_id</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">ACCESSKEY1234</span>\n      <span class=\"nt\">aws_secret_access_key</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">F.decrypt('gAAAAABbBBhOJDMoQSbF9jfNgt97FwyflQEZRxv2L2buv6YD_Jiq8XNrxv8VqFis__J7YlpZQA07nDvzYwMU562Mlm978uP9BQf6M9Priy3btidL6Pm406w=')</span>\n    <span class=\"nt\">max_res</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">1024</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">768</span><span class=\"p-Indicator\">]</span>\n<span class=\"nt\">job</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_image</span><span class=\"p\">:</span>\n    <span class=\"nt\">root_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">R.shared.project_path + '/images_and_videos/'</span>\n  <span class=\"nt\">analyse_image</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">R.shared.analyse_image_video</span>\n  <span class=\"nt\">analyse_video</span><span class=\"p\">:</span>\n    <span class=\"nt\">F.extend</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">R.shared.analyse_image_video</span>\n    <span class=\"nt\">F.update</span><span class=\"p\">:</span>\n      <span class=\"nt\">max_res</span><span class=\"p\">:</span> <span class=\"p-Indicator\">[</span><span class=\"nv\">800</span><span class=\"p-Indicator\">,</span> <span class=\"nv\">600</span><span class=\"p-Indicator\">]</span>\n  <span class=\"nt\">write_result</span><span class=\"p\">:</span>\n    <span class=\"nt\">output_path</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">R.shared.project_path + '/result.json'</span>\n</pre>\n<p>For completeness, ensuring data is consistent and correct between sample_config_01.yml, sample_config_02.yml\nand sample_config_03.yml.</p>\n<pre><span class=\"c1\"># nose2 conff.test.ConffTestCase.test_sample</span>\n<span class=\"n\">fs_path</span> <span class=\"o\">=</span> <span class=\"s1\">'data/sample_config_01.yml'</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">fs_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">stream</span><span class=\"p\">:</span>\n    <span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">safe_load</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n<span class=\"n\">fs_path</span> <span class=\"o\">=</span> <span class=\"s1\">'data/sample_config_02.yml'</span>\n<span class=\"n\">ekey</span> <span class=\"o\">=</span> <span class=\"s1\">'FOb7DBRftamqsyRFIaP01q57ZLZZV6MVB2xg1Cg_E7g='</span>\n<span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fs_path</span><span class=\"o\">=</span><span class=\"n\">fs_path</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ekey'</span><span class=\"p\">:</span> <span class=\"n\">ekey</span><span class=\"p\">})</span>\n<span class=\"n\">fs_path</span> <span class=\"o\">=</span> <span class=\"s1\">'data/sample_config_03.yml'</span>\n<span class=\"n\">r3</span> <span class=\"o\">=</span> <span class=\"n\">conff</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fs_path</span><span class=\"o\">=</span><span class=\"n\">fs_path</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'ekey'</span><span class=\"p\">:</span> <span class=\"n\">ekey</span><span class=\"p\">})</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertDictEqual</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">[</span><span class=\"s1\">'job'</span><span class=\"p\">],</span> <span class=\"n\">r2</span><span class=\"p\">[</span><span class=\"s1\">'job'</span><span class=\"p\">],</span> <span class=\"s1\">'Mismatch value'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertDictEqual</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">[</span><span class=\"s1\">'job'</span><span class=\"p\">],</span> <span class=\"n\">r3</span><span class=\"p\">[</span><span class=\"s1\">'job'</span><span class=\"p\">],</span> <span class=\"s1\">'Mismatch value'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"test\">\n<h2>Test</h2>\n<p>To test this project:</p>\n<pre><span class=\"c1\"># default test\n</span>nose2\n\n<span class=\"c1\"># test with coverage\n</span>nose2 --with-coverage\n\n<span class=\"c1\"># test specific\n</span>nose2 conff.test.ConffTestCase.test_sample\n</pre>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>[X] Setup basic necessity<ul>\n<li>[X] Stop procrastinating</li>\n<li>[X] Project registration in pypi</li>\n<li>[X] Create unit tests</li>\n<li>[X] Setup travis</li>\n<li>[X] Setup coveralls</li>\n</ul>\n</li>\n<li>[ ] Add more support on <a href=\"https://en.wikipedia.org/wiki/CPython#Version_history\" rel=\"nofollow\">Python versions</a><ul>\n<li>[ ] 2.7</li>\n<li>[ ] 3.4</li>\n<li>[X] 3.5</li>\n<li>[X] 3.6</li>\n</ul>\n</li>\n<li>[ ] Features<ul>\n<li>Wish List Features now moved to <a href=\"https://github.com/kororo/conff/wiki/Wish-List-Features\" rel=\"nofollow\">wiki page</a>.</li>\n</ul>\n</li>\n<li>[ ] Improve docs<ul>\n<li>[ ] Add more code comments and visibilities</li>\n<li>[ ] Make github layout code into two left -&gt; right</li>\n<li>[X] Put more examples</li>\n<li>[ ] Setup readthedocs</li>\n<li>[ ] Add code conduct, issue template into git project.</li>\n<li>[ ] Add information that conff currently accept YML and it not limited, it can take any objects</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"other-open-source\">\n<h2>Other Open Source</h2>\n<p>This project uses other awesome projects:</p>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography\" rel=\"nofollow\">cryptography</a></li>\n<li><a href=\"http://jinja.pocoo.org/docs/2.10/\" rel=\"nofollow\">jinja2</a></li>\n<li><a href=\"https://github.com/Infinidat/munch\" rel=\"nofollow\">munch</a></li>\n<li><a href=\"https://github.com/danthedeckie/simpleeval\" rel=\"nofollow\">simpleeval</a></li>\n<li><a href=\"https://github.com/yaml/pyyaml\" rel=\"nofollow\">yaml</a></li>\n</ul>\n</div>\n<div id=\"who-uses-conff\">\n<h2>Who uses conff?</h2>\n<p>Please send a PR to keep the list growing, if you may please add your handle and company.</p>\n</div>\n\n          </div>"}, "last_serial": 3930907, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "c44fff2311aee1a8505ccf84ff963768", "sha256": "4f62055f910feaee524e0bcfdd0d2fc3bccf7655ac1cff14a19d274e39c1a51b"}, "downloads": -1, "filename": "conff-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c44fff2311aee1a8505ccf84ff963768", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6442, "upload_time": "2018-05-14T00:26:34", "upload_time_iso_8601": "2018-05-14T00:26:34.547350Z", "url": "https://files.pythonhosted.org/packages/ce/02/90488595a15c9da7a3d188e337be5cba7f85b0c9575a28d9e93d3043dd7f/conff-0.3.0.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "57176a7ab34b013d73fc5cf02e71ce13", "sha256": "123975006cb4e7b5567b8de337716db3930249048f232362e5e5a59ffd52e212"}, "downloads": -1, "filename": "conff-0.3.2.tar.gz", "has_sig": false, "md5_digest": "57176a7ab34b013d73fc5cf02e71ce13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6726, "upload_time": "2018-05-17T04:30:46", "upload_time_iso_8601": "2018-05-17T04:30:46.121358Z", "url": "https://files.pythonhosted.org/packages/9d/60/b8b84d4db9237605f2b8c9ca46bd7d0da47dc0df2ba61363844f263776cd/conff-0.3.2.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "852f60297c008331045733abbe61cef4", "sha256": "70107db2f0e4a6fab05c30046593fe3f5fec2b5263873f68f88a13ce1c644f9d"}, "downloads": -1, "filename": "conff-0.4.1.tar.gz", "has_sig": false, "md5_digest": "852f60297c008331045733abbe61cef4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10333, "upload_time": "2018-05-22T15:06:03", "upload_time_iso_8601": "2018-05-22T15:06:03.672701Z", "url": "https://files.pythonhosted.org/packages/b6/95/cdd3b61eebfbc9e7aa1661920d69cb23e7408e20cb7120c8b5159ffe18e5/conff-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "b46cf516984128ca3c81831c6201e0a7", "sha256": "b4b8ff7d5d6abf25366293253be7b1b898a8d29c401cb434313b4d4957c8164c"}, "downloads": -1, "filename": "conff-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b46cf516984128ca3c81831c6201e0a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15575, "upload_time": "2018-06-05T05:37:18", "upload_time_iso_8601": "2018-06-05T05:37:18.882943Z", "url": "https://files.pythonhosted.org/packages/fa/34/bdc82e66f7bbcdbcb42a0abbec7c94fb533391c2ed05ea48358b0f750067/conff-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b46cf516984128ca3c81831c6201e0a7", "sha256": "b4b8ff7d5d6abf25366293253be7b1b898a8d29c401cb434313b4d4957c8164c"}, "downloads": -1, "filename": "conff-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b46cf516984128ca3c81831c6201e0a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15575, "upload_time": "2018-06-05T05:37:18", "upload_time_iso_8601": "2018-06-05T05:37:18.882943Z", "url": "https://files.pythonhosted.org/packages/fa/34/bdc82e66f7bbcdbcb42a0abbec7c94fb533391c2ed05ea48358b0f750067/conff-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:00 2020"}