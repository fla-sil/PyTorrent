{"info": {"author": "Johannes Loehnert", "author_email": "loehnert.kde@gmx.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: User Interfaces"], "description": "ASCII Designer\n==============\n\nA library that:\n\n* creates GUI from ASCII-art (with well-defined syntax)\n* maps widgets to virtual class attributes\n* relieves you from the boring parts of Form building while leaving you in \n  control.\n\nDid you ever design a form by scribbling something like this in your editor::\n\n        Text to transform:   [ Text_      ]\n\n        Select transformation:\n\n        (x) Uppercase\n        ( ) Lowercase\n        ( ) Title-case\n\n            [ OK ]            [ Cancel ]\n\n... and wished that you could be done with design and start coding? Wish no longer::\n\n    from ascii_designer import AutoFrame\n\n    class TextTransformer(AutoFrame):\n        f_body='''\n                                |    <->       |\n            Text to transform:   [ Text_      ]\n\n            Select transformation:\n\n            (x) Uppercase\n            ( ) Lowercase\n            ( ) Title-case\n\n                [ OK ]            [ Cancel ]~\n\n        '''\n        def ok(self):\n            text = self.text\n            if self.uppercase:\n                text = text.upper()\n            elif self.lowercase:\n                text = text.lower()\n            elif self.titlecase:\n                text = text.title()\n            print(text)\n            self.close()\n\n        def cancel(self):\n            self.close()\n\n    if __name__ == '__main__':\n        TextTransformer().f_show()\n\nSome comments, incidentally highlighting the features of this library:\n\n* As you probably guessed, all the magic happens in ``AutoFrame``. The \n  ``f_show`` call triggers rendering of the form. All the reserved attributes \n  are prepended with ``f_`` to get out of your way when subclassing.\n* There is a **well-defined syntax** for how to get the usual widget types. In the \n  example you can find labels (plain text), a text box, radio buttons and normal \n  buttons.\n* The columns are defined by the **header row** with the pipe characters. The \n  minus sign denotes stretching columns. (The ``<`` / ``>`` chars are just \n  decoration.)\n* **Column-span** is easily done by having not-a-space underneath the pipe \n  symbol. **Row-span** can also be done by prepending subsequent cells with a \n  ``{`` character.\n* **Anchoring** is controlled by whether the cell is space-padded or not. For \n  example, the Text box stretches, while the cancel button is centered. The \n  tilde character can be used instead of a fragile trailing space.\n* **Widget IDs** are automatically generated by lowercasing and whitelisting the \n  captions.\n* If a method exists with the same name as a widget id, it is **automatically \n  bound** to the usually-wanted event (click in case of button, value-changed in \n  case of basically anything else). Oh, and ``close`` and ``quit`` are already \n  there for your convenience.\n* Otherwise, you can retrieve and set the widget's value by using its id like\n  a class **attribute**.\n* ``f_show()`` captures all the usual boilerplate and simply f***ing shows \n  the frame. It can be used for both the toplevel and additional frames.\n* Also note how the class name automatically turned into the window title. \n  Override by setting ``.f_title``.\n* The created widgets are **\"raw\", native widgets**. You can configure the toolkit \n  to use. Currently there is a Qt and a Tkinter implementation. The native \n  widget can accessed using ``form[\"widget_id\"]`` (or \n  ``form.f_controls[\"widget_id\"]``). \n\nThe general philosophy is to not paint everything over with wrappers. Instead, \nthe library focuses on specific tasks - building the layout, event-/value \nbinding - and lets you do everything else with the API you know and (maybe) love.\n\n\nINSTALLATION\n------------\n::\n\n    pip install ascii_designer\n\nRequirements: Python >= 3, ``attrs``. Obviously, to use the Qt toolkit you need ``Pyqt4``.\n\n\nDOCUMENTATION\n-------------\n\nPlease proceed to http://ascii_designer.readthedocs.io/en/latest/index.html\n\nLICENCSE\n--------\n\nMIT License: https://github.com/loehnertj/ascii_designer/blob/master/LICENSE\n\nTODO\n----\n\nAlpha-state software, mostly working.\n\nTest coverage is lacking, politely spoken.\n\nThis is a hobby project. If you need something quick, open an issue or send a pull request.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/loehnertj/ascii_designer", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ascii-designer", "package_url": "https://pypi.org/project/ascii-designer/", "platform": "", "project_url": "https://pypi.org/project/ascii-designer/", "project_urls": {"Homepage": "http://github.com/loehnertj/ascii_designer"}, "release_url": "https://pypi.org/project/ascii-designer/0.3.1/", "requires_dist": null, "requires_python": ">3.0", "summary": "Builds dialogs from ASCII art definition.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A library that:</p>\n<ul>\n<li>creates GUI from ASCII-art (with well-defined syntax)</li>\n<li>maps widgets to virtual class attributes</li>\n<li>relieves you from the boring parts of Form building while leaving you in\ncontrol.</li>\n</ul>\n<p>Did you ever design a form by scribbling something like this in your editor:</p>\n<pre>Text to transform:   [ Text_      ]\n\nSelect transformation:\n\n(x) Uppercase\n( ) Lowercase\n( ) Title-case\n\n    [ OK ]            [ Cancel ]\n</pre>\n<p>\u2026 and wished that you could be done with design and start coding? Wish no longer:</p>\n<pre>from ascii_designer import AutoFrame\n\nclass TextTransformer(AutoFrame):\n    f_body='''\n                            |    &lt;-&gt;       |\n        Text to transform:   [ Text_      ]\n\n        Select transformation:\n\n        (x) Uppercase\n        ( ) Lowercase\n        ( ) Title-case\n\n            [ OK ]            [ Cancel ]~\n\n    '''\n    def ok(self):\n        text = self.text\n        if self.uppercase:\n            text = text.upper()\n        elif self.lowercase:\n            text = text.lower()\n        elif self.titlecase:\n            text = text.title()\n        print(text)\n        self.close()\n\n    def cancel(self):\n        self.close()\n\nif __name__ == '__main__':\n    TextTransformer().f_show()\n</pre>\n<p>Some comments, incidentally highlighting the features of this library:</p>\n<ul>\n<li>As you probably guessed, all the magic happens in <tt>AutoFrame</tt>. The\n<tt>f_show</tt> call triggers rendering of the form. All the reserved attributes\nare prepended with <tt>f_</tt> to get out of your way when subclassing.</li>\n<li>There is a <strong>well-defined syntax</strong> for how to get the usual widget types. In the\nexample you can find labels (plain text), a text box, radio buttons and normal\nbuttons.</li>\n<li>The columns are defined by the <strong>header row</strong> with the pipe characters. The\nminus sign denotes stretching columns. (The <tt>&lt;</tt> / <tt>&gt;</tt> chars are just\ndecoration.)</li>\n<li><strong>Column-span</strong> is easily done by having not-a-space underneath the pipe\nsymbol. <strong>Row-span</strong> can also be done by prepending subsequent cells with a\n<tt>{</tt> character.</li>\n<li><strong>Anchoring</strong> is controlled by whether the cell is space-padded or not. For\nexample, the Text box stretches, while the cancel button is centered. The\ntilde character can be used instead of a fragile trailing space.</li>\n<li><strong>Widget IDs</strong> are automatically generated by lowercasing and whitelisting the\ncaptions.</li>\n<li>If a method exists with the same name as a widget id, it is <strong>automatically\nbound</strong> to the usually-wanted event (click in case of button, value-changed in\ncase of basically anything else). Oh, and <tt>close</tt> and <tt>quit</tt> are already\nthere for your convenience.</li>\n<li>Otherwise, you can retrieve and set the widget\u2019s value by using its id like\na class <strong>attribute</strong>.</li>\n<li><tt>f_show()</tt> captures all the usual boilerplate and simply f***ing shows\nthe frame. It can be used for both the toplevel and additional frames.</li>\n<li>Also note how the class name automatically turned into the window title.\nOverride by setting <tt>.f_title</tt>.</li>\n<li>The created widgets are <strong>\u201craw\u201d, native widgets</strong>. You can configure the toolkit\nto use. Currently there is a Qt and a Tkinter implementation. The native\nwidget can accessed using <tt><span class=\"pre\">form[\"widget_id\"]</span></tt> (or\n<tt><span class=\"pre\">form.f_controls[\"widget_id\"]</span></tt>).</li>\n</ul>\n<p>The general philosophy is to not paint everything over with wrappers. Instead,\nthe library focuses on specific tasks - building the layout, event-/value\nbinding - and lets you do everything else with the API you know and (maybe) love.</p>\n<div id=\"installation\">\n<h2>INSTALLATION</h2>\n<pre>pip install ascii_designer\n</pre>\n<p>Requirements: Python &gt;= 3, <tt>attrs</tt>. Obviously, to use the Qt toolkit you need <tt>Pyqt4</tt>.</p>\n</div>\n<div id=\"documentation\">\n<h2>DOCUMENTATION</h2>\n<p>Please proceed to <a href=\"http://ascii_designer.readthedocs.io/en/latest/index.html\" rel=\"nofollow\">http://ascii_designer.readthedocs.io/en/latest/index.html</a></p>\n</div>\n<div id=\"licencse\">\n<h2>LICENCSE</h2>\n<p>MIT License: <a href=\"https://github.com/loehnertj/ascii_designer/blob/master/LICENSE\" rel=\"nofollow\">https://github.com/loehnertj/ascii_designer/blob/master/LICENSE</a></p>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<p>Alpha-state software, mostly working.</p>\n<p>Test coverage is lacking, politely spoken.</p>\n<p>This is a hobby project. If you need something quick, open an issue or send a pull request.</p>\n</div>\n\n          </div>"}, "last_serial": 6446644, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "95e97c9ea15ed844c84ba7d61233f46a", "sha256": "6e53fd3899c6047ba7b34c0c5ce7387b4d338099b558ba680e0ea347db5f0707"}, "downloads": -1, "filename": "ascii_designer-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "95e97c9ea15ed844c84ba7d61233f46a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 25014, "upload_time": "2019-05-01T19:34:08", "upload_time_iso_8601": "2019-05-01T19:34:08.898174Z", "url": "https://files.pythonhosted.org/packages/b1/ea/fe718a19a11b29f49ada7dae9ddbe8dd67a65553252129c20e858e85d4b0/ascii_designer-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23768d93b696207912a493bf47a91726", "sha256": "ab9d53537576022425c35be460e61e26913e0738222b7cc68e51a252f0aa61a6"}, "downloads": -1, "filename": "ascii_designer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "23768d93b696207912a493bf47a91726", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 18708, "upload_time": "2019-05-01T19:34:11", "upload_time_iso_8601": "2019-05-01T19:34:11.648462Z", "url": "https://files.pythonhosted.org/packages/41/86/6a9699f76b74de96a849f6a2b5021c442da911deda815f3538219dd838fd/ascii_designer-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d1fe4c33471818a3affa57514d517a9e", "sha256": "cd470506f46dd9577af1b6826d258bc43715c82cce59e32704aa5069f24e22c7"}, "downloads": -1, "filename": "ascii_designer-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d1fe4c33471818a3affa57514d517a9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 27663, "upload_time": "2019-09-23T17:15:00", "upload_time_iso_8601": "2019-09-23T17:15:00.650889Z", "url": "https://files.pythonhosted.org/packages/aa/6a/a4b7b0f43137fdc2e93afc36e9a78876a296db151f8c8804aac447e40ec7/ascii_designer-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d187cb08c050c7bb3e19d73893c529a", "sha256": "080ef825d2bc781b829c8c10c73d48fa64c8d017d7578aa421a9c8d888c3b559"}, "downloads": -1, "filename": "ascii_designer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2d187cb08c050c7bb3e19d73893c529a", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 20907, "upload_time": "2019-09-23T17:15:03", "upload_time_iso_8601": "2019-09-23T17:15:03.283281Z", "url": "https://files.pythonhosted.org/packages/ef/17/4c43bf77193b35bf66ed334fc0df40156549633bbb17e44bee52c08ad415/ascii_designer-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2e89b4c438ba98eaad52e4801dbb0ec6", "sha256": "cc7d8f84f706069392d8980b3302e83f61416d477c536eb3d3800aea3f681a26"}, "downloads": -1, "filename": "ascii_designer-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2e89b4c438ba98eaad52e4801dbb0ec6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 29707, "upload_time": "2020-01-08T21:01:26", "upload_time_iso_8601": "2020-01-08T21:01:26.819386Z", "url": "https://files.pythonhosted.org/packages/55/80/be6513bfc108898867cb043a82769f5f161b9ab393500fa5128317d7da3c/ascii_designer-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cd90ca724f197d46abf9ba2da51f2ea", "sha256": "53ae3ff80c516e436a02e817b83f174f79282e69ced152fe1c1a1bb4a43244df"}, "downloads": -1, "filename": "ascii_designer-0.3.0.tar.gz", "has_sig": false, "md5_digest": "7cd90ca724f197d46abf9ba2da51f2ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 22841, "upload_time": "2020-01-08T21:01:28", "upload_time_iso_8601": "2020-01-08T21:01:28.761460Z", "url": "https://files.pythonhosted.org/packages/3b/4f/6e2d8c9e656ce35992cd3f6740d6dbd13993508325ecb063781446537663/ascii_designer-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5b15c77a4a6a47ccbe5b120e2b5efae2", "sha256": "4bb3b37b7c7c8cf8ef049052f9473d375419fa6456a8bf9e4e6765f586460171"}, "downloads": -1, "filename": "ascii_designer-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5b15c77a4a6a47ccbe5b120e2b5efae2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 30005, "upload_time": "2020-01-13T20:39:39", "upload_time_iso_8601": "2020-01-13T20:39:39.747006Z", "url": "https://files.pythonhosted.org/packages/be/9d/ab2e49dc2c481e5e95e66440d45a415ec19ca89f49c1084bd22ef33aa3f3/ascii_designer-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01808c096ab98571dc1b0d5caa0a0109", "sha256": "94e49514f4edc5772628139fc057c65939a3b2424c12871b8fce0519096558f0"}, "downloads": -1, "filename": "ascii_designer-0.3.1.tar.gz", "has_sig": false, "md5_digest": "01808c096ab98571dc1b0d5caa0a0109", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 23084, "upload_time": "2020-01-13T20:39:41", "upload_time_iso_8601": "2020-01-13T20:39:41.790009Z", "url": "https://files.pythonhosted.org/packages/7b/ff/36ebb9ccc81ce55a8e2765ad00468162ff5d4eaa8941d22314d70a95a3ea/ascii_designer-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b15c77a4a6a47ccbe5b120e2b5efae2", "sha256": "4bb3b37b7c7c8cf8ef049052f9473d375419fa6456a8bf9e4e6765f586460171"}, "downloads": -1, "filename": "ascii_designer-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5b15c77a4a6a47ccbe5b120e2b5efae2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 30005, "upload_time": "2020-01-13T20:39:39", "upload_time_iso_8601": "2020-01-13T20:39:39.747006Z", "url": "https://files.pythonhosted.org/packages/be/9d/ab2e49dc2c481e5e95e66440d45a415ec19ca89f49c1084bd22ef33aa3f3/ascii_designer-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01808c096ab98571dc1b0d5caa0a0109", "sha256": "94e49514f4edc5772628139fc057c65939a3b2424c12871b8fce0519096558f0"}, "downloads": -1, "filename": "ascii_designer-0.3.1.tar.gz", "has_sig": false, "md5_digest": "01808c096ab98571dc1b0d5caa0a0109", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 23084, "upload_time": "2020-01-13T20:39:41", "upload_time_iso_8601": "2020-01-13T20:39:41.790009Z", "url": "https://files.pythonhosted.org/packages/7b/ff/36ebb9ccc81ce55a8e2765ad00468162ff5d4eaa8941d22314d70a95a3ea/ascii_designer-0.3.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:03 2020"}