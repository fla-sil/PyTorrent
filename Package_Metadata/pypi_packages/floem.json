{"info": {"author": "BTaskaya", "author_email": "batuhanosmantaskaya@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Floem\nSegmented Python Preprocessor\n## Precommands\nPrecommands starts with `!` symbol and continues with directive.\n### Define Directive\nDefines a static variable and when preprocessing fills all parts with that variable. It can take any value. Example;\n```\n!define flag as 1323\n!define name as \"floem\"\n```\n\n### Control Flow Directive\nCompares 2 static at preprocessing time and if comperation successfully occurs it allows the code inside the `!startif` & `!endif` directives to run. If not the code just be deleted.\n```\nclass Dummy:\n    def __init__(self, y):\n        self.x = y\n        !startif <flag> gt 1000\n        print('Flag is greater than 1k')\n        for i in range(<flag>):\n            print(i)\n        !endif\n```\n### Example\n```\n!define flag as 1323\n!define name as \"floem\"\n\nclass Dummy:\n    def __init__(self, y):\n        self.x = y\n        !startif <flag> gt 1000\n        print('Flag is greater than 1k')\n        for i in range(<flag>):\n            print(i)\n        !endif\n\nif __name__ == '__main__':\n    !startif <name> eq \"floem\"\n    d = Dummy(15)\n    !endif\n    !startif \"ksilem\" eq <name> \n    print('i dont think so')\n    !endif\n```\nand after the preprocessing\n```\nclass Dummy:\n    def __init__(self, y):\n        self.x = y\n        print('Flag is greater than 1k')\n        for i in range(1323):\n            print(i)\n\nif __name__ == '__main__':\n    d = Dummy(15)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://btaskaya/floem", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "floem", "package_url": "https://pypi.org/project/floem/", "platform": "", "project_url": "https://pypi.org/project/floem/", "project_urls": {"Homepage": "https://btaskaya/floem"}, "release_url": "https://pypi.org/project/floem/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Segmented Python preprocessor.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Floem</h1>\n<p>Segmented Python Preprocessor</p>\n<h2>Precommands</h2>\n<p>Precommands starts with <code>!</code> symbol and continues with directive.</p>\n<h3>Define Directive</h3>\n<p>Defines a static variable and when preprocessing fills all parts with that variable. It can take any value. Example;</p>\n<pre><code>!define flag as 1323\n!define name as \"floem\"\n</code></pre>\n<h3>Control Flow Directive</h3>\n<p>Compares 2 static at preprocessing time and if comperation successfully occurs it allows the code inside the <code>!startif</code> &amp; <code>!endif</code> directives to run. If not the code just be deleted.</p>\n<pre><code>class Dummy:\n    def __init__(self, y):\n        self.x = y\n        !startif &lt;flag&gt; gt 1000\n        print('Flag is greater than 1k')\n        for i in range(&lt;flag&gt;):\n            print(i)\n        !endif\n</code></pre>\n<h3>Example</h3>\n<pre><code>!define flag as 1323\n!define name as \"floem\"\n\nclass Dummy:\n    def __init__(self, y):\n        self.x = y\n        !startif &lt;flag&gt; gt 1000\n        print('Flag is greater than 1k')\n        for i in range(&lt;flag&gt;):\n            print(i)\n        !endif\n\nif __name__ == '__main__':\n    !startif &lt;name&gt; eq \"floem\"\n    d = Dummy(15)\n    !endif\n    !startif \"ksilem\" eq &lt;name&gt; \n    print('i dont think so')\n    !endif\n</code></pre>\n<p>and after the preprocessing</p>\n<pre><code>class Dummy:\n    def __init__(self, y):\n        self.x = y\n        print('Flag is greater than 1k')\n        for i in range(1323):\n            print(i)\n\nif __name__ == '__main__':\n    d = Dummy(15)\n</code></pre>\n\n          </div>"}, "last_serial": 4921519, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "35b504c16af473a3097ec5e5650a5112", "sha256": "64f2e125b1e3e4a9ab4919108f1768fff9b852a596319f5aa0be0363febe2c9f"}, "downloads": -1, "filename": "floem-0.1.tar.gz", "has_sig": false, "md5_digest": "35b504c16af473a3097ec5e5650a5112", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2189, "upload_time": "2019-03-10T14:52:18", "upload_time_iso_8601": "2019-03-10T14:52:18.700893Z", "url": "https://files.pythonhosted.org/packages/ef/38/9893d16bc8e069ab1b51a5f4698cd4f41269f6782231f9b0a60bfda6a269/floem-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a8b3234d24d0384064f0507c9119925a", "sha256": "737ebf325822daa5454fe32086a9c738026e9febc4a5070dd7ac9e12f36db06b"}, "downloads": -1, "filename": "floem-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a8b3234d24d0384064f0507c9119925a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3115, "upload_time": "2019-03-10T14:57:23", "upload_time_iso_8601": "2019-03-10T14:57:23.011986Z", "url": "https://files.pythonhosted.org/packages/72/d7/b871cecfd5fb90582f85d74c2b79cf6f79e171b45b738c946193bd8e232c/floem-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8b3234d24d0384064f0507c9119925a", "sha256": "737ebf325822daa5454fe32086a9c738026e9febc4a5070dd7ac9e12f36db06b"}, "downloads": -1, "filename": "floem-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a8b3234d24d0384064f0507c9119925a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3115, "upload_time": "2019-03-10T14:57:23", "upload_time_iso_8601": "2019-03-10T14:57:23.011986Z", "url": "https://files.pythonhosted.org/packages/72/d7/b871cecfd5fb90582f85d74c2b79cf6f79e171b45b738c946193bd8e232c/floem-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:47 2020"}