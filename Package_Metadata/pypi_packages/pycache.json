{"info": {"author": "plasmashadow", "author_email": "plasmashadowx@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 2"], "description": "##PyCache\n\n\nPycache is a LRU Implemented with Linked Stack.\nhttps://en.wikipedia.org/wiki/Cache_algorithms#LRU\n\n\n###Installation:\n\n```\ngit clone https://github.com/plasmashadow/pycache\n\ncd pycache\n\npython setup.py install\n\n```\n\n###Usage:\n\nYou can use pycache as both object as well as a decorator\n\n\n```\nfrom pycache import cached\nfrom pycache import Cache\n\ncache = Cache()\n\n@cached(cache)\ndef add(x,y):\n    return x+y\n\n#operation will be computed and stored on cache\nprint add(2,3)\n\n#will be retrived from cache\nadd(2,3)\n\n\n# As a cache object\nc = Cache()\n\nc.insert(key, value)\nc.update(key, value)\nc.fetch(key)\n\n```\n\n###License\n\nMIT", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/plasmashadow/pycache.git", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "pycache", "package_url": "https://pypi.org/project/pycache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pycache/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/plasmashadow/pycache.git"}, "release_url": "https://pypi.org/project/pycache/0.1/", "requires_dist": null, "requires_python": null, "summary": "Pythonic way of Caching Computations(LRU caching module)", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            ##PyCache<br><br><br>Pycache is a LRU Implemented with Linked Stack.<br>https://en.wikipedia.org/wiki/Cache_algorithms#LRU<br><br><br>###Installation:<br><br>```<br>git clone https://github.com/plasmashadow/pycache<br><br>cd pycache<br><br>python setup.py install<br><br>```<br><br>###Usage:<br><br>You can use pycache as both object as well as a decorator<br><br><br>```<br>from pycache import cached<br>from pycache import Cache<br><br>cache = Cache()<br><br>@cached(cache)<br>def add(x,y):<br>    return x+y<br><br>#operation will be computed and stored on cache<br>print add(2,3)<br><br>#will be retrived from cache<br>add(2,3)<br><br><br># As a cache object<br>c = Cache()<br><br>c.insert(key, value)<br>c.update(key, value)<br>c.fetch(key)<br><br>```<br><br>###License<br><br>MIT\n          </div>"}, "last_serial": 1686767, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 03:08:52 2020"}