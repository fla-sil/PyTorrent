{"info": {"author": "brentp", "author_email": "bpederse@gmail.com", "bugtrack_url": null, "classifiers": ["Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "==================================================\npyfasta: pythonic access to fasta sequence files.\n==================================================\n\n\n:Author: Brent Pedersen (brentp)\n:Email: bpederse@gmail.com\n:License: MIT\n\n.. contents ::\n\nImplementation\n==============\n\nRequires Python >= 2.6. Stores a flattened version of the fasta file without\nspaces or headers and uses either a mmap of numpy binary format or fseek/fread so the\n*sequence data is never read into memory*. Saves a pickle (.gdx) of the start, stop \n(for fseek/mmap) locations of each header in the fasta file for internal use.\n\nUsage\n=====\n::\n  \n    >>> from pyfasta import Fasta\n\n    >>> f = Fasta('tests/data/three_chrs.fasta')\n    >>> sorted(f.keys())\n    ['chr1', 'chr2', 'chr3']\n\n    >>> f['chr1']\n    NpyFastaRecord(0..80)\n\n\n\nSlicing\n-------\n::\n\n    # get full the sequence:\n    >>> a = str(f['chr1'])\n    >>> b = f['chr1'][:]\n    >>> a == b\n    True\n\n    >>> f['chr1'][:10]\n    'ACTGACTGAC'\n\n    # get the 1st basepair in every codon (it's python yo)\n    >>> f['chr1'][::3]\n    'AGTCAGTCAGTCAGTCAGTCAGTCAGT'\n\n    # can query by a 'feature' dictionary (note this is one based coordinates)\n    >>> f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9})\n    'CTGACTGA'\n\n    # same as:\n    >>> f['chr1'][1:9]\n    'CTGACTGA'\n\n    # use python, zero based coords\n    >>> f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9}, one_based=False)\n    'TGACTGA'\n\n    # with reverse complement (automatic for - strand)\n    >>> f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9, 'strand': '-'})\n    'TCAGTCAG'\n\nKey Function\n------------\nSometimes your fasta will have a long header like: \"AT1G51370.2 | Symbols:  | F-box family protein | chr1:19045615-19046748 FORWARD\" when you only want to key off: \"AT1G51370.2\". In this case, specify the key_fn argument to the constructor:\n\n::\n\n    >>> fkey = Fasta('tests/data/key.fasta', key_fn=lambda key: key.split()[0])\n    >>> sorted(fkey.keys())\n    ['a', 'b', 'c']\n\nNumpy\n=====\n\nThe default is to use a memmaped numpy array as the backend. In which case it's possible to\nget back an array directly...\n::\n\n    >>> f['chr1'].as_string = False\n    >>> f['chr1'][:10] # doctest: +NORMALIZE_WHITESPACE\n    memmap(['A', 'C', 'T', 'G', 'A', 'C', 'T', 'G', 'A', 'C'], dtype='|S1')\n\n    >>> import numpy as np\n    >>> a = np.array(f['chr2'])\n    >>> a.shape[0] == len(f['chr2'])\n    True\n\n    >>> a[10:14] # doctest: +NORMALIZE_WHITESPACE\n    array(['A', 'A', 'A', 'A'], dtype='|S1')\n\nmask a sub-sequence\n::\n\n    >>> a[11:13] = np.array('N', dtype='S1')\n    >>> a[10:14].tostring()\n    'ANNA'\n\n\nBackends (Record class)\n=======================\nIt's also possible to specify another record class as the underlying work-horse\nfor slicing and reading. Currently, there's just the default: \n\n  * NpyFastaRecord which uses numpy memmap\n  * FastaRecord, which uses using fseek/fread\n  * MemoryRecord which reads everything into memory and must reparse the original\n    fasta every time.\n  * TCRecord which is identical to NpyFastaRecord except that it saves the index\n    in a TokyoCabinet hash database, for cases when there are enough records that\n    loading the entire index from a pickle into memory is unwise. (NOTE: that the\n    sequence is not loaded into memory in either case).\n\nIt's possible to specify the class used with the `record_class` kwarg to the `Fasta`\nconstructor:\n::\n\n    >>> from pyfasta import FastaRecord # default is NpyFastaRecord\n    >>> f = Fasta('tests/data/three_chrs.fasta', record_class=FastaRecord)\n    >>> f['chr1']\n    FastaRecord('tests/data/three_chrs.fasta.flat', 0..80)\n\nother than the repr, it should behave exactly like the Npy record class backend\n\nit's possible to create your own using a sub-class of FastaRecord. see the source \nin pyfasta/records.py for details.\n\nFlattening\n==========\nIn order to efficiently access the sequence content, pyfasta saves a separate, flattened file with all newlines and headers removed from the sequence. In the case of large fasta files, one may not wish to save 2 copies of a 5GG+ file. In that case, it's possible to flatten the file \"inplace\", keeping all the headers, and retaining the validity of the fasta file -- with the only change being that the new-lines are removed from each sequence. This can be specified via `flatten_inplace` = True\n::\n    \n    >>> import os\n    >>> os.unlink('tests/data/three_chrs.fasta.gdx') # cleanup non-inplace idx\n    >>> f = Fasta('tests/data/three_chrs.fasta', flatten_inplace=True)\n    >>> f['chr1']  # note the difference in the output from above.\n    NpyFastaRecord(6..86)\n\n    # sequence from is same as when requested from non-flat file above.\n    >>> f['chr1'][1:9]\n    'CTGACTGA'\n\n    # the flattened file is kept as a place holder without the sequence data.\n    >>> open('tests/data/three_chrs.fasta.flat').read()\n    '@flattened@'\n\n\nCommand Line Interface\n======================\nthere's also a command line interface to manipulate / view fasta files.\nthe `pyfasta` executable is installed via setuptools, running it will show\nhelp text.\n\nsplit a fasta file into 6 new files of relatively even size:\n\n  $ pyfasta **split** -n 6 original.fasta\n\nsplit the fasta file into one new file per header with \"%(seqid)s\" being filled into each filename.:\n  \n  $ pyfasta **split** --header \"%(seqid)s.fasta\" original.fasta\n\ncreate 1 new fasta file with the sequence split into 10K-mers:\n\n  $ pyfasta **split** -n 1 -k 10000 original.fasta\n\n2 new fasta files with the sequence split into 10K-mers with 2K overlap:\n\n  $ pyfasta **split** -n 2 -k 10000 -o 2000 original.fasta\n\n\nshow some info about the file (and show gc content):\n\n  $ pyfasta **info** --gc test/data/three_chrs.fasta\n\n\n**extract** sequence from the file. use the header flag to make\na new fasta file. the args are a list of sequences to extract.\n\n  $ pyfasta **extract** --header --fasta test/data/three_chrs.fasta seqa seqb seqc\n\n**extract** sequence from a file using a file containing the headers *not* wanted in the new file:\n\n  $ pyfasta extract --header --fasta input.fasta --exclude --file seqids_to_exclude.txt\n\n**extract** sequence from a fasta file with complex keys where we only want to lookup based on the part before the space.\n\n  $ pyfasta extract --header --fasta input.with.keys.fasta --space --file seqids.txt\n\n**flatten** a file inplace, for faster later use by pyfasta, and without creating another copy. (`Flattening`_)\n\n  $ pyfasta flatten input.fasta \n\ncleanup \n=======\n(though for real use these will remain for faster access)\n::\n\n    >>> os.unlink('tests/data/three_chrs.fasta.gdx')\n    >>> os.unlink('tests/data/three_chrs.fasta.flat')\n\nTesting\n=======\nthere is currently > 99% test coverage for the 2 modules and all included \nrecord classes. to run the tests:\n::\n\n  $ python setup.py nosetests\n\nChanges\n=======\n0.5.2\n-----\nfix complement (@mruffalo)\n\n0.5.0\n-----\npython 3 compatibility thanks to mruffalo\n\n0.4.5\n-----\npyfasta split can handle > 52 files. (thanks Devtulya)\n\n0.4.4\n-----\nfix pyfasta extract\n\n0.4.3\n-----\nAdd 0 or 1-based intervals in sequence() thanks @jamescasbon\n\n0.4.2\n-----\nupdate for latest numpy (can't close memmap)\n\n0.4.1\n-----\ncheck for duplicate headers.\n\n0.4.0\n-----\n* add key_fn kwarg to constuctor\n\n0.3.9\n-----\n* only require 'r' (not r+) for memory map.\n\n0.3.8\n-----\n* clean up logic for mixing inplace/non-inplace flattened files.\n  if the inplace is available, it is always used. \n\n0.3.6/7\n-------\n* dont re-flatten the file every time!\n* allow spaces before and after the header in the orginal fasta.\n\n0.3.5\n-----\n\n* update docs in README.txt for new CLI stuff.\n* allow flattening inplace.\n* get rid of memmap (results in faster parsing).\n\n0.3.4\n-----\n\n* restore python2.5 compatiblity.\n* CLI: add ability to exclude sequence from extract\n* CLI: allow spliting based on header.\n\n0.3.3\n-----\n\n* include this file in the tar ball (thanks wen h.)\n\n0.3.2\n-----\n\n* separate out backends into records.py\n\n* use nosetests (python setup.py nosetests)\n\n* add a TCRecord backend for next-gen sequencing availabe if tc is (easy-)installed.\n\n* improve test coverage.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/brentp/pyfasta/", "keywords": "bioinformatics blast fasta", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pyfasta", "package_url": "https://pypi.org/project/pyfasta/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pyfasta/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/brentp/pyfasta/"}, "release_url": "https://pypi.org/project/pyfasta/0.5.2/", "requires_dist": null, "requires_python": null, "summary": "fast, memory-efficient, pythonic (and command-line) access to fasta sequence files", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th>\n<td>Brent Pedersen (brentp)</td></tr>\n<tr><th>Email:</th><td><a href=\"mailto:bpederse%40gmail.com\">bpederse<span>@</span>gmail<span>.</span>com</a></td>\n</tr>\n<tr><th>License:</th><td>MIT</td>\n</tr>\n</tbody>\n</table>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#implementation\" id=\"id16\" rel=\"nofollow\">Implementation</a></li>\n<li><a href=\"#usage\" id=\"id17\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#slicing\" id=\"id18\" rel=\"nofollow\">Slicing</a></li>\n<li><a href=\"#key-function\" id=\"id19\" rel=\"nofollow\">Key Function</a></li>\n</ul>\n</li>\n<li><a href=\"#numpy\" id=\"id20\" rel=\"nofollow\">Numpy</a></li>\n<li><a href=\"#backends-record-class\" id=\"id21\" rel=\"nofollow\">Backends (Record class)</a></li>\n<li><a href=\"#flattening\" id=\"id22\" rel=\"nofollow\">Flattening</a></li>\n<li><a href=\"#command-line-interface\" id=\"id23\" rel=\"nofollow\">Command Line Interface</a></li>\n<li><a href=\"#cleanup\" id=\"id24\" rel=\"nofollow\">cleanup</a></li>\n<li><a href=\"#testing\" id=\"id25\" rel=\"nofollow\">Testing</a></li>\n<li><a href=\"#changes\" id=\"id26\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#id1\" id=\"id27\" rel=\"nofollow\">0.5.2</a></li>\n<li><a href=\"#id2\" id=\"id28\" rel=\"nofollow\">0.5.0</a></li>\n<li><a href=\"#id3\" id=\"id29\" rel=\"nofollow\">0.4.5</a></li>\n<li><a href=\"#id4\" id=\"id30\" rel=\"nofollow\">0.4.4</a></li>\n<li><a href=\"#id5\" id=\"id31\" rel=\"nofollow\">0.4.3</a></li>\n<li><a href=\"#id6\" id=\"id32\" rel=\"nofollow\">0.4.2</a></li>\n<li><a href=\"#id7\" id=\"id33\" rel=\"nofollow\">0.4.1</a></li>\n<li><a href=\"#id8\" id=\"id34\" rel=\"nofollow\">0.4.0</a></li>\n<li><a href=\"#id9\" id=\"id35\" rel=\"nofollow\">0.3.9</a></li>\n<li><a href=\"#id10\" id=\"id36\" rel=\"nofollow\">0.3.8</a></li>\n<li><a href=\"#id11\" id=\"id37\" rel=\"nofollow\">0.3.6/7</a></li>\n<li><a href=\"#id12\" id=\"id38\" rel=\"nofollow\">0.3.5</a></li>\n<li><a href=\"#id13\" id=\"id39\" rel=\"nofollow\">0.3.4</a></li>\n<li><a href=\"#id14\" id=\"id40\" rel=\"nofollow\">0.3.3</a></li>\n<li><a href=\"#id15\" id=\"id41\" rel=\"nofollow\">0.3.2</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"implementation\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Implementation</a></h2>\n<p>Requires Python &gt;= 2.6. Stores a flattened version of the fasta file without\nspaces or headers and uses either a mmap of numpy binary format or fseek/fread so the\n<em>sequence data is never read into memory</em>. Saves a pickle (.gdx) of the start, stop\n(for fseek/mmap) locations of each header in the fasta file for internal use.</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id17\" rel=\"nofollow\">Usage</a></h2>\n<pre>&gt;&gt;&gt; from pyfasta import Fasta\n\n&gt;&gt;&gt; f = Fasta('tests/data/three_chrs.fasta')\n&gt;&gt;&gt; sorted(f.keys())\n['chr1', 'chr2', 'chr3']\n\n&gt;&gt;&gt; f['chr1']\nNpyFastaRecord(0..80)\n</pre>\n<div id=\"slicing\">\n<h3><a href=\"#id18\" rel=\"nofollow\">Slicing</a></h3>\n<pre># get full the sequence:\n&gt;&gt;&gt; a = str(f['chr1'])\n&gt;&gt;&gt; b = f['chr1'][:]\n&gt;&gt;&gt; a == b\nTrue\n\n&gt;&gt;&gt; f['chr1'][:10]\n'ACTGACTGAC'\n\n# get the 1st basepair in every codon (it's python yo)\n&gt;&gt;&gt; f['chr1'][::3]\n'AGTCAGTCAGTCAGTCAGTCAGTCAGT'\n\n# can query by a 'feature' dictionary (note this is one based coordinates)\n&gt;&gt;&gt; f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9})\n'CTGACTGA'\n\n# same as:\n&gt;&gt;&gt; f['chr1'][1:9]\n'CTGACTGA'\n\n# use python, zero based coords\n&gt;&gt;&gt; f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9}, one_based=False)\n'TGACTGA'\n\n# with reverse complement (automatic for - strand)\n&gt;&gt;&gt; f.sequence({'chr': 'chr1', 'start': 2, 'stop': 9, 'strand': '-'})\n'TCAGTCAG'\n</pre>\n</div>\n<div id=\"key-function\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Key Function</a></h3>\n<p>Sometimes your fasta will have a long header like: \u201cAT1G51370.2 | Symbols:  | F-box family protein | chr1:19045615-19046748 FORWARD\u201d when you only want to key off: \u201cAT1G51370.2\u201d. In this case, specify the key_fn argument to the constructor:</p>\n<pre>&gt;&gt;&gt; fkey = Fasta('tests/data/key.fasta', key_fn=lambda key: key.split()[0])\n&gt;&gt;&gt; sorted(fkey.keys())\n['a', 'b', 'c']\n</pre>\n</div>\n</div>\n<div id=\"numpy\">\n<h2><a href=\"#id20\" rel=\"nofollow\">Numpy</a></h2>\n<p>The default is to use a memmaped numpy array as the backend. In which case it\u2019s possible to\nget back an array directly\u2026</p>\n<pre>&gt;&gt;&gt; f['chr1'].as_string = False\n&gt;&gt;&gt; f['chr1'][:10] # doctest: +NORMALIZE_WHITESPACE\nmemmap(['A', 'C', 'T', 'G', 'A', 'C', 'T', 'G', 'A', 'C'], dtype='|S1')\n\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; a = np.array(f['chr2'])\n&gt;&gt;&gt; a.shape[0] == len(f['chr2'])\nTrue\n\n&gt;&gt;&gt; a[10:14] # doctest: +NORMALIZE_WHITESPACE\narray(['A', 'A', 'A', 'A'], dtype='|S1')\n</pre>\n<p>mask a sub-sequence</p>\n<pre>&gt;&gt;&gt; a[11:13] = np.array('N', dtype='S1')\n&gt;&gt;&gt; a[10:14].tostring()\n'ANNA'\n</pre>\n</div>\n<div id=\"backends-record-class\">\n<h2><a href=\"#id21\" rel=\"nofollow\">Backends (Record class)</a></h2>\n<p>It\u2019s also possible to specify another record class as the underlying work-horse\nfor slicing and reading. Currently, there\u2019s just the default:</p>\n<blockquote>\n<ul>\n<li>NpyFastaRecord which uses numpy memmap</li>\n<li>FastaRecord, which uses using fseek/fread</li>\n<li>MemoryRecord which reads everything into memory and must reparse the original\nfasta every time.</li>\n<li>TCRecord which is identical to NpyFastaRecord except that it saves the index\nin a TokyoCabinet hash database, for cases when there are enough records that\nloading the entire index from a pickle into memory is unwise. (NOTE: that the\nsequence is not loaded into memory in either case).</li>\n</ul>\n</blockquote>\n<p>It\u2019s possible to specify the class used with the <cite>record_class</cite> kwarg to the <cite>Fasta</cite>\nconstructor:</p>\n<pre>&gt;&gt;&gt; from pyfasta import FastaRecord # default is NpyFastaRecord\n&gt;&gt;&gt; f = Fasta('tests/data/three_chrs.fasta', record_class=FastaRecord)\n&gt;&gt;&gt; f['chr1']\nFastaRecord('tests/data/three_chrs.fasta.flat', 0..80)\n</pre>\n<p>other than the repr, it should behave exactly like the Npy record class backend</p>\n<p>it\u2019s possible to create your own using a sub-class of FastaRecord. see the source\nin pyfasta/records.py for details.</p>\n</div>\n<div id=\"flattening\">\n<h2><a href=\"#id22\" rel=\"nofollow\">Flattening</a></h2>\n<p>In order to efficiently access the sequence content, pyfasta saves a separate, flattened file with all newlines and headers removed from the sequence. In the case of large fasta files, one may not wish to save 2 copies of a 5GG+ file. In that case, it\u2019s possible to flatten the file \u201cinplace\u201d, keeping all the headers, and retaining the validity of the fasta file \u2013 with the only change being that the new-lines are removed from each sequence. This can be specified via <cite>flatten_inplace</cite> = True</p>\n<pre>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.unlink('tests/data/three_chrs.fasta.gdx') # cleanup non-inplace idx\n&gt;&gt;&gt; f = Fasta('tests/data/three_chrs.fasta', flatten_inplace=True)\n&gt;&gt;&gt; f['chr1']  # note the difference in the output from above.\nNpyFastaRecord(6..86)\n\n# sequence from is same as when requested from non-flat file above.\n&gt;&gt;&gt; f['chr1'][1:9]\n'CTGACTGA'\n\n# the flattened file is kept as a place holder without the sequence data.\n&gt;&gt;&gt; open('tests/data/three_chrs.fasta.flat').read()\n'@flattened@'\n</pre>\n</div>\n<div id=\"command-line-interface\">\n<h2><a href=\"#id23\" rel=\"nofollow\">Command Line Interface</a></h2>\n<p>there\u2019s also a command line interface to manipulate / view fasta files.\nthe <cite>pyfasta</cite> executable is installed via setuptools, running it will show\nhelp text.</p>\n<p>split a fasta file into 6 new files of relatively even size:</p>\n<blockquote>\n$ pyfasta <strong>split</strong> -n 6 original.fasta</blockquote>\n<p>split the fasta file into one new file per header with \u201c%(seqid)s\u201d being filled into each filename.:</p>\n<blockquote>\n$ pyfasta <strong>split</strong> \u2013header \u201c%(seqid)s.fasta\u201d original.fasta</blockquote>\n<p>create 1 new fasta file with the sequence split into 10K-mers:</p>\n<blockquote>\n$ pyfasta <strong>split</strong> -n 1 -k 10000 original.fasta</blockquote>\n<p>2 new fasta files with the sequence split into 10K-mers with 2K overlap:</p>\n<blockquote>\n$ pyfasta <strong>split</strong> -n 2 -k 10000 -o 2000 original.fasta</blockquote>\n<p>show some info about the file (and show gc content):</p>\n<blockquote>\n$ pyfasta <strong>info</strong> \u2013gc test/data/three_chrs.fasta</blockquote>\n<p><strong>extract</strong> sequence from the file. use the header flag to make\na new fasta file. the args are a list of sequences to extract.</p>\n<blockquote>\n$ pyfasta <strong>extract</strong> \u2013header \u2013fasta test/data/three_chrs.fasta seqa seqb seqc</blockquote>\n<p><strong>extract</strong> sequence from a file using a file containing the headers <em>not</em> wanted in the new file:</p>\n<blockquote>\n$ pyfasta extract \u2013header \u2013fasta input.fasta \u2013exclude \u2013file seqids_to_exclude.txt</blockquote>\n<p><strong>extract</strong> sequence from a fasta file with complex keys where we only want to lookup based on the part before the space.</p>\n<blockquote>\n$ pyfasta extract \u2013header \u2013fasta input.with.keys.fasta \u2013space \u2013file seqids.txt</blockquote>\n<p><strong>flatten</strong> a file inplace, for faster later use by pyfasta, and without creating another copy. (<a href=\"#flattening\" rel=\"nofollow\">Flattening</a>)</p>\n<blockquote>\n$ pyfasta flatten input.fasta</blockquote>\n</div>\n<div id=\"cleanup\">\n<h2><a href=\"#id24\" rel=\"nofollow\">cleanup</a></h2>\n<p>(though for real use these will remain for faster access)</p>\n<pre>&gt;&gt;&gt; os.unlink('tests/data/three_chrs.fasta.gdx')\n&gt;&gt;&gt; os.unlink('tests/data/three_chrs.fasta.flat')\n</pre>\n</div>\n<div id=\"testing\">\n<h2><a href=\"#id25\" rel=\"nofollow\">Testing</a></h2>\n<p>there is currently &gt; 99% test coverage for the 2 modules and all included\nrecord classes. to run the tests:</p>\n<pre>$ python setup.py nosetests\n</pre>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id26\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id27\" rel=\"nofollow\">0.5.2</a></h3>\n<p>fix complement (@mruffalo)</p>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id28\" rel=\"nofollow\">0.5.0</a></h3>\n<p>python 3 compatibility thanks to mruffalo</p>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id29\" rel=\"nofollow\">0.4.5</a></h3>\n<p>pyfasta split can handle &gt; 52 files. (thanks Devtulya)</p>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id30\" rel=\"nofollow\">0.4.4</a></h3>\n<p>fix pyfasta extract</p>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id31\" rel=\"nofollow\">0.4.3</a></h3>\n<p>Add 0 or 1-based intervals in sequence() thanks @jamescasbon</p>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id32\" rel=\"nofollow\">0.4.2</a></h3>\n<p>update for latest numpy (can\u2019t close memmap)</p>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id33\" rel=\"nofollow\">0.4.1</a></h3>\n<p>check for duplicate headers.</p>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id34\" rel=\"nofollow\">0.4.0</a></h3>\n<ul>\n<li>add key_fn kwarg to constuctor</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id35\" rel=\"nofollow\">0.3.9</a></h3>\n<ul>\n<li>only require \u2018r\u2019 (not r+) for memory map.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id36\" rel=\"nofollow\">0.3.8</a></h3>\n<ul>\n<li>clean up logic for mixing inplace/non-inplace flattened files.\nif the inplace is available, it is always used.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id37\" rel=\"nofollow\">0.3.6/7</a></h3>\n<ul>\n<li>dont re-flatten the file every time!</li>\n<li>allow spaces before and after the header in the orginal fasta.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id38\" rel=\"nofollow\">0.3.5</a></h3>\n<ul>\n<li>update docs in README.txt for new CLI stuff.</li>\n<li>allow flattening inplace.</li>\n<li>get rid of memmap (results in faster parsing).</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id39\" rel=\"nofollow\">0.3.4</a></h3>\n<ul>\n<li>restore python2.5 compatiblity.</li>\n<li>CLI: add ability to exclude sequence from extract</li>\n<li>CLI: allow spliting based on header.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id40\" rel=\"nofollow\">0.3.3</a></h3>\n<ul>\n<li>include this file in the tar ball (thanks wen h.)</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3><a href=\"#id41\" rel=\"nofollow\">0.3.2</a></h3>\n<ul>\n<li>separate out backends into records.py</li>\n<li>use nosetests (python setup.py nosetests)</li>\n<li>add a TCRecord backend for next-gen sequencing availabe if tc is (easy-)installed.</li>\n<li>improve test coverage.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1050399, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1997d5d93ada9e7f6a5056555fcab50f", "sha256": "e7f9e5a1bb63b6c093e44cd96d1d9d0ccfd645add075eecef5337c5538e1b3c1"}, "downloads": -1, "filename": "pyfasta-0.1.tar.gz", "has_sig": false, "md5_digest": "1997d5d93ada9e7f6a5056555fcab50f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4874, "upload_time": "2009-05-27T22:53:56", "upload_time_iso_8601": "2009-05-27T22:53:56.407597Z", "url": "https://files.pythonhosted.org/packages/96/6f/510f7dc1ebb333301c23ebed17b7e38a0393a765c889cb0320e14769ecfe/pyfasta-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "eee3b5347ad864bc225de678cd95c5d6", "sha256": "54266eb31171319cf03acea16bc2ba9b7ff7b4071af20621aa2ae660b8181bf9"}, "downloads": -1, "filename": "pyfasta-0.2.tar.gz", "has_sig": false, "md5_digest": "eee3b5347ad864bc225de678cd95c5d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4874, "upload_time": "2009-07-14T00:34:28", "upload_time_iso_8601": "2009-07-14T00:34:28.198642Z", "url": "https://files.pythonhosted.org/packages/96/00/a2e6ae0a0a75e688c2fe43c098e28468652c8c327e0b0b5949b469c7b475/pyfasta-0.2.tar.gz", "yanked": false}], "0.2.1": [], "0.2.2": [{"comment_text": "", "digests": {"md5": "c744d505b8483a49834a3d10ab13d949", "sha256": "20d048f5eec76cd55c327863e1a28b983430056b9c1f5c09f45d30c7aa645af8"}, "downloads": -1, "filename": "pyfasta-0.2.2.tar.gz", "has_sig": false, "md5_digest": "c744d505b8483a49834a3d10ab13d949", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5084, "upload_time": "2009-09-09T01:24:11", "upload_time_iso_8601": "2009-09-09T01:24:11.312627Z", "url": "https://files.pythonhosted.org/packages/42/d9/fe2fc89cc25862f5c7fbacb4b0aa0cdff2ff8a47c2d6bd2307639e2cbb2f/pyfasta-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c85a66ebb881d398d653c5081ecbde7b", "sha256": "44ba8eb9b57f4d6ed2be6adfa69f588e197045059228df50fd0414a57a0022a5"}, "downloads": -1, "filename": "pyfasta-0.2.3.tar.gz", "has_sig": false, "md5_digest": "c85a66ebb881d398d653c5081ecbde7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5098, "upload_time": "2009-09-09T01:56:27", "upload_time_iso_8601": "2009-09-09T01:56:27.281089Z", "url": "https://files.pythonhosted.org/packages/c2/66/2b26b456c93bd73627eb60480b5f08639c714a4b2e917cbebed9430b6fae/pyfasta-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "b84159a51ada7c8aeb72d5713f61b4ce", "sha256": "5611b7746210ae7ceb0834fc446b906d950ea149f5744bf3df1a5368bd276469"}, "downloads": -1, "filename": "pyfasta-0.2.4.tar.gz", "has_sig": false, "md5_digest": "b84159a51ada7c8aeb72d5713f61b4ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5782, "upload_time": "2009-09-09T18:02:58", "upload_time_iso_8601": "2009-09-09T18:02:58.270579Z", "url": "https://files.pythonhosted.org/packages/3d/eb/7e52b9c5fcc36ba3876c7ed0738360c1a306d6d8a84335e7280431d93170/pyfasta-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "30b661b94685cece2891143cc16658f4", "sha256": "39245990f2ee58b2ea7fb0083d3c92f2fb8f3afc11317d9e10f1d120d1aa11dc"}, "downloads": -1, "filename": "pyfasta-0.2.5.tar.gz", "has_sig": false, "md5_digest": "30b661b94685cece2891143cc16658f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5955, "upload_time": "2009-09-23T22:28:31", "upload_time_iso_8601": "2009-09-23T22:28:31.740971Z", "url": "https://files.pythonhosted.org/packages/03/b3/3695364dfedbda3a86f46437a6eb0d1307c53c2468a5eda1b7971fa6e7d4/pyfasta-0.2.5.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "a022dcea3a66bd0a9d3b6a30eed4498b", "sha256": "f11e5a65402a814fea8017de07d676fb4f59c0c0099aab99a919994aefd46598"}, "downloads": -1, "filename": "pyfasta-0.2.8.tar.gz", "has_sig": false, "md5_digest": "a022dcea3a66bd0a9d3b6a30eed4498b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6132, "upload_time": "2009-11-06T04:00:47", "upload_time_iso_8601": "2009-11-06T04:00:47.548706Z", "url": "https://files.pythonhosted.org/packages/a3/e9/8c7de2a15185350fd8f02141b29ee2f9d472dd833e4fa30bb2f746287dd9/pyfasta-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "294a1b1c77d48ade89be35507d6a8837", "sha256": "ccfa05be44ac9649f732de9efe3d3fdeda67804f424f51941d9758282512e506"}, "downloads": -1, "filename": "pyfasta-0.2.9.tar.gz", "has_sig": false, "md5_digest": "294a1b1c77d48ade89be35507d6a8837", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6432, "upload_time": "2009-11-10T05:43:20", "upload_time_iso_8601": "2009-11-10T05:43:20.209785Z", "url": "https://files.pythonhosted.org/packages/ef/43/f6c4e3bde5be1c0bfed3bfcea7381b0d4591ec4f39fd45b67ed702f11af1/pyfasta-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ede9f8132286648d7bdaa61254ab32fc", "sha256": "16eba3d604aa678c152a87b69784a4568d694eeeeee24cb896dbb87e2bfad593"}, "downloads": -1, "filename": "pyfasta-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ede9f8132286648d7bdaa61254ab32fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8908, "upload_time": "2009-11-17T01:58:35", "upload_time_iso_8601": "2009-11-17T01:58:35.900065Z", "url": "https://files.pythonhosted.org/packages/5a/25/c90cc171379de216fb89d2bc9a59013974b4bd22eb9fc00baf7dc82330b0/pyfasta-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "6ae284d33c4072779aa1dbbb5acd9855", "sha256": "20d907991f96b525e8257569efa4a5b10b02ceda39fe034c36646257ef366874"}, "downloads": -1, "filename": "pyfasta-0.3.1.tar.gz", "has_sig": false, "md5_digest": "6ae284d33c4072779aa1dbbb5acd9855", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10273, "upload_time": "2009-11-17T17:39:55", "upload_time_iso_8601": "2009-11-17T17:39:55.437189Z", "url": "https://files.pythonhosted.org/packages/dc/6c/635218aff65badb4afe90a25eae153cc68c66837a1594a5a920e0e763505/pyfasta-0.3.1.tar.gz", "yanked": false}], "0.3.2": [], "0.3.3": [{"comment_text": "", "digests": {"md5": "02702007d4139d02d6908e9b92aaab93", "sha256": "06b944ed1e3bd22135712efaf2631f6f035b1f9e55662202fdc4c50ff686b649"}, "downloads": -1, "filename": "pyfasta-0.3.3.tar.gz", "has_sig": false, "md5_digest": "02702007d4139d02d6908e9b92aaab93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10484, "upload_time": "2009-12-06T03:29:52", "upload_time_iso_8601": "2009-12-06T03:29:52.893211Z", "url": "https://files.pythonhosted.org/packages/81/2e/4272da0da1e5295d38667d2b0b64f4305e00d59bf710d1595b94d9c0e1ae/pyfasta-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "5728159962a47f6e2010b2938791a461", "sha256": "8d83adace9dad631ea5763d3eb58a11ef317f23b27280a0be445e7a5e02a0868"}, "downloads": -1, "filename": "pyfasta-0.3.4.tar.gz", "has_sig": false, "md5_digest": "5728159962a47f6e2010b2938791a461", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17159, "upload_time": "2009-12-15T21:37:45", "upload_time_iso_8601": "2009-12-15T21:37:45.159715Z", "url": "https://files.pythonhosted.org/packages/5f/44/1e5e3c27e998ee42a3b49748c121cbf1537aa64b98e738dfe315fb2ff181/pyfasta-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "ffd3e1f818d8a633208e948ff8702bea", "sha256": "e5db7c2c44b65375dd71c80814be906e8a8301c68d8cdbce3e8c6ef9b5ea0c30"}, "downloads": -1, "filename": "pyfasta-0.3.5.tar.gz", "has_sig": false, "md5_digest": "ffd3e1f818d8a633208e948ff8702bea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18841, "upload_time": "2009-12-20T19:50:18", "upload_time_iso_8601": "2009-12-20T19:50:18.250132Z", "url": "https://files.pythonhosted.org/packages/b2/33/702a5c5240fa5c2c9c8b7d5fe3e0a3480a93e69ead74bbb9984ae86801d0/pyfasta-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "06f08324e4e9940c26ccf9eda03b6df2", "sha256": "ad01fd36d8048482673079d3dd6504af73820db0280b8b2354d1feef9c96ab05"}, "downloads": -1, "filename": "pyfasta-0.3.6.tar.gz", "has_sig": false, "md5_digest": "06f08324e4e9940c26ccf9eda03b6df2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19017, "upload_time": "2009-12-21T17:58:59", "upload_time_iso_8601": "2009-12-21T17:58:59.864655Z", "url": "https://files.pythonhosted.org/packages/74/36/6a73f26ba2bb64310895acf97a268cd09811452e2427247b65dcb2ea70d0/pyfasta-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "3d6a1eb46746c632a6f7f4683c8213e7", "sha256": "a4d5bfd6772d03eeadf1c174c6be2834dc03ef6718e2887b1a6522652c30b1bc"}, "downloads": -1, "filename": "pyfasta-0.3.7.tar.gz", "has_sig": false, "md5_digest": "3d6a1eb46746c632a6f7f4683c8213e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19060, "upload_time": "2009-12-21T19:11:15", "upload_time_iso_8601": "2009-12-21T19:11:15.927257Z", "url": "https://files.pythonhosted.org/packages/e0/3f/da777d3a2914423d25fa29dd77bf011f8feef4e0becbdc26b1633ea6b80b/pyfasta-0.3.7.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "a8a0bd3d3b6eb84ceab969af342ecbff", "sha256": "d8d6dbba1cf8ef4e2a05dbaed341732fa7ab1a5971a4b0a9f8a9d7195702e652"}, "downloads": -1, "filename": "pyfasta-0.3.9.tar.gz", "has_sig": false, "md5_digest": "a8a0bd3d3b6eb84ceab969af342ecbff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19411, "upload_time": "2010-03-17T06:34:17", "upload_time_iso_8601": "2010-03-17T06:34:17.867390Z", "url": "https://files.pythonhosted.org/packages/e6/f9/992ffab4639821908163df90d3088e549246aa18208287eb7a2f25cb06b5/pyfasta-0.3.9.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "c978ef60bf8eaeaf6c550f38c475dcb6", "sha256": "cbc356aaae4d17028d4ddba61a9af19fe89f853ec81ee82e4ad39b008e6ba33d"}, "downloads": -1, "filename": "pyfasta-0.4.0.tar.gz", "has_sig": false, "md5_digest": "c978ef60bf8eaeaf6c550f38c475dcb6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14558, "upload_time": "2010-10-25T22:35:29", "upload_time_iso_8601": "2010-10-25T22:35:29.792365Z", "url": "https://files.pythonhosted.org/packages/f0/6e/568699207f56459fd693bd934a3bb2a20a18e04f9a6dc63cc1fe46814749/pyfasta-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "26974822599c14a4faa9d2c40cc0092b", "sha256": "1f68935c8143d7a387ea04eb8461524436e4e4c940bf894d081d2e19c9bebfe4"}, "downloads": -1, "filename": "pyfasta-0.4.1.tar.gz", "has_sig": false, "md5_digest": "26974822599c14a4faa9d2c40cc0092b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14760, "upload_time": "2010-12-01T23:43:38", "upload_time_iso_8601": "2010-12-01T23:43:38.414524Z", "url": "https://files.pythonhosted.org/packages/9c/2e/00756c09dac9535efeaa3fc656690cd2b4c5fac6d8e93238d45872fb1933/pyfasta-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "4531944c48266ca9549ead9a1407d446", "sha256": "91846293d0a9c4988a6ae1533df6b38c2b7d563a94b905ce5ebbba032caf73f2"}, "downloads": -1, "filename": "pyfasta-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4531944c48266ca9549ead9a1407d446", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14967, "upload_time": "2011-04-05T19:01:45", "upload_time_iso_8601": "2011-04-05T19:01:45.298226Z", "url": "https://files.pythonhosted.org/packages/da/94/3466e26c16ee17bac7d107d8dce521090ed4fd439d09166ea19b319646ea/pyfasta-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "6892a5e771da8b47212bb804f7f492b7", "sha256": "4bbd71841ef095bcd26da16620124b04c430677f2e5c8655d7c873da79e99ec2"}, "downloads": -1, "filename": "pyfasta-0.4.3.tar.gz", "has_sig": false, "md5_digest": "6892a5e771da8b47212bb804f7f492b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17886, "upload_time": "2011-05-31T23:02:48", "upload_time_iso_8601": "2011-05-31T23:02:48.598026Z", "url": "https://files.pythonhosted.org/packages/ef/90/b322d12f30a2cab0201ebf4785600ea1ae25ef63376eff072b679f409737/pyfasta-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "abaaf67d77c3cbf83218a2fc3098c03e", "sha256": "0aa9ed7f33bbad9e089077916a9f0ddf6f5f4479f252585a82a9b15e08207a7f"}, "downloads": -1, "filename": "pyfasta-0.4.4.tar.gz", "has_sig": false, "md5_digest": "abaaf67d77c3cbf83218a2fc3098c03e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17899, "upload_time": "2011-10-12T23:07:36", "upload_time_iso_8601": "2011-10-12T23:07:36.729556Z", "url": "https://files.pythonhosted.org/packages/f6/5d/b20d766351d5ede9edcd9d7d8cd59e735ffed4d2a915d1bfc0e304d73afa/pyfasta-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "f9dffb88acec2271a4474a19c92dafa3", "sha256": "b06fe549b653e792db5c1b3ae9d7f48df902b34c2d98e01c09d9d0cbba3f63d0"}, "downloads": -1, "filename": "pyfasta-0.4.5.tar.gz", "has_sig": false, "md5_digest": "f9dffb88acec2271a4474a19c92dafa3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15150, "upload_time": "2012-02-21T22:40:07", "upload_time_iso_8601": "2012-02-21T22:40:07.537292Z", "url": "https://files.pythonhosted.org/packages/85/42/00a87775d81b13093cc9496f587694514fd1ed8a1b5ad03a774e75444050/pyfasta-0.4.5.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "37fc5095238f3403347f103992cd142c", "sha256": "be6180d039ace0e73ae67893195a5aaf1f8ef88b8a5b45398eeefe81bc37405a"}, "downloads": -1, "filename": "pyfasta-0.5.0.tar.gz", "has_sig": false, "md5_digest": "37fc5095238f3403347f103992cd142c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18580, "upload_time": "2013-08-29T19:43:02", "upload_time_iso_8601": "2013-08-29T19:43:02.362846Z", "url": "https://files.pythonhosted.org/packages/61/86/5e3828b3c81bc0313f162ec04a6169330e982f9813cf52af0270d9756360/pyfasta-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "7c0b480e061c87c728404c125e38f700", "sha256": "221a447bdd4fb1d98d0a72c4a438a88e8a597ee0f13882da18399dc68fc4d190"}, "downloads": -1, "filename": "pyfasta-0.5.1.tar.gz", "has_sig": false, "md5_digest": "7c0b480e061c87c728404c125e38f700", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15540, "upload_time": "2013-10-03T00:05:53", "upload_time_iso_8601": "2013-10-03T00:05:53.259883Z", "url": "https://files.pythonhosted.org/packages/7a/04/28d5633d5074a232e0137a7d83f99e0b8da4c18914a055f2a80420c9a107/pyfasta-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "bf61ab997dca329675c3eb2ee7cdfcf2", "sha256": "ab08d75fa90253bc91933d10567d5d9cca2718f4796ef3bdc36b68df0e45b258"}, "downloads": -1, "filename": "pyfasta-0.5.2.tar.gz", "has_sig": false, "md5_digest": "bf61ab997dca329675c3eb2ee7cdfcf2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19072, "upload_time": "2014-04-03T16:45:12", "upload_time_iso_8601": "2014-04-03T16:45:12.989227Z", "url": "https://files.pythonhosted.org/packages/be/3f/794fbcdaaa2113f0a1d16a962463896c1a6bdab77bd63f33a8f16aae6cdc/pyfasta-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf61ab997dca329675c3eb2ee7cdfcf2", "sha256": "ab08d75fa90253bc91933d10567d5d9cca2718f4796ef3bdc36b68df0e45b258"}, "downloads": -1, "filename": "pyfasta-0.5.2.tar.gz", "has_sig": false, "md5_digest": "bf61ab997dca329675c3eb2ee7cdfcf2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19072, "upload_time": "2014-04-03T16:45:12", "upload_time_iso_8601": "2014-04-03T16:45:12.989227Z", "url": "https://files.pythonhosted.org/packages/be/3f/794fbcdaaa2113f0a1d16a962463896c1a6bdab77bd63f33a8f16aae6cdc/pyfasta-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:00 2020"}