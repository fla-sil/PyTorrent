{"info": {"author": "Dan Hoerst", "author_email": "dhoerst1@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "==================\nJSON log formatter\n==================\n\nThe library helps you to store logs in JSON format. Why is it important?\nWell, it facilitates integration with **Logstash**.\n\nUsage example:\n\n.. code-block:: python\n\n    import logging\n\n    import json_log_formatter\n\n    formatter = json_log_formatter.JSONFormatter()\n\n    json_handler = logging.FileHandler(filename='/var/log/my-log.json')\n    json_handler.setFormatter(formatter)\n\n    logger = logging.getLogger('my_json')\n    logger.addHandler(json_handler)\n    logger.setLevel(logging.INFO)\n\n    logger.info('Sign up', extra={'referral_code': '52d6ce'})\n\nThe log file will contain the following log record (inline).\n\n.. code-block:: json\n\n    {\n        \"message\": \"Sign up\",\n        \"time\": \"2015-09-01T06:06:26.524448\",\n        \"referral_code\": \"52d6ce\"\n    }\n\nJSON libraries\n--------------\n\nYou can use **ujson** or **simplejson** instead of built-in **json** library.\nThey are faster and can serialize ``Decimal`` values.\n\n.. code-block:: python\n\n    import json_log_formatter\n    import ujson\n\n    formatter = json_log_formatter.JSONFormatter()\n    formatter.json_lib = ujson\n\nDjango integration\n------------------\n\nHere is an example of how the JSON formatter can be used with Django.\n\n.. code-block:: python\n\n    LOGGING['formatters']['json'] = {\n        '()': 'json_log_formatter.JSONFormatter',\n    }\n    LOGGING['handlers']['json_file'] = {\n        'level': 'INFO',\n        'class': 'logging.FileHandler',\n        'filename': '/var/log/my-log.json',\n        'formatter': 'json',\n    }\n    LOGGING['loggers']['my_json'] = {\n        'handlers': ['json_file'],\n        'level': 'INFO',\n    }\n\nLet's try to log something.\n\n.. code-block:: python\n\n    import logging\n\n    logger = logging.getLogger('my_json')\n\n    logger.info('Sign up', extra={'referral_code': '52d6ce'})\n\nCustom formatter\n----------------\n\nYou will likely need a custom log format. For instance, you want to log\na user ID, an IP address and ``time`` as ``django.utils.timezone.now()``.\nTo do so you should override ``JSONFormatter.json_record()``.\n\n.. code-block:: python\n\n    class CustomisedJSONFormatter(json_log_formatter.JSONFormatter):\n        def json_record(self, message, extra, record):\n            extra['message'] = message\n            extra['user_id'] = current_user_id()\n            extra['ip'] = current_ip()\n            if 'time' not in extra:\n                extra['time'] = django.utils.timezone.now()\n            return extra\n\nLet's say you want ``datetime`` to be serialized as timestamp.\nThen you should use **ujson** (which does it by default) and disable\nISO8601 date mutation.\n\n.. code-block:: python\n\n    class CustomisedJSONFormatter(json_log_formatter.JSONFormatter):\n        json_lib = ujson\n\n        def mutate_json_record(self, json_record):\n            return json_record\n\nTests\n-----\n\n.. code-block:: console\n\n    $ pip install -r requirements.txt\n    $ tox", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danhoerst/json-log-formatter", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-log-formatter-json", "package_url": "https://pypi.org/project/django-log-formatter-json/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-log-formatter-json/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/danhoerst/json-log-formatter"}, "release_url": "https://pypi.org/project/django-log-formatter-json/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Django JSON log formatter", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The library helps you to store logs in JSON format. Why is it important?\nWell, it facilitates integration with <strong>Logstash</strong>.</p>\n<p>Usage example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json_log_formatter</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">json_log_formatter</span><span class=\"o\">.</span><span class=\"n\">JSONFormatter</span><span class=\"p\">()</span>\n\n<span class=\"n\">json_handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">FileHandler</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'/var/log/my-log.json'</span><span class=\"p\">)</span>\n<span class=\"n\">json_handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'my_json'</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">json_handler</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Sign up'</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'referral_code'</span><span class=\"p\">:</span> <span class=\"s1\">'52d6ce'</span><span class=\"p\">})</span>\n</pre>\n<p>The log file will contain the following log record (inline).</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"message\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Sign up\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"time\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2015-09-01T06:06:26.524448\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"referral_code\"</span><span class=\"p\">:</span> <span class=\"s2\">\"52d6ce\"</span>\n<span class=\"p\">}</span>\n</pre>\n<div id=\"json-libraries\">\n<h2>JSON libraries</h2>\n<p>You can use <strong>ujson</strong> or <strong>simplejson</strong> instead of built-in <strong>json</strong> library.\nThey are faster and can serialize <tt>Decimal</tt> values.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json_log_formatter</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ujson</span>\n\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">json_log_formatter</span><span class=\"o\">.</span><span class=\"n\">JSONFormatter</span><span class=\"p\">()</span>\n<span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"n\">json_lib</span> <span class=\"o\">=</span> <span class=\"n\">ujson</span>\n</pre>\n</div>\n<div id=\"django-integration\">\n<h2>Django integration</h2>\n<p>Here is an example of how the JSON formatter can be used with Django.</p>\n<pre><span class=\"n\">LOGGING</span><span class=\"p\">[</span><span class=\"s1\">'formatters'</span><span class=\"p\">][</span><span class=\"s1\">'json'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'()'</span><span class=\"p\">:</span> <span class=\"s1\">'json_log_formatter.JSONFormatter'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">LOGGING</span><span class=\"p\">[</span><span class=\"s1\">'handlers'</span><span class=\"p\">][</span><span class=\"s1\">'json_file'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"s1\">'logging.FileHandler'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'filename'</span><span class=\"p\">:</span> <span class=\"s1\">'/var/log/my-log.json'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'formatter'</span><span class=\"p\">:</span> <span class=\"s1\">'json'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">LOGGING</span><span class=\"p\">[</span><span class=\"s1\">'loggers'</span><span class=\"p\">][</span><span class=\"s1\">'my_json'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'json_file'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'level'</span><span class=\"p\">:</span> <span class=\"s1\">'INFO'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Let\u2019s try to log something.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'my_json'</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Sign up'</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'referral_code'</span><span class=\"p\">:</span> <span class=\"s1\">'52d6ce'</span><span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"custom-formatter\">\n<h2>Custom formatter</h2>\n<p>You will likely need a custom log format. For instance, you want to log\na user ID, an IP address and <tt>time</tt> as <tt>django.utils.timezone.now()</tt>.\nTo do so you should override <tt>JSONFormatter.json_record()</tt>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomisedJSONFormatter</span><span class=\"p\">(</span><span class=\"n\">json_log_formatter</span><span class=\"o\">.</span><span class=\"n\">JSONFormatter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">json_record</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"p\">):</span>\n        <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'message'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">message</span>\n        <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current_user_id</span><span class=\"p\">()</span>\n        <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'ip'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current_ip</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"s1\">'time'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">extra</span><span class=\"p\">:</span>\n            <span class=\"n\">extra</span><span class=\"p\">[</span><span class=\"s1\">'time'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">extra</span>\n</pre>\n<p>Let\u2019s say you want <tt>datetime</tt> to be serialized as timestamp.\nThen you should use <strong>ujson</strong> (which does it by default) and disable\nISO8601 date mutation.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomisedJSONFormatter</span><span class=\"p\">(</span><span class=\"n\">json_log_formatter</span><span class=\"o\">.</span><span class=\"n\">JSONFormatter</span><span class=\"p\">):</span>\n    <span class=\"n\">json_lib</span> <span class=\"o\">=</span> <span class=\"n\">ujson</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">mutate_json_record</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">json_record</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">json_record</span>\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<pre><span class=\"gp\">$</span> pip install -r requirements.txt\n<span class=\"gp\">$</span> tox\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2182217, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "db5e008e886c15058e5cd9a27cd411cc", "sha256": "86606aaf838cbfb9f52aee2a828b0ec41825b525bf04813d4e10e7ce04420bec"}, "downloads": -1, "filename": "django-log-formatter-json-0.1.0.tar.gz", "has_sig": false, "md5_digest": "db5e008e886c15058e5cd9a27cd411cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2810, "upload_time": "2016-06-22T22:08:45", "upload_time_iso_8601": "2016-06-22T22:08:45.322846Z", "url": "https://files.pythonhosted.org/packages/f8/28/697fbf041c0f38b7e71a7c4bf4666d2dabf7ce8922a6759dcbe847bbc74c/django-log-formatter-json-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "baf0ce2d7ef7803ea66715ebaacdb357", "sha256": "8c7223b9af8d5111821b4b3be4d7346daed746f322f894768a918c58bf1f4bb3"}, "downloads": -1, "filename": "django-log-formatter-json-0.2.0.tar.gz", "has_sig": false, "md5_digest": "baf0ce2d7ef7803ea66715ebaacdb357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2818, "upload_time": "2016-06-22T22:12:05", "upload_time_iso_8601": "2016-06-22T22:12:05.335590Z", "url": "https://files.pythonhosted.org/packages/42/76/a92d3887c501e8eda3406314b11fcb2b0c968921eb114ac50af2f7d7e6c7/django-log-formatter-json-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "baf0ce2d7ef7803ea66715ebaacdb357", "sha256": "8c7223b9af8d5111821b4b3be4d7346daed746f322f894768a918c58bf1f4bb3"}, "downloads": -1, "filename": "django-log-formatter-json-0.2.0.tar.gz", "has_sig": false, "md5_digest": "baf0ce2d7ef7803ea66715ebaacdb357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2818, "upload_time": "2016-06-22T22:12:05", "upload_time_iso_8601": "2016-06-22T22:12:05.335590Z", "url": "https://files.pythonhosted.org/packages/42/76/a92d3887c501e8eda3406314b11fcb2b0c968921eb114ac50af2f7d7e6c7/django-log-formatter-json-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:17 2020"}