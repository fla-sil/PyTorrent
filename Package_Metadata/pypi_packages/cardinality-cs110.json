{"info": {"author": "Abdul Qadir", "author_email": "abdul.qadir@minerva.kgi", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Cardinality Estimation using the Flajolet-Martin algorithm #\n---\nImagine if you have data and you wish to know its cardinality (the number of unique elements present).Calcalating the cardinality can have multiple uses, e.g to count the number of unique visitors on a website. \n\nYou could code a simple algorithm to loop through the dataset and check whether each element only occurs once or not, but this isn't feasible if you have a gigantic dataset with terabytes worth of data which can not even fit in your computer's memory. To solve this problem, one can use Cardinality Estimators which give a very close estimate of a dataset's cardinality at the cost of minimal memory usage.\n\n## The Idea Behind it ##\n---\nProvided that you have a large dataset, the probability of seeing a hashed item (converted to its binary form) which ends with an *x* amount of zeroes is `2^x`. For example, if you need 3 zeroes at the end, the probability is `0.5 * 0.5 * 0.5 = 0.125` because each bit is either a 0 or a 1. Hence, on average, you would get one number with 3 zeroes at the end out of `1/0.5^x` numbers which is the equivalent of `2^x`. This is another simple method of estimating the cardinality, but it can give drastically inaccurate results if a hashed value has too many zeroes, and its estimates are in the power of 2 (256, 512, 1024...). One improvement on this method is to use various hash functions and average the estimates given to us, but a variety of hash functions is computationally expensive. To bypass this computational constraint, we can use a method called stochastic averaging where we divide the output of a single hash function into two parts. The number of buckets where we store the maximum number of 0's denoted by *m* and number of bits used to calculate which bucket we store our maximum number of 0's denoted by *k*. The accuracy of this algorithm, according to the paper it is based on, boils down to 1.3/sqrt(m) where m is the number of buckets so depending on the accuracy you want, you can vary the value of m but not to extremely large values. The reason being that your value of *k* (which is the number of bits used in the hashed value to calculate the bucket index) is determined by log(m), and you don't want to use a large number of bits for *k* because it reduces accuracy. For example, if you have a binary value of 10000100000 and you use a value of 1024 for m, then you only get 1 as the maximum number of 0's instead of 5.\n\nAn example of values for m/k for a binary input of 10010000 using *k* as 2 would result in using the left 2 most bits to calculate the bucket number (10 corresponds to bucket no.2) and using the remaining bits to count the number of ending 0's (which are 4 in this case), and then storing the number of ending 0's in that bucket.\n\n**Note: This algorithm produces predictably larger estimates; hence, to correct for the bias, the final output is multiplied by a constant of 0.79402 which was derived through statistical analyses by Mariannae Durand and Phillipie Flajolet**\n\n# Usage #\n---\n```python\nimport cardinality_cs110\ndata = ['sample data here']\nprint (cardinality_cs110.flajolet_martin(data,k))\n'output is the estimated number of unique elements'\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DarthQadir/cardinality_cs110.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cardinality-cs110", "package_url": "https://pypi.org/project/cardinality-cs110/", "platform": "", "project_url": "https://pypi.org/project/cardinality-cs110/", "project_urls": {"Homepage": "https://github.com/DarthQadir/cardinality_cs110.git"}, "release_url": "https://pypi.org/project/cardinality-cs110/0.0.9/", "requires_dist": null, "requires_python": "", "summary": "A cardinality estimator using the Flajolet-Martin algorithm", "version": "0.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cardinality Estimation using the Flajolet-Martin algorithm</h1>\n<hr>\n<p>Imagine if you have data and you wish to know its cardinality (the number of unique elements present).Calcalating the cardinality can have multiple uses, e.g to count the number of unique visitors on a website.</p>\n<p>You could code a simple algorithm to loop through the dataset and check whether each element only occurs once or not, but this isn't feasible if you have a gigantic dataset with terabytes worth of data which can not even fit in your computer's memory. To solve this problem, one can use Cardinality Estimators which give a very close estimate of a dataset's cardinality at the cost of minimal memory usage.</p>\n<h2>The Idea Behind it</h2>\n<hr>\n<p>Provided that you have a large dataset, the probability of seeing a hashed item (converted to its binary form) which ends with an <em>x</em> amount of zeroes is <code>2^x</code>. For example, if you need 3 zeroes at the end, the probability is <code>0.5 * 0.5 * 0.5 = 0.125</code> because each bit is either a 0 or a 1. Hence, on average, you would get one number with 3 zeroes at the end out of <code>1/0.5^x</code> numbers which is the equivalent of <code>2^x</code>. This is another simple method of estimating the cardinality, but it can give drastically inaccurate results if a hashed value has too many zeroes, and its estimates are in the power of 2 (256, 512, 1024...). One improvement on this method is to use various hash functions and average the estimates given to us, but a variety of hash functions is computationally expensive. To bypass this computational constraint, we can use a method called stochastic averaging where we divide the output of a single hash function into two parts. The number of buckets where we store the maximum number of 0's denoted by <em>m</em> and number of bits used to calculate which bucket we store our maximum number of 0's denoted by <em>k</em>. The accuracy of this algorithm, according to the paper it is based on, boils down to 1.3/sqrt(m) where m is the number of buckets so depending on the accuracy you want, you can vary the value of m but not to extremely large values. The reason being that your value of <em>k</em> (which is the number of bits used in the hashed value to calculate the bucket index) is determined by log(m), and you don't want to use a large number of bits for <em>k</em> because it reduces accuracy. For example, if you have a binary value of 10000100000 and you use a value of 1024 for m, then you only get 1 as the maximum number of 0's instead of 5.</p>\n<p>An example of values for m/k for a binary input of 10010000 using <em>k</em> as 2 would result in using the left 2 most bits to calculate the bucket number (10 corresponds to bucket no.2) and using the remaining bits to count the number of ending 0's (which are 4 in this case), and then storing the number of ending 0's in that bucket.</p>\n<p><strong>Note: This algorithm produces predictably larger estimates; hence, to correct for the bias, the final output is multiplied by a constant of 0.79402 which was derived through statistical analyses by Mariannae Durand and Phillipie Flajolet</strong></p>\n<h1>Usage</h1>\n<hr>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">cardinality_cs110</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'sample data here'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span> <span class=\"p\">(</span><span class=\"n\">cardinality_cs110</span><span class=\"o\">.</span><span class=\"n\">flajolet_martin</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">))</span>\n<span class=\"s1\">'output is the estimated number of unique elements'</span>\n</pre>\n\n          </div>"}, "last_serial": 4623665, "releases": {"0.0.5": [{"comment_text": "", "digests": {"md5": "3198657099dc2d12e8e41c05059c43c2", "sha256": "82d737d73936ec44725df16290e15896081d6d6154ba78f8c19e76abb334bec2"}, "downloads": -1, "filename": "cardinality_cs110-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3198657099dc2d12e8e41c05059c43c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4481, "upload_time": "2018-12-20T20:24:52", "upload_time_iso_8601": "2018-12-20T20:24:52.773297Z", "url": "https://files.pythonhosted.org/packages/45/c1/7d04ae2fa15e4ed4ecf807763b719908b7ace8f4c534acef86c10b400d8e/cardinality_cs110-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49cf44ca3160971f223de7ef9a89db8f", "sha256": "93f89af15fe934e798b7d0022c78e04e8c4cad1467e53582002eef3630f4bb87"}, "downloads": -1, "filename": "cardinality_cs110-0.0.5.tar.gz", "has_sig": false, "md5_digest": "49cf44ca3160971f223de7ef9a89db8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3076, "upload_time": "2018-12-20T20:24:56", "upload_time_iso_8601": "2018-12-20T20:24:56.215963Z", "url": "https://files.pythonhosted.org/packages/41/84/5db93821cd9542f6e51d9c93566df22f4e94532af62319dc7bb74b61ceff/cardinality_cs110-0.0.5.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "007206f4d66faaf327498beab61ee704", "sha256": "640c0a203cfcf84699e0c3ff06196bafb7854cf579fa37abe1b46d3c44a21db4"}, "downloads": -1, "filename": "cardinality_cs110-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "007206f4d66faaf327498beab61ee704", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5017, "upload_time": "2018-12-20T20:38:27", "upload_time_iso_8601": "2018-12-20T20:38:27.328508Z", "url": "https://files.pythonhosted.org/packages/ec/8d/e63e5dc1bd7b87c3a9b7c7a8f84ec1f2c2040a5b267de9d3b320e87256be/cardinality_cs110-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "731cda6af5e6ccf8a4184f430fc216d0", "sha256": "e3fba58570156446dcab363724bd239ecde52e030c48e1eb72f2d0352c5213cc"}, "downloads": -1, "filename": "cardinality_cs110-0.0.7.tar.gz", "has_sig": false, "md5_digest": "731cda6af5e6ccf8a4184f430fc216d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3043, "upload_time": "2018-12-20T20:38:30", "upload_time_iso_8601": "2018-12-20T20:38:30.930782Z", "url": "https://files.pythonhosted.org/packages/16/48/7b167bd18947f7d455446ea22ac36040e4d79cfe94d38d1817aa21f9dbd4/cardinality_cs110-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "663832c986862594e1ada3bb1b064035", "sha256": "a867994564d45f138b954f6a00ecadc027454ff61304ced75403165d1ab6c196"}, "downloads": -1, "filename": "cardinality_cs110-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "663832c986862594e1ada3bb1b064035", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5063, "upload_time": "2018-12-21T05:34:48", "upload_time_iso_8601": "2018-12-21T05:34:48.466168Z", "url": "https://files.pythonhosted.org/packages/ef/13/702931dcc2308d3a50b0f893062bbcb6c469750600926b245d1b4f47dfdb/cardinality_cs110-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f49b3dd2daaf3153358253c87de18b4", "sha256": "314e3881fc56463b0cb5474af562eefd252ac6ce8eea5290cbd199f94b9453c1"}, "downloads": -1, "filename": "cardinality_cs110-0.0.8.tar.gz", "has_sig": false, "md5_digest": "5f49b3dd2daaf3153358253c87de18b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3087, "upload_time": "2018-12-21T05:34:49", "upload_time_iso_8601": "2018-12-21T05:34:49.636452Z", "url": "https://files.pythonhosted.org/packages/34/0f/f58bc42e649fec87824f41be49af2cf6939781d0a45dbdd6b914dd40d282/cardinality_cs110-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "017bde0837f343798dbbee3733b4d9e7", "sha256": "3fd9b9a5f49dee542c5e5f738ce4ae261d22f662f51e9b4c209f53f277559cc3"}, "downloads": -1, "filename": "cardinality_cs110-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "017bde0837f343798dbbee3733b4d9e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5061, "upload_time": "2018-12-21T05:45:12", "upload_time_iso_8601": "2018-12-21T05:45:12.574789Z", "url": "https://files.pythonhosted.org/packages/e6/e1/79b1628152bbfbb4e9074233036192adc452fcdead2a0ffd923ef8489ff7/cardinality_cs110-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b202e61d5eb6388e237a65e862ee33aa", "sha256": "503b00837e5fdfd2b8d7816e1fda82c3b6b71932d12978d8de25248c623ae79b"}, "downloads": -1, "filename": "cardinality_cs110-0.0.9.tar.gz", "has_sig": false, "md5_digest": "b202e61d5eb6388e237a65e862ee33aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3081, "upload_time": "2018-12-21T05:45:13", "upload_time_iso_8601": "2018-12-21T05:45:13.825427Z", "url": "https://files.pythonhosted.org/packages/b3/79/d95ce2f4da833c6acc3f9691c769a35c935d785d9bdcb43ad244ae1cd6aa/cardinality_cs110-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "017bde0837f343798dbbee3733b4d9e7", "sha256": "3fd9b9a5f49dee542c5e5f738ce4ae261d22f662f51e9b4c209f53f277559cc3"}, "downloads": -1, "filename": "cardinality_cs110-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "017bde0837f343798dbbee3733b4d9e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5061, "upload_time": "2018-12-21T05:45:12", "upload_time_iso_8601": "2018-12-21T05:45:12.574789Z", "url": "https://files.pythonhosted.org/packages/e6/e1/79b1628152bbfbb4e9074233036192adc452fcdead2a0ffd923ef8489ff7/cardinality_cs110-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b202e61d5eb6388e237a65e862ee33aa", "sha256": "503b00837e5fdfd2b8d7816e1fda82c3b6b71932d12978d8de25248c623ae79b"}, "downloads": -1, "filename": "cardinality_cs110-0.0.9.tar.gz", "has_sig": false, "md5_digest": "b202e61d5eb6388e237a65e862ee33aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3081, "upload_time": "2018-12-21T05:45:13", "upload_time_iso_8601": "2018-12-21T05:45:13.825427Z", "url": "https://files.pythonhosted.org/packages/b3/79/d95ce2f4da833c6acc3f9691c769a35c935d785d9bdcb43ad244ae1cd6aa/cardinality_cs110-0.0.9.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:25 2020"}