{"info": {"author": "Anthony Post", "author_email": "postanthony3000@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Tonberry <img src=\"https://raw.githubusercontent.com/Ayehavgunne/Tonberry/master/Tonberry.png\" width=\"100\" title=\"Tonberry\">\n\nAn ASGI compliant web microframework that takes a class based approach to\nrouting. Influenced by [CherryPy](https://cherrypy.org/) but made compatible\nwith asyncio. A companion ASGI server named **Qactuar** was spawned from this\nproject. Check it out [here](https://github.com/Ayehavgunne/Qactuar)!\n\n## Installing\n\n```bash\n$ pip install tonberry\n```\n\n## Getting Started\n\n### 2 Minute App Example\n\n```python\nfrom tonberry import quick_start, expose\n\nclass Root:\n    @expose.get\n    async def index(self):\n        return \"Hello, world!\"\n\nquick_start(Root)\n\n# Go to http://localhost:8080\n```\n\n### Features Example\n\n```python\nimport asyncio\nfrom dataclasses import dataclass\n\nimport uvicorn\n\nfrom tonberry import create_app, expose, File, websocket\nfrom tonberry.content_types import TextPlain, TextHTML, ApplicationJson\n\n\n@dataclass\nclass Request:\n    arg1: int\n    arg2: str\n\n\n@dataclass\nclass Response:\n    param1: str\n    param2: float\n\n\nclass SubPage:\n    @expose.post\n    async def index(self, request: Request) -> Response:\n        \"\"\"\n        With type hints indicating a dataclass object, the body of the request\n        will automatically be deserialized into that object, even if it\n        contains nested dataclasses and types will be checked thanks to the\n        library dacite. Returning a dataclass will result in it being serialized\n        into a JSON string and the content-type header will be set to\n        application/json.\n\n        URL: http://127.0.0.1:8888/subpage\n        POST body: {\"arg1\": 3, \"arg2\": \"something\"}\n        Response body: {\"param1\": \"SOMETHING\", \"param2\": 4.5}\n        \"\"\"\n        return Response(request.arg2.upper(), request.arg1 * 1.5)\n\n    @expose.get\n    async def hello(self, name: str) -> TextPlain:\n        \"\"\"\n        Arguments to methods can come from the leftover parts of the URI after\n        the route has found a match, querystrings, form-url-encoded data or json\n        strings.\n\n        URL: http://127.0.0.1:8888/subpage/hello/{name}\n        \"\"\"\n        return f\"Hi {name}\"\n\n\nclass Root:\n    subpage = SubPage()\n\n    @expose.get\n    async def index(self) -> TextPlain:\n        \"\"\"\n        The index method behaves similarly to an index.html file in most web\n        servers.\n\n        URL: http://127.0.0.1:8888\n        \"\"\"\n        return \"Hello, world!\"\n\n    @expose.get('somepage')\n    async def some_page(self) -> TextHTML:\n        \"\"\"\n        Returning a file like object result in the file contents being read and\n        put into the response body.\n\n        The expose decorator methods can take an optional argument for the name\n        you would like to use for the route if you don't want it to be the name\n        of the method.\n\n        To indicate what the content-type header you want to set then use a type\n        hints for the return value from tonberry.content_types. This feature may\n        or may not stay as part of the project. It will not overwrite any\n        content type set manually inside the method.\n\n        URL: http://127.0.0.1:8888/somepage\n        \"\"\"\n        return File('some_page.html')\n\n    @expose.post\n    async def do_a_thing(self, data1: int, data2: str) -> ApplicationJson:\n        \"\"\"\n        Even without a dataclass the individule top level keys in JSON object\n        will be passed as arguments. It is possible to return strings, UTF-8\n        encoded bytes, integers, file like objects, dicts or lists (as long as\n        they are JSON serializable) and dataclasses.\n\n        URL: http://127.0.0.1:8888/do_a_thing\n        POST body: {\"data1\": 2, \"data2\": \"things to do\"}\n        \"\"\"\n        complete, success, result = await do_that_thing(data1, data2)\n        return {\"completed\": complete, \"outcome\": success, \"body\": result}\n\n    @expose.websocket\n    async def ws(self):\n        \"\"\"\n        Basic example of using a websocket. Sending and receiving are done\n        through the websocket object.\n        \n        URL: ws://127.0.0.1:8888/ws\n        \"\"\"\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"echo {data}\")\n        count = 0\n        while websocket.client_is_connected:\n            count += 1\n            await websocket.send_text(f\"Hello {count}\")\n            await asyncio.sleep(3)\n\n\nif __name__ == \"__main__\":\n    app = create_app(root=Root)\n    app.add_static_route(path_root=\"./static_files\", route=\"static\")\n    # Using uvicorn here but any ASGI server will work just as well\n    uvicorn.run(app, host=\"127.0.0.1\", port=8888)\n```\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of\nconduct, and the process for submitting pull requests.\n\n## Versioning\n\n[SemVer](http://semver.org/) is used for versioning. For the versions available,\nsee the [tags on this repository](https://github.com/Ayehavgunne/Tonberry/tags).\n\n## Authors\n\n* **Anthony Post** - [Ayehavgunne](https://github.com/Ayehavgunne)\n\n## License\n\nThis project is licensed under the MIT License - see the\n[LICENSE.txt](LICENSE.txt) file for details\n\n## Acknowledgments\n\n* CherryPy\n* Quart\n* Starlette\n* uvicorn\n\n## TODO\n- JWT integration\n- Jinja2 integration\n- Authentication\n- URL generation\n- Configuration\n- Tests\n- Documentation", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ayehavgunne/Tonberry/", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "Tonberry", "package_url": "https://pypi.org/project/Tonberry/", "platform": "", "project_url": "https://pypi.org/project/Tonberry/", "project_urls": {"Homepage": "https://github.com/Ayehavgunne/Tonberry/"}, "release_url": "https://pypi.org/project/Tonberry/0.1.1/", "requires_dist": null, "requires_python": ">=3.7", "summary": "ASGI compliant web microframework", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tonberry <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d28143896ef25b93fd7a83e20c1f709efed0b88/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f41796568617667756e6e652f546f6e62657272792f6d61737465722f546f6e62657272792e706e67\" width=\"100\"></h1>\n<p>An ASGI compliant web microframework that takes a class based approach to\nrouting. Influenced by <a href=\"https://cherrypy.org/\" rel=\"nofollow\">CherryPy</a> but made compatible\nwith asyncio. A companion ASGI server named <strong>Qactuar</strong> was spawned from this\nproject. Check it out <a href=\"https://github.com/Ayehavgunne/Qactuar\" rel=\"nofollow\">here</a>!</p>\n<h2>Installing</h2>\n<pre>$ pip install tonberry\n</pre>\n<h2>Getting Started</h2>\n<h3>2 Minute App Example</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tonberry</span> <span class=\"kn\">import</span> <span class=\"n\">quick_start</span><span class=\"p\">,</span> <span class=\"n\">expose</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Root</span><span class=\"p\">:</span>\n    <span class=\"nd\">@expose</span><span class=\"o\">.</span><span class=\"n\">get</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Hello, world!\"</span>\n\n<span class=\"n\">quick_start</span><span class=\"p\">(</span><span class=\"n\">Root</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Go to http://localhost:8080</span>\n</pre>\n<h3>Features Example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">uvicorn</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tonberry</span> <span class=\"kn\">import</span> <span class=\"n\">create_app</span><span class=\"p\">,</span> <span class=\"n\">expose</span><span class=\"p\">,</span> <span class=\"n\">File</span><span class=\"p\">,</span> <span class=\"n\">websocket</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tonberry.content_types</span> <span class=\"kn\">import</span> <span class=\"n\">TextPlain</span><span class=\"p\">,</span> <span class=\"n\">TextHTML</span><span class=\"p\">,</span> <span class=\"n\">ApplicationJson</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Request</span><span class=\"p\">:</span>\n    <span class=\"n\">arg1</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">arg2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Response</span><span class=\"p\">:</span>\n    <span class=\"n\">param1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">param2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SubPage</span><span class=\"p\">:</span>\n    <span class=\"nd\">@expose</span><span class=\"o\">.</span><span class=\"n\">post</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Response</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        With type hints indicating a dataclass object, the body of the request</span>\n<span class=\"sd\">        will automatically be deserialized into that object, even if it</span>\n<span class=\"sd\">        contains nested dataclasses and types will be checked thanks to the</span>\n<span class=\"sd\">        library dacite. Returning a dataclass will result in it being serialized</span>\n<span class=\"sd\">        into a JSON string and the content-type header will be set to</span>\n<span class=\"sd\">        application/json.</span>\n\n<span class=\"sd\">        URL: http://127.0.0.1:8888/subpage</span>\n<span class=\"sd\">        POST body: {\"arg1\": 3, \"arg2\": \"something\"}</span>\n<span class=\"sd\">        Response body: {\"param1\": \"SOMETHING\", \"param2\": 4.5}</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">arg2</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">(),</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">arg1</span> <span class=\"o\">*</span> <span class=\"mf\">1.5</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@expose</span><span class=\"o\">.</span><span class=\"n\">get</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TextPlain</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Arguments to methods can come from the leftover parts of the URI after</span>\n<span class=\"sd\">        the route has found a match, querystrings, form-url-encoded data or json</span>\n<span class=\"sd\">        strings.</span>\n\n<span class=\"sd\">        URL: http://127.0.0.1:8888/subpage/hello/{name}</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hi </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Root</span><span class=\"p\">:</span>\n    <span class=\"n\">subpage</span> <span class=\"o\">=</span> <span class=\"n\">SubPage</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@expose</span><span class=\"o\">.</span><span class=\"n\">get</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TextPlain</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        The index method behaves similarly to an index.html file in most web</span>\n<span class=\"sd\">        servers.</span>\n\n<span class=\"sd\">        URL: http://127.0.0.1:8888</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Hello, world!\"</span>\n\n    <span class=\"nd\">@expose</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'somepage'</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">some_page</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TextHTML</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Returning a file like object result in the file contents being read and</span>\n<span class=\"sd\">        put into the response body.</span>\n\n<span class=\"sd\">        The expose decorator methods can take an optional argument for the name</span>\n<span class=\"sd\">        you would like to use for the route if you don't want it to be the name</span>\n<span class=\"sd\">        of the method.</span>\n\n<span class=\"sd\">        To indicate what the content-type header you want to set then use a type</span>\n<span class=\"sd\">        hints for the return value from tonberry.content_types. This feature may</span>\n<span class=\"sd\">        or may not stay as part of the project. It will not overwrite any</span>\n<span class=\"sd\">        content type set manually inside the method.</span>\n\n<span class=\"sd\">        URL: http://127.0.0.1:8888/somepage</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"s1\">'some_page.html'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@expose</span><span class=\"o\">.</span><span class=\"n\">post</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">do_a_thing</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data1</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ApplicationJson</span><span class=\"p\">:</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Even without a dataclass the individule top level keys in JSON object</span>\n<span class=\"sd\">        will be passed as arguments. It is possible to return strings, UTF-8</span>\n<span class=\"sd\">        encoded bytes, integers, file like objects, dicts or lists (as long as</span>\n<span class=\"sd\">        they are JSON serializable) and dataclasses.</span>\n\n<span class=\"sd\">        URL: http://127.0.0.1:8888/do_a_thing</span>\n<span class=\"sd\">        POST body: {\"data1\": 2, \"data2\": \"things to do\"}</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">complete</span><span class=\"p\">,</span> <span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">do_that_thing</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"completed\"</span><span class=\"p\">:</span> <span class=\"n\">complete</span><span class=\"p\">,</span> <span class=\"s2\">\"outcome\"</span><span class=\"p\">:</span> <span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"n\">result</span><span class=\"p\">}</span>\n\n    <span class=\"nd\">@expose</span><span class=\"o\">.</span><span class=\"n\">websocket</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">ws</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Basic example of using a websocket. Sending and receiving are done</span>\n<span class=\"sd\">        through the websocket object.</span>\n<span class=\"sd\">        </span>\n<span class=\"sd\">        URL: ws://127.0.0.1:8888/ws</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">receive_text</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">send_text</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"echo </span><span class=\"si\">{</span><span class=\"n\">data</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">client_is_connected</span><span class=\"p\">:</span>\n            <span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">await</span> <span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">send_text</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">count</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"n\">Root</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_static_route</span><span class=\"p\">(</span><span class=\"n\">path_root</span><span class=\"o\">=</span><span class=\"s2\">\"./static_files\"</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"s2\">\"static\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Using uvicorn here but any ASGI server will work just as well</span>\n    <span class=\"n\">uvicorn</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8888</span><span class=\"p\">)</span>\n</pre>\n<h2>Contributing</h2>\n<p>Please read <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a> for details on our code of\nconduct, and the process for submitting pull requests.</p>\n<h2>Versioning</h2>\n<p><a href=\"http://semver.org/\" rel=\"nofollow\">SemVer</a> is used for versioning. For the versions available,\nsee the <a href=\"https://github.com/Ayehavgunne/Tonberry/tags\" rel=\"nofollow\">tags on this repository</a>.</p>\n<h2>Authors</h2>\n<ul>\n<li><strong>Anthony Post</strong> - <a href=\"https://github.com/Ayehavgunne\" rel=\"nofollow\">Ayehavgunne</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the\n<a href=\"LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a> file for details</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>CherryPy</li>\n<li>Quart</li>\n<li>Starlette</li>\n<li>uvicorn</li>\n</ul>\n<h2>TODO</h2>\n<ul>\n<li>JWT integration</li>\n<li>Jinja2 integration</li>\n<li>Authentication</li>\n<li>URL generation</li>\n<li>Configuration</li>\n<li>Tests</li>\n<li>Documentation</li>\n</ul>\n\n          </div>"}, "last_serial": 6643733, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "87fa664057a4e76275f2089a0d9d19b1", "sha256": "d1599d3c25ef50fc18e4372892a24bd6222de87d37f0d54605850f7788e4eb9e"}, "downloads": -1, "filename": "Tonberry-0.0.2.tar.gz", "has_sig": false, "md5_digest": "87fa664057a4e76275f2089a0d9d19b1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16696, "upload_time": "2020-01-26T20:08:23", "upload_time_iso_8601": "2020-01-26T20:08:23.935856Z", "url": "https://files.pythonhosted.org/packages/d7/42/27e4280f7673252672f80b48d21eae6d859094b14d581240dfa99bc2cf02/Tonberry-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1f8d76825fc0dae0bc8984dc10f3e2dc", "sha256": "f86e66d2369eeb52977451bfcb1332f03771e8634ee88dd97c29f5d0c35e812f"}, "downloads": -1, "filename": "Tonberry-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1f8d76825fc0dae0bc8984dc10f3e2dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16772, "upload_time": "2020-02-04T01:21:08", "upload_time_iso_8601": "2020-02-04T01:21:08.268279Z", "url": "https://files.pythonhosted.org/packages/ec/17/e90323bd5a381e0f7991ce59d0983d1de6a92719b5de78031e5a8d3fb049/Tonberry-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "6f3159fadd0b3e5d0b9250d0bfc4bd23", "sha256": "81b154a209c3afb32a7f99f0fba81d0a27efa1fa3ea273f1dbd19c84d9f2a80c"}, "downloads": -1, "filename": "Tonberry-0.0.4.tar.gz", "has_sig": false, "md5_digest": "6f3159fadd0b3e5d0b9250d0bfc4bd23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16828, "upload_time": "2020-02-04T01:33:50", "upload_time_iso_8601": "2020-02-04T01:33:50.944134Z", "url": "https://files.pythonhosted.org/packages/f6/2a/2c088fc1b745ec0b0241e18ac85174f1c898886e975c3d2b1caa71dbb85e/Tonberry-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "9d08c15e7c04c6a5899ad91359a5ea71", "sha256": "04717d04076ae97f45f5db673edfc2a43576e28065d51521e2e7a853a95d1922"}, "downloads": -1, "filename": "Tonberry-0.0.5.tar.gz", "has_sig": false, "md5_digest": "9d08c15e7c04c6a5899ad91359a5ea71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16915, "upload_time": "2020-02-04T01:55:43", "upload_time_iso_8601": "2020-02-04T01:55:43.912326Z", "url": "https://files.pythonhosted.org/packages/d2/a6/63d62418a983ac2595b3d1481193beb125e5249f131d1736e6f49f3eb9f1/Tonberry-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "e6da2a370eee9f3e810cb71e4e08213d", "sha256": "d27170ae735eb927ab1b03b1da3348e26bf88d44c25f0892f90cfa358bc8098d"}, "downloads": -1, "filename": "Tonberry-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e6da2a370eee9f3e810cb71e4e08213d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17856, "upload_time": "2020-02-13T03:53:34", "upload_time_iso_8601": "2020-02-13T03:53:34.887477Z", "url": "https://files.pythonhosted.org/packages/a3/98/2c25d90c8688a63951f0c3021f5fcb6f4a7ddf14845fcd536c7470902a3b/Tonberry-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dde54225d2708ffaa360f84149065eaa", "sha256": "8c58091aab72501172475ba8904e2456921a3b313bf52321a82c7e6a55c3dcec"}, "downloads": -1, "filename": "Tonberry-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dde54225d2708ffaa360f84149065eaa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17861, "upload_time": "2020-02-17T02:53:20", "upload_time_iso_8601": "2020-02-17T02:53:20.215997Z", "url": "https://files.pythonhosted.org/packages/1a/32/4548cd0f18d347f78ffff295e0f27cdf9c7c0c2bfb9a1c40d4a7788db36e/Tonberry-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dde54225d2708ffaa360f84149065eaa", "sha256": "8c58091aab72501172475ba8904e2456921a3b313bf52321a82c7e6a55c3dcec"}, "downloads": -1, "filename": "Tonberry-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dde54225d2708ffaa360f84149065eaa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 17861, "upload_time": "2020-02-17T02:53:20", "upload_time_iso_8601": "2020-02-17T02:53:20.215997Z", "url": "https://files.pythonhosted.org/packages/1a/32/4548cd0f18d347f78ffff295e0f27cdf9c7c0c2bfb9a1c40d4a7788db36e/Tonberry-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:51:10 2020"}