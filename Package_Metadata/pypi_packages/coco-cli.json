{"info": {"author": "Robert Fuchs", "author_email": "RobertFuchs97@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# COCO\n\nCoco is a tool for collecting commands in an easy and organized way.\n\n<p align=\"center\">\n    <img src=\"https://treborium.github.io/Coco/Resources/coco-preview.svg\" alt=\"Usage of arguments\"/>\n</p> \n\n\n## Installation\n\nCoco is available in [PyPi](https://pypi.org/project/coco-cli/) and can be installed via pip:\n\n```sh\npip install --user coco-cli\n```\n\n## Features\n\n- Custom prompts :star2:\n- List existing prompts :notebook:\n- Add or remove prompts :cactus:\n- Easy to remember commands like `ls` for listing or `rm` for removing :bulb:\n\n## Usage\n\n```sh\nUsage: coco [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  add  Add a prompt\n  ls   List all prompts\n  new  Generate a default config file\n  rm   Remove a prompt\n  run  Run a prompt\n\n```\n\n### Generate config files\n\nTo generate a new config file and simultaneously add the prompt you can simply use the command \n\n```sh\ncoco new [PATH] [NAME]\n```\n\nWhere `[PATH]` specifies the destination of the config file and `[NAME]` the name of the prompt that coco saves.\n\nFor example `coco new ~/.config/coco/maven.json mvn` will generate a file named `maven.json` in `~/.config/coco`, which can be executed with `coco run mvn`.\n\nNote that the name of the config file as well as the file extension do _not_ matter.\nHowever since coco expects valid json it is a nice convention to use the `.json` extension.\n\n### Add prompt\n\nIf you've already created a valid config file with your desired commands you can add it via\n\n```sh\ncoco add [PATH] [NAME]\n```\n\nWhere `[PATH]` specifies the location of the config file and `[NAME]` the name of the prompt that coco saves.\n\nSee [Generate Config File](#generate-config-files) for a more detailed example.\n\n### Run a prompt\n\nIn order to view an added prompt simply enter\n\n```sh\ncoco run [NAME]\n```\n\nIf the prompt requires parameters you can either append them at the end or let coco ask the user for input:\n\n <p align=\"center\">\n    <img src=\"https://treborium.github.io/Coco/Resources/argument-usage.svg\" alt=\"Usage of arguments\"/>\n  </p> \n\n\nAnd a possible config file entry could look like this\n\n```json\n{\n    \"prompt\": \"Select command to run:\",\n    \"choices\": {\n        \"Show package details\": \"pip show {package}\",\n        ...\n    }\n}\n```\n\n### List available prompts\n\nTo list available prompts use\n\n```sh\ncoco ls\n```\n\n### Remove a prompt\n\nRemoving an existing prompt is as easy as using:\n\n```sh\ncoco rm [NAME]\n```\n\n`[Name]` of course specifies the name of the prompt that you wish to remove.\nTo list the names of all available prompts use `coco ls`.\n\nIf you wish to also delete the associated config file from your system add the `--delete-config` flag:\n\n```sh\ncoco rm --delete-config [NAME]\n```\n\n## Config Files\n\nAn example config file can be viewed [here](https://github.com/Treborium/Coco/blob/master/coco/coco.json)\n\nAs you can probably guess the file needs to be valid json, however the file extension does _not_ matter.\n\nIf you want to specify arguments for your commands you can do so by wrapping them in curly braces:\n\n```json\n{\n    \"prompt\": \"Pacman commands:\",\n    \"choices\": {\n        \"install\": \"sudo pacman -S {package}\"\n    }\n}\n```\n\n---\n\n## TODO\n\n- [ ] Support for piped operations\n- [ ] Usage of the same argument in multiple places like `pip search {package} | grep {package}`\n- [ ] Add new command to easily edit the config files\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Treborium/Coco", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "coco-cli", "package_url": "https://pypi.org/project/coco-cli/", "platform": "", "project_url": "https://pypi.org/project/coco-cli/", "project_urls": {"Homepage": "https://github.com/Treborium/Coco"}, "release_url": "https://pypi.org/project/coco-cli/2.3/", "requires_dist": ["bullet", "click"], "requires_python": "", "summary": "A CLI tool for managing your CLI tools", "version": "2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>COCO</h1>\n<p>Coco is a tool for collecting commands in an easy and organized way.</p>\n<p align=\"center\">\n    <img alt=\"Usage of arguments\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0245de11e8452ba2a48fbc1b679937eff3502f6b/68747470733a2f2f747265626f7269756d2e6769746875622e696f2f436f636f2f5265736f75726365732f636f636f2d707265766965772e737667\">\n</p> \n<h2>Installation</h2>\n<p>Coco is available in <a href=\"https://pypi.org/project/coco-cli/\" rel=\"nofollow\">PyPi</a> and can be installed via pip:</p>\n<pre>pip install --user coco-cli\n</pre>\n<h2>Features</h2>\n<ul>\n<li>Custom prompts :star2:</li>\n<li>List existing prompts :notebook:</li>\n<li>Add or remove prompts :cactus:</li>\n<li>Easy to remember commands like <code>ls</code> for listing or <code>rm</code> for removing :bulb:</li>\n</ul>\n<h2>Usage</h2>\n<pre>Usage: coco <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> COMMAND <span class=\"o\">[</span>ARGS<span class=\"o\">]</span>...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  add  Add a prompt\n  ls   List all prompts\n  new  Generate a default config file\n  rm   Remove a prompt\n  run  Run a prompt\n</pre>\n<h3>Generate config files</h3>\n<p>To generate a new config file and simultaneously add the prompt you can simply use the command</p>\n<pre>coco new <span class=\"o\">[</span>PATH<span class=\"o\">]</span> <span class=\"o\">[</span>NAME<span class=\"o\">]</span>\n</pre>\n<p>Where <code>[PATH]</code> specifies the destination of the config file and <code>[NAME]</code> the name of the prompt that coco saves.</p>\n<p>For example <code>coco new ~/.config/coco/maven.json mvn</code> will generate a file named <code>maven.json</code> in <code>~/.config/coco</code>, which can be executed with <code>coco run mvn</code>.</p>\n<p>Note that the name of the config file as well as the file extension do <em>not</em> matter.\nHowever since coco expects valid json it is a nice convention to use the <code>.json</code> extension.</p>\n<h3>Add prompt</h3>\n<p>If you've already created a valid config file with your desired commands you can add it via</p>\n<pre>coco add <span class=\"o\">[</span>PATH<span class=\"o\">]</span> <span class=\"o\">[</span>NAME<span class=\"o\">]</span>\n</pre>\n<p>Where <code>[PATH]</code> specifies the location of the config file and <code>[NAME]</code> the name of the prompt that coco saves.</p>\n<p>See <a href=\"#generate-config-files\" rel=\"nofollow\">Generate Config File</a> for a more detailed example.</p>\n<h3>Run a prompt</h3>\n<p>In order to view an added prompt simply enter</p>\n<pre>coco run <span class=\"o\">[</span>NAME<span class=\"o\">]</span>\n</pre>\n<p>If the prompt requires parameters you can either append them at the end or let coco ask the user for input:</p>\n <p align=\"center\">\n    <img alt=\"Usage of arguments\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d6fe057d4ad7a9af45764f3f951c9184d7e5fb84/68747470733a2f2f747265626f7269756d2e6769746875622e696f2f436f636f2f5265736f75726365732f617267756d656e742d75736167652e737667\">\n  </p> \n<p>And a possible config file entry could look like this</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"prompt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Select command to run:\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"choices\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"Show package details\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pip show {package}\"</span><span class=\"p\">,</span>\n        <span class=\"err\">...</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>List available prompts</h3>\n<p>To list available prompts use</p>\n<pre>coco ls\n</pre>\n<h3>Remove a prompt</h3>\n<p>Removing an existing prompt is as easy as using:</p>\n<pre>coco rm <span class=\"o\">[</span>NAME<span class=\"o\">]</span>\n</pre>\n<p><code>[Name]</code> of course specifies the name of the prompt that you wish to remove.\nTo list the names of all available prompts use <code>coco ls</code>.</p>\n<p>If you wish to also delete the associated config file from your system add the <code>--delete-config</code> flag:</p>\n<pre>coco rm --delete-config <span class=\"o\">[</span>NAME<span class=\"o\">]</span>\n</pre>\n<h2>Config Files</h2>\n<p>An example config file can be viewed <a href=\"https://github.com/Treborium/Coco/blob/master/coco/coco.json\" rel=\"nofollow\">here</a></p>\n<p>As you can probably guess the file needs to be valid json, however the file extension does <em>not</em> matter.</p>\n<p>If you want to specify arguments for your commands you can do so by wrapping them in curly braces:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"prompt\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Pacman commands:\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"choices\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"install\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sudo pacman -S {package}\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<hr>\n<h2>TODO</h2>\n<ul>\n<li>[ ] Support for piped operations</li>\n<li>[ ] Usage of the same argument in multiple places like <code>pip search {package} | grep {package}</code></li>\n<li>[ ] Add new command to easily edit the config files</li>\n</ul>\n\n          </div>"}, "last_serial": 5511098, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "e36d2530c748654124739ea131c04af7", "sha256": "ad2bab2dd3b8795eeca516aedbb948d4aaab726e00c002408254a34bae9e1c0a"}, "downloads": -1, "filename": "coco_cli-2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e36d2530c748654124739ea131c04af7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4561, "upload_time": "2019-04-28T09:22:34", "upload_time_iso_8601": "2019-04-28T09:22:34.022783Z", "url": "https://files.pythonhosted.org/packages/bb/eb/4d03c901257d7c5c781f15708fa2c0cbc3b8512cb9c9384baeabae85a9ba/coco_cli-2.0-py3-none-any.whl", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "4278bb8278c4c8b9794e19a755c06d4f", "sha256": "96d7a703f0e1a88611580f4ec588381aeb4e9f007a00575905a12055dd3d2e46"}, "downloads": -1, "filename": "coco_cli-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4278bb8278c4c8b9794e19a755c06d4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5169, "upload_time": "2019-04-28T13:27:16", "upload_time_iso_8601": "2019-04-28T13:27:16.018869Z", "url": "https://files.pythonhosted.org/packages/08/2a/1d406b8da22258d78d1daafb9aac559fc3bdbf65ed17f27ce6e42a113dac/coco_cli-2.1-py3-none-any.whl", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "f4d364f0fec5efc47c08ada79aaa78d9", "sha256": "85a82fcc08abc4ea8553611e8a84bde00a2f05acc91d8ade3de0691a4e582d5a"}, "downloads": -1, "filename": "coco_cli-2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f4d364f0fec5efc47c08ada79aaa78d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6555, "upload_time": "2019-05-05T17:36:38", "upload_time_iso_8601": "2019-05-05T17:36:38.998186Z", "url": "https://files.pythonhosted.org/packages/90/7d/6812ab149896fc1b52d1a3bd1a84770e146dedf91ede492fb1a8bcb1eb43/coco_cli-2.2-py3-none-any.whl", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "ba90755152aba5160ece3b95f6eabddc", "sha256": "253620608eda7adb28dae454537f9e1f45210d1c689173d9b3efdc02c9336411"}, "downloads": -1, "filename": "coco_cli-2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ba90755152aba5160ece3b95f6eabddc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6704, "upload_time": "2019-07-10T09:53:51", "upload_time_iso_8601": "2019-07-10T09:53:51.850878Z", "url": "https://files.pythonhosted.org/packages/71/e4/b46eba01086e53cafcf2c9237c586a5ccd56231d96ca2aeac7faaf575b77/coco_cli-2.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba90755152aba5160ece3b95f6eabddc", "sha256": "253620608eda7adb28dae454537f9e1f45210d1c689173d9b3efdc02c9336411"}, "downloads": -1, "filename": "coco_cli-2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ba90755152aba5160ece3b95f6eabddc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6704, "upload_time": "2019-07-10T09:53:51", "upload_time_iso_8601": "2019-07-10T09:53:51.850878Z", "url": "https://files.pythonhosted.org/packages/71/e4/b46eba01086e53cafcf2c9237c586a5ccd56231d96ca2aeac7faaf575b77/coco_cli-2.3-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:18:20 2020"}