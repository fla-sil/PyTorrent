{"info": {"author": "Ask Solem", "author_email": "ask@celeryproject.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "##############################################\n literal.py - Python code generation tool\n##############################################\n\n:Version: 1.0.0\n\nSynopsis\n========\n\nLiteral is a fun weekend project to create a way to generate python\ncode with Python code.  Instead of having string literals of Python\ncode, you use ``literal.py`` objects that remembers the operations\ndone to them, and the history of operations is the resulting\nPython program.\n\nThis is just an experiment that I wanted to play with;\nIt's usefulness is not proven, and more than likely\nthis will be thrown away as a failed experiment. So use\nwith care and caution.\n\nQuick overview\n--------------\n\n::\n\n    import literal\n\n    @literal.py\n    def unpack_octet(x, payload, offset, unpack_from):\n        x <<= unpack_from('B', payload, offset)\n        offset += 1\n\n    print(unpack_octet())\n\nGives::\n\n    x = unpack_from('B', payload, offset)\n    offset += 1\n\n\nOr another example used to create argument unpackers\nfor the AMQP protocol::\n\n    def unpack(method):\n\n        @literal.py\n        def body(p, payload, offset, unpack_from, argtuple, ssize):\n            fields = method.fields\n            names = p.tuple(*self.field_names)\n\n            for i, fset in enumerate(fields):\n                if len(fset) == 1:\n                    for field in fset:\n                        name = p.var(field.name)\n                        if field.format == '*':\n                            # This is a string payload,\n                            # don't have to unpack\n                            name <<= payload[offset:offset + ssize]\n                            offset += ssize\n                        else:\n                            # A single field to unpack\n                            name <<= unpack_from(struct_format(field.format),\n                                                payload, offset)[0]\n                            offset += field.size\n                else:\n                    # A list of field to unpack\n                    these = p.tuple(*fset.names)\n                    these <<= unpack_from(struct_format(fset.format),\n                                        payload, offset)\n                    offset += sum(f.size for f in fset)\n                return names\n\n            return body().as_fun(lambda payload, offset: 1,\n                                method.name)\n\n\nWould generate the following code for the AMQP method ``basic_deliver``::\n\n    def deliver(payload, offset):\n        ssize = unpack_from('B', payload, offset)[0]\n        offset += 1\n        consumer_tag = payload[offset:offset + ssize]\n        offset += ssize\n        delivery_tag, redelivered, ssize = unpack_from('QBB', payload, offset)\n        offset += 10\n        exchange = payload[offset:offset + ssize]\n        offset += ssize\n        ssize = unpack_from('B', payload, offset)[0]\n        offset += 1\n        routing_key = payload[offset:offset + ssize]\n        offset += ssize\n        return (consumer_tag, delivery_tag, redelivered,\n                exchange, routing_key)\n\n\nMore documentation to come.\n\nInstallation\n============\n\nYou can install `literal` either via the Python Package Index (PyPI)\nor from source.\n\nTo install using `pip`,::\n\n    $ pip install literal\n\nTo install using `easy_install`,::\n\n    $ easy_install literal\n\nIf you have downloaded a source tarball you can install it\nby doing the following,::\n\n    $ python setup.py build\n    # python setup.py install # as root\n\n\nBug tracker\n===========\n\nIf you have any suggestions, bug reports or annoyances please report them\nto our issue tracker at http://github.com/ask/literal.py/issues/\n\nContributing\n============\n\nDevelopment of `literal.py` happens at Github:\nhttp://github.com/ask/literal.py\n\nYou are highly encouraged to participate in the development. If you don't\nlike Github (for some reason) you're welcome to send regular patches.\n\nLicense\n=======\n\nThis software is licensed under the `New BSD License`. See the `LICENSE`\nfile in the top distribution directory for the full license text.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/ask/literal.py/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "literal", "package_url": "https://pypi.org/project/literal/", "platform": "any", "project_url": "https://pypi.org/project/literal/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/ask/literal.py/"}, "release_url": "https://pypi.org/project/literal/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Python code generation tool.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<col>\n<col>\n<tbody>\n<tr><th>Version:</th>\n<td>1.0.0</td></tr>\n</tbody>\n</table>\n<div id=\"synopsis\">\n<h2>Synopsis</h2>\n<p>Literal is a fun weekend project to create a way to generate python\ncode with Python code.  Instead of having string literals of Python\ncode, you use <tt>literal.py</tt> objects that remembers the operations\ndone to them, and the history of operations is the resulting\nPython program.</p>\n<p>This is just an experiment that I wanted to play with;\nIt\u2019s usefulness is not proven, and more than likely\nthis will be thrown away as a failed experiment. So use\nwith care and caution.</p>\n<div id=\"quick-overview\">\n<h3>Quick overview</h3>\n<pre>import literal\n\n@literal.py\ndef unpack_octet(x, payload, offset, unpack_from):\n    x &lt;&lt;= unpack_from('B', payload, offset)\n    offset += 1\n\nprint(unpack_octet())\n</pre>\n<p>Gives:</p>\n<pre>x = unpack_from('B', payload, offset)\noffset += 1\n</pre>\n<p>Or another example used to create argument unpackers\nfor the AMQP protocol:</p>\n<pre>def unpack(method):\n\n    @literal.py\n    def body(p, payload, offset, unpack_from, argtuple, ssize):\n        fields = method.fields\n        names = p.tuple(*self.field_names)\n\n        for i, fset in enumerate(fields):\n            if len(fset) == 1:\n                for field in fset:\n                    name = p.var(field.name)\n                    if field.format == '*':\n                        # This is a string payload,\n                        # don't have to unpack\n                        name &lt;&lt;= payload[offset:offset + ssize]\n                        offset += ssize\n                    else:\n                        # A single field to unpack\n                        name &lt;&lt;= unpack_from(struct_format(field.format),\n                                            payload, offset)[0]\n                        offset += field.size\n            else:\n                # A list of field to unpack\n                these = p.tuple(*fset.names)\n                these &lt;&lt;= unpack_from(struct_format(fset.format),\n                                    payload, offset)\n                offset += sum(f.size for f in fset)\n            return names\n\n        return body().as_fun(lambda payload, offset: 1,\n                            method.name)\n</pre>\n<p>Would generate the following code for the AMQP method <tt>basic_deliver</tt>:</p>\n<pre>def deliver(payload, offset):\n    ssize = unpack_from('B', payload, offset)[0]\n    offset += 1\n    consumer_tag = payload[offset:offset + ssize]\n    offset += ssize\n    delivery_tag, redelivered, ssize = unpack_from('QBB', payload, offset)\n    offset += 10\n    exchange = payload[offset:offset + ssize]\n    offset += ssize\n    ssize = unpack_from('B', payload, offset)[0]\n    offset += 1\n    routing_key = payload[offset:offset + ssize]\n    offset += ssize\n    return (consumer_tag, delivery_tag, redelivered,\n            exchange, routing_key)\n</pre>\n<p>More documentation to come.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install <cite>literal</cite> either via the Python Package Index (PyPI)\nor from source.</p>\n<p>To install using <cite>pip</cite>,:</p>\n<pre>$ pip install literal\n</pre>\n<p>To install using <cite>easy_install</cite>,:</p>\n<pre>$ easy_install literal\n</pre>\n<p>If you have downloaded a source tarball you can install it\nby doing the following,:</p>\n<pre>$ python setup.py build\n# python setup.py install # as root\n</pre>\n</div>\n<div id=\"bug-tracker\">\n<h2>Bug tracker</h2>\n<p>If you have any suggestions, bug reports or annoyances please report them\nto our issue tracker at <a href=\"http://github.com/ask/literal.py/issues/\" rel=\"nofollow\">http://github.com/ask/literal.py/issues/</a></p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Development of <cite>literal.py</cite> happens at Github:\n<a href=\"http://github.com/ask/literal.py\" rel=\"nofollow\">http://github.com/ask/literal.py</a></p>\n<p>You are highly encouraged to participate in the development. If you don\u2019t\nlike Github (for some reason) you\u2019re welcome to send regular patches.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under the <cite>New BSD License</cite>. See the <cite>LICENSE</cite>\nfile in the top distribution directory for the full license text.</p>\n</div>\n\n          </div>"}, "last_serial": 794251, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "30f766764916eb75445c83c63a68b94f", "sha256": "68e5502d66eb8ccb46159235441dd0b65bcd5ab2ac57075101860c35d1b7208d"}, "downloads": -1, "filename": "literal-1.0.0.tar.gz", "has_sig": false, "md5_digest": "30f766764916eb75445c83c63a68b94f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11734, "upload_time": "2011-12-05T16:27:27", "upload_time_iso_8601": "2011-12-05T16:27:27.176003Z", "url": "https://files.pythonhosted.org/packages/fd/41/6b7c7cd9a1e51cd1a8751353bfe004d00c9f9a33bd3e4410b6e70b28ea5b/literal-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "30f766764916eb75445c83c63a68b94f", "sha256": "68e5502d66eb8ccb46159235441dd0b65bcd5ab2ac57075101860c35d1b7208d"}, "downloads": -1, "filename": "literal-1.0.0.tar.gz", "has_sig": false, "md5_digest": "30f766764916eb75445c83c63a68b94f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11734, "upload_time": "2011-12-05T16:27:27", "upload_time_iso_8601": "2011-12-05T16:27:27.176003Z", "url": "https://files.pythonhosted.org/packages/fd/41/6b7c7cd9a1e51cd1a8751353bfe004d00c9f9a33bd3e4410b6e70b28ea5b/literal-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:13 2020"}