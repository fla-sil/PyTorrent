{"info": {"author": "Pat Smith", "author_email": "pat.smith@isotoma.com", "bugtrack_url": null, "classifiers": [], "description": "========\nzkaffold\n========\n\nA plone product to install content on a plone site.\n\nFeatures\n--------\n\n * Install content\n\n * Install products\n\n * Delete content\n\n * Apply zope interfaces\n\n * Modify content\n\n * Generate test content\n\nHow to install\n--------------\n\nAdd zkaffold to your product:\n\n  * Add \"zkaffold\" to your product's install_requires in setup.py\n\n  * Add <include package=\"zkaffold\" /> in your product's configure.zcml\n\n  * Add \"profile-zkaffold:default\" as a dependency to your product's\n    metadata.xml\n\n  * run ./bin/buildout\n\nzkaffold should now be installed.  Note that zkaffold is not installable /\nuninstallable from the portal quick installer.\n\nHow to use\n----------\n\nAfter installing zkaffold in your plone site, you can build content for\nyour plone site by:\n\n * create \"initial\" profile in your product,\n \n * create a directory called \"zkaffold\" in profile/initial,\n\n * create structure.xml (example structure.xml is in\n   zkaffold/exportimport/tests/test_exportimport.py),\n\nYou can also create default users in your plone site by:\n\n * create members.xml (example members.xml is in\n   zkaffold/exportimport/tests/test_exportimport.py)\n\nIf you are using buildout, in your buildout.cfg:\n\n * in the [plonesite] section, add your product initial profile (e.g.\n   mysite:initial) to \"profiles-initial\",\n * run ./bin/buildout\n\nYour plone site should now be populated with content specified in\nstructure.xml.  Note that if your plone site already exists before running\nbuildout, it will not add any content.  You'll have to delete your plone\nsite or run the zkaffold import step to add the content.\n\nYou can use different profiles to create different content, for example if\nyou want test content, you can create another profile and add that in\nprofiles-initial when you want test content to be built.\n\nzkaffold publishes all objects by default by trying to apply transition\n\"publish\" to the objects.  If your objects need a different way of\npublishing, have a look at zkaffold/exportimport/tests/test_exportimport.py.\n\nzkaffold XML schema\n-------------------\nThe basic schema that all zkaffold XML files should begin with is::\n\n  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <site xmlns:zkaffold=\"http://www.isotoma.com/zkaffold\">\n  </site>\n\nThe ``site`` element is the lone root element and represents the Plone portal\nobject.\n\nDescending the object tree\n``````````````````````````\nObjects may be traversed by their ID in order to reach the object which should\nbe modified. This is done by specifying elements with the tag name as the ID\nof the object in question. For example, to descend to the object at path\n\"``portal/my_folder/my_obj``\" , one would use the following syntax::\n  \n  <site>\n    <my_folder>\n      <my_obj>\n        ...\n      </my_obj>\n    </my_folder>\n  </site>\n\nAdding new objects\n``````````````````\nTo insert a new object into a folderish object, first descend to the target\ncontainer, then insert a new element with the same tag name as the portal type\nyou wish to add, with an ``id`` attribute of the ID it should have within the\nZODB::\n  \n  <site>\n    <my_folder>\n      <MyContentType id=\"my_new_obj\">\n      </MyContentType>\n    </my_folder>\n  </site>\n\nParameters\n''''''''''\nMore often than not, one will want to specify values for fields in the schema\nof the object when it is created. To do this, add a ``params`` child to the\nelement representing the new object, which itself should contain a ``param``\nelement for each field. The ``param`` tag should have the ``name`` attribute\nset to the name of the field in question and the ``type`` attribute set to one\nof ``text``, ``lipsum``, ``lipsum_html``, ``reference``, ``image``, ``file``,\n``boolean``, ``list`` or ``reference_list``. The ``param`` element then\ncontains the value that should be given to that field. One need not specify a\n``param`` element for each and every field of a content type, the default\nvalues will be used where fields are not specified.\n\n``param`` elements with the ``type`` attribute set to ``lipsum`` or\n``lipsum_html`` have the optional attribute ``paras`` which specifies the\nnumber of paragraphs of `Lipsum <http://en.wikipedia.org/wiki/Lorem_ipsum>`_\nto generate as the value of that field. They also contain no child elements.\nThe ``lipsum`` value causes ordinary Lipsum to be generated with newlines,\nwhereas ``lipsum_html`` generates Lipsum with paragraph tags as necessary::\n\n  <site>\n    <my_folder>\n      <MyContentType id=\"my_new_obj\">\n        <params>\n          <param name=\"title\" type=\"text\">My new object</param>\n          <param name=\"text\" type=\"lipsum_html\" paras=\"5\" />\n          <param name=\"isNew\" type=\"boolean\">True</param>\n          <param name=\"old_obj\" type=\"reference\">/my_folder/my_obj</param>\n          <param name=\"thumb\" type=\"image\">new_obj_thumb.jpg</param>\n        </params>\n      </MyContentType>\n    </my_folder>\n  </site>\n\nAs in the above example, references are given as path strings to the\nreferenced object. Images & files are given as file names relative to the\ndirectory of the XML file.\n\nMulti-valued parameters\n'''''''''''''''''''''''\nFor fields which may contain multiple values such as ``ReferenceList`` or\n``LinesField``, the ``param`` element takes the ``type`` attribute ``list`` or\n``reference_list``. It should then contain an ``items`` element, which\ncontains zero or more ``item`` elements with their ``type`` attribute set\nappropriately, as per the ``param`` tag and their value set as their inner\nXML::\n\n  <site>\n    <my_folder>\n      <MyContentType id=\"my_new_obj\">\n        <params>\n          <param name=\"title\" type=\"text\">My new object</param>\n          <param name=\"options\" type=\"list\">\n            <items>\n              <item type=\"text\">Option 1</item>\n              <item type=\"text\">Option 2</item>\n            </items>\n          </param>\n        </params>\n      </MyContentType>\n    </my_folder>\n  </site>\n\nInterfaces\n''''''''''\nOccasionally one may wish to add interfaces to objects which they do not\nautomatically provide, particularly marker interfaces. This is achieved using\nthe ``interfaces`` & ``interface`` tags, like so::\n\n  <site>\n    <my_folder>\n      <MyContentType id=\"my_new_obj\">\n        <interfaces>\n          <interface>identifier.of.IMyMarker</interface>\n          <interface>identifier.of.IReplacementObject</interface>\n        </interfaces>\n        <params>\n          <param name=\"title\" type=\"text\">My new object</param>\n        </params>\n      </MyContentType>\n    </my_folder>\n  </site>\n\nThis adds the interfaces specified by the identifiers to the object.\n\nInterfaces that are already applied to objects may be similarly removed by\nreplacing the ``interface`` element with a ``remove`` element, thus::\n  \n  <site>\n    <my_folder>\n      <MyContentType id=\"my_new_obj\">\n        <interfaces>\n          <remove>IMyMarker</remove>\n        </interfaces>\n        <params>\n          <param name=\"title\" type=\"text\">My new object</param>\n        </params>\n      </MyContentType>\n    </my_folder>\n  </site>\n\nModifying existing objects\n``````````````````````````\nExisting objects may be modified in a very similar way to which they are\nadded. Simply descend to the object in question, append the ``modify`` element\nto it, and add ``params`` and ``interfaces`` elements as its children, as\nnecessary. Instead of taking the default values where fields are not\nspecified, the fields will retain their current values::\n\n  <site>\n    <my_folder>\n      <my_new_obj>\n        <modify>\n          <params>\n            <param name=\"title\" type=\"text\">My updated title for my new object</param>\n          </params>\n        </modify>\n      </my_new_obj>\n    </my_folder>\n  </site>\n\nSetting the default page of folderish objects\n'''''''''''''''''''''''''''''''''''''''''''''\nTo set the default page of a new or existing folderish object, use the\n``modify`` element with a ``setDefaultPage`` attribute::\n\n  <site>\n    <my_folder>\n      <modify setDefaultPage=\"my_new_obj\">\n        ...\n      </modify>\n    </my_folder>\n    <FolderishType id=\"another_folder\">\n      <modify setDefaultPage=\"folder_home\" />\n      <params>\n        ...\n      </params>\n      <ContentType id=\"folder_home\">\n        ...\n      </ContentType>\n    </FolderishType>\n  </site>\n\nDeleting objects\n````````````````\nExisting objects can be deleted by descending to their container object and\ninserting a ``delete`` element with its ``id`` attribute set to the ID of the\nobject which should be deleted. The ``delete`` element also has the optional\nparameter, ``ctype`` which can be used to specify a particular content type\nwhich the specified object must be in order to be deleted::\n  \n  <site>\n    <my_folder>\n      <!-- I never liked that new object anyway... -->\n      <delete id=\"my_new_obj\" ctype=\"MyContentType\" />\n    </my_folder>\n  </site>\n \nDependencies\n------------\n\nzkaffold depends on lxml, which depends on libxml2-dev and libxslt-dev.\nIn Debian, you can use:\n\n * ``sudo aptitude install libxml2-dev libxslt-dev``\n\nPLUGIN\n------\n\nzkaffold supports a plugin system for exporting content:\n\n * Add an import step for your profile initial,\n\n * create an exporter for your field, it should return a\n   lxml.etree.Element for <param> or (lxml.etree.Element for <param>,\n   filename, file content)::\n\n     def my_field_exporter(plone_object, field):\n         ...\n         return param\n\n * create the import step to register the field exporter::\n\n     from zkaffold.contextexporter import IContentExporter\n\n     def register_field_exporters(context):\n         portal = context.getSite()\n         sm = portal.getSiteManager()\n         exporter = sm.getUtility(IContentExporter)\n         exporter.register_field_exporter('mysite.fields.MyField',\n             'mysite.field_exporters.my_field_exporter')\n\nTests\n-----\n\nTo run zkaffold's tests, you need to:\n\n * add \"zkaffold [test]\" in the \"eggs\" in the [test] section of your\n   buildout.cfg,\n\n * run ./bin/buildout,\n\n * ./bin/test", "description_content_type": null, "docs_url": "https://pythonhosted.org/zkaffold/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/zkaffold", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "zkaffold", "package_url": "https://pypi.org/project/zkaffold/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zkaffold/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/zkaffold"}, "release_url": "https://pypi.org/project/zkaffold/0.0.11/", "requires_dist": null, "requires_python": null, "summary": "Build out demonstration content for plone", "version": "0.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A plone product to install content on a plone site.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<blockquote>\n<ul>\n<li>Install content</li>\n<li>Install products</li>\n<li>Delete content</li>\n<li>Apply zope interfaces</li>\n<li>Modify content</li>\n<li>Generate test content</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"how-to-install\">\n<h2>How to install</h2>\n<p>Add zkaffold to your product:</p>\n<blockquote>\n<ul>\n<li>Add \u201czkaffold\u201d to your product\u2019s install_requires in setup.py</li>\n<li>Add &lt;include package=\u201dzkaffold\u201d /&gt; in your product\u2019s configure.zcml</li>\n<li>Add \u201cprofile-zkaffold:default\u201d as a dependency to your product\u2019s\nmetadata.xml</li>\n<li>run ./bin/buildout</li>\n</ul>\n</blockquote>\n<p>zkaffold should now be installed.  Note that zkaffold is not installable /\nuninstallable from the portal quick installer.</p>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>After installing zkaffold in your plone site, you can build content for\nyour plone site by:</p>\n<blockquote>\n<ul>\n<li>create \u201cinitial\u201d profile in your product,</li>\n<li>create a directory called \u201czkaffold\u201d in profile/initial,</li>\n<li>create structure.xml (example structure.xml is in\nzkaffold/exportimport/tests/test_exportimport.py),</li>\n</ul>\n</blockquote>\n<p>You can also create default users in your plone site by:</p>\n<blockquote>\n<ul>\n<li>create members.xml (example members.xml is in\nzkaffold/exportimport/tests/test_exportimport.py)</li>\n</ul>\n</blockquote>\n<p>If you are using buildout, in your buildout.cfg:</p>\n<blockquote>\n<ul>\n<li>in the [plonesite] section, add your product initial profile (e.g.\nmysite:initial) to \u201cprofiles-initial\u201d,</li>\n<li>run ./bin/buildout</li>\n</ul>\n</blockquote>\n<p>Your plone site should now be populated with content specified in\nstructure.xml.  Note that if your plone site already exists before running\nbuildout, it will not add any content.  You\u2019ll have to delete your plone\nsite or run the zkaffold import step to add the content.</p>\n<p>You can use different profiles to create different content, for example if\nyou want test content, you can create another profile and add that in\nprofiles-initial when you want test content to be built.</p>\n<p>zkaffold publishes all objects by default by trying to apply transition\n\u201cpublish\u201d to the objects.  If your objects need a different way of\npublishing, have a look at zkaffold/exportimport/tests/test_exportimport.py.</p>\n</div>\n<div id=\"zkaffold-xml-schema\">\n<h2>zkaffold XML schema</h2>\n<p>The basic schema that all zkaffold XML files should begin with is:</p>\n<pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;site xmlns:zkaffold=\"http://www.isotoma.com/zkaffold\"&gt;\n&lt;/site&gt;\n</pre>\n<p>The <tt>site</tt> element is the lone root element and represents the Plone portal\nobject.</p>\n<div id=\"descending-the-object-tree\">\n<h3>Descending the object tree</h3>\n<p>Objects may be traversed by their ID in order to reach the object which should\nbe modified. This is done by specifying elements with the tag name as the ID\nof the object in question. For example, to descend to the object at path\n\u201c<tt>portal/my_folder/my_obj</tt>\u201d , one would use the following syntax:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;my_obj&gt;\n      ...\n    &lt;/my_obj&gt;\n  &lt;/my_folder&gt;\n&lt;/site&gt;\n</pre>\n</div>\n<div id=\"adding-new-objects\">\n<h3>Adding new objects</h3>\n<p>To insert a new object into a folderish object, first descend to the target\ncontainer, then insert a new element with the same tag name as the portal type\nyou wish to add, with an <tt>id</tt> attribute of the ID it should have within the\nZODB:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;MyContentType id=\"my_new_obj\"&gt;\n    &lt;/MyContentType&gt;\n  &lt;/my_folder&gt;\n&lt;/site&gt;\n</pre>\n<div id=\"parameters\">\n<h4>Parameters</h4>\n<p>More often than not, one will want to specify values for fields in the schema\nof the object when it is created. To do this, add a <tt>params</tt> child to the\nelement representing the new object, which itself should contain a <tt>param</tt>\nelement for each field. The <tt>param</tt> tag should have the <tt>name</tt> attribute\nset to the name of the field in question and the <tt>type</tt> attribute set to one\nof <tt>text</tt>, <tt>lipsum</tt>, <tt>lipsum_html</tt>, <tt>reference</tt>, <tt>image</tt>, <tt>file</tt>,\n<tt>boolean</tt>, <tt>list</tt> or <tt>reference_list</tt>. The <tt>param</tt> element then\ncontains the value that should be given to that field. One need not specify a\n<tt>param</tt> element for each and every field of a content type, the default\nvalues will be used where fields are not specified.</p>\n<p><tt>param</tt> elements with the <tt>type</tt> attribute set to <tt>lipsum</tt> or\n<tt>lipsum_html</tt> have the optional attribute <tt>paras</tt> which specifies the\nnumber of paragraphs of <a href=\"http://en.wikipedia.org/wiki/Lorem_ipsum\" rel=\"nofollow\">Lipsum</a>\nto generate as the value of that field. They also contain no child elements.\nThe <tt>lipsum</tt> value causes ordinary Lipsum to be generated with newlines,\nwhereas <tt>lipsum_html</tt> generates Lipsum with paragraph tags as necessary:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;MyContentType id=\"my_new_obj\"&gt;\n      &lt;params&gt;\n        &lt;param name=\"title\" type=\"text\"&gt;My new object&lt;/param&gt;\n        &lt;param name=\"text\" type=\"lipsum_html\" paras=\"5\" /&gt;\n        &lt;param name=\"isNew\" type=\"boolean\"&gt;True&lt;/param&gt;\n        &lt;param name=\"old_obj\" type=\"reference\"&gt;/my_folder/my_obj&lt;/param&gt;\n        &lt;param name=\"thumb\" type=\"image\"&gt;new_obj_thumb.jpg&lt;/param&gt;\n      &lt;/params&gt;\n    &lt;/MyContentType&gt;\n  &lt;/my_folder&gt;\n&lt;/site&gt;\n</pre>\n<p>As in the above example, references are given as path strings to the\nreferenced object. Images &amp; files are given as file names relative to the\ndirectory of the XML file.</p>\n</div>\n<div id=\"multi-valued-parameters\">\n<h4>Multi-valued parameters</h4>\n<p>For fields which may contain multiple values such as <tt>ReferenceList</tt> or\n<tt>LinesField</tt>, the <tt>param</tt> element takes the <tt>type</tt> attribute <tt>list</tt> or\n<tt>reference_list</tt>. It should then contain an <tt>items</tt> element, which\ncontains zero or more <tt>item</tt> elements with their <tt>type</tt> attribute set\nappropriately, as per the <tt>param</tt> tag and their value set as their inner\nXML:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;MyContentType id=\"my_new_obj\"&gt;\n      &lt;params&gt;\n        &lt;param name=\"title\" type=\"text\"&gt;My new object&lt;/param&gt;\n        &lt;param name=\"options\" type=\"list\"&gt;\n          &lt;items&gt;\n            &lt;item type=\"text\"&gt;Option 1&lt;/item&gt;\n            &lt;item type=\"text\"&gt;Option 2&lt;/item&gt;\n          &lt;/items&gt;\n        &lt;/param&gt;\n      &lt;/params&gt;\n    &lt;/MyContentType&gt;\n  &lt;/my_folder&gt;\n&lt;/site&gt;\n</pre>\n</div>\n<div id=\"interfaces\">\n<h4>Interfaces</h4>\n<p>Occasionally one may wish to add interfaces to objects which they do not\nautomatically provide, particularly marker interfaces. This is achieved using\nthe <tt>interfaces</tt> &amp; <tt>interface</tt> tags, like so:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;MyContentType id=\"my_new_obj\"&gt;\n      &lt;interfaces&gt;\n        &lt;interface&gt;identifier.of.IMyMarker&lt;/interface&gt;\n        &lt;interface&gt;identifier.of.IReplacementObject&lt;/interface&gt;\n      &lt;/interfaces&gt;\n      &lt;params&gt;\n        &lt;param name=\"title\" type=\"text\"&gt;My new object&lt;/param&gt;\n      &lt;/params&gt;\n    &lt;/MyContentType&gt;\n  &lt;/my_folder&gt;\n&lt;/site&gt;\n</pre>\n<p>This adds the interfaces specified by the identifiers to the object.</p>\n<p>Interfaces that are already applied to objects may be similarly removed by\nreplacing the <tt>interface</tt> element with a <tt>remove</tt> element, thus:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;MyContentType id=\"my_new_obj\"&gt;\n      &lt;interfaces&gt;\n        &lt;remove&gt;IMyMarker&lt;/remove&gt;\n      &lt;/interfaces&gt;\n      &lt;params&gt;\n        &lt;param name=\"title\" type=\"text\"&gt;My new object&lt;/param&gt;\n      &lt;/params&gt;\n    &lt;/MyContentType&gt;\n  &lt;/my_folder&gt;\n&lt;/site&gt;\n</pre>\n</div>\n</div>\n<div id=\"modifying-existing-objects\">\n<h3>Modifying existing objects</h3>\n<p>Existing objects may be modified in a very similar way to which they are\nadded. Simply descend to the object in question, append the <tt>modify</tt> element\nto it, and add <tt>params</tt> and <tt>interfaces</tt> elements as its children, as\nnecessary. Instead of taking the default values where fields are not\nspecified, the fields will retain their current values:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;my_new_obj&gt;\n      &lt;modify&gt;\n        &lt;params&gt;\n          &lt;param name=\"title\" type=\"text\"&gt;My updated title for my new object&lt;/param&gt;\n        &lt;/params&gt;\n      &lt;/modify&gt;\n    &lt;/my_new_obj&gt;\n  &lt;/my_folder&gt;\n&lt;/site&gt;\n</pre>\n<div id=\"setting-the-default-page-of-folderish-objects\">\n<h4>Setting the default page of folderish objects</h4>\n<p>To set the default page of a new or existing folderish object, use the\n<tt>modify</tt> element with a <tt>setDefaultPage</tt> attribute:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;modify setDefaultPage=\"my_new_obj\"&gt;\n      ...\n    &lt;/modify&gt;\n  &lt;/my_folder&gt;\n  &lt;FolderishType id=\"another_folder\"&gt;\n    &lt;modify setDefaultPage=\"folder_home\" /&gt;\n    &lt;params&gt;\n      ...\n    &lt;/params&gt;\n    &lt;ContentType id=\"folder_home\"&gt;\n      ...\n    &lt;/ContentType&gt;\n  &lt;/FolderishType&gt;\n&lt;/site&gt;\n</pre>\n</div>\n</div>\n<div id=\"deleting-objects\">\n<h3>Deleting objects</h3>\n<p>Existing objects can be deleted by descending to their container object and\ninserting a <tt>delete</tt> element with its <tt>id</tt> attribute set to the ID of the\nobject which should be deleted. The <tt>delete</tt> element also has the optional\nparameter, <tt>ctype</tt> which can be used to specify a particular content type\nwhich the specified object must be in order to be deleted:</p>\n<pre>&lt;site&gt;\n  &lt;my_folder&gt;\n    &lt;!-- I never liked that new object anyway... --&gt;\n    &lt;delete id=\"my_new_obj\" ctype=\"MyContentType\" /&gt;\n  &lt;/my_folder&gt;\n&lt;/site&gt;\n</pre>\n</div>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>zkaffold depends on lxml, which depends on libxml2-dev and libxslt-dev.\nIn Debian, you can use:</p>\n<blockquote>\n<ul>\n<li><tt>sudo aptitude install <span class=\"pre\">libxml2-dev</span> <span class=\"pre\">libxslt-dev</span></tt></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"plugin\">\n<h2>PLUGIN</h2>\n<p>zkaffold supports a plugin system for exporting content:</p>\n<blockquote>\n<ul>\n<li><p>Add an import step for your profile initial,</p>\n</li>\n<li><p>create an exporter for your field, it should return a\nlxml.etree.Element for &lt;param&gt; or (lxml.etree.Element for &lt;param&gt;,\nfilename, file content):</p>\n<pre>def my_field_exporter(plone_object, field):\n    ...\n    return param\n</pre>\n</li>\n<li><p>create the import step to register the field exporter:</p>\n<pre>from zkaffold.contextexporter import IContentExporter\n\ndef register_field_exporters(context):\n    portal = context.getSite()\n    sm = portal.getSiteManager()\n    exporter = sm.getUtility(IContentExporter)\n    exporter.register_field_exporter('mysite.fields.MyField',\n        'mysite.field_exporters.my_field_exporter')\n</pre>\n</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>To run zkaffold\u2019s tests, you need to:</p>\n<blockquote>\n<ul>\n<li>add \u201czkaffold [test]\u201d in the \u201ceggs\u201d in the [test] section of your\nbuildout.cfg,</li>\n<li>run ./bin/buildout,</li>\n<li>./bin/test</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 802303, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "0b9facb153d71119517261d3ff28891c", "sha256": "f11fb30d121ba2dae17e289d31b104a040f91c1c2c219f57dc70b4e7d745105a"}, "downloads": -1, "filename": "zkaffold-0.0.10.tar.gz", "has_sig": false, "md5_digest": "0b9facb153d71119517261d3ff28891c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28018, "upload_time": "2011-09-05T11:24:53", "upload_time_iso_8601": "2011-09-05T11:24:53.295425Z", "url": "https://files.pythonhosted.org/packages/7a/0d/cb5c5ca0911da6a09c03faf325b6699f359d7b497dfa352e5d653deaeff0/zkaffold-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "1f6004b8aee60fade340b35b80031085", "sha256": "7c41af15eb0d5fdf469c2fb1b5bd46b66853763e4a289c9ba7d133fa9dc7836b"}, "downloads": -1, "filename": "zkaffold-0.0.11.tar.gz", "has_sig": false, "md5_digest": "1f6004b8aee60fade340b35b80031085", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26042, "upload_time": "2012-10-18T13:28:25", "upload_time_iso_8601": "2012-10-18T13:28:25.827246Z", "url": "https://files.pythonhosted.org/packages/0b/24/b5814eacaad4c8d066645a30cd25ec98fb0f91a90cbb449beb151ee3a1c5/zkaffold-0.0.11.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "b65d09fe4182f7f43d60e9d5c31959a2", "sha256": "7100f4b1fd12bd282a055daf6a9d15732c49b3b2f09ea0cb0f58a8e557e3c921"}, "downloads": -1, "filename": "zkaffold-0.0.8-py2.4.egg", "has_sig": false, "md5_digest": "b65d09fe4182f7f43d60e9d5c31959a2", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 63443, "upload_time": "2011-08-12T17:05:53", "upload_time_iso_8601": "2011-08-12T17:05:53.872514Z", "url": "https://files.pythonhosted.org/packages/91/07/587eaa40ca2f49fe0325ed35e485781bee58e4fe31539fe2a8e32b2b9698/zkaffold-0.0.8-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3dea9e741035a6aa102057a897ec563", "sha256": "9c08df5c30d0af37492db65f4047dd9f10aa847a54fb65db15076465c46a152c"}, "downloads": -1, "filename": "zkaffold-0.0.8-py2.6.egg", "has_sig": false, "md5_digest": "b3dea9e741035a6aa102057a897ec563", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 62424, "upload_time": "2011-08-12T17:06:08", "upload_time_iso_8601": "2011-08-12T17:06:08.288580Z", "url": "https://files.pythonhosted.org/packages/bf/a8/fea3882b73d3cab1e78ea06fb92c5ef068f7092a38d02fd54ac39a47deed/zkaffold-0.0.8-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "83543ba010f3cce312b7573279bba375", "sha256": "90e59f358d23d260b8f3c568a816212146a69842e97c1cbc7bca68c036cf871b"}, "downloads": -1, "filename": "zkaffold-0.0.8.tar.gz", "has_sig": false, "md5_digest": "83543ba010f3cce312b7573279bba375", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24930, "upload_time": "2011-08-12T17:05:30", "upload_time_iso_8601": "2011-08-12T17:05:30.863234Z", "url": "https://files.pythonhosted.org/packages/85/a5/107b60dfd08dd030408a38c7750c0727a513270ad0ac11b147935ffa7eeb/zkaffold-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "42dee1a1eb3d77c432fab83247d3a351", "sha256": "f575e7289407643cc7665cae83a5a04bb0ab0de68cd9a3908950075f6449b4a2"}, "downloads": -1, "filename": "zkaffold-0.0.9-py2.4.egg", "has_sig": false, "md5_digest": "42dee1a1eb3d77c432fab83247d3a351", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 66807, "upload_time": "2011-08-24T11:53:09", "upload_time_iso_8601": "2011-08-24T11:53:09.678951Z", "url": "https://files.pythonhosted.org/packages/78/59/434541c0eb0030a4f42a29d8b48ba5a11be5c8fe2251a7ca0e623b2a8117/zkaffold-0.0.9-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0a732ff5e55490cc19d463c5877949d", "sha256": "7372d11c99de912bcbd2a9477f4fdf72b4e74e83ae0903400f91303f7189a7a0"}, "downloads": -1, "filename": "zkaffold-0.0.9-py2.6.egg", "has_sig": false, "md5_digest": "c0a732ff5e55490cc19d463c5877949d", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 65785, "upload_time": "2011-08-24T11:52:47", "upload_time_iso_8601": "2011-08-24T11:52:47.987316Z", "url": "https://files.pythonhosted.org/packages/96/be/3f84b805632b7bae883e0d977d7df9cc44d55a05e573d88576d390cda493/zkaffold-0.0.9-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "16e027a62175fc09b2343caac4792832", "sha256": "91add012da7052a1790886aa1b79201d673eb02e460d1406aea2a712a6d9d6ce"}, "downloads": -1, "filename": "zkaffold-0.0.9.tar.gz", "has_sig": false, "md5_digest": "16e027a62175fc09b2343caac4792832", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28036, "upload_time": "2011-08-24T11:53:28", "upload_time_iso_8601": "2011-08-24T11:53:28.539651Z", "url": "https://files.pythonhosted.org/packages/e0/b3/ce2600a2302250ac02d0e91e02b82567afb66e688988d6138d5e517e01cb/zkaffold-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1f6004b8aee60fade340b35b80031085", "sha256": "7c41af15eb0d5fdf469c2fb1b5bd46b66853763e4a289c9ba7d133fa9dc7836b"}, "downloads": -1, "filename": "zkaffold-0.0.11.tar.gz", "has_sig": false, "md5_digest": "1f6004b8aee60fade340b35b80031085", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26042, "upload_time": "2012-10-18T13:28:25", "upload_time_iso_8601": "2012-10-18T13:28:25.827246Z", "url": "https://files.pythonhosted.org/packages/0b/24/b5814eacaad4c8d066645a30cd25ec98fb0f91a90cbb449beb151ee3a1c5/zkaffold-0.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:50 2020"}