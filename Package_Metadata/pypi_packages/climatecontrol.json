{"info": {"author": "Davis Kirkendall", "author_email": "davis.e.kirkendall@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "|Build Status| |Coverage Status| |PyPi Status| |PyPI license| |PyPI pyversions|\n|Code Style Black|\n\n\n.. image:: https://raw.githubusercontent.com/daviskirk/climatecontrol/logo/climatecontrol-text.svg?sanitize=true\n\n\nCLIMATECONTROL controls your applications settings and configuration\nenvironment. It is a Python library for loading app configurations from files\nand/or namespaced environment variables.\n\nFeatures\n========\n\n* Separation of settings and code\n* Loading from files (`.yaml`, `.json`, `.toml`)\n* Loading multiple files using glob syntax\n* Loading from environment variables, including loading of nested values\n* Freely reference nested configurations via files or environment variables\n* CLI integration\n* Validation using the Validation library of your choice\n* Logging configuration integration\n* Testing integration\n\n\nInstall\n=======\n\n::\n\n    pip install climatecontrol\n\n\n\nUsage\n=====\n\nSet some environment variables in your shell\n\n.. code:: sh\n\n   export CLIMATECONTROL_VALUE1=test1\n   export CLIMATECONTROL_VALUE2=test2\n\nThen use them in your python modules:\n\n.. code:: python\n\n   from climatecontrol import climate\n   print(climate.settings)\n\n   {\n       'value1': 'test1',\n       'value2': 'test2'\n   }\n\nIn case you want to update your settings or your environment variables have\nchanged and you want to reload them, the `update` method will reload your\nsettings:\n\n.. code:: python\n\n   import os\n   os.environ['CLIMATECONTROL_VALUE3'] = 'new_env_data'\n   climate.reload()\n   print(climate.settings)\n\n   {\n       'value1': 'test1',\n       'value2': 'test2',\n       'value3': 'new_env_data'\n   }\n\n\nNow you've noticed that you want more complex configurations and need nested\nsettings. For this situation we can delimit sections using a double underscore:\n\n.. code:: sh\n\n   export CLIMATECONTROL_SECTION1__VALUE1=test1\n   export CLIMATECONTROL_SECTION2__VALUE2=test2\n   export CLIMATECONTROL_SECTION2__VALUE3=test3\n   export CLIMATECONTROL_SECTION2__SUB_SECTION__VALUE4=test4\n\n.. code:: python\n\n   from climatecontrol import climate\n   print(climate.settings)\n\n   {\n       'section1': {\n           'value1': 'test1'\n       },\n       'section2': {\n           'value2': 'test2',\n           'value3': 'test3',\n           'sub_section': {\n               'value4': 'test4'\n           }\n       }\n   }\n\n\nSettings file support\n---------------------\n\nIf you don't want to use an environment variable for every single setting and\nwant to put your settings in a single file instead you can to this as well.\nSettings files can be yaml files (`.yml`/ `.yaml`), json files (`.json`) or toml_ files (`.toml`).\n\n.. code-block:: sh\n\n   export CLIMATECONTROL_SETTINGS_FILE=./my_settings_file.yml\n\n\nThe file could look like this:\n\n.. code-block:: yaml\n\n   # ./climatecontrol_settings.yaml\n   section1:\n     subsection1 = test1\n\n   section2:\n     subsection2: test2\n     subsection3: test3\n\n\nor in toml form:\n\n.. code-block:: sh\n\n   # ./climatecontrol_settings.toml\n   [section1]\n   subsection1 = \"test1\"\n\n   [section2]\n   subsection2 = \"test2\"\n   subsection3 = \"test3\"\n\n\nIn the following documentation examples, yaml files will be used, but any\nexamples will work using the other file syntaxes as well.\n\nSee the `climatecontrol.core.Climate.inferred_settings_files` docstring\nfor further examples of how settings files are loaded and how they can be named.\nAlso note that you can set your own settings files explicitely either by\nsettings an environment variable:\n\n.. code-block:: sh\n\n   export CLIMATECONTROL_SETTINGS_FILE=\"mysettings.yaml, mysettings.toml, override.yml\"\n\nor by adding them in code:\n\n.. code-block:: python\n\n   climate.settings_files.extend([\"mysettings.yaml\", \"mysettings.toml\", \"override.yml\"]\n\n\nAdvanced Features\n-----------------\n\nSetting variables from values saved in files\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSometimes we don't want to save values in plain text in environment files or in\nthe settings file itself. Instead we have a file that contains the value of the\nsetting we want. A good example for this behaviour are docker secrets_ that\nstore secrets in temporary files.\n\nTo read a variable from a file, simply add a `\"_from_file\"` to the variable\nname and give it the path to the file that contains the variable as a value.\n\nUsing a settings file with the contents (in this case yaml):\n\n.. code-block:: yaml\n\n   section1:\n     subsection1_from_file: /home/myuser/supersecret.txt\n\nor using an environment variable:\n\n.. code-block:: sh\n\n   export CLIMATECONTROL_SECTION1_SUBSECTION1_FROM_FILE=\"/home/myuser/supersecret.txt\"\n\nwill both write the content of the file at `\"/home/myuser/supersecret.txt\"`\ninto the variable `section1 -> subsection1`.\n\n\nSetting variables from values saved in specific environment variables\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSimilarly, to read a value from an environment variable, add a `\"_from_env\"` to\nthe variable name. For example if we wanted to obtain a value from the variable\n`SPECIFIC_ENV_VAR`:\n\n.. code-block:: sh\n\n   export SPECIFIC_ENV_VAR=\"some value\"\n\nUsing a settings file with the contents (in this case yaml):\n\n.. code-block:: yaml\n\n   section1:\n     subsection1_from_env: SPECIFIC_ENV_VAR\n\nor using an environment variable:\n\n.. code-block:: sh\n\n   export CLIMATECONTROL_SECTION1_SUBSECTION1_FROM_FILE=\"/home/myuser/supersecret.txt\"\n\nwill both write \"some value\" into the variable `section1 -> subsection1`.\n\nSettings variables from serialized content\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: yaml\n\n   section1_from_json_content: '{\"subsection1\": \"test\", \"subsection2\": 2}'\n   section2_from_toml_content: 'subsection1 = \"test\"\\nsubsection2 = 2\\n'\n   section3_from_yaml_content: 'subsection1: test\\nsubsection2: 2\\n'\n\n\nThe equivilant environment variables are also handled correctly:\n\n.. code-block:: sh\n\n   CLIMATECONTROL_SECTION1_FROM_JSON_CONTENT='{\"subsection1\": \"test\", \"subsection2\": 2}'\n   CLIMATECONTROL_SECTION2_FROM_TOML_CONTENT='subsection1 = \"test\"\\nsubsection2 = 2\\n'\n   CLIMATECONTROL_SECTION3_FROM_YAML_CONTENT='subsection1: test\\nsubsection2: 2\\n'\n\n\nNested settings files\n^^^^^^^^^^^^^^^^^^^^^\n\nIn addition, file variables can also target other settings files directly. To\ndo this, just make sure the target file is has an extension supported by\nclimate control. A simple example is illustrated here. Given a settings file:\n\n.. code-block:: yaml\n\n   value1: \"spam\"\n   section1_from_file: /home/myuser/nestedfile.yaml\n\n\nwhere the content of `/home/myuser/nestedfile.yaml` is:\n\n.. code-block:: yaml\n\n   value2: \"cheese\"\n   subsection:\n     value3: \"parrot\"\n\nwhich would result in a settings structure:\n\n.. code-block:: python\n\n   {\n       \"value1\": \"spam\",\n       \"section1\": {\n           \"value2\": \"cheese\",\n           \"subsection\": {\n               \"value3\": \"parrot\"\n           }\n       }\n   }\n\n\nExtensions\n----------\n\nWhile the default `climate` object is great for most uses, perhaps you already\nhave a settings object style that you like or use a specific library for\nvalidation.  In these cases, CLIMATECONTROL can be extended to use these\nlibraries.\n\nDataclasses\n^^^^^^^^^^^\n\n>>> from climatecontrol.ext.dataclasses import Climate\n>>> from dataclasses import dataclass, field\n>>>\n>>> @dataclass\n... class SettingsSubSchema:\n...     d: int = 4\n...\n>>> @dataclass\n... class SettingsSchema:\n...     a: str = 'test'\n...     b: bool = False\n...     c: SettingsSubSchema = field(default_factory=SettingsSubSchema)\n...\n>>> climate = Climate(dataclass_cls=SettingsSchema)\n>>> # defaults are initialized automatically:\n>>> climate.settings.a\n'test'\n>>> climate.settings.c.d\n4\n>>> # Types are checked if given\n>>> climate.update({'c': {'d': 'boom!'}})\nTraceback (most recent call last):\n    ...\ndacite.exceptions.WrongTypeError: wrong type for field \"c.d\" - should be \"int\" instead of \"str\"\n\n\nPydantic\n^^^^^^^^\n\nPydantic is a great data validation library:\nhttps://github.com/samuelcolvin/pydantic and climatecontrol also provides a\nsimple extension to use pydantic models directly (typing functionality mentioned\nabove works here as well).\n\n>>> from climatecontrol.ext.pydantic import Climate\n>>>\n>>> class SettingsSubSchema(BaseModel):\n...     d: int = 4\n...\n>>> class SettingsSchema(BaseModel):\n...     a: str = 'test'\n...     b: bool = False\n...     c: SettingsSubSchema = SettingsSubSchema()\n...\n>>> climate = Climate(model=SettingsSchema)\n>>> # defaults are initialized automatically:\n>>> climate.settings.a\n'test'\n>>> climate.settings.c.d\n4\n>>> # Types are checked if given\n>>> climate.update({'c': {'d': 'boom!'}})\nTraceback (most recent call last):\n    ...\npydantic.error_wrappers.ValidationError: 1 validation error for SettingsSchema\nc -> d\n    value is not a valid integer (type=type_error.integer)\n\n\nIntegrations\n------------\n\nCommand line support using click\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe click_ library is a great tool for creating command line applications. If\nyou don't want to have to use an environment to set your configuration file.\nWrite your command line application like this:\n\n.. code-block:: python\n\n   import click\n\n   @click.command()\n   @climate.click_settings_file_option()\n   def cli():\n      print(climate.settings)\n\nsave it to a file like \"cli.py\" and then call it after installing click:\n\n.. code-block:: sh\n\n   pip install click\n   python cli.py --settings ./my_settings_file.toml\n\nwhithout needing to set any env vars.\n\nMultiple files are supported. They will be automatically recursively merged\nwith the last file overriting any overlapping keys of the first file.\n\n.. code-block:: sh\n\n   pip install click\n   python cli.py --settings ./my_settings_file.toml  --settings ./my_settings_file.yaml\n\n\nLogging\n^^^^^^^\n\nIf you have a \"logging\" section in your settings files, you can configure\npython standard library logging using that section directly:\n\n.. code:: yaml\n\n   logging:\n     formatters:\n       default:\n         format': \"%(levelname)s > %(message)s\"\n     root:\n       level: DEBUG\n\n\n.. code:: python\n\n   import logging\n   from climatecontrol import climate\n\n   climate.setup_logging()\n   logging.debug('test')\n   # outputs: DEBUG > test\n\n\nTesting\n-------\n\nWhen testing your application, different behaviours often depend on settings\ntaking on different values. Assuming that you are using a single `Settings`\nobject accross multiple functions or modules, handling these settings changes\nin tests can be tricky.\n\nThe settings object provides a simple method for modifying your settings object\ntemporarily:\n\n.. code-block:: python\n\n   climate.update({'a': 1})\n   # Enter a temporary changes context block:\n   with climate.temporary_changes():\n       climate.update({'a': 1})\n       # Inside the context, the settings can be modified and used as you choose\n       print(climate['a'])  # outputs: 2\n   # After the context exits the settings map\n   print(climate['a'])  # outputs: 1\n\n\nContributing\n============\n\nSee: `CONTRIBUTING.md <./CONTRIBUTING.md>`__\n\n\n.. |Build Status| image:: https://travis-ci.org/daviskirk/climatecontrol.svg?branch=master\n   :target: https://travis-ci.org/daviskirk/climatecontrol\n.. |Coverage Status| image:: https://coveralls.io/repos/github/daviskirk/climatecontrol/badge.svg?branch=master\n   :target: https://coveralls.io/github/daviskirk/climatecontrol?branch=master\n.. |PyPi Status| image:: https://badge.fury.io/py/climatecontrol.svg\n   :target: https://badge.fury.io/py/climatecontrol\n.. |PyPI license| image:: https://img.shields.io/pypi/l/ansicolortags.svg\n   :target: https://pypi.python.org/pypi/ansicolortags/\n.. |PyPI pyversions| image:: https://img.shields.io/pypi/pyversions/climatecontrol.svg\n   :target: https://pypi.python.org/pypi/climatecontrol/\n.. |Code Style Black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n.. _click: http://click.pocoo.org/\n.. _toml: https://github.com/toml-lang/toml\n.. _secrets: https://docs.docker.com/engine/swarm/secrets\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/daviskirk/climatecontrol", "keywords": "climatecontrol", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "climatecontrol", "package_url": "https://pypi.org/project/climatecontrol/", "platform": "", "project_url": "https://pypi.org/project/climatecontrol/", "project_urls": {"Homepage": "https://github.com/daviskirk/climatecontrol"}, "release_url": "https://pypi.org/project/climatecontrol/0.8.0/", "requires_dist": ["wrapt", "dacite ; extra == 'dataclasses'", "pydantic ; extra == 'dataclasses'", "dataclasses ; (python_version < \"3.7\") and extra == 'dataclasses'", "invoke ; extra == 'dev'", "black ; extra == 'dev'", "mypy ; extra == 'dev'", "isort ; extra == 'dev'", "flake8 ; extra == 'dev'", "pytest ; extra == 'dev'", "pytest-mock ; extra == 'dev'", "coverage ; extra == 'dev'", "toml (>=0.9.2) ; extra == 'dev'", "pyyaml ; extra == 'dev'", "click (>=7.0) ; extra == 'dev'", "dacite ; extra == 'dev'", "pydantic ; extra == 'dev'", "dataclasses ; (python_version < \"3.7\") and extra == 'dev'"], "requires_python": "", "summary": "Python library for loading app configurations from files and/or namespaced environment variables", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/daviskirk/climatecontrol\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e85d991d45b7593610799edb41807be6f880fc6a/68747470733a2f2f7472617669732d63692e6f72672f64617669736b69726b2f636c696d617465636f6e74726f6c2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/daviskirk/climatecontrol?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d70ad8e213962b5875c19f30e388967f6862214/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f64617669736b69726b2f636c696d617465636f6e74726f6c2f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://badge.fury.io/py/climatecontrol\" rel=\"nofollow\"><img alt=\"PyPi Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a4db35bbc1d8762f85636b10dbc2112d48fd5d9/68747470733a2f2f62616467652e667572792e696f2f70792f636c696d617465636f6e74726f6c2e737667\"></a> <a href=\"https://pypi.python.org/pypi/ansicolortags/\" rel=\"nofollow\"><img alt=\"PyPI license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb7554d3f165ac5e7bc396a6fbc22d51a890512a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f616e7369636f6c6f72746167732e737667\"></a> <a href=\"https://pypi.python.org/pypi/climatecontrol/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06bbb440167ce667a33e44a8fd8d0b6b8465d0e3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636c696d617465636f6e74726f6c2e737667\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Code Style Black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<img alt=\"https://raw.githubusercontent.com/daviskirk/climatecontrol/logo/climatecontrol-text.svg?sanitize=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09c1f0eb785d472e19d3dfefefa28393709ebe4f/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f64617669736b69726b2f636c696d617465636f6e74726f6c2f6c6f676f2f636c696d617465636f6e74726f6c2d746578742e7376673f73616e6974697a653d74727565\">\n<p>CLIMATECONTROL controls your applications settings and configuration\nenvironment. It is a Python library for loading app configurations from files\nand/or namespaced environment variables.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Separation of settings and code</li>\n<li>Loading from files (<cite>.yaml</cite>, <cite>.json</cite>, <cite>.toml</cite>)</li>\n<li>Loading multiple files using glob syntax</li>\n<li>Loading from environment variables, including loading of nested values</li>\n<li>Freely reference nested configurations via files or environment variables</li>\n<li>CLI integration</li>\n<li>Validation using the Validation library of your choice</li>\n<li>Logging configuration integration</li>\n<li>Testing integration</li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install climatecontrol\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Set some environment variables in your shell</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_VALUE1</span><span class=\"o\">=</span>test1\n<span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_VALUE2</span><span class=\"o\">=</span>test2\n</pre>\n<p>Then use them in your python modules:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">climatecontrol</span> <span class=\"kn\">import</span> <span class=\"n\">climate</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n\n<span class=\"p\">{</span>\n    <span class=\"s1\">'value1'</span><span class=\"p\">:</span> <span class=\"s1\">'test1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'value2'</span><span class=\"p\">:</span> <span class=\"s1\">'test2'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In case you want to update your settings or your environment variables have\nchanged and you want to reload them, the <cite>update</cite> method will reload your\nsettings:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'CLIMATECONTROL_VALUE3'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'new_env_data'</span>\n<span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">reload</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n\n<span class=\"p\">{</span>\n    <span class=\"s1\">'value1'</span><span class=\"p\">:</span> <span class=\"s1\">'test1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'value2'</span><span class=\"p\">:</span> <span class=\"s1\">'test2'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'value3'</span><span class=\"p\">:</span> <span class=\"s1\">'new_env_data'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Now you\u2019ve noticed that you want more complex configurations and need nested\nsettings. For this situation we can delimit sections using a double underscore:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_SECTION1__VALUE1</span><span class=\"o\">=</span>test1\n<span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_SECTION2__VALUE2</span><span class=\"o\">=</span>test2\n<span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_SECTION2__VALUE3</span><span class=\"o\">=</span>test3\n<span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_SECTION2__SUB_SECTION__VALUE4</span><span class=\"o\">=</span>test4\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">climatecontrol</span> <span class=\"kn\">import</span> <span class=\"n\">climate</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n\n<span class=\"p\">{</span>\n    <span class=\"s1\">'section1'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'value1'</span><span class=\"p\">:</span> <span class=\"s1\">'test1'</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'section2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'value2'</span><span class=\"p\">:</span> <span class=\"s1\">'test2'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'value3'</span><span class=\"p\">:</span> <span class=\"s1\">'test3'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'sub_section'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'value4'</span><span class=\"p\">:</span> <span class=\"s1\">'test4'</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<div id=\"settings-file-support\">\n<h3>Settings file support</h3>\n<p>If you don\u2019t want to use an environment variable for every single setting and\nwant to put your settings in a single file instead you can to this as well.\nSettings files can be yaml files (<cite>.yml</cite>/ <cite>.yaml</cite>), json files (<cite>.json</cite>) or <a href=\"https://github.com/toml-lang/toml\" rel=\"nofollow\">toml</a> files (<cite>.toml</cite>).</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_SETTINGS_FILE</span><span class=\"o\">=</span>./my_settings_file.yml\n</pre>\n<p>The file could look like this:</p>\n<pre><span class=\"c1\"># ./climatecontrol_settings.yaml</span>\n<span class=\"nt\">section1</span><span class=\"p\">:</span>\n  <span class=\"l-Scalar-Plain\">subsection1 = test1</span>\n\n<span class=\"nt\">section2</span><span class=\"p\">:</span>\n  <span class=\"nt\">subsection2</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">test2</span>\n  <span class=\"nt\">subsection3</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">test3</span>\n</pre>\n<p>or in toml form:</p>\n<pre><span class=\"c1\"># ./climatecontrol_settings.toml\n</span><span class=\"o\">[</span>section1<span class=\"o\">]</span>\n<span class=\"nv\">subsection1</span> <span class=\"o\">=</span> <span class=\"s2\">\"test1\"</span>\n\n<span class=\"o\">[</span>section2<span class=\"o\">]</span>\n<span class=\"nv\">subsection2</span> <span class=\"o\">=</span> <span class=\"s2\">\"test2\"</span>\n<span class=\"nv\">subsection3</span> <span class=\"o\">=</span> <span class=\"s2\">\"test3\"</span>\n</pre>\n<p>In the following documentation examples, yaml files will be used, but any\nexamples will work using the other file syntaxes as well.</p>\n<p>See the <cite>climatecontrol.core.Climate.inferred_settings_files</cite> docstring\nfor further examples of how settings files are loaded and how they can be named.\nAlso note that you can set your own settings files explicitely either by\nsettings an environment variable:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_SETTINGS_FILE</span><span class=\"o\">=</span><span class=\"s2\">\"mysettings.yaml, mysettings.toml, override.yml\"</span>\n</pre>\n<p>or by adding them in code:</p>\n<pre><span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">settings_files</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"s2\">\"mysettings.yaml\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mysettings.toml\"</span><span class=\"p\">,</span> <span class=\"s2\">\"override.yml\"</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"advanced-features\">\n<h3>Advanced Features</h3>\n<div id=\"setting-variables-from-values-saved-in-files\">\n<h4>Setting variables from values saved in files</h4>\n<p>Sometimes we don\u2019t want to save values in plain text in environment files or in\nthe settings file itself. Instead we have a file that contains the value of the\nsetting we want. A good example for this behaviour are docker <a href=\"https://docs.docker.com/engine/swarm/secrets\" rel=\"nofollow\">secrets</a> that\nstore secrets in temporary files.</p>\n<p>To read a variable from a file, simply add a <cite>\u201c_from_file\u201d</cite> to the variable\nname and give it the path to the file that contains the variable as a value.</p>\n<p>Using a settings file with the contents (in this case yaml):</p>\n<pre><span class=\"nt\">section1</span><span class=\"p\">:</span>\n  <span class=\"nt\">subsection1_from_file</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/home/myuser/supersecret.txt</span>\n</pre>\n<p>or using an environment variable:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_SECTION1_SUBSECTION1_FROM_FILE</span><span class=\"o\">=</span><span class=\"s2\">\"/home/myuser/supersecret.txt\"</span>\n</pre>\n<p>will both write the content of the file at <cite>\u201c/home/myuser/supersecret.txt\u201d</cite>\ninto the variable <cite>section1 -&gt; subsection1</cite>.</p>\n</div>\n<div id=\"setting-variables-from-values-saved-in-specific-environment-variables\">\n<h4>Setting variables from values saved in specific environment variables</h4>\n<p>Similarly, to read a value from an environment variable, add a <cite>\u201c_from_env\u201d</cite> to\nthe variable name. For example if we wanted to obtain a value from the variable\n<cite>SPECIFIC_ENV_VAR</cite>:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">SPECIFIC_ENV_VAR</span><span class=\"o\">=</span><span class=\"s2\">\"some value\"</span>\n</pre>\n<p>Using a settings file with the contents (in this case yaml):</p>\n<pre><span class=\"nt\">section1</span><span class=\"p\">:</span>\n  <span class=\"nt\">subsection1_from_env</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">SPECIFIC_ENV_VAR</span>\n</pre>\n<p>or using an environment variable:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CLIMATECONTROL_SECTION1_SUBSECTION1_FROM_FILE</span><span class=\"o\">=</span><span class=\"s2\">\"/home/myuser/supersecret.txt\"</span>\n</pre>\n<p>will both write \u201csome value\u201d into the variable <cite>section1 -&gt; subsection1</cite>.</p>\n</div>\n<div id=\"settings-variables-from-serialized-content\">\n<h4>Settings variables from serialized content</h4>\n<pre><span class=\"nt\">section1_from_json_content</span><span class=\"p\">:</span> <span class=\"s\">'{\"subsection1\":</span><span class=\"nv\"> </span><span class=\"s\">\"test\",</span><span class=\"nv\"> </span><span class=\"s\">\"subsection2\":</span><span class=\"nv\"> </span><span class=\"s\">2}'</span>\n<span class=\"nt\">section2_from_toml_content</span><span class=\"p\">:</span> <span class=\"s\">'subsection1</span><span class=\"nv\"> </span><span class=\"s\">=</span><span class=\"nv\"> </span><span class=\"s\">\"test\"\\nsubsection2</span><span class=\"nv\"> </span><span class=\"s\">=</span><span class=\"nv\"> </span><span class=\"s\">2\\n'</span>\n<span class=\"nt\">section3_from_yaml_content</span><span class=\"p\">:</span> <span class=\"s\">'subsection1:</span><span class=\"nv\"> </span><span class=\"s\">test\\nsubsection2:</span><span class=\"nv\"> </span><span class=\"s\">2\\n'</span>\n</pre>\n<p>The equivilant environment variables are also handled correctly:</p>\n<pre><span class=\"nv\">CLIMATECONTROL_SECTION1_FROM_JSON_CONTENT</span><span class=\"o\">=</span><span class=\"s1\">'{\"subsection1\": \"test\", \"subsection2\": 2}'</span>\n<span class=\"nv\">CLIMATECONTROL_SECTION2_FROM_TOML_CONTENT</span><span class=\"o\">=</span><span class=\"s1\">'subsection1 = \"test\"\\nsubsection2 = 2\\n'</span>\n<span class=\"nv\">CLIMATECONTROL_SECTION3_FROM_YAML_CONTENT</span><span class=\"o\">=</span><span class=\"s1\">'subsection1: test\\nsubsection2: 2\\n'</span>\n</pre>\n</div>\n<div id=\"nested-settings-files\">\n<h4>Nested settings files</h4>\n<p>In addition, file variables can also target other settings files directly. To\ndo this, just make sure the target file is has an extension supported by\nclimate control. A simple example is illustrated here. Given a settings file:</p>\n<pre><span class=\"nt\">value1</span><span class=\"p\">:</span> <span class=\"s\">\"spam\"</span>\n<span class=\"nt\">section1_from_file</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">/home/myuser/nestedfile.yaml</span>\n</pre>\n<p>where the content of <cite>/home/myuser/nestedfile.yaml</cite> is:</p>\n<pre><span class=\"nt\">value2</span><span class=\"p\">:</span> <span class=\"s\">\"cheese\"</span>\n<span class=\"nt\">subsection</span><span class=\"p\">:</span>\n  <span class=\"nt\">value3</span><span class=\"p\">:</span> <span class=\"s\">\"parrot\"</span>\n</pre>\n<p>which would result in a settings structure:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"value1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"spam\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"section1\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"value2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cheese\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"subsection\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"value3\"</span><span class=\"p\">:</span> <span class=\"s2\">\"parrot\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"extensions\">\n<h3>Extensions</h3>\n<p>While the default <cite>climate</cite> object is great for most uses, perhaps you already\nhave a settings object style that you like or use a specific library for\nvalidation.  In these cases, CLIMATECONTROL can be extended to use these\nlibraries.</p>\n<div id=\"dataclasses\">\n<h4>Dataclasses</h4>\n<pre>&gt;&gt;&gt; from climatecontrol.ext.dataclasses import Climate\n&gt;&gt;&gt; from dataclasses import dataclass, field\n&gt;&gt;&gt;\n&gt;&gt;&gt; @dataclass\n... class SettingsSubSchema:\n...     d: int = 4\n...\n&gt;&gt;&gt; @dataclass\n... class SettingsSchema:\n...     a: str = 'test'\n...     b: bool = False\n...     c: SettingsSubSchema = field(default_factory=SettingsSubSchema)\n...\n&gt;&gt;&gt; climate = Climate(dataclass_cls=SettingsSchema)\n&gt;&gt;&gt; # defaults are initialized automatically:\n&gt;&gt;&gt; climate.settings.a\n'test'\n&gt;&gt;&gt; climate.settings.c.d\n4\n&gt;&gt;&gt; # Types are checked if given\n&gt;&gt;&gt; climate.update({'c': {'d': 'boom!'}})\nTraceback (most recent call last):\n    ...\ndacite.exceptions.WrongTypeError: wrong type for field \"c.d\" - should be \"int\" instead of \"str\"\n</pre>\n</div>\n<div id=\"pydantic\">\n<h4>Pydantic</h4>\n<p>Pydantic is a great data validation library:\n<a href=\"https://github.com/samuelcolvin/pydantic\" rel=\"nofollow\">https://github.com/samuelcolvin/pydantic</a> and climatecontrol also provides a\nsimple extension to use pydantic models directly (typing functionality mentioned\nabove works here as well).</p>\n<pre>&gt;&gt;&gt; from climatecontrol.ext.pydantic import Climate\n&gt;&gt;&gt;\n&gt;&gt;&gt; class SettingsSubSchema(BaseModel):\n...     d: int = 4\n...\n&gt;&gt;&gt; class SettingsSchema(BaseModel):\n...     a: str = 'test'\n...     b: bool = False\n...     c: SettingsSubSchema = SettingsSubSchema()\n...\n&gt;&gt;&gt; climate = Climate(model=SettingsSchema)\n&gt;&gt;&gt; # defaults are initialized automatically:\n&gt;&gt;&gt; climate.settings.a\n'test'\n&gt;&gt;&gt; climate.settings.c.d\n4\n&gt;&gt;&gt; # Types are checked if given\n&gt;&gt;&gt; climate.update({'c': {'d': 'boom!'}})\nTraceback (most recent call last):\n    ...\npydantic.error_wrappers.ValidationError: 1 validation error for SettingsSchema\nc -&gt; d\n    value is not a valid integer (type=type_error.integer)\n</pre>\n</div>\n</div>\n<div id=\"integrations\">\n<h3>Integrations</h3>\n<div id=\"command-line-support-using-click\">\n<h4>Command line support using click</h4>\n<p>The <a href=\"http://click.pocoo.org/\" rel=\"nofollow\">click</a> library is a great tool for creating command line applications. If\nyou don\u2019t want to have to use an environment to set your configuration file.\nWrite your command line application like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">click</span>\n\n<span class=\"nd\">@click</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">()</span>\n<span class=\"nd\">@climate</span><span class=\"o\">.</span><span class=\"n\">click_settings_file_option</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">cli</span><span class=\"p\">():</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n</pre>\n<p>save it to a file like \u201ccli.py\u201d and then call it after installing click:</p>\n<pre>pip install click\npython cli.py --settings ./my_settings_file.toml\n</pre>\n<p>whithout needing to set any env vars.</p>\n<p>Multiple files are supported. They will be automatically recursively merged\nwith the last file overriting any overlapping keys of the first file.</p>\n<pre>pip install click\npython cli.py --settings ./my_settings_file.toml  --settings ./my_settings_file.yaml\n</pre>\n</div>\n<div id=\"logging\">\n<h4>Logging</h4>\n<p>If you have a \u201clogging\u201d section in your settings files, you can configure\npython standard library logging using that section directly:</p>\n<pre><span class=\"nt\">logging</span><span class=\"p\">:</span>\n  <span class=\"nt\">formatters</span><span class=\"p\">:</span>\n    <span class=\"nt\">default</span><span class=\"p\">:</span>\n      <span class=\"l-Scalar-Plain\">format'</span><span class=\"p-Indicator\">:</span> <span class=\"s\">\"%(levelname)s</span><span class=\"nv\"> </span><span class=\"s\">&gt;</span><span class=\"nv\"> </span><span class=\"s\">%(message)s\"</span>\n  <span class=\"nt\">root</span><span class=\"p\">:</span>\n    <span class=\"nt\">level</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">DEBUG</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">climatecontrol</span> <span class=\"kn\">import</span> <span class=\"n\">climate</span>\n\n<span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">setup_logging</span><span class=\"p\">()</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s1\">'test'</span><span class=\"p\">)</span>\n<span class=\"c1\"># outputs: DEBUG &gt; test</span>\n</pre>\n</div>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>When testing your application, different behaviours often depend on settings\ntaking on different values. Assuming that you are using a single <cite>Settings</cite>\nobject accross multiple functions or modules, handling these settings changes\nin tests can be tricky.</p>\n<p>The settings object provides a simple method for modifying your settings object\ntemporarily:</p>\n<pre><span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"c1\"># Enter a temporary changes context block:</span>\n<span class=\"k\">with</span> <span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">temporary_changes</span><span class=\"p\">():</span>\n    <span class=\"n\">climate</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n    <span class=\"c1\"># Inside the context, the settings can be modified and used as you choose</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">climate</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])</span>  <span class=\"c1\"># outputs: 2</span>\n<span class=\"c1\"># After the context exits the settings map</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">climate</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">])</span>  <span class=\"c1\"># outputs: 1</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>See: <a href=\"./CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a></p>\n</div>\n\n          </div>"}, "last_serial": 6707081, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "8439f6e26a6c80a154d7ef0b56992e11", "sha256": "830d5fd2dbd815da8a04ee285a14bfa5a6f2774080aa4bb5f7139ce45fb0636b"}, "downloads": -1, "filename": "climatecontrol-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8439f6e26a6c80a154d7ef0b56992e11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5724, "upload_time": "2016-06-02T02:02:32", "upload_time_iso_8601": "2016-06-02T02:02:32.378623Z", "url": "https://files.pythonhosted.org/packages/e2/76/92972c9701e5a116890aa2498105931bf11ec68d1a298c974ba2aed1ca7c/climatecontrol-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "b4cc3a5854bb9e34f36a078170962996", "sha256": "605d5f638ed597ae6e69d608f9d67de09474c58d1881bac33e820e7d857f9d32"}, "downloads": -1, "filename": "climatecontrol-0.1.10.tar.gz", "has_sig": false, "md5_digest": "b4cc3a5854bb9e34f36a078170962996", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12792, "upload_time": "2016-09-02T03:44:46", "upload_time_iso_8601": "2016-09-02T03:44:46.977826Z", "url": "https://files.pythonhosted.org/packages/45/8b/03cd7a368f1045b65f291d971c8a1a32bfc5add3d7b3cd3139b9b2541216/climatecontrol-0.1.10.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4e2334523a4d8c7c279361f72cbbeb2a", "sha256": "07d19de77b0cf29e46ebe5cde72f0d72a1ec1804638ce825155d66c6bafbcc65"}, "downloads": -1, "filename": "climatecontrol-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4e2334523a4d8c7c279361f72cbbeb2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5712, "upload_time": "2016-06-02T11:21:16", "upload_time_iso_8601": "2016-06-02T11:21:16.473010Z", "url": "https://files.pythonhosted.org/packages/d7/64/c3933266ae5d506e0fa13fbc5e47d7277dace6ae3044b9ecb21ddc36cd62/climatecontrol-0.1.2.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "db07b7100bdd8357062bf386f79cf987", "sha256": "7cfe4cad198953d99c409b7e9c36a09a95254b8e706f376de93363570a29b492"}, "downloads": -1, "filename": "climatecontrol-0.1.4.tar.gz", "has_sig": false, "md5_digest": "db07b7100bdd8357062bf386f79cf987", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6324, "upload_time": "2016-06-02T14:31:31", "upload_time_iso_8601": "2016-06-02T14:31:31.940686Z", "url": "https://files.pythonhosted.org/packages/d0/f9/c98b81f05f9a1877b5a1b756ee6d85c06e0172e29c221199db94f9cac9c1/climatecontrol-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "7908ccf282b896b2f7cb87b379ca625b", "sha256": "b242379f9ac8238221eeb793780e26028fbaec8b43f042cc9fe692e4e6823e7c"}, "downloads": -1, "filename": "climatecontrol-0.1.5.tar.gz", "has_sig": false, "md5_digest": "7908ccf282b896b2f7cb87b379ca625b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11633, "upload_time": "2016-08-11T09:39:52", "upload_time_iso_8601": "2016-08-11T09:39:52.835735Z", "url": "https://files.pythonhosted.org/packages/be/17/d5953b247cadb27ad9d10c7ec762fe6d47cb9f7a74a8bc86ba79c3f129b3/climatecontrol-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "58222e90cf20507363ba51e782b5957c", "sha256": "eea61d2693ca9d6019256eecc87f6bfb764366817f7b93ab6b791c31dfa40d3d"}, "downloads": -1, "filename": "climatecontrol-0.1.6.tar.gz", "has_sig": false, "md5_digest": "58222e90cf20507363ba51e782b5957c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12367, "upload_time": "2016-08-11T10:09:43", "upload_time_iso_8601": "2016-08-11T10:09:43.235421Z", "url": "https://files.pythonhosted.org/packages/33/52/6c742adce91164aef22f55ad2fda9fe1bb7e5d72ce4f60213a4761bebf1d/climatecontrol-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "5802cf1d7dd2ac023ba360eb13de07e4", "sha256": "33c030480a9c7350072421296ea69e8e6f18d64b208f3afa14dd90754975ce44"}, "downloads": -1, "filename": "climatecontrol-0.1.7.tar.gz", "has_sig": false, "md5_digest": "5802cf1d7dd2ac023ba360eb13de07e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12510, "upload_time": "2016-08-11T16:45:10", "upload_time_iso_8601": "2016-08-11T16:45:10.984086Z", "url": "https://files.pythonhosted.org/packages/0f/29/0ab661f4d329ecfee0ffd7418e63b4718f09e64daf24fa217169c7b24332/climatecontrol-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "70c9de0d1538e6d7063d1c8a8111877f", "sha256": "fe16c1f44f02769e996953f204cddb73158943b2589cdb67b5763422638f3055"}, "downloads": -1, "filename": "climatecontrol-0.1.8.tar.gz", "has_sig": false, "md5_digest": "70c9de0d1538e6d7063d1c8a8111877f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12751, "upload_time": "2016-08-17T10:59:59", "upload_time_iso_8601": "2016-08-17T10:59:59.954541Z", "url": "https://files.pythonhosted.org/packages/2c/60/72a548e0142cd5fa6f7bf8f3e594116ddad14a5e6740d848868befd27507/climatecontrol-0.1.8.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "05d9fe1503dc6ae0f8e5bf86f9dad1dc", "sha256": "73402537167638139bab792aab7507edac845316674a3c52d33792109a3df25c"}, "downloads": -1, "filename": "climatecontrol-0.2.1.tar.gz", "has_sig": false, "md5_digest": "05d9fe1503dc6ae0f8e5bf86f9dad1dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15569, "upload_time": "2016-12-30T02:23:45", "upload_time_iso_8601": "2016-12-30T02:23:45.206789Z", "url": "https://files.pythonhosted.org/packages/27/5f/fa90e69e830f5e93882444a1722e5ed872b63d5330df0265c9f179634b8d/climatecontrol-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "a5ec3fe567709b2e316535877ce97da3", "sha256": "c489528e97cba334752b1ef9cf4b417d707ee0def4153db8b7a7e6d437fe22ba"}, "downloads": -1, "filename": "climatecontrol-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a5ec3fe567709b2e316535877ce97da3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15689, "upload_time": "2016-12-30T14:02:52", "upload_time_iso_8601": "2016-12-30T14:02:52.703264Z", "url": "https://files.pythonhosted.org/packages/e9/6b/97fd7e650b3059b810dcc6c53d08fe446a630564a94a34bd9629bf0d670b/climatecontrol-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "382e6b2227ac2a3b1796bd935dd122ce", "sha256": "e1f23970e04eb56caf3f48bf4a1dcc864782b63b8fb1f1dd9337bd7a6d494f44"}, "downloads": -1, "filename": "climatecontrol-0.2.3.tar.gz", "has_sig": false, "md5_digest": "382e6b2227ac2a3b1796bd935dd122ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16556, "upload_time": "2017-01-08T14:12:33", "upload_time_iso_8601": "2017-01-08T14:12:33.832264Z", "url": "https://files.pythonhosted.org/packages/ed/71/dfa898e19690d935a7c8ebaad5cf4c049b94a2b059df2e25b8f212dee915/climatecontrol-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "ee62f60c5763896d74ff71ce78a89aa9", "sha256": "d0facbfc9e668040530f1225f6a7043ae2517a488eef2591bb84f6242a69a3ab"}, "downloads": -1, "filename": "climatecontrol-0.2.4.tar.gz", "has_sig": false, "md5_digest": "ee62f60c5763896d74ff71ce78a89aa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16878, "upload_time": "2017-03-13T13:01:21", "upload_time_iso_8601": "2017-03-13T13:01:21.329542Z", "url": "https://files.pythonhosted.org/packages/67/41/7f69239797e5971fe1439ee8bf1c665d407042fbfbc3eeddd29c5b059991/climatecontrol-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "7b1626f170730bffcac80a8e90ca1d5e", "sha256": "777a99398ac2f30cc784cea21a17dbab208a0762d9b4680c5b755adc9b6426f2"}, "downloads": -1, "filename": "climatecontrol-0.2.5.tar.gz", "has_sig": false, "md5_digest": "7b1626f170730bffcac80a8e90ca1d5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17072, "upload_time": "2017-04-13T12:01:09", "upload_time_iso_8601": "2017-04-13T12:01:09.747291Z", "url": "https://files.pythonhosted.org/packages/11/eb/542a69c3101223948f4e1dce26c79e38f762e77a674a1329892ab93f2efb/climatecontrol-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "6386cbc133d4bda11ed007f7c7b6f110", "sha256": "f26adfce18ed263bb69b40d58e4eed9692667bd39217e73d355d210b9bd6baa8"}, "downloads": -1, "filename": "climatecontrol-0.2.6.tar.gz", "has_sig": false, "md5_digest": "6386cbc133d4bda11ed007f7c7b6f110", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17531, "upload_time": "2017-05-18T11:42:08", "upload_time_iso_8601": "2017-05-18T11:42:08.333979Z", "url": "https://files.pythonhosted.org/packages/55/83/2ad9eeb145adc91cd73cacf88b683cec8064183a5e1317cc6a45dcf38f27/climatecontrol-0.2.6.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "72fe326af8983d316ffbbf62cd63c1d5", "sha256": "2bd12cd8e9ec474818e0b47cda2c23026e05701f292e376348599f9fa4de8c4a"}, "downloads": -1, "filename": "climatecontrol-0.3.tar.gz", "has_sig": false, "md5_digest": "72fe326af8983d316ffbbf62cd63c1d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20629, "upload_time": "2017-08-04T09:13:31", "upload_time_iso_8601": "2017-08-04T09:13:31.701829Z", "url": "https://files.pythonhosted.org/packages/c4/b1/218f02ad10a3a4e669fbf8be1cfff54dd5394432bb0e6c4125a47377597b/climatecontrol-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "e95e06ba544f035e8b5beaead0c89522", "sha256": "57b5c3422fc6345d489e06d682eb051df2946490dfe8c1ab453fa0d257675d86"}, "downloads": -1, "filename": "climatecontrol-0.3.1.tar.gz", "has_sig": false, "md5_digest": "e95e06ba544f035e8b5beaead0c89522", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20804, "upload_time": "2017-08-17T22:09:44", "upload_time_iso_8601": "2017-08-17T22:09:44.436587Z", "url": "https://files.pythonhosted.org/packages/43/9b/98f161eddc0307c3f576b0a4e64e353432018efe15f8c0653beb091a2d3c/climatecontrol-0.3.1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "be58fd56181718e1432c65f3a09aaff0", "sha256": "74fa6baaaa525f456bbcea8cd4cc2a42f06f9d06786f0e2a85767d34cbe8634e"}, "downloads": -1, "filename": "climatecontrol-0.4.tar.gz", "has_sig": false, "md5_digest": "be58fd56181718e1432c65f3a09aaff0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20870, "upload_time": "2017-08-21T23:33:34", "upload_time_iso_8601": "2017-08-21T23:33:34.482957Z", "url": "https://files.pythonhosted.org/packages/ba/bc/b0d2baddbf12f7c7bc5c0757c503f46441b0bb62753468966801bb35349e/climatecontrol-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "5fc9d78a7942bd821e23f63ff4c9881f", "sha256": "06b512e3e0e884e842319939a7a107ad5ef8505b2d05082628b5e157d6e06953"}, "downloads": -1, "filename": "climatecontrol-0.4.1.tar.gz", "has_sig": false, "md5_digest": "5fc9d78a7942bd821e23f63ff4c9881f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20932, "upload_time": "2017-10-04T11:09:00", "upload_time_iso_8601": "2017-10-04T11:09:00.968590Z", "url": "https://files.pythonhosted.org/packages/84/34/9bd7f8b1c89f465b9b0e911f00a12c83d80d7549014efb8c2a529801daf2/climatecontrol-0.4.1.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "a8ddc2962a0f0fe1aa6e946e4e061ed7", "sha256": "9eaba619b1de591a6a45942b449bd806116d0b4014f368ea28355f9ecceae307"}, "downloads": -1, "filename": "climatecontrol-0.5.tar.gz", "has_sig": false, "md5_digest": "a8ddc2962a0f0fe1aa6e946e4e061ed7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21371, "upload_time": "2018-03-13T21:23:55", "upload_time_iso_8601": "2018-03-13T21:23:55.867683Z", "url": "https://files.pythonhosted.org/packages/64/09/5b0f12be2dc42c31d11f99c0d02a7fe3b77d91fbfbc3e68899c58bffd5e5/climatecontrol-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "acbb9117c2274edf6db8a985eb999937", "sha256": "fe92447934a0003e8d929051d12fdc516024165ba453a514e0110fb3db3756cd"}, "downloads": -1, "filename": "climatecontrol-0.6.tar.gz", "has_sig": false, "md5_digest": "acbb9117c2274edf6db8a985eb999937", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22742, "upload_time": "2018-04-22T21:17:47", "upload_time_iso_8601": "2018-04-22T21:17:47.665323Z", "url": "https://files.pythonhosted.org/packages/cd/ad/451e3a0d3773dc8ff7ea030f0fe8eedfdd9318f16903a3f4fa930b3dc36b/climatecontrol-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "f5c2bc87df9dba59b472541fdc2ef9cd", "sha256": "e57f2b0ab9ad71d0815e637cfca5f3a43484dcc3e20a7c3a5df4e9abc181f4fa"}, "downloads": -1, "filename": "climatecontrol-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f5c2bc87df9dba59b472541fdc2ef9cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18148, "upload_time": "2018-07-28T22:08:54", "upload_time_iso_8601": "2018-07-28T22:08:54.554728Z", "url": "https://files.pythonhosted.org/packages/eb/a3/1ed63cb2b1ab3ff55cbfda18f5f3d0999686fbe462a5b2f4fab848a4f7eb/climatecontrol-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4221ab46492d92d29cb196e206525d52", "sha256": "d694bafa03e370fcb81fb9983331cdbb69cafa4b9b8eb9facd9b29e9c1d2eead"}, "downloads": -1, "filename": "climatecontrol-0.7.tar.gz", "has_sig": false, "md5_digest": "4221ab46492d92d29cb196e206525d52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23629, "upload_time": "2018-07-28T21:59:48", "upload_time_iso_8601": "2018-07-28T21:59:48.249603Z", "url": "https://files.pythonhosted.org/packages/ec/22/587d2abddb2187b64a5559c938092f4c0e07fd0a4119962812d82a4aadb3/climatecontrol-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "7324ffe258ec394b1f826388536257dd", "sha256": "f6dc4b7b5c638eee2899abb9f2d760dfbabc74d819cf4dfb22fe475480b3350e"}, "downloads": -1, "filename": "climatecontrol-0.7.1.tar.gz", "has_sig": false, "md5_digest": "7324ffe258ec394b1f826388536257dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23644, "upload_time": "2018-08-14T20:34:59", "upload_time_iso_8601": "2018-08-14T20:34:59.664723Z", "url": "https://files.pythonhosted.org/packages/8b/37/443108d00807fa8287d8c8876254de4a84ab1367876d9b7e82f34b40f427/climatecontrol-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "29728214c6e449d6a633595a1bea0daf", "sha256": "be4fae47b82d7da0de57e325415638a815306e4ca582866cc6bcddb4430df6e7"}, "downloads": -1, "filename": "climatecontrol-0.7.2.tar.gz", "has_sig": false, "md5_digest": "29728214c6e449d6a633595a1bea0daf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23094, "upload_time": "2018-10-04T11:50:09", "upload_time_iso_8601": "2018-10-04T11:50:09.978162Z", "url": "https://files.pythonhosted.org/packages/21/87/e45f8458a3618e3327e745518dab2c9e33840d617fb0d133e2db59054262/climatecontrol-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "750477371ebaf778df27d9bc18bb2f95", "sha256": "cf32fa25216fa63925841c4b4ec0d020d332f5d2f01b845afd0963d0852656d9"}, "downloads": -1, "filename": "climatecontrol-0.7.3.tar.gz", "has_sig": false, "md5_digest": "750477371ebaf778df27d9bc18bb2f95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24450, "upload_time": "2019-01-17T21:04:51", "upload_time_iso_8601": "2019-01-17T21:04:51.343944Z", "url": "https://files.pythonhosted.org/packages/11/60/416ef8efb78e7d08d3fd562f92b3f5b1eb40d57f2096112920f066facdb4/climatecontrol-0.7.3.tar.gz", "yanked": false}], "0.7.3.post1": [{"comment_text": "", "digests": {"md5": "5da00f12761d3cf6e3c3ef4a2614e6c7", "sha256": "3ec7122ac01026d55d1f8da8a13ef8fb6e77e171825f6aa7000ac8adbded7df5"}, "downloads": -1, "filename": "climatecontrol-0.7.3.post1.tar.gz", "has_sig": false, "md5_digest": "5da00f12761d3cf6e3c3ef4a2614e6c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24462, "upload_time": "2019-01-17T21:23:06", "upload_time_iso_8601": "2019-01-17T21:23:06.798978Z", "url": "https://files.pythonhosted.org/packages/cf/b8/d894e01b654b75bfa3326c370fcc38a4e2f6881371b1d801ebe8bc3a21d8/climatecontrol-0.7.3.post1.tar.gz", "yanked": false}], "0.7.3.post2": [{"comment_text": "", "digests": {"md5": "1a4f3403a2fdf0ec598c324ae4a3e90c", "sha256": "927023f926ce7af663cba80561bddef0e6714a3545220b1a6ed7508dab7938aa"}, "downloads": -1, "filename": "climatecontrol-0.7.3.post2.tar.gz", "has_sig": false, "md5_digest": "1a4f3403a2fdf0ec598c324ae4a3e90c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24494, "upload_time": "2019-01-17T22:10:53", "upload_time_iso_8601": "2019-01-17T22:10:53.137092Z", "url": "https://files.pythonhosted.org/packages/d4/83/ea35248d0433ab3f9109eedd23fedb58cf2efbc4a93b39ebb1ec9dbb6565/climatecontrol-0.7.3.post2.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "fe532e62038ef37693071e6da2836965", "sha256": "e053180854b85435666be092176e82c928279fa48bbf4d586226e7b377ec5ff9"}, "downloads": -1, "filename": "climatecontrol-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fe532e62038ef37693071e6da2836965", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26564, "upload_time": "2020-02-26T22:49:47", "upload_time_iso_8601": "2020-02-26T22:49:47.698064Z", "url": "https://files.pythonhosted.org/packages/42/0c/3de3712f555e565e84b23c5fdb8c28ea0c0632737c87d31deac02be7d887/climatecontrol-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be3cb81b4bcc904d731e67687d1a8bc2", "sha256": "902aa9b6f15eec8d0ee36a3c6d6aed30e0f45d2dbf85d544792b069bbe3b63e9"}, "downloads": -1, "filename": "climatecontrol-0.8.0.tar.gz", "has_sig": false, "md5_digest": "be3cb81b4bcc904d731e67687d1a8bc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40060, "upload_time": "2020-02-26T22:49:49", "upload_time_iso_8601": "2020-02-26T22:49:49.754536Z", "url": "https://files.pythonhosted.org/packages/bc/9e/7a7f2da493aec13e1bee07701f6056707aa6b1489b3a4642bc40a10c2503/climatecontrol-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe532e62038ef37693071e6da2836965", "sha256": "e053180854b85435666be092176e82c928279fa48bbf4d586226e7b377ec5ff9"}, "downloads": -1, "filename": "climatecontrol-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fe532e62038ef37693071e6da2836965", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26564, "upload_time": "2020-02-26T22:49:47", "upload_time_iso_8601": "2020-02-26T22:49:47.698064Z", "url": "https://files.pythonhosted.org/packages/42/0c/3de3712f555e565e84b23c5fdb8c28ea0c0632737c87d31deac02be7d887/climatecontrol-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be3cb81b4bcc904d731e67687d1a8bc2", "sha256": "902aa9b6f15eec8d0ee36a3c6d6aed30e0f45d2dbf85d544792b069bbe3b63e9"}, "downloads": -1, "filename": "climatecontrol-0.8.0.tar.gz", "has_sig": false, "md5_digest": "be3cb81b4bcc904d731e67687d1a8bc2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40060, "upload_time": "2020-02-26T22:49:49", "upload_time_iso_8601": "2020-02-26T22:49:49.754536Z", "url": "https://files.pythonhosted.org/packages/bc/9e/7a7f2da493aec13e1bee07701f6056707aa6b1489b3a4642bc40a10c2503/climatecontrol-0.8.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:59 2020"}