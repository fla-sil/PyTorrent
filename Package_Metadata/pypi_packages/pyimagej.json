{"info": {"author": "Curtis Rueden, Leon Yang, Yang Liu, Michael Pinkert", "author_email": "ctrueden@wisc.edu", "bugtrack_url": null, "classifiers": [], "description": "# Python wrapper for ImageJ\n\n[`pyimagej`](https://github.com/imagej/pyimagej) provides a set of\nwrapper functions for integration between ImageJ and Python.\n\nIt also provides a high-level entry point `imagej.IJ` for invoking\n[ImageJ Server](https://github.com/imagej/imagej-server) APIs;\nsee \"ImageJ Server\" below for details.\n\n## Installation\n\n1. Install [Conda](https://conda.io/):\n    * On Windows, install Conda using [Chocolatey](https://chocolatey.org): `choco install miniconda3`\n    * On macOS, install Conda using [Homebrew](https://brew.sh): `brew install miniconda`\n    * On Linux, install Conda using its [RPM or Debian package](https://www.anaconda.com/rpm-and-debian-repositories-for-miniconda/), or [with the Miniconda install script](https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html).\n\n2. [Activate the conda-forge channel](https://conda-forge.org/docs/user/introduction.html#how-can-i-install-packages-from-conda-forge):\n    ```\n    conda config --add channels conda-forge\n    conda config --set channel_priority strict\n    ```\n\n3. Install pyimagej into a new conda environment:\n    ```\n    conda create -n pyimagej pyimagej openjdk=8\n    ```\n\n4. Whenever you want to use pyimagej, activate its environment:\n    ```\n    conda activate pyimagej\n    ```\n\n### Installation asides\n\n* If you want to use [scikit-image](https://scikit-image.org/) in conjunction, as demonstrated below, you can install it also via:\n\n    ```\n    conda install scikit-image\n    ```\n\n* The above command installs pyimagej with OpenJDK 8; if you leave off the `openjdk=8` it will install OpenJDK 11 by default, which should also work, but is less well tested and may have more rough edges.\n\n* It is possible to dynamically install pyimagej from within a Jupyter notebook:\n\n    ```\n    import sys\n    !conda install --yes --prefix {sys.prefix} -c conda-forge pyimagej openjdk=8\n    ```\n\n* If you would prefer to install pyimagej via pip, more legwork is required. See [this thread](https://forum.image.sc/t/how-do-i-install-pyimagej/23189/4) for hints.\n\n## Usage\n\n### Quick start\n\nSee [this Jupyter notebook](https://nbviewer.jupyter.org/github/imagej/tutorials/blob/master/notebooks/1-Using-ImageJ/6-ImageJ-with-Python-Kernel.ipynb).\n\n### Creating the ImageJ gateway\n\n#### Newest available version\n\nIf you want to launch the newest available release version of ImageJ:\n\n```python\nimport imagej\nij = imagej.init()\n```\n\nThis invocation will automatically download and cache the newest release of\n[net.imagej:imagej](http://maven.imagej.net/#nexus-search;gav~net.imagej~imagej~~~).\n\n#### Explicitly specified version\n\nYou can specify a particular version, to facilitate reproducibility:\n\n```python\nimport imagej\nij = imagej.init('2.0.0-rc-68')\nij.getVersion()\n```\n\n#### With graphical capabilities\n\nIf you want to have support for the graphical user interface:\n\n```python\nimport imagej\nij = imagej.init(headless=False)\nij.ui().showUI()\n```\n\nNote there are issues with Java AWT via Python on macOS; see\n[this article](https://github.com/imglib/imglyb#awt-through-pyjnius-on-osx)\nfor a workaround.\n\n#### Including ImageJ 1.x support\n\nBy default, the ImageJ gateway will not include the\n[legacy layer](https://imagej.net/Legacy) for backwards compatibility with\n[ImageJ 1.x](https://imagej.net/ImageJ1).\nYou can enable the legacy layer as follows:\n\n```python\nimport imagej\nij = imagej.init('net.imagej:imagej+net.imagej:imagej-legacy')\n```\n\n#### Including Fiji plugins\n\nBy default, the ImageJ gateway will include base ImageJ2 functionality only,\nwithout additional plugins such as those that ship with the\n[Fiji](https://fiji.sc/) distribution of ImageJ.\n\nYou can create an ImageJ gateway including Fiji plugins as follows:\n\n```python\nimport imagej\nij = imagej.init('sc.fiji:fiji')\n```\n\n#### From a local installation\n\nIf you have an installation of [ImageJ2](https://imagej.net/ImageJ2)\nsuch as [Fiji](https://fiji.sc/), you can wrap an ImageJ gateway around it:\n\n```python\nimport imagej\nij = imagej.init('/Applications/Fiji.app')\n```\n\nReplace `/Applications/Fiji.app` with the actual location of your installation.\n\n#### With more memory available to Java\n\nJava's virtual machine (the JVM) has a \"max heap\" value limiting how much\nmemory it can use. You can increase the value as follows:\n\n```python\nimport scyjava_config\nscyjava_config.add_options('-Xmx6g')\nimport imagej\nij = imagej.init()\n```\n\nReplace `6g` with the amount of memory Java should have. You can also pass\n[other JVM arguments](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html).\n\n### Using the ImageJ gateway\n\nOnce you have your ImageJ gateway, you can start using it. Here is an example:\n\n```python\n# Import an image with scikit-image.\nimport skimage\nfrom skimage import io\n# NB: Blood vessel image from: https://www.fi.edu/heart/blood-vessels\nimg = io.imread('https://www.fi.edu/sites/fi.live.franklinds.webair.com/files/styles/featured_large/public/General_EduRes_Heart_BloodVessels_0.jpg')\nimport numpy as np\nimg = np.mean(img, axis=2)\n\n# Invoke ImageJ's Frangi vesselness op.\nvessels = np.zeros(img.shape, dtype=img.dtype)\nij.op().filter().frangiVesselness(ij.py.to_java(vessels), ij.py.to_java(img), [1, 1], 20)\n```\n\nSee also `test/test_imagej.py` for other examples of usage.\n\n\n# ImageJ Server\n\n## Requirements\n\nThe imagej.server module has its own requirements:\n\n* `requests` is required to communicate with the ImageJ server.\n* `pillow` is required for the `imagej.server.IJ.show()` function.\n  In addition, `display` or `xv` must be available to view the image.\n\n## Usage\n\nThere is a short usage example\n[here](https://github.com/imagej/imagej.py/blob/master/imagej/server/usage.py).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/imagej/pyimagej", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pyimagej", "package_url": "https://pypi.org/project/pyimagej/", "platform": "any", "project_url": "https://pypi.org/project/pyimagej/", "project_urls": {"Homepage": "https://github.com/imagej/pyimagej"}, "release_url": "https://pypi.org/project/pyimagej/0.5.0/", "requires_dist": ["imglyb", "matplotlib", "numpy", "pyjnius", "scyjava", "pillow", "requests"], "requires_python": "", "summary": "Python wrapper for ImageJ", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python wrapper for ImageJ</h1>\n<p><a href=\"https://github.com/imagej/pyimagej\" rel=\"nofollow\"><code>pyimagej</code></a> provides a set of\nwrapper functions for integration between ImageJ and Python.</p>\n<p>It also provides a high-level entry point <code>imagej.IJ</code> for invoking\n<a href=\"https://github.com/imagej/imagej-server\" rel=\"nofollow\">ImageJ Server</a> APIs;\nsee \"ImageJ Server\" below for details.</p>\n<h2>Installation</h2>\n<ol>\n<li>\n<p>Install <a href=\"https://conda.io/\" rel=\"nofollow\">Conda</a>:</p>\n<ul>\n<li>On Windows, install Conda using <a href=\"https://chocolatey.org\" rel=\"nofollow\">Chocolatey</a>: <code>choco install miniconda3</code></li>\n<li>On macOS, install Conda using <a href=\"https://brew.sh\" rel=\"nofollow\">Homebrew</a>: <code>brew install miniconda</code></li>\n<li>On Linux, install Conda using its <a href=\"https://www.anaconda.com/rpm-and-debian-repositories-for-miniconda/\" rel=\"nofollow\">RPM or Debian package</a>, or <a href=\"https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html\" rel=\"nofollow\">with the Miniconda install script</a>.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://conda-forge.org/docs/user/introduction.html#how-can-i-install-packages-from-conda-forge\" rel=\"nofollow\">Activate the conda-forge channel</a>:</p>\n<pre><code>conda config --add channels conda-forge\nconda config --set channel_priority strict\n</code></pre>\n</li>\n<li>\n<p>Install pyimagej into a new conda environment:</p>\n<pre><code>conda create -n pyimagej pyimagej openjdk=8\n</code></pre>\n</li>\n<li>\n<p>Whenever you want to use pyimagej, activate its environment:</p>\n<pre><code>conda activate pyimagej\n</code></pre>\n</li>\n</ol>\n<h3>Installation asides</h3>\n<ul>\n<li>\n<p>If you want to use <a href=\"https://scikit-image.org/\" rel=\"nofollow\">scikit-image</a> in conjunction, as demonstrated below, you can install it also via:</p>\n<pre><code>conda install scikit-image\n</code></pre>\n</li>\n<li>\n<p>The above command installs pyimagej with OpenJDK 8; if you leave off the <code>openjdk=8</code> it will install OpenJDK 11 by default, which should also work, but is less well tested and may have more rough edges.</p>\n</li>\n<li>\n<p>It is possible to dynamically install pyimagej from within a Jupyter notebook:</p>\n<pre><code>import sys\n!conda install --yes --prefix {sys.prefix} -c conda-forge pyimagej openjdk=8\n</code></pre>\n</li>\n<li>\n<p>If you would prefer to install pyimagej via pip, more legwork is required. See <a href=\"https://forum.image.sc/t/how-do-i-install-pyimagej/23189/4\" rel=\"nofollow\">this thread</a> for hints.</p>\n</li>\n</ul>\n<h2>Usage</h2>\n<h3>Quick start</h3>\n<p>See <a href=\"https://nbviewer.jupyter.org/github/imagej/tutorials/blob/master/notebooks/1-Using-ImageJ/6-ImageJ-with-Python-Kernel.ipynb\" rel=\"nofollow\">this Jupyter notebook</a>.</p>\n<h3>Creating the ImageJ gateway</h3>\n<h4>Newest available version</h4>\n<p>If you want to launch the newest available release version of ImageJ:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">imagej</span>\n<span class=\"n\">ij</span> <span class=\"o\">=</span> <span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n</pre>\n<p>This invocation will automatically download and cache the newest release of\n<a href=\"http://maven.imagej.net/#nexus-search;gav%7Enet.imagej%7Eimagej%7E%7E%7E\" rel=\"nofollow\">net.imagej:imagej</a>.</p>\n<h4>Explicitly specified version</h4>\n<p>You can specify a particular version, to facilitate reproducibility:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">imagej</span>\n<span class=\"n\">ij</span> <span class=\"o\">=</span> <span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'2.0.0-rc-68'</span><span class=\"p\">)</span>\n<span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"n\">getVersion</span><span class=\"p\">()</span>\n</pre>\n<h4>With graphical capabilities</h4>\n<p>If you want to have support for the graphical user interface:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">imagej</span>\n<span class=\"n\">ij</span> <span class=\"o\">=</span> <span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">headless</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"n\">ui</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">showUI</span><span class=\"p\">()</span>\n</pre>\n<p>Note there are issues with Java AWT via Python on macOS; see\n<a href=\"https://github.com/imglib/imglyb#awt-through-pyjnius-on-osx\" rel=\"nofollow\">this article</a>\nfor a workaround.</p>\n<h4>Including ImageJ 1.x support</h4>\n<p>By default, the ImageJ gateway will not include the\n<a href=\"https://imagej.net/Legacy\" rel=\"nofollow\">legacy layer</a> for backwards compatibility with\n<a href=\"https://imagej.net/ImageJ1\" rel=\"nofollow\">ImageJ 1.x</a>.\nYou can enable the legacy layer as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">imagej</span>\n<span class=\"n\">ij</span> <span class=\"o\">=</span> <span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'net.imagej:imagej+net.imagej:imagej-legacy'</span><span class=\"p\">)</span>\n</pre>\n<h4>Including Fiji plugins</h4>\n<p>By default, the ImageJ gateway will include base ImageJ2 functionality only,\nwithout additional plugins such as those that ship with the\n<a href=\"https://fiji.sc/\" rel=\"nofollow\">Fiji</a> distribution of ImageJ.</p>\n<p>You can create an ImageJ gateway including Fiji plugins as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">imagej</span>\n<span class=\"n\">ij</span> <span class=\"o\">=</span> <span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'sc.fiji:fiji'</span><span class=\"p\">)</span>\n</pre>\n<h4>From a local installation</h4>\n<p>If you have an installation of <a href=\"https://imagej.net/ImageJ2\" rel=\"nofollow\">ImageJ2</a>\nsuch as <a href=\"https://fiji.sc/\" rel=\"nofollow\">Fiji</a>, you can wrap an ImageJ gateway around it:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">imagej</span>\n<span class=\"n\">ij</span> <span class=\"o\">=</span> <span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"s1\">'/Applications/Fiji.app'</span><span class=\"p\">)</span>\n</pre>\n<p>Replace <code>/Applications/Fiji.app</code> with the actual location of your installation.</p>\n<h4>With more memory available to Java</h4>\n<p>Java's virtual machine (the JVM) has a \"max heap\" value limiting how much\nmemory it can use. You can increase the value as follows:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scyjava_config</span>\n<span class=\"n\">scyjava_config</span><span class=\"o\">.</span><span class=\"n\">add_options</span><span class=\"p\">(</span><span class=\"s1\">'-Xmx6g'</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">imagej</span>\n<span class=\"n\">ij</span> <span class=\"o\">=</span> <span class=\"n\">imagej</span><span class=\"o\">.</span><span class=\"n\">init</span><span class=\"p\">()</span>\n</pre>\n<p>Replace <code>6g</code> with the amount of memory Java should have. You can also pass\n<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\" rel=\"nofollow\">other JVM arguments</a>.</p>\n<h3>Using the ImageJ gateway</h3>\n<p>Once you have your ImageJ gateway, you can start using it. Here is an example:</p>\n<pre><span class=\"c1\"># Import an image with scikit-image.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">skimage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">skimage</span> <span class=\"kn\">import</span> <span class=\"n\">io</span>\n<span class=\"c1\"># NB: Blood vessel image from: https://www.fi.edu/heart/blood-vessels</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"s1\">'https://www.fi.edu/sites/fi.live.franklinds.webair.com/files/styles/featured_large/public/General_EduRes_Heart_BloodVessels_0.jpg'</span><span class=\"p\">)</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Invoke ImageJ's Frangi vesselness op.</span>\n<span class=\"n\">vessels</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">frangiVesselness</span><span class=\"p\">(</span><span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"o\">.</span><span class=\"n\">to_java</span><span class=\"p\">(</span><span class=\"n\">vessels</span><span class=\"p\">),</span> <span class=\"n\">ij</span><span class=\"o\">.</span><span class=\"n\">py</span><span class=\"o\">.</span><span class=\"n\">to_java</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<p>See also <code>test/test_imagej.py</code> for other examples of usage.</p>\n<h1>ImageJ Server</h1>\n<h2>Requirements</h2>\n<p>The imagej.server module has its own requirements:</p>\n<ul>\n<li><code>requests</code> is required to communicate with the ImageJ server.</li>\n<li><code>pillow</code> is required for the <code>imagej.server.IJ.show()</code> function.\nIn addition, <code>display</code> or <code>xv</code> must be available to view the image.</li>\n</ul>\n<h2>Usage</h2>\n<p>There is a short usage example\n<a href=\"https://github.com/imagej/imagej.py/blob/master/imagej/server/usage.py\" rel=\"nofollow\">here</a>.</p>\n\n          </div>"}, "last_serial": 6266595, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "c3020b50891314c957d92b152192f58c", "sha256": "11472afef43d61046c83a3aad318a1430bc11876e88044a288954fdafa8dbd29"}, "downloads": -1, "filename": "pyimagej-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c3020b50891314c957d92b152192f58c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7342, "upload_time": "2018-12-03T06:06:46", "upload_time_iso_8601": "2018-12-03T06:06:46.206654Z", "url": "https://files.pythonhosted.org/packages/c9/de/ea24d0e71c00b9f66be7063c3e2a8c1d3c8b787ba768f31b6aab7f5d50c5/pyimagej-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ea8bab1a8d059df4837f0e1646a1802", "sha256": "523dd9a9a52639e786fc8639a028131ddcbdfacf7f89609f1df96b7dd784f61c"}, "downloads": -1, "filename": "pyimagej-0.4.0.tar.gz", "has_sig": false, "md5_digest": "9ea8bab1a8d059df4837f0e1646a1802", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7710, "upload_time": "2018-12-03T06:06:48", "upload_time_iso_8601": "2018-12-03T06:06:48.425586Z", "url": "https://files.pythonhosted.org/packages/68/a4/d22ea494423f7a4c7ca99b31ea7f1007b9f6bd4e9221c04a67a0373dbc58/pyimagej-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "d819c36aa9384c6ffd45aef2187a2fea", "sha256": "d93b4ca9f61887ac26fd478ce8bf5c1b2d274907dab38bc6da9da221c33d1522"}, "downloads": -1, "filename": "pyimagej-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "d819c36aa9384c6ffd45aef2187a2fea", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 8894, "upload_time": "2019-11-01T20:17:01", "upload_time_iso_8601": "2019-11-01T20:17:01.668268Z", "url": "https://files.pythonhosted.org/packages/c8/e1/0baf96a878bb70f4fe21e8c1103e94aa5a5d3c17433f4034019bb4e96274/pyimagej-0.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "389264bbc1ea555616475cc1a4ccfe2f", "sha256": "8774772b5d5c8189e8ba6a217713f10ff3a5815e7005ee0933822f52650243d0"}, "downloads": -1, "filename": "pyimagej-0.5.0.tar.gz", "has_sig": false, "md5_digest": "389264bbc1ea555616475cc1a4ccfe2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9439, "upload_time": "2019-11-01T20:17:03", "upload_time_iso_8601": "2019-11-01T20:17:03.194496Z", "url": "https://files.pythonhosted.org/packages/22/26/6a7417193a9975acd9528c47f6e9a650dea15c50b45b809e0da930050c1b/pyimagej-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d819c36aa9384c6ffd45aef2187a2fea", "sha256": "d93b4ca9f61887ac26fd478ce8bf5c1b2d274907dab38bc6da9da221c33d1522"}, "downloads": -1, "filename": "pyimagej-0.5.0-py2-none-any.whl", "has_sig": false, "md5_digest": "d819c36aa9384c6ffd45aef2187a2fea", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 8894, "upload_time": "2019-11-01T20:17:01", "upload_time_iso_8601": "2019-11-01T20:17:01.668268Z", "url": "https://files.pythonhosted.org/packages/c8/e1/0baf96a878bb70f4fe21e8c1103e94aa5a5d3c17433f4034019bb4e96274/pyimagej-0.5.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "389264bbc1ea555616475cc1a4ccfe2f", "sha256": "8774772b5d5c8189e8ba6a217713f10ff3a5815e7005ee0933822f52650243d0"}, "downloads": -1, "filename": "pyimagej-0.5.0.tar.gz", "has_sig": false, "md5_digest": "389264bbc1ea555616475cc1a4ccfe2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9439, "upload_time": "2019-11-01T20:17:03", "upload_time_iso_8601": "2019-11-01T20:17:03.194496Z", "url": "https://files.pythonhosted.org/packages/22/26/6a7417193a9975acd9528c47f6e9a650dea15c50b45b809e0da930050c1b/pyimagej-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:06 2020"}