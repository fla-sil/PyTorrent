{"info": {"author": "Gorinenko Anton", "author_email": "anton.gorinenko@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# What's the good of that?\n[![PyPI version](https://badge.fury.io/py/try-parse.svg)](https://pypi.org/project/try-parse/)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/try-parse)](https://img.shields.io/pypi/pyversions/try-parse)\n[![License](https://img.shields.io/pypi/l/try-parse)](https://img.shields.io/pypi/l/try-parse)\n1. Cast the string representation of simple objects to the desired type.\n1. Safe type casting. The exception will not be thrown. The function returns status and result.\n## install\n```\npip install try-parse\n```\n## import\n``` python\nfrom try_parse.utils import ParseUtils\n```\n## try_parse_date\nParse object to date\n``` python\nstatus, target = ParseUtils.try_parse_date('2018-11-23')\nself.assertTrue(status)\nself.assertIsInstance(target, date)\nself.assertEqual(target, date(2018, 11, 23))\n\n# See format https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\nstatus, target = ParseUtils.try_parse_date('23.11.2018', format='%d.%m.%Y')\nself.assertTrue(status)\nself.assertIsInstance(target, date)\nself.assertEqual(target, date(2018, 11, 23))\n\nstatus, target = ParseUtils.try_parse_date('Invalid')\nself.assertFalse(status)\nself.assertIsNone(target)\n```\n## try_parse_datetime\nParse object to datetime\n``` python\nstatus, target = ParseUtils.try_parse_datetime('2018-11-23 01:45:59')\nself.assertTrue(status)\nself.assertIsInstance(target, datetime)\nself.assertEqual(target, datetime(2018, 11, 23, 1, 45, 59))\n\n# See format https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\nstatus, target = ParseUtils.try_parse_datetime('23.11.2018T01:45:59', format='%d.%m.%YT%H:%M:%S')\nself.assertTrue(status)\nself.assertIsInstance(target, datetime)\nself.assertEqual(target, datetime(2018, 11, 23, 1, 45, 59))\n\nstatus, target = ParseUtils.try_parse_datetime('Invalid')\nself.assertFalse(status)\nself.assertIsNone(target)\n```\n## try_parse_int\nParse object to int\n``` python\nstatus, target = ParseUtils.try_parse_int('19')\nself.assertTrue(status)\nself.assertIsInstance(target, int)\nself.assertEqual(target, 19)\n\nstatus, target = ParseUtils.try_parse_int('Invalid')\nself.assertFalse(status)\nself.assertIsNone(target)\n```\n## try_parse_float\nParse object to float\n``` python\nstatus, target = ParseUtils.try_parse_float('19.00')\nself.assertTrue(status)\nself.assertIsInstance(target, float)\nself.assertEqual(target, 19.00)\n\nstatus, target = ParseUtils.try_parse_float('Invalid')\nself.assertFalse(status)\nself.assertIsNone(target)\n```\n## try_parse_decimal\nParse object to decimal\n``` python\nstatus, target = ParseUtils.try_parse_decimal('19.00')\nself.assertTrue(status)\nself.assertIsInstance(target, Decimal)\nself.assertEqual(target, Decimal(19))\n\nstatus, target = ParseUtils.try_parse_decimal('Invalid')\nself.assertFalse(status)\nself.assertIsNone(target)\n```\n## try_parse_bool\nParse object to bool\n``` python\nfor p in [\"yes\", \"true\", \"t\", \"1\", 1]:\n    status, target = ParseUtils.try_parse_bool(p)\n    self.assertTrue(status)\n    self.assertIsInstance(target, bool)\n    self.assertTrue(target)\n\nstatus, target = ParseUtils.try_parse_bool('Invalid')\nself.assertFalse(status)\nself.assertIsNone(target)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/agorinenko/try-parse", "keywords": "python,parse,cast", "license": "", "maintainer": "", "maintainer_email": "", "name": "try-parse", "package_url": "https://pypi.org/project/try-parse/", "platform": "", "project_url": "https://pypi.org/project/try-parse/", "project_urls": {"Homepage": "https://github.com/agorinenko/try-parse"}, "release_url": "https://pypi.org/project/try-parse/0.0.8/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Easily and safety cast objects to the desired data type", "version": "0.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>What's the good of that?</h1>\n<p><a href=\"https://pypi.org/project/try-parse/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/287883aac5f5c4a9fb40ca3806b1eb2b5ad0cb3d/68747470733a2f2f62616467652e667572792e696f2f70792f7472792d70617273652e737667\"></a>\n<a href=\"https://img.shields.io/pypi/pyversions/try-parse\" rel=\"nofollow\"><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89d6b73bd5295df46ecff7097eb120b9783f7dd5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7472792d7061727365\"></a>\n<a href=\"https://img.shields.io/pypi/l/try-parse\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/334b194b2b1ed536af5f76821c70b05490a7c09a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7472792d7061727365\"></a></p>\n<ol>\n<li>Cast the string representation of simple objects to the desired type.</li>\n<li>Safe type casting. The exception will not be thrown. The function returns status and result.</li>\n</ol>\n<h2>install</h2>\n<pre><code>pip install try-parse\n</code></pre>\n<h2>import</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">try_parse.utils</span> <span class=\"kn\">import</span> <span class=\"n\">ParseUtils</span>\n</pre>\n<h2>try_parse_date</h2>\n<p>Parse object to date</p>\n<pre><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_date</span><span class=\"p\">(</span><span class=\"s1\">'2018-11-23'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># See format https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior</span>\n<span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_date</span><span class=\"p\">(</span><span class=\"s1\">'23.11.2018'</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%d</span><span class=\"s1\">.%m.%Y'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">))</span>\n\n<span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_date</span><span class=\"p\">(</span><span class=\"s1\">'Invalid'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNone</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n</pre>\n<h2>try_parse_datetime</h2>\n<p>Parse object to datetime</p>\n<pre><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_datetime</span><span class=\"p\">(</span><span class=\"s1\">'2018-11-23 01:45:59'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># See format https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior</span>\n<span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_datetime</span><span class=\"p\">(</span><span class=\"s1\">'23.11.2018T01:45:59'</span><span class=\"p\">,</span> <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"si\">%d</span><span class=\"s1\">.%m.%YT%H:%M:%S'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">))</span>\n\n<span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_datetime</span><span class=\"p\">(</span><span class=\"s1\">'Invalid'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNone</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n</pre>\n<h2>try_parse_int</h2>\n<p>Parse object to int</p>\n<pre><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_int</span><span class=\"p\">(</span><span class=\"s1\">'19'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">)</span>\n\n<span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_int</span><span class=\"p\">(</span><span class=\"s1\">'Invalid'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNone</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n</pre>\n<h2>try_parse_float</h2>\n<p>Parse object to float</p>\n<pre><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_float</span><span class=\"p\">(</span><span class=\"s1\">'19.00'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"mf\">19.00</span><span class=\"p\">)</span>\n\n<span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_float</span><span class=\"p\">(</span><span class=\"s1\">'Invalid'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNone</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n</pre>\n<h2>try_parse_decimal</h2>\n<p>Parse object to decimal</p>\n<pre><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_decimal</span><span class=\"p\">(</span><span class=\"s1\">'19.00'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">))</span>\n\n<span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_decimal</span><span class=\"p\">(</span><span class=\"s1\">'Invalid'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNone</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n</pre>\n<h2>try_parse_bool</h2>\n<p>Parse object to bool</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">\"yes\"</span><span class=\"p\">,</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span> <span class=\"s2\">\"t\"</span><span class=\"p\">,</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]:</span>\n    <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_bool</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsInstance</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n\n<span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">ParseUtils</span><span class=\"o\">.</span><span class=\"n\">try_parse_bool</span><span class=\"p\">(</span><span class=\"s1\">'Invalid'</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNone</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6242133, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "162c845090bc41b166f5744c7b1c5116", "sha256": "1c48b2e4db2550d994255709150eb56ea34f14cefff5c853aef582956b92a96d"}, "downloads": -1, "filename": "try_parse-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "162c845090bc41b166f5744c7b1c5116", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3787, "upload_time": "2019-11-27T10:15:29", "upload_time_iso_8601": "2019-11-27T10:15:29.454355Z", "url": "https://files.pythonhosted.org/packages/d4/21/add6cf930090f7ec8cc6264577e249dbf729206c7e54340c534dd7d8da95/try_parse-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "079f4ec45348040c32c7d3cf9e78078e", "sha256": "6009f89713af3ba12e350f8816bd9093688b706993da863e62d8d23c8702ca69"}, "downloads": -1, "filename": "try_parse-0.0.4.tar.gz", "has_sig": false, "md5_digest": "079f4ec45348040c32c7d3cf9e78078e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2246, "upload_time": "2019-11-27T10:15:33", "upload_time_iso_8601": "2019-11-27T10:15:33.695644Z", "url": "https://files.pythonhosted.org/packages/a7/7b/e62e2ffdd27a3fd45ee16926e01aa1cfaa5e95621ec07a48b8d39d142b64/try_parse-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "6c8b6acfea3de70ec64217ad3179c501", "sha256": "88cb3af62dee1c42db79bfadf6dd1960bc50329c9b059f92e1d15513c0a131e4"}, "downloads": -1, "filename": "try_parse-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6c8b6acfea3de70ec64217ad3179c501", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3815, "upload_time": "2019-11-27T10:15:32", "upload_time_iso_8601": "2019-11-27T10:15:32.058805Z", "url": "https://files.pythonhosted.org/packages/7f/03/aee031cf1c5a17893d85d88fa344940d2ec210b284a91176382839edf0fc/try_parse-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0df8f16d13f472cc6557789ba0c872e4", "sha256": "6691a4e9b4d43ce2c6f197a0af6977a26a8946677b06e62d47706f2690412f5b"}, "downloads": -1, "filename": "try_parse-0.0.5.tar.gz", "has_sig": false, "md5_digest": "0df8f16d13f472cc6557789ba0c872e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2256, "upload_time": "2019-11-27T10:15:34", "upload_time_iso_8601": "2019-11-27T10:15:34.952386Z", "url": "https://files.pythonhosted.org/packages/23/bb/0313a2bd54b547bcc52f6de3f22f0fedc5e6ad946de5bb1fb36f3d4c9bbf/try_parse-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "6775ccc48098a18551d321718cc64eeb", "sha256": "76cbb6cc10f161d99f02ed72665dd8cc328391b32f705017278e43cea8199960"}, "downloads": -1, "filename": "try_parse-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6775ccc48098a18551d321718cc64eeb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3920, "upload_time": "2019-11-28T09:06:44", "upload_time_iso_8601": "2019-11-28T09:06:44.757556Z", "url": "https://files.pythonhosted.org/packages/49/2e/343b733c5fa656c314d5a3b23d5e8bb162ef30070c26c9fa5c79a0d90571/try_parse-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1428f575945b30ab8f3ab719bed6ea8f", "sha256": "b1e82d0b0d9cf98bad5e95eab9ddfff6980d49e0443121e0f8147b8fb1fbd1ec"}, "downloads": -1, "filename": "try_parse-0.0.6.tar.gz", "has_sig": false, "md5_digest": "1428f575945b30ab8f3ab719bed6ea8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2438, "upload_time": "2019-11-28T09:06:45", "upload_time_iso_8601": "2019-11-28T09:06:45.975570Z", "url": "https://files.pythonhosted.org/packages/f8/b5/c69fc7e8df7c82baeb4d89eee211ba1f0d961d87a7240442a25944cada7f/try_parse-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "59961708a33688a6a97f63e8bfc266bf", "sha256": "8bf298ef6982ec23bcb535181008784b2d6b9c7377b99ae84608335869921ca4"}, "downloads": -1, "filename": "try_parse-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "59961708a33688a6a97f63e8bfc266bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4331, "upload_time": "2019-12-04T15:09:42", "upload_time_iso_8601": "2019-12-04T15:09:42.176465Z", "url": "https://files.pythonhosted.org/packages/eb/94/b9ac63f622c73a42657e5b559bfbb48dfa2ea715829b3d8389d2caa73544/try_parse-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ba92ed83917e3b9724f387891d47e05", "sha256": "8f6b7234e8ba2d4788ba5284ffc554a247e07dc14962828505e02219e68fee5e"}, "downloads": -1, "filename": "try_parse-0.0.7.tar.gz", "has_sig": false, "md5_digest": "8ba92ed83917e3b9724f387891d47e05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2807, "upload_time": "2019-12-04T15:09:43", "upload_time_iso_8601": "2019-12-04T15:09:43.436363Z", "url": "https://files.pythonhosted.org/packages/f8/00/d7bc6a6ad4db9c06e6e00b67bfa7625c26213e73af0a4da365af2e117217/try_parse-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "f3a9465b32b9225d60058e433e7ca3b5", "sha256": "63e124e342010252756631a73b59f0f75688a64c0da4fc6adae292b34852bc93"}, "downloads": -1, "filename": "try_parse-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f3a9465b32b9225d60058e433e7ca3b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4309, "upload_time": "2019-12-04T15:12:31", "upload_time_iso_8601": "2019-12-04T15:12:31.684218Z", "url": "https://files.pythonhosted.org/packages/c6/45/4e7e2061b5191e642af1402cfd558665b15670a2b45609985f36dba8dcb1/try_parse-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4922e3018b8cc25d71551fcf28ad2fd0", "sha256": "cb4209c575365b19e13a3e0e4ade26112361e16eb1b25b96936249286fdcb060"}, "downloads": -1, "filename": "try_parse-0.0.8.tar.gz", "has_sig": false, "md5_digest": "4922e3018b8cc25d71551fcf28ad2fd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2781, "upload_time": "2019-12-04T15:12:33", "upload_time_iso_8601": "2019-12-04T15:12:33.212842Z", "url": "https://files.pythonhosted.org/packages/5a/49/549ca1028034d5bd6b4c764fd383f63a6c04a4cc342971d4b5088a059149/try_parse-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f3a9465b32b9225d60058e433e7ca3b5", "sha256": "63e124e342010252756631a73b59f0f75688a64c0da4fc6adae292b34852bc93"}, "downloads": -1, "filename": "try_parse-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "f3a9465b32b9225d60058e433e7ca3b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4309, "upload_time": "2019-12-04T15:12:31", "upload_time_iso_8601": "2019-12-04T15:12:31.684218Z", "url": "https://files.pythonhosted.org/packages/c6/45/4e7e2061b5191e642af1402cfd558665b15670a2b45609985f36dba8dcb1/try_parse-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4922e3018b8cc25d71551fcf28ad2fd0", "sha256": "cb4209c575365b19e13a3e0e4ade26112361e16eb1b25b96936249286fdcb060"}, "downloads": -1, "filename": "try_parse-0.0.8.tar.gz", "has_sig": false, "md5_digest": "4922e3018b8cc25d71551fcf28ad2fd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2781, "upload_time": "2019-12-04T15:12:33", "upload_time_iso_8601": "2019-12-04T15:12:33.212842Z", "url": "https://files.pythonhosted.org/packages/5a/49/549ca1028034d5bd6b4c764fd383f63a6c04a4cc342971d4b5088a059149/try_parse-0.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:46:28 2020"}