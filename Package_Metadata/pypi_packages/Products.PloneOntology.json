{"info": {"author": null, "author_email": null, "bugtrack_url": null, "classifiers": [], "description": "PloneOntology Readme\n====================\n\nOverview\n--------\n\nClassify content with keywords from an (expandable) ontology\n\nFeatures\n~~~~~~~~\n\n* related content is displayed in a portlet, even if not classified with the same keyword (but with a related one...)\n\n* import and export of keyword-ontologies via W3C's Web Ontology Language (OWL)\n\n* Graphviz support visualizes the keywords and their relations within an ontology\n\n* adding keywords and relations to an ontology through a special workflow\n\n* javascript sarissa support for easier classification or keyword adding\n\nRequirements\n------------\n\nMandatory (XXX These may be outdated)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Zope 2.7, 2.8 or higher with Plone 2.1 or higher -- http://plone.org/products/plone/\n\n  *Note that PloneOntology may work with Plone 2.0.5, but that this is not officially supported.*\n\n* Relations 0.7 (UNRELEASED) from http://svn.plone.org is needed when running Plone 2.5.x -- http://svn.plone.org/svn/archetypes/Relations/trunk/ -- for Plone 2.1.x the latest release Relations 0.6b will do -- http://plone.org/products/relations\n\n* Archetypes 1.3.2. or higher (comes with Plone nowadays) -- http://sourceforge.net/projects/archetype\n\n* The latest environment we use consists of Zope 2.9.7, Plone 2.5.3 and Relations 0.7 (UNRELEASED)\n\nOptional\n~~~~~~~~\n\n* Graphviz (Graph Visualization Software) -- http://www.graphviz.org/\n\n* SchemaWeb - resource for ontologies in the owl format. Try importing some of these to see how PloneOntology works. (Here we stumbled upon the beerontology that we use as an example. Thank you, David Aumueller!) -- http://www.schemaweb.info/\n\nFor the most convenient usage, browser clients should have javascript enabled. Also javascript is required when adding References within KeywordProposals. This seems to be a limitation of the addable functionality in the Archetypes ReferenceWidget.\n\nInstallation\n------------\n\nIn the Plone Setup *Add/Remove Products* portlet install the required software (Relations) before installing PloneOntology. If the install was successfull one should see an *Add-on Product Configuration* portlet for PloneOntology.\n\nUsage\n-----\n\nTab *properties*\n~~~~~~~~~~~~~~~~\n\n* general\n\n  * *Search Cutoff*: defines how *far* will be searched for related content. Basicly a cutoff of 1 means that only related content is shown which has been classified with the exact same keyword (although this will depend on how one sets up the relations...see also next section). The cutoff should lie between 0 (exclusive) and 1. A Low cutoff will yield more related content items. High cutoff will yield less related content items (but this content will be highly related)\n\n  * *Keyword Storage*: the id of the folder which holds the keywords. This folder is a special folder which comes with PloneOntology and will be automatically created upon first access. Note that this behaviour will change in the future as a nasty quickinstaller bug that forced this, vanished in newer versions.\n  \n  * *Types that Allow Classification*: choose the content types that shall support classification, i.e 'ATDocument' if you want all standard Documents to be classifiable.\n\n* graphviz general\n\n  * *Forward Relation*: controlls how the Graph is drawn. Will show all Relations that ``go away`` from the central Keyword.  Yet again, changing this value may take a while (see Graphviz Layouter for that).\n\n  * *Backward Relations*: controlls how the Graph is drawn. Will show all Relations that ``point to`` the central Keyword.  (If you want both directions, just activate both.) Here again, changing this value may take a while (see Graphviz Layouter for that).\n\n  * *Graphviz Layouter*: choose the layout algorithm for the automatic graph generation of the keyword map.  quote from graphviz.org: -dot makes ``hierarchical`` or layered drawings of directed graphs.  The layout algorithm aims edges in the same direction (top to bottom, or left to right) and then attempts to avoid edge crossings and reduce edge length.  -neato and fdp make ``spring model`` layouts. neato uses the Kamada-Kawai algorithm, which is equivalent to statistical multi-dimensional scaling. fdp implements the Fruchterman-Reingold heuristic including a multigrid solver that handles larger graphs and clustered undirected graphs.  -twopi radial layout, after Graham Wills 97. The nodes are placed on concentric circles depending their distance from a given root node.  -circo circular layout, after Six and Tollis 99, Kauffman and Wiese 02.  This is suitable for certain diagrams of multiple cyclic structures such as certain telecommunications networks.  You can test different layouts to find which represents your keywordbase best. Note though that this may take a while on sites with many Keywords, as all the Keyword Graphs are redrawn. Probably it is best to try this on a test site first...\n  \n  * *Keyword Font*: set the font in which the keywords are displayed in the graph generated by graphviz.\n  \n  * *Arrow Font*: set the font in which name of the relations between the keywords are displayed in the graph generated by graphviz.\n\n* focus keyword appearance, first keyword appearance, second keyword appearance, arrow appearance\n\n  * The following settings concern the graphviz output for the displayed keywords and relations between them (arrows). When browsing the ontology, the focus keyword is the one you are just viewing. The first keywords are the ones directly related to the focus keyword. The second keywords are the keywords directly related to the first keyword (but not directly to the focus keyword).\n  \n    * *Shape*: select the shape of the arrow or the shape that surrounds the keywordname in the graph.\n      \n    * *Fillcolor*: set the color that fills the *shape*. Use either words or the html color coding starting with \"#\" (i.e. \"blue\" or \"#0000ff\")\n    \n    * *Fontcolor*: set the fontcolor. The usage is the same as for fillcolor.\n    \n    * *Fontsize*: set the fontsize in pixel.\n\nTab *relations*:\n~~~~~~~~~~~~~~~~\n\nAll relation rulsets from the Relations Library should be displayed here. One can edit the relevance factor of the relations here - preferably it should be between 0 (unrelated) and 1 (identical). Lets assume a ruleset *synonymOf* which states that a keyword A is synonym to a keyword B and the other way around. Content classified with keyword A is thus VERY closely related to content classified with keyword B, so the relevance factor should be 1.\n  \nTab *import/export*:\n~~~~~~~~~~~~~~~~~~~~\n\nAn existing Ontology in the OWL format (http://www.w3.org/TR/owl-ref/) can be imported into the site. Complex classes/set operations, local property restrictions and external references are currently unsupported, though. The import might take a while, because graphs are created for each keyword. An example OWL file can be found in the *doc* folder of this product.\n\nAlso the ontology of a site can be exported to an OWL file.\n\nTab *readme*:\n~~~~~~~~~~~~~\n\nshows this text...\n\nAdding Relation Rulesets\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nRelation Rulesets define the possible relations between Keywords e.g. synonym, parent, etc. Rulesets can either be added through the web or via import of an OWL file. For OWL import see above. The example OWL file in the *doc* folder includes examples for custom rulesets.\n\nAdding a ruleset through the web is done in the *Relations Library* folder. Within a ruleset one or more rules can be added. E.g. a ruleset *child of* may have an *Inverse Implicator* rule to the ruleset *parent of*, while a ruleset *synonym* may have an *Inverse Implicator* rule to itself. This ensures all needed relations for logical consistency are created when necessary. For more information see the *README.txt* and other documentation of the *Relations* Product.\n\nImporting Keywords from a file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSee help on the import/export tab.\n\nAdding Keywords and Relations between Keywords through the web\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor a member of the portal the frist step in adding a keyword to the ontology is to add a KeywordProposal. Relations to existing keywords should be added within the edit form of this KeywordProposal. In order to become real Keywords, KeywordProposals have to go through a special workflow. First it gets submitted and gets into the *pending* state. Now a reviewer can *approve* the KeywordProposal. This approval step differs from the default workflow. First of all after approval the KeywordProposal becomes a permanent Keyword which can not be edited by members. The Keyword gets created along with its Relations to the other keywords. Secondly the KeywordProposal moves to a special folder *Accepted KW Proposals*. This was done in order to have an overview of the keywords and relations that have been added by the members of a portal. These KeywordProposals can be deleted without affecting the corresponding Keywords. If one wants to add a Relation between two existing Keywords through the web, one should use the RelationProposal. RelationProposals are added (and treated by the workflow) similar to the KeywordProposals. Accepted RelationProposals are also saved in the *Accepted KW Proposals* folder.\n\nClassifying content and the related portlet\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor all content types that are enabled for classification an additional object tab is displayed, which allows to edit the keyword references of that object.  To add a new keyword, first search for candidates. From the result list pick the ones you want to include and press the 'Add' button.  Removal of keywords is similar. Just select the ones to delete and press the 'Delete' button.  As soon as you classified some objects within your portal, the related portlet shows related content, ranked according to Plone Ontologies scoring mechanism.\n\nMaking a content type classifiable\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo make a custom Archetypes content type classifiable select it in the list of content types within the Plone Ontology configuration panel. In order to make your own custom content types referencable, they should be based on Archetypes (and thus be referencable).Of course you will have to select them also in the Plone Ontology configuration panel.\n\nGetting Graphviz to work with PloneOntology\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAfter the Graphviz installation make sure that the graphviz layouters are found in the system path. If they are not, change the *GV_BIN_PATH* variable in config.py in the *PloneOntology* products folder (be sure to escape the escape character if using windows). Also changing the Graphviz Font to some font installed on your system in the Plone Ontology configuration panel might help to solve some problems.\n", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": null, "keywords": null, "license": null, "maintainer": null, "maintainer_email": null, "name": "Products.PloneOntology", "package_url": "https://pypi.org/project/Products.PloneOntology/", "platform": null, "project_url": "https://pypi.org/project/Products.PloneOntology/", "project_urls": null, "release_url": "https://pypi.org/project/Products.PloneOntology/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Products.PloneOntology", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>Classify content with keywords from an (expandable) ontology</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>related content is displayed in a portlet, even if not classified with the same keyword (but with a related one\u2026)</li>\n<li>import and export of keyword-ontologies via W3C\u2019s Web Ontology Language (OWL)</li>\n<li>Graphviz support visualizes the keywords and their relations within an ontology</li>\n<li>adding keywords and relations to an ontology through a special workflow</li>\n<li>javascript sarissa support for easier classification or keyword adding</li>\n</ul>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<div id=\"mandatory-xxx-these-may-be-outdated\">\n<h3>Mandatory (XXX These may be outdated)</h3>\n<ul>\n<li><p>Zope 2.7, 2.8 or higher with Plone 2.1 or higher \u2013 <a href=\"http://plone.org/products/plone/\" rel=\"nofollow\">http://plone.org/products/plone/</a></p>\n<p><em>Note that PloneOntology may work with Plone 2.0.5, but that this is not officially supported.</em></p>\n</li>\n<li><p>Relations 0.7 (UNRELEASED) from <a href=\"http://svn.plone.org\" rel=\"nofollow\">http://svn.plone.org</a> is needed when running Plone 2.5.x \u2013 <a href=\"http://svn.plone.org/svn/archetypes/Relations/trunk/\" rel=\"nofollow\">http://svn.plone.org/svn/archetypes/Relations/trunk/</a> \u2013 for Plone 2.1.x the latest release Relations 0.6b will do \u2013 <a href=\"http://plone.org/products/relations\" rel=\"nofollow\">http://plone.org/products/relations</a></p>\n</li>\n<li><p>Archetypes 1.3.2. or higher (comes with Plone nowadays) \u2013 <a href=\"http://sourceforge.net/projects/archetype\" rel=\"nofollow\">http://sourceforge.net/projects/archetype</a></p>\n</li>\n<li><p>The latest environment we use consists of Zope 2.9.7, Plone 2.5.3 and Relations 0.7 (UNRELEASED)</p>\n</li>\n</ul>\n</div>\n<div id=\"optional\">\n<h3>Optional</h3>\n<ul>\n<li>Graphviz (Graph Visualization Software) \u2013 <a href=\"http://www.graphviz.org/\" rel=\"nofollow\">http://www.graphviz.org/</a></li>\n<li>SchemaWeb - resource for ontologies in the owl format. Try importing some of these to see how PloneOntology works. (Here we stumbled upon the beerontology that we use as an example. Thank you, David Aumueller!) \u2013 <a href=\"http://www.schemaweb.info/\" rel=\"nofollow\">http://www.schemaweb.info/</a></li>\n</ul>\n<p>For the most convenient usage, browser clients should have javascript enabled. Also javascript is required when adding References within KeywordProposals. This seems to be a limitation of the addable functionality in the Archetypes ReferenceWidget.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>In the Plone Setup <em>Add/Remove Products</em> portlet install the required software (Relations) before installing PloneOntology. If the install was successfull one should see an <em>Add-on Product Configuration</em> portlet for PloneOntology.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"tab-properties\">\n<h3>Tab <em>properties</em></h3>\n<ul>\n<li>general<ul>\n<li><em>Search Cutoff</em>: defines how <em>far</em> will be searched for related content. Basicly a cutoff of 1 means that only related content is shown which has been classified with the exact same keyword (although this will depend on how one sets up the relations\u2026see also next section). The cutoff should lie between 0 (exclusive) and 1. A Low cutoff will yield more related content items. High cutoff will yield less related content items (but this content will be highly related)</li>\n<li><em>Keyword Storage</em>: the id of the folder which holds the keywords. This folder is a special folder which comes with PloneOntology and will be automatically created upon first access. Note that this behaviour will change in the future as a nasty quickinstaller bug that forced this, vanished in newer versions.</li>\n<li><em>Types that Allow Classification</em>: choose the content types that shall support classification, i.e \u2018ATDocument\u2019 if you want all standard Documents to be classifiable.</li>\n</ul>\n</li>\n<li>graphviz general<ul>\n<li><em>Forward Relation</em>: controlls how the Graph is drawn. Will show all Relations that <tt>go away</tt> from the central Keyword.  Yet again, changing this value may take a while (see Graphviz Layouter for that).</li>\n<li><em>Backward Relations</em>: controlls how the Graph is drawn. Will show all Relations that <tt>point to</tt> the central Keyword.  (If you want both directions, just activate both.) Here again, changing this value may take a while (see Graphviz Layouter for that).</li>\n<li><em>Graphviz Layouter</em>: choose the layout algorithm for the automatic graph generation of the keyword map.  quote from graphviz.org: -dot makes <tt>hierarchical</tt> or layered drawings of directed graphs.  The layout algorithm aims edges in the same direction (top to bottom, or left to right) and then attempts to avoid edge crossings and reduce edge length.  -neato and fdp make <tt>spring model</tt> layouts. neato uses the Kamada-Kawai algorithm, which is equivalent to statistical multi-dimensional scaling. fdp implements the Fruchterman-Reingold heuristic including a multigrid solver that handles larger graphs and clustered undirected graphs.  -twopi radial layout, after Graham Wills 97. The nodes are placed on concentric circles depending their distance from a given root node.  -circo circular layout, after Six and Tollis 99, Kauffman and Wiese 02.  This is suitable for certain diagrams of multiple cyclic structures such as certain telecommunications networks.  You can test different layouts to find which represents your keywordbase best. Note though that this may take a while on sites with many Keywords, as all the Keyword Graphs are redrawn. Probably it is best to try this on a test site first\u2026</li>\n<li><em>Keyword Font</em>: set the font in which the keywords are displayed in the graph generated by graphviz.</li>\n<li><em>Arrow Font</em>: set the font in which name of the relations between the keywords are displayed in the graph generated by graphviz.</li>\n</ul>\n</li>\n<li>focus keyword appearance, first keyword appearance, second keyword appearance, arrow appearance<ul>\n<li>The following settings concern the graphviz output for the displayed keywords and relations between them (arrows). When browsing the ontology, the focus keyword is the one you are just viewing. The first keywords are the ones directly related to the focus keyword. The second keywords are the keywords directly related to the first keyword (but not directly to the focus keyword).<ul>\n<li><em>Shape</em>: select the shape of the arrow or the shape that surrounds the keywordname in the graph.</li>\n<li><em>Fillcolor</em>: set the color that fills the <em>shape</em>. Use either words or the html color coding starting with \u201c#\u201d (i.e. \u201cblue\u201d or \u201c#0000ff\u201d)</li>\n<li><em>Fontcolor</em>: set the fontcolor. The usage is the same as for fillcolor.</li>\n<li><em>Fontsize</em>: set the fontsize in pixel.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"tab-relations\">\n<h3>Tab <em>relations</em>:</h3>\n<p>All relation rulsets from the Relations Library should be displayed here. One can edit the relevance factor of the relations here - preferably it should be between 0 (unrelated) and 1 (identical). Lets assume a ruleset <em>synonymOf</em> which states that a keyword A is synonym to a keyword B and the other way around. Content classified with keyword A is thus VERY closely related to content classified with keyword B, so the relevance factor should be 1.</p>\n</div>\n<div id=\"tab-import-export\">\n<h3>Tab <em>import/export</em>:</h3>\n<p>An existing Ontology in the OWL format (<a href=\"http://www.w3.org/TR/owl-ref/\" rel=\"nofollow\">http://www.w3.org/TR/owl-ref/</a>) can be imported into the site. Complex classes/set operations, local property restrictions and external references are currently unsupported, though. The import might take a while, because graphs are created for each keyword. An example OWL file can be found in the <em>doc</em> folder of this product.</p>\n<p>Also the ontology of a site can be exported to an OWL file.</p>\n</div>\n<div id=\"tab-readme\">\n<h3>Tab <em>readme</em>:</h3>\n<p>shows this text\u2026</p>\n</div>\n<div id=\"adding-relation-rulesets\">\n<h3>Adding Relation Rulesets</h3>\n<p>Relation Rulesets define the possible relations between Keywords e.g. synonym, parent, etc. Rulesets can either be added through the web or via import of an OWL file. For OWL import see above. The example OWL file in the <em>doc</em> folder includes examples for custom rulesets.</p>\n<p>Adding a ruleset through the web is done in the <em>Relations Library</em> folder. Within a ruleset one or more rules can be added. E.g. a ruleset <em>child of</em> may have an <em>Inverse Implicator</em> rule to the ruleset <em>parent of</em>, while a ruleset <em>synonym</em> may have an <em>Inverse Implicator</em> rule to itself. This ensures all needed relations for logical consistency are created when necessary. For more information see the <em>README.txt</em> and other documentation of the <em>Relations</em> Product.</p>\n</div>\n<div id=\"importing-keywords-from-a-file\">\n<h3>Importing Keywords from a file</h3>\n<p>See help on the import/export tab.</p>\n</div>\n<div id=\"adding-keywords-and-relations-between-keywords-through-the-web\">\n<h3>Adding Keywords and Relations between Keywords through the web</h3>\n<p>For a member of the portal the frist step in adding a keyword to the ontology is to add a KeywordProposal. Relations to existing keywords should be added within the edit form of this KeywordProposal. In order to become real Keywords, KeywordProposals have to go through a special workflow. First it gets submitted and gets into the <em>pending</em> state. Now a reviewer can <em>approve</em> the KeywordProposal. This approval step differs from the default workflow. First of all after approval the KeywordProposal becomes a permanent Keyword which can not be edited by members. The Keyword gets created along with its Relations to the other keywords. Secondly the KeywordProposal moves to a special folder <em>Accepted KW Proposals</em>. This was done in order to have an overview of the keywords and relations that have been added by the members of a portal. These KeywordProposals can be deleted without affecting the corresponding Keywords. If one wants to add a Relation between two existing Keywords through the web, one should use the RelationProposal. RelationProposals are added (and treated by the workflow) similar to the KeywordProposals. Accepted RelationProposals are also saved in the <em>Accepted KW Proposals</em> folder.</p>\n</div>\n<div id=\"classifying-content-and-the-related-portlet\">\n<h3>Classifying content and the related portlet</h3>\n<p>For all content types that are enabled for classification an additional object tab is displayed, which allows to edit the keyword references of that object.  To add a new keyword, first search for candidates. From the result list pick the ones you want to include and press the \u2018Add\u2019 button.  Removal of keywords is similar. Just select the ones to delete and press the \u2018Delete\u2019 button.  As soon as you classified some objects within your portal, the related portlet shows related content, ranked according to Plone Ontologies scoring mechanism.</p>\n</div>\n<div id=\"making-a-content-type-classifiable\">\n<h3>Making a content type classifiable</h3>\n<p>To make a custom Archetypes content type classifiable select it in the list of content types within the Plone Ontology configuration panel. In order to make your own custom content types referencable, they should be based on Archetypes (and thus be referencable).Of course you will have to select them also in the Plone Ontology configuration panel.</p>\n</div>\n<div id=\"getting-graphviz-to-work-with-ploneontology\">\n<h3>Getting Graphviz to work with PloneOntology</h3>\n<p>After the Graphviz installation make sure that the graphviz layouters are found in the system path. If they are not, change the <em>GV_BIN_PATH</em> variable in config.py in the <em>PloneOntology</em> products folder (be sure to escape the escape character if using windows). Also changing the Graphviz Font to some font installed on your system in the Plone Ontology configuration panel might help to solve some problems.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 785081, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4a82da73aa6795d93e3a33400f37c69b", "sha256": "30d40d0b229184e184eb4b83f9e50415fcd318c8935d02fe93233e231bca5e6a"}, "downloads": -1, "filename": "Products.PloneOntology-1.0.0.zip", "has_sig": false, "md5_digest": "4a82da73aa6795d93e3a33400f37c69b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 916801, "upload_time": "2012-09-08T01:36:26", "upload_time_iso_8601": "2012-09-08T01:36:26.164769Z", "url": "https://files.pythonhosted.org/packages/89/fa/4dc823eb26464f4c6fa4d9811b184a6b198f90cd0cd851d5174395570b0c/Products.PloneOntology-1.0.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a82da73aa6795d93e3a33400f37c69b", "sha256": "30d40d0b229184e184eb4b83f9e50415fcd318c8935d02fe93233e231bca5e6a"}, "downloads": -1, "filename": "Products.PloneOntology-1.0.0.zip", "has_sig": false, "md5_digest": "4a82da73aa6795d93e3a33400f37c69b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 916801, "upload_time": "2012-09-08T01:36:26", "upload_time_iso_8601": "2012-09-08T01:36:26.164769Z", "url": "https://files.pythonhosted.org/packages/89/fa/4dc823eb26464f4c6fa4d9811b184a6b198f90cd0cd851d5174395570b0c/Products.PloneOntology-1.0.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:17:56 2020"}