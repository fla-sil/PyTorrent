{"info": {"author": "Jonas Gliss", "author_email": "jonas.gliss@met.no", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.6"], "description": "NEWS\n====\n\n- **October 2019**: Release of version 0.8.0 (available via *conda-forge* and *PyPi*)\n- **April 2019**: AeroCom has a new web : We are happy to announce that pyaerocom is now used for the processing of the recent and upcoming AeroCom experiments (in parallel with the IDL processing displayed in the Phase 2 interface). The new online interface can be found at: `https://aerocom-evaluation.met.no <https://aerocom-evaluation.met.no/>`__.\n\nAbout\n=====\n\npyaerocom is written and tested for Python >= 3.6 and for unix based systems. pyaerocom provides tools for processing and plotting of data related to the AeroCom project.\n\nThis includes reading and processing of gridded data (e.g. model data or level 3 satellite data, e.g. NetCDF files) and ungridded data (e.g. observational data from `AERONET <https://aeronet.gsfc.nasa.gov/>`__ or `EBAS <http://ebas.nilu.no/>`__ networks, e.g. ASCII files) as well as tools for colocation and cross evaluation of different datasets.\n\nMain features\n^^^^^^^^^^^^^\n\n- Reading routines for many ground based observation databases, such as:\n\n\t- `AERONET <https://aeronet.gsfc.nasa.gov/>`_ Sun, SDA and Inversion products.\n\t- `EBAS database <http://ebas.nilu.no/>`__.\n\t- `EARLINET Lidar network <https://www.earlinet.org/index.php?id=earlinet_homepage>`__.\n\t- Coming soon: `AirBase <https://www.eea.europa.eu/data-and-maps/data/airbase-the-european-air-quality-database-7>`__ database.\n\n- Reading routines for many space-based observations, such as:\n\n\t- `MODIS Aerosol Product <https://modis.gsfc.nasa.gov/data/dataprod/mod04.php>`__ (gridded).\n\t- `CALIPSO CALIOP <https://www-calipso.larc.nasa.gov/>`__ Lidar observations (gridded).\n\t- `ENVISAT AATSR <https://earth.esa.int/web/guest/missions/esa-operational-eo-missions/envisat/instruments/aatsr>`__.\n\t- Coming soon: Support for `Sentinel-5P <https://earth.esa.int/web/guest/missions/esa-eo-missions/sentinel-5p>`__ and `aeolus <https://www.esa.int/Our_Activities/Observing_the_Earth/Aeolus>`__ data.\n\n- Access to the AeroCom model database.\n- Data objects for analysis of gridded and ungridded (point-cloud) observations.\n- This includes interfaces for conversion of data to data types of related data analysis libraries such as `pandas <https://pandas.pydata.org/>`__, `numpy <http://www.numpy.org/>`__, `xarray <http://xarray.pydata.org/en/stable/>`__ or `iris <https://scitools.org.uk/iris/docs/latest/>`__.\n- Colocation tools for gridded and ungridded datasets.\n- Harmonisation of variable and metadata conventions.\n- Data visualisation tools and interfaces to common plotting libraries such as `matplotlib <https://matplotlib.org/>`__ or `cartopy <https://scitools.org.uk/cartopy/docs/latest/>`__.\n- Tools for statistical analysis.\n\nUsage examples\n^^^^^^^^^^^^^^\n\n- Processing of data for the new AeroCom `Model Evaluation interface <https://aerocom-evaluation.met.no/>`__\n- Processing and harmonisation of observations for `Aerosol Trends interface <https://aerocom-trends.met.no/>`__.\n\n\nAeroCom\n=======\n\nThe AeroCom-project (http://aerocom.met.no/) is an open international initiative of scientists interested in the advancement of the understanding of the global aerosol and its impact on climate. A large number of observations (including MODIS, POLDER, MISR, AVHHR, SEAWIFS, TOMS, AATSR, AERONET and surface concentrations) and results from more than 14 global models have been assembled to document and compare state of the art modeling of the global aerosol. A common protocol has been established and models are asked to make use of the AeroCom emission inventories for the year 2000 and preindustrial times. Results are documented via interactive websites which give access to 2D fields and standard comparisons to observations. Regular workshops are held to discuss findings and future directions.\n\nThis repository contains the AeroCom python tools which are / will be used to produce the standard AeroCom analyses shown at the AeroCom phase 2 interface (http://aerocom.met.no/cgi-bin/AeroCom/aerocom/surfobs_annualrs.pl)\n\nAt this point the tools are co-operational together with the IDL based aerocom-tools that cannot be made public because they use 3rd party libraries with a non GPL compatible license.\n\nWebsite and code documentation\n==============================\n\nThe official website including code documentation is hosted here:\n\nhttp://aerocom.met.no/pyaerocom\n\nRequirements\n============\n\nA list of all requirements is provided in file `pyaerocom_env.yml <https://github.com/metno/pyaerocom/blob/master/pyaerocom_env.yml>`__.\n\nInstalling all requirements\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**NOTE:** You can skip this section if you install the latest *conda-forge* release (more infos below under *Installation*).\n\nWe recommend using the `Anaconda <https://www.anaconda.com/distribution/>`_ Python 3.7 distribution (or `Miniconda <https://conda.io/en/latest/miniconda.html>`__, if you want to save disk space) and to use the *conda* package manager to install the requirements.\n\nIf you use Anaconda as a package manager, you can install all requirements (specified in previous section) into a new environment using the provided *pyaerocom_env.yml* file::\n\n\tconda env create -n pya -f pyaerocom_env.yml\n\nThis will create a new conda environment called *pya* which can be activated using::\n\n\tconda activate pya\n\nAlternatively, you can include the requirements into an existing environment. First, activate the existing environment, and then install the dependencies using::\n\n\tconda env update -f=pyaerocom_env.yml\n\nInstallation of pyaerocom\n=========================\n\nYou have several options to install pyaerocom, the first one is the easiest, but may not refer to the most recent (non-released) version of pyaerocom. So please check first, which version you are interested in.\n\nOption 1: Installation using conda install\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**NOTE:** This will install the latest release of pyaerocom.\n\n- It hence, may not include the most recent developments.\n- Requirements are installed automatically.\n\nIf you use *conda* as a package manager, the easiest way to install pyaerocom (and all requirements, see previous section) is to use the build provided in the *nordicesmhub* conda channel::\n\n\tconda install -c conda-forge pyaerocom\n\nThis will install the latest release of pyaerocom including all requirements. Alternatively, you may install from source as described in the following.\n\n**NOTE**: installation support via conda as described above is quite recent, so please let us know if you run into problems with the installation (best way to do this is by raising an issue `here <https://github.com/metno/pyaerocom/issues>`__).\n\nOption 2: Install latest release via PyPi\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**NOTE:** this will install the latest released version of pyaerocom, which is the same as distributed via *conda-forge* (see prev. point). However, installation via PyPi does **not** take care of any requirements but only installs pyaerocom::\n\n\tpip install pyaerocom\n\n\nOption 3: Installing from source\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you use the *conda* packages manager, please make sure to `activate the environment <https://conda.io/docs/user-guide/tasks/manage-environments.html#activating-an-environment>`__ you want to install pyaerocom into. For more information about conda environments, `see here <https://conda.io/docs/user-guide/tasks/manage-environments.html>`__.\n\nPlease make sure to install all requirements (see above) before installing pyaerocom from source.\n\nTo install pyaerocom from source, please download and extract the `latest release <https://github.com/metno/pyaerocom/releases>`__ (or clone this repository) and install from the toplevel directory (that contains a file *setup.py*) using::\n\n\tpython setup.py install\n\nAlternatively, if you plan to apply local changes to the pyaerocom source code, you may install in development mode::\n\n\tpython setup.py develop\n\nYou may also download and extract (or clone) the `GitHub repo <https://github.com/metno/pyaerocom>`__ to install the very latest (not yet released) version of pyaerocom.\n\n\nAccess to users database\n========================\n\nPlease follow the instructions provided here, to retrieve access to the AeroCom users database:\n\nhttps://wiki.met.no/aerocom/data_retrieval\n\n**NOTE**: the users database does not contain any ground based observational data (such as EBAS, AERONET, etc.) but only the AeroCom model data available in the database as well as some gridded level 3 satellite datasets which may be used for model evaluation.\n\nGetting started\n===============\n\nAfter installing pyaerocom, open your python executable and try to import pyaerocom::\n\n\timport pyaerocom as pya\n\nTo get started, please see `introduction tutorial <https://pyaerocom.met.no/tutorials.html#getting-started>`__.\n\nTutorials (Jupyter notebooks)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA number of tutorial jupyter notebooks can be found in the `pyaerocom-tutorials repo <https://github.com/metno/pyaerocom-tutorials/tree/master/notebooks>`__\n\n**NOTE:** in order to execute these notebooks you need to be connected to the AeroCom database located on servers of the Norwegian Meteorological Institute (MetNo). Thus, if you are not happen to be an employee of the institute you will not be able to execute the tutorial notebooks on your own machine. We are working on providing an example dataset that can be downloaded and rewrite the notebooks based on these example data.\n\n\nRemark for Windows users\n^^^^^^^^^^^^^^^^^^^^^^^^\n\npyaerocom is not tested on Windows systems and may only work in parts and thus some features may not work on Windows machines at the moment. In particular, features that rely on and are built upon access to the AeroCom database servers and automatic database path navigation. This includes the automised reading of gridded and ungridded data using either of the pre-defined path infrastuctures (e.g. check out `paths.ini <https://github.com/metno/pyaerocom/blob/master/pyaerocom/data/paths.ini>`__ or `paths_user_server.ini <https://github.com/metno/pyaerocom/blob/master/pyaerocom/data/paths_user_server.ini>`__).\nHowever, you may still define file locations in your Python scripts yourself and use the more low-level features for reading the data. Windows support will be provided soon. Please let us know if you intend to use pyaerocom on a Windows machine so that we can consider adjusting our priorities, or also if you have any questions related to the usage.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jgliss/pyaerocom.git", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pyaerocom", "package_url": "https://pypi.org/project/pyaerocom/", "platform": "", "project_url": "https://pypi.org/project/pyaerocom/", "project_urls": {"Homepage": "https://github.com/jgliss/pyaerocom.git"}, "release_url": "https://pypi.org/project/pyaerocom/0.8.0/", "requires_dist": null, "requires_python": "", "summary": "Python tools for the Aerocom project", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"news\">\n<h2>NEWS</h2>\n<ul>\n<li><strong>October 2019</strong>: Release of version 0.8.0 (available via <em>conda-forge</em> and <em>PyPi</em>)</li>\n<li><strong>April 2019</strong>: AeroCom has a new web : We are happy to announce that pyaerocom is now used for the processing of the recent and upcoming AeroCom experiments (in parallel with the IDL processing displayed in the Phase 2 interface). The new online interface can be found at: <a href=\"https://aerocom-evaluation.met.no/\" rel=\"nofollow\">https://aerocom-evaluation.met.no</a>.</li>\n</ul>\n</div>\n<div id=\"about\">\n<h2>About</h2>\n<p>pyaerocom is written and tested for Python &gt;= 3.6 and for unix based systems. pyaerocom provides tools for processing and plotting of data related to the AeroCom project.</p>\n<p>This includes reading and processing of gridded data (e.g. model data or level 3 satellite data, e.g. NetCDF files) and ungridded data (e.g. observational data from <a href=\"https://aeronet.gsfc.nasa.gov/\" rel=\"nofollow\">AERONET</a> or <a href=\"http://ebas.nilu.no/\" rel=\"nofollow\">EBAS</a> networks, e.g. ASCII files) as well as tools for colocation and cross evaluation of different datasets.</p>\n<div id=\"main-features\">\n<h3>Main features</h3>\n<ul>\n<li><p>Reading routines for many ground based observation databases, such as:</p>\n<blockquote>\n<ul>\n<li><a href=\"https://aeronet.gsfc.nasa.gov/\" rel=\"nofollow\">AERONET</a> Sun, SDA and Inversion products.</li>\n<li><a href=\"http://ebas.nilu.no/\" rel=\"nofollow\">EBAS database</a>.</li>\n<li><a href=\"https://www.earlinet.org/index.php?id=earlinet_homepage\" rel=\"nofollow\">EARLINET Lidar network</a>.</li>\n<li>Coming soon: <a href=\"https://www.eea.europa.eu/data-and-maps/data/airbase-the-european-air-quality-database-7\" rel=\"nofollow\">AirBase</a> database.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Reading routines for many space-based observations, such as:</p>\n<blockquote>\n<ul>\n<li><a href=\"https://modis.gsfc.nasa.gov/data/dataprod/mod04.php\" rel=\"nofollow\">MODIS Aerosol Product</a> (gridded).</li>\n<li><a href=\"https://www-calipso.larc.nasa.gov/\" rel=\"nofollow\">CALIPSO CALIOP</a> Lidar observations (gridded).</li>\n<li><a href=\"https://earth.esa.int/web/guest/missions/esa-operational-eo-missions/envisat/instruments/aatsr\" rel=\"nofollow\">ENVISAT AATSR</a>.</li>\n<li>Coming soon: Support for <a href=\"https://earth.esa.int/web/guest/missions/esa-eo-missions/sentinel-5p\" rel=\"nofollow\">Sentinel-5P</a> and <a href=\"https://www.esa.int/Our_Activities/Observing_the_Earth/Aeolus\" rel=\"nofollow\">aeolus</a> data.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Access to the AeroCom model database.</p>\n</li>\n<li><p>Data objects for analysis of gridded and ungridded (point-cloud) observations.</p>\n</li>\n<li><p>This includes interfaces for conversion of data to data types of related data analysis libraries such as <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas</a>, <a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a>, <a href=\"http://xarray.pydata.org/en/stable/\" rel=\"nofollow\">xarray</a> or <a href=\"https://scitools.org.uk/iris/docs/latest/\" rel=\"nofollow\">iris</a>.</p>\n</li>\n<li><p>Colocation tools for gridded and ungridded datasets.</p>\n</li>\n<li><p>Harmonisation of variable and metadata conventions.</p>\n</li>\n<li><p>Data visualisation tools and interfaces to common plotting libraries such as <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> or <a href=\"https://scitools.org.uk/cartopy/docs/latest/\" rel=\"nofollow\">cartopy</a>.</p>\n</li>\n<li><p>Tools for statistical analysis.</p>\n</li>\n</ul>\n</div>\n<div id=\"usage-examples\">\n<h3>Usage examples</h3>\n<ul>\n<li>Processing of data for the new AeroCom <a href=\"https://aerocom-evaluation.met.no/\" rel=\"nofollow\">Model Evaluation interface</a></li>\n<li>Processing and harmonisation of observations for <a href=\"https://aerocom-trends.met.no/\" rel=\"nofollow\">Aerosol Trends interface</a>.</li>\n</ul>\n</div>\n</div>\n<div id=\"aerocom\">\n<h2>AeroCom</h2>\n<p>The AeroCom-project (<a href=\"http://aerocom.met.no/\" rel=\"nofollow\">http://aerocom.met.no/</a>) is an open international initiative of scientists interested in the advancement of the understanding of the global aerosol and its impact on climate. A large number of observations (including MODIS, POLDER, MISR, AVHHR, SEAWIFS, TOMS, AATSR, AERONET and surface concentrations) and results from more than 14 global models have been assembled to document and compare state of the art modeling of the global aerosol. A common protocol has been established and models are asked to make use of the AeroCom emission inventories for the year 2000 and preindustrial times. Results are documented via interactive websites which give access to 2D fields and standard comparisons to observations. Regular workshops are held to discuss findings and future directions.</p>\n<p>This repository contains the AeroCom python tools which are / will be used to produce the standard AeroCom analyses shown at the AeroCom phase 2 interface (<a href=\"http://aerocom.met.no/cgi-bin/AeroCom/aerocom/surfobs_annualrs.pl\" rel=\"nofollow\">http://aerocom.met.no/cgi-bin/AeroCom/aerocom/surfobs_annualrs.pl</a>)</p>\n<p>At this point the tools are co-operational together with the IDL based aerocom-tools that cannot be made public because they use 3rd party libraries with a non GPL compatible license.</p>\n</div>\n<div id=\"website-and-code-documentation\">\n<h2>Website and code documentation</h2>\n<p>The official website including code documentation is hosted here:</p>\n<p><a href=\"http://aerocom.met.no/pyaerocom\" rel=\"nofollow\">http://aerocom.met.no/pyaerocom</a></p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>A list of all requirements is provided in file <a href=\"https://github.com/metno/pyaerocom/blob/master/pyaerocom_env.yml\" rel=\"nofollow\">pyaerocom_env.yml</a>.</p>\n<div id=\"installing-all-requirements\">\n<h3>Installing all requirements</h3>\n<p><strong>NOTE:</strong> You can skip this section if you install the latest <em>conda-forge</em> release (more infos below under <em>Installation</em>).</p>\n<p>We recommend using the <a href=\"https://www.anaconda.com/distribution/\" rel=\"nofollow\">Anaconda</a> Python 3.7 distribution (or <a href=\"https://conda.io/en/latest/miniconda.html\" rel=\"nofollow\">Miniconda</a>, if you want to save disk space) and to use the <em>conda</em> package manager to install the requirements.</p>\n<p>If you use Anaconda as a package manager, you can install all requirements (specified in previous section) into a new environment using the provided <em>pyaerocom_env.yml</em> file:</p>\n<pre>conda env create -n pya -f pyaerocom_env.yml\n</pre>\n<p>This will create a new conda environment called <em>pya</em> which can be activated using:</p>\n<pre>conda activate pya\n</pre>\n<p>Alternatively, you can include the requirements into an existing environment. First, activate the existing environment, and then install the dependencies using:</p>\n<pre>conda env update -f=pyaerocom_env.yml\n</pre>\n</div>\n</div>\n<div id=\"installation-of-pyaerocom\">\n<h2>Installation of pyaerocom</h2>\n<p>You have several options to install pyaerocom, the first one is the easiest, but may not refer to the most recent (non-released) version of pyaerocom. So please check first, which version you are interested in.</p>\n<div id=\"option-1-installation-using-conda-install\">\n<h3>Option 1: Installation using conda install</h3>\n<p><strong>NOTE:</strong> This will install the latest release of pyaerocom.</p>\n<ul>\n<li>It hence, may not include the most recent developments.</li>\n<li>Requirements are installed automatically.</li>\n</ul>\n<p>If you use <em>conda</em> as a package manager, the easiest way to install pyaerocom (and all requirements, see previous section) is to use the build provided in the <em>nordicesmhub</em> conda channel:</p>\n<pre>conda install -c conda-forge pyaerocom\n</pre>\n<p>This will install the latest release of pyaerocom including all requirements. Alternatively, you may install from source as described in the following.</p>\n<p><strong>NOTE</strong>: installation support via conda as described above is quite recent, so please let us know if you run into problems with the installation (best way to do this is by raising an issue <a href=\"https://github.com/metno/pyaerocom/issues\" rel=\"nofollow\">here</a>).</p>\n</div>\n<div id=\"option-2-install-latest-release-via-pypi\">\n<h3>Option 2: Install latest release via PyPi</h3>\n<p><strong>NOTE:</strong> this will install the latest released version of pyaerocom, which is the same as distributed via <em>conda-forge</em> (see prev. point). However, installation via PyPi does <strong>not</strong> take care of any requirements but only installs pyaerocom:</p>\n<pre>pip install pyaerocom\n</pre>\n</div>\n<div id=\"option-3-installing-from-source\">\n<h3>Option 3: Installing from source</h3>\n<p>If you use the <em>conda</em> packages manager, please make sure to <a href=\"https://conda.io/docs/user-guide/tasks/manage-environments.html#activating-an-environment\" rel=\"nofollow\">activate the environment</a> you want to install pyaerocom into. For more information about conda environments, <a href=\"https://conda.io/docs/user-guide/tasks/manage-environments.html\" rel=\"nofollow\">see here</a>.</p>\n<p>Please make sure to install all requirements (see above) before installing pyaerocom from source.</p>\n<p>To install pyaerocom from source, please download and extract the <a href=\"https://github.com/metno/pyaerocom/releases\" rel=\"nofollow\">latest release</a> (or clone this repository) and install from the toplevel directory (that contains a file <em>setup.py</em>) using:</p>\n<pre>python setup.py install\n</pre>\n<p>Alternatively, if you plan to apply local changes to the pyaerocom source code, you may install in development mode:</p>\n<pre>python setup.py develop\n</pre>\n<p>You may also download and extract (or clone) the <a href=\"https://github.com/metno/pyaerocom\" rel=\"nofollow\">GitHub repo</a> to install the very latest (not yet released) version of pyaerocom.</p>\n</div>\n</div>\n<div id=\"access-to-users-database\">\n<h2>Access to users database</h2>\n<p>Please follow the instructions provided here, to retrieve access to the AeroCom users database:</p>\n<p><a href=\"https://wiki.met.no/aerocom/data_retrieval\" rel=\"nofollow\">https://wiki.met.no/aerocom/data_retrieval</a></p>\n<p><strong>NOTE</strong>: the users database does not contain any ground based observational data (such as EBAS, AERONET, etc.) but only the AeroCom model data available in the database as well as some gridded level 3 satellite datasets which may be used for model evaluation.</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>After installing pyaerocom, open your python executable and try to import pyaerocom:</p>\n<pre>import pyaerocom as pya\n</pre>\n<p>To get started, please see <a href=\"https://pyaerocom.met.no/tutorials.html#getting-started\" rel=\"nofollow\">introduction tutorial</a>.</p>\n<div id=\"tutorials-jupyter-notebooks\">\n<h3>Tutorials (Jupyter notebooks)</h3>\n<p>A number of tutorial jupyter notebooks can be found in the <a href=\"https://github.com/metno/pyaerocom-tutorials/tree/master/notebooks\" rel=\"nofollow\">pyaerocom-tutorials repo</a></p>\n<p><strong>NOTE:</strong> in order to execute these notebooks you need to be connected to the AeroCom database located on servers of the Norwegian Meteorological Institute (MetNo). Thus, if you are not happen to be an employee of the institute you will not be able to execute the tutorial notebooks on your own machine. We are working on providing an example dataset that can be downloaded and rewrite the notebooks based on these example data.</p>\n</div>\n<div id=\"remark-for-windows-users\">\n<h3>Remark for Windows users</h3>\n<p>pyaerocom is not tested on Windows systems and may only work in parts and thus some features may not work on Windows machines at the moment. In particular, features that rely on and are built upon access to the AeroCom database servers and automatic database path navigation. This includes the automised reading of gridded and ungridded data using either of the pre-defined path infrastuctures (e.g. check out <a href=\"https://github.com/metno/pyaerocom/blob/master/pyaerocom/data/paths.ini\" rel=\"nofollow\">paths.ini</a> or <a href=\"https://github.com/metno/pyaerocom/blob/master/pyaerocom/data/paths_user_server.ini\" rel=\"nofollow\">paths_user_server.ini</a>).\nHowever, you may still define file locations in your Python scripts yourself and use the more low-level features for reading the data. Windows support will be provided soon. Please let us know if you intend to use pyaerocom on a Windows machine so that we can consider adjusting our priorities, or also if you have any questions related to the usage.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5964481, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "97da0dc675a6beab2b7509f7ca3dea57", "sha256": "e80605ca0d8ffa1dc3d8985d1072ead2ce7b47e4ac1133808b91599f62df06c3"}, "downloads": -1, "filename": "pyaerocom-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97da0dc675a6beab2b7509f7ca3dea57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 657306, "upload_time": "2019-10-12T14:30:36", "upload_time_iso_8601": "2019-10-12T14:30:36.380559Z", "url": "https://files.pythonhosted.org/packages/a5/5d/c14a4cb0232cd5442e112ae3d6ed9f8b2d3996e3cc060705619a3f42cee3/pyaerocom-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "782ea3c54c224bfd1ae6225298748ac2", "sha256": "694ef61878d600e4a05e66d13e4d1493e5156012376b6dac780c72781e47a873"}, "downloads": -1, "filename": "pyaerocom-0.8.0.tar.gz", "has_sig": false, "md5_digest": "782ea3c54c224bfd1ae6225298748ac2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 584172, "upload_time": "2019-10-12T14:30:40", "upload_time_iso_8601": "2019-10-12T14:30:40.463866Z", "url": "https://files.pythonhosted.org/packages/1a/0b/029a942d547f457a07c8d9e55654edabf1faeecddd72f9f0553d0de32cf1/pyaerocom-0.8.0.tar.gz", "yanked": false}], "0.8.0rc1": [{"comment_text": "", "digests": {"md5": "b26cf66826f5a286f464c7606e00942f", "sha256": "bbec5f039fa5d9bd8091c25c7e0daf3db79cbed2a88f7b6c1aaf9e6ecdacbb25"}, "downloads": -1, "filename": "pyaerocom-0.8.0rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "b26cf66826f5a286f464c7606e00942f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 611064, "upload_time": "2019-10-07T08:40:24", "upload_time_iso_8601": "2019-10-07T08:40:24.703352Z", "url": "https://files.pythonhosted.org/packages/5b/fc/0dd26435e845fad516073a4fae64289569b1a866611bcff6b55bf6362146/pyaerocom-0.8.0rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "994b65e9169c1be73d073cbef6bb001f", "sha256": "8fcf2cf511cc11b3ff4bee81d742a0c8d67c8e5617590be844fbfbe769193a05"}, "downloads": -1, "filename": "pyaerocom-0.8.0rc1.tar.gz", "has_sig": false, "md5_digest": "994b65e9169c1be73d073cbef6bb001f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 549932, "upload_time": "2019-10-07T08:40:29", "upload_time_iso_8601": "2019-10-07T08:40:29.330066Z", "url": "https://files.pythonhosted.org/packages/06/6a/850abc9e6310139b656da4640fb814381460b3e838fcc35cca19440c2147/pyaerocom-0.8.0rc1.tar.gz", "yanked": false}], "0.8.0rc2": [{"comment_text": "", "digests": {"md5": "45bc243edc0397d04cc552612daa6ce1", "sha256": "397e2b2f9999f012023c645ab1094cafb1d326240b4ff9808c353ca1f91d8f82"}, "downloads": -1, "filename": "pyaerocom-0.8.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "45bc243edc0397d04cc552612daa6ce1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 656728, "upload_time": "2019-10-09T11:45:08", "upload_time_iso_8601": "2019-10-09T11:45:08.404398Z", "url": "https://files.pythonhosted.org/packages/21/aa/a4154b11feea24661cb041802405e87df9fd12ff9b327bb8a288b54d17ff/pyaerocom-0.8.0rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87abd7ba578c1be9af2c3f67b83bbb81", "sha256": "7822c778fb598e99a5e797751a49508385cda9c13c9b436c7a198280f550dbb0"}, "downloads": -1, "filename": "pyaerocom-0.8.0rc2.tar.gz", "has_sig": false, "md5_digest": "87abd7ba578c1be9af2c3f67b83bbb81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 585005, "upload_time": "2019-10-09T11:45:12", "upload_time_iso_8601": "2019-10-09T11:45:12.706787Z", "url": "https://files.pythonhosted.org/packages/57/c4/ab9245db610202641225bcee044a6e4a2e73b4623e21f95a99ac2d57983f/pyaerocom-0.8.0rc2.tar.gz", "yanked": false}], "0.8.0rc3": [{"comment_text": "", "digests": {"md5": "08dbe1dba4c16af7706bfaf153f197a2", "sha256": "731337d47df33fb4d923b97d8df660dade669218e53d08cdc7eefedecae87cd3"}, "downloads": -1, "filename": "pyaerocom-0.8.0rc3-py3-none-any.whl", "has_sig": false, "md5_digest": "08dbe1dba4c16af7706bfaf153f197a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 657110, "upload_time": "2019-10-10T15:44:46", "upload_time_iso_8601": "2019-10-10T15:44:46.544964Z", "url": "https://files.pythonhosted.org/packages/ab/d4/283972723b15c1a6520a6ced9c67927ed88e8794cad51ad668756281d099/pyaerocom-0.8.0rc3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46e72c14d78d3d5b30a27407d5864764", "sha256": "84460fac9b4b1518edd3b8c160b2045e566cb0e993fe5ca556215faa0e91c0ba"}, "downloads": -1, "filename": "pyaerocom-0.8.0rc3.tar.gz", "has_sig": false, "md5_digest": "46e72c14d78d3d5b30a27407d5864764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 585557, "upload_time": "2019-10-10T15:44:49", "upload_time_iso_8601": "2019-10-10T15:44:49.798466Z", "url": "https://files.pythonhosted.org/packages/46/c4/429c8a5ee1a56209846cea38b4209b6be3f111da64134b675e154930db96/pyaerocom-0.8.0rc3.tar.gz", "yanked": false}], "0.8.0rc4": [{"comment_text": "", "digests": {"md5": "3cd576f6d790caff8b8c5fc1ca51488d", "sha256": "37246e460b0f6187d37d8490aa1a2b7d0270d90c42a37b5f8dd3b668484ce789"}, "downloads": -1, "filename": "pyaerocom-0.8.0rc4-py3-none-any.whl", "has_sig": false, "md5_digest": "3cd576f6d790caff8b8c5fc1ca51488d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 657098, "upload_time": "2019-10-11T09:47:31", "upload_time_iso_8601": "2019-10-11T09:47:31.938782Z", "url": "https://files.pythonhosted.org/packages/32/9d/9cf4c441265fccb1e03384e4386d61383e58ff975ba064d0a38a2750443c/pyaerocom-0.8.0rc4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "918d0d08a02a67d731d130c08c1b245d", "sha256": "9d15510b15967323e7450db7693acb630dc2b15fe186a06811a79f8d0cfc850b"}, "downloads": -1, "filename": "pyaerocom-0.8.0rc4.tar.gz", "has_sig": false, "md5_digest": "918d0d08a02a67d731d130c08c1b245d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 583915, "upload_time": "2019-10-11T09:47:36", "upload_time_iso_8601": "2019-10-11T09:47:36.030782Z", "url": "https://files.pythonhosted.org/packages/ed/e7/7e59acc7dc8b0047421d7c2ce0ac307cf7418ab860ae49c0e2759b0c3f70/pyaerocom-0.8.0rc4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97da0dc675a6beab2b7509f7ca3dea57", "sha256": "e80605ca0d8ffa1dc3d8985d1072ead2ce7b47e4ac1133808b91599f62df06c3"}, "downloads": -1, "filename": "pyaerocom-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "97da0dc675a6beab2b7509f7ca3dea57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 657306, "upload_time": "2019-10-12T14:30:36", "upload_time_iso_8601": "2019-10-12T14:30:36.380559Z", "url": "https://files.pythonhosted.org/packages/a5/5d/c14a4cb0232cd5442e112ae3d6ed9f8b2d3996e3cc060705619a3f42cee3/pyaerocom-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "782ea3c54c224bfd1ae6225298748ac2", "sha256": "694ef61878d600e4a05e66d13e4d1493e5156012376b6dac780c72781e47a873"}, "downloads": -1, "filename": "pyaerocom-0.8.0.tar.gz", "has_sig": false, "md5_digest": "782ea3c54c224bfd1ae6225298748ac2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 584172, "upload_time": "2019-10-12T14:30:40", "upload_time_iso_8601": "2019-10-12T14:30:40.463866Z", "url": "https://files.pythonhosted.org/packages/1a/0b/029a942d547f457a07c8d9e55654edabf1faeecddd72f9f0553d0de32cf1/pyaerocom-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:55 2020"}