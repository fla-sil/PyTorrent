{"info": {"author": "Christo Crampton", "author_email": "christo@appointmentguru.co", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Django NoSQL\n\n![coverage](https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage)\n[![PyPI version](https://badge.fury.io/py/dj-loopbreaker.svg)](https://badge.fury.io/py/django-nosql)\n\n> Stream model changes to an upstream NoSQL database\n\n**Supported backends:**\n\n* FireStore\n* Mock\n\n**Todo backends**\n\n* RethinkDB\n* Postgres (JSONField)\n* REST\n* Redis\n* etcd\n\n## Installation\n\n```\npip install django-nosql\n```\n\n## Setup\n\n### Add to installed apps:\n\n```python\nINSTALLED_APPS = [\n    ...,\n    'django_nosql',\n    ...\n]\n```\n\n### Configure NoSQL backends:\n\nIn settings.py:\n\n```python\n# you can have multiple backends:\nNOSQL_BACKENDS = ['firestore']\n\n#  FireStore settings\nFIRESTORE_CREDENTIALS_FILE = '/path/to/credentials.json'\n```\n\n### Mark up your models:\n\nIn `models.py`\n\n```python\n\nTodo(models.model):\n    # the nosql collection you'd like to use\n    collection = 'todos'\n    # A Django Rest Framework serializer for serializing your instance\n    serializer_path = 'example_app.models.TodoSerializer'\n    # inform django_nosql that you'd like to sync this model\n    readonly_sync = True\n```\n\nAdd signals:\n\n```python\nfrom django_nosql.signals import (\n    sync_readonly_db,\n    sync_remove_readonly_db\n)\n```\n\n### Test it out:\n\nThere is an example app included in this repo.\n\nTo see the sync in action try.\n\n`python manage.py shell` or `docker-compose run --rm web python manage.py shell`\n\n```python\n\nfrom example_app.models import Todo\ntodo = Todo.objects.create(text='Setup django nosql')\n# you should see this reflected in the 'todos' collection in Firebase\n# note: you need to manually refresh the db view when adding a new collection\n# you should see the rest of these updates in realtime\n\n# try update:\ntodo.done = True\ntodo.save()\n# you should see your change reflected in firestore\n\n# delete it:\ntodo.delete()\n# it's gone from Firestore!\n```\n\n### Take it async\n\nIf you're using something like celery or django-rq, you can make your signals async by wrapping the base function in a `@shared_task`. e.g.:\n\n```python\nfrom django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom django.conf import settings\nfrom django_nosql.signals import (sync_readonly_db, SYNC_TYPE)\nfrom celery import shared_task\n\n# create a shared task that wraps `sync_readonly_db`\n@shared_task\ndef firebase_sync(instance, created):\n  sync_readonly_db(instance, SYNC_TYPE.UPDATE, created)\n\n@shared_task\ndef firebase_sync_remove(instance):\n  sync_readonly_db(instance, SYNC_TYPE.DELETE, False)\n\n# call that function in a delayed manner\n@receiver(post_save, dispatch_uid=\"django_nosql.sync\")\ndef sync_readonly_db(sender, instance, created, **kwargs):\n    firebase_sync.delay(instance, created)\n\n@receiver(post_delete, dispatch_uid=\"django_nosql.sync.delete\")\ndef sync_remove_readonly_db(sender, instance, **kwargs):\n    firebase_sync_remove.delay(instance)\n```\n\n\n# Contributing\n\n## Deploy to pip\n\n```\n# bumpversion:\nbumpversion {major|minor|patch}\n# push to gitlab\ngit push origin master\n# gitlab CI does the rest\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/SchoolOrchestration/django_nosql.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django_nosql", "package_url": "https://pypi.org/project/django_nosql/", "platform": "", "project_url": "https://pypi.org/project/django_nosql/", "project_urls": {"Homepage": "https://gitlab.com/SchoolOrchestration/django_nosql.git"}, "release_url": "https://pypi.org/project/django_nosql/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Stream model updates to nosql backends", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django NoSQL</h1>\n<p><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/78fbba0bd3472b9e3154f53bd0cef5dd23cbdef1/68747470733a2f2f6769746c61622e636f6d2f6769746c61622d6f72672f6769746c61622d63652f6261646765732f6d61737465722f636f7665726167652e7376673f6a6f623d636f766572616765\">\n<a href=\"https://badge.fury.io/py/django-nosql\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9192c44506e42f071c3a05999a92f25f3c002875/68747470733a2f2f62616467652e667572792e696f2f70792f646a2d6c6f6f70627265616b65722e737667\"></a></p>\n<blockquote>\n<p>Stream model changes to an upstream NoSQL database</p>\n</blockquote>\n<p><strong>Supported backends:</strong></p>\n<ul>\n<li>FireStore</li>\n<li>Mock</li>\n</ul>\n<p><strong>Todo backends</strong></p>\n<ul>\n<li>RethinkDB</li>\n<li>Postgres (JSONField)</li>\n<li>REST</li>\n<li>Redis</li>\n<li>etcd</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install django-nosql\n</code></pre>\n<h2>Setup</h2>\n<h3>Add to installed apps:</h3>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_nosql'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<h3>Configure NoSQL backends:</h3>\n<p>In settings.py:</p>\n<pre><span class=\"c1\"># you can have multiple backends:</span>\n<span class=\"n\">NOSQL_BACKENDS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'firestore'</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#  FireStore settings</span>\n<span class=\"n\">FIRESTORE_CREDENTIALS_FILE</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/credentials.json'</span>\n</pre>\n<h3>Mark up your models:</h3>\n<p>In <code>models.py</code></p>\n<pre><span class=\"n\">Todo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># the nosql collection you'd like to use</span>\n    <span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"s1\">'todos'</span>\n    <span class=\"c1\"># A Django Rest Framework serializer for serializing your instance</span>\n    <span class=\"n\">serializer_path</span> <span class=\"o\">=</span> <span class=\"s1\">'example_app.models.TodoSerializer'</span>\n    <span class=\"c1\"># inform django_nosql that you'd like to sync this model</span>\n    <span class=\"n\">readonly_sync</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n<p>Add signals:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_nosql.signals</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">sync_readonly_db</span><span class=\"p\">,</span>\n    <span class=\"n\">sync_remove_readonly_db</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Test it out:</h3>\n<p>There is an example app included in this repo.</p>\n<p>To see the sync in action try.</p>\n<p><code>python manage.py shell</code> or <code>docker-compose run --rm web python manage.py shell</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">example_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Todo</span>\n<span class=\"n\">todo</span> <span class=\"o\">=</span> <span class=\"n\">Todo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'Setup django nosql'</span><span class=\"p\">)</span>\n<span class=\"c1\"># you should see this reflected in the 'todos' collection in Firebase</span>\n<span class=\"c1\"># note: you need to manually refresh the db view when adding a new collection</span>\n<span class=\"c1\"># you should see the rest of these updates in realtime</span>\n\n<span class=\"c1\"># try update:</span>\n<span class=\"n\">todo</span><span class=\"o\">.</span><span class=\"n\">done</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">todo</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"c1\"># you should see your change reflected in firestore</span>\n\n<span class=\"c1\"># delete it:</span>\n<span class=\"n\">todo</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"c1\"># it's gone from Firestore!</span>\n</pre>\n<h3>Take it async</h3>\n<p>If you're using something like celery or django-rq, you can make your signals async by wrapping the base function in a <code>@shared_task</code>. e.g.:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">post_save</span><span class=\"p\">,</span> <span class=\"n\">post_delete</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">receiver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_nosql.signals</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">sync_readonly_db</span><span class=\"p\">,</span> <span class=\"n\">SYNC_TYPE</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">celery</span> <span class=\"kn\">import</span> <span class=\"n\">shared_task</span>\n\n<span class=\"c1\"># create a shared task that wraps `sync_readonly_db`</span>\n<span class=\"nd\">@shared_task</span>\n<span class=\"k\">def</span> <span class=\"nf\">firebase_sync</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">created</span><span class=\"p\">):</span>\n  <span class=\"n\">sync_readonly_db</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">SYNC_TYPE</span><span class=\"o\">.</span><span class=\"n\">UPDATE</span><span class=\"p\">,</span> <span class=\"n\">created</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@shared_task</span>\n<span class=\"k\">def</span> <span class=\"nf\">firebase_sync_remove</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">):</span>\n  <span class=\"n\">sync_readonly_db</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">SYNC_TYPE</span><span class=\"o\">.</span><span class=\"n\">DELETE</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># call that function in a delayed manner</span>\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">post_save</span><span class=\"p\">,</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"s2\">\"django_nosql.sync\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_readonly_db</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">created</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">firebase_sync</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">created</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">post_delete</span><span class=\"p\">,</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"s2\">\"django_nosql.sync.delete\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_remove_readonly_db</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">firebase_sync_remove</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span>\n</pre>\n<h1>Contributing</h1>\n<h2>Deploy to pip</h2>\n<pre><code># bumpversion:\nbumpversion {major|minor|patch}\n# push to gitlab\ngit push origin master\n# gitlab CI does the rest\n</code></pre>\n\n          </div>"}, "last_serial": 4431167, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "899936b00b85be149b59adf3c5e81f26", "sha256": "51b5a19767e219e981d6bc3f7251e07e3feee512ce3ddbe831da441942b67e4b"}, "downloads": -1, "filename": "django_nosql-0.0.1.tar.gz", "has_sig": false, "md5_digest": "899936b00b85be149b59adf3c5e81f26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3466, "upload_time": "2018-08-24T10:25:38", "upload_time_iso_8601": "2018-08-24T10:25:38.148241Z", "url": "https://files.pythonhosted.org/packages/c9/7e/41a12cf8870935fc9ced2d4d2b73172b19a464f40bc6d9443c6b3629174f/django_nosql-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5ec4351deb1cb44c31445003a149a171", "sha256": "031e273506060540e26206833ee9cbf711f540cd82b15410fde5b1886998c4f3"}, "downloads": -1, "filename": "django_nosql-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5ec4351deb1cb44c31445003a149a171", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3855, "upload_time": "2018-08-24T19:36:59", "upload_time_iso_8601": "2018-08-24T19:36:59.592341Z", "url": "https://files.pythonhosted.org/packages/c9/ac/f512c26ad96b07f60c28a62484e560b61f20983dfe0c20da4ed2d8dcf6a4/django_nosql-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a8ec51ccb06bd9a637acc9a700f6f8a5", "sha256": "32a734e1031aa3c3bcbd15477f58f7d72185cb950d66a145db18d188af9f6cc5"}, "downloads": -1, "filename": "django_nosql-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a8ec51ccb06bd9a637acc9a700f6f8a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4095, "upload_time": "2018-10-30T11:16:36", "upload_time_iso_8601": "2018-10-30T11:16:36.136852Z", "url": "https://files.pythonhosted.org/packages/aa/d0/66eb97d172bc145110d41b9101528e109241f5c4620f9bcabf5a414ece22/django_nosql-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a8ec51ccb06bd9a637acc9a700f6f8a5", "sha256": "32a734e1031aa3c3bcbd15477f58f7d72185cb950d66a145db18d188af9f6cc5"}, "downloads": -1, "filename": "django_nosql-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a8ec51ccb06bd9a637acc9a700f6f8a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4095, "upload_time": "2018-10-30T11:16:36", "upload_time_iso_8601": "2018-10-30T11:16:36.136852Z", "url": "https://files.pythonhosted.org/packages/aa/d0/66eb97d172bc145110d41b9101528e109241f5c4620f9bcabf5a414ece22/django_nosql-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:39 2020"}