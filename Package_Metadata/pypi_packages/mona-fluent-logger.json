{"info": {"author": "itaiMona", "author_email": "itai@monalabs.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: System :: Logging"], "description": "A Python structured logger for Fluentd\n======================================\n\n.. image:: https://travis-ci.org/fluent/fluent-logger-python.svg?branch=master\n   :target: https://travis-ci.org/fluent/fluent-logger-python\n   :alt: Build Status\n\n.. image:: https://coveralls.io/repos/fluent/fluent-logger-python/badge.svg\n   :target: https://coveralls.io/r/fluent/fluent-logger-python\n   :alt: Coverage Status\n\nMany web/mobile applications generate huge amount of event logs (c,f.\nlogin, logout, purchase, follow, etc). To analyze these event logs could\nbe really valuable for improving the service. However, the challenge is\ncollecting these logs easily and reliably.\n\n`Fluentd <https://github.com/fluent/fluentd>`__ solves that problem by\nhaving: easy installation, small footprint, plugins, reliable buffering,\nlog forwarding, etc.\n\n**fluent-logger-python** is a Python library, to record the events from\nPython application.\n\nNOTE: This is a fork of https://github.com/fluent/fluent-logger-python, it only\nadds TLS capability to the original package.\n\nRequirements\n------------\n\n-  Python 2.7 or 3.4+\n- ``msgpack-python``\n- **IMPORTANT**: Version 0.8.0 is the last version supporting Python 2.6, 3.2 and 3.3\n\nInstallation\n------------\n\nThis library is distributed as 'fluent-logger' python package. Please\nexecute the following command to install it.\n\n.. code:: sh\n\n    $ pip install mona-fluent-logger\n\nConfiguration\n-------------\n\nFluentd daemon must be launched with a tcp source configuration:\n\n::\n\n    <source>\n      type forward\n      port 24224\n    </source>\n\nTo quickly test your setup, add a matcher that logs to the stdout:\n\n::\n\n    <match app.**>\n      type stdout\n    </match>\n\nUsage\n-----\n\nFluentSender Interface\n~~~~~~~~~~~~~~~~~~~~~~\n\n`sender.FluentSender` is a structured event logger for Fluentd.\n\nBy default, the logger assumes fluentd daemon is launched locally. You\ncan also specify remote logger by passing the options.\n\n.. code:: python\n\n    from fluent import sender\n\n    # for local fluent\n    logger = sender.FluentSender('app')\n\n    # for remote fluent\n    logger = sender.FluentSender('app', host='host', port=24224)\n\nFor sending event, call `emit` method with your event. Following example will send the event to\nfluentd, with tag 'app.follow' and the attributes 'from' and 'to'.\n\n.. code:: python\n\n    # Use current time\n    logger.emit('follow', {'from': 'userA', 'to': 'userB'})\n\n    # Specify optional time\n    cur_time = int(time.time())\n    logger.emit_with_time('follow', cur_time, {'from': 'userA', 'to':'userB'})\n\nTo send events with nanosecond-precision timestamps (Fluent 0.14 and up),\nspecify `nanosecond_precision` on `FluentSender`.\n\n.. code:: python\n\n    # Use nanosecond\n    logger = sender.FluentSender('app', nanosecond_precision=True)\n    logger.emit('follow', {'from': 'userA', 'to': 'userB'})\n    logger.emit_with_time('follow', time.time(), {'from': 'userA', 'to': 'userB'})\n\nYou can detect an error via return value of `emit`. If an error happens in `emit`, `emit` returns `False` and get an error object using `last_error` method.\n\n.. code:: python\n\n    if not logger.emit('follow', {'from': 'userA', 'to': 'userB'}):\n        print(logger.last_error)\n        logger.clear_last_error() # clear stored error after handled errors\n\nIf you want to shutdown the client, call `close()` method.\n\n.. code:: python\n\n    logger.close()\n\nEvent-Based Interface\n~~~~~~~~~~~~~~~~~~~~~\n\nThis API is a wrapper for `sender.FluentSender`.\n\nFirst, you need to call ``sender.setup()`` to create global `sender.FluentSender` logger\ninstance. This call needs to be called only once, at the beginning of\nthe application for example.\n\nInitialization code of Event-Based API is below:\n\n.. code:: python\n\n    from fluent import sender\n\n    # for local fluent\n    sender.setup('app')\n\n    # for remote fluent\n    sender.setup('app', host='host', port=24224)\n\nThen, please create the events like this. This will send the event to\nfluentd, with tag 'app.follow' and the attributes 'from' and 'to'.\n\n.. code:: python\n\n    from fluent import event\n\n    # send event to fluentd, with 'app.follow' tag\n    event.Event('follow', {\n      'from': 'userA',\n      'to':   'userB'\n    })\n\n`event.Event` has one limitation which can't return success/failure result.\n\nOther methods for Event-Based Interface.\n\n.. code:: python\n\n    sender.get_global_sender # get instance of global sender\n    sender.close # Call FluentSender#close\n\nHandler for buffer overflow\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can inject your own custom proc to handle buffer overflow in the event of connection failure. This will mitigate the loss of data instead of simply throwing data away.\n\n.. code:: python\n\n    import msgpack\n    from io import BytesIO\n\n    def overflow_handler(pendings):\n        unpacker = msgpack.Unpacker(BytesIO(pendings))\n        for unpacked in unpacker:\n            print(unpacked)\n\n    logger = sender.FluentSender('app', host='host', port=24224, buffer_overflow_handler=overflow_handler)\n\nYou should handle any exception in handler. fluent-logger ignores exceptions from ``buffer_overflow_handler``.\n\nThis handler is also called when pending events exist during `close()`.\n\nPython logging.Handler interface\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis client-library also has ``FluentHandler`` class for Python logging\nmodule.\n\n.. code:: python\n\n    import logging\n    from fluent import handler\n\n    custom_format = {\n      'host': '%(hostname)s',\n      'where': '%(module)s.%(funcName)s',\n      'type': '%(levelname)s',\n      'stack_trace': '%(exc_text)s'\n    }\n\n    logging.basicConfig(level=logging.INFO)\n    l = logging.getLogger('fluent.test')\n    h = handler.FluentHandler('app.follow', host='host', port=24224, buffer_overflow_handler=overflow_handler)\n    formatter = handler.FluentRecordFormatter(custom_format)\n    h.setFormatter(formatter)\n    l.addHandler(h)\n    l.info({\n      'from': 'userA',\n      'to': 'userB'\n    })\n    l.info('{\"from\": \"userC\", \"to\": \"userD\"}')\n    l.info(\"This log entry will be logged with the additional key: 'message'.\")\n\nYou can also customize formatter via logging.config.dictConfig\n\n.. code:: python\n\n    import logging.config\n    import yaml\n\n    with open('logging.yaml') as fd:\n        conf = yaml.load(fd)\n\n    logging.config.dictConfig(conf['logging'])\n\nYou can inject your own custom proc to handle buffer overflow in the event of connection failure. This will mitigate the loss of data instead of simply throwing data away.\n\n.. code:: python\n\n    import msgpack\n    from io import BytesIO\n\n    def overflow_handler(pendings):\n        unpacker = msgpack.Unpacker(BytesIO(pendings))\n        for unpacked in unpacker:\n            print(unpacked)\n\nA sample configuration ``logging.yaml`` would be:\n\n.. code:: python\n\n    logging:\n        version: 1\n\n        formatters:\n          brief:\n            format: '%(message)s'\n          default:\n            format: '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'\n            datefmt: '%Y-%m-%d %H:%M:%S'\n          fluent_fmt:\n            '()': fluent.handler.FluentRecordFormatter\n            format:\n              level: '%(levelname)s'\n              hostname: '%(hostname)s'\n              where: '%(module)s.%(funcName)s'\n\n        handlers:\n            console:\n                class : logging.StreamHandler\n                level: DEBUG\n                formatter: default\n                stream: ext://sys.stdout\n            fluent:\n                class: fluent.handler.FluentHandler\n                host: localhost\n                port: 24224\n                tag: test.logging\n                buffer_overflow_handler: overflow_handler\n                formatter: fluent_fmt\n                level: DEBUG\n            none:\n                class: logging.NullHandler\n\n        loggers:\n            amqp:\n                handlers: [none]\n                propagate: False\n            conf:\n                handlers: [none]\n                propagate: False\n            '': # root logger\n                handlers: [console, fluent]\n                level: DEBUG\n                propagate: False\n\nAsynchronous Communication\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBesides the regular interfaces - the event-based one provided by ``sender.FluentSender`` and the python logging one\nprovided by ``handler.FluentHandler`` - there are also corresponding asynchronous versions in ``asyncsender`` and\n``asynchandler`` respectively. These versions use a separate thread to handle the communication with the remote fluentd\nserver. In this way the client of the library won't be blocked during the logging of the events, and won't risk going\ninto timeout if the fluentd server becomes unreachable. Also it won't be slowed down by the network overhead.\n\nThe interfaces in ``asyncsender`` and ``asynchandler`` are exactly the same as those in ``sender`` and ``handler``, so it's\njust a matter of importing from a different module.\n\nFor instance, for the event-based interface:\n\n.. code:: python\n\n    from fluent import asyncsender as sender\n\n    # for local fluent\n    sender.setup('app')\n\n    # for remote fluent\n    sender.setup('app', host='host', port=24224)\n\n    # do your work\n    ...\n\n    # IMPORTANT: before program termination, close the sender\n    sender.close()\n\nor for the python logging interface:\n\n.. code:: python\n\n    import logging\n    from fluent import asynchandler as handler\n\n    custom_format = {\n      'host': '%(hostname)s',\n      'where': '%(module)s.%(funcName)s',\n      'type': '%(levelname)s',\n      'stack_trace': '%(exc_text)s'\n    }\n\n    logging.basicConfig(level=logging.INFO)\n    l = logging.getLogger('fluent.test')\n    h = handler.FluentHandler('app.follow', host='host', port=24224, buffer_overflow_handler=overflow_handler)\n    formatter = handler.FluentRecordFormatter(custom_format)\n    h.setFormatter(formatter)\n    l.addHandler(h)\n    l.info({\n      'from': 'userA',\n      'to': 'userB'\n    })\n    l.info('{\"from\": \"userC\", \"to\": \"userD\"}')\n    l.info(\"This log entry will be logged with the additional key: 'message'.\")\n\n    ...\n\n    # IMPORTANT: before program termination, close the handler\n    h.close()\n\n**NOTE**: please note that it's important to close the sender or the handler at program termination. This will make\nsure the communication thread terminates and it's joined correctly. Otherwise the program won't exit, waiting for\nthe thread, unless forcibly killed.\n\nCircular queue mode\n+++++++++++++++++++\n\nIn some applications it can be especially important to guarantee that the logging process won't block under *any*\ncircumstance, even when it's logging faster than the sending thread could handle (*backpressure*). In this case it's\npossible to enable the `circular queue` mode, by passing `True` in the `queue_circular` parameter of\n``asyncsender.FluentSender`` or ``asynchandler.FluentHandler``. By doing so the thread doing the logging won't block\neven when the queue is full, the new event will be added to the queue by discarding the oldest one.\n\n**WARNING**: setting `queue_circular` to `True` will cause loss of events if the queue fills up completely! Make sure\nthat this doesn't happen, or it's acceptable for your application.\n\n\nTesting\n-------\n\nTesting can be done using\n`nose <https://nose.readthedocs.org/en/latest/>`__.\n\nRelease\n-------\n\nNeed wheel package.\n\n.. code:: sh\n\n    $ pip install wheel\n\nAfter that, type following command:\n\n.. code:: sh\n\n    $ python setup.py clean sdist bdist_wheel upload\n\nContributors\n------------\n\nPatches contributed by `those\npeople <https://github.com/fluent/fluent-logger-python/contributors>`__.\n\nLicense\n-------\n\nApache License, Version 2.0\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "http://pypi.python.org/pypi/mona-fluent-logger/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/itaiMona/fluent-logger-python", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "mona-fluent-logger", "package_url": "https://pypi.org/project/mona-fluent-logger/", "platform": "", "project_url": "https://pypi.org/project/mona-fluent-logger/", "project_urls": {"Download": "http://pypi.python.org/pypi/mona-fluent-logger/", "Homepage": "https://github.com/itaiMona/fluent-logger-python"}, "release_url": "https://pypi.org/project/mona-fluent-logger/0.0.6/", "requires_dist": ["msgpack"], "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.9", "summary": "A Python logging handler for Fluentd event collector", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/fluent/fluent-logger-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32e8ac8f602f78c121f687553e3ea07408774ab0/68747470733a2f2f7472617669732d63692e6f72672f666c75656e742f666c75656e742d6c6f676765722d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/fluent/fluent-logger-python\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09982882c8b7db654256f28e54f7959de793cb39/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f666c75656e742f666c75656e742d6c6f676765722d707974686f6e2f62616467652e737667\"></a>\n<p>Many web/mobile applications generate huge amount of event logs (c,f.\nlogin, logout, purchase, follow, etc). To analyze these event logs could\nbe really valuable for improving the service. However, the challenge is\ncollecting these logs easily and reliably.</p>\n<p><a href=\"https://github.com/fluent/fluentd\" rel=\"nofollow\">Fluentd</a> solves that problem by\nhaving: easy installation, small footprint, plugins, reliable buffering,\nlog forwarding, etc.</p>\n<p><strong>fluent-logger-python</strong> is a Python library, to record the events from\nPython application.</p>\n<p>NOTE: This is a fork of <a href=\"https://github.com/fluent/fluent-logger-python\" rel=\"nofollow\">https://github.com/fluent/fluent-logger-python</a>, it only\nadds TLS capability to the original package.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7 or 3.4+</li>\n<li><tt><span class=\"pre\">msgpack-python</span></tt></li>\n<li><strong>IMPORTANT</strong>: Version 0.8.0 is the last version supporting Python 2.6, 3.2 and 3.3</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This library is distributed as \u2018fluent-logger\u2019 python package. Please\nexecute the following command to install it.</p>\n<pre>$ pip install mona-fluent-logger\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Fluentd daemon must be launched with a tcp source configuration:</p>\n<pre>&lt;source&gt;\n  type forward\n  port 24224\n&lt;/source&gt;\n</pre>\n<p>To quickly test your setup, add a matcher that logs to the stdout:</p>\n<pre>&lt;match app.**&gt;\n  type stdout\n&lt;/match&gt;\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"fluentsender-interface\">\n<h3>FluentSender Interface</h3>\n<p><cite>sender.FluentSender</cite> is a structured event logger for Fluentd.</p>\n<p>By default, the logger assumes fluentd daemon is launched locally. You\ncan also specify remote logger by passing the options.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluent</span> <span class=\"kn\">import</span> <span class=\"n\">sender</span>\n\n<span class=\"c1\"># for local fluent</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">FluentSender</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># for remote fluent</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">FluentSender</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'host'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">24224</span><span class=\"p\">)</span>\n</pre>\n<p>For sending event, call <cite>emit</cite> method with your event. Following example will send the event to\nfluentd, with tag \u2018app.follow\u2019 and the attributes \u2018from\u2019 and \u2018to\u2019.</p>\n<pre><span class=\"c1\"># Use current time</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'follow'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"s1\">'userA'</span><span class=\"p\">,</span> <span class=\"s1\">'to'</span><span class=\"p\">:</span> <span class=\"s1\">'userB'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Specify optional time</span>\n<span class=\"n\">cur_time</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">())</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">emit_with_time</span><span class=\"p\">(</span><span class=\"s1\">'follow'</span><span class=\"p\">,</span> <span class=\"n\">cur_time</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"s1\">'userA'</span><span class=\"p\">,</span> <span class=\"s1\">'to'</span><span class=\"p\">:</span><span class=\"s1\">'userB'</span><span class=\"p\">})</span>\n</pre>\n<p>To send events with nanosecond-precision timestamps (Fluent 0.14 and up),\nspecify <cite>nanosecond_precision</cite> on <cite>FluentSender</cite>.</p>\n<pre><span class=\"c1\"># Use nanosecond</span>\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">FluentSender</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">,</span> <span class=\"n\">nanosecond_precision</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'follow'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"s1\">'userA'</span><span class=\"p\">,</span> <span class=\"s1\">'to'</span><span class=\"p\">:</span> <span class=\"s1\">'userB'</span><span class=\"p\">})</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">emit_with_time</span><span class=\"p\">(</span><span class=\"s1\">'follow'</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span> <span class=\"p\">{</span><span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"s1\">'userA'</span><span class=\"p\">,</span> <span class=\"s1\">'to'</span><span class=\"p\">:</span> <span class=\"s1\">'userB'</span><span class=\"p\">})</span>\n</pre>\n<p>You can detect an error via return value of <cite>emit</cite>. If an error happens in <cite>emit</cite>, <cite>emit</cite> returns <cite>False</cite> and get an error object using <cite>last_error</cite> method.</p>\n<pre><span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'follow'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"s1\">'userA'</span><span class=\"p\">,</span> <span class=\"s1\">'to'</span><span class=\"p\">:</span> <span class=\"s1\">'userB'</span><span class=\"p\">}):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">last_error</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">clear_last_error</span><span class=\"p\">()</span> <span class=\"c1\"># clear stored error after handled errors</span>\n</pre>\n<p>If you want to shutdown the client, call <cite>close()</cite> method.</p>\n<pre><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"event-based-interface\">\n<h3>Event-Based Interface</h3>\n<p>This API is a wrapper for <cite>sender.FluentSender</cite>.</p>\n<p>First, you need to call <tt>sender.setup()</tt> to create global <cite>sender.FluentSender</cite> logger\ninstance. This call needs to be called only once, at the beginning of\nthe application for example.</p>\n<p>Initialization code of Event-Based API is below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluent</span> <span class=\"kn\">import</span> <span class=\"n\">sender</span>\n\n<span class=\"c1\"># for local fluent</span>\n<span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># for remote fluent</span>\n<span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'host'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">24224</span><span class=\"p\">)</span>\n</pre>\n<p>Then, please create the events like this. This will send the event to\nfluentd, with tag \u2018app.follow\u2019 and the attributes \u2018from\u2019 and \u2018to\u2019.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluent</span> <span class=\"kn\">import</span> <span class=\"n\">event</span>\n\n<span class=\"c1\"># send event to fluentd, with 'app.follow' tag</span>\n<span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">(</span><span class=\"s1\">'follow'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"s1\">'userA'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'to'</span><span class=\"p\">:</span>   <span class=\"s1\">'userB'</span>\n<span class=\"p\">})</span>\n</pre>\n<p><cite>event.Event</cite> has one limitation which can\u2019t return success/failure result.</p>\n<p>Other methods for Event-Based Interface.</p>\n<pre><span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">get_global_sender</span> <span class=\"c1\"># get instance of global sender</span>\n<span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">close</span> <span class=\"c1\"># Call FluentSender#close</span>\n</pre>\n</div>\n<div id=\"handler-for-buffer-overflow\">\n<h3>Handler for buffer overflow</h3>\n<p>You can inject your own custom proc to handle buffer overflow in the event of connection failure. This will mitigate the loss of data instead of simply throwing data away.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">msgpack</span>\n<span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">overflow_handler</span><span class=\"p\">(</span><span class=\"n\">pendings</span><span class=\"p\">):</span>\n    <span class=\"n\">unpacker</span> <span class=\"o\">=</span> <span class=\"n\">msgpack</span><span class=\"o\">.</span><span class=\"n\">Unpacker</span><span class=\"p\">(</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">pendings</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">unpacked</span> <span class=\"ow\">in</span> <span class=\"n\">unpacker</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">unpacked</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">FluentSender</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'host'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">24224</span><span class=\"p\">,</span> <span class=\"n\">buffer_overflow_handler</span><span class=\"o\">=</span><span class=\"n\">overflow_handler</span><span class=\"p\">)</span>\n</pre>\n<p>You should handle any exception in handler. fluent-logger ignores exceptions from <tt>buffer_overflow_handler</tt>.</p>\n<p>This handler is also called when pending events exist during <cite>close()</cite>.</p>\n</div>\n<div id=\"python-logging-handler-interface\">\n<h3>Python logging.Handler interface</h3>\n<p>This client-library also has <tt>FluentHandler</tt> class for Python logging\nmodule.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fluent</span> <span class=\"kn\">import</span> <span class=\"n\">handler</span>\n\n<span class=\"n\">custom_format</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(hostname)s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'where'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(module)s</span><span class=\"s1\">.</span><span class=\"si\">%(funcName)s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(levelname)s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'stack_trace'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(exc_text)s</span><span class=\"s1\">'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'fluent.test'</span><span class=\"p\">)</span>\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">FluentHandler</span><span class=\"p\">(</span><span class=\"s1\">'app.follow'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'host'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">24224</span><span class=\"p\">,</span> <span class=\"n\">buffer_overflow_handler</span><span class=\"o\">=</span><span class=\"n\">overflow_handler</span><span class=\"p\">)</span>\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">FluentRecordFormatter</span><span class=\"p\">(</span><span class=\"n\">custom_format</span><span class=\"p\">)</span>\n<span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">({</span>\n  <span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"s1\">'userA'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'to'</span><span class=\"p\">:</span> <span class=\"s1\">'userB'</span>\n<span class=\"p\">})</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'{\"from\": \"userC\", \"to\": \"userD\"}'</span><span class=\"p\">)</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"This log entry will be logged with the additional key: 'message'.\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can also customize formatter via logging.config.dictConfig</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging.config</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'logging.yaml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">dictConfig</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"p\">[</span><span class=\"s1\">'logging'</span><span class=\"p\">])</span>\n</pre>\n<p>You can inject your own custom proc to handle buffer overflow in the event of connection failure. This will mitigate the loss of data instead of simply throwing data away.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">msgpack</span>\n<span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">overflow_handler</span><span class=\"p\">(</span><span class=\"n\">pendings</span><span class=\"p\">):</span>\n    <span class=\"n\">unpacker</span> <span class=\"o\">=</span> <span class=\"n\">msgpack</span><span class=\"o\">.</span><span class=\"n\">Unpacker</span><span class=\"p\">(</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">pendings</span><span class=\"p\">))</span>\n    <span class=\"k\">for</span> <span class=\"n\">unpacked</span> <span class=\"ow\">in</span> <span class=\"n\">unpacker</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">unpacked</span><span class=\"p\">)</span>\n</pre>\n<p>A sample configuration <tt>logging.yaml</tt> would be:</p>\n<pre><span class=\"n\">logging</span><span class=\"p\">:</span>\n    <span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">formatters</span><span class=\"p\">:</span>\n      <span class=\"n\">brief</span><span class=\"p\">:</span>\n        <span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n      <span class=\"n\">default</span><span class=\"p\">:</span>\n        <span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> </span><span class=\"si\">%(levelname)-8s</span><span class=\"s1\"> </span><span class=\"si\">%(name)-15s</span><span class=\"s1\"> </span><span class=\"si\">%(message)s</span><span class=\"s1\">'</span>\n        <span class=\"n\">datefmt</span><span class=\"p\">:</span> <span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\"> %H:%M:%S'</span>\n      <span class=\"n\">fluent_fmt</span><span class=\"p\">:</span>\n        <span class=\"s1\">'()'</span><span class=\"p\">:</span> <span class=\"n\">fluent</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">FluentRecordFormatter</span>\n        <span class=\"nb\">format</span><span class=\"p\">:</span>\n          <span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(levelname)s</span><span class=\"s1\">'</span>\n          <span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(hostname)s</span><span class=\"s1\">'</span>\n          <span class=\"n\">where</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(module)s</span><span class=\"s1\">.</span><span class=\"si\">%(funcName)s</span><span class=\"s1\">'</span>\n\n    <span class=\"n\">handlers</span><span class=\"p\">:</span>\n        <span class=\"n\">console</span><span class=\"p\">:</span>\n            <span class=\"k\">class</span> <span class=\"err\">: </span><span class=\"nc\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span>\n            <span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"n\">DEBUG</span>\n            <span class=\"n\">formatter</span><span class=\"p\">:</span> <span class=\"n\">default</span>\n            <span class=\"n\">stream</span><span class=\"p\">:</span> <span class=\"n\">ext</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span>\n        <span class=\"n\">fluent</span><span class=\"p\">:</span>\n            <span class=\"n\">class</span><span class=\"p\">:</span> <span class=\"n\">fluent</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">FluentHandler</span>\n            <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"n\">localhost</span>\n            <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"mi\">24224</span>\n            <span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">logging</span>\n            <span class=\"n\">buffer_overflow_handler</span><span class=\"p\">:</span> <span class=\"n\">overflow_handler</span>\n            <span class=\"n\">formatter</span><span class=\"p\">:</span> <span class=\"n\">fluent_fmt</span>\n            <span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"n\">DEBUG</span>\n        <span class=\"n\">none</span><span class=\"p\">:</span>\n            <span class=\"n\">class</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">NullHandler</span>\n\n    <span class=\"n\">loggers</span><span class=\"p\">:</span>\n        <span class=\"n\">amqp</span><span class=\"p\">:</span>\n            <span class=\"n\">handlers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">none</span><span class=\"p\">]</span>\n            <span class=\"n\">propagate</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n        <span class=\"n\">conf</span><span class=\"p\">:</span>\n            <span class=\"n\">handlers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">none</span><span class=\"p\">]</span>\n            <span class=\"n\">propagate</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n        <span class=\"s1\">''</span><span class=\"p\">:</span> <span class=\"c1\"># root logger</span>\n            <span class=\"n\">handlers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">console</span><span class=\"p\">,</span> <span class=\"n\">fluent</span><span class=\"p\">]</span>\n            <span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"n\">DEBUG</span>\n            <span class=\"n\">propagate</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n</pre>\n</div>\n<div id=\"asynchronous-communication\">\n<h3>Asynchronous Communication</h3>\n<p>Besides the regular interfaces - the event-based one provided by <tt>sender.FluentSender</tt> and the python logging one\nprovided by <tt>handler.FluentHandler</tt> - there are also corresponding asynchronous versions in <tt>asyncsender</tt> and\n<tt>asynchandler</tt> respectively. These versions use a separate thread to handle the communication with the remote fluentd\nserver. In this way the client of the library won\u2019t be blocked during the logging of the events, and won\u2019t risk going\ninto timeout if the fluentd server becomes unreachable. Also it won\u2019t be slowed down by the network overhead.</p>\n<p>The interfaces in <tt>asyncsender</tt> and <tt>asynchandler</tt> are exactly the same as those in <tt>sender</tt> and <tt>handler</tt>, so it\u2019s\njust a matter of importing from a different module.</p>\n<p>For instance, for the event-based interface:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluent</span> <span class=\"kn\">import</span> <span class=\"n\">asyncsender</span> <span class=\"k\">as</span> <span class=\"n\">sender</span>\n\n<span class=\"c1\"># for local fluent</span>\n<span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># for remote fluent</span>\n<span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"s1\">'app'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'host'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">24224</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># do your work</span>\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># IMPORTANT: before program termination, close the sender</span>\n<span class=\"n\">sender</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>or for the python logging interface:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fluent</span> <span class=\"kn\">import</span> <span class=\"n\">asynchandler</span> <span class=\"k\">as</span> <span class=\"n\">handler</span>\n\n<span class=\"n\">custom_format</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(hostname)s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'where'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(module)s</span><span class=\"s1\">.</span><span class=\"si\">%(funcName)s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(levelname)s</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'stack_trace'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%(exc_text)s</span><span class=\"s1\">'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n<span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'fluent.test'</span><span class=\"p\">)</span>\n<span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">FluentHandler</span><span class=\"p\">(</span><span class=\"s1\">'app.follow'</span><span class=\"p\">,</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'host'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">24224</span><span class=\"p\">,</span> <span class=\"n\">buffer_overflow_handler</span><span class=\"o\">=</span><span class=\"n\">overflow_handler</span><span class=\"p\">)</span>\n<span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">FluentRecordFormatter</span><span class=\"p\">(</span><span class=\"n\">custom_format</span><span class=\"p\">)</span>\n<span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">({</span>\n  <span class=\"s1\">'from'</span><span class=\"p\">:</span> <span class=\"s1\">'userA'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'to'</span><span class=\"p\">:</span> <span class=\"s1\">'userB'</span>\n<span class=\"p\">})</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'{\"from\": \"userC\", \"to\": \"userD\"}'</span><span class=\"p\">)</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"This log entry will be logged with the additional key: 'message'.\"</span><span class=\"p\">)</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># IMPORTANT: before program termination, close the handler</span>\n<span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p><strong>NOTE</strong>: please note that it\u2019s important to close the sender or the handler at program termination. This will make\nsure the communication thread terminates and it\u2019s joined correctly. Otherwise the program won\u2019t exit, waiting for\nthe thread, unless forcibly killed.</p>\n<div id=\"circular-queue-mode\">\n<h4>Circular queue mode</h4>\n<p>In some applications it can be especially important to guarantee that the logging process won\u2019t block under <em>any</em>\ncircumstance, even when it\u2019s logging faster than the sending thread could handle (<em>backpressure</em>). In this case it\u2019s\npossible to enable the <cite>circular queue</cite> mode, by passing <cite>True</cite> in the <cite>queue_circular</cite> parameter of\n<tt>asyncsender.FluentSender</tt> or <tt>asynchandler.FluentHandler</tt>. By doing so the thread doing the logging won\u2019t block\neven when the queue is full, the new event will be added to the queue by discarding the oldest one.</p>\n<p><strong>WARNING</strong>: setting <cite>queue_circular</cite> to <cite>True</cite> will cause loss of events if the queue fills up completely! Make sure\nthat this doesn\u2019t happen, or it\u2019s acceptable for your application.</p>\n</div>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Testing can be done using\n<a href=\"https://nose.readthedocs.org/en/latest/\" rel=\"nofollow\">nose</a>.</p>\n</div>\n<div id=\"release\">\n<h2>Release</h2>\n<p>Need wheel package.</p>\n<pre>$ pip install wheel\n</pre>\n<p>After that, type following command:</p>\n<pre>$ python setup.py clean sdist bdist_wheel upload\n</pre>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<p>Patches contributed by <a href=\"https://github.com/fluent/fluent-logger-python/contributors\" rel=\"nofollow\">those\npeople</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Apache License, Version 2.0</p>\n</div>\n\n          </div>"}, "last_serial": 6526424, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b250f94f94fc5415b2f529725365713c", "sha256": "cf6f3984df7078aa19cf27b9c51b6db87f5b15bf6e72746c472d0f4302cecbdd"}, "downloads": -1, "filename": "mona_fluent_logger-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b250f94f94fc5415b2f529725365713c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 12749, "upload_time": "2018-12-09T10:12:44", "upload_time_iso_8601": "2018-12-09T10:12:44.061510Z", "url": "https://files.pythonhosted.org/packages/8c/ab/0623d05d9b462fa4d329883d0e592ffbd7abbcb8eee479664c4b3508a9a2/mona_fluent_logger-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc8221d3308a45400f2519ca975ab536", "sha256": "4a8ec826b5c43cac6533a60e68703812cc61a9fc57d654d2e41ad297f61b5941"}, "downloads": -1, "filename": "mona-fluent-logger-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fc8221d3308a45400f2519ca975ab536", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 14138, "upload_time": "2018-12-09T10:12:46", "upload_time_iso_8601": "2018-12-09T10:12:46.031655Z", "url": "https://files.pythonhosted.org/packages/dc/68/1e1a6359ddc7fbc2ad8a77fc7e62c9d808fe07efd5daf541afadbbf83ab4/mona-fluent-logger-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "f5836e073f1fc9c40ec736218f22892b", "sha256": "d0efef8e9422338d4946d8d2d9e485d7ad80309f5fd28a7ada5e07581575751d"}, "downloads": -1, "filename": "mona_fluent_logger-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f5836e073f1fc9c40ec736218f22892b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 12757, "upload_time": "2018-12-10T12:38:48", "upload_time_iso_8601": "2018-12-10T12:38:48.614725Z", "url": "https://files.pythonhosted.org/packages/8e/6c/544e119af4570857eef54006d864925227c083ac0eed5dee6a85b41cbd20/mona_fluent_logger-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "732a5f78ce961c7451571ba1ee3729a6", "sha256": "5cf54e97e7c0b2c329e1b08ceb6c37bcbebd7d2d2dbc4c3fc40cd7fd3ac2a815"}, "downloads": -1, "filename": "mona-fluent-logger-0.0.2.tar.gz", "has_sig": false, "md5_digest": "732a5f78ce961c7451571ba1ee3729a6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 14143, "upload_time": "2018-12-10T12:38:28", "upload_time_iso_8601": "2018-12-10T12:38:28.626217Z", "url": "https://files.pythonhosted.org/packages/e4/bf/b44acf22278bd34ee1c9a9614184ed1d42179ab1c32cc1f10347034ce642/mona-fluent-logger-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "acd7d5abf3b745834f4e64dd6204ca4e", "sha256": "6f935bff7f32919e1a5964ad50934f0cf91dbe06ed284379f67297adb452a0f7"}, "downloads": -1, "filename": "mona_fluent_logger-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "acd7d5abf3b745834f4e64dd6204ca4e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 12766, "upload_time": "2019-01-07T10:07:24", "upload_time_iso_8601": "2019-01-07T10:07:24.311396Z", "url": "https://files.pythonhosted.org/packages/ce/d6/376b1629b5ca3549a53775660a36a4976ec9e5bdf8fc27d4e753a75460c9/mona_fluent_logger-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "275ce8ecdb59696723845cfc520bb4cb", "sha256": "4925d9e4ad8bdf13106407091613e30f1352b7d22429776a0d46ec98a0f0ed5d"}, "downloads": -1, "filename": "mona-fluent-logger-0.0.3.tar.gz", "has_sig": false, "md5_digest": "275ce8ecdb59696723845cfc520bb4cb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 14174, "upload_time": "2019-01-07T10:07:01", "upload_time_iso_8601": "2019-01-07T10:07:01.310290Z", "url": "https://files.pythonhosted.org/packages/e7/35/0b327c041a02faa52a6cdc28c04615afba6bfbd916f0b9816c2f9acf5d48/mona-fluent-logger-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "f0986d62765140b7eb9bf44c3923816a", "sha256": "163bdbbfefaca68d6c06f7aa08ab5e43014c705e73ea84c80271c8924342d9b5"}, "downloads": -1, "filename": "mona_fluent_logger-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f0986d62765140b7eb9bf44c3923816a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 13034, "upload_time": "2019-01-21T17:01:00", "upload_time_iso_8601": "2019-01-21T17:01:00.875584Z", "url": "https://files.pythonhosted.org/packages/84/e5/e69398f8045ca0f4e15e4e9441716b2f73bdc2b378866a7ecabc918bd55c/mona_fluent_logger-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7887fc7d9ced872696527d9221d1e8b8", "sha256": "c625b450be9f9a4b00a7d1188bae1dcb46a7d03684d5f77ad152b4b9bf14661c"}, "downloads": -1, "filename": "mona-fluent-logger-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7887fc7d9ced872696527d9221d1e8b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 14378, "upload_time": "2019-01-21T17:01:17", "upload_time_iso_8601": "2019-01-21T17:01:17.408093Z", "url": "https://files.pythonhosted.org/packages/1a/b3/7ba2c6588d8d810b6b2ad4c222ab9db09eb95d3cfbd5819e78086c33c1c6/mona-fluent-logger-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "aa1dd8f976b02178d27372da9d1b4bc1", "sha256": "8111b57391861baadc98d8361860e148733f4402b30a40d52c381761190a426a"}, "downloads": -1, "filename": "mona_fluent_logger-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aa1dd8f976b02178d27372da9d1b4bc1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 13039, "upload_time": "2019-01-22T11:18:23", "upload_time_iso_8601": "2019-01-22T11:18:23.816374Z", "url": "https://files.pythonhosted.org/packages/cb/ad/8991e60067211b0e3ee4fc45f06a4403e45ac1ec9228fd8d70e180870dcf/mona_fluent_logger-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96e7b2d8106e99330407826d15e14c59", "sha256": "2cc00e974889a9d35ebdcffd93d2f0b4ae65968b3e3a134fc21de212c46818ec"}, "downloads": -1, "filename": "mona-fluent-logger-0.0.5.tar.gz", "has_sig": false, "md5_digest": "96e7b2d8106e99330407826d15e14c59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.8", "size": 14381, "upload_time": "2019-01-22T11:18:09", "upload_time_iso_8601": "2019-01-22T11:18:09.557972Z", "url": "https://files.pythonhosted.org/packages/44/b5/e138b4f34252d45e4fe016d56525320f4bf0282e7e31e6b400612a34cda1/mona-fluent-logger-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "827fadf8f5ee3886eb61a22e298a98db", "sha256": "862a592b76ba563bdcc6b7c27e1f8468aee9afd8360ef09f26811f410c013efc"}, "downloads": -1, "filename": "mona_fluent_logger-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "827fadf8f5ee3886eb61a22e298a98db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.9", "size": 13040, "upload_time": "2020-01-27T13:33:39", "upload_time_iso_8601": "2020-01-27T13:33:39.659598Z", "url": "https://files.pythonhosted.org/packages/b1/81/6be79869a26a1dfcc5c2721bdd3d0e66b753d67d5b9d5d876681ab048a50/mona_fluent_logger-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e3d43bdbe4080d70d1637f7e2bcb987", "sha256": "bb3fab43f32d473c8f3e4ba6d533aa1a67933a7666740fe760600bbc3325b1db"}, "downloads": -1, "filename": "mona-fluent-logger-0.0.6.tar.gz", "has_sig": false, "md5_digest": "0e3d43bdbe4080d70d1637f7e2bcb987", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.9", "size": 15269, "upload_time": "2020-01-27T13:33:41", "upload_time_iso_8601": "2020-01-27T13:33:41.972405Z", "url": "https://files.pythonhosted.org/packages/80/96/906ea66c0b56f9834bfa844ab0929683c7b2a0192b9ec1f1c4285d27d3c6/mona-fluent-logger-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "827fadf8f5ee3886eb61a22e298a98db", "sha256": "862a592b76ba563bdcc6b7c27e1f8468aee9afd8360ef09f26811f410c013efc"}, "downloads": -1, "filename": "mona_fluent_logger-0.0.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "827fadf8f5ee3886eb61a22e298a98db", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.9", "size": 13040, "upload_time": "2020-01-27T13:33:39", "upload_time_iso_8601": "2020-01-27T13:33:39.659598Z", "url": "https://files.pythonhosted.org/packages/b1/81/6be79869a26a1dfcc5c2721bdd3d0e66b753d67d5b9d5d876681ab048a50/mona_fluent_logger-0.0.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e3d43bdbe4080d70d1637f7e2bcb987", "sha256": "bb3fab43f32d473c8f3e4ba6d533aa1a67933a7666740fe760600bbc3325b1db"}, "downloads": -1, "filename": "mona-fluent-logger-0.0.6.tar.gz", "has_sig": false, "md5_digest": "0e3d43bdbe4080d70d1637f7e2bcb987", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0,!=3.1,!=3.2,!=3.3,<3.9", "size": 15269, "upload_time": "2020-01-27T13:33:41", "upload_time_iso_8601": "2020-01-27T13:33:41.972405Z", "url": "https://files.pythonhosted.org/packages/80/96/906ea66c0b56f9834bfa844ab0929683c7b2a0192b9ec1f1c4285d27d3c6/mona-fluent-logger-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:28 2020"}