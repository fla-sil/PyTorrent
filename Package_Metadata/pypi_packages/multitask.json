{"info": {"author": "Christopher Stawarz", "author_email": "cstawarz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: System :: Networking"], "description": "multitask allows Python programs to use generators (a.k.a. coroutines)\nto perform cooperative multitasking and asynchronous I/O.\nApplications written using multitask consist of a set of cooperating\ntasks that yield to a shared task manager whenever they perform a\n(potentially) blocking operation, such as I/O on a socket or getting\ndata from a queue.  The task manager temporarily suspends the task\n(allowing other tasks to run in the meantime) and then restarts it\nwhen the blocking operation is complete.  Such an approach is suitable\nfor applications that would otherwise have to use select() and/or\nmultiple threads to achieve concurrency.", "description_content_type": null, "docs_url": null, "download_url": "http://code.google.com/p/python-multitask/downloads/list?can=1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/python-multitask/", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "multitask", "package_url": "https://pypi.org/project/multitask/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/multitask/", "project_urls": {"Download": "http://code.google.com/p/python-multitask/downloads/list?can=1", "Homepage": "http://code.google.com/p/python-multitask/"}, "release_url": "https://pypi.org/project/multitask/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Cooperative multitasking and asynchronous I/O using generators", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>multitask allows Python programs to use generators (a.k.a. coroutines)\nto perform cooperative multitasking and asynchronous I/O.\nApplications written using multitask consist of a set of cooperating\ntasks that yield to a shared task manager whenever they perform a\n(potentially) blocking operation, such as I/O on a socket or getting\ndata from a queue.  The task manager temporarily suspends the task\n(allowing other tasks to run in the meantime) and then restarts it\nwhen the blocking operation is complete.  Such an approach is suitable\nfor applications that would otherwise have to use select() and/or\nmultiple threads to achieve concurrency.</p>\n\n          </div>"}, "last_serial": 102174, "releases": {"0.1.0": [], "0.2.0": []}, "urls": [], "timestamp": "Fri May  8 00:50:19 2020"}