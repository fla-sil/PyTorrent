{"info": {"author": "NVRAM", "author_email": "nvram@users.sourceforge.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Archiving :: Packaging", "Topic :: Utilities"], "description": "tarwalker 1.1\n=============\n\nSummary\n-------\n \n*TarWalker* provides a method to easily scan files somewhat like\n`os.walk <https://docs.python.org/3/library/os.html#os.walk>`_,\nhandling compressed files, recursing through directories and scanning\nwithin `tarfiles <https://en.wikipedia.org/wiki/Tar_(computing)>`_.\n\nThe library is very stable, changes are rare. It well documented and\nhas full unit testing (100% code coverage), and is maintained.\n\n\n.. contents:: **Index**\n   :depth: 2\n   :local:\n\n----------\n\nBuild Status\n------------\n\n.. image:: https://gitlab.com/n2vram/tarwalker/badges/master/build.svg\n    :alt: Build Status\n    :target: https://gitlab.com/n2vram/tarwalker/\n\n\nOverview\n--------\n\nNotes about this library:\n\n1. It can walk through compressed or uncompressed files and `tarfiles\n   <https://en.wikipedia.org/wiki/Tar_(computing)>`_ (and optionally\n   directories), processing the target files one at a time.\n\n2. It uses a pair of callbacks to avoid opening or decompressing files\n   that do are not of interest:\n\n   a. The **matcher** is called first with meta data of the file, and\n      returns true if the file is to be used.\n\n   b. If so, the **handler** is called with the meta data, the **matcher**\n      return value, and an open (possibly decompressed) file handle.\n\n3. Decompression is done on the stream, to reduce memory requirements\n   and to avoid wasted processing when a **handler** returns early.\n\n4. If the **recurse** parameter is true and the walker encounters a\n   `tarfile` embedded within a `tarfile`, its contents will also be\n   scanned the same way.\n\nThere are two (2) classes that are provided.  The primary difference\nis that **TarWalker** will throw an exception if given a directory.\n\n- **TarWalker** handles compressed or uncompressed files and `tarfile`\n  archives.\n\n- **TarDirWalker** is a subclass of **TarWalker** that expands it to\n  recursively walk through directories, processing any files\n  encountered.\n\n\nInstallation\n------------\nInstall the package using **pip**, eg:\n\n     pip install --user tarwalker\n\n     pip3 install --user tarwalker\n\n\nExamples\n--------\n\nThe following is simple tool to look for a given string within files.\nFiles can be given as arguments or within tarballs, and must end with\neither '.log' (w/an optional numeric suffix) or with '.txt':\n\n.. code:: python\n\n    import re\n    import sys\n\n    from tarwalker import TarWalker\n\n    PATTERN = re.compile(r'.*\\.(txt|log(\\.\\d+)?)$')\n\n\n    def handler(fileobj, filename, arch, info, match):\n      try:\n            for line in fileobj:\n          if text in line:\n            path = (arch + ':') if arch else ''\n                    print(\"Found in: \" + path + filename)\n            return\n      except IOError:\n        pass\n\n\n    text = sys.argv[1]\n    walker = TarWalker(file_handler=handler, name_matcher=PATTERN.match, recurse=False)\n\n    for arg in sys.argv[2:]:\n        walker.handle_path(arg)\n  \n\n\nConstructors and Callbacks\n--------------------------\n\nConstructing an instance of *TarWalker* or *TarDirWalker* take the\nsame parameters.  Note that at most one of *file_matcher* or\n*name_matcher* is allowed.\n\n* **file_handler** (required) a callable taking five (5) positional parameters:\n\n   * **fileobj** - a readable `file` object for the file contents.\n   * **filepath** - a `str` with the filename, either as one of:\n\n      * the file path given to *handle_path()*, or\n      * the path of a file found beneath a directory given to *handle_path()*.\n      * the file path of a file within an expanded tar archive.\n\n   * **archname** - a `str` path of the tar archive name, when handling a\n     file found within a tar archive.  It will be a colon (':')\n     separated list if reading a recursive tar archive.\n\n   * **fileinfo** - may be `None` or an object with the following\n     attributes.  See `os.stat\n     <https://docs.python.org/3/library/os.html#os.stat>`_ for more\n     details:\n\n      * **name** - the `str` name of the file,\n      * **size** - the size of the file in bytes,\n      * **mtime** - modification time, in POSIX (epoch) time,\n      * **mode** - the file permission bits,\n      * **uid** - the file owner's User ID, and\n      * **gid** - the file owner's Group ID\n\n   * MATCH - the value returned from the `name_matcher` or `file_matcher` call.\n\n   **NOTE:** files with a compression suffix will have the suffix\n   removed, and the file object will return decompressed contents.\n   *For example*, for \"foo.txt.gz\" `filepath` would be \"foo.txt\" and `fileobj`\n   would be the equivalent contents of \"foo.txt\".\n\n* **file_matcher** (optional) a callable that takes two (2) positional\n  parameters and returns true if the file should be opened and\n  passed to the `file_handler` callback:\n\n   * **filepath** - See `filepath` above.\n   * **fileinfo** - See `fileinfo` above.\n\n* **name_matcher** (optional) a callable that takes one (1) positional\n  parameter  and returns true if the file be opened and passed to\n  `file_handler`:\n\n   * **filepath** - See `file_handler`, above.\n\n* *recurse* (optional) If true, the algorithm will recurse into\n  tarballs found within other tarballs. Furthermore, if `recurse` is a\n  callable it will be called before and after opening an interior\n  tarball, with four (4) positional parameters:\n\n    * **start** - a bool that indicates recursion into the given tarball\n      is starting; it is False on the second call.\n    * **tarname** - name of the contained (interior) tarball, see `filepath` above.\n    * **archive** - the name of the containing (exterior) tarball, see `archname` above.\n    * **fileinfo** - See `fileinfo` above.\n\n\nKnown Issues\n------------\n\nIf you think you have found a defect, or wish to add an enhancement\nrequest, please do so via the `GitLab issues page:\n<https://gitlab.com/n2vram/datahammer/issues>`_.\n\n- The ARCHNAME passed to the *file_handler* callback uses ':' as a\n  separator, which is a legal filename component, so does not\n  necessarily indicate a nested archive.\n\n- The *recurse* feature will scan an embedded `tarfile`, but there is\n  currently no mechanism to avoid scanning a `tarfile` found within an\n  embedded `tarfile` (at any level).  If needed, please submit an\n  enhancement request.\n\n- There are lots of other compression algorithms that are not handled.", "description_content_type": "", "docs_url": null, "download_url": "https://gitlab.com/n2vram/tarwalker/archive/1.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/n2vram/tarwalker", "keywords": "tarfile,gzip,streaming", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tarwalker", "package_url": "https://pypi.org/project/tarwalker/", "platform": "any", "project_url": "https://pypi.org/project/tarwalker/", "project_urls": {"Download": "https://gitlab.com/n2vram/tarwalker/archive/1.1", "Homepage": "https://gitlab.com/n2vram/tarwalker"}, "release_url": "https://pypi.org/project/tarwalker/1.1/", "requires_dist": null, "requires_python": "", "summary": "A library to walk through tar archives, simplifying use by handling listing and decompression.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"summary\">\n<h2>Summary</h2>\n<p><em>TarWalker</em> provides a method to easily scan files somewhat like\n<a href=\"https://docs.python.org/3/library/os.html#os.walk\" rel=\"nofollow\">os.walk</a>,\nhandling compressed files, recursing through directories and scanning\nwithin <a href=\"https://en.wikipedia.org/wiki/Tar_(computing)\" rel=\"nofollow\">tarfiles</a>.</p>\n<p>The library is very stable, changes are rare. It well documented and\nhas full unit testing (100% code coverage), and is maintained.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"build-status\">\n<h2>Build Status</h2>\n<a href=\"https://gitlab.com/n2vram/tarwalker/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdcf7035abd5cb1436ba1a06ceac2b15582fd372/68747470733a2f2f6769746c61622e636f6d2f6e327672616d2f74617277616c6b65722f6261646765732f6d61737465722f6275696c642e737667\"></a>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>Notes about this library:</p>\n<ol>\n<li>It can walk through compressed or uncompressed files and <a href=\"https://en.wikipedia.org/wiki/Tar_(computing)\" rel=\"nofollow\">tarfiles</a> (and optionally\ndirectories), processing the target files one at a time.</li>\n<li>It uses a pair of callbacks to avoid opening or decompressing files\nthat do are not of interest:<ol>\n<li>The <strong>matcher</strong> is called first with meta data of the file, and\nreturns true if the file is to be used.</li>\n<li>If so, the <strong>handler</strong> is called with the meta data, the <strong>matcher</strong>\nreturn value, and an open (possibly decompressed) file handle.</li>\n</ol>\n</li>\n<li>Decompression is done on the stream, to reduce memory requirements\nand to avoid wasted processing when a <strong>handler</strong> returns early.</li>\n<li>If the <strong>recurse</strong> parameter is true and the walker encounters a\n<cite>tarfile</cite> embedded within a <cite>tarfile</cite>, its contents will also be\nscanned the same way.</li>\n</ol>\n<p>There are two (2) classes that are provided.  The primary difference\nis that <strong>TarWalker</strong> will throw an exception if given a directory.</p>\n<ul>\n<li><strong>TarWalker</strong> handles compressed or uncompressed files and <cite>tarfile</cite>\narchives.</li>\n<li><strong>TarDirWalker</strong> is a subclass of <strong>TarWalker</strong> that expands it to\nrecursively walk through directories, processing any files\nencountered.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the package using <strong>pip</strong>, eg:</p>\n<blockquote>\n<p>pip install \u2013user tarwalker</p>\n<p>pip3 install \u2013user tarwalker</p>\n</blockquote>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>The following is simple tool to look for a given string within files.\nFiles can be given as arguments or within tarballs, and must end with\neither \u2018.log\u2019 (w/an optional numeric suffix) or with \u2018.txt\u2019:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tarwalker</span> <span class=\"kn\">import</span> <span class=\"n\">TarWalker</span>\n\n<span class=\"n\">PATTERN</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'.*\\.(txt|log(\\.\\d+)?)$'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">fileobj</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">arch</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">):</span>\n  <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">fileobj</span><span class=\"p\">:</span>\n      <span class=\"k\">if</span> <span class=\"n\">text</span> <span class=\"ow\">in</span> <span class=\"n\">line</span><span class=\"p\">:</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">arch</span> <span class=\"o\">+</span> <span class=\"s1\">':'</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">arch</span> <span class=\"k\">else</span> <span class=\"s1\">''</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Found in: \"</span> <span class=\"o\">+</span> <span class=\"n\">path</span> <span class=\"o\">+</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n  <span class=\"k\">except</span> <span class=\"ne\">IOError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">walker</span> <span class=\"o\">=</span> <span class=\"n\">TarWalker</span><span class=\"p\">(</span><span class=\"n\">file_handler</span><span class=\"o\">=</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"n\">name_matcher</span><span class=\"o\">=</span><span class=\"n\">PATTERN</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">recurse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]:</span>\n    <span class=\"n\">walker</span><span class=\"o\">.</span><span class=\"n\">handle_path</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"constructors-and-callbacks\">\n<h2>Constructors and Callbacks</h2>\n<p>Constructing an instance of <em>TarWalker</em> or <em>TarDirWalker</em> take the\nsame parameters.  Note that at most one of <em>file_matcher</em> or\n<em>name_matcher</em> is allowed.</p>\n<ul>\n<li><p><strong>file_handler</strong> (required) a callable taking five (5) positional parameters:</p>\n<blockquote>\n<ul>\n<li><p><strong>fileobj</strong> - a readable <cite>file</cite> object for the file contents.</p>\n</li>\n<li><p><strong>filepath</strong> - a <cite>str</cite> with the filename, either as one of:</p>\n<blockquote>\n<ul>\n<li>the file path given to <em>handle_path()</em>, or</li>\n<li>the path of a file found beneath a directory given to <em>handle_path()</em>.</li>\n<li>the file path of a file within an expanded tar archive.</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>archname</strong> - a <cite>str</cite> path of the tar archive name, when handling a\nfile found within a tar archive.  It will be a colon (\u2018:\u2019)\nseparated list if reading a recursive tar archive.</p>\n</li>\n<li><p><strong>fileinfo</strong> - may be <cite>None</cite> or an object with the following\nattributes.  See <a href=\"https://docs.python.org/3/library/os.html#os.stat\" rel=\"nofollow\">os.stat</a> for more\ndetails:</p>\n<blockquote>\n<ul>\n<li><strong>name</strong> - the <cite>str</cite> name of the file,</li>\n<li><strong>size</strong> - the size of the file in bytes,</li>\n<li><strong>mtime</strong> - modification time, in POSIX (epoch) time,</li>\n<li><strong>mode</strong> - the file permission bits,</li>\n<li><strong>uid</strong> - the file owner\u2019s User ID, and</li>\n<li><strong>gid</strong> - the file owner\u2019s Group ID</li>\n</ul>\n</blockquote>\n</li>\n<li><p>MATCH - the value returned from the <cite>name_matcher</cite> or <cite>file_matcher</cite> call.</p>\n</li>\n</ul>\n<p><strong>NOTE:</strong> files with a compression suffix will have the suffix\nremoved, and the file object will return decompressed contents.\n<em>For example</em>, for \u201cfoo.txt.gz\u201d <cite>filepath</cite> would be \u201cfoo.txt\u201d and <cite>fileobj</cite>\nwould be the equivalent contents of \u201cfoo.txt\u201d.</p>\n</blockquote>\n</li>\n<li><p><strong>file_matcher</strong> (optional) a callable that takes two (2) positional\nparameters and returns true if the file should be opened and\npassed to the <cite>file_handler</cite> callback:</p>\n<blockquote>\n<ul>\n<li><strong>filepath</strong> - See <cite>filepath</cite> above.</li>\n<li><strong>fileinfo</strong> - See <cite>fileinfo</cite> above.</li>\n</ul>\n</blockquote>\n</li>\n<li><p><strong>name_matcher</strong> (optional) a callable that takes one (1) positional\nparameter  and returns true if the file be opened and passed to\n<cite>file_handler</cite>:</p>\n<blockquote>\n<ul>\n<li><strong>filepath</strong> - See <cite>file_handler</cite>, above.</li>\n</ul>\n</blockquote>\n</li>\n<li><p><em>recurse</em> (optional) If true, the algorithm will recurse into\ntarballs found within other tarballs. Furthermore, if <cite>recurse</cite> is a\ncallable it will be called before and after opening an interior\ntarball, with four (4) positional parameters:</p>\n<blockquote>\n<ul>\n<li><strong>start</strong> - a bool that indicates recursion into the given tarball\nis starting; it is False on the second call.</li>\n<li><strong>tarname</strong> - name of the contained (interior) tarball, see <cite>filepath</cite> above.</li>\n<li><strong>archive</strong> - the name of the containing (exterior) tarball, see <cite>archname</cite> above.</li>\n<li><strong>fileinfo</strong> - See <cite>fileinfo</cite> above.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"known-issues\">\n<h2>Known Issues</h2>\n<p>If you think you have found a defect, or wish to add an enhancement\nrequest, please do so via the <a href=\"https://gitlab.com/n2vram/datahammer/issues\" rel=\"nofollow\">GitLab issues page:</a>.</p>\n<ul>\n<li>The ARCHNAME passed to the <em>file_handler</em> callback uses \u2018:\u2019 as a\nseparator, which is a legal filename component, so does not\nnecessarily indicate a nested archive.</li>\n<li>The <em>recurse</em> feature will scan an embedded <cite>tarfile</cite>, but there is\ncurrently no mechanism to avoid scanning a <cite>tarfile</cite> found within an\nembedded <cite>tarfile</cite> (at any level).  If needed, please submit an\nenhancement request.</li>\n<li>There are lots of other compression algorithms that are not handled.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 4275806, "releases": {"0.1": [], "1.0": [{"comment_text": "", "digests": {"md5": "aa3e62b670f68284cbff3eceeed95f88", "sha256": "b96832839689f6f9e9531b564fd1a562312aea773dc39df8b3c1d1fa873cbdf1"}, "downloads": -1, "filename": "tarwalker-1.0.tar.gz", "has_sig": false, "md5_digest": "aa3e62b670f68284cbff3eceeed95f88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6940, "upload_time": "2017-04-29T22:21:30", "upload_time_iso_8601": "2017-04-29T22:21:30.813675Z", "url": "https://files.pythonhosted.org/packages/fa/d0/185b054e263889672ea0abdb18aac066d66e5c64e957e681dc788e5bce1d/tarwalker-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "10b28a3f25a7f1410e902ac228d545f3", "sha256": "bb103a0cc3717bb9083f24a2ccd13a49641a0ee5ec2ea80ee5d42a2803516315"}, "downloads": -1, "filename": "tarwalker-1.1.tar.gz", "has_sig": false, "md5_digest": "10b28a3f25a7f1410e902ac228d545f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7905, "upload_time": "2018-09-16T03:08:23", "upload_time_iso_8601": "2018-09-16T03:08:23.183790Z", "url": "https://files.pythonhosted.org/packages/84/e3/5282d6ee7d50de20f1c6fa8221bab06a020036bab5ddeb3de6cbee069296/tarwalker-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10b28a3f25a7f1410e902ac228d545f3", "sha256": "bb103a0cc3717bb9083f24a2ccd13a49641a0ee5ec2ea80ee5d42a2803516315"}, "downloads": -1, "filename": "tarwalker-1.1.tar.gz", "has_sig": false, "md5_digest": "10b28a3f25a7f1410e902ac228d545f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7905, "upload_time": "2018-09-16T03:08:23", "upload_time_iso_8601": "2018-09-16T03:08:23.183790Z", "url": "https://files.pythonhosted.org/packages/84/e3/5282d6ee7d50de20f1c6fa8221bab06a020036bab5ddeb3de6cbee069296/tarwalker-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:51 2020"}