{"info": {"author": "cmrfrd", "author_email": "alexanderjcomerford@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Utilities"], "description": "<pre width=\"1000\">\n                                                              __\n\u2588\u2580\u2580 \u2588\u2580\u2580\u2584 \u2588\u2580\u2580\u2588 \u2588\u2591\u2588 \u2588\u2580\u2580 \u2588\u2580\u2580 \u2588\u2580\u2580\u2588 \u2588\u2580\u2580\u2588 \u2588\u2580\u2580 \u2588\u2580\u2580       _______    /*_>-<\n\u2580\u2580\u2588 \u2588\u2591\u2591\u2588 \u2588\u2584\u2584\u2588 \u2588\u2580\u2584 \u2588\u2580\u2580 \u2580\u2580\u2588 \u2588\u2591\u2591\u2588 \u2588\u2584\u2584\u2588 \u2588\u2591\u2591 \u2588\u2580\u2580   ___/ _____ \\__/ /\n\u2580\u2580\u2580 \u2580\u2591\u2591\u2580 \u2580\u2591\u2591\u2580 \u2580\u2591\u2580 \u2580\u2580\u2580 \u2580\u2580\u2580 \u2588\u2580\u2580\u2580 \u2580\u2591\u2591\u2580 \u2580\u2580\u2580 \u2580\u2580\u2580  <____/     \\____/\n</pre>\n\n[![Actions Status](https://github.com/cmrfrd/SnakeSpace/workflows/pypi/badge.svg)](https://github.com/cmrfrd/SnakeSpace/actions)\n[![codecov](https://codecov.io/gh/cmrfrd/SnakeSpace/branch/master/graph/badge.svg)](https://codecov.io/gh/cmrfrd/SnakeSpace)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/snakespace)\n[![PyPI version](https://badge.fury.io/py/snakespace.svg)](https://badge.fury.io/py/snakespace)\n\n# SnakeSpace\n\n`SnakeSpace` is a module for building label namespaces from [attribute chaining](https://en.wikipedia.org/wiki/Method_chaining) and args/kwargs\n\n### Why\n\nCreating a good label for a file or a key is [hard](https://xkcd.com/1459/). In Python, `str` labels are usually either made via [format strings](https://www.python.org/dev/peps/pep-0498/) or string concatenation. First and foremost, format strings are great! However they are so dynamic, if you are not careful you can end up with a complicated expression, you also have to include those pesky `f` and `{}` characters. String concatenation can also get very messy as putting strings together can turn into a complicated algebraic expression. Now there is an alternative with `SnakeSpace`!\n\nWith `SnakeSpace` you type just what you want as a chain of attributes! The expression `S.yo.hey.woohoo` is totally valid! Now labels can be created with ease! Or at least in a different style...\n\n### Installing\n\nThis repo uses setup.py, so it follows the standard Python install routine\n\n``` shell\npip install -U snakespace\n```\n\nOr if you want to install from source\n\n``` shell\ngit clone https://github.com/cmrfrd/SnakeSpace.git\ncd SnakeSpace\npython3 setup.py install\n```\n\n### Examples and Behavior\n\nWith `SnakeSpace` you can create label namespaces from chaining attributes.\n\n``` python\nfrom snakespace import SnakeSpace\nS = SnakeSpace()\n\nprint(S.super.duper.cool) # -> 'super.duper.cool'\n```\n\nYou can also use the `s` function to supply custom arguments\n\n``` python\nfrom snakespace import SnakeSpace\nS = SnakeSpace()\n\nprint(S.my.favorite.number.s(1301)) # -> 'my.favorite.number.1301'\n\nprint(S.yay.kwargs.s(1, 2, third=3)) # -> 'yay.kwargs.1.2.3'\n\nprint(S.shoop.s('da').whoop) # -> 'shoop.da.whoop'\n```\n\nIf you don't like using periods as the default separator, you can change it using the *special* attribute `separator`\n\n``` python\nfrom snakespace import SnakeSpace\nS = SnakeSpace()\n\nprint(S.a.b.c)    # -> 'a.b.c'\nS.separator = '/'\nprint(S.a.b.c)    # -> 'a/b/c'\n```\n\n~Note!~ You can't chain attributes with `.separator`\n\n\n### Namespacing\n\n`SnakeSpace` behaves in between a `str`, and it's own custom object.\n\n`SnakeSpace` will behave like a `str` when being operated on with another `str` ex: `S.a + 'woop' # -> 'awoop`. However `SnakeSpace` have slightly different behavior when being operated on by other `SnakeSpace`s to support common namespacing operations\n\n`SnakeSpace` can be used for composing and comparing other `SnakeSpace`s.\n\nYou can see if a `SnakeSpace` is a subspace of another by using `in`\n\n``` python\nfrom snakespace import SnakeSpace\nS = SnakeSpace()\n\nprint(S.a.b.c in S.a)           # -> True\nprint(S.potato in S.a)          # -> False\nprint(S.data.s(1,2) in S.data)  # -> True\n```\n\n`SnakeSpace`s can be compared, composed, and operated on\n\n``` python\nfrom snakespace import SnakeSpace\nS = SnakeSpace()\n\n# order (lexicographic)\nprint(S.one < S.one.two)           # -> True\nprint(S.a.b.c > S.a.b > S.a)       # -> True\n\n# equality\nprint(S.a == S.a)                  # -> True\n\n# addition\nprint(S.a + S.b)                   # -> 'a.b'\n\n# size\nprint(len(S.apple.bannana.cherry)) # -> 3\n\n# items\nprint(S.a.b.c[1])                  # -> 'b'\n\n# superspace\nprint(S.a % S.a.b.c)               # -> True\nprint(S.a.b.c.d % S.a.b.c)         # -> False\n```\n\n`Snakespace` also comes with multiple common python `str` methods that are applied element wise in a `Snakespace` opposed to being operated on the whole resulting string.\n\n### Limitations\n\n`SnakeSpace` objects have some reserved attributes that cannot be used to building namespace labels.\n\n1. Any [dunder methods/attributes](https://stackoverflow.com/questions/1418825/where-is-the-python-documentation-for-the-special-methods-init-new) (It's best just to avoid building anything with a start of a double underscore)\n2. Any of these common string attributes\n\n<pre>\n['capitalize', 'casefold', 'count', 'encode', 'endswith',\n 'find', 'index', 'isalnum', 'isalpha', 'isdecimal',\n 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable',\n 'isspace', 'istitle', 'isupper', 'ljust', 'lower',\n 'lstrip', 'partition', 'replace', 'rfind', 'rindex',\n 'rjust', 'rpartition', 'rstrip', 's', 'separator',\n 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n</pre>\n\n### Fun examples\n\nEasily make a bunch of keys for a `dict`\n\n``` python\nfrom random import randint\nfrom snakespace import SnakeSpace\nS = SnakeSpace()\nD = {}\n\nfor i in range(10):\n    D[S.data.s(i)] = randint(0,10)\n```\n\nmake a bunch of files with a name schema, then easily filter them\n\n``` python\nfrom uuid import uuid4\nfrom pathlib import Path as Pth\nimport tempfile as tmpf\nfrom snakespace import SnakeSpace\n\nS = SnakeSpace(separator='/')\ntmp_dir = tmpf.TemporaryDirectory()\n\n## Make some files\nfor i in range(10):\n    Pth(S.s(tmp_dir.name,uuid4())).touch()\n\nfor f in Pth(tmp_dir.name).iterdir():\n    if S.a < S(f.parts[-1]) < S.z:\n        print(f)\n```\n\n### Releasing\n\n1. `bump2version`\n2. push tag release\n3. check gha\n\n\n", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cmrfrd/snakespace/", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "snakespace", "package_url": "https://pypi.org/project/snakespace/", "platform": "any", "project_url": "https://pypi.org/project/snakespace/", "project_urls": {"Homepage": "https://github.com/cmrfrd/snakespace/"}, "release_url": "https://pypi.org/project/snakespace/0.1.12/", "requires_dist": null, "requires_python": "", "summary": "Create strings from attribute chains!", "version": "0.1.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre>                                                              __\n\u2588\u2580\u2580 \u2588\u2580\u2580\u2584 \u2588\u2580\u2580\u2588 \u2588\u2591\u2588 \u2588\u2580\u2580 \u2588\u2580\u2580 \u2588\u2580\u2580\u2588 \u2588\u2580\u2580\u2588 \u2588\u2580\u2580 \u2588\u2580\u2580       _______    /*_&gt;-&lt;\n\u2580\u2580\u2588 \u2588\u2591\u2591\u2588 \u2588\u2584\u2584\u2588 \u2588\u2580\u2584 \u2588\u2580\u2580 \u2580\u2580\u2588 \u2588\u2591\u2591\u2588 \u2588\u2584\u2584\u2588 \u2588\u2591\u2591 \u2588\u2580\u2580   ___/ _____ \\__/ /\n\u2580\u2580\u2580 \u2580\u2591\u2591\u2580 \u2580\u2591\u2591\u2580 \u2580\u2591\u2580 \u2580\u2580\u2580 \u2580\u2580\u2580 \u2588\u2580\u2580\u2580 \u2580\u2591\u2591\u2580 \u2580\u2580\u2580 \u2580\u2580\u2580  &lt;____/     \\____/\n</pre>\n<p><a href=\"https://github.com/cmrfrd/SnakeSpace/actions\" rel=\"nofollow\"><img alt=\"Actions Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf2e547417e65d0f689a6a72476641e285dc4522/68747470733a2f2f6769746875622e636f6d2f636d726672642f536e616b6553706163652f776f726b666c6f77732f707970692f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/cmrfrd/SnakeSpace\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d4bf9078099ffee0af63c7bf59761f8840eed07/68747470733a2f2f636f6465636f762e696f2f67682f636d726672642f536e616b6553706163652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f6548e3dda85348316aa6a46b382750465f568fe/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f736e616b657370616365\">\n<a href=\"https://badge.fury.io/py/snakespace\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac892075331d7ccc16afb62a1c96bb2e9a21071c/68747470733a2f2f62616467652e667572792e696f2f70792f736e616b6573706163652e737667\"></a></p>\n<h1>SnakeSpace</h1>\n<p><code>SnakeSpace</code> is a module for building label namespaces from <a href=\"https://en.wikipedia.org/wiki/Method_chaining\" rel=\"nofollow\">attribute chaining</a> and args/kwargs</p>\n<h3>Why</h3>\n<p>Creating a good label for a file or a key is <a href=\"https://xkcd.com/1459/\" rel=\"nofollow\">hard</a>. In Python, <code>str</code> labels are usually either made via <a href=\"https://www.python.org/dev/peps/pep-0498/\" rel=\"nofollow\">format strings</a> or string concatenation. First and foremost, format strings are great! However they are so dynamic, if you are not careful you can end up with a complicated expression, you also have to include those pesky <code>f</code> and <code>{}</code> characters. String concatenation can also get very messy as putting strings together can turn into a complicated algebraic expression. Now there is an alternative with <code>SnakeSpace</code>!</p>\n<p>With <code>SnakeSpace</code> you type just what you want as a chain of attributes! The expression <code>S.yo.hey.woohoo</code> is totally valid! Now labels can be created with ease! Or at least in a different style...</p>\n<h3>Installing</h3>\n<p>This repo uses setup.py, so it follows the standard Python install routine</p>\n<pre>pip install -U snakespace\n</pre>\n<p>Or if you want to install from source</p>\n<pre>git clone https://github.com/cmrfrd/SnakeSpace.git\n<span class=\"nb\">cd</span> SnakeSpace\npython3 setup.py install\n</pre>\n<h3>Examples and Behavior</h3>\n<p>With <code>SnakeSpace</code> you can create label namespaces from chaining attributes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snakespace</span> <span class=\"kn\">import</span> <span class=\"n\">SnakeSpace</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">SnakeSpace</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">super</span><span class=\"o\">.</span><span class=\"n\">duper</span><span class=\"o\">.</span><span class=\"n\">cool</span><span class=\"p\">)</span> <span class=\"c1\"># -&gt; 'super.duper.cool'</span>\n</pre>\n<p>You can also use the <code>s</code> function to supply custom arguments</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snakespace</span> <span class=\"kn\">import</span> <span class=\"n\">SnakeSpace</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">SnakeSpace</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">my</span><span class=\"o\">.</span><span class=\"n\">favorite</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">(</span><span class=\"mi\">1301</span><span class=\"p\">))</span> <span class=\"c1\"># -&gt; 'my.favorite.number.1301'</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">yay</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">third</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span> <span class=\"c1\"># -&gt; 'yay.kwargs.1.2.3'</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">shoop</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">(</span><span class=\"s1\">'da'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">whoop</span><span class=\"p\">)</span> <span class=\"c1\"># -&gt; 'shoop.da.whoop'</span>\n</pre>\n<p>If you don't like using periods as the default separator, you can change it using the <em>special</em> attribute <code>separator</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snakespace</span> <span class=\"kn\">import</span> <span class=\"n\">SnakeSpace</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">SnakeSpace</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">)</span>    <span class=\"c1\"># -&gt; 'a.b.c'</span>\n<span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">separator</span> <span class=\"o\">=</span> <span class=\"s1\">'/'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">)</span>    <span class=\"c1\"># -&gt; 'a/b/c'</span>\n</pre>\n<p><del>Note!</del> You can't chain attributes with <code>.separator</code></p>\n<h3>Namespacing</h3>\n<p><code>SnakeSpace</code> behaves in between a <code>str</code>, and it's own custom object.</p>\n<p><code>SnakeSpace</code> will behave like a <code>str</code> when being operated on with another <code>str</code> ex: <code>S.a + 'woop' # -&gt; 'awoop</code>. However <code>SnakeSpace</code> have slightly different behavior when being operated on by other <code>SnakeSpace</code>s to support common namespacing operations</p>\n<p><code>SnakeSpace</code> can be used for composing and comparing other <code>SnakeSpace</code>s.</p>\n<p>You can see if a <code>SnakeSpace</code> is a subspace of another by using <code>in</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snakespace</span> <span class=\"kn\">import</span> <span class=\"n\">SnakeSpace</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">SnakeSpace</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>           <span class=\"c1\"># -&gt; True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">potato</span> <span class=\"ow\">in</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>          <span class=\"c1\"># -&gt; False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>  <span class=\"c1\"># -&gt; True</span>\n</pre>\n<p><code>SnakeSpace</code>s can be compared, composed, and operated on</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">snakespace</span> <span class=\"kn\">import</span> <span class=\"n\">SnakeSpace</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">SnakeSpace</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># order (lexicographic)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">one</span> <span class=\"o\">&lt;</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"o\">.</span><span class=\"n\">two</span><span class=\"p\">)</span>           <span class=\"c1\"># -&gt; True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">&gt;</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">&gt;</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>       <span class=\"c1\"># -&gt; True</span>\n\n<span class=\"c1\"># equality</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>                  <span class=\"c1\"># -&gt; True</span>\n\n<span class=\"c1\"># addition</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">)</span>                   <span class=\"c1\"># -&gt; 'a.b'</span>\n\n<span class=\"c1\"># size</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">apple</span><span class=\"o\">.</span><span class=\"n\">bannana</span><span class=\"o\">.</span><span class=\"n\">cherry</span><span class=\"p\">))</span> <span class=\"c1\"># -&gt; 3</span>\n\n<span class=\"c1\"># items</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>                  <span class=\"c1\"># -&gt; 'b'</span>\n\n<span class=\"c1\"># superspace</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">%</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">)</span>               <span class=\"c1\"># -&gt; True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">d</span> <span class=\"o\">%</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">)</span>         <span class=\"c1\"># -&gt; False</span>\n</pre>\n<p><code>Snakespace</code> also comes with multiple common python <code>str</code> methods that are applied element wise in a <code>Snakespace</code> opposed to being operated on the whole resulting string.</p>\n<h3>Limitations</h3>\n<p><code>SnakeSpace</code> objects have some reserved attributes that cannot be used to building namespace labels.</p>\n<ol>\n<li>Any <a href=\"https://stackoverflow.com/questions/1418825/where-is-the-python-documentation-for-the-special-methods-init-new\" rel=\"nofollow\">dunder methods/attributes</a> (It's best just to avoid building anything with a start of a double underscore)</li>\n<li>Any of these common string attributes</li>\n</ol>\n<pre>['capitalize', 'casefold', 'count', 'encode', 'endswith',\n 'find', 'index', 'isalnum', 'isalpha', 'isdecimal',\n 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable',\n 'isspace', 'istitle', 'isupper', 'ljust', 'lower',\n 'lstrip', 'partition', 'replace', 'rfind', 'rindex',\n 'rjust', 'rpartition', 'rstrip', 's', 'separator',\n 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n</pre>\n<h3>Fun examples</h3>\n<p>Easily make a bunch of keys for a <code>dict</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakespace</span> <span class=\"kn\">import</span> <span class=\"n\">SnakeSpace</span>\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">SnakeSpace</span><span class=\"p\">()</span>\n<span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">D</span><span class=\"p\">[</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>make a bunch of files with a name schema, then easily filter them</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">uuid</span> <span class=\"kn\">import</span> <span class=\"n\">uuid4</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span> <span class=\"k\">as</span> <span class=\"n\">Pth</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tempfile</span> <span class=\"k\">as</span> <span class=\"nn\">tmpf</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakespace</span> <span class=\"kn\">import</span> <span class=\"n\">SnakeSpace</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"n\">SnakeSpace</span><span class=\"p\">(</span><span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"n\">tmp_dir</span> <span class=\"o\">=</span> <span class=\"n\">tmpf</span><span class=\"o\">.</span><span class=\"n\">TemporaryDirectory</span><span class=\"p\">()</span>\n\n<span class=\"c1\">## Make some files</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"n\">Pth</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">(</span><span class=\"n\">tmp_dir</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">uuid4</span><span class=\"p\">()))</span><span class=\"o\">.</span><span class=\"n\">touch</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">Pth</span><span class=\"p\">(</span><span class=\"n\">tmp_dir</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">iterdir</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">S</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">&lt;</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<h3>Releasing</h3>\n<ol>\n<li><code>bump2version</code></li>\n<li>push tag release</li>\n<li>check gha</li>\n</ol>\n\n          </div>"}, "last_serial": 6821678, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "81e556d098cdd1deafa437babca83ce2", "sha256": "b3aed166ad26fd1258d5bfe9d66d9ded6beb35916ba831a4acc18da6ec8807f8"}, "downloads": -1, "filename": "snakespace-0.1.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "81e556d098cdd1deafa437babca83ce2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7261, "upload_time": "2020-03-15T02:40:56", "upload_time_iso_8601": "2020-03-15T02:40:56.888145Z", "url": "https://files.pythonhosted.org/packages/ac/0e/2b8ef068c812c057540a382af020e81304476719f07884a679ada6dcc946/snakespace-0.1.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "663a50cd288eb8ade4d8836c62bd42cd", "sha256": "7f400914f39d9fb20212b3e0244c632de29c717fe59cebac35a05c19054c1831"}, "downloads": -1, "filename": "snakespace-0.1.10.tar.gz", "has_sig": false, "md5_digest": "663a50cd288eb8ade4d8836c62bd42cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10947, "upload_time": "2020-03-15T02:40:58", "upload_time_iso_8601": "2020-03-15T02:40:58.102775Z", "url": "https://files.pythonhosted.org/packages/74/98/6444bcf201af0690e70d6bd580a3cd4380788b6b94d7c09a54545a9624e5/snakespace-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "3f546965affe3e74f298cafd8f750211", "sha256": "3cb7ae2917efc55ffc4adb81ec1e9b67e3efac9252fc664c3b570645a9a94156"}, "downloads": -1, "filename": "snakespace-0.1.11-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3f546965affe3e74f298cafd8f750211", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7263, "upload_time": "2020-03-15T02:49:54", "upload_time_iso_8601": "2020-03-15T02:49:54.603469Z", "url": "https://files.pythonhosted.org/packages/7c/bc/ca03ddb7a43339df2ec504c3269a3954fa98e5c9a399e399e5154ab767b8/snakespace-0.1.11-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08e3966042ea9c9f8e184039148b0c4d", "sha256": "2b488b4cc3a10f6bbe7f7487b8bc1f8ae4902d8a266089fdb18f0b96e319656f"}, "downloads": -1, "filename": "snakespace-0.1.11.tar.gz", "has_sig": false, "md5_digest": "08e3966042ea9c9f8e184039148b0c4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13653, "upload_time": "2020-03-15T02:49:55", "upload_time_iso_8601": "2020-03-15T02:49:55.900704Z", "url": "https://files.pythonhosted.org/packages/ef/be/4431eb28ec9b8e5675f05015b135d19de81abd4d5809d6376b8e0e69c49e/snakespace-0.1.11.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "9ce839b35c1a28db6b4bec82956c4210", "sha256": "b8e96f9b572c571201bbf9184269306dfdbfa493182c1847e3ed45c38e52fb7c"}, "downloads": -1, "filename": "snakespace-0.1.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9ce839b35c1a28db6b4bec82956c4210", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7361, "upload_time": "2020-03-16T14:39:27", "upload_time_iso_8601": "2020-03-16T14:39:27.509291Z", "url": "https://files.pythonhosted.org/packages/ae/65/0e4f2e2f9939832aa3e8362e1359fa5e4ba4fe06805aa3eccfab3c54d0fc/snakespace-0.1.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd01269fcecf8a504dfc4aa0a8bda5ab", "sha256": "a451c063e43c2e63355d188338dd50fa8b23d930a50bf47721549d0c1e5ffb73"}, "downloads": -1, "filename": "snakespace-0.1.12.tar.gz", "has_sig": false, "md5_digest": "bd01269fcecf8a504dfc4aa0a8bda5ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13930, "upload_time": "2020-03-16T14:39:28", "upload_time_iso_8601": "2020-03-16T14:39:28.763311Z", "url": "https://files.pythonhosted.org/packages/98/26/1f6bd4cd2238f54bb14feddef14d5288208794b020824406bf49dfc8b463/snakespace-0.1.12.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "1da93c53569a28330ae70b584cc7c226", "sha256": "5b022dc4825536eb6d7885d500586d015e5a745ea9a4d23aef7f40a8250b24e7"}, "downloads": -1, "filename": "snakespace-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1da93c53569a28330ae70b584cc7c226", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6326, "upload_time": "2020-03-11T00:42:53", "upload_time_iso_8601": "2020-03-11T00:42:53.267464Z", "url": "https://files.pythonhosted.org/packages/b1/d1/47a6bcc78eb2436663a2f7cce9a5adf196e1fd3e72c9df489ae6e445a1a3/snakespace-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35e0a3a5760ee39c0c8c124d1fac32cf", "sha256": "0592ddb06dd612aae3aae2d4a03574410d2e319d0966c573dd4885f31517c01f"}, "downloads": -1, "filename": "snakespace-0.1.7.tar.gz", "has_sig": false, "md5_digest": "35e0a3a5760ee39c0c8c124d1fac32cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9663, "upload_time": "2020-03-11T00:42:55", "upload_time_iso_8601": "2020-03-11T00:42:55.237186Z", "url": "https://files.pythonhosted.org/packages/f6/e1/c0475c8532532e5e962b5af51c0a372af01c08b3a5306140ec49d54cdf06/snakespace-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "509309026abd56e53a8dfd981f20b4ff", "sha256": "52b10665f8cd7f90d3d61a9451a886a420eb5acf169d724629f717cb8b26e1a7"}, "downloads": -1, "filename": "snakespace-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "509309026abd56e53a8dfd981f20b4ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6852, "upload_time": "2020-03-11T03:57:10", "upload_time_iso_8601": "2020-03-11T03:57:10.859875Z", "url": "https://files.pythonhosted.org/packages/b3/af/4efda2bca70a5d8411e6a6dd01f8eec5da62daea47612da2a009b0aa9f1a/snakespace-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9df25213f1bb20e7e63f20d51e5bb2f", "sha256": "4356f64f2b70f84b0448696b5a5c94d183bd98dd8c178b85105ed64984a37a44"}, "downloads": -1, "filename": "snakespace-0.1.8.tar.gz", "has_sig": false, "md5_digest": "c9df25213f1bb20e7e63f20d51e5bb2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10797, "upload_time": "2020-03-11T03:57:12", "upload_time_iso_8601": "2020-03-11T03:57:12.107238Z", "url": "https://files.pythonhosted.org/packages/02/e4/ca6d7f2755bb48a1bd67f4ae78bdefa3f8cf5db7f085e5ef727bdcabb2cf/snakespace-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "092e3cb6b45ed5730b8f8e952a4395ad", "sha256": "7af896c758d87ce95ef5bd452a74c2939b40ae0699ac63de8ca70b5982bcfb2e"}, "downloads": -1, "filename": "snakespace-0.1.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "092e3cb6b45ed5730b8f8e952a4395ad", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7247, "upload_time": "2020-03-15T02:40:59", "upload_time_iso_8601": "2020-03-15T02:40:59.396563Z", "url": "https://files.pythonhosted.org/packages/ea/35/d1c5209c7acf051cc5d67faef3ecb751cff1ae116b6886d4c9dd9020c1be/snakespace-0.1.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89f3f43303031f293e239fa675a057f8", "sha256": "8a079b94efe36ee8e129bff30ae4b8f73c49c59a4cb1fd2e786eefa815af8d7c"}, "downloads": -1, "filename": "snakespace-0.1.9.tar.gz", "has_sig": false, "md5_digest": "89f3f43303031f293e239fa675a057f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13647, "upload_time": "2020-03-15T02:41:00", "upload_time_iso_8601": "2020-03-15T02:41:00.759170Z", "url": "https://files.pythonhosted.org/packages/6e/62/d2c914dc1c192bd706fa454b8cbfa05763c4ac4a53248dfe0854d61393bb/snakespace-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ce839b35c1a28db6b4bec82956c4210", "sha256": "b8e96f9b572c571201bbf9184269306dfdbfa493182c1847e3ed45c38e52fb7c"}, "downloads": -1, "filename": "snakespace-0.1.12-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9ce839b35c1a28db6b4bec82956c4210", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7361, "upload_time": "2020-03-16T14:39:27", "upload_time_iso_8601": "2020-03-16T14:39:27.509291Z", "url": "https://files.pythonhosted.org/packages/ae/65/0e4f2e2f9939832aa3e8362e1359fa5e4ba4fe06805aa3eccfab3c54d0fc/snakespace-0.1.12-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd01269fcecf8a504dfc4aa0a8bda5ab", "sha256": "a451c063e43c2e63355d188338dd50fa8b23d930a50bf47721549d0c1e5ffb73"}, "downloads": -1, "filename": "snakespace-0.1.12.tar.gz", "has_sig": false, "md5_digest": "bd01269fcecf8a504dfc4aa0a8bda5ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13930, "upload_time": "2020-03-16T14:39:28", "upload_time_iso_8601": "2020-03-16T14:39:28.763311Z", "url": "https://files.pythonhosted.org/packages/98/26/1f6bd4cd2238f54bb14feddef14d5288208794b020824406bf49dfc8b463/snakespace-0.1.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:36 2020"}