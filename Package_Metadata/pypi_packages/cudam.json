{"info": {"author": "Bin Wang", "author_email": "wwwbbb8510@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# cudam\nCuda Mangement - multi-process, scheduled jobs, distributed processing\n\n## command to check all cuda server status\n\n```bash\ndate >> cuda_status.txt && echo 'cuda1' >> cuda_status.txt && ssh cuda1 'nvidia-smi' >> cuda_status.txt && echo 'cuda2' >> cuda_status.txt && ssh cuda2 'nvidia-smi' >> cuda_status.txt && echo 'cuda3' >> cuda_status.txt && ssh cuda3 'nvidia-smi' >> cuda_status.txt && echo 'cuda4' >> cuda_status.txt && ssh cuda4 'nvidia-smi' >> cuda_status.txt && echo 'cuda5' >> cuda_status.txt && ssh cuda5 'nvidia-smi' >> cuda_status.txt && echo 'cuda6' >> cuda_status.txt && ssh cuda6 'nvidia-smi' >> cuda_status.txt && echo 'cuda11' >> cuda_status.txt && ssh cuda11 'nvidia-smi' >> cuda_status.txt\n```\n\n## server-client mode to utilize multi-GPUs across Multi-Machines\n\n### server side - develop the code that runs on a single GPU\n\n```python\n# here is a dumb function to evaluate densenet\n# it should be replaced by the actual code of evaluation\ndef evaluate_densenet(model):\n    acc = 0.99\n    return acc\n```\n\n### client size - develop the code to send the models to server for evaluation\n\n* Add available GPU servers in the server list configuration file\n\n```text\n# configuration of server list\ncuda4,8000\ncuda4,8001\ncuda5,8000\ncuda5,8001\ncuda5,8002\n```\n\n* The client code that concurrently evaluates models\n\n```python\nfrom cudam.cudam_socket.client import GPUClientPool\nDEFAULT_RUN_CODE_WORK_DIRECTORY = \"/home/www/server\" # the folder where the server side code resides \nDEFAULT_RUN_CODE_PATH = \"server_file\" # the file name of the server side code\nSERVER_LIST_CONFIG = 'config/server_list.txt' # the configuration file of the server list\ndef pool_evaluate_densenet(model_list):\n    # generat the arguments which will passed to client pool\n    arr_args = []\n    for m in model_list:        \n        singe_args = {'model': m}\n        arr_args.append({\n            'path': DEFAULT_RUN_CODE_PATH,\n            'entry': \"evaluate_densenet\",\n            'work_directory': DEFAULT_RUN_CODE_WORK_DIRECTORY,\n            'args': singe_args,\n            'use_cuda': True # whether to use GPU or not\n        })\n    # init client pool\n    server_list = GPUClientPool.load_server_list_from_file(SERVER_LIST_CONFIG)\n    pool = GPUClientPool(server_list)\n    # perform evaluation\n    eval_result = pool.run_code_batch(arr_args)\n    return eval_result\n# main entrance\nif __name__ == '__main__':\n    model_list =[] # dumb model list which needs to be replaced by real models\n    pool_evaluate_densenet(model_list)\n```\n\n### start the server \n\n* After installation of this package, `cudam_server.py` should be automatically copied to the bin path; if not, please manually copy this file to the root folder of the project. The server can be started by running the following command:  \n\n```bash\nnohup python cudam_server.py -s 1 -i cuda1 -p 8000 -g 0 >& log/nohup_cuda_1_8000_0.log &\n```\n\n### run the client side python code to evaluate a batch of models\n\n## task manager\n\n### task template\n\n```bash\n#!/usr/bin/env bash\n\nwhile getopts g: option;do\n    case \"${option}\" in\n    g) GPU_ID=${OPTARG};;\n    esac\ndone\n\nprint_help(){\n    printf \"Parameter g(GPU ID) is mandatory\\n\"\n    printf \"g values - GPU ID\"\n    exit 1\n}\n\nif [ -z \"${GPU_ID}\" ];then\n    print_help\nfi\n\necho \"start task on GPU: $GPU_ID\"\n\n# the root directory of your python script\ncd ~/code/psocnn/\n# the main python script accepting the gpu ID in -g argument\npython3 main.py -g ${GPU_ID}\n```\n\n### task folder structure\n\n![task folder structure](https://github.com/wwwbbb8510/cudam/blob/master/sh_task_structure.PNG \"Task folder structure\")\n\n### task manager \n\n```bash\n# start task manager\nnohup cudam_task_manager.py -n 2 -s 2 -i 60 -f 300 &\n# snap gpu\ncudam_snap_gpu.py -s 2 -l 60 -g 1\n```\n\n### install cumdam for a specific user and can not add the local path into executable PATH\n\n* Switch to the root folder of your project\n\n* Install cudam package\n```bash\npip install --user cudam\n``` \n\n* Create a soft link of the executable file\n```bash\nln -s /home/{YOURUSER}/.local/bin/cudam_task_manager.py cudam_task_manager.py\nln -s /home/{YOURUSER}/.local/bin/cudam_snap_gpu.py cudam_snap_gpu.py\n```\n\n* Run the task manager\n```bash\n# run interactively\npython cudam_task_manager.py -n 2 -s 2 -i 60 -f 300\n# run in background\nnohup python cudam_task_manager.py -n 2 -s 2 -i 60 -f 300 &\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wwwbbb8510/cudam.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cudam", "package_url": "https://pypi.org/project/cudam/", "platform": "", "project_url": "https://pypi.org/project/cudam/", "project_urls": {"Homepage": "https://github.com/wwwbbb8510/cudam.git"}, "release_url": "https://pypi.org/project/cudam/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "Cuda Mangement - multi-process, scheduled jobs, distributed processing", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cudam</h1>\n<p>Cuda Mangement - multi-process, scheduled jobs, distributed processing</p>\n<h2>command to check all cuda server status</h2>\n<pre>date &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s1\">'cuda1'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> ssh cuda1 <span class=\"s1\">'nvidia-smi'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s1\">'cuda2'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> ssh cuda2 <span class=\"s1\">'nvidia-smi'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s1\">'cuda3'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> ssh cuda3 <span class=\"s1\">'nvidia-smi'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s1\">'cuda4'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> ssh cuda4 <span class=\"s1\">'nvidia-smi'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s1\">'cuda5'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> ssh cuda5 <span class=\"s1\">'nvidia-smi'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s1\">'cuda6'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> ssh cuda6 <span class=\"s1\">'nvidia-smi'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">echo</span> <span class=\"s1\">'cuda11'</span> &gt;&gt; cuda_status.txt <span class=\"o\">&amp;&amp;</span> ssh cuda11 <span class=\"s1\">'nvidia-smi'</span> &gt;&gt; cuda_status.txt\n</pre>\n<h2>server-client mode to utilize multi-GPUs across Multi-Machines</h2>\n<h3>server side - develop the code that runs on a single GPU</h3>\n<pre><span class=\"c1\"># here is a dumb function to evaluate densenet</span>\n<span class=\"c1\"># it should be replaced by the actual code of evaluation</span>\n<span class=\"k\">def</span> <span class=\"nf\">evaluate_densenet</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">):</span>\n    <span class=\"n\">acc</span> <span class=\"o\">=</span> <span class=\"mf\">0.99</span>\n    <span class=\"k\">return</span> <span class=\"n\">acc</span>\n</pre>\n<h3>client size - develop the code to send the models to server for evaluation</h3>\n<ul>\n<li>Add available GPU servers in the server list configuration file</li>\n</ul>\n<pre># configuration of server list\ncuda4,8000\ncuda4,8001\ncuda5,8000\ncuda5,8001\ncuda5,8002\n</pre>\n<ul>\n<li>The client code that concurrently evaluates models</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cudam.cudam_socket.client</span> <span class=\"kn\">import</span> <span class=\"n\">GPUClientPool</span>\n<span class=\"n\">DEFAULT_RUN_CODE_WORK_DIRECTORY</span> <span class=\"o\">=</span> <span class=\"s2\">\"/home/www/server\"</span> <span class=\"c1\"># the folder where the server side code resides </span>\n<span class=\"n\">DEFAULT_RUN_CODE_PATH</span> <span class=\"o\">=</span> <span class=\"s2\">\"server_file\"</span> <span class=\"c1\"># the file name of the server side code</span>\n<span class=\"n\">SERVER_LIST_CONFIG</span> <span class=\"o\">=</span> <span class=\"s1\">'config/server_list.txt'</span> <span class=\"c1\"># the configuration file of the server list</span>\n<span class=\"k\">def</span> <span class=\"nf\">pool_evaluate_densenet</span><span class=\"p\">(</span><span class=\"n\">model_list</span><span class=\"p\">):</span>\n    <span class=\"c1\"># generat the arguments which will passed to client pool</span>\n    <span class=\"n\">arr_args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">model_list</span><span class=\"p\">:</span>        \n        <span class=\"n\">singe_args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'model'</span><span class=\"p\">:</span> <span class=\"n\">m</span><span class=\"p\">}</span>\n        <span class=\"n\">arr_args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span>\n            <span class=\"s1\">'path'</span><span class=\"p\">:</span> <span class=\"n\">DEFAULT_RUN_CODE_PATH</span><span class=\"p\">,</span>\n            <span class=\"s1\">'entry'</span><span class=\"p\">:</span> <span class=\"s2\">\"evaluate_densenet\"</span><span class=\"p\">,</span>\n            <span class=\"s1\">'work_directory'</span><span class=\"p\">:</span> <span class=\"n\">DEFAULT_RUN_CODE_WORK_DIRECTORY</span><span class=\"p\">,</span>\n            <span class=\"s1\">'args'</span><span class=\"p\">:</span> <span class=\"n\">singe_args</span><span class=\"p\">,</span>\n            <span class=\"s1\">'use_cuda'</span><span class=\"p\">:</span> <span class=\"kc\">True</span> <span class=\"c1\"># whether to use GPU or not</span>\n        <span class=\"p\">})</span>\n    <span class=\"c1\"># init client pool</span>\n    <span class=\"n\">server_list</span> <span class=\"o\">=</span> <span class=\"n\">GPUClientPool</span><span class=\"o\">.</span><span class=\"n\">load_server_list_from_file</span><span class=\"p\">(</span><span class=\"n\">SERVER_LIST_CONFIG</span><span class=\"p\">)</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">GPUClientPool</span><span class=\"p\">(</span><span class=\"n\">server_list</span><span class=\"p\">)</span>\n    <span class=\"c1\"># perform evaluation</span>\n    <span class=\"n\">eval_result</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">run_code_batch</span><span class=\"p\">(</span><span class=\"n\">arr_args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">eval_result</span>\n<span class=\"c1\"># main entrance</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">model_list</span> <span class=\"o\">=</span><span class=\"p\">[]</span> <span class=\"c1\"># dumb model list which needs to be replaced by real models</span>\n    <span class=\"n\">pool_evaluate_densenet</span><span class=\"p\">(</span><span class=\"n\">model_list</span><span class=\"p\">)</span>\n</pre>\n<h3>start the server</h3>\n<ul>\n<li>After installation of this package, <code>cudam_server.py</code> should be automatically copied to the bin path; if not, please manually copy this file to the root folder of the project. The server can be started by running the following command:</li>\n</ul>\n<pre>nohup python cudam_server.py -s <span class=\"m\">1</span> -i cuda1 -p <span class=\"m\">8000</span> -g <span class=\"m\">0</span> &gt;<span class=\"p\">&amp;</span> log/nohup_cuda_1_8000_0.log <span class=\"p\">&amp;</span>\n</pre>\n<h3>run the client side python code to evaluate a batch of models</h3>\n<h2>task manager</h2>\n<h3>task template</h3>\n<pre><span class=\"ch\">#!/usr/bin/env bash</span>\n\n<span class=\"k\">while</span> <span class=\"nb\">getopts</span> g: option<span class=\"p\">;</span><span class=\"k\">do</span>\n    <span class=\"k\">case</span> <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">option</span><span class=\"si\">}</span><span class=\"s2\">\"</span> in\n    g<span class=\"o\">)</span> <span class=\"nv\">GPU_ID</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">OPTARG</span><span class=\"si\">}</span><span class=\"p\">;;</span>\n    <span class=\"k\">esac</span>\n<span class=\"k\">done</span>\n\nprint_help<span class=\"o\">(){</span>\n    <span class=\"nb\">printf</span> <span class=\"s2\">\"Parameter g(GPU ID) is mandatory\\n\"</span>\n    <span class=\"nb\">printf</span> <span class=\"s2\">\"g values - GPU ID\"</span>\n    <span class=\"nb\">exit</span> <span class=\"m\">1</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">if</span> <span class=\"o\">[</span> -z <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">GPU_ID</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"o\">]</span><span class=\"p\">;</span><span class=\"k\">then</span>\n    print_help\n<span class=\"k\">fi</span>\n\n<span class=\"nb\">echo</span> <span class=\"s2\">\"start task on GPU: </span><span class=\"nv\">$GPU_ID</span><span class=\"s2\">\"</span>\n\n<span class=\"c1\"># the root directory of your python script</span>\n<span class=\"nb\">cd</span> ~/code/psocnn/\n<span class=\"c1\"># the main python script accepting the gpu ID in -g argument</span>\npython3 main.py -g <span class=\"si\">${</span><span class=\"nv\">GPU_ID</span><span class=\"si\">}</span>\n</pre>\n<h3>task folder structure</h3>\n<p><img alt=\"task folder structure\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d25aec717805e1f8014269ba11e4b7608e15167d/68747470733a2f2f6769746875622e636f6d2f777777626262383531302f637564616d2f626c6f622f6d61737465722f73685f7461736b5f7374727563747572652e504e47\"></p>\n<h3>task manager</h3>\n<pre><span class=\"c1\"># start task manager</span>\nnohup cudam_task_manager.py -n <span class=\"m\">2</span> -s <span class=\"m\">2</span> -i <span class=\"m\">60</span> -f <span class=\"m\">300</span> <span class=\"p\">&amp;</span>\n<span class=\"c1\"># snap gpu</span>\ncudam_snap_gpu.py -s <span class=\"m\">2</span> -l <span class=\"m\">60</span> -g <span class=\"m\">1</span>\n</pre>\n<h3>install cumdam for a specific user and can not add the local path into executable PATH</h3>\n<ul>\n<li>\n<p>Switch to the root folder of your project</p>\n</li>\n<li>\n<p>Install cudam package</p>\n</li>\n</ul>\n<pre>pip install --user cudam\n</pre>\n<ul>\n<li>Create a soft link of the executable file</li>\n</ul>\n<pre>ln -s /home/<span class=\"o\">{</span>YOURUSER<span class=\"o\">}</span>/.local/bin/cudam_task_manager.py cudam_task_manager.py\nln -s /home/<span class=\"o\">{</span>YOURUSER<span class=\"o\">}</span>/.local/bin/cudam_snap_gpu.py cudam_snap_gpu.py\n</pre>\n<ul>\n<li>Run the task manager</li>\n</ul>\n<pre><span class=\"c1\"># run interactively</span>\npython cudam_task_manager.py -n <span class=\"m\">2</span> -s <span class=\"m\">2</span> -i <span class=\"m\">60</span> -f <span class=\"m\">300</span>\n<span class=\"c1\"># run in background</span>\nnohup python cudam_task_manager.py -n <span class=\"m\">2</span> -s <span class=\"m\">2</span> -i <span class=\"m\">60</span> -f <span class=\"m\">300</span> <span class=\"p\">&amp;</span>\n</pre>\n\n          </div>"}, "last_serial": 4812915, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "2dc4d8ffb2794287c4a445f1827e75da", "sha256": "d2e0a0060d8a9e2ede6adab64250e3aa43285deda2855cb3a28f4c4e72434a96"}, "downloads": -1, "filename": "cudam-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2dc4d8ffb2794287c4a445f1827e75da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16440, "upload_time": "2018-08-13T02:51:28", "upload_time_iso_8601": "2018-08-13T02:51:28.395175Z", "url": "https://files.pythonhosted.org/packages/a1/55/cf75c2386ce5b2026e50a0ea260bffd066c83d38a70c781b775a1d5b5856/cudam-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a51dfab5159291c5becbe40a9bfde846", "sha256": "85b9d65b5418816c1c82d688650ec0fa11ac46322b17a8357a9929b67bf352a5"}, "downloads": -1, "filename": "cudam-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a51dfab5159291c5becbe40a9bfde846", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7334, "upload_time": "2018-08-13T02:51:29", "upload_time_iso_8601": "2018-08-13T02:51:29.816962Z", "url": "https://files.pythonhosted.org/packages/b2/62/dbb10014590217bf327bf9e0a26e50e5e46682d60428f1a0f2ed0fe62b29/cudam-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e02344dccb3a4f85c19f9f3c08e950d3", "sha256": "d50680be5e3d3926e6339db707fabc1a6d5397e48f2256403b0ce5002d0245c8"}, "downloads": -1, "filename": "cudam-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e02344dccb3a4f85c19f9f3c08e950d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16697, "upload_time": "2018-08-13T03:44:36", "upload_time_iso_8601": "2018-08-13T03:44:36.611116Z", "url": "https://files.pythonhosted.org/packages/ce/ea/cc7eb569908683330d5d636b4bc7010c7a9281b8aa235c3e758f15d403cd/cudam-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a47f88d1d8c98a4c51eb32c5ba20fcc8", "sha256": "d7f1ec3f74b98860b7c34e4eb76a5e4270a6cb33e029ef5da7f15fe7d042a0d6"}, "downloads": -1, "filename": "cudam-0.0.4.tar.gz", "has_sig": false, "md5_digest": "a47f88d1d8c98a4c51eb32c5ba20fcc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7543, "upload_time": "2018-08-13T03:44:37", "upload_time_iso_8601": "2018-08-13T03:44:37.937293Z", "url": "https://files.pythonhosted.org/packages/bb/73/3f6af1e4062fcc4e716609c964b96bc03037380179d94107ac59eb385434/cudam-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "d2260302eb674e427853dd583050130d", "sha256": "4e6f9b871e64bdcb1b9f1f44f507a9d27fd49be894a4d1fdbdab3dc639c0d94f"}, "downloads": -1, "filename": "cudam-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d2260302eb674e427853dd583050130d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53774, "upload_time": "2019-02-12T21:23:21", "upload_time_iso_8601": "2019-02-12T21:23:21.729982Z", "url": "https://files.pythonhosted.org/packages/ac/56/f9eb6e106b5edc55707fcd095273199f9725eab7ae62e0c722fa87becb6c/cudam-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67fa8f181ff3162c934d9d3cd68bab15", "sha256": "c6ae788a566ed49456640dbef6a2545660d47b125bd6da1cce57e8ce1d5297a1"}, "downloads": -1, "filename": "cudam-0.0.5.tar.gz", "has_sig": false, "md5_digest": "67fa8f181ff3162c934d9d3cd68bab15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27161, "upload_time": "2019-02-12T21:23:23", "upload_time_iso_8601": "2019-02-12T21:23:23.318545Z", "url": "https://files.pythonhosted.org/packages/f6/2b/93b7e5f91f8bbfca8d1cde224240f75da3ec3c85b5aa658cb0187c76e204/cudam-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "cfa6915ec31e997f874b4e7e6e5ba1dd", "sha256": "1358914da93359e1c01727855d18ad68e438713a8f7ffd40ef64d16149949961"}, "downloads": -1, "filename": "cudam-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cfa6915ec31e997f874b4e7e6e5ba1dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53768, "upload_time": "2019-02-12T21:29:33", "upload_time_iso_8601": "2019-02-12T21:29:33.779593Z", "url": "https://files.pythonhosted.org/packages/78/34/e13d6e69ef1a1fab8f5c4344e01cde055c09e5ee8af511fbbc240d8d8711/cudam-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a7ee4388b7d9b4734bf54db9a1ceaf7", "sha256": "e87b137d1cf70e817a9781f1ca194865bfe6e37bee4323e6d93f883d7bbfda07"}, "downloads": -1, "filename": "cudam-0.0.6.tar.gz", "has_sig": false, "md5_digest": "2a7ee4388b7d9b4734bf54db9a1ceaf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27156, "upload_time": "2019-02-12T21:29:35", "upload_time_iso_8601": "2019-02-12T21:29:35.163419Z", "url": "https://files.pythonhosted.org/packages/ce/cb/e3c028d59eeab9853ba73fb12c35b10e114917b5bdb57b1c6209546b39d2/cudam-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cfa6915ec31e997f874b4e7e6e5ba1dd", "sha256": "1358914da93359e1c01727855d18ad68e438713a8f7ffd40ef64d16149949961"}, "downloads": -1, "filename": "cudam-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cfa6915ec31e997f874b4e7e6e5ba1dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 53768, "upload_time": "2019-02-12T21:29:33", "upload_time_iso_8601": "2019-02-12T21:29:33.779593Z", "url": "https://files.pythonhosted.org/packages/78/34/e13d6e69ef1a1fab8f5c4344e01cde055c09e5ee8af511fbbc240d8d8711/cudam-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a7ee4388b7d9b4734bf54db9a1ceaf7", "sha256": "e87b137d1cf70e817a9781f1ca194865bfe6e37bee4323e6d93f883d7bbfda07"}, "downloads": -1, "filename": "cudam-0.0.6.tar.gz", "has_sig": false, "md5_digest": "2a7ee4388b7d9b4734bf54db9a1ceaf7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27156, "upload_time": "2019-02-12T21:29:35", "upload_time_iso_8601": "2019-02-12T21:29:35.163419Z", "url": "https://files.pythonhosted.org/packages/ce/cb/e3c028d59eeab9853ba73fb12c35b10e114917b5bdb57b1c6209546b39d2/cudam-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:26 2020"}