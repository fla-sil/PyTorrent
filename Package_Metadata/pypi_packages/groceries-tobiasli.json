{"info": {"author": "Tobias Litherland", "author_email": "tobiaslland@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# groceries\n[![Build Status](https://travis-ci.org/tobiasli/groceries.svg?branch=master)](https://travis-ci.org/tobiasli/groceries)<br/>\n[![Coverage Status](https://coveralls.io/repos/github/tobiasli/groceries/badge.svg?branch=master)](https://coveralls.io/github/tobiasli/groceries?branch=master)<br/>\n[![PyPI version](https://badge.fury.io/py/groceries-tobiasli.svg)](https://badge.fury.io/py/groceries-tobiasli)<br/>\n\n`groceries` Tools for parsing human readable shopping lists and recipe ingredients.\n\n## Install\n\n```\npip install groceries-tobiasli\n```\n\n## Usage\n\n`groceries` contains a set of classes that solve a lot of shopping and food-related problems:\n\n* `Ingredient` is a container for a food item, and parses amount, unit and item name from an arbitrary string. The base structure for an `Ingredient` string is `Optional[amount] Optional[unit] grocery_name, Optional[comment]`.\n* `GroceryList` is a container for `Ingredients` and handles summation of all ingredients, as well as algebra.\n* `Cookbook` is a container for `Recipe`, and make them searchable.\n* `Menu` is the class returned when you use a `Cookbook` to parse an actual, typed shopping list. It contains the recipes and ingredients that are parsed from the shopping list.\n\n### Ingredient\n`Ingredient` is a class that takes any arbitrary string describing an \namount of an grocery item. The amount and unit is generalized and with \nthe formatting in `groceries` the unit can be represented in \n\n```python\nfrom groceries import Ingredient\n\nprint(repr(Ingredient('10 2/3 tbs soy sauce')))\n# <Ingredient object: 1.60 dl soy sauce: <Unit: volume: [liter, litre, liters, ...]>>\n```\nTo simply get the most reasonable representation of the `Ingredient`, \nsimply convert it to a string:\n```python\nprint(Ingredient('302.3949133 grams baked beans'))\n# 1 lbs baked beans\n```\n\n\n\n### GroceryList\n`GroceryList` is the base component for most of the functionality in `groceries`. A `GroceryList` accepts groceries\nas strings on a human readable format. They are added to a `GroceryList` as `Ingredient` instances.\n\n```python\nfrom groceries import GroceryList\n\ngl = GroceryList()\n\ngl.add_ingredients([\n    '2 pounds sugar',\n    '2 kg sugar',\n    'chocolate',\n    '1/4 floz foo',\n    '1 2/9 tbs foo'\n])\n\nprint(gl)\n\n# <GroceryList object: 3 ingredients\n#                chocolate,\n#        0.26 dl foo,\n#      2907.18 g sugar\n# >\n```\n`GroceryList` instances can be added, subtracted with other `GroceryLists`. They can also be multiplied with skalars.\n```\ngl = gl - GroceryList(ingredients=['953.5 g sugar', 'chocolate']) * 2\nprint(gl)\n\n# <GroceryList object: 2 ingredients\n#        0.26 dl foo,\n#        1.00 kg sugar\n# >\n```\n\n### Recipe and Cookbooks\n\nThe `GroceryList` class is used to represent ingredients in recipes. `Recipe` is a class that contains information\non how to cook a specific meal. You can have multiple `Recipes` and add them to a `Cookbook`.\n\nThe recipes are searchable both on name and tags. \n\n```python\n# Demo scripts for grocery readme.\nfrom groceries import Recipe, Cookbook\n\n\nrecipe1 = Recipe(\n    name='Carbonara',\n    tags=['pasta', 'fast', 'egg', 'bacon'],\n    time=20,\n    serves=2,\n    how_to='''Cook pasta. As pasta is preparing, fry bacon. \n    When bacon is done, add frozen pees and continue frying until pees are cooked.\n    Mix finished pasta with bacon and pees. Add eggs and grated parmesan and stir.\n    Season with salt and pepper.''',\n    ingredients=[\n        '150 g spaghetti',\n        '100 g bacon',\n        '100 g frozen green pees',\n        '2 eggs',\n        '50 g parmesan',\n        'salt',\n        'pepper'\n    ])\n\nrecipe2 = Recipe(name=\"Mac'n cheese\", tags=['pasta', 'fast'], time=5, serves=2,\n                 how_to='''Cook mac. Add cheese. serve.''', ingredients=['150 g maccaroni', '100 g cheese', ])\n\nrecipe3 = Recipe(name='Chocolate', tags=['sweet', 'dessert'], time=2, serves=2, how_to='''Eat chocolate.''',\n                 ingredients=['200 g chocolate'])\n\ncookbook = Cookbook(recipes=[recipe1, recipe2, recipe3])\n\n# Accepts fuzzy string matching:\n\nprint(cookbook.find_recipe('mac cheese'))\n\n# <Recipe object: Mac'n cheese>\n\n# Mac'n cheese is the first match for pasta, but searches are cycling. \n# So when performing a category match again you won't be presented \n# with the same recipe again:\n\nprint(cookbook.find_recipe('pasta'))\n\n# <Recipe object: Carbonara>\n```\n\n### Menu\n`Menu` is a class for parsing an entire weeks worth of shopping,\nwith syntax for meals on specific days as well as regular groceries.\n\n```python\n# Continuation from previous code block.\nmenu = cookbook.parse_menu('''Monday: mac cheese\n    Tuesday: sweet\n    Wednesday: pasta\n    2 tbs coffee\n    1 floz baked beans\n    1 banana\n    2 banana\n    4 liters coffee''')\n\nprint(menu.generate_processed_menu_str())\n# Monday: Mac'n cheese til 2\n# Tuesday: Chocolate til 2\n# Wednesday: Carbonara til 2\n# 0.30 dl coffee\n# 0.30 dl baked beans\n# 1 banana\n# 2 banana\n# 4 l coffee\n\nprint(menu.groceries)\n# <GroceryList object: 13 ingredients\n#          100 g bacon,\n#        0.30 dl baked beans,\n#              3 banana,\n#          100 g cheese,\n#          200 g chocolate,\n#         4.03 l coffee,\n#              2 eggs,\n#          100 g frozen green pees,\n#          150 g maccaroni,\n#           50 g parmesan,\n#                pepper,\n#                salt,\n#          150 g spaghetti\n# >\n```\n\n### Changing configs\n`groceries` has built in functionality to change whatever configuration\ndefines the units, ingredient rules and formatting.\n\nTo change a particular config, either\n* modify an existing config at runtime,\n* use one of the other supplied configs, or\n* create your own from one of the `groceries.configs.config_types`.\n\nTo finally set a specific config, use `configs.set_config()`.\n\n```python\nfrom groceries import config, language\n\nprint(config.language.language_name)\n# 'English'\nconfig.set_config(language.norwegian.language)\n\nprint(config.language.language_name)\n# 'Norwegian'\n```\nA special condition applies if you are changing unit configs.\n\n### Changing unit config\n\nFor Units, specifically, we need to reload the unit definition if the\nconfig relating to unit handling is changed. This is done via\n`units.reload_units()`\n\n```python\nfrom groceries import config, configs, units, Ingredient\n\nprint(Ingredient('2 lbs butter'))\n# 2 lb butter\n```\nBut we want to force a different config for units. We want to use a \npurely metric unit definition that will always format `Ingredient`s as \nmetric. \n\nTo do that we have to find the unit definition that we want, and set\nthat config. Since we are changing the units, we also have to reload \nthe units.\n```python\nconfig.set_config(configs.unit_definition.metric.unit_definition)\nunits.units.reload_units()\n```\nThe new formatting will yield metric, as inches is removed from the\nformatting definition.\n```python\nprint(Ingredient('2 lb butter'))\n# 907.18 g butter\n```\n\nSo, happy shopping!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tobiasli/groceries", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "groceries-tobiasli", "package_url": "https://pypi.org/project/groceries-tobiasli/", "platform": "", "project_url": "https://pypi.org/project/groceries-tobiasli/", "project_urls": {"Homepage": "https://github.com/tobiasli/groceries"}, "release_url": "https://pypi.org/project/groceries-tobiasli/1.1.7/", "requires_dist": null, "requires_python": "", "summary": "Module for parsing shopping lists and dinner menus and compiling shopping lists.", "version": "1.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>groceries</h1>\n<p><a href=\"https://travis-ci.org/tobiasli/groceries\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9bcf1dee66ed53cd82f23837ace0b94691fa7421/68747470733a2f2f7472617669732d63692e6f72672f746f626961736c692f67726f6365726965732e7376673f6272616e63683d6d6173746572\"></a><br>\n<a href=\"https://coveralls.io/github/tobiasli/groceries?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b59eb996c6af001560a80314272825f9fd2f801a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f746f626961736c692f67726f6365726965732f62616467652e7376673f6272616e63683d6d6173746572\"></a><br>\n<a href=\"https://badge.fury.io/py/groceries-tobiasli\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55226491b2bfa1be369df30ec992a07a5d683e08/68747470733a2f2f62616467652e667572792e696f2f70792f67726f6365726965732d746f626961736c692e737667\"></a><br></p>\n<p><code>groceries</code> Tools for parsing human readable shopping lists and recipe ingredients.</p>\n<h2>Install</h2>\n<pre><code>pip install groceries-tobiasli\n</code></pre>\n<h2>Usage</h2>\n<p><code>groceries</code> contains a set of classes that solve a lot of shopping and food-related problems:</p>\n<ul>\n<li><code>Ingredient</code> is a container for a food item, and parses amount, unit and item name from an arbitrary string. The base structure for an <code>Ingredient</code> string is <code>Optional[amount] Optional[unit] grocery_name, Optional[comment]</code>.</li>\n<li><code>GroceryList</code> is a container for <code>Ingredients</code> and handles summation of all ingredients, as well as algebra.</li>\n<li><code>Cookbook</code> is a container for <code>Recipe</code>, and make them searchable.</li>\n<li><code>Menu</code> is the class returned when you use a <code>Cookbook</code> to parse an actual, typed shopping list. It contains the recipes and ingredients that are parsed from the shopping list.</li>\n</ul>\n<h3>Ingredient</h3>\n<p><code>Ingredient</code> is a class that takes any arbitrary string describing an\namount of an grocery item. The amount and unit is generalized and with\nthe formatting in <code>groceries</code> the unit can be represented in</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">groceries</span> <span class=\"kn\">import</span> <span class=\"n\">Ingredient</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">Ingredient</span><span class=\"p\">(</span><span class=\"s1\">'10 2/3 tbs soy sauce'</span><span class=\"p\">)))</span>\n<span class=\"c1\"># &lt;Ingredient object: 1.60 dl soy sauce: &lt;Unit: volume: [liter, litre, liters, ...]&gt;&gt;</span>\n</pre>\n<p>To simply get the most reasonable representation of the <code>Ingredient</code>,\nsimply convert it to a string:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Ingredient</span><span class=\"p\">(</span><span class=\"s1\">'302.3949133 grams baked beans'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 1 lbs baked beans</span>\n</pre>\n<h3>GroceryList</h3>\n<p><code>GroceryList</code> is the base component for most of the functionality in <code>groceries</code>. A <code>GroceryList</code> accepts groceries\nas strings on a human readable format. They are added to a <code>GroceryList</code> as <code>Ingredient</code> instances.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">groceries</span> <span class=\"kn\">import</span> <span class=\"n\">GroceryList</span>\n\n<span class=\"n\">gl</span> <span class=\"o\">=</span> <span class=\"n\">GroceryList</span><span class=\"p\">()</span>\n\n<span class=\"n\">gl</span><span class=\"o\">.</span><span class=\"n\">add_ingredients</span><span class=\"p\">([</span>\n    <span class=\"s1\">'2 pounds sugar'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'2 kg sugar'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'chocolate'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'1/4 floz foo'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'1 2/9 tbs foo'</span>\n<span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gl</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># &lt;GroceryList object: 3 ingredients</span>\n<span class=\"c1\">#                chocolate,</span>\n<span class=\"c1\">#        0.26 dl foo,</span>\n<span class=\"c1\">#      2907.18 g sugar</span>\n<span class=\"c1\"># &gt;</span>\n</pre>\n<p><code>GroceryList</code> instances can be added, subtracted with other <code>GroceryLists</code>. They can also be multiplied with skalars.</p>\n<pre><code>gl = gl - GroceryList(ingredients=['953.5 g sugar', 'chocolate']) * 2\nprint(gl)\n\n# &lt;GroceryList object: 2 ingredients\n#        0.26 dl foo,\n#        1.00 kg sugar\n# &gt;\n</code></pre>\n<h3>Recipe and Cookbooks</h3>\n<p>The <code>GroceryList</code> class is used to represent ingredients in recipes. <code>Recipe</code> is a class that contains information\non how to cook a specific meal. You can have multiple <code>Recipes</code> and add them to a <code>Cookbook</code>.</p>\n<p>The recipes are searchable both on name and tags.</p>\n<pre><span class=\"c1\"># Demo scripts for grocery readme.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">groceries</span> <span class=\"kn\">import</span> <span class=\"n\">Recipe</span><span class=\"p\">,</span> <span class=\"n\">Cookbook</span>\n\n\n<span class=\"n\">recipe1</span> <span class=\"o\">=</span> <span class=\"n\">Recipe</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Carbonara'</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'pasta'</span><span class=\"p\">,</span> <span class=\"s1\">'fast'</span><span class=\"p\">,</span> <span class=\"s1\">'egg'</span><span class=\"p\">,</span> <span class=\"s1\">'bacon'</span><span class=\"p\">],</span>\n    <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"n\">serves</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">how_to</span><span class=\"o\">=</span><span class=\"s1\">'''Cook pasta. As pasta is preparing, fry bacon. </span>\n<span class=\"s1\">    When bacon is done, add frozen pees and continue frying until pees are cooked.</span>\n<span class=\"s1\">    Mix finished pasta with bacon and pees. Add eggs and grated parmesan and stir.</span>\n<span class=\"s1\">    Season with salt and pepper.'''</span><span class=\"p\">,</span>\n    <span class=\"n\">ingredients</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'150 g spaghetti'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'100 g bacon'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'100 g frozen green pees'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'2 eggs'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'50 g parmesan'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'salt'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'pepper'</span>\n    <span class=\"p\">])</span>\n\n<span class=\"n\">recipe2</span> <span class=\"o\">=</span> <span class=\"n\">Recipe</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Mac'n cheese\"</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'pasta'</span><span class=\"p\">,</span> <span class=\"s1\">'fast'</span><span class=\"p\">],</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">serves</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                 <span class=\"n\">how_to</span><span class=\"o\">=</span><span class=\"s1\">'''Cook mac. Add cheese. serve.'''</span><span class=\"p\">,</span> <span class=\"n\">ingredients</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'150 g maccaroni'</span><span class=\"p\">,</span> <span class=\"s1\">'100 g cheese'</span><span class=\"p\">,</span> <span class=\"p\">])</span>\n\n<span class=\"n\">recipe3</span> <span class=\"o\">=</span> <span class=\"n\">Recipe</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Chocolate'</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'sweet'</span><span class=\"p\">,</span> <span class=\"s1\">'dessert'</span><span class=\"p\">],</span> <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">serves</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">how_to</span><span class=\"o\">=</span><span class=\"s1\">'''Eat chocolate.'''</span><span class=\"p\">,</span>\n                 <span class=\"n\">ingredients</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'200 g chocolate'</span><span class=\"p\">])</span>\n\n<span class=\"n\">cookbook</span> <span class=\"o\">=</span> <span class=\"n\">Cookbook</span><span class=\"p\">(</span><span class=\"n\">recipes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">recipe1</span><span class=\"p\">,</span> <span class=\"n\">recipe2</span><span class=\"p\">,</span> <span class=\"n\">recipe3</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Accepts fuzzy string matching:</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cookbook</span><span class=\"o\">.</span><span class=\"n\">find_recipe</span><span class=\"p\">(</span><span class=\"s1\">'mac cheese'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># &lt;Recipe object: Mac'n cheese&gt;</span>\n\n<span class=\"c1\"># Mac'n cheese is the first match for pasta, but searches are cycling. </span>\n<span class=\"c1\"># So when performing a category match again you won't be presented </span>\n<span class=\"c1\"># with the same recipe again:</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cookbook</span><span class=\"o\">.</span><span class=\"n\">find_recipe</span><span class=\"p\">(</span><span class=\"s1\">'pasta'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># &lt;Recipe object: Carbonara&gt;</span>\n</pre>\n<h3>Menu</h3>\n<p><code>Menu</code> is a class for parsing an entire weeks worth of shopping,\nwith syntax for meals on specific days as well as regular groceries.</p>\n<pre><span class=\"c1\"># Continuation from previous code block.</span>\n<span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"n\">cookbook</span><span class=\"o\">.</span><span class=\"n\">parse_menu</span><span class=\"p\">(</span><span class=\"s1\">'''Monday: mac cheese</span>\n<span class=\"s1\">    Tuesday: sweet</span>\n<span class=\"s1\">    Wednesday: pasta</span>\n<span class=\"s1\">    2 tbs coffee</span>\n<span class=\"s1\">    1 floz baked beans</span>\n<span class=\"s1\">    1 banana</span>\n<span class=\"s1\">    2 banana</span>\n<span class=\"s1\">    4 liters coffee'''</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">generate_processed_menu_str</span><span class=\"p\">())</span>\n<span class=\"c1\"># Monday: Mac'n cheese til 2</span>\n<span class=\"c1\"># Tuesday: Chocolate til 2</span>\n<span class=\"c1\"># Wednesday: Carbonara til 2</span>\n<span class=\"c1\"># 0.30 dl coffee</span>\n<span class=\"c1\"># 0.30 dl baked beans</span>\n<span class=\"c1\"># 1 banana</span>\n<span class=\"c1\"># 2 banana</span>\n<span class=\"c1\"># 4 l coffee</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"o\">.</span><span class=\"n\">groceries</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;GroceryList object: 13 ingredients</span>\n<span class=\"c1\">#          100 g bacon,</span>\n<span class=\"c1\">#        0.30 dl baked beans,</span>\n<span class=\"c1\">#              3 banana,</span>\n<span class=\"c1\">#          100 g cheese,</span>\n<span class=\"c1\">#          200 g chocolate,</span>\n<span class=\"c1\">#         4.03 l coffee,</span>\n<span class=\"c1\">#              2 eggs,</span>\n<span class=\"c1\">#          100 g frozen green pees,</span>\n<span class=\"c1\">#          150 g maccaroni,</span>\n<span class=\"c1\">#           50 g parmesan,</span>\n<span class=\"c1\">#                pepper,</span>\n<span class=\"c1\">#                salt,</span>\n<span class=\"c1\">#          150 g spaghetti</span>\n<span class=\"c1\"># &gt;</span>\n</pre>\n<h3>Changing configs</h3>\n<p><code>groceries</code> has built in functionality to change whatever configuration\ndefines the units, ingredient rules and formatting.</p>\n<p>To change a particular config, either</p>\n<ul>\n<li>modify an existing config at runtime,</li>\n<li>use one of the other supplied configs, or</li>\n<li>create your own from one of the <code>groceries.configs.config_types</code>.</li>\n</ul>\n<p>To finally set a specific config, use <code>configs.set_config()</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">groceries</span> <span class=\"kn\">import</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">language</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language_name</span><span class=\"p\">)</span>\n<span class=\"c1\"># 'English'</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_config</span><span class=\"p\">(</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">norwegian</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"o\">.</span><span class=\"n\">language_name</span><span class=\"p\">)</span>\n<span class=\"c1\"># 'Norwegian'</span>\n</pre>\n<p>A special condition applies if you are changing unit configs.</p>\n<h3>Changing unit config</h3>\n<p>For Units, specifically, we need to reload the unit definition if the\nconfig relating to unit handling is changed. This is done via\n<code>units.reload_units()</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">groceries</span> <span class=\"kn\">import</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">configs</span><span class=\"p\">,</span> <span class=\"n\">units</span><span class=\"p\">,</span> <span class=\"n\">Ingredient</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Ingredient</span><span class=\"p\">(</span><span class=\"s1\">'2 lbs butter'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 2 lb butter</span>\n</pre>\n<p>But we want to force a different config for units. We want to use a\npurely metric unit definition that will always format <code>Ingredient</code>s as\nmetric.</p>\n<p>To do that we have to find the unit definition that we want, and set\nthat config. Since we are changing the units, we also have to reload\nthe units.</p>\n<pre><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">set_config</span><span class=\"p\">(</span><span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">unit_definition</span><span class=\"o\">.</span><span class=\"n\">metric</span><span class=\"o\">.</span><span class=\"n\">unit_definition</span><span class=\"p\">)</span>\n<span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">units</span><span class=\"o\">.</span><span class=\"n\">reload_units</span><span class=\"p\">()</span>\n</pre>\n<p>The new formatting will yield metric, as inches is removed from the\nformatting definition.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Ingredient</span><span class=\"p\">(</span><span class=\"s1\">'2 lb butter'</span><span class=\"p\">))</span>\n<span class=\"c1\"># 907.18 g butter</span>\n</pre>\n<p>So, happy shopping!</p>\n\n          </div>"}, "last_serial": 6183416, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "65eb822b43a833dcc8b03b285f948f9a", "sha256": "424c4bbda14bf3661846dad2f0cb137c441e2fa0c87bf9631f11779cdbfabfdf"}, "downloads": -1, "filename": "groceries-tobiasli-1.0.0.tar.gz", "has_sig": false, "md5_digest": "65eb822b43a833dcc8b03b285f948f9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19221, "upload_time": "2019-11-18T21:42:14", "upload_time_iso_8601": "2019-11-18T21:42:14.933092Z", "url": "https://files.pythonhosted.org/packages/de/c8/02de0d910fbad09bd77f0d93314b202b8e5f8f42c8c0074d2f0ba1954468/groceries-tobiasli-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e6279213ca5c07a01b95e6af88e2c49d", "sha256": "43bec0e9f05a2a9d55e04eafc2724e85054e94f2ebd80c5b2f3e6f27066c221f"}, "downloads": -1, "filename": "groceries-tobiasli-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e6279213ca5c07a01b95e6af88e2c49d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21020, "upload_time": "2019-11-18T22:01:18", "upload_time_iso_8601": "2019-11-18T22:01:18.670785Z", "url": "https://files.pythonhosted.org/packages/ff/f3/428c69712d6af1866c102680cbbf03790a39303c968bb3ba7b26d0e650d4/groceries-tobiasli-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "af2720e67d9fee4142d00e67e8abc286", "sha256": "b5135729dd21fff9c7e3f962e9a57321014aa4eb7a5a9aef53c776e9efb26234"}, "downloads": -1, "filename": "groceries-tobiasli-1.1.0.tar.gz", "has_sig": false, "md5_digest": "af2720e67d9fee4142d00e67e8abc286", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20031, "upload_time": "2019-11-20T10:29:46", "upload_time_iso_8601": "2019-11-20T10:29:46.636648Z", "url": "https://files.pythonhosted.org/packages/8f/0d/73350c2ec651d2faf6028cbc0b2b6d310edc77616cc012f61f6e54add348/groceries-tobiasli-1.1.0.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "b573cf31a474d8e2fb1f2c02e34a1c16", "sha256": "44beb5a26fbcf8de69ac0ac433b7d6cfbc82e4087118d9ef3814827af8a63c00"}, "downloads": -1, "filename": "groceries-tobiasli-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b573cf31a474d8e2fb1f2c02e34a1c16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31207, "upload_time": "2019-11-21T19:03:56", "upload_time_iso_8601": "2019-11-21T19:03:56.146521Z", "url": "https://files.pythonhosted.org/packages/72/e1/d51d534fd78f16ae9319b253922cd0ca2d289c6a27f9fed7b21b55a73b1f/groceries-tobiasli-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "8b5020f6965151fc3d0380a3832e5ab2", "sha256": "0dc55f1704be56b3be1396e880519bcc5ab7b6fc1f0b7e6aa8e13b4c7d2d9e69"}, "downloads": -1, "filename": "groceries-tobiasli-1.1.3.tar.gz", "has_sig": false, "md5_digest": "8b5020f6965151fc3d0380a3832e5ab2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31277, "upload_time": "2019-11-21T19:15:39", "upload_time_iso_8601": "2019-11-21T19:15:39.297181Z", "url": "https://files.pythonhosted.org/packages/1d/af/ef1f34fdf446cc74419e256b3254d337020a46b41502d6ed7ff4da206922/groceries-tobiasli-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "029fe67dc98ad1d4056d7f4ab2cc7f3a", "sha256": "3dbbe9b95d15eebb65e64c5c7570bbbed04038523ae47742746eb7355cb95912"}, "downloads": -1, "filename": "groceries-tobiasli-1.1.4.tar.gz", "has_sig": false, "md5_digest": "029fe67dc98ad1d4056d7f4ab2cc7f3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31263, "upload_time": "2019-11-21T19:19:55", "upload_time_iso_8601": "2019-11-21T19:19:55.687912Z", "url": "https://files.pythonhosted.org/packages/33/45/cfff8f9f1a1d21bed9e9508ab13840f6785201d936588784ce426f817c13/groceries-tobiasli-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "1eed24eb7d913b6d6b335a23d2d01196", "sha256": "5a73cd263859c71626387653bb8a6b81f0d8625b4323c2a1804f2f73a1675bdc"}, "downloads": -1, "filename": "groceries-tobiasli-1.1.5.tar.gz", "has_sig": false, "md5_digest": "1eed24eb7d913b6d6b335a23d2d01196", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31204, "upload_time": "2019-11-21T20:10:35", "upload_time_iso_8601": "2019-11-21T20:10:35.725924Z", "url": "https://files.pythonhosted.org/packages/6a/cb/789f9ae58867044d759fe7dcb98ac8304522e92a33b8305d257474398ac0/groceries-tobiasli-1.1.5.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "522d9921458b01f7f6f7945e47017487", "sha256": "55c5974b31807c7a321e446db6bb8d88766ab8d5f72fe732714f9d887f025dde"}, "downloads": -1, "filename": "groceries-tobiasli-1.1.7.tar.gz", "has_sig": false, "md5_digest": "522d9921458b01f7f6f7945e47017487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31492, "upload_time": "2019-11-22T21:01:37", "upload_time_iso_8601": "2019-11-22T21:01:37.641439Z", "url": "https://files.pythonhosted.org/packages/50/ec/8c7fd1b625c04efc203a187b77df79d60e9444230d26d767d6a28cf0cccb/groceries-tobiasli-1.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "522d9921458b01f7f6f7945e47017487", "sha256": "55c5974b31807c7a321e446db6bb8d88766ab8d5f72fe732714f9d887f025dde"}, "downloads": -1, "filename": "groceries-tobiasli-1.1.7.tar.gz", "has_sig": false, "md5_digest": "522d9921458b01f7f6f7945e47017487", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31492, "upload_time": "2019-11-22T21:01:37", "upload_time_iso_8601": "2019-11-22T21:01:37.641439Z", "url": "https://files.pythonhosted.org/packages/50/ec/8c7fd1b625c04efc203a187b77df79d60e9444230d26d767d6a28cf0cccb/groceries-tobiasli-1.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:09 2020"}