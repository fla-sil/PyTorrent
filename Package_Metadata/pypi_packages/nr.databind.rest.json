{"info": {"author": "Niklas Rosenstein", "author_email": "rosensteinniklas@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# nr.databind.rest\n\nThis module can be used to define a REST API interface using Python 3\nannotations and `nr.databind` object mapping features.\n\n*Todo*\n\n* [ ] Dynamic and static code generation for REST clients\n\n### Example\n\nResources are created by defining an `Interface` subclass and decorating its\nmethods with the `@Route` decorator. The subclass can then be used to\nautomatically generate client code and to implement a server based on the\nsame interface.\n\n```py\nfrom my.service.api.types import MyRequest, MyResponse\nfrom nr.databind.rest import Route, RouteParam\nfrom nr.interface import Interface\n\nclass MyResource(Interface):\n\n  @Route('GET /my-endpoint/{parameter_a}')\n  def my_get_endpoint(self, parameter_a: str, parameter_b: QP(int)) -> MyResponse:\n    ...\n\n  @Route('POST /my-endpoint/{parameter_a}')\n  def my_post_endpoint(self, parameter_a: str, body: MyRequest) -> MyResponse:\n    ...\n```\n\nThe resource is then implemented like this:\n\n```py\nfrom my.service.api.resources import MyResource\nfrom my.service.api.types import MyResponse\nfrom nr.interface import implements\n\n\n@implements(MyResource)\nclass MyResourceImpl:\n\n  def my_get_endpoint(self, parameter_a, parameter_b):\n    # ...\n    return MyResponse(...)\n  \n  def my_post_endpoint(self, parameter_a, body):\n    # ...\n    return MyResponse(...)\n```\n\nResources can then be bound to a server framework using one of the available\nbind mechanisms (currently only Flask is available).\n\n```py\nfrom flask import Flask\nfrom my.service.api.resources_impl import MyResourceImpl\nfrom nr.databind.json import JsonModule\nfrom nr.databind.rest.flask import bind_resource, FlaskRequestMapper\n\napp = Flask(__name__)\nrequest_mapper = FlaskRequestMapper(JsonModule())\nbind_resource(request_mapper, app, '/my-resource', MyResourceImpl)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.niklasrosenstein.com/NiklasRosenstein/nr-python-libs", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nr.databind.rest", "package_url": "https://pypi.org/project/nr.databind.rest/", "platform": "", "project_url": "https://pypi.org/project/nr.databind.rest/", "project_urls": {"Homepage": "https://git.niklasrosenstein.com/NiklasRosenstein/nr-python-libs"}, "release_url": "https://pypi.org/project/nr.databind.rest/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Package description here.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nr.databind.rest</h1>\n<p>This module can be used to define a REST API interface using Python 3\nannotations and <code>nr.databind</code> object mapping features.</p>\n<p><em>Todo</em></p>\n<ul>\n<li>[ ] Dynamic and static code generation for REST clients</li>\n</ul>\n<h3>Example</h3>\n<p>Resources are created by defining an <code>Interface</code> subclass and decorating its\nmethods with the <code>@Route</code> decorator. The subclass can then be used to\nautomatically generate client code and to implement a server based on the\nsame interface.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my.service.api.types</span> <span class=\"kn\">import</span> <span class=\"n\">MyRequest</span><span class=\"p\">,</span> <span class=\"n\">MyResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nr.databind.rest</span> <span class=\"kn\">import</span> <span class=\"n\">Route</span><span class=\"p\">,</span> <span class=\"n\">RouteParam</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nr.interface</span> <span class=\"kn\">import</span> <span class=\"n\">Interface</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyResource</span><span class=\"p\">(</span><span class=\"n\">Interface</span><span class=\"p\">):</span>\n\n  <span class=\"nd\">@Route</span><span class=\"p\">(</span><span class=\"s1\">'GET /my-endpoint/</span><span class=\"si\">{parameter_a}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">my_get_endpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parameter_a</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">parameter_b</span><span class=\"p\">:</span> <span class=\"n\">QP</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">))</span> <span class=\"o\">-&gt;</span> <span class=\"n\">MyResponse</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n  <span class=\"nd\">@Route</span><span class=\"p\">(</span><span class=\"s1\">'POST /my-endpoint/</span><span class=\"si\">{parameter_a}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n  <span class=\"k\">def</span> <span class=\"nf\">my_post_endpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parameter_a</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">MyRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">MyResponse</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>The resource is then implemented like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">my.service.api.resources</span> <span class=\"kn\">import</span> <span class=\"n\">MyResource</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my.service.api.types</span> <span class=\"kn\">import</span> <span class=\"n\">MyResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nr.interface</span> <span class=\"kn\">import</span> <span class=\"n\">implements</span>\n\n\n<span class=\"nd\">@implements</span><span class=\"p\">(</span><span class=\"n\">MyResource</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyResourceImpl</span><span class=\"p\">:</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">my_get_endpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parameter_a</span><span class=\"p\">,</span> <span class=\"n\">parameter_b</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">MyResponse</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n  \n  <span class=\"k\">def</span> <span class=\"nf\">my_post_endpoint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parameter_a</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">MyResponse</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>Resources can then be bound to a server framework using one of the available\nbind mechanisms (currently only Flask is available).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my.service.api.resources_impl</span> <span class=\"kn\">import</span> <span class=\"n\">MyResourceImpl</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nr.databind.json</span> <span class=\"kn\">import</span> <span class=\"n\">JsonModule</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nr.databind.rest.flask</span> <span class=\"kn\">import</span> <span class=\"n\">bind_resource</span><span class=\"p\">,</span> <span class=\"n\">FlaskRequestMapper</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">request_mapper</span> <span class=\"o\">=</span> <span class=\"n\">FlaskRequestMapper</span><span class=\"p\">(</span><span class=\"n\">JsonModule</span><span class=\"p\">())</span>\n<span class=\"n\">bind_resource</span><span class=\"p\">(</span><span class=\"n\">request_mapper</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"s1\">'/my-resource'</span><span class=\"p\">,</span> <span class=\"n\">MyResourceImpl</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7009469, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e3d87d4f0056c2fc5e8d08337dff59c0", "sha256": "8f1d65d646c340b643323755f266445e4443ad2de58695a0bdbe26f22e39353b"}, "downloads": -1, "filename": "nr.databind.rest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e3d87d4f0056c2fc5e8d08337dff59c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11069, "upload_time": "2020-04-13T11:56:05", "upload_time_iso_8601": "2020-04-13T11:56:05.445094Z", "url": "https://files.pythonhosted.org/packages/de/41/59ca3ce6001ba447bf45b31a4c59067d20d054bb29cd0f5f5889d22365ce/nr.databind.rest-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e3d87d4f0056c2fc5e8d08337dff59c0", "sha256": "8f1d65d646c340b643323755f266445e4443ad2de58695a0bdbe26f22e39353b"}, "downloads": -1, "filename": "nr.databind.rest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e3d87d4f0056c2fc5e8d08337dff59c0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11069, "upload_time": "2020-04-13T11:56:05", "upload_time_iso_8601": "2020-04-13T11:56:05.445094Z", "url": "https://files.pythonhosted.org/packages/de/41/59ca3ce6001ba447bf45b31a4c59067d20d054bb29cd0f5f5889d22365ce/nr.databind.rest-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:29 2020"}