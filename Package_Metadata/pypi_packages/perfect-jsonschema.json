{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# perfect-jsonschema\n[![Build Status](https://travis-ci.org/manycoding/perfect-jsonschema.svg?branch=master)](https://travis-ci.org/manycoding/perfect-jsonschema)\n[![codecov](https://codecov.io/gh/manycoding/perfect-jsonschema/branch/master/graph/badge.svg)](https://codecov.io/gh/manycoding/perfect-jsonschema)\n---\n_Because soft validation is not enough_\n\n# Why\n[JSON schema standard](https://json-schema.org/) and its implementations stand that if you have something unfamiliar in your schema, it's not an error. In particular, you won't get an error if you made a typo or used something you thought as working. For example, this one is perfectly fine and valid:\n\n    {\n        \"required\": [\"company\"],\n        \"type\": \"object\",\n        \"propertie\": {\"company\": {\"pattern\": \"^(Apple)$\"}, \"format\": \"url\"},\n    }\n\nBut we want to catch those `propertie` typos and invalid `url` [formats](https://python-jsonschema.readthedocs.io/en/latest/validate/#validating-formats).\n\nThe library rely on [jsonschema](https://github.com/Julian/jsonschema) and supports additional keywords to ignore.\n\n# Features\n\nDerives the draft from the schema and yields a `jsonschema.SchemaError` if:\n* A schema is empty\n* A schema contains a keyword which is not a part of a jsonschema implementation or `extended_keywords` set\n* A schema contains an invalid format value\n* A schema fails with `jsonschema.check_schema()`\n\n# Usage\n\n    from perfect-jsonschema import check\n\n    try:\n        check(schema, extended_keywords={\"tag\"})\n    except Exception as e:\n        do_something()\n\nAn exception example:\n\n    Traceback (most recent call last):\n        f\"Schema contains invalid keywords for \"\n    jsonschema.exceptions.SchemaError: Schema contains invalid keywords for http://json-schema.org/draft-07/schema#:\n    {'propertie', 'company'}\n\n# Local development\n\n    pipenv install --dev\n    pipenv shell\n    tox\n\n# Contribution\n\n  Any contribution is welcome\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/manycoding/perfect-jsonschema", "keywords": "", "license": "MIT", "maintainer": "manycoding", "maintainer_email": "manycoding@users.noreply.github.com", "name": "perfect-jsonschema", "package_url": "https://pypi.org/project/perfect-jsonschema/", "platform": "", "project_url": "https://pypi.org/project/perfect-jsonschema/", "project_urls": {"Homepage": "https://github.com/manycoding/perfect-jsonschema"}, "release_url": "https://pypi.org/project/perfect-jsonschema/2019.2.6/", "requires_dist": ["jsonschema[format] (>=3.0.0b3)"], "requires_python": "", "summary": "Strictly checks that a json schema is valid", "version": "2019.2.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>perfect-jsonschema</h1>\n<h2><a href=\"https://travis-ci.org/manycoding/perfect-jsonschema\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aab2a338fddd763f3be3d6ccf0c66421eefc65d6/68747470733a2f2f7472617669732d63692e6f72672f6d616e79636f64696e672f706572666563742d6a736f6e736368656d612e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/manycoding/perfect-jsonschema\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01110a55c5405040feea339908a528d9f7f78c56/68747470733a2f2f636f6465636f762e696f2f67682f6d616e79636f64696e672f706572666563742d6a736f6e736368656d612f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></h2>\n<p><em>Because soft validation is not enough</em></p>\n<h1>Why</h1>\n<p><a href=\"https://json-schema.org/\" rel=\"nofollow\">JSON schema standard</a> and its implementations stand that if you have something unfamiliar in your schema, it's not an error. In particular, you won't get an error if you made a typo or used something you thought as working. For example, this one is perfectly fine and valid:</p>\n<pre><code>{\n    \"required\": [\"company\"],\n    \"type\": \"object\",\n    \"propertie\": {\"company\": {\"pattern\": \"^(Apple)$\"}, \"format\": \"url\"},\n}\n</code></pre>\n<p>But we want to catch those <code>propertie</code> typos and invalid <code>url</code> <a href=\"https://python-jsonschema.readthedocs.io/en/latest/validate/#validating-formats\" rel=\"nofollow\">formats</a>.</p>\n<p>The library rely on <a href=\"https://github.com/Julian/jsonschema\" rel=\"nofollow\">jsonschema</a> and supports additional keywords to ignore.</p>\n<h1>Features</h1>\n<p>Derives the draft from the schema and yields a <code>jsonschema.SchemaError</code> if:</p>\n<ul>\n<li>A schema is empty</li>\n<li>A schema contains a keyword which is not a part of a jsonschema implementation or <code>extended_keywords</code> set</li>\n<li>A schema contains an invalid format value</li>\n<li>A schema fails with <code>jsonschema.check_schema()</code></li>\n</ul>\n<h1>Usage</h1>\n<pre><code>from perfect-jsonschema import check\n\ntry:\n    check(schema, extended_keywords={\"tag\"})\nexcept Exception as e:\n    do_something()\n</code></pre>\n<p>An exception example:</p>\n<pre><code>Traceback (most recent call last):\n    f\"Schema contains invalid keywords for \"\njsonschema.exceptions.SchemaError: Schema contains invalid keywords for http://json-schema.org/draft-07/schema#:\n{'propertie', 'company'}\n</code></pre>\n<h1>Local development</h1>\n<pre><code>pipenv install --dev\npipenv shell\ntox\n</code></pre>\n<h1>Contribution</h1>\n<p>Any contribution is welcome</p>\n\n          </div>"}, "last_serial": 4783719, "releases": {"2019.2.5": [{"comment_text": "", "digests": {"md5": "29366ad2cb433304fa88d72168fb656c", "sha256": "94b131c06ca3a6b906c591929ec4ad58470dd91fed0a7205674a2eb9c592dedc"}, "downloads": -1, "filename": "perfect_jsonschema-2019.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "29366ad2cb433304fa88d72168fb656c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4519, "upload_time": "2019-02-05T20:00:35", "upload_time_iso_8601": "2019-02-05T20:00:35.193975Z", "url": "https://files.pythonhosted.org/packages/22/ac/d9a8f5aa92ed6a4a6464e649e6a0f91c8bcceca1bd274df6d3dffa42a603/perfect_jsonschema-2019.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "396c74fb1e6cbf527af539cfe2632050", "sha256": "b6fc3458644fcc1c634cc2361c1d0cfa031b7b785c71a7620b1e86bd836dc455"}, "downloads": -1, "filename": "perfect-jsonschema-2019.2.5.tar.gz", "has_sig": false, "md5_digest": "396c74fb1e6cbf527af539cfe2632050", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11628, "upload_time": "2019-02-05T20:00:37", "upload_time_iso_8601": "2019-02-05T20:00:37.427000Z", "url": "https://files.pythonhosted.org/packages/58/46/87376dc28f326644ac0434938d4d76bfc1fac1915fdedcb2e9dcf7d534d3/perfect-jsonschema-2019.2.5.tar.gz", "yanked": false}], "2019.2.6": [{"comment_text": "", "digests": {"md5": "c74163ab375872de781ca148ab657c84", "sha256": "0dbb049a48eaa1636cacdd6119fd8e6425561fa7f9b028e926774b26517d7aa4"}, "downloads": -1, "filename": "perfect_jsonschema-2019.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c74163ab375872de781ca148ab657c84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4546, "upload_time": "2019-02-05T20:29:07", "upload_time_iso_8601": "2019-02-05T20:29:07.767917Z", "url": "https://files.pythonhosted.org/packages/ea/c1/de9bb485f2d7cf7e11ef27a291a80cf31fcc76db59e864d89f21333f656e/perfect_jsonschema-2019.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2ce0966b1e0fb2f0543e4e551628997", "sha256": "441877f9a9ec32716715acc13b5c28f79a34f98f0823178b2d992fa95526bc00"}, "downloads": -1, "filename": "perfect-jsonschema-2019.2.6.tar.gz", "has_sig": false, "md5_digest": "b2ce0966b1e0fb2f0543e4e551628997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11659, "upload_time": "2019-02-05T20:29:09", "upload_time_iso_8601": "2019-02-05T20:29:09.325299Z", "url": "https://files.pythonhosted.org/packages/98/7e/1c6c39297d09363e88d53e9d805f0cf1bb39dde67a69801d162529b28207/perfect-jsonschema-2019.2.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c74163ab375872de781ca148ab657c84", "sha256": "0dbb049a48eaa1636cacdd6119fd8e6425561fa7f9b028e926774b26517d7aa4"}, "downloads": -1, "filename": "perfect_jsonschema-2019.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c74163ab375872de781ca148ab657c84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4546, "upload_time": "2019-02-05T20:29:07", "upload_time_iso_8601": "2019-02-05T20:29:07.767917Z", "url": "https://files.pythonhosted.org/packages/ea/c1/de9bb485f2d7cf7e11ef27a291a80cf31fcc76db59e864d89f21333f656e/perfect_jsonschema-2019.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b2ce0966b1e0fb2f0543e4e551628997", "sha256": "441877f9a9ec32716715acc13b5c28f79a34f98f0823178b2d992fa95526bc00"}, "downloads": -1, "filename": "perfect-jsonschema-2019.2.6.tar.gz", "has_sig": false, "md5_digest": "b2ce0966b1e0fb2f0543e4e551628997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11659, "upload_time": "2019-02-05T20:29:09", "upload_time_iso_8601": "2019-02-05T20:29:09.325299Z", "url": "https://files.pythonhosted.org/packages/98/7e/1c6c39297d09363e88d53e9d805f0cf1bb39dde67a69801d162529b28207/perfect-jsonschema-2019.2.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:20 2020"}