{"info": {"author": "Evaldas Kazlauskis", "author_email": "evaldas@evalkaz.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "\n# DoItLater\n\nA simple python library to schedule work in the future with ability to loop infinitely. Does not depend on any 3rd party libraries.\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [API](#api)\n___\n## Installation\nThe package can be simply installed using on of these methods:\n* `pip`: `pip install doitlater`\n* `poetry`: `poetry add doitlater`\n* `poetry`: `poetry add git+https://github.com/evalkaz/doitlater.git`\n---\n## Usage\nSimplest example:\n```python\nfrom datetime import datetime, timedelta\nfrom doitlater import Later\n\nlater = Later()\n\n@later.on(datetime(2021, 1, 1))\ndef say_hello():\n    print(\"Happy new years in 2021!\")\n\nif __name__ == \"__main__\":\n    later.do()\n```\n\nTo call the same function every 10 seconds with 30 seconds cold start:\n```python\n@later.on(\n    datetime.now() + timedelta(seconds=30),\n    timedelta(seconds=10),\n    loop=True\n)\ndef repeatable_work():\n    print(\"Hello every 10 seconds!\")\n```\nThe `later.on()` is stackable so this will work too (will be executed every 5 and every 7 days):\n```python\n@later.on(datetime(2021, 1, 1), timedelta(days=5))\n@later.on(datetime(2021, 1, 1), timedelta(weeks=1))\ndef say_hello():\n    print(\"Happy new years in 2021!\")\n```\nYou can also pass a list of `datetime` or `timedelta` (or a mixed one) when to execute the function:\n```python\n@later.on(datetime(2021, 1, 1), [\n    datetime(2021, 2, 1),\n    datetime(2021, 3, 1),\n    timedelta(days=31)], loop=False)\ndef say_hello():\n    print(\"Happy new years in 2021!\")\n```\nIf you want to stop executing the same function just return `False`:\n```python\n@later.on(datetime(2021, 1, 1), timedelta(seconds=5), loop=True)\ndef only_one_hello():\n    print(\"This will appear only once!\")\n    return False\n```\nIf you have multiple functions and one of them throws an exception but you don't want to stop the work, pass `ignore_errors=True` to `Later()` object:\n```python\nlater = Later(ignore_errors=True)\n```\nBy default, library will output logs on errors. To change logging, use [`dictConfig`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig):\n```python\nfrom datetime import datetime, timedelta\nfrom doitlater import Later\nfrom logging.config import dictConfig\n\ndictConfig(\n    {\n        \"version\": 1,\n        \"formatters\": {\n            \"default\": {\n                \"format\": \"[%(asctime)s] %(levelname)s in %(module)s: %(message)s\",\n            }\n        },\n        \"handlers\": {\n            \"default\": {\"class\": \"logging.StreamHandler\", \"formatter\": \"default\",}\n        },\n        \"root\": {\"level\": \"INFO\", \"handlers\": [\"default\"]},\n    }\n)\n\nlater = Later()\n\n@later.on(datetime(2021, 1, 1))\ndef say_hello():\n    print(\"Happy new years in 2021!\")\n\nif __name__ == \"__main__\":\n    later.do()\n```\n---\n## API\n`Later(workers, ignore_errors)` takes these parameters:\n* `workers` - number of threads to use, defaults to maximum number of threads supported by CPU.\n* `ignore_errors` - `False` will exit when one of the function throws an error, `True` - ignores exceptions and will resume the work.\n\n`later.on(exactly, repeat, loop)` function takes these parameters:\n* `exactly` - on which time perform the first function call.\n* `repeat` - a single value or a list of `datetime`, `timedelta` or both on when to repeat the call. If `None` is passed the function will not be called again. Defaults to `None`.\n* `loop` - whether repeat calling times from `repeat`. Defaults to `True`.\n\n`later.do()` does not take any parameters.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/evalkaz/doitlater", "keywords": "scheduling,later", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "doitlater", "package_url": "https://pypi.org/project/doitlater/", "platform": "", "project_url": "https://pypi.org/project/doitlater/", "project_urls": {"Homepage": "https://github.com/evalkaz/doitlater", "Repository": "https://github.com/evalkaz/doitlater"}, "release_url": "https://pypi.org/project/doitlater/0.1.2/", "requires_dist": null, "requires_python": ">=3.4,<4.0", "summary": "When you have to do something... later.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DoItLater</h1>\n<p>A simple python library to schedule work in the future with ability to loop infinitely. Does not depend on any 3rd party libraries.</p>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#api\" rel=\"nofollow\">API</a></li>\n</ul>\n<hr>\n<h2>Installation</h2>\n<p>The package can be simply installed using on of these methods:</p>\n<ul>\n<li><code>pip</code>: <code>pip install doitlater</code></li>\n<li><code>poetry</code>: <code>poetry add doitlater</code></li>\n<li><code>poetry</code>: <code>poetry add git+https://github.com/evalkaz/doitlater.git</code></li>\n</ul>\n<hr>\n<h2>Usage</h2>\n<p>Simplest example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">doitlater</span> <span class=\"kn\">import</span> <span class=\"n\">Later</span>\n\n<span class=\"n\">later</span> <span class=\"o\">=</span> <span class=\"n\">Later</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@later</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Happy new years in 2021!\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">later</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">()</span>\n</pre>\n<p>To call the same function every 10 seconds with 30 seconds cold start:</p>\n<pre><span class=\"nd\">@later</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span>\n    <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">),</span>\n    <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n    <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">repeatable_work</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Hello every 10 seconds!\"</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>later.on()</code> is stackable so this will work too (will be executed every 5 and every 7 days):</p>\n<pre><span class=\"nd\">@later</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"nd\">@later</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">weeks</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Happy new years in 2021!\"</span><span class=\"p\">)</span>\n</pre>\n<p>You can also pass a list of <code>datetime</code> or <code>timedelta</code> (or a mixed one) when to execute the function:</p>\n<pre><span class=\"nd\">@later</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">[</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n    <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">)],</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Happy new years in 2021!\"</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to stop executing the same function just return <code>False</code>:</p>\n<pre><span class=\"nd\">@later</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">only_one_hello</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This will appear only once!\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n</pre>\n<p>If you have multiple functions and one of them throws an exception but you don't want to stop the work, pass <code>ignore_errors=True</code> to <code>Later()</code> object:</p>\n<pre><span class=\"n\">later</span> <span class=\"o\">=</span> <span class=\"n\">Later</span><span class=\"p\">(</span><span class=\"n\">ignore_errors</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>By default, library will output logs on errors. To change logging, use <a href=\"https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig\" rel=\"nofollow\"><code>dictConfig</code></a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">doitlater</span> <span class=\"kn\">import</span> <span class=\"n\">Later</span>\n<span class=\"kn\">from</span> <span class=\"nn\">logging.config</span> <span class=\"kn\">import</span> <span class=\"n\">dictConfig</span>\n\n<span class=\"n\">dictConfig</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"formatters\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"format\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[</span><span class=\"si\">%(asctime)s</span><span class=\"s2\">] </span><span class=\"si\">%(levelname)s</span><span class=\"s2\"> in </span><span class=\"si\">%(module)s</span><span class=\"s2\">: </span><span class=\"si\">%(message)s</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"handlers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"default\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"class\"</span><span class=\"p\">:</span> <span class=\"s2\">\"logging.StreamHandler\"</span><span class=\"p\">,</span> <span class=\"s2\">\"formatter\"</span><span class=\"p\">:</span> <span class=\"s2\">\"default\"</span><span class=\"p\">,}</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"root\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"level\"</span><span class=\"p\">:</span> <span class=\"s2\">\"INFO\"</span><span class=\"p\">,</span> <span class=\"s2\">\"handlers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"default\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">later</span> <span class=\"o\">=</span> <span class=\"n\">Later</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@later</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">say_hello</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Happy new years in 2021!\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">later</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"p\">()</span>\n</pre>\n<hr>\n<h2>API</h2>\n<p><code>Later(workers, ignore_errors)</code> takes these parameters:</p>\n<ul>\n<li><code>workers</code> - number of threads to use, defaults to maximum number of threads supported by CPU.</li>\n<li><code>ignore_errors</code> - <code>False</code> will exit when one of the function throws an error, <code>True</code> - ignores exceptions and will resume the work.</li>\n</ul>\n<p><code>later.on(exactly, repeat, loop)</code> function takes these parameters:</p>\n<ul>\n<li><code>exactly</code> - on which time perform the first function call.</li>\n<li><code>repeat</code> - a single value or a list of <code>datetime</code>, <code>timedelta</code> or both on when to repeat the call. If <code>None</code> is passed the function will not be called again. Defaults to <code>None</code>.</li>\n<li><code>loop</code> - whether repeat calling times from <code>repeat</code>. Defaults to <code>True</code>.</li>\n</ul>\n<p><code>later.do()</code> does not take any parameters.</p>\n\n          </div>"}, "last_serial": 6398924, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "3cd9c0be60154e919c0d675121f48792", "sha256": "9782273a7555ef997bd1729b49c0948281036d95b9a269c47fcb4bc6266548c6"}, "downloads": -1, "filename": "DoItLater-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3cd9c0be60154e919c0d675121f48792", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 5032, "upload_time": "2020-01-05T17:01:24", "upload_time_iso_8601": "2020-01-05T17:01:24.936898Z", "url": "https://files.pythonhosted.org/packages/cc/29/7ff9a14e365d2bac0b9a1d3de0b0ee2ea5a7fc4567d4d98e8d7057a196d0/DoItLater-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60957460f9fed0e7ae90c2ac88ac0912", "sha256": "8ac590196829a74200d382b798ed7b87cd4b480a1eb9464870ce8c5373c5521b"}, "downloads": -1, "filename": "DoItLater-0.1.1.tar.gz", "has_sig": false, "md5_digest": "60957460f9fed0e7ae90c2ac88ac0912", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 4981, "upload_time": "2020-01-05T17:01:26", "upload_time_iso_8601": "2020-01-05T17:01:26.457566Z", "url": "https://files.pythonhosted.org/packages/d3/33/295a33ce2ff3568c6e1a50ac0f9b23016e2e56b628e06eca4d0fbbbe4746/DoItLater-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "f60fc20b6eeade6430fa20b2715ea317", "sha256": "4fbdf144a26164c3e3583e26916075acb46283a89382ba747c5b4844f7d522e1"}, "downloads": -1, "filename": "DoItLater-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f60fc20b6eeade6430fa20b2715ea317", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 5045, "upload_time": "2020-01-05T17:29:03", "upload_time_iso_8601": "2020-01-05T17:29:03.154721Z", "url": "https://files.pythonhosted.org/packages/8a/d4/3e89222c17369c188638dbf2b941d951dbafb9184995fcde7dc69ceb07cc/DoItLater-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15415184f842e54707dcae6b125436ed", "sha256": "92d4bb4c9c397d9baceeb441f676ca60bbf704a15f3130fa27d38d17ce5fec02"}, "downloads": -1, "filename": "DoItLater-0.1.2.tar.gz", "has_sig": false, "md5_digest": "15415184f842e54707dcae6b125436ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 5004, "upload_time": "2020-01-05T17:29:05", "upload_time_iso_8601": "2020-01-05T17:29:05.241029Z", "url": "https://files.pythonhosted.org/packages/0d/82/5415e9adeee36ea3be33158c0004a2e67e26eedf78f3de9b5a24c41df802/DoItLater-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f60fc20b6eeade6430fa20b2715ea317", "sha256": "4fbdf144a26164c3e3583e26916075acb46283a89382ba747c5b4844f7d522e1"}, "downloads": -1, "filename": "DoItLater-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f60fc20b6eeade6430fa20b2715ea317", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4,<4.0", "size": 5045, "upload_time": "2020-01-05T17:29:03", "upload_time_iso_8601": "2020-01-05T17:29:03.154721Z", "url": "https://files.pythonhosted.org/packages/8a/d4/3e89222c17369c188638dbf2b941d951dbafb9184995fcde7dc69ceb07cc/DoItLater-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15415184f842e54707dcae6b125436ed", "sha256": "92d4bb4c9c397d9baceeb441f676ca60bbf704a15f3130fa27d38d17ce5fec02"}, "downloads": -1, "filename": "DoItLater-0.1.2.tar.gz", "has_sig": false, "md5_digest": "15415184f842e54707dcae6b125436ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4,<4.0", "size": 5004, "upload_time": "2020-01-05T17:29:05", "upload_time_iso_8601": "2020-01-05T17:29:05.241029Z", "url": "https://files.pythonhosted.org/packages/0d/82/5415e9adeee36ea3be33158c0004a2e67e26eedf78f3de9b5a24c41df802/DoItLater-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:33 2020"}