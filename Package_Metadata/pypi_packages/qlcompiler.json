{"info": {"author": "F\u00e1bio Mac\u00eado Mendes", "author_email": "fabiomacedomendes@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries"], "description": ".. These are the Travis-CI and Coveralls badges for your repository. Replace\n   your *github_repository* and uncomment these lines by removing the leading\n   two dots.\n\n.. .. image:: https://travis-ci.org/*github_repository*.svg?branch=master\n    :target: https://travis-ci.org/*github_repository*\n\n.. .. image:: https://coveralls.io/repos/github/*github_repository*/badge.svg?branch=master\n    :target: https://coveralls.io/github/*github_repository*?branch=master\n\n\nThe quick lambda compiler takes quick lambda objects from sidekick and compiles\nthem either to Python, C or Javascript code. The goal is to improve \ninteroperability between Python and other languages that can be useful in some \ncommon Python applications.\n\n\nC compiler\n==========\n\nThe main goal of the C compiler is to help with scientific Python where simple \nand small functions can be defined both in Python and C. The goal is to \nprototype a function in a scientific computation in Python and then later \nconvert it to C and have huge speed gains with very little effort.\n\nThe main use case is interoperability with Numpy, but it can be used as a simple\ncode generator for other C applications.\n\n>>> from sidekick import _\n>>> from qlcompiler import c_compiler\n>>> print(c_compiler.compile(_ + 2))\nvoid function(double _) {\n    return _ + 2;\n}\n\n\nJavascript compiler\n===================\n\nSimilarly to C compiler, the Javascript compiler converts quick lambdas to\nJavascript code. It may be useful in web application in order to share code\nbetween the client and the server.\n\n>>> from qlcompiler import js_compiler\n>>> print(js_compiler.compile(_ + 2))\nfunction(_) {\n    return _ + 2;\n}\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "qlcompiler", "package_url": "https://pypi.org/project/qlcompiler/", "platform": "any", "project_url": "https://pypi.org/project/qlcompiler/", "project_urls": null, "release_url": "https://pypi.org/project/qlcompiler/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "A short description for your project.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The quick lambda compiler takes quick lambda objects from sidekick and compiles\nthem either to Python, C or Javascript code. The goal is to improve\ninteroperability between Python and other languages that can be useful in some\ncommon Python applications.</p>\n<div id=\"c-compiler\">\n<h2>C compiler</h2>\n<p>The main goal of the C compiler is to help with scientific Python where simple\nand small functions can be defined both in Python and C. The goal is to\nprototype a function in a scientific computation in Python and then later\nconvert it to C and have huge speed gains with very little effort.</p>\n<p>The main use case is interoperability with Numpy, but it can be used as a simple\ncode generator for other C applications.</p>\n<pre>&gt;&gt;&gt; from sidekick import _\n&gt;&gt;&gt; from qlcompiler import c_compiler\n&gt;&gt;&gt; print(c_compiler.compile(_ + 2))\nvoid function(double _) {\n    return _ + 2;\n}\n</pre>\n</div>\n<div id=\"javascript-compiler\">\n<h2>Javascript compiler</h2>\n<p>Similarly to C compiler, the Javascript compiler converts quick lambdas to\nJavascript code. It may be useful in web application in order to share code\nbetween the client and the server.</p>\n<pre>&gt;&gt;&gt; from qlcompiler import js_compiler\n&gt;&gt;&gt; print(js_compiler.compile(_ + 2))\nfunction(_) {\n    return _ + 2;\n}\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3188522, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "652ac3606d632293d5703e67ca2dbbab", "sha256": "224efcf90f257ed43cc280f60a3e5ef5f68ff02269256532d33edcb3d9a0e5e3"}, "downloads": -1, "filename": "qlcompiler-0.1.0.tar.gz", "has_sig": false, "md5_digest": "652ac3606d632293d5703e67ca2dbbab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4688, "upload_time": "2017-09-20T14:17:25", "upload_time_iso_8601": "2017-09-20T14:17:25.747163Z", "url": "https://files.pythonhosted.org/packages/51/5a/35eedbc08f4c4c1fb5646e79b74f144ae64a6ced9dab3bced3995b0ff2cf/qlcompiler-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "652ac3606d632293d5703e67ca2dbbab", "sha256": "224efcf90f257ed43cc280f60a3e5ef5f68ff02269256532d33edcb3d9a0e5e3"}, "downloads": -1, "filename": "qlcompiler-0.1.0.tar.gz", "has_sig": false, "md5_digest": "652ac3606d632293d5703e67ca2dbbab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4688, "upload_time": "2017-09-20T14:17:25", "upload_time_iso_8601": "2017-09-20T14:17:25.747163Z", "url": "https://files.pythonhosted.org/packages/51/5a/35eedbc08f4c4c1fb5646e79b74f144ae64a6ced9dab3bced3995b0ff2cf/qlcompiler-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:26 2020"}