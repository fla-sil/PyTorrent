{"info": {"author": "EnergieID.be", "author_email": "jan@energieid.be", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering"], "description": "# Cloogy\nPython client for Cloogy\n\n## See Demo.ipynb for a working Jupyter Notebook\n\n\n# 0. Install cloogy\n\nIn your terminal: `pip3 install cloogy`\n\nor in a python shell or notebook:\n\n```python\nimport pip\npip.main(['install', 'cloogy'])\n```\n\n\n```python\nimport yaml\n\nfrom cloogy import CloogyClient\n```\n\n# 1. Get your credentials\n\nGet your login and password.\n\nIn this example we'll load it from a YAML file.\n\n\n```python\nwith open('credentials.yaml', 'r') as f:\n    credentials = yaml.load(f)\n```\n\n\n```python\nlogin = credentials['login']\npassword = credentials['password']\n```\n\n# 2. Create a CloogyClient\n\nIf you supply a login and password, authentication will be handled for you.\n\n\n```python\nclient = CloogyClient(login=login, password=password)\n```\n\n# 3. List your Units\n\n\n```python\nunits = client.get_units()\n```\n\n\n```python\nunits\n```\n\n# 4. Get a specific Unit by ID\n\n\n```python\n# Lets grab the first ID from the list above\nunit_id = units[0]['Id']\nprint(unit_id)\n```\n\n\n```python\nunit = client.get_unit(unit_id=unit_id)\n```\n\n\n```python\nunit\n```\n\n# 5. Find out some stuff about your unit\n\nThe `Unit` class is an extension to the regular python dict. This means it behaves like a normal dict, but adds some extra features.\n\n\n```python\n# Get date and time of the last communication\nunit.get_last_communication_date()\n```\n\n# 6. List all available Tags for your login\n\n\n```python\nclient.get_tags()\n```\n\n# 7. List available Tags for a Unit\n\n\n```python\ntags = unit.get_tags()\n```\n\n\n```python\ntags\n```\n\n\n```python\n[tag['Id'] for tag in tags]\n```\n\n# 8. Get a specific Tag directly\n\n\n```python\ntag_id = tags[0]['Id']\nprint(tag_id)\n```\n\n\n```python\ntag = client.get_tag(tag_id=tag_id)\n```\n\n\n```python\ntag\n```\n\n\n```python\ntag.get_last_communication_date()\n```\n\n# 9. Get consumptions\n\n\n```python\n# pick a start and end time, as POSIX timestamp\n\nimport pandas as pd\nstart = int(pd.Timestamp('20180414').timestamp() * 1000)\nend = int(pd.Timestamp('20180416').timestamp() * 1000)\nprint(start, end)\n```\n\n\n```python\nclient.get_consumptions(\n    granularity='hourly', # can be Instant, Hourly, Daily, Monthly, Yearly\n    start=start,\n    end=end,\n    tags=[tag_id], # List of tag Id's\n    instants_type=None  # How instant measurements should be aggregated. Can be Avg, Max, Min, Stdev. Default is Avg.\n)\n```\n\n# 10. Get consumptions as a DataFrame\n\nFor some easy analysis, methods to get data as a Pandas DataFrame are included\n\nLet's say we want to analyse the active energy consumption, which has TagTypeId 20001\n\n\n```python\ntags = client.get_tags(where='TagTypeId=20001')\ntag_ids = [tag['Id'] for tag in tags]\n\nstart = pd.Timestamp('20180101')\nend = pd.Timestamp('20180417')\n```\n\n\n```python\nclient.get_consumptions_dataframe(granularity='monthly', start=start, end=end, tags=tag_ids)\n```\n\nA flat table like this is nice, but it can contain multiple TagIds, and it has way to many columns we don't need.\n\nWe can also get a table for only the readings:\n\n\n```python\ndf = client.get_readings_dataframe(granularity='monthly', start=start, end=end, tags=tag_ids, metric='Read')\n```\n\n\n```python\ndf\n```\n\n\n```python\n# make a plot!\n\n%matplotlib inline\ndf.plot.bar()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/energieid/cloogy", "keywords": "cloogy data monitoring api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cloogy", "package_url": "https://pypi.org/project/cloogy/", "platform": "", "project_url": "https://pypi.org/project/cloogy/", "project_urls": {"Homepage": "https://github.com/energieid/cloogy"}, "release_url": "https://pypi.org/project/cloogy/0.0.3/", "requires_dist": ["requests"], "requires_python": "", "summary": "A python API Client for Cloogy", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cloogy</h1>\n<p>Python client for Cloogy</p>\n<h2>See Demo.ipynb for a working Jupyter Notebook</h2>\n<h1>0. Install cloogy</h1>\n<p>In your terminal: <code>pip3 install cloogy</code></p>\n<p>or in a python shell or notebook:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pip</span>\n<span class=\"n\">pip</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">([</span><span class=\"s1\">'install'</span><span class=\"p\">,</span> <span class=\"s1\">'cloogy'</span><span class=\"p\">])</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">cloogy</span> <span class=\"kn\">import</span> <span class=\"n\">CloogyClient</span>\n</pre>\n<h1>1. Get your credentials</h1>\n<p>Get your login and password.</p>\n<p>In this example we'll load it from a YAML file.</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'credentials.yaml'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">credentials</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">login</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"p\">[</span><span class=\"s1\">'login'</span><span class=\"p\">]</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">credentials</span><span class=\"p\">[</span><span class=\"s1\">'password'</span><span class=\"p\">]</span>\n</pre>\n<h1>2. Create a CloogyClient</h1>\n<p>If you supply a login and password, authentication will be handled for you.</p>\n<pre><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">CloogyClient</span><span class=\"p\">(</span><span class=\"n\">login</span><span class=\"o\">=</span><span class=\"n\">login</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password</span><span class=\"p\">)</span>\n</pre>\n<h1>3. List your Units</h1>\n<pre><span class=\"n\">units</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_units</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"n\">units</span>\n</pre>\n<h1>4. Get a specific Unit by ID</h1>\n<pre><span class=\"c1\"># Lets grab the first ID from the list above</span>\n<span class=\"n\">unit_id</span> <span class=\"o\">=</span> <span class=\"n\">units</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'Id'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">unit_id</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">unit</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_unit</span><span class=\"p\">(</span><span class=\"n\">unit_id</span><span class=\"o\">=</span><span class=\"n\">unit_id</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">unit</span>\n</pre>\n<h1>5. Find out some stuff about your unit</h1>\n<p>The <code>Unit</code> class is an extension to the regular python dict. This means it behaves like a normal dict, but adds some extra features.</p>\n<pre><span class=\"c1\"># Get date and time of the last communication</span>\n<span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">get_last_communication_date</span><span class=\"p\">()</span>\n</pre>\n<h1>6. List all available Tags for your login</h1>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_tags</span><span class=\"p\">()</span>\n</pre>\n<h1>7. List available Tags for a Unit</h1>\n<pre><span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">get_tags</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"n\">tags</span>\n</pre>\n<pre><span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"s1\">'Id'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">tags</span><span class=\"p\">]</span>\n</pre>\n<h1>8. Get a specific Tag directly</h1>\n<pre><span class=\"n\">tag_id</span> <span class=\"o\">=</span> <span class=\"n\">tags</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'Id'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tag_id</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_tag</span><span class=\"p\">(</span><span class=\"n\">tag_id</span><span class=\"o\">=</span><span class=\"n\">tag_id</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">tag</span>\n</pre>\n<pre><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">get_last_communication_date</span><span class=\"p\">()</span>\n</pre>\n<h1>9. Get consumptions</h1>\n<pre><span class=\"c1\"># pick a start and end time, as POSIX timestamp</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'20180414'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'20180416'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_consumptions</span><span class=\"p\">(</span>\n    <span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"s1\">'hourly'</span><span class=\"p\">,</span> <span class=\"c1\"># can be Instant, Hourly, Daily, Monthly, Yearly</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span>\n    <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">,</span>\n    <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">tag_id</span><span class=\"p\">],</span> <span class=\"c1\"># List of tag Id's</span>\n    <span class=\"n\">instants_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>  <span class=\"c1\"># How instant measurements should be aggregated. Can be Avg, Max, Min, Stdev. Default is Avg.</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>10. Get consumptions as a DataFrame</h1>\n<p>For some easy analysis, methods to get data as a Pandas DataFrame are included</p>\n<p>Let's say we want to analyse the active energy consumption, which has TagTypeId 20001</p>\n<pre><span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_tags</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"s1\">'TagTypeId=20001'</span><span class=\"p\">)</span>\n<span class=\"n\">tag_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tag</span><span class=\"p\">[</span><span class=\"s1\">'Id'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">tags</span><span class=\"p\">]</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'20180101'</span><span class=\"p\">)</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">(</span><span class=\"s1\">'20180417'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_consumptions_dataframe</span><span class=\"p\">(</span><span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"s1\">'monthly'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tag_ids</span><span class=\"p\">)</span>\n</pre>\n<p>A flat table like this is nice, but it can contain multiple TagIds, and it has way to many columns we don't need.</p>\n<p>We can also get a table for only the readings:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_readings_dataframe</span><span class=\"p\">(</span><span class=\"n\">granularity</span><span class=\"o\">=</span><span class=\"s1\">'monthly'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tag_ids</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">'Read'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">df</span>\n</pre>\n<pre><span class=\"c1\"># make a plot!</span>\n\n<span class=\"o\">%</span><span class=\"n\">matplotlib</span> <span class=\"n\">inline</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6207348, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7a013a39956abc7ccb44ef877252e2c6", "sha256": "7383fd77a63843855d133dedb2f248f94657f2a735ca44f47997984334eb418f"}, "downloads": -1, "filename": "cloogy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7a013a39956abc7ccb44ef877252e2c6", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 7998, "upload_time": "2018-04-17T23:06:39", "upload_time_iso_8601": "2018-04-17T23:06:39.990294Z", "url": "https://files.pythonhosted.org/packages/18/d9/394e43faa25115c94445fe8ed1260659ea9fa615828681e5c00365f3e6fd/cloogy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "214624993a352d3dfc35e21715535861", "sha256": "d7f9b6f26ce7cd08147963efc1dc52cbfa7ed96b7542acf8f174771369de5898"}, "downloads": -1, "filename": "cloogy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "214624993a352d3dfc35e21715535861", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5859, "upload_time": "2018-04-17T23:06:37", "upload_time_iso_8601": "2018-04-17T23:06:37.815617Z", "url": "https://files.pythonhosted.org/packages/8e/13/fb2366c2723a0ce5670330926b69e2eace572a8c7285bf922493292bc4aa/cloogy-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9df7701e2021b98fae9754a7dcd46e23", "sha256": "4a0eb0b6626fc15135a3934ccbf5ae7fbde997cd3bed407661b5ace3831c8b0f"}, "downloads": -1, "filename": "cloogy-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9df7701e2021b98fae9754a7dcd46e23", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 8012, "upload_time": "2018-08-27T08:27:10", "upload_time_iso_8601": "2018-08-27T08:27:10.510438Z", "url": "https://files.pythonhosted.org/packages/3f/7d/5cd47d04271e3f36572794b87318ffda304030f59c7c1e5ebaf30cd2a030/cloogy-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8f32614a4314c971a3de9f7b1189e067", "sha256": "64b5e6535a8e87f7e3be3842e34b25d4fe6624ffb0b68dc278c2ed365a532ffc"}, "downloads": -1, "filename": "cloogy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8f32614a4314c971a3de9f7b1189e067", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5886, "upload_time": "2018-08-27T08:27:08", "upload_time_iso_8601": "2018-08-27T08:27:08.413525Z", "url": "https://files.pythonhosted.org/packages/9d/50/62d68b6c3e39678debc93a30ed4e14fb17c11b550267e68389552a97ed48/cloogy-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "cea10c0a186891a974fbd598c107fbec", "sha256": "9d318f933a2a0c5e9e75009ac6463ef170dab2d49708ace32c6a5d12c0bb42a4"}, "downloads": -1, "filename": "cloogy-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "cea10c0a186891a974fbd598c107fbec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6710, "upload_time": "2019-11-27T11:07:09", "upload_time_iso_8601": "2019-11-27T11:07:09.590587Z", "url": "https://files.pythonhosted.org/packages/3f/85/beaf89ae9b0e8c965b61eb0b8b5844ec6513bba3bee60c9cb583a60d0b33/cloogy-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cec5ca98497ca9260bee728cd79921f", "sha256": "1f35000c3c29be4733b21305ee6748fb84b62c520ee0f5ed62eca91303d4ab71"}, "downloads": -1, "filename": "cloogy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5cec5ca98497ca9260bee728cd79921f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5927, "upload_time": "2019-11-27T11:07:11", "upload_time_iso_8601": "2019-11-27T11:07:11.284748Z", "url": "https://files.pythonhosted.org/packages/12/02/19df3bed990fafc7c453d98f23a6b40bf217185ef2e1ab0eda88ba64dc7d/cloogy-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cea10c0a186891a974fbd598c107fbec", "sha256": "9d318f933a2a0c5e9e75009ac6463ef170dab2d49708ace32c6a5d12c0bb42a4"}, "downloads": -1, "filename": "cloogy-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "cea10c0a186891a974fbd598c107fbec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6710, "upload_time": "2019-11-27T11:07:09", "upload_time_iso_8601": "2019-11-27T11:07:09.590587Z", "url": "https://files.pythonhosted.org/packages/3f/85/beaf89ae9b0e8c965b61eb0b8b5844ec6513bba3bee60c9cb583a60d0b33/cloogy-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cec5ca98497ca9260bee728cd79921f", "sha256": "1f35000c3c29be4733b21305ee6748fb84b62c520ee0f5ed62eca91303d4ab71"}, "downloads": -1, "filename": "cloogy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5cec5ca98497ca9260bee728cd79921f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5927, "upload_time": "2019-11-27T11:07:11", "upload_time_iso_8601": "2019-11-27T11:07:11.284748Z", "url": "https://files.pythonhosted.org/packages/12/02/19df3bed990fafc7c453d98f23a6b40bf217185ef2e1ab0eda88ba64dc7d/cloogy-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:53 2020"}