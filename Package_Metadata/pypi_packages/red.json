{"info": {"author": "Johan Nestaas", "author_email": "johannestaas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: MacOS X", "Environment :: Win32 (MS Windows)", "Environment :: X11 Applications :: Qt", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python"], "description": "red\n===\n\nPython regex command-line tool, to replace functionality akin to 'perl -ne'.\n\nInstallation\n------------\n\nFrom the project root directory::\n\n    $ python setup.py install\n\nUsage\n-----\n\nUse --help/-h to view info on the arguments::\n\n    $ red --help\n\nThe special variables available:\n\n:**line**:\n    for the entire line that was matched, without the trailing newline\n:**g**:\n    for groups, which you index to get that match group, as **g[0]** in \"(\\w+) .*\"\n:**ag**:\n    for aggregated groups with the *-a* option, which is a list of all match groups\n:**d**:\n    for the groupdict, which you can index by named group as **d[\"foo\"]** in \"(?P<foo>\\w+) .*\"\n:**ad**:\n    for the aggregated group dicts, a list of dicts\n\nExample usage::\n\n    $ cat test.txt \n    foo 1 bar 2\n    fiz 5 baz 10\n    funk 10 bunk 9\n    funk a bunk b\n    a b c d\n    aaaaa\n    bbbb\n    cc\n\nUse it like grep::\n\n    $ cat test.txt | red \"\\w+ (\\d+) \\w+ (\\d+)\" \n    foo 1 bar 2\n    fiz 5 baz 10\n    funk 10 bunk 9\n\nIt works with path as argument as well, *but the path must appear directly after the regex* (oddity of argparse).::\n    \n    $ red \"\\w+ (\\d+) \\w+ (\\d+)\" test.txt\n\nUse it to evaluate Python code on groups stored in variable **g**::\n\n    $ red \"\\w+ (\\d+) \\w+ (\\d+)\" test.txt -e \"int(g[0]) + int(g[1])\"\n    3\n    15\n    19\n\nImport an arbitrary library and do absolutely anything::\n\n    $ red '\\w+ (\\d+) \\w+ (\\d+)' test.txt -i json -e '\"{} => {}\".format(line, json.dumps(g))'\n    foo 1 bar 2 => [\"1\", \"2\"]\n    fiz 5 baz 10 => [\"5\", \"10\"]\n    funk 10 bunk 9 => [\"10\", \"9\"]\n\nIf you want to execute a few python statements before the eval, you can do that as well with **-x**::\n\n    $ red \"(\\w+) (\\d+).*\" test.txt -x 'x = int(g[1]) ; y = g[0][::-1]' -e '(x, y)'\n    (1, 'oof')\n    (5, 'zif')\n    (10, 'knuf')\n\nUse it to aggregate across all of stdin, into list **ag**::\n\n    $ cat test.txt | red \"\\w+ (\\d+) \\w+ (\\d+)\" -a \"sum([int(x[0]) for x in ag])\"\n    16\n\nAggregate has its own **-X** for an exec before the aggregate too::\n\n    $ red \"(\\w+) (\\d+).*\" test.txt -X 's = sum(int(g[1]) for g in ag)' -a 's'\n    16\n\nEvaluate on each match, and aggregate against all matches::\n\n    $ cat test.txt | red \"\\w+ (\\d+) \\w+ (\\d+)\" -a \"sum([int(x[0]) for x in ag])\" -e \"'adding {}'.format(g[0])\"\n    adding 1\n    adding 5\n    adding 10\n    16\n\nYou can use named groups as well, stored in variables **d** and aggregated into **ad**::\n\n    $ cat test.txt | red \"\\w+ (?P<first>\\d+) \\w+ \\d+\" -e \"'first value is {first}'.format(**d)\"\n    first value is 1\n    first value is 5\n    first value is 10\n\nEven multiline will work, since whatever is passed into **-x** is just **exec**'d::\n\n    $ red '.*' test.txt -x '\n    # if you want multiline, just hit apostrophe and press enter\n    # and start typing\n    if line.startswith(\"foo\"):\n         print(\"Line started with foo: {}\".format(line))\n    '\n\n    Line started with foo: foo 1 bar 2\n\nGet creative!::\n\n    $ cat urls.txt \n    https://www.google.com/\n    http://www.yahoo.com/\n    http://www.example.com/foo\n\n    $ red \"(.*)\" urls.txt -i requests -x 'response = requests.get(line)' -e '[response.status_code, response.content[:20]]'\n    [404, '<!doctype html>\\n<htm']\n    [200, '<!doctype html><html']\n    [200, '<?xml version=\"1.0\" ']\n\n    $ cat somelogfile.log \n    INFO: visited http://www.example.com/foo\n    ERROR: visited https://www.google.com/\n    ERROR: visited http://www.yahoo.com/\n\n    $ cat somelogfile.log | red '(?P<debuglevel>ERROR|INFO): \\S+ (?P<url>.*)' -i requests,collections -x 'response = requests.get(d[\"url\"])' -e '(response.status_code, response.content[0:20])' -a 'collections.Counter([d[\"debuglevel\"] for d in ad]).items()'\n    (404, '<!doctype html>\\n<htm')\n    (200, '<!doctype html><html')\n    (200, '<?xml version=\"1.0\" ')\n    [('INFO', 1), ('ERROR', 2)]\n\nDisclaimer\n----------\n\nCode in -e and -a are run through **eval**, so if you paste in code from someone,\nit will run. Just sayin'. Only run code you trust, or have inspected personally.\nThe same goes for any library you import with -i.\n\nRelease Notes\n-------------\n\n:0.2.1:\n    Added -x for pre-eval exec, added -i for importing libraries, and -X for aggregate exec\n:0.2.0:\n    Added -i/--import functionality\n:0.1.1:\n    Path works as CLI arg\n:0.1.0:\n    Version is available on pypi, with functionality of evaluation and aggregation\n:0.0.1:\n    Project created", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.bitbucket.org/johannestaas/red", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "red", "package_url": "https://pypi.org/project/red/", "platform": "", "project_url": "https://pypi.org/project/red/", "project_urls": {"Homepage": "https://www.bitbucket.org/johannestaas/red"}, "release_url": "https://pypi.org/project/red/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "Python regex command-line tool, to replace functionality akin to 'perl -ne'.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python regex command-line tool, to replace functionality akin to \u2018perl -ne\u2019.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>From the project root directory:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Use \u2013help/-h to view info on the arguments:</p>\n<pre>$ red --help\n</pre>\n<p>The special variables available:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th><strong>line</strong>:</th><td>for the entire line that was matched, without the trailing newline</td>\n</tr>\n<tr><th><strong>g</strong>:</th><td>for groups, which you index to get that match group, as <strong>g[0]</strong> in \u201c(w+) .*\u201d</td>\n</tr>\n<tr><th><strong>ag</strong>:</th><td>for aggregated groups with the <em>-a</em> option, which is a list of all match groups</td>\n</tr>\n<tr><th><strong>d</strong>:</th><td>for the groupdict, which you can index by named group as <strong>d[\u201cfoo\u201d]</strong> in \u201c(?P&lt;foo&gt;w+) .*\u201d</td>\n</tr>\n<tr><th><strong>ad</strong>:</th><td>for the aggregated group dicts, a list of dicts</td>\n</tr>\n</tbody>\n</table>\n<p>Example usage:</p>\n<pre>$ cat test.txt\nfoo 1 bar 2\nfiz 5 baz 10\nfunk 10 bunk 9\nfunk a bunk b\na b c d\naaaaa\nbbbb\ncc\n</pre>\n<p>Use it like grep:</p>\n<pre>$ cat test.txt | red \"\\w+ (\\d+) \\w+ (\\d+)\"\nfoo 1 bar 2\nfiz 5 baz 10\nfunk 10 bunk 9\n</pre>\n<p>It works with path as argument as well, <em>but the path must appear directly after the regex</em> (oddity of argparse).:</p>\n<pre>$ red \"\\w+ (\\d+) \\w+ (\\d+)\" test.txt\n</pre>\n<p>Use it to evaluate Python code on groups stored in variable <strong>g</strong>:</p>\n<pre>$ red \"\\w+ (\\d+) \\w+ (\\d+)\" test.txt -e \"int(g[0]) + int(g[1])\"\n3\n15\n19\n</pre>\n<p>Import an arbitrary library and do absolutely anything:</p>\n<pre>$ red '\\w+ (\\d+) \\w+ (\\d+)' test.txt -i json -e '\"{} =&gt; {}\".format(line, json.dumps(g))'\nfoo 1 bar 2 =&gt; [\"1\", \"2\"]\nfiz 5 baz 10 =&gt; [\"5\", \"10\"]\nfunk 10 bunk 9 =&gt; [\"10\", \"9\"]\n</pre>\n<p>If you want to execute a few python statements before the eval, you can do that as well with <strong>-x</strong>:</p>\n<pre>$ red \"(\\w+) (\\d+).*\" test.txt -x 'x = int(g[1]) ; y = g[0][::-1]' -e '(x, y)'\n(1, 'oof')\n(5, 'zif')\n(10, 'knuf')\n</pre>\n<p>Use it to aggregate across all of stdin, into list <strong>ag</strong>:</p>\n<pre>$ cat test.txt | red \"\\w+ (\\d+) \\w+ (\\d+)\" -a \"sum([int(x[0]) for x in ag])\"\n16\n</pre>\n<p>Aggregate has its own <strong>-X</strong> for an exec before the aggregate too:</p>\n<pre>$ red \"(\\w+) (\\d+).*\" test.txt -X 's = sum(int(g[1]) for g in ag)' -a 's'\n16\n</pre>\n<p>Evaluate on each match, and aggregate against all matches:</p>\n<pre>$ cat test.txt | red \"\\w+ (\\d+) \\w+ (\\d+)\" -a \"sum([int(x[0]) for x in ag])\" -e \"'adding {}'.format(g[0])\"\nadding 1\nadding 5\nadding 10\n16\n</pre>\n<p>You can use named groups as well, stored in variables <strong>d</strong> and aggregated into <strong>ad</strong>:</p>\n<pre>$ cat test.txt | red \"\\w+ (?P&lt;first&gt;\\d+) \\w+ \\d+\" -e \"'first value is {first}'.format(**d)\"\nfirst value is 1\nfirst value is 5\nfirst value is 10\n</pre>\n<p>Even multiline will work, since whatever is passed into <strong>-x</strong> is just <strong>exec</strong>\u2019d:</p>\n<pre>$ red '.*' test.txt -x '\n# if you want multiline, just hit apostrophe and press enter\n# and start typing\nif line.startswith(\"foo\"):\n     print(\"Line started with foo: {}\".format(line))\n'\n\nLine started with foo: foo 1 bar 2\n</pre>\n<p>Get creative!:</p>\n<pre>$ cat urls.txt\nhttps://www.google.com/\nhttp://www.yahoo.com/\nhttp://www.example.com/foo\n\n$ red \"(.*)\" urls.txt -i requests -x 'response = requests.get(line)' -e '[response.status_code, response.content[:20]]'\n[404, '&lt;!doctype html&gt;\\n&lt;htm']\n[200, '&lt;!doctype html&gt;&lt;html']\n[200, '&lt;?xml version=\"1.0\" ']\n\n$ cat somelogfile.log\nINFO: visited http://www.example.com/foo\nERROR: visited https://www.google.com/\nERROR: visited http://www.yahoo.com/\n\n$ cat somelogfile.log | red '(?P&lt;debuglevel&gt;ERROR|INFO): \\S+ (?P&lt;url&gt;.*)' -i requests,collections -x 'response = requests.get(d[\"url\"])' -e '(response.status_code, response.content[0:20])' -a 'collections.Counter([d[\"debuglevel\"] for d in ad]).items()'\n(404, '&lt;!doctype html&gt;\\n&lt;htm')\n(200, '&lt;!doctype html&gt;&lt;html')\n(200, '&lt;?xml version=\"1.0\" ')\n[('INFO', 1), ('ERROR', 2)]\n</pre>\n</div>\n<div id=\"disclaimer\">\n<h2>Disclaimer</h2>\n<p>Code in -e and -a are run through <strong>eval</strong>, so if you paste in code from someone,\nit will run. Just sayin\u2019. Only run code you trust, or have inspected personally.\nThe same goes for any library you import with -i.</p>\n</div>\n<div id=\"release-notes\">\n<h2>Release Notes</h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>0.2.1:</th><td>Added -x for pre-eval exec, added -i for importing libraries, and -X for aggregate exec</td>\n</tr>\n<tr><th>0.2.0:</th><td>Added -i/\u2013import functionality</td>\n</tr>\n<tr><th>0.1.1:</th><td>Path works as CLI arg</td>\n</tr>\n<tr><th>0.1.0:</th><td>Version is available on pypi, with functionality of evaluation and aggregation</td>\n</tr>\n<tr><th>0.0.1:</th><td>Project created</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 4088007, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "94fec31b0e2f06ca73ab7e22058068de", "sha256": "d538c0cccf8bfe01541dca2f091ba0b3b70ddd98f67052fd03d681cac7830f1a"}, "downloads": -1, "filename": "red-0.0.1.tar.gz", "has_sig": false, "md5_digest": "94fec31b0e2f06ca73ab7e22058068de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2531, "upload_time": "2015-09-02T00:53:08", "upload_time_iso_8601": "2015-09-02T00:53:08.974103Z", "url": "https://files.pythonhosted.org/packages/03/65/cb9da3372cf0611d436b5ca096b0bb66656189fcb4b601f136f88294e780/red-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "74e0feb11e36587da2c0c77aa8a52389", "sha256": "31b752ef5b48439c8142b8e708be9172ae21e55b7c932fa2c5f3b9c69bb62d5e"}, "downloads": -1, "filename": "red-0.1.0.tar.gz", "has_sig": false, "md5_digest": "74e0feb11e36587da2c0c77aa8a52389", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3166, "upload_time": "2015-09-02T01:13:14", "upload_time_iso_8601": "2015-09-02T01:13:14.647802Z", "url": "https://files.pythonhosted.org/packages/e4/0e/fbac9d1016887d0ea7ad964d2ff1dd31e94b36e2bbe1a53bd2826a6b8cca/red-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "451537921793e03f6e9fc17daf2a8413", "sha256": "ad28672b75ad7dacdefa7d3bd515267ce7810f94364d2683cde3a52c62b0f85f"}, "downloads": -1, "filename": "red-0.1.1.tar.gz", "has_sig": false, "md5_digest": "451537921793e03f6e9fc17daf2a8413", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3334, "upload_time": "2015-09-02T01:23:01", "upload_time_iso_8601": "2015-09-02T01:23:01.577406Z", "url": "https://files.pythonhosted.org/packages/90/dd/1f0084b1f02c86df3f080d09ca4aaa75d40eebc13bdc0941435a8c0468f5/red-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "06d691f8f7ed749f7b85f2572b5dcbfd", "sha256": "e5d7ab49d8bd4d136de51348ff96b3fa9536a84cc778f7de54169c89b9f58c43"}, "downloads": -1, "filename": "red-0.2.0.tar.gz", "has_sig": false, "md5_digest": "06d691f8f7ed749f7b85f2572b5dcbfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3975, "upload_time": "2015-09-02T06:58:14", "upload_time_iso_8601": "2015-09-02T06:58:14.665138Z", "url": "https://files.pythonhosted.org/packages/43/6b/d5f9a6f18adb85e3d568ebe11b1524619eae537b175aa229ad7269ba1158/red-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "e34132959d8e2139135a62eaa0d60ea7", "sha256": "0e0f6eca313fa60ece003123002d605a631cc783d79ab788694ce28a9f7d3c38"}, "downloads": -1, "filename": "red-0.2.1.tar.gz", "has_sig": false, "md5_digest": "e34132959d8e2139135a62eaa0d60ea7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4804, "upload_time": "2015-09-02T07:30:58", "upload_time_iso_8601": "2015-09-02T07:30:58.533345Z", "url": "https://files.pythonhosted.org/packages/4b/92/96d9154feb59d6fea2197b34fde1b9744370321cfae899f086c4d79db629/red-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "220e9bb27f1e5d5e223e7be5edfec0b9", "sha256": "00133d98f0c9f6e66879d461913643c5a788bb54676971afdb7a1e7ca85f20fc"}, "downloads": -1, "filename": "red-0.2.2.tar.gz", "has_sig": false, "md5_digest": "220e9bb27f1e5d5e223e7be5edfec0b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4947, "upload_time": "2018-07-21T08:00:22", "upload_time_iso_8601": "2018-07-21T08:00:22.481359Z", "url": "https://files.pythonhosted.org/packages/ff/e7/e1277af6e6a9976eb3833a55682735e203aea1ef78123fc9485307849e5e/red-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "220e9bb27f1e5d5e223e7be5edfec0b9", "sha256": "00133d98f0c9f6e66879d461913643c5a788bb54676971afdb7a1e7ca85f20fc"}, "downloads": -1, "filename": "red-0.2.2.tar.gz", "has_sig": false, "md5_digest": "220e9bb27f1e5d5e223e7be5edfec0b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4947, "upload_time": "2018-07-21T08:00:22", "upload_time_iso_8601": "2018-07-21T08:00:22.481359Z", "url": "https://files.pythonhosted.org/packages/ff/e7/e1277af6e6a9976eb3833a55682735e203aea1ef78123fc9485307849e5e/red-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:02 2020"}