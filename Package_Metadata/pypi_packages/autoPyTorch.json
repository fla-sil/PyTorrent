{"info": {"author": "AutoML Freiburg", "author_email": "zimmerl@informatik.uni-freiburg.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Utilities"], "description": "# Auto-PyTorch\n\nCopyright (C) 2019  [AutoML Group Freiburg](http://www.automl.org/)\n\nThis a very early pre-alpha version of our upcoming Auto-PyTorch.\nSo far, Auto-PyTorch supports featurized data (classification, regression) and image data (classification).\n\n## Installation\n\nClone repository\n\n```sh\n$ cd install/path\n$ git clone https://github.com/automl/Auto-PyTorch.git\n$ cd Auto-PyTorch\n```\nIf you want to contribute to this repository switch to our current develop branch\n\n```sh\n$ git checkout develop\n```\n\nInstall pytorch: \nhttps://pytorch.org/\n\nInstall Auto-PyTorch:\n\n```sh\n$ cat requirements.txt | xargs -n 1 -L 1 pip install\n$ python setup.py install\n```\n\n\n## Examples\n\nFor a detailed tutorial, please refer to the jupyter notebook in https://github.com/automl/Auto-PyTorch/tree/master/examples/basics.\n\nIn a nutshell:\n\n```py\nfrom autoPyTorch import AutoNetClassification\n\n# data and metric imports\nimport sklearn.model_selection\nimport sklearn.datasets\nimport sklearn.metrics\nX, y = sklearn.datasets.load_digits(return_X_y=True)\nX_train, X_test, y_train, y_test = \\\n        sklearn.model_selection.train_test_split(X, y, random_state=1)\n\n# running Auto-PyTorch\nautoPyTorch = AutoNetClassification(\"tiny_cs\",  # config preset\n                                    log_level='info',\n                                    max_runtime=300,\n                                    min_budget=30,\n                                    max_budget=90)\n\nautoPyTorch.fit(X_train, y_train, validation_split=0.3)\ny_pred = autoPyTorch.predict(X_test)\n\nprint(\"Accuracy score\", sklearn.metrics.accuracy_score(y_test, y_pred))\n```\n\nMore examples with datasets:\n\n```sh\n$ cd examples/\n\n```\n\n## Configuration\n\nHow to configure Auto-PyTorch for your needs:\n\n```py\n\n# Print all possible configuration options.\nAutoNetClassification().print_help()\n\n# You can use the constructor to configure Auto-PyTorch.\nautoPyTorch = AutoNetClassification(log_level='info', max_runtime=300, min_budget=30, max_budget=90)\n\n# You can overwrite this configuration in each fit call.\nautoPyTorch.fit(X_train, y_train, log_level='debug', max_runtime=900, min_budget=50, max_budget=150)\n\n# You can use presets to configure the config space.\n# Available presets: full_cs, medium_cs (default), tiny_cs.\n# These are defined in autoPyTorch/core/presets.\n# tiny_cs is recommended if you want fast results with few resources.\n# full_cs is recommended if you have many resources and a very high search budget.\nautoPyTorch = AutoNetClassification(\"full_cs\")\n\n# Enable or disable components using the Auto-PyTorch config:\nautoPyTorch = AutoNetClassification(networks=[\"resnet\", \"shapedresnet\", \"mlpnet\", \"shapedmlpnet\"])\n\n# You can take a look at the search space.\n# Each hyperparameter belongs to a node in Auto-PyTorch's ML Pipeline.\n# The names of the hyperparameters are prefixed with the name of the node: NodeName:hyperparameter_name.\n# If a hyperparameter belongs to a component: NodeName:component_name:hyperparameter_name.\n# Call with the same arguments as fit.\nautoPyTorch.get_hyperparameter_search_space(X_train, y_train, validation_split=0.3)\n\n# You can configure the search space of every hyperparameter of every component:\nfrom autoPyTorch import HyperparameterSearchSpaceUpdates\nsearch_space_updates = HyperparameterSearchSpaceUpdates()\n\nsearch_space_updates.append(node_name=\"NetworkSelector\",\n                            hyperparameter=\"shapedresnet:activation\",\n                            value_range=[\"relu\", \"sigmoid\"])\nsearch_space_updates.append(node_name=\"NetworkSelector\",\n                            hyperparameter=\"shapedresnet:blocks_per_group\",\n                            value_range=[2,5],\n                            log=False)\nautoPyTorch = AutoNetClassification(hyperparameter_search_space_updates=search_space_updates)\n```\n\nEnable ensemble building (for featurized data):\n\n```py\nfrom autoPyTorch import AutoNetEnsemble\nautoPyTorchEnsemble = AutoNetEnsemble(AutoNetClassification, \"tiny_cs\", max_runtime=300, min_budget=30, max_budget=90)\n\n```\n\nDisable pynisher if you experience issues when using cuda:\n\n```py\nautoPyTorch = AutoNetClassification(\"tiny_cs\", log_level='info', max_runtime=300, min_budget=30, max_budget=90, cuda=True, use_pynisher=False)\n\n```\n\n## License\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the Apache license 2.0 (please see the LICENSE file).\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nYou should have received a copy of the Apache license 2.0\nalong with this program (see LICENSE file).\n\n## Reference\n\n```\n@incollection{mendoza-automlbook18a,\n  author    = {Hector Mendoza and Aaron Klein and Matthias Feurer and Jost Tobias Springenberg and Matthias Urban and Michael Burkart and Max Dippel and Marius Lindauer and Frank Hutter},\n  title     = {Towards Automatically-Tuned Deep Neural Networks},\n  year      = {2018},\n  month     = dec,\n  editor    = {Hutter, Frank and Kotthoff, Lars and Vanschoren, Joaquin},\n  booktitle = {AutoML: Methods, Sytems, Challenges},\n  publisher = {Springer},\n  chapter   = {7},\n  pages     = {141--156},\n  note      = {To appear.},\n}\n```\n\n**Note**: Previously, the name of the project was AutoNet. Since this was too generic, we changed the name to AutoPyTorch. AutoNet 2.0 in the reference mention above is indeed AutoPyTorch.\n\n\n## Contact\n\nAuto-PyTorch is developed by the [AutoML Group of the University of Freiburg](http://www.automl.org/).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/automl/Auto-PyTorch", "keywords": "machine learning algorithm configuration hyperparameter optimization tuning neural architecture deep learning", "license": "3-clause BSD", "maintainer": "", "maintainer_email": "", "name": "autoPyTorch", "package_url": "https://pypi.org/project/autoPyTorch/", "platform": "Linux", "project_url": "https://pypi.org/project/autoPyTorch/", "project_urls": {"Homepage": "https://github.com/automl/Auto-PyTorch"}, "release_url": "https://pypi.org/project/autoPyTorch/0.0.2/", "requires_dist": ["setuptools", "Cython", "netifaces", "numpy", "pandas", "scipy", "statsmodels", "scikit-learn (>=0.20.0)", "imblearn", "ConfigSpace", "pynisher", "hpbandster", "fasteners", "torch", "torchvision", "tensorboard-logger", "openml"], "requires_python": ">=3", "summary": "Auto-PyTorch searches neural architectures using BO-HB", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Auto-PyTorch</h1>\n<p>Copyright (C) 2019  <a href=\"http://www.automl.org/\" rel=\"nofollow\">AutoML Group Freiburg</a></p>\n<p>This a very early pre-alpha version of our upcoming Auto-PyTorch.\nSo far, Auto-PyTorch supports featurized data (classification, regression) and image data (classification).</p>\n<h2>Installation</h2>\n<p>Clone repository</p>\n<pre>$ <span class=\"nb\">cd</span> install/path\n$ git clone https://github.com/automl/Auto-PyTorch.git\n$ <span class=\"nb\">cd</span> Auto-PyTorch\n</pre>\n<p>If you want to contribute to this repository switch to our current develop branch</p>\n<pre>$ git checkout develop\n</pre>\n<p>Install pytorch:\n<a href=\"https://pytorch.org/\" rel=\"nofollow\">https://pytorch.org/</a></p>\n<p>Install Auto-PyTorch:</p>\n<pre>$ cat requirements.txt <span class=\"p\">|</span> xargs -n <span class=\"m\">1</span> -L <span class=\"m\">1</span> pip install\n$ python setup.py install\n</pre>\n<h2>Examples</h2>\n<p>For a detailed tutorial, please refer to the jupyter notebook in <a href=\"https://github.com/automl/Auto-PyTorch/tree/master/examples/basics\" rel=\"nofollow\">https://github.com/automl/Auto-PyTorch/tree/master/examples/basics</a>.</p>\n<p>In a nutshell:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autoPyTorch</span> <span class=\"kn\">import</span> <span class=\"n\">AutoNetClassification</span>\n\n<span class=\"c1\"># data and metric imports</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn.model_selection</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn.datasets</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sklearn.metrics</span>\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_digits</span><span class=\"p\">(</span><span class=\"n\">return_X_y</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> \\\n        <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">model_selection</span><span class=\"o\">.</span><span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># running Auto-PyTorch</span>\n<span class=\"n\">autoPyTorch</span> <span class=\"o\">=</span> <span class=\"n\">AutoNetClassification</span><span class=\"p\">(</span><span class=\"s2\">\"tiny_cs\"</span><span class=\"p\">,</span>  <span class=\"c1\"># config preset</span>\n                                    <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"s1\">'info'</span><span class=\"p\">,</span>\n                                    <span class=\"n\">max_runtime</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span>\n                                    <span class=\"n\">min_budget</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n                                    <span class=\"n\">max_budget</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n\n<span class=\"n\">autoPyTorch</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">validation_split</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n<span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">autoPyTorch</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Accuracy score\"</span><span class=\"p\">,</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">accuracy_score</span><span class=\"p\">(</span><span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">y_pred</span><span class=\"p\">))</span>\n</pre>\n<p>More examples with datasets:</p>\n<pre>$ <span class=\"nb\">cd</span> examples/\n</pre>\n<h2>Configuration</h2>\n<p>How to configure Auto-PyTorch for your needs:</p>\n<pre><span class=\"c1\"># Print all possible configuration options.</span>\n<span class=\"n\">AutoNetClassification</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">print_help</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># You can use the constructor to configure Auto-PyTorch.</span>\n<span class=\"n\">autoPyTorch</span> <span class=\"o\">=</span> <span class=\"n\">AutoNetClassification</span><span class=\"p\">(</span><span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"s1\">'info'</span><span class=\"p\">,</span> <span class=\"n\">max_runtime</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">min_budget</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">max_budget</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can overwrite this configuration in each fit call.</span>\n<span class=\"n\">autoPyTorch</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"s1\">'debug'</span><span class=\"p\">,</span> <span class=\"n\">max_runtime</span><span class=\"o\">=</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"n\">min_budget</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">max_budget</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can use presets to configure the config space.</span>\n<span class=\"c1\"># Available presets: full_cs, medium_cs (default), tiny_cs.</span>\n<span class=\"c1\"># These are defined in autoPyTorch/core/presets.</span>\n<span class=\"c1\"># tiny_cs is recommended if you want fast results with few resources.</span>\n<span class=\"c1\"># full_cs is recommended if you have many resources and a very high search budget.</span>\n<span class=\"n\">autoPyTorch</span> <span class=\"o\">=</span> <span class=\"n\">AutoNetClassification</span><span class=\"p\">(</span><span class=\"s2\">\"full_cs\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Enable or disable components using the Auto-PyTorch config:</span>\n<span class=\"n\">autoPyTorch</span> <span class=\"o\">=</span> <span class=\"n\">AutoNetClassification</span><span class=\"p\">(</span><span class=\"n\">networks</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"resnet\"</span><span class=\"p\">,</span> <span class=\"s2\">\"shapedresnet\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mlpnet\"</span><span class=\"p\">,</span> <span class=\"s2\">\"shapedmlpnet\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># You can take a look at the search space.</span>\n<span class=\"c1\"># Each hyperparameter belongs to a node in Auto-PyTorch's ML Pipeline.</span>\n<span class=\"c1\"># The names of the hyperparameters are prefixed with the name of the node: NodeName:hyperparameter_name.</span>\n<span class=\"c1\"># If a hyperparameter belongs to a component: NodeName:component_name:hyperparameter_name.</span>\n<span class=\"c1\"># Call with the same arguments as fit.</span>\n<span class=\"n\">autoPyTorch</span><span class=\"o\">.</span><span class=\"n\">get_hyperparameter_search_space</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">validation_split</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># You can configure the search space of every hyperparameter of every component:</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autoPyTorch</span> <span class=\"kn\">import</span> <span class=\"n\">HyperparameterSearchSpaceUpdates</span>\n<span class=\"n\">search_space_updates</span> <span class=\"o\">=</span> <span class=\"n\">HyperparameterSearchSpaceUpdates</span><span class=\"p\">()</span>\n\n<span class=\"n\">search_space_updates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node_name</span><span class=\"o\">=</span><span class=\"s2\">\"NetworkSelector\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">hyperparameter</span><span class=\"o\">=</span><span class=\"s2\">\"shapedresnet:activation\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">value_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"relu\"</span><span class=\"p\">,</span> <span class=\"s2\">\"sigmoid\"</span><span class=\"p\">])</span>\n<span class=\"n\">search_space_updates</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node_name</span><span class=\"o\">=</span><span class=\"s2\">\"NetworkSelector\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">hyperparameter</span><span class=\"o\">=</span><span class=\"s2\">\"shapedresnet:blocks_per_group\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">value_range</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span>\n                            <span class=\"n\">log</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">autoPyTorch</span> <span class=\"o\">=</span> <span class=\"n\">AutoNetClassification</span><span class=\"p\">(</span><span class=\"n\">hyperparameter_search_space_updates</span><span class=\"o\">=</span><span class=\"n\">search_space_updates</span><span class=\"p\">)</span>\n</pre>\n<p>Enable ensemble building (for featurized data):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">autoPyTorch</span> <span class=\"kn\">import</span> <span class=\"n\">AutoNetEnsemble</span>\n<span class=\"n\">autoPyTorchEnsemble</span> <span class=\"o\">=</span> <span class=\"n\">AutoNetEnsemble</span><span class=\"p\">(</span><span class=\"n\">AutoNetClassification</span><span class=\"p\">,</span> <span class=\"s2\">\"tiny_cs\"</span><span class=\"p\">,</span> <span class=\"n\">max_runtime</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">min_budget</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">max_budget</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n</pre>\n<p>Disable pynisher if you experience issues when using cuda:</p>\n<pre><span class=\"n\">autoPyTorch</span> <span class=\"o\">=</span> <span class=\"n\">AutoNetClassification</span><span class=\"p\">(</span><span class=\"s2\">\"tiny_cs\"</span><span class=\"p\">,</span> <span class=\"n\">log_level</span><span class=\"o\">=</span><span class=\"s1\">'info'</span><span class=\"p\">,</span> <span class=\"n\">max_runtime</span><span class=\"o\">=</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"n\">min_budget</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">max_budget</span><span class=\"o\">=</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"n\">cuda</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">use_pynisher</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p>This program is free software: you can redistribute it and/or modify\nit under the terms of the Apache license 2.0 (please see the LICENSE file).</p>\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>\n<p>You should have received a copy of the Apache license 2.0\nalong with this program (see LICENSE file).</p>\n<h2>Reference</h2>\n<pre><code>@incollection{mendoza-automlbook18a,\n  author    = {Hector Mendoza and Aaron Klein and Matthias Feurer and Jost Tobias Springenberg and Matthias Urban and Michael Burkart and Max Dippel and Marius Lindauer and Frank Hutter},\n  title     = {Towards Automatically-Tuned Deep Neural Networks},\n  year      = {2018},\n  month     = dec,\n  editor    = {Hutter, Frank and Kotthoff, Lars and Vanschoren, Joaquin},\n  booktitle = {AutoML: Methods, Sytems, Challenges},\n  publisher = {Springer},\n  chapter   = {7},\n  pages     = {141--156},\n  note      = {To appear.},\n}\n</code></pre>\n<p><strong>Note</strong>: Previously, the name of the project was AutoNet. Since this was too generic, we changed the name to AutoPyTorch. AutoNet 2.0 in the reference mention above is indeed AutoPyTorch.</p>\n<h2>Contact</h2>\n<p>Auto-PyTorch is developed by the <a href=\"http://www.automl.org/\" rel=\"nofollow\">AutoML Group of the University of Freiburg</a>.</p>\n\n          </div>"}, "last_serial": 5976486, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "b7659a9480c3d20f16bab869b98b1d31", "sha256": "7a4176ef4678391f17255470d52205570905c70a6a1c8673d7ff38e9d7ff4a05"}, "downloads": -1, "filename": "autoPyTorch-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b7659a9480c3d20f16bab869b98b1d31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 312235, "upload_time": "2019-10-15T11:49:38", "upload_time_iso_8601": "2019-10-15T11:49:38.869893Z", "url": "https://files.pythonhosted.org/packages/51/1f/b883a924de574ab2478ceb72232a22bc2502f3a472ac1cec62df49ad8e32/autoPyTorch-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f16785c9f8312c246cc4955c331f4db3", "sha256": "ed185e341888324fcf95964ba26af5ba531f4355c1f3b042ca0d2cacbbdb2e33"}, "downloads": -1, "filename": "autoPyTorch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f16785c9f8312c246cc4955c331f4db3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 208440, "upload_time": "2019-10-15T11:49:42", "upload_time_iso_8601": "2019-10-15T11:49:42.180205Z", "url": "https://files.pythonhosted.org/packages/a4/8f/f1b8c1cb2ff3f23569aa957278ae28a6f4215b5e4f993d845ec97038f2f6/autoPyTorch-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7659a9480c3d20f16bab869b98b1d31", "sha256": "7a4176ef4678391f17255470d52205570905c70a6a1c8673d7ff38e9d7ff4a05"}, "downloads": -1, "filename": "autoPyTorch-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b7659a9480c3d20f16bab869b98b1d31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 312235, "upload_time": "2019-10-15T11:49:38", "upload_time_iso_8601": "2019-10-15T11:49:38.869893Z", "url": "https://files.pythonhosted.org/packages/51/1f/b883a924de574ab2478ceb72232a22bc2502f3a472ac1cec62df49ad8e32/autoPyTorch-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f16785c9f8312c246cc4955c331f4db3", "sha256": "ed185e341888324fcf95964ba26af5ba531f4355c1f3b042ca0d2cacbbdb2e33"}, "downloads": -1, "filename": "autoPyTorch-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f16785c9f8312c246cc4955c331f4db3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 208440, "upload_time": "2019-10-15T11:49:42", "upload_time_iso_8601": "2019-10-15T11:49:42.180205Z", "url": "https://files.pythonhosted.org/packages/a4/8f/f1b8c1cb2ff3f23569aa957278ae28a6f4215b5e4f993d845ec97038f2f6/autoPyTorch-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:10 2020"}