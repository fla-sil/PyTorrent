{"info": {"author": "Ever Garc\u00eda", "author_email": "everalfonso.garcia01@estudiant.upf.edu", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://codecov.io/gh/teibit/xarray-events/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/teibit/xarray-events\n    :alt: Code Coverage Status (Codecov)\n\n.. image:: https://readthedocs.org/projects/docs/badge/?version=latest\n    :target: https://xarray-events.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status (RTFD)\n\n.. image:: https://travis-ci.com/teibit/xarray-events.svg?branch=master\n    :target: https://travis-ci.com/teibit/xarray-events\n    :alt: Build Status (Travis CI)\n\n.. image:: https://img.shields.io/github/license/teibit/xarray-events\n    :target: https://github.com/teibit/xarray-events/blob/master/LICENSE.txt\n    :alt: License\n\nxarray-events: An open-source extension of xarray that supports events handling\n*******************************************************************************\n\n**xarray-events** is an open-source API based on **xarray**. It provides\nsophisticated mechanisms to handle *events* easily.\n\nEvents data is something very natural to conceive, yet it's rather infrequent to\nsee native support for it in common data analysis libraries. Our aim is to fill\nthis gap in a very general way, so that scientists from any domain can take\nbenefit from this. We're building all of this on top of **xarray** because\nthis is already a well-established open-source library that provides exciting\nnew ways of handling multi-dimensional labelled data, with applications in a\nwide range of domains of science.\n\nThis library makes it possible to *extend* a **Dataset** by introducing\nevents based on the data. Internally it works as an *accessor* to **xarray**\nthat provides new methods to deal with new data in the form of events and also\nextends the existing ones already provided by it to add compatibility with this\nnew kind of data.\n\nWe hope that this project inspires you to rethink how you currently handle data\nand, if needed, improve it.\n\nExample\n+++++++\n\nAssume we have a **DataFrame** (in a variable called **ds**) of events and a\n**Dataset** (in a variable called **events**) of sports data in such a way that\nthe events are a meaningful complement to the data stored in the **Dataset**.\n\n.. code-block:: python\n\n    events = pd.DataFrame(\n        {\n            'event_type': ['pass', 'goal', 'pass', 'pass'],\n            'start_frame': [1, 175, 251, 376],\n            'end_frame': [174, 250, 375, 500]\n        }\n    )\n\n    ds = xr.Dataset(\n        data_vars={\n            'ball_trajectory': (\n                ['frame', 'cartesian_coords'],\n                np.exp(np.linspace((-6, -8), (3, 2), 500))\n            )\n        },\n        coords={'frame': np.arange(1, 501), 'cartesian_coords': ['x', 'y']},\n        attrs={'match_id': 12, 'resolution_fps': 25, '_events': events}\n    )\n\nWith this API we can do the following:\n\n.. code-block:: python\n\n    ds\n    .events.load(events, {'frame': ('start_frame', 'end_frame')})\n    .events.sel({\n        'frame': range(175, 376),\n        'start_frame': lambda frame: frame >= 175,\n        'end_frame': lambda frame: frame < 376\n    })\n    .events.groupby_events('ball_trajectory')\n    .mean()\n\nThis will:\n\n-   Load the events DataFrame specifying that the columns `start_frame` and\n    `end_frame` define the span of the events as per the Dataset's coordinate\n    `frame`.\n\n-   Perform a selection constraining the frames to be only in the range\n    [175, 375].\n\n-   Group the **DataVariable** `ball_trajectory` by the events.\n\n-   Compute the *mean* of each group.\n\n.. code-block:: python\n\n    <xarray.DataArray 'ball_trajectory' (event_index: 2, cartesian_coords: 2)>\n    array([[0.12144595, 0.02556095],\n           [0.84426861, 0.22346441]])\n    Coordinates:\n      * cartesian_coords  (cartesian_coords) <U1 'x' 'y'\n      * event_index       (event_index) int64 1 2\n\nThis result can be interpreted as the mean 2D position of the ball over the span\nof each event during the frames [175, 375]. This is a very powerful set of\noperations performed via some simple and intuitive function calls. This is the\nbeauty of this API.", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/teibit/xarray-events/archive/v0.2.13.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/teibit/xarray-events", "keywords": "numpy,pandas,xarray,events,python", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "xarray-events", "package_url": "https://pypi.org/project/xarray-events/", "platform": "", "project_url": "https://pypi.org/project/xarray-events/", "project_urls": {"Download": "https://github.com/teibit/xarray-events/archive/v0.2.13.tar.gz", "Homepage": "https://github.com/teibit/xarray-events"}, "release_url": "https://pypi.org/project/xarray-events/0.2.13/", "requires_dist": null, "requires_python": "", "summary": "An open-source API for handling events based on xarray.", "version": "0.2.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://codecov.io/gh/teibit/xarray-events\" rel=\"nofollow\"><img alt=\"Code Coverage Status (Codecov)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e43f79ec97b8301408539514127a2b67b609d91/68747470733a2f2f636f6465636f762e696f2f67682f7465696269742f7861727261792d6576656e74732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://xarray-events.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status (RTFD)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c897f7f94eaa2fe0954c5ac7bbea063de95f039/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646f63732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.com/teibit/xarray-events\" rel=\"nofollow\"><img alt=\"Build Status (Travis CI)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/63b1a1e681503880e743c010cfe1fc8dbfbf78d1/68747470733a2f2f7472617669732d63692e636f6d2f7465696269742f7861727261792d6576656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/teibit/xarray-events/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac2f8c51f11a147da26e841677ce2ee81596d692/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7465696269742f7861727261792d6576656e7473\"></a>\n<div id=\"xarray-events-an-open-source-extension-of-xarray-that-supports-events-handling\">\n<h2>xarray-events: An open-source extension of xarray that supports events handling</h2>\n<p><strong>xarray-events</strong> is an open-source API based on <strong>xarray</strong>. It provides\nsophisticated mechanisms to handle <em>events</em> easily.</p>\n<p>Events data is something very natural to conceive, yet it\u2019s rather infrequent to\nsee native support for it in common data analysis libraries. Our aim is to fill\nthis gap in a very general way, so that scientists from any domain can take\nbenefit from this. We\u2019re building all of this on top of <strong>xarray</strong> because\nthis is already a well-established open-source library that provides exciting\nnew ways of handling multi-dimensional labelled data, with applications in a\nwide range of domains of science.</p>\n<p>This library makes it possible to <em>extend</em> a <strong>Dataset</strong> by introducing\nevents based on the data. Internally it works as an <em>accessor</em> to <strong>xarray</strong>\nthat provides new methods to deal with new data in the form of events and also\nextends the existing ones already provided by it to add compatibility with this\nnew kind of data.</p>\n<p>We hope that this project inspires you to rethink how you currently handle data\nand, if needed, improve it.</p>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Assume we have a <strong>DataFrame</strong> (in a variable called <strong>ds</strong>) of events and a\n<strong>Dataset</strong> (in a variable called <strong>events</strong>) of sports data in such a way that\nthe events are a meaningful complement to the data stored in the <strong>Dataset</strong>.</p>\n<pre><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'event_type'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'pass'</span><span class=\"p\">,</span> <span class=\"s1\">'goal'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">],</span>\n        <span class=\"s1\">'start_frame'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">251</span><span class=\"p\">,</span> <span class=\"mi\">376</span><span class=\"p\">],</span>\n        <span class=\"s1\">'end_frame'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">174</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">375</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">(</span>\n    <span class=\"n\">data_vars</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'ball_trajectory'</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s1\">'frame'</span><span class=\"p\">,</span> <span class=\"s1\">'cartesian_coords'</span><span class=\"p\">],</span>\n            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"mi\">500</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">coords</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'frame'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">501</span><span class=\"p\">),</span> <span class=\"s1\">'cartesian_coords'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"s1\">'y'</span><span class=\"p\">]},</span>\n    <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'match_id'</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"s1\">'resolution_fps'</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"s1\">'_events'</span><span class=\"p\">:</span> <span class=\"n\">events</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p>With this API we can do the following:</p>\n<pre><span class=\"n\">ds</span>\n<span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'frame'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'start_frame'</span><span class=\"p\">,</span> <span class=\"s1\">'end_frame'</span><span class=\"p\">)})</span>\n<span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">sel</span><span class=\"p\">({</span>\n    <span class=\"s1\">'frame'</span><span class=\"p\">:</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">175</span><span class=\"p\">,</span> <span class=\"mi\">376</span><span class=\"p\">),</span>\n    <span class=\"s1\">'start_frame'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">175</span><span class=\"p\">,</span>\n    <span class=\"s1\">'end_frame'</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span> <span class=\"o\">&lt;</span> <span class=\"mi\">376</span>\n<span class=\"p\">})</span>\n<span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">groupby_events</span><span class=\"p\">(</span><span class=\"s1\">'ball_trajectory'</span><span class=\"p\">)</span>\n<span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n</pre>\n<p>This will:</p>\n<ul>\n<li>Load the events DataFrame specifying that the columns <cite>start_frame</cite> and\n<cite>end_frame</cite> define the span of the events as per the Dataset\u2019s coordinate\n<cite>frame</cite>.</li>\n<li>Perform a selection constraining the frames to be only in the range\n[175, 375].</li>\n<li>Group the <strong>DataVariable</strong> <cite>ball_trajectory</cite> by the events.</li>\n<li>Compute the <em>mean</em> of each group.</li>\n</ul>\n<pre><span class=\"o\">&lt;</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">DataArray</span> <span class=\"s1\">'ball_trajectory'</span> <span class=\"p\">(</span><span class=\"n\">event_index</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">cartesian_coords</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.12144595</span><span class=\"p\">,</span> <span class=\"mf\">0.02556095</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"mf\">0.84426861</span><span class=\"p\">,</span> <span class=\"mf\">0.22346441</span><span class=\"p\">]])</span>\n<span class=\"n\">Coordinates</span><span class=\"p\">:</span>\n  <span class=\"o\">*</span> <span class=\"n\">cartesian_coords</span>  <span class=\"p\">(</span><span class=\"n\">cartesian_coords</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span><span class=\"n\">U1</span> <span class=\"s1\">'x'</span> <span class=\"s1\">'y'</span>\n  <span class=\"o\">*</span> <span class=\"n\">event_index</span>       <span class=\"p\">(</span><span class=\"n\">event_index</span><span class=\"p\">)</span> <span class=\"n\">int64</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span>\n</pre>\n<p>This result can be interpreted as the mean 2D position of the ball over the span\nof each event during the frames [175, 375]. This is a very powerful set of\noperations performed via some simple and intuitive function calls. This is the\nbeauty of this API.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6949062, "releases": {"0.2.13": [{"comment_text": "", "digests": {"md5": "45e4164082eb0a78878715e898dd9d29", "sha256": "32e3549dfa0e4d6c62ffa584e38c1b9ed17fab03f5a60ed1f2accf3ada3478eb"}, "downloads": -1, "filename": "xarray-events-0.2.13.tar.gz", "has_sig": false, "md5_digest": "45e4164082eb0a78878715e898dd9d29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13008, "upload_time": "2020-04-04T10:30:06", "upload_time_iso_8601": "2020-04-04T10:30:06.509612Z", "url": "https://files.pythonhosted.org/packages/f7/55/adadf939a733d02b0bfe90bbef4a59edaf96bd87e27e45ff3a3e155d34f7/xarray-events-0.2.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "45e4164082eb0a78878715e898dd9d29", "sha256": "32e3549dfa0e4d6c62ffa584e38c1b9ed17fab03f5a60ed1f2accf3ada3478eb"}, "downloads": -1, "filename": "xarray-events-0.2.13.tar.gz", "has_sig": false, "md5_digest": "45e4164082eb0a78878715e898dd9d29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13008, "upload_time": "2020-04-04T10:30:06", "upload_time_iso_8601": "2020-04-04T10:30:06.509612Z", "url": "https://files.pythonhosted.org/packages/f7/55/adadf939a733d02b0bfe90bbef4a59edaf96bd87e27e45ff3a3e155d34f7/xarray-events-0.2.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:26:22 2020"}