{"info": {"author": "Ken Elkabany", "author_email": "ken@elkabany.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Code Generators"], "description": "# Code Writer [![Latest Version]][PyPI] [![Build Status]][Travis]\n\n[Latest Version]: https://img.shields.io/pypi/v/code-writer.svg\n[PyPI]: https://pypi.org/project/code-writer/\n[Build Status]: https://api.travis-ci.com/braincore/code-writer.svg?branch=master\n[Travis]: https://travis-ci.com/braincore/code-writer\n\nA Python 3 library with convenience functions for generating code in any\nlanguage.\n\nBased on the code generation backend in\n[Stone](http://www.github.com/dropbox/stone) that's used to generate code in\nmany languages: C#, Java, Python, Ruby, Rust, Typescript, and more.\n\n# Why?\n\nYou know all of the pains with code generation (coding, build process,\nmaintenance), but have decided you have no other choice. This library makes\ngenerating code a little bit more manageable.\n\n# Alternatives\n\nIf your code generation needs are simple, consider using a template language\nsuch as [Jinja2](https://github.com/pallets/jinja).\n\n# Install\n\n```bash\npip3 install code-writer\n```\n\n# Usage\n\n## Basics\n\nYou'll need to import `CodeWriter`:\n\n```python\nfrom code_writer import CodeWriter\n```\n\n## Examples\n\nYou probably want to write the output of `render()` to a file, but for\nillustrative purposes we'll print them.\n\n### Hello, world.\n\n```python\ncw = CodeWriter()\ncw.emit('hello,')\nwith cw.indent():\n    cw.emit('world.')\nprint(cw.render())\n```\n\nOutput:\n```\nhello,\n    world.\n```\n\n### Python if statement\n\n```python\ncw = CodeWriter()\ncw.emit('if True:')\nwith cw.indent():\n    cw.emit('print(\"hello, world.\")')\nprint(cw.render())\n```\n\nOutput:\n```python\nif True:\n    print(\"hello, world.\")\n```\n\n### Rust if statement\n\nUse `block()` to create an indented block enclosed by curly braces.\n\n```python\ncw = CodeWriter()\nwith cw.block(before='if true', delim=('{', '}')):\n    cw.emit('println!(\"hello, world.\");')\nprint(cw.render())\n```\n\nOutput:\n```rust\nif true {\n    println!(\"hello, world.\");\n}\n```\n\nYou can also set a default delimiter:\n\n```python\ncw = CodeWriter(default_delim=('{', '}'))\n```\n### Tabs\n\n```python\ncw = CodeWriter(use_tabs=True)\n```\n\n### Indent two spaces\n```python\ncw = CodeWriter(default_dent=2)\n```\n\n### Generate lists\n\n```python\ncw = CodeWriter()\ncw.emit_list([], ('[', ']'), before='let li1 = ', after=';')\ncw.emit_list(['1'], ('[', ']'), before='let li2 = ', after=';')\ncw.emit_list(['1', '2', '3'], ('[', ']'), before='let li3 = ', after=';')\ncw.emit_list(['1', '2', '3'], ('[', ']'), before='let li4 = ', after=';', compact=True)\nprint(cw.render())\n```\n\nOutput:\n```rust\nlet li1 = [];\nlet li2 = [1];\nlet li3 = [\n    1,\n    2,\n    3,\n];\nlet li4 = [1,\n           2,\n           3];\n```\n\n### Generate wrapped text\n\nThis is useful for documentation.\n\n```python\n# Artificially set col width low to show wrapped text\ncw = CodeWriter(default_width=25)\ncw.emit('/**')\ncw.emit_wrapped_text(\n    '@param param1 an explanation of what this argument does.',\n    prefix=' * ',\n    indent_after_first=True,\n)\ncw.emit('*/')\nprint(cw.render())\n```\n\nOutput:\n```java\n/**\n * @param param1 an\n *     explanation of\n *     what this argument\n *     does.\n*/\n```\n\n### Emit a preamble or header\n```python\npreamble = \"\"\"\\\nThis\nis\na\npreamble.\n\"\"\"\ncw = CodeWriter()\ncw.emit_raw(preamble)\nprint(cw.render())\n```\n\nOutput:\n```\nThis\nis\na\npreamble.\n```\n\n### Trim trailing newlines\n\nSometimes you'll want a newline after every iteration of logic, but not for the\nlast iteration.\n\n```python\ncw = CodeWriter()\nwith cw.block(before='if true', delim=('{', '}')):\n    for i in range(3):\n        cw.emit('println!(\"{}\");'.format(i))\n        cw.emit()\nprint(cw.render())\n```\n\nOutput:\n```rust\nif true {\n    println!(\"0\");\n\n    println!(\"1\");\n\n    println!(\"2\");\n\n}\n```\n\nThe gap after the last `println!()` is undesirable. To fix, do this:\n\n```python\ncw = CodeWriter()\nwith cw.block(before='if true', delim=('{', '}')):\n    for i in range(3):\n        cw.emit('println!(\"{}\");'.format(i))\n        cw.emit()\n    cw.trim_last_line_if_empty()\nprint(cw.render())\n```\n\nOutput:\n```rust\nif true {\n    println!(\"0\");\n\n    println!(\"1\");\n\n    println!(\"2\");\n}\n```\n\n### Naming conventions\n\nDepending on your target language, you may need to output names that are\nPascalCase, camelCase, underscore_delimited, or dash-delimited.\n\n```python\nfrom code_writer import fmt_camel, fmt_dashes, fmt_pascal, fmt_underscores\n# The input name can be a mix of formatting. These helpers will aggressively\n# split the word and re-assemble as desired.\ntext = 'a-B-HiHo-merryOh_yes_no_XYZ'\nassert fmt_camel(text) == 'aBHiHoMerryOhYesNoXyz'\nassert fmt_dashes(text) == 'a-b-hi-ho-merry-oh-yes-no-xyz'\nassert fmt_pascal(text) == 'ABHiHoMerryOhYesNoXyz'\nassert fmt_underscores(text) == 'a_b_hi_ho_merry_oh_yes_no_xyz'\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/braincore/code-writer", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "code-writer", "package_url": "https://pypi.org/project/code-writer/", "platform": "", "project_url": "https://pypi.org/project/code-writer/", "project_urls": {"Homepage": "https://www.github.com/braincore/code-writer"}, "release_url": "https://pypi.org/project/code-writer/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Library with convenience functions for generating code.", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Code Writer <a href=\"https://pypi.org/project/code-writer/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22d7e23ee0bb462e580ff7543a5cd7895dd6e5fd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f64652d7772697465722e737667\"></a> <a href=\"https://travis-ci.com/braincore/code-writer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5d77ec3d044f2745ec99b2a7735883e750c3b32/68747470733a2f2f6170692e7472617669732d63692e636f6d2f627261696e636f72652f636f64652d7772697465722e7376673f6272616e63683d6d6173746572\"></a></h1>\n<p>A Python 3 library with convenience functions for generating code in any\nlanguage.</p>\n<p>Based on the code generation backend in\n<a href=\"http://www.github.com/dropbox/stone\" rel=\"nofollow\">Stone</a> that's used to generate code in\nmany languages: C#, Java, Python, Ruby, Rust, Typescript, and more.</p>\n<h1>Why?</h1>\n<p>You know all of the pains with code generation (coding, build process,\nmaintenance), but have decided you have no other choice. This library makes\ngenerating code a little bit more manageable.</p>\n<h1>Alternatives</h1>\n<p>If your code generation needs are simple, consider using a template language\nsuch as <a href=\"https://github.com/pallets/jinja\" rel=\"nofollow\">Jinja2</a>.</p>\n<h1>Install</h1>\n<pre>pip3 install code-writer\n</pre>\n<h1>Usage</h1>\n<h2>Basics</h2>\n<p>You'll need to import <code>CodeWriter</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">code_writer</span> <span class=\"kn\">import</span> <span class=\"n\">CodeWriter</span>\n</pre>\n<h2>Examples</h2>\n<p>You probably want to write the output of <code>render()</code> to a file, but for\nillustrative purposes we'll print them.</p>\n<h3>Hello, world.</h3>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">()</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'hello,'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">():</span>\n    <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'world.'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">())</span>\n</pre>\n<p>Output:</p>\n<pre><code>hello,\n    world.\n</code></pre>\n<h3>Python if statement</h3>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">()</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'if True:'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">indent</span><span class=\"p\">():</span>\n    <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'print(\"hello, world.\")'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">())</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"k\">if</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"hello, world.\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Rust if statement</h3>\n<p>Use <code>block()</code> to create an indented block enclosed by curly braces.</p>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"o\">=</span><span class=\"s1\">'if true'</span><span class=\"p\">,</span> <span class=\"n\">delim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">)):</span>\n    <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'println!(\"hello, world.\");'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">())</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hello, world.\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre>\n<p>You can also set a default delimiter:</p>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">(</span><span class=\"n\">default_delim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">))</span>\n</pre>\n<h3>Tabs</h3>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">(</span><span class=\"n\">use_tabs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Indent two spaces</h3>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">(</span><span class=\"n\">default_dent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<h3>Generate lists</h3>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">()</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit_list</span><span class=\"p\">([],</span> <span class=\"p\">(</span><span class=\"s1\">'['</span><span class=\"p\">,</span> <span class=\"s1\">']'</span><span class=\"p\">),</span> <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"s1\">'let li1 = '</span><span class=\"p\">,</span> <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit_list</span><span class=\"p\">([</span><span class=\"s1\">'1'</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"s1\">'['</span><span class=\"p\">,</span> <span class=\"s1\">']'</span><span class=\"p\">),</span> <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"s1\">'let li2 = '</span><span class=\"p\">,</span> <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit_list</span><span class=\"p\">([</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"s1\">'['</span><span class=\"p\">,</span> <span class=\"s1\">']'</span><span class=\"p\">),</span> <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"s1\">'let li3 = '</span><span class=\"p\">,</span> <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit_list</span><span class=\"p\">([</span><span class=\"s1\">'1'</span><span class=\"p\">,</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span> <span class=\"s1\">'3'</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"s1\">'['</span><span class=\"p\">,</span> <span class=\"s1\">']'</span><span class=\"p\">),</span> <span class=\"n\">before</span><span class=\"o\">=</span><span class=\"s1\">'let li4 = '</span><span class=\"p\">,</span> <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">,</span> <span class=\"n\">compact</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">())</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">li1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">li2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">li3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">li4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n</pre>\n<h3>Generate wrapped text</h3>\n<p>This is useful for documentation.</p>\n<pre><span class=\"c1\"># Artificially set col width low to show wrapped text</span>\n<span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">(</span><span class=\"n\">default_width</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'/**'</span><span class=\"p\">)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit_wrapped_text</span><span class=\"p\">(</span>\n    <span class=\"s1\">'@param param1 an explanation of what this argument does.'</span><span class=\"p\">,</span>\n    <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">' * '</span><span class=\"p\">,</span>\n    <span class=\"n\">indent_after_first</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'*/'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">())</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * @param param1 an</span>\n<span class=\"cm\"> *     explanation of</span>\n<span class=\"cm\"> *     what this argument</span>\n<span class=\"cm\"> *     does.</span>\n<span class=\"cm\">*/</span>\n</pre>\n<h3>Emit a preamble or header</h3>\n<pre><span class=\"n\">preamble</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"</span><span class=\"se\">\\</span>\n<span class=\"s2\">This</span>\n<span class=\"s2\">is</span>\n<span class=\"s2\">a</span>\n<span class=\"s2\">preamble.</span>\n<span class=\"s2\">\"\"\"</span>\n<span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">()</span>\n<span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit_raw</span><span class=\"p\">(</span><span class=\"n\">preamble</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">())</span>\n</pre>\n<p>Output:</p>\n<pre><code>This\nis\na\npreamble.\n</code></pre>\n<h3>Trim trailing newlines</h3>\n<p>Sometimes you'll want a newline after every iteration of logic, but not for the\nlast iteration.</p>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"o\">=</span><span class=\"s1\">'if true'</span><span class=\"p\">,</span> <span class=\"n\">delim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">)):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'println!(\"</span><span class=\"si\">{}</span><span class=\"s1\">\");'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n        <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">())</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre>\n<p>The gap after the last <code>println!()</code> is undesirable. To fix, do this:</p>\n<pre><span class=\"n\">cw</span> <span class=\"o\">=</span> <span class=\"n\">CodeWriter</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"o\">=</span><span class=\"s1\">'if true'</span><span class=\"p\">,</span> <span class=\"n\">delim</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">)):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'println!(\"</span><span class=\"si\">{}</span><span class=\"s1\">\");'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n        <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">()</span>\n    <span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">trim_last_line_if_empty</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cw</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">())</span>\n</pre>\n<p>Output:</p>\n<pre><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"0\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"2\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre>\n<h3>Naming conventions</h3>\n<p>Depending on your target language, you may need to output names that are\nPascalCase, camelCase, underscore_delimited, or dash-delimited.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">code_writer</span> <span class=\"kn\">import</span> <span class=\"n\">fmt_camel</span><span class=\"p\">,</span> <span class=\"n\">fmt_dashes</span><span class=\"p\">,</span> <span class=\"n\">fmt_pascal</span><span class=\"p\">,</span> <span class=\"n\">fmt_underscores</span>\n<span class=\"c1\"># The input name can be a mix of formatting. These helpers will aggressively</span>\n<span class=\"c1\"># split the word and re-assemble as desired.</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'a-B-HiHo-merryOh_yes_no_XYZ'</span>\n<span class=\"k\">assert</span> <span class=\"n\">fmt_camel</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'aBHiHoMerryOhYesNoXyz'</span>\n<span class=\"k\">assert</span> <span class=\"n\">fmt_dashes</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'a-b-hi-ho-merry-oh-yes-no-xyz'</span>\n<span class=\"k\">assert</span> <span class=\"n\">fmt_pascal</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'ABHiHoMerryOhYesNoXyz'</span>\n<span class=\"k\">assert</span> <span class=\"n\">fmt_underscores</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'a_b_hi_ho_merry_oh_yes_no_xyz'</span>\n</pre>\n\n          </div>"}, "last_serial": 5097267, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "eb0759fff18e29f37d83578aace6f039", "sha256": "e1371cd5ed3ef5596ed98b49f00aff596e1e31c751e6be181caa3f427539428c"}, "downloads": -1, "filename": "code_writer-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb0759fff18e29f37d83578aace6f039", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6872, "upload_time": "2019-03-03T12:17:55", "upload_time_iso_8601": "2019-03-03T12:17:55.134018Z", "url": "https://files.pythonhosted.org/packages/1c/a8/d2444886e38810028e8faed23ffc378ae353217825de4ce245b750ab980c/code_writer-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fdc40755fe90e3b43173554b0c9b308", "sha256": "d98df9d8d7eeb0ed6b8ccc96f146ee13a1974939a96b6827b76ee698ddabc03f"}, "downloads": -1, "filename": "code-writer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3fdc40755fe90e3b43173554b0c9b308", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7490, "upload_time": "2019-03-03T12:17:57", "upload_time_iso_8601": "2019-03-03T12:17:57.516016Z", "url": "https://files.pythonhosted.org/packages/59/70/64a5da124622b77d2ed05f63adf3d3e568b4ae38562969e1c32b601382e8/code-writer-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a14dd8dc68ea751a6d65a8e1ce36f3f6", "sha256": "c59449327823992e86b8d16c5c4dbdb532500e0a738956fe5d7451bca137656a"}, "downloads": -1, "filename": "code_writer-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a14dd8dc68ea751a6d65a8e1ce36f3f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6874, "upload_time": "2019-03-03T12:22:23", "upload_time_iso_8601": "2019-03-03T12:22:23.646348Z", "url": "https://files.pythonhosted.org/packages/7d/60/721b39768f3a2be0043994b0baa6f1fa2c74c37dbfd73142716098a77bc0/code_writer-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40dc30b07ef37cfb13cbeb20e41df0ff", "sha256": "1e68433056c4569e12bed41ee539441c5b4af9ed76a601250f8e261a1a5fc9fe"}, "downloads": -1, "filename": "code-writer-1.0.1.tar.gz", "has_sig": false, "md5_digest": "40dc30b07ef37cfb13cbeb20e41df0ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7494, "upload_time": "2019-03-03T12:22:26", "upload_time_iso_8601": "2019-03-03T12:22:26.807601Z", "url": "https://files.pythonhosted.org/packages/b7/da/c9e48608319fe85f7ea93bb1d41c94a71fe6c656acfb818313dfe6429d7a/code-writer-1.0.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "93fb03995af5756ce8e5baa6db3401bc", "sha256": "65bbf4616cd4f206a2e3fc5a9933a002d053d60ebdcc1dac66acc1a58cddd6b8"}, "downloads": -1, "filename": "code_writer-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "93fb03995af5756ce8e5baa6db3401bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7209, "upload_time": "2019-04-04T13:21:18", "upload_time_iso_8601": "2019-04-04T13:21:18.250442Z", "url": "https://files.pythonhosted.org/packages/e3/30/68b4bb1593aad99b0f61d5f727eca2fcfe1845332068d3be9daeaad3535f/code_writer-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e0e07f0c215537eb4bef76e675fcff3", "sha256": "485260d0444707876596c499bd9b1ef9a11dc720d741ac57c884216de9fa3f40"}, "downloads": -1, "filename": "code-writer-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8e0e07f0c215537eb4bef76e675fcff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7798, "upload_time": "2019-04-04T13:21:21", "upload_time_iso_8601": "2019-04-04T13:21:21.775126Z", "url": "https://files.pythonhosted.org/packages/0b/82/36e1ed68464bfffed0febe71567547dfb86e7b9528491f54d6722a9133a7/code-writer-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "93fb03995af5756ce8e5baa6db3401bc", "sha256": "65bbf4616cd4f206a2e3fc5a9933a002d053d60ebdcc1dac66acc1a58cddd6b8"}, "downloads": -1, "filename": "code_writer-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "93fb03995af5756ce8e5baa6db3401bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7209, "upload_time": "2019-04-04T13:21:18", "upload_time_iso_8601": "2019-04-04T13:21:18.250442Z", "url": "https://files.pythonhosted.org/packages/e3/30/68b4bb1593aad99b0f61d5f727eca2fcfe1845332068d3be9daeaad3535f/code_writer-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e0e07f0c215537eb4bef76e675fcff3", "sha256": "485260d0444707876596c499bd9b1ef9a11dc720d741ac57c884216de9fa3f40"}, "downloads": -1, "filename": "code-writer-1.1.1.tar.gz", "has_sig": false, "md5_digest": "8e0e07f0c215537eb4bef76e675fcff3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7798, "upload_time": "2019-04-04T13:21:21", "upload_time_iso_8601": "2019-04-04T13:21:21.775126Z", "url": "https://files.pythonhosted.org/packages/0b/82/36e1ed68464bfffed0febe71567547dfb86e7b9528491f54d6722a9133a7/code-writer-1.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:13 2020"}