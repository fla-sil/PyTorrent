{"info": {"author": "Maciej J Mikulski", "author_email": "maciej.mikulski.jr@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "# `Horology`\n\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/mjmikulski/horology.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/mjmikulski/horology/context:python)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/mjmikulski/horology.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/mjmikulski/horology/alerts/)\n[![Downloads](https://pepy.tech/badge/horology/month)](https://pepy.tech/project/horology/month)\n[![PyPI version](https://badge.fury.io/py/horology.svg)](https://badge.fury.io/py/horology)\n\n[![CircleCI](https://circleci.com/gh/mjmikulski/horology/tree/master.svg?style=svg)](https://circleci.com/gh/mjmikulski/horology/tree/master)\n\nConveniently measures the time of your loops, contexts and functions.\n\n![](hourglass.jpg \"Photo by Mike from Pexels\")\n\n\n\n## Instalation\nSimply:\n```\npip install horology\n```\n\nTested with python 3.6, 3.7 and 3.8.\n\n## Usage\nThe following 3 tools will let you measure practically any part of your Python code.\n\n### Timing an iterable (list, tuple, generator, etc)\n#### Quick example\n```python\nfrom horology import Timed\nanimals = ['cat', 'dog', 'crocodile']\n\nfor x in Timed(animals):\n    feed(x)\n```\nResult:\n```\niteration    1: 12.00 s\niteration    2: 8.00 s\niteration    3: 100.00 s\n\ntotal 3 iterations in 120.00 s\nmin/median/max: 8.00/12.00/100.00 s\naverage (std): 40.00 (52.00) s\n\n```\n\n#### More cool stuff:\nYou can specify where (if at all) you want each iteration and summary to be printed, eg.:\n```python\nfor x in Timed(animals, unit='ms', \n               iteration_print_fn=logger.debug, \n               summary_print_fn=logger.info):\n    feed(x)\n```\n\n\n### Timing a function with a `@timed` decorator\n#### Quick example\n```python\nfrom horology import timed\n\n@timed\ndef foo():\n    pass\n```\nResult:\n```\n>>> foo()\nfoo: 7.12 ms\n```\n\n#### More cool stuff:\nPersonalize time unit and name\n```python\n@timed(unit='s', name='Processing took ')\ndef bar():\n    pass\n```\nResult:\n```\n>>> bar()\nProcessing took 0.18 s\n```\n\n\n### Timing part of code with a `Timing` context\n#### Quick example\nJust wrap your code using a `with` statement\n```python\nfrom horology import Timing\n\nwith Timing(name='Important calculations: '):\n    pass\n```\nResult:\n```\nImportant calculations: 12.43 s\n```\n\n#### More cool stuff:\nYou can suppress default printing and directly use measured time (also within context)\n```python\nwith Timing(print_fn=None) as t:\n    pass\n\nmake_use_of(t.interval)\n```\n\n\n## Time units\nTime units are by default automatically adjusted, for example you will see\n`foo: 7.12 ms` rather than `foo: 0.007 s`. If you don't like it, \nyou can override this by setting the `unit` argument with one of these names: \n`['ns', 'us', 'ms', 's', 'min', 'h', 'd']`.\n\n\n## Contributions \nContributions are welcomed, see [contribution guide](.github/contributing.md).\n\n\n\n## Internals\nHorology internally measures time with `perf_counter` which provides the *highest available resolution,*\n see [docs](https://docs.python.org/3/library/time.html#time.perf_counter).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mjmikulski/horology", "keywords": "timing profiling measure time complexity duration optimization", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "horology", "package_url": "https://pypi.org/project/horology/", "platform": "", "project_url": "https://pypi.org/project/horology/", "project_urls": {"Homepage": "https://github.com/mjmikulski/horology"}, "release_url": "https://pypi.org/project/horology/1.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "measure time conveniently", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>Horology</code></h1>\n<p><a href=\"https://lgtm.com/projects/g/mjmikulski/horology/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c40a6674116ddfe2b61fb923a4d00f931e648ca/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f6d6a6d696b756c736b692f686f726f6c6f67792e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a>\n<a href=\"https://lgtm.com/projects/g/mjmikulski/horology/alerts/\" rel=\"nofollow\"><img alt=\"Total alerts\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd962c63fe9a1762a29feaa5589a6ebbd4d2ee93/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f672f6d6a6d696b756c736b692f686f726f6c6f67792e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a>\n<a href=\"https://pepy.tech/project/horology/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea4d0c5dca07c72d21ae9bef2121874d0f69cea9/68747470733a2f2f706570792e746563682f62616467652f686f726f6c6f67792f6d6f6e7468\"></a>\n<a href=\"https://badge.fury.io/py/horology\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/084c5f31ff83c8dcdac0dc147e644cb664b13d84/68747470733a2f2f62616467652e667572792e696f2f70792f686f726f6c6f67792e737667\"></a></p>\n<p><a href=\"https://circleci.com/gh/mjmikulski/horology/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f564d5d3decf06165a22cf52e8cf0238601e993/68747470733a2f2f636972636c6563692e636f6d2f67682f6d6a6d696b756c736b692f686f726f6c6f67792f747265652f6d61737465722e7376673f7374796c653d737667\"></a></p>\n<p>Conveniently measures the time of your loops, contexts and functions.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77e97d5676869517b7fbec7a4e4e24759c1ab824/686f7572676c6173732e6a7067\"></p>\n<h2>Instalation</h2>\n<p>Simply:</p>\n<pre><code>pip install horology\n</code></pre>\n<p>Tested with python 3.6, 3.7 and 3.8.</p>\n<h2>Usage</h2>\n<p>The following 3 tools will let you measure practically any part of your Python code.</p>\n<h3>Timing an iterable (list, tuple, generator, etc)</h3>\n<h4>Quick example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">horology</span> <span class=\"kn\">import</span> <span class=\"n\">Timed</span>\n<span class=\"n\">animals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'cat'</span><span class=\"p\">,</span> <span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'crocodile'</span><span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">Timed</span><span class=\"p\">(</span><span class=\"n\">animals</span><span class=\"p\">):</span>\n    <span class=\"n\">feed</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p>Result:</p>\n<pre><code>iteration    1: 12.00 s\niteration    2: 8.00 s\niteration    3: 100.00 s\n\ntotal 3 iterations in 120.00 s\nmin/median/max: 8.00/12.00/100.00 s\naverage (std): 40.00 (52.00) s\n\n</code></pre>\n<h4>More cool stuff:</h4>\n<p>You can specify where (if at all) you want each iteration and summary to be printed, eg.:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">Timed</span><span class=\"p\">(</span><span class=\"n\">animals</span><span class=\"p\">,</span> <span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">'ms'</span><span class=\"p\">,</span> \n               <span class=\"n\">iteration_print_fn</span><span class=\"o\">=</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">,</span> \n               <span class=\"n\">summary_print_fn</span><span class=\"o\">=</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">):</span>\n    <span class=\"n\">feed</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<h3>Timing a function with a <code>@timed</code> decorator</h3>\n<h4>Quick example</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">horology</span> <span class=\"kn\">import</span> <span class=\"n\">timed</span>\n\n<span class=\"nd\">@timed</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Result:</p>\n<pre><code>&gt;&gt;&gt; foo()\nfoo: 7.12 ms\n</code></pre>\n<h4>More cool stuff:</h4>\n<p>Personalize time unit and name</p>\n<pre><span class=\"nd\">@timed</span><span class=\"p\">(</span><span class=\"n\">unit</span><span class=\"o\">=</span><span class=\"s1\">'s'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Processing took '</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Result:</p>\n<pre><code>&gt;&gt;&gt; bar()\nProcessing took 0.18 s\n</code></pre>\n<h3>Timing part of code with a <code>Timing</code> context</h3>\n<h4>Quick example</h4>\n<p>Just wrap your code using a <code>with</code> statement</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">horology</span> <span class=\"kn\">import</span> <span class=\"n\">Timing</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Timing</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Important calculations: '</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Result:</p>\n<pre><code>Important calculations: 12.43 s\n</code></pre>\n<h4>More cool stuff:</h4>\n<p>You can suppress default printing and directly use measured time (also within context)</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Timing</span><span class=\"p\">(</span><span class=\"n\">print_fn</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">make_use_of</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"p\">)</span>\n</pre>\n<h2>Time units</h2>\n<p>Time units are by default automatically adjusted, for example you will see\n<code>foo: 7.12 ms</code> rather than <code>foo: 0.007 s</code>. If you don't like it,\nyou can override this by setting the <code>unit</code> argument with one of these names:\n<code>['ns', 'us', 'ms', 's', 'min', 'h', 'd']</code>.</p>\n<h2>Contributions</h2>\n<p>Contributions are welcomed, see <a href=\".github/contributing.md\" rel=\"nofollow\">contribution guide</a>.</p>\n<h2>Internals</h2>\n<p>Horology internally measures time with <code>perf_counter</code> which provides the <em>highest available resolution,</em>\nsee <a href=\"https://docs.python.org/3/library/time.html#time.perf_counter\" rel=\"nofollow\">docs</a>.</p>\n\n          </div>"}, "last_serial": 6455026, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f5af8d551ce35325a476c02aadaf9065", "sha256": "ea2d4425635756eb97278e11fc4ff407f2e40c8b9874b8467943e1a0a67c5811"}, "downloads": -1, "filename": "horology-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f5af8d551ce35325a476c02aadaf9065", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6170, "upload_time": "2019-12-07T21:27:00", "upload_time_iso_8601": "2019-12-07T21:27:00.683430Z", "url": "https://files.pythonhosted.org/packages/86/3c/cf6b81abe0f77310f7cf743e7c1599ccb5f80ca2e01341151365e67dc75b/horology-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afbae28268f58495ecc75bbc0f044f38", "sha256": "1ba5a1832f26096f04abd492e5a753b0196372de687ffa4928459d5acca0c8a6"}, "downloads": -1, "filename": "horology-1.0.0.tar.gz", "has_sig": false, "md5_digest": "afbae28268f58495ecc75bbc0f044f38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4328, "upload_time": "2019-12-07T21:27:03", "upload_time_iso_8601": "2019-12-07T21:27:03.015880Z", "url": "https://files.pythonhosted.org/packages/5a/b4/12f91155e6241b754345c76f5db934cfb6aa96d33c5f1e9bb731152bd296/horology-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6f5189e677a099543c34546f446990d2", "sha256": "355101d7d998fe3bef307a7659d803f82ed2f26c7d62edd16c949f3596375361"}, "downloads": -1, "filename": "horology-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f5189e677a099543c34546f446990d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6828, "upload_time": "2020-01-14T22:31:45", "upload_time_iso_8601": "2020-01-14T22:31:45.977245Z", "url": "https://files.pythonhosted.org/packages/78/53/5e106ba0476308bdce7faf6ae6e1be19a8dea1137dd280163ba0192edf15/horology-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84ed09cf4ad13cf3ee0ab5ebc1e4aa22", "sha256": "ba0383eec2d46f8aef06ad73c74e3b3a95b678223645e3f58ac87bde54b357e4"}, "downloads": -1, "filename": "horology-1.1.0.tar.gz", "has_sig": false, "md5_digest": "84ed09cf4ad13cf3ee0ab5ebc1e4aa22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4959, "upload_time": "2020-01-14T22:31:48", "upload_time_iso_8601": "2020-01-14T22:31:48.124991Z", "url": "https://files.pythonhosted.org/packages/ee/5d/5798113f24f9753cf450b782644a9bd6590448dec74d56b65f92c37953f9/horology-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6f5189e677a099543c34546f446990d2", "sha256": "355101d7d998fe3bef307a7659d803f82ed2f26c7d62edd16c949f3596375361"}, "downloads": -1, "filename": "horology-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6f5189e677a099543c34546f446990d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6828, "upload_time": "2020-01-14T22:31:45", "upload_time_iso_8601": "2020-01-14T22:31:45.977245Z", "url": "https://files.pythonhosted.org/packages/78/53/5e106ba0476308bdce7faf6ae6e1be19a8dea1137dd280163ba0192edf15/horology-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84ed09cf4ad13cf3ee0ab5ebc1e4aa22", "sha256": "ba0383eec2d46f8aef06ad73c74e3b3a95b678223645e3f58ac87bde54b357e4"}, "downloads": -1, "filename": "horology-1.1.0.tar.gz", "has_sig": false, "md5_digest": "84ed09cf4ad13cf3ee0ab5ebc1e4aa22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4959, "upload_time": "2020-01-14T22:31:48", "upload_time_iso_8601": "2020-01-14T22:31:48.124991Z", "url": "https://files.pythonhosted.org/packages/ee/5d/5798113f24f9753cf450b782644a9bd6590448dec74d56b65f92c37953f9/horology-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:35 2020"}