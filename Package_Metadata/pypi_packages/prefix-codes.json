{"info": {"author": "Luca Cappelletti", "author_email": "cappelletti.luca94@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "prefix_codes\n=========================================================================================\n|travis| |sonar_quality| |sonar_maintainability| |codacy| |code_climate_maintainability| |pip| |downloads|\n\nPython package implementing a number of prefix codes as strings for educational purposes alongside some utilities.\n\nHow do I install this package?\n----------------------------------------------\nAs usual, just download it using pip:\n\n.. code:: shell\n\n    pip install prefix_codes\n\nTests Coverage\n----------------------------------------------\nSince some software handling coverages sometime get slightly different results, here's three of them:\n\n|coveralls| |sonar_coverage| |code_climate_coverage|\n\nAvailable codes\n----------------------------------------------\nThe following codes are available as submodules (they are also installable by themselves) or imported.\n\nIt should be noted that some of the following codes are not prefix codes, but are still important codes.\n\n- `Unary coding <https://github.com/LucaCappelletti94/unary_coding>`_.\n- `Reduced binary encoding <https://github.com/LucaCappelletti94/reduced_binary_coding>`_.\n- `Minimal binary encoding <https://github.com/LucaCappelletti94/minimal_binary_coding>`_.\n- `Gamma coding <https://github.com/LucaCappelletti94/gamma_coding>`_.\n- `Delta coding <https://github.com/LucaCappelletti94/delta_coding>`_.\n- `Omega coding <https://github.com/LucaCappelletti94/omega_coding>`_.\n- `Interpolative coding <https://github.com/LucaCappelletti94/interpolative_coding>`_.\n- `Nibble e Byte coding <https://github.com/LucaCappelletti94/nibble_coding>`_.\n- `Truncated binary encoding <https://github.com/LucaCappelletti94/truncated_binary_encoding>`_.\n- `Golomb coding <https://github.com/LucaCappelletti94/golomb_coding>`_.\n- `Levenshtein coding <https://github.com/LucaCappelletti94/levenshtein_coding>`_.\n\nUsage examples\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThe following codes are available and readily importable into your project:\n\n.. code:: python\n\n    from prefix_codes import unary, inverted_unary\n    from prefix_codes import gamma_coding\n    from prefix_codes import delta_coding\n    from prefix_codes import omega_coding, decode_omega_coding\n    from prefix_codes import levenshtein_coding, decode_levenshtein_coding\n    from prefix_codes import truncated_binary_encoding\n    from prefix_codes import reduced_binary_coding\n    from prefix_codes import minimal_binary_coding\n    from prefix_codes import interpolative_coding\n    from prefix_codes import nibble_coding, byte_coding\n    from prefix_codes import golomb_coding, optimal_golomb_coding, bernoulli_golomb_coding\n\n\nAvailable utilities\n----------------------------------------------\nTwo utilities are available, one to determine if a given code is a prefix code and a second one, based on the `Kraft-McMillan inequality <https://en.wikipedia.org/wiki/Kraft%E2%80%93McMillan_inequality>`_, to determine if a given code is complete.\n\nIt should be noted that the second utility fails when the code's words are quite long for float errors.\n\nUsage examples\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from prefix_codes import is_prefix_code, is_complete_prefix_code\n    from prefix_codes import unary, interpolative_coding\n\n    numbers = list(range(100))\n    unary_code = unary(numbers)\n    interpolative_code = interpolative_coding(numbers, 0, 100)\n    is_prefix_code(unary_code) # True\n    is_prefix_code(interpolative_code) # False\n    is_complete_prefix_code(unary_code) # True\n    is_complete_prefix_code(interpolative_code) # False\n\n\nElias-Fano semi-succint data structure\n----------------------------------------------\nAn educational version of `Elias-Fano semi-succint data structure <https://github.com/LucaCappelletti94/elias_fano>`_ implemented using the codes above is also available.\n\n\n.. |travis| image:: https://travis-ci.org/LucaCappelletti94/prefix_codes.png\n   :target: https://travis-ci.org/LucaCappelletti94/prefix_codes\n   :alt: Travis CI build\n\n.. |sonar_quality| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_prefix_codes&metric=alert_status\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_prefix_codes\n    :alt: SonarCloud Quality\n\n.. |sonar_maintainability| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_prefix_codes&metric=sqale_rating\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_prefix_codes\n    :alt: SonarCloud Maintainability\n\n.. |sonar_coverage| image:: https://sonarcloud.io/api/project_badges/measure?project=LucaCappelletti94_prefix_codes&metric=coverage\n    :target: https://sonarcloud.io/dashboard/index/LucaCappelletti94_prefix_codes\n    :alt: SonarCloud Coverage\n\n.. |coveralls| image:: https://coveralls.io/repos/github/LucaCappelletti94/prefix_codes/badge.svg?branch=master\n    :target: https://coveralls.io/github/LucaCappelletti94/prefix_codes?branch=master\n    :alt: Coveralls Coverage\n\n.. |pip| image:: https://badge.fury.io/py/prefix-codes.svg\n    :target: https://badge.fury.io/py/prefix-codes\n    :alt: Pypi project\n\n.. |downloads| image:: https://pepy.tech/badge/prefix-codes\n    :target: https://pepy.tech/badge/prefix-codes\n    :alt: Pypi total project downloads \n\n.. |codacy|  image:: https://api.codacy.com/project/badge/Grade/9d55d604f31e4f50b5b79b6c96b66541\n    :target: https://www.codacy.com/manual/LucaCappelletti94/prefix_codes?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=LucaCappelletti94/prefix_codes&amp;utm_campaign=Badge_Grade\n    :alt: Codacy Maintainability\n\n.. |code_climate_maintainability| image:: https://api.codeclimate.com/v1/badges/e53f3df9110281278219/maintainability\n    :target: https://codeclimate.com/github/LucaCappelletti94/prefix_codes/maintainability\n    :alt: Maintainability\n\n.. |code_climate_coverage| image:: https://api.codeclimate.com/v1/badges/e53f3df9110281278219/test_coverage\n    :target: https://codeclimate.com/github/LucaCappelletti94/prefix_codes/test_coverage\n    :alt: Code Climate Coverate", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/LucaCappelletti94/prefix_codes", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "prefix-codes", "package_url": "https://pypi.org/project/prefix-codes/", "platform": "", "project_url": "https://pypi.org/project/prefix-codes/", "project_urls": {"Homepage": "https://github.com/LucaCappelletti94/prefix_codes"}, "release_url": "https://pypi.org/project/prefix-codes/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Python package implementing a number of prefix codes alongside their utilities.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/LucaCappelletti94/prefix_codes\" rel=\"nofollow\"><img alt=\"Travis CI build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55a85df128838202373b9066d87b221ab454ff85/68747470733a2f2f7472617669732d63692e6f72672f4c75636143617070656c6c6574746939342f7072656669785f636f6465732e706e67\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_prefix_codes\" rel=\"nofollow\"><img alt=\"SonarCloud Quality\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1849ac31c4757552f8cd9dd12003d1f5f909cb62/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f7072656669785f636f646573266d65747269633d616c6572745f737461747573\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_prefix_codes\" rel=\"nofollow\"><img alt=\"SonarCloud Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e72940218574fb54221fffef1d0af64b4d063a5d/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f7072656669785f636f646573266d65747269633d7371616c655f726174696e67\"></a> <a href=\"https://www.codacy.com/manual/LucaCappelletti94/prefix_codes?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=LucaCappelletti94/prefix_codes&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9de7a5f9de861994ce6508cf449cc5a9e2106e2/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3964353564363034663331653466353062356237396236633936623636353431\"></a> <a href=\"https://codeclimate.com/github/LucaCappelletti94/prefix_codes/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d358a07e8b1583b59e674458e137cc365c7ac3e/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f65353366336466393131303238313237383231392f6d61696e7461696e6162696c697479\"></a> <a href=\"https://badge.fury.io/py/prefix-codes\" rel=\"nofollow\"><img alt=\"Pypi project\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12ddb28fc07673d0925ec22bd41f99d10c8de3cc/68747470733a2f2f62616467652e667572792e696f2f70792f7072656669782d636f6465732e737667\"></a> <a href=\"https://pepy.tech/badge/prefix-codes\" rel=\"nofollow\"><img alt=\"Pypi total project downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a3954ace2b4f37fdfa2919a7495ea9955ac0c47/68747470733a2f2f706570792e746563682f62616467652f7072656669782d636f646573\"></a></p>\n<p>Python package implementing a number of prefix codes as strings for educational purposes alongside some utilities.</p>\n<div id=\"how-do-i-install-this-package\">\n<h2>How do I install this package?</h2>\n<p>As usual, just download it using pip:</p>\n<pre>pip install prefix_codes\n</pre>\n</div>\n<div id=\"tests-coverage\">\n<h2>Tests Coverage</h2>\n<p>Since some software handling coverages sometime get slightly different results, here\u2019s three of them:</p>\n<p><a href=\"https://coveralls.io/github/LucaCappelletti94/prefix_codes?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46edaceb6b81cecbf1693569d0a59d3d9ed755dc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4c75636143617070656c6c6574746939342f7072656669785f636f6465732f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://sonarcloud.io/dashboard/index/LucaCappelletti94_prefix_codes\" rel=\"nofollow\"><img alt=\"SonarCloud Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a84bce6b9dd8de4bee801c6097026c8842b3d419/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c75636143617070656c6c6574746939345f7072656669785f636f646573266d65747269633d636f766572616765\"></a> <a href=\"https://codeclimate.com/github/LucaCappelletti94/prefix_codes/test_coverage\" rel=\"nofollow\"><img alt=\"Code Climate Coverate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/350068837bc65544163ebbfc893bfc12820b59ec/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f65353366336466393131303238313237383231392f746573745f636f766572616765\"></a></p>\n</div>\n<div id=\"available-codes\">\n<h2>Available codes</h2>\n<p>The following codes are available as submodules (they are also installable by themselves) or imported.</p>\n<p>It should be noted that some of the following codes are not prefix codes, but are still important codes.</p>\n<ul>\n<li><a href=\"https://github.com/LucaCappelletti94/unary_coding\" rel=\"nofollow\">Unary coding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/reduced_binary_coding\" rel=\"nofollow\">Reduced binary encoding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/minimal_binary_coding\" rel=\"nofollow\">Minimal binary encoding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/gamma_coding\" rel=\"nofollow\">Gamma coding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/delta_coding\" rel=\"nofollow\">Delta coding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/omega_coding\" rel=\"nofollow\">Omega coding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/interpolative_coding\" rel=\"nofollow\">Interpolative coding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/nibble_coding\" rel=\"nofollow\">Nibble e Byte coding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/truncated_binary_encoding\" rel=\"nofollow\">Truncated binary encoding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/golomb_coding\" rel=\"nofollow\">Golomb coding</a>.</li>\n<li><a href=\"https://github.com/LucaCappelletti94/levenshtein_coding\" rel=\"nofollow\">Levenshtein coding</a>.</li>\n</ul>\n<div id=\"usage-examples\">\n<h3>Usage examples</h3>\n<p>The following codes are available and readily importable into your project:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">unary</span><span class=\"p\">,</span> <span class=\"n\">inverted_unary</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">gamma_coding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">delta_coding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">omega_coding</span><span class=\"p\">,</span> <span class=\"n\">decode_omega_coding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">levenshtein_coding</span><span class=\"p\">,</span> <span class=\"n\">decode_levenshtein_coding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">truncated_binary_encoding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">reduced_binary_coding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">minimal_binary_coding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">interpolative_coding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">nibble_coding</span><span class=\"p\">,</span> <span class=\"n\">byte_coding</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">golomb_coding</span><span class=\"p\">,</span> <span class=\"n\">optimal_golomb_coding</span><span class=\"p\">,</span> <span class=\"n\">bernoulli_golomb_coding</span>\n</pre>\n</div>\n</div>\n<div id=\"available-utilities\">\n<h2>Available utilities</h2>\n<p>Two utilities are available, one to determine if a given code is a prefix code and a second one, based on the <a href=\"https://en.wikipedia.org/wiki/Kraft%E2%80%93McMillan_inequality\" rel=\"nofollow\">Kraft-McMillan inequality</a>, to determine if a given code is complete.</p>\n<p>It should be noted that the second utility fails when the code\u2019s words are quite long for float errors.</p>\n<div id=\"id1\">\n<h3>Usage examples</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">is_prefix_code</span><span class=\"p\">,</span> <span class=\"n\">is_complete_prefix_code</span>\n<span class=\"kn\">from</span> <span class=\"nn\">prefix_codes</span> <span class=\"kn\">import</span> <span class=\"n\">unary</span><span class=\"p\">,</span> <span class=\"n\">interpolative_coding</span>\n\n<span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"n\">unary_code</span> <span class=\"o\">=</span> <span class=\"n\">unary</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n<span class=\"n\">interpolative_code</span> <span class=\"o\">=</span> <span class=\"n\">interpolative_coding</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">is_prefix_code</span><span class=\"p\">(</span><span class=\"n\">unary_code</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n<span class=\"n\">is_prefix_code</span><span class=\"p\">(</span><span class=\"n\">interpolative_code</span><span class=\"p\">)</span> <span class=\"c1\"># False</span>\n<span class=\"n\">is_complete_prefix_code</span><span class=\"p\">(</span><span class=\"n\">unary_code</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n<span class=\"n\">is_complete_prefix_code</span><span class=\"p\">(</span><span class=\"n\">interpolative_code</span><span class=\"p\">)</span> <span class=\"c1\"># False</span>\n</pre>\n</div>\n</div>\n<div id=\"elias-fano-semi-succint-data-structure\">\n<h2>Elias-Fano semi-succint data structure</h2>\n<p>An educational version of <a href=\"https://github.com/LucaCappelletti94/elias_fano\" rel=\"nofollow\">Elias-Fano semi-succint data structure</a> implemented using the codes above is also available.</p>\n</div>\n\n          </div>"}, "last_serial": 5810039, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d6abad145bf293b7df8bb37286aca133", "sha256": "1269da39098e15a1467fd52f8852c16c9070ce9538085cd41b861187577de573"}, "downloads": -1, "filename": "prefix_codes-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d6abad145bf293b7df8bb37286aca133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4067, "upload_time": "2019-09-10T16:42:30", "upload_time_iso_8601": "2019-09-10T16:42:30.992255Z", "url": "https://files.pythonhosted.org/packages/9c/3f/e9fff8ea092bed24bf8e7a034481c050af34f95190613c2900fb00e72fa7/prefix_codes-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6abad145bf293b7df8bb37286aca133", "sha256": "1269da39098e15a1467fd52f8852c16c9070ce9538085cd41b861187577de573"}, "downloads": -1, "filename": "prefix_codes-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d6abad145bf293b7df8bb37286aca133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4067, "upload_time": "2019-09-10T16:42:30", "upload_time_iso_8601": "2019-09-10T16:42:30.992255Z", "url": "https://files.pythonhosted.org/packages/9c/3f/e9fff8ea092bed24bf8e7a034481c050af34f95190613c2900fb00e72fa7/prefix_codes-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:57 2020"}