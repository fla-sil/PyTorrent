{"info": {"author": "traBpUkciP", "author_email": "duroktar@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Communications", "Topic :: Home Automation", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Multimedia :: Sound/Audio :: Speech", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==========================================================\r\nPytron: A Python library for the LINKS Mark II A.I. v0.3.9\r\n==========================================================\r\n\r\nInterface with your Links AI and send commands from within your Python scripts. Send requests through Links Web Service\r\nfrom any computer you want! Most of Links built in functions can be accessed by name with more being added all the time.\r\nIf you have any requests feel free to let me know on github under issues. You can report bugs there as well. Have fun!\r\n\r\n  **Links: ( Free Windows AI Software )**\r\n  http://mega-voice-command.com/\r\n\r\n-Changelog at bottom of page under Updates-\r\n\r\nInstallation\r\n============\r\n\r\nSimple:\r\n\r\n    install LINKS   ( http://mega-voice-command.com/ )\r\n\r\n    pip install pytronlinks --upgrade\r\n\r\n    `Full command list <http://pythonhosted.org/pytronlinks/genindex.html>`_ \r\n\r\n\r\n\r\nExample\r\n=======\r\n\r\nInitialize main Client with default or custom parameters.\r\n\r\n        :param port: Port that links is listening on.\r\n        :param key: Links web key.\r\n        :param ip: ip of computer with links.\r\n        :param path: If you installed links in a different location.\r\n\r\n    Example:\r\n\r\n.. code-block:: python\r\n\r\n    import pytronlinks as Pytron\r\n\r\n    AI = Pytron.Client()\r\n\r\n\r\nMake Links speak!\r\n=================\r\n\r\n.. code-block:: python\r\n\r\n    import pytronlinks as Pytron\r\n\r\n\r\n    TEXT = ('MVC Rocks!')\r\n\r\n    AI = Pytron.Client()\r\n    AI.talk(TEXT)\r\n\r\n\r\nEmulate speech to Links\r\n=======================\r\n\r\nWill call the command as if you had spoken to links directly.\r\n\r\n.. code-block:: python\r\n\r\n    import pytronlinks as Pytron\r\n\r\n\r\n    TEXT = ('what is the weather like')\r\n\r\n    AI = Pytron.Client()\r\n    AI.emulate_speech(TEXT)\r\n    AI.emulate_speech(\"stop talking\")\r\n\r\n\r\nRun custom action command\r\n=========================\r\n\r\nAnything you can put in Links *Action* bar, you can put in here! See example.\r\n\r\n.. code-block:: python\r\n\r\n    import pytronlinks as Pytron\r\n\r\n\r\n    AI = Pytron.Client()\r\n\r\n    AI.custom(r'[Set(\"Last Subject\", \"pytron is the coolest\")]')\r\n    AI.custom(r'[Speak(\"[Get(\"Last Subject\")]\")]')\r\n\r\n\r\nGet a list of all available commands\r\n====================================\r\n\r\nReturns a list of all callable commands.\r\n\r\n*Coming soon*\r\n'Use with write_commands_to_file to create a file containing all the available grammars to use as a reference.'\r\n\r\n.. code-block:: python\r\n\r\n    import pytronlinks as Pytron\r\n\r\n    AI = Pytron.Client()\r\n\r\n    grammars = AI.GetGrammarList()\r\n    for commands in grammars:\r\n        print commands\r\n\r\n\r\nGet confirmation\r\n================\r\n\r\nGet confirmation before executing commands. Additional parameters not shown in example.\r\n\r\n        :param trigger_var: Variable in UserVariable.xml to be used for Confirmation ( Default Variable used: \"Answer\" )\r\n        :param confirm: Confirmation speech ( Ex: \"Are you sure you want to play music?\" )\r\n        :param on_yes: Speech response if answer is \"yes\"\r\n        :param on_no: Speech response if answer is \"no\"\r\n\r\n.. code-block:: python\r\n\r\n    import pytronlinks as Pytron     # Import Pytron\r\n    \"\"\"\r\n            **Make a command in links social tab like this**\r\n         Command: {response=test_confirm}\r\n         Response: [Set(\"Answer\", {{response}})]\r\n         Profile: Main\r\n\r\n            **And add this wordlist to the wordlist folder.**\r\n          -test_confirm.txt-\r\n         yes or no answers   clean response\r\n         yes; yes please; affirmative; do it; go ahead; okay; sure; yup   yes\r\n         no; dont; stop; no i didnt; nope; no thank you; no thanks  no\r\n\r\n    \"\"\"\r\n\r\n\r\n    AI = Pytron.Client()\r\n    query = AI.listen('Pytron')  # Stars listening for input from Links\r\n\r\n    if query == 'quit':\r\n        break\r\n\r\n    if query == \"Play music\":\r\n        # Get confirmation returns True or False so it can be checked directly, like this..\r\n        if AI.GetConfirmation(confirm=\"Do you want to play music?\"):\r\n            AI.emulate_speech('play music')\r\n\r\n\r\nPut script into listen mode\r\n===========================\r\n\r\nListens for user input by watching a variable in the UserVariables.xml file ( 'Pytron' by default ). The variable is\r\nset using the [Set(\"variable\", \"value\")] command in links. **See Example**\r\n\r\n.. code-block:: python\r\n\r\n    import pytronlinks\r\n    \"\"\"\r\n            **Make a command in links social tab like this**\r\n         Command: Links {speech=test_dictation}\r\n         Response: [Set(\"Pytron\", {speech})]\r\n         Profile: Main\r\n\r\n         And use the dictation in Pytron with the script below.. ( Ctrl-c to quit )\r\n    \"\"\"\r\n\r\n    import pytronlinks as Pytron\r\n\r\n    AI = Pytron.Client()\r\n\r\n    def main():\r\n        dictation = AI.listen()\r\n        if dictation == 'quit':\r\n            break\r\n        else:\r\n            AI.talk(dictation)\r\n\r\n    try:\r\n        while True:\r\n            main()\r\n    except KeyboardInterrupt:\r\n        pass\r\n\r\n\r\nLoquendo Function\r\n=================\r\n\r\nSends a 'Loquendo by Nuance' speech command ( requires Nuance Loquendo voices )\r\n\r\n        :param text: Text to be spoken ( with all the syntax they use, better make it raw, ie: r'text' )\r\n        :param volume: Volume 0 - 100\r\n        :param rate: Rate of speech 0 - 100 ( 50 is default )\r\n        :param ai_name: Name of tts Voice ( case sensitive )\r\n\r\n  Example:\r\n\r\n.. code-block:: python\r\n\r\n    import pytronlinks as Pytron\r\n\r\n    ai.LoqSpeak(\"I am an example\",\"100\",\"50\",\"Simon\")]\r\n\r\nUpdates\r\n=======\r\n\r\n**New features!**\r\n    **Changelog- v.0.3.9**\r\n      - Fixed some troublesome local variables.\r\n\r\n    **Changelog- v.0.3.8**\r\n      - Brought back urllib. Standard library is all we need.\r\n      - Tweaked Client a bit.\r\n\r\n    **Changelog- v.0.3.7**\r\n      - Fixed error on Client initialization\r\n      - Cleaned up readme a bit\r\n\r\n    **Changelog- v.0.3.6**\r\n      - Tweaked CallCommand function. Now returns the response from Links\r\n      - Docstrings added for new functions\r\n      - Shelved urllib in exchange for the Requests library\r\n      - Add GetGrammarList function\r\n      - write_commands_to_file function added ( Needs de-bugging )\r\n\r\n    **Changelog- v.0.3.5**\r\n      - Fixed Listen() function\r\n      - Added more functions ( No docstrings yet, tsk tsk traBpUkciP)\r\n\r\n    **Changelog- v.0.3.3**\r\n      - PEP-8\r\n      - Added rest of Docstrings\r\n      - Created documentation using Sphinx\r\n\r\n    **Changelog- v.0.3.2**\r\n      - Better error response handling in _get_request() ( uses ast standard library module )\r\n      - Optimized _get_xml() & _clear_xml() ( Thanks Zunair )\r\n      - Fixed Get() function  ( typo in url )\r\n\r\n    **Changelog- v.0.3.1**\r\n      - Added XML support for access to Links UserVariables.xml file\r\n      - Added more function wrappers - [Get(\"\")], [Set(\"\", \"\")]\r\n\r\n    **Changelog- v.0.2.1**\r\n      - Added APPDATA as default path to LINKS Install ( ai = pytronlinks.Client() )\r\n      - Added 'Loquendo by Nuance' function wrapper\r\n      - Added a bunch of other LINKS function as well ( check the README )\r\n      - Adding get json response verification ( Adding type of response as parameter )\r\n      - Added custom function parser\r\n\r\n\r\n\r\nAuthors\r\n=======\r\n\r\nScott Doucet / aka: traBpUkciP / aka: Duroktar / `<https://github.com/Duroktar/>`__\r\n\r\n", "description_content_type": null, "docs_url": "https://pythonhosted.org/pytronlinks/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Duroktar/PytronAI/", "keywords": "MVC Links AI Interface", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "pytronlinks", "package_url": "https://pypi.org/project/pytronlinks/", "platform": "", "project_url": "https://pypi.org/project/pytronlinks/", "project_urls": {"Homepage": "https://github.com/Duroktar/PytronAI/"}, "release_url": "https://pypi.org/project/pytronlinks/0.3.9/", "requires_dist": null, "requires_python": "", "summary": "Send commands to Links from within your Python scripts.", "version": "0.3.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Interface with your Links AI and send commands from within your Python scripts. Send requests through Links Web Service\nfrom any computer you want! Most of Links built in functions can be accessed by name with more being added all the time.\nIf you have any requests feel free to let me know on github under issues. You can report bugs there as well. Have fun!</p>\n<blockquote>\n<strong>Links: ( Free Windows AI Software )</strong>\n<a href=\"http://mega-voice-command.com/\" rel=\"nofollow\">http://mega-voice-command.com/</a></blockquote>\n<p>-Changelog at bottom of page under Updates-</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Simple:</p>\n<blockquote>\n<p>install LINKS   ( <a href=\"http://mega-voice-command.com/\" rel=\"nofollow\">http://mega-voice-command.com/</a> )</p>\n<p>pip install pytronlinks \u2013upgrade</p>\n<p><a href=\"http://pythonhosted.org/pytronlinks/genindex.html\" rel=\"nofollow\">Full command list</a></p>\n</blockquote>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Initialize main Client with default or custom parameters.</p>\n<blockquote>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param port:</th><td>Port that links is listening on.</td>\n</tr>\n<tr><th>param key:</th><td>Links web key.</td>\n</tr>\n<tr><th>param ip:</th><td>ip of computer with links.</td>\n</tr>\n<tr><th>param path:</th><td>If you installed links in a different location.</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>Example:</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span> <span class=\"k\">as</span> <span class=\"nn\">Pytron</span>\n\n<span class=\"n\">AI</span> <span class=\"o\">=</span> <span class=\"n\">Pytron</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"make-links-speak\">\n<h2>Make Links speak!</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span> <span class=\"k\">as</span> <span class=\"nn\">Pytron</span>\n\n\n<span class=\"n\">TEXT</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'MVC Rocks!'</span><span class=\"p\">)</span>\n\n<span class=\"n\">AI</span> <span class=\"o\">=</span> <span class=\"n\">Pytron</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">talk</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"emulate-speech-to-links\">\n<h2>Emulate speech to Links</h2>\n<p>Will call the command as if you had spoken to links directly.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span> <span class=\"k\">as</span> <span class=\"nn\">Pytron</span>\n\n\n<span class=\"n\">TEXT</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'what is the weather like'</span><span class=\"p\">)</span>\n\n<span class=\"n\">AI</span> <span class=\"o\">=</span> <span class=\"n\">Pytron</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">emulate_speech</span><span class=\"p\">(</span><span class=\"n\">TEXT</span><span class=\"p\">)</span>\n<span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">emulate_speech</span><span class=\"p\">(</span><span class=\"s2\">\"stop talking\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"run-custom-action-command\">\n<h2>Run custom action command</h2>\n<p>Anything you can put in Links <em>Action</em> bar, you can put in here! See example.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span> <span class=\"k\">as</span> <span class=\"nn\">Pytron</span>\n\n\n<span class=\"n\">AI</span> <span class=\"o\">=</span> <span class=\"n\">Pytron</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n\n<span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">custom</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'[Set(\"Last Subject\", \"pytron is the coolest\")]'</span><span class=\"p\">)</span>\n<span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">custom</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'[Speak(\"[Get(\"Last Subject\")]\")]'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-a-list-of-all-available-commands\">\n<h2>Get a list of all available commands</h2>\n<p>Returns a list of all callable commands.</p>\n<p><em>Coming soon</em>\n\u2018Use with write_commands_to_file to create a file containing all the available grammars to use as a reference.\u2019</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span> <span class=\"k\">as</span> <span class=\"nn\">Pytron</span>\n\n<span class=\"n\">AI</span> <span class=\"o\">=</span> <span class=\"n\">Pytron</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n\n<span class=\"n\">grammars</span> <span class=\"o\">=</span> <span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">GetGrammarList</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">commands</span> <span class=\"ow\">in</span> <span class=\"n\">grammars</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"n\">commands</span>\n</pre>\n</div>\n<div id=\"get-confirmation\">\n<h2>Get confirmation</h2>\n<p>Get confirmation before executing commands. Additional parameters not shown in example.</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param trigger_var:</th></tr>\n<tr><td>\u00a0</td><td>Variable in UserVariable.xml to be used for Confirmation ( Default Variable used: \u201cAnswer\u201d )</td>\n</tr>\n<tr><th>param confirm:</th><td>Confirmation speech ( Ex: \u201cAre you sure you want to play music?\u201d )</td>\n</tr>\n<tr><th>param on_yes:</th><td>Speech response if answer is \u201cyes\u201d</td>\n</tr>\n<tr><th>param on_no:</th><td>Speech response if answer is \u201cno\u201d</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span> <span class=\"k\">as</span> <span class=\"nn\">Pytron</span>     <span class=\"c1\"># Import Pytron</span>\n<span class=\"sd\">\"\"\"\n        **Make a command in links social tab like this**\n     Command: {response=test_confirm}\n     Response: [Set(\"Answer\", {{response}})]\n     Profile: Main\n\n        **And add this wordlist to the wordlist folder.**\n      -test_confirm.txt-\n     yes or no answers   clean response\n     yes; yes please; affirmative; do it; go ahead; okay; sure; yup   yes\n     no; dont; stop; no i didnt; nope; no thank you; no thanks  no\n\n\"\"\"</span>\n\n\n<span class=\"n\">AI</span> <span class=\"o\">=</span> <span class=\"n\">Pytron</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"s1\">'Pytron'</span><span class=\"p\">)</span>  <span class=\"c1\"># Stars listening for input from Links</span>\n\n<span class=\"k\">if</span> <span class=\"n\">query</span> <span class=\"o\">==</span> <span class=\"s1\">'quit'</span><span class=\"p\">:</span>\n    <span class=\"k\">break</span>\n\n<span class=\"k\">if</span> <span class=\"n\">query</span> <span class=\"o\">==</span> <span class=\"s2\">\"Play music\"</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Get confirmation returns True or False so it can be checked directly, like this..</span>\n    <span class=\"k\">if</span> <span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">GetConfirmation</span><span class=\"p\">(</span><span class=\"n\">confirm</span><span class=\"o\">=</span><span class=\"s2\">\"Do you want to play music?\"</span><span class=\"p\">):</span>\n        <span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">emulate_speech</span><span class=\"p\">(</span><span class=\"s1\">'play music'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"put-script-into-listen-mode\">\n<h2>Put script into listen mode</h2>\n<p>Listens for user input by watching a variable in the UserVariables.xml file ( \u2018Pytron\u2019 by default ). The variable is\nset using the [Set(\u201cvariable\u201d, \u201cvalue\u201d)] command in links. <strong>See Example</strong></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span>\n<span class=\"sd\">\"\"\"\n        **Make a command in links social tab like this**\n     Command: Links {speech=test_dictation}\n     Response: [Set(\"Pytron\", {speech})]\n     Profile: Main\n\n     And use the dictation in Pytron with the script below.. ( Ctrl-c to quit )\n\"\"\"</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span> <span class=\"k\">as</span> <span class=\"nn\">Pytron</span>\n\n<span class=\"n\">AI</span> <span class=\"o\">=</span> <span class=\"n\">Pytron</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">dictation</span> <span class=\"o\">=</span> <span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">dictation</span> <span class=\"o\">==</span> <span class=\"s1\">'quit'</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">AI</span><span class=\"o\">.</span><span class=\"n\">talk</span><span class=\"p\">(</span><span class=\"n\">dictation</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n</div>\n<div id=\"loquendo-function\">\n<h2>Loquendo Function</h2>\n<p>Sends a \u2018Loquendo by Nuance\u2019 speech command ( requires Nuance Loquendo voices )</p>\n<blockquote>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>param text:</th><td>Text to be spoken ( with all the syntax they use, better make it raw, ie: r\u2019text\u2019 )</td>\n</tr>\n<tr><th>param volume:</th><td>Volume 0 - 100</td>\n</tr>\n<tr><th>param rate:</th><td>Rate of speech 0 - 100 ( 50 is default )</td>\n</tr>\n<tr><th>param ai_name:</th><td>Name of tts Voice ( case sensitive )</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>Example:</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pytronlinks</span> <span class=\"k\">as</span> <span class=\"nn\">Pytron</span>\n\n<span class=\"n\">ai</span><span class=\"o\">.</span><span class=\"n\">LoqSpeak</span><span class=\"p\">(</span><span class=\"s2\">\"I am an example\"</span><span class=\"p\">,</span><span class=\"s2\">\"100\"</span><span class=\"p\">,</span><span class=\"s2\">\"50\"</span><span class=\"p\">,</span><span class=\"s2\">\"Simon\"</span><span class=\"p\">)]</span>\n</pre>\n</div>\n<div id=\"updates\">\n<h2>Updates</h2>\n<dl>\n<dt><strong>New features!</strong></dt>\n<dd><dl>\n<dt><strong>Changelog- v.0.3.9</strong></dt>\n<dd><ul>\n<li>Fixed some troublesome local variables.</li>\n</ul>\n</dd>\n<dt><strong>Changelog- v.0.3.8</strong></dt>\n<dd><ul>\n<li>Brought back urllib. Standard library is all we need.</li>\n<li>Tweaked Client a bit.</li>\n</ul>\n</dd>\n<dt><strong>Changelog- v.0.3.7</strong></dt>\n<dd><ul>\n<li>Fixed error on Client initialization</li>\n<li>Cleaned up readme a bit</li>\n</ul>\n</dd>\n<dt><strong>Changelog- v.0.3.6</strong></dt>\n<dd><ul>\n<li>Tweaked CallCommand function. Now returns the response from Links</li>\n<li>Docstrings added for new functions</li>\n<li>Shelved urllib in exchange for the Requests library</li>\n<li>Add GetGrammarList function</li>\n<li>write_commands_to_file function added ( Needs de-bugging )</li>\n</ul>\n</dd>\n<dt><strong>Changelog- v.0.3.5</strong></dt>\n<dd><ul>\n<li>Fixed Listen() function</li>\n<li>Added more functions ( No docstrings yet, tsk tsk traBpUkciP)</li>\n</ul>\n</dd>\n<dt><strong>Changelog- v.0.3.3</strong></dt>\n<dd><ul>\n<li>PEP-8</li>\n<li>Added rest of Docstrings</li>\n<li>Created documentation using Sphinx</li>\n</ul>\n</dd>\n<dt><strong>Changelog- v.0.3.2</strong></dt>\n<dd><ul>\n<li>Better error response handling in _get_request() ( uses ast standard library module )</li>\n<li>Optimized _get_xml() &amp; _clear_xml() ( Thanks Zunair )</li>\n<li>Fixed Get() function  ( typo in url )</li>\n</ul>\n</dd>\n<dt><strong>Changelog- v.0.3.1</strong></dt>\n<dd><ul>\n<li>Added XML support for access to Links UserVariables.xml file</li>\n<li>Added more function wrappers - [Get(\u201c\u201d)], [Set(\u201c\u201d, \u201c\u201d)]</li>\n</ul>\n</dd>\n<dt><strong>Changelog- v.0.2.1</strong></dt>\n<dd><ul>\n<li>Added APPDATA as default path to LINKS Install ( ai = pytronlinks.Client() )</li>\n<li>Added \u2018Loquendo by Nuance\u2019 function wrapper</li>\n<li>Added a bunch of other LINKS function as well ( check the README )</li>\n<li>Adding get json response verification ( Adding type of response as parameter )</li>\n<li>Added custom function parser</li>\n</ul>\n</dd>\n</dl>\n</dd>\n</dl>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Scott Doucet / aka: traBpUkciP / aka: Duroktar / <a href=\"https://github.com/Duroktar/\" rel=\"nofollow\">https://github.com/Duroktar/</a></p>\n</div>\n\n          </div>"}, "last_serial": 2322135, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "4d9f22b2dc1eefd0a749132ea0583f33", "sha256": "75ecea4eedf8dd75debeab51f5d071f190311388a762fd962dfb976451c25c60"}, "downloads": -1, "filename": "pytronlinks-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4d9f22b2dc1eefd0a749132ea0583f33", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 10088, "upload_time": "2016-07-14T05:16:38", "upload_time_iso_8601": "2016-07-14T05:16:38.239344Z", "url": "https://files.pythonhosted.org/packages/fd/5e/aaaecc98480fd2faf930134e11ae7f42c641ff9739f24678bf60a90749d1/pytronlinks-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b08cfd655ca263af979488ddeb8a152b", "sha256": "28028df371e7fa66e9a0c0e880dfc925c416ae11879ce37f60c3fa72e227db8d"}, "downloads": -1, "filename": "pytronlinks-0.2.1.zip", "has_sig": false, "md5_digest": "b08cfd655ca263af979488ddeb8a152b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13437, "upload_time": "2016-07-14T05:16:40", "upload_time_iso_8601": "2016-07-14T05:16:40.572993Z", "url": "https://files.pythonhosted.org/packages/cb/e2/8e3b0f3c3ae6f6959989f96e0023e0ddc214ce3ead64100526dd03a9f9de/pytronlinks-0.2.1.zip", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "cac498b633fad2732f2c4d60501e19c2", "sha256": "cf1773b1941279d59e93407af977e6c2e1ee22a3694449d602833c03ce75707c"}, "downloads": -1, "filename": "pytronlinks-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cac498b633fad2732f2c4d60501e19c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11142, "upload_time": "2016-07-21T05:00:30", "upload_time_iso_8601": "2016-07-21T05:00:30.972513Z", "url": "https://files.pythonhosted.org/packages/1e/65/3c08b907556c08b04841ecc0252671ac03db365c2743efe799554f906821/pytronlinks-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2752cf0e208fc8c9d7bc427896019de", "sha256": "19413a103175c46bcd15f16fd6ebd8f292083693692eaf72554e205dcff24bfd"}, "downloads": -1, "filename": "pytronlinks-0.3.1.zip", "has_sig": false, "md5_digest": "a2752cf0e208fc8c9d7bc427896019de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14676, "upload_time": "2016-07-21T05:00:33", "upload_time_iso_8601": "2016-07-21T05:00:33.041710Z", "url": "https://files.pythonhosted.org/packages/27/29/48b0ee3b8e479dd428eabe0e9c1946ad775ed47fcc1fbe9a17a9962a2d18/pytronlinks-0.3.1.zip", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "afe1fa9881c7e38cc75263d6e7556971", "sha256": "b6c609fa2ef95bac33bad009e89dee241d300859be238eaac053d74f6ce42318"}, "downloads": -1, "filename": "pytronlinks-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "afe1fa9881c7e38cc75263d6e7556971", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11526, "upload_time": "2016-07-21T19:25:57", "upload_time_iso_8601": "2016-07-21T19:25:57.285853Z", "url": "https://files.pythonhosted.org/packages/ac/23/6af4b73ce90a56ad00229b93862ff8ba282d63244e674c7428eca4b9345b/pytronlinks-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1c346736a90dfc6bbf657c7734709a7", "sha256": "ef092e1b82cfe6399ca2450b2c934f1062319929b66b827b63dc067186b6a39a"}, "downloads": -1, "filename": "pytronlinks-0.3.2.zip", "has_sig": false, "md5_digest": "b1c346736a90dfc6bbf657c7734709a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15089, "upload_time": "2016-07-21T19:25:59", "upload_time_iso_8601": "2016-07-21T19:25:59.180769Z", "url": "https://files.pythonhosted.org/packages/13/40/499d9b5d1ca02e3be76ca0f4646abfa28b42a23f5c67e31e63c9f696e4f4/pytronlinks-0.3.2.zip", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "7bd37e8c5d4f7aba5dda278beb65beff", "sha256": "c317b76bf04fdbae9debbc723f4625c51d26d095f170ad1be8443840ba84df21"}, "downloads": -1, "filename": "pytronlinks-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7bd37e8c5d4f7aba5dda278beb65beff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11979, "upload_time": "2016-07-22T22:08:42", "upload_time_iso_8601": "2016-07-22T22:08:42.789409Z", "url": "https://files.pythonhosted.org/packages/13/d7/7f98e699818c96aebbd6f7af1ec56cf915c685fd677efba5100343c4e253/pytronlinks-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3fb8cfd5ea6b652fbf9242839bd3a032", "sha256": "a2357646062f9e8968cee309fd72b3c1a7be7b4ae6f7d55eda694be16c1a88be"}, "downloads": -1, "filename": "pytronlinks-0.3.3.zip", "has_sig": false, "md5_digest": "3fb8cfd5ea6b652fbf9242839bd3a032", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15729, "upload_time": "2016-07-22T22:08:44", "upload_time_iso_8601": "2016-07-22T22:08:44.661415Z", "url": "https://files.pythonhosted.org/packages/7f/1a/a4a6a1029970091c7ec0a621eb68c8b004b0d16279a45a212aec02b46e64/pytronlinks-0.3.3.zip", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "ed03b09484aba6f996cdf1141c547be5", "sha256": "580ee295465de60c741ec0e23721363aca92d43e412b5b29cf606984e2f12d16"}, "downloads": -1, "filename": "pytronlinks-0.3.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed03b09484aba6f996cdf1141c547be5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12720, "upload_time": "2016-07-27T01:31:29", "upload_time_iso_8601": "2016-07-27T01:31:29.552379Z", "url": "https://files.pythonhosted.org/packages/29/b6/694fa3548f020240408a6e45a56c48847be5433a7f030c50e6600d44c412/pytronlinks-0.3.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "619f8d0947bcdb1b30c229967c885234", "sha256": "40190d15dbee48884a0fd59dad18e11c97a419987634c72d91327f330bf0141e"}, "downloads": -1, "filename": "pytronlinks-0.3.4.zip", "has_sig": false, "md5_digest": "619f8d0947bcdb1b30c229967c885234", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16626, "upload_time": "2016-07-27T01:31:32", "upload_time_iso_8601": "2016-07-27T01:31:32.872184Z", "url": "https://files.pythonhosted.org/packages/6b/91/e822168eb43058627e0e4f39f4148440c8bb2bdfd01d7c167ac880d9cfc3/pytronlinks-0.3.4.zip", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "65a3accb8e73d18a263c5d6a1314f2c1", "sha256": "ff3b29eac409af90a111edd824dbe663e953939adf43c7d583c2a93a7d1bcc8f"}, "downloads": -1, "filename": "pytronlinks-0.3.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "65a3accb8e73d18a263c5d6a1314f2c1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12715, "upload_time": "2016-07-27T02:12:03", "upload_time_iso_8601": "2016-07-27T02:12:03.427508Z", "url": "https://files.pythonhosted.org/packages/41/9a/4e0dcfc572ea628bc9650663241f726686b9d11aeeb5d78a9df41eb976b2/pytronlinks-0.3.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a972e6f7e8d2c8690fce98a64c11257a", "sha256": "5d0c8b3285eb92a905afce483dfc20b4dd08712d2550f7eb64b47f780c957565"}, "downloads": -1, "filename": "pytronlinks-0.3.5.zip", "has_sig": false, "md5_digest": "a972e6f7e8d2c8690fce98a64c11257a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16621, "upload_time": "2016-07-27T02:12:05", "upload_time_iso_8601": "2016-07-27T02:12:05.371445Z", "url": "https://files.pythonhosted.org/packages/21/51/4800c75747fb65868e211b3e18354f9c827050cc86ce8f4fa8f204e58501/pytronlinks-0.3.5.zip", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "53d6c2cff3a32eed072c808817a2d7fa", "sha256": "3497523e4bae5fa8af17bc43d034371fa11259ef30267f81c15d7f79dc583e12"}, "downloads": -1, "filename": "pytronlinks-0.3.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "53d6c2cff3a32eed072c808817a2d7fa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15299, "upload_time": "2016-08-02T21:19:17", "upload_time_iso_8601": "2016-08-02T21:19:17.761762Z", "url": "https://files.pythonhosted.org/packages/2e/03/6ef85bb9eba94bf0b3818b876a51f816b5c8f656bac40c7ed7042005ba7c/pytronlinks-0.3.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "758679892e70a4b39b8bc0182d1559dc", "sha256": "2b560fb8278d055518b88baf48b8c0eca7fb73d59b5a12bb9d2d6de41baf9ab8"}, "downloads": -1, "filename": "pytronlinks-0.3.6.zip", "has_sig": false, "md5_digest": "758679892e70a4b39b8bc0182d1559dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19921, "upload_time": "2016-08-02T21:19:20", "upload_time_iso_8601": "2016-08-02T21:19:20.140097Z", "url": "https://files.pythonhosted.org/packages/82/08/d81d7e2ede8a8575863d68b65009c12510906f003af6effc05fa4c140c99/pytronlinks-0.3.6.zip", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "4aa568338705bd4a349d54a56c03ba04", "sha256": "8ca4fd0a8d7de0dc787436cf3c2e47c8de70dd3eaa183da3357725036ac8e1f9"}, "downloads": -1, "filename": "pytronlinks-0.3.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4aa568338705bd4a349d54a56c03ba04", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16560, "upload_time": "2016-08-08T16:24:47", "upload_time_iso_8601": "2016-08-08T16:24:47.793359Z", "url": "https://files.pythonhosted.org/packages/2c/fa/382e24ee54e72e9d10d41dbb27b557fc356866d77ff2a4cf052dfdc663fc/pytronlinks-0.3.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ebac072c71d89a2c61507814b62bfc08", "sha256": "3f561f7f874320d19598a4d1a35d732411e8584b9452ff1277b329c0ab4f4afc"}, "downloads": -1, "filename": "pytronlinks-0.3.7.zip", "has_sig": false, "md5_digest": "ebac072c71d89a2c61507814b62bfc08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21088, "upload_time": "2016-08-08T16:24:51", "upload_time_iso_8601": "2016-08-08T16:24:51.140522Z", "url": "https://files.pythonhosted.org/packages/65/7b/c4fcb99f3ad423bda82af906aeacd08e3997ba1b9ca4bd9fd20857dcdb98/pytronlinks-0.3.7.zip", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "70a0d8380970ca4a4d4ec4313c2729c3", "sha256": "f49a3f3d92a8875dae0303787188f25b9f26fd54e30e07a52cea1f2085e25111"}, "downloads": -1, "filename": "pytronlinks-0.3.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "70a0d8380970ca4a4d4ec4313c2729c3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15217, "upload_time": "2016-08-16T17:10:52", "upload_time_iso_8601": "2016-08-16T17:10:52.925855Z", "url": "https://files.pythonhosted.org/packages/37/2f/c473e0a3034e0b08937840fd52ce5f80d3fee0bce5f8d5354eef6772ebf1/pytronlinks-0.3.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcf3889e99e4f1dd27c371813681e24f", "sha256": "11d9f08a7e3c60bfcfaed6982b4923420c0408af70432cf25ca44746ed10008e"}, "downloads": -1, "filename": "pytronlinks-0.3.8.zip", "has_sig": false, "md5_digest": "dcf3889e99e4f1dd27c371813681e24f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19783, "upload_time": "2016-08-16T17:10:55", "upload_time_iso_8601": "2016-08-16T17:10:55.234398Z", "url": "https://files.pythonhosted.org/packages/4c/c5/7080bd1196b000fb605ccae48b120c29c56ba372d250c84d98b9ba7d20ac/pytronlinks-0.3.8.zip", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "8837ae61113ce9283b0dd4ecc1039c31", "sha256": "6a7fb9af87513001ed1731dcfbf0ff66eb7db4b9006383267dc118ec2a463483"}, "downloads": -1, "filename": "pytronlinks-0.3.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8837ae61113ce9283b0dd4ecc1039c31", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15602, "upload_time": "2016-08-25T13:42:24", "upload_time_iso_8601": "2016-08-25T13:42:24.406602Z", "url": "https://files.pythonhosted.org/packages/c3/ae/c974acb8924a975f57f40ac008c93e45650e6d7513b3dd2da1d10b242f7c/pytronlinks-0.3.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c8d0d5767ba88c56faa375b677eb3bf", "sha256": "a4333b06ea806b6bb8171f74d256c17206df3bc3e0f3eac2ae01de5b2d812303"}, "downloads": -1, "filename": "pytronlinks-0.3.9.zip", "has_sig": false, "md5_digest": "8c8d0d5767ba88c56faa375b677eb3bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20363, "upload_time": "2016-08-25T13:42:26", "upload_time_iso_8601": "2016-08-25T13:42:26.818060Z", "url": "https://files.pythonhosted.org/packages/6e/c6/1f7f96b7438f9e53309b354912ba047395e591a324269fe86718a12d0193/pytronlinks-0.3.9.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8837ae61113ce9283b0dd4ecc1039c31", "sha256": "6a7fb9af87513001ed1731dcfbf0ff66eb7db4b9006383267dc118ec2a463483"}, "downloads": -1, "filename": "pytronlinks-0.3.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8837ae61113ce9283b0dd4ecc1039c31", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15602, "upload_time": "2016-08-25T13:42:24", "upload_time_iso_8601": "2016-08-25T13:42:24.406602Z", "url": "https://files.pythonhosted.org/packages/c3/ae/c974acb8924a975f57f40ac008c93e45650e6d7513b3dd2da1d10b242f7c/pytronlinks-0.3.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8c8d0d5767ba88c56faa375b677eb3bf", "sha256": "a4333b06ea806b6bb8171f74d256c17206df3bc3e0f3eac2ae01de5b2d812303"}, "downloads": -1, "filename": "pytronlinks-0.3.9.zip", "has_sig": false, "md5_digest": "8c8d0d5767ba88c56faa375b677eb3bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20363, "upload_time": "2016-08-25T13:42:26", "upload_time_iso_8601": "2016-08-25T13:42:26.818060Z", "url": "https://files.pythonhosted.org/packages/6e/c6/1f7f96b7438f9e53309b354912ba047395e591a324269fe86718a12d0193/pytronlinks-0.3.9.zip", "yanked": false}], "timestamp": "Fri May  8 03:13:08 2020"}