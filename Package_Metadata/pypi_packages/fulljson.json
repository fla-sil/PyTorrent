{"info": {"author": "15045120", "author_email": "1337078409@qq.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# FullJSON\n\nThe package is for [JSON](https://www.json.org/json-en.html) conversion in Python enviroment.\n<table>\n<thead>\n<tr><th>JSON Type</th><th>JSON Type Example</th><th>Python Type</th><th>Python Type Value</th></tr>\n</thead></tr>\n</thead>\n<tbody>\n<tr><td>object</td><td>{}</td><td>dict</td><td>type({})</td></tr>\n<tr><td>array</td><td>[]</td><td>list</td><td>type([])</td></tr>\n<tr><td>string</td><td>&quot;example&quot;</td><td>str</td><td>type('example')</td></tr>\n<tr><td>number</td><td>1/1.0</td><td>int/float</td><td>type(1)/type(1.0)</td></tr>\n<tr><td>\"true\"</td><td>true</td><td>True</td><td>type(True)</td></tr>\n<tr><td>\"false\"</td><td>false</td><td>False</td><td>type(False)</td></tr>\n<tr><td>\"null\"</td><td>null</td><td>None</td><td>type(None)</td></tr>\n</tbody>\n</table>\n\n# Implements\n\n> Convert a JSON string into a JSON object\n\n`JSON.parse(value)` is based on stack structure.\nThere are three stacks in the program, `stack` stack for characters,` class_stack` stack for list and dict, `keyvalue_stack` stack for name/value pair.\nScan each character in the string, do the following:\n1.  If is `[`, put type/value into `class_stack` stack\n2.  If is `{`, put type/value into the `class_stack` stack, and put an empty key/value pair (named` border`) into the `keyvalue_stack` stack\n3. If is`,`, according to `class_stack` stack top type (list and dict),` list` is to operate on the top of the `class_stack` stack and call its append method, `dict` is pushed into the `keyvalue_stack` stack\n4. If is `]`, popping all the elements on the top of the `stack` stack until it encounters `[`\n5. If is `}`, pop the `keyvalue_stack` stack and pop all the elements on the top of the stack until it encounters  `border` \n6. If is `:`, operate on the top of the `keyvalue_stack` stack and modify the value in the key/value pair\n7. Other, put characters into the `stack` stack\n> Convert JSON values to JSON strings\n\n`JSON.stringify(value)` is using recursive method.\n1. If it is a basic type in Python (number, string, bool, None), return the corresponding string (1/1.0, \"example\", true/false, null)\n2. If it is list and dict, repeat step 1 for each element in the list and dict\n3. Others, It is a class, consider as a dict type, terating over member variables of a class, do the same action as step 1\n## Installation\n```bash\npip install fulljson \n```\n\n## Examples\n\n - Convert a JSON string into a JSON object.\n\n```bash\n>>> from fulljson import JSON\n>>>\n>>> value = '[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2, true]}]'\n>>> print(JSON.parse(value))\n['foo', {'bar': ['baz', None, 1.0, 2, True]}]\n>>>\n```\n\n\n - Convert JSON values to JSON strings.\n\n```bash\n>>> from fulljson import JSON\n>>>\n>>> value = [\"foo\", {\"bar\": [\"baz\", None, 1.0, 2, True]}]\n>>> print(JSON.stringify(value))\n[\"foo\",{\"bar\":[\"baz\",null,1.0,2,true]}]\n>>>\n```\n\n- Format JSON object or JSON strings\n\n```bash\n>>> from fulljson import JSON\n>>>\n>>> value = [{'foo': 'new 0', 'index': None}, \"sat\", {'bar': 'new 2', 'index': [1, True]}]\n>>> print(JSON.format(value))\n[\n    {\n        \"foo\":\"new 0\",\n        \"index\":null\n    },\n    \"sat\",\n    {\n        \"bar\":\"new 2\",\n        \"index\":[\n            1,\n            true\n        ]\n    }\n]\n>>>\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/15045120/FullJSON", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fulljson", "package_url": "https://pypi.org/project/fulljson/", "platform": "", "project_url": "https://pypi.org/project/fulljson/", "project_urls": {"Homepage": "https://github.com/15045120/FullJSON"}, "release_url": "https://pypi.org/project/fulljson/0.0.53/", "requires_dist": null, "requires_python": ">=3", "summary": "simple json conversion implements using stack structure and recursive method", "version": "0.0.53", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>FullJSON</h1>\n<p>The package is for <a href=\"https://www.json.org/json-en.html\" rel=\"nofollow\">JSON</a> conversion in Python enviroment.</p>\n<table>\n<thead>\n<tr><th>JSON Type</th><th>JSON Type Example</th><th>Python Type</th><th>Python Type Value</th></tr>\n</thead>\n\n<tbody>\n<tr><td>object</td><td>{}</td><td>dict</td><td>type({})</td></tr>\n<tr><td>array</td><td>[]</td><td>list</td><td>type([])</td></tr>\n<tr><td>string</td><td>\"example\"</td><td>str</td><td>type('example')</td></tr>\n<tr><td>number</td><td>1/1.0</td><td>int/float</td><td>type(1)/type(1.0)</td></tr>\n<tr><td>\"true\"</td><td>true</td><td>True</td><td>type(True)</td></tr>\n<tr><td>\"false\"</td><td>false</td><td>False</td><td>type(False)</td></tr>\n<tr><td>\"null\"</td><td>null</td><td>None</td><td>type(None)</td></tr>\n</tbody>\n</table>\n<h1>Implements</h1>\n<blockquote>\n<p>Convert a JSON string into a JSON object</p>\n</blockquote>\n<p><code>JSON.parse(value)</code> is based on stack structure.\nThere are three stacks in the program, <code>stack</code> stack for characters,<code>class_stack</code> stack for list and dict, <code>keyvalue_stack</code> stack for name/value pair.\nScan each character in the string, do the following:</p>\n<ol>\n<li>If is <code>[</code>, put type/value into <code>class_stack</code> stack</li>\n<li>If is <code>{</code>, put type/value into the <code>class_stack</code> stack, and put an empty key/value pair (named<code>border</code>) into the <code>keyvalue_stack</code> stack</li>\n<li>If is<code>,</code>, according to <code>class_stack</code> stack top type (list and dict),<code>list</code> is to operate on the top of the <code>class_stack</code> stack and call its append method, <code>dict</code> is pushed into the <code>keyvalue_stack</code> stack</li>\n<li>If is <code>]</code>, popping all the elements on the top of the <code>stack</code> stack until it encounters <code>[</code></li>\n<li>If is <code>}</code>, pop the <code>keyvalue_stack</code> stack and pop all the elements on the top of the stack until it encounters  <code>border</code></li>\n<li>If is <code>:</code>, operate on the top of the <code>keyvalue_stack</code> stack and modify the value in the key/value pair</li>\n<li>Other, put characters into the <code>stack</code> stack</li>\n</ol>\n<blockquote>\n<p>Convert JSON values to JSON strings</p>\n</blockquote>\n<p><code>JSON.stringify(value)</code> is using recursive method.</p>\n<ol>\n<li>If it is a basic type in Python (number, string, bool, None), return the corresponding string (1/1.0, \"example\", true/false, null)</li>\n<li>If it is list and dict, repeat step 1 for each element in the list and dict</li>\n<li>Others, It is a class, consider as a dict type, terating over member variables of a class, do the same action as step 1</li>\n</ol>\n<h2>Installation</h2>\n<pre>pip install fulljson \n</pre>\n<h2>Examples</h2>\n<ul>\n<li>Convert a JSON string into a JSON object.</li>\n</ul>\n<pre>&gt;&gt;&gt; from fulljson import JSON\n&gt;&gt;&gt;\n&gt;&gt;&gt; <span class=\"nv\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'[\"foo\", {\"bar\": [\"baz\", null, 1.0, 2, true]}]'</span>\n&gt;&gt;&gt; print<span class=\"o\">(</span>JSON.parse<span class=\"o\">(</span>value<span class=\"o\">))</span>\n<span class=\"o\">[</span><span class=\"s1\">'foo'</span>, <span class=\"o\">{</span><span class=\"s1\">'bar'</span>: <span class=\"o\">[</span><span class=\"s1\">'baz'</span>, None, <span class=\"m\">1</span>.0, <span class=\"m\">2</span>, True<span class=\"o\">]}]</span>\n&gt;&gt;&gt;\n</pre>\n<ul>\n<li>Convert JSON values to JSON strings.</li>\n</ul>\n<pre>&gt;&gt;&gt; from fulljson import JSON\n&gt;&gt;&gt;\n&gt;&gt;&gt; <span class=\"nv\">value</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"s2\">\"foo\"</span>, <span class=\"o\">{</span><span class=\"s2\">\"bar\"</span>: <span class=\"o\">[</span><span class=\"s2\">\"baz\"</span>, None, <span class=\"m\">1</span>.0, <span class=\"m\">2</span>, True<span class=\"o\">]}]</span>\n&gt;&gt;&gt; print<span class=\"o\">(</span>JSON.stringify<span class=\"o\">(</span>value<span class=\"o\">))</span>\n<span class=\"o\">[</span><span class=\"s2\">\"foo\"</span>,<span class=\"o\">{</span><span class=\"s2\">\"bar\"</span>:<span class=\"o\">[</span><span class=\"s2\">\"baz\"</span>,null,1.0,2,true<span class=\"o\">]}]</span>\n&gt;&gt;&gt;\n</pre>\n<ul>\n<li>Format JSON object or JSON strings</li>\n</ul>\n<pre>&gt;&gt;&gt; from fulljson import JSON\n&gt;&gt;&gt;\n&gt;&gt;&gt; <span class=\"nv\">value</span> <span class=\"o\">=</span> <span class=\"o\">[{</span><span class=\"s1\">'foo'</span>: <span class=\"s1\">'new 0'</span>, <span class=\"s1\">'index'</span>: None<span class=\"o\">}</span>, <span class=\"s2\">\"sat\"</span>, <span class=\"o\">{</span><span class=\"s1\">'bar'</span>: <span class=\"s1\">'new 2'</span>, <span class=\"s1\">'index'</span>: <span class=\"o\">[</span><span class=\"m\">1</span>, True<span class=\"o\">]}]</span>\n&gt;&gt;&gt; print<span class=\"o\">(</span>JSON.format<span class=\"o\">(</span>value<span class=\"o\">))</span>\n<span class=\"o\">[</span>\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"foo\"</span>:<span class=\"s2\">\"new 0\"</span>,\n        <span class=\"s2\">\"index\"</span>:null\n    <span class=\"o\">}</span>,\n    <span class=\"s2\">\"sat\"</span>,\n    <span class=\"o\">{</span>\n        <span class=\"s2\">\"bar\"</span>:<span class=\"s2\">\"new 2\"</span>,\n        <span class=\"s2\">\"index\"</span>:<span class=\"o\">[</span>\n            <span class=\"m\">1</span>,\n            <span class=\"nb\">true</span>\n        <span class=\"o\">]</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">]</span>\n&gt;&gt;&gt;\n</pre>\n\n          </div>"}, "last_serial": 6485160, "releases": {"0.0.53": [{"comment_text": "", "digests": {"md5": "78a550952b171d9a02a596bb00fc41c1", "sha256": "f7c10f354c2b3c07a223d4594ff76683187ea030daa9cedb85079a43ecbc471c"}, "downloads": -1, "filename": "fulljson-0.0.53-py3-none-any.whl", "has_sig": false, "md5_digest": "78a550952b171d9a02a596bb00fc41c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8460, "upload_time": "2020-01-20T07:36:44", "upload_time_iso_8601": "2020-01-20T07:36:44.191383Z", "url": "https://files.pythonhosted.org/packages/86/17/8756021bedb54f4f11028865a4120b96cb272c95d6fa09935a0ad99f904d/fulljson-0.0.53-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56d3fe1274efe8c624603be36aa4dd47", "sha256": "1d0582d654f49448c878f7436670dee3d220001c818ec6ab4cd988a87b251465"}, "downloads": -1, "filename": "fulljson-0.0.53.tar.gz", "has_sig": false, "md5_digest": "56d3fe1274efe8c624603be36aa4dd47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6117, "upload_time": "2020-01-20T07:36:45", "upload_time_iso_8601": "2020-01-20T07:36:45.792687Z", "url": "https://files.pythonhosted.org/packages/9e/80/b570d3ae2b06c06ee38314c89f3c9df5016ce2e711bb9e21dc19d3ef7b70/fulljson-0.0.53.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "78a550952b171d9a02a596bb00fc41c1", "sha256": "f7c10f354c2b3c07a223d4594ff76683187ea030daa9cedb85079a43ecbc471c"}, "downloads": -1, "filename": "fulljson-0.0.53-py3-none-any.whl", "has_sig": false, "md5_digest": "78a550952b171d9a02a596bb00fc41c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8460, "upload_time": "2020-01-20T07:36:44", "upload_time_iso_8601": "2020-01-20T07:36:44.191383Z", "url": "https://files.pythonhosted.org/packages/86/17/8756021bedb54f4f11028865a4120b96cb272c95d6fa09935a0ad99f904d/fulljson-0.0.53-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56d3fe1274efe8c624603be36aa4dd47", "sha256": "1d0582d654f49448c878f7436670dee3d220001c818ec6ab4cd988a87b251465"}, "downloads": -1, "filename": "fulljson-0.0.53.tar.gz", "has_sig": false, "md5_digest": "56d3fe1274efe8c624603be36aa4dd47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6117, "upload_time": "2020-01-20T07:36:45", "upload_time_iso_8601": "2020-01-20T07:36:45.792687Z", "url": "https://files.pythonhosted.org/packages/9e/80/b570d3ae2b06c06ee38314c89f3c9df5016ce2e711bb9e21dc19d3ef7b70/fulljson-0.0.53.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:45 2020"}