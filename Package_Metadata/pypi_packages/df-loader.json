{"info": {"author": "Karev Vitaliy", "author_email": "Vitaliy.Karev@mvideo.ru", "bugtrack_url": null, "classifiers": [], "description": "# df_loader\n\u041c\u043e\u0434\u0443\u043b\u044c, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 `read_sql()` \u0438 `auto_read_sql()`. \n\n\u0414\u0430\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 DataFrame, \u043a\u043e\u0442\u043e\u0440\u044b\u0439\n\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0443\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \n\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440,\nDataFrame, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b ``promocodes.dbo.recsys_wgh2_train_nmf_coef``,\n\u0431\u0443\u0434\u0435\u0442 \u0432\u0435\u0441\u0438\u0442\u044c \u043d\u0430 64% \u043c\u0435\u043d\u044c\u0448\u0435.\n\n`read_sql`  \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b `pandas.read_sql()` \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043c\u0435\u0442\u043e\u0434\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e\n \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 \u043d\u0438\u043c. \u041e\u0434\u043d\u0430\u043a\u043e, \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:\n- **need_downcast=False**\n- **iterator=True**\n\n`auto_read_sql` \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u0435\u0440\u0442\u043a\u043e\u0439 \u0432\u043e\u043a\u0440\u0443\u0433 `read_sql` \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:\n- **chunksize=500000**\n- **need_downcast=True**\n- **iterator=False**\n\n\n## \u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 DataFrame \u0446\u0435\u043b\u0438\u043a\u043e\u043c, \u043a\u0430\u043a `pd.read_sql()`\n````python\nfrom df_loader import read_sql\n\ndf = read_sql(query, con)\n````\n\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 Dataframe \u0447\u0430\u043d\u043a\u0430\u043c\u0438, \u043a\u0430\u043a `pd.read_sql()`\n````python\nfrom df_loader import read_sql\n\niterator = read_sql(query, con, chunksize=20000)\n````\n\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 Dataframe \u0446\u0435\u043b\u0438\u043a\u043e\u043c, \u043d\u043e \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438\n````python\nfrom df_loader import read_sql\n\ndf = read_sql(query, con, need_downcast=True)\n````\n\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 Dataframe \u0447\u0430\u043d\u043a\u0430\u043c\u0438, \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438\n````python\nfrom df_loader import read_sql\n\niterator = read_sql(query, con, chunksize=20000, need_downcast=True)\n````\n\n\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 Dataframe (\u043d\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430!) \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438, \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0430\u043d\u043a\u0430\u043c\u0438\n````python\nfrom df_loader import read_sql\n\ndf = read_sql(query, con, chunksize=20000, need_downcast=True, iterator=False)\n````\n\n\u0422\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `auto_read_sql`\n````python\nfrom df_loader import auto_read_sql\n\ndf = auto_read_sql(query, con)\n````\n\n\n## \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\n\u0414\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0431\u043e\u043b\u0435\u0435, \n\u043d\u0430\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0447\u0430\u043d\u043a\u0430\u043c\u0438, \u0442\u043a \u043f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u0441\u0434\u0430\u0443\u043d\u043a\u0430\u0441\u0442\u0438\u0442\u044c \n\u0442\u0438\u043f\u044b, \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d DataFrame \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0430\u043d\u0434\u0430\u0441 (\u0442.\u0435. \u0441 \u0436\u0438\u0440\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438)\n\n\n## sql_load interface\n````python\nfrom df_loader import read_sql\n\nread_sql(sql,\n         con,\n         index_col=None,\n         coerce_float=True,\n         params=None,\n         parse_dates=None,\n         columns=None,\n         chunksize=None,\n         need_downcast=False,\n         column_types=None,\n         iterator=True)\n````\n\n#### sql\nstring or SQLAlchemy Selectable (select or text object) SQL query to be executed or a table name.\n\n#### con\nSQLAlchemy connectable (engine/connection) or database string URI or DBAPI2 connection (fallback mode).\n\nUsing SQLAlchemy makes it possible to use any DB supported by that\nlibrary. If a DBAPI2 object, only sqlite3 is supported. The user is responsible\nfor engine disposal and connection closure for the SQLAlchemy connectable. \n\n#### index_col: string or list of str, default: None\nColumn(s) to set as index(MultiIndex).\n\n#### coerce_float: boolean, default True\nAttempts to convert values of non-string, non-numeric objects (like\ndecimal.Decimal) to floating point, useful for SQL result sets.\n\n#### params: list, tuple or dict, optional, default: None\nList of parameters to pass to execute method.  The syntax used\nto pass parameters is database driver dependent. Check your\ndatabase driver documentation for which of the five syntax styles,\ndescribed in PEP 249's paramstyle, is supported.\n\nEg. for psycopg2, uses %(name)s so use params={'name' : 'value'}.\n\n#### parse_dates: list or dict, default: None\n- List of column names to parse as dates.\n- Dict of ``{column_name: format string}`` where format string is\n  strftime compatible in case of parsing string times, or is one of\n  (D, s, ns, ms, us) in case of parsing integer timestamps.\n- Dict of ``{column_name: arg dict}``, where the arg dict corresponds\n  to the keyword arguments of :func:`pandas.to_datetime`\n  Especially useful with databases without native Datetime support,\n  such as SQLite.\n\n#### columns: list, default: None\nList of column names to select from SQL table (only used when reading\na table).\n\n\n#### chunksize: int, default None\n\u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d, \u0442\u043e:\n1) **\u0435\u0441\u043b\u0438 iterator=True**, \u0432\u0435\u0440\u043d\u0435\u0442 \u0432\u0435\u0440\u043d\u0435\u0442 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\n2) **\u0435\u0441\u043b\u0438 iterator=False**, \u0447\u0430\u043d\u043a\u0430\u043c\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b, \n\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442 \u0438\u0445 \u0432 \u043e\u0434\u0438\u043d \u0438 \u0432\u0435\u0440\u043d\u0435\u0442 \u0435\u0433\u043e \u043a\u0430\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\n\n#### need_downcast: bool, default False\n\u0424\u043b\u0430\u0433, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u0443\u0436\u043d\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442.\n\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043b\u0435\u0436\u0430\u0442 \u043b\u0438 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \nuint8 -> uint16 -> ... -> int8 -> ... - > int64 -> float16 -> ... -> float64 -> object.\n\n\u0415\u0441\u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0447\u0430\u043d\u043a\u0430\u043c\u0438, \u0442\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u0438\u043f\u044b \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0447\u0430\u043d\u043a\u043e\u0432 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043a \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u043c\u0443.\n\n\n#### column_types: list, default None\nNot Implemented\n\n\n#### iterator: bool, default True\n\u0424\u043b\u0430\u0433, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0449\u0438\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u0438\u043b\u0438 \u0443\u0436\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0438\u0437 \n\u0447\u0430\u043d\u043a\u043e\u0432 DataFrame (\u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d chunksize).\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "df-loader", "package_url": "https://pypi.org/project/df-loader/", "platform": "", "project_url": "https://pypi.org/project/df-loader/", "project_urls": null, "release_url": "https://pypi.org/project/df-loader/1.0.3/", "requires_dist": ["certifi (==2019.9.11)", "memory-profiler (==0.55.0)", "numpy (==1.17.4)", "pandas (==0.25.3)", "psutil (==5.6.5)", "python-dateutil (==2.8.1)", "pytz (==2019.3)", "six (==1.13.0)", "SQLAlchemy (==1.3.11)"], "requires_python": "", "summary": "To optimization load DataFrame from databases", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>df_loader</h1>\n<p>\u041c\u043e\u0434\u0443\u043b\u044c, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <code>read_sql()</code> \u0438 <code>auto_read_sql()</code>.</p>\n<p>\u0414\u0430\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 DataFrame, \u043a\u043e\u0442\u043e\u0440\u044b\u0439\n\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0443\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u0427\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435\n\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440,\nDataFrame, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b <code>promocodes.dbo.recsys_wgh2_train_nmf_coef</code>,\n\u0431\u0443\u0434\u0435\u0442 \u0432\u0435\u0441\u0438\u0442\u044c \u043d\u0430 64% \u043c\u0435\u043d\u044c\u0448\u0435.</p>\n<p><code>read_sql</code>  \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b <code>pandas.read_sql()</code> \u0438 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043c\u0435\u0442\u043e\u0434\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e\n\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c \u0441 \u043d\u0438\u043c. \u041e\u0434\u043d\u0430\u043a\u043e, \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:</p>\n<ul>\n<li><strong>need_downcast=False</strong></li>\n<li><strong>iterator=True</strong></li>\n</ul>\n<p><code>auto_read_sql</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u0435\u0440\u0442\u043a\u043e\u0439 \u0432\u043e\u043a\u0440\u0443\u0433 <code>read_sql</code> \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:</p>\n<ul>\n<li><strong>chunksize=500000</strong></li>\n<li><strong>need_downcast=True</strong></li>\n<li><strong>iterator=False</strong></li>\n</ul>\n<h2>\u041f\u0440\u0438\u043c\u0435\u0440\u044b</h2>\n<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 DataFrame \u0446\u0435\u043b\u0438\u043a\u043e\u043c, \u043a\u0430\u043a <code>pd.read_sql()</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">df_loader</span> <span class=\"kn\">import</span> <span class=\"n\">read_sql</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"p\">)</span>\n</pre>\n<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 Dataframe \u0447\u0430\u043d\u043a\u0430\u043c\u0438, \u043a\u0430\u043a <code>pd.read_sql()</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">df_loader</span> <span class=\"kn\">import</span> <span class=\"n\">read_sql</span>\n\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"mi\">20000</span><span class=\"p\">)</span>\n</pre>\n<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 Dataframe \u0446\u0435\u043b\u0438\u043a\u043e\u043c, \u043d\u043e \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">df_loader</span> <span class=\"kn\">import</span> <span class=\"n\">read_sql</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"p\">,</span> <span class=\"n\">need_downcast</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430 Dataframe \u0447\u0430\u043d\u043a\u0430\u043c\u0438, \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">df_loader</span> <span class=\"kn\">import</span> <span class=\"n\">read_sql</span>\n\n<span class=\"n\">iterator</span> <span class=\"o\">=</span> <span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"mi\">20000</span><span class=\"p\">,</span> <span class=\"n\">need_downcast</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 Dataframe (\u043d\u0435 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440\u0430!) \u0441 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438, \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0430\u043d\u043a\u0430\u043c\u0438</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">df_loader</span> <span class=\"kn\">import</span> <span class=\"n\">read_sql</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"mi\">20000</span><span class=\"p\">,</span> <span class=\"n\">need_downcast</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">iterator</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>\u0422\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e <code>auto_read_sql</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">df_loader</span> <span class=\"kn\">import</span> <span class=\"n\">auto_read_sql</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">auto_read_sql</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">con</span><span class=\"p\">)</span>\n</pre>\n<h2>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f</h2>\n<p>\u0414\u043b\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u0431\u043e\u043b\u0435\u0435,\n\u043d\u0430\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0447\u0430\u043d\u043a\u0430\u043c\u0438, \u0442\u043a \u043f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u0441\u0434\u0430\u0443\u043d\u043a\u0430\u0441\u0442\u0438\u0442\u044c\n\u0442\u0438\u043f\u044b, \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d DataFrame \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u043f\u0430\u043d\u0434\u0430\u0441 (\u0442.\u0435. \u0441 \u0436\u0438\u0440\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430\u043c\u0438)</p>\n<h2>sql_load interface</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">df_loader</span> <span class=\"kn\">import</span> <span class=\"n\">read_sql</span>\n\n<span class=\"n\">read_sql</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span>\n         <span class=\"n\">con</span><span class=\"p\">,</span>\n         <span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">coerce_float</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n         <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">parse_dates</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">need_downcast</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n         <span class=\"n\">column_types</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n         <span class=\"n\">iterator</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h4>sql</h4>\n<p>string or SQLAlchemy Selectable (select or text object) SQL query to be executed or a table name.</p>\n<h4>con</h4>\n<p>SQLAlchemy connectable (engine/connection) or database string URI or DBAPI2 connection (fallback mode).</p>\n<p>Using SQLAlchemy makes it possible to use any DB supported by that\nlibrary. If a DBAPI2 object, only sqlite3 is supported. The user is responsible\nfor engine disposal and connection closure for the SQLAlchemy connectable.</p>\n<h4>index_col: string or list of str, default: None</h4>\n<p>Column(s) to set as index(MultiIndex).</p>\n<h4>coerce_float: boolean, default True</h4>\n<p>Attempts to convert values of non-string, non-numeric objects (like\ndecimal.Decimal) to floating point, useful for SQL result sets.</p>\n<h4>params: list, tuple or dict, optional, default: None</h4>\n<p>List of parameters to pass to execute method.  The syntax used\nto pass parameters is database driver dependent. Check your\ndatabase driver documentation for which of the five syntax styles,\ndescribed in PEP 249's paramstyle, is supported.</p>\n<p>Eg. for psycopg2, uses %(name)s so use params={'name' : 'value'}.</p>\n<h4>parse_dates: list or dict, default: None</h4>\n<ul>\n<li>List of column names to parse as dates.</li>\n<li>Dict of <code>{column_name: format string}</code> where format string is\nstrftime compatible in case of parsing string times, or is one of\n(D, s, ns, ms, us) in case of parsing integer timestamps.</li>\n<li>Dict of <code>{column_name: arg dict}</code>, where the arg dict corresponds\nto the keyword arguments of :func:<code>pandas.to_datetime</code>\nEspecially useful with databases without native Datetime support,\nsuch as SQLite.</li>\n</ul>\n<h4>columns: list, default: None</h4>\n<p>List of column names to select from SQL table (only used when reading\na table).</p>\n<h4>chunksize: int, default None</h4>\n<p>\u0415\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d, \u0442\u043e:</p>\n<ol>\n<li><strong>\u0435\u0441\u043b\u0438 iterator=True</strong>, \u0432\u0435\u0440\u043d\u0435\u0442 \u0432\u0435\u0440\u043d\u0435\u0442 \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440</li>\n<li><strong>\u0435\u0441\u043b\u0438 iterator=False</strong>, \u0447\u0430\u043d\u043a\u0430\u043c\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u044b,\n\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442 \u0438\u0445 \u0432 \u043e\u0434\u0438\u043d \u0438 \u0432\u0435\u0440\u043d\u0435\u0442 \u0435\u0433\u043e \u043a\u0430\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</li>\n</ol>\n<h4>need_downcast: bool, default False</h4>\n<p>\u0424\u043b\u0430\u0433, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0449\u0438\u0439 \u043d\u0443\u0436\u043d\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442.</p>\n<p>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043b\u0435\u0436\u0430\u0442 \u043b\u0438 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438\nuint8 -&gt; uint16 -&gt; ... -&gt; int8 -&gt; ... - &gt; int64 -&gt; float16 -&gt; ... -&gt; float64 -&gt; object.</p>\n<p>\u0415\u0441\u043b\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0447\u0430\u043d\u043a\u0430\u043c\u0438, \u0442\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u0438\u043f\u044b \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0447\u0430\u043d\u043a\u043e\u0432 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043a \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u043c\u0443.</p>\n<h4>column_types: list, default None</h4>\n<p>Not Implemented</p>\n<h4>iterator: bool, default True</h4>\n<p>\u0424\u043b\u0430\u0433, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0449\u0438\u0439 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0438\u0442\u0435\u0440\u0430\u0442\u043e\u0440 \u0438\u043b\u0438 \u0443\u0436\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0438\u0437\n\u0447\u0430\u043d\u043a\u043e\u0432 DataFrame (\u0435\u0441\u043b\u0438 \u0437\u0430\u0434\u0430\u043d chunksize).</p>\n\n          </div>"}, "last_serial": 6247944, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b52de4aeba6ef5c4fffb030bf7a00bc1", "sha256": "6387d32e6d9eeabad6304bf232dd87cfd2835003a371a369698a23649194504a"}, "downloads": -1, "filename": "df_loader-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b52de4aeba6ef5c4fffb030bf7a00bc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27923, "upload_time": "2019-11-26T14:26:41", "upload_time_iso_8601": "2019-11-26T14:26:41.186361Z", "url": "https://files.pythonhosted.org/packages/84/8d/c5c66452175d257274f22a7707fe02a8cc46babb6d0f0e0a58ca11f84635/df_loader-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dbc10af0e1952a397211c42210c8b69", "sha256": "64b67449bda1f0bb344e66e1d59723eec9ad673c902c63668df65d5695145a95"}, "downloads": -1, "filename": "df_loader-1.0.tar.gz", "has_sig": false, "md5_digest": "7dbc10af0e1952a397211c42210c8b69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11018, "upload_time": "2019-11-26T14:26:47", "upload_time_iso_8601": "2019-11-26T14:26:47.988659Z", "url": "https://files.pythonhosted.org/packages/48/18/4e1cc7ca1234274a32bac2c28f8982558722a9e1da506ee9c65fc39e054f/df_loader-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "973fce0e5b02ab6a9d489da15230b2c7", "sha256": "1bb9cea5102834ef8ac30a6935402a2b07feb9c108d271ba2fb1b85d28bcf111"}, "downloads": -1, "filename": "df_loader-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "973fce0e5b02ab6a9d489da15230b2c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15927, "upload_time": "2019-11-26T14:30:04", "upload_time_iso_8601": "2019-11-26T14:30:04.901950Z", "url": "https://files.pythonhosted.org/packages/42/64/8b8bde92b123128fe5d51f847b61f15ac3005297d0b912b092af9c1694a2/df_loader-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "027a5dbdb63bdd497e6433a68bd3ea76", "sha256": "18930a5240e870878ab6c4ca90ce151ba0d64c4691e5b49a23ff6d671a40a066"}, "downloads": -1, "filename": "df_loader-1.0.1.tar.gz", "has_sig": false, "md5_digest": "027a5dbdb63bdd497e6433a68bd3ea76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11014, "upload_time": "2019-11-26T14:30:07", "upload_time_iso_8601": "2019-11-26T14:30:07.600695Z", "url": "https://files.pythonhosted.org/packages/75/25/f628973edf0a164c9c6ed579c7614a06731befe171b99f077bda90825df7/df_loader-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "9046847ade13e37cc028149918d4bb69", "sha256": "9ef34c0feb191ede170366e06e728925188d83c71a64c87528a7f1c353937399"}, "downloads": -1, "filename": "df_loader-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9046847ade13e37cc028149918d4bb69", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15938, "upload_time": "2019-12-04T14:55:20", "upload_time_iso_8601": "2019-12-04T14:55:20.424295Z", "url": "https://files.pythonhosted.org/packages/dd/d1/040d14bcfb172824f580b1c382cf5fbcf887d73310d890a7d990436871cc/df_loader-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ac7363ae44222258dd47fbf6bcad027", "sha256": "23aa16503aa582f0abf3b4ae9756273ea198b2536ae3fcba80a0f93d45a5b7c7"}, "downloads": -1, "filename": "df_loader-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5ac7363ae44222258dd47fbf6bcad027", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11025, "upload_time": "2019-12-04T14:55:23", "upload_time_iso_8601": "2019-12-04T14:55:23.756536Z", "url": "https://files.pythonhosted.org/packages/c5/36/d6f90687540579dae6d762459141b10ca5dfc4440e106c45ab8c9f10c3b9/df_loader-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "031f9ae8f2aeb0ccd209fa3944fd00a7", "sha256": "26aea2db3a81a9545232a254c05adeceff6187ca2f1b48ab5d1c429d58b22a13"}, "downloads": -1, "filename": "df_loader-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "031f9ae8f2aeb0ccd209fa3944fd00a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15962, "upload_time": "2019-12-05T15:26:44", "upload_time_iso_8601": "2019-12-05T15:26:44.562783Z", "url": "https://files.pythonhosted.org/packages/dd/4f/1b0020b8b3c3476a867ec737d17e14cd6bc616f4de3b4e2c70ec034d174d/df_loader-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf6f6ae9c3789a63642dde63b077486c", "sha256": "41a496c03dc2813ef2577557a9bb0b6059f2081093b8855b82b312fd4b3964c5"}, "downloads": -1, "filename": "df_loader-1.0.3.tar.gz", "has_sig": false, "md5_digest": "cf6f6ae9c3789a63642dde63b077486c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11046, "upload_time": "2019-12-05T15:26:48", "upload_time_iso_8601": "2019-12-05T15:26:48.475280Z", "url": "https://files.pythonhosted.org/packages/4a/5f/0d9c5f8f792fa4eb2aaf8cd2ddf9523a16c153b26b8d6f61110ad1237365/df_loader-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "031f9ae8f2aeb0ccd209fa3944fd00a7", "sha256": "26aea2db3a81a9545232a254c05adeceff6187ca2f1b48ab5d1c429d58b22a13"}, "downloads": -1, "filename": "df_loader-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "031f9ae8f2aeb0ccd209fa3944fd00a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15962, "upload_time": "2019-12-05T15:26:44", "upload_time_iso_8601": "2019-12-05T15:26:44.562783Z", "url": "https://files.pythonhosted.org/packages/dd/4f/1b0020b8b3c3476a867ec737d17e14cd6bc616f4de3b4e2c70ec034d174d/df_loader-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf6f6ae9c3789a63642dde63b077486c", "sha256": "41a496c03dc2813ef2577557a9bb0b6059f2081093b8855b82b312fd4b3964c5"}, "downloads": -1, "filename": "df_loader-1.0.3.tar.gz", "has_sig": false, "md5_digest": "cf6f6ae9c3789a63642dde63b077486c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11046, "upload_time": "2019-12-05T15:26:48", "upload_time_iso_8601": "2019-12-05T15:26:48.475280Z", "url": "https://files.pythonhosted.org/packages/4a/5f/0d9c5f8f792fa4eb2aaf8cd2ddf9523a16c153b26b8d6f61110ad1237365/df_loader-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:46 2020"}