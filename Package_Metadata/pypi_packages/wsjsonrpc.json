{"info": {"author": "D\u00f3nal McMullan", "author_email": "donal.mcmullan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Twisted", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Communications", "Topic :: System :: Distributed Computing"], "description": "# wsJsonRpc\n\n**WsJsonRpc** is a [Twisted Python](https://github.com/twisted/twisted) protocol to support [JSON-RPC 2.0](https://www.jsonrpc.org/specification) over [websocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API). The underlying websocket implementation is provided by [Autobahn](https://github.com/crossbario/autobahn-python).\n\n## Features\nBoth the client and server endpoints are fully bidirectional. Once the client connects to the server and the server accepts the connection, either endpoint can initiate requests or notifications on the remote side.\n\nTested versions:\n - Pypy 2.7\n - Pypy 3.6\n - Python 3.7\n\nTest coverage is 92%.\n\n## Usage\nA simple server application should expose at least one method to clients. Here we register a `math.sum` method in the API.\n```python\n#!/usr/bin/env python\n\nimport sys\n\nfrom twisted import logger\nfrom twisted.internet import reactor\n\nfrom wsjsonrpc import factory\n\nlogobserver = logger.textFileLogObserver(sys.stdout)\nlogger.globalLogPublisher.addObserver(logobserver)\n\ndef _sum(protocol, x, y):\n    return x + y\n\nif __name__ == \"__main__\":\n\n    factory = factory.JsonRpcWebSocketServerFactory(u\"ws://127.0.0.1:8095/wsjsonrpc\")\n    factory.registerMethod(\"math.sum\", _sum)\n\n    reactor.listenTCP(8095, factory)\n    reactor.run()\n```\nThis client calls that remote `math.sum` method, and then exits.\n```python\n#!/usr/bin/env python\n\nimport sys\n\nfrom twisted import logger\nfrom twisted.internet import defer\nfrom twisted.internet import task\n\nfrom wsjsonrpc import factory\n\nlogobserver = logger.textFileLogObserver(sys.stdout)\nlogger.globalLogPublisher.addObserver(logobserver)\nlog = logger.Logger()\n\n@defer.inlineCallbacks\ndef main(reactor):\n\n    result = None\n    protocol = yield factory.get_client(hostname=\"localhost\", port=8095, path=u\"wsjsonrpc\")\n\n    \"\"\"\n    Call the 'math.sum' method on our peer and log the result.\n    \"\"\"\n    result = yield protocol.request(\"math.sum\", [1, 2])\n    log.debug(\"sum result: {}\".format(result))\n    yield result\n\ntask.react(main)\n```\n## Batch requests\nBoth the client and server will accept and process batch requests. Call `request` or `notify` as often as you need to in the batch context. When you exit the context, the batch will be sent to the peer.\n```python\n#!/usr/bin/env python\n\nimport sys\n\nfrom twisted import logger\nfrom twisted.internet import defer\nfrom twisted.internet import task\n\nfrom wsjsonrpc import factory\n\nlogobserver = logger.textFileLogObserver(sys.stdout)\nlogger.globalLogPublisher.addObserver(logobserver)\nlog = logger.Logger()\n\n@defer.inlineCallbacks\ndef main(reactor):\n\n    protocol = yield factory.get_client(hostname=\"localhost\", port=8095, path=u\"wsjsonrpc\")\n\n    df = None\n    with protocol.batchContext() as batch:\n        batch.request(\"math.sum\", [1, 2])\n        batch.request(\"math.sum\", [2, 3])\n        batch.request(\"math.sum\", [3, 4])\n        batch.request(\"math.sum\", [4, 5])\n        df = batch.deferredList(consumeErrors=1)\n\n    result = yield df\n\n    log.debug(\"sum result: {}\".format(result))\n    yield result\n\ntask.react(main)\n```\nA batch can be submitted without the context manager. The following batch includes two calls to `notify`. Note that the `notify` method does not return a deferred, as notifications do not generate any response from the server.\n\nThe `defer.gatherResults` call here does not wait for the `notify` calls to complete - as soon as they are dispatched to the peer they are complete.\n```python\n    batch = protocol.batch()\n    df0 = batch.request(\"math.sum\", [1, 2])\n    df1 = batch.request(\"math.sum\", [2, 3])\n    batch.notify(\"math.sum\", [3, 4])\n    batch.notify(\"math.sum\", [4, 5])\n\n    df = defer.gatherResults(batch.deferreds, consumeErrors=1)\n    batch.sendBatch()\n    yield df\n```\n## Implementing an API\nYour API methods must take `protocol` as their first argument, and all other arguments should be either positional only or keyword only, for example:\n```python\ndef sum_positional(protocol, x, y):\n    return x + y\n\ndef sum_keyword(protocol, x=0, y=0):\n    return x + y\n```\nThe JSON-RPC spec requires that each request can have one `params` value which MUST be either a `dict`, a `list` or `None`. If WsJsonRpc receives `params` as a list, it expands it into positional arguments:\n```python\n# client: \nprotocol.request(\"math.sum\", [1, 2])\n# server:\nsum_positional(*params)\n```\nIf it receives `params` as a dict, it expands it into keyword arguments:\n```python\n# client: \nprotocol.request(\"math.sum\", {\"x\":1, \"y\":2})\n# server:\nsum_keyword(**params)\n```\n\n## Error handling in your API\nIf an error occurs in your API, you might want to catch and log that exception, and then raise an exception from the `wsjsonrpc.exception.JsonRpcException` family. The WsJsonRpc protocol will extract the correct error code and message from that exception to return a valid error object to the remote peer.\n\nIt's likely that this will be a `JsonRpcInternalError`, but it could also be `JsonRpcMethodNotFound` or a custom subclass of `JsonRpcCustomException` that you have created. See the JSON-RPC documentation of the [Error object](https://www.jsonrpc.org/specification#error_object) for guidance on that.\n\nIf your API raises any other exception, WsJsonRpc will repackage that into a `JsonRpcInternalError` which is probably what you want anyway.\n\n## Authentication\nNote that on the server side, the first argument that is passed into any API method will be the protocol instance itself. This allows you to write methods that authenticate the client (or peer), and then store the client's identity information as an attribute on your custom protocol implementation.\n\nSubsequent API calls will then be able to access that identity information.\n\nAlternatively, if your WsJsonRpc endpoint is one route in a larger web application, you could use the protocol to access the WebSocket request's authentication cookie.\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/donalm/wsjsonrpc", "keywords": "websocket,twisted,autobahn,jsonrpc,rpc", "license": "", "maintainer": "", "maintainer_email": "", "name": "wsjsonrpc", "package_url": "https://pypi.org/project/wsjsonrpc/", "platform": "", "project_url": "https://pypi.org/project/wsjsonrpc/", "project_urls": {"Homepage": "https://gitlab.com/donalm/wsjsonrpc"}, "release_url": "https://pypi.org/project/wsjsonrpc/0.0.1/", "requires_dist": ["autobahn", "twisted"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "summary": "JSON-RPC 2.0 over websockets", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>wsJsonRpc</h1>\n<p><strong>WsJsonRpc</strong> is a <a href=\"https://github.com/twisted/twisted\" rel=\"nofollow\">Twisted Python</a> protocol to support <a href=\"https://www.jsonrpc.org/specification\" rel=\"nofollow\">JSON-RPC 2.0</a> over <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\" rel=\"nofollow\">websocket</a>. The underlying websocket implementation is provided by <a href=\"https://github.com/crossbario/autobahn-python\" rel=\"nofollow\">Autobahn</a>.</p>\n<h2>Features</h2>\n<p>Both the client and server endpoints are fully bidirectional. Once the client connects to the server and the server accepts the connection, either endpoint can initiate requests or notifications on the remote side.</p>\n<p>Tested versions:</p>\n<ul>\n<li>Pypy 2.7</li>\n<li>Pypy 3.6</li>\n<li>Python 3.7</li>\n</ul>\n<p>Test coverage is 92%.</p>\n<h2>Usage</h2>\n<p>A simple server application should expose at least one method to clients. Here we register a <code>math.sum</code> method in the API.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wsjsonrpc</span> <span class=\"kn\">import</span> <span class=\"n\">factory</span>\n\n<span class=\"n\">logobserver</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">textFileLogObserver</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">globalLogPublisher</span><span class=\"o\">.</span><span class=\"n\">addObserver</span><span class=\"p\">(</span><span class=\"n\">logobserver</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_sum</span><span class=\"p\">(</span><span class=\"n\">protocol</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n\n    <span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">JsonRpcWebSocketServerFactory</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"ws://127.0.0.1:8095/wsjsonrpc\"</span><span class=\"p\">)</span>\n    <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">registerMethod</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"n\">_sum</span><span class=\"p\">)</span>\n\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">listenTCP</span><span class=\"p\">(</span><span class=\"mi\">8095</span><span class=\"p\">,</span> <span class=\"n\">factory</span><span class=\"p\">)</span>\n    <span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>This client calls that remote <code>math.sum</code> method, and then exits.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">task</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wsjsonrpc</span> <span class=\"kn\">import</span> <span class=\"n\">factory</span>\n\n<span class=\"n\">logobserver</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">textFileLogObserver</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">globalLogPublisher</span><span class=\"o\">.</span><span class=\"n\">addObserver</span><span class=\"p\">(</span><span class=\"n\">logobserver</span><span class=\"p\">)</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@defer</span><span class=\"o\">.</span><span class=\"n\">inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">):</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">get_client</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8095</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"wsjsonrpc\"</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Call the 'math.sum' method on our peer and log the result.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"sum result: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n    <span class=\"k\">yield</span> <span class=\"n\">result</span>\n\n<span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">react</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n</pre>\n<h2>Batch requests</h2>\n<p>Both the client and server will accept and process batch requests. Call <code>request</code> or <code>notify</code> as often as you need to in the batch context. When you exit the context, the batch will be sent to the peer.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">twisted</span> <span class=\"kn\">import</span> <span class=\"n\">logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">task</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wsjsonrpc</span> <span class=\"kn\">import</span> <span class=\"n\">factory</span>\n\n<span class=\"n\">logobserver</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">textFileLogObserver</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n<span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">globalLogPublisher</span><span class=\"o\">.</span><span class=\"n\">addObserver</span><span class=\"p\">(</span><span class=\"n\">logobserver</span><span class=\"p\">)</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@defer</span><span class=\"o\">.</span><span class=\"n\">inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">):</span>\n\n    <span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">get_client</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8095</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"wsjsonrpc\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">with</span> <span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">batchContext</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">batch</span><span class=\"p\">:</span>\n        <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n        <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n        <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n        <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n        <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">deferredList</span><span class=\"p\">(</span><span class=\"n\">consumeErrors</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">df</span>\n\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"s2\">\"sum result: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n    <span class=\"k\">yield</span> <span class=\"n\">result</span>\n\n<span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">react</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n</pre>\n<p>A batch can be submitted without the context manager. The following batch includes two calls to <code>notify</code>. Note that the <code>notify</code> method does not return a deferred, as notifications do not generate any response from the server.</p>\n<p>The <code>defer.gatherResults</code> call here does not wait for the <code>notify</code> calls to complete - as soon as they are dispatched to the peer they are complete.</p>\n<pre>    <span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">batch</span><span class=\"p\">()</span>\n    <span class=\"n\">df0</span> <span class=\"o\">=</span> <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n    <span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n    <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n    <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">notify</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">defer</span><span class=\"o\">.</span><span class=\"n\">gatherResults</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">deferreds</span><span class=\"p\">,</span> <span class=\"n\">consumeErrors</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">batch</span><span class=\"o\">.</span><span class=\"n\">sendBatch</span><span class=\"p\">()</span>\n    <span class=\"k\">yield</span> <span class=\"n\">df</span>\n</pre>\n<h2>Implementing an API</h2>\n<p>Your API methods must take <code>protocol</code> as their first argument, and all other arguments should be either positional only or keyword only, for example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">sum_positional</span><span class=\"p\">(</span><span class=\"n\">protocol</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sum_keyword</span><span class=\"p\">(</span><span class=\"n\">protocol</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n</pre>\n<p>The JSON-RPC spec requires that each request can have one <code>params</code> value which MUST be either a <code>dict</code>, a <code>list</code> or <code>None</code>. If WsJsonRpc receives <code>params</code> as a list, it expands it into positional arguments:</p>\n<pre><span class=\"c1\"># client: </span>\n<span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># server:</span>\n<span class=\"n\">sum_positional</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<p>If it receives <code>params</code> as a dict, it expands it into keyword arguments:</p>\n<pre><span class=\"c1\"># client: </span>\n<span class=\"n\">protocol</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"math.sum\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">})</span>\n<span class=\"c1\"># server:</span>\n<span class=\"n\">sum_keyword</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<h2>Error handling in your API</h2>\n<p>If an error occurs in your API, you might want to catch and log that exception, and then raise an exception from the <code>wsjsonrpc.exception.JsonRpcException</code> family. The WsJsonRpc protocol will extract the correct error code and message from that exception to return a valid error object to the remote peer.</p>\n<p>It's likely that this will be a <code>JsonRpcInternalError</code>, but it could also be <code>JsonRpcMethodNotFound</code> or a custom subclass of <code>JsonRpcCustomException</code> that you have created. See the JSON-RPC documentation of the <a href=\"https://www.jsonrpc.org/specification#error_object\" rel=\"nofollow\">Error object</a> for guidance on that.</p>\n<p>If your API raises any other exception, WsJsonRpc will repackage that into a <code>JsonRpcInternalError</code> which is probably what you want anyway.</p>\n<h2>Authentication</h2>\n<p>Note that on the server side, the first argument that is passed into any API method will be the protocol instance itself. This allows you to write methods that authenticate the client (or peer), and then store the client's identity information as an attribute on your custom protocol implementation.</p>\n<p>Subsequent API calls will then be able to access that identity information.</p>\n<p>Alternatively, if your WsJsonRpc endpoint is one route in a larger web application, you could use the protocol to access the WebSocket request's authentication cookie.</p>\n\n          </div>"}, "last_serial": 5957571, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "237d00960f03022a645ed34f9763d183", "sha256": "3627f8c5cd16ec0faf8129e1fe210b139d07d5eddda889899c0de3f249e4c83c"}, "downloads": -1, "filename": "wsjsonrpc-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "237d00960f03022a645ed34f9763d183", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "size": 13558, "upload_time": "2019-10-10T23:52:07", "upload_time_iso_8601": "2019-10-10T23:52:07.133206Z", "url": "https://files.pythonhosted.org/packages/78/9a/6e043c3a47f6fc1a93a6d7cff67aba9a0eed52b7b49af21f3ff366eae3f4/wsjsonrpc-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f95a615fdb76b9edfce563a9658cd76", "sha256": "83e1f0b8c0c3b479614b8a0d528bf76993e9f09b73db70cb3c6a620b24fc26e1"}, "downloads": -1, "filename": "wsjsonrpc-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "3f95a615fdb76b9edfce563a9658cd76", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "size": 12371, "upload_time": "2019-10-10T23:52:09", "upload_time_iso_8601": "2019-10-10T23:52:09.401703Z", "url": "https://files.pythonhosted.org/packages/cb/ea/0252ca2beb7e2dc02ebe8a0213d1afa5689640e79a7e1a219843a307d72c/wsjsonrpc-0.0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbd9bb09e210212e787d0575608297c7", "sha256": "a4416ddd3219264654f1ae085de538508c1fa9f689515640096eb99b7074d067"}, "downloads": -1, "filename": "wsjsonrpc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dbd9bb09e210212e787d0575608297c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "size": 13344, "upload_time": "2019-10-10T23:52:10", "upload_time_iso_8601": "2019-10-10T23:52:10.959490Z", "url": "https://files.pythonhosted.org/packages/49/c5/e76bcfe0185d503356940c6fb79a90ebde711a8e77c30d1b554f486f7505/wsjsonrpc-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "237d00960f03022a645ed34f9763d183", "sha256": "3627f8c5cd16ec0faf8129e1fe210b139d07d5eddda889899c0de3f249e4c83c"}, "downloads": -1, "filename": "wsjsonrpc-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "237d00960f03022a645ed34f9763d183", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "size": 13558, "upload_time": "2019-10-10T23:52:07", "upload_time_iso_8601": "2019-10-10T23:52:07.133206Z", "url": "https://files.pythonhosted.org/packages/78/9a/6e043c3a47f6fc1a93a6d7cff67aba9a0eed52b7b49af21f3ff366eae3f4/wsjsonrpc-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f95a615fdb76b9edfce563a9658cd76", "sha256": "83e1f0b8c0c3b479614b8a0d528bf76993e9f09b73db70cb3c6a620b24fc26e1"}, "downloads": -1, "filename": "wsjsonrpc-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "3f95a615fdb76b9edfce563a9658cd76", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "size": 12371, "upload_time": "2019-10-10T23:52:09", "upload_time_iso_8601": "2019-10-10T23:52:09.401703Z", "url": "https://files.pythonhosted.org/packages/cb/ea/0252ca2beb7e2dc02ebe8a0213d1afa5689640e79a7e1a219843a307d72c/wsjsonrpc-0.0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "dbd9bb09e210212e787d0575608297c7", "sha256": "a4416ddd3219264654f1ae085de538508c1fa9f689515640096eb99b7074d067"}, "downloads": -1, "filename": "wsjsonrpc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dbd9bb09e210212e787d0575608297c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "size": 13344, "upload_time": "2019-10-10T23:52:10", "upload_time_iso_8601": "2019-10-10T23:52:10.959490Z", "url": "https://files.pythonhosted.org/packages/49/c5/e76bcfe0185d503356940c6fb79a90ebde711a8e77c30d1b554f486f7505/wsjsonrpc-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:00 2020"}