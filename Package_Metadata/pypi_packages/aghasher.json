{"info": {"author": "Daniel Steinberg", "author_email": "ds@dannyadam.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Operating System :: Unix", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Information Analysis"], "description": "[![Build Status](https://github.com/dstein64/aghasher/workflows/build/badge.svg)](https://github.com/dstein64/aghasher/actions)\n\naghasher\n========\n\nAn implementation of the Anchor Graph Hashing algorithm (AGH-1), presented in *Hashing with Graphs* (Liu et al. 2011).\n\nDependencies\n------------\n\n*aghasher* supports Python 2.7 and Python 3, with numpy and scipy. These should be linked with a BLAS implementation\n(e.g., OpenBLAS, ATLAS, Intel MKL). Without being linked to BLAS, numpy/scipy will use a fallback that causes\nPyAnchorGraphHasher to run over 50x slower.\n\nInstallation\n------------\n\n[aghasher](https://pypi.python.org/pypi/aghasher) is available on PyPI, the Python Package Index.\n\n```sh\n$ pip install aghasher\n```\n\nHow To Use\n----------\n\nTo use aghasher, first import the *aghasher* module.\n\n    import aghasher\n    \n### Training a Model\n\nAn AnchorGraphHasher is constructed using the *train* method, which returns an AnchorGraphHasher and the hash bit\nembedding for the training data.\n\n    agh, H_train = aghasher.AnchorGraphHasher.train(X, anchors, num_bits, nn_anchors, sigma)\n\nAnchorGraphHasher.train takes 5 arguments:\n\n* **X** An *n-by-d* numpy.ndarray with training data. The rows correspond to *n* observations, and the columns\n  correspond to *d* dimensions.\n* **anchors** An *m-by-d* numpy.ndarray with anchors. *m* is the total number of anchors. Rows correspond to anchors,\n  and columns correspond to dimensions. The dimensionality of the anchors much match the dimensionality of the training\n  data.\n* **num_bits** (optional; defaults to 12) Number of hash bits for the embedding.\n* **nn_anchors** (optional; defaults to 2) Number of nearest anchors that are used for approximating the neighborhood\n  structure.\n* **sigma** (optional; defaults to *None*) sigma for the Gaussian radial basis function that is used to determine\n  similarity between points. When sigma is specified as *None*, the code will automatically set a value, depending on\n  the training data and anchors.\n\n### Hashing Data with an AnchorGraphHasher Model\n\nWith an AnchorGraphHasher object, which has variable name *agh* in the preceding and following examples, hashing\nout-of-sample data is done with the object's *hash* method.\n\n    agh.hash(X)\n    \nThe hash method takes one argument:\n\n* **X** An *n-by-d* numpy.ndarray with data. The rows correspond to *n* observations, and the columns correspond to *d*\ndimensions. The dimensionality of the data much match the dimensionality of the training data used to train the\nAnchorGraphHasher.\n\nSince Python does not have a native bit vector data structure, the hash method returns an *n-by-r* numpy.ndarray, where\n*n* is the number of observations in *data*, and *r* is the number of hash bits specified when the model was trained.\nThe elements of the returned array are boolean values that correspond to bits.\n\n### Testing an AnchorGraphHasher Model\n\nTesting is performed with the AnchorGraphHasher.test method.\n\n    precision = AnchorGraphHasher.test(H_train, H_test, y_train, y_test, radius)\n    \nAnchorGraphHasher.test takes 5 arguments:\n\n* **H_train** An *n-by-r* numpy.ndarray with the hash bit embedding corresponding to the training data. The rows\n  correspond to the *n* observations, and the columns correspond to the *r* hash bits.\n* **H_test** An *m-by-r* numpy.ndarray with the hash bit embedding corresponding to the testing data. The rows\n  correspond to the *m* observations, and the columns correspond to the *r* hash bits.\n* **y_train** An *n-by-1* numpy.ndarray with the ground truth labels for the training data.\n* **y_test** An *m-by-1* numpy.ndarray with the ground truth labels for the testing data.\n* **radius** (optional; defaults to 2) Hamming radius to use for calculating precision.\n\nTests\n-----\n\nTests are in [tests/](https://github.com/dstein64/aghasher/blob/master/tests).\n\n```sh\n# Run tests\n$ python3 -m unittest discover tests -v\n```\n\nDifferences from the Matlab Reference Implementation\n----------------------------------------------------\n\nThe code is structured differently than the Matlab reference implementation.\n\nThe Matlab code implements an additional hashing method, hierarchical hashing (referred to as 2-AGH), an extension of\n1-AGH that is not implemented here.\n\nThere is one functional difference relative to the Matlab code. If *sigma* is specified (as opposed to being\nauto-estimated), then for the same value of *sigma*, the Matlab and Python code will produce different results. They\nwill produce the same results when the Matlab *sigma* is sqrt(2) times bigger than the manually specified *sigma* in the\nPython code. This is because in the Gaussian RBF kernel, the Python code uses a 2 in the denominator of the exponent,\nand the Matlab code does not. A 2 was included in the denominator of the Python code, as that is the canonical way to\nuse an RBF kernel.\n\nLicense\n-------\n\n*aghasher* has an [MIT License](https://en.wikipedia.org/wiki/MIT_License).\n\nSee [LICENSE](LICENSE).\n\nReferences\n----------\n\nLiu, Wei, Jun Wang, Sanjiv Kumar, and Shih-Fu Chang. 2011. \u201cHashing with Graphs.\u201d In Proceedings of the 28th\nInternational Conference on Machine Learning (ICML-11), edited by Lise Getoor and Tobias Scheffer, 1\u20138. ICML \u201911. New\nYork, NY, USA: ACM.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dstein64/aghasher", "keywords": "anchor-graph-hashing,hashing,locality-sensitive-hashing,machine-learning", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aghasher", "package_url": "https://pypi.org/project/aghasher/", "platform": "", "project_url": "https://pypi.org/project/aghasher/", "project_urls": {"Homepage": "https://github.com/dstein64/aghasher"}, "release_url": "https://pypi.org/project/aghasher/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "An implementation of Anchor Graph Hashing", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/dstein64/aghasher/actions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86a4e1c509affdd6f1489b59187e04936a3e0132/68747470733a2f2f6769746875622e636f6d2f64737465696e36342f61676861736865722f776f726b666c6f77732f6275696c642f62616467652e737667\"></a></p>\n<h1>aghasher</h1>\n<p>An implementation of the Anchor Graph Hashing algorithm (AGH-1), presented in <em>Hashing with Graphs</em> (Liu et al. 2011).</p>\n<h2>Dependencies</h2>\n<p><em>aghasher</em> supports Python 2.7 and Python 3, with numpy and scipy. These should be linked with a BLAS implementation\n(e.g., OpenBLAS, ATLAS, Intel MKL). Without being linked to BLAS, numpy/scipy will use a fallback that causes\nPyAnchorGraphHasher to run over 50x slower.</p>\n<h2>Installation</h2>\n<p><a href=\"https://pypi.python.org/pypi/aghasher\" rel=\"nofollow\">aghasher</a> is available on PyPI, the Python Package Index.</p>\n<pre>$ pip install aghasher\n</pre>\n<h2>How To Use</h2>\n<p>To use aghasher, first import the <em>aghasher</em> module.</p>\n<pre><code>import aghasher\n</code></pre>\n<h3>Training a Model</h3>\n<p>An AnchorGraphHasher is constructed using the <em>train</em> method, which returns an AnchorGraphHasher and the hash bit\nembedding for the training data.</p>\n<pre><code>agh, H_train = aghasher.AnchorGraphHasher.train(X, anchors, num_bits, nn_anchors, sigma)\n</code></pre>\n<p>AnchorGraphHasher.train takes 5 arguments:</p>\n<ul>\n<li><strong>X</strong> An <em>n-by-d</em> numpy.ndarray with training data. The rows correspond to <em>n</em> observations, and the columns\ncorrespond to <em>d</em> dimensions.</li>\n<li><strong>anchors</strong> An <em>m-by-d</em> numpy.ndarray with anchors. <em>m</em> is the total number of anchors. Rows correspond to anchors,\nand columns correspond to dimensions. The dimensionality of the anchors much match the dimensionality of the training\ndata.</li>\n<li><strong>num_bits</strong> (optional; defaults to 12) Number of hash bits for the embedding.</li>\n<li><strong>nn_anchors</strong> (optional; defaults to 2) Number of nearest anchors that are used for approximating the neighborhood\nstructure.</li>\n<li><strong>sigma</strong> (optional; defaults to <em>None</em>) sigma for the Gaussian radial basis function that is used to determine\nsimilarity between points. When sigma is specified as <em>None</em>, the code will automatically set a value, depending on\nthe training data and anchors.</li>\n</ul>\n<h3>Hashing Data with an AnchorGraphHasher Model</h3>\n<p>With an AnchorGraphHasher object, which has variable name <em>agh</em> in the preceding and following examples, hashing\nout-of-sample data is done with the object's <em>hash</em> method.</p>\n<pre><code>agh.hash(X)\n</code></pre>\n<p>The hash method takes one argument:</p>\n<ul>\n<li><strong>X</strong> An <em>n-by-d</em> numpy.ndarray with data. The rows correspond to <em>n</em> observations, and the columns correspond to <em>d</em>\ndimensions. The dimensionality of the data much match the dimensionality of the training data used to train the\nAnchorGraphHasher.</li>\n</ul>\n<p>Since Python does not have a native bit vector data structure, the hash method returns an <em>n-by-r</em> numpy.ndarray, where\n<em>n</em> is the number of observations in <em>data</em>, and <em>r</em> is the number of hash bits specified when the model was trained.\nThe elements of the returned array are boolean values that correspond to bits.</p>\n<h3>Testing an AnchorGraphHasher Model</h3>\n<p>Testing is performed with the AnchorGraphHasher.test method.</p>\n<pre><code>precision = AnchorGraphHasher.test(H_train, H_test, y_train, y_test, radius)\n</code></pre>\n<p>AnchorGraphHasher.test takes 5 arguments:</p>\n<ul>\n<li><strong>H_train</strong> An <em>n-by-r</em> numpy.ndarray with the hash bit embedding corresponding to the training data. The rows\ncorrespond to the <em>n</em> observations, and the columns correspond to the <em>r</em> hash bits.</li>\n<li><strong>H_test</strong> An <em>m-by-r</em> numpy.ndarray with the hash bit embedding corresponding to the testing data. The rows\ncorrespond to the <em>m</em> observations, and the columns correspond to the <em>r</em> hash bits.</li>\n<li><strong>y_train</strong> An <em>n-by-1</em> numpy.ndarray with the ground truth labels for the training data.</li>\n<li><strong>y_test</strong> An <em>m-by-1</em> numpy.ndarray with the ground truth labels for the testing data.</li>\n<li><strong>radius</strong> (optional; defaults to 2) Hamming radius to use for calculating precision.</li>\n</ul>\n<h2>Tests</h2>\n<p>Tests are in <a href=\"https://github.com/dstein64/aghasher/blob/master/tests\" rel=\"nofollow\">tests/</a>.</p>\n<pre><span class=\"c1\"># Run tests</span>\n$ python3 -m unittest discover tests -v\n</pre>\n<h2>Differences from the Matlab Reference Implementation</h2>\n<p>The code is structured differently than the Matlab reference implementation.</p>\n<p>The Matlab code implements an additional hashing method, hierarchical hashing (referred to as 2-AGH), an extension of\n1-AGH that is not implemented here.</p>\n<p>There is one functional difference relative to the Matlab code. If <em>sigma</em> is specified (as opposed to being\nauto-estimated), then for the same value of <em>sigma</em>, the Matlab and Python code will produce different results. They\nwill produce the same results when the Matlab <em>sigma</em> is sqrt(2) times bigger than the manually specified <em>sigma</em> in the\nPython code. This is because in the Gaussian RBF kernel, the Python code uses a 2 in the denominator of the exponent,\nand the Matlab code does not. A 2 was included in the denominator of the Python code, as that is the canonical way to\nuse an RBF kernel.</p>\n<h2>License</h2>\n<p><em>aghasher</em> has an <a href=\"https://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT License</a>.</p>\n<p>See <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n<h2>References</h2>\n<p>Liu, Wei, Jun Wang, Sanjiv Kumar, and Shih-Fu Chang. 2011. \u201cHashing with Graphs.\u201d In Proceedings of the 28th\nInternational Conference on Machine Learning (ICML-11), edited by Lise Getoor and Tobias Scheffer, 1\u20138. ICML \u201911. New\nYork, NY, USA: ACM.</p>\n\n          </div>"}, "last_serial": 6807687, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "83114f64faf03a03969528566841f702", "sha256": "61a41ca6a76acfeeee082bcc278c1d572965bfd3c996b2b144ad6d87d458ff6a"}, "downloads": -1, "filename": "aghasher-0.0.2.tar.gz", "has_sig": false, "md5_digest": "83114f64faf03a03969528566841f702", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6558, "upload_time": "2019-11-07T17:30:58", "upload_time_iso_8601": "2019-11-07T17:30:58.777475Z", "url": "https://files.pythonhosted.org/packages/38/7c/cfd1280bca9167a980fbc62ef637078a421a33477c5e35e70cf404ef2213/aghasher-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b88c40192a91467c287003d542c9cb1d", "sha256": "8fdf03da8edad3e5264a011025bd6ac6437eed914726b5d46d949640cd7a48d4"}, "downloads": -1, "filename": "aghasher-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b88c40192a91467c287003d542c9cb1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6595, "upload_time": "2020-03-13T18:07:23", "upload_time_iso_8601": "2020-03-13T18:07:23.044123Z", "url": "https://files.pythonhosted.org/packages/6b/db/585d37675bbecbd320d20d0a744853bad570ea3b0a7ce69d99ffd66f7feb/aghasher-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b88c40192a91467c287003d542c9cb1d", "sha256": "8fdf03da8edad3e5264a011025bd6ac6437eed914726b5d46d949640cd7a48d4"}, "downloads": -1, "filename": "aghasher-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b88c40192a91467c287003d542c9cb1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6595, "upload_time": "2020-03-13T18:07:23", "upload_time_iso_8601": "2020-03-13T18:07:23.044123Z", "url": "https://files.pythonhosted.org/packages/6b/db/585d37675bbecbd320d20d0a744853bad570ea3b0a7ce69d99ffd66f7feb/aghasher-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:31 2020"}