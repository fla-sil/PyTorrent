{"info": {"author": "Daniel Morell", "author_email": "office@carintek.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Search Engine Bot Checker\n\n[![Version](https://flat.badgen.net/badge/PyPI/v1.0.1)](https://pypi.org/project/se-bot-checker/)\n\nThis is a simple python library that verifies the validity of a search engine crawler based on it's IP and user agent.\n\nIt is designed to assist SEO's and DevOps validate `googlebot` and other search engine bots.\n\n## Installation\n\n```commandline\npip install se-bot-checker\n```\n\n## Usage\n\nUsing SE Bot Checker to validate a search engine crawler is simple. There are two basic steps.\n\n1. Instantiate the bot class.\n2. Call the bot class with IP and user agent arguments.\n\n```python\nfrom se_bot_checker.bots import GoogleBot\ngooglebot = GoogleBot()\ntest_one = googlebot(\n    '66.249.66.1', \n    'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'\n)\ntest_two = googlebot(\n    '127.0.0.1', \n    'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'\n)\nprint(test_one)\nprint(test_two)\n```\n\n**Output:**\n\n```text\n(True, 'googlebot')\n(False, 'unknown')\n```\n\n## Prebuilt Bots\n\nThere are several bot definitions that are already created, have been tested and will be maintained. The prebuilt \ncrawlers are the most common search engine crawlers.\n\n### Crawler validation methods\n\n| Bot           | User Agent | IP | DNS |\n|---------------|------------|----|-----|\n| `BingBot`     | X          | X* | X   |\n| `DuckDuckBot` | X          | X  |     |\n| `GoogleBot`   | X          | X* | X   |\n| `YandexBot`   | X          | X* | X   |\n\n\\* IP validation is only used on consecutive checks run using the same bot checker instance. This means that in the \nfollowing example there will be only one DNS network request since the IP in `test_two` has already been validated when \n`test_one` was run.\n\n```python\nfrom se_bot_checker.bots import GoogleBot\ngooglebot = GoogleBot()\ntest_one = googlebot(\n    '66.249.66.1', \n    'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'\n)\nprint(test_one)  # (True, 'googlebot')\ntest_two = googlebot(\n    '66.249.66.1', \n    'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'\n)\nprint(test_two)  # (True, 'googlebot')\n```\n\n### `BingBot`\n\n- **Name:** `bingbot`\n- **Domains:** `.search.msn.com`\n- **User Agents:** `bingbot`, `msnbot`, `bingpreview`\n- **Use RegEx:** `True`\n\n### `DuckDuckBot`\n\n- **Name:** `duckduckbot`\n- **IPs:** See list below\n- **User Agents:** `duckduckbot`, `duckduckgo`\n- **Use RegEx:** `True`\n\n```text\n23.21.227.69\n50.16.241.113\n50.16.241.114\n50.16.241.117\n50.16.247.234\n52.204.97.54\n52.5.190.19\n54.197.234.188\n54.208.100.253\n54.208.102.37\n107.21.1.8\n\nUpdated: April 08, 2020\n```\n\n### `GoogleBot`\n\n- **Name:** `googlebot`\n- **Domains:** `.googlebot.com`, `.google.com`\n- **User Agents:** `googlebot`\n- **Use RegEx:** `False`\n\n### `YandexBot`\n\n- **Name:** `bingbot`\n- **Domains:** `.search.msn.com`\n- **User Agents:** `bingbot`, `msnbot`, `bingpreview`\n- **Use RegEx:** `True`\n\n## Creating Your Own Bot Definition\n\nSE Bot Checker was designed to be extensible. The core of SE Bot Checker is the `Bot` class. To create your own \nbot you can simply extend `Bot`.\n\nHere is custom bot that will only validate Googlebot mobile.\n\n```python\nfrom se_bot_checker.bots import Bot\n\nclass MobileGoogleBot(Bot):\n    \"\"\"\n    Mobile googlebot checker\n    \"\"\"\n    name = 'googlebot-mobile'\n    domains = ['.googlebot.com', '.google.com']\n    user_agent = 'android.*googlebot'\n```\n\nThat is all there is to it. However, we could simplify this a little by extending the `GoogleBot` class.\n\n```python\nfrom se_bot_checker.bots import GoogleBot\n\nclass MobileGoogleBot(GoogleBot):\n    \"\"\"\n    Mobile googlebot checker\n    \"\"\"\n    name = 'googlebot-mobile'\n    user_agent = 'android.*googlebot'\n```\n\nBoth the desktop and mobile versions of Googlebot use the same domains for the reverse/forward DNS validation. This \nmeans we can simply extend `GoogleBot`. This is the recommended approach when possible.\n\n### `Bot` API\n\nThis class is the core of SE Bot Checker. It handles the validation process. New bot definitions should subclass this \nclass.\n\nA single bot class can be instantiated once and called many times. The allows base settings to be configured and \nmultiple IP and user agent pairs to be validated simply.\n\n**`Bot.name`:** `str` This is the name the bot will return if it validates to `True`.\n\n**`Bot.ips`:** `iterable` A list of known valid IPs.\n\n**`Bot.domains`:** `iterable` A list of known valid domains. This is used to validate the results of the reverse\nDNS lookup. An exact match or a super domain of the DNS lookup results is considered a positive match.\n\n**`Bot.user_agent`:** `str` A substring or RegEx pattern to use to validate the request user agent. For the best\nperformance and compatibility request user agent string are changed to lowercase prior to matching. the `user_agent` \nstring should be lower case. If you need to validate upper or mixed case user agents you can override the \n`Bot.valid_user_agent()` method.\n\n**`Bot.use_regex`:** `bool` Whether the user agent validation should use substring or regex matching. If \n`user_agent` is just a string and not a RegEx pattern this should be `False`. It slightly faster. Defaults to `False`.\n\n## Contributors\n\n[@danielmorell](https://github.com/danielmorell)\n\nCopyright \u00a9 2020 [Daniel Morell](https://www.danielmorell.com/)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/danielmorell/se_bot_checker", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "se-bot-checker", "package_url": "https://pypi.org/project/se-bot-checker/", "platform": "", "project_url": "https://pypi.org/project/se-bot-checker/", "project_urls": {"Homepage": "https://github.com/danielmorell/se_bot_checker", "Issue tracker": "https://github.com/danielmorell/se_bot_checker/issues", "Source Code": "https://github.com/danielmorell/se_bot_checker"}, "release_url": "https://pypi.org/project/se-bot-checker/1.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "This is a python library that verifies the validity of a search engine crawler.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Search Engine Bot Checker</h1>\n<p><a href=\"https://pypi.org/project/se-bot-checker/\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/292baf497c1c31500b04fa20a97cf7c2e4958e00/68747470733a2f2f666c61742e62616467656e2e6e65742f62616467652f507950492f76312e302e31\"></a></p>\n<p>This is a simple python library that verifies the validity of a search engine crawler based on it's IP and user agent.</p>\n<p>It is designed to assist SEO's and DevOps validate <code>googlebot</code> and other search engine bots.</p>\n<h2>Installation</h2>\n<pre>pip install se-bot-checker\n</pre>\n<h2>Usage</h2>\n<p>Using SE Bot Checker to validate a search engine crawler is simple. There are two basic steps.</p>\n<ol>\n<li>Instantiate the bot class.</li>\n<li>Call the bot class with IP and user agent arguments.</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">se_bot_checker.bots</span> <span class=\"kn\">import</span> <span class=\"n\">GoogleBot</span>\n<span class=\"n\">googlebot</span> <span class=\"o\">=</span> <span class=\"n\">GoogleBot</span><span class=\"p\">()</span>\n<span class=\"n\">test_one</span> <span class=\"o\">=</span> <span class=\"n\">googlebot</span><span class=\"p\">(</span>\n    <span class=\"s1\">'66.249.66.1'</span><span class=\"p\">,</span> \n    <span class=\"s1\">'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'</span>\n<span class=\"p\">)</span>\n<span class=\"n\">test_two</span> <span class=\"o\">=</span> <span class=\"n\">googlebot</span><span class=\"p\">(</span>\n    <span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> \n    <span class=\"s1\">'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">test_one</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">test_two</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Output:</strong></p>\n<pre>(True, 'googlebot')\n(False, 'unknown')\n</pre>\n<h2>Prebuilt Bots</h2>\n<p>There are several bot definitions that are already created, have been tested and will be maintained. The prebuilt\ncrawlers are the most common search engine crawlers.</p>\n<h3>Crawler validation methods</h3>\n<table>\n<thead>\n<tr>\n<th>Bot</th>\n<th>User Agent</th>\n<th>IP</th>\n<th>DNS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BingBot</code></td>\n<td>X</td>\n<td>X*</td>\n<td>X</td>\n</tr>\n<tr>\n<td><code>DuckDuckBot</code></td>\n<td>X</td>\n<td>X</td>\n<td></td>\n</tr>\n<tr>\n<td><code>GoogleBot</code></td>\n<td>X</td>\n<td>X*</td>\n<td>X</td>\n</tr>\n<tr>\n<td><code>YandexBot</code></td>\n<td>X</td>\n<td>X*</td>\n<td>X</td>\n</tr></tbody></table>\n<p>* IP validation is only used on consecutive checks run using the same bot checker instance. This means that in the\nfollowing example there will be only one DNS network request since the IP in <code>test_two</code> has already been validated when\n<code>test_one</code> was run.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">se_bot_checker.bots</span> <span class=\"kn\">import</span> <span class=\"n\">GoogleBot</span>\n<span class=\"n\">googlebot</span> <span class=\"o\">=</span> <span class=\"n\">GoogleBot</span><span class=\"p\">()</span>\n<span class=\"n\">test_one</span> <span class=\"o\">=</span> <span class=\"n\">googlebot</span><span class=\"p\">(</span>\n    <span class=\"s1\">'66.249.66.1'</span><span class=\"p\">,</span> \n    <span class=\"s1\">'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">test_one</span><span class=\"p\">)</span>  <span class=\"c1\"># (True, 'googlebot')</span>\n<span class=\"n\">test_two</span> <span class=\"o\">=</span> <span class=\"n\">googlebot</span><span class=\"p\">(</span>\n    <span class=\"s1\">'66.249.66.1'</span><span class=\"p\">,</span> \n    <span class=\"s1\">'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">test_two</span><span class=\"p\">)</span>  <span class=\"c1\"># (True, 'googlebot')</span>\n</pre>\n<h3><code>BingBot</code></h3>\n<ul>\n<li><strong>Name:</strong> <code>bingbot</code></li>\n<li><strong>Domains:</strong> <code>.search.msn.com</code></li>\n<li><strong>User Agents:</strong> <code>bingbot</code>, <code>msnbot</code>, <code>bingpreview</code></li>\n<li><strong>Use RegEx:</strong> <code>True</code></li>\n</ul>\n<h3><code>DuckDuckBot</code></h3>\n<ul>\n<li><strong>Name:</strong> <code>duckduckbot</code></li>\n<li><strong>IPs:</strong> See list below</li>\n<li><strong>User Agents:</strong> <code>duckduckbot</code>, <code>duckduckgo</code></li>\n<li><strong>Use RegEx:</strong> <code>True</code></li>\n</ul>\n<pre>23.21.227.69\n50.16.241.113\n50.16.241.114\n50.16.241.117\n50.16.247.234\n52.204.97.54\n52.5.190.19\n54.197.234.188\n54.208.100.253\n54.208.102.37\n107.21.1.8\n\nUpdated: April 08, 2020\n</pre>\n<h3><code>GoogleBot</code></h3>\n<ul>\n<li><strong>Name:</strong> <code>googlebot</code></li>\n<li><strong>Domains:</strong> <code>.googlebot.com</code>, <code>.google.com</code></li>\n<li><strong>User Agents:</strong> <code>googlebot</code></li>\n<li><strong>Use RegEx:</strong> <code>False</code></li>\n</ul>\n<h3><code>YandexBot</code></h3>\n<ul>\n<li><strong>Name:</strong> <code>bingbot</code></li>\n<li><strong>Domains:</strong> <code>.search.msn.com</code></li>\n<li><strong>User Agents:</strong> <code>bingbot</code>, <code>msnbot</code>, <code>bingpreview</code></li>\n<li><strong>Use RegEx:</strong> <code>True</code></li>\n</ul>\n<h2>Creating Your Own Bot Definition</h2>\n<p>SE Bot Checker was designed to be extensible. The core of SE Bot Checker is the <code>Bot</code> class. To create your own\nbot you can simply extend <code>Bot</code>.</p>\n<p>Here is custom bot that will only validate Googlebot mobile.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">se_bot_checker.bots</span> <span class=\"kn\">import</span> <span class=\"n\">Bot</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MobileGoogleBot</span><span class=\"p\">(</span><span class=\"n\">Bot</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Mobile googlebot checker</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'googlebot-mobile'</span>\n    <span class=\"n\">domains</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'.googlebot.com'</span><span class=\"p\">,</span> <span class=\"s1\">'.google.com'</span><span class=\"p\">]</span>\n    <span class=\"n\">user_agent</span> <span class=\"o\">=</span> <span class=\"s1\">'android.*googlebot'</span>\n</pre>\n<p>That is all there is to it. However, we could simplify this a little by extending the <code>GoogleBot</code> class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">se_bot_checker.bots</span> <span class=\"kn\">import</span> <span class=\"n\">GoogleBot</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MobileGoogleBot</span><span class=\"p\">(</span><span class=\"n\">GoogleBot</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Mobile googlebot checker</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'googlebot-mobile'</span>\n    <span class=\"n\">user_agent</span> <span class=\"o\">=</span> <span class=\"s1\">'android.*googlebot'</span>\n</pre>\n<p>Both the desktop and mobile versions of Googlebot use the same domains for the reverse/forward DNS validation. This\nmeans we can simply extend <code>GoogleBot</code>. This is the recommended approach when possible.</p>\n<h3><code>Bot</code> API</h3>\n<p>This class is the core of SE Bot Checker. It handles the validation process. New bot definitions should subclass this\nclass.</p>\n<p>A single bot class can be instantiated once and called many times. The allows base settings to be configured and\nmultiple IP and user agent pairs to be validated simply.</p>\n<p><strong><code>Bot.name</code>:</strong> <code>str</code> This is the name the bot will return if it validates to <code>True</code>.</p>\n<p><strong><code>Bot.ips</code>:</strong> <code>iterable</code> A list of known valid IPs.</p>\n<p><strong><code>Bot.domains</code>:</strong> <code>iterable</code> A list of known valid domains. This is used to validate the results of the reverse\nDNS lookup. An exact match or a super domain of the DNS lookup results is considered a positive match.</p>\n<p><strong><code>Bot.user_agent</code>:</strong> <code>str</code> A substring or RegEx pattern to use to validate the request user agent. For the best\nperformance and compatibility request user agent string are changed to lowercase prior to matching. the <code>user_agent</code>\nstring should be lower case. If you need to validate upper or mixed case user agents you can override the\n<code>Bot.valid_user_agent()</code> method.</p>\n<p><strong><code>Bot.use_regex</code>:</strong> <code>bool</code> Whether the user agent validation should use substring or regex matching. If\n<code>user_agent</code> is just a string and not a RegEx pattern this should be <code>False</code>. It slightly faster. Defaults to <code>False</code>.</p>\n<h2>Contributors</h2>\n<p><a href=\"https://github.com/danielmorell\" rel=\"nofollow\">@danielmorell</a></p>\n<p>Copyright \u00a9 2020 <a href=\"https://www.danielmorell.com/\" rel=\"nofollow\">Daniel Morell</a></p>\n\n          </div>"}, "last_serial": 6978746, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d939da259524d457aaedef03a69005a9", "sha256": "935091003b18727996e890c66c82199c702f5817fb469a0c297080970f21d43a"}, "downloads": -1, "filename": "se_bot_checker-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d939da259524d457aaedef03a69005a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18653, "upload_time": "2020-04-08T15:44:50", "upload_time_iso_8601": "2020-04-08T15:44:50.808780Z", "url": "https://files.pythonhosted.org/packages/45/89/f59c0e069a63e553defd4f5a072b20b4f99bda2204f7d8879151ec5545dd/se_bot_checker-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "933bd0a920318df6e22bbd22c3f346ff", "sha256": "10ab00bf7c1362ff07b0a07560fcd7852054a0a1e79223ec677244e439e3bcf3"}, "downloads": -1, "filename": "se_bot_checker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "933bd0a920318df6e22bbd22c3f346ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6192, "upload_time": "2020-04-08T15:44:52", "upload_time_iso_8601": "2020-04-08T15:44:52.665351Z", "url": "https://files.pythonhosted.org/packages/41/ac/544a9c17128b11da2b9ddfa7dcbf62a23c3b3d456fb44795a93ab57eab29/se_bot_checker-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "41ac05526a0bf8066ae49a4c94aa670e", "sha256": "8a266f38cdbb6d23499601d3def840433b51670237670902bd9f4b0d9b7f1bf5"}, "downloads": -1, "filename": "se_bot_checker-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "41ac05526a0bf8066ae49a4c94aa670e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18654, "upload_time": "2020-04-08T15:47:50", "upload_time_iso_8601": "2020-04-08T15:47:50.007145Z", "url": "https://files.pythonhosted.org/packages/80/82/8317d8936da3898b9584dd3229e8b70e4e70fd763a8a645d7911cfc2db0d/se_bot_checker-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e31b883f466c99f742df1f4dc95ddfba", "sha256": "03ac4b2338ca7ae2d92c925946c15247eb2c36362da5df374df9b31335a6b34f"}, "downloads": -1, "filename": "se_bot_checker-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e31b883f466c99f742df1f4dc95ddfba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6192, "upload_time": "2020-04-08T15:47:50", "upload_time_iso_8601": "2020-04-08T15:47:50.940838Z", "url": "https://files.pythonhosted.org/packages/7a/0d/d24bdaa1cd7325191272226b85c3f263040b8b0d23fcc56119917d59f4b2/se_bot_checker-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41ac05526a0bf8066ae49a4c94aa670e", "sha256": "8a266f38cdbb6d23499601d3def840433b51670237670902bd9f4b0d9b7f1bf5"}, "downloads": -1, "filename": "se_bot_checker-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "41ac05526a0bf8066ae49a4c94aa670e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18654, "upload_time": "2020-04-08T15:47:50", "upload_time_iso_8601": "2020-04-08T15:47:50.007145Z", "url": "https://files.pythonhosted.org/packages/80/82/8317d8936da3898b9584dd3229e8b70e4e70fd763a8a645d7911cfc2db0d/se_bot_checker-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e31b883f466c99f742df1f4dc95ddfba", "sha256": "03ac4b2338ca7ae2d92c925946c15247eb2c36362da5df374df9b31335a6b34f"}, "downloads": -1, "filename": "se_bot_checker-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e31b883f466c99f742df1f4dc95ddfba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6192, "upload_time": "2020-04-08T15:47:50", "upload_time_iso_8601": "2020-04-08T15:47:50.940838Z", "url": "https://files.pythonhosted.org/packages/7a/0d/d24bdaa1cd7325191272226b85c3f263040b8b0d23fcc56119917d59f4b2/se_bot_checker-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:01 2020"}