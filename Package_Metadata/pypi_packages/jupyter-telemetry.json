{"info": {"author": "Jupyter Development Team", "author_email": "jupyter@googlegroups.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "# Telemetry\n\n[![CircleCI](https://circleci.com/gh/jupyter/telemetry.svg?style=svg)](https://circleci.com/gh/jupyter/telemetry)\n[![codecov](https://codecov.io/gh/jupyter/telemetry/branch/master/graph/badge.svg)](https://codecov.io/gh/jupyter/telemetry)\n[![Documentation Status](https://readthedocs.org/projects/jupyter-telemetry/badge/?version=latest)](https://jupyter-telemetry.readthedocs.io/en/latest/?badge=latest)\n\n*Telemetry for Jupyter Applications and extensions.*\n\n> Telemetry (t\u0259\u02c8lem\u0259tr\u0113): the process of recording and transmitting the readings of an instrument. [Oxford Dictionaries]\n\nJupyter Telemetry enables Jupyter Applications (e.g. Jupyter Server, Jupyter Notebook, JupyterLab, JupyterHub, etc.) to record **events**\u2014i.e. actions by application users\u2014and transmit them to remote (or local) destinations as **structured** data. It works with Python's standard `logging` library to handle the transmission of events allowing users to send events to local files, over the web, etc.\n\n## Install\n\nJupyter's Telemetry library can be installed from PyPI.\n```\npip install jupyter_telemetry\n```\n\n## Basic Usage\n\nTelemetry provides a configurable traitlets object, `EventLog`, for structured event-logging in Python. It leverages Python's standard `logging` library for filtering, handling, and recording events. All events are validated (using [jsonschema](https://pypi.org/project/jsonschema/)) against registered [JSON schemas](https://json-schema.org/).\n\nLet's look at a basic example of an `EventLog`.\n```python\nimport logging\nfrom jupyter_telemetry import EventLog\n\n\neventlog = EventLog(\n    # Use logging handlers to route where events\n    # should be record.\n    handlers=[\n        logging.FileHandler('events.log')\n    ],\n    # List schemas of events that should be recorded.\n    allowed_schemas=[\n        'uri.to.event.schema'\n    ]\n)\n```\n\nEventLog has two configurable traits:\n* `handlers`: a list of Python's `logging` handlers.\n* `allowed_schemas`: a list of event schemas to record.\n\nEvent schemas must be registered with the `EventLog` for events to be recorded. An event schema looks something like:\n```json\n{\n  \"$id\": \"url.to.event.schema\",\n  \"title\": \"My Event\",\n  \"description\": \"All events must have a name property.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"description\": \"Name of event\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"name\"],\n  \"version\": 1\n}\n```\n2 fields are required:\n* `$id`: a valid URI to identify the schema (and possibly fetch it from a remote address).\n* `version`: the version of the schema.\n\nThe other fields follow standard JSON schema structure.\n\nSchemas can be registered from a Python `dict` object, a file, or a URL. This example loads the above example schema from file.\n```python\n# Register the schema.\neventlog.register_schema_file('schema.json')\n```\n\nEvents are recorded using the `record_event` method. This method validates the event data and routes the JSON string to the Python `logging` handlers listed in the `EventLog`.\n```python\n# Record an example event.\nevent = {'name': 'example event'}\neventlog.record_event(\n    schema_id='url.to.event.schema',\n    version=1,\n    event=event\n)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://jupyter.org", "keywords": "Jupyter,JupyterLab", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "jupyter-telemetry", "package_url": "https://pypi.org/project/jupyter-telemetry/", "platform": "Linux", "project_url": "https://pypi.org/project/jupyter-telemetry/", "project_urls": {"Homepage": "http://jupyter.org"}, "release_url": "https://pypi.org/project/jupyter-telemetry/0.1.0/", "requires_dist": ["jsonschema", "python-json-logger", "traitlets", "ruamel.yaml"], "requires_python": ">=3.5", "summary": "Jupyter telemetry library", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Telemetry</h1>\n<p><a href=\"https://circleci.com/gh/jupyter/telemetry\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/55eaa062880213f651fe2ac5dee9389b6c4e02f3/68747470733a2f2f636972636c6563692e636f6d2f67682f6a7570797465722f74656c656d657472792e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/jupyter/telemetry\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/469d3c19619c944374326199cc8eea30e9122b99/68747470733a2f2f636f6465636f762e696f2f67682f6a7570797465722f74656c656d657472792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://jupyter-telemetry.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/365d7233377e2fbaaacb080810d693062955eb1f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6a7570797465722d74656c656d657472792f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><em>Telemetry for Jupyter Applications and extensions.</em></p>\n<blockquote>\n<p>Telemetry (t\u0259\u02c8lem\u0259tr\u0113): the process of recording and transmitting the readings of an instrument. [Oxford Dictionaries]</p>\n</blockquote>\n<p>Jupyter Telemetry enables Jupyter Applications (e.g. Jupyter Server, Jupyter Notebook, JupyterLab, JupyterHub, etc.) to record <strong>events</strong>\u2014i.e. actions by application users\u2014and transmit them to remote (or local) destinations as <strong>structured</strong> data. It works with Python's standard <code>logging</code> library to handle the transmission of events allowing users to send events to local files, over the web, etc.</p>\n<h2>Install</h2>\n<p>Jupyter's Telemetry library can be installed from PyPI.</p>\n<pre><code>pip install jupyter_telemetry\n</code></pre>\n<h2>Basic Usage</h2>\n<p>Telemetry provides a configurable traitlets object, <code>EventLog</code>, for structured event-logging in Python. It leverages Python's standard <code>logging</code> library for filtering, handling, and recording events. All events are validated (using <a href=\"https://pypi.org/project/jsonschema/\" rel=\"nofollow\">jsonschema</a>) against registered <a href=\"https://json-schema.org/\" rel=\"nofollow\">JSON schemas</a>.</p>\n<p>Let's look at a basic example of an <code>EventLog</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jupyter_telemetry</span> <span class=\"kn\">import</span> <span class=\"n\">EventLog</span>\n\n\n<span class=\"n\">eventlog</span> <span class=\"o\">=</span> <span class=\"n\">EventLog</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Use logging handlers to route where events</span>\n    <span class=\"c1\"># should be record.</span>\n    <span class=\"n\">handlers</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">FileHandler</span><span class=\"p\">(</span><span class=\"s1\">'events.log'</span><span class=\"p\">)</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\"># List schemas of events that should be recorded.</span>\n    <span class=\"n\">allowed_schemas</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'uri.to.event.schema'</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p>EventLog has two configurable traits:</p>\n<ul>\n<li><code>handlers</code>: a list of Python's <code>logging</code> handlers.</li>\n<li><code>allowed_schemas</code>: a list of event schemas to record.</li>\n</ul>\n<p>Event schemas must be registered with the <code>EventLog</code> for events to be recorded. An event schema looks something like:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"$id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"url.to.event.schema\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"My Event\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"All events must have a name property.\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"object\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Name\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Name of event\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"string\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"required\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"version\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</pre>\n<p>2 fields are required:</p>\n<ul>\n<li><code>$id</code>: a valid URI to identify the schema (and possibly fetch it from a remote address).</li>\n<li><code>version</code>: the version of the schema.</li>\n</ul>\n<p>The other fields follow standard JSON schema structure.</p>\n<p>Schemas can be registered from a Python <code>dict</code> object, a file, or a URL. This example loads the above example schema from file.</p>\n<pre><span class=\"c1\"># Register the schema.</span>\n<span class=\"n\">eventlog</span><span class=\"o\">.</span><span class=\"n\">register_schema_file</span><span class=\"p\">(</span><span class=\"s1\">'schema.json'</span><span class=\"p\">)</span>\n</pre>\n<p>Events are recorded using the <code>record_event</code> method. This method validates the event data and routes the JSON string to the Python <code>logging</code> handlers listed in the <code>EventLog</code>.</p>\n<pre><span class=\"c1\"># Record an example event.</span>\n<span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'example event'</span><span class=\"p\">}</span>\n<span class=\"n\">eventlog</span><span class=\"o\">.</span><span class=\"n\">record_event</span><span class=\"p\">(</span>\n    <span class=\"n\">schema_id</span><span class=\"o\">=</span><span class=\"s1\">'url.to.event.schema'</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">event</span><span class=\"o\">=</span><span class=\"n\">event</span>\n<span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6994702, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "540d7bdb32a2d4bad7f3850894db10e0", "sha256": "d0dfbce1238d097a59db291fbe7bb599ddfd1ade90973d9b1d95160ffd67d61d"}, "downloads": -1, "filename": "jupyter_telemetry-0.0.1.tar.gz", "has_sig": false, "md5_digest": "540d7bdb32a2d4bad7f3850894db10e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3297, "upload_time": "2019-07-09T23:30:05", "upload_time_iso_8601": "2019-07-09T23:30:05.692243Z", "url": "https://files.pythonhosted.org/packages/4f/2e/caa388acb63540d0d0d62cfcb77e509291c90e6b4810cd8908aded9b5cfb/jupyter_telemetry-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "32f762a313b8cb37dc30cf68a8659834", "sha256": "c3d93173baf8af19315cc122575e12c59403b88558e7460ab46feeb307c00d68"}, "downloads": -1, "filename": "jupyter_telemetry-0.0.2.tar.gz", "has_sig": false, "md5_digest": "32f762a313b8cb37dc30cf68a8659834", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3573, "upload_time": "2019-07-10T22:31:26", "upload_time_iso_8601": "2019-07-10T22:31:26.865336Z", "url": "https://files.pythonhosted.org/packages/ad/60/8726277b806d4a980f7ff262c7d9b4e627bd45727871a4f3c677aad34691/jupyter_telemetry-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "353806de95a4c0dddb9ffe4385106d8b", "sha256": "942d3263d309cef03db825d4e0c84f04b9070f3e8380d79c6572ef55c88c268b"}, "downloads": -1, "filename": "jupyter_telemetry-0.0.3.tar.gz", "has_sig": false, "md5_digest": "353806de95a4c0dddb9ffe4385106d8b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4569, "upload_time": "2019-11-12T23:45:51", "upload_time_iso_8601": "2019-11-12T23:45:51.371798Z", "url": "https://files.pythonhosted.org/packages/15/b7/5ac77aa23b2018d9a872bc12396a9d289b26249fa36967aa0615be637334/jupyter_telemetry-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e7ec1a510214aff8980963fbc56e0ff5", "sha256": "351c439a00e39f2f9d380a0af0a697e69deef86c4b09ff5967c03a21e6979771"}, "downloads": -1, "filename": "jupyter_telemetry-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e7ec1a510214aff8980963fbc56e0ff5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9244, "upload_time": "2020-01-17T18:03:10", "upload_time_iso_8601": "2020-01-17T18:03:10.315838Z", "url": "https://files.pythonhosted.org/packages/98/ad/2f73679c4093a6e7c1f118e05ca9bc6a8a0d098f56e43e6aeaf9900e9f6d/jupyter_telemetry-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd2fe25e4c9d397f871dbabffcc4287f", "sha256": "507d66f70ce89fde1c7541d82d74c243136d7e3a9105487ec6ca0dc8cb836b7b"}, "downloads": -1, "filename": "jupyter_telemetry-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bd2fe25e4c9d397f871dbabffcc4287f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19232, "upload_time": "2020-01-17T18:03:12", "upload_time_iso_8601": "2020-01-17T18:03:12.298616Z", "url": "https://files.pythonhosted.org/packages/f6/66/0fd7a17c493dc8121b806ff8c83cfeac32b60ef2825ff8f4b847f75e5af4/jupyter_telemetry-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "24986b5be9335dc6949613fdc96388da", "sha256": "f6546c6da6ca589fe6d4ce314bd4a05e4136b54b1f69e8856c7c0eb5764e8227"}, "downloads": -1, "filename": "jupyter_telemetry-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "24986b5be9335dc6949613fdc96388da", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5507, "upload_time": "2020-02-08T16:45:32", "upload_time_iso_8601": "2020-02-08T16:45:32.738780Z", "url": "https://files.pythonhosted.org/packages/a7/8a/c1302cdbcc1b045b25fc6f6988b74fab4cc077ec2aa9c1dcd8c7a6be4404/jupyter_telemetry-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56f281bff453b5037a26814e3b740d53", "sha256": "d3eaac14be17510a4d288f3737580107ce14eef543e6133d56654d3f0e742b9b"}, "downloads": -1, "filename": "jupyter_telemetry-0.0.5.tar.gz", "has_sig": false, "md5_digest": "56f281bff453b5037a26814e3b740d53", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12900, "upload_time": "2020-02-08T16:45:34", "upload_time_iso_8601": "2020-02-08T16:45:34.122774Z", "url": "https://files.pythonhosted.org/packages/ad/1f/a496c139b3cc6f41f1765643b3c5fa39a844eecc3848adca3dd49004f75b/jupyter_telemetry-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "a4c9f286d496242b0d48436ac950ffde", "sha256": "1de3e423b23aa40ca4a4238d65c56dda544061ff5aedc3f7647220ed7e3b9589"}, "downloads": -1, "filename": "jupyter_telemetry-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a4c9f286d496242b0d48436ac950ffde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7058, "upload_time": "2020-04-10T16:32:01", "upload_time_iso_8601": "2020-04-10T16:32:01.302076Z", "url": "https://files.pythonhosted.org/packages/90/ab/8d565a0797dacf82dea161ba5c40bd1f3ddbf365e3f7f8fd63007f03b19f/jupyter_telemetry-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "578a8787b59d1d68924e8597e4300398", "sha256": "445c613ae3df70d255fe3de202f936bba8b77b4055c43207edf22468ac875314"}, "downloads": -1, "filename": "jupyter_telemetry-0.1.0.tar.gz", "has_sig": false, "md5_digest": "578a8787b59d1d68924e8597e4300398", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9607, "upload_time": "2020-04-10T16:32:02", "upload_time_iso_8601": "2020-04-10T16:32:02.698912Z", "url": "https://files.pythonhosted.org/packages/c4/59/edd04590235d9afe2b2b49ec449c6146dc71b717110f4a1034d52eb54303/jupyter_telemetry-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4c9f286d496242b0d48436ac950ffde", "sha256": "1de3e423b23aa40ca4a4238d65c56dda544061ff5aedc3f7647220ed7e3b9589"}, "downloads": -1, "filename": "jupyter_telemetry-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a4c9f286d496242b0d48436ac950ffde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7058, "upload_time": "2020-04-10T16:32:01", "upload_time_iso_8601": "2020-04-10T16:32:01.302076Z", "url": "https://files.pythonhosted.org/packages/90/ab/8d565a0797dacf82dea161ba5c40bd1f3ddbf365e3f7f8fd63007f03b19f/jupyter_telemetry-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "578a8787b59d1d68924e8597e4300398", "sha256": "445c613ae3df70d255fe3de202f936bba8b77b4055c43207edf22468ac875314"}, "downloads": -1, "filename": "jupyter_telemetry-0.1.0.tar.gz", "has_sig": false, "md5_digest": "578a8787b59d1d68924e8597e4300398", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9607, "upload_time": "2020-04-10T16:32:02", "upload_time_iso_8601": "2020-04-10T16:32:02.698912Z", "url": "https://files.pythonhosted.org/packages/c4/59/edd04590235d9afe2b2b49ec449c6146dc71b717110f4a1034d52eb54303/jupyter_telemetry-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:07 2020"}