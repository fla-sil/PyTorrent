{"info": {"author": "Xavier-Lam", "author_email": "Lam.Xavier@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: Site Management", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# Django-object-tool\n\n[![PyPI](https://img.shields.io/pypi/v/django-object-tool.svg)](https://pypi.org/project/django-object-tool)\n[![Build Status](https://travis-ci.org/Xavier-Lam/django-object-tool.svg?branch=master)](https://travis-ci.org/Xavier-Lam/django-object-tool)\n\n**django-object-tool** let you can customize django administration's object-tools bar. You can add actions to object-tools bar beside add-object button. The definition of object-tool action are almost same as django's default action.\n\n> This is a pre alpha version without any unittest, there may have serveral problems and not compatible with some django or python versions.\n\n![](docs/static/images/example.jpg?raw=true)\n\n- [Quick Start](#quick-start)\n  - [Installation](#installation)\n  - [Write your first admin](#write-your-first-admin)\n  - [Specific view only object tools](#specific-view-only-object-tools)\n  - [Shortcuts](#shortcuts)\n    - [Shortcut for hyperlinks](#shortcut-for-hyperlinks)\n    - [Execute after confirmation](#execute-after-confirmation)\n    - [Create a form](#create-a-form)\n- [Advanced usage](#advanced-usage)\n  - [Site wide object tools](#site-wide-object-tools)\n  - [Work with your own admin template](#work-with-your-own-admin-template)\n  - [Use in reusable apps](#use-in-reusable-apps)\n  - [Ordering of object tools](#ordering-of-object-tools)\n  - [Customize button styles](#customize-button-styles)\n- [Configurations](#configurations)\n- [Compatibilities](#compatibilities)\n  - [django-import-export](#django-import-export)\n- [Example app](#example-app)\n- [TODOS](#todos)\n- [Change logs](#change-logs)\n  - [0.0.1](#001)\n\n## Quick Start\n### Installation\nInstall django-object-tool by using pip\n\n    pip install django-object-tool\n\nthen add it to your INSTALLED_APP\n\n    # settings\n    INSTALLED_APPS = (\n        ...\n        \"object-tool\",\n        \"your app needs object-tool\"\n    )\n\nAll prequisites are set up! See [Write your first admin](#Write-your-first-admin) to learn how to use django-object-tool in your project.\n\n > Note: We've patched django's default admin site(`django.contrib.admin.site`) by default, if you want to write your own admin site, please mix `object_tool.CustomObjectToolAdminSiteMixin` in your admin site class or direct inherit from `object_tool.CustomObjectToolAdminSite`.\n >\n > If you don't want to change the default site generate by django, you can set `OBJECT_TOOL_PATCHADMINSITE` to `False` in your settings file.\n\n### Write your first admin\nThe object tool takes a request and an optional object, when this tool called inside a change view, the current editing object will be passed in.\n\n    from object_tool import CustomObjectToolModelAdminMixin\n\n    class SomeModelAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n        object_tools = (\"some_action\",)\n\n        def some_action(self, request, obj=None):\n            if obj:\n                obj.some_property = \"value\"\n                obj.save()\n            else:\n                self.get_queryset(request).all().update(some_property=\"value\")\n\n> The definition of object tool's action is almost same as django's default action, except the third parameter of the function is a optional current editing object rather than a queryset.\n\n### Specific view only object tools\nYou can define a object tool only show in changelist view or change view by register it to changelist_object_tools or change_object_tools in your model admin.\n\n    from object_tool import CustomObjectToolModelAdminMixin\n\n    class SomeModelAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n        changelist_object_tools = (\"changelist_view_only_action\",)\n        change_object_tools = (\"change_view_only_action\", )\n\n### Shortcuts\n#### Shortcut for hyperlinks\nYou can create a hyperlink object tool like add-object by using `object_tool.link`, it takes a url as the first parameter and optional short_description as the second parameter.\n\n    from object_tool import CustomObjectToolModelAdminMixin, link\n\n    class SomeModelAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n        object_tools = (\"forkme\", )\n\n        forkme = link(\n            \"https://github.com/Xavier-Lam/django-object-tool\",\n            \"Fork me on github\")\n\n#### Execute after confirmation\n    @object_tool.confirm(\"are you sure to edit %(obj)s??\", \"confirm-tool\")\n    def confirm_action(self, request, obj=None):\n        messages.success(request, \"success!\")\n\n#### Create a form\nWith `object_tool.form` decorator, it is very easy to create a form view. This decorator takes a Form class as first parameter and it will auto render the form. When form is cleaned, it will actually execute decorated codes.\n\n    from object_tool import CustomObjectToolModelAdminMixin, form\n\n    class Form(forms.Form):\n        text = forms.CharField()\n\n    class UserAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n        object_tools = (\"greetings\", )\n\n        @form(Form, \"greetings\")\n        def greetings(self, request, form, obj=None):\n            text = form.cleaned_data[\"text\"]\n            tpl = \"greetings to {name}: {text}\"\n            if obj:\n                msg = tpl.format(name=obj.name, text=text)\n            else:\n                msg = tpl.format(name=\"all users\", text=text)\n            messages.info(request, msg)\n\n## Advanced usage\n### Site wide object tools\nYou can create a site wide object tool by register your object tool to the admin site which inherited from `object_tool.CustomObjectToolAdminSiteMixin`. You can set the second parameter of `object_tool.CustomObjectToolAdminSiteMixin.add_object_tool` to *changelist* or *change* if you want to make your object tool appear in changelist view or change view only.\n\n    admin_site.add_object_tool(lambda modeladmin, request, obj=None: \"some action\")\n\n> Note: Apparantly, you need to set your model admin's admin_site to the above site which your object tool registered to.\n\n### Work with your own admin template\n In a `object_tool.CustomObjectToolAdminSiteMixin` class, rather than extends your template from `admin/change_list.html` or `admin/change_form.html`, you should extends `admin/object_tool/object-tool-items.html` instead.\n\n* admin.py\n\n        class SomeModelAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n            change_list_template = \"template.html\"\n\n* template.html\n\n        {% extends 'admin/object_tool/baseview.html' %}\n\n        ...your template code goes here...\n\n\n### Use in reusable apps\nYou may run `object_tool.ObjectToolConfig.register()` in your reusable app's ready method. By doing this, users who use your reusable app needn't to add `object_tool` to their INSTALLED_APPS. By default this will not replace the default admin site and modeladmin, you need inherit your modeladmin class from `object_tool.ObjectToolModelAdminMixin`, if you still want to replace the default modeladmin, you need pass True to the register method, but we don't recommend you to do so, this have a side-effect on other apps your installed.\n\n    class AppConfig(AppConfig):\n        name = 'app'\n\n        def ready(self):\n            import object_tool\n            object_tool.ObjectToolConfig.register()\n\n\n### Ordering of object tools\nRefer to the below table which lists the object tools' registration with the highest precedence at the top and lowest at the bottom.\n\n* admin site global tools\n* admin site global specify view tools\n* tools defined in parent model admins\n* specify view tools defined in parent model admins\n* tools defined in current model admin\n* specify view tools defined in current model admin\n\n### Customize button styles\nAssign *classes* property to object tool action can add classes to the object tool button.\n\n    def some_action(self, request, obj=None):\n        pass\n\n    some_action.classes = \"addlink\"\n\n## Configurations\n| name | default | description |\n| --- | --- | --- |\n| OBJECT_TOOL_PATCHADMINSITE | True | replace `django.contrib.admin.sites.site` with `object_tool.CustomObjectToolAdminSite` when app loaded |\n| OBJECT_TOOL_PATCHMODELADMIN | False | replace `django.contrib.admin.options.ModelAdmin` with `object_tool.CustomObjectToolModelAdmin` when app loaded |\n\n## Compatibilities\n### django-import-export\nWe do not support [django-import-export](https://github.com/django-import-export/django-import-export/tree/master/import_export) yet, but we have plan support django-import-export in the future.\n\n## Example app\nWe provided an example app\n\n    git clone git@github.com:Xavier-Lam/django-object-tool.git\n    cd django-object-tool/example\n    pip install -r requirements.txt\n    python manage.py migrate\n    python manage.py runserver\n\nThen visit ***http://127.0.0.1:8000/admin*** and login as super admin by using account ***admin*** with password ***123456***.\n\n## TODOS\n* unittests\n* permissions\n* [django-import-export](https://github.com/django-import-export/django-import-export/tree/master/import_export) compatibility\n\n## Change logs\n### 0.0.1\n* custom object tools\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Xavier-Lam/django-object-tool", "keywords": "django,object-tool,object-tools,administration", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-object-tool", "package_url": "https://pypi.org/project/django-object-tool/", "platform": "", "project_url": "https://pypi.org/project/django-object-tool/", "project_urls": {"Homepage": "https://github.com/Xavier-Lam/django-object-tool"}, "release_url": "https://pypi.org/project/django-object-tool/0.0.10/", "requires_dist": ["Django (>=1.11)", "six (>=1.0.0)"], "requires_python": "", "summary": "Django admin customize object tools support", "version": "0.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django-object-tool</h1>\n<p><a href=\"https://pypi.org/project/django-object-tool\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1c6258938a40507d598b65473511e30e07698ee/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d6f626a6563742d746f6f6c2e737667\"></a>\n<a href=\"https://travis-ci.org/Xavier-Lam/django-object-tool\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/331cb34b40aede58453475b7c3c2a61ca39b0eeb/68747470733a2f2f7472617669732d63692e6f72672f5861766965722d4c616d2f646a616e676f2d6f626a6563742d746f6f6c2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>django-object-tool</strong> let you can customize django administration's object-tools bar. You can add actions to object-tools bar beside add-object button. The definition of object-tool action are almost same as django's default action.</p>\n<blockquote>\n<p>This is a pre alpha version without any unittest, there may have serveral problems and not compatible with some django or python versions.</p>\n</blockquote>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2c0991c031be85baa370ad7e21113c902d2ba3ab/646f63732f7374617469632f696d616765732f6578616d706c652e6a70673f7261773d74727565\"></p>\n<ul>\n<li><a href=\"#quick-start\" rel=\"nofollow\">Quick Start</a>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#write-your-first-admin\" rel=\"nofollow\">Write your first admin</a></li>\n<li><a href=\"#specific-view-only-object-tools\" rel=\"nofollow\">Specific view only object tools</a></li>\n<li><a href=\"#shortcuts\" rel=\"nofollow\">Shortcuts</a>\n<ul>\n<li><a href=\"#shortcut-for-hyperlinks\" rel=\"nofollow\">Shortcut for hyperlinks</a></li>\n<li><a href=\"#execute-after-confirmation\" rel=\"nofollow\">Execute after confirmation</a></li>\n<li><a href=\"#create-a-form\" rel=\"nofollow\">Create a form</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#advanced-usage\" rel=\"nofollow\">Advanced usage</a>\n<ul>\n<li><a href=\"#site-wide-object-tools\" rel=\"nofollow\">Site wide object tools</a></li>\n<li><a href=\"#work-with-your-own-admin-template\" rel=\"nofollow\">Work with your own admin template</a></li>\n<li><a href=\"#use-in-reusable-apps\" rel=\"nofollow\">Use in reusable apps</a></li>\n<li><a href=\"#ordering-of-object-tools\" rel=\"nofollow\">Ordering of object tools</a></li>\n<li><a href=\"#customize-button-styles\" rel=\"nofollow\">Customize button styles</a></li>\n</ul>\n</li>\n<li><a href=\"#configurations\" rel=\"nofollow\">Configurations</a></li>\n<li><a href=\"#compatibilities\" rel=\"nofollow\">Compatibilities</a>\n<ul>\n<li><a href=\"#django-import-export\" rel=\"nofollow\">django-import-export</a></li>\n</ul>\n</li>\n<li><a href=\"#example-app\" rel=\"nofollow\">Example app</a></li>\n<li><a href=\"#todos\" rel=\"nofollow\">TODOS</a></li>\n<li><a href=\"#change-logs\" rel=\"nofollow\">Change logs</a>\n<ul>\n<li><a href=\"#001\" rel=\"nofollow\">0.0.1</a></li>\n</ul>\n</li>\n</ul>\n<h2>Quick Start</h2>\n<h3>Installation</h3>\n<p>Install django-object-tool by using pip</p>\n<pre><code>pip install django-object-tool\n</code></pre>\n<p>then add it to your INSTALLED_APP</p>\n<pre><code># settings\nINSTALLED_APPS = (\n    ...\n    \"object-tool\",\n    \"your app needs object-tool\"\n)\n</code></pre>\n<p>All prequisites are set up! See <a href=\"#Write-your-first-admin\" rel=\"nofollow\">Write your first admin</a> to learn how to use django-object-tool in your project.</p>\n<blockquote>\n<p>Note: We've patched django's default admin site(<code>django.contrib.admin.site</code>) by default, if you want to write your own admin site, please mix <code>object_tool.CustomObjectToolAdminSiteMixin</code> in your admin site class or direct inherit from <code>object_tool.CustomObjectToolAdminSite</code>.</p>\n<p>If you don't want to change the default site generate by django, you can set <code>OBJECT_TOOL_PATCHADMINSITE</code> to <code>False</code> in your settings file.</p>\n</blockquote>\n<h3>Write your first admin</h3>\n<p>The object tool takes a request and an optional object, when this tool called inside a change view, the current editing object will be passed in.</p>\n<pre><code>from object_tool import CustomObjectToolModelAdminMixin\n\nclass SomeModelAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n    object_tools = (\"some_action\",)\n\n    def some_action(self, request, obj=None):\n        if obj:\n            obj.some_property = \"value\"\n            obj.save()\n        else:\n            self.get_queryset(request).all().update(some_property=\"value\")\n</code></pre>\n<blockquote>\n<p>The definition of object tool's action is almost same as django's default action, except the third parameter of the function is a optional current editing object rather than a queryset.</p>\n</blockquote>\n<h3>Specific view only object tools</h3>\n<p>You can define a object tool only show in changelist view or change view by register it to changelist_object_tools or change_object_tools in your model admin.</p>\n<pre><code>from object_tool import CustomObjectToolModelAdminMixin\n\nclass SomeModelAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n    changelist_object_tools = (\"changelist_view_only_action\",)\n    change_object_tools = (\"change_view_only_action\", )\n</code></pre>\n<h3>Shortcuts</h3>\n<h4>Shortcut for hyperlinks</h4>\n<p>You can create a hyperlink object tool like add-object by using <code>object_tool.link</code>, it takes a url as the first parameter and optional short_description as the second parameter.</p>\n<pre><code>from object_tool import CustomObjectToolModelAdminMixin, link\n\nclass SomeModelAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n    object_tools = (\"forkme\", )\n\n    forkme = link(\n        \"https://github.com/Xavier-Lam/django-object-tool\",\n        \"Fork me on github\")\n</code></pre>\n<h4>Execute after confirmation</h4>\n<pre><code>@object_tool.confirm(\"are you sure to edit %(obj)s??\", \"confirm-tool\")\ndef confirm_action(self, request, obj=None):\n    messages.success(request, \"success!\")\n</code></pre>\n<h4>Create a form</h4>\n<p>With <code>object_tool.form</code> decorator, it is very easy to create a form view. This decorator takes a Form class as first parameter and it will auto render the form. When form is cleaned, it will actually execute decorated codes.</p>\n<pre><code>from object_tool import CustomObjectToolModelAdminMixin, form\n\nclass Form(forms.Form):\n    text = forms.CharField()\n\nclass UserAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n    object_tools = (\"greetings\", )\n\n    @form(Form, \"greetings\")\n    def greetings(self, request, form, obj=None):\n        text = form.cleaned_data[\"text\"]\n        tpl = \"greetings to {name}: {text}\"\n        if obj:\n            msg = tpl.format(name=obj.name, text=text)\n        else:\n            msg = tpl.format(name=\"all users\", text=text)\n        messages.info(request, msg)\n</code></pre>\n<h2>Advanced usage</h2>\n<h3>Site wide object tools</h3>\n<p>You can create a site wide object tool by register your object tool to the admin site which inherited from <code>object_tool.CustomObjectToolAdminSiteMixin</code>. You can set the second parameter of <code>object_tool.CustomObjectToolAdminSiteMixin.add_object_tool</code> to <em>changelist</em> or <em>change</em> if you want to make your object tool appear in changelist view or change view only.</p>\n<pre><code>admin_site.add_object_tool(lambda modeladmin, request, obj=None: \"some action\")\n</code></pre>\n<blockquote>\n<p>Note: Apparantly, you need to set your model admin's admin_site to the above site which your object tool registered to.</p>\n</blockquote>\n<h3>Work with your own admin template</h3>\n<p>In a <code>object_tool.CustomObjectToolAdminSiteMixin</code> class, rather than extends your template from <code>admin/change_list.html</code> or <code>admin/change_form.html</code>, you should extends <code>admin/object_tool/object-tool-items.html</code> instead.</p>\n<ul>\n<li>\n<p>admin.py</p>\n<pre><code>  class SomeModelAdmin(CustomObjectToolModelAdminMixin, admin.ModelAdmin):\n      change_list_template = \"template.html\"\n</code></pre>\n</li>\n<li>\n<p>template.html</p>\n<pre><code>  {% extends 'admin/object_tool/baseview.html' %}\n\n  ...your template code goes here...\n</code></pre>\n</li>\n</ul>\n<h3>Use in reusable apps</h3>\n<p>You may run <code>object_tool.ObjectToolConfig.register()</code> in your reusable app's ready method. By doing this, users who use your reusable app needn't to add <code>object_tool</code> to their INSTALLED_APPS. By default this will not replace the default admin site and modeladmin, you need inherit your modeladmin class from <code>object_tool.ObjectToolModelAdminMixin</code>, if you still want to replace the default modeladmin, you need pass True to the register method, but we don't recommend you to do so, this have a side-effect on other apps your installed.</p>\n<pre><code>class AppConfig(AppConfig):\n    name = 'app'\n\n    def ready(self):\n        import object_tool\n        object_tool.ObjectToolConfig.register()\n</code></pre>\n<h3>Ordering of object tools</h3>\n<p>Refer to the below table which lists the object tools' registration with the highest precedence at the top and lowest at the bottom.</p>\n<ul>\n<li>admin site global tools</li>\n<li>admin site global specify view tools</li>\n<li>tools defined in parent model admins</li>\n<li>specify view tools defined in parent model admins</li>\n<li>tools defined in current model admin</li>\n<li>specify view tools defined in current model admin</li>\n</ul>\n<h3>Customize button styles</h3>\n<p>Assign <em>classes</em> property to object tool action can add classes to the object tool button.</p>\n<pre><code>def some_action(self, request, obj=None):\n    pass\n\nsome_action.classes = \"addlink\"\n</code></pre>\n<h2>Configurations</h2>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OBJECT_TOOL_PATCHADMINSITE</td>\n<td>True</td>\n<td>replace <code>django.contrib.admin.sites.site</code> with <code>object_tool.CustomObjectToolAdminSite</code> when app loaded</td>\n</tr>\n<tr>\n<td>OBJECT_TOOL_PATCHMODELADMIN</td>\n<td>False</td>\n<td>replace <code>django.contrib.admin.options.ModelAdmin</code> with <code>object_tool.CustomObjectToolModelAdmin</code> when app loaded</td>\n</tr></tbody></table>\n<h2>Compatibilities</h2>\n<h3>django-import-export</h3>\n<p>We do not support <a href=\"https://github.com/django-import-export/django-import-export/tree/master/import_export\" rel=\"nofollow\">django-import-export</a> yet, but we have plan support django-import-export in the future.</p>\n<h2>Example app</h2>\n<p>We provided an example app</p>\n<pre><code>git clone git@github.com:Xavier-Lam/django-object-tool.git\ncd django-object-tool/example\npip install -r requirements.txt\npython manage.py migrate\npython manage.py runserver\n</code></pre>\n<p>Then visit <em><strong><a href=\"http://127.0.0.1:8000/admin\" rel=\"nofollow\">http://127.0.0.1:8000/admin</a></strong></em> and login as super admin by using account <em><strong>admin</strong></em> with password <em><strong>123456</strong></em>.</p>\n<h2>TODOS</h2>\n<ul>\n<li>unittests</li>\n<li>permissions</li>\n<li><a href=\"https://github.com/django-import-export/django-import-export/tree/master/import_export\" rel=\"nofollow\">django-import-export</a> compatibility</li>\n</ul>\n<h2>Change logs</h2>\n<h3>0.0.1</h3>\n<ul>\n<li>custom object tools</li>\n</ul>\n\n          </div>"}, "last_serial": 6886401, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "c45b09b7ed8a17cf17eb73ede3194588", "sha256": "4b11dc916688c3c804a72a97ebbf29be88bd675bc98036cb57e0b56c8d05ec85"}, "downloads": -1, "filename": "django_object_tool-0.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c45b09b7ed8a17cf17eb73ede3194588", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18471, "upload_time": "2020-03-26T02:53:27", "upload_time_iso_8601": "2020-03-26T02:53:27.752119Z", "url": "https://files.pythonhosted.org/packages/af/e6/79f5f2c0990689943e7e8fcb64937cbeb9f934b7aee1ca5545348e55a5ce/django_object_tool-0.0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c16119385df2394aec39c60db056df4", "sha256": "52f284d5a09ac30a7c442ffc7846480618dc534172247dcda566f17049cf8c09"}, "downloads": -1, "filename": "django-object-tool-0.0.10.tar.gz", "has_sig": false, "md5_digest": "4c16119385df2394aec39c60db056df4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14488, "upload_time": "2020-03-26T02:53:29", "upload_time_iso_8601": "2020-03-26T02:53:29.314680Z", "url": "https://files.pythonhosted.org/packages/38/77/439a6bd86c14e8563a1e9324572a17a174d916e4879bd6f54b8d6b38188f/django-object-tool-0.0.10.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "56c6153ce1c085f8d9e73b0cf4728b9e", "sha256": "1d0626f399958230cd3d3cec85fc8a67625c8e7dcaacc4f996924790c50318a5"}, "downloads": -1, "filename": "django_object_tool-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "56c6153ce1c085f8d9e73b0cf4728b9e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14612, "upload_time": "2019-03-21T12:08:27", "upload_time_iso_8601": "2019-03-21T12:08:27.165871Z", "url": "https://files.pythonhosted.org/packages/a0/aa/655dc87262f7540ef8f1996e7c69ed07a4c5338d95e8cd628ba60d811fce/django_object_tool-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17f8c16fb2079baeae9f8c4ec5a095f9", "sha256": "97fe6d4178ef5cd033704d82363f3cae840f664120770840e9f7f04cb66369c2"}, "downloads": -1, "filename": "django-object-tool-0.0.2.tar.gz", "has_sig": false, "md5_digest": "17f8c16fb2079baeae9f8c4ec5a095f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11023, "upload_time": "2019-03-21T12:08:30", "upload_time_iso_8601": "2019-03-21T12:08:30.318784Z", "url": "https://files.pythonhosted.org/packages/df/ae/428cfbeda62337da2cf438cd04b4e005c516ba2262cba954c9fb3243fb6d/django-object-tool-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a69dc28ac9c1d5bd48d69bbc7401e645", "sha256": "5022c6d018a54f30a72d36af74d192f5ce4cee702269969ac191d5b34ee3d3c4"}, "downloads": -1, "filename": "django_object_tool-0.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a69dc28ac9c1d5bd48d69bbc7401e645", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15097, "upload_time": "2019-03-24T17:12:05", "upload_time_iso_8601": "2019-03-24T17:12:05.504397Z", "url": "https://files.pythonhosted.org/packages/d8/1e/e6d1f032f0bc5a7ecb5679993ad6f501002aae96a70b0e8b6c0725732a4e/django_object_tool-0.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e49655701a9100e37a544f6e3bcc458", "sha256": "21691742fde25e413d95d0aa669147443e5b39d6e8eaf16595ed378d297a0d1e"}, "downloads": -1, "filename": "django-object-tool-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1e49655701a9100e37a544f6e3bcc458", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11261, "upload_time": "2019-03-24T17:12:07", "upload_time_iso_8601": "2019-03-24T17:12:07.136341Z", "url": "https://files.pythonhosted.org/packages/35/96/e6ed5d666908f35b9f2fdd14c2db14053912b8a758700c14e240823a4cd7/django-object-tool-0.0.3.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "ef6ad96a7f5ae541e6ac8e31dcc21632", "sha256": "aba2651346a9a04d4ca09c9fdfef45705aa72de48645dea184b8f91927a3b25d"}, "downloads": -1, "filename": "django_object_tool-0.0.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ef6ad96a7f5ae541e6ac8e31dcc21632", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17860, "upload_time": "2019-03-28T14:02:42", "upload_time_iso_8601": "2019-03-28T14:02:42.849380Z", "url": "https://files.pythonhosted.org/packages/26/fe/1747c19e39b438062fc4893a662b7afef71acef110a59df4a1da826138c0/django_object_tool-0.0.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d9d958c8fc9bd6d3915c7e51772fa92", "sha256": "4991c6baadc131dab5b5737b31b5903be90f447e7be73ab598d7805cf8d380b3"}, "downloads": -1, "filename": "django-object-tool-0.0.7.tar.gz", "has_sig": false, "md5_digest": "5d9d958c8fc9bd6d3915c7e51772fa92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13069, "upload_time": "2019-03-28T14:02:44", "upload_time_iso_8601": "2019-03-28T14:02:44.294830Z", "url": "https://files.pythonhosted.org/packages/75/de/ca00e5ad1b68ca157b776976cc41f68fa40e42f5134bdca5e67ab9f977ec/django-object-tool-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "d2d6aaef284e587cee75f5b289d89ef8", "sha256": "4a8613293a2a69bad7e96f118fd27d12f1f7095000bb48fddcb01319accae806"}, "downloads": -1, "filename": "django_object_tool-0.0.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d2d6aaef284e587cee75f5b289d89ef8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17881, "upload_time": "2019-03-30T07:29:29", "upload_time_iso_8601": "2019-03-30T07:29:29.000703Z", "url": "https://files.pythonhosted.org/packages/af/5d/04bd8e1a52e5327d8c77227f109eeb4a15cfa553b61b2fbd4c28dad69c66/django_object_tool-0.0.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c58009003ae8c6715cdc2a7534539bc", "sha256": "b65ba052ba9db43776155eb0d4a4c373e5420013c3b8e7bab11a32d27c56033f"}, "downloads": -1, "filename": "django-object-tool-0.0.8.tar.gz", "has_sig": false, "md5_digest": "1c58009003ae8c6715cdc2a7534539bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13110, "upload_time": "2019-03-30T07:29:30", "upload_time_iso_8601": "2019-03-30T07:29:30.543304Z", "url": "https://files.pythonhosted.org/packages/89/cd/122952ab1de5caccd1b1dd7a99bbfb7e1ee95be28856582f6dfb8d07f158/django-object-tool-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "cd0025b20637908fd89cbcea293ea6f7", "sha256": "77595eebceb2880ccd0edd0bbac749d2ef9bd65c16f4d7dd17cd78b9ab2183e9"}, "downloads": -1, "filename": "django_object_tool-0.0.9-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cd0025b20637908fd89cbcea293ea6f7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18440, "upload_time": "2019-12-02T17:02:05", "upload_time_iso_8601": "2019-12-02T17:02:05.404494Z", "url": "https://files.pythonhosted.org/packages/9d/29/bbc9fbb719f7a13543cec7325ec80346d10915bdd9833336e6a8bab1ef3b/django_object_tool-0.0.9-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd4e9748e03bd77cc389175bb2f2d902", "sha256": "0f66f6e6cd92098a129489d0d6989f5ac6ab9f1d50c3a34b8db502135e5570cc"}, "downloads": -1, "filename": "django-object-tool-0.0.9.tar.gz", "has_sig": false, "md5_digest": "cd4e9748e03bd77cc389175bb2f2d902", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14441, "upload_time": "2019-12-02T17:02:07", "upload_time_iso_8601": "2019-12-02T17:02:07.259526Z", "url": "https://files.pythonhosted.org/packages/10/c3/76f1517dc2972229ed2b35e2324f7dd8e73bb91e902698ea64461649a6cd/django-object-tool-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c45b09b7ed8a17cf17eb73ede3194588", "sha256": "4b11dc916688c3c804a72a97ebbf29be88bd675bc98036cb57e0b56c8d05ec85"}, "downloads": -1, "filename": "django_object_tool-0.0.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c45b09b7ed8a17cf17eb73ede3194588", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 18471, "upload_time": "2020-03-26T02:53:27", "upload_time_iso_8601": "2020-03-26T02:53:27.752119Z", "url": "https://files.pythonhosted.org/packages/af/e6/79f5f2c0990689943e7e8fcb64937cbeb9f934b7aee1ca5545348e55a5ce/django_object_tool-0.0.10-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c16119385df2394aec39c60db056df4", "sha256": "52f284d5a09ac30a7c442ffc7846480618dc534172247dcda566f17049cf8c09"}, "downloads": -1, "filename": "django-object-tool-0.0.10.tar.gz", "has_sig": false, "md5_digest": "4c16119385df2394aec39c60db056df4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14488, "upload_time": "2020-03-26T02:53:29", "upload_time_iso_8601": "2020-03-26T02:53:29.314680Z", "url": "https://files.pythonhosted.org/packages/38/77/439a6bd86c14e8563a1e9324572a17a174d916e4879bd6f54b8d6b38188f/django-object-tool-0.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:34 2020"}