{"info": {"author": "Till Stensitzki", "author_email": "tillsten@zedat.fu-berlin.de", "bugtrack_url": null, "classifiers": [], "description": "===========\nqt-dataflow\n===========\nThis package tries to provide components for building your own\nvisual programming environment. The authors aim is to make his\ndata analysis tool available to his colleagues who don't\nknow programming or Python.\n\nBecause a standard gui is not very flexible, this projects tries\nto make visual canvas on which the dataflow can be defined and modified.\nExtensibility is given through simply adding or modifying Nodes.\n\n\nThis project is inspired by Orange - where i did not see an easy way to just\nuse the canvas part (also: license differences). Also the design tries\nto be more flexible.\n\n\nRequirements\n------------\nIt is made with Python 2.7. Not tested for lower versions or\nPython 3 (patches welcome). It should work with PySide and PyQt,\nbut at the moment, the imports need to be manually changed.\n\nThe examples may have additional requirements:\n   * numpy\n   * matplotlib\n   * pyqtgraph\n\nExamples\n--------\nSee example.py for an simple example using icons which react to double click.\nTo make a connection draw from one nodes termial to another\n(only out-> in is allowed).\n\n.. image:: https://github.com/Tillsten/qt-dataflow/raw/master/example.png\n\n*  example_widget uses widgets on the canvas directly, it also implements\n   a simple callback. Note how the label updates after changing the\n   SpinBox-value.\n\n*  example_pyqtgraph need also the pyqtgraph package. It plot directly on the\n   canvas.\n\n*  example_matplotlib_on_canvas does the same, but uses matplotlib via\n   a temporary file.\n\nCode Example\n------------\nTo make custom nodes you need to subclass Node. It must return\na NodeView via its 'get_view' method. The following example\nimplements a Node which make a random number.\n\n.. code-block:: python\n\n    class RandomNumber(Node):\n        \"\"\"\n        A test node which outputs a random number. Widget allow to set the number.\n        \"\"\"\n        def __init__(self):\n            super(DataGenNode, self).__init__()\n            #Node type/name\n            self.node_type = 'Random Array'\n            #Icon_path is needed for the PixmapNodeView\n            self.icon_path = 'icons/onebit_11.png'\n            #The makes the node have an output terminal.\n            self.generates_output = True\n\n        def get_view(self):\n            return PixmapNodeView(self)\n\n        def get(self):\n            #Method which can be called by other nodes. The name is just\n            #a convention.\n            num = [random.random() for i in range(self.num_points)]\n            return num\n\n        def show_widget(self):\n            #Method called by double clicking on the icon.\n            int, ok = Qt.QtGui.QInputDialog.getInteger(None, 'Input Dialog',\n                                              'Number of Points', self.num_points)\n            if ok:\n                self.num_points = int\n\n\nA node saves its connections in node.in_conn and node.out_conn. Also\nnote, that each node view must be a child of a QGraphicsItem and NodeView.\n\n\nStructure\n---------\n\nIn model the base Node- and Schema-classes are found. In view are some\nview available. gui contains some additional ready to use elements.\n\nTodo\n----\n* add different icons (simple)\n* nicer toolbar (drag-n-drop would be nice)\n* test persistence, define a stable protocol if pickling does not work\n* make an example with less requirements.\n* checking and introducing a connection type\n* move some logic for allowing or denying connections\n  from SchemaView to the NodeView.\n* checking and improving compatibility with different Python versions.\n* better documentation\n* make number of terminals variable.\n* ...\n\nCoding Style\n------------\nThis projects tries to follow PEP8.\n\nLicense\n-------\nExample icons are from http://www.icojam.com/blog/?p=177 (Public Domain).\n\nBSD - 3 clauses, see license.txt.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Tillsten/qt-dataflow", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "qt-dataflow", "package_url": "https://pypi.org/project/qt-dataflow/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/qt-dataflow/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Tillsten/qt-dataflow"}, "release_url": "https://pypi.org/project/qt-dataflow/0.2.3/", "requires_dist": null, "requires_python": null, "summary": "A base for custom visual programming enviroments", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package tries to provide components for building your own\nvisual programming environment. The authors aim is to make his\ndata analysis tool available to his colleagues who don\u2019t\nknow programming or Python.</p>\n<p>Because a standard gui is not very flexible, this projects tries\nto make visual canvas on which the dataflow can be defined and modified.\nExtensibility is given through simply adding or modifying Nodes.</p>\n<p>This project is inspired by Orange - where i did not see an easy way to just\nuse the canvas part (also: license differences). Also the design tries\nto be more flexible.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>It is made with Python 2.7. Not tested for lower versions or\nPython 3 (patches welcome). It should work with PySide and PyQt,\nbut at the moment, the imports need to be manually changed.</p>\n<dl>\n<dt>The examples may have additional requirements:</dt>\n<dd><ul>\n<li>numpy</li>\n<li>matplotlib</li>\n<li>pyqtgraph</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>See example.py for an simple example using icons which react to double click.\nTo make a connection draw from one nodes termial to another\n(only out-&gt; in is allowed).</p>\n<img alt=\"https://github.com/Tillsten/qt-dataflow/raw/master/example.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6efa3c9d7fe64af03c371b161d3819ff9301d05c/68747470733a2f2f6769746875622e636f6d2f54696c6c7374656e2f71742d64617461666c6f772f7261772f6d61737465722f6578616d706c652e706e67\">\n<ul>\n<li>example_widget uses widgets on the canvas directly, it also implements\na simple callback. Note how the label updates after changing the\nSpinBox-value.</li>\n<li>example_pyqtgraph need also the pyqtgraph package. It plot directly on the\ncanvas.</li>\n<li>example_matplotlib_on_canvas does the same, but uses matplotlib via\na temporary file.</li>\n</ul>\n</div>\n<div id=\"code-example\">\n<h2>Code Example</h2>\n<p>To make custom nodes you need to subclass Node. It must return\na NodeView via its \u2018get_view\u2019 method. The following example\nimplements a Node which make a random number.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">RandomNumber</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    A test node which outputs a random number. Widget allow to set the number.\n    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">DataGenNode</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"c1\">#Node type/name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">node_type</span> <span class=\"o\">=</span> <span class=\"s1\">'Random Array'</span>\n        <span class=\"c1\">#Icon_path is needed for the PixmapNodeView</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">icon_path</span> <span class=\"o\">=</span> <span class=\"s1\">'icons/onebit_11.png'</span>\n        <span class=\"c1\">#The makes the node have an output terminal.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">generates_output</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">PixmapNodeView</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\">#Method which can be called by other nodes. The name is just</span>\n        <span class=\"c1\">#a convention.</span>\n        <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span><span class=\"p\">)]</span>\n        <span class=\"k\">return</span> <span class=\"n\">num</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">show_widget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\">#Method called by double clicking on the icon.</span>\n        <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"n\">Qt</span><span class=\"o\">.</span><span class=\"n\">QtGui</span><span class=\"o\">.</span><span class=\"n\">QInputDialog</span><span class=\"o\">.</span><span class=\"n\">getInteger</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'Input Dialog'</span><span class=\"p\">,</span>\n                                          <span class=\"s1\">'Number of Points'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ok</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_points</span> <span class=\"o\">=</span> <span class=\"nb\">int</span>\n</pre>\n<p>A node saves its connections in node.in_conn and node.out_conn. Also\nnote, that each node view must be a child of a QGraphicsItem and NodeView.</p>\n</div>\n<div id=\"structure\">\n<h2>Structure</h2>\n<p>In model the base Node- and Schema-classes are found. In view are some\nview available. gui contains some additional ready to use elements.</p>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<ul>\n<li>add different icons (simple)</li>\n<li>nicer toolbar (drag-n-drop would be nice)</li>\n<li>test persistence, define a stable protocol if pickling does not work</li>\n<li>make an example with less requirements.</li>\n<li>checking and introducing a connection type</li>\n<li>move some logic for allowing or denying connections\nfrom SchemaView to the NodeView.</li>\n<li>checking and improving compatibility with different Python versions.</li>\n<li>better documentation</li>\n<li>make number of terminals variable.</li>\n<li>\u2026</li>\n</ul>\n</div>\n<div id=\"coding-style\">\n<h2>Coding Style</h2>\n<p>This projects tries to follow PEP8.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Example icons are from <a href=\"http://www.icojam.com/blog/?p=177\" rel=\"nofollow\">http://www.icojam.com/blog/?p=177</a> (Public Domain).</p>\n<p>BSD - 3 clauses, see license.txt.</p>\n</div>\n\n          </div>"}, "last_serial": 573237, "releases": {"0.2": [], "0.2.1": [], "0.2.2": [], "0.2.3": []}, "urls": [], "timestamp": "Fri May  8 03:09:09 2020"}