{"info": {"author": "Tammo Ippen", "author_email": "tammo.ippen@posteo.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "GEOPIP: Geojson Point in Polygon (PIP)\n======================================\n\n|Build Status| |Coverage Status| |Tested CPython Versions| |Tested PyPy\nVersions| |PyPi version| |PyPi license|\n\nReverse geocode a lng/lat coordinate within a geojson\n``FeatureCollection`` and return information about the containing\ncountry (polygon).\n\nBasically, you can use any\n`geojson <https://tools.ietf.org/html/rfc7946>`__ file (top level is a\n``FeatureCollection``) for reverse coding - set the environment variable\n``REVERSE_GEOCODE_DATA`` to the geojson file. Only ``Polygon`` and\n``MultiPolygon`` features will be used! If a point is found to be in a\nfeature, the ``properties`` of that feature will be returned.\n\nIn other words, provide a geojson with postcode boundaries, and you can\nquery for the postcode in which a coordinate is. Provide timezone\nboundaries and you can find the timezone for a coordinate. Be creative\n:).\n\nThe default shape data (contained within the package) is from\n`thematicmapping <http://thematicmapping.org/downloads/world_borders.php>`__\n(the simple shapes). It contains polygons representing one country with\nthe following meta-data (``properties``):\n\n::\n\n    FIPS      String(2)         FIPS 10-4 Country Code\n    ISO2      String(2)         ISO 3166-1 Alpha-2 Country Code\n    ISO3      String(3)         ISO 3166-1 Alpha-3 Country Code\n    UN        Short Integer(3)  ISO 3166-1 Numeric-3 Country Code\n    NAME      String(50)        Name of country/area\n    AREA      Long Integer(7)   Land area, FAO Statistics (2002)\n    POP2005   Double(10,0)      Population, World Population Prospects (2005)\n    REGION    Short Integer(3)  Macro geographical (continental region), UN Statistics\n    SUBREGION Short Integer(3)  Geographical sub-region, UN Statistics\n    LON       FLOAT (7,3)       Longitude\n    LAT       FLOAT (6,3)       Latitude\n\nHence, you can use this package as an *offline reverse geocoder on the\ncountry level* (by default):\n\n.. code:: python\n\n    In [1]: import geopip\n    In [2]: geopip.search(lng=4.910248, lat=50.850981)\n    Out[2]:\n    {'AREA': 0,\n     'FIPS': 'BE',\n     'ISO2': 'BE',\n     'ISO3': 'BEL',\n     'LAT': 50.643,\n     'LON': 4.664,\n     'NAME': 'Belgium',\n     'POP2005': 10398049,\n     'REGION': 150,\n     'SUBREGION': 155,\n     'UN': 56}\n\n**NOTE**: Since the polygons for each country are quite simple, reverse\ngeocoding at the borders of two countrys is **not** exact. Use polygons\nwith higher resolution for these use cases (see `Data <#data>`__).\n\nThe ``shapely`` package will be used, if installed. Otherwise, a pure\npython implementation will be used (on the basis of `winding\nnumbers <https://en.wikipedia.org/wiki/Winding_number>`__). See\n`here <https://www.toptal.com/python/computational-geometry-in-python-from-theory-to-implementation>`__,\n`here <http://geomalgorithms.com/a03-_inclusion.html>`__ and\n`here <http://www.dgp.toronto.edu/~mac/e-stuff/point_in_polygon.py>`__\nfor more informations and example implementations. Espacially for larger\nfeatures, the shapely implementation might give performance improvements\n(default shape data and 2.6 GHz Intel Core i7, python3.6.2, cythonized\nversion of\n`geohash-hilbert <https://github.com/tammoippen/geohash-hilbert>`__):\n\n*Pure*:\n\n.. code:: python\n\n    In [1]: import geopip\n    In [2]: geopip._geopip.p_in_polygon?\n    Signature: geopip._geopip.p_in_polygon(p, shp)\n    Docstring:\n    Test, whether point `p` is in shape `shp`.\n\n    Use the pure python implementation for this.\n\n    Parameters:\n        p: Tuple[float, float]  Point (lng, lat) in WGS84.\n        shp: Dict[str, Any]     Prepared shape dictionary from `geopip._pure.prepare()`.\n\n    Returns:\n        boolean: True, if p in shp, False otherwise\n    File:      ~/repositories/geopip/geopip/_pure.py\n    Type:      function\n    In [3]: %timeit geopip.search(4.910248, 50.850981)\n    25.6 \u00b5s \u00b1 390 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n*Shapely*:\n\n.. code:: python\n\n    In [1]: import geopip\n    In [2]: geopip_geopip.p_in_polygon?\n    Signature: geopip._geopip.p_in_polygon(p, shp)\n    Docstring:\n    Test, whether point `p` is in shape `shp`.\n\n    Use the shapely implementation for this.\n\n    Parameters:\n        p: Tuple[float, float]  Point (lng, lat) in WGS84.\n        shp: Dict[str, Any]     Prepared shape dictionary from `geopip._shapely.prepare()`.\n\n    Returns:\n        boolean: True, if p in shp, False otherwise\n    File:      ~/repositories/geopip/geopip/_shapely.py\n    Type:      function\n    In [3]: %timeit geopip.search(4.910248, 50.850981)\n    50 \u00b5s \u00b1 601 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\nFor simple geojsons, the pure python implementation is faster, but on\nmore complex polygons, the shapely implementation will win.\n\nInstall\n-------\n\n.. code:: sh\n\n    pip install geopip\n\nIf you require the extra speed, because you have many polygons and / or\nvery detailed polygons, try installing geohash-hilbert with Cython\nextensions and / or have (vectorized) shapely installed.\n\n.. code:: sh\n\n    # make sure to have GEOS library installed (including dev extensions)\n    pip install numpy 'shapely[vectorized]>=1.6'\n\n    pip install cython  # for building geohash-hilbert's cython extension\n    pip install --upgrade geohash-hilbert\n\nData\n----\n\nOther interesting shape data can be found at:\n\n-  http://www.naturalearthdata.com/downloads/ : Different thematic shape\n   files at 10m, 50m and 110m resolution.\n-  http://www.gadm.org/version2 : Administrative area 0 or 1 contain\n   contries or states, respectively. Attention to the license!\n-  https://www2.census.gov/geo/tiger/: Various shape/gdb files and\n   information for USA.\n-  http://guides.library.upenn.edu/c.php?g=475518&p=3254770: Links to\n   various geoinformation data.\n-  http://thematicmapping.org/downloads/world\\_borders.php: Country\n   borders and some interesting information. The default file is from\n   here. There is also a higher resolution version.\n-  https://github.com/evansiroky/timezone-boundary-builder: Time zone\n   boundaries. See releases for downloads.\n-  https://www.suche-postleitzahl.org/plz-karte-erstellen: DE\n   postalcodes + size + population (Census / OSM).\n-  https://www2.census.gov/geo/tiger/TIGER2010DP1/ZCTA\\_2010Census\\_DP1.zip:\n   US postalcodes + size + population (Census; field definition see\n   ``DP_TableDescriptions.xls`` in the zip).\n\n**NOTE**: shapefiles / gdb databases have to be transformed into\ngeojson. One way is to use\n`fiona <https://github.com/Toblerity/Fiona>`__. Assuming the gdb files\nare in the directory ``/data/gdb``:\n\n.. code:: python\n\n    fio insp /data/gdb\n    # a python shell opens\n    >>> import json\n    >>> features = []\n    >>> for feat in src:\n    ...     features += [feat]\n    ...\n    >>> f = open('/data/gdb.geo.json', 'w')\n    >>> json.dump(dict(type='FeatureCollection', features=features), f)\n    >>> f.close()\n\nThen the ``gdb`` will be transformed into a geojson file\n``gdb.geo.json``.\n\nDocumentation\n=============\n\n(*TODO* more) Basically, there are the two functions ``geopip.search``\nand ``geopip.search_all`` that perform the search in the provided\n``FeatureCollection``. Then there is the class ``geopip.GeoPIP`` that\naccepts a ``FeatureCollection`` either as a file or a dictionary and\nprovides the same search functionality:\n\n``search``\n----------\n\n.. code:: python\n\n    In [1]: import geopip\n    In [2]: geopip.search?\n    Signature: geopip.search(lng, lat)\n    Docstring:\n    Reverse geocode lng/lat coordinate within the features from `instance().shapes`.\n\n    Look within the features from the `instance().shapes` function for a polygon that\n    contains the point (lng, lat). From the first found feature the `porperties`\n    will be returned. `None`, if no feature containes the point.\n\n    Parameters:\n        lng: float  Longitude (-180, 180) of point. (WGS84)\n        lat: float  Latitude (-90, 90) of point. (WGS84)\n\n    Returns:\n        Dict[Any, Any]  `Properties` of found feature. `None` if nothing is found.\n    File:      ~/repositories/geopip/geopip/__init__.py\n    Type:      function\n\n``search_all``\n--------------\n\n.. code:: python\n\n    In [1]: import geopip\n    In [2]: geopip.search_all?\n    Signature: geopip.search_all(lng, lat)\n    Docstring:\n    Reverse geocode lng/lat coordinate within the features from `instance().shapes`.\n\n    Look within the features from the `instance().shapes` function for all polygon that\n    contains the point (lng, lat). From all found feature the `porperties`\n    will be returned (more or less sorted from smallest to largest feature).\n    `None`, if no feature containes the point.\n\n    Parameters:\n        lng: float  Longitude (-180, 180) of point. (WGS84)\n        lat: float  Latitude (-90, 90) of point. (WGS84)\n\n    Returns:\n        Iterator[Dict[Any, Any]]  Iterator for `properties` of found features.\n    File:      ~/repositories/geopip/geopip/__init__.py\n    Type:      function\n\n``GeoPIP``\n----------\n\n.. code:: python\n\n    In [1]: import geopip\n    In [2]: geopip.GeoPIP?\n    Init signature: geopip.GeoPIP(self, *args, **kwargs)\n    Docstring:\n    GeoPIP: Geojson Point in Polygon (PIP)\n\n    Reverse geocode a lng/lat coordinate within a geojson `FeatureCollection` and\n    return information about the containing polygon.\n    Init docstring:\n    Provide the geojson either as a file (`filename`) or as a geojson\n    dict (`geojson_dict`). If none of both is given, it tries to load the\n    file pointed to in the environment variable `REVERSE_GEOCODE_DATA`. If the\n    variable is not set, a default geojson will be loaded (packaged):\n        http://thematicmapping.org/downloads/world_borders.php\n\n    During init, the geojson will be prepared (see pure / shapely implementation)\n    and indexed with geohashes.\n\n    Provide the parameters as kwargs!\n\n    Allowed parameters:\n        filename: str                 Path to a geojson file.\n        geojson_dict: Dict[str, Any]  Geojson dictionary. `FeatureCollection` required!\n    File:           ~/repositories/geopip/geopip/_geopip.py\n    Type:           type\n\nA ``GeoPIP`` object provides the same ``search`` and ``search_all``\nfunctions.\n\n.. |Build Status| image:: https://travis-ci.org/tammoippen/geopip.svg?branch=master\n   :target: https://travis-ci.org/tammoippen/geopip\n.. |Coverage Status| image:: https://coveralls.io/repos/github/tammoippen/geopip/badge.svg?branch=master\n   :target: https://coveralls.io/github/tammoippen/geopip?branch=master\n.. |Tested CPython Versions| image:: https://img.shields.io/badge/cpython-2.7%2C%203.5%2C%203.6%2C%20nightly-brightgreen.svg\n   :target: https://img.shields.io/badge/cpython-2.7%2C%203.5%2C%203.6%2C%20nightly-brightgreen.svg\n.. |Tested PyPy Versions| image:: https://img.shields.io/badge/pypy-2.7--5.8.0%2C%203.5--5.8.0-brightgreen.svg\n   :target: https://img.shields.io/badge/pypy-2.7--5.8.0%2C%203.5--5.8.0-brightgreen.svg\n.. |PyPi version| image:: https://img.shields.io/pypi/v/geopip.svg\n   :target: https://pypi.python.org/pypi/geopip\n.. |PyPi license| image:: https://img.shields.io/pypi/l/geopip.svg\n   :target: https://pypi.python.org/pypi/geopip", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/tammoippen/geopip/archive/v1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tammoippen/geopip", "keywords": "geojson,point in polygon,reverse geocode,countries", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "geopip", "package_url": "https://pypi.org/project/geopip/", "platform": "", "project_url": "https://pypi.org/project/geopip/", "project_urls": {"Download": "https://github.com/tammoippen/geopip/archive/v1.1.tar.gz", "Homepage": "https://github.com/tammoippen/geopip"}, "release_url": "https://pypi.org/project/geopip/1.1/", "requires_dist": null, "requires_python": "", "summary": "Reverse geocode a lng/lat coordinate within a geojson FeatureCollection.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"geopip-geojson-point-in-polygon-pip\">\n<h2>GEOPIP: Geojson Point in Polygon (PIP)</h2>\n<p><a href=\"https://travis-ci.org/tammoippen/geopip\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5910ec3d8a324817eebfcba3a5a5bcf30ab3664/68747470733a2f2f7472617669732d63692e6f72672f74616d6d6f697070656e2f67656f7069702e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/tammoippen/geopip?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fec346f81f7b2dd3d20a7c865db4fadac174833f/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f74616d6d6f697070656e2f67656f7069702f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://img.shields.io/badge/cpython-2.7%2C%203.5%2C%203.6%2C%20nightly-brightgreen.svg\" rel=\"nofollow\"><img alt=\"Tested CPython Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8725a26e7a93db4c35de571d7a23678ff5e80d9d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f63707974686f6e2d322e37253243253230332e35253243253230332e362532432532306e696768746c792d627269676874677265656e2e737667\"></a> <a href=\"https://img.shields.io/badge/pypy-2.7--5.8.0%2C%203.5--5.8.0-brightgreen.svg\" rel=\"nofollow\"><img alt=\"Tested PyPy Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab19daa2d1db6731b391d379de314d0bb3a902a0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707970792d322e372d2d352e382e30253243253230332e352d2d352e382e302d627269676874677265656e2e737667\"></a> <a href=\"https://pypi.python.org/pypi/geopip\" rel=\"nofollow\"><img alt=\"PyPi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1431bfe23e894aad25ea4f24e861518c6f679369/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f67656f7069702e737667\"></a> <a href=\"https://pypi.python.org/pypi/geopip\" rel=\"nofollow\"><img alt=\"PyPi license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfef77cd794a209b87c1aedf969355d5ddf87930/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f67656f7069702e737667\"></a></p>\n<p>Reverse geocode a lng/lat coordinate within a geojson\n<tt>FeatureCollection</tt> and return information about the containing\ncountry (polygon).</p>\n<p>Basically, you can use any\n<a href=\"https://tools.ietf.org/html/rfc7946\" rel=\"nofollow\">geojson</a> file (top level is a\n<tt>FeatureCollection</tt>) for reverse coding - set the environment variable\n<tt>REVERSE_GEOCODE_DATA</tt> to the geojson file. Only <tt>Polygon</tt> and\n<tt>MultiPolygon</tt> features will be used! If a point is found to be in a\nfeature, the <tt>properties</tt> of that feature will be returned.</p>\n<p>In other words, provide a geojson with postcode boundaries, and you can\nquery for the postcode in which a coordinate is. Provide timezone\nboundaries and you can find the timezone for a coordinate. Be creative\n:).</p>\n<p>The default shape data (contained within the package) is from\n<a href=\"http://thematicmapping.org/downloads/world_borders.php\" rel=\"nofollow\">thematicmapping</a>\n(the simple shapes). It contains polygons representing one country with\nthe following meta-data (<tt>properties</tt>):</p>\n<pre>FIPS      String(2)         FIPS 10-4 Country Code\nISO2      String(2)         ISO 3166-1 Alpha-2 Country Code\nISO3      String(3)         ISO 3166-1 Alpha-3 Country Code\nUN        Short Integer(3)  ISO 3166-1 Numeric-3 Country Code\nNAME      String(50)        Name of country/area\nAREA      Long Integer(7)   Land area, FAO Statistics (2002)\nPOP2005   Double(10,0)      Population, World Population Prospects (2005)\nREGION    Short Integer(3)  Macro geographical (continental region), UN Statistics\nSUBREGION Short Integer(3)  Geographical sub-region, UN Statistics\nLON       FLOAT (7,3)       Longitude\nLAT       FLOAT (6,3)       Latitude\n</pre>\n<p>Hence, you can use this package as an <em>offline reverse geocoder on the\ncountry level</em> (by default):</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">geopip</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">lng</span><span class=\"o\">=</span><span class=\"mf\">4.910248</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"o\">=</span><span class=\"mf\">50.850981</span><span class=\"p\">)</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n<span class=\"p\">{</span><span class=\"s1\">'AREA'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n <span class=\"s1\">'FIPS'</span><span class=\"p\">:</span> <span class=\"s1\">'BE'</span><span class=\"p\">,</span>\n <span class=\"s1\">'ISO2'</span><span class=\"p\">:</span> <span class=\"s1\">'BE'</span><span class=\"p\">,</span>\n <span class=\"s1\">'ISO3'</span><span class=\"p\">:</span> <span class=\"s1\">'BEL'</span><span class=\"p\">,</span>\n <span class=\"s1\">'LAT'</span><span class=\"p\">:</span> <span class=\"mf\">50.643</span><span class=\"p\">,</span>\n <span class=\"s1\">'LON'</span><span class=\"p\">:</span> <span class=\"mf\">4.664</span><span class=\"p\">,</span>\n <span class=\"s1\">'NAME'</span><span class=\"p\">:</span> <span class=\"s1\">'Belgium'</span><span class=\"p\">,</span>\n <span class=\"s1\">'POP2005'</span><span class=\"p\">:</span> <span class=\"mi\">10398049</span><span class=\"p\">,</span>\n <span class=\"s1\">'REGION'</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">,</span>\n <span class=\"s1\">'SUBREGION'</span><span class=\"p\">:</span> <span class=\"mi\">155</span><span class=\"p\">,</span>\n <span class=\"s1\">'UN'</span><span class=\"p\">:</span> <span class=\"mi\">56</span><span class=\"p\">}</span>\n</pre>\n<p><strong>NOTE</strong>: Since the polygons for each country are quite simple, reverse\ngeocoding at the borders of two countrys is <strong>not</strong> exact. Use polygons\nwith higher resolution for these use cases (see <a href=\"#data\" rel=\"nofollow\">Data</a>).</p>\n<p>The <tt>shapely</tt> package will be used, if installed. Otherwise, a pure\npython implementation will be used (on the basis of <a href=\"https://en.wikipedia.org/wiki/Winding_number\" rel=\"nofollow\">winding\nnumbers</a>). See\n<a href=\"https://www.toptal.com/python/computational-geometry-in-python-from-theory-to-implementation\" rel=\"nofollow\">here</a>,\n<a href=\"http://geomalgorithms.com/a03-_inclusion.html\" rel=\"nofollow\">here</a> and\n<a href=\"http://www.dgp.toronto.edu/~mac/e-stuff/point_in_polygon.py\" rel=\"nofollow\">here</a>\nfor more informations and example implementations. Espacially for larger\nfeatures, the shapely implementation might give performance improvements\n(default shape data and 2.6 GHz Intel Core i7, python3.6.2, cythonized\nversion of\n<a href=\"https://github.com/tammoippen/geohash-hilbert\" rel=\"nofollow\">geohash-hilbert</a>):</p>\n<p><em>Pure</em>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">geopip</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">_geopip</span><span class=\"o\">.</span><span class=\"n\">p_in_polygon</span><span class=\"err\">?</span>\n<span class=\"n\">Signature</span><span class=\"p\">:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">_geopip</span><span class=\"o\">.</span><span class=\"n\">p_in_polygon</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">shp</span><span class=\"p\">)</span>\n<span class=\"n\">Docstring</span><span class=\"p\">:</span>\n<span class=\"n\">Test</span><span class=\"p\">,</span> <span class=\"n\">whether</span> <span class=\"n\">point</span> <span class=\"err\">`</span><span class=\"n\">p</span><span class=\"err\">`</span> <span class=\"ow\">is</span> <span class=\"ow\">in</span> <span class=\"n\">shape</span> <span class=\"err\">`</span><span class=\"n\">shp</span><span class=\"err\">`</span><span class=\"o\">.</span>\n\n<span class=\"n\">Use</span> <span class=\"n\">the</span> <span class=\"n\">pure</span> <span class=\"n\">python</span> <span class=\"n\">implementation</span> <span class=\"k\">for</span> <span class=\"n\">this</span><span class=\"o\">.</span>\n\n<span class=\"n\">Parameters</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>  <span class=\"n\">Point</span> <span class=\"p\">(</span><span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">WGS84</span><span class=\"o\">.</span>\n    <span class=\"n\">shp</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>     <span class=\"n\">Prepared</span> <span class=\"n\">shape</span> <span class=\"n\">dictionary</span> <span class=\"kn\">from</span> <span class=\"err\">`</span><span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">_pure</span><span class=\"o\">.</span><span class=\"n\">prepare</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"o\">.</span>\n\n<span class=\"n\">Returns</span><span class=\"p\">:</span>\n    <span class=\"n\">boolean</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">shp</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"n\">otherwise</span>\n<span class=\"n\">File</span><span class=\"p\">:</span>      <span class=\"o\">~/</span><span class=\"n\">repositories</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"n\">_pure</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Type</span><span class=\"p\">:</span>      <span class=\"n\">function</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"mf\">4.910248</span><span class=\"p\">,</span> <span class=\"mf\">50.850981</span><span class=\"p\">)</span>\n<span class=\"mf\">25.6</span> <span class=\"n\">\u00b5s</span> <span class=\"err\">\u00b1</span> <span class=\"mi\">390</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"err\">\u00b1</span> <span class=\"n\">std</span><span class=\"o\">.</span> <span class=\"n\">dev</span><span class=\"o\">.</span> <span class=\"n\">of</span> <span class=\"mi\">7</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">10000</span> <span class=\"n\">loops</span> <span class=\"n\">each</span><span class=\"p\">)</span>\n</pre>\n<p><em>Shapely</em>:</p>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">geopip</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">geopip_geopip</span><span class=\"o\">.</span><span class=\"n\">p_in_polygon</span><span class=\"err\">?</span>\n<span class=\"n\">Signature</span><span class=\"p\">:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">_geopip</span><span class=\"o\">.</span><span class=\"n\">p_in_polygon</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">shp</span><span class=\"p\">)</span>\n<span class=\"n\">Docstring</span><span class=\"p\">:</span>\n<span class=\"n\">Test</span><span class=\"p\">,</span> <span class=\"n\">whether</span> <span class=\"n\">point</span> <span class=\"err\">`</span><span class=\"n\">p</span><span class=\"err\">`</span> <span class=\"ow\">is</span> <span class=\"ow\">in</span> <span class=\"n\">shape</span> <span class=\"err\">`</span><span class=\"n\">shp</span><span class=\"err\">`</span><span class=\"o\">.</span>\n\n<span class=\"n\">Use</span> <span class=\"n\">the</span> <span class=\"n\">shapely</span> <span class=\"n\">implementation</span> <span class=\"k\">for</span> <span class=\"n\">this</span><span class=\"o\">.</span>\n\n<span class=\"n\">Parameters</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>  <span class=\"n\">Point</span> <span class=\"p\">(</span><span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">WGS84</span><span class=\"o\">.</span>\n    <span class=\"n\">shp</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>     <span class=\"n\">Prepared</span> <span class=\"n\">shape</span> <span class=\"n\">dictionary</span> <span class=\"kn\">from</span> <span class=\"err\">`</span><span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">_shapely</span><span class=\"o\">.</span><span class=\"n\">prepare</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"o\">.</span>\n\n<span class=\"n\">Returns</span><span class=\"p\">:</span>\n    <span class=\"n\">boolean</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">shp</span><span class=\"p\">,</span> <span class=\"kc\">False</span> <span class=\"n\">otherwise</span>\n<span class=\"n\">File</span><span class=\"p\">:</span>      <span class=\"o\">~/</span><span class=\"n\">repositories</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"n\">_shapely</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Type</span><span class=\"p\">:</span>      <span class=\"n\">function</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"o\">%</span><span class=\"n\">timeit</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"mf\">4.910248</span><span class=\"p\">,</span> <span class=\"mf\">50.850981</span><span class=\"p\">)</span>\n<span class=\"mi\">50</span> <span class=\"n\">\u00b5s</span> <span class=\"err\">\u00b1</span> <span class=\"mi\">601</span> <span class=\"n\">ns</span> <span class=\"n\">per</span> <span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"err\">\u00b1</span> <span class=\"n\">std</span><span class=\"o\">.</span> <span class=\"n\">dev</span><span class=\"o\">.</span> <span class=\"n\">of</span> <span class=\"mi\">7</span> <span class=\"n\">runs</span><span class=\"p\">,</span> <span class=\"mi\">10000</span> <span class=\"n\">loops</span> <span class=\"n\">each</span><span class=\"p\">)</span>\n</pre>\n<p>For simple geojsons, the pure python implementation is faster, but on\nmore complex polygons, the shapely implementation will win.</p>\n<div id=\"install\">\n<h3>Install</h3>\n<pre>pip install geopip\n</pre>\n<p>If you require the extra speed, because you have many polygons and / or\nvery detailed polygons, try installing geohash-hilbert with Cython\nextensions and / or have (vectorized) shapely installed.</p>\n<pre><span class=\"c1\"># make sure to have GEOS library installed (including dev extensions)\n</span>pip install numpy <span class=\"s1\">'shapely[vectorized]&gt;=1.6'</span>\n\npip install cython  <span class=\"c1\"># for building geohash-hilbert's cython extension\n</span>pip install --upgrade geohash-hilbert\n</pre>\n</div>\n<div id=\"data\">\n<h3>Data</h3>\n<p>Other interesting shape data can be found at:</p>\n<ul>\n<li><a href=\"http://www.naturalearthdata.com/downloads/\" rel=\"nofollow\">http://www.naturalearthdata.com/downloads/</a> : Different thematic shape\nfiles at 10m, 50m and 110m resolution.</li>\n<li><a href=\"http://www.gadm.org/version2\" rel=\"nofollow\">http://www.gadm.org/version2</a> : Administrative area 0 or 1 contain\ncontries or states, respectively. Attention to the license!</li>\n<li><a href=\"https://www2.census.gov/geo/tiger/\" rel=\"nofollow\">https://www2.census.gov/geo/tiger/</a>: Various shape/gdb files and\ninformation for USA.</li>\n<li><a href=\"http://guides.library.upenn.edu/c.php?g=475518&amp;p=3254770\" rel=\"nofollow\">http://guides.library.upenn.edu/c.php?g=475518&amp;p=3254770</a>: Links to\nvarious geoinformation data.</li>\n<li><a href=\"http://thematicmapping.org/downloads/world_borders.php\" rel=\"nofollow\">http://thematicmapping.org/downloads/world_borders.php</a>: Country\nborders and some interesting information. The default file is from\nhere. There is also a higher resolution version.</li>\n<li><a href=\"https://github.com/evansiroky/timezone-boundary-builder\" rel=\"nofollow\">https://github.com/evansiroky/timezone-boundary-builder</a>: Time zone\nboundaries. See releases for downloads.</li>\n<li><a href=\"https://www.suche-postleitzahl.org/plz-karte-erstellen\" rel=\"nofollow\">https://www.suche-postleitzahl.org/plz-karte-erstellen</a>: DE\npostalcodes + size + population (Census / OSM).</li>\n<li><a href=\"https://www2.census.gov/geo/tiger/TIGER2010DP1/ZCTA_2010Census_DP1.zip\" rel=\"nofollow\">https://www2.census.gov/geo/tiger/TIGER2010DP1/ZCTA_2010Census_DP1.zip</a>:\nUS postalcodes + size + population (Census; field definition see\n<tt>DP_TableDescriptions.xls</tt> in the zip).</li>\n</ul>\n<p><strong>NOTE</strong>: shapefiles / gdb databases have to be transformed into\ngeojson. One way is to use\n<a href=\"https://github.com/Toblerity/Fiona\" rel=\"nofollow\">fiona</a>. Assuming the gdb files\nare in the directory <tt>/data/gdb</tt>:</p>\n<pre><span class=\"n\">fio</span> <span class=\"n\">insp</span> <span class=\"o\">/</span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">gdb</span>\n<span class=\"c1\"># a python shell opens</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">features</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">feat</span> <span class=\"ow\">in</span> <span class=\"n\">src</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">features</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"n\">feat</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/data/gdb.geo.json'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'FeatureCollection'</span><span class=\"p\">,</span> <span class=\"n\">features</span><span class=\"o\">=</span><span class=\"n\">features</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Then the <tt>gdb</tt> will be transformed into a geojson file\n<tt>gdb.geo.json</tt>.</p>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>(<em>TODO</em> more) Basically, there are the two functions <tt>geopip.search</tt>\nand <tt>geopip.search_all</tt> that perform the search in the provided\n<tt>FeatureCollection</tt>. Then there is the class <tt>geopip.GeoPIP</tt> that\naccepts a <tt>FeatureCollection</tt> either as a file or a dictionary and\nprovides the same search functionality:</p>\n<div id=\"search\">\n<h3><tt>search</tt></h3>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">geopip</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"err\">?</span>\n<span class=\"n\">Signature</span><span class=\"p\">:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">)</span>\n<span class=\"n\">Docstring</span><span class=\"p\">:</span>\n<span class=\"n\">Reverse</span> <span class=\"n\">geocode</span> <span class=\"n\">lng</span><span class=\"o\">/</span><span class=\"n\">lat</span> <span class=\"n\">coordinate</span> <span class=\"n\">within</span> <span class=\"n\">the</span> <span class=\"n\">features</span> <span class=\"kn\">from</span> <span class=\"err\">`</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"err\">`</span><span class=\"o\">.</span>\n\n<span class=\"n\">Look</span> <span class=\"n\">within</span> <span class=\"n\">the</span> <span class=\"n\">features</span> <span class=\"kn\">from</span> <span class=\"nn\">the</span> <span class=\"err\">`</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"err\">`</span> <span class=\"n\">function</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"n\">polygon</span> <span class=\"n\">that</span>\n<span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">point</span> <span class=\"p\">(</span><span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"n\">From</span> <span class=\"n\">the</span> <span class=\"n\">first</span> <span class=\"n\">found</span> <span class=\"n\">feature</span> <span class=\"n\">the</span> <span class=\"err\">`</span><span class=\"n\">porperties</span><span class=\"err\">`</span>\n<span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">returned</span><span class=\"o\">.</span> <span class=\"err\">`</span><span class=\"kc\">None</span><span class=\"err\">`</span><span class=\"p\">,</span> <span class=\"k\">if</span> <span class=\"n\">no</span> <span class=\"n\">feature</span> <span class=\"n\">containes</span> <span class=\"n\">the</span> <span class=\"n\">point</span><span class=\"o\">.</span>\n\n<span class=\"n\">Parameters</span><span class=\"p\">:</span>\n    <span class=\"n\">lng</span><span class=\"p\">:</span> <span class=\"nb\">float</span>  <span class=\"n\">Longitude</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">)</span> <span class=\"n\">of</span> <span class=\"n\">point</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">WGS84</span><span class=\"p\">)</span>\n    <span class=\"n\">lat</span><span class=\"p\">:</span> <span class=\"nb\">float</span>  <span class=\"n\">Latitude</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)</span> <span class=\"n\">of</span> <span class=\"n\">point</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">WGS84</span><span class=\"p\">)</span>\n\n<span class=\"n\">Returns</span><span class=\"p\">:</span>\n    <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>  <span class=\"err\">`</span><span class=\"n\">Properties</span><span class=\"err\">`</span> <span class=\"n\">of</span> <span class=\"n\">found</span> <span class=\"n\">feature</span><span class=\"o\">.</span> <span class=\"err\">`</span><span class=\"kc\">None</span><span class=\"err\">`</span> <span class=\"k\">if</span> <span class=\"n\">nothing</span> <span class=\"ow\">is</span> <span class=\"n\">found</span><span class=\"o\">.</span>\n<span class=\"n\">File</span><span class=\"p\">:</span>      <span class=\"o\">~/</span><span class=\"n\">repositories</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Type</span><span class=\"p\">:</span>      <span class=\"n\">function</span>\n</pre>\n</div>\n<div id=\"search-all\">\n<h3><tt>search_all</tt></h3>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">geopip</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">search_all</span><span class=\"err\">?</span>\n<span class=\"n\">Signature</span><span class=\"p\">:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">search_all</span><span class=\"p\">(</span><span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">)</span>\n<span class=\"n\">Docstring</span><span class=\"p\">:</span>\n<span class=\"n\">Reverse</span> <span class=\"n\">geocode</span> <span class=\"n\">lng</span><span class=\"o\">/</span><span class=\"n\">lat</span> <span class=\"n\">coordinate</span> <span class=\"n\">within</span> <span class=\"n\">the</span> <span class=\"n\">features</span> <span class=\"kn\">from</span> <span class=\"err\">`</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"err\">`</span><span class=\"o\">.</span>\n\n<span class=\"n\">Look</span> <span class=\"n\">within</span> <span class=\"n\">the</span> <span class=\"n\">features</span> <span class=\"kn\">from</span> <span class=\"nn\">the</span> <span class=\"err\">`</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shapes</span><span class=\"err\">`</span> <span class=\"n\">function</span> <span class=\"k\">for</span> <span class=\"nb\">all</span> <span class=\"n\">polygon</span> <span class=\"n\">that</span>\n<span class=\"n\">contains</span> <span class=\"n\">the</span> <span class=\"n\">point</span> <span class=\"p\">(</span><span class=\"n\">lng</span><span class=\"p\">,</span> <span class=\"n\">lat</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"n\">From</span> <span class=\"nb\">all</span> <span class=\"n\">found</span> <span class=\"n\">feature</span> <span class=\"n\">the</span> <span class=\"err\">`</span><span class=\"n\">porperties</span><span class=\"err\">`</span>\n<span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">returned</span> <span class=\"p\">(</span><span class=\"n\">more</span> <span class=\"ow\">or</span> <span class=\"n\">less</span> <span class=\"nb\">sorted</span> <span class=\"kn\">from</span> <span class=\"nn\">smallest</span> <span class=\"n\">to</span> <span class=\"n\">largest</span> <span class=\"n\">feature</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"err\">`</span><span class=\"kc\">None</span><span class=\"err\">`</span><span class=\"p\">,</span> <span class=\"k\">if</span> <span class=\"n\">no</span> <span class=\"n\">feature</span> <span class=\"n\">containes</span> <span class=\"n\">the</span> <span class=\"n\">point</span><span class=\"o\">.</span>\n\n<span class=\"n\">Parameters</span><span class=\"p\">:</span>\n    <span class=\"n\">lng</span><span class=\"p\">:</span> <span class=\"nb\">float</span>  <span class=\"n\">Longitude</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">)</span> <span class=\"n\">of</span> <span class=\"n\">point</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">WGS84</span><span class=\"p\">)</span>\n    <span class=\"n\">lat</span><span class=\"p\">:</span> <span class=\"nb\">float</span>  <span class=\"n\">Latitude</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)</span> <span class=\"n\">of</span> <span class=\"n\">point</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"n\">WGS84</span><span class=\"p\">)</span>\n\n<span class=\"n\">Returns</span><span class=\"p\">:</span>\n    <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>  <span class=\"n\">Iterator</span> <span class=\"k\">for</span> <span class=\"err\">`</span><span class=\"n\">properties</span><span class=\"err\">`</span> <span class=\"n\">of</span> <span class=\"n\">found</span> <span class=\"n\">features</span><span class=\"o\">.</span>\n<span class=\"n\">File</span><span class=\"p\">:</span>      <span class=\"o\">~/</span><span class=\"n\">repositories</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"fm\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Type</span><span class=\"p\">:</span>      <span class=\"n\">function</span>\n</pre>\n</div>\n<div id=\"geopip\">\n<h3><tt>GeoPIP</tt></h3>\n<pre><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">geopip</span>\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">GeoPIP</span><span class=\"err\">?</span>\n<span class=\"n\">Init</span> <span class=\"n\">signature</span><span class=\"p\">:</span> <span class=\"n\">geopip</span><span class=\"o\">.</span><span class=\"n\">GeoPIP</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"n\">Docstring</span><span class=\"p\">:</span>\n<span class=\"n\">GeoPIP</span><span class=\"p\">:</span> <span class=\"n\">Geojson</span> <span class=\"n\">Point</span> <span class=\"ow\">in</span> <span class=\"n\">Polygon</span> <span class=\"p\">(</span><span class=\"n\">PIP</span><span class=\"p\">)</span>\n\n<span class=\"n\">Reverse</span> <span class=\"n\">geocode</span> <span class=\"n\">a</span> <span class=\"n\">lng</span><span class=\"o\">/</span><span class=\"n\">lat</span> <span class=\"n\">coordinate</span> <span class=\"n\">within</span> <span class=\"n\">a</span> <span class=\"n\">geojson</span> <span class=\"err\">`</span><span class=\"n\">FeatureCollection</span><span class=\"err\">`</span> <span class=\"ow\">and</span>\n<span class=\"k\">return</span> <span class=\"n\">information</span> <span class=\"n\">about</span> <span class=\"n\">the</span> <span class=\"n\">containing</span> <span class=\"n\">polygon</span><span class=\"o\">.</span>\n<span class=\"n\">Init</span> <span class=\"n\">docstring</span><span class=\"p\">:</span>\n<span class=\"n\">Provide</span> <span class=\"n\">the</span> <span class=\"n\">geojson</span> <span class=\"n\">either</span> <span class=\"k\">as</span> <span class=\"n\">a</span> <span class=\"n\">file</span> <span class=\"p\">(</span><span class=\"err\">`</span><span class=\"n\">filename</span><span class=\"err\">`</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"k\">as</span> <span class=\"n\">a</span> <span class=\"n\">geojson</span>\n<span class=\"nb\">dict</span> <span class=\"p\">(</span><span class=\"err\">`</span><span class=\"n\">geojson_dict</span><span class=\"err\">`</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"n\">If</span> <span class=\"n\">none</span> <span class=\"n\">of</span> <span class=\"n\">both</span> <span class=\"ow\">is</span> <span class=\"n\">given</span><span class=\"p\">,</span> <span class=\"n\">it</span> <span class=\"n\">tries</span> <span class=\"n\">to</span> <span class=\"n\">load</span> <span class=\"n\">the</span>\n<span class=\"n\">file</span> <span class=\"n\">pointed</span> <span class=\"n\">to</span> <span class=\"ow\">in</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">variable</span> <span class=\"err\">`</span><span class=\"n\">REVERSE_GEOCODE_DATA</span><span class=\"err\">`</span><span class=\"o\">.</span> <span class=\"n\">If</span> <span class=\"n\">the</span>\n<span class=\"n\">variable</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"n\">default</span> <span class=\"n\">geojson</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">loaded</span> <span class=\"p\">(</span><span class=\"n\">packaged</span><span class=\"p\">):</span>\n    <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">thematicmapping</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">downloads</span><span class=\"o\">/</span><span class=\"n\">world_borders</span><span class=\"o\">.</span><span class=\"n\">php</span>\n\n<span class=\"n\">During</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"n\">the</span> <span class=\"n\">geojson</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">prepared</span> <span class=\"p\">(</span><span class=\"n\">see</span> <span class=\"n\">pure</span> <span class=\"o\">/</span> <span class=\"n\">shapely</span> <span class=\"n\">implementation</span><span class=\"p\">)</span>\n<span class=\"ow\">and</span> <span class=\"n\">indexed</span> <span class=\"k\">with</span> <span class=\"n\">geohashes</span><span class=\"o\">.</span>\n\n<span class=\"n\">Provide</span> <span class=\"n\">the</span> <span class=\"n\">parameters</span> <span class=\"k\">as</span> <span class=\"n\">kwargs</span><span class=\"err\">!</span>\n\n<span class=\"n\">Allowed</span> <span class=\"n\">parameters</span><span class=\"p\">:</span>\n    <span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>                 <span class=\"n\">Path</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">geojson</span> <span class=\"n\">file</span><span class=\"o\">.</span>\n    <span class=\"n\">geojson_dict</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>  <span class=\"n\">Geojson</span> <span class=\"n\">dictionary</span><span class=\"o\">.</span> <span class=\"err\">`</span><span class=\"n\">FeatureCollection</span><span class=\"err\">`</span> <span class=\"n\">required</span><span class=\"err\">!</span>\n<span class=\"n\">File</span><span class=\"p\">:</span>           <span class=\"o\">~/</span><span class=\"n\">repositories</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"n\">geopip</span><span class=\"o\">/</span><span class=\"n\">_geopip</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Type</span><span class=\"p\">:</span>           <span class=\"nb\">type</span>\n</pre>\n<p>A <tt>GeoPIP</tt> object provides the same <tt>search</tt> and <tt>search_all</tt>\nfunctions.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3320496, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "661286aa5f16d3374ec046d21c42cfd4", "sha256": "128209729ccb3ce894aed0f6e6c5497bb7c2dec7b7176160d5c34f4de8d096eb"}, "downloads": -1, "filename": "geopip-0.1.tar.gz", "has_sig": false, "md5_digest": "661286aa5f16d3374ec046d21c42cfd4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 344618, "upload_time": "2017-08-24T11:27:18", "upload_time_iso_8601": "2017-08-24T11:27:18.936713Z", "url": "https://files.pythonhosted.org/packages/96/c8/e8520c02017066c15aa254fa7d4b885928d87ca5120fe04c73618f559185/geopip-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4e4acf917640c53b7af0bc2dc3a26d7a", "sha256": "e3a455a09e199da22a12bbf50d2c0180b4a7e91fb3ecb7298eb3b61956aa35b4"}, "downloads": -1, "filename": "geopip-0.2.tar.gz", "has_sig": false, "md5_digest": "4e4acf917640c53b7af0bc2dc3a26d7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 345453, "upload_time": "2017-08-24T14:22:40", "upload_time_iso_8601": "2017-08-24T14:22:40.974305Z", "url": "https://files.pythonhosted.org/packages/97/7a/342927ed9c604b5361bbb7ff1f0451f5dafe97018e98167541e58be21880/geopip-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "176c03b7bfe91859279597523e680b7b", "sha256": "bd5570b89696ebfa59d83dfa2676a8bf8f352221a0e1260707bb8a6fb04e51cb"}, "downloads": -1, "filename": "geopip-0.3.tar.gz", "has_sig": false, "md5_digest": "176c03b7bfe91859279597523e680b7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 345450, "upload_time": "2017-08-24T14:50:18", "upload_time_iso_8601": "2017-08-24T14:50:18.517677Z", "url": "https://files.pythonhosted.org/packages/35/c5/21016d265922b9d9fba0ef011b13062d4460b14c7eaf4c7214545ba20360/geopip-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "e044eff5a46be408de131deed7007460", "sha256": "2b4d4cfd6dec096af252a4f57069886401742add3f2f6205d078eb1596bb28f0"}, "downloads": -1, "filename": "geopip-0.4.tar.gz", "has_sig": false, "md5_digest": "e044eff5a46be408de131deed7007460", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 347332, "upload_time": "2017-09-08T13:52:34", "upload_time_iso_8601": "2017-09-08T13:52:34.570046Z", "url": "https://files.pythonhosted.org/packages/29/40/6d107d479a3b52495c20cae45dc2575c6a87bc68e1c5db4f3c93d2ce9f72/geopip-0.4.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "9365d97c37254662ae8e21c88a2f97d7", "sha256": "6a73b62e79a2a94cc4bd3b32409a816686e885f7ffc1cb3938ce85036e707f27"}, "downloads": -1, "filename": "geopip-1.0.tar.gz", "has_sig": false, "md5_digest": "9365d97c37254662ae8e21c88a2f97d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 357940, "upload_time": "2017-09-21T11:59:44", "upload_time_iso_8601": "2017-09-21T11:59:44.052902Z", "url": "https://files.pythonhosted.org/packages/41/cb/255344e2986cda95b69bd9d0798ad3f6948979b5a5e6e6aba8809eff6979/geopip-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "0d96e4ba070be2b858d894fcaad7d942", "sha256": "db76cdf77089b51bea6e5c62bb7509c8bff0901ed712d12124154f953f6f6aef"}, "downloads": -1, "filename": "geopip-1.1.tar.gz", "has_sig": false, "md5_digest": "0d96e4ba070be2b858d894fcaad7d942", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 359991, "upload_time": "2017-11-09T19:43:30", "upload_time_iso_8601": "2017-11-09T19:43:30.930281Z", "url": "https://files.pythonhosted.org/packages/f8/68/6915c368d8ca24f1b8e91b3184241fc9a6379ff0fd39f9b949ed5a835037/geopip-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0d96e4ba070be2b858d894fcaad7d942", "sha256": "db76cdf77089b51bea6e5c62bb7509c8bff0901ed712d12124154f953f6f6aef"}, "downloads": -1, "filename": "geopip-1.1.tar.gz", "has_sig": false, "md5_digest": "0d96e4ba070be2b858d894fcaad7d942", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 359991, "upload_time": "2017-11-09T19:43:30", "upload_time_iso_8601": "2017-11-09T19:43:30.930281Z", "url": "https://files.pythonhosted.org/packages/f8/68/6915c368d8ca24f1b8e91b3184241fc9a6379ff0fd39f9b949ed5a835037/geopip-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:58 2020"}