{"info": {"author": "Chris Hutchings", "author_email": "hutchris@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# prtg\nPython module to manage PRTG servers\n\nPrerequisites:\n- bs4 (BeautifulSoup)\n- requests\n- lxml\n\nTested only on Python 3.5.2 so far. Does work with python 2.7 but not extensively tested. \n\nThis is a Python module to facilitate in managing PRTG servers from CLI or for automating changes. It is really useful for scripting changes to prtg objects.\n\nThe prtg_api no longer uses a config file. Instead you need to enter your PRTG parameters when initiating the prtg_api class. This change was to allow this to be used in a more flexible way, or to manage multiple PRTG instances, you can still set up a local config file for your parameters if you wish. The parameters for initiating the prtg_api class are:\n\n```\nprtg_api(host,user,passhash,protocol='https',port='443',rootid=0)\n```\n\nUpon initialisation the entire device tree is downloaded and each probe, group, device, sensor and channel is provided as a modifiable object. From the main object (called prtg in example) you can access all objects in the tree using the prtg.allprobes, prtg.allgroups, prtg.alldevices and prtg.allsensors attributes. The channels are not available by default, you must run sensor.get_channels() to the get the child channels of that sensor.\n\nYou can also set the root of your sensor tree as a group that is not the root of PRTG. This was added to allow a partial sensortree to be downloaded where your PRTG server may have many objects or to provide access to a user with restricted permissions.\n\nWhen you are accessing an object further down the tree you only have access to the direct children of that object. This for example will show the devices that are in the 4th group of the allgroups array:\n\n```\nfrom prtg import prtg_api\n\nprtg = prtg_api('192.168.1.1','prtgadmin','0000000000')\n\nprtg.allgroups[3].devices\n```\n\nProbe and group objects can have groups and devices as children, device objects have sensors as children and sensors can have channels as children. \n\n```\nfrom prtg import prtg_api\n\nprtg = prtg_api('192.168.1.1','prtgadmin','0000000000')\n\nprobeobject = prtg.allprobes[0]\ngroups = probeobject.groups\ndevices = probeobject.devices\n\ndeviceobject = devices[0]\nsensors = deviceobject.sensors\n\nsensorobject = sensors[0]\nsensorobject.get_channels()\n\nchannel = sensorobject.channels[0]\n```\n\n\nCurrent methods and parameters (* = required) on all objects include:\n- rename()\n- pause(duration=0,message='') (pause and resume on a channel will change the parent sensor)  \n- resume()\n- clone(newname=''*,newplaceid=''*)\n- delete(confirm=True) (you can't delete the root object or channels)\n- refresh()\n- set_property(name*,value*)\n- get_property(name*)\n- set_additional_param(param*) (for custom script sensors)\n- set_interval(interval*)\n- set_host(host*) (ip address or hostname)\n- search_byid(id)\n- add_tags(['tag1','tag2']*,clear_old=False)\n\nTo come:\n- move\n\nIf you are making small changes such as pause, resume, rename; the local data will update as you go. If you are doing larger changes you should refresh the data after each change. If you refresh the main prtg object it will refresh everything otherwise you can just refresh an object further down the tree to only refresh part of the local data. To refresh an object call the .refresh() method.\n\nThe set_property method is very powerful and flexible. You can change anything for an object that you can change in the objects settings tab in the web ui. I will add the more commonly used settings as seperate methods. You can use the get_property method to test the name of the property:\n\n```\nfrom prtg import prtg_api\n\nprtg = prtg_api('192.168.1.1','prtgadmin','0000000000')\nprtg.get_property(name='location')\n#returns the location and sets prtg.location to the result.\n\nprtg.set_property(name='location',value='Canada')\n```\n\nThere are delays with some actions such as resuming so you should add time delays where appropriate.\n\nexample usage:\n\n```\nimport time\nfrom prtg import prtg_api\n\nprtg = prtg_api('192.168.1.1','prtgadmin','0000000000')\n\nfor device in prtg.alldevices:\n  if device.id == \"1234\":\n    deviceobj = device\n\ndeviceobj.pause()\ndeviceobj.clone(newname=\"cloned device\",newplaceid=\"2468\")\n\ntime.sleep(10)\n\nprtg.refresh()\n\nfor device in prtg.alldevices:\n  if device.name = \"cloned device\":\n    device.resume()\n\n```\n\nThe prtg_api class can be used with the root id set as the root group, a probe, or a group. If you wanted to manage a device or sensor and don't want to download the entire sensortree to loop through the results; you can use the prtg_device and prtg_sensor classes. For example:\n\n```\nhost = '192.168.1.1'\nport = '80'\nuser = 'prtgadmin'\npasshash = '0000000'\nprotocol = 'http'\ndeviceid = '2025'\n\ndevice = prtg_device(host,port,user,passhash,protocol,deviceid)\n\nsensorid = '2123'\n\nsensor = prtg_sensor(host,port,user,passhash,protocol,sensorid)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/timgates42/prtg", "keywords": "", "license": "MIT", "maintainer": "Tim Gates", "maintainer_email": "tim.gates@iress.com", "name": "prtg", "package_url": "https://pypi.org/project/prtg/", "platform": "", "project_url": "https://pypi.org/project/prtg/", "project_urls": {"Homepage": "https://github.com/timgates42/prtg"}, "release_url": "https://pypi.org/project/prtg/0.1.0.dev0/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Python module to manage PRTG servers", "version": "0.1.0.dev0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>prtg</h1>\n<p>Python module to manage PRTG servers</p>\n<p>Prerequisites:</p>\n<ul>\n<li>bs4 (BeautifulSoup)</li>\n<li>requests</li>\n<li>lxml</li>\n</ul>\n<p>Tested only on Python 3.5.2 so far. Does work with python 2.7 but not extensively tested.</p>\n<p>This is a Python module to facilitate in managing PRTG servers from CLI or for automating changes. It is really useful for scripting changes to prtg objects.</p>\n<p>The prtg_api no longer uses a config file. Instead you need to enter your PRTG parameters when initiating the prtg_api class. This change was to allow this to be used in a more flexible way, or to manage multiple PRTG instances, you can still set up a local config file for your parameters if you wish. The parameters for initiating the prtg_api class are:</p>\n<pre><code>prtg_api(host,user,passhash,protocol='https',port='443',rootid=0)\n</code></pre>\n<p>Upon initialisation the entire device tree is downloaded and each probe, group, device, sensor and channel is provided as a modifiable object. From the main object (called prtg in example) you can access all objects in the tree using the prtg.allprobes, prtg.allgroups, prtg.alldevices and prtg.allsensors attributes. The channels are not available by default, you must run sensor.get_channels() to the get the child channels of that sensor.</p>\n<p>You can also set the root of your sensor tree as a group that is not the root of PRTG. This was added to allow a partial sensortree to be downloaded where your PRTG server may have many objects or to provide access to a user with restricted permissions.</p>\n<p>When you are accessing an object further down the tree you only have access to the direct children of that object. This for example will show the devices that are in the 4th group of the allgroups array:</p>\n<pre><code>from prtg import prtg_api\n\nprtg = prtg_api('192.168.1.1','prtgadmin','0000000000')\n\nprtg.allgroups[3].devices\n</code></pre>\n<p>Probe and group objects can have groups and devices as children, device objects have sensors as children and sensors can have channels as children.</p>\n<pre><code>from prtg import prtg_api\n\nprtg = prtg_api('192.168.1.1','prtgadmin','0000000000')\n\nprobeobject = prtg.allprobes[0]\ngroups = probeobject.groups\ndevices = probeobject.devices\n\ndeviceobject = devices[0]\nsensors = deviceobject.sensors\n\nsensorobject = sensors[0]\nsensorobject.get_channels()\n\nchannel = sensorobject.channels[0]\n</code></pre>\n<p>Current methods and parameters (* = required) on all objects include:</p>\n<ul>\n<li>rename()</li>\n<li>pause(duration=0,message='') (pause and resume on a channel will change the parent sensor)</li>\n<li>resume()</li>\n<li>clone(newname=''<em>,newplaceid=''</em>)</li>\n<li>delete(confirm=True) (you can't delete the root object or channels)</li>\n<li>refresh()</li>\n<li>set_property(name*,value*)</li>\n<li>get_property(name*)</li>\n<li>set_additional_param(param*) (for custom script sensors)</li>\n<li>set_interval(interval*)</li>\n<li>set_host(host*) (ip address or hostname)</li>\n<li>search_byid(id)</li>\n<li>add_tags(['tag1','tag2']*,clear_old=False)</li>\n</ul>\n<p>To come:</p>\n<ul>\n<li>move</li>\n</ul>\n<p>If you are making small changes such as pause, resume, rename; the local data will update as you go. If you are doing larger changes you should refresh the data after each change. If you refresh the main prtg object it will refresh everything otherwise you can just refresh an object further down the tree to only refresh part of the local data. To refresh an object call the .refresh() method.</p>\n<p>The set_property method is very powerful and flexible. You can change anything for an object that you can change in the objects settings tab in the web ui. I will add the more commonly used settings as seperate methods. You can use the get_property method to test the name of the property:</p>\n<pre><code>from prtg import prtg_api\n\nprtg = prtg_api('192.168.1.1','prtgadmin','0000000000')\nprtg.get_property(name='location')\n#returns the location and sets prtg.location to the result.\n\nprtg.set_property(name='location',value='Canada')\n</code></pre>\n<p>There are delays with some actions such as resuming so you should add time delays where appropriate.</p>\n<p>example usage:</p>\n<pre><code>import time\nfrom prtg import prtg_api\n\nprtg = prtg_api('192.168.1.1','prtgadmin','0000000000')\n\nfor device in prtg.alldevices:\n  if device.id == \"1234\":\n    deviceobj = device\n\ndeviceobj.pause()\ndeviceobj.clone(newname=\"cloned device\",newplaceid=\"2468\")\n\ntime.sleep(10)\n\nprtg.refresh()\n\nfor device in prtg.alldevices:\n  if device.name = \"cloned device\":\n    device.resume()\n\n</code></pre>\n<p>The prtg_api class can be used with the root id set as the root group, a probe, or a group. If you wanted to manage a device or sensor and don't want to download the entire sensortree to loop through the results; you can use the prtg_device and prtg_sensor classes. For example:</p>\n<pre><code>host = '192.168.1.1'\nport = '80'\nuser = 'prtgadmin'\npasshash = '0000000'\nprotocol = 'http'\ndeviceid = '2025'\n\ndevice = prtg_device(host,port,user,passhash,protocol,deviceid)\n\nsensorid = '2123'\n\nsensor = prtg_sensor(host,port,user,passhash,protocol,sensorid)\n</code></pre>\n\n          </div>"}, "last_serial": 5543469, "releases": {"0.1.0.dev0": [{"comment_text": "", "digests": {"md5": "486e2cd7e550e3feb77a7e0c5e269ec3", "sha256": "ce91d8575f85db83b522ff0edd6f9bb59327f3e80d352bb3a3ba6e904002b60f"}, "downloads": -1, "filename": "prtg-0.1.0.dev0-py2-none-any.whl", "has_sig": false, "md5_digest": "486e2cd7e550e3feb77a7e0c5e269ec3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4763, "upload_time": "2019-07-17T01:11:02", "upload_time_iso_8601": "2019-07-17T01:11:02.939403Z", "url": "https://files.pythonhosted.org/packages/3c/0b/1643a1d0eb09e7444063cd7c1b45bd7256dd9873794cafc1eb7434b08b48/prtg-0.1.0.dev0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "271c9ab90b30e211162e82c71f4a7f35", "sha256": "41c76b7a7e80b96b3c9db6588576f027b8dbac095ebd74f84d753d141e3fee33"}, "downloads": -1, "filename": "prtg-0.1.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "271c9ab90b30e211162e82c71f4a7f35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4764, "upload_time": "2019-07-17T01:11:05", "upload_time_iso_8601": "2019-07-17T01:11:05.448751Z", "url": "https://files.pythonhosted.org/packages/5a/77/c9ed54bc19ff8413aa536add5d1031b0c6465348934f17dc9aa6a83c040f/prtg-0.1.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a44c497b78022d6eb3f7201ef2cd066", "sha256": "7b8ef8698e04037cc3ad422d02d91f64e6fe82274799d3b95b005405a24fa4e1"}, "downloads": -1, "filename": "prtg-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "3a44c497b78022d6eb3f7201ef2cd066", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4965, "upload_time": "2019-07-17T01:11:06", "upload_time_iso_8601": "2019-07-17T01:11:06.949438Z", "url": "https://files.pythonhosted.org/packages/60/1a/52158834f1f82cbef9e1b372bb16e9b9df78342f27e2ecf8c9103decd350/prtg-0.1.0.dev0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "486e2cd7e550e3feb77a7e0c5e269ec3", "sha256": "ce91d8575f85db83b522ff0edd6f9bb59327f3e80d352bb3a3ba6e904002b60f"}, "downloads": -1, "filename": "prtg-0.1.0.dev0-py2-none-any.whl", "has_sig": false, "md5_digest": "486e2cd7e550e3feb77a7e0c5e269ec3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4763, "upload_time": "2019-07-17T01:11:02", "upload_time_iso_8601": "2019-07-17T01:11:02.939403Z", "url": "https://files.pythonhosted.org/packages/3c/0b/1643a1d0eb09e7444063cd7c1b45bd7256dd9873794cafc1eb7434b08b48/prtg-0.1.0.dev0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "271c9ab90b30e211162e82c71f4a7f35", "sha256": "41c76b7a7e80b96b3c9db6588576f027b8dbac095ebd74f84d753d141e3fee33"}, "downloads": -1, "filename": "prtg-0.1.0.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "271c9ab90b30e211162e82c71f4a7f35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4764, "upload_time": "2019-07-17T01:11:05", "upload_time_iso_8601": "2019-07-17T01:11:05.448751Z", "url": "https://files.pythonhosted.org/packages/5a/77/c9ed54bc19ff8413aa536add5d1031b0c6465348934f17dc9aa6a83c040f/prtg-0.1.0.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a44c497b78022d6eb3f7201ef2cd066", "sha256": "7b8ef8698e04037cc3ad422d02d91f64e6fe82274799d3b95b005405a24fa4e1"}, "downloads": -1, "filename": "prtg-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "3a44c497b78022d6eb3f7201ef2cd066", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 4965, "upload_time": "2019-07-17T01:11:06", "upload_time_iso_8601": "2019-07-17T01:11:06.949438Z", "url": "https://files.pythonhosted.org/packages/60/1a/52158834f1f82cbef9e1b372bb16e9b9df78342f27e2ecf8c9103decd350/prtg-0.1.0.dev0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:13 2020"}