{"info": {"author": "Kevin Le", "author_email": "kevin.kent.le@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "==========\nprairiedog\n==========\n\n.. image:: .daisy.png\n\n.. image:: https://circleci.com/gh/superphy/prairiedog.svg?style=svg\n    :target: https://circleci.com/gh/superphy/prairiedog\n\n.. image:: https://codecov.io/gh/superphy/prairiedog/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/superphy/prairiedog\n\nSupports Python 3.6, Python 3.7, PyPy 3.6 on Linux\n\n============\nInstallation\n============\n\nWe recommend you follow both the installation step for graph creation\nand for querying the graph, unless you are computing the graph in one\nplace, and querying it in another.\n\nBoth steps require you to first install lemongraph.\n\nClone prairiedog and install lemongraph\n---------------------------------------\n\n::\n\n    git clone --recursive https://github.com/superphy/prairiedog.git\n    cd prairiedog/\n    python3 -m venv venv\n    . venv/bin/activate\n    cd lemongraph/\n    apt-get install libffi-dev zlib1g-dev python-dev python-cffi\n    python setup.py install\n\nFor creating a graph\n--------------------\n\n::\n\n    . venv/bin/activate\n    pip install -r requirements.txt\n    pip install snakemake\n\nFor querying an existing graph\n------------------------------\n\n::\n\n    . venv/bin/activate\n    python setup.py install\n\n=====\nUsage\n=====\n\nDocker\n------\n\n::\n\n    docker run -v /abs-path-to/outputs/:/p/outputs/ -v /abs-path-to/samples/:/p/samples/ superphy/prairiedog dgraph\n\nFor creating a graph\n---------------------\n\n::\n\n    . venv/bin/activate\n    snakemake -j 24 --config samples=samples/\n\nFor querying an existing graph\n-------------------------------\n\nVia docker\n\n::\n\n    # Without debug\n    docker run -v /home/kevin/pdg-test/outputs:/p/outputs/ -v /home/kevin/pdg-test/samples:/p/samples/ superphy/prairiedog:c6ff5c63779a73de02c9b3de0f4225b29564f285 query TCGAGCATTAT GCATAGGCAAC\n    # With debug\n    docker run -v /home/kevin/pdg-test/outputs:/p/outputs/ -v /home/kevin/pdg-test/samples:/p/samples/ superphy/prairiedog:c6ff5c63779a73de02c9b3de0f4225b29564f285 --debug query TCGAGCATTAT GCATAGGCAAC\n\nor virtualenv\n\n::\n\n    . venv/bin/activate\n    prairiedog ATACGACGCCA CGTCCGGACGT\n\nYou should get something like:\n\n::\n\n    prairiedog GGGCGTTAAGT GGCAGGTTGAA\n    prairiedog[21238] INFO Looking for all strings between GGGCGTTAAGT and GGCAGGTTGAA ...\n    prairiedog[21238] INFO Found {'string': 'GGGCGTTAAGTTGCAGGGTATAGACCCGAAACCCGGTGATCTAGCCATGGGCAGGTTGAA', 'edge_type': 'SRR3295769.fasta', 'edge_value': '>SRR3295769.fasta|NODE_75_length_556_cov_349.837_ID_5290_pilon'}\n    prairiedog[21238] INFO Found {'string': 'GGGCGTTAAGTTGCAGGGTATAGACCCGAAACCCGGTGATCTAGCCATGGGCAGGTTGAA', 'edge_type': 'SRR3665189.fasta', 'edge_value': '>SRR3665189.fasta|NODE_60_length_523_cov_287.621_ID_4672'}\n\n==================\nTests & Benchmarks\n==================\n\nTest genomes are included in the *tests/* folders, while genomes for\nbenchmarking should be included in the *samples/* folder. To run tests and\nbenchmarks:\n\n::\n\n    python3 -m venv venv\n    . venv/bin/activate\n    pip install tox\n    tox -v\n\n\n=======\nHistory\n=======\n\n0.2.0 (2019-07-28)\n------------------\n\n* Pangenome graph creation via Dgraph\n* Queries between kmers via Dgraph\n\n0.1.2 (2019-06-21)\n------------------\n\n* Supports Pangenome graph creation\n* Uses LemonGraph as backend\n* Supports queries between any two kmers\n\n0.1.1 (2019-05-25)\n------------------\n\n* Initial Snakefile for creating graphs\n* Still need to add node_labels\n\n0.1.0 (2019-05-08)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kevinkle/prairiedog", "keywords": "prairiedog", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "prairiedog", "package_url": "https://pypi.org/project/prairiedog/", "platform": "", "project_url": "https://pypi.org/project/prairiedog/", "project_urls": {"Homepage": "https://github.com/kevinkle/prairiedog"}, "release_url": "https://pypi.org/project/prairiedog/0.2.0/", "requires_dist": ["coloredlogs (==10.0)", "decorator (==4.4.0)", "humanfriendly (==4.18)", "networkx (==2.3)", "cython", "dateutils", "numpy", "pandas (<=0.24.2)", "click (>=6.0)", "dill", "psutil", "pyinstrument", "pydgraph", "snakemake"], "requires_python": "", "summary": "Graphing bacterial genomes for fun and profit", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"prairiedog\">\n<h2>prairiedog</h2>\n<img alt=\".daisy.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c89fb3b74b2fe013a1d84280ab0b263edf5b4c3/2e64616973792e706e67\">\n<a href=\"https://circleci.com/gh/superphy/prairiedog\" rel=\"nofollow\"><img alt=\"https://circleci.com/gh/superphy/prairiedog.svg?style=svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58a05f7a65b02c4bcf0fb1bc95708358a4801fd9/68747470733a2f2f636972636c6563692e636f6d2f67682f73757065727068792f70726169726965646f672e7376673f7374796c653d737667\"></a>\n<a href=\"https://codecov.io/gh/superphy/prairiedog\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/superphy/prairiedog/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9dda65575e2f44e4e1e8b861bca4eaa037bbd75f/68747470733a2f2f636f6465636f762e696f2f67682f73757065727068792f70726169726965646f672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<p>Supports Python 3.6, Python 3.7, PyPy 3.6 on Linux</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>We recommend you follow both the installation step for graph creation\nand for querying the graph, unless you are computing the graph in one\nplace, and querying it in another.</p>\n<p>Both steps require you to first install lemongraph.</p>\n<div id=\"clone-prairiedog-and-install-lemongraph\">\n<h3>Clone prairiedog and install lemongraph</h3>\n<pre>git clone --recursive https://github.com/superphy/prairiedog.git\ncd prairiedog/\npython3 -m venv venv\n. venv/bin/activate\ncd lemongraph/\napt-get install libffi-dev zlib1g-dev python-dev python-cffi\npython setup.py install\n</pre>\n</div>\n<div id=\"for-creating-a-graph\">\n<h3>For creating a graph</h3>\n<pre>. venv/bin/activate\npip install -r requirements.txt\npip install snakemake\n</pre>\n</div>\n<div id=\"for-querying-an-existing-graph\">\n<h3>For querying an existing graph</h3>\n<pre>. venv/bin/activate\npython setup.py install\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"docker\">\n<h3>Docker</h3>\n<pre>docker run -v /abs-path-to/outputs/:/p/outputs/ -v /abs-path-to/samples/:/p/samples/ superphy/prairiedog dgraph\n</pre>\n</div>\n<div id=\"id1\">\n<h3>For creating a graph</h3>\n<pre>. venv/bin/activate\nsnakemake -j 24 --config samples=samples/\n</pre>\n</div>\n<div id=\"id2\">\n<h3>For querying an existing graph</h3>\n<p>Via docker</p>\n<pre># Without debug\ndocker run -v /home/kevin/pdg-test/outputs:/p/outputs/ -v /home/kevin/pdg-test/samples:/p/samples/ superphy/prairiedog:c6ff5c63779a73de02c9b3de0f4225b29564f285 query TCGAGCATTAT GCATAGGCAAC\n# With debug\ndocker run -v /home/kevin/pdg-test/outputs:/p/outputs/ -v /home/kevin/pdg-test/samples:/p/samples/ superphy/prairiedog:c6ff5c63779a73de02c9b3de0f4225b29564f285 --debug query TCGAGCATTAT GCATAGGCAAC\n</pre>\n<p>or virtualenv</p>\n<pre>. venv/bin/activate\nprairiedog ATACGACGCCA CGTCCGGACGT\n</pre>\n<p>You should get something like:</p>\n<pre>prairiedog GGGCGTTAAGT GGCAGGTTGAA\nprairiedog[21238] INFO Looking for all strings between GGGCGTTAAGT and GGCAGGTTGAA ...\nprairiedog[21238] INFO Found {'string': 'GGGCGTTAAGTTGCAGGGTATAGACCCGAAACCCGGTGATCTAGCCATGGGCAGGTTGAA', 'edge_type': 'SRR3295769.fasta', 'edge_value': '&gt;SRR3295769.fasta|NODE_75_length_556_cov_349.837_ID_5290_pilon'}\nprairiedog[21238] INFO Found {'string': 'GGGCGTTAAGTTGCAGGGTATAGACCCGAAACCCGGTGATCTAGCCATGGGCAGGTTGAA', 'edge_type': 'SRR3665189.fasta', 'edge_value': '&gt;SRR3665189.fasta|NODE_60_length_523_cov_287.621_ID_4672'}\n</pre>\n</div>\n</div>\n<div id=\"tests-benchmarks\">\n<h2>Tests &amp; Benchmarks</h2>\n<p>Test genomes are included in the <em>tests/</em> folders, while genomes for\nbenchmarking should be included in the <em>samples/</em> folder. To run tests and\nbenchmarks:</p>\n<pre>python3 -m venv venv\n. venv/bin/activate\npip install tox\ntox -v\n</pre>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id3\">\n<h3>0.2.0 (2019-07-28)</h3>\n<ul>\n<li>Pangenome graph creation via Dgraph</li>\n<li>Queries between kmers via Dgraph</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.1.2 (2019-06-21)</h3>\n<ul>\n<li>Supports Pangenome graph creation</li>\n<li>Uses LemonGraph as backend</li>\n<li>Supports queries between any two kmers</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.1 (2019-05-25)</h3>\n<ul>\n<li>Initial Snakefile for creating graphs</li>\n<li>Still need to add node_labels</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1.0 (2019-05-08)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5744157, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "42aff338f551787ae9c6c218be1a89d8", "sha256": "e02c1d56b8c5fa19ef3b57a562a6746d3b182f083ea1eabdf98fdeb6074a56c4"}, "downloads": -1, "filename": "prairiedog-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "42aff338f551787ae9c6c218be1a89d8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3630, "upload_time": "2019-05-08T23:55:00", "upload_time_iso_8601": "2019-05-08T23:55:00.771598Z", "url": "https://files.pythonhosted.org/packages/e4/3c/2ef6512fa4a15fc46afc92bab73e3d29217a74031674440f582c8df06fa0/prairiedog-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18cfc86f46381bec17af04fd12dfd403", "sha256": "9046eaf1bea139a99dae1b6e49b40761fd8b43a544aa1c7139bcbb0fb379a5de"}, "downloads": -1, "filename": "prairiedog-0.1.0.tar.gz", "has_sig": false, "md5_digest": "18cfc86f46381bec17af04fd12dfd403", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8062, "upload_time": "2019-05-08T23:55:02", "upload_time_iso_8601": "2019-05-08T23:55:02.647419Z", "url": "https://files.pythonhosted.org/packages/a5/9a/ee028ae5b89dac746b5cfdd49572a50cf8cb4efd3812f84caf474d62af0d/prairiedog-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "27ada24278323056ba1d4bead18f02ea", "sha256": "8eed8039e702d6995419c3cbf3a989b220befb75cf33be62ea1e786334b5ac54"}, "downloads": -1, "filename": "prairiedog-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "27ada24278323056ba1d4bead18f02ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27897, "upload_time": "2019-08-28T17:22:33", "upload_time_iso_8601": "2019-08-28T17:22:33.173312Z", "url": "https://files.pythonhosted.org/packages/1e/f2/87776083c03cf648a43e21acef9cf4c61ee9aecb27697544cb4444e4a56e/prairiedog-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc879c78920998fe25e7bd0e8aed0071", "sha256": "6eaecfc8cbb35d127ad4fe548f9c317eb339384df41edafb26bbe24a5df9d4cc"}, "downloads": -1, "filename": "prairiedog-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bc879c78920998fe25e7bd0e8aed0071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4754967, "upload_time": "2019-08-28T17:33:01", "upload_time_iso_8601": "2019-08-28T17:33:01.921778Z", "url": "https://files.pythonhosted.org/packages/9c/d9/477ca56bd18877e957dee0a6935d542ee4f99918cf87c52208b34b605dec/prairiedog-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "27ada24278323056ba1d4bead18f02ea", "sha256": "8eed8039e702d6995419c3cbf3a989b220befb75cf33be62ea1e786334b5ac54"}, "downloads": -1, "filename": "prairiedog-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "27ada24278323056ba1d4bead18f02ea", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27897, "upload_time": "2019-08-28T17:22:33", "upload_time_iso_8601": "2019-08-28T17:22:33.173312Z", "url": "https://files.pythonhosted.org/packages/1e/f2/87776083c03cf648a43e21acef9cf4c61ee9aecb27697544cb4444e4a56e/prairiedog-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc879c78920998fe25e7bd0e8aed0071", "sha256": "6eaecfc8cbb35d127ad4fe548f9c317eb339384df41edafb26bbe24a5df9d4cc"}, "downloads": -1, "filename": "prairiedog-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bc879c78920998fe25e7bd0e8aed0071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4754967, "upload_time": "2019-08-28T17:33:01", "upload_time_iso_8601": "2019-08-28T17:33:01.921778Z", "url": "https://files.pythonhosted.org/packages/9c/d9/477ca56bd18877e957dee0a6935d542ee4f99918cf87c52208b34b605dec/prairiedog-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:13 2020"}