{"info": {"author": "Janne Solanp\u00e4\u00e4", "author_email": "janne+fiend@solanpaa.fi", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Physics"], "description": "Overview\n========\n\nFIEND is a software package for simulating time-dependent single-particle quantum\nmechanics in cylindrically symmetric systems. This includes systems such as atoms and linear\nmolecules in linearly polarized laser field, metal nanotapers, and\nnanoclusters.\n\nFIEND employs the `FEniCS`_ FEM-suite for meshing and assembling the system\nmatrices, and `PETSc`_ and `SLEPc`_ for high-performance linear algebra.\n\n.. _FEniCS: https://www.fenicsproject.org\n.. _PETSc: https://bitbucket.org/petsc/petsc\n.. _SLEPc: https://bitbucket.org/slepc/slepc\n\nPackage structure\n-----------------\n\nThe package structure is as follows::\n\n    .\n    \u251c\u2500\u2500 docker\n    \u2502      Files for building Docker containers\u00a0\n    \u2502\u00a0     for easy installation of Fiend\n    \u2502\u00a0\u00a0\u00a0 \n    \u251c\u2500\u2500 fiend\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 analysis\n    \u2502   \u2502   \u2502  Analysis scripts\n    \u2502   \u2502   \u2502\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 animate_density.py\n    \u2502   \u2502   \u2502     Animation of electron density in time\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 custom.mplparams\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_acceleration.py\n    \u2502   \u2502   \u2502     Visualization of dipole acceleration\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_dipole.py\n    \u2502   \u2502   \u2502     Visualization of dipole moment\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_final_state.py\n    \u2502   \u2502   \u2502     Visualization of the final state of the propagation\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_laser.py\n    \u2502   \u2502   \u2502     Visualization of the laser electric field\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_mesh.py\n    \u2502   \u2502   \u2502     Visualization of meshes\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_norm.py\n    \u2502   \u2502   \u2502     Visualization of wavefunction norm in time\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_pes.py\n    \u2502   \u2502   \u2502     Computation of photoelectron spectrum (experimental)\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_snapshot.py\n    \u2502   \u2502   \u2502     Visualization of electron density at single instant of time\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_stationary_states.py\n    \u2502   \u2502   \u2502     Visualization of stationary states\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_velocity.py\n    \u2502   \u2502   \u2502     Visualization of dipole velocity\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 _pes_tsurff.py\n    \u2502   \u2502   \u2502     Implementation of tsurff\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0   Tests of the analysis scripts\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 _unit_conversions.py\n    \u2502   \u2502   \u2502     Unit conversion tools\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 _visualization_utils.py\n    \u2502   \u2502         Visualization tools\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 lin_pol\n    \u2502   \u2502   \u2502  Tools for propagation with linearly polarized pulses \n    \u2502   \u2502   \u2502\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 prepare_tdse.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 propagate.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 solve_tise.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 propagation\n    \u2502   \u2502   \u2502  Implementation of propagation-related stuff \n    \u2502   \u2502   \u2502\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 observables.py\n    \u2502   \u2502   \u2502     Implementation of all observables\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 propagation_utils.py\n    \u2502   \u2502   \u2502     Helpful tools for loading system matrices\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 propagators.py\n    \u2502   \u2502   \u2502     All propagators are implemented here\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0       Tests for the propagators\n    \u2502   \u2502\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 pulseconfig_parser\n    \u2502   \u2502   \u2502  Parser for laser pulse configuration files\n    \u2502   \u2502   \u2502\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 laser.py\n    \u2502   \u2502   \u2502     Implementation of Laser\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 parameter.py\n    \u2502   \u2502   \u2502     Implementation of const/non-const parameter\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 parser.py\n    \u2502   \u2502   \u2502     Implementation of Laser configurtion parser\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 singlecolorlaserpulse.py\n    \u2502   \u2502         Implementation of a single channel laser pulse\n    \u2502   \u2502\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 tdse\n    \u2502   \u2502   \u2502  Tools for preparing the system matrices etc. for propagation\n    \u2502   \u2502   \u2502\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 absorbing_boundaries.py\n    \u2502   \u2502   \u2502     Complex absorbing boundary\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tdse.py\n    \u2502   \u2502   \u2502     Preparation of system matrices for propagation\n    \u2502   \u2502   \u2502     and related IO tools\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0       Tests related to preparation of \n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0       system matrices\n    \u2502   \u2502\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0   Global tests (mypy)\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 tise\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0   Tests for TISE solver\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 tise.py\n    \u2502   \u2502         TISE solver and related IO tools\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n    \u2502       \u2502  Helper tools that are used all over the code\n    \u2502       \u2502\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 custom_matrices.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 dolfin.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 mesh.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 misc.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 mpi.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 petsc_utils.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 predefined_potentials.py\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 tests\n    \u2502\u00a0\u00a0           Tests for the utilities\n    \u2502 \n    \u251c\u2500\u2500 license.txt\n    \u251c\u2500\u2500 README.md\n    \u2502      Readme for Gitlab\n    \u251c\u2500\u2500 README.rst\n    \u2502      Readme for PYPI\n    \u251c\u2500\u2500 requirements.txt\n    \u2502      Dependencies of Fiend\n    \u2514\u2500\u2500 setup.py\n           Python setuptools script\n\n\nSolving the Schr\u00f6dinger equation\n--------------------------------\n\nThe time dependent Schr\u00f6dinger equation (TDSE) (in `Hartree\natomic units`_) is\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\mathrm{i}\\\\partial_t\\\\vert{\\\\psi(t)}\\\\rangle=\\\\hat{H}(t)\\\\vert{\\\\psi(t)}\\\\rangle,\\~\\\\vert{\\\\psi(t=0)}\\\\rangle=\\\\vert\\\\psi_0\\\\rangle\n\nwhere |ket_psi_td| is the time-evolving state, |ket_psi_0| the initial state,\n|Ht| the time-dependent Hamiltonian operator whose time-independent part\nis given by |H0| with the stationary potential |V|.\n\nThe stationary states of the time-independent Hamiltonian can be solved\nfrom the time-independent Schr\u00f6dinger equation (TISE)\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\hat{H_0}\\\\vert\\\\psi_k\\\\rangle=E_k\\\\vert\\\\psi_k\\\\rangle,\n\nwhere |Ek| and |psik| are the ith eigenenergy and eigenstate.\n\nIn a typical setup, the initial state for the time propagation, |ket_psi_0|, is one\nof the stationary states. \n\n.. |ket_psi_td| image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\vert{\\\\psi(t)}\\\\rangle \n.. |ket_psi_0| image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\vert{\\\\psi_0}\\\\rangle \n.. |Ht| image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\hat{H}(t)=\\\\hat{H}_0+\\\\hat{W}(t)\n.. |H0| image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\hat{H}_0=\\\\hat{T}+\\\\hat{V}\n.. |V| image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\hat{V}\n.. |Ek| image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;E_k\n.. |psik| image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\vert\\\\psi_k\\\\rangle\n.. _Hartree atomic units: https://en.wikipedia.org/wiki/Atomic_units\n\nTheoretical background\n----------------------\n\nFor description on how TISE and TDSE have been discretized, please see \n`MyArticle`_.\n\n.. _MyArticle: https://notpublished.yet\n\nIn short, we describe our system in cylindrical coordinates assuming zero\nmagnetic quantum number |m=0|. This allows us to describe the system in a 2D\nslice of the cylindrical coordiante system. We select simulation domains \n|omegati| and |omegatd| for TISE and TDSE and mesh them with unstructured \ntriangular meshes. Note that the simulation domains can be different so you\ncan, e.g., increase the simulation domain for TDSE calculations if need be.\n\nAfter meshing, one selects the basis functions. They are Lagrange polynomials\nup to some degree n with compact support on the mesh cells. Meshing and\nchoosing the basis allows us to discretize the Schr\u00f6dinger equations to\n\n.. image:: https://latex.codecogs.com/svg.latex?(\\\\mathbf{T}+\\\\mathbf{V})\\\\boldsymbol\\\\psi_k=\\\\mathbf{S}E_k\\\\boldsymbol\\\\psi_k\n\nand\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\mathrm{i}\\\\mathbf{S}\\\\boldsymbol{\\\\psi}(t)=\\\\left(\\\\mathbf{T}+\\\\mathbf{V}+\\\\mathbf{W}\\\\right)\\\\boldsymbol\\\\psi(t),\n\nwhere |psiti| are vectors of the real-valued expansion coefficients of the\nstationary states, |psitd| is a vector of the complex-valued expansion\ncoefficients of the time-dependent state, and the system matrices in the\nLagrange polynomial basis |basis| are given by\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\mathbf{S}_{ij}=\\\\langle\\\\psi_i\\\\vert\\\\psi_j\\\\rangle,\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\mathbf{T}_{ij}=-\\\\frac{1}{2}\\\\sum\\\\limits_{\\\\alpha=\\\\rho,z}\\\\langle\\\\partial_\\\\alpha\\\\phi_i\\\\vert\\\\partial_\\\\alpha\\\\phi_j\\\\rangle,\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\mathbf{V}_{ij}=\\\\langle\\\\psi_i\\\\vert{V(\\\\rho,z)}\\\\psi_j\\\\rangle,\n\nand\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\mathbf{W}_{ij}=\\\\langle\\\\psi_i\\\\vert{W(\\\\rho,z,\\\\partial_\\\\rho,\\\\partial_z)}\\\\psi_j\\\\rangle.\n\nHere the natural inner product is\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;\\\\langle\\\\chi\\\\vert\\\\psi\\\\rangle=\\\\int\\\\limits_{\\\\Omega_{\\\\mathrm{TI}/\\\\mathrm{TD}}}\\\\chi^*(\\\\rho,z)\\\\psi(\\\\rho,z)\\,\\\\rho\\,\\\\mathrm{d}\\\\rho\\,\\\\mathrm{d}z.\n\n\nNote that we have emposed continuity boundary condition at |rho0| and either\nzero Dirichlet or zero Neumann boundary conditions elsewhere on the boundary.\n\n.. |rho0| image:: https://latex.codecogs.com/svg.latex?\\\\rho=0\n\n.. |basis| image:: https://latex.codecogs.com/svg.latex?\\\\{\\\\phi_i\\\\}_{i=0}^{N-1}\n\n.. |psiti| image:: https://latex.codecogs.com/svg.latex?\\\\boldsymbol{\\\\psi}_k\n\n.. |psitd| image:: https://latex.codecogs.com/svg.latex?\\\\boldsymbol{\\\\psi}(t)\n\n.. |m=0| image:: https://latex.codecogs.com/svg.latex?m=0\n\n.. |omegati| image:: https://latex.codecogs.com/svg.latex?\\\\Omega_{\\\\mathrm{TI}}\n\n.. |omegatd| image:: https://latex.codecogs.com/svg.latex?\\\\Omega_{\\\\mathrm{TD}}\n\n\nInteractions\n++++++++++++\n\nBy default we implement three types of laser-matter interactions |Wint|:\n\nthe dipole approximation in the length gauge for linearly polarized vector\npotentials |Alin|\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;W=z\\\\partial_t{f(t)}\n\nthe dipole approximation in the length gauge for linearly polarized vector\npotentials |Alin|,\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;W=-\\\\mathrm{i}f(t)\\\\partial_z\n\nand nonhomogeneous vector potentials |Anh|\n\n.. image:: https://latex.codecogs.com/svg.latex?\\\\Large&space;W=f(t)\\\\mathbf{A}_s\\\\cdot\\\\mathbf{\\\\hat{p}}+\\\\frac{1}{2}f(t)^2\\\\Vert\\\\mathbf{A}_s\\\\Vert^2.\n\n.. |Wint| image:: https://latex.codecogs.com/svg.latex?W(\\\\rho,z,\\\\partial_\\\\rho,\\\\partial_z)\n\n.. |Alin| image:: https://latex.codecogs.com/svg.latex?\\\\mathbf{A}(\\\\rho,z,t)=f(t)\\\\boldsymbol{\\\\mathrm{e}}_z\n\n.. |Anh| image:: https://latex.codecogs.com/svg.latex?\\\\mathbf{A}(\\\\rho,z,t)=\\\\mathbf{A}_s(\\\\rho,z)f(t)\n\n\nUsing FIEND\n===========\n\nA single time-dependent simulation consists of 4 steps:\n\n1. **Solving the time-independent system to obtain an initial state**\n2. **Preparing the system matrices for time evolution**\n3. **Time evolution**\n4. **Post-processing/analysis**\n\nThese steps are described in detail in the following when simulating atomic\nsystems under linearly polarized laser fields. For more complex cases, please\nsee the examples in ``demos/nanotip``.\n\nStep 1. Solving TISE\n--------------------\n\nTime-independent system should always be solved first. Make sure that you have\nloaded environment with a FEniCS installation supporting HDF5, PETSc, and\nSLEPc. In the pre-installed Docker image, you can use the command \n``ml petsc/real``.\n\nTISE can be solved with the script ``fiend_linpol_tise``. It solves an atomic system\nwithin the single active electron approximation, and the atomic potential can\nbe selected with the command line option ``--atom_type``.\n\nFor a full list of options run  ``fiend_linpol_tise --help``. Examples can be found in\n``demos/hhg/step1.sh`` and ``demos/hhg/step2.sh``.\n\nNew static potentials can be implemented in\n``fiend.utils.predefined_potentials``, please see the module source for further\ndetails.\n\n``solve_tise`` saves the following files:\n\n- ``data/tise_mesh.h5`` which includes the mesh used for\n  solving TISE.\n- ``data/tise_eigenvalues`` which is a list of eigenenergies\n- ``data/tise_states.h5`` which contains the expansion coefficients for all the\n  stationary states\n- ``data/config`` which includes the simulation parameters used for solving\n  the TISE\n\nStep 2. Preparing system matrices for TDSE\n------------------------------------------\n\nAfter solving TISE, you should set up matrices for time dependent simulations.\nFor atomic systems in linearly polarized fields this can be accomplished with\nthe script ``fiend_linpol_prepare_tdse``, but for more complex setups see\n``demos/nanotip/``. Make sure that you have loaded a FEniCS installation with \nhdf5, petsc, and slepc enabled. In the Docker image this can be achieved with\n``ml petsc/real``.\n\nThe main feature of this step is that it can change the mesh from the TISE\nsimulation. This allows you to solve TISE in a small simulation domain\nand use a larger simulation domain for time-dependent simulation.\nA full list of options can be obtained with ``fiend_linpol_prepare_tdse --help``.\nIf some of the options are not given, the values used in solving the TISE are\nused. So, e.g., if you only want to increase the radius of the meshed domain,\nsupply only ``--radius X`` where X is the new radius.\n\nComplex absorbing potentials (CAP) can be included in the time propagation\nsimulations with options\n\n- ``--cap_width`` which sets the width of the absorber from the domain\n  boundary\n- ``--cap_height`` which sets the strength of the absorber\n\nAlso other absorbers such as the smooth exterior complex scaling could easily be\nimplemented.\n\n``prepare_tdse`` saves the following files using PETSc binary format\n\n- ``data/tdse_CAP*`` containing the imaginary part of the CAP matrix\n- ``data/tdse_H0*`` containing the time-independent part of the Hamiltonian matrix\n- ``data/tdse_S*`` containing the overlap matrix\n- ``data/tdse_rho*`` containing the |rho|-component of the dipole matrix\n- ``data/tdse_Z*`` containing the z-component of the dipole matrix\n- ``data/tdse_partialRho*`` containing matrix elements of |partialrho|\n- ``data/tdse_partialZ*`` containing matrix elements of |partialz|\n- ``data/tdse_state_N*`` containing the vector representation of the stationary\n  states in the TDSE mesh\n\nIn addition, ``fiend_linpol_prepare_tdse`` saves the new mesh in\n``data/tdse_mesh.h5`` and *appends* the new configuration parameters in ``data/config``.\n\n\n**NOTE:** There are three versions of the overlap matrix, ``S``, ``S0``, and\n``S1``. ``S`` is the pure overlap matrix, ``S0`` has the rows corresponding to\nthe Dirichlet boundaries zeroed, and ``S1`` is like ``S0`` but it has 1s on the\ndiagonals of the zeroed rows. For all other matrices, the rows corresponding to\nthe Dirichlet boundaries are always zeroed.\n\n.. |rho| image::  https://latex.codecogs.com/svg.latex?\\\\rho\n\n.. |partialrho| image:: https://latex.codecogs.com/svg.latex?\\\\partial_\\\\rho\n\n.. |partialz| image:: https://latex.codecogs.com/svg.latex?\\\\partial_z\n\nStep 3. Propagation\n-------------------\n\nNow you must load Python packages petsc4py, slepc4py, and mpi4py with support\nfor *complex numbers*. In the docker\nimage this can be done with ``ml petsc/complex``.\nUnfortunately, currently (as of version 2018.1.0)\nFEniCS doesn't support PETSc with complex numbers so we must resort to\ntwo different versions of the python\npackages, but hopefully in the near future we can remedy this.\n\nTime propagation can be achieved with the command ``fiend_linpol_propagate``. It reads\nthe matrices prepared in step 2 and uses those for time propagation. A complete\nlist of options can be printed out with ``fiend_linpol_propagate --help``.\n\nNote that you can request saving frequency with ``--save_interval``. E.g.,\n``--save_interval 10`` saves every 10th time-step.\nTime-propagation saves data to\n\n- ``data/tdse_observables.npz`` which includes an array for each observable (except\n  the density)\n- ``data/tdse_wavefunction/realpart_iteration_N_real`` which is a PETSc vector of the expansion\n  coefficients for the real part of the wavefunction at saveslot ``N``\n- ``data/tdse_wavefunction/imagpart_iteration_N_real`` which is a PETSc vector of the expansion coefficients\n  for the imaginary part of the wavefunction at saveslot ``N``\n- ``data/config`` where it appends new configuration options\n\nSetting laser field\n+++++++++++++++++++\n\nThe laser-field can be set with option ``--vecpot path``. The file should be\n\n1. a two-column file where the first column is time and second the\n   time-dependent part of the vector potential, or\n2. a multi-pulse configuration defining the time-dependent part of the vector\n   potential with each wavelength channel defined as::\n\n        [Pulse1]\n        A = 0.1\n        w = 0.0569\n        k = 0\n        tcenter = 0\n        cep = 0.05\n        fwhm = 150\n\n   Here ``A`` is the electric field peak amplitude, ``w`` the carrier\n   frequency, ``k`` the chirp, ``tcenter`` the time of envelope maximum,\n   ``cep`` the carrier envelope phase, and ``fwhm`` the full with at half\n   maximum for the envelope.\n\n\nStep 4. Post-processing\n-----------------------\n\n``--save`` option for the post-processing scripts saves the figures to\n``data/figures`` and data to ``data/postprocessing``.\n\n``animate_density``\n+++++++++++++++++++\n\nThis script reads data from ``data/tdse_wavefunction/`` and animates \nthe electron density. This script needs FEniCS (``ml petsc/real`` \nwhen using Docker). \n\n``draw_norm``\n+++++++++++++\n\nFor drawing the norm as a function of time. \n\n``draw_dipole`` / ``draw_velocity`` / ``draw_acceleration``\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nDraws the dipole moment/dipole velocity/dipole acceleration\nas a function of time, the corresponding spectrum,\nand stft of the spectrum. \n\n``draw_pes``\n++++++++++++\n\nDraws the angle-integrated and angle-resolved photoelectron spectra. Can use\nMPI to speed up computation of the spectra.\n\nPETSc and SLEPc options\n-----------------------\n\nPETSc and SLEPc have numerous options to fine-tune their operation. All\narguments passed to scripts after ``PETSC_ARGS`` are used to initialize the\nPETSc options database and the arguments before that remain in sys.argv and are\nused by the argumentparser of FIEND.\n\nInstallation\n============\n\nUsing Docker\n------------\n\nWe recommend using Docker images for running simulations on your personal\ncomputer. For supercomputers and clusters, we recommend either installing \nthe entire package from source or with ``pip``.\n\nTo use the prepared Docker image, first install `Docker\n<https://www.docker.com>_` to your PC. The docker image for\n`fiend <https://hub.docker.com/r/solanpaa/fiend>_` can fetched with the\ncommand ``docker pull solanpaa/fiend``. Please note that the image is a few GB in size.\n\nBy default, running the docker image for interactive process,\n\n    ``docker run -it fiend``\n\ndrops you in a Unix shell. All the scripts are pre-installed,\nand you can switch between the complex and\nreal PETSc installations with commands ``ml petsc/real`` and\n``ml petsc/complex``.\n\nTo enable GUIs for the scripts, you should launch the docker container with\nthe commands executed on the HOST machine (works on Linux)\n\n``$ xhost +local:docker``\n\n``$ docker run -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix:ro -it fiend``\n\nAs you probably wish to save the datafiles computed within the container, you\nshould create a directory ``data`` on your HOST and mount it to the container\nwith\n\n``$ docker run -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix:ro -v\n`pwd`/data:/home/fiend/data:Z -it fiend``\n\nThis also allows you to provide the laser parameters by saving it to a file\nwithin ``data`` on the HOST and passing the argument ``--vecpot data/filename``\nto ``docker run fiend fiend_linpol_propagate``.\n\nFor non-interactive use, you can pass the above command arguments corresponding\nto the script you would like to execute together with its arguments, e.g.,\n\n``$ docker run -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix:ro -v\n`pwd`/data:/home/fiend/data:Z fiend fiend_linpol_tise --radius 10 --how_many 3``\n\nParallelization of the linear algebra backend can be achieved with the flag\n``-e OPENBLAS_NUM_THREADS N`` of ``docker run``. MPI-parallelized simulations\ncan be achieved with the environment variable ``NMPIPROC``, e.g.,\n\n``$ docker run -e NMPIPROC=3 -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix:ro -v\n`pwd`/data:/home/fiend/data:Z fiend fiend_linpol_tise --radius 10 --how_many 3``\n\n\nInstallation with pip\n---------------------\n\n``pip3 install fiend`` should do the trick. Note that you have to manually install\nreal and complex PETSc, SLEPc, petsc4py, slepc4py, and FEniCS suite.\n\nInstallation from sources\n-------------------------\n\nThe ``fiend`` package is hosted at `GitLab <https://gitlab.com/qcad.fi/fiend>_`.\n\n``python3 setup.py install`` should install the package. Note that you have to \nmanually install real and complex PETSc, SLEPc, petsc4py, slepc4py, and FEniCS \nsuite.\n\nAuthors\n=======\n\nJanne Solanp\u00e4\u00e4\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://fiend.solanpaa.fi", "keywords": "numerics,FEM,finite-element method,quantum mechanics,Schr\u00f6dinger equation,physics", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "fiend", "package_url": "https://pypi.org/project/fiend/", "platform": "", "project_url": "https://pypi.org/project/fiend/", "project_urls": {"Homepage": "https://fiend.solanpaa.fi"}, "release_url": "https://pypi.org/project/fiend/1.0.3/", "requires_dist": ["numpy", "scipy", "matplotlib", "h5py", "mpi4py", "petsc4py", "slepc4py", "fenics-dolfin", "mshr", "psutil", "progressbar2", "mypy"], "requires_python": ">=3.6", "summary": "Finite element nanoscale dynamics", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>FIEND is a software package for simulating time-dependent single-particle quantum\nmechanics in cylindrically symmetric systems. This includes systems such as atoms and linear\nmolecules in linearly polarized laser field, metal nanotapers, and\nnanoclusters.</p>\n<p>FIEND employs the <a href=\"https://www.fenicsproject.org\" rel=\"nofollow\">FEniCS</a> FEM-suite for meshing and assembling the system\nmatrices, and <a href=\"https://bitbucket.org/petsc/petsc\" rel=\"nofollow\">PETSc</a> and <a href=\"https://bitbucket.org/slepc/slepc\" rel=\"nofollow\">SLEPc</a> for high-performance linear algebra.</p>\n<div id=\"package-structure\">\n<h3>Package structure</h3>\n<p>The package structure is as follows:</p>\n<pre>.\n\u251c\u2500\u2500 docker\n\u2502      Files for building Docker containers\n\u2502\u00a0     for easy installation of Fiend\n\u2502\n\u251c\u2500\u2500 fiend\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 analysis\n\u2502   \u2502   \u2502  Analysis scripts\n\u2502   \u2502   \u2502\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 animate_density.py\n\u2502   \u2502   \u2502     Animation of electron density in time\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 custom.mplparams\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_acceleration.py\n\u2502   \u2502   \u2502     Visualization of dipole acceleration\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_dipole.py\n\u2502   \u2502   \u2502     Visualization of dipole moment\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_final_state.py\n\u2502   \u2502   \u2502     Visualization of the final state of the propagation\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_laser.py\n\u2502   \u2502   \u2502     Visualization of the laser electric field\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_mesh.py\n\u2502   \u2502   \u2502     Visualization of meshes\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_norm.py\n\u2502   \u2502   \u2502     Visualization of wavefunction norm in time\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_pes.py\n\u2502   \u2502   \u2502     Computation of photoelectron spectrum (experimental)\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_snapshot.py\n\u2502   \u2502   \u2502     Visualization of electron density at single instant of time\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_stationary_states.py\n\u2502   \u2502   \u2502     Visualization of stationary states\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 draw_velocity.py\n\u2502   \u2502   \u2502     Visualization of dipole velocity\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 _pes_tsurff.py\n\u2502   \u2502   \u2502     Implementation of tsurff\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0   Tests of the analysis scripts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 _unit_conversions.py\n\u2502   \u2502   \u2502     Unit conversion tools\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 _visualization_utils.py\n\u2502   \u2502         Visualization tools\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lin_pol\n\u2502   \u2502   \u2502  Tools for propagation with linearly polarized pulses\n\u2502   \u2502   \u2502\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 prepare_tdse.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 propagate.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 solve_tise.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 propagation\n\u2502   \u2502   \u2502  Implementation of propagation-related stuff\n\u2502   \u2502   \u2502\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 observables.py\n\u2502   \u2502   \u2502     Implementation of all observables\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 propagation_utils.py\n\u2502   \u2502   \u2502     Helpful tools for loading system matrices\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 propagators.py\n\u2502   \u2502   \u2502     All propagators are implemented here\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0       Tests for the propagators\n\u2502   \u2502\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pulseconfig_parser\n\u2502   \u2502   \u2502  Parser for laser pulse configuration files\n\u2502   \u2502   \u2502\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 laser.py\n\u2502   \u2502   \u2502     Implementation of Laser\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 parameter.py\n\u2502   \u2502   \u2502     Implementation of const/non-const parameter\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 parser.py\n\u2502   \u2502   \u2502     Implementation of Laser configurtion parser\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 singlecolorlaserpulse.py\n\u2502   \u2502         Implementation of a single channel laser pulse\n\u2502   \u2502\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tdse\n\u2502   \u2502   \u2502  Tools for preparing the system matrices etc. for propagation\n\u2502   \u2502   \u2502\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 absorbing_boundaries.py\n\u2502   \u2502   \u2502     Complex absorbing boundary\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tdse.py\n\u2502   \u2502   \u2502     Preparation of system matrices for propagation\n\u2502   \u2502   \u2502     and related IO tools\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0       Tests related to preparation of\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0       system matrices\n\u2502   \u2502\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0   Global tests (mypy)\n\u2502\u00a0\u00a0 \u2502\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tise\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0   Tests for TISE solver\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 tise.py\n\u2502   \u2502         TISE solver and related IO tools\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u2502       \u2502  Helper tools that are used all over the code\n\u2502       \u2502\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 custom_matrices.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 dolfin.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 mesh.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 misc.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 mpi.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 petsc_utils.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 predefined_potentials.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0           Tests for the utilities\n\u2502\n\u251c\u2500\u2500 license.txt\n\u251c\u2500\u2500 README.md\n\u2502      Readme for Gitlab\n\u251c\u2500\u2500 README.rst\n\u2502      Readme for PYPI\n\u251c\u2500\u2500 requirements.txt\n\u2502      Dependencies of Fiend\n\u2514\u2500\u2500 setup.py\n       Python setuptools script\n</pre>\n</div>\n<div id=\"solving-the-schrodinger-equation\">\n<h3>Solving the Schr\u00f6dinger equation</h3>\n<p>The time dependent Schr\u00f6dinger equation (TDSE) (in <a href=\"https://en.wikipedia.org/wiki/Atomic_units\" rel=\"nofollow\">Hartree\natomic units</a>) is</p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;\\mathrm{i}\\partial_t\\vert{\\psi(t)}\\rangle=\\hat{H}(t)\\vert{\\psi(t)}\\rangle,~\\vert{\\psi(t=0)}\\rangle=\\vert\\psi_0\\rangle\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24a3e94113d3f104c668ad261ee2f834cbf2ba2a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6d617468726d7b697d5c7061727469616c5f745c766572747b5c7073692874297d5c72616e676c653d5c6861747b487d2874295c766572747b5c7073692874297d5c72616e676c652c7e5c766572747b5c70736928743d30297d5c72616e676c653d5c766572745c7073695f305c72616e676c65\">\n<p>where <img alt=\"ket_psi_td\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3eae1a8a617f6228406d105a92e0a75fc5fa5c14/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c766572747b5c7073692874297d5c72616e676c65\"> is the time-evolving state, <img alt=\"ket_psi_0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ce12007fc8c5ec15add941abc31d722b45bc7ad/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c766572747b5c7073695f307d5c72616e676c65\"> the initial state,\n<img alt=\"Ht\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e5e2a3963d943228e40bbdd571b505052ca52dd/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6861747b487d2874293d5c6861747b487d5f302b5c6861747b577d287429\"> the time-dependent Hamiltonian operator whose time-independent part\nis given by <img alt=\"H0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f93a2942e99d85d7bafc21388e105e81b00c3e3a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6861747b487d5f303d5c6861747b547d2b5c6861747b567d\"> with the stationary potential <img alt=\"V\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65e48ddf82ee0e3079720fc8a6f39742126df94a/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6861747b567d\">.</p>\n<p>The stationary states of the time-independent Hamiltonian can be solved\nfrom the time-independent Schr\u00f6dinger equation (TISE)</p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;\\hat{H_0}\\vert\\psi_k\\rangle=E_k\\vert\\psi_k\\rangle,\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00aecf8292bd15429b7259213bc0333d08dfa510/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6861747b485f307d5c766572745c7073695f6b5c72616e676c653d455f6b5c766572745c7073695f6b5c72616e676c652c\">\n<p>where <img alt=\"Ek\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71c36a40d89d900a9efc7f5d2bc2f5c0bf8a1834/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b455f6b\"> and <img alt=\"psik\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16fe6bf071848bb875edc17fbfde2f5d7023e3c7/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c766572745c7073695f6b5c72616e676c65\"> are the ith eigenenergy and eigenstate.</p>\n<p>In a typical setup, the initial state for the time propagation, <img alt=\"ket_psi_0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ce12007fc8c5ec15add941abc31d722b45bc7ad/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c766572747b5c7073695f307d5c72616e676c65\">, is one\nof the stationary states.</p>\n</div>\n<div id=\"theoretical-background\">\n<h3>Theoretical background</h3>\n<p>For description on how TISE and TDSE have been discretized, please see\n<a href=\"https://notpublished.yet\" rel=\"nofollow\">MyArticle</a>.</p>\n<p>In short, we describe our system in cylindrical coordinates assuming zero\nmagnetic quantum number <img alt=\"m=0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1845ec28dd3b9c913df0c51820e9d9578933fcc3/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f6d3d30\">. This allows us to describe the system in a 2D\nslice of the cylindrical coordiante system. We select simulation domains\n<img alt=\"omegati\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2090b8e9ba5283941a902c6732ca3429fd68e89/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4f6d6567615f7b5c6d617468726d7b54497d7d\"> and <img alt=\"omegatd\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b6d96880f9857989ca16ae234c1a2cadfefd6ccc/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4f6d6567615f7b5c6d617468726d7b54447d7d\"> for TISE and TDSE and mesh them with unstructured\ntriangular meshes. Note that the simulation domains can be different so you\ncan, e.g., increase the simulation domain for TDSE calculations if need be.</p>\n<p>After meshing, one selects the basis functions. They are Lagrange polynomials\nup to some degree n with compact support on the mesh cells. Meshing and\nchoosing the basis allows us to discretize the Schr\u00f6dinger equations to</p>\n<img alt=\"https://latex.codecogs.com/svg.latex?(\\mathbf{T}+\\mathbf{V})\\boldsymbol\\psi_k=\\mathbf{S}E_k\\boldsymbol\\psi_k\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/94fee4cbdaabb899fdc30294fea5b163b5e01cc9/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f285c6d61746862667b547d2b5c6d61746862667b567d295c626f6c6473796d626f6c5c7073695f6b3d5c6d61746862667b537d455f6b5c626f6c6473796d626f6c5c7073695f6b\">\n<p>and</p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\mathrm{i}\\mathbf{S}\\boldsymbol{\\psi}(t)=\\left(\\mathbf{T}+\\mathbf{V}+\\mathbf{W}\\right)\\boldsymbol\\psi(t),\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e9196f6aaa02ed7b6ec7bcd2365a40ea4ef88377/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6d617468726d7b697d5c6d61746862667b537d5c626f6c6473796d626f6c7b5c7073697d2874293d5c6c656674285c6d61746862667b547d2b5c6d61746862667b567d2b5c6d61746862667b577d5c7269676874295c626f6c6473796d626f6c5c7073692874292c\">\n<p>where <img alt=\"psiti\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f070cf83f1be95468dd674565a467c8dcb84a2f/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c626f6c6473796d626f6c7b5c7073697d5f6b\"> are vectors of the real-valued expansion coefficients of the\nstationary states, <img alt=\"psitd\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6feeff762fa9c287c7ccca38ffa0bfecccee8a78/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c626f6c6473796d626f6c7b5c7073697d287429\"> is a vector of the complex-valued expansion\ncoefficients of the time-dependent state, and the system matrices in the\nLagrange polynomial basis <img alt=\"basis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6eb30f6a2c20674ca12d3944bf27ae0b6040bcf0/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c7b5c7068695f695c7d5f7b693d307d5e7b4e2d317d\"> are given by</p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;\\mathbf{S}_{ij}=\\langle\\psi_i\\vert\\psi_j\\rangle,\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/011b5002f06b1686b45f50cff87f6d6178696e84/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6d61746862667b537d5f7b696a7d3d5c6c616e676c655c7073695f695c766572745c7073695f6a5c72616e676c652c\">\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;\\mathbf{T}_{ij}=-\\frac{1}{2}\\sum\\limits_{\\alpha=\\rho,z}\\langle\\partial_\\alpha\\phi_i\\vert\\partial_\\alpha\\phi_j\\rangle,\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09959e2de3c6b6e9ba57c30731eeceb125554794/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6d61746862667b547d5f7b696a7d3d2d5c667261637b317d7b327d5c73756d5c6c696d6974735f7b5c616c7068613d5c72686f2c7a7d5c6c616e676c655c7061727469616c5f5c616c7068615c7068695f695c766572745c7061727469616c5f5c616c7068615c7068695f6a5c72616e676c652c\">\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;\\mathbf{V}_{ij}=\\langle\\psi_i\\vert{V(\\rho,z)}\\psi_j\\rangle,\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77eb8e01dd3c2428e2186bb6ce1717fc3e51536f/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6d61746862667b567d5f7b696a7d3d5c6c616e676c655c7073695f695c766572747b56285c72686f2c7a297d5c7073695f6a5c72616e676c652c\">\n<p>and</p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;\\mathbf{W}_{ij}=\\langle\\psi_i\\vert{W(\\rho,z,\\partial_\\rho,\\partial_z)}\\psi_j\\rangle.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2c03728713c61ced42d9fbcbd79e38f03539e0d/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6d61746862667b577d5f7b696a7d3d5c6c616e676c655c7073695f695c766572747b57285c72686f2c7a2c5c7061727469616c5f5c72686f2c5c7061727469616c5f7a297d5c7073695f6a5c72616e676c652e\">\n<p>Here the natural inner product is</p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;\\langle\\chi\\vert\\psi\\rangle=\\int\\limits_{\\Omega_{\\mathrm{TI}/\\mathrm{TD}}}\\chi^*(\\rho,z)\\psi(\\rho,z),\\rho,\\mathrm{d}\\rho,\\mathrm{d}z.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/446c48592d32612aaa289b4331bcae8375c3bfdb/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b5c6c616e676c655c6368695c766572745c7073695c72616e676c653d5c696e745c6c696d6974735f7b5c4f6d6567615f7b5c6d617468726d7b54497d2f5c6d617468726d7b54447d7d7d5c6368695e2a285c72686f2c7a295c707369285c72686f2c7a292c5c72686f2c5c6d617468726d7b647d5c72686f2c5c6d617468726d7b647d7a2e\">\n<p>Note that we have emposed continuity boundary condition at <img alt=\"rho0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c6641b370cba898e75ad110f56169fa5376d945e/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c72686f3d30\"> and either\nzero Dirichlet or zero Neumann boundary conditions elsewhere on the boundary.</p>\n<div id=\"interactions\">\n<h4>Interactions</h4>\n<p>By default we implement three types of laser-matter interactions <img alt=\"Wint\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50f463f3509c973de7871f932080759fe24debcb/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f57285c72686f2c7a2c5c7061727469616c5f5c72686f2c5c7061727469616c5f7a29\">:</p>\n<p>the dipole approximation in the length gauge for linearly polarized vector\npotentials <img alt=\"Alin\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75aa6745671f4d66953eab78234495ecc31f4afb/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6d61746862667b417d285c72686f2c7a2c74293d662874295c626f6c6473796d626f6c7b5c6d617468726d7b657d7d5f7a\"></p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;W=z\\partial_t{f(t)}\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2ee35f37228ad736ec8dcecfe2ad8e181347ef1/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b573d7a5c7061727469616c5f747b662874297d\">\n<p>the dipole approximation in the length gauge for linearly polarized vector\npotentials <img alt=\"Alin\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75aa6745671f4d66953eab78234495ecc31f4afb/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6d61746862667b417d285c72686f2c7a2c74293d662874295c626f6c6473796d626f6c7b5c6d617468726d7b657d7d5f7a\">,</p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;W=-\\mathrm{i}f(t)\\partial_z\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dbff56979cfc534637506763d1ec8f905493264b/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b573d2d5c6d617468726d7b697d662874295c7061727469616c5f7a\">\n<p>and nonhomogeneous vector potentials <img alt=\"Anh\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/027b5b2da4ecf115dffc044b918d8c95e9d28ffe/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c6d61746862667b417d285c72686f2c7a2c74293d5c6d61746862667b417d5f73285c72686f2c7a2966287429\"></p>\n<img alt=\"https://latex.codecogs.com/svg.latex?\\Large&amp;space;W=f(t)\\mathbf{A}_s\\cdot\\mathbf{\\hat{p}}+\\frac{1}{2}f(t)^2\\Vert\\mathbf{A}_s\\Vert^2.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05de8a32d1f660d55cd7398065cf9800b7e06ea8/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c4c617267652673706163653b573d662874295c6d61746862667b417d5f735c63646f745c6d61746862667b5c6861747b707d7d2b5c667261637b317d7b327d662874295e325c566572745c6d61746862667b417d5f735c566572745e322e\">\n</div>\n</div>\n</div>\n<div id=\"using-fiend\">\n<h2>Using FIEND</h2>\n<p>A single time-dependent simulation consists of 4 steps:</p>\n<ol>\n<li><strong>Solving the time-independent system to obtain an initial state</strong></li>\n<li><strong>Preparing the system matrices for time evolution</strong></li>\n<li><strong>Time evolution</strong></li>\n<li><strong>Post-processing/analysis</strong></li>\n</ol>\n<p>These steps are described in detail in the following when simulating atomic\nsystems under linearly polarized laser fields. For more complex cases, please\nsee the examples in <tt>demos/nanotip</tt>.</p>\n<div id=\"step-1-solving-tise\">\n<h3>Step 1. Solving TISE</h3>\n<p>Time-independent system should always be solved first. Make sure that you have\nloaded environment with a FEniCS installation supporting HDF5, PETSc, and\nSLEPc. In the pre-installed Docker image, you can use the command\n<tt>ml petsc/real</tt>.</p>\n<p>TISE can be solved with the script <tt>fiend_linpol_tise</tt>. It solves an atomic system\nwithin the single active electron approximation, and the atomic potential can\nbe selected with the command line option <tt><span class=\"pre\">--atom_type</span></tt>.</p>\n<p>For a full list of options run  <tt>fiend_linpol_tise <span class=\"pre\">--help</span></tt>. Examples can be found in\n<tt>demos/hhg/step1.sh</tt> and <tt>demos/hhg/step2.sh</tt>.</p>\n<p>New static potentials can be implemented in\n<tt>fiend.utils.predefined_potentials</tt>, please see the module source for further\ndetails.</p>\n<p><tt>solve_tise</tt> saves the following files:</p>\n<ul>\n<li><tt>data/tise_mesh.h5</tt> which includes the mesh used for\nsolving TISE.</li>\n<li><tt>data/tise_eigenvalues</tt> which is a list of eigenenergies</li>\n<li><tt>data/tise_states.h5</tt> which contains the expansion coefficients for all the\nstationary states</li>\n<li><tt>data/config</tt> which includes the simulation parameters used for solving\nthe TISE</li>\n</ul>\n</div>\n<div id=\"step-2-preparing-system-matrices-for-tdse\">\n<h3>Step 2. Preparing system matrices for TDSE</h3>\n<p>After solving TISE, you should set up matrices for time dependent simulations.\nFor atomic systems in linearly polarized fields this can be accomplished with\nthe script <tt>fiend_linpol_prepare_tdse</tt>, but for more complex setups see\n<tt>demos/nanotip/</tt>. Make sure that you have loaded a FEniCS installation with\nhdf5, petsc, and slepc enabled. In the Docker image this can be achieved with\n<tt>ml petsc/real</tt>.</p>\n<p>The main feature of this step is that it can change the mesh from the TISE\nsimulation. This allows you to solve TISE in a small simulation domain\nand use a larger simulation domain for time-dependent simulation.\nA full list of options can be obtained with <tt>fiend_linpol_prepare_tdse <span class=\"pre\">--help</span></tt>.\nIf some of the options are not given, the values used in solving the TISE are\nused. So, e.g., if you only want to increase the radius of the meshed domain,\nsupply only <tt><span class=\"pre\">--radius</span> X</tt> where X is the new radius.</p>\n<p>Complex absorbing potentials (CAP) can be included in the time propagation\nsimulations with options</p>\n<ul>\n<li><tt><span class=\"pre\">--cap_width</span></tt> which sets the width of the absorber from the domain\nboundary</li>\n<li><tt><span class=\"pre\">--cap_height</span></tt> which sets the strength of the absorber</li>\n</ul>\n<p>Also other absorbers such as the smooth exterior complex scaling could easily be\nimplemented.</p>\n<p><tt>prepare_tdse</tt> saves the following files using PETSc binary format</p>\n<ul>\n<li><tt>data/tdse_CAP*</tt> containing the imaginary part of the CAP matrix</li>\n<li><tt>data/tdse_H0*</tt> containing the time-independent part of the Hamiltonian matrix</li>\n<li><tt>data/tdse_S*</tt> containing the overlap matrix</li>\n<li><tt>data/tdse_rho*</tt> containing the <img alt=\"rho\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59f146385c3a8e4b160e17cdedbacda43d0abd84/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c72686f\">-component of the dipole matrix</li>\n<li><tt>data/tdse_Z*</tt> containing the z-component of the dipole matrix</li>\n<li><tt>data/tdse_partialRho*</tt> containing matrix elements of <img alt=\"partialrho\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4e311f4997faf26dc4b81f05a9bec917d3f994a4/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c7061727469616c5f5c72686f\"></li>\n<li><tt>data/tdse_partialZ*</tt> containing matrix elements of <img alt=\"partialz\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29de01a46f4f2fb0603cb2326aa2e69351432a14/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f7376672e6c617465783f5c7061727469616c5f7a\"></li>\n<li><tt>data/tdse_state_N*</tt> containing the vector representation of the stationary\nstates in the TDSE mesh</li>\n</ul>\n<p>In addition, <tt>fiend_linpol_prepare_tdse</tt> saves the new mesh in\n<tt>data/tdse_mesh.h5</tt> and <em>appends</em> the new configuration parameters in <tt>data/config</tt>.</p>\n<p><strong>NOTE:</strong> There are three versions of the overlap matrix, <tt>S</tt>, <tt>S0</tt>, and\n<tt>S1</tt>. <tt>S</tt> is the pure overlap matrix, <tt>S0</tt> has the rows corresponding to\nthe Dirichlet boundaries zeroed, and <tt>S1</tt> is like <tt>S0</tt> but it has 1s on the\ndiagonals of the zeroed rows. For all other matrices, the rows corresponding to\nthe Dirichlet boundaries are always zeroed.</p>\n</div>\n<div id=\"step-3-propagation\">\n<h3>Step 3. Propagation</h3>\n<p>Now you must load Python packages petsc4py, slepc4py, and mpi4py with support\nfor <em>complex numbers</em>. In the docker\nimage this can be done with <tt>ml petsc/complex</tt>.\nUnfortunately, currently (as of version 2018.1.0)\nFEniCS doesn\u2019t support PETSc with complex numbers so we must resort to\ntwo different versions of the python\npackages, but hopefully in the near future we can remedy this.</p>\n<p>Time propagation can be achieved with the command <tt>fiend_linpol_propagate</tt>. It reads\nthe matrices prepared in step 2 and uses those for time propagation. A complete\nlist of options can be printed out with <tt>fiend_linpol_propagate <span class=\"pre\">--help</span></tt>.</p>\n<p>Note that you can request saving frequency with <tt><span class=\"pre\">--save_interval</span></tt>. E.g.,\n<tt><span class=\"pre\">--save_interval</span> 10</tt> saves every 10th time-step.\nTime-propagation saves data to</p>\n<ul>\n<li><tt>data/tdse_observables.npz</tt> which includes an array for each observable (except\nthe density)</li>\n<li><tt>data/tdse_wavefunction/realpart_iteration_N_real</tt> which is a PETSc vector of the expansion\ncoefficients for the real part of the wavefunction at saveslot <tt>N</tt></li>\n<li><tt>data/tdse_wavefunction/imagpart_iteration_N_real</tt> which is a PETSc vector of the expansion coefficients\nfor the imaginary part of the wavefunction at saveslot <tt>N</tt></li>\n<li><tt>data/config</tt> where it appends new configuration options</li>\n</ul>\n<div id=\"setting-laser-field\">\n<h4>Setting laser field</h4>\n<p>The laser-field can be set with option <tt><span class=\"pre\">--vecpot</span> path</tt>. The file should be</p>\n<ol>\n<li><p>a two-column file where the first column is time and second the\ntime-dependent part of the vector potential, or</p>\n</li>\n<li><p>a multi-pulse configuration defining the time-dependent part of the vector\npotential with each wavelength channel defined as:</p>\n<pre>[Pulse1]\nA = 0.1\nw = 0.0569\nk = 0\ntcenter = 0\ncep = 0.05\nfwhm = 150\n</pre>\n<p>Here <tt>A</tt> is the electric field peak amplitude, <tt>w</tt> the carrier\nfrequency, <tt>k</tt> the chirp, <tt>tcenter</tt> the time of envelope maximum,\n<tt>cep</tt> the carrier envelope phase, and <tt>fwhm</tt> the full with at half\nmaximum for the envelope.</p>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"step-4-post-processing\">\n<h3>Step 4. Post-processing</h3>\n<p><tt><span class=\"pre\">--save</span></tt> option for the post-processing scripts saves the figures to\n<tt>data/figures</tt> and data to <tt>data/postprocessing</tt>.</p>\n<div id=\"animate-density\">\n<h4><tt>animate_density</tt></h4>\n<p>This script reads data from <tt>data/tdse_wavefunction/</tt> and animates\nthe electron density. This script needs FEniCS (<tt>ml petsc/real</tt>\nwhen using Docker).</p>\n</div>\n<div id=\"draw-norm\">\n<h4><tt>draw_norm</tt></h4>\n<p>For drawing the norm as a function of time.</p>\n</div>\n<div id=\"draw-dipole-draw-velocity-draw-acceleration\">\n<h4><tt>draw_dipole</tt> / <tt>draw_velocity</tt> / <tt>draw_acceleration</tt></h4>\n<p>Draws the dipole moment/dipole velocity/dipole acceleration\nas a function of time, the corresponding spectrum,\nand stft of the spectrum.</p>\n</div>\n<div id=\"draw-pes\">\n<h4><tt>draw_pes</tt></h4>\n<p>Draws the angle-integrated and angle-resolved photoelectron spectra. Can use\nMPI to speed up computation of the spectra.</p>\n</div>\n</div>\n<div id=\"petsc-and-slepc-options\">\n<h3>PETSc and SLEPc options</h3>\n<p>PETSc and SLEPc have numerous options to fine-tune their operation. All\narguments passed to scripts after <tt>PETSC_ARGS</tt> are used to initialize the\nPETSc options database and the arguments before that remain in sys.argv and are\nused by the argumentparser of FIEND.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"using-docker\">\n<h3>Using Docker</h3>\n<p>We recommend using Docker images for running simulations on your personal\ncomputer. For supercomputers and clusters, we recommend either installing\nthe entire package from source or with <tt>pip</tt>.</p>\n<p>To use the prepared Docker image, first install <cite>Docker\n&lt;https://www.docker.com&gt;_</cite> to your PC. The docker image for\n<cite>fiend &lt;https://hub.docker.com/r/solanpaa/fiend&gt;_</cite> can fetched with the\ncommand <tt>docker pull solanpaa/fiend</tt>. Please note that the image is a few GB in size.</p>\n<p>By default, running the docker image for interactive process,</p>\n<blockquote>\n<tt>docker run <span class=\"pre\">-it</span> fiend</tt></blockquote>\n<p>drops you in a Unix shell. All the scripts are pre-installed,\nand you can switch between the complex and\nreal PETSc installations with commands <tt>ml petsc/real</tt> and\n<tt>ml petsc/complex</tt>.</p>\n<p>To enable GUIs for the scripts, you should launch the docker container with\nthe commands executed on the HOST machine (works on Linux)</p>\n<p><tt>$ xhost +local:docker</tt></p>\n<p><tt>$ docker run <span class=\"pre\">-e</span> <span class=\"pre\">DISPLAY=$DISPLAY</span> <span class=\"pre\">-v</span> <span class=\"pre\">/tmp/.X11-unix:/tmp/.X11-unix:ro</span> <span class=\"pre\">-it</span> fiend</tt></p>\n<p>As you probably wish to save the datafiles computed within the container, you\nshould create a directory <tt>data</tt> on your HOST and mount it to the container\nwith</p>\n<p><tt>$ docker run <span class=\"pre\">-e</span> <span class=\"pre\">DISPLAY=$DISPLAY</span> <span class=\"pre\">-v</span> <span class=\"pre\">/tmp/.X11-unix:/tmp/.X11-unix:ro</span> <span class=\"pre\">-v</span>\n<span class=\"pre\">`pwd`/data:/home/fiend/data:Z</span> <span class=\"pre\">-it</span> fiend</tt></p>\n<p>This also allows you to provide the laser parameters by saving it to a file\nwithin <tt>data</tt> on the HOST and passing the argument <tt><span class=\"pre\">--vecpot</span> data/filename</tt>\nto <tt>docker run fiend fiend_linpol_propagate</tt>.</p>\n<p>For non-interactive use, you can pass the above command arguments corresponding\nto the script you would like to execute together with its arguments, e.g.,</p>\n<p><tt>$ docker run <span class=\"pre\">-e</span> <span class=\"pre\">DISPLAY=$DISPLAY</span> <span class=\"pre\">-v</span> <span class=\"pre\">/tmp/.X11-unix:/tmp/.X11-unix:ro</span> <span class=\"pre\">-v</span>\n<span class=\"pre\">`pwd`/data:/home/fiend/data:Z</span> fiend fiend_linpol_tise <span class=\"pre\">--radius</span> 10 <span class=\"pre\">--how_many</span> 3</tt></p>\n<p>Parallelization of the linear algebra backend can be achieved with the flag\n<tt><span class=\"pre\">-e</span> OPENBLAS_NUM_THREADS N</tt> of <tt>docker run</tt>. MPI-parallelized simulations\ncan be achieved with the environment variable <tt>NMPIPROC</tt>, e.g.,</p>\n<p><tt>$ docker run <span class=\"pre\">-e</span> NMPIPROC=3 <span class=\"pre\">-e</span> <span class=\"pre\">DISPLAY=$DISPLAY</span> <span class=\"pre\">-v</span> <span class=\"pre\">/tmp/.X11-unix:/tmp/.X11-unix:ro</span> <span class=\"pre\">-v</span>\n<span class=\"pre\">`pwd`/data:/home/fiend/data:Z</span> fiend fiend_linpol_tise <span class=\"pre\">--radius</span> 10 <span class=\"pre\">--how_many</span> 3</tt></p>\n</div>\n<div id=\"installation-with-pip\">\n<h3>Installation with pip</h3>\n<p><tt>pip3 install fiend</tt> should do the trick. Note that you have to manually install\nreal and complex PETSc, SLEPc, petsc4py, slepc4py, and FEniCS suite.</p>\n</div>\n<div id=\"installation-from-sources\">\n<h3>Installation from sources</h3>\n<p>The <tt>fiend</tt> package is hosted at <cite>GitLab &lt;https://gitlab.com/qcad.fi/fiend&gt;_</cite>.</p>\n<p><tt>python3 setup.py install</tt> should install the package. Note that you have to\nmanually install real and complex PETSc, SLEPc, petsc4py, slepc4py, and FEniCS\nsuite.</p>\n</div>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Janne Solanp\u00e4\u00e4</p>\n</div>\n\n          </div>"}, "last_serial": 4608129, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "146bbf7dfbf183dc69d63f753df45e7e", "sha256": "eabf05e480a36e9cdb713aff6bac42fd9bf1eb1802398be2838690fd1455d6d6"}, "downloads": -1, "filename": "fiend-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "146bbf7dfbf183dc69d63f753df45e7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 97386, "upload_time": "2018-12-14T13:30:23", "upload_time_iso_8601": "2018-12-14T13:30:23.562098Z", "url": "https://files.pythonhosted.org/packages/91/34/ec552cf9a3287f2c29ccc95388aaf1bf85f4f2c82edfc40c673c77282cb4/fiend-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c310f62aaed564d6f8ccb7b1c73a7de3", "sha256": "8d8059ed7be81c1d7a012e70120ea07225081cfefa60518bdd7bbe97d82e7138"}, "downloads": -1, "filename": "fiend-1.0.1.tar.gz", "has_sig": false, "md5_digest": "c310f62aaed564d6f8ccb7b1c73a7de3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72221, "upload_time": "2018-12-14T13:30:25", "upload_time_iso_8601": "2018-12-14T13:30:25.312343Z", "url": "https://files.pythonhosted.org/packages/c5/a8/a6592b9c42e1d2cc536829a9b8f288c46b734150a726bd570be04a620578/fiend-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e5234ae4744bda880183e0a7539e2f5b", "sha256": "f2c21ca8d3a18c364f9a7ba9f8ce2c720616a386346351b820f4c438b83c9b22"}, "downloads": -1, "filename": "fiend-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e5234ae4744bda880183e0a7539e2f5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 97379, "upload_time": "2018-12-14T13:54:50", "upload_time_iso_8601": "2018-12-14T13:54:50.240125Z", "url": "https://files.pythonhosted.org/packages/49/77/4d721633aa223e7b78edba8c4182b14a902daee5378107ec723b7ddc9feb/fiend-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac21c47fec6f5e489b259880b73dc1e8", "sha256": "36f66af6ac6fec7d45851ae470bcd56b97fa70ab5345eb56a9866a3458d91621"}, "downloads": -1, "filename": "fiend-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ac21c47fec6f5e489b259880b73dc1e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 72192, "upload_time": "2018-12-14T13:54:53", "upload_time_iso_8601": "2018-12-14T13:54:53.089103Z", "url": "https://files.pythonhosted.org/packages/a1/67/d3e20509179225ef2dd2ac34521bb8b210e5d417526af4b38eb1f19dfbc8/fiend-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "3759f787ecdd46cb5fde3b8f15226088", "sha256": "7dbeb2ae59e32afa1a82d59f0eab1c49a1ec96f230d1cc8e38e878ecd4641fc1"}, "downloads": -1, "filename": "fiend-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3759f787ecdd46cb5fde3b8f15226088", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 98372, "upload_time": "2018-12-17T13:55:43", "upload_time_iso_8601": "2018-12-17T13:55:43.048894Z", "url": "https://files.pythonhosted.org/packages/a4/dd/16b112ee216dfd335262bf3fbe70649635265ad27263489ff9f7f57b072e/fiend-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "423ab55518815b3442e366ba29893498", "sha256": "aac475200793398a0c04d01467f368f986004e806a65f1751657a5df6d35c1e9"}, "downloads": -1, "filename": "fiend-1.0.3.tar.gz", "has_sig": false, "md5_digest": "423ab55518815b3442e366ba29893498", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 74532, "upload_time": "2018-12-17T13:55:45", "upload_time_iso_8601": "2018-12-17T13:55:45.200261Z", "url": "https://files.pythonhosted.org/packages/3f/65/0849829a0095b94df5e1fa0d5f32bf2d02b269929a9e9ddcd2e71f455f6c/fiend-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3759f787ecdd46cb5fde3b8f15226088", "sha256": "7dbeb2ae59e32afa1a82d59f0eab1c49a1ec96f230d1cc8e38e878ecd4641fc1"}, "downloads": -1, "filename": "fiend-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3759f787ecdd46cb5fde3b8f15226088", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 98372, "upload_time": "2018-12-17T13:55:43", "upload_time_iso_8601": "2018-12-17T13:55:43.048894Z", "url": "https://files.pythonhosted.org/packages/a4/dd/16b112ee216dfd335262bf3fbe70649635265ad27263489ff9f7f57b072e/fiend-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "423ab55518815b3442e366ba29893498", "sha256": "aac475200793398a0c04d01467f368f986004e806a65f1751657a5df6d35c1e9"}, "downloads": -1, "filename": "fiend-1.0.3.tar.gz", "has_sig": false, "md5_digest": "423ab55518815b3442e366ba29893498", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 74532, "upload_time": "2018-12-17T13:55:45", "upload_time_iso_8601": "2018-12-17T13:55:45.200261Z", "url": "https://files.pythonhosted.org/packages/3f/65/0849829a0095b94df5e1fa0d5f32bf2d02b269929a9e9ddcd2e71f455f6c/fiend-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:40 2020"}