{"info": {"author": "Dan Parker", "author_email": "dan.m.parker0@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# nflsim\n\nThis package simulates the NFL regular season and playoffs using a simple, customizable Monte Carlo method.\n\n### Installation\n\nThe package is on [PyPI] and can be installed with pip:\n\n```\npip install nflsim\n```\n\n### How it works\n\nDuring each simulation, nflsim uses the methods described below to assign a winner to all remaining NFL games in a given season. It then uses the NFL's complex [tiebreaking procedures] to determine playoff seeding, and the playoffs are simulated game-by-game.\n\nBefore beginning the simulations, each team is assigned a power rating (PWR) with mean 0, such that a team with a PWR of 3 would be favored by 5 points vs a team with a PWR of -2 on a neutral field. By default, the base power rankings for each team are calculated using an equally-weighted combination of normalized versions of the [SRS], [FPI], [DVOA], and [Sagarin] rankings. The rankings systems used and their relative weights are configurable, and custom ranking systems are supported. The individual rating systems and the combined rankings can be regressed to the mean (or to custom team-specific values) as desired.\n\nThe team PWR rankings are adjusted at the beginning of each season simulation by a random amount, determined using a normal distribution with mean 0 and a user-provided standard deviation (2 points by default):\n```\nadjusted_pwr = [PWR] - numpy.random.normal(0, [rank_adj])\n```\n    \nThis adjustment represents the uncertainty in each team's base PWR projection, which includes both model error and injury risk. Higher values equate to more variance in outcomes.\n\nWhen simulating a game, the home team's PWR is adjusted upwards by a fixed amount and compared to the away team's PWR. The resulting point differential is used to generate a normal cumulative distribution function, which determines the home team's probability of winning the game. This win probability is compared to a random number to determine the simulated winner of the game:\n```\nhome_pwr_difference = ([Home PWR] + [Home Adj]) - [Away PWR]\nhome_win_probability = 1 - scipy.stats.norm(home_pwr_difference, [stdev]).cdf(0)\nis_home_winner = numpy.random.random() < home_win_probability\n```\n\nBoth the home adjustment ([3 points by default]) and the standard deviation used to generate the normal distribution ([13 points by default]) are configurable.\n\n### Usage\n\n##### Basics\n\nEach simulation is controlled by a Simulate object. You create an object by specifying the season to simulate and the number of simulations:\n```python\nimport nflsim as nfl\nsimulation = nfl.Simulate(season=2018, n_sims=10000)\n```\n    \nIf desired, you can customize the values for home-field advantage, the PWR rank adjustment used at the beginning of each simulation, and the standard deviation used when simulating individual games:\n```python\nsimulation = nfl.Simulate(season=2018, n_sims=10000, rank_adj=3, home_adj=2.5, st_dev=13.5)\n```    \n##### PWRsystems\n    \nYou can customize how the power rankings are generated by creating a PWRsystems object. You create an object by indicating which systems to include:\n```python\nsystems = nfl.PWRsystems(dvoa=True, fpi=True, sagarin=True)\nsimulation = nfl.Simulate(season=2018, n_sims=10000, pwr_systems=systems)\n```\n\nThe weights for each system (default = 1) can be specified using the built-in objects for each system (SRS, DVOA, FPI, and Sagarin):\n```python\nsystems = nfl.PWRsystems(srs=True, dvoa=nfl.DVOA(weight=2), fpi=nfl.FPI(weight=1.5))\n```\n\nYou can also incorporate your own rating system by creating a generic PWR object and passing it a pandas DataFrame containing the custom rankings. The DataFrame must include one column called 'Team' containing the full team names and another column containing the team rankings. The name of the ranking column should be unique from those of the other systems being used (so don't use \"FPI\" or \"SRS\"):\n```python\nmy_sys_df = pandas.DataFrame([{'Team':'A','Power':-2},{'Team':'B','Power':5}])\nmy_sys = nfl.PWR(weight=2, values=my_sys_df)\nsystems = nfl.PWRsystems(srs=True, others=my_sys)\n```\n\nTo use multiple custom systems, pass a list of DataFrames instead of a single DataFrame:\n```python\ndf1 = pandas.DataFrame([{'Team':'A','Power':-2},{'Team':'B','Power':5}])\ndf2 = pandas.DataFrame([{'Team':'A','Power':0},{'Team':'B','Power':2}])\nmy_sys_1 = nfl.PWR(weight=2, values=df1)\nmy_sys_2 = nfl.PWR(weight=1.5, values=df2)\nsystems = nfl.PWRsystems(srs=True, others=[my_sys_1, my_sys_2])\n```\n\n##### Regression\n\nOptionally, you can choose to regress the ratings generated by each system by creating a Regression object (if regress_to is omitted, no regression will be used). By default, PWR values will be regressed to the sample mean:\n```python\nmy_sys = nfl.SRS(weight=2, regress_to=nfl.Regression())\n```\n\nYou can use fixed weighting by specifying a decimal between 0 and 1, or variable weighting based on the percentage of a specified number of games played (the default option):\n```python\n#(PWR * 0.75) + (sample_mean * 0.25)\nregression_fixed = nfl.Regression(weight=0.25)\n#((PWR * games_played) + (sample_mean * max(0, 10 - games_played))) / max(10, games_played)\nregression_variable = nfl.Regression(n_games=10)\n```\n    \nYou can regress PWR to a fixed value rather than using the sample mean:\n```python\nregression = nfl.Regression(to=0, weight=0.5)\n```\n    \nYou can also specify a custom regression value for each team using a pandas DataFrame. The DataFrame must contain one column called 'Team' containing the full team names and another called 'Baseline' for the regression values:\n```python\ndf = pd.DataFrame([{'Team':'A','Baseline':-2},{'Team':'B','Baseline':5}])\nregression = nfl.Regression(to=df, n_games=16)\n```\n    \nIn addition to (or instead of) regressing the values for individual PWR systems, you can choose to regress the final results after combining the various systems:\n```python\nregression = nfl.Regression(n_games=10)\nsystems = nfl.PWRsystems(regress_to=regression, srs=True, dvoa=nfl.DVOA(weight=2))\n```\n\n##### Execution and Analysis\n\nOnce you've set up your Simulate object, use run() to execute the simulation.\n```python\nregression = nfl.Regression(n_games=10)\nsystems = nfl.PWRsystems(srs=nfl.SRS(regress_to=regression), fpi=True, dvoa=nfl.DVOA(weight=2))\nsimulation = nfl.Simulate(season=2018, n_sims=10000, pwr_systems=systems)\nsimulation.run()\n```\n    \nThe run() method will return a reference to the Simulate object, so this syntax is also acceptable:\n```python\nsimulation = nfl.Simulate(season=2018, n_sims=10000, pwr_systems=systems).run()\n```\n\nBy default, run() will use the joblib package to run the simulations in parallel; this can be overridden by setting parallel=False:\n```python\nsimulation = nfl.Simulate(season=2018, n_sims=100).run(parallel=False)\n```\n    \nOnce the simulation has executed, the results are aggregated and stored in several related dataframes. These can either be directly accessed using the simulations property:\n```python\nstandings = sim.simulations.standings\nregularseason = sim.simulations.regularseason\nseeding = sim.simulations.seeding\nplayoffs = sim.simulations.playoffs\n```\n\nOr returned as copies using class methods:\n```python\nstandings = sim.standings()\nregularseason = sim.regularseason()\nseeding = sim.seeding()\nplayoffs = sim.playoffs()\n```\n\nBy default, all of the aggregated dataframes use MultiIndexes incorporating the simulation number and the within-simulation row number. The class methods include an option to extract the \"Simulation\" portion of the MultiIndex into its own column:\n```python\nstandings_reindexed = sim.standings(reindex=True)\n```\n\nYou can also entirely disable the generation of aggregated statistics, in which case the results are stored as a list of Simulation objects:\n```python\nsim = nfl.Simulate(season=2018, n_sims=100000).run(combine=False)\nfor simulation in sim.simulations.values:\n    rankings = simulation.rankings\n    standings = simulation.standings\n    regularseason = simulation.regularseason\n    seeding = simulation.seeding\n    playoffs = simulation.playoffs\n```\n\n[//]: #\n   [PyPI]: <https://pypi.org/project/nflsim/>\n   [SRS]: <https://www.sports-reference.com/blog/2015/03/srs-calculation-details/>\n   [FPI]: <http://www.espn.com/blog/statsinfo/post/_/id/123048/a-guide-to-nfl-fpi/>\n   [DVOA]: <https://www.footballoutsiders.com/info/methods#DVOA>\n   [Sagarin]: <https://www.usatoday.com/sports/nfl/sagarin/2018/rating/>\n   [tiebreaking procedures]: <https://operations.nfl.com/the-rules/nfl-tiebreaking-procedures/>\n   [3 points by default]: <http://www.espn.com/nfl/story/_/id/20371914/home-field-advantage-nfl-2017-toughest-easiest-teams-play-road-more>\n   [13 points by default]: <https://www.pro-football-reference.com/about/win_prob.htm>", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/dmparker0/nflsim/archive/v1.1.7.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dmparker0/nflsim/", "keywords": "NFL,football,sports,simulation,statistics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nflsim", "package_url": "https://pypi.org/project/nflsim/", "platform": "", "project_url": "https://pypi.org/project/nflsim/", "project_urls": {"Download": "https://github.com/dmparker0/nflsim/archive/v1.1.7.tar.gz", "Homepage": "https://github.com/dmparker0/nflsim/"}, "release_url": "https://pypi.org/project/nflsim/1.1.7/", "requires_dist": null, "requires_python": "", "summary": "A tool for simulating the NFL regular season and playoffs", "version": "1.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>nflsim</h1>\n<p>This package simulates the NFL regular season and playoffs using a simple, customizable Monte Carlo method.</p>\n<h3>Installation</h3>\n<p>The package is on <a href=\"https://pypi.org/project/nflsim/\" rel=\"nofollow\">PyPI</a> and can be installed with pip:</p>\n<pre><code>pip install nflsim\n</code></pre>\n<h3>How it works</h3>\n<p>During each simulation, nflsim uses the methods described below to assign a winner to all remaining NFL games in a given season. It then uses the NFL's complex <a href=\"https://operations.nfl.com/the-rules/nfl-tiebreaking-procedures/\" rel=\"nofollow\">tiebreaking procedures</a> to determine playoff seeding, and the playoffs are simulated game-by-game.</p>\n<p>Before beginning the simulations, each team is assigned a power rating (PWR) with mean 0, such that a team with a PWR of 3 would be favored by 5 points vs a team with a PWR of -2 on a neutral field. By default, the base power rankings for each team are calculated using an equally-weighted combination of normalized versions of the <a href=\"https://www.sports-reference.com/blog/2015/03/srs-calculation-details/\" rel=\"nofollow\">SRS</a>, <a href=\"http://www.espn.com/blog/statsinfo/post/_/id/123048/a-guide-to-nfl-fpi/\" rel=\"nofollow\">FPI</a>, <a href=\"https://www.footballoutsiders.com/info/methods#DVOA\" rel=\"nofollow\">DVOA</a>, and <a href=\"https://www.usatoday.com/sports/nfl/sagarin/2018/rating/\" rel=\"nofollow\">Sagarin</a> rankings. The rankings systems used and their relative weights are configurable, and custom ranking systems are supported. The individual rating systems and the combined rankings can be regressed to the mean (or to custom team-specific values) as desired.</p>\n<p>The team PWR rankings are adjusted at the beginning of each season simulation by a random amount, determined using a normal distribution with mean 0 and a user-provided standard deviation (2 points by default):</p>\n<pre><code>adjusted_pwr = [PWR] - numpy.random.normal(0, [rank_adj])\n</code></pre>\n<p>This adjustment represents the uncertainty in each team's base PWR projection, which includes both model error and injury risk. Higher values equate to more variance in outcomes.</p>\n<p>When simulating a game, the home team's PWR is adjusted upwards by a fixed amount and compared to the away team's PWR. The resulting point differential is used to generate a normal cumulative distribution function, which determines the home team's probability of winning the game. This win probability is compared to a random number to determine the simulated winner of the game:</p>\n<pre><code>home_pwr_difference = ([Home PWR] + [Home Adj]) - [Away PWR]\nhome_win_probability = 1 - scipy.stats.norm(home_pwr_difference, [stdev]).cdf(0)\nis_home_winner = numpy.random.random() &lt; home_win_probability\n</code></pre>\n<p>Both the home adjustment (<a href=\"http://www.espn.com/nfl/story/_/id/20371914/home-field-advantage-nfl-2017-toughest-easiest-teams-play-road-more\" rel=\"nofollow\">3 points by default</a>) and the standard deviation used to generate the normal distribution (<a href=\"https://www.pro-football-reference.com/about/win_prob.htm\" rel=\"nofollow\">13 points by default</a>) are configurable.</p>\n<h3>Usage</h3>\n<h5>Basics</h5>\n<p>Each simulation is controlled by a Simulate object. You create an object by specifying the season to simulate and the number of simulations:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nflsim</span> <span class=\"k\">as</span> <span class=\"nn\">nfl</span>\n<span class=\"n\">simulation</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Simulate</span><span class=\"p\">(</span><span class=\"n\">season</span><span class=\"o\">=</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"n\">n_sims</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n</pre>\n<p>If desired, you can customize the values for home-field advantage, the PWR rank adjustment used at the beginning of each simulation, and the standard deviation used when simulating individual games:</p>\n<pre><span class=\"n\">simulation</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Simulate</span><span class=\"p\">(</span><span class=\"n\">season</span><span class=\"o\">=</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"n\">n_sims</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">rank_adj</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">home_adj</span><span class=\"o\">=</span><span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"n\">st_dev</span><span class=\"o\">=</span><span class=\"mf\">13.5</span><span class=\"p\">)</span>\n</pre>\n<h5>PWRsystems</h5>\n<p>You can customize how the power rankings are generated by creating a PWRsystems object. You create an object by indicating which systems to include:</p>\n<pre><span class=\"n\">systems</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWRsystems</span><span class=\"p\">(</span><span class=\"n\">dvoa</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fpi</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">sagarin</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">simulation</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Simulate</span><span class=\"p\">(</span><span class=\"n\">season</span><span class=\"o\">=</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"n\">n_sims</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">pwr_systems</span><span class=\"o\">=</span><span class=\"n\">systems</span><span class=\"p\">)</span>\n</pre>\n<p>The weights for each system (default = 1) can be specified using the built-in objects for each system (SRS, DVOA, FPI, and Sagarin):</p>\n<pre><span class=\"n\">systems</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWRsystems</span><span class=\"p\">(</span><span class=\"n\">srs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dvoa</span><span class=\"o\">=</span><span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">DVOA</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">fpi</span><span class=\"o\">=</span><span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">FPI</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">))</span>\n</pre>\n<p>You can also incorporate your own rating system by creating a generic PWR object and passing it a pandas DataFrame containing the custom rankings. The DataFrame must include one column called 'Team' containing the full team names and another column containing the team rankings. The name of the ranking column should be unique from those of the other systems being used (so don't use \"FPI\" or \"SRS\"):</p>\n<pre><span class=\"n\">my_sys_df</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span><span class=\"s1\">'A'</span><span class=\"p\">,</span><span class=\"s1\">'Power'</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">},{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span><span class=\"s1\">'B'</span><span class=\"p\">,</span><span class=\"s1\">'Power'</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}])</span>\n<span class=\"n\">my_sys</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWR</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">my_sys_df</span><span class=\"p\">)</span>\n<span class=\"n\">systems</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWRsystems</span><span class=\"p\">(</span><span class=\"n\">srs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">others</span><span class=\"o\">=</span><span class=\"n\">my_sys</span><span class=\"p\">)</span>\n</pre>\n<p>To use multiple custom systems, pass a list of DataFrames instead of a single DataFrame:</p>\n<pre><span class=\"n\">df1</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span><span class=\"s1\">'A'</span><span class=\"p\">,</span><span class=\"s1\">'Power'</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">},{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span><span class=\"s1\">'B'</span><span class=\"p\">,</span><span class=\"s1\">'Power'</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}])</span>\n<span class=\"n\">df2</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span><span class=\"s1\">'A'</span><span class=\"p\">,</span><span class=\"s1\">'Power'</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span><span class=\"s1\">'B'</span><span class=\"p\">,</span><span class=\"s1\">'Power'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}])</span>\n<span class=\"n\">my_sys_1</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWR</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">df1</span><span class=\"p\">)</span>\n<span class=\"n\">my_sys_2</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWR</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">df2</span><span class=\"p\">)</span>\n<span class=\"n\">systems</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWRsystems</span><span class=\"p\">(</span><span class=\"n\">srs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">others</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">my_sys_1</span><span class=\"p\">,</span> <span class=\"n\">my_sys_2</span><span class=\"p\">])</span>\n</pre>\n<h5>Regression</h5>\n<p>Optionally, you can choose to regress the ratings generated by each system by creating a Regression object (if regress_to is omitted, no regression will be used). By default, PWR values will be regressed to the sample mean:</p>\n<pre><span class=\"n\">my_sys</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">SRS</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">regress_to</span><span class=\"o\">=</span><span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Regression</span><span class=\"p\">())</span>\n</pre>\n<p>You can use fixed weighting by specifying a decimal between 0 and 1, or variable weighting based on the percentage of a specified number of games played (the default option):</p>\n<pre><span class=\"c1\">#(PWR * 0.75) + (sample_mean * 0.25)</span>\n<span class=\"n\">regression_fixed</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Regression</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mf\">0.25</span><span class=\"p\">)</span>\n<span class=\"c1\">#((PWR * games_played) + (sample_mean * max(0, 10 - games_played))) / max(10, games_played)</span>\n<span class=\"n\">regression_variable</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Regression</span><span class=\"p\">(</span><span class=\"n\">n_games</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>You can regress PWR to a fixed value rather than using the sample mean:</p>\n<pre><span class=\"n\">regression</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Regression</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n</pre>\n<p>You can also specify a custom regression value for each team using a pandas DataFrame. The DataFrame must contain one column called 'Team' containing the full team names and another called 'Baseline' for the regression values:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">([{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span><span class=\"s1\">'A'</span><span class=\"p\">,</span><span class=\"s1\">'Baseline'</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">},{</span><span class=\"s1\">'Team'</span><span class=\"p\">:</span><span class=\"s1\">'B'</span><span class=\"p\">,</span><span class=\"s1\">'Baseline'</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">}])</span>\n<span class=\"n\">regression</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Regression</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">n_games</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n</pre>\n<p>In addition to (or instead of) regressing the values for individual PWR systems, you can choose to regress the final results after combining the various systems:</p>\n<pre><span class=\"n\">regression</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Regression</span><span class=\"p\">(</span><span class=\"n\">n_games</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">systems</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWRsystems</span><span class=\"p\">(</span><span class=\"n\">regress_to</span><span class=\"o\">=</span><span class=\"n\">regression</span><span class=\"p\">,</span> <span class=\"n\">srs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dvoa</span><span class=\"o\">=</span><span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">DVOA</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre>\n<h5>Execution and Analysis</h5>\n<p>Once you've set up your Simulate object, use run() to execute the simulation.</p>\n<pre><span class=\"n\">regression</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Regression</span><span class=\"p\">(</span><span class=\"n\">n_games</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">systems</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">PWRsystems</span><span class=\"p\">(</span><span class=\"n\">srs</span><span class=\"o\">=</span><span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">SRS</span><span class=\"p\">(</span><span class=\"n\">regress_to</span><span class=\"o\">=</span><span class=\"n\">regression</span><span class=\"p\">),</span> <span class=\"n\">fpi</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dvoa</span><span class=\"o\">=</span><span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">DVOA</span><span class=\"p\">(</span><span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">simulation</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Simulate</span><span class=\"p\">(</span><span class=\"n\">season</span><span class=\"o\">=</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"n\">n_sims</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">pwr_systems</span><span class=\"o\">=</span><span class=\"n\">systems</span><span class=\"p\">)</span>\n<span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>The run() method will return a reference to the Simulate object, so this syntax is also acceptable:</p>\n<pre><span class=\"n\">simulation</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Simulate</span><span class=\"p\">(</span><span class=\"n\">season</span><span class=\"o\">=</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"n\">n_sims</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"n\">pwr_systems</span><span class=\"o\">=</span><span class=\"n\">systems</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>By default, run() will use the joblib package to run the simulations in parallel; this can be overridden by setting parallel=False:</p>\n<pre><span class=\"n\">simulation</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Simulate</span><span class=\"p\">(</span><span class=\"n\">season</span><span class=\"o\">=</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"n\">n_sims</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Once the simulation has executed, the results are aggregated and stored in several related dataframes. These can either be directly accessed using the simulations property:</p>\n<pre><span class=\"n\">standings</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">simulations</span><span class=\"o\">.</span><span class=\"n\">standings</span>\n<span class=\"n\">regularseason</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">simulations</span><span class=\"o\">.</span><span class=\"n\">regularseason</span>\n<span class=\"n\">seeding</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">simulations</span><span class=\"o\">.</span><span class=\"n\">seeding</span>\n<span class=\"n\">playoffs</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">simulations</span><span class=\"o\">.</span><span class=\"n\">playoffs</span>\n</pre>\n<p>Or returned as copies using class methods:</p>\n<pre><span class=\"n\">standings</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">standings</span><span class=\"p\">()</span>\n<span class=\"n\">regularseason</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">regularseason</span><span class=\"p\">()</span>\n<span class=\"n\">seeding</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">seeding</span><span class=\"p\">()</span>\n<span class=\"n\">playoffs</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">playoffs</span><span class=\"p\">()</span>\n</pre>\n<p>By default, all of the aggregated dataframes use MultiIndexes incorporating the simulation number and the within-simulation row number. The class methods include an option to extract the \"Simulation\" portion of the MultiIndex into its own column:</p>\n<pre><span class=\"n\">standings_reindexed</span> <span class=\"o\">=</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">standings</span><span class=\"p\">(</span><span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can also entirely disable the generation of aggregated statistics, in which case the results are stored as a list of Simulation objects:</p>\n<pre><span class=\"n\">sim</span> <span class=\"o\">=</span> <span class=\"n\">nfl</span><span class=\"o\">.</span><span class=\"n\">Simulate</span><span class=\"p\">(</span><span class=\"n\">season</span><span class=\"o\">=</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"n\">n_sims</span><span class=\"o\">=</span><span class=\"mi\">100000</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">combine</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">simulation</span> <span class=\"ow\">in</span> <span class=\"n\">sim</span><span class=\"o\">.</span><span class=\"n\">simulations</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">:</span>\n    <span class=\"n\">rankings</span> <span class=\"o\">=</span> <span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">rankings</span>\n    <span class=\"n\">standings</span> <span class=\"o\">=</span> <span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">standings</span>\n    <span class=\"n\">regularseason</span> <span class=\"o\">=</span> <span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">regularseason</span>\n    <span class=\"n\">seeding</span> <span class=\"o\">=</span> <span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">seeding</span>\n    <span class=\"n\">playoffs</span> <span class=\"o\">=</span> <span class=\"n\">simulation</span><span class=\"o\">.</span><span class=\"n\">playoffs</span>\n</pre>\n\n          </div>"}, "last_serial": 6313254, "releases": {"0.0": [{"comment_text": "", "digests": {"md5": "85a9f7b5d744bc65f98c29b85309d7fb", "sha256": "8c356c573f8d6016e8b5d2b1fb242ed1aa10fa65d2e1ee20b0dc389dba8deb84"}, "downloads": -1, "filename": "nflsim-0.0.tar.gz", "has_sig": false, "md5_digest": "85a9f7b5d744bc65f98c29b85309d7fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11948, "upload_time": "2018-10-23T21:34:19", "upload_time_iso_8601": "2018-10-23T21:34:19.487106Z", "url": "https://files.pythonhosted.org/packages/52/b9/6c959afe245f8cc418d326d60efc5670ba87499c5f3cb3166b6d7b8a0b69/nflsim-0.0.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "098b0e580ef212e5f0e82463b0a10fbc", "sha256": "e7fc3248e5fc00d81cdab4242b8d7d31b9a3c484bb42b8c4d2e07f8e71fb178a"}, "downloads": -1, "filename": "nflsim-1.0.tar.gz", "has_sig": false, "md5_digest": "098b0e580ef212e5f0e82463b0a10fbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12009, "upload_time": "2018-10-24T18:41:20", "upload_time_iso_8601": "2018-10-24T18:41:20.072100Z", "url": "https://files.pythonhosted.org/packages/72/cd/1a08af555eb1d4081465ada927d8779ba06a6cd47163410f3df9f2330038/nflsim-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "12acafe70cc2bafe73f80f5068be1291", "sha256": "193d75eecb1345aab79b83e4097322204b6eb9e94aecb35bed8e0b07aa853736"}, "downloads": -1, "filename": "nflsim-1.1.tar.gz", "has_sig": false, "md5_digest": "12acafe70cc2bafe73f80f5068be1291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13281, "upload_time": "2018-10-30T20:50:42", "upload_time_iso_8601": "2018-10-30T20:50:42.463128Z", "url": "https://files.pythonhosted.org/packages/ec/9f/5a141ea597a5ce59cfdcf5e46125ee5cbebcba0b963781829ceac58fc2cc/nflsim-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "7a231c6ead7e2f9547ce3b0f433b2283", "sha256": "cf6a692b1fc4eb9878f556e420b8197bd9ed5ea32cd4cad6b840af7fd0649670"}, "downloads": -1, "filename": "nflsim-1.1.1.tar.gz", "has_sig": false, "md5_digest": "7a231c6ead7e2f9547ce3b0f433b2283", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13157, "upload_time": "2018-10-31T16:42:11", "upload_time_iso_8601": "2018-10-31T16:42:11.429591Z", "url": "https://files.pythonhosted.org/packages/58/0f/14da3fc71dea66efe47c82be0f00cfca8571ac36ecd666cd7c258cdf45f9/nflsim-1.1.1.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "35e695f72a3b54a2da6c0799da7a591a", "sha256": "ab4639ffce22b913a93da4e0512c1a6c7008fbd9b534399025c94fffc7db4089"}, "downloads": -1, "filename": "nflsim-1.1.3.tar.gz", "has_sig": false, "md5_digest": "35e695f72a3b54a2da6c0799da7a591a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13158, "upload_time": "2019-11-08T20:05:16", "upload_time_iso_8601": "2019-11-08T20:05:16.824425Z", "url": "https://files.pythonhosted.org/packages/e5/87/db50ffa131966c53a7f23935afe4e3be7a833f62b7d046a84b83bef63011/nflsim-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "4ad33b161176e1939526b76813063171", "sha256": "f5374072ace7314c053a724e8935f51149b2d7ff00dab106a85ccc28c716652e"}, "downloads": -1, "filename": "nflsim-1.1.4.tar.gz", "has_sig": false, "md5_digest": "4ad33b161176e1939526b76813063171", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13173, "upload_time": "2019-11-08T20:19:25", "upload_time_iso_8601": "2019-11-08T20:19:25.602386Z", "url": "https://files.pythonhosted.org/packages/5a/e4/e223235ae153859d59c5ba0028567c5417d1c8185b0080bbf1796316728a/nflsim-1.1.4.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "e16e98708021367580d3c459e3985716", "sha256": "9011988074194755f9a708dff81068cd53e0250097faea9776ef96e098dc945c"}, "downloads": -1, "filename": "nflsim-1.1.6.tar.gz", "has_sig": false, "md5_digest": "e16e98708021367580d3c459e3985716", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13199, "upload_time": "2019-12-16T19:54:32", "upload_time_iso_8601": "2019-12-16T19:54:32.507872Z", "url": "https://files.pythonhosted.org/packages/e4/44/67ff39b8ac121c29f4a17a2397cb8bdae93c0b67f4bfeb934fd9e3aa2291/nflsim-1.1.6.tar.gz", "yanked": false}], "1.1.7": [{"comment_text": "", "digests": {"md5": "71bd883115aea156f841caaf67c4ea83", "sha256": "a08b902301879dff3d00416beea55595c318820b26e4d5b46abcc9170ae55e28"}, "downloads": -1, "filename": "nflsim-1.1.7.tar.gz", "has_sig": false, "md5_digest": "71bd883115aea156f841caaf67c4ea83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13189, "upload_time": "2019-12-16T20:27:08", "upload_time_iso_8601": "2019-12-16T20:27:08.765042Z", "url": "https://files.pythonhosted.org/packages/33/d2/3bd5b8696af7ffafc9a9f8eff7d6b0ef34e7f755930d6c0b64fd713447da/nflsim-1.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71bd883115aea156f841caaf67c4ea83", "sha256": "a08b902301879dff3d00416beea55595c318820b26e4d5b46abcc9170ae55e28"}, "downloads": -1, "filename": "nflsim-1.1.7.tar.gz", "has_sig": false, "md5_digest": "71bd883115aea156f841caaf67c4ea83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13189, "upload_time": "2019-12-16T20:27:08", "upload_time_iso_8601": "2019-12-16T20:27:08.765042Z", "url": "https://files.pythonhosted.org/packages/33/d2/3bd5b8696af7ffafc9a9f8eff7d6b0ef34e7f755930d6c0b64fd713447da/nflsim-1.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:34 2020"}