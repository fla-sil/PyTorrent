{"info": {"author": "MrLight", "author_email": "mrlight1@gmx.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# pytebis Python Connector for TeBIS from Steinhaus\n\npytebis is a connector for interacting with a TeBIS Server.\n\nThe connector can return structured data in a defined timespan with defined measuring points.\nThere are function to get the data as structured NumPy Array, Pandas or as json.\nFor further interaction it is possible to load the measuring points, the groups and the tree.\nAlarms are currently not supported.\n\n## Install the package\n\n```python\npip install pytebis\n```\n\n## Usage\n\n### Import the package\n\n```python\nfrom pytebis import tebis\n```\n\n### Basic configuration\n\nWith the basic configuration it is possible to read data and to load the measuring point names and ids.\nThe advanced Configuration is needed to additional load the groups and tree config.\n\n```python\nconfiguration = {\n    'host': '192.168.1.10', # The tebis host IP Adr\n    'configfile': 'd:/tebis/Anlage/Config.txt' # Tebis config file loaction on the server -> ask your admin\n}\nteb = tebis.Tebis(configuration=configuration)\n```\n\n### Advanced configuration\n\n```python\nconfiguration = {\n            'host': '192.168.1.10', # The tebis host IP Adr\n            'port': 4712, # Tebis Port [4712]\n            'configfile': 'd:/tebis/Anlage/Config.txt', # Tebis config file location on the server -> ask your admin\n            'useOracle': None,  # Optional: can be True or False - False to Switch off the DB usage\n            'OracleDbConn': { # The Oracle Connection\n                'host': '192.168.1.10', # IP Adr\n                'port': 1521, # Port [1521]\n                'user': None, # Oracle username\n                'psw': None, #Oracle pwd\n                'service': 'XE'\n            }\n        }\nteb = tebis.Tebis(configuration=configuration)\n```\n\n### read Data from TeBIS\n\nThere are different functions to read data from the TeBIS Server. All functions have the some parameters. Only the return is specific to the function.\nParameters:\n\n`result = teb.getDataAsJson(names, start, end, rate=1)`\n\n- names = Array of all mst-names to read. You can pass a array of IDs, names, TebisMst-Objects or Group-Objects (even mixed).\n- start = Unix-Timestamp where to start the read (must be in the same timezone as the server is)\n- end = Unix-Timestamp where to end the read (must be in the same timezone as the server is)\n- rate = What reduction should be used for the read\n\nThe Data which is returned by the TeBIS-Server is vectorized into a structured numpy array. Which is working super fast and is totally comparable with the performance of the TeBIS A Client. You can use different functions to get the data in std. Python formats for further analysis.\n\n#### as Numpy structured array\n\n```python\nresNP = teb.getDataAsNP(['My_mst_1','My_mst_2'], 1581324153, 1581325153, 10)\n```\n\nA structured Numpy Array is returned. There is a Column per mst-name, additional a column with the timestamp is added with index 0.\nYou can directly access the elements e.g. by indexing them by name `resNP[\"timestamp\"]`\n\n#### as Pandas\n\n```python\ndf = teb.getDataAsPD(['My_mst_1','My_mst_2'], 1581324153, 1581325153, 10)\n```\n\nThe Pandas DataFrame will not return a column with the timestamp. But a DateTimeIndex. So you can directly use this for TimeSeries Operations. The creation of the Pandas Dataframe is a bit slower than the generic NumPy function, as the DataFrame and the DateTimeIndex is generated afterwards.\n\n#### as Json\n\n```python\nresJSON = teb.getDataAsJson(['My_mst_1','My_mst_2'], 1581324153, 1581325153, 10)\n```\n\n#### Example\n\nThis will show a plot containing the last hour of data of the point-ids 1 and 2. The reduction is 10 seconds.\n\n```python\nimport time\nimport matplotlib.pyplot as plt\nfrom pytebis import tebis\n\ndef example():\n    configuration = {\n        'host': '192.168.1.10',  # The tebis host IP Adr\n        'configfile': 'd:/tebis/Anlage/Config.txt' # Tebis config file loaction on the server -> ask your admin\n    }\n    teb = tebis.Tebis(configuration=configuration)\n    df = teb.getDataAsPD([1,2], time.time() - 3600, time.time(), 10)  # adjust which points you want to load pass id, name, mst- or group-Object\n    df.plot()\n    plt.show()\n\nif __name__ == \"__main__\":\n    example()\n    pass\n```\n\n### Working with measuring points, groups and the tree\n\nThe measuring points and the virtual measuring points are loaded once at startup. This is always possible so you don't need to specify a db Connection.\n\nIf you want to load the Groups, Group Members and the Tree as it is configured in the TeBIS A client you must have a working db Connection.\n\nIf you have a long running service it is a good idea to reload the information in a regular interval. (e.g. all 10min)\n\nJust call ```teb.refreshMsts()``` to reload the data.\n\n\n### Logging\n\nThe package is implementing a logger using the std. logging framework of Python. The loggername is: ```pytebis```. There is no handler configured. To setup a specific log-level for the package use a config like this after ```logging.basicConfig()``` e.g. ```logging.getLogger('pytebis').setLevel(logging.INFO)```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/MrLight/pytebis/archive/v0.1.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MrLight/pytebis", "keywords": "Python,Connector,TeBIS,Steinhaus", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "pytebis", "package_url": "https://pypi.org/project/pytebis/", "platform": "", "project_url": "https://pypi.org/project/pytebis/", "project_urls": {"Download": "https://github.com/MrLight/pytebis/archive/v0.1.2.tar.gz", "Homepage": "https://github.com/MrLight/pytebis"}, "release_url": "https://pypi.org/project/pytebis/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Python Connector for TeBIS from Steinhaus", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pytebis Python Connector for TeBIS from Steinhaus</h1>\n<p>pytebis is a connector for interacting with a TeBIS Server.</p>\n<p>The connector can return structured data in a defined timespan with defined measuring points.\nThere are function to get the data as structured NumPy Array, Pandas or as json.\nFor further interaction it is possible to load the measuring points, the groups and the tree.\nAlarms are currently not supported.</p>\n<h2>Install the package</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pytebis</span>\n</pre>\n<h2>Usage</h2>\n<h3>Import the package</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pytebis</span> <span class=\"kn\">import</span> <span class=\"n\">tebis</span>\n</pre>\n<h3>Basic configuration</h3>\n<p>With the basic configuration it is possible to read data and to load the measuring point names and ids.\nThe advanced Configuration is needed to additional load the groups and tree config.</p>\n<pre><span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'192.168.1.10'</span><span class=\"p\">,</span> <span class=\"c1\"># The tebis host IP Adr</span>\n    <span class=\"s1\">'configfile'</span><span class=\"p\">:</span> <span class=\"s1\">'d:/tebis/Anlage/Config.txt'</span> <span class=\"c1\"># Tebis config file loaction on the server -&gt; ask your admin</span>\n<span class=\"p\">}</span>\n<span class=\"n\">teb</span> <span class=\"o\">=</span> <span class=\"n\">tebis</span><span class=\"o\">.</span><span class=\"n\">Tebis</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"o\">=</span><span class=\"n\">configuration</span><span class=\"p\">)</span>\n</pre>\n<h3>Advanced configuration</h3>\n<pre><span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'192.168.1.10'</span><span class=\"p\">,</span> <span class=\"c1\"># The tebis host IP Adr</span>\n            <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">4712</span><span class=\"p\">,</span> <span class=\"c1\"># Tebis Port [4712]</span>\n            <span class=\"s1\">'configfile'</span><span class=\"p\">:</span> <span class=\"s1\">'d:/tebis/Anlage/Config.txt'</span><span class=\"p\">,</span> <span class=\"c1\"># Tebis config file location on the server -&gt; ask your admin</span>\n            <span class=\"s1\">'useOracle'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># Optional: can be True or False - False to Switch off the DB usage</span>\n            <span class=\"s1\">'OracleDbConn'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"c1\"># The Oracle Connection</span>\n                <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'192.168.1.10'</span><span class=\"p\">,</span> <span class=\"c1\"># IP Adr</span>\n                <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"mi\">1521</span><span class=\"p\">,</span> <span class=\"c1\"># Port [1521]</span>\n                <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Oracle username</span>\n                <span class=\"s1\">'psw'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\">#Oracle pwd</span>\n                <span class=\"s1\">'service'</span><span class=\"p\">:</span> <span class=\"s1\">'XE'</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n<span class=\"n\">teb</span> <span class=\"o\">=</span> <span class=\"n\">tebis</span><span class=\"o\">.</span><span class=\"n\">Tebis</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"o\">=</span><span class=\"n\">configuration</span><span class=\"p\">)</span>\n</pre>\n<h3>read Data from TeBIS</h3>\n<p>There are different functions to read data from the TeBIS Server. All functions have the some parameters. Only the return is specific to the function.\nParameters:</p>\n<p><code>result = teb.getDataAsJson(names, start, end, rate=1)</code></p>\n<ul>\n<li>names = Array of all mst-names to read. You can pass a array of IDs, names, TebisMst-Objects or Group-Objects (even mixed).</li>\n<li>start = Unix-Timestamp where to start the read (must be in the same timezone as the server is)</li>\n<li>end = Unix-Timestamp where to end the read (must be in the same timezone as the server is)</li>\n<li>rate = What reduction should be used for the read</li>\n</ul>\n<p>The Data which is returned by the TeBIS-Server is vectorized into a structured numpy array. Which is working super fast and is totally comparable with the performance of the TeBIS A Client. You can use different functions to get the data in std. Python formats for further analysis.</p>\n<h4>as Numpy structured array</h4>\n<pre><span class=\"n\">resNP</span> <span class=\"o\">=</span> <span class=\"n\">teb</span><span class=\"o\">.</span><span class=\"n\">getDataAsNP</span><span class=\"p\">([</span><span class=\"s1\">'My_mst_1'</span><span class=\"p\">,</span><span class=\"s1\">'My_mst_2'</span><span class=\"p\">],</span> <span class=\"mi\">1581324153</span><span class=\"p\">,</span> <span class=\"mi\">1581325153</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>A structured Numpy Array is returned. There is a Column per mst-name, additional a column with the timestamp is added with index 0.\nYou can directly access the elements e.g. by indexing them by name <code>resNP[\"timestamp\"]</code></p>\n<h4>as Pandas</h4>\n<pre><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">teb</span><span class=\"o\">.</span><span class=\"n\">getDataAsPD</span><span class=\"p\">([</span><span class=\"s1\">'My_mst_1'</span><span class=\"p\">,</span><span class=\"s1\">'My_mst_2'</span><span class=\"p\">],</span> <span class=\"mi\">1581324153</span><span class=\"p\">,</span> <span class=\"mi\">1581325153</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>The Pandas DataFrame will not return a column with the timestamp. But a DateTimeIndex. So you can directly use this for TimeSeries Operations. The creation of the Pandas Dataframe is a bit slower than the generic NumPy function, as the DataFrame and the DateTimeIndex is generated afterwards.</p>\n<h4>as Json</h4>\n<pre><span class=\"n\">resJSON</span> <span class=\"o\">=</span> <span class=\"n\">teb</span><span class=\"o\">.</span><span class=\"n\">getDataAsJson</span><span class=\"p\">([</span><span class=\"s1\">'My_mst_1'</span><span class=\"p\">,</span><span class=\"s1\">'My_mst_2'</span><span class=\"p\">],</span> <span class=\"mi\">1581324153</span><span class=\"p\">,</span> <span class=\"mi\">1581325153</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<h4>Example</h4>\n<p>This will show a plot containing the last hour of data of the point-ids 1 and 2. The reduction is 10 seconds.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytebis</span> <span class=\"kn\">import</span> <span class=\"n\">tebis</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"n\">configuration</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'192.168.1.10'</span><span class=\"p\">,</span>  <span class=\"c1\"># The tebis host IP Adr</span>\n        <span class=\"s1\">'configfile'</span><span class=\"p\">:</span> <span class=\"s1\">'d:/tebis/Anlage/Config.txt'</span> <span class=\"c1\"># Tebis config file loaction on the server -&gt; ask your admin</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">teb</span> <span class=\"o\">=</span> <span class=\"n\">tebis</span><span class=\"o\">.</span><span class=\"n\">Tebis</span><span class=\"p\">(</span><span class=\"n\">configuration</span><span class=\"o\">=</span><span class=\"n\">configuration</span><span class=\"p\">)</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">teb</span><span class=\"o\">.</span><span class=\"n\">getDataAsPD</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mi\">3600</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span> <span class=\"mi\">10</span><span class=\"p\">)</span>  <span class=\"c1\"># adjust which points you want to load pass id, name, mst- or group-Object</span>\n    <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n    <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">example</span><span class=\"p\">()</span>\n    <span class=\"k\">pass</span>\n</pre>\n<h3>Working with measuring points, groups and the tree</h3>\n<p>The measuring points and the virtual measuring points are loaded once at startup. This is always possible so you don't need to specify a db Connection.</p>\n<p>If you want to load the Groups, Group Members and the Tree as it is configured in the TeBIS A client you must have a working db Connection.</p>\n<p>If you have a long running service it is a good idea to reload the information in a regular interval. (e.g. all 10min)</p>\n<p>Just call <code>teb.refreshMsts()</code> to reload the data.</p>\n<h3>Logging</h3>\n<p>The package is implementing a logger using the std. logging framework of Python. The loggername is: <code>pytebis</code>. There is no handler configured. To setup a specific log-level for the package use a config like this after <code>logging.basicConfig()</code> e.g. <code>logging.getLogger('pytebis').setLevel(logging.INFO)</code></p>\n\n          </div>"}, "last_serial": 7171491, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "bdfa85b227aade0efe8caf38ee1c4c16", "sha256": "1fee6f9be787fdd6755104f31d62752724cc1678a7eb60cd743f2c47ae5c3ab3"}, "downloads": -1, "filename": "pytebis-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bdfa85b227aade0efe8caf38ee1c4c16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15226, "upload_time": "2020-05-05T12:04:53", "upload_time_iso_8601": "2020-05-05T12:04:53.752159Z", "url": "https://files.pythonhosted.org/packages/38/2f/f3053f13ad6183dc89514e23932948c762173f143c8e2b8e70dd28949e28/pytebis-0.1.2.tar.gz", "yanked": false}], "0.1.3a0": [{"comment_text": "", "digests": {"md5": "369394dc93a7cbcd249fff32c846836c", "sha256": "133a51f07a7e5c46f81b4e923437333ba62c7a955cee78d928a1b4d3dece6fbc"}, "downloads": -1, "filename": "pytebis-0.1.3a0.tar.gz", "has_sig": false, "md5_digest": "369394dc93a7cbcd249fff32c846836c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11498, "upload_time": "2020-02-24T09:54:48", "upload_time_iso_8601": "2020-02-24T09:54:48.006867Z", "url": "https://files.pythonhosted.org/packages/54/64/e5000d7040fe71d7b56ef9ec7f51e7b719b1427f905a8e094001d0a48e7f/pytebis-0.1.3a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdfa85b227aade0efe8caf38ee1c4c16", "sha256": "1fee6f9be787fdd6755104f31d62752724cc1678a7eb60cd743f2c47ae5c3ab3"}, "downloads": -1, "filename": "pytebis-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bdfa85b227aade0efe8caf38ee1c4c16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15226, "upload_time": "2020-05-05T12:04:53", "upload_time_iso_8601": "2020-05-05T12:04:53.752159Z", "url": "https://files.pythonhosted.org/packages/38/2f/f3053f13ad6183dc89514e23932948c762173f143c8e2b8e70dd28949e28/pytebis-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:35 2020"}