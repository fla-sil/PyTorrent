{"info": {"author": "Anmol Sahoo", "author_email": "shakti@iitm.ac.in", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "Advanced Assembly Program Generator\n===================================\nAutomated Assembly Program Generator (``aapg``) is a tool \nthat is intended to generate random RISC-V programs\nto test RISC-V cores.\n\nQuick Install\n-------------\nThere are two ways to get started with aapg. The easiest one is via pip.\n\n.. code-block:: python\n\n    pip install aapg\n\nNext, create a working directory for your project,\n\n.. code-block:: bash\n    mkdir ~/aapg-samples \n    cd ~/aapg-samples\n\nNow we setup the build environment by typing,\n\n.. code-block:: bash\n\n    aapg setup\n\nThis creates the folders for the outputs of each step that is compiling the assembly to machine code, dumping a disassemly and then running the simulator on spike (riscv-isa-sim). It also creates a sample ``config.ini`` to configure each ``aapg`` run.\n\nOnce the previous steps have been completed, we can run ``aapg``\nusing the following command.\n\n.. code-block:: bash\n    \n    aapg gen \n\nBy default, ``aapg`` generates 64 bit programs. To generate 32 bit programs, you have to run,\n\n.. code-block:: bash\n\n    aapg gen --arch rv32\n\nYou should find your random program generated in\n``build/out.asm`` in your current directory. By default,\n``aapg`` expects the configuration file to be ``config.ini``\nand the output file to be ``build/out.asm`` in the directory\nthat ``aapg`` was run in. To build the programs and run them on Spike,\n\n.. code-block:: bash\n\n    make\n\nAlternatively for compiling using the 32-bit toolchain, you can type,\n\n.. code-block:: bash\n\n    make XLEN=32\n\nYou can check the logfiles in the ``log`` directory and the disassembled code in ``objdump`` directory.\n\nA sample config.ini with all options can be found in the ```samples``` directory. \n\nDeveloper Install\n-----------------\nThe other way to install it is by using Git. This allows you to stay updated with the latest developments\nand is required when you want to develop ``aapg`` further and push changes. You can follow these steps,\n\n.. code-block:: bash\n    \n    git clone https://gitlab.com/shaktiproject/tools/aapg\n    cd aapg\n    python3 setup.py install\n\nThis will install aapg on your path.\n\nWiki\n------------\nHead to `Wiki <https://gitlab.com/shaktiproject/tools/aapg/wikis/Wiki>`_ for detailed information.\n\nLicense\n-------\nCopyright (c) 2013-2018, IIT Madras\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n*  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n*  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n*  Neither the name of IIT Madras  nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "aapg", "package_url": "https://pypi.org/project/aapg/", "platform": "", "project_url": "https://pypi.org/project/aapg/", "project_urls": null, "release_url": "https://pypi.org/project/aapg/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Automatic Assembly Generator for RISC-V", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Advanced Assembly Program Generator</h1>\n<p>Automated Assembly Program Generator (<code>aapg</code>) is a tool\nthat is intended to generate random RISC-V programs\nto test RISC-V cores.</p>\n<h2>Quick Install</h2>\n<p>There are two ways to get started with aapg. The easiest one is via pip.</p>\n<p>.. code-block:: python</p>\n<pre><code>pip install aapg\n</code></pre>\n<p>Next, create a working directory for your project,</p>\n<p>.. code-block:: bash\nmkdir ~/aapg-samples\ncd ~/aapg-samples</p>\n<p>Now we setup the build environment by typing,</p>\n<p>.. code-block:: bash</p>\n<pre><code>aapg setup\n</code></pre>\n<p>This creates the folders for the outputs of each step that is compiling the assembly to machine code, dumping a disassemly and then running the simulator on spike (riscv-isa-sim). It also creates a sample <code>config.ini</code> to configure each <code>aapg</code> run.</p>\n<p>Once the previous steps have been completed, we can run <code>aapg</code>\nusing the following command.</p>\n<p>.. code-block:: bash</p>\n<pre><code>aapg gen \n</code></pre>\n<p>By default, <code>aapg</code> generates 64 bit programs. To generate 32 bit programs, you have to run,</p>\n<p>.. code-block:: bash</p>\n<pre><code>aapg gen --arch rv32\n</code></pre>\n<p>You should find your random program generated in\n<code>build/out.asm</code> in your current directory. By default,\n<code>aapg</code> expects the configuration file to be <code>config.ini</code>\nand the output file to be <code>build/out.asm</code> in the directory\nthat <code>aapg</code> was run in. To build the programs and run them on Spike,</p>\n<p>.. code-block:: bash</p>\n<pre><code>make\n</code></pre>\n<p>Alternatively for compiling using the 32-bit toolchain, you can type,</p>\n<p>.. code-block:: bash</p>\n<pre><code>make XLEN=32\n</code></pre>\n<p>You can check the logfiles in the <code>log</code> directory and the disassembled code in <code>objdump</code> directory.</p>\n<p>A sample config.ini with all options can be found in the <code>samples</code> directory.</p>\n<h2>Developer Install</h2>\n<p>The other way to install it is by using Git. This allows you to stay updated with the latest developments\nand is required when you want to develop <code>aapg</code> further and push changes. You can follow these steps,</p>\n<p>.. code-block:: bash</p>\n<pre><code>git clone https://gitlab.com/shaktiproject/tools/aapg\ncd aapg\npython3 setup.py install\n</code></pre>\n<p>This will install aapg on your path.</p>\n<h2>Wiki</h2>\n<p>Head to <code>Wiki &lt;https://gitlab.com/shaktiproject/tools/aapg/wikis/Wiki&gt;</code>_ for detailed information.</p>\n<h2>License</h2>\n<p>Copyright (c) 2013-2018, IIT Madras\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>\n<ul>\n<li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li>\n<li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li>\n<li>Neither the name of IIT Madras  nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li>\n</ul>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n\n          </div>"}, "last_serial": 6336853, "releases": {"0.8.1": [{"comment_text": "", "digests": {"md5": "4c7d48f733d33af5b7748d9903dc63b6", "sha256": "d39357888b05660a818834b532cffd928bcc452517a9e66f620f3275d7fc7f9a"}, "downloads": -1, "filename": "aapg-0.8.1.tar.gz", "has_sig": false, "md5_digest": "4c7d48f733d33af5b7748d9903dc63b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37574, "upload_time": "2019-12-20T03:09:15", "upload_time_iso_8601": "2019-12-20T03:09:15.825904Z", "url": "https://files.pythonhosted.org/packages/10/71/f51c6dfdcfd557f863060aa74f7e3bc817f9d837c7edd76370419c3d6993/aapg-0.8.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "6661a2613ad0a11eced9b7b043c84728", "sha256": "606b0954e42cbfdb2364640943f5f4c1021579a8f877a5541fa21ea1c361b0a3"}, "downloads": -1, "filename": "aapg-1.0.2.tar.gz", "has_sig": false, "md5_digest": "6661a2613ad0a11eced9b7b043c84728", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37726, "upload_time": "2019-12-20T03:19:39", "upload_time_iso_8601": "2019-12-20T03:19:39.093014Z", "url": "https://files.pythonhosted.org/packages/4e/4a/37f169d8782eb40309619c00f7006107e3472e944190568f9b5a9e4abc21/aapg-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6661a2613ad0a11eced9b7b043c84728", "sha256": "606b0954e42cbfdb2364640943f5f4c1021579a8f877a5541fa21ea1c361b0a3"}, "downloads": -1, "filename": "aapg-1.0.2.tar.gz", "has_sig": false, "md5_digest": "6661a2613ad0a11eced9b7b043c84728", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37726, "upload_time": "2019-12-20T03:19:39", "upload_time_iso_8601": "2019-12-20T03:19:39.093014Z", "url": "https://files.pythonhosted.org/packages/4e/4a/37f169d8782eb40309619c00f7006107e3472e944190568f9b5a9e4abc21/aapg-1.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 15:55:25 2020"}