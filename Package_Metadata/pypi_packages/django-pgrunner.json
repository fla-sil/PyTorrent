{"info": {"author": "Konrad Wojas", "author_email": "konrad@wojas.nl", "bugtrack_url": null, "classifiers": ["Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Database"], "description": "Django-pgrunner creates a local PostgreSQL_ database for your project and\nautomatically starts the database server when needed. It allows you to develop\nagainst a PostgreSQL server, while matching the convenience of a SQLite3\ndatabase file.\n\nThe local database is a self-contained database created using the PostgreSQL\n`initdb` tool. A separate PostgreSQL server will be started on a custom port.\n\nAdditionally, it support creating and activating database snapshots. This\nallows you to experiment with your data and be confident that you can restore\nyour old data within seconds.\n\nWhy?\n====\n\nWhile sqlite3 is great for development, being able to develop against a\nfull-featured database like PostgreSQL has a few huge benefits:\n\n * Your development database will match the database you run in production,\n   eliminating a whole category of bugs, like:\n\n   * South migrations failing in production, while working in dev\n   * Errors in code due to database specific behaviour, like stricter\n     checks on foreign key references.\n   * Proper checks on `unique_together` (sqlite3 does not support these\n     constraints)\n\n * You can use all the great features offered by PostgreSQL, instead of\n   restricting yourself to a low common denominator. Examples:\n\n   * Database-side constraint and cascading rules\n   * Extra data types, like arrays\n   * Full-text search\n   * Views\n   * Stored procedures\n   * Triggers\n   * PostGIS geo extensions\n   * HStore\n   * JSON features\n\nAnd with the ease of use this packae offers, there is no good reason not\nto use it!\n\nRequirements and installation\n=============================\n\nMake sure you have PostgreSQL_ installed. You can either compile from source,\nor install a binary for your operating system. Check the download_ page for\ndetails. For MacOS X users, I recommend downloading PostgresApp_.\n\nThe snapshot functionality requires rsync_ to be installed.\n\nThis package depends on the psycopg2_ package.\npsycopg2_ provides the Python database adapter needed to communicate\nwith PostgreSQL. This adapter is partly written in C, and requires a working\nC compiler, PostgreSQL development headers and the `pg_config` binary in your\nPATH. Alternatively, you can install a binary_ distribution.\n\n.. sourcecode:: sh\n\n    pip install psycopg2\n\nThe easiest way to install `django-pgrunner` is using pip:\n\n.. sourcecode:: sh\n\n    pip install django-pgrunner\n\nMicrosoft Windows is currently not supported.\n\n**This package is not intended for use on production servers.**\n\nUsage\n=====\n\nFirst, add **pgrunner** to your INSTALLED_APPS.\n\nNext, add the following lines to your `settings.py` or local settings file.\nMake sure that these come after any DATABASES setting:\n\n.. sourcecode:: python\n\n    # If your PostgreSQL binaries are not in your path, add this setting\n    #PGRUNNER_BIN = '/usr/lib/postgresql/9.3/bin'\n    #PGRUNNER_BIN = '/Applications/Postgres.app/Contents/Versions/9.3/bin'\n\n    # This will overwrite DATABASES and auto-start PostgreSQL if needed\n    import pgrunner\n    pgrunner.settings(locals())\n\nNote that most Linux distibutions do not include these binaries in the PATH,\nand only expose a few wrappers in `/usr/bin`. If this is the case for you, you\nneed to set the `PGRUNNER_BIN` setting.\n\nRun the following command to create your local database:\n\n.. sourcecode:: sh\n\n    ./manage.py pg_init\n\nTo start the database in the background:\n\n.. sourcecode:: sh\n\n    ./manage.py pg_ctl start\n\nNote that if you use pgrunner.setting(), it will automatically start the server\nfor you.\n\nTo stop the database:\n\n.. sourcecode:: sh\n\n    ./manage.py pg_ctl stop\n\nThis will not be done automatically.\n\nTo start the `psql` command line interface with the right parameters, use one of\nthese commands:\n\n.. sourcecode:: sh\n\n    ./manage.py dbshell\n    ./manage.py pg_psql\n\nThe only difference is that the first one uses your `DATABASES` settings, and the\nsecond one ignores it.\n\nSnapshots\n=========\n\nSnapshots are nothing more than named copies of the full database.\nIt's the equivalent of a `cp dev.sqlite my-backup.sqlite` for SQLite users.\n\nTo create a snapshot and activate it:\n\n.. sourcecode:: sh\n\n    ./manage.py pg_snapshot my-snapshot\n    ./manage.py pg_activate my-snapshot\n\nThe name of the default snapshot you are running is `default`, so to switch\nback:\n\n.. sourcecode:: sh\n\n    ./manage.py pg_activate default\n\nSnapshots can be deleted by removing their folder under `pgrunnerdb/`.\n\nCommand summary\n===============\n\n.. sourcecode:: sh\n\n    ./manage.py pg_init          - Initialize a local database environment\n    ./manage.py pg_ctl start     - Start server in background\n    ./manage.py pg_ctl stop      - Stop server in background\n    ./manage.py pg_ctl status    - Check if the server is running\n    ./manage.py pg_run           - Run PostgreSQL server in foreground\n    ./manage.py pg_psql          - Start psql with right parameters\n    ./manage.py pg_snapshot foo  - Create a copy of all current database data\n    ./manage.py pg_activate      - List all snapshots\n    ./manage.py pg_activate foo  - Activate snapshot 'foo'\n    ./manage.py pg_dump          - Run pg_dump\n    ./manage.py pg_restore       - Run pg_restore\n\n\nBehind the scenes\n=================\n\nDjango-pgrunner creates a `pgrunnerdb/` subfolder under your Django project.\nThis folder contains one folder for every snapshot that was created.\nThe name of the default instance is `default`. A `current` symbolic link\nkeeps track of which snapshot is active.\n\nA separate PostgreSQL daemon is started for every project. When the `pg_init`\nmanagement command is run, it will pick a random port between 15000 and 16000\nto run the server on and write it to the local `postgres.conf`. This way\nthe chances of a conflict between projects are small.\n\n.. _PostgreSQL: http://www.postgresql.org/\n.. _download: http://www.postgresql.org/download/\n.. _rsync: http://rsync.samba.org/\n.. _PostgresApp: http://postgresapp.com/\n.. _psycopg2: https://pypi.python.org/pypi/psycopg2\n.. _binary: http://initd.org/psycopg/install/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wojas/django-pgrunner/", "keywords": "django postgres postgresql runner pgrunner", "license": "LICENSE", "maintainer": null, "maintainer_email": null, "name": "django-pgrunner", "package_url": "https://pypi.org/project/django-pgrunner/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-pgrunner/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/wojas/django-pgrunner/"}, "release_url": "https://pypi.org/project/django-pgrunner/0.2.2/", "requires_dist": null, "requires_python": null, "summary": "Create and autorun a PostgreSQL development database for your Django project", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Django-pgrunner creates a local <a href=\"http://www.postgresql.org/\" rel=\"nofollow\">PostgreSQL</a> database for your project and\nautomatically starts the database server when needed. It allows you to develop\nagainst a PostgreSQL server, while matching the convenience of a SQLite3\ndatabase file.</p>\n<p>The local database is a self-contained database created using the PostgreSQL\n<cite>initdb</cite> tool. A separate PostgreSQL server will be started on a custom port.</p>\n<p>Additionally, it support creating and activating database snapshots. This\nallows you to experiment with your data and be confident that you can restore\nyour old data within seconds.</p>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>While sqlite3 is great for development, being able to develop against a\nfull-featured database like PostgreSQL has a few huge benefits:</p>\n<blockquote>\n<ul>\n<li>Your development database will match the database you run in production,\neliminating a whole category of bugs, like:<ul>\n<li>South migrations failing in production, while working in dev</li>\n<li>Errors in code due to database specific behaviour, like stricter\nchecks on foreign key references.</li>\n<li>Proper checks on <cite>unique_together</cite> (sqlite3 does not support these\nconstraints)</li>\n</ul>\n</li>\n<li>You can use all the great features offered by PostgreSQL, instead of\nrestricting yourself to a low common denominator. Examples:<ul>\n<li>Database-side constraint and cascading rules</li>\n<li>Extra data types, like arrays</li>\n<li>Full-text search</li>\n<li>Views</li>\n<li>Stored procedures</li>\n<li>Triggers</li>\n<li>PostGIS geo extensions</li>\n<li>HStore</li>\n<li>JSON features</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>And with the ease of use this packae offers, there is no good reason not\nto use it!</p>\n</div>\n<div id=\"requirements-and-installation\">\n<h2>Requirements and installation</h2>\n<p>Make sure you have <a href=\"http://www.postgresql.org/\" rel=\"nofollow\">PostgreSQL</a> installed. You can either compile from source,\nor install a binary for your operating system. Check the <a href=\"http://www.postgresql.org/download/\" rel=\"nofollow\">download</a> page for\ndetails. For MacOS X users, I recommend downloading <a href=\"http://postgresapp.com/\" rel=\"nofollow\">PostgresApp</a>.</p>\n<p>The snapshot functionality requires <a href=\"http://rsync.samba.org/\" rel=\"nofollow\">rsync</a> to be installed.</p>\n<p>This package depends on the <a href=\"https://pypi.python.org/pypi/psycopg2\" rel=\"nofollow\">psycopg2</a> package.\n<a href=\"https://pypi.python.org/pypi/psycopg2\" rel=\"nofollow\">psycopg2</a> provides the Python database adapter needed to communicate\nwith PostgreSQL. This adapter is partly written in C, and requires a working\nC compiler, PostgreSQL development headers and the <cite>pg_config</cite> binary in your\nPATH. Alternatively, you can install a <a href=\"http://initd.org/psycopg/install/\" rel=\"nofollow\">binary</a> distribution.</p>\n<pre>pip install psycopg2\n</pre>\n<p>The easiest way to install <cite>django-pgrunner</cite> is using pip:</p>\n<pre>pip install django-pgrunner\n</pre>\n<p>Microsoft Windows is currently not supported.</p>\n<p><strong>This package is not intended for use on production servers.</strong></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>First, add <strong>pgrunner</strong> to your INSTALLED_APPS.</p>\n<p>Next, add the following lines to your <cite>settings.py</cite> or local settings file.\nMake sure that these come after any DATABASES setting:</p>\n<pre><span class=\"c1\"># If your PostgreSQL binaries are not in your path, add this setting</span>\n<span class=\"c1\">#PGRUNNER_BIN = '/usr/lib/postgresql/9.3/bin'</span>\n<span class=\"c1\">#PGRUNNER_BIN = '/Applications/Postgres.app/Contents/Versions/9.3/bin'</span>\n\n<span class=\"c1\"># This will overwrite DATABASES and auto-start PostgreSQL if needed</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pgrunner</span>\n<span class=\"n\">pgrunner</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">())</span>\n</pre>\n<p>Note that most Linux distibutions do not include these binaries in the PATH,\nand only expose a few wrappers in <cite>/usr/bin</cite>. If this is the case for you, you\nneed to set the <cite>PGRUNNER_BIN</cite> setting.</p>\n<p>Run the following command to create your local database:</p>\n<pre>./manage.py pg_init\n</pre>\n<p>To start the database in the background:</p>\n<pre>./manage.py pg_ctl start\n</pre>\n<p>Note that if you use pgrunner.setting(), it will automatically start the server\nfor you.</p>\n<p>To stop the database:</p>\n<pre>./manage.py pg_ctl stop\n</pre>\n<p>This will not be done automatically.</p>\n<p>To start the <cite>psql</cite> command line interface with the right parameters, use one of\nthese commands:</p>\n<pre>./manage.py dbshell\n./manage.py pg_psql\n</pre>\n<p>The only difference is that the first one uses your <cite>DATABASES</cite> settings, and the\nsecond one ignores it.</p>\n</div>\n<div id=\"snapshots\">\n<h2>Snapshots</h2>\n<p>Snapshots are nothing more than named copies of the full database.\nIt\u2019s the equivalent of a <cite>cp dev.sqlite my-backup.sqlite</cite> for SQLite users.</p>\n<p>To create a snapshot and activate it:</p>\n<pre>./manage.py pg_snapshot my-snapshot\n./manage.py pg_activate my-snapshot\n</pre>\n<p>The name of the default snapshot you are running is <cite>default</cite>, so to switch\nback:</p>\n<pre>./manage.py pg_activate default\n</pre>\n<p>Snapshots can be deleted by removing their folder under <cite>pgrunnerdb/</cite>.</p>\n</div>\n<div id=\"command-summary\">\n<h2>Command summary</h2>\n<pre>./manage.py pg_init          - Initialize a <span class=\"nb\">local</span> database environment\n./manage.py pg_ctl start     - Start server in background\n./manage.py pg_ctl stop      - Stop server in background\n./manage.py pg_ctl status    - Check <span class=\"k\">if</span> the server is running\n./manage.py pg_run           - Run PostgreSQL server in foreground\n./manage.py pg_psql          - Start psql with right parameters\n./manage.py pg_snapshot foo  - Create a copy of all current database data\n./manage.py pg_activate      - List all snapshots\n./manage.py pg_activate foo  - Activate snapshot <span class=\"s1\">'foo'</span>\n./manage.py pg_dump          - Run pg_dump\n./manage.py pg_restore       - Run pg_restore\n</pre>\n</div>\n<div id=\"behind-the-scenes\">\n<h2>Behind the scenes</h2>\n<p>Django-pgrunner creates a <cite>pgrunnerdb/</cite> subfolder under your Django project.\nThis folder contains one folder for every snapshot that was created.\nThe name of the default instance is <cite>default</cite>. A <cite>current</cite> symbolic link\nkeeps track of which snapshot is active.</p>\n<p>A separate PostgreSQL daemon is started for every project. When the <cite>pg_init</cite>\nmanagement command is run, it will pick a random port between 15000 and 16000\nto run the server on and write it to the local <cite>postgres.conf</cite>. This way\nthe chances of a conflict between projects are small.</p>\n</div>\n\n          </div>"}, "last_serial": 1154326, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "f9071c8f238b9dfa079a2d6b23950669", "sha256": "85d449c8bfab79fb0f1508b987836404e608044c00fb61f73a2f47457b7df601"}, "downloads": -1, "filename": "django-pgrunner-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f9071c8f238b9dfa079a2d6b23950669", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9033, "upload_time": "2014-03-03T19:57:07", "upload_time_iso_8601": "2014-03-03T19:57:07.548897Z", "url": "https://files.pythonhosted.org/packages/0e/89/2422fba98a17df8cff8bb923fd224f341a356d569527e831876f04172de4/django-pgrunner-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1162215f55d7f17c557b91c08b61eb1f", "sha256": "5b0423fa5a49528ce072507b855a8fc1de8b8b7b7fbbc09918471981161f9658"}, "downloads": -1, "filename": "django-pgrunner-0.2.1.tar.gz", "has_sig": false, "md5_digest": "1162215f55d7f17c557b91c08b61eb1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9505, "upload_time": "2014-03-03T20:56:39", "upload_time_iso_8601": "2014-03-03T20:56:39.357699Z", "url": "https://files.pythonhosted.org/packages/35/7b/6c59f04798fbcf227beebf2156e6b2228b9ad7c95b391675b5274403e275/django-pgrunner-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "90408fbd775698a14c3b686b35e81516", "sha256": "5d2aa05c99cf639502e898e1c285c44905d0c07afd3db5c4ef5757d12beaadd8"}, "downloads": -1, "filename": "django-pgrunner-0.2.2.tar.gz", "has_sig": false, "md5_digest": "90408fbd775698a14c3b686b35e81516", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11473, "upload_time": "2014-07-11T05:56:27", "upload_time_iso_8601": "2014-07-11T05:56:27.311882Z", "url": "https://files.pythonhosted.org/packages/95/88/e0227ee4cf772015897016d6874fc61f085aceaa9c489f982308e8bdbcd0/django-pgrunner-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90408fbd775698a14c3b686b35e81516", "sha256": "5d2aa05c99cf639502e898e1c285c44905d0c07afd3db5c4ef5757d12beaadd8"}, "downloads": -1, "filename": "django-pgrunner-0.2.2.tar.gz", "has_sig": false, "md5_digest": "90408fbd775698a14c3b686b35e81516", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11473, "upload_time": "2014-07-11T05:56:27", "upload_time_iso_8601": "2014-07-11T05:56:27.311882Z", "url": "https://files.pythonhosted.org/packages/95/88/e0227ee4cf772015897016d6874fc61f085aceaa9c489f982308e8bdbcd0/django-pgrunner-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:05 2020"}