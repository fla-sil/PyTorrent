{"info": {"author": "Opus One Solutions", "author_email": "rnd@opusonesolutions.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "carsons\n=======\n\n[![latest release on pypi](https://badge.fury.io/py/carsons.svg)](https://badge.fury.io/py/carsons)\n[![versons of python supported by carsons](https://img.shields.io/pypi/pyversions/carsons.svg)](https://pypi.python.org/pypi/carsons)\n[![GitHub license](https://img.shields.io/github/license/opusonesolutions/carsons.svg)](https://github.com/opusonesolutions/carsons/blob/master/LICENSE.txt)\n[![build passing or failing](https://travis-ci.org/opusonesolutions/carsons.svg?branch=master)](https://travis-ci.org/opusonesolutions/carsons)\n[![test coverage](https://coveralls.io/repos/github/opusonesolutions/carsons/badge.svg?branch=master)](https://coveralls.io/github/opusonesolutions/carsons?branch=master)\n[![Maintainability](https://api.codeclimate.com/v1/badges/22cfed180fd6032fe29b/maintainability)](https://codeclimate.com/github/opusonesolutions/carsons/maintainability)\n\nThis is an implementation of Carson's Equations, a mathematical model\nfor deriving the equivalent impedance of an AC transmission or\ndistribution line.\n\nImplementation\n--------------\n\n`carsons` is developed using python 3.6 support for unicode characters\nlike \u03c0, \u0192, \u03c1, \u03bc, \u03c9 etc. This feature allows us to avoid translating the\nproblem into a more typical programming syntax, so the code is dense and\ncan easily be compared to published formulations of the problem.\n\nFor example, we implement the kron reduction, a matrix decomposition\nstep, using unicode notation to indicate the slightly different meaning\nof impedance values before and after a kron reduction:\n\n```python\ndef perform_kron_reduction(z_primitive):\n     \u1e90pp, \u1e90pn = z_primitive[0:3, 0:3], z_primitive[0:3, 3:]\n     \u1e90np, \u1e90nn = z_primitive[3:,  0:3], z_primitive[3:,  3:]\n     Z_abc = \u1e90pp - \u1e90pn @ inv(\u1e90nn) @ \u1e90np\n     return Z_abc\n```\n\nTake a look at the [source\ncode](https://github.com/opusonesolutions/carsons/blob/add-documentation/carsons/carsons.py)\nto see more cool unicode tricks!\n\nInstallation\n------------\n\n```bash\n~/$ pip install carsons\n```\n\nUsage\n-----\n\nCarsons model requires a line model object that maps each phase to\nproperties of the conductor for that phase.\n\n```python\nfrom carsons import CarsonsEquations, calculate_impedance\n\nclass Line:\n   geometric_mean_radius: {\n       'A': geometric_mean_radius_A in meters\n       ...\n   }\n   resistance: {\n        'A': per-length resistance of conductor A in ohms/meters\n        ...\n   }\n   wire_positions: {\n        'A': (x, y) cross-sectional position of the conductor in meters\n        ...\n   }\n   phases: {'A', ... }\n     # map of phases 'A', 'B', 'C' and 'N<>' which are described in the\n     # gmr, r and phase_positions attributes\n\nline_impedance = calculate_impedance(CarsonsEquations(Line()))\n```\n\nThe model supports any combination of ABC phasings (for example BC, BCN\netc...) including systems with multiple neutral cables; any phases that\nare not present in the model will have zeros in the columns and rows\ncorresponding to that phase.\n\nMultiple neutrals are supported, as long as they have unique labels\nstarting with `N` (e.g. `Neutral1`, `Neutral2`).\n\nIntermediate results such as primitive impedance matrix are also\navailable.\n\n```python\nz_primitive = CarsonsEquations(Line()).build_z_primitive()\n```\n\nFor examples of how to use the model, see the [overhead wire\ntests](https://github.com/opusonesolutions/carsons/blob/master/tests/test_overhead_line.py).\n\n`carsons` is tested against several cable configurations from the [IEEE\ntest feeders](http://sites.ieee.org/pes-testfeeders/resources/), as well as\nexamples from  EPRI's [OpenDSS documentation](http://svn.code.sf.net/p/electricdss/code/trunk/Distrib/Doc/TechNote%20CableModelling.pdf).\n\n### Concentric Neutral Cable\n\n`carsons` also supports modelling of concentric neutral cables of any\nphasings. Its usage is very similar to the example above, only requiring\na few more parameters about the neutral conductors in the line model\nobject.\n\n```python\nfrom carsons import (ConcentricNeutralCarsonsEquations,\n                     calculate_impedance)\n\nclass Cable:\n   resistance: {\n       'A': per-length resistance of conductor A in ohm/meters\n       ...\n   }\n   geometric_mean_radius: {\n       'A': geometric mean radius of conductor A in meters\n       ...\n   }\n   wire_positions: {\n        'A': (x, y) cross-sectional position of conductor A in meters\n        ...\n   }\n   phases: {'A', 'NA', ... }\n   neutral_strand_gmr: {\n       'NA': neutral strand gmr of phase A in meters\n       ...\n   }\n   neutral_strand_resistance: {\n       'NA': neutral strand resistance of phase A in ohm/meters\n       ...\n   }\n   neutral_strand_diameter: {\n       'NA': neutral strand diameter of phase A in meters\n       ...\n   }\n   diameter_over_neutral: {\n       'NA': diameter over neutral of phase A in meters\n       ...\n   }\n   neutral_strand_count: {\n       'NA': neutral strand count of phase A\n       ...\n   }\n\ncable_impedance = calculate_impedance(ConcentricNeutralCarsonsEquations(Cable()))\n```\n\nFor examples of how to use the model, see the [concentric cable\ntests](https://github.com/opusonesolutions/carsons/blob/master/tests/test_concentric_neutral_cable.py).\n\n### Multi-Conductor Cable\n\n`carsons` also supports modelling of phased duplex, triplex, quadruplex cables and triplex secondary.\nIt only requires a few more parameters to describe cable's geometry.\n\n```python\nfrom carsons import (MultiConductorCarsonsEquations,\n                     calculate_impedance)\n\nclass Cable:\n    resistance: {\n        'A': per-length resistance of conductor A in ohm/meters\n        ...\n    }\n    geometric_mean_radius: {\n        'A': geometric mean radius of conductor A in meters\n        ...\n    }\n    wire_positions: {\n        'A': (x, y) cross-sectional position of conductor A in meters\n        ...\n    }\n    outside_radius: {\n        'A': outside radius of conductor A, including insulation and jacket thickness\n        ...\n    }\n    insulation_thickness: {\n        'A': insulation thickness of conductor A\n        ...\n    }\n    phases: {'A', ... }\n\ncable_impedance = calculate_impedance(MultiConductorCarsonsEquations(Cable()))\n```\n\nTo model a triplex secondary cable, the inputs should be keyed on secondary conductors `S1` and `S2`. The impedance result\nis a 2 x 2 matrix.\n\n```python\nclass Cable:\n    resistance: {\n        'S1': per-length resistance of conductor S1 in ohm/meters\n        ...\n    }\n    geometric_mean_radius: {\n        'S1': geometric mean radius of conductor S1 in meters\n        ...\n    }\n    wire_positions: {\n        'S1': (x, y) cross-sectional position of conductor S1 in meters\n        ...\n    }\n    outside_radius: {\n        'S1': outside radius of conductor S1, including insulation and jacket thickness\n        ...\n    }\n    insulation_thickness: {\n        'S1': insulation thickness of conductor S1\n        ...\n    }\n    phases: {'S1', ... }\n```\n\nFor examples of how to use the model, see the [multi-conductor cable\ntests](https://github.com/opusonesolutions/carsons/blob/master/tests/test_multi_conductor.py).\n\nProblem Description\n-------------------\n\nCarsons equations model an AC transmission or distribution line into an\nequivalent set of phase-phase impedances, which can be used to model the\nline in a power flow analysis.\n\nFor example, say we have a 4-wire system on a utility pole, with `A`,\n`B`, `C` phase conductors as well as a neutral cable N. We know that\nwhen conductors carry electrical current, they exhibit a magnetic field\n--- so its pretty easy to imagine that, e.g., the magnetic field\nproduced by `A` would interact with the `B`, `C`, and `N` conductors.\n\n    \u2001                       B\n    \u2001                         O\n    \u2001                         |\n    \u2001                         |\n    \u2001             A        N  |       C\n    \u2001               O        O|         O\n    \u2001               ----------|-----------\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001                         |\n    \u2001   ==============[Ground]============================\n    \u2001   /     /     /     /     /     /     /     /     /\n    \u2001        /     /     /     /     /     /     /\n                  /     /     /     /     /\n    \u2001\n    \u2001\n    \u2001\n    \u2001\n    \u2001\n    \u2001\n    \u2001\n    \u2001\n    \u2001\n    \u2001\n    \u2001                A*       N*          C*\n    \u2001                  0        0           0\n    \u2001\n    \u2001                          B*\n    \u2001                            0\n\n    Figure: Cross-section of a 4-wire distribution line, with\n            ground return.\n\nHowever, each conductor also has a ground return path (or 'image') ---\nshown as `A*`, `B*`, `C*`, and `N*` in the figure above --- which is a\nmagnetically induced current path in the ground. When A produces a\nmagnetic field, that field *also* interacts with `B*`, `C*`, `N*`, *and*\n`A*`. Carsons equations model all these interactions and reduce them to\nan equivalent impedance matrix that makes it much easier to model this\nsystem.\n\nIn addition `carsons` implements the kron reduction, a conversion that\napproximates the impedances caused by neutral cables by incorporating\nthem into the impedances for phase `A`, `B`, and `C`. Since most AC and\nDC powerflow formulations don't model the neutral cable, this is a\nvaluable simplification.\n\nReferences\n----------\n\nThe following works were used to produce this formulation:\n\n-   [Leonard L. Grigsby -- Electrical Power Generation, Transmission and\n    Distribution](https://books.google.ca/books?id=XMl8OU4wIEQC&lpg=SA21-PA4&dq=kron%20reduction%20carson%27s%20equation&pg=SA21-PA4#v=onepage&q=kron%20reduction%20carson's%20equation&f=true)\n-   [William H. Kersting -- Distribution System Modelling and Analysis\n    2e](https://books.google.ca/books?id=1R2OsUGSw_8C&lpg=PA84&dq=carson%27s%20equations&pg=PA85#v=onepage&q=carson's%20equations&f=false)\n-   [William H. Kersting, Distribution System Analysis Subcommittee --\n    Radial Distribution Test\n    Feeders](http://sites.ieee.org/pes-testfeeders/files/2017/08/testfeeders.pdf)\n-   [Timothy Vismore -- The Vismor\n    Milieu](https://vismor.com/documents/power_systems/transmission_lines/S2.SS1.php)\n-   [Daniel Van Dommelen, Albert Van Ranst, Robert Poncelet -- GIC\n    Influence on Power Systems calculated by Carson's\n    method](https://core.ac.uk/download/pdf/34634673.pdf)\n-   [Andrea Ballanti, Roger Dugan -- Cable Modelling in OpenDSS](http://svn.code.sf.net/p/electricdss/code/trunk/Distrib/Doc/TechNote%20CableModelling.pdf)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/opusonesolutions/carsons", "keywords": "carsons,cables,lines,power systems", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "carsons", "package_url": "https://pypi.org/project/carsons/", "platform": "", "project_url": "https://pypi.org/project/carsons/", "project_urls": {"Homepage": "https://github.com/opusonesolutions/carsons"}, "release_url": "https://pypi.org/project/carsons/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "A python library computing carson's equations.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>carsons</h1>\n<p><a href=\"https://badge.fury.io/py/carsons\" rel=\"nofollow\"><img alt=\"latest release on pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdd2f776e9675a676b49c32c19fe1d213d59dab4/68747470733a2f2f62616467652e667572792e696f2f70792f636172736f6e732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/carsons\" rel=\"nofollow\"><img alt=\"versons of python supported by carsons\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87ff4444dfa0b00a01c8bc2d75ed66d060c25d5f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636172736f6e732e737667\"></a>\n<a href=\"https://github.com/opusonesolutions/carsons/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc0930b2857ff9167c49acd22b0f2a3228c7fc8d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6f7075736f6e65736f6c7574696f6e732f636172736f6e732e737667\"></a>\n<a href=\"https://travis-ci.org/opusonesolutions/carsons\" rel=\"nofollow\"><img alt=\"build passing or failing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9ba72fbe0e3e6a9b6c37a59d368cbf90a6ad8ffb/68747470733a2f2f7472617669732d63692e6f72672f6f7075736f6e65736f6c7574696f6e732f636172736f6e732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/opusonesolutions/carsons?branch=master\" rel=\"nofollow\"><img alt=\"test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f635f8fc5a41a2338485547fd5326472d56a843/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6f7075736f6e65736f6c7574696f6e732f636172736f6e732f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/opusonesolutions/carsons/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1262f91e360cf4948f8752dde0304e7f69dbe48/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f32326366656431383066643630333266653239622f6d61696e7461696e6162696c697479\"></a></p>\n<p>This is an implementation of Carson's Equations, a mathematical model\nfor deriving the equivalent impedance of an AC transmission or\ndistribution line.</p>\n<h2>Implementation</h2>\n<p><code>carsons</code> is developed using python 3.6 support for unicode characters\nlike \u03c0, \u0192, \u03c1, \u03bc, \u03c9 etc. This feature allows us to avoid translating the\nproblem into a more typical programming syntax, so the code is dense and\ncan easily be compared to published formulations of the problem.</p>\n<p>For example, we implement the kron reduction, a matrix decomposition\nstep, using unicode notation to indicate the slightly different meaning\nof impedance values before and after a kron reduction:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">perform_kron_reduction</span><span class=\"p\">(</span><span class=\"n\">z_primitive</span><span class=\"p\">):</span>\n     <span class=\"n\">\u1e90pp</span><span class=\"p\">,</span> <span class=\"n\">\u1e90pn</span> <span class=\"o\">=</span> <span class=\"n\">z_primitive</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">z_primitive</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:]</span>\n     <span class=\"n\">\u1e90np</span><span class=\"p\">,</span> <span class=\"n\">\u1e90nn</span> <span class=\"o\">=</span> <span class=\"n\">z_primitive</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:,</span>  <span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">z_primitive</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:,</span>  <span class=\"mi\">3</span><span class=\"p\">:]</span>\n     <span class=\"n\">Z_abc</span> <span class=\"o\">=</span> <span class=\"n\">\u1e90pp</span> <span class=\"o\">-</span> <span class=\"n\">\u1e90pn</span> <span class=\"o\">@</span> <span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">\u1e90nn</span><span class=\"p\">)</span> <span class=\"o\">@</span> <span class=\"n\">\u1e90np</span>\n     <span class=\"k\">return</span> <span class=\"n\">Z_abc</span>\n</pre>\n<p>Take a look at the <a href=\"https://github.com/opusonesolutions/carsons/blob/add-documentation/carsons/carsons.py\" rel=\"nofollow\">source\ncode</a>\nto see more cool unicode tricks!</p>\n<h2>Installation</h2>\n<pre>~/$ pip install carsons\n</pre>\n<h2>Usage</h2>\n<p>Carsons model requires a line model object that maps each phase to\nproperties of the conductor for that phase.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">carsons</span> <span class=\"kn\">import</span> <span class=\"n\">CarsonsEquations</span><span class=\"p\">,</span> <span class=\"n\">calculate_impedance</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Line</span><span class=\"p\">:</span>\n   <span class=\"n\">geometric_mean_radius</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"n\">geometric_mean_radius_A</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n       <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">resistance</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"n\">per</span><span class=\"o\">-</span><span class=\"n\">length</span> <span class=\"n\">resistance</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">ohms</span><span class=\"o\">/</span><span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">wire_positions</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">cross</span><span class=\"o\">-</span><span class=\"n\">sectional</span> <span class=\"n\">position</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">conductor</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">phases</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n     <span class=\"c1\"># map of phases 'A', 'B', 'C' and 'N&lt;&gt;' which are described in the</span>\n     <span class=\"c1\"># gmr, r and phase_positions attributes</span>\n\n<span class=\"n\">line_impedance</span> <span class=\"o\">=</span> <span class=\"n\">calculate_impedance</span><span class=\"p\">(</span><span class=\"n\">CarsonsEquations</span><span class=\"p\">(</span><span class=\"n\">Line</span><span class=\"p\">()))</span>\n</pre>\n<p>The model supports any combination of ABC phasings (for example BC, BCN\netc...) including systems with multiple neutral cables; any phases that\nare not present in the model will have zeros in the columns and rows\ncorresponding to that phase.</p>\n<p>Multiple neutrals are supported, as long as they have unique labels\nstarting with <code>N</code> (e.g. <code>Neutral1</code>, <code>Neutral2</code>).</p>\n<p>Intermediate results such as primitive impedance matrix are also\navailable.</p>\n<pre><span class=\"n\">z_primitive</span> <span class=\"o\">=</span> <span class=\"n\">CarsonsEquations</span><span class=\"p\">(</span><span class=\"n\">Line</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">build_z_primitive</span><span class=\"p\">()</span>\n</pre>\n<p>For examples of how to use the model, see the <a href=\"https://github.com/opusonesolutions/carsons/blob/master/tests/test_overhead_line.py\" rel=\"nofollow\">overhead wire\ntests</a>.</p>\n<p><code>carsons</code> is tested against several cable configurations from the <a href=\"http://sites.ieee.org/pes-testfeeders/resources/\" rel=\"nofollow\">IEEE\ntest feeders</a>, as well as\nexamples from  EPRI's <a href=\"http://svn.code.sf.net/p/electricdss/code/trunk/Distrib/Doc/TechNote%20CableModelling.pdf\" rel=\"nofollow\">OpenDSS documentation</a>.</p>\n<h3>Concentric Neutral Cable</h3>\n<p><code>carsons</code> also supports modelling of concentric neutral cables of any\nphasings. Its usage is very similar to the example above, only requiring\na few more parameters about the neutral conductors in the line model\nobject.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">carsons</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">ConcentricNeutralCarsonsEquations</span><span class=\"p\">,</span>\n                     <span class=\"n\">calculate_impedance</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cable</span><span class=\"p\">:</span>\n   <span class=\"n\">resistance</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"n\">per</span><span class=\"o\">-</span><span class=\"n\">length</span> <span class=\"n\">resistance</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">ohm</span><span class=\"o\">/</span><span class=\"n\">meters</span>\n       <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">geometric_mean_radius</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"n\">geometric</span> <span class=\"n\">mean</span> <span class=\"n\">radius</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n       <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">wire_positions</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">cross</span><span class=\"o\">-</span><span class=\"n\">sectional</span> <span class=\"n\">position</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">phases</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'NA'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n   <span class=\"n\">neutral_strand_gmr</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'NA'</span><span class=\"p\">:</span> <span class=\"n\">neutral</span> <span class=\"n\">strand</span> <span class=\"n\">gmr</span> <span class=\"n\">of</span> <span class=\"n\">phase</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n       <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">neutral_strand_resistance</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'NA'</span><span class=\"p\">:</span> <span class=\"n\">neutral</span> <span class=\"n\">strand</span> <span class=\"n\">resistance</span> <span class=\"n\">of</span> <span class=\"n\">phase</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">ohm</span><span class=\"o\">/</span><span class=\"n\">meters</span>\n       <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">neutral_strand_diameter</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'NA'</span><span class=\"p\">:</span> <span class=\"n\">neutral</span> <span class=\"n\">strand</span> <span class=\"n\">diameter</span> <span class=\"n\">of</span> <span class=\"n\">phase</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n       <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">diameter_over_neutral</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'NA'</span><span class=\"p\">:</span> <span class=\"n\">diameter</span> <span class=\"n\">over</span> <span class=\"n\">neutral</span> <span class=\"n\">of</span> <span class=\"n\">phase</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n       <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">neutral_strand_count</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n       <span class=\"s1\">'NA'</span><span class=\"p\">:</span> <span class=\"n\">neutral</span> <span class=\"n\">strand</span> <span class=\"n\">count</span> <span class=\"n\">of</span> <span class=\"n\">phase</span> <span class=\"n\">A</span>\n       <span class=\"o\">...</span>\n   <span class=\"p\">}</span>\n\n<span class=\"n\">cable_impedance</span> <span class=\"o\">=</span> <span class=\"n\">calculate_impedance</span><span class=\"p\">(</span><span class=\"n\">ConcentricNeutralCarsonsEquations</span><span class=\"p\">(</span><span class=\"n\">Cable</span><span class=\"p\">()))</span>\n</pre>\n<p>For examples of how to use the model, see the <a href=\"https://github.com/opusonesolutions/carsons/blob/master/tests/test_concentric_neutral_cable.py\" rel=\"nofollow\">concentric cable\ntests</a>.</p>\n<h3>Multi-Conductor Cable</h3>\n<p><code>carsons</code> also supports modelling of phased duplex, triplex, quadruplex cables and triplex secondary.\nIt only requires a few more parameters to describe cable's geometry.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">carsons</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">MultiConductorCarsonsEquations</span><span class=\"p\">,</span>\n                     <span class=\"n\">calculate_impedance</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Cable</span><span class=\"p\">:</span>\n    <span class=\"n\">resistance</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"n\">per</span><span class=\"o\">-</span><span class=\"n\">length</span> <span class=\"n\">resistance</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">ohm</span><span class=\"o\">/</span><span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">geometric_mean_radius</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"n\">geometric</span> <span class=\"n\">mean</span> <span class=\"n\">radius</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">wire_positions</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">cross</span><span class=\"o\">-</span><span class=\"n\">sectional</span> <span class=\"n\">position</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">outside_radius</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"n\">outside</span> <span class=\"n\">radius</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">including</span> <span class=\"n\">insulation</span> <span class=\"ow\">and</span> <span class=\"n\">jacket</span> <span class=\"n\">thickness</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">insulation_thickness</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'A'</span><span class=\"p\">:</span> <span class=\"n\">insulation</span> <span class=\"n\">thickness</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">A</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">phases</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n\n<span class=\"n\">cable_impedance</span> <span class=\"o\">=</span> <span class=\"n\">calculate_impedance</span><span class=\"p\">(</span><span class=\"n\">MultiConductorCarsonsEquations</span><span class=\"p\">(</span><span class=\"n\">Cable</span><span class=\"p\">()))</span>\n</pre>\n<p>To model a triplex secondary cable, the inputs should be keyed on secondary conductors <code>S1</code> and <code>S2</code>. The impedance result\nis a 2 x 2 matrix.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Cable</span><span class=\"p\">:</span>\n    <span class=\"n\">resistance</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'S1'</span><span class=\"p\">:</span> <span class=\"n\">per</span><span class=\"o\">-</span><span class=\"n\">length</span> <span class=\"n\">resistance</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">S1</span> <span class=\"ow\">in</span> <span class=\"n\">ohm</span><span class=\"o\">/</span><span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">geometric_mean_radius</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'S1'</span><span class=\"p\">:</span> <span class=\"n\">geometric</span> <span class=\"n\">mean</span> <span class=\"n\">radius</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">S1</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">wire_positions</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'S1'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">cross</span><span class=\"o\">-</span><span class=\"n\">sectional</span> <span class=\"n\">position</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">S1</span> <span class=\"ow\">in</span> <span class=\"n\">meters</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">outside_radius</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'S1'</span><span class=\"p\">:</span> <span class=\"n\">outside</span> <span class=\"n\">radius</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">S1</span><span class=\"p\">,</span> <span class=\"n\">including</span> <span class=\"n\">insulation</span> <span class=\"ow\">and</span> <span class=\"n\">jacket</span> <span class=\"n\">thickness</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">insulation_thickness</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'S1'</span><span class=\"p\">:</span> <span class=\"n\">insulation</span> <span class=\"n\">thickness</span> <span class=\"n\">of</span> <span class=\"n\">conductor</span> <span class=\"n\">S1</span>\n        <span class=\"o\">...</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">phases</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'S1'</span><span class=\"p\">,</span> <span class=\"o\">...</span> <span class=\"p\">}</span>\n</pre>\n<p>For examples of how to use the model, see the <a href=\"https://github.com/opusonesolutions/carsons/blob/master/tests/test_multi_conductor.py\" rel=\"nofollow\">multi-conductor cable\ntests</a>.</p>\n<h2>Problem Description</h2>\n<p>Carsons equations model an AC transmission or distribution line into an\nequivalent set of phase-phase impedances, which can be used to model the\nline in a power flow analysis.</p>\n<p>For example, say we have a 4-wire system on a utility pole, with <code>A</code>,\n<code>B</code>, <code>C</code> phase conductors as well as a neutral cable N. We know that\nwhen conductors carry electrical current, they exhibit a magnetic field\n--- so its pretty easy to imagine that, e.g., the magnetic field\nproduced by <code>A</code> would interact with the <code>B</code>, <code>C</code>, and <code>N</code> conductors.</p>\n<pre><code>\u2001                       B\n\u2001                         O\n\u2001                         |\n\u2001                         |\n\u2001             A        N  |       C\n\u2001               O        O|         O\n\u2001               ----------|-----------\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001                         |\n\u2001   ==============[Ground]============================\n\u2001   /     /     /     /     /     /     /     /     /\n\u2001        /     /     /     /     /     /     /\n              /     /     /     /     /\n\u2001\n\u2001\n\u2001\n\u2001\n\u2001\n\u2001\n\u2001\n\u2001\n\u2001\n\u2001\n\u2001                A*       N*          C*\n\u2001                  0        0           0\n\u2001\n\u2001                          B*\n\u2001                            0\n\nFigure: Cross-section of a 4-wire distribution line, with\n        ground return.\n</code></pre>\n<p>However, each conductor also has a ground return path (or 'image') ---\nshown as <code>A*</code>, <code>B*</code>, <code>C*</code>, and <code>N*</code> in the figure above --- which is a\nmagnetically induced current path in the ground. When A produces a\nmagnetic field, that field <em>also</em> interacts with <code>B*</code>, <code>C*</code>, <code>N*</code>, <em>and</em>\n<code>A*</code>. Carsons equations model all these interactions and reduce them to\nan equivalent impedance matrix that makes it much easier to model this\nsystem.</p>\n<p>In addition <code>carsons</code> implements the kron reduction, a conversion that\napproximates the impedances caused by neutral cables by incorporating\nthem into the impedances for phase <code>A</code>, <code>B</code>, and <code>C</code>. Since most AC and\nDC powerflow formulations don't model the neutral cable, this is a\nvaluable simplification.</p>\n<h2>References</h2>\n<p>The following works were used to produce this formulation:</p>\n<ul>\n<li><a href=\"https://books.google.ca/books?id=XMl8OU4wIEQC&amp;lpg=SA21-PA4&amp;dq=kron%20reduction%20carson%27s%20equation&amp;pg=SA21-PA4#v=onepage&amp;q=kron%20reduction%20carson's%20equation&amp;f=true\" rel=\"nofollow\">Leonard L. Grigsby -- Electrical Power Generation, Transmission and\nDistribution</a></li>\n<li><a href=\"https://books.google.ca/books?id=1R2OsUGSw_8C&amp;lpg=PA84&amp;dq=carson%27s%20equations&amp;pg=PA85#v=onepage&amp;q=carson's%20equations&amp;f=false\" rel=\"nofollow\">William H. Kersting -- Distribution System Modelling and Analysis\n2e</a></li>\n<li><a href=\"http://sites.ieee.org/pes-testfeeders/files/2017/08/testfeeders.pdf\" rel=\"nofollow\">William H. Kersting, Distribution System Analysis Subcommittee --\nRadial Distribution Test\nFeeders</a></li>\n<li><a href=\"https://vismor.com/documents/power_systems/transmission_lines/S2.SS1.php\" rel=\"nofollow\">Timothy Vismore -- The Vismor\nMilieu</a></li>\n<li><a href=\"https://core.ac.uk/download/pdf/34634673.pdf\" rel=\"nofollow\">Daniel Van Dommelen, Albert Van Ranst, Robert Poncelet -- GIC\nInfluence on Power Systems calculated by Carson's\nmethod</a></li>\n<li><a href=\"http://svn.code.sf.net/p/electricdss/code/trunk/Distrib/Doc/TechNote%20CableModelling.pdf\" rel=\"nofollow\">Andrea Ballanti, Roger Dugan -- Cable Modelling in OpenDSS</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6801021, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6778a29ad22c3db30c576d6ab70a35f8", "sha256": "40c9e79be007fd9ae9bcd57439b2830843ea9ef4695e1fc534267f3705f83dde"}, "downloads": -1, "filename": "carsons-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6778a29ad22c3db30c576d6ab70a35f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2485, "upload_time": "2018-10-12T17:41:34", "upload_time_iso_8601": "2018-10-12T17:41:34.469233Z", "url": "https://files.pythonhosted.org/packages/0c/c0/e1f89416495bce02efcd4f904d436b0582f711863d7a271a427ebf809675/carsons-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a53d8bd1c08cf614dd4a8440a6dc2be0", "sha256": "666999d8291f86ab0711baeb629bdd47b18e12c2bb9f02afb2be3991739f7492"}, "downloads": -1, "filename": "carsons-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a53d8bd1c08cf614dd4a8440a6dc2be0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1415, "upload_time": "2018-10-12T17:41:35", "upload_time_iso_8601": "2018-10-12T17:41:35.592059Z", "url": "https://files.pythonhosted.org/packages/38/a3/47593f7ee89a4d58a7998776914e966699d5634437e1acc5688e44be0ef0/carsons-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "906c063744e754b5b693f7191c3dd41a", "sha256": "11354d2f9fec3d3821cf023b93ca646fe0e62c67f1ffd40e05e72301eea1a0d2"}, "downloads": -1, "filename": "carsons-0.0.2.tar.gz", "has_sig": false, "md5_digest": "906c063744e754b5b693f7191c3dd41a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3748, "upload_time": "2018-11-06T19:09:25", "upload_time_iso_8601": "2018-11-06T19:09:25.127426Z", "url": "https://files.pythonhosted.org/packages/fc/ae/36d77f77e9abb0a46732144ef6e8bc3b672576759a24f8f69e3cf5a6c982/carsons-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "758409100d5ce8076fda8ca451fd18e2", "sha256": "f838ff7058e364f9e6df9b0a229f9588cd6e223660be3eae985d9a149491d975"}, "downloads": -1, "filename": "carsons-0.0.3.tar.gz", "has_sig": false, "md5_digest": "758409100d5ce8076fda8ca451fd18e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6369, "upload_time": "2018-11-13T05:00:33", "upload_time_iso_8601": "2018-11-13T05:00:33.299129Z", "url": "https://files.pythonhosted.org/packages/b8/fc/d35a3436a3b60c7a4e3f3869a8d619d790ee46d897f660325dc5adf87043/carsons-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "dc7f973329962341e314ab593c670099", "sha256": "2815e75f3ff897f194d3910cdad7baf53aa30377d397998862f5b85c7765dc04"}, "downloads": -1, "filename": "carsons-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dc7f973329962341e314ab593c670099", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6366, "upload_time": "2019-01-22T05:16:16", "upload_time_iso_8601": "2019-01-22T05:16:16.763494Z", "url": "https://files.pythonhosted.org/packages/12/1b/d9e9be66938c43d2a0732c76b5e384a8615d382bf35fb0be517faddb7474/carsons-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8e35e9b60efaa594cb1dae94ae12db16", "sha256": "ec2e98a167e9f1329893c1b2f01d489b12aecb60de9a62ed3cdbb6933f6ed0bd"}, "downloads": -1, "filename": "carsons-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8e35e9b60efaa594cb1dae94ae12db16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7503, "upload_time": "2019-04-10T19:36:36", "upload_time_iso_8601": "2019-04-10T19:36:36.877271Z", "url": "https://files.pythonhosted.org/packages/dc/81/912f6b619140e18b6eb3c939a3fe488aaf0fced9e9481162e3b6ac2abdde/carsons-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "94f25f8f76e7cc4557265e869598a02b", "sha256": "42f5c2bc1dbeec9a43ae54cace199e6c8c23344a9ca26e6d95fd4cd64a803c1b"}, "downloads": -1, "filename": "carsons-0.2.1.tar.gz", "has_sig": false, "md5_digest": "94f25f8f76e7cc4557265e869598a02b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7729, "upload_time": "2019-04-11T17:55:50", "upload_time_iso_8601": "2019-04-11T17:55:50.483311Z", "url": "https://files.pythonhosted.org/packages/72/83/b0e2954f67741643b1fd2be62d3f1f6a5b96f99ad1c16fa4a0faabcff2eb/carsons-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "1f38427f9055d1931b597d8aa0ead2f6", "sha256": "bbae34ed600246a7375ba3d20ee7b19bade6f42c0f04fa75a952fb619a414d32"}, "downloads": -1, "filename": "carsons-0.2.2.tar.gz", "has_sig": false, "md5_digest": "1f38427f9055d1931b597d8aa0ead2f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7607, "upload_time": "2019-06-25T13:26:59", "upload_time_iso_8601": "2019-06-25T13:26:59.422787Z", "url": "https://files.pythonhosted.org/packages/8d/65/60d2b48d851a336584949c632f0998e3bbc8f9f1d383e0a3d70fe2e4849b/carsons-0.2.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "3512e628aee41a86dc08ed6d1e7c51c7", "sha256": "1cacdcedf5f621072a362b61597cc409ff730edbedf2be87fd35d0117e7730ee"}, "downloads": -1, "filename": "carsons-0.3.0.tar.gz", "has_sig": false, "md5_digest": "3512e628aee41a86dc08ed6d1e7c51c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7623, "upload_time": "2019-10-25T04:03:24", "upload_time_iso_8601": "2019-10-25T04:03:24.845257Z", "url": "https://files.pythonhosted.org/packages/a9/ee/7b720a75c6fc67a82a50250a3e3187df14cdc22ecae2f77678c924ea42cd/carsons-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "8f56a909954cd09b807aeb2ed5110a46", "sha256": "87bd9569f15720ba692273e2fc7ee99d4737b190637ec8f40a94582a35d8c904"}, "downloads": -1, "filename": "carsons-0.3.1.tar.gz", "has_sig": false, "md5_digest": "8f56a909954cd09b807aeb2ed5110a46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7825, "upload_time": "2019-10-25T15:53:08", "upload_time_iso_8601": "2019-10-25T15:53:08.614537Z", "url": "https://files.pythonhosted.org/packages/56/8d/276fb373ba223a196009cc1180f5a96cd930b4163683f5a2d1201422c9d3/carsons-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "095d6136715f2fcc3dbca2ee319fb115", "sha256": "7b33e1fb5d7b17e1d793d877cf0f6f050f0ae20ae2d0955ce128fd6561c26b73"}, "downloads": -1, "filename": "carsons-0.4.0.tar.gz", "has_sig": false, "md5_digest": "095d6136715f2fcc3dbca2ee319fb115", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8757, "upload_time": "2020-02-11T19:26:45", "upload_time_iso_8601": "2020-02-11T19:26:45.576606Z", "url": "https://files.pythonhosted.org/packages/39/ba/bd8b3210d335a2e45bdb8bbb2a7b88912b2349f0b0387b1f52ebc3b9e9d4/carsons-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "174877bb24e7d8030137796dbec8bb16", "sha256": "3c4c6c7064fba67f626e2eb345df67c52b975071eefc744d791bfd80b5dcdb7c"}, "downloads": -1, "filename": "carsons-0.4.1.tar.gz", "has_sig": false, "md5_digest": "174877bb24e7d8030137796dbec8bb16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8741, "upload_time": "2020-02-12T22:37:32", "upload_time_iso_8601": "2020-02-12T22:37:32.027417Z", "url": "https://files.pythonhosted.org/packages/04/6a/ea9b21f98fd0bed66839a55ea85103bedbe41056e1a75f58d93ee0d8075e/carsons-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "9ee7ee03183c5e89b5efcdc41d16d33b", "sha256": "c7401ebe8ab1fde3b53981d00070bbeddf564b1e65a7a26ab6203ded97c47fc8"}, "downloads": -1, "filename": "carsons-0.5.0.tar.gz", "has_sig": false, "md5_digest": "9ee7ee03183c5e89b5efcdc41d16d33b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8912, "upload_time": "2020-03-12T18:30:27", "upload_time_iso_8601": "2020-03-12T18:30:27.171084Z", "url": "https://files.pythonhosted.org/packages/7b/8b/0fd9675813201e3d4c4573c90d451487c89b92b8681436f06e0b065bf4ac/carsons-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ee7ee03183c5e89b5efcdc41d16d33b", "sha256": "c7401ebe8ab1fde3b53981d00070bbeddf564b1e65a7a26ab6203ded97c47fc8"}, "downloads": -1, "filename": "carsons-0.5.0.tar.gz", "has_sig": false, "md5_digest": "9ee7ee03183c5e89b5efcdc41d16d33b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8912, "upload_time": "2020-03-12T18:30:27", "upload_time_iso_8601": "2020-03-12T18:30:27.171084Z", "url": "https://files.pythonhosted.org/packages/7b/8b/0fd9675813201e3d4c4573c90d451487c89b92b8681436f06e0b065bf4ac/carsons-0.5.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:23 2020"}