{"info": {"author": "Alysson A Costa", "author_email": "alysson.avila.costa@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# simplega\n\n```simplega``` is a simple python implementation of genetic algorithm and it is available through PyPI.\n\n## Install\n```shell\npython3 -m pip install simplega\n```\n\n## Usage\n\nImport the package\n```python\nfrom simplega import Chromosome, Population, GA, GAHelper\n# or\nfrom simplega import *\n```\n\nCreate a fitness function that suits toyr problem\n```python\ndef maximize(chromosome):\n    return sum( [ ord(gene) for gene in chromosome.dna ] )\n```\n\nCreate a new instance of GA specifying the fitness function to be used\n```python\nga = GA(maximize)\n```\n\nPerform the steps of the genetic algorithm and retrieve the fittest chromosome\n```python\nga.run()\nprint(ga.get_fittest())\n```\n\nAll the script - really simple:\n```python\nfrom simplega import *\n\ndef maximize(chromosome):\n    return sum( [ ord(gene) for gene in chromosome.dna ] )\n\nga = GA(maximize)\nga.run()\nprint(ga.get_fittest())\n```\n\n### Advanced usage\n\nYou can customize your instance of GA, replacing any or all of its default values\n```python\nga = GA(fitness_function, \n  genes =  [ chr(n) for n in range(65,91) ], \n  chromosome_size =  10, \n  population_size =  100, \n  generations =  100, \n  crossover_points =  1, \n  elitism_rate =  0.05, \n  crossover_rate =  0.85, \n  mutation_rate =  0.01, \n  )\n```\n\nYou can print the fittest chromosome of each generation with ```ga.run(True)```\n\n## Contributing\n\nPlease submit bugfixes, enhancements, unit tests, usecases and examples with a pull request.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nu12/simplega", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "simplega", "package_url": "https://pypi.org/project/simplega/", "platform": "", "project_url": "https://pypi.org/project/simplega/", "project_urls": {"Homepage": "https://github.com/nu12/simplega"}, "release_url": "https://pypi.org/project/simplega/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A simple implementation of Genetic Algorithm", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>simplega</h1>\n<p><code>simplega</code> is a simple python implementation of genetic algorithm and it is available through PyPI.</p>\n<h2>Install</h2>\n<pre>python3 -m pip install simplega\n</pre>\n<h2>Usage</h2>\n<p>Import the package</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simplega</span> <span class=\"kn\">import</span> <span class=\"n\">Chromosome</span><span class=\"p\">,</span> <span class=\"n\">Population</span><span class=\"p\">,</span> <span class=\"n\">GA</span><span class=\"p\">,</span> <span class=\"n\">GAHelper</span>\n<span class=\"c1\"># or</span>\n<span class=\"kn\">from</span> <span class=\"nn\">simplega</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>Create a fitness function that suits toyr problem</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">maximize</span><span class=\"p\">(</span><span class=\"n\">chromosome</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span> <span class=\"p\">[</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">gene</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gene</span> <span class=\"ow\">in</span> <span class=\"n\">chromosome</span><span class=\"o\">.</span><span class=\"n\">dna</span> <span class=\"p\">]</span> <span class=\"p\">)</span>\n</pre>\n<p>Create a new instance of GA specifying the fitness function to be used</p>\n<pre><span class=\"n\">ga</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"p\">(</span><span class=\"n\">maximize</span><span class=\"p\">)</span>\n</pre>\n<p>Perform the steps of the genetic algorithm and retrieve the fittest chromosome</p>\n<pre><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">get_fittest</span><span class=\"p\">())</span>\n</pre>\n<p>All the script - really simple:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">simplega</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">maximize</span><span class=\"p\">(</span><span class=\"n\">chromosome</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span> <span class=\"p\">[</span> <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"n\">gene</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">gene</span> <span class=\"ow\">in</span> <span class=\"n\">chromosome</span><span class=\"o\">.</span><span class=\"n\">dna</span> <span class=\"p\">]</span> <span class=\"p\">)</span>\n\n<span class=\"n\">ga</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"p\">(</span><span class=\"n\">maximize</span><span class=\"p\">)</span>\n<span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ga</span><span class=\"o\">.</span><span class=\"n\">get_fittest</span><span class=\"p\">())</span>\n</pre>\n<h3>Advanced usage</h3>\n<p>You can customize your instance of GA, replacing any or all of its default values</p>\n<pre><span class=\"n\">ga</span> <span class=\"o\">=</span> <span class=\"n\">GA</span><span class=\"p\">(</span><span class=\"n\">fitness_function</span><span class=\"p\">,</span> \n  <span class=\"n\">genes</span> <span class=\"o\">=</span>  <span class=\"p\">[</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">65</span><span class=\"p\">,</span><span class=\"mi\">91</span><span class=\"p\">)</span> <span class=\"p\">],</span> \n  <span class=\"n\">chromosome_size</span> <span class=\"o\">=</span>  <span class=\"mi\">10</span><span class=\"p\">,</span> \n  <span class=\"n\">population_size</span> <span class=\"o\">=</span>  <span class=\"mi\">100</span><span class=\"p\">,</span> \n  <span class=\"n\">generations</span> <span class=\"o\">=</span>  <span class=\"mi\">100</span><span class=\"p\">,</span> \n  <span class=\"n\">crossover_points</span> <span class=\"o\">=</span>  <span class=\"mi\">1</span><span class=\"p\">,</span> \n  <span class=\"n\">elitism_rate</span> <span class=\"o\">=</span>  <span class=\"mf\">0.05</span><span class=\"p\">,</span> \n  <span class=\"n\">crossover_rate</span> <span class=\"o\">=</span>  <span class=\"mf\">0.85</span><span class=\"p\">,</span> \n  <span class=\"n\">mutation_rate</span> <span class=\"o\">=</span>  <span class=\"mf\">0.01</span><span class=\"p\">,</span> \n  <span class=\"p\">)</span>\n</pre>\n<p>You can print the fittest chromosome of each generation with <code>ga.run(True)</code></p>\n<h2>Contributing</h2>\n<p>Please submit bugfixes, enhancements, unit tests, usecases and examples with a pull request.</p>\n\n          </div>"}, "last_serial": 4306762, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a949e42499a1490c184b663e75e55060", "sha256": "66448c5b32d63b56aa0a7473b4031a2ee1f4a974ff6afda7806095aecff30cef"}, "downloads": -1, "filename": "simplega-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a949e42499a1490c184b663e75e55060", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4980, "upload_time": "2018-09-22T19:16:07", "upload_time_iso_8601": "2018-09-22T19:16:07.113020Z", "url": "https://files.pythonhosted.org/packages/d9/b1/b9471c0ae5fb112715485063518dfcadf775716e2624653e4251ff7ffb8e/simplega-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "496c89ee61e0409e36be3a3dcbc14d7a", "sha256": "1319fb0004b0809dc9876000c59ff3fa0ff90f50546e35409d571f454d9391f5"}, "downloads": -1, "filename": "simplega-1.0.0.tar.gz", "has_sig": false, "md5_digest": "496c89ee61e0409e36be3a3dcbc14d7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4594, "upload_time": "2018-09-22T19:16:08", "upload_time_iso_8601": "2018-09-22T19:16:08.560045Z", "url": "https://files.pythonhosted.org/packages/b8/43/b5775d4ec994ae30a1b99e16a0750f755c0d5d9307bc2ba62e34c7aa6e23/simplega-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "546a3704be2fc072c25a3a762c7d6b0d", "sha256": "4791a1e73dbd1005df249260dc76d6439b72eebd15167ce3395a2cca3f7ccd74"}, "downloads": -1, "filename": "simplega-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "546a3704be2fc072c25a3a762c7d6b0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4865, "upload_time": "2018-09-25T00:57:43", "upload_time_iso_8601": "2018-09-25T00:57:43.746608Z", "url": "https://files.pythonhosted.org/packages/d6/5b/4380d55f5bbb026ae121c4e7bc0b74b8d3642ad02d2cc6c950fb04f6ac1d/simplega-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "846210b5aa2dc250f07dac42232d0152", "sha256": "ad3e62c5223da53ad8089bb73ea31061aa447b9b77aa144776a706ecdce64ac5"}, "downloads": -1, "filename": "simplega-1.0.1.tar.gz", "has_sig": false, "md5_digest": "846210b5aa2dc250f07dac42232d0152", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4503, "upload_time": "2018-09-25T00:57:45", "upload_time_iso_8601": "2018-09-25T00:57:45.083704Z", "url": "https://files.pythonhosted.org/packages/1e/c0/13535ad2790ab6157b4c0074fe22e12e9840a6ff2a4d45cad1ba00caa1dd/simplega-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "546a3704be2fc072c25a3a762c7d6b0d", "sha256": "4791a1e73dbd1005df249260dc76d6439b72eebd15167ce3395a2cca3f7ccd74"}, "downloads": -1, "filename": "simplega-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "546a3704be2fc072c25a3a762c7d6b0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4865, "upload_time": "2018-09-25T00:57:43", "upload_time_iso_8601": "2018-09-25T00:57:43.746608Z", "url": "https://files.pythonhosted.org/packages/d6/5b/4380d55f5bbb026ae121c4e7bc0b74b8d3642ad02d2cc6c950fb04f6ac1d/simplega-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "846210b5aa2dc250f07dac42232d0152", "sha256": "ad3e62c5223da53ad8089bb73ea31061aa447b9b77aa144776a706ecdce64ac5"}, "downloads": -1, "filename": "simplega-1.0.1.tar.gz", "has_sig": false, "md5_digest": "846210b5aa2dc250f07dac42232d0152", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4503, "upload_time": "2018-09-25T00:57:45", "upload_time_iso_8601": "2018-09-25T00:57:45.083704Z", "url": "https://files.pythonhosted.org/packages/1e/c0/13535ad2790ab6157b4c0074fe22e12e9840a6ff2a4d45cad1ba00caa1dd/simplega-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:47 2020"}