{"info": {"author": "Ryan B Au", "author_email": "auryan898@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "NXT-Python is a package for controlling a LEGO NXT robot using the \nPython programming language. It can communicate using either USB or \nBluetooth. It is available under the Gnu GPL v3 license. It is based on \nNXT_Python, where releases halted in May 2007.\n\nRequirements:\n\n    * Python 2.6 or greater, but not 3.x (http://www.python.org)\n    And at least one comm library:\n    * Bluetooth communications:\n        Linux/Windows: PyBluez  (http://code.google.com/p/pybluez/)\n            (package python-bluez in deb-based linuxes)\n        Mac: LightBlue (http://lightblue.sourceforge.net/)\n    * USB communications:\n        PyUSB (http://sourceforge.net/projects/pyusb/)\n    * Fantom communications (tested on Mac OSX):\n        Pyfantom (http://pyfantom.ni.fr.eu.org/)\n\nInstallation (see http://code.google.com/p/nxt-python/wiki/Installation):\n\n    * Untar/unzip source package.\n    * In package directory, run \"python setup.py install\" (as root), or if\n        under windows, double-click install.bat.\n    * To use USB on Linux as non-superuser, at a root terminal type:\n        groupadd lego\n        usermod -a -G lego [username]\n        echo 'SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0694\", GROUP=\"lego\", MODE=\"0660\"' > /etc/udev/rules.d/70-lego.rules\n\nGetting Started:\n\n    Take a look at the examples directory. Feel free to copy that code \ninto your scripts and don't be afraid to experiment! If you are having \ntrouble with something, you may find the solution in the docstrings (for \nexample, help('nxt.sensor.Ultrasonic')) or even in the source code \n(especially for digital sensors).\n\nNotes/FAQ:\n    (I have tried to put the most important stuff first, but it would be a good\n    idea to read the whole section. In any case, read it all the way through\n    before asking for help. Thanks!)\n\n        -=-=-About v2-=-=-\n    This version is part of the 2.x series of releases. Programs \ndesigned for NXT_Python or for the 1.x series of nxt-python will not \nwork with this version. If you are trying to get an old program to work, \nit most likely needs a 1.x series release, which can be downloaded from \nthe nxt-python downloads page at googlecode. New projects should use a \n2.x series release (hint: this is one!) due to the new features and API \nimprovements. Converting old projects is somewhat difficult and not \nofficially supported, though as always you're welcome to ask for help.\n        -=-=-Problems and Their Solutions-=-=-\n    Support for a number of sensors has not been tested at all, due to \nlack of hardware. I have started a project to test this code, but the \ngoing is slow and I still can't test everything. If you have a problem \nwith a digital sensor, see the troubleshooting guide below and don't \nforget to report your trouble!\n    The Synchronized Motor support has not been extensively tested for \naccuracy. It seems to mostly work well but the accuracy of the braking \nfunction and the closeness of the two motors to each other have not been \ngiven a formal scientific assessment.\n    NXT-Python has not been tested and may not work with custom nxt \nfirmware versions (if you don't know what that means, you don't need to \nworry about it). However, if the firmware supports the standard LEGO \nUSB/BT communications protocol, everything should more or less work. \nNXT-Python has been tested with bricks using LEGO firmware version up to \n1.29 and is compatible with protocol version 1.124 (used by most if not \nall of the official firmwares). It has also been reported working with \nLeJOS.\n        -=-=-If you co'd the SVN...-=-=-\n    The arduino directory of an svn checkout (not included with release \npackages) contains a digital sensor unit test system called nxtduemu. It \nis intended for developers and advanced users who are looking to \nexperiment with sensors and the digital sensor framework and classes. \nSee Arduino/README for more info and usage instructions.\n\nSpecific Stability Status:\n    nxt.brick, nxt.telegram, nxt.direct, and nxt.system:\n        Have been redone somewhat as of v2.2.0 but appear to work well.\n    USB Communication System (nxt.usbsock)\n        On Linux: Very stable and extensively tested.\n        On Windows: Somewhat tested; seems to work pretty well.\n        On Mac: Some users having problems.\n    BlueTooth Communication System (nxt.bluesock, nxt.lightblueglue)\n        On Linux: Stable; well tested with both pybluez and lightblue.\n        On Windows: Stable; working last I checked.\n        On Mac: Some users having problems.\n    Internet Communications System (nxt.ipsock)\n        Seems to work for the most part. Occasionally has hiccups.\n    Fantom Communications System (nxt.fantomsock)\n        On Linux: N/A (Fantom driver not supported)\n        On Windows: Not tested.\n        On Mac: Tested, USB interface working, Bluetooth not working.\n    nxt.locator:\n        Tested working with revamped logic and new code in v2.2.0.\n    nxt.motor:\n        Stable except for Synchronized Motor support, which is experimental at\n        this stage and has not been extensively tested.\n    nxt.sensor:\n        Code not specific to a particular sensor is well-tested and working\n        great. More than half of the sensor classes were last reported working;\n        the rest have not to my knowlege been tested and were written blindly\n        from the manuacturers' specifications.\n    nxt.error:\n        If there's a problem with this one, I'm gonna cry.    \n\nContact:\n\n    NXT-Python's Head Developer:\n        Marcus Wanner (marcus@wanners.net)\n    The support and development mailing list:\n        http://groups.google.com/group/nxt-python\n    Report bugs and suggest new features at:\n        http://code.google.com/p/nxt-python/issues/list\n\nThanks to:\n\n    Doug Lau for writing NXT_Python, our starting point.\n    rhn for creating what would become v2, making lots of smaller changes, and\n        reviewing tons of code.\n    mindsensors.com (esp. Ryan Kneip) for helping out with the code for a lot of\n        their sensors, expanding the sensors covered by the type checking\n        database, and providing hardware for testing.\n    HiTechnic for providing identification information for their sensors. I note\n        that they have now included this information in their website. ;)\n    Linus Atorf, Samuel Leeman-Munk, melducky, Simon Levy, Steve Castellotti,\n        Paulo Vieira, zonedabone, migpics, TC Wan, jerradgenson, henryacev,\n        Paul Hollensen, and anyone else I forgot for various fixes and\n        additions.\n    All our users for their interest and support!\n\n\n\nTroubleshooting Digital Sensors (don't read unless you have problems):\nIf you are getting errors, strange behavor, or incorrect values from a digital\nsensor, chances are that there is a bug in our code. Follow these instructions\nto try and find out what's wrong:\n    1. Test the sensor with a different access library to make sure it's working\nright.\n    2. Check your code again. There are some weird \"features\" in the interfaces\nof some of the sensors; make sure you are doing things right.\n    3. Locate the sensor class's source code in nxt-python. It should be\nsomewhere in nxt/sensor/<manufacturer>.py, under the heading \"class SensorName(\nBaseDigitalSensor):\". Read any comments for instructions on certain things.\n\nIf you get to here and are still having a problem, you can either go ahead and\nreport it now or continue to try and find and fix the problem and then report\nit (or not report it at all, but that wouldn't be very nice...).\nPython experience required beyond this point.\n\n    4. Get the sensor's specifications from the manufacturer's website. Make\nsure it includes a table of I2C registers and instructions for using them.\n    5. Pick one of the following depending on what the problem is:\n####Errors:\n    Cause: We screwed up.\n    Solution: Check the line mentioned in the error for incorrect syntax or\nother problem. A bit of python experience and maybe some googling is needed\nhere.\n####Strange Behavior (in sensors with modes/commands):\n    Cause: nxt-python's command enumerations are incorrect.\n    Solution: Verify them using the sensor's specs, and correct any problems.\n    See \"Incorrect Values\" for more.\n####Incorrect Values:\n    Cause: nxt-python is processing the value wrong.\n    Solution: Check what goes on in the sampling method against what the spec\nsays should be done. If there is an inconsistency, try to fix it.\n    Cause: nxt-python has an incorrect register number or type in I2C_ADDRESS.\n    Solution: Verify the address (the number) and the string (the struct format\nstring). To verify the address, use the spec. To verify the struct format, you\nwill need to read this: <http://docs.python.org/library/struct.html#format-\nstrings> or have experience with struct.\nRead the spec for the sensor to determine how the given value should be read,\nthen start at the sample method and read through it, checking for problems as\nyou go. If it seems right, go back to the I2C_ADDRESS chunk (near the top of the\nclass) and make sure that the correct struct format string is being used. The\nmost common problem here is values that are off by plus or minus 128 or 32768\nbecause of an incorrect signed/unsigned setting. This can be fixed by switching\nthe case (as in upper or lower) of the letter in the string. Other problems\ncould include the wrong size (B, H, or L) being used, or, in the two latter\nones, the wrong byte order (< or >). As always, common sense required.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/auryan898/nxt-python2", "keywords": "", "license": "Gnu GPL v3", "maintainer": "", "maintainer_email": "", "name": "nxt-python2", "package_url": "https://pypi.org/project/nxt-python2/", "platform": "", "project_url": "https://pypi.org/project/nxt-python2/", "project_urls": {"Homepage": "https://github.com/auryan898/nxt-python2"}, "release_url": "https://pypi.org/project/nxt-python2/2.2.2/", "requires_dist": null, "requires_python": "", "summary": "LEGO Mindstorms NXT Control Package", "version": "2.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            NXT-Python is a package for controlling a LEGO NXT robot using the <br>Python programming language. It can communicate using either USB or <br>Bluetooth. It is available under the Gnu GPL v3 license. It is based on <br>NXT_Python, where releases halted in May 2007.<br><br>Requirements:<br><br>    * Python 2.6 or greater, but not 3.x (http://www.python.org)<br>    And at least one comm library:<br>    * Bluetooth communications:<br>        Linux/Windows: PyBluez  (http://code.google.com/p/pybluez/)<br>            (package python-bluez in deb-based linuxes)<br>        Mac: LightBlue (http://lightblue.sourceforge.net/)<br>    * USB communications:<br>        PyUSB (http://sourceforge.net/projects/pyusb/)<br>    * Fantom communications (tested on Mac OSX):<br>        Pyfantom (http://pyfantom.ni.fr.eu.org/)<br><br>Installation (see http://code.google.com/p/nxt-python/wiki/Installation):<br><br>    * Untar/unzip source package.<br>    * In package directory, run \"python setup.py install\" (as root), or if<br>        under windows, double-click install.bat.<br>    * To use USB on Linux as non-superuser, at a root terminal type:<br>        groupadd lego<br>        usermod -a -G lego [username]<br>        echo 'SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"0694\", GROUP=\"lego\", MODE=\"0660\"' &gt; /etc/udev/rules.d/70-lego.rules<br><br>Getting Started:<br><br>    Take a look at the examples directory. Feel free to copy that code <br>into your scripts and don't be afraid to experiment! If you are having <br>trouble with something, you may find the solution in the docstrings (for <br>example, help('nxt.sensor.Ultrasonic')) or even in the source code <br>(especially for digital sensors).<br><br>Notes/FAQ:<br>    (I have tried to put the most important stuff first, but it would be a good<br>    idea to read the whole section. In any case, read it all the way through<br>    before asking for help. Thanks!)<br><br>        -=-=-About v2-=-=-<br>    This version is part of the 2.x series of releases. Programs <br>designed for NXT_Python or for the 1.x series of nxt-python will not <br>work with this version. If you are trying to get an old program to work, <br>it most likely needs a 1.x series release, which can be downloaded from <br>the nxt-python downloads page at googlecode. New projects should use a <br>2.x series release (hint: this is one!) due to the new features and API <br>improvements. Converting old projects is somewhat difficult and not <br>officially supported, though as always you're welcome to ask for help.<br>        -=-=-Problems and Their Solutions-=-=-<br>    Support for a number of sensors has not been tested at all, due to <br>lack of hardware. I have started a project to test this code, but the <br>going is slow and I still can't test everything. If you have a problem <br>with a digital sensor, see the troubleshooting guide below and don't <br>forget to report your trouble!<br>    The Synchronized Motor support has not been extensively tested for <br>accuracy. It seems to mostly work well but the accuracy of the braking <br>function and the closeness of the two motors to each other have not been <br>given a formal scientific assessment.<br>    NXT-Python has not been tested and may not work with custom nxt <br>firmware versions (if you don't know what that means, you don't need to <br>worry about it). However, if the firmware supports the standard LEGO <br>USB/BT communications protocol, everything should more or less work. <br>NXT-Python has been tested with bricks using LEGO firmware version up to <br>1.29 and is compatible with protocol version 1.124 (used by most if not <br>all of the official firmwares). It has also been reported working with <br>LeJOS.<br>        -=-=-If you co'd the SVN...-=-=-<br>    The arduino directory of an svn checkout (not included with release <br>packages) contains a digital sensor unit test system called nxtduemu. It <br>is intended for developers and advanced users who are looking to <br>experiment with sensors and the digital sensor framework and classes. <br>See Arduino/README for more info and usage instructions.<br><br>Specific Stability Status:<br>    nxt.brick, nxt.telegram, nxt.direct, and nxt.system:<br>        Have been redone somewhat as of v2.2.0 but appear to work well.<br>    USB Communication System (nxt.usbsock)<br>        On Linux: Very stable and extensively tested.<br>        On Windows: Somewhat tested; seems to work pretty well.<br>        On Mac: Some users having problems.<br>    BlueTooth Communication System (nxt.bluesock, nxt.lightblueglue)<br>        On Linux: Stable; well tested with both pybluez and lightblue.<br>        On Windows: Stable; working last I checked.<br>        On Mac: Some users having problems.<br>    Internet Communications System (nxt.ipsock)<br>        Seems to work for the most part. Occasionally has hiccups.<br>    Fantom Communications System (nxt.fantomsock)<br>        On Linux: N/A (Fantom driver not supported)<br>        On Windows: Not tested.<br>        On Mac: Tested, USB interface working, Bluetooth not working.<br>    nxt.locator:<br>        Tested working with revamped logic and new code in v2.2.0.<br>    nxt.motor:<br>        Stable except for Synchronized Motor support, which is experimental at<br>        this stage and has not been extensively tested.<br>    nxt.sensor:<br>        Code not specific to a particular sensor is well-tested and working<br>        great. More than half of the sensor classes were last reported working;<br>        the rest have not to my knowlege been tested and were written blindly<br>        from the manuacturers' specifications.<br>    nxt.error:<br>        If there's a problem with this one, I'm gonna cry.    <br><br>Contact:<br><br>    NXT-Python's Head Developer:<br>        Marcus Wanner (marcus@wanners.net)<br>    The support and development mailing list:<br>        http://groups.google.com/group/nxt-python<br>    Report bugs and suggest new features at:<br>        http://code.google.com/p/nxt-python/issues/list<br><br>Thanks to:<br><br>    Doug Lau for writing NXT_Python, our starting point.<br>    rhn for creating what would become v2, making lots of smaller changes, and<br>        reviewing tons of code.<br>    mindsensors.com (esp. Ryan Kneip) for helping out with the code for a lot of<br>        their sensors, expanding the sensors covered by the type checking<br>        database, and providing hardware for testing.<br>    HiTechnic for providing identification information for their sensors. I note<br>        that they have now included this information in their website. ;)<br>    Linus Atorf, Samuel Leeman-Munk, melducky, Simon Levy, Steve Castellotti,<br>        Paulo Vieira, zonedabone, migpics, TC Wan, jerradgenson, henryacev,<br>        Paul Hollensen, and anyone else I forgot for various fixes and<br>        additions.<br>    All our users for their interest and support!<br><br><br><br>Troubleshooting Digital Sensors (don't read unless you have problems):<br>If you are getting errors, strange behavor, or incorrect values from a digital<br>sensor, chances are that there is a bug in our code. Follow these instructions<br>to try and find out what's wrong:<br>    1. Test the sensor with a different access library to make sure it's working<br>right.<br>    2. Check your code again. There are some weird \"features\" in the interfaces<br>of some of the sensors; make sure you are doing things right.<br>    3. Locate the sensor class's source code in nxt-python. It should be<br>somewhere in nxt/sensor/&lt;manufacturer&gt;.py, under the heading \"class SensorName(<br>BaseDigitalSensor):\". Read any comments for instructions on certain things.<br><br>If you get to here and are still having a problem, you can either go ahead and<br>report it now or continue to try and find and fix the problem and then report<br>it (or not report it at all, but that wouldn't be very nice...).<br>Python experience required beyond this point.<br><br>    4. Get the sensor's specifications from the manufacturer's website. Make<br>sure it includes a table of I2C registers and instructions for using them.<br>    5. Pick one of the following depending on what the problem is:<br>####Errors:<br>    Cause: We screwed up.<br>    Solution: Check the line mentioned in the error for incorrect syntax or<br>other problem. A bit of python experience and maybe some googling is needed<br>here.<br>####Strange Behavior (in sensors with modes/commands):<br>    Cause: nxt-python's command enumerations are incorrect.<br>    Solution: Verify them using the sensor's specs, and correct any problems.<br>    See \"Incorrect Values\" for more.<br>####Incorrect Values:<br>    Cause: nxt-python is processing the value wrong.<br>    Solution: Check what goes on in the sampling method against what the spec<br>says should be done. If there is an inconsistency, try to fix it.<br>    Cause: nxt-python has an incorrect register number or type in I2C_ADDRESS.<br>    Solution: Verify the address (the number) and the string (the struct format<br>string). To verify the address, use the spec. To verify the struct format, you<br>will need to read this: &lt;http://docs.python.org/library/struct.html#format-<br>strings&gt; or have experience with struct.<br>Read the spec for the sensor to determine how the given value should be read,<br>then start at the sample method and read through it, checking for problems as<br>you go. If it seems right, go back to the I2C_ADDRESS chunk (near the top of the<br>class) and make sure that the correct struct format string is being used. The<br>most common problem here is values that are off by plus or minus 128 or 32768<br>because of an incorrect signed/unsigned setting. This can be fixed by switching<br>the case (as in upper or lower) of the letter in the string. Other problems<br>could include the wrong size (B, H, or L) being used, or, in the two latter<br>ones, the wrong byte order (&lt; or &gt;). As always, common sense required.\n          </div>"}, "last_serial": 3358977, "releases": {"2.2.2": [{"comment_text": "", "digests": {"md5": "21d8c0c27a247c1e3a27b2e9fcbb36b6", "sha256": "decf5a38d5247981890f19f22b00ddec555d03687ee20a536fcc7f5e5d34be93"}, "downloads": -1, "filename": "nxt-python2-2.2.2.zip", "has_sig": false, "md5_digest": "21d8c0c27a247c1e3a27b2e9fcbb36b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78231, "upload_time": "2017-11-23T17:26:41", "upload_time_iso_8601": "2017-11-23T17:26:41.316336Z", "url": "https://files.pythonhosted.org/packages/56/58/c46f16a02b2aa4abba45b9be0b04a3265dfb3952de942138d31d13f825b6/nxt-python2-2.2.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "21d8c0c27a247c1e3a27b2e9fcbb36b6", "sha256": "decf5a38d5247981890f19f22b00ddec555d03687ee20a536fcc7f5e5d34be93"}, "downloads": -1, "filename": "nxt-python2-2.2.2.zip", "has_sig": false, "md5_digest": "21d8c0c27a247c1e3a27b2e9fcbb36b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 78231, "upload_time": "2017-11-23T17:26:41", "upload_time_iso_8601": "2017-11-23T17:26:41.316336Z", "url": "https://files.pythonhosted.org/packages/56/58/c46f16a02b2aa4abba45b9be0b04a3265dfb3952de942138d31d13f825b6/nxt-python2-2.2.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:44:01 2020"}