{"info": {"author": "Drew J. Sonne", "author_email": "drew.sonne@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# aws-tag-a-day\nA tool for simplifying multiple people fixing tags by proposing a tag a day for resources with those missing tags.\n\n[![Build Status](https://travis-ci.com/bliseng/aws-tag-a-day.svg?branch=master)](https://travis-ci.com/bliseng/aws-tag-a-day)\n[![PyPI version](https://badge.fury.io/py/aws-tag-a-day.svg)](https://badge.fury.io/py/aws-tag-a-day)\n\n## Installation\n\n```bash\npip install aws-tag-a-day\n```\n\n## Quickstart\n\n```bash\n# Generate configuration file\nmkdir -p ~/.config/tagaday/\ncat > ~/.config/tagaday/config.yml <<EOY\ndynamodb-table-name: 'tag-proposals'\ndynamodb-table-region: 'eu-west-2'\nservices:\n- rds\n- ec2\n- s3\n- emr\nregions:\n- us-east-1\n- us-west-1\n- eu-west-1\n- ap-southeast-1\n- ap-northeast-1\nrequired-tags:\n- Project\n- Owner\n- Name\n- Service\n- Availability\nEOY\n\n# Create dynamodb table defined in the above config file.\n# If the table exists already, the utility will not overwrite it.\ntag-a-day-initialise\n\n# Start proposing tags\ntag-a-day\n\n```\n\n## Motivation\nThere are a lot of tools for handling batch tagging, but not many tools for aiding in filling in empty tags on a large scale.\n\nThe suggested workflow is:\n\n1. Create configuration file.\n2. Create a DynamoDB table by running `tag-a-day-initialise`. This is not a destructive operation, and existing tables will not be modified or removed. The utility will throw an error if the table already exists.\n3. Have 1 or more people start using `tag-a-day`.\n4. Reconcile any divergent or duplicate tags by running `tag-a-day-reconcile`, and discuss any duplicate tagging suggestions.\n5. Apply the tags to the resources.\n\n__NOTE__: Steps 4 and 5 are not yet implemented by this utility.\n\n## Reference\n\n### Supported Services\n\n - [emr](./tag_a_day/services/emr.py)\n - [ec2](./tag_a_day/services/ec2.py)\n - [s3](./tag_a_day/services/s3.py)\n - [rds](./tag_a_day/services/rds.py)\n\n### Configuration File & CLI options\n\n| Configuration File Key   | Type   | CLI Option                | Type                   | Description                                                                                                                                                                      |\n|--------------------------|--------|---------------------------|------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `regions:`               | List   | `--regions`               | Comma separated string | List of regions to audit resources in                                                                                                                                            |\n| `services:`              | List   | `--services`              | Comma separated string | List of services to audit                                                                                                                                                        |\n| `required-tags:`         | List   | `--required-tags`         | Comma separated string | List of tags which must be present on all resources                                                                                                                              |\n| `dynamodb-table-name:`   | String | `--dynamodb-table-name`   | String                 | Name of the DynamoDB table to propose tags to. If used in conjunction with `tag-a-day-initialise`, this will be the DynamoDB table to be created.                                |\n| `dynamodb-table-region:` | String | `--dynamodb-table-region` | String                 | AWS Region in which to look for `--dynamodb-table-name`. If used in conjunction with `tag-a-day-initialise` this will be the region which the DynamoDB table will be created in. |\n|                          |        | `--resource-ids`          | Comma separated string | List of resource ids, to filter only for specific resources to propose tags for.                                                                                                 |\n|                          |        | `--profile-path`          | String                 | File path pointing to a folder where tag profiles are located                                                                                                                    |\n|                          |        | `--profile`               | String                 | File name (including .yaml/.yml suffix) point to a particular tagging profile in `--profile-path`                                                                                |\n\n## Extending\n`aws-tag-a-day` is built on a plugin architecture, using `entry_point` in [`setuptools`](https://setuptools.readthedocs.io/en/latest/setuptools.html).\n\nTo add more TagHandlers, you can either add classes to this repo, or create a new python package with its\nown setup.py, and hook into the plugin architecture using the `tag_a_day.tag_handlers` entrypoint.\n\n1. Create a new class, inheriting from `tag_a_day.services.service.Service`\n   ```python\n   from tag_a_day.services.service import Service\n\n   class CustomTagHandler(Service): pass\n   ```\n\n2. Set a unique name for the Tag handler\n   ```python\n   from tag_a_day.services.service import Service\n\n   class CustomTagHandler(Service):\n      name='custom_handler'\n   ```\n\n3. Create two stub methods, `resources` and `handler` matching the signatures below:\n   ```python\n   from tag_a_day.services.service import Service\n\n   class VpcTagHandler(Service):\n      name='ec2_vpc'\n\n      def resources(self, session):\n        pass\n\n      def handler(self, resource, expected_tags, region, session, cache, proposals):\n        pass\n   ```\n\n4. Implement `resources(...)` to return an iterable. If using boto3 resources,\nthis should look like:\n   ```python\n     def resources(self, session):\n       return session.resource('ec2').vpc.all()\n   ```\n   If using boto3 client, don't forget to implement pagination, and should look like:\n   ```python\n     def resources(self, session):\n       ec2 = session.client('ec2')\n       paginator = ec2.get_paginator('describe_vpcs')\n\n       for page in paginator.paginate():\n         for vpc in page:\n           yield vpc \n   ```\n\n5. Implement `handle(...)` to yield a payload describing the tag proposal (example is using boto3.resources):\n    ```python\n      def handle(self, vpc, expected_tags, region, session, cache, proposals):\n        # This boilerplate logic will handle checking the tags which have already been\n        # evaluated for this user.\n        evaluated_tags = self._progress.evaluated_tags(vpc.vpc_id)\n        vpc_info, missing_tags = \\\n            self._build_tag_sets(expected_tags, evaluated_tags, vpc.tags)\n\n        # Check if the user has proposed values for all the missing tags \n        if self._progress.has_finished(vpc.vpc_id, expected_tags):\n            # Print a skip message\n            self._skip(vpc.vpc_id)\n            return\n\n        if any(missing_tags):\n          # Print information about this resource, which could be useful \n          # to provide context around tagging.\n          self._print_table(\n            (\"VpcID\", vpc.vpc_id),\n            *vpc_info\n          )\n\n          # Allow the user to skip auditing this resource       \n          if self._user_skip():\n            return\n\n          # Build our user prompt to ask for new tags\n          tag_prompt = self._build_tag_prompt(missing_tags)\n          for tag_key in missing_tags:\n            # Yield a proposal for a new tag key/value pair for the given\n            # resource id.\n            yield {\n              'resource_id': vpc.vpc_id,\n              'tag_key': tag_key,\n              'tag_value': tag_prompt(tag_key),\n            }\n    ```\n\n6. Finally, add the entrypoint by extending `setup.py`:\n    ```python\n    from setuptools import setup\n\n    setup(\n      ...,\n      entry_points={\n        'tag_a_day.tag_handlers': [\n          'vpc = my_package.my_module:VPCTagHandler',\n        ],\n      }\n    )\n\n\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bliseng/aws-tag-a-day", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "aws-tag-a-day", "package_url": "https://pypi.org/project/aws-tag-a-day/", "platform": "", "project_url": "https://pypi.org/project/aws-tag-a-day/", "project_urls": {"Homepage": "https://github.com/bliseng/aws-tag-a-day"}, "release_url": "https://pypi.org/project/aws-tag-a-day/0.1.10/", "requires_dist": ["tabulate", "hconf", "pyyaml", "boto3", "setuptools (>=13)"], "requires_python": "", "summary": "A tool for simplifying swarming of fixing AWS tags", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aws-tag-a-day</h1>\n<p>A tool for simplifying multiple people fixing tags by proposing a tag a day for resources with those missing tags.</p>\n<p><a href=\"https://travis-ci.com/bliseng/aws-tag-a-day\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40364fa368b06c767717a00dec153f1f6cce49aa/68747470733a2f2f7472617669732d63692e636f6d2f626c6973656e672f6177732d7461672d612d6461792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/aws-tag-a-day\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8eb4cd76778784f1b8d276039f353e573143db1e/68747470733a2f2f62616467652e667572792e696f2f70792f6177732d7461672d612d6461792e737667\"></a></p>\n<h2>Installation</h2>\n<pre>pip install aws-tag-a-day\n</pre>\n<h2>Quickstart</h2>\n<pre><span class=\"c1\"># Generate configuration file</span>\nmkdir -p ~/.config/tagaday/\ncat &gt; ~/.config/tagaday/config.yml <span class=\"s\">&lt;&lt;EOY</span>\n<span class=\"s\">dynamodb-table-name: 'tag-proposals'</span>\n<span class=\"s\">dynamodb-table-region: 'eu-west-2'</span>\n<span class=\"s\">services:</span>\n<span class=\"s\">- rds</span>\n<span class=\"s\">- ec2</span>\n<span class=\"s\">- s3</span>\n<span class=\"s\">- emr</span>\n<span class=\"s\">regions:</span>\n<span class=\"s\">- us-east-1</span>\n<span class=\"s\">- us-west-1</span>\n<span class=\"s\">- eu-west-1</span>\n<span class=\"s\">- ap-southeast-1</span>\n<span class=\"s\">- ap-northeast-1</span>\n<span class=\"s\">required-tags:</span>\n<span class=\"s\">- Project</span>\n<span class=\"s\">- Owner</span>\n<span class=\"s\">- Name</span>\n<span class=\"s\">- Service</span>\n<span class=\"s\">- Availability</span>\n<span class=\"s\">EOY</span>\n\n<span class=\"c1\"># Create dynamodb table defined in the above config file.</span>\n<span class=\"c1\"># If the table exists already, the utility will not overwrite it.</span>\ntag-a-day-initialise\n\n<span class=\"c1\"># Start proposing tags</span>\ntag-a-day\n</pre>\n<h2>Motivation</h2>\n<p>There are a lot of tools for handling batch tagging, but not many tools for aiding in filling in empty tags on a large scale.</p>\n<p>The suggested workflow is:</p>\n<ol>\n<li>Create configuration file.</li>\n<li>Create a DynamoDB table by running <code>tag-a-day-initialise</code>. This is not a destructive operation, and existing tables will not be modified or removed. The utility will throw an error if the table already exists.</li>\n<li>Have 1 or more people start using <code>tag-a-day</code>.</li>\n<li>Reconcile any divergent or duplicate tags by running <code>tag-a-day-reconcile</code>, and discuss any duplicate tagging suggestions.</li>\n<li>Apply the tags to the resources.</li>\n</ol>\n<p><strong>NOTE</strong>: Steps 4 and 5 are not yet implemented by this utility.</p>\n<h2>Reference</h2>\n<h3>Supported Services</h3>\n<ul>\n<li><a href=\"./tag_a_day/services/emr.py\" rel=\"nofollow\">emr</a></li>\n<li><a href=\"./tag_a_day/services/ec2.py\" rel=\"nofollow\">ec2</a></li>\n<li><a href=\"./tag_a_day/services/s3.py\" rel=\"nofollow\">s3</a></li>\n<li><a href=\"./tag_a_day/services/rds.py\" rel=\"nofollow\">rds</a></li>\n</ul>\n<h3>Configuration File &amp; CLI options</h3>\n<table>\n<thead>\n<tr>\n<th>Configuration File Key</th>\n<th>Type</th>\n<th>CLI Option</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>regions:</code></td>\n<td>List</td>\n<td><code>--regions</code></td>\n<td>Comma separated string</td>\n<td>List of regions to audit resources in</td>\n</tr>\n<tr>\n<td><code>services:</code></td>\n<td>List</td>\n<td><code>--services</code></td>\n<td>Comma separated string</td>\n<td>List of services to audit</td>\n</tr>\n<tr>\n<td><code>required-tags:</code></td>\n<td>List</td>\n<td><code>--required-tags</code></td>\n<td>Comma separated string</td>\n<td>List of tags which must be present on all resources</td>\n</tr>\n<tr>\n<td><code>dynamodb-table-name:</code></td>\n<td>String</td>\n<td><code>--dynamodb-table-name</code></td>\n<td>String</td>\n<td>Name of the DynamoDB table to propose tags to. If used in conjunction with <code>tag-a-day-initialise</code>, this will be the DynamoDB table to be created.</td>\n</tr>\n<tr>\n<td><code>dynamodb-table-region:</code></td>\n<td>String</td>\n<td><code>--dynamodb-table-region</code></td>\n<td>String</td>\n<td>AWS Region in which to look for <code>--dynamodb-table-name</code>. If used in conjunction with <code>tag-a-day-initialise</code> this will be the region which the DynamoDB table will be created in.</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>--resource-ids</code></td>\n<td>Comma separated string</td>\n<td>List of resource ids, to filter only for specific resources to propose tags for.</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>--profile-path</code></td>\n<td>String</td>\n<td>File path pointing to a folder where tag profiles are located</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>--profile</code></td>\n<td>String</td>\n<td>File name (including .yaml/.yml suffix) point to a particular tagging profile in <code>--profile-path</code></td>\n</tr></tbody></table>\n<h2>Extending</h2>\n<p><code>aws-tag-a-day</code> is built on a plugin architecture, using <code>entry_point</code> in <a href=\"https://setuptools.readthedocs.io/en/latest/setuptools.html\" rel=\"nofollow\"><code>setuptools</code></a>.</p>\n<p>To add more TagHandlers, you can either add classes to this repo, or create a new python package with its\nown setup.py, and hook into the plugin architecture using the <code>tag_a_day.tag_handlers</code> entrypoint.</p>\n<ol>\n<li>\n<p>Create a new class, inheriting from <code>tag_a_day.services.service.Service</code></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tag_a_day.services.service</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomTagHandler</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</pre>\n</li>\n<li>\n<p>Set a unique name for the Tag handler</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tag_a_day.services.service</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomTagHandler</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span>\n   <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'custom_handler'</span>\n</pre>\n</li>\n<li>\n<p>Create two stub methods, <code>resources</code> and <code>handler</code> matching the signatures below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tag_a_day.services.service</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">VpcTagHandler</span><span class=\"p\">(</span><span class=\"n\">Service</span><span class=\"p\">):</span>\n   <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'ec2_vpc'</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">):</span>\n     <span class=\"k\">pass</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">resource</span><span class=\"p\">,</span> <span class=\"n\">expected_tags</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"p\">,</span> <span class=\"n\">proposals</span><span class=\"p\">):</span>\n     <span class=\"k\">pass</span>\n</pre>\n</li>\n<li>\n<p>Implement <code>resources(...)</code> to return an iterable. If using boto3 resources,\nthis should look like:</p>\n<pre>  <span class=\"k\">def</span> <span class=\"nf\">resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">resource</span><span class=\"p\">(</span><span class=\"s1\">'ec2'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">vpc</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<p>If using boto3 client, don't forget to implement pagination, and should look like:</p>\n<pre>  <span class=\"k\">def</span> <span class=\"nf\">resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">):</span>\n    <span class=\"n\">ec2</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s1\">'ec2'</span><span class=\"p\">)</span>\n    <span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">ec2</span><span class=\"o\">.</span><span class=\"n\">get_paginator</span><span class=\"p\">(</span><span class=\"s1\">'describe_vpcs'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">paginate</span><span class=\"p\">():</span>\n      <span class=\"k\">for</span> <span class=\"n\">vpc</span> <span class=\"ow\">in</span> <span class=\"n\">page</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">vpc</span> \n</pre>\n</li>\n<li>\n<p>Implement <code>handle(...)</code> to yield a payload describing the tag proposal (example is using boto3.resources):</p>\n<pre>  <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">vpc</span><span class=\"p\">,</span> <span class=\"n\">expected_tags</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"p\">,</span> <span class=\"n\">proposals</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This boilerplate logic will handle checking the tags which have already been</span>\n    <span class=\"c1\"># evaluated for this user.</span>\n    <span class=\"n\">evaluated_tags</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_progress</span><span class=\"o\">.</span><span class=\"n\">evaluated_tags</span><span class=\"p\">(</span><span class=\"n\">vpc</span><span class=\"o\">.</span><span class=\"n\">vpc_id</span><span class=\"p\">)</span>\n    <span class=\"n\">vpc_info</span><span class=\"p\">,</span> <span class=\"n\">missing_tags</span> <span class=\"o\">=</span> \\\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_build_tag_sets</span><span class=\"p\">(</span><span class=\"n\">expected_tags</span><span class=\"p\">,</span> <span class=\"n\">evaluated_tags</span><span class=\"p\">,</span> <span class=\"n\">vpc</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Check if the user has proposed values for all the missing tags </span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_progress</span><span class=\"o\">.</span><span class=\"n\">has_finished</span><span class=\"p\">(</span><span class=\"n\">vpc</span><span class=\"o\">.</span><span class=\"n\">vpc_id</span><span class=\"p\">,</span> <span class=\"n\">expected_tags</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Print a skip message</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_skip</span><span class=\"p\">(</span><span class=\"n\">vpc</span><span class=\"o\">.</span><span class=\"n\">vpc_id</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">missing_tags</span><span class=\"p\">):</span>\n      <span class=\"c1\"># Print information about this resource, which could be useful </span>\n      <span class=\"c1\"># to provide context around tagging.</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_print_table</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"s2\">\"VpcID\"</span><span class=\"p\">,</span> <span class=\"n\">vpc</span><span class=\"o\">.</span><span class=\"n\">vpc_id</span><span class=\"p\">),</span>\n        <span class=\"o\">*</span><span class=\"n\">vpc_info</span>\n      <span class=\"p\">)</span>\n\n      <span class=\"c1\"># Allow the user to skip auditing this resource       </span>\n      <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_user_skip</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span>\n\n      <span class=\"c1\"># Build our user prompt to ask for new tags</span>\n      <span class=\"n\">tag_prompt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_build_tag_prompt</span><span class=\"p\">(</span><span class=\"n\">missing_tags</span><span class=\"p\">)</span>\n      <span class=\"k\">for</span> <span class=\"n\">tag_key</span> <span class=\"ow\">in</span> <span class=\"n\">missing_tags</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Yield a proposal for a new tag key/value pair for the given</span>\n        <span class=\"c1\"># resource id.</span>\n        <span class=\"k\">yield</span> <span class=\"p\">{</span>\n          <span class=\"s1\">'resource_id'</span><span class=\"p\">:</span> <span class=\"n\">vpc</span><span class=\"o\">.</span><span class=\"n\">vpc_id</span><span class=\"p\">,</span>\n          <span class=\"s1\">'tag_key'</span><span class=\"p\">:</span> <span class=\"n\">tag_key</span><span class=\"p\">,</span>\n          <span class=\"s1\">'tag_value'</span><span class=\"p\">:</span> <span class=\"n\">tag_prompt</span><span class=\"p\">(</span><span class=\"n\">tag_key</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n</pre>\n</li>\n<li>\n<p>Finally, add the entrypoint by extending <code>setup.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">setuptools</span> <span class=\"kn\">import</span> <span class=\"n\">setup</span>\n\n<span class=\"n\">setup</span><span class=\"p\">(</span>\n  <span class=\"o\">...</span><span class=\"p\">,</span>\n  <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'tag_a_day.tag_handlers'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"s1\">'vpc = my_package.my_module:VPCTagHandler'</span><span class=\"p\">,</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<pre><code>\n</code></pre>\n\n          </div>"}, "last_serial": 4382079, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7416a8130a59ef8b66b21896c69f2a87", "sha256": "84b827f5a7241345ee6ad6d2ddccdb639609dc97f7b515ec935b8b235a5e95af"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7416a8130a59ef8b66b21896c69f2a87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13908, "upload_time": "2018-10-15T09:08:41", "upload_time_iso_8601": "2018-10-15T09:08:41.172228Z", "url": "https://files.pythonhosted.org/packages/01/bc/086893896cd58c4bc3d2ed70f8667796c75d5c3cdb60b159108f759b7cec/aws_tag_a_day-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0002b88845b6c363967e7024ff571055", "sha256": "6e0af2c3a2f3726e7186c6439f3a6c6c18fc0b698c348b25055a5bac358b6d3f"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0002b88845b6c363967e7024ff571055", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5335, "upload_time": "2018-10-15T09:08:42", "upload_time_iso_8601": "2018-10-15T09:08:42.417669Z", "url": "https://files.pythonhosted.org/packages/f9/7c/d35b3d77285efd79718e0f2da950b102d4e27bd263c5cff09191f18d78ce/aws-tag-a-day-0.1.0.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "b6b587a7d6aa5702a6f1f052d2c59924", "sha256": "21bff0824e13bd0528debe0836998cf083971445b72d120ba66c79df477170ff"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "b6b587a7d6aa5702a6f1f052d2c59924", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18302, "upload_time": "2018-10-16T15:15:35", "upload_time_iso_8601": "2018-10-16T15:15:35.630813Z", "url": "https://files.pythonhosted.org/packages/1d/e0/630a9b271c2c0209decb771798869e4b0b11b45292ee570b67d21cc5f26a/aws_tag_a_day-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61f069e299a6c199754b43e56ba541d4", "sha256": "e1d875cdb01d0fcd07f7f165517cf41c90fbe4920765002da2341109f74b4090"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.10.tar.gz", "has_sig": false, "md5_digest": "61f069e299a6c199754b43e56ba541d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9901, "upload_time": "2018-10-16T15:15:37", "upload_time_iso_8601": "2018-10-16T15:15:37.756550Z", "url": "https://files.pythonhosted.org/packages/5a/10/002fa8a53b75a13407353f9323274b9ac6e2a9352a4ca12eccf25d028aa2/aws-tag-a-day-0.1.10.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "aa749371d280598faf2da970ee12b4d0", "sha256": "0354531e49f46d5b3e94c1f6bcc52039398674c2b0365f28f952a67db480098b"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "aa749371d280598faf2da970ee12b4d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14767, "upload_time": "2018-10-15T13:55:12", "upload_time_iso_8601": "2018-10-15T13:55:12.911103Z", "url": "https://files.pythonhosted.org/packages/9c/f9/e82cfe2d43ef0174b61f1fa6622d21a99b7f28f38606ab944a08cb618200/aws_tag_a_day-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91ae75fcdcc9d812718752869db49ce3", "sha256": "0eb826303c847b38e84aeb5986df45ba07db26c14864024236f2ff96056d22d7"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.3.tar.gz", "has_sig": false, "md5_digest": "91ae75fcdcc9d812718752869db49ce3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6466, "upload_time": "2018-10-15T13:55:14", "upload_time_iso_8601": "2018-10-15T13:55:14.103766Z", "url": "https://files.pythonhosted.org/packages/94/d0/a716dfaae6256b199b3f30295d2caef6d1a5ca3cef0008d0003ccb1556aa/aws-tag-a-day-0.1.3.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "85278f8f766eb7a41c3242ea63ab3652", "sha256": "74b25ccb76c9932ec0d29281d4dc0bad76f515c74aadf8bba26db8ada2221406"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "85278f8f766eb7a41c3242ea63ab3652", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16062, "upload_time": "2018-10-15T16:02:43", "upload_time_iso_8601": "2018-10-15T16:02:43.916920Z", "url": "https://files.pythonhosted.org/packages/6b/f1/b3934ca53a42fe5571c5d01d7cfdf476bacc69d226e627ceb1c5df0593b7/aws_tag_a_day-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9319bc281d68afb91b3001cd409b67b0", "sha256": "714d646d0c0078b0342573c991b56f1b8e3b62e3d714aa5427211ef43f7e6059"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.5.tar.gz", "has_sig": false, "md5_digest": "9319bc281d68afb91b3001cd409b67b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8075, "upload_time": "2018-10-15T16:02:45", "upload_time_iso_8601": "2018-10-15T16:02:45.142688Z", "url": "https://files.pythonhosted.org/packages/1e/e2/20960fe02e898dc12a13cf0b249e36ecbfca7cf72b7482ce370bae8295a7/aws-tag-a-day-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "6f4b6e3f4341e44d7dd7090424605350", "sha256": "ec3d7e4421b3744e4fc27e9181480c7cb86537e2209086d46ba44b5e9028efc7"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6f4b6e3f4341e44d7dd7090424605350", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16123, "upload_time": "2018-10-16T08:05:03", "upload_time_iso_8601": "2018-10-16T08:05:03.148135Z", "url": "https://files.pythonhosted.org/packages/b3/26/3bc5b209c63d039a48277c73106f5dc0c158dd8e52366dfd8175b62da592/aws_tag_a_day-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "429c6911a7421dd6743e9d6758dcb109", "sha256": "b82fe703f23603217d55cc90e821ad1457420588514d35026346e36208cf956e"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.6.tar.gz", "has_sig": false, "md5_digest": "429c6911a7421dd6743e9d6758dcb109", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8144, "upload_time": "2018-10-16T08:05:05", "upload_time_iso_8601": "2018-10-16T08:05:05.182655Z", "url": "https://files.pythonhosted.org/packages/25/80/7de1384bb778ecd36db56e28d092989fdb356b8666804a5865b758cbce38/aws-tag-a-day-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "a7fd16cb8f1ff20b3f8f301b931bb07e", "sha256": "a2ab6a786d79ae52818ebe22861e1f4540f8a835c31072621866c1e09bf1e4bb"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a7fd16cb8f1ff20b3f8f301b931bb07e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16698, "upload_time": "2018-10-16T09:56:59", "upload_time_iso_8601": "2018-10-16T09:56:59.148779Z", "url": "https://files.pythonhosted.org/packages/9d/e0/2548c57fa4f67ea997bcd48d19949e23087636b8d3cd4d4eed6e7c5b48ba/aws_tag_a_day-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d1fdc480712a172748fe038e9bbf122", "sha256": "42a5ee46d5c4accaa39645ede46cb91ffb00c92693a784c2372126b7b9e601d8"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.7.tar.gz", "has_sig": false, "md5_digest": "0d1fdc480712a172748fe038e9bbf122", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8736, "upload_time": "2018-10-16T09:57:01", "upload_time_iso_8601": "2018-10-16T09:57:01.546606Z", "url": "https://files.pythonhosted.org/packages/2f/a4/eb239bd73a4ca0cca7391b033de5bb6da9ed6805be18d3c4099a098ab9b2/aws-tag-a-day-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "c381d7bbbf1c5765be9f1e66af141956", "sha256": "c026bcd017bb5f1e3763b7c766d4ca246676679888e535c4a417cd4367510c00"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "c381d7bbbf1c5765be9f1e66af141956", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17052, "upload_time": "2018-10-16T10:11:10", "upload_time_iso_8601": "2018-10-16T10:11:10.076880Z", "url": "https://files.pythonhosted.org/packages/6d/ab/4fda302d1b1b7375cced4216b1c7cbcc36af80a86912b1a05481854ea98c/aws_tag_a_day-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40ca86d2d2947fac998f7d62bae1da00", "sha256": "7539755a08a5af8b9d59444137d2506fb0bfa69e446b06f25efa73615770e5f7"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.8.tar.gz", "has_sig": false, "md5_digest": "40ca86d2d2947fac998f7d62bae1da00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9101, "upload_time": "2018-10-16T10:11:12", "upload_time_iso_8601": "2018-10-16T10:11:12.965789Z", "url": "https://files.pythonhosted.org/packages/44/de/fb9f32c056c1a4a49a83971a91bfc05602545e1e656f4f81d761221585d6/aws-tag-a-day-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "b03847d95856ad9939cdf68ebda7679f", "sha256": "b84c4126d57b70fd136782a31ecd36018deb2393d369279318dcd06f0ec10cae"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "b03847d95856ad9939cdf68ebda7679f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18040, "upload_time": "2018-10-16T12:00:23", "upload_time_iso_8601": "2018-10-16T12:00:23.105106Z", "url": "https://files.pythonhosted.org/packages/27/fa/9a4f60a2c9261b43557ebe61b59dd395371076dd93c66aab53905c741ce7/aws_tag_a_day-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "090871635ea5c144f2e74a3661e1502f", "sha256": "869223143e5807c9849a59e9370abad712da64a0b038fa8bbbe8e907c3ea3e95"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.9.tar.gz", "has_sig": false, "md5_digest": "090871635ea5c144f2e74a3661e1502f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9621, "upload_time": "2018-10-16T12:00:26", "upload_time_iso_8601": "2018-10-16T12:00:26.739349Z", "url": "https://files.pythonhosted.org/packages/98/42/da4ac42a0eb9e45428a5c1b2ba4af8bc84e7228578b212ac8311bc576091/aws-tag-a-day-0.1.9.tar.gz", "yanked": false}], "0.1.9.post1": [{"comment_text": "", "digests": {"md5": "99e03547e3d9e4167a7c28ca95f11c04", "sha256": "3de9cd63bd0fe079f29c0cb8edd5e611d6b987f09b8c463e792fc6ba9d5203b0"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.9.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "99e03547e3d9e4167a7c28ca95f11c04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17417, "upload_time": "2018-10-16T12:04:07", "upload_time_iso_8601": "2018-10-16T12:04:07.996535Z", "url": "https://files.pythonhosted.org/packages/c7/ef/deb2f7922a99e516dd9b7bc5478bfea611dc756af47a6516fa6b852bf712/aws_tag_a_day-0.1.9.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c3458a4fff6a9051c5521e269ed7011", "sha256": "4f26661a3380c0526d98e033bcd2405d1cb5868f70cf09009bfef07e0a1b08d9"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.9.post1.tar.gz", "has_sig": false, "md5_digest": "2c3458a4fff6a9051c5521e269ed7011", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9461, "upload_time": "2018-10-16T12:04:09", "upload_time_iso_8601": "2018-10-16T12:04:09.019486Z", "url": "https://files.pythonhosted.org/packages/5a/b2/c53e4aa5ec34c881948df782f207649832108b4047b6b641ba6555817f86/aws-tag-a-day-0.1.9.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6b587a7d6aa5702a6f1f052d2c59924", "sha256": "21bff0824e13bd0528debe0836998cf083971445b72d120ba66c79df477170ff"}, "downloads": -1, "filename": "aws_tag_a_day-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "b6b587a7d6aa5702a6f1f052d2c59924", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18302, "upload_time": "2018-10-16T15:15:35", "upload_time_iso_8601": "2018-10-16T15:15:35.630813Z", "url": "https://files.pythonhosted.org/packages/1d/e0/630a9b271c2c0209decb771798869e4b0b11b45292ee570b67d21cc5f26a/aws_tag_a_day-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61f069e299a6c199754b43e56ba541d4", "sha256": "e1d875cdb01d0fcd07f7f165517cf41c90fbe4920765002da2341109f74b4090"}, "downloads": -1, "filename": "aws-tag-a-day-0.1.10.tar.gz", "has_sig": false, "md5_digest": "61f069e299a6c199754b43e56ba541d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9901, "upload_time": "2018-10-16T15:15:37", "upload_time_iso_8601": "2018-10-16T15:15:37.756550Z", "url": "https://files.pythonhosted.org/packages/5a/10/002fa8a53b75a13407353f9323274b9ac6e2a9352a4ca12eccf25d028aa2/aws-tag-a-day-0.1.10.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:33 2020"}