{"info": {"author": "aidudezzz", "author_email": "deepbots@protonmail.com", "bugtrack_url": null, "classifiers": [], "description": "# deepbots\n\nDeepbots is a simple framework which is used as \"middleware\" between the free and open-source\n[Cyberbotics' Webots](https://cyberbotics.com/) robot simulator and Reinforcement Learning\nalgorithms. When it comes to Reinforcement Learning the\n[OpenAI gym](https://gym.openai.com/) environment has been established as the\nmost used interface between the actual application and the RL algorithm.\nDeepbots is a framework which follows the OpenAI gym environment interface\nlogic in order to be used by Webots applications.\n\n## Installation\n\n### Prerequisites\n\n1. [Install Webots](https://cyberbotics.com/doc/guide/installing-webots)\n    - [Windows](https://cyberbotics.com/doc/guide/installation-procedure#installation-on-windows)\n    - [Linux](https://cyberbotics.com/doc/guide/installation-procedure#installation-on-linux)\n    - [macOS](https://cyberbotics.com/doc/guide/installation-procedure#installation-on-macos)\n2. [Install Python version 3.X](https://www.python.org/downloads/) (please refer to \n[Using Python](https://cyberbotics.com/doc/guide/using-python#introduction) to select the proper Python version for \nyour system) \n3. Follow the [Using Python](https://cyberbotics.com/doc/guide/using-python) guide provided by Webots\n4. Webots provides a basic code editor, but if you want to use [PyCharm](https://www.jetbrains.com/pycharm/) as your \nIDE refer to [using PyCharm IDE](https://cyberbotics.com/doc/guide/using-your-ide#pycharm) provided by Webots\n\n\nYou will probably also need a backend library to implement the neural networks, such as \n[PyTorch](https://pytorch.org/) or [TensorFlow](https://www.tensorflow.org/). Deepbots interfaces\nwith RL agents using the OpenAI gym logic, so it can work with any backend library you choose to implement the agent \nwith and any agent that already works with gym.\n\n### Install deepbots\n\nDeepbots can be installed through the package installer \n[pip](https://pip.pypa.io/en/stable/) running the following command:\n\n`pip install deepbots`\n\n## Official resources\n\n* On [the deepbots-tutorials repository](https://github.com/aidudezzz/deepbots-tutorials) you can find the official tutorials for deepbots\n* On [the deepworlds repository](https://github.com/aidudezzz/deepworlds) you can find examples of deepbots being used.\n<br>Feel free to contribute your own!\n\n## How it works\n\nFirst of all let's set up a simple glossary:\n\n- `World`: Webots uses a tree structure to represent the different entities in\n  the scene. The World is the root entity which contains all the\n  entities/nodes. For example, the world contains the Supervisor and Robot\n  entities as well as other objects which might be included in the scene.\n\n- `Supervisor`: The Supervisor is an entity which has access to all other\n  entities of the world, while having no physical presence in it. For example,\n  the Supervisor knows the exact position of all the entities of the world and\n  can manipulate them. Additionally, the Supervisor has the Supervisor\n  Controller as one of its child nodes.\n\n- `Supervisor Controller`: The Supervisor Controller is a python script which\n  is responsible for the Supervisor. For example, in the Supervisor Controller\n  script the distance between two entities in the world can be calculated.\n\n- `Robot`: The Robot is an entity that represents a robot in the world. It\n  might have sensors and other active components, like motors, etc. as child\n  entities. Also, one of its children is the Robot Controller. For example,\n  [epuck](https://cyberbotics.com/doc/guide/epuck) and\n  [TIAGo](https://cyberbotics.com/doc/guide/tiago-iron) are robots.\n\n- `Robot Controller`: The Robot Controller is a python script which is\n  responsible for the Robot's movement and sensors. With the Robot Controller\n  it is possible to observe the world and act accordingly.\n- `Environment`: The Environment is the interface as described by the OpenAI\n  gym. The Environment interface has the following methods:\n\n  - `get_observations()`: Return the observations of the robot. For example,\n    metrics from sensors, a camera image etc.\n\n  - step(action): Each timestep, the agent chooses an action, and the\n    environment returns the observation, the reward and the state of the\n    problem (done or not).\n\n  - `get_reward(action)`: The reward the agent receives as a result of their\n    action.\n  - `is_done()`: Whether it\u2019s time to reset the environment. Most (but not all)\n    tasks are divided up into well-defined episodes, and done being True\n    indicates the episode has terminated. For example, if a robot has the task\n    to reach a goal, then the done condition might happen when the robot\n    \"touches\" the goal.\n  - `reset()`: Used to reset the world to the initial state.\n\nIn order to set up a task in Deepbots it is necessary to understand the\nintention of the OpenAI gym environment. According to the OpenAI gym\ndocumentation, the framework follows the classic \u201cagent-environment loop\u201d.\n\"Each timestep, the agent chooses an `action`, and the environment returns an\n`observation` and a `reward`. The process gets started by calling `reset()`,\nwhich returns an initial `observation`.\"\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/aidudezzz/deepbots/dev/doc/img/agent_env_loop.svg\">\n</p>\n\nDeepbots follows this exact agent-environment loop with the only difference\nbeing that the agent, which is responsible to choose an action, runs on the\nSupervisor and the observations are acquired by the robot. The goal of the\ndeepbots framework is to hide this communication from the user, especially from\nthose who are familiar with the OpenAI gym environment. More specifically,\n`SupervisorEnv` is the interface which is used by the Reinforcement Learning\nalgorithms and follows the OpenAI Gym environment logic. The Deepbots framework\nprovides different levels of abstraction according to the user's needs.\nMoreover, a goal of the framework is to provide different wrappers for a wide\nrange of robots. Currently, the communication between the `Supervisor` and the\n`Robot` is achieved via an `emitter` and a `receiver`.\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/aidudezzz/deepbots/dev/doc/img/deepbots_overview.png\">\n</p>\n\nOn one hand, the `emitter` is an entity, which is provided by Webots, that\nbroadcasts messages to the world. On the other hand, the `receiver` is an\nentity that is used to receive messages from the world. Consequently, the\nagent-environment loop is transformed accordingly. Firstly, the Robot uses its\nsensors to retrieve the observation from the World and in turn uses the emitter\ncomponent to broadcast this observation. Secondly, the Supervisor receives the\nobservation via the receiver component and in turn, the agent uses it to choose\nan action. It should be noted that the observation the agent uses might be\nextended from the supervisor. For example, a model might use lidar sensors\ninstalled on the Robot, but also the euclidean distance between the Robot and\nan object. As it is expected, the Robot does not know the euclidean distance,\nonly the Supervisor can calculate it, because it has access to all entities in\nthe World.\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/aidudezzz/deepbots/dev/doc/img/workflow_diagram.png\">\n</p>\n\n### Abstraction Levels\n\nThe deepbots framework has been created mostly for educational purposes. The\naim of the framework is to enable people to use Reinforcement Learning in\nWebots. More specifically, we can consider deepbots as a wrapper of Webots\nexposing an OpenAI gym style interface. For this reason there are multiple\nlevels of abstraction. For example, a user can choose if they want to use CSV\nemitter/receiver or if they want to make a from scratch implementation. In the\ntop level of the abstraction hierarchy is the `SupervisorEnv` which is the\nOpenAI gym interface. Below that level there is an actual implementation. This\nimplementation aims to hide the communication between the `Supervisor` and the\n`Robot`. Similarly, the `Robot` also has different abstraction levels.\nAccording to their needs, users can choose either to process the messages\nreceived from the Supervisor themselves or use the existing implementations.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "deepbots", "package_url": "https://pypi.org/project/deepbots/", "platform": "", "project_url": "https://pypi.org/project/deepbots/", "project_urls": null, "release_url": "https://pypi.org/project/deepbots/0.1.0.1/", "requires_dist": null, "requires_python": "", "summary": "A wrapper framework for Reinforcement Learning in Webots     simulator", "version": "0.1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>deepbots</h1>\n<p>Deepbots is a simple framework which is used as \"middleware\" between the free and open-source\n<a href=\"https://cyberbotics.com/\" rel=\"nofollow\">Cyberbotics' Webots</a> robot simulator and Reinforcement Learning\nalgorithms. When it comes to Reinforcement Learning the\n<a href=\"https://gym.openai.com/\" rel=\"nofollow\">OpenAI gym</a> environment has been established as the\nmost used interface between the actual application and the RL algorithm.\nDeepbots is a framework which follows the OpenAI gym environment interface\nlogic in order to be used by Webots applications.</p>\n<h2>Installation</h2>\n<h3>Prerequisites</h3>\n<ol>\n<li><a href=\"https://cyberbotics.com/doc/guide/installing-webots\" rel=\"nofollow\">Install Webots</a>\n<ul>\n<li><a href=\"https://cyberbotics.com/doc/guide/installation-procedure#installation-on-windows\" rel=\"nofollow\">Windows</a></li>\n<li><a href=\"https://cyberbotics.com/doc/guide/installation-procedure#installation-on-linux\" rel=\"nofollow\">Linux</a></li>\n<li><a href=\"https://cyberbotics.com/doc/guide/installation-procedure#installation-on-macos\" rel=\"nofollow\">macOS</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Install Python version 3.X</a> (please refer to\n<a href=\"https://cyberbotics.com/doc/guide/using-python#introduction\" rel=\"nofollow\">Using Python</a> to select the proper Python version for\nyour system)</li>\n<li>Follow the <a href=\"https://cyberbotics.com/doc/guide/using-python\" rel=\"nofollow\">Using Python</a> guide provided by Webots</li>\n<li>Webots provides a basic code editor, but if you want to use <a href=\"https://www.jetbrains.com/pycharm/\" rel=\"nofollow\">PyCharm</a> as your\nIDE refer to <a href=\"https://cyberbotics.com/doc/guide/using-your-ide#pycharm\" rel=\"nofollow\">using PyCharm IDE</a> provided by Webots</li>\n</ol>\n<p>You will probably also need a backend library to implement the neural networks, such as\n<a href=\"https://pytorch.org/\" rel=\"nofollow\">PyTorch</a> or <a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">TensorFlow</a>. Deepbots interfaces\nwith RL agents using the OpenAI gym logic, so it can work with any backend library you choose to implement the agent\nwith and any agent that already works with gym.</p>\n<h3>Install deepbots</h3>\n<p>Deepbots can be installed through the package installer\n<a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> running the following command:</p>\n<p><code>pip install deepbots</code></p>\n<h2>Official resources</h2>\n<ul>\n<li>On <a href=\"https://github.com/aidudezzz/deepbots-tutorials\" rel=\"nofollow\">the deepbots-tutorials repository</a> you can find the official tutorials for deepbots</li>\n<li>On <a href=\"https://github.com/aidudezzz/deepworlds\" rel=\"nofollow\">the deepworlds repository</a> you can find examples of deepbots being used.\n<br>Feel free to contribute your own!</li>\n</ul>\n<h2>How it works</h2>\n<p>First of all let's set up a simple glossary:</p>\n<ul>\n<li>\n<p><code>World</code>: Webots uses a tree structure to represent the different entities in\nthe scene. The World is the root entity which contains all the\nentities/nodes. For example, the world contains the Supervisor and Robot\nentities as well as other objects which might be included in the scene.</p>\n</li>\n<li>\n<p><code>Supervisor</code>: The Supervisor is an entity which has access to all other\nentities of the world, while having no physical presence in it. For example,\nthe Supervisor knows the exact position of all the entities of the world and\ncan manipulate them. Additionally, the Supervisor has the Supervisor\nController as one of its child nodes.</p>\n</li>\n<li>\n<p><code>Supervisor Controller</code>: The Supervisor Controller is a python script which\nis responsible for the Supervisor. For example, in the Supervisor Controller\nscript the distance between two entities in the world can be calculated.</p>\n</li>\n<li>\n<p><code>Robot</code>: The Robot is an entity that represents a robot in the world. It\nmight have sensors and other active components, like motors, etc. as child\nentities. Also, one of its children is the Robot Controller. For example,\n<a href=\"https://cyberbotics.com/doc/guide/epuck\" rel=\"nofollow\">epuck</a> and\n<a href=\"https://cyberbotics.com/doc/guide/tiago-iron\" rel=\"nofollow\">TIAGo</a> are robots.</p>\n</li>\n<li>\n<p><code>Robot Controller</code>: The Robot Controller is a python script which is\nresponsible for the Robot's movement and sensors. With the Robot Controller\nit is possible to observe the world and act accordingly.</p>\n</li>\n<li>\n<p><code>Environment</code>: The Environment is the interface as described by the OpenAI\ngym. The Environment interface has the following methods:</p>\n<ul>\n<li>\n<p><code>get_observations()</code>: Return the observations of the robot. For example,\nmetrics from sensors, a camera image etc.</p>\n</li>\n<li>\n<p>step(action): Each timestep, the agent chooses an action, and the\nenvironment returns the observation, the reward and the state of the\nproblem (done or not).</p>\n</li>\n<li>\n<p><code>get_reward(action)</code>: The reward the agent receives as a result of their\naction.</p>\n</li>\n<li>\n<p><code>is_done()</code>: Whether it\u2019s time to reset the environment. Most (but not all)\ntasks are divided up into well-defined episodes, and done being True\nindicates the episode has terminated. For example, if a robot has the task\nto reach a goal, then the done condition might happen when the robot\n\"touches\" the goal.</p>\n</li>\n<li>\n<p><code>reset()</code>: Used to reset the world to the initial state.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>In order to set up a task in Deepbots it is necessary to understand the\nintention of the OpenAI gym environment. According to the OpenAI gym\ndocumentation, the framework follows the classic \u201cagent-environment loop\u201d.\n\"Each timestep, the agent chooses an <code>action</code>, and the environment returns an\n<code>observation</code> and a <code>reward</code>. The process gets started by calling <code>reset()</code>,\nwhich returns an initial <code>observation</code>.\"</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/539129fa5e45db3912316ac08bceb613e7e52563/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6169647564657a7a7a2f64656570626f74732f6465762f646f632f696d672f6167656e745f656e765f6c6f6f702e737667\">\n</p>\n<p>Deepbots follows this exact agent-environment loop with the only difference\nbeing that the agent, which is responsible to choose an action, runs on the\nSupervisor and the observations are acquired by the robot. The goal of the\ndeepbots framework is to hide this communication from the user, especially from\nthose who are familiar with the OpenAI gym environment. More specifically,\n<code>SupervisorEnv</code> is the interface which is used by the Reinforcement Learning\nalgorithms and follows the OpenAI Gym environment logic. The Deepbots framework\nprovides different levels of abstraction according to the user's needs.\nMoreover, a goal of the framework is to provide different wrappers for a wide\nrange of robots. Currently, the communication between the <code>Supervisor</code> and the\n<code>Robot</code> is achieved via an <code>emitter</code> and a <code>receiver</code>.</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6afedc3ef3dae239e8164f5e8349a70c920c713a/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6169647564657a7a7a2f64656570626f74732f6465762f646f632f696d672f64656570626f74735f6f766572766965772e706e67\">\n</p>\n<p>On one hand, the <code>emitter</code> is an entity, which is provided by Webots, that\nbroadcasts messages to the world. On the other hand, the <code>receiver</code> is an\nentity that is used to receive messages from the world. Consequently, the\nagent-environment loop is transformed accordingly. Firstly, the Robot uses its\nsensors to retrieve the observation from the World and in turn uses the emitter\ncomponent to broadcast this observation. Secondly, the Supervisor receives the\nobservation via the receiver component and in turn, the agent uses it to choose\nan action. It should be noted that the observation the agent uses might be\nextended from the supervisor. For example, a model might use lidar sensors\ninstalled on the Robot, but also the euclidean distance between the Robot and\nan object. As it is expected, the Robot does not know the euclidean distance,\nonly the Supervisor can calculate it, because it has access to all entities in\nthe World.</p>\n<p align=\"center\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74a9dcb9a1df4c40bf26f46a8664842432c0362e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6169647564657a7a7a2f64656570626f74732f6465762f646f632f696d672f776f726b666c6f775f6469616772616d2e706e67\">\n</p>\n<h3>Abstraction Levels</h3>\n<p>The deepbots framework has been created mostly for educational purposes. The\naim of the framework is to enable people to use Reinforcement Learning in\nWebots. More specifically, we can consider deepbots as a wrapper of Webots\nexposing an OpenAI gym style interface. For this reason there are multiple\nlevels of abstraction. For example, a user can choose if they want to use CSV\nemitter/receiver or if they want to make a from scratch implementation. In the\ntop level of the abstraction hierarchy is the <code>SupervisorEnv</code> which is the\nOpenAI gym interface. Below that level there is an actual implementation. This\nimplementation aims to hide the communication between the <code>Supervisor</code> and the\n<code>Robot</code>. Similarly, the <code>Robot</code> also has different abstraction levels.\nAccording to their needs, users can choose either to process the messages\nreceived from the Supervisor themselves or use the existing implementations.</p>\n\n          </div>"}, "last_serial": 7099488, "releases": {"0.0.1rc0": [{"comment_text": "", "digests": {"md5": "9ff54a8753dfcb61b88356eba4874d4d", "sha256": "401b34c04c40390c990bc75def7526048afbb8a07f8d73fedaab64f9688270f1"}, "downloads": -1, "filename": "deepbots-0.0.1rc0-py3-none-any.whl", "has_sig": false, "md5_digest": "9ff54a8753dfcb61b88356eba4874d4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23263, "upload_time": "2020-04-13T20:19:39", "upload_time_iso_8601": "2020-04-13T20:19:39.166161Z", "url": "https://files.pythonhosted.org/packages/96/de/a92a89eac4d71a2e8b9979eb3a4151e0fa7e3651e3d763d80d3672d044ff/deepbots-0.0.1rc0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f49f9a7e3cd85863d4ce1804fd3a085a", "sha256": "454193ad39bbc502308ed364dde7257349a84f9dfe02a20d1fd810396f113e06"}, "downloads": -1, "filename": "deepbots-0.0.1rc0.tar.gz", "has_sig": false, "md5_digest": "f49f9a7e3cd85863d4ce1804fd3a085a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9955, "upload_time": "2020-04-13T20:19:41", "upload_time_iso_8601": "2020-04-13T20:19:41.187622Z", "url": "https://files.pythonhosted.org/packages/4a/9c/a99989da6f8aec99f8308000aa0aa325b1e852d51acb9cf8eaf59f68baeb/deepbots-0.0.1rc0.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "0c15508f2b7c7ceb378ab63a7de8e8e4", "sha256": "7765760cd88513ab241962267eed029a0616aa6892aca41d2a47ea65890b140f"}, "downloads": -1, "filename": "deepbots-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0c15508f2b7c7ceb378ab63a7de8e8e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23840, "upload_time": "2020-04-25T13:17:52", "upload_time_iso_8601": "2020-04-25T13:17:52.851160Z", "url": "https://files.pythonhosted.org/packages/f5/68/1ba3790e2effc22186ca2e89f31f29e53942cca76e0b4811cdb0f5198c25/deepbots-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "325d5e75924aa624634783bdb26c103a", "sha256": "32ae8c03467d92563ef952c3abdb87cbe4c9579aa9a027a831c636c63e0aac94"}, "downloads": -1, "filename": "deepbots-0.1.0.tar.gz", "has_sig": false, "md5_digest": "325d5e75924aa624634783bdb26c103a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11359, "upload_time": "2020-04-25T13:17:53", "upload_time_iso_8601": "2020-04-25T13:17:53.713802Z", "url": "https://files.pythonhosted.org/packages/56/2f/76dac7d2d5fca4ef720feb33c3c7358b79ac1bc0b5973b5fffa94de4ec96/deepbots-0.1.0.tar.gz", "yanked": false}], "0.1.0.1": [{"comment_text": "", "digests": {"md5": "be3d8a3ce06402a0b71e3f853a5936b6", "sha256": "b3b138395ca6362e3dcdfce6fc750c3075ddfa40d1107d9d363d4a41b0a7cb59"}, "downloads": -1, "filename": "deepbots-0.1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be3d8a3ce06402a0b71e3f853a5936b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23860, "upload_time": "2020-04-25T13:23:08", "upload_time_iso_8601": "2020-04-25T13:23:08.817249Z", "url": "https://files.pythonhosted.org/packages/b6/9e/007a8e8a2eca33422fbf642a5e98cb96b9833d2dc5f2d86c20fb2bd34b79/deepbots-0.1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ac80d62ff5059feac4abd2068dca39f", "sha256": "67a83215d8a70772deee39bc4d79e79bd343307baa11c15b9ca57dd517c57544"}, "downloads": -1, "filename": "deepbots-0.1.0.1.tar.gz", "has_sig": false, "md5_digest": "5ac80d62ff5059feac4abd2068dca39f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11351, "upload_time": "2020-04-25T13:23:09", "upload_time_iso_8601": "2020-04-25T13:23:09.637788Z", "url": "https://files.pythonhosted.org/packages/60/a8/bde9a191ea97463638382fba6e24345206dc7816f6dc03aa65bce08fba06/deepbots-0.1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be3d8a3ce06402a0b71e3f853a5936b6", "sha256": "b3b138395ca6362e3dcdfce6fc750c3075ddfa40d1107d9d363d4a41b0a7cb59"}, "downloads": -1, "filename": "deepbots-0.1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be3d8a3ce06402a0b71e3f853a5936b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23860, "upload_time": "2020-04-25T13:23:08", "upload_time_iso_8601": "2020-04-25T13:23:08.817249Z", "url": "https://files.pythonhosted.org/packages/b6/9e/007a8e8a2eca33422fbf642a5e98cb96b9833d2dc5f2d86c20fb2bd34b79/deepbots-0.1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ac80d62ff5059feac4abd2068dca39f", "sha256": "67a83215d8a70772deee39bc4d79e79bd343307baa11c15b9ca57dd517c57544"}, "downloads": -1, "filename": "deepbots-0.1.0.1.tar.gz", "has_sig": false, "md5_digest": "5ac80d62ff5059feac4abd2068dca39f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11351, "upload_time": "2020-04-25T13:23:09", "upload_time_iso_8601": "2020-04-25T13:23:09.637788Z", "url": "https://files.pythonhosted.org/packages/60/a8/bde9a191ea97463638382fba6e24345206dc7816f6dc03aa65bce08fba06/deepbots-0.1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:29 2020"}