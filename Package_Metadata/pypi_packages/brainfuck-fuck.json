{"info": {"author": "Ken Hilton", "author_email": "kenny2minecraft@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Interpreters"], "description": "brainfuck-fuck\n==============\n\nJust a nice little brainfuck interpreter in Python.\n\nNope! This is brainfuck-*fuck*. You know there's C, then C+, then C++? Well, there's brainfuck, and now there's brainfuck-fuck.\nBrainfuck-fuck is supposedly backwards compatible. So therefore this:\n\n.. code-block:: brainfuck\n\n    +++++++ [ > ++++++++++ < - ] > ++ . [-]<[-] ++++++++++ [ > ++++++++++ < - ] > +++++ .\n\ndoes exactly the same thing as this:\n\n.. code-block:: brainfuck\n\n    =H.=i.\n\nbesides the fact that the first one uses two cells while the second uses one.\n\nA full list of additions:\n\n* The ``=`` command.\n  This sets the current cell's value to the ASCII value of the character\n  after the ``=``. Therefore ``=H`` sets the cell to 72 (the ASCII value of\n  H).\n* An if/else statement!\n  The syntax is ``? (code) : (code) !``. When a ``?`` is reached, it checks\n  the current cell. If the current cell is 0, it skips to the\n  corresponding ``:``. Otherwise, it continues on until the ``:``, then skips\n  to the ``!``. Thus ``+ ? =Y : =N ! .`` prints out \"Y\" while ``? =Y : =N ! .``\n  prints out \"N\".\n* Functions! To define a function, use\n  ``(@ symbol)(single ASCII character)(code)(pipe, |)``,\n  e.g. ``@F+++++|`` (which simply adds 5). To call a function, use a caret\n  (``^``) and then the ASCII character used to name the function, e.g. ``^F``\n  (which calls the previously defined function ``F``, thereby adding 5).\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Kenny2github/brainfuck-fuck", "keywords": "brainfuck interpreter brainfuck-fuck", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "brainfuck-fuck", "package_url": "https://pypi.org/project/brainfuck-fuck/", "platform": "", "project_url": "https://pypi.org/project/brainfuck-fuck/", "project_urls": {"Homepage": "https://github.com/Kenny2github/brainfuck-fuck"}, "release_url": "https://pypi.org/project/brainfuck-fuck/2020.4.7/", "requires_dist": null, "requires_python": "", "summary": "Just a nice little brainfuck interpreter in Python.", "version": "2020.4.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Just a nice little brainfuck interpreter in Python.</p>\n<p>Nope! This is brainfuck-<em>fuck</em>. You know there\u2019s C, then C+, then C++? Well, there\u2019s brainfuck, and now there\u2019s brainfuck-fuck.\nBrainfuck-fuck is supposedly backwards compatible. So therefore this:</p>\n<pre><span class=\"nb\">+++++++</span><span class=\"c\"> </span><span class=\"k\">[</span><span class=\"c\"> </span><span class=\"nv\">&gt;</span><span class=\"c\"> </span><span class=\"nb\">++++++++++</span><span class=\"c\"> </span><span class=\"nv\">&lt;</span><span class=\"c\"> </span><span class=\"nb\">-</span><span class=\"c\"> </span><span class=\"k\">]</span><span class=\"c\"> </span><span class=\"nv\">&gt;</span><span class=\"c\"> </span><span class=\"nb\">++</span><span class=\"c\"> </span><span class=\"nt\">.</span><span class=\"c\"> </span><span class=\"k\">[</span><span class=\"nb\">-</span><span class=\"k\">]</span><span class=\"nv\">&lt;</span><span class=\"k\">[</span><span class=\"nb\">-</span><span class=\"k\">]</span><span class=\"c\"> </span><span class=\"nb\">++++++++++</span><span class=\"c\"> </span><span class=\"k\">[</span><span class=\"c\"> </span><span class=\"nv\">&gt;</span><span class=\"c\"> </span><span class=\"nb\">++++++++++</span><span class=\"c\"> </span><span class=\"nv\">&lt;</span><span class=\"c\"> </span><span class=\"nb\">-</span><span class=\"c\"> </span><span class=\"k\">]</span><span class=\"c\"> </span><span class=\"nv\">&gt;</span><span class=\"c\"> </span><span class=\"nb\">+++++</span><span class=\"c\"> </span><span class=\"nt\">.</span>\n</pre>\n<p>does exactly the same thing as this:</p>\n<pre><span class=\"c\">=H</span><span class=\"nt\">.</span><span class=\"c\">=i</span><span class=\"nt\">.</span>\n</pre>\n<p>besides the fact that the first one uses two cells while the second uses one.</p>\n<p>A full list of additions:</p>\n<ul>\n<li>The <tt>=</tt> command.\nThis sets the current cell\u2019s value to the ASCII value of the character\nafter the <tt>=</tt>. Therefore <tt>=H</tt> sets the cell to 72 (the ASCII value of\nH).</li>\n<li>An if/else statement!\nThe syntax is <tt>? (code) : (code) !</tt>. When a <tt>?</tt> is reached, it checks\nthe current cell. If the current cell is 0, it skips to the\ncorresponding <tt>:</tt>. Otherwise, it continues on until the <tt>:</tt>, then skips\nto the <tt>!</tt>. Thus <tt>+ ? =Y : =N ! .</tt> prints out \u201cY\u201d while <tt>? =Y : =N ! .</tt>\nprints out \u201cN\u201d.</li>\n<li>Functions! To define a function, use\n<tt>(@ <span class=\"pre\">symbol)(single</span> ASCII <span class=\"pre\">character)(code)(pipe,</span> |)</tt>,\ne.g. <tt><span class=\"pre\">@F+++++|</span></tt> (which simply adds 5). To call a function, use a caret\n(<tt>^</tt>) and then the ASCII character used to name the function, e.g. <tt>^F</tt>\n(which calls the previously defined function <tt>F</tt>, thereby adding 5).</li>\n</ul>\n\n          </div>"}, "last_serial": 6965094, "releases": {"2018.1.14": [{"comment_text": "", "digests": {"md5": "80ba88ea1add62f4eb832da99cd0e5a6", "sha256": "42430583820620f6d920cc27a2c0997a7052fa5ca85005f11bb03b42090b62a2"}, "downloads": -1, "filename": "brainfuck_fuck-2018.1.14-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "80ba88ea1add62f4eb832da99cd0e5a6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6041, "upload_time": "2018-01-14T07:34:47", "upload_time_iso_8601": "2018-01-14T07:34:47.778060Z", "url": "https://files.pythonhosted.org/packages/b5/a4/7254347b6d28dd22c42e342e6fe10767fc4964f2cfb0bd00b3570cb5c78a/brainfuck_fuck-2018.1.14-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "18c944994e527664126597dbfcb79f00", "sha256": "5a517be61606f28f508597e43571b600811792c16ba93bbda0ef836625a2565d"}, "downloads": -1, "filename": "brainfuck-fuck-2018.1.14.tar.gz", "has_sig": false, "md5_digest": "18c944994e527664126597dbfcb79f00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3485, "upload_time": "2018-01-14T07:34:49", "upload_time_iso_8601": "2018-01-14T07:34:49.037201Z", "url": "https://files.pythonhosted.org/packages/dc/0b/cdb00de5c8b703d547ec5d77fe833babd29d8c22f024ddc812dbfc62a750/brainfuck-fuck-2018.1.14.tar.gz", "yanked": false}], "2020.4.7": [{"comment_text": "", "digests": {"md5": "128f975bb73680fc716994b856274f5d", "sha256": "c9ccb7e19c8bc47a4102ba0ca970735642cd42c109a5230b1214cf42006f4325"}, "downloads": -1, "filename": "brainfuck_fuck-2020.4.7-py3-none-any.whl", "has_sig": false, "md5_digest": "128f975bb73680fc716994b856274f5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6561, "upload_time": "2020-04-06T22:04:29", "upload_time_iso_8601": "2020-04-06T22:04:29.497852Z", "url": "https://files.pythonhosted.org/packages/39/a2/a47a3c0d4e0c30b1cac46c2b37bf9af274f460b45bf9476d5c6f852ef367/brainfuck_fuck-2020.4.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d54f5dabea0b22d11564db36c3a952c", "sha256": "c218c04446d81951f08ba3b9ee85eb4b74627fc6c786e3bf4f2ad0efcd111724"}, "downloads": -1, "filename": "brainfuck-fuck-2020.4.7.tar.gz", "has_sig": false, "md5_digest": "3d54f5dabea0b22d11564db36c3a952c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4170, "upload_time": "2020-04-06T22:04:31", "upload_time_iso_8601": "2020-04-06T22:04:31.137604Z", "url": "https://files.pythonhosted.org/packages/ae/67/19a301b70846ec4c0822086531b54d998d77f7e626d9eb1a2ce64f1a38a6/brainfuck-fuck-2020.4.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "128f975bb73680fc716994b856274f5d", "sha256": "c9ccb7e19c8bc47a4102ba0ca970735642cd42c109a5230b1214cf42006f4325"}, "downloads": -1, "filename": "brainfuck_fuck-2020.4.7-py3-none-any.whl", "has_sig": false, "md5_digest": "128f975bb73680fc716994b856274f5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6561, "upload_time": "2020-04-06T22:04:29", "upload_time_iso_8601": "2020-04-06T22:04:29.497852Z", "url": "https://files.pythonhosted.org/packages/39/a2/a47a3c0d4e0c30b1cac46c2b37bf9af274f460b45bf9476d5c6f852ef367/brainfuck_fuck-2020.4.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d54f5dabea0b22d11564db36c3a952c", "sha256": "c218c04446d81951f08ba3b9ee85eb4b74627fc6c786e3bf4f2ad0efcd111724"}, "downloads": -1, "filename": "brainfuck-fuck-2020.4.7.tar.gz", "has_sig": false, "md5_digest": "3d54f5dabea0b22d11564db36c3a952c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4170, "upload_time": "2020-04-06T22:04:31", "upload_time_iso_8601": "2020-04-06T22:04:31.137604Z", "url": "https://files.pythonhosted.org/packages/ae/67/19a301b70846ec4c0822086531b54d998d77f7e626d9eb1a2ce64f1a38a6/brainfuck-fuck-2020.4.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:25 2020"}