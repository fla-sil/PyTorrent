{"info": {"author": "Allen AI", "author_email": "a-dialog-research@allenai.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "alexafsm\n========\n\n-  Finite-state machine library for building complex Alexa\n   conversations.\n-  Free software: Apache Software License 2.0.\n\nDialog agents need to keep track of the various pieces of information to\nmake decisions how to respond to a given user input. This is referred to\nas context, session, or state tracking. As the dialog complexity\nincreases, this state-tracking logic becomes harder to write, debug, and\nmaintain. This library takes the finite-state machine design approach to\naddress this complexity. Developers using this library can model dialog\nagents with first-class concepts such as states, attributes, transition,\nand actions. Visualization and other tools are also provided to help\nunderstand and debug complex FSM conversations.\n\nAlso check out our `blog\npost <https://medium.com/@vha14/alexafsm-a-finite-state-machine-python-library-for-building-complex-alexa-skills-61c3af5a299d>`__.\n\nFeatures\n--------\n\n-  FSM-based library for building Alexa skills with complex dialog state\n   tracking.\n-  Tools to validate, visualize, and print the FSM graph.\n-  Support analytics with `VoiceLabs <http://voicelabs.co/>`__.\n-  Can be paired with any Python server library (Flask, CherryPy, etc.)\n-  Written in Python 3.6 (primarily for type annotation and string\n   interpolation).\n\nGetting Started\n---------------\n\nInstall from `PyPi <https://pypi.python.org/pypi/alexafsm>`__:\n\n::\n\n    pip install alexafsm\n\nConsult the `Alexa skill\nsearch <https://github.com/allenai/alexafsm/tree/master/tests/skillsearch>`__\nskill in the ``tests`` directory for details of how to write an\n``alexafsm`` skill. An Alexa skill is composed of the following three\nclasses: ``SessionAttributes``, ``States``, and ``Policy``.\n\n``SessionAttributes``\n~~~~~~~~~~~~~~~~~~~~~\n\n``SessionAttributes`` is a class that holds session attributes\n(``alexa_request['session']['attributes']``) and any information we need\nto keep track of dialog state. \\* The core attributes are ``intent``,\n``slots``, and ``state``. \\* ``intent`` and ``slots`` map directly to\nAlexa's concepts. \\* ``slots`` should be of type ``Slots``, which in\nturn is defined as a named tuple, one field for each slot type. In the\nskill search example, ``Slots = namedtuple('Slots', ['query', 'nth']``).\nThis named tuple class should be specified in the class definition as\n``slots_cls = Slots``. \\* ``state`` holds the name of the current state\nin the state machine. \\* Each Alexa skill can contain arbitrary number\nof additional attributes. If an attribute is not meant to be sent back\nto Alexa server (e.g. so as to reduce the payload size), it should be\nadded to ``not_sent_fields``. In the skill search example, ``searched``\nand ``first_time`` are not sent to Alexa server.\n\nSee the implementation of skill search skill's\n```SessionAttributes`` <https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/session_attributes.py>`__\n\n``States``\n~~~~~~~~~~\n\n``States`` is a class that specifies most of the FSM and its behavior.\nIt holds a reference to a ``SessionAttributes`` object, the type of\nwhich is specified by overriding the ``session_attributes_cls`` class\nattribute. The FSM is specified by a list of parameter-less methods.\nConsider the following method:\n\n.. code:: python\n\n    @with_transitions(\n        {\n            'trigger': NEW_SEARCH,\n            'source': '*',\n            'prepare': 'm_search',\n            'conditions': 'm_has_result_and_query'\n        },\n        {\n            'trigger': NTH_SKILL,\n            'source': '*',\n            'conditions': 'm_has_nth',\n            'after': 'm_set_nth'\n        },\n        {\n            'trigger': PREVIOUS_SKILL,\n            'source': '*',\n            'conditions': 'm_has_previous',\n            'after': 'm_set_previous'\n        },\n        {\n            'trigger': NEXT_SKILL,\n            'source': '*',\n            'conditions': 'm_has_next',\n            'after': 'm_set_next'\n        },\n        {\n            'trigger': amazon_intent.NO,\n            'source': 'has_result',\n            'conditions': 'm_has_next',\n            'after': 'm_set_next'\n        }\n    )\n    def has_result(self) -> response.Response:\n        \"\"\"Offer a preview of a skill\"\"\"\n        attributes = self.attributes\n        query = attributes.query\n        skill = attributes.skill\n        asked_for_speech = ''\n        if attributes.first_time_presenting_results:\n            asked_for_speech = _you_asked_for(query)\n        if attributes.number_of_hits == 1:\n            skill_position_speech = 'The only skill I found is'\n        else:\n            skill_position_speech = f'The {ENGLISH_NUMBERS[attributes.skill_cursor]} skill is'\n            if attributes.first_time_presenting_results:\n                if attributes.number_of_hits > 6:\n                    num_hits = f'Here are the top {MAX_SKILLS} results.'\n                else:\n                    num_hits = f'I found {len(attributes.skills)} skills.'\n                skill_position_speech = f'{num_hits} {skill_position_speech}'\n        return response.Response(\n            speech=f\"{asked_for_speech} \"\n                   f\" {skill_position_speech} {_get_verbal_skill(skill)}.\"\n                   f\" {HEAR_MORE}\",\n            card=f\"Search for {query}\",\n            card_content=f\"\"\"\n            Top result: {skill.name}\n\n            {_get_highlights(skill)}\n            \"\"\",\n            reprompt=DEFAULT_PROMPT\n        )\n\nEach method encodes the following:\n\n-  The name of the method is also the name of a state (``describing``)\n   in the FSM.\n-  The method may be decorated with one or several transitions, using\n   ``with_transitions`` decorators. Transitions can be inbound\n   (``source`` needs to be specified) or outbound (``dest`` needs to be\n   specified).\n-  Each method returns a ``Response`` object which is sent to Alexa.\n-  Transitions can be specified with ``prepare`` and ``conditions``\n   attributes. See https://github.com/tyarkoni/transitions for detailed\n   documentations. The values of these attributes are parameter-less\n   methods of the ``Policy`` class.\n-  The ``prepare`` methods are responsible for \"actions\" of the FSM such\n   as querying a database. The ``after`` methods are responsible for\n   updating the state after the transition completes. They are the only\n   methods responsible for side-effects, e.g. modifying the attributes\n   of the states. This design facilitates ease of debugging.\n\n``Policy``\n~~~~~~~~~~\n\n``Policy`` is the class that holds everything together. It contains a\nreference to a ``States`` object, the type of which is specified by\noverriding the ``states_cls`` class attribute. A ``Policy`` object\ninitializes itself by constructing a FSM based on the ``States`` type.\n``Policy`` class contains the following key methods:\n\n-  ``handle`` takes an Alexa request, parses it, and hands over all\n   intent requests to ``execute`` method.\n-  ``execute`` updates the policy's internal state with the request's\n   details (intent, slots, session attributes), then calls ``trigger``\n   to make the state transition. It then looks up the corresponding\n   response generating methods of the ``States`` class to generate a\n   response for Alexa.\n-  ``initialize`` will initialize a policy without any request.\n-  ``validate`` performs validation of a policy object based on\n   ``Policy`` class definition and a intent schema json file. It looks\n   for intents that are not handled, invalid source/dest/prepare\n   specifications, and unreachable states. The test in\n   ``test_skillsearch.py`` performs such validation as a test of\n   ``alexafsm``.\n\nThe Alexa skill search skill in the ``tests`` directory also contains a\nFlask-based server that shows how to use ``Policy`` in five lines of\ncode:\n\n.. code:: python\n\n    @app.route('/', methods=['POST'])\n    def main():\n        req = flask_request.json\n        policy = Policy.initialize()\n        return json.dumps(policy.handle(req, settings.vi)).encode('utf-8')\n\nOther Tools\n-----------\n\n``alexafsm`` supports validation, graph visualization, and printing of\nthe FSM.\n\nValidation\n~~~~~~~~~~\n\nSimply initialize a ``Policy`` before calling ``validate``. This\nfunction takes as input the path to the skill's Alexa intent schema json\nfile and performs the following checks:\n\n-  All Alexa intents have corresponding events/triggers in the FSM.\n-  All states have either inbound or outbound transitions.\n-  All transitions are specified with valid source and destination\n   states.\n-  All conditions and prepare actions are handled with methods in the\n   ``Policy`` class.\n\nChange Detection with Record and Playback\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen making code changes that are not supposed to impact a skill's\ndialog logic, we may want a tool to check that the skill's logic indeed\nstay the same. This is done by first recording\n(``SkillSettings().record = True``) one or several sessions, making the\ncode change, then checking if the changed code still produces the same\nset of dialogs (``SkillSettings().playback = True``). During playback,\ncalls to databases such as ElasticSearch can be fulfilled from data read\nfrom files generated during the recording. This is done by decorating\nthe database call with ``recordable`` function. See `the ElasticSearch\ncall <https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/clients.py#L40>`__\nin Skill Search for an example usage.\n\nGraph Visualization\n~~~~~~~~~~~~~~~~~~~\n\n``alexafsm`` uses the ``transitions`` library's API to draw the FSM\ngraph. For example, the skill search skill's FSM can be visualized using\nthe\n`graph.py <https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/bin/graph.py>`__.\ninvoked from\n`graph.sh <https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/bin/graph.sh>`__.\nThe resulting graph is displayed follow:\n\n.. figure:: https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/fsm.png\n   :alt: FSM Example\n\n   FSM Example\n\nGraph Printout\n~~~~~~~~~~~~~~\n\nFor complex graphs, it may be easier to inspect the FSM in text format.\nUse the ``print_machine`` method to accomplish this. The output for the\nskill search skill is below:\n\n.. code:: text\n\n    Machine states:\n        bad_navigate, describe_ratings, describing, exiting, has_result, helping, initial, is_that_all, no_query_search, no_result, search_prompt\n\n    Events and transitions:\n\n    Event: NthSkill\n        Source: bad_navigate\n            bad_navigate -> bad_navigate, conditions: ['m_has_nth']\n            bad_navigate -> has_result, conditions: ['m_has_nth']\n        Source: describe_ratings\n            describe_ratings -> bad_navigate, conditions: ['m_has_nth']\n            describe_ratings -> has_result, conditions: ['m_has_nth']\n        Source: describing\n            describing -> bad_navigate, conditions: ['m_has_nth']\n            describing -> has_result, conditions: ['m_has_nth']\n        Source: exiting\n            exiting -> bad_navigate, conditions: ['m_has_nth']\n            exiting -> has_result, conditions: ['m_has_nth']\n        Source: has_result\n            has_result -> bad_navigate, conditions: ['m_has_nth']\n            has_result -> has_result, conditions: ['m_has_nth']\n        Source: helping\n            helping -> bad_navigate, conditions: ['m_has_nth']\n            helping -> has_result, conditions: ['m_has_nth']\n        Source: initial\n            initial -> bad_navigate, conditions: ['m_has_nth']\n            initial -> has_result, conditions: ['m_has_nth']\n        Source: is_that_all\n            is_that_all -> bad_navigate, conditions: ['m_has_nth']\n            is_that_all -> has_result, conditions: ['m_has_nth']\n        Source: no_query_search\n            no_query_search -> bad_navigate, conditions: ['m_has_nth']\n            no_query_search -> has_result, conditions: ['m_has_nth']\n        Source: no_result\n            no_result -> bad_navigate, conditions: ['m_has_nth']\n            no_result -> has_result, conditions: ['m_has_nth']\n        Source: search_prompt\n            search_prompt -> bad_navigate, conditions: ['m_has_nth']\n            search_prompt -> has_result, conditions: ['m_has_nth']\n    Event: PreviousSkill\n        Source: bad_navigate\n            bad_navigate -> bad_navigate, conditions: ['m_has_previous']\n            bad_navigate -> has_result, conditions: ['m_has_previous']\n        Source: describe_ratings\n            describe_ratings -> bad_navigate, conditions: ['m_has_previous']\n            describe_ratings -> has_result, conditions: ['m_has_previous']\n        Source: describing\n            describing -> bad_navigate, conditions: ['m_has_previous']\n            describing -> has_result, conditions: ['m_has_previous']\n        Source: exiting\n            exiting -> bad_navigate, conditions: ['m_has_previous']\n            exiting -> has_result, conditions: ['m_has_previous']\n        Source: has_result\n            has_result -> bad_navigate, conditions: ['m_has_previous']\n            has_result -> has_result, conditions: ['m_has_previous']\n        Source: helping\n            helping -> bad_navigate, conditions: ['m_has_previous']\n            helping -> has_result, conditions: ['m_has_previous']\n        Source: initial\n            initial -> bad_navigate, conditions: ['m_has_previous']\n            initial -> has_result, conditions: ['m_has_previous']\n        Source: is_that_all\n            is_that_all -> bad_navigate, conditions: ['m_has_previous']\n            is_that_all -> has_result, conditions: ['m_has_previous']\n        Source: no_query_search\n            no_query_search -> bad_navigate, conditions: ['m_has_previous']\n            no_query_search -> has_result, conditions: ['m_has_previous']\n        Source: no_result\n            no_result -> bad_navigate, conditions: ['m_has_previous']\n            no_result -> has_result, conditions: ['m_has_previous']\n        Source: search_prompt\n            search_prompt -> bad_navigate, conditions: ['m_has_previous']\n            search_prompt -> has_result, conditions: ['m_has_previous']\n    Event: NextSkill\n        Source: bad_navigate\n            bad_navigate -> bad_navigate, conditions: ['m_has_next']\n            bad_navigate -> has_result, conditions: ['m_has_next']\n        Source: describe_ratings\n            describe_ratings -> bad_navigate, conditions: ['m_has_next']\n            describe_ratings -> has_result, conditions: ['m_has_next']\n        Source: describing\n            describing -> bad_navigate, conditions: ['m_has_next']\n            describing -> has_result, conditions: ['m_has_next']\n        Source: exiting\n            exiting -> bad_navigate, conditions: ['m_has_next']\n            exiting -> has_result, conditions: ['m_has_next']\n        Source: has_result\n            has_result -> bad_navigate, conditions: ['m_has_next']\n            has_result -> has_result, conditions: ['m_has_next']\n        Source: helping\n            helping -> bad_navigate, conditions: ['m_has_next']\n            helping -> has_result, conditions: ['m_has_next']\n        Source: initial\n            initial -> bad_navigate, conditions: ['m_has_next']\n            initial -> has_result, conditions: ['m_has_next']\n        Source: is_that_all\n            is_that_all -> bad_navigate, conditions: ['m_has_next']\n            is_that_all -> has_result, conditions: ['m_has_next']\n        Source: no_query_search\n            no_query_search -> bad_navigate, conditions: ['m_has_next']\n            no_query_search -> has_result, conditions: ['m_has_next']\n        Source: no_result\n            no_result -> bad_navigate, conditions: ['m_has_next']\n            no_result -> has_result, conditions: ['m_has_next']\n        Source: search_prompt\n            search_prompt -> bad_navigate, conditions: ['m_has_next']\n            search_prompt -> has_result, conditions: ['m_has_next']\n    Event: AMAZON.NoIntent\n        Source: has_result\n            has_result -> bad_navigate, conditions: ['m_has_next']\n            has_result -> has_result, conditions: ['m_has_next']\n        Source: describe_ratings\n            describe_ratings -> is_that_all\n        Source: describing\n            describing -> search_prompt\n        Source: is_that_all\n            is_that_all -> search_prompt\n    Event: DescribeRatings\n        Source: bad_navigate\n            bad_navigate -> describe_ratings, conditions: ['m_has_result']\n        Source: describe_ratings\n            describe_ratings -> describe_ratings, conditions: ['m_has_result']\n        Source: describing\n            describing -> describe_ratings, conditions: ['m_has_result']\n        Source: exiting\n            exiting -> describe_ratings, conditions: ['m_has_result']\n        Source: has_result\n            has_result -> describe_ratings, conditions: ['m_has_result']\n        Source: helping\n            helping -> describe_ratings, conditions: ['m_has_result']\n        Source: initial\n            initial -> describe_ratings, conditions: ['m_has_result']\n        Source: is_that_all\n            is_that_all -> describe_ratings, conditions: ['m_has_result']\n        Source: no_query_search\n            no_query_search -> describe_ratings, conditions: ['m_has_result']\n        Source: no_result\n            no_result -> describe_ratings, conditions: ['m_has_result']\n        Source: search_prompt\n            search_prompt -> describe_ratings, conditions: ['m_has_result']\n    Event: AMAZON.YesIntent\n        Source: has_result\n            has_result -> describing\n        Source: describe_ratings\n            describe_ratings -> describing\n        Source: describing\n            describing -> exiting\n        Source: is_that_all\n            is_that_all -> exiting\n    Event: AMAZON.CancelIntent\n        Source: no_result\n            no_result -> exiting\n        Source: search_prompt\n            search_prompt -> exiting\n        Source: is_that_all\n            is_that_all -> exiting\n        Source: bad_navigate\n            bad_navigate -> exiting\n        Source: no_query_search\n            no_query_search -> exiting\n        Source: describing\n            describing -> is_that_all\n        Source: has_result\n            has_result -> is_that_all\n        Source: describe_ratings\n            describe_ratings -> is_that_all\n        Source: initial\n            initial -> search_prompt\n        Source: helping\n            helping -> search_prompt\n    Event: AMAZON.StopIntent\n        Source: no_result\n            no_result -> exiting\n        Source: search_prompt\n            search_prompt -> exiting\n        Source: is_that_all\n            is_that_all -> exiting\n        Source: bad_navigate\n            bad_navigate -> exiting\n        Source: no_query_search\n            no_query_search -> exiting\n        Source: describing\n            describing -> is_that_all\n        Source: has_result\n            has_result -> is_that_all\n        Source: describe_ratings\n            describe_ratings -> is_that_all\n        Source: initial\n            initial -> search_prompt\n        Source: helping\n            helping -> search_prompt\n    Event: NewSearch\n        Source: bad_navigate\n            bad_navigate -> exiting, conditions: ['m_searching_for_exit']\n            bad_navigate -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            bad_navigate -> no_query_search, conditions: ['m_no_query_search']\n            bad_navigate -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: describe_ratings\n            describe_ratings -> exiting, conditions: ['m_searching_for_exit']\n            describe_ratings -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            describe_ratings -> no_query_search, conditions: ['m_no_query_search']\n            describe_ratings -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: describing\n            describing -> exiting, conditions: ['m_searching_for_exit']\n            describing -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            describing -> no_query_search, conditions: ['m_no_query_search']\n            describing -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: exiting\n            exiting -> exiting, conditions: ['m_searching_for_exit']\n            exiting -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            exiting -> no_query_search, conditions: ['m_no_query_search']\n            exiting -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: has_result\n            has_result -> exiting, conditions: ['m_searching_for_exit']\n            has_result -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            has_result -> no_query_search, conditions: ['m_no_query_search']\n            has_result -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: helping\n            helping -> exiting, conditions: ['m_searching_for_exit']\n            helping -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            helping -> no_query_search, conditions: ['m_no_query_search']\n            helping -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: initial\n            initial -> exiting, conditions: ['m_searching_for_exit']\n            initial -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            initial -> no_query_search, conditions: ['m_no_query_search']\n            initial -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: is_that_all\n            is_that_all -> exiting, conditions: ['m_searching_for_exit']\n            is_that_all -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            is_that_all -> no_query_search, conditions: ['m_no_query_search']\n            is_that_all -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: no_query_search\n            no_query_search -> exiting, conditions: ['m_searching_for_exit']\n            no_query_search -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            no_query_search -> no_query_search, conditions: ['m_no_query_search']\n            no_query_search -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: no_result\n            no_result -> exiting, conditions: ['m_searching_for_exit']\n            no_result -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            no_result -> no_query_search, conditions: ['m_no_query_search']\n            no_result -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n        Source: search_prompt\n            search_prompt -> exiting, conditions: ['m_searching_for_exit']\n            search_prompt -> has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n            search_prompt -> no_query_search, conditions: ['m_no_query_search']\n            search_prompt -> no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Event: AMAZON.HelpIntent\n        Source: bad_navigate\n            bad_navigate -> helping\n        Source: describe_ratings\n            describe_ratings -> helping\n        Source: describing\n            describing -> helping\n        Source: exiting\n            exiting -> helping\n        Source: has_result\n            has_result -> helping\n        Source: helping\n            helping -> helping\n        Source: initial\n            initial -> helping\n        Source: is_that_all\n            is_that_all -> helping\n        Source: no_query_search\n            no_query_search -> helping\n        Source: no_result\n            no_result -> helping\n        Source: search_prompt\n            search_prompt -> helping\n\n\n\nHistory\n=======\n\n0.1.0 (2017-02-23)\n------------------\n\n* First release on PyPI.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/allenai/alexafsm", "keywords": "alexafsm", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "alexafsm", "package_url": "https://pypi.org/project/alexafsm/", "platform": "", "project_url": "https://pypi.org/project/alexafsm/", "project_urls": {"Homepage": "https://github.com/allenai/alexafsm"}, "release_url": "https://pypi.org/project/alexafsm/0.1.11/", "requires_dist": null, "requires_python": "", "summary": "Finite-state machine library for building complex Alexa conversations", "version": "0.1.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"alexafsm\">\n<h2>alexafsm</h2>\n<ul>\n<li>Finite-state machine library for building complex Alexa\nconversations.</li>\n<li>Free software: Apache Software License 2.0.</li>\n</ul>\n<p>Dialog agents need to keep track of the various pieces of information to\nmake decisions how to respond to a given user input. This is referred to\nas context, session, or state tracking. As the dialog complexity\nincreases, this state-tracking logic becomes harder to write, debug, and\nmaintain. This library takes the finite-state machine design approach to\naddress this complexity. Developers using this library can model dialog\nagents with first-class concepts such as states, attributes, transition,\nand actions. Visualization and other tools are also provided to help\nunderstand and debug complex FSM conversations.</p>\n<p>Also check out our <a href=\"https://medium.com/@vha14/alexafsm-a-finite-state-machine-python-library-for-building-complex-alexa-skills-61c3af5a299d\" rel=\"nofollow\">blog\npost</a>.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>FSM-based library for building Alexa skills with complex dialog state\ntracking.</li>\n<li>Tools to validate, visualize, and print the FSM graph.</li>\n<li>Support analytics with <a href=\"http://voicelabs.co/\" rel=\"nofollow\">VoiceLabs</a>.</li>\n<li>Can be paired with any Python server library (Flask, CherryPy, etc.)</li>\n<li>Written in Python 3.6 (primarily for type annotation and string\ninterpolation).</li>\n</ul>\n</div>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<p>Install from <a href=\"https://pypi.python.org/pypi/alexafsm\" rel=\"nofollow\">PyPi</a>:</p>\n<pre>pip install alexafsm\n</pre>\n<p>Consult the <a href=\"https://github.com/allenai/alexafsm/tree/master/tests/skillsearch\" rel=\"nofollow\">Alexa skill\nsearch</a>\nskill in the <tt>tests</tt> directory for details of how to write an\n<tt>alexafsm</tt> skill. An Alexa skill is composed of the following three\nclasses: <tt>SessionAttributes</tt>, <tt>States</tt>, and <tt>Policy</tt>.</p>\n<div id=\"sessionattributes\">\n<h4><tt>SessionAttributes</tt></h4>\n<p><tt>SessionAttributes</tt> is a class that holds session attributes\n(<tt><span class=\"pre\">alexa_request['session']['attributes']</span></tt>) and any information we need\nto keep track of dialog state. * The core attributes are <tt>intent</tt>,\n<tt>slots</tt>, and <tt>state</tt>. * <tt>intent</tt> and <tt>slots</tt> map directly to\nAlexa\u2019s concepts. * <tt>slots</tt> should be of type <tt>Slots</tt>, which in\nturn is defined as a named tuple, one field for each slot type. In the\nskill search example, <tt>Slots = <span class=\"pre\">namedtuple('Slots',</span> ['query', 'nth']</tt>).\nThis named tuple class should be specified in the class definition as\n<tt>slots_cls = Slots</tt>. * <tt>state</tt> holds the name of the current state\nin the state machine. * Each Alexa skill can contain arbitrary number\nof additional attributes. If an attribute is not meant to be sent back\nto Alexa server (e.g. so as to reduce the payload size), it should be\nadded to <tt>not_sent_fields</tt>. In the skill search example, <tt>searched</tt>\nand <tt>first_time</tt> are not sent to Alexa server.</p>\n<p>See the implementation of skill search skill\u2019s\n<tt>`SessionAttributes</tt> &lt;<a href=\"https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/session_attributes.py\" rel=\"nofollow\">https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/session_attributes.py</a>&gt;`__</p>\n</div>\n<div id=\"states\">\n<h4><tt>States</tt></h4>\n<p><tt>States</tt> is a class that specifies most of the FSM and its behavior.\nIt holds a reference to a <tt>SessionAttributes</tt> object, the type of\nwhich is specified by overriding the <tt>session_attributes_cls</tt> class\nattribute. The FSM is specified by a list of parameter-less methods.\nConsider the following method:</p>\n<pre><span class=\"nd\">@with_transitions</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'trigger'</span><span class=\"p\">:</span> <span class=\"n\">NEW_SEARCH</span><span class=\"p\">,</span>\n        <span class=\"s1\">'source'</span><span class=\"p\">:</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'prepare'</span><span class=\"p\">:</span> <span class=\"s1\">'m_search'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"s1\">'m_has_result_and_query'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'trigger'</span><span class=\"p\">:</span> <span class=\"n\">NTH_SKILL</span><span class=\"p\">,</span>\n        <span class=\"s1\">'source'</span><span class=\"p\">:</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"s1\">'m_has_nth'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'after'</span><span class=\"p\">:</span> <span class=\"s1\">'m_set_nth'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'trigger'</span><span class=\"p\">:</span> <span class=\"n\">PREVIOUS_SKILL</span><span class=\"p\">,</span>\n        <span class=\"s1\">'source'</span><span class=\"p\">:</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"s1\">'m_has_previous'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'after'</span><span class=\"p\">:</span> <span class=\"s1\">'m_set_previous'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'trigger'</span><span class=\"p\">:</span> <span class=\"n\">NEXT_SKILL</span><span class=\"p\">,</span>\n        <span class=\"s1\">'source'</span><span class=\"p\">:</span> <span class=\"s1\">'*'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"s1\">'m_has_next'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'after'</span><span class=\"p\">:</span> <span class=\"s1\">'m_set_next'</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'trigger'</span><span class=\"p\">:</span> <span class=\"n\">amazon_intent</span><span class=\"o\">.</span><span class=\"n\">NO</span><span class=\"p\">,</span>\n        <span class=\"s1\">'source'</span><span class=\"p\">:</span> <span class=\"s1\">'has_result'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"s1\">'m_has_next'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'after'</span><span class=\"p\">:</span> <span class=\"s1\">'m_set_next'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">has_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Offer a preview of a skill\"\"\"</span>\n    <span class=\"n\">attributes</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attributes</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">query</span>\n    <span class=\"n\">skill</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">skill</span>\n    <span class=\"n\">asked_for_speech</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n    <span class=\"k\">if</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">first_time_presenting_results</span><span class=\"p\">:</span>\n        <span class=\"n\">asked_for_speech</span> <span class=\"o\">=</span> <span class=\"n\">_you_asked_for</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">number_of_hits</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">skill_position_speech</span> <span class=\"o\">=</span> <span class=\"s1\">'The only skill I found is'</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">skill_position_speech</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'The </span><span class=\"si\">{</span><span class=\"n\">ENGLISH_NUMBERS</span><span class=\"p\">[</span><span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">skill_cursor</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\"> skill is'</span>\n        <span class=\"k\">if</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">first_time_presenting_results</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">number_of_hits</span> <span class=\"o\">&gt;</span> <span class=\"mi\">6</span><span class=\"p\">:</span>\n                <span class=\"n\">num_hits</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'Here are the top </span><span class=\"si\">{</span><span class=\"n\">MAX_SKILLS</span><span class=\"si\">}</span><span class=\"s1\"> results.'</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">num_hits</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'I found </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">attributes</span><span class=\"o\">.</span><span class=\"n\">skills</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\"> skills.'</span>\n            <span class=\"n\">skill_position_speech</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">num_hits</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">skill_position_speech</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span>\n        <span class=\"n\">speech</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">asked_for_speech</span><span class=\"si\">}</span><span class=\"s2\"> \"</span>\n               <span class=\"sa\">f</span><span class=\"s2\">\" </span><span class=\"si\">{</span><span class=\"n\">skill_position_speech</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">_get_verbal_skill</span><span class=\"p\">(</span><span class=\"n\">skill</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">.\"</span>\n               <span class=\"sa\">f</span><span class=\"s2\">\" </span><span class=\"si\">{</span><span class=\"n\">HEAR_MORE</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">card</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"Search for </span><span class=\"si\">{</span><span class=\"n\">query</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n        <span class=\"n\">card_content</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">\"\"\"\n        Top result: </span><span class=\"si\">{</span><span class=\"n\">skill</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\n\n        </span><span class=\"si\">{</span><span class=\"n\">_get_highlights</span><span class=\"p\">(</span><span class=\"n\">skill</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\n        \"\"\"</span><span class=\"p\">,</span>\n        <span class=\"n\">reprompt</span><span class=\"o\">=</span><span class=\"n\">DEFAULT_PROMPT</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Each method encodes the following:</p>\n<ul>\n<li>The name of the method is also the name of a state (<tt>describing</tt>)\nin the FSM.</li>\n<li>The method may be decorated with one or several transitions, using\n<tt>with_transitions</tt> decorators. Transitions can be inbound\n(<tt>source</tt> needs to be specified) or outbound (<tt>dest</tt> needs to be\nspecified).</li>\n<li>Each method returns a <tt>Response</tt> object which is sent to Alexa.</li>\n<li>Transitions can be specified with <tt>prepare</tt> and <tt>conditions</tt>\nattributes. See <a href=\"https://github.com/tyarkoni/transitions\" rel=\"nofollow\">https://github.com/tyarkoni/transitions</a> for detailed\ndocumentations. The values of these attributes are parameter-less\nmethods of the <tt>Policy</tt> class.</li>\n<li>The <tt>prepare</tt> methods are responsible for \u201cactions\u201d of the FSM such\nas querying a database. The <tt>after</tt> methods are responsible for\nupdating the state after the transition completes. They are the only\nmethods responsible for side-effects, e.g. modifying the attributes\nof the states. This design facilitates ease of debugging.</li>\n</ul>\n</div>\n<div id=\"policy\">\n<h4><tt>Policy</tt></h4>\n<p><tt>Policy</tt> is the class that holds everything together. It contains a\nreference to a <tt>States</tt> object, the type of which is specified by\noverriding the <tt>states_cls</tt> class attribute. A <tt>Policy</tt> object\ninitializes itself by constructing a FSM based on the <tt>States</tt> type.\n<tt>Policy</tt> class contains the following key methods:</p>\n<ul>\n<li><tt>handle</tt> takes an Alexa request, parses it, and hands over all\nintent requests to <tt>execute</tt> method.</li>\n<li><tt>execute</tt> updates the policy\u2019s internal state with the request\u2019s\ndetails (intent, slots, session attributes), then calls <tt>trigger</tt>\nto make the state transition. It then looks up the corresponding\nresponse generating methods of the <tt>States</tt> class to generate a\nresponse for Alexa.</li>\n<li><tt>initialize</tt> will initialize a policy without any request.</li>\n<li><tt>validate</tt> performs validation of a policy object based on\n<tt>Policy</tt> class definition and a intent schema json file. It looks\nfor intents that are not handled, invalid source/dest/prepare\nspecifications, and unreachable states. The test in\n<tt>test_skillsearch.py</tt> performs such validation as a test of\n<tt>alexafsm</tt>.</li>\n</ul>\n<p>The Alexa skill search skill in the <tt>tests</tt> directory also contains a\nFlask-based server that shows how to use <tt>Policy</tt> in five lines of\ncode:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">flask_request</span><span class=\"o\">.</span><span class=\"n\">json</span>\n    <span class=\"n\">policy</span> <span class=\"o\">=</span> <span class=\"n\">Policy</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">vi</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"other-tools\">\n<h3>Other Tools</h3>\n<p><tt>alexafsm</tt> supports validation, graph visualization, and printing of\nthe FSM.</p>\n<div id=\"validation\">\n<h4>Validation</h4>\n<p>Simply initialize a <tt>Policy</tt> before calling <tt>validate</tt>. This\nfunction takes as input the path to the skill\u2019s Alexa intent schema json\nfile and performs the following checks:</p>\n<ul>\n<li>All Alexa intents have corresponding events/triggers in the FSM.</li>\n<li>All states have either inbound or outbound transitions.</li>\n<li>All transitions are specified with valid source and destination\nstates.</li>\n<li>All conditions and prepare actions are handled with methods in the\n<tt>Policy</tt> class.</li>\n</ul>\n</div>\n<div id=\"change-detection-with-record-and-playback\">\n<h4>Change Detection with Record and Playback</h4>\n<p>When making code changes that are not supposed to impact a skill\u2019s\ndialog logic, we may want a tool to check that the skill\u2019s logic indeed\nstay the same. This is done by first recording\n(<tt><span class=\"pre\">SkillSettings().record</span> = True</tt>) one or several sessions, making the\ncode change, then checking if the changed code still produces the same\nset of dialogs (<tt><span class=\"pre\">SkillSettings().playback</span> = True</tt>). During playback,\ncalls to databases such as ElasticSearch can be fulfilled from data read\nfrom files generated during the recording. This is done by decorating\nthe database call with <tt>recordable</tt> function. See <a href=\"https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/clients.py#L40\" rel=\"nofollow\">the ElasticSearch\ncall</a>\nin Skill Search for an example usage.</p>\n</div>\n<div id=\"graph-visualization\">\n<h4>Graph Visualization</h4>\n<p><tt>alexafsm</tt> uses the <tt>transitions</tt> library\u2019s API to draw the FSM\ngraph. For example, the skill search skill\u2019s FSM can be visualized using\nthe\n<a href=\"https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/bin/graph.py\" rel=\"nofollow\">graph.py</a>.\ninvoked from\n<a href=\"https://github.com/allenai/alexafsm/blob/master/tests/skillsearch/bin/graph.sh\" rel=\"nofollow\">graph.sh</a>.\nThe resulting graph is displayed follow:</p>\n<div>\n<img alt=\"FSM Example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eba307df58c9c34090440537e9e252f6334c1cda/68747470733a2f2f6769746875622e636f6d2f616c6c656e61692f616c65786166736d2f626c6f622f6d61737465722f74657374732f736b696c6c7365617263682f66736d2e706e67\">\n<p>FSM Example</p>\n</div>\n</div>\n<div id=\"graph-printout\">\n<h4>Graph Printout</h4>\n<p>For complex graphs, it may be easier to inspect the FSM in text format.\nUse the <tt>print_machine</tt> method to accomplish this. The output for the\nskill search skill is below:</p>\n<pre>Machine states:\n    bad_navigate, describe_ratings, describing, exiting, has_result, helping, initial, is_that_all, no_query_search, no_result, search_prompt\n\nEvents and transitions:\n\nEvent: NthSkill\n    Source: bad_navigate\n        bad_navigate -&gt; bad_navigate, conditions: ['m_has_nth']\n        bad_navigate -&gt; has_result, conditions: ['m_has_nth']\n    Source: describe_ratings\n        describe_ratings -&gt; bad_navigate, conditions: ['m_has_nth']\n        describe_ratings -&gt; has_result, conditions: ['m_has_nth']\n    Source: describing\n        describing -&gt; bad_navigate, conditions: ['m_has_nth']\n        describing -&gt; has_result, conditions: ['m_has_nth']\n    Source: exiting\n        exiting -&gt; bad_navigate, conditions: ['m_has_nth']\n        exiting -&gt; has_result, conditions: ['m_has_nth']\n    Source: has_result\n        has_result -&gt; bad_navigate, conditions: ['m_has_nth']\n        has_result -&gt; has_result, conditions: ['m_has_nth']\n    Source: helping\n        helping -&gt; bad_navigate, conditions: ['m_has_nth']\n        helping -&gt; has_result, conditions: ['m_has_nth']\n    Source: initial\n        initial -&gt; bad_navigate, conditions: ['m_has_nth']\n        initial -&gt; has_result, conditions: ['m_has_nth']\n    Source: is_that_all\n        is_that_all -&gt; bad_navigate, conditions: ['m_has_nth']\n        is_that_all -&gt; has_result, conditions: ['m_has_nth']\n    Source: no_query_search\n        no_query_search -&gt; bad_navigate, conditions: ['m_has_nth']\n        no_query_search -&gt; has_result, conditions: ['m_has_nth']\n    Source: no_result\n        no_result -&gt; bad_navigate, conditions: ['m_has_nth']\n        no_result -&gt; has_result, conditions: ['m_has_nth']\n    Source: search_prompt\n        search_prompt -&gt; bad_navigate, conditions: ['m_has_nth']\n        search_prompt -&gt; has_result, conditions: ['m_has_nth']\nEvent: PreviousSkill\n    Source: bad_navigate\n        bad_navigate -&gt; bad_navigate, conditions: ['m_has_previous']\n        bad_navigate -&gt; has_result, conditions: ['m_has_previous']\n    Source: describe_ratings\n        describe_ratings -&gt; bad_navigate, conditions: ['m_has_previous']\n        describe_ratings -&gt; has_result, conditions: ['m_has_previous']\n    Source: describing\n        describing -&gt; bad_navigate, conditions: ['m_has_previous']\n        describing -&gt; has_result, conditions: ['m_has_previous']\n    Source: exiting\n        exiting -&gt; bad_navigate, conditions: ['m_has_previous']\n        exiting -&gt; has_result, conditions: ['m_has_previous']\n    Source: has_result\n        has_result -&gt; bad_navigate, conditions: ['m_has_previous']\n        has_result -&gt; has_result, conditions: ['m_has_previous']\n    Source: helping\n        helping -&gt; bad_navigate, conditions: ['m_has_previous']\n        helping -&gt; has_result, conditions: ['m_has_previous']\n    Source: initial\n        initial -&gt; bad_navigate, conditions: ['m_has_previous']\n        initial -&gt; has_result, conditions: ['m_has_previous']\n    Source: is_that_all\n        is_that_all -&gt; bad_navigate, conditions: ['m_has_previous']\n        is_that_all -&gt; has_result, conditions: ['m_has_previous']\n    Source: no_query_search\n        no_query_search -&gt; bad_navigate, conditions: ['m_has_previous']\n        no_query_search -&gt; has_result, conditions: ['m_has_previous']\n    Source: no_result\n        no_result -&gt; bad_navigate, conditions: ['m_has_previous']\n        no_result -&gt; has_result, conditions: ['m_has_previous']\n    Source: search_prompt\n        search_prompt -&gt; bad_navigate, conditions: ['m_has_previous']\n        search_prompt -&gt; has_result, conditions: ['m_has_previous']\nEvent: NextSkill\n    Source: bad_navigate\n        bad_navigate -&gt; bad_navigate, conditions: ['m_has_next']\n        bad_navigate -&gt; has_result, conditions: ['m_has_next']\n    Source: describe_ratings\n        describe_ratings -&gt; bad_navigate, conditions: ['m_has_next']\n        describe_ratings -&gt; has_result, conditions: ['m_has_next']\n    Source: describing\n        describing -&gt; bad_navigate, conditions: ['m_has_next']\n        describing -&gt; has_result, conditions: ['m_has_next']\n    Source: exiting\n        exiting -&gt; bad_navigate, conditions: ['m_has_next']\n        exiting -&gt; has_result, conditions: ['m_has_next']\n    Source: has_result\n        has_result -&gt; bad_navigate, conditions: ['m_has_next']\n        has_result -&gt; has_result, conditions: ['m_has_next']\n    Source: helping\n        helping -&gt; bad_navigate, conditions: ['m_has_next']\n        helping -&gt; has_result, conditions: ['m_has_next']\n    Source: initial\n        initial -&gt; bad_navigate, conditions: ['m_has_next']\n        initial -&gt; has_result, conditions: ['m_has_next']\n    Source: is_that_all\n        is_that_all -&gt; bad_navigate, conditions: ['m_has_next']\n        is_that_all -&gt; has_result, conditions: ['m_has_next']\n    Source: no_query_search\n        no_query_search -&gt; bad_navigate, conditions: ['m_has_next']\n        no_query_search -&gt; has_result, conditions: ['m_has_next']\n    Source: no_result\n        no_result -&gt; bad_navigate, conditions: ['m_has_next']\n        no_result -&gt; has_result, conditions: ['m_has_next']\n    Source: search_prompt\n        search_prompt -&gt; bad_navigate, conditions: ['m_has_next']\n        search_prompt -&gt; has_result, conditions: ['m_has_next']\nEvent: AMAZON.NoIntent\n    Source: has_result\n        has_result -&gt; bad_navigate, conditions: ['m_has_next']\n        has_result -&gt; has_result, conditions: ['m_has_next']\n    Source: describe_ratings\n        describe_ratings -&gt; is_that_all\n    Source: describing\n        describing -&gt; search_prompt\n    Source: is_that_all\n        is_that_all -&gt; search_prompt\nEvent: DescribeRatings\n    Source: bad_navigate\n        bad_navigate -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: describe_ratings\n        describe_ratings -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: describing\n        describing -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: exiting\n        exiting -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: has_result\n        has_result -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: helping\n        helping -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: initial\n        initial -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: is_that_all\n        is_that_all -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: no_query_search\n        no_query_search -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: no_result\n        no_result -&gt; describe_ratings, conditions: ['m_has_result']\n    Source: search_prompt\n        search_prompt -&gt; describe_ratings, conditions: ['m_has_result']\nEvent: AMAZON.YesIntent\n    Source: has_result\n        has_result -&gt; describing\n    Source: describe_ratings\n        describe_ratings -&gt; describing\n    Source: describing\n        describing -&gt; exiting\n    Source: is_that_all\n        is_that_all -&gt; exiting\nEvent: AMAZON.CancelIntent\n    Source: no_result\n        no_result -&gt; exiting\n    Source: search_prompt\n        search_prompt -&gt; exiting\n    Source: is_that_all\n        is_that_all -&gt; exiting\n    Source: bad_navigate\n        bad_navigate -&gt; exiting\n    Source: no_query_search\n        no_query_search -&gt; exiting\n    Source: describing\n        describing -&gt; is_that_all\n    Source: has_result\n        has_result -&gt; is_that_all\n    Source: describe_ratings\n        describe_ratings -&gt; is_that_all\n    Source: initial\n        initial -&gt; search_prompt\n    Source: helping\n        helping -&gt; search_prompt\nEvent: AMAZON.StopIntent\n    Source: no_result\n        no_result -&gt; exiting\n    Source: search_prompt\n        search_prompt -&gt; exiting\n    Source: is_that_all\n        is_that_all -&gt; exiting\n    Source: bad_navigate\n        bad_navigate -&gt; exiting\n    Source: no_query_search\n        no_query_search -&gt; exiting\n    Source: describing\n        describing -&gt; is_that_all\n    Source: has_result\n        has_result -&gt; is_that_all\n    Source: describe_ratings\n        describe_ratings -&gt; is_that_all\n    Source: initial\n        initial -&gt; search_prompt\n    Source: helping\n        helping -&gt; search_prompt\nEvent: NewSearch\n    Source: bad_navigate\n        bad_navigate -&gt; exiting, conditions: ['m_searching_for_exit']\n        bad_navigate -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        bad_navigate -&gt; no_query_search, conditions: ['m_no_query_search']\n        bad_navigate -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: describe_ratings\n        describe_ratings -&gt; exiting, conditions: ['m_searching_for_exit']\n        describe_ratings -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        describe_ratings -&gt; no_query_search, conditions: ['m_no_query_search']\n        describe_ratings -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: describing\n        describing -&gt; exiting, conditions: ['m_searching_for_exit']\n        describing -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        describing -&gt; no_query_search, conditions: ['m_no_query_search']\n        describing -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: exiting\n        exiting -&gt; exiting, conditions: ['m_searching_for_exit']\n        exiting -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        exiting -&gt; no_query_search, conditions: ['m_no_query_search']\n        exiting -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: has_result\n        has_result -&gt; exiting, conditions: ['m_searching_for_exit']\n        has_result -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        has_result -&gt; no_query_search, conditions: ['m_no_query_search']\n        has_result -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: helping\n        helping -&gt; exiting, conditions: ['m_searching_for_exit']\n        helping -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        helping -&gt; no_query_search, conditions: ['m_no_query_search']\n        helping -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: initial\n        initial -&gt; exiting, conditions: ['m_searching_for_exit']\n        initial -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        initial -&gt; no_query_search, conditions: ['m_no_query_search']\n        initial -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: is_that_all\n        is_that_all -&gt; exiting, conditions: ['m_searching_for_exit']\n        is_that_all -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        is_that_all -&gt; no_query_search, conditions: ['m_no_query_search']\n        is_that_all -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: no_query_search\n        no_query_search -&gt; exiting, conditions: ['m_searching_for_exit']\n        no_query_search -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        no_query_search -&gt; no_query_search, conditions: ['m_no_query_search']\n        no_query_search -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: no_result\n        no_result -&gt; exiting, conditions: ['m_searching_for_exit']\n        no_result -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        no_result -&gt; no_query_search, conditions: ['m_no_query_search']\n        no_result -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\n    Source: search_prompt\n        search_prompt -&gt; exiting, conditions: ['m_searching_for_exit']\n        search_prompt -&gt; has_result, prepare: ['m_search'], conditions: ['m_has_result_and_query']\n        search_prompt -&gt; no_query_search, conditions: ['m_no_query_search']\n        search_prompt -&gt; no_result, prepare: ['m_search'], conditions: ['m_no_result']\nEvent: AMAZON.HelpIntent\n    Source: bad_navigate\n        bad_navigate -&gt; helping\n    Source: describe_ratings\n        describe_ratings -&gt; helping\n    Source: describing\n        describing -&gt; helping\n    Source: exiting\n        exiting -&gt; helping\n    Source: has_result\n        has_result -&gt; helping\n    Source: helping\n        helping -&gt; helping\n    Source: initial\n        initial -&gt; helping\n    Source: is_that_all\n        is_that_all -&gt; helping\n    Source: no_query_search\n        no_query_search -&gt; helping\n    Source: no_result\n        no_result -&gt; helping\n    Source: search_prompt\n        search_prompt -&gt; helping\n</pre>\n</div>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2017-02-23)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2868053, "releases": {"0.1.11": [{"comment_text": "", "digests": {"md5": "55cc939b6264c8053d325f67e78337d8", "sha256": "ecaf6302a96f71806472af90b0f0111528e78a641cb2b38862e4b51ef439116e"}, "downloads": -1, "filename": "alexafsm-0.1.11.tar.gz", "has_sig": false, "md5_digest": "55cc939b6264c8053d325f67e78337d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2919411, "upload_time": "2017-05-11T21:23:00", "upload_time_iso_8601": "2017-05-11T21:23:00.500109Z", "url": "https://files.pythonhosted.org/packages/12/8e/2c2b40c569fe5a8168753e3379c934191153bed08763e0492b86690b6e18/alexafsm-0.1.11.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "55cc939b6264c8053d325f67e78337d8", "sha256": "ecaf6302a96f71806472af90b0f0111528e78a641cb2b38862e4b51ef439116e"}, "downloads": -1, "filename": "alexafsm-0.1.11.tar.gz", "has_sig": false, "md5_digest": "55cc939b6264c8053d325f67e78337d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2919411, "upload_time": "2017-05-11T21:23:00", "upload_time_iso_8601": "2017-05-11T21:23:00.500109Z", "url": "https://files.pythonhosted.org/packages/12/8e/2c2b40c569fe5a8168753e3379c934191153bed08763e0492b86690b6e18/alexafsm-0.1.11.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:55 2020"}