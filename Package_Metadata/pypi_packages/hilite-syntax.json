{"info": {"author": "Sam Steffl", "author_email": "sam@ssteffl.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "python-hilite-syntax\n===================================\nThis package allows you to generate syntax-highlighting files from input\nfiles (like bnf grammar files). The goal is to enable generation of syntax\nhighlighting files for any language specification on the fly, for all editors\n\nSupported Frontends\n-------------------\n- __lark__: use lark grammar files (for the LALR parser only) to generate\n            the syntax file for the language the grammar is parsing.\n    - see [lark-parser](https://github.com/lark-parser/lark) \n      for more info on writing lark grammar files\n    - see [lark-syntax.vim](https://github.com/ssteffl/lark-syntax.vim)\n      for syntax-highlighting of your lark files in vim\n    - see [python-shape-plotter-example](https://github.com/ssteffl/python-shape-plotter-example)\n      for several things:\n        1) writing a simple LALR `lark` grammar file\n        2) using `hilite_syntax` to convert lark grammar files to vim syntax\n           and viewing your DSL scripts with color in vim\n        3) plotting 2D shapes using matplotlib from the lark DSL file\n\nSupported Backends\n-------------------\n- __vim__: generate vim syntax highlighting files for the input language.\n    - by default, it will write the syntax and ftdetect files to \n      `$HOME/.vim`, so you can instantly use the generated files, but\n      you can change the output dir\n    - pointers to related items:\n    - see [lark-syntax.vim](https://github.com/ssteffl/lark-syntax.vim)\n        for highlighting lark grammar files in vim\n    - see [python-shape-plotter-example](https://github.com/ssteffl/python-shape-plotter-example)\n        for the reasons mentioned in `lark` above\n\ninstalling\n----------\n```\npip install hilite_syntax\n```\n\ncommand-line usage\n------------------\n- `help`: the subcommand to dump the IR graph of your langauge:\n    ```\n    hilite_syntax help <frontend> [frontend-args]\n    hilite_syntax help <backend> [backend-args]\n    ```\n    You must run the help commands for each frontend or backend to see what\n    their supported arguments are.\n\n- `dump`: the subcommand to dump the IR graph of your langauge, after being\n   parsed by the frontend:\n    ```\n    hilite_syntax dump <frontend> [frontend-args]\n    ```\n\n- `input/output`: the subcommand to convert the input to an output syntax\n  highlighting file:\n    ```\n    hilite_syntax input <frontend> [frontend-args] output <backend> [backend-args] \n    ```\n    for example, the following will convert a lark grammar file and install\n    vim syntax files for it at `$HOME/.vim`:\n    ```\n    hilite_syntax input lark ./mydsl.lark --start root_rule \\\n                  output vim mydsl --ext mydsl --ext dsl\n    ```\n\n__TODO__: put up a docs page for the cmdline usage (and subcmds)\n\nlibrary usage\n--------------\nMost of the package lives in the `hilite_syntax` library, and can be used\ndirectly in your application. \n\n__TODO__: put up a docs page for library usage\n\ninternal architecture\n---------------------\n\n__TODO__: describe lark-specific details, vim-specific details, the \n  intermediate graph representation, and the supported semantic FormatTypes\n\nOTHER TODO\n----------\nclean up documenting these potential issues: \n\n1) regex node sementics need to be supported by input AND \n    output implementation. if only the input supports it, an error will occur\n    - for example: lark -> vim DOES support regex and string terms\n\n2) string terminals MIGHT not be supported in output. any backend \n    implementation should specify the supported strings\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ssteffl/python-hilite-syntax", "keywords": "hilite hilight syntax editor", "license": "", "maintainer": "", "maintainer_email": "", "name": "hilite-syntax", "package_url": "https://pypi.org/project/hilite-syntax/", "platform": "", "project_url": "https://pypi.org/project/hilite-syntax/", "project_urls": {"Bug Reports": "https://github.com/ssteffl/python-hilite-syntax", "Homepage": "https://github.com/ssteffl/python-hilite-syntax", "Source": "https://github.com/ssteffl/python-hilite-syntax"}, "release_url": "https://pypi.org/project/hilite-syntax/0.0.4/", "requires_dist": ["dcggraph", "lark-parser"], "requires_python": ">=3.6", "summary": "Framework for generating editor syntax files", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-hilite-syntax</h1>\n<p>This package allows you to generate syntax-highlighting files from input\nfiles (like bnf grammar files). The goal is to enable generation of syntax\nhighlighting files for any language specification on the fly, for all editors</p>\n<h2>Supported Frontends</h2>\n<ul>\n<li><strong>lark</strong>: use lark grammar files (for the LALR parser only) to generate\nthe syntax file for the language the grammar is parsing.\n<ul>\n<li>see <a href=\"https://github.com/lark-parser/lark\" rel=\"nofollow\">lark-parser</a>\nfor more info on writing lark grammar files</li>\n<li>see <a href=\"https://github.com/ssteffl/lark-syntax.vim\" rel=\"nofollow\">lark-syntax.vim</a>\nfor syntax-highlighting of your lark files in vim</li>\n<li>see <a href=\"https://github.com/ssteffl/python-shape-plotter-example\" rel=\"nofollow\">python-shape-plotter-example</a>\nfor several things:\n<ol>\n<li>writing a simple LALR <code>lark</code> grammar file</li>\n<li>using <code>hilite_syntax</code> to convert lark grammar files to vim syntax\nand viewing your DSL scripts with color in vim</li>\n<li>plotting 2D shapes using matplotlib from the lark DSL file</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Supported Backends</h2>\n<ul>\n<li><strong>vim</strong>: generate vim syntax highlighting files for the input language.\n<ul>\n<li>by default, it will write the syntax and ftdetect files to\n<code>$HOME/.vim</code>, so you can instantly use the generated files, but\nyou can change the output dir</li>\n<li>pointers to related items:</li>\n<li>see <a href=\"https://github.com/ssteffl/lark-syntax.vim\" rel=\"nofollow\">lark-syntax.vim</a>\nfor highlighting lark grammar files in vim</li>\n<li>see <a href=\"https://github.com/ssteffl/python-shape-plotter-example\" rel=\"nofollow\">python-shape-plotter-example</a>\nfor the reasons mentioned in <code>lark</code> above</li>\n</ul>\n</li>\n</ul>\n<h2>installing</h2>\n<pre><code>pip install hilite_syntax\n</code></pre>\n<h2>command-line usage</h2>\n<ul>\n<li>\n<p><code>help</code>: the subcommand to dump the IR graph of your langauge:</p>\n<pre><code>hilite_syntax help &lt;frontend&gt; [frontend-args]\nhilite_syntax help &lt;backend&gt; [backend-args]\n</code></pre>\n<p>You must run the help commands for each frontend or backend to see what\ntheir supported arguments are.</p>\n</li>\n<li>\n<p><code>dump</code>: the subcommand to dump the IR graph of your langauge, after being\nparsed by the frontend:</p>\n<pre><code>hilite_syntax dump &lt;frontend&gt; [frontend-args]\n</code></pre>\n</li>\n<li>\n<p><code>input/output</code>: the subcommand to convert the input to an output syntax\nhighlighting file:</p>\n<pre><code>hilite_syntax input &lt;frontend&gt; [frontend-args] output &lt;backend&gt; [backend-args] \n</code></pre>\n<p>for example, the following will convert a lark grammar file and install\nvim syntax files for it at <code>$HOME/.vim</code>:</p>\n<pre><code>hilite_syntax input lark ./mydsl.lark --start root_rule \\\n              output vim mydsl --ext mydsl --ext dsl\n</code></pre>\n</li>\n</ul>\n<p><strong>TODO</strong>: put up a docs page for the cmdline usage (and subcmds)</p>\n<h2>library usage</h2>\n<p>Most of the package lives in the <code>hilite_syntax</code> library, and can be used\ndirectly in your application.</p>\n<p><strong>TODO</strong>: put up a docs page for library usage</p>\n<h2>internal architecture</h2>\n<p><strong>TODO</strong>: describe lark-specific details, vim-specific details, the\nintermediate graph representation, and the supported semantic FormatTypes</p>\n<h2>OTHER TODO</h2>\n<p>clean up documenting these potential issues:</p>\n<ol>\n<li>\n<p>regex node sementics need to be supported by input AND\noutput implementation. if only the input supports it, an error will occur</p>\n<ul>\n<li>for example: lark -&gt; vim DOES support regex and string terms</li>\n</ul>\n</li>\n<li>\n<p>string terminals MIGHT not be supported in output. any backend\nimplementation should specify the supported strings</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 6164190, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3a40b60441976a7f9183aafba8769810", "sha256": "03718fb6a6a45b179c1a8887d640196a4276e948a8c8c83292f6935f026107bb"}, "downloads": -1, "filename": "hilite_syntax-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3a40b60441976a7f9183aafba8769810", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13389, "upload_time": "2019-11-18T16:48:06", "upload_time_iso_8601": "2019-11-18T16:48:06.035326Z", "url": "https://files.pythonhosted.org/packages/2c/ba/c921d6eff9fcc5caf062018876c2107b5feccd6439188bfbd7440fd20026/hilite_syntax-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1cac0b392fc399c90f585c0ba3c5052", "sha256": "19b8c9bfdc071a92cbd162e7cb9280855c40444cb596abcd96f9a23c77cbc8b0"}, "downloads": -1, "filename": "hilite_syntax-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c1cac0b392fc399c90f585c0ba3c5052", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15902, "upload_time": "2019-11-18T16:48:08", "upload_time_iso_8601": "2019-11-18T16:48:08.491971Z", "url": "https://files.pythonhosted.org/packages/48/d4/ef9c0368c2ed4a1e307d3092e6caa3e3d9f98544741364a12f7386624109/hilite_syntax-0.0.1.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "4bd4ebd05293e79971511770f7094ddd", "sha256": "489124e491224774c414dc036f447e2ec023eb5173524cc3f74a0708857ec09f"}, "downloads": -1, "filename": "hilite_syntax-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4bd4ebd05293e79971511770f7094ddd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18089, "upload_time": "2019-11-19T19:54:13", "upload_time_iso_8601": "2019-11-19T19:54:13.566167Z", "url": "https://files.pythonhosted.org/packages/ed/f8/4b1436054c71a16492b9d7707546fd0f92daf15306720106b1700bdeb089/hilite_syntax-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc1c7458e3ecc60323c99ec1e0951243", "sha256": "b9123559bb2180bc13adee5cf67ffcde89921d8fc5b8a2b7d44310d39815975d"}, "downloads": -1, "filename": "hilite_syntax-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cc1c7458e3ecc60323c99ec1e0951243", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22303, "upload_time": "2019-11-19T19:54:16", "upload_time_iso_8601": "2019-11-19T19:54:16.409470Z", "url": "https://files.pythonhosted.org/packages/3f/08/b4d54d7217c2455f30d22c8122a892a82bbd993b727d8e410347a895a635/hilite_syntax-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4bd4ebd05293e79971511770f7094ddd", "sha256": "489124e491224774c414dc036f447e2ec023eb5173524cc3f74a0708857ec09f"}, "downloads": -1, "filename": "hilite_syntax-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4bd4ebd05293e79971511770f7094ddd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 18089, "upload_time": "2019-11-19T19:54:13", "upload_time_iso_8601": "2019-11-19T19:54:13.566167Z", "url": "https://files.pythonhosted.org/packages/ed/f8/4b1436054c71a16492b9d7707546fd0f92daf15306720106b1700bdeb089/hilite_syntax-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc1c7458e3ecc60323c99ec1e0951243", "sha256": "b9123559bb2180bc13adee5cf67ffcde89921d8fc5b8a2b7d44310d39815975d"}, "downloads": -1, "filename": "hilite_syntax-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cc1c7458e3ecc60323c99ec1e0951243", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22303, "upload_time": "2019-11-19T19:54:16", "upload_time_iso_8601": "2019-11-19T19:54:16.409470Z", "url": "https://files.pythonhosted.org/packages/3f/08/b4d54d7217c2455f30d22c8122a892a82bbd993b727d8e410347a895a635/hilite_syntax-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:11 2020"}