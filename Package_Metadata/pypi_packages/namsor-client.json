{"info": {"author": "Joseph Pallipadan", "author_email": "pallipadanjoseph@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## Overview\n*namsor-client* is a python package that serves as a wrapper for the Namsor classification API.\nThe API can determine the likely gender, ethnicity and country of origin of an individual with a particular name.\n\n## Installation\n\n```pip install namsor-client```\n\n## Usage\n\n```python\nfrom namsorclient import NamsorClient\nfrom namsorclient.country_codes import CountryCodes\nfrom namsorclient.request_objects import *\n\n\n# Create an instance of NamsorClient and pass in your API key as an argument.\nclient = NamsorClient(\"Insert API key\")\n\n# Access the gender (GET) endpoint with function that returns a response of type GenderResponse.\nresponse = client.gender(\"Lelouch\",\"Lamperouge\")\n\n# Access the different parts of the response for this particular endpoint.\n\nprint(response.ID)\nprint(response.first_name)\nprint(response.last_name)\nprint(response.likely_gender)\nprint(response.gender_scale)\nprint(response.score)\nprint(response.probability_calibrated)\n\n# Refer to the Responses section to view all different variables of each different Response.\n\n\n# Access the genderBatch (POST) endpoint\ngender_batch = GenderBatch()\n\n# Add items, with required arguments, to the batch you want\ngender_batch.addItem(\"Lelouch\",\"Lamperouge\",\"A2773\")\ngender_batch.addItem(\"Gon\",\"Freecs\", \"M9835\")\ngender_batch.addItem(\"Jonathan\",\"Joestar\", \"M6104\")\n\n# Use classify function with required API Key argument and receive responses in the form of a list.\nresponse_list = gender_batch.classify(\"Insert API key\")\n\nprint(response_list[2].likely_gender)\n\n# Refer to the Batches section to look at the different types of batches and view the type of responses that will be returned when a batch is classified.\n```\n\n\nUse the `export_to_excel` function to create a file with the required file name to represent the batch's data in spreadsheet form. \n```python \ngender_batch.export_to_excel(\"File Name.xlsx\")\n```\n**Result:**\n![GitHub Logo](spreadsheet_example.png)\n## API\n\n- **gender(first_name: str, last_name: str)**\n*Infer the likely gender of a name.*\n\n    - ```first_name: The desired first name. ```\n    - ```last_name: The desired last name. ```\n    - *Returns*: ```GenderResponse ```\n  \n- **genderGeo(first_name: str, last_name: str, country_code: CountryCodes)**\n*Infer the likely gender of a name, given a local context (ISO2country code).*\n\n    - ```first_name: The desired first name.```\n    - ```last_name: The desired last name.```\n    - ```country_code: The country code to aid with classification.```\n    - *Returns*: ```GenderResponse```\n\n- **genderFullGeo(full_name: str, country_code: CountryCodes)**\n*Infer the likely gender of a full name, given a local context (ISO2 country code).*\n\n    - ```full_name: The name to be classified.```\n    - ```country_code: The country code to aid with classification.```\n    - *Returns*: ```GenderResponse```\n\n- **genderFull(full_name: str)**\n*Infer the likely gender of a full name, ex. John H. Smith*\n\n    - ```full_name: The name to be classified.```\n    - *Returns*: ```GenderResponse```\n\n- **usRaceEthnicity(first_name: str, last_name: str)**\n*Infer a US resident's likely race/ethnicity according to US Census taxonomy W_N(white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).*\n\n    - ```first_name: The desired first name.```\n    - ```last_name: The desired last name.```\n    - *Returns*: ```OriginResponse```\n        \n- **usRaceEthnicityZIP5(first_name: str, last_name: str, zip5_code: str)**\n*Infer a US resident's likely race/ethnicity according to US Census taxonomy, usingZIP5code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian,non latino, B_NL (black, non latino).*\n\n    - ```first_name: The desired first name```\n    - ```last_name: The desired last name```\n    - ```zip5_code: The zip code to aid with classification```\n    - *Returns*: ```OriginResponse```\n    \n\n- **diaspora(first_name: str, last_name: str, country_code: CountryCodes)**\n*Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code*\n\n    - ```first_name: The desired first name. ```\n    - ```last_name: The desired last name. ```\n    - ```country_code: The country code to aid with classification.```\n    - *Returns*: ```DiasporaResponse ```\n\n- **parseName(full_name: str)**\n*Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John, given an ISO2 country of residence.*\n\n    - ```full_name: The full name to be parsed. ```\n    - *Returns*: ```ParseNameResponse ```\n\n- **parseNameGeo(full_name: str, country_code: CountryCodes)**\n*Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John, given an ISO2 country of residence.*\n\n    - ```full_name: The full name to be parsed. ```\n    - ```country_code: The country code to aid with classification.```\n    - *Returns*: ```ParseNameResponse ```\n\n- **origin(first_name: str, last_name: str)**\n*Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.*\n\n    - ```first_name: The desired first name. ```\n    - ```last_name: The desired last name. ```\n    - *Returns*: ```OriginResponse ```\n\n- **country(full_name: str)**\n*Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.*\n\n    - ```full_name: The name whose country of residence should be determined. ```\n    - *Returns*: ```OriginResponse ```\n\n\n\n## Responses\n- **GenderResponse**\n  - ```ID```\n  - ```first_name```\n  - ```last_name```\n  - ```likely_gender```\n  - ```gender_scale```\n  - ```score```\n  - ```probability_calibrated```\n- **GenderFullResponse**\n  - ```ID```\n  - ```name```\n  - ```likely_gender```\n  - ```gender_scale```\n  - ```score```\n- **OriginResponse**\n  - ```ID```\n  - ```first_name```\n  - ```last_name```\n  - ```likely_gender```\n  - ```score```\n  - ```country_origin```\n  - ```country_origin_alt```\n  - ```region_origin```\n  - ```top_region_origin```\n  - ```sub_region_origin```\n- **CountryResponse**\n  - ```ID```\n  - ```name```\n  - ```score```\n  - ```country```\n  - ```country_alt```\n  - ```region```\n  - ```top_region```\n  - ```sub_region```\n- **RaceEthnicityResponse**\n  - ```ID```\n  - ```first_name```\n  - ```last_name```\n  - ```race_ethnicity```\n  - ```race_ethnicity_alt```\n  - ```score```\n- **DiasporaResponse**\n  - ```ID```\n  - ```first_name```\n  - ```last_name```\n  - ```score```\n  - ```ethnicity```\n  - ```ethnicity_alt```\n  - ```lifted```\n  - ```country```\n- **ParseNameResponse**\n  - ```ID```\n  - ```name```\n  - ```name_parser_type```\n  - ```name_parser_type_alt```\n  - ```first_last_name```\n  - ```score```\n\n## Batches\nThe wrapper also exposes batch functions for each of the different classifications. These are to be used when multiple items need to be classified together.\n\n- ```GenderBatch``` --> `classify` *function returns* `GenderResponse` *list*     \n- ```GenderGeoBatch``` -->  `classify` *function returns* `GenderResponse` *list*\n- ```ParsedGenderBatch``` --> `classify` *function returns* `GenderResponse` *list*\n- ```ParsedGenderGeoBatch``` --> `classify` *function returns* `GenderResponse` *list*\n- ```GenderFullBatch``` --> `classify` *function returns* `GenderFullResponse` *list*\n- ```GenderFullGeoBatch``` --> `classify` *function returns* `GenderFullResponse` *list*\n- ```OriginBatch``` --> `classify` *function returns* `OriginResponse` *list*\n- ```CountryBatch``` --> `classify` *function returns* `CountryResponse` *list*\n- ```US_RaceEthnicityBatch``` --> `classify` *function returns* `RaceEthnicityResponse` *list*\n- ```US_ZipRaceEthnicityBatch``` --> `classify` *function returns* `RaceEthnicityResponse` *list*\n- ```DiasporaBatch``` --> `classify` *function returns* `DiasporaResponse` *list*\n- ```ParseNameBatch``` --> `classify` *function returns* `ParsedNameResponse` *list*\n- ```ParseNameGeoBatch``` --> `classify` *function returns* `ParsedNameResponse` *list*\n\n\n## Country Codes\nWhenever a country code needs to be passed to any function, the `CountryCodes` class should be used. It exposes an enum with all recognized country codes of the world marked by the respective country's name.\n\n## Contributing\nTo contribute to this repository, fork it and make changes. To run tests, cd into namsorclient and \nrun ```python -m pytest```. If all tests pass, sumbit a pull request. Note that the faker and xlrd modules are required for testing.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JosephPallipadan/Namsor-API-Wrapper-Python", "keywords": "Gender,Classify,Ethnicity,Origin,Country,Classifier,Namsor,Wrapper,Name to Gender,Name to Ethnicity,Name to Origin,Name", "license": "", "maintainer": "", "maintainer_email": "", "name": "namsor-client", "package_url": "https://pypi.org/project/namsor-client/", "platform": "", "project_url": "https://pypi.org/project/namsor-client/", "project_urls": {"Homepage": "https://github.com/JosephPallipadan/Namsor-API-Wrapper-Python"}, "release_url": "https://pypi.org/project/namsor-client/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "A Wrapper for the Namsor Classification API", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Overview</h2>\n<p><em>namsor-client</em> is a python package that serves as a wrapper for the Namsor classification API.\nThe API can determine the likely gender, ethnicity and country of origin of an individual with a particular name.</p>\n<h2>Installation</h2>\n<p><code>pip install namsor-client</code></p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">namsorclient</span> <span class=\"kn\">import</span> <span class=\"n\">NamsorClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">namsorclient.country_codes</span> <span class=\"kn\">import</span> <span class=\"n\">CountryCodes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">namsorclient.request_objects</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n\n<span class=\"c1\"># Create an instance of NamsorClient and pass in your API key as an argument.</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">NamsorClient</span><span class=\"p\">(</span><span class=\"s2\">\"Insert API key\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access the gender (GET) endpoint with function that returns a response of type GenderResponse.</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">gender</span><span class=\"p\">(</span><span class=\"s2\">\"Lelouch\"</span><span class=\"p\">,</span><span class=\"s2\">\"Lamperouge\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access the different parts of the response for this particular endpoint.</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">likely_gender</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">gender_scale</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">probability_calibrated</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Refer to the Responses section to view all different variables of each different Response.</span>\n\n\n<span class=\"c1\"># Access the genderBatch (POST) endpoint</span>\n<span class=\"n\">gender_batch</span> <span class=\"o\">=</span> <span class=\"n\">GenderBatch</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add items, with required arguments, to the batch you want</span>\n<span class=\"n\">gender_batch</span><span class=\"o\">.</span><span class=\"n\">addItem</span><span class=\"p\">(</span><span class=\"s2\">\"Lelouch\"</span><span class=\"p\">,</span><span class=\"s2\">\"Lamperouge\"</span><span class=\"p\">,</span><span class=\"s2\">\"A2773\"</span><span class=\"p\">)</span>\n<span class=\"n\">gender_batch</span><span class=\"o\">.</span><span class=\"n\">addItem</span><span class=\"p\">(</span><span class=\"s2\">\"Gon\"</span><span class=\"p\">,</span><span class=\"s2\">\"Freecs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"M9835\"</span><span class=\"p\">)</span>\n<span class=\"n\">gender_batch</span><span class=\"o\">.</span><span class=\"n\">addItem</span><span class=\"p\">(</span><span class=\"s2\">\"Jonathan\"</span><span class=\"p\">,</span><span class=\"s2\">\"Joestar\"</span><span class=\"p\">,</span> <span class=\"s2\">\"M6104\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Use classify function with required API Key argument and receive responses in the form of a list.</span>\n<span class=\"n\">response_list</span> <span class=\"o\">=</span> <span class=\"n\">gender_batch</span><span class=\"o\">.</span><span class=\"n\">classify</span><span class=\"p\">(</span><span class=\"s2\">\"Insert API key\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response_list</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">likely_gender</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Refer to the Batches section to look at the different types of batches and view the type of responses that will be returned when a batch is classified.</span>\n</pre>\n<p>Use the <code>export_to_excel</code> function to create a file with the required file name to represent the batch's data in spreadsheet form.</p>\n<pre><span class=\"n\">gender_batch</span><span class=\"o\">.</span><span class=\"n\">export_to_excel</span><span class=\"p\">(</span><span class=\"s2\">\"File Name.xlsx\"</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Result:</strong>\n<img alt=\"GitHub Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc3e0c813a24f63631c34829bd6abc30cbf78c4b/73707265616473686565745f6578616d706c652e706e67\"></p>\n<h2>API</h2>\n<ul>\n<li>\n<p><strong>gender(first_name: str, last_name: str)</strong>\n<em>Infer the likely gender of a name.</em></p>\n<ul>\n<li><code>first_name: The desired first name.</code></li>\n<li><code>last_name: The desired last name.</code></li>\n<li><em>Returns</em>: <code>GenderResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>genderGeo(first_name: str, last_name: str, country_code: CountryCodes)</strong>\n<em>Infer the likely gender of a name, given a local context (ISO2country code).</em></p>\n<ul>\n<li><code>first_name: The desired first name.</code></li>\n<li><code>last_name: The desired last name.</code></li>\n<li><code>country_code: The country code to aid with classification.</code></li>\n<li><em>Returns</em>: <code>GenderResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>genderFullGeo(full_name: str, country_code: CountryCodes)</strong>\n<em>Infer the likely gender of a full name, given a local context (ISO2 country code).</em></p>\n<ul>\n<li><code>full_name: The name to be classified.</code></li>\n<li><code>country_code: The country code to aid with classification.</code></li>\n<li><em>Returns</em>: <code>GenderResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>genderFull(full_name: str)</strong>\n<em>Infer the likely gender of a full name, ex. John H. Smith</em></p>\n<ul>\n<li><code>full_name: The name to be classified.</code></li>\n<li><em>Returns</em>: <code>GenderResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>usRaceEthnicity(first_name: str, last_name: str)</strong>\n<em>Infer a US resident's likely race/ethnicity according to US Census taxonomy W_N(white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino).</em></p>\n<ul>\n<li><code>first_name: The desired first name.</code></li>\n<li><code>last_name: The desired last name.</code></li>\n<li><em>Returns</em>: <code>OriginResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>usRaceEthnicityZIP5(first_name: str, last_name: str, zip5_code: str)</strong>\n<em>Infer a US resident's likely race/ethnicity according to US Census taxonomy, usingZIP5code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian,non latino, B_NL (black, non latino).</em></p>\n<ul>\n<li><code>first_name: The desired first name</code></li>\n<li><code>last_name: The desired last name</code></li>\n<li><code>zip5_code: The zip code to aid with classification</code></li>\n<li><em>Returns</em>: <code>OriginResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>diaspora(first_name: str, last_name: str, country_code: CountryCodes)</strong>\n<em>Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code</em></p>\n<ul>\n<li><code>first_name: The desired first name.</code></li>\n<li><code>last_name: The desired last name.</code></li>\n<li><code>country_code: The country code to aid with classification.</code></li>\n<li><em>Returns</em>: <code>DiasporaResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>parseName(full_name: str)</strong>\n<em>Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John, given an ISO2 country of residence.</em></p>\n<ul>\n<li><code>full_name: The full name to be parsed.</code></li>\n<li><em>Returns</em>: <code>ParseNameResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>parseNameGeo(full_name: str, country_code: CountryCodes)</strong>\n<em>Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John, given an ISO2 country of residence.</em></p>\n<ul>\n<li><code>full_name: The full name to be parsed.</code></li>\n<li><code>country_code: The country code to aid with classification.</code></li>\n<li><em>Returns</em>: <code>ParseNameResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>origin(first_name: str, last_name: str)</strong>\n<em>Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.</em></p>\n<ul>\n<li><code>first_name: The desired first name.</code></li>\n<li><code>last_name: The desired last name.</code></li>\n<li><em>Returns</em>: <code>OriginResponse</code></li>\n</ul>\n</li>\n<li>\n<p><strong>country(full_name: str)</strong>\n<em>Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.</em></p>\n<ul>\n<li><code>full_name: The name whose country of residence should be determined.</code></li>\n<li><em>Returns</em>: <code>OriginResponse</code></li>\n</ul>\n</li>\n</ul>\n<h2>Responses</h2>\n<ul>\n<li><strong>GenderResponse</strong>\n<ul>\n<li><code>ID</code></li>\n<li><code>first_name</code></li>\n<li><code>last_name</code></li>\n<li><code>likely_gender</code></li>\n<li><code>gender_scale</code></li>\n<li><code>score</code></li>\n<li><code>probability_calibrated</code></li>\n</ul>\n</li>\n<li><strong>GenderFullResponse</strong>\n<ul>\n<li><code>ID</code></li>\n<li><code>name</code></li>\n<li><code>likely_gender</code></li>\n<li><code>gender_scale</code></li>\n<li><code>score</code></li>\n</ul>\n</li>\n<li><strong>OriginResponse</strong>\n<ul>\n<li><code>ID</code></li>\n<li><code>first_name</code></li>\n<li><code>last_name</code></li>\n<li><code>likely_gender</code></li>\n<li><code>score</code></li>\n<li><code>country_origin</code></li>\n<li><code>country_origin_alt</code></li>\n<li><code>region_origin</code></li>\n<li><code>top_region_origin</code></li>\n<li><code>sub_region_origin</code></li>\n</ul>\n</li>\n<li><strong>CountryResponse</strong>\n<ul>\n<li><code>ID</code></li>\n<li><code>name</code></li>\n<li><code>score</code></li>\n<li><code>country</code></li>\n<li><code>country_alt</code></li>\n<li><code>region</code></li>\n<li><code>top_region</code></li>\n<li><code>sub_region</code></li>\n</ul>\n</li>\n<li><strong>RaceEthnicityResponse</strong>\n<ul>\n<li><code>ID</code></li>\n<li><code>first_name</code></li>\n<li><code>last_name</code></li>\n<li><code>race_ethnicity</code></li>\n<li><code>race_ethnicity_alt</code></li>\n<li><code>score</code></li>\n</ul>\n</li>\n<li><strong>DiasporaResponse</strong>\n<ul>\n<li><code>ID</code></li>\n<li><code>first_name</code></li>\n<li><code>last_name</code></li>\n<li><code>score</code></li>\n<li><code>ethnicity</code></li>\n<li><code>ethnicity_alt</code></li>\n<li><code>lifted</code></li>\n<li><code>country</code></li>\n</ul>\n</li>\n<li><strong>ParseNameResponse</strong>\n<ul>\n<li><code>ID</code></li>\n<li><code>name</code></li>\n<li><code>name_parser_type</code></li>\n<li><code>name_parser_type_alt</code></li>\n<li><code>first_last_name</code></li>\n<li><code>score</code></li>\n</ul>\n</li>\n</ul>\n<h2>Batches</h2>\n<p>The wrapper also exposes batch functions for each of the different classifications. These are to be used when multiple items need to be classified together.</p>\n<ul>\n<li><code>GenderBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>GenderResponse</code> <em>list</em></li>\n<li><code>GenderGeoBatch</code> --&gt;  <code>classify</code> <em>function returns</em> <code>GenderResponse</code> <em>list</em></li>\n<li><code>ParsedGenderBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>GenderResponse</code> <em>list</em></li>\n<li><code>ParsedGenderGeoBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>GenderResponse</code> <em>list</em></li>\n<li><code>GenderFullBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>GenderFullResponse</code> <em>list</em></li>\n<li><code>GenderFullGeoBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>GenderFullResponse</code> <em>list</em></li>\n<li><code>OriginBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>OriginResponse</code> <em>list</em></li>\n<li><code>CountryBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>CountryResponse</code> <em>list</em></li>\n<li><code>US_RaceEthnicityBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>RaceEthnicityResponse</code> <em>list</em></li>\n<li><code>US_ZipRaceEthnicityBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>RaceEthnicityResponse</code> <em>list</em></li>\n<li><code>DiasporaBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>DiasporaResponse</code> <em>list</em></li>\n<li><code>ParseNameBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>ParsedNameResponse</code> <em>list</em></li>\n<li><code>ParseNameGeoBatch</code> --&gt; <code>classify</code> <em>function returns</em> <code>ParsedNameResponse</code> <em>list</em></li>\n</ul>\n<h2>Country Codes</h2>\n<p>Whenever a country code needs to be passed to any function, the <code>CountryCodes</code> class should be used. It exposes an enum with all recognized country codes of the world marked by the respective country's name.</p>\n<h2>Contributing</h2>\n<p>To contribute to this repository, fork it and make changes. To run tests, cd into namsorclient and\nrun <code>python -m pytest</code>. If all tests pass, sumbit a pull request. Note that the faker and xlrd modules are required for testing.</p>\n\n          </div>"}, "last_serial": 5787265, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "37af6ef4b692fc39d6312483f3e56157", "sha256": "aad1f1fc3263004a040759391893628542f5250aa49b5ebdad072684dfcef6e2"}, "downloads": -1, "filename": "namsor_client-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "37af6ef4b692fc39d6312483f3e56157", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2910, "upload_time": "2019-08-03T19:16:56", "upload_time_iso_8601": "2019-08-03T19:16:56.597676Z", "url": "https://files.pythonhosted.org/packages/62/a2/12440f628bb9dbb998b0e5d51321396caf2b4b64a46ca1b4e056784d7474/namsor_client-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2856e434a8526b1f6060481851c06cb7", "sha256": "21cdb968703a8da52a9b1237eda846e825c7d4e57d3d754b7208d31b7f75f21a"}, "downloads": -1, "filename": "namsor-client-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2856e434a8526b1f6060481851c06cb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1686, "upload_time": "2019-08-03T19:16:59", "upload_time_iso_8601": "2019-08-03T19:16:59.001294Z", "url": "https://files.pythonhosted.org/packages/9f/30/cb779bb972ac451c501a94c299d23d73725cbb7564d71a46821f41a2b656/namsor-client-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "46a146e06b42faf47b58a9f5908a315c", "sha256": "ba2656fbf66fc4c385512517ceef0b2ea0126cb86c8e6d4b3f354ebf19c18c60"}, "downloads": -1, "filename": "namsor_client-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "46a146e06b42faf47b58a9f5908a315c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2933, "upload_time": "2019-08-03T19:42:43", "upload_time_iso_8601": "2019-08-03T19:42:43.614473Z", "url": "https://files.pythonhosted.org/packages/03/79/205efd9bc3702fb544b945c42185ebf9601d334b1c6c22b465c60bde05eb/namsor_client-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2367c35700d651984ca003534f1fec38", "sha256": "98675f5af421439d842750831d5edfb72f4234ce568bc1f3683943c808b22fe6"}, "downloads": -1, "filename": "namsor-client-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2367c35700d651984ca003534f1fec38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1717, "upload_time": "2019-08-03T19:42:45", "upload_time_iso_8601": "2019-08-03T19:42:45.180283Z", "url": "https://files.pythonhosted.org/packages/45/f0/60d9358f3e2cb3a95911e0c951c65ab198b0e04be2ed29c38ad5556caf8c/namsor-client-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "1400f99cc8edd034870f43c9515989ca", "sha256": "1c0261d712b4145f32cdb2651e9ed0d3e499bbe537a5e1ee35f286790b0555b9"}, "downloads": -1, "filename": "namsor_client-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1400f99cc8edd034870f43c9515989ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9745, "upload_time": "2019-08-19T23:00:25", "upload_time_iso_8601": "2019-08-19T23:00:25.390785Z", "url": "https://files.pythonhosted.org/packages/61/16/61be55724d7e13fe2f032931bf9bb82f03cc8a1f1dbd46a12f9f269b89ff/namsor_client-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a618cadb4330184502817b21170562fa", "sha256": "28d8d360869dfdd58073cbe2635cf9394fda7be913ad00bbdc8facb193e7a253"}, "downloads": -1, "filename": "namsor-client-0.0.3.tar.gz", "has_sig": false, "md5_digest": "a618cadb4330184502817b21170562fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7855, "upload_time": "2019-08-19T23:00:26", "upload_time_iso_8601": "2019-08-19T23:00:26.798011Z", "url": "https://files.pythonhosted.org/packages/11/f4/6766c424a92aa658fa83600a3243c44a47da2e9e763d560e9f93d65846ea/namsor-client-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e2fc77c50d5b1d66fb2fc2c705f14278", "sha256": "1e5f6e30d3569e0f4e5842e8b1a7a2e1f21da1ecc0c6eb6f1286baba568c2967"}, "downloads": -1, "filename": "namsor_client-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e2fc77c50d5b1d66fb2fc2c705f14278", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12481, "upload_time": "2019-08-25T23:26:04", "upload_time_iso_8601": "2019-08-25T23:26:04.779717Z", "url": "https://files.pythonhosted.org/packages/bb/67/e0cb1e3a09392c3a2cba23283dc84ce23a413a828b384b82512231e2e032/namsor_client-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca767207a26e4743779361fccdc21d8d", "sha256": "dfb8025cdd55b27cccd4bf51ca766ce3a9f50b8cbb5d0678cd08edf5ea007785"}, "downloads": -1, "filename": "namsor-client-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ca767207a26e4743779361fccdc21d8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9627, "upload_time": "2019-08-25T23:26:05", "upload_time_iso_8601": "2019-08-25T23:26:05.821939Z", "url": "https://files.pythonhosted.org/packages/2c/78/4e2462c4c6727f00452ed7d38c2e95cc20858b46f5b6cc1402edc927ebd2/namsor-client-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "4a378657a390609f327f280b8e6efbae", "sha256": "062393d716a7b6274cb2ec9a411fb43171c25814268505b894264eeb6ba34e84"}, "downloads": -1, "filename": "namsor_client-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4a378657a390609f327f280b8e6efbae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16629, "upload_time": "2019-08-28T20:19:23", "upload_time_iso_8601": "2019-08-28T20:19:23.655161Z", "url": "https://files.pythonhosted.org/packages/55/f9/78a046fa9d4d261c273c9c30be14ebfbbba2cd0b9210cb66b29c4ace9c50/namsor_client-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70472de1cebcffad5b92a3c8161cf183", "sha256": "ac5c30e4956524cafe86eaca9570e73d51f832b57302cb800f6ea9c43acb906d"}, "downloads": -1, "filename": "namsor-client-0.0.5.tar.gz", "has_sig": false, "md5_digest": "70472de1cebcffad5b92a3c8161cf183", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13779, "upload_time": "2019-08-28T20:19:27", "upload_time_iso_8601": "2019-08-28T20:19:27.017416Z", "url": "https://files.pythonhosted.org/packages/d2/41/ef1d86dce361ea4c9ba93f403b4926827d328789c871e36da6e50ebf7b4f/namsor-client-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "cab26336d57cc78d63a0397569ed3a8a", "sha256": "f2b044a966983919a63904cb622134ae8be9ee3fe25df4162961e6c91dd0a11d"}, "downloads": -1, "filename": "namsor_client-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "cab26336d57cc78d63a0397569ed3a8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16630, "upload_time": "2019-08-28T21:14:02", "upload_time_iso_8601": "2019-08-28T21:14:02.220745Z", "url": "https://files.pythonhosted.org/packages/d8/0b/11573c12f076e5080c2d23188bd32c15df91b0b097c573df3ccad4c97743/namsor_client-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ed575148b9592efc1688c2caa88d54c", "sha256": "f9f5c96f4a5c8ac2eefde03b4d7a07a09dc0e555f82c6f2f54051fb9240accc2"}, "downloads": -1, "filename": "namsor-client-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4ed575148b9592efc1688c2caa88d54c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13780, "upload_time": "2019-08-28T21:14:03", "upload_time_iso_8601": "2019-08-28T21:14:03.905530Z", "url": "https://files.pythonhosted.org/packages/5c/1d/6f2efbc44f1b3971214f050a1ac2c188a7e217548c3aba82255e479368ee/namsor-client-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "ade46fa91a8f7d09073de2160e406505", "sha256": "46114678b4f79c107c5e8da598779ac5a3b6f11aec5f953b69b6b000e11ea3a3"}, "downloads": -1, "filename": "namsor-client-0.0.7.tar.gz", "has_sig": false, "md5_digest": "ade46fa91a8f7d09073de2160e406505", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13791, "upload_time": "2019-08-28T21:23:34", "upload_time_iso_8601": "2019-08-28T21:23:34.701944Z", "url": "https://files.pythonhosted.org/packages/9c/39/9ad030abaaa012809d5656fad3f51029036f0f496161c0ae09a034400b60/namsor-client-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "35e96aba120ece702708b836250c7312", "sha256": "39d16c48388b74b249f8f523acaf7c05ef29cb99d03cae5721d9010de2ffcbe7"}, "downloads": -1, "filename": "namsor-client-0.0.8.tar.gz", "has_sig": false, "md5_digest": "35e96aba120ece702708b836250c7312", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13803, "upload_time": "2019-08-28T21:44:35", "upload_time_iso_8601": "2019-08-28T21:44:35.296124Z", "url": "https://files.pythonhosted.org/packages/d2/0e/098acbe9e5cf23081546784088260906da72e962ea75ed16fd53cb69e95a/namsor-client-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "c0b206cf490cf034c74f20a0879b329a", "sha256": "926b46b24ff49d20c198459f374293534cf4ab85cf700f98862f98b948d51ed6"}, "downloads": -1, "filename": "namsor-client-0.0.9.tar.gz", "has_sig": false, "md5_digest": "c0b206cf490cf034c74f20a0879b329a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19143, "upload_time": "2019-09-02T11:21:31", "upload_time_iso_8601": "2019-09-02T11:21:31.138621Z", "url": "https://files.pythonhosted.org/packages/54/00/13072d69b6ccb14555ce9337d2e8e003e5225be4d8ce36bfb3abc53f31e5/namsor-client-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "f2cd5f5771c1378f37d5ff7f675b885f", "sha256": "b3ebc926eda03bc2e52fd15781a5b76468fe85eadd7716ce0c2735bcccf1ae5b"}, "downloads": -1, "filename": "namsor-client-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f2cd5f5771c1378f37d5ff7f675b885f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19137, "upload_time": "2019-09-02T11:39:11", "upload_time_iso_8601": "2019-09-02T11:39:11.594781Z", "url": "https://files.pythonhosted.org/packages/ca/b2/f0360892a0e86745e5d1e517d7fe9904e17c755991bfa21e791886e8fb4e/namsor-client-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8a9a5e43c28fea96004de15875c6e77c", "sha256": "a842ad3499dd77b295165d8f2fd8369a160e6b04f08b11c088b2ddbc453d0761"}, "downloads": -1, "filename": "namsor-client-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8a9a5e43c28fea96004de15875c6e77c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19104, "upload_time": "2019-09-02T11:45:50", "upload_time_iso_8601": "2019-09-02T11:45:50.802074Z", "url": "https://files.pythonhosted.org/packages/d3/f9/fbf59f0daeb2d78681795f9c7c8b55b5577beac94ab1565d5638153caf7e/namsor-client-0.1.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "dfe842132a8b551fe0f4eab99c713722", "sha256": "d92ba56e1d1a84dfec014ff7b5654cf6f5df5f13fc727da5f96039ee7eb0397f"}, "downloads": -1, "filename": "namsor-client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "dfe842132a8b551fe0f4eab99c713722", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16207, "upload_time": "2019-09-02T12:10:54", "upload_time_iso_8601": "2019-09-02T12:10:54.982785Z", "url": "https://files.pythonhosted.org/packages/ef/a8/e0bcab7137fb10e048fa3d92fa5aaa54ed9a184214627814d68749fc1680/namsor-client-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b287ad845b9864924c139b6b7cecc163", "sha256": "23a5ff0546aa7a2129669e9c3abcfeac7f6425725acdea15615bbabd5f14d520"}, "downloads": -1, "filename": "namsor-client-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b287ad845b9864924c139b6b7cecc163", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19440, "upload_time": "2019-09-03T19:19:37", "upload_time_iso_8601": "2019-09-03T19:19:37.962137Z", "url": "https://files.pythonhosted.org/packages/3f/c2/cf5f2b16fda06a9f08aa1f25ccc2007692fd06af39f687da4e8bb6290fda/namsor-client-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "02b7c1a15b2d2ec4431d4372591da110", "sha256": "0e7477587401255372fbabd7972c9c3c2c1d17f20a504957901ae6e54838d733"}, "downloads": -1, "filename": "namsor-client-1.0.2.tar.gz", "has_sig": false, "md5_digest": "02b7c1a15b2d2ec4431d4372591da110", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19451, "upload_time": "2019-09-05T15:44:32", "upload_time_iso_8601": "2019-09-05T15:44:32.247911Z", "url": "https://files.pythonhosted.org/packages/5b/a3/226bda68fecc7453a1a5374f3ee2bb0930c05bd79bbfeb5cd507b932559f/namsor-client-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "cd97e9489bfb7f48a57873555411af77", "sha256": "a863ee7032d6f44cf690896009f3e1fbf7230a708cde2bc657d46fd0e0d9e445"}, "downloads": -1, "filename": "namsor-client-1.0.3.tar.gz", "has_sig": false, "md5_digest": "cd97e9489bfb7f48a57873555411af77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16247, "upload_time": "2019-09-05T15:57:08", "upload_time_iso_8601": "2019-09-05T15:57:08.940569Z", "url": "https://files.pythonhosted.org/packages/3c/9a/3df4cbd15544d14a0b4848e98556b8176a527cb0f31f99a4ca76bdbaf0db/namsor-client-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd97e9489bfb7f48a57873555411af77", "sha256": "a863ee7032d6f44cf690896009f3e1fbf7230a708cde2bc657d46fd0e0d9e445"}, "downloads": -1, "filename": "namsor-client-1.0.3.tar.gz", "has_sig": false, "md5_digest": "cd97e9489bfb7f48a57873555411af77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16247, "upload_time": "2019-09-05T15:57:08", "upload_time_iso_8601": "2019-09-05T15:57:08.940569Z", "url": "https://files.pythonhosted.org/packages/3c/9a/3df4cbd15544d14a0b4848e98556b8176a527cb0f31f99a4ca76bdbaf0db/namsor-client-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:41 2020"}