{"info": {"author": "Jacob Rief", "author_email": "jacob.rief@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# django-sass-processor\n\nAnnoyed having to run a Compass, Grunt or Gulp daemon while developing Django projects?\n\nWell, then this app is for you! Compile SASS/SCSS files on the fly without having to manage\nthird party services nor special IDE plugins.\n\n[![Build Status](https://travis-ci.org/jrief/django-sass-processor.svg)](https://travis-ci.org/jrief/django-sass-processor)\n[![PyPI](https://img.shields.io/pypi/pyversions/django-sass-processor.svg)]()\n[![PyPI version](https://img.shields.io/pypi/v/django-sass-processor.svg)](https://pypi.python.org/pypi/django-sass-processor)\n[![PyPI](https://img.shields.io/pypi/l/django-sass-processor.svg)]()\n[![Downloads](https://img.shields.io/pypi/dm/django-sass-processor.svg)](https://pypi.python.org/pypi/django-sass-processor)\n[![Twitter Follow](https://img.shields.io/twitter/follow/shields_io.svg?style=social&label=Follow&maxAge=2592000)](https://twitter.com/jacobrief)\n\n**Version 0.7.5 will be the latest version to support Python-2.7** \n\nThe master branch of **django-sass-processor** already supports Django-3.0. However,\n[django-compressor](https://django-compressor.readthedocs.io/en/stable/) (which it depends on)\n[does not yet support Django-3.0](https://github.com/django-compressor/django-compressor/issues/980),\nhence I have to wait until a new version of django-compressor is available on PyPI.\nUntil then, please use the master branch if you need Django-3.0.\n\n\n## Other good reasons for using this library\n\n* Refer SASS/SCSS files directly from your sources, instead of referring a compiled CSS file,\nhaving to rely on another utility which creates them from SASS/SCSS files, hidden in\nyour source tree.\n* Use Django's `settings.py` for the configuration of paths, box sizes etc., instead of having another\nSCSS specific file (typically `_variables.scss`), to hold these.\n* Extend your SASS functions by calling Python functions directly out of your Django project.\n* View SCSS errors directly in the debug console of your Django's development server.\n\n**django-sass-processor** converts `*.scss` or `*.sass` files into `*.css` while rendering\ntemplates. For performance reasons this is done only once, since the preprocessor keeps track on\nthe timestamps and only recompiles, if any of the imported SASS/SCSS files is younger than the\ncorresponding generated CSS file.\n\n## Introduction\n\nThis Django app provides a templatetag `{% sass_src 'path/to/file.scss' %}`, which can be used\ninstead of the built-in templatetag `static`. This templatetag also works inside Jinja2 templates.\n\nIf SASS/SCSS files shall be referenced through the `Media` class, or `media` property, the SASS\nprocessor can be used directly.\n\nAdditionally, **django-sass-processor** is shipped with a management command, which can convert\nthe content of all occurrences inside the templatetag `sass_src` as an offline operation. Hence\nthe **libsass** compiler is not required in a production environment.\n\nDuring development, a [sourcemap](https://developer.chrome.com/devtools/docs/css-preprocessors) is\ngenerated along side with the compiled `*.css` file. This allows to debug style sheet errors much\neasier.\n\nWith this tool, you can safely remove your Ruby installations \"Compass\" and \"SASS\" from your Django\nprojects. You neither need any directory \"watching\" daemons based on node.js.\n\n## Project's Home\n\nOn GitHub:\n\nhttps://github.com/jrief/django-sass-processor\n\nPlease use the issue tracker to report bugs or propose new features.\n\n## Installation\n\n```\npip install libsass django-compressor django-sass-processor\n```\n\n`django-compressor` is required only for offline compilation, when using the command\n`manage.py compilescss`.\n\n`libsass` is not required on the production environment, if SASS/SCSS files have been precompiled\nand deployed using offline compilation.\n\n## Configuration\n\nIn `settings.py` add to:\n\n```python\nINSTALLED_APPS = [\n    ...\n    'sass_processor',\n    ...\n]\n```\n\n**django-sass-processor** is shipped with a special finder, to locate the generated `*.css` files\nin the directory referred by `SASS_PROCESSOR_ROOT` (or, if unset `STATIC_ROOT`). Just add it to\nyour `settings.py`. If there is no `STATICFILES_FINDERS` in your `settings.py` don't forget\nto include the **Django** [default finders](https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-STATICFILES_FINDERS).\n\nIf the directory referred by `SASS_PROCESSOR_ROOT` does not exist, then **django-sass-processor**\ncreates it. This does not apply, if `SASS_PROCESSOR_ROOT` is unset and hence defaults to\n`STATIC_ROOT`. Therefore it is a good idea to otherwise use `SASS_PROCESSOR_ROOT = STATIC_ROOT`\nin your `settings.py`.\n\n```python\nSTATICFILES_FINDERS = [\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    'sass_processor.finders.CssFinder',\n    ...\n]\n```\n\nOptionally, add a list of additional search paths, the SASS compiler may examine when using the\n`@import \"...\";` statement in SASS/SCSS files:\n\n```python\nimport os\n\nSASS_PROCESSOR_INCLUDE_DIRS = [\n    os.path.join(PROJECT_PATH, 'extra-styles/scss'),\n    os.path.join(PROJECT_PATH, 'node_modules'),\n]\n```\n\nAdditionally, **django-sass-processor** will traverse all installed Django apps (`INSTALLED_APPS`)\nand look into their static folders. If any of them contain a file matching the regular expression\npattern `^_.+\\.(scss|sass)$` (read: filename starts with an underscore and is of type `scss` or\n`sass`), then that app specific static folder is added to the **libsass** include dirs. This\nfeature can be disabled in your settings with:\n\n```python\nSASS_PROCESSOR_AUTO_INCLUDE = False\n```\n\nIf inside of your SASS/SCSS files, you also want to import (using `@import \"path/to/scssfile\";`)\nfiles which do not start with an underscore, then you can configure another Regex pattern in your\nsettings, for instance:\n\n```python\nSASS_PROCESSOR_INCLUDE_FILE_PATTERN = r'^.+\\.scss$'\n```\n\nwill look for all files of type `scss`. Remember that SASS/SCSS files which start with an\nunderscore, are intended to be imported by other SASS/SCSS files, while files starting with a\nletter or number are intended to be included by the HTML tag\n`<link href=\"{% sass_src 'path/to/file.scss' %}\" ...>`.\n\nDuring development, or when `SASS_PROCESSOR_ENABLED = True`, the compiled file is placed into the\nfolder referenced by `SASS_PROCESSOR_ROOT` (if unset, this setting defaults to `STATIC_ROOT`).\nHaving a location outside of the working directory prevents to pollute your local `static/css/...`\ndirectories with auto-generated files. Therefore assure, that this directory is writable by the\nDjango runserver.\n\n\n#### Fine tune SASS compiler parameters in `settings.py`.\n\nInteger `SASS_PRECISION` sets floating point precision for output css. libsass'\ndefault is `5`. Note: **bootstrap-sass** requires `8`, otherwise various\nlayout problems _will_ occur.\n\n```python\nSASS_PRECISION = 8\n```\n\n`SASS_OUTPUT_STYLE` sets coding style of the compiled result, one of `compact`,\n`compressed`, `expanded`, or `nested`. Default is `nested` for `DEBUG`\nand `compressed` in production.\n\nNote: **libsass-python** 0.8.3 has [problem encoding result while saving on\nWindows](https://github.com/dahlia/libsass-python/pull/82), the issue is already\nfixed and will be included in future `pip` package release, in the meanwhile\navoid `compressed` output style.\n\n```python\nSASS_OUTPUT_STYLE = 'compact'\n```\n\n### Jinja2 support\n\n`sass_processor.jinja2.ext.SassSrc` is a Jinja2 extension. Add it to your Jinja2 environment to enable the tag `sass_src`, there is no need for a `load` tag. Example of how to add your Jinja2 environment to Django:\n\nIn `settings.py`:\n\n```python\nTEMPLATES = [{\n    'BACKEND': 'django.template.backends.jinja2.Jinja2',\n    'DIRS': [],\n    'APP_DIRS': True,\n    'OPTIONS': {\n        'environment': 'yourapp.jinja2.environment'\n    },\n    ...\n}]\n```\n\nMake sure to add the default template backend, if you're still using Django templates elsewhere.\nThis is covered in the [Upgrading templates documentation](https://docs.djangoproject.com/en/stable/ref/templates/upgrading/).\n\nIn `yourapp/jinja2.py`:\n\n```python\n# Include this for Python 2.\nfrom __future__ import absolute_import\n\nfrom jinja2 import Environment\n\n\ndef environment(**kwargs):\n    extensions = [] if 'extensions' not in kwargs else kwargs['extensions']\n    extensions.append('sass_processor.jinja2.ext.SassSrc')\n    kwargs['extensions'] = extensions\n\n    return Environment(**kwargs)\n```\n\nIf you want to make use of the `compilescss` command, then you will also have to add the following to your settings:\n\n```python\nfrom yourapp.jinja2 import environment\n\nCOMPRESS_JINJA2_GET_ENVIRONMENT = environment\n```\n\n## Usage\n\n### In your Django templates\n\n```django\n{% load sass_tags %}\n\n<link href=\"{% sass_src 'myapp/css/mystyle.scss' %}\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\nThe above template code will be rendered as HTML\n\n```html\n<link href=\"/static/myapp/css/mystyle.css\" rel=\"stylesheet\" type=\"text/css\" />\n```\n\nYou can safely use this templatetag inside a [Sekizai](https://django-sekizai.readthedocs.io/)'s\n`{% addtoblock \"css\" %}` statement.\n\n### In Media classes or properties\n\nIn Python code, you can access the API of the SASS processor directly. This for instance is useful\nin Django's admin or form framework.\n\n```python\nfrom sass_processor.processor import sass_processor\n\nclass SomeAdminOrFormClass(...):\n    ...\n    class Media:\n        css = {\n            'all': [sass_processor('myapp/css/mystyle.scss')],\n        }\n```\n\n## Add vendor prefixes to CSS rules using values from https://caniuse.com/\n\nWriting SCSS shall be fast and easy and you should not have to care, whether to add vendor specific\nprefixes to your CSS directives. Unfortunately there is no pure Python package to solve this, but\nwith a few node modules, we can add this to our process chain.\n\nAs superuser install\n\n```shell\nnpm install -g npx\n```\n\nand inside your project root, install\n\n```shell\nnpm install postcss-cli autoprefixer\n```\n\nCheck that the path of `node_modules` corresponds to its entry in the settings directive\n`STATICFILES_DIRS` (see below).\n\nIn case `npx` can not be found in your system path, use the settings directive\n`NODE_NPX_PATH = /path/to/npx` to point to that executable.\n\nIf everything is setup correctly, **django-sass-processor** adds all required vendor prefixes to\nthe compiled CSS files. For further information, refer to the\n[Autoprefixer](https://github.com/postcss/autoprefixer) package.\n\nTo disable autoprefixing, set `NODE_NPX_PATH = None`.\n\n**Important note**: If `npx` is installed, but `postcss` and/or `autoprefixer` are missing\nin the local `node_modules`, setting `NODE_NPX_PATH` to `None` is manadatory, otherwise\n**django-sass-processor** does not know how to postprocess the generated CSS files.\n\n## Offline compilation\n\nIf you want to precompile all occurrences of your SASS/SCSS files for the whole project, on the\ncommand line invoke:\n\n```shell\n./manage.py compilescss\n```\n\nThis is useful for preparing production environments, where SASS/SCSS files can't be compiled on\nthe fly.\n\nTo simplify the deployment, the compiled `*.css` files are stored side-by-side with their\ncorresponding SASS/SCSS files. After compiling the files run\n\n```shell\n./manage.py collectstatic\n```\n\nas you would in a normal deployment.\n\nIn case you don't want to expose the SASS/SCSS files in a production environment,\ndeploy with:\n\n```shell\n./manage.py collectstatic --ignore=*.scss\n```\n\nTo get rid of the compiled `*.css` files in your local static directories, simply reverse the\nabove command:\n\n```shell\n./manage.py compilescss --delete-files\n```\n\nThis will remove all occurrences of previously generated `*.css` files.\n\nOr you may compile results to the `SASS_PROCESSOR_ROOT` directory directy (if not specified - to\n`STATIC_ROOT`):\n\n```shell\n./manage.py compilescss --use-processor-root\n```\n\nCombine with `--delete-files` switch to purge results from there.\n\nIf you use an alternative templating engine set its name in `--engine` argument. Currently\n`django` and `jinja2` are supported, see\n[django-compressor documentation](http://django-compressor.readthedocs.org/en/latest/) on how to\nset up `COMPRESS_JINJA2_GET_ENVIRONMENT` to configure jinja2 engine support.\n\nDuring offline compilation **django-sass-processor** parses all Python files and looks for\ninvocations of `sass_processor('path/to/sassfile.scss')`. Therefore the string specifying\nthe filename must be hard coded and shall not be concatenated or being somehow generated.\n\n### Alternative templates\n\nBy default, **django-sass-processor** will locate SASS/SCSS files from .html templates,\nbut you can extend or override this behavior in your settings with:\n\n```python\nSASS_TEMPLATE_EXTS = ['.html','.jade']\n```\n\n## Configure SASS variables through settings.py\n\nIn SASS, a nasty problem is to set the correct include paths for icons and fonts. Normally this is\ndone through a `_variables.scss` file, but this inhibits a configuration through your projects\n`settings.py`.\n\nTo avoid the need for duplicate configuration settings, **django-sass-processor** offers a SASS\nfunction to fetch any arbitrary configuration directive from the project's `settings.py`. This\nis specially handy to set the include path of your Glyphicons font directory. Assume, Bootstrap-SASS\nhas been installed using:\n\n```shell\nnpm install bootstrap-sass\n```\n\nthen locate the directory named `node_modules` and add it to your settings, so that your fonts are\naccessible through the Django's `django.contrib.staticfiles.finders.FileSystemFinder`:\n\n```python\nSTATICFILES_DIRS = [\n    ...\n    ('node_modules', '/path/to/your/project/node_modules/'),\n    ...\n]\n\nNODE_MODULES_URL = STATIC_URL + 'node_modules/'\n```\n\nWith the SASS function `get-setting`, it is possible to override any SASS variable with a value\nconfigured in the project's `settings.py`. For the Glyphicons font search path, add this to your\n`_variables.scss`:\n\n```scss\n$icon-font-path: unquote(get-setting(NODE_MODULES_URL) + \"bootstrap-sass/assets/fonts/bootstrap/\");\n```\n\nand `@import \"variables\";` whenever you need Glyphicons. You then can safely remove any font\nreferences, such as `<link href=\"/path/to/your/fonts/bootstrap/glyphicons-whatever.ttf\" ...>`\nfrom you HTML templates.\n\n\n### Configure SASS variables through Python functions\n\nIt is even possible to call Python functions from inside any module. Do this by adding\n`SASS_PROCESSOR_CUSTOM_FUNCTIONS` to the project's `settings.py`. This shall contain a mapping\nof SASS function names pointing to a Python function name.\n\nExample:\n\n```python\nSASS_PROCESSOR_CUSTOM_FUNCTIONS = {\n    'get-color': 'myproject.utils.get_color',\n}\n```\n\nThis allows to invoke Python functions out of any `*.scss` file. \n\n```scss\n$color: get-color(250, 10, 120);\n```\n\nHere we pass the parameters '250, 10, 120' into the function `def get_color(red, green, blue)`\nin Python module `myproject.utils`. Note that this function receives the values as `sass.Number`,\nhence extract values using `red.value`, etc.\n\nIf one of these customoized functions returns a value, which is not a string, then convert it\neither to a Python string or to a value of type `sass.SassNumber`. For other types, refer to their\ndocumentation.\n\nSuch customized functions must accept parameters explicilty, otherwise `sass_processor` does not\nknow how to map them. Variable argument lists therefore can not be used.\n\n\n## Serving static files with S3\n\nA custom Storage class is provided for use if your deployment serves css files out of S3. You must have Boto 3 installed. To use it, add this to your settings file:\n```\nSTATICFILES_STORAGE = 'sass_processor.storage.SassS3Boto3Storage'\n```\n\n\n## Heroku\n\nIf you are deploying to [Heroku](https://www.heroku.com/), use the [heroku-buildpack-django-sass](https://elements.heroku.com/buildpacks/drpancake/heroku-buildpack-django-sass) buildpack to automatically compile scss for you.\n\n\n## Development\n\nTo run the tests locally, clone the repository, create a new virtualenv, activate it and then run\nthese commands:\n\n```shell\ncd django-sass-processor\npip install tox\ntox\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jrief/django-sass-processor", "keywords": "django,sass", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-sass-processor", "package_url": "https://pypi.org/project/django-sass-processor/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django-sass-processor/", "project_urls": {"Homepage": "https://github.com/jrief/django-sass-processor"}, "release_url": "https://pypi.org/project/django-sass-processor/0.8/", "requires_dist": null, "requires_python": "", "summary": "SASS processor to compile SCSS files into *.css, while rendering, or offline.", "version": "0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-sass-processor</h1>\n<p>Annoyed having to run a Compass, Grunt or Gulp daemon while developing Django projects?</p>\n<p>Well, then this app is for you! Compile SASS/SCSS files on the fly without having to manage\nthird party services nor special IDE plugins.</p>\n<p><a href=\"https://travis-ci.org/jrief/django-sass-processor\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99eb230b193b6a150564fb98535ca13ee7c686de/68747470733a2f2f7472617669732d63692e6f72672f6a726965662f646a616e676f2d736173732d70726f636573736f722e737667\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6a9a7f2b9bec8374ba45161cb7d92978d8bc6392/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d736173732d70726f636573736f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-sass-processor\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a992db176666a7418f115078914596b0d1cfc824/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d736173732d70726f636573736f722e737667\"></a>\n<a href=\"\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc56d4efa28d9ae6530ef566a0c28fe9e9392262/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f2d736173732d70726f636573736f722e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django-sass-processor\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa4c3e601ae904d37ccd74884a8fb530e742a347/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f646a616e676f2d736173732d70726f636573736f722e737667\"></a>\n<a href=\"https://twitter.com/jacobrief\" rel=\"nofollow\"><img alt=\"Twitter Follow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/20e6ae861acd1008ae5294454cefb0f494b27a60/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f736869656c64735f696f2e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77266d61784167653d32353932303030\"></a></p>\n<p><strong>Version 0.7.5 will be the latest version to support Python-2.7</strong></p>\n<p>The master branch of <strong>django-sass-processor</strong> already supports Django-3.0. However,\n<a href=\"https://django-compressor.readthedocs.io/en/stable/\" rel=\"nofollow\">django-compressor</a> (which it depends on)\n<a href=\"https://github.com/django-compressor/django-compressor/issues/980\" rel=\"nofollow\">does not yet support Django-3.0</a>,\nhence I have to wait until a new version of django-compressor is available on PyPI.\nUntil then, please use the master branch if you need Django-3.0.</p>\n<h2>Other good reasons for using this library</h2>\n<ul>\n<li>Refer SASS/SCSS files directly from your sources, instead of referring a compiled CSS file,\nhaving to rely on another utility which creates them from SASS/SCSS files, hidden in\nyour source tree.</li>\n<li>Use Django's <code>settings.py</code> for the configuration of paths, box sizes etc., instead of having another\nSCSS specific file (typically <code>_variables.scss</code>), to hold these.</li>\n<li>Extend your SASS functions by calling Python functions directly out of your Django project.</li>\n<li>View SCSS errors directly in the debug console of your Django's development server.</li>\n</ul>\n<p><strong>django-sass-processor</strong> converts <code>*.scss</code> or <code>*.sass</code> files into <code>*.css</code> while rendering\ntemplates. For performance reasons this is done only once, since the preprocessor keeps track on\nthe timestamps and only recompiles, if any of the imported SASS/SCSS files is younger than the\ncorresponding generated CSS file.</p>\n<h2>Introduction</h2>\n<p>This Django app provides a templatetag <code>{% sass_src 'path/to/file.scss' %}</code>, which can be used\ninstead of the built-in templatetag <code>static</code>. This templatetag also works inside Jinja2 templates.</p>\n<p>If SASS/SCSS files shall be referenced through the <code>Media</code> class, or <code>media</code> property, the SASS\nprocessor can be used directly.</p>\n<p>Additionally, <strong>django-sass-processor</strong> is shipped with a management command, which can convert\nthe content of all occurrences inside the templatetag <code>sass_src</code> as an offline operation. Hence\nthe <strong>libsass</strong> compiler is not required in a production environment.</p>\n<p>During development, a <a href=\"https://developer.chrome.com/devtools/docs/css-preprocessors\" rel=\"nofollow\">sourcemap</a> is\ngenerated along side with the compiled <code>*.css</code> file. This allows to debug style sheet errors much\neasier.</p>\n<p>With this tool, you can safely remove your Ruby installations \"Compass\" and \"SASS\" from your Django\nprojects. You neither need any directory \"watching\" daemons based on node.js.</p>\n<h2>Project's Home</h2>\n<p>On GitHub:</p>\n<p><a href=\"https://github.com/jrief/django-sass-processor\" rel=\"nofollow\">https://github.com/jrief/django-sass-processor</a></p>\n<p>Please use the issue tracker to report bugs or propose new features.</p>\n<h2>Installation</h2>\n<pre><code>pip install libsass django-compressor django-sass-processor\n</code></pre>\n<p><code>django-compressor</code> is required only for offline compilation, when using the command\n<code>manage.py compilescss</code>.</p>\n<p><code>libsass</code> is not required on the production environment, if SASS/SCSS files have been precompiled\nand deployed using offline compilation.</p>\n<h2>Configuration</h2>\n<p>In <code>settings.py</code> add to:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'sass_processor'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>django-sass-processor</strong> is shipped with a special finder, to locate the generated <code>*.css</code> files\nin the directory referred by <code>SASS_PROCESSOR_ROOT</code> (or, if unset <code>STATIC_ROOT</code>). Just add it to\nyour <code>settings.py</code>. If there is no <code>STATICFILES_FINDERS</code> in your <code>settings.py</code> don't forget\nto include the <strong>Django</strong> <a href=\"https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-STATICFILES_FINDERS\" rel=\"nofollow\">default finders</a>.</p>\n<p>If the directory referred by <code>SASS_PROCESSOR_ROOT</code> does not exist, then <strong>django-sass-processor</strong>\ncreates it. This does not apply, if <code>SASS_PROCESSOR_ROOT</code> is unset and hence defaults to\n<code>STATIC_ROOT</code>. Therefore it is a good idea to otherwise use <code>SASS_PROCESSOR_ROOT = STATIC_ROOT</code>\nin your <code>settings.py</code>.</p>\n<pre><span class=\"n\">STATICFILES_FINDERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'django.contrib.staticfiles.finders.FileSystemFinder'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django.contrib.staticfiles.finders.AppDirectoriesFinder'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'sass_processor.finders.CssFinder'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Optionally, add a list of additional search paths, the SASS compiler may examine when using the\n<code>@import \"...\";</code> statement in SASS/SCSS files:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">SASS_PROCESSOR_INCLUDE_DIRS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">PROJECT_PATH</span><span class=\"p\">,</span> <span class=\"s1\">'extra-styles/scss'</span><span class=\"p\">),</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">PROJECT_PATH</span><span class=\"p\">,</span> <span class=\"s1\">'node_modules'</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Additionally, <strong>django-sass-processor</strong> will traverse all installed Django apps (<code>INSTALLED_APPS</code>)\nand look into their static folders. If any of them contain a file matching the regular expression\npattern <code>^_.+\\.(scss|sass)$</code> (read: filename starts with an underscore and is of type <code>scss</code> or\n<code>sass</code>), then that app specific static folder is added to the <strong>libsass</strong> include dirs. This\nfeature can be disabled in your settings with:</p>\n<pre><span class=\"n\">SASS_PROCESSOR_AUTO_INCLUDE</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n<p>If inside of your SASS/SCSS files, you also want to import (using <code>@import \"path/to/scssfile\";</code>)\nfiles which do not start with an underscore, then you can configure another Regex pattern in your\nsettings, for instance:</p>\n<pre><span class=\"n\">SASS_PROCESSOR_INCLUDE_FILE_PATTERN</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'^.+\\.scss$'</span>\n</pre>\n<p>will look for all files of type <code>scss</code>. Remember that SASS/SCSS files which start with an\nunderscore, are intended to be imported by other SASS/SCSS files, while files starting with a\nletter or number are intended to be included by the HTML tag\n<code>&lt;link href=\"{% sass_src 'path/to/file.scss' %}\" ...&gt;</code>.</p>\n<p>During development, or when <code>SASS_PROCESSOR_ENABLED = True</code>, the compiled file is placed into the\nfolder referenced by <code>SASS_PROCESSOR_ROOT</code> (if unset, this setting defaults to <code>STATIC_ROOT</code>).\nHaving a location outside of the working directory prevents to pollute your local <code>static/css/...</code>\ndirectories with auto-generated files. Therefore assure, that this directory is writable by the\nDjango runserver.</p>\n<h4>Fine tune SASS compiler parameters in <code>settings.py</code>.</h4>\n<p>Integer <code>SASS_PRECISION</code> sets floating point precision for output css. libsass'\ndefault is <code>5</code>. Note: <strong>bootstrap-sass</strong> requires <code>8</code>, otherwise various\nlayout problems <em>will</em> occur.</p>\n<pre><span class=\"n\">SASS_PRECISION</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n</pre>\n<p><code>SASS_OUTPUT_STYLE</code> sets coding style of the compiled result, one of <code>compact</code>,\n<code>compressed</code>, <code>expanded</code>, or <code>nested</code>. Default is <code>nested</code> for <code>DEBUG</code>\nand <code>compressed</code> in production.</p>\n<p>Note: <strong>libsass-python</strong> 0.8.3 has <a href=\"https://github.com/dahlia/libsass-python/pull/82\" rel=\"nofollow\">problem encoding result while saving on\nWindows</a>, the issue is already\nfixed and will be included in future <code>pip</code> package release, in the meanwhile\navoid <code>compressed</code> output style.</p>\n<pre><span class=\"n\">SASS_OUTPUT_STYLE</span> <span class=\"o\">=</span> <span class=\"s1\">'compact'</span>\n</pre>\n<h3>Jinja2 support</h3>\n<p><code>sass_processor.jinja2.ext.SassSrc</code> is a Jinja2 extension. Add it to your Jinja2 environment to enable the tag <code>sass_src</code>, there is no need for a <code>load</code> tag. Example of how to add your Jinja2 environment to Django:</p>\n<p>In <code>settings.py</code>:</p>\n<pre><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[{</span>\n    <span class=\"s1\">'BACKEND'</span><span class=\"p\">:</span> <span class=\"s1\">'django.template.backends.jinja2.Jinja2'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'DIRS'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n    <span class=\"s1\">'APP_DIRS'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"s1\">'OPTIONS'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'environment'</span><span class=\"p\">:</span> <span class=\"s1\">'yourapp.jinja2.environment'</span>\n    <span class=\"p\">},</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">}]</span>\n</pre>\n<p>Make sure to add the default template backend, if you're still using Django templates elsewhere.\nThis is covered in the <a href=\"https://docs.djangoproject.com/en/stable/ref/templates/upgrading/\" rel=\"nofollow\">Upgrading templates documentation</a>.</p>\n<p>In <code>yourapp/jinja2.py</code>:</p>\n<pre><span class=\"c1\"># Include this for Python 2.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">absolute_import</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">jinja2</span> <span class=\"kn\">import</span> <span class=\"n\">Environment</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">environment</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"k\">if</span> <span class=\"s1\">'extensions'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span> <span class=\"k\">else</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'extensions'</span><span class=\"p\">]</span>\n    <span class=\"n\">extensions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'sass_processor.jinja2.ext.SassSrc'</span><span class=\"p\">)</span>\n    <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'extensions'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">extensions</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Environment</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to make use of the <code>compilescss</code> command, then you will also have to add the following to your settings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yourapp.jinja2</span> <span class=\"kn\">import</span> <span class=\"n\">environment</span>\n\n<span class=\"n\">COMPRESS_JINJA2_GET_ENVIRONMENT</span> <span class=\"o\">=</span> <span class=\"n\">environment</span>\n</pre>\n<h2>Usage</h2>\n<h3>In your Django templates</h3>\n<pre><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">sass_tags</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n\n<span class=\"x\">&lt;link href=\"</span><span class=\"cp\">{%</span> <span class=\"k\">sass_src</span> <span class=\"s1\">'myapp/css/mystyle.scss'</span> <span class=\"cp\">%}</span><span class=\"x\">\" rel=\"stylesheet\" type=\"text/css\" /&gt;</span>\n</pre>\n<p>The above template code will be rendered as HTML</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/static/myapp/css/mystyle.css\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/css\"</span> <span class=\"p\">/&gt;</span>\n</pre>\n<p>You can safely use this templatetag inside a <a href=\"https://django-sekizai.readthedocs.io/\" rel=\"nofollow\">Sekizai</a>'s\n<code>{% addtoblock \"css\" %}</code> statement.</p>\n<h3>In Media classes or properties</h3>\n<p>In Python code, you can access the API of the SASS processor directly. This for instance is useful\nin Django's admin or form framework.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sass_processor.processor</span> <span class=\"kn\">import</span> <span class=\"n\">sass_processor</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeAdminOrFormClass</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Media</span><span class=\"p\">:</span>\n        <span class=\"n\">css</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'all'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">sass_processor</span><span class=\"p\">(</span><span class=\"s1\">'myapp/css/mystyle.scss'</span><span class=\"p\">)],</span>\n        <span class=\"p\">}</span>\n</pre>\n<h2>Add vendor prefixes to CSS rules using values from <a href=\"https://caniuse.com/\" rel=\"nofollow\">https://caniuse.com/</a></h2>\n<p>Writing SCSS shall be fast and easy and you should not have to care, whether to add vendor specific\nprefixes to your CSS directives. Unfortunately there is no pure Python package to solve this, but\nwith a few node modules, we can add this to our process chain.</p>\n<p>As superuser install</p>\n<pre>npm install -g npx\n</pre>\n<p>and inside your project root, install</p>\n<pre>npm install postcss-cli autoprefixer\n</pre>\n<p>Check that the path of <code>node_modules</code> corresponds to its entry in the settings directive\n<code>STATICFILES_DIRS</code> (see below).</p>\n<p>In case <code>npx</code> can not be found in your system path, use the settings directive\n<code>NODE_NPX_PATH = /path/to/npx</code> to point to that executable.</p>\n<p>If everything is setup correctly, <strong>django-sass-processor</strong> adds all required vendor prefixes to\nthe compiled CSS files. For further information, refer to the\n<a href=\"https://github.com/postcss/autoprefixer\" rel=\"nofollow\">Autoprefixer</a> package.</p>\n<p>To disable autoprefixing, set <code>NODE_NPX_PATH = None</code>.</p>\n<p><strong>Important note</strong>: If <code>npx</code> is installed, but <code>postcss</code> and/or <code>autoprefixer</code> are missing\nin the local <code>node_modules</code>, setting <code>NODE_NPX_PATH</code> to <code>None</code> is manadatory, otherwise\n<strong>django-sass-processor</strong> does not know how to postprocess the generated CSS files.</p>\n<h2>Offline compilation</h2>\n<p>If you want to precompile all occurrences of your SASS/SCSS files for the whole project, on the\ncommand line invoke:</p>\n<pre>./manage.py compilescss\n</pre>\n<p>This is useful for preparing production environments, where SASS/SCSS files can't be compiled on\nthe fly.</p>\n<p>To simplify the deployment, the compiled <code>*.css</code> files are stored side-by-side with their\ncorresponding SASS/SCSS files. After compiling the files run</p>\n<pre>./manage.py collectstatic\n</pre>\n<p>as you would in a normal deployment.</p>\n<p>In case you don't want to expose the SASS/SCSS files in a production environment,\ndeploy with:</p>\n<pre>./manage.py collectstatic --ignore<span class=\"o\">=</span>*.scss\n</pre>\n<p>To get rid of the compiled <code>*.css</code> files in your local static directories, simply reverse the\nabove command:</p>\n<pre>./manage.py compilescss --delete-files\n</pre>\n<p>This will remove all occurrences of previously generated <code>*.css</code> files.</p>\n<p>Or you may compile results to the <code>SASS_PROCESSOR_ROOT</code> directory directy (if not specified - to\n<code>STATIC_ROOT</code>):</p>\n<pre>./manage.py compilescss --use-processor-root\n</pre>\n<p>Combine with <code>--delete-files</code> switch to purge results from there.</p>\n<p>If you use an alternative templating engine set its name in <code>--engine</code> argument. Currently\n<code>django</code> and <code>jinja2</code> are supported, see\n<a href=\"http://django-compressor.readthedocs.org/en/latest/\" rel=\"nofollow\">django-compressor documentation</a> on how to\nset up <code>COMPRESS_JINJA2_GET_ENVIRONMENT</code> to configure jinja2 engine support.</p>\n<p>During offline compilation <strong>django-sass-processor</strong> parses all Python files and looks for\ninvocations of <code>sass_processor('path/to/sassfile.scss')</code>. Therefore the string specifying\nthe filename must be hard coded and shall not be concatenated or being somehow generated.</p>\n<h3>Alternative templates</h3>\n<p>By default, <strong>django-sass-processor</strong> will locate SASS/SCSS files from .html templates,\nbut you can extend or override this behavior in your settings with:</p>\n<pre><span class=\"n\">SASS_TEMPLATE_EXTS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'.html'</span><span class=\"p\">,</span><span class=\"s1\">'.jade'</span><span class=\"p\">]</span>\n</pre>\n<h2>Configure SASS variables through settings.py</h2>\n<p>In SASS, a nasty problem is to set the correct include paths for icons and fonts. Normally this is\ndone through a <code>_variables.scss</code> file, but this inhibits a configuration through your projects\n<code>settings.py</code>.</p>\n<p>To avoid the need for duplicate configuration settings, <strong>django-sass-processor</strong> offers a SASS\nfunction to fetch any arbitrary configuration directive from the project's <code>settings.py</code>. This\nis specially handy to set the include path of your Glyphicons font directory. Assume, Bootstrap-SASS\nhas been installed using:</p>\n<pre>npm install bootstrap-sass\n</pre>\n<p>then locate the directory named <code>node_modules</code> and add it to your settings, so that your fonts are\naccessible through the Django's <code>django.contrib.staticfiles.finders.FileSystemFinder</code>:</p>\n<pre><span class=\"n\">STATICFILES_DIRS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"p\">(</span><span class=\"s1\">'node_modules'</span><span class=\"p\">,</span> <span class=\"s1\">'/path/to/your/project/node_modules/'</span><span class=\"p\">),</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">NODE_MODULES_URL</span> <span class=\"o\">=</span> <span class=\"n\">STATIC_URL</span> <span class=\"o\">+</span> <span class=\"s1\">'node_modules/'</span>\n</pre>\n<p>With the SASS function <code>get-setting</code>, it is possible to override any SASS variable with a value\nconfigured in the project's <code>settings.py</code>. For the Glyphicons font search path, add this to your\n<code>_variables.scss</code>:</p>\n<pre><span class=\"nv\">$icon-font-path</span><span class=\"o\">:</span> <span class=\"nf\">unquote</span><span class=\"p\">(</span><span class=\"nf\">get-setting</span><span class=\"p\">(</span><span class=\"n\">NODE_MODULES_URL</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\"bootstrap-sass/assets/fonts/bootstrap/\"</span><span class=\"p\">);</span>\n</pre>\n<p>and <code>@import \"variables\";</code> whenever you need Glyphicons. You then can safely remove any font\nreferences, such as <code>&lt;link href=\"/path/to/your/fonts/bootstrap/glyphicons-whatever.ttf\" ...&gt;</code>\nfrom you HTML templates.</p>\n<h3>Configure SASS variables through Python functions</h3>\n<p>It is even possible to call Python functions from inside any module. Do this by adding\n<code>SASS_PROCESSOR_CUSTOM_FUNCTIONS</code> to the project's <code>settings.py</code>. This shall contain a mapping\nof SASS function names pointing to a Python function name.</p>\n<p>Example:</p>\n<pre><span class=\"n\">SASS_PROCESSOR_CUSTOM_FUNCTIONS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'get-color'</span><span class=\"p\">:</span> <span class=\"s1\">'myproject.utils.get_color'</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This allows to invoke Python functions out of any <code>*.scss</code> file.</p>\n<pre><span class=\"nv\">$color</span><span class=\"o\">:</span> <span class=\"nf\">get-color</span><span class=\"p\">(</span><span class=\"mi\">250</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"mi\">120</span><span class=\"p\">);</span>\n</pre>\n<p>Here we pass the parameters '250, 10, 120' into the function <code>def get_color(red, green, blue)</code>\nin Python module <code>myproject.utils</code>. Note that this function receives the values as <code>sass.Number</code>,\nhence extract values using <code>red.value</code>, etc.</p>\n<p>If one of these customoized functions returns a value, which is not a string, then convert it\neither to a Python string or to a value of type <code>sass.SassNumber</code>. For other types, refer to their\ndocumentation.</p>\n<p>Such customized functions must accept parameters explicilty, otherwise <code>sass_processor</code> does not\nknow how to map them. Variable argument lists therefore can not be used.</p>\n<h2>Serving static files with S3</h2>\n<p>A custom Storage class is provided for use if your deployment serves css files out of S3. You must have Boto 3 installed. To use it, add this to your settings file:</p>\n<pre><code>STATICFILES_STORAGE = 'sass_processor.storage.SassS3Boto3Storage'\n</code></pre>\n<h2>Heroku</h2>\n<p>If you are deploying to <a href=\"https://www.heroku.com/\" rel=\"nofollow\">Heroku</a>, use the <a href=\"https://elements.heroku.com/buildpacks/drpancake/heroku-buildpack-django-sass\" rel=\"nofollow\">heroku-buildpack-django-sass</a> buildpack to automatically compile scss for you.</p>\n<h2>Development</h2>\n<p>To run the tests locally, clone the repository, create a new virtualenv, activate it and then run\nthese commands:</p>\n<pre><span class=\"nb\">cd</span> django-sass-processor\npip install tox\ntox\n</pre>\n\n          </div>"}, "last_serial": 6382839, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "b4b63aba46641c7718b03d29a644e296", "sha256": "e3cc9d4396151ee2cbfd01797ac4c51352642409ccccc7a58ed2a6f93158affe"}, "downloads": -1, "filename": "django-sass-processor-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b4b63aba46641c7718b03d29a644e296", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13333, "upload_time": "2015-02-16T00:04:17", "upload_time_iso_8601": "2015-02-16T00:04:17.485648Z", "url": "https://files.pythonhosted.org/packages/eb/6a/378fef2f6329da698eec3b39495cb571e528fb037a80c60431aaa79d9779/django-sass-processor-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "b7cc7ba402fd0e9825555c931bbe0529", "sha256": "91a5c4cdf1f5e304613306d2b52f44b5417b50f3aa6994a12139722831dd00e4"}, "downloads": -1, "filename": "django-sass-processor-0.2.3.tar.gz", "has_sig": false, "md5_digest": "b7cc7ba402fd0e9825555c931bbe0529", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13652, "upload_time": "2015-06-05T20:13:29", "upload_time_iso_8601": "2015-06-05T20:13:29.298794Z", "url": "https://files.pythonhosted.org/packages/d4/38/e3dd1fbc90f6336f3cb40258a8e18c99eb748b119a7314adc000016deedf/django-sass-processor-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "867a639925c1b0ccc8a419691f46d499", "sha256": "51ab03d0b61ecc8cde2583f80dabc3c669c6b2fe010bdbf7c333dfd8ba4e25d2"}, "downloads": -1, "filename": "django-sass-processor-0.2.4.tar.gz", "has_sig": false, "md5_digest": "867a639925c1b0ccc8a419691f46d499", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14000, "upload_time": "2015-06-16T09:50:28", "upload_time_iso_8601": "2015-06-16T09:50:28.259018Z", "url": "https://files.pythonhosted.org/packages/07/7e/cc797f7fc2ade1531e14c3c21d17103a02b0197eb2c6a6e21476ca1b6bc1/django-sass-processor-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "5a2ee3a317fc7ca6e4309f8c6756797d", "sha256": "590c86f57ef45148d46e4cb901f475f71752df76bf58036a7bbd291374418b76"}, "downloads": -1, "filename": "django-sass-processor-0.2.5.tar.gz", "has_sig": false, "md5_digest": "5a2ee3a317fc7ca6e4309f8c6756797d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12502, "upload_time": "2015-10-13T08:35:56", "upload_time_iso_8601": "2015-10-13T08:35:56.674390Z", "url": "https://files.pythonhosted.org/packages/ee/b8/71c05e37d8e405163e37598866ae2ac50c878dc6c7421e8469c8c70e8a8e/django-sass-processor-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "dd440ca2572fcb3c11ee3365894b6cc6", "sha256": "f704b384f3bc3fa0d89a618e89bfd61dea5b79c92b322f26d94a39ee0e7f879d"}, "downloads": -1, "filename": "django-sass-processor-0.2.6.tar.gz", "has_sig": false, "md5_digest": "dd440ca2572fcb3c11ee3365894b6cc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15364, "upload_time": "2015-10-17T16:27:54", "upload_time_iso_8601": "2015-10-17T16:27:54.588138Z", "url": "https://files.pythonhosted.org/packages/ae/6a/3c1d4f6aaf0d8d03f3a63330bad6e4e3d0d1d1e2e46da76c7156f0079d81/django-sass-processor-0.2.6.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "43532852cdb380d7c3c87f006d12a1b8", "sha256": "6a807485f7693c943fc5a56ea8bdc0b5432e60700a31e4b760d767cfbc3a7979"}, "downloads": -1, "filename": "django-sass-processor-0.3.0.tar.gz", "has_sig": false, "md5_digest": "43532852cdb380d7c3c87f006d12a1b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14964, "upload_time": "2015-11-06T07:50:43", "upload_time_iso_8601": "2015-11-06T07:50:43.186100Z", "url": "https://files.pythonhosted.org/packages/48/66/3eea59c760ba9c44e70f24e2fba6351faa5858b1f7c96a3db7b7fec7f956/django-sass-processor-0.3.0.tar.gz", "yanked": false}], "0.3.1": [], "0.3.2": [{"comment_text": "", "digests": {"md5": "bbd8f2b5c936bb32b93b6dc8f8353748", "sha256": "4c3a52e2a2363a8c2343138c60ab74c2be84fbfce32852bebbc1beba2ecc101d"}, "downloads": -1, "filename": "django-sass-processor-0.3.2.tar.gz", "has_sig": false, "md5_digest": "bbd8f2b5c936bb32b93b6dc8f8353748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15121, "upload_time": "2015-12-18T09:03:59", "upload_time_iso_8601": "2015-12-18T09:03:59.872462Z", "url": "https://files.pythonhosted.org/packages/05/98/ba2b5d60a41e85363d0590bedee1158b054498ff222059f3013b3ddb8364/django-sass-processor-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "f6d9c240c69d00c924e2bb6b2501d403", "sha256": "dd56d41826fca17f80c174592dd8da56151c67965bc2de5f06aa35a982df8b61"}, "downloads": -1, "filename": "django-sass-processor-0.3.3.tar.gz", "has_sig": false, "md5_digest": "f6d9c240c69d00c924e2bb6b2501d403", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18166, "upload_time": "2015-12-25T18:17:24", "upload_time_iso_8601": "2015-12-25T18:17:24.602083Z", "url": "https://files.pythonhosted.org/packages/ed/80/b945b1e02e69bdae08039518c4ba42be693b8ceb9515baf35d8ce4dc0d8e/django-sass-processor-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "b89a549ec1351bce8195b3cc60135e32", "sha256": "5554f38d6c4606b924728973248dd5080ab624c0278f5cb63071b18243f40946"}, "downloads": -1, "filename": "django-sass-processor-0.3.4.tar.gz", "has_sig": false, "md5_digest": "b89a549ec1351bce8195b3cc60135e32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19037, "upload_time": "2016-02-23T13:58:33", "upload_time_iso_8601": "2016-02-23T13:58:33.279880Z", "url": "https://files.pythonhosted.org/packages/39/99/7f467dbc2882e25c42aac881a1ac5009517b4c8fafbd1c89178ddcfd3e46/django-sass-processor-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "8d22b5ea357f2c0c9c75a53afa052657", "sha256": "93aadd7cf04198a8f8a906f29fc3def12a19f0ceb9a062b5bc5a32debf52997f"}, "downloads": -1, "filename": "django-sass-processor-0.3.5.tar.gz", "has_sig": false, "md5_digest": "8d22b5ea357f2c0c9c75a53afa052657", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13158, "upload_time": "2016-05-03T14:35:44", "upload_time_iso_8601": "2016-05-03T14:35:44.515259Z", "url": "https://files.pythonhosted.org/packages/95/23/3318c9295571500c7ba273225ac048f740ab740be400cd7a3e672677b23d/django-sass-processor-0.3.5.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "51762d908593a79931efb9132280df36", "sha256": "ed86ba9ebd7bc87ca45c1a9e8e9c23ac03b6e25c3575989d4bb18ad9483cb408"}, "downloads": -1, "filename": "django-sass-processor-0.4.0.tar.gz", "has_sig": false, "md5_digest": "51762d908593a79931efb9132280df36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17016, "upload_time": "2016-07-07T11:53:51", "upload_time_iso_8601": "2016-07-07T11:53:51.227813Z", "url": "https://files.pythonhosted.org/packages/0e/97/09a22c98f9ccad7051e207a975a41a4459dcaf756892b7a92b2901b6f079/django-sass-processor-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "570c1da76706490af242fd30d4d7f00d", "sha256": "da0334df772291e1e17d0afd11cb82ec050a472051a05831d078459129e9646b"}, "downloads": -1, "filename": "django-sass-processor-0.4.1.tar.gz", "has_sig": false, "md5_digest": "570c1da76706490af242fd30d4d7f00d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16406, "upload_time": "2016-07-19T05:40:24", "upload_time_iso_8601": "2016-07-19T05:40:24.604362Z", "url": "https://files.pythonhosted.org/packages/42/8e/a930dcc5c1e11dedcb284cb073b5668702e4c7fa6960657f3e63089c6d32/django-sass-processor-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "b820e78d15db06f81cf1fe9c8e94ffe0", "sha256": "4287ad22efdb8c690aa976203b30338198c28178a4b9a888fc151e76223d62e4"}, "downloads": -1, "filename": "django-sass-processor-0.4.2.tar.gz", "has_sig": false, "md5_digest": "b820e78d15db06f81cf1fe9c8e94ffe0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21251, "upload_time": "2016-07-20T07:28:25", "upload_time_iso_8601": "2016-07-20T07:28:25.438363Z", "url": "https://files.pythonhosted.org/packages/0b/7d/0cdaa03c620294470aae2108b229768e59821379e86f1c70cb1b0feef91f/django-sass-processor-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "4ef85d1c8ffbc5c54cc3af9cb2e76084", "sha256": "88972d2970e20b2b8b32f3813805668187bbd01423cbc0571ef5555bc2f2d51d"}, "downloads": -1, "filename": "django-sass-processor-0.4.3.tar.gz", "has_sig": false, "md5_digest": "4ef85d1c8ffbc5c54cc3af9cb2e76084", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21205, "upload_time": "2016-07-21T08:22:00", "upload_time_iso_8601": "2016-07-21T08:22:00.097819Z", "url": "https://files.pythonhosted.org/packages/d6/78/6872b216085e6a9127a1fa09f9075602a9d430035d8901a01e428f70dad5/django-sass-processor-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "ec5ce9c4f01e48a384f806ce4b706351", "sha256": "44e1d112cdcc52435e221d14442ae75cae85639e3a95f9bc13f4340b7687732f"}, "downloads": -1, "filename": "django-sass-processor-0.4.4.tar.gz", "has_sig": false, "md5_digest": "ec5ce9c4f01e48a384f806ce4b706351", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21186, "upload_time": "2016-07-21T08:39:11", "upload_time_iso_8601": "2016-07-21T08:39:11.453010Z", "url": "https://files.pythonhosted.org/packages/02/61/d7a463abf9f89edcbaa012dad0a37b46c9726db671f3b16e4c61ee45e03a/django-sass-processor-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "cff97a1bb4684fbc84d383b77c8673e0", "sha256": "4e99b7a035123d7f15732b7879e981ea832d90c4cd8daa2dac742e94d1da9995"}, "downloads": -1, "filename": "django-sass-processor-0.4.5.tar.gz", "has_sig": false, "md5_digest": "cff97a1bb4684fbc84d383b77c8673e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16421, "upload_time": "2016-07-24T06:48:22", "upload_time_iso_8601": "2016-07-24T06:48:22.929245Z", "url": "https://files.pythonhosted.org/packages/e9/a9/5176c21c64f82b519929e4cc40445f2576691e6e7f6e371bca89c0650b72/django-sass-processor-0.4.5.tar.gz", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "21027ece94c650a6e35a9e24283b8c3d", "sha256": "7e0dbac07475ad760cee6d3c392b8a7ab8dd20d3eac4fb0780c73826c8a93de8"}, "downloads": -1, "filename": "django-sass-processor-0.4.6.tar.gz", "has_sig": false, "md5_digest": "21027ece94c650a6e35a9e24283b8c3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21678, "upload_time": "2016-07-25T06:47:04", "upload_time_iso_8601": "2016-07-25T06:47:04.787909Z", "url": "https://files.pythonhosted.org/packages/b3/69/d71969ae67497866fa9573cbb07d5d070b37c31044559776d0521dda4339/django-sass-processor-0.4.6.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "5b2ff1c41206b9f13ceb22a71878cf33", "sha256": "628673a5b81cb4b743c75935934b4263a5178ce89769707cc5030a44b5f62180"}, "downloads": -1, "filename": "django-sass-processor-0.5.0.tar.gz", "has_sig": false, "md5_digest": "5b2ff1c41206b9f13ceb22a71878cf33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20751, "upload_time": "2016-09-29T15:33:51", "upload_time_iso_8601": "2016-09-29T15:33:51.066385Z", "url": "https://files.pythonhosted.org/packages/1c/27/5c2534578589f8a7994c7be3b3e581ffa3f0b708bb678e212698cee49d6b/django-sass-processor-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "c4a17faa7eea73c8b7241a7b3949bb53", "sha256": "61295e92966d32cd8f5bd3686e0d0ddd6e07c6d2dd0a0ab90793d762eff77aad"}, "downloads": -1, "filename": "django-sass-processor-0.5.1.tar.gz", "has_sig": false, "md5_digest": "c4a17faa7eea73c8b7241a7b3949bb53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25056, "upload_time": "2016-09-29T16:04:32", "upload_time_iso_8601": "2016-09-29T16:04:32.388125Z", "url": "https://files.pythonhosted.org/packages/e7/a9/06fd6dd3ed5a43951f942f6167f5f266c66403a833d95c4f48c19b1c46e4/django-sass-processor-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "227644f4ffa642f58c67b328b2d511a0", "sha256": "b687347d3a8cb40b74f0129a88008c8a2ef32f7189e71ccf30defe7517e2b5f3"}, "downloads": -1, "filename": "django-sass-processor-0.5.2.tar.gz", "has_sig": false, "md5_digest": "227644f4ffa642f58c67b328b2d511a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25066, "upload_time": "2016-11-15T20:15:32", "upload_time_iso_8601": "2016-11-15T20:15:32.401860Z", "url": "https://files.pythonhosted.org/packages/ad/a7/59748d35c9063c32d9d65aecaba01c40dd76bd5267b1f162235d1e4b243d/django-sass-processor-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "0818f5d11ea13afea4bba4d02e5fbd05", "sha256": "133018f02e99ace98a6f66d524e38b92a5f1ae395eea711076297a929163a7a0"}, "downloads": -1, "filename": "django-sass-processor-0.5.3.tar.gz", "has_sig": false, "md5_digest": "0818f5d11ea13afea4bba4d02e5fbd05", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25141, "upload_time": "2016-12-11T02:40:01", "upload_time_iso_8601": "2016-12-11T02:40:01.148730Z", "url": "https://files.pythonhosted.org/packages/bc/b4/d2813cad51e6221db2cfff03e55c3db3d531bb1c1da2fe25044a4d6459d4/django-sass-processor-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "0cb296d8b27a46a0113a09b568dd0d2f", "sha256": "e427831fdae0665cc5dc5d4f810cd3941f7d57d6d782274b307c914c62920d16"}, "downloads": -1, "filename": "django-sass-processor-0.5.4.tar.gz", "has_sig": false, "md5_digest": "0cb296d8b27a46a0113a09b568dd0d2f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25164, "upload_time": "2017-02-23T13:12:02", "upload_time_iso_8601": "2017-02-23T13:12:02.216520Z", "url": "https://files.pythonhosted.org/packages/44/5e/ef4cae1e8600f0517da129a6616dae3cb5a24c5ba4050382c219b2798be3/django-sass-processor-0.5.4.tar.gz", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "ff09f3a7c63f31f6c9b89ccabe571086", "sha256": "09a8d9db466c7011a7ca6a61af527c96e13c701eab13e36a4499e29965daa0ad"}, "downloads": -1, "filename": "django-sass-processor-0.5.5.tar.gz", "has_sig": false, "md5_digest": "ff09f3a7c63f31f6c9b89ccabe571086", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18446, "upload_time": "2017-09-12T09:50:37", "upload_time_iso_8601": "2017-09-12T09:50:37.799297Z", "url": "https://files.pythonhosted.org/packages/77/ca/757257e0e29f8ec9b7cabbfe4e43cbae39994f06927216ea03107ee0ba4a/django-sass-processor-0.5.5.tar.gz", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "465b839956b75ca32506c861f3b5ddda", "sha256": "df76af0cf3be6205ecbadf230c92d268cfb604b7ad64457d86c16edc1648b05d"}, "downloads": -1, "filename": "django-sass-processor-0.5.6.tar.gz", "has_sig": false, "md5_digest": "465b839956b75ca32506c861f3b5ddda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23517, "upload_time": "2017-11-21T17:48:44", "upload_time_iso_8601": "2017-11-21T17:48:44.713166Z", "url": "https://files.pythonhosted.org/packages/22/d1/129c7c8b2a532fa651c761214b66cc31d0739a2fc9c271255159c491ab3f/django-sass-processor-0.5.6.tar.gz", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "618430747cc6633e07e81124d43e14d5", "sha256": "f56ad318625a0c4fc3931eab3b53c07d079a84a169b6aad7e804a5703db1ecb6"}, "downloads": -1, "filename": "django-sass-processor-0.5.7.tar.gz", "has_sig": false, "md5_digest": "618430747cc6633e07e81124d43e14d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29404, "upload_time": "2017-12-18T21:38:13", "upload_time_iso_8601": "2017-12-18T21:38:13.144061Z", "url": "https://files.pythonhosted.org/packages/80/f1/9b905a203b576f0083cec9cb45c3bef8f5f4215341dd8b295b8c07318399/django-sass-processor-0.5.7.tar.gz", "yanked": false}], "0.5.8": [{"comment_text": "", "digests": {"md5": "36144c46e8f7a2f353a1d32bceb39244", "sha256": "7cd40dc107c9fc027a3bb4432e2382e2038d90627f11fa2b4da65d995f595309"}, "downloads": -1, "filename": "django-sass-processor-0.5.8.tar.gz", "has_sig": false, "md5_digest": "36144c46e8f7a2f353a1d32bceb39244", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19068, "upload_time": "2018-02-05T09:09:22", "upload_time_iso_8601": "2018-02-05T09:09:22.777679Z", "url": "https://files.pythonhosted.org/packages/07/24/73f4ab6be29699b3085bd1591fbce76c409291bf7ed5949f1f5688a02fdd/django-sass-processor-0.5.8.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "c36a3f9e594496f039dadc9c2c61ceec", "sha256": "84ce7f076778b4222093173d1182a66fa6340bdff6170b0fd06b9610fee07dd0"}, "downloads": -1, "filename": "django-sass-processor-0.6.tar.gz", "has_sig": false, "md5_digest": "c36a3f9e594496f039dadc9c2c61ceec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20288, "upload_time": "2018-03-16T17:01:43", "upload_time_iso_8601": "2018-03-16T17:01:43.073093Z", "url": "https://files.pythonhosted.org/packages/3d/58/ff1cc2daeaea226fc66b2574b71d2d16eaab0f17dbaf4b3b9aea37d14cd2/django-sass-processor-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "506eab389076fa834584127cc8b0ef98", "sha256": "6b0d017d969b5efefd69561a196a90eb3dc3b203ad30ab722ada6067006c7682"}, "downloads": -1, "filename": "django-sass-processor-0.7.tar.gz", "has_sig": false, "md5_digest": "506eab389076fa834584127cc8b0ef98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25759, "upload_time": "2018-05-06T23:15:30", "upload_time_iso_8601": "2018-05-06T23:15:30.256284Z", "url": "https://files.pythonhosted.org/packages/6f/63/9275c27a924f3507f4cc9d89e0cc2a44bc209be6a904da8f1a96ef305692/django-sass-processor-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "17408d9c3b62e4b41bd779fb0db86492", "sha256": "06eb0576b2a1fe4b49e0d33289e12f258d91809a8b1df3a524fd85d0de8c19de"}, "downloads": -1, "filename": "django-sass-processor-0.7.1.tar.gz", "has_sig": false, "md5_digest": "17408d9c3b62e4b41bd779fb0db86492", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18299, "upload_time": "2018-09-17T10:56:25", "upload_time_iso_8601": "2018-09-17T10:56:25.512654Z", "url": "https://files.pythonhosted.org/packages/2d/da/740709f182a3ad8a9ad33fc44a81b80166052ffa5299b0449d9a8b7c39ff/django-sass-processor-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "573d64fe2649e5a25b286ccbac5eae17", "sha256": "0381585a23c0f31a387cb53cf38f744e4d97d8ac3b9b19ec423dd6bfa714ecff"}, "downloads": -1, "filename": "django-sass-processor-0.7.2.tar.gz", "has_sig": false, "md5_digest": "573d64fe2649e5a25b286ccbac5eae17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18456, "upload_time": "2018-11-05T07:18:29", "upload_time_iso_8601": "2018-11-05T07:18:29.034605Z", "url": "https://files.pythonhosted.org/packages/93/2d/0f50d7414d59131e5365a869c1092996ad3c6b112b6409f5c80576cae101/django-sass-processor-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "29b3825c90e83ff5dec2d065cb4cb38b", "sha256": "5ba3568e53caf1d59573afa75d71e42c23bddbd5b48cbea831816cd72ed242f9"}, "downloads": -1, "filename": "django-sass-processor-0.7.3.tar.gz", "has_sig": false, "md5_digest": "29b3825c90e83ff5dec2d065cb4cb38b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18693, "upload_time": "2019-03-27T14:36:26", "upload_time_iso_8601": "2019-03-27T14:36:26.270800Z", "url": "https://files.pythonhosted.org/packages/b7/ec/ba3dbb86590b6a9e140008da5aa1bfcbb0401ef49bf41ca02dff9c36a272/django-sass-processor-0.7.3.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "40582ddf138445cff78f8674b27c3b69", "sha256": "c1b56e76ce2b57382d26328ecdc204d3f65412d5da35df8a6b7bce6e7f754882"}, "downloads": -1, "filename": "django-sass-processor-0.7.4.tar.gz", "has_sig": false, "md5_digest": "40582ddf138445cff78f8674b27c3b69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17445, "upload_time": "2019-10-22T16:23:15", "upload_time_iso_8601": "2019-10-22T16:23:15.782413Z", "url": "https://files.pythonhosted.org/packages/6d/38/4d607938386244bc755dafa37e5dac6a222f6c3f1985d77b80c3e3712321/django-sass-processor-0.7.4.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "2a79e6be5986e55c84262a06b64dc4fd", "sha256": "9267e5fcc7fcde2ec0c7d6ad045b4c6c7e9aea92498ed1725312035a5469b410"}, "downloads": -1, "filename": "django-sass-processor-0.7.5.tar.gz", "has_sig": false, "md5_digest": "2a79e6be5986e55c84262a06b64dc4fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19134, "upload_time": "2019-12-02T22:21:45", "upload_time_iso_8601": "2019-12-02T22:21:45.806838Z", "url": "https://files.pythonhosted.org/packages/3c/ae/89f4c90c9ce3d746f6e4132c6819c7be38d806263ef6614d27ef3097810b/django-sass-processor-0.7.5.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "5a67a1245b2d18d0eb070fe136c39640", "sha256": "e039551994feaaba6fcf880412b25a772dd313162a34cbb4289814988cfae340"}, "downloads": -1, "filename": "django-sass-processor-0.8.tar.gz", "has_sig": false, "md5_digest": "5a67a1245b2d18d0eb070fe136c39640", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17576, "upload_time": "2020-01-01T17:06:46", "upload_time_iso_8601": "2020-01-01T17:06:46.471132Z", "url": "https://files.pythonhosted.org/packages/25/9e/978ac1859b7d1122b1db89a0fe41e009cbdd16bca5bd2883cc555718a286/django-sass-processor-0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5a67a1245b2d18d0eb070fe136c39640", "sha256": "e039551994feaaba6fcf880412b25a772dd313162a34cbb4289814988cfae340"}, "downloads": -1, "filename": "django-sass-processor-0.8.tar.gz", "has_sig": false, "md5_digest": "5a67a1245b2d18d0eb070fe136c39640", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17576, "upload_time": "2020-01-01T17:06:46", "upload_time_iso_8601": "2020-01-01T17:06:46.471132Z", "url": "https://files.pythonhosted.org/packages/25/9e/978ac1859b7d1122b1db89a0fe41e009cbdd16bca5bd2883cc555718a286/django-sass-processor-0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:45 2020"}