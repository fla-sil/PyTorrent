{"info": {"author": "Nguyen Anh Quynh", "author_email": "aquynh@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "0. This documentation explains how to install Python binding for Capstone\n   from source. If you want to install it from PyPi package, see the below\n   docs instead:\n\n   - README.pypi-src: How to compile the Capstone core & install binding\n     at the same time from PyPi package \"capstone\"\n\n   - README.pypi-win: How to install binding for Windows from PyPi package\n     \"capstone-windows\". Note that this package already has prebuilt core\n     inside, so no compilation is needed.\n\n1. To install pure Python binding on *nix, run the command below:\n\n\t\t$ sudo make install\n\n   To install Python3 binding package, run the command below:\n   (Note: this requires python3 installed in your machine)\n\n\t\t$ sudo make install3\n\n2. For better Python performance, install cython-based binding with:\n\n\t\t$ sudo make install_cython\n\n\tNote that this requires cython installed in your machine first.\n\tTo install cython, see section 3 below.\n\t\n3. To install cython, you have to ensure that the header files\n   and the static library for Python are installed beforehand.\n\n\tE.g. on Ubuntu, do:\n\n\t\t$ sudo apt-get install python-dev\n\n\tDepending on if you already have pip or easy_install\n\tinstalled, install cython with either:\n\n\t\t$ sudo pip install cython\n\tor:\n\t\t$ sudo easy_install cython\n\n\tNOTE: Depending on your distribution you might also be able to\n\t      install the required cython version using your repository.\n\n\tE.g. on Ubuntu, do:\n\t\n\t\t$ sudo apt-get install cython\n\n\tHowever, our cython-based binding requires cython version 0.19 or newer,\n\tbut sometimes distributions only provide older version. Make sure to\n\tverify the current installed version before going into section 2 above.\n\t\n\tE.g, on Ubuntu, you can verify the current cython version with:\n\n\t\t$ apt-cache policy cython\n\n\tWhich should at least print version 0.19\n\n\nThis directory contains some test code to show how to use Capstone API.\n\n- test.py\n  This code shows the most simple form of API where we only want to get basic\n  information out of disassembled instruction, such as address, mnemonic and\n  operand string.\n\n- test_lite.py\n  Similarly to test.py, but this code shows how to use disasm_lite(), a lighter\n  method to disassemble binary. Unlike disasm() API (used by test.py), which returns\n  CsInsn objects, this API just returns tuples of (address, size, mnemonic, op_str).\n\n  The main reason for using this API is better performance: disasm_lite() is at least\n  20% faster than disasm(). Memory usage is also less. So if you just need basic\n  information out of disassembler, use disasm_lite() instead of disasm().\n\n- test_detail.py:\n  This code shows how to access to architecture-neutral information in disassembled\n  instructions, such as implicit registers read/written, or groups of instructions\n  that this instruction belong to.\n\n- test_<arch>.py\n  These code show how to access architecture-specific information for each\n  architecture.\n\n\n2. To install Python binding on Windows:\n\nRecommended method:\n\n\tUse the Python module installer for 32/64 bit Windows from:\n\n\t\thttp://www.capstone-engine.org/download.html\n\n\nManual method:\n\n\tIf the module installer fails to locate your Python install, or if you have\n\tadditional Python installs (e.g. Anaconda / virtualenv), run the following\n\tcommand in command prompt:\n\n\t\tC:\\> C:\\location_to_python\\python.exe setup.py install\n\n\tNext, copy capstone.dll from the 'Core engine for Windows' package available\n\ton the same Capstone download page and paste it in the path:\n\n\t\tC:\\location_to_python\\Lib\\site-packages\\capstone\\\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.capstone-engine.org", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "tacocapstone", "package_url": "https://pypi.org/project/tacocapstone/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tacocapstone/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.capstone-engine.org"}, "release_url": "https://pypi.org/project/tacocapstone/3.0.7/", "requires_dist": null, "requires_python": null, "summary": "Capstone disassembly engine", "version": "3.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            0. This documentation explains how to install Python binding for Capstone<br>   from source. If you want to install it from PyPi package, see the below<br>   docs instead:<br><br>   - README.pypi-src: How to compile the Capstone core &amp; install binding<br>     at the same time from PyPi package \"capstone\"<br><br>   - README.pypi-win: How to install binding for Windows from PyPi package<br>     \"capstone-windows\". Note that this package already has prebuilt core<br>     inside, so no compilation is needed.<br><br>1. To install pure Python binding on *nix, run the command below:<br><br>\t\t$ sudo make install<br><br>   To install Python3 binding package, run the command below:<br>   (Note: this requires python3 installed in your machine)<br><br>\t\t$ sudo make install3<br><br>2. For better Python performance, install cython-based binding with:<br><br>\t\t$ sudo make install_cython<br><br>\tNote that this requires cython installed in your machine first.<br>\tTo install cython, see section 3 below.<br>\t<br>3. To install cython, you have to ensure that the header files<br>   and the static library for Python are installed beforehand.<br><br>\tE.g. on Ubuntu, do:<br><br>\t\t$ sudo apt-get install python-dev<br><br>\tDepending on if you already have pip or easy_install<br>\tinstalled, install cython with either:<br><br>\t\t$ sudo pip install cython<br>\tor:<br>\t\t$ sudo easy_install cython<br><br>\tNOTE: Depending on your distribution you might also be able to<br>\t      install the required cython version using your repository.<br><br>\tE.g. on Ubuntu, do:<br>\t<br>\t\t$ sudo apt-get install cython<br><br>\tHowever, our cython-based binding requires cython version 0.19 or newer,<br>\tbut sometimes distributions only provide older version. Make sure to<br>\tverify the current installed version before going into section 2 above.<br>\t<br>\tE.g, on Ubuntu, you can verify the current cython version with:<br><br>\t\t$ apt-cache policy cython<br><br>\tWhich should at least print version 0.19<br><br><br>This directory contains some test code to show how to use Capstone API.<br><br>- test.py<br>  This code shows the most simple form of API where we only want to get basic<br>  information out of disassembled instruction, such as address, mnemonic and<br>  operand string.<br><br>- test_lite.py<br>  Similarly to test.py, but this code shows how to use disasm_lite(), a lighter<br>  method to disassemble binary. Unlike disasm() API (used by test.py), which returns<br>  CsInsn objects, this API just returns tuples of (address, size, mnemonic, op_str).<br><br>  The main reason for using this API is better performance: disasm_lite() is at least<br>  20% faster than disasm(). Memory usage is also less. So if you just need basic<br>  information out of disassembler, use disasm_lite() instead of disasm().<br><br>- test_detail.py:<br>  This code shows how to access to architecture-neutral information in disassembled<br>  instructions, such as implicit registers read/written, or groups of instructions<br>  that this instruction belong to.<br><br>- test_&lt;arch&gt;.py<br>  These code show how to access architecture-specific information for each<br>  architecture.<br><br><br>2. To install Python binding on Windows:<br><br>Recommended method:<br><br>\tUse the Python module installer for 32/64 bit Windows from:<br><br>\t\thttp://www.capstone-engine.org/download.html<br><br><br>Manual method:<br><br>\tIf the module installer fails to locate your Python install, or if you have<br>\tadditional Python installs (e.g. Anaconda / virtualenv), run the following<br>\tcommand in command prompt:<br><br>\t\tC:\\&gt; C:\\location_to_python\\python.exe setup.py install<br><br>\tNext, copy capstone.dll from the 'Core engine for Windows' package available<br>\ton the same Capstone download page and paste it in the path:<br><br>\t\tC:\\location_to_python\\Lib\\site-packages\\capstone\\<br>\n          </div>"}, "last_serial": 1467251, "releases": {"3.0.2": [], "3.0.3": [], "3.0.7": [{"comment_text": "", "digests": {"md5": "bfefbbc2a7452d09818ec0f7796878f6", "sha256": "e3fc6373b1df68888b54b459c7d5ae593ca21032a752c8b8d7584f70561cec66"}, "downloads": -1, "filename": "tacocapstone-3.0.7.tar.gz", "has_sig": false, "md5_digest": "bfefbbc2a7452d09818ec0f7796878f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1595628, "upload_time": "2015-03-18T17:01:20", "upload_time_iso_8601": "2015-03-18T17:01:20.847918Z", "url": "https://files.pythonhosted.org/packages/dd/c2/4295880f9617c15eb4d39c38931882db80ecc8942479822113591655f94d/tacocapstone-3.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bfefbbc2a7452d09818ec0f7796878f6", "sha256": "e3fc6373b1df68888b54b459c7d5ae593ca21032a752c8b8d7584f70561cec66"}, "downloads": -1, "filename": "tacocapstone-3.0.7.tar.gz", "has_sig": false, "md5_digest": "bfefbbc2a7452d09818ec0f7796878f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1595628, "upload_time": "2015-03-18T17:01:20", "upload_time_iso_8601": "2015-03-18T17:01:20.847918Z", "url": "https://files.pythonhosted.org/packages/dd/c2/4295880f9617c15eb4d39c38931882db80ecc8942479822113591655f94d/tacocapstone-3.0.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:31 2020"}