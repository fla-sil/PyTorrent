{"info": {"author": "Keiron J. Pizzey", "author_email": "kjpizzey@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering"], "description": "Gwydion\r\n=======\r\n\r\nGwydion allows users to generate pseudo-random scientific data easily.\r\n\r\nIn the spirit of `Faker`_, Gwydion allows you to generate pseudo-random\r\ndata using a simple, clean, and customisable API.\r\n\r\nGwydion is named after a `trickster from Welsh mythology`_.\r\n\r\nInstallation\r\n============\r\n\r\nYou can install from `PyPI`_ with\r\n\r\n::\r\n\r\n    pip install gwydion\r\n\r\n.. _Faker: https://github.com/joke2k/faker\r\n.. _trickster from Welsh mythology: http://en.wikipedia.org/wiki/Gwydion\r\n.. _PyPI: https://pypi.python.org/pypi\r\n\r\nExamples\r\n========\r\n\r\nSome basic examples of Gwydion objects are given below.\r\n\r\nIn the first example, we create a simple ``Linear`` object, given by the mathematical relationship ``y = mx + c``.\r\nWhen parameters are not set by the user, Gwydion objects will default to suitable random values. Objects will also, by default, add some random noise to the y-data.\r\nIn the example below we allow the ``Linear`` object to generate all of the parameters, but set the number of data points ``N`` manually.\r\n\r\n::\r\n\r\n    from gwydion import Linear\r\n\r\n    lin = Linear(N=6)\r\n\r\n    x, y = lin.data\r\n    print(x, y, sep='\\n')\r\n    # [  0.   2.   4.   6.   8.  10.]\r\n    # [ -0.17387604   5.59216341  11.77162695  17.70041889  23.55609025  28.67617757]\r\n\r\n\r\nIn this second example, an ``Exponential`` function is created with various manually selected parameters.\r\nExponential functions are given by ``y = I * base**(k*x)``.\r\nIn the example below we have set:\r\n\r\n- The number of data points ``N = 3``,\r\n- The intensity ``I = 10``,\r\n- The exponent multiplier ``k = -1``,\r\n- The x-limits ``xlim = (0, 10)``,\r\n- And chosen to not add any random noise to the data ``add_rand = False``.\r\n\r\nFor the ``Exponential`` object the default ``base`` is not random, but is instead to Euler's number ``e = 2.71828...``.\r\nThis fact, combined with ``k = -1``, means that our object below is effectively giving us exponential decay.\r\n\r\n::\r\n\r\n    from gwydion import Exponential\r\n\r\n    exp = Exponential(N=3, I=10, k=-1, xlim=(0,10), add_rand=False)\r\n\r\n    x, y = exp.data\r\n    print(x, y, sep='\\n')\r\n    # [  0.   5.  10.]\r\n    # [  1.00000000e+01   6.73794700e-02   4.53999298e-04]\r\n\r\n\r\nFinally, let's look at how ``Gwydion`` objects work with ``matplotlib``. In the example below, we generate\r\n5 ``Sine`` objects using a list comprehension. We can then use the ``plot`` function to plot each data set easily.\r\n\r\n\r\n::\r\n\r\n    from gwydion import Sine\r\n    import matplotlib.pyplot as plt\r\n\r\n    sines = [Sine(xlim=(0,5)) for _ in range(5)]\r\n\r\n    fig, ax = plt.subplots()\r\n\r\n    for sine in sines:\r\n        sine.plot(ax=ax)\r\n\r\n    ax.set_xlabel('Time')\r\n    ax.set_ylabel('Intensity')\r\n\r\n    plt.show()\r\n\r\n\r\n.. image:: http://i.imgur.com/oG6zDBC.png", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ffisegydd/Gwydion", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Gwydion", "package_url": "https://pypi.org/project/Gwydion/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Gwydion/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Ffisegydd/Gwydion"}, "release_url": "https://pypi.org/project/Gwydion/0.1/", "requires_dist": null, "requires_python": null, "summary": "Gwydion allows users to generate pseudo-random scientific data easily.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"gwydion\">\n<h2>Gwydion</h2>\n<p>Gwydion allows users to generate pseudo-random scientific data easily.</p>\n<p>In the spirit of <a href=\"https://github.com/joke2k/faker\" rel=\"nofollow\">Faker</a>, Gwydion allows you to generate pseudo-random\ndata using a simple, clean, and customisable API.</p>\n<p>Gwydion is named after a <a href=\"http://en.wikipedia.org/wiki/Gwydion\" rel=\"nofollow\">trickster from Welsh mythology</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install from <a href=\"https://pypi.python.org/pypi\" rel=\"nofollow\">PyPI</a> with</p>\n<pre>pip install gwydion\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Some basic examples of Gwydion objects are given below.</p>\n<p>In the first example, we create a simple <tt>Linear</tt> object, given by the mathematical relationship <tt>y = mx + c</tt>.\nWhen parameters are not set by the user, Gwydion objects will default to suitable random values. Objects will also, by default, add some random noise to the y-data.\nIn the example below we allow the <tt>Linear</tt> object to generate all of the parameters, but set the number of data points <tt>N</tt> manually.</p>\n<pre>from gwydion import Linear\n\nlin = Linear(N=6)\n\nx, y = lin.data\nprint(x, y, sep='\\n')\n# [  0.   2.   4.   6.   8.  10.]\n# [ -0.17387604   5.59216341  11.77162695  17.70041889  23.55609025  28.67617757]\n</pre>\n<p>In this second example, an <tt>Exponential</tt> function is created with various manually selected parameters.\nExponential functions are given by <tt>y = I * <span class=\"pre\">base**(k*x)</span></tt>.\nIn the example below we have set:</p>\n<ul>\n<li>The number of data points <tt>N = 3</tt>,</li>\n<li>The intensity <tt>I = 10</tt>,</li>\n<li>The exponent multiplier <tt>k = <span class=\"pre\">-1</span></tt>,</li>\n<li>The x-limits <tt>xlim = (0, 10)</tt>,</li>\n<li>And chosen to not add any random noise to the data <tt>add_rand = False</tt>.</li>\n</ul>\n<p>For the <tt>Exponential</tt> object the default <tt>base</tt> is not random, but is instead to Euler\u2019s number <tt>e = <span class=\"pre\">2.71828...</span></tt>.\nThis fact, combined with <tt>k = <span class=\"pre\">-1</span></tt>, means that our object below is effectively giving us exponential decay.</p>\n<pre>from gwydion import Exponential\n\nexp = Exponential(N=3, I=10, k=-1, xlim=(0,10), add_rand=False)\n\nx, y = exp.data\nprint(x, y, sep='\\n')\n# [  0.   5.  10.]\n# [  1.00000000e+01   6.73794700e-02   4.53999298e-04]\n</pre>\n<p>Finally, let\u2019s look at how <tt>Gwydion</tt> objects work with <tt>matplotlib</tt>. In the example below, we generate\n5 <tt>Sine</tt> objects using a list comprehension. We can then use the <tt>plot</tt> function to plot each data set easily.</p>\n<pre>from gwydion import Sine\nimport matplotlib.pyplot as plt\n\nsines = [Sine(xlim=(0,5)) for _ in range(5)]\n\nfig, ax = plt.subplots()\n\nfor sine in sines:\n    sine.plot(ax=ax)\n\nax.set_xlabel('Time')\nax.set_ylabel('Intensity')\n\nplt.show()\n</pre>\n<img alt=\"http://i.imgur.com/oG6zDBC.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0670c61292a7b3ba810ab3a033af9e367e65f786/687474703a2f2f692e696d6775722e636f6d2f6f47367a4442432e706e67\">\n</div>\n\n          </div>"}, "last_serial": 1482287, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4d9f513a798f5684f5f94eb7271cb2c4", "sha256": "cd3f4cb5a83ae778dffb9fbb3cbc6fb1a969a97da87961b09983bd83e2427a9f"}, "downloads": -1, "filename": "gwydion-0.1.win-amd64.exe", "has_sig": false, "md5_digest": "4d9f513a798f5684f5f94eb7271cb2c4", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 233853, "upload_time": "2015-03-29T15:28:57", "upload_time_iso_8601": "2015-03-29T15:28:57.472349Z", "url": "https://files.pythonhosted.org/packages/ea/06/6c0ac8074c728b4a294b86ee067e4b41e7507ac996466fdc01fa661e8372/gwydion-0.1.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "d74558e4b4e94aa1fd43a1635b1d39c4", "sha256": "678214f8db98b8d22c06d5a4033cba7ea7c8f28cec956d3f10a4e6f41bd7cd7c"}, "downloads": -1, "filename": "gwydion-0.1.zip", "has_sig": false, "md5_digest": "d74558e4b4e94aa1fd43a1635b1d39c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13986, "upload_time": "2015-03-29T15:28:51", "upload_time_iso_8601": "2015-03-29T15:28:51.305049Z", "url": "https://files.pythonhosted.org/packages/f9/36/5081420e531dd70abe61bd438c6c0ecfe4a5acca7b2693b26a8b0163349e/gwydion-0.1.zip", "yanked": false}], "0.1dev": [{"comment_text": "", "digests": {"md5": "88a6cabc9e9f34bc54a6c8b74dbd3789", "sha256": "96773f918415c6d38d83453afb624a54fdd134f2e90da5e4656297067941f3d9"}, "downloads": -1, "filename": "Gwydion-0.1dev.zip", "has_sig": false, "md5_digest": "88a6cabc9e9f34bc54a6c8b74dbd3789", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4325, "upload_time": "2014-12-16T22:54:09", "upload_time_iso_8601": "2014-12-16T22:54:09.453991Z", "url": "https://files.pythonhosted.org/packages/d7/8d/2dee3ae26e031961feb02a4ca9c70ef95c3e6ec776d152534f471b4e870a/Gwydion-0.1dev.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d9f513a798f5684f5f94eb7271cb2c4", "sha256": "cd3f4cb5a83ae778dffb9fbb3cbc6fb1a969a97da87961b09983bd83e2427a9f"}, "downloads": -1, "filename": "gwydion-0.1.win-amd64.exe", "has_sig": false, "md5_digest": "4d9f513a798f5684f5f94eb7271cb2c4", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 233853, "upload_time": "2015-03-29T15:28:57", "upload_time_iso_8601": "2015-03-29T15:28:57.472349Z", "url": "https://files.pythonhosted.org/packages/ea/06/6c0ac8074c728b4a294b86ee067e4b41e7507ac996466fdc01fa661e8372/gwydion-0.1.win-amd64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "d74558e4b4e94aa1fd43a1635b1d39c4", "sha256": "678214f8db98b8d22c06d5a4033cba7ea7c8f28cec956d3f10a4e6f41bd7cd7c"}, "downloads": -1, "filename": "gwydion-0.1.zip", "has_sig": false, "md5_digest": "d74558e4b4e94aa1fd43a1635b1d39c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13986, "upload_time": "2015-03-29T15:28:51", "upload_time_iso_8601": "2015-03-29T15:28:51.305049Z", "url": "https://files.pythonhosted.org/packages/f9/36/5081420e531dd70abe61bd438c6c0ecfe4a5acca7b2693b26a8b0163349e/gwydion-0.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:53:04 2020"}