{"info": {"author": "Graham Preston", "author_email": "graham.preston@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "<img src=\"https://raw.githubusercontent.com/gcpreston/webcandy/master/webcandy/static/img/webcandy_logo.png\" alt=\"Webcandy\" width=\"500\" height=\"85\">\n\nAPI and web interface for Fadecandy control. For the client-side code\nresponsible for receiving requests from the Webcandy server and running lighting\nconfigurations on the Fadecandy itself, see\n[webcandy-client](https://github.com/gcpreston/webcandy-client).\n\n![](https://s3.gifyu.com/images/webcandy_demo1.gif)\n![](https://s3.gifyu.com/images/webcandy_demo2.gif)\n\n##  Requirements\n- [Python 3.7+](https://www.python.org/downloads/)\n- [Node.js + npm](https://nodejs.org/en/download/)\n\n## Setup\nTo install the necessary node modules, run:\n```\n$ cd webcandy/static\n$ npm install\n```\n\n### virtualenv\nIt is recommended to use a virtual Python environment. To set up virtualenv, run\nthe following:\n```\n$ pip install virtualenv\n$ virtualenv venv\n```\nThe virtual environment is now created. **To use it, it must be activated like\nso**:\n- Windows: `> .\\venv\\Scripts\\activate`\n- Mac/Linux: `$ source ./venv/bin/activate`\n\nThen, install the project requirements:\n```\n(venv) $ pip install -r requirements.txt\n```\n\n## Running\n### Dev environment\nIn a development environment, Webcandy should be run using Flask:\n```\n(venv) $ flask run\n```\n\nThen, in a different terminal:\n```\nwebcandy/webcandy/static $ npm run watch\n```\nThis will watch for front-end changes and automatically rebuild the JavaScript.\n\n* **Note**: If you don't see your changes in the browser, use `Ctrl/Cmd+Shift+R`\nto refresh and clear cache.\n\n### Server environment\nTo run Webcandy from a local server, activate the virtual environment and run\nthe server using `gunicorn`:\n```\n(venv) $ gunicorn 'webcandy:create_app()'\n```\n\nTo build the front-end code, run:\n```\nwebcandy/webcandy/static $ npm run build\n```\n\n### Clients\nTo control LEDs, you will need to connect a\n[client]((http://github.com/gcpreston/webcandy-client))\n([docs](https://webcandy.readthedocs.io/en/latest/client/quickstart.html)).\n\n```\n$ pip install webcandy-client\n$ wc-client RGBLover573 password123 MyClient\n```\n\n###  Login\nOn an independant server, if you want a user with some example data saved you\ncan log in as \"testuser1\" or \"testuser2\", each with password \"Webcandy1\".\n\n## Documentation\nDocumentation can be found at https://webcandy.readthedocs.io/. (WIP)\n\n## Acknowledgements\n* Thanks to Maksim Surguy ([msurguy](https://github.com/msurguy)) for the awesome logo!", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://webcandy.io", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "webcandy", "package_url": "https://pypi.org/project/webcandy/", "platform": "", "project_url": "https://pypi.org/project/webcandy/", "project_urls": {"Documentation": "https://webcandy.readthedocs.io", "Homepage": "https://webcandy.io", "Source": "https://github.com/gcpreston/webcandy"}, "release_url": "https://pypi.org/project/webcandy/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "API and web interface for Fadecandy", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"Webcandy\" height=\"85\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db5bdb82ff01640dfad0088d02d0e3bef899e148/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676370726573746f6e2f77656263616e64792f6d61737465722f77656263616e64792f7374617469632f696d672f77656263616e64795f6c6f676f2e706e67\" width=\"500\">\n<p>API and web interface for Fadecandy control. For the client-side code\nresponsible for receiving requests from the Webcandy server and running lighting\nconfigurations on the Fadecandy itself, see\n<a href=\"https://github.com/gcpreston/webcandy-client\" rel=\"nofollow\">webcandy-client</a>.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f28953cc6467f4403b8a74b4efd310f5db8f5f00/68747470733a2f2f73332e67696679752e636f6d2f696d616765732f77656263616e64795f64656d6f312e676966\">\n<img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c456255aad7fc7793f4e108568ef555c8bb4e3ca/68747470733a2f2f73332e67696679752e636f6d2f696d616765732f77656263616e64795f64656d6f322e676966\"></p>\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.7+</a></li>\n<li><a href=\"https://nodejs.org/en/download/\" rel=\"nofollow\">Node.js + npm</a></li>\n</ul>\n<h2>Setup</h2>\n<p>To install the necessary node modules, run:</p>\n<pre><code>$ cd webcandy/static\n$ npm install\n</code></pre>\n<h3>virtualenv</h3>\n<p>It is recommended to use a virtual Python environment. To set up virtualenv, run\nthe following:</p>\n<pre><code>$ pip install virtualenv\n$ virtualenv venv\n</code></pre>\n<p>The virtual environment is now created. <strong>To use it, it must be activated like\nso</strong>:</p>\n<ul>\n<li>Windows: <code>&gt; .\\venv\\Scripts\\activate</code></li>\n<li>Mac/Linux: <code>$ source ./venv/bin/activate</code></li>\n</ul>\n<p>Then, install the project requirements:</p>\n<pre><code>(venv) $ pip install -r requirements.txt\n</code></pre>\n<h2>Running</h2>\n<h3>Dev environment</h3>\n<p>In a development environment, Webcandy should be run using Flask:</p>\n<pre><code>(venv) $ flask run\n</code></pre>\n<p>Then, in a different terminal:</p>\n<pre><code>webcandy/webcandy/static $ npm run watch\n</code></pre>\n<p>This will watch for front-end changes and automatically rebuild the JavaScript.</p>\n<ul>\n<li><strong>Note</strong>: If you don't see your changes in the browser, use <code>Ctrl/Cmd+Shift+R</code>\nto refresh and clear cache.</li>\n</ul>\n<h3>Server environment</h3>\n<p>To run Webcandy from a local server, activate the virtual environment and run\nthe server using <code>gunicorn</code>:</p>\n<pre><code>(venv) $ gunicorn 'webcandy:create_app()'\n</code></pre>\n<p>To build the front-end code, run:</p>\n<pre><code>webcandy/webcandy/static $ npm run build\n</code></pre>\n<h3>Clients</h3>\n<p>To control LEDs, you will need to connect a\n<a href=\"(http://github.com/gcpreston/webcandy-client)\" rel=\"nofollow\">client</a>\n(<a href=\"https://webcandy.readthedocs.io/en/latest/client/quickstart.html\" rel=\"nofollow\">docs</a>).</p>\n<pre><code>$ pip install webcandy-client\n$ wc-client RGBLover573 password123 MyClient\n</code></pre>\n<h3>Login</h3>\n<p>On an independant server, if you want a user with some example data saved you\ncan log in as \"testuser1\" or \"testuser2\", each with password \"Webcandy1\".</p>\n<h2>Documentation</h2>\n<p>Documentation can be found at <a href=\"https://webcandy.readthedocs.io/\" rel=\"nofollow\">https://webcandy.readthedocs.io/</a>. (WIP)</p>\n<h2>Acknowledgements</h2>\n<ul>\n<li>Thanks to Maksim Surguy (<a href=\"https://github.com/msurguy\" rel=\"nofollow\">msurguy</a>) for the awesome logo!</li>\n</ul>\n\n          </div>"}, "last_serial": 5962364, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "19d87bc58c3d54495bb4b701a2755d28", "sha256": "4754be48db5d08012d8075db7da6efe9f6797a12eff5043fea72cf6b5b5aa398"}, "downloads": -1, "filename": "webcandy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "19d87bc58c3d54495bb4b701a2755d28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1713064, "upload_time": "2019-09-04T23:57:20", "upload_time_iso_8601": "2019-09-04T23:57:20.657920Z", "url": "https://files.pythonhosted.org/packages/9c/42/e269781385818465637d53766d2ccd9191f659a2f9f2f55cc5c73b20cd9a/webcandy-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "68f919f67a0e6a5e1a3d66d0cb3448e9", "sha256": "c963254cad070b3a589f7bc5fd516068388af4a6fac4e34603245d8f140c5475"}, "downloads": -1, "filename": "webcandy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "68f919f67a0e6a5e1a3d66d0cb3448e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13891, "upload_time": "2019-10-12T00:06:36", "upload_time_iso_8601": "2019-10-12T00:06:36.190123Z", "url": "https://files.pythonhosted.org/packages/14/fe/745b98f342a996528682feb2db564220ca3880c8a8e3ca3fe9197877bcb1/webcandy-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "68f919f67a0e6a5e1a3d66d0cb3448e9", "sha256": "c963254cad070b3a589f7bc5fd516068388af4a6fac4e34603245d8f140c5475"}, "downloads": -1, "filename": "webcandy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "68f919f67a0e6a5e1a3d66d0cb3448e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13891, "upload_time": "2019-10-12T00:06:36", "upload_time_iso_8601": "2019-10-12T00:06:36.190123Z", "url": "https://files.pythonhosted.org/packages/14/fe/745b98f342a996528682feb2db564220ca3880c8a8e3ca3fe9197877bcb1/webcandy-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:24 2020"}