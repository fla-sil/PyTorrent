{"info": {"author": "Anentropic", "author_email": "ego@anentropic.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Framework :: Hypothesis", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Hypothesis-Grammar\n==================\n\n[![Build Status](https://travis-ci.org/anentropic/hypothesis-grammar.svg?branch=master)](https://travis-ci.org/anentropic/hypothesis-grammar)\n[![Latest PyPI version](https://badge.fury.io/py/hypothesis-grammar.svg)](https://pypi.python.org/pypi/hypothesis-grammar/)\n\n![Python 3.7](https://img.shields.io/badge/Python%203.7--brightgreen.svg)\n![Python 3.8](https://img.shields.io/badge/Python%203.8--brightgreen.svg)  \n\n(pre-alpha... the stuff I've tried all works, not well tested yet though)\n\n## What is it?\n\nHypothesis-Grammar is a \"reverse parser\" - given a grammar it will generate examples of that grammar.\n\nIt is implemented as a [Hypothesis](https://hypothesis.readthedocs.io/) strategy.\n\n(If you are looking to generate text from a grammar for purposes other than testing with Hypothesis then this lib can still be useful, but I stongly recommend looking at the [tools provided with NLTK](http://www.nltk.org/howto/generate.html) instead.)\n\n## Usage\n\nSo, how does this look?\n\nFirst you need a grammar. Our grammar format is based on that used by the [Lark parser](https://lark-parser.readthedocs.io/en/latest/grammar/) library.  You can see our grammar-parsing grammar [here](hypothesis_grammar/grammar.lark). More details of our grammar format [below](#grammar-details).\n\nHere is an example of using Hypothesis-Grammar:\n\n```python\nfrom hypothesis_grammar import strategy_from_grammar\n\nst = strategy_from_grammar(\n    grammar=\"\"\"\n        DET: \"the\" | \"a\"\n        N: \"man\" | \"park\" | \"dog\"\n        P: \"in\" | \"with\"\n\n        s: np vp\n        np: DET N\n        pp: P np\n        vp: \"slept\" | \"saw\" np | \"walked\" pp\n    \"\"\",\n    start=\"s\",\n)\n\nst.example()\n# ['a', 'dog', 'saw', 'the', 'man']\n\nst.example()\n# ['a', 'park', 'saw', 'a', 'man']\n\nst.example()\n# ['the', 'man', 'slept']\n```\n\nor as a test...\n\n```python\nfrom hypothesis import given\nfrom hypothesis_grammar import strategy_from_grammar\n\n\n@given(\n    strategy_from_grammar(\n        grammar=\"\"\"\n            DET: \"the\" | \"a\"\n            N: \"man\" | \"park\" | \"dog\"\n            P: \"in\" | \"with\"\n\n            s: np vp\n            np: DET N\n            pp: P np\n            vp: \"slept\" | \"saw\" np | \"walked\" pp\n        \"\"\",\n        start=\"s\",\n    )\n)\ndef test_grammar(example):\n    nouns = {\"man\", \"park\", \"dog\"}\n    assert any(noun in example for noun in nouns)\n```\n\nThe grammar is taken from an example in the NLTK docs and converted into our \"simplified Lark\" format.\n\n`start=\"s\"` tells the parser that the start rule is `s`.\n\nAs you can see, we have produced a Hypothesis strategy which is able to generate examples which match the grammar (in this case, short sentences which sometimes makes sense).\n\nThe output will always be a flat list of token strings. If you want a sentence you can just `\" \".join(example)`.\n\nBut the grammar doesn't have to describe text, it might represent a sequence of actions for example. In that case you might want to convert your result tokens into object instances, which could be done via a lookup table.\n\n(But if you're generating action sequences for tests then probably you should check out Hypothesis' [stateful testing](https://hypothesis.readthedocs.io/en/latest/stateful.html) features first)\n\n## Grammar details\n\n- Whitespace is ignored\n- 'Terminals' must be named all-caps (terminals only reference literals, not other rules), e.g. `DET`\n- 'Rules' must be named all-lowercase, e.g. `np`\n- LHS (name) and RHS are separated by `:` \n- String literals must be quoted with double-quotes e.g. `\"man\"`\n- You can also use regex literals, they are delimited with forward-slash, e.g. `/the[a-z]{0,2}/`. Content for the regex token is generated using Hypothesis' [`from_regex`](https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.from_regex) strategy, with `fullmatch=True`.\n- Adjacent tokens are concatenated, i.e. `DET N` means a `DET` followed by a `N`.\n- `|` is alternation, so `\"in\" | \"with\"` means one-of `\"in\"` or `\"with\"`\n- `?` means optional, i.e. `\"in\"?` means `\"in\"` is expected zero-or-one time.\n- `*` i.e. `\"in\"*` means `\"in\"` is expected zero-or-many times.\n- `+` i.e. `\"in\"+` means `\"in\"` is expected one-or-many times.\n- `~ <num>` means exactly-&lt;num&gt; times.\n- `~ <min>..<max>` is a range, expected between-&lt;min&gt;-and-&lt;max&gt; times.\n- `(` and `)` are for grouping, the group can be quantified using any of the modifiers above.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anentropic/hypothesis-grammar", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hypothesis-grammar", "package_url": "https://pypi.org/project/hypothesis-grammar/", "platform": "", "project_url": "https://pypi.org/project/hypothesis-grammar/", "project_urls": {"Homepage": "https://github.com/anentropic/hypothesis-grammar"}, "release_url": "https://pypi.org/project/hypothesis-grammar/0.1.1/", "requires_dist": ["hypothesis (>=5.8.0,<6.0.0)", "lark-parser (>=0.8.5,<0.9.0)", "inject (>=4.1.1,<5.0.0)", "typing-extensions (>=3.7.4,<4.0.0)"], "requires_python": ">=3.7", "summary": "A reverse-parser as a Hypotheses strategy: generate examples from an EBNF grammar", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Hypothesis-Grammar</h1>\n<p><a href=\"https://travis-ci.org/anentropic/hypothesis-grammar\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfdb21dc5806d326ee6b77dfbaf6cc308a771445/68747470733a2f2f7472617669732d63692e6f72672f616e656e74726f7069632f6879706f7468657369732d6772616d6d61722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/hypothesis-grammar/\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd255925eaa4656e21dd25809df20c3316ed49bc/68747470733a2f2f62616467652e667572792e696f2f70792f6879706f7468657369732d6772616d6d61722e737667\"></a></p>\n<p><img alt=\"Python 3.7\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f588af29177efc1e9cbf24a8fb8d954cb2b53e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e253230332e372d2d627269676874677265656e2e737667\">\n<img alt=\"Python 3.8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/adbddcb1472156fafc06c8935e82d2d0ad8dc27d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f507974686f6e253230332e382d2d627269676874677265656e2e737667\"></p>\n<p>(pre-alpha... the stuff I've tried all works, not well tested yet though)</p>\n<h2>What is it?</h2>\n<p>Hypothesis-Grammar is a \"reverse parser\" - given a grammar it will generate examples of that grammar.</p>\n<p>It is implemented as a <a href=\"https://hypothesis.readthedocs.io/\" rel=\"nofollow\">Hypothesis</a> strategy.</p>\n<p>(If you are looking to generate text from a grammar for purposes other than testing with Hypothesis then this lib can still be useful, but I stongly recommend looking at the <a href=\"http://www.nltk.org/howto/generate.html\" rel=\"nofollow\">tools provided with NLTK</a> instead.)</p>\n<h2>Usage</h2>\n<p>So, how does this look?</p>\n<p>First you need a grammar. Our grammar format is based on that used by the <a href=\"https://lark-parser.readthedocs.io/en/latest/grammar/\" rel=\"nofollow\">Lark parser</a> library.  You can see our grammar-parsing grammar <a href=\"hypothesis_grammar/grammar.lark\" rel=\"nofollow\">here</a>. More details of our grammar format <a href=\"#grammar-details\" rel=\"nofollow\">below</a>.</p>\n<p>Here is an example of using Hypothesis-Grammar:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hypothesis_grammar</span> <span class=\"kn\">import</span> <span class=\"n\">strategy_from_grammar</span>\n\n<span class=\"n\">st</span> <span class=\"o\">=</span> <span class=\"n\">strategy_from_grammar</span><span class=\"p\">(</span>\n    <span class=\"n\">grammar</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">        DET: \"the\" | \"a\"</span>\n<span class=\"s2\">        N: \"man\" | \"park\" | \"dog\"</span>\n<span class=\"s2\">        P: \"in\" | \"with\"</span>\n\n<span class=\"s2\">        s: np vp</span>\n<span class=\"s2\">        np: DET N</span>\n<span class=\"s2\">        pp: P np</span>\n<span class=\"s2\">        vp: \"slept\" | \"saw\" np | \"walked\" pp</span>\n<span class=\"s2\">    \"\"\"</span><span class=\"p\">,</span>\n    <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"s\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">example</span><span class=\"p\">()</span>\n<span class=\"c1\"># ['a', 'dog', 'saw', 'the', 'man']</span>\n\n<span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">example</span><span class=\"p\">()</span>\n<span class=\"c1\"># ['a', 'park', 'saw', 'a', 'man']</span>\n\n<span class=\"n\">st</span><span class=\"o\">.</span><span class=\"n\">example</span><span class=\"p\">()</span>\n<span class=\"c1\"># ['the', 'man', 'slept']</span>\n</pre>\n<p>or as a test...</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hypothesis</span> <span class=\"kn\">import</span> <span class=\"n\">given</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hypothesis_grammar</span> <span class=\"kn\">import</span> <span class=\"n\">strategy_from_grammar</span>\n\n\n<span class=\"nd\">@given</span><span class=\"p\">(</span>\n    <span class=\"n\">strategy_from_grammar</span><span class=\"p\">(</span>\n        <span class=\"n\">grammar</span><span class=\"o\">=</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">            DET: \"the\" | \"a\"</span>\n<span class=\"s2\">            N: \"man\" | \"park\" | \"dog\"</span>\n<span class=\"s2\">            P: \"in\" | \"with\"</span>\n\n<span class=\"s2\">            s: np vp</span>\n<span class=\"s2\">            np: DET N</span>\n<span class=\"s2\">            pp: P np</span>\n<span class=\"s2\">            vp: \"slept\" | \"saw\" np | \"walked\" pp</span>\n<span class=\"s2\">        \"\"\"</span><span class=\"p\">,</span>\n        <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"s2\">\"s\"</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_grammar</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"p\">):</span>\n    <span class=\"n\">nouns</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"man\"</span><span class=\"p\">,</span> <span class=\"s2\">\"park\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dog\"</span><span class=\"p\">}</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">noun</span> <span class=\"ow\">in</span> <span class=\"n\">example</span> <span class=\"k\">for</span> <span class=\"n\">noun</span> <span class=\"ow\">in</span> <span class=\"n\">nouns</span><span class=\"p\">)</span>\n</pre>\n<p>The grammar is taken from an example in the NLTK docs and converted into our \"simplified Lark\" format.</p>\n<p><code>start=\"s\"</code> tells the parser that the start rule is <code>s</code>.</p>\n<p>As you can see, we have produced a Hypothesis strategy which is able to generate examples which match the grammar (in this case, short sentences which sometimes makes sense).</p>\n<p>The output will always be a flat list of token strings. If you want a sentence you can just <code>\" \".join(example)</code>.</p>\n<p>But the grammar doesn't have to describe text, it might represent a sequence of actions for example. In that case you might want to convert your result tokens into object instances, which could be done via a lookup table.</p>\n<p>(But if you're generating action sequences for tests then probably you should check out Hypothesis' <a href=\"https://hypothesis.readthedocs.io/en/latest/stateful.html\" rel=\"nofollow\">stateful testing</a> features first)</p>\n<h2>Grammar details</h2>\n<ul>\n<li>Whitespace is ignored</li>\n<li>'Terminals' must be named all-caps (terminals only reference literals, not other rules), e.g. <code>DET</code></li>\n<li>'Rules' must be named all-lowercase, e.g. <code>np</code></li>\n<li>LHS (name) and RHS are separated by <code>:</code></li>\n<li>String literals must be quoted with double-quotes e.g. <code>\"man\"</code></li>\n<li>You can also use regex literals, they are delimited with forward-slash, e.g. <code>/the[a-z]{0,2}/</code>. Content for the regex token is generated using Hypothesis' <a href=\"https://hypothesis.readthedocs.io/en/latest/data.html#hypothesis.strategies.from_regex\" rel=\"nofollow\"><code>from_regex</code></a> strategy, with <code>fullmatch=True</code>.</li>\n<li>Adjacent tokens are concatenated, i.e. <code>DET N</code> means a <code>DET</code> followed by a <code>N</code>.</li>\n<li><code>|</code> is alternation, so <code>\"in\" | \"with\"</code> means one-of <code>\"in\"</code> or <code>\"with\"</code></li>\n<li><code>?</code> means optional, i.e. <code>\"in\"?</code> means <code>\"in\"</code> is expected zero-or-one time.</li>\n<li><code>*</code> i.e. <code>\"in\"*</code> means <code>\"in\"</code> is expected zero-or-many times.</li>\n<li><code>+</code> i.e. <code>\"in\"+</code> means <code>\"in\"</code> is expected one-or-many times.</li>\n<li><code>~ &lt;num&gt;</code> means exactly-&lt;num&gt; times.</li>\n<li><code>~ &lt;min&gt;..&lt;max&gt;</code> is a range, expected between-&lt;min&gt;-and-&lt;max&gt; times.</li>\n<li><code>(</code> and <code>)</code> are for grouping, the group can be quantified using any of the modifiers above.</li>\n</ul>\n\n          </div>"}, "last_serial": 6916189, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "969af2439f4b8de3988a961e15587693", "sha256": "31783020abb47d59c377d190e38bff4497e8fa53566c252f2a3aa04f7f7c7a68"}, "downloads": -1, "filename": "hypothesis_grammar-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "969af2439f4b8de3988a961e15587693", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6391, "upload_time": "2020-03-30T21:04:49", "upload_time_iso_8601": "2020-03-30T21:04:49.885449Z", "url": "https://files.pythonhosted.org/packages/9f/da/857ef900012ed92a93e7434856f2a9c71fbd5a55d5e8fe7e9c7e2be26b4a/hypothesis_grammar-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80f3cb54d469ae0c863728a2565b9272", "sha256": "60e768423b4671f49cbe46409d2e62d976c470fd4498e007955e4b6e3c7d54b1"}, "downloads": -1, "filename": "hypothesis-grammar-0.1.0.tar.gz", "has_sig": false, "md5_digest": "80f3cb54d469ae0c863728a2565b9272", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5178, "upload_time": "2020-03-30T21:04:47", "upload_time_iso_8601": "2020-03-30T21:04:47.713572Z", "url": "https://files.pythonhosted.org/packages/69/70/499571d606cf43acd00f66165e64d90964992583fffbac8c13218b81e40c/hypothesis-grammar-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1443f0abc0bfedc19859a063a21d2772", "sha256": "1650dee38ba371d2e2e5f95c66eeb388c4d0d6345907570be662eba23239d7e3"}, "downloads": -1, "filename": "hypothesis_grammar-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1443f0abc0bfedc19859a063a21d2772", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8384, "upload_time": "2020-03-30T21:11:19", "upload_time_iso_8601": "2020-03-30T21:11:19.467232Z", "url": "https://files.pythonhosted.org/packages/cc/80/8a934ce0aa939b8caf36522d36d665701178336792cfeb6b8ddddbf5d1bd/hypothesis_grammar-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb1a6cbb33c6c2ae4197b35a1c7d9442", "sha256": "75cf5d73df5d3ed468524622de12f2a8ae07aa0231266ab9ba52eb81a7753429"}, "downloads": -1, "filename": "hypothesis-grammar-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cb1a6cbb33c6c2ae4197b35a1c7d9442", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7993, "upload_time": "2020-03-30T21:11:18", "upload_time_iso_8601": "2020-03-30T21:11:18.257796Z", "url": "https://files.pythonhosted.org/packages/05/96/6cb3a356499a79ec9b4b630377d99a9874642a2abe8c331a5013698ab406/hypothesis-grammar-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1443f0abc0bfedc19859a063a21d2772", "sha256": "1650dee38ba371d2e2e5f95c66eeb388c4d0d6345907570be662eba23239d7e3"}, "downloads": -1, "filename": "hypothesis_grammar-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1443f0abc0bfedc19859a063a21d2772", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8384, "upload_time": "2020-03-30T21:11:19", "upload_time_iso_8601": "2020-03-30T21:11:19.467232Z", "url": "https://files.pythonhosted.org/packages/cc/80/8a934ce0aa939b8caf36522d36d665701178336792cfeb6b8ddddbf5d1bd/hypothesis_grammar-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb1a6cbb33c6c2ae4197b35a1c7d9442", "sha256": "75cf5d73df5d3ed468524622de12f2a8ae07aa0231266ab9ba52eb81a7753429"}, "downloads": -1, "filename": "hypothesis-grammar-0.1.1.tar.gz", "has_sig": false, "md5_digest": "cb1a6cbb33c6c2ae4197b35a1c7d9442", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7993, "upload_time": "2020-03-30T21:11:18", "upload_time_iso_8601": "2020-03-30T21:11:18.257796Z", "url": "https://files.pythonhosted.org/packages/05/96/6cb3a356499a79ec9b4b630377d99a9874642a2abe8c331a5013698ab406/hypothesis-grammar-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:25 2020"}