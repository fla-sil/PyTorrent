{"info": {"author": "David Mosberger-Tang", "author_email": "davidm@egauge.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha"], "description": "=======\nCarioca\n=======\n\nCarioca is a variation of Samba or, in the present case, of SAM-BA.\nSAM-BA is a full-blown in-system programmer developed and distributed\nby Atmel to support bootstrapping their various SAM microcontrollers.\nSAM-BA is proprietary, meaning that (most) of the source code is\nunavailable to SAM-BA users.  Thus, if something breaks there, only\nAtmel can fix the problem.\n\nIn contrast, Carioca is a minimal and open-source tool with similar\ngoals as SAM-BA.  It is minimal in the sense that it does not have any\nof the complex code required to initialize hardware components such as\nDRAM or to program flash memory.  Instead Carioca provides just enough\nsupport to enable booting a primary bootloader and from there an\noperating system such as Linux.  All flash programming etc. can then\nbe done from within the target's operating system.\n\nCarioca has two modes: script mode and terminal-emulation mode.  It\nstarts out in script-mode where it executes zero or more scripts\nstored in files.  There is also an interactive script mode where a\nuser can type commands interactively in a terminal.  Once the scripts\nare done, Carioca usually switches into terminal-emulation mode.  In\nthis mode, Carioca simply passes the serial traffic from the target's\nserial interface to the terminal Carioca was started in.  This enables\na user to observe the boot process of the target's operating system,\nto log in and to execute commands as needed.\n\nWith these two modes, Carioca enables bootstraping a SAM\nmicrocontroller through a single serial interface (such as the Debug\nserial port), rather than the two ports typically required with SAM-BA\n(Debug serial port and USB serial interface).\n\nCarioca is written entirely in Python 3 and the scripting language has\nbeen influenced by another, now defunct Python project called Sam_I_Am\n(the two projects share no actual code, though, and their scripts are\nnot compatible).\n\nQuick start\n-----------\n\n1. Install with::\n\n\tpip install --user carioca\n\n   (or use \"pip3\" if that's the version providing Python 3).\n\n2. Connect a target board with a SAM microcontroller to your computer\n   using either its Debug serial port or the USB serial port.  On\n   Linux, the former would typically show up as device **/dev/ttyUSB0**,\n   the latter as **/dev/ttyACM0**.\n\n3. If the target's serial port shows up as **/dev/ttyUSB0** on your\n   computer and the target's serial port speed is **115,200 baud**, then\n   start Carioca like this::\n\n\t~/.local/bin/carioca\n\n   You can use option -p to specify a non-default serial port (such as\n   \"**-p /dev/ttyACM0**\") and the -b option to specify a non-default\n   baudrate (such as \"**-b 57600**\").\n\n4. Power up the target board.  Assuming your target has not been setup\n   for automatic booting yet, you should see a \"**RomBOOT**\" prompt.  If so,\n   continue.\n\n5. Quit Carioca's terminal emulator by typing \"**Ctrl-] quit**\", followed\n   by the **Enter** key.\n\n6. Start Carioca's interactive script mode with::\n\n\t~/.local/bin/carioca -\n\n   This will give you a \"**carioca$**\" prompt. You can type \"**help**\" to get\n   a list of available commands.  When executing the first command\n   requiring interaction with the target, Carioca report's the target's\n   SAM-BA Monitor version.  For example::\n\n\tcarioca$ writeb 0x200000 42\n\n   will write the value 42 to memory location 0x200000 and respond with::\n\n\tConnected to SAM-BA Monitor v1.1 Jul 31 2015 15:09:09\n\n   Typically, you'll want to send the primary bootstrap loader to\n   the microcontroller's SRAM and then start execution.  This could be\n   achieved with::\n\n\tcarioca$ sendimg 0x200000 \"at91bootstrap.bin\"\n\tcarioca$ go 0x200000\n\n   As soon as the \"**go**\" command is executed, Carioca will switch to\n   terminal-emulation mode so you can observe the boot process and\n   interact with the target as needed.\n\n7. When you get tired if playing with the target system, type\n   \"**Ctrl-] quit**\", followed by the **Enter** key to quit Carioca.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/egauge/carioca/", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "carioca", "package_url": "https://pypi.org/project/carioca/", "platform": "", "project_url": "https://pypi.org/project/carioca/", "project_urls": {"Homepage": "https://bitbucket.org/egauge/carioca/"}, "release_url": "https://pypi.org/project/carioca/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Interface to Atmel SAM-BA Monitor.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Carioca is a variation of Samba or, in the present case, of SAM-BA.\nSAM-BA is a full-blown in-system programmer developed and distributed\nby Atmel to support bootstrapping their various SAM microcontrollers.\nSAM-BA is proprietary, meaning that (most) of the source code is\nunavailable to SAM-BA users.  Thus, if something breaks there, only\nAtmel can fix the problem.</p>\n<p>In contrast, Carioca is a minimal and open-source tool with similar\ngoals as SAM-BA.  It is minimal in the sense that it does not have any\nof the complex code required to initialize hardware components such as\nDRAM or to program flash memory.  Instead Carioca provides just enough\nsupport to enable booting a primary bootloader and from there an\noperating system such as Linux.  All flash programming etc. can then\nbe done from within the target\u2019s operating system.</p>\n<p>Carioca has two modes: script mode and terminal-emulation mode.  It\nstarts out in script-mode where it executes zero or more scripts\nstored in files.  There is also an interactive script mode where a\nuser can type commands interactively in a terminal.  Once the scripts\nare done, Carioca usually switches into terminal-emulation mode.  In\nthis mode, Carioca simply passes the serial traffic from the target\u2019s\nserial interface to the terminal Carioca was started in.  This enables\na user to observe the boot process of the target\u2019s operating system,\nto log in and to execute commands as needed.</p>\n<p>With these two modes, Carioca enables bootstraping a SAM\nmicrocontroller through a single serial interface (such as the Debug\nserial port), rather than the two ports typically required with SAM-BA\n(Debug serial port and USB serial interface).</p>\n<p>Carioca is written entirely in Python 3 and the scripting language has\nbeen influenced by another, now defunct Python project called Sam_I_Am\n(the two projects share no actual code, though, and their scripts are\nnot compatible).</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Install with:</p>\n<pre>pip install --user carioca\n</pre>\n<p>(or use \u201cpip3\u201d if that\u2019s the version providing Python 3).</p>\n</li>\n<li><p>Connect a target board with a SAM microcontroller to your computer\nusing either its Debug serial port or the USB serial port.  On\nLinux, the former would typically show up as device <strong>/dev/ttyUSB0</strong>,\nthe latter as <strong>/dev/ttyACM0</strong>.</p>\n</li>\n<li><p>If the target\u2019s serial port shows up as <strong>/dev/ttyUSB0</strong> on your\ncomputer and the target\u2019s serial port speed is <strong>115,200 baud</strong>, then\nstart Carioca like this:</p>\n<pre>~/.local/bin/carioca\n</pre>\n<p>You can use option -p to specify a non-default serial port (such as\n\u201c<strong>-p /dev/ttyACM0</strong>\u201d) and the -b option to specify a non-default\nbaudrate (such as \u201c<strong>-b 57600</strong>\u201d).</p>\n</li>\n<li><p>Power up the target board.  Assuming your target has not been setup\nfor automatic booting yet, you should see a \u201c<strong>RomBOOT</strong>\u201d prompt.  If so,\ncontinue.</p>\n</li>\n<li><p>Quit Carioca\u2019s terminal emulator by typing \u201c<strong>Ctrl-] quit</strong>\u201d, followed\nby the <strong>Enter</strong> key.</p>\n</li>\n<li><p>Start Carioca\u2019s interactive script mode with:</p>\n<pre>~/.local/bin/carioca -\n</pre>\n<p>This will give you a \u201c<strong>carioca$</strong>\u201d prompt. You can type \u201c<strong>help</strong>\u201d to get\na list of available commands.  When executing the first command\nrequiring interaction with the target, Carioca report\u2019s the target\u2019s\nSAM-BA Monitor version.  For example:</p>\n<pre>carioca$ writeb 0x200000 42\n</pre>\n<p>will write the value 42 to memory location 0x200000 and respond with:</p>\n<pre>Connected to SAM-BA Monitor v1.1 Jul 31 2015 15:09:09\n</pre>\n<p>Typically, you\u2019ll want to send the primary bootstrap loader to\nthe microcontroller\u2019s SRAM and then start execution.  This could be\nachieved with:</p>\n<pre>carioca$ sendimg 0x200000 \"at91bootstrap.bin\"\ncarioca$ go 0x200000\n</pre>\n<p>As soon as the \u201c<strong>go</strong>\u201d command is executed, Carioca will switch to\nterminal-emulation mode so you can observe the boot process and\ninteract with the target as needed.</p>\n</li>\n<li><p>When you get tired if playing with the target system, type\n\u201c<strong>Ctrl-] quit</strong>\u201d, followed by the <strong>Enter</strong> key to quit Carioca.</p>\n</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 3579957, "releases": {"0.0": [{"comment_text": "", "digests": {"md5": "b9b4728dbf6b463f4b2b4a82ef3f680a", "sha256": "e0275d0dd3488a69d5ed1d81b4bd8dc6caefcd78b7c7c97ff1d9b88db71218f7"}, "downloads": -1, "filename": "carioca-0.0.tar.gz", "has_sig": false, "md5_digest": "b9b4728dbf6b463f4b2b4a82ef3f680a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12497, "upload_time": "2016-05-07T05:41:25", "upload_time_iso_8601": "2016-05-07T05:41:25.937978Z", "url": "https://files.pythonhosted.org/packages/d1/6a/27a5eac758482b1de74199271e65c3383cbe1057bf6466de50dc8fd9260d/carioca-0.0.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "7b0ce113c3c247473bae21c92278173b", "sha256": "3706749302b01ed24bb4e0c495ee4cc3e835df0ef0fda2290a3eb04374b80136"}, "downloads": -1, "filename": "carioca-0.1.tar.gz", "has_sig": false, "md5_digest": "7b0ce113c3c247473bae21c92278173b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12393, "upload_time": "2016-05-07T05:43:11", "upload_time_iso_8601": "2016-05-07T05:43:11.927393Z", "url": "https://files.pythonhosted.org/packages/78/6b/41951c28918c2cb6f5cf4de5b391d3b744c154da10fe07c65861aa11905c/carioca-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "3da00f84afaba01cf1a1688616459307", "sha256": "8b80ebf574a1d70cfe5a2747d6bd3e93310e79b14abb24d1cfc63e4282b38191"}, "downloads": -1, "filename": "carioca-0.2.tar.gz", "has_sig": false, "md5_digest": "3da00f84afaba01cf1a1688616459307", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12434, "upload_time": "2016-05-10T03:36:02", "upload_time_iso_8601": "2016-05-10T03:36:02.370482Z", "url": "https://files.pythonhosted.org/packages/e4/10/3c4b302738ae5fac043a7142e346e47143a6a336cfc3b674356e36407e57/carioca-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "51bc28eac4063e96ef5a60c8802a0eb2", "sha256": "f6bbcb8647f353c83519f702c866d985ce48279d3d6208c226f7bba73a629d47"}, "downloads": -1, "filename": "carioca-0.3.tar.gz", "has_sig": false, "md5_digest": "51bc28eac4063e96ef5a60c8802a0eb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12513, "upload_time": "2016-06-01T03:20:49", "upload_time_iso_8601": "2016-06-01T03:20:49.394156Z", "url": "https://files.pythonhosted.org/packages/0a/a0/ea2d2b3eb7d98e52de59360e7df09c9dc0b98668e40f6effccf7dc381744/carioca-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "5ca3566aebc774618634eeffb00cc97a", "sha256": "296479be021698ccf07c13f52598af7625b4844f8d18a58d4aa711d3f7bb5410"}, "downloads": -1, "filename": "carioca-0.4.tar.gz", "has_sig": false, "md5_digest": "5ca3566aebc774618634eeffb00cc97a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12736, "upload_time": "2016-06-01T05:27:49", "upload_time_iso_8601": "2016-06-01T05:27:49.188996Z", "url": "https://files.pythonhosted.org/packages/8b/df/490a458643e3c08f1575e34383531e879b9ff1012173810e64ae77f2199d/carioca-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "495e9d4bfbd8e669de1b5676e0292de2", "sha256": "f130260ab283ab7df1d7c567ad6d94684ceec9db19793ed78a9e76e80a120a77"}, "downloads": -1, "filename": "carioca-0.5.tar.gz", "has_sig": false, "md5_digest": "495e9d4bfbd8e669de1b5676e0292de2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10875, "upload_time": "2016-06-03T17:48:37", "upload_time_iso_8601": "2016-06-03T17:48:37.564345Z", "url": "https://files.pythonhosted.org/packages/7b/5e/6af10da1d27502bdcdeb4c1f6f84ac145cc4b568dde5b6af491565589a00/carioca-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "fbae13a5727928001122a5471fed8b8e", "sha256": "8634abe2ccd3570329c1f087ae7dd2381b780b5f3a44a32685d3e4c0656d5694"}, "downloads": -1, "filename": "carioca-0.6.tar.gz", "has_sig": false, "md5_digest": "fbae13a5727928001122a5471fed8b8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13175, "upload_time": "2016-06-04T04:35:44", "upload_time_iso_8601": "2016-06-04T04:35:44.564826Z", "url": "https://files.pythonhosted.org/packages/be/58/3f955beacf6536d3a3971b8f11c8c393ec7ce437e59501130be0fe8e4b04/carioca-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "3062362b5f50326c4ec8ebd2622dd6df", "sha256": "1e3c16865d5fa5da6907a0850c999162e145229b23ab4645dd5f7e12ce6f8015"}, "downloads": -1, "filename": "carioca-0.7.tar.gz", "has_sig": false, "md5_digest": "3062362b5f50326c4ec8ebd2622dd6df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11269, "upload_time": "2016-06-06T17:45:58", "upload_time_iso_8601": "2016-06-06T17:45:58.313787Z", "url": "https://files.pythonhosted.org/packages/4b/74/017abe257959b791fe4f766d5387799398734dce9c886e9c16cd0a5177c1/carioca-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "0cf9517f004203f198b2e9ae9275afc3", "sha256": "6bdc1b7dd9fc1a369da0bb2864a58ccc89753e3d895bebc80e3f0d7ad5039815"}, "downloads": -1, "filename": "carioca-0.8.tar.gz", "has_sig": false, "md5_digest": "0cf9517f004203f198b2e9ae9275afc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11263, "upload_time": "2016-08-15T16:53:52", "upload_time_iso_8601": "2016-08-15T16:53:52.078519Z", "url": "https://files.pythonhosted.org/packages/bf/12/ea18f25f295ae7cb2178bcd079d679e0886eae9922c36c4a50c1361386e3/carioca-0.8.tar.gz", "yanked": false}], "0.9": [{"comment_text": "", "digests": {"md5": "071e70285e3f437b16b50b872048ab27", "sha256": "b788b965e8a178d6754e977df0ed5e9d95e56d1aa04c9dbd84c43bd6babbf44c"}, "downloads": -1, "filename": "carioca-0.9.tar.gz", "has_sig": false, "md5_digest": "071e70285e3f437b16b50b872048ab27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14132, "upload_time": "2016-11-10T23:34:20", "upload_time_iso_8601": "2016-11-10T23:34:20.404539Z", "url": "https://files.pythonhosted.org/packages/a5/ce/f100e412656d20ec71915d9ce479380380e5996f1e2477f1314077c212f2/carioca-0.9.tar.gz", "yanked": false}], "0.91": [{"comment_text": "", "digests": {"md5": "8f514f44cc259e92be111b60c3c5f9c3", "sha256": "9e17b2a36e23f5ef5b8d13bfd4061dca9fb1b4ecae32e04768c476fae66caf3b"}, "downloads": -1, "filename": "carioca-0.91.tar.gz", "has_sig": false, "md5_digest": "8f514f44cc259e92be111b60c3c5f9c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14228, "upload_time": "2016-11-11T04:57:39", "upload_time_iso_8601": "2016-11-11T04:57:39.850267Z", "url": "https://files.pythonhosted.org/packages/35/94/e5d05b0ddac7109ee72e8b84572f6bc9686cc9ce297c293e144da5164079/carioca-0.91.tar.gz", "yanked": false}], "0.92": [{"comment_text": "", "digests": {"md5": "8ebd61ad60ccf72560c3c1f0a0a8ee4a", "sha256": "cc6a31d818b26084c07e3e98fa04312352b8605426f09da17e239796cff98ef6"}, "downloads": -1, "filename": "carioca-0.92.tar.gz", "has_sig": false, "md5_digest": "8ebd61ad60ccf72560c3c1f0a0a8ee4a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14282, "upload_time": "2016-11-11T06:04:44", "upload_time_iso_8601": "2016-11-11T06:04:44.035601Z", "url": "https://files.pythonhosted.org/packages/ce/be/1babe854e60cdf92ad0faf42347e62bae6748e0ef75be9344d25cc282bc0/carioca-0.92.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "f4180497a86be0cac0415f41bed47488", "sha256": "9ccd6aeb5f52c2572334d8905cf1c61439625149da917bdd5c4dfc82ba448a38"}, "downloads": -1, "filename": "carioca-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f4180497a86be0cac0415f41bed47488", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11938, "upload_time": "2018-02-13T23:14:01", "upload_time_iso_8601": "2018-02-13T23:14:01.095833Z", "url": "https://files.pythonhosted.org/packages/c1/86/804951cd646677648af33dd101d13e0827f817daeeb26cabe558488e5bcb/carioca-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f4180497a86be0cac0415f41bed47488", "sha256": "9ccd6aeb5f52c2572334d8905cf1c61439625149da917bdd5c4dfc82ba448a38"}, "downloads": -1, "filename": "carioca-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f4180497a86be0cac0415f41bed47488", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11938, "upload_time": "2018-02-13T23:14:01", "upload_time_iso_8601": "2018-02-13T23:14:01.095833Z", "url": "https://files.pythonhosted.org/packages/c1/86/804951cd646677648af33dd101d13e0827f817daeeb26cabe558488e5bcb/carioca-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:24 2020"}