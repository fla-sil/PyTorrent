{"info": {"author": "Alexandre D\u00e9fossez", "author_email": "alexandredefossez@gmail.com", "bugtrack_url": null, "classifiers": ["Topic :: Text Processing"], "description": "# treetable\n\nHelper to pretty print an ascii table with a tree-like structure.\n\n## Installation and requirements\n\n`treetable` requires at least python3.6.\n```\npip3 install treetable\n```\n\n\n## Quick example\n\n`treetable` allows to easily output complex ascii tables like\n\n```\n         ||                 ||              metrics\n         ||       info      ||      train     |       test\nname     ||  index  status  ||     Pr  recall |   auc  accuracy\nRirpUoE  ||  21     L       ||  94.4%   56.4% | 46.3%     79.6%\nwtAYHBf  ||                 ||\nj        ||                 ||\nrLsITTK  ||  47     q       ||  66.0%   84.8% | 46.5%     64.9%\nS        ||                 ||\nUumlvod  ||  49     Z       ||  63.1%   99.8% | 94.6%     10.6%\nSmIsO    ||                 ||\nrzXlDqM  ||  32     J       ||  48.8%   33.5% | 30.8%     94.2%\nPyCX     ||                 ||\n```\n\n## Usage and examples\n\nThe main function is `treetable.treetable`. It takes a tree-like structure\nto represent the table. For instance, I could have a sub-table `info` and\na sub-table `metrics`, each one being recursively composed of other sub-tables.\n\nEach extra level of sub-tables use a different separator (by default up to 3\nlevels but you can provide extra separators with the `separators` arguments).\n\nAt the leaf level of the tree, a format string (that can be passed to the\n`format` builtin) can be specified. Let's take an example\n\n```python\nfrom treetable import table, group, leaf\n\nmytable = table([\n    group('info', [\n        leaf('name'),\n        leaf('index')]),\n    group('metrics', align='>', groups=[\n        leaf('speed', '.0f'),\n        leaf('accuracy', '.1%'),\n        leaf('special', '.1%', align='=')]),\n])\n```\n\nThe lines of the table should be provided following a list of nested\ndictionaries with the same shape, for instance:\n\n```python\nlines = [\n    {'info': {'name': 'bob', 'index': 4}, 'metrics':{'speed': 200, 'accuracy': 0.21, 'special': 0.1}},\n    {'info': {'name': 'alice', 'index': 2}, 'metrics':{'speed': 67, 'accuracy': 0.45, 'special': 4.56}},\n]\n```\n\nNow running `print(treetable(lines, groups))` will give you\n\n```\n    info     |         metrics\nname   index | speed  accuracy  special\nbob    4     |   200     21.0%   10.0%\nalice  2     |    67     45.0%   456.0%\n```\n\n`table`, `group` and `leaf` are all node definition functions. They all\naccept the same arguments and differ only in the order of positional arguments.\nWhen defined in a leaf node, the arguments will directly influence\nhow the data is rendered. In group nodes or the root (aka table) node,\nthey will override the default behaviors in descendent leafs. The following\narguments are defined:\n- `key`: access key in the `lines` data structure.\n- `groups` (only for `group` and `table` nodes): list of sub-tables.\n- `display`: display name used, when different to the name to access\n    the value in the `lines` structure.\n- `align`: alignment of text, either '<' (left aligned), '=' (centered) or\n    '>' (right aligned).\n- `wrap`: wrap text beyond a certain number of characters. No smart wrapping,\n    this will wrap exactly at the limit characters by inserting a new line.\n- `missing`: value used when a specific key is not present. Default\n    is `''`.\n- `shorten`: automatically shorten columns names. They are not shorten\n    any more than the width of the underlying column and a long enough prefix\n    is kept to remove any possible ambiguity with other columns in the same\n    sub-tab le.\n\n\nFor instance, when using `shorten=True` with the above table:\n```\n  info   |       metrics\nname   i | spee  accur  specia\nbob    4 |  200  21.0%  10.0%\nalice  2 |   67  45.0%  456.0%\n```\n\n`name` wasn't shortened because `alice` is longer than `name` so there would\nbe no point in shortening it. However `speed` is kept long enough\nto avoid ambiguity with `special`.\n\nWhen setting `wrap=3` for the `name` column we obtain the following:\n```\n info  |       metrics\nnam  i | spee  accur  specia\nbob  4 |  200  21.0%  10.0%\nali  2 |   67  45.0%  456.0%\nce     |\n```\n\nIt is possible to customize the column separators by passing\n`separators` to the `treetable` function. Its default value is\n`['  ', ' | ', '  ||  ']`.\n\n\n### Colors\n\nIt is possible to use ANSI color codes by passing a list of color codes to `treetable()` with the `colors` argument.\nThe i-th line (including headers) will have the color `colors[i % len(colors]`. For instance:\n\n```python\ntreetable(lines, mytable, colors=[\"30\", \"39\"])\n```\n\n<img src=\"misc/colors.png\" alt=\"table generated by treetable with ANSI color codes\" width=\"300\">\n\nFor a good reference on ANSI color codes, checkout [this stackoverflow question](https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences).\n\n## License\n\n`treetable` is distributed under the Unlicense license.\nSee the LICENSE file for more information.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adefossez/treetable", "keywords": "", "license": "Unlicense license", "maintainer": "", "maintainer_email": "", "name": "treetable", "package_url": "https://pypi.org/project/treetable/", "platform": "", "project_url": "https://pypi.org/project/treetable/", "project_urls": {"Homepage": "https://github.com/adefossez/treetable"}, "release_url": "https://pypi.org/project/treetable/0.2.3/", "requires_dist": null, "requires_python": ">=3.6.0", "summary": "Helper to pretty print an ascii table with atree-like structure", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>treetable</h1>\n<p>Helper to pretty print an ascii table with a tree-like structure.</p>\n<h2>Installation and requirements</h2>\n<p><code>treetable</code> requires at least python3.6.</p>\n<pre><code>pip3 install treetable\n</code></pre>\n<h2>Quick example</h2>\n<p><code>treetable</code> allows to easily output complex ascii tables like</p>\n<pre><code>         ||                 ||              metrics\n         ||       info      ||      train     |       test\nname     ||  index  status  ||     Pr  recall |   auc  accuracy\nRirpUoE  ||  21     L       ||  94.4%   56.4% | 46.3%     79.6%\nwtAYHBf  ||                 ||\nj        ||                 ||\nrLsITTK  ||  47     q       ||  66.0%   84.8% | 46.5%     64.9%\nS        ||                 ||\nUumlvod  ||  49     Z       ||  63.1%   99.8% | 94.6%     10.6%\nSmIsO    ||                 ||\nrzXlDqM  ||  32     J       ||  48.8%   33.5% | 30.8%     94.2%\nPyCX     ||                 ||\n</code></pre>\n<h2>Usage and examples</h2>\n<p>The main function is <code>treetable.treetable</code>. It takes a tree-like structure\nto represent the table. For instance, I could have a sub-table <code>info</code> and\na sub-table <code>metrics</code>, each one being recursively composed of other sub-tables.</p>\n<p>Each extra level of sub-tables use a different separator (by default up to 3\nlevels but you can provide extra separators with the <code>separators</code> arguments).</p>\n<p>At the leaf level of the tree, a format string (that can be passed to the\n<code>format</code> builtin) can be specified. Let's take an example</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">treetable</span> <span class=\"kn\">import</span> <span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">group</span><span class=\"p\">,</span> <span class=\"n\">leaf</span>\n\n<span class=\"n\">mytable</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"p\">([</span>\n    <span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s1\">'info'</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n        <span class=\"n\">leaf</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">),</span>\n        <span class=\"n\">leaf</span><span class=\"p\">(</span><span class=\"s1\">'index'</span><span class=\"p\">)]),</span>\n    <span class=\"n\">group</span><span class=\"p\">(</span><span class=\"s1\">'metrics'</span><span class=\"p\">,</span> <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">leaf</span><span class=\"p\">(</span><span class=\"s1\">'speed'</span><span class=\"p\">,</span> <span class=\"s1\">'.0f'</span><span class=\"p\">),</span>\n        <span class=\"n\">leaf</span><span class=\"p\">(</span><span class=\"s1\">'accuracy'</span><span class=\"p\">,</span> <span class=\"s1\">'.1%'</span><span class=\"p\">),</span>\n        <span class=\"n\">leaf</span><span class=\"p\">(</span><span class=\"s1\">'special'</span><span class=\"p\">,</span> <span class=\"s1\">'.1%'</span><span class=\"p\">,</span> <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"s1\">'='</span><span class=\"p\">)]),</span>\n<span class=\"p\">])</span>\n</pre>\n<p>The lines of the table should be provided following a list of nested\ndictionaries with the same shape, for instance:</p>\n<pre><span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'bob'</span><span class=\"p\">,</span> <span class=\"s1\">'index'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span> <span class=\"s1\">'metrics'</span><span class=\"p\">:{</span><span class=\"s1\">'speed'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s1\">'accuracy'</span><span class=\"p\">:</span> <span class=\"mf\">0.21</span><span class=\"p\">,</span> <span class=\"s1\">'special'</span><span class=\"p\">:</span> <span class=\"mf\">0.1</span><span class=\"p\">}},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'info'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'alice'</span><span class=\"p\">,</span> <span class=\"s1\">'index'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"s1\">'metrics'</span><span class=\"p\">:{</span><span class=\"s1\">'speed'</span><span class=\"p\">:</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"s1\">'accuracy'</span><span class=\"p\">:</span> <span class=\"mf\">0.45</span><span class=\"p\">,</span> <span class=\"s1\">'special'</span><span class=\"p\">:</span> <span class=\"mf\">4.56</span><span class=\"p\">}},</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Now running <code>print(treetable(lines, groups))</code> will give you</p>\n<pre><code>    info     |         metrics\nname   index | speed  accuracy  special\nbob    4     |   200     21.0%   10.0%\nalice  2     |    67     45.0%   456.0%\n</code></pre>\n<p><code>table</code>, <code>group</code> and <code>leaf</code> are all node definition functions. They all\naccept the same arguments and differ only in the order of positional arguments.\nWhen defined in a leaf node, the arguments will directly influence\nhow the data is rendered. In group nodes or the root (aka table) node,\nthey will override the default behaviors in descendent leafs. The following\narguments are defined:</p>\n<ul>\n<li><code>key</code>: access key in the <code>lines</code> data structure.</li>\n<li><code>groups</code> (only for <code>group</code> and <code>table</code> nodes): list of sub-tables.</li>\n<li><code>display</code>: display name used, when different to the name to access\nthe value in the <code>lines</code> structure.</li>\n<li><code>align</code>: alignment of text, either '&lt;' (left aligned), '=' (centered) or\n'&gt;' (right aligned).</li>\n<li><code>wrap</code>: wrap text beyond a certain number of characters. No smart wrapping,\nthis will wrap exactly at the limit characters by inserting a new line.</li>\n<li><code>missing</code>: value used when a specific key is not present. Default\nis <code>''</code>.</li>\n<li><code>shorten</code>: automatically shorten columns names. They are not shorten\nany more than the width of the underlying column and a long enough prefix\nis kept to remove any possible ambiguity with other columns in the same\nsub-tab le.</li>\n</ul>\n<p>For instance, when using <code>shorten=True</code> with the above table:</p>\n<pre><code>  info   |       metrics\nname   i | spee  accur  specia\nbob    4 |  200  21.0%  10.0%\nalice  2 |   67  45.0%  456.0%\n</code></pre>\n<p><code>name</code> wasn't shortened because <code>alice</code> is longer than <code>name</code> so there would\nbe no point in shortening it. However <code>speed</code> is kept long enough\nto avoid ambiguity with <code>special</code>.</p>\n<p>When setting <code>wrap=3</code> for the <code>name</code> column we obtain the following:</p>\n<pre><code> info  |       metrics\nnam  i | spee  accur  specia\nbob  4 |  200  21.0%  10.0%\nali  2 |   67  45.0%  456.0%\nce     |\n</code></pre>\n<p>It is possible to customize the column separators by passing\n<code>separators</code> to the <code>treetable</code> function. Its default value is\n<code>[' ', ' | ', ' || ']</code>.</p>\n<h3>Colors</h3>\n<p>It is possible to use ANSI color codes by passing a list of color codes to <code>treetable()</code> with the <code>colors</code> argument.\nThe i-th line (including headers) will have the color <code>colors[i % len(colors]</code>. For instance:</p>\n<pre><span class=\"n\">treetable</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">,</span> <span class=\"n\">mytable</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"30\"</span><span class=\"p\">,</span> <span class=\"s2\">\"39\"</span><span class=\"p\">])</span>\n</pre>\n<img alt=\"table generated by treetable with ANSI color codes\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ac96be4fc98c5c8b6771dd9de7e540d355d87bf/6d6973632f636f6c6f72732e706e67\" width=\"300\">\n<p>For a good reference on ANSI color codes, checkout <a href=\"https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences\" rel=\"nofollow\">this stackoverflow question</a>.</p>\n<h2>License</h2>\n<p><code>treetable</code> is distributed under the Unlicense license.\nSee the LICENSE file for more information.</p>\n\n          </div>"}, "last_serial": 5913726, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9b53e5579a4856b27a049fcbb6e124ed", "sha256": "40aa43e13cda03fdd338eae5144c74ba9795d3c5e0e5ddc3bc4ddf973c05e7bb"}, "downloads": -1, "filename": "treetable-0.1-py3.7.egg", "has_sig": false, "md5_digest": "9b53e5579a4856b27a049fcbb6e124ed", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6.0", "size": 6685, "upload_time": "2019-02-01T17:41:05", "upload_time_iso_8601": "2019-02-01T17:41:05.918778Z", "url": "https://files.pythonhosted.org/packages/63/0b/7a8afa210fd399882a810a031b858f75233d897cf2ce79b9dd8a3f0aae0a/treetable-0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1d1e3bcb37e5be222fd622a3789e9a3", "sha256": "08fb18a3cab3529592164b813c3ccb315d6788debc3f69b56c1586ed924b1426"}, "downloads": -1, "filename": "treetable-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c1d1e3bcb37e5be222fd622a3789e9a3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7030, "upload_time": "2019-02-01T17:41:03", "upload_time_iso_8601": "2019-02-01T17:41:03.195285Z", "url": "https://files.pythonhosted.org/packages/52/67/ce7d7c98e685c98292e72f1927442e3b336d67ee8e75d914936e65ffc434/treetable-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3eb5cd33cd5417a2c07c9e921e9195bf", "sha256": "c73a0d8ff6b91dca4ac6f5664ce95622f77343e4388be9ebeac73bbbee41981a"}, "downloads": -1, "filename": "treetable-0.1.tar.gz", "has_sig": false, "md5_digest": "3eb5cd33cd5417a2c07c9e921e9195bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5939, "upload_time": "2019-02-01T17:41:08", "upload_time_iso_8601": "2019-02-01T17:41:08.092245Z", "url": "https://files.pythonhosted.org/packages/72/d1/c227a1ad1377c8ad57b177c6e2302f0285b4ba162e7ea0e47e14092ca6e5/treetable-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "213f07b89f5c0d9b3e7a953d47eae7ae", "sha256": "f09fd68a6dcb58fd973ecdb68b7ac58408ec1a9ec7aafb99f9e6576832b08764"}, "downloads": -1, "filename": "treetable-0.2.tar.gz", "has_sig": false, "md5_digest": "213f07b89f5c0d9b3e7a953d47eae7ae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5994, "upload_time": "2019-03-08T18:47:28", "upload_time_iso_8601": "2019-03-08T18:47:28.331690Z", "url": "https://files.pythonhosted.org/packages/92/fe/ebb2832b60e98b6dce354701312ec931f691fbc887eb1a92563de37211ad/treetable-0.2.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "cc2b09aefe2bd5acc5ed00be973e729e", "sha256": "fd0a2736d4c6e847246248d4520541934dfd25d202d99a039adb5676d9b44992"}, "downloads": -1, "filename": "treetable-0.2.2.tar.gz", "has_sig": false, "md5_digest": "cc2b09aefe2bd5acc5ed00be973e729e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6090, "upload_time": "2019-04-01T21:51:57", "upload_time_iso_8601": "2019-04-01T21:51:57.283954Z", "url": "https://files.pythonhosted.org/packages/f3/04/35a141affa9f1c50d07166d64a172ffc04d456bdefb542419862d3c47aec/treetable-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "0eb7c9a64391f254b11bd46606405101", "sha256": "3cda7db47bf46309f156ea46599602a1d07b44f9c9d7d3d752e6013e795fb13f"}, "downloads": -1, "filename": "treetable-0.2.3.tar.gz", "has_sig": false, "md5_digest": "0eb7c9a64391f254b11bd46606405101", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6371, "upload_time": "2019-10-01T16:56:41", "upload_time_iso_8601": "2019-10-01T16:56:41.101033Z", "url": "https://files.pythonhosted.org/packages/b2/e5/f79fc97606be8763bc5a4a2be026a55e7e09f8c82634faa1c1cd65cee02a/treetable-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0eb7c9a64391f254b11bd46606405101", "sha256": "3cda7db47bf46309f156ea46599602a1d07b44f9c9d7d3d752e6013e795fb13f"}, "downloads": -1, "filename": "treetable-0.2.3.tar.gz", "has_sig": false, "md5_digest": "0eb7c9a64391f254b11bd46606405101", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6371, "upload_time": "2019-10-01T16:56:41", "upload_time_iso_8601": "2019-10-01T16:56:41.101033Z", "url": "https://files.pythonhosted.org/packages/b2/e5/f79fc97606be8763bc5a4a2be026a55e7e09f8c82634faa1c1cd65cee02a/treetable-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:32 2020"}