{"info": {"author": "Cameron Simpson", "author_email": "cs@cskk.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "*Latest release 20200229*:\nNew TaggedPath.modified property aliasing the TagSet.modified attribute.\nls: new -d option to treat directories like files (do not recurse), aiding reporting of tags for a directory.\nfind,ls subcommands: work off the realpath of the supplied top level path.\nTag: now subclasses namedtuple.\nRewrite rpaths() to use scandir and to also yield (is_dir,path) tuples.\nTagSet, Tag, TagChoice moved into new cs.tagset module for reuse.\njson_import: make --prefix mandatory, is \".\" as separator if not empty.\nMove filename regexp rules to [filename_rules] config section.\nNew CascadeRule for representing a \"target_tag_name = tag_name1 tag_name2...\" config rules.\nautotag: include the cascade rules in the autotagging after the filename rules.\n\nSimple filesystem based file tagging\nand the associated `fstags` command line script.\n\nWhy `fstags`?\nBy storing the tags in a separate file we:\n* can store tags without modifying a file\n* do no need to know the file's format,\n  whether that supports metadata or not\n* can process tags on any kind of file\n* because tags are inherited from parent directories,\n  tags can be automatically acquired merely by arranging your file tree\n\nTags are stored in the file `.fstags` in each directory;\nthere is a line for each entry in the directory with tags\nconsisting of the directory entry name and the associated tags.\n\nTags may be \"bare\", or have a value.\nIf there is a value it is expressed with an equals (`'='`)\nfollowed by the JSON encoding of the value.\n\nThe tags for a file are the union of its direct tags\nand all relevant ancestor tags,\nwith priority given to tags closer to the file.\n\nFor example, a media file for a television episode with the pathname\n`/path/to/series-name/season-02/episode-name--s02e03--something.mp4`\nmight obtain the tags:\n\n    series.title=\"Series Full Name\"\n    season=2\n    sf\n    episode=3\n    episode.title=\"Full Episode Title\"\n\nfrom the following `.fstags` entries:\n* tag file `/path/to/.fstags`:\n  `series-name sf series.title=\"Series Full Name\"`\n* tag file `/path/to/series-name/.fstags`:\n  `season-02 season=2`\n* tag file `/path/to/series-name/season-02/.fstags`:\n  `episode-name--s02e03--something.mp4 episode=3 episode.title=\"Full Episode Title\"`\n\n## Class `CascadeRule`\n\nA cascade rule of possible source tag names to provide a target tag.\n\n## Class `FSTags(cs.resources.MultiOpenMixin)`\n\nA class to examine filesystem tags.\n\n## Class `FSTagsCommand(cs.cmdutils.BaseCommand)`\n\n`fstags` main command line class.\n\n\nCommand line usage:\n\n    Usage:\n        FSTagsCommand autotag paths...\n            Tag paths based on rules from the rc file.\n        FSTagsCommand cp [-fnv] srcpath dstpath\n        FSTagsCommand cp [-fnv] srcpaths... dstdirpath\n            Copy files and their tags into targetdir.\n            -f  Force: remove destination if it exists.\n            -n  No remove: fail if the destination exists.\n            -v  Verbose: show copied files.\n        FSTagsCommand scrub paths...\n            Remove all tags for missing paths.\n            If a path is a directory, scrub the immediate paths in the directory.\n        FSTagsCommand find [--for-rsync] path {tag[=value]|-tag}...\n            List files from path matching all the constraints.\n            -d          treat directories like files (do no recurse).\n            --direct    Use direct tags instead of all tags.\n            --for-rsync Instead of listing matching paths, emit a\n                        sequence of rsync(1) patterns suitable for use with\n                        --include-from in order to do a selective rsync of the\n                        matched paths.\n            -o output_format\n                        Use output_format as a Python format string to lay out\n                        the listing.\n                        Default: {filepath}\n        FSTagsCommand json_import --prefix=tag_prefix {-|path} {-|tags.json}\n            Apply JSON data to path.\n            A path named \"-\" indicates that paths should be read from\n            the standard input.\n            The JSON tag data come from the file \"tags.json\"; the name\n            \"-\" indicates that the JSON data should be read from the\n            standard input.\n        FSTagsCommand ln [-fnv] srcpath dstpath\n        FSTagsCommand ln [-fnv] srcpaths... dstdirpath\n            Link files and their tags into targetdir.\n            -f  Force: remove destination if it exists.\n            -n  No remove: fail if the destination exists.\n            -v  Verbose: show linked files.\n        FSTagsCommand ls [--direct] [-o output_format] [paths...]\n            List files from paths and their tags.\n            --direct    List direct tags instead of all tags.\n            -o output_format\n                        Use output_format as a Python format string to lay out\n                        the listing.\n                        Default: {filepath_encoded} {tags}\n        FSTagsCommand mv [-fnv] srcpath dstpath\n        FSTagsCommand mv [-fnv] srcpaths... dstdirpath\n            Move files and their tags into targetdir.\n            -f  Force: remove destination if it exists.\n            -n  No remove: fail if the destination exists.\n            -v  Verbose: show moved files.\n        FSTagsCommand tag {-|path} {tag[=value]|-tag}...\n            Associate tags with a path.\n            With the form \"-tag\", remove the tag from the immediate tags.\n            A path named \"-\" indicates that paths should be read from the\n            standard input.\n        FSTagsCommand tagpaths {tag[=value]|-tag} {-|paths...}\n            Associate a tag with multiple paths.\n            With the form \"-tag\", remove the tag from the immediate tags.\n            A single path named \"-\" indicates that paths should be read\n            from the standard input.\n        FSTagsCommand test [--direct] path {tag[=value]|-tag}...\n            Test whether the path matches all the constraints.\n            --direct    Use direct tags instead of all tags.\n        FSTagsCommand xattr_import {-|paths...}\n            Import tag information from extended attributes.\n        FSTagsCommand xattr_export {-|paths...}\n            Update extended attributes from tags.\n\n## Class `FSTagsConfig`\n\nA configuration for fstags.\n\n### Method `FSTagsConfig.__init__(self, rcfilepath=None)`\n\nInitialise the config.\n\nParameters:\n* `rcfilepath`: the path to the confguration file\n  If `None`, default to `'~/.fstagsrc'` (from `RCFILE`).\n\n## Function `get_xattr_value(filepath, xattr_name)`\n\nRead the extended attribute `xattr_name` of `filepath`.\nReturn the extended attribute value as a string,\nor `None` if the attribute does not exist.\n\nParameters:\n* `filepath`: the filesystem path to update\n* `xattr_name`: the extended attribute to obtain\n  if this is a `str`, the attribute is the UTF-8 encoding of that name.\n\n## Class `HasFSTagsMixin`\n\nMixin providing a `.fstags` property.\n\n## Function `main(argv=None)`\n\nCommand line mode.\n\n## Class `RegexpTagRule`\n\nA regular expression based `Tag` rule.\n\n## Function `rfilepaths(path, name_selector=None, U=None)`\n\nGenerator yielding pathnames of files found under `path`.\n\n## Function `rpaths(path, *, yield_dirs=False, name_selector=None, U=None)`\n\nRecurse over `path`, yielding `(is_dir,subpath)`\nfor all selected subpaths.\n\n## Function `rsync_patterns(paths, top_path)`\n\nReturn a list of rsync include lines\nsuitable for use with the `--include-from` option.\n\n## Class `TagFile(HasFSTagsMixin)`\n\nA reference to a specific file containing tags.\n\nThis manages a mapping of `name` => `TagSet`,\nitself a mapping of tag name => tag value.\n\n## Class `TagFileEntry(builtins.tuple)`\n\nTagFileEntry(tagfile, name)\n\n## Class `TaggedPath(HasFSTagsMixin)`\n\nClass to manipulate the tags for a specific path.\n\n## Function `update_xattr_value(filepath, xattr_name, new_xattr_value)`\n\nUpdate the extended attributes of `filepath`\nwith `new_xattr_value` for `xattr_name`.\nReturn the previous value, or `None` if the attribute was missing.\n\nWe avoid calling `os.setxattr` if the value will not change.\n\nParameters:\n* `filepath`: the filesystem path to update\n* `xattr_name`: the extended attribute to update;\n  if this is a `str`, the attribute is the UTF-8 encoding of that name.\n* `new_xattr_value`: the new extended attribute value, a `str`\n  which should be the transcription of `TagSet`\n  i.e. `str(tagset)`\n\n## Function `verbose(msg, *a)`\n\nEmit message if in verbose mode.\n\n\n\n# Release Log\n\n*Release 20200229*:\nNew TaggedPath.modified property aliasing the TagSet.modified attribute.\nls: new -d option to treat directories like files (do not recurse), aiding reporting of tags for a directory.\nfind,ls subcommands: work off the realpath of the supplied top level path.\nTag: now subclasses namedtuple.\nRewrite rpaths() to use scandir and to also yield (is_dir,path) tuples.\nTagSet, Tag, TagChoice moved into new cs.tagset module for reuse.\njson_import: make --prefix mandatory, is \".\" as separator if not empty.\nMove filename regexp rules to [filename_rules] config section.\nNew CascadeRule for representing a \"target_tag_name = tag_name1 tag_name2...\" config rules.\nautotag: include the cascade rules in the autotagging after the filename rules.\n\n*Release 20200210*:\nNew \"json_import\" subcommand to import a JSON dict as tags, initial use case to load the metadata from youtube-dl.\nNew \"scrub\" command line operation, to purge tags of paths which do not exist.\nNew \"cp\", \"ln\" and \"mv\" subcommands to copy/link/move paths and take their tags with them.\nNew \"test\" subcommand to test paths against tag criteria, useful for find and scripts.\nSmall bugfixes.\n\n*Release 20200130*:\nNew FSTagsConfig class which parses the .fstagsrc as a .ini file; related adjustments.\nNew HasFSTagsMixin presenting a settable .fstags property with a shared default.\nNew xattr_import and xattr_export subcommands, remove implicit xattr access/update from other operations.\nNew TagSet.__len__ returning the number of tags.\nAdd \"-\" support for stdin to \"tag\" and \"tagpaths\" subcommands.\n\n*Release 20200113.2*:\nFSTagsCommand docstring tweak.\n\n*Release 20200113.1*:\nSmall docstring updates.\n\n*Release 20200113*:\nMirror tags to user.cs.fstags xattr to honour Linux namespace requirements. Add \"filesize\" to available tag string format (-o option). Small bugfixes.\n\n*Release 20191230*:\nCommand line: new \"find\" command to search a file tree based on tags.\nCommand line: new \"mv\" command to move a file and its tags.\nCommand line: Python string formats for \"find\" and \"ls\" output.\nTaggedPath.autotag: new optional `no_save` parameter, default False, to suppress update of the associated .fstags file.\nInital and untested \"mirror tags to xattrs\" support.\n\n*Release 20191201*:\nNew \"edit\" subcommand to rename files and edit tags.\n\n*Release 20191130.1*:\nInitial release: fstags, filesystem based tagging utility.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all", "keywords": "python3", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "cs.fstags", "package_url": "https://pypi.org/project/cs.fstags/", "platform": "", "project_url": "https://pypi.org/project/cs.fstags/", "project_urls": {"Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all"}, "release_url": "https://pypi.org/project/cs.fstags/20200229/", "requires_dist": null, "requires_python": "", "summary": "Simple filesystem based file tagging and the associated `fstags` command line script.", "version": "20200229", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Latest release 20200229</em>:\nNew TaggedPath.modified property aliasing the TagSet.modified attribute.\nls: new -d option to treat directories like files (do not recurse), aiding reporting of tags for a directory.\nfind,ls subcommands: work off the realpath of the supplied top level path.\nTag: now subclasses namedtuple.\nRewrite rpaths() to use scandir and to also yield (is_dir,path) tuples.\nTagSet, Tag, TagChoice moved into new cs.tagset module for reuse.\njson_import: make --prefix mandatory, is \".\" as separator if not empty.\nMove filename regexp rules to [filename_rules] config section.\nNew CascadeRule for representing a \"target_tag_name = tag_name1 tag_name2...\" config rules.\nautotag: include the cascade rules in the autotagging after the filename rules.</p>\n<p>Simple filesystem based file tagging\nand the associated <code>fstags</code> command line script.</p>\n<p>Why <code>fstags</code>?\nBy storing the tags in a separate file we:</p>\n<ul>\n<li>can store tags without modifying a file</li>\n<li>do no need to know the file's format,\nwhether that supports metadata or not</li>\n<li>can process tags on any kind of file</li>\n<li>because tags are inherited from parent directories,\ntags can be automatically acquired merely by arranging your file tree</li>\n</ul>\n<p>Tags are stored in the file <code>.fstags</code> in each directory;\nthere is a line for each entry in the directory with tags\nconsisting of the directory entry name and the associated tags.</p>\n<p>Tags may be \"bare\", or have a value.\nIf there is a value it is expressed with an equals (<code>'='</code>)\nfollowed by the JSON encoding of the value.</p>\n<p>The tags for a file are the union of its direct tags\nand all relevant ancestor tags,\nwith priority given to tags closer to the file.</p>\n<p>For example, a media file for a television episode with the pathname\n<code>/path/to/series-name/season-02/episode-name--s02e03--something.mp4</code>\nmight obtain the tags:</p>\n<pre><code>series.title=\"Series Full Name\"\nseason=2\nsf\nepisode=3\nepisode.title=\"Full Episode Title\"\n</code></pre>\n<p>from the following <code>.fstags</code> entries:</p>\n<ul>\n<li>tag file <code>/path/to/.fstags</code>:\n<code>series-name sf series.title=\"Series Full Name\"</code></li>\n<li>tag file <code>/path/to/series-name/.fstags</code>:\n<code>season-02 season=2</code></li>\n<li>tag file <code>/path/to/series-name/season-02/.fstags</code>:\n<code>episode-name--s02e03--something.mp4 episode=3 episode.title=\"Full Episode Title\"</code></li>\n</ul>\n<h2>Class <code>CascadeRule</code></h2>\n<p>A cascade rule of possible source tag names to provide a target tag.</p>\n<h2>Class <code>FSTags(cs.resources.MultiOpenMixin)</code></h2>\n<p>A class to examine filesystem tags.</p>\n<h2>Class <code>FSTagsCommand(cs.cmdutils.BaseCommand)</code></h2>\n<p><code>fstags</code> main command line class.</p>\n<p>Command line usage:</p>\n<pre><code>Usage:\n    FSTagsCommand autotag paths...\n        Tag paths based on rules from the rc file.\n    FSTagsCommand cp [-fnv] srcpath dstpath\n    FSTagsCommand cp [-fnv] srcpaths... dstdirpath\n        Copy files and their tags into targetdir.\n        -f  Force: remove destination if it exists.\n        -n  No remove: fail if the destination exists.\n        -v  Verbose: show copied files.\n    FSTagsCommand scrub paths...\n        Remove all tags for missing paths.\n        If a path is a directory, scrub the immediate paths in the directory.\n    FSTagsCommand find [--for-rsync] path {tag[=value]|-tag}...\n        List files from path matching all the constraints.\n        -d          treat directories like files (do no recurse).\n        --direct    Use direct tags instead of all tags.\n        --for-rsync Instead of listing matching paths, emit a\n                    sequence of rsync(1) patterns suitable for use with\n                    --include-from in order to do a selective rsync of the\n                    matched paths.\n        -o output_format\n                    Use output_format as a Python format string to lay out\n                    the listing.\n                    Default: {filepath}\n    FSTagsCommand json_import --prefix=tag_prefix {-|path} {-|tags.json}\n        Apply JSON data to path.\n        A path named \"-\" indicates that paths should be read from\n        the standard input.\n        The JSON tag data come from the file \"tags.json\"; the name\n        \"-\" indicates that the JSON data should be read from the\n        standard input.\n    FSTagsCommand ln [-fnv] srcpath dstpath\n    FSTagsCommand ln [-fnv] srcpaths... dstdirpath\n        Link files and their tags into targetdir.\n        -f  Force: remove destination if it exists.\n        -n  No remove: fail if the destination exists.\n        -v  Verbose: show linked files.\n    FSTagsCommand ls [--direct] [-o output_format] [paths...]\n        List files from paths and their tags.\n        --direct    List direct tags instead of all tags.\n        -o output_format\n                    Use output_format as a Python format string to lay out\n                    the listing.\n                    Default: {filepath_encoded} {tags}\n    FSTagsCommand mv [-fnv] srcpath dstpath\n    FSTagsCommand mv [-fnv] srcpaths... dstdirpath\n        Move files and their tags into targetdir.\n        -f  Force: remove destination if it exists.\n        -n  No remove: fail if the destination exists.\n        -v  Verbose: show moved files.\n    FSTagsCommand tag {-|path} {tag[=value]|-tag}...\n        Associate tags with a path.\n        With the form \"-tag\", remove the tag from the immediate tags.\n        A path named \"-\" indicates that paths should be read from the\n        standard input.\n    FSTagsCommand tagpaths {tag[=value]|-tag} {-|paths...}\n        Associate a tag with multiple paths.\n        With the form \"-tag\", remove the tag from the immediate tags.\n        A single path named \"-\" indicates that paths should be read\n        from the standard input.\n    FSTagsCommand test [--direct] path {tag[=value]|-tag}...\n        Test whether the path matches all the constraints.\n        --direct    Use direct tags instead of all tags.\n    FSTagsCommand xattr_import {-|paths...}\n        Import tag information from extended attributes.\n    FSTagsCommand xattr_export {-|paths...}\n        Update extended attributes from tags.\n</code></pre>\n<h2>Class <code>FSTagsConfig</code></h2>\n<p>A configuration for fstags.</p>\n<h3>Method <code>FSTagsConfig.__init__(self, rcfilepath=None)</code></h3>\n<p>Initialise the config.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>rcfilepath</code>: the path to the confguration file\nIf <code>None</code>, default to <code>'~/.fstagsrc'</code> (from <code>RCFILE</code>).</li>\n</ul>\n<h2>Function <code>get_xattr_value(filepath, xattr_name)</code></h2>\n<p>Read the extended attribute <code>xattr_name</code> of <code>filepath</code>.\nReturn the extended attribute value as a string,\nor <code>None</code> if the attribute does not exist.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>filepath</code>: the filesystem path to update</li>\n<li><code>xattr_name</code>: the extended attribute to obtain\nif this is a <code>str</code>, the attribute is the UTF-8 encoding of that name.</li>\n</ul>\n<h2>Class <code>HasFSTagsMixin</code></h2>\n<p>Mixin providing a <code>.fstags</code> property.</p>\n<h2>Function <code>main(argv=None)</code></h2>\n<p>Command line mode.</p>\n<h2>Class <code>RegexpTagRule</code></h2>\n<p>A regular expression based <code>Tag</code> rule.</p>\n<h2>Function <code>rfilepaths(path, name_selector=None, U=None)</code></h2>\n<p>Generator yielding pathnames of files found under <code>path</code>.</p>\n<h2>Function <code>rpaths(path, *, yield_dirs=False, name_selector=None, U=None)</code></h2>\n<p>Recurse over <code>path</code>, yielding <code>(is_dir,subpath)</code>\nfor all selected subpaths.</p>\n<h2>Function <code>rsync_patterns(paths, top_path)</code></h2>\n<p>Return a list of rsync include lines\nsuitable for use with the <code>--include-from</code> option.</p>\n<h2>Class <code>TagFile(HasFSTagsMixin)</code></h2>\n<p>A reference to a specific file containing tags.</p>\n<p>This manages a mapping of <code>name</code> =&gt; <code>TagSet</code>,\nitself a mapping of tag name =&gt; tag value.</p>\n<h2>Class <code>TagFileEntry(builtins.tuple)</code></h2>\n<p>TagFileEntry(tagfile, name)</p>\n<h2>Class <code>TaggedPath(HasFSTagsMixin)</code></h2>\n<p>Class to manipulate the tags for a specific path.</p>\n<h2>Function <code>update_xattr_value(filepath, xattr_name, new_xattr_value)</code></h2>\n<p>Update the extended attributes of <code>filepath</code>\nwith <code>new_xattr_value</code> for <code>xattr_name</code>.\nReturn the previous value, or <code>None</code> if the attribute was missing.</p>\n<p>We avoid calling <code>os.setxattr</code> if the value will not change.</p>\n<p>Parameters:</p>\n<ul>\n<li><code>filepath</code>: the filesystem path to update</li>\n<li><code>xattr_name</code>: the extended attribute to update;\nif this is a <code>str</code>, the attribute is the UTF-8 encoding of that name.</li>\n<li><code>new_xattr_value</code>: the new extended attribute value, a <code>str</code>\nwhich should be the transcription of <code>TagSet</code>\ni.e. <code>str(tagset)</code></li>\n</ul>\n<h2>Function <code>verbose(msg, *a)</code></h2>\n<p>Emit message if in verbose mode.</p>\n<h1>Release Log</h1>\n<p><em>Release 20200229</em>:\nNew TaggedPath.modified property aliasing the TagSet.modified attribute.\nls: new -d option to treat directories like files (do not recurse), aiding reporting of tags for a directory.\nfind,ls subcommands: work off the realpath of the supplied top level path.\nTag: now subclasses namedtuple.\nRewrite rpaths() to use scandir and to also yield (is_dir,path) tuples.\nTagSet, Tag, TagChoice moved into new cs.tagset module for reuse.\njson_import: make --prefix mandatory, is \".\" as separator if not empty.\nMove filename regexp rules to [filename_rules] config section.\nNew CascadeRule for representing a \"target_tag_name = tag_name1 tag_name2...\" config rules.\nautotag: include the cascade rules in the autotagging after the filename rules.</p>\n<p><em>Release 20200210</em>:\nNew \"json_import\" subcommand to import a JSON dict as tags, initial use case to load the metadata from youtube-dl.\nNew \"scrub\" command line operation, to purge tags of paths which do not exist.\nNew \"cp\", \"ln\" and \"mv\" subcommands to copy/link/move paths and take their tags with them.\nNew \"test\" subcommand to test paths against tag criteria, useful for find and scripts.\nSmall bugfixes.</p>\n<p><em>Release 20200130</em>:\nNew FSTagsConfig class which parses the .fstagsrc as a .ini file; related adjustments.\nNew HasFSTagsMixin presenting a settable .fstags property with a shared default.\nNew xattr_import and xattr_export subcommands, remove implicit xattr access/update from other operations.\nNew TagSet.<strong>len</strong> returning the number of tags.\nAdd \"-\" support for stdin to \"tag\" and \"tagpaths\" subcommands.</p>\n<p><em>Release 20200113.2</em>:\nFSTagsCommand docstring tweak.</p>\n<p><em>Release 20200113.1</em>:\nSmall docstring updates.</p>\n<p><em>Release 20200113</em>:\nMirror tags to user.cs.fstags xattr to honour Linux namespace requirements. Add \"filesize\" to available tag string format (-o option). Small bugfixes.</p>\n<p><em>Release 20191230</em>:\nCommand line: new \"find\" command to search a file tree based on tags.\nCommand line: new \"mv\" command to move a file and its tags.\nCommand line: Python string formats for \"find\" and \"ls\" output.\nTaggedPath.autotag: new optional <code>no_save</code> parameter, default False, to suppress update of the associated .fstags file.\nInital and untested \"mirror tags to xattrs\" support.</p>\n<p><em>Release 20191201</em>:\nNew \"edit\" subcommand to rename files and edit tags.</p>\n<p><em>Release 20191130.1</em>:\nInitial release: fstags, filesystem based tagging utility.</p>\n\n          </div>"}, "last_serial": 6723085, "releases": {"20191130.1": [{"comment_text": "", "digests": {"md5": "58c35f76da0bcbc2788537ddf1258f88", "sha256": "bdc1f76e82043695fe893096363ca50f3e8ab4de3c66fb4b38e4a0a7cc373a70"}, "downloads": -1, "filename": "cs.fstags-20191130.1.tar.gz", "has_sig": false, "md5_digest": "58c35f76da0bcbc2788537ddf1258f88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8438, "upload_time": "2019-11-30T10:12:07", "upload_time_iso_8601": "2019-11-30T10:12:07.735835Z", "url": "https://files.pythonhosted.org/packages/a9/63/6e1d54cd9299b653dea1ec9b036edd2d5bc3c9cfb6df2b8d5839eaf44213/cs.fstags-20191130.1.tar.gz", "yanked": false}], "20191201": [{"comment_text": "", "digests": {"md5": "c34ce629dbbbf73fdf78d1add575d084", "sha256": "4e7d93f1cd7eed6abdb3fb0a7cc2cdd63e0638e230c91c1c63eee597e0fee44c"}, "downloads": -1, "filename": "cs.fstags-20191201.tar.gz", "has_sig": false, "md5_digest": "c34ce629dbbbf73fdf78d1add575d084", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9196, "upload_time": "2019-12-01T02:15:57", "upload_time_iso_8601": "2019-12-01T02:15:57.126839Z", "url": "https://files.pythonhosted.org/packages/23/2e/837f6f6f6adf5aae7a91c33e759b5ae5c21e87e50c159a4ed13d6192ab1f/cs.fstags-20191201.tar.gz", "yanked": false}], "20191230": [{"comment_text": "", "digests": {"md5": "fca0707782a89195ffc20eafbbee4fe8", "sha256": "0c882083e512537e807204f2598c014570fc2b79fbd74dd09f85529d27368a0d"}, "downloads": -1, "filename": "cs.fstags-20191230.tar.gz", "has_sig": false, "md5_digest": "fca0707782a89195ffc20eafbbee4fe8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15433, "upload_time": "2019-12-30T02:19:55", "upload_time_iso_8601": "2019-12-30T02:19:55.738986Z", "url": "https://files.pythonhosted.org/packages/80/32/d6e6b7293cd143278113bf1ceaabbb39400fb7f6d3b814fe54fcce309869/cs.fstags-20191230.tar.gz", "yanked": false}], "20200113": [{"comment_text": "", "digests": {"md5": "b1572cabf7a561c1a752840ec2da99c9", "sha256": "57859e3a3c42983c7e9c1264c1de66bb6726b7aba5691a45bb9937d0f605eddc"}, "downloads": -1, "filename": "cs.fstags-20200113.tar.gz", "has_sig": false, "md5_digest": "b1572cabf7a561c1a752840ec2da99c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15744, "upload_time": "2020-01-12T21:14:54", "upload_time_iso_8601": "2020-01-12T21:14:54.754328Z", "url": "https://files.pythonhosted.org/packages/69/30/0065cf3e891d9daaed0388089753a22ce5dcd41743f159f46f7bbf7987e8/cs.fstags-20200113.tar.gz", "yanked": false}], "20200113.1": [{"comment_text": "", "digests": {"md5": "579bb4d8089810c6f8d3da63f5af2920", "sha256": "c1cb890f27e6836caeb4db77daa8403356215bdf839ddb216301a4d17908625b"}, "downloads": -1, "filename": "cs.fstags-20200113.1.tar.gz", "has_sig": false, "md5_digest": "579bb4d8089810c6f8d3da63f5af2920", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16518, "upload_time": "2020-01-13T03:56:11", "upload_time_iso_8601": "2020-01-13T03:56:11.390917Z", "url": "https://files.pythonhosted.org/packages/26/e6/5dbbfc8052d01a49662727a85f65b4139c976aedf539d375fa960b8cff1e/cs.fstags-20200113.1.tar.gz", "yanked": false}], "20200113.2": [{"comment_text": "", "digests": {"md5": "37e00d057fd11ad6ceee8c64041735eb", "sha256": "ea052feb2db9ba8e475104938bdcea9375352df057ca5795b37fc4d2a2432f6f"}, "downloads": -1, "filename": "cs.fstags-20200113.2.tar.gz", "has_sig": false, "md5_digest": "37e00d057fd11ad6ceee8c64041735eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16699, "upload_time": "2020-01-13T04:07:27", "upload_time_iso_8601": "2020-01-13T04:07:27.892553Z", "url": "https://files.pythonhosted.org/packages/d2/79/33f30e33c398b18beaa2a4bb46f05600a0a9feb4dc96da15eecd7a10b003/cs.fstags-20200113.2.tar.gz", "yanked": false}], "20200130": [{"comment_text": "", "digests": {"md5": "3e500f1b4f4340301a1672dd2324f4ea", "sha256": "1cf0f0e8a5fa2156a9025976606876bd85bfda95614864c2f0fd642636945dcf"}, "downloads": -1, "filename": "cs.fstags-20200130.tar.gz", "has_sig": false, "md5_digest": "3e500f1b4f4340301a1672dd2324f4ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19818, "upload_time": "2020-01-30T06:19:48", "upload_time_iso_8601": "2020-01-30T06:19:48.699700Z", "url": "https://files.pythonhosted.org/packages/7d/3c/e07428f21cec2b3275b11a93271451c45a41806a2b662ac496ae85099b1c/cs.fstags-20200130.tar.gz", "yanked": false}], "20200210": [{"comment_text": "", "digests": {"md5": "19010b29c6f4c28961790d81822a27b4", "sha256": "989f30dea507711adaf1df7e152f87a7d1ce624447b2d30c6c65688f27a606cc"}, "downloads": -1, "filename": "cs.fstags-20200210.tar.gz", "has_sig": false, "md5_digest": "19010b29c6f4c28961790d81822a27b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22662, "upload_time": "2020-02-10T10:57:44", "upload_time_iso_8601": "2020-02-10T10:57:44.473168Z", "url": "https://files.pythonhosted.org/packages/e8/01/24b154e176f53184c5db50d728e1243248a348a76cebdb07982e3a1e44e4/cs.fstags-20200210.tar.gz", "yanked": false}], "20200229": [{"comment_text": "", "digests": {"md5": "c8a934a38ba84ef8b2cb9068b9612939", "sha256": "30a7b3e2b834ee9dd40d2306bd3c84f57b4088170031235631e1a13fde5e95df"}, "downloads": -1, "filename": "cs.fstags-20200229.tar.gz", "has_sig": false, "md5_digest": "c8a934a38ba84ef8b2cb9068b9612939", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20648, "upload_time": "2020-02-29T04:58:21", "upload_time_iso_8601": "2020-02-29T04:58:21.963159Z", "url": "https://files.pythonhosted.org/packages/e4/14/bc166341e35d0a385946a6c66f3ef77996be20069bd3cc70815a514e7d86/cs.fstags-20200229.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8a934a38ba84ef8b2cb9068b9612939", "sha256": "30a7b3e2b834ee9dd40d2306bd3c84f57b4088170031235631e1a13fde5e95df"}, "downloads": -1, "filename": "cs.fstags-20200229.tar.gz", "has_sig": false, "md5_digest": "c8a934a38ba84ef8b2cb9068b9612939", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20648, "upload_time": "2020-02-29T04:58:21", "upload_time_iso_8601": "2020-02-29T04:58:21.963159Z", "url": "https://files.pythonhosted.org/packages/e4/14/bc166341e35d0a385946a6c66f3ef77996be20069bd3cc70815a514e7d86/cs.fstags-20200229.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:50 2020"}