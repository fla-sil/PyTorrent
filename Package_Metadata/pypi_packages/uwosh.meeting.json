{"info": {"author": "T. Kim Nguyen", "author_email": "nguyen@uwosh.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Plone", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Topic :: Communications", "Topic :: Office/Business :: Groupware"], "description": "This product helps you better manage all information related to meetings.\n\n\nBefore:\n-------\n\nNormally, meetings seem to happen like this:\n\n- someone sends around an email on a topic, asking for a good date and time\n  that works for everyone\n\n- you get an email with the date and time that was agreed to; a location is\n  still to be determined\n\n- you get an email with the meeting location\n\n- eventually an agenda gets emailed to all prospective attendees; documents to\n  be discussed at the meeting are attached to this email\n\n- the minutes of the meeting are sent around by email a day (or several) later\n\n- possibly buried in the minutes: your action items, the date and time of the\n  next meeting\n\nWhen you try to piece together what happened at the last meeting, which\ndocuments you reviewed at that meeting, and what you are on the hook for doing\nby the next meeting... good luck finding it all in your inbox.\n\n\nAfter:\n------\n\nInstead of having meeting-related information scattered across multiple email\nmessages and attachments, the Meeting content type puts everything in one\nplace:\n\n- standard Plone Event content type attributes (date, time, location,\n  attendees, iCal export, etc.)\n\n- folderish so can contain attachments (documents)\n\n- separate fields for agenda, minutes, action items, next meeting date/time\n\n- ATBackRef-enabled links to previous and next Meeting objects so you can jump\n  forward and backward in time to see what happened at previous meetings of\n  your same working group\n\n- optional email notification (one-time only or on every edit) to all\n  attendees; email message contains all information (except attachments),\n  including direct links to edit the Meeting object and add an attachment\n\n- optional edit permission granted to all attendees\n\n- integration with Solgema.fullcalendar view\n\n\nCalendar Portlets\n-----------------\n\nTo get Meeting objects to show on your calendar portlet: in the ZMI\nof the site, go to portal_calendar -> Configure tab, then in the\n\"Portal Types to show in the calendar\" list, Control-click or\nCommand-click the Meeting type so that both Event and Meeting types\nare selected.  Then press Submit at the bottom of the page.\n\nRemember: the calendar portlet will show only PUBLISHED items, as\nper that Configure tab's default settings, so if you want a Meeting\n(or an Event) to show up in the portlet, the Meeting or Event must\nbe published too.\n\n\nDependencies\n------------\n\nThis product also depends on Products.ATBackRef to support\nbidirectional relations between connected Meeting objects\n(next/previous).  Add the following to your buildout.cfg eggs:\n\n\tProducts.ATBackRef\n\nand rerun bin/buildout.\n\nIf you'd like to view Meeting objects on a nice calendar view, install the\nSolgema.fullcalendar product from\n\nhttp://plone.org/products/solgema.fullcalendar\n\nThe uwosh.meeting product includes a view template that will be used by\nSolgema.fullcalendar.\n\n\nCredits\n-------\n\nI wish I could remember who it was at University of Wisconsin Oshkosh who\nsuggested this \"killer app\" for our Intranet project to me in person... Thank\nyou!\n\n\nMiscellany\n----------\n\n- Code repository: https://github.com/collective/uwosh.meeting\n- Questions and comments to nguyen@uwosh.edu\n- Report bugs at https://github.com/collective/uwosh.meeting/issues\n\nChange history\n**************\n\nChangelog\n=========\n\n[tkimnguyen] unreleased\n-----------------------\n\n- TODO: autocomplete for adding attendees\n\n- TODO: automatically link preceding and upcoming Meeting objects via\n  Related Items field\n\n- TODO: for Solgema.fullcalendar, prevent \"Add Meeting\" from showing\n  up when clicking on the Events calendar / or allow listing and\n  adding Meeting objects in Events folder (probably easier)\n\n- TODO: implement one-time email notification as an action\n\n- TODO: (re) expose the \"add comment\" text field and button in\n  meeting_view.pt that are normally there for non-Folderish content types\n\n- TODO: use BackReferenceBrowserWidget instead of BackReferenceWidget\n  once it's not buggy!\n\n- TODO: add a \"clone\" action that makes the next meeting object and sets its\n  previous meeting to be the current one\n  \n\n0.5.1 (2011-11-27) [tkimnguyen]\n-------------------------------\n\n- updated project URL and pypi classifiers\n\n\n0.5 (2011-11-24) [tkimnguyen]\n-----------------------------\n\n- added tests\n\n- fixed problem with removal of attendee that had only Editor role\n\n- Owner role now gets \"uwosh.meeting: Add Meeting\" permission by default\n\n\n0.4.3 (2011-11-23) [tkimnguyen]\n-------------------------------\n\n- automatically installs Products.ATBackRef \n\n\n0.4.2 (2011-11-18) [tkimnguyen]\n-------------------------------\n\n- notification email message includes attendees email address; \n  wording change from \"has invited you to\" to \"has shared the following \n  meeting\" \n\n\n0.4.1 (2011-11-18) [tkimnguyen]\n-------------------------------\n\n- fix bug when removing an attendee that had Editor role\n\n- improved handling of members without email addresses or full names\n\n- notification email message includes next and previous meeting URLs \n  and lists attendees' full name as well as ID\n\n\n0.4 (2011-09-30) [tkimnguyen] \n-----------------------------\n\n- update product description\n\n- add \"add attachment\" link to the meeting_view.pt\n\n- add \"view\" link to calendar view\n\n- move the \"allow discussion\" setting to the default schemata\n\n- added instructions on how to get published Meeting objects to\n  show up on the calendar portlet\n\n- added previousMeeting and nextMeeting attributes that use ATBackRef\n  to show bidirectional relations between Meeting objects; requires\n  separate installation of Products.ATBackRef\n\n\n0.3.1 (2011-09-13) [tkimnguyen]\n-------------------------------\n\n- version bump\n\n\n0.3 (2011-09-12) [tkimnguyen]\n-----------------------------\n\n- add Action Items and Next Meeting Date Time attributes\n\n- prevent unicode errors on sending email notification\n\n- email notification message includes text/plain version of rich text\n  field values\n\n- fixed incorrect default skin choice on install\n\n\n0.2.2 (2011-08-29) [tkimnguyen]\n-------------------------------\n\n- add uwosh.meeting layer to all skins\n\n- add uninstall profile\n\n\n0.2.1 (2011-08-28) [tkimnguyen]\n-------------------------------\n\n- restore missing Related Items \n\n- update content type description\n\n- in Solgema.fullcalendar view, added Edit and \"Add attachment\" links\n  if user has Modify portal content permission\n\n\n0.2 (2011-08-27) [tkimnguyen]\n-----------------------------\n\n- Can send invitation email to all attendees ('None', 'One-time only',\n  'On every edit')\n\n- Checkbox to allow attendees to edit the Meeting object\n\n- meeting_view and email notification includes listing of contained objects\n\n\n0.1 (2011-08-24) [tkimnguyen]\n-----------------------------\n\n- Basic functionality and attributes\n\nDetailed Documentation\n**********************\n\nIntroduction\n============\n\nThis is a full-blown functional test. The emphasis here is on testing what\nthe user may input and see, and the system is largely tested as a black box.\nWe use PloneTestCase to set up this test as well, so we have a full Plone site\nto play with. We *can* inspect the state of the portal, e.g. using \nself.portal and self.folder, but it is often frowned upon since you are not\ntreating the system as a black box. Also, if you, for example, log in or set\nroles using calls like self.setRoles(), these are not reflected in the test\nbrowser, which runs as a separate session.\n\nBeing a doctest, we can tell a story here.\n\nFirst, we must perform some setup. We use the testbrowser that is shipped\nwith Five, as this provides proper Zope 2 integration. Most of the \ndocumentation, though, is in the underlying zope.testbrower package.\n\n    >>> from Products.Five.testbrowser import Browser\n    >>> browser = Browser()\n    >>> portal_url = self.portal.absolute_url()\n\nThe following is useful when writing and debugging testbrowser tests. It lets\nus see all error messages in the error_log.\n\n    >>> self.portal.error_log._ignored_exceptions = ()\n\nWith that in place, we can go to the portal front page and log in. We will\ndo this using the default user from PloneTestCase:\n\n    >>> from Products.PloneTestCase.setup import portal_owner, default_password\n\nBecause add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  \n\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n\nHere, we set the value of the fields on the login form and then simulate a\nsubmit click.  We then ensure that we get the friendly logged-in message:\n\n    >>> \"You are now logged in\" in browser.contents\n    True\n\nFinally, let's return to the front page of our site before continuing\n\n    >>> browser.open(portal_url)\n\n-*- extra stuff goes here -*-\nThe Meeting content type\n===============================\n\nIn this section we are tesing the Meeting content type by performing\nbasic operations like adding, updadating and deleting Meeting content\nitems.\n\nAdding a new Meeting content item\n--------------------------------\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nThen we select the type of item we want to add. In this case we select\n'Meeting' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('Meeting').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'Meeting' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'Meeting Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nAnd we are done! We added a new 'Meeting' content item to the portal.\n\nUpdating an existing Meeting content item\n---------------------------------------\n\nLet's click on the 'edit' tab and update the object attribute values.\n\n    >>> browser.getLink('Edit').click()\n    >>> browser.getControl(name='title').value = 'New Meeting Sample'\n    >>> browser.getControl('Save').click()\n\nWe check that the changes were applied.\n\n    >>> 'Changes saved' in browser.contents\n    True\n    >>> 'New Meeting Sample' in browser.contents\n    True\n\nRemoving a/an Meeting content item\n--------------------------------\n\nIf we go to the home page, we can see a tab with the 'New Meeting\nSample' title in the global navigation tabs.\n\n    >>> browser.open(portal_url)\n    >>> 'New Meeting Sample' in browser.contents\n    True\n\nNow we are going to delete the 'New Meeting Sample' object. First we\ngo to the contents tab and select the 'New Meeting Sample' for\ndeletion.\n\n    >>> browser.getLink('Contents').click()\n    >>> browser.getControl('New Meeting Sample').click()\n\nWe click on the 'Delete' button.\n\n    >>> browser.getControl('Delete').click()\n    >>> 'Item(s) deleted' in browser.contents\n    True\n\nSo, if we go back to the home page, there is no longer a 'New Meeting\nSample' tab.\n\n    >>> browser.open(portal_url)\n    >>> 'New Meeting Sample' in browser.contents\n    False\n\nAdding a new Meeting content item as contributor\n------------------------------------------------\n\nNot only site managers are allowed to add Meeting content items, but\nalso site contributors.\n\nLet's logout and then login as 'contributor', a portal member that has the\ncontributor role assigned.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = 'contributor'\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\nWe use the 'Add new' menu to add a new content item.\n\n    >>> browser.getLink('Add new').click()\n\nWe select 'Meeting' and click the 'Add' button to get to the add form.\n\n    >>> browser.getControl('Meeting').click()\n    >>> browser.getControl(name='form.button.Add').click()\n    >>> 'Meeting' in browser.contents\n    True\n\nNow we fill the form and submit it.\n\n    >>> browser.getControl(name='title').value = 'Meeting Sample'\n    >>> browser.getControl('Save').click()\n    >>> 'Changes saved' in browser.contents\n    True\n\nDone! We added a new Meeting content item logged in as contributor.\n\nFinally, let's login back as manager.\n\n    >>> browser.getLink('Log out').click()\n    >>> browser.open(portal_url + '/login_form')\n    >>> browser.getControl(name='__ac_name').value = portal_owner\n    >>> browser.getControl(name='__ac_password').value = default_password\n    >>> browser.getControl(name='submit').click()\n    >>> browser.open(portal_url)\n\n\n\n\nContributors\n************\n\nT. Kim Nguyen <nguyen@uwosh.edu>\n\n\nDownload\n********", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/collective/uwosh.meeting", "keywords": "meeting,event,folder,attachment,minutes,agenda,action items", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "uwosh.meeting", "package_url": "https://pypi.org/project/uwosh.meeting/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/uwosh.meeting/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/collective/uwosh.meeting"}, "release_url": "https://pypi.org/project/uwosh.meeting/0.5.1/", "requires_dist": null, "requires_python": null, "summary": "a folderish Event that centralizes meeting information", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            This product helps you better manage all information related to meetings.<br><br><br>Before:<br>-------<br><br>Normally, meetings seem to happen like this:<br><br>- someone sends around an email on a topic, asking for a good date and time<br>  that works for everyone<br><br>- you get an email with the date and time that was agreed to; a location is<br>  still to be determined<br><br>- you get an email with the meeting location<br><br>- eventually an agenda gets emailed to all prospective attendees; documents to<br>  be discussed at the meeting are attached to this email<br><br>- the minutes of the meeting are sent around by email a day (or several) later<br><br>- possibly buried in the minutes: your action items, the date and time of the<br>  next meeting<br><br>When you try to piece together what happened at the last meeting, which<br>documents you reviewed at that meeting, and what you are on the hook for doing<br>by the next meeting... good luck finding it all in your inbox.<br><br><br>After:<br>------<br><br>Instead of having meeting-related information scattered across multiple email<br>messages and attachments, the Meeting content type puts everything in one<br>place:<br><br>- standard Plone Event content type attributes (date, time, location,<br>  attendees, iCal export, etc.)<br><br>- folderish so can contain attachments (documents)<br><br>- separate fields for agenda, minutes, action items, next meeting date/time<br><br>- ATBackRef-enabled links to previous and next Meeting objects so you can jump<br>  forward and backward in time to see what happened at previous meetings of<br>  your same working group<br><br>- optional email notification (one-time only or on every edit) to all<br>  attendees; email message contains all information (except attachments),<br>  including direct links to edit the Meeting object and add an attachment<br><br>- optional edit permission granted to all attendees<br><br>- integration with Solgema.fullcalendar view<br><br><br>Calendar Portlets<br>-----------------<br><br>To get Meeting objects to show on your calendar portlet: in the ZMI<br>of the site, go to portal_calendar -&gt; Configure tab, then in the<br>\"Portal Types to show in the calendar\" list, Control-click or<br>Command-click the Meeting type so that both Event and Meeting types<br>are selected.  Then press Submit at the bottom of the page.<br><br>Remember: the calendar portlet will show only PUBLISHED items, as<br>per that Configure tab's default settings, so if you want a Meeting<br>(or an Event) to show up in the portlet, the Meeting or Event must<br>be published too.<br><br><br>Dependencies<br>------------<br><br>This product also depends on Products.ATBackRef to support<br>bidirectional relations between connected Meeting objects<br>(next/previous).  Add the following to your buildout.cfg eggs:<br><br>\tProducts.ATBackRef<br><br>and rerun bin/buildout.<br><br>If you'd like to view Meeting objects on a nice calendar view, install the<br>Solgema.fullcalendar product from<br><br>http://plone.org/products/solgema.fullcalendar<br><br>The uwosh.meeting product includes a view template that will be used by<br>Solgema.fullcalendar.<br><br><br>Credits<br>-------<br><br>I wish I could remember who it was at University of Wisconsin Oshkosh who<br>suggested this \"killer app\" for our Intranet project to me in person... Thank<br>you!<br><br><br>Miscellany<br>----------<br><br>- Code repository: https://github.com/collective/uwosh.meeting<br>- Questions and comments to nguyen@uwosh.edu<br>- Report bugs at https://github.com/collective/uwosh.meeting/issues<br><br>Change history<br>**************<br><br>Changelog<br>=========<br><br>[tkimnguyen] unreleased<br>-----------------------<br><br>- TODO: autocomplete for adding attendees<br><br>- TODO: automatically link preceding and upcoming Meeting objects via<br>  Related Items field<br><br>- TODO: for Solgema.fullcalendar, prevent \"Add Meeting\" from showing<br>  up when clicking on the Events calendar / or allow listing and<br>  adding Meeting objects in Events folder (probably easier)<br><br>- TODO: implement one-time email notification as an action<br><br>- TODO: (re) expose the \"add comment\" text field and button in<br>  meeting_view.pt that are normally there for non-Folderish content types<br><br>- TODO: use BackReferenceBrowserWidget instead of BackReferenceWidget<br>  once it's not buggy!<br><br>- TODO: add a \"clone\" action that makes the next meeting object and sets its<br>  previous meeting to be the current one<br>  <br><br>0.5.1 (2011-11-27) [tkimnguyen]<br>-------------------------------<br><br>- updated project URL and pypi classifiers<br><br><br>0.5 (2011-11-24) [tkimnguyen]<br>-----------------------------<br><br>- added tests<br><br>- fixed problem with removal of attendee that had only Editor role<br><br>- Owner role now gets \"uwosh.meeting: Add Meeting\" permission by default<br><br><br>0.4.3 (2011-11-23) [tkimnguyen]<br>-------------------------------<br><br>- automatically installs Products.ATBackRef <br><br><br>0.4.2 (2011-11-18) [tkimnguyen]<br>-------------------------------<br><br>- notification email message includes attendees email address; <br>  wording change from \"has invited you to\" to \"has shared the following <br>  meeting\" <br><br><br>0.4.1 (2011-11-18) [tkimnguyen]<br>-------------------------------<br><br>- fix bug when removing an attendee that had Editor role<br><br>- improved handling of members without email addresses or full names<br><br>- notification email message includes next and previous meeting URLs <br>  and lists attendees' full name as well as ID<br><br><br>0.4 (2011-09-30) [tkimnguyen] <br>-----------------------------<br><br>- update product description<br><br>- add \"add attachment\" link to the meeting_view.pt<br><br>- add \"view\" link to calendar view<br><br>- move the \"allow discussion\" setting to the default schemata<br><br>- added instructions on how to get published Meeting objects to<br>  show up on the calendar portlet<br><br>- added previousMeeting and nextMeeting attributes that use ATBackRef<br>  to show bidirectional relations between Meeting objects; requires<br>  separate installation of Products.ATBackRef<br><br><br>0.3.1 (2011-09-13) [tkimnguyen]<br>-------------------------------<br><br>- version bump<br><br><br>0.3 (2011-09-12) [tkimnguyen]<br>-----------------------------<br><br>- add Action Items and Next Meeting Date Time attributes<br><br>- prevent unicode errors on sending email notification<br><br>- email notification message includes text/plain version of rich text<br>  field values<br><br>- fixed incorrect default skin choice on install<br><br><br>0.2.2 (2011-08-29) [tkimnguyen]<br>-------------------------------<br><br>- add uwosh.meeting layer to all skins<br><br>- add uninstall profile<br><br><br>0.2.1 (2011-08-28) [tkimnguyen]<br>-------------------------------<br><br>- restore missing Related Items <br><br>- update content type description<br><br>- in Solgema.fullcalendar view, added Edit and \"Add attachment\" links<br>  if user has Modify portal content permission<br><br><br>0.2 (2011-08-27) [tkimnguyen]<br>-----------------------------<br><br>- Can send invitation email to all attendees ('None', 'One-time only',<br>  'On every edit')<br><br>- Checkbox to allow attendees to edit the Meeting object<br><br>- meeting_view and email notification includes listing of contained objects<br><br><br>0.1 (2011-08-24) [tkimnguyen]<br>-----------------------------<br><br>- Basic functionality and attributes<br><br>Detailed Documentation<br>**********************<br><br>Introduction<br>============<br><br>This is a full-blown functional test. The emphasis here is on testing what<br>the user may input and see, and the system is largely tested as a black box.<br>We use PloneTestCase to set up this test as well, so we have a full Plone site<br>to play with. We *can* inspect the state of the portal, e.g. using <br>self.portal and self.folder, but it is often frowned upon since you are not<br>treating the system as a black box. Also, if you, for example, log in or set<br>roles using calls like self.setRoles(), these are not reflected in the test<br>browser, which runs as a separate session.<br><br>Being a doctest, we can tell a story here.<br><br>First, we must perform some setup. We use the testbrowser that is shipped<br>with Five, as this provides proper Zope 2 integration. Most of the <br>documentation, though, is in the underlying zope.testbrower package.<br><br>    &gt;&gt;&gt; from Products.Five.testbrowser import Browser<br>    &gt;&gt;&gt; browser = Browser()<br>    &gt;&gt;&gt; portal_url = self.portal.absolute_url()<br><br>The following is useful when writing and debugging testbrowser tests. It lets<br>us see all error messages in the error_log.<br><br>    &gt;&gt;&gt; self.portal.error_log._ignored_exceptions = ()<br><br>With that in place, we can go to the portal front page and log in. We will<br>do this using the default user from PloneTestCase:<br><br>    &gt;&gt;&gt; from Products.PloneTestCase.setup import portal_owner, default_password<br><br>Because add-on themes or products may remove or hide the login portlet, this test will use the login form that comes with plone.  <br><br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br><br>Here, we set the value of the fields on the login form and then simulate a<br>submit click.  We then ensure that we get the friendly logged-in message:<br><br>    &gt;&gt;&gt; \"You are now logged in\" in browser.contents<br>    True<br><br>Finally, let's return to the front page of our site before continuing<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br><br>-*- extra stuff goes here -*-<br>The Meeting content type<br>===============================<br><br>In this section we are tesing the Meeting content type by performing<br>basic operations like adding, updadating and deleting Meeting content<br>items.<br><br>Adding a new Meeting content item<br>--------------------------------<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>Then we select the type of item we want to add. In this case we select<br>'Meeting' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('Meeting').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'Meeting' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'Meeting Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>And we are done! We added a new 'Meeting' content item to the portal.<br><br>Updating an existing Meeting content item<br>---------------------------------------<br><br>Let's click on the 'edit' tab and update the object attribute values.<br><br>    &gt;&gt;&gt; browser.getLink('Edit').click()<br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'New Meeting Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br><br>We check that the changes were applied.<br><br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br>    &gt;&gt;&gt; 'New Meeting Sample' in browser.contents<br>    True<br><br>Removing a/an Meeting content item<br>--------------------------------<br><br>If we go to the home page, we can see a tab with the 'New Meeting<br>Sample' title in the global navigation tabs.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New Meeting Sample' in browser.contents<br>    True<br><br>Now we are going to delete the 'New Meeting Sample' object. First we<br>go to the contents tab and select the 'New Meeting Sample' for<br>deletion.<br><br>    &gt;&gt;&gt; browser.getLink('Contents').click()<br>    &gt;&gt;&gt; browser.getControl('New Meeting Sample').click()<br><br>We click on the 'Delete' button.<br><br>    &gt;&gt;&gt; browser.getControl('Delete').click()<br>    &gt;&gt;&gt; 'Item(s) deleted' in browser.contents<br>    True<br><br>So, if we go back to the home page, there is no longer a 'New Meeting<br>Sample' tab.<br><br>    &gt;&gt;&gt; browser.open(portal_url)<br>    &gt;&gt;&gt; 'New Meeting Sample' in browser.contents<br>    False<br><br>Adding a new Meeting content item as contributor<br>------------------------------------------------<br><br>Not only site managers are allowed to add Meeting content items, but<br>also site contributors.<br><br>Let's logout and then login as 'contributor', a portal member that has the<br>contributor role assigned.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = 'contributor'<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br>We use the 'Add new' menu to add a new content item.<br><br>    &gt;&gt;&gt; browser.getLink('Add new').click()<br><br>We select 'Meeting' and click the 'Add' button to get to the add form.<br><br>    &gt;&gt;&gt; browser.getControl('Meeting').click()<br>    &gt;&gt;&gt; browser.getControl(name='form.button.Add').click()<br>    &gt;&gt;&gt; 'Meeting' in browser.contents<br>    True<br><br>Now we fill the form and submit it.<br><br>    &gt;&gt;&gt; browser.getControl(name='title').value = 'Meeting Sample'<br>    &gt;&gt;&gt; browser.getControl('Save').click()<br>    &gt;&gt;&gt; 'Changes saved' in browser.contents<br>    True<br><br>Done! We added a new Meeting content item logged in as contributor.<br><br>Finally, let's login back as manager.<br><br>    &gt;&gt;&gt; browser.getLink('Log out').click()<br>    &gt;&gt;&gt; browser.open(portal_url + '/login_form')<br>    &gt;&gt;&gt; browser.getControl(name='__ac_name').value = portal_owner<br>    &gt;&gt;&gt; browser.getControl(name='__ac_password').value = default_password<br>    &gt;&gt;&gt; browser.getControl(name='submit').click()<br>    &gt;&gt;&gt; browser.open(portal_url)<br><br><br><br><br>Contributors<br>************<br><br>T. Kim Nguyen &lt;nguyen@uwosh.edu&gt;<br><br><br>Download<br>********\n          </div>"}, "last_serial": 2340268, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "b9cfc176bdadadf6b049f9defd47aa23", "sha256": "d94736dc1c83c55342c3d26c1c085c1b282288513c1f342bfa10627549c1dc42"}, "downloads": -1, "filename": "uwosh.meeting-0.5.tar.gz", "has_sig": false, "md5_digest": "b9cfc176bdadadf6b049f9defd47aa23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30558, "upload_time": "2011-11-28T06:17:31", "upload_time_iso_8601": "2011-11-28T06:17:31.135839Z", "url": "https://files.pythonhosted.org/packages/a1/a1/2e1268cf89a0d7669c1c685dd85c27b1ea9af1218b1c6c67a2f32dc69c58/uwosh.meeting-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "c325613d45465d8226abffd8882997e0", "sha256": "20c536f13e9be701ceb562babbeb62e0e63d582d0a8dc0d271aa69d92bf691a4"}, "downloads": -1, "filename": "uwosh.meeting-0.5.1.tar.gz", "has_sig": false, "md5_digest": "c325613d45465d8226abffd8882997e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30666, "upload_time": "2011-11-28T06:30:36", "upload_time_iso_8601": "2011-11-28T06:30:36.057388Z", "url": "https://files.pythonhosted.org/packages/0d/9d/31f4453fb863cd6fb35b1863bc6545d85505a11cb8914871f2a3993940b0/uwosh.meeting-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c325613d45465d8226abffd8882997e0", "sha256": "20c536f13e9be701ceb562babbeb62e0e63d582d0a8dc0d271aa69d92bf691a4"}, "downloads": -1, "filename": "uwosh.meeting-0.5.1.tar.gz", "has_sig": false, "md5_digest": "c325613d45465d8226abffd8882997e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30666, "upload_time": "2011-11-28T06:30:36", "upload_time_iso_8601": "2011-11-28T06:30:36.057388Z", "url": "https://files.pythonhosted.org/packages/0d/9d/31f4453fb863cd6fb35b1863bc6545d85505a11cb8914871f2a3993940b0/uwosh.meeting-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:35 2020"}