{"info": {"author": "M. Brekelmans", "author_email": "tijntje_7@msn.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.4"], "description": "A convenient way to lay out matplotlib figures\nThe first argument is a multiline string which diagrammatically describes\nthe desired layout of your plot\n\n@return (figure, mpt)\n\ne.g., a simple single plot looks like\ngrid1 = '''\nA\n'''\n\nIf you want complicated grid layouts, you can do that as well\n\ngrid2 = '''\nAA\nAA\nBB\nCC\nCC\n'''\n\ngrid3 = '''\nAAABB\nCCCBB\n'''\n\nMake sure that your subfigures have a rectangular shape\ne.g.\n'''\nAA\nBB\nA'''\nWill not work at all.\n\nmultiplot takes care of creating the layout using matplotlib's gridspec\nYou can access each individual subplot by dictionary key access.\nThe figure is exposed as well\n\nfig, mpt = multiplot(grid3)\nmpt[\"A\"].plot(...)\nmpt[\"B\"].set_title(...)\n\nAny arguments you want to pass to plt.figure, you can pass to multiplot right after the grid\neg\nfig, mpt = multiplot(grid3, figsize=(10, 10), ...)\n\nEasily layout complicated grids\nEasily change its layout\nComplete access to axes and figure", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Azeirah/multiplot.git", "keywords": "matplotlib grid convenience jupyter", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "mpt-multiplot", "package_url": "https://pypi.org/project/mpt-multiplot/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mpt-multiplot/", "project_urls": {"Homepage": "https://github.com/Azeirah/multiplot.git"}, "release_url": "https://pypi.org/project/mpt-multiplot/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Convenient matplotlib subplot grids", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A convenient way to lay out matplotlib figures\nThe first argument is a multiline string which diagrammatically describes\nthe desired layout of your plot</p>\n<p>@return (figure, mpt)</p>\n<p>e.g., a simple single plot looks like\ngrid1 = \u2018\u2019\u2019\nA\n\u2018\u2019\u2019</p>\n<p>If you want complicated grid layouts, you can do that as well</p>\n<p>grid2 = \u2018\u2019\u2019\nAA\nAA\nBB\nCC\nCC\n\u2018\u2019\u2019</p>\n<p>grid3 = \u2018\u2019\u2019\nAAABB\nCCCBB\n\u2018\u2019\u2019</p>\n<p>Make sure that your subfigures have a rectangular shape\ne.g.\n\u2018\u2019\u2019\nAA\nBB\nA\u2019\u2019\u2019\nWill not work at all.</p>\n<p>multiplot takes care of creating the layout using matplotlib\u2019s gridspec\nYou can access each individual subplot by dictionary key access.\nThe figure is exposed as well</p>\n<p>fig, mpt = multiplot(grid3)\nmpt[\u201cA\u201d].plot(\u2026)\nmpt[\u201cB\u201d].set_title(\u2026)</p>\n<p>Any arguments you want to pass to plt.figure, you can pass to multiplot right after the grid\neg\nfig, mpt = multiplot(grid3, figsize=(10, 10), \u2026)</p>\n<p>Easily layout complicated grids\nEasily change its layout\nComplete access to axes and figure</p>\n\n          </div>"}, "last_serial": 2748927, "releases": {"0.0.1": [], "0.0.2": []}, "urls": [], "timestamp": "Fri May  8 00:51:09 2020"}