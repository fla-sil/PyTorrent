{"info": {"author": "Giles Knap", "author_email": "gilesknap@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "|build_status|\n|coverage|\n|codacy|\n|pypi|\n\n\nGoogle Photos Sync\n==================\n\nIntroduction\n------------\nFor a very good description and detailed instructions see `Logix's Article at Linux Uprising`_\n\n.. _`Logix's Article at Linux Uprising`: https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html\n\nGoogle Photos Sync downloads your Google Photos to the local file system. It will backup all the photos the\nuser uploaded to\nGoogle Photos, but also the album information and additional Google Photos 'Creations' (animations, panoramas,\nmovies, effects and collages).\n\nThis project uses the new Google Photos API see https://developers.google.com/photos/.\n\nAfter doing a full sync you will have 2 directories off of the specified root:\n\n* **photos** - contains all photos and videos from your Google Photos Library organized into folders with the\n  structure 'photos/YYYY/MM' where 'YYYY/MM' is the date the photo/video was taken. The filenames within a folder\n  will be as per the original upload except that duplicate names will have a suffix ' (n)' where n is the duplicate number\n  of the file (this matches the approach used in the official Google tool for Windows).\n\n* **albums** - contains a folder hierarchy representing the set of albums  and shared albums in your library. All\n  the files are symlinks to content in the photos folder. The folder names  will be\n  'albums/YYYY/MM Original Album Name'.\n\nIn addition there will be further folders when using the --compare-folder option.  The option is used to make a\ncomparison of the contents of your library with a local folder such as a previous backup. The comparison does not require\nthat the files are arranged in the same folders, it uses meta-data in the files such as create date and\nexif UID to match pairs of items. The additional folders after a comparison will be:\n\n* **comparison** a new folder off of the specified root containing the following:\n\n* **missing_files** - contains symlinks to the files in the comparison folder that were not found in the Google\n  Photos Library. The folder structure is the same as that in the comparison folder. These are the\n  files that you would upload to Google Photos via the Web interface to restore from backup.\n\n* **extra_files** - contains symlinks into to the files in photos folder which appear in the Library but not in the\n  comparison folder. The folder structure is the same as the photos folder.\n\n* **duplicates** - contains symlinks to any duplicate files found in the comparison folder. This is a flat structure\n  and the symlink filenames have a numeric prefix to make them unique and group the duplicates together.\n\nNOTES:\n\n* the comparison code uses an external tool 'ffprobe'. It will run without it but will not be able to\n  extract metadata from video files and revert to relying on Google Photos meta data and file modified date (this is\n  a much less reliable way to match video files, but the results should be OK if the backup folder\n  was originally created using gphotos-sync).\n* If you have shared albums and have clicked 'add to library' on items from others' libraries then you will have two\n  copies of those items and they will show as duplicates too.\n\nTroubleshooting\n---------------\n\n- Installing on a slow machine (like old Raspberry Pi) or network may cause timeouts in pipenv. \n\n  - This can be resolved by setting an environment variable `export PIPENV_TIMEOUT=240`\n\nKnown Issues\n------------\nA few outstanding limitations of the Google API restrict what can be achieved. All these issues have been reported\nto Google and this project will be updated once they are resolved.\n\n- There is no way to discover modified date of library media items. Currently ``gphotos-sync`` will refresh your local\n  copy with any new photos added since the last scan but will not update any photos that have been modified in Google\n  a. Photos. A feature request has been submitted to Google.\n  \n  - https://issuetracker.google.com/issues/122737849.\n  \n- FIXED BY GOOGLE. Some types of video will not download using the new API. \n\n  - https://issuetracker.google.com/issues/116842164.\n  - https://issuetracker.google.com/issues/141255600\n  \n- The API strips GPS data from images.\n\n  - https://issuetracker.google.com/issues/80379228.\n  \n- Video download transcodes the videos even if you ask for the original file (=vd parameter).\n  My experience is that the result is looks similar to the original\n  but the compression is more clearly visible. It is a smaller file with approximately 60% bitrate (same resolution).\n  \n  - https://issuetracker.google.com/issues/80149160\n  \n- Burst shots are not supported. You will only see the first file of a burst shot.\n\n  - https://issuetracker.google.com/issues/124656564\n\n\nInstall and configure\n---------------------\nFor some help on getting python working on Windows see https://github.com/gilesknap/gphotos-sync/issues/63.\n\nOn linux, you can install pipenv using ``pip3 install --user pipenv`` and then make sure that ``~/.local/bin/`` is in your path.\n\nTo install the latest published version from PyPi, simply::\n\n   mkdir gphotos-sync\n   cd gphotos-sync\n   pipenv install gphotos-sync\n\nOr if you don't want to use pipenv, create a virtual environment and::\n\n   pip install gphotos-sync\n\n(see https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/ if you are not familiar with virtualenv)\n\nTo work from the source code, clone the git repository and use pipenv to create a virtual environment and run\nthe code. (if you don't have pipenv, then I recommend getting it - but you can manually create a virtualenv and use\n'python setup.py install' instead) ::\n\n  git clone https://github.com/gilesknap/gphotos-sync.git\n  cd gphotos-sync\n  pipenv install .\n  pipenv run gphotos-sync\n\nIn order to work, ``gphotos-sync`` first needs a valid client id linked to a project\nauthorized to use the 'Photos Library API'. It is not provided in the distribution. Each client id\nis given a (large) limited number of free API calls to Google Services. If this distribution shared the client id,\nall users would share this resource limit. This is a little fiddly but only needs to be done once.\n\nTo do this:\n\n- Create a project on `Google Developer Console`_, following the `Creating a project procedure`_,\n\n- Authorize it to use the 'Photos Library API', following the `Activating and deactivating APIs procedure`_,\n\n- Create a Client ID by following the `setting up oauth 2.0 procedure`_ with application type set to **Other**\n\n- Once the client ID is created, download it as ``client_secret.json`` and save it under the application\n  configuration directory:\n\n  - ``~/Library/Application Support/gphotos-sync/`` under Mac OS X,\n  - ``~/.config/gphotos-sync/`` under Linux,\n  - ``C:\\Users\\<username>\\AppData\\Local\\gphotos-sync\\gphotos-sync\\`` under Windows.\n\nAlso note that for Windows you will need to enable symbolic links permission for the account that gphoto-sync\nwill run under. See `Enabling SymLinks on Windows`_.\n \n\n.. _`Google Developer Console`: https://developers.google.com/console/\n.. _`Creating a project procedure`: https://cloud.google.com/resource-manager/docs/creating-managing-projects\n.. _`Activating and Deactivating APIs procedure`: https://cloud.google.com/apis/docs/enable-disable-apis\n.. _`setting up oauth 2.0 procedure`: https://support.google.com/cloud/answer/6158849?hl=en\n.. _`Enabling SymLinks on Windows`: https://community.perforce.com/s/article/3472\n\n\nHow to use it\n-------------\n\nOnce the script is configured, you are now ready to use it using the simple following command line::\n\n  cd <installed directory>\n  pipenv run gphotos-sync TARGET_DIRECTORY\n\nOr, if you used virtualenv and pip instead of pipenv, activate the virtualenv and::\n\n  gphotos-sync TARGET_DIRECTORY\n  \nThe first time, it will give you a link to an authorization page in order to authorize the client to access your\nGoogle Photos.\n\nFor a description of additional command line parameters type::\n\n  gphotos-sync --help\n\nRunning with docker\n-------------------\nYou can run the tool from the container using |docker|_. The container has 2 mount points:\n\n.. |docker| replace:: prebuilt Docker image\n.. _docker: https://hub.docker.com/r/gilesknap/gphotos-sync\n\n-  ``/storage`` this is where your photos will be stored. You can mount single directory, or multiple subdirectories in case you want to backup multiple accounts\n-  ``/config`` the directory that contains `client_secret.json` file\n  \nTo run ::\n\n    docker run \\\n       -ti \\\n       --name gphotos-sync \\\n       -v /YOUR_LOCAL/PATH/TO_PHOTOS:/storage \\\n       -v /YOUR_LOCAL/PATH/TO_CONFIG:/config \\\n       gilesknap/gphotos-sync \\\n      /storage\n\nTo remove the container (for instance if you want to run it on scheduled basis and do a cleanup)::\n\n    docker rm -f $(docker ps --filter name=gphotos-sync -qa) 2> /dev/null\n    \nTo run then remove the container::\n\n    docker run \\\n      --rm \\\n      -it \\\n      --name gphotos-sync \\\n      -v /YOUR_LOCAL/PATH/TO_PHOTOS:/storage \\\n      -v /YOUR_LOCAL/PATH/TO_CONFIG/client_id.json:/config/client_secret.json:ro \\\n      gilesknap/gphotos-sync \\\n      --log-level INFO \\\n      /storage\n\nAppendix\n========\n\nRescans\n-------\nI have just experienced an issue with duplication of files when doing a rescan\n(--rescan or --flush-index). It looks like some items have changed in the\nlibrary and this can result in the same file downloading\ntwice. I would guess this has something to do with Google removing the\nDrive link to Photos.\n\nUPDATE: I now know that this was caused by subtle changes in the metadata.\nIt seems Google does not guarantee to deliver exactly the same files each\ntime you scan the library (but to be fair, I think they are tuning things for\nthe better).\n\nThe problem did cause some duplicate named files to be downloaded twice\noverwriting their duplicate peer. Note that no files were lost from the library\n(since gphotos is read-only) and it was possible to repair things by either:\n\n- using the local comparison feature of gphotos-sync against a prior backup\n- or downloading the library again from scratch\n\nIn summary, most people will not be affected by the issue I\nhad unless they have very old photos with duplicate file names.\n\nMy detailed notes on the subject are here: `giles notes`_\n\n..  _`giles notes`: https://docs.google.com/document/d/1hK_GDLUwP7PpD1VmDbDsYLyTfbZGv2C-JCihezYhiLY/edit?usp=sharing\n\nGoogle GPS Info update\n----------------------\nUPDATE: the GPS scraping no longer works and has been removed. I am investigating a couple of other avenues.\n\nGoogle does not seem to be interested in fxing the issue of stripping location info from the EXIF info of images\ndownloaded via their API (see https://issuetracker.google.com/issues/80379228#comment80). So I am investigating a workaround. See the option --get-locations. It uses\nSelenium to scrape the GPS info off of the Google Website (your google creds required I'm afraid) and\ninsert them into the DB of synchronized files. It does not yet update the EXIF on the local files but this\nis a minor addition and I'll implement if there is interest.\n\nHave a try and let me know what you think. Hurry, because Google is removing the ability to log in using\nautomation soon!\n\n.. |build_status| image:: https://travis-ci.org/gilesknap/gphotos-sync.svg?branch=master&style=flat\n    :target: https://travis-ci.org/gilesknap/gphotos-sync\n    :alt: Build Status\n\n.. |coverage| image:: https://codecov.io/gh/gilesknap/gphotos-sync/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/gilesknap/gphotos-sync\n    :alt: Test coverage\n\n.. |codacy| image:: https://api.codacy.com/project/badge/Grade/5a5b8c359800462e90ee2ba21a969f87\n   :alt: Codacy Badge\n   :target: https://app.codacy.com/app/giles.knap/gphotos-sync?utm_source=github.com&utm_medium=referral&utm_content=gilesknap/gphotos-sync&utm_campaign=Badge_Grade_Dashboard\n\n.. |pypi| image:: https://badge.fury.io/py/gphotos-sync.svg\n   :target: https://badge.fury.io/py/gphotos-sync", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gilesknap/gphotos-sync", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gphotos-sync", "package_url": "https://pypi.org/project/gphotos-sync/", "platform": "Linux", "project_url": "https://pypi.org/project/gphotos-sync/", "project_urls": {"Homepage": "https://github.com/gilesknap/gphotos-sync"}, "release_url": "https://pypi.org/project/gphotos-sync/2.14.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Google Photos and Albums backup tool", "version": "2.14.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/gilesknap/gphotos-sync\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a2ecdb90e15fd0541f8d32fbad77129487cf4af/68747470733a2f2f7472617669732d63692e6f72672f67696c65736b6e61702f6770686f746f732d73796e632e7376673f6272616e63683d6d6173746572267374796c653d666c6174\"></a>\n<a href=\"https://codecov.io/gh/gilesknap/gphotos-sync\" rel=\"nofollow\"><img alt=\"Test coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4f149dfc04784a3282b9360ef93f9eaa994618c/68747470733a2f2f636f6465636f762e696f2f67682f67696c65736b6e61702f6770686f746f732d73796e632f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://app.codacy.com/app/giles.knap/gphotos-sync?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=gilesknap/gphotos-sync&amp;utm_campaign=Badge_Grade_Dashboard\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2988820a4582d6f12e5d0f6a72047cf84b323ef/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3561356238633335393830303436326539306565326261323161393639663837\"></a>\n<a href=\"https://badge.fury.io/py/gphotos-sync\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/caa67a9cd3a4d8e76995780e522cc7c0e6e862e2/68747470733a2f2f62616467652e667572792e696f2f70792f6770686f746f732d73796e632e737667\"></a></p>\n<div id=\"google-photos-sync\">\n<h2>Google Photos Sync</h2>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>For a very good description and detailed instructions see <a href=\"https://www.linuxuprising.com/2019/06/how-to-backup-google-photos-to-your.html\" rel=\"nofollow\">Logix\u2019s Article at Linux Uprising</a></p>\n<p>Google Photos Sync downloads your Google Photos to the local file system. It will backup all the photos the\nuser uploaded to\nGoogle Photos, but also the album information and additional Google Photos \u2018Creations\u2019 (animations, panoramas,\nmovies, effects and collages).</p>\n<p>This project uses the new Google Photos API see <a href=\"https://developers.google.com/photos/\" rel=\"nofollow\">https://developers.google.com/photos/</a>.</p>\n<p>After doing a full sync you will have 2 directories off of the specified root:</p>\n<ul>\n<li><strong>photos</strong> - contains all photos and videos from your Google Photos Library organized into folders with the\nstructure \u2018photos/YYYY/MM\u2019 where \u2018YYYY/MM\u2019 is the date the photo/video was taken. The filenames within a folder\nwill be as per the original upload except that duplicate names will have a suffix \u2018 (n)\u2019 where n is the duplicate number\nof the file (this matches the approach used in the official Google tool for Windows).</li>\n<li><strong>albums</strong> - contains a folder hierarchy representing the set of albums  and shared albums in your library. All\nthe files are symlinks to content in the photos folder. The folder names  will be\n\u2018albums/YYYY/MM Original Album Name\u2019.</li>\n</ul>\n<p>In addition there will be further folders when using the \u2013compare-folder option.  The option is used to make a\ncomparison of the contents of your library with a local folder such as a previous backup. The comparison does not require\nthat the files are arranged in the same folders, it uses meta-data in the files such as create date and\nexif UID to match pairs of items. The additional folders after a comparison will be:</p>\n<ul>\n<li><strong>comparison</strong> a new folder off of the specified root containing the following:</li>\n<li><strong>missing_files</strong> - contains symlinks to the files in the comparison folder that were not found in the Google\nPhotos Library. The folder structure is the same as that in the comparison folder. These are the\nfiles that you would upload to Google Photos via the Web interface to restore from backup.</li>\n<li><strong>extra_files</strong> - contains symlinks into to the files in photos folder which appear in the Library but not in the\ncomparison folder. The folder structure is the same as the photos folder.</li>\n<li><strong>duplicates</strong> - contains symlinks to any duplicate files found in the comparison folder. This is a flat structure\nand the symlink filenames have a numeric prefix to make them unique and group the duplicates together.</li>\n</ul>\n<p>NOTES:</p>\n<ul>\n<li>the comparison code uses an external tool \u2018ffprobe\u2019. It will run without it but will not be able to\nextract metadata from video files and revert to relying on Google Photos meta data and file modified date (this is\na much less reliable way to match video files, but the results should be OK if the backup folder\nwas originally created using gphotos-sync).</li>\n<li>If you have shared albums and have clicked \u2018add to library\u2019 on items from others\u2019 libraries then you will have two\ncopies of those items and they will show as duplicates too.</li>\n</ul>\n</div>\n<div id=\"troubleshooting\">\n<h3>Troubleshooting</h3>\n<ul>\n<li>Installing on a slow machine (like old Raspberry Pi) or network may cause timeouts in pipenv.<ul>\n<li>This can be resolved by setting an environment variable <cite>export PIPENV_TIMEOUT=240</cite></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"known-issues\">\n<h3>Known Issues</h3>\n<p>A few outstanding limitations of the Google API restrict what can be achieved. All these issues have been reported\nto Google and this project will be updated once they are resolved.</p>\n<ul>\n<li>There is no way to discover modified date of library media items. Currently <tt><span class=\"pre\">gphotos-sync</span></tt> will refresh your local\ncopy with any new photos added since the last scan but will not update any photos that have been modified in Google\na. Photos. A feature request has been submitted to Google.<ul>\n<li><a href=\"https://issuetracker.google.com/issues/122737849\" rel=\"nofollow\">https://issuetracker.google.com/issues/122737849</a>.</li>\n</ul>\n</li>\n<li>FIXED BY GOOGLE. Some types of video will not download using the new API.<ul>\n<li><a href=\"https://issuetracker.google.com/issues/116842164\" rel=\"nofollow\">https://issuetracker.google.com/issues/116842164</a>.</li>\n<li><a href=\"https://issuetracker.google.com/issues/141255600\" rel=\"nofollow\">https://issuetracker.google.com/issues/141255600</a></li>\n</ul>\n</li>\n<li>The API strips GPS data from images.<ul>\n<li><a href=\"https://issuetracker.google.com/issues/80379228\" rel=\"nofollow\">https://issuetracker.google.com/issues/80379228</a>.</li>\n</ul>\n</li>\n<li>Video download transcodes the videos even if you ask for the original file (=vd parameter).\nMy experience is that the result is looks similar to the original\nbut the compression is more clearly visible. It is a smaller file with approximately 60% bitrate (same resolution).<ul>\n<li><a href=\"https://issuetracker.google.com/issues/80149160\" rel=\"nofollow\">https://issuetracker.google.com/issues/80149160</a></li>\n</ul>\n</li>\n<li>Burst shots are not supported. You will only see the first file of a burst shot.<ul>\n<li><a href=\"https://issuetracker.google.com/issues/124656564\" rel=\"nofollow\">https://issuetracker.google.com/issues/124656564</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"install-and-configure\">\n<h3>Install and configure</h3>\n<p>For some help on getting python working on Windows see <a href=\"https://github.com/gilesknap/gphotos-sync/issues/63\" rel=\"nofollow\">https://github.com/gilesknap/gphotos-sync/issues/63</a>.</p>\n<p>On linux, you can install pipenv using <tt>pip3 install <span class=\"pre\">--user</span> pipenv</tt> and then make sure that <tt><span class=\"pre\">~/.local/bin/</span></tt> is in your path.</p>\n<p>To install the latest published version from PyPi, simply:</p>\n<pre>mkdir gphotos-sync\ncd gphotos-sync\npipenv install gphotos-sync\n</pre>\n<p>Or if you don\u2019t want to use pipenv, create a virtual environment and:</p>\n<pre>pip install gphotos-sync\n</pre>\n<p>(see <a href=\"https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/\" rel=\"nofollow\">https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/</a> if you are not familiar with virtualenv)</p>\n<p>To work from the source code, clone the git repository and use pipenv to create a virtual environment and run\nthe code. (if you don\u2019t have pipenv, then I recommend getting it - but you can manually create a virtualenv and use\n\u2018python setup.py install\u2019 instead)</p>\n<pre>git clone https://github.com/gilesknap/gphotos-sync.git\ncd gphotos-sync\npipenv install .\npipenv run gphotos-sync\n</pre>\n<p>In order to work, <tt><span class=\"pre\">gphotos-sync</span></tt> first needs a valid client id linked to a project\nauthorized to use the \u2018Photos Library API\u2019. It is not provided in the distribution. Each client id\nis given a (large) limited number of free API calls to Google Services. If this distribution shared the client id,\nall users would share this resource limit. This is a little fiddly but only needs to be done once.</p>\n<p>To do this:</p>\n<ul>\n<li>Create a project on <a href=\"https://developers.google.com/console/\" rel=\"nofollow\">Google Developer Console</a>, following the <a href=\"https://cloud.google.com/resource-manager/docs/creating-managing-projects\" rel=\"nofollow\">Creating a project procedure</a>,</li>\n<li>Authorize it to use the \u2018Photos Library API\u2019, following the <a href=\"https://cloud.google.com/apis/docs/enable-disable-apis\" rel=\"nofollow\">Activating and deactivating APIs procedure</a>,</li>\n<li>Create a Client ID by following the <a href=\"https://support.google.com/cloud/answer/6158849?hl=en\" rel=\"nofollow\">setting up oauth 2.0 procedure</a> with application type set to <strong>Other</strong></li>\n<li>Once the client ID is created, download it as <tt>client_secret.json</tt> and save it under the application\nconfiguration directory:<ul>\n<li><tt>~/Library/Application <span class=\"pre\">Support/gphotos-sync/</span></tt> under Mac OS X,</li>\n<li><tt><span class=\"pre\">~/.config/gphotos-sync/</span></tt> under Linux,</li>\n<li><tt><span class=\"pre\">C:\\Users\\&lt;username&gt;\\AppData\\Local\\gphotos-sync\\gphotos-sync\\</span></tt> under Windows.</li>\n</ul>\n</li>\n</ul>\n<p>Also note that for Windows you will need to enable symbolic links permission for the account that gphoto-sync\nwill run under. See <a href=\"https://community.perforce.com/s/article/3472\" rel=\"nofollow\">Enabling SymLinks on Windows</a>.</p>\n</div>\n<div id=\"how-to-use-it\">\n<h3>How to use it</h3>\n<p>Once the script is configured, you are now ready to use it using the simple following command line:</p>\n<pre>cd &lt;installed directory&gt;\npipenv run gphotos-sync TARGET_DIRECTORY\n</pre>\n<p>Or, if you used virtualenv and pip instead of pipenv, activate the virtualenv and:</p>\n<pre>gphotos-sync TARGET_DIRECTORY\n</pre>\n<p>The first time, it will give you a link to an authorization page in order to authorize the client to access your\nGoogle Photos.</p>\n<p>For a description of additional command line parameters type:</p>\n<pre>gphotos-sync --help\n</pre>\n</div>\n<div id=\"running-with-docker\">\n<h3>Running with docker</h3>\n<p>You can run the tool from the container using <a href=\"https://hub.docker.com/r/gilesknap/gphotos-sync\" rel=\"nofollow\">prebuilt Docker image</a>. The container has 2 mount points:</p>\n<ul>\n<li><tt>/storage</tt> this is where your photos will be stored. You can mount single directory, or multiple subdirectories in case you want to backup multiple accounts</li>\n<li><tt>/config</tt> the directory that contains <cite>client_secret.json</cite> file</li>\n</ul>\n<p>To run</p>\n<pre>docker run \\\n   -ti \\\n   --name gphotos-sync \\\n   -v /YOUR_LOCAL/PATH/TO_PHOTOS:/storage \\\n   -v /YOUR_LOCAL/PATH/TO_CONFIG:/config \\\n   gilesknap/gphotos-sync \\\n  /storage\n</pre>\n<p>To remove the container (for instance if you want to run it on scheduled basis and do a cleanup):</p>\n<pre>docker rm -f $(docker ps --filter name=gphotos-sync -qa) 2&gt; /dev/null\n</pre>\n<p>To run then remove the container:</p>\n<pre>docker run \\\n  --rm \\\n  -it \\\n  --name gphotos-sync \\\n  -v /YOUR_LOCAL/PATH/TO_PHOTOS:/storage \\\n  -v /YOUR_LOCAL/PATH/TO_CONFIG/client_id.json:/config/client_secret.json:ro \\\n  gilesknap/gphotos-sync \\\n  --log-level INFO \\\n  /storage\n</pre>\n</div>\n</div>\n<div id=\"appendix\">\n<h2>Appendix</h2>\n<div id=\"rescans\">\n<h3>Rescans</h3>\n<p>I have just experienced an issue with duplication of files when doing a rescan\n(\u2013rescan or \u2013flush-index). It looks like some items have changed in the\nlibrary and this can result in the same file downloading\ntwice. I would guess this has something to do with Google removing the\nDrive link to Photos.</p>\n<p>UPDATE: I now know that this was caused by subtle changes in the metadata.\nIt seems Google does not guarantee to deliver exactly the same files each\ntime you scan the library (but to be fair, I think they are tuning things for\nthe better).</p>\n<p>The problem did cause some duplicate named files to be downloaded twice\noverwriting their duplicate peer. Note that no files were lost from the library\n(since gphotos is read-only) and it was possible to repair things by either:</p>\n<ul>\n<li>using the local comparison feature of gphotos-sync against a prior backup</li>\n<li>or downloading the library again from scratch</li>\n</ul>\n<p>In summary, most people will not be affected by the issue I\nhad unless they have very old photos with duplicate file names.</p>\n<p>My detailed notes on the subject are here: <a href=\"https://docs.google.com/document/d/1hK_GDLUwP7PpD1VmDbDsYLyTfbZGv2C-JCihezYhiLY/edit?usp=sharing\" rel=\"nofollow\">giles notes</a></p>\n</div>\n<div id=\"google-gps-info-update\">\n<h3>Google GPS Info update</h3>\n<p>UPDATE: the GPS scraping no longer works and has been removed. I am investigating a couple of other avenues.</p>\n<p>Google does not seem to be interested in fxing the issue of stripping location info from the EXIF info of images\ndownloaded via their API (see <a href=\"https://issuetracker.google.com/issues/80379228#comment80\" rel=\"nofollow\">https://issuetracker.google.com/issues/80379228#comment80</a>). So I am investigating a workaround. See the option \u2013get-locations. It uses\nSelenium to scrape the GPS info off of the Google Website (your google creds required I\u2019m afraid) and\ninsert them into the DB of synchronized files. It does not yet update the EXIF on the local files but this\nis a minor addition and I\u2019ll implement if there is interest.</p>\n<p>Have a try and let me know what you think. Hurry, because Google is removing the ability to log in using\nautomation soon!</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6685233, "releases": {"2.10": [{"comment_text": "", "digests": {"md5": "a905bf48a7e66f04880ac074cfe83740", "sha256": "c9b494ba56d0072e598394a29a60cf82367ea51cb024478f3f58eb08bc908521"}, "downloads": -1, "filename": "gphotos-sync-2.10.tar.gz", "has_sig": false, "md5_digest": "a905bf48a7e66f04880ac074cfe83740", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 46987, "upload_time": "2019-09-10T21:28:22", "upload_time_iso_8601": "2019-09-10T21:28:22.528881Z", "url": "https://files.pythonhosted.org/packages/cc/85/c846201df6eaa38482a423d9793b80ed78f3802eff62b5d224c8b96a483a/gphotos-sync-2.10.tar.gz", "yanked": false}], "2.10.1": [{"comment_text": "", "digests": {"md5": "63989f5e6535a39dcd5b77ce96ac389d", "sha256": "182dcc49c2a15bcdfc7a9d50c6171da9443aadf8bca3bde22277bb3d06edc2e1"}, "downloads": -1, "filename": "gphotos-sync-2.10.1.tar.gz", "has_sig": false, "md5_digest": "63989f5e6535a39dcd5b77ce96ac389d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44038, "upload_time": "2019-09-11T06:47:57", "upload_time_iso_8601": "2019-09-11T06:47:57.930888Z", "url": "https://files.pythonhosted.org/packages/55/df/abc39d278d921efa370dc6a93ac95d3a2907185ad16717910ced0cce4e43/gphotos-sync-2.10.1.tar.gz", "yanked": false}], "2.10.2": [{"comment_text": "", "digests": {"md5": "f32dcccf98544c59d21962997a5e9c0f", "sha256": "bf3dcfbc818ecc48d746c4fbedf0a9acb9ead294905ea578adcfea536a4f5fe9"}, "downloads": -1, "filename": "gphotos-sync-2.10.2.tar.gz", "has_sig": false, "md5_digest": "f32dcccf98544c59d21962997a5e9c0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49129, "upload_time": "2019-10-30T07:25:25", "upload_time_iso_8601": "2019-10-30T07:25:25.135914Z", "url": "https://files.pythonhosted.org/packages/2f/98/11bc95e11c7347a07db73d2c85c58b12715537c4a616142ffc75a1e5daac/gphotos-sync-2.10.2.tar.gz", "yanked": false}], "2.10.3": [{"comment_text": "", "digests": {"md5": "ad7df0728bdf85eb51f57ceeb73aa73a", "sha256": "ca3a5e15df61e2790e6653dfd963eb74b43dc04fd4bcadb13dd3e6385f9b3058"}, "downloads": -1, "filename": "gphotos-sync-2.10.3.tar.gz", "has_sig": false, "md5_digest": "ad7df0728bdf85eb51f57ceeb73aa73a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 49327, "upload_time": "2019-11-03T09:41:55", "upload_time_iso_8601": "2019-11-03T09:41:55.480619Z", "url": "https://files.pythonhosted.org/packages/46/24/ea0aa4311b8526be294fcb3e8c04a1a41b4984c00148ba79cd87ca959a3c/gphotos-sync-2.10.3.tar.gz", "yanked": false}], "2.10.4": [{"comment_text": "", "digests": {"md5": "cde3cf4536871a8382c081cdc30047b0", "sha256": "853f84358b56188a28053e759cd25d7d36d31e9e6d90422b943bc7137649545c"}, "downloads": -1, "filename": "gphotos-sync-2.10.4.tar.gz", "has_sig": false, "md5_digest": "cde3cf4536871a8382c081cdc30047b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 47163, "upload_time": "2019-12-29T13:44:56", "upload_time_iso_8601": "2019-12-29T13:44:56.483631Z", "url": "https://files.pythonhosted.org/packages/61/cc/f93c1a9050ca0c4ee23920f7b2aa13f74f30bffd76166f524fc2bd8d1921/gphotos-sync-2.10.4.tar.gz", "yanked": false}], "2.14.0": [{"comment_text": "", "digests": {"md5": "dbadc502428ffb9db506de9692758b26", "sha256": "bd88a1e37396dbdc9997c3f6a49879c0289aa659f9ceefc1943b01fa6b66c9c9"}, "downloads": -1, "filename": "gphotos-sync-2.14.0.tar.gz", "has_sig": false, "md5_digest": "dbadc502428ffb9db506de9692758b26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 58473, "upload_time": "2020-02-17T21:29:37", "upload_time_iso_8601": "2020-02-17T21:29:37.819659Z", "url": "https://files.pythonhosted.org/packages/52/2a/bd31970dc27e264d578bac90475bc234198c126f74c042014118d174ebea/gphotos-sync-2.14.0.tar.gz", "yanked": false}], "2.14.0b4": [{"comment_text": "", "digests": {"md5": "9cbdc27fea18dfff2ced8e4030fa2df7", "sha256": "249fcfe54691b7660a08b5adb296addb1cdcd98da15133ca58696c3e0a86adf3"}, "downloads": -1, "filename": "gphotos_sync-2.14.0b4-py3-none-any.whl", "has_sig": false, "md5_digest": "9cbdc27fea18dfff2ced8e4030fa2df7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 51246, "upload_time": "2020-02-14T13:43:34", "upload_time_iso_8601": "2020-02-14T13:43:34.212992Z", "url": "https://files.pythonhosted.org/packages/1e/8e/08d99c7c24ea9c2be1bba3883b17a23ee7e21617e5c960327aea25c36f50/gphotos_sync-2.14.0b4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9d54d5196ef806f200feb5613608918e", "sha256": "e4d24fd3e612c1338178a25410f96af3738b99bc6bdd67245a412f89573641ab"}, "downloads": -1, "filename": "gphotos-sync-2.14.0b4.tar.gz", "has_sig": false, "md5_digest": "9d54d5196ef806f200feb5613608918e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 58228, "upload_time": "2020-02-14T13:43:35", "upload_time_iso_8601": "2020-02-14T13:43:35.758184Z", "url": "https://files.pythonhosted.org/packages/a2/a5/01a1e2ecb45745ac197f80902b1dca979bc80339ff800dd64edfe4ac53ca/gphotos-sync-2.14.0b4.tar.gz", "yanked": false}], "2.14.0b5": [{"comment_text": "", "digests": {"md5": "4da36d58cc427c21c04a561b922bd922", "sha256": "47f7441651d3bd001507c3b8d163b636428a247aa1c3a5ae65867debd0c437cd"}, "downloads": -1, "filename": "gphotos-sync-2.14.0b5.tar.gz", "has_sig": false, "md5_digest": "4da36d58cc427c21c04a561b922bd922", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 58307, "upload_time": "2020-02-17T08:23:40", "upload_time_iso_8601": "2020-02-17T08:23:40.311603Z", "url": "https://files.pythonhosted.org/packages/10/b4/c32ba1312a1fc949db0d29fea83131d8d2a374db437d419ae50a47c1f39a/gphotos-sync-2.14.0b5.tar.gz", "yanked": false}], "2.14.1b1": [{"comment_text": "", "digests": {"md5": "adff51a85064bb8c58f49aaf02268f97", "sha256": "b020992f2e30a3e4ab84399a81cdafc932be743cca14bf0384f9d5a3fb947f9d"}, "downloads": -1, "filename": "gphotos-sync-2.14.1b1.tar.gz", "has_sig": false, "md5_digest": "adff51a85064bb8c58f49aaf02268f97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 59463, "upload_time": "2020-02-23T20:11:09", "upload_time_iso_8601": "2020-02-23T20:11:09.483876Z", "url": "https://files.pythonhosted.org/packages/3c/b8/151274eda3675c2670b5ed514e71a96668ea8ff996b05a90c2309a65fb72/gphotos-sync-2.14.1b1.tar.gz", "yanked": false}], "2.8.3": [{"comment_text": "", "digests": {"md5": "6b077d6b3436512aff6fa9d024fb4f30", "sha256": "d439d9beadd460b8b79257c3eb0986bcd7305497dd8136b011496314dfb31a7d"}, "downloads": -1, "filename": "gphotos-sync-2.8.3.tar.gz", "has_sig": false, "md5_digest": "6b077d6b3436512aff6fa9d024fb4f30", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 36778, "upload_time": "2019-02-25T23:40:55", "upload_time_iso_8601": "2019-02-25T23:40:55.756166Z", "url": "https://files.pythonhosted.org/packages/62/81/43faaf2be7df80ccba739111209680d9d84a2b2a651bec15c2db5249f5d9/gphotos-sync-2.8.3.tar.gz", "yanked": false}], "2.8.4": [{"comment_text": "", "digests": {"md5": "d31589b1cc42c6128d2669c6ab6b4e45", "sha256": "38e141e0491c61fb27819d9c1dd5f9ed4c849ad8a89a5e1d7b306e9b49cd29c0"}, "downloads": -1, "filename": "gphotos-sync-2.8.4.tar.gz", "has_sig": false, "md5_digest": "d31589b1cc42c6128d2669c6ab6b4e45", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38845, "upload_time": "2019-03-04T23:44:05", "upload_time_iso_8601": "2019-03-04T23:44:05.728537Z", "url": "https://files.pythonhosted.org/packages/f2/f4/2d4bc35a09405de5d743b27f28d1f56c439b51e49f21b7f039c80e182405/gphotos-sync-2.8.4.tar.gz", "yanked": false}], "2.8.5": [{"comment_text": "", "digests": {"md5": "135998d5e3781e39703eaddc1271ede8", "sha256": "f2ce0fb85c17fa807e0b085105af77a0d079287490277b949108a295d4c82f4f"}, "downloads": -1, "filename": "gphotos-sync-2.8.5.tar.gz", "has_sig": false, "md5_digest": "135998d5e3781e39703eaddc1271ede8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 41131, "upload_time": "2019-03-14T21:24:58", "upload_time_iso_8601": "2019-03-14T21:24:58.856507Z", "url": "https://files.pythonhosted.org/packages/0e/4f/0f146b915e28c0629c545111d187c973816501f0eed2d209d7cfc549c864/gphotos-sync-2.8.5.tar.gz", "yanked": false}], "2.8.6": [{"comment_text": "", "digests": {"md5": "8ce4431e0dd1a76aafaaee5478ebf406", "sha256": "ee183913ef3b5a703b064cac07d4f39cbaf87331b30677962fa4c42e8b036848"}, "downloads": -1, "filename": "gphotos-sync-2.8.6.tar.gz", "has_sig": false, "md5_digest": "8ce4431e0dd1a76aafaaee5478ebf406", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 41436, "upload_time": "2019-05-20T11:44:48", "upload_time_iso_8601": "2019-05-20T11:44:48.175592Z", "url": "https://files.pythonhosted.org/packages/56/15/d121d994c21322bc06f62ed279454af6b184e338f844d066c66d0328ceee/gphotos-sync-2.8.6.tar.gz", "yanked": false}], "2.9": [{"comment_text": "", "digests": {"md5": "5e427f6ab3171a3eeb86cf5f07913c10", "sha256": "cbee59466bd965c333f801b2dab836afcf3c4e22ac55380ca5867e7a9c587d7c"}, "downloads": -1, "filename": "gphotos-sync-2.9.tar.gz", "has_sig": false, "md5_digest": "5e427f6ab3171a3eeb86cf5f07913c10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44287, "upload_time": "2019-07-10T20:50:44", "upload_time_iso_8601": "2019-07-10T20:50:44.302784Z", "url": "https://files.pythonhosted.org/packages/8c/1a/42389acdad2b41c3a85cfca0008e229ac3796644a22f3d5d5bcc0e7d1d2b/gphotos-sync-2.9.tar.gz", "yanked": false}], "2.9.1": [{"comment_text": "", "digests": {"md5": "966147a36d4f3aec60e47078f7e20269", "sha256": "ff7448ddc5976dae76f572c6ac11407513069c9308bc4459e412b024be835764"}, "downloads": -1, "filename": "gphotos-sync-2.9.1.tar.gz", "has_sig": false, "md5_digest": "966147a36d4f3aec60e47078f7e20269", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 46390, "upload_time": "2019-07-31T11:09:50", "upload_time_iso_8601": "2019-07-31T11:09:50.044681Z", "url": "https://files.pythonhosted.org/packages/d1/ae/6182f99acd445014dd6da656166aeec0747f98bab04bf15b1bbe9d8c86a2/gphotos-sync-2.9.1.tar.gz", "yanked": false}], "2.9.2": [{"comment_text": "", "digests": {"md5": "114bffa0bc46b65d1b4426e5120620d0", "sha256": "c596fb2dd309cac309ea0fbab04041cbf322d7d4b02b7cab5271bde4b9d45ee4"}, "downloads": -1, "filename": "gphotos-sync-2.9.2.tar.gz", "has_sig": false, "md5_digest": "114bffa0bc46b65d1b4426e5120620d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45815, "upload_time": "2019-07-31T11:43:23", "upload_time_iso_8601": "2019-07-31T11:43:23.484574Z", "url": "https://files.pythonhosted.org/packages/40/32/4bf5c9346f660bf07d2427223ccb78d6b0c86e8e89ba2c91889b0a926030/gphotos-sync-2.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dbadc502428ffb9db506de9692758b26", "sha256": "bd88a1e37396dbdc9997c3f6a49879c0289aa659f9ceefc1943b01fa6b66c9c9"}, "downloads": -1, "filename": "gphotos-sync-2.14.0.tar.gz", "has_sig": false, "md5_digest": "dbadc502428ffb9db506de9692758b26", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 58473, "upload_time": "2020-02-17T21:29:37", "upload_time_iso_8601": "2020-02-17T21:29:37.819659Z", "url": "https://files.pythonhosted.org/packages/52/2a/bd31970dc27e264d578bac90475bc234198c126f74c042014118d174ebea/gphotos-sync-2.14.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:18 2020"}