{"info": {"author": "Andrew Lamoureux", "author_email": "foo@bar.com", "bugtrack_url": null, "classifiers": ["License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# crcsolver\n\nsolve for data, given a target cyclic redundancy check (CRC)\n\n# Use\n\nWe'll target python's built-in crc32:\n\n```\n>>> import binascii\n>>> binascii.crc32(b'penguin')\n3854672160\n```\n\nNow suppose we lost the 'e'. We have b'p_nguin' and need to solve for that vowel. With bits indexed left-to-right across the input, the missing character is at bits [8,9,10,11,12,13,14,15].\n\n```\n>>> from crcsolver import solve\n>>> solve(b'p_nguin', [8,9,10,11,12,13,14,15], 3854672160, binascii.crc32)\nb'penguin'\n```\n\nThe solve takes what data is known, a list of bits that are unknown, a target CRC result, and a CRC calculating function which it will call while finding a solution.\n\nAny n-bit CRC is solvable with at least n bits of freedom, but might not have a solution with less. Here's a failed attempt to toggle the first 8 bits of b'XXXXXXXX' to the same CRC has b'penguin'. When there is no solution, solve() returns None:\n\n```\n>>> solve(b'XXXXXXXX', range(8), 3854672160, binascii.crc32)\n>>>\n```\n\nWith 32 bits of freedom, a solution exists:\n\n```\n>>> solve(b'XXXXXXXX', range(32), 3854672160, binascii.crc32)\nb'\\xe4\\xaf\\x96#XXXX'\n```\n\nNote the solver doesn't know what data looks nice or not. It will find the first solution, which may not be human readable. Verify:\n\n```\n>>> binascii.crc32(b'\\xe4\\xaf\\x96#XXXX')\n3854672160\n```\n\nOther examples are available in the source distribution under ./tests.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lwerdna/crcsolver", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "crcsolver", "package_url": "https://pypi.org/project/crcsolver/", "platform": "", "project_url": "https://pypi.org/project/crcsolver/", "project_urls": {"Homepage": "https://github.com/lwerdna/crcsolver"}, "release_url": "https://pypi.org/project/crcsolver/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "solve for data, given a target crc", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>crcsolver</h1>\n<p>solve for data, given a target cyclic redundancy check (CRC)</p>\n<h1>Use</h1>\n<p>We'll target python's built-in crc32:</p>\n<pre><code>&gt;&gt;&gt; import binascii\n&gt;&gt;&gt; binascii.crc32(b'penguin')\n3854672160\n</code></pre>\n<p>Now suppose we lost the 'e'. We have b'p_nguin' and need to solve for that vowel. With bits indexed left-to-right across the input, the missing character is at bits [8,9,10,11,12,13,14,15].</p>\n<pre><code>&gt;&gt;&gt; from crcsolver import solve\n&gt;&gt;&gt; solve(b'p_nguin', [8,9,10,11,12,13,14,15], 3854672160, binascii.crc32)\nb'penguin'\n</code></pre>\n<p>The solve takes what data is known, a list of bits that are unknown, a target CRC result, and a CRC calculating function which it will call while finding a solution.</p>\n<p>Any n-bit CRC is solvable with at least n bits of freedom, but might not have a solution with less. Here's a failed attempt to toggle the first 8 bits of b'XXXXXXXX' to the same CRC has b'penguin'. When there is no solution, solve() returns None:</p>\n<pre><code>&gt;&gt;&gt; solve(b'XXXXXXXX', range(8), 3854672160, binascii.crc32)\n&gt;&gt;&gt;\n</code></pre>\n<p>With 32 bits of freedom, a solution exists:</p>\n<pre><code>&gt;&gt;&gt; solve(b'XXXXXXXX', range(32), 3854672160, binascii.crc32)\nb'\\xe4\\xaf\\x96#XXXX'\n</code></pre>\n<p>Note the solver doesn't know what data looks nice or not. It will find the first solution, which may not be human readable. Verify:</p>\n<pre><code>&gt;&gt;&gt; binascii.crc32(b'\\xe4\\xaf\\x96#XXXX')\n3854672160\n</code></pre>\n<p>Other examples are available in the source distribution under ./tests.</p>\n\n          </div>"}, "last_serial": 7177528, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8bf4dc94e186a41148127b4989547865", "sha256": "29fd07fdefedd99cb60dde6b10dd256a8f42f32d0894449176bc5dfd25d8e314"}, "downloads": -1, "filename": "crcsolver-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8bf4dc94e186a41148127b4989547865", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6375, "upload_time": "2020-04-30T15:44:19", "upload_time_iso_8601": "2020-04-30T15:44:19.009079Z", "url": "https://files.pythonhosted.org/packages/a6/ca/a6a48b511b891fbafa468cc3b591fe3fb851685c13141e33c7aa980b4c91/crcsolver-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "079aa35581193e849aa6e704eb43f4b8", "sha256": "b3cbf9988e8aef35a76160a122a85310eef28eb940fe30d89df3750af86942eb"}, "downloads": -1, "filename": "crcsolver-1.0.0.tar.gz", "has_sig": false, "md5_digest": "079aa35581193e849aa6e704eb43f4b8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4542, "upload_time": "2020-04-30T15:44:21", "upload_time_iso_8601": "2020-04-30T15:44:21.377190Z", "url": "https://files.pythonhosted.org/packages/27/d5/64b08a8700eba6009261fad26b487984f7d619c58f9bc00e76a7925973c4/crcsolver-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b58a6b145588b72115977147040556d4", "sha256": "7d1f8959eba5b454e9b7eeeeeb50b773ecf330b24d6e8e05a2dd8e92f42bd3af"}, "downloads": -1, "filename": "crcsolver-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b58a6b145588b72115977147040556d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6428, "upload_time": "2020-05-06T04:40:39", "upload_time_iso_8601": "2020-05-06T04:40:39.559801Z", "url": "https://files.pythonhosted.org/packages/c8/c6/a0dfcf5535bd831a42e0dbae4072863d1a3628938fa65752d366fb3e7a93/crcsolver-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad4e63bbc94a7a436abf924ec554948e", "sha256": "6354a354ae8fa5446c53aba18ff3511090897fb5bf0ed38828b5967582c06ee3"}, "downloads": -1, "filename": "crcsolver-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ad4e63bbc94a7a436abf924ec554948e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4600, "upload_time": "2020-05-06T04:40:41", "upload_time_iso_8601": "2020-05-06T04:40:41.288235Z", "url": "https://files.pythonhosted.org/packages/27/0c/e4c1fe16f99c0cde9054efcc2a72bd2994b4ac2ec87dc0cb9160dba2f961/crcsolver-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b58a6b145588b72115977147040556d4", "sha256": "7d1f8959eba5b454e9b7eeeeeb50b773ecf330b24d6e8e05a2dd8e92f42bd3af"}, "downloads": -1, "filename": "crcsolver-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b58a6b145588b72115977147040556d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6428, "upload_time": "2020-05-06T04:40:39", "upload_time_iso_8601": "2020-05-06T04:40:39.559801Z", "url": "https://files.pythonhosted.org/packages/c8/c6/a0dfcf5535bd831a42e0dbae4072863d1a3628938fa65752d366fb3e7a93/crcsolver-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad4e63bbc94a7a436abf924ec554948e", "sha256": "6354a354ae8fa5446c53aba18ff3511090897fb5bf0ed38828b5967582c06ee3"}, "downloads": -1, "filename": "crcsolver-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ad4e63bbc94a7a436abf924ec554948e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4600, "upload_time": "2020-05-06T04:40:41", "upload_time_iso_8601": "2020-05-06T04:40:41.288235Z", "url": "https://files.pythonhosted.org/packages/27/0c/e4c1fe16f99c0cde9054efcc2a72bd2994b4ac2ec87dc0cb9160dba2f961/crcsolver-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:24 2020"}