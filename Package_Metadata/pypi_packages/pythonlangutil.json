{"info": {"author": "Ehsan Keshavarzian", "author_email": "ehsan985@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==========================\r\nPython Languauge Utilities\r\n==========================\r\n\r\nThis library provides utilities to use features of other languages in Python.\r\n\r\n.. image:: https://badge.fury.io/py/pythonlangutil.svg\r\n    :target: http://badge.fury.io/py/pythonlangutil\r\n    \r\n.. image:: https://travis-ci.org/ehsan-keshavarzian/pythonlangutil.svg?branch=master\r\n        :target: https://travis-ci.org/ehsan-keshavarzian/pythonlangutil\r\n\r\nYou can find a functional example of each feature in the examples directory. Test cases in tests directory run on top of \r\nthese examples to ensure the functionality.\r\n\r\nAccess Modifiers\r\n----------------\r\n\r\nTo identify a variable as private:::\r\n\r\n   from pythonlangutil.access_modifiers import private_variable\r\n    \r\n   class PrivateVariableTest(object):\r\n      def __init__(self):\r\n          self.id = \"123\"\r\n          \r\n      @private_variable('id')\r\n      def __setattr__(self, *args, **kwargs):\r\n          return object.__setattr__(self, *args, **kwargs)\r\n      \r\n      def insider(self):\r\n          self.id = \"321\"\r\n          \r\nTo identify a method as private:::\r\n\r\n   from pythonlangutil.access_modifiers import private_function\r\n    \r\n   class PrivateFunctionTest(object):\r\n      def __init__(self):\r\n          pass\r\n      \r\n      @private_function\r\n      def private_method(self):\r\n          return 'called from inside my own class'\r\n      \r\n      def insider(self):\r\n          return self.private_method()\r\n    \r\nCreating Overloads\r\n------------------\r\n\r\nTo create overloads:::\r\n\r\n   from pythonlangutil.overload import Overload, signature\r\n\r\n   class OverloadTest():\r\n       def __init__(self):\r\n           self.male_pref = \"Mr. %s\"\r\n           self.female_pref = \"Ms. %s\"\r\n           self.general_pref = \"Dear %s\"\r\n       \r\n       @Overload\r\n       @signature(\"str\", \"bool\")\r\n       def my_method(self, name, male):\r\n           if male:\r\n               return self.male_pref % name \r\n           return self.female_pref % name\r\n   \r\n       @my_method.overload\r\n       @signature(\"str\")\r\n       def my_method(self, name):\r\n           return self.general_pref % name\r\n       \r\n       @my_method.overload\r\n       @signature(\"int\", \"str\")\r\n       def my_method(self, times, name):\r\n           return \"\\n\".join([self.general_pref % name for i in range(times)])\r\n\r\nUsing Singleton Model\r\n---------------------\r\nIt prevents the instantiation of the class. The only instance of the class will be accessible through\r\nget_instance() method which will be added to class automatically.\r\n\r\nTo use singleton:::\r\n\r\n   from pythonlangutil.singleton import Singleton\r\n\r\n   @Singleton()\r\n   class SingletonTest():\r\n       def __init__(self):\r\n           pass", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ehsan-keshavarzian/pythonlangutil", "keywords": "language util overload access modifier private singleton", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pythonlangutil", "package_url": "https://pypi.org/project/pythonlangutil/", "platform": "All", "project_url": "https://pypi.org/project/pythonlangutil/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ehsan-keshavarzian/pythonlangutil"}, "release_url": "https://pypi.org/project/pythonlangutil/0.1/", "requires_dist": null, "requires_python": null, "summary": "Utilities for Python programmers with background in other languages.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library provides utilities to use features of other languages in Python.</p>\n<a href=\"http://badge.fury.io/py/pythonlangutil\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pythonlangutil.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/12155c15aa9b243eca05b88baa9ca15e20f9fda9/68747470733a2f2f62616467652e667572792e696f2f70792f707974686f6e6c616e677574696c2e737667\"></a>\n<a href=\"https://travis-ci.org/ehsan-keshavarzian/pythonlangutil\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ehsan-keshavarzian/pythonlangutil.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e072a2c8a94b067b6afbec86b6cc9c878fef2c8/68747470733a2f2f7472617669732d63692e6f72672f656873616e2d6b657368617661727a69616e2f707974686f6e6c616e677574696c2e7376673f6272616e63683d6d6173746572\"></a>\n<p>You can find a functional example of each feature in the examples directory. Test cases in tests directory run on top of\nthese examples to ensure the functionality.</p>\n<div id=\"access-modifiers\">\n<h2>Access Modifiers</h2>\n<p>To identify a variable as private::</p>\n<pre>from pythonlangutil.access_modifiers import private_variable\n\nclass PrivateVariableTest(object):\n   def __init__(self):\n       self.id = \"123\"\n\n   @private_variable('id')\n   def __setattr__(self, *args, **kwargs):\n       return object.__setattr__(self, *args, **kwargs)\n\n   def insider(self):\n       self.id = \"321\"\n</pre>\n<p>To identify a method as private::</p>\n<pre>from pythonlangutil.access_modifiers import private_function\n\nclass PrivateFunctionTest(object):\n   def __init__(self):\n       pass\n\n   @private_function\n   def private_method(self):\n       return 'called from inside my own class'\n\n   def insider(self):\n       return self.private_method()\n</pre>\n</div>\n<div id=\"creating-overloads\">\n<h2>Creating Overloads</h2>\n<p>To create overloads::</p>\n<pre>from pythonlangutil.overload import Overload, signature\n\nclass OverloadTest():\n    def __init__(self):\n        self.male_pref = \"Mr. %s\"\n        self.female_pref = \"Ms. %s\"\n        self.general_pref = \"Dear %s\"\n\n    @Overload\n    @signature(\"str\", \"bool\")\n    def my_method(self, name, male):\n        if male:\n            return self.male_pref % name\n        return self.female_pref % name\n\n    @my_method.overload\n    @signature(\"str\")\n    def my_method(self, name):\n        return self.general_pref % name\n\n    @my_method.overload\n    @signature(\"int\", \"str\")\n    def my_method(self, times, name):\n        return \"\\n\".join([self.general_pref % name for i in range(times)])\n</pre>\n</div>\n<div id=\"using-singleton-model\">\n<h2>Using Singleton Model</h2>\n<p>It prevents the instantiation of the class. The only instance of the class will be accessible through\nget_instance() method which will be added to class automatically.</p>\n<p>To use singleton::</p>\n<pre>from pythonlangutil.singleton import Singleton\n\n@Singleton()\nclass SingletonTest():\n    def __init__(self):\n        pass\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1726651, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b5d443a261044d771239cd05ae334cbc", "sha256": "54cfc6a8f7c2286c20a6f2b724b0e7d91e9b3e6c924f01b5af6748c6bfafb9d5"}, "downloads": -1, "filename": "pythonlangutil-0.1.zip", "has_sig": false, "md5_digest": "b5d443a261044d771239cd05ae334cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7275, "upload_time": "2015-04-26T08:21:40", "upload_time_iso_8601": "2015-04-26T08:21:40.182590Z", "url": "https://files.pythonhosted.org/packages/e7/b7/f689879f8c9b9ae8994b89d8220fc63fddaceda920b12184f45fd5cdb5a8/pythonlangutil-0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b5d443a261044d771239cd05ae334cbc", "sha256": "54cfc6a8f7c2286c20a6f2b724b0e7d91e9b3e6c924f01b5af6748c6bfafb9d5"}, "downloads": -1, "filename": "pythonlangutil-0.1.zip", "has_sig": false, "md5_digest": "b5d443a261044d771239cd05ae334cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7275, "upload_time": "2015-04-26T08:21:40", "upload_time_iso_8601": "2015-04-26T08:21:40.182590Z", "url": "https://files.pythonhosted.org/packages/e7/b7/f689879f8c9b9ae8994b89d8220fc63fddaceda920b12184f45fd5cdb5a8/pythonlangutil-0.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:16:55 2020"}