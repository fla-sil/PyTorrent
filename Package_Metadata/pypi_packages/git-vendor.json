{"info": {"author": "Charles Butler", "author_email": "charles.butler@ubuntu.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "License :: OSI Approved :: MIT License", "Topic :: Software Development"], "description": "# Git Vendor\n\nThis is a utility to aid in vendoring software projects from Git to => [VCS|Directory]\n\n## Why this exists\n\nI like to track my upstream development in github, and I have a hard dependency on some projects that live in bzr/Launchpad. BZR and Launchpad are both great systems, I just have a long running preference for git/github. This python module allows me to track and maintain my history in git, while running exports for tag releases to a directory that is independently tracked by BZR.\n\nI'm not so much concerned with the commit history as I am with ensuring my tags are what make the porting phase, and they are high quality without requiring a joint VCS tree and other plugin wizardry.\n\n## How it works\n\nThe plugin only works with git tags, and will not operate on a dirty branch. This allows me to adopt the workflow of cycle until features/bugs are complete in a given milestone. Export that code to the bzr repository and run a checkin of everything that happened from A -> Z along with a Changelog to track what happened independently of the BZR VCS.  This is a fairly simple process that can be done manually without much fuss - but like anything I do repeatedly: it's even nicer to have a tool do the drone work for me.\n\n\n## Getting Started\n\nClone the repository\n\n    git clone http://github.com/chuckbutler/git-vendor.git\n    cd git-vendor\n\nCreate a virtualenv to isolate dependencies from your system\n\n    virtualenv .venv/\n    source .venv/bin/activate\n    python setup.py install\n\nWhile the virtual env is active, you can call git-vendor like you would any other executable.\n\n    git-vendor -h\n\n#### Basic Usage\n\ngit-vendor works with a single initialized configuration file.\n\n    git-vendor init\n\nThis will create a .vendor-rc file which you can edit and place ignored files. It's pre-populated\nwith some common patterns for you.\n\n    git tag mytag\n\nWhen you are ready to vendor a git repository to bzr:\n\n    git-vendor sync -d /path/to/bzr/repository\n\nyou will be presented with a list of tags from your git repo to pick and export. Now you can head\nover to your bzr repository, commit and push as you see fit. Enjoy!", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/chuckbutler/git-vendor/releases/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/chuckbutler/git-vendor", "keywords": "git,vendor", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "git-vendor", "package_url": "https://pypi.org/project/git-vendor/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/git-vendor/", "project_urls": {"Download": "https://github.com/chuckbutler/git-vendor/releases/", "Homepage": "http://github.com/chuckbutler/git-vendor"}, "release_url": "https://pypi.org/project/git-vendor/0.0.3/", "requires_dist": null, "requires_python": null, "summary": "Vendor tagged releases from git to $VCS", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Git Vendor</p>\n<p>This is a utility to aid in vendoring software projects from Git to =&gt; [VCS|Directory]</p>\n<p>## Why this exists</p>\n<p>I like to track my upstream development in github, and I have a hard dependency on some projects that live in bzr/Launchpad. BZR and Launchpad are both great systems, I just have a long running preference for git/github. This python module allows me to track and maintain my history in git, while running exports for tag releases to a directory that is independently tracked by BZR.</p>\n<p>I\u2019m not so much concerned with the commit history as I am with ensuring my tags are what make the porting phase, and they are high quality without requiring a joint VCS tree and other plugin wizardry.</p>\n<p>## How it works</p>\n<p>The plugin only works with git tags, and will not operate on a dirty branch. This allows me to adopt the workflow of cycle until features/bugs are complete in a given milestone. Export that code to the bzr repository and run a checkin of everything that happened from A -&gt; Z along with a Changelog to track what happened independently of the BZR VCS.  This is a fairly simple process that can be done manually without much fuss - but like anything I do repeatedly: it\u2019s even nicer to have a tool do the drone work for me.</p>\n<p>## Getting Started</p>\n<p>Clone the repository</p>\n<blockquote>\ngit clone <a href=\"http://github.com/chuckbutler/git-vendor.git\" rel=\"nofollow\">http://github.com/chuckbutler/git-vendor.git</a>\ncd git-vendor</blockquote>\n<p>Create a virtualenv to isolate dependencies from your system</p>\n<blockquote>\nvirtualenv .venv/\nsource .venv/bin/activate\npython setup.py install</blockquote>\n<p>While the virtual env is active, you can call git-vendor like you would any other executable.</p>\n<blockquote>\ngit-vendor -h</blockquote>\n<p>#### Basic Usage</p>\n<p>git-vendor works with a single initialized configuration file.</p>\n<blockquote>\ngit-vendor init</blockquote>\n<p>This will create a .vendor-rc file which you can edit and place ignored files. It\u2019s pre-populated\nwith some common patterns for you.</p>\n<blockquote>\ngit tag mytag</blockquote>\n<p>When you are ready to vendor a git repository to bzr:</p>\n<blockquote>\ngit-vendor sync -d /path/to/bzr/repository</blockquote>\n<p>you will be presented with a list of tags from your git repo to pick and export. Now you can head\nover to your bzr repository, commit and push as you see fit. Enjoy!</p>\n\n          </div>"}, "last_serial": 1434935, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "00e10b83627666fc8d1f3dd58c9ee324", "sha256": "1e6192eed2580f7f6a0048c3d150a9d28d5fe7e93c8f6c5afb777b1e730b8ced"}, "downloads": -1, "filename": "git-vendor-0.0.1.tar.gz", "has_sig": false, "md5_digest": "00e10b83627666fc8d1f3dd58c9ee324", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5212, "upload_time": "2015-02-23T14:44:02", "upload_time_iso_8601": "2015-02-23T14:44:02.248115Z", "url": "https://files.pythonhosted.org/packages/6f/70/7d8376a489e8025c4128b793a58f65cdac5094d159b9c79282e7c70209ff/git-vendor-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "46b80ad2dd626cc2f4ac846735278d71", "sha256": "f7e5e6ce8d069683b0cc23169bb646549f5ebba2c545446cb9099ac2bd212773"}, "downloads": -1, "filename": "git-vendor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "46b80ad2dd626cc2f4ac846735278d71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5406, "upload_time": "2015-02-23T16:34:44", "upload_time_iso_8601": "2015-02-23T16:34:44.958436Z", "url": "https://files.pythonhosted.org/packages/c5/81/2ac980e1b4a39d924ec4f221f0c71de7fa96a1ceb16bd332bcf1592ce681/git-vendor-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "46b80ad2dd626cc2f4ac846735278d71", "sha256": "f7e5e6ce8d069683b0cc23169bb646549f5ebba2c545446cb9099ac2bd212773"}, "downloads": -1, "filename": "git-vendor-0.0.3.tar.gz", "has_sig": false, "md5_digest": "46b80ad2dd626cc2f4ac846735278d71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5406, "upload_time": "2015-02-23T16:34:44", "upload_time_iso_8601": "2015-02-23T16:34:44.958436Z", "url": "https://files.pythonhosted.org/packages/c5/81/2ac980e1b4a39d924ec4f221f0c71de7fa96a1ceb16bd332bcf1592ce681/git-vendor-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:44 2020"}