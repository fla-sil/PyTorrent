{"info": {"author": "Benjamin Bruno Meier", "author_email": "benjamin.meier70@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "\u2112azy-\u2112oad\n=========\n\n.. image:: https://img.shields.io/pypi/v/lazy_load.svg\n    :target: https://pypi.python.org/pypi/lazy_load\n    :alt: Latest PyPI version\n\n.. image:: https://travis-ci.org/kutoga/lazy-load.png\n   :target: https://travis-ci.org/kutoga/lazy-load\n   :alt: Latest Travis CI build status\n\nA minimalistic interface that allows lazy evaluation of expressions and function calls.\n\nNote: This small library is highly based on `python-lazy-object-proxy`.\n\nWhy using \u2112azy-\u2112oad? Lazy loading in general may make some software implementations much more efficient.\nEspecially if it is not known if some data has to be loaded or not. Often the resulting code is less efficient,\nbecause eager loading is used or the code is not elegant, because one has to program (somehow) lazy loading.\n\nAdvantages of this library are that lazy-loading may be used quite elegant and effective.\n\nExamples\n^^^^^^^^\n\nIn a loop it might happen that a special condition appears once or even more often. If this is the case,\nan expensive function `expensive_function` is called and on the resulting object an operation has\nto be done. If the expensive function had to called more than once, than the result object may be reused.\n\nPossible implementation:\n\n\n.. code:: python\n\n    def expensive_function():\n        print(\"function evaluation\")\n        ...\n        return result\n\n    obj = None\n    for x, y, p in get_coordinates():\n        if test_for_something(x, y, p):\n            if obj is None:\n                obj = expensive_function()\n            obj.do_something(x, y)\n\nGiven this library, it might be done like this:\n\n\n.. code:: python\n\n    from lazy_load import lazy\n\n    def expensive_function():\n        print(\"function evaluation\")\n        ...\n        return result\n\n    obj = lazy(expensive_function)\n    for x, y, p in get_coordinates():\n        if test_for_something(x, y, p):\n            obj.do_something(x, y)\n\nThere are similar situations outside of loops. The implementation without `lazy-load` might look like this:\n\n\n.. code:: python\n\n    def expensive_function():\n        print(\"function evaluation\")\n        ...\n        return result\n\n    obj = None\n    def get_obj():\n        global obj\n        if obj is None:\n            obj = expensive_function()\n        return obj\n\n    if condition_a:\n        get_obj().xyz()\n    if condition_b:\n        do_something()\n    if condition_c:\n        get_obj().abc()\n\nThis code can be realized much easier with `lazy-load`. Not only is the code shorter, but it is also more readable:\n\n\n.. code:: python\n\n    from lazy_load import lazy\n\n    def expensive_function():\n        print(\"function evaluation\")\n        ...\n        return result\n\n    obj = lazy(expensive_function)\n\n    if condition_a:\n        obj.xyz()\n    if condition_b:\n        do_something()\n    if condition_c:\n        obj.abc()\n\nIt might be the case that the expensive function is used more often and always a lazy evaluation is done.\nIn this case, a decorator might be used to indicate that all function calls to this function shall be lazily\nevaluated. This makes it possible to normally use the function. The behaviour is still the same like in the first example:\n\n\n.. code:: python\n\n    from lazy_load import lazy_func\n\n    @lazy_func\n    def expensive_function():\n        print(\"function evaluation\")\n        ...\n        return result\n\n    obj = expensive_function()\n    for x, y, p in get_coordinates():\n        if test_for_something(x, y, p):\n            obj.do_something(x, y)\n\nA lazy evaluation of functions / methods calls might be done with the `@lazy_func` decorator of with the `lazy`-call. This was already\nshown, therefore the following examples show how to do a one-shot lazy evaluation of a function call:\n\n\n.. code:: python\n\n    from lazy_load import lazy, lz\n\n    def expensive_func(x, y):\n        print(f\"function evaluation with arguments x={x}, y={y}\")\n        ...\n        return result\n\n    # Possibility 1: Use `lazy` with a callable\n    obj = lazy(lambda: expensive_func(a, b))\n\n    # Possibility 2: If it doesn't matter if the argument expressions for the expensive-function are eager evaluated, the call may be simplified:\n    obj = lazy(expensive_func, a, b)\n\n    # Possibility 3: `lazy` has a short version / alias: `lz`\n    obj = lz(expensive_func, a, b)\n\nPython allows it to pass functions around: This is often used for callbacks, but also for other use cases.\nAssuming an expensive function is passed to an object which calls this function and stores the result of\nthe function call in an attribute. Later it might happen that this attribute is used. Depending on the\nprogram flow it also might happen that this attribute is not used. With a lazily evaluated function the\nexpensive function call is only executed if the result is really used. The lazily evaluated version of\na function has the exact same signature as the original function.\n\nOne might now like to have the possibility to on-the-fly convert a callable to a lazily evaluated callable.\nThis might be done in the following way:\n\n\n.. code:: python\n\n    from lazy_load import lazy_func, lf\n\n    def expensive_func(x):\n        print(f\"function evaluation with argument x={x}\")\n        ...\n        return result\n\n    # Possibility 1: Use `lazy_func`.\n    my_obj.do_something(f=lazy_func(expensive_func))\n\n    # Possibility 2: Use `lf` which is an alias of `lazy_func`\n    my_obj.do_something(f=lf(expensive_func))\n\n    # Possibility 3: Use the `\u2112`-\"operator\"\n    my_obj.do_something(f=\u2112[expensive_func])\n\nActually, I want to go deeper into the `\u2112`azy- or `\u2112`-\"operator\". This operator converts on-the-fly a function\nto a lazily evaluated function. Another example:\n\n\n.. code:: python\n\n    from lazy_load import \u2112\n\n    def test(name):\n        print(f\"hey {name}\")\n        return True\n\n    res = test(\"peter\")\n    # prints \"hey peter\"\n\n    test_l = \u2112[test]\n    res = test_l(\"hans\")\n    # prints nothing\n\n    if res:\n        print(\"res is True\")\n    # prints \"hey hans\\nres is True\"\n\nIt is also possible to convert multiple functions to lazily evaluated functions using `\u2112`:\n\n\n.. code:: python\n\n    from lazy_load import \u2112\n\n    def f1(x):\n        print(f\"f1 {x}\")\n        return True\n\n    def f2(x):\n        print(f\"f1 {x}\")\n        return True\n\n    f1_l, f2_l, f3_l = \u2112[f1, f2, lambda x: x == 1]\n    # This is equal to:\n    f1_l = \u2112[f1]\n    f2_l = \u2112[f2]\n    f3_l = \u2112[lambda x: x == 1]\n\nFinally, one might like to decorate a class in a way that all its public methods which have a return\nvalue are lazily evaluated. Public methods are all methods that have a name not starting with `_`.\nMethods with a return value are identificated by the given return type hint which must not be `None`.\nThis behaviour might be done with the `@lazy_class`-decorator (alias: `lc`):\n\n\n.. code:: python\n\n    from lazy_load import lazy_class\n\n    @lazy_class\n    class MyClass:\n        def __init__(self):\n            # Method name starts with \"_\" => is not public; therefore it is eager evaluated\n            pass\n\n        def setX(x) -> None:\n            # Method does not return a value => therefore it is eager evaluated\n            ...\n\n        def do():\n            # Method does not hav a return value type hint =>  therefore it is eager evaluated\n            ...\n\n        def compute() -> int:\n            # Method will always be lazily evaluated\n            ...\n            return result\n\nFinally, it is also possible to force the evaluation of a lazy loading object by using `force_eval` (alias `fe`).\nThis function can safely to used to non-lazy loading objects: It is then just equal to the identity function.\n\n\n.. code:: python\n\n    from lazy_load import lazy, force_eval\n\n    def f1(x):\n        print(f\"f1 {x}\")\n        return True\n\n    lazy_obj = lazy(f1, 1)\n\n    # The following expression prints \"f1 1\" and returns \"True\"\n    force_eval(lazy_obj)\n\nThe `force_eval` function may also be applied to lazy-functions (which are created with `lazy_func(x)`, `@lazy_func`\nor with `\u2112`). This restores the original non-lazy / eager function. For non-lazy functions this call has no effect:\n\n\n.. code:: python\n\n    from lazy_load import lazy_func, force_eval\n\n    @lazy_func\n    def f(x):\n        print(\"hey\")\n        return x**2\n\n    # The following line prints nothing\n    obj = f(2)\n\n    f_eager = force_eval(f)\n\n    # The following line prints \"hey\" and \"obj\" has immediatly the value \"4\"\n    obj = f_eager(2)\n\n\nInstallation\n------------\n\n`pip install lazy-load`\n\nRequirements\n^^^^^^^^^^^^\n\nPython 3.6 or Python 3.7.\n\nLicence\n-------\n\nMIT\n\nAuthors\n-------\n\n`lazy_load` was written by `Benjamin Bruno Meier <benjamin.meier70@gmail.com>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kutoga/lazy-load", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "lazy-load", "package_url": "https://pypi.org/project/lazy-load/", "platform": "", "project_url": "https://pypi.org/project/lazy-load/", "project_urls": {"Homepage": "https://github.com/kutoga/lazy-load"}, "release_url": "https://pypi.org/project/lazy-load/0.8.2/", "requires_dist": ["lazy-object-proxy (>=1.3.1)"], "requires_python": "", "summary": "\u2112azy-\u2112oad - A minimalistic interface that allows the lazy evaluation of expressions. Additional functions and wrappers allow it to easily use the lazy evaluation for functions and classes.", "version": "0.8.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/lazy_load\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1cd25d0bb771897c60e87b5955b73a0bed1f9463/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c617a795f6c6f61642e737667\"></a>\n<a href=\"https://travis-ci.org/kutoga/lazy-load\" rel=\"nofollow\"><img alt=\"Latest Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45a667652e4af8c506999bb0a9bc72a3d82b32bd/68747470733a2f2f7472617669732d63692e6f72672f6b75746f67612f6c617a792d6c6f61642e706e67\"></a>\n<p>A minimalistic interface that allows lazy evaluation of expressions and function calls.</p>\n<p>Note: This small library is highly based on <cite>python-lazy-object-proxy</cite>.</p>\n<p>Why using \u2112azy-\u2112oad? Lazy loading in general may make some software implementations much more efficient.\nEspecially if it is not known if some data has to be loaded or not. Often the resulting code is less efficient,\nbecause eager loading is used or the code is not elegant, because one has to program (somehow) lazy loading.</p>\n<p>Advantages of this library are that lazy-loading may be used quite elegant and effective.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>In a loop it might happen that a special condition appears once or even more often. If this is the case,\nan expensive function <cite>expensive_function</cite> is called and on the resulting object an operation has\nto be done. If the expensive function had to called more than once, than the result object may be reused.</p>\n<p>Possible implementation:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">expensive_function</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"function evaluation\"</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">get_coordinates</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">test_for_something</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">obj</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">expensive_function</span><span class=\"p\">()</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>Given this library, it might be done like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">lazy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">expensive_function</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"function evaluation\"</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">expensive_function</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">get_coordinates</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">test_for_something</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>There are similar situations outside of loops. The implementation without <cite>lazy-load</cite> might look like this:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">expensive_function</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"function evaluation\"</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_obj</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">obj</span>\n    <span class=\"k\">if</span> <span class=\"n\">obj</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">expensive_function</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span>\n\n<span class=\"k\">if</span> <span class=\"n\">condition_a</span><span class=\"p\">:</span>\n    <span class=\"n\">get_obj</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">xyz</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">condition_b</span><span class=\"p\">:</span>\n    <span class=\"n\">do_something</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">condition_c</span><span class=\"p\">:</span>\n    <span class=\"n\">get_obj</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"p\">()</span>\n</pre>\n<p>This code can be realized much easier with <cite>lazy-load</cite>. Not only is the code shorter, but it is also more readable:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">lazy</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">expensive_function</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"function evaluation\"</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">expensive_function</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">condition_a</span><span class=\"p\">:</span>\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">xyz</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">condition_b</span><span class=\"p\">:</span>\n    <span class=\"n\">do_something</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">condition_c</span><span class=\"p\">:</span>\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"p\">()</span>\n</pre>\n<p>It might be the case that the expensive function is used more often and always a lazy evaluation is done.\nIn this case, a decorator might be used to indicate that all function calls to this function shall be lazily\nevaluated. This makes it possible to normally use the function. The behaviour is still the same like in the first example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">lazy_func</span>\n\n<span class=\"nd\">@lazy_func</span>\n<span class=\"k\">def</span> <span class=\"nf\">expensive_function</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"function evaluation\"</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">expensive_function</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">get_coordinates</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"n\">test_for_something</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">):</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<p>A lazy evaluation of functions / methods calls might be done with the <cite>@lazy_func</cite> decorator of with the <cite>lazy</cite>-call. This was already\nshown, therefore the following examples show how to do a one-shot lazy evaluation of a function call:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">lazy</span><span class=\"p\">,</span> <span class=\"n\">lz</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">expensive_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"function evaluation with arguments x=</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">, y=</span><span class=\"si\">{</span><span class=\"n\">y</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"c1\"># Possibility 1: Use `lazy` with a callable</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">expensive_func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Possibility 2: If it doesn't matter if the argument expressions for the expensive-function are eager evaluated, the call may be simplified:</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">expensive_func</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Possibility 3: `lazy` has a short version / alias: `lz`</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">lz</span><span class=\"p\">(</span><span class=\"n\">expensive_func</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<p>Python allows it to pass functions around: This is often used for callbacks, but also for other use cases.\nAssuming an expensive function is passed to an object which calls this function and stores the result of\nthe function call in an attribute. Later it might happen that this attribute is used. Depending on the\nprogram flow it also might happen that this attribute is not used. With a lazily evaluated function the\nexpensive function call is only executed if the result is really used. The lazily evaluated version of\na function has the exact same signature as the original function.</p>\n<p>One might now like to have the possibility to on-the-fly convert a callable to a lazily evaluated callable.\nThis might be done in the following way:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">lazy_func</span><span class=\"p\">,</span> <span class=\"n\">lf</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">expensive_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"function evaluation with argument x=</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<span class=\"c1\"># Possibility 1: Use `lazy_func`.</span>\n<span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">lazy_func</span><span class=\"p\">(</span><span class=\"n\">expensive_func</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Possibility 2: Use `lf` which is an alias of `lazy_func`</span>\n<span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">lf</span><span class=\"p\">(</span><span class=\"n\">expensive_func</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Possibility 3: Use the `\u2112`-\"operator\"</span>\n<span class=\"n\">my_obj</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">=</span><span class=\"n\">\u2112</span><span class=\"p\">[</span><span class=\"n\">expensive_func</span><span class=\"p\">])</span>\n</pre>\n<p>Actually, I want to go deeper into the <cite>\u2112`azy- or `\u2112</cite>-\u201coperator\u201d. This operator converts on-the-fly a function\nto a lazily evaluated function. Another example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">\u2112</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"hey </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"p\">(</span><span class=\"s2\">\"peter\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints \"hey peter\"</span>\n\n<span class=\"n\">test_l</span> <span class=\"o\">=</span> <span class=\"n\">\u2112</span><span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">]</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">test_l</span><span class=\"p\">(</span><span class=\"s2\">\"hans\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints nothing</span>\n\n<span class=\"k\">if</span> <span class=\"n\">res</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"res is True\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># prints \"hey hans\\nres is True\"</span>\n</pre>\n<p>It is also possible to convert multiple functions to lazily evaluated functions using <cite>\u2112</cite>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">\u2112</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">f1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"f1 </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">f2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"f1 </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">f1_l</span><span class=\"p\">,</span> <span class=\"n\">f2_l</span><span class=\"p\">,</span> <span class=\"n\">f3_l</span> <span class=\"o\">=</span> <span class=\"n\">\u2112</span><span class=\"p\">[</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"c1\"># This is equal to:</span>\n<span class=\"n\">f1_l</span> <span class=\"o\">=</span> <span class=\"n\">\u2112</span><span class=\"p\">[</span><span class=\"n\">f1</span><span class=\"p\">]</span>\n<span class=\"n\">f2_l</span> <span class=\"o\">=</span> <span class=\"n\">\u2112</span><span class=\"p\">[</span><span class=\"n\">f2</span><span class=\"p\">]</span>\n<span class=\"n\">f3_l</span> <span class=\"o\">=</span> <span class=\"n\">\u2112</span><span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre>\n<p>Finally, one might like to decorate a class in a way that all its public methods which have a return\nvalue are lazily evaluated. Public methods are all methods that have a name not starting with <cite>_</cite>.\nMethods with a return value are identificated by the given return type hint which must not be <cite>None</cite>.\nThis behaviour might be done with the <cite>@lazy_class</cite>-decorator (alias: <cite>lc</cite>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">lazy_class</span>\n\n<span class=\"nd\">@lazy_class</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Method name starts with \"_\" =&gt; is not public; therefore it is eager evaluated</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setX</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Method does not return a value =&gt; therefore it is eager evaluated</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do</span><span class=\"p\">():</span>\n        <span class=\"c1\"># Method does not hav a return value type hint =&gt;  therefore it is eager evaluated</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">compute</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Method will always be lazily evaluated</span>\n        <span class=\"o\">...</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n</pre>\n<p>Finally, it is also possible to force the evaluation of a lazy loading object by using <cite>force_eval</cite> (alias <cite>fe</cite>).\nThis function can safely to used to non-lazy loading objects: It is then just equal to the identity function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">lazy</span><span class=\"p\">,</span> <span class=\"n\">force_eval</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">f1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"f1 </span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">lazy_obj</span> <span class=\"o\">=</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The following expression prints \"f1 1\" and returns \"True\"</span>\n<span class=\"n\">force_eval</span><span class=\"p\">(</span><span class=\"n\">lazy_obj</span><span class=\"p\">)</span>\n</pre>\n<p>The <cite>force_eval</cite> function may also be applied to lazy-functions (which are created with <cite>lazy_func(x)</cite>, <cite>@lazy_func</cite>\nor with <cite>\u2112</cite>). This restores the original non-lazy / eager function. For non-lazy functions this call has no effect:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lazy_load</span> <span class=\"kn\">import</span> <span class=\"n\">lazy_func</span><span class=\"p\">,</span> <span class=\"n\">force_eval</span>\n\n<span class=\"nd\">@lazy_func</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"hey\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n<span class=\"c1\"># The following line prints nothing</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">f_eager</span> <span class=\"o\">=</span> <span class=\"n\">force_eval</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The following line prints \"hey\" and \"obj\" has immediatly the value \"4\"</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">f_eager</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p><cite>pip install lazy-load</cite></p>\n</div>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>Python 3.6 or Python 3.7.</p>\n<div id=\"licence\">\n<h3>Licence</h3>\n<p>MIT</p>\n</div>\n<div id=\"authors\">\n<h3>Authors</h3>\n<p><cite>lazy_load</cite> was written by <a href=\"mailto:benjamin.meier70%40gmail.com\">Benjamin Bruno Meier</a>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4382852, "releases": {"0.8.1": [{"comment_text": "", "digests": {"md5": "4834d8865af77714433f7e9e70c38f0b", "sha256": "2b66de72a5e7efaaeb683883634a898d24613b039dca0c5f6f92eba4d8b99405"}, "downloads": -1, "filename": "lazy_load-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4834d8865af77714433f7e9e70c38f0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6921, "upload_time": "2018-10-15T20:59:22", "upload_time_iso_8601": "2018-10-15T20:59:22.499252Z", "url": "https://files.pythonhosted.org/packages/1b/fd/32b453a93511a088e328dacad377df45318bea98cca244deb7c21a423bcd/lazy_load-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cab0815b19311307b71e7a0b50bb415c", "sha256": "8f5100c3531776c5a620e36151e70bc8ba54f03903a7ed6970eb649865e8559e"}, "downloads": -1, "filename": "lazy_load-0.8.1.tar.gz", "has_sig": false, "md5_digest": "cab0815b19311307b71e7a0b50bb415c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6315, "upload_time": "2018-10-15T20:59:23", "upload_time_iso_8601": "2018-10-15T20:59:23.683993Z", "url": "https://files.pythonhosted.org/packages/bf/b2/cb0493a05981160b21ac946b284335ea6f60cbffbf525abd8abb9063e476/lazy_load-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "fa2dbceee2f55056f73c69f3fe66d130", "sha256": "d58239a8c9632a75686b2a7f9ba9736d81510cfcb50bd36458e23c767e75e799"}, "downloads": -1, "filename": "lazy_load-0.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fa2dbceee2f55056f73c69f3fe66d130", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7126, "upload_time": "2018-10-16T19:04:47", "upload_time_iso_8601": "2018-10-16T19:04:47.124925Z", "url": "https://files.pythonhosted.org/packages/09/46/7ee7b3e969f593cfa78e4ef89556fb99b7709f85556d4c092757f31e049f/lazy_load-0.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53b8a26034bb99ad97ed7f9f241f9764", "sha256": "c2592d899748937edf84dbe107354dc21bef5c85b9e41b13f991a74e026655f9"}, "downloads": -1, "filename": "lazy_load-0.8.2.tar.gz", "has_sig": false, "md5_digest": "53b8a26034bb99ad97ed7f9f241f9764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6526, "upload_time": "2018-10-16T19:04:48", "upload_time_iso_8601": "2018-10-16T19:04:48.295975Z", "url": "https://files.pythonhosted.org/packages/c4/35/05688b9d1c74b3b49b91b315a2fc6c0aa9a13203f8ecefd521a36fe04b69/lazy_load-0.8.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa2dbceee2f55056f73c69f3fe66d130", "sha256": "d58239a8c9632a75686b2a7f9ba9736d81510cfcb50bd36458e23c767e75e799"}, "downloads": -1, "filename": "lazy_load-0.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fa2dbceee2f55056f73c69f3fe66d130", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7126, "upload_time": "2018-10-16T19:04:47", "upload_time_iso_8601": "2018-10-16T19:04:47.124925Z", "url": "https://files.pythonhosted.org/packages/09/46/7ee7b3e969f593cfa78e4ef89556fb99b7709f85556d4c092757f31e049f/lazy_load-0.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53b8a26034bb99ad97ed7f9f241f9764", "sha256": "c2592d899748937edf84dbe107354dc21bef5c85b9e41b13f991a74e026655f9"}, "downloads": -1, "filename": "lazy_load-0.8.2.tar.gz", "has_sig": false, "md5_digest": "53b8a26034bb99ad97ed7f9f241f9764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6526, "upload_time": "2018-10-16T19:04:48", "upload_time_iso_8601": "2018-10-16T19:04:48.295975Z", "url": "https://files.pythonhosted.org/packages/c4/35/05688b9d1c74b3b49b91b315a2fc6c0aa9a13203f8ecefd521a36fe04b69/lazy_load-0.8.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:36 2020"}