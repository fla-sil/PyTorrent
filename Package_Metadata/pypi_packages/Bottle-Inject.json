{"info": {"author": "Marcel Hellkamp", "author_email": "marc@gsites.de", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Bottle Dependency Injection\n===========================\n\nThe Bottle framework already does dependency injection in some regard: The URL parameters of your routes are injected into your handler functions as keyword arguments. Some other Plugins (actually, most plugins) do it, too: They inject database connections, authentication contexts, session objects and much more. This Plugin makes the concept available to you without the need to write a new plugin for every single dependency you want to inject. It also can change the way you use Bottle and write applications in a funcamental way, if you let it. If done right, dependency injection can reduce the complexity and increase testability and readability of your application a lot. But let us start easy, with a simple example::\n\n    app = Bottle()\n    injector = app.install(bottle.ext.inject.Plugin())\n\n    @injector.provider('db')\n    def get_db_handle():\n        return my_database_connection.cursor()\n\n    @app.route('/random_quote')\n    def random_quote(db):\n        row = db.execute('SELECT quote FROM quotes ORDER BY RANDOM() LIMIT 1').fetchone()\n        return row['quote']\n\nThe first two lines are nothing new. We just create a bottle application and install this plugin to it. The next block is more interesting. Similar to how bottle binds handler functions to URL paths, the injector binds providers to injection points. In this case, we bind the provider 'get_db_handle' to the injection point named 'db'. Whenver a function is called through our injector and has an argument with the same name, it recieves a fresh database cursor from our provider. You can see that in the next few lines. Because all handler callbacks are managed by our injector plugin, you just need to accept a 'db' argument and it is automatically injected for us by the plugin. If you define a route that does not accept a 'db' argument, then nothing happens. No database cursor is ever created for that route.\n\nThat little example shows the benefits of dependency injection very well:\n\n* You can unit-test the 'random_quote()' function directly by passing it a fake- or test-database object. No need to set-up the whole application just for testing.\n* No global variables or global state used. The function can be used again in a different context without hassle.\n* You don't have to import `get_db_handle` into every module that defines bottle application routes.\n* You can change the implementation of 'get_db_handle' and it affects every route of your application. No need to search/replace your codebase.\n* Less typing. Be lazy where it counts.\n\nAdvanced usage\n==============\n\nValues, Providers and Resolvers\n-------------------------------\n\nThe dependency value is re-used for every injection and treated as a singleton.\n\nA *provider* returns the requested dependency when called. The provider is called with no arguments every time the dependency is needed.\n\nA *resolver* returns a cache-able *provider* and may accept injection-point specific configuration. The resolver is usually called only once per injection point and the return value is cached. It must return a (callable) provider.\n\nInjection Points\n----------------\n\nTODO: Describe the inject() function and how it is used.\n\n::\n\n    def my_func(\n        db                 # Positional arguments are always recognized as injection points with the same name.\n        a = 'value'        # Keyword arguments with default values are not recognized.\n        b = inject('db')   # Here we explicitly define an injection point. The name of the argument is no longer\n                           #  important.\n        c: inject('db')    # In Python 3 you can use the annotation syntax. (recommended)\n    ):\n        pass\n\n::\n\n    # Python 2\n    def func(name = inject('param', key='value'),\n             file = inject('file', field='upload')):\n        pass\n\n    # Python 3\n    def func(name: inject('param', key='name'),\n             file: inject('file', field='upload')):\n        pass\n\nTODO: Describe the difference between implicit (non-annotated) and explicit (annotated with ``inject()``) injection points. In short: If a resolver is missing, explicit injection points will fail immediately while implcit injection points only fail if they are actually resolved.\n\nTODO: You can disable the injection into unannotized arguments (maybe).\n\nRecursive Dependency Injection\n------------------------------\nTODO: Describe recursive injection (injecting stuff into providers and resolvers), which already works.\n\nDefault injection points\n------------------------\n\nThe plugin comes with a set of pre-defined providers. You can use them right away, or unregister them if you don't want them.\n\n=================  =========================  =====  ===============================================\nInjection Points   Type                       Scope  Description\n=================  =========================  =====  ===============================================\nrequest, req, rq   `bottle.Request`           local\nresponse, res, rs  `bottle.Response`          local\ninjector           `Injector`                 app    The injector itself. Can be used for runtime\n                                                     inspection of injectable values, e.g. by other\n                                                     plugins.\nparams             `bottle.FormsDict`         local  Not implenented.\nparam[name]        `str`                      local  Not implenented.\n=================  =========================  =====  ===============================================\n\nWhat is \"Dependency Injection\"?\n===============================\n\nThe term \"Dependency Injection\" is just a fancy name for a simple concept: The *caller* of a piece of code should *provide* all *depnendencies* the code needs to run. In other words: A function or object should not need to *reach out*, but be *provided* with everything it needs.\n\nA small example probably helps best. The following code does *not* follow dependency injection paradigm::\n\n    db = my_database_connection.cursor()\n\n    def do_stuff():\n        db.execute('...')\n\n    do_stuff()\n\nAnd now, with dependency injection::\n\n    def do_stuff(db):\n        db.execute('...')\n\n    do_stuff(my_database_connection.cursor())\n\nThe only difference is that we now pass the database connction handle to the function explicitly, instead of letting the function fetch it from the global namespace. That's basically it. Now you can easily test `do_stuff` by passing it a fake database connection or a connection to a test database, re-use it in other contexts with different darabases, and the possible side-effects are no longer hidden within the code.\n\nOn the downside, you'd have to type more and pass around a lot of stuff, but that is exactly what this plugin does for you: It manages the dependencies and injects them where needed.\n\nGlossary\n--------\n\nInjector\n    An object that manages *Dependencies*, *Providers* and *Resolvers* and can be asked to inject the required\n    dependencies into a function call.\n\nInjection Point\n    A place to inject dependencies into. This plugin injects into function call arguments most of the time.\n\nConsumer\n    A function or callable that defines dependencies in its call signature so that the injector can inject them.\n\nDependency\n    An object or resource that can be injected.\n\nProvider\n    A function or callable that creates dependencies on demand, or otherwise provides the dependencies for when they are needed.\n\nResolver\n    A function or callable that creates individual providers based on injection-point specific configuration. (Yes, you could call it a dependency-provoder-provider but that sounds aweful)\n\n\n\nChanges\n=======\n\nRoadmap\n-------\n\n* Do stuff ...\n\nChanges 0.1\n-----------\n\n*  Initial version", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/bottlepy/bottle-inject/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Bottle-Inject", "package_url": "https://pypi.org/project/Bottle-Inject/", "platform": "any", "project_url": "https://pypi.org/project/Bottle-Inject/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/bottlepy/bottle-inject/"}, "release_url": "https://pypi.org/project/Bottle-Inject/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "Dependency injection for Bottle.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"bottle-dependency-injection\">\n<h2>Bottle Dependency Injection</h2>\n<p>The Bottle framework already does dependency injection in some regard: The URL parameters of your routes are injected into your handler functions as keyword arguments. Some other Plugins (actually, most plugins) do it, too: They inject database connections, authentication contexts, session objects and much more. This Plugin makes the concept available to you without the need to write a new plugin for every single dependency you want to inject. It also can change the way you use Bottle and write applications in a funcamental way, if you let it. If done right, dependency injection can reduce the complexity and increase testability and readability of your application a lot. But let us start easy, with a simple example:</p>\n<pre>app = Bottle()\ninjector = app.install(bottle.ext.inject.Plugin())\n\n@injector.provider('db')\ndef get_db_handle():\n    return my_database_connection.cursor()\n\n@app.route('/random_quote')\ndef random_quote(db):\n    row = db.execute('SELECT quote FROM quotes ORDER BY RANDOM() LIMIT 1').fetchone()\n    return row['quote']\n</pre>\n<p>The first two lines are nothing new. We just create a bottle application and install this plugin to it. The next block is more interesting. Similar to how bottle binds handler functions to URL paths, the injector binds providers to injection points. In this case, we bind the provider \u2018get_db_handle\u2019 to the injection point named \u2018db\u2019. Whenver a function is called through our injector and has an argument with the same name, it recieves a fresh database cursor from our provider. You can see that in the next few lines. Because all handler callbacks are managed by our injector plugin, you just need to accept a \u2018db\u2019 argument and it is automatically injected for us by the plugin. If you define a route that does not accept a \u2018db\u2019 argument, then nothing happens. No database cursor is ever created for that route.</p>\n<p>That little example shows the benefits of dependency injection very well:</p>\n<ul>\n<li>You can unit-test the \u2018random_quote()\u2019 function directly by passing it a fake- or test-database object. No need to set-up the whole application just for testing.</li>\n<li>No global variables or global state used. The function can be used again in a different context without hassle.</li>\n<li>You don\u2019t have to import <cite>get_db_handle</cite> into every module that defines bottle application routes.</li>\n<li>You can change the implementation of \u2018get_db_handle\u2019 and it affects every route of your application. No need to search/replace your codebase.</li>\n<li>Less typing. Be lazy where it counts.</li>\n</ul>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced usage</h2>\n<div id=\"values-providers-and-resolvers\">\n<h3>Values, Providers and Resolvers</h3>\n<p>The dependency value is re-used for every injection and treated as a singleton.</p>\n<p>A <em>provider</em> returns the requested dependency when called. The provider is called with no arguments every time the dependency is needed.</p>\n<p>A <em>resolver</em> returns a cache-able <em>provider</em> and may accept injection-point specific configuration. The resolver is usually called only once per injection point and the return value is cached. It must return a (callable) provider.</p>\n</div>\n<div id=\"injection-points\">\n<h3>Injection Points</h3>\n<p>TODO: Describe the inject() function and how it is used.</p>\n<pre>def my_func(\n    db                 # Positional arguments are always recognized as injection points with the same name.\n    a = 'value'        # Keyword arguments with default values are not recognized.\n    b = inject('db')   # Here we explicitly define an injection point. The name of the argument is no longer\n                       #  important.\n    c: inject('db')    # In Python 3 you can use the annotation syntax. (recommended)\n):\n    pass\n</pre>\n<pre># Python 2\ndef func(name = inject('param', key='value'),\n         file = inject('file', field='upload')):\n    pass\n\n# Python 3\ndef func(name: inject('param', key='name'),\n         file: inject('file', field='upload')):\n    pass\n</pre>\n<p>TODO: Describe the difference between implicit (non-annotated) and explicit (annotated with <tt>inject()</tt>) injection points. In short: If a resolver is missing, explicit injection points will fail immediately while implcit injection points only fail if they are actually resolved.</p>\n<p>TODO: You can disable the injection into unannotized arguments (maybe).</p>\n</div>\n<div id=\"recursive-dependency-injection\">\n<h3>Recursive Dependency Injection</h3>\n<p>TODO: Describe recursive injection (injecting stuff into providers and resolvers), which already works.</p>\n</div>\n<div id=\"default-injection-points\">\n<h3>Default injection points</h3>\n<p>The plugin comes with a set of pre-defined providers. You can use them right away, or unregister them if you don\u2019t want them.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Injection Points</th>\n<th>Type</th>\n<th>Scope</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>request, req, rq</td>\n<td><cite>bottle.Request</cite></td>\n<td>local</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>response, res, rs</td>\n<td><cite>bottle.Response</cite></td>\n<td>local</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>injector</td>\n<td><cite>Injector</cite></td>\n<td>app</td>\n<td>The injector itself. Can be used for runtime\ninspection of injectable values, e.g. by other\nplugins.</td>\n</tr>\n<tr><td>params</td>\n<td><cite>bottle.FormsDict</cite></td>\n<td>local</td>\n<td>Not implenented.</td>\n</tr>\n<tr><td>param[name]</td>\n<td><cite>str</cite></td>\n<td>local</td>\n<td>Not implenented.</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div id=\"what-is-dependency-injection\">\n<h2>What is \u201cDependency Injection\u201d?</h2>\n<p>The term \u201cDependency Injection\u201d is just a fancy name for a simple concept: The <em>caller</em> of a piece of code should <em>provide</em> all <em>depnendencies</em> the code needs to run. In other words: A function or object should not need to <em>reach out</em>, but be <em>provided</em> with everything it needs.</p>\n<p>A small example probably helps best. The following code does <em>not</em> follow dependency injection paradigm:</p>\n<pre>db = my_database_connection.cursor()\n\ndef do_stuff():\n    db.execute('...')\n\ndo_stuff()\n</pre>\n<p>And now, with dependency injection:</p>\n<pre>def do_stuff(db):\n    db.execute('...')\n\ndo_stuff(my_database_connection.cursor())\n</pre>\n<p>The only difference is that we now pass the database connction handle to the function explicitly, instead of letting the function fetch it from the global namespace. That\u2019s basically it. Now you can easily test <cite>do_stuff</cite> by passing it a fake database connection or a connection to a test database, re-use it in other contexts with different darabases, and the possible side-effects are no longer hidden within the code.</p>\n<p>On the downside, you\u2019d have to type more and pass around a lot of stuff, but that is exactly what this plugin does for you: It manages the dependencies and injects them where needed.</p>\n<div id=\"glossary\">\n<h3>Glossary</h3>\n<dl>\n<dt>Injector</dt>\n<dd>An object that manages <em>Dependencies</em>, <em>Providers</em> and <em>Resolvers</em> and can be asked to inject the required\ndependencies into a function call.</dd>\n<dt>Injection Point</dt>\n<dd>A place to inject dependencies into. This plugin injects into function call arguments most of the time.</dd>\n<dt>Consumer</dt>\n<dd>A function or callable that defines dependencies in its call signature so that the injector can inject them.</dd>\n<dt>Dependency</dt>\n<dd>An object or resource that can be injected.</dd>\n<dt>Provider</dt>\n<dd>A function or callable that creates dependencies on demand, or otherwise provides the dependencies for when they are needed.</dd>\n<dt>Resolver</dt>\n<dd>A function or callable that creates individual providers based on injection-point specific configuration. (Yes, you could call it a dependency-provoder-provider but that sounds aweful)</dd>\n</dl>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"roadmap\">\n<h3>Roadmap</h3>\n<ul>\n<li>Do stuff \u2026</li>\n</ul>\n</div>\n<div id=\"changes-0-1\">\n<h3>Changes 0.1</h3>\n<ul>\n<li>Initial version</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1692995, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "5600d9ffee0622656bf46794469f70d6", "sha256": "33b997327e95b9e7f33915170b8d3e4709c0c529e4df7eccdf0aacc50e90b092"}, "downloads": -1, "filename": "Bottle-Inject-0.0.0.tar.gz", "has_sig": false, "md5_digest": "5600d9ffee0622656bf46794469f70d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6973, "upload_time": "2015-04-18T22:55:08", "upload_time_iso_8601": "2015-04-18T22:55:08.245222Z", "url": "https://files.pythonhosted.org/packages/7a/aa/f7e298f8dc7f0901440ab80ee87459d6eca4086429a3f1a34df0fd9f7788/Bottle-Inject-0.0.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ec3072904dd1170a66021df4aeb82828", "sha256": "8066c9d30aeda81f70e9701fb1eb3b3870089d6bdd831f23384d33bf0d8e4504"}, "downloads": -1, "filename": "Bottle-Inject-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ec3072904dd1170a66021df4aeb82828", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6967, "upload_time": "2015-04-18T22:58:54", "upload_time_iso_8601": "2015-04-18T22:58:54.478647Z", "url": "https://files.pythonhosted.org/packages/14/12/8faa4e8989bcf85bc4efda80ad452101f339aa06a6a8b0aedff7a2af4c74/Bottle-Inject-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a8f92c90f4f57476960898d97cfcc4f4", "sha256": "a4ea0d5bc2130ccfbb7df432ee22d73cb6aea9be62e9ab475ac6fd019ba8e645"}, "downloads": -1, "filename": "Bottle-Inject-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a8f92c90f4f57476960898d97cfcc4f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7987, "upload_time": "2015-08-25T10:31:27", "upload_time_iso_8601": "2015-08-25T10:31:27.228659Z", "url": "https://files.pythonhosted.org/packages/1e/bd/d4bb5be677cf3429ef7c3f1eea3ff7ff3998e556599a785e373c553e1a4c/Bottle-Inject-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "a415833b752728ded104b2de34775ad4", "sha256": "5d4d93eb74d31247bbc158a62d2ac214b167e789fdfa93e1ec3e43389725f9aa"}, "downloads": -1, "filename": "Bottle_Inject-0.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "a415833b752728ded104b2de34775ad4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11106, "upload_time": "2015-08-25T14:19:46", "upload_time_iso_8601": "2015-08-25T14:19:46.450356Z", "url": "https://files.pythonhosted.org/packages/dd/3d/bf09a48c08d2997cf46825f7fe91aa898b7c9be0b8fb3d3fd38f7a68657f/Bottle_Inject-0.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dacebee32946c5f8194c98ddff98dbfa", "sha256": "3dc9e420f223abd68cb1fff4a5282da122e551dce94279747e64b1793c825798"}, "downloads": -1, "filename": "Bottle_Inject-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "dacebee32946c5f8194c98ddff98dbfa", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 11114, "upload_time": "2015-08-25T14:21:17", "upload_time_iso_8601": "2015-08-25T14:21:17.382373Z", "url": "https://files.pythonhosted.org/packages/dd/04/1fe20ad05daf0b8623a6042cf3769d261d7b4133dec2f2a7dca2e8a71b4b/Bottle_Inject-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e94e267bf4d08749ff570207d2f4fc5", "sha256": "bed7b7fb38b91eab3d7a64b5337ef284e664af6837298afd43f29bb3517cdaac"}, "downloads": -1, "filename": "Bottle-Inject-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8e94e267bf4d08749ff570207d2f4fc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8050, "upload_time": "2015-08-25T14:16:49", "upload_time_iso_8601": "2015-08-25T14:16:49.157090Z", "url": "https://files.pythonhosted.org/packages/80/e4/3b697a3944f2863b37ec59ea0a39c867f05b08e69d8a006057c2302692bd/Bottle-Inject-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a415833b752728ded104b2de34775ad4", "sha256": "5d4d93eb74d31247bbc158a62d2ac214b167e789fdfa93e1ec3e43389725f9aa"}, "downloads": -1, "filename": "Bottle_Inject-0.1.3-py2-none-any.whl", "has_sig": false, "md5_digest": "a415833b752728ded104b2de34775ad4", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 11106, "upload_time": "2015-08-25T14:19:46", "upload_time_iso_8601": "2015-08-25T14:19:46.450356Z", "url": "https://files.pythonhosted.org/packages/dd/3d/bf09a48c08d2997cf46825f7fe91aa898b7c9be0b8fb3d3fd38f7a68657f/Bottle_Inject-0.1.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dacebee32946c5f8194c98ddff98dbfa", "sha256": "3dc9e420f223abd68cb1fff4a5282da122e551dce94279747e64b1793c825798"}, "downloads": -1, "filename": "Bottle_Inject-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "dacebee32946c5f8194c98ddff98dbfa", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 11114, "upload_time": "2015-08-25T14:21:17", "upload_time_iso_8601": "2015-08-25T14:21:17.382373Z", "url": "https://files.pythonhosted.org/packages/dd/04/1fe20ad05daf0b8623a6042cf3769d261d7b4133dec2f2a7dca2e8a71b4b/Bottle_Inject-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e94e267bf4d08749ff570207d2f4fc5", "sha256": "bed7b7fb38b91eab3d7a64b5337ef284e664af6837298afd43f29bb3517cdaac"}, "downloads": -1, "filename": "Bottle-Inject-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8e94e267bf4d08749ff570207d2f4fc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8050, "upload_time": "2015-08-25T14:16:49", "upload_time_iso_8601": "2015-08-25T14:16:49.157090Z", "url": "https://files.pythonhosted.org/packages/80/e4/3b697a3944f2863b37ec59ea0a39c867f05b08e69d8a006057c2302692bd/Bottle-Inject-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:33 2020"}