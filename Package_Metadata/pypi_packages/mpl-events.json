{"info": {"author": "Eugene Prilepin", "author_email": "esp.home@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Scientific/Engineering :: Visualization"], "description": "\n# mpl-events\n\n[![PyPI version](https://img.shields.io/pypi/v/mpl-events.svg)](https://pypi.python.org/pypi/mpl-events)\n[![Build status](https://travis-ci.org/espdev/mpl-events.svg?branch=master)](https://travis-ci.org/espdev/mpl-events)\n[![Docs status](https://readthedocs.org/projects/mpl-events/badge/)](https://mpl-events.readthedocs.io/en/latest/)\n[![License](https://img.shields.io/pypi/l/mpl-events.svg)](LICENSE)\n\n**mpl-events** is a tiny library for simple and convenient [matplotlib](https://matplotlib.org/) event handling \nwith minimum boilerplate code. In other words, the library provides high-level API for using [matplotlib event system](https://matplotlib.org/users/event_handling.html).\n\nYou need to handling matplotlib events if you want to manipulate figures and plots/visualizations interactively.\nMatplotlib contains a low-level API for event handling: using ``FigureCanvasBase.mpl_connect`` and\n``FigureCanvasBase.mpl_disconnect`` methods, string-based event names and integer connection identifiers.\n\n## Pros and cons\n\n**Pros**:\n\n* mpl-events provides high-level API, auto disconnecting and cleanup\n* Strings-based event types/names are not used. Intstead, `MplEvent` enum class is used for all event types.\n* Integer connection identifiers are not used. Instead, the connection between event and handler is incapsulated via class `MplEventConnection`\n* mpl-events objects do not own mpl figure and do not create additional references to figure or canvas\n* mpl-events provides convenient base class `MplEventDispatcher` that contains handlers API (with type-hints) for handling all mpl events inside one class without boilerplate code\n\n**Cons**:\n\n* Additional level of abstraction (if this can be considered a disadvantage)\n* Additional dependency in your project\n\n## Installation\n\n![Supported Python versions](https://img.shields.io/pypi/pyversions/mpl-events.svg)\n\nYou can use pip to install mpl-events:\n\n```bash\npip install mpl-events\n```\n\nor from github repo:\n\n```bash\npip install git+https://github.com/espdev/mpl-events.git\n```\n\n## Usage\n\n### Event dispatchers\n\nCustom event dispatcher class might be created to handle some matplotlib events just \ninheriting `MplEventDispatcher` class and implementing the required event handlers.\n\nThe following example shows how we can create the dispatcher for handling all mouse events:\n\n```python\nfrom matplotlib import pyplot as plt\nfrom mpl_events import MplEventDispatcher, mpl\n\nclass MouseEventDispatcher(MplEventDispatcher):\n\n    def on_mouse_button_press(self, event: mpl.MouseEvent):\n        print(f'mouse button {event.button} pressed')\n\n    def on_mouse_button_release(self, event: mpl.MouseEvent):\n        print(f'mouse button {event.button} released')\n\n    def on_mouse_move(self, event: mpl.MouseEvent):\n        print(f'mouse moved')\n\n    def on_mouse_wheel_scroll(self, event: mpl.MouseEvent):\n        print(f'mouse wheel scroll {event.step}')\n\nfigure = plt.figure()\n\n# setup figure and make plots is here ...\n\nmouse_dispatcher = MouseEventDispatcher(figure)\n\nplt.show()\n```\n\n`MplEventDispatcher` class provides API (handler methods interface) for all matplotlib events. \nYou may override and implement some of these methods for handling corresponding events.\n\nThe dispatcher might be connected to a canvas using mpl objects `figure` or `axes` (or `canvas`). \nIn general, we do not need to think about it. We just pass `figure` instance to constructor usually.\nBy default connection to events is made automatically. This behavior is controlled by `connect` argument.\n\nAnd it is all. We do not need to worry about connecting/disconnecting or remember mpl event names.\n\nIf we want to use another methods (not `MplEventDispatcher` API) for handling events we can \nuse `mpl_event_handler` decorator inside our dispatcher class.\n\n```python\nfrom mpl_events import MplEventDispatcher, MplEvent, mpl_event_handler, mpl\n\nclass CloseEventDispatcher(MplEventDispatcher):\n\n    @mpl_event_handler(MplEvent.FIGURE_CLOSE)\n    def _close_event_handler(self, event: mpl.CloseEvent):\n        print(f'figure {event.canvas.figure} closing')\n```\n\nAlso we can create event dispatchers hierarchies:\n\n```python\nfrom mpl_events import MplEventDispatcher, mpl\n\nclass MyEventDispatcherBase(MplEventDispatcher):\n    def on_figure_close(self, event: mpl.CloseEvent):\n        print('figure closing from MyEventDispatcherBase')\n\nclass MyEventDispatcher(MyEventDispatcherBase):\n\n    def on_figure_close(self, event: mpl.CloseEvent):\n        super().on_figure_close(event)\n        print('figure closing from MyEventDispatcher')\n\n    def on_figure_resize(self, event: mpl.ResizeEvent):\n        print('figure resizing')\n\n```\n\n### Event connections\n\nThe connection between event and handler incapsulated in `MplEventConnection` class. \nThis class is high level wrapper for `figure.canvas.mpl_connect`/`figure.canvas.mpl_disconnect` mpl API.\n\n`MplEventConnection` can be used if we want to handle events and do not use event dispatcher interface.\n\nIn this case we just create instance of `MplEventConnection` class and pass to constructor\nmpl object for connecting (`figure`, `axes` or `canvas`), event type as `MplEvent` enum and handler as callable.\nBy default connection is made automatically. This behavior is controlled by `connect` argument.\n\n```python\nfrom matplotlib import pyplot as plt\nfrom mpl_events import MplEventConnection, MplEvent, mpl\n\ndef close_handler(event: mpl.CloseEvent):\n    print('figure closing')\n\nfigure = plt.figure()\n\nconn = MplEventConnection(figure, MplEvent.FIGURE_CLOSE, close_handler)\n\nprint(conn)\n# MplEventConnection(event=<FIGURE_CLOSE:close_event>, handler=<function close_handler at 0x0000013FD1002E18>, id=5)\n\nplt.show()\n```\n\nAlso we can use the shortcut for `MplEventConnection` constuction using `make_connection` method of `MplEvent` class:\n\n```python\nfrom mpl_events import MplEvent\n\n...\n\nconn = MplEvent.FIGURE_CLOSE.make_connection(figure, close_handler)\n```\n\n### Disable default key press event handler\n\nMatplotlib figures usually contain navigation bar for some interactions with axes and this navigation bar handles key presses. \nBy default key press handler is connected in `FigureManagerBase` mpl class. \nmpl-events provides `disable_default_key_press_handler` function to disconnect the default key press handler.\nAlso in event dispatcher classes we can use `disable_default_handlers` attribute.\n\nHere is a simple example:\n\n```python\nfrom matplotlib import pyplot as plt\nfrom mpl_events import MplEventDispatcher, mpl\n\nclass KeyEventDispatcher(MplEventDispatcher):\n    disable_default_handlers = True\n\n    def on_key_press(self, event: mpl.KeyEvent):\n        print(f'Pressed key {event.key}')\n\n    def on_key_release(self, event: mpl.KeyEvent):\n        print(f'Released key {event.key}')\n\nfigure = plt.figure()\n\ndispatcher = KeyEventDispatcher(figure)\n\nplt.show()\n```\n\n## Testing\n\nWe use pytest and tox for testing.\n\n## Documentation\n\nPlease see [the latest documentation](https://mpl-events.readthedocs.io/en/latest/).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/espdev/mpl-events", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mpl-events", "package_url": "https://pypi.org/project/mpl-events/", "platform": "", "project_url": "https://pypi.org/project/mpl-events/", "project_urls": {"Homepage": "https://github.com/espdev/mpl-events"}, "release_url": "https://pypi.org/project/mpl-events/0.1.0/", "requires_dist": ["matplotlib (<3.2,>=2.0)"], "requires_python": ">=3.6, <4", "summary": "A tiny library for simple and convenient matplotlib event handling", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>mpl-events</h1>\n<p><a href=\"https://pypi.python.org/pypi/mpl-events\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7af13c23f0855fd619fe632de4f922721d494005/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d706c2d6576656e74732e737667\"></a>\n<a href=\"https://travis-ci.org/espdev/mpl-events\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab7e55ba35bfd1c62501e4770a9a93f3452fbbf6/68747470733a2f2f7472617669732d63692e6f72672f6573706465762f6d706c2d6576656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://mpl-events.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"Docs status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb6beeed140d6b357a2d741d7c3a1952dcc974d3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d706c2d6576656e74732f62616467652f\"></a>\n<a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/895b81cf4a2e12b26febc4ef645f048429badda2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6d706c2d6576656e74732e737667\"></a></p>\n<p><strong>mpl-events</strong> is a tiny library for simple and convenient <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> event handling\nwith minimum boilerplate code. In other words, the library provides high-level API for using <a href=\"https://matplotlib.org/users/event_handling.html\" rel=\"nofollow\">matplotlib event system</a>.</p>\n<p>You need to handling matplotlib events if you want to manipulate figures and plots/visualizations interactively.\nMatplotlib contains a low-level API for event handling: using <code>FigureCanvasBase.mpl_connect</code> and\n<code>FigureCanvasBase.mpl_disconnect</code> methods, string-based event names and integer connection identifiers.</p>\n<h2>Pros and cons</h2>\n<p><strong>Pros</strong>:</p>\n<ul>\n<li>mpl-events provides high-level API, auto disconnecting and cleanup</li>\n<li>Strings-based event types/names are not used. Intstead, <code>MplEvent</code> enum class is used for all event types.</li>\n<li>Integer connection identifiers are not used. Instead, the connection between event and handler is incapsulated via class <code>MplEventConnection</code></li>\n<li>mpl-events objects do not own mpl figure and do not create additional references to figure or canvas</li>\n<li>mpl-events provides convenient base class <code>MplEventDispatcher</code> that contains handlers API (with type-hints) for handling all mpl events inside one class without boilerplate code</li>\n</ul>\n<p><strong>Cons</strong>:</p>\n<ul>\n<li>Additional level of abstraction (if this can be considered a disadvantage)</li>\n<li>Additional dependency in your project</li>\n</ul>\n<h2>Installation</h2>\n<p><img alt=\"Supported Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2dfdd9189a79bebf22af261899450d1562c2527c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d706c2d6576656e74732e737667\"></p>\n<p>You can use pip to install mpl-events:</p>\n<pre>pip install mpl-events\n</pre>\n<p>or from github repo:</p>\n<pre>pip install git+https://github.com/espdev/mpl-events.git\n</pre>\n<h2>Usage</h2>\n<h3>Event dispatchers</h3>\n<p>Custom event dispatcher class might be created to handle some matplotlib events just\ninheriting <code>MplEventDispatcher</code> class and implementing the required event handlers.</p>\n<p>The following example shows how we can create the dispatcher for handling all mouse events:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpl_events</span> <span class=\"kn\">import</span> <span class=\"n\">MplEventDispatcher</span><span class=\"p\">,</span> <span class=\"n\">mpl</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MouseEventDispatcher</span><span class=\"p\">(</span><span class=\"n\">MplEventDispatcher</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_mouse_button_press</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">MouseEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'mouse button </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"si\">}</span><span class=\"s1\"> pressed'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_mouse_button_release</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">MouseEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'mouse button </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"si\">}</span><span class=\"s1\"> released'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_mouse_move</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">MouseEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'mouse moved'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_mouse_wheel_scroll</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">MouseEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'mouse wheel scroll </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">figure</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># setup figure and make plots is here ...</span>\n\n<span class=\"n\">mouse_dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">MouseEventDispatcher</span><span class=\"p\">(</span><span class=\"n\">figure</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p><code>MplEventDispatcher</code> class provides API (handler methods interface) for all matplotlib events.\nYou may override and implement some of these methods for handling corresponding events.</p>\n<p>The dispatcher might be connected to a canvas using mpl objects <code>figure</code> or <code>axes</code> (or <code>canvas</code>).\nIn general, we do not need to think about it. We just pass <code>figure</code> instance to constructor usually.\nBy default connection to events is made automatically. This behavior is controlled by <code>connect</code> argument.</p>\n<p>And it is all. We do not need to worry about connecting/disconnecting or remember mpl event names.</p>\n<p>If we want to use another methods (not <code>MplEventDispatcher</code> API) for handling events we can\nuse <code>mpl_event_handler</code> decorator inside our dispatcher class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mpl_events</span> <span class=\"kn\">import</span> <span class=\"n\">MplEventDispatcher</span><span class=\"p\">,</span> <span class=\"n\">MplEvent</span><span class=\"p\">,</span> <span class=\"n\">mpl_event_handler</span><span class=\"p\">,</span> <span class=\"n\">mpl</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CloseEventDispatcher</span><span class=\"p\">(</span><span class=\"n\">MplEventDispatcher</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@mpl_event_handler</span><span class=\"p\">(</span><span class=\"n\">MplEvent</span><span class=\"o\">.</span><span class=\"n\">FIGURE_CLOSE</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_close_event_handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">CloseEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'figure </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"si\">}</span><span class=\"s1\"> closing'</span><span class=\"p\">)</span>\n</pre>\n<p>Also we can create event dispatchers hierarchies:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mpl_events</span> <span class=\"kn\">import</span> <span class=\"n\">MplEventDispatcher</span><span class=\"p\">,</span> <span class=\"n\">mpl</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyEventDispatcherBase</span><span class=\"p\">(</span><span class=\"n\">MplEventDispatcher</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">on_figure_close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">CloseEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'figure closing from MyEventDispatcherBase'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyEventDispatcher</span><span class=\"p\">(</span><span class=\"n\">MyEventDispatcherBase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_figure_close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">CloseEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">on_figure_close</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'figure closing from MyEventDispatcher'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_figure_resize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">ResizeEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'figure resizing'</span><span class=\"p\">)</span>\n</pre>\n<h3>Event connections</h3>\n<p>The connection between event and handler incapsulated in <code>MplEventConnection</code> class.\nThis class is high level wrapper for <code>figure.canvas.mpl_connect</code>/<code>figure.canvas.mpl_disconnect</code> mpl API.</p>\n<p><code>MplEventConnection</code> can be used if we want to handle events and do not use event dispatcher interface.</p>\n<p>In this case we just create instance of <code>MplEventConnection</code> class and pass to constructor\nmpl object for connecting (<code>figure</code>, <code>axes</code> or <code>canvas</code>), event type as <code>MplEvent</code> enum and handler as callable.\nBy default connection is made automatically. This behavior is controlled by <code>connect</code> argument.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpl_events</span> <span class=\"kn\">import</span> <span class=\"n\">MplEventConnection</span><span class=\"p\">,</span> <span class=\"n\">MplEvent</span><span class=\"p\">,</span> <span class=\"n\">mpl</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">close_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">CloseEvent</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'figure closing'</span><span class=\"p\">)</span>\n\n<span class=\"n\">figure</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">MplEventConnection</span><span class=\"p\">(</span><span class=\"n\">figure</span><span class=\"p\">,</span> <span class=\"n\">MplEvent</span><span class=\"o\">.</span><span class=\"n\">FIGURE_CLOSE</span><span class=\"p\">,</span> <span class=\"n\">close_handler</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n<span class=\"c1\"># MplEventConnection(event=&lt;FIGURE_CLOSE:close_event&gt;, handler=&lt;function close_handler at 0x0000013FD1002E18&gt;, id=5)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>Also we can use the shortcut for <code>MplEventConnection</code> constuction using <code>make_connection</code> method of <code>MplEvent</code> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mpl_events</span> <span class=\"kn\">import</span> <span class=\"n\">MplEvent</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">MplEvent</span><span class=\"o\">.</span><span class=\"n\">FIGURE_CLOSE</span><span class=\"o\">.</span><span class=\"n\">make_connection</span><span class=\"p\">(</span><span class=\"n\">figure</span><span class=\"p\">,</span> <span class=\"n\">close_handler</span><span class=\"p\">)</span>\n</pre>\n<h3>Disable default key press event handler</h3>\n<p>Matplotlib figures usually contain navigation bar for some interactions with axes and this navigation bar handles key presses.\nBy default key press handler is connected in <code>FigureManagerBase</code> mpl class.\nmpl-events provides <code>disable_default_key_press_handler</code> function to disconnect the default key press handler.\nAlso in event dispatcher classes we can use <code>disable_default_handlers</code> attribute.</p>\n<p>Here is a simple example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">matplotlib</span> <span class=\"kn\">import</span> <span class=\"n\">pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mpl_events</span> <span class=\"kn\">import</span> <span class=\"n\">MplEventDispatcher</span><span class=\"p\">,</span> <span class=\"n\">mpl</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">KeyEventDispatcher</span><span class=\"p\">(</span><span class=\"n\">MplEventDispatcher</span><span class=\"p\">):</span>\n    <span class=\"n\">disable_default_handlers</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_key_press</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">KeyEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Pressed key </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">on_key_release</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">mpl</span><span class=\"o\">.</span><span class=\"n\">KeyEvent</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Released key </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"n\">figure</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n\n<span class=\"n\">dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">KeyEventDispatcher</span><span class=\"p\">(</span><span class=\"n\">figure</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h2>Testing</h2>\n<p>We use pytest and tox for testing.</p>\n<h2>Documentation</h2>\n<p>Please see <a href=\"https://mpl-events.readthedocs.io/en/latest/\" rel=\"nofollow\">the latest documentation</a>.</p>\n\n          </div>"}, "last_serial": 5376403, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "42bf785a93ff21028116c46131fa106b", "sha256": "40c90fb0a3ebe458a92b9e8b40741c75bb65717bd9517fa592eb509bd6520d86"}, "downloads": -1, "filename": "mpl_events-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "42bf785a93ff21028116c46131fa106b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 8372, "upload_time": "2019-05-21T11:04:18", "upload_time_iso_8601": "2019-05-21T11:04:18.470482Z", "url": "https://files.pythonhosted.org/packages/ab/c3/ecd326ec20b3960a00c2acdcb74b9f606986d1032010a3175fbc17499163/mpl_events-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "917ac799e779bea59897ea6da1ddf666", "sha256": "4a5a07eb0ec61bac9722a635ec34adabb6d3b4b9b2e26730be8e6db3386944c6"}, "downloads": -1, "filename": "mpl-events-0.0.2.tar.gz", "has_sig": false, "md5_digest": "917ac799e779bea59897ea6da1ddf666", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 6767, "upload_time": "2019-05-21T11:04:21", "upload_time_iso_8601": "2019-05-21T11:04:21.198806Z", "url": "https://files.pythonhosted.org/packages/06/08/e40ca854eb8db6e61c50b6b4c5d2a81b0c079c853cf92897c2f259a340fa/mpl-events-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "83a3c6048ce814346ea5be1ad1385b43", "sha256": "068a1a02d5ecbc76db008e27ff5023772c215ab6cbbf573683dff77104fee977"}, "downloads": -1, "filename": "mpl_events-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "83a3c6048ce814346ea5be1ad1385b43", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 8482, "upload_time": "2019-05-21T12:00:26", "upload_time_iso_8601": "2019-05-21T12:00:26.903314Z", "url": "https://files.pythonhosted.org/packages/77/2f/f9f79c3039b272fb8701dd4e7a3977c1ae57b848fe831374d2f41eb6823e/mpl_events-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70035c26cc76c3229a5ae39bef581ebb", "sha256": "0f5f972a99a8c62cbe8716fc195493f81f2a6411b61833075768d01f6a60e221"}, "downloads": -1, "filename": "mpl-events-0.0.3.tar.gz", "has_sig": false, "md5_digest": "70035c26cc76c3229a5ae39bef581ebb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 6895, "upload_time": "2019-05-21T12:00:28", "upload_time_iso_8601": "2019-05-21T12:00:28.824052Z", "url": "https://files.pythonhosted.org/packages/c2/6d/9dfe59d5544dab86ae5df1137785df7d0b83bb1774b89b899c5dc26c0961/mpl-events-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "7b7647b5a945ffdfe1165007e1377ead", "sha256": "6d1f458b86ea90347cde876610d84df644b54b7bd2ca0551b1371d833b375aae"}, "downloads": -1, "filename": "mpl_events-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "7b7647b5a945ffdfe1165007e1377ead", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 8724, "upload_time": "2019-05-22T15:03:13", "upload_time_iso_8601": "2019-05-22T15:03:13.498807Z", "url": "https://files.pythonhosted.org/packages/ee/a5/53100b24d8304046573dea550aeb9e89f39b51fa70398a94f19f1f315958/mpl_events-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "692c581f1ccbcc207fb84c3998fa061a", "sha256": "8107a5468656d201a76abe744ad1ba66c393aa25ad803b0892c46daec9db6c34"}, "downloads": -1, "filename": "mpl-events-0.0.4.tar.gz", "has_sig": false, "md5_digest": "692c581f1ccbcc207fb84c3998fa061a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 7141, "upload_time": "2019-05-22T15:03:16", "upload_time_iso_8601": "2019-05-22T15:03:16.299994Z", "url": "https://files.pythonhosted.org/packages/93/18/d8b99688a3527f9e0aa921ef94b061696a3fb09bbcc41e35d67178921a77/mpl-events-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "c3ce4e0c2f455327f577ede2169e6d88", "sha256": "dba62c3f35bbd0ebbd8f27ceac4b2b7f31c95a787d086a78a577d77a9bdd22fb"}, "downloads": -1, "filename": "mpl_events-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c3ce4e0c2f455327f577ede2169e6d88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 9813, "upload_time": "2019-05-24T15:12:01", "upload_time_iso_8601": "2019-05-24T15:12:01.985621Z", "url": "https://files.pythonhosted.org/packages/4b/db/2d2ee5012043aae496f36cf24a7792f3f7d9f607287daa77e97f5408fe89/mpl_events-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e0625c5daf3d12b4abb1ac06a141f3c", "sha256": "d688b0ab4b59e81aee4654a8ad5969cac419e058ba475c75a8dead85669176b8"}, "downloads": -1, "filename": "mpl-events-0.0.5.tar.gz", "has_sig": false, "md5_digest": "6e0625c5daf3d12b4abb1ac06a141f3c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 8176, "upload_time": "2019-05-24T15:12:05", "upload_time_iso_8601": "2019-05-24T15:12:05.686079Z", "url": "https://files.pythonhosted.org/packages/cf/b8/cc4de6cfcb2910437767054962a0385f0d6920cad6780eab90cd0bce20c6/mpl-events-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "dbad87dd1fa3ebe7503e18108509ab6c", "sha256": "abd86c82b71c9b283431d4a3d1728c35d003bd147ec95449f477b07c13f1e422"}, "downloads": -1, "filename": "mpl_events-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "dbad87dd1fa3ebe7503e18108509ab6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 9813, "upload_time": "2019-05-27T10:06:31", "upload_time_iso_8601": "2019-05-27T10:06:31.461139Z", "url": "https://files.pythonhosted.org/packages/91/8b/41c749c2ba5c081713a0c8ae77fa5ab26493aa5e77e15fc5fc6b62f79113/mpl_events-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1957748dbf146970189d6d094ee4325b", "sha256": "8ff8a779b76fd518b4a803f519320f0c7f152a68631db18735c6adf9b18c9cc0"}, "downloads": -1, "filename": "mpl-events-0.0.6.tar.gz", "has_sig": false, "md5_digest": "1957748dbf146970189d6d094ee4325b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 8185, "upload_time": "2019-05-27T10:06:34", "upload_time_iso_8601": "2019-05-27T10:06:34.640708Z", "url": "https://files.pythonhosted.org/packages/6e/e1/968ad29216e54da7cad98283a0347118041ec05d38868a6fa54434612529/mpl-events-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "0c4ec778087f5caefcd2e5219b5538f0", "sha256": "bc79960d8c8845f5a096f1917d201db6d2bb9fc9e9242f955d399d81fdcb1f23"}, "downloads": -1, "filename": "mpl_events-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "0c4ec778087f5caefcd2e5219b5538f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 9830, "upload_time": "2019-06-08T06:25:26", "upload_time_iso_8601": "2019-06-08T06:25:26.263484Z", "url": "https://files.pythonhosted.org/packages/27/4b/791130b861f4e05cff239b71550445abe04a9d7ad27d97d194c579126068/mpl_events-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf3ad4b80fced42c88c2ff7eabe4b1a1", "sha256": "f7bd6eaeef708a4b56f016bbb8eb50310827ee4e23328ed871f09c9927ef15fd"}, "downloads": -1, "filename": "mpl-events-0.0.7.tar.gz", "has_sig": false, "md5_digest": "bf3ad4b80fced42c88c2ff7eabe4b1a1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 8193, "upload_time": "2019-06-08T06:25:27", "upload_time_iso_8601": "2019-06-08T06:25:27.975910Z", "url": "https://files.pythonhosted.org/packages/bf/45/f023728498792c3a82d19c0c7dad41abcd815e33abaf89833368d086c51f/mpl-events-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "529a6b05f42c90dd10a61e9f2af05b9e", "sha256": "010cc577752c680a9f65828ed3a345c8dc66c12f19a01ecd0b2852286e9d78a6"}, "downloads": -1, "filename": "mpl_events-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "529a6b05f42c90dd10a61e9f2af05b9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 11339, "upload_time": "2019-06-08T22:34:41", "upload_time_iso_8601": "2019-06-08T22:34:41.949746Z", "url": "https://files.pythonhosted.org/packages/f4/9d/a08191175086afe85d2cc40bec7ea48173a69326b8b4742317c324c48ff3/mpl_events-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ba8a1d7b7da34a1cb5dfa97259c3635", "sha256": "62a652461a8a44f6c647a8cb8adc00074cac98e49726fac149931b84a687b4f3"}, "downloads": -1, "filename": "mpl-events-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ba8a1d7b7da34a1cb5dfa97259c3635", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 9274, "upload_time": "2019-06-08T22:34:43", "upload_time_iso_8601": "2019-06-08T22:34:43.662587Z", "url": "https://files.pythonhosted.org/packages/ba/1b/513ce5a15b35868f0cbc6706f5dbd5e956d241b2b275d897c268ff3c1c80/mpl-events-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "529a6b05f42c90dd10a61e9f2af05b9e", "sha256": "010cc577752c680a9f65828ed3a345c8dc66c12f19a01ecd0b2852286e9d78a6"}, "downloads": -1, "filename": "mpl_events-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "529a6b05f42c90dd10a61e9f2af05b9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6, <4", "size": 11339, "upload_time": "2019-06-08T22:34:41", "upload_time_iso_8601": "2019-06-08T22:34:41.949746Z", "url": "https://files.pythonhosted.org/packages/f4/9d/a08191175086afe85d2cc40bec7ea48173a69326b8b4742317c324c48ff3/mpl_events-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ba8a1d7b7da34a1cb5dfa97259c3635", "sha256": "62a652461a8a44f6c647a8cb8adc00074cac98e49726fac149931b84a687b4f3"}, "downloads": -1, "filename": "mpl-events-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ba8a1d7b7da34a1cb5dfa97259c3635", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <4", "size": 9274, "upload_time": "2019-06-08T22:34:43", "upload_time_iso_8601": "2019-06-08T22:34:43.662587Z", "url": "https://files.pythonhosted.org/packages/ba/1b/513ce5a15b35868f0cbc6706f5dbd5e956d241b2b275d897c268ff3c1c80/mpl-events-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:13 2020"}