{"info": {"author": "John Oxley", "author_email": "john.oxley@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Testing"], "description": "FpTest\n======\n\n.. image:: https://pypip.in/v/FpTest/badge.png\n    :alt: Release Status\n    :target: https://pypi.python.org/pypi/fptest\n\n.. image:: https://travis-ci.org/oxo42/FpTest.svg?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.org/oxo42/FpTest\n\nOverview\n========\n\n.. code-block:: python\n\n class TerminateGponLinkTest(fptest.FpTest):\n     def test_workorders(self):\n         expected_workorders = [('LST-ONTDETAIL', 'WOS_Completed'), ('DEL-ONT', 'WOS_Completed')]\n         actual_workorders = [(wo.name, wo.status) for wo in self.cart_order_tracing.outgoing_workorders]\n         self.assertListEqual(expected_workorders, actual_workorders)\n\n     def request(self):\n         return \"\"\"\n <request>\n     <so>\n         <orderId>1412685518565</orderId>\n         <sod>\n            <!-- Snipped for brevity -->\n \"\"\"\n\n\n``fptest.FpTest`` extends ``unittest.TestCase`` and overrides the ``setUp`` method to post the contents of ``request()`` to FP.\nIt then parses ``../runtime/FPNode/cartOrderTracing.00000.log`` into a format where it is much easier to pull information\nout of the trace file.\n\nYou can then write tests in Python that are expressive and repeatable.  I am using\nnosetests_ and the ``--with-xunit`` flag to output a file of test results that Jenkins is\npost-processing!\n\n.. _nosetests: https://nose.readthedocs.org/\n\nInstallation\n============\n\n::\n\n    pip install fptest\n\nSetup\n=====\n\nThe following file structure is assumed::\n\n    FP-Project/\n    |-- IntegrationTests\n    `-- runtime\n        `-- FPNode\n\nThe directory structure is important as FpTest will look in ``../runtime/FPNode`` for the cartOrderTracing log file.\n\nSamples\n=======\n\nThere are two samples in the ``/samples`` directory of this project.  These are tests that I am successfully running\nagainst my instance of FP.\n\nDocumentation to come\n=====================\n\n* Explanation of setting up cartridge simulators to pass / fail depending on input values\n* Explanation of ``raw_params`` and ``params`` in the work order\n* Explanation of ``self.fp_url`` and ``self.fp_node_dir``\n* Explanation of ``Trace`` and ``WorkOrder``\n* Order id and ``self.now()``", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oxo42/FpTest", "keywords": null, "license": "Apache", "maintainer": null, "maintainer_email": null, "name": "fptest", "package_url": "https://pypi.org/project/fptest/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fptest/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/oxo42/FpTest"}, "release_url": "https://pypi.org/project/fptest/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A TIBCO Fulfilment Provisioning test helper", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"fptest\">\n<h2>FpTest</h2>\n<a href=\"https://pypi.python.org/pypi/fptest\" rel=\"nofollow\"><img alt=\"Release Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6e8e53eac74f86a8f47e076bdebc7684a1118d05/68747470733a2f2f70797069702e696e2f762f4670546573742f62616467652e706e67\"></a>\n<a href=\"https://travis-ci.org/oxo42/FpTest\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9371cb22ba02dc533c4edd2f6dae87cef41288ea/68747470733a2f2f7472617669732d63692e6f72672f6f786f34322f4670546573742e7376673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TerminateGponLinkTest</span><span class=\"p\">(</span><span class=\"n\">fptest</span><span class=\"o\">.</span><span class=\"n\">FpTest</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_workorders</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">expected_workorders</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s1\">'LST-ONTDETAIL'</span><span class=\"p\">,</span> <span class=\"s1\">'WOS_Completed'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'DEL-ONT'</span><span class=\"p\">,</span> <span class=\"s1\">'WOS_Completed'</span><span class=\"p\">)]</span>\n        <span class=\"n\">actual_workorders</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">wo</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">wo</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">wo</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cart_order_tracing</span><span class=\"o\">.</span><span class=\"n\">outgoing_workorders</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertListEqual</span><span class=\"p\">(</span><span class=\"n\">expected_workorders</span><span class=\"p\">,</span> <span class=\"n\">actual_workorders</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"\"\"\n&lt;request&gt;\n    &lt;so&gt;\n        &lt;orderId&gt;1412685518565&lt;/orderId&gt;\n        &lt;sod&gt;\n           &lt;!-- Snipped for brevity --&gt;\n\"\"\"</span>\n</pre>\n<p><tt>fptest.FpTest</tt> extends <tt>unittest.TestCase</tt> and overrides the <tt>setUp</tt> method to post the contents of <tt>request()</tt> to FP.\nIt then parses <tt><span class=\"pre\">../runtime/FPNode/cartOrderTracing.00000.log</span></tt> into a format where it is much easier to pull information\nout of the trace file.</p>\n<p>You can then write tests in Python that are expressive and repeatable.  I am using\n<a href=\"https://nose.readthedocs.org/\" rel=\"nofollow\">nosetests</a> and the <tt><span class=\"pre\">--with-xunit</span></tt> flag to output a file of test results that Jenkins is\npost-processing!</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install fptest\n</pre>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>The following file structure is assumed:</p>\n<pre>FP-Project/\n|-- IntegrationTests\n`-- runtime\n    `-- FPNode\n</pre>\n<p>The directory structure is important as FpTest will look in <tt><span class=\"pre\">../runtime/FPNode</span></tt> for the cartOrderTracing log file.</p>\n</div>\n<div id=\"samples\">\n<h2>Samples</h2>\n<p>There are two samples in the <tt>/samples</tt> directory of this project.  These are tests that I am successfully running\nagainst my instance of FP.</p>\n</div>\n<div id=\"documentation-to-come\">\n<h2>Documentation to come</h2>\n<ul>\n<li>Explanation of setting up cartridge simulators to pass / fail depending on input values</li>\n<li>Explanation of <tt>raw_params</tt> and <tt>params</tt> in the work order</li>\n<li>Explanation of <tt>self.fp_url</tt> and <tt>self.fp_node_dir</tt></li>\n<li>Explanation of <tt>Trace</tt> and <tt>WorkOrder</tt></li>\n<li>Order id and <tt>self.now()</tt></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1898987, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f762d51943c45709ea82a6d02be2e330", "sha256": "d9c93fdb7824b625ac97cdbf37c0b4f8db90d7f1554a06024f6d7a499d0dbc41"}, "downloads": -1, "filename": "fptest-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f762d51943c45709ea82a6d02be2e330", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3267, "upload_time": "2014-12-04T16:56:40", "upload_time_iso_8601": "2014-12-04T16:56:40.448402Z", "url": "https://files.pythonhosted.org/packages/7c/14/1147f52cd85edbba7ae08cfc6e9cfc22b78fc98a11944e2da026cc3ee8e7/fptest-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d632ae961056861ccbe143cb0558409b", "sha256": "4916180b61c5c71ad1bbf2bc4c2a8465c12253913f03d181c81d33005d6957b2"}, "downloads": -1, "filename": "fptest-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d632ae961056861ccbe143cb0558409b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3261, "upload_time": "2014-12-04T17:00:31", "upload_time_iso_8601": "2014-12-04T17:00:31.849967Z", "url": "https://files.pythonhosted.org/packages/b3/9e/1e039284a2e013d83696ec508c79eecd5d077e468803ad5dab5b21cc9b1f/fptest-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "fde655ccb8279822b06c14ac5ca66b7d", "sha256": "e765b733db8178daf793f8514540610e2d792b1f0967c0a04f84eec09530a49b"}, "downloads": -1, "filename": "fptest-0.0.3.tar.gz", "has_sig": false, "md5_digest": "fde655ccb8279822b06c14ac5ca66b7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3263, "upload_time": "2014-12-04T17:02:44", "upload_time_iso_8601": "2014-12-04T17:02:44.284317Z", "url": "https://files.pythonhosted.org/packages/2c/95/d0c3b03a349836342bd1e6d9ea46ff442fd35f50107e27804bd1f063ed5a/fptest-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "989f44bac16bc5960a3abac8b26c9bff", "sha256": "37a4262a2339ca69b4e90c3931f59845bebfd6cb457a1959c171671dcf512446"}, "downloads": -1, "filename": "fptest-0.1.0.tar.gz", "has_sig": false, "md5_digest": "989f44bac16bc5960a3abac8b26c9bff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4476, "upload_time": "2016-01-11T12:23:50", "upload_time_iso_8601": "2016-01-11T12:23:50.779191Z", "url": "https://files.pythonhosted.org/packages/ad/47/23bd5cf766b9c7e223ee61563b02080421f9dcb93a539724d8bd978e3fef/fptest-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f8ab42747a5dbfa50d02c50fbaacfa6e", "sha256": "b6b9e4706fd2d0f8354c65deb5d1742f7e2a55e65387dfe4a431e36444ec7f93"}, "downloads": -1, "filename": "fptest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f8ab42747a5dbfa50d02c50fbaacfa6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4474, "upload_time": "2016-01-11T12:28:29", "upload_time_iso_8601": "2016-01-11T12:28:29.456628Z", "url": "https://files.pythonhosted.org/packages/5f/e3/fd0bb792b41e143cde82dede500cb21ed30926ff8fb9b02619815fc56e10/fptest-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8ab42747a5dbfa50d02c50fbaacfa6e", "sha256": "b6b9e4706fd2d0f8354c65deb5d1742f7e2a55e65387dfe4a431e36444ec7f93"}, "downloads": -1, "filename": "fptest-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f8ab42747a5dbfa50d02c50fbaacfa6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4474, "upload_time": "2016-01-11T12:28:29", "upload_time_iso_8601": "2016-01-11T12:28:29.456628Z", "url": "https://files.pythonhosted.org/packages/5f/e3/fd0bb792b41e143cde82dede500cb21ed30926ff8fb9b02619815fc56e10/fptest-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:00:36 2020"}