{"info": {"author": "Saska Karsi", "author_email": "saska.karsi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Last release](https://anaconda.org/saska/trict/badges/latest_release_date.svg)](https://anaconda.org/saska/trict/)\n[![Platforms](https://anaconda.org/saska/trict/badges/platforms.svg)](https://anaconda.org/saska/trict/)\n\n# trict\n\nPython dictionary with extra stuff.\n\nStarting off, if you're seeing this, please give feedback! \n\nYou can install with `pip install trict` or `conda install -c saska trict` (working on conda-forge). Doesn't currently have any dependencies (although you'll need `pytest` if you want to run the tests for some reason), only works with python>3.6 strictly because I like f-strings which I can reformat out if someone needs this to work on something else.\n\nTricktionaries (subclass of collections.UserDict) are dictionary-type things that have recursive (and other) helper things I've previously needed. Here's how they work:\n\nYou initialize a tricktionary with a normal dictionary.\n\n```python\n>>> from trict import Trict\n\n>>> t = Trict({\n    'user': {\n        'information': {\n            'attribute': 'infonugget',\n            'another_attribute': 'secondnugget'\n        },\n        'moreinformation': 'extranugget'\n    }\n})\n```\nYou can then perform all sorts of cool operations with it, like period-separated setting and getting (or any-string-separated, you can specify `key_sep` as a keyword argument in the Trict constructor, default is `.`).\n\n```python\n>>> t['user.information.attribute']\n'infonugget'\n```\nJust like a python dictionary, Trict implements `get(key, default=None)` if you don't like KeyErrors.\n\nWhen setting, the Trict will create intermediary keys for you:\n\n```python\n>>> t['user.newinformation.newattribute'] = 'new'\n>>> t['user.newinformation.newattribute']\n'new'\n```\n\nDeleting also works as you'd expect, so you can also `.pop()`. You can also do any of this using sequences as keys.\n```python\n>>> key = ['user', 'information', 'another_attribute']\n>>> t[key]\n'secondnugget'\n```\n\nIf you want to flatten your dictionary for a csv export for example (use keys as the header), you can do that. The constructor arg `key_sep` also affects how keys are formatted here. The Tricktionary can be rebuilt by passing this type of flattened dictionary into the alternate `from_flat_dict` constructor with the same `key_sep`.\n```python\n>>> t.flatten()\n{\n  'user.information.attribute': 'infonugget', \n  'user.information.another_attribute': 'secondnugget', \n  'user.moreinformation': 'extranugget', \n  'user.newinformation.newattribute': 'new'\n}\n```\n\nOr do a complete traversal with `traverse`. It returns a generator yielding 2-tuples of (key-path, value).\n```python\n>>> for k, v in t.traverse():\n...     print(f\"{k}: {v}\")\n['user']: {'information': {'attribute': 'infonugget', 'another_attribute': 'secondnugget'}, 'moreinformation': 'extranugget', 'newinformation': {'newattribute': 'new'}}\n['user', 'information']: {'attribute': 'infonugget', 'another_attribute': 'secondnugget'}\n['user', 'information', 'attribute']: infonugget\n['user', 'information', 'another_attribute']: secondnugget\n['user', 'moreinformation']: extranugget\n['user', 'newinformation']: {'newattribute': 'new'}\n['user', 'newinformation', 'newattribute']: new\n```\nIf you just need the leaves, you can do that as well with a similar format.\n```python\n>>> for k, v in t.leaves():\n...     print(f\"{k}: {v}\")\n['user', 'information', 'attribute']: infonugget\n['user', 'information', 'another_attribute']: secondnugget\n['user', 'moreinformation']: extranugget\n['user', 'newinformation', 'newattribute']: new\n```\n\nYou can also map the leaves (the actual values at the end of your dictionary) with a callable.\n```python\n>>> t.map_leaves(lambda x: x + \" - and there's more!\")\n>>> t.data\n{\n  'user': {\n    'information': {\n      'attribute': \"infonugget - and there's more!\", \n      'another_attribute': \"secondnugget - and there's more!\"\n    }, \n    'moreinformation': \"extranugget - and there's more!\", \n    'newinformation': {\n      'newattribute': \"new - and there's more!\"\n    }\n  }\n}\n```\n\nAll the dictionary helper methods are also provided standalone. There's also an extra one, `iter_keys` that iterates over anything that's a key - helpful if there's a bunch of people writing in your codebase and you want to enforce say a regex naming convention on your keys or something.\n\nIf you're more of the \"I need to make sure my API can handle most anything thrown at it!\" type, you can define a mapper (using {new_key: [str or sequence]}, try and stick to one, it's prettier, example has both) and throw any dicts you receive into a Tricktionary and map them to the same format. Pretty handy if you need to take in documents in multiple formats, just make sure document x doesn't have different data from document y in the same key path.\n\n```python\n>>> mapper = {\n        'newkey': [\n            'user.noninformation.nonattribute', # Doesn't exist\n            'user.information.another_attribute' # Finds\n        ],\n        'othernewkey': [\n            ['user', 'noninformation'], # Doesn't exist\n            ['user', 'information'] # Finds\n        ]\n    }\n>>> t.map_with_dict(mapper)\n{\n  'newkey': \"secondnugget - and there's more!\", \n  'othernewkey': {\n    'attribute': \"infonugget - and there's more!\", \n    'another_attribute': \"secondnugget - and there's more!\"\n  }\n}\n```\n\nSimilar functionality can be found in `get_by_seq` which also takes [str or sequence] and returns val if any of those keys exists.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/saskakarsi/trict", "keywords": "mapping,map,dictionary,recursive,dict", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "trict", "package_url": "https://pypi.org/project/trict/", "platform": "", "project_url": "https://pypi.org/project/trict/", "project_urls": {"Homepage": "https://github.com/saskakarsi/trict"}, "release_url": "https://pypi.org/project/trict/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "UserDict subclass with extra stuff", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://anaconda.org/saska/trict/\" rel=\"nofollow\"><img alt=\"Last release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70bd26da737898d83e12e655fc8353d60e069aac/68747470733a2f2f616e61636f6e64612e6f72672f7361736b612f74726963742f6261646765732f6c61746573745f72656c656173655f646174652e737667\"></a>\n<a href=\"https://anaconda.org/saska/trict/\" rel=\"nofollow\"><img alt=\"Platforms\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc652f3d6c6a9b511734820022b70013f4452113/68747470733a2f2f616e61636f6e64612e6f72672f7361736b612f74726963742f6261646765732f706c6174666f726d732e737667\"></a></p>\n<h1>trict</h1>\n<p>Python dictionary with extra stuff.</p>\n<p>Starting off, if you're seeing this, please give feedback!</p>\n<p>You can install with <code>pip install trict</code> or <code>conda install -c saska trict</code> (working on conda-forge). Doesn't currently have any dependencies (although you'll need <code>pytest</code> if you want to run the tests for some reason), only works with python&gt;3.6 strictly because I like f-strings which I can reformat out if someone needs this to work on something else.</p>\n<p>Tricktionaries (subclass of collections.UserDict) are dictionary-type things that have recursive (and other) helper things I've previously needed. Here's how they work:</p>\n<p>You initialize a tricktionary with a normal dictionary.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">trict</span> <span class=\"kn\">import</span> <span class=\"n\">Trict</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Trict</span><span class=\"p\">({</span>\n    <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'information'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'infonugget'</span><span class=\"p\">,</span>\n            <span class=\"s1\">'another_attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'secondnugget'</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">'moreinformation'</span><span class=\"p\">:</span> <span class=\"s1\">'extranugget'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<p>You can then perform all sorts of cool operations with it, like period-separated setting and getting (or any-string-separated, you can specify <code>key_sep</code> as a keyword argument in the Trict constructor, default is <code>.</code>).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"s1\">'user.information.attribute'</span><span class=\"p\">]</span>\n<span class=\"s1\">'infonugget'</span>\n</pre>\n<p>Just like a python dictionary, Trict implements <code>get(key, default=None)</code> if you don't like KeyErrors.</p>\n<p>When setting, the Trict will create intermediary keys for you:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"s1\">'user.newinformation.newattribute'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'new'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"s1\">'user.newinformation.newattribute'</span><span class=\"p\">]</span>\n<span class=\"s1\">'new'</span>\n</pre>\n<p>Deleting also works as you'd expect, so you can also <code>.pop()</code>. You can also do any of this using sequences as keys.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'information'</span><span class=\"p\">,</span> <span class=\"s1\">'another_attribute'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n<span class=\"s1\">'secondnugget'</span>\n</pre>\n<p>If you want to flatten your dictionary for a csv export for example (use keys as the header), you can do that. The constructor arg <code>key_sep</code> also affects how keys are formatted here. The Tricktionary can be rebuilt by passing this type of flattened dictionary into the alternate <code>from_flat_dict</code> constructor with the same <code>key_sep</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'user.information.attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'infonugget'</span><span class=\"p\">,</span> \n  <span class=\"s1\">'user.information.another_attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'secondnugget'</span><span class=\"p\">,</span> \n  <span class=\"s1\">'user.moreinformation'</span><span class=\"p\">:</span> <span class=\"s1\">'extranugget'</span><span class=\"p\">,</span> \n  <span class=\"s1\">'user.newinformation.newattribute'</span><span class=\"p\">:</span> <span class=\"s1\">'new'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Or do a complete traversal with <code>traverse</code>. It returns a generator yielding 2-tuples of (key-path, value).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">traverse</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">k</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">v</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">]:</span> <span class=\"p\">{</span><span class=\"s1\">'information'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'infonugget'</span><span class=\"p\">,</span> <span class=\"s1\">'another_attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'secondnugget'</span><span class=\"p\">},</span> <span class=\"s1\">'moreinformation'</span><span class=\"p\">:</span> <span class=\"s1\">'extranugget'</span><span class=\"p\">,</span> <span class=\"s1\">'newinformation'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'newattribute'</span><span class=\"p\">:</span> <span class=\"s1\">'new'</span><span class=\"p\">}}</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'information'</span><span class=\"p\">]:</span> <span class=\"p\">{</span><span class=\"s1\">'attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'infonugget'</span><span class=\"p\">,</span> <span class=\"s1\">'another_attribute'</span><span class=\"p\">:</span> <span class=\"s1\">'secondnugget'</span><span class=\"p\">}</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'information'</span><span class=\"p\">,</span> <span class=\"s1\">'attribute'</span><span class=\"p\">]:</span> <span class=\"n\">infonugget</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'information'</span><span class=\"p\">,</span> <span class=\"s1\">'another_attribute'</span><span class=\"p\">]:</span> <span class=\"n\">secondnugget</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'moreinformation'</span><span class=\"p\">]:</span> <span class=\"n\">extranugget</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'newinformation'</span><span class=\"p\">]:</span> <span class=\"p\">{</span><span class=\"s1\">'newattribute'</span><span class=\"p\">:</span> <span class=\"s1\">'new'</span><span class=\"p\">}</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'newinformation'</span><span class=\"p\">,</span> <span class=\"s1\">'newattribute'</span><span class=\"p\">]:</span> <span class=\"n\">new</span>\n</pre>\n<p>If you just need the leaves, you can do that as well with a similar format.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">leaves</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">k</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">v</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'information'</span><span class=\"p\">,</span> <span class=\"s1\">'attribute'</span><span class=\"p\">]:</span> <span class=\"n\">infonugget</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'information'</span><span class=\"p\">,</span> <span class=\"s1\">'another_attribute'</span><span class=\"p\">]:</span> <span class=\"n\">secondnugget</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'moreinformation'</span><span class=\"p\">]:</span> <span class=\"n\">extranugget</span>\n<span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'newinformation'</span><span class=\"p\">,</span> <span class=\"s1\">'newattribute'</span><span class=\"p\">]:</span> <span class=\"n\">new</span>\n</pre>\n<p>You can also map the leaves (the actual values at the end of your dictionary) with a callable.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">map_leaves</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"s2\">\" - and there's more!\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'user'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'information'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'attribute'</span><span class=\"p\">:</span> <span class=\"s2\">\"infonugget - and there's more!\"</span><span class=\"p\">,</span> \n      <span class=\"s1\">'another_attribute'</span><span class=\"p\">:</span> <span class=\"s2\">\"secondnugget - and there's more!\"</span>\n    <span class=\"p\">},</span> \n    <span class=\"s1\">'moreinformation'</span><span class=\"p\">:</span> <span class=\"s2\">\"extranugget - and there's more!\"</span><span class=\"p\">,</span> \n    <span class=\"s1\">'newinformation'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s1\">'newattribute'</span><span class=\"p\">:</span> <span class=\"s2\">\"new - and there's more!\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>All the dictionary helper methods are also provided standalone. There's also an extra one, <code>iter_keys</code> that iterates over anything that's a key - helpful if there's a bunch of people writing in your codebase and you want to enforce say a regex naming convention on your keys or something.</p>\n<p>If you're more of the \"I need to make sure my API can handle most anything thrown at it!\" type, you can define a mapper (using {new_key: [str or sequence]}, try and stick to one, it's prettier, example has both) and throw any dicts you receive into a Tricktionary and map them to the same format. Pretty handy if you need to take in documents in multiple formats, just make sure document x doesn't have different data from document y in the same key path.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'newkey'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'user.noninformation.nonattribute'</span><span class=\"p\">,</span> <span class=\"c1\"># Doesn't exist</span>\n            <span class=\"s1\">'user.information.another_attribute'</span> <span class=\"c1\"># Finds</span>\n        <span class=\"p\">],</span>\n        <span class=\"s1\">'othernewkey'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'noninformation'</span><span class=\"p\">],</span> <span class=\"c1\"># Doesn't exist</span>\n            <span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'information'</span><span class=\"p\">]</span> <span class=\"c1\"># Finds</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">map_with_dict</span><span class=\"p\">(</span><span class=\"n\">mapper</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"s1\">'newkey'</span><span class=\"p\">:</span> <span class=\"s2\">\"secondnugget - and there's more!\"</span><span class=\"p\">,</span> \n  <span class=\"s1\">'othernewkey'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'attribute'</span><span class=\"p\">:</span> <span class=\"s2\">\"infonugget - and there's more!\"</span><span class=\"p\">,</span> \n    <span class=\"s1\">'another_attribute'</span><span class=\"p\">:</span> <span class=\"s2\">\"secondnugget - and there's more!\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Similar functionality can be found in <code>get_by_seq</code> which also takes [str or sequence] and returns val if any of those keys exists.</p>\n\n          </div>"}, "last_serial": 7176271, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ce38d4ca5394b0f09dad434f758f7cbb", "sha256": "efaa18f670f70bc1eedef6d775b114ddb6ce9f7f3f89d1ea4a6e0f5d9fae2c4b"}, "downloads": -1, "filename": "trict-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ce38d4ca5394b0f09dad434f758f7cbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3192, "upload_time": "2020-03-05T09:28:39", "upload_time_iso_8601": "2020-03-05T09:28:39.261720Z", "url": "https://files.pythonhosted.org/packages/1d/d6/5b837abcfd6ade793eb80b7b0b471b2893f4020f0665a265dcaa29f8593c/trict-0.0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "07c3bb909526e08a9d978238d1c0ae4c", "sha256": "5155d9c98bd599a82f44aff2939d27af6690346fbaa55db662c019b8e333938a"}, "downloads": -1, "filename": "trict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "07c3bb909526e08a9d978238d1c0ae4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3791, "upload_time": "2020-03-05T20:33:50", "upload_time_iso_8601": "2020-03-05T20:33:50.806381Z", "url": "https://files.pythonhosted.org/packages/1d/e0/459fa86d4d207896e13f2b12bcdca974a27f9cd6695a6ba3cb9c5d6781cb/trict-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "edfec643a7c4d708ea5de7e388d3bc3a", "sha256": "92e7c38a817b46eaaeea8c64a2848f422ed9462886d249485fea23ca260967dd"}, "downloads": -1, "filename": "trict-0.1.2.tar.gz", "has_sig": false, "md5_digest": "edfec643a7c4d708ea5de7e388d3bc3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5878, "upload_time": "2020-03-06T08:09:18", "upload_time_iso_8601": "2020-03-06T08:09:18.966996Z", "url": "https://files.pythonhosted.org/packages/ce/8e/93c582fe056b6f78d3f287d82bb4ae6d3abcd95f2bd63e6b5829cc09bcd0/trict-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c314442e65506b7ee47f6c5bfb1be82e", "sha256": "2996703e4c36177bc2ccbb4881d21ce44f3b46b230133dfc3850d3b29d1a2a7d"}, "downloads": -1, "filename": "trict-0.1.3.tar.gz", "has_sig": false, "md5_digest": "c314442e65506b7ee47f6c5bfb1be82e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6119, "upload_time": "2020-03-10T13:46:02", "upload_time_iso_8601": "2020-03-10T13:46:02.212003Z", "url": "https://files.pythonhosted.org/packages/4b/3b/38a800e286f7ee0c77a49ae659d2dbaaedd43a87befb1c435ee23449c036/trict-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "134f71fd3e92c531c12cbba60079556b", "sha256": "beefe3bdbd2d2e9ac264e6c04ace99fb5ab4ca485d46e300557c3b4b1ac2147f"}, "downloads": -1, "filename": "trict-0.1.4.tar.gz", "has_sig": false, "md5_digest": "134f71fd3e92c531c12cbba60079556b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6129, "upload_time": "2020-04-17T21:48:10", "upload_time_iso_8601": "2020-04-17T21:48:10.438236Z", "url": "https://files.pythonhosted.org/packages/c6/c8/a162080a5c1d763e5939d56e6fde8f197c31675b2f9da375a3804037c1f8/trict-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "bafd6e4699e815e7d19e0d6cecef0642", "sha256": "5e03f90ce7fac44630fcf1063e236ff0aac9071e0f8eb74d7ce631578cc2e5d8"}, "downloads": -1, "filename": "trict-0.1.5.tar.gz", "has_sig": false, "md5_digest": "bafd6e4699e815e7d19e0d6cecef0642", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6131, "upload_time": "2020-05-05T22:28:36", "upload_time_iso_8601": "2020-05-05T22:28:36.050709Z", "url": "https://files.pythonhosted.org/packages/7e/51/dda92c6544c4acbfafd74a24b8dbe92d3cd857f9d5d3ec6dfa9d4f5ca7fc/trict-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bafd6e4699e815e7d19e0d6cecef0642", "sha256": "5e03f90ce7fac44630fcf1063e236ff0aac9071e0f8eb74d7ce631578cc2e5d8"}, "downloads": -1, "filename": "trict-0.1.5.tar.gz", "has_sig": false, "md5_digest": "bafd6e4699e815e7d19e0d6cecef0642", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6131, "upload_time": "2020-05-05T22:28:36", "upload_time_iso_8601": "2020-05-05T22:28:36.050709Z", "url": "https://files.pythonhosted.org/packages/7e/51/dda92c6544c4acbfafd74a24b8dbe92d3cd857f9d5d3ec6dfa9d4f5ca7fc/trict-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:17 2020"}