{"info": {"author": "W. Trevor King", "author_email": "wking@tremily.us", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License (GPL)", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Unfold-protein\n==============\n\nUnfold-protein is a set of tools for controlling velocity-clamp single\nmolecule force spectroscopy.  It uses the pyafm_ package for low level\nAFM control.  This package contains the high-level experiment control\nlogic.\n\nPackages\n========\n\nGentoo\n------\n\nI've packaged pyafm for Gentoo.  You need layman_ and my `wtk\noverlay`_.  Install with::\n\n  # emerge -av app-portage/layman\n  # layman --add wtk\n  # emerge -av sci-physics/unfold-protein\n\nDependencies\n============\n\nUnfold-protein requires the following Python modules:\n\n* Pyafm_\n* Pypiezo_ (required directly, and via ``pyafm``)\n* H5config_ (required directly, and via ``pyafm``)\n* h5py_ (required directly, and via ``h5config``)\n* Matplotlib_\n* NumPy_\n\nGetting the source\n==================\n\nUnfold-protein is available as a Git_ repository::\n\n  $ git clone git://tremily.us/unfold-protein.git\n\nThere are also periodic bundled releases.  For example, get version\n0.2 as a gzipped tarball with::\n\n  $ wget 'http://git.tremily.us/?p=unfold-protein.git;a=snapshot;h=v0.2;sf=tgz'\n  $ tar -xzvf unfold-protein-0.2.tar.gz\n\nInstallation\n============\n\nAfter downloading, change to the source directory and run::\n\n  $ python setup.py install\n\nto install unfold-protein.  Run::\n\n  $ python setup.py install --help\n\nto see a list of installation options you may want to configure.\n\nUsage\n=====\n\nThe ``unfold.py`` script runs a series of unfolding pulls while\nscanning the pulling velocity and contact position.  It has a few\ncommand line options; get details with::\n\n  $ unfold.py --help\n\nYou can configure the unfolding and scanning behavior using h5config_.\nThe configuration is stored in ``~/.config/unfold-default.yaml``.  To\nseed this configuration file before tweaking it, you should configure\npyafm_ (as described in its ``README``).  Then run::\n\n  >>> import unfold_protein.storage as storage\n  >>> config = storage.get_default_config()\n  >>> storage.save_scan_config(config=config)\n\nto create a configuration using the default settings.  The YAML_\nsyntax is plain text, which you can edit as you see fit.  Future runs\nof ``unfold.py`` (and calls to\n``unfold_protein.storage.load_scanner()``) will load this\nconfiguration by default.\n\n``unfold.py`` saves each unfolding pull in its own timestamped file\nwith the unfolding data along with the complete configuration used to\nacquire it.  You can configure the directory where these files are\nstored with the ``unfold/save/base directory`` setting.  You can\nconvert the saved unfolding data to PNGs__ with ``plot-unfold.py``.\nFor example::\n\n  $ plot-unfold.py ~/rsrch/data/unfold/*.h5\n\n__ PNG_\n\nFor more detailed analysis, you may want to use Hooke_.  You may also\nwant to use calibcant_ to calibrate your AFM cantilever's bending\nspring constant.\n\n.. _pyafm: http://blog.tremily.us/posts/pyafm/\n.. _layman: http://layman.sourceforge.net/\n.. _wtk overlay: http://blog.tremily.us/posts/Gentoo_overlay/\n.. _pyafm: http://blog.tremily.us/posts/pyafm/\n.. _pypiezo: http://blog.tremily.us/posts/pypiezo/\n.. _h5config: http://blog.tremily.us/posts/h5config/\n.. _H5Py: http://code.google.com/p/h5py/\n.. _NumPy: http://numpy.scipy.org/\n.. _Matplotlib: http://matplotlib.sourceforge.net/\n.. _Git: http://git-scm.com/\n.. _YAML: http://www.yaml.org/\n.. _PNG: http://en.wikipedia.org/wiki/Portable_Network_Graphics\n.. _Hooke: http://blog.tremily.us/posts/hooke/\n.. _calibcant: http://blog.tremily.us/posts/calibcant/", "description_content_type": null, "docs_url": null, "download_url": "http://git.tremily.us/?p=unfold-protein.git;a=snapshot;h=0.2;sf=tgz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://blog.tremily.us/posts/unfold-protein/", "keywords": null, "license": "GNU General Public License v3 (GPLv3)", "maintainer": null, "maintainer_email": null, "name": "unfold-protein", "package_url": "https://pypi.org/project/unfold-protein/", "platform": "all", "project_url": "https://pypi.org/project/unfold-protein/", "project_urls": {"Download": "http://git.tremily.us/?p=unfold-protein.git;a=snapshot;h=0.2;sf=tgz", "Homepage": "http://blog.tremily.us/posts/unfold-protein/"}, "release_url": "https://pypi.org/project/unfold-protein/0.2/", "requires_dist": null, "requires_python": null, "summary": "unfold-protein: velocity clamp protein unfolding experiment control", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"unfold-protein\">\n<h2>Unfold-protein</h2>\n<p>Unfold-protein is a set of tools for controlling velocity-clamp single\nmolecule force spectroscopy.  It uses the <a href=\"http://blog.tremily.us/posts/pyafm/\" rel=\"nofollow\">pyafm</a> package for low level\nAFM control.  This package contains the high-level experiment control\nlogic.</p>\n</div>\n<div id=\"packages\">\n<h2>Packages</h2>\n<h2 id=\"gentoo\"><span class=\"section-subtitle\">Gentoo</span></h2>\n<p>I\u2019ve packaged pyafm for Gentoo.  You need <a href=\"http://layman.sourceforge.net/\" rel=\"nofollow\">layman</a> and my <a href=\"http://blog.tremily.us/posts/Gentoo_overlay/\" rel=\"nofollow\">wtk\noverlay</a>.  Install with:</p>\n<pre># emerge -av app-portage/layman\n# layman --add wtk\n# emerge -av sci-physics/unfold-protein\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>Unfold-protein requires the following Python modules:</p>\n<ul>\n<li><a href=\"http://blog.tremily.us/posts/pyafm/\" rel=\"nofollow\">Pyafm</a></li>\n<li><a href=\"http://blog.tremily.us/posts/pypiezo/\" rel=\"nofollow\">Pypiezo</a> (required directly, and via <tt>pyafm</tt>)</li>\n<li><a href=\"http://blog.tremily.us/posts/h5config/\" rel=\"nofollow\">H5config</a> (required directly, and via <tt>pyafm</tt>)</li>\n<li><a href=\"http://code.google.com/p/h5py/\" rel=\"nofollow\">h5py</a> (required directly, and via <tt>h5config</tt>)</li>\n<li><a href=\"http://matplotlib.sourceforge.net/\" rel=\"nofollow\">Matplotlib</a></li>\n<li><a href=\"http://numpy.scipy.org/\" rel=\"nofollow\">NumPy</a></li>\n</ul>\n</div>\n<div id=\"getting-the-source\">\n<h2>Getting the source</h2>\n<p>Unfold-protein is available as a <a href=\"http://git-scm.com/\" rel=\"nofollow\">Git</a> repository:</p>\n<pre>$ git clone git://tremily.us/unfold-protein.git\n</pre>\n<p>There are also periodic bundled releases.  For example, get version\n0.2 as a gzipped tarball with:</p>\n<pre>$ wget 'http://git.tremily.us/?p=unfold-protein.git;a=snapshot;h=v0.2;sf=tgz'\n$ tar -xzvf unfold-protein-0.2.tar.gz\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>After downloading, change to the source directory and run:</p>\n<pre>$ python setup.py install\n</pre>\n<p>to install unfold-protein.  Run:</p>\n<pre>$ python setup.py install --help\n</pre>\n<p>to see a list of installation options you may want to configure.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The <tt>unfold.py</tt> script runs a series of unfolding pulls while\nscanning the pulling velocity and contact position.  It has a few\ncommand line options; get details with:</p>\n<pre>$ unfold.py --help\n</pre>\n<p>You can configure the unfolding and scanning behavior using <a href=\"http://blog.tremily.us/posts/h5config/\" rel=\"nofollow\">h5config</a>.\nThe configuration is stored in <tt><span class=\"pre\">~/.config/unfold-default.yaml</span></tt>.  To\nseed this configuration file before tweaking it, you should configure\n<a href=\"http://blog.tremily.us/posts/pyafm/\" rel=\"nofollow\">pyafm</a> (as described in its <tt>README</tt>).  Then run:</p>\n<pre>&gt;&gt;&gt; import unfold_protein.storage as storage\n&gt;&gt;&gt; config = storage.get_default_config()\n&gt;&gt;&gt; storage.save_scan_config(config=config)\n</pre>\n<p>to create a configuration using the default settings.  The <a href=\"http://www.yaml.org/\" rel=\"nofollow\">YAML</a>\nsyntax is plain text, which you can edit as you see fit.  Future runs\nof <tt>unfold.py</tt> (and calls to\n<tt>unfold_protein.storage.load_scanner()</tt>) will load this\nconfiguration by default.</p>\n<p><tt>unfold.py</tt> saves each unfolding pull in its own timestamped file\nwith the unfolding data along with the complete configuration used to\nacquire it.  You can configure the directory where these files are\nstored with the <tt>unfold/save/base directory</tt> setting.  You can\nconvert the saved unfolding data to <a href=\"http://en.wikipedia.org/wiki/Portable_Network_Graphics\" rel=\"nofollow\">PNGs</a> with <tt><span class=\"pre\">plot-unfold.py</span></tt>.\nFor example:</p>\n<pre>$ plot-unfold.py ~/rsrch/data/unfold/*.h5\n</pre>\n<p>For more detailed analysis, you may want to use <a href=\"http://blog.tremily.us/posts/hooke/\" rel=\"nofollow\">Hooke</a>.  You may also\nwant to use <a href=\"http://blog.tremily.us/posts/calibcant/\" rel=\"nofollow\">calibcant</a> to calibrate your AFM cantilever\u2019s bending\nspring constant.</p>\n</div>\n\n          </div>"}, "last_serial": 709523, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "fb9e56d43993b34415264df503cd24a5", "sha256": "b58443769ceea1d8b2c3925ced82145ca6d47afbffcd84b56d72906a7d6072ff"}, "downloads": -1, "filename": "unfold-protein-0.2.tar.gz", "has_sig": false, "md5_digest": "fb9e56d43993b34415264df503cd24a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21567, "upload_time": "2013-05-27T16:26:16", "upload_time_iso_8601": "2013-05-27T16:26:16.485585Z", "url": "https://files.pythonhosted.org/packages/7a/f3/f3ffeb80edccf928177ecbc26815ed6cf5bc9529d226421661a13418d099/unfold-protein-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb9e56d43993b34415264df503cd24a5", "sha256": "b58443769ceea1d8b2c3925ced82145ca6d47afbffcd84b56d72906a7d6072ff"}, "downloads": -1, "filename": "unfold-protein-0.2.tar.gz", "has_sig": false, "md5_digest": "fb9e56d43993b34415264df503cd24a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21567, "upload_time": "2013-05-27T16:26:16", "upload_time_iso_8601": "2013-05-27T16:26:16.485585Z", "url": "https://files.pythonhosted.org/packages/7a/f3/f3ffeb80edccf928177ecbc26815ed6cf5bc9529d226421661a13418d099/unfold-protein-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:40:48 2020"}