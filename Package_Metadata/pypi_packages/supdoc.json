{"info": {"author": "Alex Samuel", "author_email": "alex@alexsamuel.net", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# 'supdoc\n\n'supdoc is a browser for API documentation automatically extracted from Python\nsource code.  Docstrings are among my favorite Python features, because they\nkeep the documentation close to the code.  This tool aims to extract code\nstructure and docstrings, to parse and interpret the latter, and to present it\nin a modern web UI.\n\nSphinx, the leading Python documentation tool, is great for hand-written\ndocumentation, but I find that in many projects, writing manuals is just too low\na priority to get done ever.  Docstrings, however, are cheap to write, and\nfurther can contain doctests, simple code snippets that can serve both as unit\ntests and code samples.  Epydoc is the best docstring-focused documentation I\nknow of, but is old and no longer maintained.\n\nFinally, in this web-focused day and age, I think an API documentation system\nshould be constructed in modular and service-oriented way.\n\n1. A documentation extract library.  This may be run in batch mode, for\ninstance, as part of a build process, or just in time, in response to\ndocumentation queries.\n\n2. A library for interpreting as many types and variants of documentation markup\nas possible (incuding <i>ad hoc</i> markup) and interpreting it in the context\nof code.  For instance, documentation of function parameters should be\nassociated with the parameters themselves.\n\n3. A JSON-based format for representing the API documentation for a code\nmodule.  \n\n4. User interfaces for browsing the API documentation, responsible for\npresentation aspects.\n\n\n# Document structure\n\nSince the term \"doc\" is heavily overloaded, we invent variants to describe the\ndocuments and documentation in supdoc.\n\nA **docsrc** is a top-level JSON document encoding content summary and\ndocumentation for one or more Python modules (or packages).  A docsrc looks like\nthis:\n\n```js\n{\n  \"modules\": {\n    \"mod0\": { ... },\n    \"mod1\": { ... }\n  }\n}\n```\n\nA key of `modules` is a fully-qualified Python module name.  The corresponding\nvalue is an objdoc describing the Python module.\n\nAn **objdoc** is a JSON object encoding summary and documentation for a Python\nobject.  An objdoc may document any type of Python object, such as a module,\nclass, function, method, or other value.  An objdoc may be recursive, i.e. \ncontain other objdoc instances, to express composition of Python objects.\n\nWith a docsrc, an objdoc can be located given two pieces of information: its\nfully-qualified module name and its name path within the module.  The latter is\nthe dotted series of names by which the object is found by successive calls to\n`getattr()`, starting with the module itself.  If the name path is omitted, this\nindicates the module object itself.  The name path is generally, but not always,\nthe same as the object's qualname.\n\nA **ref** is a JSON object that refers to another objdoc.  The syntax follows the\n[JSON Reference draft\nstandard](https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03).  It is\nlooks as follows\n\n```js\n{\n  \"$ref\": \"#/modules/modname/path0/...\"\n}\n```\n\nThe reference is always relative to the top of the docsrc.  The reference path\nis `\"modules\"`, followed by the fully qualified module name, followed by\ncomponents of the path within the module.\n\nA ref can be used anywhere in place of an objdoc.\n\n\n## objdoc fields\n\nField names of an objdoc and their semantics are given below.  _All_ fields in\nan objdoc are optional; an implementation should be able to handle an instance\nwith any or all omitted.\n\n- `name`: The unqualified name of the object, generally the value of its\n  `__name__` attribute.\n\n- `qualname`: The qualified name of the object, generally the value of its\n  `__qualname__` attribute.\n\n- `type_name`: The name of the object's type, generally the `__name__` attribute\n  of its type.\n\n- `type`: The object's type, an objdoc or (most likely) ref.\n\n- `repr`: A string containing the object's `repr`.\n\n- `dict`: The contents of the object's `__dict__`.  Note that this does not\n  contain names from predecessors in the object's MRO.\n\n- `all_names`: An array of names of `dict` entries that make up the public\n  interface.  This is generally set for modules only, taken from the `__all__`\n  variable.\n\n- `signature`: For a callable object, the object's signature; see below.\n\n- `docs`: The object's documentation, generally extracted from its docstring; \n  see below.\n\n\n## Signature\n\nA signature is a JSON object encoding the calling signature of a callable\nobject.  It looks like this:\n\n```js\n{\n  \"params\": [\n    {\n      \"name\": \"...\",\n      \"kind\": \"...\",\n      \"default\": { ... },\n      \"doc\": \"...\",\n      \"doc_type\": \"...\",\n      \"annotation\": { ... }\n    },\n    ...\n  ]\n}\n```\n\nThe callable's parameters are given in declaration order.  Each includes the\n`name` and `kind` field; the others may be missing.  \n\n- `name`: The parameter name.\n\n- `kind`: The names of one of the parameter kind constants in\n  `inspect.Parameter`: `\"KEYWORD_ONLY\"`, `\"POSITIONAL_ONLY\"`,\n  `\"POSITIONAL_OR_KEYWORD\"`, `\"VAR_KEYWORD\"`, OR `\"VAR_POSITIONAL\"`.\n\n- `default`: A objdoc for the default value.\n\n- `doc`: A string containing parameter documentation extracted from the\ncallable's docstring.\n\n- `doc_type`: A string containing documentation about the parameter's type,\n  extracted from the callable's docstring.\n\n- `annotation`: An objdoc for the parameter annotation.\n\n\n## Docs\n\nAn objdoc's `docs` field containins a JSON object with information extracted from\nthe object's docstring.  It looks like this:\n\n```js\n{\n  \"doc\": \"...\",\n  \"summary\": \"...\",\n  \"body\": [ \"...\", ... ],\n  \"javadoc\": [ ... ]\n}\n```\n\nAs above, all fields may be missing.  Their interpretations are,\n\n- `doc`: The full docstring (without any indentation stripped or other munging).\n\n- `summary`: A summary of the object, extracted from the first line or sentence\n  of the docstring\n\n- `body`: An array of paragraphs or other blocks constituting the\n  documentation's body.\n\n- `javadoc`: An array of extracted Javadoc-style tags.\n\n\n### Javadoc\n\nA Javadoc comment looks as follows:\n\n```java\n/**\n * Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n *\n * @tag1         sed do eiusmod tempor incididunt\n * @tag2 foobar  ut labore et dolore magna aliqua\n */\n```\n\nSome tags, such as tag2 above, accept a single-word argument, while others, \nsuch as tag1, do not.  A tag is followed by associated text, which may start\nor extend onto following lines, and extends until the next tag or the end of\nthe docstring.\n\nThe Javadoc-style tag objects look as follows:\n\n```js\n{\n  \"tag\": \"tag2\",\n  \"arg\": \"foobar\",\n  \"text\": \"sed do eiusmod tempor incididunt\"\n}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alexhsamuel/supdoc", "keywords": "documentation,docs", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "supdoc", "package_url": "https://pypi.org/project/supdoc/", "platform": "", "project_url": "https://pypi.org/project/supdoc/", "project_urls": {"Homepage": "https://github.com/alexhsamuel/supdoc"}, "release_url": "https://pypi.org/project/supdoc/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "inspection-based documentation tool", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>'supdoc</h1>\n<p>'supdoc is a browser for API documentation automatically extracted from Python\nsource code.  Docstrings are among my favorite Python features, because they\nkeep the documentation close to the code.  This tool aims to extract code\nstructure and docstrings, to parse and interpret the latter, and to present it\nin a modern web UI.</p>\n<p>Sphinx, the leading Python documentation tool, is great for hand-written\ndocumentation, but I find that in many projects, writing manuals is just too low\na priority to get done ever.  Docstrings, however, are cheap to write, and\nfurther can contain doctests, simple code snippets that can serve both as unit\ntests and code samples.  Epydoc is the best docstring-focused documentation I\nknow of, but is old and no longer maintained.</p>\n<p>Finally, in this web-focused day and age, I think an API documentation system\nshould be constructed in modular and service-oriented way.</p>\n<ol>\n<li>\n<p>A documentation extract library.  This may be run in batch mode, for\ninstance, as part of a build process, or just in time, in response to\ndocumentation queries.</p>\n</li>\n<li>\n<p>A library for interpreting as many types and variants of documentation markup\nas possible (incuding <i>ad hoc</i> markup) and interpreting it in the context\nof code.  For instance, documentation of function parameters should be\nassociated with the parameters themselves.</p>\n</li>\n<li>\n<p>A JSON-based format for representing the API documentation for a code\nmodule.</p>\n</li>\n<li>\n<p>User interfaces for browsing the API documentation, responsible for\npresentation aspects.</p>\n</li>\n</ol>\n<h1>Document structure</h1>\n<p>Since the term \"doc\" is heavily overloaded, we invent variants to describe the\ndocuments and documentation in supdoc.</p>\n<p>A <strong>docsrc</strong> is a top-level JSON document encoding content summary and\ndocumentation for one or more Python modules (or packages).  A docsrc looks like\nthis:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"modules\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"mod0\"</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">},</span>\n    <span class=\"s2\">\"mod1\"</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>A key of <code>modules</code> is a fully-qualified Python module name.  The corresponding\nvalue is an objdoc describing the Python module.</p>\n<p>An <strong>objdoc</strong> is a JSON object encoding summary and documentation for a Python\nobject.  An objdoc may document any type of Python object, such as a module,\nclass, function, method, or other value.  An objdoc may be recursive, i.e.\ncontain other objdoc instances, to express composition of Python objects.</p>\n<p>With a docsrc, an objdoc can be located given two pieces of information: its\nfully-qualified module name and its name path within the module.  The latter is\nthe dotted series of names by which the object is found by successive calls to\n<code>getattr()</code>, starting with the module itself.  If the name path is omitted, this\nindicates the module object itself.  The name path is generally, but not always,\nthe same as the object's qualname.</p>\n<p>A <strong>ref</strong> is a JSON object that refers to another objdoc.  The syntax follows the\n<a href=\"https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03\" rel=\"nofollow\">JSON Reference draft\nstandard</a>.  It is\nlooks as follows</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"$ref\"</span><span class=\"o\">:</span> <span class=\"s2\">\"#/modules/modname/path0/...\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The reference is always relative to the top of the docsrc.  The reference path\nis <code>\"modules\"</code>, followed by the fully qualified module name, followed by\ncomponents of the path within the module.</p>\n<p>A ref can be used anywhere in place of an objdoc.</p>\n<h2>objdoc fields</h2>\n<p>Field names of an objdoc and their semantics are given below.  <em>All</em> fields in\nan objdoc are optional; an implementation should be able to handle an instance\nwith any or all omitted.</p>\n<ul>\n<li>\n<p><code>name</code>: The unqualified name of the object, generally the value of its\n<code>__name__</code> attribute.</p>\n</li>\n<li>\n<p><code>qualname</code>: The qualified name of the object, generally the value of its\n<code>__qualname__</code> attribute.</p>\n</li>\n<li>\n<p><code>type_name</code>: The name of the object's type, generally the <code>__name__</code> attribute\nof its type.</p>\n</li>\n<li>\n<p><code>type</code>: The object's type, an objdoc or (most likely) ref.</p>\n</li>\n<li>\n<p><code>repr</code>: A string containing the object's <code>repr</code>.</p>\n</li>\n<li>\n<p><code>dict</code>: The contents of the object's <code>__dict__</code>.  Note that this does not\ncontain names from predecessors in the object's MRO.</p>\n</li>\n<li>\n<p><code>all_names</code>: An array of names of <code>dict</code> entries that make up the public\ninterface.  This is generally set for modules only, taken from the <code>__all__</code>\nvariable.</p>\n</li>\n<li>\n<p><code>signature</code>: For a callable object, the object's signature; see below.</p>\n</li>\n<li>\n<p><code>docs</code>: The object's documentation, generally extracted from its docstring;\nsee below.</p>\n</li>\n</ul>\n<h2>Signature</h2>\n<p>A signature is a JSON object encoding the calling signature of a callable\nobject.  It looks like this:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"params\"</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"kind\"</span><span class=\"o\">:</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"default\"</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">},</span>\n      <span class=\"s2\">\"doc\"</span><span class=\"o\">:</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"doc_type\"</span><span class=\"o\">:</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"annotation\"</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"p\">...</span> <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">...</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>The callable's parameters are given in declaration order.  Each includes the\n<code>name</code> and <code>kind</code> field; the others may be missing.</p>\n<ul>\n<li>\n<p><code>name</code>: The parameter name.</p>\n</li>\n<li>\n<p><code>kind</code>: The names of one of the parameter kind constants in\n<code>inspect.Parameter</code>: <code>\"KEYWORD_ONLY\"</code>, <code>\"POSITIONAL_ONLY\"</code>,\n<code>\"POSITIONAL_OR_KEYWORD\"</code>, <code>\"VAR_KEYWORD\"</code>, OR <code>\"VAR_POSITIONAL\"</code>.</p>\n</li>\n<li>\n<p><code>default</code>: A objdoc for the default value.</p>\n</li>\n<li>\n<p><code>doc</code>: A string containing parameter documentation extracted from the\ncallable's docstring.</p>\n</li>\n<li>\n<p><code>doc_type</code>: A string containing documentation about the parameter's type,\nextracted from the callable's docstring.</p>\n</li>\n<li>\n<p><code>annotation</code>: An objdoc for the parameter annotation.</p>\n</li>\n</ul>\n<h2>Docs</h2>\n<p>An objdoc's <code>docs</code> field containins a JSON object with information extracted from\nthe object's docstring.  It looks like this:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"doc\"</span><span class=\"o\">:</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"summary\"</span><span class=\"o\">:</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"body\"</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"s2\">\"...\"</span><span class=\"p\">,</span> <span class=\"p\">...</span> <span class=\"p\">],</span>\n  <span class=\"s2\">\"javadoc\"</span><span class=\"o\">:</span> <span class=\"p\">[</span> <span class=\"p\">...</span> <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>As above, all fields may be missing.  Their interpretations are,</p>\n<ul>\n<li>\n<p><code>doc</code>: The full docstring (without any indentation stripped or other munging).</p>\n</li>\n<li>\n<p><code>summary</code>: A summary of the object, extracted from the first line or sentence\nof the docstring</p>\n</li>\n<li>\n<p><code>body</code>: An array of paragraphs or other blocks constituting the\ndocumentation's body.</p>\n</li>\n<li>\n<p><code>javadoc</code>: An array of extracted Javadoc-style tags.</p>\n</li>\n</ul>\n<h3>Javadoc</h3>\n<p>A Javadoc comment looks as follows:</p>\n<pre><span class=\"cm\">/**</span>\n<span class=\"cm\"> * Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\n<span class=\"cm\"> *</span>\n<span class=\"cm\"> * @tag1         sed do eiusmod tempor incididunt</span>\n<span class=\"cm\"> * @tag2 foobar  ut labore et dolore magna aliqua</span>\n<span class=\"cm\"> */</span>\n</pre>\n<p>Some tags, such as tag2 above, accept a single-word argument, while others,\nsuch as tag1, do not.  A tag is followed by associated text, which may start\nor extend onto following lines, and extends until the next tag or the end of\nthe docstring.</p>\n<p>The Javadoc-style tag objects look as follows:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"tag\"</span><span class=\"o\">:</span> <span class=\"s2\">\"tag2\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"arg\"</span><span class=\"o\">:</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"text\"</span><span class=\"o\">:</span> <span class=\"s2\">\"sed do eiusmod tempor incididunt\"</span>\n<span class=\"p\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6995038, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7247771150149cfe6ddb99dba5332890", "sha256": "2bee1412bae92712aa163d42040e611d06ac820a7e204c4b7260637492d03b8c"}, "downloads": -1, "filename": "supdoc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7247771150149cfe6ddb99dba5332890", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 38533, "upload_time": "2020-04-10T13:50:31", "upload_time_iso_8601": "2020-04-10T13:50:31.279245Z", "url": "https://files.pythonhosted.org/packages/dc/56/041ecd04a11c0c60c1abe4079e5eaeba2803bc14246757dc2ceb9388a562/supdoc-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "462e34defb63915551d5c0824605f166", "sha256": "84485831525f33ef5e6c1d62b44526de4fb059bf8e9cdad8933cc7179150a27a"}, "downloads": -1, "filename": "supdoc-0.1.1.tar.gz", "has_sig": false, "md5_digest": "462e34defb63915551d5c0824605f166", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 58722, "upload_time": "2020-04-10T17:18:32", "upload_time_iso_8601": "2020-04-10T17:18:32.621867Z", "url": "https://files.pythonhosted.org/packages/76/b4/39c8dbea9822b46878e0a248c61ae6043a2a87c5f9a50bf7f1fc216a61b1/supdoc-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "462e34defb63915551d5c0824605f166", "sha256": "84485831525f33ef5e6c1d62b44526de4fb059bf8e9cdad8933cc7179150a27a"}, "downloads": -1, "filename": "supdoc-0.1.1.tar.gz", "has_sig": false, "md5_digest": "462e34defb63915551d5c0824605f166", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 58722, "upload_time": "2020-04-10T17:18:32", "upload_time_iso_8601": "2020-04-10T17:18:32.621867Z", "url": "https://files.pythonhosted.org/packages/76/b4/39c8dbea9822b46878e0a248c61ae6043a2a87c5f9a50bf7f1fc216a61b1/supdoc-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:18 2020"}