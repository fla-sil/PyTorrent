{"info": {"author": "Rudolph Pienaar", "author_email": "rudolph.pienaar@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "###################\npfstate  v1.1.1.2\n###################\n\n.. image:: https://badge.fury.io/py/pfstate.svg\n    :target: https://badge.fury.io/py/pfstate\n\n.. image:: https://travis-ci.org/FNNDSC/pfstate.svg?branch=master\n    :target: https://travis-ci.org/FNNDSC/pfstate\n\n.. image:: https://img.shields.io/badge/python-3.5%2B-blue.svg\n    :target: https://badge.fury.io/py/pfcon\n\n.. contents:: Table of Contents\n\n********\nOverview\n********\n\nThis repository provides ``pfstate`` -- a library / module that maintains state in the object/class definition (and not in a class instance). The module uses the tree ``C_snode`` data abstraction internally (see elsewhere for ``C_snode``) as well as some internal methods to set/get this internal data in various ways.\n\npfstate\n=======\n\nMost simply, ``pfstate`` is a module that keeps state in a class definition (as opposed to a class instance). It was primarily created in the context of custom ``ThreadedHTTPServer`` classes. Creating a ``ThreadedHTTPServer`` in python involves instantiating the ``ThreadedHTTPServer``, and in the constructor providing a derived ``BaseHTTPRequestHandler`` object. The design pattern has some structural shortcomings -- most notably that the difficulty in setting internal ``BaseHTTPRequestHandler`` data from the level of the ``ThreadedHTTPServer``. One mechanism to overcome this is to share a common single ``pfstate`` object across the scope of both the server and the handler.\n\nMoreover, each call to the ``ThreadedHTTPServer`` re-initializes the handler object derived from ``BaseHTTPRequestHandler``, so any state information in that object instance is lost across calls.\n\nBy using the ``pfstate`` module, however, in the handler object, state information can be preserved across calls to the ``ThreadedHTTPServer`` by keeping state in the object and not an instance of the object. \n\nIn some ways, this can be thought of a cleaner way to avoid using a global variable.\n\nConsult the source code for full detail. However, as a simple overview, the recommended method of using this module is to define a subclass containing the state-specific information in a dictionary, and then to initialize the class.\n\nNote, it is vitally important that this derived class check the initialization of the base object data so as to not re-initialize an already stateful object and hence lose any additional state information.\n\n.. code-block:: python\n\n    from    pfmisc.C_snode      import C_snode\n    from    pfmisc._colors      import Colors\n    from    pfstate             import S\n    from    argparse            import RawTextHelpFormatter\n    from    argparse            import ArgumentParser\n\n    str_desc        = \"some program description\"\n    str_version     = \"1.0.0.0\"\n\n    parser          = ArgumentParser(\n                        description = str_desc, \n                        formatter_class = RawTextHelpFormatter\n                    )\n\n    parser.add_argument(\n        '--msg',\n        action  = 'store',\n        dest    = 'msg',\n        default = '',\n        help    = 'Message payload for internalctl control.'\n    )\n\n    class D(S):\n        \"\"\"\n        A derived class with problem-specific state\n        \"\"\"\n\n        def __init__(self, *args, **kwargs):\n            \"\"\"\n            Constructor\n            \"\"\"\n            S.__init__(self, *args, **kwargs)\n            if not S.b_init:\n                d_specific  = \\\n                    {\n                        'specificState': {\n                            'desc':         'Additional state information',\n                            'theAnswer':    42,\n                            'theQuestion':  'What do you get if you multiple six by nine',\n                            'foundBy':      'Arthur Dent'\n                        },\n                        'earthState': {\n                            'current':      'Destroyed',\n                            'reason':       'Hyper space bypass',\n                            'survivors': {\n                                'humans':   ['Arthur Dent', 'Ford Prefect', 'Trillian'],\n                                'dolphins': 'Most of them'\n                            }\n                        }\n                    }\n                S.d_state.update(d_specific)\n                S.T.initFromDict(S.d_state)\n                S.b_init    = True\n                if len(S.T.cat('/this/debugToDir')):\n                    if not os.path.exists(S.T.cat('/this/debugToDir')):\n                        os.makedirs(S.T.cat('/this/debugToDir'))\n\n            self.dp.qprint(\n                Colors.YELLOW + \"\\n\\t\\tInternal data tree:\", \n                level   = 1,\n                syslog  = False)\n            self.dp.qprint(\n                C_snode.str_blockIndent(str(S.T), 3, 8), \n                level   = 1,\n                syslog  = False)\n\n    state   = D( \n        version     = str_version,\n        desc        = str_desc,\n        args        = vars(args)\n    )\n\n    if len(args.msg):\n        d_control = state.internalctl_process(request = json.loads(args.msg))\n        print(\n            json.dumps(\n                d_control,\n                indent = 4\n            )\n        )\n\n************\nInstallation\n************\n\nInstallation is relatively straightforward, and we recommend using python ```pip`` to simplu install the module, preferably in a python virtual environment.\n\nPython Virtual Environment\n==========================\n\nOn Ubuntu, install the Python virtual environment creator\n\n.. code-block:: bash\n\n  sudo apt install virtualenv\n\nThen, create a directory for your virtual environments e.g.:\n\n.. code-block:: bash\n\n  mkdir ~/python-envs\n\nYou might want to add to your .bashrc file these two lines:\n\n.. code-block:: bash\n\n    export WORKON_HOME=~/python-envs\n    source /usr/local/bin/virtualenvwrapper.sh\n\nNote that depending on distro, the virtualenvwrapper.sh path might be\n\n.. code-block:: bash\n\n    /usr/share/virtualenvwrapper/virtualenvwrapper.sh\n\nSubsequently, you can source your ``.bashrc`` and create a new Python3 virtual environment:\n\n.. code-block:: bash\n\n    source .bashrc\n    mkvirtualenv --python=python3 python_env\n\nTo activate or \"enter\" the virtual env:\n\n.. code-block:: bash\n\n    workon python_env\n\nTo deactivate virtual env:\n\n.. code-block:: bash\n\n    deactivate\n\nInstall the module\n\n.. code-block:: bash\n \n    pip install pfstate\n\n\nUsing the ``fnndsc/pfstorage`` docker container\n================================================\n\nFor completeness sake with other pf* packages, a dockerized build is provided, although its utility is debatable and running / building the docker image will serve little purpose.\n\n*****\nUsage\n*****\n\nFor usage of  ``pstate``, consult the relevant wiki pages  <https://github.com/FNNDSC/pfstate/wiki/pfstate-overview>`.\n\n\nCommand line arguments\n======================\n\n.. code-block:: html\n\n        [--msg '<JSON_formatted>']\n        An optional JSON formatted string exemplifying how to get and\n        set internal variables.\n        \n        --msg '\n        {  \n            \"action\": \"internalctl\",\n            \"meta\": {\n                        \"var\":     \"/\",\n                        \"get\":      \"value\"\n                    }\n        }'\n\n        --msg '\n        {   \"action\": \"internalctl\",\n            \"meta\": {\n                        \"var\":     \"/service/megalodon\",\n                        \"set\":     {\n                            \"compute\": {\n                                \"addr\": \"10.20.1.71:5010\",\n                                \"baseURLpath\": \"api/v1/cmd/\",\n                                \"status\": \"undefined\"\n                            },\n                            \"data\": {\n                                \"addr\": \"10.20.1.71:5055\",\n                                \"baseURLpath\": \"api/v1/cmd/\",\n                                \"status\": \"undefined\"\n                            }\n                        }\n                    }\n        }'\n\n        [--configFileLoad <file>]\n        Load configuration information from the JSON formatted <file>.\n\n        [--configFileSave <file>]\n        Save configuration information to the JSON formatted <file>.\n\n        [-x|--desc]                                     \n        Provide an overview help page.\n\n        [-y|--synopsis]\n        Provide a synopsis help summary.\n\n        [--version]\n        Print internal version number and exit.\n\n        [--debugToDir <dir>]\n        A directory to contain various debugging output -- these are typically\n        JSON object strings capturing internal state. If empty string (default)\n        then no debugging outputs are captured/generated. If specified, then\n        ``pfcon`` will check for dir existence and attempt to create if\n        needed.\n\n        [-v|--verbosity <level>]\n        Set the verbosity level. \"0\" typically means no/minimal output. Allows for\n        more fine tuned output control as opposed to '--quiet' that effectively\n        silences everything.\n\nEXAMPLES\n\n.. code-block:: bash\n\n    pfstate                                                \\\\\n        --msg ' \n            {  \"action\": \"internalctl\",\n                \"meta\": {\n                            \"var\":     \"/\",\n                            \"get\":      \"value\"\n                        }\n            }'", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FNNDSC/pfstate", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pfstate", "package_url": "https://pypi.org/project/pfstate/", "platform": "", "project_url": "https://pypi.org/project/pfstate/", "project_urls": {"Homepage": "https://github.com/FNNDSC/pfstate"}, "release_url": "https://pypi.org/project/pfstate/1.1.1.2/", "requires_dist": null, "requires_python": "", "summary": "class-defintion stateful module", "version": "1.1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/pfstate\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/pfstate.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eef9670b8b47e8e86a5ff27420d76372e9667d1b/68747470733a2f2f62616467652e667572792e696f2f70792f706673746174652e737667\"></a>\n<a href=\"https://travis-ci.org/FNNDSC/pfstate\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/FNNDSC/pfstate.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/025ab77117c868cd16090a4d64f6ebb1cd5ccc3a/68747470733a2f2f7472617669732d63692e6f72672f464e4e4453432f706673746174652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/pfcon\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/python-3.5%2B-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72717db1f08ff88b6b237ad21c89e86732f2fa28/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e352532422d626c75652e737667\"></a>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id1\" rel=\"nofollow\">Overview</a><ul>\n<li><a href=\"#pfstate\" id=\"id2\" rel=\"nofollow\">pfstate</a></li>\n</ul>\n</li>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#python-virtual-environment\" id=\"id4\" rel=\"nofollow\">Python Virtual Environment</a></li>\n<li><a href=\"#using-the-fnndsc-pfstorage-docker-container\" id=\"id5\" rel=\"nofollow\">Using the <tt>fnndsc/pfstorage</tt> docker container</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" id=\"id6\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#command-line-arguments\" id=\"id7\" rel=\"nofollow\">Command line arguments</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Overview</a></h2>\n<p>This repository provides <tt>pfstate</tt> \u2013 a library / module that maintains state in the object/class definition (and not in a class instance). The module uses the tree <tt>C_snode</tt> data abstraction internally (see elsewhere for <tt>C_snode</tt>) as well as some internal methods to set/get this internal data in various ways.</p>\n<div id=\"pfstate\">\n<h3><a href=\"#id2\" rel=\"nofollow\">pfstate</a></h3>\n<p>Most simply, <tt>pfstate</tt> is a module that keeps state in a class definition (as opposed to a class instance). It was primarily created in the context of custom <tt>ThreadedHTTPServer</tt> classes. Creating a <tt>ThreadedHTTPServer</tt> in python involves instantiating the <tt>ThreadedHTTPServer</tt>, and in the constructor providing a derived <tt>BaseHTTPRequestHandler</tt> object. The design pattern has some structural shortcomings \u2013 most notably that the difficulty in setting internal <tt>BaseHTTPRequestHandler</tt> data from the level of the <tt>ThreadedHTTPServer</tt>. One mechanism to overcome this is to share a common single <tt>pfstate</tt> object across the scope of both the server and the handler.</p>\n<p>Moreover, each call to the <tt>ThreadedHTTPServer</tt> re-initializes the handler object derived from <tt>BaseHTTPRequestHandler</tt>, so any state information in that object instance is lost across calls.</p>\n<p>By using the <tt>pfstate</tt> module, however, in the handler object, state information can be preserved across calls to the <tt>ThreadedHTTPServer</tt> by keeping state in the object and not an instance of the object.</p>\n<p>In some ways, this can be thought of a cleaner way to avoid using a global variable.</p>\n<p>Consult the source code for full detail. However, as a simple overview, the recommended method of using this module is to define a subclass containing the state-specific information in a dictionary, and then to initialize the class.</p>\n<p>Note, it is vitally important that this derived class check the initialization of the base object data so as to not re-initialize an already stateful object and hence lose any additional state information.</p>\n<pre><span class=\"kn\">from</span>    <span class=\"nn\">pfmisc.C_snode</span>      <span class=\"kn\">import</span> <span class=\"n\">C_snode</span>\n<span class=\"kn\">from</span>    <span class=\"nn\">pfmisc._colors</span>      <span class=\"kn\">import</span> <span class=\"n\">Colors</span>\n<span class=\"kn\">from</span>    <span class=\"nn\">pfstate</span>             <span class=\"kn\">import</span> <span class=\"n\">S</span>\n<span class=\"kn\">from</span>    <span class=\"nn\">argparse</span>            <span class=\"kn\">import</span> <span class=\"n\">RawTextHelpFormatter</span>\n<span class=\"kn\">from</span>    <span class=\"nn\">argparse</span>            <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n\n<span class=\"n\">str_desc</span>        <span class=\"o\">=</span> <span class=\"s2\">\"some program description\"</span>\n<span class=\"n\">str_version</span>     <span class=\"o\">=</span> <span class=\"s2\">\"1.0.0.0\"</span>\n\n<span class=\"n\">parser</span>          <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">(</span>\n                    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">str_desc</span><span class=\"p\">,</span>\n                    <span class=\"n\">formatter_class</span> <span class=\"o\">=</span> <span class=\"n\">RawTextHelpFormatter</span>\n                <span class=\"p\">)</span>\n\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n    <span class=\"s1\">'--msg'</span><span class=\"p\">,</span>\n    <span class=\"n\">action</span>  <span class=\"o\">=</span> <span class=\"s1\">'store'</span><span class=\"p\">,</span>\n    <span class=\"n\">dest</span>    <span class=\"o\">=</span> <span class=\"s1\">'msg'</span><span class=\"p\">,</span>\n    <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"n\">help</span>    <span class=\"o\">=</span> <span class=\"s1\">'Message payload for internalctl control.'</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">D</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    A derived class with problem-specific state\n    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        Constructor\n        \"\"\"</span>\n        <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">b_init</span><span class=\"p\">:</span>\n            <span class=\"n\">d_specific</span>  <span class=\"o\">=</span> \\\n                <span class=\"p\">{</span>\n                    <span class=\"s1\">'specificState'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">'desc'</span><span class=\"p\">:</span>         <span class=\"s1\">'Additional state information'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'theAnswer'</span><span class=\"p\">:</span>    <span class=\"mi\">42</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'theQuestion'</span><span class=\"p\">:</span>  <span class=\"s1\">'What do you get if you multiple six by nine'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'foundBy'</span><span class=\"p\">:</span>      <span class=\"s1\">'Arthur Dent'</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"s1\">'earthState'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">'current'</span><span class=\"p\">:</span>      <span class=\"s1\">'Destroyed'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'reason'</span><span class=\"p\">:</span>       <span class=\"s1\">'Hyper space bypass'</span><span class=\"p\">,</span>\n                        <span class=\"s1\">'survivors'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s1\">'humans'</span><span class=\"p\">:</span>   <span class=\"p\">[</span><span class=\"s1\">'Arthur Dent'</span><span class=\"p\">,</span> <span class=\"s1\">'Ford Prefect'</span><span class=\"p\">,</span> <span class=\"s1\">'Trillian'</span><span class=\"p\">],</span>\n                            <span class=\"s1\">'dolphins'</span><span class=\"p\">:</span> <span class=\"s1\">'Most of them'</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">d_state</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">d_specific</span><span class=\"p\">)</span>\n            <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">initFromDict</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">d_state</span><span class=\"p\">)</span>\n            <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">b_init</span>    <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'/this/debugToDir'</span><span class=\"p\">)):</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'/this/debugToDir'</span><span class=\"p\">)):</span>\n                    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">cat</span><span class=\"p\">(</span><span class=\"s1\">'/this/debugToDir'</span><span class=\"p\">))</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dp</span><span class=\"o\">.</span><span class=\"n\">qprint</span><span class=\"p\">(</span>\n            <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"n\">YELLOW</span> <span class=\"o\">+</span> <span class=\"s2\">\"</span><span class=\"se\">\\n\\t\\t</span><span class=\"s2\">Internal data tree:\"</span><span class=\"p\">,</span>\n            <span class=\"n\">level</span>   <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">syslog</span>  <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dp</span><span class=\"o\">.</span><span class=\"n\">qprint</span><span class=\"p\">(</span>\n            <span class=\"n\">C_snode</span><span class=\"o\">.</span><span class=\"n\">str_blockIndent</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span>\n            <span class=\"n\">level</span>   <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">syslog</span>  <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"n\">state</span>   <span class=\"o\">=</span> <span class=\"n\">D</span><span class=\"p\">(</span>\n    <span class=\"n\">version</span>     <span class=\"o\">=</span> <span class=\"n\">str_version</span><span class=\"p\">,</span>\n    <span class=\"n\">desc</span>        <span class=\"o\">=</span> <span class=\"n\">str_desc</span><span class=\"p\">,</span>\n    <span class=\"n\">args</span>        <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">msg</span><span class=\"p\">):</span>\n    <span class=\"n\">d_control</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">internalctl_process</span><span class=\"p\">(</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span>\n            <span class=\"n\">d_control</span><span class=\"p\">,</span>\n            <span class=\"n\">indent</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Installation</a></h2>\n<p>Installation is relatively straightforward, and we recommend using python <tt>`pip</tt> to simplu install the module, preferably in a python virtual environment.</p>\n<div id=\"python-virtual-environment\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Python Virtual Environment</a></h3>\n<p>On Ubuntu, install the Python virtual environment creator</p>\n<pre>sudo apt install virtualenv\n</pre>\n<p>Then, create a directory for your virtual environments e.g.:</p>\n<pre>mkdir ~/python-envs\n</pre>\n<p>You might want to add to your .bashrc file these two lines:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">WORKON_HOME</span><span class=\"o\">=</span>~/python-envs\n<span class=\"nb\">source</span> /usr/local/bin/virtualenvwrapper.sh\n</pre>\n<p>Note that depending on distro, the virtualenvwrapper.sh path might be</p>\n<pre>/usr/share/virtualenvwrapper/virtualenvwrapper.sh\n</pre>\n<p>Subsequently, you can source your <tt>.bashrc</tt> and create a new Python3 virtual environment:</p>\n<pre><span class=\"nb\">source</span> .bashrc\nmkvirtualenv --python<span class=\"o\">=</span>python3 python_env\n</pre>\n<p>To activate or \u201center\u201d the virtual env:</p>\n<pre>workon python_env\n</pre>\n<p>To deactivate virtual env:</p>\n<pre>deactivate\n</pre>\n<p>Install the module</p>\n<pre>pip install pfstate\n</pre>\n</div>\n<div id=\"using-the-fnndsc-pfstorage-docker-container\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Using the <tt>fnndsc/pfstorage</tt> docker container</a></h3>\n<p>For completeness sake with other pf* packages, a dockerized build is provided, although its utility is debatable and running / building the docker image will serve little purpose.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Usage</a></h2>\n<p>For usage of  <tt>pstate</tt>, consult the relevant wiki pages  &lt;<a href=\"https://github.com/FNNDSC/pfstate/wiki/pfstate-overview\" rel=\"nofollow\">https://github.com/FNNDSC/pfstate/wiki/pfstate-overview</a>&gt;`.</p>\n<div id=\"command-line-arguments\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Command line arguments</a></h3>\n<pre>[--msg '<span class=\"p\">&lt;</span><span class=\"nt\">JSON_formatted</span><span class=\"p\">&gt;</span>']\nAn optional JSON formatted string exemplifying how to get and\nset internal variables.\n\n--msg '\n{\n    \"action\": \"internalctl\",\n    \"meta\": {\n                \"var\":     \"/\",\n                \"get\":      \"value\"\n            }\n}'\n\n--msg '\n{   \"action\": \"internalctl\",\n    \"meta\": {\n                \"var\":     \"/service/megalodon\",\n                \"set\":     {\n                    \"compute\": {\n                        \"addr\": \"10.20.1.71:5010\",\n                        \"baseURLpath\": \"api/v1/cmd/\",\n                        \"status\": \"undefined\"\n                    },\n                    \"data\": {\n                        \"addr\": \"10.20.1.71:5055\",\n                        \"baseURLpath\": \"api/v1/cmd/\",\n                        \"status\": \"undefined\"\n                    }\n                }\n            }\n}'\n\n[--configFileLoad <span class=\"p\">&lt;</span><span class=\"nt\">file</span><span class=\"p\">&gt;</span>]\nLoad configuration information from the JSON formatted <span class=\"p\">&lt;</span><span class=\"nt\">file</span><span class=\"p\">&gt;</span>.\n\n[--configFileSave <span class=\"p\">&lt;</span><span class=\"nt\">file</span><span class=\"p\">&gt;</span>]\nSave configuration information to the JSON formatted <span class=\"p\">&lt;</span><span class=\"nt\">file</span><span class=\"p\">&gt;</span>.\n\n[-x|--desc]\nProvide an overview help page.\n\n[-y|--synopsis]\nProvide a synopsis help summary.\n\n[--version]\nPrint internal version number and exit.\n\n[--debugToDir <span class=\"p\">&lt;</span><span class=\"nt\">dir</span><span class=\"p\">&gt;</span>]\nA directory to contain various debugging output -- these are typically\nJSON object strings capturing internal state. If empty string (default)\nthen no debugging outputs are captured/generated. If specified, then\n``pfcon`` will check for dir existence and attempt to create if\nneeded.\n\n[-v|--verbosity <span class=\"p\">&lt;</span><span class=\"nt\">level</span><span class=\"p\">&gt;</span>]\nSet the verbosity level. \"0\" typically means no/minimal output. Allows for\nmore fine tuned output control as opposed to '--quiet' that effectively\nsilences everything.\n</pre>\n<p>EXAMPLES</p>\n<pre>pfstate                                                <span class=\"se\">\\\\</span>\n    --msg <span class=\"s1\">'\n        {  \"action\": \"internalctl\",\n            \"meta\": {\n                        \"var\":     \"/\",\n                        \"get\":      \"value\"\n                    }\n        }'</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5783483, "releases": {"1.0.0.0": [{"comment_text": "", "digests": {"md5": "8a461f55d5c2bdca554393ac2d283126", "sha256": "8162a48321e43bddde2a6db172ae4c448b2cb3d639520f246002d93073dac34c"}, "downloads": -1, "filename": "pfstate-1.0.0.0.tar.gz", "has_sig": false, "md5_digest": "8a461f55d5c2bdca554393ac2d283126", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11383, "upload_time": "2019-08-22T16:57:20", "upload_time_iso_8601": "2019-08-22T16:57:20.706786Z", "url": "https://files.pythonhosted.org/packages/81/87/2c08ace867e75045c224b62613d3d55a6e5699c5ced27724cdbc0870f41c/pfstate-1.0.0.0.tar.gz", "yanked": false}], "1.0.1.0": [{"comment_text": "", "digests": {"md5": "fce5b54d919c9cf5457705a6c47351e7", "sha256": "723780a358bbbabc93a724899a5df13f8a47533c2031e6335038382a8992abd9"}, "downloads": -1, "filename": "pfstate-1.0.1.0.tar.gz", "has_sig": false, "md5_digest": "fce5b54d919c9cf5457705a6c47351e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11673, "upload_time": "2019-08-27T20:50:47", "upload_time_iso_8601": "2019-08-27T20:50:47.385759Z", "url": "https://files.pythonhosted.org/packages/b8/50/212f317f9ca10eb463dca11f0248a575a72e2f85b8a1d9f90a1bc4484c90/pfstate-1.0.1.0.tar.gz", "yanked": false}], "1.0.1.2": [{"comment_text": "", "digests": {"md5": "59954296d30ab0e33df076911ce1909c", "sha256": "25f38fef83c9bf3456bd5e423f44d9250ed8205906d748b081980e11923a118b"}, "downloads": -1, "filename": "pfstate-1.0.1.2.tar.gz", "has_sig": false, "md5_digest": "59954296d30ab0e33df076911ce1909c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11673, "upload_time": "2019-09-03T18:09:15", "upload_time_iso_8601": "2019-09-03T18:09:15.934193Z", "url": "https://files.pythonhosted.org/packages/03/39/fac6c1d497f28673e8ab83c765b9858bc1ddd7e9b96aafdc7a0ac19b3f4f/pfstate-1.0.1.2.tar.gz", "yanked": false}], "1.1.1.2": [{"comment_text": "", "digests": {"md5": "b4f11056e433ab3ff63df6b3f64e26a8", "sha256": "f1dd056f3dc4c2fac98e4fee301998a6a318f5396d7514470d73cbcbd6172c2a"}, "downloads": -1, "filename": "pfstate-1.1.1.2.tar.gz", "has_sig": false, "md5_digest": "b4f11056e433ab3ff63df6b3f64e26a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11679, "upload_time": "2019-09-04T21:06:40", "upload_time_iso_8601": "2019-09-04T21:06:40.242801Z", "url": "https://files.pythonhosted.org/packages/ac/4a/4b7aa7bd4b97a237e348030d4054194ca06c6c3e01b652edc77222bbdaf5/pfstate-1.1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b4f11056e433ab3ff63df6b3f64e26a8", "sha256": "f1dd056f3dc4c2fac98e4fee301998a6a318f5396d7514470d73cbcbd6172c2a"}, "downloads": -1, "filename": "pfstate-1.1.1.2.tar.gz", "has_sig": false, "md5_digest": "b4f11056e433ab3ff63df6b3f64e26a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11679, "upload_time": "2019-09-04T21:06:40", "upload_time_iso_8601": "2019-09-04T21:06:40.242801Z", "url": "https://files.pythonhosted.org/packages/ac/4a/4b7aa7bd4b97a237e348030d4054194ca06c6c3e01b652edc77222bbdaf5/pfstate-1.1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:54 2020"}