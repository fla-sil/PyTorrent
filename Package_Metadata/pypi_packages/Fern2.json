{"info": {"author": "Jason, Lin", "author_email": "jason.m.lin@outlook.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: Chinese (Simplified)", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: Microsoft", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# FERN\n\n>  **English Version** | [\u4e2d\u6587\u7248](./README_ZH.md)\n\nFern defines a model development structure control for NLP. With the help of Fern, the text preprocessing, model building and model training can be implemented quickly. These modules contain the following functions:\n\n1. Text preprocessing: data downloader, data cleaner, data transformer and data splitter\n2. Model building: model saving, loading and architecture printing\n3. Model training: step /epochs training and evaluation, evaluation function setting, loss function setting and label weight setting\n\nThe design purpose of Fern is mainly to solve the problem of too much repetitive code in different NLP projects and reduce the flow code, so as to avoid random bugs in the process data interaction\n\n## INSTALL\n\n1. Install from  `pypi`\n\n   ```shell\n   $ pip install Fern2\n   ```\n\n2. Install from source code\n\n   ```shell\n   $ pip install -e git+https://github.com/Jasonsey/Fern.git@develop\n   ```\n\n## TUTORIAL\n\nThis is a quick tutorial that covers the basics of all classes. For more usage methods, it is recommended to see the instructions for the functions in the source code\n\n### DATA PREPARATION\n\n1. Data download\n\n   ```python\n   from fern.utils.data import BaseDownloader\n\n\n   loader = BaseDownloader(host=config.HOST, user=config.USER, password=config.PASSWORD)\n   loader.read_msssql(sql=config.SQL)\n   loader.save(config.SOURCE_PATH)\n   ```\n\n2. Load the downloaded data from disk\n\n   ```python\n   loader.load(config.SOURCE_PATH)\n   ```\n\n3. Data cleaning\n\n   ```python\n   from fern.utils.data import BaseCleaner\n\n\n   class DataCleaner(BaseCleaner):\n       def clean_label(self, row):\n           return row['LABEL']\n\n       def clean_data(self, row):\n       \t\tdata = row['DATA']\n           res = do_clean(data)\n           return res\n\n\n   cleaner = DataCleaner(stop_words=config.STOP_WORDS, user_words=config.USER_WORDS)\n   cleaner.clean(loader.data)\n   ```\n\n4. Data transforming\n\n   ```python\n   from fern.utils.data import BaseTransformer\n\n\n   class DataTransformer(BaseTransformer):\n       def transform_label(self, label):\n           res = np.zeros([1] + self.output_shape, np.float32)\n           for i in range(len(str(label))):\n               number = int(str(label)[i])\n               res[:, i, number] = 1.0\n           return res\n\n\n   transformer = DataTransformer(\n       data=cleaner.data,\n       word_path=config.WORDS_LIBRARY,\n       min_len=config.MIN_SEQ_LEN,\n       max_len=config.MAX_SEQ_LEN,\n       min_freq=config.MAX_WORD_FREQ,\n       output_shape=config.OUTPUT_SHAPE,\n       filter_data=True)\n   transformer.transform(data=cleaner.data)\n   transformer.save(config.TRANSFORMED_DATA)\n   ```\n\n5. Data segmentation\n\n   ```python\n   from fern.utils.data import BaseSplitter\n\n\n   splitter = BaseSplitter(rate_val=config.RATE_VAL)\n   splitter.split(transformer.data)\n   splitter.save(config.SPLIT_DATA)\n   ```\n\n### MODEL SEARCH\n\n1. Configure the list of models to be searched\n\n\n  ```python\n  from fern.utils.model import BaseModel\n\n  class TextConv1D_1(BaseModel):\n      def build(self):\n          inp = layers.Input(shape=(self.max_seq_len,))\n          x = layers.Dense(12)(x)\n          oup = layers.Activation('softmax')(x)\n          model = Model(\n              inputs=inp,\n              outputs=oup,\n              name=self.name)\n          return model\n\n  class TextConv1D_2(BaseModel):\n      def build(self):\n          inp = layers.Input(shape=(self.max_seq_len,))\n          x = layers.Dense(24)(x)\n          oup = layers.Activation('softmax')(x)\n          model = Model(\n            \tinputs=inp,\n            \toutputs=oup,\n            \tname=self.name)\n          return model\n\n  UNOPTIMIZED_MODELS = [TextConv1D_1, TextConv1D_2]\n  ```\n\n2. Searching the best model\n\n   ```python\n   from fern.utils.train import BaseTrainer\n\n\n   best_score = 0\n   best_epoch = 0\n   best_model = ''\n\n   for model in UNOPTIMIZED_MODELS:\n   \t\ttf.keras.backend.clear_session()\n   \t\ttry:\n       \tmy_model = model(\n             output_shape=config.OUTPUT_SHAPE, \n             max_seq_len=config.MAX_SEQ_LEN, \n             library_len=library_len)\n       \ttrainer = BaseTrainer(\n             model=my_model,\n             path_data=config.SPLIT_DATA,\n             lr=config.LR,\n             batch_size=config.BATCH_SIZE)\n       score, epoch = trainer.train(\n           config.EPOCHS,\n           early_stop=config.EARLY_STOP)\n       if score > best_score:\n         best_score = score\n         best_epoch = epoch\n         best_model = my_model.name\n\n   print(f'Best Model: {best_model}, Best Score: {best_score}, Best Epoch: {best_epoch}')\n   ```\n\n### TRAINING THE BEST MODEL\n\n```python\nmy_model = UNOPTIMIZED_MODELS[0](\n    output_shape=config.OUTPUT_SHAPE, \n    max_seq_len=config.MAX_SEQ_LEN,\n    library_len=library_len)\n\ntrainer = ModelTrainer(\n    model=my_model,\n    path_data=config.SPLIT_DATA,\n    lr=config.LR,\n    batch_size=config.BATCH_SIZE)\n\n_ = trainer.train(config.BEST_EPOCH, mode='server')\ntrainer.save(config.MODEL_PATH)\n```\n\n## VARIABLE NAMING RULE\n\nIn order to facilitate the definition, the following convention is made for the naming of easily divergent variables\uff1a\n\n1. For data variables, write rules for variables of the same type\uff1a\n   - `data_train`, `data_val`\n   - `label_train`, `label_val`\n\n2. For indicator variables, write rules for variables of the same type\uff1a\n   - `val_loss`, `val_acc`, `val_binary_acc`\n   - `train_loss`, `train_acc`\n\n3. For other variables, according to the rule that first it belongs to a and second it belongs to b\uff1a`a_b`\n\n   - `path_dataset`\n\n## CNAGE LOG\n\n[CHANGE LOG](./CHANGELOG.md)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Jasonsey/Fern", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "Fern2", "package_url": "https://pypi.org/project/Fern2/", "platform": "", "project_url": "https://pypi.org/project/Fern2/", "project_urls": {"Homepage": "https://github.com/Jasonsey/Fern"}, "release_url": "https://pypi.org/project/Fern2/0.1.2/", "requires_dist": ["tensorflow (>=2.0.0)", "tqdm (>=4.0.0)", "nltk (>=3.4.5)", "pymssql (>=2.1.4)", "numpy (>=1.18.1)", "pandas (>=1.0.3)"], "requires_python": ">=3.6", "summary": "NLP text processing toolkit for Deep Learning", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>FERN</h1>\n<blockquote>\n<p><strong>English Version</strong> | <a href=\"./README_ZH.md\" rel=\"nofollow\">\u4e2d\u6587\u7248</a></p>\n</blockquote>\n<p>Fern defines a model development structure control for NLP. With the help of Fern, the text preprocessing, model building and model training can be implemented quickly. These modules contain the following functions:</p>\n<ol>\n<li>Text preprocessing: data downloader, data cleaner, data transformer and data splitter</li>\n<li>Model building: model saving, loading and architecture printing</li>\n<li>Model training: step /epochs training and evaluation, evaluation function setting, loss function setting and label weight setting</li>\n</ol>\n<p>The design purpose of Fern is mainly to solve the problem of too much repetitive code in different NLP projects and reduce the flow code, so as to avoid random bugs in the process data interaction</p>\n<h2>INSTALL</h2>\n<ol>\n<li>\n<p>Install from  <code>pypi</code></p>\n<pre>$ pip install Fern2\n</pre>\n</li>\n<li>\n<p>Install from source code</p>\n<pre>$ pip install -e git+https://github.com/Jasonsey/Fern.git@develop\n</pre>\n</li>\n</ol>\n<h2>TUTORIAL</h2>\n<p>This is a quick tutorial that covers the basics of all classes. For more usage methods, it is recommended to see the instructions for the functions in the source code</p>\n<h3>DATA PREPARATION</h3>\n<ol>\n<li>\n<p>Data download</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fern.utils.data</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDownloader</span>\n\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">BaseDownloader</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">USER</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">PASSWORD</span><span class=\"p\">)</span>\n<span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">read_msssql</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">SQL</span><span class=\"p\">)</span>\n<span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">SOURCE_PATH</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Load the downloaded data from disk</p>\n<pre><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">SOURCE_PATH</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Data cleaning</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fern.utils.data</span> <span class=\"kn\">import</span> <span class=\"n\">BaseCleaner</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DataCleaner</span><span class=\"p\">(</span><span class=\"n\">BaseCleaner</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clean_label</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'LABEL'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">):</span>\n    \t\t<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'DATA'</span><span class=\"p\">]</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">do_clean</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span>\n\n\n<span class=\"n\">cleaner</span> <span class=\"o\">=</span> <span class=\"n\">DataCleaner</span><span class=\"p\">(</span><span class=\"n\">stop_words</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">STOP_WORDS</span><span class=\"p\">,</span> <span class=\"n\">user_words</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">USER_WORDS</span><span class=\"p\">)</span>\n<span class=\"n\">cleaner</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Data transforming</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fern.utils.data</span> <span class=\"kn\">import</span> <span class=\"n\">BaseTransformer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DataTransformer</span><span class=\"p\">(</span><span class=\"n\">BaseTransformer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">transform_label</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">):</span>\n        <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_shape</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">))):</span>\n            <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n            <span class=\"n\">res</span><span class=\"p\">[:,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span>\n\n\n<span class=\"n\">transformer</span> <span class=\"o\">=</span> <span class=\"n\">DataTransformer</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">cleaner</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n    <span class=\"n\">word_path</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">WORDS_LIBRARY</span><span class=\"p\">,</span>\n    <span class=\"n\">min_len</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">MIN_SEQ_LEN</span><span class=\"p\">,</span>\n    <span class=\"n\">max_len</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">MAX_SEQ_LEN</span><span class=\"p\">,</span>\n    <span class=\"n\">min_freq</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">MAX_WORD_FREQ</span><span class=\"p\">,</span>\n    <span class=\"n\">output_shape</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">OUTPUT_SHAPE</span><span class=\"p\">,</span>\n    <span class=\"n\">filter_data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">cleaner</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">TRANSFORMED_DATA</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li>\n<p>Data segmentation</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fern.utils.data</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSplitter</span>\n\n\n<span class=\"n\">splitter</span> <span class=\"o\">=</span> <span class=\"n\">BaseSplitter</span><span class=\"p\">(</span><span class=\"n\">rate_val</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">RATE_VAL</span><span class=\"p\">)</span>\n<span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">transformer</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">splitter</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">SPLIT_DATA</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<h3>MODEL SEARCH</h3>\n<ol>\n<li>Configure the list of models to be searched</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fern.utils.model</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TextConv1D_1</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">inp</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_seq_len</span><span class=\"p\">,))</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">oup</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'softmax'</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span>\n            <span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"n\">inp</span><span class=\"p\">,</span>\n            <span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"n\">oup</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TextConv1D_2</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">inp</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Input</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_seq_len</span><span class=\"p\">,))</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">24</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">oup</span> <span class=\"o\">=</span> <span class=\"n\">layers</span><span class=\"o\">.</span><span class=\"n\">Activation</span><span class=\"p\">(</span><span class=\"s1\">'softmax'</span><span class=\"p\">)(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span>\n          \t<span class=\"n\">inputs</span><span class=\"o\">=</span><span class=\"n\">inp</span><span class=\"p\">,</span>\n          \t<span class=\"n\">outputs</span><span class=\"o\">=</span><span class=\"n\">oup</span><span class=\"p\">,</span>\n          \t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">model</span>\n\n<span class=\"n\">UNOPTIMIZED_MODELS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">TextConv1D_1</span><span class=\"p\">,</span> <span class=\"n\">TextConv1D_2</span><span class=\"p\">]</span>\n</pre>\n<ol>\n<li>\n<p>Searching the best model</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fern.utils.train</span> <span class=\"kn\">import</span> <span class=\"n\">BaseTrainer</span>\n\n\n<span class=\"n\">best_score</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">best_epoch</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">best_model</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n\n<span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">UNOPTIMIZED_MODELS</span><span class=\"p\">:</span>\n\t\t<span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">keras</span><span class=\"o\">.</span><span class=\"n\">backend</span><span class=\"o\">.</span><span class=\"n\">clear_session</span><span class=\"p\">()</span>\n\t\t<span class=\"k\">try</span><span class=\"p\">:</span>\n    \t<span class=\"n\">my_model</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span>\n          <span class=\"n\">output_shape</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">OUTPUT_SHAPE</span><span class=\"p\">,</span> \n          <span class=\"n\">max_seq_len</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">MAX_SEQ_LEN</span><span class=\"p\">,</span> \n          <span class=\"n\">library_len</span><span class=\"o\">=</span><span class=\"n\">library_len</span><span class=\"p\">)</span>\n    \t<span class=\"n\">trainer</span> <span class=\"o\">=</span> <span class=\"n\">BaseTrainer</span><span class=\"p\">(</span>\n          <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">my_model</span><span class=\"p\">,</span>\n          <span class=\"n\">path_data</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">SPLIT_DATA</span><span class=\"p\">,</span>\n          <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">LR</span><span class=\"p\">,</span>\n          <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">)</span>\n    <span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">epoch</span> <span class=\"o\">=</span> <span class=\"n\">trainer</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">EPOCHS</span><span class=\"p\">,</span>\n        <span class=\"n\">early_stop</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">EARLY_STOP</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">score</span> <span class=\"o\">&gt;</span> <span class=\"n\">best_score</span><span class=\"p\">:</span>\n      <span class=\"n\">best_score</span> <span class=\"o\">=</span> <span class=\"n\">score</span>\n      <span class=\"n\">best_epoch</span> <span class=\"o\">=</span> <span class=\"n\">epoch</span>\n      <span class=\"n\">best_model</span> <span class=\"o\">=</span> <span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Best Model: </span><span class=\"si\">{</span><span class=\"n\">best_model</span><span class=\"si\">}</span><span class=\"s1\">, Best Score: </span><span class=\"si\">{</span><span class=\"n\">best_score</span><span class=\"si\">}</span><span class=\"s1\">, Best Epoch: </span><span class=\"si\">{</span><span class=\"n\">best_epoch</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ol>\n<h3>TRAINING THE BEST MODEL</h3>\n<pre><span class=\"n\">my_model</span> <span class=\"o\">=</span> <span class=\"n\">UNOPTIMIZED_MODELS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">](</span>\n    <span class=\"n\">output_shape</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">OUTPUT_SHAPE</span><span class=\"p\">,</span> \n    <span class=\"n\">max_seq_len</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">MAX_SEQ_LEN</span><span class=\"p\">,</span>\n    <span class=\"n\">library_len</span><span class=\"o\">=</span><span class=\"n\">library_len</span><span class=\"p\">)</span>\n\n<span class=\"n\">trainer</span> <span class=\"o\">=</span> <span class=\"n\">ModelTrainer</span><span class=\"p\">(</span>\n    <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">my_model</span><span class=\"p\">,</span>\n    <span class=\"n\">path_data</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">SPLIT_DATA</span><span class=\"p\">,</span>\n    <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">LR</span><span class=\"p\">,</span>\n    <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">)</span>\n\n<span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">trainer</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">BEST_EPOCH</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'server'</span><span class=\"p\">)</span>\n<span class=\"n\">trainer</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">MODEL_PATH</span><span class=\"p\">)</span>\n</pre>\n<h2>VARIABLE NAMING RULE</h2>\n<p>In order to facilitate the definition, the following convention is made for the naming of easily divergent variables\uff1a</p>\n<ol>\n<li>\n<p>For data variables, write rules for variables of the same type\uff1a</p>\n<ul>\n<li><code>data_train</code>, <code>data_val</code></li>\n<li><code>label_train</code>, <code>label_val</code></li>\n</ul>\n</li>\n<li>\n<p>For indicator variables, write rules for variables of the same type\uff1a</p>\n<ul>\n<li><code>val_loss</code>, <code>val_acc</code>, <code>val_binary_acc</code></li>\n<li><code>train_loss</code>, <code>train_acc</code></li>\n</ul>\n</li>\n<li>\n<p>For other variables, according to the rule that first it belongs to a and second it belongs to b\uff1a<code>a_b</code></p>\n<ul>\n<li><code>path_dataset</code></li>\n</ul>\n</li>\n</ol>\n<h2>CNAGE LOG</h2>\n<p><a href=\"./CHANGELOG.md\" rel=\"nofollow\">CHANGE LOG</a></p>\n\n          </div>"}, "last_serial": 7186035, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "fa43da221c53da4938325ee8015a774d", "sha256": "885f19c95b985c106191ab41277a349a3666c5273f543ede369004a02fa00129"}, "downloads": -1, "filename": "Fern2-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fa43da221c53da4938325ee8015a774d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16527, "upload_time": "2020-04-28T10:31:27", "upload_time_iso_8601": "2020-04-28T10:31:27.897889Z", "url": "https://files.pythonhosted.org/packages/95/9c/5bbd6d30f936062bfd920834dfbb4536bd5e6dc7b37f484f3352ca808e08/Fern2-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "924521d2c8087e4437b1c75b73bdfb13", "sha256": "bd1bca72f063582295b815673a8cbc7f58eb92161477b31fca1faf28164ab689"}, "downloads": -1, "filename": "Fern2-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "924521d2c8087e4437b1c75b73bdfb13", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 17958, "upload_time": "2020-04-29T10:33:17", "upload_time_iso_8601": "2020-04-29T10:33:17.732669Z", "url": "https://files.pythonhosted.org/packages/8a/50/5cf320e2a005f4dd5912b620ed930f7ec81d5bdd53fd6351869f32d39019/Fern2-0.0.2-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "96eeebb46a1ee7a944d9af0bd919dff2", "sha256": "6ea96796e3e0fb4a6cefab3181b1089907c07b3e3197944439e457a3bcffc9af"}, "downloads": -1, "filename": "Fern2-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "96eeebb46a1ee7a944d9af0bd919dff2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20020, "upload_time": "2020-05-03T03:25:16", "upload_time_iso_8601": "2020-05-03T03:25:16.278965Z", "url": "https://files.pythonhosted.org/packages/fc/72/17bb1769719ed944b86c83053410f57d90fa220a2d5cdbf5b399a52523b9/Fern2-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "be66b7d0f612eca70e7d29084d5700e1", "sha256": "b72b2826c6ce0f09910d30eff16492201dfd38c7906a972ee9165df3b27af952"}, "downloads": -1, "filename": "Fern2-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "be66b7d0f612eca70e7d29084d5700e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20018, "upload_time": "2020-05-03T04:51:58", "upload_time_iso_8601": "2020-05-03T04:51:58.510267Z", "url": "https://files.pythonhosted.org/packages/0b/64/79d89c750ed116b376f85e1f8fb6b62388a233f39b24ffbeff8f2a8c3692/Fern2-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88719ece1d39c4db520a4849fe440c83", "sha256": "4d719fc61f165dff25c84353a38a516c061c3154ad2acb67e32a8dffe9d6a79b"}, "downloads": -1, "filename": "Fern2-0.1.1.tar.gz", "has_sig": false, "md5_digest": "88719ece1d39c4db520a4849fe440c83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14065, "upload_time": "2020-05-03T04:51:59", "upload_time_iso_8601": "2020-05-03T04:51:59.659607Z", "url": "https://files.pythonhosted.org/packages/8a/0e/ebe5b124ffb653f1d7ef9fd9ba2c8bc113abcf7d4bf0ca3a23c34b4f4631/Fern2-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b80e5a87675c5956cda24225d2930642", "sha256": "dee4a81e04a8b79defcf1237a6267b11872e1a6dcbdf1eb7a0c34dc5fbfb07ec"}, "downloads": -1, "filename": "Fern2-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b80e5a87675c5956cda24225d2930642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20014, "upload_time": "2020-05-07T07:25:25", "upload_time_iso_8601": "2020-05-07T07:25:25.811605Z", "url": "https://files.pythonhosted.org/packages/59/c3/f4e534ff9042b9a602a4ea0c016ff224e416c9b0443f3d429cd5aa286de2/Fern2-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93baf1b835df891f44e808709e4deed1", "sha256": "f960ad77ed950b4da0b26c9d8ce41dc9806406f08a7c343dc78c15c28396160e"}, "downloads": -1, "filename": "Fern2-0.1.2.tar.gz", "has_sig": false, "md5_digest": "93baf1b835df891f44e808709e4deed1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14067, "upload_time": "2020-05-07T07:25:26", "upload_time_iso_8601": "2020-05-07T07:25:26.727586Z", "url": "https://files.pythonhosted.org/packages/d0/25/299fef6137064f0d1f79db216c6c9231599908ab5f3c25241d051c5a31da/Fern2-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b80e5a87675c5956cda24225d2930642", "sha256": "dee4a81e04a8b79defcf1237a6267b11872e1a6dcbdf1eb7a0c34dc5fbfb07ec"}, "downloads": -1, "filename": "Fern2-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b80e5a87675c5956cda24225d2930642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20014, "upload_time": "2020-05-07T07:25:25", "upload_time_iso_8601": "2020-05-07T07:25:25.811605Z", "url": "https://files.pythonhosted.org/packages/59/c3/f4e534ff9042b9a602a4ea0c016ff224e416c9b0443f3d429cd5aa286de2/Fern2-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "93baf1b835df891f44e808709e4deed1", "sha256": "f960ad77ed950b4da0b26c9d8ce41dc9806406f08a7c343dc78c15c28396160e"}, "downloads": -1, "filename": "Fern2-0.1.2.tar.gz", "has_sig": false, "md5_digest": "93baf1b835df891f44e808709e4deed1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14067, "upload_time": "2020-05-07T07:25:26", "upload_time_iso_8601": "2020-05-07T07:25:26.727586Z", "url": "https://files.pythonhosted.org/packages/d0/25/299fef6137064f0d1f79db216c6c9231599908ab5f3c25241d051c5a31da/Fern2-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:53 2020"}