{"info": {"author": "Sean Whalen", "author_email": "whalenster@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Security"], "description": "pyldfire\n========\n\nA Python module for `Palo Alto Networks\\` WildFire API`_\n\n::\n\n     Copyright 2016 Sean Whalen\n\n     Licensed under the Apache License, Version 2.0 (the \"License\");\n     you may not use this file except in compliance with the License.\n     You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n     Unless required by applicable law or agreed to in writing, software\n     distributed under the License is distributed on an \"AS IS\" BASIS,\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     See the License for the specific language governing permissions and\n     limitations under the License.\n\nFeatures\n--------\n\n-  Python 2 and 3 support\n-  Returns native Python objects\n- Raises exceptions on API errors with error details\n-  Supports HTTPS proxies and SSL/TLS validation\n-  Supports WildFire cloud or appliance\n-  Supports all WildFire 8.1 API calls\n\n   -  Uploading sample files and URLs\n   -  Getting verdicts\n   -  Getting full reports in PDF or dictionary formats\n   -  Getting samples\n   -  Getting PCAPs\n   -  Getting a malware test file\n\nExamples\n--------\n\n::\n\n    json import dumps\n    from io import BytesIO\n\n    from pyldfire import WildFire\n\n    printer = PrettyPrinter(indent=2)\n\n    wildfire = WildFire(\"api-key-goes-here\")\n\n    # Submit a local file\n    with open(\"malware\", \"rb\") as sample_file:\n        results = wildfire.submit_file(sample_file)\n    dumps(results)\n\n    # File Hashes can be MD5,SHA1, or SHA256\n    file_hash = \"419251150a2f77422efa1e016d605d69\"\n\n    # Download a sample to a file\n    with open(\"sample\", \"wb\") as sample_file:\n        sample_file.write(wildfire.get_sample(file_hash))\n\n    # Or keep it as a file-like object in memory instead\n    sample = BytesIO(wildfire.get_sample(file_hash))\n\n    # Same for PCAPs and PDF reports\n\n    # Get a verdict\n    verdict = wildfire.get_verdicts([file_hash])\n\n    # Get analysis results\n    results = wildfire.get_report(file_hash)\n\n    # Test your firewall\n    wildfire.get_malware_test_file()\n\npyldfire.WildFire methods\n-------------------------\n\n``__init__(self, api_key, host='wildfire.paloaltonetworks.com', proxies=None, verify=True)``\n\nInitializes the WildFire class\n\n::\n\n     Args:\n         api_key (str): A WildFire API Key\n         host (str): The hostname of the WildFire service or appliance\n         proxies (dict): An optional dictionary containing proxy data,\n         with https as the key, and the proxy path as the value\n         verify (bool): Verify the certificate\n         verify (str): A path to a CA cert bundle\n\n``get_malware_test_file(self)``\n\nGets a unique, benign malware test file that will trigger an alert on\nPalo Alto Networks\u2019 firewalls\n\n::\n\n     Returns:\n         bytes: A malware test file\n\n``get_pcap(self, file_hash, platform=None)``\n\nGets a PCAP from a sample analysis\n\n::\n\n     Args:\n         file_hash (str): A hash of a sample\n         platform (int): One of the following integers:\n\n         WildFire Private and Global Cloud\n\n          1: Windows XP, Adobe Reader 9.3.3, Office 2003\n          2: Windows XP, Adobe Reader 9.4.0, Flash 10, Office 2007\n          3: Windows XP, Adobe Reader 11, Flash 11, Office 2010\n          4: Windows 7 32-bit, Adobe Reader 11, Flash 11, Office 2010\n          5: Windows 7 64-bit, Adobe Reader 11, Flash 11, Office 2010\n          100: PDF Static Analyzer\n          101: DOC/CDF Static Analyzer\n          102: Java/Jar Static Analyzer\n          103: Office 2007 Open XML Static Analyzer\n          104: Adobe Flash Static Analyzer\n          204: PE Static Analyzer\n\n        WildFire Global Cloudonly\n\n          6: Windows XP, Internet Explorer 8, Flash 11\n          20: Windows XP, Adobe Reader 9.4.0, Flash 10, Office 2007\n          21: Windows 7, Flash 11, Office 2010\n          50: Mac OSX Mountain Lion\n          60: Windows XP, Adobe Reader 9.4.0, Flash 10, Office 2007\n          61: Windows 7 64-bit, Adobe Reader 11, Flash 11, Office 2010\n          66: Windows 10 64-bit, Adobe Reader 11, Flash 22, Office 2010\n          105: RTF Static Analyzer\n          110: Max OSX Static Analyzer\n          200: APK Static Analyzer\n          201: Android 2.3, API 10, avd2.3.1\n          202: Android 4.1, API 16, avd4.1.1 X86\n          203: Android 4.1, API 16, avd4.1.1 ARM\n          205: Phishing Static Analyzer\n          206: Android 4.3, API 18, avd4.3 ARM\n          300: Windows XP, Internet Explorer 8, Flash 13.0.0.281, Flash\n          16.0.0.305, Elink Analyzer\n          301: Windows 7, Internet Explorer 9, Flash 13.0.0.281, Flash\n          17.0.0.169, Elink Analyzer\n          302: Windows 7, Internet Explorer 10, Flash 16.0.0.305, Flash\n          17.0.0.169, Elink Analyzer\n          303: Windows 7, Internet Explorer 11, Flash 16.0.0.305, Flash\n          17.0.0.169, Elink Analyzer\n          400: Linux (ELF Files)\n          501: BareMetal Windows 7 x64, Adobe Reader 11, Flash 11,\n          Office 2010\n          800: Archives (RAR and 7-Zip files)\n     Returns:\n         bytes: The PCAP\n\n     Raises:\n          WildFireException: If an API error occurs\n\n``get_pdf_report(self, file_hash)``\n\nGets analysis results as a PDF\n\n::\n\n     Args:\n         file_hash: A hash of a sample of a file\n\n     Returns:\n         bytes: The PDF\n\n     Raises:\n          WildFireException: If an API error occurs\n\n``get_report(self, file_hash)``\n\nGets analysis results as structured data\n\n::\n\n     Args:\n         file_hash (str): A hash of a sample\n\n     Returns:\n         dict: Analysis results\n\n     Raises:\n             WildFireException: If an API error occurs\n\n``get_sample(self, file_hash)``\n\nGets a sample file\n\n::\n\n     Args:\n         file_hash (str): A hash of a sample\n\n     Returns:\n         bytes: The sample\n\n     Raises:\n             WildFireException: If an API error occurs\n\n``get_verdicts(self, file_hashes)``\n\nGets the verdict for one or more samples\n\n::\n\n     Args:\n            file_hashes (list): A list of file hash strings\n            file_hashes (str): A single file hash\n\n        Returns:\n            str: If a single file hash is passed, a string containing the verdict\n            list: If multiple hashes a passed, a list of corresponding list of verdict strings\n\n            Possible values:\n\n            'benign'\n            'malware'\n            'greyware'\n            'phishing'\n            'pending`\n            'error'\n            'not found`\n\n        Raises:\n            WildFireException: If an API error occurs\n\n``change_sample_verdict(self, sha256_hash, verdict, comment)``\n\nChange a sample's verdict\n\n::\n    Notes:\n            Available on WildFire appliances only\n\n    Args:\n        sha256_hash (str): The SHA-256 hash of the sample\n        verdict (str): The new verdict to set\n        verdict (int): The new verdict to set\n        comment (str): A comment describing the reason for the verdict change\n\n    Returns:\n        str: A response message\n\n    Raises:\n        WildFireException: If an API error occurs\n\n``get_changed_verdicts(self, date)``\n\nReturns a list of samples with changed WildFire appliance verdicts\n\n::\n\n    Args:\n            date (str): A starting date in ``YYY-MM-DD`` format\n\n    Notes:\n        This feature is only available on WildFire appliances.\n        Changed verdicts can only be obtained for the past 14 days.\n\n    Returns:\n        list: A list of samples with changed WildFire appliance verdicts\n\n``submit_file(self, file_obj, filename=\"sample\")``\n\nSubmits a file to WildFire for analysis\n\n::\n\n     Args:\n            file_obj (file): The file to send\n            filename (str): An optional filename\n\n        Returns:\n            dict: Analysis results\n\n        Raises:\n             WildFireException: If an API error occurs\n\n\n``submit_remote_file(self, url)``\n\nSubmits a file from a remote URL for analysis\n\n::\n\n     Args:\n            url (str): The URL where the file is located\n\n        Returns:\n            dict: Analysis results\n\n        Raises:\n             WildFireException: If an API error occurs\n\n        Notes:\n            This is for submitting files located at remote URLs, not web pages.\n\n        See Also:\n            submit_urls(self, urls)\n\n``submit_urls(self, urls)``\n\nSubmits one or more URLs to a web page for analysis\n\n::\n\n     Args:\n            urls (str): A single URL\n            urls (list): A list of URLs\n\n        Returns:\n            dict: If a single URL is passed, a dictionary of analysis results\n            list: If multiple URLs are passed, a list of corresponding dictionaries containing analysis results\n\n        Raises:\n             WildFireException: If an API error occurs\n\n.. _Palo Alto Networks\\` WildFire API: https://www.paloaltonetworks.com/documentation/81/wildfire/wf_api\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seanthegeek/pyldfire", "keywords": "PaloAltoNetworks WildFire API Malware Sandbox", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pyldfire", "package_url": "https://pypi.org/project/pyldfire/", "platform": "", "project_url": "https://pypi.org/project/pyldfire/", "project_urls": {"Homepage": "https://github.com/seanthegeek/pyldfire"}, "release_url": "https://pypi.org/project/pyldfire/9.0/", "requires_dist": ["requests", "xmltodict"], "requires_python": "", "summary": "A Python module for Palo Alto Networks' WildFire API", "version": "9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python module for <a href=\"https://www.paloaltonetworks.com/documentation/81/wildfire/wf_api\" rel=\"nofollow\">Palo Alto Networks` WildFire API</a></p>\n<pre>Copyright 2016 Sean Whalen\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</pre>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Python 2 and 3 support</li>\n<li>Returns native Python objects</li>\n<li>Raises exceptions on API errors with error details</li>\n<li>Supports HTTPS proxies and SSL/TLS validation</li>\n<li>Supports WildFire cloud or appliance</li>\n<li>Supports all WildFire 8.1 API calls<ul>\n<li>Uploading sample files and URLs</li>\n<li>Getting verdicts</li>\n<li>Getting full reports in PDF or dictionary formats</li>\n<li>Getting samples</li>\n<li>Getting PCAPs</li>\n<li>Getting a malware test file</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre>json import dumps\nfrom io import BytesIO\n\nfrom pyldfire import WildFire\n\nprinter = PrettyPrinter(indent=2)\n\nwildfire = WildFire(\"api-key-goes-here\")\n\n# Submit a local file\nwith open(\"malware\", \"rb\") as sample_file:\n    results = wildfire.submit_file(sample_file)\ndumps(results)\n\n# File Hashes can be MD5,SHA1, or SHA256\nfile_hash = \"419251150a2f77422efa1e016d605d69\"\n\n# Download a sample to a file\nwith open(\"sample\", \"wb\") as sample_file:\n    sample_file.write(wildfire.get_sample(file_hash))\n\n# Or keep it as a file-like object in memory instead\nsample = BytesIO(wildfire.get_sample(file_hash))\n\n# Same for PCAPs and PDF reports\n\n# Get a verdict\nverdict = wildfire.get_verdicts([file_hash])\n\n# Get analysis results\nresults = wildfire.get_report(file_hash)\n\n# Test your firewall\nwildfire.get_malware_test_file()\n</pre>\n</div>\n<div id=\"pyldfire-wildfire-methods\">\n<h2>pyldfire.WildFire methods</h2>\n<p><tt>__init__(self, api_key, <span class=\"pre\">host='wildfire.paloaltonetworks.com',</span> proxies=None, verify=True)</tt></p>\n<p>Initializes the WildFire class</p>\n<pre>Args:\n    api_key (str): A WildFire API Key\n    host (str): The hostname of the WildFire service or appliance\n    proxies (dict): An optional dictionary containing proxy data,\n    with https as the key, and the proxy path as the value\n    verify (bool): Verify the certificate\n    verify (str): A path to a CA cert bundle\n</pre>\n<p><tt>get_malware_test_file(self)</tt></p>\n<p>Gets a unique, benign malware test file that will trigger an alert on\nPalo Alto Networks\u2019 firewalls</p>\n<pre>Returns:\n    bytes: A malware test file\n</pre>\n<p><tt>get_pcap(self, file_hash, platform=None)</tt></p>\n<p>Gets a PCAP from a sample analysis</p>\n<pre>Args:\n    file_hash (str): A hash of a sample\n    platform (int): One of the following integers:\n\n    WildFire Private and Global Cloud\n\n     1: Windows XP, Adobe Reader 9.3.3, Office 2003\n     2: Windows XP, Adobe Reader 9.4.0, Flash 10, Office 2007\n     3: Windows XP, Adobe Reader 11, Flash 11, Office 2010\n     4: Windows 7 32-bit, Adobe Reader 11, Flash 11, Office 2010\n     5: Windows 7 64-bit, Adobe Reader 11, Flash 11, Office 2010\n     100: PDF Static Analyzer\n     101: DOC/CDF Static Analyzer\n     102: Java/Jar Static Analyzer\n     103: Office 2007 Open XML Static Analyzer\n     104: Adobe Flash Static Analyzer\n     204: PE Static Analyzer\n\n   WildFire Global Cloudonly\n\n     6: Windows XP, Internet Explorer 8, Flash 11\n     20: Windows XP, Adobe Reader 9.4.0, Flash 10, Office 2007\n     21: Windows 7, Flash 11, Office 2010\n     50: Mac OSX Mountain Lion\n     60: Windows XP, Adobe Reader 9.4.0, Flash 10, Office 2007\n     61: Windows 7 64-bit, Adobe Reader 11, Flash 11, Office 2010\n     66: Windows 10 64-bit, Adobe Reader 11, Flash 22, Office 2010\n     105: RTF Static Analyzer\n     110: Max OSX Static Analyzer\n     200: APK Static Analyzer\n     201: Android 2.3, API 10, avd2.3.1\n     202: Android 4.1, API 16, avd4.1.1 X86\n     203: Android 4.1, API 16, avd4.1.1 ARM\n     205: Phishing Static Analyzer\n     206: Android 4.3, API 18, avd4.3 ARM\n     300: Windows XP, Internet Explorer 8, Flash 13.0.0.281, Flash\n     16.0.0.305, Elink Analyzer\n     301: Windows 7, Internet Explorer 9, Flash 13.0.0.281, Flash\n     17.0.0.169, Elink Analyzer\n     302: Windows 7, Internet Explorer 10, Flash 16.0.0.305, Flash\n     17.0.0.169, Elink Analyzer\n     303: Windows 7, Internet Explorer 11, Flash 16.0.0.305, Flash\n     17.0.0.169, Elink Analyzer\n     400: Linux (ELF Files)\n     501: BareMetal Windows 7 x64, Adobe Reader 11, Flash 11,\n     Office 2010\n     800: Archives (RAR and 7-Zip files)\nReturns:\n    bytes: The PCAP\n\nRaises:\n     WildFireException: If an API error occurs\n</pre>\n<p><tt>get_pdf_report(self, file_hash)</tt></p>\n<p>Gets analysis results as a PDF</p>\n<pre>Args:\n    file_hash: A hash of a sample of a file\n\nReturns:\n    bytes: The PDF\n\nRaises:\n     WildFireException: If an API error occurs\n</pre>\n<p><tt>get_report(self, file_hash)</tt></p>\n<p>Gets analysis results as structured data</p>\n<pre>Args:\n    file_hash (str): A hash of a sample\n\nReturns:\n    dict: Analysis results\n\nRaises:\n        WildFireException: If an API error occurs\n</pre>\n<p><tt>get_sample(self, file_hash)</tt></p>\n<p>Gets a sample file</p>\n<pre>Args:\n    file_hash (str): A hash of a sample\n\nReturns:\n    bytes: The sample\n\nRaises:\n        WildFireException: If an API error occurs\n</pre>\n<p><tt>get_verdicts(self, file_hashes)</tt></p>\n<p>Gets the verdict for one or more samples</p>\n<pre>Args:\n       file_hashes (list): A list of file hash strings\n       file_hashes (str): A single file hash\n\n   Returns:\n       str: If a single file hash is passed, a string containing the verdict\n       list: If multiple hashes a passed, a list of corresponding list of verdict strings\n\n       Possible values:\n\n       'benign'\n       'malware'\n       'greyware'\n       'phishing'\n       'pending`\n       'error'\n       'not found`\n\n   Raises:\n       WildFireException: If an API error occurs\n</pre>\n<p><tt>change_sample_verdict(self, sha256_hash, verdict, comment)</tt></p>\n<p>Change a sample\u2019s verdict</p>\n<dl>\n<dt>::</dt>\n<dd><dl>\n<dt>Notes:</dt>\n<dd>Available on WildFire appliances only</dd>\n<dt>Args:</dt>\n<dd>sha256_hash (str): The SHA-256 hash of the sample\nverdict (str): The new verdict to set\nverdict (int): The new verdict to set\ncomment (str): A comment describing the reason for the verdict change</dd>\n<dt>Returns:</dt>\n<dd>str: A response message</dd>\n<dt>Raises:</dt>\n<dd>WildFireException: If an API error occurs</dd>\n</dl>\n</dd>\n</dl>\n<p><tt>get_changed_verdicts(self, date)</tt></p>\n<p>Returns a list of samples with changed WildFire appliance verdicts</p>\n<pre>Args:\n        date (str): A starting date in ``YYY-MM-DD`` format\n\nNotes:\n    This feature is only available on WildFire appliances.\n    Changed verdicts can only be obtained for the past 14 days.\n\nReturns:\n    list: A list of samples with changed WildFire appliance verdicts\n</pre>\n<p><tt>submit_file(self, file_obj, <span class=\"pre\">filename=\"sample\")</span></tt></p>\n<p>Submits a file to WildFire for analysis</p>\n<pre>Args:\n       file_obj (file): The file to send\n       filename (str): An optional filename\n\n   Returns:\n       dict: Analysis results\n\n   Raises:\n        WildFireException: If an API error occurs\n</pre>\n<p><tt>submit_remote_file(self, url)</tt></p>\n<p>Submits a file from a remote URL for analysis</p>\n<pre>Args:\n       url (str): The URL where the file is located\n\n   Returns:\n       dict: Analysis results\n\n   Raises:\n        WildFireException: If an API error occurs\n\n   Notes:\n       This is for submitting files located at remote URLs, not web pages.\n\n   See Also:\n       submit_urls(self, urls)\n</pre>\n<p><tt>submit_urls(self, urls)</tt></p>\n<p>Submits one or more URLs to a web page for analysis</p>\n<pre>Args:\n       urls (str): A single URL\n       urls (list): A list of URLs\n\n   Returns:\n       dict: If a single URL is passed, a dictionary of analysis results\n       list: If multiple URLs are passed, a list of corresponding dictionaries containing analysis results\n\n   Raises:\n        WildFireException: If an API error occurs\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6654567, "releases": {"7.1.3": [{"comment_text": "", "digests": {"md5": "50625a2164718d524041f2dc150ab892", "sha256": "4280205ed41cc3694c508b1948e4663498b823909203ea14fd3c095b12e608d1"}, "downloads": -1, "filename": "pyldfire-7.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "50625a2164718d524041f2dc150ab892", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9546, "upload_time": "2016-07-12T20:30:42", "upload_time_iso_8601": "2016-07-12T20:30:42.242686Z", "url": "https://files.pythonhosted.org/packages/91/c2/a1c93b0edf324a96558055e69dcb25226cda941e35e4eeee077925e755e7/pyldfire-7.1.3-py2.py3-none-any.whl", "yanked": false}], "9.0": [{"comment_text": "", "digests": {"md5": "fd52878be4bb8bc868fbd0d33781ad75", "sha256": "8e872eb0b43a1658cf492a597d3a392832ea7652d61106ecee075af72263e2ed"}, "downloads": -1, "filename": "pyldfire-9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fd52878be4bb8bc868fbd0d33781ad75", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12061, "upload_time": "2020-02-18T16:53:46", "upload_time_iso_8601": "2020-02-18T16:53:46.909743Z", "url": "https://files.pythonhosted.org/packages/c9/1f/7941b32d66eacee2efa746b2122f56029130d911eb21e56f492163bdf463/pyldfire-9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2279e75441d2055d6cbd00c9bad865b3", "sha256": "d4c64aab4ac6f896a3ef5901b2a90190b8c646c3895727bef49474219c6d4071"}, "downloads": -1, "filename": "pyldfire-9.0.tar.gz", "has_sig": false, "md5_digest": "2279e75441d2055d6cbd00c9bad865b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7940, "upload_time": "2020-02-18T16:53:48", "upload_time_iso_8601": "2020-02-18T16:53:48.244451Z", "url": "https://files.pythonhosted.org/packages/ca/84/b6435531f913ef3cf3c79262dca38390575bfd69e4e9ae6e2bf15358f147/pyldfire-9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fd52878be4bb8bc868fbd0d33781ad75", "sha256": "8e872eb0b43a1658cf492a597d3a392832ea7652d61106ecee075af72263e2ed"}, "downloads": -1, "filename": "pyldfire-9.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fd52878be4bb8bc868fbd0d33781ad75", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12061, "upload_time": "2020-02-18T16:53:46", "upload_time_iso_8601": "2020-02-18T16:53:46.909743Z", "url": "https://files.pythonhosted.org/packages/c9/1f/7941b32d66eacee2efa746b2122f56029130d911eb21e56f492163bdf463/pyldfire-9.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2279e75441d2055d6cbd00c9bad865b3", "sha256": "d4c64aab4ac6f896a3ef5901b2a90190b8c646c3895727bef49474219c6d4071"}, "downloads": -1, "filename": "pyldfire-9.0.tar.gz", "has_sig": false, "md5_digest": "2279e75441d2055d6cbd00c9bad865b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7940, "upload_time": "2020-02-18T16:53:48", "upload_time_iso_8601": "2020-02-18T16:53:48.244451Z", "url": "https://files.pythonhosted.org/packages/ca/84/b6435531f913ef3cf3c79262dca38390575bfd69e4e9ae6e2bf15358f147/pyldfire-9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:16 2020"}