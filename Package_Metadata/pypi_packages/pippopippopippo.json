{"info": {"author": "Luca Mendozzi, Luca Romelli", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Mendozzi Romelli progetto e sviluppo del software\n\nLink al repository: [link](https://gitlab.com/Mendozz/mendozzi_romelli_assignment_pipeline) (https://gitlab.com/Mendozz/mendozzi_romelli_assignment_pipeline). <br>\n\nPrima bozza della documentazione del primo progetto del corso di *progetto e svoluppo del software*. Implementazione di una pipeline per la __continuous integration__ e il __continuous deployment__ di un modulo python attraverso l'utilizzo della piattaforma gitlab.\n\n\n\n\n#### Cosa fa il modulo?\n\nIl modulo si occupa di esporre delle api restfull utilizzate per contattare un'altra api restfull per l'ottenimento di informazioni riguardo la posizione della ISS, una volta ottenute le informazioni, queste sono memorizzate all'interno di un *database locale*, __che deve gi\u00e0 esistere__, e sono successivamente contattabili.\n\n\n\n#### Prerequisiti\n\nPer utilizzare il modulo sono necessarie i moduli previsti nel file [requirements.txt](/requirements.txt), qui riportati per comodit\u00e0:\n\n\n\n* mysql-connector-python\n\n* flask\n\n* requests\n\n* pytest\n\n\n\nIn aggiunta \u00e8 necessario possedere un'istaza di un server mysql. In essa deve esistere un utente con permessi di selezione e scrittura in un database, __che deve gi\u00e0 esistere__.\n\n\n\n<hr>\n\n#### Installazione\n\nPer installare il package \u00e8 possibile utilizzare pip3: <br>\n\n`pip3 install pippopippopippo`  <br>\n\n\n<hr>\n\n#### Utilizzo\nL'importazione del modulo avviene attraverso l'uso di :\n\n` import iss_finder`\n\nQuesto modulo permette di poter istanziare, mediante la funzione\n`iss_finder.build_app(user,password, host, database, tabella)`\nun wrapper flask che espone le seguenti risorse:\n\n* http://__\\<host>__:__\\<port>__/ -> \"it works\"\n* http://__\\<host>__:__\\<port>__/position -->  ottiene i dati da un'altra API e li memorizza nel database\n* http://__\\<host>__:__\\<port>__/last-latitude  -->  fornisce l'ultima longitudine che ha registrato con __/position__\n* http://__\\<host>__:__\\<port>__/last-longitude  -->  fornisce l'ultima latitudine che ha registrato con __/position__\n\nPer eseguire l'applicazione creata con \n`z = iss_finder.build_app(*args)`\n\u00e8 necessario avviare il server Flask mediante:\n`z.run(host=localhost, port=5000)`\n\n\n\n# STAGE PIPELINE\n\n1. Build\n\n2. Verify\n\n3. Test unit\u00e0\n\n4. Test integrazione\n\n5. Package\n\n6. Deploy\n\n\n#### 1. Build\n\nNella fase di build abbiamo semplicemente testato l'installazione delle dipendenze necessarie\n\n\n\n#### 2. Verify\n\nAttraverso l'utilizzo del modulo pylint sono stati effettuati i test sulla qualit\u00e0 codice. Il codice scritto non rispetta molte delle normali convenzioni e best practice di sviluppo per cui __questo test \u00e8 autorizzato a fallire senza ripercussioni sull'esecuzione dell'intera pipeline__.\n\n\n\n#### 3. Test unit\u00e0\n\nQuesti test sono eseguiti per verificare il funzionamento del modulo senza portare a verificare l'integrazione con il database. I test si trovano alla seguente [pagina](/iss_finder/test/test_unita.py).\n\n\n\n#### 4. Test integrazione\n\nL'esecuzione di questi test serve a verificare il corretto funzionamento del modulo con il database *MySQL*.\n\nLa sua esecuzione richiede la presenza di un service, quello di MySQL, affiancato al service principale di python (ovvero quello che interpreta il nostro codice).\n\nI test si possono trovare [qui](iss_finder/test/test_integrazione.py).\n\n\n#### 5. Package\nLa realizzazione del package \u00e8 stata effettuata mediante l'uso di __wheel__, un modulo Python per la creazione di packages. All'interno di questa fase sono stati usati gli artefatti per consentire di scaricare il modulo direttamente da Gitlab, per un tempo massimo di 10 minuti. Questo consente di poter installare il package in locale attraverso l'artefatto oppure di sfruttare l'artefatto negli stage successivi, (**release**, **deploy**) nel master branch.\n\n\n#### 6. Deploy\nIl deploy, __eseguito solo sul master branch__ consiste nell'upload dell'artefatto creato nello stage di package allinterno dei repository di pypi.org. Per eseguire questa fase abbiamo utilizzato quindi un account su pypi.org e abbiamo memorizzato le credenziali nelle variabili di gitlab, richiamandole con ${PYPI_USER} e ${PYPI_PASSWORD}.\n\n\n#### 7. Release\nLa release, __eseguita solo sul master branch__, consiste nell'esempio di installazione del package, mediante il tool __pip3__ all'interno della macchina virtuale. L'installazione \u00e8 eseguita mediante l'uso di chiavi SSH. La chiave privata si trova in una variabile di Gitlab, la corrispondente pubblica \u00e8 memorizzata nel file **authorized_keys** nella macchina virtuale di azure.\nDopo essersi collegato alla macchina virtuale viene eseguito un semplice script bash (esempio.sh), qui riportato per comodit\u00e0:\n\n    python3.7 esempio.py &\n    pid=$!\n    sleep 3\n    curl http://localhost:5000/position\n    sleep 5\n    curl http://localhost:5000/last-latitude\n    sleep 5\n    curl http://localhost:5000/last-longitude\n    sleep 4\n    echo $pid\n    kill $pid\n\nQuesto richiama l'esecuzione del modulo esempio.py, roportato sotto, che lancia un istanza del wrapper Flask ed esegue alcune richieste attraverso curl.\n\n    import iss_finder\n\n    def test():\n            app = iss_finder.build_app(\"progetto\",\"progetto\",\"localhost\", \"progetto\",\"coords\")\n            app.run()\n\n    if __name__ == \"__main__\":\n            test()\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/Mendozz/mendozzi_romelli_assignment_pipeline", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pippopippopippo", "package_url": "https://pypi.org/project/pippopippopippo/", "platform": "", "project_url": "https://pypi.org/project/pippopippopippo/", "project_urls": {"Homepage": "https://gitlab.com/Mendozz/mendozzi_romelli_assignment_pipeline"}, "release_url": "https://pypi.org/project/pippopippopippo/0.12/", "requires_dist": ["flask", "mysql-connector-python", "pytest"], "requires_python": ">=3.6s", "summary": "Progetto Sviluppo Software", "version": "0.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Mendozzi Romelli progetto e sviluppo del software</h1>\n<p>Link al repository: <a href=\"https://gitlab.com/Mendozz/mendozzi_romelli_assignment_pipeline\" rel=\"nofollow\">link</a> (<a href=\"https://gitlab.com/Mendozz/mendozzi_romelli_assignment_pipeline\" rel=\"nofollow\">https://gitlab.com/Mendozz/mendozzi_romelli_assignment_pipeline</a>). <br></p>\n<p>Prima bozza della documentazione del primo progetto del corso di <em>progetto e svoluppo del software</em>. Implementazione di una pipeline per la <strong>continuous integration</strong> e il <strong>continuous deployment</strong> di un modulo python attraverso l'utilizzo della piattaforma gitlab.</p>\n<h4>Cosa fa il modulo?</h4>\n<p>Il modulo si occupa di esporre delle api restfull utilizzate per contattare un'altra api restfull per l'ottenimento di informazioni riguardo la posizione della ISS, una volta ottenute le informazioni, queste sono memorizzate all'interno di un <em>database locale</em>, <strong>che deve gi\u00e0 esistere</strong>, e sono successivamente contattabili.</p>\n<h4>Prerequisiti</h4>\n<p>Per utilizzare il modulo sono necessarie i moduli previsti nel file <a href=\"/requirements.txt\" rel=\"nofollow\">requirements.txt</a>, qui riportati per comodit\u00e0:</p>\n<ul>\n<li>\n<p>mysql-connector-python</p>\n</li>\n<li>\n<p>flask</p>\n</li>\n<li>\n<p>requests</p>\n</li>\n<li>\n<p>pytest</p>\n</li>\n</ul>\n<p>In aggiunta \u00e8 necessario possedere un'istaza di un server mysql. In essa deve esistere un utente con permessi di selezione e scrittura in un database, <strong>che deve gi\u00e0 esistere</strong>.</p>\n<hr>\n<h4>Installazione</h4>\n<p>Per installare il package \u00e8 possibile utilizzare pip3: <br></p>\n<p><code>pip3 install pippopippopippo</code>  <br></p>\n<hr>\n<h4>Utilizzo</h4>\n<p>L'importazione del modulo avviene attraverso l'uso di :</p>\n<p><code>import iss_finder</code></p>\n<p>Questo modulo permette di poter istanziare, mediante la funzione\n<code>iss_finder.build_app(user,password, host, database, tabella)</code>\nun wrapper flask che espone le seguenti risorse:</p>\n<ul>\n<li>http://<strong>&lt;host&gt;</strong>:<strong>&lt;port&gt;</strong>/ -&gt; \"it works\"</li>\n<li>http://<strong>&lt;host&gt;</strong>:<strong>&lt;port&gt;</strong>/position --&gt;  ottiene i dati da un'altra API e li memorizza nel database</li>\n<li>http://<strong>&lt;host&gt;</strong>:<strong>&lt;port&gt;</strong>/last-latitude  --&gt;  fornisce l'ultima longitudine che ha registrato con <strong>/position</strong></li>\n<li>http://<strong>&lt;host&gt;</strong>:<strong>&lt;port&gt;</strong>/last-longitude  --&gt;  fornisce l'ultima latitudine che ha registrato con <strong>/position</strong></li>\n</ul>\n<p>Per eseguire l'applicazione creata con\n<code>z = iss_finder.build_app(*args)</code>\n\u00e8 necessario avviare il server Flask mediante:\n<code>z.run(host=localhost, port=5000)</code></p>\n<h1>STAGE PIPELINE</h1>\n<ol>\n<li>\n<p>Build</p>\n</li>\n<li>\n<p>Verify</p>\n</li>\n<li>\n<p>Test unit\u00e0</p>\n</li>\n<li>\n<p>Test integrazione</p>\n</li>\n<li>\n<p>Package</p>\n</li>\n<li>\n<p>Deploy</p>\n</li>\n</ol>\n<h4>1. Build</h4>\n<p>Nella fase di build abbiamo semplicemente testato l'installazione delle dipendenze necessarie</p>\n<h4>2. Verify</h4>\n<p>Attraverso l'utilizzo del modulo pylint sono stati effettuati i test sulla qualit\u00e0 codice. Il codice scritto non rispetta molte delle normali convenzioni e best practice di sviluppo per cui <strong>questo test \u00e8 autorizzato a fallire senza ripercussioni sull'esecuzione dell'intera pipeline</strong>.</p>\n<h4>3. Test unit\u00e0</h4>\n<p>Questi test sono eseguiti per verificare il funzionamento del modulo senza portare a verificare l'integrazione con il database. I test si trovano alla seguente <a href=\"/iss_finder/test/test_unita.py\" rel=\"nofollow\">pagina</a>.</p>\n<h4>4. Test integrazione</h4>\n<p>L'esecuzione di questi test serve a verificare il corretto funzionamento del modulo con il database <em>MySQL</em>.</p>\n<p>La sua esecuzione richiede la presenza di un service, quello di MySQL, affiancato al service principale di python (ovvero quello che interpreta il nostro codice).</p>\n<p>I test si possono trovare <a href=\"iss_finder/test/test_integrazione.py\" rel=\"nofollow\">qui</a>.</p>\n<h4>5. Package</h4>\n<p>La realizzazione del package \u00e8 stata effettuata mediante l'uso di <strong>wheel</strong>, un modulo Python per la creazione di packages. All'interno di questa fase sono stati usati gli artefatti per consentire di scaricare il modulo direttamente da Gitlab, per un tempo massimo di 10 minuti. Questo consente di poter installare il package in locale attraverso l'artefatto oppure di sfruttare l'artefatto negli stage successivi, (<strong>release</strong>, <strong>deploy</strong>) nel master branch.</p>\n<h4>6. Deploy</h4>\n<p>Il deploy, <strong>eseguito solo sul master branch</strong> consiste nell'upload dell'artefatto creato nello stage di package allinterno dei repository di pypi.org. Per eseguire questa fase abbiamo utilizzato quindi un account su pypi.org e abbiamo memorizzato le credenziali nelle variabili di gitlab, richiamandole con ${PYPI_USER} e ${PYPI_PASSWORD}.</p>\n<h4>7. Release</h4>\n<p>La release, <strong>eseguita solo sul master branch</strong>, consiste nell'esempio di installazione del package, mediante il tool <strong>pip3</strong> all'interno della macchina virtuale. L'installazione \u00e8 eseguita mediante l'uso di chiavi SSH. La chiave privata si trova in una variabile di Gitlab, la corrispondente pubblica \u00e8 memorizzata nel file <strong>authorized_keys</strong> nella macchina virtuale di azure.\nDopo essersi collegato alla macchina virtuale viene eseguito un semplice script bash (esempio.sh), qui riportato per comodit\u00e0:</p>\n<pre><code>python3.7 esempio.py &amp;\npid=$!\nsleep 3\ncurl http://localhost:5000/position\nsleep 5\ncurl http://localhost:5000/last-latitude\nsleep 5\ncurl http://localhost:5000/last-longitude\nsleep 4\necho $pid\nkill $pid\n</code></pre>\n<p>Questo richiama l'esecuzione del modulo esempio.py, roportato sotto, che lancia un istanza del wrapper Flask ed esegue alcune richieste attraverso curl.</p>\n<pre><code>import iss_finder\n\ndef test():\n        app = iss_finder.build_app(\"progetto\",\"progetto\",\"localhost\", \"progetto\",\"coords\")\n        app.run()\n\nif __name__ == \"__main__\":\n        test()\n</code></pre>\n\n          </div>"}, "last_serial": 6066274, "releases": {"0.12": [{"comment_text": "", "digests": {"md5": "92fdf625b1fdfe0954c8fb12b3fac62b", "sha256": "4cb48447b367d942ffe5e36b2f351125e0798fd2bccd4293b6d4eeaaa04b4cc5"}, "downloads": -1, "filename": "pippopippopippo-0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "92fdf625b1fdfe0954c8fb12b3fac62b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6s", "size": 4911, "upload_time": "2019-10-23T10:26:41", "upload_time_iso_8601": "2019-10-23T10:26:41.456125Z", "url": "https://files.pythonhosted.org/packages/84/cc/d6ebd3d512b8f037b1d905cb56eeca32570508471ae4bc27286e29a0bf38/pippopippopippo-0.12-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7fd52615c69e828e12bbdd0ab9d549c1", "sha256": "12a792c8ef2283dc43ea76ffe971380d060ceaa5cf142c5c834990991c68620f"}, "downloads": -1, "filename": "pippopippopippo-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7fd52615c69e828e12bbdd0ab9d549c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5178, "upload_time": "2019-11-01T21:26:13", "upload_time_iso_8601": "2019-11-01T21:26:13.629675Z", "url": "https://files.pythonhosted.org/packages/a4/02/f724848e15b30d1741ad15e2d57a99267d3777b8466771a7a5794703749b/pippopippopippo-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92fdf625b1fdfe0954c8fb12b3fac62b", "sha256": "4cb48447b367d942ffe5e36b2f351125e0798fd2bccd4293b6d4eeaaa04b4cc5"}, "downloads": -1, "filename": "pippopippopippo-0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "92fdf625b1fdfe0954c8fb12b3fac62b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6s", "size": 4911, "upload_time": "2019-10-23T10:26:41", "upload_time_iso_8601": "2019-10-23T10:26:41.456125Z", "url": "https://files.pythonhosted.org/packages/84/cc/d6ebd3d512b8f037b1d905cb56eeca32570508471ae4bc27286e29a0bf38/pippopippopippo-0.12-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:54:10 2020"}