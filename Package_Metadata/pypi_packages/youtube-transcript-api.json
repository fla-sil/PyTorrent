{"info": {"author": "Jonas Depoix", "author_email": "jonas.depoix@web.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "\n# YouTube Transcript/Subtitle API (including automatically generated subtitles and subtitle translations)  \n\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=BAENLEW8VUJ6G&source=url) [![Build Status](https://travis-ci.org/jdepoix/youtube-transcript-api.svg)](https://travis-ci.org/jdepoix/youtube-transcript-api) [![Coverage Status](https://coveralls.io/repos/github/jdepoix/youtube-transcript-api/badge.svg?branch=master)](https://coveralls.io/github/jdepoix/youtube-transcript-api?branch=master) [![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](http://opensource.org/licenses/MIT) [![image](https://img.shields.io/pypi/v/youtube-transcript-api.svg)](https://pypi.org/project/youtube-transcript-api/) [![image](https://img.shields.io/pypi/pyversions/youtube-transcript-api.svg)](https://pypi.org/project/youtube-transcript-api/)\n\nThis is an python API which allows you to get the transcripts/subtitles for a given YouTube video. It also works for automatically generated subtitles, supports translating subtitles and it does not require a headless browser, like other selenium based solutions do!\n\n## Install\n\nIt is recommended to [install this module by using pip](https://pypi.org/project/youtube-transcript-api/):\n\n```\npip install youtube_transcript_api\n```\n\nIf you want to use it from source, you'll have to install the dependencies manually:\n\n```\npip install -r requirements.txt\n```\n\nYou can either integrate this module [into an existing application](#api), or just use it via an [CLI](#cli).\n\n## API\n\nThe easiest way to get a transcript for a given video is to execute:\n\n```python\nfrom youtube_transcript_api import YouTubeTranscriptApi\n\nYouTubeTranscriptApi.get_transcript(video_id)\n```\n\nThis will return a list of dictionaries looking somewhat like this:\n\n```python\n[\n    {\n        'text': 'Hey there',\n        'start': 7.58,\n        'duration': 6.13\n    },\n    {\n        'text': 'how are you',\n        'start': 14.08,\n        'duration': 7.58\n    },\n    # ...\n]\n```\n\nYou can also add the `languages` param if you want to make sure the transcripts are retrieved in your desired language (it defaults to english).\n\n```python\nYouTubeTranscriptApi.get_transcripts(video_ids, languages=['de', 'en'])\n```\n\nIt's a list of language codes in a descending priority. In this example it will first try to fetch the german transcript (`'de'`) and then fetch the english transcript (`'en'`) if it fails to do so. If you want to find out which languages are available first, [have a look at `list_transcripts()`](#list-available-transcripts)\n\nTo get transcripts for a list of video ids you can call:\n\n```python\nYouTubeTranscriptApi.get_transcripts(video_ids, languages=['de', 'en'])\n```\n\n`languages` also is optional here.\n\n### List available transcripts\n\nIf you want to list all transcripts which are available for a given video you can call:\n\n```python\ntranscript_list = YouTubeTranscriptApi.list_transcripts(video_id, languages=['de', 'en'])\n```\n\nThis will return a `TranscriptList` object  which is iterable and provides methods to filter the list of transcripts for specific languages and types, like:\n\n```python\ntranscript = transcript_list.find_transcript(['de', 'en'])\n```\n\nBy default this module always picks manually created transcripts over automatically created ones, if a transcript in the requested language is available both manually created and generated. The `TranscriptList` allows you to bypass this default behaviour by searching for specific transcript types:\n\n```python\n# filter for manually created transcripts\ntranscript = transcript_list.find_manually_created_transcript(['de', 'en'])\n\n# or automatically generated ones\ntranscript = transcript_list.find_generated_transcript(['de', 'en'])\n```\n\nThe methods `find_generated_transcript`, `find_manually_created_transcript`, `find_generated_transcript` return `Transcript` objects. They contain metadata regarding the transcript:\n\n```python\nprint(\n    transcript.video_id,\n    transcript.language,\n    transcript.language_code,\n    # whether it has been manually created or generated by YouTube\n    transcript.is_generated,\n    # whether this transcript can be translated or not\n    transcript.is_translatable,\n    # a list of languages the transcript can be translated to\n    transcript.translation_languages,\n)\n```\n\nand provide the method, which allows you to fetch the actual transcript data:\n\n```python\ntranscript.fetch()\n```\n\n### Translate transcript\n\nYouTube has a feature which allows you to automatically translate subtitles. This module also makes it possible to access this feature. To do so `Transcript` objects provide a `translate()` method, which returns a new translated `Transcript` object:\n\n```python\ntranscript = transcript_list.find_transcript(['en'])\ntranslated_transcript = transcript.translate('de')\nprint(translated_transcript.fetch())\n```\n\n### By example\n```python\n# retrieve the available transcripts\ntranscript_list = YouTubeTranscriptApi.list_transcripts('video_id')\n\n# iterate over all available transcripts\nfor transcript in transcript_list:\n\n    # the Transcript object provides metadata properties\n    print(\n        transcript.video_id,\n        transcript.language,\n        transcript.language_code,\n        # whether it has been manually created or generated by YouTube\n        transcript.is_generated,\n        # whether this transcript can be translated or not\n        transcript.is_translatable,\n        # a list of languages the transcript can be translated to\n        transcript.translation_languages,\n    )\n\n    # fetch the actual transcript data\n    print(transcript.fetch())\n\n    # translating the transcript will return another transcript object\n    print(transcript.translate('en').fetch())\n\n# you can also directly filter for the language you are looking for, using the transcript list\ntranscript = transcript_list.find_transcript(['de', 'en'])  \n\n# or just filter for manually created transcripts  \ntranscript = transcript_list.find_manually_created_transcript(['de', 'en'])  \n\n# or automatically generated ones  \ntranscript = transcript_list.find_generated_transcript(['de', 'en'])\n```\n\n## CLI  \n\nExecute the CLI script using the video ids as parameters and the results will be printed out to the command line:  \n\n```  \nyoutube_transcript_api <first_video_id> <second_video_id> ...  \n```  \n\nThe CLI also gives you the option to provide a list of preferred languages:  \n\n```  \nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages de en  \n```\n\nYou can also specify if you want to exclude automatically generated or manually created subtitles:\n\n```  \nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages de en --exclude-generated\nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages de en --exclude-manually-created\n```\n\nIf you would prefer to write it into a file or pipe it into another application, you can also output the results as json using the following line:  \n\n```  \nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages de en --json > transcripts.json  \n```  \n\nTranslating transcripts using the CLI is also possible:\n\n```  \nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages en --translate de\n```  \n\nIf you are not sure which languages are available for a given video you can call, to list all available transcripts:\n\n```  \nyoutube_transcript_api --list-transcripts <first_video_id>\n```  \n\n## Proxy  \n\nYou can specify a https/http proxy, which will be used during the requests to YouTube:  \n\n```python  \nfrom youtube_transcript_api import YouTubeTranscriptApi  \n\nYouTubeTranscriptApi.get_transcript(video_id, proxies={\"http\": \"http://user:pass@domain:port\", \"https\": \"https://user:pass@domain:port\"})  \n```  \n\nAs the `proxies` dict is passed on to the `requests.get(...)` call, it follows the [format used by the requests library](http://docs.python-requests.org/en/master/user/advanced/#proxies).  \n\nUsing the CLI:  \n\n```  \nyoutube_transcript_api <first_video_id> <second_video_id> --http-proxy http://user:pass@domain:port --https-proxy https://user:pass@domain:port  \n```\n\n## Cookies\n\nSome videos are age restricted, so this module won't be able to access those videos without some sort of authentication. To do this, you will need to have access to the desired video in a browser. Then, you will need to download that pages cookies into a text file. You can use the Chrome extension [cookies.txt](https://chrome.google.com/webstore/detail/cookiestxt/njabckikapfpffapmjgojcnbfjonfjfg?hl=en) or the Firefox extension [cookies.txt](https://addons.mozilla.org/en-US/firefox/addon/cookies-txt/).\n\nOnce you have that, you can use it with the module to access age-restricted videos' captions like so. \n\n```python  \nfrom youtube_transcript_api import YouTubeTranscriptApi  \n\nYouTubeTranscriptApi.get_transcript(video_id, cookies='/path/to/your/cookies.txt')\n\nYouTubeTranscriptApi.get_transcripts([video_id], cookies='/path/to/your/cookies.txt')\n```\n\nUsing the CLI:\n\n```\nyoutube_transcript_api <first_video_id> <second_video_id> --cookies /path/to/your/cookies.txt\n```\n\n\n## Warning  \n\n This code uses an undocumented part of the YouTube API, which is called by the YouTube web-client. So there is no guarantee that it won't stop working tomorrow, if they change how things work. I will however do my best to make things working again as soon as possible if that happens. So if it stops working, let me know!  \n\n## Donation  \n\nIf this project makes you happy by reducing your development time, you can make me happy by treating me to a cup of coffee :)  \n\n[![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=BAENLEW8VUJ6G&source=url)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jdepoix/youtube-transcript-api", "keywords": "youtube-api subtitles youtube transcripts transcript subtitle youtube-subtitles youtube-transcripts cli", "license": "", "maintainer": "", "maintainer_email": "", "name": "youtube-transcript-api", "package_url": "https://pypi.org/project/youtube-transcript-api/", "platform": "", "project_url": "https://pypi.org/project/youtube-transcript-api/", "project_urls": {"Homepage": "https://github.com/jdepoix/youtube-transcript-api"}, "release_url": "https://pypi.org/project/youtube-transcript-api/0.3.1/", "requires_dist": ["requests"], "requires_python": "", "summary": "This is an python API which allows you to get the transcripts/subtitles for a given YouTube video. It also works for automatically generated subtitles, supports translating subtitles and it does not require a headless browser, like other selenium based solutions do!", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>YouTube Transcript/Subtitle API (including automatically generated subtitles and subtitle translations)</h1>\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=BAENLEW8VUJ6G&amp;source=url\" rel=\"nofollow\"><img alt=\"Donate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c6b48d4ac9b582dbc400aa2bd53b809f2f2b394/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446f6e6174652d50617950616c2d677265656e2e737667\"></a> <a href=\"https://travis-ci.org/jdepoix/youtube-transcript-api\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/877f0ac57e054a5d6c8202f00bbc3ae428097849/68747470733a2f2f7472617669732d63692e6f72672f6a6465706f69782f796f75747562652d7472616e7363726970742d6170692e737667\"></a> <a href=\"https://coveralls.io/github/jdepoix/youtube-transcript-api?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7bf0a1d15416697f0d95df8d6d5c1aee2afb421/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6465706f69782f796f75747562652d7472616e7363726970742d6170692f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5bce10e8e48e6c0a122e9f07c0b94cad805796fb/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174\"></a> <a href=\"https://pypi.org/project/youtube-transcript-api/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7af95451a576f7e85a13cf0abef769b89b1eef7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f796f75747562652d7472616e7363726970742d6170692e737667\"></a> <a href=\"https://pypi.org/project/youtube-transcript-api/\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23dd0e8810d6afa579aa9bbff1759ab79c6ef75c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f796f75747562652d7472616e7363726970742d6170692e737667\"></a></p>\n<p>This is an python API which allows you to get the transcripts/subtitles for a given YouTube video. It also works for automatically generated subtitles, supports translating subtitles and it does not require a headless browser, like other selenium based solutions do!</p>\n<h2>Install</h2>\n<p>It is recommended to <a href=\"https://pypi.org/project/youtube-transcript-api/\" rel=\"nofollow\">install this module by using pip</a>:</p>\n<pre><code>pip install youtube_transcript_api\n</code></pre>\n<p>If you want to use it from source, you'll have to install the dependencies manually:</p>\n<pre><code>pip install -r requirements.txt\n</code></pre>\n<p>You can either integrate this module <a href=\"#api\" rel=\"nofollow\">into an existing application</a>, or just use it via an <a href=\"#cli\" rel=\"nofollow\">CLI</a>.</p>\n<h2>API</h2>\n<p>The easiest way to get a transcript for a given video is to execute:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">youtube_transcript_api</span> <span class=\"kn\">import</span> <span class=\"n\">YouTubeTranscriptApi</span>\n\n<span class=\"n\">YouTubeTranscriptApi</span><span class=\"o\">.</span><span class=\"n\">get_transcript</span><span class=\"p\">(</span><span class=\"n\">video_id</span><span class=\"p\">)</span>\n</pre>\n<p>This will return a list of dictionaries looking somewhat like this:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'Hey there'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'start'</span><span class=\"p\">:</span> <span class=\"mf\">7.58</span><span class=\"p\">,</span>\n        <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mf\">6.13</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'text'</span><span class=\"p\">:</span> <span class=\"s1\">'how are you'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'start'</span><span class=\"p\">:</span> <span class=\"mf\">14.08</span><span class=\"p\">,</span>\n        <span class=\"s1\">'duration'</span><span class=\"p\">:</span> <span class=\"mf\">7.58</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>You can also add the <code>languages</code> param if you want to make sure the transcripts are retrieved in your desired language (it defaults to english).</p>\n<pre><span class=\"n\">YouTubeTranscriptApi</span><span class=\"o\">.</span><span class=\"n\">get_transcripts</span><span class=\"p\">(</span><span class=\"n\">video_ids</span><span class=\"p\">,</span> <span class=\"n\">languages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>\n</pre>\n<p>It's a list of language codes in a descending priority. In this example it will first try to fetch the german transcript (<code>'de'</code>) and then fetch the english transcript (<code>'en'</code>) if it fails to do so. If you want to find out which languages are available first, <a href=\"#list-available-transcripts\" rel=\"nofollow\">have a look at <code>list_transcripts()</code></a></p>\n<p>To get transcripts for a list of video ids you can call:</p>\n<pre><span class=\"n\">YouTubeTranscriptApi</span><span class=\"o\">.</span><span class=\"n\">get_transcripts</span><span class=\"p\">(</span><span class=\"n\">video_ids</span><span class=\"p\">,</span> <span class=\"n\">languages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>\n</pre>\n<p><code>languages</code> also is optional here.</p>\n<h3>List available transcripts</h3>\n<p>If you want to list all transcripts which are available for a given video you can call:</p>\n<pre><span class=\"n\">transcript_list</span> <span class=\"o\">=</span> <span class=\"n\">YouTubeTranscriptApi</span><span class=\"o\">.</span><span class=\"n\">list_transcripts</span><span class=\"p\">(</span><span class=\"n\">video_id</span><span class=\"p\">,</span> <span class=\"n\">languages</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>\n</pre>\n<p>This will return a <code>TranscriptList</code> object  which is iterable and provides methods to filter the list of transcripts for specific languages and types, like:</p>\n<pre><span class=\"n\">transcript</span> <span class=\"o\">=</span> <span class=\"n\">transcript_list</span><span class=\"o\">.</span><span class=\"n\">find_transcript</span><span class=\"p\">([</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>\n</pre>\n<p>By default this module always picks manually created transcripts over automatically created ones, if a transcript in the requested language is available both manually created and generated. The <code>TranscriptList</code> allows you to bypass this default behaviour by searching for specific transcript types:</p>\n<pre><span class=\"c1\"># filter for manually created transcripts</span>\n<span class=\"n\">transcript</span> <span class=\"o\">=</span> <span class=\"n\">transcript_list</span><span class=\"o\">.</span><span class=\"n\">find_manually_created_transcript</span><span class=\"p\">([</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># or automatically generated ones</span>\n<span class=\"n\">transcript</span> <span class=\"o\">=</span> <span class=\"n\">transcript_list</span><span class=\"o\">.</span><span class=\"n\">find_generated_transcript</span><span class=\"p\">([</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>\n</pre>\n<p>The methods <code>find_generated_transcript</code>, <code>find_manually_created_transcript</code>, <code>find_generated_transcript</code> return <code>Transcript</code> objects. They contain metadata regarding the transcript:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span>\n    <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">video_id</span><span class=\"p\">,</span>\n    <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">,</span>\n    <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">language_code</span><span class=\"p\">,</span>\n    <span class=\"c1\"># whether it has been manually created or generated by YouTube</span>\n    <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">is_generated</span><span class=\"p\">,</span>\n    <span class=\"c1\"># whether this transcript can be translated or not</span>\n    <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">is_translatable</span><span class=\"p\">,</span>\n    <span class=\"c1\"># a list of languages the transcript can be translated to</span>\n    <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">translation_languages</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>and provide the method, which allows you to fetch the actual transcript data:</p>\n<pre><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">()</span>\n</pre>\n<h3>Translate transcript</h3>\n<p>YouTube has a feature which allows you to automatically translate subtitles. This module also makes it possible to access this feature. To do so <code>Transcript</code> objects provide a <code>translate()</code> method, which returns a new translated <code>Transcript</code> object:</p>\n<pre><span class=\"n\">transcript</span> <span class=\"o\">=</span> <span class=\"n\">transcript_list</span><span class=\"o\">.</span><span class=\"n\">find_transcript</span><span class=\"p\">([</span><span class=\"s1\">'en'</span><span class=\"p\">])</span>\n<span class=\"n\">translated_transcript</span> <span class=\"o\">=</span> <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"s1\">'de'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">translated_transcript</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">())</span>\n</pre>\n<h3>By example</h3>\n<pre><span class=\"c1\"># retrieve the available transcripts</span>\n<span class=\"n\">transcript_list</span> <span class=\"o\">=</span> <span class=\"n\">YouTubeTranscriptApi</span><span class=\"o\">.</span><span class=\"n\">list_transcripts</span><span class=\"p\">(</span><span class=\"s1\">'video_id'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># iterate over all available transcripts</span>\n<span class=\"k\">for</span> <span class=\"n\">transcript</span> <span class=\"ow\">in</span> <span class=\"n\">transcript_list</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># the Transcript object provides metadata properties</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">video_id</span><span class=\"p\">,</span>\n        <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"p\">,</span>\n        <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">language_code</span><span class=\"p\">,</span>\n        <span class=\"c1\"># whether it has been manually created or generated by YouTube</span>\n        <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">is_generated</span><span class=\"p\">,</span>\n        <span class=\"c1\"># whether this transcript can be translated or not</span>\n        <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">is_translatable</span><span class=\"p\">,</span>\n        <span class=\"c1\"># a list of languages the transcript can be translated to</span>\n        <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">translation_languages</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># fetch the actual transcript data</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">())</span>\n\n    <span class=\"c1\"># translating the transcript will return another transcript object</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"s1\">'en'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># you can also directly filter for the language you are looking for, using the transcript list</span>\n<span class=\"n\">transcript</span> <span class=\"o\">=</span> <span class=\"n\">transcript_list</span><span class=\"o\">.</span><span class=\"n\">find_transcript</span><span class=\"p\">([</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>  \n\n<span class=\"c1\"># or just filter for manually created transcripts  </span>\n<span class=\"n\">transcript</span> <span class=\"o\">=</span> <span class=\"n\">transcript_list</span><span class=\"o\">.</span><span class=\"n\">find_manually_created_transcript</span><span class=\"p\">([</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>  \n\n<span class=\"c1\"># or automatically generated ones  </span>\n<span class=\"n\">transcript</span> <span class=\"o\">=</span> <span class=\"n\">transcript_list</span><span class=\"o\">.</span><span class=\"n\">find_generated_transcript</span><span class=\"p\">([</span><span class=\"s1\">'de'</span><span class=\"p\">,</span> <span class=\"s1\">'en'</span><span class=\"p\">])</span>\n</pre>\n<h2>CLI</h2>\n<p>Execute the CLI script using the video ids as parameters and the results will be printed out to the command line:</p>\n<pre><code>youtube_transcript_api &lt;first_video_id&gt; &lt;second_video_id&gt; ...  \n</code></pre>\n<p>The CLI also gives you the option to provide a list of preferred languages:</p>\n<pre><code>youtube_transcript_api &lt;first_video_id&gt; &lt;second_video_id&gt; ... --languages de en  \n</code></pre>\n<p>You can also specify if you want to exclude automatically generated or manually created subtitles:</p>\n<pre><code>youtube_transcript_api &lt;first_video_id&gt; &lt;second_video_id&gt; ... --languages de en --exclude-generated\nyoutube_transcript_api &lt;first_video_id&gt; &lt;second_video_id&gt; ... --languages de en --exclude-manually-created\n</code></pre>\n<p>If you would prefer to write it into a file or pipe it into another application, you can also output the results as json using the following line:</p>\n<pre><code>youtube_transcript_api &lt;first_video_id&gt; &lt;second_video_id&gt; ... --languages de en --json &gt; transcripts.json  \n</code></pre>\n<p>Translating transcripts using the CLI is also possible:</p>\n<pre><code>youtube_transcript_api &lt;first_video_id&gt; &lt;second_video_id&gt; ... --languages en --translate de\n</code></pre>\n<p>If you are not sure which languages are available for a given video you can call, to list all available transcripts:</p>\n<pre><code>youtube_transcript_api --list-transcripts &lt;first_video_id&gt;\n</code></pre>\n<h2>Proxy</h2>\n<p>You can specify a https/http proxy, which will be used during the requests to YouTube:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">youtube_transcript_api</span> <span class=\"kn\">import</span> <span class=\"n\">YouTubeTranscriptApi</span>  \n\n<span class=\"n\">YouTubeTranscriptApi</span><span class=\"o\">.</span><span class=\"n\">get_transcript</span><span class=\"p\">(</span><span class=\"n\">video_id</span><span class=\"p\">,</span> <span class=\"n\">proxies</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"http\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://user:pass@domain:port\"</span><span class=\"p\">,</span> <span class=\"s2\">\"https\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://user:pass@domain:port\"</span><span class=\"p\">})</span>  \n</pre>\n<p>As the <code>proxies</code> dict is passed on to the <code>requests.get(...)</code> call, it follows the <a href=\"http://docs.python-requests.org/en/master/user/advanced/#proxies\" rel=\"nofollow\">format used by the requests library</a>.</p>\n<p>Using the CLI:</p>\n<pre><code>youtube_transcript_api &lt;first_video_id&gt; &lt;second_video_id&gt; --http-proxy http://user:pass@domain:port --https-proxy https://user:pass@domain:port  \n</code></pre>\n<h2>Cookies</h2>\n<p>Some videos are age restricted, so this module won't be able to access those videos without some sort of authentication. To do this, you will need to have access to the desired video in a browser. Then, you will need to download that pages cookies into a text file. You can use the Chrome extension <a href=\"https://chrome.google.com/webstore/detail/cookiestxt/njabckikapfpffapmjgojcnbfjonfjfg?hl=en\" rel=\"nofollow\">cookies.txt</a> or the Firefox extension <a href=\"https://addons.mozilla.org/en-US/firefox/addon/cookies-txt/\" rel=\"nofollow\">cookies.txt</a>.</p>\n<p>Once you have that, you can use it with the module to access age-restricted videos' captions like so.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">youtube_transcript_api</span> <span class=\"kn\">import</span> <span class=\"n\">YouTubeTranscriptApi</span>  \n\n<span class=\"n\">YouTubeTranscriptApi</span><span class=\"o\">.</span><span class=\"n\">get_transcript</span><span class=\"p\">(</span><span class=\"n\">video_id</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/your/cookies.txt'</span><span class=\"p\">)</span>\n\n<span class=\"n\">YouTubeTranscriptApi</span><span class=\"o\">.</span><span class=\"n\">get_transcripts</span><span class=\"p\">([</span><span class=\"n\">video_id</span><span class=\"p\">],</span> <span class=\"n\">cookies</span><span class=\"o\">=</span><span class=\"s1\">'/path/to/your/cookies.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>Using the CLI:</p>\n<pre><code>youtube_transcript_api &lt;first_video_id&gt; &lt;second_video_id&gt; --cookies /path/to/your/cookies.txt\n</code></pre>\n<h2>Warning</h2>\n<p>This code uses an undocumented part of the YouTube API, which is called by the YouTube web-client. So there is no guarantee that it won't stop working tomorrow, if they change how things work. I will however do my best to make things working again as soon as possible if that happens. So if it stops working, let me know!</p>\n<h2>Donation</h2>\n<p>If this project makes you happy by reducing your development time, you can make me happy by treating me to a cup of coffee :)</p>\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=BAENLEW8VUJ6G&amp;source=url\" rel=\"nofollow\"><img alt=\"Donate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac49730821d272ac3a4d4e7608ed886a10858e1b/68747470733a2f2f7777772e70617970616c6f626a656374732e636f6d2f656e5f55532f692f62746e2f62746e5f646f6e61746543435f4c472e676966\"></a></p>\n\n          </div>"}, "last_serial": 6640209, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "515eafdcef37cfabe3e636f14cccdd39", "sha256": "0f5acedc694ad4c94bbe7d055492d7e858540dddaa9f788bfba010b32d053dbf"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "515eafdcef37cfabe3e636f14cccdd39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5064, "upload_time": "2018-07-03T11:41:00", "upload_time_iso_8601": "2018-07-03T11:41:00.149755Z", "url": "https://files.pythonhosted.org/packages/2b/42/ecdf0410862dca1e725cd0dda2e561be072c96cf33775c07d239ea37d151/youtube_transcript_api-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9fc6c617095a2789dcab7c4ec4437440", "sha256": "44b43c384b10582d5def4572c330e5e31bc5f968cd3611f2840a7565a9cf4a44"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9fc6c617095a2789dcab7c4ec4437440", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3932, "upload_time": "2018-07-03T11:41:01", "upload_time_iso_8601": "2018-07-03T11:41:01.357527Z", "url": "https://files.pythonhosted.org/packages/0a/4e/cd109c9a9b4d58db207bb48f47e397c44e2cc192df99bfef83b776496993/youtube_transcript_api-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f52ed208730ee747905ea033d48f425d", "sha256": "bd13f879ebd4b5342b30d433cb53279d3d59d99671dac4ec4e433bb74a44d64a"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f52ed208730ee747905ea033d48f425d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5081, "upload_time": "2018-07-15T08:58:35", "upload_time_iso_8601": "2018-07-15T08:58:35.040289Z", "url": "https://files.pythonhosted.org/packages/9a/41/4c9d45a2d3acde0938d515ee57af33e30656739601e72759623098e5eff3/youtube_transcript_api-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67465b09a7b66cca11ccce185e70118c", "sha256": "6d484fd21b06d44603a0a7d8e5ad5c7d24f8438b21cfc960dd64d7d2d0a58399"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "67465b09a7b66cca11ccce185e70118c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3961, "upload_time": "2018-07-15T08:58:36", "upload_time_iso_8601": "2018-07-15T08:58:36.334784Z", "url": "https://files.pythonhosted.org/packages/27/92/17ce1a35de1f3cf91e206869300c63f32a8c9042c468c7b70f456acbb8af/youtube_transcript_api-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "839c113ce8bde15bcc8557980212b944", "sha256": "0916bed0947a2e7880b55e15ca54d6f5e6d5154bfcbfa64bcec48b0f3a86cd2b"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "839c113ce8bde15bcc8557980212b944", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5787, "upload_time": "2019-02-21T12:00:24", "upload_time_iso_8601": "2019-02-21T12:00:24.312361Z", "url": "https://files.pythonhosted.org/packages/ae/4c/25cd6051207f7ccf0bd5b1808d143f3ddc96d0fce768540e1dbdd0b39f12/youtube_transcript_api-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27ecbb55cd046257d4b752f6be698192", "sha256": "3a0eb04f8492decab3f16d1b507537cfc1add5db2c537174baae78c54a5673ff"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.2.tar.gz", "has_sig": false, "md5_digest": "27ecbb55cd046257d4b752f6be698192", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4486, "upload_time": "2019-02-21T12:00:25", "upload_time_iso_8601": "2019-02-21T12:00:25.770789Z", "url": "https://files.pythonhosted.org/packages/d7/1f/80a75f10f09b05c95864d4aac1b378871be2b78c84b7f876ec3c33a87296/youtube_transcript_api-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "e6fcb1174d9a1e881188786ed3235d33", "sha256": "3a7245694847e364cdd62d5681a5ef835021ddb0615c8813d7352020bb52948c"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e6fcb1174d9a1e881188786ed3235d33", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6380, "upload_time": "2019-03-11T13:59:03", "upload_time_iso_8601": "2019-03-11T13:59:03.538889Z", "url": "https://files.pythonhosted.org/packages/3c/ce/69c5500169953041aaf2bbde0fd9affbf7c9f9ae195d51827332e69b83ce/youtube_transcript_api-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce247fe7b13dba30dc66ff9d8e273dd5", "sha256": "30c8132d41d7df45cfee4d0acdc6b3a4ae564f4cc764af6862ad279f2fe4fbba"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ce247fe7b13dba30dc66ff9d8e273dd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4781, "upload_time": "2019-03-11T13:59:04", "upload_time_iso_8601": "2019-03-11T13:59:04.950019Z", "url": "https://files.pythonhosted.org/packages/53/e9/8ddfb626cbbd7686525553fa10d0b894c92f4a8c1a11fcad23b837ed95cb/youtube_transcript_api-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "fa6934a81f31630e15748e2ef3cc47f7", "sha256": "6514d6c8f964fec766b3ea9986cd7c3bf707d7c0885c7fcf69b26d0c3ffe1696"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "fa6934a81f31630e15748e2ef3cc47f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9747, "upload_time": "2019-03-27T10:08:42", "upload_time_iso_8601": "2019-03-27T10:08:42.048232Z", "url": "https://files.pythonhosted.org/packages/02/75/4056d5df84c04f5e1a86f8d9e74720f30d9e9e6f47d652328a29081bddac/youtube_transcript_api-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad08b376da163be60f855d23f7e02b76", "sha256": "ef47ada6bc8a4e8ef8c13c6023d10e5c23baf1460e3aae52e13442e33fee0f50"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.4.tar.gz", "has_sig": false, "md5_digest": "ad08b376da163be60f855d23f7e02b76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8109, "upload_time": "2019-03-27T10:08:43", "upload_time_iso_8601": "2019-03-27T10:08:43.430781Z", "url": "https://files.pythonhosted.org/packages/c3/72/7fa9aae0e8f5d861e451287fd591fedb5c642c9fa2c81991ba9d0f402162/youtube_transcript_api-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "2c2a33eb93ddf64a25283f5a01090865", "sha256": "0ae88fb7e70248e8a63499d217f3bef1b0b3677989990cccac98c6469aede32b"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "2c2a33eb93ddf64a25283f5a01090865", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10272, "upload_time": "2019-06-20T15:23:19", "upload_time_iso_8601": "2019-06-20T15:23:19.666368Z", "url": "https://files.pythonhosted.org/packages/b3/d4/4ac8050327954de6f15ea33865b6c0872df88ff03394a28cdaa23771944a/youtube_transcript_api-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a01b20f81a30914f6fa47ee1fa5db3ab", "sha256": "8d9f6d7d3edddccf0b2ccd786fd2c904858c87fef5eb69269acfdf8d6da938c4"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.5.tar.gz", "has_sig": false, "md5_digest": "a01b20f81a30914f6fa47ee1fa5db3ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8941, "upload_time": "2019-06-20T15:23:21", "upload_time_iso_8601": "2019-06-20T15:23:21.381603Z", "url": "https://files.pythonhosted.org/packages/ef/75/f9ab97a511494e61d0f16dfaa5a4c8dea1bde2caef694b2c8918a849d0c4/youtube_transcript_api-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "3093f3f77184a7170047c62985d8b80f", "sha256": "a71d13f4674050f6ad3370906073e0fb81c6080f76eb00fa2f05cf31c7632db5"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "3093f3f77184a7170047c62985d8b80f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10281, "upload_time": "2019-07-15T14:00:12", "upload_time_iso_8601": "2019-07-15T14:00:12.202405Z", "url": "https://files.pythonhosted.org/packages/d4/1f/3a228710425cc2342e76311aab32d1e4b4fbd50ef1dafdaecee6645f0974/youtube_transcript_api-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a62b30ac8a5d475350b33555af6b77b6", "sha256": "385863852fd171b14f72427a0d3c6470066996848b46ea67f14169d8a652ae48"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.6.tar.gz", "has_sig": false, "md5_digest": "a62b30ac8a5d475350b33555af6b77b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8925, "upload_time": "2019-07-15T14:00:13", "upload_time_iso_8601": "2019-07-15T14:00:13.870514Z", "url": "https://files.pythonhosted.org/packages/55/18/bc05f070069d1abe3a396d3c3810aa46c5d303a60a545d7b330194ff04a8/youtube_transcript_api-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "1f4b26de90f76205fe6c2a6cdacf7f39", "sha256": "cd58efee5ff38912dcc15def81522c4519976b7786af7af11268d733fa5e9b45"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1f4b26de90f76205fe6c2a6cdacf7f39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10292, "upload_time": "2019-07-22T11:18:49", "upload_time_iso_8601": "2019-07-22T11:18:49.074441Z", "url": "https://files.pythonhosted.org/packages/df/a7/b4d4afec227187952f7d4b25559792ac229089ebd5ab03ba09ae979f4afd/youtube_transcript_api-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4f4410ff1dde1676f9f00116cbf36f4", "sha256": "40ed329a8c93a68a9dd8892a53878d8507bc355de75678408f3b441aebee0253"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.7.tar.gz", "has_sig": false, "md5_digest": "d4f4410ff1dde1676f9f00116cbf36f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9097, "upload_time": "2019-07-22T11:18:50", "upload_time_iso_8601": "2019-07-22T11:18:50.766195Z", "url": "https://files.pythonhosted.org/packages/54/02/dc6e4311ca5aa81168095b3caf68a22d75bc0b9aac4d207ce7a5127c2b95/youtube_transcript_api-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "1b6fb95d7c4cbc0f727e9608f48fbd0a", "sha256": "99403714af418a1fcf65c8db7e2794ce41bd206f51f6adab908d479a4758f38c"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "1b6fb95d7c4cbc0f727e9608f48fbd0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11208, "upload_time": "2019-10-07T17:02:09", "upload_time_iso_8601": "2019-10-07T17:02:09.449011Z", "url": "https://files.pythonhosted.org/packages/91/d6/00f8854a46bfcf2e55331531c815e746e96226952960af26202f16d22d21/youtube_transcript_api-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df3df93a6d08180b9214de2308da8f0e", "sha256": "fd19f390b0c9704063c9246263d1a19262ac171d95e3abf43a877b67f68c86d1"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.8.tar.gz", "has_sig": false, "md5_digest": "df3df93a6d08180b9214de2308da8f0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9167, "upload_time": "2019-10-07T17:02:11", "upload_time_iso_8601": "2019-10-07T17:02:11.182780Z", "url": "https://files.pythonhosted.org/packages/6f/90/2bb143394ad300b966a264c9cd1f0269835cd530a0b526648297acb6eb39/youtube_transcript_api-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "4cf640a54c8b624f31c65c3879c62fa3", "sha256": "ebb828d7f08c146c5977b40cd9dd3763c8117b8acc58cb937d67c16f94ea6f29"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "4cf640a54c8b624f31c65c3879c62fa3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11285, "upload_time": "2019-10-09T11:31:03", "upload_time_iso_8601": "2019-10-09T11:31:03.373146Z", "url": "https://files.pythonhosted.org/packages/b7/f8/0c6d080ec15a90f511b4519598a7728e741b231b447e80603c3b5b008344/youtube_transcript_api-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5b8458cb825c4123f55854039b08888", "sha256": "995f9ce91fcdf996cb6f02d82bc7c8afcb059f754e8fbe59c288e813c7e0c111"}, "downloads": -1, "filename": "youtube_transcript_api-0.1.9.tar.gz", "has_sig": false, "md5_digest": "f5b8458cb825c4123f55854039b08888", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9225, "upload_time": "2019-10-09T11:31:05", "upload_time_iso_8601": "2019-10-09T11:31:05.461059Z", "url": "https://files.pythonhosted.org/packages/30/52/7f50ec2a014a66bc5ab7c5f459e6291e83a3bcfa50326791f0858f39cd58/youtube_transcript_api-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f02982697be1e80c842c6cc6abfffff9", "sha256": "52f197f8ecc75870403b0f1bf664e58ebca5ac8d507911e1fccba7201105b0fd"}, "downloads": -1, "filename": "youtube_transcript_api-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f02982697be1e80c842c6cc6abfffff9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17033, "upload_time": "2019-12-30T22:55:05", "upload_time_iso_8601": "2019-12-30T22:55:05.230807Z", "url": "https://files.pythonhosted.org/packages/07/b2/c8b20695ace06753f5a768fe915b55c5ebd59debb2d14e78e3518876f7b0/youtube_transcript_api-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "477cae2f54f8df839ad803ced5cf10fa", "sha256": "a1951cf2fb161f7f970a718246a953053d59d3cafa3cd4191bd33c2cee78bc86"}, "downloads": -1, "filename": "youtube_transcript_api-0.2.0.tar.gz", "has_sig": false, "md5_digest": "477cae2f54f8df839ad803ced5cf10fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14853, "upload_time": "2019-12-30T22:55:07", "upload_time_iso_8601": "2019-12-30T22:55:07.851526Z", "url": "https://files.pythonhosted.org/packages/1b/65/991618abc7e23ec795f62b729f4601a335aab91a9fc99f136de973a82e5d/youtube_transcript_api-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "7bafe2d685041b63d5ce7f3eecfe641b", "sha256": "150129071e962f65a12cc150ac2b6853da2b1b7e1958c7ccd8d5d9624d090e41"}, "downloads": -1, "filename": "youtube_transcript_api-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7bafe2d685041b63d5ce7f3eecfe641b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17037, "upload_time": "2019-12-30T23:14:18", "upload_time_iso_8601": "2019-12-30T23:14:18.131978Z", "url": "https://files.pythonhosted.org/packages/18/4d/c7fd765fea34959fb7ed2fb64ff4868f7433a48f5ee8e9ca6badad71a2e8/youtube_transcript_api-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84a4bb239b292d26ac847ddfb2b6fa77", "sha256": "e30caf71aa1a725daf06a43c85a2f04089fe98d07922183fab1efdbc37cbf02d"}, "downloads": -1, "filename": "youtube_transcript_api-0.2.1.tar.gz", "has_sig": false, "md5_digest": "84a4bb239b292d26ac847ddfb2b6fa77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14819, "upload_time": "2019-12-30T23:14:19", "upload_time_iso_8601": "2019-12-30T23:14:19.718270Z", "url": "https://files.pythonhosted.org/packages/27/c1/c3bdff4b1ef82482f8beaa3c4993d5accecc2ed67d0323701597e667adcc/youtube_transcript_api-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "70ae8f61b72d8c64f619bbd9ffb65317", "sha256": "9c5487b72f56bd3ddb44ef7a06c493e9d25ba71a9e965c2bfa5a5713cc04b000"}, "downloads": -1, "filename": "youtube_transcript_api-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "70ae8f61b72d8c64f619bbd9ffb65317", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18110, "upload_time": "2020-01-31T10:39:06", "upload_time_iso_8601": "2020-01-31T10:39:06.364421Z", "url": "https://files.pythonhosted.org/packages/7f/e8/db786906e34a6b7bc8b71256e7c844fb121a7f5faa26f4447c19d4ffb25d/youtube_transcript_api-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a0426f7f3d4d007f026aaab93780f0b", "sha256": "727c1503467cd9955ba04f1475856ee41459c669ff422788d6a6c629ea3c8929"}, "downloads": -1, "filename": "youtube_transcript_api-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5a0426f7f3d4d007f026aaab93780f0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16464, "upload_time": "2020-01-31T10:39:07", "upload_time_iso_8601": "2020-01-31T10:39:07.839979Z", "url": "https://files.pythonhosted.org/packages/42/c6/50be783a0fbe2285c28c967748e1de10c6033911b5ab681beadee6b6f66a/youtube_transcript_api-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "58a46b7c99d40cb00ae1cd8c2a3ddb8d", "sha256": "8f3eb0169c2be836e5fcfaeadbb9897b418befbd8bdd065bd95f582c419817cb"}, "downloads": -1, "filename": "youtube_transcript_api-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "58a46b7c99d40cb00ae1cd8c2a3ddb8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18110, "upload_time": "2020-02-16T13:23:26", "upload_time_iso_8601": "2020-02-16T13:23:26.538010Z", "url": "https://files.pythonhosted.org/packages/21/81/c4ae5534b113f4938b482f360babbbe6fda550441a4af8e1007dba518586/youtube_transcript_api-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7aa2deed9ad313c20fd864c91107b167", "sha256": "aa6186172a34fe4a6cb090320bad391387b58e018d095fb4fbfcd295a43ed309"}, "downloads": -1, "filename": "youtube_transcript_api-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7aa2deed9ad313c20fd864c91107b167", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16486, "upload_time": "2020-02-16T13:23:28", "upload_time_iso_8601": "2020-02-16T13:23:28.032265Z", "url": "https://files.pythonhosted.org/packages/42/88/feae47fb32db8bf1be5bda139059db97c29b1bfc5d352a60ae6f4743c8c4/youtube_transcript_api-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58a46b7c99d40cb00ae1cd8c2a3ddb8d", "sha256": "8f3eb0169c2be836e5fcfaeadbb9897b418befbd8bdd065bd95f582c419817cb"}, "downloads": -1, "filename": "youtube_transcript_api-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "58a46b7c99d40cb00ae1cd8c2a3ddb8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18110, "upload_time": "2020-02-16T13:23:26", "upload_time_iso_8601": "2020-02-16T13:23:26.538010Z", "url": "https://files.pythonhosted.org/packages/21/81/c4ae5534b113f4938b482f360babbbe6fda550441a4af8e1007dba518586/youtube_transcript_api-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7aa2deed9ad313c20fd864c91107b167", "sha256": "aa6186172a34fe4a6cb090320bad391387b58e018d095fb4fbfcd295a43ed309"}, "downloads": -1, "filename": "youtube_transcript_api-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7aa2deed9ad313c20fd864c91107b167", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16486, "upload_time": "2020-02-16T13:23:28", "upload_time_iso_8601": "2020-02-16T13:23:28.032265Z", "url": "https://files.pythonhosted.org/packages/42/88/feae47fb32db8bf1be5bda139059db97c29b1bfc5d352a60ae6f4743c8c4/youtube_transcript_api-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:41 2020"}