{"info": {"author": "Bianca St\u00f6cker", "author_email": "bianca.stoecker@uni-due.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "README\n======\n\nSimLoRD - Simulate long Read Data\n---------------------------------\n\nSimLoRD is a read simulator for third generation sequencing reads and is\ncurrently focused on the Pacific Biosciences SMRT error model.\n\nReads are simulated from both strands of a provided or randomly\ngenerated reference sequence.\n\nFeatures\n~~~~~~~~\n\n-  The reference can be read from a FASTA file or randomly generated\n   with a given GC content. It can consist of several chromosomes, whose\n   structure is respected when drawing reads. (Simulation of genome\n   rearrangements may be incorporated at a later stage.)\n-  The read lengths can be determined in four ways: drawing from a\n   log-normal distribution (typical for genomic DNA), sampling from an\n   existing FASTQ file (typical for RNA), sampling from a a text file\n   with integers (RNA), or using a fixed length\n-  Quality values and number of passes depend on fragment length.\n-  Provided subread error probabilities are modified according to number\n   of passes\n-  Outputs reads in FASTQ format and alignments in SAM format\n\nSystem requirements\n~~~~~~~~~~~~~~~~~~~\n\n-  `python3 <https://www.python.org/>`__\n-  `scipy <http://www.scipy.org/>`__\n-  `numpy <http://www.numpy.org/>`__\n-  `pysam <http://pysam.readthedocs.org/en/latest/>`__\n-  `dinopy <https://bitbucket.org/HenningTimm/dinopy>`__\n\nWe recommend using\n`miniconda <http://conda.pydata.org/miniconda.html#miniconda>`__ and\ncreating an environment for SimLoRD\n\n::\n\n    # Create and activate a new environment called simlord\n    conda create -n simlord python=3 pip numpy scipy cython\n    source activate simlord\n\n    # Install packages that are not available with conda from pip\n    pip install pysam\n    pip install dinopy\n    pip install simlord\n\n    # You now have a 'simlord' script; try it:\n    simlord --help\n\n    # In case of a new version update as follows:\n    pip install simlord --upgrade \n\n    # To switch back to your normal environment, use\n    source deactivate\n\nPlatform support\n~~~~~~~~~~~~~~~~\n\nSimLoRD is a pure Python program. This means that it runs on any\noperating system (OS) for which Python 3 and the other packages are\navailable.\n\nExample usage\n~~~~~~~~~~~~~\n\n**Example 1:** Simulate 10000 reads for the reference ref.fasta, use the\ndefault options for simulation and store the reads in ``myreads.fastq``\nand the alignment in ``myreads.sam``.\n\n\n::\n\n    simlord  --read-reference ref.fasta -n 10000  myreads\n\n\n**Example 2:** Generate a reference with 10 mio bases GC content 0.6\n(i.e., probability 0.3 for both C and G; thus 0.2 probability for both A\nand T), store the reference as random.fasta, and simulate 10000 reads\nwith default options, store reads as ``myreads.fastq``, do not store\nalignments.\n\n::\n\n    simlord --generate-reference 0.6 10000000 --save-reference random.fasta\\\n            -n 10000 --no-sam  myreads\n\n\n**Example 3:** Simulate reads from the given ``reference.fasta``, using\na fixed read length of 5000 and custom subread error probabilities (12%\ninsertion, 12% deletion, 2% substitution). As before, save reads as\n``myreads.fastq`` and ``myreads.sam``.\n\n::\n\n    simlord --read-reference reference.fasta  -n 10000 -fl 5000\\\n            -pi 0.12 -pd 0.12 -ps 0.02  myreads\n\n\nA full list of parameters, as well as their documentation, can be found `here <https://bitbucket.org/genomeinformatics/simlord/wiki/Home>`__.\n\nLast Changes\n~~~~~~~~~~~~\n\n**Version 1.0.4 (2020-01-07)**\n\n*Bugs fixed*\n\n- Added missing else for parameter sam_output.\n\n\n*Other Changes*\n\n- Changed read names.\n- New read name format: 'm{read_number}/{read_length}/CCS read_information'\n- Added parameter --old-read-names for old read names where all information is encoded in one large string delimited by ';'.\n\n\n**Version 1.0.3 (2019-05-20)**\n\n*New Features*\n\n- Added new parameter --gzip to gzip the output reads fastq file.\n- If \"-\" instead of a filename is given, the reads are printed to sdt-out.\n- In this case without further specification the sam-file gets the name \"reads.sam\" in the current working directory.\n\n*Other Changes*\n\n- Changed coverage parameter from int to float allowing fractional coverage values.\n- Changed delimiter in read id from _ to ;\n- Added chromosome name to read id\n- Changed id of mate read in sam file to result in \"*\" instead of \"=\".\n- Changed fastq writing from text to byte writing to speed up I/O\n\n\n**Version 1.0.2 (2017-03-17)**\n\n*New Features*\n\n- Draw chromosomes for reads weighted with their length instead of equal distributed. This leads to a equal distributed read coverage over the chromosomes. Previous behaviour with equal probabilities for each chromosome can be activated with parameter --uniform-chromosome-probability.\n\n- Parameter --coverage: Determine number of reads depending on the desired read coverage of the whole reference genome.\n\n- Parameter --without-ns: Sample the reads only from regions completly without Ns.\n\nWarning: Using --without-ns may lead to biased read coverage depending on the size of contigs without Ns and the expected readlength.\n\n*Bugs fixed*\n\n- CIGAR string had sometimes wrong count of last match because of false extension after deletion.\n\n\n**Version 1.0.1 (2017-01-03)**\n\n*Bugs fixed*\n\n- Removed nargs=1 at parameter --probability-threshold leading to an error when changing the parameter.\n\n**Version 1.0.0 (2016-07-13)**\n\n*API Changes*\n\n- Changed SEQ in SAM file to reverse complemented read instead of the original read for reads mapping to the reverse complement of the reference.\n\nExample:\n::\n\n    reference       ATCG     read   CAAT\n    true alignment  ||X|\n                    ATTG\n\n    Before: SEQ CAAT and CIGAR string 2=1X1=\n    Now:    SEQ ATTG and CIGAR string 2=1X1=\n\n\nLicense\n~~~~~~~\n\nSimLoRD is Open Source and licensed under the `MIT\nLicense <http://opensource.org/licenses/MIT>`__.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/genomeinformatics/simlord/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "simlord", "package_url": "https://pypi.org/project/simlord/", "platform": "", "project_url": "https://pypi.org/project/simlord/", "project_urls": {"Homepage": "https://bitbucket.org/genomeinformatics/simlord/"}, "release_url": "https://pypi.org/project/simlord/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "SimLoRD is a read simulator for long reads from third generation sequencing and is currently focused on the Pacific Biosciences SMRT error model.", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>SimLoRD is a read simulator for third generation sequencing reads and is\ncurrently focused on the Pacific Biosciences SMRT error model.</p>\n<p>Reads are simulated from both strands of a provided or randomly\ngenerated reference sequence.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>The reference can be read from a FASTA file or randomly generated\nwith a given GC content. It can consist of several chromosomes, whose\nstructure is respected when drawing reads. (Simulation of genome\nrearrangements may be incorporated at a later stage.)</li>\n<li>The read lengths can be determined in four ways: drawing from a\nlog-normal distribution (typical for genomic DNA), sampling from an\nexisting FASTQ file (typical for RNA), sampling from a a text file\nwith integers (RNA), or using a fixed length</li>\n<li>Quality values and number of passes depend on fragment length.</li>\n<li>Provided subread error probabilities are modified according to number\nof passes</li>\n<li>Outputs reads in FASTQ format and alignments in SAM format</li>\n</ul>\n</div>\n<div id=\"system-requirements\">\n<h2>System requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">python3</a></li>\n<li><a href=\"http://www.scipy.org/\" rel=\"nofollow\">scipy</a></li>\n<li><a href=\"http://www.numpy.org/\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"http://pysam.readthedocs.org/en/latest/\" rel=\"nofollow\">pysam</a></li>\n<li><a href=\"https://bitbucket.org/HenningTimm/dinopy\" rel=\"nofollow\">dinopy</a></li>\n</ul>\n<p>We recommend using\n<a href=\"http://conda.pydata.org/miniconda.html#miniconda\" rel=\"nofollow\">miniconda</a> and\ncreating an environment for SimLoRD</p>\n<pre># Create and activate a new environment called simlord\nconda create -n simlord python=3 pip numpy scipy cython\nsource activate simlord\n\n# Install packages that are not available with conda from pip\npip install pysam\npip install dinopy\npip install simlord\n\n# You now have a 'simlord' script; try it:\nsimlord --help\n\n# In case of a new version update as follows:\npip install simlord --upgrade\n\n# To switch back to your normal environment, use\nsource deactivate\n</pre>\n</div>\n<div id=\"platform-support\">\n<h2>Platform support</h2>\n<p>SimLoRD is a pure Python program. This means that it runs on any\noperating system (OS) for which Python 3 and the other packages are\navailable.</p>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p><strong>Example 1:</strong> Simulate 10000 reads for the reference ref.fasta, use the\ndefault options for simulation and store the reads in <tt>myreads.fastq</tt>\nand the alignment in <tt>myreads.sam</tt>.</p>\n<pre>simlord  --read-reference ref.fasta -n 10000  myreads\n</pre>\n<p><strong>Example 2:</strong> Generate a reference with 10 mio bases GC content 0.6\n(i.e., probability 0.3 for both C and G; thus 0.2 probability for both A\nand T), store the reference as random.fasta, and simulate 10000 reads\nwith default options, store reads as <tt>myreads.fastq</tt>, do not store\nalignments.</p>\n<pre>simlord --generate-reference 0.6 10000000 --save-reference random.fasta\\\n        -n 10000 --no-sam  myreads\n</pre>\n<p><strong>Example 3:</strong> Simulate reads from the given <tt>reference.fasta</tt>, using\na fixed read length of 5000 and custom subread error probabilities (12%\ninsertion, 12% deletion, 2% substitution). As before, save reads as\n<tt>myreads.fastq</tt> and <tt>myreads.sam</tt>.</p>\n<pre>simlord --read-reference reference.fasta  -n 10000 -fl 5000\\\n        -pi 0.12 -pd 0.12 -ps 0.02  myreads\n</pre>\n<p>A full list of parameters, as well as their documentation, can be found <a href=\"https://bitbucket.org/genomeinformatics/simlord/wiki/Home\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"last-changes\">\n<h2>Last Changes</h2>\n<p><strong>Version 1.0.4 (2020-01-07)</strong></p>\n<p><em>Bugs fixed</em></p>\n<ul>\n<li>Added missing else for parameter sam_output.</li>\n</ul>\n<p><em>Other Changes</em></p>\n<ul>\n<li>Changed read names.</li>\n<li>New read name format: \u2018m{read_number}/{read_length}/CCS read_information\u2019</li>\n<li>Added parameter \u2013old-read-names for old read names where all information is encoded in one large string delimited by \u2018;\u2019.</li>\n</ul>\n<p><strong>Version 1.0.3 (2019-05-20)</strong></p>\n<p><em>New Features</em></p>\n<ul>\n<li>Added new parameter \u2013gzip to gzip the output reads fastq file.</li>\n<li>If \u201c-\u201d instead of a filename is given, the reads are printed to sdt-out.</li>\n<li>In this case without further specification the sam-file gets the name \u201creads.sam\u201d in the current working directory.</li>\n</ul>\n<p><em>Other Changes</em></p>\n<ul>\n<li>Changed coverage parameter from int to float allowing fractional coverage values.</li>\n<li>Changed delimiter in read id from _ to ;</li>\n<li>Added chromosome name to read id</li>\n<li>Changed id of mate read in sam file to result in \u201c*\u201d instead of \u201c=\u201d.</li>\n<li>Changed fastq writing from text to byte writing to speed up I/O</li>\n</ul>\n<p><strong>Version 1.0.2 (2017-03-17)</strong></p>\n<p><em>New Features</em></p>\n<ul>\n<li>Draw chromosomes for reads weighted with their length instead of equal distributed. This leads to a equal distributed read coverage over the chromosomes. Previous behaviour with equal probabilities for each chromosome can be activated with parameter \u2013uniform-chromosome-probability.</li>\n<li>Parameter \u2013coverage: Determine number of reads depending on the desired read coverage of the whole reference genome.</li>\n<li>Parameter \u2013without-ns: Sample the reads only from regions completly without Ns.</li>\n</ul>\n<p>Warning: Using \u2013without-ns may lead to biased read coverage depending on the size of contigs without Ns and the expected readlength.</p>\n<p><em>Bugs fixed</em></p>\n<ul>\n<li>CIGAR string had sometimes wrong count of last match because of false extension after deletion.</li>\n</ul>\n<p><strong>Version 1.0.1 (2017-01-03)</strong></p>\n<p><em>Bugs fixed</em></p>\n<ul>\n<li>Removed nargs=1 at parameter \u2013probability-threshold leading to an error when changing the parameter.</li>\n</ul>\n<p><strong>Version 1.0.0 (2016-07-13)</strong></p>\n<p><em>API Changes</em></p>\n<ul>\n<li>Changed SEQ in SAM file to reverse complemented read instead of the original read for reads mapping to the reverse complement of the reference.</li>\n</ul>\n<p>Example:</p>\n<pre>reference       ATCG     read   CAAT\ntrue alignment  ||X|\n                ATTG\n\nBefore: SEQ CAAT and CIGAR string 2=1X1=\nNow:    SEQ ATTG and CIGAR string 2=1X1=\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>SimLoRD is Open Source and licensed under the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT\nLicense</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6408609, "releases": {"0.7.1": [{"comment_text": "", "digests": {"md5": "2ceda0269c5b7da5a3ea17d2b959f59c", "sha256": "e0078ff521567ae71c99057d5fff76d963d63aebcc0f6b03b8fe3f2875004126"}, "downloads": -1, "filename": "simlord-0.7.1.zip", "has_sig": false, "md5_digest": "2ceda0269c5b7da5a3ea17d2b959f59c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16741, "upload_time": "2016-01-05T13:24:10", "upload_time_iso_8601": "2016-01-05T13:24:10.710015Z", "url": "https://files.pythonhosted.org/packages/bf/c2/f2787384c6da961b2fec410578b8c9b1ccc49f8f3dd555b3b5a053d0e806/simlord-0.7.1.zip", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "ec3779a3a110125181ecac360d91c317", "sha256": "fc1723fde24d9b241b530073230f349a0f18e44e83260a5f18ff0a1b1c520dc6"}, "downloads": -1, "filename": "simlord-0.7.2.zip", "has_sig": false, "md5_digest": "ec3779a3a110125181ecac360d91c317", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17316, "upload_time": "2016-04-11T09:39:03", "upload_time_iso_8601": "2016-04-11T09:39:03.965751Z", "url": "https://files.pythonhosted.org/packages/11/c0/cd7107f567ee1dddc91a62365a811eeb910c31552347b306d525dca9769b/simlord-0.7.2.zip", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "d0429a56e010909731996730af3dc547", "sha256": "4b3455eee8a866bfb5b2fa9496060d3c0bb6d09d1d90ac9afa7fed4fa9db6b33"}, "downloads": -1, "filename": "simlord-0.7.3.zip", "has_sig": false, "md5_digest": "d0429a56e010909731996730af3dc547", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17292, "upload_time": "2016-04-13T09:42:48", "upload_time_iso_8601": "2016-04-13T09:42:48.906818Z", "url": "https://files.pythonhosted.org/packages/3a/55/8f83e4aeee213983aae897127368a1deb39613ee8b677b977007a54b95dd/simlord-0.7.3.zip", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "8c3ca77fcea94127f0319f32fa92a094", "sha256": "728f32e2651f23b011746dd1893168adccde248e814bec254b96a22de4cbda63"}, "downloads": -1, "filename": "simlord-0.7.4.zip", "has_sig": false, "md5_digest": "8c3ca77fcea94127f0319f32fa92a094", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17323, "upload_time": "2016-06-15T13:59:12", "upload_time_iso_8601": "2016-06-15T13:59:12.820682Z", "url": "https://files.pythonhosted.org/packages/4f/5c/98bad8f4f8f85769971a3e2e0889098bf3acb978aaf234deb2ebd9f6825f/simlord-0.7.4.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "c71561c66e6ed8eec6d913be9cb70c23", "sha256": "98869bd9628b82f287a683998ffff7bc8112dad826945d289abde85231033905"}, "downloads": -1, "filename": "simlord-1.0.0.zip", "has_sig": false, "md5_digest": "c71561c66e6ed8eec6d913be9cb70c23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17368, "upload_time": "2016-07-13T15:30:56", "upload_time_iso_8601": "2016-07-13T15:30:56.272691Z", "url": "https://files.pythonhosted.org/packages/91/4b/409c5382af2d09e95393ff55b364c736a7a3453efc3861398c78c73871b6/simlord-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "adeabbf09b8e1e6e7b8a2a4ab608c6e1", "sha256": "9cbf8d73b530257a67105dd677b08ab253d0328e8689cb31095709c085b2d899"}, "downloads": -1, "filename": "simlord-1.0.1.zip", "has_sig": false, "md5_digest": "adeabbf09b8e1e6e7b8a2a4ab608c6e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17405, "upload_time": "2017-01-03T15:44:33", "upload_time_iso_8601": "2017-01-03T15:44:33.982029Z", "url": "https://files.pythonhosted.org/packages/9b/c8/200ea172039cb78d2e35b3fadb14037abde6344cbe95dd78f7255b6e71c5/simlord-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "da15b92001429628c65833e12962da58", "sha256": "0f018d43bfaaeb4fc6e95eb4d0f345f2f39a4f2eb372654cba29700fc13e8c93"}, "downloads": -1, "filename": "simlord-1.0.2.zip", "has_sig": false, "md5_digest": "da15b92001429628c65833e12962da58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18504, "upload_time": "2017-03-17T17:03:01", "upload_time_iso_8601": "2017-03-17T17:03:01.415310Z", "url": "https://files.pythonhosted.org/packages/23/c5/bf4b08125ed36150a5a7e6bf48a07a7a2d25cb9d6855df63d5bc4d6e632f/simlord-1.0.2.zip", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "c1d906722b63c687053ea30bcbe3a690", "sha256": "40abec8e31c88f69b485a262abae200b27ebe4e937fe58a3d7508dfa22739dac"}, "downloads": -1, "filename": "simlord-1.0.3.zip", "has_sig": false, "md5_digest": "c1d906722b63c687053ea30bcbe3a690", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20824, "upload_time": "2019-05-20T13:13:37", "upload_time_iso_8601": "2019-05-20T13:13:37.749455Z", "url": "https://files.pythonhosted.org/packages/31/55/e263d8fa087352475cae0f5c9023dff13108e63678675a668b91efc9b1f3/simlord-1.0.3.zip", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "259db438e42122c804dda8fd39804a44", "sha256": "8f3f018da10b91ad865c602eb3926513dcdbfd3b0108f5d5006aee4bca4a74b6"}, "downloads": -1, "filename": "simlord-1.0.4.zip", "has_sig": false, "md5_digest": "259db438e42122c804dda8fd39804a44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22215, "upload_time": "2020-01-07T13:20:07", "upload_time_iso_8601": "2020-01-07T13:20:07.350782Z", "url": "https://files.pythonhosted.org/packages/b7/41/0deb50e6d2b003799371dda32a2b81d254e5b665f8435c75d656a7d6d080/simlord-1.0.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "259db438e42122c804dda8fd39804a44", "sha256": "8f3f018da10b91ad865c602eb3926513dcdbfd3b0108f5d5006aee4bca4a74b6"}, "downloads": -1, "filename": "simlord-1.0.4.zip", "has_sig": false, "md5_digest": "259db438e42122c804dda8fd39804a44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22215, "upload_time": "2020-01-07T13:20:07", "upload_time_iso_8601": "2020-01-07T13:20:07.350782Z", "url": "https://files.pythonhosted.org/packages/b7/41/0deb50e6d2b003799371dda32a2b81d254e5b665f8435c75d656a7d6d080/simlord-1.0.4.zip", "yanked": false}], "timestamp": "Fri May  8 03:11:09 2020"}