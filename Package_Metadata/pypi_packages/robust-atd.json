{"info": {"author": "Shadowbq", "author_email": "shadowbq@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: Security"], "description": "Robust ATD CLI tools\n================\n\n\n[![GitHub release](https://img.shields.io/github/release/shadowbq/robust-atd.svg?style=for-the-badge)](https://github.com/shadowbq/robust-atd/releases)\n[![license](https://img.shields.io/github/license/shadowbq/robust-atd.svg?style=for-the-badge)](/LICENSE)\n[![GitHub Release Date](https://img.shields.io/github/release-date/shadowbq/robust-atd.svg?style=for-the-badge)](https://github.com/shadowbq/robust-atd/releases)\n[![Code](https://img.shields.io/badge/Language-Python--2.7-ff69b4.svg?style=for-the-badge)](/README.md)\n\n\n\"Robust\" is a set of tools to leverage the HTTPS REST API of the [McAfee Advanced Threat Detection](http://www.mcafee.com/us/products/advanced-threat-defense.aspx) 3.8 - 4.x appliance.\n\n## Tools Overview\n\n* `robust` : basic cli submission of a single piece of malware to a MATD server.\n* `robust-profiles` : list the available MATD profiles\n* `robust-search` : search MATD via MD5 for a report.\n* `robust-watchdog` : monitor a directory for files and submit `multithreaded` to MATD\n* `robust-convict` : submit `multithreaded` a directory filled with samples and sort into malicious, clean, error, etc.\n* `robust-reporter` : parse offline the json files returned during large batch submissions.\n* `robust-version-checker` : Check the MATD Server Version\n\n## Important\n\nThis is *not a supported or official application of McAfee*. This work is based off of publicly available published documentation for integrating with the McAfee ATD REST API 3.6.x to 4.x\n\nOfficial API Documentation is available here:\n\n* https://support.mcafee.com/ServicePortal/faces/knowledgecenter?q=api&v=&p=Advanced+Threat+Defense\n\n## McAfee ATD - Advanced Threat defense\n\nMcAfee ATD is a commercial grade enterprise security sandbox analysis appliance. It main function is to provide advanced detection for stealthy, zero-day malware. McAfee Advanced Threat Defense is available as an on-premises appliance or a virtual form factor, with support for both private and public cloud with availability in the Azure Marketplace.\n\n* https://www.mcafee.com/us/products/advanced-threat-defense.aspx\n* https://www.mcafee.com/us/resources/data-sheets/ds-advanced-threat-defense.pdf\n\n## Install\n\nReq: Python 2.7.x.\n\nBug #5: https://github.com/shadowbq/robust-atd/issues/5 - ~~`pip install robust-atd`~~\n\nNote: Python 3.x is not supported.\n\n### PKG Download & Manual Install Alternative\n\nNote: `python setup.py install` will attempt to install dependencies from the internet via `pip`.\n\nFor offline runtime installation, please download the pip packages listed in the `requirements.txt`.\n\n### Virutalenv\n\nIt is recommended to install virtualenv & virtualenvwrapper via `Virtualenv Burrito`.\n\nSee: [README_PYTHON_UP.md](/README_PYTHON_UP.md)\n\n```\n$> mkvirtualenv robust\n$> workon robust\n$(robust)> wget https://github.com/shadowbq/robust-atd/archive/master.zip\n$(robust)> unzip master.zip\n$(robust)> cd master\n$(robust)> python setup.py install\n```\n\n-or-\n\n```\n$> mkvirtualenv --python=python2.7 robust\n$> workon robust\n$(robust)> pip install robust-atd\n```\n\n### Robust (DOT) Configuration file\n\nRobust will use the `~\\.robust` configuration file to load defaults into the scripts.\n\nThe configuration file is broken into multiple sections. If you use a section you must define all the settings in that section.\n\n  * [auth]\n  * [connection]\n  * [convict]\n\nIt is recommended to set the file to `read-write` only for the current user, and remove all world `(-)rwx` permissions.\n\nAuthentication Section `[auth]` :\n\n```shell\n$(robust)> cat ~/.robust\n[auth]\nuser: admin\npassword: password.\n```\n\nConnection Detail Section `[connection]` :\n\n```shell\n$(robust)> cat ~/.robust\n[connection]\nip: atd.localhost.localdomain\nskipssl: true\nmaxthreads: 15\n```\n\nData Storage Section `[storage]`:\n\nNote: Datastorage locations will be created if they do not exist.\n\n```shell\n$(robust)> cat ~/.robust\n[storage]\nseverity: 3\ncleandir: ~/robust/clean\ndirtydir: ~/robust/dirty\nreportdir: ~/robust/reports\nerrordir: ~/robust/errors\n```\n\nThis file is expanded via the `os` module is compliant with windows user directories.\n\n\n## Robust:\n\nUsing `robust` for submitting samples.\n\n```\nusage: robust.py [-h] [-u USER] [-p PASSWORD] [-i ATD IP] [-n] -s\n                 FILE_TO_UPLOAD -a ANALYZER_PROFILE [-v] [--version]\n\nRobust McAfee ATD Python CLI tool\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --version            show program's version number and exit\n  -v, --verbosity      increase output verbosity\n                             (default: None)\n  -q, --quiet          (q)uiet all output\n                             (default: False)\n\n\nAuthentication parameters:\n  -u USER              (u)sername for the API of the ATD\n                               (default: admin)\n  -p PASSWORD          (p)assword for username\n                               (default: password.)\n  -i ATD IP            (i)p or hostname address of ATD\n                               (default: atd.localhost.localdomain)\n  -n                   do (n)ot verify the SSL certificate for the communications\n                               (default: False)\n\nSample parameters:\n  -s FILE_TO_UPLOAD    (s)ample or file to be analyzed\n                               (default: None)\n  -a ANALYZER_PROFILE  (a)nalyzer profile id to be used during analysis\n                               (default: None)\n\nExamples:\n    robust.py -u admin -p password. -i atd.localhost.localdomain -s /usr/local/bin/file_to_scan -a 1\n```\n\n### Submitting a Sample\n\nA sample can be submitted via cli with full flags, `.robust` configuration file, or interrupt passwords.\n\n```shell\n$(robust)> robust.py -u admin -p password. -i atd.localhost.localdomain -s /home/malware/non-malicious-container/putty_upx_7.exe\n```\n\nUsing interrupt (interactive) passwords:\n\n```shell\n$(robust)> robust-profiles.py -n -l\nPassword: <input password>\nATD profiles:  1\nProfile id:  26\nName:  Win XP Down Select (Online)\nOS: winXPsp3\nRun all down selects?: Off\n******************\n```\n\n### Managing Outputs\n\nUsing System Return codes with `-q` Quiet output flag. When the quiet flag is\nused for submitting samples or searching reports the *severity* of the application\nis returned as a system exit/return code. Negative return codes indicate *faults*\nor failure during submission.\n\n```\n(robust)>$ robust.py -n -a 26 -s ./.samples/Sample.exe -q\n(robust)>$ echo $?\n2\n```\n\nCommon Fault codes:\n\n```\n    -1 ---> Error connecting to the ATD Server\n    -2 ---> Error uploading file to the ATD Server\n    -3 ---> Analysis failed\n    -4 ---> Error getting report\n    -5 ---> Error Obtaining vmprofilelist\n```\n\nMalware ranking:\n(If the severity level of the sample is 3 and above it is generally regarded a threat)\n```\n    N/A -> Sample did not run\n    -1 --> Sample is white listed\n    0 ---> No malicious activity detected (None)\n    1 ---> Sample is slightly suspicious (Low)\n    2 ---> Sample is somewhat/probably is suspicious\n    3 ---> Sample is malicious (Medium)\n    4 ---> Sample is malicious\n    5 ---> Sample is malicious (Very High)\n```\n## robust-version-checker\n\nYou can quickly test your connection settings in the CLI.\n\n```\n$(robust)> robust-version-checker.py -u robust -p password. -i atd.example.com -n\nConnection successful...\n\nSession Value:      g7aenj99pfp0gbrogfbqsd9085\nUser ID:            57\nATD ver:            4.2.2.16\nATD Box heartbeat:  1519939175\n```\n\n## robust-profiles\n\nA tool designed to pull the *Analyzer Profile* policy list available to a specific user.\n\nPulling the Policy List - In order to submit a sample using `robust` you must identify the Analyzer Profile ID. `robust-profiles` assists in identifying the available profiles your user can submit samples to.\n\n```\n$(robust)> robust-profiles.py -n -l\nATD profiles:  10\nProfile id:  1\nName:  Android\nOS: android\nRun All Selected?: Off\n******************\nProfile id:  26\nName:  Win XP Down Select (Online)\nOS: winXPsp3\nRun All Selected?: Off\n******************\nProfile id:  25\nName:  Windows XP Full Run (Offline)\nOS: winXPsp3\nRun All Selected?: On\n******************\nProfile id:  24\nName:  Windows XP Full Run (Online)\nOS: winXPsp3\nRun All Selected?: On\n******************\n```\n\n## robust-search\n\nA tool designed to search and return reports for a specific md5 hash.\n\n```shell\n(robust)$> $ robust-search.py -m 2F7568342339CDB8321B52FF7BEBE661 -n\n(Sample.exe:2F7568342339CDB8321B52FF7BEBE661) = 2: \"Sample probably is suspicious\"\n```\n### Help details\n\n`robust-search` has the options `-w` and `-t` to collect the proper report on the submission.\n\n```\nusage: robust-search.py [-h] [-u USER] [-p PASSWORD] [-i ATD IP] [-n] -m MD5\n                        [-t {html,txt,xml,zip,json,ioc,stix,pdf,sample}]\n                        [-w FILENAME] [--version] [-v | -q]\n\nRobust McAfee ATD Python CLI tool\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -v, --verbosity       increase output (v)erbosity\n                        \t\t(default: None)\n  -q, --quiet           (q)uiet all output\n                        \t\t(default: False)\n\nAuthentication parameters:\n  -u USER               (u)sername for the API of the ATD\n                        \t\t(default: admin)\n  -p PASSWORD           (p)assword for username\n                        \t\t(default: password.)\n  -i ATD IP             (i)p or hostname address of ATD\n                        \t\t(default: atd.localhost.localdomain)\n  -n                    do (n)ot verify the SSL certificate for the communications\n                        \t\t(default: False)\n\nSearch parameters:\n  -m MD5                (m)d5 32bit hash of the sample to search\n                        \t\t(default: None)\n\nReporting parameters:\n  -t {html,txt,xml,zip,json,ioc,stix,pdf,sample}\n                        (t)ype of report requested\n                        \t\t(default: None)\n  -w FILENAME           (w)rite filename for saving the requested report\n                        \t\t(default: None)\n```\n\n\n## robust-watchdog\n\nA tool that watches a directory recursively for any new files to submit.\n\nExample CLI\n```\nusage: robust-watchdog.py [-h] -u USER [-p PASSWORD] -i ATD IP [-n] -a\n                          ANALYZER_PROFILE -d DIRECTORY [-e] [-j MAXTHREADS]\n                          [--version] [-v | -q]\n\nRobust McAfee ATD Python CLI tool\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --version            show program's version number and exit\n  -v, --verbosity      increase output (v)erbosity\n                       \t\t(default: None)\n  -q, --quiet          (q)uiet all output\n                       \t\t(default: False)\n\nAuthentication parameters:\n  -u USER              (u)sername for the API of the ATD\n                       \t\t(default: None)\n  -p PASSWORD          (p)assword for username\n                       \t\t(default: None)\n  -i ATD IP            (i)p or hostname address of ATD\n                       \t\t(default: None)\n  -n                   do (n)ot verify the SSL certificate for the communications\n                       \t\t(default: False)\n\nWatch parameters:\n  -f                   (f)ollow and watch the directory for new files to submit\n                          (default: True)\n  -a ANALYZER_PROFILE  (a)nalyzer profile id to be used during analysis\n                       \t\t(default: None)\n  -d DIRECTORY         (d)irectory to watch for events\n                       \t\t(default: None)\n  -e                   (e)xisting files in directory will be submitted\n                       \t\t(default: False)\n  -j MAXTHREADS        (j) max number of threads\n                       \t\t(default: 1)\n```\n\nLet it run in a shell and open another one or the file browser to create files in the /path/to/directory. Since the handler is printing the results, the output will reflect the flags chosen similar to `robust.py`:\n\nThe `-e` flag can be passed to cause all existing files in the directory (recurisively) to be submitted upon start.\n\n```shell\n(robust)$> robust-watchdog.py -a 26 -d ./ -n -e\n.\n...\n.\n.....\n```\n\n## robust-convict\n\n`robust-convict` is a tool designed like `robust-watchdog` but its purpose is to help sort large directories of malware samples into directories, while downloading their corresponding reports.\n\nExample Usage\n\n```\nrobust-convict.py -n -a 26 -c ./tmp/clean/ -x ./tmp/dirty/ -r ./tmp/reports/ -z ./tmp/errors/ -d ./tmp/preprocess -j 10 -t zip -q\n```\n\nOptions\n\n```\nusage: robust-convict.py [-h] [-u USER] [-p PASSWORD] [-i ATD IP] [-n] -a\n                         ANALYZER_PROFILE -d DIRECTORY [-e] [-y SEVERITY]\n                         [-c CLEANDIR] [-x DIRTYDIR] [-r REPORTDIR]\n                         [-z ERRORDIR]\n                         [-t {html,txt,xml,zip,json,ioc,stix,pdf,sample}]\n                         [-j MAXTHREADS] [--version] [-v | -q]\n\nRobust McAfee ATD Python CLI tool\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  -v, --verbosity       increase output (v)erbosity\n                        \t\t(default: None)\n  -q, --quiet           (q)uiet all output\n                        \t\t(default: False)\n\nAuthentication parameters:\n  -u USER               (u)sername for the API of the ATD\n                        \t\t(default: robust)\n  -p PASSWORD           (p)assword for username\n                        \t\t(default: ****<.robust>*****)\n  -i ATD IP             (i)p or hostname address of ATD\n                        \t\t(default: atd.localhost.localdomain)\n  -n                    do (n)ot verify the SSL certificate for the communications\n                        \t\t(default: True)\n\nWatch parameters:\n  -f                   (f)ollow and watch the directory for new files to submit\n                          (default: False)\n  -a ANALYZER_PROFILE   (a)nalyzer profile id to be used during analysis\n                        \t\t(default: None)\n  -d DIRECTORY          (d)irectory to watch for events\n                        \t\t(default: None)\n  -e                    (e)xisting files in directory will be submitted\n                        \t\t(default: False)\n  -j MAXTHREADS         (j) max number of threads\n                        \t\t(default: 1)\n\nConvict parameters:\n  -y SEVERITY           (y) treat sample as dirty with this severity [0-5] or higher\n                        \t\t(default: 3)\n  -c CLEANDIR           (c) move clean files to this directory\n                        \t\t(default: ~/robust/clean/)\n  -x DIRTYDIR           (x) move processed dirty files to this directory\n                        \t\t(default: ~/robust/malware/)\n  -r REPORTDIR          (r) save reports to this directory\n                        \t\t(default: ~/robust/reports/)\n  -z ERRORDIR           (z) move error or skip files to this directory\n                        \t\t(default: ~/robust/errors/)\n  -t {html,txt,xml,zip,json,ioc,stix,pdf,sample}\n                        (t)ype of report requested\n                        \t\t(default: None)\n```\n\n## robust-reporter\n\n`robust-reporter` is a tool designed to quickly summarize the downloaded `*.json` files in your 'reports' directory.\n\nOptions\n\n```\nusage: robust-reporter.py [-h] [-r REPORTDIR] [--version] [-v | -q]\n\nRobust McAfee ATD Python CLI tool\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --version        show program's version number and exit\n  -v, --verbosity  increase output (v)erbosity\n                   \t\t(default: None)\n  -q, --quiet      (q)uiet all output\n                   \t\t(default: False)\n\nReporter parameters:\n  -r REPORTDIR     (r) reports are processed or stored using this directory\n                   \t\t(default: ~/robust/reports/)\n```\nSample Run\n\n```\n$ robust-reporter.py\n82344C9864B0F1D120C0D1AB7F7C54C3 (---) : Somewhat/probably is suspicious(Low-Medium) - 24sec\nD012492123E4CF0CFB3A017A2E92C077 (Malware.Dynamic) : Malicious(High) - 194sec\nDB273A97C54E3E23F411EA7C9B5A82DA (Malware.Dynamic) : Malicious (Medium) - 53sec\n165A36C02B3FAAF4DE38F93A3DCB821B (---) : Somewhat/probably is suspicious(Low-Medium) - 36sec\nD10195670651A40C46C22972CD839E89 (Artemis!D10195670651) : Malicious (Very High) - 32sec\n8271093E0E78574428BBDDDA6F34A980 (Malware.Dynamic) : Malicious(High) - 192sec\n86DAFA0262BF217F5344A3B057C0DB06 (Malware.Dynamic) : Malicious(High) - 193sec\n8DA4CDC3E2EE16021F237EA7A043DA8E (Malware.Dynamic) : Malicious(High) - 191sec\n```\n\n## Tunning for Linux File Watchers\n\n### iNotify Tuning Parameters\n\nThe inotify(7) subsystem has three important tunings that impact robust's directory watching.\n\n```\n/proc/sys/fs/inotify/max_user_instances impacts how many different root dirs you can watch.\n/proc/sys/fs/inotify/max_user_watches impacts how many dirs you can watch across all watched roots.\n/proc/sys/fs/inotify/max_queued_events impacts how likely it is that your system will experience a notification overflow.\n```\n\nYou obviously need to ensure that `max_user_instances` and `max_user_watches` are set so that the system is capable of keeping track of your files.\n\n`max_queued_events` is important to size correctly; if it is too small, the kernel will drop events and robust won't be able to report on them. Making this value bigger reduces the risk of this happening.\n\n# Developers\n\n## Install Development\n\n```\n$(robust)> pip install -r devel-requirements.txt\n\n```\n\n## Development Tasks\n\n```shell\n(robust)$> invoke -l\nAvailable tasks:\n\n  build       Build the setup.py\n  clean       Clean up docs, bytecode, and extras\n  codestats   Run flake8 PeP8 tests for code stats\n  release     ``version`` should be a string like '0.4' or '1.0'.\n  smell       Run flake8 PeP8 tests\n  test        Run Unit tests\n\n```\n\n### Running the Test Suite\n\nNose is run via `invoke test`\n\n```\nClearing rm -rf build\nClearing rm -rf dist\nClearing rm -rf *.egg-info\nClearing rm -rf pyclient.log\nClearing rm -rf **/**/*.pyc\nClearing rm -rf **/*.pyc\nClearing rm -rf ./*.pyc\n...................\n-----------------------------------------------------------------------------\n19 tests run in 0.3 seconds (19 tests passed)\n117     E501 line too long (97 > 79 characters)\n7       F401 'ratd' imported but unused\n1       F841 local variable 'rb_rtnv' is assigned to but never used\n1       N802 function name should be lowercase\n5       W601 .has_key() is deprecated, use 'in'\n```\n\n### Additional LICENSE information\n\nA modified Fork of `atdcli.py` (Carlos Munoz - 2014).\n\nhttps://pypi.python.org/pypi/atd\n\n## VX Workshop Appliance Option\n\nThere is a fully operational Xubuntu 14.04 liveCD that includes:\n\n* robust - https://github.com/shadowbq/robust-atd\n* maltrieve - https://github.com/shadowbq/maltrieve\n* vxcage - https://github.com/shadowbq/vxcage\n\nIt also includes\n\n* hexeditors\n* static analysis tools\n* google chrome\n* vmtools\n* etc..\n\nxubuntu-14.04.4-desktop-x86_64-VX-Workshop-0.4.iso (~ 1.2 GB)\n\nAvailable to download with READMEs here: https://goo.gl/flcvew\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/shadowbq/robust-atd", "keywords": "atd mcafee ioc", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "robust-atd", "package_url": "https://pypi.org/project/robust-atd/", "platform": "", "project_url": "https://pypi.org/project/robust-atd/", "project_urls": {"Homepage": "http://github.com/shadowbq/robust-atd"}, "release_url": "https://pypi.org/project/robust-atd/0.5.2/", "requires_dist": ["PyYAML", "argparse", "pathtools", "urllib3", "requests (==2.7.0)", "watchdog (==0.8.3)", "rednose; extra == 'dev'", "nose; extra == 'dev'", "nose-regression; extra == 'dev'", "nose-watch; extra == 'dev'", "coverage; extra == 'dev'", "flake8; extra == 'dev'", "pep8-naming; extra == 'dev'", "tox; extra == 'dev'", "invoke; extra == 'dev'", "HTTPretty; extra == 'dev'", "vcrpy; extra == 'dev'", "twine; extra == 'dev'", "Sphinx (==1.2.1); extra == 'docs'", "sphinxcontrib-napoleon (==0.2.4); extra == 'docs'", "nose (==1.3.0); extra == 'test'", "tox (==1.6.1); extra == 'test'"], "requires_python": ">=2.6, !=3.*", "summary": "Manipulate McAfee ATD appliance", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Robust ATD CLI tools<br>================<br><br><br>[![GitHub release](https://img.shields.io/github/release/shadowbq/robust-atd.svg?style=for-the-badge)](https://github.com/shadowbq/robust-atd/releases)<br>[![license](https://img.shields.io/github/license/shadowbq/robust-atd.svg?style=for-the-badge)](/LICENSE)<br>[![GitHub Release Date](https://img.shields.io/github/release-date/shadowbq/robust-atd.svg?style=for-the-badge)](https://github.com/shadowbq/robust-atd/releases)<br>[![Code](https://img.shields.io/badge/Language-Python--2.7-ff69b4.svg?style=for-the-badge)](/README.md)<br><br><br>\"Robust\" is a set of tools to leverage the HTTPS REST API of the [McAfee Advanced Threat Detection](http://www.mcafee.com/us/products/advanced-threat-defense.aspx) 3.8 - 4.x appliance.<br><br>## Tools Overview<br><br>* `robust` : basic cli submission of a single piece of malware to a MATD server.<br>* `robust-profiles` : list the available MATD profiles<br>* `robust-search` : search MATD via MD5 for a report.<br>* `robust-watchdog` : monitor a directory for files and submit `multithreaded` to MATD<br>* `robust-convict` : submit `multithreaded` a directory filled with samples and sort into malicious, clean, error, etc.<br>* `robust-reporter` : parse offline the json files returned during large batch submissions.<br>* `robust-version-checker` : Check the MATD Server Version<br><br>## Important<br><br>This is *not a supported or official application of McAfee*. This work is based off of publicly available published documentation for integrating with the McAfee ATD REST API 3.6.x to 4.x<br><br>Official API Documentation is available here:<br><br>* https://support.mcafee.com/ServicePortal/faces/knowledgecenter?q=api&amp;v=&amp;p=Advanced+Threat+Defense<br><br>## McAfee ATD - Advanced Threat defense<br><br>McAfee ATD is a commercial grade enterprise security sandbox analysis appliance. It main function is to provide advanced detection for stealthy, zero-day malware. McAfee Advanced Threat Defense is available as an on-premises appliance or a virtual form factor, with support for both private and public cloud with availability in the Azure Marketplace.<br><br>* https://www.mcafee.com/us/products/advanced-threat-defense.aspx<br>* https://www.mcafee.com/us/resources/data-sheets/ds-advanced-threat-defense.pdf<br><br>## Install<br><br>Req: Python 2.7.x.<br><br>Bug #5: https://github.com/shadowbq/robust-atd/issues/5 - ~~`pip install robust-atd`~~<br><br>Note: Python 3.x is not supported.<br><br>### PKG Download &amp; Manual Install Alternative<br><br>Note: `python setup.py install` will attempt to install dependencies from the internet via `pip`.<br><br>For offline runtime installation, please download the pip packages listed in the `requirements.txt`.<br><br>### Virutalenv<br><br>It is recommended to install virtualenv &amp; virtualenvwrapper via `Virtualenv Burrito`.<br><br>See: [README_PYTHON_UP.md](/README_PYTHON_UP.md)<br><br>```<br>$&gt; mkvirtualenv robust<br>$&gt; workon robust<br>$(robust)&gt; wget https://github.com/shadowbq/robust-atd/archive/master.zip<br>$(robust)&gt; unzip master.zip<br>$(robust)&gt; cd master<br>$(robust)&gt; python setup.py install<br>```<br><br>-or-<br><br>```<br>$&gt; mkvirtualenv --python=python2.7 robust<br>$&gt; workon robust<br>$(robust)&gt; pip install robust-atd<br>```<br><br>### Robust (DOT) Configuration file<br><br>Robust will use the `~\\.robust` configuration file to load defaults into the scripts.<br><br>The configuration file is broken into multiple sections. If you use a section you must define all the settings in that section.<br><br>  * [auth]<br>  * [connection]<br>  * [convict]<br><br>It is recommended to set the file to `read-write` only for the current user, and remove all world `(-)rwx` permissions.<br><br>Authentication Section `[auth]` :<br><br>```shell<br>$(robust)&gt; cat ~/.robust<br>[auth]<br>user: admin<br>password: password.<br>```<br><br>Connection Detail Section `[connection]` :<br><br>```shell<br>$(robust)&gt; cat ~/.robust<br>[connection]<br>ip: atd.localhost.localdomain<br>skipssl: true<br>maxthreads: 15<br>```<br><br>Data Storage Section `[storage]`:<br><br>Note: Datastorage locations will be created if they do not exist.<br><br>```shell<br>$(robust)&gt; cat ~/.robust<br>[storage]<br>severity: 3<br>cleandir: ~/robust/clean<br>dirtydir: ~/robust/dirty<br>reportdir: ~/robust/reports<br>errordir: ~/robust/errors<br>```<br><br>This file is expanded via the `os` module is compliant with windows user directories.<br><br><br>## Robust:<br><br>Using `robust` for submitting samples.<br><br>```<br>usage: robust.py [-h] [-u USER] [-p PASSWORD] [-i ATD IP] [-n] -s<br>                 FILE_TO_UPLOAD -a ANALYZER_PROFILE [-v] [--version]<br><br>Robust McAfee ATD Python CLI tool<br><br>optional arguments:<br>  -h, --help           show this help message and exit<br>  --version            show program's version number and exit<br>  -v, --verbosity      increase output verbosity<br>                             (default: None)<br>  -q, --quiet          (q)uiet all output<br>                             (default: False)<br><br><br>Authentication parameters:<br>  -u USER              (u)sername for the API of the ATD<br>                               (default: admin)<br>  -p PASSWORD          (p)assword for username<br>                               (default: password.)<br>  -i ATD IP            (i)p or hostname address of ATD<br>                               (default: atd.localhost.localdomain)<br>  -n                   do (n)ot verify the SSL certificate for the communications<br>                               (default: False)<br><br>Sample parameters:<br>  -s FILE_TO_UPLOAD    (s)ample or file to be analyzed<br>                               (default: None)<br>  -a ANALYZER_PROFILE  (a)nalyzer profile id to be used during analysis<br>                               (default: None)<br><br>Examples:<br>    robust.py -u admin -p password. -i atd.localhost.localdomain -s /usr/local/bin/file_to_scan -a 1<br>```<br><br>### Submitting a Sample<br><br>A sample can be submitted via cli with full flags, `.robust` configuration file, or interrupt passwords.<br><br>```shell<br>$(robust)&gt; robust.py -u admin -p password. -i atd.localhost.localdomain -s /home/malware/non-malicious-container/putty_upx_7.exe<br>```<br><br>Using interrupt (interactive) passwords:<br><br>```shell<br>$(robust)&gt; robust-profiles.py -n -l<br>Password: &lt;input password&gt;<br>ATD profiles:  1<br>Profile id:  26<br>Name:  Win XP Down Select (Online)<br>OS: winXPsp3<br>Run all down selects?: Off<br>******************<br>```<br><br>### Managing Outputs<br><br>Using System Return codes with `-q` Quiet output flag. When the quiet flag is<br>used for submitting samples or searching reports the *severity* of the application<br>is returned as a system exit/return code. Negative return codes indicate *faults*<br>or failure during submission.<br><br>```<br>(robust)&gt;$ robust.py -n -a 26 -s ./.samples/Sample.exe -q<br>(robust)&gt;$ echo $?<br>2<br>```<br><br>Common Fault codes:<br><br>```<br>    -1 ---&gt; Error connecting to the ATD Server<br>    -2 ---&gt; Error uploading file to the ATD Server<br>    -3 ---&gt; Analysis failed<br>    -4 ---&gt; Error getting report<br>    -5 ---&gt; Error Obtaining vmprofilelist<br>```<br><br>Malware ranking:<br>(If the severity level of the sample is 3 and above it is generally regarded a threat)<br>```<br>    N/A -&gt; Sample did not run<br>    -1 --&gt; Sample is white listed<br>    0 ---&gt; No malicious activity detected (None)<br>    1 ---&gt; Sample is slightly suspicious (Low)<br>    2 ---&gt; Sample is somewhat/probably is suspicious<br>    3 ---&gt; Sample is malicious (Medium)<br>    4 ---&gt; Sample is malicious<br>    5 ---&gt; Sample is malicious (Very High)<br>```<br>## robust-version-checker<br><br>You can quickly test your connection settings in the CLI.<br><br>```<br>$(robust)&gt; robust-version-checker.py -u robust -p password. -i atd.example.com -n<br>Connection successful...<br><br>Session Value:      g7aenj99pfp0gbrogfbqsd9085<br>User ID:            57<br>ATD ver:            4.2.2.16<br>ATD Box heartbeat:  1519939175<br>```<br><br>## robust-profiles<br><br>A tool designed to pull the *Analyzer Profile* policy list available to a specific user.<br><br>Pulling the Policy List - In order to submit a sample using `robust` you must identify the Analyzer Profile ID. `robust-profiles` assists in identifying the available profiles your user can submit samples to.<br><br>```<br>$(robust)&gt; robust-profiles.py -n -l<br>ATD profiles:  10<br>Profile id:  1<br>Name:  Android<br>OS: android<br>Run All Selected?: Off<br>******************<br>Profile id:  26<br>Name:  Win XP Down Select (Online)<br>OS: winXPsp3<br>Run All Selected?: Off<br>******************<br>Profile id:  25<br>Name:  Windows XP Full Run (Offline)<br>OS: winXPsp3<br>Run All Selected?: On<br>******************<br>Profile id:  24<br>Name:  Windows XP Full Run (Online)<br>OS: winXPsp3<br>Run All Selected?: On<br>******************<br>```<br><br>## robust-search<br><br>A tool designed to search and return reports for a specific md5 hash.<br><br>```shell<br>(robust)$&gt; $ robust-search.py -m 2F7568342339CDB8321B52FF7BEBE661 -n<br>(Sample.exe:2F7568342339CDB8321B52FF7BEBE661) = 2: \"Sample probably is suspicious\"<br>```<br>### Help details<br><br>`robust-search` has the options `-w` and `-t` to collect the proper report on the submission.<br><br>```<br>usage: robust-search.py [-h] [-u USER] [-p PASSWORD] [-i ATD IP] [-n] -m MD5<br>                        [-t {html,txt,xml,zip,json,ioc,stix,pdf,sample}]<br>                        [-w FILENAME] [--version] [-v | -q]<br><br>Robust McAfee ATD Python CLI tool<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  --version             show program's version number and exit<br>  -v, --verbosity       increase output (v)erbosity<br>                        \t\t(default: None)<br>  -q, --quiet           (q)uiet all output<br>                        \t\t(default: False)<br><br>Authentication parameters:<br>  -u USER               (u)sername for the API of the ATD<br>                        \t\t(default: admin)<br>  -p PASSWORD           (p)assword for username<br>                        \t\t(default: password.)<br>  -i ATD IP             (i)p or hostname address of ATD<br>                        \t\t(default: atd.localhost.localdomain)<br>  -n                    do (n)ot verify the SSL certificate for the communications<br>                        \t\t(default: False)<br><br>Search parameters:<br>  -m MD5                (m)d5 32bit hash of the sample to search<br>                        \t\t(default: None)<br><br>Reporting parameters:<br>  -t {html,txt,xml,zip,json,ioc,stix,pdf,sample}<br>                        (t)ype of report requested<br>                        \t\t(default: None)<br>  -w FILENAME           (w)rite filename for saving the requested report<br>                        \t\t(default: None)<br>```<br><br><br>## robust-watchdog<br><br>A tool that watches a directory recursively for any new files to submit.<br><br>Example CLI<br>```<br>usage: robust-watchdog.py [-h] -u USER [-p PASSWORD] -i ATD IP [-n] -a<br>                          ANALYZER_PROFILE -d DIRECTORY [-e] [-j MAXTHREADS]<br>                          [--version] [-v | -q]<br><br>Robust McAfee ATD Python CLI tool<br><br>optional arguments:<br>  -h, --help           show this help message and exit<br>  --version            show program's version number and exit<br>  -v, --verbosity      increase output (v)erbosity<br>                       \t\t(default: None)<br>  -q, --quiet          (q)uiet all output<br>                       \t\t(default: False)<br><br>Authentication parameters:<br>  -u USER              (u)sername for the API of the ATD<br>                       \t\t(default: None)<br>  -p PASSWORD          (p)assword for username<br>                       \t\t(default: None)<br>  -i ATD IP            (i)p or hostname address of ATD<br>                       \t\t(default: None)<br>  -n                   do (n)ot verify the SSL certificate for the communications<br>                       \t\t(default: False)<br><br>Watch parameters:<br>  -f                   (f)ollow and watch the directory for new files to submit<br>                          (default: True)<br>  -a ANALYZER_PROFILE  (a)nalyzer profile id to be used during analysis<br>                       \t\t(default: None)<br>  -d DIRECTORY         (d)irectory to watch for events<br>                       \t\t(default: None)<br>  -e                   (e)xisting files in directory will be submitted<br>                       \t\t(default: False)<br>  -j MAXTHREADS        (j) max number of threads<br>                       \t\t(default: 1)<br>```<br><br>Let it run in a shell and open another one or the file browser to create files in the /path/to/directory. Since the handler is printing the results, the output will reflect the flags chosen similar to `robust.py`:<br><br>The `-e` flag can be passed to cause all existing files in the directory (recurisively) to be submitted upon start.<br><br>```shell<br>(robust)$&gt; robust-watchdog.py -a 26 -d ./ -n -e<br>.<br>...<br>.<br>.....<br>```<br><br>## robust-convict<br><br>`robust-convict` is a tool designed like `robust-watchdog` but its purpose is to help sort large directories of malware samples into directories, while downloading their corresponding reports.<br><br>Example Usage<br><br>```<br>robust-convict.py -n -a 26 -c ./tmp/clean/ -x ./tmp/dirty/ -r ./tmp/reports/ -z ./tmp/errors/ -d ./tmp/preprocess -j 10 -t zip -q<br>```<br><br>Options<br><br>```<br>usage: robust-convict.py [-h] [-u USER] [-p PASSWORD] [-i ATD IP] [-n] -a<br>                         ANALYZER_PROFILE -d DIRECTORY [-e] [-y SEVERITY]<br>                         [-c CLEANDIR] [-x DIRTYDIR] [-r REPORTDIR]<br>                         [-z ERRORDIR]<br>                         [-t {html,txt,xml,zip,json,ioc,stix,pdf,sample}]<br>                         [-j MAXTHREADS] [--version] [-v | -q]<br><br>Robust McAfee ATD Python CLI tool<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  --version             show program's version number and exit<br>  -v, --verbosity       increase output (v)erbosity<br>                        \t\t(default: None)<br>  -q, --quiet           (q)uiet all output<br>                        \t\t(default: False)<br><br>Authentication parameters:<br>  -u USER               (u)sername for the API of the ATD<br>                        \t\t(default: robust)<br>  -p PASSWORD           (p)assword for username<br>                        \t\t(default: ****&lt;.robust&gt;*****)<br>  -i ATD IP             (i)p or hostname address of ATD<br>                        \t\t(default: atd.localhost.localdomain)<br>  -n                    do (n)ot verify the SSL certificate for the communications<br>                        \t\t(default: True)<br><br>Watch parameters:<br>  -f                   (f)ollow and watch the directory for new files to submit<br>                          (default: False)<br>  -a ANALYZER_PROFILE   (a)nalyzer profile id to be used during analysis<br>                        \t\t(default: None)<br>  -d DIRECTORY          (d)irectory to watch for events<br>                        \t\t(default: None)<br>  -e                    (e)xisting files in directory will be submitted<br>                        \t\t(default: False)<br>  -j MAXTHREADS         (j) max number of threads<br>                        \t\t(default: 1)<br><br>Convict parameters:<br>  -y SEVERITY           (y) treat sample as dirty with this severity [0-5] or higher<br>                        \t\t(default: 3)<br>  -c CLEANDIR           (c) move clean files to this directory<br>                        \t\t(default: ~/robust/clean/)<br>  -x DIRTYDIR           (x) move processed dirty files to this directory<br>                        \t\t(default: ~/robust/malware/)<br>  -r REPORTDIR          (r) save reports to this directory<br>                        \t\t(default: ~/robust/reports/)<br>  -z ERRORDIR           (z) move error or skip files to this directory<br>                        \t\t(default: ~/robust/errors/)<br>  -t {html,txt,xml,zip,json,ioc,stix,pdf,sample}<br>                        (t)ype of report requested<br>                        \t\t(default: None)<br>```<br><br>## robust-reporter<br><br>`robust-reporter` is a tool designed to quickly summarize the downloaded `*.json` files in your 'reports' directory.<br><br>Options<br><br>```<br>usage: robust-reporter.py [-h] [-r REPORTDIR] [--version] [-v | -q]<br><br>Robust McAfee ATD Python CLI tool<br><br>optional arguments:<br>  -h, --help       show this help message and exit<br>  --version        show program's version number and exit<br>  -v, --verbosity  increase output (v)erbosity<br>                   \t\t(default: None)<br>  -q, --quiet      (q)uiet all output<br>                   \t\t(default: False)<br><br>Reporter parameters:<br>  -r REPORTDIR     (r) reports are processed or stored using this directory<br>                   \t\t(default: ~/robust/reports/)<br>```<br>Sample Run<br><br>```<br>$ robust-reporter.py<br>82344C9864B0F1D120C0D1AB7F7C54C3 (---) : Somewhat/probably is suspicious(Low-Medium) - 24sec<br>D012492123E4CF0CFB3A017A2E92C077 (Malware.Dynamic) : Malicious(High) - 194sec<br>DB273A97C54E3E23F411EA7C9B5A82DA (Malware.Dynamic) : Malicious (Medium) - 53sec<br>165A36C02B3FAAF4DE38F93A3DCB821B (---) : Somewhat/probably is suspicious(Low-Medium) - 36sec<br>D10195670651A40C46C22972CD839E89 (Artemis!D10195670651) : Malicious (Very High) - 32sec<br>8271093E0E78574428BBDDDA6F34A980 (Malware.Dynamic) : Malicious(High) - 192sec<br>86DAFA0262BF217F5344A3B057C0DB06 (Malware.Dynamic) : Malicious(High) - 193sec<br>8DA4CDC3E2EE16021F237EA7A043DA8E (Malware.Dynamic) : Malicious(High) - 191sec<br>```<br><br>## Tunning for Linux File Watchers<br><br>### iNotify Tuning Parameters<br><br>The inotify(7) subsystem has three important tunings that impact robust's directory watching.<br><br>```<br>/proc/sys/fs/inotify/max_user_instances impacts how many different root dirs you can watch.<br>/proc/sys/fs/inotify/max_user_watches impacts how many dirs you can watch across all watched roots.<br>/proc/sys/fs/inotify/max_queued_events impacts how likely it is that your system will experience a notification overflow.<br>```<br><br>You obviously need to ensure that `max_user_instances` and `max_user_watches` are set so that the system is capable of keeping track of your files.<br><br>`max_queued_events` is important to size correctly; if it is too small, the kernel will drop events and robust won't be able to report on them. Making this value bigger reduces the risk of this happening.<br><br># Developers<br><br>## Install Development<br><br>```<br>$(robust)&gt; pip install -r devel-requirements.txt<br><br>```<br><br>## Development Tasks<br><br>```shell<br>(robust)$&gt; invoke -l<br>Available tasks:<br><br>  build       Build the setup.py<br>  clean       Clean up docs, bytecode, and extras<br>  codestats   Run flake8 PeP8 tests for code stats<br>  release     ``version`` should be a string like '0.4' or '1.0'.<br>  smell       Run flake8 PeP8 tests<br>  test        Run Unit tests<br><br>```<br><br>### Running the Test Suite<br><br>Nose is run via `invoke test`<br><br>```<br>Clearing rm -rf build<br>Clearing rm -rf dist<br>Clearing rm -rf *.egg-info<br>Clearing rm -rf pyclient.log<br>Clearing rm -rf **/**/*.pyc<br>Clearing rm -rf **/*.pyc<br>Clearing rm -rf ./*.pyc<br>...................<br>-----------------------------------------------------------------------------<br>19 tests run in 0.3 seconds (19 tests passed)<br>117     E501 line too long (97 &gt; 79 characters)<br>7       F401 'ratd' imported but unused<br>1       F841 local variable 'rb_rtnv' is assigned to but never used<br>1       N802 function name should be lowercase<br>5       W601 .has_key() is deprecated, use 'in'<br>```<br><br>### Additional LICENSE information<br><br>A modified Fork of `atdcli.py` (Carlos Munoz - 2014).<br><br>https://pypi.python.org/pypi/atd<br><br>## VX Workshop Appliance Option<br><br>There is a fully operational Xubuntu 14.04 liveCD that includes:<br><br>* robust - https://github.com/shadowbq/robust-atd<br>* maltrieve - https://github.com/shadowbq/maltrieve<br>* vxcage - https://github.com/shadowbq/vxcage<br><br>It also includes<br><br>* hexeditors<br>* static analysis tools<br>* google chrome<br>* vmtools<br>* etc..<br><br>xubuntu-14.04.4-desktop-x86_64-VX-Workshop-0.4.iso (~ 1.2 GB)<br><br>Available to download with READMEs here: https://goo.gl/flcvew<br><br><br>\n          </div>"}, "last_serial": 3707570, "releases": {"0.4.1": [{"comment_text": "", "digests": {"md5": "dcf0d08ee840ab0e401676daa4dd3c6f", "sha256": "aedfd10855ac6a10c3987a8292cfab017eb40e5017a030f7b7b850ae2bb73232"}, "downloads": -1, "filename": "robust-atd-0.4.1.tar.gz", "has_sig": false, "md5_digest": "dcf0d08ee840ab0e401676daa4dd3c6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19461, "upload_time": "2018-03-02T19:44:29", "upload_time_iso_8601": "2018-03-02T19:44:29.658349Z", "url": "https://files.pythonhosted.org/packages/24/44/7fb0f652a5c22e6e120b10f157e0e75f515edadad0479d29d33ba4a5197b/robust-atd-0.4.1.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "8ca7ea569cbd36a4738c46f6be4f346a", "sha256": "5300454b4f9cf649f4e24ad2bd13591774335edfa85bf0f3bbde7b48bc425e2f"}, "downloads": -1, "filename": "robust_atd-0.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "8ca7ea569cbd36a4738c46f6be4f346a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.6, !=3.*", "size": 31990, "upload_time": "2018-03-26T17:39:59", "upload_time_iso_8601": "2018-03-26T17:39:59.895058Z", "url": "https://files.pythonhosted.org/packages/21/06/cdee235f07f2da7ee7076e59af8e8c2138d67763a83dc4d8eba5b9e21f93/robust_atd-0.5.1-py2-none-any.whl", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "c471c9b53663d8c6c4670d8ee5333c22", "sha256": "8a732716f82413ade5ebf0d44efc238d43c8eb4461346478cde178ebef10658e"}, "downloads": -1, "filename": "robust_atd-0.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "c471c9b53663d8c6c4670d8ee5333c22", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.6, !=3.*", "size": 31989, "upload_time": "2018-03-26T17:40:00", "upload_time_iso_8601": "2018-03-26T17:40:00.903478Z", "url": "https://files.pythonhosted.org/packages/27/28/13974c3a496e1ec77a6aa3cb4134a4b5e6dc4d06f5e80bac15e161bb6d62/robust_atd-0.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b5d217a4b6d3757f41cc03ac87d77af", "sha256": "7219e40f6225dfca7aa2569c00bb6d60390be78af952f5a5cf510580359c0986"}, "downloads": -1, "filename": "robust-atd-0.5.2.tar.gz", "has_sig": false, "md5_digest": "1b5d217a4b6d3757f41cc03ac87d77af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.*", "size": 26322, "upload_time": "2018-03-26T18:30:26", "upload_time_iso_8601": "2018-03-26T18:30:26.652727Z", "url": "https://files.pythonhosted.org/packages/b1/31/8af4528951d2a95d308837eee66515dca52fb06b37ff0a34381037d69235/robust-atd-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c471c9b53663d8c6c4670d8ee5333c22", "sha256": "8a732716f82413ade5ebf0d44efc238d43c8eb4461346478cde178ebef10658e"}, "downloads": -1, "filename": "robust_atd-0.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "c471c9b53663d8c6c4670d8ee5333c22", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.6, !=3.*", "size": 31989, "upload_time": "2018-03-26T17:40:00", "upload_time_iso_8601": "2018-03-26T17:40:00.903478Z", "url": "https://files.pythonhosted.org/packages/27/28/13974c3a496e1ec77a6aa3cb4134a4b5e6dc4d06f5e80bac15e161bb6d62/robust_atd-0.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b5d217a4b6d3757f41cc03ac87d77af", "sha256": "7219e40f6225dfca7aa2569c00bb6d60390be78af952f5a5cf510580359c0986"}, "downloads": -1, "filename": "robust-atd-0.5.2.tar.gz", "has_sig": false, "md5_digest": "1b5d217a4b6d3757f41cc03ac87d77af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.*", "size": 26322, "upload_time": "2018-03-26T18:30:26", "upload_time_iso_8601": "2018-03-26T18:30:26.652727Z", "url": "https://files.pythonhosted.org/packages/b1/31/8af4528951d2a95d308837eee66515dca52fb06b37ff0a34381037d69235/robust-atd-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:37 2020"}