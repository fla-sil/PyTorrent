{"info": {"author": "Harald Friessnegger", "author_email": "harald at webmeisterei dot com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python"], "description": "Introduction\n============\n\n``lineage.index`` is an addon to `collective.lineage`_ that lets you\nsearch for content within a certain childsite.\n\n\nHow does it work?\n-----------------\n\n``lineage.index`` registers an index ``childsite`` on all items\nimplementing ``Products.CMFCore.interfaces.IContentish`` (which will be\nall Archetypes and Dexterity based content types).\n\nThe childsite's id can be used to search for content located in this\nchildsite.\n\nWhen listing items on the main portal, you can use the metadata-column\n``childsite`` to indicate which childsites the content has been\naggregated from.\n\n\nHow do I use it?\n----------------\n\nOnce installed, new content gets indexed under the id of its closest\nchildsite. Existing content requires a catalog update (see\n`Installation`_).\n\nYou can search for content within a childsite using the index::\n\n    brains = portal_catalog(childsite='subsite1')\n\nEach brain has a metadata column telling which childsite it's located\nin::\n\n    >>> brains[0].childsite\n    'subsite1'\n\nIf the item comes from the main portal (i.e. not inside a childsite),\n``None`` will be indexed. This allows you to find only content from the\nmain portal::\n\n    >>> brains = portal_catalog(childsite=None)\n    >>> brains[0].childsite is None\n    True\n\nThere's also a vocabulary ``lineage.childsites`` listing the available\nchildsites with their title.\n\nTo show the title of the subsite of a brain you can use the utility\nview::\n\n    <ul tal:define=\"util context/@@childsite\">\n        <li tal:repeat=\"item folderContents\">\n            <span tal:replace=\"item/Title\">Item 1</span> in\n            <span tal:replace=\"python: util.titleForKey(item.childsite)>Subportal One</span>\n        </li>\n    </ul>\n\nInstallation\n============\n\nSimply add ``lineage.index`` to your buildout eggs (no zcml slug is\nneeded thanks to z3c.autoinclude).\n\nQuickinstall ``Lineage Index``.\n\nIn case you already have childsites and content that shall be indexed\ngo to ``portal_catalog/manage_catalogAdvanced`` and click the\n``Update Catalog`` button to populate the index and the catalog\nmetadata.\n\nGotchas\n=======\n\nThe vocabulary caches all childsite titles until zope is restarted.\nIf you add childsites you need to restart zope to make them show up\nin the vocabulary.\n\n.. _`collective.lineage`: http://plone.org/products/collective-lineage/\n\n/nChangelog\n=========\n\n0.5 (2015-06-25)\n----------------\n\n- Depend on ``plone.api`` and use it to get the portal object.\n  [thet]\n\n- Add ``chilsiteForContext`` method, which returns the childsite UUID for a\n  given context.\n  [thet]\n\n- Upgrade to ``UUID`` basd indexing instead of using the ``id``. The id is not\n  unique and causes problems when multiple lineage subsites with the same id\n  are registered. Furthermore, the uuid can be used to retrieve the lineage\n  childsite object without traversing up the content tree. A upgrade step is\n  included.\n  [thet]\n\n\n0.4 (2012-01-10)\n----------------\n\n- PEP8 fixes\n  [claytron]\n\n- Use ``IContentish`` instead of ``IATContentType`` to ensure that all\n  CMF, AT and Dexterity based content gets indexed properly.\n  [claytron]\n\n0.3 (2012-01-08)\n----------------\n\n- Make non child site content be indexed as ``None`` so that \"main site\"\n  content can be found via this index also.\n  [claytron]\n\n- Make compatible with Plone 4.1\n  [jensens]\n\n- Add ``catalog.xml`` and remove ``setuphandlers`` logic.\n  [jensens]\n\n- Add ``collective.lineage`` to ``metadata.xml`` dependencies.\n  [jensens]\n\n- PEP8 fixes\n  [jensens]\n\n- Change extensions of reStructuredText files so they preview correctly.\n  [jensens]\n\n- Moved code to GitHub\n  [jensens]\n\n0.2 (2011-04-28)\n----------------\n\n- Since Lineage's ChildSite is not implementing IPloneSiteRoot anymore,\n  changed the indexing reference to implementing INavigationRoot\n  [tbesluau]\n\n- For other versions of ATContentType, we need to try and import the interface(s)\n  with and without the 's'\n  [tbesluau]\n\n\n0.1b1 (2010-03-16)\n------------------\n\n- Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/lineage.index", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "lineage.index", "package_url": "https://pypi.org/project/lineage.index/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lineage.index/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/lineage.index"}, "release_url": "https://pypi.org/project/lineage.index/0.5/", "requires_dist": null, "requires_python": null, "summary": "Adds an index and metadata that allows to search for content of a collective.lineage childsite", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            Introduction<br>============<br><br>``lineage.index`` is an addon to `collective.lineage`_ that lets you<br>search for content within a certain childsite.<br><br><br>How does it work?<br>-----------------<br><br>``lineage.index`` registers an index ``childsite`` on all items<br>implementing ``Products.CMFCore.interfaces.IContentish`` (which will be<br>all Archetypes and Dexterity based content types).<br><br>The childsite's id can be used to search for content located in this<br>childsite.<br><br>When listing items on the main portal, you can use the metadata-column<br>``childsite`` to indicate which childsites the content has been<br>aggregated from.<br><br><br>How do I use it?<br>----------------<br><br>Once installed, new content gets indexed under the id of its closest<br>childsite. Existing content requires a catalog update (see<br>`Installation`_).<br><br>You can search for content within a childsite using the index::<br><br>    brains = portal_catalog(childsite='subsite1')<br><br>Each brain has a metadata column telling which childsite it's located<br>in::<br><br>    &gt;&gt;&gt; brains[0].childsite<br>    'subsite1'<br><br>If the item comes from the main portal (i.e. not inside a childsite),<br>``None`` will be indexed. This allows you to find only content from the<br>main portal::<br><br>    &gt;&gt;&gt; brains = portal_catalog(childsite=None)<br>    &gt;&gt;&gt; brains[0].childsite is None<br>    True<br><br>There's also a vocabulary ``lineage.childsites`` listing the available<br>childsites with their title.<br><br>To show the title of the subsite of a brain you can use the utility<br>view::<br><br>    &lt;ul tal:define=\"util context/@@childsite\"&gt;<br>        &lt;li tal:repeat=\"item folderContents\"&gt;<br>            &lt;span tal:replace=\"item/Title\"&gt;Item 1&lt;/span&gt; in<br>            &lt;span tal:replace=\"python: util.titleForKey(item.childsite)&gt;Subportal One&lt;/span&gt;<br>        &lt;/li&gt;<br>    &lt;/ul&gt;<br><br>Installation<br>============<br><br>Simply add ``lineage.index`` to your buildout eggs (no zcml slug is<br>needed thanks to z3c.autoinclude).<br><br>Quickinstall ``Lineage Index``.<br><br>In case you already have childsites and content that shall be indexed<br>go to ``portal_catalog/manage_catalogAdvanced`` and click the<br>``Update Catalog`` button to populate the index and the catalog<br>metadata.<br><br>Gotchas<br>=======<br><br>The vocabulary caches all childsite titles until zope is restarted.<br>If you add childsites you need to restart zope to make them show up<br>in the vocabulary.<br><br>.. _`collective.lineage`: http://plone.org/products/collective-lineage/<br><br>/nChangelog<br>=========<br><br>0.5 (2015-06-25)<br>----------------<br><br>- Depend on ``plone.api`` and use it to get the portal object.<br>  [thet]<br><br>- Add ``chilsiteForContext`` method, which returns the childsite UUID for a<br>  given context.<br>  [thet]<br><br>- Upgrade to ``UUID`` basd indexing instead of using the ``id``. The id is not<br>  unique and causes problems when multiple lineage subsites with the same id<br>  are registered. Furthermore, the uuid can be used to retrieve the lineage<br>  childsite object without traversing up the content tree. A upgrade step is<br>  included.<br>  [thet]<br><br><br>0.4 (2012-01-10)<br>----------------<br><br>- PEP8 fixes<br>  [claytron]<br><br>- Use ``IContentish`` instead of ``IATContentType`` to ensure that all<br>  CMF, AT and Dexterity based content gets indexed properly.<br>  [claytron]<br><br>0.3 (2012-01-08)<br>----------------<br><br>- Make non child site content be indexed as ``None`` so that \"main site\"<br>  content can be found via this index also.<br>  [claytron]<br><br>- Make compatible with Plone 4.1<br>  [jensens]<br><br>- Add ``catalog.xml`` and remove ``setuphandlers`` logic.<br>  [jensens]<br><br>- Add ``collective.lineage`` to ``metadata.xml`` dependencies.<br>  [jensens]<br><br>- PEP8 fixes<br>  [jensens]<br><br>- Change extensions of reStructuredText files so they preview correctly.<br>  [jensens]<br><br>- Moved code to GitHub<br>  [jensens]<br><br>0.2 (2011-04-28)<br>----------------<br><br>- Since Lineage's ChildSite is not implementing IPloneSiteRoot anymore,<br>  changed the indexing reference to implementing INavigationRoot<br>  [tbesluau]<br><br>- For other versions of ATContentType, we need to try and import the interface(s)<br>  with and without the 's'<br>  [tbesluau]<br><br><br>0.1b1 (2010-03-16)<br>------------------<br><br>- Initial release\n          </div>"}, "last_serial": 1606460, "releases": {"0.1b1": [{"comment_text": "", "digests": {"md5": "e22ef95a59a6d048dd0a713629ff3cdc", "sha256": "98599d68458bcabe54c28eb51b4171f12c0381954ab928cfb38dca821725b815"}, "downloads": -1, "filename": "lineage.index-0.1b1.tar.gz", "has_sig": false, "md5_digest": "e22ef95a59a6d048dd0a713629ff3cdc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12593, "upload_time": "2010-03-16T10:23:15", "upload_time_iso_8601": "2010-03-16T10:23:15.388635Z", "url": "https://files.pythonhosted.org/packages/31/1a/1e8732c934e7fd2e1ffefeb1d7ad53bd49f0b6fbb441998a64bfe1ee37a8/lineage.index-0.1b1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ab8fa19c2aff986842174c8590b45ee4", "sha256": "01ad4276eabedf757868236d21cfe9cef396ee188af66675923952abf7989ef6"}, "downloads": -1, "filename": "lineage.index-0.2.zip", "has_sig": false, "md5_digest": "ab8fa19c2aff986842174c8590b45ee4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20646, "upload_time": "2011-04-28T20:00:55", "upload_time_iso_8601": "2011-04-28T20:00:55.761503Z", "url": "https://files.pythonhosted.org/packages/33/d7/67801cf21aee64cb4165be143107981dd21cd843e47734b4ae710829fdec/lineage.index-0.2.zip", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "914e9fec033b626c7afb977af480184c", "sha256": "d12a964742cf351e308e420d16f10e3635165da544de0d4c268c8404ba8df403"}, "downloads": -1, "filename": "lineage.index-0.3.zip", "has_sig": false, "md5_digest": "914e9fec033b626c7afb977af480184c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19786, "upload_time": "2012-01-09T03:38:13", "upload_time_iso_8601": "2012-01-09T03:38:13.352011Z", "url": "https://files.pythonhosted.org/packages/63/64/00cc824de6d5ddddb839c5f441939955a577844d5e95f79bc5256cfcd79c/lineage.index-0.3.zip", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "748cbb58bb5d820488d3cf15fce3daf9", "sha256": "84ff939084084f94b7b967ae95cceb701340878461db6dfb07de31ebb8f1a3b8"}, "downloads": -1, "filename": "lineage.index-0.4.zip", "has_sig": false, "md5_digest": "748cbb58bb5d820488d3cf15fce3daf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20116, "upload_time": "2012-01-11T00:19:09", "upload_time_iso_8601": "2012-01-11T00:19:09.094479Z", "url": "https://files.pythonhosted.org/packages/69/a2/b813d909ecf54430a5a0797ee755cc024d0213325fd4b24c7d3f7234e189/lineage.index-0.4.zip", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "f5ddc4eb36b7e3cc0217d45eeb06a4f8", "sha256": "1da5324b80d3174bcd765cd8a5cbf7e0d252c5ac44de866cc5f11024efd2b059"}, "downloads": -1, "filename": "lineage.index-0.5.tar.gz", "has_sig": false, "md5_digest": "f5ddc4eb36b7e3cc0217d45eeb06a4f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13371, "upload_time": "2015-06-25T14:45:48", "upload_time_iso_8601": "2015-06-25T14:45:48.803188Z", "url": "https://files.pythonhosted.org/packages/0c/c1/9adb1299d7bad5a57910c0f5db39eececb26ef20b2acceb4ef79246dcb15/lineage.index-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5ddc4eb36b7e3cc0217d45eeb06a4f8", "sha256": "1da5324b80d3174bcd765cd8a5cbf7e0d252c5ac44de866cc5f11024efd2b059"}, "downloads": -1, "filename": "lineage.index-0.5.tar.gz", "has_sig": false, "md5_digest": "f5ddc4eb36b7e3cc0217d45eeb06a4f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13371, "upload_time": "2015-06-25T14:45:48", "upload_time_iso_8601": "2015-06-25T14:45:48.803188Z", "url": "https://files.pythonhosted.org/packages/0c/c1/9adb1299d7bad5a57910c0f5db39eececb26ef20b2acceb4ef79246dcb15/lineage.index-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:48 2020"}