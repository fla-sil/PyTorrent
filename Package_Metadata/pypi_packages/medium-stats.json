{"info": {"author": "Oliver Tosky", "author_email": "olivertosky@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Medium Stats Scraper\n\nA command-line tool and Python package to fetch your Medium profile statistics \nand save the data as JSON.\n\n*Executes the same API and Graphql requests as the Medium front-end does, providing \nyou with the data as it is, pre-rendered.*\n\n## Install\n\n```bash\n$ pip install medium-stats\n```\n\n## Setup\n\n### Step 1\n\nTo make authenticated requests to Medium for your stats, the CLI tool \nneeds **two** cookies from a signed-in Medium session - \"sid\" and \"uid\".\n\n*If you want to manually find and store your cookies:*\n\n- Sign in to Medium\n- Get to your browser's developer tools and find the tab that holds cookies:\n  - *Application* for Chrome \n  - *Storage* for Firefox\n- Scroll through the cookies for medium.com until you find 'sid' and 'uid'\n\n\n![](readme_extras/cookie_howto.gif)\n\nCreate a `.medium_creds.ini` file to hold these cookie values:\n\n```bash\ncat > path_to_directory/.medium_creds.ini << EOF\n[your_medium_handle_here]\nsid=insert_sid_value_here\nuid=insert_uid_value_here\nEOF\n\n#Note: the default behavior of the package will search your home directory for \n#this file, but you are welcome to set it to whatever directory you like and \n#pass that path as an argument to the CLI tool.\n\n#Note: your Medium \"handle\" is your Medium username without the \"@\" prefix,\n#e.g. \"olivertosky\" from https://medium.com/@olivertosky\n```\n\n***\n\n*If you want to automatically find and store your cookies:*\n\n```bash\n$ pip install medium-stats[selenium]\n```\n\nThis installs some extra dependencies allowing a webscraper to authenticate to Medium\non your behalf and grab your \"sid\" and \"uid\" cookies.  *Note: You must already have \nChrome installed.*\n\nCurrently only valid for Gmail OAuth:\n\n```bash\n$ medium-stats fetch_cookies -u [HANDLE] --email [EMAIL] --pwd [PASSWORD]\n\n# Or specify that your password should be pulled from an environment variable:\n$ export MEDIUM_AUTH_PWD='[PASSWORD]'\n$ medium-stats fetch_cookies -u [HANDLE] --email [EMAIL] --pwd-in-env\n```\n\n### Step 2 - *Optional*:\n\nCreate a directory for your stats exports; the CLI tool will run \nunder the working directory by default.\n\n```bash\n$ mkdir path_to_target_stats_directory\n```\n\nOnce executed the CLI tool will create the following directory structure:\n```\ntarget_stats_directory/\n    stats_exports/\n        [HANDLE]/\n            agg_stats/ \n            agg_events/ \n            post_events/\n            post_referrers/\n```\n\n## Usage\n### Command-Line\n\nSimple Use: \n\n```bash\n$ medium-stats scrape_user -u [USERNAME] --all\n```\n\n> This will get all Medium stats for a user until now. \n\n\nFor a publication:\n```bash\n$ medium-stats scrape_publication -u [USERNAME] -s [SLUG] --all\n\n# The \"slug\" parameter is typically your publication's name in lower-case,\n# with spaces delimited by dashes, and is the portion of your page's URL after \"medium.com/\"\n# e.g. \"test-publication\" if the URL is https://medium.com/test-publication and name is \"Test Publication\"\n\n```\n\nGeneral Use pattern:\n```bash\nmedium-stats (scrape_user | scrape_publication) -u USERNAME/URL -s [PUBLICATION_SLUG]\n[--output_dir DIR] (--creds PATH | (--sid SID --uid UID)) \\\n(--all | [--start PERIOD_START] [--end PERIOD END]) [--is-utc] \\\n[--mode {summary, events, articles, referrers, story_overview}]\n```\nFLAGS:\n\n| flag         |                      function                     |                        default |\n|--------------|:-------------------------------------------------:|---------------------------------------------:|\n| --all        | gets all stats until now |                        |\n| --end        |    end of period for stats fetched [exclusive]    | now (UTC) |\n| --start      | beginning of period for stats fetched [inclusive] | --end minus 1 day @midnight |\n| --is-utc     | whether start/stop are already in UTC time        | False |\n| --output-dir |          directory to hold stats exports          | current working directory |\n| --creds      |              path to credentials file             | ~/.medium_stats.ini |\n| --sid        |          your Medium session id from cookie       |\n| --uid        |          your Medium user id from cookie          |\n| --mode       |       limits retrieval to particular statistics   | ['summary', 'events', 'articles', 'referrers'] for scrape_user|\n|              |                  | ['events', 'story_overview', 'articles', 'referrers'] for scrape_publication\n\n### Python\n\nBasic Usage:\n```python\n#### SETUP ####\nfrom datetime import datetime\n\nstart = datetime(year=2020, month=1, day=1)\nstop = datetime(year=2020, month=4, day=1)\n```\n\n```python\n#### FOR A USER ####\nfrom medium_stats.scraper import StatGrabberUser\n\n# get aggregated summary statistics; note: start/stop will be converted to UTC\nme = StatGrabberUser('username', sid='sid', uid='uid', start=start, stop=stop)\ndata = me.get_summary_stats()\n\n# get the unattributed event logs for all your stories:\ndata_events = me.get_summary_stats(events=True)\n\n# get individual article statistics\narticles = me.get_article_ids(data) # returns a list of article_ids\n\narticle_events = me.get_all_story_stats(articles) # daily event logs\nreferrers = me.get_all_story_stats(articles, type_='referrer') # all-time referral sources\n```\n\n```python\n#### FOR A PUBLICATION ####\nfrom medium_stats.scraper import StatGrabberPublication\n\n# first argument should be your publication slug, i.e. what follows the URL after \"medium.com/\"\npub = StatGrabberPublication('test-publication', 'sid', 'uid', start, stop)\n\n# get publication views & visitors (like the stats landing page)\nviews = pub.get_events(type_='views')\nvisitors = pub.get_events(type_='visitors')\n\n# get summary stats for all publication articles\nstory_stats = pub.get_all_story_overview()\n\n# get individual article statistics\narticles = pub.get_article_ids(story_stats)\n\narticle_events = pub.get_all_story_stats(articles)\nreferrers = pub.get_all_story_stats(articles, type_='referrer')\n\n# Note: if you want to specify naive-UTC datetimes, set already_utc=True in the class instantiation to\n# avoid offset being applied.  Better practice is to just input tz-aware datetimes to \"start\" & \"stop\"\n# params in the first place...\n```\n\nNote: \"summary_stats\" and \"referrer\" data pre-aggregates to your full history, \ni.e. they don't take into account \"start\" & \"stop\" parameters.\n\n#### Example output:\n`data` (summary):\n```\n[   {   'claps': 3,\n        'collectionId': '',\n        'createdAt': 1570229100438,\n        'creatorId': 'UID',\n        'firstPublishedAt': 1583526956495,\n        'friendsLinkViews': 46,\n        'internalReferrerViews': 17,\n        'isSeries': False,\n        'postId': 'ARTICLE_ID',\n        'previewImage': {   'id': 'longstring.png',\n                            'isFeatured': True,\n                            'originalHeight': 311,\n                            'originalWidth': 627},\n        'readingTime': 7,\n        'reads': 67,\n        'slug': 'this-will-be-a-title',\n        'syndicatedViews': 0,\n        'title': 'This Will Be A Title',\n        'type': 'PostStat',\n        'updateNotificationSubscribers': 0,\n        'upvotes': 3,\n        'views': 394,\n        'visibility': 0},\n        ...\n```\n\n`data_events`:\n```\n[{  'claps': 0,\n    'flaggedSpam': 0,\n    'reads': 0,\n    'timestampMs': 1585695600000,\n    'updateNotificationSubscribers': 0,\n    'upvotes': 0,\n    'userId': 'UID',\n    'views': 1},\n        ...\n```\n\n`article_events`:\n```\n{'data': {\n    'post': [{\n        '__typename': 'Post',\n        'dailyStats': [\n            {   '__typename': 'DailyPostStat',\n                'internalReferrerViews': 1,\n                'memberTtr': 119,\n                'periodStartedAt': 1583452800000,\n                'views': 8},\n            ... \n            {   '__typename': 'DailyPostStat',\n                'internalReferrerViews': 5,\n                'memberTtr': 375,\n                'periodStartedAt': 1583539200000,\n                'views': 40}],\n        'earnings': {\n            '__typename': 'PostEarnings',\n            'dailyEarnings': [],\n            'lastCommittedPeriodStartedAt': 1585526400000},\n        'id': 'ARTICLE_ID'},\n        ...\n    ]}\n}\n```\n\n`referrers`:\n```\n{'data': {'post': [{'__typename': 'Post',\n                    'id': 'POST_ID',\n                    'referrers': [{'__typename': 'Referrer',\n                                   'internal': None,\n                                   'platform': None,\n                                   'postId': 'POST_ID',\n                                   'search': None,\n                                   'site': None,\n                                   'sourceIdentifier': 'direct',\n                                   'totalCount': 222,\n                                   'type': 'DIRECT'},\n                                  ...\n                                  {'__typename': 'Referrer',\n                                   'internal': None,\n                                   'platform': None,\n                                   'postId': 'POST_ID',\n                                   'search': None,\n                                   'site': {'__typename': 'SiteReferrer',\n                                            'href': 'https://www.inoreader.com/',\n                                            'title': None},\n                                   'sourceIdentifier': 'inoreader.com',\n                                   'totalCount': 1,\n                                   'type': 'SITE'}],\n                    'title': 'TITLE_HERE',\n                    'totalStats': {'__typename': 'SummaryPostStat',\n                                   'views': 395}},\n                    ...\n                   ]\n            }\n}\n```\n\n> If you set up your credentials file already, there is a helper class `MediumConfigHelper`,\nthat wraps the standard `configparser`:\n```python\nimport os\nfrom medium_stats.cli import MediumConfigHelper\n\ndefault_creds = os.path.join(os.path.expanduser('~'), '.medium_creds.ini')\n\ncookies = MediumConfigHelper(config_path=default_creds, account_name='your_handle')\nsid = cookies.sid\nuid = cookies.uid\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/otosky/medium_stats", "keywords": "Medium blog scraper analytics", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "medium-stats", "package_url": "https://pypi.org/project/medium-stats/", "platform": "", "project_url": "https://pypi.org/project/medium-stats/", "project_urls": {"Homepage": "https://github.com/otosky/medium_stats"}, "release_url": "https://pypi.org/project/medium-stats/2.1.2/", "requires_dist": ["requests", "lxml", "selenium ; extra == 'selenium'", "webdriver-manager ; extra == 'selenium'"], "requires_python": ">=3.6", "summary": "CLI tool to fetch your Medium stats", "version": "2.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Medium Stats Scraper</h1>\n<p>A command-line tool and Python package to fetch your Medium profile statistics\nand save the data as JSON.</p>\n<p><em>Executes the same API and Graphql requests as the Medium front-end does, providing\nyou with the data as it is, pre-rendered.</em></p>\n<h2>Install</h2>\n<pre>$ pip install medium-stats\n</pre>\n<h2>Setup</h2>\n<h3>Step 1</h3>\n<p>To make authenticated requests to Medium for your stats, the CLI tool\nneeds <strong>two</strong> cookies from a signed-in Medium session - \"sid\" and \"uid\".</p>\n<p><em>If you want to manually find and store your cookies:</em></p>\n<ul>\n<li>Sign in to Medium</li>\n<li>Get to your browser's developer tools and find the tab that holds cookies:\n<ul>\n<li><em>Application</em> for Chrome</li>\n<li><em>Storage</em> for Firefox</li>\n</ul>\n</li>\n<li>Scroll through the cookies for medium.com until you find 'sid' and 'uid'</li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d78b51e89e6dffc45a1d15292dbf33d7f71b903e/726561646d655f6578747261732f636f6f6b69655f686f77746f2e676966\"></p>\n<p>Create a <code>.medium_creds.ini</code> file to hold these cookie values:</p>\n<pre>cat &gt; path_to_directory/.medium_creds.ini <span class=\"s\">&lt;&lt; EOF</span>\n<span class=\"s\">[your_medium_handle_here]</span>\n<span class=\"s\">sid=insert_sid_value_here</span>\n<span class=\"s\">uid=insert_uid_value_here</span>\n<span class=\"s\">EOF</span>\n\n<span class=\"c1\">#Note: the default behavior of the package will search your home directory for </span>\n<span class=\"c1\">#this file, but you are welcome to set it to whatever directory you like and </span>\n<span class=\"c1\">#pass that path as an argument to the CLI tool.</span>\n\n<span class=\"c1\">#Note: your Medium \"handle\" is your Medium username without the \"@\" prefix,</span>\n<span class=\"c1\">#e.g. \"olivertosky\" from https://medium.com/@olivertosky</span>\n</pre>\n<hr>\n<p><em>If you want to automatically find and store your cookies:</em></p>\n<pre>$ pip install medium-stats<span class=\"o\">[</span>selenium<span class=\"o\">]</span>\n</pre>\n<p>This installs some extra dependencies allowing a webscraper to authenticate to Medium\non your behalf and grab your \"sid\" and \"uid\" cookies.  <em>Note: You must already have\nChrome installed.</em></p>\n<p>Currently only valid for Gmail OAuth:</p>\n<pre>$ medium-stats fetch_cookies -u <span class=\"o\">[</span>HANDLE<span class=\"o\">]</span> --email <span class=\"o\">[</span>EMAIL<span class=\"o\">]</span> --pwd <span class=\"o\">[</span>PASSWORD<span class=\"o\">]</span>\n\n<span class=\"c1\"># Or specify that your password should be pulled from an environment variable:</span>\n$ <span class=\"nb\">export</span> <span class=\"nv\">MEDIUM_AUTH_PWD</span><span class=\"o\">=</span><span class=\"s1\">'[PASSWORD]'</span>\n$ medium-stats fetch_cookies -u <span class=\"o\">[</span>HANDLE<span class=\"o\">]</span> --email <span class=\"o\">[</span>EMAIL<span class=\"o\">]</span> --pwd-in-env\n</pre>\n<h3>Step 2 - <em>Optional</em>:</h3>\n<p>Create a directory for your stats exports; the CLI tool will run\nunder the working directory by default.</p>\n<pre>$ mkdir path_to_target_stats_directory\n</pre>\n<p>Once executed the CLI tool will create the following directory structure:</p>\n<pre><code>target_stats_directory/\n    stats_exports/\n        [HANDLE]/\n            agg_stats/ \n            agg_events/ \n            post_events/\n            post_referrers/\n</code></pre>\n<h2>Usage</h2>\n<h3>Command-Line</h3>\n<p>Simple Use:</p>\n<pre>$ medium-stats scrape_user -u <span class=\"o\">[</span>USERNAME<span class=\"o\">]</span> --all\n</pre>\n<blockquote>\n<p>This will get all Medium stats for a user until now.</p>\n</blockquote>\n<p>For a publication:</p>\n<pre>$ medium-stats scrape_publication -u <span class=\"o\">[</span>USERNAME<span class=\"o\">]</span> -s <span class=\"o\">[</span>SLUG<span class=\"o\">]</span> --all\n\n<span class=\"c1\"># The \"slug\" parameter is typically your publication's name in lower-case,</span>\n<span class=\"c1\"># with spaces delimited by dashes, and is the portion of your page's URL after \"medium.com/\"</span>\n<span class=\"c1\"># e.g. \"test-publication\" if the URL is https://medium.com/test-publication and name is \"Test Publication\"</span>\n</pre>\n<p>General Use pattern:</p>\n<pre>medium-stats <span class=\"o\">(</span>scrape_user <span class=\"p\">|</span> scrape_publication<span class=\"o\">)</span> -u USERNAME/URL -s <span class=\"o\">[</span>PUBLICATION_SLUG<span class=\"o\">]</span>\n<span class=\"o\">[</span>--output_dir DIR<span class=\"o\">]</span> <span class=\"o\">(</span>--creds PATH <span class=\"p\">|</span> <span class=\"o\">(</span>--sid SID --uid UID<span class=\"o\">))</span> <span class=\"se\">\\</span>\n<span class=\"o\">(</span>--all <span class=\"p\">|</span> <span class=\"o\">[</span>--start PERIOD_START<span class=\"o\">]</span> <span class=\"o\">[</span>--end PERIOD END<span class=\"o\">])</span> <span class=\"o\">[</span>--is-utc<span class=\"o\">]</span> <span class=\"se\">\\</span>\n<span class=\"o\">[</span>--mode <span class=\"o\">{</span>summary, events, articles, referrers, story_overview<span class=\"o\">}]</span>\n</pre>\n<p>FLAGS:</p>\n<table>\n<thead>\n<tr>\n<th>flag</th>\n<th align=\"center\">function</th>\n<th align=\"right\">default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--all</td>\n<td align=\"center\">gets all stats until now</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>--end</td>\n<td align=\"center\">end of period for stats fetched [exclusive]</td>\n<td align=\"right\">now (UTC)</td>\n</tr>\n<tr>\n<td>--start</td>\n<td align=\"center\">beginning of period for stats fetched [inclusive]</td>\n<td align=\"right\">--end minus 1 day @midnight</td>\n</tr>\n<tr>\n<td>--is-utc</td>\n<td align=\"center\">whether start/stop are already in UTC time</td>\n<td align=\"right\">False</td>\n</tr>\n<tr>\n<td>--output-dir</td>\n<td align=\"center\">directory to hold stats exports</td>\n<td align=\"right\">current working directory</td>\n</tr>\n<tr>\n<td>--creds</td>\n<td align=\"center\">path to credentials file</td>\n<td align=\"right\">~/.medium_stats.ini</td>\n</tr>\n<tr>\n<td>--sid</td>\n<td align=\"center\">your Medium session id from cookie</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>--uid</td>\n<td align=\"center\">your Medium user id from cookie</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>--mode</td>\n<td align=\"center\">limits retrieval to particular statistics</td>\n<td align=\"right\">['summary', 'events', 'articles', 'referrers'] for scrape_user</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"center\"></td>\n<td align=\"right\">['events', 'story_overview', 'articles', 'referrers'] for scrape_publication</td>\n</tr></tbody></table>\n<h3>Python</h3>\n<p>Basic Usage:</p>\n<pre><span class=\"c1\">#### SETUP ####</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"c1\">#### FOR A USER ####</span>\n<span class=\"kn\">from</span> <span class=\"nn\">medium_stats.scraper</span> <span class=\"kn\">import</span> <span class=\"n\">StatGrabberUser</span>\n\n<span class=\"c1\"># get aggregated summary statistics; note: start/stop will be converted to UTC</span>\n<span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">StatGrabberUser</span><span class=\"p\">(</span><span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"n\">sid</span><span class=\"o\">=</span><span class=\"s1\">'sid'</span><span class=\"p\">,</span> <span class=\"n\">uid</span><span class=\"o\">=</span><span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">=</span><span class=\"n\">stop</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">get_summary_stats</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get the unattributed event logs for all your stories:</span>\n<span class=\"n\">data_events</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">get_summary_stats</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get individual article statistics</span>\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">get_article_ids</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"c1\"># returns a list of article_ids</span>\n\n<span class=\"n\">article_events</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">get_all_story_stats</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">)</span> <span class=\"c1\"># daily event logs</span>\n<span class=\"n\">referrers</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">get_all_story_stats</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">'referrer'</span><span class=\"p\">)</span> <span class=\"c1\"># all-time referral sources</span>\n</pre>\n<pre><span class=\"c1\">#### FOR A PUBLICATION ####</span>\n<span class=\"kn\">from</span> <span class=\"nn\">medium_stats.scraper</span> <span class=\"kn\">import</span> <span class=\"n\">StatGrabberPublication</span>\n\n<span class=\"c1\"># first argument should be your publication slug, i.e. what follows the URL after \"medium.com/\"</span>\n<span class=\"n\">pub</span> <span class=\"o\">=</span> <span class=\"n\">StatGrabberPublication</span><span class=\"p\">(</span><span class=\"s1\">'test-publication'</span><span class=\"p\">,</span> <span class=\"s1\">'sid'</span><span class=\"p\">,</span> <span class=\"s1\">'uid'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get publication views &amp; visitors (like the stats landing page)</span>\n<span class=\"n\">views</span> <span class=\"o\">=</span> <span class=\"n\">pub</span><span class=\"o\">.</span><span class=\"n\">get_events</span><span class=\"p\">(</span><span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">'views'</span><span class=\"p\">)</span>\n<span class=\"n\">visitors</span> <span class=\"o\">=</span> <span class=\"n\">pub</span><span class=\"o\">.</span><span class=\"n\">get_events</span><span class=\"p\">(</span><span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">'visitors'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get summary stats for all publication articles</span>\n<span class=\"n\">story_stats</span> <span class=\"o\">=</span> <span class=\"n\">pub</span><span class=\"o\">.</span><span class=\"n\">get_all_story_overview</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># get individual article statistics</span>\n<span class=\"n\">articles</span> <span class=\"o\">=</span> <span class=\"n\">pub</span><span class=\"o\">.</span><span class=\"n\">get_article_ids</span><span class=\"p\">(</span><span class=\"n\">story_stats</span><span class=\"p\">)</span>\n\n<span class=\"n\">article_events</span> <span class=\"o\">=</span> <span class=\"n\">pub</span><span class=\"o\">.</span><span class=\"n\">get_all_story_stats</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">)</span>\n<span class=\"n\">referrers</span> <span class=\"o\">=</span> <span class=\"n\">pub</span><span class=\"o\">.</span><span class=\"n\">get_all_story_stats</span><span class=\"p\">(</span><span class=\"n\">articles</span><span class=\"p\">,</span> <span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"s1\">'referrer'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Note: if you want to specify naive-UTC datetimes, set already_utc=True in the class instantiation to</span>\n<span class=\"c1\"># avoid offset being applied.  Better practice is to just input tz-aware datetimes to \"start\" &amp; \"stop\"</span>\n<span class=\"c1\"># params in the first place...</span>\n</pre>\n<p>Note: \"summary_stats\" and \"referrer\" data pre-aggregates to your full history,\ni.e. they don't take into account \"start\" &amp; \"stop\" parameters.</p>\n<h4>Example output:</h4>\n<p><code>data</code> (summary):</p>\n<pre><code>[   {   'claps': 3,\n        'collectionId': '',\n        'createdAt': 1570229100438,\n        'creatorId': 'UID',\n        'firstPublishedAt': 1583526956495,\n        'friendsLinkViews': 46,\n        'internalReferrerViews': 17,\n        'isSeries': False,\n        'postId': 'ARTICLE_ID',\n        'previewImage': {   'id': 'longstring.png',\n                            'isFeatured': True,\n                            'originalHeight': 311,\n                            'originalWidth': 627},\n        'readingTime': 7,\n        'reads': 67,\n        'slug': 'this-will-be-a-title',\n        'syndicatedViews': 0,\n        'title': 'This Will Be A Title',\n        'type': 'PostStat',\n        'updateNotificationSubscribers': 0,\n        'upvotes': 3,\n        'views': 394,\n        'visibility': 0},\n        ...\n</code></pre>\n<p><code>data_events</code>:</p>\n<pre><code>[{  'claps': 0,\n    'flaggedSpam': 0,\n    'reads': 0,\n    'timestampMs': 1585695600000,\n    'updateNotificationSubscribers': 0,\n    'upvotes': 0,\n    'userId': 'UID',\n    'views': 1},\n        ...\n</code></pre>\n<p><code>article_events</code>:</p>\n<pre><code>{'data': {\n    'post': [{\n        '__typename': 'Post',\n        'dailyStats': [\n            {   '__typename': 'DailyPostStat',\n                'internalReferrerViews': 1,\n                'memberTtr': 119,\n                'periodStartedAt': 1583452800000,\n                'views': 8},\n            ... \n            {   '__typename': 'DailyPostStat',\n                'internalReferrerViews': 5,\n                'memberTtr': 375,\n                'periodStartedAt': 1583539200000,\n                'views': 40}],\n        'earnings': {\n            '__typename': 'PostEarnings',\n            'dailyEarnings': [],\n            'lastCommittedPeriodStartedAt': 1585526400000},\n        'id': 'ARTICLE_ID'},\n        ...\n    ]}\n}\n</code></pre>\n<p><code>referrers</code>:</p>\n<pre><code>{'data': {'post': [{'__typename': 'Post',\n                    'id': 'POST_ID',\n                    'referrers': [{'__typename': 'Referrer',\n                                   'internal': None,\n                                   'platform': None,\n                                   'postId': 'POST_ID',\n                                   'search': None,\n                                   'site': None,\n                                   'sourceIdentifier': 'direct',\n                                   'totalCount': 222,\n                                   'type': 'DIRECT'},\n                                  ...\n                                  {'__typename': 'Referrer',\n                                   'internal': None,\n                                   'platform': None,\n                                   'postId': 'POST_ID',\n                                   'search': None,\n                                   'site': {'__typename': 'SiteReferrer',\n                                            'href': 'https://www.inoreader.com/',\n                                            'title': None},\n                                   'sourceIdentifier': 'inoreader.com',\n                                   'totalCount': 1,\n                                   'type': 'SITE'}],\n                    'title': 'TITLE_HERE',\n                    'totalStats': {'__typename': 'SummaryPostStat',\n                                   'views': 395}},\n                    ...\n                   ]\n            }\n}\n</code></pre>\n<blockquote>\n<p>If you set up your credentials file already, there is a helper class <code>MediumConfigHelper</code>,\nthat wraps the standard <code>configparser</code>:</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">medium_stats.cli</span> <span class=\"kn\">import</span> <span class=\"n\">MediumConfigHelper</span>\n\n<span class=\"n\">default_creds</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">'~'</span><span class=\"p\">),</span> <span class=\"s1\">'.medium_creds.ini'</span><span class=\"p\">)</span>\n\n<span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">MediumConfigHelper</span><span class=\"p\">(</span><span class=\"n\">config_path</span><span class=\"o\">=</span><span class=\"n\">default_creds</span><span class=\"p\">,</span> <span class=\"n\">account_name</span><span class=\"o\">=</span><span class=\"s1\">'your_handle'</span><span class=\"p\">)</span>\n<span class=\"n\">sid</span> <span class=\"o\">=</span> <span class=\"n\">cookies</span><span class=\"o\">.</span><span class=\"n\">sid</span>\n<span class=\"n\">uid</span> <span class=\"o\">=</span> <span class=\"n\">cookies</span><span class=\"o\">.</span><span class=\"n\">uid</span>\n</pre>\n\n          </div>"}, "last_serial": 6995003, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "592fa55b8cc47b5d4eec4c92bf023a57", "sha256": "fede213ec9143162c4e2bc7428ad278f8fd41d84067c47329f1e07549b5ae779"}, "downloads": -1, "filename": "medium_stats-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "592fa55b8cc47b5d4eec4c92bf023a57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24864, "upload_time": "2020-04-01T18:30:23", "upload_time_iso_8601": "2020-04-01T18:30:23.723126Z", "url": "https://files.pythonhosted.org/packages/1e/59/be9bcb73008f1aff1f176efc15ea6c8a3ccddf5edf716236fa94a5a2ec8a/medium_stats-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ad09d0f4b9930332c0b7140235b3731", "sha256": "f5df57f73c6515fb2c64515bc4a31f8cf3282cc92a212d643a22216805c8181a"}, "downloads": -1, "filename": "medium-stats-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2ad09d0f4b9930332c0b7140235b3731", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25940, "upload_time": "2020-04-01T18:30:26", "upload_time_iso_8601": "2020-04-01T18:30:26.454545Z", "url": "https://files.pythonhosted.org/packages/e5/d6/d225313e409de14302ccc9ce1fce50ff382b6c791383f4ffc8324b7090dc/medium-stats-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "52214f68d7e0f76ac08bac195d696258", "sha256": "9610b4b3bc307040ef204be01027d6565796a5f24a48a2e8a7f52d71d9e5220e"}, "downloads": -1, "filename": "medium_stats-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "52214f68d7e0f76ac08bac195d696258", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24854, "upload_time": "2020-04-01T18:46:43", "upload_time_iso_8601": "2020-04-01T18:46:43.558562Z", "url": "https://files.pythonhosted.org/packages/af/03/fa6e787c390eacf7160a15bc9d34444d08094879b655e3faf2cc013220a5/medium_stats-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65074e45f55ff39747d583dc2d94d248", "sha256": "60db4ba63173d7e4da3bb930d9da407aedccae201e6b85ddeffdabbd56cae9b7"}, "downloads": -1, "filename": "medium-stats-1.0.1.tar.gz", "has_sig": false, "md5_digest": "65074e45f55ff39747d583dc2d94d248", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25918, "upload_time": "2020-04-01T18:46:44", "upload_time_iso_8601": "2020-04-01T18:46:44.721619Z", "url": "https://files.pythonhosted.org/packages/e1/df/52ca2c52552b44b289a92ef948fae33b6b638a848a443899611d99fc90cb/medium-stats-1.0.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "6545c361463b09c2506942da94d06bfb", "sha256": "94d152a515f7a078a6c183ff744d75ec7423a3ff8137c99dc4a5588bd7f646fd"}, "downloads": -1, "filename": "medium_stats-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6545c361463b09c2506942da94d06bfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27348, "upload_time": "2020-04-08T23:46:37", "upload_time_iso_8601": "2020-04-08T23:46:37.817787Z", "url": "https://files.pythonhosted.org/packages/4e/ab/eb111f41ea44ab3a84450bd79b4d8c74d42777f69c4723ec94c36bd4542f/medium_stats-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "889976f941bf8e423bc136d582deea84", "sha256": "1e51269067d94885e12b4855624edad12acf82a4439125727ef762dae76dbd9b"}, "downloads": -1, "filename": "medium-stats-2.0.0.tar.gz", "has_sig": false, "md5_digest": "889976f941bf8e423bc136d582deea84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28936, "upload_time": "2020-04-08T23:46:40", "upload_time_iso_8601": "2020-04-08T23:46:40.128339Z", "url": "https://files.pythonhosted.org/packages/f0/65/2262fdb0562c9244106467630aa87ceb56ddd773fefd5ab94b0a9525146c/medium-stats-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "dec005221916859bcaeb71083835eaa0", "sha256": "de3711bf279cd06b443acf4880adf187afb86b474072c9e85ae261fbce169c46"}, "downloads": -1, "filename": "medium_stats-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dec005221916859bcaeb71083835eaa0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27359, "upload_time": "2020-04-09T17:49:07", "upload_time_iso_8601": "2020-04-09T17:49:07.778779Z", "url": "https://files.pythonhosted.org/packages/04/62/ce997e5833aea930528d808a25b46340e3653a49b305dd313b5722ae8615/medium_stats-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74ef32c0cd8eab41f9d4b052f39d074c", "sha256": "d46435643bd9c811246f436d296d616e25f4542942072af07417fccac07b687a"}, "downloads": -1, "filename": "medium-stats-2.1.0.tar.gz", "has_sig": false, "md5_digest": "74ef32c0cd8eab41f9d4b052f39d074c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 28977, "upload_time": "2020-04-09T17:49:11", "upload_time_iso_8601": "2020-04-09T17:49:11.216954Z", "url": "https://files.pythonhosted.org/packages/4e/66/dbe3b43477a513ccaa3e7acd77122237ae873633df8aff4786a09cb4efb4/medium-stats-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "3f26391e61c694c7fd494e176faebeb3", "sha256": "9cf3ef012ac0df094c289ba6a0c41cc4f045214f66616f2adaae8197623cb4dc"}, "downloads": -1, "filename": "medium_stats-2.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3f26391e61c694c7fd494e176faebeb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27514, "upload_time": "2020-04-10T16:50:25", "upload_time_iso_8601": "2020-04-10T16:50:25.770606Z", "url": "https://files.pythonhosted.org/packages/8e/ed/c92fccf6233ebb91825d935cdaef3cacf6b4d48830e5d39b693194b11a6f/medium_stats-2.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b902e3165c767a5e61c3018d85036c83", "sha256": "785d457a22d40ffb88003d008d45d909d2c864ca7f9e9a22bfbd2263b3a26b4c"}, "downloads": -1, "filename": "medium-stats-2.1.1.tar.gz", "has_sig": false, "md5_digest": "b902e3165c767a5e61c3018d85036c83", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29195, "upload_time": "2020-04-10T16:50:28", "upload_time_iso_8601": "2020-04-10T16:50:28.154903Z", "url": "https://files.pythonhosted.org/packages/df/d7/1eb368f9be90eb88a58cb3833defcef60b5bc7857a12ec4d09fc3ce4a53a/medium-stats-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "096e8e6777f163475b7745f464055380", "sha256": "5eabc3b85efb4695b40a9260202dc9da2b381550a8c14ebf5dfe125b09eb9a09"}, "downloads": -1, "filename": "medium_stats-2.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "096e8e6777f163475b7745f464055380", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27548, "upload_time": "2020-04-10T17:14:37", "upload_time_iso_8601": "2020-04-10T17:14:37.407865Z", "url": "https://files.pythonhosted.org/packages/ae/71/18c18deff01af57427ced6865e895d40ff5cd178e84b63c73e69ee4ebe56/medium_stats-2.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "318f17c4663dcbea7fa6dfeb26c76f32", "sha256": "bc37f2fbe7d78108f7fec1d215a60bb658156620eba7f5bdc24a47efb31b86ad"}, "downloads": -1, "filename": "medium-stats-2.1.2.tar.gz", "has_sig": false, "md5_digest": "318f17c4663dcbea7fa6dfeb26c76f32", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29192, "upload_time": "2020-04-10T17:14:39", "upload_time_iso_8601": "2020-04-10T17:14:39.740182Z", "url": "https://files.pythonhosted.org/packages/ca/3c/f251d7b4ab39740a8888faf28588efe62235d5916ecf2ef9eda634b1a70f/medium-stats-2.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "096e8e6777f163475b7745f464055380", "sha256": "5eabc3b85efb4695b40a9260202dc9da2b381550a8c14ebf5dfe125b09eb9a09"}, "downloads": -1, "filename": "medium_stats-2.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "096e8e6777f163475b7745f464055380", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27548, "upload_time": "2020-04-10T17:14:37", "upload_time_iso_8601": "2020-04-10T17:14:37.407865Z", "url": "https://files.pythonhosted.org/packages/ae/71/18c18deff01af57427ced6865e895d40ff5cd178e84b63c73e69ee4ebe56/medium_stats-2.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "318f17c4663dcbea7fa6dfeb26c76f32", "sha256": "bc37f2fbe7d78108f7fec1d215a60bb658156620eba7f5bdc24a47efb31b86ad"}, "downloads": -1, "filename": "medium-stats-2.1.2.tar.gz", "has_sig": false, "md5_digest": "318f17c4663dcbea7fa6dfeb26c76f32", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 29192, "upload_time": "2020-04-10T17:14:39", "upload_time_iso_8601": "2020-04-10T17:14:39.740182Z", "url": "https://files.pythonhosted.org/packages/ca/3c/f251d7b4ab39740a8888faf28588efe62235d5916ecf2ef9eda634b1a70f/medium-stats-2.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:32 2020"}