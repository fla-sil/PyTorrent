{"info": {"author": "David Edson", "author_email": "eddo888@tpg.com.au", "bugtrack_url": null, "classifiers": [], "description": "# Argumental\n\nannotation descripters to put closuer on classes and objects to allow argparse to be easy to use\n\n## Argue.py\n\nA tool to decorate a python class to create an argparse ready command line application\n\nHere is an example application\n\n```python\n#!/usr/bin/env python\n\nimport os,re,sys,json\n\nfrom Argumental.Argue import Argue\n\nargs = Argue()\n\n#====================================================================================================\n@args.function(short='v', flag=True)\ndef verbose(): return False\n\n#====================================================================================================\n@args.command(single=True)\nclass ForTheSake(object):\n\n    #________________________________________________________________________________________________\n    @args.function(flag=True)\n    def myFlag(self):\n        '''\n        this is a flag true if exists false if not\n        '''\n        return False\n\n    #________________________________________________________________________________________________\n    @args.function(choices=['a','b'])\n    def myChoice(self):\n        '''\n        select for a list of choices,\n        test if in or out of list\n        '''\n        return None\n\n    #________________________________________________________________________________________________\n    @args.function(short='n', type=int)\n    def myNumber(self):\n        '''\n        this should expect an number of type int \n        '''\n        return 0\n\n    #________________________________________________________________________________________________\n    @args.operation\n    def myMethod(self, p1, p2, p3='d3', p4='d4'):\n        '''\n        this should be called myMethod\n        and is a good example\n\n        :param p1: p1 should be expected\n        :type p1: str\n        :param p2: p2 should be expected\n        :type p2: int\n        :param p3: p3 is optional use --p3 and defaults to d3\n        :param p4: p3 is optional use --p4 and defaults to d4\n        :return: json view of all variables\n        :rtype: dict\n\n        :Example:\n\n        $ ./forTheSake.py [--] <command> <operation> <parameters> [--parameter=optional]\n\n        '''\n        return {\n            'verbose' :  verbose(),\n            'flag' :     self.myFlag(),\n            'choice' :   self.myChoice(),\n            'number' :   self.myNumber(),\n            'p1' :       p1,\n            'p2' :       p2,\n            'p3' :       p3,\n            'p4' :       p4\n        }\n        \n#====================================================================================================\nif __name__ == '__main__':\n    print json.dumps(args.execute(), indent=4)\n```\n\n\nA sample usage would look like;\n\n```bash\n$ ./ofTheEngagement.py -h\nusage: ofTheEngagement.py [-h] [--args] [-n MYNUMBER] [--myChoice {a,b}] [--myFlag] [-v]\n                          {OfTheEngagment} ...\n\npositional arguments:\n  {OfTheEngagment}\n    OfTheEngagment\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --args                show this argument tree\n  -n MYNUMBER, --myNumber MYNUMBER\n                        <type 'int'> this should expect an number of type int\n  --myChoice {a,b}      select for a list of choices, test if in or out of list\n  --myFlag              this is a flag true if exists false if not\n  -v, --verbose\n```\n\n\n```bash\n$ ./ofTheEngagement.py OfTheEngagment -h\nusage: ofTheEngagement.py OfTheEngagment [-h] {myMethod} ...\n\npositional arguments:\n  {myMethod}\n    myMethod  this should be called myMethod and is a good example\n\noptional arguments:\n  -h, --help  show this help message and exit\n\n```\n\n```bash\n$ ./ofTheEngagement.py OfTheEngagment myMethod -h\nusage: ofTheEngagement.py OfTheEngagment myMethod [-h] [--p3 P3] [--p4 P4] p1 p2\n\npositional arguments:\n  p1          <type 'str'> p1 should be expected\n  p2          <type 'int'> p2 should be expected\n\noptional arguments:\n  -h, --help  show this help message and exit\n  --p3 P3     <type 'str'> p3 is optional use --p3 and defaults to d3\n  --p4 P4     <type 'str'> p3 is optional use --p4 and defaults to d4\n```\n\n```bash\n$ ./ofTheEngagement.py -v --myFlag OfTheEngagment myMethod 1 2 --p3=3\n{\n    \"p2\": 2, \n    \"p3\": \"3\", \n    \"flag\": true, \n    \"p1\": \"1\", \n    \"verbose\": true, \n    \"p4\": \"d4\", \n    \"number\": 0, \n    \"choice\": null\n}\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/eddo888/argumental/archive/1.10.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eddo888/argumental", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Argumental", "package_url": "https://pypi.org/project/Argumental/", "platform": "", "project_url": "https://pypi.org/project/Argumental/", "project_urls": {"Download": "https://github.com/eddo888/argumental/archive/1.10.tar.gz", "Homepage": "https://github.com/eddo888/argumental"}, "release_url": "https://pypi.org/project/Argumental/1.10/", "requires_dist": null, "requires_python": "", "summary": "", "version": "1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Argumental</h1>\n<p>annotation descripters to put closuer on classes and objects to allow argparse to be easy to use</p>\n<h2>Argue.py</h2>\n<p>A tool to decorate a python class to create an argparse ready command line application</p>\n<p>Here is an example application</p>\n<pre><span class=\"ch\">#!/usr/bin/env python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"o\">,</span><span class=\"nn\">re</span><span class=\"o\">,</span><span class=\"nn\">sys</span><span class=\"o\">,</span><span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">Argumental.Argue</span> <span class=\"kn\">import</span> <span class=\"n\">Argue</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">Argue</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#====================================================================================================</span>\n<span class=\"nd\">@args</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">short</span><span class=\"o\">=</span><span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">verbose</span><span class=\"p\">():</span> <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\">#====================================================================================================</span>\n<span class=\"nd\">@args</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"n\">single</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">ForTheSake</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"c1\">#________________________________________________________________________________________________</span>\n    <span class=\"nd\">@args</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">myFlag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        this is a flag true if exists false if not</span>\n<span class=\"sd\">        '''</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"c1\">#________________________________________________________________________________________________</span>\n    <span class=\"nd\">@args</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span><span class=\"s1\">'b'</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">myChoice</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        select for a list of choices,</span>\n<span class=\"sd\">        test if in or out of list</span>\n<span class=\"sd\">        '''</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\">#________________________________________________________________________________________________</span>\n    <span class=\"nd\">@args</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">short</span><span class=\"o\">=</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">myNumber</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        this should expect an number of type int </span>\n<span class=\"sd\">        '''</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\">#________________________________________________________________________________________________</span>\n    <span class=\"nd\">@args</span><span class=\"o\">.</span><span class=\"n\">operation</span>\n    <span class=\"k\">def</span> <span class=\"nf\">myMethod</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"o\">=</span><span class=\"s1\">'d3'</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"o\">=</span><span class=\"s1\">'d4'</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        this should be called myMethod</span>\n<span class=\"sd\">        and is a good example</span>\n\n<span class=\"sd\">        :param p1: p1 should be expected</span>\n<span class=\"sd\">        :type p1: str</span>\n<span class=\"sd\">        :param p2: p2 should be expected</span>\n<span class=\"sd\">        :type p2: int</span>\n<span class=\"sd\">        :param p3: p3 is optional use --p3 and defaults to d3</span>\n<span class=\"sd\">        :param p4: p3 is optional use --p4 and defaults to d4</span>\n<span class=\"sd\">        :return: json view of all variables</span>\n<span class=\"sd\">        :rtype: dict</span>\n\n<span class=\"sd\">        :Example:</span>\n\n<span class=\"sd\">        $ ./forTheSake.py [--] &lt;command&gt; &lt;operation&gt; &lt;parameters&gt; [--parameter=optional]</span>\n\n<span class=\"sd\">        '''</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'verbose'</span> <span class=\"p\">:</span>  <span class=\"n\">verbose</span><span class=\"p\">(),</span>\n            <span class=\"s1\">'flag'</span> <span class=\"p\">:</span>     <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">myFlag</span><span class=\"p\">(),</span>\n            <span class=\"s1\">'choice'</span> <span class=\"p\">:</span>   <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">myChoice</span><span class=\"p\">(),</span>\n            <span class=\"s1\">'number'</span> <span class=\"p\">:</span>   <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">myNumber</span><span class=\"p\">(),</span>\n            <span class=\"s1\">'p1'</span> <span class=\"p\">:</span>       <span class=\"n\">p1</span><span class=\"p\">,</span>\n            <span class=\"s1\">'p2'</span> <span class=\"p\">:</span>       <span class=\"n\">p2</span><span class=\"p\">,</span>\n            <span class=\"s1\">'p3'</span> <span class=\"p\">:</span>       <span class=\"n\">p3</span><span class=\"p\">,</span>\n            <span class=\"s1\">'p4'</span> <span class=\"p\">:</span>       <span class=\"n\">p4</span>\n        <span class=\"p\">}</span>\n        \n<span class=\"c1\">#====================================================================================================</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(),</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<p>A sample usage would look like;</p>\n<pre>$ ./ofTheEngagement.py -h\nusage: ofTheEngagement.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--args<span class=\"o\">]</span> <span class=\"o\">[</span>-n MYNUMBER<span class=\"o\">]</span> <span class=\"o\">[</span>--myChoice <span class=\"o\">{</span>a,b<span class=\"o\">}]</span> <span class=\"o\">[</span>--myFlag<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span>\n                          <span class=\"o\">{</span>OfTheEngagment<span class=\"o\">}</span> ...\n\npositional arguments:\n  <span class=\"o\">{</span>OfTheEngagment<span class=\"o\">}</span>\n    OfTheEngagment\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --args                show this argument tree\n  -n MYNUMBER, --myNumber MYNUMBER\n                        &lt;<span class=\"nb\">type</span> <span class=\"s1\">'int'</span>&gt; this should expect an number of <span class=\"nb\">type</span> int\n  --myChoice <span class=\"o\">{</span>a,b<span class=\"o\">}</span>      <span class=\"k\">select</span> <span class=\"k\">for</span> a list of choices, <span class=\"nb\">test</span> <span class=\"k\">if</span> in or out of list\n  --myFlag              this is a flag <span class=\"nb\">true</span> <span class=\"k\">if</span> exists <span class=\"nb\">false</span> <span class=\"k\">if</span> not\n  -v, --verbose\n</pre>\n<pre>$ ./ofTheEngagement.py OfTheEngagment -h\nusage: ofTheEngagement.py OfTheEngagment <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">{</span>myMethod<span class=\"o\">}</span> ...\n\npositional arguments:\n  <span class=\"o\">{</span>myMethod<span class=\"o\">}</span>\n    myMethod  this should be called myMethod and is a good example\n\noptional arguments:\n  -h, --help  show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n</pre>\n<pre>$ ./ofTheEngagement.py OfTheEngagment myMethod -h\nusage: ofTheEngagement.py OfTheEngagment myMethod <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--p3 P3<span class=\"o\">]</span> <span class=\"o\">[</span>--p4 P4<span class=\"o\">]</span> p1 p2\n\npositional arguments:\n  p1          &lt;<span class=\"nb\">type</span> <span class=\"s1\">'str'</span>&gt; p1 should be expected\n  p2          &lt;<span class=\"nb\">type</span> <span class=\"s1\">'int'</span>&gt; p2 should be expected\n\noptional arguments:\n  -h, --help  show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --p3 P3     &lt;<span class=\"nb\">type</span> <span class=\"s1\">'str'</span>&gt; p3 is optional use --p3 and defaults to d3\n  --p4 P4     &lt;<span class=\"nb\">type</span> <span class=\"s1\">'str'</span>&gt; p3 is optional use --p4 and defaults to d4\n</pre>\n<pre>$ ./ofTheEngagement.py -v --myFlag OfTheEngagment myMethod <span class=\"m\">1</span> <span class=\"m\">2</span> --p3<span class=\"o\">=</span><span class=\"m\">3</span>\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"p2\"</span>: <span class=\"m\">2</span>, \n    <span class=\"s2\">\"p3\"</span>: <span class=\"s2\">\"3\"</span>, \n    <span class=\"s2\">\"flag\"</span>: true, \n    <span class=\"s2\">\"p1\"</span>: <span class=\"s2\">\"1\"</span>, \n    <span class=\"s2\">\"verbose\"</span>: true, \n    <span class=\"s2\">\"p4\"</span>: <span class=\"s2\">\"d4\"</span>, \n    <span class=\"s2\">\"number\"</span>: <span class=\"m\">0</span>, \n    <span class=\"s2\">\"choice\"</span>: null\n<span class=\"o\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6832376, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "220174d47b96f87a8255a941cbb3998f", "sha256": "7646080429991e816bdaa12ee10fe1318c94cee3a3eaf191cd5193abe26ff732"}, "downloads": -1, "filename": "Argumental-1.0.tar.gz", "has_sig": false, "md5_digest": "220174d47b96f87a8255a941cbb3998f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9850, "upload_time": "2020-02-14T11:36:49", "upload_time_iso_8601": "2020-02-14T11:36:49.816871Z", "url": "https://files.pythonhosted.org/packages/fc/c7/c68e4b2692208bfc3fd726c7c914b699b2200be7508d97e9bd8079b4fb41/Argumental-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "edb0b76d54fe6d488f13b51b4846497d", "sha256": "37a651cc4830038998bdc7ad59d1c50c67ce0a0c75eda067c2a51c41a0a1dc3e"}, "downloads": -1, "filename": "Argumental-1.1.tar.gz", "has_sig": false, "md5_digest": "edb0b76d54fe6d488f13b51b4846497d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9949, "upload_time": "2020-02-15T23:34:53", "upload_time_iso_8601": "2020-02-15T23:34:53.958198Z", "url": "https://files.pythonhosted.org/packages/2b/fe/a27c31f8d2248a8751f4775727d0f90f8ca57f1beed8f6e1a21048e80cd6/Argumental-1.1.tar.gz", "yanked": false}], "1.10": [{"comment_text": "", "digests": {"md5": "1285ffbb815b043300218ee2ae8387b5", "sha256": "ec9a07e685ca56c186bb9d29e830335009187ab418348fa01cc76fbf8e64f081"}, "downloads": -1, "filename": "Argumental-1.10.tar.gz", "has_sig": false, "md5_digest": "1285ffbb815b043300218ee2ae8387b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10544, "upload_time": "2020-03-17T23:51:55", "upload_time_iso_8601": "2020-03-17T23:51:55.044415Z", "url": "https://files.pythonhosted.org/packages/78/6e/51d27ed1e44ea610099b9f29d921539c47c241d3a0db9a9f9f0e91722637/Argumental-1.10.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "9ae0b4cc803bb164c68279e01decb95d", "sha256": "5dac154526b305656715311d7783d789ae37cdf161c2d7ee26a3c6ce98941cbf"}, "downloads": -1, "filename": "Argumental-1.2.tar.gz", "has_sig": false, "md5_digest": "9ae0b4cc803bb164c68279e01decb95d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9945, "upload_time": "2020-02-15T23:57:23", "upload_time_iso_8601": "2020-02-15T23:57:23.081013Z", "url": "https://files.pythonhosted.org/packages/7f/be/941b14158301f24797e369155fcc30586c52e8b73f9e62cacb290c4e9a34/Argumental-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "2966b262a166c663842cda9b8c9ac5c2", "sha256": "3e8bbede4655e910cf7dc7e95d137b50fd2bd1d725e6a394838ea3151191f258"}, "downloads": -1, "filename": "Argumental-1.3.tar.gz", "has_sig": false, "md5_digest": "2966b262a166c663842cda9b8c9ac5c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9872, "upload_time": "2020-02-16T00:03:01", "upload_time_iso_8601": "2020-02-16T00:03:01.529951Z", "url": "https://files.pythonhosted.org/packages/e9/07/f9961bbe375a43f5c389af805ee96b2a271312541d032d9ad3e6ac158fad/Argumental-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "0f05b3d3a21b41837d5a31fce9cc8588", "sha256": "3276d9084c4298330927792ffe6d3052f1deaa8fdc996518467c93f8f6f80694"}, "downloads": -1, "filename": "Argumental-1.4.tar.gz", "has_sig": false, "md5_digest": "0f05b3d3a21b41837d5a31fce9cc8588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9908, "upload_time": "2020-03-09T00:00:33", "upload_time_iso_8601": "2020-03-09T00:00:33.041845Z", "url": "https://files.pythonhosted.org/packages/d9/ee/954f718d9efeac0932b6e198d6b54d5c59a80e8abea97bc152ce9264862a/Argumental-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "ec5b472c11498d3863a145d1bc2ac972", "sha256": "cbb50e490b2325b5af97da844e65ce0b5bd52ea10a8ebefed3f00d0419696ea8"}, "downloads": -1, "filename": "Argumental-1.5.tar.gz", "has_sig": false, "md5_digest": "ec5b472c11498d3863a145d1bc2ac972", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9905, "upload_time": "2020-03-09T05:12:37", "upload_time_iso_8601": "2020-03-09T05:12:37.687560Z", "url": "https://files.pythonhosted.org/packages/39/24/bff59bfa5262383aab07f2e501630d5db6ca7d82173d08d3fc59909b8e9b/Argumental-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "7cd4d807bde2a22e6fd9a5cbd6a2a0b0", "sha256": "7670a4b9c31d1b4f48c98e677e5faa25e115ee1ddf872ffac4f4c15e047f67ae"}, "downloads": -1, "filename": "Argumental-1.6.tar.gz", "has_sig": false, "md5_digest": "7cd4d807bde2a22e6fd9a5cbd6a2a0b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10423, "upload_time": "2020-03-16T06:11:27", "upload_time_iso_8601": "2020-03-16T06:11:27.011644Z", "url": "https://files.pythonhosted.org/packages/ce/69/8f6db0ccc1920dac6b74cc75a4b53bc6375996e52a46e699e5ea1aceed15/Argumental-1.6.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "43e75e9d8d0ee4431e0dde8ecc58ecfa", "sha256": "07247230fc8330211ae34fca3ee5ebb182633d5fa672008a9e7c73cb4adbde21"}, "downloads": -1, "filename": "Argumental-1.7.tar.gz", "has_sig": false, "md5_digest": "43e75e9d8d0ee4431e0dde8ecc58ecfa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10420, "upload_time": "2020-03-16T06:22:07", "upload_time_iso_8601": "2020-03-16T06:22:07.704255Z", "url": "https://files.pythonhosted.org/packages/33/6e/fd77694cbfe003df9ecc3e7759052f42f9e39e45ecca813681289f9478e4/Argumental-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "3119530bd9d062ddf0bb3a159e6d37bc", "sha256": "0d1216c5a02e87a9d810493301b7b58c1b7a8ea5cd14fa0c53e6b258cc905fcb"}, "downloads": -1, "filename": "Argumental-1.8.tar.gz", "has_sig": false, "md5_digest": "3119530bd9d062ddf0bb3a159e6d37bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10371, "upload_time": "2020-03-16T09:35:27", "upload_time_iso_8601": "2020-03-16T09:35:27.167403Z", "url": "https://files.pythonhosted.org/packages/e0/76/e56bc0786955bbe27c714b3ff92c84f1762c2214e3df0cbc47db61015e4d/Argumental-1.8.tar.gz", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "0d8ace4be51d841ec9233c2754cd5b50", "sha256": "5294ce6b9ab2e84d73f19ae72a64c88b1f53c3ccaf554a8cf6c8956d83b2747d"}, "downloads": -1, "filename": "Argumental-1.9.tar.gz", "has_sig": false, "md5_digest": "0d8ace4be51d841ec9233c2754cd5b50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10576, "upload_time": "2020-03-17T23:38:20", "upload_time_iso_8601": "2020-03-17T23:38:20.555338Z", "url": "https://files.pythonhosted.org/packages/a5/41/7e14ae51d09d26eb96c5c694ae426e9d314ee43633266b52a30af7ab8469/Argumental-1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1285ffbb815b043300218ee2ae8387b5", "sha256": "ec9a07e685ca56c186bb9d29e830335009187ab418348fa01cc76fbf8e64f081"}, "downloads": -1, "filename": "Argumental-1.10.tar.gz", "has_sig": false, "md5_digest": "1285ffbb815b043300218ee2ae8387b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10544, "upload_time": "2020-03-17T23:51:55", "upload_time_iso_8601": "2020-03-17T23:51:55.044415Z", "url": "https://files.pythonhosted.org/packages/78/6e/51d27ed1e44ea610099b9f29d921539c47c241d3a0db9a9f9f0e91722637/Argumental-1.10.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:16 2020"}