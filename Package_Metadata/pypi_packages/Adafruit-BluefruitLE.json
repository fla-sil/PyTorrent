{"info": {"author": "Tony DiCola", "author_email": "tdicola@adafruit.com", "bugtrack_url": null, "classifiers": [], "description": "# Adafruit Python BluefruitLE\n\nPython library to simplify access to Bluefruit LE (Bluetooth low energy) devices and services on Linux and Mac OSX.  Hides all the platform-specific BLE code (using BlueZ on Linux and CoreBluetooth on Mac OSX) and provides a simpler syncronous BLE API which is great for scripts and other automated tasks using BLE.  For example you can create a program to read and write data (like sensor readings) with a Bluefruit LE device in UART mode.\n\nSee more details from the guide here: https://learn.adafruit.com/bluefruit-le-python-library/overview\n\nNote this library provides a Python wrapper for BLE **Central Mode**, meaning it can initiate connections and data exchanges with other BLE Peripherals.  It does not allow you to emulate a BLE Peripheral via Python, or provide Python-based access to BLE peripherals connected to your system.\n\n**Be aware that this library is early in development!**  The examples show how to detect and interact with BLE UART devices which are the primary target of the library.  More advanced features like getting advertisement data or interacting with other BLE services might not work or be currently supported.  In particular BLE support for desktop operating systems is still somewhat buggy and spotty with support.  The library has been developed and primarily tested on Python 2.7.x, but if there are issues with Python 3 please raise them so support can be added.\n\n## Supported Platforms\n\nThe library supports the following platforms:\n\n*   Linux, using the latest BlueZ 5.33 release.  The library is implemented using BlueZ's experimental DBus bindings for access from languages such as Python.\n*   Mac OSX, using Apple's CoreBluetooth library.  The library depends on PyObjC which Apple includes with their Python version on OSX.  Note that if you're using a different Python, like the one provided by Homebrew, be sure to [install PyObjC for that version of Python](http://pythonhosted.org/pyobjc/).\n\n### What about Windows support?\n\nThe library currently does not support Windows since BLE support is limited on that platform.  Windows 7 does not support BLE at all.  Windows 8 does not have [BLE device search and pairing APIs](http://stackoverflow.com/questions/19959261/how-to-scan-for-bluetooth-low-energy-devices-in-windows-8-desktop).\nWindows 10 appears to have a more capable BLE API but it has not yet been invesigated to see if it can be supported by this library yet.\n\n## Linux & Raspberry Pi Requirements\n\nOn Linux (like with a Raspberry Pi) you'll need to compile and install the latest version of BlueZ, currently version 5.33,\nto gain access to the Bluetooth LE API it exposes.  It's important to use this more recent version of BlueZ as the BLE APIs are still in development and a bit experimental.\n\n**Warning:** Be careful compiling and installing a later version of BlueZ on top of an existing version if you use\na Linux desktop OS like Ubuntu, Debian, etc.  You might cause an issue with the new BlueZ version conflicting with\nthe distribution's older BlueZ installation and wreaking havoc with package dependencies.  Ubuntu in particular\ncan get into a very bad state since core components depend on BlueZ.  Look for a properly packaged BlueZ 5.33 \nrelease for your distribution, or install into a virtual machine that can protect your desktop machine from conflicts.\n\nThe steps below describe how to install BlueZ 5.33 on a Raspberry Pi running its Raspbian operating system.  In a terminal on the Raspberry Pi run:\n```\nsudo apt-get update\nsudo apt-get -y install libusb-dev libdbus-1-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev\nwget http://www.kernel.org/pub/linux/bluetooth/bluez-5.33.tar.gz\ntar xvfz bluez-5.33.tar.gz\ncd bluez-5.33\n./configure --disable-systemd\nmake\nsudo make install\nsudo cp ./src/bluetoothd /usr/local/bin/\n```\n\nFinally you'll need to make sure the bluetoothd daemon runs at boot and is run with the `--experimental` flag to enable all the BLE APIs.  To do this edit the `/etc/rc.local` file and add the following line before the `exit 0` at the end:\n```\n/usr/local/bin/bluetoothd --experimental &\n```\n\nSave the changed file and reboot the Pi.  Then verify using the command `ps aux | grep bluetoothd` that the bluetoothd daemon is running.\n\n## Mac OSX Requirements\n\nOn Mac OSX you do not need to install any dependencies to start using the library (the PyObjC library should be\ninstalled already by Apple).\n\n## Installation\n\nOnce the requirements above have been met the library can be installed by running the following command inside its root directory:\n```\nsudo python setup.py install\n```\n\nThis will install the library so it can be used by any script on your system.\n\nAlternatively you can run `sudo python setup.py develop` to have the library installed in develop mode where changes to the code (like doing a `git pull`) will immediately take effect without a reinstall.\n\nAfter the library is installed examine the examples folder to see some examples of usage:\n\n*   **list_uarts.py** - This example will print out any BLE UART devices that can be found and is a simple example of searching for devices.\n*   **uart_service.py** - This example will connect to the first BLE UART device it finds, send the string 'Hello World!' and then wait 60 seconds to receive a reply back.  The example uses a simple syncronous BLE UART service implementation to send and receive data with the UART device.\n*   **device_info.py** - This example will connect to the first BLE UART device it finds and print out details from its device info service.  **Note this example only works on Mac OSX!**  Unfortunately a bug / design issue in the current BlueZ API prevents access to the device information service.\n*   **low_level.py** - This is a lower-level example that interacts with the services and characteristics of a BLE device directly.  Just like the uart_service.py example this will connect to the first found UART device, send a string, and then print out messages that are received for one minute.\n\nTo run an example be sure to run as the root user on Linux using sudo, for example to run the uart_service.py example:\n```\nsudo python uart_service.py\n```\n\nOn Mac OSX the sudo prefix to run as root is not necessary.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adafruit/Adafruit_Python_BluefruitLE/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Adafruit-BluefruitLE", "package_url": "https://pypi.org/project/Adafruit-BluefruitLE/", "platform": "", "project_url": "https://pypi.org/project/Adafruit-BluefruitLE/", "project_urls": {"Homepage": "https://github.com/adafruit/Adafruit_Python_BluefruitLE/"}, "release_url": "https://pypi.org/project/Adafruit-BluefruitLE/0.9.10/", "requires_dist": null, "requires_python": "", "summary": "Python library for interacting with Bluefruit LE (Bluetooth low energy) devices on Linux or OSX.", "version": "0.9.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Adafruit Python BluefruitLE</p>\n<p>Python library to simplify access to Bluefruit LE (Bluetooth low energy) devices and services on Linux and Mac OSX.  Hides all the platform-specific BLE code (using BlueZ on Linux and CoreBluetooth on Mac OSX) and provides a simpler syncronous BLE API which is great for scripts and other automated tasks using BLE.  For example you can create a program to read and write data (like sensor readings) with a Bluefruit LE device in UART mode.</p>\n<p>See more details from the guide here: <a href=\"https://learn.adafruit.com/bluefruit-le-python-library/overview\" rel=\"nofollow\">https://learn.adafruit.com/bluefruit-le-python-library/overview</a></p>\n<p>Note this library provides a Python wrapper for BLE <strong>Central Mode</strong>, meaning it can initiate connections and data exchanges with other BLE Peripherals.  It does not allow you to emulate a BLE Peripheral via Python, or provide Python-based access to BLE peripherals connected to your system.</p>\n<p><strong>Be aware that this library is early in development!</strong>  The examples show how to detect and interact with BLE UART devices which are the primary target of the library.  More advanced features like getting advertisement data or interacting with other BLE services might not work or be currently supported.  In particular BLE support for desktop operating systems is still somewhat buggy and spotty with support.  The library has been developed and primarily tested on Python 2.7.x, but if there are issues with Python 3 please raise them so support can be added.</p>\n<p>## Supported Platforms</p>\n<p>The library supports the following platforms:</p>\n<ul>\n<li>Linux, using the latest BlueZ 5.33 release.  The library is implemented using BlueZ\u2019s experimental DBus bindings for access from languages such as Python.</li>\n<li>Mac OSX, using Apple\u2019s CoreBluetooth library.  The library depends on PyObjC which Apple includes with their Python version on OSX.  Note that if you\u2019re using a different Python, like the one provided by Homebrew, be sure to [install PyObjC for that version of Python](<a href=\"http://pythonhosted.org/pyobjc/\" rel=\"nofollow\">http://pythonhosted.org/pyobjc/</a>).</li>\n</ul>\n<p>### What about Windows support?</p>\n<p>The library currently does not support Windows since BLE support is limited on that platform.  Windows 7 does not support BLE at all.  Windows 8 does not have [BLE device search and pairing APIs](<a href=\"http://stackoverflow.com/questions/19959261/how-to-scan-for-bluetooth-low-energy-devices-in-windows-8-desktop\" rel=\"nofollow\">http://stackoverflow.com/questions/19959261/how-to-scan-for-bluetooth-low-energy-devices-in-windows-8-desktop</a>).\nWindows 10 appears to have a more capable BLE API but it has not yet been invesigated to see if it can be supported by this library yet.</p>\n<p>## Linux &amp; Raspberry Pi Requirements</p>\n<p>On Linux (like with a Raspberry Pi) you\u2019ll need to compile and install the latest version of BlueZ, currently version 5.33,\nto gain access to the Bluetooth LE API it exposes.  It\u2019s important to use this more recent version of BlueZ as the BLE APIs are still in development and a bit experimental.</p>\n<p><strong>Warning:</strong> Be careful compiling and installing a later version of BlueZ on top of an existing version if you use\na Linux desktop OS like Ubuntu, Debian, etc.  You might cause an issue with the new BlueZ version conflicting with\nthe distribution\u2019s older BlueZ installation and wreaking havoc with package dependencies.  Ubuntu in particular\ncan get into a very bad state since core components depend on BlueZ.  Look for a properly packaged BlueZ 5.33\nrelease for your distribution, or install into a virtual machine that can protect your desktop machine from conflicts.</p>\n<p>The steps below describe how to install BlueZ 5.33 on a Raspberry Pi running its Raspbian operating system.  In a terminal on the Raspberry Pi run:\n<tt>`\nsudo <span class=\"pre\">apt-get</span> update\nsudo <span class=\"pre\">apt-get</span> <span class=\"pre\">-y</span> install <span class=\"pre\">libusb-dev</span> <span class=\"pre\">libdbus-1-dev</span> <span class=\"pre\">libglib2.0-dev</span> <span class=\"pre\">libudev-dev</span> <span class=\"pre\">libical-dev</span> <span class=\"pre\">libreadline-dev</span>\nwget <span class=\"pre\">http://www.kernel.org/pub/linux/bluetooth/bluez-5.33.tar.gz</span>\ntar xvfz <span class=\"pre\">bluez-5.33.tar.gz</span>\ncd <span class=\"pre\">bluez-5.33</span>\n./configure <span class=\"pre\">--disable-systemd</span>\nmake\nsudo make install\nsudo cp ./src/bluetoothd /usr/local/bin/\n`</tt></p>\n<p>Finally you\u2019ll need to make sure the bluetoothd daemon runs at boot and is run with the <cite>\u2013experimental</cite> flag to enable all the BLE APIs.  To do this edit the <cite>/etc/rc.local</cite> file and add the following line before the <cite>exit 0</cite> at the end:\n<tt>`\n/usr/local/bin/bluetoothd <span class=\"pre\">--experimental</span> &amp;\n`</tt></p>\n<p>Save the changed file and reboot the Pi.  Then verify using the command <cite>ps aux | grep bluetoothd</cite> that the bluetoothd daemon is running.</p>\n<p>## Mac OSX Requirements</p>\n<p>On Mac OSX you do not need to install any dependencies to start using the library (the PyObjC library should be\ninstalled already by Apple).</p>\n<p>## Installation</p>\n<p>Once the requirements above have been met the library can be installed by running the following command inside its root directory:\n<tt>`\nsudo python setup.py install\n`</tt></p>\n<p>This will install the library so it can be used by any script on your system.</p>\n<p>Alternatively you can run <cite>sudo python setup.py develop</cite> to have the library installed in develop mode where changes to the code (like doing a <cite>git pull</cite>) will immediately take effect without a reinstall.</p>\n<p>After the library is installed examine the examples folder to see some examples of usage:</p>\n<ul>\n<li><strong>list_uarts.py</strong> - This example will print out any BLE UART devices that can be found and is a simple example of searching for devices.</li>\n<li><strong>uart_service.py</strong> - This example will connect to the first BLE UART device it finds, send the string \u2018Hello World!\u2019 and then wait 60 seconds to receive a reply back.  The example uses a simple syncronous BLE UART service implementation to send and receive data with the UART device.</li>\n<li><strong>device_info.py</strong> - This example will connect to the first BLE UART device it finds and print out details from its device info service.  <strong>Note this example only works on Mac OSX!</strong>  Unfortunately a bug / design issue in the current BlueZ API prevents access to the device information service.</li>\n<li><strong>low_level.py</strong> - This is a lower-level example that interacts with the services and characteristics of a BLE device directly.  Just like the uart_service.py example this will connect to the first found UART device, send a string, and then print out messages that are received for one minute.</li>\n</ul>\n<p>To run an example be sure to run as the root user on Linux using sudo, for example to run the uart_service.py example:\n<tt>`\nsudo python uart_service.py\n`</tt></p>\n<p>On Mac OSX the sudo prefix to run as root is not necessary.</p>\n\n          </div>"}, "last_serial": 3891932, "releases": {"0.9.10": [{"comment_text": "", "digests": {"md5": "3933135e24686de026e1f020fe8c4e2b", "sha256": "0343a20ea49a262087c14382dd29814896e2dd60ddd9d89319a2c674ec6b6bd8"}, "downloads": -1, "filename": "Adafruit_BluefruitLE-0.9.10.tar.gz", "has_sig": false, "md5_digest": "3933135e24686de026e1f020fe8c4e2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22716, "upload_time": "2018-05-23T15:56:51", "upload_time_iso_8601": "2018-05-23T15:56:51.733684Z", "url": "https://files.pythonhosted.org/packages/d5/78/7f68a53b70680d5a654f6c0fa857d4fdb14a75f6531a4ddd0fbc133e4333/Adafruit_BluefruitLE-0.9.10.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3933135e24686de026e1f020fe8c4e2b", "sha256": "0343a20ea49a262087c14382dd29814896e2dd60ddd9d89319a2c674ec6b6bd8"}, "downloads": -1, "filename": "Adafruit_BluefruitLE-0.9.10.tar.gz", "has_sig": false, "md5_digest": "3933135e24686de026e1f020fe8c4e2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22716, "upload_time": "2018-05-23T15:56:51", "upload_time_iso_8601": "2018-05-23T15:56:51.733684Z", "url": "https://files.pythonhosted.org/packages/d5/78/7f68a53b70680d5a654f6c0fa857d4fdb14a75f6531a4ddd0fbc133e4333/Adafruit_BluefruitLE-0.9.10.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:09 2020"}