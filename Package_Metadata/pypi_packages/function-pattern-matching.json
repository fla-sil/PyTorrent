{"info": {"author": "Adrian W\u0142osiak", "author_email": "adwlosiakh@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "function-pattern-matching\n*************************\n\n**function-pattern-matching** (**fpm** for short) is a module which introduces Erlang-style\n`multiple clause defined functions <http://erlang.org/doc/reference_manual/functions.html>`_ and\n`guard sequences <http://erlang.org/doc/reference_manual/functions.html#id77457>`_ to Python.\n\nThis module is both Python 2 and 3 compatible.\n\n.. contents:: Table of contents\n\nIntroduction\n============\n\nTwo families of decorators are introduced:\n\n- ``case``: allows multiple function clause definitions and dispatches to correct one. Dispatch happens on the values\n  of call arguments or, more generally, when call arguments' values match specified guard definitions.\n\n  - ``dispatch``: convenience decorator for dispatching on argument types. Equivalent to using ``case`` and ``guard``\n    with type checking.\n\n- ``guard``: allows arguments' values filtering and raises ``GuardError`` when argument value does not pass through\n  argument guard.\n\n  - ``rguard``: Wrapper for ``guard`` which converts first positional decorator argument to relguard. See Relguards_.\n\n  - ``raguard``: Like ``rguard``, but converts return annotation. See Relguards_.\n\nUsage example:\n\n- All Python versions:\n\n.. code-block:: python\n\n    import function_pattern_matching as fpm\n\n    @fpm.case\n    def factorial(n=0):\n        return 1\n\n    @fpm.case\n    @fpm.guard(fpm.is_int & fpm.gt(0))\n    def factorial(n):\n        return n * factorial(n - 1)\n\n- Python 3 only:\n\n.. code-block:: python\n\n    import function_pattern_matching as fpm\n\n    @fpm.case\n    def factorial(n=0):\n        return 1\n\n    @fpm.case\n    @fpm.guard\n    def factorial(n: fpm.is_int & fpm.gt(0)): # Guards specified as annotations\n        return n * factorial(n - 1)\n\nOf course that's a poor implementation of factorial, but illustrates the idea in a simple way.\n\n**Note:** This module does not aim to be used on production scale or in a large sensitive application (but I'd be\nhappy if someone decided to use it in his/her project). I think of it more as a fun project which shows how\nflexible Python can be (and as a good training for myself).\n\nI'm aware that it's somewhat against duck typing and EAFP (easier to ask for forgiveness than for permission)\nphilosophy employed by the language, but obviously there *are* some cases when preliminary checks are useful and\nmake code (and life) much simpler.\n\nInstallation\n============\n\nfunction-pattern-matching can be installed with pip::\n\n    $ pip install function-pattern-matching\n\nModule will be available as ``function_pattern_matching``. It is recommended to import as ``fpm``.\n\nUsage\n=====\n\nGuards\n------\n\nWith ``guard`` decorator it is possible to filter function arguments upon call. When argument value does not pass\nthrough specified guard, then ``GuardError`` is raised.\n\nWhen global setting ``strict_guard_definitions`` is set ``True`` (the default value), then only ``GuardFunc``\ninstances can be used in guard definitions. If it's set to ``False``, then any callable is allowed, but it is **not**\nrecommended, as guard behaviour may be unexpected (``RuntimeWarning`` is emitted), e.g. combining regular callables\nwill not work.\n\n``GuardFunc`` objects can be negated with ``~`` and combined together with ``&``, ``|`` and ``^`` logical operators.\nNote however, that *xor* isn't very useful here.\n\n**Note:** It is not possible to put guards on varying arguments (\\*args, \\**kwargs).\n\nList of provided guard functions\n................................\n\nEvery following function returns/is a callable which takes only one parameter - the call argument that is to be\nchecked.\n\n- ``_`` - Catch-all. Returns ``True`` for any input. Actually, this can take any number of arguments.\n- ``eq(val)`` - checks if input is equal to *val*\n- ``ne(val)`` - checks if input is not equal to *val*\n- ``lt(val)`` - checks if input is less than *val*\n- ``le(val)`` - checks if input is less or equal to *val*\n- ``gt(val)`` - checks if input is greater than *val*\n- ``ge(val)`` - checks if input is greater or equal to *val*\n- ``Is(val)`` - checks if input is *val* (uses ``is`` operator)\n- ``Isnot(val)`` - checks if input is not *val* (uses ``is not`` operator)\n- ``isoftype(_type)`` - checks if input is instance of *_type* (uses ``isintance`` function)\n- ``isiterable`` - checks if input is iterable\n- ``eTrue`` - checks if input evaluates to ``True`` (converts input to ``bool``)\n- ``eFalse`` - checks if input evaluates to ``False`` (converts input to ``bool``)\n- ``In(val)`` - checks if input is in *val* (uses ``in`` operator)\n- ``notIn(val)`` - checks if input is not in *val* (uses ``not in`` operator)\n\nCustom guards\n.............\n\nAlthough it is not advised (at least for simple checks), you can create your own guards:\n\n- by using ``makeguard`` decorator on your test function.\n\n- by writing a function that returns a ``GuardFunc`` object initialised with a test function.\n\nNote that a test function must have only one positional argument.\n\nExamples:\n\n.. code-block:: python\n\n    # use decorator\n    @fpm.makeguard\n    def is_not_zero_nor_None(inp):\n        return inp != 0 and inp is not None\n\n    # return GuardFunc object\n    def is_not_val_nor_specified_thing(val, thing):\n        return GuardFunc(lambda inp: inp != val and inp is not thing)\n\n    # equivalent to (fpm.ne(0) & fpm.Isnot(None)) | (fpm.ne(1) & fpm.Isnot(some_object))\n    @fpm.guard(is_not_zero_nor_None | is_not_val_nor_specified_thing(1, some_object))\n    def guarded(argument):\n        pass\n\nThe above two are very similar, but the second one allows creating function which takes multiple arguments to construct\nactual guard.\n\n**Note:** It is not recommended to create your own guard functions. In most cases combinations of the ones shipped with\nfpm should be all you need.\n\nDefine guards for function arguments\n....................................\n\nThere are two ways of defining guards:\n\n- As decorator arguments\n\n  - positionally: guards order will match decoratee's (the function that is to be decorated) arguments order.\n\n    .. code-block:: python\n\n        @fpm.guard(fpm.isoftype(int) & fpm.ge(0), fpm.isiterable)\n        def func(number, iterable):\n            pass\n\n  - as keyword arguments: e.g. guard under name *a* will guard decoratee's argument named *a*.\n\n    .. code-block:: python\n\n        @fpm.guard(\n            number = fpm.isoftype(int) & fpm.ge(0),\n            iterable = fpm.isiterable\n        )\n        def func(number, iterable):\n            pass\n\n- As annotations (Python 3 only)\n\n  .. code-block:: python\n\n      @fpm.guard\n      def func(\n          number: fpm.isoftype(int) & fpm.ge(0),\n          iterable: fpm.isiterable\n      ): # this is NOT an emoticon\n          pass\n\nIf you try to declare guards using both methods at once, then annotations get ignored and are left untouched.\n\nRelguards\n---------\n\nRelguard is a kind of guard that checks relations between arguments (and/or external variables). ``fpm`` implements\nthem as functions (wrapped in ``RelGuard`` object) whose arguments are a subset of decoratee's arguments (no arguments\nis fine too).\n\nDefine relguard\n...............\n\nThere are a few ways of defining a relguard.\n\n- Using ``guard`` with the first (and only) positional non-keyword argument of type ``RelGuard``:\n\n  .. code-block:: python\n\n      @fpm.guard(\n          fpm.relguard(lambda a, c: a == c), # converts lambda to RelGuard object in-place\n          a = fpm.isoftype(int) & fpm.eTrue,\n          b = fpm.Isnot(None)\n      )\n      def func(a, b, c):\n          pass\n\n- Using ``guard`` with the return annotation holding a ``RelGuard`` object (Python 3 only):\n\n  .. code-block:: python\n\n      @fpm.guard\n      def func(a, b, c) -> fpm.relguard(lambda a, b, c: a != b and b < c):\n          pass\n\n- Using ``rguard`` with a regular callable as the first (and only) positional non-keyword argument.\n\n  .. code-block:: python\n\n      @fpm.rguard(\n          lambda a, c: a == c, # rguard will try converting this to RelGuard object\n          a = fpm.isoftype(int) & fpm.eTrue,\n          b = fpm.Isnot(None)\n      )\n      def func(a, b, c):\n          pass\n\n- Using ``raguard`` with a regular callable as the return annotation.\n\n  .. code-block:: python\n\n      @fpm.raguard\n      def func(a, b, c) -> lambda a, b, c: a != b and b < c: # raguard will try converting lambda to RelGuard object\n          pass\n\nAs you can see, when using ``guard`` you have to manually convert functions to ``RelGuard`` objects with ``relguard``\nmethod. By using ``rguard`` or ``raguard`` decorators you don't need to do it by yourself, and you get a bit cleaner\ndefinition.\n\nMultiple function clauses\n-------------------------\n\nWith ``case`` decorator you are able to define multiple clauses of the same function.\n\nWhen such a function is called with some arguments, then the first matching clause will be executed. Matching clause\nwill be the one that didn't raise a ``GuardError`` when called with given arguments.\n\n**Note:** using ``case`` or ``dispatch`` (discussed later) disables default functionality of default argument values.\nFunctions with varying arguments (\\*args, \\**kwargs) and keyword-only arguments (py3-only) are not supported.\n\nExample:\n\n.. code-block:: python\n\n    @fpm.case\n    def func(a=0): print(\"zero!\")\n\n    @fpm.case\n    def func(a=1): print(\"one!\")\n\n    @fpm.case\n    @fpm.guard(fpm.gt(9000))\n    def func(a): print(\"IT'S OVER 9000!!!\")\n\n    @fpm.case\n    def func(a): print(\"some var:\", a) # catch-all clause\n\n    >>> func(0)\n    'zero!'\n    >>> func(1)\n    'one!'\n    >>> func(9000.1)\n    \"IT'S OVER 9000!!!\"\n    >>> func(1337)\n    'some var: 1337'\n\nIf no clause matches, then ``MatchError`` is raised. The example shown above has a catch-all clause, so ``MatchError``\nwill never occur.\n\nDifferent arities (argument count) are allowed and are dispatched separetely.\n\nExample:\n\n.. code-block:: python\n\n    @fpm.case\n    def func(a=1, b=1, c):\n        return 1\n\n    @fpm.case\n    def func(a, b, c):\n        return 2\n\n    @fpm.case\n    def func(a=1, b=1, c, d):\n        return 3\n\n    @fpm.case\n    def func(a, b, c, d):\n        return 4\n\n    >>> func(1, 1, 'any')\n    1\n    >>> func(1, 0, 0.5)\n    2\n    >>> func(1, 1, '', '')\n    3\n    >>> func(1, 0, 0, '')\n    4\n\nAs you can see, clause order matters only for same-arity clauses. 4-arg catch-all does not affect any 3-arg definition.\n\nDefine multi-claused functions\n..............................\n\nThere are three ways of defining a pattern for a function clause:\n\n- Specify exact values as decorator arguments (positional and/or keyword)\n\n  .. code-block:: python\n\n      @fpm.case(1, 2, 3)\n      def func(a, b, c):\n          pass\n\n      @fpm.case(1, fpm._, 0)\n      def func(a, b, c):\n          pass\n\n      @fpm.case(b=10)\n      def func(a, b, c):\n          pass\n\n- Specify exact values as default arguments\n\n  .. code-block:: python\n\n      @fpm.case\n      def func(a=0):\n          pass\n\n      @fpm.case\n      def func(a=10):\n          pass\n\n      @fpm.case\n      def func(a=fpm._, b=3):\n          pass\n\n- Specify guards for clause to match\n\n  .. code-block:: python\n\n      @fpm.case\n      @fpm.guard(fpm.eq(0) & ~fpm.isoftype(float))\n      def func(a):\n          pass\n\n      @fpm.case\n      @fpm.guard(fpm.gt(0))\n      def func(a):\n          pass\n\n      @fpm.case\n      @fpm.guard(fpm.Is(None))\n      def func(a):\n          pass\n\n``dispatch`` decorator\n......................\n\n``dispatch`` decorator is similar to ``case``, but it lets you to define argument types to match against. You can\nspecify types either as decorator arguments or default values (or as guards, of course, but it makes using ``dispatch``\npointless).\n\nExample:\n\n.. code-block:: python\n\n    @fpm.dispatch(int, int)\n    def func(a, b):\n        print(\"integers\")\n\n    @fpm.dispatch\n    def func(a=float, b=float):\n        print(\"floats\")\n\n    >>> func(1, 1)\n    'integers'\n    >>> func(1.0, 1.0)\n    'floats'\n\nExamples (the useful ones)\n==========================\n\nStill working on this section!\n\n- Ensure that an argument is a list of strings. Prevent feeding string accidentally, which can cause some headache,\n  since both are iterables.\n\n  - Option 1: do not allow strings\n\n    .. code-block:: python\n\n        # thanks to creshal from HN for suggestion\n\n        lookup = {\n            \"foo\": 1,\n            \"bar\": 2,\n            \"baz\": 3\n        }\n\n        @fpm.guard\n        def getSetFromDict(\n            dict_, # let it throw TypeError if not a dict. Will be more descriptive than a GuardError.\n            keys: ~fpm.isoftype(str)\n        ):\n            \"Returns a subset of elements of dict_\"\n            ret_set = set()\n            for key in keys:\n                try:\n                    ret_set.add(dict_[key])\n                except KeyError:\n                    pass\n            return ret_set\n\n        getSetFromDict(lookup, ['foo', 'baz', 'not-in-lookup']) # will return two-element set\n        getSetFromDict(lookup, 'foo') # raises GuardError, but would return empty set without guard!\n\nSimilar solutions\n=================\n\n- `singledispatch <https://docs.python.org/3/library/functools.html#functools.singledispatch>`_ from functools\n- `pyfpm <https://github.com/martinblech/pyfpm>`_\n- `patmatch <http://svn.colorstudy.com/home/ianb/recipes/patmatch.py>`_\n- http://blog.chadselph.com/adding-functional-style-pattern-matching-to-python.html\n- http://www.artima.com/weblogs/viewpost.jsp?thread=101605 (by Guido van Rossum, BDFL)\n\nLicense\n=======\n\nMIT (c) Adrian W\u0142osiak", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rasguanabana/function-pattern-matching", "keywords": "pattern matching guards", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "function-pattern-matching", "package_url": "https://pypi.org/project/function-pattern-matching/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/function-pattern-matching/", "project_urls": {"Homepage": "https://github.com/rasguanabana/function-pattern-matching"}, "release_url": "https://pypi.org/project/function-pattern-matching/0.99a2/", "requires_dist": ["six"], "requires_python": "", "summary": "Pattern matching and guards for Python functions", "version": "0.99a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>function-pattern-matching</strong> (<strong>fpm</strong> for short) is a module which introduces Erlang-style\n<a href=\"http://erlang.org/doc/reference_manual/functions.html\" rel=\"nofollow\">multiple clause defined functions</a> and\n<a href=\"http://erlang.org/doc/reference_manual/functions.html#id77457\" rel=\"nofollow\">guard sequences</a> to Python.</p>\n<p>This module is both Python 2 and 3 compatible.</p>\n<div id=\"table-of-contents\">\n<p>Table of contents</p>\n<ul>\n<li><a href=\"#introduction\" id=\"id1\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id3\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#guards\" id=\"id4\" rel=\"nofollow\">Guards</a><ul>\n<li><a href=\"#list-of-provided-guard-functions\" id=\"id5\" rel=\"nofollow\">List of provided guard functions</a></li>\n<li><a href=\"#custom-guards\" id=\"id6\" rel=\"nofollow\">Custom guards</a></li>\n<li><a href=\"#define-guards-for-function-arguments\" id=\"id7\" rel=\"nofollow\">Define guards for function arguments</a></li>\n</ul>\n</li>\n<li><a href=\"#relguards\" id=\"id8\" rel=\"nofollow\">Relguards</a><ul>\n<li><a href=\"#define-relguard\" id=\"id9\" rel=\"nofollow\">Define relguard</a></li>\n</ul>\n</li>\n<li><a href=\"#multiple-function-clauses\" id=\"id10\" rel=\"nofollow\">Multiple function clauses</a><ul>\n<li><a href=\"#define-multi-claused-functions\" id=\"id11\" rel=\"nofollow\">Define multi-claused functions</a></li>\n<li><a href=\"#dispatch-decorator\" id=\"id12\" rel=\"nofollow\"><tt>dispatch</tt> decorator</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#examples-the-useful-ones\" id=\"id13\" rel=\"nofollow\">Examples (the useful ones)</a></li>\n<li><a href=\"#similar-solutions\" id=\"id14\" rel=\"nofollow\">Similar solutions</a></li>\n<li><a href=\"#license\" id=\"id15\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Introduction</a></h2>\n<p>Two families of decorators are introduced:</p>\n<ul>\n<li><tt>case</tt>: allows multiple function clause definitions and dispatches to correct one. Dispatch happens on the values\nof call arguments or, more generally, when call arguments\u2019 values match specified guard definitions.<ul>\n<li><tt>dispatch</tt>: convenience decorator for dispatching on argument types. Equivalent to using <tt>case</tt> and <tt>guard</tt>\nwith type checking.</li>\n</ul>\n</li>\n<li><tt>guard</tt>: allows arguments\u2019 values filtering and raises <tt>GuardError</tt> when argument value does not pass through\nargument guard.<ul>\n<li><tt>rguard</tt>: Wrapper for <tt>guard</tt> which converts first positional decorator argument to relguard. See <a href=\"#relguards\" rel=\"nofollow\">Relguards</a>.</li>\n<li><tt>raguard</tt>: Like <tt>rguard</tt>, but converts return annotation. See <a href=\"#relguards\" rel=\"nofollow\">Relguards</a>.</li>\n</ul>\n</li>\n</ul>\n<p>Usage example:</p>\n<ul>\n<li>All Python versions:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">function_pattern_matching</span> <span class=\"k\">as</span> <span class=\"nn\">fpm</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">is_int</span> <span class=\"o\">&amp;</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Python 3 only:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">function_pattern_matching</span> <span class=\"k\">as</span> <span class=\"nn\">fpm</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span>\n<span class=\"k\">def</span> <span class=\"nf\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">is_int</span> <span class=\"o\">&amp;</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)):</span> <span class=\"c1\"># Guards specified as annotations</span>\n    <span class=\"k\">return</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Of course that\u2019s a poor implementation of factorial, but illustrates the idea in a simple way.</p>\n<p><strong>Note:</strong> This module does not aim to be used on production scale or in a large sensitive application (but I\u2019d be\nhappy if someone decided to use it in his/her project). I think of it more as a fun project which shows how\nflexible Python can be (and as a good training for myself).</p>\n<p>I\u2019m aware that it\u2019s somewhat against duck typing and EAFP (easier to ask for forgiveness than for permission)\nphilosophy employed by the language, but obviously there <em>are</em> some cases when preliminary checks are useful and\nmake code (and life) much simpler.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Installation</a></h2>\n<p>function-pattern-matching can be installed with pip:</p>\n<pre>$ pip install function-pattern-matching\n</pre>\n<p>Module will be available as <tt>function_pattern_matching</tt>. It is recommended to import as <tt>fpm</tt>.</p>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"guards\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Guards</a></h3>\n<p>With <tt>guard</tt> decorator it is possible to filter function arguments upon call. When argument value does not pass\nthrough specified guard, then <tt>GuardError</tt> is raised.</p>\n<p>When global setting <tt>strict_guard_definitions</tt> is set <tt>True</tt> (the default value), then only <tt>GuardFunc</tt>\ninstances can be used in guard definitions. If it\u2019s set to <tt>False</tt>, then any callable is allowed, but it is <strong>not</strong>\nrecommended, as guard behaviour may be unexpected (<tt>RuntimeWarning</tt> is emitted), e.g. combining regular callables\nwill not work.</p>\n<p><tt>GuardFunc</tt> objects can be negated with <tt>~</tt> and combined together with <tt>&amp;</tt>, <tt>|</tt> and <tt>^</tt> logical operators.\nNote however, that <em>xor</em> isn\u2019t very useful here.</p>\n<p><strong>Note:</strong> It is not possible to put guards on varying arguments (*args, **kwargs).</p>\n<div id=\"list-of-provided-guard-functions\">\n<h4><a href=\"#id5\" rel=\"nofollow\">List of provided guard functions</a></h4>\n<p>Every following function returns/is a callable which takes only one parameter - the call argument that is to be\nchecked.</p>\n<ul>\n<li><tt>_</tt> - Catch-all. Returns <tt>True</tt> for any input. Actually, this can take any number of arguments.</li>\n<li><tt>eq(val)</tt> - checks if input is equal to <em>val</em></li>\n<li><tt>ne(val)</tt> - checks if input is not equal to <em>val</em></li>\n<li><tt>lt(val)</tt> - checks if input is less than <em>val</em></li>\n<li><tt>le(val)</tt> - checks if input is less or equal to <em>val</em></li>\n<li><tt>gt(val)</tt> - checks if input is greater than <em>val</em></li>\n<li><tt>ge(val)</tt> - checks if input is greater or equal to <em>val</em></li>\n<li><tt>Is(val)</tt> - checks if input is <em>val</em> (uses <tt>is</tt> operator)</li>\n<li><tt>Isnot(val)</tt> - checks if input is not <em>val</em> (uses <tt>is not</tt> operator)</li>\n<li><tt>isoftype(_type)</tt> - checks if input is instance of <em>_type</em> (uses <tt>isintance</tt> function)</li>\n<li><tt>isiterable</tt> - checks if input is iterable</li>\n<li><tt>eTrue</tt> - checks if input evaluates to <tt>True</tt> (converts input to <tt>bool</tt>)</li>\n<li><tt>eFalse</tt> - checks if input evaluates to <tt>False</tt> (converts input to <tt>bool</tt>)</li>\n<li><tt>In(val)</tt> - checks if input is in <em>val</em> (uses <tt>in</tt> operator)</li>\n<li><tt>notIn(val)</tt> - checks if input is not in <em>val</em> (uses <tt>not in</tt> operator)</li>\n</ul>\n</div>\n<div id=\"custom-guards\">\n<h4><a href=\"#id6\" rel=\"nofollow\">Custom guards</a></h4>\n<p>Although it is not advised (at least for simple checks), you can create your own guards:</p>\n<ul>\n<li>by using <tt>makeguard</tt> decorator on your test function.</li>\n<li>by writing a function that returns a <tt>GuardFunc</tt> object initialised with a test function.</li>\n</ul>\n<p>Note that a test function must have only one positional argument.</p>\n<p>Examples:</p>\n<pre><span class=\"c1\"># use decorator</span>\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">makeguard</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_not_zero_nor_None</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">inp</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">inp</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n<span class=\"c1\"># return GuardFunc object</span>\n<span class=\"k\">def</span> <span class=\"nf\">is_not_val_nor_specified_thing</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">thing</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">GuardFunc</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">inp</span> <span class=\"o\">!=</span> <span class=\"n\">val</span> <span class=\"ow\">and</span> <span class=\"n\">inp</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">thing</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># equivalent to (fpm.ne(0) &amp; fpm.Isnot(None)) | (fpm.ne(1) &amp; fpm.Isnot(some_object))</span>\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span><span class=\"n\">is_not_zero_nor_None</span> <span class=\"o\">|</span> <span class=\"n\">is_not_val_nor_specified_thing</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">some_object</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">guarded</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>The above two are very similar, but the second one allows creating function which takes multiple arguments to construct\nactual guard.</p>\n<p><strong>Note:</strong> It is not recommended to create your own guard functions. In most cases combinations of the ones shipped with\nfpm should be all you need.</p>\n</div>\n<div id=\"define-guards-for-function-arguments\">\n<h4><a href=\"#id7\" rel=\"nofollow\">Define guards for function arguments</a></h4>\n<p>There are two ways of defining guards:</p>\n<ul>\n<li><p>As decorator arguments</p>\n<ul>\n<li><p>positionally: guards order will match decoratee\u2019s (the function that is to be decorated) arguments order.</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isoftype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isiterable</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">iterable</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n<li><p>as keyword arguments: e.g. guard under name <em>a</em> will guard decoratee\u2019s argument named <em>a</em>.</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span>\n    <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isoftype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"n\">iterable</span> <span class=\"o\">=</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isiterable</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">iterable</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n</ul>\n</li>\n<li><p>As annotations (Python 3 only)</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span>\n    <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isoftype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">ge</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"n\">iterable</span><span class=\"p\">:</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isiterable</span>\n<span class=\"p\">):</span> <span class=\"c1\"># this is NOT an emoticon</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n</ul>\n<p>If you try to declare guards using both methods at once, then annotations get ignored and are left untouched.</p>\n</div>\n</div>\n<div id=\"relguards\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Relguards</a></h3>\n<p>Relguard is a kind of guard that checks relations between arguments (and/or external variables). <tt>fpm</tt> implements\nthem as functions (wrapped in <tt>RelGuard</tt> object) whose arguments are a subset of decoratee\u2019s arguments (no arguments\nis fine too).</p>\n<div id=\"define-relguard\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Define relguard</a></h4>\n<p>There are a few ways of defining a relguard.</p>\n<ul>\n<li><p>Using <tt>guard</tt> with the first (and only) positional non-keyword argument of type <tt>RelGuard</tt>:</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span>\n    <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">relguard</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"p\">),</span> <span class=\"c1\"># converts lambda to RelGuard object in-place</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isoftype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">eTrue</span><span class=\"p\">,</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">Isnot</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n<li><p>Using <tt>guard</tt> with the return annotation holding a <tt>RelGuard</tt> object (Python 3 only):</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">relguard</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">!=</span> <span class=\"n\">b</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n<li><p>Using <tt>rguard</tt> with a regular callable as the first (and only) positional non-keyword argument.</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">rguard</span><span class=\"p\">(</span>\n    <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"c1\"># rguard will try converting this to RelGuard object</span>\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isoftype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">eTrue</span><span class=\"p\">,</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">Isnot</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n<li><p>Using <tt>raguard</tt> with a regular callable as the return annotation.</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">raguard</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">!=</span> <span class=\"n\">b</span> <span class=\"ow\">and</span> <span class=\"n\">b</span> <span class=\"o\">&lt;</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"c1\"># raguard will try converting lambda to RelGuard object</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n</ul>\n<p>As you can see, when using <tt>guard</tt> you have to manually convert functions to <tt>RelGuard</tt> objects with <tt>relguard</tt>\nmethod. By using <tt>rguard</tt> or <tt>raguard</tt> decorators you don\u2019t need to do it by yourself, and you get a bit cleaner\ndefinition.</p>\n</div>\n</div>\n<div id=\"multiple-function-clauses\">\n<h3><a href=\"#id10\" rel=\"nofollow\">Multiple function clauses</a></h3>\n<p>With <tt>case</tt> decorator you are able to define multiple clauses of the same function.</p>\n<p>When such a function is called with some arguments, then the first matching clause will be executed. Matching clause\nwill be the one that didn\u2019t raise a <tt>GuardError</tt> when called with given arguments.</p>\n<p><strong>Note:</strong> using <tt>case</tt> or <tt>dispatch</tt> (discussed later) disables default functionality of default argument values.\nFunctions with varying arguments (*args, **kwargs) and keyword-only arguments (py3-only) are not supported.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"zero!\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"one!\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"mi\">9000</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"IT'S OVER 9000!!!\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"some var:\"</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"c1\"># catch-all clause</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"s1\">'zero!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'one!'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mf\">9000.1</span><span class=\"p\">)</span>\n<span class=\"s2\">\"IT'S OVER 9000!!!\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1337</span><span class=\"p\">)</span>\n<span class=\"s1\">'some var: 1337'</span>\n</pre>\n<p>If no clause matches, then <tt>MatchError</tt> is raised. The example shown above has a catch-all clause, so <tt>MatchError</tt>\nwill never occur.</p>\n<p>Different arities (argument count) are allowed and are dispatched separetely.</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">2</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">3</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">4</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'any'</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span>\n<span class=\"mi\">4</span>\n</pre>\n<p>As you can see, clause order matters only for same-arity clauses. 4-arg catch-all does not affect any 3-arg definition.</p>\n<div id=\"define-multi-claused-functions\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Define multi-claused functions</a></h4>\n<p>There are three ways of defining a pattern for a function clause:</p>\n<ul>\n<li><p>Specify exact values as decorator arguments (positional and/or keyword)</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n<li><p>Specify exact values as default arguments</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n<li><p>Specify guards for clause to match</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"o\">~</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isoftype</span><span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">gt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">case</span>\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span><span class=\"p\">(</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">Is</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"dispatch-decorator\">\n<h4><a href=\"#id12\" rel=\"nofollow\"><tt>dispatch</tt> decorator</a></h4>\n<p><tt>dispatch</tt> decorator is similar to <tt>case</tt>, but it lets you to define argument types to match against. You can\nspecify types either as decorator arguments or default values (or as guards, of course, but it makes using <tt>dispatch</tt>\npointless).</p>\n<p>Example:</p>\n<pre><span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"integers\"</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">dispatch</span>\n<span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"floats\"</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"s1\">'integers'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"s1\">'floats'</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"examples-the-useful-ones\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Examples (the useful ones)</a></h2>\n<p>Still working on this section!</p>\n<ul>\n<li><p>Ensure that an argument is a list of strings. Prevent feeding string accidentally, which can cause some headache,\nsince both are iterables.</p>\n<ul>\n<li><p>Option 1: do not allow strings</p>\n<pre><span class=\"c1\"># thanks to creshal from HN for suggestion</span>\n\n<span class=\"n\">lookup</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"bar\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"baz\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@fpm</span><span class=\"o\">.</span><span class=\"n\">guard</span>\n<span class=\"k\">def</span> <span class=\"nf\">getSetFromDict</span><span class=\"p\">(</span>\n    <span class=\"n\">dict_</span><span class=\"p\">,</span> <span class=\"c1\"># let it throw TypeError if not a dict. Will be more descriptive than a GuardError.</span>\n    <span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">fpm</span><span class=\"o\">.</span><span class=\"n\">isoftype</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"p\">):</span>\n    <span class=\"s2\">\"Returns a subset of elements of dict_\"</span>\n    <span class=\"n\">ret_set</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">keys</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">ret_set</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret_set</span>\n\n<span class=\"n\">getSetFromDict</span><span class=\"p\">(</span><span class=\"n\">lookup</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">,</span> <span class=\"s1\">'not-in-lookup'</span><span class=\"p\">])</span> <span class=\"c1\"># will return two-element set</span>\n<span class=\"n\">getSetFromDict</span><span class=\"p\">(</span><span class=\"n\">lookup</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">)</span> <span class=\"c1\"># raises GuardError, but would return empty set without guard!</span>\n</pre>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"similar-solutions\">\n<h2><a href=\"#id14\" rel=\"nofollow\">Similar solutions</a></h2>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/functools.html#functools.singledispatch\" rel=\"nofollow\">singledispatch</a> from functools</li>\n<li><a href=\"https://github.com/martinblech/pyfpm\" rel=\"nofollow\">pyfpm</a></li>\n<li><a href=\"http://svn.colorstudy.com/home/ianb/recipes/patmatch.py\" rel=\"nofollow\">patmatch</a></li>\n<li><a href=\"http://blog.chadselph.com/adding-functional-style-pattern-matching-to-python.html\" rel=\"nofollow\">http://blog.chadselph.com/adding-functional-style-pattern-matching-to-python.html</a></li>\n<li><a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=101605\" rel=\"nofollow\">http://www.artima.com/weblogs/viewpost.jsp?thread=101605</a> (by Guido van Rossum, BDFL)</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id15\" rel=\"nofollow\">License</a></h2>\n<p>MIT (c) Adrian W\u0142osiak</p>\n</div>\n\n          </div>"}, "last_serial": 2122321, "releases": {"0.99a1": [{"comment_text": "", "digests": {"md5": "343cb4345fd735c18a446741d92455f6", "sha256": "2dd65194a14d9e219d7824854b9e54a39e4ad252fc72386ff661af33f110d5c9"}, "downloads": -1, "filename": "function_pattern_matching-0.99a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "343cb4345fd735c18a446741d92455f6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15775, "upload_time": "2016-05-11T18:44:53", "upload_time_iso_8601": "2016-05-11T18:44:53.684317Z", "url": "https://files.pythonhosted.org/packages/37/d4/f412d8dd3613e21c5776c2f7e55ac68fb3e421b60a88f583bd2de30db90b/function_pattern_matching-0.99a1-py2.py3-none-any.whl", "yanked": false}], "0.99a2": [{"comment_text": "", "digests": {"md5": "df42dcca8ae0629f3b66d6f72dec9d14", "sha256": "e722055bb9e19a3350d3dfbfe0a4c8c9f0c1dad4f5c8fa3826cd37050258823e"}, "downloads": -1, "filename": "function_pattern_matching-0.99a2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df42dcca8ae0629f3b66d6f72dec9d14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17259, "upload_time": "2016-05-18T19:20:02", "upload_time_iso_8601": "2016-05-18T19:20:02.058984Z", "url": "https://files.pythonhosted.org/packages/a3/9d/11c6e9930de34bce39970cdbfe185d4305e4d0027589d782ac3d12b2b3b8/function_pattern_matching-0.99a2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "df42dcca8ae0629f3b66d6f72dec9d14", "sha256": "e722055bb9e19a3350d3dfbfe0a4c8c9f0c1dad4f5c8fa3826cd37050258823e"}, "downloads": -1, "filename": "function_pattern_matching-0.99a2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df42dcca8ae0629f3b66d6f72dec9d14", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17259, "upload_time": "2016-05-18T19:20:02", "upload_time_iso_8601": "2016-05-18T19:20:02.058984Z", "url": "https://files.pythonhosted.org/packages/a3/9d/11c6e9930de34bce39970cdbfe185d4305e4d0027589d782ac3d12b2b3b8/function_pattern_matching-0.99a2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:59:41 2020"}