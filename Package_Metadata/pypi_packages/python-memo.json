{"info": {"author": "Enrico Bacis", "author_email": "enrico.bacis@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Description\n-----------\n\n*memoize* and *keyed-memoize* decorators.\n\n- ``memo``: The classical *memoize* decorator. It keeps a cache\n  ``args -> result`` so you don't continue to perform the same computations.\n\n- ``keymemo(key)``: This decorator factory act as ``memo`` but it permits to\n  specify a ``key`` function that takes the ``args`` of the decorated function\n  and computes a ``key`` value to use as key in the cache dictionary. This way\n  you can for example use a single value of a dictionary as key of the cache,\n  or apply a function before passing something to the cache.\n\n- ``instancememo``: The classical *memoize* decorator that can be applied to\n  class functions. It keeps a cache ``args -> result`` so you don't continue\n  to perform the same computations. The cache is kept in the class namespace.\n\n- ``instancekeymemo(key)``: This decorator factory works like a combination of\n  ``instancememo`` and ``keymemo``, so it allows to specify a function that\n  generate the cache key based on the function arguments and can be applied\n  to class functions.\n\n\nUsage\n-----\n\n.. code:: python\n\n    from memo import memo\n\n    @memo\n    def fibonacci(n):\n        if n <= 2:\n            return 1\n        return fibonacci(n-1) + fibonacci(n-2)\n\n.. code:: python\n\n    from memo import keymemo\n\n    @keymemo(lambda tup: tup[0])\n    def function(tup):\n        # build a cache based on the first value of a tuple\n        ...\n\nInstallation\n------------\n\nThe package has been uploaded to `PyPI`_, so you can install it with pip:\n\n    pip install python-memo\n\n\n.. _PyPI: https://pypi.python.org/pypi/python-memo\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/enricobacis/python-memo", "keywords": "memo memoize dynamic programming cache decorator instance", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-memo", "package_url": "https://pypi.org/project/python-memo/", "platform": "", "project_url": "https://pypi.org/project/python-memo/", "project_urls": {"Homepage": "http://github.com/enricobacis/python-memo"}, "release_url": "https://pypi.org/project/python-memo/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Decorators to memoize function results (also for classes)", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p><em>memoize</em> and <em>keyed-memoize</em> decorators.</p>\n<ul>\n<li><tt>memo</tt>: The classical <em>memoize</em> decorator. It keeps a cache\n<tt>args <span class=\"pre\">-&gt;</span> result</tt> so you don\u2019t continue to perform the same computations.</li>\n<li><tt>keymemo(key)</tt>: This decorator factory act as <tt>memo</tt> but it permits to\nspecify a <tt>key</tt> function that takes the <tt>args</tt> of the decorated function\nand computes a <tt>key</tt> value to use as key in the cache dictionary. This way\nyou can for example use a single value of a dictionary as key of the cache,\nor apply a function before passing something to the cache.</li>\n<li><tt>instancememo</tt>: The classical <em>memoize</em> decorator that can be applied to\nclass functions. It keeps a cache <tt>args <span class=\"pre\">-&gt;</span> result</tt> so you don\u2019t continue\nto perform the same computations. The cache is kept in the class namespace.</li>\n<li><tt>instancekeymemo(key)</tt>: This decorator factory works like a combination of\n<tt>instancememo</tt> and <tt>keymemo</tt>, so it allows to specify a function that\ngenerate the cache key based on the function arguments and can be applied\nto class functions.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">memo</span> <span class=\"kn\">import</span> <span class=\"n\">memo</span>\n\n<span class=\"nd\">@memo</span>\n<span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">memo</span> <span class=\"kn\">import</span> <span class=\"n\">keymemo</span>\n\n<span class=\"nd\">@keymemo</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">tup</span><span class=\"p\">:</span> <span class=\"n\">tup</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">function</span><span class=\"p\">(</span><span class=\"n\">tup</span><span class=\"p\">):</span>\n    <span class=\"c1\"># build a cache based on the first value of a tuple</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The package has been uploaded to <a href=\"https://pypi.python.org/pypi/python-memo\" rel=\"nofollow\">PyPI</a>, so you can install it with pip:</p>\n<blockquote>\npip install python-memo</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2641613, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0cc30dc9030824cac503081ba8498d5a", "sha256": "b299488ba0263b04bf2cefde2879b3b26bbd37db53d997c9e656056844dcdba6"}, "downloads": -1, "filename": "python-memo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0cc30dc9030824cac503081ba8498d5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2242, "upload_time": "2017-02-14T17:25:32", "upload_time_iso_8601": "2017-02-14T17:25:32.795185Z", "url": "https://files.pythonhosted.org/packages/50/b2/9c7ab2c1b7832b10d6345088d363ae378aecd5fd1b6beb9a8bf794ec501d/python-memo-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0cc30dc9030824cac503081ba8498d5a", "sha256": "b299488ba0263b04bf2cefde2879b3b26bbd37db53d997c9e656056844dcdba6"}, "downloads": -1, "filename": "python-memo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0cc30dc9030824cac503081ba8498d5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2242, "upload_time": "2017-02-14T17:25:32", "upload_time_iso_8601": "2017-02-14T17:25:32.795185Z", "url": "https://files.pythonhosted.org/packages/50/b2/9c7ab2c1b7832b10d6345088d363ae378aecd5fd1b6beb9a8bf794ec501d/python-memo-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:36 2020"}