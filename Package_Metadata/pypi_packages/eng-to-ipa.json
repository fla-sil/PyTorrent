{"info": {"author": "['mphilli', 'Mitchellpkt', 'CanadianCommander', 'timvancann']", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "### English to IPA (eng_to_ipa)\n\n\nThis Python program utilizes the Carnegie-Mellon University Pronouncing Dictionary to convert English text into the [International Phonetic Alphabet](https://en.wikipedia.org/wiki/International_Phonetic_Alphabet).\n\n\nThe `convert` function is used to take English text and convert it to IPA, like so:\n\n```Python\n>>> import eng_to_ipa as ipa\n>>> ipa.convert(\"The quick brown fox jumped over the lazy dog.\")\n'\u00f0\u0259 kw\u026ak bra\u028an f\u0251ks \u02a4\u0259mpt \u02c8o\u028av\u0259r \u00f0\u0259 \u02c8le\u026azi d\u0254g.'\n``` \n\nNote that words that cannot be found in the CMU dictionary are simply reprinted with an asterisk.\n\n#### `convert` parameters\n\n* **text** : *string* - The input string of English text to be converted to IPA notation.\n\n* **keep_punct** : *boolean, optional (default=True)* - Determines whether or not the punctuation marks from the input string\nshould be retained or not.\n\n* **retrieve_all** : *boolean, optional (default=False)* - Given that some words might have more than one transcription,\nthis parameter determines whether or not a list of all possible combinations of transcriptions should be returned (True)\n or just the string of one transcription (False).\n \n* **stress_marks** : *string, optional (default='both')* - Determines whether or not the primary and secondary stress \nmarkings (\u02c8, \u02cc) should be retained. Understood arguments are:\n   * \"primary\" - retains primary stress only \n   * \"secondary\" - retains secondary stress only\n   * \"both\" - to keep both primary and secondary stress markers. \n   \n* **mode** : *string, optional (default='sql')* - Accepts \"sql\" or \"json\", depending on which version of the database you'd like to use.\n As another option for JSON users, simply use the function `jonvert` instead of `convert`. \n   \nThe `ipa_list` function returns a list of each word as a list of all its possible transcriptions. It has all the same\noptional `stress_marks` and `keep_punct` parameters as `convert`.\n```Python\n>>> ipa.ipa_list(\"The record was expensive.\")\n[['\u00f0i', '\u00f0\u0259'], ['r\u0259\u02c8k\u0254rd', 'r\u026a\u02c8k\u0254rd', '\u02c8r\u025bk\u0259rd'], ['w\u0251z'], ['\u026ak\u02c8sp\u025bns\u026av.']]\n```\n\nThe `isin_cmu` function takes a word (or list of words) and checks if it is in the CMU pronouncing dictionary (returns \n`True` or `False`). If a list of words is provided, then `True` will only be returned if *every* provided word is in the dictionary.\n\n```Python\n>>> ipa.isin_cmu(\"The dentist opened a new practice.\")\nTrue\n>>> ipa.isin_cmu(\"emoji\")\nFalse\n```\n\nThe `get_rhymes` function returns a list of rhymes for a word or set of words. \n```Python\n>>> ipa.get_rhymes(\"rhyming function\")\n[['climbing', 'diming', 'liming', 'priming', 'timing'], ['compunction', 'conjunction', 'dysfunction', 'injunction', 'junction', 'malfunction']]\n```\n*Use the `jhymes` function instead to force usage of the JSON database.*\n   \nThe `syllable_count` function returns an integer, corresponding to the number of syllables in a word. Returns a list of \nsyllable counts if more than one word is provided in the input string.\n\n```Python\n>>> ipa.syllable_count(\"computer programming\")\n[3, 3]\n```\n\nFor another Python package that offers support for rhyming and syllable counts (as well as other cool things), see [pronouncingpy](https://github.com/aparrish/pronouncingpy).\n\nNote: I'd like to make this project easily available/installable from pip, but I don't know how. Looking for help!\n\n\n### Release\n\nversion: 0.0.2\n\n#### How to release\n```bash\npip install setuptools wheel twine\npython setup.py sdist\npython -m twine upload --repository  testpypi dist/*\npython -m twine upload --repository  pypi dist/*\nrm -rf dist *.egg-info MANIFEST\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "eng-to-ipa", "package_url": "https://pypi.org/project/eng-to-ipa/", "platform": "", "project_url": "https://pypi.org/project/eng-to-ipa/", "project_urls": null, "release_url": "https://pypi.org/project/eng-to-ipa/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "take English text and convert it to IPA", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>English to IPA (eng_to_ipa)</h3>\n<p>This Python program utilizes the Carnegie-Mellon University Pronouncing Dictionary to convert English text into the <a href=\"https://en.wikipedia.org/wiki/International_Phonetic_Alphabet\" rel=\"nofollow\">International Phonetic Alphabet</a>.</p>\n<p>The <code>convert</code> function is used to take English text and convert it to IPA, like so:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">eng_to_ipa</span> <span class=\"k\">as</span> <span class=\"nn\">ipa</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ipa</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s2\">\"The quick brown fox jumped over the lazy dog.\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'\u00f0\u0259 kw\u026ak bra\u028an f\u0251ks \u02a4\u0259mpt \u02c8o\u028av\u0259r \u00f0\u0259 \u02c8le\u026azi d\u0254g.'</span>\n</pre>\n<p>Note that words that cannot be found in the CMU dictionary are simply reprinted with an asterisk.</p>\n<h4><code>convert</code> parameters</h4>\n<ul>\n<li>\n<p><strong>text</strong> : <em>string</em> - The input string of English text to be converted to IPA notation.</p>\n</li>\n<li>\n<p><strong>keep_punct</strong> : <em>boolean, optional (default=True)</em> - Determines whether or not the punctuation marks from the input string\nshould be retained or not.</p>\n</li>\n<li>\n<p><strong>retrieve_all</strong> : <em>boolean, optional (default=False)</em> - Given that some words might have more than one transcription,\nthis parameter determines whether or not a list of all possible combinations of transcriptions should be returned (True)\nor just the string of one transcription (False).</p>\n</li>\n<li>\n<p><strong>stress_marks</strong> : <em>string, optional (default='both')</em> - Determines whether or not the primary and secondary stress\nmarkings (\u02c8, \u02cc) should be retained. Understood arguments are:</p>\n<ul>\n<li>\"primary\" - retains primary stress only</li>\n<li>\"secondary\" - retains secondary stress only</li>\n<li>\"both\" - to keep both primary and secondary stress markers.</li>\n</ul>\n</li>\n<li>\n<p><strong>mode</strong> : <em>string, optional (default='sql')</em> - Accepts \"sql\" or \"json\", depending on which version of the database you'd like to use.\nAs another option for JSON users, simply use the function <code>jonvert</code> instead of <code>convert</code>.</p>\n</li>\n</ul>\n<p>The <code>ipa_list</code> function returns a list of each word as a list of all its possible transcriptions. It has all the same\noptional <code>stress_marks</code> and <code>keep_punct</code> parameters as <code>convert</code>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ipa</span><span class=\"o\">.</span><span class=\"n\">ipa_list</span><span class=\"p\">(</span><span class=\"s2\">\"The record was expensive.\"</span><span class=\"p\">)</span>\n<span class=\"p\">[[</span><span class=\"s1\">'\u00f0i'</span><span class=\"p\">,</span> <span class=\"s1\">'\u00f0\u0259'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'r\u0259\u02c8k\u0254rd'</span><span class=\"p\">,</span> <span class=\"s1\">'r\u026a\u02c8k\u0254rd'</span><span class=\"p\">,</span> <span class=\"s1\">'\u02c8r\u025bk\u0259rd'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'w\u0251z'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'\u026ak\u02c8sp\u025bns\u026av.'</span><span class=\"p\">]]</span>\n</pre>\n<p>The <code>isin_cmu</code> function takes a word (or list of words) and checks if it is in the CMU pronouncing dictionary (returns\n<code>True</code> or <code>False</code>). If a list of words is provided, then <code>True</code> will only be returned if <em>every</em> provided word is in the dictionary.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ipa</span><span class=\"o\">.</span><span class=\"n\">isin_cmu</span><span class=\"p\">(</span><span class=\"s2\">\"The dentist opened a new practice.\"</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ipa</span><span class=\"o\">.</span><span class=\"n\">isin_cmu</span><span class=\"p\">(</span><span class=\"s2\">\"emoji\"</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>The <code>get_rhymes</code> function returns a list of rhymes for a word or set of words.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ipa</span><span class=\"o\">.</span><span class=\"n\">get_rhymes</span><span class=\"p\">(</span><span class=\"s2\">\"rhyming function\"</span><span class=\"p\">)</span>\n<span class=\"p\">[[</span><span class=\"s1\">'climbing'</span><span class=\"p\">,</span> <span class=\"s1\">'diming'</span><span class=\"p\">,</span> <span class=\"s1\">'liming'</span><span class=\"p\">,</span> <span class=\"s1\">'priming'</span><span class=\"p\">,</span> <span class=\"s1\">'timing'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s1\">'compunction'</span><span class=\"p\">,</span> <span class=\"s1\">'conjunction'</span><span class=\"p\">,</span> <span class=\"s1\">'dysfunction'</span><span class=\"p\">,</span> <span class=\"s1\">'injunction'</span><span class=\"p\">,</span> <span class=\"s1\">'junction'</span><span class=\"p\">,</span> <span class=\"s1\">'malfunction'</span><span class=\"p\">]]</span>\n</pre>\n<p><em>Use the <code>jhymes</code> function instead to force usage of the JSON database.</em></p>\n<p>The <code>syllable_count</code> function returns an integer, corresponding to the number of syllables in a word. Returns a list of\nsyllable counts if more than one word is provided in the input string.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ipa</span><span class=\"o\">.</span><span class=\"n\">syllable_count</span><span class=\"p\">(</span><span class=\"s2\">\"computer programming\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<p>For another Python package that offers support for rhyming and syllable counts (as well as other cool things), see <a href=\"https://github.com/aparrish/pronouncingpy\" rel=\"nofollow\">pronouncingpy</a>.</p>\n<p>Note: I'd like to make this project easily available/installable from pip, but I don't know how. Looking for help!</p>\n<h3>Release</h3>\n<p>version: 0.0.2</p>\n<h4>How to release</h4>\n<pre>pip install setuptools wheel twine\npython setup.py sdist\npython -m twine upload --repository  testpypi dist/*\npython -m twine upload --repository  pypi dist/*\nrm -rf dist *.egg-info MANIFEST\n</pre>\n\n          </div>"}, "last_serial": 7037487, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c731cebebee003a68e44a79db811ddd5", "sha256": "1d2e008a6fd3676cbe902d08cc8c8f228d13e476a514fcc8442c3d43b88fc9e2"}, "downloads": -1, "filename": "eng_to_ipa-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c731cebebee003a68e44a79db811ddd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2807939, "upload_time": "2020-01-08T07:04:50", "upload_time_iso_8601": "2020-01-08T07:04:50.477792Z", "url": "https://files.pythonhosted.org/packages/fd/f6/c36ccd1b8cf5ec286f6f516b135f30953db49c0f618f1eedc455afd890d6/eng_to_ipa-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3da63d20d3966d0cf6f94c9aab2d6fbd", "sha256": "0e4fac8370b0ffeaf696193e971b3ff9bd3762e4d153c6d0d280147887e008b1"}, "downloads": -1, "filename": "eng_to_ipa-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3da63d20d3966d0cf6f94c9aab2d6fbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2808070, "upload_time": "2020-04-17T05:02:07", "upload_time_iso_8601": "2020-04-17T05:02:07.852903Z", "url": "https://files.pythonhosted.org/packages/62/3d/8656290e2d537ef66e984a04e903d1a0028ea01524e9dd89e45bb165bc7b/eng_to_ipa-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3da63d20d3966d0cf6f94c9aab2d6fbd", "sha256": "0e4fac8370b0ffeaf696193e971b3ff9bd3762e4d153c6d0d280147887e008b1"}, "downloads": -1, "filename": "eng_to_ipa-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3da63d20d3966d0cf6f94c9aab2d6fbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2808070, "upload_time": "2020-04-17T05:02:07", "upload_time_iso_8601": "2020-04-17T05:02:07.852903Z", "url": "https://files.pythonhosted.org/packages/62/3d/8656290e2d537ef66e984a04e903d1a0028ea01524e9dd89e45bb165bc7b/eng_to_ipa-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:20 2020"}