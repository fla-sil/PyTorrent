{"info": {"author": "Alec Mitchell", "author_email": "apm13@columbia.edu", "bugtrack_url": null, "classifiers": ["Framework :: Zope3", "License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python", "Topic :: Multimedia :: Video", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "p4a.videoembed Package Readme\n=============================\n\nOverview\n--------\n\nA registry and adapters for converting urls for various video sharing sites\ninto embed codes.\n\nThis package provides some functions and zope3 components for converting urls\nfrom common streaming video sites into embed codes.  The purpose is to allow\nfor content types that provide a user entered url to display embeded video\nbased on that url.  This is to avoid allowing users to enter raw html embed\ncodes which is potentially dangerous and cumbersome.  It also allows for\ndynamic scaling of the generated embed code to fit with your page layout.\n\nComponents\n----------\n\nAt the heart of this product is a set of named adapters.  These adapters adapt\na string (url) and an integer (width) and return a unicode embed code.\nCurrently, adapters are provided for the following video sharing sites:\n\n* YouTube http://www.youtube.com/\n* Google Video http://video.google.fr\n* Yahoo Video http://video.yahoo.com/\n* Revver (both http://revver.com and one.revver.com)\n* Vimeo http://vimeo.com\n* Vmix http://vmix.com\n* Blip.tv http://blip.tv\n* iFilm http://ifilm.com\n* MySpace http://vids.myspace.com\n* MetaCafe http://metacafe.com\n* College Humor http://collegehumor.com\n* Veoh http://veoh.com\n* flash video (.flv) using http://www.longtailvideo.com/players/jw-flv-player\n* (.mov .qt .m4v) ># The original revver QT embed\n* VH1 http://vh1.com\n* Live Leak http://liveleak.com\n* Video detective http://videodetective.com\n* Dailymotion http://www.dailymotion.com\n\nBut adding more is as simple as creating a function that checks if the url\nis appropriate for the site you want, and another to convert it into an\nembed code.  You register the latter function as a named adapter, like:\n\n::\n\n  <adapter\n      for=\"str int\"\n      name=\"youtube\"\n      provides=\".interfaces.IEmbedCode\"\n      factory=\".converters.youtube_generator\"\n      />\n\nAnd register the url checking function as a utility with the same\nname:\n\n::\n\n  <utility\n      provides=\".interfaces.IURLChecker\"\n      component=\".converters.youtube_check\"\n      name=\"youtube\" />\n\nYou may optionally provide an integer 'index' as an attribute of the\nchecker to determine the relative order in which the check is made\n(more specific checks should go earlier).\n\nGetting the Embed Code\n----------------------\n\nThere are a couple ways to generate an embed code, depending on your usecase.\nThe easiest is single adaptation of a url:\n\n    from p4a.videoembed.interfaces import IEmbedCode\n    embed_code = IEmbedCode(url)\n\nThis gives an embed of a preset width (425px), to get a custom width, you\nmultiadapt:\n\n    from zope.component import getMultiAdapter\n    embed_code = getMultiAdapter((url, width), IEmbedCode)\n\nThere is also a convenient view provided for use from restricted code, it\noptionally takes a url and width and returns an embed code.  If the url\nis omitted, then it will try and get one from the context by adapting to\nILinkProvider (which indicates the presence of a getLink method).\n\n::\n\n       <div class=\"EmbedCode\"\n            tal:define=\"embed_view nocall:context/@@video-embed.htm;\n                        default_embed embed_view;\n                        custom_width python:embed_view(width=500);\n                        custom_url python:embed_view(url='http://www.youtube.com/watch?v=1111', width=250)\"\n            tal:replace=\"structure default_embed\" />\n\nThis shows how you can use the view from tal to generate a url from an object\nthat implements or is adaptable to ILinkProvider, or using an explicit url\nfrom any object.\n\nIn all of these methods the adapter checks the global utility that the named\nadapters are registered with and finds the appropriate one for the given url.\n\nI hope you find this useful.\n\nAuthor: Alec Mitchell <apm13@columbia.edu>\nSponsor: The Daily Reel http://www.thedailyreel.com\n\nChangelog for videoembed\n\nvideoembed - 1.2 (2009-05-17)\n\n    - fix ComponentLookupError import from zope.component [toutpt]\n    - removed unused imports reported by pyflakes [tom_gross]\n    - add partial Dailymotion support [toutpt]\n\nvideoembed - 1.1 (2008-04-09)\n\n    - added Brightcove support [Nate Aune]\n\nvideoembed - 1.1b1 (2008-02-14)\n\n    - added partial ustream.tv support [Rocky Burt] r1672\n\n    - added code to extract URL to FLV file from Youtube and Blip.tv (Ross Patterson) r1875 and r1879\n\nvideoembed - 1.0alpha1 (2007-04-29)\n\n    - Initial public release.\n      [Rocky Burt]\n\nvideoembed - 0.1 (unreleased)\n\n    - Initial package structure.\n      [zopeskel]", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.plone4artists.org/svn/projects/p4a.videoembed", "keywords": "Embedded Video Plone", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "p4a.videoembed", "package_url": "https://pypi.org/project/p4a.videoembed/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/p4a.videoembed/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.plone4artists.org/svn/projects/p4a.videoembed"}, "release_url": "https://pypi.org/project/p4a.videoembed/1.3/", "requires_dist": null, "requires_python": null, "summary": "A registry and adapters for converting urls for various video sharing sites into embed codes.", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>A registry and adapters for converting urls for various video sharing sites\ninto embed codes.</p>\n<p>This package provides some functions and zope3 components for converting urls\nfrom common streaming video sites into embed codes.  The purpose is to allow\nfor content types that provide a user entered url to display embeded video\nbased on that url.  This is to avoid allowing users to enter raw html embed\ncodes which is potentially dangerous and cumbersome.  It also allows for\ndynamic scaling of the generated embed code to fit with your page layout.</p>\n</div>\n<div id=\"components\">\n<h2>Components</h2>\n<p>At the heart of this product is a set of named adapters.  These adapters adapt\na string (url) and an integer (width) and return a unicode embed code.\nCurrently, adapters are provided for the following video sharing sites:</p>\n<ul>\n<li>YouTube <a href=\"http://www.youtube.com/\" rel=\"nofollow\">http://www.youtube.com/</a></li>\n<li>Google Video <a href=\"http://video.google.fr\" rel=\"nofollow\">http://video.google.fr</a></li>\n<li>Yahoo Video <a href=\"http://video.yahoo.com/\" rel=\"nofollow\">http://video.yahoo.com/</a></li>\n<li>Revver (both <a href=\"http://revver.com\" rel=\"nofollow\">http://revver.com</a> and one.revver.com)</li>\n<li>Vimeo <a href=\"http://vimeo.com\" rel=\"nofollow\">http://vimeo.com</a></li>\n<li>Vmix <a href=\"http://vmix.com\" rel=\"nofollow\">http://vmix.com</a></li>\n<li>Blip.tv <a href=\"http://blip.tv\" rel=\"nofollow\">http://blip.tv</a></li>\n<li>iFilm <a href=\"http://ifilm.com\" rel=\"nofollow\">http://ifilm.com</a></li>\n<li>MySpace <a href=\"http://vids.myspace.com\" rel=\"nofollow\">http://vids.myspace.com</a></li>\n<li>MetaCafe <a href=\"http://metacafe.com\" rel=\"nofollow\">http://metacafe.com</a></li>\n<li>College Humor <a href=\"http://collegehumor.com\" rel=\"nofollow\">http://collegehumor.com</a></li>\n<li>Veoh <a href=\"http://veoh.com\" rel=\"nofollow\">http://veoh.com</a></li>\n<li>flash video (.flv) using <a href=\"http://www.longtailvideo.com/players/jw-flv-player\" rel=\"nofollow\">http://www.longtailvideo.com/players/jw-flv-player</a></li>\n<li>(.mov .qt .m4v) &gt;# The original revver QT embed</li>\n<li>VH1 <a href=\"http://vh1.com\" rel=\"nofollow\">http://vh1.com</a></li>\n<li>Live Leak <a href=\"http://liveleak.com\" rel=\"nofollow\">http://liveleak.com</a></li>\n<li>Video detective <a href=\"http://videodetective.com\" rel=\"nofollow\">http://videodetective.com</a></li>\n<li>Dailymotion <a href=\"http://www.dailymotion.com\" rel=\"nofollow\">http://www.dailymotion.com</a></li>\n</ul>\n<p>But adding more is as simple as creating a function that checks if the url\nis appropriate for the site you want, and another to convert it into an\nembed code.  You register the latter function as a named adapter, like:</p>\n<pre>&lt;adapter\n    for=\"str int\"\n    name=\"youtube\"\n    provides=\".interfaces.IEmbedCode\"\n    factory=\".converters.youtube_generator\"\n    /&gt;\n</pre>\n<p>And register the url checking function as a utility with the same\nname:</p>\n<pre>&lt;utility\n    provides=\".interfaces.IURLChecker\"\n    component=\".converters.youtube_check\"\n    name=\"youtube\" /&gt;\n</pre>\n<p>You may optionally provide an integer \u2018index\u2019 as an attribute of the\nchecker to determine the relative order in which the check is made\n(more specific checks should go earlier).</p>\n</div>\n<div id=\"getting-the-embed-code\">\n<h2>Getting the Embed Code</h2>\n<p>There are a couple ways to generate an embed code, depending on your usecase.\nThe easiest is single adaptation of a url:</p>\n<blockquote>\nfrom p4a.videoembed.interfaces import IEmbedCode\nembed_code = IEmbedCode(url)</blockquote>\n<p>This gives an embed of a preset width (425px), to get a custom width, you\nmultiadapt:</p>\n<blockquote>\nfrom zope.component import getMultiAdapter\nembed_code = getMultiAdapter((url, width), IEmbedCode)</blockquote>\n<p>There is also a convenient view provided for use from restricted code, it\noptionally takes a url and width and returns an embed code.  If the url\nis omitted, then it will try and get one from the context by adapting to\nILinkProvider (which indicates the presence of a getLink method).</p>\n<pre>&lt;div class=\"EmbedCode\"\n     tal:define=\"embed_view nocall:context/@@video-embed.htm;\n                 default_embed embed_view;\n                 custom_width python:embed_view(width=500);\n                 custom_url python:embed_view(url='http://www.youtube.com/watch?v=1111', width=250)\"\n     tal:replace=\"structure default_embed\" /&gt;\n</pre>\n<p>This shows how you can use the view from tal to generate a url from an object\nthat implements or is adaptable to ILinkProvider, or using an explicit url\nfrom any object.</p>\n<p>In all of these methods the adapter checks the global utility that the named\nadapters are registered with and finds the appropriate one for the given url.</p>\n<p>I hope you find this useful.</p>\n<p>Author: Alec Mitchell &lt;<a href=\"mailto:apm13%40columbia.edu\">apm13<span>@</span>columbia<span>.</span>edu</a>&gt;\nSponsor: The Daily Reel <a href=\"http://www.thedailyreel.com\" rel=\"nofollow\">http://www.thedailyreel.com</a></p>\n<p>Changelog for videoembed</p>\n<p>videoembed - 1.2 (2009-05-17)</p>\n<blockquote>\n<ul>\n<li>fix ComponentLookupError import from zope.component [toutpt]</li>\n<li>removed unused imports reported by pyflakes [tom_gross]</li>\n<li>add partial Dailymotion support [toutpt]</li>\n</ul>\n</blockquote>\n<p>videoembed - 1.1 (2008-04-09)</p>\n<blockquote>\n<ul>\n<li>added Brightcove support [Nate Aune]</li>\n</ul>\n</blockquote>\n<p>videoembed - 1.1b1 (2008-02-14)</p>\n<blockquote>\n<ul>\n<li>added partial ustream.tv support [Rocky Burt] r1672</li>\n<li>added code to extract URL to FLV file from Youtube and Blip.tv (Ross Patterson) r1875 and r1879</li>\n</ul>\n</blockquote>\n<p>videoembed - 1.0alpha1 (2007-04-29)</p>\n<blockquote>\n<ul>\n<li>Initial public release.\n[Rocky Burt]</li>\n</ul>\n</blockquote>\n<p>videoembed - 0.1 (unreleased)</p>\n<blockquote>\n<ul>\n<li>Initial package structure.\n[zopeskel]</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 795945, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "ba17405d51b17fa39cab1807fbc6bd93", "sha256": "f84e1cadbd15017bcb3cd4bed779265a8d7d287d4638c88d1b692cecd2546718"}, "downloads": -1, "filename": "p4a.videoembed-1.0-py2.4.egg", "has_sig": false, "md5_digest": "ba17405d51b17fa39cab1807fbc6bd93", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 59340, "upload_time": "2007-11-06T16:03:20", "upload_time_iso_8601": "2007-11-06T16:03:20Z", "url": "https://files.pythonhosted.org/packages/a9/df/0dadded7f84773b8535109cbac01a4dca7aa89a7a16e293d2966d5227fb9/p4a.videoembed-1.0-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "fef2ad2edf31a882ddc222659f92dea3", "sha256": "036a0344fed8a587304ae1b322fcc78dadf31353ef16b5cabde8d3fa6effa53c"}, "downloads": -1, "filename": "p4a.videoembed-1.0.tar.gz", "has_sig": false, "md5_digest": "fef2ad2edf31a882ddc222659f92dea3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24565, "upload_time": "2007-11-06T16:03:21", "upload_time_iso_8601": "2007-11-06T16:03:21Z", "url": "https://files.pythonhosted.org/packages/4f/43/5a0953e8eb6e7d007c3d7f5569b84e930f1e47467ed532669cb9e9314d47/p4a.videoembed-1.0.tar.gz", "yanked": false}], "1.0beta1dev-r1552": [{"comment_text": "", "digests": {"md5": "ac0ae764668f9b1215f53e8078ccc2b3", "sha256": "17104b55f0dd3fb64707e2f2354491fb1217e106e5fbc31900fa8559368664d5"}, "downloads": -1, "filename": "p4a.videoembed-1.0beta1dev_r1552-py2.4.egg", "has_sig": false, "md5_digest": "ac0ae764668f9b1215f53e8078ccc2b3", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 59331, "upload_time": "2007-10-13T00:51:30", "upload_time_iso_8601": "2007-10-13T00:51:30Z", "url": "https://files.pythonhosted.org/packages/a5/21/022756dda430fb58e05effe29d74b89b7f4d42fe176b500b707bfa675cb9/p4a.videoembed-1.0beta1dev_r1552-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "50ddc61e9e8ed22cb233ea3e64e7a22b", "sha256": "3489a9039d5f0b44a61d7b4a78f4b50bb9a09f209cdde09f990955403b480bb6"}, "downloads": -1, "filename": "p4a.videoembed-1.0beta1dev-r1552.tar.gz", "has_sig": false, "md5_digest": "50ddc61e9e8ed22cb233ea3e64e7a22b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24586, "upload_time": "2007-10-13T00:51:31", "upload_time_iso_8601": "2007-10-13T00:51:31Z", "url": "https://files.pythonhosted.org/packages/4e/64/f4ca10f04e5c5cfc9c0555383b2948def9beb7ac93600fe4ae7489abeb30/p4a.videoembed-1.0beta1dev-r1552.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "bd1b702fdd4b11c03668cd34d72f03c8", "sha256": "6fb869e6d45be9eefa2f47c81c32ea9f8d19d11b35e12895755e8ff7b722b3ed"}, "downloads": -1, "filename": "p4a.videoembed-1.1-py2.4.egg", "has_sig": false, "md5_digest": "bd1b702fdd4b11c03668cd34d72f03c8", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 63120, "upload_time": "2008-04-09T15:34:41", "upload_time_iso_8601": "2008-04-09T15:34:41Z", "url": "https://files.pythonhosted.org/packages/a0/d4/8086455fa8326d16b5b59ad5fec617881ba1ad9142461da350fd4f73c7d0/p4a.videoembed-1.1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3858a6184d47e82a546a376b50a726ff", "sha256": "6b1f79ff8d8fa6eb169b2e70a37116e7f9372e27173fb40d141745ce77836e79"}, "downloads": -1, "filename": "p4a.videoembed-1.1.tar.gz", "has_sig": false, "md5_digest": "3858a6184d47e82a546a376b50a726ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25708, "upload_time": "2008-04-09T15:34:40", "upload_time_iso_8601": "2008-04-09T15:34:40Z", "url": "https://files.pythonhosted.org/packages/21/84/42120340fda78cfa984466e92276dd611740724b8284ca6a3547cd08e70c/p4a.videoembed-1.1.tar.gz", "yanked": false}], "1.1b1": [{"comment_text": "", "digests": {"md5": "5900264e46966a625dcf016c49e7cf3b", "sha256": "9a590ec4545743d73cfd4108e4a10c24f4a5c4b455aca190be857d3326458bde"}, "downloads": -1, "filename": "p4a.videoembed-1.1b1-py2.4.egg", "has_sig": false, "md5_digest": "5900264e46966a625dcf016c49e7cf3b", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 61924, "upload_time": "2008-02-14T14:35:08", "upload_time_iso_8601": "2008-02-14T14:35:08Z", "url": "https://files.pythonhosted.org/packages/fb/53/a5880eaa5244f3a19fd87ac8e1e154d599d6f27d2ac1c7147e9fbeae8426/p4a.videoembed-1.1b1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "57a780cfa90d2416de2b1460d1b39639", "sha256": "4f903c17da4e92eb507b6e806ac24f22504e1eace3a41c2cff95ef26df621757"}, "downloads": -1, "filename": "p4a.videoembed-1.1b1.tar.gz", "has_sig": false, "md5_digest": "57a780cfa90d2416de2b1460d1b39639", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25060, "upload_time": "2008-02-14T14:35:09", "upload_time_iso_8601": "2008-02-14T14:35:09Z", "url": "https://files.pythonhosted.org/packages/23/c4/9ac9990bad0c7a2bb5364bb0fccdf12fef4ba03ae5d4b4d95ac6f74deca8/p4a.videoembed-1.1b1.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "983c6b8223c98ed52a6ed4bfa514b09f", "sha256": "0fe117599d3d3053ab235d721173faa5961b2365f6fd110f22dbb88ece23fc76"}, "downloads": -1, "filename": "p4a.videoembed-1.3.zip", "has_sig": false, "md5_digest": "983c6b8223c98ed52a6ed4bfa514b09f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44005, "upload_time": "2011-12-12T13:38:44", "upload_time_iso_8601": "2011-12-12T13:38:44.710943Z", "url": "https://files.pythonhosted.org/packages/33/52/8af0396970a8e8e1144e2a6a7fc020531cf18b19b78da08ec0be22dc7b19/p4a.videoembed-1.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "983c6b8223c98ed52a6ed4bfa514b09f", "sha256": "0fe117599d3d3053ab235d721173faa5961b2365f6fd110f22dbb88ece23fc76"}, "downloads": -1, "filename": "p4a.videoembed-1.3.zip", "has_sig": false, "md5_digest": "983c6b8223c98ed52a6ed4bfa514b09f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44005, "upload_time": "2011-12-12T13:38:44", "upload_time_iso_8601": "2011-12-12T13:38:44.710943Z", "url": "https://files.pythonhosted.org/packages/33/52/8af0396970a8e8e1144e2a6a7fc020531cf18b19b78da08ec0be22dc7b19/p4a.videoembed-1.3.zip", "yanked": false}], "timestamp": "Fri May  8 03:00:20 2020"}