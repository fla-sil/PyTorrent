{"info": {"author": "Mateusz Krzysztof \u0141\u0105cki", "author_email": "matteo.lacki@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Affero General Public License v3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Chemistry"], "description": "# masstodon\n\nYour Python3 module for investigating the Electron Transfer Dissociation in Mass Spectrometry, and more generally finding stuff in the mass spectrum.\n\n# Prerequisites\nPython3\n\n# Installation\n\nThe package can be installed directly from the Python Package Index:\n```\npip install masstodon\n```\n\nOtherwise, download this github repo, use the default branch, and install the software with:\n\n```\npip install .\n```\nfrom the folder containing **setup.py**.\nThis will let you import `masstodon` simply by\n\n```{python}\nimport masstodon\n``` \n\n# Running\n\n## command line interface\n\nIt is possible to run `masstodon` from command line after installing it from PIP.\nGiven that it would be not comfortable to input multiple compounds with their possible modifications and charges from the terminal, we have restricted (for now) the possibility to run `masstodon` in the traditional case of studying precisely one protein and its c/z fragmentation patterns.\n\nTo see a detailed description of the possible arguments, open the terminal (or the Anaconda prompt on Windows, but seriously, Windows? You should feel guilty...) and write\n```{bash}\n    masstodon -h\n```\n\nTo run `masstodon`, you do need to supply at least:\n* the file with the spectrum\n* the tolerance for the search in the m/z axis\n* the amino acid sequence (fasta)\n* the charge of the substance\n\nAll other parameters can be skipped, but it might be silly.\nFor instance, if you know that there is a particular PTM on a given amino acid,\nyou should supply the `-m` parameter, and so on.\n\n\n## Python scripting\n\n**Importing data.** You can analyze individual mass spectra with `masstodon`.\nThis might very well be individual scans of an *Orbitrap*, or a general mass spectrum.\nThe easiest way to import the mass spectrum is to present a plain **ASCII** file with m/z and intensity values in each row, separated by tab or some other whitespace sign.\n\n**Running masstodon**.\nTo call `masstodon` with a single compound, use the `masstodon_single` function.\n\nFor instance:\n\n```{python}\nfrom masstodon.data.substanceP_wh15_wv400 import mz, intensity, fasta, modifications, z # input data\nfrom masstodon.masstodon import masstodon_single # masstodon-proper\nfrom pprint import pprint # nicer output in the terminal\n\nprint(mz)\n# array([  61.01 ,   64.152,   66.515, ..., 1403.9  , 1485.578, 1497.226])\nprint(intensity)\n# array([844.4 ,  25.35, 190.1 , ...,  15.38,  55.62,  21.  ])\nprint(fasta)\n# 'RPKPQQFFGLM'\nprint(modifications)\n# {'11': {'C_carbo': {'H': 1, 'N': 1, 'O': -1}}}\n# (modify 11th amino-acid [starting from 1 for user-friendliness],\n# by adding the chemical diff unto the group of atoms that include the C_carbo.)\nprint(z)\n# 3\n\nm = masstodon_single(mz, intensity, fasta, z,\n                     min_mz_diff        = 1.1, # this is actually the default\n                     modifications      = modifications,\n                     orbitrap           = False, # this ain't an orbitrap profile spectrum\n                     threshold          = \"0.05 Da\", # how far away to search for\n                     isotopic_coverage  = .999, # IsoSpec isotopic envelope coverage\n                     min_prob           = .8, # minimal acceptance probability of a candidate theoretical envelope.\n                     std_cnt            = 3 # m/z standard deviation count filter)\n# for min_prob and std_cnt check out the publication under the filtering procedures.\n\nprint(\"Save spectrum to where you started your python from.\")\nm.plotly(\"spectrum.html\", shape='rectangles', show=True)\n\nprint(\"Getting stats on inintial and final number of nodes and edges in the deconvolution graph.\")\npprint(m.ome.G_stats)\n\nprint(\"Errors: absolute deviations and relative distance between spectra.\")\npprint(m.imperator.errors())\n\nprint(\"Estimates of intensities of reactions and fragmentations.\")\npprint(m.cz_simple.intensities)\npprint(m.cz_simple.probabilities)\n\nprint(\"Save all things under the given path.\")\nm.write(\".\")\n```\n\n<!-- # Running *masstodon*\n\nThere are now two ways to run the program:\n\n1. In terminal.\n2. As part of another Python script.\n\n### Terminal Call\n\nTo run MassTodonPy in terminal, simply type\n\n```\nmasstodon <spectrum> <fasta> <charge> <mz_tol> -o <output_path>\n```\nwhere: \n* <spectrum> is the path to the file containing the spectrum: *mzXml*, *mzml*, or a raw txt file with two columns (recorded m/z and intensities):\n\n```bash\n191.932 17.36\n271.183 98.33\n415.8 17.23\n425.948 15.21\n444.232 208.4\n444.359 6.41\n444.568 117.6\n445.236 44.26\n449.284 19.72\n... ...\n```\n\n* <fasta> is the fasta amino acidic sequence, e.g. AAA of the molecule you look for in the spectrum.\n* <charge> is the charge of the observed precursor\n* <mz_tol> is the distance from the theoretical m/z that MassTodon will look around for signals.\n* <output_path> is the path to where you want to write the output of the software.\n\n\nFor a full list of possibilities type:\n```bash\nmasstodon -h\n```\n\nSay you want to add a modification to your fasta specified protein.\nSuppose that the original peptide was AAAGGGVVAGV, had 2 charges, and included a C-terminal amidation,\ni.e. a replacement of -COOH with -CONH2. \nThe modification diff consists of a change we can symbolically write as O=-1, N=1, H=-1.\nThe C-terminal is on the right valine, which is the eleventh amino acid counting from the N-terminal.\nWe label the atoms included in the backbone of any amino acid as N, C\\_alpha, and C\\_carbo. \nThe amidation only modifies the C_carbo atom, i.e. the one present in the carboxyl group -COOH.\nCalling masstodon would look like:\n\n```bash\nmasstodon spectrum.mzXml AAAGGGVVAGV 2 .01 -modifications '11 C_carbo H=-1 N=1 O=-1'.\n```\n\nIt is crucial to specify the positionment of modification w.r.t. correct backbone atom,\nas the fragmentations severes bonds between them.\nIf you specify it wrongly, then the diff will modify part of the resulting fragments.\n\nMassTodonPy supports the insertion of multiple modifications:\n```bash\nmasstodon spectrum.mzXml AAAGGGVVAGV 2 .01 -modifications '11 C_carbo H=-1 N=1 O=-1 | 2 N H=-1 Li=1'.\n```\n\nThe above silly modification replaces a hydrogen atom with a lithium atom (pardon my chem-lish).\n\n\n### Visualizing Spectra\nMassTodonPy includes a seperate submodule to plot raw spectra using Bokeh library.\nBy default, it is added to the *bin* folder, and can be called:\n\n```bash\nplot_mass_spectrum <spectrum>\n```\n\nFor more options (including properties of the browser plot), type \n```bash\nplot_mass_spectrum -h\n```\n\n### Python Scripting\n\nThe simplest way to use the MassTodon in your Python script is to import the **MassTodon** function from the MassTodonPy module. \nA simple script used to run the previous example peptide, would look like this:\n\n```python\nfrom MassTodonPy import MassTodon\n\nres = MassTodonize( fasta           = AAAGGGVVAGV,\n                    precursor_charge= 2,\n                    mz_prec         = .01,\n                    spectrum        = \"spectrum.mzXml\",\n                    modifications   = {11: {'C_carbo': {'H': 1, 'O': -1, 'N': 1}}} )\n\nres.write('output_path')\n```\n\nThis will run the software and save the results to 'output_path'.\n\nTo visualize the outputs, add:\n\n```python\nfrom MassTodonPy.Plot import bokeh_spectrum\nfrom MassTodonPy.Plot import bokeh_aggregated_precursors\nfrom MassTodonPy.Plot import bokeh_aggregated_fragments\nfrom MassTodonPy.Plot import bokeh_estimated_aggregated_fragments\n\nbokeh_spectrum(res)\nbokeh_aggregated_precursors(res)\nbokeh_aggregated_fragments(res)\nbokeh_estimated_aggregated_fragments(res)\n```\n -->", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MatteoLacki/masstodon", "keywords": "Mass Spectrometry,Mass spectra annotation.Analytical Chemistry,ETD,Electron Transfer Dissociation,Fragmentation", "license": "", "maintainer": "", "maintainer_email": "", "name": "masstodon", "package_url": "https://pypi.org/project/masstodon/", "platform": "", "project_url": "https://pypi.org/project/masstodon/", "project_urls": {"Homepage": "https://github.com/MatteoLacki/masstodon"}, "release_url": "https://pypi.org/project/masstodon/0.16/", "requires_dist": null, "requires_python": "", "summary": "Investigate mass spectra for chemical substances, especially ETD products.", "version": "0.16", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>masstodon</h1>\n<p>Your Python3 module for investigating the Electron Transfer Dissociation in Mass Spectrometry, and more generally finding stuff in the mass spectrum.</p>\n<h1>Prerequisites</h1>\n<p>Python3</p>\n<h1>Installation</h1>\n<p>The package can be installed directly from the Python Package Index:</p>\n<pre><code>pip install masstodon\n</code></pre>\n<p>Otherwise, download this github repo, use the default branch, and install the software with:</p>\n<pre><code>pip install .\n</code></pre>\n<p>from the folder containing <strong>setup.py</strong>.\nThis will let you import <code>masstodon</code> simply by</p>\n<pre>import masstodon\n</pre>\n<h1>Running</h1>\n<h2>command line interface</h2>\n<p>It is possible to run <code>masstodon</code> from command line after installing it from PIP.\nGiven that it would be not comfortable to input multiple compounds with their possible modifications and charges from the terminal, we have restricted (for now) the possibility to run <code>masstodon</code> in the traditional case of studying precisely one protein and its c/z fragmentation patterns.</p>\n<p>To see a detailed description of the possible arguments, open the terminal (or the Anaconda prompt on Windows, but seriously, Windows? You should feel guilty...) and write</p>\n<pre>    masstodon -h\n</pre>\n<p>To run <code>masstodon</code>, you do need to supply at least:</p>\n<ul>\n<li>the file with the spectrum</li>\n<li>the tolerance for the search in the m/z axis</li>\n<li>the amino acid sequence (fasta)</li>\n<li>the charge of the substance</li>\n</ul>\n<p>All other parameters can be skipped, but it might be silly.\nFor instance, if you know that there is a particular PTM on a given amino acid,\nyou should supply the <code>-m</code> parameter, and so on.</p>\n<h2>Python scripting</h2>\n<p><strong>Importing data.</strong> You can analyze individual mass spectra with <code>masstodon</code>.\nThis might very well be individual scans of an <em>Orbitrap</em>, or a general mass spectrum.\nThe easiest way to import the mass spectrum is to present a plain <strong>ASCII</strong> file with m/z and intensity values in each row, separated by tab or some other whitespace sign.</p>\n<p><strong>Running masstodon</strong>.\nTo call <code>masstodon</code> with a single compound, use the <code>masstodon_single</code> function.</p>\n<p>For instance:</p>\n<pre>from masstodon.data.substanceP_wh15_wv400 import mz, intensity, fasta, modifications, z # input data\nfrom masstodon.masstodon import masstodon_single # masstodon-proper\nfrom pprint import pprint # nicer output in the terminal\n\nprint(mz)\n# array([  61.01 ,   64.152,   66.515, ..., 1403.9  , 1485.578, 1497.226])\nprint(intensity)\n# array([844.4 ,  25.35, 190.1 , ...,  15.38,  55.62,  21.  ])\nprint(fasta)\n# 'RPKPQQFFGLM'\nprint(modifications)\n# {'11': {'C_carbo': {'H': 1, 'N': 1, 'O': -1}}}\n# (modify 11th amino-acid [starting from 1 for user-friendliness],\n# by adding the chemical diff unto the group of atoms that include the C_carbo.)\nprint(z)\n# 3\n\nm = masstodon_single(mz, intensity, fasta, z,\n                     min_mz_diff        = 1.1, # this is actually the default\n                     modifications      = modifications,\n                     orbitrap           = False, # this ain't an orbitrap profile spectrum\n                     threshold          = \"0.05 Da\", # how far away to search for\n                     isotopic_coverage  = .999, # IsoSpec isotopic envelope coverage\n                     min_prob           = .8, # minimal acceptance probability of a candidate theoretical envelope.\n                     std_cnt            = 3 # m/z standard deviation count filter)\n# for min_prob and std_cnt check out the publication under the filtering procedures.\n\nprint(\"Save spectrum to where you started your python from.\")\nm.plotly(\"spectrum.html\", shape='rectangles', show=True)\n\nprint(\"Getting stats on inintial and final number of nodes and edges in the deconvolution graph.\")\npprint(m.ome.G_stats)\n\nprint(\"Errors: absolute deviations and relative distance between spectra.\")\npprint(m.imperator.errors())\n\nprint(\"Estimates of intensities of reactions and fragmentations.\")\npprint(m.cz_simple.intensities)\npprint(m.cz_simple.probabilities)\n\nprint(\"Save all things under the given path.\")\nm.write(\".\")\n</pre>\n\n\n          </div>"}, "last_serial": 4790039, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7a6d9969d1977f14bf78210822c4d0e1", "sha256": "6eb198692a73e73ef7f9cb74baa2afba26f5b56ff96ddadae930d2139b4abd2f"}, "downloads": -1, "filename": "masstodon-0.1.tar.gz", "has_sig": false, "md5_digest": "7a6d9969d1977f14bf78210822c4d0e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49457, "upload_time": "2018-09-10T13:13:51", "upload_time_iso_8601": "2018-09-10T13:13:51.845927Z", "url": "https://files.pythonhosted.org/packages/ab/2c/6dcca72c15cdf6e5436ace1a26defc14eb3b91815f1d3d1b8c8cba3467cd/masstodon-0.1.tar.gz", "yanked": false}], "0.11": [{"comment_text": "", "digests": {"md5": "a910f6685ed9843c5fa4ab2104881472", "sha256": "08d65c5d79ef4ad901228d459f78f0fa3affb34241271776c0833f68347c8922"}, "downloads": -1, "filename": "masstodon-0.11.tar.gz", "has_sig": false, "md5_digest": "a910f6685ed9843c5fa4ab2104881472", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49447, "upload_time": "2018-09-10T13:13:53", "upload_time_iso_8601": "2018-09-10T13:13:53.480401Z", "url": "https://files.pythonhosted.org/packages/d0/7c/fd9ad32acb71719e1850730e6ff6ede733cb35fc2e9be071b1935adddd68/masstodon-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "fad7e334ec817c0b22e91d832eb94875", "sha256": "f06fca33648a5e1ee77037a54204e10f10c647ed9880c7b807128920fcc7130d"}, "downloads": -1, "filename": "masstodon-0.12.tar.gz", "has_sig": false, "md5_digest": "fad7e334ec817c0b22e91d832eb94875", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49420, "upload_time": "2018-09-10T13:13:55", "upload_time_iso_8601": "2018-09-10T13:13:55.364008Z", "url": "https://files.pythonhosted.org/packages/01/f5/b637df0ba1c004efc8a4dc394997a81ebb2aca3d9493bc3e1d4e10d85593/masstodon-0.12.tar.gz", "yanked": false}], "0.14": [{"comment_text": "", "digests": {"md5": "e855bb2e0c0d6b90d3ab98dd961bef37", "sha256": "2a6421db291c2a2ed3b3b0a3319de55ac8617798eed2f42772fc132c44479c19"}, "downloads": -1, "filename": "masstodon-0.14.tar.gz", "has_sig": false, "md5_digest": "e855bb2e0c0d6b90d3ab98dd961bef37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 89126, "upload_time": "2018-10-01T09:56:17", "upload_time_iso_8601": "2018-10-01T09:56:17.339261Z", "url": "https://files.pythonhosted.org/packages/ca/58/e49fd490505b72efa96b12aed5683286de41ebbee3cef14569345352257c/masstodon-0.14.tar.gz", "yanked": false}], "0.15": [{"comment_text": "", "digests": {"md5": "77aab65e37b6cf6e69621651ce85ef22", "sha256": "c20e52875286bd9c7dd0d7d54e9a7362a2431c78c60d62c90d28b3411a6f8894"}, "downloads": -1, "filename": "masstodon-0.15.tar.gz", "has_sig": false, "md5_digest": "77aab65e37b6cf6e69621651ce85ef22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81870, "upload_time": "2019-01-22T22:38:23", "upload_time_iso_8601": "2019-01-22T22:38:23.063870Z", "url": "https://files.pythonhosted.org/packages/21/e8/e06003bfb43a80a466a20a2f94e3b68f93b5c3ea20b969b3607e2be0fe6c/masstodon-0.15.tar.gz", "yanked": false}], "0.16": [{"comment_text": "", "digests": {"md5": "bb201732190b2ce133b4340b466adacb", "sha256": "1bacc75e4aa678b1597788995bc125e1be8d2c90d4d0d2c7f4048f22590525fc"}, "downloads": -1, "filename": "masstodon-0.16.tar.gz", "has_sig": false, "md5_digest": "bb201732190b2ce133b4340b466adacb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83495, "upload_time": "2019-02-07T08:20:54", "upload_time_iso_8601": "2019-02-07T08:20:54.748825Z", "url": "https://files.pythonhosted.org/packages/e9/7d/8df74fdf7aba0fd841e9c6dcb21994f97e4e726a4b5acba335a13bd7e0a9/masstodon-0.16.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb201732190b2ce133b4340b466adacb", "sha256": "1bacc75e4aa678b1597788995bc125e1be8d2c90d4d0d2c7f4048f22590525fc"}, "downloads": -1, "filename": "masstodon-0.16.tar.gz", "has_sig": false, "md5_digest": "bb201732190b2ce133b4340b466adacb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83495, "upload_time": "2019-02-07T08:20:54", "upload_time_iso_8601": "2019-02-07T08:20:54.748825Z", "url": "https://files.pythonhosted.org/packages/e9/7d/8df74fdf7aba0fd841e9c6dcb21994f97e4e726a4b5acba335a13bd7e0a9/masstodon-0.16.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:28 2020"}