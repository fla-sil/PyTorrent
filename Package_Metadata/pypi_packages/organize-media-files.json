{"info": {"author": "Andrey Turbov", "author_email": "andrey.turbov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: Other/Proprietary License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Topic :: Multimedia :: Sound/Audio", "Topic :: Utilities"], "description": "What is OMF?\n============\nOrganize Media Files (OMF) is a command-line utility, which helps user to dispatch unsorted media files according meta data tags and configurable rules. OMF is using `Mutagen <https://mutagen.readthedocs.io>`_ to handle audio files. Later more media files support would be added.\n\nInstallation\n============\nUsing \\ *pip install*\\ \\: ::\n    \n    $ pip install organize_media_files\n\nGetting started\n===============\nAfter successfull installation, you can see OMF doing it's job by heading into \\ *example/*\\ , which is located in OMF top source tree directory. ::\n\n    $ cd example/\n\nHere you can see `example.conf <https://github.com/IsaacMother/organize-media-files/blob/master/example/example.conf>`_ and some sample audio files, containing filled metatags. Type: ::\n\n    $ omf -d -c example.conf sample_mp3.mp3\n\n    Moving:\n    example/sample_mp3.mp3\n    To:\n    /tmp/omf_example/some_artist_mp3 - some_title_mp3\n\nYou can see OMF running in \\ ``--dry-run``\\ . It is designed to prevent unexpected behavior and to show user what is going to happen in specified configuration. Before rushing OMF usage, don't forget to set up proper configuration using .conf files.\n\nConfiguration files\n===================\nOMF providing sample \\ **system.conf**\\  and \\ **user.conf**\\ , both located at \\ */etc/.omfrc/*\\  directory. Configuration file's consist of two sections. \\ *[patterns]*\\  section is where user set's up dispatch path's - a \\ *pattern*\\ , which must be given in the form of absolute path's (\\'~\\' may be used to specify \\ *home*\\  directory) with inclusion of ``{metatags}``. \n\nExample audio file pattern in UNIX system\\: ::\n\n    uno = ~/Music/{artist}/{tracknumber}-{title}\n\nValid ``{metatags}`` for audio file are: \\ ``{artist}``\\ , \\ ``{title}``\\ , \\ ``{album}``\\ , \\ ``{tracknumber}``\\ , \\ ``{genre}``\\ , \\ ``{date}``\\ , \\ ``{encoder}``\\ . Due to the simplicity of utility, OMF won't lexically analyze pattern's (except for valid \\ ``{metatags}``\\ ), so it is up to user to specify correct pattern (use \\ ``--dry-run``\\  option to see what's OMF going to do).\n\nUsage\n=====\nBasic OMF usage is: ::\n\n    $ omf filename_1 filename_2 \n\nIn this case \\ ``filename_1``\\  and \\ ``filename_2``\\  will be dispatched according to the default pattern in \\ **user.conf**\\ .\n\nOptions:\n    * \\ ``-h, --help``\\  - show help message.\n    * \\ ``-d, --dry-run``\\  - run OMF without actually moving files and print verbose information.\n    * \\ ``-c FILE, --config FILE``\\  - specify an alternative configuration file.\n    * \\ ``-f, --force``\\  - ignore inconsistencies or/and overwrite files (for example, if a file, in a given list of filenames, with the same name already exists, overwrite it).\n    * \\ ``-p PATTERN-NAME, --pattern PATTERN_NAME``\\  - explicitly specify dispatch pattern.\n\nTODO\n====\n1. Create documentation.\n2. Figure out how to move user.conf to home directory (got bug on it).\n3. Add bash-completion for patterns.\n4. Append extensions to the end of dispathed file.\n\nSome warnings for future\n========================\n1. OMF dispatching files using pathlib.Path(pattern-specified-path). Such behavior can lead to usage misunderstandings.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/IsaacMother/organize-media-files", "keywords": "music collection pranizer", "license": "GPL-3", "maintainer": "", "maintainer_email": "", "name": "organize-media-files", "package_url": "https://pypi.org/project/organize-media-files/", "platform": "all", "project_url": "https://pypi.org/project/organize-media-files/", "project_urls": {"Homepage": "https://github.com/IsaacMother/organize-media-files"}, "release_url": "https://pypi.org/project/organize-media-files/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Organize Media Files", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-omf\">\n<h2>What is OMF?</h2>\n<p>Organize Media Files (OMF) is a command-line utility, which helps user to dispatch unsorted media files according meta data tags and configurable rules. OMF is using <a href=\"https://mutagen.readthedocs.io\" rel=\"nofollow\">Mutagen</a> to handle audio files. Later more media files support would be added.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using <em>pip install</em>:</p>\n<pre>$ pip install organize_media_files\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>After successfull installation, you can see OMF doing it\u2019s job by heading into <em>example/</em>, which is located in OMF top source tree directory.</p>\n<pre>$ cd example/\n</pre>\n<p>Here you can see <a href=\"https://github.com/IsaacMother/organize-media-files/blob/master/example/example.conf\" rel=\"nofollow\">example.conf</a> and some sample audio files, containing filled metatags. Type:</p>\n<pre>$ omf -d -c example.conf sample_mp3.mp3\n\nMoving:\nexample/sample_mp3.mp3\nTo:\n/tmp/omf_example/some_artist_mp3 - some_title_mp3\n</pre>\n<p>You can see OMF running in <tt><span class=\"pre\">--dry-run</span></tt>. It is designed to prevent unexpected behavior and to show user what is going to happen in specified configuration. Before rushing OMF usage, don\u2019t forget to set up proper configuration using .conf files.</p>\n</div>\n<div id=\"configuration-files\">\n<h2>Configuration files</h2>\n<p>OMF providing sample <strong>system.conf</strong> and <strong>user.conf</strong>, both located at <em>/etc/.omfrc/</em> directory. Configuration file\u2019s consist of two sections. <em>[patterns]</em> section is where user set\u2019s up dispatch path\u2019s - a <em>pattern</em>, which must be given in the form of absolute path\u2019s (\u2018~\u2019 may be used to specify <em>home</em> directory) with inclusion of <tt>{metatags}</tt>.</p>\n<p>Example audio file pattern in UNIX system:</p>\n<pre>uno = ~/Music/{artist}/{tracknumber}-{title}\n</pre>\n<p>Valid <tt>{metatags}</tt> for audio file are: <tt>{artist}</tt>, <tt>{title}</tt>, <tt>{album}</tt>, <tt>{tracknumber}</tt>, <tt>{genre}</tt>, <tt>{date}</tt>, <tt>{encoder}</tt>. Due to the simplicity of utility, OMF won\u2019t lexically analyze pattern\u2019s (except for valid <tt>{metatags}</tt>), so it is up to user to specify correct pattern (use <tt><span class=\"pre\">--dry-run</span></tt> option to see what\u2019s OMF going to do).</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Basic OMF usage is:</p>\n<pre>$ omf filename_1 filename_2\n</pre>\n<p>In this case <tt>filename_1</tt> and <tt>filename_2</tt> will be dispatched according to the default pattern in <strong>user.conf</strong>.</p>\n<dl>\n<dt>Options:</dt>\n<dd><ul>\n<li><tt><span class=\"pre\">-h,</span> <span class=\"pre\">--help</span></tt> - show help message.</li>\n<li><tt><span class=\"pre\">-d,</span> <span class=\"pre\">--dry-run</span></tt> - run OMF without actually moving files and print verbose information.</li>\n<li><tt><span class=\"pre\">-c</span> FILE, <span class=\"pre\">--config</span> FILE</tt> - specify an alternative configuration file.</li>\n<li><tt><span class=\"pre\">-f,</span> <span class=\"pre\">--force</span></tt> - ignore inconsistencies or/and overwrite files (for example, if a file, in a given list of filenames, with the same name already exists, overwrite it).</li>\n<li><tt><span class=\"pre\">-p</span> <span class=\"pre\">PATTERN-NAME,</span> <span class=\"pre\">--pattern</span> PATTERN_NAME</tt> - explicitly specify dispatch pattern.</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ol>\n<li>Create documentation.</li>\n<li>Figure out how to move user.conf to home directory (got bug on it).</li>\n<li>Add bash-completion for patterns.</li>\n<li>Append extensions to the end of dispathed file.</li>\n</ol>\n</div>\n<div id=\"some-warnings-for-future\">\n<h2>Some warnings for future</h2>\n<ol>\n<li>OMF dispatching files using pathlib.Path(pattern-specified-path). Such behavior can lead to usage misunderstandings.</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 2412403, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2005c4eef66f958779c0af88113fff41", "sha256": "6c873950ae82d034e111e1640d45238155f76576dd9f027e541d4404b0941fd9"}, "downloads": -1, "filename": "organize-media-files-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2005c4eef66f958779c0af88113fff41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17039, "upload_time": "2016-10-19T20:58:34", "upload_time_iso_8601": "2016-10-19T20:58:34.562227Z", "url": "https://files.pythonhosted.org/packages/81/bd/12093bde1de9cedbc8189b2982df596a18ebf712e81569e3cdd88df7f37f/organize-media-files-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f9c9ef526663631a37f10e29f4feb844", "sha256": "1f0707ec0276ffa4cf0110c7597146980dc7426ece4ce64d859aec03e122d1ee"}, "downloads": -1, "filename": "organize-media-files-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f9c9ef526663631a37f10e29f4feb844", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17018, "upload_time": "2016-10-20T08:30:05", "upload_time_iso_8601": "2016-10-20T08:30:05.156059Z", "url": "https://files.pythonhosted.org/packages/e2/40/9e0b191399d73a5c9d9a05bcb9c5f06262693ca3a51ee8de7e8df43539bd/organize-media-files-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f9c9ef526663631a37f10e29f4feb844", "sha256": "1f0707ec0276ffa4cf0110c7597146980dc7426ece4ce64d859aec03e122d1ee"}, "downloads": -1, "filename": "organize-media-files-1.0.1.tar.gz", "has_sig": false, "md5_digest": "f9c9ef526663631a37f10e29f4feb844", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17018, "upload_time": "2016-10-20T08:30:05", "upload_time_iso_8601": "2016-10-20T08:30:05.156059Z", "url": "https://files.pythonhosted.org/packages/e2/40/9e0b191399d73a5c9d9a05bcb9c5f06262693ca3a51ee8de7e8df43539bd/organize-media-files-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:38 2020"}