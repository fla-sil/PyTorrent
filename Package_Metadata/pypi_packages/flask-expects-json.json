{"info": {"author": "Alfred Melch", "author_email": "alfred.melch@gmx.de", "bugtrack_url": null, "classifiers": ["Framework :: Flask", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "[![version](https://img.shields.io/pypi/v/flask-expects-json.svg)](https://pypi.python.org/pypi/flask-expects-json)\n[![license](https://img.shields.io/pypi/l/flask-expects-json.svg)](https://pypi.python.org/pypi/flask-expects-json)\n[![pyversions](https://img.shields.io/pypi/pyversions/flask-expects-json.svg)](https://pypi.python.org/pypi/flask-expects-json)\n[![pipeline status](https://travis-ci.org/Fischerfredl/flask-expects-json.svg?branch=master)](https://travis-ci.org/Fischerfredl/flask-expects-json)\n[![coverage](https://img.shields.io/codecov/c/github/fischerfredl/flask-expects-json.svg)](https://codecov.io/gh/Fischerfredl/flask-expects-json)\n\n# flask-expects-json\n\nDecorator for REST endpoints in flask. Validate JSON request data.\n\nWhen building json REST services I find myself already specifying json-schema for POST data while defining swagger spec. This package brings json validation to flask. It omits the need to validate the data yourself while profiting from an already established standard (http://json-schema.org/). Defining the schema right before the route helps the self-documentation of an endpoint (see usage).\n\n\nThis package uses jsonschema to for validation: https://pypi.python.org/pypi/jsonschema\n\n## Usage\n\nThis package provides a flask route decorator to validate json payload.\n\n```python\nfrom flask import Flask, jsonify, g, url_for\nfrom flask_expects_json import expects_json\n# example imports\nfrom models import User\nfrom orm import NotUniqueError\n\napp = Flask(__name__)\n\nschema = {\n    'type': 'object',\n    'properties': {\n        'name': {'type': 'string'},\n        'email': {'type': 'string'},\n        'password': {'type': 'string'}\n    },\n    'required': ['email', 'password']\n}\n\n\n@app.route('/register', methods=['POST'])\n@expects_json(schema)\ndef register():\n    # if payload is invalid, request will be aborted with error code 400\n    # if payload is valid it is stored in g.data\n\n    # do something with your data\n    user = User().from_dict(g.data)\n    try:\n        user.save()\n    except NotUniqueError as e:\n        # exception path: duplicate database entry\n        return jsonify(dict(message=e.message)), 409\n\n    # happy path: json response\n    resp = jsonify(dict(auth_token=user.encode_auth_token(), user=user.to_dict()})\n    resp.headers['Location'] = url_for('users.get_user', user_id=user.id)\n    return resp, 201\n```\n\nThe expected json payload is recognizable through \"schema\". If schema is not met the requests aborts (400) with a hinting error message.\n\n\n## Mimetype checking\n\nAs of 1.2.0 this decorator uses `flask.request.get_json(force=False)` to get the data. This means the mimetype of the request has to be 'application/json'. Can be disabled by setting `force=False`. Be aware that this creates a major security vulnerability to CSRF since CORS is not enforced for certain mimetypes. Thanks to Argishti Rostamian for noticing.\n\n```python\n@app.route('/strict')\n@expects_json()\ndef strict():\n    return 'This view will return 400 if mimetype is not \\'application/json\\' \n    \n@app.route('/insecure')\n@expects_json({}, force=False)\ndef insecure():\n    return 'This view will validate the data no matter the mimetype.'\n```\n\n## Default values\n\nNormally validators wont touch the data. By default this package will not fill in missing default values provided in the schema. If you want to you can set `fill_defaults=True` explicitly. The validation will be performed after this action, so default values can lead to invalid data.\n\n## Testing\n\n```python\npython setup.py test\n```\n\n# Changelog\n\n## Unreleased\n\n## 1.4.0 - 2019-09-02\n- Updated dependencies to new major versions.\n- Removed Python 3.4 support (as jsonschema did)\n- Fixed: Typo in readme\n- Changed: Pass whole error object to the 400 abort on schema validation error\n\n## [1.3.1]\n- Changed error message when get_json() fails. \n- Bugfix in DefaultValidatingDraft4Validator when trying to set a default value on strings.\n\n## [1.3.0] - 2018-02-16\n- Changed: Defaults wont be filled in request data by default. Set fill_defaults=True explicitly.\n\n## [1.2.0] - 2018-02-15\n- Security: set force=False as default argument for mimetype checking. Before: force=True for convenience\n\n## [1.1.0] - 2018-02-03\n- Added missing default values will be automatically filled into the request data\n- Added parameter fill_defaults\n\n## [1.0.6] - 2018-01-29\n- Added tests for Python 3.4, 3.5, 3.6\n- Added code coverage\n- Changed code-style/readme. \n\n## 1.0.0 - 2018-01-21\n- Added initial version of expects_json() decorator\n- Added simple validation of request data\n- Added store data in g.data\n\n[Unreleased]: https://github.com/fischerfredl/flask-expects-json/compare/1.3.1...HEAD\n[1.3.1]: https://github.com/fischerfredl/flask-expects-json/compare/1.2.0...1.3.1\n[1.3.0]: https://github.com/fischerfredl/flask-expects-json/compare/1.2.0...1.3.0\n[1.2.0]: https://github.com/fischerfredl/flask-expects-json/compare/1.1.0...1.2.0\n[1.1.0]: https://github.com/fischerfredl/flask-expects-json/compare/1.0.6...1.1.0\n[1.0.6]: https://github.com/fischerfredl/flask-expects-json/compare/1.0.0...1.0.6", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fischerfredl/flask-expects-json", "keywords": "flask,json,validation,schema,jsonschema", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flask-expects-json", "package_url": "https://pypi.org/project/flask-expects-json/", "platform": "", "project_url": "https://pypi.org/project/flask-expects-json/", "project_urls": {"Homepage": "https://github.com/fischerfredl/flask-expects-json"}, "release_url": "https://pypi.org/project/flask-expects-json/1.4.0/", "requires_dist": null, "requires_python": "", "summary": "Decorator for REST endpoints in flask. Validate JSON request data.", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/flask-expects-json\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/72f3280ad445ce75f4197b4d817da0ef6f12045d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b2d657870656374732d6a736f6e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/flask-expects-json\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/673f93fa783c6ef522004eca6553ef4882626593/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f666c61736b2d657870656374732d6a736f6e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/flask-expects-json\" rel=\"nofollow\"><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59c20bf8dd48961fbc5be63c2137caeea0439912/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f666c61736b2d657870656374732d6a736f6e2e737667\"></a>\n<a href=\"https://travis-ci.org/Fischerfredl/flask-expects-json\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69c4f540df6eb15ae06ddf4e21aa0fcc5a798d91/68747470733a2f2f7472617669732d63692e6f72672f46697363686572667265646c2f666c61736b2d657870656374732d6a736f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/Fischerfredl/flask-expects-json\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/393be7c66cb0489d46acc13d6c89d0d8051ac2f7/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f66697363686572667265646c2f666c61736b2d657870656374732d6a736f6e2e737667\"></a></p>\n<h1>flask-expects-json</h1>\n<p>Decorator for REST endpoints in flask. Validate JSON request data.</p>\n<p>When building json REST services I find myself already specifying json-schema for POST data while defining swagger spec. This package brings json validation to flask. It omits the need to validate the data yourself while profiting from an already established standard (<a href=\"http://json-schema.org/\" rel=\"nofollow\">http://json-schema.org/</a>). Defining the schema right before the route helps the self-documentation of an endpoint (see usage).</p>\n<p>This package uses jsonschema to for validation: <a href=\"https://pypi.python.org/pypi/jsonschema\" rel=\"nofollow\">https://pypi.python.org/pypi/jsonschema</a></p>\n<h2>Usage</h2>\n<p>This package provides a flask route decorator to validate json payload.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span><span class=\"p\">,</span> <span class=\"n\">g</span><span class=\"p\">,</span> <span class=\"n\">url_for</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_expects_json</span> <span class=\"kn\">import</span> <span class=\"n\">expects_json</span>\n<span class=\"c1\"># example imports</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"nn\">orm</span> <span class=\"kn\">import</span> <span class=\"n\">NotUniqueError</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'object'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'properties'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">},</span>\n        <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'string'</span><span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'required'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/register'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"nd\">@expects_json</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">register</span><span class=\"p\">():</span>\n    <span class=\"c1\"># if payload is invalid, request will be aborted with error code 400</span>\n    <span class=\"c1\"># if payload is valid it is stored in g.data</span>\n\n    <span class=\"c1\"># do something with your data</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">NotUniqueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># exception path: duplicate database entry</span>\n        <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)),</span> <span class=\"mi\">409</span>\n\n    <span class=\"c1\"># happy path: json response</span>\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"n\">jsonify</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">auth_token</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">encode_auth_token</span><span class=\"p\">(),</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()})</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'Location'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">url_for</span><span class=\"p\">(</span><span class=\"s1\">'users.get_user'</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"mi\">201</span>\n</pre>\n<p>The expected json payload is recognizable through \"schema\". If schema is not met the requests aborts (400) with a hinting error message.</p>\n<h2>Mimetype checking</h2>\n<p>As of 1.2.0 this decorator uses <code>flask.request.get_json(force=False)</code> to get the data. This means the mimetype of the request has to be 'application/json'. Can be disabled by setting <code>force=False</code>. Be aware that this creates a major security vulnerability to CSRF since CORS is not enforced for certain mimetypes. Thanks to Argishti Rostamian for noticing.</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/strict'</span><span class=\"p\">)</span>\n<span class=\"nd\">@expects_json</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">strict</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'This view will return 400 if mimetype is not </span><span class=\"se\">\\'</span><span class=\"s1\">application/json</span><span class=\"se\">\\'</span><span class=\"s1\"> </span>\n    \n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/insecure'</span><span class=\"p\">)</span>\n<span class=\"nd\">@expects_json</span><span class=\"p\">({},</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">insecure</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'This view will validate the data no matter the mimetype.'</span>\n</pre>\n<h2>Default values</h2>\n<p>Normally validators wont touch the data. By default this package will not fill in missing default values provided in the schema. If you want to you can set <code>fill_defaults=True</code> explicitly. The validation will be performed after this action, so default values can lead to invalid data.</p>\n<h2>Testing</h2>\n<pre><span class=\"n\">python</span> <span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">test</span>\n</pre>\n<h1>Changelog</h1>\n<h2>Unreleased</h2>\n<h2>1.4.0 - 2019-09-02</h2>\n<ul>\n<li>Updated dependencies to new major versions.</li>\n<li>Removed Python 3.4 support (as jsonschema did)</li>\n<li>Fixed: Typo in readme</li>\n<li>Changed: Pass whole error object to the 400 abort on schema validation error</li>\n</ul>\n<h2><a href=\"https://github.com/fischerfredl/flask-expects-json/compare/1.2.0...1.3.1\" rel=\"nofollow\">1.3.1</a></h2>\n<ul>\n<li>Changed error message when get_json() fails.</li>\n<li>Bugfix in DefaultValidatingDraft4Validator when trying to set a default value on strings.</li>\n</ul>\n<h2><a href=\"https://github.com/fischerfredl/flask-expects-json/compare/1.2.0...1.3.0\" rel=\"nofollow\">1.3.0</a> - 2018-02-16</h2>\n<ul>\n<li>Changed: Defaults wont be filled in request data by default. Set fill_defaults=True explicitly.</li>\n</ul>\n<h2><a href=\"https://github.com/fischerfredl/flask-expects-json/compare/1.1.0...1.2.0\" rel=\"nofollow\">1.2.0</a> - 2018-02-15</h2>\n<ul>\n<li>Security: set force=False as default argument for mimetype checking. Before: force=True for convenience</li>\n</ul>\n<h2><a href=\"https://github.com/fischerfredl/flask-expects-json/compare/1.0.6...1.1.0\" rel=\"nofollow\">1.1.0</a> - 2018-02-03</h2>\n<ul>\n<li>Added missing default values will be automatically filled into the request data</li>\n<li>Added parameter fill_defaults</li>\n</ul>\n<h2><a href=\"https://github.com/fischerfredl/flask-expects-json/compare/1.0.0...1.0.6\" rel=\"nofollow\">1.0.6</a> - 2018-01-29</h2>\n<ul>\n<li>Added tests for Python 3.4, 3.5, 3.6</li>\n<li>Added code coverage</li>\n<li>Changed code-style/readme.</li>\n</ul>\n<h2>1.0.0 - 2018-01-21</h2>\n<ul>\n<li>Added initial version of expects_json() decorator</li>\n<li>Added simple validation of request data</li>\n<li>Added store data in g.data</li>\n</ul>\n\n          </div>"}, "last_serial": 5769897, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "05a7d54a04cebccde5275d334efa551a", "sha256": "5cb39aa70380f5c906c7eed7ede693b7c473b72313ec438f8a5ac608ded8940a"}, "downloads": -1, "filename": "flask-expects-json-0.0.1.tar.gz", "has_sig": false, "md5_digest": "05a7d54a04cebccde5275d334efa551a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2060, "upload_time": "2018-01-21T13:08:28", "upload_time_iso_8601": "2018-01-21T13:08:28.893118Z", "url": "https://files.pythonhosted.org/packages/98/9a/5f320b6795432d74cd51735a6978e7654441f019c1a9419669e13ca55259/flask-expects-json-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "61b670590e88937d2b432fef9090bbd9", "sha256": "47f7f6a90255df918032fa1e50978b3de9cf36ce735e0bed09e6ca38b9724ef2"}, "downloads": -1, "filename": "flask-expects-json-0.0.2.tar.gz", "has_sig": false, "md5_digest": "61b670590e88937d2b432fef9090bbd9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2060, "upload_time": "2018-01-21T13:11:12", "upload_time_iso_8601": "2018-01-21T13:11:12.885924Z", "url": "https://files.pythonhosted.org/packages/d0/19/c672d5e94eb837fd1d740b27dd8fb61c761f348da0ca785db45a9617c526/flask-expects-json-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "805cc614f82ca51f5106d236b2729c49", "sha256": "ed8ec91bdf59966f50d5742cfbacf4b7525c1980015318c7d2f89a059734394f"}, "downloads": -1, "filename": "flask-expects-json-0.0.3.tar.gz", "has_sig": false, "md5_digest": "805cc614f82ca51f5106d236b2729c49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2058, "upload_time": "2018-01-21T13:15:07", "upload_time_iso_8601": "2018-01-21T13:15:07.181724Z", "url": "https://files.pythonhosted.org/packages/3f/6c/fcf0fc54661db71469c68802a7dc4700c4e512b4bf83b7d0e81f515931f6/flask-expects-json-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "019d4a4c90cd5e9217da3c57eef588e0", "sha256": "f1a59e356563fe72830246545f3cc458d0f2a1029a9066a637481ff4e1a35917"}, "downloads": -1, "filename": "flask-expects-json-0.0.4.tar.gz", "has_sig": false, "md5_digest": "019d4a4c90cd5e9217da3c57eef588e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2057, "upload_time": "2018-01-21T13:18:16", "upload_time_iso_8601": "2018-01-21T13:18:16.869084Z", "url": "https://files.pythonhosted.org/packages/8d/17/9270534666a1b9ae3ee569c5b2fba056e05b080815687a3a0cbad20a2519/flask-expects-json-0.0.4.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "e5d472d022515b67642e965cb89b4a78", "sha256": "17c891c4b3ad636d178bd1aaac348da2cc0577c609dcb27a82f15a5bb8a50832"}, "downloads": -1, "filename": "flask-expects-json-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e5d472d022515b67642e965cb89b4a78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2766, "upload_time": "2018-01-21T13:56:51", "upload_time_iso_8601": "2018-01-21T13:56:51.524434Z", "url": "https://files.pythonhosted.org/packages/fc/b6/8795251cd40e71b3f214e0b0f9d004f78dc5c8adf482574ab8d398031cec/flask-expects-json-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7d68c7e5f5fd2296a5645a73386d383d", "sha256": "e680bb222a179e5bcfa687b72eb0e9039694ae61d260a2badc6e764c242a4e5d"}, "downloads": -1, "filename": "flask-expects-json-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7d68c7e5f5fd2296a5645a73386d383d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3221, "upload_time": "2018-01-21T17:35:45", "upload_time_iso_8601": "2018-01-21T17:35:45.651370Z", "url": "https://files.pythonhosted.org/packages/d0/40/d1a21eebd7fd555f928d625c38b971dd9c3c8ec322586318b15b56e13051/flask-expects-json-0.1.1.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a4ce1543ca7b64f9240a6b3de57fdad2", "sha256": "40c758a0bfc7559946229c49491151bdcd9d7b4081ebc10360ba702975d7dec5"}, "downloads": -1, "filename": "flask-expects-json-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a4ce1543ca7b64f9240a6b3de57fdad2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3465, "upload_time": "2018-01-21T17:39:50", "upload_time_iso_8601": "2018-01-21T17:39:50.824992Z", "url": "https://files.pythonhosted.org/packages/ba/8d/1e8633106e13878d89ede0d8e4be2ce125ed4ea982f2b6051bd06035e0d1/flask-expects-json-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "d1a6fc84aa792762e6b2d95e367048af", "sha256": "99dea01fbec6456e43c5a8092aa784447d2564fae6749cda5ff62b44a485dd10"}, "downloads": -1, "filename": "flask-expects-json-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d1a6fc84aa792762e6b2d95e367048af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2400, "upload_time": "2018-01-22T19:20:53", "upload_time_iso_8601": "2018-01-22T19:20:53.813965Z", "url": "https://files.pythonhosted.org/packages/14/b0/0044b7aa50728e9395fcdf9b4a81d2bf24842b3ec4946ea7b028d026cd77/flask-expects-json-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e463fe2d8cf52843ce0b1f6006b703a4", "sha256": "6ad80a2d602537535900909906e6172ecf2ea2dd32dc2747a479f5464da79729"}, "downloads": -1, "filename": "flask-expects-json-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e463fe2d8cf52843ce0b1f6006b703a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3139, "upload_time": "2018-01-22T19:37:52", "upload_time_iso_8601": "2018-01-22T19:37:52.906743Z", "url": "https://files.pythonhosted.org/packages/d7/2f/1a1cab774ca89238489e0a2b4f00a7e6588d9c6740fc4a163f75f1e9a8ec/flask-expects-json-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "2b4cfb76ab59f6a7cc50f5b0a000e156", "sha256": "574f0e5914172f396f1f33068915419d0e38e893266891e0ca433feffc550047"}, "downloads": -1, "filename": "flask-expects-json-1.0.3.tar.gz", "has_sig": false, "md5_digest": "2b4cfb76ab59f6a7cc50f5b0a000e156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3525, "upload_time": "2018-01-22T19:44:30", "upload_time_iso_8601": "2018-01-22T19:44:30.305272Z", "url": "https://files.pythonhosted.org/packages/3d/80/5e9a6d554416c138cd57b0fa954afe29842723428bed94ce0dc318c3060d/flask-expects-json-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "56d612f244d26ea3ee33963f1277c351", "sha256": "0b380347304addccc2c80fb08b3428002dc582697aff10f8270e8d68b942227e"}, "downloads": -1, "filename": "flask-expects-json-1.0.4.tar.gz", "has_sig": false, "md5_digest": "56d612f244d26ea3ee33963f1277c351", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3536, "upload_time": "2018-01-29T14:07:34", "upload_time_iso_8601": "2018-01-29T14:07:34.663244Z", "url": "https://files.pythonhosted.org/packages/a1/88/bd29a97f0cd8e2085cd7d047bb3250a89fb07bb313f74387889dd69b0db4/flask-expects-json-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "9f6249b4a66a11305fabacd32f34dc08", "sha256": "5a4081bf62b74b1e0d95cb3a5eebea4c78c8260e68fb4f507b34be69e6a164db"}, "downloads": -1, "filename": "flask-expects-json-1.0.5.tar.gz", "has_sig": false, "md5_digest": "9f6249b4a66a11305fabacd32f34dc08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3538, "upload_time": "2018-01-29T14:10:07", "upload_time_iso_8601": "2018-01-29T14:10:07.758868Z", "url": "https://files.pythonhosted.org/packages/5c/51/48aadebe6a53bf79d939013342ca2d18b50198a25e83630349a1cf875b93/flask-expects-json-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "bcc56cdbaaf3d3b0906ec9a0409c344b", "sha256": "d7d779f565d177ab92ecd770fb948c86b917333bac37686eabdbcf8ea132ae2b"}, "downloads": -1, "filename": "flask-expects-json-1.0.6.tar.gz", "has_sig": false, "md5_digest": "bcc56cdbaaf3d3b0906ec9a0409c344b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3541, "upload_time": "2018-01-29T15:44:51", "upload_time_iso_8601": "2018-01-29T15:44:51.858096Z", "url": "https://files.pythonhosted.org/packages/62/22/bf639d7cb249c11bf0f7cf2433dbf78ceed69d0fb4ad7d23664ae42efb02/flask-expects-json-1.0.6.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "daaff7decfadfbf49ec196419eac3381", "sha256": "1b5ebe71dcad9e00e33ee7fc456ced7661f15b036850a29fc962080f850e0fdd"}, "downloads": -1, "filename": "flask-expects-json-1.1.0.tar.gz", "has_sig": false, "md5_digest": "daaff7decfadfbf49ec196419eac3381", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4447, "upload_time": "2018-02-03T13:31:24", "upload_time_iso_8601": "2018-02-03T13:31:24.866414Z", "url": "https://files.pythonhosted.org/packages/27/12/e5e2578d047ce42aad8cfa48270a1e2fe4f9af7c7f8386868ed83cfddef9/flask-expects-json-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "280220fecb746d8737a7697d8c118c70", "sha256": "dd769796ad3ba4c6384fa398b506a5805f0fdd90f5e1d3a29b8b64ccb99a8561"}, "downloads": -1, "filename": "flask-expects-json-1.2.0.tar.gz", "has_sig": false, "md5_digest": "280220fecb746d8737a7697d8c118c70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4725, "upload_time": "2018-02-15T09:53:53", "upload_time_iso_8601": "2018-02-15T09:53:53.285754Z", "url": "https://files.pythonhosted.org/packages/b7/44/159bfa27ab6cd935ed0f3bd8ced241df54468219b1ba7b3a01d638e879a6/flask-expects-json-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "e0679777592e46253821a7d1386dfdc3", "sha256": "fbc413f846f3c5c1fb04cd7b06c138d1a5366944aaecfb4fc7035d58f91875ec"}, "downloads": -1, "filename": "flask-expects-json-1.3.0.tar.gz", "has_sig": false, "md5_digest": "e0679777592e46253821a7d1386dfdc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4764, "upload_time": "2018-02-16T10:27:05", "upload_time_iso_8601": "2018-02-16T10:27:05.320587Z", "url": "https://files.pythonhosted.org/packages/55/8c/46b4d09c33271fe2aef81616b3a07d3a3973eb62796bab1a97d3f416818f/flask-expects-json-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "51898ed0821fbe6f41e47248e6e73829", "sha256": "ea2e10471ca7ba6896b4807857b1924e356a89bf5ed748d6f5f4d80ed0cbb324"}, "downloads": -1, "filename": "flask-expects-json-1.3.1.tar.gz", "has_sig": false, "md5_digest": "51898ed0821fbe6f41e47248e6e73829", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4883, "upload_time": "2018-02-16T13:22:40", "upload_time_iso_8601": "2018-02-16T13:22:40.024139Z", "url": "https://files.pythonhosted.org/packages/66/93/fdc433ce794a8328fb87777db1d871970c3f41464ef88aadd275ab9beaac/flask-expects-json-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "86ba9e4ccb85e29e48034f9d660e3752", "sha256": "4571b7100e344b286ca3bf096f1c6c5a5e22d8b61b68787b469cea6ff439e37f"}, "downloads": -1, "filename": "flask-expects-json-1.4.0.tar.gz", "has_sig": false, "md5_digest": "86ba9e4ccb85e29e48034f9d660e3752", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4787, "upload_time": "2019-09-02T09:32:31", "upload_time_iso_8601": "2019-09-02T09:32:31.333793Z", "url": "https://files.pythonhosted.org/packages/c6/c3/0c95e4c897e36a1abf2baeffd08c869d1531621c93fe995d373993982454/flask-expects-json-1.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "86ba9e4ccb85e29e48034f9d660e3752", "sha256": "4571b7100e344b286ca3bf096f1c6c5a5e22d8b61b68787b469cea6ff439e37f"}, "downloads": -1, "filename": "flask-expects-json-1.4.0.tar.gz", "has_sig": false, "md5_digest": "86ba9e4ccb85e29e48034f9d660e3752", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4787, "upload_time": "2019-09-02T09:32:31", "upload_time_iso_8601": "2019-09-02T09:32:31.333793Z", "url": "https://files.pythonhosted.org/packages/c6/c3/0c95e4c897e36a1abf2baeffd08c869d1531621c93fe995d373993982454/flask-expects-json-1.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:53 2020"}