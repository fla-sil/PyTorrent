{"info": {"author": "Timotheus Kampik & Sule Anjomshoae", "author_email": "tkampik@cs.umu.se, sulea@cs.umu.se", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Documentation"], "description": "[![CircleCI](https://circleci.com/gh/TimKam/py-ciu.svg?style=svg)](https://github.com/TimKam/py-ciu)\n\n# py-ciu\n\n*Explainable Machine Learning through Contextual Importance and Utility*\n\nThe *py-ciu* library provides methods to generate post-hoc explanations for\nmachine learning-based classifiers.\nIt is model agnostic and answers the following questions, given a classification\ndecision:\n\n* How **important** is a specific feature or feature combination for the\n  classification decision? (Contextual Importance, CI)\n\n* How **typical** is a specific feature or feature combination for the\n  given class? (Contextual Utility, CU)\n\n\n## Usage\n\nInstall *py-ciu*:\n\n```\npip install py-ciu\n```\n\nImport the library:\n\n```python\nfrom ciu import determine_ciu\n```\n\nFor the sake of the example, let us also import a data generator, create a\nsynthetic data set, and train a model:\n\n```python\nfrom sklearn.ensemble import RandomForestClassifier\nfrom ciu_tests.loan_data_generator import generate_data\n\ndata = generate_data()\ntrain_data = data['train'][1]\ntest_data = data\ntest_data_encoded = data['test'][1].drop(['approved'], axis=1)\nrandom_forest = RandomForestClassifier(\n    n_estimators=1000,\n    random_state=42\n)\n\nlabels = train_data[['approved']].values.ravel()\ndata = train_data.drop(['approved'], axis=1)\nrandom_forest.fit(data, labels)\n```\n\nThen we classify the case we want to explain and determine the prediction index\nfor the class we are interested in:\n\n```python\nfeature_names = [\n    'age', 'assets', 'monthly_income', 'gender_female', 'gender_male',\n    'gender_other', 'job_type_fixed', 'job_type_none', 'job_type_permanent'\n]\n\ncase = test_data_encoded.values[0]\nexample_prediction = random_forest.predict([test_data_encoded.values[0]])\nexample_prediction_prob = random_forest.predict_proba([test_data_encoded.values[0]])\nprediction_index = 0 if example_prediction[0] > 0.5 else 1\n\nprint(feature_names)\nprint(f'Case: {case}; Prediction {example_prediction}; Probability: {example_prediction_prob}')\n```\n\nNow, we can call *py-ciu*'s ``determine_ciu`` function.\nThe function takes the following parameters:\n\n* ``case_data``: A dictionary that contains the data of the case.\n\n* ``predictor``: The prediction function of the black-box model *py-ciu* should\n                 call.\n\n* ``min_maxs``: A dictionary that contains the feature name (key) and a list of\n                minimal, maximal value, plus a value that indicates if the value\n                has to be an integer (``'feature_name': [min, max, is_int]``).\n\n* ``samples`` (optional): The number of samples *py-ciu* will generate. Defaults\n                          to ``1000``.\n\n* ``prediction_index`` (optional): In case the model returns several\n                                   predictions, it is possible to provide the\n                                   index of the relevant prediction. Defaults to\n                                   ``None``.\n\n* ``category_mapping`` (optional): A mapping of one-hot encoded categorical\n                                   variables to lists of categories and category\n                                   names. Defaults to ``None``.\n\n* ``feature_interactions`` (optional): A list of ``{key: list}`` tuples of\n                                       features whose interactions should be\n                                       evaluated. Defaults to ``[]``.\n\n\nWe configure the CIU parameters and call the CIU function:\n\n```python\ncategory_mapping = {\n    'gender': ['gender_female', 'gender_male', 'gender_other'],\n    'job_type': ['job_type_fixed', 'job_type_none', 'job_type_permanent']\n}\n\nfeature_interactions = [{'assets_income': ['assets', 'monthly_income']}]\n\nciu = determine_ciu(\n    test_data_encoded.iloc[0, :].to_dict(),\n    random_forest.predict_proba,\n    {\n        'age': [20, 70, True],\n        'assets': [-20000, 150000, True],\n        'monthly_income': [0, 20000, True],\n        'gender_female': [0, 1, True],\n        'gender_male': [0, 1, True],\n        'gender_other': [0, 1, True],\n        'job_type_fixed': [0, 1, True],\n        'job_type_none': [0, 1, True],\n        'job_type_permanent': [0, 1, True]\n    },\n    1000,\n    prediction_index,\n    category_mapping,\n    feature_interactions\n)\n```\n\nThe function returns a ``ciu`` object, from which we retrieve the CIU metrics:\n\n```python\nprint(ciu.ci, ciu.cu)\n```\n\nWe can also auto-generate CIU plots:\n\n```python\nciu.plot_ci()\nciu.plot_cu()\n```\n\nMoreover, we can generate textual explanations based on CIU:\n\n```python\nprint(ciu.text_explain())\n```\n\n\nTake a look at the\n[examples](https://github.com/TimKam/py-ciu/tree/master/examples) directory to\nlearn more.\n\n## Authors\n\n* [Timotheus Kampik](https://github.com/TimKam/)\n\n* [Sule Anjomshoae](https://github.com/shulemsi)\n\n## License\nThe library is released under the [BSD Clause-2 License](./LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TimKam/py-ciu/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "py-ciu", "package_url": "https://pypi.org/project/py-ciu/", "platform": "any", "project_url": "https://pypi.org/project/py-ciu/", "project_urls": {"Code": "https://github.com/TimKam/py-ciu/", "Homepage": "https://github.com/TimKam/py-ciu/", "Issue tracker": "https://github.com/TimKam/py-ciu/issues"}, "release_url": "https://pypi.org/project/py-ciu/0.0.3/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Python documentation generator", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://github.com/TimKam/py-ciu\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5242463976025c3335df6645a2c01f6b97bdf296/68747470733a2f2f636972636c6563692e636f6d2f67682f54696d4b616d2f70792d6369752e7376673f7374796c653d737667\"></a></p>\n<h1>py-ciu</h1>\n<p><em>Explainable Machine Learning through Contextual Importance and Utility</em></p>\n<p>The <em>py-ciu</em> library provides methods to generate post-hoc explanations for\nmachine learning-based classifiers.\nIt is model agnostic and answers the following questions, given a classification\ndecision:</p>\n<ul>\n<li>\n<p>How <strong>important</strong> is a specific feature or feature combination for the\nclassification decision? (Contextual Importance, CI)</p>\n</li>\n<li>\n<p>How <strong>typical</strong> is a specific feature or feature combination for the\ngiven class? (Contextual Utility, CU)</p>\n</li>\n</ul>\n<h2>Usage</h2>\n<p>Install <em>py-ciu</em>:</p>\n<pre><code>pip install py-ciu\n</code></pre>\n<p>Import the library:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ciu</span> <span class=\"kn\">import</span> <span class=\"n\">determine_ciu</span>\n</pre>\n<p>For the sake of the example, let us also import a data generator, create a\nsynthetic data set, and train a model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ciu_tests.loan_data_generator</span> <span class=\"kn\">import</span> <span class=\"n\">generate_data</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">generate_data</span><span class=\"p\">()</span>\n<span class=\"n\">train_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'train'</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">test_data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n<span class=\"n\">test_data_encoded</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'test'</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"s1\">'approved'</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">random_forest</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span>\n    <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">train_data</span><span class=\"p\">[[</span><span class=\"s1\">'approved'</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">()</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">train_data</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">([</span><span class=\"s1\">'approved'</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">random_forest</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">)</span>\n</pre>\n<p>Then we classify the case we want to explain and determine the prediction index\nfor the class we are interested in:</p>\n<pre><span class=\"n\">feature_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'assets'</span><span class=\"p\">,</span> <span class=\"s1\">'monthly_income'</span><span class=\"p\">,</span> <span class=\"s1\">'gender_female'</span><span class=\"p\">,</span> <span class=\"s1\">'gender_male'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'gender_other'</span><span class=\"p\">,</span> <span class=\"s1\">'job_type_fixed'</span><span class=\"p\">,</span> <span class=\"s1\">'job_type_none'</span><span class=\"p\">,</span> <span class=\"s1\">'job_type_permanent'</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">case</span> <span class=\"o\">=</span> <span class=\"n\">test_data_encoded</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">example_prediction</span> <span class=\"o\">=</span> <span class=\"n\">random_forest</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([</span><span class=\"n\">test_data_encoded</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"n\">example_prediction_prob</span> <span class=\"o\">=</span> <span class=\"n\">random_forest</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">([</span><span class=\"n\">test_data_encoded</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"n\">prediction_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">if</span> <span class=\"n\">example_prediction</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.5</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">feature_names</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Case: </span><span class=\"si\">{</span><span class=\"n\">case</span><span class=\"si\">}</span><span class=\"s1\">; Prediction </span><span class=\"si\">{</span><span class=\"n\">example_prediction</span><span class=\"si\">}</span><span class=\"s1\">; Probability: </span><span class=\"si\">{</span><span class=\"n\">example_prediction_prob</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Now, we can call <em>py-ciu</em>'s <code>determine_ciu</code> function.\nThe function takes the following parameters:</p>\n<ul>\n<li>\n<p><code>case_data</code>: A dictionary that contains the data of the case.</p>\n</li>\n<li>\n<p><code>predictor</code>: The prediction function of the black-box model <em>py-ciu</em> should\ncall.</p>\n</li>\n<li>\n<p><code>min_maxs</code>: A dictionary that contains the feature name (key) and a list of\nminimal, maximal value, plus a value that indicates if the value\nhas to be an integer (<code>'feature_name': [min, max, is_int]</code>).</p>\n</li>\n<li>\n<p><code>samples</code> (optional): The number of samples <em>py-ciu</em> will generate. Defaults\nto <code>1000</code>.</p>\n</li>\n<li>\n<p><code>prediction_index</code> (optional): In case the model returns several\npredictions, it is possible to provide the\nindex of the relevant prediction. Defaults to\n<code>None</code>.</p>\n</li>\n<li>\n<p><code>category_mapping</code> (optional): A mapping of one-hot encoded categorical\nvariables to lists of categories and category\nnames. Defaults to <code>None</code>.</p>\n</li>\n<li>\n<p><code>feature_interactions</code> (optional): A list of <code>{key: list}</code> tuples of\nfeatures whose interactions should be\nevaluated. Defaults to <code>[]</code>.</p>\n</li>\n</ul>\n<p>We configure the CIU parameters and call the CIU function:</p>\n<pre><span class=\"n\">category_mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'gender'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'gender_female'</span><span class=\"p\">,</span> <span class=\"s1\">'gender_male'</span><span class=\"p\">,</span> <span class=\"s1\">'gender_other'</span><span class=\"p\">],</span>\n    <span class=\"s1\">'job_type'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'job_type_fixed'</span><span class=\"p\">,</span> <span class=\"s1\">'job_type_none'</span><span class=\"p\">,</span> <span class=\"s1\">'job_type_permanent'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">feature_interactions</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'assets_income'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'assets'</span><span class=\"p\">,</span> <span class=\"s1\">'monthly_income'</span><span class=\"p\">]}]</span>\n\n<span class=\"n\">ciu</span> <span class=\"o\">=</span> <span class=\"n\">determine_ciu</span><span class=\"p\">(</span>\n    <span class=\"n\">test_data_encoded</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">(),</span>\n    <span class=\"n\">random_forest</span><span class=\"o\">.</span><span class=\"n\">predict_proba</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span>\n        <span class=\"s1\">'assets'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">20000</span><span class=\"p\">,</span> <span class=\"mi\">150000</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span>\n        <span class=\"s1\">'monthly_income'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">20000</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span>\n        <span class=\"s1\">'gender_female'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span>\n        <span class=\"s1\">'gender_male'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span>\n        <span class=\"s1\">'gender_other'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span>\n        <span class=\"s1\">'job_type_fixed'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span>\n        <span class=\"s1\">'job_type_none'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span>\n        <span class=\"s1\">'job_type_permanent'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"mi\">1000</span><span class=\"p\">,</span>\n    <span class=\"n\">prediction_index</span><span class=\"p\">,</span>\n    <span class=\"n\">category_mapping</span><span class=\"p\">,</span>\n    <span class=\"n\">feature_interactions</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The function returns a <code>ciu</code> object, from which we retrieve the CIU metrics:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ciu</span><span class=\"o\">.</span><span class=\"n\">ci</span><span class=\"p\">,</span> <span class=\"n\">ciu</span><span class=\"o\">.</span><span class=\"n\">cu</span><span class=\"p\">)</span>\n</pre>\n<p>We can also auto-generate CIU plots:</p>\n<pre><span class=\"n\">ciu</span><span class=\"o\">.</span><span class=\"n\">plot_ci</span><span class=\"p\">()</span>\n<span class=\"n\">ciu</span><span class=\"o\">.</span><span class=\"n\">plot_cu</span><span class=\"p\">()</span>\n</pre>\n<p>Moreover, we can generate textual explanations based on CIU:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ciu</span><span class=\"o\">.</span><span class=\"n\">text_explain</span><span class=\"p\">())</span>\n</pre>\n<p>Take a look at the\n<a href=\"https://github.com/TimKam/py-ciu/tree/master/examples\" rel=\"nofollow\">examples</a> directory to\nlearn more.</p>\n<h2>Authors</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/TimKam/\" rel=\"nofollow\">Timotheus Kampik</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/shulemsi\" rel=\"nofollow\">Sule Anjomshoae</a></p>\n</li>\n</ul>\n<h2>License</h2>\n<p>The library is released under the <a href=\"./LICENSE\" rel=\"nofollow\">BSD Clause-2 License</a>.</p>\n\n          </div>"}, "last_serial": 6743636, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bc6106e7e6a6b0e00cacd4f460a198af", "sha256": "9ec4f7751ec67eaba23b4e8b2102b0b840389b942c5c412bdbf816c71d93779e"}, "downloads": -1, "filename": "py_ciu-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bc6106e7e6a6b0e00cacd4f460a198af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6867, "upload_time": "2020-02-28T21:34:20", "upload_time_iso_8601": "2020-02-28T21:34:20.508697Z", "url": "https://files.pythonhosted.org/packages/87/5c/2edbc11257ffb1955467a62508086a43ee8d7b716219eaa91af2c55f529b/py_ciu-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d0a8a6536679677f6ca8d79efcd139d", "sha256": "ee8c8df7c01b42a516ce65af2e1c39c8c1b309462f9a647d5207f4d735ecebd1"}, "downloads": -1, "filename": "py-ciu-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2d0a8a6536679677f6ca8d79efcd139d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5893, "upload_time": "2020-02-28T21:34:22", "upload_time_iso_8601": "2020-02-28T21:34:22.969292Z", "url": "https://files.pythonhosted.org/packages/a5/54/920fc8ef3b86766fd0d763537a6203ffe6f2ade24c2ce4e7ef7970ff1a41/py-ciu-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "21b2acf9521e9cd02ba576a1ebdc21a6", "sha256": "afb5f88434555c7c34df62f2f3c2e75f3591e74a46240f1113c5fa9b52f4769f"}, "downloads": -1, "filename": "py_ciu-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "21b2acf9521e9cd02ba576a1ebdc21a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6974, "upload_time": "2020-02-29T23:44:26", "upload_time_iso_8601": "2020-02-29T23:44:26.470315Z", "url": "https://files.pythonhosted.org/packages/b5/84/e3f95e9b4383f4a3a389d43a486a4b0c8b1b0867e1d15e668965fc329315/py_ciu-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1fc025aebe93372d858823ac09b7647", "sha256": "b4bd8817bf428e5196fcec6a168f11307bf479996c5a1c8e0da91681f2633858"}, "downloads": -1, "filename": "py-ciu-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c1fc025aebe93372d858823ac09b7647", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5988, "upload_time": "2020-02-29T23:44:28", "upload_time_iso_8601": "2020-02-29T23:44:28.626557Z", "url": "https://files.pythonhosted.org/packages/fb/4f/863db7696a0e00c5558aa2d8d4e819e929349fc637649c07415221a82d16/py-ciu-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "8361924b10923988db6df21b5e7c48ba", "sha256": "873bfaef430c9acc06363a5acaf93e021a48dd0542e7fc6849024e2c16a5db5c"}, "downloads": -1, "filename": "py_ciu-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8361924b10923988db6df21b5e7c48ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7033, "upload_time": "2020-03-03T21:32:41", "upload_time_iso_8601": "2020-03-03T21:32:41.601328Z", "url": "https://files.pythonhosted.org/packages/52/3c/afbc493d88783fd6636a60b4fed53e16a675c3a7fcde3841faa81ec2a558/py_ciu-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "390a86d67b377b0021eab57ac4c1ac35", "sha256": "916ee97adbf208eb7d84a2a33e57ffa48096e724f3741b135c54eddba1d83021"}, "downloads": -1, "filename": "py-ciu-0.0.3.tar.gz", "has_sig": false, "md5_digest": "390a86d67b377b0021eab57ac4c1ac35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6057, "upload_time": "2020-03-03T21:32:45", "upload_time_iso_8601": "2020-03-03T21:32:45.262566Z", "url": "https://files.pythonhosted.org/packages/6a/99/22900d0e4d9e48cda5c2d566b8cc22b5edeae3a142efd50e3479b041d1d0/py-ciu-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8361924b10923988db6df21b5e7c48ba", "sha256": "873bfaef430c9acc06363a5acaf93e021a48dd0542e7fc6849024e2c16a5db5c"}, "downloads": -1, "filename": "py_ciu-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8361924b10923988db6df21b5e7c48ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7033, "upload_time": "2020-03-03T21:32:41", "upload_time_iso_8601": "2020-03-03T21:32:41.601328Z", "url": "https://files.pythonhosted.org/packages/52/3c/afbc493d88783fd6636a60b4fed53e16a675c3a7fcde3841faa81ec2a558/py_ciu-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "390a86d67b377b0021eab57ac4c1ac35", "sha256": "916ee97adbf208eb7d84a2a33e57ffa48096e724f3741b135c54eddba1d83021"}, "downloads": -1, "filename": "py-ciu-0.0.3.tar.gz", "has_sig": false, "md5_digest": "390a86d67b377b0021eab57ac4c1ac35", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6057, "upload_time": "2020-03-03T21:32:45", "upload_time_iso_8601": "2020-03-03T21:32:45.262566Z", "url": "https://files.pythonhosted.org/packages/6a/99/22900d0e4d9e48cda5c2d566b8cc22b5edeae3a142efd50e3479b041d1d0/py-ciu-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:27 2020"}