{"info": {"author": "Stijn Van Hoey", "author_email": "stijn@fluves.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# pywaterinfo\n\nPython package to download time series data from waterinfo.be\n\n![Python package](https://github.com/fluves/pywaterinfo/workflows/Python%20package/badge.svg?branch=master)\n\n## Description\n\npywaterinfo facilitates access to [waterinfo.be](https://www.waterinfo.be/), a website managed by the [Flanders Environment Agency (VMM)](https://en.vmm.be/) and [Flanders Hydraulics Research](https://www.waterbouwkundiglaboratorium.be/). The website provides access to real-time water and weather related environmental variables for Flanders (Belgium), such as rainfall, air pressure, discharge, and water level. The package provides functions to search for stations and variables, and download time series.\n\n## Installation\n\n```\npip install pywaterinfo\n```\n\n## Example\n\nTo initialize data requests from VMM, setup the `Waterinfo` class with `vmm` as input:\n\n```\nfrom pywaterinfo import Waterinfo\nvmm = Waterinfo(\"vmm\")\n```\n\nThe time series provided by waterinfo are all defined by a unique identifier called `ts_id`. Each combination of a given __variable__ (e.g. air pressure)\nmeasured at a given __location__ (e.g. Overpelt) with a certain __frequency__ (e.g. 15min) is defined by an `ts_id` identifier. Using such an identifier,\none can download the data of a given period with the command `get_timeseries_values()`. For example, the 15min air pressure time series\nat Overpelt has identifier `ts_id = 78124042`. To get last day of data for the time series with ID `78124042`:\n\n```\ndf = vmm.get_timeseries_values(78124042, period=\"P1D\")\n```\n\npywaterinfo returns the data as a [Pandas DataFrame](https://pandas.pydata.org/pandas-docs/stable/index.html), which provides functionlities to plot and manipulate the time series.\n\nRequesting data from from HIC is very similar:\n\n```\n\nhic = Waterinfo(\"hic\")\n```\n\nGet last day of data for the time series with ID `39496010`, corresponding to high-resolution (5min) conductivity measurements in Dendermonde:\n\n```\ndf = hic.get_timeseries_values(ts_id=\"39496010\", period=\"P1D\")\n```\n\nNext to the request of time series data for a given time series identifier, other\nrequests are supported as well. These functions provide multiple ways to search for the\n`ts_id` you need to download certain data. See the [documentation website](https://fluves.github.io/pywaterinfo/) for more info.\n\n## Note on restrictions of the downloads\n\nThe amount of data downloaded from waterinfo.be is limited via a credit system. You do not need to get a token right away to download data. For limited and irregular downloads, a token will not be required.\n\nWhen you require more extended data requests, please request a download token from the waterinfo.be site administrators via the e-mail address <hydrometrie@waterinfo.be> with a statement of which data and how frequently you would like to download data. You will then receive a client-credit code that can be used to obtain a token that is valid for 24 hours, after which the token can be refreshed with the same client-credit code. The handling of this token is done by\nthe package itself, but it is important to use the code when initializing the `Waterinfo` instance. For example, using a VMM token:\n\n```\nfrom pywaterinfo import Waterinfo\nvmm_token = \"YOUR TOKEN CODE\"\nvmm = Waterinfo(\"vmm\",  token=vmm_token)\n```\n\n## Contribute\n\nIt's good practice to create a separate development environment for your package development. Use your preferred\nsystem (or maybe integrated in your IDE) to setup a Python environment and see those docs to setup an environment\n(conda, pyenv, virtualenv,,...). Once created, you can install all the developer dependencies using pip:\n\n```\npip install -e .[develop]\n```\n\nYou can do a local development install to start using the package. Activate your environment and run:\n\n```\npython setup.py develop\n```\n\nTests are defined with `pytest <https://docs.pytest.org>`_. Write tests and run them using the command:\n\n```\npython setup.py test\n```\n\nDocumentation lives in the `docs` directory and is setup using `Sphinx package <http://www.sphinx-doc.org/en/master/>`_.\nYou can edit the documentation using any text editor and then generate the HTML output by with the command:\n\n```\npython setup.py build_sphinx\n```\n\nThe resulting html files will be in the `docs\\_build\\html folder`.\u00a0Double click the `index.html` to see the website on your local computer.\n\nTo keep the code formatting uniform, `black <https://black.readthedocs.io/en/stable/index.html>`_. is used to make the\ncode styling as consistent as possible. Also a number of other checks are included in the\npre-commit handle (`flake` check of PEP8 guidelines, limit committing large files, trailing whitespaces,...)\n\nThe required dependencies are part of the development requirements\nin the `setup.cfg` file, but make sure to install the pre-commit hook:\n\n```\npre-commit install\npre-commit autoupdate\n```\n\nThe Github actions CI job runs the unit tests, doctest, pre-commit checks and documentation building as well.\n\n## Acknowledgements\n\nThe package development and maintenance is supported by [Fluves](https://fluves.com/).\nPart of the initial development of this package has been supported by [VITO](https://vito.be).\n\n<p align=\"center\">\n  <img src=\"./docs/_static/img/logo_fluves.png\">\n  <img src=\"./docs/_static/img/logo_vito.png\">\n</p>\n\nThis package is just a small wrapper around waterinfo.be to facilitate researchers and other stakeholders in downloading the data from [waterinfo.be](http://www.waterinfo.be). The availability of this data is made possible by *de Vlaamse Milieumaatschappij, Waterbouwkundig Laboratorium, Maritieme Dienstverlening & Kust, Waterwegen en Zeekanaal NV en De Scheepvaart NV*.\n\n## Meta\n\n* We welcome [contributions](.github/CONTRIBUTING.rst) including bug reports.\n* License: MIT\n* Please note that this project is released with a [Contributor Code of Conduct](.github/CODE_OF_CONDUCT.rst). By participating in this project you agree to abide by its terms.\n\nThis project has been set up using PyScaffold 3.2.3. For details and usage\ninformation on PyScaffold see https://pyscaffold.org/.\n\n\n", "description_content_type": "text/markdown; charset=UTF-8; variant=GFM", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fluves/pywaterinfo", "keywords": "", "license": "mit", "maintainer": "", "maintainer_email": "", "name": "pywaterinfo", "package_url": "https://pypi.org/project/pywaterinfo/", "platform": "any", "project_url": "https://pypi.org/project/pywaterinfo/", "project_urls": {"Documentation": "https://github.com/fluves/pywaterinfo", "Homepage": "https://github.com/fluves/pywaterinfo"}, "release_url": "https://pypi.org/project/pywaterinfo/0.2.0/", "requires_dist": ["pandas", "requests", "pytest ; extra == 'develop'", "pytest-cov ; extra == 'develop'", "sphinx ; extra == 'develop'", "sphinx-rtd-theme ; extra == 'develop'", "recommonmark ; extra == 'develop'", "pre-commit ; extra == 'develop'", "black ; extra == 'develop'"], "requires_python": ">=3.6", "summary": "Python package to download time series data from waterinfo.be", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pywaterinfo</h1>\n<p>Python package to download time series data from waterinfo.be</p>\n<p><img alt=\"Python package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ecbd6fb894d47a0826c912cb5eb6ce5adc6b50b/68747470733a2f2f6769746875622e636f6d2f666c757665732f70797761746572696e666f2f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e7376673f6272616e63683d6d6173746572\"></p>\n<h2>Description</h2>\n<p>pywaterinfo facilitates access to <a href=\"https://www.waterinfo.be/\" rel=\"nofollow\">waterinfo.be</a>, a website managed by the <a href=\"https://en.vmm.be/\" rel=\"nofollow\">Flanders Environment Agency (VMM)</a> and <a href=\"https://www.waterbouwkundiglaboratorium.be/\" rel=\"nofollow\">Flanders Hydraulics Research</a>. The website provides access to real-time water and weather related environmental variables for Flanders (Belgium), such as rainfall, air pressure, discharge, and water level. The package provides functions to search for stations and variables, and download time series.</p>\n<h2>Installation</h2>\n<pre><code>pip install pywaterinfo\n</code></pre>\n<h2>Example</h2>\n<p>To initialize data requests from VMM, setup the <code>Waterinfo</code> class with <code>vmm</code> as input:</p>\n<pre><code>from pywaterinfo import Waterinfo\nvmm = Waterinfo(\"vmm\")\n</code></pre>\n<p>The time series provided by waterinfo are all defined by a unique identifier called <code>ts_id</code>. Each combination of a given <strong>variable</strong> (e.g. air pressure)\nmeasured at a given <strong>location</strong> (e.g. Overpelt) with a certain <strong>frequency</strong> (e.g. 15min) is defined by an <code>ts_id</code> identifier. Using such an identifier,\none can download the data of a given period with the command <code>get_timeseries_values()</code>. For example, the 15min air pressure time series\nat Overpelt has identifier <code>ts_id = 78124042</code>. To get last day of data for the time series with ID <code>78124042</code>:</p>\n<pre><code>df = vmm.get_timeseries_values(78124042, period=\"P1D\")\n</code></pre>\n<p>pywaterinfo returns the data as a <a href=\"https://pandas.pydata.org/pandas-docs/stable/index.html\" rel=\"nofollow\">Pandas DataFrame</a>, which provides functionlities to plot and manipulate the time series.</p>\n<p>Requesting data from from HIC is very similar:</p>\n<pre><code>\nhic = Waterinfo(\"hic\")\n</code></pre>\n<p>Get last day of data for the time series with ID <code>39496010</code>, corresponding to high-resolution (5min) conductivity measurements in Dendermonde:</p>\n<pre><code>df = hic.get_timeseries_values(ts_id=\"39496010\", period=\"P1D\")\n</code></pre>\n<p>Next to the request of time series data for a given time series identifier, other\nrequests are supported as well. These functions provide multiple ways to search for the\n<code>ts_id</code> you need to download certain data. See the <a href=\"https://fluves.github.io/pywaterinfo/\" rel=\"nofollow\">documentation website</a> for more info.</p>\n<h2>Note on restrictions of the downloads</h2>\n<p>The amount of data downloaded from waterinfo.be is limited via a credit system. You do not need to get a token right away to download data. For limited and irregular downloads, a token will not be required.</p>\n<p>When you require more extended data requests, please request a download token from the waterinfo.be site administrators via the e-mail address <a href=\"mailto:hydrometrie@waterinfo.be\">hydrometrie@waterinfo.be</a> with a statement of which data and how frequently you would like to download data. You will then receive a client-credit code that can be used to obtain a token that is valid for 24 hours, after which the token can be refreshed with the same client-credit code. The handling of this token is done by\nthe package itself, but it is important to use the code when initializing the <code>Waterinfo</code> instance. For example, using a VMM token:</p>\n<pre><code>from pywaterinfo import Waterinfo\nvmm_token = \"YOUR TOKEN CODE\"\nvmm = Waterinfo(\"vmm\",  token=vmm_token)\n</code></pre>\n<h2>Contribute</h2>\n<p>It's good practice to create a separate development environment for your package development. Use your preferred\nsystem (or maybe integrated in your IDE) to setup a Python environment and see those docs to setup an environment\n(conda, pyenv, virtualenv,,...). Once created, you can install all the developer dependencies using pip:</p>\n<pre><code>pip install -e .[develop]\n</code></pre>\n<p>You can do a local development install to start using the package. Activate your environment and run:</p>\n<pre><code>python setup.py develop\n</code></pre>\n<p>Tests are defined with <code>pytest &lt;https://docs.pytest.org&gt;</code>_. Write tests and run them using the command:</p>\n<pre><code>python setup.py test\n</code></pre>\n<p>Documentation lives in the <code>docs</code> directory and is setup using <code>Sphinx package &lt;http://www.sphinx-doc.org/en/master/&gt;</code>_.\nYou can edit the documentation using any text editor and then generate the HTML output by with the command:</p>\n<pre><code>python setup.py build_sphinx\n</code></pre>\n<p>The resulting html files will be in the <code>docs\\_build\\html folder</code>.\u00a0Double click the <code>index.html</code> to see the website on your local computer.</p>\n<p>To keep the code formatting uniform, <code>black &lt;https://black.readthedocs.io/en/stable/index.html&gt;</code>_. is used to make the\ncode styling as consistent as possible. Also a number of other checks are included in the\npre-commit handle (<code>flake</code> check of PEP8 guidelines, limit committing large files, trailing whitespaces,...)</p>\n<p>The required dependencies are part of the development requirements\nin the <code>setup.cfg</code> file, but make sure to install the pre-commit hook:</p>\n<pre><code>pre-commit install\npre-commit autoupdate\n</code></pre>\n<p>The Github actions CI job runs the unit tests, doctest, pre-commit checks and documentation building as well.</p>\n<h2>Acknowledgements</h2>\n<p>The package development and maintenance is supported by <a href=\"https://fluves.com/\" rel=\"nofollow\">Fluves</a>.\nPart of the initial development of this package has been supported by <a href=\"https://vito.be\" rel=\"nofollow\">VITO</a>.</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04308a8e069e21d4847c4b9a5624dd2d196993e7/2e2f646f63732f5f7374617469632f696d672f6c6f676f5f666c757665732e706e67\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d7486c0a67bc1a3fce15e3cbb1a90991f4253b78/2e2f646f63732f5f7374617469632f696d672f6c6f676f5f7669746f2e706e67\">\n</p>\n<p>This package is just a small wrapper around waterinfo.be to facilitate researchers and other stakeholders in downloading the data from <a href=\"http://www.waterinfo.be\" rel=\"nofollow\">waterinfo.be</a>. The availability of this data is made possible by <em>de Vlaamse Milieumaatschappij, Waterbouwkundig Laboratorium, Maritieme Dienstverlening &amp; Kust, Waterwegen en Zeekanaal NV en De Scheepvaart NV</em>.</p>\n<h2>Meta</h2>\n<ul>\n<li>We welcome <a href=\".github/CONTRIBUTING.rst\" rel=\"nofollow\">contributions</a> including bug reports.</li>\n<li>License: MIT</li>\n<li>Please note that this project is released with a <a href=\".github/CODE_OF_CONDUCT.rst\" rel=\"nofollow\">Contributor Code of Conduct</a>. By participating in this project you agree to abide by its terms.</li>\n</ul>\n<p>This project has been set up using PyScaffold 3.2.3. For details and usage\ninformation on PyScaffold see <a href=\"https://pyscaffold.org/\" rel=\"nofollow\">https://pyscaffold.org/</a>.</p>\n\n          </div>"}, "last_serial": 7083974, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "223a21a205442a4cfe4fdfc330195b9d", "sha256": "2f5ab4a3de06acb6cbaaab889ce49cc188606da6248764987dccbd8892f55d64"}, "downloads": -1, "filename": "pywaterinfo-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "223a21a205442a4cfe4fdfc330195b9d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 13372, "upload_time": "2020-04-21T16:00:59", "upload_time_iso_8601": "2020-04-21T16:00:59.970140Z", "url": "https://files.pythonhosted.org/packages/34/b9/3bc3e8ac081a7ff2a65f93dd3eef650be9b8abc1cb3327c994b00a465cda/pywaterinfo-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8162769cef8990c0dcf060773ea77dd3", "sha256": "1955c6f6a9767cd38a34bf2c892a6a44b8abb98c1f45358da03a44b447f362e1"}, "downloads": -1, "filename": "pywaterinfo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8162769cef8990c0dcf060773ea77dd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41345, "upload_time": "2020-04-21T16:01:02", "upload_time_iso_8601": "2020-04-21T16:01:02.635567Z", "url": "https://files.pythonhosted.org/packages/85/27/476bdb4d0653eff24d78f1f15cd315c8cb1ad5478ea66ae55f38c39798e4/pywaterinfo-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f5f18a746a1012dd70935ab8a6312aab", "sha256": "87dd2f9765360bba5b12fd0e559ba388ecc4ac72242342dfcdb5f8f905888cbc"}, "downloads": -1, "filename": "pywaterinfo-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f5f18a746a1012dd70935ab8a6312aab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 13971, "upload_time": "2020-04-23T12:02:32", "upload_time_iso_8601": "2020-04-23T12:02:32.900261Z", "url": "https://files.pythonhosted.org/packages/47/4d/748bf92db26f2db5cda04d526c6be2d99e0d92335cd0f610d09c94f19a5a/pywaterinfo-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2f9e0073c1b98cd009c0c908c66a911", "sha256": "ace739c23ccccc7cc97d507cbae5865fd854c7c29000cc09d2d0f208dd4a1983"}, "downloads": -1, "filename": "pywaterinfo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e2f9e0073c1b98cd009c0c908c66a911", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41802, "upload_time": "2020-04-23T12:02:33", "upload_time_iso_8601": "2020-04-23T12:02:33.994224Z", "url": "https://files.pythonhosted.org/packages/a3/10/e3a3046395b14d65db4c9f6c7a2783f5ac5f983a9d12e83e2d5d2f49982c/pywaterinfo-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f5f18a746a1012dd70935ab8a6312aab", "sha256": "87dd2f9765360bba5b12fd0e559ba388ecc4ac72242342dfcdb5f8f905888cbc"}, "downloads": -1, "filename": "pywaterinfo-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f5f18a746a1012dd70935ab8a6312aab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 13971, "upload_time": "2020-04-23T12:02:32", "upload_time_iso_8601": "2020-04-23T12:02:32.900261Z", "url": "https://files.pythonhosted.org/packages/47/4d/748bf92db26f2db5cda04d526c6be2d99e0d92335cd0f610d09c94f19a5a/pywaterinfo-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e2f9e0073c1b98cd009c0c908c66a911", "sha256": "ace739c23ccccc7cc97d507cbae5865fd854c7c29000cc09d2d0f208dd4a1983"}, "downloads": -1, "filename": "pywaterinfo-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e2f9e0073c1b98cd009c0c908c66a911", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 41802, "upload_time": "2020-04-23T12:02:33", "upload_time_iso_8601": "2020-04-23T12:02:33.994224Z", "url": "https://files.pythonhosted.org/packages/a3/10/e3a3046395b14d65db4c9f6c7a2783f5ac5f983a9d12e83e2d5d2f49982c/pywaterinfo-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:42 2020"}