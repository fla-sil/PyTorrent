{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "**Lord of the Config** is a super-simple YAML-based configuration system. No\nmore meaningless key-checking or file creation. LOTConfig makes it easy to\ncreate, manage, and write configurations.\n\nRepository: https://bitbucket.org/bear_belly/lord_of_the_config\n\n## Examples\n\nHere are some quick-and-dirty examples for how the engine works::\n\n    Python 3.6.3 (default, Oct  3 2017, 21:45:48)\n    [GCC 7.2.0] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> from lotconfig import Config\n    >>> config = Config.load_or_create(\"sample.yaml\")\n    >>> config['basic/thing']\n        'my_value'\n\n## Loading a config\n\nConfigs are loaded from YAML files. To load a config use the `Config.load`,\nmethod or--better yet--the `Config.load_or_create()` method for fool-proof\nconfig loading. This will create the file if it doesn't exist.\n\n## Accessing config values\n\nTo access configuration values, you can either use `config.get()` or\ndict-like access:\n\n    # This will return \"default_value\" if nothing is set in '/path/to/param'\n    config.get('path/to/param', 'default_value')\n    # This will just return `None` if nothing is set in '/path/to/param'\n    config['/path/to/param']\n\nYou can use typical dict functions, too, like `in`.\n\n## Setting Configuration Values\n\nWoah, there tiger! Unfortunately this isn't implemented yet. Since LOTConfig\nimplements advanced features (see below), setting a configruation value is\npretty intensive.\n\nHopefully it'll happen in the future.\n\nIn the meantime you'll be greeted with an Exception if you try to do this.\n\n## Writing a configuration\n\nTo write a configuration, call `config.write()` or `config.write_stream()`.\n\n## Advanced features\n\n### Modes\n\n**Modes** are special keywords in the yaml configuration.\n\nThere's a default keyword you can specify at the beginning of the file\nto specify a mode. For example::\n\n    mode: development\n\nThis mode can be used throughout the file to specify different\nenvironments. For the mode value, prefix it with '@' (**and make sure\nto surround it with quotes, since YAML doesn't like '@' for keys**).\nFor example:\n\n    server:\n        '@development':\n            host: localhost\n            port: 5000\n        '@production':\n            host: example.com\n            port: 5000\n\nThis way, whenever ``mode`` is ``'production'``, you can refer ``server``\nwill automatically refer to ``{host: \"example.com\", \"port\": 5000}``, and if\nmode is set to ``developemnt``, then ``server`` will refer to\n``{host: \"localhost\", \"port\": 5000}``.\n\n**IMPORTANT.** These mode keys are essentially invisible. You can't\nforce the configuation to read ``config['server/@development/host']``.\n\nSo if mode is ``production`` ``config['server/host']`` is ``example.com``.\nIf mode is ``development`` ``config['server/host']`` is ``localhost``.\n\n### References\n\nDon't repeat yourself. You can refer to another value within the config\nusing a key reference. Key references are strings that refer to other\nconfig values.\n\nReferences are preceded with a tilde (``~``).\n\nConsider the following example:\n\n    database:\n        home: ~server1\n        remote: ~server2\n    hardware:\n        servers:\n            server1: 192.168.0.1\n            server2: 192.168.0.2\n\nThis would result in the following configuration:\n\n    >> config['database/home']\n      '192.168.0.1'\n    >> config['database/remote']\n      '192.16.0.2'\n\nSee? References help you to reduce the amount you have to type. You can even\nuse it for complex configurations:\n\n    letter_a:\n        category_a: ~cat_a\n        category_b: ~cat_b\n    letter_b:\n        cat_a:\n            item_a: 1\n            item_b: false\n        cat_b:\n            item_a: 19\n            item_b: 20\n\nThis would result in the following configuration:\n\n    >> config['letter_a/category_a']\n      {'item_a': 1, 'item_b': false}\n\n### evals\n\nEvals are probably the most powerful fo the bunch. They evaluate raw Python\ncode. **As such, use LOTConfig only on configuration files you trust**. In\nfuture versions a paramter may be passed to turn on evaluations.\n\nEvals begin with the keyword `eval>>`. The result is *always* a raw string.\nFor example:\n\n    key: eval>> 1+2  # results in `config['key']` -> '3'\n\nTwo modules are available to be evaluated: `os` and `env`.\n\n    key: eval>> os.environ['DISPLAY']\n    # results in `config['key']` -> ':0'\n\nHome-page: UNKNOWN\nAuthor: Jordan Hewitt\nAuthor-email: jordan.h@startmail.com\nLicense: GPLv3\nDescription-Content-Type: UNKNOWN\nDescription: UNKNOWN\nPlatform: UNKNOWN\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "lotconfig", "package_url": "https://pypi.org/project/lotconfig/", "platform": "", "project_url": "https://pypi.org/project/lotconfig/", "project_urls": null, "release_url": "https://pypi.org/project/lotconfig/1.3/", "requires_dist": ["dpath", "pyyaml"], "requires_python": "", "summary": "# Lord of the Config", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Lord of the Config</strong> is a super-simple YAML-based configuration system. No\nmore meaningless key-checking or file creation. LOTConfig makes it easy to\ncreate, manage, and write configurations.</p>\n<p>Repository: <a href=\"https://bitbucket.org/bear_belly/lord_of_the_config\" rel=\"nofollow\">https://bitbucket.org/bear_belly/lord_of_the_config</a></p>\n<p>## Examples</p>\n<p>Here are some quick-and-dirty examples for how the engine works:</p>\n<pre>Python 3.6.3 (default, Oct  3 2017, 21:45:48)\n[GCC 7.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from lotconfig import Config\n&gt;&gt;&gt; config = Config.load_or_create(\"sample.yaml\")\n&gt;&gt;&gt; config['basic/thing']\n    'my_value'\n</pre>\n<p>## Loading a config</p>\n<p>Configs are loaded from YAML files. To load a config use the <cite>Config.load</cite>,\nmethod or\u2013better yet\u2013the <cite>Config.load_or_create()</cite> method for fool-proof\nconfig loading. This will create the file if it doesn\u2019t exist.</p>\n<p>## Accessing config values</p>\n<p>To access configuration values, you can either use <cite>config.get()</cite> or\ndict-like access:</p>\n<blockquote>\n# This will return \u201cdefault_value\u201d if nothing is set in \u2018/path/to/param\u2019\nconfig.get(\u2018path/to/param\u2019, \u2018default_value\u2019)\n# This will just return <cite>None</cite> if nothing is set in \u2018/path/to/param\u2019\nconfig[\u2018/path/to/param\u2019]</blockquote>\n<p>You can use typical dict functions, too, like <cite>in</cite>.</p>\n<p>## Setting Configuration Values</p>\n<p>Woah, there tiger! Unfortunately this isn\u2019t implemented yet. Since LOTConfig\nimplements advanced features (see below), setting a configruation value is\npretty intensive.</p>\n<p>Hopefully it\u2019ll happen in the future.</p>\n<p>In the meantime you\u2019ll be greeted with an Exception if you try to do this.</p>\n<p>## Writing a configuration</p>\n<p>To write a configuration, call <cite>config.write()</cite> or <cite>config.write_stream()</cite>.</p>\n<p>## Advanced features</p>\n<p>### Modes</p>\n<p><strong>Modes</strong> are special keywords in the yaml configuration.</p>\n<p>There\u2019s a default keyword you can specify at the beginning of the file\nto specify a mode. For example:</p>\n<pre>mode: development\n</pre>\n<p>This mode can be used throughout the file to specify different\nenvironments. For the mode value, prefix it with \u2018@\u2019 (<strong>and make sure\nto surround it with quotes, since YAML doesn\u2019t like \u2018@\u2019 for keys</strong>).\nFor example:</p>\n<blockquote>\n<dl>\n<dt>server:</dt>\n<dd><dl>\n<dt><a href=\"mailto:'%40development\">\u2018<span>@</span>development</a>\u2019:</dt>\n<dd>host: localhost\nport: 5000</dd>\n<dt><a href=\"mailto:'%40production\">\u2018<span>@</span>production</a>\u2019:</dt>\n<dd>host: example.com\nport: 5000</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n<p>This way, whenever <tt>mode</tt> is <tt>'production'</tt>, you can refer <tt>server</tt>\nwill automatically refer to <tt>{host: \"example.com\", \"port\": 5000}</tt>, and if\nmode is set to <tt>developemnt</tt>, then <tt>server</tt> will refer to\n<tt>{host: \"localhost\", \"port\": 5000}</tt>.</p>\n<p><strong>IMPORTANT.</strong> These mode keys are essentially invisible. You can\u2019t\nforce the configuation to read <tt><span class=\"pre\">config['server/@development/host']</span></tt>.</p>\n<p>So if mode is <tt>production</tt> <tt><span class=\"pre\">config['server/host']</span></tt> is <tt>example.com</tt>.\nIf mode is <tt>development</tt> <tt><span class=\"pre\">config['server/host']</span></tt> is <tt>localhost</tt>.</p>\n<p>### References</p>\n<p>Don\u2019t repeat yourself. You can refer to another value within the config\nusing a key reference. Key references are strings that refer to other\nconfig values.</p>\n<p>References are preceded with a tilde (<tt>~</tt>).</p>\n<p>Consider the following example:</p>\n<blockquote>\n<dl>\n<dt>database:</dt>\n<dd>home: ~server1\nremote: ~server2</dd>\n<dt>hardware:</dt>\n<dd><dl>\n<dt>servers:</dt>\n<dd>server1: 192.168.0.1\nserver2: 192.168.0.2</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n<p>This would result in the following configuration:</p>\n<blockquote>\n<dl>\n<dt>&gt;&gt; config[\u2018database/home\u2019]</dt>\n<dd>\u2018192.168.0.1\u2019</dd>\n<dt>&gt;&gt; config[\u2018database/remote\u2019]</dt>\n<dd>\u2018192.16.0.2\u2019</dd>\n</dl>\n</blockquote>\n<p>See? References help you to reduce the amount you have to type. You can even\nuse it for complex configurations:</p>\n<blockquote>\n<dl>\n<dt>letter_a:</dt>\n<dd>category_a: ~cat_a\ncategory_b: ~cat_b</dd>\n<dt>letter_b:</dt>\n<dd><dl>\n<dt>cat_a:</dt>\n<dd>item_a: 1\nitem_b: false</dd>\n<dt>cat_b:</dt>\n<dd>item_a: 19\nitem_b: 20</dd>\n</dl>\n</dd>\n</dl>\n</blockquote>\n<p>This would result in the following configuration:</p>\n<blockquote>\n<dl>\n<dt>&gt;&gt; config[\u2018letter_a/category_a\u2019]</dt>\n<dd>{\u2018item_a\u2019: 1, \u2018item_b\u2019: false}</dd>\n</dl>\n</blockquote>\n<p>### evals</p>\n<p>Evals are probably the most powerful fo the bunch. They evaluate raw Python\ncode. <strong>As such, use LOTConfig only on configuration files you trust</strong>. In\nfuture versions a paramter may be passed to turn on evaluations.</p>\n<p>Evals begin with the keyword <cite>eval&gt;&gt;</cite>. The result is <em>always</em> a raw string.\nFor example:</p>\n<blockquote>\nkey: eval&gt;&gt; 1+2  # results in <cite>config[\u2018key\u2019]</cite> -&gt; \u20183\u2019</blockquote>\n<p>Two modules are available to be evaluated: <cite>os</cite> and <cite>env</cite>.</p>\n<blockquote>\nkey: eval&gt;&gt; os.environ[\u2018DISPLAY\u2019]\n# results in <cite>config[\u2018key\u2019]</cite> -&gt; \u2018:0\u2019</blockquote>\n<p>Home-page: UNKNOWN\nAuthor: Jordan Hewitt\nAuthor-email: <a href=\"mailto:jordan.h%40startmail.com\">jordan<span>.</span>h<span>@</span>startmail<span>.</span>com</a>\nLicense: GPLv3\nDescription-Content-Type: UNKNOWN\nDescription: UNKNOWN\nPlatform: UNKNOWN</p>\n\n          </div>"}, "last_serial": 3742781, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "873bb36eb9e5487cf34e4dc77138cca3", "sha256": "d06005ecd1ac3e2ee40cd538a09b1ebf5ef7e03be2740357abab773185d9b6c4"}, "downloads": -1, "filename": "lotconfig-1.0.linux-x86_64.tar.gz", "has_sig": true, "md5_digest": "873bb36eb9e5487cf34e4dc77138cca3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9054, "upload_time": "2018-03-09T22:10:50", "upload_time_iso_8601": "2018-03-09T22:10:50.975425Z", "url": "https://files.pythonhosted.org/packages/6f/b5/e078a7631cc6ca27dd19e7d86d3aa00b277acddde7e57a6c8993a80c5bdf/lotconfig-1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "942c3c5fe731afdc9340349597c48236", "sha256": "df43da336ce8945e45f29cf269caac2eb7a423c97ceb20e2e89e83b543c6c38c"}, "downloads": -1, "filename": "lotconfig-1.0-py3-none-any.whl", "has_sig": true, "md5_digest": "942c3c5fe731afdc9340349597c48236", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9005, "upload_time": "2018-03-09T22:10:49", "upload_time_iso_8601": "2018-03-09T22:10:49.607026Z", "url": "https://files.pythonhosted.org/packages/12/35/729f59f33102236fe91beb814138c476393476bbc48987047d35c60c8194/lotconfig-1.0-py3-none-any.whl", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "2e3f882e5038036e6fe046e6a9c8823d", "sha256": "5b346c1440f1edb412cdf1ab89d98ffd00c59607ff48dcfc176c139facc7217a"}, "downloads": -1, "filename": "lotconfig-1.3.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "2e3f882e5038036e6fe046e6a9c8823d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7278, "upload_time": "2018-04-07T01:18:22", "upload_time_iso_8601": "2018-04-07T01:18:22.793188Z", "url": "https://files.pythonhosted.org/packages/0d/6a/40acccc183168e276c29c452977c46662a756afa8846c9730420f0b3751b/lotconfig-1.3.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "223f9258047b5978c21f7d8ce00824df", "sha256": "643f6d4f2d811c734a296657d8299ee12d312ca80803d9250d5398fcd40785ed"}, "downloads": -1, "filename": "lotconfig-1.3-py3-none-any.whl", "has_sig": true, "md5_digest": "223f9258047b5978c21f7d8ce00824df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8280, "upload_time": "2018-04-07T01:18:20", "upload_time_iso_8601": "2018-04-07T01:18:20.738628Z", "url": "https://files.pythonhosted.org/packages/7b/5e/0ceaef626b3e9dcf497ad6cb5d9e779780f4ffeaeb4eceb397bad513444b/lotconfig-1.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e3f882e5038036e6fe046e6a9c8823d", "sha256": "5b346c1440f1edb412cdf1ab89d98ffd00c59607ff48dcfc176c139facc7217a"}, "downloads": -1, "filename": "lotconfig-1.3.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "2e3f882e5038036e6fe046e6a9c8823d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7278, "upload_time": "2018-04-07T01:18:22", "upload_time_iso_8601": "2018-04-07T01:18:22.793188Z", "url": "https://files.pythonhosted.org/packages/0d/6a/40acccc183168e276c29c452977c46662a756afa8846c9730420f0b3751b/lotconfig-1.3.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "223f9258047b5978c21f7d8ce00824df", "sha256": "643f6d4f2d811c734a296657d8299ee12d312ca80803d9250d5398fcd40785ed"}, "downloads": -1, "filename": "lotconfig-1.3-py3-none-any.whl", "has_sig": true, "md5_digest": "223f9258047b5978c21f7d8ce00824df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8280, "upload_time": "2018-04-07T01:18:20", "upload_time_iso_8601": "2018-04-07T01:18:20.738628Z", "url": "https://files.pythonhosted.org/packages/7b/5e/0ceaef626b3e9dcf497ad6cb5d9e779780f4ffeaeb4eceb397bad513444b/lotconfig-1.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:43:43 2020"}