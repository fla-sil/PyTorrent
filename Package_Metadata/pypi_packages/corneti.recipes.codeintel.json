{"info": {"author": "Fabio Corneti", "author_email": "info@corneti.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Framework :: Buildout", "Framework :: Buildout :: Recipe", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Text Editors"], "description": "==================================================\nSublimeCodeIntel configuration recipe for buildout\n==================================================\n\nThis recipe generates a configuration file for SublimeCodeIntel_, a SublimeText_ plugin .\n\nTo use it, add a codeintel configuration section to your ``buildout.cfg`` file and the corresponding part::\n\n    [buildout]\n    parts =\n        django\n        codeintel\n\n    ...\n\n    [codeintel]\n    recipe = corneti.recipes.codeintel\n    eggs = ${django:eggs}\n    extra-paths =\n        ${django:location}\n        ${django:extra-paths}\n\nSetting .codeintel folder\n===========================\n\nSublimeCodeIntel will pick up auto-completion information from ``.codeintel``\nfolder from your Sublime Text project root.\n\nBy default, this recipe generates the folder in the buildout root.\nYou can specify optional ``codeintel-path`` if you want to generate\n``.codeintel`` in some other location.\n\nExample how to create CodeIntel information inside ``src/`` folder.\nUsually ``src/`` is used for all Python eggs you are currently developing yourself i.e.\nessentially all of your project codebase::\n\n    [codeintel]\n    recipe = corneti.recipes.codeintel\n    eggs = ${instance:eggs}\n    codeintel-path = ${buildout:directory}/src/.codeintel\n\nThis will generate file ``src/.codeintel/config`` which will list all your eggs\nused by ``[instance]`` in your *buildout.cfg*.\n\nNow you can open your ``src/`` folder as project in Sublime with perfect auto-completion support::\n\n    subl src\n\n... or just open src/ folder using *File > Open folder*.\n\n(`See how to configure Sublime Text 2 commaline commands <http://opensourcehacker.com/2012/05/11/sublime-text-2-tips-for-python-and-web-developers/>`_)\n\n\nWe'll start by creating a buildout that uses the recipe::\n\nWe form a config which uses paths for every language supported::\n\n    >>> from corneti.recipes.codeintel import CodeintelRecipe\n    >>> extra_info = \"\\n\".join(map(lambda x: r\"\"\"\n    ... {0}-path = /some/bin/{0}\n    ... {0}-extra-paths = /some/{0}/path\n    ...                   /some/{0}/path2\n    ... \"\"\".format(x.lower()), CodeintelRecipe.SUPPORTED_LANGUAGES))\n    >>> write('buildout.cfg',\n    ... r\"\"\"\n    ... [buildout]\n    ... parts = codeintel\n    ... newest = false\n    ...\n    ... [codeintel]\n    ... recipe = corneti.recipes.codeintel\n    ... eggs = zc.buildout\n    ... {0}\n    ... \"\"\".format(extra_info))\n\nRunning the buildout gives us::\n\n    >>> print system(buildout)\n    Installing codeintel.\n\nWe see the folder with codeintel config is created::\n\n    >>> print ls('.')\n    d  .codeintel\n    ...\n\n    >>> print ls('./.codeintel')\n    -  config\n    ...\n\nWe check the contents of the config::\n\n    >>> import os\n    >>> import simplejson\n    >>> import pprint\n    >>> contents = open(os.path.join('.codeintel', 'config')).read()\n    >>> contents_json = simplejson.loads(contents)\n    >>> '/some/python/path' in contents_json['Python']['pythonExtraPaths']\n    True\n    >>> '/some/python/path2' in contents_json['Python']['pythonExtraPaths']\n    True\n    >>> len(contents_json['Python']['pythonExtraPaths'])\n    4\n\nWe check that every lang is present in config::\n\n    >>> contents_json.keys() == CodeintelRecipe.SUPPORTED_LANGUAGES\n    True\n\nLet's check the usage with only one additional language::\n\n    >>> write('buildout.cfg',\n    ... r\"\"\"\n    ... [buildout]\n    ... parts = codeintel\n    ... newest = false\n    ...\n    ... [codeintel]\n    ... recipe = corneti.recipes.codeintel\n    ... eggs = zc.buildout\n    ... javascript-extra-paths = /some\n    ... \"\"\")\n\n    >>> print system(buildout)\n    Uninstalling codeintel.\n    Installing codeintel.\n\n    >>> contents = open(os.path.join('.codeintel', 'config')).read()\n    >>> contents_json = simplejson.loads(contents)\n\n    >>> len(contents_json) == 2\n    True\n\n    >>> contents_json['JavaScript']\n    {'javascriptExtraPaths': ['/some']}\n\n\nTips\n=======\n\nReset auto-completion by choosing *SublimeCodeIntel: Reset* in command browser (CMD + SHIFT + P) [OSX].\n\nForce auto-completion dialog: CMD + P [OSX].\n\nTesting\n=======\n\nTo test this recipe, bootstrap the included buildout, build it and execute the test section::\n\n    $ python bootstrap.py\n    $ bin/buildout -v\n    $ bin/buildout test\n\nIf the first command gives you a setuptools dependency error, try the following variant to use distribute::\n\n    $ python bootstrap.py -d\n    $ bin/buildout -v\n    $ bin/buildout test\n\nCredits\n=======\n\nBased on the ``mkcodeintel`` script available in optilude's SublimeTextMisc_ repository.\n\n``codeintel-path`` option and much better documentation by Mikko Ohtamaa .\n\nSupport for executable path and extra paths for all languages which Codeintel supports by Anatoly Bubenkov .\n\n.. _SublimeCodeIntel: https://github.com/Kronuz/SublimeCodeIntel\n\n.. _SublimeText: http://www.sublimetext.com/2\n\n.. _SublimeTextMisc: https://github.com/optilude/SublimeTextMisc", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fabiocorneti/corneti.recipes.codeintel", "keywords": "sublimetext sublimecodeintel editor buildout recipe", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "corneti.recipes.codeintel", "package_url": "https://pypi.org/project/corneti.recipes.codeintel/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/corneti.recipes.codeintel/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/fabiocorneti/corneti.recipes.codeintel"}, "release_url": "https://pypi.org/project/corneti.recipes.codeintel/0.3/", "requires_dist": null, "requires_python": null, "summary": "A Sublime Text 2 / SublimeCodeIntel auto-completion data generator for buildout", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==================================================<br>SublimeCodeIntel configuration recipe for buildout<br>==================================================<br><br>This recipe generates a configuration file for SublimeCodeIntel_, a SublimeText_ plugin .<br><br>To use it, add a codeintel configuration section to your ``buildout.cfg`` file and the corresponding part::<br><br>    [buildout]<br>    parts =<br>        django<br>        codeintel<br><br>    ...<br><br>    [codeintel]<br>    recipe = corneti.recipes.codeintel<br>    eggs = ${django:eggs}<br>    extra-paths =<br>        ${django:location}<br>        ${django:extra-paths}<br><br>Setting .codeintel folder<br>===========================<br><br>SublimeCodeIntel will pick up auto-completion information from ``.codeintel``<br>folder from your Sublime Text project root.<br><br>By default, this recipe generates the folder in the buildout root.<br>You can specify optional ``codeintel-path`` if you want to generate<br>``.codeintel`` in some other location.<br><br>Example how to create CodeIntel information inside ``src/`` folder.<br>Usually ``src/`` is used for all Python eggs you are currently developing yourself i.e.<br>essentially all of your project codebase::<br><br>    [codeintel]<br>    recipe = corneti.recipes.codeintel<br>    eggs = ${instance:eggs}<br>    codeintel-path = ${buildout:directory}/src/.codeintel<br><br>This will generate file ``src/.codeintel/config`` which will list all your eggs<br>used by ``[instance]`` in your *buildout.cfg*.<br><br>Now you can open your ``src/`` folder as project in Sublime with perfect auto-completion support::<br><br>    subl src<br><br>... or just open src/ folder using *File &gt; Open folder*.<br><br>(`See how to configure Sublime Text 2 commaline commands &lt;http://opensourcehacker.com/2012/05/11/sublime-text-2-tips-for-python-and-web-developers/&gt;`_)<br><br><br>We'll start by creating a buildout that uses the recipe::<br><br>We form a config which uses paths for every language supported::<br><br>    &gt;&gt;&gt; from corneti.recipes.codeintel import CodeintelRecipe<br>    &gt;&gt;&gt; extra_info = \"\\n\".join(map(lambda x: r\"\"\"<br>    ... {0}-path = /some/bin/{0}<br>    ... {0}-extra-paths = /some/{0}/path<br>    ...                   /some/{0}/path2<br>    ... \"\"\".format(x.lower()), CodeintelRecipe.SUPPORTED_LANGUAGES))<br>    &gt;&gt;&gt; write('buildout.cfg',<br>    ... r\"\"\"<br>    ... [buildout]<br>    ... parts = codeintel<br>    ... newest = false<br>    ...<br>    ... [codeintel]<br>    ... recipe = corneti.recipes.codeintel<br>    ... eggs = zc.buildout<br>    ... {0}<br>    ... \"\"\".format(extra_info))<br><br>Running the buildout gives us::<br><br>    &gt;&gt;&gt; print system(buildout)<br>    Installing codeintel.<br><br>We see the folder with codeintel config is created::<br><br>    &gt;&gt;&gt; print ls('.')<br>    d  .codeintel<br>    ...<br><br>    &gt;&gt;&gt; print ls('./.codeintel')<br>    -  config<br>    ...<br><br>We check the contents of the config::<br><br>    &gt;&gt;&gt; import os<br>    &gt;&gt;&gt; import simplejson<br>    &gt;&gt;&gt; import pprint<br>    &gt;&gt;&gt; contents = open(os.path.join('.codeintel', 'config')).read()<br>    &gt;&gt;&gt; contents_json = simplejson.loads(contents)<br>    &gt;&gt;&gt; '/some/python/path' in contents_json['Python']['pythonExtraPaths']<br>    True<br>    &gt;&gt;&gt; '/some/python/path2' in contents_json['Python']['pythonExtraPaths']<br>    True<br>    &gt;&gt;&gt; len(contents_json['Python']['pythonExtraPaths'])<br>    4<br><br>We check that every lang is present in config::<br><br>    &gt;&gt;&gt; contents_json.keys() == CodeintelRecipe.SUPPORTED_LANGUAGES<br>    True<br><br>Let's check the usage with only one additional language::<br><br>    &gt;&gt;&gt; write('buildout.cfg',<br>    ... r\"\"\"<br>    ... [buildout]<br>    ... parts = codeintel<br>    ... newest = false<br>    ...<br>    ... [codeintel]<br>    ... recipe = corneti.recipes.codeintel<br>    ... eggs = zc.buildout<br>    ... javascript-extra-paths = /some<br>    ... \"\"\")<br><br>    &gt;&gt;&gt; print system(buildout)<br>    Uninstalling codeintel.<br>    Installing codeintel.<br><br>    &gt;&gt;&gt; contents = open(os.path.join('.codeintel', 'config')).read()<br>    &gt;&gt;&gt; contents_json = simplejson.loads(contents)<br><br>    &gt;&gt;&gt; len(contents_json) == 2<br>    True<br><br>    &gt;&gt;&gt; contents_json['JavaScript']<br>    {'javascriptExtraPaths': ['/some']}<br><br><br>Tips<br>=======<br><br>Reset auto-completion by choosing *SublimeCodeIntel: Reset* in command browser (CMD + SHIFT + P) [OSX].<br><br>Force auto-completion dialog: CMD + P [OSX].<br><br>Testing<br>=======<br><br>To test this recipe, bootstrap the included buildout, build it and execute the test section::<br><br>    $ python bootstrap.py<br>    $ bin/buildout -v<br>    $ bin/buildout test<br><br>If the first command gives you a setuptools dependency error, try the following variant to use distribute::<br><br>    $ python bootstrap.py -d<br>    $ bin/buildout -v<br>    $ bin/buildout test<br><br>Credits<br>=======<br><br>Based on the ``mkcodeintel`` script available in optilude's SublimeTextMisc_ repository.<br><br>``codeintel-path`` option and much better documentation by Mikko Ohtamaa .<br><br>Support for executable path and extra paths for all languages which Codeintel supports by Anatoly Bubenkov .<br><br>.. _SublimeCodeIntel: https://github.com/Kronuz/SublimeCodeIntel<br><br>.. _SublimeText: http://www.sublimetext.com/2<br><br>.. _SublimeTextMisc: https://github.com/optilude/SublimeTextMisc\n          </div>"}, "last_serial": 872861, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "37c4af30b0662cafa7874da17aefc5f5", "sha256": "551b5ba4bace731acaf773019cc0cf215585f0a029774ca8c48b34c98266baf4"}, "downloads": -1, "filename": "corneti.recipes.codeintel-0.1.tar.gz", "has_sig": false, "md5_digest": "37c4af30b0662cafa7874da17aefc5f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1845, "upload_time": "2012-01-06T15:10:38", "upload_time_iso_8601": "2012-01-06T15:10:38.493459Z", "url": "https://files.pythonhosted.org/packages/44/05/cca3064b06edc81d821f9babb8dd8d49017265ff15ee6c819b2b04e47cf9/corneti.recipes.codeintel-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "142e513eb735c532ae3ef8b30ee526de", "sha256": "47c25ded3fdae36592f194008a9bb0e5943ca54e4fd918ba76f63403c2eb2e0d"}, "downloads": -1, "filename": "corneti.recipes.codeintel-0.1.1.tar.gz", "has_sig": false, "md5_digest": "142e513eb735c532ae3ef8b30ee526de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1838, "upload_time": "2012-01-06T15:16:31", "upload_time_iso_8601": "2012-01-06T15:16:31.060341Z", "url": "https://files.pythonhosted.org/packages/8a/97/99c5ea111f8923492881062e15bafc7d0e7d9d956e7fb90e390d640d80e8/corneti.recipes.codeintel-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5e72788c7961fb333d24b2f4b5283720", "sha256": "abe7b7caa4027810d64d3534d939ecadaa9483c1789ce56e5e6e37a37604f757"}, "downloads": -1, "filename": "corneti.recipes.codeintel-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5e72788c7961fb333d24b2f4b5283720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2018, "upload_time": "2012-01-06T15:23:09", "upload_time_iso_8601": "2012-01-06T15:23:09.950228Z", "url": "https://files.pythonhosted.org/packages/36/a5/dc828bd8c8ed407531384b917d0d7fc4429118b0f1003ea3ba5d8f532ef6/corneti.recipes.codeintel-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "8e432575940b7bcac60865d92aafa6b7", "sha256": "b42014c96d7d1677cbe5276d62bde6e0c7770c9ec78f43ae6f47e0bf0087c728"}, "downloads": -1, "filename": "corneti.recipes.codeintel-0.1.3.tar.gz", "has_sig": false, "md5_digest": "8e432575940b7bcac60865d92aafa6b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2025, "upload_time": "2012-01-06T15:32:11", "upload_time_iso_8601": "2012-01-06T15:32:11.041267Z", "url": "https://files.pythonhosted.org/packages/97/ae/2df34588741f3415589fc4187778e3b2277f1caaef4550fc1072b16df973/corneti.recipes.codeintel-0.1.3.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "39ce973eb1ed7de8e14c9c698aa26d7a", "sha256": "9a823a3943b87d9c1d8856baf887faa021ba9242a9e4db3e182b5fa14f408867"}, "downloads": -1, "filename": "corneti.recipes.codeintel-0.2.tar.gz", "has_sig": false, "md5_digest": "39ce973eb1ed7de8e14c9c698aa26d7a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3047, "upload_time": "2012-05-27T19:51:58", "upload_time_iso_8601": "2012-05-27T19:51:58.795174Z", "url": "https://files.pythonhosted.org/packages/a3/50/f478c0c0a63906427417c46e24fc626529b3dadb56e32d1e73f751040594/corneti.recipes.codeintel-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9811b1e2c662f50e68661aba77e2a336", "sha256": "f6dd44c9c5857f31499588cb87c272415cec23eec18a31fbb7dffe2a677b6272"}, "downloads": -1, "filename": "corneti.recipes.codeintel-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9811b1e2c662f50e68661aba77e2a336", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4115, "upload_time": "2012-05-29T10:24:09", "upload_time_iso_8601": "2012-05-29T10:24:09.390278Z", "url": "https://files.pythonhosted.org/packages/de/03/4e27a14c23a15cf7e67f45ad36806e5d85e7c8fd20410a7c462074f7fec6/corneti.recipes.codeintel-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "292213233e8705ca36882f33415c7b80", "sha256": "26f283af208cc480a7bb4d89fa1198d1f8ebe2afb06b3020ed20c299f4084193"}, "downloads": -1, "filename": "corneti.recipes.codeintel-0.3.tar.gz", "has_sig": false, "md5_digest": "292213233e8705ca36882f33415c7b80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6199, "upload_time": "2013-09-24T14:56:45", "upload_time_iso_8601": "2013-09-24T14:56:45.117100Z", "url": "https://files.pythonhosted.org/packages/35/60/fdc6dbc319438900746702a6111e0e2c72344c8d7a0bac30d2f350779b0f/corneti.recipes.codeintel-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "292213233e8705ca36882f33415c7b80", "sha256": "26f283af208cc480a7bb4d89fa1198d1f8ebe2afb06b3020ed20c299f4084193"}, "downloads": -1, "filename": "corneti.recipes.codeintel-0.3.tar.gz", "has_sig": false, "md5_digest": "292213233e8705ca36882f33415c7b80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6199, "upload_time": "2013-09-24T14:56:45", "upload_time_iso_8601": "2013-09-24T14:56:45.117100Z", "url": "https://files.pythonhosted.org/packages/35/60/fdc6dbc319438900746702a6111e0e2c72344c8d7a0bac30d2f350779b0f/corneti.recipes.codeintel-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:08 2020"}