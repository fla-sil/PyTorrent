{"info": {"author": "Supphawit,Sukit", "author_email": "supphawit@thinknet.co.th", "bugtrack_url": null, "classifiers": [], "description": "# How to upload your package to PyPI \n\nIf you haven\u2019t published things on PyPI before, you\u2019ll need to create an account at [PyPI](https://pypi.org/).\n\nWe need you to create an account at [TestPyPI](https://test.pypi.org/) to test before you publish your package to PyPI. (You should set username and passwords PyPI same as TestPyPI)\n\n# Picking A Name\nPython module/package names should generally follow the following constraints:\n\n* All lowercase\n* Unique on PyPI\n* Underscore-separated or no word separators at all \n\n# Creating The Scaffolding\n\nDirectory structure for <code>tnthai</code> should look like this:\n```\nTnThai/\n  tnthai/\n    setup.py\n    REAME.md\n    MANIFEST.in\n    bin/\n      tnthai-run\n      tnthai-test\n    src/\n      tnthai/\n        __init__.py\n        AbstractWordSegment.py\n        SC.py\n        dict/\n          my.trie\n        tests/\n          test_tnthai.py\n```\nThe subdirectory <code>tnthai</code> is actually our Python module\n\n<code>setup.py</code> contains:\n```Python\nfrom setuptools import setup\n\ndef readme():\n    with open('README.md') as f:\n        return f.read()\n\nsetup(name='tnthai',\n    version='0.1',\n    description='tnthai for Python3',\n    long_description=readme(),\n    url='https://gitlab.thinknet.co.th/research/swathclone',\n    author='Supphawit',\n    author_email='supphawit@thinknet.co.th',\n    license='Thinknet',\n    python_requires='>=3',\n    install_requires=[\n        'datrie',\n    ],\n    scripts=['bin/tnthai-run','bin/tnthai-test'],\n    keywords='tnthai thinknet thai wordsegment',\n    packages=['tnthai'],\n    package_dir={'tnthai': 'src/tnthai'},\n    package_data={\n        'tnthai': ['tests/*.py','dict/*.trie']\n    },\n)\n```\n\n* If your package required any package you needs to add <code>install_requires</code> keyword argument to <code>setup.py</code> \n* Many Python packages include command line tools. This is useful for distributing support tools which are associated with a library \nfor <code>tnthai</code>, we will add a <code>tnthai-run</code> command line tool by adding <code>scripts</code> keyword argument \n* Package data can be added to packages using the <code>package_data</code> keyword argument to the setup() function\n* Use <code>package_dir</code> key argument to path your package location\n* Changed in version 3.1: All the files that match <code>package_data</code> will be added to the MANIFEST file if no template is provided. \n* You\u2019ll probably want a README file in your source distribution, and that file can serve double purpose as the <code>long_description</code> specified to PyPI. Further, if that file is written in reStructuredText, it can be formatted nicely\n\nsee more <code>setup.py </code> in the [PyPA sample project](https://github.com/pypa/sampleproject)\n\nThe <code>tnthai-run</code> script in <code>bin/tnthai-run</code> looks like this:\n```Python\n#!/usr/bin/env python \n\n  * code *\n  ...\n  ...\n  ...\n``` \nThe <code>tnthai-test</code> script in <code>bin/tnthai-test</code> use to run test for ```tnthai``` looks like this:\n```Python\n#!/usr/bin/env python \n\nimport os\nimport sys\n\nfor p in sys.path:\n    if \"site-packages\" in p:\n        path = p + \"/tnthai/tests/test_tnthai.py\"\nos.system(\"python3 \" + path)\n``` \n\n<code>MANIFEST.in</code> contains:\n```\ninclude README.md\n```\nIf you have other files that you want to include in your package just add <code>include</code> in <code>MANIFEST.in</code> it's meaning all files in the distribution root matching *.txt,and <code>recursive-include</code> meaning all files anywhere under the <code>tnthai</code> directory matching *.txt or *.py\n\nNow we can install the package locally (for use on our system or test before publish) with:\n```\n$ pip install .\n```\n\n# Publishing on TestPyPI and PyPI \n\nFirst create a source distribution with:\n```\n$ python setup.py sdist\n```\nor\n```\n$python3 setup.py sdist bdist_wheel\n```\nThis will create <code>dist/tnthai-0.1.tar.gz</code> inside our top-level directory. \n\nYou can use <code>twine</code> to upload the distribution packages. You\u2019ll need to install <code>twine</code> by this command:\n```\n$ pip install twine --upgrade\n```\nor \n```\n$ python3 -m pip install --user --upgrade twine\n```\n\n### TestPyPI\nYou should upload your package to TestPyPI before PyPI\n\nRun Twine to upload all of the archives under dist:\n```\n$ twine upload --repository-url https://test.pypi.org/legacy/ dist/*\n```\nYou will be prompted for the username and password you registered with TestPyPI. \nAfter the command completes you can check your package at [TestPyPI](https://test.pypi.org/manage/projects/)\n\n### PyPI\nNow you ready to upload your package to PyPI\nby following this command:\n```\n$ twine upload --repository-url https://upload.pypi.org/legacy/ dist/*\n```\nYou will be prompted for the username and password you registered with PyPI. \nAfter the command completes you can check your package at [PyPI](https://pypi.org/manage/projects/)\n\n# Installing the Package\n\nAt this point, other consumers of this package can install the package with <code>pip</code>:\n```\n$ pip install tnthai\n```\nSometimes you update your package it will take about 5-10 minutes to update your package. \n\nyou can upgrade your package by following this command:\n```\n$ pip install tnthai --upgrade\n```\n\nIt will be automatically installed to your Python package folder\nand <code>setuptools</code> will copy the script to our PATH and make it available for general use\n\n# How to Use\nIn ```tnthai``` package have 3 features ```Safe Mode```, ```Unsafe Mode```, ```Smart Mode```\n\nYou can run package in command line by following this command:\n```\n$ tnthai-run \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\n```\nIf you want to choose the features you can do by following this command:\n\n```\n$ tnthai-run \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19 Safe\n```\n\n### Simple Demo\n\n\n```\nimport tnthai.segment as tn\n\n\nsafe = tn.SafeSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e02\u0e19\u0e02\u0e2d\u0e07\")\n\nunsafe = tn.UnsafeSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e02\u0e19\u0e02\u0e2d\u0e07\")\n\nsmart = tn.SmartSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e02\u0e19\u0e02\u0e2d\u0e07\")\n```\nBut if you use python2 you need to add ```# -*- coding: utf-8 -*-``` like this:\n```\n# -*- coding: utf-8 -*-\n\nimport tnthai.segment as tnthai\n\n  * code *\n    ...\n    ...\n    ...\n```\n\n\nResult of ```Safe Mode```  will be like this:\n```\n('Safe', [['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19', '\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19', '\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19', '\u0e41\u0e01\u0e48', '\u0e02\u0e19', '\u0e02\u0e2d\u0e07']])\n```\nResult of ```Unsafe Mode```  will be like this:\n```\n('Unsafe', [['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07']])\n```\nTo show you how its work we will show you an example:\n```\nimport tnthai.segment as tn\n\n\nmisspellings_safe = tn.SafeSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e2a\u0e02\u0e19\u0e02\u0e2d\u0e07\")\n\nspellings_smartmode = tn.SmartSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e02\u0e19\u0e02\u0e2d\u0e07\")\n\nmisspellings_smartmode = tn.SmartSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e2a\u0e02\u0e19\u0e02\u0e2d\u0e07\")\n```\n```Safe Mode``` doesn't work with misspellings text so the \nresult will be empty list ( ```Smart Mode``` can solve this problem )\n\nThe result of ```misspellings_safe``` is:\n```\n('Safe', [])\n```\n\n```Smart Mode```  will automatically use ```Safe Mode```  but if its doesn't work (which mean text have misspellings) its going to use ```Unsafe Mode```  instead\n\n\nThe result of ```spellings_smartmode``` is:\n```\n('Safe', [['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19', '\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19', '\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19', '\u0e41\u0e01\u0e48', '\u0e02\u0e19', '\u0e02\u0e2d\u0e07']])\n```\nThe result of ```misspellings_smartmode``` is:\n```\n('Unsafe', [['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e2a', '\u0e02\u0e19\u0e02\u0e2d\u0e07']])\n```\n\nIf you want to test package you can run ```tnthai-test``` by following this command:\n```\n$ tnthai-test\n```", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.thinknet.co.th/research/swathclone", "keywords": "tnthai thinknet thai wordsegment", "license": "Thinknet", "maintainer": "", "maintainer_email": "", "name": "tnthai", "package_url": "https://pypi.org/project/tnthai/", "platform": "", "project_url": "https://pypi.org/project/tnthai/", "project_urls": {"Homepage": "https://gitlab.thinknet.co.th/research/swathclone"}, "release_url": "https://pypi.org/project/tnthai/1.11/", "requires_dist": null, "requires_python": "", "summary": "tnthai for Python", "version": "1.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            # How to upload your package to PyPI <br><br>If you haven\u2019t published things on PyPI before, you\u2019ll need to create an account at [PyPI](https://pypi.org/).<br><br>We need you to create an account at [TestPyPI](https://test.pypi.org/) to test before you publish your package to PyPI. (You should set username and passwords PyPI same as TestPyPI)<br><br># Picking A Name<br>Python module/package names should generally follow the following constraints:<br><br>* All lowercase<br>* Unique on PyPI<br>* Underscore-separated or no word separators at all <br><br># Creating The Scaffolding<br><br>Directory structure for &lt;code&gt;tnthai&lt;/code&gt; should look like this:<br>```<br>TnThai/<br>  tnthai/<br>    setup.py<br>    REAME.md<br>    MANIFEST.in<br>    bin/<br>      tnthai-run<br>      tnthai-test<br>    src/<br>      tnthai/<br>        __init__.py<br>        AbstractWordSegment.py<br>        SC.py<br>        dict/<br>          my.trie<br>        tests/<br>          test_tnthai.py<br>```<br>The subdirectory &lt;code&gt;tnthai&lt;/code&gt; is actually our Python module<br><br>&lt;code&gt;setup.py&lt;/code&gt; contains:<br>```Python<br>from setuptools import setup<br><br>def readme():<br>    with open('README.md') as f:<br>        return f.read()<br><br>setup(name='tnthai',<br>    version='0.1',<br>    description='tnthai for Python3',<br>    long_description=readme(),<br>    url='https://gitlab.thinknet.co.th/research/swathclone',<br>    author='Supphawit',<br>    author_email='supphawit@thinknet.co.th',<br>    license='Thinknet',<br>    python_requires='&gt;=3',<br>    install_requires=[<br>        'datrie',<br>    ],<br>    scripts=['bin/tnthai-run','bin/tnthai-test'],<br>    keywords='tnthai thinknet thai wordsegment',<br>    packages=['tnthai'],<br>    package_dir={'tnthai': 'src/tnthai'},<br>    package_data={<br>        'tnthai': ['tests/*.py','dict/*.trie']<br>    },<br>)<br>```<br><br>* If your package required any package you needs to add &lt;code&gt;install_requires&lt;/code&gt; keyword argument to &lt;code&gt;setup.py&lt;/code&gt; <br>* Many Python packages include command line tools. This is useful for distributing support tools which are associated with a library <br>for &lt;code&gt;tnthai&lt;/code&gt;, we will add a &lt;code&gt;tnthai-run&lt;/code&gt; command line tool by adding &lt;code&gt;scripts&lt;/code&gt; keyword argument <br>* Package data can be added to packages using the &lt;code&gt;package_data&lt;/code&gt; keyword argument to the setup() function<br>* Use &lt;code&gt;package_dir&lt;/code&gt; key argument to path your package location<br>* Changed in version 3.1: All the files that match &lt;code&gt;package_data&lt;/code&gt; will be added to the MANIFEST file if no template is provided. <br>* You\u2019ll probably want a README file in your source distribution, and that file can serve double purpose as the &lt;code&gt;long_description&lt;/code&gt; specified to PyPI. Further, if that file is written in reStructuredText, it can be formatted nicely<br><br>see more &lt;code&gt;setup.py &lt;/code&gt; in the [PyPA sample project](https://github.com/pypa/sampleproject)<br><br>The &lt;code&gt;tnthai-run&lt;/code&gt; script in &lt;code&gt;bin/tnthai-run&lt;/code&gt; looks like this:<br>```Python<br>#!/usr/bin/env python <br><br>  * code *<br>  ...<br>  ...<br>  ...<br>``` <br>The &lt;code&gt;tnthai-test&lt;/code&gt; script in &lt;code&gt;bin/tnthai-test&lt;/code&gt; use to run test for ```tnthai``` looks like this:<br>```Python<br>#!/usr/bin/env python <br><br>import os<br>import sys<br><br>for p in sys.path:<br>    if \"site-packages\" in p:<br>        path = p + \"/tnthai/tests/test_tnthai.py\"<br>os.system(\"python3 \" + path)<br>``` <br><br>&lt;code&gt;MANIFEST.in&lt;/code&gt; contains:<br>```<br>include README.md<br>```<br>If you have other files that you want to include in your package just add &lt;code&gt;include&lt;/code&gt; in &lt;code&gt;MANIFEST.in&lt;/code&gt; it's meaning all files in the distribution root matching *.txt,and &lt;code&gt;recursive-include&lt;/code&gt; meaning all files anywhere under the &lt;code&gt;tnthai&lt;/code&gt; directory matching *.txt or *.py<br><br>Now we can install the package locally (for use on our system or test before publish) with:<br>```<br>$ pip install .<br>```<br><br># Publishing on TestPyPI and PyPI <br><br>First create a source distribution with:<br>```<br>$ python setup.py sdist<br>```<br>or<br>```<br>$python3 setup.py sdist bdist_wheel<br>```<br>This will create &lt;code&gt;dist/tnthai-0.1.tar.gz&lt;/code&gt; inside our top-level directory. <br><br>You can use &lt;code&gt;twine&lt;/code&gt; to upload the distribution packages. You\u2019ll need to install &lt;code&gt;twine&lt;/code&gt; by this command:<br>```<br>$ pip install twine --upgrade<br>```<br>or <br>```<br>$ python3 -m pip install --user --upgrade twine<br>```<br><br>### TestPyPI<br>You should upload your package to TestPyPI before PyPI<br><br>Run Twine to upload all of the archives under dist:<br>```<br>$ twine upload --repository-url https://test.pypi.org/legacy/ dist/*<br>```<br>You will be prompted for the username and password you registered with TestPyPI. <br>After the command completes you can check your package at [TestPyPI](https://test.pypi.org/manage/projects/)<br><br>### PyPI<br>Now you ready to upload your package to PyPI<br>by following this command:<br>```<br>$ twine upload --repository-url https://upload.pypi.org/legacy/ dist/*<br>```<br>You will be prompted for the username and password you registered with PyPI. <br>After the command completes you can check your package at [PyPI](https://pypi.org/manage/projects/)<br><br># Installing the Package<br><br>At this point, other consumers of this package can install the package with &lt;code&gt;pip&lt;/code&gt;:<br>```<br>$ pip install tnthai<br>```<br>Sometimes you update your package it will take about 5-10 minutes to update your package. <br><br>you can upgrade your package by following this command:<br>```<br>$ pip install tnthai --upgrade<br>```<br><br>It will be automatically installed to your Python package folder<br>and &lt;code&gt;setuptools&lt;/code&gt; will copy the script to our PATH and make it available for general use<br><br># How to Use<br>In ```tnthai``` package have 3 features ```Safe Mode```, ```Unsafe Mode```, ```Smart Mode```<br><br>You can run package in command line by following this command:<br>```<br>$ tnthai-run \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19<br>```<br>If you want to choose the features you can do by following this command:<br><br>```<br>$ tnthai-run \u0e17\u0e14\u0e2a\u0e2d\u0e1a\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19 Safe<br>```<br><br>### Simple Demo<br><br><br>```<br>import tnthai.segment as tn<br><br><br>safe = tn.SafeSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e02\u0e19\u0e02\u0e2d\u0e07\")<br><br>unsafe = tn.UnsafeSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e02\u0e19\u0e02\u0e2d\u0e07\")<br><br>smart = tn.SmartSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e02\u0e19\u0e02\u0e2d\u0e07\")<br>```<br>But if you use python2 you need to add ```# -*- coding: utf-8 -*-``` like this:<br>```<br># -*- coding: utf-8 -*-<br><br>import tnthai.segment as tnthai<br><br>  * code *<br>    ...<br>    ...<br>    ...<br>```<br><br><br>Result of ```Safe Mode```  will be like this:<br>```<br>('Safe', [['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19', '\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19', '\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19', '\u0e41\u0e01\u0e48', '\u0e02\u0e19', '\u0e02\u0e2d\u0e07']])<br>```<br>Result of ```Unsafe Mode```  will be like this:<br>```<br>('Unsafe', [['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07']])<br>```<br>To show you how its work we will show you an example:<br>```<br>import tnthai.segment as tn<br><br><br>misspellings_safe = tn.SafeSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e2a\u0e02\u0e19\u0e02\u0e2d\u0e07\")<br><br>spellings_smartmode = tn.SmartSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e02\u0e19\u0e02\u0e2d\u0e07\")<br><br>misspellings_smartmode = tn.SmartSegment(\"\u0e04\u0e19\u0e41\u0e01\u0e48\u0e2a\u0e02\u0e19\u0e02\u0e2d\u0e07\")<br>```<br>```Safe Mode``` doesn't work with misspellings text so the <br>result will be empty list ( ```Smart Mode``` can solve this problem )<br><br>The result of ```misspellings_safe``` is:<br>```<br>('Safe', [])<br>```<br><br>```Smart Mode```  will automatically use ```Safe Mode```  but if its doesn't work (which mean text have misspellings) its going to use ```Unsafe Mode```  instead<br><br><br>The result of ```spellings_smartmode``` is:<br>```<br>('Safe', [['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e02\u0e19', '\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19', '\u0e41\u0e01\u0e48', '\u0e02\u0e19\u0e02\u0e2d\u0e07'], ['\u0e04\u0e19', '\u0e41\u0e01\u0e48', '\u0e02\u0e19', '\u0e02\u0e2d\u0e07']])<br>```<br>The result of ```misspellings_smartmode``` is:<br>```<br>('Unsafe', [['\u0e04\u0e19\u0e41\u0e01\u0e48', '\u0e2a', '\u0e02\u0e19\u0e02\u0e2d\u0e07']])<br>```<br><br>If you want to test package you can run ```tnthai-test``` by following this command:<br>```<br>$ tnthai-test<br>```\n          </div>"}, "last_serial": 4610766, "releases": {"1.10": [{"comment_text": "", "digests": {"md5": "86c03ad447bc22afe4d12243edd491fe", "sha256": "e98be3510b0e8209502acd5b3d456ffa1fdbb45416effa83f7a2f98267060d01"}, "downloads": -1, "filename": "tnthai-1.10.tar.gz", "has_sig": false, "md5_digest": "86c03ad447bc22afe4d12243edd491fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 680901, "upload_time": "2018-09-04T06:47:34", "upload_time_iso_8601": "2018-09-04T06:47:34.485099Z", "url": "https://files.pythonhosted.org/packages/85/57/88e6276cd4d493d002c22bc17ac23807dc4a79e82c49fd913d8042c623c7/tnthai-1.10.tar.gz", "yanked": false}], "1.11": [{"comment_text": "", "digests": {"md5": "8ba3e9e6c88624ef4913624410e56794", "sha256": "aa08ec8291018f1335ab5c55ed812f87cc86678a33f3d1bf46189187ff9eca6f"}, "downloads": -1, "filename": "tnthai-1.11.tar.gz", "has_sig": false, "md5_digest": "8ba3e9e6c88624ef4913624410e56794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 680925, "upload_time": "2018-12-18T04:13:50", "upload_time_iso_8601": "2018-12-18T04:13:50.440970Z", "url": "https://files.pythonhosted.org/packages/3d/86/de20ef323dbaba3463aa5e1239f7e909597ee426704208e8883903e319eb/tnthai-1.11.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "da7a514205a4fac4647c2b0c6783c5cd", "sha256": "97a307326b7b64c2e34b93be123c94295c6e9d71505dbdb20459a686079d3829"}, "downloads": -1, "filename": "tnthai-1.6.tar.gz", "has_sig": false, "md5_digest": "da7a514205a4fac4647c2b0c6783c5cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 678819, "upload_time": "2018-07-03T07:07:35", "upload_time_iso_8601": "2018-07-03T07:07:35.575408Z", "url": "https://files.pythonhosted.org/packages/99/11/e53972d20d3e789163f322fc2ddf3e332b8e9c82d9ebd32ebd7cc960312c/tnthai-1.6.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "a083e9e2b108c49e250a481601f79a22", "sha256": "a6d3298ba1fc42b0ef805c8a5d31db288a897df820de71120881afef39c77f5f"}, "downloads": -1, "filename": "tnthai-1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a083e9e2b108c49e250a481601f79a22", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 687047, "upload_time": "2018-07-05T06:52:46", "upload_time_iso_8601": "2018-07-05T06:52:46.125400Z", "url": "https://files.pythonhosted.org/packages/62/70/f1093039203c8fa11c84d552c87a754a8b6cb67304d57269229139dafb20/tnthai-1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23c74e4f053535cbab0ffb90e6c1cdec", "sha256": "0040d5dbae2ec50ca45cecc8a5679ab07f8074a0ad42e05513ac7f9bb7685ec3"}, "downloads": -1, "filename": "tnthai-1.7.tar.gz", "has_sig": false, "md5_digest": "23c74e4f053535cbab0ffb90e6c1cdec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 680130, "upload_time": "2018-07-05T06:52:48", "upload_time_iso_8601": "2018-07-05T06:52:48.924978Z", "url": "https://files.pythonhosted.org/packages/43/25/314e30656cdee36c0bf73f1ef1386079db84c1ee60e54d2e685e290a6267/tnthai-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "0d29e61dd2fb2426c9d991ec03e18369", "sha256": "35eec988ac327008253c763f6f0ae22dc2d74e551484de83c4edec67c6e4e9ae"}, "downloads": -1, "filename": "tnthai-1.8.tar.gz", "has_sig": false, "md5_digest": "0d29e61dd2fb2426c9d991ec03e18369", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 680721, "upload_time": "2018-07-05T07:09:07", "upload_time_iso_8601": "2018-07-05T07:09:07.430604Z", "url": "https://files.pythonhosted.org/packages/19/50/39932725c395c728c24481e179b1330002068da44c9239e538eab830f589/tnthai-1.8.tar.gz", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "9e9e428fd569b1c31992a0dd6754c396", "sha256": "2b4db3e33bb4bd6c8c455d38b203a02fdd190c2d58b9bab587b698a119fd68e3"}, "downloads": -1, "filename": "tnthai-1.9.tar.gz", "has_sig": false, "md5_digest": "9e9e428fd569b1c31992a0dd6754c396", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 680718, "upload_time": "2018-07-05T07:11:58", "upload_time_iso_8601": "2018-07-05T07:11:58.457957Z", "url": "https://files.pythonhosted.org/packages/44/d9/38757fd4ce65d9f68f7a8b675c44016921492c483b2a1001729806e424a4/tnthai-1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ba3e9e6c88624ef4913624410e56794", "sha256": "aa08ec8291018f1335ab5c55ed812f87cc86678a33f3d1bf46189187ff9eca6f"}, "downloads": -1, "filename": "tnthai-1.11.tar.gz", "has_sig": false, "md5_digest": "8ba3e9e6c88624ef4913624410e56794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 680925, "upload_time": "2018-12-18T04:13:50", "upload_time_iso_8601": "2018-12-18T04:13:50.440970Z", "url": "https://files.pythonhosted.org/packages/3d/86/de20ef323dbaba3463aa5e1239f7e909597ee426704208e8883903e319eb/tnthai-1.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:00 2020"}