{"info": {"author": "standard-error@github", "author_email": "ravencoinlib@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Programming Language :: Python"], "description": "# python-ravencoinlib\n\nRavencoin fork of python-bitcoinlib intended to provide access to Ravencoin data \nstructures and protocol. WIP - Test before use\n\nThe RPC interface, ravencoin.rpc, is designed to work with Ravencoin Core v3.3.0+.\n\n\"The only Python library for Ravencoin I've ever used\" - Warren Buffett\n\n## Requirements\n\n    libssl\n    Debian/Ubuntu: sudo apt-get install libssl-dev\n    Windows/other: https://wiki.openssl.org/index.php/Binaries \n\n    Python modules:\n        x16r-hash and x16rv2-hash\n        plyvel (requires libleveldb - for parsing Raven core .dat files)\n\n## Structure\n\nEverything consensus critical is found in the modules under ravencoin.core. This\nrule is followed pretty strictly, for instance chain parameters are split into\nconsensus critical and non-consensus-critical.\n\n    ravencoin.core            - Basic core definitions, datastructures, and\n                              (context-independent) validation\n    ravencoin.core.assets     - OP_RVN_ASSET data structures\n    ravencoin.core.key        - ECC pubkeys\n    ravencoin.core.script     - Scripts and opcodes\n    ravencoin.core.scripteval - Script evaluation/verification\n    ravencoin.core.serialize  - Serialization\n\nIn the future the ravencoin.core may use the Satoshi sourcecode directly as a\nlibrary. Non-consensus critical modules include the following:\n\n    ravencoin          - Chain selection\n    ravencoin.assets   - Asset name and metadata related code\n    ravencoin.base58   - Base58 encoding\n    ravencoin.bloom    - Bloom filters (incomplete)\n    ravencoin.net      - Network communication (in flux)\n    ravencoin.messages - Network messages (in flux)\n    ravencoin.rpc      - Ravencoin Core RPC interface support\n    ravencoin.wallet   - Wallet-related code, currently Ravencoin address and\n                       private key support\n\nEffort has been made to follow the Satoshi source relatively closely, for\ninstance Python code and classes that duplicate the functionality of\ncorresponding Satoshi C++ code uses the same naming conventions: CTransaction,\nCBlockHeader, nValue etc. Otherwise Python naming conventions are followed.\n\n\n## Mutable vs. Immutable objects\n\nLike the Ravencoin Core codebase CTransaction is immutable and\nCMutableTransaction is mutable; unlike the Ravencoin Core codebase this\ndistinction also applies to COutPoint, CTxIn, CTxOut, and CBlock.\n\n\n## Endianness Gotchas\n\nRather confusingly Ravencoin Core shows transaction and block hashes as\nlittle-endian hex rather than the big-endian the rest of the world uses for\nSHA256. python-ravencoinlib provides the convenience functions x() and lx() in\nravencoin.core to convert from big-endian and little-endian hex to raw bytes to\naccomodate this. In addition see b2x() and b2lx() for conversion from bytes to\nbig/little-endian hex.\n\n\n## Module import style\n\nWhile not always good style, it's often convenient for quick scripts if\n`import *` can be used. To support that all the modules have `__all__` defined\nappropriately.\n\n\n# Example Code\n\nSee `examples/` directory. For instance this example creates a transaction\nspending a pay-to-script-hash transaction output:\n\n    $ PYTHONPATH=. examples/spend-pay-to-script-hash-txout.py\n    <hex-encoded transaction>\n\n\n## Selecting the chain to use\n\nDo the following:\n\n    import ravencoin\n    ravencoin.SelectParams(NAME)\n\nWhere NAME is one of 'testnet', 'mainnet', or 'regtest'. The chain currently\nselected is a global variable that changes behavior everywhere, just like in\nthe Satoshi codebase.\n\n\n## Unit tests\n\nUnder ravencoin/tests using test data from Ravencoin Core. To run them:\n\n    python3 -m unittest discover\n\nAlternately, if Tox (see https://tox.readthedocs.org/) is available on your\nsystem, you can run unit tests for multiple Python versions:\n\n    ./runtests.sh\n\nHTML coverage reports can then be found in the htmlcov/ subdirectory.\n\n## Documentation\n\nSphinx documentation is in the \"doc\" subdirectory. Run \"make help\" from there\nto see how to build. You will need the Python \"sphinx\" package installed.\n\nCurrently this is just API documentation generated from the code and\ndocstrings. Higher level written docs would be useful, perhaps starting with\nmuch of this README. Pages are written in reStructuredText and linked from\nindex.rst.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/standard-error/python-ravencoinlib", "keywords": "ravencoin", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-ravencoinlib", "package_url": "https://pypi.org/project/python-ravencoinlib/", "platform": "", "project_url": "https://pypi.org/project/python-ravencoinlib/", "project_urls": {"Homepage": "https://github.com/standard-error/python-ravencoinlib"}, "release_url": "https://pypi.org/project/python-ravencoinlib/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "Ravencoin fork of python-bitcoinlib", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-ravencoinlib</h1>\n<p>Ravencoin fork of python-bitcoinlib intended to provide access to Ravencoin data\nstructures and protocol. WIP - Test before use</p>\n<p>The RPC interface, ravencoin.rpc, is designed to work with Ravencoin Core v3.3.0+.</p>\n<p>\"The only Python library for Ravencoin I've ever used\" - Warren Buffett</p>\n<h2>Requirements</h2>\n<pre><code>libssl\nDebian/Ubuntu: sudo apt-get install libssl-dev\nWindows/other: https://wiki.openssl.org/index.php/Binaries \n\nPython modules:\n    x16r-hash and x16rv2-hash\n    plyvel (requires libleveldb - for parsing Raven core .dat files)\n</code></pre>\n<h2>Structure</h2>\n<p>Everything consensus critical is found in the modules under ravencoin.core. This\nrule is followed pretty strictly, for instance chain parameters are split into\nconsensus critical and non-consensus-critical.</p>\n<pre><code>ravencoin.core            - Basic core definitions, datastructures, and\n                          (context-independent) validation\nravencoin.core.assets     - OP_RVN_ASSET data structures\nravencoin.core.key        - ECC pubkeys\nravencoin.core.script     - Scripts and opcodes\nravencoin.core.scripteval - Script evaluation/verification\nravencoin.core.serialize  - Serialization\n</code></pre>\n<p>In the future the ravencoin.core may use the Satoshi sourcecode directly as a\nlibrary. Non-consensus critical modules include the following:</p>\n<pre><code>ravencoin          - Chain selection\nravencoin.assets   - Asset name and metadata related code\nravencoin.base58   - Base58 encoding\nravencoin.bloom    - Bloom filters (incomplete)\nravencoin.net      - Network communication (in flux)\nravencoin.messages - Network messages (in flux)\nravencoin.rpc      - Ravencoin Core RPC interface support\nravencoin.wallet   - Wallet-related code, currently Ravencoin address and\n                   private key support\n</code></pre>\n<p>Effort has been made to follow the Satoshi source relatively closely, for\ninstance Python code and classes that duplicate the functionality of\ncorresponding Satoshi C++ code uses the same naming conventions: CTransaction,\nCBlockHeader, nValue etc. Otherwise Python naming conventions are followed.</p>\n<h2>Mutable vs. Immutable objects</h2>\n<p>Like the Ravencoin Core codebase CTransaction is immutable and\nCMutableTransaction is mutable; unlike the Ravencoin Core codebase this\ndistinction also applies to COutPoint, CTxIn, CTxOut, and CBlock.</p>\n<h2>Endianness Gotchas</h2>\n<p>Rather confusingly Ravencoin Core shows transaction and block hashes as\nlittle-endian hex rather than the big-endian the rest of the world uses for\nSHA256. python-ravencoinlib provides the convenience functions x() and lx() in\nravencoin.core to convert from big-endian and little-endian hex to raw bytes to\naccomodate this. In addition see b2x() and b2lx() for conversion from bytes to\nbig/little-endian hex.</p>\n<h2>Module import style</h2>\n<p>While not always good style, it's often convenient for quick scripts if\n<code>import *</code> can be used. To support that all the modules have <code>__all__</code> defined\nappropriately.</p>\n<h1>Example Code</h1>\n<p>See <code>examples/</code> directory. For instance this example creates a transaction\nspending a pay-to-script-hash transaction output:</p>\n<pre><code>$ PYTHONPATH=. examples/spend-pay-to-script-hash-txout.py\n&lt;hex-encoded transaction&gt;\n</code></pre>\n<h2>Selecting the chain to use</h2>\n<p>Do the following:</p>\n<pre><code>import ravencoin\nravencoin.SelectParams(NAME)\n</code></pre>\n<p>Where NAME is one of 'testnet', 'mainnet', or 'regtest'. The chain currently\nselected is a global variable that changes behavior everywhere, just like in\nthe Satoshi codebase.</p>\n<h2>Unit tests</h2>\n<p>Under ravencoin/tests using test data from Ravencoin Core. To run them:</p>\n<pre><code>python3 -m unittest discover\n</code></pre>\n<p>Alternately, if Tox (see <a href=\"https://tox.readthedocs.org/\" rel=\"nofollow\">https://tox.readthedocs.org/</a>) is available on your\nsystem, you can run unit tests for multiple Python versions:</p>\n<pre><code>./runtests.sh\n</code></pre>\n<p>HTML coverage reports can then be found in the htmlcov/ subdirectory.</p>\n<h2>Documentation</h2>\n<p>Sphinx documentation is in the \"doc\" subdirectory. Run \"make help\" from there\nto see how to build. You will need the Python \"sphinx\" package installed.</p>\n<p>Currently this is just API documentation generated from the code and\ndocstrings. Higher level written docs would be useful, perhaps starting with\nmuch of this README. Pages are written in reStructuredText and linked from\nindex.rst.</p>\n\n          </div>"}, "last_serial": 6809234, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d3471ae78af5fe746f03933ab93b5a63", "sha256": "39b52d5baa7d30bf690a346b911b17d9766dbe4c9b5da37176fed9aaca0ed20c"}, "downloads": -1, "filename": "python_ravencoinlib-0.1-py3.6.egg", "has_sig": false, "md5_digest": "d3471ae78af5fe746f03933ab93b5a63", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 22180, "upload_time": "2018-11-06T22:12:33", "upload_time_iso_8601": "2018-11-06T22:12:33.511048Z", "url": "https://files.pythonhosted.org/packages/e3/6a/29ae1d56b865fce8a0f1fa4087ab5d6a276578bc9045ac809c271bdb4637/python_ravencoinlib-0.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "754f40b111adace0da77cf8c9919370e", "sha256": "4608052cf4c039880b2661b3c36b6666ce78c7394e6809f04ae59f285709c51f"}, "downloads": -1, "filename": "python-ravencoinlib-0.1.tar.gz", "has_sig": false, "md5_digest": "754f40b111adace0da77cf8c9919370e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7200, "upload_time": "2018-11-06T22:12:31", "upload_time_iso_8601": "2018-11-06T22:12:31.548703Z", "url": "https://files.pythonhosted.org/packages/02/4a/b04cd623ba9acb46193305d9fff18d300352871cbd3deeb106533f31c8a2/python-ravencoinlib-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9d7a94bd1885f5a01cc4c73146f14196", "sha256": "5c57a0e2c3a49032d2723d6bb5525a9f49bd78ad3afad480f2407ff12625bfb6"}, "downloads": -1, "filename": "python-ravencoinlib-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9d7a94bd1885f5a01cc4c73146f14196", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7292, "upload_time": "2018-11-07T12:22:48", "upload_time_iso_8601": "2018-11-07T12:22:48.648429Z", "url": "https://files.pythonhosted.org/packages/fe/97/747875e1572859f7eebb337c1cdcda2d5d7be423ee1049573aa9a7a4ddc7/python-ravencoinlib-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4017b02f1875f09f2ff71ce2da425740", "sha256": "591811e2798d2d22b917cb9bbd88233f527c7245f7738deaa92f9cd4281e7390"}, "downloads": -1, "filename": "python-ravencoinlib-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4017b02f1875f09f2ff71ce2da425740", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9850, "upload_time": "2018-12-07T18:03:56", "upload_time_iso_8601": "2018-12-07T18:03:56.461652Z", "url": "https://files.pythonhosted.org/packages/a1/55/0d1a04ab4827eb0e49ddb7788b0d695b2d3a5d961e3167a45dc57e83a699/python-ravencoinlib-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "415fa8e05851f6d51f3656bd381c0772", "sha256": "5e33aa5e420151b5e727dec24f10b6d4267da90cc9ba5a2598fc9e53b20f7a0d"}, "downloads": -1, "filename": "python-ravencoinlib-0.1.3.tar.gz", "has_sig": false, "md5_digest": "415fa8e05851f6d51f3656bd381c0772", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9529, "upload_time": "2019-05-04T17:26:06", "upload_time_iso_8601": "2019-05-04T17:26:06.482696Z", "url": "https://files.pythonhosted.org/packages/76/c1/dfdf7182e7a7c892d5cebe2acf4df7dcff8a043f83d9044036370644ad17/python-ravencoinlib-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8429bc50c26fb672193f8b668c379904", "sha256": "8335a761167e8afad87483f7ed78651d030aa4cb9d54bae9fc0e3d61cd7f7520"}, "downloads": -1, "filename": "python-ravencoinlib-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8429bc50c26fb672193f8b668c379904", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 147914, "upload_time": "2020-02-07T01:47:06", "upload_time_iso_8601": "2020-02-07T01:47:06.386877Z", "url": "https://files.pythonhosted.org/packages/59/2b/888e0cbf37c6563531a8e83eaeabfca15cd5db92be08b73ca2ca56228bdb/python-ravencoinlib-0.2.0.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "a9c1c62e8c5db7e3066043e5e5a08670", "sha256": "7277ab53e701b838bcd15dc4ed34a30c46727cde6be5abaec3781410015fa286"}, "downloads": -1, "filename": "python-ravencoinlib-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a9c1c62e8c5db7e3066043e5e5a08670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154313, "upload_time": "2020-03-13T22:39:17", "upload_time_iso_8601": "2020-03-13T22:39:17.364299Z", "url": "https://files.pythonhosted.org/packages/7f/54/9a86c3c925ed7d1f38e1e1415919efef1994bf3b854c19edb0e415c6454d/python-ravencoinlib-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a9c1c62e8c5db7e3066043e5e5a08670", "sha256": "7277ab53e701b838bcd15dc4ed34a30c46727cde6be5abaec3781410015fa286"}, "downloads": -1, "filename": "python-ravencoinlib-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a9c1c62e8c5db7e3066043e5e5a08670", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154313, "upload_time": "2020-03-13T22:39:17", "upload_time_iso_8601": "2020-03-13T22:39:17.364299Z", "url": "https://files.pythonhosted.org/packages/7f/54/9a86c3c925ed7d1f38e1e1415919efef1994bf3b854c19edb0e415c6454d/python-ravencoinlib-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:43 2020"}