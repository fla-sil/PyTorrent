{"info": {"author": "Jonathan Nappi", "author_email": "moogar@comcast.net", "bugtrack_url": null, "classifiers": [], "description": "pyitunes\n========\n\nA simple python wrapper for accessing the iTunes Store API `iTunes Store API <http://www.apple.com/itunes/affiliates/resources/documentation/itunes-store-web-service-search-api.html>`_\n\nInstallation\n------------\n\nTo install with `pip <http://www.pip-installer.org/>`_, just run this in your terminal::\n\n    $ pip install pyitunes\n\nOr clone the code from `Github <https://github.com/moogar0880/python-itunes>`_ and::\n\n    $ python setup.py install\n\n\nCaching\n-------\n\nThis module caches responses from the iTunes API to speed up repeated queries\nagainst the same resources. Note, however, that there's no persistent caching\nthat happens between Python processes. Ie, once a python process exits, the\ncache is cleared.\n\n\nExamples\n--------\n\nSearch\n~~~~~~\n\n::\n\n  from __future__ import print_function\n  import itunes\n\n  # Search band U2\n  artist = itunes.search_artist('u2')[0]\n  for album in artist.get_albums():\n      for track in album.get_tracks():\n          print(album.name, album.url, track.name, track.duration, track.preview_url)\n\n  # Search U2 videos\n  videos = itunes.search(query='u2', media='musicVideo')\n  for video in videos:\n      print(video.name, video.preview_url, video.artwork)\n\n  # Search Volta album by Bj\u00f6rk\n  album = itunes.search_album('Volta Bj\u00f6rk')[0]\n\n  # Global Search 'Beatles'\n  items = itunes.search(query='beatles')\n  for item in items:\n      print('[' + item.type + ']', item.artist, item.name, item.url, item.release_date)\n\n  # Search 'Angry Birds' game\n  item = itunes.search(query='angry birds', media='software')[0]\n  vars(item)\n\n  # Search 'Family Guy Season 1'\n  item = itunes.search_season('Family Guy Season 1')[0]\n  vars(item)\n\n  # Search 'Episode 5 of Family Guy Season 1'\n  items = itunes.search_episode('Family Guy Season 1')\n  for ep in items:\n      if ep.episode_number == 5:\n          vars(ep)\n\nLookup\n~~~~~~\n\n::\n\n  import itunes\n\n  # Lookup Achtung Baby album by U2\n  U2_ACHTUNGBABY_ID = 475390461\n  album = itunes.lookup(U2_ACHTUNGBABY_ID)\n\n  print(album.url)\n  print(album.artwork)\n\n  artist = album.artist\n  tracks = album.get_tracks()\n\n  # Lookup song One from Achtung Baby album by U2\n  U2_ONE_ID = 475391315\n  track = itunes.lookup(U2_ONE_ID)\n\n  artist = track.artist\n  album = track.get_album()\n\nTests\n-----\n\n::\n\n  $ py.test tests", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/moogar0880/python-itunes", "keywords": null, "license": "http://www.gnu.org/copyleft/gpl.html", "maintainer": null, "maintainer_email": null, "name": "pyitunes", "package_url": "https://pypi.org/project/pyitunes/", "platform": "any", "project_url": "https://pypi.org/project/pyitunes/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/moogar0880/python-itunes"}, "release_url": "https://pypi.org/project/pyitunes/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "A simple python wrapper to access iTunes Store API", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A simple python wrapper for accessing the iTunes Store API <a href=\"http://www.apple.com/itunes/affiliates/resources/documentation/itunes-store-web-service-search-api.html\" rel=\"nofollow\">iTunes Store API</a></p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install with <a href=\"http://www.pip-installer.org/\" rel=\"nofollow\">pip</a>, just run this in your terminal:</p>\n<pre>$ pip install pyitunes\n</pre>\n<p>Or clone the code from <a href=\"https://github.com/moogar0880/python-itunes\" rel=\"nofollow\">Github</a> and:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"caching\">\n<h2>Caching</h2>\n<p>This module caches responses from the iTunes API to speed up repeated queries\nagainst the same resources. Note, however, that there\u2019s no persistent caching\nthat happens between Python processes. Ie, once a python process exits, the\ncache is cleared.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"search\">\n<h3>Search</h3>\n<pre>from __future__ import print_function\nimport itunes\n\n# Search band U2\nartist = itunes.search_artist('u2')[0]\nfor album in artist.get_albums():\n    for track in album.get_tracks():\n        print(album.name, album.url, track.name, track.duration, track.preview_url)\n\n# Search U2 videos\nvideos = itunes.search(query='u2', media='musicVideo')\nfor video in videos:\n    print(video.name, video.preview_url, video.artwork)\n\n# Search Volta album by Bj\u00f6rk\nalbum = itunes.search_album('Volta Bj\u00f6rk')[0]\n\n# Global Search 'Beatles'\nitems = itunes.search(query='beatles')\nfor item in items:\n    print('[' + item.type + ']', item.artist, item.name, item.url, item.release_date)\n\n# Search 'Angry Birds' game\nitem = itunes.search(query='angry birds', media='software')[0]\nvars(item)\n\n# Search 'Family Guy Season 1'\nitem = itunes.search_season('Family Guy Season 1')[0]\nvars(item)\n\n# Search 'Episode 5 of Family Guy Season 1'\nitems = itunes.search_episode('Family Guy Season 1')\nfor ep in items:\n    if ep.episode_number == 5:\n        vars(ep)\n</pre>\n</div>\n<div id=\"lookup\">\n<h3>Lookup</h3>\n<pre>import itunes\n\n# Lookup Achtung Baby album by U2\nU2_ACHTUNGBABY_ID = 475390461\nalbum = itunes.lookup(U2_ACHTUNGBABY_ID)\n\nprint(album.url)\nprint(album.artwork)\n\nartist = album.artist\ntracks = album.get_tracks()\n\n# Lookup song One from Achtung Baby album by U2\nU2_ONE_ID = 475391315\ntrack = itunes.lookup(U2_ONE_ID)\n\nartist = track.artist\nalbum = track.get_album()\n</pre>\n</div>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<pre>$ py.test tests\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2199863, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "29948a23a637b8a77a7bde5b9cf1dcbb", "sha256": "57bfe3d7770f5fc6157e40f50b6838f0be5c2b3b666ff7d58cc649b3584c9a28"}, "downloads": -1, "filename": "pyitunes-1.0.0.tar.gz", "has_sig": false, "md5_digest": "29948a23a637b8a77a7bde5b9cf1dcbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5840, "upload_time": "2016-06-26T18:14:39", "upload_time_iso_8601": "2016-06-26T18:14:39.708610Z", "url": "https://files.pythonhosted.org/packages/27/92/b970b9abffb5f89abebca9b0c4b36e608dcfa194d92950b5420d3eaab71c/pyitunes-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e004eb95350f2e6544eeb6096ebe0cbc", "sha256": "7110700203b09443c3714d97535e527ba6c2900c25acf2a50ac5069234166b07"}, "downloads": -1, "filename": "pyitunes-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e004eb95350f2e6544eeb6096ebe0cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6392, "upload_time": "2016-07-02T20:05:55", "upload_time_iso_8601": "2016-07-02T20:05:55.387916Z", "url": "https://files.pythonhosted.org/packages/45/f3/f21592c0aee05d8a662d8b8ba12bf3e716dcf8f673254b9b827e91d1c2d1/pyitunes-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e004eb95350f2e6544eeb6096ebe0cbc", "sha256": "7110700203b09443c3714d97535e527ba6c2900c25acf2a50ac5069234166b07"}, "downloads": -1, "filename": "pyitunes-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e004eb95350f2e6544eeb6096ebe0cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6392, "upload_time": "2016-07-02T20:05:55", "upload_time_iso_8601": "2016-07-02T20:05:55.387916Z", "url": "https://files.pythonhosted.org/packages/45/f3/f21592c0aee05d8a662d8b8ba12bf3e716dcf8f673254b9b827e91d1c2d1/pyitunes-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:51 2020"}