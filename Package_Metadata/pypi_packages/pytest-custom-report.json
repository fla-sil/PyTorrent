{"info": {"author": "Wim Glenn", "author_email": "hey@wimglenn.com", "bugtrack_url": null, "classifiers": ["Framework :: Pytest", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "|travis|_ |pypi|_ |pyversions|_\n\n.. |travis| image:: https://img.shields.io/travis/wimglenn/pytest-custom-report.svg?branch=master\n.. _travis: https://travis-ci.org/wimglenn/pytest-custom-report\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pytest-custom-report.svg\n.. _pypi: https://pypi.org/project/pytest-custom-report\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/pytest-custom-report.svg\n.. _pyversions:\n\n\n.. image:: https://user-images.githubusercontent.com/6615374/44383803-a48a7600-a4df-11e8-9ce5-dfd5eca9d208.png\n\n\npytest-custom-report\n====================\n\nA plugin for defining your own characters to be used when displaying test outcomes in `pytest <https://docs.pytest.org/en/latest/>`_ (passed, failed, skipped etc).\n\nFor example, if you wanted to see a `PILE OF POO (U+1F4A9) <https://www.fileformat.info/info/unicode/char/1f4a9/index.htm>`_ glyph displayed in the terminal report for each failing test:\n\n.. code-block:: bash\n\n   pytest --report-failed=\ud83d\udca9\n\nTo persist your custom characters, add a section like this in the `configuration file <https://docs.pytest.org/en/latest/customize.html>`_ (i.e. in ``pytest.ini``, ``tox.ini``, ``setup.cfg`` or whatever):\n\n.. code-block::\n\n   [pytest]\n   report_failed = \ud83d\udca9\n   report_failed_verbose = OH CRAP\n\n\nInstallation and Usage\n----------------------\n\n.. code-block:: bash\n\n   pip install pytest-custom-report\n\nThis will add new command-line arguments and configuration file options to ``pytest`` (detailed in the following section). Command line arguments take precedence over configuration file settings. The plugin is always enabled, but unless you've configured your own symbols the ``pytest`` defaults are used.\n\nTo execute tests with the plugin disabled temporarily, use this:\n\n.. code-block:: bash\n\n   pytest -p no:pytest-custom-report\n\nIf you're trying to use emojis but you can't see the glyphs properly in your terminal, you may be missing unicode fonts with the upper plane - you could install for example `GNU Unifont <http://unifoundry.com/unifont/index.html>`_.\n\n\nConfiguration\n-------------\n\nThe table below shows the available options as well as ``pytest``'s default style for each outcome.\n\n==============  ============================  ======================  =======================\ntest outcome    command-line argument name    .ini file config key    default report symbol\n==============  ============================  ======================  =======================\n``passed``      ``--report-passed``           ``report_passed``       ``.``\n``xpassed``     ``--report-xpassed``          ``report_xpassed``      ``X``\n``failed``      ``--report-failed``           ``report_failed``       ``F``\n``xfailed``     ``--report-xfailed``          ``report_xfailed``      ``x``\n``skipped``     ``--report-skipped``          ``report_skipped``      ``s``\n``error``       ``--report-error``            ``report_error``        ``E``\n==============  ============================  ======================  =======================\n\nWhen tests are executed with ``-v`` or ``--verbose`` flag enabled, you'll see longer strings displayed and one-line per test outcome. These can be specified too.\n\n==============  ============================  ==========================  =======================\ntest outcome    command-line argument name    .ini file config key        default report string\n==============  ============================  ==========================  =======================\n``passed``      ``--report-passed-verbose``   ``report_passed_verbose``   ``PASSED``\n``xpassed``     ``--report-xpassed-verbose``  ``report_xpassed_verbose``  ``XPASS``\n``failed``      ``--report-failed-verbose``   ``report_failed_verbose``   ``FAILED``\n``xfailed``     ``--report-xfailed-verbose``  ``report_xfailed_verbose``  ``XFAIL``\n``skipped``     ``--report-skipped-verbose``  ``report_skipped_verbose``  ``SKIPPED``\n``error``       ``--report-error-verbose``    ``report_error_verbose``    ``ERROR``\n==============  ============================  ==========================  =======================\n\n\nExample config file\n-------------------\n\nHere is some example ``pytest.ini`` content that you can copy-paste and modify to your liking:\n\n.. code::\n\n   [pytest]\n\n   report_passed = \u2714\n   report_xpassed = \ud83e\udd84\n   report_failed = \u2717\n   report_xfailed = \ud83d\udc4e\n   report_skipped = ?\n   report_error = \ud83d\udd25\n\n   report_passed_verbose = OH YEAH\n   report_xpassed_verbose = WHAT IN TARNATION?\n   report_failed_verbose = OH CRAP\n   report_xfailed_verbose = YEAH WHATEVER\n   report_skipped_verbose = DON'T CARE\n   report_error_verbose = YOU MEDDLING KIDS!\n\n\n.. image:: https://user-images.githubusercontent.com/6615374/44383928-02b75900-a4e0-11e8-9d81-84c0d2b14155.png\n\n", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wimglenn/pytest-custom-report", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-custom-report", "package_url": "https://pypi.org/project/pytest-custom-report/", "platform": "", "project_url": "https://pypi.org/project/pytest-custom-report/", "project_urls": {"Homepage": "https://github.com/wimglenn/pytest-custom-report"}, "release_url": "https://pypi.org/project/pytest-custom-report/1.0.1/", "requires_dist": ["pytest"], "requires_python": "", "summary": "Configure the symbols displayed for test outcomes", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/wimglenn/pytest-custom-report\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/76cc88185935d7f38f467fea0879c4b88e0247c5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f77696d676c656e6e2f7079746573742d637573746f6d2d7265706f72742e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/pytest-custom-report\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34ae402085d13406be84e1d9936c20251d191684/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d637573746f6d2d7265706f72742e737667\"></a> <a href=\"#pyversions\" rel=\"nofollow\"><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c78fea08af910275be40e5152571a1c16642e48/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d637573746f6d2d7265706f72742e737667\"></a></p>\n<img alt=\"https://user-images.githubusercontent.com/6615374/44383803-a48a7600-a4df-11e8-9ce5-dfd5eca9d208.png\" id=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24b61c4ac2a72fb75adcdf9c1779c44976ec354a/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363631353337342f34343338333830332d61343861373630302d613464662d313165382d396365352d6466643565636139643230382e706e67\">\n<div id=\"pytest-custom-report\">\n<h2>pytest-custom-report</h2>\n<p>A plugin for defining your own characters to be used when displaying test outcomes in <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> (passed, failed, skipped etc).</p>\n<p>For example, if you wanted to see a <a href=\"https://www.fileformat.info/info/unicode/char/1f4a9/index.htm\" rel=\"nofollow\">PILE OF POO (U+1F4A9)</a> glyph displayed in the terminal report for each failing test:</p>\n<pre>pytest --report-failed<span class=\"o\">=</span>\ud83d\udca9\n</pre>\n<p>To persist your custom characters, add a section like this in the <a href=\"https://docs.pytest.org/en/latest/customize.html\" rel=\"nofollow\">configuration file</a> (i.e. in <tt>pytest.ini</tt>, <tt>tox.ini</tt>, <tt>setup.cfg</tt> or whatever):</p>\n<pre>[pytest]\nreport_failed = \ud83d\udca9\nreport_failed_verbose = OH CRAP\n</pre>\n<div id=\"installation-and-usage\">\n<h3>Installation and Usage</h3>\n<pre>pip install pytest-custom-report\n</pre>\n<p>This will add new command-line arguments and configuration file options to <tt>pytest</tt> (detailed in the following section). Command line arguments take precedence over configuration file settings. The plugin is always enabled, but unless you\u2019ve configured your own symbols the <tt>pytest</tt> defaults are used.</p>\n<p>To execute tests with the plugin disabled temporarily, use this:</p>\n<pre>pytest -p no:pytest-custom-report\n</pre>\n<p>If you\u2019re trying to use emojis but you can\u2019t see the glyphs properly in your terminal, you may be missing unicode fonts with the upper plane - you could install for example <a href=\"http://unifoundry.com/unifont/index.html\" rel=\"nofollow\">GNU Unifont</a>.</p>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>The table below shows the available options as well as <tt>pytest</tt>\u2019s default style for each outcome.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>test outcome</th>\n<th>command-line argument name</th>\n<th>.ini file config key</th>\n<th>default report symbol</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>passed</tt></td>\n<td><tt><span class=\"pre\">--report-passed</span></tt></td>\n<td><tt>report_passed</tt></td>\n<td><tt>.</tt></td>\n</tr>\n<tr><td><tt>xpassed</tt></td>\n<td><tt><span class=\"pre\">--report-xpassed</span></tt></td>\n<td><tt>report_xpassed</tt></td>\n<td><tt>X</tt></td>\n</tr>\n<tr><td><tt>failed</tt></td>\n<td><tt><span class=\"pre\">--report-failed</span></tt></td>\n<td><tt>report_failed</tt></td>\n<td><tt>F</tt></td>\n</tr>\n<tr><td><tt>xfailed</tt></td>\n<td><tt><span class=\"pre\">--report-xfailed</span></tt></td>\n<td><tt>report_xfailed</tt></td>\n<td><tt>x</tt></td>\n</tr>\n<tr><td><tt>skipped</tt></td>\n<td><tt><span class=\"pre\">--report-skipped</span></tt></td>\n<td><tt>report_skipped</tt></td>\n<td><tt>s</tt></td>\n</tr>\n<tr><td><tt>error</tt></td>\n<td><tt><span class=\"pre\">--report-error</span></tt></td>\n<td><tt>report_error</tt></td>\n<td><tt>E</tt></td>\n</tr>\n</tbody>\n</table>\n<p>When tests are executed with <tt><span class=\"pre\">-v</span></tt> or <tt><span class=\"pre\">--verbose</span></tt> flag enabled, you\u2019ll see longer strings displayed and one-line per test outcome. These can be specified too.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>test outcome</th>\n<th>command-line argument name</th>\n<th>.ini file config key</th>\n<th>default report string</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt>passed</tt></td>\n<td><tt><span class=\"pre\">--report-passed-verbose</span></tt></td>\n<td><tt>report_passed_verbose</tt></td>\n<td><tt>PASSED</tt></td>\n</tr>\n<tr><td><tt>xpassed</tt></td>\n<td><tt><span class=\"pre\">--report-xpassed-verbose</span></tt></td>\n<td><tt>report_xpassed_verbose</tt></td>\n<td><tt>XPASS</tt></td>\n</tr>\n<tr><td><tt>failed</tt></td>\n<td><tt><span class=\"pre\">--report-failed-verbose</span></tt></td>\n<td><tt>report_failed_verbose</tt></td>\n<td><tt>FAILED</tt></td>\n</tr>\n<tr><td><tt>xfailed</tt></td>\n<td><tt><span class=\"pre\">--report-xfailed-verbose</span></tt></td>\n<td><tt>report_xfailed_verbose</tt></td>\n<td><tt>XFAIL</tt></td>\n</tr>\n<tr><td><tt>skipped</tt></td>\n<td><tt><span class=\"pre\">--report-skipped-verbose</span></tt></td>\n<td><tt>report_skipped_verbose</tt></td>\n<td><tt>SKIPPED</tt></td>\n</tr>\n<tr><td><tt>error</tt></td>\n<td><tt><span class=\"pre\">--report-error-verbose</span></tt></td>\n<td><tt>report_error_verbose</tt></td>\n<td><tt>ERROR</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"example-config-file\">\n<h3>Example config file</h3>\n<p>Here is some example <tt>pytest.ini</tt> content that you can copy-paste and modify to your liking:</p>\n<pre>[pytest]\n\nreport_passed = \u2714\nreport_xpassed = \ud83e\udd84\nreport_failed = \u2717\nreport_xfailed = \ud83d\udc4e\nreport_skipped = ?\nreport_error = \ud83d\udd25\n\nreport_passed_verbose = OH YEAH\nreport_xpassed_verbose = WHAT IN TARNATION?\nreport_failed_verbose = OH CRAP\nreport_xfailed_verbose = YEAH WHATEVER\nreport_skipped_verbose = DON'T CARE\nreport_error_verbose = YOU MEDDLING KIDS!\n</pre>\n<img alt=\"https://user-images.githubusercontent.com/6615374/44383928-02b75900-a4e0-11e8-9d81-84c0d2b14155.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/908cfb38d1b77a3cb61dce89c45f12e447148822/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f363631353337342f34343338333932382d30326237353930302d613465302d313165382d396438312d3834633064326231343135352e706e67\">\n</div>\n</div>\n\n          </div>"}, "last_serial": 4761571, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "682cf39b24a69115cb5d1e4bdb29a478", "sha256": "722c6dc22e60c09d765166d7a97d76464399405566abf4266648679f27f36958"}, "downloads": -1, "filename": "pytest_custom_report-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "682cf39b24a69115cb5d1e4bdb29a478", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4297, "upload_time": "2018-08-21T06:52:45", "upload_time_iso_8601": "2018-08-21T06:52:45.795425Z", "url": "https://files.pythonhosted.org/packages/eb/a1/ae8b5f2ad9e7f8e3da960b1bda746aaea7621c1a8ae486d2bb3fca3a57ad/pytest_custom_report-1.0.0-py2.py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "85e24eb1c89d8564015213af311f75a3", "sha256": "f048c5a06faf1621099a27571f4d749a666e8bfc038e158e10f17775add27364"}, "downloads": -1, "filename": "pytest_custom_report-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85e24eb1c89d8564015213af311f75a3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5099, "upload_time": "2019-01-30T21:56:54", "upload_time_iso_8601": "2019-01-30T21:56:54.622226Z", "url": "https://files.pythonhosted.org/packages/64/9a/a2d1e9173c8ed7df06de8a50b1c526b0b3a912c5925c153e46e3da69d7d8/pytest_custom_report-1.0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "85e24eb1c89d8564015213af311f75a3", "sha256": "f048c5a06faf1621099a27571f4d749a666e8bfc038e158e10f17775add27364"}, "downloads": -1, "filename": "pytest_custom_report-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "85e24eb1c89d8564015213af311f75a3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5099, "upload_time": "2019-01-30T21:56:54", "upload_time_iso_8601": "2019-01-30T21:56:54.622226Z", "url": "https://files.pythonhosted.org/packages/64/9a/a2d1e9173c8ed7df06de8a50b1c526b0b3a912c5925c153e46e3da69d7d8/pytest_custom_report-1.0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:55:17 2020"}