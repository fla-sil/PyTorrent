{"info": {"author": "Ibragim Abubakarov", "author_email": "ibragim.ai95@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Imperium\n> Imperium is a python package that allows you to easily evaluate python expressions\n\n## Installation\n```bash\npip install imperium\n```\n\n## Usage\n```python\nfrom imperium.evaluator import Expression\n\nobj = {\n    'name': 'iPhone',\n    'model': '11 Pro',\n    'price': 1299.90,\n    'state': 'new'\n}\n\nexpr = Expression()\nif expr.evaluate('$subject.state == \"new\"', obj): # \"$subject\" is a reserved key\n    # Your logic\n```\nTo access the data in the given subject, use the \"$subject\" key as shown above.\n\n### Check if the subject has an attribute\n```python\nfrom imperium.evaluator import Expression\n\nobj = {\n    'name': 'iPhone',\n    'model': '11 Pro',\n    'price': 1299.90,\n    'state': 'new'\n}\n\nsomeother_obj = {\n    'name': 'John Doe'\n}\n\nexpr = Expression()\nres = expr.evaluate('exists(\"$subject.price\", $subject)', subject=obj, source=someother_obj) # REMINDER: \"$subject\" key let's you access the object that you passed to the evaluate method (obj in this case)\nprint(res) # Output: True\n```\n\n### Testing regular expressions\n```python\nfrom imperium.evaluator import Expression\n\nobj = {\n    'name': 'iPhone',\n    'model': '11 Pro',\n    'price': 1299.90,\n    'state': 'new'\n}\n\nbuyer = {\n    'fullname': 'John Doe'\n}\n\n# Passing the name attribute of the subject\n# REMINDER: \"$subject\" let's you access the object/subject passed to the evaluate method (obj in this case)\n# and \"$source\" let's you access the optional source object passed to the evaluate method \nexpression = \"exists('$subject.name', $subject) && matches('IPHONE', $subject['name'], 'i')\"\n\nexpr = Expression()\nres = expr.evaluate(expression, subject=obj, source=buyer)\nprint(res) # Output: True\n```\n\n**Imperium** has built-in functions to simplify certain actions/verifications.\n\nFunction            |   Argument(s)                                             |   Description\n--------------------|-----------------------------------------------------------|----------------\n**exists()**        | key (Ex: $subject.price), $subject                        | Checks if the given attribute/key exists in the given subject.\n**matches()**       | regex, value, flag (**i** or **m**)                       | Tests a regular expression\n**date()**          | datestring, format                                        | **datestring** and **format** are both optional, provide them to the function if you want to convert a date string to date object. <br> If these two arguments are left emtpy, the function returns date object with current date and time.\n**date_modify()**   | date, operation (**+** \\| **-**), valuetype (**days** \\| **months** \\| **years**), value: **int**  | This function can add and subtract days, months and years from a date object.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ibragim64/imperium", "keywords": "", "license": "", "maintainer": "Ibragim Abubakarov", "maintainer_email": "ibragim.ai95@gmail.com", "name": "imperium", "package_url": "https://pypi.org/project/imperium/", "platform": "", "project_url": "https://pypi.org/project/imperium/", "project_urls": {"Homepage": "https://github.com/ibragim64/imperium"}, "release_url": "https://pypi.org/project/imperium/0.0.11/", "requires_dist": null, "requires_python": "", "summary": "Imperium is a python package that allows you to easily evaluate python expressions", "version": "0.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Imperium</h1>\n<blockquote>\n<p>Imperium is a python package that allows you to easily evaluate python expressions</p>\n</blockquote>\n<h2>Installation</h2>\n<pre>pip install imperium\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">imperium.evaluator</span> <span class=\"kn\">import</span> <span class=\"n\">Expression</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'iPhone'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'model'</span><span class=\"p\">:</span> <span class=\"s1\">'11 Pro'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'price'</span><span class=\"p\">:</span> <span class=\"mf\">1299.90</span><span class=\"p\">,</span>\n    <span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"s1\">'new'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">Expression</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"s1\">'$subject.state == \"new\"'</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span> <span class=\"c1\"># \"$subject\" is a reserved key</span>\n    <span class=\"c1\"># Your logic</span>\n</pre>\n<p>To access the data in the given subject, use the \"$subject\" key as shown above.</p>\n<h3>Check if the subject has an attribute</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">imperium.evaluator</span> <span class=\"kn\">import</span> <span class=\"n\">Expression</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'iPhone'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'model'</span><span class=\"p\">:</span> <span class=\"s1\">'11 Pro'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'price'</span><span class=\"p\">:</span> <span class=\"mf\">1299.90</span><span class=\"p\">,</span>\n    <span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"s1\">'new'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">someother_obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">Expression</span><span class=\"p\">()</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"s1\">'exists(\"$subject.price\", $subject)'</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">someother_obj</span><span class=\"p\">)</span> <span class=\"c1\"># REMINDER: \"$subject\" key let's you access the object that you passed to the evaluate method (obj in this case)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"c1\"># Output: True</span>\n</pre>\n<h3>Testing regular expressions</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">imperium.evaluator</span> <span class=\"kn\">import</span> <span class=\"n\">Expression</span>\n\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'iPhone'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'model'</span><span class=\"p\">:</span> <span class=\"s1\">'11 Pro'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'price'</span><span class=\"p\">:</span> <span class=\"mf\">1299.90</span><span class=\"p\">,</span>\n    <span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"s1\">'new'</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">buyer</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'fullname'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Passing the name attribute of the subject</span>\n<span class=\"c1\"># REMINDER: \"$subject\" let's you access the object/subject passed to the evaluate method (obj in this case)</span>\n<span class=\"c1\"># and \"$source\" let's you access the optional source object passed to the evaluate method </span>\n<span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"s2\">\"exists('$subject.name', $subject) &amp;&amp; matches('IPHONE', $subject['name'], 'i')\"</span>\n\n<span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">Expression</span><span class=\"p\">()</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">buyer</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">)</span> <span class=\"c1\"># Output: True</span>\n</pre>\n<p><strong>Imperium</strong> has built-in functions to simplify certain actions/verifications.</p>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Argument(s)</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>exists()</strong></td>\n<td>key (Ex: $subject.price), $subject</td>\n<td>Checks if the given attribute/key exists in the given subject.</td>\n</tr>\n<tr>\n<td><strong>matches()</strong></td>\n<td>regex, value, flag (<strong>i</strong> or <strong>m</strong>)</td>\n<td>Tests a regular expression</td>\n</tr>\n<tr>\n<td><strong>date()</strong></td>\n<td>datestring, format</td>\n<td><strong>datestring</strong> and <strong>format</strong> are both optional, provide them to the function if you want to convert a date string to date object. <br> If these two arguments are left emtpy, the function returns date object with current date and time.</td>\n</tr>\n<tr>\n<td><strong>date_modify()</strong></td>\n<td>date, operation (<strong>+</strong> | <strong>-</strong>), valuetype (<strong>days</strong> | <strong>months</strong> | <strong>years</strong>), value: <strong>int</strong></td>\n<td>This function can add and subtract days, months and years from a date object.</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6450398, "releases": {"0.0.11": [{"comment_text": "", "digests": {"md5": "56c4521b4530e4ef8fa6d566e89accce", "sha256": "7d0ae80bd2e1ab07155f98297479dc1e42ad11e90c9c99c64d676ac829f9518d"}, "downloads": -1, "filename": "imperium-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "56c4521b4530e4ef8fa6d566e89accce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4110, "upload_time": "2020-01-14T08:52:17", "upload_time_iso_8601": "2020-01-14T08:52:17.831197Z", "url": "https://files.pythonhosted.org/packages/13/de/0b5ca38d704cc963ee3d3b164737e3431ebde9612504301df6a095077252/imperium-0.0.11-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "56c4521b4530e4ef8fa6d566e89accce", "sha256": "7d0ae80bd2e1ab07155f98297479dc1e42ad11e90c9c99c64d676ac829f9518d"}, "downloads": -1, "filename": "imperium-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "56c4521b4530e4ef8fa6d566e89accce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4110, "upload_time": "2020-01-14T08:52:17", "upload_time_iso_8601": "2020-01-14T08:52:17.831197Z", "url": "https://files.pythonhosted.org/packages/13/de/0b5ca38d704cc963ee3d3b164737e3431ebde9612504301df6a095077252/imperium-0.0.11-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:56:34 2020"}