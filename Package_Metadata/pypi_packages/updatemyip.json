{"info": {"author": "Mike Conigliaro", "author_email": "mike@conigliaro.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Internet :: Name Service (DNS)", "Topic :: System :: Systems Administration"], "description": "# Update My IP\n\nIndustrial-strength dynamic DNS client\n\n## Features\n\n- Extensible plugin-oriented architecture\n- Built-in address provider result validation\n- Address provider redundancy with optional retry and Fibonacci backoff\n- Detailed logging\n- Dry-run mode\n\n## Installation\n\n    pip install updatemyip\n\n## Running the Application\n\n    updatemyip <dns_provider> <fqdn> [options]\n\nUse `--help` to see available options.\n\n### Built-In Providers\n\n#### Address Providers\n\nAddress providers are responsible for obtaining an address.\n\n- `aws.CheckIP`: URL provided by [Amazon Web Services](https://aws.amazon.com/)\n- `dyn.CheckIP`: URL provided by [Dyn](https://dyn.com/)\n- `google.CheckIP`: URL provided by [Google Domains](https://domains.google.com)\n- `ipify.IPv4`: URL provided by [ipify](https://www.ipify.org/)\n- `ipify.IPv6`: URL provided by [ipify](https://www.ipify.org/) (IPv6)\n\n#### DNS Providers\n\nDNS providers are responsible for managing a DNS record.\n\n- `aws.Route53`: Uses [Amazon Route53](https://aws.amazon.com/route53/)\n\n## Development\n\n### Getting Started\n\n    pip install pipenv\n    pipenv install --dev\n    pipenv shell\n    ...\n\n### Running Tests\n\n    pytest\n\n### Writing Providers\n\nA provider is any class that inherits from `AddressProvider` or `DNSProvider`. In production mode, Python modules/packages prefixed with `updatemyip_` will automatically be imported from the following locations:\n\n1. `$XDG_CONFIG_HOME/updatemyip/providers`\n1. `/etc/updatemyip/providers`\n1. [sys.path](https://docs.python.org/3/library/sys.html#sys.path)\n\nFor example, if you create a file at `$XDG_CONFIG_HOME/updatemyip/providers/updatemyip_foo.py` with a class named `Bar` that inherits from one of the `Provider` subclasses, your module can be referenced (e.g. in command-line options) as `foo.Bar`.\n\n#### Provider Methods\n\nEach provider type has a set of methods that will be called in a particular order. Note that some of these methods are expected to return a specific value in order to progress to the next step.\n\n##### All Providers\n\n1. `options_pre(parser)`: Runs before option parsing. Use this method to add your own provider-specific command line arguments (See: [argparse](https://docs.python.org/3.6/library/argparse.html)).\n1. `options_post(parser, options)`: Runs after option parsing. Use this method to verify your provider-specific command line arguments.\n\n##### Address Providers\n\n1. `fetch(options)`: Fetches and returns an IP address, hostname, etc.\n1. `validate(options, address)`: Returns `True` if the address is valid and `False` otherwise\n\n##### DNS Providers\n\n1. `check(options, address)`: Returns `True` if a DNS update is required and `False` otherwise\n1. `update(options, address)`: Returns `True` if a DNS update was successful and `False` otherwise\n\n#### Examples\n\nI'll write more documentation if people are interested, but for now, see the examples at [updatemyip/providers](updatemyip/providers) and [tests/providers](tests/providers).\n\n#### Releases\n\n1. Bump `VERSION` in [updatemyip/meta.py](updatemyip/meta.py)\n\n1. Update [CHANGELOG.md](CHANGELOG.md)\n\n1. Run `release` script:\n    ```\n    release <version>\n    ```\n\n### To Do\n\n- Add tests for built-in providers\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mconigliaro/updatemyip", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "updatemyip", "package_url": "https://pypi.org/project/updatemyip/", "platform": "", "project_url": "https://pypi.org/project/updatemyip/", "project_urls": {"Homepage": "https://github.com/mconigliaro/updatemyip"}, "release_url": "https://pypi.org/project/updatemyip/0.1.1/", "requires_dist": ["boto3 (<2.0,>=1.12)", "requests (<3.0,>=2.23)"], "requires_python": ">=3.6", "summary": "Industrial-strength dynamic DNS client", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Update My IP</h1>\n<p>Industrial-strength dynamic DNS client</p>\n<h2>Features</h2>\n<ul>\n<li>Extensible plugin-oriented architecture</li>\n<li>Built-in address provider result validation</li>\n<li>Address provider redundancy with optional retry and Fibonacci backoff</li>\n<li>Detailed logging</li>\n<li>Dry-run mode</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install updatemyip\n</code></pre>\n<h2>Running the Application</h2>\n<pre><code>updatemyip &lt;dns_provider&gt; &lt;fqdn&gt; [options]\n</code></pre>\n<p>Use <code>--help</code> to see available options.</p>\n<h3>Built-In Providers</h3>\n<h4>Address Providers</h4>\n<p>Address providers are responsible for obtaining an address.</p>\n<ul>\n<li><code>aws.CheckIP</code>: URL provided by <a href=\"https://aws.amazon.com/\" rel=\"nofollow\">Amazon Web Services</a></li>\n<li><code>dyn.CheckIP</code>: URL provided by <a href=\"https://dyn.com/\" rel=\"nofollow\">Dyn</a></li>\n<li><code>google.CheckIP</code>: URL provided by <a href=\"https://domains.google.com\" rel=\"nofollow\">Google Domains</a></li>\n<li><code>ipify.IPv4</code>: URL provided by <a href=\"https://www.ipify.org/\" rel=\"nofollow\">ipify</a></li>\n<li><code>ipify.IPv6</code>: URL provided by <a href=\"https://www.ipify.org/\" rel=\"nofollow\">ipify</a> (IPv6)</li>\n</ul>\n<h4>DNS Providers</h4>\n<p>DNS providers are responsible for managing a DNS record.</p>\n<ul>\n<li><code>aws.Route53</code>: Uses <a href=\"https://aws.amazon.com/route53/\" rel=\"nofollow\">Amazon Route53</a></li>\n</ul>\n<h2>Development</h2>\n<h3>Getting Started</h3>\n<pre><code>pip install pipenv\npipenv install --dev\npipenv shell\n...\n</code></pre>\n<h3>Running Tests</h3>\n<pre><code>pytest\n</code></pre>\n<h3>Writing Providers</h3>\n<p>A provider is any class that inherits from <code>AddressProvider</code> or <code>DNSProvider</code>. In production mode, Python modules/packages prefixed with <code>updatemyip_</code> will automatically be imported from the following locations:</p>\n<ol>\n<li><code>$XDG_CONFIG_HOME/updatemyip/providers</code></li>\n<li><code>/etc/updatemyip/providers</code></li>\n<li><a href=\"https://docs.python.org/3/library/sys.html#sys.path\" rel=\"nofollow\">sys.path</a></li>\n</ol>\n<p>For example, if you create a file at <code>$XDG_CONFIG_HOME/updatemyip/providers/updatemyip_foo.py</code> with a class named <code>Bar</code> that inherits from one of the <code>Provider</code> subclasses, your module can be referenced (e.g. in command-line options) as <code>foo.Bar</code>.</p>\n<h4>Provider Methods</h4>\n<p>Each provider type has a set of methods that will be called in a particular order. Note that some of these methods are expected to return a specific value in order to progress to the next step.</p>\n<h5>All Providers</h5>\n<ol>\n<li><code>options_pre(parser)</code>: Runs before option parsing. Use this method to add your own provider-specific command line arguments (See: <a href=\"https://docs.python.org/3.6/library/argparse.html\" rel=\"nofollow\">argparse</a>).</li>\n<li><code>options_post(parser, options)</code>: Runs after option parsing. Use this method to verify your provider-specific command line arguments.</li>\n</ol>\n<h5>Address Providers</h5>\n<ol>\n<li><code>fetch(options)</code>: Fetches and returns an IP address, hostname, etc.</li>\n<li><code>validate(options, address)</code>: Returns <code>True</code> if the address is valid and <code>False</code> otherwise</li>\n</ol>\n<h5>DNS Providers</h5>\n<ol>\n<li><code>check(options, address)</code>: Returns <code>True</code> if a DNS update is required and <code>False</code> otherwise</li>\n<li><code>update(options, address)</code>: Returns <code>True</code> if a DNS update was successful and <code>False</code> otherwise</li>\n</ol>\n<h4>Examples</h4>\n<p>I'll write more documentation if people are interested, but for now, see the examples at <a href=\"updatemyip/providers\" rel=\"nofollow\">updatemyip/providers</a> and <a href=\"tests/providers\" rel=\"nofollow\">tests/providers</a>.</p>\n<h4>Releases</h4>\n<ol>\n<li>\n<p>Bump <code>VERSION</code> in <a href=\"updatemyip/meta.py\" rel=\"nofollow\">updatemyip/meta.py</a></p>\n</li>\n<li>\n<p>Update <a href=\"CHANGELOG.md\" rel=\"nofollow\">CHANGELOG.md</a></p>\n</li>\n<li>\n<p>Run <code>release</code> script:</p>\n<pre><code>release &lt;version&gt;\n</code></pre>\n</li>\n</ol>\n<h3>To Do</h3>\n<ul>\n<li>Add tests for built-in providers</li>\n</ul>\n\n          </div>"}, "last_serial": 6861726, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "fc1a2797e8073d8e89f9092901322048", "sha256": "3cbf15c06a193ae1151290dd1b34d84c1cba2095faa6555de30f2e3dc6a0578e"}, "downloads": -1, "filename": "updatemyip-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fc1a2797e8073d8e89f9092901322048", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11435, "upload_time": "2020-03-22T19:34:47", "upload_time_iso_8601": "2020-03-22T19:34:47.148164Z", "url": "https://files.pythonhosted.org/packages/e9/59/9505a01d1012d3aed09afa52241406866fa81689ac91c0313ad730cad851/updatemyip-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9058ca6fca135d1533c8609196af5880", "sha256": "473c7d8ce8debb65d5f253fbeedd59cb8f5ad18396480b575f1051392b201867"}, "downloads": -1, "filename": "updatemyip-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9058ca6fca135d1533c8609196af5880", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8823, "upload_time": "2020-03-22T19:34:48", "upload_time_iso_8601": "2020-03-22T19:34:48.973404Z", "url": "https://files.pythonhosted.org/packages/38/8d/775d7bfc81bbec3e5aec3fa13fd1c50814de3e81c3ebde03f31687ee46a3/updatemyip-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "04eabecc1e5ac226bb6606882bded9d4", "sha256": "5eea1e605eff9d2471edd459eb5cc45ebc9cf28eff8316b842ef207d3adced1c"}, "downloads": -1, "filename": "updatemyip-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04eabecc1e5ac226bb6606882bded9d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11433, "upload_time": "2020-03-22T20:34:53", "upload_time_iso_8601": "2020-03-22T20:34:53.360213Z", "url": "https://files.pythonhosted.org/packages/45/38/0148c00ce0024f9f30c9790f83bf50d18ea9ea7179c3203d8a1477a4fbfa/updatemyip-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75747addf3100574f07d3485dc3f7b0f", "sha256": "5398baa3102aed1019d079a99e2d7d76a9fbb4ffc6e91b61d1f059d50fb8ead4"}, "downloads": -1, "filename": "updatemyip-0.1.1.tar.gz", "has_sig": false, "md5_digest": "75747addf3100574f07d3485dc3f7b0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8902, "upload_time": "2020-03-22T20:34:54", "upload_time_iso_8601": "2020-03-22T20:34:54.684507Z", "url": "https://files.pythonhosted.org/packages/93/d2/70b14c7f1a4e5b89a9ec5b51e2036c16735424832cd015241bd16e7b9170/updatemyip-0.1.1.tar.gz", "yanked": false}], "0.1.1b1": [{"comment_text": "", "digests": {"md5": "a63923b20a9c1c09fc83d9cc12567412", "sha256": "304261009ff375a820ec0acad94e88f4c7822e7efb86fd96366d8bb27405b48c"}, "downloads": -1, "filename": "updatemyip-0.1.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "a63923b20a9c1c09fc83d9cc12567412", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11463, "upload_time": "2020-03-22T20:27:46", "upload_time_iso_8601": "2020-03-22T20:27:46.092317Z", "url": "https://files.pythonhosted.org/packages/69/c4/f87cc1c4fc08a6c0c9ce9718e97b606733e571bba09f4a65458b80909ac8/updatemyip-0.1.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2610638a5fd357d07f9e8244ee1fae5", "sha256": "3d6dd88a5c438c267b83a4af23684949d0a16496cc006b22b36871c3fefc412d"}, "downloads": -1, "filename": "updatemyip-0.1.1b1.tar.gz", "has_sig": false, "md5_digest": "d2610638a5fd357d07f9e8244ee1fae5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8909, "upload_time": "2020-03-22T20:27:47", "upload_time_iso_8601": "2020-03-22T20:27:47.369492Z", "url": "https://files.pythonhosted.org/packages/e5/d3/1ea62a2daedeb85e8d8345729aed1e55f3dfd150f0e99b353c8ff355bc2d/updatemyip-0.1.1b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "04eabecc1e5ac226bb6606882bded9d4", "sha256": "5eea1e605eff9d2471edd459eb5cc45ebc9cf28eff8316b842ef207d3adced1c"}, "downloads": -1, "filename": "updatemyip-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "04eabecc1e5ac226bb6606882bded9d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11433, "upload_time": "2020-03-22T20:34:53", "upload_time_iso_8601": "2020-03-22T20:34:53.360213Z", "url": "https://files.pythonhosted.org/packages/45/38/0148c00ce0024f9f30c9790f83bf50d18ea9ea7179c3203d8a1477a4fbfa/updatemyip-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75747addf3100574f07d3485dc3f7b0f", "sha256": "5398baa3102aed1019d079a99e2d7d76a9fbb4ffc6e91b61d1f059d50fb8ead4"}, "downloads": -1, "filename": "updatemyip-0.1.1.tar.gz", "has_sig": false, "md5_digest": "75747addf3100574f07d3485dc3f7b0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8902, "upload_time": "2020-03-22T20:34:54", "upload_time_iso_8601": "2020-03-22T20:34:54.684507Z", "url": "https://files.pythonhosted.org/packages/93/d2/70b14c7f1a4e5b89a9ec5b51e2036c16735424832cd015241bd16e7b9170/updatemyip-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:54 2020"}