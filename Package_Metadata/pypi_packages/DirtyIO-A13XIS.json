{"info": {"author": "Lex Sternin", "author_email": "allseeingstar@googlemail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# DirtyIO\n\n## Description\n\n__At least python 3.5 is needed to use this module__\n\nDirtyIO was designed to ease the processing of binary data by providing an interface to break down the reading and writing process into comprehensible pieces.\n\n## Documentation\n\n### DirtyReader\n    Interface laid over a file pointer for reading actions\n\n- constructor(Path)\n\n    Takes path string or a Pathlib.Path (**not a file pointer!**) as an argument and returns an instance of DirtyReader.\n    Path will be checked for sanity. In case the path is not a file, an empty DirtyReader is returned.\n- is_reader_valid\n\n    Checks whether the Reader is empty or not.\n- read_*(amount)\n\n    Reads a provided amount of of chunks of the underlying file and returns it as a byte, if amount=1,\n    or a byte array if amount>1.\n    The chunk size ranges from singular bytes to qwords (4 words aka 8 bytes).\n    A list of the names for the availabe chunk sizes can be found below.\n- read_*_ints(amount,be=True,sig=False)\n\n    Reads a provided amount of of chunks of the underlying file and returns it as an int, if amount=1,\n    or an int array if amount>1. The be flag (whether the bytes shall be interpreted as big endian)\n    and the sig flag (whether the bytes shall be interpreted as a signed number) can be specified, but\n    are optional.\n    The chunk size ranges from singular bytes to qwords (4 words aka 8 bytes).\n    A list of the names for the availabe chunk sizes can be found below.\n- read_nt_string()\n\n    Reads and returns a null terminated string. In case the End of file has been reached before the string \n    gets terminated, an error is thrown and the file is reverted to the previous state.\n- pad_out() \n\n    Sets the pointer to the nearest word (4 byte) border. The 1 to 3 bytes are seen as padding and are omitted.\n- skip_*()\n\n    Skip one chunk of the underlying file omitting it in the process.\n    The chunk size ranges from singular bytes to qwords (4 words aka 8 bytes).\n    A list of the names for the availabe chunk sizes can be found below.\n- rebase(Path)\n\n    close underlying file and switch to another. Returns whether the switch was successful.\n    If not, the state is not changed, aka the old file is still open.\n- passthrough functions\n\n    Since the underlying file pointer shall not be accessed for consistency reasons, there are some functions\n    which are just passed through the native file pointer object.\n\n     * tell()\n\n         Returns the distance between current position and beginning of file in bytes.\n\n     * seek(amount, mode)\n\n         pushes the file pointer to a another point in the file. This function was enabled to allow custom\n         reverting via tell-seek pattern. It was designed to be the last resort. Please treat it as such.\n\n     * dirty_bytes(amount)\n\n         returns the \"dirty\" byte string of specified length. This function was enabled to allow processing\n         of data that should not be interpreted, e.g. non null terminating textual data. It was designed to\n         be the last resort. Please treat it as such.\n\n     * close\n\n       closes the file and emptying the DirtyReader. Just like with regular file pointers, it is highly\n       advised to use this function after everything is done.\n\n### DirtyWriter\n    Interface laid over a file pointer for writing actions\n\n- constructor(Path)\n\n    Takes path string or a Pathlib.Path (**not a file pointer!**) as an argument and returns an instance of \n    DirtyWriter.\n    Path will be checked for sanity. In case the path is not a file, an empty DirtyWriter is returned. \n- is_writer_valid()\n\n    Checks whether the Writer is empty or not.\n- write_bytes(bytes)\n\n    Writes a byte(string) or byte array to the file\n\n- write_ints(ints,be=true,sign=false)\n\n    Writes an int or int array to the file. The be flag (whether the bytes shall be interpreted as big endian)\n    and the sig flag (whether the bytes shall be interpreted as a signed number) can be specified, but\n    are optional.\n\n- write_bytes_as_nt_string(bs)\n\n    writes the bytestring or bytearray to the file and adds a null terminator byte at the end.\n\n- rebase(Path)\n\n    close underlying file and switch to another. Returns whether the switch was successful.\n    If not, the state is not changed, aka the old file is still open.\n\n- passthrough functions\n\n    Since the underlying file pointer shall not be accessed for consistency reasons, there are some functions\n    which are just passed through the native file pointer object.\n\n     * close()\n\n         closes the file and emptying the DirtyReader. Just like with regular file pointers, it is highly\n         advised to use this function after everything is done.\n\n\n## chunk size names\n    The following is the list of names that can replace the star from the functions above:\n\n  - byte    1 Byte\n  - word    2 Byte (Word)\n  - triplet 3 Byte\n  - dword   4 Byte (Double Word)\n  - quintet 5 Byte\n  - sextet  6 Byte\n  - septet  7 Byte\n  - qword   8 Byte (Quadruple Word)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/A13XIS/dirtyio", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "DirtyIO-A13XIS", "package_url": "https://pypi.org/project/DirtyIO-A13XIS/", "platform": "", "project_url": "https://pypi.org/project/DirtyIO-A13XIS/", "project_urls": {"Homepage": "https://github.com/A13XIS/dirtyio"}, "release_url": "https://pypi.org/project/DirtyIO-A13XIS/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Dirty quick binary file management library", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>DirtyIO</h1>\n<h2>Description</h2>\n<p><strong>At least python 3.5 is needed to use this module</strong></p>\n<p>DirtyIO was designed to ease the processing of binary data by providing an interface to break down the reading and writing process into comprehensible pieces.</p>\n<h2>Documentation</h2>\n<h3>DirtyReader</h3>\n<pre><code>Interface laid over a file pointer for reading actions\n</code></pre>\n<ul>\n<li>\n<p>constructor(Path)</p>\n<p>Takes path string or a Pathlib.Path (<strong>not a file pointer!</strong>) as an argument and returns an instance of DirtyReader.\nPath will be checked for sanity. In case the path is not a file, an empty DirtyReader is returned.</p>\n</li>\n<li>\n<p>is_reader_valid</p>\n<p>Checks whether the Reader is empty or not.</p>\n</li>\n<li>\n<p>read_*(amount)</p>\n<p>Reads a provided amount of of chunks of the underlying file and returns it as a byte, if amount=1,\nor a byte array if amount&gt;1.\nThe chunk size ranges from singular bytes to qwords (4 words aka 8 bytes).\nA list of the names for the availabe chunk sizes can be found below.</p>\n</li>\n<li>\n<p>read_*_ints(amount,be=True,sig=False)</p>\n<p>Reads a provided amount of of chunks of the underlying file and returns it as an int, if amount=1,\nor an int array if amount&gt;1. The be flag (whether the bytes shall be interpreted as big endian)\nand the sig flag (whether the bytes shall be interpreted as a signed number) can be specified, but\nare optional.\nThe chunk size ranges from singular bytes to qwords (4 words aka 8 bytes).\nA list of the names for the availabe chunk sizes can be found below.</p>\n</li>\n<li>\n<p>read_nt_string()</p>\n<p>Reads and returns a null terminated string. In case the End of file has been reached before the string\ngets terminated, an error is thrown and the file is reverted to the previous state.</p>\n</li>\n<li>\n<p>pad_out()</p>\n<p>Sets the pointer to the nearest word (4 byte) border. The 1 to 3 bytes are seen as padding and are omitted.</p>\n</li>\n<li>\n<p>skip_*()</p>\n<p>Skip one chunk of the underlying file omitting it in the process.\nThe chunk size ranges from singular bytes to qwords (4 words aka 8 bytes).\nA list of the names for the availabe chunk sizes can be found below.</p>\n</li>\n<li>\n<p>rebase(Path)</p>\n<p>close underlying file and switch to another. Returns whether the switch was successful.\nIf not, the state is not changed, aka the old file is still open.</p>\n</li>\n<li>\n<p>passthrough functions</p>\n<p>Since the underlying file pointer shall not be accessed for consistency reasons, there are some functions\nwhich are just passed through the native file pointer object.</p>\n<ul>\n<li>\n<p>tell()</p>\n<p>Returns the distance between current position and beginning of file in bytes.</p>\n</li>\n<li>\n<p>seek(amount, mode)</p>\n<p>pushes the file pointer to a another point in the file. This function was enabled to allow custom\nreverting via tell-seek pattern. It was designed to be the last resort. Please treat it as such.</p>\n</li>\n<li>\n<p>dirty_bytes(amount)</p>\n<p>returns the \"dirty\" byte string of specified length. This function was enabled to allow processing\nof data that should not be interpreted, e.g. non null terminating textual data. It was designed to\nbe the last resort. Please treat it as such.</p>\n</li>\n<li>\n<p>close</p>\n<p>closes the file and emptying the DirtyReader. Just like with regular file pointers, it is highly\nadvised to use this function after everything is done.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>DirtyWriter</h3>\n<pre><code>Interface laid over a file pointer for writing actions\n</code></pre>\n<ul>\n<li>\n<p>constructor(Path)</p>\n<p>Takes path string or a Pathlib.Path (<strong>not a file pointer!</strong>) as an argument and returns an instance of\nDirtyWriter.\nPath will be checked for sanity. In case the path is not a file, an empty DirtyWriter is returned.</p>\n</li>\n<li>\n<p>is_writer_valid()</p>\n<p>Checks whether the Writer is empty or not.</p>\n</li>\n<li>\n<p>write_bytes(bytes)</p>\n<p>Writes a byte(string) or byte array to the file</p>\n</li>\n<li>\n<p>write_ints(ints,be=true,sign=false)</p>\n<p>Writes an int or int array to the file. The be flag (whether the bytes shall be interpreted as big endian)\nand the sig flag (whether the bytes shall be interpreted as a signed number) can be specified, but\nare optional.</p>\n</li>\n<li>\n<p>write_bytes_as_nt_string(bs)</p>\n<p>writes the bytestring or bytearray to the file and adds a null terminator byte at the end.</p>\n</li>\n<li>\n<p>rebase(Path)</p>\n<p>close underlying file and switch to another. Returns whether the switch was successful.\nIf not, the state is not changed, aka the old file is still open.</p>\n</li>\n<li>\n<p>passthrough functions</p>\n<p>Since the underlying file pointer shall not be accessed for consistency reasons, there are some functions\nwhich are just passed through the native file pointer object.</p>\n<ul>\n<li>\n<p>close()</p>\n<p>closes the file and emptying the DirtyReader. Just like with regular file pointers, it is highly\nadvised to use this function after everything is done.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>chunk size names</h2>\n<pre><code>The following is the list of names that can replace the star from the functions above:\n</code></pre>\n<ul>\n<li>byte    1 Byte</li>\n<li>word    2 Byte (Word)</li>\n<li>triplet 3 Byte</li>\n<li>dword   4 Byte (Double Word)</li>\n<li>quintet 5 Byte</li>\n<li>sextet  6 Byte</li>\n<li>septet  7 Byte</li>\n<li>qword   8 Byte (Quadruple Word)</li>\n</ul>\n\n          </div>"}, "last_serial": 5174928, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e6bdeaecfa3901241e3998a0d2154d9d", "sha256": "54eca814fddbaa5e6b32e213001ab3bc8d2b2c9938940d862432e124a9adc7c7"}, "downloads": -1, "filename": "DirtyIO_A13XIS-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6bdeaecfa3901241e3998a0d2154d9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16202, "upload_time": "2019-04-22T23:08:06", "upload_time_iso_8601": "2019-04-22T23:08:06.867246Z", "url": "https://files.pythonhosted.org/packages/29/87/a578bd1221d5a5d845197f766d6207fe09b1659dddcb66b552916d40172f/DirtyIO_A13XIS-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9df81485830aa1097bb25a38b3ff6fc", "sha256": "585d692716924aa60e69c90994f9a4a82c1ea58538f5d15bc51da0b5893c5f51"}, "downloads": -1, "filename": "DirtyIO-A13XIS-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f9df81485830aa1097bb25a38b3ff6fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4089, "upload_time": "2019-04-22T23:08:08", "upload_time_iso_8601": "2019-04-22T23:08:08.930818Z", "url": "https://files.pythonhosted.org/packages/d8/e3/8cfe2babbe709e9081167088193b39e4e02a241e19d3e53615dc146b4b9c/DirtyIO-A13XIS-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e6bdeaecfa3901241e3998a0d2154d9d", "sha256": "54eca814fddbaa5e6b32e213001ab3bc8d2b2c9938940d862432e124a9adc7c7"}, "downloads": -1, "filename": "DirtyIO_A13XIS-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6bdeaecfa3901241e3998a0d2154d9d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16202, "upload_time": "2019-04-22T23:08:06", "upload_time_iso_8601": "2019-04-22T23:08:06.867246Z", "url": "https://files.pythonhosted.org/packages/29/87/a578bd1221d5a5d845197f766d6207fe09b1659dddcb66b552916d40172f/DirtyIO_A13XIS-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9df81485830aa1097bb25a38b3ff6fc", "sha256": "585d692716924aa60e69c90994f9a4a82c1ea58538f5d15bc51da0b5893c5f51"}, "downloads": -1, "filename": "DirtyIO-A13XIS-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f9df81485830aa1097bb25a38b3ff6fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4089, "upload_time": "2019-04-22T23:08:08", "upload_time_iso_8601": "2019-04-22T23:08:08.930818Z", "url": "https://files.pythonhosted.org/packages/d8/e3/8cfe2babbe709e9081167088193b39e4e02a241e19d3e53615dc146b4b9c/DirtyIO-A13XIS-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:15 2020"}