{"info": {"author": "Activeconnect", "author_email": "support@activeconnect.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Activeconnect\n\n[Activeconnect](https://activeconnect.io) provides multifactor identity and presence verification.\n\n\nThis library provides a Python wrapper for the Activeconnect API.\n\n## Getting Started\n### Create an Activeconnect Account\nTo begin visit [Activeconnect Developer Portal](https://activeconnect.activeapi.ninja/register) to register.\n### Create an Activeconnect Application\nOnce you have registered [create a new Activeconnect application](https://activeconnect.activeapi.ninja/create_application).\nSave the Application ID and Application Secret in a safe place as you will need this to authenticate calls to the Activeconnect API.\n### Register Users\nActiveconnect identifies application users using a token supplied by the application developer.\nYou can use your existing user IDs or create a lookup table that maps your user ID to a value you provide to Activeconnect.\n\nUsers are registered using the Activeconnect ManagementAPI.\nCreate an instance of Activeconnect.ManagementAPI using your application ID and secret.\n```python\nfrom Activeconnect.management_api import ManagementAPI\nfrom Activeconnect.management_api import ManagementAPIResult\napplication_id = \"MY APPLICATION ID\"\napplication_secret = \"MY APPLICATION SECRET\"\n\nmanager = ManagementAPI(application_id=\"MY APPLICATION ID\", application_secret=\"MY APPLICATION SECRET\")\n```\nTo add a single user call ManagementAPI.add_user\n```python\nadd_user_result = manager.add_user(\"MY USER\")\n\nif add_user_result == ManagementAPIResult.success:\n    # User added\n    print(\"user added\")\nelif add_user_result == ManagementAPIResult.user_exists:\n    # User already exists\n    print(\"user already exists\")\nelse:\n    # User failed\n    print(\"add user failed\")\n```\nTo add multiple users call ManagementAPI.add_users.\n```python\nusers = [\"MY USER 1\", \"MY USER 2\", \"MY USER 3\"]\ncreated, existing = manager.add_users(users)\nif created is not None:\n    print(\"Users created: {}\".format(created))\nif existing is not None:\n    print(\"Existing users: {}\".format(existing))\n``` \n### Registering a Mobile Device\nActiveconnect uses a mobile device to collect authentication data.\nMobile devices are registered using a registration link generated by Activeconnect.\nThe Activeconnect mobile application is registered to open these links and register the device.\nTo obtain a registration link use ManagementAPI.get_registration_link.\nThe display_name query parameter is optional and is used by the Activeconnect mobile app to provide a description of the user.\n```python\nregistration_link = manager.get_registration_link(user_id=\"MY USER 1\", display_name=\"MY USER 1@myapp\")\n```\nManagementAPI also provides a helper method to send a registration link to a mobile device using SMS.\n```python\nmanager.send_registration_sms(  user_id=\"MY USER 1\",\n                                display_name=\"MY USER1@myapp\",\n                                phone_number=\"+1XXXYYYY\",\n                                message=None)\n```\nYou can specify a message for the SMS body\n```python\nmanager.send_registration_sms(  user_id=\"MY USER 1\",\n                                display_name=\"MY USER1@myapp\",\n                                phone_number=\"+1XXXYYYY\",\n                                message=\"REGISTER FOR MY APP\")\n```\n### Registering a Mobile Device\nBefore a user can authenticate using Activeconnect they must register a mobile device.\nTo check if a user has registered a mobile device use ManagementAPI.has_registered_mobile_device\n```python\nhas_device = manager.has_registered_mobile_device(\"MY USER 1\")\n\nif has_device is ManagementAPIResult.has_mobile_device:\n    print(\"User has mobile device.\")\nelif has_device is ManagementAPIResult.no_mobile_device:\n    print(\"User has no mobile device.\")\nelse:\n    print(\"has_registered_mobile_device failed.\")\n```\n### Removing Users\nTo remove a single user use ManagementAPI.delete_user\n```python\nmanager.delete_use(\"MY USER 1\")\n```\nTo remove multiple users use ManagementAPI.delete_users\n```python\nusers=[\"MY USER 1\", \"MY USER 2\",...]\nmanager.delete_users(users)\n```\n\n### Authenticating Users\nActiveconnect authentication is a multi step process:\n* Initiate the authentication process using the Authentication API.\n* If the process is initiated the mobile device will collect authentication data and send it to Activeconnect\n* Activeconnect processes the collected data and determines whether the user is authenticated.\nCreate an instance of Activeconnect.AuthenticationAPI using the application ID and application secret created above.\n```python\nfrom Activeconnect.authentication_api import AuthenticationAPI,AuthenticationMethod\nauthenticator=AuthenticationAPI(application_id=\"MY APPLICATION ID\", \n                                application_secret=\"MY APPLICATION SECRET\")\n\n# Initiate the authentication process.\nsession = authenticator.authenticate_user(\"MY USER 1\")\n\n# Check if authentication started.\nif session.failed:\n    # Authentication failed - check the failure reason.\n    # If the user has not registered a mobile device, the failure_reason will be NO_MOBILE_DEVICE\n    print(\"Authentication failed {}\".format(session.failure_reason))\nelif session.in_progress:\n    # Authentication is in progress\n    print(\"Authentication in progress\")\nelse:\n    print(\"Session status is {}\".format(session.session_status.name))\n```\nOnce the authentication process is initiated periodically check the status of the session using Activeconnect.Session.getStatus.\n```python\n# Wait for the user to approve the request.\nwhile session.in_progress:\n    # Get the status of the session\n    session_status = session.get_status()\n\n    # Wait a while and try again\n    time.sleep(5)\n\nif session.active:\n    print(\"authenticated\")\n    # Now end the session\n    session.destroy()\nelse:\n    print(\"Authentication failed {}\".format(session.session_status.name))\n```\n### Ending a Session\nTo end an Activeconnect session call Activeconnect.Session.destroy.\n```python\nsession.destroy()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Activeconnect", "package_url": "https://pypi.org/project/Activeconnect/", "platform": "", "project_url": "https://pypi.org/project/Activeconnect/", "project_urls": null, "release_url": "https://pypi.org/project/Activeconnect/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Python package to access Activeconnect API", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Activeconnect</h1>\n<p><a href=\"https://activeconnect.io\" rel=\"nofollow\">Activeconnect</a> provides multifactor identity and presence verification.</p>\n<p>This library provides a Python wrapper for the Activeconnect API.</p>\n<h2>Getting Started</h2>\n<h3>Create an Activeconnect Account</h3>\n<p>To begin visit <a href=\"https://activeconnect.activeapi.ninja/register\" rel=\"nofollow\">Activeconnect Developer Portal</a> to register.</p>\n<h3>Create an Activeconnect Application</h3>\n<p>Once you have registered <a href=\"https://activeconnect.activeapi.ninja/create_application\" rel=\"nofollow\">create a new Activeconnect application</a>.\nSave the Application ID and Application Secret in a safe place as you will need this to authenticate calls to the Activeconnect API.</p>\n<h3>Register Users</h3>\n<p>Activeconnect identifies application users using a token supplied by the application developer.\nYou can use your existing user IDs or create a lookup table that maps your user ID to a value you provide to Activeconnect.</p>\n<p>Users are registered using the Activeconnect ManagementAPI.\nCreate an instance of Activeconnect.ManagementAPI using your application ID and secret.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">Activeconnect.management_api</span> <span class=\"kn\">import</span> <span class=\"n\">ManagementAPI</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Activeconnect.management_api</span> <span class=\"kn\">import</span> <span class=\"n\">ManagementAPIResult</span>\n<span class=\"n\">application_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"MY APPLICATION ID\"</span>\n<span class=\"n\">application_secret</span> <span class=\"o\">=</span> <span class=\"s2\">\"MY APPLICATION SECRET\"</span>\n\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">ManagementAPI</span><span class=\"p\">(</span><span class=\"n\">application_id</span><span class=\"o\">=</span><span class=\"s2\">\"MY APPLICATION ID\"</span><span class=\"p\">,</span> <span class=\"n\">application_secret</span><span class=\"o\">=</span><span class=\"s2\">\"MY APPLICATION SECRET\"</span><span class=\"p\">)</span>\n</pre>\n<p>To add a single user call ManagementAPI.add_user</p>\n<pre><span class=\"n\">add_user_result</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">add_user</span><span class=\"p\">(</span><span class=\"s2\">\"MY USER\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">add_user_result</span> <span class=\"o\">==</span> <span class=\"n\">ManagementAPIResult</span><span class=\"o\">.</span><span class=\"n\">success</span><span class=\"p\">:</span>\n    <span class=\"c1\"># User added</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"user added\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">add_user_result</span> <span class=\"o\">==</span> <span class=\"n\">ManagementAPIResult</span><span class=\"o\">.</span><span class=\"n\">user_exists</span><span class=\"p\">:</span>\n    <span class=\"c1\"># User already exists</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"user already exists\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># User failed</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"add user failed\"</span><span class=\"p\">)</span>\n</pre>\n<p>To add multiple users call ManagementAPI.add_users.</p>\n<pre><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"MY USER 1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"MY USER 2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"MY USER 3\"</span><span class=\"p\">]</span>\n<span class=\"n\">created</span><span class=\"p\">,</span> <span class=\"n\">existing</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">add_users</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">created</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Users created: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">created</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">existing</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Existing users: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">existing</span><span class=\"p\">))</span>\n</pre>\n<h3>Registering a Mobile Device</h3>\n<p>Activeconnect uses a mobile device to collect authentication data.\nMobile devices are registered using a registration link generated by Activeconnect.\nThe Activeconnect mobile application is registered to open these links and register the device.\nTo obtain a registration link use ManagementAPI.get_registration_link.\nThe display_name query parameter is optional and is used by the Activeconnect mobile app to provide a description of the user.</p>\n<pre><span class=\"n\">registration_link</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">get_registration_link</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"s2\">\"MY USER 1\"</span><span class=\"p\">,</span> <span class=\"n\">display_name</span><span class=\"o\">=</span><span class=\"s2\">\"MY USER 1@myapp\"</span><span class=\"p\">)</span>\n</pre>\n<p>ManagementAPI also provides a helper method to send a registration link to a mobile device using SMS.</p>\n<pre><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">send_registration_sms</span><span class=\"p\">(</span>  <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"s2\">\"MY USER 1\"</span><span class=\"p\">,</span>\n                                <span class=\"n\">display_name</span><span class=\"o\">=</span><span class=\"s2\">\"MY USER1@myapp\"</span><span class=\"p\">,</span>\n                                <span class=\"n\">phone_number</span><span class=\"o\">=</span><span class=\"s2\">\"+1XXXYYYY\"</span><span class=\"p\">,</span>\n                                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>You can specify a message for the SMS body</p>\n<pre><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">send_registration_sms</span><span class=\"p\">(</span>  <span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"s2\">\"MY USER 1\"</span><span class=\"p\">,</span>\n                                <span class=\"n\">display_name</span><span class=\"o\">=</span><span class=\"s2\">\"MY USER1@myapp\"</span><span class=\"p\">,</span>\n                                <span class=\"n\">phone_number</span><span class=\"o\">=</span><span class=\"s2\">\"+1XXXYYYY\"</span><span class=\"p\">,</span>\n                                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"REGISTER FOR MY APP\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Registering a Mobile Device</h3>\n<p>Before a user can authenticate using Activeconnect they must register a mobile device.\nTo check if a user has registered a mobile device use ManagementAPI.has_registered_mobile_device</p>\n<pre><span class=\"n\">has_device</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">has_registered_mobile_device</span><span class=\"p\">(</span><span class=\"s2\">\"MY USER 1\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">has_device</span> <span class=\"ow\">is</span> <span class=\"n\">ManagementAPIResult</span><span class=\"o\">.</span><span class=\"n\">has_mobile_device</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"User has mobile device.\"</span><span class=\"p\">)</span>\n<span class=\"k\">elif</span> <span class=\"n\">has_device</span> <span class=\"ow\">is</span> <span class=\"n\">ManagementAPIResult</span><span class=\"o\">.</span><span class=\"n\">no_mobile_device</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"User has no mobile device.\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"has_registered_mobile_device failed.\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Removing Users</h3>\n<p>To remove a single user use ManagementAPI.delete_user</p>\n<pre><span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">delete_use</span><span class=\"p\">(</span><span class=\"s2\">\"MY USER 1\"</span><span class=\"p\">)</span>\n</pre>\n<p>To remove multiple users use ManagementAPI.delete_users</p>\n<pre><span class=\"n\">users</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"MY USER 1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"MY USER 2\"</span><span class=\"p\">,</span><span class=\"o\">...</span><span class=\"p\">]</span>\n<span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">delete_users</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span>\n</pre>\n<h3>Authenticating Users</h3>\n<p>Activeconnect authentication is a multi step process:</p>\n<ul>\n<li>Initiate the authentication process using the Authentication API.</li>\n<li>If the process is initiated the mobile device will collect authentication data and send it to Activeconnect</li>\n<li>Activeconnect processes the collected data and determines whether the user is authenticated.\nCreate an instance of Activeconnect.AuthenticationAPI using the application ID and application secret created above.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">Activeconnect.authentication_api</span> <span class=\"kn\">import</span> <span class=\"n\">AuthenticationAPI</span><span class=\"p\">,</span><span class=\"n\">AuthenticationMethod</span>\n<span class=\"n\">authenticator</span><span class=\"o\">=</span><span class=\"n\">AuthenticationAPI</span><span class=\"p\">(</span><span class=\"n\">application_id</span><span class=\"o\">=</span><span class=\"s2\">\"MY APPLICATION ID\"</span><span class=\"p\">,</span> \n                                <span class=\"n\">application_secret</span><span class=\"o\">=</span><span class=\"s2\">\"MY APPLICATION SECRET\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Initiate the authentication process.</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">authenticator</span><span class=\"o\">.</span><span class=\"n\">authenticate_user</span><span class=\"p\">(</span><span class=\"s2\">\"MY USER 1\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Check if authentication started.</span>\n<span class=\"k\">if</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">failed</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Authentication failed - check the failure reason.</span>\n    <span class=\"c1\"># If the user has not registered a mobile device, the failure_reason will be NO_MOBILE_DEVICE</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Authentication failed </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">failure_reason</span><span class=\"p\">))</span>\n<span class=\"k\">elif</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">in_progress</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Authentication is in progress</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Authentication in progress\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Session status is </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">session_status</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</pre>\n<p>Once the authentication process is initiated periodically check the status of the session using Activeconnect.Session.getStatus.</p>\n<pre><span class=\"c1\"># Wait for the user to approve the request.</span>\n<span class=\"k\">while</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">in_progress</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Get the status of the session</span>\n    <span class=\"n\">session_status</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get_status</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Wait a while and try again</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">active</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"authenticated\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Now end the session</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"p\">()</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Authentication failed </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">session_status</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n</pre>\n<h3>Ending a Session</h3>\n<p>To end an Activeconnect session call Activeconnect.Session.destroy.</p>\n<pre><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">destroy</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6924920, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "856064d8269f7c0bf8821348ec152954", "sha256": "ebf2d7cb0d3f8984b94d4c3a2b16a10fe8c85b759eeba978f2ba8a0409bda6a4"}, "downloads": -1, "filename": "Activeconnect-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "856064d8269f7c0bf8821348ec152954", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10680, "upload_time": "2020-04-01T03:37:52", "upload_time_iso_8601": "2020-04-01T03:37:52.142171Z", "url": "https://files.pythonhosted.org/packages/a6/7c/97612b8b8551b80d213265b1105b187063e1477a8c9ec3af0ad61128f7ec/Activeconnect-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfc1e120321fc338106a1c4744ccd98f", "sha256": "ac0d6a9933a536607ee8727b6b5f5d3071efde443cff71c63d585df981944ae9"}, "downloads": -1, "filename": "Activeconnect-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bfc1e120321fc338106a1c4744ccd98f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7400, "upload_time": "2020-04-01T03:37:54", "upload_time_iso_8601": "2020-04-01T03:37:54.362402Z", "url": "https://files.pythonhosted.org/packages/df/6a/6d3b1b2f27ab62217d1c035349a1673a870bf838e34ccd4cff6ca1ac251d/Activeconnect-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "856064d8269f7c0bf8821348ec152954", "sha256": "ebf2d7cb0d3f8984b94d4c3a2b16a10fe8c85b759eeba978f2ba8a0409bda6a4"}, "downloads": -1, "filename": "Activeconnect-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "856064d8269f7c0bf8821348ec152954", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10680, "upload_time": "2020-04-01T03:37:52", "upload_time_iso_8601": "2020-04-01T03:37:52.142171Z", "url": "https://files.pythonhosted.org/packages/a6/7c/97612b8b8551b80d213265b1105b187063e1477a8c9ec3af0ad61128f7ec/Activeconnect-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfc1e120321fc338106a1c4744ccd98f", "sha256": "ac0d6a9933a536607ee8727b6b5f5d3071efde443cff71c63d585df981944ae9"}, "downloads": -1, "filename": "Activeconnect-0.0.4.tar.gz", "has_sig": false, "md5_digest": "bfc1e120321fc338106a1c4744ccd98f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7400, "upload_time": "2020-04-01T03:37:54", "upload_time_iso_8601": "2020-04-01T03:37:54.362402Z", "url": "https://files.pythonhosted.org/packages/df/6a/6d3b1b2f27ab62217d1c035349a1673a870bf838e34ccd4cff6ca1ac251d/Activeconnect-0.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:24:19 2020"}