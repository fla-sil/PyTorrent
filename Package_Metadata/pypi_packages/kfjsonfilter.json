{"info": {"author": "Aurora @ KF", "author_email": "aurora@kasfactory.net", "bugtrack_url": null, "classifiers": [], "description": "# KF pubsub\n\nJsonFieldFilter and JsonFieldSearchFilter implementation with django and django rest framework\n\n## Installation\n\n### With requirements.txt\n\nAdd the following line in your `requirements.txt` file:\n\n```\nkfjsonfilter\n```\n\n### With PIP\n\n```bash\n$ pip install kfjsonfilter\n```\n\n## Getting Started\n\nThere are implemented two base filters: JsonFieldFilter and JsonFieldSearchFilter.\n\n### JsonFieldFilter\n\nAllow create a data filter from a json object. Its neccesary to declare two elements in the django rest framework viewset: json_field and json_filters\n\n\n|   | TYPE | DESCRIPTION |\n| :------------ |:---------------:| :-----|\n| json_field      | string | Indicates the json field object form the model |\n| json_filters      | list of dicts        |   Indicates the field thats allow filter and lookup type for each type |\n\n#### json_filters structure\n\nAllows filter by any value from a json data. Each element must be included in a dictionary with to key: field and lookup.\n\n\tjson_filters = [{'field': <field_name>, 'lookup': <lookup>}, ...]\n\n|   | DESCRIPTION |\n| :------------ |:---------------|\n| field      | field_name is the name of the element to filter included in json data |\n| lookup      | lookup is the filter type, icontains, iexact, in, etc... and date_range (to filter by a date range). to filter only a date by a date indicates only lte, gte, exact...        |  \n\n\n### JsonFieldSearchFilter\n\nAllow create a data filter and search filter from a json object. Its neccesary to declare three elements in the django rest framework viewset: json_field and search_fields\n\n\n|   | TYPE | DESCRIPTION |\n| :------------ |:-----------------------:| :-----|\n| json_field      | string         | Indicates the json field object form the model |\n| json_filters      | list of dicts                |   Indicates the field thats allow filter by a field and lookup type for each type |\n| search_fields      | list of dicts                |   Indicates the field thats allow search by a field and lookup type for each type |\n\n#### json_filters and search_fields structure\n\nAllows filter/search by any value from a json data. Each element must be included in a dictionary with to key: field and lookup.\n\n\tjson_filters = [{'field': <field_name>, 'lookup': <lookup>}, ...]\n\n|   | DESCRIPTION |\n| :------------ |:---------------|\n| field      | field_name is the name of the element to filter included in json data |\n| lookup      | lookup is the filter type, icontains, iexact, in, etc... and date_range (to filter by a date range). to filter only a date by a date indicates only lte, gte, exact...        |  \n\nAlso, when lookup is 'date_range' field_name must finish with []\n\n### Example\n\n#### Django Model\n\n\tclass MyModel(models.Model):\n\t\tdata = JSONField(default=dict)\n\n\n```\nFor example:\ndata = {'creation_date': '2020-01-01', 'total': 3, 'name': 'Pedro Miguel'}\n```\n\n#### Django Rest Framework View\n\n\tclass MyModelViewSet(ListAPIView):\n\t\tqueryset = MyModel.objects.all()\n\t\tfilter_backends = [JsonFieldFilter, DjangoFilterBackend, OrderingFilter]\n\t\tjson_field = 'data'\n\t\tjson_filters = [{'field': 'creation_date', 'lookup': 'date_range'}, {'field': 'total', 'lookup': 'gte'}]\n\n\tor\n\n\tclass MyModelViewSet(ListAPIView):\n\t\tqueryset = MyModel.objects.all()\n\t\tfilter_backends = [JsonFieldSearchFilter, DjangoFilterBackend, OrderingFilter]\n\t\tjson_field = 'data'\n\t\tjson_filters = [{'field': 'creation_date', 'lookup': 'lte'}, {'field': 'total', 'lookup': 'gte'}]\t\n\t\tsearch_fields = [{'field': 'name', 'lookup': 'icontains'}]", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/kas-factory/packages/drf-json-filter", "keywords": "", "license": "COPYRIGHT", "maintainer": "", "maintainer_email": "", "name": "kfjsonfilter", "package_url": "https://pypi.org/project/kfjsonfilter/", "platform": "", "project_url": "https://pypi.org/project/kfjsonfilter/", "project_urls": {"Homepage": "https://gitlab.com/kas-factory/packages/drf-json-filter"}, "release_url": "https://pypi.org/project/kfjsonfilter/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "Json Data Filter for django and django rest framework", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>KF pubsub</h1>\n<p>JsonFieldFilter and JsonFieldSearchFilter implementation with django and django rest framework</p>\n<h2>Installation</h2>\n<h3>With requirements.txt</h3>\n<p>Add the following line in your <code>requirements.txt</code> file:</p>\n<pre><code>kfjsonfilter\n</code></pre>\n<h3>With PIP</h3>\n<pre>$ pip install kfjsonfilter\n</pre>\n<h2>Getting Started</h2>\n<p>There are implemented two base filters: JsonFieldFilter and JsonFieldSearchFilter.</p>\n<h3>JsonFieldFilter</h3>\n<p>Allow create a data filter from a json object. Its neccesary to declare two elements in the django rest framework viewset: json_field and json_filters</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"center\">TYPE</th>\n<th align=\"left\">DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">json_field</td>\n<td align=\"center\">string</td>\n<td align=\"left\">Indicates the json field object form the model</td>\n</tr>\n<tr>\n<td align=\"left\">json_filters</td>\n<td align=\"center\">list of dicts</td>\n<td align=\"left\">Indicates the field thats allow filter and lookup type for each type</td>\n</tr></tbody></table>\n<h4>json_filters structure</h4>\n<p>Allows filter by any value from a json data. Each element must be included in a dictionary with to key: field and lookup.</p>\n<pre><code>json_filters = [{'field': &lt;field_name&gt;, 'lookup': &lt;lookup&gt;}, ...]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">field</td>\n<td align=\"left\">field_name is the name of the element to filter included in json data</td>\n</tr>\n<tr>\n<td align=\"left\">lookup</td>\n<td align=\"left\">lookup is the filter type, icontains, iexact, in, etc... and date_range (to filter by a date range). to filter only a date by a date indicates only lte, gte, exact...</td>\n</tr></tbody></table>\n<h3>JsonFieldSearchFilter</h3>\n<p>Allow create a data filter and search filter from a json object. Its neccesary to declare three elements in the django rest framework viewset: json_field and search_fields</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"center\">TYPE</th>\n<th align=\"left\">DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">json_field</td>\n<td align=\"center\">string</td>\n<td align=\"left\">Indicates the json field object form the model</td>\n</tr>\n<tr>\n<td align=\"left\">json_filters</td>\n<td align=\"center\">list of dicts</td>\n<td align=\"left\">Indicates the field thats allow filter by a field and lookup type for each type</td>\n</tr>\n<tr>\n<td align=\"left\">search_fields</td>\n<td align=\"center\">list of dicts</td>\n<td align=\"left\">Indicates the field thats allow search by a field and lookup type for each type</td>\n</tr></tbody></table>\n<h4>json_filters and search_fields structure</h4>\n<p>Allows filter/search by any value from a json data. Each element must be included in a dictionary with to key: field and lookup.</p>\n<pre><code>json_filters = [{'field': &lt;field_name&gt;, 'lookup': &lt;lookup&gt;}, ...]\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">DESCRIPTION</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">field</td>\n<td align=\"left\">field_name is the name of the element to filter included in json data</td>\n</tr>\n<tr>\n<td align=\"left\">lookup</td>\n<td align=\"left\">lookup is the filter type, icontains, iexact, in, etc... and date_range (to filter by a date range). to filter only a date by a date indicates only lte, gte, exact...</td>\n</tr></tbody></table>\n<p>Also, when lookup is 'date_range' field_name must finish with []</p>\n<h3>Example</h3>\n<h4>Django Model</h4>\n<pre><code>class MyModel(models.Model):\n\tdata = JSONField(default=dict)\n</code></pre>\n<pre><code>For example:\ndata = {'creation_date': '2020-01-01', 'total': 3, 'name': 'Pedro Miguel'}\n</code></pre>\n<h4>Django Rest Framework View</h4>\n<pre><code>class MyModelViewSet(ListAPIView):\n\tqueryset = MyModel.objects.all()\n\tfilter_backends = [JsonFieldFilter, DjangoFilterBackend, OrderingFilter]\n\tjson_field = 'data'\n\tjson_filters = [{'field': 'creation_date', 'lookup': 'date_range'}, {'field': 'total', 'lookup': 'gte'}]\n\nor\n\nclass MyModelViewSet(ListAPIView):\n\tqueryset = MyModel.objects.all()\n\tfilter_backends = [JsonFieldSearchFilter, DjangoFilterBackend, OrderingFilter]\n\tjson_field = 'data'\n\tjson_filters = [{'field': 'creation_date', 'lookup': 'lte'}, {'field': 'total', 'lookup': 'gte'}]\t\n\tsearch_fields = [{'field': 'name', 'lookup': 'icontains'}]\n</code></pre>\n\n          </div>"}, "last_serial": 7015489, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c3e3199414ab4cd0298af106b33eab40", "sha256": "f7a1fdafda7c3d4cab18bcada5c17706be7fdd11ebd3f0753275202c10c63dd7"}, "downloads": -1, "filename": "kfjsonfilter-0.1.tar.gz", "has_sig": false, "md5_digest": "c3e3199414ab4cd0298af106b33eab40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2420, "upload_time": "2020-02-12T13:31:26", "upload_time_iso_8601": "2020-02-12T13:31:26.919701Z", "url": "https://files.pythonhosted.org/packages/74/3d/97d4795580bf7e39b83a2816c72d1a418005ead24690a40cb002d6f3a73e/kfjsonfilter-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "99e38b4ba6dd87567d3b55225e747f35", "sha256": "a1ea92a861d3f6df67f0030af1a2f20a13f7ba135501ff4ae4acd5ad20202212"}, "downloads": -1, "filename": "kfjsonfilter-0.1.1.tar.gz", "has_sig": false, "md5_digest": "99e38b4ba6dd87567d3b55225e747f35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2441, "upload_time": "2020-02-13T07:29:42", "upload_time_iso_8601": "2020-02-13T07:29:42.416432Z", "url": "https://files.pythonhosted.org/packages/90/9d/10100343a375089c42c426ad6ba2bbe817fad558a8e2cff3035f126a1f9c/kfjsonfilter-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "841bd2a9d7d800c412cc0c83ffea41e3", "sha256": "65e514e513b10739ebda3c384d5396b5dc0df0faed9e5d53fcda949d647b6333"}, "downloads": -1, "filename": "kfjsonfilter-0.1.2.tar.gz", "has_sig": false, "md5_digest": "841bd2a9d7d800c412cc0c83ffea41e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2438, "upload_time": "2020-02-13T08:00:27", "upload_time_iso_8601": "2020-02-13T08:00:27.381518Z", "url": "https://files.pythonhosted.org/packages/b0/63/dc2521dc6cb28f063ca6ef58f93b6d57a0552160bc554325f69e789c85c7/kfjsonfilter-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9b0b7bcfd01e9d6ef04e0536b5627e34", "sha256": "166f5a6e7c9163f5c0287f92d5cc556deedb0a31b74dd4b56b3f1e53c6bbbbbc"}, "downloads": -1, "filename": "kfjsonfilter-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9b0b7bcfd01e9d6ef04e0536b5627e34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3376, "upload_time": "2020-02-14T11:58:22", "upload_time_iso_8601": "2020-02-14T11:58:22.340206Z", "url": "https://files.pythonhosted.org/packages/5e/29/9bba4b63aa9d6c1c641e111ba5d269eed4d26bca13ce7bfc822e8880216d/kfjsonfilter-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "cc3e97742618d517db2119c6e0bffdf9", "sha256": "894ba729c01f4cda8f5009cadd3d270f666bbfc91f819955ca05e7929d1c662e"}, "downloads": -1, "filename": "kfjsonfilter-0.1.4.tar.gz", "has_sig": false, "md5_digest": "cc3e97742618d517db2119c6e0bffdf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3382, "upload_time": "2020-02-14T12:03:41", "upload_time_iso_8601": "2020-02-14T12:03:41.736898Z", "url": "https://files.pythonhosted.org/packages/49/89/a21d710316c3451cb9bac29fb5a635d18988aff5ddeb9c6c9244752bfe34/kfjsonfilter-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "4f7752ffc0a62d637b8e20d2875e7474", "sha256": "ba081e91407bdc92ac55e498841483e9f6efa77cd091a555d3d18cbb82f6650b"}, "downloads": -1, "filename": "kfjsonfilter-0.1.5.tar.gz", "has_sig": false, "md5_digest": "4f7752ffc0a62d637b8e20d2875e7474", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3365, "upload_time": "2020-04-14T08:32:37", "upload_time_iso_8601": "2020-04-14T08:32:37.994063Z", "url": "https://files.pythonhosted.org/packages/38/96/d28ef94516b8b3a9cd50d5846321a83d566252f2120f03be3793658beacf/kfjsonfilter-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f7752ffc0a62d637b8e20d2875e7474", "sha256": "ba081e91407bdc92ac55e498841483e9f6efa77cd091a555d3d18cbb82f6650b"}, "downloads": -1, "filename": "kfjsonfilter-0.1.5.tar.gz", "has_sig": false, "md5_digest": "4f7752ffc0a62d637b8e20d2875e7474", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3365, "upload_time": "2020-04-14T08:32:37", "upload_time_iso_8601": "2020-04-14T08:32:37.994063Z", "url": "https://files.pythonhosted.org/packages/38/96/d28ef94516b8b3a9cd50d5846321a83d566252f2120f03be3793658beacf/kfjsonfilter-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:53 2020"}