{"info": {"author": "Jeff Lindsay, Ryan Tilder", "author_email": "rtilder@mozilla.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Topic :: Utilities"], "description": "PyJWT-mozilla\n=============\n\nA Python implementation of [JSON Web Token draft 01](http://self-issued.info/docs/draft-jones-json-web-token-01.html).\n\nThis is Mozilla's fork of [PyJWT](http://pypi.python.org/pypi/PyJWT)\nwhich adds RSA algorithms, fixes some timing\nattacks, and makes a few other adjustments. It is used in projects such as\n[webpay](https://github.com/mozilla/webpay).\n\nInstalling\n----------\n\nInstall the module with [pip](http://www.pip-installer.org/) or something similar:\n\n    pip install PyJWT-mozilla\n\nThis install step will also install/compile\n[M2Crypto](http://pypi.python.org/pypi/M2Crypto)\nso you will need `swig` for this. You can get it with a package manager like:\n\n    brew install swig\n\nAlternatively you can probably find a binary package for M2Crypto with\nsomething like this:\n\n   sudo apt-get install python-m2crypto\n\n\nUsage\n-----\n\n    import jwt\n    jwt.encode({\"some\": \"payload\"}, \"secret\")\n\nNote the resulting JWT will not be encrypted, but verifiable with a secret key.\n\n    jwt.decode(\"someJWTstring\", \"secret\")\n\nIf the secret is wrong, it will raise a `jwt.DecodeError` telling you as such. You can still get at the payload by setting the verify argument to false.\n\n    jwt.decode(\"someJWTstring\", verify=False)\n\nAlgorithms\n----------\n\nThe JWT spec supports several algorithms for cryptographic signing. This library currently supports:\n\n* HS256\t- HMAC using SHA-256 hash algorithm (default)\n* HS384\t- HMAC using SHA-384 hash algorithm\n* HS512 - HMAC using SHA-512 hash algorithm\n* RS256 - RSA using SHA-256 hash algorithm\n* RS384 - RSA using SHA-384 hash algorithm\n* RS512 - RSA using SHA-584 hash algorithm\n\nChange the algorithm with by setting it in encode:\n\n    jwt.encode({\"some\": \"payload\"}, \"secret\", \"HS512\")\n\nTests\n-----\n\nInstall the project in a [virtualenv](http://pypi.python.org/pypi/virtualenv)\n(or wherever) by typing this from the root:\n\n    python setup.py develop\n\nRun the tests like this:\n\n    python tests/test_jwt.py\n\nLicense\n-------\n\nMIT", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/rtilder/pyjwt", "keywords": "jwt json web token security signing", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "PyJWT-mozilla", "package_url": "https://pypi.org/project/PyJWT-mozilla/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PyJWT-mozilla/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/rtilder/pyjwt"}, "release_url": "https://pypi.org/project/PyJWT-mozilla/0.1.5/", "requires_dist": null, "requires_python": null, "summary": "JSON Web Token implementation in Python", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python implementation of [JSON Web Token draft 01](<a href=\"http://self-issued.info/docs/draft-jones-json-web-token-01.html\" rel=\"nofollow\">http://self-issued.info/docs/draft-jones-json-web-token-01.html</a>).</p>\n<p>This is Mozilla\u2019s fork of [PyJWT](<a href=\"http://pypi.python.org/pypi/PyJWT\" rel=\"nofollow\">http://pypi.python.org/pypi/PyJWT</a>)\nwhich adds RSA algorithms, fixes some timing\nattacks, and makes a few other adjustments. It is used in projects such as\n[webpay](<a href=\"https://github.com/mozilla/webpay\" rel=\"nofollow\">https://github.com/mozilla/webpay</a>).</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install the module with [pip](<a href=\"http://www.pip-installer.org/\" rel=\"nofollow\">http://www.pip-installer.org/</a>) or something similar:</p>\n<blockquote>\npip install PyJWT-mozilla</blockquote>\n<p>This install step will also install/compile\n[M2Crypto](<a href=\"http://pypi.python.org/pypi/M2Crypto\" rel=\"nofollow\">http://pypi.python.org/pypi/M2Crypto</a>)\nso you will need <cite>swig</cite> for this. You can get it with a package manager like:</p>\n<blockquote>\nbrew install swig</blockquote>\n<p>Alternatively you can probably find a binary package for M2Crypto with\nsomething like this:</p>\n<blockquote>\nsudo apt-get install python-m2crypto</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<blockquote>\nimport jwt\njwt.encode({\u201csome\u201d: \u201cpayload\u201d}, \u201csecret\u201d)</blockquote>\n<p>Note the resulting JWT will not be encrypted, but verifiable with a secret key.</p>\n<blockquote>\njwt.decode(\u201csomeJWTstring\u201d, \u201csecret\u201d)</blockquote>\n<p>If the secret is wrong, it will raise a <cite>jwt.DecodeError</cite> telling you as such. You can still get at the payload by setting the verify argument to false.</p>\n<blockquote>\njwt.decode(\u201csomeJWTstring\u201d, verify=False)</blockquote>\n</div>\n<div id=\"algorithms\">\n<h2>Algorithms</h2>\n<p>The JWT spec supports several algorithms for cryptographic signing. This library currently supports:</p>\n<ul>\n<li>HS256 - HMAC using SHA-256 hash algorithm (default)</li>\n<li>HS384 - HMAC using SHA-384 hash algorithm</li>\n<li>HS512 - HMAC using SHA-512 hash algorithm</li>\n<li>RS256 - RSA using SHA-256 hash algorithm</li>\n<li>RS384 - RSA using SHA-384 hash algorithm</li>\n<li>RS512 - RSA using SHA-584 hash algorithm</li>\n</ul>\n<p>Change the algorithm with by setting it in encode:</p>\n<blockquote>\njwt.encode({\u201csome\u201d: \u201cpayload\u201d}, \u201csecret\u201d, \u201cHS512\u201d)</blockquote>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Install the project in a [virtualenv](<a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"nofollow\">http://pypi.python.org/pypi/virtualenv</a>)\n(or wherever) by typing this from the root:</p>\n<blockquote>\npython setup.py develop</blockquote>\n<p>Run the tests like this:</p>\n<blockquote>\npython tests/test_jwt.py</blockquote>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT</p>\n</div>\n\n          </div>"}, "last_serial": 1480653, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "340069226a190dd98b8dcca1762e7611", "sha256": "41e8e304e1ab3e38dcea3a17429ecc908329f21e388631d730fd3d6a08de0ee6"}, "downloads": -1, "filename": "PyJWT-mozilla-0.1.5.tar.gz", "has_sig": false, "md5_digest": "340069226a190dd98b8dcca1762e7611", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5377, "upload_time": "2015-03-27T19:53:40", "upload_time_iso_8601": "2015-03-27T19:53:40.571460Z", "url": "https://files.pythonhosted.org/packages/ac/c1/1d5342c589897cab9f1bc793d0849834a55b771a868a28268718faf745b6/PyJWT-mozilla-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "340069226a190dd98b8dcca1762e7611", "sha256": "41e8e304e1ab3e38dcea3a17429ecc908329f21e388631d730fd3d6a08de0ee6"}, "downloads": -1, "filename": "PyJWT-mozilla-0.1.5.tar.gz", "has_sig": false, "md5_digest": "340069226a190dd98b8dcca1762e7611", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5377, "upload_time": "2015-03-27T19:53:40", "upload_time_iso_8601": "2015-03-27T19:53:40.571460Z", "url": "https://files.pythonhosted.org/packages/ac/c1/1d5342c589897cab9f1bc793d0849834a55b771a868a28268718faf745b6/PyJWT-mozilla-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:40 2020"}