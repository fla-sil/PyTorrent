{"info": {"author": "Dave Barker", "author_email": "david@dbark.co.uk", "bugtrack_url": null, "classifiers": [], "description": "bsw\n===\n\nbsw - Build Static Website, a simple static website generator.\n\nUsage (the short version)\n-------------------------\n\n::\n\n    usage: bsw_run.py [-h] [-C] [-s] [--init [PATH]] [--template TEMPLATE]\n    \n    bsw - build static website\n    \n    optional arguments:\n      -h, --help           show this help message and exit\n      -C, --clean          remove existing build folder before building\n      -s, --serve          serve content after build (default port 8000)\n      --init [PATH]        initialise a new bsw site as the specified path\n      --template TEMPLATE  built-in template to use with --init\n\nNice and simple.\n\nGetting Started\n---------------\n\nbsw works on the current directory, and expects a couple of folders to\nexist:\n\n-  pages\n-  templates\n\nTo get started, we'll need to create these folders and add a base\ntemplate (the primary site template) to the *templates* folder.\n\n::\n\n    $ bsw --init mynewsite\n    $ cd mynewsite\n    $ bsw --serve\n\nOpen <a href=\"http://localhost:8000/about\">http://localhost:8000/about</a>\nin your browser and you'll see your new site, ready to go.\n\nbsw will read all the \\*.html and \\*.htm files inside the `pages` directory\n(recursively) and render them using the templates in the templates folder\n(using base.html by default if a page doesn't have a template directive).\nThe rendered pages will then be saved to the `build` folder (which will be\ncreated if needed).\n\nVariables in page (e.g. ``<!-- page_title = \"my page title\" -->``) are placed\ninto the templates at the placeholders (e.g. ``$page_title``). It's easy to \nadd your own, and you can see a great example of this in the sample blog\ntemplate and blog post.\n\nThe best way to learn the syntax is to take a look at the example pages\nand templates. They're purposefully very simple and should be easy to\npick up.\n\nStatic content\n--------------\n\nbsw will copy any files in ``static/`` and ``templates/static/`` to to\nthe combined ``build/static/`` folder where they can easily be\nreferenced by your page or template content. For example, reference the\n``templates/static/logo.png`` file on your template or page as so:\n``<img src=\"/static/logo.png\">``.\n\nStatic folders are completely optional and both template and site\nstatics are accessed from the same combined folder.\n\nIncludes\n--------\n\nYou can include reusable pieces of markup by using *include* directives.\n\nYou must place all includes in ``templates/includes/``.\n\nFor example, let's create an include with a link to the bsw project\nrepository on GitHub:\n\n::\n\n    $ mkdir templates/includes\n    $ echo <<EOF > templates/include/github_links.html\n    > <p>\n    > <a href=\"https://github.com/davb5/bsw\">github.com/davb5/bsw</a>\n    > </p>\n    > EOF\n\nWe can now reference this include from any of our page or template files\nby adding the following directive to the page markup:\n\n::\n\n    <!-- include(\"github_links.html\") -->\n\nFAQ\n===\n\nWhy are there two static folders?\n---------------------------------\n\n``bsw`` looks for two static folders:\n\n-  static/\n-  templates/static/\n\nThis allows you to keep your template static files separate from your\npage static files, making it easier to reuse your template on other\nsites.\n\nHowever, the use of either (or both) static folders is completely\noptional.\n\nHow do I create a template?\n---------------------------\n\nTemplates are extemely simple. The default template for any page which\ndoesn't explicitly specify a template is ``templates/base.html``.\n\nIt requires only a single tag:\n\n::\n\n    $page_content\n\nThe content from each .html or .htm file in ``pages/`` is inserted into\nthe base template at the ``$page_content`` tag.\n\nPages can also pass values to the template, for example, you template\ncould contain the following:\n\n::\n\n    <head>\n        <title>My Example Blog | $page_title</title>\n    </head>\n\nYou can populate the ``$page_title`` variable for any page by declaring\nit in a comment in the page markup, as follows:\n\n::\n\n    <!-- page_title = \"My first blog post! -->\n\n*The only template tag which is required is the ``$page_content`` tag.*\n\nHow do I use multiple templates?\n--------------------------------\n\nAdditional templates can be created in the ``templates`` folder and\nreferenced from pages by using the special ``template`` page variable as\nso: ``<!-- template = \"my_special_case_template.html\" -->``\n\nThe ``<!-- template ... -->`` variable can appear anywhere in the page\ncontent (it doesn't need to be placed at the top of the file).\n\nAny page which doesn't explicitly specify a template will use the *base\ntemplate* ``templates/base.html``.\n\nHow do I deploy my site?\n------------------------\n\nYour hosting environment will vary, but deployment is as simple as copying\nthe contents of the build folder to somewhere accessible on your web server.\n\nPopular workflows include using rsync (copying only files which have changes)\nor git (handy if you already keep the site source content in a git repository).\n\nI updated my template or CSS but the change isn't reflected in a new build. Why?\n--------------------------------------------------------------------------------\n\nBy default, bsw won't overwrite existing files in your build folder. This is to\navoid potentially longer build times on sites with lots of static content (for\nexample, large images or downloads). Try running ``bsw --clean`` or manually\ndelete the build file you'd like to regenerate.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/davb5/bsw", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bsw", "package_url": "https://pypi.org/project/bsw/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bsw/", "project_urls": {"Homepage": "https://github.com/davb5/bsw"}, "release_url": "https://pypi.org/project/bsw/1.0.7/", "requires_dist": null, "requires_python": "", "summary": "bsw - Build Static Web, a simple static website builder.", "version": "1.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"bsw\">\n<h2>bsw</h2>\n<p>bsw - Build Static Website, a simple static website generator.</p>\n<div id=\"usage-the-short-version\">\n<h3>Usage (the short version)</h3>\n<pre>usage: bsw_run.py [-h] [-C] [-s] [--init [PATH]] [--template TEMPLATE]\n\nbsw - build static website\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -C, --clean          remove existing build folder before building\n  -s, --serve          serve content after build (default port 8000)\n  --init [PATH]        initialise a new bsw site as the specified path\n  --template TEMPLATE  built-in template to use with --init\n</pre>\n<p>Nice and simple.</p>\n</div>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<p>bsw works on the current directory, and expects a couple of folders to\nexist:</p>\n<ul>\n<li>pages</li>\n<li>templates</li>\n</ul>\n<p>To get started, we\u2019ll need to create these folders and add a base\ntemplate (the primary site template) to the <em>templates</em> folder.</p>\n<pre>$ bsw --init mynewsite\n$ cd mynewsite\n$ bsw --serve\n</pre>\n<p>Open &lt;a href=\u201d<a href=\"http://localhost:8000/about\" rel=\"nofollow\">http://localhost:8000/about</a>\u201d&gt;http://localhost:8000/about&lt;/a&gt;\nin your browser and you\u2019ll see your new site, ready to go.</p>\n<p>bsw will read all the *.html and *.htm files inside the <cite>pages</cite> directory\n(recursively) and render them using the templates in the templates folder\n(using base.html by default if a page doesn\u2019t have a template directive).\nThe rendered pages will then be saved to the <cite>build</cite> folder (which will be\ncreated if needed).</p>\n<p>Variables in page (e.g. <tt><span class=\"pre\">&lt;!--</span> page_title = \"my page title\" <span class=\"pre\">--&gt;</span></tt>) are placed\ninto the templates at the placeholders (e.g. <tt>$page_title</tt>). It\u2019s easy to\nadd your own, and you can see a great example of this in the sample blog\ntemplate and blog post.</p>\n<p>The best way to learn the syntax is to take a look at the example pages\nand templates. They\u2019re purposefully very simple and should be easy to\npick up.</p>\n</div>\n<div id=\"static-content\">\n<h3>Static content</h3>\n<p>bsw will copy any files in <tt>static/</tt> and <tt>templates/static/</tt> to to\nthe combined <tt>build/static/</tt> folder where they can easily be\nreferenced by your page or template content. For example, reference the\n<tt>templates/static/logo.png</tt> file on your template or page as so:\n<tt>&lt;img <span class=\"pre\">src=\"/static/logo.png\"&gt;</span></tt>.</p>\n<p>Static folders are completely optional and both template and site\nstatics are accessed from the same combined folder.</p>\n</div>\n<div id=\"includes\">\n<h3>Includes</h3>\n<p>You can include reusable pieces of markup by using <em>include</em> directives.</p>\n<p>You must place all includes in <tt>templates/includes/</tt>.</p>\n<p>For example, let\u2019s create an include with a link to the bsw project\nrepository on GitHub:</p>\n<pre>$ mkdir templates/includes\n$ echo &lt;&lt;EOF &gt; templates/include/github_links.html\n&gt; &lt;p&gt;\n&gt; &lt;a href=\"https://github.com/davb5/bsw\"&gt;github.com/davb5/bsw&lt;/a&gt;\n&gt; &lt;/p&gt;\n&gt; EOF\n</pre>\n<p>We can now reference this include from any of our page or template files\nby adding the following directive to the page markup:</p>\n<pre>&lt;!-- include(\"github_links.html\") --&gt;\n</pre>\n</div>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<div id=\"why-are-there-two-static-folders\">\n<h3>Why are there two static folders?</h3>\n<p><tt>bsw</tt> looks for two static folders:</p>\n<ul>\n<li>static/</li>\n<li>templates/static/</li>\n</ul>\n<p>This allows you to keep your template static files separate from your\npage static files, making it easier to reuse your template on other\nsites.</p>\n<p>However, the use of either (or both) static folders is completely\noptional.</p>\n</div>\n<div id=\"how-do-i-create-a-template\">\n<h3>How do I create a template?</h3>\n<p>Templates are extemely simple. The default template for any page which\ndoesn\u2019t explicitly specify a template is <tt>templates/base.html</tt>.</p>\n<p>It requires only a single tag:</p>\n<pre>$page_content\n</pre>\n<p>The content from each .html or .htm file in <tt>pages/</tt> is inserted into\nthe base template at the <tt>$page_content</tt> tag.</p>\n<p>Pages can also pass values to the template, for example, you template\ncould contain the following:</p>\n<pre>&lt;head&gt;\n    &lt;title&gt;My Example Blog | $page_title&lt;/title&gt;\n&lt;/head&gt;\n</pre>\n<p>You can populate the <tt>$page_title</tt> variable for any page by declaring\nit in a comment in the page markup, as follows:</p>\n<pre>&lt;!-- page_title = \"My first blog post! --&gt;\n</pre>\n<p><em>The only template tag which is required is the ``$page_content`` tag.</em></p>\n</div>\n<div id=\"how-do-i-use-multiple-templates\">\n<h3>How do I use multiple templates?</h3>\n<p>Additional templates can be created in the <tt>templates</tt> folder and\nreferenced from pages by using the special <tt>template</tt> page variable as\nso: <tt><span class=\"pre\">&lt;!--</span> template = \"my_special_case_template.html\" <span class=\"pre\">--&gt;</span></tt></p>\n<p>The <tt><span class=\"pre\">&lt;!--</span> template ... <span class=\"pre\">--&gt;</span></tt> variable can appear anywhere in the page\ncontent (it doesn\u2019t need to be placed at the top of the file).</p>\n<p>Any page which doesn\u2019t explicitly specify a template will use the <em>base\ntemplate</em> <tt>templates/base.html</tt>.</p>\n</div>\n<div id=\"how-do-i-deploy-my-site\">\n<h3>How do I deploy my site?</h3>\n<p>Your hosting environment will vary, but deployment is as simple as copying\nthe contents of the build folder to somewhere accessible on your web server.</p>\n<p>Popular workflows include using rsync (copying only files which have changes)\nor git (handy if you already keep the site source content in a git repository).</p>\n</div>\n<div id=\"i-updated-my-template-or-css-but-the-change-isn-t-reflected-in-a-new-build-why\">\n<h3>I updated my template or CSS but the change isn\u2019t reflected in a new build. Why?</h3>\n<p>By default, bsw won\u2019t overwrite existing files in your build folder. This is to\navoid potentially longer build times on sites with lots of static content (for\nexample, large images or downloads). Try running <tt>bsw <span class=\"pre\">--clean</span></tt> or manually\ndelete the build file you\u2019d like to regenerate.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2359579, "releases": {"0.9.1": [{"comment_text": "", "digests": {"md5": "cd8b89223a24f8b721466f6f33bc4fe1", "sha256": "5ab4d620e66947a7b332da97f8ec81dda5297e6c239b093fdcb6a15cdb532ba4"}, "downloads": -1, "filename": "bsw-0.9.1.tar.gz", "has_sig": false, "md5_digest": "cd8b89223a24f8b721466f6f33bc4fe1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6327, "upload_time": "2016-05-08T18:32:05", "upload_time_iso_8601": "2016-05-08T18:32:05.526820Z", "url": "https://files.pythonhosted.org/packages/10/67/10a0056c5c1a3e8b88642e3099d39d98c9ca7b7747b3941fd9da6c9a159e/bsw-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "1a915e0e03de8f5c30a799e3369cf736", "sha256": "cb0063af8f0a8a8661f3f6d74ab286773163e52a6cc5cadc5cd7409a023ed713"}, "downloads": -1, "filename": "bsw-0.9.2.tar.gz", "has_sig": false, "md5_digest": "1a915e0e03de8f5c30a799e3369cf736", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7452, "upload_time": "2016-05-08T18:58:07", "upload_time_iso_8601": "2016-05-08T18:58:07.469870Z", "url": "https://files.pythonhosted.org/packages/bb/4c/7c5fa5eaeb3df5208a75570b839dd262d9d45b859256f47353f99d373d59/bsw-0.9.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "dd64734a72ad98787b5b7283a1612c25", "sha256": "8aa565e492d9fcc93765cacfab97d887724e2bd49e0117634fafc080ad5a64fd"}, "downloads": -1, "filename": "bsw-1.0.0.tar.gz", "has_sig": false, "md5_digest": "dd64734a72ad98787b5b7283a1612c25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7832, "upload_time": "2016-05-09T00:07:23", "upload_time_iso_8601": "2016-05-09T00:07:23.069128Z", "url": "https://files.pythonhosted.org/packages/50/17/1b4937bc8693deabde741d378d956fb19ca7084516752675aed0c93d9e1f/bsw-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b0e97a054ecea4c26f562b90b0257d7b", "sha256": "d85c36aaf55c726c2d30b007d8d52a1829f450a936487e35d4896a76da4b293e"}, "downloads": -1, "filename": "bsw-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b0e97a054ecea4c26f562b90b0257d7b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7834, "upload_time": "2016-05-09T00:10:09", "upload_time_iso_8601": "2016-05-09T00:10:09.268732Z", "url": "https://files.pythonhosted.org/packages/fe/bd/efda0c2d55722a4764a55369f490bd6adab7c2502961a624d1df43c3fc28/bsw-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "187b1adeecc4f1d5a218f580e9629fa1", "sha256": "e6f146dd49225110e6b9fba025b8fedfb50a7776f4a845058d91f8af415e8753"}, "downloads": -1, "filename": "bsw-1.0.2.tar.gz", "has_sig": false, "md5_digest": "187b1adeecc4f1d5a218f580e9629fa1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9989, "upload_time": "2016-05-09T00:43:32", "upload_time_iso_8601": "2016-05-09T00:43:32.254370Z", "url": "https://files.pythonhosted.org/packages/0f/67/9c82b3f75a80e0d53afb01d99381517ba6218cce14ccf550fdba289cdc70/bsw-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "11c7b93e308553683ef87b6ddf248b33", "sha256": "f063495eaf0fec33308b526ab0dea5be78eb249f049eae77367d0c566ec384b6"}, "downloads": -1, "filename": "bsw-1.0.3.tar.gz", "has_sig": false, "md5_digest": "11c7b93e308553683ef87b6ddf248b33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10014, "upload_time": "2016-05-09T11:10:56", "upload_time_iso_8601": "2016-05-09T11:10:56.915430Z", "url": "https://files.pythonhosted.org/packages/d0/19/298f17bbabb904a9832952d64db7b376d9b28be145c5a04895861cd861de/bsw-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "f726d8be02554fa55273e993ba2d8997", "sha256": "1eb97c31aa175d2e614ce92b68f58942e663b97fd1c92fabbf874b09a633ef88"}, "downloads": -1, "filename": "bsw-1.0.4.tar.gz", "has_sig": false, "md5_digest": "f726d8be02554fa55273e993ba2d8997", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10250, "upload_time": "2016-05-13T21:47:37", "upload_time_iso_8601": "2016-05-13T21:47:37.637684Z", "url": "https://files.pythonhosted.org/packages/59/1e/4076e5a404701c767db17be724a17304bcb44a1141f54c5c439ad0584c93/bsw-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "a408daabd8ed19565b3f6d2b8d83a7f1", "sha256": "26ca247cb638613037d36152695a677d448ab6af94af0c34e755186373b83e4c"}, "downloads": -1, "filename": "bsw-1.0.5.tar.gz", "has_sig": false, "md5_digest": "a408daabd8ed19565b3f6d2b8d83a7f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10249, "upload_time": "2016-08-12T00:25:47", "upload_time_iso_8601": "2016-08-12T00:25:47.327238Z", "url": "https://files.pythonhosted.org/packages/0e/6f/e6bbf94e067a287ba37d698e685157fe58153b882b7a8398ea1f145cb542/bsw-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "edbbedbdfcf40f8ec5f4ae97eb263e0b", "sha256": "9e2ec99e88c486136ff55dbc13df7e92469b16305190c61ed75c5157470067be"}, "downloads": -1, "filename": "bsw-1.0.6.tar.gz", "has_sig": false, "md5_digest": "edbbedbdfcf40f8ec5f4ae97eb263e0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10289, "upload_time": "2016-09-23T13:35:28", "upload_time_iso_8601": "2016-09-23T13:35:28.301700Z", "url": "https://files.pythonhosted.org/packages/6c/a3/bcd42a1056e3cc27aadfac6fc18e2fd2f89c54c1171e3826734c5e4490a1/bsw-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "0d8d3b766dada5c9e4e2909aae1f28ce", "sha256": "8550a995ff316b62cbcc387c2fef79f91d629c814f774877173b70bd1cf64bf8"}, "downloads": -1, "filename": "bsw-1.0.7.tar.gz", "has_sig": false, "md5_digest": "0d8d3b766dada5c9e4e2909aae1f28ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10333, "upload_time": "2016-09-23T13:43:11", "upload_time_iso_8601": "2016-09-23T13:43:11.885850Z", "url": "https://files.pythonhosted.org/packages/8e/7a/5b20d2f57b10449ee94abb313852b4522c2d141eb7effdc10b62e55ef5ab/bsw-1.0.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0d8d3b766dada5c9e4e2909aae1f28ce", "sha256": "8550a995ff316b62cbcc387c2fef79f91d629c814f774877173b70bd1cf64bf8"}, "downloads": -1, "filename": "bsw-1.0.7.tar.gz", "has_sig": false, "md5_digest": "0d8d3b766dada5c9e4e2909aae1f28ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10333, "upload_time": "2016-09-23T13:43:11", "upload_time_iso_8601": "2016-09-23T13:43:11.885850Z", "url": "https://files.pythonhosted.org/packages/8e/7a/5b20d2f57b10449ee94abb313852b4522c2d141eb7effdc10b62e55ef5ab/bsw-1.0.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:11 2020"}