{"info": {"author": "Xia Wu", "author_email": "xiawu@zeuux.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "NewChain Keys\n=============\n\nA common API for NewChain key operations with pluggable backends.\n\n    This library and repository is original forked from\n    https://github.com/ethereum/eth-keys.\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install newchain-keys\n\nDevelopment\n-----------\n\n.. code:: sh\n\n    pip install -e .[dev]\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nYou can run the tests with:\n\n.. code:: sh\n\n    py.test tests\n\nOr you can install ``tox`` to run the full test suite.\n\nReleasing\n~~~~~~~~~\n\nPandoc is required for transforming the markdown README to the proper\nformat to render correctly on pypi.\n\nFor Debian-like systems:\n\n::\n\n    apt install pandoc\n\nOr on OSX:\n\n.. code:: sh\n\n    brew install pandoc\n\nTo release a new version:\n\n.. code:: sh\n\n    make release bump=$$VERSION_PART_TO_BUMP$$\n\nHow to bumpversion\n^^^^^^^^^^^^^^^^^^\n\nThe version format for this repo is ``{major}.{minor}.{patch}`` for\nstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n(``stage`` can be alpha or beta).\n\nTo issue the next version in line, specify which part to bump, like\n``make release bump=minor`` or ``make release bump=devnum``.\n\nIf you are in a beta version, ``make release bump=stage`` will switch to\na stable.\n\nTo issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n``make release bump=\"--new-version 2.0.0-alpha.1 devnum\"``\n\nQuickStart\n----------\n\n.. code:: python\n\n    >>> from newchain_keys import keys\n    >>> pk = keys.PrivateKey(b'\\x01' * 32)\n    >>> signature = pk.sign_msg(b'a message')\n    >>> pk\n    '0x0101010101010101010101010101010101010101010101010101010101010101'\n    >>> pk.public_key\n    '0x6ff03b949241ce1dadd43519e6960e0a85b41a69a05c328103aa2bce1594ca163c4f753a55bf01dc53f6c0b0c7eee78b40c6ff7d25a96e2282b989cef71c144a'\n    >>> signature\n    '0xf5a024b434c72877e7cd4c1f086896477babb10153ef2a787c9276763e6dad1d17d5dcc2a5a611d77e22b06832d84ba6560b0ae36013710156715ea92244fd8901'\n    >>> pk.public_key.to_checksum_address()\n    '0xa0E0162b1a12Ed06d63DD1BF0CD5b0d1e6614B3c'\n    >>> signature.verify_msg(b'a message', pk.public_key)\n    True\n    >>> signature.recover_public_key_from_msg(b'a message') == pk.public_key\n    True\n\nDocumentation\n-------------\n\n``KeyAPI(backend=None)``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``KeyAPI`` object is the primary API for interacting with the\n``newchain-keys`` libary. The object takes a single optional argument in\nits constructor which designates what backend will be used for eliptical\ncurve cryptography operations. The built-in backends are:\n\n-  ``newchain_keys.backends.NativeECCBackend``: A pure python\n   implementation of the ECC operations.\n\nBy default, ``newchain-keys`` will *try* to use the\n``NativeECCBackend``.\n\nThe ``backend`` argument can be given in any of the following forms.\n\n-  Instance of the backend class\n-  The backend class\n-  String with the dot-separated import path for the backend class.\n\n.. code:: python\n\n    >>> from newchain_keys import KeyAPI\n    >>> from newchain_keys.backends import NativeECCBackend\n    # These are all the same\n    >>> keys = KeyAPI(NativeECCBackend)\n    >>> keys = KeyAPI(NativeECCBackend())\n    >>> keys = KeyAPI('newchain_keys.backends.NativeECCBackend')\n\nThe backend can also be configured using the environment variable\n``ECC_BACKEND_CLASS`` which should be set to the dot-separated python\nimport path to the desired backend.\n\n``KeyAPI.ecdsa_sign(message_hash, private_key) -> Signature``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis method returns a signature for the given ``message_hash``, signed\nby the provided ``private_key``.\n\n-  ``message_hash``: **must** be a byte string of length 32\n-  ``private_key``: **must** be an instance of ``PrivateKey``\n\n``KeyAPI.ecdsa_verify(message_hash, signature, public_key) -> bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns ``True`` or ``False`` based on whether the provided\n``signature`` is a valid signature for the provided ``message_hash`` and\n``public_key``.\n\n-  ``message_hash``: **must** be a byte string of length 32\n-  ``signature``: **must** be an instance of ``Signature``\n-  ``public_key``: **must** be an instance of ``PublicKey``\n\n``KeyAPI.ecdsa_recover(message_hash, signature) -> PublicKey``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns the ``PublicKey`` instances recovered from the given\n``signature`` and ``message_hash``.\n\n-  ``message_hash``: **must** be a byte string of length 32\n-  ``signature``: **must** be an instance of ``Signature``\n\n``KeyAPI.private_key_to_public_key(private_key) -> PublicKey``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns the ``PublicKey`` instances computed from the given\n``private_key`` instance.\n\n-  ``private_key``: **must** be an instance of ``PublicKey``\n\nCommon APIs for ``PublicKey``, ``PrivateKey`` and ``Signature``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere is a common API for the following objects.\n\n-  ``PublicKey``\n-  ``PrivateKey``\n-  ``Signature``\n\nEach of these objects has all of the following APIs.\n\n-  ``obj.to_bytes()``: Returns the object in it\u2019s canonical ``bytes``\n   serialization.\n-  ``obj.to_hex()``: Returns a text string of the hex encoded canonical\n   representation.\n\n``KeyAPI.PublicKey(public_key_bytes)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``PublicKey`` class takes a single argument which must be a bytes\nstring with length 64.\n\n    Note that some libraries prefix the byte serialized public key with\n    a leading ``\\x04`` byte which must be removed before use with the\n    ``PublicKey`` object.\n\nThe following methods are available:\n\n``PublicKey.from_private(private_key) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis ``classmethod`` returns a new ``PublicKey`` instance computed from\nthe given ``private_key``.\n\n-  ``private_key`` may either be a byte string of length 32 or an\n   instance of the ``KeyAPI.PrivateKey`` class.\n\n``PublicKey.recover_from_msg(message, signature) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis ``classmethod`` returns a new ``PublicKey`` instance computed from\nthe provided ``message`` and ``signature``.\n\n-  ``message`` **must** be a byte string\n-  ``signature`` **must** be an instance of ``KeyAPI.Signature``\n\n``PublicKey.recover_from_msg_hash(message_hash, signature) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``PublicKey.recover_from_msg`` except that ``message_hash``\nshould be the Keccak hash of the ``message``.\n\n``PublicKey.verify_msg(message, signature) -> bool``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method returns ``True`` or ``False`` based on whether the signature\nis a valid for the given message.\n\n``PublicKey.verify_msg_hash(message_hash, signature) -> bool``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``PublicKey.verify_msg`` except that ``message_hash`` should be\nthe Keccak hash of the ``message``.\n\n``PublicKey.to_address() -> text``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the hex encoded ethereum address for this public key.\n\n``PublicKey.to_checksum_address() -> text``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the ERC55 checksum formatted ethereum address for this public\nkey.\n\n``PublicKey.to_canonical_address() -> bytes``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the 20-byte representation of the ethereum address for this\npublic key.\n\n``KeyAPI.PrivateKey(private_key_bytes)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``PrivateKey`` class takes a single argument which must be a bytes\nstring with length 32.\n\nThe following methods and properties are available\n\n``PrivateKey.public_key``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis *property* holds the ``PublicKey`` instance coresponding to this\nprivate key.\n\n``PrivateKey.sign_msg(message) -> Signature``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method returns a signature for the given ``message`` in the form of\na ``Signature`` instance\n\n-  ``message`` **must** be a byte string.\n\n``PrivateKey.sign_msg_hash(message_hash) -> Signature``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``PrivateKey.sign`` except that ``message_hash`` should be the\nKeccak hash of the ``message``.\n\n``KeyAPI.Signature(signature_bytes=None, vrs=None)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``Signature`` class can be instantiated in one of two ways.\n\n-  ``signature_bytes``: a bytes string with length 65.\n-  ``vrs``: a 3-tuple composed of the integers ``v``, ``r``, and ``s``.\n\n    Note: If using the ``signature_bytes`` to instantiate, the byte\n    string should be encoded as ``r_bytes | s_bytes | v_bytes`` where\n    ``|`` represents concatenation. ``r_bytes`` and ``s_bytes`` should\n    be 32 bytes in length. ``v_bytes`` should be a single byte ``\\x00``\n    or ``\\x01``.\n\nSignatures are expected to use ``1`` or ``0`` for their ``v`` value.\n\nThe following methods and properties are available\n\n``Signature.v``\n^^^^^^^^^^^^^^^\n\nThis property returns the ``v`` value from the signature as an integer.\n\n``Signature.r``\n^^^^^^^^^^^^^^^\n\nThis property returns the ``r`` value from the signature as an integer.\n\n``Signature.s``\n^^^^^^^^^^^^^^^\n\nThis property returns the ``s`` value from the signature as an integer.\n\n``Signature.vrs``\n^^^^^^^^^^^^^^^^^\n\nThis property returns a 3-tuple of ``(v, r, s)``.\n\n``Signature.verify_msg(message, public_key) -> bool``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method returns ``True`` or ``False`` based on whether the signature\nis a valid for the given public key.\n\n-  ``message``: **must** be a byte string.\n-  ``public_key``: **must** be an instance of ``PublicKey``\n\n``Signature.verify_msg_hash(message_hash, public_key) -> bool``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``Signature.verify_msg`` except that ``message_hash`` should be\nthe Keccak hash of the ``message``.\n\n``Signature.recover_public_key_from_msg(message) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method returns a ``PublicKey`` instance recovered from the\nsignature.\n\n-  ``message``: **must** be a byte string.\n\n``Signature.recover_public_key_from_msg_hash(message_hash) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``Signature.recover_public_key_from_msg`` except that\n``message_hash`` should be the Keccak hash of the ``message``.\n\nExceptions\n~~~~~~~~~~\n\n``eth_api.exceptions.ValidationError``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis error is raised during instantaition of any of the ``PublicKey``,\n``PrivateKey`` or ``Signature`` classes if their constructor parameters\nare invalid.\n\n``eth_api.exceptions.BadSignature``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis error is raised from any of the ``recover`` or ``verify`` methods\ninvolving signatures if the signature is invalid.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xiawu/newchain-keys-py", "keywords": "newchain", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "newchain-keys", "package_url": "https://pypi.org/project/newchain-keys/", "platform": "", "project_url": "https://pypi.org/project/newchain-keys/", "project_urls": {"Homepage": "https://github.com/xiawu/newchain-keys-py"}, "release_url": "https://pypi.org/project/newchain-keys/0.1.0/", "requires_dist": ["eth-utils (<2.0.0,>=1.3.0)", "tox (==2.7.0) ; extra == 'dev'", "bumpversion (==0.5.3) ; extra == 'dev'", "twine ; extra == 'dev'", "eth-utils (<2.0.0,>=1.3.0) ; extra == 'dev'", "flake8 (==3.0.4) ; extra == 'dev'", "mypy (<0.600) ; extra == 'dev'", "pytest (==3.2.2) ; extra == 'dev'", "hypothesis (==3.30.0) ; extra == 'dev'", "eth-hash[pysha3] ; (implementation_name == \"cpython\") and extra == 'dev'", "eth-hash[pycryptodome] ; (implementation_name == \"pypy\") and extra == 'dev'", "flake8 (==3.0.4) ; extra == 'lint'", "mypy (<0.600) ; extra == 'lint'", "eth-utils (<2.0.0,>=1.3.0) ; extra == 'newchain-keys'", "pytest (==3.2.2) ; extra == 'test'", "hypothesis (==3.30.0) ; extra == 'test'", "eth-hash[pysha3] ; (implementation_name == \"cpython\") and extra == 'test'", "eth-hash[pycryptodome] ; (implementation_name == \"pypy\") and extra == 'test'"], "requires_python": "", "summary": "Common API for NewChain key operations.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A common API for NewChain key operations with pluggable backends.</p>\n<blockquote>\nThis library and repository is original forked from\n<a href=\"https://github.com/ethereum/eth-keys\" rel=\"nofollow\">https://github.com/ethereum/eth-keys</a>.</blockquote>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install newchain-keys\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<pre>pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<div id=\"running-the-tests\">\n<h3>Running the tests</h3>\n<p>You can run the tests with:</p>\n<pre>py.test tests\n</pre>\n<p>Or you can install <tt>tox</tt> to run the full test suite.</p>\n</div>\n<div id=\"releasing\">\n<h3>Releasing</h3>\n<p>Pandoc is required for transforming the markdown README to the proper\nformat to render correctly on pypi.</p>\n<p>For Debian-like systems:</p>\n<pre>apt install pandoc\n</pre>\n<p>Or on OSX:</p>\n<pre>brew install pandoc\n</pre>\n<p>To release a new version:</p>\n<pre>make release <span class=\"nv\">bump</span><span class=\"o\">=</span><span class=\"nv\">$$</span>VERSION_PART_TO_BUMP<span class=\"nv\">$$</span>\n</pre>\n<div id=\"how-to-bumpversion\">\n<h4>How to bumpversion</h4>\n<p>The version format for this repo is <tt><span class=\"pre\">{major}.{minor}.{patch}</span></tt> for\nstable, and <tt><span class=\"pre\">{major}.{minor}.{patch}-{stage}.{devnum}</span></tt> for unstable\n(<tt>stage</tt> can be alpha or beta).</p>\n<p>To issue the next version in line, specify which part to bump, like\n<tt>make release bump=minor</tt> or <tt>make release bump=devnum</tt>.</p>\n<p>If you are in a beta version, <tt>make release bump=stage</tt> will switch to\na stable.</p>\n<p>To issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n<tt>make release <span class=\"pre\">bump=\"--new-version</span> <span class=\"pre\">2.0.0-alpha.1</span> devnum\"</tt></p>\n</div>\n</div>\n</div>\n<div id=\"quickstart\">\n<h2>QuickStart</h2>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">newchain_keys</span> <span class=\"kn\">import</span> <span class=\"n\">keys</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"n\">PrivateKey</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\x01</span><span class=\"s1\">'</span> <span class=\"o\">*</span> <span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">sign_msg</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'a message'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pk</span>\n<span class=\"s1\">'0x0101010101010101010101010101010101010101010101010101010101010101'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">public_key</span>\n<span class=\"s1\">'0x6ff03b949241ce1dadd43519e6960e0a85b41a69a05c328103aa2bce1594ca163c4f753a55bf01dc53f6c0b0c7eee78b40c6ff7d25a96e2282b989cef71c144a'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">signature</span>\n<span class=\"s1\">'0xf5a024b434c72877e7cd4c1f086896477babb10153ef2a787c9276763e6dad1d17d5dcc2a5a611d77e22b06832d84ba6560b0ae36013710156715ea92244fd8901'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"o\">.</span><span class=\"n\">to_checksum_address</span><span class=\"p\">()</span>\n<span class=\"s1\">'0xa0E0162b1a12Ed06d63DD1BF0CD5b0d1e6614B3c'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">signature</span><span class=\"o\">.</span><span class=\"n\">verify_msg</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'a message'</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">signature</span><span class=\"o\">.</span><span class=\"n\">recover_public_key_from_msg</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'a message'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">pk</span><span class=\"o\">.</span><span class=\"n\">public_key</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<div id=\"keyapi-backend-none\">\n<h3><tt>KeyAPI(backend=None)</tt></h3>\n<p>The <tt>KeyAPI</tt> object is the primary API for interacting with the\n<tt><span class=\"pre\">newchain-keys</span></tt> libary. The object takes a single optional argument in\nits constructor which designates what backend will be used for eliptical\ncurve cryptography operations. The built-in backends are:</p>\n<ul>\n<li><tt>newchain_keys.backends.NativeECCBackend</tt>: A pure python\nimplementation of the ECC operations.</li>\n</ul>\n<p>By default, <tt><span class=\"pre\">newchain-keys</span></tt> will <em>try</em> to use the\n<tt>NativeECCBackend</tt>.</p>\n<p>The <tt>backend</tt> argument can be given in any of the following forms.</p>\n<ul>\n<li>Instance of the backend class</li>\n<li>The backend class</li>\n<li>String with the dot-separated import path for the backend class.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">newchain_keys</span> <span class=\"kn\">import</span> <span class=\"n\">KeyAPI</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">newchain_keys.backends</span> <span class=\"kn\">import</span> <span class=\"n\">NativeECCBackend</span>\n<span class=\"c1\"># These are all the same</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"n\">KeyAPI</span><span class=\"p\">(</span><span class=\"n\">NativeECCBackend</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"n\">KeyAPI</span><span class=\"p\">(</span><span class=\"n\">NativeECCBackend</span><span class=\"p\">())</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"n\">KeyAPI</span><span class=\"p\">(</span><span class=\"s1\">'newchain_keys.backends.NativeECCBackend'</span><span class=\"p\">)</span>\n</pre>\n<p>The backend can also be configured using the environment variable\n<tt>ECC_BACKEND_CLASS</tt> which should be set to the dot-separated python\nimport path to the desired backend.</p>\n</div>\n<div id=\"keyapi-ecdsa-sign-message-hash-private-key-signature\">\n<h3><tt>KeyAPI.ecdsa_sign(message_hash, private_key) <span class=\"pre\">-&gt;</span> Signature</tt></h3>\n<p>This method returns a signature for the given <tt>message_hash</tt>, signed\nby the provided <tt>private_key</tt>.</p>\n<ul>\n<li><tt>message_hash</tt>: <strong>must</strong> be a byte string of length 32</li>\n<li><tt>private_key</tt>: <strong>must</strong> be an instance of <tt>PrivateKey</tt></li>\n</ul>\n</div>\n<div id=\"keyapi-ecdsa-verify-message-hash-signature-public-key-bool\">\n<h3><tt>KeyAPI.ecdsa_verify(message_hash, signature, public_key) <span class=\"pre\">-&gt;</span> bool</tt></h3>\n<p>Returns <tt>True</tt> or <tt>False</tt> based on whether the provided\n<tt>signature</tt> is a valid signature for the provided <tt>message_hash</tt> and\n<tt>public_key</tt>.</p>\n<ul>\n<li><tt>message_hash</tt>: <strong>must</strong> be a byte string of length 32</li>\n<li><tt>signature</tt>: <strong>must</strong> be an instance of <tt>Signature</tt></li>\n<li><tt>public_key</tt>: <strong>must</strong> be an instance of <tt>PublicKey</tt></li>\n</ul>\n</div>\n<div id=\"keyapi-ecdsa-recover-message-hash-signature-publickey\">\n<h3><tt>KeyAPI.ecdsa_recover(message_hash, signature) <span class=\"pre\">-&gt;</span> PublicKey</tt></h3>\n<p>Returns the <tt>PublicKey</tt> instances recovered from the given\n<tt>signature</tt> and <tt>message_hash</tt>.</p>\n<ul>\n<li><tt>message_hash</tt>: <strong>must</strong> be a byte string of length 32</li>\n<li><tt>signature</tt>: <strong>must</strong> be an instance of <tt>Signature</tt></li>\n</ul>\n</div>\n<div id=\"keyapi-private-key-to-public-key-private-key-publickey\">\n<h3><tt>KeyAPI.private_key_to_public_key(private_key) <span class=\"pre\">-&gt;</span> PublicKey</tt></h3>\n<p>Returns the <tt>PublicKey</tt> instances computed from the given\n<tt>private_key</tt> instance.</p>\n<ul>\n<li><tt>private_key</tt>: <strong>must</strong> be an instance of <tt>PublicKey</tt></li>\n</ul>\n</div>\n<div id=\"common-apis-for-publickey-privatekey-and-signature\">\n<h3>Common APIs for <tt>PublicKey</tt>, <tt>PrivateKey</tt> and <tt>Signature</tt></h3>\n<p>There is a common API for the following objects.</p>\n<ul>\n<li><tt>PublicKey</tt></li>\n<li><tt>PrivateKey</tt></li>\n<li><tt>Signature</tt></li>\n</ul>\n<p>Each of these objects has all of the following APIs.</p>\n<ul>\n<li><tt>obj.to_bytes()</tt>: Returns the object in it\u2019s canonical <tt>bytes</tt>\nserialization.</li>\n<li><tt>obj.to_hex()</tt>: Returns a text string of the hex encoded canonical\nrepresentation.</li>\n</ul>\n</div>\n<div id=\"keyapi-publickey-public-key-bytes\">\n<h3><tt>KeyAPI.PublicKey(public_key_bytes)</tt></h3>\n<p>The <tt>PublicKey</tt> class takes a single argument which must be a bytes\nstring with length 64.</p>\n<blockquote>\nNote that some libraries prefix the byte serialized public key with\na leading <tt>\\x04</tt> byte which must be removed before use with the\n<tt>PublicKey</tt> object.</blockquote>\n<p>The following methods are available:</p>\n<div id=\"publickey-from-private-private-key-publickey\">\n<h4><tt>PublicKey.from_private(private_key) <span class=\"pre\">-&gt;</span> PublicKey</tt></h4>\n<p>This <tt>classmethod</tt> returns a new <tt>PublicKey</tt> instance computed from\nthe given <tt>private_key</tt>.</p>\n<ul>\n<li><tt>private_key</tt> may either be a byte string of length 32 or an\ninstance of the <tt>KeyAPI.PrivateKey</tt> class.</li>\n</ul>\n</div>\n<div id=\"publickey-recover-from-msg-message-signature-publickey\">\n<h4><tt>PublicKey.recover_from_msg(message, signature) <span class=\"pre\">-&gt;</span> PublicKey</tt></h4>\n<p>This <tt>classmethod</tt> returns a new <tt>PublicKey</tt> instance computed from\nthe provided <tt>message</tt> and <tt>signature</tt>.</p>\n<ul>\n<li><tt>message</tt> <strong>must</strong> be a byte string</li>\n<li><tt>signature</tt> <strong>must</strong> be an instance of <tt>KeyAPI.Signature</tt></li>\n</ul>\n</div>\n<div id=\"publickey-recover-from-msg-hash-message-hash-signature-publickey\">\n<h4><tt>PublicKey.recover_from_msg_hash(message_hash, signature) <span class=\"pre\">-&gt;</span> PublicKey</tt></h4>\n<p>Same as <tt>PublicKey.recover_from_msg</tt> except that <tt>message_hash</tt>\nshould be the Keccak hash of the <tt>message</tt>.</p>\n</div>\n<div id=\"publickey-verify-msg-message-signature-bool\">\n<h4><tt>PublicKey.verify_msg(message, signature) <span class=\"pre\">-&gt;</span> bool</tt></h4>\n<p>This method returns <tt>True</tt> or <tt>False</tt> based on whether the signature\nis a valid for the given message.</p>\n</div>\n<div id=\"publickey-verify-msg-hash-message-hash-signature-bool\">\n<h4><tt>PublicKey.verify_msg_hash(message_hash, signature) <span class=\"pre\">-&gt;</span> bool</tt></h4>\n<p>Same as <tt>PublicKey.verify_msg</tt> except that <tt>message_hash</tt> should be\nthe Keccak hash of the <tt>message</tt>.</p>\n</div>\n<div id=\"publickey-to-address-text\">\n<h4><tt>PublicKey.to_address() <span class=\"pre\">-&gt;</span> text</tt></h4>\n<p>Returns the hex encoded ethereum address for this public key.</p>\n</div>\n<div id=\"publickey-to-checksum-address-text\">\n<h4><tt>PublicKey.to_checksum_address() <span class=\"pre\">-&gt;</span> text</tt></h4>\n<p>Returns the ERC55 checksum formatted ethereum address for this public\nkey.</p>\n</div>\n<div id=\"publickey-to-canonical-address-bytes\">\n<h4><tt>PublicKey.to_canonical_address() <span class=\"pre\">-&gt;</span> bytes</tt></h4>\n<p>Returns the 20-byte representation of the ethereum address for this\npublic key.</p>\n</div>\n</div>\n<div id=\"keyapi-privatekey-private-key-bytes\">\n<h3><tt>KeyAPI.PrivateKey(private_key_bytes)</tt></h3>\n<p>The <tt>PrivateKey</tt> class takes a single argument which must be a bytes\nstring with length 32.</p>\n<p>The following methods and properties are available</p>\n<div id=\"privatekey-public-key\">\n<h4><tt>PrivateKey.public_key</tt></h4>\n<p>This <em>property</em> holds the <tt>PublicKey</tt> instance coresponding to this\nprivate key.</p>\n</div>\n<div id=\"privatekey-sign-msg-message-signature\">\n<h4><tt>PrivateKey.sign_msg(message) <span class=\"pre\">-&gt;</span> Signature</tt></h4>\n<p>This method returns a signature for the given <tt>message</tt> in the form of\na <tt>Signature</tt> instance</p>\n<ul>\n<li><tt>message</tt> <strong>must</strong> be a byte string.</li>\n</ul>\n</div>\n<div id=\"privatekey-sign-msg-hash-message-hash-signature\">\n<h4><tt>PrivateKey.sign_msg_hash(message_hash) <span class=\"pre\">-&gt;</span> Signature</tt></h4>\n<p>Same as <tt>PrivateKey.sign</tt> except that <tt>message_hash</tt> should be the\nKeccak hash of the <tt>message</tt>.</p>\n</div>\n</div>\n<div id=\"keyapi-signature-signature-bytes-none-vrs-none\">\n<h3><tt>KeyAPI.Signature(signature_bytes=None, vrs=None)</tt></h3>\n<p>The <tt>Signature</tt> class can be instantiated in one of two ways.</p>\n<ul>\n<li><p><tt>signature_bytes</tt>: a bytes string with length 65.</p>\n</li>\n<li><p><tt>vrs</tt>: a 3-tuple composed of the integers <tt>v</tt>, <tt>r</tt>, and <tt>s</tt>.</p>\n<blockquote>\n<p>Note: If using the <tt>signature_bytes</tt> to instantiate, the byte\nstring should be encoded as <tt>r_bytes | s_bytes | v_bytes</tt> where\n<tt>|</tt> represents concatenation. <tt>r_bytes</tt> and <tt>s_bytes</tt> should\nbe 32 bytes in length. <tt>v_bytes</tt> should be a single byte <tt>\\x00</tt>\nor <tt>\\x01</tt>.</p>\n</blockquote>\n</li>\n</ul>\n<p>Signatures are expected to use <tt>1</tt> or <tt>0</tt> for their <tt>v</tt> value.</p>\n<p>The following methods and properties are available</p>\n<div id=\"signature-v\">\n<h4><tt>Signature.v</tt></h4>\n<p>This property returns the <tt>v</tt> value from the signature as an integer.</p>\n</div>\n<div id=\"signature-r\">\n<h4><tt>Signature.r</tt></h4>\n<p>This property returns the <tt>r</tt> value from the signature as an integer.</p>\n</div>\n<div id=\"signature-s\">\n<h4><tt>Signature.s</tt></h4>\n<p>This property returns the <tt>s</tt> value from the signature as an integer.</p>\n</div>\n<div id=\"signature-vrs\">\n<h4><tt>Signature.vrs</tt></h4>\n<p>This property returns a 3-tuple of <tt>(v, r, s)</tt>.</p>\n</div>\n<div id=\"signature-verify-msg-message-public-key-bool\">\n<h4><tt>Signature.verify_msg(message, public_key) <span class=\"pre\">-&gt;</span> bool</tt></h4>\n<p>This method returns <tt>True</tt> or <tt>False</tt> based on whether the signature\nis a valid for the given public key.</p>\n<ul>\n<li><tt>message</tt>: <strong>must</strong> be a byte string.</li>\n<li><tt>public_key</tt>: <strong>must</strong> be an instance of <tt>PublicKey</tt></li>\n</ul>\n</div>\n<div id=\"signature-verify-msg-hash-message-hash-public-key-bool\">\n<h4><tt>Signature.verify_msg_hash(message_hash, public_key) <span class=\"pre\">-&gt;</span> bool</tt></h4>\n<p>Same as <tt>Signature.verify_msg</tt> except that <tt>message_hash</tt> should be\nthe Keccak hash of the <tt>message</tt>.</p>\n</div>\n<div id=\"signature-recover-public-key-from-msg-message-publickey\">\n<h4><tt>Signature.recover_public_key_from_msg(message) <span class=\"pre\">-&gt;</span> PublicKey</tt></h4>\n<p>This method returns a <tt>PublicKey</tt> instance recovered from the\nsignature.</p>\n<ul>\n<li><tt>message</tt>: <strong>must</strong> be a byte string.</li>\n</ul>\n</div>\n<div id=\"signature-recover-public-key-from-msg-hash-message-hash-publickey\">\n<h4><tt>Signature.recover_public_key_from_msg_hash(message_hash) <span class=\"pre\">-&gt;</span> PublicKey</tt></h4>\n<p>Same as <tt>Signature.recover_public_key_from_msg</tt> except that\n<tt>message_hash</tt> should be the Keccak hash of the <tt>message</tt>.</p>\n</div>\n</div>\n<div id=\"exceptions\">\n<h3>Exceptions</h3>\n<div id=\"eth-api-exceptions-validationerror\">\n<h4><tt>eth_api.exceptions.ValidationError</tt></h4>\n<p>This error is raised during instantaition of any of the <tt>PublicKey</tt>,\n<tt>PrivateKey</tt> or <tt>Signature</tt> classes if their constructor parameters\nare invalid.</p>\n</div>\n<div id=\"eth-api-exceptions-badsignature\">\n<h4><tt>eth_api.exceptions.BadSignature</tt></h4>\n<p>This error is raised from any of the <tt>recover</tt> or <tt>verify</tt> methods\ninvolving signatures if the signature is invalid.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4917985, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4bb70b402becb2f71285c4ec015aad9a", "sha256": "0d67f109188738f768a1470cc3a01772041b35b144a48ec4b74e655022b8080f"}, "downloads": -1, "filename": "newchain_keys-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4bb70b402becb2f71285c4ec015aad9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17625, "upload_time": "2019-03-09T04:30:25", "upload_time_iso_8601": "2019-03-09T04:30:25.592818Z", "url": "https://files.pythonhosted.org/packages/ca/e7/02860287dba0c66f7d99992bae8d1cfa47bd1a535c5d543a295a5f39519b/newchain_keys-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43e6ecb9353c3a17b0322548f70e435d", "sha256": "eac25aa97db102d68a46d27264a6d407fb0d40821a21ba97bbf3ca9ffe7330ff"}, "downloads": -1, "filename": "newchain-keys-0.1.0.tar.gz", "has_sig": false, "md5_digest": "43e6ecb9353c3a17b0322548f70e435d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15748, "upload_time": "2019-03-09T04:30:27", "upload_time_iso_8601": "2019-03-09T04:30:27.979622Z", "url": "https://files.pythonhosted.org/packages/6d/76/13746cae28cfe9143e038766b70dd6b93f20d95bdfb42883f293a778cbf1/newchain-keys-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4bb70b402becb2f71285c4ec015aad9a", "sha256": "0d67f109188738f768a1470cc3a01772041b35b144a48ec4b74e655022b8080f"}, "downloads": -1, "filename": "newchain_keys-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4bb70b402becb2f71285c4ec015aad9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17625, "upload_time": "2019-03-09T04:30:25", "upload_time_iso_8601": "2019-03-09T04:30:25.592818Z", "url": "https://files.pythonhosted.org/packages/ca/e7/02860287dba0c66f7d99992bae8d1cfa47bd1a535c5d543a295a5f39519b/newchain_keys-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43e6ecb9353c3a17b0322548f70e435d", "sha256": "eac25aa97db102d68a46d27264a6d407fb0d40821a21ba97bbf3ca9ffe7330ff"}, "downloads": -1, "filename": "newchain-keys-0.1.0.tar.gz", "has_sig": false, "md5_digest": "43e6ecb9353c3a17b0322548f70e435d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15748, "upload_time": "2019-03-09T04:30:27", "upload_time_iso_8601": "2019-03-09T04:30:27.979622Z", "url": "https://files.pythonhosted.org/packages/6d/76/13746cae28cfe9143e038766b70dd6b93f20d95bdfb42883f293a778cbf1/newchain-keys-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:42 2020"}