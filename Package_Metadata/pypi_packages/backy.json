{"info": {"author": "Christian Theune <ct@flyingcircus.io>, Christian Kauhaus <kc@flyingcircus.io>, Daniel Kraft <daniel.kraft@d9t.de>", "author_email": "mail@flyingcircus.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: System :: Archiving :: Backup"], "description": "========\nOverview\n========\n\nBacky is a block-based backup and restore utility for virtual machine images.\n\nBacky is intended to be:\n\n* space-, time-, and network-efficient\n* trivial to restore\n* reliable.\n\nTo achieve this, we rely on:\n\n* space-efficient storages (CoW filesystems, content-hashed chunking)\n* using a snapshot-capable source for our volumes (i.e. Ceph RBD)\n  that allows easy extraction of changes between snapshots,\n* leverage proven, existing low-level tools,\n* keep the code-base small, simple, and well-tested.\n\nWe also have a few ground rules for the implementation:\n\n* VM data is stored self-contained on the filesystem and can be\n  moved between servers using regular FS tools like copy, rsync, or such.\n\n* No third party daemons are required to interact with backy: no database\n  server. The scheduler daemon is only responsible for scheduling and simply\n  calls regular CLI commands to perform a backup. Backy may interact with\n  external daemons like Ceph or Consul, depending on the source storage\n  implementation.\n\n\nOperations\n==========\n\nFull restore\n------------\n\nCheck which revision to restore::\n\n  $ backy -b /srv/backy/<vm> status\n\nMaybe set up the Ceph environment - depending on your configuration::\n\n  $ export CEPH_ARGS=\"--id $HOSTNAME\"\n\nRestore the full image through a Pipe::\n\n  $ backy restore -r <revision> - | rbd import - <pool>/<rootimage>\n\nRestoring individual files\n--------------------------\n\nBacky provides an NBD server to access backups through a mountable device::\n\n  $ cd /srv/backy/$vm\n  $ backy nbd-server\n\nIn a different shell you can now mount this::\n\n  $ nbd-client -N <revision> localhost 9000 /dev/nbd0\n  $ mkdir  -p /mnt/restore/<vm>\n  $ mount -r /dev/nbd0p1 /mnt/restore/<vm>\n\nWhen done::\n\n  $ umount /mnt/restore/<vm>\n  $ nbd-client -d /dev/nbd0\n\nAlso stop the nbd-server with Ctrl-C.\n\n\nSetting up backy\n----------------\n\n#. Create a sufficiently large backup partition using a COW-capable filesystem\n   like btrfs and mount it under `/srv/backy`.\n\n#. Create a configuration file at `/etc/backy.conf`. See man page for details.\n\n#. Start the scheduler with your favourite init system::\n\n      backy -l /var/log/backy.log scheduler -c /path/to/backy.conf\n\n   The scheduler runs in the foreground until it is shot by SIGTERM.\n\n#. Set up monitoring using `backy check`.\n\n#. Set up log rotation for `/var/log/backy.conf` and `/srv/backy/*/backy.log`.\n\nThe file paths given above match the built-in defaults, but paths are fully\nconfigurable.\n\n\nFeatures\n========\n\nTelnet shell\n------------\n\nTelnet into localhost port 6023 to get an interactive console. The console can\ncurrently be used to inspect the scheduler's live status.\n\n\nSelf-check\n----------\n\nBacky includes a self-checking facility. Invoke `backy check` to see if there is\na recent revision present for all configured backup jobs::\n\n   $ backy check\n   OK: 9 jobs within SLA\n\nBoth output and exit code are suited for processing with Nagios-compatible\nmonitoring systems.\n\n\nPluggable backup sources\n------------------------\n\nBacky comes with a number of plug-ins which define block-file like sources:\n\n- **file** extracts data from simple image files living on a regular file\n  system.\n- **ceph-rbd** pulls data from RBD images using Ceph features like snapshots.\n- **flyingcircus** is an extension to the `ceph-rbd` source which we use\n  internally on the `Flying Circus`_ hosting platform. It uses advanced features\n  like Consul integration.\n\n.. _Flying Circus: http://flyingcircus.io/\n\nIt should be easy to write plug-ins for additional sources.\n\n\nAdaptive verification\n---------------------\n\nBacky always verifies freshly created backups. Verification scale depends on\nthe source type: file-based sources get fully verified. Ceph-based sources are\nverified based on random samples for runtime reasons.\n\nZero-configuration scheduling\n-----------------------------\n\nThe backy scheduler is intended to run continuously. It will spread jobs\naccording to the configured run intervals over the day. After resuming from an\ninterruption, it will reschedule missed jobs so that SLAs are still kept if\npossible.\n\nBackup jobs can be triggered at specific times as well: just invoke `backy\nbackup` manually.\n\n\nPerformance\n===========\n\nBacky is designed to use all of the available storage and network bandwidth by\nrunning several instances in parallel. The backing storage must be prepared for\nthis kind of (mixed) load. Finding optimal settings needs a bit of experimentation\ngiven that hardware and load profiles differ from site to site. The following\nsection contains a few points to start off.\n\nStorage backend\n---------------\n\nIf the backing storage is a RAID array, its stripe size should be aligned with\nthe filesystem. We have made good experiences with 256k stripes. Also check for\n512B/4K block misalignments on HDDs. We're using it usually with RAID-6 and have\nseen reasonable performance with both hardware and software RAID.\n\nFilesystem\n----------\n\nWe generally recommend XFS since it provides a high degree of parallelism and is\nable to handle very large directories well.\n\nNote that the standard `cfq` I/O scheduler is not a good pick for\nhighly parallel bulk I/O on multiple drives. Use `deadline` or `noop`.\n\nKernel\n------\n\nSince backy performs a lot of metadata operations, make sure that inodes and\ndentries are not evicted from the VFS cache too early. We found that lowering\nthe `vm.vfs_cache_pressure` sysctl can make quite a difference in total backup\nperformance. We're currently getting good results setting it to `10`.\nYou may also want to increase `vm.min_free_kbytes` to avoid page allocation\nerrors on 10 GbE network interfaces.\n\n\nAuthors\n=======\n\n* Christian Theune <ct@flyingcircus.io>\n* Christian Kauhaus <kc@flyingcircus.io>\n* Daniel Kraft <daniel.kraft@d9t.de>\n\n\nLicense\n=======\n\nGPLv3\n\n\nLinks\n=====\n\n* `Bitbucket repository <https://bitbucket.org/flyingcircus/backy>`_\n* `PyPI page <https://pypi.python.org/pypi/backy>`_\n* `Online docs <http://pythonhosted.org/backy/>`_\n* `Build server <https://builds.flyingcircus.io/job/backy/>`_\n\n.. vim: set ft=rst spell spelllang=en sw=3:\n\n=========\nChangelog\n=========\n\n2.4.3 (2019-04-17)\n==================\n\n- Avoid superfluous work when a source is missing, specifically avoid\n  unnecessary Ceph/KVM interaction. (#27020)\n\n\n2.4.2 (2019-04-17)\n==================\n\n- Optimize handling offline/deletion pending VMs: don't just timeout. Take\n  snapshots and make backups (as long as the image exists). (#22345)\n\n- Documentation update about performance implications.\n\n- Clean up build system instrumentation to get our Jenkins going again.\n\n\n2.4.1 (2018-12-06)\n==================\n\n- Optimization: bundle 'unlink' calls to improve cache locality of VFS metadata\n\n- Optimization: load all known chunks at startup to avoid further seeky IO\n  and large metadata parsing, this also speeds up purges.\n\n- Reduce OS VFS cache trashing by explicitly indicating data we don't expect\n  to read again.\n\n\n2.4 (2018-11-30)\n================\n\n- Add support for Ceph Jewel's --whole-object diff export. (#24636)\n\n- Improve garbage collection of old snapshot requests. (#100024)\n\n- Switch to a new chunked store format: remove one level of directories\n  to massively reduce seeky IO.\n\n- Reorder and improve potentially seeky IOPS in the per-chunk write effort.\n  Do not create directories lazily.\n\n- Require Python 3.6.\n\n2.3 (2018-05-16)\n================\n\n- Add major operational support for handling inconsistencies.\n\n- Operators can mark revisions as 'distrusted', either all for a backup, or\n  individual revisions or time ranges.\n\n- If the newest revision is distrusted then we always perform a full backup\n  instead of a differential backup.\n\n- If there is any revision that is distrusted then every chunk will be written\n  even if it exists (once during a backup, identical chunks within a backup will\n  be trusted once written).\n\n- Implement an explicit verification procedure that will automatically trigger\n  after a backup and will verify distrusted revisions and either delete them or\n  mark them as verified.\n\n- Safety belt: always verify content hashes when reading chunks.\n\n- Improve status report logging.\n\n2.2 (2017-08-28)\n================\n\n- Introduce a new backend storage mechanism, independent of BTRFS: instead of\n  using COW, use a directory with content-hashed 4MiB chunks of the file.\n  Deduplication happens automatically based on the 4MiB chunks.\n\n- Made the use of fadvise features more opportunistic: don't fail if they are\n  not supported by the backend as they are only optimizations anyway.\n\n- Introduce an exponential backoff after a failed backup: instead of retrying\n  quickly and thus hogging the queue (in the case that timeouts are involved)\n  we now backoff exponentially starting with 2 minutes, then 4, then 8, ...\n  until we reach 6 hours as the biggest backoff time.\n\n  You can still trigger an explicit run using the telnet \"run\" command for\n  the affected backup. This will put the backup in the run queue immediately\n  but will not reset the error counter or backoff interval in case it\n  fails again.\n\n- Performance improvement on restore: don't read the restore target. We don't\n  have to optimize CoW in this case. (#28268)\n\n2.1.5 (2016-07-01)\n==================\n\n- Bugfix release: fix data corruption bug in the new full-always mode. (FC\n  #21963)\n\n\n2.1.4 (2016-06-20)\n==================\n\n- Add \"full-always\" flag to Ceph and Flyingcircus sources. (FC #21960)\n\n- Rewrite full backup code to make use of shallow copies to conserve disk space.\n  (FC #21960)\n\n\n2.1.3 (2016-06-09)\n==================\n\n- Fix new timeout to be 5 minutes by default, not 5 days.\n\n- Do not sort blocks any longer: we do not win much from seeking\n  over volumes with random blocks anyway and this helps for a more\n  even distribution with the new timeout over multiple runs.\n\n\n2.1.2 (2016-06-09)\n==================\n\n- Fix backup of images containing holes (#33).\n\n- Introduce a (short) timeout for partial image verification. Especially\n  very large images and images that are backed up frequently do not profit\n  from running for hours to verify them, blocking further backups.\n  (FC #21879)\n\n2.1.1 (2016-01-15)\n==================\n\n- Fix logging bugs.\n\n- Shut down daemon loop cleanly on signal reception.\n\n\n2.1 (2016-01-08)\n================\n\n- Add optional regex filter to the `jobs` command in the telnet shell.\n\n- Provide list of failed jobs in check output, not only the total number.\n\n- Add `status-interval`, `telnet-addrs`, and `telnet-port` configuration\n  options.\n\n- Automatically recover from missing/damaged last or last.rev symlinks (#19532).\n\n- Use `{BASE_DIR}/.lock` as daemon lock file instead of the status file.\n\n- Usability improvements: count jobs, more informative log output.\n\n- Support restoring to block special files like LVM volumes (#31).\n\n\n2.0 (2015-11-06)\n================\n\n- backy now accepts a `-l` option to specify a log file. If no such option is\n  given, it logs to stdout.\n\n- Add `backy find -r REVISION` subcommand to query image paths from shell scripts.\n\n- Fix monitoring bug where partially written images made the check go green\n  (#30).\n\n- Greatly improve error handling and detection of failed jobs.\n\n- Performance improvement: turn off line buffering in bulk file operations\n  (#20).\n\n- The scheduler reports child failures (exit status > 0) now in the main log.\n\n- Fix fallocate() behaviour on 32 bit systems.\n\n- The `flyingcircus` source type now requires 3 arguments: vm, pool, image.\n\n\n2.0b3 (2015-10-02)\n==================\n\n- Improve telnet console.\n\n- Provide Nix build script.\n\n- Generate `requirements.txt` automatically from buildout's `versions.cfg`.\n\n\n2.0b2 (2015-09-15)\n==================\n\n- Introduce scheduler and rework the main backup command. The backy\n  command is now only responsible for dealing with individual backups.\n\n  It does no longer care about scheduling.\n\n  A new daemon and a central configuration file is responsible for that\n  now. However, it simply calls out to the existing backy command\n  so we can still manually interact with the system even if we do not\n  use the daemon.\n\n- Add consul integration for backing up Flying Circus root disk images\n  with clean snapshots (by asking fc.qemu to use fs-freeze before preparing\n  a Ceph snapshot).\n\n- Switch to shorter UUIDs. Existing files with old UUIDs are compatible.\n\n- Turn the configuration format into YAML. Old files are still compatible.\n  New configs will be generated as YAML.\n\n- Performance: defrag all new files automatically to avoid btrfs degrading\n  extent performance. It appears this doesn't completely duplicate all CoW\n  data. Will have to monitor this in the future.\n\n2.0b1 (2014-07-07)\n==================\n\n- Clean up docs.\n\n- Add classifiers in setup.py.\n\n- More or less complete rewrite expecting a copy-on-write filesystem as the\n  target.\n\n- Flexible backup scheduling using free-form tags.\n\n- Compatible with Python 3.2-3.4.\n\n- Initial open source import as provided by Daniel Kraft (D9T).\n\n.. vim: set ft=rst spell spelllang=en:", "description_content_type": "", "docs_url": "https://pythonhosted.org/backy/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/flyingcircus/backy", "keywords": "backup", "license": "GPL-3", "maintainer": "", "maintainer_email": "", "name": "backy", "package_url": "https://pypi.org/project/backy/", "platform": "", "project_url": "https://pypi.org/project/backy/", "project_urls": {"Homepage": "https://bitbucket.org/flyingcircus/backy"}, "release_url": "https://pypi.org/project/backy/2.4.3/", "requires_dist": null, "requires_python": "", "summary": "Block-based backup and restore utility for virtual machine images", "version": "2.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"overview\">\n<h2>Overview</h2>\n<p>Backy is a block-based backup and restore utility for virtual machine images.</p>\n<p>Backy is intended to be:</p>\n<ul>\n<li>space-, time-, and network-efficient</li>\n<li>trivial to restore</li>\n<li>reliable.</li>\n</ul>\n<p>To achieve this, we rely on:</p>\n<ul>\n<li>space-efficient storages (CoW filesystems, content-hashed chunking)</li>\n<li>using a snapshot-capable source for our volumes (i.e. Ceph RBD)\nthat allows easy extraction of changes between snapshots,</li>\n<li>leverage proven, existing low-level tools,</li>\n<li>keep the code-base small, simple, and well-tested.</li>\n</ul>\n<p>We also have a few ground rules for the implementation:</p>\n<ul>\n<li>VM data is stored self-contained on the filesystem and can be\nmoved between servers using regular FS tools like copy, rsync, or such.</li>\n<li>No third party daemons are required to interact with backy: no database\nserver. The scheduler daemon is only responsible for scheduling and simply\ncalls regular CLI commands to perform a backup. Backy may interact with\nexternal daemons like Ceph or Consul, depending on the source storage\nimplementation.</li>\n</ul>\n<div id=\"operations\">\n<h3>Operations</h3>\n<div id=\"full-restore\">\n<h4>Full restore</h4>\n<p>Check which revision to restore:</p>\n<pre>$ backy -b /srv/backy/&lt;vm&gt; status\n</pre>\n<p>Maybe set up the Ceph environment - depending on your configuration:</p>\n<pre>$ export CEPH_ARGS=\"--id $HOSTNAME\"\n</pre>\n<p>Restore the full image through a Pipe:</p>\n<pre>$ backy restore -r &lt;revision&gt; - | rbd import - &lt;pool&gt;/&lt;rootimage&gt;\n</pre>\n</div>\n<div id=\"restoring-individual-files\">\n<h4>Restoring individual files</h4>\n<p>Backy provides an NBD server to access backups through a mountable device:</p>\n<pre>$ cd /srv/backy/$vm\n$ backy nbd-server\n</pre>\n<p>In a different shell you can now mount this:</p>\n<pre>$ nbd-client -N &lt;revision&gt; localhost 9000 /dev/nbd0\n$ mkdir  -p /mnt/restore/&lt;vm&gt;\n$ mount -r /dev/nbd0p1 /mnt/restore/&lt;vm&gt;\n</pre>\n<p>When done:</p>\n<pre>$ umount /mnt/restore/&lt;vm&gt;\n$ nbd-client -d /dev/nbd0\n</pre>\n<p>Also stop the nbd-server with Ctrl-C.</p>\n</div>\n<div id=\"setting-up-backy\">\n<h4>Setting up backy</h4>\n<ol>\n<li><p>Create a sufficiently large backup partition using a COW-capable filesystem\nlike btrfs and mount it under <cite>/srv/backy</cite>.</p>\n</li>\n<li><p>Create a configuration file at <cite>/etc/backy.conf</cite>. See man page for details.</p>\n</li>\n<li><p>Start the scheduler with your favourite init system:</p>\n<pre>backy -l /var/log/backy.log scheduler -c /path/to/backy.conf\n</pre>\n<p>The scheduler runs in the foreground until it is shot by SIGTERM.</p>\n</li>\n<li><p>Set up monitoring using <cite>backy check</cite>.</p>\n</li>\n<li><p>Set up log rotation for <cite>/var/log/backy.conf</cite> and <cite>/srv/backy/*/backy.log</cite>.</p>\n</li>\n</ol>\n<p>The file paths given above match the built-in defaults, but paths are fully\nconfigurable.</p>\n</div>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<div id=\"telnet-shell\">\n<h4>Telnet shell</h4>\n<p>Telnet into localhost port 6023 to get an interactive console. The console can\ncurrently be used to inspect the scheduler\u2019s live status.</p>\n</div>\n<div id=\"self-check\">\n<h4>Self-check</h4>\n<p>Backy includes a self-checking facility. Invoke <cite>backy check</cite> to see if there is\na recent revision present for all configured backup jobs:</p>\n<pre>$ backy check\nOK: 9 jobs within SLA\n</pre>\n<p>Both output and exit code are suited for processing with Nagios-compatible\nmonitoring systems.</p>\n</div>\n<div id=\"pluggable-backup-sources\">\n<h4>Pluggable backup sources</h4>\n<p>Backy comes with a number of plug-ins which define block-file like sources:</p>\n<ul>\n<li><strong>file</strong> extracts data from simple image files living on a regular file\nsystem.</li>\n<li><strong>ceph-rbd</strong> pulls data from RBD images using Ceph features like snapshots.</li>\n<li><strong>flyingcircus</strong> is an extension to the <cite>ceph-rbd</cite> source which we use\ninternally on the <a href=\"http://flyingcircus.io/\" rel=\"nofollow\">Flying Circus</a> hosting platform. It uses advanced features\nlike Consul integration.</li>\n</ul>\n<p>It should be easy to write plug-ins for additional sources.</p>\n</div>\n<div id=\"adaptive-verification\">\n<h4>Adaptive verification</h4>\n<p>Backy always verifies freshly created backups. Verification scale depends on\nthe source type: file-based sources get fully verified. Ceph-based sources are\nverified based on random samples for runtime reasons.</p>\n</div>\n<div id=\"zero-configuration-scheduling\">\n<h4>Zero-configuration scheduling</h4>\n<p>The backy scheduler is intended to run continuously. It will spread jobs\naccording to the configured run intervals over the day. After resuming from an\ninterruption, it will reschedule missed jobs so that SLAs are still kept if\npossible.</p>\n<p>Backup jobs can be triggered at specific times as well: just invoke <cite>backy\nbackup</cite> manually.</p>\n</div>\n</div>\n<div id=\"performance\">\n<h3>Performance</h3>\n<p>Backy is designed to use all of the available storage and network bandwidth by\nrunning several instances in parallel. The backing storage must be prepared for\nthis kind of (mixed) load. Finding optimal settings needs a bit of experimentation\ngiven that hardware and load profiles differ from site to site. The following\nsection contains a few points to start off.</p>\n<div id=\"storage-backend\">\n<h4>Storage backend</h4>\n<p>If the backing storage is a RAID array, its stripe size should be aligned with\nthe filesystem. We have made good experiences with 256k stripes. Also check for\n512B/4K block misalignments on HDDs. We\u2019re using it usually with RAID-6 and have\nseen reasonable performance with both hardware and software RAID.</p>\n</div>\n<div id=\"filesystem\">\n<h4>Filesystem</h4>\n<p>We generally recommend XFS since it provides a high degree of parallelism and is\nable to handle very large directories well.</p>\n<p>Note that the standard <cite>cfq</cite> I/O scheduler is not a good pick for\nhighly parallel bulk I/O on multiple drives. Use <cite>deadline</cite> or <cite>noop</cite>.</p>\n</div>\n<div id=\"kernel\">\n<h4>Kernel</h4>\n<p>Since backy performs a lot of metadata operations, make sure that inodes and\ndentries are not evicted from the VFS cache too early. We found that lowering\nthe <cite>vm.vfs_cache_pressure</cite> sysctl can make quite a difference in total backup\nperformance. We\u2019re currently getting good results setting it to <cite>10</cite>.\nYou may also want to increase <cite>vm.min_free_kbytes</cite> to avoid page allocation\nerrors on 10 GbE network interfaces.</p>\n</div>\n</div>\n<div id=\"authors\">\n<h3>Authors</h3>\n<ul>\n<li>Christian Theune &lt;<a href=\"mailto:ct%40flyingcircus.io\">ct<span>@</span>flyingcircus<span>.</span>io</a>&gt;</li>\n<li>Christian Kauhaus &lt;<a href=\"mailto:kc%40flyingcircus.io\">kc<span>@</span>flyingcircus<span>.</span>io</a>&gt;</li>\n<li>Daniel Kraft &lt;<a href=\"mailto:daniel.kraft%40d9t.de\">daniel<span>.</span>kraft<span>@</span>d9t<span>.</span>de</a>&gt;</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>GPLv3</p>\n</div>\n<div id=\"links\">\n<h3>Links</h3>\n<ul>\n<li><a href=\"https://bitbucket.org/flyingcircus/backy\" rel=\"nofollow\">Bitbucket repository</a></li>\n<li><a href=\"https://pypi.python.org/pypi/backy\" rel=\"nofollow\">PyPI page</a></li>\n<li><a href=\"http://pythonhosted.org/backy/\" rel=\"nofollow\">Online docs</a></li>\n<li><a href=\"https://builds.flyingcircus.io/job/backy/\" rel=\"nofollow\">Build server</a></li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>2.4.3 (2019-04-17)</h3>\n<ul>\n<li>Avoid superfluous work when a source is missing, specifically avoid\nunnecessary Ceph/KVM interaction. (#27020)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>2.4.2 (2019-04-17)</h3>\n<ul>\n<li>Optimize handling offline/deletion pending VMs: don\u2019t just timeout. Take\nsnapshots and make backups (as long as the image exists). (#22345)</li>\n<li>Documentation update about performance implications.</li>\n<li>Clean up build system instrumentation to get our Jenkins going again.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>2.4.1 (2018-12-06)</h3>\n<ul>\n<li>Optimization: bundle \u2018unlink\u2019 calls to improve cache locality of VFS metadata</li>\n<li>Optimization: load all known chunks at startup to avoid further seeky IO\nand large metadata parsing, this also speeds up purges.</li>\n<li>Reduce OS VFS cache trashing by explicitly indicating data we don\u2019t expect\nto read again.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>2.4 (2018-11-30)</h3>\n<ul>\n<li>Add support for Ceph Jewel\u2019s \u2013whole-object diff export. (#24636)</li>\n<li>Improve garbage collection of old snapshot requests. (#100024)</li>\n<li>Switch to a new chunked store format: remove one level of directories\nto massively reduce seeky IO.</li>\n<li>Reorder and improve potentially seeky IOPS in the per-chunk write effort.\nDo not create directories lazily.</li>\n<li>Require Python 3.6.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>2.3 (2018-05-16)</h3>\n<ul>\n<li>Add major operational support for handling inconsistencies.</li>\n<li>Operators can mark revisions as \u2018distrusted\u2019, either all for a backup, or\nindividual revisions or time ranges.</li>\n<li>If the newest revision is distrusted then we always perform a full backup\ninstead of a differential backup.</li>\n<li>If there is any revision that is distrusted then every chunk will be written\neven if it exists (once during a backup, identical chunks within a backup will\nbe trusted once written).</li>\n<li>Implement an explicit verification procedure that will automatically trigger\nafter a backup and will verify distrusted revisions and either delete them or\nmark them as verified.</li>\n<li>Safety belt: always verify content hashes when reading chunks.</li>\n<li>Improve status report logging.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>2.2 (2017-08-28)</h3>\n<ul>\n<li><p>Introduce a new backend storage mechanism, independent of BTRFS: instead of\nusing COW, use a directory with content-hashed 4MiB chunks of the file.\nDeduplication happens automatically based on the 4MiB chunks.</p>\n</li>\n<li><p>Made the use of fadvise features more opportunistic: don\u2019t fail if they are\nnot supported by the backend as they are only optimizations anyway.</p>\n</li>\n<li><p>Introduce an exponential backoff after a failed backup: instead of retrying\nquickly and thus hogging the queue (in the case that timeouts are involved)\nwe now backoff exponentially starting with 2 minutes, then 4, then 8, \u2026\nuntil we reach 6 hours as the biggest backoff time.</p>\n<p>You can still trigger an explicit run using the telnet \u201crun\u201d command for\nthe affected backup. This will put the backup in the run queue immediately\nbut will not reset the error counter or backoff interval in case it\nfails again.</p>\n</li>\n<li><p>Performance improvement on restore: don\u2019t read the restore target. We don\u2019t\nhave to optimize CoW in this case. (#28268)</p>\n</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>2.1.5 (2016-07-01)</h3>\n<ul>\n<li>Bugfix release: fix data corruption bug in the new full-always mode. (FC\n#21963)</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>2.1.4 (2016-06-20)</h3>\n<ul>\n<li>Add \u201cfull-always\u201d flag to Ceph and Flyingcircus sources. (FC #21960)</li>\n<li>Rewrite full backup code to make use of shallow copies to conserve disk space.\n(FC #21960)</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>2.1.3 (2016-06-09)</h3>\n<ul>\n<li>Fix new timeout to be 5 minutes by default, not 5 days.</li>\n<li>Do not sort blocks any longer: we do not win much from seeking\nover volumes with random blocks anyway and this helps for a more\neven distribution with the new timeout over multiple runs.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>2.1.2 (2016-06-09)</h3>\n<ul>\n<li>Fix backup of images containing holes (#33).</li>\n<li>Introduce a (short) timeout for partial image verification. Especially\nvery large images and images that are backed up frequently do not profit\nfrom running for hours to verify them, blocking further backups.\n(FC #21879)</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>2.1.1 (2016-01-15)</h3>\n<ul>\n<li>Fix logging bugs.</li>\n<li>Shut down daemon loop cleanly on signal reception.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>2.1 (2016-01-08)</h3>\n<ul>\n<li>Add optional regex filter to the <cite>jobs</cite> command in the telnet shell.</li>\n<li>Provide list of failed jobs in check output, not only the total number.</li>\n<li>Add <cite>status-interval</cite>, <cite>telnet-addrs</cite>, and <cite>telnet-port</cite> configuration\noptions.</li>\n<li>Automatically recover from missing/damaged last or last.rev symlinks (#19532).</li>\n<li>Use <cite>{BASE_DIR}/.lock</cite> as daemon lock file instead of the status file.</li>\n<li>Usability improvements: count jobs, more informative log output.</li>\n<li>Support restoring to block special files like LVM volumes (#31).</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>2.0 (2015-11-06)</h3>\n<ul>\n<li>backy now accepts a <cite>-l</cite> option to specify a log file. If no such option is\ngiven, it logs to stdout.</li>\n<li>Add <cite>backy find -r REVISION</cite> subcommand to query image paths from shell scripts.</li>\n<li>Fix monitoring bug where partially written images made the check go green\n(#30).</li>\n<li>Greatly improve error handling and detection of failed jobs.</li>\n<li>Performance improvement: turn off line buffering in bulk file operations\n(#20).</li>\n<li>The scheduler reports child failures (exit status &gt; 0) now in the main log.</li>\n<li>Fix fallocate() behaviour on 32 bit systems.</li>\n<li>The <cite>flyingcircus</cite> source type now requires 3 arguments: vm, pool, image.</li>\n</ul>\n</div>\n<div id=\"b3-2015-10-02\">\n<h3>2.0b3 (2015-10-02)</h3>\n<ul>\n<li>Improve telnet console.</li>\n<li>Provide Nix build script.</li>\n<li>Generate <cite>requirements.txt</cite> automatically from buildout\u2019s <cite>versions.cfg</cite>.</li>\n</ul>\n</div>\n<div id=\"b2-2015-09-15\">\n<h3>2.0b2 (2015-09-15)</h3>\n<ul>\n<li><p>Introduce scheduler and rework the main backup command. The backy\ncommand is now only responsible for dealing with individual backups.</p>\n<p>It does no longer care about scheduling.</p>\n<p>A new daemon and a central configuration file is responsible for that\nnow. However, it simply calls out to the existing backy command\nso we can still manually interact with the system even if we do not\nuse the daemon.</p>\n</li>\n<li><p>Add consul integration for backing up Flying Circus root disk images\nwith clean snapshots (by asking fc.qemu to use fs-freeze before preparing\na Ceph snapshot).</p>\n</li>\n<li><p>Switch to shorter UUIDs. Existing files with old UUIDs are compatible.</p>\n</li>\n<li><p>Turn the configuration format into YAML. Old files are still compatible.\nNew configs will be generated as YAML.</p>\n</li>\n<li><p>Performance: defrag all new files automatically to avoid btrfs degrading\nextent performance. It appears this doesn\u2019t completely duplicate all CoW\ndata. Will have to monitor this in the future.</p>\n</li>\n</ul>\n</div>\n<div id=\"b1-2014-07-07\">\n<h3>2.0b1 (2014-07-07)</h3>\n<ul>\n<li>Clean up docs.</li>\n<li>Add classifiers in setup.py.</li>\n<li>More or less complete rewrite expecting a copy-on-write filesystem as the\ntarget.</li>\n<li>Flexible backup scheduling using free-form tags.</li>\n<li>Compatible with Python 3.2-3.4.</li>\n<li>Initial open source import as provided by Daniel Kraft (D9T).</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5153944, "releases": {"2.0": [{"comment_text": "", "digests": {"md5": "583d1f1e33bf755c22d23683cbb1af50", "sha256": "4678790f851b855c0c11f917a953162b1a8fb745836cb11c6c459771bab51d20"}, "downloads": -1, "filename": "backy-2.0.tar.gz", "has_sig": false, "md5_digest": "583d1f1e33bf755c22d23683cbb1af50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43182, "upload_time": "2015-11-06T16:47:04", "upload_time_iso_8601": "2015-11-06T16:47:04.305488Z", "url": "https://files.pythonhosted.org/packages/e1/62/e7ce9f2b0285923522ead31e3d28abda206d17ba1bae9026b6c1c7e623ff/backy-2.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "0cce73b0cb84b6ff9b15b56ccf96956d", "sha256": "b81ef10d48dc6b65a10cda1bb89df20d0f84e649e01b555db2fd88336b0dc713"}, "downloads": -1, "filename": "backy-2.0.zip", "has_sig": false, "md5_digest": "0cce73b0cb84b6ff9b15b56ccf96956d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64708, "upload_time": "2015-11-06T16:45:28", "upload_time_iso_8601": "2015-11-06T16:45:28.893728Z", "url": "https://files.pythonhosted.org/packages/2d/1f/204dd0c850deb35033daabfc5d4210bf99cdfccdc68d4be0da7d1628f329/backy-2.0.zip", "yanked": false}], "2.0a1dev": [], "2.0b1": [{"comment_text": "", "digests": {"md5": "f9d46260af796d26209c3f24da2f195f", "sha256": "4d9f060f06548e4a877ee488faec9820f7a9880fa3dcbe67e5bde5f3c76cedfc"}, "downloads": -1, "filename": "backy-2.0b1.zip", "has_sig": false, "md5_digest": "f9d46260af796d26209c3f24da2f195f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51980, "upload_time": "2014-07-07T13:02:29", "upload_time_iso_8601": "2014-07-07T13:02:29.142131Z", "url": "https://files.pythonhosted.org/packages/90/bb/fb7b38800899f2b4b195350457641ce603e951adbe72e7f134c3f923987f/backy-2.0b1.zip", "yanked": false}], "2.0b2": [{"comment_text": "", "digests": {"md5": "4b5cff9d6373e544ebc52771d5f431a5", "sha256": "492f4ee7df4d4580a751a72c7877d8f44c496a4e974399bf16fb43240c4c3a59"}, "downloads": -1, "filename": "backy-2.0b2.tar.gz", "has_sig": false, "md5_digest": "4b5cff9d6373e544ebc52771d5f431a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49985, "upload_time": "2015-09-15T05:58:37", "upload_time_iso_8601": "2015-09-15T05:58:37.079370Z", "url": "https://files.pythonhosted.org/packages/36/61/841a97a055eca6f1d027db6b810d96328937560025972e10dc60c24bbadc/backy-2.0b2.tar.gz", "yanked": false}], "2.0b3": [{"comment_text": "", "digests": {"md5": "53b5c11ce6cc71c394d68352d95bba3a", "sha256": "3ac02ed14a1194482458d55d3130d05c7c776ff502ee3defaca7d0bb5162eb52"}, "downloads": -1, "filename": "backy-2.0b3.zip", "has_sig": false, "md5_digest": "53b5c11ce6cc71c394d68352d95bba3a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59808, "upload_time": "2015-10-02T13:10:28", "upload_time_iso_8601": "2015-10-02T13:10:28.187527Z", "url": "https://files.pythonhosted.org/packages/36/d9/bc217036ed8a7765728309cce2342dfbc6596eafc5736b250e6371a3bfde/backy-2.0b3.zip", "yanked": false}], "2.1": [{"comment_text": "", "digests": {"md5": "e0b6605083c91b5f19b07ddd348ba847", "sha256": "ec98af17a5934e543190f162232c599cbf194480d569bf6d1c833e68e31d7381"}, "downloads": -1, "filename": "backy-2.1.tar.gz", "has_sig": false, "md5_digest": "e0b6605083c91b5f19b07ddd348ba847", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48124, "upload_time": "2016-01-08T19:38:42", "upload_time_iso_8601": "2016-01-08T19:38:42.136129Z", "url": "https://files.pythonhosted.org/packages/a9/81/20fed9fc7d2e29302eb39ae3da2bf929837871d7a73ad5bf858dfabde17f/backy-2.1.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "585fd05cad3c06a74264fc3746d1adb7", "sha256": "844d4e267ed3c2e3904f72e90f61f4740641ef44b76b91f848cc757a2446ccc2"}, "downloads": -1, "filename": "backy-2.1.1.tar.gz", "has_sig": false, "md5_digest": "585fd05cad3c06a74264fc3746d1adb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45825, "upload_time": "2016-01-15T09:20:34", "upload_time_iso_8601": "2016-01-15T09:20:34.411614Z", "url": "https://files.pythonhosted.org/packages/be/a3/6bdeacd1b000bb0745da2cce112b9417361605a9cb19d1509ea43be2ca04/backy-2.1.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "9653b71652adf78a8d14c89cb183519d", "sha256": "708be1c470ce6d282b7c374ee9feb7311f19cc382542dfc254ee016f414bba24"}, "downloads": -1, "filename": "backy-2.1.1.zip", "has_sig": false, "md5_digest": "9653b71652adf78a8d14c89cb183519d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68766, "upload_time": "2016-01-15T09:18:42", "upload_time_iso_8601": "2016-01-15T09:18:42.818403Z", "url": "https://files.pythonhosted.org/packages/7a/f5/386737c2aad718d67120f21729794bc951c90ac3593f434b9bf63306338c/backy-2.1.1.zip", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "afc7a800c9a72743bc8983268f4c6da4", "sha256": "59ed060dd9a301f9edfb496b8c747d7a65be58fa9ade10ac72b90389b6c72824"}, "downloads": -1, "filename": "backy-2.1.2.tar.gz", "has_sig": false, "md5_digest": "afc7a800c9a72743bc8983268f4c6da4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49431, "upload_time": "2016-06-09T06:45:05", "upload_time_iso_8601": "2016-06-09T06:45:05.546857Z", "url": "https://files.pythonhosted.org/packages/b8/a9/fe75b6ec975819b17282973aa729224165073c8b80ecf1694cdd8f012def/backy-2.1.2.tar.gz", "yanked": false}], "2.1.3": [{"comment_text": "", "digests": {"md5": "b7bcb743c424cfc331535e6a39b570f2", "sha256": "d30b221a3ee8d963a5eb8f97e86b13f6d01875bfcbdecd80f2fbb095a2f43b8a"}, "downloads": -1, "filename": "backy-2.1.3.tar.gz", "has_sig": false, "md5_digest": "b7bcb743c424cfc331535e6a39b570f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49755, "upload_time": "2016-06-09T13:03:56", "upload_time_iso_8601": "2016-06-09T13:03:56.916022Z", "url": "https://files.pythonhosted.org/packages/05/b1/a76f4e4d5c7860c7ca18fa6f8c663c2f2595328782b01d86c205ffc2f746/backy-2.1.3.tar.gz", "yanked": false}], "2.1.4": [{"comment_text": "", "digests": {"md5": "55b96b40f03bde128e6cad20dda12fd6", "sha256": "6610aecb8e77997a10ad909989d7dbdd930cb31484a963cb54d545de1e3bfc51"}, "downloads": -1, "filename": "backy-2.1.4.tar.gz", "has_sig": false, "md5_digest": "55b96b40f03bde128e6cad20dda12fd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50660, "upload_time": "2016-06-20T08:54:54", "upload_time_iso_8601": "2016-06-20T08:54:54.332632Z", "url": "https://files.pythonhosted.org/packages/fd/9f/8165bdaaffe049fb2a303d57cb9a47cdfb6261c7e874aa9e51c7e5e88823/backy-2.1.4.tar.gz", "yanked": false}], "2.1.5": [{"comment_text": "", "digests": {"md5": "cc61fe2f53890c496a1deb0b61ddbd3c", "sha256": "4c9b5c8402ad5615f4ed64f74994dbe67c9851db6a5c2dbb7f9c4b0a4dcc07bf"}, "downloads": -1, "filename": "backy-2.1.5.tar.gz", "has_sig": false, "md5_digest": "cc61fe2f53890c496a1deb0b61ddbd3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50809, "upload_time": "2016-07-01T09:18:20", "upload_time_iso_8601": "2016-07-01T09:18:20.531837Z", "url": "https://files.pythonhosted.org/packages/03/a6/c8e32ce50405bfd188ec522d202f7214321d2f7ba0e2333633d0645f1225/backy-2.1.5.tar.gz", "yanked": false}], "2.2": [{"comment_text": "", "digests": {"md5": "0af90b231aaefccc156019a40c64c057", "sha256": "35db41e1c8c54ad3a5e35b5e618aaa78dc6b958363bf104dab308376e176fb7f"}, "downloads": -1, "filename": "backy-2.2.tar.gz", "has_sig": false, "md5_digest": "0af90b231aaefccc156019a40c64c057", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68597, "upload_time": "2017-08-28T07:29:28", "upload_time_iso_8601": "2017-08-28T07:29:28.968814Z", "url": "https://files.pythonhosted.org/packages/3d/55/842dd7d4c6f8c88f38e7628e8204afa1298efc7d7b82395858eebc891171/backy-2.2.tar.gz", "yanked": false}], "2.3": [{"comment_text": "", "digests": {"md5": "ce65ca9f1e9f93fbffe0a76256a785cc", "sha256": "c90d527ffb13693e32ba8d8bfaedfc6142d56be69f213f550e6688deffce2fd4"}, "downloads": -1, "filename": "backy-2.3.tar.gz", "has_sig": false, "md5_digest": "ce65ca9f1e9f93fbffe0a76256a785cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 72496, "upload_time": "2018-05-16T06:24:15", "upload_time_iso_8601": "2018-05-16T06:24:15.395957Z", "url": "https://files.pythonhosted.org/packages/3e/fe/145c145dcd7e30286c1380ca570829e769364eb1e5b5695b5ab6131810dd/backy-2.3.tar.gz", "yanked": false}], "2.4": [{"comment_text": "", "digests": {"md5": "566d7d51a180b9a4cc7ce2c5f280b298", "sha256": "0203a1816cb82166acf3a1e63cfb9f584e93bf6631e0ea12cf250ab63e102388"}, "downloads": -1, "filename": "backy-2.4.tar.gz", "has_sig": false, "md5_digest": "566d7d51a180b9a4cc7ce2c5f280b298", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73832, "upload_time": "2018-11-30T07:07:13", "upload_time_iso_8601": "2018-11-30T07:07:13.623525Z", "url": "https://files.pythonhosted.org/packages/7f/c8/c495009beee479a0d56b833b168aea5761ecdfd9f8781f6cff8f34d90ed7/backy-2.4.tar.gz", "yanked": false}], "2.4.1": [{"comment_text": "", "digests": {"md5": "c99366bfbb8ebcb166054aba4e9dc298", "sha256": "179eb9913281b7637d501279517bbb174243c08282d0cb64c2477407ce642d3f"}, "downloads": -1, "filename": "backy-2.4.1.tar.gz", "has_sig": false, "md5_digest": "c99366bfbb8ebcb166054aba4e9dc298", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74454, "upload_time": "2018-12-06T13:58:04", "upload_time_iso_8601": "2018-12-06T13:58:04.246169Z", "url": "https://files.pythonhosted.org/packages/91/3c/08a12761da3bdc6d82784da341ca07dfe27a99d507204e7439a22451404a/backy-2.4.1.tar.gz", "yanked": false}], "2.4.2": [{"comment_text": "", "digests": {"md5": "fdab6549ad3a4b3b6741f3e3bf238c7f", "sha256": "966276949186816fc3e57d93bb042ba4e89727126ed7255108d0bc2cada3c514"}, "downloads": -1, "filename": "backy-2.4.2.tar.gz", "has_sig": false, "md5_digest": "fdab6549ad3a4b3b6741f3e3bf238c7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74428, "upload_time": "2019-04-17T07:28:31", "upload_time_iso_8601": "2019-04-17T07:28:31.441101Z", "url": "https://files.pythonhosted.org/packages/ca/72/883b3ed5638efc7d6edd8fb706cac4e2552b81fe678f0b248a622e0224f4/backy-2.4.2.tar.gz", "yanked": false}], "2.4.3": [{"comment_text": "", "digests": {"md5": "817b22e41f224072c4d39ec145c7df9e", "sha256": "6d62643bd663bfc6982025ceeb9cb3272a5ec9a802284f95e2e3044c61020484"}, "downloads": -1, "filename": "backy-2.4.3.tar.gz", "has_sig": false, "md5_digest": "817b22e41f224072c4d39ec145c7df9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74800, "upload_time": "2019-04-17T08:22:59", "upload_time_iso_8601": "2019-04-17T08:22:59.762791Z", "url": "https://files.pythonhosted.org/packages/79/4c/66464d7c7ce710aeb14793526e8ae878ed1e6304f1f9317c725cb3541fb2/backy-2.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "817b22e41f224072c4d39ec145c7df9e", "sha256": "6d62643bd663bfc6982025ceeb9cb3272a5ec9a802284f95e2e3044c61020484"}, "downloads": -1, "filename": "backy-2.4.3.tar.gz", "has_sig": false, "md5_digest": "817b22e41f224072c4d39ec145c7df9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74800, "upload_time": "2019-04-17T08:22:59", "upload_time_iso_8601": "2019-04-17T08:22:59.762791Z", "url": "https://files.pythonhosted.org/packages/79/4c/66464d7c7ce710aeb14793526e8ae878ed1e6304f1f9317c725cb3541fb2/backy-2.4.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:06 2020"}