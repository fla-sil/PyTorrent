{"info": {"author": "Bardia Barabadi", "author_email": "bardiabarabadi@uvic.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Topic :: Software Development"], "description": "\n# UVic MUSE\n\nAn application for streaming from MUSE headsets to MATLAB and other \nplatforms. \n\n## Requirements\n\nThe code relies on [pygatt](https://github.com/peplin/pygatt) for BLE communication \n    and [pylsl](https://github.com/chkothe/pylsl) for Muse streaming. For the best result use [BLED112](http://www.farnell.com/datasheets/2674198.pdf?_ga=2.79024144.587051681.1584504877-1039421750.1584504877&_gac=1.255907449.1584504893.Cj0KCQjw6sHzBRCbARIsAF8FMpWVas72rjYW8HkIbpjfUe97CBonZR71Yi22iGbSvDSER9rcJJ1JbqsaAit0EALw_wcB).\nWe highly recommend installing on a virtual environment (VE). You can build and manage those VEs using [Anaconda](https://www.anaconda.com/), \n        the instructions to install and setup a conda environment is described [here](https://docs.anaconda.com/anaconda/install/).\n\n\n\n**Compatible with Python 3.x**\n\n**Compatible with MUSE _MU-02_ and _MU-03_**\n\n_Note: if you run into any issues, first check out out Common Issues\nand then the Issues section of [this](https://github.com/bardiabarabadi/uvicMUSE) repository_\n\n## Getting Started\n\nTo stream from MUSE to MATLAB ro other platforms, a _Streamer_ application is required. \nTransmitted data from _Streamer_ side then can be received and used by the _Receiver_ application. \nTake a look at this chart below:\n\n\n![Top](image.png)\n\nThis project has two sections, first, *UVic MUSE* that connects to MUSE \nover Bluetooth and streams its data over UDP and LSL.\nSecond, a MATLAB toolbox (and `MuseUdp.m`) that allows the user to receive \n*UVic MUSE* transmitted data over UDP protocol. \nIn the following sections we go through installation and usage of *UVic MUSE*\nand then explain about part two, MuseUdp.   \n\n### UVic MUSE Installation\n\nOn Windows we suggest the user to install Anaconda and run all of the following commands\n(including optional commands) in an Anaconda Prompt. You may need to install\n [Microsoft Visual C++ Build Tools](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017) (~1GB) from microsoft website if you don't use Anaconda.\n\nOn MacOS and linux, install Anaconda (or miniconda), \nopen a terminal, and follow these commands:\n\n**If you don't want to use a virtual environment, use Terminal (Linux and OSx) \nor Command Prompt (Windows) and skip the optional steps.**\n\n(optinal) Create a new conda environment.\n\n    conda create --name muse_env python=3.7\n\n(optinal) Activate conda environment\n\n    conda activate muse_env\n\nInstall UVicMUSE using `pip`\n\n    pip install --upgrade uvicmuse\n\n\n#### Running UVicMUSE:\n\nTo run and use *UVic MUSE* open a Terminal (Linux & OSx) or Command Prompt (Windows)\nand type in the commands below:\n\n(optional) Activate the virtual environment\n\n    conda activate muse_env\n\nRun UVicMUSE:\n\n    uvicmuse\n\n**If you manage to install UVicMUSE without conda in Windows, you can run it by opening the start menu\nand typing uvicmuse**\n\n#### GUI: \n\n![Top](uvicmuse_.png)\n\n#### Streaming Procedure:\nFollow steps shown below to stream the MUSE sensory data. Remember to correctly specify the **Required Entries** variables\nbefore moving on to the next step. \n\n1. Search to get a list of available MUSEs\n2. Connect to one of the MUSEs. **Required Entries** = Checkboxes (UDP, LSL, EEG, PPG, ACC, GYRO) \n3. Start Streaming over UDP and LSL (if enabled). **Required Entries** = Filters (Highpass, Lowpass, Notch)\n\nNotes:\n* Stopping the stream won't disconnect the MUSE (use this feature for changing filters configurations)\n* Search is required after disconnecting from a MUSE \n\n\n## Receiver Toolbox (MuseUdp)\n\nIn this section we explain the methods available in the MATLAB toolbox. The main responsibility of a receiver\nis to connect to UDP socket (same socket as UVic MUSE) and receive data that is being transmitted from MUSE device.\n\n#### MATLAB Toolbox\n\nDonwload [MuseUdp Toolbox](https://www.mathworks.com/matlabcentral/fileexchange/74583-museudp) from MATLAB file exchange. \nOpen and install the toolbox on MATLAB. Moreover, you need to install [Instrument Control Toolbox](https://www.mathworks.com/products/instrument.html)\n to establish UDP connections.\n\nTo see all of the available methods (functions), create an object from MuseUdp and call methods for it:\n\n    mu = MuseUdp();\n    methods(mu);\n\nTo get a single sample from UVic MUSE use:\n\n    mu = MuseUdp();\n    [data, timestamp, success] = mu.get_xxx_sample()\n\nRepace `xxx`with `eeg`, `ppg`, `acc` or `gyro`. The sampled data may have different size according to `xxx`, `eeg` has 5 \nchannels per sample, the rest of the sensors return 3 channels data. \n\nTo read sampled data in chunks, you need to specify the chunk size and call `mu.get_xxx_chunk(###)`, replace `xxx` with sensor type\nand `###` with the chunk size. The output size, `size(data)`, will be `[chunk_size, 5]` for `eeg` and `[chunk_size, 3]` for others. \n\n*Note: since the buffer size is limited for UDP protocols, each sample of `eeg` contains four bytes for timestamp and\n4 * 5 = 20 bytes for data (24B total). Since default buffer size in UDP is 1kB, one cannot get a chunk larger that 40 samples.\nWe suggest using multiple instances of `get_xxx_chunk()`, but you can change the buffer size by calling the function below:\n\n    mu.set_udp_buffer_size(2048) % 2kB buffer\n\n## Issues\n\nOn MacOSx: Application crashes after running:\n\n    pip uninstall serial pyserial\n    conda uninstall serial pyserial\n    pip install pyserial esptool\n\n## Citing UVicMUSE\n\n```\n@misc{UVicMUSE,\n  author       = {Bardia Barabadi, Jamieson Fregeau},\n  title        = {uvic-muse},\n  month        = March,\n  year         = 2020,\n}\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "muse lsl eeg ble neuroscience matlab UDP", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "uvicmuse-debug", "package_url": "https://pypi.org/project/uvicmuse-debug/", "platform": "", "project_url": "https://pypi.org/project/uvicmuse-debug/", "project_urls": null, "release_url": "https://pypi.org/project/uvicmuse-debug/1.0.1/", "requires_dist": ["bitstring", "pygatt", "pandas", "scikit-learn", "numpy", "seaborn", "pexpect", "pillow", "kivy", "docutils", "pygments", "pyserial", "esptool", "pylsl ; platform_system != \"Linux\"", "pylsl (==1.10.5) ; platform_system == \"Linux\"", "pypiwin32 ; platform_system == \"Windows\"", "kivy.deps.glew ; platform_system == \"Windows\"", "kivy.deps.sdl2 ; platform_system == \"Windows\"", "kivy.deps.gstreamer ; platform_system == \"Windows\""], "requires_python": "", "summary": "Stream and visualize EEG data from the Muse headset.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>UVic MUSE</h1>\n<p>An application for streaming from MUSE headsets to MATLAB and other\nplatforms.</p>\n<h2>Requirements</h2>\n<p>The code relies on <a href=\"https://github.com/peplin/pygatt\" rel=\"nofollow\">pygatt</a> for BLE communication\nand <a href=\"https://github.com/chkothe/pylsl\" rel=\"nofollow\">pylsl</a> for Muse streaming. For the best result use <a href=\"http://www.farnell.com/datasheets/2674198.pdf?_ga=2.79024144.587051681.1584504877-1039421750.1584504877&amp;_gac=1.255907449.1584504893.Cj0KCQjw6sHzBRCbARIsAF8FMpWVas72rjYW8HkIbpjfUe97CBonZR71Yi22iGbSvDSER9rcJJ1JbqsaAit0EALw_wcB\" rel=\"nofollow\">BLED112</a>.\nWe highly recommend installing on a virtual environment (VE). You can build and manage those VEs using <a href=\"https://www.anaconda.com/\" rel=\"nofollow\">Anaconda</a>,\nthe instructions to install and setup a conda environment is described <a href=\"https://docs.anaconda.com/anaconda/install/\" rel=\"nofollow\">here</a>.</p>\n<p><strong>Compatible with Python 3.x</strong></p>\n<p><strong>Compatible with MUSE <em>MU-02</em> and <em>MU-03</em></strong></p>\n<p><em>Note: if you run into any issues, first check out out Common Issues\nand then the Issues section of <a href=\"https://github.com/bardiabarabadi/uvicMUSE\" rel=\"nofollow\">this</a> repository</em></p>\n<h2>Getting Started</h2>\n<p>To stream from MUSE to MATLAB ro other platforms, a <em>Streamer</em> application is required.\nTransmitted data from <em>Streamer</em> side then can be received and used by the <em>Receiver</em> application.\nTake a look at this chart below:</p>\n<p><img alt=\"Top\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8724f35bda04cc71c38bf932c4b24ff2c61dc196/696d6167652e706e67\"></p>\n<p>This project has two sections, first, <em>UVic MUSE</em> that connects to MUSE\nover Bluetooth and streams its data over UDP and LSL.\nSecond, a MATLAB toolbox (and <code>MuseUdp.m</code>) that allows the user to receive\n<em>UVic MUSE</em> transmitted data over UDP protocol.\nIn the following sections we go through installation and usage of <em>UVic MUSE</em>\nand then explain about part two, MuseUdp.</p>\n<h3>UVic MUSE Installation</h3>\n<p>On Windows we suggest the user to install Anaconda and run all of the following commands\n(including optional commands) in an Anaconda Prompt. You may need to install\n<a href=\"https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017\" rel=\"nofollow\">Microsoft Visual C++ Build Tools</a> (~1GB) from microsoft website if you don't use Anaconda.</p>\n<p>On MacOS and linux, install Anaconda (or miniconda),\nopen a terminal, and follow these commands:</p>\n<p><strong>If you don't want to use a virtual environment, use Terminal (Linux and OSx)\nor Command Prompt (Windows) and skip the optional steps.</strong></p>\n<p>(optinal) Create a new conda environment.</p>\n<pre><code>conda create --name muse_env python=3.7\n</code></pre>\n<p>(optinal) Activate conda environment</p>\n<pre><code>conda activate muse_env\n</code></pre>\n<p>Install UVicMUSE using <code>pip</code></p>\n<pre><code>pip install --upgrade uvicmuse\n</code></pre>\n<h4>Running UVicMUSE:</h4>\n<p>To run and use <em>UVic MUSE</em> open a Terminal (Linux &amp; OSx) or Command Prompt (Windows)\nand type in the commands below:</p>\n<p>(optional) Activate the virtual environment</p>\n<pre><code>conda activate muse_env\n</code></pre>\n<p>Run UVicMUSE:</p>\n<pre><code>uvicmuse\n</code></pre>\n<p><strong>If you manage to install UVicMUSE without conda in Windows, you can run it by opening the start menu\nand typing uvicmuse</strong></p>\n<h4>GUI:</h4>\n<p><img alt=\"Top\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8cceced4627f4ea88afb6937865a1f7e4a6f0e35/757669636d7573655f2e706e67\"></p>\n<h4>Streaming Procedure:</h4>\n<p>Follow steps shown below to stream the MUSE sensory data. Remember to correctly specify the <strong>Required Entries</strong> variables\nbefore moving on to the next step.</p>\n<ol>\n<li>Search to get a list of available MUSEs</li>\n<li>Connect to one of the MUSEs. <strong>Required Entries</strong> = Checkboxes (UDP, LSL, EEG, PPG, ACC, GYRO)</li>\n<li>Start Streaming over UDP and LSL (if enabled). <strong>Required Entries</strong> = Filters (Highpass, Lowpass, Notch)</li>\n</ol>\n<p>Notes:</p>\n<ul>\n<li>Stopping the stream won't disconnect the MUSE (use this feature for changing filters configurations)</li>\n<li>Search is required after disconnecting from a MUSE</li>\n</ul>\n<h2>Receiver Toolbox (MuseUdp)</h2>\n<p>In this section we explain the methods available in the MATLAB toolbox. The main responsibility of a receiver\nis to connect to UDP socket (same socket as UVic MUSE) and receive data that is being transmitted from MUSE device.</p>\n<h4>MATLAB Toolbox</h4>\n<p>Donwload <a href=\"https://www.mathworks.com/matlabcentral/fileexchange/74583-museudp\" rel=\"nofollow\">MuseUdp Toolbox</a> from MATLAB file exchange.\nOpen and install the toolbox on MATLAB. Moreover, you need to install <a href=\"https://www.mathworks.com/products/instrument.html\" rel=\"nofollow\">Instrument Control Toolbox</a>\nto establish UDP connections.</p>\n<p>To see all of the available methods (functions), create an object from MuseUdp and call methods for it:</p>\n<pre><code>mu = MuseUdp();\nmethods(mu);\n</code></pre>\n<p>To get a single sample from UVic MUSE use:</p>\n<pre><code>mu = MuseUdp();\n[data, timestamp, success] = mu.get_xxx_sample()\n</code></pre>\n<p>Repace <code>xxx</code>with <code>eeg</code>, <code>ppg</code>, <code>acc</code> or <code>gyro</code>. The sampled data may have different size according to <code>xxx</code>, <code>eeg</code> has 5\nchannels per sample, the rest of the sensors return 3 channels data.</p>\n<p>To read sampled data in chunks, you need to specify the chunk size and call <code>mu.get_xxx_chunk(###)</code>, replace <code>xxx</code> with sensor type\nand <code>###</code> with the chunk size. The output size, <code>size(data)</code>, will be <code>[chunk_size, 5]</code> for <code>eeg</code> and <code>[chunk_size, 3]</code> for others.</p>\n<p>*Note: since the buffer size is limited for UDP protocols, each sample of <code>eeg</code> contains four bytes for timestamp and\n4 * 5 = 20 bytes for data (24B total). Since default buffer size in UDP is 1kB, one cannot get a chunk larger that 40 samples.\nWe suggest using multiple instances of <code>get_xxx_chunk()</code>, but you can change the buffer size by calling the function below:</p>\n<pre><code>mu.set_udp_buffer_size(2048) % 2kB buffer\n</code></pre>\n<h2>Issues</h2>\n<p>On MacOSx: Application crashes after running:</p>\n<pre><code>pip uninstall serial pyserial\nconda uninstall serial pyserial\npip install pyserial esptool\n</code></pre>\n<h2>Citing UVicMUSE</h2>\n<pre><code>@misc{UVicMUSE,\n  author       = {Bardia Barabadi, Jamieson Fregeau},\n  title        = {uvic-muse},\n  month        = March,\n  year         = 2020,\n}\n</code></pre>\n\n          </div>"}, "last_serial": 6867805, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "d39d3bed7cb7c8e3a7987c8ce0f73d1e", "sha256": "9ce6f75d702e4bf00703426b0c9f26288eaf98c04da9684e3a0341d3ad3dd966"}, "downloads": -1, "filename": "uvicmuse_debug-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d39d3bed7cb7c8e3a7987c8ce0f73d1e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 64800, "upload_time": "2020-03-23T19:14:57", "upload_time_iso_8601": "2020-03-23T19:14:57.850786Z", "url": "https://files.pythonhosted.org/packages/ca/0b/78d01112e6e430ea286a0fd8e7f36092d1f63ba7e6256378add2c1ed4602/uvicmuse_debug-1.0.1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d39d3bed7cb7c8e3a7987c8ce0f73d1e", "sha256": "9ce6f75d702e4bf00703426b0c9f26288eaf98c04da9684e3a0341d3ad3dd966"}, "downloads": -1, "filename": "uvicmuse_debug-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d39d3bed7cb7c8e3a7987c8ce0f73d1e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 64800, "upload_time": "2020-03-23T19:14:57", "upload_time_iso_8601": "2020-03-23T19:14:57.850786Z", "url": "https://files.pythonhosted.org/packages/ca/0b/78d01112e6e430ea286a0fd8e7f36092d1f63ba7e6256378add2c1ed4602/uvicmuse_debug-1.0.1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:38:41 2020"}