{"info": {"author": "A.Star", "author_email": "astar@snowland.ltd", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation", "Topic :: Software Development :: Libraries"], "description": "=====\nslapy\n=====\n1. install\nfrom pypi:\n    pip install snowland-algorithm\nor\nfrom source code:\n    download code from https://gitee.com/hoops/snowland-algorithm-python, you can choose a release version\n    pip install -r requirements.txt\n    python setup.py install\n#. dirs\n    1. graph\n        a. dijkstra(v0.0.1+)\n        #. spfa(v0.0.1+)\n    #. swarm\n        a. pso(v0.0.1+)\n        #. gso(v0.0.2+)\n        #. fa(v0.0.3+)\n        #. cso(v0.0.6+)\n        #. ba(v0.0.6+)\n        #. sfla(v0.0.6+)\n        #. bas(v0.0.6+)\n        #. sa(v0.0.6+)\n        #. fwa(v0.0.6+)\n        #. cs(v0.0.7+)\n        #. bfo(v0.0.7+)\n#. quick use\n    1. import package\n    >>> from slapy.swarm.package_name import engine_name\n    2. define the fitness function\n    example:\n        >>> fun = lambda x: np.cos(x[0]) + np.sin(x[0]) - x[0] * x[1]\n    note: arg need to be 1 X n vector\n    3. run the model\n    >>> engine = engine_name(your_args)\n    >>> engine.run()\n    4. show result\n    >>> x, y = engine.gbest.chromosome\n    >>> print('max value', fun(engine.gbest.chromosome))\n    >>> print('x:', x, 'y:', y)\n    There is a example for PSO.\n        >>> def fun(vars):\n        >>>     # fitness function\n        >>>     x, y = vars\n        >>>     if 1 <= x <= 2 * np.pi and 1 <= y <= np.pi:\n        >>>         return np.cos(x) + np.sin(x) - x * y\n        >>>     else:\n        >>>         return -2 - 4 * np.pi ** 2  # return a small float number can not reach\n\n        >>> if __name__ == '__main__':\n        >>>    engine = PSOEngine(vmax=0.01, bound=[[1, 2 * np.pi]], min_fitness_value=-1, dim=2, fitness_function=fun, steps=100)\n        >>>    engine.run()\n        >>>    x, y = engine.gbest.chromosome\n        >>>    print('max value', fun(engine.gbest.chromosome))\n        >>>    print('x:', x, 'y:', y)\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitee.com/hoops/snowland-algorithm-python", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "snowland-algorithm", "package_url": "https://pypi.org/project/snowland-algorithm/", "platform": "all", "project_url": "https://pypi.org/project/snowland-algorithm/", "project_urls": {"Homepage": "https://gitee.com/hoops/snowland-algorithm-python"}, "release_url": "https://pypi.org/project/snowland-algorithm/0.0.7/", "requires_dist": null, "requires_python": "", "summary": "Python implementation algorithm", "version": "0.0.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            =====<br>slapy<br>=====<br>1. install<br>from pypi:<br>    pip install snowland-algorithm<br>or<br>from source code:<br>    download code from https://gitee.com/hoops/snowland-algorithm-python, you can choose a release version<br>    pip install -r requirements.txt<br>    python setup.py install<br>#. dirs<br>    1. graph<br>        a. dijkstra(v0.0.1+)<br>        #. spfa(v0.0.1+)<br>    #. swarm<br>        a. pso(v0.0.1+)<br>        #. gso(v0.0.2+)<br>        #. fa(v0.0.3+)<br>        #. cso(v0.0.6+)<br>        #. ba(v0.0.6+)<br>        #. sfla(v0.0.6+)<br>        #. bas(v0.0.6+)<br>        #. sa(v0.0.6+)<br>        #. fwa(v0.0.6+)<br>        #. cs(v0.0.7+)<br>        #. bfo(v0.0.7+)<br>#. quick use<br>    1. import package<br>    &gt;&gt;&gt; from slapy.swarm.package_name import engine_name<br>    2. define the fitness function<br>    example:<br>        &gt;&gt;&gt; fun = lambda x: np.cos(x[0]) + np.sin(x[0]) - x[0] * x[1]<br>    note: arg need to be 1 X n vector<br>    3. run the model<br>    &gt;&gt;&gt; engine = engine_name(your_args)<br>    &gt;&gt;&gt; engine.run()<br>    4. show result<br>    &gt;&gt;&gt; x, y = engine.gbest.chromosome<br>    &gt;&gt;&gt; print('max value', fun(engine.gbest.chromosome))<br>    &gt;&gt;&gt; print('x:', x, 'y:', y)<br>    There is a example for PSO.<br>        &gt;&gt;&gt; def fun(vars):<br>        &gt;&gt;&gt;     # fitness function<br>        &gt;&gt;&gt;     x, y = vars<br>        &gt;&gt;&gt;     if 1 &lt;= x &lt;= 2 * np.pi and 1 &lt;= y &lt;= np.pi:<br>        &gt;&gt;&gt;         return np.cos(x) + np.sin(x) - x * y<br>        &gt;&gt;&gt;     else:<br>        &gt;&gt;&gt;         return -2 - 4 * np.pi ** 2  # return a small float number can not reach<br><br>        &gt;&gt;&gt; if __name__ == '__main__':<br>        &gt;&gt;&gt;    engine = PSOEngine(vmax=0.01, bound=[[1, 2 * np.pi]], min_fitness_value=-1, dim=2, fitness_function=fun, steps=100)<br>        &gt;&gt;&gt;    engine.run()<br>        &gt;&gt;&gt;    x, y = engine.gbest.chromosome<br>        &gt;&gt;&gt;    print('max value', fun(engine.gbest.chromosome))<br>        &gt;&gt;&gt;    print('x:', x, 'y:', y)<br><br><br>\n          </div>"}, "last_serial": 4481737, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "843932e2dbf486e7ea286825ae0e785b", "sha256": "f4904d6729e5a863ef7d8515326f4aa6b77b92958e38ba645c225e4f0ae27b69"}, "downloads": -1, "filename": "snowland_algorithm-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "843932e2dbf486e7ea286825ae0e785b", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 43388, "upload_time": "2018-08-01T02:30:18", "upload_time_iso_8601": "2018-08-01T02:30:18.205581Z", "url": "https://files.pythonhosted.org/packages/28/c4/01f338a2c163aefb74f03576856e34173cfdceb261b9ecf2e389fe377673/snowland_algorithm-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "5c81b71c27d2ff79a6d1e2e3a939be12", "sha256": "c11644acb5a55fca005d429599324016421afa58bbf898457101f728edc43aae"}, "downloads": -1, "filename": "snowland_algorithm-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5c81b71c27d2ff79a6d1e2e3a939be12", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 46998, "upload_time": "2018-08-17T01:59:04", "upload_time_iso_8601": "2018-08-17T01:59:04.133638Z", "url": "https://files.pythonhosted.org/packages/11/3a/ec6bf0848fb8177a51855a237f69462f85633952dc355da7a6614288926e/snowland_algorithm-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4a0": [{"comment_text": "", "digests": {"md5": "d7b9359092843dcfcffcb14700d9dbb8", "sha256": "ddee155647feb4048ecdfa2b76ca803321313c51940860ae828a740c454cfe0a"}, "downloads": -1, "filename": "snowland_algorithm-0.0.4a0-py3-none-any.whl", "has_sig": false, "md5_digest": "d7b9359092843dcfcffcb14700d9dbb8", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 52487, "upload_time": "2018-08-29T20:59:55", "upload_time_iso_8601": "2018-08-29T20:59:55.198251Z", "url": "https://files.pythonhosted.org/packages/7f/0b/94fdf19e570df2a2cf63460254c8f98df85348c6df919ae8ec2798f18b51/snowland_algorithm-0.0.4a0-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "46a82d3834d8b32da2cc00206922024c", "sha256": "bfb0cd5a0ca32fcc902b4765ddcb274d59ade69c85c308aa751b80cc61b2ef88"}, "downloads": -1, "filename": "snowland_algorithm-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "46a82d3834d8b32da2cc00206922024c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 63369, "upload_time": "2018-09-10T04:08:38", "upload_time_iso_8601": "2018-09-10T04:08:38.661212Z", "url": "https://files.pythonhosted.org/packages/ab/b5/fc3f39dbe32414387bd7fb85e5c7bfe49043860a780a9ce1cb3ccd6163e5/snowland_algorithm-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "ae5166be5e14937c145fd86e926e1280", "sha256": "e94ee27ab012c51489dcfc72627a4f4ace565810fd90cc142a8ec0ba95959bb2"}, "downloads": -1, "filename": "snowland_algorithm-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ae5166be5e14937c145fd86e926e1280", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 84133, "upload_time": "2018-11-13T13:32:43", "upload_time_iso_8601": "2018-11-13T13:32:43.374447Z", "url": "https://files.pythonhosted.org/packages/f9/88/6cbccd18ae6b9c5b983bcf9440704c4d03d3a9186671fd7ebb75e004e03e/snowland_algorithm-0.0.7-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae5166be5e14937c145fd86e926e1280", "sha256": "e94ee27ab012c51489dcfc72627a4f4ace565810fd90cc142a8ec0ba95959bb2"}, "downloads": -1, "filename": "snowland_algorithm-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ae5166be5e14937c145fd86e926e1280", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 84133, "upload_time": "2018-11-13T13:32:43", "upload_time_iso_8601": "2018-11-13T13:32:43.374447Z", "url": "https://files.pythonhosted.org/packages/f9/88/6cbccd18ae6b9c5b983bcf9440704c4d03d3a9186671fd7ebb75e004e03e/snowland_algorithm-0.0.7-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:07:14 2020"}