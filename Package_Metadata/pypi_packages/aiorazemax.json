{"info": {"author": "21 Buttons APP S.L.", "author_email": "jairo@21buttons.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3.7"], "description": "# Aiorazemax\n[![Build Status](https://travis-ci.com/21Buttons/aiorazemax.svg?branch=master)](https://travis-ci.com/21Buttons/aiorazemax)\n\n\u2709\ufe0f Async communications using AWS SNS + SQS for Python services \u2728\n\n## Documentation\n\n### In-Memory event manager\n\n_Show me the code_\n\n```python\nfrom aiorazemax.event_manager import EventManager\n\n\nclass NorthKoreaThreatCreatedEvent:\n    def __init__(self, id, target):\n        self.id = id\n        self.target = target\n\n\nasync def trump_subscriber(event: NorthKoreaThreatCreatedEvent):\n    print(f\"North korea will attack us or {event.target}!\")\n\n\nEventManager.subscribe(trump_subscriber, NorthKoreaThreatCreatedEvent)\nawait EventManager.trigger(NorthKoreaThreatCreatedEvent(0, \"Mexico\"))\n```\n\nResult:\n```\nNorth korea will attack us or Mexico!\n```\n\n### Trigger subscribers from SQS\n\n#### Preconditions\n\nSQS queue has to be subscribed to SNS topic before running the consumer\n\n#### Code\n\n```python\nimport asyncio\n\nfrom aiorazemax.consumers import MessageConsumer\nfrom aiorazemax.drivers import SQSDriver\nfrom aiorazemax.event_manager import EventManager\nfrom aiorazemax.publisher import SNSMessagePublisher\n\n\naws_settings = {\n    'region_name': \"\",\n    'aws_access_key_id': \"\",\n    'aws_secret_access_key': \"\",\n    'endpoint_url': \"\"\n}\n\n\nclass NorthKoreaThreatCreatedEvent:\n    def __init__(self, id, target):\n        self.id = id\n        self.target = target\n\n\ndef kp_message_to_event(event_message):\n    message = event_message.body\n    # Highly recommended to use Marshmallow to validate\n    return NorthKoreaThreatCreatedEvent(message['body']['id'], message['body']['target_name'])\n\n\nmapper = {\n    'KPThreatCreated': kp_message_to_event\n}\n\n\nasync def trump_subscriber(event: NorthKoreaThreatCreatedEvent):\n    print(f\"North korea will attack us or {event.target}!\")\n\n\nasync def main():\n    EventManager.subscribe(trump_subscriber, NorthKoreaThreatCreatedEvent)\n\n    queue_driver = await SQSDriver.build('korea-threats-queue', aws_settings)\n    consumer = MessageConsumer(mapper, EventManager, queue_driver)\n\n    publisher = await SNSMessagePublisher.build('korea-topic', aws_settings)\n    await publisher.publish('KPThreatCreated', {'id': 21, 'target_name': 'Portugal'})\n\n    await consumer.process_message()\n\n    await queue_driver.close()\n    await publisher.close()\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\nResult:\n\n```\nNorth korea will attack us or Portugal!\n```\n\n## Installing\n\n`pip install aiorazemax`\n\n\n## Running the tests\n\nTo run end to end tests do:\n```\nmake unit-tests\nmake integration-tests\n```\n\n## Authors\n\n* Jairo Vadillo ([@jairovadillo](https://github.com/jairovadillo))\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/21buttons/aiorazemax", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "aiorazemax", "package_url": "https://pypi.org/project/aiorazemax/", "platform": "", "project_url": "https://pypi.org/project/aiorazemax/", "project_urls": {"Homepage": "https://github.com/21buttons/aiorazemax"}, "release_url": "https://pypi.org/project/aiorazemax/0.0.1/", "requires_dist": null, "requires_python": ">=3.7.0", "summary": "SNS + SQS Communications made easy", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Aiorazemax</h1>\n<p><a href=\"https://travis-ci.com/21Buttons/aiorazemax\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58e61f1ad187ebbd19e9146f663fd9f8e596f9e1/68747470733a2f2f7472617669732d63692e636f6d2f3231427574746f6e732f61696f72617a656d61782e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>\u2709\ufe0f Async communications using AWS SNS + SQS for Python services \u2728</p>\n<h2>Documentation</h2>\n<h3>In-Memory event manager</h3>\n<p><em>Show me the code</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aiorazemax.event_manager</span> <span class=\"kn\">import</span> <span class=\"n\">EventManager</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NorthKoreaThreatCreatedEvent</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">target</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">trump_subscriber</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">NorthKoreaThreatCreatedEvent</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"North korea will attack us or </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">EventManager</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">trump_subscriber</span><span class=\"p\">,</span> <span class=\"n\">NorthKoreaThreatCreatedEvent</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">EventManager</span><span class=\"o\">.</span><span class=\"n\">trigger</span><span class=\"p\">(</span><span class=\"n\">NorthKoreaThreatCreatedEvent</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"Mexico\"</span><span class=\"p\">))</span>\n</pre>\n<p>Result:</p>\n<pre><code>North korea will attack us or Mexico!\n</code></pre>\n<h3>Trigger subscribers from SQS</h3>\n<h4>Preconditions</h4>\n<p>SQS queue has to be subscribed to SNS topic before running the consumer</p>\n<h4>Code</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">aiorazemax.consumers</span> <span class=\"kn\">import</span> <span class=\"n\">MessageConsumer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiorazemax.drivers</span> <span class=\"kn\">import</span> <span class=\"n\">SQSDriver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiorazemax.event_manager</span> <span class=\"kn\">import</span> <span class=\"n\">EventManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiorazemax.publisher</span> <span class=\"kn\">import</span> <span class=\"n\">SNSMessagePublisher</span>\n\n\n<span class=\"n\">aws_settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'region_name'</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aws_access_key_id'</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s1\">'aws_secret_access_key'</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n    <span class=\"s1\">'endpoint_url'</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NorthKoreaThreatCreatedEvent</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"nb\">id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">target</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">kp_message_to_event</span><span class=\"p\">(</span><span class=\"n\">event_message</span><span class=\"p\">):</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">event_message</span><span class=\"o\">.</span><span class=\"n\">body</span>\n    <span class=\"c1\"># Highly recommended to use Marshmallow to validate</span>\n    <span class=\"k\">return</span> <span class=\"n\">NorthKoreaThreatCreatedEvent</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">][</span><span class=\"s1\">'id'</span><span class=\"p\">],</span> <span class=\"n\">message</span><span class=\"p\">[</span><span class=\"s1\">'body'</span><span class=\"p\">][</span><span class=\"s1\">'target_name'</span><span class=\"p\">])</span>\n\n\n<span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'KPThreatCreated'</span><span class=\"p\">:</span> <span class=\"n\">kp_message_to_event</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">trump_subscriber</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">NorthKoreaThreatCreatedEvent</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"North korea will attack us or </span><span class=\"si\">{</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"si\">}</span><span class=\"s2\">!\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">EventManager</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">trump_subscriber</span><span class=\"p\">,</span> <span class=\"n\">NorthKoreaThreatCreatedEvent</span><span class=\"p\">)</span>\n\n    <span class=\"n\">queue_driver</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">SQSDriver</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"s1\">'korea-threats-queue'</span><span class=\"p\">,</span> <span class=\"n\">aws_settings</span><span class=\"p\">)</span>\n    <span class=\"n\">consumer</span> <span class=\"o\">=</span> <span class=\"n\">MessageConsumer</span><span class=\"p\">(</span><span class=\"n\">mapper</span><span class=\"p\">,</span> <span class=\"n\">EventManager</span><span class=\"p\">,</span> <span class=\"n\">queue_driver</span><span class=\"p\">)</span>\n\n    <span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">SNSMessagePublisher</span><span class=\"o\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"s1\">'korea-topic'</span><span class=\"p\">,</span> <span class=\"n\">aws_settings</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">publisher</span><span class=\"o\">.</span><span class=\"n\">publish</span><span class=\"p\">(</span><span class=\"s1\">'KPThreatCreated'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"s1\">'target_name'</span><span class=\"p\">:</span> <span class=\"s1\">'Portugal'</span><span class=\"p\">})</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">consumer</span><span class=\"o\">.</span><span class=\"n\">process_message</span><span class=\"p\">()</span>\n\n    <span class=\"k\">await</span> <span class=\"n\">queue_driver</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">publisher</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Result:</p>\n<pre><code>North korea will attack us or Portugal!\n</code></pre>\n<h2>Installing</h2>\n<p><code>pip install aiorazemax</code></p>\n<h2>Running the tests</h2>\n<p>To run end to end tests do:</p>\n<pre><code>make unit-tests\nmake integration-tests\n</code></pre>\n<h2>Authors</h2>\n<ul>\n<li>Jairo Vadillo (<a href=\"https://github.com/jairovadillo\" rel=\"nofollow\">@jairovadillo</a>)</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details</p>\n\n          </div>"}, "last_serial": 5655716, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c6cf8c40dcdf58f932d81c2004630070", "sha256": "51ea96fb4fcfaa1d174f617184480e173ddbe3ae67a08aa38a0126b88e4a8880"}, "downloads": -1, "filename": "aiorazemax-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c6cf8c40dcdf58f932d81c2004630070", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 4828, "upload_time": "2019-08-09T13:29:41", "upload_time_iso_8601": "2019-08-09T13:29:41.023818Z", "url": "https://files.pythonhosted.org/packages/97/73/92dc8726cf2ef95307a1dff73647fd0cb7b2f387aace19ae5b43650a102c/aiorazemax-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c6cf8c40dcdf58f932d81c2004630070", "sha256": "51ea96fb4fcfaa1d174f617184480e173ddbe3ae67a08aa38a0126b88e4a8880"}, "downloads": -1, "filename": "aiorazemax-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c6cf8c40dcdf58f932d81c2004630070", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 4828, "upload_time": "2019-08-09T13:29:41", "upload_time_iso_8601": "2019-08-09T13:29:41.023818Z", "url": "https://files.pythonhosted.org/packages/97/73/92dc8726cf2ef95307a1dff73647fd0cb7b2f387aace19ae5b43650a102c/aiorazemax-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:53 2020"}