{"info": {"author": "Chris Caron", "author_email": "lead2gold@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Application Frameworks", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://travis-ci.org/caronc/pynzbget.svg?branch=master)](https://travis-ci.org/caronc/pynzbget)\n[![CodeCov Status](https://codecov.io/github/caronc/pynzbget/branch/master/graph/badge.svg)](https://codecov.io/github/caronc/pynzbget)\n[![Paypal](https://img.shields.io/badge/paypal-donate-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=MHANV39UZNQ5E)<br/>\n\nDescription\n===========\nThis provides a python framework to design NZBGet scripts with. The intent\nwas to greatly simplify the development and debugging process. It was\ninitially designed to work with NZBGet and is backwards compatible with all previous versions (as far back to v11). However it is also compatible with SABnzbd users too!\n\n* It contains a built in meta tag parser to extract content from NZB-Files.\n   _Note: This can only happen if lxml is installed on your system_.\n* It can preform very basic obfuscation support on filenames that can not be\n  interpreted.\n* It creates a common SQLite database (optionally) to additionally write\n  content passed via the set() function. This allows another script to later\n  call get() and retrieve the data set() by another.\n* It prepares logging right out of the box for you, there is no setup required\n* All return codes have been simplified to None/True/False (you can still\n  use the old ones if you want).\n* It handles all of the exception handling. By this I mean, your code can throw\n  an except and it's traceback will be captured gracefully to logging. Then the\n  framework will look after returning a correct failure error code to NZBGet.\n* It provides some very useful functions that are always being re-written\n  inside of every other NZBGet script such as file scanning.\n* It greatly simplifies the handling of environment variables and interaction\n  to and from NZBGet.\n* It can also be adapted to support SABnzbd scripting! Thus any script you write\n  for NZBGet users, you can also tweak to work [with SABnzbd users too](https://github.com/caronc/pynzbget/wiki/SAB_PostProcessScripts)!\n\nDocumentation\n=============\nFor the most up to date information and API, visit the wiki at\n* https://github.com/caronc/pynzbget/wiki\n\nThe entire framework was based on the information found here:\n* [NZBGet](https://nzbget.net)\n* [NZBGet Scripting Documentation](http://nzbget.net/Extension_scripts)\n* [SABnzbd](http://sabnzbd.org/)\n* [SABnzbd Scripting Documentation](https://sabnzbd.org/wiki/scripts/post-processing-scripts)\n\nSimplified Development\n======================\nThe following are some of the functionality that is built in for you:\n\n * __validate()__ - Handle environment checking, correct versioning as well\n                as if the expected configuration variables you specified\n                are present.\n\n * __health_check()__ - Checks the status of the retrieved content, currently\n                this is only useful during Post-Processing.\n\n * __push()__ - Pushes a variables to the NZBGet server.\n\n\n * __set()/get()__ - Hash table get/set attributes that can be set in one script\n                and then later retrieved from another. get() can also\n                be used to fetch content that was previously pushed using\n                the push() tool. You no longer need to work with environment\n                variables. If you enable the SQLite database, set content is\n                put here as well so that it can be retrieved by another\n                script.\n\n * __unset()__    - This allows you to unset values set by set() and get() as well\n                as ones set by push().\n\n * __nzb_set()__  - Similar to the set() function identified above except it\n                is used to build an nzb meta hash table which can be later\n                pushed to the server using push_dnzb().\n\n * __add_nzb()__  - Using the built in API/RPC NZBGet supports, this\n                allows you to specify a path to an NZBFile which you want to\n                enqueue for downloading.\n\n * __nzb_get()__  - Retieves NZB Meta information previously stored.\n\n * __nzb_unset()__ - Removes a variable previously set completely.\n\n * __get_statistics()__ - Using the built in API/RPC NZBGet supports, this\n                retrieves and returns the statistics in an easy to ready\n                dictionary  (_PostProcessScript_ only).\n\n * __get_logs()__ - Using the built in API/RPC NZBGet supports, this\n                retrieves and returns the latest logs.\n\n * __get_files()__ - list all files in a specified directory as well as fetching\n                their details such as filesize, modified date, etc in an\n                easy to reference dictionary.  You can provide a ton of\n                different filters to minimize the content returned. Filters\n                can by a regular expression, file prefixes, and/or suffixes.\n\n * __parse_nzbfile()__ - Parse an NZB-File and extract all of its meta\n                     information from it. lxml must be installed on your\n                     system for this to work correctly.\n\n * __parse_list()__ - Takes a string (or more) as well as lists of strings as\n                  input. It then cleans it up and produces an easy to\n                  manage list by combining all of the results into 1.\n                  Hence: parse_list('.mkv, .avi') returns:\n                      [ '.mkv', '.avi' ]\n\n * __parse_path_list()__ - Very smilar to parse_list() except that it is used\n                  to handle directory paths while cleaning them up at the\n                  same time.\n\n * __parse_bool()__ - Handles all of NZBGet's configuration options such as\n                  'on' and 'off' as well as 'yes' or 'no', or 'True' and\n                  'False'.  It greatly simplifies the checking of these\n                  variables passed in from NZBGet.\n\n\n * __push_guess()__ - You can push a guessit dictionary (or one of your own\n                  that can help identify your release for other scripts\n                  to use later after yours finishes.\n\n * __pull_guess()__ - Pull a previous guess pushed by another script.\n                  why redo grunt work if it's already done for you?\n                  if no previous guess content was pushed, then an\n                  empty dictionary is returned.\n\n * __push_dnzb()__ - You can push all nzb meta information onbtained to\n                  the NZBGet server as DNZB_ meta tags.\n\n * __pull_dnzb()__ - Pull all DNZB_ meta tags issued by the server and\n                 return their values in a dictionary.\n                  if no  DNZB_ (NZB Meta information) was found, then an\n                  empty dictionary is returned instead.\n\n * __deobfuscate()__ - Take a filename and return it in a deobfuscated to the\n                   best of its ability. (_PostProcessScript_ only)\n\n * __is_unique_instance()__ - Allows you to ensure your instance of your script is\n                  unique. This is useful for Scheduled scripts which can be\n                  called and then run concurrently with NZBGet.\nHow To Use\n==========\n* Developers are only required to define a class that inherits the NZBGet class\nthat identifies what they are attempting to write (_ScanScript_,\n_PostProcessScript_, etc.).\n\n* Then you write all of your code a the _main()_ you must define.\n\nPost Process Script Example\n===========================\n```python\n#############################################################################\n### NZBGET POST-PROCESSING SCRIPT                                         ###\n#\n# Author: Your Name Goes Here <your@email.address>\n#\n# Describe your Post-Process Script here\n#\n\n############################################################################\n### OPTIONS                                                              ###\n\n#\n# Enable NZBGet debug logging (yes, no)\n# Debug=no\n#\n\n### NZBGET POST-PROCESSING SCRIPT                                         ###\n#############################################################################\n\nfrom nzbget import PostProcessScript\n\n# Now define your class while inheriting the rest\nclass MyPostProcessScript(PostProcessScript):\n    def main(self, *args, **kwargs):\n        # write all of your code here you would have otherwise put in the\n        # script\n\n        if not self.validate():\n            # No need to document a failure, validate will do that\n            # on the reason it failed anyway\n            return False\n\n        # All system environment variables (NZBOP_.*) as well as Post\n        # Process script specific content (NZBPP_.*)\n        # following dictionary (without the NZBOP_ or NZBPP_ prefix):\n        print 'DIRECTORY %s' self.get('DIRECTORY')\n        print 'NZBNAME %s' self.get('NZBNAME')\n        print 'NZBFILENAME %s' self.get('NZBFILENAME')\n        print 'CATEGORY %s' self.get('CATEGORY')\n        print 'TOTALSTATUS %s' self.get('TOTALSTATUS')\n        print 'STATUS %s' self.get('STATUS')\n        print 'SCRIPTSTATUS %s' self.get('SCRIPTSTATUS')\n\n        # Set any variable you want by any key. Note that if you use\n        # keys that were defined by the system (such as CATEGORY, DIRECTORY,\n        # etc, you may have some undesirable results. Try to avoid reusing\n        # system variables already defined (identified above):\n        self.set('MY_KEY', 'MY_VALUE')\n\n        # You can fetch it back; this will also set an entry in  the\n        # sqlite database for each hash references that can be pulled from\n        # another script that simply calls self.get('MY_VAR')\n        print self.get('MY_KEY') # prints MY_VALUE\n\n        # You can also use push() which is similar to set()\n        # except that it interacts with the NZBGet Server and does not use\n        # the sqlite database. This can only be reached across other\n        # scripts if the calling application is NZBGet itself\n        self.push('ANOTHER_KEY', 'ANOTHER_VALUE')\n\n        # You can still however locally retrieve what you set using push()\n        # with the get() function\n        print self.get('ANOTHER_KEY') # prints ANOTHER_VALUE\n\n        # Your script configuration files (NZBPP_.*) are here in this\n        # dictionary (again without the NZBPP_ prefix):\n        # assume you defined `Debug=no` in the first 10K of your PostProcessScript\n        # NZBGet translates this to `NZBPP_DEBUG` which can be retrieved\n        # as follows:\n        print 'DEBUG %s' self.get('DEBUG')\n\n        # Returns have been made easy. Just return:\n        #   * True if everything was successful\n        #   * False if there was a problem\n        #   * None if you want to report that you've just gracefully\n                  skipped processing (this is better then False)\n                  in some circumstances. This is neither a failure or a\n                  success status.\n\n        # Feel free to use the actual exit codes as well defined by\n        # NZBGet on their website. They have also been defined here\n        # from nzbget import EXIT_CODE\n\n        return True\n\n# Call your script as follows:\nif __name__ == \"__main__\":\n    from sys import exit\n\n    # Create an instance of your Script\n    ppscript = MyPostProcessScript()\n\n    # call run() and exit() using it's returned value\n    exit(ppscript.run())\n```\n\nScan Script Example\n===================\n```python\n############################################################################\n### NZBGET SCAN SCRIPT                                                   ###\n#\n# Author: Your Name Goes Here <your@email.address>\n#\n# Describe your Scan Script here\n#\n\n############################################################################\n### OPTIONS                                                              ###\n\n#\n# Enable NZBGet debug logging (yes, no)\n# Debug=no\n#\n\n### NZBGET SCAN SCRIPT                                                   ###\n############################################################################\n\nfrom nzbget import ScanScript\n\n# Now define your class while inheriting the rest\nclass MyScanScript(ScanScript):\n    def main(self, *args, **kwargs):\n        # write all of your code here you would have otherwise put in the\n        # script\n\n        if not self.validate():\n            # No need to document a failure, validate will do that\n            # on the reason it failed anyway\n            return False\n\n        # All system environment variables (NZBOP_.*) as well as Post\n        # Process script specific content (NZBNP_.*)\n        # following dictionary (without the NZBOP_ or NZBNP_ prefix):\n        print 'DIRECTORY %s' self.get('DIRECTORY')\n        print 'FILENAME %s' self.get('FILENAME')\n        print 'NZBNAME %s' self.get('NZBNAME')\n        print 'CATEGORY %s' self.get('CATEGORY')\n        print 'PRIORITY %s' self.get('PRIORITY')\n        print 'TOP %s' self.get('TOP')\n        print 'PAUSED %s' self.get('PAUSED')\n\n        return True\n\n# Call your script as follows:\nif __name__ == \"__main__\":\n    from sys import exit\n\n    # Create an instance of your Script\n    scanscript = MyScanScript()\n\n    # call run() and exit() using it's returned value\n    exit(scanscript.run())\n```\n\nScheduler Script Example\n=======================\n```python\n############################################################################\n### NZBGET SCHEDULER SCRIPT                                               ###\n#\n# Describe your Schedule Script here\n# Author: Your Name Goes Here <your@email.address>\n#\n\n############################################################################\n### OPTIONS                                                              ###\n\n#\n# Enable NZBGet debug logging (yes, no)\n# Debug=no\n#\n\n### NZBGET SCHEDULER SCRIPT                                              ###\n############################################################################\n\nfrom nzbget import SchedulerScript\n\n# Now define your class while inheriting the rest\nclass MySchedulerScript(SchedulerScript):\n    def main(self, *args, **kwargs):\n\n        # Version Checking, Environment Variables Present, etc\n        if not self.validate():\n            # No need to document a failure, validate will do that\n            # on the reason it failed anyway\n            return False\n\n        # write all of your code here you would have otherwise put in the\n        # script\n\n        # All system environment variables (NZBOP_.*) as well as Post\n        # Process script specific content (NZBSP_.*)\n        # following dictionary (without the NZBOP_ or NZBSP_ prefix):\n        print 'DESTDIR %s' self.get('DESTDIR')\n\n        return True\n# Call your script as follows:\nif __name__ == \"__main__\":\n    from sys import exit\n\n    # Create an instance of your Script\n    myscript = MySchedulerScript()\n\n    # call run() and exit() using it's returned value\n    exit(myscript.run())\n```\n\nMultiScript Example\n=======================\n```python\n############################################################################\n### NZBGET POST-PROCESSING/SCHEDULER SCRIPT                              ###\n#\n# Describe your Multi Script here\n#\n# Author: Your Name Goes Here <your@email.address>\n#\n\n############################################################################\n### OPTIONS                                                              ###\n\n#\n# Enable NZBGet debug logging (yes, no)\n# Debug=no\n#\n\n### NZBGET POST-PROCESSING/SCHEDULER SCRIPT                              ###\n############################################################################\n\nfrom nzbget import PostProcessScript\nfrom nzbget import SchedulerScript\n\n# Now define your class while inheriting the rest\nclass MyMultiScript(PostProcessScript, SchedulerScript):\n\n    def postprocess_main(self, *args, **kwargs):\n\n        # Version Checking, Environment Variables Present, etc\n        if not self.validate():\n            # No need to document a failure, validate will do that\n            # on the reason it failed anyway\n            return False\n\n        # write your main function for your Post Processing\n\n        return True\n\n    def scheduler_main(self, *args, **kwargs):\n\n        # Version Checking, Environment Variables Present, etc\n        if not self.validate():\n            # No need to document a failure, validate will do that\n            # on the reason it failed anyway\n            return False\n\n        # write your main function for your Post Processing\n\n        return True\n\n# Call your script as follows:\nif __name__ == \"__main__\":\n    from sys import exit\n\n    # Create an instance of your Script\n    myscript = MyMultiScript()\n\n    # call run() and exit() using it's returned value\n    exit(myscript.run())\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/caronc/pynzbget", "keywords": "nzbget,postprocess,framework,scripts,nzb,sabnzbd", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "pynzbget", "package_url": "https://pypi.org/project/pynzbget/", "platform": "", "project_url": "https://pypi.org/project/pynzbget/", "project_urls": {"Homepage": "http://github.com/caronc/pynzbget"}, "release_url": "https://pypi.org/project/pynzbget/0.6.4/", "requires_dist": ["lxml (>=2.7)", "six"], "requires_python": ">=2.7", "summary": "Provides a framework for NZBGet and SABnzbd scriptdevelopment.", "version": "0.6.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/caronc/pynzbget\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a7f36a291ecd4469495b528fa3d371fd6549719/68747470733a2f2f7472617669732d63692e6f72672f6361726f6e632f70796e7a626765742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/caronc/pynzbget\" rel=\"nofollow\"><img alt=\"CodeCov Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3595561625e66c9b120a8373bb478882f7a40b97/68747470733a2f2f636f6465636f762e696f2f6769746875622f6361726f6e632f70796e7a626765742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=MHANV39UZNQ5E\" rel=\"nofollow\"><img alt=\"Paypal\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4461db09552cb8aaa07e15c31fffb6cf2fa1a520/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617970616c2d646f6e6174652d677265656e2e737667\"></a><br></p>\n<h1>Description</h1>\n<p>This provides a python framework to design NZBGet scripts with. The intent\nwas to greatly simplify the development and debugging process. It was\ninitially designed to work with NZBGet and is backwards compatible with all previous versions (as far back to v11). However it is also compatible with SABnzbd users too!</p>\n<ul>\n<li>It contains a built in meta tag parser to extract content from NZB-Files.\n<em>Note: This can only happen if lxml is installed on your system</em>.</li>\n<li>It can preform very basic obfuscation support on filenames that can not be\ninterpreted.</li>\n<li>It creates a common SQLite database (optionally) to additionally write\ncontent passed via the set() function. This allows another script to later\ncall get() and retrieve the data set() by another.</li>\n<li>It prepares logging right out of the box for you, there is no setup required</li>\n<li>All return codes have been simplified to None/True/False (you can still\nuse the old ones if you want).</li>\n<li>It handles all of the exception handling. By this I mean, your code can throw\nan except and it's traceback will be captured gracefully to logging. Then the\nframework will look after returning a correct failure error code to NZBGet.</li>\n<li>It provides some very useful functions that are always being re-written\ninside of every other NZBGet script such as file scanning.</li>\n<li>It greatly simplifies the handling of environment variables and interaction\nto and from NZBGet.</li>\n<li>It can also be adapted to support SABnzbd scripting! Thus any script you write\nfor NZBGet users, you can also tweak to work <a href=\"https://github.com/caronc/pynzbget/wiki/SAB_PostProcessScripts\" rel=\"nofollow\">with SABnzbd users too</a>!</li>\n</ul>\n<h1>Documentation</h1>\n<p>For the most up to date information and API, visit the wiki at</p>\n<ul>\n<li><a href=\"https://github.com/caronc/pynzbget/wiki\" rel=\"nofollow\">https://github.com/caronc/pynzbget/wiki</a></li>\n</ul>\n<p>The entire framework was based on the information found here:</p>\n<ul>\n<li><a href=\"https://nzbget.net\" rel=\"nofollow\">NZBGet</a></li>\n<li><a href=\"http://nzbget.net/Extension_scripts\" rel=\"nofollow\">NZBGet Scripting Documentation</a></li>\n<li><a href=\"http://sabnzbd.org/\" rel=\"nofollow\">SABnzbd</a></li>\n<li><a href=\"https://sabnzbd.org/wiki/scripts/post-processing-scripts\" rel=\"nofollow\">SABnzbd Scripting Documentation</a></li>\n</ul>\n<h1>Simplified Development</h1>\n<p>The following are some of the functionality that is built in for you:</p>\n<ul>\n<li>\n<p><strong>validate()</strong> - Handle environment checking, correct versioning as well\nas if the expected configuration variables you specified\nare present.</p>\n</li>\n<li>\n<p><strong>health_check()</strong> - Checks the status of the retrieved content, currently\nthis is only useful during Post-Processing.</p>\n</li>\n<li>\n<p><strong>push()</strong> - Pushes a variables to the NZBGet server.</p>\n</li>\n<li>\n<p><strong>set()/get()</strong> - Hash table get/set attributes that can be set in one script\nand then later retrieved from another. get() can also\nbe used to fetch content that was previously pushed using\nthe push() tool. You no longer need to work with environment\nvariables. If you enable the SQLite database, set content is\nput here as well so that it can be retrieved by another\nscript.</p>\n</li>\n<li>\n<p><strong>unset()</strong>    - This allows you to unset values set by set() and get() as well\nas ones set by push().</p>\n</li>\n<li>\n<p><strong>nzb_set()</strong>  - Similar to the set() function identified above except it\nis used to build an nzb meta hash table which can be later\npushed to the server using push_dnzb().</p>\n</li>\n<li>\n<p><strong>add_nzb()</strong>  - Using the built in API/RPC NZBGet supports, this\nallows you to specify a path to an NZBFile which you want to\nenqueue for downloading.</p>\n</li>\n<li>\n<p><strong>nzb_get()</strong>  - Retieves NZB Meta information previously stored.</p>\n</li>\n<li>\n<p><strong>nzb_unset()</strong> - Removes a variable previously set completely.</p>\n</li>\n<li>\n<p><strong>get_statistics()</strong> - Using the built in API/RPC NZBGet supports, this\nretrieves and returns the statistics in an easy to ready\ndictionary  (<em>PostProcessScript</em> only).</p>\n</li>\n<li>\n<p><strong>get_logs()</strong> - Using the built in API/RPC NZBGet supports, this\nretrieves and returns the latest logs.</p>\n</li>\n<li>\n<p><strong>get_files()</strong> - list all files in a specified directory as well as fetching\ntheir details such as filesize, modified date, etc in an\neasy to reference dictionary.  You can provide a ton of\ndifferent filters to minimize the content returned. Filters\ncan by a regular expression, file prefixes, and/or suffixes.</p>\n</li>\n<li>\n<p><strong>parse_nzbfile()</strong> - Parse an NZB-File and extract all of its meta\ninformation from it. lxml must be installed on your\nsystem for this to work correctly.</p>\n</li>\n<li>\n<p><strong>parse_list()</strong> - Takes a string (or more) as well as lists of strings as\ninput. It then cleans it up and produces an easy to\nmanage list by combining all of the results into 1.\nHence: parse_list('.mkv, .avi') returns:\n[ '.mkv', '.avi' ]</p>\n</li>\n<li>\n<p><strong>parse_path_list()</strong> - Very smilar to parse_list() except that it is used\nto handle directory paths while cleaning them up at the\nsame time.</p>\n</li>\n<li>\n<p><strong>parse_bool()</strong> - Handles all of NZBGet's configuration options such as\n'on' and 'off' as well as 'yes' or 'no', or 'True' and\n'False'.  It greatly simplifies the checking of these\nvariables passed in from NZBGet.</p>\n</li>\n<li>\n<p><strong>push_guess()</strong> - You can push a guessit dictionary (or one of your own\nthat can help identify your release for other scripts\nto use later after yours finishes.</p>\n</li>\n<li>\n<p><strong>pull_guess()</strong> - Pull a previous guess pushed by another script.\nwhy redo grunt work if it's already done for you?\nif no previous guess content was pushed, then an\nempty dictionary is returned.</p>\n</li>\n<li>\n<p><strong>push_dnzb()</strong> - You can push all nzb meta information onbtained to\nthe NZBGet server as DNZB_ meta tags.</p>\n</li>\n<li>\n<p><strong>pull_dnzb()</strong> - Pull all DNZB_ meta tags issued by the server and\nreturn their values in a dictionary.\nif no  DNZB_ (NZB Meta information) was found, then an\nempty dictionary is returned instead.</p>\n</li>\n<li>\n<p><strong>deobfuscate()</strong> - Take a filename and return it in a deobfuscated to the\nbest of its ability. (<em>PostProcessScript</em> only)</p>\n</li>\n<li>\n<p><strong>is_unique_instance()</strong> - Allows you to ensure your instance of your script is\nunique. This is useful for Scheduled scripts which can be\ncalled and then run concurrently with NZBGet.\nHow To Use\n==========</p>\n</li>\n<li>\n<p>Developers are only required to define a class that inherits the NZBGet class\nthat identifies what they are attempting to write (<em>ScanScript</em>,\n<em>PostProcessScript</em>, etc.).</p>\n</li>\n<li>\n<p>Then you write all of your code a the <em>main()</em> you must define.</p>\n</li>\n</ul>\n<h1>Post Process Script Example</h1>\n<pre><span class=\"c1\">#############################################################################</span>\n<span class=\"c1\">### NZBGET POST-PROCESSING SCRIPT                                         ###</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Author: Your Name Goes Here &lt;your@email.address&gt;</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Describe your Post-Process Script here</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\">############################################################################</span>\n<span class=\"c1\">### OPTIONS                                                              ###</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Enable NZBGet debug logging (yes, no)</span>\n<span class=\"c1\"># Debug=no</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\">### NZBGET POST-PROCESSING SCRIPT                                         ###</span>\n<span class=\"c1\">#############################################################################</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nzbget</span> <span class=\"kn\">import</span> <span class=\"n\">PostProcessScript</span>\n\n<span class=\"c1\"># Now define your class while inheriting the rest</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyPostProcessScript</span><span class=\"p\">(</span><span class=\"n\">PostProcessScript</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># write all of your code here you would have otherwise put in the</span>\n        <span class=\"c1\"># script</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n            <span class=\"c1\"># No need to document a failure, validate will do that</span>\n            <span class=\"c1\"># on the reason it failed anyway</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"c1\"># All system environment variables (NZBOP_.*) as well as Post</span>\n        <span class=\"c1\"># Process script specific content (NZBPP_.*)</span>\n        <span class=\"c1\"># following dictionary (without the NZBOP_ or NZBPP_ prefix):</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'DIRECTORY </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'DIRECTORY'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'NZBNAME </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'NZBNAME'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'NZBFILENAME </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'NZBFILENAME'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'CATEGORY </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'CATEGORY'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'TOTALSTATUS </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'TOTALSTATUS'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'STATUS </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'STATUS'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'SCRIPTSTATUS </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'SCRIPTSTATUS'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Set any variable you want by any key. Note that if you use</span>\n        <span class=\"c1\"># keys that were defined by the system (such as CATEGORY, DIRECTORY,</span>\n        <span class=\"c1\"># etc, you may have some undesirable results. Try to avoid reusing</span>\n        <span class=\"c1\"># system variables already defined (identified above):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'MY_KEY'</span><span class=\"p\">,</span> <span class=\"s1\">'MY_VALUE'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># You can fetch it back; this will also set an entry in  the</span>\n        <span class=\"c1\"># sqlite database for each hash references that can be pulled from</span>\n        <span class=\"c1\"># another script that simply calls self.get('MY_VAR')</span>\n        <span class=\"nb\">print</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'MY_KEY'</span><span class=\"p\">)</span> <span class=\"c1\"># prints MY_VALUE</span>\n\n        <span class=\"c1\"># You can also use push() which is similar to set()</span>\n        <span class=\"c1\"># except that it interacts with the NZBGet Server and does not use</span>\n        <span class=\"c1\"># the sqlite database. This can only be reached across other</span>\n        <span class=\"c1\"># scripts if the calling application is NZBGet itself</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s1\">'ANOTHER_KEY'</span><span class=\"p\">,</span> <span class=\"s1\">'ANOTHER_VALUE'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># You can still however locally retrieve what you set using push()</span>\n        <span class=\"c1\"># with the get() function</span>\n        <span class=\"nb\">print</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'ANOTHER_KEY'</span><span class=\"p\">)</span> <span class=\"c1\"># prints ANOTHER_VALUE</span>\n\n        <span class=\"c1\"># Your script configuration files (NZBPP_.*) are here in this</span>\n        <span class=\"c1\"># dictionary (again without the NZBPP_ prefix):</span>\n        <span class=\"c1\"># assume you defined `Debug=no` in the first 10K of your PostProcessScript</span>\n        <span class=\"c1\"># NZBGet translates this to `NZBPP_DEBUG` which can be retrieved</span>\n        <span class=\"c1\"># as follows:</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'DEBUG </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Returns have been made easy. Just return:</span>\n        <span class=\"c1\">#   * True if everything was successful</span>\n        <span class=\"c1\">#   * False if there was a problem</span>\n        <span class=\"c1\">#   * None if you want to report that you've just gracefully</span>\n                  <span class=\"n\">skipped</span> <span class=\"n\">processing</span> <span class=\"p\">(</span><span class=\"n\">this</span> <span class=\"ow\">is</span> <span class=\"n\">better</span> <span class=\"n\">then</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n                  <span class=\"ow\">in</span> <span class=\"n\">some</span> <span class=\"n\">circumstances</span><span class=\"o\">.</span> <span class=\"n\">This</span> <span class=\"ow\">is</span> <span class=\"n\">neither</span> <span class=\"n\">a</span> <span class=\"n\">failure</span> <span class=\"ow\">or</span> <span class=\"n\">a</span>\n                  <span class=\"n\">success</span> <span class=\"n\">status</span><span class=\"o\">.</span>\n\n        <span class=\"c1\"># Feel free to use the actual exit codes as well defined by</span>\n        <span class=\"c1\"># NZBGet on their website. They have also been defined here</span>\n        <span class=\"c1\"># from nzbget import EXIT_CODE</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Call your script as follows:</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sys</span> <span class=\"kn\">import</span> <span class=\"n\">exit</span>\n\n    <span class=\"c1\"># Create an instance of your Script</span>\n    <span class=\"n\">ppscript</span> <span class=\"o\">=</span> <span class=\"n\">MyPostProcessScript</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># call run() and exit() using it's returned value</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">ppscript</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<h1>Scan Script Example</h1>\n<pre><span class=\"c1\">############################################################################</span>\n<span class=\"c1\">### NZBGET SCAN SCRIPT                                                   ###</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Author: Your Name Goes Here &lt;your@email.address&gt;</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Describe your Scan Script here</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\">############################################################################</span>\n<span class=\"c1\">### OPTIONS                                                              ###</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Enable NZBGet debug logging (yes, no)</span>\n<span class=\"c1\"># Debug=no</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\">### NZBGET SCAN SCRIPT                                                   ###</span>\n<span class=\"c1\">############################################################################</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nzbget</span> <span class=\"kn\">import</span> <span class=\"n\">ScanScript</span>\n\n<span class=\"c1\"># Now define your class while inheriting the rest</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyScanScript</span><span class=\"p\">(</span><span class=\"n\">ScanScript</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># write all of your code here you would have otherwise put in the</span>\n        <span class=\"c1\"># script</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n            <span class=\"c1\"># No need to document a failure, validate will do that</span>\n            <span class=\"c1\"># on the reason it failed anyway</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"c1\"># All system environment variables (NZBOP_.*) as well as Post</span>\n        <span class=\"c1\"># Process script specific content (NZBNP_.*)</span>\n        <span class=\"c1\"># following dictionary (without the NZBOP_ or NZBNP_ prefix):</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'DIRECTORY </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'DIRECTORY'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'FILENAME </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'FILENAME'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'NZBNAME </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'NZBNAME'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'CATEGORY </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'CATEGORY'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'PRIORITY </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'PRIORITY'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'TOP </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'TOP'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'PAUSED </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'PAUSED'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Call your script as follows:</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sys</span> <span class=\"kn\">import</span> <span class=\"n\">exit</span>\n\n    <span class=\"c1\"># Create an instance of your Script</span>\n    <span class=\"n\">scanscript</span> <span class=\"o\">=</span> <span class=\"n\">MyScanScript</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># call run() and exit() using it's returned value</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">scanscript</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<h1>Scheduler Script Example</h1>\n<pre><span class=\"c1\">############################################################################</span>\n<span class=\"c1\">### NZBGET SCHEDULER SCRIPT                                               ###</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Describe your Schedule Script here</span>\n<span class=\"c1\"># Author: Your Name Goes Here &lt;your@email.address&gt;</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\">############################################################################</span>\n<span class=\"c1\">### OPTIONS                                                              ###</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Enable NZBGet debug logging (yes, no)</span>\n<span class=\"c1\"># Debug=no</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\">### NZBGET SCHEDULER SCRIPT                                              ###</span>\n<span class=\"c1\">############################################################################</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nzbget</span> <span class=\"kn\">import</span> <span class=\"n\">SchedulerScript</span>\n\n<span class=\"c1\"># Now define your class while inheriting the rest</span>\n<span class=\"k\">class</span> <span class=\"nc\">MySchedulerScript</span><span class=\"p\">(</span><span class=\"n\">SchedulerScript</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Version Checking, Environment Variables Present, etc</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n            <span class=\"c1\"># No need to document a failure, validate will do that</span>\n            <span class=\"c1\"># on the reason it failed anyway</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"c1\"># write all of your code here you would have otherwise put in the</span>\n        <span class=\"c1\"># script</span>\n\n        <span class=\"c1\"># All system environment variables (NZBOP_.*) as well as Post</span>\n        <span class=\"c1\"># Process script specific content (NZBSP_.*)</span>\n        <span class=\"c1\"># following dictionary (without the NZBOP_ or NZBSP_ prefix):</span>\n        <span class=\"nb\">print</span> <span class=\"s1\">'DESTDIR </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'DESTDIR'</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n<span class=\"c1\"># Call your script as follows:</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sys</span> <span class=\"kn\">import</span> <span class=\"n\">exit</span>\n\n    <span class=\"c1\"># Create an instance of your Script</span>\n    <span class=\"n\">myscript</span> <span class=\"o\">=</span> <span class=\"n\">MySchedulerScript</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># call run() and exit() using it's returned value</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">myscript</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<h1>MultiScript Example</h1>\n<pre><span class=\"c1\">############################################################################</span>\n<span class=\"c1\">### NZBGET POST-PROCESSING/SCHEDULER SCRIPT                              ###</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Describe your Multi Script here</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Author: Your Name Goes Here &lt;your@email.address&gt;</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\">############################################################################</span>\n<span class=\"c1\">### OPTIONS                                                              ###</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Enable NZBGet debug logging (yes, no)</span>\n<span class=\"c1\"># Debug=no</span>\n<span class=\"c1\">#</span>\n\n<span class=\"c1\">### NZBGET POST-PROCESSING/SCHEDULER SCRIPT                              ###</span>\n<span class=\"c1\">############################################################################</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">nzbget</span> <span class=\"kn\">import</span> <span class=\"n\">PostProcessScript</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nzbget</span> <span class=\"kn\">import</span> <span class=\"n\">SchedulerScript</span>\n\n<span class=\"c1\"># Now define your class while inheriting the rest</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyMultiScript</span><span class=\"p\">(</span><span class=\"n\">PostProcessScript</span><span class=\"p\">,</span> <span class=\"n\">SchedulerScript</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">postprocess_main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Version Checking, Environment Variables Present, etc</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n            <span class=\"c1\"># No need to document a failure, validate will do that</span>\n            <span class=\"c1\"># on the reason it failed anyway</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"c1\"># write your main function for your Post Processing</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">scheduler_main</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># Version Checking, Environment Variables Present, etc</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n            <span class=\"c1\"># No need to document a failure, validate will do that</span>\n            <span class=\"c1\"># on the reason it failed anyway</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n        <span class=\"c1\"># write your main function for your Post Processing</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"c1\"># Call your script as follows:</span>\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sys</span> <span class=\"kn\">import</span> <span class=\"n\">exit</span>\n\n    <span class=\"c1\"># Create an instance of your Script</span>\n    <span class=\"n\">myscript</span> <span class=\"o\">=</span> <span class=\"n\">MyMultiScript</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># call run() and exit() using it's returned value</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">myscript</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 5864727, "releases": {"0.3.0": [], "0.3.1": [], "0.3.2": [], "0.5.1": [{"comment_text": "", "digests": {"md5": "b9c919ca21d16064dee2232ec60f39b3", "sha256": "1b442ef1d871bb09585294203abd7f105ae40ce0244b310b8d0b223e7a40c67a"}, "downloads": -1, "filename": "pynzbget-0.5.1-py27-none-any.whl", "has_sig": false, "md5_digest": "b9c919ca21d16064dee2232ec60f39b3", "packagetype": "bdist_wheel", "python_version": "py27", "requires_python": ">=2.6, <3", "size": 74012, "upload_time": "2017-07-10T01:36:54", "upload_time_iso_8601": "2017-07-10T01:36:54.224733Z", "url": "https://files.pythonhosted.org/packages/f5/8d/bb5a13d1ac4f3eea6c716b5c98866f2235318a792b624c506a529ea15d2e/pynzbget-0.5.1-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4630d05cd0faa8125b83cb51639238f6", "sha256": "3a984af2a2c6ddaa36aa4ea48d48bbb2c0a80b1b8fb2ee8af13aa8ac58989150"}, "downloads": -1, "filename": "pynzbget-0.5.1.tar.gz", "has_sig": false, "md5_digest": "4630d05cd0faa8125b83cb51639238f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, <3", "size": 51631, "upload_time": "2017-07-10T01:36:55", "upload_time_iso_8601": "2017-07-10T01:36:55.762522Z", "url": "https://files.pythonhosted.org/packages/6c/66/3c42a6fb40af21fe8772899734c9fc0b2e38373b1c67526162bcf19fa3e9/pynzbget-0.5.1.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "a46f65573efc9e869a60fa25caaba1a1", "sha256": "fde7d0f154e044045f2715986bad150962e676e3e91b7b012d70e0cb09d29baf"}, "downloads": -1, "filename": "pynzbget-0.6.1-py27-none-any.whl", "has_sig": false, "md5_digest": "a46f65573efc9e869a60fa25caaba1a1", "packagetype": "bdist_wheel", "python_version": "py27", "requires_python": ">=2.6, <3", "size": 82488, "upload_time": "2017-10-29T15:52:59", "upload_time_iso_8601": "2017-10-29T15:52:59.084814Z", "url": "https://files.pythonhosted.org/packages/6c/a9/e5f46d8e1cfb315a141b2a5209df31efefb8087bde9ebfa54be45cdf7b43/pynzbget-0.6.1-py27-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcb67b6314f1cb9e93f8613ed5a9a4c5", "sha256": "736a4fda2dfeedfa3c52f5df9563bbed73391bb77d319225ec7a36fee2548795"}, "downloads": -1, "filename": "pynzbget-0.6.1.tar.gz", "has_sig": false, "md5_digest": "fcb67b6314f1cb9e93f8613ed5a9a4c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, <3", "size": 92749, "upload_time": "2017-10-29T15:53:01", "upload_time_iso_8601": "2017-10-29T15:53:01.271757Z", "url": "https://files.pythonhosted.org/packages/0e/98/860923667f54124164274a95128800fcf45ead8386ed63a206374340d8ea/pynzbget-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "19bd79bd9ceb1b2a62eb80185f3bfc57", "sha256": "12008c35e348e1492ed674fca33b0accd8d82ab6e8051ac0711764b873fc28c8"}, "downloads": -1, "filename": "pynzbget-0.6.2-py2-none-any.whl", "has_sig": false, "md5_digest": "19bd79bd9ceb1b2a62eb80185f3bfc57", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.6, <3", "size": 77690, "upload_time": "2019-03-10T19:02:26", "upload_time_iso_8601": "2019-03-10T19:02:26.158338Z", "url": "https://files.pythonhosted.org/packages/b9/0b/13b749257367d65f7a803a701dd9a8e64e781fa9815064350bf4ed2061a1/pynzbget-0.6.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfa8aa2f8137ab3f31b8cc28923de696", "sha256": "bd2fc22778ba7bfe49cfb895b6826e146811347721ef1145152d2248988c8d84"}, "downloads": -1, "filename": "pynzbget-0.6.2.tar.gz", "has_sig": false, "md5_digest": "cfa8aa2f8137ab3f31b8cc28923de696", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, <3", "size": 95800, "upload_time": "2019-03-10T19:02:28", "upload_time_iso_8601": "2019-03-10T19:02:28.004400Z", "url": "https://files.pythonhosted.org/packages/f6/a1/3ea70364f1377699a8602b22213f23ff263dd86442cce2503fbfe1a7246e/pynzbget-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "18969eb6ff3f1aa3c09ad03ef0d0cdcc", "sha256": "1c5344f3f4cb5c4f708303c234af33a952a30c55a61f25b993da178294f6975b"}, "downloads": -1, "filename": "pynzbget-0.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "18969eb6ff3f1aa3c09ad03ef0d0cdcc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 90410, "upload_time": "2019-06-14T19:01:40", "upload_time_iso_8601": "2019-06-14T19:01:40.151130Z", "url": "https://files.pythonhosted.org/packages/b5/26/2336594ecc716c04471f76057e5987e01df852e0af9973168354919468eb/pynzbget-0.6.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06814691f019e69f70a56b7e38500735", "sha256": "d670c4331e4f719f2bd49ec8dddf03533e69cae85617ddb59c62ab84846379bf"}, "downloads": -1, "filename": "pynzbget-0.6.3.tar.gz", "has_sig": false, "md5_digest": "06814691f019e69f70a56b7e38500735", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 96430, "upload_time": "2019-06-14T19:01:41", "upload_time_iso_8601": "2019-06-14T19:01:41.846486Z", "url": "https://files.pythonhosted.org/packages/ad/1f/de9874df9264f63e90f794a0ac99d720fda60c0a5b2234208c7a17322de7/pynzbget-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "6356ad231f970c0865eaa68eb3bc7384", "sha256": "8065d6000c7a8bf2379087f9dbb4e92df1aed16c2fd9751b27a3b2362b22d7b8"}, "downloads": -1, "filename": "pynzbget-0.6.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6356ad231f970c0865eaa68eb3bc7384", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 90531, "upload_time": "2019-09-21T00:35:02", "upload_time_iso_8601": "2019-09-21T00:35:02.369623Z", "url": "https://files.pythonhosted.org/packages/04/44/09f0aa7bddec1dd92282f6f1f4f10d077d1c47a57a959301eaf7248bbc24/pynzbget-0.6.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e77bf04c9d2e285b1320d9787354f82", "sha256": "0010afccb74b20db961b02eb9b5f22c13d31614e47f27e49fd24e0e42920779e"}, "downloads": -1, "filename": "pynzbget-0.6.4.tar.gz", "has_sig": false, "md5_digest": "8e77bf04c9d2e285b1320d9787354f82", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 96625, "upload_time": "2019-09-21T00:35:04", "upload_time_iso_8601": "2019-09-21T00:35:04.407968Z", "url": "https://files.pythonhosted.org/packages/95/c3/7ac6a5a3aa19b7922b640c3afbda4b57a864194a7b29a72d40f844a28285/pynzbget-0.6.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6356ad231f970c0865eaa68eb3bc7384", "sha256": "8065d6000c7a8bf2379087f9dbb4e92df1aed16c2fd9751b27a3b2362b22d7b8"}, "downloads": -1, "filename": "pynzbget-0.6.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6356ad231f970c0865eaa68eb3bc7384", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7", "size": 90531, "upload_time": "2019-09-21T00:35:02", "upload_time_iso_8601": "2019-09-21T00:35:02.369623Z", "url": "https://files.pythonhosted.org/packages/04/44/09f0aa7bddec1dd92282f6f1f4f10d077d1c47a57a959301eaf7248bbc24/pynzbget-0.6.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e77bf04c9d2e285b1320d9787354f82", "sha256": "0010afccb74b20db961b02eb9b5f22c13d31614e47f27e49fd24e0e42920779e"}, "downloads": -1, "filename": "pynzbget-0.6.4.tar.gz", "has_sig": false, "md5_digest": "8e77bf04c9d2e285b1320d9787354f82", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 96625, "upload_time": "2019-09-21T00:35:04", "upload_time_iso_8601": "2019-09-21T00:35:04.407968Z", "url": "https://files.pythonhosted.org/packages/95/c3/7ac6a5a3aa19b7922b640c3afbda4b57a864194a7b29a72d40f844a28285/pynzbget-0.6.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:55 2020"}