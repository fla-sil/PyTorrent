{"info": {"author": "Ankur Srivastava", "author_email": "ankur.srivastava@email.de", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# file-healthchecker\n\nUse this application to monitor your long running \"non-web\" application's health check.\n\n[![Build Status](https://travis-ci.com/ansrivas/healthcheck.svg?token=hM6V8mr5fwQPseiFSYVi&branch=master)](https://travis-ci.com/ansrivas/healthcheck)\n\n## Installation\n\n### pip\n\n```\npip install file-healthchecker\n```\n\n## Use Case\n\nLets say we have a service which needs to perform some action every x-duration.\nIn python-world we would simply run it inside a while loop and invoke it every x-minutes.\n\nNow define an environment var `ENV_HEALTH_CHECK_FILE` which will represent a file creation\nin case the app is healthy. for e.g. `export ENV_HEALTH_CHECK_FILE=/tmp/myapp.is.healthy`\n\nThis following snippet will perform following tasks:\n\n- Every invocation of my_application will first remove a health-check file.\n- Run the application\n- NOTE: Raise an exception in case the application is failing. Handle it outside, as show in the given example.\n- If no exception is raised, the decorator will create a file defined by the env-var `ENV_HEALTH_CHECK_FILE`\n\n```python\nfrom file_healthchecker import decorator_success\nimport time\n\n@decorator_success\ndef my_application():\n    ... doing lots of work\n    ... more work\n    # in case of failure, raise exception\n    return True\n\nif __name__ == \"__main__\":\n    while True:\n        try:\n            my_application()\n        except Exception:\n            pass\n        time.sleep(10)\n\n```\nWith the installation another cmd-app also gets installed - `checkhealth`.\n\nHow to check application's health?\n- One can simply run `ENV_HEALTH_CHECK_FILE=/tmp/myapp.is.healthy checkhealth` at regular intervals or\n- pass this command to orchestrators like `Nomad`, `Kubernetes`, etc. as a part of their health-check commands.\n\n## Current Stable Version\n\n```\n0.1.0\n```\n\n### Development Installation\n\n- Clone the project.\n- Now install the application in editable mode and you are ready to start development\n\n```\n$ pip install -e .\n```\n\n## Test\n\nTo run the tests:\n\n```\nmake test\n```\n\n## License\n\nMIT\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ansrivas/healthchecker/0.1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "file-healthchecker", "package_url": "https://pypi.org/project/file-healthchecker/", "platform": "", "project_url": "https://pypi.org/project/file-healthchecker/", "project_urls": {"Download": "https://github.com/ansrivas/healthchecker/0.1.1.tar.gz"}, "release_url": "https://pypi.org/project/file-healthchecker/0.1.1/", "requires_dist": ["python-language-server[all] ; extra == 'dev'", "black (==19.3b0) ; extra == 'dev'", "pytest (==5.2.1) ; extra == 'test'", "pytest-sugar (==0.9.2) ; extra == 'test'", "pytest-asyncio (==0.10.0) ; extra == 'test'", "pytest-cov (==2.8.1) ; extra == 'test'"], "requires_python": ">=3.6.0", "summary": "Check health of static, long running applications using generated files.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>file-healthchecker</h1>\n<p>Use this application to monitor your long running \"non-web\" application's health check.</p>\n<p><a href=\"https://travis-ci.com/ansrivas/healthcheck\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d17abbc0da50487ea0eb1819b9bcddc5a7e000e6/68747470733a2f2f7472617669732d63692e636f6d2f616e7372697661732f6865616c7468636865636b2e7376673f746f6b656e3d684d3656386d7235667751507365694653595669266272616e63683d6d6173746572\"></a></p>\n<h2>Installation</h2>\n<h3>pip</h3>\n<pre><code>pip install file-healthchecker\n</code></pre>\n<h2>Use Case</h2>\n<p>Lets say we have a service which needs to perform some action every x-duration.\nIn python-world we would simply run it inside a while loop and invoke it every x-minutes.</p>\n<p>Now define an environment var <code>ENV_HEALTH_CHECK_FILE</code> which will represent a file creation\nin case the app is healthy. for e.g. <code>export ENV_HEALTH_CHECK_FILE=/tmp/myapp.is.healthy</code></p>\n<p>This following snippet will perform following tasks:</p>\n<ul>\n<li>Every invocation of my_application will first remove a health-check file.</li>\n<li>Run the application</li>\n<li>NOTE: Raise an exception in case the application is failing. Handle it outside, as show in the given example.</li>\n<li>If no exception is raised, the decorator will create a file defined by the env-var <code>ENV_HEALTH_CHECK_FILE</code></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">file_healthchecker</span> <span class=\"kn\">import</span> <span class=\"n\">decorator_success</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"nd\">@decorator_success</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_application</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span> <span class=\"n\">doing</span> <span class=\"n\">lots</span> <span class=\"n\">of</span> <span class=\"n\">work</span>\n    <span class=\"o\">...</span> <span class=\"n\">more</span> <span class=\"n\">work</span>\n    <span class=\"c1\"># in case of failure, raise exception</span>\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">my_application</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>With the installation another cmd-app also gets installed - <code>checkhealth</code>.</p>\n<p>How to check application's health?</p>\n<ul>\n<li>One can simply run <code>ENV_HEALTH_CHECK_FILE=/tmp/myapp.is.healthy checkhealth</code> at regular intervals or</li>\n<li>pass this command to orchestrators like <code>Nomad</code>, <code>Kubernetes</code>, etc. as a part of their health-check commands.</li>\n</ul>\n<h2>Current Stable Version</h2>\n<pre><code>0.1.0\n</code></pre>\n<h3>Development Installation</h3>\n<ul>\n<li>Clone the project.</li>\n<li>Now install the application in editable mode and you are ready to start development</li>\n</ul>\n<pre><code>$ pip install -e .\n</code></pre>\n<h2>Test</h2>\n<p>To run the tests:</p>\n<pre><code>make test\n</code></pre>\n<h2>License</h2>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6126107, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "12e6181978c41c10a03653a4d7e2e066", "sha256": "1848aab7e32f8be42b65500703a005c944456c2de26e7886ddfeddbb5eae7306"}, "downloads": -1, "filename": "file_healthchecker-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "12e6181978c41c10a03653a4d7e2e066", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5081, "upload_time": "2019-11-12T15:48:59", "upload_time_iso_8601": "2019-11-12T15:48:59.219334Z", "url": "https://files.pythonhosted.org/packages/29/94/1c0bd549b56e139d162cc4291c1caeaed910ecf06bf687291c0537ead120/file_healthchecker-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b059be01bc370bdfcfa418580699a474", "sha256": "7ebe8fdd60cb34dfadc55cb6474d42b6b1e88d61d9672384216548a95c42d76d"}, "downloads": -1, "filename": "file-healthchecker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b059be01bc370bdfcfa418580699a474", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4086, "upload_time": "2019-11-12T15:49:02", "upload_time_iso_8601": "2019-11-12T15:49:02.092220Z", "url": "https://files.pythonhosted.org/packages/7e/7e/89865c314295aa9aaf28405fadd5c3b4a683222762f8919194d1389e2e01/file-healthchecker-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "935ec8b6f67a8d687972dfaf3606a149", "sha256": "8363787ea10b7e71990e25261ec52cfc4275580f7b9400ca33810a324d10e961"}, "downloads": -1, "filename": "file_healthchecker-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "935ec8b6f67a8d687972dfaf3606a149", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5080, "upload_time": "2019-11-12T20:06:54", "upload_time_iso_8601": "2019-11-12T20:06:54.575802Z", "url": "https://files.pythonhosted.org/packages/28/2c/fc3e7690563075c1f96cbec49db4fc14481eb99551f17d98e78ddca5a8e2/file_healthchecker-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab4c019348b4bc534a48c102ec612d46", "sha256": "75710a078bc03b39297f623a8698c292436607011e266e1a4d322fa9c94bb32b"}, "downloads": -1, "filename": "file-healthchecker-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ab4c019348b4bc534a48c102ec612d46", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4100, "upload_time": "2019-11-12T20:06:56", "upload_time_iso_8601": "2019-11-12T20:06:56.092307Z", "url": "https://files.pythonhosted.org/packages/f6/8b/a38717e614653e0c37cd155176dcc0fa235409db908cffc0bee8b70fa440/file-healthchecker-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "935ec8b6f67a8d687972dfaf3606a149", "sha256": "8363787ea10b7e71990e25261ec52cfc4275580f7b9400ca33810a324d10e961"}, "downloads": -1, "filename": "file_healthchecker-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "935ec8b6f67a8d687972dfaf3606a149", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 5080, "upload_time": "2019-11-12T20:06:54", "upload_time_iso_8601": "2019-11-12T20:06:54.575802Z", "url": "https://files.pythonhosted.org/packages/28/2c/fc3e7690563075c1f96cbec49db4fc14481eb99551f17d98e78ddca5a8e2/file_healthchecker-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab4c019348b4bc534a48c102ec612d46", "sha256": "75710a078bc03b39297f623a8698c292436607011e266e1a4d322fa9c94bb32b"}, "downloads": -1, "filename": "file-healthchecker-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ab4c019348b4bc534a48c102ec612d46", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 4100, "upload_time": "2019-11-12T20:06:56", "upload_time_iso_8601": "2019-11-12T20:06:56.092307Z", "url": "https://files.pythonhosted.org/packages/f6/8b/a38717e614653e0c37cd155176dcc0fa235409db908cffc0bee8b70fa440/file-healthchecker-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:35 2020"}