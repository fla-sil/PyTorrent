{"info": {"author": "Vanessa R. Marcelino Jan P. Buchmann Andreas Sj\u00f6din Philip T.L.C. Clausen", "author_email": "vrmarcelino@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# CCMetagen\n\nCCMetagen processes sequence alignments produced with [KMA](https://bitbucket.org/genomicepidemiology/kma), which implements the ConClave sorting scheme to achieve highly accurate read mappings. The pipeline is fast enough to use the whole NCBI nt collection as reference, facilitating the inclusion of understudied organisms, such as microbial eukaryotes, in metagenome surveys. CCMetagen produces ranked taxonomic results in user-friendly formats that are ready for publication or downstream statistical analyses.\n\nIf you this tool, please cite the CCMetagen preprint and the original KMA paper:\n\n  * [CCMetagen, please cite: Marcelino VR, Clausen PT, Buchman J, Wille M, Iredell JR, Meyer W, Lund O, Sorrell T, Holmes EC. 2019. CCMetagen: comprehensive and accurate identification of eukaryotes and prokaryotes in metagenomic data. bioRxiv. doi: https://doi.org/10.1101/641332.](https://doi.org/10.1101/641332)\n\n  * [Clausen PT, Aarestrup FM, Lund O. 2018. Rapid and precise alignment of raw reads against redundant databases with KMA. BMC bioinformatics. 2018 Dec;19(1):307.](https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2336-6)\n\nBesides the guidelines below, we also provide a tutorial to reproduce our metagenome clasisfication analyses of the microbiome of wild birds [here](https://github.com/vrmarcelino/CCMetagen/tree/master/tutorial).\n\nThe guidelines below will guide you in using the command-line version of the CCMetagen pipeline.\n\nCCMetagen is also available as a web service at https://cge.cbs.dtu.dk/services/ccmetagen/.\nNote that we recommend using this command-line version to analyze data exceeding 1.5Gb.\n\n## Requirements and Installation\n\nMake sure you have the dependencies below installed and accessible in your $PATH.\nThe guidelines below are for Unix systems.\n\n  * If you do not have it already, download and install [Python 3.6](https://www.python.org/downloads/)\nCCMetagen requires Python modules [pandas (>0.23)](https://pandas.pydata.org/) and [ETE3](http://etetoolkit.org/). The easiest way to install these modules is via conda or pip:\n\n`conda install pandas`\n\n  * You need a C-compiler and zlib development files to install KMA:\n\n`sudo apt-get install libz-dev`\n\n  * Download and install [KMA](https://bitbucket.org/genomicepidemiology/kma):\n```\ngit clone https://bitbucket.org/genomicepidemiology/kma.git\ncd kma && make\n```\n\n  * [Krona](https://github.com/marbl/Krona) is required for graphs. To install Krona it in the local folder:\n```\nwget https://github.com/marbl/Krona/releases/download/v2.7/KronaTools-2.7.tar\ntar xvf KronaTools-2.7.tar \ncd  KronaTools-2.7\n./install.pl --prefix . \n```\n\n  * Then download CCMetagen and add it to your path.\nIf you have git:\n```\ngit clone https://github.com/vrmarcelino/CCMetagen\n```\nThis will download CCMetagen and the tutorial files.\nYou can also just download the python files from this folder (CCMetagen.py, CCMetagen_merge.py) and the ones in the ccmetagen folder if you rather avoid downloading all other files.\n\nThen add the CCMetagen python scripts to the path, temporarily or permanently. For example:\n`PATH=$PATH<your_folder>/CCMetagen`\n\nTo update CCMetagen, go to the CCMetagen folder and type: `git pull`\n\n\n## Databases\n\n**Option 1** Download the indexed (ready-to-go) nt database either [here](http://dx.doi.org/10.25910/5cc7cd40fca8e) or [here](http://www.cbs.dtu.dk/public/CGE/databases/CCMetagen/).\nDownload the ncbi_nt_kma.zip file (96GB zipped file, 165GB uncompressed).\nUnzip the database: `unzip ncbi_nt_kma`.\nThis database contains the whole in NCBI nucleotide collection (of of Jan 2018), and therefore is suitable to identify a range of microorganisms, including prokaryotes and eukaryotes.\n\n**Option 2** We have indexed a more recent version of the ncbi nucleotide collection (June 2019) that does not contain environemntal or artificial sequences. The file ncbi_nt_no_env_11jun2019.zip can be found [here](http://dx.doi.org/10.25910/5cc7cd40fca8e) and contains all ncbi nt entries excluding the descendants of environmental eukaryotes (taxid 61964), environmental prokaryotes (48479), unclassified sequences (12908) and artificial sequences (28384).\n\n**Option 3:** Build your own reference database.\nFollow the instructions in the [KMA website](https://bitbucket.org/genomicepidemiology/kma) to index the database.\nIt is important that taxids are incorporated in sequence headers for processing with CCMetagen.\nWe provide scripts to rename sequences in the nt database [here](https://github.com/vrmarcelino/CCMetagen/tree/master/benchmarking/rename_nt).\n\nIf you want to use the RefSeq database, the format is similar to the one required for Kraken. The [Opiniomics blog](http://www.opiniomics.org/building-a-kraken-database-with-new-ftp-structure-and-no-gi-numbers/) describes how to download sequences in an adequate format. Note that you still need to build the index with KMA: `kma_index -i refseq.fna -o refseq_indexed -NI -Sparse -` or `kma_index -i refseq.fna -o refseq_indexed -NI -Sparse TG` for faster analysis.\n\n\n## Quick Start\n\n  * First map sequence reads (or contigs) to the database with **KMA**.\n\nFor paired-end files:\n```\nkma -ipe $SAMPLE_R1 $SAMPLE_R2 -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and -apm f\n```\n\nFor single-end files:\n```\nkma -i $SAMPLE -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and\n```\n\nIf you intend to calculate abundance in reads per million (RPM), add the flag -ef (extended features:\n```\nkma -ipe $SAMPLE_R1 $SAMPLE_R2 -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and -apm f -ef\n```\n\nWhere:\n\n$db is the path to the reference database\n$th is the number of threads\n$SAMPLE_R1 is the path to the mate1 of a paired-end metagenome/metatranscriptome sample (fastq or fasta)\n$SAMPLE_R2 is the path to the mate2 of a paired-end metagenome/metatranscriptome sample (fastq or fasta)\n$SAMPLE is the path to a single-end metagenome/metatranscriptome file (reads or contigs)\n\n\n  * Then run **CCMetagen**:\n```\nCCMetagen.py -i $sample_out_kma.res -o results\n```\nWhere $sample_out_kma.res is alignment results produced by KMA.\n\nNote that if you are running CCMetagen from the local folder (instead of adding it to your path), you may need to add 'python' before CCMetagen: `python CCMetagen.py -i $sample_out_kma.res -o results`\n\nDone! This will make an additional quality filter and output a text file with ranked taxonomic classifications and a krona graph file for interactive visualization.\n\nAn example of the CCMetagen output can be found [here (.csv file)](https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Turnstone_Temperate_Flu_Ng.res.csv) and [here (.html file)](https://htmlpreview.github.io/?https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Turnstone_Temperate_Flu_Ng.res.html).\n\n<img src=tutorial/figs_tutorial/krona_photo.png width=\"500\" height=\"419.64\">\n\nIn the .csv file, you will find the depth (abundance) of each match. Depth can be estimated in three ways: by counting the number of nucleotides matching the reference sequence (use flag --depth_unit nc, by applying an additional correction for template length (default in KMA and CCMetagen), or by calculating depth in Reads Per Million (RPM, use flag --depth_unit rpm). If you want RPM values, you will need to suply the .mapstats file generated with KMA.\n\nYou can adjust the stringency of the taxonomic assignments by adjusting the minimum coverage (--coverage), the minimum abundance (--depth), and the minimum level of sequence similarity (--query_identity).\n\nIf you change the default depth unit, we recommend adjusting the minimum abundance (--depth) to remove taxa found in low abundance accordingly. For example, you can use -d 200 (200 nucleotides) when using --depth_unit nc, which is similar to -d 0.2 when using the default '--depth_unit kma' option. If you choose to calculate abundances in RPM, you may want to adjust the minimum abundance according to your sequence depth.\nFor example, to calculate abundances in RPM, and filter out all matches with less than one read per million:\n\n```\nCCMetagen.py -i $sample_out_kma.res -o results --depth_unit rpm --mapstat $sample_out_kma.mapstat --depth 1\n```\n\n\n**Understanding the ranked taxonomic output of CCMetagen:** The taxonomic classifications reflect the sequence similarity between query and reference sequences, according to default or user-defined similarity thresholds. For example, if a match is 97% similar to the reference sequence, the match will not get a species-level classification. If the match is 85% similar to the reference sequence, then the species, genus and family-level classifications will be 'none'.\nNote that this is different from identifications tagged as unk_x (unknown taxa). These unknowns indicate taxa where higher-rank classifications have not been defined (according to the NCBI taxonomy database), and it is unrelated to sequence similarity.\n\n\nFor a list of options to customize your analyze, type:\n```\nCCMetagen.py -h\n```\n\n  * To get the abundance of each taxon, and/or summarize results for multiple samples, use **CCMetagen_merge**:\n```\nCCMetagen_merge.py -i $CCMetagen_out\n```\n\nWhere $CCMetagen_out is the folder containing the CCMetagen taxonomic classifications.\nThe results must be in .csv format (default or '--mode text' output of CCMetagen), and no other csv file should be present in the folder.\n\nThe flag '-t' define the taxonomic level to merge the results. The default is species-level.\n\nYou can also filter out specific taxa, at any taxonomic level:\n\nUse flag -kr to keep (k) or remove (r) taxa.\nUse flag -l to set the taxonomic level for the filtering.\nUse flag -tlist to list the taxa to keep or remove (separated by comma).\n\nEX1: Filter out bacteria: `CCMetagen_merge.py -i $CCMetagen_out -kr r -l Kingdom -tlist Bacteria`\n\nEX2: Filter out bacteria and Metazoa: `CCMetagen_merge.py -i $CCMetagen_out -kr r -l Kingdom -tlist Bacteria, Metazoa`\n\nEX3: Merge results at family-level, and remove Metazoa and Viridiplantae taxa at Kingdom level:\n```\nCCMetagen_merge.py -i $CCMetagen_out -t Family -kr r -l Kingdom -tlist Metazoa,Viridiplantae -o family_table\n```\n\nFor species-level filtering (where there is a space in taxa names), use quotation marks.\nEx 4: Keep only _Escherichia coli_ and _Candida albicans_:\n```\nCCMetagen_merge.py -i 05_KMetagen/ -kr k -l Species -tlist \"Escherichia coli,Candida albicans\"\n```\n\nIf you only have one sample, you can also use CMetagen_merge to get one line per taxa.\n\nTo see all options, type:\n```\nCCMetagen_merge.py -h\n```\nThis file should look like [this](https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Bird_family_table_filtered.csv).\n\n**Check out our [tutorial](https://github.com/vrmarcelino/CCMetagen/tree/master/tutorial) for an applied example of the CCMetagen pipeline.**\n\n\n## FAQs\n\n* Error taxid not found.\n  You probably need to update your local ETE3 database, which contains the taxids and lineage information:\n```\npython\nfrom ete3 import NCBITaxa\nncbi = NCBITaxa()\nncbi.update_taxonomy_database()\nquit()\n```\n\n* TypeError: concat() got an unexpected keyword argument 'sort'.\n  If you get this error, please update the python module pandas:\n```\npip install pandas --upgrade --user\n```\n\n* WARNING: no NCBI's taxid found for accession [something], this match will not get taxonomic ranks\n\n  This is not an error, this is just a warning indicating that one of your query sequences matchs to a genbank record for which the NCBI taxonomic identifier (taxid) is not known. CCMetagen therefore will not be able to assign taxonomic ranks to this match, but you will still be able to see it in the output file.\n\n* KeyError: \"['Superkingdom' 'Kingdom' 'Phylum' 'Class' 'Order' 'Family' .... ] not in index\"\n  Make sure that the output of CCMetagen ends in '.csv'.\n\n* The results of the CCMetagen_merge.py at different taxonomic levels do not sum up.\n  As explained above, this script merges all unclassified taxa at a given taxonomic level. For example, if you have 20 matches to the genus _Candida_, but only 2 matches were classified at the species level, the output of CCMetagen_merge.py -t Species (default) will only have the abundances of two classified _Candida_ species, while the others will be merged with the \"Unclassified\" taxa. The output of CCMetagen_merge.py -t Genus however will contain all 20 matches. \n  If this behaviour is undesirable, one option is to disable the similarity thresholds (use flag -off) - so that all taxonomic levels are reported regardless of their similarity to the reference sequence. Alternatively, you can cluster species at the 'Closest_match' (using the flag --tax_level Closest_match).\n\n\n## Complete option list\n\nCCMetagen:\n```\nusage: CCMetagen.py [-h] [-m MODE] -i RES_FP [-o OUTPUT_FP]\n                    [-r REFERENCE_DATABASE] [-du DEPTH_UNIT] [-map MAPSTAT]\n                    [-d DEPTH] [-c COVERAGE] [-q QUERY_IDENTITY] [-p PVALUE]\n                    [-st SPECIES_THRESHOLD] [-gt GENUS_THRESHOLD]\n                    [-ft FAMILY_THRESHOLD] [-ot ORDER_THRESHOLD]\n                    [-ct CLASS_THRESHOLD] [-pt PHYLUM_THRESHOLD]\n                    [-off TURN_OFF_SIM_THRESHOLDS] [--version]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n  -m MODE, --mode MODE  what do you want CCMetagen to do? Valid options are\n                        'visual', 'text' or 'both': text: parses kma, filters\n                        based on quality and output a text file with taxonomic\n                        information and detailed mapping information visual:\n                        parses kma, filters based on quality and output a\n                        simplified text file and a krona html file for\n                        visualization both: outputs both text and visual file\n                        formats. Default = both\n\n  -i RES_FP, --res_fp RES_FP\n                        Path to the KMA result (.res file)\n  -o OUTPUT_FP, --output_fp OUTPUT_FP\n                        Path to the output file. Default = CCMetagen_out\n  -r REFERENCE_DATABASE, --reference_database REFERENCE_DATABASE\n                        Which reference database was used. Options: UNITE,\n                        RefSeq or nt. Default = nt\n\n  -du DEPTH_UNIT, --depth_unit DEPTH_UNIT\n                        Desired unit for Depth(abundance) measurements.\n                        Default = kma (KMA default depth, which is the number\n                        of nucleotides overlapping each template, divided by\n                        the lengh of the template). Alternatively, you can\n                        have abundance calculated in Reads Per Million (RPM,\n                        option 'rpm'), or simply count the number of\n                        nucleotides overlaping the template (option 'nc'). If\n                        you use the 'nc' or 'rpm' options, remember to change\n                        the default --depth parameter accordingly. Valid\n                        options are nc, rpm and kma\n  -map MAPSTAT, --mapstat MAPSTAT\n                        Path to the mapstat file produced with KMA when using\n                        the -ef flag (.mapstat). Required when calculating\n                        abundances in RPM.\n  -d DEPTH, --depth DEPTH\n                        minimum sequencing depth. Default = 0.2. If you use\n                        --depth_unit nc, change this accordingly. For example,\n                        -d 200 (200 nucleotides) is similar to -d 0.2 when\n                        using the default '--depth_unit kma' option.\n\n  -c COVERAGE, --coverage COVERAGE\n                        Minimum coverage. Default = 20\n  -q QUERY_IDENTITY, --query_identity QUERY_IDENTITY\n                        Minimum query identity (Phylum level). Default = 50\n  -p PVALUE, --pvalue PVALUE\n                        Minimum p-value. Default = 0.05.\n  -st SPECIES_THRESHOLD, --species_threshold SPECIES_THRESHOLD\n                        Species-level similarity threshold. Default = 98.41\n  -gt GENUS_THRESHOLD, --genus_threshold GENUS_THRESHOLD\n                        Genus-level similarity threshold. Default = 96.31\n  -ft FAMILY_THRESHOLD, --family_threshold FAMILY_THRESHOLD\n                        Family-level similarity threshold. Default = 88.51\n  -ot ORDER_THRESHOLD, --order_threshold ORDER_THRESHOLD\n                        Order-level similarity threshold. Default = 81.21\n  -ct CLASS_THRESHOLD, --class_threshold CLASS_THRESHOLD\n                        Class-level similarity threshold. Default = 80.91\n  -pt PHYLUM_THRESHOLD, --phylum_threshold PHYLUM_THRESHOLD\n                        Phylum-level similarity threshold. Default = 0 - not\n                        applied\n  -off TURN_OFF_SIM_THRESHOLDS, --turn_off_sim_thresholds TURN_OFF_SIM_THRESHOLDS\n                        Turns simularity-based filtering off. Options = y or\n                        n. Default = n\n\n  --version             show program's version number and exit\n ```\n\nCCMetagen_merge:\n ```\nusage: CCMetagen_merge.py [-h] -i INPUT_FP [-t TAX_LEVEL] [-o OUTPUT_FP]\n                          [-kr KEEP_OR_REMOVE] [-l FILTERING_TAX_LEVEL]\n                          [-tlist TAXA_LIST]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INPUT_FP, --input_fp INPUT_FP\n                        Path to the folder containing CCMetagen text results.\n                        Note that files must end with \".csv\" and the folder\n                        should not contain other .csv files\n  -t TAX_LEVEL, --tax_level TAX_LEVEL\n                        Taxonomic level to merge the results. Options:\n                        Closest_match (includes different genes for the same\n                        species), Species (Default), Genus, Family, Order,\n                        Class, Phylum, Kingdom and Superkingdom\n  -o OUTPUT_FP, --output_fp OUTPUT_FP\n                        Path to the output file. Default = merged_samples\n  -kr KEEP_OR_REMOVE, --keep_or_remove KEEP_OR_REMOVE\n                        keep or remove taxa. Options = k (keep), r (remove)\n                        and n (none, default)\n  -l FILTERING_TAX_LEVEL, --filtering_tax_level FILTERING_TAX_LEVEL\n                        level to perform taxonomic filtering, default = none\n  -tlist TAXA_LIST, --taxa_list TAXA_LIST\n                        list taxon names (comma-separated) that you want to\n                        keep or exclude\n ```\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vrmarcelino/CCMetagen.git", "keywords": "bioinformatics taxonomy metagenomic classifier KMA", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "CCMetagen", "package_url": "https://pypi.org/project/CCMetagen/", "platform": "", "project_url": "https://pypi.org/project/CCMetagen/", "project_urls": {"Homepage": "https://github.com/vrmarcelino/CCMetagen.git", "Preprint": "https://www.biorxiv.org/content/10.1101/641332v2", "Source": "https://github.com/vrmarcelino/CCMetagen.git"}, "release_url": "https://pypi.org/project/CCMetagen/1.1.6/", "requires_dist": ["ete3", "pandas"], "requires_python": ">=3.6", "summary": "Microbiome classification pipeline", "version": "1.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CCMetagen</h1>\n<p>CCMetagen processes sequence alignments produced with <a href=\"https://bitbucket.org/genomicepidemiology/kma\" rel=\"nofollow\">KMA</a>, which implements the ConClave sorting scheme to achieve highly accurate read mappings. The pipeline is fast enough to use the whole NCBI nt collection as reference, facilitating the inclusion of understudied organisms, such as microbial eukaryotes, in metagenome surveys. CCMetagen produces ranked taxonomic results in user-friendly formats that are ready for publication or downstream statistical analyses.</p>\n<p>If you this tool, please cite the CCMetagen preprint and the original KMA paper:</p>\n<ul>\n<li>\n<p><a href=\"https://doi.org/10.1101/641332\" rel=\"nofollow\">CCMetagen, please cite: Marcelino VR, Clausen PT, Buchman J, Wille M, Iredell JR, Meyer W, Lund O, Sorrell T, Holmes EC. 2019. CCMetagen: comprehensive and accurate identification of eukaryotes and prokaryotes in metagenomic data. bioRxiv. doi: https://doi.org/10.1101/641332.</a></p>\n</li>\n<li>\n<p><a href=\"https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2336-6\" rel=\"nofollow\">Clausen PT, Aarestrup FM, Lund O. 2018. Rapid and precise alignment of raw reads against redundant databases with KMA. BMC bioinformatics. 2018 Dec;19(1):307.</a></p>\n</li>\n</ul>\n<p>Besides the guidelines below, we also provide a tutorial to reproduce our metagenome clasisfication analyses of the microbiome of wild birds <a href=\"https://github.com/vrmarcelino/CCMetagen/tree/master/tutorial\" rel=\"nofollow\">here</a>.</p>\n<p>The guidelines below will guide you in using the command-line version of the CCMetagen pipeline.</p>\n<p>CCMetagen is also available as a web service at <a href=\"https://cge.cbs.dtu.dk/services/ccmetagen/\" rel=\"nofollow\">https://cge.cbs.dtu.dk/services/ccmetagen/</a>.\nNote that we recommend using this command-line version to analyze data exceeding 1.5Gb.</p>\n<h2>Requirements and Installation</h2>\n<p>Make sure you have the dependencies below installed and accessible in your $PATH.\nThe guidelines below are for Unix systems.</p>\n<ul>\n<li>If you do not have it already, download and install <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.6</a>\nCCMetagen requires Python modules <a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">pandas (&gt;0.23)</a> and <a href=\"http://etetoolkit.org/\" rel=\"nofollow\">ETE3</a>. The easiest way to install these modules is via conda or pip:</li>\n</ul>\n<p><code>conda install pandas</code></p>\n<ul>\n<li>You need a C-compiler and zlib development files to install KMA:</li>\n</ul>\n<p><code>sudo apt-get install libz-dev</code></p>\n<ul>\n<li>Download and install <a href=\"https://bitbucket.org/genomicepidemiology/kma\" rel=\"nofollow\">KMA</a>:</li>\n</ul>\n<pre><code>git clone https://bitbucket.org/genomicepidemiology/kma.git\ncd kma &amp;&amp; make\n</code></pre>\n<ul>\n<li><a href=\"https://github.com/marbl/Krona\" rel=\"nofollow\">Krona</a> is required for graphs. To install Krona it in the local folder:</li>\n</ul>\n<pre><code>wget https://github.com/marbl/Krona/releases/download/v2.7/KronaTools-2.7.tar\ntar xvf KronaTools-2.7.tar \ncd  KronaTools-2.7\n./install.pl --prefix . \n</code></pre>\n<ul>\n<li>Then download CCMetagen and add it to your path.\nIf you have git:</li>\n</ul>\n<pre><code>git clone https://github.com/vrmarcelino/CCMetagen\n</code></pre>\n<p>This will download CCMetagen and the tutorial files.\nYou can also just download the python files from this folder (CCMetagen.py, CCMetagen_merge.py) and the ones in the ccmetagen folder if you rather avoid downloading all other files.</p>\n<p>Then add the CCMetagen python scripts to the path, temporarily or permanently. For example:\n<code>PATH=$PATH&lt;your_folder&gt;/CCMetagen</code></p>\n<p>To update CCMetagen, go to the CCMetagen folder and type: <code>git pull</code></p>\n<h2>Databases</h2>\n<p><strong>Option 1</strong> Download the indexed (ready-to-go) nt database either <a href=\"http://dx.doi.org/10.25910/5cc7cd40fca8e\" rel=\"nofollow\">here</a> or <a href=\"http://www.cbs.dtu.dk/public/CGE/databases/CCMetagen/\" rel=\"nofollow\">here</a>.\nDownload the ncbi_nt_kma.zip file (96GB zipped file, 165GB uncompressed).\nUnzip the database: <code>unzip ncbi_nt_kma</code>.\nThis database contains the whole in NCBI nucleotide collection (of of Jan 2018), and therefore is suitable to identify a range of microorganisms, including prokaryotes and eukaryotes.</p>\n<p><strong>Option 2</strong> We have indexed a more recent version of the ncbi nucleotide collection (June 2019) that does not contain environemntal or artificial sequences. The file ncbi_nt_no_env_11jun2019.zip can be found <a href=\"http://dx.doi.org/10.25910/5cc7cd40fca8e\" rel=\"nofollow\">here</a> and contains all ncbi nt entries excluding the descendants of environmental eukaryotes (taxid 61964), environmental prokaryotes (48479), unclassified sequences (12908) and artificial sequences (28384).</p>\n<p><strong>Option 3:</strong> Build your own reference database.\nFollow the instructions in the <a href=\"https://bitbucket.org/genomicepidemiology/kma\" rel=\"nofollow\">KMA website</a> to index the database.\nIt is important that taxids are incorporated in sequence headers for processing with CCMetagen.\nWe provide scripts to rename sequences in the nt database <a href=\"https://github.com/vrmarcelino/CCMetagen/tree/master/benchmarking/rename_nt\" rel=\"nofollow\">here</a>.</p>\n<p>If you want to use the RefSeq database, the format is similar to the one required for Kraken. The <a href=\"http://www.opiniomics.org/building-a-kraken-database-with-new-ftp-structure-and-no-gi-numbers/\" rel=\"nofollow\">Opiniomics blog</a> describes how to download sequences in an adequate format. Note that you still need to build the index with KMA: <code>kma_index -i refseq.fna -o refseq_indexed -NI -Sparse -</code> or <code>kma_index -i refseq.fna -o refseq_indexed -NI -Sparse TG</code> for faster analysis.</p>\n<h2>Quick Start</h2>\n<ul>\n<li>First map sequence reads (or contigs) to the database with <strong>KMA</strong>.</li>\n</ul>\n<p>For paired-end files:</p>\n<pre><code>kma -ipe $SAMPLE_R1 $SAMPLE_R2 -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and -apm f\n</code></pre>\n<p>For single-end files:</p>\n<pre><code>kma -i $SAMPLE -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and\n</code></pre>\n<p>If you intend to calculate abundance in reads per million (RPM), add the flag -ef (extended features:</p>\n<pre><code>kma -ipe $SAMPLE_R1 $SAMPLE_R2 -o sample_out_kma -t_db $db -t $th -1t1 -mem_mode -and -apm f -ef\n</code></pre>\n<p>Where:</p>\n<p>$db is the path to the reference database\n$th is the number of threads\n$SAMPLE_R1 is the path to the mate1 of a paired-end metagenome/metatranscriptome sample (fastq or fasta)\n$SAMPLE_R2 is the path to the mate2 of a paired-end metagenome/metatranscriptome sample (fastq or fasta)\n$SAMPLE is the path to a single-end metagenome/metatranscriptome file (reads or contigs)</p>\n<ul>\n<li>Then run <strong>CCMetagen</strong>:</li>\n</ul>\n<pre><code>CCMetagen.py -i $sample_out_kma.res -o results\n</code></pre>\n<p>Where $sample_out_kma.res is alignment results produced by KMA.</p>\n<p>Note that if you are running CCMetagen from the local folder (instead of adding it to your path), you may need to add 'python' before CCMetagen: <code>python CCMetagen.py -i $sample_out_kma.res -o results</code></p>\n<p>Done! This will make an additional quality filter and output a text file with ranked taxonomic classifications and a krona graph file for interactive visualization.</p>\n<p>An example of the CCMetagen output can be found <a href=\"https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Turnstone_Temperate_Flu_Ng.res.csv\" rel=\"nofollow\">here (.csv file)</a> and <a href=\"https://htmlpreview.github.io/?https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Turnstone_Temperate_Flu_Ng.res.html\" rel=\"nofollow\">here (.html file)</a>.</p>\n<img height=\"419.64\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e397215f020dac69f18f975dbcd7bfa30340bfda/7475746f7269616c2f666967735f7475746f7269616c2f6b726f6e615f70686f746f2e706e67\" width=\"500\">\n<p>In the .csv file, you will find the depth (abundance) of each match. Depth can be estimated in three ways: by counting the number of nucleotides matching the reference sequence (use flag --depth_unit nc, by applying an additional correction for template length (default in KMA and CCMetagen), or by calculating depth in Reads Per Million (RPM, use flag --depth_unit rpm). If you want RPM values, you will need to suply the .mapstats file generated with KMA.</p>\n<p>You can adjust the stringency of the taxonomic assignments by adjusting the minimum coverage (--coverage), the minimum abundance (--depth), and the minimum level of sequence similarity (--query_identity).</p>\n<p>If you change the default depth unit, we recommend adjusting the minimum abundance (--depth) to remove taxa found in low abundance accordingly. For example, you can use -d 200 (200 nucleotides) when using --depth_unit nc, which is similar to -d 0.2 when using the default '--depth_unit kma' option. If you choose to calculate abundances in RPM, you may want to adjust the minimum abundance according to your sequence depth.\nFor example, to calculate abundances in RPM, and filter out all matches with less than one read per million:</p>\n<pre><code>CCMetagen.py -i $sample_out_kma.res -o results --depth_unit rpm --mapstat $sample_out_kma.mapstat --depth 1\n</code></pre>\n<p><strong>Understanding the ranked taxonomic output of CCMetagen:</strong> The taxonomic classifications reflect the sequence similarity between query and reference sequences, according to default or user-defined similarity thresholds. For example, if a match is 97% similar to the reference sequence, the match will not get a species-level classification. If the match is 85% similar to the reference sequence, then the species, genus and family-level classifications will be 'none'.\nNote that this is different from identifications tagged as unk_x (unknown taxa). These unknowns indicate taxa where higher-rank classifications have not been defined (according to the NCBI taxonomy database), and it is unrelated to sequence similarity.</p>\n<p>For a list of options to customize your analyze, type:</p>\n<pre><code>CCMetagen.py -h\n</code></pre>\n<ul>\n<li>To get the abundance of each taxon, and/or summarize results for multiple samples, use <strong>CCMetagen_merge</strong>:</li>\n</ul>\n<pre><code>CCMetagen_merge.py -i $CCMetagen_out\n</code></pre>\n<p>Where $CCMetagen_out is the folder containing the CCMetagen taxonomic classifications.\nThe results must be in .csv format (default or '--mode text' output of CCMetagen), and no other csv file should be present in the folder.</p>\n<p>The flag '-t' define the taxonomic level to merge the results. The default is species-level.</p>\n<p>You can also filter out specific taxa, at any taxonomic level:</p>\n<p>Use flag -kr to keep (k) or remove (r) taxa.\nUse flag -l to set the taxonomic level for the filtering.\nUse flag -tlist to list the taxa to keep or remove (separated by comma).</p>\n<p>EX1: Filter out bacteria: <code>CCMetagen_merge.py -i $CCMetagen_out -kr r -l Kingdom -tlist Bacteria</code></p>\n<p>EX2: Filter out bacteria and Metazoa: <code>CCMetagen_merge.py -i $CCMetagen_out -kr r -l Kingdom -tlist Bacteria, Metazoa</code></p>\n<p>EX3: Merge results at family-level, and remove Metazoa and Viridiplantae taxa at Kingdom level:</p>\n<pre><code>CCMetagen_merge.py -i $CCMetagen_out -t Family -kr r -l Kingdom -tlist Metazoa,Viridiplantae -o family_table\n</code></pre>\n<p>For species-level filtering (where there is a space in taxa names), use quotation marks.\nEx 4: Keep only <em>Escherichia coli</em> and <em>Candida albicans</em>:</p>\n<pre><code>CCMetagen_merge.py -i 05_KMetagen/ -kr k -l Species -tlist \"Escherichia coli,Candida albicans\"\n</code></pre>\n<p>If you only have one sample, you can also use CMetagen_merge to get one line per taxa.</p>\n<p>To see all options, type:</p>\n<pre><code>CCMetagen_merge.py -h\n</code></pre>\n<p>This file should look like <a href=\"https://github.com/vrmarcelino/CCMetagen/blob/master/tutorial/figs_tutorial/Bird_family_table_filtered.csv\" rel=\"nofollow\">this</a>.</p>\n<p><strong>Check out our <a href=\"https://github.com/vrmarcelino/CCMetagen/tree/master/tutorial\" rel=\"nofollow\">tutorial</a> for an applied example of the CCMetagen pipeline.</strong></p>\n<h2>FAQs</h2>\n<ul>\n<li>Error taxid not found.\nYou probably need to update your local ETE3 database, which contains the taxids and lineage information:</li>\n</ul>\n<pre><code>python\nfrom ete3 import NCBITaxa\nncbi = NCBITaxa()\nncbi.update_taxonomy_database()\nquit()\n</code></pre>\n<ul>\n<li>TypeError: concat() got an unexpected keyword argument 'sort'.\nIf you get this error, please update the python module pandas:</li>\n</ul>\n<pre><code>pip install pandas --upgrade --user\n</code></pre>\n<ul>\n<li>\n<p>WARNING: no NCBI's taxid found for accession [something], this match will not get taxonomic ranks</p>\n<p>This is not an error, this is just a warning indicating that one of your query sequences matchs to a genbank record for which the NCBI taxonomic identifier (taxid) is not known. CCMetagen therefore will not be able to assign taxonomic ranks to this match, but you will still be able to see it in the output file.</p>\n</li>\n<li>\n<p>KeyError: \"['Superkingdom' 'Kingdom' 'Phylum' 'Class' 'Order' 'Family' .... ] not in index\"\nMake sure that the output of CCMetagen ends in '.csv'.</p>\n</li>\n<li>\n<p>The results of the CCMetagen_merge.py at different taxonomic levels do not sum up.\nAs explained above, this script merges all unclassified taxa at a given taxonomic level. For example, if you have 20 matches to the genus <em>Candida</em>, but only 2 matches were classified at the species level, the output of CCMetagen_merge.py -t Species (default) will only have the abundances of two classified <em>Candida</em> species, while the others will be merged with the \"Unclassified\" taxa. The output of CCMetagen_merge.py -t Genus however will contain all 20 matches.\nIf this behaviour is undesirable, one option is to disable the similarity thresholds (use flag -off) - so that all taxonomic levels are reported regardless of their similarity to the reference sequence. Alternatively, you can cluster species at the 'Closest_match' (using the flag --tax_level Closest_match).</p>\n</li>\n</ul>\n<h2>Complete option list</h2>\n<p>CCMetagen:</p>\n<pre><code>usage: CCMetagen.py [-h] [-m MODE] -i RES_FP [-o OUTPUT_FP]\n                    [-r REFERENCE_DATABASE] [-du DEPTH_UNIT] [-map MAPSTAT]\n                    [-d DEPTH] [-c COVERAGE] [-q QUERY_IDENTITY] [-p PVALUE]\n                    [-st SPECIES_THRESHOLD] [-gt GENUS_THRESHOLD]\n                    [-ft FAMILY_THRESHOLD] [-ot ORDER_THRESHOLD]\n                    [-ct CLASS_THRESHOLD] [-pt PHYLUM_THRESHOLD]\n                    [-off TURN_OFF_SIM_THRESHOLDS] [--version]\n\noptional arguments:\n  -h, --help            show this help message and exit\n\n  -m MODE, --mode MODE  what do you want CCMetagen to do? Valid options are\n                        'visual', 'text' or 'both': text: parses kma, filters\n                        based on quality and output a text file with taxonomic\n                        information and detailed mapping information visual:\n                        parses kma, filters based on quality and output a\n                        simplified text file and a krona html file for\n                        visualization both: outputs both text and visual file\n                        formats. Default = both\n\n  -i RES_FP, --res_fp RES_FP\n                        Path to the KMA result (.res file)\n  -o OUTPUT_FP, --output_fp OUTPUT_FP\n                        Path to the output file. Default = CCMetagen_out\n  -r REFERENCE_DATABASE, --reference_database REFERENCE_DATABASE\n                        Which reference database was used. Options: UNITE,\n                        RefSeq or nt. Default = nt\n\n  -du DEPTH_UNIT, --depth_unit DEPTH_UNIT\n                        Desired unit for Depth(abundance) measurements.\n                        Default = kma (KMA default depth, which is the number\n                        of nucleotides overlapping each template, divided by\n                        the lengh of the template). Alternatively, you can\n                        have abundance calculated in Reads Per Million (RPM,\n                        option 'rpm'), or simply count the number of\n                        nucleotides overlaping the template (option 'nc'). If\n                        you use the 'nc' or 'rpm' options, remember to change\n                        the default --depth parameter accordingly. Valid\n                        options are nc, rpm and kma\n  -map MAPSTAT, --mapstat MAPSTAT\n                        Path to the mapstat file produced with KMA when using\n                        the -ef flag (.mapstat). Required when calculating\n                        abundances in RPM.\n  -d DEPTH, --depth DEPTH\n                        minimum sequencing depth. Default = 0.2. If you use\n                        --depth_unit nc, change this accordingly. For example,\n                        -d 200 (200 nucleotides) is similar to -d 0.2 when\n                        using the default '--depth_unit kma' option.\n\n  -c COVERAGE, --coverage COVERAGE\n                        Minimum coverage. Default = 20\n  -q QUERY_IDENTITY, --query_identity QUERY_IDENTITY\n                        Minimum query identity (Phylum level). Default = 50\n  -p PVALUE, --pvalue PVALUE\n                        Minimum p-value. Default = 0.05.\n  -st SPECIES_THRESHOLD, --species_threshold SPECIES_THRESHOLD\n                        Species-level similarity threshold. Default = 98.41\n  -gt GENUS_THRESHOLD, --genus_threshold GENUS_THRESHOLD\n                        Genus-level similarity threshold. Default = 96.31\n  -ft FAMILY_THRESHOLD, --family_threshold FAMILY_THRESHOLD\n                        Family-level similarity threshold. Default = 88.51\n  -ot ORDER_THRESHOLD, --order_threshold ORDER_THRESHOLD\n                        Order-level similarity threshold. Default = 81.21\n  -ct CLASS_THRESHOLD, --class_threshold CLASS_THRESHOLD\n                        Class-level similarity threshold. Default = 80.91\n  -pt PHYLUM_THRESHOLD, --phylum_threshold PHYLUM_THRESHOLD\n                        Phylum-level similarity threshold. Default = 0 - not\n                        applied\n  -off TURN_OFF_SIM_THRESHOLDS, --turn_off_sim_thresholds TURN_OFF_SIM_THRESHOLDS\n                        Turns simularity-based filtering off. Options = y or\n                        n. Default = n\n\n  --version             show program's version number and exit\n</code></pre>\n<p>CCMetagen_merge:</p>\n<pre><code>usage: CCMetagen_merge.py [-h] -i INPUT_FP [-t TAX_LEVEL] [-o OUTPUT_FP]\n                         [-kr KEEP_OR_REMOVE] [-l FILTERING_TAX_LEVEL]\n                         [-tlist TAXA_LIST]\n\noptional arguments:\n -h, --help            show this help message and exit\n -i INPUT_FP, --input_fp INPUT_FP\n                       Path to the folder containing CCMetagen text results.\n                       Note that files must end with \".csv\" and the folder\n                       should not contain other .csv files\n -t TAX_LEVEL, --tax_level TAX_LEVEL\n                       Taxonomic level to merge the results. Options:\n                       Closest_match (includes different genes for the same\n                       species), Species (Default), Genus, Family, Order,\n                       Class, Phylum, Kingdom and Superkingdom\n -o OUTPUT_FP, --output_fp OUTPUT_FP\n                       Path to the output file. Default = merged_samples\n -kr KEEP_OR_REMOVE, --keep_or_remove KEEP_OR_REMOVE\n                       keep or remove taxa. Options = k (keep), r (remove)\n                       and n (none, default)\n -l FILTERING_TAX_LEVEL, --filtering_tax_level FILTERING_TAX_LEVEL\n                       level to perform taxonomic filtering, default = none\n -tlist TAXA_LIST, --taxa_list TAXA_LIST\n                       list taxon names (comma-separated) that you want to\n                       keep or exclude\n</code></pre>\n\n          </div>"}, "last_serial": 6670945, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "06e44b43fa6996b93eb27b29567eb168", "sha256": "b5c672084348096e63d78fd3b78e6465df0a02aa7944176145bf730ff056177c"}, "downloads": -1, "filename": "CCMetagen-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "06e44b43fa6996b93eb27b29567eb168", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29121, "upload_time": "2020-02-06T00:48:03", "upload_time_iso_8601": "2020-02-06T00:48:03.732096Z", "url": "https://files.pythonhosted.org/packages/9a/0e/56452e1a3e3ccef3ec5922e0d563cff39daba2e26df80c5d1b5fe44439d7/CCMetagen-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a59c82dca197400713568b68e231ebb6", "sha256": "13d738ff62d4b601f56055fe4c29fa985e563f9eb8c1d06139c470f429f9c69e"}, "downloads": -1, "filename": "CCMetagen-0.1.tar.gz", "has_sig": false, "md5_digest": "a59c82dca197400713568b68e231ebb6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20981, "upload_time": "2020-02-06T00:48:06", "upload_time_iso_8601": "2020-02-06T00:48:06.311833Z", "url": "https://files.pythonhosted.org/packages/1b/54/a166d0a7cc8caf1d1b6701d8ce3baea8189a5e0fa37dded30611df267832/CCMetagen-0.1.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "021acb7c255086c13ed4f203615e60b6", "sha256": "729ec79e01fe62fe851f9eb95af785eea39f9c4b96c3017b65cd2531b92eb2d9"}, "downloads": -1, "filename": "CCMetagen-1.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "021acb7c255086c13ed4f203615e60b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29496, "upload_time": "2020-02-20T01:27:04", "upload_time_iso_8601": "2020-02-20T01:27:04.837106Z", "url": "https://files.pythonhosted.org/packages/1b/9c/29d1581672f11deca6df7d09e6f46edd888708a2cb57fe61676c28db88d5/CCMetagen-1.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de76a7bed5e21a565583572f6cddc581", "sha256": "fdec41b421bdd3eea24bf49cf13f8dd5d14ec0281dcc7d699f8b9e7d69efc60a"}, "downloads": -1, "filename": "CCMetagen-1.1.4.tar.gz", "has_sig": false, "md5_digest": "de76a7bed5e21a565583572f6cddc581", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21435, "upload_time": "2020-02-20T01:27:06", "upload_time_iso_8601": "2020-02-20T01:27:06.654940Z", "url": "https://files.pythonhosted.org/packages/e6/e0/9b402017f601b1950f161d7de4fd6301d57c9ccf4e5d8fcf14aee78516cc/CCMetagen-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "efb7ace3209196ac6d9c8eb9b8fd9628", "sha256": "d9b6446542a17f31cc55122d9c601affa4f19ea779a56055d18455d37976ceec"}, "downloads": -1, "filename": "CCMetagen-1.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "efb7ace3209196ac6d9c8eb9b8fd9628", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29533, "upload_time": "2020-02-20T01:48:57", "upload_time_iso_8601": "2020-02-20T01:48:57.984719Z", "url": "https://files.pythonhosted.org/packages/51/17/ce2ee1a002d486149651fae78932014c7d755f1a2ef2f738828d57a11917/CCMetagen-1.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1b2765767adf6ee0674cb2b90dc65f6", "sha256": "5881cd635cd940dec28ec0bd8722b9182fa55eaf81d06f473a45993f4260e34a"}, "downloads": -1, "filename": "CCMetagen-1.1.5.tar.gz", "has_sig": false, "md5_digest": "d1b2765767adf6ee0674cb2b90dc65f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21425, "upload_time": "2020-02-20T01:48:59", "upload_time_iso_8601": "2020-02-20T01:48:59.817191Z", "url": "https://files.pythonhosted.org/packages/3d/54/12d64c28fde77fa5120ef3eaba47a8075552e9625b2de83861835e06e698/CCMetagen-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "ccd4782c4784c47d587f1a2fc267f3b3", "sha256": "54a3faab64d2d5d5f525522b90d396c3079607e0832068158bb10c1fc62464e2"}, "downloads": -1, "filename": "CCMetagen-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ccd4782c4784c47d587f1a2fc267f3b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29538, "upload_time": "2020-02-20T22:02:45", "upload_time_iso_8601": "2020-02-20T22:02:45.616673Z", "url": "https://files.pythonhosted.org/packages/70/b6/10cb2304fc4b3317869fa2fc373e6a2e52136428f7c8af39d8f8e6b463b2/CCMetagen-1.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07209167e615e0193a0a486fad960186", "sha256": "1730d77cb9bb72a56a0692fbc6b43cd2d9bbe1a09f9becdcfb50b903b15d2641"}, "downloads": -1, "filename": "CCMetagen-1.1.6.tar.gz", "has_sig": false, "md5_digest": "07209167e615e0193a0a486fad960186", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21431, "upload_time": "2020-02-20T22:02:47", "upload_time_iso_8601": "2020-02-20T22:02:47.363623Z", "url": "https://files.pythonhosted.org/packages/1c/d6/0ba4c60428565ecabcbcc08f5e27b67d1fda1340dc471da6464aed70c1bb/CCMetagen-1.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ccd4782c4784c47d587f1a2fc267f3b3", "sha256": "54a3faab64d2d5d5f525522b90d396c3079607e0832068158bb10c1fc62464e2"}, "downloads": -1, "filename": "CCMetagen-1.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "ccd4782c4784c47d587f1a2fc267f3b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29538, "upload_time": "2020-02-20T22:02:45", "upload_time_iso_8601": "2020-02-20T22:02:45.616673Z", "url": "https://files.pythonhosted.org/packages/70/b6/10cb2304fc4b3317869fa2fc373e6a2e52136428f7c8af39d8f8e6b463b2/CCMetagen-1.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07209167e615e0193a0a486fad960186", "sha256": "1730d77cb9bb72a56a0692fbc6b43cd2d9bbe1a09f9becdcfb50b903b15d2641"}, "downloads": -1, "filename": "CCMetagen-1.1.6.tar.gz", "has_sig": false, "md5_digest": "07209167e615e0193a0a486fad960186", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21431, "upload_time": "2020-02-20T22:02:47", "upload_time_iso_8601": "2020-02-20T22:02:47.363623Z", "url": "https://files.pythonhosted.org/packages/1c/d6/0ba4c60428565ecabcbcc08f5e27b67d1fda1340dc471da6464aed70c1bb/CCMetagen-1.1.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:06 2020"}