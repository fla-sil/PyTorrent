{"info": {"author": "Grant Wilk", "author_email": "grant@remington.pro", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# YouTube Super Chat Monitor\n\nThe YouTube Super Chat Monitor (YTSCM) is a simplified API for live Super\nChat monitoring on YouTube. It enables you to easily poll the YouTube API for\nnew Super Chats and execute a custom function upon receipt of one.\n\nTo learn more about YTSCM, see the sections below.\n\n## Setup / Tutorial\n\n#### Step 1: Create an OAuth 2.0 Client ID\nThis library does not come packaged with an API key or OAuth Client ID, so\nyou will need to create your own. To create an OAuth Client ID, \n\n1. Create or select a project in the [Google API Console](https://console.developers.google.com/).\n2. In the [library panel](https://console.developers.google.com/apis/library), \nsearch for the YouTube Data API v3. Click into the listing for that API\nand make sure the API is enabled for your project.\n3. In the [credentials panel](https://console.developers.google.com/apis/credentials),\ncreate an OAuth 2.0 Client ID. Set the application type to **Other**.\n4. You may also be required to make an OAuth consent screen.\n5. Once the OAuth 2.0 Client ID has been created, return to the\n[credentials panel](https://console.developers.google.com/apis/credentials) and \ndownload the JSON file that contains your credentials. It should have a name\nlike `client_secret_CLIENTID.json`, where `CLIENTID` is the client ID for your\nproject.\n\n#### Step 2: Install YTSCM from PyPI\nYTSCM is readily available on PyPI and can be installed with pip. Simple open\na command line and enter the following command.\n\n`python -m pip install --upgrade ytscm`\n\nOnce installed, YTSCM is ready to be imported into your projects.\n\n#### Step 3: Run Through an Example Program\nBefore you go running off on your own, lets walk through an example use-case \nso you have a better understanding of how YTSCM works.\n\nStart by retyping or copying and pasting the script below into a local python\nfile.\n\n```python\nfrom ytscm import YTSCMonitor\n\n\ndef main():\n\n    # create a new super chat monitor\n    monitor = YTSCMonitor(\"YOUR_CLIENT_SECRET.json\", update_function)\n\n    # start monitoring super chats (update every 5 seconds)\n    monitor.start(interval=5)\n\n    # stop monitoring super chats\n    # monitor.stop()\n\n\ndef update_function(super_chat_event):\n    \"\"\"\n    This function gets called when our monitor detects a new Super Chat!\n    Prints out the name and amount of the supporter's Super Chat. \n    :param super_chat_event - the new Super Chat event\n    \"\"\"\n\n    # get an object containing information about the supporter\n    supporter_details = super_chat_event.get_supporter_details()\n\n    # get the supporter's channel name\n    display_name = supporter_details.get_display_name()\n\n    # get the amount of money our supporter donated as a string\n    amount_string = super_chat_event.get_display_string()\n\n    # print the name and amount that our supported donated\n    print(\"{0} sent a {1} Super Chat!\".format(display_name, amount_string))\n\n\nif __name__ == '__main__':\n    main()\n```\n\nNext, run the code. This can be done from within your IDE or from the\ncommand line with the command `python YOUR_FILE.py`.\n\nUpon running the file, you should be presented with the following message.\n\n```\nPlease visit this URL to authorize this application: << CRAZY LONG URL >>\nEnter the authorization code:\n```\n\nWe need to give our test program permission to access our YouTube account via\nthe OAuth Client ID we created. \n\nCopy and paste the URL into your web browser, select the Google/Brand account\nthat you want to poll for updates and give the OAuth Client ID permission to\nuse your YouTube account data.\n\nCopy the authorization code and paste it back into the console. Hit enter, \nand the monitor should start polling.\n\n```\nPlease visit this URL to authorize this application: << CRAZY LONG URL >>\nEnter the authorization code: << YOUR AUTHORIZATION CODE >>\nStarted monitoring Super Chats!\n```\n\nThe monitor is now polling for new Super Chats every `interval = 5` \nseconds. Any Super Chats received while polling will trigger the\n`update_function()` function, and will print the supporter's name and donation\namount to the console.\n\n```\nObi-Wan Kenobi sent a $5.00 Super Chat!\nC-3PO sent a $1.00 Super Chat!\nChewbacca sent a $10.00 Super Chat!\nDarth Maul sent a $2.00 Super Chat!\n```\n\nNow, you can take this code and create something amazing with it!\n\n## Class Structure Documentation\n\nAll YTSCM classes are derived from the JSON structure that Google specifies\non their [SuperChatEvents](https://developers.google.com/youtube/v3/live/docs/superChatEvents)\npage. More specific information about class structure and attributes can be\nfound there.\n\n#### YTSCMonitor\nMonitors YouTube Super Chat events and triggers an update function if a new \nSuper Chat is received.\n\n| Method                                            | Description                                                          |\n|---------------------------------------------------|----------------------------------------------------------------------|\n| YTSCMonitor(client_secrets_file, update_function) | Creates a new YTSCMonitor.                                           |\n| fetch()                                           | Manually fetches new Super Chats from YouTube one time.              |\n| start(interval)                                   | Begins automatically fetching new Super Chats at a regular interval. |\n| stop()                                            | Stops automatically fetching new Super Chats.                        |\n\n#### YTSCEvent\nContains YouTube Super Chat event attributes. All attributes are read-only.\n\n| Attribute         | Type                 | Getter Method           | Description                                                            |\n|-------------------|----------------------|-------------------------|------------------------------------------------------------------------|\n| id                | string               | get_id()                | An ID string unique to the Super Chat event.                           |\n| channel_id        | string               | get_channel_id()        | The channel ID of the creator hosting the live event.                  |\n| supporter_details | YTSCSupporterDetails | get_supporter_details() | Details about the supporter's channel.                                 |\n| comment_text      | string               | get_comment_text()      | The text content of the supporter's comment.                           |\n| created_at        | datetime (ISO 8601)  | get_created_at()        | The date and time when the Super Chat was sent.                        |\n| amount_micros     | unsigned long        | get_amount_micros()     | The Super Chat amount, in micros of the purchase currency.             |\n| currency          | string (ISO 4217)    | get_currency()          | The currency in which the Super Chat purchase was made.                |\n| display_string    | string               | get_display_string()    | A string, like $1.00, that shows the amount and currency.              |\n| message_type      | unsigned integer     | get_message_type()      | The tier for the paid message.                                         |\n\n#### YTSCSupporterDetails\nContains YouTube Super Chat supporter details. All attributes are read-only.\n\n| Attribute         | Type   | Getter Method           | Description                                  |\n|-------------------|--------|-------------------------|----------------------------------------------|\n| channel_id        | string | get_channel_id()        | The supporter's YouTube channel ID.          |\n| channel_url       | string | get_channel_url()       | The URL of the supporter's channel.          |\n| display_name      | string | get_display_name()      | The display name of the supporter's channel. |\n| profile_image_url | string | get_profile_image_url() | The avatar URL for the supporter's channel.  |\n\n## More Information\nIf you have any questions or concerns regarding this package, feel free to\nreach out to me via email (available in my profile). Other than that, \nhopefully you find some awesome ways to apply this to help promote super\nchats on your live streams!\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/grantwilk/youtube-super-chat-monitor", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ytscm", "package_url": "https://pypi.org/project/ytscm/", "platform": "", "project_url": "https://pypi.org/project/ytscm/", "project_urls": {"Homepage": "https://github.com/grantwilk/youtube-super-chat-monitor"}, "release_url": "https://pypi.org/project/ytscm/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A simplified API for live Super Chat monitoring on YouTube.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>YouTube Super Chat Monitor</h1>\n<p>The YouTube Super Chat Monitor (YTSCM) is a simplified API for live Super\nChat monitoring on YouTube. It enables you to easily poll the YouTube API for\nnew Super Chats and execute a custom function upon receipt of one.</p>\n<p>To learn more about YTSCM, see the sections below.</p>\n<h2>Setup / Tutorial</h2>\n<h4>Step 1: Create an OAuth 2.0 Client ID</h4>\n<p>This library does not come packaged with an API key or OAuth Client ID, so\nyou will need to create your own. To create an OAuth Client ID,</p>\n<ol>\n<li>Create or select a project in the <a href=\"https://console.developers.google.com/\" rel=\"nofollow\">Google API Console</a>.</li>\n<li>In the <a href=\"https://console.developers.google.com/apis/library\" rel=\"nofollow\">library panel</a>,\nsearch for the YouTube Data API v3. Click into the listing for that API\nand make sure the API is enabled for your project.</li>\n<li>In the <a href=\"https://console.developers.google.com/apis/credentials\" rel=\"nofollow\">credentials panel</a>,\ncreate an OAuth 2.0 Client ID. Set the application type to <strong>Other</strong>.</li>\n<li>You may also be required to make an OAuth consent screen.</li>\n<li>Once the OAuth 2.0 Client ID has been created, return to the\n<a href=\"https://console.developers.google.com/apis/credentials\" rel=\"nofollow\">credentials panel</a> and\ndownload the JSON file that contains your credentials. It should have a name\nlike <code>client_secret_CLIENTID.json</code>, where <code>CLIENTID</code> is the client ID for your\nproject.</li>\n</ol>\n<h4>Step 2: Install YTSCM from PyPI</h4>\n<p>YTSCM is readily available on PyPI and can be installed with pip. Simple open\na command line and enter the following command.</p>\n<p><code>python -m pip install --upgrade ytscm</code></p>\n<p>Once installed, YTSCM is ready to be imported into your projects.</p>\n<h4>Step 3: Run Through an Example Program</h4>\n<p>Before you go running off on your own, lets walk through an example use-case\nso you have a better understanding of how YTSCM works.</p>\n<p>Start by retyping or copying and pasting the script below into a local python\nfile.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ytscm</span> <span class=\"kn\">import</span> <span class=\"n\">YTSCMonitor</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># create a new super chat monitor</span>\n    <span class=\"n\">monitor</span> <span class=\"o\">=</span> <span class=\"n\">YTSCMonitor</span><span class=\"p\">(</span><span class=\"s2\">\"YOUR_CLIENT_SECRET.json\"</span><span class=\"p\">,</span> <span class=\"n\">update_function</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># start monitoring super chats (update every 5 seconds)</span>\n    <span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># stop monitoring super chats</span>\n    <span class=\"c1\"># monitor.stop()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">update_function</span><span class=\"p\">(</span><span class=\"n\">super_chat_event</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    This function gets called when our monitor detects a new Super Chat!</span>\n<span class=\"sd\">    Prints out the name and amount of the supporter's Super Chat. </span>\n<span class=\"sd\">    :param super_chat_event - the new Super Chat event</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"c1\"># get an object containing information about the supporter</span>\n    <span class=\"n\">supporter_details</span> <span class=\"o\">=</span> <span class=\"n\">super_chat_event</span><span class=\"o\">.</span><span class=\"n\">get_supporter_details</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get the supporter's channel name</span>\n    <span class=\"n\">display_name</span> <span class=\"o\">=</span> <span class=\"n\">supporter_details</span><span class=\"o\">.</span><span class=\"n\">get_display_name</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># get the amount of money our supporter donated as a string</span>\n    <span class=\"n\">amount_string</span> <span class=\"o\">=</span> <span class=\"n\">super_chat_event</span><span class=\"o\">.</span><span class=\"n\">get_display_string</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># print the name and amount that our supported donated</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{0}</span><span class=\"s2\"> sent a </span><span class=\"si\">{1}</span><span class=\"s2\"> Super Chat!\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">display_name</span><span class=\"p\">,</span> <span class=\"n\">amount_string</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Next, run the code. This can be done from within your IDE or from the\ncommand line with the command <code>python YOUR_FILE.py</code>.</p>\n<p>Upon running the file, you should be presented with the following message.</p>\n<pre><code>Please visit this URL to authorize this application: &lt;&lt; CRAZY LONG URL &gt;&gt;\nEnter the authorization code:\n</code></pre>\n<p>We need to give our test program permission to access our YouTube account via\nthe OAuth Client ID we created.</p>\n<p>Copy and paste the URL into your web browser, select the Google/Brand account\nthat you want to poll for updates and give the OAuth Client ID permission to\nuse your YouTube account data.</p>\n<p>Copy the authorization code and paste it back into the console. Hit enter,\nand the monitor should start polling.</p>\n<pre><code>Please visit this URL to authorize this application: &lt;&lt; CRAZY LONG URL &gt;&gt;\nEnter the authorization code: &lt;&lt; YOUR AUTHORIZATION CODE &gt;&gt;\nStarted monitoring Super Chats!\n</code></pre>\n<p>The monitor is now polling for new Super Chats every <code>interval = 5</code>\nseconds. Any Super Chats received while polling will trigger the\n<code>update_function()</code> function, and will print the supporter's name and donation\namount to the console.</p>\n<pre><code>Obi-Wan Kenobi sent a $5.00 Super Chat!\nC-3PO sent a $1.00 Super Chat!\nChewbacca sent a $10.00 Super Chat!\nDarth Maul sent a $2.00 Super Chat!\n</code></pre>\n<p>Now, you can take this code and create something amazing with it!</p>\n<h2>Class Structure Documentation</h2>\n<p>All YTSCM classes are derived from the JSON structure that Google specifies\non their <a href=\"https://developers.google.com/youtube/v3/live/docs/superChatEvents\" rel=\"nofollow\">SuperChatEvents</a>\npage. More specific information about class structure and attributes can be\nfound there.</p>\n<h4>YTSCMonitor</h4>\n<p>Monitors YouTube Super Chat events and triggers an update function if a new\nSuper Chat is received.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YTSCMonitor(client_secrets_file, update_function)</td>\n<td>Creates a new YTSCMonitor.</td>\n</tr>\n<tr>\n<td>fetch()</td>\n<td>Manually fetches new Super Chats from YouTube one time.</td>\n</tr>\n<tr>\n<td>start(interval)</td>\n<td>Begins automatically fetching new Super Chats at a regular interval.</td>\n</tr>\n<tr>\n<td>stop()</td>\n<td>Stops automatically fetching new Super Chats.</td>\n</tr></tbody></table>\n<h4>YTSCEvent</h4>\n<p>Contains YouTube Super Chat event attributes. All attributes are read-only.</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Getter Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>string</td>\n<td>get_id()</td>\n<td>An ID string unique to the Super Chat event.</td>\n</tr>\n<tr>\n<td>channel_id</td>\n<td>string</td>\n<td>get_channel_id()</td>\n<td>The channel ID of the creator hosting the live event.</td>\n</tr>\n<tr>\n<td>supporter_details</td>\n<td>YTSCSupporterDetails</td>\n<td>get_supporter_details()</td>\n<td>Details about the supporter's channel.</td>\n</tr>\n<tr>\n<td>comment_text</td>\n<td>string</td>\n<td>get_comment_text()</td>\n<td>The text content of the supporter's comment.</td>\n</tr>\n<tr>\n<td>created_at</td>\n<td>datetime (ISO 8601)</td>\n<td>get_created_at()</td>\n<td>The date and time when the Super Chat was sent.</td>\n</tr>\n<tr>\n<td>amount_micros</td>\n<td>unsigned long</td>\n<td>get_amount_micros()</td>\n<td>The Super Chat amount, in micros of the purchase currency.</td>\n</tr>\n<tr>\n<td>currency</td>\n<td>string (ISO 4217)</td>\n<td>get_currency()</td>\n<td>The currency in which the Super Chat purchase was made.</td>\n</tr>\n<tr>\n<td>display_string</td>\n<td>string</td>\n<td>get_display_string()</td>\n<td>A string, like $1.00, that shows the amount and currency.</td>\n</tr>\n<tr>\n<td>message_type</td>\n<td>unsigned integer</td>\n<td>get_message_type()</td>\n<td>The tier for the paid message.</td>\n</tr></tbody></table>\n<h4>YTSCSupporterDetails</h4>\n<p>Contains YouTube Super Chat supporter details. All attributes are read-only.</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Getter Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>channel_id</td>\n<td>string</td>\n<td>get_channel_id()</td>\n<td>The supporter's YouTube channel ID.</td>\n</tr>\n<tr>\n<td>channel_url</td>\n<td>string</td>\n<td>get_channel_url()</td>\n<td>The URL of the supporter's channel.</td>\n</tr>\n<tr>\n<td>display_name</td>\n<td>string</td>\n<td>get_display_name()</td>\n<td>The display name of the supporter's channel.</td>\n</tr>\n<tr>\n<td>profile_image_url</td>\n<td>string</td>\n<td>get_profile_image_url()</td>\n<td>The avatar URL for the supporter's channel.</td>\n</tr></tbody></table>\n<h2>More Information</h2>\n<p>If you have any questions or concerns regarding this package, feel free to\nreach out to me via email (available in my profile). Other than that,\nhopefully you find some awesome ways to apply this to help promote super\nchats on your live streams!</p>\n\n          </div>"}, "last_serial": 7097926, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "503d6e6166fdc14b47fcd6edb119619c", "sha256": "6e81ac88c53e4d8a7dac4410c5b7ff196d65abcdec1114b72c77ce5a7061f1e3"}, "downloads": -1, "filename": "ytscm-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "503d6e6166fdc14b47fcd6edb119619c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20582, "upload_time": "2020-04-25T05:36:29", "upload_time_iso_8601": "2020-04-25T05:36:29.684286Z", "url": "https://files.pythonhosted.org/packages/7c/7a/5a4204a83258afe6ef467d1214a29c42d9bc05c942c7e8f719408f6f6ec0/ytscm-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bcd9e17ae5d509e7ae917ecdd17927b", "sha256": "29e59fcfffe94f1f6b51af6a33a12cbd8bd9e491f1bb77e6f639799170d767e7"}, "downloads": -1, "filename": "ytscm-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0bcd9e17ae5d509e7ae917ecdd17927b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9417, "upload_time": "2020-04-25T05:36:31", "upload_time_iso_8601": "2020-04-25T05:36:31.539531Z", "url": "https://files.pythonhosted.org/packages/4a/b0/75f08a95641523de0425d6b4c0c64d0a6a9cc641fde7c3bea86e44c4e289/ytscm-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "503d6e6166fdc14b47fcd6edb119619c", "sha256": "6e81ac88c53e4d8a7dac4410c5b7ff196d65abcdec1114b72c77ce5a7061f1e3"}, "downloads": -1, "filename": "ytscm-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "503d6e6166fdc14b47fcd6edb119619c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20582, "upload_time": "2020-04-25T05:36:29", "upload_time_iso_8601": "2020-04-25T05:36:29.684286Z", "url": "https://files.pythonhosted.org/packages/7c/7a/5a4204a83258afe6ef467d1214a29c42d9bc05c942c7e8f719408f6f6ec0/ytscm-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0bcd9e17ae5d509e7ae917ecdd17927b", "sha256": "29e59fcfffe94f1f6b51af6a33a12cbd8bd9e491f1bb77e6f639799170d767e7"}, "downloads": -1, "filename": "ytscm-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0bcd9e17ae5d509e7ae917ecdd17927b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9417, "upload_time": "2020-04-25T05:36:31", "upload_time_iso_8601": "2020-04-25T05:36:31.539531Z", "url": "https://files.pythonhosted.org/packages/4a/b0/75f08a95641523de0425d6b4c0c64d0a6a9cc641fde7c3bea86e44c4e289/ytscm-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:21:29 2020"}