{"info": {"author": "John Omotani, Ben Dudson and the BOUT++ team", "author_email": "john.omotani@ukaea.uk", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Dependencies\n------------\n\n- options module ('pip3 install --user options')\n- yaml module ('pip3 install --user PyYAML')\n- scipy (recent enough version, tested with 1.3.0 'pip3 install --user --upgrade scipy')\n\n\nInstallation\n------------\n\n#### From PyPi\n\nThe simplest way to get hypnotoad is by simply running\n\n    $ pip install --user hypnotoad\n\n#### git repo\n\nIf you need to modify the hypnotoad code, or get development versions, clone\nfrom github\n\n    $ git clone git@github.com:boutproject/hypnotoad.git\n\nYou can install from the git repo with ``pip``, this is useful to get the\nexecutables added to your path. Make sure to do an 'editable' install using\n``-e`` or ``--editable`` option like\n\n    $ cd hypnotoad\n    $ pip install -e .\n\nThis installs executables which use the code that's currently in the git repo,\nso if you edit or update it you will see the updates. If you install with ``pip\ninstall .`` (without the ``-e``) then ``pip`` can get confused because it can't\ntell which version number is newer, as the git repo versions have a version\nnumber based on the git hash, not a simple x.y.z; then pip may for example not\nuninstall hypnotoad correctly.\n\n\nUsage\n-----\n\nOptions are read and set up in the Equilibrium (child-)class object, and passed\nfrom there to the Mesh (child-)class object.\n\nUser-settable options, with their current values, are printed when an\nEquilibrium object is created.  Internal options should not need to be set by\nthe user, but can be overridden with keyword arguments to the Equilibrium\nconstructor.\n\nHypnotoad can be run either as an executable, which just reads from an input\nfile, or interactively from a Python shell. To ensure reproducibility, it is\nsuggested to create your final grid non-interactively. The interactive mode is\nintended to make it easier to prototype the grid and find a good set of input\nparameters. Once you have found a configuration you are happy with, you can\nsave the current input parameters with\nEquilibrium.saveOptions(filename='hypnotoad\\_options.yaml'); this may be\nespecially useful if you have changed some options from the Python shell with\nkeyword-arguments.\n\nGrid generation can take a while with the default options, which are set for\nhigh accuracy. When prototyping, it is suggested to temporarily use lower\naccuracy. The following may be a good starting point:\n- finecontour\\_Nfine=100. This speeds up the creation of the internal,\n  high-resolution, fixed-spacing representation of contours, and also\n  calculations of distance along contours and some interpolation functions.\n- gradPsiRtol=2.e-6 and gradPsiAtol=1.e-6. These control the maximum error on\n  the integration along grad(psi) used to trace grid lines orthogonal to the\n  flux surfaces. They do not usually make a huge difference, but affect the\n  time spent in 'Following perpendicular'.\n- If your wall is given by a large number of points (say more than 20) it might\n  be worth creating a simpler one with fewer points for prototyping. This will\n  speed up the 'finding wall intersections' stage. Note that the wall only\n  matters where it intersects the grid.\n- Decreasing the resolution of the grid will also help. The grid points will\n  probably not be in exactly the same place, but the algorithms are intended to\n  produce grid spacings that are inversely proportional to the total number of\n  points, so the structure should be very similar.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/boutproject/hypnotoad", "keywords": "", "license": "OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "hypnotoad", "package_url": "https://pypi.org/project/hypnotoad/", "platform": "", "project_url": "https://pypi.org/project/hypnotoad/", "project_urls": {"Homepage": "https://github.com/boutproject/hypnotoad"}, "release_url": "https://pypi.org/project/hypnotoad/0.1.0/", "requires_dist": ["boututils (~=0.1.4)", "matplotlib (~=3.2)", "netCDF4 (~=1.5)", "numpy (~=1.18)", "options (~=1.4)", "pyparsing (~=2.4)", "PyYAML (~=5.1)", "scipy (~=1.4)", "Qt.py (~=1.2)", "PyQt5 (~=5.12) ; extra == 'gui-pyqt5'", "pyside2 (~=5.14) ; extra == 'gui-pyside2'"], "requires_python": ">=3.6", "summary": "Grid generator for BOUT++", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Dependencies</h2>\n<ul>\n<li>options module ('pip3 install --user options')</li>\n<li>yaml module ('pip3 install --user PyYAML')</li>\n<li>scipy (recent enough version, tested with 1.3.0 'pip3 install --user --upgrade scipy')</li>\n</ul>\n<h2>Installation</h2>\n<h4>From PyPi</h4>\n<p>The simplest way to get hypnotoad is by simply running</p>\n<pre><code>$ pip install --user hypnotoad\n</code></pre>\n<h4>git repo</h4>\n<p>If you need to modify the hypnotoad code, or get development versions, clone\nfrom github</p>\n<pre><code>$ git clone git@github.com:boutproject/hypnotoad.git\n</code></pre>\n<p>You can install from the git repo with <code>pip</code>, this is useful to get the\nexecutables added to your path. Make sure to do an 'editable' install using\n<code>-e</code> or <code>--editable</code> option like</p>\n<pre><code>$ cd hypnotoad\n$ pip install -e .\n</code></pre>\n<p>This installs executables which use the code that's currently in the git repo,\nso if you edit or update it you will see the updates. If you install with <code>pip install .</code> (without the <code>-e</code>) then <code>pip</code> can get confused because it can't\ntell which version number is newer, as the git repo versions have a version\nnumber based on the git hash, not a simple x.y.z; then pip may for example not\nuninstall hypnotoad correctly.</p>\n<h2>Usage</h2>\n<p>Options are read and set up in the Equilibrium (child-)class object, and passed\nfrom there to the Mesh (child-)class object.</p>\n<p>User-settable options, with their current values, are printed when an\nEquilibrium object is created.  Internal options should not need to be set by\nthe user, but can be overridden with keyword arguments to the Equilibrium\nconstructor.</p>\n<p>Hypnotoad can be run either as an executable, which just reads from an input\nfile, or interactively from a Python shell. To ensure reproducibility, it is\nsuggested to create your final grid non-interactively. The interactive mode is\nintended to make it easier to prototype the grid and find a good set of input\nparameters. Once you have found a configuration you are happy with, you can\nsave the current input parameters with\nEquilibrium.saveOptions(filename='hypnotoad_options.yaml'); this may be\nespecially useful if you have changed some options from the Python shell with\nkeyword-arguments.</p>\n<p>Grid generation can take a while with the default options, which are set for\nhigh accuracy. When prototyping, it is suggested to temporarily use lower\naccuracy. The following may be a good starting point:</p>\n<ul>\n<li>finecontour_Nfine=100. This speeds up the creation of the internal,\nhigh-resolution, fixed-spacing representation of contours, and also\ncalculations of distance along contours and some interpolation functions.</li>\n<li>gradPsiRtol=2.e-6 and gradPsiAtol=1.e-6. These control the maximum error on\nthe integration along grad(psi) used to trace grid lines orthogonal to the\nflux surfaces. They do not usually make a huge difference, but affect the\ntime spent in 'Following perpendicular'.</li>\n<li>If your wall is given by a large number of points (say more than 20) it might\nbe worth creating a simpler one with fewer points for prototyping. This will\nspeed up the 'finding wall intersections' stage. Note that the wall only\nmatters where it intersects the grid.</li>\n<li>Decreasing the resolution of the grid will also help. The grid points will\nprobably not be in exactly the same place, but the algorithms are intended to\nproduce grid spacings that are inversely proportional to the total number of\npoints, so the structure should be very similar.</li>\n</ul>\n\n          </div>"}, "last_serial": 7093660, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7ff7c620816bb95c2e81f20267d807ab", "sha256": "47823bbd8c899dd47b67ef1510f519df17a9b2be229ed7512dbf8125e6646d5d"}, "downloads": -1, "filename": "hypnotoad-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7ff7c620816bb95c2e81f20267d807ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 118841, "upload_time": "2020-04-24T14:54:59", "upload_time_iso_8601": "2020-04-24T14:54:59.389301Z", "url": "https://files.pythonhosted.org/packages/6e/61/4566ea9a48f7b911fe8f611e2c320fda823e225df77a9f9aeab0f170da22/hypnotoad-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bec227906c9ae749de9c078c66701746", "sha256": "3c7126083b92b0280928023c38f9759eb5ed27f47381fecf165a4a2696bb6225"}, "downloads": -1, "filename": "hypnotoad-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bec227906c9ae749de9c078c66701746", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 112347, "upload_time": "2020-04-24T14:55:01", "upload_time_iso_8601": "2020-04-24T14:55:01.222602Z", "url": "https://files.pythonhosted.org/packages/52/8b/e30302afd60b1b93c045db2b7cc0f256d3ea76c56fe8d9a616244e0c5dff/hypnotoad-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7ff7c620816bb95c2e81f20267d807ab", "sha256": "47823bbd8c899dd47b67ef1510f519df17a9b2be229ed7512dbf8125e6646d5d"}, "downloads": -1, "filename": "hypnotoad-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7ff7c620816bb95c2e81f20267d807ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 118841, "upload_time": "2020-04-24T14:54:59", "upload_time_iso_8601": "2020-04-24T14:54:59.389301Z", "url": "https://files.pythonhosted.org/packages/6e/61/4566ea9a48f7b911fe8f611e2c320fda823e225df77a9f9aeab0f170da22/hypnotoad-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bec227906c9ae749de9c078c66701746", "sha256": "3c7126083b92b0280928023c38f9759eb5ed27f47381fecf165a4a2696bb6225"}, "downloads": -1, "filename": "hypnotoad-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bec227906c9ae749de9c078c66701746", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 112347, "upload_time": "2020-04-24T14:55:01", "upload_time_iso_8601": "2020-04-24T14:55:01.222602Z", "url": "https://files.pythonhosted.org/packages/52/8b/e30302afd60b1b93c045db2b7cc0f256d3ea76c56fe8d9a616244e0c5dff/hypnotoad-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:28 2020"}