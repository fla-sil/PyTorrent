{"info": {"author": "Oliver Chalkley", "author_email": "oliver.chalkley83@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "=============================\nManage computer communication\n=============================\n\n-------------------------------------------------\nwith the computer_communication_framework library\n-------------------------------------------------\nThis uses the README.rst file from https://github.com/pypa/sampleproject as a template.\n\nThis is the README file for the project.\n\nThis is primarily meant to be a quick an easy way to implement programs over multiple computers. It is intended for someone that has never implemented a program across multiple computers and is not sure what tools to use. This provides a very basic framework to send commands to other computers whilst making sure the connection is made whilst not DDoS attacking when there's a connection problem. It should enable quick proof-of-concept type projects to get off the ground quickly. Once the user has done her proof-of-concept then hopefully she will better know what skills and tools she needs to start learning inorder to create a proper implementation of the project.\n\nThis is meant to be very basic in-order to be quick to pick up but as a result probably not very good to do proper development.\n\nThis provides abstract classes that act as templates with which to build child classes in a modular and consistent manner. It aims to start with the most atomistic type commands like create files and transfer to other computers and builds up to running complex multi-generation algorithms across multiple clusters.\n\nLevel 0:\n========\n\nOne should create a class that holds methods for the most basic types of tasks needed. This class will inherit from the Connection class in base_connection.py. All communication to this specific computer can now got through the checkSuccess method inherited from the Connection base class.\n\nLevel 1:\n========\n\nNormal computers:\n-----------------\n\nIf your automation task is simple then you may just need to write a Python script that directly uses the connection class from Level 0 to control the other computers.\n\nIf your automation task is a little more omplex you may wish to add methods to your class that group complex task up together and then carry on as in the simple version.\n\nIf your automation task is much more complex then you may need to create a whole new class that creates connection instances as and when needed - an example of this can be seen in the next section 'computer clusters'.\n\nComputer clusters:\n------------------\n\nClusters normally have some kind of queuing system as well as non-standard commands (e.g. computers with shared disk storage sometimes have bespoke commands to get a users disk quota).\n\nIn order to take into account these difficulties we created another abstract class to provide a template with which to submit jobs to a cluster queue and then also to monitor the progress of the job and perform other related tasks (e.g. data processing or updating a database once a job is finished).\n\nThis is split into two different base classes:\n* base_cluster_submissions.BaseJobSubmission - This contains all the information needed to prepare a job for submission and then to submit the job. All connections to the cluster are performed through the connection instance.\n* base_cluster_submissions.BaseManageSubmission - This prepares and submits jobs using instances of classes that inherit from the BaseJobSubmission class. Using these objects it is able to monitor the jobs progress and perform additional tasks.\n\nLevel 2:\n========\n\nMulti-generation algorithms\n---------------------------\nMulti-generation algorithms are algorithms that perform tasks (this is the start of a generation), wait for the tasks to finish and potentially gain data from the tasks before then performing new tasks (this is the start of a new generation). For multi-generation algorithms we use the names 'parents' and 'children' to differentiate between two connected generations.\n\nbase_mga.MGA is an abstract class that acts as a template for all multi-generation algorithms. The specific details of the multi-generation algorithm will be coded into a child class that inherits from the MGA class. \n\nThese multigeneration algoritms can then use connection objects that inherit from the base_connection.Connection class and/or the submission classes from base_cluster_submissions.py in order to split their task across multiple computers and/or clusters.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oliver-chalkley/computer_communication_framework", "keywords": "remote computer control framework management communicate communication", "license": "", "maintainer": "", "maintainer_email": "", "name": "computer_communication_framework", "package_url": "https://pypi.org/project/computer_communication_framework/", "platform": "", "project_url": "https://pypi.org/project/computer_communication_framework/", "project_urls": {"Homepage": "https://github.com/oliver-chalkley/computer_communication_framework"}, "release_url": "https://pypi.org/project/computer_communication_framework/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "A quick and simple framework to develop proof-of-concept programs that use multiple computers.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This uses the README.rst file from <a href=\"https://github.com/pypa/sampleproject\" rel=\"nofollow\">https://github.com/pypa/sampleproject</a> as a template.</p>\n<p>This is the README file for the project.</p>\n<p>This is primarily meant to be a quick an easy way to implement programs over multiple computers. It is intended for someone that has never implemented a program across multiple computers and is not sure what tools to use. This provides a very basic framework to send commands to other computers whilst making sure the connection is made whilst not DDoS attacking when there\u2019s a connection problem. It should enable quick proof-of-concept type projects to get off the ground quickly. Once the user has done her proof-of-concept then hopefully she will better know what skills and tools she needs to start learning inorder to create a proper implementation of the project.</p>\n<p>This is meant to be very basic in-order to be quick to pick up but as a result probably not very good to do proper development.</p>\n<p>This provides abstract classes that act as templates with which to build child classes in a modular and consistent manner. It aims to start with the most atomistic type commands like create files and transfer to other computers and builds up to running complex multi-generation algorithms across multiple clusters.</p>\n<div id=\"level-0\">\n<h2>Level 0:</h2>\n<p>One should create a class that holds methods for the most basic types of tasks needed. This class will inherit from the Connection class in base_connection.py. All communication to this specific computer can now got through the checkSuccess method inherited from the Connection base class.</p>\n</div>\n<div id=\"level-1\">\n<h2>Level 1:</h2>\n<div id=\"normal-computers\">\n<h3>Normal computers:</h3>\n<p>If your automation task is simple then you may just need to write a Python script that directly uses the connection class from Level 0 to control the other computers.</p>\n<p>If your automation task is a little more omplex you may wish to add methods to your class that group complex task up together and then carry on as in the simple version.</p>\n<p>If your automation task is much more complex then you may need to create a whole new class that creates connection instances as and when needed - an example of this can be seen in the next section \u2018computer clusters\u2019.</p>\n</div>\n<div id=\"computer-clusters\">\n<h3>Computer clusters:</h3>\n<p>Clusters normally have some kind of queuing system as well as non-standard commands (e.g. computers with shared disk storage sometimes have bespoke commands to get a users disk quota).</p>\n<p>In order to take into account these difficulties we created another abstract class to provide a template with which to submit jobs to a cluster queue and then also to monitor the progress of the job and perform other related tasks (e.g. data processing or updating a database once a job is finished).</p>\n<p>This is split into two different base classes:\n* base_cluster_submissions.BaseJobSubmission - This contains all the information needed to prepare a job for submission and then to submit the job. All connections to the cluster are performed through the connection instance.\n* base_cluster_submissions.BaseManageSubmission - This prepares and submits jobs using instances of classes that inherit from the BaseJobSubmission class. Using these objects it is able to monitor the jobs progress and perform additional tasks.</p>\n</div>\n</div>\n<div id=\"level-2\">\n<h2>Level 2:</h2>\n<h2 id=\"multi-generation-algorithms\"><span class=\"section-subtitle\">Multi-generation algorithms</span></h2>\n<p>Multi-generation algorithms are algorithms that perform tasks (this is the start of a generation), wait for the tasks to finish and potentially gain data from the tasks before then performing new tasks (this is the start of a new generation). For multi-generation algorithms we use the names \u2018parents\u2019 and \u2018children\u2019 to differentiate between two connected generations.</p>\n<p>base_mga.MGA is an abstract class that acts as a template for all multi-generation algorithms. The specific details of the multi-generation algorithm will be coded into a child class that inherits from the MGA class.</p>\n<p>These multigeneration algoritms can then use connection objects that inherit from the base_connection.Connection class and/or the submission classes from base_cluster_submissions.py in order to split their task across multiple computers and/or clusters.</p>\n</div>\n\n          </div>"}, "last_serial": 3756309, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "68b834bdbac122c960558e81685fd2ec", "sha256": "3e0ab23d05e11516874f35d6a239d1a54efde771541c23d8000b15dc93809f92"}, "downloads": -1, "filename": "computer_communication_framework-0.0.2.tar.gz", "has_sig": false, "md5_digest": "68b834bdbac122c960558e81685fd2ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33586, "upload_time": "2018-04-11T18:48:08", "upload_time_iso_8601": "2018-04-11T18:48:08.497644Z", "url": "https://files.pythonhosted.org/packages/c1/39/7809c944673649558513c08652f71076a07068b24ea85fac4233ec802604/computer_communication_framework-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "68b834bdbac122c960558e81685fd2ec", "sha256": "3e0ab23d05e11516874f35d6a239d1a54efde771541c23d8000b15dc93809f92"}, "downloads": -1, "filename": "computer_communication_framework-0.0.2.tar.gz", "has_sig": false, "md5_digest": "68b834bdbac122c960558e81685fd2ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33586, "upload_time": "2018-04-11T18:48:08", "upload_time_iso_8601": "2018-04-11T18:48:08.497644Z", "url": "https://files.pythonhosted.org/packages/c1/39/7809c944673649558513c08652f71076a07068b24ea85fac4233ec802604/computer_communication_framework-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:09 2020"}