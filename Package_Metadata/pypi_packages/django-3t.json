{"info": {"author": "Yuri Farina", "author_email": "me@yurifarina.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": ".. image:: https://img.shields.io/pypi/v/django-3t\n    :alt: PyPI Version\n    :target: https://pypi.python.org/pypi/pytest-3t\n\n.. image:: https://img.shields.io/travis/yurifari/django-3t\n    :alt: Travis Build\n    :target: https://travis-ci.org/yurifari/django-3t\n\n.. image:: https://img.shields.io/codecov/c/github/yurifari/django-3t\n    :alt: Code Coverage\n    :target: https://codecov.io/gh/yurifari/django-3t\n\n.. image:: https://img.shields.io/github/license/yurifari/django-3t\n    :alt: License\n    :target: https://github.com/yurifari/django-3t\n\nDjango 3T\n#########\n\nDjango 3T is a Django Template Testing Tool which aims to help developers to write better tests where the Django template engine is involved.\n\nSome of the things you can do with Django 3T include:\n\n- Ensure a specific ``template``, ``node`` or ``block`` is rendered\n- Ensure a specific ``template``, ``node`` or ``block`` is rendered a specific amount of times\n- Ensure a specific ``template`` is rendered with a specific context subset\n- Ensure a specific ``node`` is rendered with specific arguments\n- Ensure a specific ``template``, ``node`` or ``block`` results in a specific content or includes it\n\n.. _installation:\n\nInstallation\n************\n::\n\n    pip install django-3t\n\n.. _usage:\n\nUsage\n*****\nDjango 3T uses the ``watch_templates`` context manager to intercept template and node renderings.\n\nSuppose your project implements the following template called ``homepage.html``:\n\n.. code-block:: html\n\n    {% load say_hello from project_tags %}\n    \n    <h1>The most useful website ever</h1>\n    \n    {% say_hello request.user %}\n\nA test that makes sure your template and template tag are rendered correctly would roughly look like this:\n\n.. code-block:: python\n\n    from django.contrib.auth import get_user_model\n    from django.test import Client\n    \n    # 1. Import the context manager\n    from d3t.watcher import watch_templates\n    \n    User = get_user_model()\n    \n    def test_homepage():\n        user = User.objects.get(username='Billy')\n        client = Client()\n        client.force_login(user)\n        \n        # 2. Wrap the code where the rendering happens\n        with watch_templates as rendered:\n            client.get('/')\n    \n        # 3. Assert!\n        assert rendered.template('homepage.html')\n        assert rendered.node('say_hello').with_arguments(user)\n\nThe first assertion makes sure the template ``homepage.html`` was rendered, the second assertion makes sure the template tag ``say_hello`` was rendered and it was done using ``user`` as argument.\n\nFor a comprehensive list of available methods, check the `API section <api_>`_.\n\n.. _api:\n\nAPI\n***\nYou can check that a template, node or block has been rendered and that it did under specific conditions\n\n.. _template-api:\n\nTemplate API\n=================\nCheck that it has been rendered\n\n.. code-block:: python\n\n    rendered.template('template-name.html')\n\nCheck that it has been rendered with a specific context subset\n\n.. code-block:: python\n\n    rendered.template('template-name.html').with_context({'answer': 42})\n\nCheck that it has been rendered and the output contains a specific string\n\n.. code-block:: python\n\n    rendered.template('template-name.html').contains('content')\n\nCheck that it has been rendered and the output equals a specific string\n\n.. code-block:: python\n\n    rendered.template('template-name.html').equals('full content')\n\n.. _node-api:\n\nNode API\n=================\nCheck that it has been rendered\n\n.. code-block:: python\n\n    rendered.node('node_name')\n\nCheck that it has been rendered with specific arguments\n\n.. code-block:: python\n\n    rendered.node('node_name').with_arguments(42, type='answer')\n\nCheck that it has been rendered and the output contains a specific string\n\n.. code-block:: python\n\n    rendered.node('node_name').contains('content')\n\nCheck that it has been rendered and the output equals a specific string\n\n.. code-block:: python\n\n    rendered.node('node_name').equals('full content')\n\n.. _block-api:\n\nBlock API\n=================\nCheck that it has been rendered\n\n.. code-block:: python\n\n    rendered.block('block-name')\n\nCheck that it has been rendered and the output contains a specific string\n\n.. code-block:: python\n\n    rendered.block('block-name').contains('content')\n\nCheck that it has been rendered and the output equals a specific string\n\n.. code-block:: python\n\n    rendered.block('block-name').equals('full content')\n\n.. _handling-multiple-renderings:\n\nHandling multilpe renderings\n============================\n\nA template, node or block could be rendered any number of times, Django 3T allows you to take control of this giving support for the ``not`` operator and for the ``len``, ``all`` and ``any`` built-in functions:\n\nCheck that a template/node/block has not been rendered\n\n.. code-block:: python\n\n    not rendered.template('template-name.html')\n\nCheck that a template/node/block has been rendered a specific amount of times\n\n.. code-block:: python\n\n    len(rendered.node('node_name')) == 3\n\nCheck that all the template/node/block renderings happened under a specific condition\n\n.. code-block:: python\n\n    all(rendered.block('block-name').contains('content'))\n\nCheck that any of the template/node/block renderings happened under a specific condition\n\n.. code-block:: python\n\n    any(rendered.template('template-name.html').equals('specific content'))\n\n.. _signals:\n\nSignals\n*******\ntemplate_rendered\n=================\n``d3t.signals.template_rendered``\n\nThis is sent immediately after a template is rendered.\n\nArguments sent with this signal:\n\n- | **sender**\n  | The ``Template`` class.\n\n- | **instance**\n  | The actual template instance being rendered.\n\n- | **context**\n  | The context used to render the template.\n\n- | **result**\n  | The resulting rendered output.\n\nnode_rendered\n=================\n``d3t.signals.node_rendered``\n\nThis is sent immediately after a node is rendered.\n\nArguments sent with this signal:\n\n- | **sender**\n  | The ``Node`` class.\n\n- | **instance**\n  | The actual node instance being rendered.\n\n- | **result**\n  | The resulting rendered output.", "description_content_type": "text/x-rst; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yurifari/django-3t", "keywords": "django,template,test,unittest", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-3t", "package_url": "https://pypi.org/project/django-3t/", "platform": "any", "project_url": "https://pypi.org/project/django-3t/", "project_urls": {"Homepage": "https://github.com/yurifari/django-3t", "Source": "https://github.com/yurifari/django-3t", "Tracker": "https://github.com/yurifari/django-3t/issues"}, "release_url": "https://pypi.org/project/django-3t/1.0.0a1/", "requires_dist": null, "requires_python": "", "summary": "Django 3T is a Django Template Testing Tool which aims to help developers to write better tests where the Django template engine is involved.", "version": "1.0.0a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/pytest-3t\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e986a2f80d72fc5ff04bc794583fd5671569b4b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d3374\"></a>\n<a href=\"https://travis-ci.org/yurifari/django-3t\" rel=\"nofollow\"><img alt=\"Travis Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4dd16e2b8634d7bf260e621398cb7ad2b8a4a5c5/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f79757269666172692f646a616e676f2d3374\"></a>\n<a href=\"https://codecov.io/gh/yurifari/django-3t\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0005294ed6dc282ab8da150af8e1698a1af7f85f/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f79757269666172692f646a616e676f2d3374\"></a>\n<a href=\"https://github.com/yurifari/django-3t\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86a097de83c65a42ac98173010c896dfb24dfb04/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f79757269666172692f646a616e676f2d3374\"></a>\n<div id=\"django-3t\">\n<h2>Django 3T</h2>\n<p>Django 3T is a Django Template Testing Tool which aims to help developers to write better tests where the Django template engine is involved.</p>\n<p>Some of the things you can do with Django 3T include:</p>\n<ul>\n<li>Ensure a specific <tt>template</tt>, <tt>node</tt> or <tt>block</tt> is rendered</li>\n<li>Ensure a specific <tt>template</tt>, <tt>node</tt> or <tt>block</tt> is rendered a specific amount of times</li>\n<li>Ensure a specific <tt>template</tt> is rendered with a specific context subset</li>\n<li>Ensure a specific <tt>node</tt> is rendered with specific arguments</li>\n<li>Ensure a specific <tt>template</tt>, <tt>node</tt> or <tt>block</tt> results in a specific content or includes it</li>\n</ul>\n<div id=\"id1\">\n<span id=\"installation\"></span><h3>Installation</h3>\n<pre>pip install django-3t\n</pre>\n</div>\n<div id=\"id2\">\n<span id=\"usage\"></span><h3>Usage</h3>\n<p>Django 3T uses the <tt>watch_templates</tt> context manager to intercept template and node renderings.</p>\n<p>Suppose your project implements the following template called <tt>homepage.html</tt>:</p>\n<pre>{% load say_hello from project_tags %}\n\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>The most useful website ever<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n\n{% say_hello request.user %}\n</pre>\n<p>A test that makes sure your template and template tag are rendered correctly would roughly look like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">get_user_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"c1\"># 1. Import the context manager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">d3t.watcher</span> <span class=\"kn\">import</span> <span class=\"n\">watch_templates</span>\n\n<span class=\"n\">User</span> <span class=\"o\">=</span> <span class=\"n\">get_user_model</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_homepage</span><span class=\"p\">():</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s1\">'Billy'</span><span class=\"p\">)</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">force_login</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 2. Wrap the code where the rendering happens</span>\n    <span class=\"k\">with</span> <span class=\"n\">watch_templates</span> <span class=\"k\">as</span> <span class=\"n\">rendered</span><span class=\"p\">:</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 3. Assert!</span>\n    <span class=\"k\">assert</span> <span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">'homepage.html'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"s1\">'say_hello'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_arguments</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n</pre>\n<p>The first assertion makes sure the template <tt>homepage.html</tt> was rendered, the second assertion makes sure the template tag <tt>say_hello</tt> was rendered and it was done using <tt>user</tt> as argument.</p>\n<p>For a comprehensive list of available methods, check the <a href=\"#api\" rel=\"nofollow\">API section</a>.</p>\n</div>\n<div id=\"id3\">\n<span id=\"api\"></span><h3>API</h3>\n<p>You can check that a template, node or block has been rendered and that it did under specific conditions</p>\n<div id=\"id4\">\n<span id=\"template-api\"></span><h4>Template API</h4>\n<p>Check that it has been rendered</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">'template-name.html'</span><span class=\"p\">)</span>\n</pre>\n<p>Check that it has been rendered with a specific context subset</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">'template-name.html'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_context</span><span class=\"p\">({</span><span class=\"s1\">'answer'</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">})</span>\n</pre>\n<p>Check that it has been rendered and the output contains a specific string</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">'template-name.html'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'content'</span><span class=\"p\">)</span>\n</pre>\n<p>Check that it has been rendered and the output equals a specific string</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">'template-name.html'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">equals</span><span class=\"p\">(</span><span class=\"s1\">'full content'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id5\">\n<span id=\"node-api\"></span><h4>Node API</h4>\n<p>Check that it has been rendered</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"s1\">'node_name'</span><span class=\"p\">)</span>\n</pre>\n<p>Check that it has been rendered with specific arguments</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"s1\">'node_name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_arguments</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'answer'</span><span class=\"p\">)</span>\n</pre>\n<p>Check that it has been rendered and the output contains a specific string</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"s1\">'node_name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'content'</span><span class=\"p\">)</span>\n</pre>\n<p>Check that it has been rendered and the output equals a specific string</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"s1\">'node_name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">equals</span><span class=\"p\">(</span><span class=\"s1\">'full content'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id6\">\n<span id=\"block-api\"></span><h4>Block API</h4>\n<p>Check that it has been rendered</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"s1\">'block-name'</span><span class=\"p\">)</span>\n</pre>\n<p>Check that it has been rendered and the output contains a specific string</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"s1\">'block-name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'content'</span><span class=\"p\">)</span>\n</pre>\n<p>Check that it has been rendered and the output equals a specific string</p>\n<pre><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"s1\">'block-name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">equals</span><span class=\"p\">(</span><span class=\"s1\">'full content'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"handling-multilpe-renderings\">\n<span id=\"handling-multiple-renderings\"></span><h4>Handling multilpe renderings</h4>\n<p>A template, node or block could be rendered any number of times, Django 3T allows you to take control of this giving support for the <tt>not</tt> operator and for the <tt>len</tt>, <tt>all</tt> and <tt>any</tt> built-in functions:</p>\n<p>Check that a template/node/block has not been rendered</p>\n<pre><span class=\"ow\">not</span> <span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">'template-name.html'</span><span class=\"p\">)</span>\n</pre>\n<p>Check that a template/node/block has been rendered a specific amount of times</p>\n<pre><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">node</span><span class=\"p\">(</span><span class=\"s1\">'node_name'</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"mi\">3</span>\n</pre>\n<p>Check that all the template/node/block renderings happened under a specific condition</p>\n<pre><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"s1\">'block-name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s1\">'content'</span><span class=\"p\">))</span>\n</pre>\n<p>Check that any of the template/node/block renderings happened under a specific condition</p>\n<pre><span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">rendered</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s1\">'template-name.html'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">equals</span><span class=\"p\">(</span><span class=\"s1\">'specific content'</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n<div id=\"id7\">\n<span id=\"signals\"></span><h3>Signals</h3>\n<div id=\"template-rendered\">\n<h4>template_rendered</h4>\n<p><tt>d3t.signals.template_rendered</tt></p>\n<p>This is sent immediately after a template is rendered.</p>\n<p>Arguments sent with this signal:</p>\n<ul>\n<li><div>\n<div><strong>sender</strong></div>\n<div>The <tt>Template</tt> class.</div>\n</div>\n</li>\n<li><div>\n<div><strong>instance</strong></div>\n<div>The actual template instance being rendered.</div>\n</div>\n</li>\n<li><div>\n<div><strong>context</strong></div>\n<div>The context used to render the template.</div>\n</div>\n</li>\n<li><div>\n<div><strong>result</strong></div>\n<div>The resulting rendered output.</div>\n</div>\n</li>\n</ul>\n</div>\n<div id=\"node-rendered\">\n<h4>node_rendered</h4>\n<p><tt>d3t.signals.node_rendered</tt></p>\n<p>This is sent immediately after a node is rendered.</p>\n<p>Arguments sent with this signal:</p>\n<ul>\n<li><div>\n<div><strong>sender</strong></div>\n<div>The <tt>Node</tt> class.</div>\n</div>\n</li>\n<li><div>\n<div><strong>instance</strong></div>\n<div>The actual node instance being rendered.</div>\n</div>\n</li>\n<li><div>\n<div><strong>result</strong></div>\n<div>The resulting rendered output.</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6523986, "releases": {"1.0.0a1": [{"comment_text": "", "digests": {"md5": "74feaa0a005c940c7ac2caba6dd2400a", "sha256": "de9d61e54ad62d7afbb7370372d59e40cc6b7c460749efd9d73a4aa51bbaad63"}, "downloads": -1, "filename": "django-3t-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "74feaa0a005c940c7ac2caba6dd2400a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11036, "upload_time": "2020-01-27T00:27:24", "upload_time_iso_8601": "2020-01-27T00:27:24.918400Z", "url": "https://files.pythonhosted.org/packages/81/1c/225d69f240a61741ccbbc0cd470c50277fcf37a8c47b227c96852df8d650/django-3t-1.0.0a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74feaa0a005c940c7ac2caba6dd2400a", "sha256": "de9d61e54ad62d7afbb7370372d59e40cc6b7c460749efd9d73a4aa51bbaad63"}, "downloads": -1, "filename": "django-3t-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "74feaa0a005c940c7ac2caba6dd2400a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11036, "upload_time": "2020-01-27T00:27:24", "upload_time_iso_8601": "2020-01-27T00:27:24.918400Z", "url": "https://files.pythonhosted.org/packages/81/1c/225d69f240a61741ccbbc0cd470c50277fcf37a8c47b227c96852df8d650/django-3t-1.0.0a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:55 2020"}