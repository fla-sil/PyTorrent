{"info": {"author": "Szymon Zmilczak & Jaroslaw Szymla", "author_email": "szymon.zmilczak@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: Database", "Topic :: Software Development :: Version Control", "Topic :: System :: Filesystems"], "description": "# Versioning\r\nSet of tools helping in versioning projects\r\n\r\n---- ENGLISH ----\r\nPyVersioning\r\nRequired\r\npython 2.7\r\nSQLAlchemy \r\n\r\nHow it works?\r\nThis program can create and manage version of databases and  file system.\r\n\r\nIn file example.py you must set:\r\nEngine with path to versioned project, flag to ignore empty folders, list of regular expressions for files to include and exclude\r\n  fs_engine = FSVersionerEngine(PROJECT, True, [r'^.*py$'], [r'^.*\\\\storage\\\\.*$',])\r\nDatabase and table, where program keeps data about file system, f.e:\r\n  fs_database = SQLDatabase('postgresql://postgres:postgres@localhost/versioning', 'fs_version')\r\nVersioner manager with database, engine and path to file with version information\r\n  fs_versioner = FSVersionCommander(fs_database, fs_engine, '.version')\r\n\r\n\r\ncommand: python example.py fs list\r\naction: Shows list of file system versions\r\n\r\ncommand: python example.py fs current/actual/latest\r\naction: Shows details about current/actual/latest file system version\r\n \r\ncommand: python example.py fs changed/outdated\r\naction: Checks if file system was changed / is outdated\r\n\r\ncommand: python example.py fs del <name>\r\naction: Deletes file system version with <name> from database\r\n\r\ncommand: python example.py fs set <name>\r\naction: Manually sets file system version [version with name <name> must exist]\r\n\r\ncommand: python example.py fs bump [<level=0>]\r\naction: Creates new file system version, raising number depending on actual and <level> [bump 0: 1.2.3 -> 1.2.4; bump 2: 1.2.3 -> 2.0.0]\r\n\r\ncommand: python example.py fs diff [<name1=None> [<name2=--ACTUAL-->]]\r\naction: Shows changes between versions with names <name1> and <name2>\r\n\r\n\r\nDatabase, which we want to versioning and db, where program keeps data about versionised fb, f.e: \r\ndb_versioner = DBVersionCommander('postgresql://postgres:postgres@localhost/vers_test3', 'postgresql://postgres:postgres@localhost/vers_control')\r\n\r\ncommand: python example.py db, python example.py db check\r\naction: Check version db. \r\n\r\ncommand: python example.py db create\r\naction: Create new version db, if changes will be detected.\r\n\r\n---- POLSKI ----\r\nPyVersioning\r\nWymagania: \r\npython 2.7\r\nSQLAlchemy \r\n\r\nDzia\u0142anie:\r\nProgram pozwala na wersjonowanie schemat\u00f3w baz danych oraz systemu plik\u00f3w. \r\n\r\nW pliku example.py nale\u017cy odpowiednie \u015bcie\u017cki:\r\nSilnik wraz ze \u015bcie\u017ck\u0105 do versionowanego projektu, flag\u0105 ignoruj\u0105c\u0105 puste foldery, list\u0119 wyra\u017ce\u0144 regularnych by zawrze\u0107/wykluczy\u0107 pliki \r\n  fs_engine = FSVersionerEngine(PROJECT, True, [r'^.*py$'], [r'^.*\\\\storage\\\\.*$',])\r\n\u015acie\u017cka do bazy danych oraz nazwa kolumny w kt\u00f3rej b\u0119dziemy trzyma\u0107 dane odno\u015bnie plik\u00f3w, np:\r\n  fs_database = SQLDatabase('postgresql://postgres:postgres@localhost/versioning', 'fs_version')\r\nMened\u017cer wersji z baz\u0105 danych, silnikiem i \u015bcie\u017ck\u0105 do pliku z inforamcj\u0105 o wersji\r\n  fs_versioner = FSVersionCommander(fs_database, fs_engine, '.version')\r\n\r\nkomenda: python example.py fs list\r\ndzia\u0142anie: wy\u015bwietla list\u0119 wersji systemu plik\u00f3w\r\n\r\nkomenda: python example.py fs current/actual/latest\r\ndzia\u0142anie: Wy\u015bwietla szczeg\u00f3\u0142y odno\u015bnie bierz\u0105cej/aktualnej/najnowszej wersji systemu plik\u00f3w\r\n \r\nkomenda: python example.py fs changed/outdated\r\ndzia\u0142anie: Sprawdza czy system plik\u00f3w uleg\u0142 zmianie / jest nieaktualny\r\n\r\nkomenda: python example.py fs del <name>\r\ndzia\u0142anie: Usuwa wersj\u0119 systemu plik\u00f3w o nazwie <name> z bazy danych\r\n\r\nkomenda: python example.py fs set <name>\r\ndzia\u0142anie: R\u0119cznie ustawia wersj\u0119 systemu plik\u00f3w [wersja o nazwie <name> musi istnie\u0107 w bazie danych]\r\n\r\nkomenda: python example.py fs bump [<level=0>]\r\ndzia\u0142anie: Tworzy now\u0105 wersj\u0119 systemu plik\u00f3w, podnosz\u0105c numer w stosunku do aktualnego w zale\u017cno\u015bci od <level> [bump 0: 1.2.3 -> 1.2.4; bump 2: 1.2.3 -> 2.0.0] \r\n\r\nkomenda: python example.py fs diff [<name1=None> [<name2=--ACTUAL-->]]\r\ndzia\u0142anie: Pokazuje zmiany mi\u0119dzy wersjami o nazwach <name1> i <name2>\r\n\r\nPierwsza \u015bcie\u017cka jest bazy kt\u00f3r\u0105 chcemy wersjonowa\u0107, druga do bazy w kt\u00f3rej b\u0119dziemy trzyam\u0107 dane.\r\n\r\ndb_versioner = DBVersionCommander('postgresql://postgres:postgres@localhost/vers_test3', 'postgresql://postgres:postgres@localhost/vers_control')\r\n\r\nkomenda: python example.py db, python example.py db check\r\ndzia\u0142anie: sprawdza wersje bazy \r\n\r\nkomenda: python example.py db create\r\ndzia\u0142anie: tworzy now\u0105 wersje bazy je\u017celi wykryje zmiany", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sim1234/Versioning", "keywords": "version control versioning py_versioning pyversioning", "license": "GPLv2", "maintainer": null, "maintainer_email": null, "name": "py_versioning", "package_url": "https://pypi.org/project/py_versioning/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/py_versioning/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/sim1234/Versioning"}, "release_url": "https://pypi.org/project/py_versioning/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Set of tools helping in versioning projects", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Versioning\n<br>Set of tools helping in versioning projects\n<br>\n<br>---- ENGLISH ----\n<br>PyVersioning\n<br>Required\n<br>python 2.7\n<br>SQLAlchemy \n<br>\n<br>How it works?\n<br>This program can create and manage version of databases and  file system.\n<br>\n<br>In file example.py you must set:\n<br>Engine with path to versioned project, flag to ignore empty folders, list of regular expressions for files to include and exclude\n<br>  fs_engine = FSVersionerEngine(PROJECT, True, [r'^.*py$'], [r'^.*\\\\storage\\\\.*$',])\n<br>Database and table, where program keeps data about file system, f.e:\n<br>  fs_database = SQLDatabase('postgresql://postgres:postgres@localhost/versioning', 'fs_version')\n<br>Versioner manager with database, engine and path to file with version information\n<br>  fs_versioner = FSVersionCommander(fs_database, fs_engine, '.version')\n<br>\n<br>\n<br>command: python example.py fs list\n<br>action: Shows list of file system versions\n<br>\n<br>command: python example.py fs current/actual/latest\n<br>action: Shows details about current/actual/latest file system version\n<br> \n<br>command: python example.py fs changed/outdated\n<br>action: Checks if file system was changed / is outdated\n<br>\n<br>command: python example.py fs del &lt;name&gt;\n<br>action: Deletes file system version with &lt;name&gt; from database\n<br>\n<br>command: python example.py fs set &lt;name&gt;\n<br>action: Manually sets file system version [version with name &lt;name&gt; must exist]\n<br>\n<br>command: python example.py fs bump [&lt;level=0&gt;]\n<br>action: Creates new file system version, raising number depending on actual and &lt;level&gt; [bump 0: 1.2.3 -&gt; 1.2.4; bump 2: 1.2.3 -&gt; 2.0.0]\n<br>\n<br>command: python example.py fs diff [&lt;name1=None&gt; [&lt;name2=--ACTUAL--&gt;]]\n<br>action: Shows changes between versions with names &lt;name1&gt; and &lt;name2&gt;\n<br>\n<br>\n<br>Database, which we want to versioning and db, where program keeps data about versionised fb, f.e: \n<br>db_versioner = DBVersionCommander('postgresql://postgres:postgres@localhost/vers_test3', 'postgresql://postgres:postgres@localhost/vers_control')\n<br>\n<br>command: python example.py db, python example.py db check\n<br>action: Check version db. \n<br>\n<br>command: python example.py db create\n<br>action: Create new version db, if changes will be detected.\n<br>\n<br>---- POLSKI ----\n<br>PyVersioning\n<br>Wymagania: \n<br>python 2.7\n<br>SQLAlchemy \n<br>\n<br>Dzia\u0142anie:\n<br>Program pozwala na wersjonowanie schemat\u00f3w baz danych oraz systemu plik\u00f3w. \n<br>\n<br>W pliku example.py nale\u017cy odpowiednie \u015bcie\u017cki:\n<br>Silnik wraz ze \u015bcie\u017ck\u0105 do versionowanego projektu, flag\u0105 ignoruj\u0105c\u0105 puste foldery, list\u0119 wyra\u017ce\u0144 regularnych by zawrze\u0107/wykluczy\u0107 pliki \n<br>  fs_engine = FSVersionerEngine(PROJECT, True, [r'^.*py$'], [r'^.*\\\\storage\\\\.*$',])\n<br>\u015acie\u017cka do bazy danych oraz nazwa kolumny w kt\u00f3rej b\u0119dziemy trzyma\u0107 dane odno\u015bnie plik\u00f3w, np:\n<br>  fs_database = SQLDatabase('postgresql://postgres:postgres@localhost/versioning', 'fs_version')\n<br>Mened\u017cer wersji z baz\u0105 danych, silnikiem i \u015bcie\u017ck\u0105 do pliku z inforamcj\u0105 o wersji\n<br>  fs_versioner = FSVersionCommander(fs_database, fs_engine, '.version')\n<br>\n<br>komenda: python example.py fs list\n<br>dzia\u0142anie: wy\u015bwietla list\u0119 wersji systemu plik\u00f3w\n<br>\n<br>komenda: python example.py fs current/actual/latest\n<br>dzia\u0142anie: Wy\u015bwietla szczeg\u00f3\u0142y odno\u015bnie bierz\u0105cej/aktualnej/najnowszej wersji systemu plik\u00f3w\n<br> \n<br>komenda: python example.py fs changed/outdated\n<br>dzia\u0142anie: Sprawdza czy system plik\u00f3w uleg\u0142 zmianie / jest nieaktualny\n<br>\n<br>komenda: python example.py fs del &lt;name&gt;\n<br>dzia\u0142anie: Usuwa wersj\u0119 systemu plik\u00f3w o nazwie &lt;name&gt; z bazy danych\n<br>\n<br>komenda: python example.py fs set &lt;name&gt;\n<br>dzia\u0142anie: R\u0119cznie ustawia wersj\u0119 systemu plik\u00f3w [wersja o nazwie &lt;name&gt; musi istnie\u0107 w bazie danych]\n<br>\n<br>komenda: python example.py fs bump [&lt;level=0&gt;]\n<br>dzia\u0142anie: Tworzy now\u0105 wersj\u0119 systemu plik\u00f3w, podnosz\u0105c numer w stosunku do aktualnego w zale\u017cno\u015bci od &lt;level&gt; [bump 0: 1.2.3 -&gt; 1.2.4; bump 2: 1.2.3 -&gt; 2.0.0] \n<br>\n<br>komenda: python example.py fs diff [&lt;name1=None&gt; [&lt;name2=--ACTUAL--&gt;]]\n<br>dzia\u0142anie: Pokazuje zmiany mi\u0119dzy wersjami o nazwach &lt;name1&gt; i &lt;name2&gt;\n<br>\n<br>Pierwsza \u015bcie\u017cka jest bazy kt\u00f3r\u0105 chcemy wersjonowa\u0107, druga do bazy w kt\u00f3rej b\u0119dziemy trzyam\u0107 dane.\n<br>\n<br>db_versioner = DBVersionCommander('postgresql://postgres:postgres@localhost/vers_test3', 'postgresql://postgres:postgres@localhost/vers_control')\n<br>\n<br>komenda: python example.py db, python example.py db check\n<br>dzia\u0142anie: sprawdza wersje bazy \n<br>\n<br>komenda: python example.py db create\n<br>dzia\u0142anie: tworzy now\u0105 wersje bazy je\u017celi wykryje zmiany\n          </div>"}, "last_serial": 1395935, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "34159953253af5661c41499d86e17de1", "sha256": "0ac9baed89379ebee11b1ece85b539ae233d3ebddd28f352c3a8e956bb63d75a"}, "downloads": -1, "filename": "py_versioning-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34159953253af5661c41499d86e17de1", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 16351, "upload_time": "2015-01-25T19:09:09", "upload_time_iso_8601": "2015-01-25T19:09:09.569823Z", "url": "https://files.pythonhosted.org/packages/a9/9a/da14187d826c8fa616f3083d21934aad7ed1c5305e10b7ad4a86d083feea/py_versioning-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48121a0c5567af5744fff606712eb7a5", "sha256": "32cf0dfe61cffc3004686ee59aad0c049180d3907e854f860a0b4bbd0d158068"}, "downloads": -1, "filename": "py_versioning-1.0.0.tar.gz", "has_sig": false, "md5_digest": "48121a0c5567af5744fff606712eb7a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11999, "upload_time": "2015-01-25T19:09:07", "upload_time_iso_8601": "2015-01-25T19:09:07.249859Z", "url": "https://files.pythonhosted.org/packages/cd/7d/10b38f6f45522d4c2af5cbb3ad086eeb803aa2ce66a115fc805f2cdf3892/py_versioning-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34159953253af5661c41499d86e17de1", "sha256": "0ac9baed89379ebee11b1ece85b539ae233d3ebddd28f352c3a8e956bb63d75a"}, "downloads": -1, "filename": "py_versioning-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "34159953253af5661c41499d86e17de1", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 16351, "upload_time": "2015-01-25T19:09:09", "upload_time_iso_8601": "2015-01-25T19:09:09.569823Z", "url": "https://files.pythonhosted.org/packages/a9/9a/da14187d826c8fa616f3083d21934aad7ed1c5305e10b7ad4a86d083feea/py_versioning-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48121a0c5567af5744fff606712eb7a5", "sha256": "32cf0dfe61cffc3004686ee59aad0c049180d3907e854f860a0b4bbd0d158068"}, "downloads": -1, "filename": "py_versioning-1.0.0.tar.gz", "has_sig": false, "md5_digest": "48121a0c5567af5744fff606712eb7a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11999, "upload_time": "2015-01-25T19:09:07", "upload_time_iso_8601": "2015-01-25T19:09:07.249859Z", "url": "https://files.pythonhosted.org/packages/cd/7d/10b38f6f45522d4c2af5cbb3ad086eeb803aa2ce66a115fc805f2cdf3892/py_versioning-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:12:04 2020"}