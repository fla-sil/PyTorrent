{"info": {"author": "Alohomora Team", "author_email": "alohomorafga@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# speaker-verification-toolkit\nThis module contains some tools to make a simple speaker verification.\n\nYou can download it with PyPI:\n```r\n$ pip install speaker-verification-toolkit\n```\n\nTo import and use in your own projects:\n```python\nimport speaker_verification_toolkit.tools as svt\n\n#   svt.some_function(...)\n```\n\n## Usage\n---\n```python\nfind_nearest_voice_data(voice_data_list, voice_sample)\n```\nFind the nearest voice data based on this voice sample. Could be used to make the naive Accept/Reject decision.\n\n> ***voice_data_list***: a list containing all voices data from the dataset.\n>\n> ***voice_sample***: the voice sample reference.\n\n> ***returns***: the index of the element from voice_data_list that represents the nearest voice data.\n---\n\n```python\ncompute_distance(sample1, sample3)\n```\nCompute the distance between sample1 and sample2 using O(n) DTW algorithm\n\n> ***sample1***: the mfcc data extracted from the audio signal 1.\n>\n> ***sample2***: the mfcc data extracted from the audio signal 2.\n\n> ***returns***: Float number representing the minimum distance between sample1 and sample2.\n---\n\n```python\nextract_mfcc(signal_data, samplerate=16000, winlen=0.025, winstep=0.01)\n```\nCompute MFCC features from an audio signal\n\n> ***signal***: the audio signal from which to compute features. Should be an N*1 array.\n>\n> ***samplerate***: the sample rate of the signal we are working with, in Hz.\n>\n> ***winlen***: the length of the analysis window in seconds. Default is 0.025s (25 milliseconds).\n>\n> ***winstep***: the step between successive windows in seconds. Default is 0.01s (10 milliseconds).\n\n> ***returns***: A numpy array of size (NUMFRAMES by numcep) containing features. Each row holds 1 feature vector.\n---\n\n```python\nextract_mfcc_from_wav_file(path, samplerate=16000, winlen=0.025, winstep=0.01)\n```\nCompute MFCC features from a wav file\n\n> ***path***: the wav file path to be open.\n>\n> ***samplerate***: the wanted sample rate, in Hz. Default is 16000. If you want no resampling fill this argument with None.\n>\n> ***winlen***: the length of the analysis window in seconds. Default is 0.025s (25 milliseconds).\n>\n> ***winstep***: the step between successive windows in seconds. Default is 0.01s (10 milliseconds).\n\n> ***returns***: A numpy array of size (NUMFRAMES by numcep) containing features. Each row holds 1 feature vector.\n---\n\n```python\nrms_silence_filter(data, samplerate=16000, segment_length=None, threshold=0.001135)\n```\nCut off silence parts from the signal audio data. **Doesn't work with signals data affected by environment noise**.\nYou would consider apply a noise filter before using this silence filter or make sure that environment noise is small enough to be considered as silence.\n\n>***data***: the audio signal data\n>\n>***samplerate***: if no segment_length is given, segment_length will be equals samplerate/100 (around 0.01 secs per segment).\n>\n>***segment_length***: the number of frames per segment. I.e. for a sample rate SR, a segment length equals SR/100 will represent a chunk containing 0.01 seconds of audio.\n>\n>***threshold***: the threshold value. Values less than or equal values will be cut off. The default value was defined at [1] (see the references).\n\n>***returns***: the param \"data\" without silence parts.\n\n# References\n\n[1] - Muhammad Asadullah & Shibli Nisar, \"A SILENCE REMOVAL AND ENDPOINT DETECTION APPROACH FOR SPEECH PROCESSING\", National University of Computer and Emerging Sciences, Peshawar\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Alohomora-team/speaker-verification-toolkit", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "speaker-verification-toolkit", "package_url": "https://pypi.org/project/speaker-verification-toolkit/", "platform": "", "project_url": "https://pypi.org/project/speaker-verification-toolkit/", "project_urls": {"Homepage": "https://github.com/Alohomora-team/speaker-verification-toolkit"}, "release_url": "https://pypi.org/project/speaker-verification-toolkit/0.0.2/", "requires_dist": ["librosa (==0.7.0)", "python-speech-features (==0.6)", "fastdtw (==0.3.2)"], "requires_python": ">=3.6", "summary": "A package designed to compose speaker verification systems", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>speaker-verification-toolkit</h1>\n<p>This module contains some tools to make a simple speaker verification.</p>\n<p>You can download it with PyPI:</p>\n<pre><span class=\"o\">$</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">speaker</span><span class=\"o\">-</span><span class=\"n\">verification</span><span class=\"o\">-</span><span class=\"n\">toolkit</span>\n</pre>\n<p>To import and use in your own projects:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">speaker_verification_toolkit.tools</span> <span class=\"k\">as</span> <span class=\"nn\">svt</span>\n\n<span class=\"c1\">#   svt.some_function(...)</span>\n</pre>\n<h2>Usage</h2>\n<hr>\n<pre><span class=\"n\">find_nearest_voice_data</span><span class=\"p\">(</span><span class=\"n\">voice_data_list</span><span class=\"p\">,</span> <span class=\"n\">voice_sample</span><span class=\"p\">)</span>\n</pre>\n<p>Find the nearest voice data based on this voice sample. Could be used to make the naive Accept/Reject decision.</p>\n<blockquote>\n<p><em><strong>voice_data_list</strong></em>: a list containing all voices data from the dataset.</p>\n<p><em><strong>voice_sample</strong></em>: the voice sample reference.</p>\n</blockquote>\n<blockquote>\n<p><em><strong>returns</strong></em>: the index of the element from voice_data_list that represents the nearest voice data.</p>\n</blockquote>\n<hr>\n<pre><span class=\"n\">compute_distance</span><span class=\"p\">(</span><span class=\"n\">sample1</span><span class=\"p\">,</span> <span class=\"n\">sample3</span><span class=\"p\">)</span>\n</pre>\n<p>Compute the distance between sample1 and sample2 using O(n) DTW algorithm</p>\n<blockquote>\n<p><em><strong>sample1</strong></em>: the mfcc data extracted from the audio signal 1.</p>\n<p><em><strong>sample2</strong></em>: the mfcc data extracted from the audio signal 2.</p>\n</blockquote>\n<blockquote>\n<p><em><strong>returns</strong></em>: Float number representing the minimum distance between sample1 and sample2.</p>\n</blockquote>\n<hr>\n<pre><span class=\"n\">extract_mfcc</span><span class=\"p\">(</span><span class=\"n\">signal_data</span><span class=\"p\">,</span> <span class=\"n\">samplerate</span><span class=\"o\">=</span><span class=\"mi\">16000</span><span class=\"p\">,</span> <span class=\"n\">winlen</span><span class=\"o\">=</span><span class=\"mf\">0.025</span><span class=\"p\">,</span> <span class=\"n\">winstep</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n</pre>\n<p>Compute MFCC features from an audio signal</p>\n<blockquote>\n<p><em><strong>signal</strong></em>: the audio signal from which to compute features. Should be an N*1 array.</p>\n<p><em><strong>samplerate</strong></em>: the sample rate of the signal we are working with, in Hz.</p>\n<p><em><strong>winlen</strong></em>: the length of the analysis window in seconds. Default is 0.025s (25 milliseconds).</p>\n<p><em><strong>winstep</strong></em>: the step between successive windows in seconds. Default is 0.01s (10 milliseconds).</p>\n</blockquote>\n<blockquote>\n<p><em><strong>returns</strong></em>: A numpy array of size (NUMFRAMES by numcep) containing features. Each row holds 1 feature vector.</p>\n</blockquote>\n<hr>\n<pre><span class=\"n\">extract_mfcc_from_wav_file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">samplerate</span><span class=\"o\">=</span><span class=\"mi\">16000</span><span class=\"p\">,</span> <span class=\"n\">winlen</span><span class=\"o\">=</span><span class=\"mf\">0.025</span><span class=\"p\">,</span> <span class=\"n\">winstep</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n</pre>\n<p>Compute MFCC features from a wav file</p>\n<blockquote>\n<p><em><strong>path</strong></em>: the wav file path to be open.</p>\n<p><em><strong>samplerate</strong></em>: the wanted sample rate, in Hz. Default is 16000. If you want no resampling fill this argument with None.</p>\n<p><em><strong>winlen</strong></em>: the length of the analysis window in seconds. Default is 0.025s (25 milliseconds).</p>\n<p><em><strong>winstep</strong></em>: the step between successive windows in seconds. Default is 0.01s (10 milliseconds).</p>\n</blockquote>\n<blockquote>\n<p><em><strong>returns</strong></em>: A numpy array of size (NUMFRAMES by numcep) containing features. Each row holds 1 feature vector.</p>\n</blockquote>\n<hr>\n<pre><span class=\"n\">rms_silence_filter</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">samplerate</span><span class=\"o\">=</span><span class=\"mi\">16000</span><span class=\"p\">,</span> <span class=\"n\">segment_length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.001135</span><span class=\"p\">)</span>\n</pre>\n<p>Cut off silence parts from the signal audio data. <strong>Doesn't work with signals data affected by environment noise</strong>.\nYou would consider apply a noise filter before using this silence filter or make sure that environment noise is small enough to be considered as silence.</p>\n<blockquote>\n<p><em><strong>data</strong></em>: the audio signal data</p>\n<p><em><strong>samplerate</strong></em>: if no segment_length is given, segment_length will be equals samplerate/100 (around 0.01 secs per segment).</p>\n<p><em><strong>segment_length</strong></em>: the number of frames per segment. I.e. for a sample rate SR, a segment length equals SR/100 will represent a chunk containing 0.01 seconds of audio.</p>\n<p><em><strong>threshold</strong></em>: the threshold value. Values less than or equal values will be cut off. The default value was defined at [1] (see the references).</p>\n</blockquote>\n<blockquote>\n<p><em><strong>returns</strong></em>: the param \"data\" without silence parts.</p>\n</blockquote>\n<h1>References</h1>\n<p>[1] - Muhammad Asadullah &amp; Shibli Nisar, \"A SILENCE REMOVAL AND ENDPOINT DETECTION APPROACH FOR SPEECH PROCESSING\", National University of Computer and Emerging Sciences, Peshawar</p>\n\n          </div>"}, "last_serial": 5961943, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c0bb3a727b3ede6974af123033fb94d2", "sha256": "e1aa15750f6cdad2823830b4fdb44d4efd4d3c573743359b1d0da1a679adb5b1"}, "downloads": -1, "filename": "speaker_verification_toolkit-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c0bb3a727b3ede6974af123033fb94d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 4491, "upload_time": "2019-10-07T19:41:35", "upload_time_iso_8601": "2019-10-07T19:41:35.582472Z", "url": "https://files.pythonhosted.org/packages/37/76/916e2593f59f58d5206a9ac5aba257aaa261b0e85fe0a18554ecdf76ae88/speaker_verification_toolkit-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "372cb6325a529ed6550dde46cf8742e3", "sha256": "bc6b7bdf032c93355db4889a5a2e74e1db152827fd5f21fbe29457415b63ad75"}, "downloads": -1, "filename": "speaker_verification_toolkit-0.0.1.tar.gz", "has_sig": false, "md5_digest": "372cb6325a529ed6550dde46cf8742e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2610, "upload_time": "2019-10-07T19:41:38", "upload_time_iso_8601": "2019-10-07T19:41:38.188568Z", "url": "https://files.pythonhosted.org/packages/74/c2/bc77c9d41439b40303ac5dc31a9de9380f3e597bf40829b32d94eda16de8/speaker_verification_toolkit-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "83dd9c99ed621e9fbf77de9b8ff1d053", "sha256": "1ef43e92fdd300944f5731f31f26c064951c11c231b01e35ad6511e5c069e991"}, "downloads": -1, "filename": "speaker_verification_toolkit-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "83dd9c99ed621e9fbf77de9b8ff1d053", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5522, "upload_time": "2019-10-11T20:44:55", "upload_time_iso_8601": "2019-10-11T20:44:55.834789Z", "url": "https://files.pythonhosted.org/packages/e8/f8/99e760be56483ea141ad70eb0ad8e61fe6764b54ab44f49ae683e3ef2450/speaker_verification_toolkit-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ef3143a0cd7128df5838f674bca5019", "sha256": "32a65774fc6e8e742b0e9ed8e1e377b02eb2954e43f03992f22f7d3360119739"}, "downloads": -1, "filename": "speaker_verification_toolkit-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7ef3143a0cd7128df5838f674bca5019", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3415, "upload_time": "2019-10-11T20:44:57", "upload_time_iso_8601": "2019-10-11T20:44:57.258789Z", "url": "https://files.pythonhosted.org/packages/55/99/6f93a1e70b8952051baecbf21b4802fda8f2ea8895a4156cc2a21fd1f77c/speaker_verification_toolkit-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83dd9c99ed621e9fbf77de9b8ff1d053", "sha256": "1ef43e92fdd300944f5731f31f26c064951c11c231b01e35ad6511e5c069e991"}, "downloads": -1, "filename": "speaker_verification_toolkit-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "83dd9c99ed621e9fbf77de9b8ff1d053", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5522, "upload_time": "2019-10-11T20:44:55", "upload_time_iso_8601": "2019-10-11T20:44:55.834789Z", "url": "https://files.pythonhosted.org/packages/e8/f8/99e760be56483ea141ad70eb0ad8e61fe6764b54ab44f49ae683e3ef2450/speaker_verification_toolkit-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7ef3143a0cd7128df5838f674bca5019", "sha256": "32a65774fc6e8e742b0e9ed8e1e377b02eb2954e43f03992f22f7d3360119739"}, "downloads": -1, "filename": "speaker_verification_toolkit-0.0.2.tar.gz", "has_sig": false, "md5_digest": "7ef3143a0cd7128df5838f674bca5019", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3415, "upload_time": "2019-10-11T20:44:57", "upload_time_iso_8601": "2019-10-11T20:44:57.258789Z", "url": "https://files.pythonhosted.org/packages/55/99/6f93a1e70b8952051baecbf21b4802fda8f2ea8895a4156cc2a21fd1f77c/speaker_verification_toolkit-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:43 2020"}