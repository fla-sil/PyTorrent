{"info": {"author": "Andreas Schmidl", "author_email": "Andreas.Schmidl@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development"], "description": "setuptools-pyecore\n==================\n\n|Build Status| |Coverage Status| |PyPI Version| |GitHub Version| |License|\n\n.. |Build Status| image:: https://travis-ci.org/pyecore/setuptools-pyecore.svg\n   :target: https://travis-ci.org/pyecore/setuptools-pyecore\n   :alt: Build Status\n\n.. |Coverage Status| image:: https://coveralls.io/repos/github/pyecore/setuptools-pyecore/badge.svg?branch=master\n   :target: https://coveralls.io/github/pyecore/setuptools-pyecore?branch=master\n   :alt: Coverage Status\n\n.. |PyPI Version| image:: https://badge.fury.io/py/setuptools-pyecore.svg\n   :target: https://pypi.org/project/setuptools-pyecore\n   :alt: PyPI Version\n\n.. |GitHub Version| image:: https://badge.fury.io/gh/pyecore%2Fsetuptools-pyecore.svg\n   :target: https://github.com/pyecore/setuptools-pyecore/releases\n   :alt: GitHub Version\n\n.. |License| image:: https://img.shields.io/github/license/pyecore/setuptools-pyecore.svg\n   :target: https://raw.githubusercontent.com/pyecore/setuptools-pyecore/master/LICENSE\n   :alt: License\n\n.. contents:: Table of Contents\n   :depth: 2\n\nOverview\n--------\n\nA ``setuptools`` command for generating Python code from Ecore models.\n\nThis is an extension for `setuptools <https://pypi.org/project/setuptools/>`__ integrating the `pyecoregen <https://github.com/pyecore/pyecoregen>`__ code generator into the Python packaging process. It encapsulates ``pyecoregen`` and provides the user a ``setuptools`` command called ``pyecore`` to control the generation process.\n\nIn a basic setup the user doesn't have to configure the generation process at all because ``setuptools-pyecore`` discovers Ecore models located in the current working directory and triggers the code generation for each detected Ecore model. Also a meaningful output folder is chosen automatically.\n\nOf course the user has to possibility to customize the generation process. The command line options of ``pyecoregen`` are also available through the ``pyecore`` setuptools command. The user has the choice to pass the options on the command line or configure the code generation in a dedicated section in the ``setup.cfg`` file.\n\nInstallation\n------------\n\n``setuptools-pyecore`` can be installed in various ways. To run it the following prerequisites have to be fulfilled:\n\n- Python 3.4+\n- setuptools\n\nAfter installation, the used Python environment has a new setuptools command called ``pyecore``.\n\nFrom Source Code\n****************\n\n::\n\n    > git clone https://github.com/pyecore/setuptools-pyecore.git\n    > cd setuptools-pyecore\n    > pip install .\n\nFrom PyPI\n*********\n\n::\n\n    > pip install setuptools-pyecore\n\nFrom GitHub Releases\n********************\n\n::\n\n    > pip install <setuptools-pyecore_wheel>\n\nUsage\n-----\n\nIntegration\n***********\n\nFor a smooth user experience it's recommended to pass ``setuptools-pyecore`` using the ``setup_requires`` argument of setup function. Additionally the generated Python code depends on the ``pyecore`` library which should be added to ``install_requires`` argument:\n\n.. code:: python\n\n    setup(\n        ...\n        setup_requires=['setuptools-pyecore'],\n        install_requires=['pyecore']\n        ...\n    )\n\nBefore generating Python code from a given Ecore model ``setuptools`` will automatically check the Python environment and download ``setuptools-pyecore`` from `PyPI <https://pypi.org>`__ if it's missing. During the installation of the project package ``pip`` will install ``pyecore`` into the Python environment.\n\nConfiguration\n*************\n\n``setuptools-pyecore`` provides two possibilities to configure the pyecore generator.\n\nAll options can be passed on the command line after the ``pyecore`` command:\n\n::\n\n    > python setup.py pyecore --auto-register-package\n\nIt's also possible to pass several options to ``pyecoregen`` or execute multiple commands at once:\n\n::\n\n    > python setup.py pyecore --auto-register-package --output \"default=gen\" bdist_wheel\n\nSee ``python setup.py pyecore --help`` for available command line options:\n\n::\n\n    > python setup.py pyecore --help\n    ...\n    Options for 'PyEcoreCommand' command:\n      --ecore-models (-e)      specify Ecore models to generate code for\n      --output (-o)            specify directories where output is generated\n      --user-modules           dotted names of modules with user-provided mixins\n                               to import from generated classes\n      --auto-register-package  Generate package auto-registration for the PyEcore\n                               'global_registry'\n    ...\n\nThe ``pyecoregen`` documentation explains all `command line options <https://github.com/pyecore/pyecoregen/blob/master/README.rst>`__ in detail.\n\nApart from passing options on the command line it's also possible to add a dedicated ``[pyecore]`` section to ``setup.cfg``. The following example section contains all available options:\n\n.. code:: ini\n\n    [pyecore]\n    # Specify Ecore models to generate code for; default: None\n    #ecore-models = <ecore-model> [<ecore-model> ...]\n    # Specify directories where output is generated; default: ./\n    output = default=gen\n    # Dotted names of modules with user-provided mixins to import from generated classes; default: None\n    #user-modules = [<model>=<user module>]\n    #               [<model>=<user module> ...]\n    # Generate package auto-registration for the PyEcore 'global_registry' (yes|no); default: no\n    auto-register-package = yes\n\nA reference configuration is provided in the ``resources`` directory.\n\n``pyecoregen`` inherits the log level globally configured for ``setuptools``. To set the verbosity to a certain log level pass the global options ``verbose`` or ``quiet`` straight before the ``pyecore`` command on the command line:\n\n::\n\n    > python setup.py --verbose pyecore\n\nAlternatively, you can add these options to the ``[global]`` section of your ``setup.cfg``:\n\n.. code:: ini\n\n    [global]\n    # Run verbosely (yes|no); default: yes\n    #verbose = yes\n    # Run quietly and turns verbosity off (yes|no); default: no\n    quiet = yes\n\nSample\n******\n\nBesides the ``setuptools-pyecore`` source code a sample project called ``library`` is provided in the ``samples`` directory. This sample consists of the Ecore model ``library`` and a setup script. During the execution of ``setuptools-pyecore`` a Python package will be generated into the ``library`` package directory representing the classes from the ``library`` Ecore model.\n\nTo generate code out of the Ecore model and build a ``library`` wheel package execute the following command:\n\n::\n\n    > python setup.py pyecore bdist_wheel\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyecore/setuptools-pyecore", "keywords": "setuptools model metamodel EMF Ecore code generator", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "setuptools-pyecore", "package_url": "https://pypi.org/project/setuptools-pyecore/", "platform": "any", "project_url": "https://pypi.org/project/setuptools-pyecore/", "project_urls": {"Homepage": "https://github.com/pyecore/setuptools-pyecore"}, "release_url": "https://pypi.org/project/setuptools-pyecore/0.2.0/", "requires_dist": ["pyecore", "pyecoregen"], "requires_python": ">=3.4", "summary": "Setuptools command for generating Python code from PyEcore models.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/pyecore/setuptools-pyecore\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34207332b423ee4bd800d4dc77506c5bfc1056a1/68747470733a2f2f7472617669732d63692e6f72672f707965636f72652f7365747570746f6f6c732d707965636f72652e737667\"></a> <a href=\"https://coveralls.io/github/pyecore/setuptools-pyecore?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fde8c3f714fdc256879161946eba3f092d9b614b/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f707965636f72652f7365747570746f6f6c732d707965636f72652f62616467652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/setuptools-pyecore\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73c52dd29165183695a70d1188735deabebeb4f8/68747470733a2f2f62616467652e667572792e696f2f70792f7365747570746f6f6c732d707965636f72652e737667\"></a> <a href=\"https://github.com/pyecore/setuptools-pyecore/releases\" rel=\"nofollow\"><img alt=\"GitHub Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce6ee40df70f9a588f5562d91610133b5b11a758/68747470733a2f2f62616467652e667572792e696f2f67682f707965636f72652532467365747570746f6f6c732d707965636f72652e737667\"></a> <a href=\"https://raw.githubusercontent.com/pyecore/setuptools-pyecore/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b231101dc4780fd37b42ca9310a6298a7369123/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f707965636f72652f7365747570746f6f6c732d707965636f72652e737667\"></a></p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id1\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a><ul>\n<li><a href=\"#from-source-code\" id=\"id3\" rel=\"nofollow\">From Source Code</a></li>\n<li><a href=\"#from-pypi\" id=\"id4\" rel=\"nofollow\">From PyPI</a></li>\n<li><a href=\"#from-github-releases\" id=\"id5\" rel=\"nofollow\">From GitHub Releases</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" id=\"id6\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#integration\" id=\"id7\" rel=\"nofollow\">Integration</a></li>\n<li><a href=\"#configuration\" id=\"id8\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#sample\" id=\"id9\" rel=\"nofollow\">Sample</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Overview</a></h2>\n<p>A <tt>setuptools</tt> command for generating Python code from Ecore models.</p>\n<p>This is an extension for <a href=\"https://pypi.org/project/setuptools/\" rel=\"nofollow\">setuptools</a> integrating the <a href=\"https://github.com/pyecore/pyecoregen\" rel=\"nofollow\">pyecoregen</a> code generator into the Python packaging process. It encapsulates <tt>pyecoregen</tt> and provides the user a <tt>setuptools</tt> command called <tt>pyecore</tt> to control the generation process.</p>\n<p>In a basic setup the user doesn\u2019t have to configure the generation process at all because <tt><span class=\"pre\">setuptools-pyecore</span></tt> discovers Ecore models located in the current working directory and triggers the code generation for each detected Ecore model. Also a meaningful output folder is chosen automatically.</p>\n<p>Of course the user has to possibility to customize the generation process. The command line options of <tt>pyecoregen</tt> are also available through the <tt>pyecore</tt> setuptools command. The user has the choice to pass the options on the command line or configure the code generation in a dedicated section in the <tt>setup.cfg</tt> file.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Installation</a></h2>\n<p><tt><span class=\"pre\">setuptools-pyecore</span></tt> can be installed in various ways. To run it the following prerequisites have to be fulfilled:</p>\n<ul>\n<li>Python 3.4+</li>\n<li>setuptools</li>\n</ul>\n<p>After installation, the used Python environment has a new setuptools command called <tt>pyecore</tt>.</p>\n<div id=\"from-source-code\">\n<h3><a href=\"#id3\" rel=\"nofollow\">From Source Code</a></h3>\n<pre>&gt; git clone https://github.com/pyecore/setuptools-pyecore.git\n&gt; cd setuptools-pyecore\n&gt; pip install .\n</pre>\n</div>\n<div id=\"from-pypi\">\n<h3><a href=\"#id4\" rel=\"nofollow\">From PyPI</a></h3>\n<pre>&gt; pip install setuptools-pyecore\n</pre>\n</div>\n<div id=\"from-github-releases\">\n<h3><a href=\"#id5\" rel=\"nofollow\">From GitHub Releases</a></h3>\n<pre>&gt; pip install &lt;setuptools-pyecore_wheel&gt;\n</pre>\n</div>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"integration\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Integration</a></h3>\n<p>For a smooth user experience it\u2019s recommended to pass <tt><span class=\"pre\">setuptools-pyecore</span></tt> using the <tt>setup_requires</tt> argument of setup function. Additionally the generated Python code depends on the <tt>pyecore</tt> library which should be added to <tt>install_requires</tt> argument:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">setup_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'setuptools-pyecore'</span><span class=\"p\">],</span>\n    <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'pyecore'</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Before generating Python code from a given Ecore model <tt>setuptools</tt> will automatically check the Python environment and download <tt><span class=\"pre\">setuptools-pyecore</span></tt> from <a href=\"https://pypi.org\" rel=\"nofollow\">PyPI</a> if it\u2019s missing. During the installation of the project package <tt>pip</tt> will install <tt>pyecore</tt> into the Python environment.</p>\n</div>\n<div id=\"configuration\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Configuration</a></h3>\n<p><tt><span class=\"pre\">setuptools-pyecore</span></tt> provides two possibilities to configure the pyecore generator.</p>\n<p>All options can be passed on the command line after the <tt>pyecore</tt> command:</p>\n<pre>&gt; python setup.py pyecore --auto-register-package\n</pre>\n<p>It\u2019s also possible to pass several options to <tt>pyecoregen</tt> or execute multiple commands at once:</p>\n<pre>&gt; python setup.py pyecore --auto-register-package --output \"default=gen\" bdist_wheel\n</pre>\n<p>See <tt>python setup.py pyecore <span class=\"pre\">--help</span></tt> for available command line options:</p>\n<pre>&gt; python setup.py pyecore --help\n...\nOptions for 'PyEcoreCommand' command:\n  --ecore-models (-e)      specify Ecore models to generate code for\n  --output (-o)            specify directories where output is generated\n  --user-modules           dotted names of modules with user-provided mixins\n                           to import from generated classes\n  --auto-register-package  Generate package auto-registration for the PyEcore\n                           'global_registry'\n...\n</pre>\n<p>The <tt>pyecoregen</tt> documentation explains all <a href=\"https://github.com/pyecore/pyecoregen/blob/master/README.rst\" rel=\"nofollow\">command line options</a> in detail.</p>\n<p>Apart from passing options on the command line it\u2019s also possible to add a dedicated <tt>[pyecore]</tt> section to <tt>setup.cfg</tt>. The following example section contains all available options:</p>\n<pre><span class=\"k\">[pyecore]</span>\n<span class=\"c1\"># Specify Ecore models to generate code for; default: None</span>\n<span class=\"c1\">#ecore-models = &lt;ecore-model&gt; [&lt;ecore-model&gt; ...]</span>\n<span class=\"c1\"># Specify directories where output is generated; default: ./</span>\n<span class=\"na\">output</span> <span class=\"o\">=</span> <span class=\"s\">default=gen</span>\n<span class=\"c1\"># Dotted names of modules with user-provided mixins to import from generated classes; default: None</span>\n<span class=\"c1\">#user-modules = [&lt;model&gt;=&lt;user module&gt;]</span>\n<span class=\"c1\">#               [&lt;model&gt;=&lt;user module&gt; ...]</span>\n<span class=\"c1\"># Generate package auto-registration for the PyEcore 'global_registry' (yes|no); default: no</span>\n<span class=\"na\">auto-register-package</span> <span class=\"o\">=</span> <span class=\"s\">yes</span>\n</pre>\n<p>A reference configuration is provided in the <tt>resources</tt> directory.</p>\n<p><tt>pyecoregen</tt> inherits the log level globally configured for <tt>setuptools</tt>. To set the verbosity to a certain log level pass the global options <tt>verbose</tt> or <tt>quiet</tt> straight before the <tt>pyecore</tt> command on the command line:</p>\n<pre>&gt; python setup.py --verbose pyecore\n</pre>\n<p>Alternatively, you can add these options to the <tt>[global]</tt> section of your <tt>setup.cfg</tt>:</p>\n<pre><span class=\"k\">[global]</span>\n<span class=\"c1\"># Run verbosely (yes|no); default: yes</span>\n<span class=\"c1\">#verbose = yes</span>\n<span class=\"c1\"># Run quietly and turns verbosity off (yes|no); default: no</span>\n<span class=\"na\">quiet</span> <span class=\"o\">=</span> <span class=\"s\">yes</span>\n</pre>\n</div>\n<div id=\"sample\">\n<h3><a href=\"#id9\" rel=\"nofollow\">Sample</a></h3>\n<p>Besides the <tt><span class=\"pre\">setuptools-pyecore</span></tt> source code a sample project called <tt>library</tt> is provided in the <tt>samples</tt> directory. This sample consists of the Ecore model <tt>library</tt> and a setup script. During the execution of <tt><span class=\"pre\">setuptools-pyecore</span></tt> a Python package will be generated into the <tt>library</tt> package directory representing the classes from the <tt>library</tt> Ecore model.</p>\n<p>To generate code out of the Ecore model and build a <tt>library</tt> wheel package execute the following command:</p>\n<pre>&gt; python setup.py pyecore bdist_wheel\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4234122, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b7c8b3232fd017488ed841e03e5ff790", "sha256": "4f71fda9a2a0672ae1369795b56ff2bc8b1b038e9545691d5629e9d60340b50f"}, "downloads": -1, "filename": "setuptools_pyecore-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b7c8b3232fd017488ed841e03e5ff790", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 5581, "upload_time": "2018-08-28T15:58:41", "upload_time_iso_8601": "2018-08-28T15:58:41.855969Z", "url": "https://files.pythonhosted.org/packages/8e/53/acd6f14c498a9545f0ea33d0d796a64e3dc32a05e0e1acba04ada90ff3b8/setuptools_pyecore-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d85980e8fa1986efa387ad133ee0eee6", "sha256": "e3759770f30791ed74f9e893232038554e988eb9b605c40d046635bee842af55"}, "downloads": -1, "filename": "setuptools-pyecore-0.1.0.tar.gz", "has_sig": false, "md5_digest": "d85980e8fa1986efa387ad133ee0eee6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6505, "upload_time": "2018-08-28T15:58:43", "upload_time_iso_8601": "2018-08-28T15:58:43.162483Z", "url": "https://files.pythonhosted.org/packages/d3/f4/b92e562e07b6061a9ec2636678bcd27b05dbc6f0d6d8f147cc7a50c6f9e3/setuptools-pyecore-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "99ebf4541cd4232252847fb218509fef", "sha256": "d8b2b9a608d171e67b0da775eed13995242a98d3fb1ed288b773c7cc0d752a8a"}, "downloads": -1, "filename": "setuptools_pyecore-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "99ebf4541cd4232252847fb218509fef", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 5606, "upload_time": "2018-08-29T21:32:38", "upload_time_iso_8601": "2018-08-29T21:32:38.185366Z", "url": "https://files.pythonhosted.org/packages/c9/27/3ac12e6766094eeb4465e162e75e4cd4dd6585b203c12eecaf3d911d984f/setuptools_pyecore-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "117471ac5619fc99ef51368c28ce37a2", "sha256": "26cfe79b8467ecbab3b9389817e2b09824e9c8b51873c4da60cacad60ba0a81c"}, "downloads": -1, "filename": "setuptools-pyecore-0.1.1.tar.gz", "has_sig": false, "md5_digest": "117471ac5619fc99ef51368c28ce37a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 6631, "upload_time": "2018-08-29T21:32:39", "upload_time_iso_8601": "2018-08-29T21:32:39.240570Z", "url": "https://files.pythonhosted.org/packages/e1/8f/76102c74f5d902ad821afa6686c937269e6a2008724714039091f6f16c75/setuptools-pyecore-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c9770f2caebe0b536ce5a97b252c3d95", "sha256": "82a6cee91005cf6839c6e77e5e449b09a3257ceedf6660a577a92dae4469cca9"}, "downloads": -1, "filename": "setuptools_pyecore-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c9770f2caebe0b536ce5a97b252c3d95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 6076, "upload_time": "2018-09-03T12:05:32", "upload_time_iso_8601": "2018-09-03T12:05:32.755402Z", "url": "https://files.pythonhosted.org/packages/14/70/8b077af5fc7d2e6439e2ff268501e73adaabad73fc8f7a6e76f34a307183/setuptools_pyecore-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "216a1547850f07d718c57fb0cd9c05c5", "sha256": "4552276e0cee1a413f394aff60d4e63b1d2156a41f303ebffeaf899c50dfb976"}, "downloads": -1, "filename": "setuptools-pyecore-0.2.0.tar.gz", "has_sig": false, "md5_digest": "216a1547850f07d718c57fb0cd9c05c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7198, "upload_time": "2018-09-03T12:05:34", "upload_time_iso_8601": "2018-09-03T12:05:34.032304Z", "url": "https://files.pythonhosted.org/packages/42/e9/808974e61d46a7bb137072665fbf7fae03651071f0fc4bab6d269f583f02/setuptools-pyecore-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c9770f2caebe0b536ce5a97b252c3d95", "sha256": "82a6cee91005cf6839c6e77e5e449b09a3257ceedf6660a577a92dae4469cca9"}, "downloads": -1, "filename": "setuptools_pyecore-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c9770f2caebe0b536ce5a97b252c3d95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 6076, "upload_time": "2018-09-03T12:05:32", "upload_time_iso_8601": "2018-09-03T12:05:32.755402Z", "url": "https://files.pythonhosted.org/packages/14/70/8b077af5fc7d2e6439e2ff268501e73adaabad73fc8f7a6e76f34a307183/setuptools_pyecore-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "216a1547850f07d718c57fb0cd9c05c5", "sha256": "4552276e0cee1a413f394aff60d4e63b1d2156a41f303ebffeaf899c50dfb976"}, "downloads": -1, "filename": "setuptools-pyecore-0.2.0.tar.gz", "has_sig": false, "md5_digest": "216a1547850f07d718c57fb0cd9c05c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 7198, "upload_time": "2018-09-03T12:05:34", "upload_time_iso_8601": "2018-09-03T12:05:34.032304Z", "url": "https://files.pythonhosted.org/packages/42/e9/808974e61d46a7bb137072665fbf7fae03651071f0fc4bab6d269f583f02/setuptools-pyecore-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:27 2020"}