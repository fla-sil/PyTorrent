{"info": {"author": "Amalie Due Jensen", "author_email": "amalieduejensen@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: ISC License (ISCL)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# multisig-hmac\n\n> Multisig scheme for HMAC authentication. Python implementation of [multisig-hmac](https://github.com/emilbayes/multisig-hmac).\n\n## Usage\nKey management can happen in either of two modes, either by storing every of the component keys, or by storing a single master seed and using that to derive keys ad hoc.\n\nThe following two examples return `true` when they are executed, for example inside a virtual environment.\n\nUsing stored keys:\n\n```python\nimport multisig_hmac\nfrom multisig_hmac.multisig_hmac import MultisigHMAC\nimport base64\n\nm = MultisigHMAC()\n\n# generate keys which need to be stored securely and need to be shared securely with each party\nk0 = m.keygen(0)\nk1 = m.keygen(1)\nk2 = m.keygen(2)\n\n# sign by each client\ndata = b'hello world'\n\ns0 = m.sign(k0, data)\ns2 = m.sign(k2, data)\n\n# combine the used signatures\nout = m.combine([s0, s2])\n\nsent = (out[0], base64.urlsafe_b64encode(out[1]))\n\n# --- network ---\n\nreceived = (sent[0], base64.urlsafe_b64decode(sent[1]))\n\n# verify on the server\nthreshold = 2\nkeys = [k0, k1, k2]\nsignature = received\n\nprint(m.verify(keys, signature, data, threshold))\n\n```\n\nUsing a derived master key:\n\n```python\nimport multisig_hmac\nfrom multisig_hmac.multisig_hmac import MultisigHMAC\nimport base64\n\nm = MultisigHMAC()\n\n# generate a master seed which needs to be stored securely\n# this seed must NOT be shared with any other party\nseed = m.seedgen()\n\nk0 = m.deriveKey(seed, 0)\nk1 = m.deriveKey(seed, 1)\nk2 = m.deriveKey(seed, 2)\n\n# sign by each client\ndata = b'hello world'\n\ns0 = m.sign(k0, data)\ns2 = m.sign(k2, data)\n\n# combine the used signatures\nout = m.combine([s0, s2])\n\nsent = (out[0], base64.urlsafe_b64encode(out[1]))\n\n# --- network ---\n\nreceived = (sent[0], base64.urlsafe_b64decode(sent[1]))\n\n# verify on the server, but now keys are dynamically derived\nthreshold = 2\nsignature = received\n\nprint(m.verifyDerived(seed, signature, data, threshold))\n\n```\n\n## API\n### Constants\n* `MultisigHMAC.BYTES` signature length in bytes (default)\n* `MultisigHMAC.KEYBYTES` key length in bytes (default)\n* `MultisigHMAC.PRIMITIVE` is `sha256` (default)\n\nSo far, the implementation supports the following specific algorithms:\n* `MultisigHMAC.SHA256_BYTES` signature length in bytes\n* `MultisigHMAC.SHA256_KEYBYTES` key length in bytes\n* `MultisigHMAC.SHA256_PRIMITIVE` is `sha256`\n* `MultisigHMAC.SHA512_BYTES` signature length in bytes\n* `MultisigHMAC.SHA512_KEYBYTES` key length in bytes\n* `MultisigHMAC.SHA512_PRIMITIVE` is `sha512`\n* `MultisigHMAC.SHA384_BYTES` signature length in bytes\n* `MultisigHMAC.SHA384_KEYBYTES` key length in bytes\n* `MultisigHMAC.SHA384_PRIMITIVE` is `sha384`\n\n### `n = MultisigHMAC.popcount(bitfield)`\nReturns the number of keys (i.e. high bits) in `bitfield`. `bitfield` must be a 32-bit unsigned integer. Example:\n```python\nassert MultisigHMAC.popcount(5) == 2\n```\n\n### `xs = MultisigHMAC.keyIndexes(bitfield)`\nReturns the indexes of the keys (i.e. high bits) in `bitfield` as a list. `bitfield` must be a 32-bit unsigned integer. Example:\n```python\nassert MultisigHMAC.keyIndexes(5) == [0,2]\n```\n\n### `m = MultisigHMAC([alg = MultisigHMAC.PRIMITIVE])`\nCreates a new instance of `MultisigHMAC` which can be used as a global singleton. Just sets the algorithm to be used for subsequent methods and associated constants. Example:\n```python\nm = MultisigHMAC()\nassert (m.popcount(5) == 2 and m.keyIndexes(5) == [0,2])\n```\n\n### `key = MultisigHMAC.keygen(index)`\nGenerates a new cryptographically random key. The function returns `{ index: 32-bit unsigned integer, key: bytes of length KEYBYTES }`.\n\nNote: `index` should be counted from 0.\n\n### `masterSeed = MultisigHMAC.seedgen()`\nGenerates a new cryptographically random master seed.\n\n### `key = MultisigHMAC.deriveKey(masterSeed, index)`\nDerives a new subkey from a master seed. `index` must be a 32-bit unsigned integer, but in practice you want to keep a much lower number, as the bitfield used with the signature has as many bits as the largest index. The function returns `{ index: 32-bit unsigned integer, key: bytes of length KEYBYTES }`.\n\nNote: `index` should be counted from 0.\n\nKeys are derived using a KDF based on HMAC:\n```\nb[0...BYTES] = HMAC(Key = masterSeed, data = 'derive' || U32LE(index) || 0x00)\nb[BYTES...] = HMAC(Key = masterSeed, b[0...BYTES] || 0x01)\n```\n\n### `signature = MultisigHMAC.sign(key, data)`\nIndependently signs `data` with `key`. The function returns `{ bitfield: 32-bit unsigned integer, signature: bytes of length BYTES }`. This object can be passed to the `combine()` function explained below.\n\n### `signature = MultisigHMAC.combine([signatures...])`\nCombines a list of signatures which have all been signed independently. Only include each signature once, otherwise they will cancel out. Signatures can be combined in any order. The function returns `{ bitfield: 32-bit unsigned integer, signature: bytearray of length BYTES }`.\n\n### `valid = MultisigHMAC.verify(keys, signature, data, threshold)`\nVerifies a `signature` of `data` against a list of `keys`, over a given `threshold`. `keys` must be an array of keys. The function returns `True` or `False`.\n\n### `valid = MultisigHMAC.verifyDerived(masterSeed, signature, data, threshold)`\nVerifies a `signature` of `data` against dynamically derived keys from `masterSeed`, over a given `threshold`. `masterSeed` must be bytes of length `KEYBYTES`. The function returns `True` or `False`.\n\n## Installation\n```console\n$ pip install multisig-hmac\n```\n\n## Running tests\n```console\n$ pip install -U pytest\n$ py.test\n```\n\n## License\n\n[ISC](LICENSE)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AmalieDue/multisig-hmac-python-version", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "multisig-hmac", "package_url": "https://pypi.org/project/multisig-hmac/", "platform": "", "project_url": "https://pypi.org/project/multisig-hmac/", "project_urls": {"Homepage": "https://github.com/AmalieDue/multisig-hmac-python-version"}, "release_url": "https://pypi.org/project/multisig-hmac/0.2.4/", "requires_dist": null, "requires_python": "", "summary": "multisig HMAC", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>multisig-hmac</h1>\n<blockquote>\n<p>Multisig scheme for HMAC authentication. Python implementation of <a href=\"https://github.com/emilbayes/multisig-hmac\" rel=\"nofollow\">multisig-hmac</a>.</p>\n</blockquote>\n<h2>Usage</h2>\n<p>Key management can happen in either of two modes, either by storing every of the component keys, or by storing a single master seed and using that to derive keys ad hoc.</p>\n<p>The following two examples return <code>true</code> when they are executed, for example inside a virtual environment.</p>\n<p>Using stored keys:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">multisig_hmac</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multisig_hmac.multisig_hmac</span> <span class=\"kn\">import</span> <span class=\"n\">MultisigHMAC</span>\n<span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">MultisigHMAC</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># generate keys which need to be stored securely and need to be shared securely with each party</span>\n<span class=\"n\">k0</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keygen</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign by each client</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'hello world'</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">k0</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># combine the used signatures</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">([</span><span class=\"n\">s0</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">])</span>\n\n<span class=\"n\">sent</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># --- network ---</span>\n\n<span class=\"n\">received</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64decode</span><span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># verify on the server</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">k0</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">]</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">received</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">))</span>\n</pre>\n<p>Using a derived master key:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">multisig_hmac</span>\n<span class=\"kn\">from</span> <span class=\"nn\">multisig_hmac.multisig_hmac</span> <span class=\"kn\">import</span> <span class=\"n\">MultisigHMAC</span>\n<span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">MultisigHMAC</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># generate a master seed which needs to be stored securely</span>\n<span class=\"c1\"># this seed must NOT be shared with any other party</span>\n<span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">seedgen</span><span class=\"p\">()</span>\n\n<span class=\"n\">k0</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">deriveKey</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">deriveKey</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">deriveKey</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># sign by each client</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'hello world'</span>\n\n<span class=\"n\">s0</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">k0</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">k2</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># combine the used signatures</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">([</span><span class=\"n\">s0</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">])</span>\n\n<span class=\"n\">sent</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># --- network ---</span>\n\n<span class=\"n\">received</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64decode</span><span class=\"p\">(</span><span class=\"n\">sent</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># verify on the server, but now keys are dynamically derived</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">received</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">verifyDerived</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">))</span>\n</pre>\n<h2>API</h2>\n<h3>Constants</h3>\n<ul>\n<li><code>MultisigHMAC.BYTES</code> signature length in bytes (default)</li>\n<li><code>MultisigHMAC.KEYBYTES</code> key length in bytes (default)</li>\n<li><code>MultisigHMAC.PRIMITIVE</code> is <code>sha256</code> (default)</li>\n</ul>\n<p>So far, the implementation supports the following specific algorithms:</p>\n<ul>\n<li><code>MultisigHMAC.SHA256_BYTES</code> signature length in bytes</li>\n<li><code>MultisigHMAC.SHA256_KEYBYTES</code> key length in bytes</li>\n<li><code>MultisigHMAC.SHA256_PRIMITIVE</code> is <code>sha256</code></li>\n<li><code>MultisigHMAC.SHA512_BYTES</code> signature length in bytes</li>\n<li><code>MultisigHMAC.SHA512_KEYBYTES</code> key length in bytes</li>\n<li><code>MultisigHMAC.SHA512_PRIMITIVE</code> is <code>sha512</code></li>\n<li><code>MultisigHMAC.SHA384_BYTES</code> signature length in bytes</li>\n<li><code>MultisigHMAC.SHA384_KEYBYTES</code> key length in bytes</li>\n<li><code>MultisigHMAC.SHA384_PRIMITIVE</code> is <code>sha384</code></li>\n</ul>\n<h3><code>n = MultisigHMAC.popcount(bitfield)</code></h3>\n<p>Returns the number of keys (i.e. high bits) in <code>bitfield</code>. <code>bitfield</code> must be a 32-bit unsigned integer. Example:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">MultisigHMAC</span><span class=\"o\">.</span><span class=\"n\">popcount</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre>\n<h3><code>xs = MultisigHMAC.keyIndexes(bitfield)</code></h3>\n<p>Returns the indexes of the keys (i.e. high bits) in <code>bitfield</code> as a list. <code>bitfield</code> must be a 32-bit unsigned integer. Example:</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">MultisigHMAC</span><span class=\"o\">.</span><span class=\"n\">keyIndexes</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<h3><code>m = MultisigHMAC([alg = MultisigHMAC.PRIMITIVE])</code></h3>\n<p>Creates a new instance of <code>MultisigHMAC</code> which can be used as a global singleton. Just sets the algorithm to be used for subsequent methods and associated constants. Example:</p>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">MultisigHMAC</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">popcount</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">keyIndexes</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n<h3><code>key = MultisigHMAC.keygen(index)</code></h3>\n<p>Generates a new cryptographically random key. The function returns <code>{ index: 32-bit unsigned integer, key: bytes of length KEYBYTES }</code>.</p>\n<p>Note: <code>index</code> should be counted from 0.</p>\n<h3><code>masterSeed = MultisigHMAC.seedgen()</code></h3>\n<p>Generates a new cryptographically random master seed.</p>\n<h3><code>key = MultisigHMAC.deriveKey(masterSeed, index)</code></h3>\n<p>Derives a new subkey from a master seed. <code>index</code> must be a 32-bit unsigned integer, but in practice you want to keep a much lower number, as the bitfield used with the signature has as many bits as the largest index. The function returns <code>{ index: 32-bit unsigned integer, key: bytes of length KEYBYTES }</code>.</p>\n<p>Note: <code>index</code> should be counted from 0.</p>\n<p>Keys are derived using a KDF based on HMAC:</p>\n<pre><code>b[0...BYTES] = HMAC(Key = masterSeed, data = 'derive' || U32LE(index) || 0x00)\nb[BYTES...] = HMAC(Key = masterSeed, b[0...BYTES] || 0x01)\n</code></pre>\n<h3><code>signature = MultisigHMAC.sign(key, data)</code></h3>\n<p>Independently signs <code>data</code> with <code>key</code>. The function returns <code>{ bitfield: 32-bit unsigned integer, signature: bytes of length BYTES }</code>. This object can be passed to the <code>combine()</code> function explained below.</p>\n<h3><code>signature = MultisigHMAC.combine([signatures...])</code></h3>\n<p>Combines a list of signatures which have all been signed independently. Only include each signature once, otherwise they will cancel out. Signatures can be combined in any order. The function returns <code>{ bitfield: 32-bit unsigned integer, signature: bytearray of length BYTES }</code>.</p>\n<h3><code>valid = MultisigHMAC.verify(keys, signature, data, threshold)</code></h3>\n<p>Verifies a <code>signature</code> of <code>data</code> against a list of <code>keys</code>, over a given <code>threshold</code>. <code>keys</code> must be an array of keys. The function returns <code>True</code> or <code>False</code>.</p>\n<h3><code>valid = MultisigHMAC.verifyDerived(masterSeed, signature, data, threshold)</code></h3>\n<p>Verifies a <code>signature</code> of <code>data</code> against dynamically derived keys from <code>masterSeed</code>, over a given <code>threshold</code>. <code>masterSeed</code> must be bytes of length <code>KEYBYTES</code>. The function returns <code>True</code> or <code>False</code>.</p>\n<h2>Installation</h2>\n<pre><span class=\"gp\">$</span> pip install multisig-hmac\n</pre>\n<h2>Running tests</h2>\n<pre><span class=\"gp\">$</span> pip install -U pytest\n<span class=\"gp\">$</span> py.test\n</pre>\n<h2>License</h2>\n<p><a href=\"LICENSE\" rel=\"nofollow\">ISC</a></p>\n\n          </div>"}, "last_serial": 6755449, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "3daed61fd92cdf0d724da133721417aa", "sha256": "76d36aae66ce5d339b568df02610e8914db91164a5efba95aaf6af76f0fa9dde"}, "downloads": -1, "filename": "multisig_hmac-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "3daed61fd92cdf0d724da133721417aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4540, "upload_time": "2020-02-20T10:18:55", "upload_time_iso_8601": "2020-02-20T10:18:55.306890Z", "url": "https://files.pythonhosted.org/packages/83/83/6b57fb039705ca3ecd1e39be58dcc84abcb35521a3d68aba7f20c2e7e834/multisig_hmac-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fa480b610c10903615a2cd294e7edc1", "sha256": "9f5c19eaa83b2222a991fcf1906fb74cf224effc3a8ff9c5ec0e60addcffd52f"}, "downloads": -1, "filename": "multisig-hmac-0.0.3.tar.gz", "has_sig": false, "md5_digest": "8fa480b610c10903615a2cd294e7edc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3411, "upload_time": "2020-02-20T10:19:00", "upload_time_iso_8601": "2020-02-20T10:19:00.227513Z", "url": "https://files.pythonhosted.org/packages/37/fe/ca5e518cc42dac9c75b1da72bad66e67a8402fd09741ba6c396fd9cb84be/multisig-hmac-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "edfde13a3a2cf6e526628593e631f4fc", "sha256": "7faf07b884e7f4325eda0b2e15fa8ea18b79bda8c69d0b8ab00f4bf66ce4508a"}, "downloads": -1, "filename": "multisig_hmac-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "edfde13a3a2cf6e526628593e631f4fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4541, "upload_time": "2020-02-20T10:18:56", "upload_time_iso_8601": "2020-02-20T10:18:56.841236Z", "url": "https://files.pythonhosted.org/packages/5c/95/f13e6feca39c2f9f93727ae955cb3f07cca7ae39c925429d1ce8c07826d8/multisig_hmac-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "041554e7aa1955fdcf076426c63bf258", "sha256": "19a3c416b508bb1f0cf74dba8400b71e22c93c2c24bfe63fbbef0b5aafc1b8f7"}, "downloads": -1, "filename": "multisig-hmac-0.0.4.tar.gz", "has_sig": false, "md5_digest": "041554e7aa1955fdcf076426c63bf258", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3409, "upload_time": "2020-02-20T10:19:01", "upload_time_iso_8601": "2020-02-20T10:19:01.754666Z", "url": "https://files.pythonhosted.org/packages/50/79/4e9b5a4530c1ab46298002c0285b6c48aa06a062baeb0d2b2660e6766b2c/multisig-hmac-0.0.4.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "71fe2fee2621aad25927eaefe3668094", "sha256": "f00e5f0f3c3d2116d5a7497e53ca279957c8bf3ac4a446d29ab72fe44f438053"}, "downloads": -1, "filename": "multisig_hmac-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "71fe2fee2621aad25927eaefe3668094", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2270, "upload_time": "2020-02-13T16:20:52", "upload_time_iso_8601": "2020-02-13T16:20:52.213862Z", "url": "https://files.pythonhosted.org/packages/ce/6d/b6ad8a4eff0c703fab46bd85420b6d649fc27fd9693af54526d628301d65/multisig_hmac-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "751acdb5c5d852497cd37226af4ea0f6", "sha256": "d9175ec420a4941aec22cec9cb19a889e6eca4732d8b4f98500ff236f54a7add"}, "downloads": -1, "filename": "multisig_hmac-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "751acdb5c5d852497cd37226af4ea0f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2777, "upload_time": "2020-02-17T13:44:25", "upload_time_iso_8601": "2020-02-17T13:44:25.638374Z", "url": "https://files.pythonhosted.org/packages/84/76/0c1afadbc6ea67e14b82ab8d359bf4c08196d6b3ce852d5f28ec619ef795/multisig_hmac-0.2-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "fa5cf178e1ce5d549d394e5053a659a7", "sha256": "6b581e2d0af5809a4cfccafcc827697c88659dbb397cd69b90b14cb883c86eb2"}, "downloads": -1, "filename": "multisig_hmac-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "fa5cf178e1ce5d549d394e5053a659a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4328, "upload_time": "2020-02-20T13:11:44", "upload_time_iso_8601": "2020-02-20T13:11:44.669874Z", "url": "https://files.pythonhosted.org/packages/00/4f/3b8b04f7a250ded9b3a008e4fa0ea8e26ee9c1996c32294f801aa2b76733/multisig_hmac-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae212aa6b98f78939b931f700e825c0b", "sha256": "706a30049453ae0446cef1a555021ac74aad9d9185bc8772f688f83dd794a054"}, "downloads": -1, "filename": "multisig-hmac-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ae212aa6b98f78939b931f700e825c0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3176, "upload_time": "2020-02-20T13:11:48", "upload_time_iso_8601": "2020-02-20T13:11:48.560360Z", "url": "https://files.pythonhosted.org/packages/8e/6b/e9c3ca770b2183c4f3c23803128841c699676b4b3218bc0fbc0b832e8c82/multisig-hmac-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0e556007fb50553eb76d116cfb90e41b", "sha256": "d12dc34a8078b0048607af9daead184a0946f602e87d984e88a09f7b43189366"}, "downloads": -1, "filename": "multisig_hmac-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0e556007fb50553eb76d116cfb90e41b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7364, "upload_time": "2020-03-02T12:30:33", "upload_time_iso_8601": "2020-03-02T12:30:33.274782Z", "url": "https://files.pythonhosted.org/packages/a4/b0/0e1355e4425c4e293525a8b3e5932c76c1b745bbb67697ab03bc60c7a166/multisig_hmac-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d9c972d52ae5a57a6df40541bc6e932", "sha256": "3716ff89465be51107eff83d53ce54c22ad6a3332084fa09dea93037e27b7e05"}, "downloads": -1, "filename": "multisig-hmac-0.2.2.tar.gz", "has_sig": false, "md5_digest": "6d9c972d52ae5a57a6df40541bc6e932", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4915, "upload_time": "2020-03-02T12:30:34", "upload_time_iso_8601": "2020-03-02T12:30:34.771311Z", "url": "https://files.pythonhosted.org/packages/20/80/42923a9b3ca02ba9061291a04a34f54e95a2336de37664e81c25eed1918d/multisig-hmac-0.2.2.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "2fba438d9ff34136d5411c527bb75418", "sha256": "bc1d810022d6d30367a7626dfa42b160e9b1b804ff88242d7323cb4f826dce82"}, "downloads": -1, "filename": "multisig_hmac-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2fba438d9ff34136d5411c527bb75418", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8456, "upload_time": "2020-03-05T14:45:04", "upload_time_iso_8601": "2020-03-05T14:45:04.128617Z", "url": "https://files.pythonhosted.org/packages/c7/90/9dfad1435a629874e4d4f5acd6ab7331b55bfbc41455b218ec1e9226e138/multisig_hmac-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "314662f4754bf0f5eeefaed92bb290fb", "sha256": "3f2770f845070917dd331d201376f4919229dd1809e4cc98da522bf9eb44d370"}, "downloads": -1, "filename": "multisig-hmac-0.2.4.tar.gz", "has_sig": false, "md5_digest": "314662f4754bf0f5eeefaed92bb290fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6142, "upload_time": "2020-03-05T14:45:05", "upload_time_iso_8601": "2020-03-05T14:45:05.519633Z", "url": "https://files.pythonhosted.org/packages/e3/47/e3364e7b41dd140eeb42977b77dbd60fe33e537b3e0e5f2f796fb28f10c3/multisig-hmac-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2fba438d9ff34136d5411c527bb75418", "sha256": "bc1d810022d6d30367a7626dfa42b160e9b1b804ff88242d7323cb4f826dce82"}, "downloads": -1, "filename": "multisig_hmac-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2fba438d9ff34136d5411c527bb75418", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8456, "upload_time": "2020-03-05T14:45:04", "upload_time_iso_8601": "2020-03-05T14:45:04.128617Z", "url": "https://files.pythonhosted.org/packages/c7/90/9dfad1435a629874e4d4f5acd6ab7331b55bfbc41455b218ec1e9226e138/multisig_hmac-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "314662f4754bf0f5eeefaed92bb290fb", "sha256": "3f2770f845070917dd331d201376f4919229dd1809e4cc98da522bf9eb44d370"}, "downloads": -1, "filename": "multisig-hmac-0.2.4.tar.gz", "has_sig": false, "md5_digest": "314662f4754bf0f5eeefaed92bb290fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6142, "upload_time": "2020-03-05T14:45:05", "upload_time_iso_8601": "2020-03-05T14:45:05.519633Z", "url": "https://files.pythonhosted.org/packages/e3/47/e3364e7b41dd140eeb42977b77dbd60fe33e537b3e0e5f2f796fb28f10c3/multisig-hmac-0.2.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:20 2020"}