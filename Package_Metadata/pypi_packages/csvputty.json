{"info": {"author": "Anthony Manning-Franklin", "author_email": "anthony.manning.franklin@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "csvputty\n========\n\n*Command-fu with csv files*\n\nA set of command line interfaces and python modules for easily\nmanipulating, transforming and dealing with csv files quickly and\neffectively.\n\nCLI Usage\n---------\n\nAll csvputty commands start with ``csvputty``, optionally any\ninput/output files you wish to use, and then the command you wish to\nperform.\n\nIf you do not supply i/o files then csvputty will use stdin/stdout\ninstead.\n\nExample:\n\n``$ csvputty -i data.csv -o out.txt``\n\nmarkup\n~~~~~~\n\nThis command will take the selected columns of a CSV file, process each\nrow through a format string, and return the collective output. For\nexample:\n\n``$ csvputty -i data.csv -o rendered.html markup 0 1 3 template.html``\n\nThis parses each row of ``data.csv`` using the content of\n``template.html`` as a format string and saves to ``rendered.html``.\n\nIn the above example, ``template.html`` could be the following:\n\n.. code:: html\n\n    <div class=\"row\">\n      <div class=\"col-sm-4\">{}</div>\n      <div class=\"col-sm-4\">{}</div>\n      <div class=\"col-sm-4\">{}</div>\n    </div>\n\nor\n\n.. code:: html\n\n    <div class=\"row\">\n      <div class=\"col-sm-4\">{coconuts}</div>\n      <div class=\"col-sm-4\">{cheese}</div>\n      <div class=\"col-sm-4\">{sausages}</div>\n    </div>\n\nIf used with the ``-h --header`` flag the first row of the CSV is used\nto key the template.\n\nHowever csvputty really becomes useful in the full context of the\ncommand line. Take the following example:\n\n``$ cat data1.csv data2.csv | csvputty -o rendered.html markup 0 1 template.html``\n\nThis passes ``data1.csv`` and ``data2.csv`` through the same template\nand renders them together in a single file.\n\n``csvputty -i data.csv markup 0 1 -``\n\nThis opens stdin allowing you to enter the template via command line and\nprints the results to stdout.\n\ndiff\n~~~~\n\nDiff compares the input CSV against another CSV and outputs rows where\nselected columns fulfil the match condition.\n\n``$ cat subtract1.csv subtract2.csv | csvputty -i source.csv -o out.csv diff -sc 18 -``\n\nThe above example returns rows from ``source.csv`` where column 18 is\nnot found on column column 0 anywhere in ``subtract1.csv`` or\n``subtract2.csv``.\n\nPackage Usage\n-------------\n\nImporting csvputty into your project allows you to use some features\nunavailable via the command line interface.\n\nFor example:\n\n.. code:: python\n\n    import csvputty\n\n\n    def parse_row(row, row_index):\n        for idx, col in enumerate(row):\n            row[idx] = col.strip().replace(\"&\", \"&amp;\")\n        img_url = row[2].lower().replace(\" \", \"_\").replace('&amp;', 'and')\n        insta_url = row[4].replace(\"@\", \"\")\n\n        return (img_url, row[1], insta_url, row[3], row[6])\n\n\n    input = open('data.csv', 'r')\n    out = open('rendered.html', 'w')\n    template = open('template.html', 'r')\n\n    csvputty.markup.generate(custom_row_parser=parse_row, csv_file=input\n                             template_file=template, out_file=out)\n\nThe above example allows me to strip whitespace and replace ampersands\nwith html entities on all columns, and perform further processing on\nother columns.", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Antman261/csvputty", "keywords": "csv command line cli", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "csvputty", "package_url": "https://pypi.org/project/csvputty/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/csvputty/", "project_urls": {"Homepage": "https://github.com/Antman261/csvputty"}, "release_url": "https://pypi.org/project/csvputty/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "CSV CLI utility functions and packages in Python.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Command-fu with csv files</em></p>\n<p>A set of command line interfaces and python modules for easily\nmanipulating, transforming and dealing with csv files quickly and\neffectively.</p>\n<div id=\"cli-usage\">\n<h2>CLI Usage</h2>\n<p>All csvputty commands start with <tt>csvputty</tt>, optionally any\ninput/output files you wish to use, and then the command you wish to\nperform.</p>\n<p>If you do not supply i/o files then csvputty will use stdin/stdout\ninstead.</p>\n<p>Example:</p>\n<p><tt>$ csvputty <span class=\"pre\">-i</span> data.csv <span class=\"pre\">-o</span> out.txt</tt></p>\n<div id=\"markup\">\n<h3>markup</h3>\n<p>This command will take the selected columns of a CSV file, process each\nrow through a format string, and return the collective output. For\nexample:</p>\n<p><tt>$ csvputty <span class=\"pre\">-i</span> data.csv <span class=\"pre\">-o</span> rendered.html markup 0 1 3 template.html</tt></p>\n<p>This parses each row of <tt>data.csv</tt> using the content of\n<tt>template.html</tt> as a format string and saves to <tt>rendered.html</tt>.</p>\n<p>In the above example, <tt>template.html</tt> could be the following:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"row\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-sm-4\"</span><span class=\"p\">&gt;</span>{}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-sm-4\"</span><span class=\"p\">&gt;</span>{}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-sm-4\"</span><span class=\"p\">&gt;</span>{}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>or</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"row\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-sm-4\"</span><span class=\"p\">&gt;</span>{coconuts}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-sm-4\"</span><span class=\"p\">&gt;</span>{cheese}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"col-sm-4\"</span><span class=\"p\">&gt;</span>{sausages}<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre>\n<p>If used with the <tt><span class=\"pre\">-h</span> <span class=\"pre\">--header</span></tt> flag the first row of the CSV is used\nto key the template.</p>\n<p>However csvputty really becomes useful in the full context of the\ncommand line. Take the following example:</p>\n<p><tt>$ cat data1.csv data2.csv | csvputty <span class=\"pre\">-o</span> rendered.html markup 0 1 template.html</tt></p>\n<p>This passes <tt>data1.csv</tt> and <tt>data2.csv</tt> through the same template\nand renders them together in a single file.</p>\n<p><tt>csvputty <span class=\"pre\">-i</span> data.csv markup 0 1 -</tt></p>\n<p>This opens stdin allowing you to enter the template via command line and\nprints the results to stdout.</p>\n</div>\n<div id=\"diff\">\n<h3>diff</h3>\n<p>Diff compares the input CSV against another CSV and outputs rows where\nselected columns fulfil the match condition.</p>\n<p><tt>$ cat subtract1.csv subtract2.csv | csvputty <span class=\"pre\">-i</span> source.csv <span class=\"pre\">-o</span> out.csv diff <span class=\"pre\">-sc</span> 18 -</tt></p>\n<p>The above example returns rows from <tt>source.csv</tt> where column 18 is\nnot found on column column 0 anywhere in <tt>subtract1.csv</tt> or\n<tt>subtract2.csv</tt>.</p>\n</div>\n</div>\n<div id=\"package-usage\">\n<h2>Package Usage</h2>\n<p>Importing csvputty into your project allows you to use some features\nunavailable via the command line interface.</p>\n<p>For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">csvputty</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_row</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">row_index</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">):</span>\n        <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">col</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"&amp;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&amp;amp;\"</span><span class=\"p\">)</span>\n    <span class=\"n\">img_url</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"s2\">\"_\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'&amp;amp;'</span><span class=\"p\">,</span> <span class=\"s1\">'and'</span><span class=\"p\">)</span>\n    <span class=\"n\">insta_url</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">\"@\"</span><span class=\"p\">,</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">img_url</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">insta_url</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n\n\n<span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'data.csv'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span>\n<span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'rendered.html'</span><span class=\"p\">,</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span>\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'template.html'</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span>\n\n<span class=\"n\">csvputty</span><span class=\"o\">.</span><span class=\"n\">markup</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">custom_row_parser</span><span class=\"o\">=</span><span class=\"n\">parse_row</span><span class=\"p\">,</span> <span class=\"n\">csv_file</span><span class=\"o\">=</span><span class=\"nb\">input</span>\n                         <span class=\"n\">template_file</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">out_file</span><span class=\"o\">=</span><span class=\"n\">out</span><span class=\"p\">)</span>\n</pre>\n<p>The above example allows me to strip whitespace and replace ampersands\nwith html entities on all columns, and perform further processing on\nother columns.</p>\n</div>\n\n          </div>"}, "last_serial": 2782024, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "24232bd73dcd876ad02c666a1e301fba", "sha256": "1a5785d42665696915c42f9e7b2e00454dfda14d5b4ac3e25ab58a1bc268dfff"}, "downloads": -1, "filename": "csvputty-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "24232bd73dcd876ad02c666a1e301fba", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 8284, "upload_time": "2017-04-11T14:10:55", "upload_time_iso_8601": "2017-04-11T14:10:55.053066Z", "url": "https://files.pythonhosted.org/packages/38/b4/8939dbe3181f4c2c4c3ddb7da036a6e19d0820d104bac2ccf435da6c89ab/csvputty-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "24232bd73dcd876ad02c666a1e301fba", "sha256": "1a5785d42665696915c42f9e7b2e00454dfda14d5b4ac3e25ab58a1bc268dfff"}, "downloads": -1, "filename": "csvputty-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "24232bd73dcd876ad02c666a1e301fba", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 8284, "upload_time": "2017-04-11T14:10:55", "upload_time_iso_8601": "2017-04-11T14:10:55.053066Z", "url": "https://files.pythonhosted.org/packages/38/b4/8939dbe3181f4c2c4c3ddb7da036a6e19d0820d104bac2ccf435da6c89ab/csvputty-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:41:40 2020"}