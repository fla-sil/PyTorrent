{"info": {"author": "descusr", "author_email": "descusr@163.com", "bugtrack_url": null, "classifiers": ["Framework :: Pyramid", "Intended Audience :: Developers", "License :: Repoze Public License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI"], "description": "Pyramid\n=======\n\nPyramid is a small, fast, down-to-earth, open source Python web application\ndevelopment framework. It makes real-world web application development and\ndeployment more fun, more predictable, and more productive.\n\nPyramid is produced by the `Pylons Project <http://pylonsproject.org/>`_.\n\nSupport and Documentation\n-------------------------\n\nSee the `Pylons Project website <http://pylonsproject.org/>`_ to view\ndocumentation, report bugs, and obtain support.\n\nLicense\n-------\n\nPyramid is offered under the BSD-derived `Repoze Public License\n<http://repoze.org/license.html>`_.\n\nAuthors\n-------\n\nPyramid is made available by `Agendaless Consulting <http://agendaless.com>`_\nand a team of contributors.\n\n\n\n1.4 (2012-12-18)\n================\n\nDocs\n----\n\n- Fix functional tests in the ZODB tutorial\n\n1.4b3 (2012-12-10)\n==================\n\n- Packaging release only, no code changes.  1.4b2 was a brownbag release due to\n  missing directories in the tarball.\n\n1.4b2 (2012-12-10)\n==================\n\nDocs\n----\n\n- Scaffolding is now PEP-8 compliant (at least for a brief shining moment).\n\n- Tutorial improvements.\n\nBackwards Incompatibilities\n---------------------------\n\n- Modified the ``_depth`` argument to ``pyramid.view.view_config`` to accept\n  a value relative to the invocation of ``view_config`` itself. Thus, when it\n  was previously expecting a value of ``1`` or greater, to reflect that\n  the caller of ``view_config`` is 1 stack frame away from ``venusian.attach``,\n  this implementation detail is now hidden.\n\n- Modified the ``_backframes`` argument to ``pyramid.util.action_method`` in a\n  similar way to the changes described to ``_depth`` above.  This argument\n  remains undocumented, but might be used in the wild by some insane person.\n\n1.4b1 (2012-11-21)\n==================\n\nFeatures\n--------\n\n- Small microspeed enhancement which anticipates that a\n  ``pyramid.response.Response`` object is likely to be returned from a view.\n  Some code is shortcut if the class of the object returned by a view is this\n  class.  A similar microoptimization was done to\n  ``pyramid.request.Request.is_response``.\n\n- Make it possible to use variable arguments on ``p*`` commands (``pserve``,\n  ``pshell``, ``pviews``, etc) in the form ``a=1 b=2`` so you can fill in\n  values in parameterized ``.ini`` file, e.g. ``pshell etc/development.ini\n  http_port=8080``.  See https://github.com/Pylons/pyramid/pull/714\n\n- A somewhat advanced and obscure feature of Pyramid event handlers is their\n  ability to handle \"multi-interface\" notifications.  These notifications have\n  traditionally presented multiple objects to the subscriber callable.  For\n  instance, if an event was sent by code like this::\n\n     registry.notify(event, context)\n\n  In the past, in order to catch such an event, you were obligated to write and\n  register an event subscriber that mentioned both the event and the context in\n  its argument list::\n\n     @subscriber([SomeEvent, SomeContextType])\n     def asubscriber(event, context):\n         pass\n\n  In many subscriber callables registered this way, it was common for the logic\n  in the subscriber callable to completely ignore the second and following\n  arguments (e.g. ``context`` in the above example might be ignored), because\n  they usually existed as attributes of the event anyway.  You could usually\n  get the same value by doing ``event.context`` or similar.\n\n  The fact that you needed to put an extra argument which you usually ignored\n  in the subscriber callable body was only a minor annoyance until we added\n  \"subscriber predicates\", used to narrow the set of circumstances under which\n  a subscriber will be executed, in a prior 1.4 alpha release.  Once those were\n  added, the annoyance was escalated, because subscriber predicates needed to\n  accept the same argument list and arity as the subscriber callables that they\n  were configured against.  So, for example, if you had these two subscriber\n  registrations in your code::\n\n     @subscriber([SomeEvent, SomeContextType])\n     def asubscriber(event, context):\n         pass\n\n     @subscriber(SomeOtherEvent)\n     def asubscriber(event):\n         pass\n \n  And you wanted to use a subscriber predicate::\n\n     @subscriber([SomeEvent, SomeContextType], mypredicate=True)\n     def asubscriber1(event, context):\n         pass\n\n     @subscriber(SomeOtherEvent, mypredicate=True)\n     def asubscriber2(event):\n         pass\n\n  If an existing ``mypredicate`` subscriber predicate had been written in such\n  a way that it accepted only one argument in its ``__call__``, you could not\n  use it against a subscription which named more than one interface in its\n  subscriber interface list.  Similarly, if you had written a subscriber\n  predicate that accepted two arguments, you couldn't use it against a\n  registration that named only a single interface type.\n\n  For example, if you created this predicate::\n\n    class MyPredicate(object):\n        # portions elided...\n        def __call__(self, event):\n            return self.val == event.context.foo\n\n  It would not work against a multi-interface-registered subscription, so in\n  the above example, when you attempted to use it against ``asubscriber1``, it\n  would fail at runtime with a TypeError, claiming something was attempting to\n  call it with too many arguments.\n\n  To hack around this limitation, you were obligated to design the\n  ``mypredicate`` predicate to expect to receive in its ``__call__`` either a\n  single ``event`` argument (a SomeOtherEvent object) *or* a pair of arguments\n  (a SomeEvent object and a SomeContextType object), presumably by doing\n  something like this::\n\n    class MyPredicate(object):\n        # portions elided...\n        def __call__(self, event, context=None):\n            return self.val == event.context.foo\n\n  This was confusing and bad.\n\n  In order to allow people to ignore unused arguments to subscriber callables\n  and to normalize the relationship between event subscribers and subscriber\n  predicates, we now allow both subscribers and subscriber predicates to accept\n  only a single ``event`` argument even if they've been subscribed for\n  notifications that involve multiple interfaces.  Subscribers and subscriber\n  predicates that accept only one argument will receive the first object passed\n  to ``notify``; this is typically (but not always) the event object.  The\n  other objects involved in the subscription lookup will be discarded.  You can\n  now write an event subscriber that accepts only ``event`` even if it\n  subscribes to multiple interfaces::\n\n     @subscriber([SomeEvent, SomeContextType])\n     def asubscriber(event):\n         # this will work!\n\n  This prevents you from needing to match the subscriber callable parameters to\n  the subscription type unnecessarily, especially when you don't make use of\n  any argument in your subscribers except for the event object itself.\n\n  Note, however, that if the event object is not the first\n  object in the call to ``notify``, you'll run into trouble.  For example, if\n  notify is called with the context argument first::\n\n     registry.notify(context, event)\n\n  You won't be able to take advantage of the event-only feature.  It will\n  \"work\", but the object received by your event handler won't be the event\n  object, it will be the context object, which won't be very useful::\n\n     @subscriber([SomeContextType, SomeEvent])\n     def asubscriber(event):\n         # bzzt! you'll be getting the context here as ``event``, and it'll \n         # be useless\n\n  Existing multiple-argument subscribers continue to work without issue, so you\n  should continue use those if your system notifies using multiple interfaces\n  and the first interface is not the event interface.  For example::\n\n     @subscriber([SomeContextType, SomeEvent])\n     def asubscriber(context, event):\n         # this will still work!\n\n  The event-only feature makes it possible to use a subscriber predicate that\n  accepts only a request argument within both multiple-interface subscriber\n  registrations and single-interface subscriber registrations.  You needn't\n  make slightly different variations of predicates depending on the\n  subscription type arguments.  Instead, just write all your subscriber\n  predicates so they only accept ``event`` in their ``__call__`` and they'll be\n  useful across all registrations for subscriptions that use an event as their\n  first argument, even ones which accept more than just ``event``.\n\n  However, the same caveat applies to predicates as to subscriber callables: if\n  you're subscribing to a multi-interface event, and the first interface is not\n  the event interface, the predicate won't work properly.  In such a case,\n  you'll need to match the predicate ``__call__`` argument ordering and\n  composition to the ordering of the interfaces.  For example, if the\n  registration for the subscription uses ``[SomeContext, SomeEvent]``, you'll\n  need to reflect that in the ordering of the parameters of the predicate's\n  ``__call__`` method::\n\n        def __call__(self, context, event):\n            return event.request.path.startswith(self.val)\n\n  tl;dr: 1) When using multi-interface subscriptions, always use the event type\n  as the first subscription registration argument and 2) When 1 is true, use\n  only ``event`` in your subscriber and subscriber predicate parameter lists,\n  no matter how many interfaces the subscriber is notified with.  This\n  combination will result in the maximum amount of reusability of subscriber\n  predicates and the least amount of thought on your part.  Drink responsibly.\n\nBug Fixes\n---------\n\n- A failure when trying to locate the attribute ``__text__`` on route and view\n  predicates existed when the ``debug_routematch`` setting was true or when the\n  ``pviews`` command was used. See https://github.com/Pylons/pyramid/pull/727\n\nDocumentation\n-------------\n\n- Sync up tutorial source files with the files that are rendered by the\n  scaffold that each uses.\n\n1.4a4 (2012-11-14)\n==================\n\nFeatures\n--------\n\n- ``pyramid.authentication.AuthTktAuthenticationPolicy`` has been updated to\n  support newer hashing algorithms such as ``sha512``. Existing applications\n  should consider updating if possible for improved security over the default\n  md5 hashing.\n\n- Added an ``effective_principals`` route and view predicate.\n\n- Do not allow the userid returned from the ``authenticated_userid`` or the\n  userid that is one of the list of principals returned by\n  ``effective_principals`` to be either of the strings ``system.Everyone`` or\n  ``system.Authenticated`` when any of the built-in authorization policies that\n  live in ``pyramid.authentication`` are in use.  These two strings are\n  reserved for internal usage by Pyramid and they will not be accepted as valid\n  userids.\n\n- Slightly better debug logging from\n  ``pyramid.authentication.RepozeWho1AuthenticationPolicy``.\n\n- ``pyramid.security.view_execution_permitted`` used to return ``True`` if no\n  view could be found. It now raises a ``TypeError`` exception in that case, as\n  it doesn't make sense to assert that a nonexistent view is\n  execution-permitted. See https://github.com/Pylons/pyramid/issues/299.\n\n- Allow a ``_depth`` argument to ``pyramid.view.view_config``, which will\n  permit limited composition reuse of the decorator by other software that\n  wants to provide custom decorators that are much like view_config.\n\n- Allow an iterable of decorators to be passed to\n  ``pyramid.config.Configurator.add_view``. This allows views to be wrapped\n  by more than one decorator without requiring combining the decorators\n  yourself.\n\nBug Fixes\n---------\n\n- In the past if a renderer returned ``None``, the body of the resulting\n  response would be set explicitly to the empty string.  Instead, now, the body\n  is left unchanged, which allows the renderer to set a body itself by using\n  e.g. ``request.response.body = b'foo'``.  The body set by the renderer will\n  be unmolested on the way out.  See\n  https://github.com/Pylons/pyramid/issues/709\n\n- In uncommon cases, the ``pyramid_excview_tween_factory`` might have\n  inadvertently raised a ``KeyError`` looking for ``request_iface`` as an\n  attribute of the request.  It no longer fails in this case.  See\n  https://github.com/Pylons/pyramid/issues/700\n\n- Be more tolerant of potential error conditions in ``match_param`` and\n  ``physical_path`` predicate implementations; instead of raising an exception,\n  return False.\n\n- ``pyramid.view.render_view`` was not functioning properly under Python 3.x\n  due to a byte/unicode discrepancy. See\n  http://github.com/Pylons/pyramid/issues/721\n\nDeprecations\n------------\n\n- ``pyramid.authentication.AuthTktAuthenticationPolicy`` will emit a warning if\n  an application is using the policy without explicitly passing a ``hashalg``\n  argument. This is because the default is \"md5\" which is considered\n  theoretically subject to collision attacks. If you really want \"md5\" then you\n  must specify it explicitly to get rid of the warning.\n\nDocumentation\n-------------\n\n- All of the tutorials that use\n  ``pyramid.authentication.AuthTktAuthenticationPolicy`` now explicitly pass\n  ``sha512`` as a ``hashalg`` argument.\n\n\nInternals\n---------\n\n- Move ``TopologicalSorter`` from ``pyramid.config.util`` to ``pyramid.util``,\n  move ``CyclicDependencyError`` from ``pyramid.config.util`` to\n  ``pyramid.exceptions``, rename ``Singleton`` to ``Sentinel`` and move from\n  ``pyramid.config.util`` to ``pyramid.util``; this is in an effort to\n  move that stuff that may be an API one day out of ``pyramid.config.util``,\n  because that package should never be imported from non-Pyramid code.\n  TopologicalSorter is still not an API, but may become one.\n\n- Get rid of shady monkeypatching of ``pyramid.request.Request`` and\n  ``pyramid.response.Response`` done within the ``__init__.py`` of Pyramid.\n  Webob no longer relies on this being done.  Instead, the ResponseClass\n  attribute of the Pyramid Request class is assigned to the Pyramid response\n  class; that's enough to satisfy WebOb and behave as it did before with the\n  monkeypatching.\n\n1.4a3 (2012-10-26)\n==================\n\nBug Fixes\n---------\n\n- The match_param predicate's text method was fixed to sort its values.\n  Part of https://github.com/Pylons/pyramid/pull/705\n\n- 1.4a ``pyramid.scripting.prepare`` behaved differently than 1.3 series\n  function of same name.  In particular, if passed a request, it would not\n  set the ``registry`` attribute of the request like 1.3 did.  A symptom\n  would be that passing a request to ``pyramid.paster.bootstrap`` (which uses\n  the function) that did not have a ``registry`` attribute could assume that\n  the registry would be attached to the request by Pyramid.  This assumption\n  could be made in 1.3, but not in 1.4.  The assumption can now be made in\n  1.4 too (a registry is attached to a request passed to bootstrap or\n  prepare).\n\n- When registering a view configuration that named a Chameleon ZPT renderer\n  with a macro name in it (e.g. ``renderer='some/template#somemacro.pt``) as\n  well as a view configuration without a macro name it it that pointed to the\n  same template (e.g. ``renderer='some/template.pt'``), internal caching could\n  confuse the two, and your code might have rendered one instead of the\n  other.\n\nFeatures\n--------\n\n- Allow multiple values to be specified to the ``request_param`` view/route\n  predicate as a sequence.  Previously only a single string value was allowed.\n  See https://github.com/Pylons/pyramid/pull/705\n\n- Comments with references to documentation sections placed in scaffold\n  ``.ini`` files.\n\n- Added an HTTP Basic authentication policy\n  at ``pyramid.authentication.BasicAuthAuthenticationPolicy``.\n\n- The Configurator ``testing_securitypolicy`` method now returns the policy\n  object it creates.\n\n- The Configurator ``testing_securitypolicy`` method accepts two new\n  arguments: ``remember_result`` and ``forget_result``.  If supplied, these\n  values influence the result of the policy's ``remember`` and ``forget``\n  methods, respectively.\n\n- The DummySecurityPolicy created by ``testing_securitypolicy`` now sets a\n  ``forgotten`` value on the policy (the value ``True``) when its ``forget``\n  method is called.\n\n- The DummySecurityPolicy created by ``testing_securitypolicy`` now sets a\n  ``remembered`` value on the policy, which is the value of the ``principal``\n  argument it's called with when its ``remember`` method is called.\n\n- New ``physical_path`` view predicate.  If specified, this value should be a\n  string or a tuple representing the physical traversal path of the context\n  found via traversal for this predicate to match as true.  For example:\n  ``physical_path='/'`` or ``physical_path='/a/b/c'`` or ``physical_path=('',\n  'a', 'b', 'c')``.  This is not a path prefix match or a regex, it's a\n  whole-path match.  It's useful when you want to always potentially show a\n  view when some object is traversed to, but you can't be sure about what kind\n  of object it will be, so you can't use the ``context`` predicate.  The\n  individual path elements inbetween slash characters or in tuple elements\n  should be the Unicode representation of the name of the resource and should\n  not be encoded in any way.\n\n1.4a2 (2012-09-27)\n==================\n\nBug Fixes\n---------\n\n- When trying to determine Mako defnames and Chameleon macro names in asset\n  specifications, take into account that the filename may have a hyphen in\n  it.  See https://github.com/Pylons/pyramid/pull/692\n\nFeatures\n--------\n\n- A new ``pyramid.session.check_csrf_token`` convenience function was added.\n\n- A ``check_csrf`` view predicate was added.  For example, you can now do\n  ``config.add_view(someview, check_csrf=True)``.  When the predicate is\n  checked, if the ``csrf_token`` value in ``request.params`` matches the CSRF\n  token in the request's session, the view will be permitted to execute.\n  Otherwise, it will not be permitted to execute.\n\n- Add ``Base.metadata.bind = engine`` to alchemy template, so that tables\n  defined imperatively will work.\n\nDocumentation\n-------------\n\n- update wiki2 SQLA tutorial with the changes required after inserting\n  ``Base.metadata.bind = engine`` into the alchemy scaffold.\n\n1.4a1 (2012-09-16)\n==================\n\nBug Fixes\n---------\n\n- Forward port from 1.3 branch: When no authentication policy was configured,\n  a call to ``pyramid.security.effective_principals`` would unconditionally\n  return the empty list.  This was incorrect, it should have unconditionally\n  returned ``[Everyone]``, and now does.\n\n- Explicit url dispatch regexes can now contain colons.\n  https://github.com/Pylons/pyramid/issues/629\n\n- On at least one 64-bit Ubuntu system under Python 3.2, using the\n  ``view_config`` decorator caused a ``RuntimeError: dictionary changed size\n  during iteration`` exception.  It no longer does.  See\n  https://github.com/Pylons/pyramid/issues/635 for more information.\n\n- In Mako Templates lookup, check if the uri is already adjusted and bring\n  it back to an asset spec. Normally occurs with inherited templates or\n  included components.\n  https://github.com/Pylons/pyramid/issues/606\n  https://github.com/Pylons/pyramid/issues/607\n\n- In Mako Templates lookup, check for absolute uri (using mako directories) \n  when mixing up inheritance with asset specs.\n  https://github.com/Pylons/pyramid/issues/662\n\n- HTTP Accept headers were not being normalized causing potentially\n  conflicting view registrations to go unnoticed. Two views that only\n  differ in the case ('text/html' vs. 'text/HTML') will now raise an error.\n  https://github.com/Pylons/pyramid/pull/620\n\n- Forward-port from 1.3 branch: when registering multiple views with an\n  ``accept`` predicate in a Pyramid application runing under Python 3, you\n  might have received a ``TypeError: unorderable types: function() <\n  function()`` exception.\n\nFeatures\n--------\n\n- Configurator.add_directive now accepts arbitrary callables like partials or\n  objects implementing ``__call__`` which dont have ``__name__`` and\n  ``__doc__`` attributes.  See https://github.com/Pylons/pyramid/issues/621\n  and https://github.com/Pylons/pyramid/pull/647.\n\n- Third-party custom view, route, and subscriber predicates can now be added\n  for use by view authors via\n  ``pyramid.config.Configurator.add_view_predicate``,\n  ``pyramid.config.Configurator.add_route_predicate`` and\n  ``pyramid.config.Configurator.add_subscriber_predicate``.  So, for example,\n  doing this::\n\n     config.add_view_predicate('abc', my.package.ABCPredicate)\n\n  Might allow a view author to do this in an application that configured that\n  predicate::\n\n     @view_config(abc=1)\n\n  Similar features exist for ``add_route``, and ``add_subscriber``.  See\n  \"Adding A Third Party View, Route, or Subscriber Predicate\" in the Hooks\n  chapter for more information.\n\n  Note that changes made to support the above feature now means that only\n  actions registered using the same \"order\" can conflict with one another.\n  It used to be the case that actions registered at different orders could\n  potentially conflict, but to my knowledge nothing ever depended on this\n  behavior (it was a bit silly).\n\n- Custom objects can be made easily JSON-serializable in Pyramid by defining\n  a ``__json__`` method on the object's class. This method should return\n  values natively serializable by ``json.dumps`` (such as ints, lists,\n  dictionaries, strings, and so forth).\n\n- The JSON renderer now allows for the definition of custom type adapters to\n  convert unknown objects to JSON serializations.\n\n- As of this release, the ``request_method`` predicate, when used, will also\n  imply that ``HEAD`` is implied when you use ``GET``.  For example, using\n  ``@view_config(request_method='GET')`` is equivalent to using\n  ``@view_config(request_method=('GET', 'HEAD'))``.  Using\n  ``@view_config(request_method=('GET', 'POST')`` is equivalent to using\n  ``@view_config(request_method=('GET', 'HEAD', 'POST')``.  This is because\n  HEAD is a variant of GET that omits the body, and WebOb has special support\n  to return an empty body when a HEAD is used.\n\n- ``config.add_request_method`` has been introduced to support extending\n  request objects with arbitrary callables. This method expands on the\n  previous ``config.set_request_property`` by supporting methods as well as\n  properties. This method now causes less code to be executed at\n  request construction time than ``config.set_request_property`` in\n  version 1.3.\n\n- Don't add a ``?`` to URLs generated by ``request.resource_url`` if the\n  ``query`` argument is provided but empty.\n\n- Don't add a ``?`` to URLs generated by ``request.route_url`` if the\n  ``_query`` argument is provided but empty.\n\n- The static view machinery now raises (rather than returns) ``HTTPNotFound``\n  and ``HTTPMovedPermanently`` exceptions, so these can be caught by the\n  NotFound view (and other exception views).\n\n- The Mako renderer now supports a def name in an asset spec.  When the def\n  name is present in the asset spec, the system will render the template def\n  within the template and will return the result. An example asset spec is\n  ``package:path/to/template#defname.mako``. This will render the def named\n  ``defname`` inside the ``template.mako`` template instead of rendering the\n  entire template.  The old way of returning a tuple in the form\n  ``('defname', {})`` from the view is supported for backward compatibility,\n\n- The Chameleon ZPT renderer now accepts a macro name in an asset spec.  When\n  the macro name is present in the asset spec, the system will render the\n  macro listed as a ``define-macro`` and return the result instead of\n  rendering the entire template.  An example asset spec:\n  ``package:path/to/template#macroname.pt``.  This will render the macro\n  defined as ``macroname`` within the ``template.pt`` template instead of the\n  entire templae.\n\n- When there is a predicate mismatch exception (seen when no view matches for\n  a given request due to predicates not working), the exception now contains\n  a textual description of the predicate which didn't match.\n\n- An ``add_permission`` directive method was added to the Configurator.  This\n  directive registers a free-standing permission introspectable into the\n  Pyramid introspection system.  Frameworks built atop Pyramid can thus use\n  the the ``permissions`` introspectable category data to build a\n  comprehensive list of permissions supported by a running system.  Before\n  this method was added, permissions were already registered in this\n  introspectable category as a side effect of naming them in an ``add_view``\n  call, this method just makes it possible to arrange for a permission to be\n  put into the ``permissions`` introspectable category without naming it\n  along with an associated view.  Here's an example of usage of\n  ``add_permission``::\n\n      config = Configurator()\n      config.add_permission('view')\n\n- The ``UnencryptedCookieSessionFactoryConfig`` now accepts\n  ``signed_serialize`` and ``signed_deserialize`` hooks which may be used\n  to influence how the sessions are marshalled (by default this is done\n  with HMAC+pickle).\n\n- ``pyramid.testing.DummyRequest`` now supports methods supplied by the\n  ``pyramid.util.InstancePropertyMixin`` class such as ``set_property``.\n\n- Request properties and methods added via ``config.set_request_property`` or\n  ``config.add_request_method`` are now available to tweens.\n\n- Request properties and methods added via ``config.set_request_property`` or\n  ``config.add_request_method`` are now available in the request object\n  returned from ``pyramid.paster.bootstrap``.\n\n- ``request.context`` of environment request during ``bootstrap`` is now the\n  root object if a context isn't already set on a provided request.\n\n- The ``pyramid.decorator.reify`` function is now an API, and was added to\n  the API documentation.\n\n- Added the ``pyramid.testing.testConfig`` context manager, which can be used\n  to generate a configurator in a test, e.g. ``with testing.testConfig(...):``.\n\n- Users can now invoke a subrequest from within view code using a new\n  ``request.invoke_subrequest`` API.\n\nDeprecations\n------------\n\n- The ``pyramid.config.Configurator.set_request_property`` has been\n  documentation-deprecated.  The method remains usable but the more\n  featureful ``pyramid.config.Configurator.add_request_method`` should be\n  used in its place (it has all of the same capabilities but can also extend\n  the request object with methods).\n\nBackwards Incompatibilities\n---------------------------\n\n- The Pyramid router no longer adds the values ``bfg.routes.route`` or\n  ``bfg.routes.matchdict`` to the request's WSGI environment dictionary.\n  These values were docs-deprecated in ``repoze.bfg`` 1.0 (effectively seven\n  minor releases ago).  If your code depended on these values, use\n  request.matched_route and request.matchdict instead.\n\n- It is no longer possible to pass an environ dictionary directly to\n  ``pyramid.traversal.ResourceTreeTraverser.__call__`` (aka\n  ``ModelGraphTraverser.__call__``).  Instead, you must pass a request\n  object.  Passing an environment instead of a request has generated a\n  deprecation warning since Pyramid 1.1.\n\n- Pyramid will no longer work properly if you use the\n  ``webob.request.LegacyRequest`` as a request factory.  Instances of the\n  LegacyRequest class have a ``request.path_info`` which return a string.\n  This Pyramid release assumes that ``request.path_info`` will\n  unconditionally be Unicode.\n\n- The functions from ``pyramid.chameleon_zpt`` and ``pyramid.chameleon_text``\n  named ``get_renderer``, ``get_template``, ``render_template``, and\n  ``render_template_to_response`` have been removed.  These have issued a\n  deprecation warning upon import since Pyramid 1.0.  Use\n  ``pyramid.renderers.get_renderer()``,\n  ``pyramid.renderers.get_renderer().implementation()``,\n  ``pyramid.renderers.render()`` or ``pyramid.renderers.render_to_response``\n  respectively instead of these functions.\n\n- The ``pyramid.configuration`` module was removed.  It had been deprecated\n  since Pyramid 1.0 and printed a deprecation warning upon its use.  Use\n  ``pyramid.config`` instead.\n\n- The ``pyramid.paster.PyramidTemplate`` API was removed.  It had been\n  deprecated since Pyramid 1.1 and issued a warning on import.  If your code\n  depended on this, adjust your code to import\n  ``pyramid.scaffolds.PyramidTemplate`` instead.\n\n- The ``pyramid.settings.get_settings()`` API was removed.  It had been\n  printing a deprecation warning since Pyramid 1.0.  If your code depended on\n  this API, use ``pyramid.threadlocal.get_current_registry().settings``\n  instead or use the ``settings`` attribute of the registry available from\n  the request (``request.registry.settings``).\n\n- These APIs from the ``pyramid.testing`` module were removed.  They have\n  been printing deprecation warnings since Pyramid 1.0:\n\n  * ``registerDummySecurityPolicy``, use\n    ``pyramid.config.Configurator.testing_securitypolicy`` instead.\n\n  * ``registerResources`` (aka ``registerModels``, use\n    ``pyramid.config.Configurator.testing_resources`` instead.\n\n  * ``registerEventListener``, use\n    ``pyramid.config.Configurator.testing_add_subscriber`` instead.\n\n  * ``registerTemplateRenderer`` (aka `registerDummyRenderer``), use\n    ``pyramid.config.Configurator.testing_add_template`` instead.\n\n  * ``registerView``, use ``pyramid.config.Configurator.add_view`` instead.\n\n  * ``registerUtility``, use\n    ``pyramid.config.Configurator.registry.registerUtility`` instead.\n\n  * ``registerAdapter``, use\n    ``pyramid.config.Configurator.registry.registerAdapter`` instead.\n\n  * ``registerSubscriber``, use \n    ``pyramid.config.Configurator.add_subscriber`` instead.\n\n  * ``registerRoute``, use \n    ``pyramid.config.Configurator.add_route`` instead.\n\n  * ``registerSettings``, use \n    ``pyramid.config.Configurator.add_settings`` instead.\n\n- In Pyramid 1.3 and previous, the ``__call__`` method of a Response object\n  was invoked before any finished callbacks were executed.  As of this\n  release, the ``__call__`` method of a Response object is invoked *after*\n  finished callbacks are executed.  This is in support of the\n  ``request.invoke_subrequest`` feature.\n\nDocumentation\n-------------\n\n- Added an \"Upgrading Pyramid\" chapter to the narrative documentation.  It\n  describes how to cope with deprecations and removals of Pyramid APIs and\n  how to show Pyramid-generated deprecation warnings while running tests and\n  while running a server.\n\n- Added a \"Invoking a Subrequest\" chapter to the documentation.  It describes\n  how to use the new ``request.invoke_subrequest`` API.\n\nDependencies\n------------\n\n- Pyramid now requires WebOb 1.2b3+ (the prior Pyramid release only relied on\n  1.2dev+).  This is to ensure that we obtain a version of WebOb that returns\n  ``request.path_info`` as text.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.piadu.com", "keywords": "descusr test iiie", "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)", "maintainer": null, "maintainer_email": null, "name": "mypytest", "package_url": "https://pypi.org/project/mypytest/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mypytest/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.piadu.com"}, "release_url": "https://pypi.org/project/mypytest/1.0/", "requires_dist": null, "requires_python": null, "summary": "The descusr web application development framework, a Pylons project", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pyramid\">\n<h2>Pyramid</h2>\n<p>Pyramid is a small, fast, down-to-earth, open source Python web application\ndevelopment framework. It makes real-world web application development and\ndeployment more fun, more predictable, and more productive.</p>\n<p>Pyramid is produced by the <a href=\"http://pylonsproject.org/\" rel=\"nofollow\">Pylons Project</a>.</p>\n<div id=\"support-and-documentation\">\n<h3>Support and Documentation</h3>\n<p>See the <a href=\"http://pylonsproject.org/\" rel=\"nofollow\">Pylons Project website</a> to view\ndocumentation, report bugs, and obtain support.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Pyramid is offered under the BSD-derived <a href=\"http://repoze.org/license.html\" rel=\"nofollow\">Repoze Public License</a>.</p>\n</div>\n<div id=\"authors\">\n<h3>Authors</h3>\n<p>Pyramid is made available by <a href=\"http://agendaless.com\" rel=\"nofollow\">Agendaless Consulting</a>\nand a team of contributors.</p>\n</div>\n</div>\n<div id=\"id1\">\n<h2>1.4 (2012-12-18)</h2>\n<h2 id=\"docs\"><span class=\"section-subtitle\">Docs</span></h2>\n<ul>\n<li>Fix functional tests in the ZODB tutorial</li>\n</ul>\n</div>\n<div id=\"b3-2012-12-10\">\n<h2>1.4b3 (2012-12-10)</h2>\n<ul>\n<li>Packaging release only, no code changes.  1.4b2 was a brownbag release due to\nmissing directories in the tarball.</li>\n</ul>\n</div>\n<div id=\"b2-2012-12-10\">\n<h2>1.4b2 (2012-12-10)</h2>\n<div id=\"id2\">\n<h3>Docs</h3>\n<ul>\n<li>Scaffolding is now PEP-8 compliant (at least for a brief shining moment).</li>\n<li>Tutorial improvements.</li>\n</ul>\n</div>\n<div id=\"backwards-incompatibilities\">\n<h3>Backwards Incompatibilities</h3>\n<ul>\n<li>Modified the <tt>_depth</tt> argument to <tt>pyramid.view.view_config</tt> to accept\na value relative to the invocation of <tt>view_config</tt> itself. Thus, when it\nwas previously expecting a value of <tt>1</tt> or greater, to reflect that\nthe caller of <tt>view_config</tt> is 1 stack frame away from <tt>venusian.attach</tt>,\nthis implementation detail is now hidden.</li>\n<li>Modified the <tt>_backframes</tt> argument to <tt>pyramid.util.action_method</tt> in a\nsimilar way to the changes described to <tt>_depth</tt> above.  This argument\nremains undocumented, but might be used in the wild by some insane person.</li>\n</ul>\n</div>\n</div>\n<div id=\"b1-2012-11-21\">\n<h2>1.4b1 (2012-11-21)</h2>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li><p>Small microspeed enhancement which anticipates that a\n<tt>pyramid.response.Response</tt> object is likely to be returned from a view.\nSome code is shortcut if the class of the object returned by a view is this\nclass.  A similar microoptimization was done to\n<tt>pyramid.request.Request.is_response</tt>.</p>\n</li>\n<li><p>Make it possible to use variable arguments on <tt>p*</tt> commands (<tt>pserve</tt>,\n<tt>pshell</tt>, <tt>pviews</tt>, etc) in the form <tt>a=1 b=2</tt> so you can fill in\nvalues in parameterized <tt>.ini</tt> file, e.g. <tt>pshell etc/development.ini\nhttp_port=8080</tt>.  See <a href=\"https://github.com/Pylons/pyramid/pull/714\" rel=\"nofollow\">https://github.com/Pylons/pyramid/pull/714</a></p>\n</li>\n<li><p>A somewhat advanced and obscure feature of Pyramid event handlers is their\nability to handle \u201cmulti-interface\u201d notifications.  These notifications have\ntraditionally presented multiple objects to the subscriber callable.  For\ninstance, if an event was sent by code like this:</p>\n<pre>registry.notify(event, context)\n</pre>\n<p>In the past, in order to catch such an event, you were obligated to write and\nregister an event subscriber that mentioned both the event and the context in\nits argument list:</p>\n<pre>@subscriber([SomeEvent, SomeContextType])\ndef asubscriber(event, context):\n    pass\n</pre>\n<p>In many subscriber callables registered this way, it was common for the logic\nin the subscriber callable to completely ignore the second and following\narguments (e.g. <tt>context</tt> in the above example might be ignored), because\nthey usually existed as attributes of the event anyway.  You could usually\nget the same value by doing <tt>event.context</tt> or similar.</p>\n<p>The fact that you needed to put an extra argument which you usually ignored\nin the subscriber callable body was only a minor annoyance until we added\n\u201csubscriber predicates\u201d, used to narrow the set of circumstances under which\na subscriber will be executed, in a prior 1.4 alpha release.  Once those were\nadded, the annoyance was escalated, because subscriber predicates needed to\naccept the same argument list and arity as the subscriber callables that they\nwere configured against.  So, for example, if you had these two subscriber\nregistrations in your code:</p>\n<pre>@subscriber([SomeEvent, SomeContextType])\ndef asubscriber(event, context):\n    pass\n\n@subscriber(SomeOtherEvent)\ndef asubscriber(event):\n    pass\n</pre>\n<p>And you wanted to use a subscriber predicate:</p>\n<pre>@subscriber([SomeEvent, SomeContextType], mypredicate=True)\ndef asubscriber1(event, context):\n    pass\n\n@subscriber(SomeOtherEvent, mypredicate=True)\ndef asubscriber2(event):\n    pass\n</pre>\n<p>If an existing <tt>mypredicate</tt> subscriber predicate had been written in such\na way that it accepted only one argument in its <tt>__call__</tt>, you could not\nuse it against a subscription which named more than one interface in its\nsubscriber interface list.  Similarly, if you had written a subscriber\npredicate that accepted two arguments, you couldn\u2019t use it against a\nregistration that named only a single interface type.</p>\n<p>For example, if you created this predicate:</p>\n<pre>class MyPredicate(object):\n    # portions elided...\n    def __call__(self, event):\n        return self.val == event.context.foo\n</pre>\n<p>It would not work against a multi-interface-registered subscription, so in\nthe above example, when you attempted to use it against <tt>asubscriber1</tt>, it\nwould fail at runtime with a TypeError, claiming something was attempting to\ncall it with too many arguments.</p>\n<p>To hack around this limitation, you were obligated to design the\n<tt>mypredicate</tt> predicate to expect to receive in its <tt>__call__</tt> either a\nsingle <tt>event</tt> argument (a SomeOtherEvent object) <em>or</em> a pair of arguments\n(a SomeEvent object and a SomeContextType object), presumably by doing\nsomething like this:</p>\n<pre>class MyPredicate(object):\n    # portions elided...\n    def __call__(self, event, context=None):\n        return self.val == event.context.foo\n</pre>\n<p>This was confusing and bad.</p>\n<p>In order to allow people to ignore unused arguments to subscriber callables\nand to normalize the relationship between event subscribers and subscriber\npredicates, we now allow both subscribers and subscriber predicates to accept\nonly a single <tt>event</tt> argument even if they\u2019ve been subscribed for\nnotifications that involve multiple interfaces.  Subscribers and subscriber\npredicates that accept only one argument will receive the first object passed\nto <tt>notify</tt>; this is typically (but not always) the event object.  The\nother objects involved in the subscription lookup will be discarded.  You can\nnow write an event subscriber that accepts only <tt>event</tt> even if it\nsubscribes to multiple interfaces:</p>\n<pre>@subscriber([SomeEvent, SomeContextType])\ndef asubscriber(event):\n    # this will work!\n</pre>\n<p>This prevents you from needing to match the subscriber callable parameters to\nthe subscription type unnecessarily, especially when you don\u2019t make use of\nany argument in your subscribers except for the event object itself.</p>\n<p>Note, however, that if the event object is not the first\nobject in the call to <tt>notify</tt>, you\u2019ll run into trouble.  For example, if\nnotify is called with the context argument first:</p>\n<pre>registry.notify(context, event)\n</pre>\n<p>You won\u2019t be able to take advantage of the event-only feature.  It will\n\u201cwork\u201d, but the object received by your event handler won\u2019t be the event\nobject, it will be the context object, which won\u2019t be very useful:</p>\n<pre>@subscriber([SomeContextType, SomeEvent])\ndef asubscriber(event):\n    # bzzt! you'll be getting the context here as ``event``, and it'll\n    # be useless\n</pre>\n<p>Existing multiple-argument subscribers continue to work without issue, so you\nshould continue use those if your system notifies using multiple interfaces\nand the first interface is not the event interface.  For example:</p>\n<pre>@subscriber([SomeContextType, SomeEvent])\ndef asubscriber(context, event):\n    # this will still work!\n</pre>\n<p>The event-only feature makes it possible to use a subscriber predicate that\naccepts only a request argument within both multiple-interface subscriber\nregistrations and single-interface subscriber registrations.  You needn\u2019t\nmake slightly different variations of predicates depending on the\nsubscription type arguments.  Instead, just write all your subscriber\npredicates so they only accept <tt>event</tt> in their <tt>__call__</tt> and they\u2019ll be\nuseful across all registrations for subscriptions that use an event as their\nfirst argument, even ones which accept more than just <tt>event</tt>.</p>\n<p>However, the same caveat applies to predicates as to subscriber callables: if\nyou\u2019re subscribing to a multi-interface event, and the first interface is not\nthe event interface, the predicate won\u2019t work properly.  In such a case,\nyou\u2019ll need to match the predicate <tt>__call__</tt> argument ordering and\ncomposition to the ordering of the interfaces.  For example, if the\nregistration for the subscription uses <tt>[SomeContext, SomeEvent]</tt>, you\u2019ll\nneed to reflect that in the ordering of the parameters of the predicate\u2019s\n<tt>__call__</tt> method:</p>\n<pre>def __call__(self, context, event):\n    return event.request.path.startswith(self.val)\n</pre>\n<p>tl;dr: 1) When using multi-interface subscriptions, always use the event type\nas the first subscription registration argument and 2) When 1 is true, use\nonly <tt>event</tt> in your subscriber and subscriber predicate parameter lists,\nno matter how many interfaces the subscriber is notified with.  This\ncombination will result in the maximum amount of reusability of subscriber\npredicates and the least amount of thought on your part.  Drink responsibly.</p>\n</li>\n</ul>\n</div>\n<div id=\"bug-fixes\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>A failure when trying to locate the attribute <tt>__text__</tt> on route and view\npredicates existed when the <tt>debug_routematch</tt> setting was true or when the\n<tt>pviews</tt> command was used. See <a href=\"https://github.com/Pylons/pyramid/pull/727\" rel=\"nofollow\">https://github.com/Pylons/pyramid/pull/727</a></li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<ul>\n<li>Sync up tutorial source files with the files that are rendered by the\nscaffold that each uses.</li>\n</ul>\n</div>\n</div>\n<div id=\"a4-2012-11-14\">\n<h2>1.4a4 (2012-11-14)</h2>\n<div id=\"id3\">\n<h3>Features</h3>\n<ul>\n<li><tt>pyramid.authentication.AuthTktAuthenticationPolicy</tt> has been updated to\nsupport newer hashing algorithms such as <tt>sha512</tt>. Existing applications\nshould consider updating if possible for improved security over the default\nmd5 hashing.</li>\n<li>Added an <tt>effective_principals</tt> route and view predicate.</li>\n<li>Do not allow the userid returned from the <tt>authenticated_userid</tt> or the\nuserid that is one of the list of principals returned by\n<tt>effective_principals</tt> to be either of the strings <tt>system.Everyone</tt> or\n<tt>system.Authenticated</tt> when any of the built-in authorization policies that\nlive in <tt>pyramid.authentication</tt> are in use.  These two strings are\nreserved for internal usage by Pyramid and they will not be accepted as valid\nuserids.</li>\n<li>Slightly better debug logging from\n<tt>pyramid.authentication.RepozeWho1AuthenticationPolicy</tt>.</li>\n<li><tt>pyramid.security.view_execution_permitted</tt> used to return <tt>True</tt> if no\nview could be found. It now raises a <tt>TypeError</tt> exception in that case, as\nit doesn\u2019t make sense to assert that a nonexistent view is\nexecution-permitted. See <a href=\"https://github.com/Pylons/pyramid/issues/299\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/299</a>.</li>\n<li>Allow a <tt>_depth</tt> argument to <tt>pyramid.view.view_config</tt>, which will\npermit limited composition reuse of the decorator by other software that\nwants to provide custom decorators that are much like view_config.</li>\n<li>Allow an iterable of decorators to be passed to\n<tt>pyramid.config.Configurator.add_view</tt>. This allows views to be wrapped\nby more than one decorator without requiring combining the decorators\nyourself.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>In the past if a renderer returned <tt>None</tt>, the body of the resulting\nresponse would be set explicitly to the empty string.  Instead, now, the body\nis left unchanged, which allows the renderer to set a body itself by using\ne.g. <tt>request.response.body = b'foo'</tt>.  The body set by the renderer will\nbe unmolested on the way out.  See\n<a href=\"https://github.com/Pylons/pyramid/issues/709\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/709</a></li>\n<li>In uncommon cases, the <tt>pyramid_excview_tween_factory</tt> might have\ninadvertently raised a <tt>KeyError</tt> looking for <tt>request_iface</tt> as an\nattribute of the request.  It no longer fails in this case.  See\n<a href=\"https://github.com/Pylons/pyramid/issues/700\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/700</a></li>\n<li>Be more tolerant of potential error conditions in <tt>match_param</tt> and\n<tt>physical_path</tt> predicate implementations; instead of raising an exception,\nreturn False.</li>\n<li><tt>pyramid.view.render_view</tt> was not functioning properly under Python 3.x\ndue to a byte/unicode discrepancy. See\n<a href=\"http://github.com/Pylons/pyramid/issues/721\" rel=\"nofollow\">http://github.com/Pylons/pyramid/issues/721</a></li>\n</ul>\n</div>\n<div id=\"deprecations\">\n<h3>Deprecations</h3>\n<ul>\n<li><tt>pyramid.authentication.AuthTktAuthenticationPolicy</tt> will emit a warning if\nan application is using the policy without explicitly passing a <tt>hashalg</tt>\nargument. This is because the default is \u201cmd5\u201d which is considered\ntheoretically subject to collision attacks. If you really want \u201cmd5\u201d then you\nmust specify it explicitly to get rid of the warning.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>Documentation</h3>\n<ul>\n<li>All of the tutorials that use\n<tt>pyramid.authentication.AuthTktAuthenticationPolicy</tt> now explicitly pass\n<tt>sha512</tt> as a <tt>hashalg</tt> argument.</li>\n</ul>\n</div>\n<div id=\"internals\">\n<h3>Internals</h3>\n<ul>\n<li>Move <tt>TopologicalSorter</tt> from <tt>pyramid.config.util</tt> to <tt>pyramid.util</tt>,\nmove <tt>CyclicDependencyError</tt> from <tt>pyramid.config.util</tt> to\n<tt>pyramid.exceptions</tt>, rename <tt>Singleton</tt> to <tt>Sentinel</tt> and move from\n<tt>pyramid.config.util</tt> to <tt>pyramid.util</tt>; this is in an effort to\nmove that stuff that may be an API one day out of <tt>pyramid.config.util</tt>,\nbecause that package should never be imported from non-Pyramid code.\nTopologicalSorter is still not an API, but may become one.</li>\n<li>Get rid of shady monkeypatching of <tt>pyramid.request.Request</tt> and\n<tt>pyramid.response.Response</tt> done within the <tt>__init__.py</tt> of Pyramid.\nWebob no longer relies on this being done.  Instead, the ResponseClass\nattribute of the Pyramid Request class is assigned to the Pyramid response\nclass; that\u2019s enough to satisfy WebOb and behave as it did before with the\nmonkeypatching.</li>\n</ul>\n</div>\n</div>\n<div id=\"a3-2012-10-26\">\n<h2>1.4a3 (2012-10-26)</h2>\n<div id=\"id6\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>The match_param predicate\u2019s text method was fixed to sort its values.\nPart of <a href=\"https://github.com/Pylons/pyramid/pull/705\" rel=\"nofollow\">https://github.com/Pylons/pyramid/pull/705</a></li>\n<li>1.4a <tt>pyramid.scripting.prepare</tt> behaved differently than 1.3 series\nfunction of same name.  In particular, if passed a request, it would not\nset the <tt>registry</tt> attribute of the request like 1.3 did.  A symptom\nwould be that passing a request to <tt>pyramid.paster.bootstrap</tt> (which uses\nthe function) that did not have a <tt>registry</tt> attribute could assume that\nthe registry would be attached to the request by Pyramid.  This assumption\ncould be made in 1.3, but not in 1.4.  The assumption can now be made in\n1.4 too (a registry is attached to a request passed to bootstrap or\nprepare).</li>\n<li>When registering a view configuration that named a Chameleon ZPT renderer\nwith a macro name in it (e.g. <tt><span class=\"pre\">renderer='some/template#somemacro.pt</span></tt>) as\nwell as a view configuration without a macro name it it that pointed to the\nsame template (e.g. <tt><span class=\"pre\">renderer='some/template.pt'</span></tt>), internal caching could\nconfuse the two, and your code might have rendered one instead of the\nother.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>Features</h3>\n<ul>\n<li>Allow multiple values to be specified to the <tt>request_param</tt> view/route\npredicate as a sequence.  Previously only a single string value was allowed.\nSee <a href=\"https://github.com/Pylons/pyramid/pull/705\" rel=\"nofollow\">https://github.com/Pylons/pyramid/pull/705</a></li>\n<li>Comments with references to documentation sections placed in scaffold\n<tt>.ini</tt> files.</li>\n<li>Added an HTTP Basic authentication policy\nat <tt>pyramid.authentication.BasicAuthAuthenticationPolicy</tt>.</li>\n<li>The Configurator <tt>testing_securitypolicy</tt> method now returns the policy\nobject it creates.</li>\n<li>The Configurator <tt>testing_securitypolicy</tt> method accepts two new\narguments: <tt>remember_result</tt> and <tt>forget_result</tt>.  If supplied, these\nvalues influence the result of the policy\u2019s <tt>remember</tt> and <tt>forget</tt>\nmethods, respectively.</li>\n<li>The DummySecurityPolicy created by <tt>testing_securitypolicy</tt> now sets a\n<tt>forgotten</tt> value on the policy (the value <tt>True</tt>) when its <tt>forget</tt>\nmethod is called.</li>\n<li>The DummySecurityPolicy created by <tt>testing_securitypolicy</tt> now sets a\n<tt>remembered</tt> value on the policy, which is the value of the <tt>principal</tt>\nargument it\u2019s called with when its <tt>remember</tt> method is called.</li>\n<li>New <tt>physical_path</tt> view predicate.  If specified, this value should be a\nstring or a tuple representing the physical traversal path of the context\nfound via traversal for this predicate to match as true.  For example:\n<tt><span class=\"pre\">physical_path='/'</span></tt> or <tt><span class=\"pre\">physical_path='/a/b/c'</span></tt> or <tt><span class=\"pre\">physical_path=('',</span>\n'a', 'b', 'c')</tt>.  This is not a path prefix match or a regex, it\u2019s a\nwhole-path match.  It\u2019s useful when you want to always potentially show a\nview when some object is traversed to, but you can\u2019t be sure about what kind\nof object it will be, so you can\u2019t use the <tt>context</tt> predicate.  The\nindividual path elements inbetween slash characters or in tuple elements\nshould be the Unicode representation of the name of the resource and should\nnot be encoded in any way.</li>\n</ul>\n</div>\n</div>\n<div id=\"a2-2012-09-27\">\n<h2>1.4a2 (2012-09-27)</h2>\n<div id=\"id8\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>When trying to determine Mako defnames and Chameleon macro names in asset\nspecifications, take into account that the filename may have a hyphen in\nit.  See <a href=\"https://github.com/Pylons/pyramid/pull/692\" rel=\"nofollow\">https://github.com/Pylons/pyramid/pull/692</a></li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>Features</h3>\n<ul>\n<li>A new <tt>pyramid.session.check_csrf_token</tt> convenience function was added.</li>\n<li>A <tt>check_csrf</tt> view predicate was added.  For example, you can now do\n<tt>config.add_view(someview, check_csrf=True)</tt>.  When the predicate is\nchecked, if the <tt>csrf_token</tt> value in <tt>request.params</tt> matches the CSRF\ntoken in the request\u2019s session, the view will be permitted to execute.\nOtherwise, it will not be permitted to execute.</li>\n<li>Add <tt>Base.metadata.bind = engine</tt> to alchemy template, so that tables\ndefined imperatively will work.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>Documentation</h3>\n<ul>\n<li>update wiki2 SQLA tutorial with the changes required after inserting\n<tt>Base.metadata.bind = engine</tt> into the alchemy scaffold.</li>\n</ul>\n</div>\n</div>\n<div id=\"a1-2012-09-16\">\n<h2>1.4a1 (2012-09-16)</h2>\n<div id=\"id11\">\n<h3>Bug Fixes</h3>\n<ul>\n<li>Forward port from 1.3 branch: When no authentication policy was configured,\na call to <tt>pyramid.security.effective_principals</tt> would unconditionally\nreturn the empty list.  This was incorrect, it should have unconditionally\nreturned <tt>[Everyone]</tt>, and now does.</li>\n<li>Explicit url dispatch regexes can now contain colons.\n<a href=\"https://github.com/Pylons/pyramid/issues/629\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/629</a></li>\n<li>On at least one 64-bit Ubuntu system under Python 3.2, using the\n<tt>view_config</tt> decorator caused a <tt>RuntimeError: dictionary changed size\nduring iteration</tt> exception.  It no longer does.  See\n<a href=\"https://github.com/Pylons/pyramid/issues/635\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/635</a> for more information.</li>\n<li>In Mako Templates lookup, check if the uri is already adjusted and bring\nit back to an asset spec. Normally occurs with inherited templates or\nincluded components.\n<a href=\"https://github.com/Pylons/pyramid/issues/606\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/606</a>\n<a href=\"https://github.com/Pylons/pyramid/issues/607\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/607</a></li>\n<li>In Mako Templates lookup, check for absolute uri (using mako directories)\nwhen mixing up inheritance with asset specs.\n<a href=\"https://github.com/Pylons/pyramid/issues/662\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/662</a></li>\n<li>HTTP Accept headers were not being normalized causing potentially\nconflicting view registrations to go unnoticed. Two views that only\ndiffer in the case (\u2018text/html\u2019 vs. \u2018text/HTML\u2019) will now raise an error.\n<a href=\"https://github.com/Pylons/pyramid/pull/620\" rel=\"nofollow\">https://github.com/Pylons/pyramid/pull/620</a></li>\n<li>Forward-port from 1.3 branch: when registering multiple views with an\n<tt>accept</tt> predicate in a Pyramid application runing under Python 3, you\nmight have received a <tt>TypeError: unorderable types: function() &lt;\nfunction()</tt> exception.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>Features</h3>\n<ul>\n<li><p>Configurator.add_directive now accepts arbitrary callables like partials or\nobjects implementing <tt>__call__</tt> which dont have <tt>__name__</tt> and\n<tt>__doc__</tt> attributes.  See <a href=\"https://github.com/Pylons/pyramid/issues/621\" rel=\"nofollow\">https://github.com/Pylons/pyramid/issues/621</a>\nand <a href=\"https://github.com/Pylons/pyramid/pull/647\" rel=\"nofollow\">https://github.com/Pylons/pyramid/pull/647</a>.</p>\n</li>\n<li><p>Third-party custom view, route, and subscriber predicates can now be added\nfor use by view authors via\n<tt>pyramid.config.Configurator.add_view_predicate</tt>,\n<tt>pyramid.config.Configurator.add_route_predicate</tt> and\n<tt>pyramid.config.Configurator.add_subscriber_predicate</tt>.  So, for example,\ndoing this:</p>\n<pre>config.add_view_predicate('abc', my.package.ABCPredicate)\n</pre>\n<p>Might allow a view author to do this in an application that configured that\npredicate:</p>\n<pre>@view_config(abc=1)\n</pre>\n<p>Similar features exist for <tt>add_route</tt>, and <tt>add_subscriber</tt>.  See\n\u201cAdding A Third Party View, Route, or Subscriber Predicate\u201d in the Hooks\nchapter for more information.</p>\n<p>Note that changes made to support the above feature now means that only\nactions registered using the same \u201corder\u201d can conflict with one another.\nIt used to be the case that actions registered at different orders could\npotentially conflict, but to my knowledge nothing ever depended on this\nbehavior (it was a bit silly).</p>\n</li>\n<li><p>Custom objects can be made easily JSON-serializable in Pyramid by defining\na <tt>__json__</tt> method on the object\u2019s class. This method should return\nvalues natively serializable by <tt>json.dumps</tt> (such as ints, lists,\ndictionaries, strings, and so forth).</p>\n</li>\n<li><p>The JSON renderer now allows for the definition of custom type adapters to\nconvert unknown objects to JSON serializations.</p>\n</li>\n<li><p>As of this release, the <tt>request_method</tt> predicate, when used, will also\nimply that <tt>HEAD</tt> is implied when you use <tt>GET</tt>.  For example, using\n<tt><span class=\"pre\">@view_config(request_method='GET')</span></tt> is equivalent to using\n<tt><span class=\"pre\">@view_config(request_method=('GET',</span> <span class=\"pre\">'HEAD'))</span></tt>.  Using\n<tt><span class=\"pre\">@view_config(request_method=('GET',</span> 'POST')</tt> is equivalent to using\n<tt><span class=\"pre\">@view_config(request_method=('GET',</span> 'HEAD', 'POST')</tt>.  This is because\nHEAD is a variant of GET that omits the body, and WebOb has special support\nto return an empty body when a HEAD is used.</p>\n</li>\n<li><p><tt>config.add_request_method</tt> has been introduced to support extending\nrequest objects with arbitrary callables. This method expands on the\nprevious <tt>config.set_request_property</tt> by supporting methods as well as\nproperties. This method now causes less code to be executed at\nrequest construction time than <tt>config.set_request_property</tt> in\nversion 1.3.</p>\n</li>\n<li><p>Don\u2019t add a <tt>?</tt> to URLs generated by <tt>request.resource_url</tt> if the\n<tt>query</tt> argument is provided but empty.</p>\n</li>\n<li><p>Don\u2019t add a <tt>?</tt> to URLs generated by <tt>request.route_url</tt> if the\n<tt>_query</tt> argument is provided but empty.</p>\n</li>\n<li><p>The static view machinery now raises (rather than returns) <tt>HTTPNotFound</tt>\nand <tt>HTTPMovedPermanently</tt> exceptions, so these can be caught by the\nNotFound view (and other exception views).</p>\n</li>\n<li><p>The Mako renderer now supports a def name in an asset spec.  When the def\nname is present in the asset spec, the system will render the template def\nwithin the template and will return the result. An example asset spec is\n<tt>package:path/to/template#defname.mako</tt>. This will render the def named\n<tt>defname</tt> inside the <tt>template.mako</tt> template instead of rendering the\nentire template.  The old way of returning a tuple in the form\n<tt>('defname', {})</tt> from the view is supported for backward compatibility,</p>\n</li>\n<li><p>The Chameleon ZPT renderer now accepts a macro name in an asset spec.  When\nthe macro name is present in the asset spec, the system will render the\nmacro listed as a <tt><span class=\"pre\">define-macro</span></tt> and return the result instead of\nrendering the entire template.  An example asset spec:\n<tt>package:path/to/template#macroname.pt</tt>.  This will render the macro\ndefined as <tt>macroname</tt> within the <tt>template.pt</tt> template instead of the\nentire templae.</p>\n</li>\n<li><p>When there is a predicate mismatch exception (seen when no view matches for\na given request due to predicates not working), the exception now contains\na textual description of the predicate which didn\u2019t match.</p>\n</li>\n<li><p>An <tt>add_permission</tt> directive method was added to the Configurator.  This\ndirective registers a free-standing permission introspectable into the\nPyramid introspection system.  Frameworks built atop Pyramid can thus use\nthe the <tt>permissions</tt> introspectable category data to build a\ncomprehensive list of permissions supported by a running system.  Before\nthis method was added, permissions were already registered in this\nintrospectable category as a side effect of naming them in an <tt>add_view</tt>\ncall, this method just makes it possible to arrange for a permission to be\nput into the <tt>permissions</tt> introspectable category without naming it\nalong with an associated view.  Here\u2019s an example of usage of\n<tt>add_permission</tt>:</p>\n<pre>config = Configurator()\nconfig.add_permission('view')\n</pre>\n</li>\n<li><p>The <tt>UnencryptedCookieSessionFactoryConfig</tt> now accepts\n<tt>signed_serialize</tt> and <tt>signed_deserialize</tt> hooks which may be used\nto influence how the sessions are marshalled (by default this is done\nwith HMAC+pickle).</p>\n</li>\n<li><p><tt>pyramid.testing.DummyRequest</tt> now supports methods supplied by the\n<tt>pyramid.util.InstancePropertyMixin</tt> class such as <tt>set_property</tt>.</p>\n</li>\n<li><p>Request properties and methods added via <tt>config.set_request_property</tt> or\n<tt>config.add_request_method</tt> are now available to tweens.</p>\n</li>\n<li><p>Request properties and methods added via <tt>config.set_request_property</tt> or\n<tt>config.add_request_method</tt> are now available in the request object\nreturned from <tt>pyramid.paster.bootstrap</tt>.</p>\n</li>\n<li><p><tt>request.context</tt> of environment request during <tt>bootstrap</tt> is now the\nroot object if a context isn\u2019t already set on a provided request.</p>\n</li>\n<li><p>The <tt>pyramid.decorator.reify</tt> function is now an API, and was added to\nthe API documentation.</p>\n</li>\n<li><p>Added the <tt>pyramid.testing.testConfig</tt> context manager, which can be used\nto generate a configurator in a test, e.g. <tt>with <span class=\"pre\">testing.testConfig(...):</span></tt>.</p>\n</li>\n<li><p>Users can now invoke a subrequest from within view code using a new\n<tt>request.invoke_subrequest</tt> API.</p>\n</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>Deprecations</h3>\n<ul>\n<li>The <tt>pyramid.config.Configurator.set_request_property</tt> has been\ndocumentation-deprecated.  The method remains usable but the more\nfeatureful <tt>pyramid.config.Configurator.add_request_method</tt> should be\nused in its place (it has all of the same capabilities but can also extend\nthe request object with methods).</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>Backwards Incompatibilities</h3>\n<ul>\n<li>The Pyramid router no longer adds the values <tt>bfg.routes.route</tt> or\n<tt>bfg.routes.matchdict</tt> to the request\u2019s WSGI environment dictionary.\nThese values were docs-deprecated in <tt>repoze.bfg</tt> 1.0 (effectively seven\nminor releases ago).  If your code depended on these values, use\nrequest.matched_route and request.matchdict instead.</li>\n<li>It is no longer possible to pass an environ dictionary directly to\n<tt>pyramid.traversal.ResourceTreeTraverser.__call__</tt> (aka\n<tt>ModelGraphTraverser.__call__</tt>).  Instead, you must pass a request\nobject.  Passing an environment instead of a request has generated a\ndeprecation warning since Pyramid 1.1.</li>\n<li>Pyramid will no longer work properly if you use the\n<tt>webob.request.LegacyRequest</tt> as a request factory.  Instances of the\nLegacyRequest class have a <tt>request.path_info</tt> which return a string.\nThis Pyramid release assumes that <tt>request.path_info</tt> will\nunconditionally be Unicode.</li>\n<li>The functions from <tt>pyramid.chameleon_zpt</tt> and <tt>pyramid.chameleon_text</tt>\nnamed <tt>get_renderer</tt>, <tt>get_template</tt>, <tt>render_template</tt>, and\n<tt>render_template_to_response</tt> have been removed.  These have issued a\ndeprecation warning upon import since Pyramid 1.0.  Use\n<tt>pyramid.renderers.get_renderer()</tt>,\n<tt><span class=\"pre\">pyramid.renderers.get_renderer().implementation()</span></tt>,\n<tt>pyramid.renderers.render()</tt> or <tt>pyramid.renderers.render_to_response</tt>\nrespectively instead of these functions.</li>\n<li>The <tt>pyramid.configuration</tt> module was removed.  It had been deprecated\nsince Pyramid 1.0 and printed a deprecation warning upon its use.  Use\n<tt>pyramid.config</tt> instead.</li>\n<li>The <tt>pyramid.paster.PyramidTemplate</tt> API was removed.  It had been\ndeprecated since Pyramid 1.1 and issued a warning on import.  If your code\ndepended on this, adjust your code to import\n<tt>pyramid.scaffolds.PyramidTemplate</tt> instead.</li>\n<li>The <tt>pyramid.settings.get_settings()</tt> API was removed.  It had been\nprinting a deprecation warning since Pyramid 1.0.  If your code depended on\nthis API, use <tt><span class=\"pre\">pyramid.threadlocal.get_current_registry().settings</span></tt>\ninstead or use the <tt>settings</tt> attribute of the registry available from\nthe request (<tt>request.registry.settings</tt>).</li>\n<li>These APIs from the <tt>pyramid.testing</tt> module were removed.  They have\nbeen printing deprecation warnings since Pyramid 1.0:<ul>\n<li><tt>registerDummySecurityPolicy</tt>, use\n<tt>pyramid.config.Configurator.testing_securitypolicy</tt> instead.</li>\n<li><tt>registerResources</tt> (aka <tt>registerModels</tt>, use\n<tt>pyramid.config.Configurator.testing_resources</tt> instead.</li>\n<li><tt>registerEventListener</tt>, use\n<tt>pyramid.config.Configurator.testing_add_subscriber</tt> instead.</li>\n<li><tt>registerTemplateRenderer</tt> (aka <cite>registerDummyRenderer`</cite>), use\n<tt>pyramid.config.Configurator.testing_add_template</tt> instead.</li>\n<li><tt>registerView</tt>, use <tt>pyramid.config.Configurator.add_view</tt> instead.</li>\n<li><tt>registerUtility</tt>, use\n<tt>pyramid.config.Configurator.registry.registerUtility</tt> instead.</li>\n<li><tt>registerAdapter</tt>, use\n<tt>pyramid.config.Configurator.registry.registerAdapter</tt> instead.</li>\n<li><tt>registerSubscriber</tt>, use\n<tt>pyramid.config.Configurator.add_subscriber</tt> instead.</li>\n<li><tt>registerRoute</tt>, use\n<tt>pyramid.config.Configurator.add_route</tt> instead.</li>\n<li><tt>registerSettings</tt>, use\n<tt>pyramid.config.Configurator.add_settings</tt> instead.</li>\n</ul>\n</li>\n<li>In Pyramid 1.3 and previous, the <tt>__call__</tt> method of a Response object\nwas invoked before any finished callbacks were executed.  As of this\nrelease, the <tt>__call__</tt> method of a Response object is invoked <em>after</em>\nfinished callbacks are executed.  This is in support of the\n<tt>request.invoke_subrequest</tt> feature.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>Documentation</h3>\n<ul>\n<li>Added an \u201cUpgrading Pyramid\u201d chapter to the narrative documentation.  It\ndescribes how to cope with deprecations and removals of Pyramid APIs and\nhow to show Pyramid-generated deprecation warnings while running tests and\nwhile running a server.</li>\n<li>Added a \u201cInvoking a Subrequest\u201d chapter to the documentation.  It describes\nhow to use the new <tt>request.invoke_subrequest</tt> API.</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<ul>\n<li>Pyramid now requires WebOb 1.2b3+ (the prior Pyramid release only relied on\n1.2dev+).  This is to ensure that we obtain a version of WebOb that returns\n<tt>request.path_info</tt> as text.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 795155, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3ac9b7bee4d3c6733e7f29846d725347", "sha256": "4a40a520d3c5fc8d0c97adebacd799973995cc524f4c788f9abda4384467d82b"}, "downloads": -1, "filename": "mypytest-1.0.tar.gz", "has_sig": false, "md5_digest": "3ac9b7bee4d3c6733e7f29846d725347", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23389, "upload_time": "2013-01-06T07:12:24", "upload_time_iso_8601": "2013-01-06T07:12:24.146197Z", "url": "https://files.pythonhosted.org/packages/1b/6a/e8fe644f0395db38d935d7999897c7734c3a825aa7eaf59a1087b420144b/mypytest-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ac9b7bee4d3c6733e7f29846d725347", "sha256": "4a40a520d3c5fc8d0c97adebacd799973995cc524f4c788f9abda4384467d82b"}, "downloads": -1, "filename": "mypytest-1.0.tar.gz", "has_sig": false, "md5_digest": "3ac9b7bee4d3c6733e7f29846d725347", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23389, "upload_time": "2013-01-06T07:12:24", "upload_time_iso_8601": "2013-01-06T07:12:24.146197Z", "url": "https://files.pythonhosted.org/packages/1b/6a/e8fe644f0395db38d935d7999897c7734c3a825aa7eaf59a1087b420144b/mypytest-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:07 2020"}