{"info": {"author": "Oliver Galvin", "author_email": "odg@riseup.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP"], "description": "# ua_spoofer\n\nA Python module which collects, lists, and returns up to date and commonly used\nUser Agent strings. This can be helpful for avoiding fingerprinting, and\nbypassing anti-bot/scraping measures. It also provides a\n[Requests](https://github.com/psf/requests) session wrapper which automatically\nuses a random user agent on every connection.\n\n## User Agents\n\nA [user agent](https://en.wikipedia.org/wiki/User_agent) string is sent as a\nheader in HTTP requests to identify which browser and operating system the\nclient is using. It can be used by websites to tailor the content to the device\nand software a visitor is using. It can also be used to block or restrict\ncertain programs' access, such as bots, web crawlers and scrapers. Another\nconsequence of these strings is they can help build a profile of a user, using\nthe unique compination of browser and operating system versions, a technique\ncalled [fingerprinting](https://ssd.eff.org/en/glossary/browser-fingerprint).\n\nUser agent spoofing replaces the user agent string with a random one from a\nlist of common strings, disguising the type of client from the server and\nmaking it harder to track the user between requests. This is one of the ways to\nbypass restrictions and mitigate against fingerprinting.\n\n## Details\n\nA problem with similar modules and programs is they either use a static\ndataset, or scrape user agents from sources which are either badly outdated or\ncompletely broken. ua_spoofer attempts to solve this by fetching data which is\nup to date, based on the latest browser versions, and also amalgamates data\nfrom several sources. This provides redundancy and a good mix of current user\nagents, without depending on an API or downloading a static dataset which\nquickly goes out of date. More sources can be added over time without breaking\ncompatibility.\n\n## Installing\n\nua_spoofer requires Python 3, plus [Requests](https://github.com/psf/requests)\nand [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/), commonly\nused modules for scraping purposes.\n\n    pip install ua_spoofer\n\n## Using\n\n### Getting User Agents\n\n    from ua_spoofer import UserAgent\n\n    ua = UserAgent()\n\n    # Random user agents from a specified browser    \n    ua.chrome\n    ua.firefox\n    ua.ie\n\n    # Any random user agent\n    ua.random\n\n    # Get a list of supported browsers\n    ua.BROWSERS\n\n    # Get the list of all user agent strings\n    ua.all\n\n    # Update the list\n    ua.update()\n\n### Using the Requests Session wrapper\n\n    from ua_spoofer import SpoofSession\n\n    s = SpoofSession()\n\n    # Each request will use a different user agent string\n    # A few other headers are randomised too\n    # To demonstrate:\n    s.get(\"https://icanhazheaders.com/\").json()\n    s.get(\"https://icanhazheaders.com/\").json()\n    s.get(\"https://icanhazheaders.com/\").json()\n\n    # To get the UserAgent instance of the session\n    s.ua\n\n    # Updating the user agent list is done as you would expect\n    s.ua.update()\n\n## Other projects\n\nAs mentioned earlier, there are other Python modules which attempt to do\nsimilar things:\n\n* [fake-useragent](https://github.com/hellysmile/fake-useragent/)\n* [requests-random-user-agent](https://github.com/DavidWittman/requests-random-user-agent)\n* [random_user_agent](https://github.com/Luqman-Ud-Din/random_user_agent)\n\nUser agent spoofing isn't the only technique to bypass restrictions, with more\nsites being Javascript based and using more aggressive techniques to protect\nagainst crawlers, bots and DDoS attacks, sometimes other methods are necessary,\nincluding headless browser automation.\n\n* [cloudflare-scrape](https://github.com/Anorov/cloudflare-scrape) is a module\n  to bypass Cloudflare's anti-bot system\n* [PhantomJS](https://phantomjs.org/) is a scriptable headless browser\n* [Selenium](https://selenium.dev/) is a full browser automation framework\n* [Scrapy](https://scrapy.org/) is a Python framework for building crawlers\n* [Spynner](https://github.com/kiorky/spynner) is another scriptable Python\n  browser module\n\nIn some cases, Tor or a VPN can be used to hide the client's IP address for\nproper anonymity.\n\n## License\n\nua_spoofer is released under the terms of the Apache 2.0 license.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/odg/ua_spoofer", "keywords": "user agent string spoofer spoofing random scraping crawling crawler bot", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "ua-spoofer", "package_url": "https://pypi.org/project/ua-spoofer/", "platform": "", "project_url": "https://pypi.org/project/ua-spoofer/", "project_urls": {"Homepage": "https://gitlab.com/odg/ua_spoofer"}, "release_url": "https://pypi.org/project/ua-spoofer/1.0/", "requires_dist": ["beautifulsoup4", "requests"], "requires_python": ">=3", "summary": "A module for collecting and providing popular user agent strings, with a requests session which rotates user agents.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ua_spoofer</h1>\n<p>A Python module which collects, lists, and returns up to date and commonly used\nUser Agent strings. This can be helpful for avoiding fingerprinting, and\nbypassing anti-bot/scraping measures. It also provides a\n<a href=\"https://github.com/psf/requests\" rel=\"nofollow\">Requests</a> session wrapper which automatically\nuses a random user agent on every connection.</p>\n<h2>User Agents</h2>\n<p>A <a href=\"https://en.wikipedia.org/wiki/User_agent\" rel=\"nofollow\">user agent</a> string is sent as a\nheader in HTTP requests to identify which browser and operating system the\nclient is using. It can be used by websites to tailor the content to the device\nand software a visitor is using. It can also be used to block or restrict\ncertain programs' access, such as bots, web crawlers and scrapers. Another\nconsequence of these strings is they can help build a profile of a user, using\nthe unique compination of browser and operating system versions, a technique\ncalled <a href=\"https://ssd.eff.org/en/glossary/browser-fingerprint\" rel=\"nofollow\">fingerprinting</a>.</p>\n<p>User agent spoofing replaces the user agent string with a random one from a\nlist of common strings, disguising the type of client from the server and\nmaking it harder to track the user between requests. This is one of the ways to\nbypass restrictions and mitigate against fingerprinting.</p>\n<h2>Details</h2>\n<p>A problem with similar modules and programs is they either use a static\ndataset, or scrape user agents from sources which are either badly outdated or\ncompletely broken. ua_spoofer attempts to solve this by fetching data which is\nup to date, based on the latest browser versions, and also amalgamates data\nfrom several sources. This provides redundancy and a good mix of current user\nagents, without depending on an API or downloading a static dataset which\nquickly goes out of date. More sources can be added over time without breaking\ncompatibility.</p>\n<h2>Installing</h2>\n<p>ua_spoofer requires Python 3, plus <a href=\"https://github.com/psf/requests\" rel=\"nofollow\">Requests</a>\nand <a href=\"https://www.crummy.com/software/BeautifulSoup/\" rel=\"nofollow\">BeautifulSoup</a>, commonly\nused modules for scraping purposes.</p>\n<pre><code>pip install ua_spoofer\n</code></pre>\n<h2>Using</h2>\n<h3>Getting User Agents</h3>\n<pre><code>from ua_spoofer import UserAgent\n\nua = UserAgent()\n\n# Random user agents from a specified browser    \nua.chrome\nua.firefox\nua.ie\n\n# Any random user agent\nua.random\n\n# Get a list of supported browsers\nua.BROWSERS\n\n# Get the list of all user agent strings\nua.all\n\n# Update the list\nua.update()\n</code></pre>\n<h3>Using the Requests Session wrapper</h3>\n<pre><code>from ua_spoofer import SpoofSession\n\ns = SpoofSession()\n\n# Each request will use a different user agent string\n# A few other headers are randomised too\n# To demonstrate:\ns.get(\"https://icanhazheaders.com/\").json()\ns.get(\"https://icanhazheaders.com/\").json()\ns.get(\"https://icanhazheaders.com/\").json()\n\n# To get the UserAgent instance of the session\ns.ua\n\n# Updating the user agent list is done as you would expect\ns.ua.update()\n</code></pre>\n<h2>Other projects</h2>\n<p>As mentioned earlier, there are other Python modules which attempt to do\nsimilar things:</p>\n<ul>\n<li><a href=\"https://github.com/hellysmile/fake-useragent/\" rel=\"nofollow\">fake-useragent</a></li>\n<li><a href=\"https://github.com/DavidWittman/requests-random-user-agent\" rel=\"nofollow\">requests-random-user-agent</a></li>\n<li><a href=\"https://github.com/Luqman-Ud-Din/random_user_agent\" rel=\"nofollow\">random_user_agent</a></li>\n</ul>\n<p>User agent spoofing isn't the only technique to bypass restrictions, with more\nsites being Javascript based and using more aggressive techniques to protect\nagainst crawlers, bots and DDoS attacks, sometimes other methods are necessary,\nincluding headless browser automation.</p>\n<ul>\n<li><a href=\"https://github.com/Anorov/cloudflare-scrape\" rel=\"nofollow\">cloudflare-scrape</a> is a module\nto bypass Cloudflare's anti-bot system</li>\n<li><a href=\"https://phantomjs.org/\" rel=\"nofollow\">PhantomJS</a> is a scriptable headless browser</li>\n<li><a href=\"https://selenium.dev/\" rel=\"nofollow\">Selenium</a> is a full browser automation framework</li>\n<li><a href=\"https://scrapy.org/\" rel=\"nofollow\">Scrapy</a> is a Python framework for building crawlers</li>\n<li><a href=\"https://github.com/kiorky/spynner\" rel=\"nofollow\">Spynner</a> is another scriptable Python\nbrowser module</li>\n</ul>\n<p>In some cases, Tor or a VPN can be used to hide the client's IP address for\nproper anonymity.</p>\n<h2>License</h2>\n<p>ua_spoofer is released under the terms of the Apache 2.0 license.</p>\n\n          </div>"}, "last_serial": 6158833, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "da27ce3d8aec2c98535fe75732cdbea3", "sha256": "d272f66fcc65d080a238599acdaf3e7b1ddd8bbb629faeb80a46842ad826671d"}, "downloads": -1, "filename": "ua_spoofer-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "da27ce3d8aec2c98535fe75732cdbea3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9320, "upload_time": "2019-11-18T23:08:15", "upload_time_iso_8601": "2019-11-18T23:08:15.753803Z", "url": "https://files.pythonhosted.org/packages/60/2d/32c225f60e059bffb80c2ea25586a71e72d3260aa8819143d16d3b2891c9/ua_spoofer-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "795cfb51172bbee458248c12015e2bb4", "sha256": "916e87f35efabc7fb0df060cd1044c73fa4770275e1b898b5e325e6c600657c9"}, "downloads": -1, "filename": "ua_spoofer-1.0.tar.gz", "has_sig": false, "md5_digest": "795cfb51172bbee458248c12015e2bb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5237, "upload_time": "2019-11-18T23:08:18", "upload_time_iso_8601": "2019-11-18T23:08:18.606868Z", "url": "https://files.pythonhosted.org/packages/bf/f5/49ee0dc21736d91229bf43b41fb88321ec8e0dce6ccd84470f2f04ee3875/ua_spoofer-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da27ce3d8aec2c98535fe75732cdbea3", "sha256": "d272f66fcc65d080a238599acdaf3e7b1ddd8bbb629faeb80a46842ad826671d"}, "downloads": -1, "filename": "ua_spoofer-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "da27ce3d8aec2c98535fe75732cdbea3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9320, "upload_time": "2019-11-18T23:08:15", "upload_time_iso_8601": "2019-11-18T23:08:15.753803Z", "url": "https://files.pythonhosted.org/packages/60/2d/32c225f60e059bffb80c2ea25586a71e72d3260aa8819143d16d3b2891c9/ua_spoofer-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "795cfb51172bbee458248c12015e2bb4", "sha256": "916e87f35efabc7fb0df060cd1044c73fa4770275e1b898b5e325e6c600657c9"}, "downloads": -1, "filename": "ua_spoofer-1.0.tar.gz", "has_sig": false, "md5_digest": "795cfb51172bbee458248c12015e2bb4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5237, "upload_time": "2019-11-18T23:08:18", "upload_time_iso_8601": "2019-11-18T23:08:18.606868Z", "url": "https://files.pythonhosted.org/packages/bf/f5/49ee0dc21736d91229bf43b41fb88321ec8e0dce6ccd84470f2f04ee3875/ua_spoofer-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:24 2020"}