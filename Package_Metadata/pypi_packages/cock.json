{"info": {"author": "pohmelie", "author_email": "multisosnooley@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "# Cock\n[![Travis status for master branch](https://travis-ci.com/pohmelie/cock.svg?branch=master)](https://travis-ci.com/pohmelie/cock)\n[![Codecov coverage for master branch](https://codecov.io/gh/pohmelie/cock/branch/master/graph/badge.svg)](https://codecov.io/gh/pohmelie/cock)\n[![Pypi version](https://img.shields.io/pypi/v/cock.svg)](https://pypi.org/project/cock/)\n[![Pypi downloads count](https://img.shields.io/pypi/dm/cock)](https://pypi.org/project/cock/)\n\nCock stands for \u00ab**co**nfiguration file with cli**ck**\u00bb. It is a configuration aggregator, which stands on shiny [`click`](https://github.com/pallets/click) library.\n\n# Reason\nNo module for click with flat configuration file, which will mimic actual click options. There are [`click-config`](https://pypi.org/project/click-config) and [`click-config-file`](https://pypi.org/project/click-config-file), but they targets another goals.\n\n# Features\n- Aggregate configuration file and cli options into flat configuration object.\n- Flat dot-accessed ([`addict`](https://pypi.org/project/addict) wrapped) configuration.\n- Entrypoint builder.\n\n# License\n`cock` is offered under MIT license.\n\n# Requirements\n* python 3.7+\n\n# Usage\n`example.py`:\n``` python\nimport click\n\nfrom cock import build_entrypoint\n\n\ndef main(config):\n    print(config)\n\n\noptions = [\n    click.option(\"--a-b-c\", default=\"foo\"),\n    click.option(\"--b-c-d\", default=\"bar\"),\n]\nentrypoint = build_entrypoint(main, options, auto_envvar_prefix=\"EXAMPLE\", show_default=True)\n\nif __name__ == \"__main__\":\n    entrypoint(prog_name=\"example\")\n```\nThis is almost pure click setup\n```\n$ python example.py --help\nUsage: example [OPTIONS] [CONFIGURATION_FILE]\n\nOptions:\n  --a-b-c TEXT  [default: foo]\n  --b-c-d TEXT  [default: bar]\n  --help        Show this message and exit.  [default: False]\n```\nBut there is a `CONFIGURATION_FILE` argument. Lets see use cases.\n### All deafults\n```\n$ python example.py\n{'configuration_file': None, 'a_b_c': 'foo', 'b_c_d': 'bar'}\n```\n### From environment variable\n```\n$ EXAMPLE_A_B_C=foo-env python example.py\n{'configuration_file': None, 'a_b_c': 'foo-env', 'b_c_d': 'bar'}\n```\n### From cli arguments\n```\n$ EXAMPLE_A_B_C=foo-env python example.py --a-b-c foo-cli\n{'a_b_c': 'foo-cli', 'configuration_file': None, 'b_c_d': 'bar'}\n```\n### From configuration\n`config-example.yml`:\n``` yaml\na-b-c: foo-file\n```\n```\n$ EXAMPLE_A_B_C=foo-env python example.py --a-b-c foo-cli config-example.yml\n{'a_b_c': 'foo-file', 'configuration_file': '/absolute/path/to/config-example.yml', 'b_c_d': 'bar'}\n```\n\nPriority is obvious: **file > cli arguments > env variables**\n\nAs described in features paragraph, configuration is flattened before chaining with click options. So all configuration files listed below are equal:\n``` yaml\na-b-c: foo-file\n```\n``` yaml\na:\n  b:\n    c: foo-file\n```\n``` yaml\na-b:\n  c: foo-file\n```\nIf provided file have key crossings:\n``` yaml\na-b-c: foo-file1\na:\n  b-c: foo-file2\n```\nThen `ValueError` will be raised.\n\n`cock` uses `pyyaml` library for config loading, so it supports `yaml` and `json` formats, but this can be improved later if someone will need more configuration file types.\n\n# API\n``` python\ndef build_entrypoint(\n    main: Callable[[AdDict], Any],\n    options: List[click.option],\n    **context_settings\n) -> Callable[..., Any]:\n```\n* `main` is a user-space function of exactly one argument, a dot-accessed config wrapper.\n* `options` is an iterable of `click.option` **decorators**.\n* `**context_settings` is a dict passed through to `command` decorator.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pohmelie/cock", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cock", "package_url": "https://pypi.org/project/cock/", "platform": "", "project_url": "https://pypi.org/project/cock/", "project_urls": {"Homepage": "https://github.com/pohmelie/cock"}, "release_url": "https://pypi.org/project/cock/0.1.0/", "requires_dist": ["click (>=7.1.0)", "addict (>=2.2.0)", "pyyaml (>=5.0.0)", "pytest ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "flake8 ; extra == 'dev'"], "requires_python": ">=3.7", "summary": "configuration with click builder", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Cock</h1>\n<p><a href=\"https://travis-ci.com/pohmelie/cock\" rel=\"nofollow\"><img alt=\"Travis status for master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ff944d0c623bad6141ef5407b85e8c6feff73e6/68747470733a2f2f7472617669732d63692e636f6d2f706f686d656c69652f636f636b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/pohmelie/cock\" rel=\"nofollow\"><img alt=\"Codecov coverage for master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce6a5a02ec4522211f643f41996edd00a7177c05/68747470733a2f2f636f6465636f762e696f2f67682f706f686d656c69652f636f636b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/cock/\" rel=\"nofollow\"><img alt=\"Pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b5c51b0ec6aabb847288218ed1db8c906afbd86/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636f636b2e737667\"></a>\n<a href=\"https://pypi.org/project/cock/\" rel=\"nofollow\"><img alt=\"Pypi downloads count\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f4850bd172518da5be57a0616365aed9ab358ca/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f636f636b\"></a></p>\n<p>Cock stands for \u00ab<strong>co</strong>nfiguration file with cli<strong>ck</strong>\u00bb. It is a configuration aggregator, which stands on shiny <a href=\"https://github.com/pallets/click\" rel=\"nofollow\"><code>click</code></a> library.</p>\n<h1>Reason</h1>\n<p>No module for click with flat configuration file, which will mimic actual click options. There are <a href=\"https://pypi.org/project/click-config\" rel=\"nofollow\"><code>click-config</code></a> and <a href=\"https://pypi.org/project/click-config-file\" rel=\"nofollow\"><code>click-config-file</code></a>, but they targets another goals.</p>\n<h1>Features</h1>\n<ul>\n<li>Aggregate configuration file and cli options into flat configuration object.</li>\n<li>Flat dot-accessed (<a href=\"https://pypi.org/project/addict\" rel=\"nofollow\"><code>addict</code></a> wrapped) configuration.</li>\n<li>Entrypoint builder.</li>\n</ul>\n<h1>License</h1>\n<p><code>cock</code> is offered under MIT license.</p>\n<h1>Requirements</h1>\n<ul>\n<li>python 3.7+</li>\n</ul>\n<h1>Usage</h1>\n<p><code>example.py</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">click</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">cock</span> <span class=\"kn\">import</span> <span class=\"n\">build_entrypoint</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">click</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"p\">(</span><span class=\"s2\">\"--a-b-c\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">),</span>\n    <span class=\"n\">click</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"p\">(</span><span class=\"s2\">\"--b-c-d\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">\"bar\"</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n<span class=\"n\">entrypoint</span> <span class=\"o\">=</span> <span class=\"n\">build_entrypoint</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"n\">auto_envvar_prefix</span><span class=\"o\">=</span><span class=\"s2\">\"EXAMPLE\"</span><span class=\"p\">,</span> <span class=\"n\">show_default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">entrypoint</span><span class=\"p\">(</span><span class=\"n\">prog_name</span><span class=\"o\">=</span><span class=\"s2\">\"example\"</span><span class=\"p\">)</span>\n</pre>\n<p>This is almost pure click setup</p>\n<pre><code>$ python example.py --help\nUsage: example [OPTIONS] [CONFIGURATION_FILE]\n\nOptions:\n  --a-b-c TEXT  [default: foo]\n  --b-c-d TEXT  [default: bar]\n  --help        Show this message and exit.  [default: False]\n</code></pre>\n<p>But there is a <code>CONFIGURATION_FILE</code> argument. Lets see use cases.</p>\n<h3>All deafults</h3>\n<pre><code>$ python example.py\n{'configuration_file': None, 'a_b_c': 'foo', 'b_c_d': 'bar'}\n</code></pre>\n<h3>From environment variable</h3>\n<pre><code>$ EXAMPLE_A_B_C=foo-env python example.py\n{'configuration_file': None, 'a_b_c': 'foo-env', 'b_c_d': 'bar'}\n</code></pre>\n<h3>From cli arguments</h3>\n<pre><code>$ EXAMPLE_A_B_C=foo-env python example.py --a-b-c foo-cli\n{'a_b_c': 'foo-cli', 'configuration_file': None, 'b_c_d': 'bar'}\n</code></pre>\n<h3>From configuration</h3>\n<p><code>config-example.yml</code>:</p>\n<pre><span class=\"nt\">a-b-c</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo-file</span>\n</pre>\n<pre><code>$ EXAMPLE_A_B_C=foo-env python example.py --a-b-c foo-cli config-example.yml\n{'a_b_c': 'foo-file', 'configuration_file': '/absolute/path/to/config-example.yml', 'b_c_d': 'bar'}\n</code></pre>\n<p>Priority is obvious: <strong>file &gt; cli arguments &gt; env variables</strong></p>\n<p>As described in features paragraph, configuration is flattened before chaining with click options. So all configuration files listed below are equal:</p>\n<pre><span class=\"nt\">a-b-c</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo-file</span>\n</pre>\n<pre><span class=\"nt\">a</span><span class=\"p\">:</span>\n  <span class=\"nt\">b</span><span class=\"p\">:</span>\n    <span class=\"nt\">c</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo-file</span>\n</pre>\n<pre><span class=\"nt\">a-b</span><span class=\"p\">:</span>\n  <span class=\"nt\">c</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo-file</span>\n</pre>\n<p>If provided file have key crossings:</p>\n<pre><span class=\"nt\">a-b-c</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo-file1</span>\n<span class=\"nt\">a</span><span class=\"p\">:</span>\n  <span class=\"nt\">b-c</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">foo-file2</span>\n</pre>\n<p>Then <code>ValueError</code> will be raised.</p>\n<p><code>cock</code> uses <code>pyyaml</code> library for config loading, so it supports <code>yaml</code> and <code>json</code> formats, but this can be improved later if someone will need more configuration file types.</p>\n<h1>API</h1>\n<pre><span class=\"k\">def</span> <span class=\"nf\">build_entrypoint</span><span class=\"p\">(</span>\n    <span class=\"n\">main</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">AdDict</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span>\n    <span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">click</span><span class=\"o\">.</span><span class=\"n\">option</span><span class=\"p\">],</span>\n    <span class=\"o\">**</span><span class=\"n\">context_settings</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n</pre>\n<ul>\n<li><code>main</code> is a user-space function of exactly one argument, a dot-accessed config wrapper.</li>\n<li><code>options</code> is an iterable of <code>click.option</code> <strong>decorators</strong>.</li>\n<li><code>**context_settings</code> is a dict passed through to <code>command</code> decorator.</li>\n</ul>\n\n          </div>"}, "last_serial": 7182383, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0bd1a113fd46bf2248cbb8352421aec5", "sha256": "c35fe8776b04fee5c33bce376571ec3d6d2e561e0560cb7f41235417a85379cc"}, "downloads": -1, "filename": "cock-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0bd1a113fd46bf2248cbb8352421aec5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4313, "upload_time": "2020-05-06T18:49:05", "upload_time_iso_8601": "2020-05-06T18:49:05.075515Z", "url": "https://files.pythonhosted.org/packages/fd/d9/5c99729e6f92b16ca370e3be55f5925b30168c54d867329a155e5b90c7c2/cock-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4d84a77cd22e33ce97e3a22bc378e11", "sha256": "f78ec07e9421c69828e044c8702702e1125267ce5cce8e928453ec056c329f95"}, "downloads": -1, "filename": "cock-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a4d84a77cd22e33ce97e3a22bc378e11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3859, "upload_time": "2020-05-06T18:49:07", "upload_time_iso_8601": "2020-05-06T18:49:07.239136Z", "url": "https://files.pythonhosted.org/packages/42/4d/a41c25b3f22e75cb348d0d9a79b37a556d706bdec74d73da4456241c024e/cock-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0bd1a113fd46bf2248cbb8352421aec5", "sha256": "c35fe8776b04fee5c33bce376571ec3d6d2e561e0560cb7f41235417a85379cc"}, "downloads": -1, "filename": "cock-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0bd1a113fd46bf2248cbb8352421aec5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4313, "upload_time": "2020-05-06T18:49:05", "upload_time_iso_8601": "2020-05-06T18:49:05.075515Z", "url": "https://files.pythonhosted.org/packages/fd/d9/5c99729e6f92b16ca370e3be55f5925b30168c54d867329a155e5b90c7c2/cock-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4d84a77cd22e33ce97e3a22bc378e11", "sha256": "f78ec07e9421c69828e044c8702702e1125267ce5cce8e928453ec056c329f95"}, "downloads": -1, "filename": "cock-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a4d84a77cd22e33ce97e3a22bc378e11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3859, "upload_time": "2020-05-06T18:49:07", "upload_time_iso_8601": "2020-05-06T18:49:07.239136Z", "url": "https://files.pythonhosted.org/packages/42/4d/a41c25b3f22e75cb348d0d9a79b37a556d706bdec74d73da4456241c024e/cock-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:21 2020"}