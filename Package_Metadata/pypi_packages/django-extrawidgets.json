{"info": {"author": "Russell Keith-Magee", "author_email": "russell@keith-magee.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "Ray's Widget Exchange\n=====================\n\nRay's Widget Exchange is a project exploring the client-side of Django\nwebsite development. The intention is to provide tools, widgets, views\nand other services that aren't appropriate for the Django core, but are\nstill essential for website development.\n\nInitial goals:\n\nWe aim to provide a simple set of widgets that can be easily integrated into a\nDjango form:\n\n* A calendar widget\n\n* A numerical range widget\n\n* A time widget\n\n* An AJAX autocomplete widget\n\n* A color palette\n\n  - full RGB selection\n\n  - selection from subset of colors\n\n\nLonger term goals:\n\n* Handle compression and aggregation of CSS and JavaScript artefacts. (Note by\n  Reinout: probably not, as an app should do only one thing:\n  compression/aggregation can be done by other apps).\n\n* Client-side input validation (possibly by Ajax callback?)\n\n\nInstallation\n------------\n\nRay's widget exchange depends on `django-staticfiles\n<http://pypi.python.org/pypi/django-staticfiles>`_ as that's the best way at\nthe moment to handle css and javascript files.  It is also, probably, going to\nend up in one form or the other in Django 1.3.\n\n- django-rays' ``setup.py`` has an automatic dependency on django-staticfiles,\n  so installing django-rays automatically brings in django-staticfiles.\n\n- Add both ``rays`` and ``staticfiles`` to your settings file's\n  ``INSTALLED_APPS``.\n\nDjango-staticfiles needs a bit of boilerplate. Django 1.3 ought to make this\nunnecessary, btw.  The `official django-staticfiles documentation\n<http://pypi.python.org/pypi/django-staticfiles>`_ has more elaborate\ninformation and there's also a `blog post\n<http://reinout.vanrees.org/weblog/2010/05/19/django-css-javascript-files.html>`_\nwith a more narrative explanation and example snippets.\n\n- In sites where you use django-rays, you will need to add a little bit of\n  django-staticfiles boiler plate code to your settings file ::\n\n    # Used for django-staticfiles\n    STATIC_URL = '/static_media/'\n    TEMPLATE_CONTEXT_PROCESSORS = (\n        # Default items.\n        \"django.core.context_processors.auth\",\n        \"django.core.context_processors.debug\",\n        \"django.core.context_processors.i18n\",\n        \"django.core.context_processors.media\",\n        # Needs to be added for django-staticfiles to allow you to use\n        # {{ STATIC_URL }}myapp/my.css in your templates.\n        'staticfiles.context_processors.static_url',\n        )\n\n- And in your urlconf, add something like this to the end of your\n  ``urls.py``::\n\n    if settings.DEBUG:\n        # Add this also to the projects that use this application.\n        # It allows django-staticfiles to serve up the /media files\n        # in DEBUG mode.\n        urlpatterns += patterns('',\n            (r'', include('staticfiles.urls')),\n        )\n\n- In production, use the ``build_static`` management command to prepare all\n  static files for apache.\n\n\nThe css/js inclusion is happening by using `Django's form media handling\n<http://docs.djangoproject.com/en/1.2/topics/forms/media/>`_.  So don't forget\nto add your equivalent of::\n\n    {{ form.media }}\n\nsomewhere in the head of your templates.\n\n\nDevelopment\n-----------\n\nThe source code is `on bitbucket\n<http://bitbucket.org/freakboy3742/django-rays>`_.  The `bug tracker\n<http://bitbucket.org/freakboy3742/django-rays/issues?status=new&status=open>`_\nis also there.\n\nFor developers that want to use buildout, a small ``buildout.cfg`` that sets\nup a development and testing environment is provided.  Otherwise use your\nregular virtualenv/pip setup, of course.\n\nRun ``python bootstrap.py`` and ``bin/buildout`` to initialize the buildout\nenvironment and to fetch all dependencies.  Now you can check run tests with\n``bin/test``.\nYou can setup a simple example project with ``bin/django syncdb``.  Now run\n``bin/django runserver`` to start the development server and point your\nbrowser to ``http://localhost:8000/``.\n\n\nWidget documentation\n====================\n\n\nAutocomplete\n------------\n\nThe ``AutocompleteInput`` widget hooks up a regular text input widget with\n`jquery-ui's autocomplete <http://jqueryui.com/demos/autocomplete/>`_.  It\ncurrently hooks up jquery's autocomplete with a url that provides the\nnecessary data (see jquery's `remote datasource demo\n<http://jqueryui.com/demos/autocomplete/#remote>`_.\n\nThe url should accept a ``term`` ``GET`` parameter and return a json list of\ndictionaries.  The dictionaries must have the key \"value\" and/or \"label\".  If\none of them is missing, the other is used twice.  The label is the\nuser-visible string and the value is the value being put into the form data.\n\nYou can pass the widget either a ``url`` (just the url to be called) or a\n``urlname`` (a name that's looked up in the urlconf).\n\n\nExample usage::\n\n  from django import forms\n  from rays.widgets import AutocompleteInput\n\n\n  class AnimalForm(forms.Form):\n      name = forms.CharField(\n          label=_('Enter animal name'),\n          max_length=50,\n          widget=AutocompleteInput(urlname='autocomplete-animals'))\n\n\nDatepicker\n----------\n\nThe ``DatepickerInput`` widget hooks up a regular text input widget with\n`jquery's datepicker <http://jqueryui.com/demos/datepicker/>`_.\n\n\nExample usage::\n\n  from django import forms\n  from rays.widgets import DatepickerInput\n\n\n  class DatepickerForm(forms.Form):\n      start_date = forms.DateField(widget=DatepickerInput())\n      end_date = forms.DateField(widget=DatepickerInput(format='%Y.%m.%d'))\n\n\n\nContributors\n============\n\nThe PRIMARY AUTHORS of Ray's Widget Exchange are:\n\nRussell Keith-Magee <russell@keith-magee.com>\n\nGregory M\u00fcllegger <gregor@muellegger.de>\n\nReinout van Rees http://reinout.vanrees.org\n\nGlen Somerville <glen@syneus.fi>\n\nAnd here is an inevitably incomplete list of MUCH-APPRECIATED CONTRIBUTORS --\npeople who have submitted patches, reported bugs, and generally made Ray's\nWidget Exchange that much better:\n\n\n\nChangelog\n=========\n\n0.0.1 (unreleased)\n------------------\n\n- Added autocomplete widget.\n\n- Added dateinput widget.\n\n- Added jquery and jquery ui + css and i18n.\n\n- Added django-staticfiles dependency as that's the best thing nowadays for\n  dealing with static js/css files.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.bitbucket.org/freakboy3742/django-rays/wiki/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-extrawidgets", "package_url": "https://pypi.org/project/django-extrawidgets/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-extrawidgets/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.bitbucket.org/freakboy3742/django-rays/wiki/"}, "release_url": "https://pypi.org/project/django-extrawidgets/1/", "requires_dist": null, "requires_python": null, "summary": "A project exploring the client-side of Django website development", "version": "1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ray-s-widget-exchange\">\n<h2>Ray\u2019s Widget Exchange</h2>\n<p>Ray\u2019s Widget Exchange is a project exploring the client-side of Django\nwebsite development. The intention is to provide tools, widgets, views\nand other services that aren\u2019t appropriate for the Django core, but are\nstill essential for website development.</p>\n<p>Initial goals:</p>\n<p>We aim to provide a simple set of widgets that can be easily integrated into a\nDjango form:</p>\n<ul>\n<li>A calendar widget</li>\n<li>A numerical range widget</li>\n<li>A time widget</li>\n<li>An AJAX autocomplete widget</li>\n<li>A color palette<ul>\n<li>full RGB selection</li>\n<li>selection from subset of colors</li>\n</ul>\n</li>\n</ul>\n<p>Longer term goals:</p>\n<ul>\n<li>Handle compression and aggregation of CSS and JavaScript artefacts. (Note by\nReinout: probably not, as an app should do only one thing:\ncompression/aggregation can be done by other apps).</li>\n<li>Client-side input validation (possibly by Ajax callback?)</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Ray\u2019s widget exchange depends on <a href=\"http://pypi.python.org/pypi/django-staticfiles\" rel=\"nofollow\">django-staticfiles</a> as that\u2019s the best way at\nthe moment to handle css and javascript files.  It is also, probably, going to\nend up in one form or the other in Django 1.3.</p>\n<ul>\n<li>django-rays\u2019 <tt>setup.py</tt> has an automatic dependency on django-staticfiles,\nso installing django-rays automatically brings in django-staticfiles.</li>\n<li>Add both <tt>rays</tt> and <tt>staticfiles</tt> to your settings file\u2019s\n<tt>INSTALLED_APPS</tt>.</li>\n</ul>\n<p>Django-staticfiles needs a bit of boilerplate. Django 1.3 ought to make this\nunnecessary, btw.  The <a href=\"http://pypi.python.org/pypi/django-staticfiles\" rel=\"nofollow\">official django-staticfiles documentation</a> has more elaborate\ninformation and there\u2019s also a <a href=\"http://reinout.vanrees.org/weblog/2010/05/19/django-css-javascript-files.html\" rel=\"nofollow\">blog post</a>\nwith a more narrative explanation and example snippets.</p>\n<ul>\n<li><p>In sites where you use django-rays, you will need to add a little bit of\ndjango-staticfiles boiler plate code to your settings file</p>\n<pre># Used for django-staticfiles\nSTATIC_URL = '/static_media/'\nTEMPLATE_CONTEXT_PROCESSORS = (\n    # Default items.\n    \"django.core.context_processors.auth\",\n    \"django.core.context_processors.debug\",\n    \"django.core.context_processors.i18n\",\n    \"django.core.context_processors.media\",\n    # Needs to be added for django-staticfiles to allow you to use\n    # {{ STATIC_URL }}myapp/my.css in your templates.\n    'staticfiles.context_processors.static_url',\n    )\n</pre>\n</li>\n<li><p>And in your urlconf, add something like this to the end of your\n<tt>urls.py</tt>:</p>\n<pre>if settings.DEBUG:\n    # Add this also to the projects that use this application.\n    # It allows django-staticfiles to serve up the /media files\n    # in DEBUG mode.\n    urlpatterns += patterns('',\n        (r'', include('staticfiles.urls')),\n    )\n</pre>\n</li>\n<li><p>In production, use the <tt>build_static</tt> management command to prepare all\nstatic files for apache.</p>\n</li>\n</ul>\n<p>The css/js inclusion is happening by using <a href=\"http://docs.djangoproject.com/en/1.2/topics/forms/media/\" rel=\"nofollow\">Django\u2019s form media handling</a>.  So don\u2019t forget\nto add your equivalent of:</p>\n<pre>{{ form.media }}\n</pre>\n<p>somewhere in the head of your templates.</p>\n</div>\n<div id=\"development\">\n<h3>Development</h3>\n<p>The source code is <a href=\"http://bitbucket.org/freakboy3742/django-rays\" rel=\"nofollow\">on bitbucket</a>.  The <a href=\"http://bitbucket.org/freakboy3742/django-rays/issues?status=new&amp;status=open\" rel=\"nofollow\">bug tracker</a>\nis also there.</p>\n<p>For developers that want to use buildout, a small <tt>buildout.cfg</tt> that sets\nup a development and testing environment is provided.  Otherwise use your\nregular virtualenv/pip setup, of course.</p>\n<p>Run <tt>python bootstrap.py</tt> and <tt>bin/buildout</tt> to initialize the buildout\nenvironment and to fetch all dependencies.  Now you can check run tests with\n<tt>bin/test</tt>.\nYou can setup a simple example project with <tt>bin/django syncdb</tt>.  Now run\n<tt>bin/django runserver</tt> to start the development server and point your\nbrowser to <tt><span class=\"pre\">http://localhost:8000/</span></tt>.</p>\n</div>\n</div>\n<div id=\"widget-documentation\">\n<h2>Widget documentation</h2>\n<div id=\"autocomplete\">\n<h3>Autocomplete</h3>\n<p>The <tt>AutocompleteInput</tt> widget hooks up a regular text input widget with\n<a href=\"http://jqueryui.com/demos/autocomplete/\" rel=\"nofollow\">jquery-ui\u2019s autocomplete</a>.  It\ncurrently hooks up jquery\u2019s autocomplete with a url that provides the\nnecessary data (see jquery\u2019s <a href=\"http://jqueryui.com/demos/autocomplete/#remote\" rel=\"nofollow\">remote datasource demo</a>.</p>\n<p>The url should accept a <tt>term</tt> <tt>GET</tt> parameter and return a json list of\ndictionaries.  The dictionaries must have the key \u201cvalue\u201d and/or \u201clabel\u201d.  If\none of them is missing, the other is used twice.  The label is the\nuser-visible string and the value is the value being put into the form data.</p>\n<p>You can pass the widget either a <tt>url</tt> (just the url to be called) or a\n<tt>urlname</tt> (a name that\u2019s looked up in the urlconf).</p>\n<p>Example usage:</p>\n<pre>from django import forms\nfrom rays.widgets import AutocompleteInput\n\n\nclass AnimalForm(forms.Form):\n    name = forms.CharField(\n        label=_('Enter animal name'),\n        max_length=50,\n        widget=AutocompleteInput(urlname='autocomplete-animals'))\n</pre>\n</div>\n<div id=\"datepicker\">\n<h3>Datepicker</h3>\n<p>The <tt>DatepickerInput</tt> widget hooks up a regular text input widget with\n<a href=\"http://jqueryui.com/demos/datepicker/\" rel=\"nofollow\">jquery\u2019s datepicker</a>.</p>\n<p>Example usage:</p>\n<pre>from django import forms\nfrom rays.widgets import DatepickerInput\n\n\nclass DatepickerForm(forms.Form):\n    start_date = forms.DateField(widget=DatepickerInput())\n    end_date = forms.DateField(widget=DatepickerInput(format='%Y.%m.%d'))\n</pre>\n</div>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<p>The PRIMARY AUTHORS of Ray\u2019s Widget Exchange are:</p>\n<p>Russell Keith-Magee &lt;<a href=\"mailto:russell%40keith-magee.com\">russell<span>@</span>keith-magee<span>.</span>com</a>&gt;</p>\n<p>Gregory M\u00fcllegger &lt;<a href=\"mailto:gregor%40muellegger.de\">gregor<span>@</span>muellegger<span>.</span>de</a>&gt;</p>\n<p>Reinout van Rees <a href=\"http://reinout.vanrees.org\" rel=\"nofollow\">http://reinout.vanrees.org</a></p>\n<p>Glen Somerville &lt;<a href=\"mailto:glen%40syneus.fi\">glen<span>@</span>syneus<span>.</span>fi</a>&gt;</p>\n<p>And here is an inevitably incomplete list of MUCH-APPRECIATED CONTRIBUTORS \u2013\npeople who have submitted patches, reported bugs, and generally made Ray\u2019s\nWidget Exchange that much better:</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"unreleased\"><span class=\"section-subtitle\">0.0.1 (unreleased)</span></h2>\n<ul>\n<li>Added autocomplete widget.</li>\n<li>Added dateinput widget.</li>\n<li>Added jquery and jquery ui + css and i18n.</li>\n<li>Added django-staticfiles dependency as that\u2019s the best thing nowadays for\ndealing with static js/css files.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 789595, "releases": {"1": [{"comment_text": "", "digests": {"md5": "792e6f55b0a53e545d0831e426791bc0", "sha256": "460d58eda3d1d2d4faec83c4ed608a0e29e44158b90cb1d62fdb5ae6480df2a1"}, "downloads": -1, "filename": "django-extrawidgets-1.tar.gz", "has_sig": false, "md5_digest": "792e6f55b0a53e545d0831e426791bc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13079, "upload_time": "2012-06-25T17:46:47", "upload_time_iso_8601": "2012-06-25T17:46:47.042739Z", "url": "https://files.pythonhosted.org/packages/fa/8d/b35c3e3f07f1c90c1e42bad2eba0b04bfb0d2f7ffd059f6d8c270b74d282/django-extrawidgets-1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "792e6f55b0a53e545d0831e426791bc0", "sha256": "460d58eda3d1d2d4faec83c4ed608a0e29e44158b90cb1d62fdb5ae6480df2a1"}, "downloads": -1, "filename": "django-extrawidgets-1.tar.gz", "has_sig": false, "md5_digest": "792e6f55b0a53e545d0831e426791bc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13079, "upload_time": "2012-06-25T17:46:47", "upload_time_iso_8601": "2012-06-25T17:46:47.042739Z", "url": "https://files.pythonhosted.org/packages/fa/8d/b35c3e3f07f1c90c1e42bad2eba0b04bfb0d2f7ffd059f6d8c270b74d282/django-extrawidgets-1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:15 2020"}