{"info": {"author": "Derek Haynes", "author_email": "derek@dlite.cc", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Whisk ML Project Framework\n\n[![pypi](https://img.shields.io/pypi/v/whisk.svg)](https://pypi.python.org/pypi/whisk)\n\n[![docs](https://readthedocs.org/projects/whisk/badge/?version=latest)](https://whisk.readthedocs.io/en/latest/?badge=latest)\n\nTying together the tools required to release a machine learning model can be daunting. Whisk makes building and releasing ML models easy and fun. Whisk creates a logical and flexible project structure for ML that creates reproducible results and lets you release your model to the world without becoming a software engineer.\n\nWhisk doesn't lock you into a particular ML framework or require you to learn yet another ML packaging API. Instead, it leverages the magic of Python's ecosystem that's available to projects structured in a Pythonic-way. Whisk does the structuring while you focus on the data science.\n\nRead more about our [beliefs](#beliefs).\n\n## Quickstart\n\n_Replace `demo` with the name of your ML project in the examples below._\n\nCreate the project:\n\n```\npip install whisk\necho \"Generate the directory structure, set up a venv, initialize a Git repo, and more.\"\nwhisk create demo\ncd demo\n```\n\nThere's a placeholder model you can invoke immediately from the command line:\n\n```\nwhisk predict [[0,1],[2,3]]\n```\n\n...and a ready-to-go Flask web service:\n\n```\nwhisk app start\ncurl --location --request POST 'http://localhost:5000/predict' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"data\":[[0, 1], [2, 3]]}'\n```\n\nDeploy the web service to Heroku (a free account is fine to get started):\n\n```\nwhisk app create demo-[INSERT YOUR NAME]\n```\n\nCreate a Python package containing your model and share with the world:\n\n```\nwhisk model build\necho \"Installing the generated Python package\"\npip install dist/demo-0.1.0.tar.gz\n```\n\nInvoke the model via the CLI:\n\n```\ndemo predict [[0,1],[2,3]]\n```\n\n...and within Python code:\n\n```py\nfrom demo import model\nmodel.predict([[0,1],[2,3]])\n```\n\n## Beliefs\n\n* _A notebook isn't enough_ - A data science notebook is where experimentation starts, but you can't create a reproducible, collaborative ML project with just a `*.ipynb` file.\n* _A Reproducible, collaborative project is a solved problem for classical software_ - We don't need to re-invent the wheel for machine learning projects. Instead, we need guide rails to help data scientists structure projects without forcing them to also become software engineers.\n* _Python already has a good package manager_ - We don't need overly abstracted solutions to package a trained ML model. A properly structured ML project makes it easy to use _pip_ for packaging a model, making it easy for _anyone_ to benefit from your work.\n* _Version control is a requirement_ - You can't have a reproducible project if the code and training data isn't in version control.\n* _Docker is a heavyweight and fragile option for solving reproducibility_ - when we [explicitly declare and isolate dependencies](https://12factor.net/dependencies), we don't need to rely on the implicit existence of packages installed in a Docker container. Docker also creates a slow development flow: repeatedly restarting Docker containers is far slower than doing the same in pure Python. Python already has solid native tools for this problem.\n\n\n## Credits\n\nThis package was created with Cookiecutter and the `audreyr/cookiecutter-pypackage` project template. The project template is heavily inspired by [Cookiecutter Data Science](https://github.com/drivendata/cookiecutter-data-science).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bookletai/whisk", "keywords": "whisk", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "whisk", "package_url": "https://pypi.org/project/whisk/", "platform": "", "project_url": "https://pypi.org/project/whisk/", "project_urls": {"Homepage": "https://github.com/bookletai/whisk"}, "release_url": "https://pypi.org/project/whisk/0.1.8/", "requires_dist": ["Click (>=7.0)", "cookiecutter (>=1.7.2)"], "requires_python": ">=3.5", "summary": "Machine Learning Project Framework Generator", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Whisk ML Project Framework</h1>\n<p><a href=\"https://pypi.python.org/pypi/whisk\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/571b977cd15c2adc9f713bb366853a3d85604a1a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f776869736b2e737667\"></a></p>\n<p><a href=\"https://whisk.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8e8947f549ffc97f66648662b84e1ffe00e0d1eb/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f776869736b2f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>Tying together the tools required to release a machine learning model can be daunting. Whisk makes building and releasing ML models easy and fun. Whisk creates a logical and flexible project structure for ML that creates reproducible results and lets you release your model to the world without becoming a software engineer.</p>\n<p>Whisk doesn't lock you into a particular ML framework or require you to learn yet another ML packaging API. Instead, it leverages the magic of Python's ecosystem that's available to projects structured in a Pythonic-way. Whisk does the structuring while you focus on the data science.</p>\n<p>Read more about our <a href=\"#beliefs\" rel=\"nofollow\">beliefs</a>.</p>\n<h2>Quickstart</h2>\n<p><em>Replace <code>demo</code> with the name of your ML project in the examples below.</em></p>\n<p>Create the project:</p>\n<pre><code>pip install whisk\necho \"Generate the directory structure, set up a venv, initialize a Git repo, and more.\"\nwhisk create demo\ncd demo\n</code></pre>\n<p>There's a placeholder model you can invoke immediately from the command line:</p>\n<pre><code>whisk predict [[0,1],[2,3]]\n</code></pre>\n<p>...and a ready-to-go Flask web service:</p>\n<pre><code>whisk app start\ncurl --location --request POST 'http://localhost:5000/predict' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"data\":[[0, 1], [2, 3]]}'\n</code></pre>\n<p>Deploy the web service to Heroku (a free account is fine to get started):</p>\n<pre><code>whisk app create demo-[INSERT YOUR NAME]\n</code></pre>\n<p>Create a Python package containing your model and share with the world:</p>\n<pre><code>whisk model build\necho \"Installing the generated Python package\"\npip install dist/demo-0.1.0.tar.gz\n</code></pre>\n<p>Invoke the model via the CLI:</p>\n<pre><code>demo predict [[0,1],[2,3]]\n</code></pre>\n<p>...and within Python code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">demo</span> <span class=\"kn\">import</span> <span class=\"n\">model</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]])</span>\n</pre>\n<h2>Beliefs</h2>\n<ul>\n<li><em>A notebook isn't enough</em> - A data science notebook is where experimentation starts, but you can't create a reproducible, collaborative ML project with just a <code>*.ipynb</code> file.</li>\n<li><em>A Reproducible, collaborative project is a solved problem for classical software</em> - We don't need to re-invent the wheel for machine learning projects. Instead, we need guide rails to help data scientists structure projects without forcing them to also become software engineers.</li>\n<li><em>Python already has a good package manager</em> - We don't need overly abstracted solutions to package a trained ML model. A properly structured ML project makes it easy to use <em>pip</em> for packaging a model, making it easy for <em>anyone</em> to benefit from your work.</li>\n<li><em>Version control is a requirement</em> - You can't have a reproducible project if the code and training data isn't in version control.</li>\n<li><em>Docker is a heavyweight and fragile option for solving reproducibility</em> - when we <a href=\"https://12factor.net/dependencies\" rel=\"nofollow\">explicitly declare and isolate dependencies</a>, we don't need to rely on the implicit existence of packages installed in a Docker container. Docker also creates a slow development flow: repeatedly restarting Docker containers is far slower than doing the same in pure Python. Python already has solid native tools for this problem.</li>\n</ul>\n<h2>Credits</h2>\n<p>This package was created with Cookiecutter and the <code>audreyr/cookiecutter-pypackage</code> project template. The project template is heavily inspired by <a href=\"https://github.com/drivendata/cookiecutter-data-science\" rel=\"nofollow\">Cookiecutter Data Science</a>.</p>\n\n          </div>"}, "last_serial": 7174629, "releases": {"0.1.8": [{"comment_text": "", "digests": {"md5": "90dbb42eebea84d067827c3a11110870", "sha256": "082c9b65a40784f9e07448249a03bcc02de439850034b6b9266e1a3238e79e0f"}, "downloads": -1, "filename": "whisk-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "90dbb42eebea84d067827c3a11110870", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 49458, "upload_time": "2020-05-05T18:49:24", "upload_time_iso_8601": "2020-05-05T18:49:24.569493Z", "url": "https://files.pythonhosted.org/packages/bc/cc/7fb74433a5eb875a85b094079d9d6fd43c9f763c96df4124663c00e3fc1c/whisk-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4346c261723f91e25a799f8324c1684", "sha256": "ca3730054964b1bc7de4e6cc5a2715ddddbd68247862b4b3523e6f9867b0fa12"}, "downloads": -1, "filename": "whisk-0.1.8.tar.gz", "has_sig": false, "md5_digest": "f4346c261723f91e25a799f8324c1684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 40442, "upload_time": "2020-05-05T18:49:26", "upload_time_iso_8601": "2020-05-05T18:49:26.400225Z", "url": "https://files.pythonhosted.org/packages/45/b4/eace0bfc6cb2ea56db5979dcc57cbf28d7229f46244b80e747353d60762e/whisk-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "90dbb42eebea84d067827c3a11110870", "sha256": "082c9b65a40784f9e07448249a03bcc02de439850034b6b9266e1a3238e79e0f"}, "downloads": -1, "filename": "whisk-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "90dbb42eebea84d067827c3a11110870", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 49458, "upload_time": "2020-05-05T18:49:24", "upload_time_iso_8601": "2020-05-05T18:49:24.569493Z", "url": "https://files.pythonhosted.org/packages/bc/cc/7fb74433a5eb875a85b094079d9d6fd43c9f763c96df4124663c00e3fc1c/whisk-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f4346c261723f91e25a799f8324c1684", "sha256": "ca3730054964b1bc7de4e6cc5a2715ddddbd68247862b4b3523e6f9867b0fa12"}, "downloads": -1, "filename": "whisk-0.1.8.tar.gz", "has_sig": false, "md5_digest": "f4346c261723f91e25a799f8324c1684", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 40442, "upload_time": "2020-05-05T18:49:26", "upload_time_iso_8601": "2020-05-05T18:49:26.400225Z", "url": "https://files.pythonhosted.org/packages/45/b4/eace0bfc6cb2ea56db5979dcc57cbf28d7229f46244b80e747353d60762e/whisk-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:29:42 2020"}