{"info": {"author": "Mike Miller", "author_email": "mixmastamyk@github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: System :: Systems Administration", "Topic :: Utilities"], "description": "\n\u2ef3 TurtleConfig \u2ef3\n=============================\n\n*Why yes, it's turtles all the way down \ud83d\udc22\ud83d\udc22\ud83d\udc22\ud83d\udc22\u2026*\n\nThis is an attempt at a cascading configuration library that I'd like to use.\nThe basic idea is that you get a configuration object and read its properties\nfor the values of options you've potentially defined all over the place, haha.\n\nBehind the scenes TurtleConfig will look at command-line parameters,\nthe environment,\nuser configuration files,\nhost/site configuration,\nand the app's own defaults to find the best value.\nTypically in that order,\nalthough you're welcome to modify that list of configuration sources to\nwhatever you see fit.\n\nInstead of the typical hodge-podge of custom code needed for that,\nsetting up \"TC\" looks a little something like this.\nFirst, you'll define a schema via a standard Python object.\nEither imported from a module,\nor locally via a class/object,\nwhich is easier to view here:\n\n.. code-block:: python\n\n    import os\n    from tconf import TurtleConfig\n\n    import schema as AppSchema  # or\u2026\n\n    class AppSchema:\n        an_option = True  # simple options\n\n        class main:  # or perhaps a hierarchy\n            jpeg_quality = 95\n            file_path = '/foo'\n\n\nSchema objects support type annotations and validation as well,\nbut don't need to be given most of the time.\n\nNext, create the TurtleConfig object:\n\n.. code-block:: python\n\n    cfg = TurtleConfig(\n        'AppyMcApp',    # The app's name\n        sources = (     # A sequence of option sources\n            os.environ,\n            '{user_config_dir}/options.ini',  # appdirs\n            '{site_config_dir}/options.ini',  # appdirs\n            '/path/to/options.xml',  # or JSON, YAML, etc.\n            AppSchema,  # The schema/defaults object\n        ),\n        ensure_paths=True,  # creates folders/files when needed\n    )\n\n**Virtual Paths**\n\nNote,\nthe ``user_config_dir`` & ``site_config_dir`` variables above are provided by\nthe\n`appdirs <https://pypi.org/project/appdirs/>`_ module\nso you don't have to worry about cross platform locations\u2014\\\nunless you want to.\n\nTip:  You may want to start logging at ``DEBUG``\u00a0level before loading TC,\nas it helps to visualize what is going on inside its shell.\nThe\n`out <https://pypi.org/project/out/>`_ module\nis perhaps the easiest way to do that:\n\n.. code-block:: python\n\n    import sys, out\n    out.configure(level='debug' if '-d' in sys.argv else 'info')\n\n\nTry It!\n--------\n\nFirst, install the small pure-python package, and off you go:\n\n.. code-block:: shell\n\n    \u23f5 python3 -m pip install tconf\n\n\nInterfaces\n~~~~~~~~~~~~~~\n\nOnce loaded,\nthere are two interfaces to get at options,\nvia attributes or dictionary-like access:\n\n.. code-block:: python\n\n    # Attribute interface\n    >>> cfg.main.jpeg_quality\n    95\n\n    # Dictionary interface\n    >>> cfg['main.jpeg_quality']\n    95\n\n\nNow, why would you use one form over the other?\n\nWell, the first (attribute interface) is easier to type, read,\nand the design I\u00a0originally wanted.\nHowever, it has limitations in a number of circumstances that are damn near\nimpossible to overcome,\nwhich you'll read about below.\n\nSo the second (dictionary form) is generally preferred unless the app has\nsimple needs,\nsuch as a single-level configuration.\nAn editor \"snippet\" can mitigate the extra keystrokes.\n\n\nValue Types\n~~~~~~~~~~~~~~\n\nSome configuration sources are limited (in a good way)\u2020 in that they return\noption values only as strings.\nFor example, the environment, strict-yaml, and ``.ini`` files have string-only\nvalues.\nHowever, our app is likely to need real types,\nsuch as integers, booleans, or lists of strings, etc.\nWhat to do?\n\nUnder TC,\nthe types of option values are required to be the same type as their schema\ndefaults,\nas defined in Python.\nRemember, defaults are found from the last class/module/object passed as a\nsource,\nthe ``AppSchema``\nobject as seen in the example above.\n\nThe default value types may be annotated,\notherwise the given default will be inspected for its type as a fallback.\nThis means you can skip having to write type annotations much of the time\nas they are inferred.\n\n**Points of interest:**\n\n- Turtle will attempt to convert or \"coerce\" string values gathered from a\n  config source into the expected (annotated or inferred) non-string type.\n\n- Values are then type checked via the\n  `typeguard <https://pypi.org/project/typeguard/>`_ module.\n\n- Currently, simple and compound Python types are supported:\n\n  - ``str, int, float, bool``\n  - ``list, tuple, dict, set``\n  - ``List, Tuple, Sequence, Dict, Set`` *(from le typing module)*\n  - ``Union, Any, Optional, etc.`` *(ditto)*\n\n.. ~ foo\n\n- Annotations are required when complex, compound value types are needed,\n  as defined with the stdlib ``typing`` module.\n\n.. ~ - ? Compound types should be encoded in strings with Python syntax if you'd like\n  .. ~ them decoded automatically.\n  .. ~ Otherwise, pass them as strings and decode them yourself.\n\n  .. ~ - If you're using an already typed (via syntax) file format such as JSON,\n    .. ~ don't do this,\n    .. ~ rather spread the data structure out as normal.\n\n- Annotations may also support kwargs for an ArgumentParser, see below.\n\n\u2020 Conversion of types is better done in the application-layer than in the file\nformat to avoid unexpected edge-case bugs like\n`\"the Norway problem.\" <https://hitchdev.com/strictyaml/why/implicit-typing-removed/>`_\n\n\nConfiguration Sources\n-----------------------\n\nEach configuration source has an Adapter class to integrate the different\ninterfaces into one.\nAs mentioned,\nwhen looking for options,\nthe sources are searched in order from\ntop to bottom,\nfront to back,\nuntil a suitable value is found.\nIf an option is not found in any source,\nan ``AttributeError`` or ``KeyError``\n(depending on interface)\nis raised to ensure bugs are found early.\n\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~~~\n\nPerhaps you'd like to override options with environment variables.\nThis is what it looks like:\n\n.. code-block:: python\n\n    >>> os.environ['PY_APPYMCAPP.MAIN.JPEG_QUALITY'] = '94'\n    >>> cfg['main.jpeg_quality']\n    94\n\nAn environment variable matching one of our configuration values\nis uppercase and prefixed with\n``PY_`` and the application name.\nBoth parts of the prefix are able to be modified by modifying the app_name\nand/or passing an\n``env_prefix='\u2026'`` to the ``TurtleConfig`` constructor.\n\n\n**Limitations:**\n\nDue to limits with how the environment adapter works,\nit cannot provide hierarchical access to settings via the attribute interface.\n\nThe reason is that the attributes are evaluated left to right.\nAt access time,\nthe object doesn't yet have enough information to know if it should return the\nfinal value or continue down the attribute chain.\nIt could decide on one or the other,\nleading to a number of broken cases from either decision.\nBare attributes *do* work with the environment when options are kept to a\nsingle-level, however.\nAs mentioned previously,\ndictionary-style access (shown above) works consistently.\n\n\nConfigParser\n~~~~~~~~~~~~~~\n\n``.ini`` files have two levels by design and are great for config files.\nTherefore they do work hierarchically by default and would typically require\nexactly two levels.\n\nThere is one exception for convenience, however.\nIf a single-level option is requested,\nthe section ``[main]`` (configurable also) is tried as a fallback.\nThis is so one can use a single-level as well as a dual-level config with\nConfigParser,\nsimply by putting root options under ``[main]``:\n\n.. code-block:: shell\n\n    \u23f5 cat test.ini\n    [main]\n    jpeg_quality = 96\n    # snip\n\n.. code-block:: python\n\n    >>> cfg.main.jpeg_quality\n    96\n    >>> cfg['main.jpeg_quality']\n    96\n    >>> cfg.jpeg_quality  #\u00a0looks in [main] also\n    96\n\n\nJSON\n~~~~~~~~~~~~~~\n\nJSON is not a great format for humans to edit,\nbut still relatively common as configuration:\n\n\n.. code-block:: shell\n\n   \u23f5 cat test.json\n    {   \"an_option\": true,\n        \"main\": {\n            \"jpeg_quality\": 96,\n    # ~snip~\n\n.. code-block:: python\n\n    >>> cfg.main.jpeg_quality\n    96\n    >>> cfg['main.jpeg_quality']\n    96\n    >>> cfg.does_not_exist\n    # \u2026\n    AttributeError: 'does_not_exist' not found.\n\n    >>> cfg.an_option\n    True\n\nCompound data types are better encoded in the JSON itself\nrather than trying to smash \"PyON\" into strings.\n\n\nXML\n~~~~~~~~~~~~~~\n\nRequires\n`xmltodict <https://hitchdev.com/xmltodict/>`_:\n\n.. code-block:: shell\n\n   \u23f5 pip3 install tconf[xml]  #\u00a0or\n   \u23f5 pip3 install xmltodict\n\n   \u23f5 cat test.xml\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <root>\n        <an_option>true</an_option>\n        <a_null2/>\n        <main>\n            <jpeg_quality>96</jpeg_quality>\n    # ~snip~\n\n.. code-block:: python\n\n    >>> cfg.main.jpeg_quality\n    96\n    >>> cfg['main.jpeg_quality']\n    96\n    >>> cfg.a_null2\n        # implied None\n    >>> cfg.an_option\n    True\n\n\nThis Adapter is kinda weak so far,\ncould use a rewrite.\n\n**Limitations:**\n\n- Throws out the root element for parity with other source types.\n\n- Finds only the first node (tag) at each level due to a dictionary-like\n  implementation.\n\n- XML attributes are not currently reachable.\u00a0 :-/\n\n\nStrict YAML\n~~~~~~~~~~~~~~\n\nA much safer, simpler subset of YAML, which requires the\n`strictyaml <https://hitchdev.com/strictyaml/>`_\nmodule:\n\n.. code-block:: shell\n\n   \u23f5 pip3 install tconf[yaml]  #\u00a0or\n   \u23f5 pip3 install strictyaml\n\n   \u23f5 cat test.yaml\n    an_option: true\n    a_null: null\n\n    main:\n        jpeg_quality: 96\n    # snip\n\nSee JSON\u00a0above for similar Python snippet.\n\n\nOthers\n~~~~~~~~~~~~~~\n\nIt's trivial to add an adapter for other sources and file formats.\nFirst subclass ``adapters._Adapter`` and add an instance to the sources list.\nThere is an ``file_adapter_map`` in the adapters module root to register file\nextensions to avoid having to pass an instance every time, if desired.\n\nTip: Additionally,\npassing adapters into the source list manually can also be used to give an\nAdapter different arguments than it would normally get.\n\nSee the next section for an example,\nand *\"use the source, Luke!\"*\n\n\nArgumentParser\n~~~~~~~~~~~~~~~~\n\nYou may have been thinking, what about the command-line?\nGood news,\nthere's an ArgumentParser subclass available if you'd like **all** options\npresented auto-magically.\nTypes and parameters are passed to ArgumentParser through annotations of the\n``AppSchema`` object:\n\n.. code-block:: python\n\n    # appy.py\n    from tconf import TurtleConfig, TurtleArgumentParser # \ud83d\udc40\n\n    class AppSchema:\n        # snip\u2026\n        class main:\n            # how to add a type via annotation,\n            # simple types are already detected however:\n            jpeg_quality: int = 95\n\n            # Also use annotations to pass a dictionary of\n            # kwargs to ArgParser, w/o descriptive help text:\n            jpeg_quality: dict(  # \ud83d\udc40\n                type=int,\n                desc='The jpeg quality level',\n            ) = 95\n\n    tcfg = TurtleConfig(\n        'AppyMcApp',\n        sources = (\n            TurtleArgumentParser(AppSchema),  # \ud83d\udc40\n            # environment, config files, etc\u2026\n            AppSchema,\n        ),\n    )\n\n\nNext, give it a try:\n\n.. code-block:: shell\n\n   \u23f5 appy.py -h\n\n    usage: appy.py [-h] [--a-simple-option] [--main-jpeg-quality I]\n                   [--main-sync-dates-to-filesystem] [--main-work-in-place]\n                   [--rotate-resample S] [--sort-template S] [--specific-name S]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --a-simple-option     \ud83d\udc22 (False, sets True)\n      --main-jpeg-quality I \ud83d\udc22 The jpeg quality level (int)\n      --main-sync-dates-to\u2026 \ud83d\udc22 (True, sets False)\n      --main-work-in-place  \ud83d\udc22 (False, sets True)\n      --rotate-resample S   \ud83d\udc22 (str)\n      --sort-template S     \ud83d\udc22 (str)\n      --specific-name S     \ud83d\udc22 (str)\n\n\nOption help text can be set directly in the annotation with ``help='\u2026'``.\nTo use a template for help based on a given description and auto-detected type,\nuse ``desc='\u2026'`` instead.\nThe template is configurable as well via TurtleArgumentParser kwargs.\n\n**Hiding Options:**\n\nOptions shown by an ArgumentParser can be hidden by passing the\n``help=argparse.SUPPRESS``\nvalue via the kwargs annotation to the option.\n\nGiven enough options,\neventually the display of every possible option is too much,\nand suppression gets tedious.\nWhen something simpler to be presented to the end user is preferred,\nthis also works as you'd expect:\n\n.. code-block:: python\n\n    from argparse import ArgumentParser\n\n    parser = ArgumentParser()\n    parser.add_argument(\n        '--quality', default=cfg['main.jpeg_quality'],\n    )\n\nThen, use ``args`` instead of ``cfg`` afterward for the options that take\nprecedence.\nRemember\u2014dots in an options string are presented as underscores in the\nArgumentParser Namespace,\nand dashes on the command-line:\n\n.. code-block:: python\n\n    print('quality:', args.main_jpeg_quality)\n\n\nMisc\n---------\n\nPerformance\n~~~~~~~~~~~~~~~\n\n*\"Why yes, it's a racing Turtle.\"*\n\nThe ``TurtleConfig`` object caches results so it doesn't have to go crawling\nthrough multiple files to find the value every time.\nSo don't get fancy with changing the environment on the fly,\nor editing config files unless you've cleared the cache with::\n\n    cfg.clear_turtle_cache()\n\n\n.. ~ After you're done with the ``TurtleConfig`` object,\n.. ~ it can be deleted if needed to recycle the memory it's using.\n\n\nExceptions\n~~~~~~~~~~~~~~~\n\nThese are thrown when a error occurs.\n\nAccess errors, say you've passed a bad name not found anywhere:\n\n- ``AttributeError``, \u00a0*attribute interface*\n- ``KeyError``, \u00a0*dict interface*\n\nOption value errors, when the value returned is bogus:\n\n- ``ValueError``, \u00a0*wrong value in this context*\n- ``SyntaxError``, \u00a0*string unable to be evaluated*\n- ``TypeError``, \u00a0*wrong type returned*\n\n\n*Ob-la-di ob-la-da life goes on bra\u2026*\n\n\nTo Do:\n~~~~~~~~~~~~~~~\n\nCandidates for implementation:\n\n- TOML\n- ``.env`` files\n- Windows registry\n\n\nLicense\n~~~~~~~~~~~~~~~\n\nReleased under the LGPL, version 3+.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mixmastamyk/tconf", "keywords": "configuration cascade cascading ini conf yaml xml environment", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "tconf", "package_url": "https://pypi.org/project/tconf/", "platform": "", "project_url": "https://pypi.org/project/tconf/", "project_urls": {"Homepage": "https://github.com/mixmastamyk/tconf"}, "release_url": "https://pypi.org/project/tconf/0.58/", "requires_dist": null, "requires_python": "", "summary": "It's turtles all the way down\u2026", "version": "0.58", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>Why yes, it\u2019s turtles all the way down \ud83d\udc22\ud83d\udc22\ud83d\udc22\ud83d\udc22\u2026</em></p>\n<p>This is an attempt at a cascading configuration library that I\u2019d like to use.\nThe basic idea is that you get a configuration object and read its properties\nfor the values of options you\u2019ve potentially defined all over the place, haha.</p>\n<p>Behind the scenes TurtleConfig will look at command-line parameters,\nthe environment,\nuser configuration files,\nhost/site configuration,\nand the app\u2019s own defaults to find the best value.\nTypically in that order,\nalthough you\u2019re welcome to modify that list of configuration sources to\nwhatever you see fit.</p>\n<p>Instead of the typical hodge-podge of custom code needed for that,\nsetting up \u201cTC\u201d looks a little something like this.\nFirst, you\u2019ll define a schema via a standard Python object.\nEither imported from a module,\nor locally via a class/object,\nwhich is easier to view here:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tconf</span> <span class=\"kn\">import</span> <span class=\"n\">TurtleConfig</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">schema</span> <span class=\"k\">as</span> <span class=\"nn\">AppSchema</span>  <span class=\"c1\"># or\u2026</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AppSchema</span><span class=\"p\">:</span>\n    <span class=\"n\">an_option</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># simple options</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">main</span><span class=\"p\">:</span>  <span class=\"c1\"># or perhaps a hierarchy</span>\n        <span class=\"n\">jpeg_quality</span> <span class=\"o\">=</span> <span class=\"mi\">95</span>\n        <span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"s1\">'/foo'</span>\n</pre>\n<p>Schema objects support type annotations and validation as well,\nbut don\u2019t need to be given most of the time.</p>\n<p>Next, create the TurtleConfig object:</p>\n<pre><span class=\"n\">cfg</span> <span class=\"o\">=</span> <span class=\"n\">TurtleConfig</span><span class=\"p\">(</span>\n    <span class=\"s1\">'AppyMcApp'</span><span class=\"p\">,</span>    <span class=\"c1\"># The app's name</span>\n    <span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"p\">(</span>     <span class=\"c1\"># A sequence of option sources</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">,</span>\n        <span class=\"s1\">'</span><span class=\"si\">{user_config_dir}</span><span class=\"s1\">/options.ini'</span><span class=\"p\">,</span>  <span class=\"c1\"># appdirs</span>\n        <span class=\"s1\">'</span><span class=\"si\">{site_config_dir}</span><span class=\"s1\">/options.ini'</span><span class=\"p\">,</span>  <span class=\"c1\"># appdirs</span>\n        <span class=\"s1\">'/path/to/options.xml'</span><span class=\"p\">,</span>  <span class=\"c1\"># or JSON, YAML, etc.</span>\n        <span class=\"n\">AppSchema</span><span class=\"p\">,</span>  <span class=\"c1\"># The schema/defaults object</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">ensure_paths</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># creates folders/files when needed</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Virtual Paths</strong></p>\n<p>Note,\nthe <tt>user_config_dir</tt> &amp; <tt>site_config_dir</tt> variables above are provided by\nthe\n<a href=\"https://pypi.org/project/appdirs/\" rel=\"nofollow\">appdirs</a> module\nso you don\u2019t have to worry about cross platform locations\u2014unless you want to.</p>\n<p>Tip:  You may want to start logging at <tt>DEBUG</tt>\u00a0level before loading TC,\nas it helps to visualize what is going on inside its shell.\nThe\n<a href=\"https://pypi.org/project/out/\" rel=\"nofollow\">out</a> module\nis perhaps the easiest way to do that:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span><span class=\"o\">,</span> <span class=\"nn\">out</span>\n<span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"s1\">'debug'</span> <span class=\"k\">if</span> <span class=\"s1\">'-d'</span> <span class=\"ow\">in</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span> <span class=\"k\">else</span> <span class=\"s1\">'info'</span><span class=\"p\">)</span>\n</pre>\n<div id=\"try-it\">\n<h2>Try It!</h2>\n<p>First, install the small pure-python package, and off you go:</p>\n<pre>\u23f5 python3 -m pip install tconf\n</pre>\n<div id=\"interfaces\">\n<h3>Interfaces</h3>\n<p>Once loaded,\nthere are two interfaces to get at options,\nvia attributes or dictionary-like access:</p>\n<pre><span class=\"c1\"># Attribute interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">jpeg_quality</span>\n<span class=\"mi\">95</span>\n\n<span class=\"c1\"># Dictionary interface</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'main.jpeg_quality'</span><span class=\"p\">]</span>\n<span class=\"mi\">95</span>\n</pre>\n<p>Now, why would you use one form over the other?</p>\n<p>Well, the first (attribute interface) is easier to type, read,\nand the design I\u00a0originally wanted.\nHowever, it has limitations in a number of circumstances that are damn near\nimpossible to overcome,\nwhich you\u2019ll read about below.</p>\n<p>So the second (dictionary form) is generally preferred unless the app has\nsimple needs,\nsuch as a single-level configuration.\nAn editor \u201csnippet\u201d can mitigate the extra keystrokes.</p>\n</div>\n<div id=\"value-types\">\n<h3>Value Types</h3>\n<p>Some configuration sources are limited (in a good way)\u2020 in that they return\noption values only as strings.\nFor example, the environment, strict-yaml, and <tt>.ini</tt> files have string-only\nvalues.\nHowever, our app is likely to need real types,\nsuch as integers, booleans, or lists of strings, etc.\nWhat to do?</p>\n<p>Under TC,\nthe types of option values are required to be the same type as their schema\ndefaults,\nas defined in Python.\nRemember, defaults are found from the last class/module/object passed as a\nsource,\nthe <tt>AppSchema</tt>\nobject as seen in the example above.</p>\n<p>The default value types may be annotated,\notherwise the given default will be inspected for its type as a fallback.\nThis means you can skip having to write type annotations much of the time\nas they are inferred.</p>\n<p><strong>Points of interest:</strong></p>\n<ul>\n<li>Turtle will attempt to convert or \u201ccoerce\u201d string values gathered from a\nconfig source into the expected (annotated or inferred) non-string type.</li>\n<li>Values are then type checked via the\n<a href=\"https://pypi.org/project/typeguard/\" rel=\"nofollow\">typeguard</a> module.</li>\n<li>Currently, simple and compound Python types are supported:<ul>\n<li><tt>str, int, float, bool</tt></li>\n<li><tt>list, tuple, dict, set</tt></li>\n<li><tt>List, Tuple, Sequence, Dict, Set</tt> <em>(from le typing module)</em></li>\n<li><tt>Union, Any, Optional, etc.</tt> <em>(ditto)</em></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Annotations are required when complex, compound value types are needed,\nas defined with the stdlib <tt>typing</tt> module.</li>\n</ul>\n<ul>\n<li>Annotations may also support kwargs for an ArgumentParser, see below.</li>\n</ul>\n<p>\u2020 Conversion of types is better done in the application-layer than in the file\nformat to avoid unexpected edge-case bugs like\n<a href=\"https://hitchdev.com/strictyaml/why/implicit-typing-removed/\" rel=\"nofollow\">\u201cthe Norway problem.\u201d</a></p>\n</div>\n</div>\n<div id=\"configuration-sources\">\n<h2>Configuration Sources</h2>\n<p>Each configuration source has an Adapter class to integrate the different\ninterfaces into one.\nAs mentioned,\nwhen looking for options,\nthe sources are searched in order from\ntop to bottom,\nfront to back,\nuntil a suitable value is found.\nIf an option is not found in any source,\nan <tt>AttributeError</tt> or <tt>KeyError</tt>\n(depending on interface)\nis raised to ensure bugs are found early.</p>\n<div id=\"environment-variables\">\n<h3>Environment Variables</h3>\n<p>Perhaps you\u2019d like to override options with environment variables.\nThis is what it looks like:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'PY_APPYMCAPP.MAIN.JPEG_QUALITY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'94'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'main.jpeg_quality'</span><span class=\"p\">]</span>\n<span class=\"mi\">94</span>\n</pre>\n<p>An environment variable matching one of our configuration values\nis uppercase and prefixed with\n<tt>PY_</tt> and the application name.\nBoth parts of the prefix are able to be modified by modifying the app_name\nand/or passing an\n<tt><span class=\"pre\">env_prefix='\u2026'</span></tt> to the <tt>TurtleConfig</tt> constructor.</p>\n<p><strong>Limitations:</strong></p>\n<p>Due to limits with how the environment adapter works,\nit cannot provide hierarchical access to settings via the attribute interface.</p>\n<p>The reason is that the attributes are evaluated left to right.\nAt access time,\nthe object doesn\u2019t yet have enough information to know if it should return the\nfinal value or continue down the attribute chain.\nIt could decide on one or the other,\nleading to a number of broken cases from either decision.\nBare attributes <em>do</em> work with the environment when options are kept to a\nsingle-level, however.\nAs mentioned previously,\ndictionary-style access (shown above) works consistently.</p>\n</div>\n<div id=\"configparser\">\n<h3>ConfigParser</h3>\n<p><tt>.ini</tt> files have two levels by design and are great for config files.\nTherefore they do work hierarchically by default and would typically require\nexactly two levels.</p>\n<p>There is one exception for convenience, however.\nIf a single-level option is requested,\nthe section <tt>[main]</tt> (configurable also) is tried as a fallback.\nThis is so one can use a single-level as well as a dual-level config with\nConfigParser,\nsimply by putting root options under <tt>[main]</tt>:</p>\n<pre>\u23f5 cat test.ini\n<span class=\"o\">[</span>main<span class=\"o\">]</span>\n<span class=\"nv\">jpeg_quality</span> <span class=\"o\">=</span> <span class=\"m\">96</span>\n<span class=\"c1\"># snip</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">jpeg_quality</span>\n<span class=\"mi\">96</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'main.jpeg_quality'</span><span class=\"p\">]</span>\n<span class=\"mi\">96</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">jpeg_quality</span>  <span class=\"c1\">#\u00a0looks in [main] also</span>\n<span class=\"mi\">96</span>\n</pre>\n</div>\n<div id=\"json\">\n<h3>JSON</h3>\n<p>JSON is not a great format for humans to edit,\nbut still relatively common as configuration:</p>\n<pre>\u23f5 cat test.json\n <span class=\"o\">{</span>   <span class=\"s2\">\"an_option\"</span>: true,\n     <span class=\"s2\">\"main\"</span>: <span class=\"o\">{</span>\n         <span class=\"s2\">\"jpeg_quality\"</span>: <span class=\"m\">96</span>,\n <span class=\"c1\"># ~snip~</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">jpeg_quality</span>\n<span class=\"mi\">96</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'main.jpeg_quality'</span><span class=\"p\">]</span>\n<span class=\"mi\">96</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">does_not_exist</span>\n<span class=\"c1\"># \u2026</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">'does_not_exist'</span> <span class=\"ow\">not</span> <span class=\"n\">found</span><span class=\"o\">.</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">an_option</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Compound data types are better encoded in the JSON itself\nrather than trying to smash \u201cPyON\u201d into strings.</p>\n</div>\n<div id=\"xml\">\n<h3>XML</h3>\n<p>Requires\n<a href=\"https://hitchdev.com/xmltodict/\" rel=\"nofollow\">xmltodict</a>:</p>\n<pre>\u23f5 pip3 install tconf<span class=\"o\">[</span>xml<span class=\"o\">]</span>  <span class=\"c1\">#\u00a0or\n</span>\u23f5 pip3 install xmltodict\n\n\u23f5 cat test.xml\n &lt;?xml <span class=\"nv\">version</span><span class=\"o\">=</span><span class=\"s2\">\"1.0\"</span> <span class=\"nv\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"UTF-8\"</span>?&gt;\n &lt;root&gt;\n     &lt;an_option&gt;true&lt;/an_option&gt;\n     &lt;a_null2/&gt;\n     &lt;main&gt;\n         &lt;jpeg_quality&gt;96&lt;/jpeg_quality&gt;\n <span class=\"c1\"># ~snip~</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">jpeg_quality</span>\n<span class=\"mi\">96</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'main.jpeg_quality'</span><span class=\"p\">]</span>\n<span class=\"mi\">96</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">a_null2</span>\n    <span class=\"c1\"># implied None</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">an_option</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>This Adapter is kinda weak so far,\ncould use a rewrite.</p>\n<p><strong>Limitations:</strong></p>\n<ul>\n<li>Throws out the root element for parity with other source types.</li>\n<li>Finds only the first node (tag) at each level due to a dictionary-like\nimplementation.</li>\n<li>XML attributes are not currently reachable.\u00a0 :-/</li>\n</ul>\n</div>\n<div id=\"strict-yaml\">\n<h3>Strict YAML</h3>\n<p>A much safer, simpler subset of YAML, which requires the\n<a href=\"https://hitchdev.com/strictyaml/\" rel=\"nofollow\">strictyaml</a>\nmodule:</p>\n<pre>\u23f5 pip3 install tconf<span class=\"o\">[</span>yaml<span class=\"o\">]</span>  <span class=\"c1\">#\u00a0or\n</span>\u23f5 pip3 install strictyaml\n\n\u23f5 cat test.yaml\n an_option: <span class=\"nb\">true</span>\n a_null: null\n\n main:\n     jpeg_quality: <span class=\"m\">96</span>\n <span class=\"c1\"># snip</span>\n</pre>\n<p>See JSON\u00a0above for similar Python snippet.</p>\n</div>\n<div id=\"others\">\n<h3>Others</h3>\n<p>It\u2019s trivial to add an adapter for other sources and file formats.\nFirst subclass <tt>adapters._Adapter</tt> and add an instance to the sources list.\nThere is an <tt>file_adapter_map</tt> in the adapters module root to register file\nextensions to avoid having to pass an instance every time, if desired.</p>\n<p>Tip: Additionally,\npassing adapters into the source list manually can also be used to give an\nAdapter different arguments than it would normally get.</p>\n<p>See the next section for an example,\nand <em>\u201cuse the source, Luke!\u201d</em></p>\n</div>\n<div id=\"argumentparser\">\n<h3>ArgumentParser</h3>\n<p>You may have been thinking, what about the command-line?\nGood news,\nthere\u2019s an ArgumentParser subclass available if you\u2019d like <strong>all</strong> options\npresented auto-magically.\nTypes and parameters are passed to ArgumentParser through annotations of the\n<tt>AppSchema</tt> object:</p>\n<pre><span class=\"c1\"># appy.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tconf</span> <span class=\"kn\">import</span> <span class=\"n\">TurtleConfig</span><span class=\"p\">,</span> <span class=\"n\">TurtleArgumentParser</span> <span class=\"c1\"># \ud83d\udc40</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AppSchema</span><span class=\"p\">:</span>\n    <span class=\"c1\"># snip\u2026</span>\n    <span class=\"k\">class</span> <span class=\"nc\">main</span><span class=\"p\">:</span>\n        <span class=\"c1\"># how to add a type via annotation,</span>\n        <span class=\"c1\"># simple types are already detected however:</span>\n        <span class=\"n\">jpeg_quality</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">95</span>\n\n        <span class=\"c1\"># Also use annotations to pass a dictionary of</span>\n        <span class=\"c1\"># kwargs to ArgParser, w/o descriptive help text:</span>\n        <span class=\"n\">jpeg_quality</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>  <span class=\"c1\"># \ud83d\udc40</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n            <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s1\">'The jpeg quality level'</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">95</span>\n\n<span class=\"n\">tcfg</span> <span class=\"o\">=</span> <span class=\"n\">TurtleConfig</span><span class=\"p\">(</span>\n    <span class=\"s1\">'AppyMcApp'</span><span class=\"p\">,</span>\n    <span class=\"n\">sources</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">TurtleArgumentParser</span><span class=\"p\">(</span><span class=\"n\">AppSchema</span><span class=\"p\">),</span>  <span class=\"c1\"># \ud83d\udc40</span>\n        <span class=\"c1\"># environment, config files, etc\u2026</span>\n        <span class=\"n\">AppSchema</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Next, give it a try:</p>\n<pre>\u23f5 appy.py -h\n\n usage: appy.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--a-simple-option<span class=\"o\">]</span> <span class=\"o\">[</span>--main-jpeg-quality I<span class=\"o\">]</span>\n                <span class=\"o\">[</span>--main-sync-dates-to-filesystem<span class=\"o\">]</span> <span class=\"o\">[</span>--main-work-in-place<span class=\"o\">]</span>\n                <span class=\"o\">[</span>--rotate-resample S<span class=\"o\">]</span> <span class=\"o\">[</span>--sort-template S<span class=\"o\">]</span> <span class=\"o\">[</span>--specific-name S<span class=\"o\">]</span>\n\n optional arguments:\n   -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n   --a-simple-option     \ud83d\udc22 <span class=\"o\">(</span>False, sets True<span class=\"o\">)</span>\n   --main-jpeg-quality I \ud83d\udc22 The jpeg quality level <span class=\"o\">(</span>int<span class=\"o\">)</span>\n   --main-sync-dates-to\u2026 \ud83d\udc22 <span class=\"o\">(</span>True, sets False<span class=\"o\">)</span>\n   --main-work-in-place  \ud83d\udc22 <span class=\"o\">(</span>False, sets True<span class=\"o\">)</span>\n   --rotate-resample S   \ud83d\udc22 <span class=\"o\">(</span>str<span class=\"o\">)</span>\n   --sort-template S     \ud83d\udc22 <span class=\"o\">(</span>str<span class=\"o\">)</span>\n   --specific-name S     \ud83d\udc22 <span class=\"o\">(</span>str<span class=\"o\">)</span>\n</pre>\n<p>Option help text can be set directly in the annotation with <tt><span class=\"pre\">help='\u2026'</span></tt>.\nTo use a template for help based on a given description and auto-detected type,\nuse <tt><span class=\"pre\">desc='\u2026'</span></tt> instead.\nThe template is configurable as well via TurtleArgumentParser kwargs.</p>\n<p><strong>Hiding Options:</strong></p>\n<p>Options shown by an ArgumentParser can be hidden by passing the\n<tt>help=argparse.SUPPRESS</tt>\nvalue via the kwargs annotation to the option.</p>\n<p>Given enough options,\neventually the display of every possible option is too much,\nand suppression gets tedious.\nWhen something simpler to be presented to the end user is preferred,\nthis also works as you\u2019d expect:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">argparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n    <span class=\"s1\">'--quality'</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">cfg</span><span class=\"p\">[</span><span class=\"s1\">'main.jpeg_quality'</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Then, use <tt>args</tt> instead of <tt>cfg</tt> afterward for the options that take\nprecedence.\nRemember\u2014dots in an options string are presented as underscores in the\nArgumentParser Namespace,\nand dashes on the command-line:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'quality:'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">main_jpeg_quality</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"misc\">\n<h2>Misc</h2>\n<div id=\"performance\">\n<h3>Performance</h3>\n<p><em>\u201cWhy yes, it\u2019s a racing Turtle.\u201d</em></p>\n<p>The <tt>TurtleConfig</tt> object caches results so it doesn\u2019t have to go crawling\nthrough multiple files to find the value every time.\nSo don\u2019t get fancy with changing the environment on the fly,\nor editing config files unless you\u2019ve cleared the cache with:</p>\n<pre>cfg.clear_turtle_cache()\n</pre>\n</div>\n<div id=\"exceptions\">\n<h3>Exceptions</h3>\n<p>These are thrown when a error occurs.</p>\n<p>Access errors, say you\u2019ve passed a bad name not found anywhere:</p>\n<ul>\n<li><tt>AttributeError</tt>, \u00a0<em>attribute interface</em></li>\n<li><tt>KeyError</tt>, \u00a0<em>dict interface</em></li>\n</ul>\n<p>Option value errors, when the value returned is bogus:</p>\n<ul>\n<li><tt>ValueError</tt>, \u00a0<em>wrong value in this context</em></li>\n<li><tt>SyntaxError</tt>, \u00a0<em>string unable to be evaluated</em></li>\n<li><tt>TypeError</tt>, \u00a0<em>wrong type returned</em></li>\n</ul>\n<p><em>Ob-la-di ob-la-da life goes on bra\u2026</em></p>\n</div>\n<div id=\"to-do\">\n<h3>To Do:</h3>\n<p>Candidates for implementation:</p>\n<ul>\n<li>TOML</li>\n<li><tt>.env</tt> files</li>\n<li>Windows registry</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Released under the LGPL, version 3+.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6958714, "releases": {"0.56": [{"comment_text": "", "digests": {"md5": "4aa5c6e742c84e3d8d10d2fa1fa8e599", "sha256": "db2a6037aed3ebb6297c5f4c7e907c4ff82bd40b16ad068ddd7bcbc8e259e700"}, "downloads": -1, "filename": "tconf-0.56-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4aa5c6e742c84e3d8d10d2fa1fa8e599", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 16566, "upload_time": "2020-01-10T09:07:26", "upload_time_iso_8601": "2020-01-10T09:07:26.474525Z", "url": "https://files.pythonhosted.org/packages/d3/bc/00066b1dda3a056c33571a45de543fbf834377a85a1ff456aeaf436d2fa8/tconf-0.56-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15c8e2265a97b327002399ad8b3197e1", "sha256": "f19695c39c13dcdd05edd7a38198007fb68c9b1195ea22d180bd238eeac97e70"}, "downloads": -1, "filename": "tconf-0.56.tar.gz", "has_sig": false, "md5_digest": "15c8e2265a97b327002399ad8b3197e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18038, "upload_time": "2020-01-10T09:07:23", "upload_time_iso_8601": "2020-01-10T09:07:23.870362Z", "url": "https://files.pythonhosted.org/packages/59/c6/c01894fef6e1198973f7ebc3ca744c75be352e884613d4e8c14109481657/tconf-0.56.tar.gz", "yanked": false}], "0.57": [{"comment_text": "", "digests": {"md5": "ed8507ccecf87b3a033a4726db352956", "sha256": "8d7a3d06b7814072113acf2072263b8517a954a220761c93deb61019bdf86341"}, "downloads": -1, "filename": "tconf-0.57-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed8507ccecf87b3a033a4726db352956", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 16550, "upload_time": "2020-01-12T00:29:18", "upload_time_iso_8601": "2020-01-12T00:29:18.401176Z", "url": "https://files.pythonhosted.org/packages/ec/42/c0f40e109348d8ff943b8d27d04c7f9638a11efdbbe5c560c7dd0c307570/tconf-0.57-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9efb430ceb1414ac9824b211d806610f", "sha256": "32d05a2f3911cdf0dbe74967ee803370e53ac315f644719f6ead55bc173c03fa"}, "downloads": -1, "filename": "tconf-0.57.tar.gz", "has_sig": false, "md5_digest": "9efb430ceb1414ac9824b211d806610f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17971, "upload_time": "2020-01-12T00:29:16", "upload_time_iso_8601": "2020-01-12T00:29:16.157982Z", "url": "https://files.pythonhosted.org/packages/4f/74/a8f6a56b3fe11fc740c1e721c5ebe8724278453025fe0a8488b0a855b29d/tconf-0.57.tar.gz", "yanked": false}], "0.58": [{"comment_text": "", "digests": {"md5": "d354eada82504d8ab7cf1c554c272f0e", "sha256": "84d84c64edec4a106f42b1adf8c5945f63fe2e69b7ffd41d5b93b9e64cac50a2"}, "downloads": -1, "filename": "tconf-0.58-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d354eada82504d8ab7cf1c554c272f0e", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 16694, "upload_time": "2020-04-06T01:34:42", "upload_time_iso_8601": "2020-04-06T01:34:42.612771Z", "url": "https://files.pythonhosted.org/packages/55/6e/84eb93b665ec30d1e1c9de1f2b2a54804fa0221ec83be84c356f6654b591/tconf-0.58-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8136bf76b7ba88f1f009e5bd42f24504", "sha256": "d9912edb106675f6e42fc61cda85e9569a6510863e0fa923f35e76d9a8748080"}, "downloads": -1, "filename": "tconf-0.58.tar.gz", "has_sig": false, "md5_digest": "8136bf76b7ba88f1f009e5bd42f24504", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18311, "upload_time": "2020-04-06T01:34:40", "upload_time_iso_8601": "2020-04-06T01:34:40.469419Z", "url": "https://files.pythonhosted.org/packages/41/d6/82a942f9299e6821888b2055aa8f0b7f80dd086f8bc92f2d8606bc06c0fa/tconf-0.58.tar.gz", "yanked": false}], "0.59a1": [{"comment_text": "", "digests": {"md5": "62783ce802affd7c417a20d1b895390f", "sha256": "164acdf6d7e81b0b888bf9e655c7ca0937ad26c9b16eacbd47762cede9927372"}, "downloads": -1, "filename": "tconf-0.59a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "62783ce802affd7c417a20d1b895390f", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 16906, "upload_time": "2020-04-06T02:06:01", "upload_time_iso_8601": "2020-04-06T02:06:01.532182Z", "url": "https://files.pythonhosted.org/packages/d9/b4/aaa60d5595a095d889129af27ecab520eca0b49af7af990f9235c038c392/tconf-0.59a1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e33056b46494350d9ac80132396a119e", "sha256": "a233ef27ed441d97e0ccdfbfd77e6a0163c5e1ead06fa1c3226b31bfa8e39d36"}, "downloads": -1, "filename": "tconf-0.59a1.tar.gz", "has_sig": false, "md5_digest": "e33056b46494350d9ac80132396a119e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18692, "upload_time": "2020-04-06T02:05:59", "upload_time_iso_8601": "2020-04-06T02:05:59.279792Z", "url": "https://files.pythonhosted.org/packages/8e/f5/14253e61af3a7c20611a47f5120021dcdcd7c6d9c82555924159f1507344/tconf-0.59a1.tar.gz", "yanked": false}], "0.59a2": [{"comment_text": "", "digests": {"md5": "9bef1306595303c0f3912cd0f5b46f6b", "sha256": "a6a5eb386ef12fadb5bf94797ae33dfa9d92d7656a6afeba7ffd9d7b5b3367c7"}, "downloads": -1, "filename": "tconf-0.59a2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9bef1306595303c0f3912cd0f5b46f6b", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 17017, "upload_time": "2020-04-06T02:17:25", "upload_time_iso_8601": "2020-04-06T02:17:25.272123Z", "url": "https://files.pythonhosted.org/packages/d0/d8/3b73ed15ad836058ba446b9389523f57eca2faf8ad23db51f55b2a9b6def/tconf-0.59a2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3daa91515c8ed19b24a6ad8ebe4d8ca6", "sha256": "018833a7de43b41f407a0d55f197cdc146cbe3b7161034c01ebe310b7abb7682"}, "downloads": -1, "filename": "tconf-0.59a2.tar.gz", "has_sig": false, "md5_digest": "3daa91515c8ed19b24a6ad8ebe4d8ca6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18921, "upload_time": "2020-04-06T02:17:23", "upload_time_iso_8601": "2020-04-06T02:17:23.129245Z", "url": "https://files.pythonhosted.org/packages/c7/2c/14fd5e0e95617eb9bb7af6dec81a4e3d253be3935a30d62cb7b0afabbe66/tconf-0.59a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d354eada82504d8ab7cf1c554c272f0e", "sha256": "84d84c64edec4a106f42b1adf8c5945f63fe2e69b7ffd41d5b93b9e64cac50a2"}, "downloads": -1, "filename": "tconf-0.58-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d354eada82504d8ab7cf1c554c272f0e", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 16694, "upload_time": "2020-04-06T01:34:42", "upload_time_iso_8601": "2020-04-06T01:34:42.612771Z", "url": "https://files.pythonhosted.org/packages/55/6e/84eb93b665ec30d1e1c9de1f2b2a54804fa0221ec83be84c356f6654b591/tconf-0.58-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8136bf76b7ba88f1f009e5bd42f24504", "sha256": "d9912edb106675f6e42fc61cda85e9569a6510863e0fa923f35e76d9a8748080"}, "downloads": -1, "filename": "tconf-0.58.tar.gz", "has_sig": false, "md5_digest": "8136bf76b7ba88f1f009e5bd42f24504", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18311, "upload_time": "2020-04-06T01:34:40", "upload_time_iso_8601": "2020-04-06T01:34:40.469419Z", "url": "https://files.pythonhosted.org/packages/41/d6/82a942f9299e6821888b2055aa8f0b7f80dd086f8bc92f2d8606bc06c0fa/tconf-0.58.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:21 2020"}