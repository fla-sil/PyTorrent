{"info": {"author": "Andrew J. Young", "author_email": "andrewjunyoung1@gmail.com", "bugtrack_url": null, "classifiers": ["License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# MVL (many valued logic)\n\nMVL (many valued logic) is a flexible, expressive, and extensible python package\nwhich makes it easy to work with many valued logic systems: logic systems which\nuse more than 2, or infinite truth values, beyond \u00abTrue\u00bb and \u00abFalse\u00bb.\n\n|                |       | \n|----------------|-------|\n| Latest release | 0.2.0 |\n\n## Table of contents\n\n<!-- vim-markdown-toc GFM -->\n\n* [Problem statement](#problem-statement)\n  * [Example](#example)\n* [What does MVL do?](#what-does-mvl-do)\n  * [Example usage](#example-usage)\n* [Where to get it](#where-to-get-it)\n  * [PyPI (pip)](#pypi-pip)\n* [Features](#features)\n  * [Summary](#summary)\n  * [Supported logic systems](#supported-logic-systems)\n* [Usage examples](#usage-examples)\n  * [Importing and using 3 valued systems](#importing-and-using-3-valued-systems)\n  * [Creating n valued logical systems](#creating-n-valued-logical-systems)\n  * [Creating arbitrary logical values](#creating-arbitrary-logical-values)\n* [License](#license)\n* [Documentation](#documentation)\n* [Links](#links)\n\n<!-- vim-markdown-toc -->\n\n\n## Problem statement\nBy default, python doesn't provide any boolean infrastructure for values other\nthan \u00abTrue\u00bb and \u00abFalse\u00bb. This makes it verbose, difficult, or impossible to deal\nwith situations involving many valued logic.\n\n### Example\nTo demonstrate this limitation, we'll use an example in logic. Consider the\nsentence:\n\n```\nThe apple is red.\n```\n\nWe have an apple that's kinda redish yellow, or somewhere in the middle. So the\nanswer to this question is a very half-hearted \u00abmaybe?\u00bb.\n\nNow consider the sentence:\n\n```\nThe apple is red, and the apple is not red.\n```\n\nIn 2 valued logic, this would always be false. But our apple is maybe red, but\nalso maybe not red.\n\n3 valued logic has a solution to problems like this, where we have ranges of\ntruth values between true and false. Say our answer to the first question is `maybe` then our answer to the second question can be `maybe and maybe`. So our\nfinal answer to the second question is `maybe`.\n\nIn real life, SQL uses 3 valued logic to implement its logic. MVL provides an\neasy way to implement these sort of checks in python.\n\n\n## What does MVL do?\n\nMVL provides classes and functions which implement 3, n, or \u221e valued logic which\ncan be imported and used in code bases. It provides conversion between floats\nand logical values to allow different degrees of truthfulness, provides a\nlibrary of default operators, and allows for the implementation of custom\noperators which can be used to analyze logical statements of arbitrary values.\n\n### Example usage\nGoing back to our apple example, to do logic on keys that may be pressed, we\nneed more than just \u00abtrue\u00bb and \u00abfalse\u00bb values to deal with this -- we need 3\nvalued logic.\n\nWriting a logical condition for the second sentence will look like this:\n\n```\nif (priest.bool_(\n    priest.or_(is_red(apple), priest.not_(is_red(apple)))\n)):\n    do something\n```\n\nLet's break this down.\n\nFirst, imagine that `is_red(apple)` is some function defined somewhere else\nthat returns one of 3 logic values telling us if `apple` is red.\n\nWe're going to use priest logic, which just means that we use 3 boolean\nvalues, and that anything that's not \u00abfalse\u00bb will evaluate to \u00abtrue\u00bb when we\nconvert it into python's 2 valued boolean system. The 3 values we use are\n(\u00abpriest.f\u00bb for \u00abfalse\u00bb; \u00abpriest.u\u00bb for \u00abunknown\u00bb; and \u00abpriest.t\u00bb for \u00abtrue\u00bb).\n\n`if(...)` is a normal python `if` statement. This needs a normal, 2 valued\npython boolean in order to work. We'll come back to this.\n\n`priest.bool_(...)` will convert whatever our 3 valued logic value is into a 2\nvalued python boolean. Exactly how this is defined depends a on the logic system\nwe choose to use. We've used priest logic, so \u00abpriest.u\u00bb and \u00abpriest.t\u00bb will\nevaluate to python's built-in \u00abTrue\u00bb, and \u00abpriest.f\u00bb will evaluate to python's\nbuilt-in \u00abFalse\u00bb.\n\nThere's more to this function going on behind the scenes. You won't need it for\nthis example, but you can read about it in the documentation if you're\ninterested.\n\nThe rest of the example is logical statements made up of comparisons between the\nkey state (pressed or not pressed) and the priest logic value we want them to\nbe. This will give us a result as a float between 0 and 1.\n\nThe result is passed into `priest.bool_` to give a python boolean, which is\npassed into the `if` statement to decide whether or not to output a capital\nletter.\n\n\n## Where to get it\n\nThe source code is hosted on github at https://github.com/andrewjunyoung/mvl.\n\n### PyPI (pip)\n\n\nTo install mvl through pip, open a command line interface and run\n\n```\n$ pip install mvl\n```\n\n\n## Features\n\n### Summary\n- Logical systems which can use 3, n, or infinite logic values.\n- A rich library of logical operators for 3, n, and \u221e valued logic.\n- Conversion between floats and logical values.\n\n### Supported logic systems\nThe following 3 valued logic systems are supported by MVL:\n  - Bochvar\n  - Kleene\n  - Priest\n\nThe following n valued logic systems are supported by MVL:\n  - \u0141ukasiewicz\n  - G\u00f6del (under the name \u00abgoedel\u00bb)\n  - Product logic\n  - Post logic\n\nThe following systems are planned for future support:\n  - Belnap's 4 valued logic\n\n\n## Usage examples\n\nUsing MVL is designed to integrate with existing python infrastructure as much\nas possible. Example usages of kleene and lukasiewicz logic are given below.\n\n### Importing and using 3 valued systems\n\n```\n>>> from mvl import kleene\n>>> kleene.t\nLukasiewiczLogicValue.True\n>>> kleene.and_(k.t, k.u)\n0.5\n>>> kleene.or_(k.u, k.u)\n0.5\n>>> kleene.implies(k.u, k.u)\n0.5\n>>> kleene.implies(k.f, k.u)\n1.0\n```\n\n### Creating n valued logical systems\n\n```\n>>> from mvl.lukasiewicz import *\n>>> ls = LogicSystem(5, LukasiewiczLogicValue)\n>>> ls.values\n[LukasiewiczLogicValue(0.0), LukasiewiczLogicValue(0.25), LukasiewiczLogicValue(0.5), LukasiewiczLogicValue(0.75), LukasiewiczLogicValue(1.0)]\n>>> t = ls.values[4]\n>>> bool(t)\nTrue\n>>> bool(ls.values[3])\nFalse\n```\n\n### Creating arbitrary logical values\n\n```\n>>> from mvl.lukasiewicz import *\n>>> x = LukasiewiczLogicValue(0.123)\n>>> x\nLukasiewiczLogicValue(0.123)\n>>> bool(x)\nFalse\n>>> s_and(x, 1)\n0.123\n```\n\n\n## License\n\nUnlicense. \n\n\n## Documentation\n\nThe sphinx documentation can be generated and opened as follows:\n\n1. Open a command line.\n1. Navigate to the \u00abdocs\u00bb directory.\n1. Run the command `make html`\n\nIt can be read by opening the file `<project_path>/docs/build/html/index.html`.\n\n\n## Links\n\n| Resource                                |           |\n|-----------------------------------------|-----------|\n| How do I know what logic system to use? | Todo      |\n| Documentation                           | Todo      |\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andrewjunyoung/mvl", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mvl", "package_url": "https://pypi.org/project/mvl/", "platform": "", "project_url": "https://pypi.org/project/mvl/", "project_urls": {"Homepage": "https://github.com/andrewjunyoung/mvl"}, "release_url": "https://pypi.org/project/mvl/0.2.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A package which implements various systems of n valued logic.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MVL (many valued logic)</h1>\n<p>MVL (many valued logic) is a flexible, expressive, and extensible python package\nwhich makes it easy to work with many valued logic systems: logic systems which\nuse more than 2, or infinite truth values, beyond \u00abTrue\u00bb and \u00abFalse\u00bb.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Latest release</td>\n<td>0.2.0</td>\n</tr></tbody></table>\n<h2>Table of contents</h2>\n\n<ul>\n<li><a href=\"#problem-statement\" rel=\"nofollow\">Problem statement</a>\n<ul>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n</ul>\n</li>\n<li><a href=\"#what-does-mvl-do\" rel=\"nofollow\">What does MVL do?</a>\n<ul>\n<li><a href=\"#example-usage\" rel=\"nofollow\">Example usage</a></li>\n</ul>\n</li>\n<li><a href=\"#where-to-get-it\" rel=\"nofollow\">Where to get it</a>\n<ul>\n<li><a href=\"#pypi-pip\" rel=\"nofollow\">PyPI (pip)</a></li>\n</ul>\n</li>\n<li><a href=\"#features\" rel=\"nofollow\">Features</a>\n<ul>\n<li><a href=\"#summary\" rel=\"nofollow\">Summary</a></li>\n<li><a href=\"#supported-logic-systems\" rel=\"nofollow\">Supported logic systems</a></li>\n</ul>\n</li>\n<li><a href=\"#usage-examples\" rel=\"nofollow\">Usage examples</a>\n<ul>\n<li><a href=\"#importing-and-using-3-valued-systems\" rel=\"nofollow\">Importing and using 3 valued systems</a></li>\n<li><a href=\"#creating-n-valued-logical-systems\" rel=\"nofollow\">Creating n valued logical systems</a></li>\n<li><a href=\"#creating-arbitrary-logical-values\" rel=\"nofollow\">Creating arbitrary logical values</a></li>\n</ul>\n</li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#documentation\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"#links\" rel=\"nofollow\">Links</a></li>\n</ul>\n\n<h2>Problem statement</h2>\n<p>By default, python doesn't provide any boolean infrastructure for values other\nthan \u00abTrue\u00bb and \u00abFalse\u00bb. This makes it verbose, difficult, or impossible to deal\nwith situations involving many valued logic.</p>\n<h3>Example</h3>\n<p>To demonstrate this limitation, we'll use an example in logic. Consider the\nsentence:</p>\n<pre><code>The apple is red.\n</code></pre>\n<p>We have an apple that's kinda redish yellow, or somewhere in the middle. So the\nanswer to this question is a very half-hearted \u00abmaybe?\u00bb.</p>\n<p>Now consider the sentence:</p>\n<pre><code>The apple is red, and the apple is not red.\n</code></pre>\n<p>In 2 valued logic, this would always be false. But our apple is maybe red, but\nalso maybe not red.</p>\n<p>3 valued logic has a solution to problems like this, where we have ranges of\ntruth values between true and false. Say our answer to the first question is <code>maybe</code> then our answer to the second question can be <code>maybe and maybe</code>. So our\nfinal answer to the second question is <code>maybe</code>.</p>\n<p>In real life, SQL uses 3 valued logic to implement its logic. MVL provides an\neasy way to implement these sort of checks in python.</p>\n<h2>What does MVL do?</h2>\n<p>MVL provides classes and functions which implement 3, n, or \u221e valued logic which\ncan be imported and used in code bases. It provides conversion between floats\nand logical values to allow different degrees of truthfulness, provides a\nlibrary of default operators, and allows for the implementation of custom\noperators which can be used to analyze logical statements of arbitrary values.</p>\n<h3>Example usage</h3>\n<p>Going back to our apple example, to do logic on keys that may be pressed, we\nneed more than just \u00abtrue\u00bb and \u00abfalse\u00bb values to deal with this -- we need 3\nvalued logic.</p>\n<p>Writing a logical condition for the second sentence will look like this:</p>\n<pre><code>if (priest.bool_(\n    priest.or_(is_red(apple), priest.not_(is_red(apple)))\n)):\n    do something\n</code></pre>\n<p>Let's break this down.</p>\n<p>First, imagine that <code>is_red(apple)</code> is some function defined somewhere else\nthat returns one of 3 logic values telling us if <code>apple</code> is red.</p>\n<p>We're going to use priest logic, which just means that we use 3 boolean\nvalues, and that anything that's not \u00abfalse\u00bb will evaluate to \u00abtrue\u00bb when we\nconvert it into python's 2 valued boolean system. The 3 values we use are\n(\u00abpriest.f\u00bb for \u00abfalse\u00bb; \u00abpriest.u\u00bb for \u00abunknown\u00bb; and \u00abpriest.t\u00bb for \u00abtrue\u00bb).</p>\n<p><code>if(...)</code> is a normal python <code>if</code> statement. This needs a normal, 2 valued\npython boolean in order to work. We'll come back to this.</p>\n<p><code>priest.bool_(...)</code> will convert whatever our 3 valued logic value is into a 2\nvalued python boolean. Exactly how this is defined depends a on the logic system\nwe choose to use. We've used priest logic, so \u00abpriest.u\u00bb and \u00abpriest.t\u00bb will\nevaluate to python's built-in \u00abTrue\u00bb, and \u00abpriest.f\u00bb will evaluate to python's\nbuilt-in \u00abFalse\u00bb.</p>\n<p>There's more to this function going on behind the scenes. You won't need it for\nthis example, but you can read about it in the documentation if you're\ninterested.</p>\n<p>The rest of the example is logical statements made up of comparisons between the\nkey state (pressed or not pressed) and the priest logic value we want them to\nbe. This will give us a result as a float between 0 and 1.</p>\n<p>The result is passed into <code>priest.bool_</code> to give a python boolean, which is\npassed into the <code>if</code> statement to decide whether or not to output a capital\nletter.</p>\n<h2>Where to get it</h2>\n<p>The source code is hosted on github at <a href=\"https://github.com/andrewjunyoung/mvl\" rel=\"nofollow\">https://github.com/andrewjunyoung/mvl</a>.</p>\n<h3>PyPI (pip)</h3>\n<p>To install mvl through pip, open a command line interface and run</p>\n<pre><code>$ pip install mvl\n</code></pre>\n<h2>Features</h2>\n<h3>Summary</h3>\n<ul>\n<li>Logical systems which can use 3, n, or infinite logic values.</li>\n<li>A rich library of logical operators for 3, n, and \u221e valued logic.</li>\n<li>Conversion between floats and logical values.</li>\n</ul>\n<h3>Supported logic systems</h3>\n<p>The following 3 valued logic systems are supported by MVL:</p>\n<ul>\n<li>Bochvar</li>\n<li>Kleene</li>\n<li>Priest</li>\n</ul>\n<p>The following n valued logic systems are supported by MVL:</p>\n<ul>\n<li>\u0141ukasiewicz</li>\n<li>G\u00f6del (under the name \u00abgoedel\u00bb)</li>\n<li>Product logic</li>\n<li>Post logic</li>\n</ul>\n<p>The following systems are planned for future support:</p>\n<ul>\n<li>Belnap's 4 valued logic</li>\n</ul>\n<h2>Usage examples</h2>\n<p>Using MVL is designed to integrate with existing python infrastructure as much\nas possible. Example usages of kleene and lukasiewicz logic are given below.</p>\n<h3>Importing and using 3 valued systems</h3>\n<pre><code>&gt;&gt;&gt; from mvl import kleene\n&gt;&gt;&gt; kleene.t\nLukasiewiczLogicValue.True\n&gt;&gt;&gt; kleene.and_(k.t, k.u)\n0.5\n&gt;&gt;&gt; kleene.or_(k.u, k.u)\n0.5\n&gt;&gt;&gt; kleene.implies(k.u, k.u)\n0.5\n&gt;&gt;&gt; kleene.implies(k.f, k.u)\n1.0\n</code></pre>\n<h3>Creating n valued logical systems</h3>\n<pre><code>&gt;&gt;&gt; from mvl.lukasiewicz import *\n&gt;&gt;&gt; ls = LogicSystem(5, LukasiewiczLogicValue)\n&gt;&gt;&gt; ls.values\n[LukasiewiczLogicValue(0.0), LukasiewiczLogicValue(0.25), LukasiewiczLogicValue(0.5), LukasiewiczLogicValue(0.75), LukasiewiczLogicValue(1.0)]\n&gt;&gt;&gt; t = ls.values[4]\n&gt;&gt;&gt; bool(t)\nTrue\n&gt;&gt;&gt; bool(ls.values[3])\nFalse\n</code></pre>\n<h3>Creating arbitrary logical values</h3>\n<pre><code>&gt;&gt;&gt; from mvl.lukasiewicz import *\n&gt;&gt;&gt; x = LukasiewiczLogicValue(0.123)\n&gt;&gt;&gt; x\nLukasiewiczLogicValue(0.123)\n&gt;&gt;&gt; bool(x)\nFalse\n&gt;&gt;&gt; s_and(x, 1)\n0.123\n</code></pre>\n<h2>License</h2>\n<p>Unlicense.</p>\n<h2>Documentation</h2>\n<p>The sphinx documentation can be generated and opened as follows:</p>\n<ol>\n<li>Open a command line.</li>\n<li>Navigate to the \u00abdocs\u00bb directory.</li>\n<li>Run the command <code>make html</code></li>\n</ol>\n<p>It can be read by opening the file <code>&lt;project_path&gt;/docs/build/html/index.html</code>.</p>\n<h2>Links</h2>\n<table>\n<thead>\n<tr>\n<th>Resource</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>How do I know what logic system to use?</td>\n<td>Todo</td>\n</tr>\n<tr>\n<td>Documentation</td>\n<td>Todo</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6411779, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "878a9ad180fce11afe5734ac0cecdd12", "sha256": "8a0d351a5b864188f7b882a8c7fff7f2b8e23ce9911bb50bd7b0b7fd77b1de10"}, "downloads": -1, "filename": "mvl-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "878a9ad180fce11afe5734ac0cecdd12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10222, "upload_time": "2020-01-03T23:27:43", "upload_time_iso_8601": "2020-01-03T23:27:43.317379Z", "url": "https://files.pythonhosted.org/packages/e9/39/8f22ef95584d7928c565e55e5bcc504f201b3122d84e71b0f22cfb0574fa/mvl-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed7c23ecbe6017d99fca0355b4284003", "sha256": "d34fab0063f2c6f526b30e65f48e8b048457c0ad503ddfad6e87be45127c0ea4"}, "downloads": -1, "filename": "mvl-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ed7c23ecbe6017d99fca0355b4284003", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6538, "upload_time": "2020-01-03T23:27:46", "upload_time_iso_8601": "2020-01-03T23:27:46.676192Z", "url": "https://files.pythonhosted.org/packages/58/e8/b1cf64857088da4803deec6db10069f3438ae85902a689ec30564c7e1152/mvl-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c7a0ed4b29c292d571f4aec99a6427d2", "sha256": "979b33ffc189c973947a99317d72ea0eea9330e3afbc108b0d2884a07b1d3c20"}, "downloads": -1, "filename": "mvl-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c7a0ed4b29c292d571f4aec99a6427d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14869, "upload_time": "2020-01-07T22:57:24", "upload_time_iso_8601": "2020-01-07T22:57:24.500649Z", "url": "https://files.pythonhosted.org/packages/7e/ac/72f09b42785e3dac4250a225cf70f62b09d01db6f3eb423a75c464349c19/mvl-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26c3b3a5891cfd51c40d5826d721fc0c", "sha256": "08940332bce1353ea615c9b168d0cffafcb5bffb32e278e8d89417f1f76bd917"}, "downloads": -1, "filename": "mvl-0.2.0.tar.gz", "has_sig": false, "md5_digest": "26c3b3a5891cfd51c40d5826d721fc0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13094, "upload_time": "2020-01-07T22:57:26", "upload_time_iso_8601": "2020-01-07T22:57:26.181629Z", "url": "https://files.pythonhosted.org/packages/3f/4a/2e7f47b764a78c6d25af1d42f62f559a2976fa64c52443d04df8d30fb95d/mvl-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7a0ed4b29c292d571f4aec99a6427d2", "sha256": "979b33ffc189c973947a99317d72ea0eea9330e3afbc108b0d2884a07b1d3c20"}, "downloads": -1, "filename": "mvl-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c7a0ed4b29c292d571f4aec99a6427d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 14869, "upload_time": "2020-01-07T22:57:24", "upload_time_iso_8601": "2020-01-07T22:57:24.500649Z", "url": "https://files.pythonhosted.org/packages/7e/ac/72f09b42785e3dac4250a225cf70f62b09d01db6f3eb423a75c464349c19/mvl-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26c3b3a5891cfd51c40d5826d721fc0c", "sha256": "08940332bce1353ea615c9b168d0cffafcb5bffb32e278e8d89417f1f76bd917"}, "downloads": -1, "filename": "mvl-0.2.0.tar.gz", "has_sig": false, "md5_digest": "26c3b3a5891cfd51c40d5826d721fc0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13094, "upload_time": "2020-01-07T22:57:26", "upload_time_iso_8601": "2020-01-07T22:57:26.181629Z", "url": "https://files.pythonhosted.org/packages/3f/4a/2e7f47b764a78c6d25af1d42f62f559a2976fa64c52443d04df8d30fb95d/mvl-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:01 2020"}