{"info": {"author": "Jonathan Morgan", "author_email": "jonathan.morgan.007@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "# context\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3523031.svg)](https://doi.org/10.5281/zenodo.3523031)\n\nGeneralized django application framework for tracking entities and traits of and relations between them.\n\n<!-- TOC -->\n\ncontext is a django application for capturing entities and relationships between entities.\n\n# Installation and configuration\n\nI've created ansible scripts with all the steps that you can configure and run against Ubuntu 18.04 or 16.04 (VM, cloud server, or physical machine).\n\nThese scripts are in my \"ansible-patterns\" repository: [https://github.com/jonathanmorgan/ansible-patterns](https://github.com/jonathanmorgan/ansible-patterns)\n\nThese ansible scripts can also be used to just setup a server with virtualenvwrapper, postgresql, apache, django, jupyterhub, and R, without context.  See the readme for detailed instructions.\n\nChances are I'll make dockerfile(s) for this eventually, too, but for now, there's ansible.\n\nI've left in a few notes below, regarding different package and installation choices, but the best doc is the ansible repo.\n\n## Python packages\n\n- depending on database:\n\n    - postgresql - psycopg2 - Before you can connect to Postgresql with this code, you need to do the following (based on [http://initd.org/psycopg/install/](http://initd.org/psycopg/install/)):\n\n        - install the PostgreSQL client if it isn't already installed.  On linux, you'll also need to install a few dev packages (python-dev, libpq-dev) ( [source](http://initd.org/psycopg/install/) ).\n        - install the psycopg2 python package.  Install using pip (`sudo pip install psycopg2`).  \n\n    - mysql - mysqlclient - Before you can connect to MySQL with this code, you need to do the following:\n\n        - mysqlclient\n\n            - install the MySQL client if it isn't already installed.  On linux, you'll also need to install a few dev packages (python-dev, libmysqlclient-dev) ( [source](http://codeinthehole.com/writing/how-to-set-up-mysql-for-python-on-ubuntu/) ).\n            - install the mysqlclient python package using pip (`(sudo) pip install mysqlclient`).\n\n- python packages that I find helpful:\n\n    - ipython - `(sudo) pip install ipython`\n\n## settings.py - Configure logging, database, applications:\n\nThe following are some django settings you might want to tweak in the settings.py file in your django project.  If you created a project named \"research\", this will be located at `research/research/settings.py`.\n\n### logging\n\nEdit the `research/research/settings.py` file and update it with details of your logging configuration\n\n- Example that logs any messages INFO and above to standard out:\n\n        import logging\n\n        logging.basicConfig(\n            level = logging.INFO,\n            format = '%(asctime)s - %(levelname)s - %(name)s - %(message)s'\n        )\n\n- Example that logs any messages INFO and above to a file:\n\n        import logging\n\n        logging.basicConfig(\n            level = logging.INFO,\n            format = '%(asctime)s - %(levelname)s - %(name)s - %(message)s',\n            filename = '<log_folder>/django-context_text.log',\n            filemode = 'w'\n        )\n\n    - WHERE `<log_folder>` is a folder that any users that will be used to interact with context_text have access to.  This includes the user your web server runs as (for admins and other django web pages) and the user you use to develop, and so that might run things from the python shell.\n\n        - the easiest way to get this working:\n\n            - make the `<log_folder>` somewhere outside the web root.\n            - set the permissions on `<log_folder>` to 777.\n            - create the file `django-context_text.log` there.\n            - set its permissions also to 777.\n\n        - This is not necessarily optimally secure, but truly securing this is beyond the scope of this README.\n\n- You can set `level` to any of the following, which are organized from most detail (`logging.DEBUG`) to least (`logging.CRITICAL`):\n\n    - `logging.DEBUG`\n    - `logging.INFO`\n    - `logging.WARNING`\n    - `logging.ERROR`\n    - `logging.CRITICAL`\n\n- Python logging HOWTO: [https://docs.python.org/2/howto/logging.html](https://docs.python.org/2/howto/logging.html)\n- Python logging cookbook: [https://docs.python.org/2/howto/logging-cookbook.html](https://docs.python.org/2/howto/logging-cookbook.html)\n\n### database\n\nEdit the research/research/settings.py file and update it with details of your database configuration.\n\nIn general, for any database other than sqlite3, in your database system of choice you'll need to:\n\n- create a database for django to use (I typically use `context_text`).\n\n    - postgresql - at the unix command line:\n\n            # su to the postgres user\n            su - postgres\n\n            # create the database at the unix shell\n            #createdb <database_name>\n            createdb context_text\n\n- create a database user for django to use that is not an admin (I typically use `django_user`).\n\n    - postgresql - at the unix command line:\n\n            # su to the postgres user\n            su - postgres\n\n            # create the user at the unix shell\n            #createuser --interactive -P <username>\n            createuser --interactive -P django_user\n\n- give the django database user all privileges on the django database.\n- place connection information for the database - connecting as your django database user to the django database - in settings.py.\n\nAn example for postgresql looks like this:\n\n    DATABASES = {\n        'default': {        \n            # PostgreSQL - context_text\n            'ENGINE': 'django.db.backends.postgresql', # Add 'postgresql', 'mysql', 'sqlite3' or 'oracle'.\n            'NAME': 'context_text',                      # Or path to database file if using sqlite3.\n            'USER': 'django_user',                      # Not used with sqlite3.\n            'PASSWORD': '<db_password>',                  # Not used with sqlite3.\n            'HOST': 'localhost',                      # Set to empty string for localhost. Not used with sqlite3.\n            'PORT': '5432',                      # Set to empty string for default. Not used with sqlite3.\n        },\n    }\n\nMore information:\n\n- [https://docs.djangoproject.com/en/dev/intro/tutorial01/#database-setup](https://docs.djangoproject.com/en/dev/intro/tutorial01/#database-setup)\n- [https://docs.djangoproject.com/en/dev/ref/settings/#databases](https://docs.djangoproject.com/en/dev/ref/settings/#databases)\n\n# Testing\n\n## Basic tests\n\n- test by going to the URL:\n\n        http://<your_server>/research/admin/\n\n- and then logging in with the django superuser created by ansible scripts.\n\n## Unit Tests\n\nThe context project has unit tests that can auto-run.  These tests use django's testing framework, based on the Python `unittest` package.\n\n### Configuration\n\n#### Database configuration\n\nIn order to run unit tests, your database configuration in `settings.py` will need to be connecting to the database with a user who is allowed to create databases.  When django runs unit tests, it creates a test database, then deletes it once testing is done.\n- _NOTE: This means the database user you use for unit testing SHOULD NOT be the user you'd use in production.  The production database user should not be able to do anything outside a given database._\n\n### Running unit tests\n\nTo run unit tests, at the command line in your django project/site folder (where `manage.py` lives):\n\n    python manage.py test context.tests\n\nSpecific sets of tests:\n\n- context model instances:\n\n    - test Entity_Identifier_Type model\n\n            python manage.py test context.tests.models.test_Entity_Identifier_Type_model\n\n    - test Entity_Identifier model\n\n            python manage.py test context.tests.models.test_Entity_Identifier_model\n\n    - test Entity_Trait model\n\n            python manage.py test context.tests.models.test_Entity_Trait_model\n\n    - test Entity model\n\n            python manage.py test context.tests.models.test_Entity_model\n\n## Test data\n\nThere is a set of test data stored in the `fixtures` folder inside this django application.  The files:\n\n- **_`context-sourcenet_entities_and_relations.json`_** - Entity and Relation metadata based on sourcenet project.\n\n### Using unittest data for development\n\n- create a database where the unit test data can live.  I usually call it the name of the main production database (\"`research`\") followed by \"`_test`\".  Easiest way to do this is to just create the database, then give the same user you use for your production database the same access they have for production for this test database as well.\n\n    - postgresql example, where production database name is \"`research`\" and database user is \"`django_user`\":\n\n            CREATE DATABASE research_test;\n            GRANT ALL PRIVILEGES ON DATABASE research_test TO django_user;\n\n- update the DATABASES dictionary in settings.py of the application that contains context_text to point to your test database (in easy example above, could just change the 'NAME' attribute in the 'default' entry to \"`research_test`\" rather than \"`research`\".\n- cd into your django application's home directory, activate your virtualenv if you created one, then run \"`python manage.py migrate`\" to create all the tables in the database.\n\n        cd <django_app_directory>\n        workon research\n        python manage.py migrate\n\n- use the command \"`python manage.py createsuperuser`\" to make an admin user, for logging into the django admins.\n\n        python manage.py createsuperuser\n\n- load the unit test fixtures into the database:\n\n        python manage.py loaddata context-sourcenet_entities_and_relations.json\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jonathanmorgan/context", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-context-core", "package_url": "https://pypi.org/project/django-context-core/", "platform": "", "project_url": "https://pypi.org/project/django-context-core/", "project_urls": {"Homepage": "https://github.com/jonathanmorgan/context"}, "release_url": "https://pypi.org/project/django-context-core/1.0.1.post4/", "requires_dist": ["django", "django-ajax-selects", "django-basic-config", "django-json-widget", "django-taggit", "psycopg2", "python-utilities-jsm"], "requires_python": ">=3.6", "summary": "Generalized django application framework for tracking entities and traits of and relations between them.", "version": "1.0.1.post4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>context</h1>\n<p><a href=\"https://doi.org/10.5281/zenodo.3523031\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f22eda16b270389ad19e597e0968091d2a6da04/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333532333033312e737667\"></a></p>\n<p>Generalized django application framework for tracking entities and traits of and relations between them.</p>\n\n<p>context is a django application for capturing entities and relationships between entities.</p>\n<h1>Installation and configuration</h1>\n<p>I've created ansible scripts with all the steps that you can configure and run against Ubuntu 18.04 or 16.04 (VM, cloud server, or physical machine).</p>\n<p>These scripts are in my \"ansible-patterns\" repository: <a href=\"https://github.com/jonathanmorgan/ansible-patterns\" rel=\"nofollow\">https://github.com/jonathanmorgan/ansible-patterns</a></p>\n<p>These ansible scripts can also be used to just setup a server with virtualenvwrapper, postgresql, apache, django, jupyterhub, and R, without context.  See the readme for detailed instructions.</p>\n<p>Chances are I'll make dockerfile(s) for this eventually, too, but for now, there's ansible.</p>\n<p>I've left in a few notes below, regarding different package and installation choices, but the best doc is the ansible repo.</p>\n<h2>Python packages</h2>\n<ul>\n<li>\n<p>depending on database:</p>\n<ul>\n<li>\n<p>postgresql - psycopg2 - Before you can connect to Postgresql with this code, you need to do the following (based on <a href=\"http://initd.org/psycopg/install/\" rel=\"nofollow\">http://initd.org/psycopg/install/</a>):</p>\n<ul>\n<li>install the PostgreSQL client if it isn't already installed.  On linux, you'll also need to install a few dev packages (python-dev, libpq-dev) ( <a href=\"http://initd.org/psycopg/install/\" rel=\"nofollow\">source</a> ).</li>\n<li>install the psycopg2 python package.  Install using pip (<code>sudo pip install psycopg2</code>).</li>\n</ul>\n</li>\n<li>\n<p>mysql - mysqlclient - Before you can connect to MySQL with this code, you need to do the following:</p>\n<ul>\n<li>\n<p>mysqlclient</p>\n<ul>\n<li>install the MySQL client if it isn't already installed.  On linux, you'll also need to install a few dev packages (python-dev, libmysqlclient-dev) ( <a href=\"http://codeinthehole.com/writing/how-to-set-up-mysql-for-python-on-ubuntu/\" rel=\"nofollow\">source</a> ).</li>\n<li>install the mysqlclient python package using pip (<code>(sudo) pip install mysqlclient</code>).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>python packages that I find helpful:</p>\n<ul>\n<li>ipython - <code>(sudo) pip install ipython</code></li>\n</ul>\n</li>\n</ul>\n<h2>settings.py - Configure logging, database, applications:</h2>\n<p>The following are some django settings you might want to tweak in the settings.py file in your django project.  If you created a project named \"research\", this will be located at <code>research/research/settings.py</code>.</p>\n<h3>logging</h3>\n<p>Edit the <code>research/research/settings.py</code> file and update it with details of your logging configuration</p>\n<ul>\n<li>\n<p>Example that logs any messages INFO and above to standard out:</p>\n<pre><code>  import logging\n\n  logging.basicConfig(\n      level = logging.INFO,\n      format = '%(asctime)s - %(levelname)s - %(name)s - %(message)s'\n  )\n</code></pre>\n</li>\n<li>\n<p>Example that logs any messages INFO and above to a file:</p>\n<pre><code>  import logging\n\n  logging.basicConfig(\n      level = logging.INFO,\n      format = '%(asctime)s - %(levelname)s - %(name)s - %(message)s',\n      filename = '&lt;log_folder&gt;/django-context_text.log',\n      filemode = 'w'\n  )\n</code></pre>\n<ul>\n<li>\n<p>WHERE <code>&lt;log_folder&gt;</code> is a folder that any users that will be used to interact with context_text have access to.  This includes the user your web server runs as (for admins and other django web pages) and the user you use to develop, and so that might run things from the python shell.</p>\n<ul>\n<li>\n<p>the easiest way to get this working:</p>\n<ul>\n<li>make the <code>&lt;log_folder&gt;</code> somewhere outside the web root.</li>\n<li>set the permissions on <code>&lt;log_folder&gt;</code> to 777.</li>\n<li>create the file <code>django-context_text.log</code> there.</li>\n<li>set its permissions also to 777.</li>\n</ul>\n</li>\n<li>\n<p>This is not necessarily optimally secure, but truly securing this is beyond the scope of this README.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>You can set <code>level</code> to any of the following, which are organized from most detail (<code>logging.DEBUG</code>) to least (<code>logging.CRITICAL</code>):</p>\n<ul>\n<li><code>logging.DEBUG</code></li>\n<li><code>logging.INFO</code></li>\n<li><code>logging.WARNING</code></li>\n<li><code>logging.ERROR</code></li>\n<li><code>logging.CRITICAL</code></li>\n</ul>\n</li>\n<li>\n<p>Python logging HOWTO: <a href=\"https://docs.python.org/2/howto/logging.html\" rel=\"nofollow\">https://docs.python.org/2/howto/logging.html</a></p>\n</li>\n<li>\n<p>Python logging cookbook: <a href=\"https://docs.python.org/2/howto/logging-cookbook.html\" rel=\"nofollow\">https://docs.python.org/2/howto/logging-cookbook.html</a></p>\n</li>\n</ul>\n<h3>database</h3>\n<p>Edit the research/research/settings.py file and update it with details of your database configuration.</p>\n<p>In general, for any database other than sqlite3, in your database system of choice you'll need to:</p>\n<ul>\n<li>\n<p>create a database for django to use (I typically use <code>context_text</code>).</p>\n<ul>\n<li>\n<p>postgresql - at the unix command line:</p>\n<pre><code>  # su to the postgres user\n  su - postgres\n\n  # create the database at the unix shell\n  #createdb &lt;database_name&gt;\n  createdb context_text\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>create a database user for django to use that is not an admin (I typically use <code>django_user</code>).</p>\n<ul>\n<li>\n<p>postgresql - at the unix command line:</p>\n<pre><code>  # su to the postgres user\n  su - postgres\n\n  # create the user at the unix shell\n  #createuser --interactive -P &lt;username&gt;\n  createuser --interactive -P django_user\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>give the django database user all privileges on the django database.</p>\n</li>\n<li>\n<p>place connection information for the database - connecting as your django database user to the django database - in settings.py.</p>\n</li>\n</ul>\n<p>An example for postgresql looks like this:</p>\n<pre><code>DATABASES = {\n    'default': {        \n        # PostgreSQL - context_text\n        'ENGINE': 'django.db.backends.postgresql', # Add 'postgresql', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'context_text',                      # Or path to database file if using sqlite3.\n        'USER': 'django_user',                      # Not used with sqlite3.\n        'PASSWORD': '&lt;db_password&gt;',                  # Not used with sqlite3.\n        'HOST': 'localhost',                      # Set to empty string for localhost. Not used with sqlite3.\n        'PORT': '5432',                      # Set to empty string for default. Not used with sqlite3.\n    },\n}\n</code></pre>\n<p>More information:</p>\n<ul>\n<li><a href=\"https://docs.djangoproject.com/en/dev/intro/tutorial01/#database-setup\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/intro/tutorial01/#database-setup</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/dev/ref/settings/#databases\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/ref/settings/#databases</a></li>\n</ul>\n<h1>Testing</h1>\n<h2>Basic tests</h2>\n<ul>\n<li>\n<p>test by going to the URL:</p>\n<pre><code>  http://&lt;your_server&gt;/research/admin/\n</code></pre>\n</li>\n<li>\n<p>and then logging in with the django superuser created by ansible scripts.</p>\n</li>\n</ul>\n<h2>Unit Tests</h2>\n<p>The context project has unit tests that can auto-run.  These tests use django's testing framework, based on the Python <code>unittest</code> package.</p>\n<h3>Configuration</h3>\n<h4>Database configuration</h4>\n<p>In order to run unit tests, your database configuration in <code>settings.py</code> will need to be connecting to the database with a user who is allowed to create databases.  When django runs unit tests, it creates a test database, then deletes it once testing is done.</p>\n<ul>\n<li><em>NOTE: This means the database user you use for unit testing SHOULD NOT be the user you'd use in production.  The production database user should not be able to do anything outside a given database.</em></li>\n</ul>\n<h3>Running unit tests</h3>\n<p>To run unit tests, at the command line in your django project/site folder (where <code>manage.py</code> lives):</p>\n<pre><code>python manage.py test context.tests\n</code></pre>\n<p>Specific sets of tests:</p>\n<ul>\n<li>\n<p>context model instances:</p>\n<ul>\n<li>\n<p>test Entity_Identifier_Type model</p>\n<pre><code>  python manage.py test context.tests.models.test_Entity_Identifier_Type_model\n</code></pre>\n</li>\n<li>\n<p>test Entity_Identifier model</p>\n<pre><code>  python manage.py test context.tests.models.test_Entity_Identifier_model\n</code></pre>\n</li>\n<li>\n<p>test Entity_Trait model</p>\n<pre><code>  python manage.py test context.tests.models.test_Entity_Trait_model\n</code></pre>\n</li>\n<li>\n<p>test Entity model</p>\n<pre><code>  python manage.py test context.tests.models.test_Entity_model\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Test data</h2>\n<p>There is a set of test data stored in the <code>fixtures</code> folder inside this django application.  The files:</p>\n<ul>\n<li><strong><em><code>context-sourcenet_entities_and_relations.json</code></em></strong> - Entity and Relation metadata based on sourcenet project.</li>\n</ul>\n<h3>Using unittest data for development</h3>\n<ul>\n<li>\n<p>create a database where the unit test data can live.  I usually call it the name of the main production database (\"<code>research</code>\") followed by \"<code>_test</code>\".  Easiest way to do this is to just create the database, then give the same user you use for your production database the same access they have for production for this test database as well.</p>\n<ul>\n<li>\n<p>postgresql example, where production database name is \"<code>research</code>\" and database user is \"<code>django_user</code>\":</p>\n<pre><code>  CREATE DATABASE research_test;\n  GRANT ALL PRIVILEGES ON DATABASE research_test TO django_user;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>update the DATABASES dictionary in settings.py of the application that contains context_text to point to your test database (in easy example above, could just change the 'NAME' attribute in the 'default' entry to \"<code>research_test</code>\" rather than \"<code>research</code>\".</p>\n</li>\n<li>\n<p>cd into your django application's home directory, activate your virtualenv if you created one, then run \"<code>python manage.py migrate</code>\" to create all the tables in the database.</p>\n<pre><code>  cd &lt;django_app_directory&gt;\n  workon research\n  python manage.py migrate\n</code></pre>\n</li>\n<li>\n<p>use the command \"<code>python manage.py createsuperuser</code>\" to make an admin user, for logging into the django admins.</p>\n<pre><code>  python manage.py createsuperuser\n</code></pre>\n</li>\n<li>\n<p>load the unit test fixtures into the database:</p>\n<pre><code>  python manage.py loaddata context-sourcenet_entities_and_relations.json\n</code></pre>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6060365, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "281ec78c891795785ffaa0a4f0f5f0cf", "sha256": "f771c566ed84b4c3c963389e04348220a2b9a91fc2114cecf6212cc426c6f14f"}, "downloads": -1, "filename": "django_context_core-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "281ec78c891795785ffaa0a4f0f5f0cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 77781, "upload_time": "2019-10-31T17:43:23", "upload_time_iso_8601": "2019-10-31T17:43:23.024182Z", "url": "https://files.pythonhosted.org/packages/9b/7f/bcee43c6476abaa52a25dda13a91db7a509bf6d18e67e53f1871c7d68d5a/django_context_core-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e465578b9f20864b79328a3a8160e630", "sha256": "24d06f4c5e107d396f1a9d1e0b8001dfebabcf532793982eea4b1e9280bcb09d"}, "downloads": -1, "filename": "django-context-core-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e465578b9f20864b79328a3a8160e630", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 60386, "upload_time": "2019-10-31T17:43:25", "upload_time_iso_8601": "2019-10-31T17:43:25.156292Z", "url": "https://files.pythonhosted.org/packages/bb/d7/41a4d5f7af74b8d96fbdb984b2a77a1cc5f6eed0c834586d69e5456b4905/django-context-core-1.0.1.tar.gz", "yanked": false}], "1.0.1.post3": [{"comment_text": "", "digests": {"md5": "e983513a827ea6369e4af84a9357467c", "sha256": "412aeca5d6b77ad26da86b70da1501c9ade55bbe69406d47020bbb9e12861898"}, "downloads": -1, "filename": "django_context_core-1.0.1.post3-py3-none-any.whl", "has_sig": false, "md5_digest": "e983513a827ea6369e4af84a9357467c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 88592, "upload_time": "2019-10-31T19:25:11", "upload_time_iso_8601": "2019-10-31T19:25:11.016343Z", "url": "https://files.pythonhosted.org/packages/e4/b5/234c4007d2b730def81d82f1b09ba5f2a8e2bc316ebd9bf667536b5e9467/django_context_core-1.0.1.post3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07b8ad730d2dc03a2d3055e130a3b2ab", "sha256": "d89bcdc23666a4c5726b69c26a661290b89bb097f03e81f259be9e04cdae0421"}, "downloads": -1, "filename": "django-context-core-1.0.1.post3.tar.gz", "has_sig": false, "md5_digest": "07b8ad730d2dc03a2d3055e130a3b2ab", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 69252, "upload_time": "2019-10-31T19:25:12", "upload_time_iso_8601": "2019-10-31T19:25:12.757593Z", "url": "https://files.pythonhosted.org/packages/47/f3/026afa20dae627b8a861609c34edaaf6342f9a1d1c6686abf3ef89acf798/django-context-core-1.0.1.post3.tar.gz", "yanked": false}], "1.0.1.post4": [{"comment_text": "", "digests": {"md5": "d819741533152723b64c164cc284887e", "sha256": "cd9237f590e4a0fea923e5052d388bab5e1efe3c6214643a6879d7ae85cece99"}, "downloads": -1, "filename": "django_context_core-1.0.1.post4-py3-none-any.whl", "has_sig": false, "md5_digest": "d819741533152723b64c164cc284887e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 89024, "upload_time": "2019-10-31T20:07:41", "upload_time_iso_8601": "2019-10-31T20:07:41.219729Z", "url": "https://files.pythonhosted.org/packages/fb/52/050f43ac550c89da0e47f806e976fc3b72376bd806d908d62b16ca29abaf/django_context_core-1.0.1.post4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8a73ab16603118daae5caeb8faa05b8", "sha256": "c5f123a05ebfe9d295af49ce804fd9c4487500ada1c92690e95743b63dd9ddc6"}, "downloads": -1, "filename": "django-context-core-1.0.1.post4.tar.gz", "has_sig": false, "md5_digest": "d8a73ab16603118daae5caeb8faa05b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 69781, "upload_time": "2019-10-31T20:07:42", "upload_time_iso_8601": "2019-10-31T20:07:42.910783Z", "url": "https://files.pythonhosted.org/packages/cf/0f/02e69c061e711cf28bdc5aa43b49a76f6a1f1e5117c06e1315f675be152b/django-context-core-1.0.1.post4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d819741533152723b64c164cc284887e", "sha256": "cd9237f590e4a0fea923e5052d388bab5e1efe3c6214643a6879d7ae85cece99"}, "downloads": -1, "filename": "django_context_core-1.0.1.post4-py3-none-any.whl", "has_sig": false, "md5_digest": "d819741533152723b64c164cc284887e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 89024, "upload_time": "2019-10-31T20:07:41", "upload_time_iso_8601": "2019-10-31T20:07:41.219729Z", "url": "https://files.pythonhosted.org/packages/fb/52/050f43ac550c89da0e47f806e976fc3b72376bd806d908d62b16ca29abaf/django_context_core-1.0.1.post4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d8a73ab16603118daae5caeb8faa05b8", "sha256": "c5f123a05ebfe9d295af49ce804fd9c4487500ada1c92690e95743b63dd9ddc6"}, "downloads": -1, "filename": "django-context-core-1.0.1.post4.tar.gz", "has_sig": false, "md5_digest": "d8a73ab16603118daae5caeb8faa05b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 69781, "upload_time": "2019-10-31T20:07:42", "upload_time_iso_8601": "2019-10-31T20:07:42.910783Z", "url": "https://files.pythonhosted.org/packages/cf/0f/02e69c061e711cf28bdc5aa43b49a76f6a1f1e5117c06e1315f675be152b/django-context-core-1.0.1.post4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:52 2020"}