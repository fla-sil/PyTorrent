{"info": {"author": "Paul Bruce", "author_email": "me@paulsbruce.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.7"], "description": "# NeoLoad CLI\n\n## Overview\n\nThis command-line interface helps you launch and observe performance tests on the Neotys Platform. Since NeoLoad is very flexible to many deployment models (SaaS, self-hosted, cloud or local containers, etc.), configuration and test execution parameters depend on your licensing and infrastructure provisioning options. Please read the following instructions carefully.\n\n\n| Property | Value |\n| ----------------    | ----------------   |\n| Maturity | Experimental |\n| Author | Neotys |\n| License           | [Apache License 2.0](https://github.com/Neotys-Labs/neoload-cli/blob/master/LICENSE) |\n| NeoLoad Licensing | License FREE edition, or Enterprise edition, or Professional |\n| Supported versions | Tested with NeoLoad Web from version [2.2.3](https://neoload.saas.neotys.com)\n| Download Binaries | See the [latest release on pypi](https://pypi.org/project/neoload)|\n\n## TL;DR ... What\nThe goal of this guide is to demonstrate how you can:\n 1. create API load tests using code (YAML)\n 2. run them from any environment\n 3. visualize test results in web dashboards\n\n## TL;DR ... How\n```\npip3 install neoload\ngit clone https://github.com/Neotys-Labs/neoload-cli.git && cd neoload-cli\nneoload --profile saas --token [NLW_TOKEN] --zone [NLW_ZONE_ID] \\\n        --attach docker#2,neotys/neoload-loadgenerator:latest \\\n        -f tests/example_2_0_runtime/default.yaml \\\n        --scenario sanityScenario\n```\nNOTE: For Windows command line, replace the '\\\\' multi-line separators above with '^'\n\n## Contents\n\n - [Prerequisites](#prerequisites)\n - [Installation](#installation)\n - [Configuration](#configuration)\n - [Running Load Tests](#running-load-tests)\n - [Additional Options](#additional-options)\n    - [Exporting SLA Results to JUnit](#exporting-sla-results-to-junit)\n    - [Test Summary](#test-summary)\n    - [Test Modifications](#test-modifications)\n - [Continuous Testing Examples](#continuous-testing-examples)\n - [Packaging the CLI with Build Agents](#packaging-the-cli-with-build-agents)\n - [IDE Integrations](#ide-integrations)\n - [Contributing](#contributing)\n\n## Prerequisites\nThe examples below assume that you have Python3 and Git command line tools installed.\n\nFor **Windows 10 users**, see:\n - **Python**\n   In short:\n    - Just install via [Python.org Downloads](https://www.python.org/downloads/)\n       - Make sure you check the option 'Add Python to the environment variables' option\n    - Open a NEW command prompt and install pip:\n        ```\n        python -m pip install -U pip\n        ```\n    - If the above doesn't work (Microsoft App Store sometimes confuses the situation), more\n      details on installing Python in Windows can be found [here](https://python-docs.readthedocs.io/en/latest/starting/install3/win.html).\n - **Git Command Line Tools**\n   See [5 Ways to Install Git on Windows](https://www.jamessturtevant.com/posts/5-Ways-to-install-git-on-Windows/)\n - **Docker for Windows**\n   To install Docker with Chocolatey\n    - [Install Chocolatey package manager for Windows](https://chocolatey.org/docs/installation)\n    - Open a command prompt and install Docker Desktop for Windows 10\n        ```\n        choco install docker-cli docker-desktop\n        ```\n    - You probably will need to log out (or restart) Windows for Docker to work properly\n - For each of the above steps, you may need to close prior command prompts and start new ones\n\nFor Mac OS X:\n - [Installing Python3 on Mac OS X](https://docs.python-guide.org/starting/install3/osx/)\n - [From: *Installing Git, the Easy Way*](https://gist.github.com/derhuerst/1b15ff4652a867391f03#step-2--install-git)\n\nFor packaging in Docker (custom build agents, not Docker for Windows), see [appendix](#packaging-the-cli-with-build-agents).\n\n## Installation\nTo install, simply run the following command. As of Jan 2020, Python 2 will be permanently deprecated, therefore this utility is written for Python 3.\n```\npip3 install neoload\n```\n\n## Interactive CLI Help\nFor usage and CLI argument examples, simply run:\n```\nneoload --help\n```\n\n## Configuration\nBefore running a load test, you will need to initialize a profile to contain connection information to NeoLoad Web. Subsequent commands will use this profile unless switched to another profile, as there can be multiple. ***This is so that you only need to specify these details once only, then you can focus on validating and running load tests.***\n\nYour profile details depend on your license model and how you want to obtain load testing resources (controller + load generators). See below:\n\n### Create a SaaS-Based License Profile\nIf you have an enterprise license activated in NeoLoad Web SaaS, you do not need to specify license details in your profile. When a controller begins to run a test, it will reach out to NeoLoad Web SaaS to lease an appropriate license.\n```\nneoload --profile saas1 --token [NLW_TOKEN] --zone [NLW_ZONE_ID]\n```\n\n### Create a Self-Hosted Enterprise License Profile\nIf you do not have a SaaS-based license, you will need to specify additional licensing server url and credentials that refer to your own NeoLoad Team License Server.\n```\nneoload --profile nts --token [NLW_TOKEN] --zone [NLW_ZONE_ID] --ntsurl [TEAM_SERVER_URL] --ntslogin [TEAM_SERVER_USERNAME_COLON_ENC_PASS]\n```\n\n### Using NeoLoad Web On-Premise\nYou can also use an instance of NeoLoad Web that is deployed in your own infrastructure with the CLI, however you\nmust override the defaults which are typically pointed to SaaS:\n```\nneoload --profile onprem --token [NLW_TOKEN] --zone [NLW_ZONE_ID] --url [NLW_API_URL] --filesurl [NLW_FILES_URL] --ntsurl [TEAM_SERVER_URL] --ntslogin [TEAM_SERVER_USERNAME_COLON_ENC_PASS] --baseurl [NLW_URL_/#!result/]\n```\n\n### Viewing saved profiles\nYou can always list profiles that have saved using the following command:\n```\nneoload --profiles\n```\nYou can also view the raw/complete stored JSON representation of saved profile details using the following command:\n```\nneoload --profile [your_profile_name] --summary\n```\n\n### Running Your First Load Test\nBefore proceeding, for now skip to the [Obtain Basic Examples](#obtain-basic-examples) and run your\nfirst test to make sure everything is working as expected.\n\n**STOP HERE AND DO THE ABOVE BEFORE READING FURTHER**\n\n### *Future* Plans to Execute Local Tests on a Free Trial License\nIf you do not already have an enterprise license, such as if you only have NeoLoad installed on your local workstation (from a Free Trial download or professional license), NeoLoad CLI will eventually support using your installation as an attached controller and load generator.\n\nAdditionally, if you do not have access to a dynamic infrastructure provider (i.e. OpenShift, etc.) and if you do not have Docker installed where the NeoLoad CLI is executed, your local workstation can serve as load testing resources similar to dynamic and containerized resource use cases.\n\nThis is planned to be delivered in June 2020.\n\n## Running Load Tests\nOnce a profile is established, NeoLoad CLI makes it very easy to execute load tests. All you need is to provide an existing test suite or set of as-code file(s), then specify a scenario.\n\nNeoLoad CLI defaults to using the NeoLoad Web APIs for Runtime operations, which means that your project assets will be zipped up together and uploaded to the NeoLoad Web deployment you specified in your profile (SaaS or self-hosted).\n```\nneoload --scenario sanityScenario -f [path_to_your_nlp_or_yaml_file]\n```\nOnce a test is initialized, if you are running in interactive console mode, the NeoLoad CLI will automatically open the system default browser to your live test results.\n\n### Customizing Test Name and Description\nThough the default test name includes the scenario, you may want to customize the test name with\nspecific details (e.g. CI job and build number, etc.). To do so add --testname, and optionally --testdesc to provide a readable test description:\n```\nneoload --scenario sanityScenario -f [path_to_your_nlp_or_yaml_file] \\\n        --testname \"MyCustomTestName_${JOB_ID}\" \\\n        --testdesc \"A custom test description containing hashtags like #latest or #issueNum\"\n```\n\n### Obtain Basic Examples\nSome basic examples are in our Git repository for this utility, under the directory ./tests/. To get them, simply clone the repo:\n```\ngit clone https://github.com/Neotys-Labs/neoload-cli.git && neoload-cli\n```\nThen you can run a basic test simply by typing in:\n```\nneoload --attach docker#2,neotys/neoload-loadgenerator:latest\nneoload -f tests/example_2_0_runtime/default.yaml --scenario sanityScenario\n```\nAdditionally, you can specify multiple files, such as additional SLA, variables, or servers overriding files. This works for both [.nlp] and [.yaml] files.\n```\nneoload -f tests/example_2_0_runtime/default.yaml -f tests/example_2_0_runtime/slas/uat.yaml --scenario sanityScenario\n```\n\n### Non-blocking Execution Workflow\nYou may want to manage individual steps of attaching resources, running, waiting, and detatching resources in a parallel pipeline. This is particularly useful in combination with other parallel steps that dynamically analyze SLA data and fast-fail the test (using API commands) using a known custom real-time analysis process.\n\nThe general process can be seen in the [NeoLoad CLI E2E PyTest suite](tests/test_attach_functions.py), but also abstracted below:\n\n- Initialize a profile\n  ```\n  neoload --profile example --zone [static_or_dynamic_zone_id] --token [your_neoload_web_token]\n  ```\n- (Optional for static zone) Attach dynamic resources\n  ```\n  neoload --attach docker#2,neotys/neoload-loadgenerator:latest\n  ```\n  (Note: this assumes that the host you run the above command is a Docker host or is connected to one, DinD)\n\n- Kick off a test via NeoLoad Web Runtime\n  ```\n  neoload --nowait --scenario [your_scenario_name] -f [your_project_file(s)] --outfile neoload.stdout\n  ```\n\n- Grab the ID of the test just executed\n  ```\n  neoload --infile neoload.stdout --query testid\n  ```\n\n- (Start some other parallel operations, such as monitoring for early advanced SLA failures)\n\n- Wait (blocking) for test to complete\n  ```\n  neoload --spinwait --summary --junitsla junit_neoload_sla.xml --testid [test_id_obtained_from_above_query]\n  ```\n\n- (Always) Detatch Optional Docker resources\n  ```\n  neoload --detatch\n  ```\n## Additional Options\nThere are many other arguments for test summarization, modification, and exporting results.\n\n### Using more than one Controller and Load Generator from a zone\nPresuming that you already have a zone with available resources in it, you can specify\n to use more than one load generator. The zone should be stored in your current profile.\n```\n  neoload --attach zone#3 -f tests/example_2_0_runtime/default.yaml --scenario sanityScenario\n```\n...where the number three is the number of available load generators you want this test to utilize.\n\n### Exporting SLA Results to JUnit\n```\n  neoload --testid [guid] --junitsla=junit_sla_results.xml\n```\n### Verbose and Debug Mode\nVerbose mode changes logging level to INFO. When executing from an interactive console, it also opens a browser window to the test logs immediately after they're available (useful for monitoring the infrastructure initialization process).\n```\nneoload -f tests/example_2_0_runtime/default.yaml --scenario sanityScenario --verbose\n```\nDebug mode changes logging level to DEBUG. This is an extreme amount of internal information which infers verbose/INFO mode and provides manual pausing on critical events (such as after Docker attach but before test execution).\n```\nneoload -f tests/example_2_0_runtime/default.yaml --scenario sanityScenario --debug\n```\n### Quiet Mode\nAdding the *--quiet* flag generally produces only the relevant output (i.e. JSON, test id, etc.) and no other informational messages. This is useful when piping the structured data output into another process, such as obtaining the most recent test id from stdout file (*--quiet* is inferred by some other combinations of flags such as *--infile* AND *--query testid*).\n\n### Test Summary\nSpecifying both a *--testid* value and the *--summary* flag produces a JSON result set that shows both the high level test status metadata and overall statistics.\n```\nneoload --testid c9f9c994-da31-4b63-b622-42a80e313d15 --summary --quiet\n```\nProduces:\n```\n{\n\t'summary':{\n\t\t'author':'Paul Bruce',\n\t\t'description':'',\n\t\t'duration':10921,\n\t\t'end_date':1575675769036,\n\t\t'id':'c9f9c994-da31-4b63-b622-42a80e313d15',\n\t\t'lg_count':1,\n\t\t'name':'NeoLoad-CLI-example-2_0_sanityScenario',\n\t\t'project':'NeoLoad-CLI-example-2_0',\n\t\t'quality_status':'FAILED',\n\t\t'scenario':'sanityScenario',\n\t\t'start_date':1575675758115,\n\t\t'status':'TERMINATED',\n\t\t'termination_reason':'POLICY'\n\t},\n\t'statistics':{\n\t\t'last_request_count_per_second':None,\n\t\t'last_transaction_duration_average':None,\n\t\t'last_virtual_user_count':None,\n\t\t'total_global_count_failure':0,\n\t\t'total_global_downloaded_bytes':97876,\n\t\t'total_global_downloaded_bytes_per_second':8962.183,\n\t\t'total_iteration_count_failure':0,\n\t\t'total_iteration_count_success':10,\n\t\t'total_request_count_failure':0,\n\t\t'total_request_count_per_second':1.0988004,\n\t\t'total_request_count_success':12,\n\t\t'total_request_duration_average':495.75,\n\t\t'total_transaction_count_failure':0,\n\t\t'total_transaction_count_per_second':1.0072337,\n\t\t'total_transaction_count_success':11,\n\t\t'total_transaction_duration_average':496.9091\n\t}\n```\n*TODO: This summary will also include SLA summaries in Jan 2020*\n### Test Modifications\nMetadata on a test can be modified after the test is complete, such as name, description, and status. With the required *--testid* argument as well, these modification arguments can be used individually or in combination with each other.\n```\nneoload --testid [test id] --updatename 'Some new test name' --updatedesc 'Some new description' --updatestatus 'PASSED|FAILED'\n```\nAdditionally, plus and minus (+/-) operators can be used to append or remove the text specified from the existing name or description data. This is useful in combination with hashtag keywords to flag a test as baseline, candidate, or with an issue tracking id.\n```\nneoload --testid [old baseline test id] --updatedesc '-#baseline'\nneoload --testid [new test id] --updatedesc '+#baseline'\n```\n\n### Test Result listings and queries\n*TODO: will be coming in Jan 2020*\n\n## Continuous Testing Examples\nThe main goal of the NeoLoad-CLI is to standardize the semantics of how load tests are executed across development, non-prod, and production environments. While the above instructions could be run from a contributor workstation, they can easily translated to various continuous build and deployment orchestration environments, as exampled:\n\n - [Jenkins](https://github.com/Neotys-Labs/neoload-cli/tree/master/pipeline_examples/jenkins_pipeline)\n - [Azure DevOps](https://github.com/Neotys-Labs/neoload-cli/tree/master/pipeline_examples/azure_devops)\n - [Gitlab](https://github.com/Neotys-Labs/neoload-cli/tree/master/pipeline_examples/gitlab)\n - Sorry AWS CodeBuild, haven't seen any F100 clients using the pform\n - CircleCI, TBD when [@punkdata](https://www.linkedin.com/in/punkdata/) gets back to [@paulsbruce](https://www.linkedin.com/in/paulsbruce/) :)\n\n## Packaging the CLI with Build Agents\nMany of the above CI examples include a step to explicitly install the NeoLoad CLI as part of the\nbuild steps. However, if you want the CLI baked into some build agent directly so that it\nis ready for use during a job, here's a Docker example:\n\nFor Docker builds:\n - [See the test harness Alpine-based Dockerfile](https://github.com/Neotys-Labs/neoload-cli/blob/master/tests/docker/dind-python3/Dockerfile)\n\n\n## IDE Integrations\nSince most of what we do in an IDE is create/edit code, we're mostly interested in how\nto:\n - make it easy to write API tests in YAML (automatic syntax validation)\n - validate that tests do not contain unanticipated errors even at small scale\n - dry-run small (smoke) load tests locally so that code check-ins will work in CI/pipeline tests\n\nSince the latter two cases are already covered by command-line semantics, our primary focus\nis to accelerate test authoring by providing NeoLoad as-code DSL (Domain-specific Language) validation\nand in some cases editor auto-complete.\n\nStatus of IDE / editor integrations\n\n | IDE / Editor       | Syntax checks | Auto-complete | Setup steps\n |:------------------:|:-------------:|:-------------:|:----------------:|\n | Visual Studio Code |      [x]      |      [x]      | [see instructions](resources/ides/vscode_settings.json) |\n\n## Contributing\nFeel free to fork this repo, make changes, *test locally*, and create a pull request. As part of your testing, you should run the built-in test suite with the following command:\n```\npython3 -m pytest -v tests\n```\n*NOTE: omitting the --skipslow and --skipslas arguments also runs Docker-related attaching tests, which you will need to set environment variables up for in order to successfully run the test suite. An example of these variables can be found in [example.bash_profile](tests/example.bash_profile) and can be addapted for Windows execution as well.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Neotys-Labs/neoload-cli", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "neoload", "package_url": "https://pypi.org/project/neoload/", "platform": "", "project_url": "https://pypi.org/project/neoload/", "project_urls": {"Homepage": "https://github.com/Neotys-Labs/neoload-cli"}, "release_url": "https://pypi.org/project/neoload/0.4.5/", "requires_dist": ["click", "six", "wcwidth", "pygments", "prompt-toolkit (==1.0.14)", "PyInquirer", "pyfiglet", "termcolor", "pprint", "docker", "coloredlogs", "pytest", "pytest-steps", "pytest-reorder", "junit-xml", "requests", "pyyaml", "python-dateutil", "jsonschema", "opentelemetry-api", "opentelemetry-sdk"], "requires_python": ">3.5.2", "summary": "A command-line native utility for launching and observing NeoLoad performance tests", "version": "0.4.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NeoLoad CLI</h1>\n<h2>Overview</h2>\n<p>This command-line interface helps you launch and observe performance tests on the Neotys Platform. Since NeoLoad is very flexible to many deployment models (SaaS, self-hosted, cloud or local containers, etc.), configuration and test execution parameters depend on your licensing and infrastructure provisioning options. Please read the following instructions carefully.</p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Maturity</td>\n<td>Experimental</td>\n</tr>\n<tr>\n<td>Author</td>\n<td>Neotys</td>\n</tr>\n<tr>\n<td>License</td>\n<td><a href=\"https://github.com/Neotys-Labs/neoload-cli/blob/master/LICENSE\" rel=\"nofollow\">Apache License 2.0</a></td>\n</tr>\n<tr>\n<td>NeoLoad Licensing</td>\n<td>License FREE edition, or Enterprise edition, or Professional</td>\n</tr>\n<tr>\n<td>Supported versions</td>\n<td>Tested with NeoLoad Web from version <a href=\"https://neoload.saas.neotys.com\" rel=\"nofollow\">2.2.3</a></td>\n</tr>\n<tr>\n<td>Download Binaries</td>\n<td>See the <a href=\"https://pypi.org/project/neoload\" rel=\"nofollow\">latest release on pypi</a></td>\n</tr></tbody></table>\n<h2>TL;DR ... What</h2>\n<p>The goal of this guide is to demonstrate how you can:</p>\n<ol>\n<li>create API load tests using code (YAML)</li>\n<li>run them from any environment</li>\n<li>visualize test results in web dashboards</li>\n</ol>\n<h2>TL;DR ... How</h2>\n<pre><code>pip3 install neoload\ngit clone https://github.com/Neotys-Labs/neoload-cli.git &amp;&amp; cd neoload-cli\nneoload --profile saas --token [NLW_TOKEN] --zone [NLW_ZONE_ID] \\\n        --attach docker#2,neotys/neoload-loadgenerator:latest \\\n        -f tests/example_2_0_runtime/default.yaml \\\n        --scenario sanityScenario\n</code></pre>\n<p>NOTE: For Windows command line, replace the '\\' multi-line separators above with '^'</p>\n<h2>Contents</h2>\n<ul>\n<li><a href=\"#prerequisites\" rel=\"nofollow\">Prerequisites</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#running-load-tests\" rel=\"nofollow\">Running Load Tests</a></li>\n<li><a href=\"#additional-options\" rel=\"nofollow\">Additional Options</a>\n<ul>\n<li><a href=\"#exporting-sla-results-to-junit\" rel=\"nofollow\">Exporting SLA Results to JUnit</a></li>\n<li><a href=\"#test-summary\" rel=\"nofollow\">Test Summary</a></li>\n<li><a href=\"#test-modifications\" rel=\"nofollow\">Test Modifications</a></li>\n</ul>\n</li>\n<li><a href=\"#continuous-testing-examples\" rel=\"nofollow\">Continuous Testing Examples</a></li>\n<li><a href=\"#packaging-the-cli-with-build-agents\" rel=\"nofollow\">Packaging the CLI with Build Agents</a></li>\n<li><a href=\"#ide-integrations\" rel=\"nofollow\">IDE Integrations</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n</ul>\n<h2>Prerequisites</h2>\n<p>The examples below assume that you have Python3 and Git command line tools installed.</p>\n<p>For <strong>Windows 10 users</strong>, see:</p>\n<ul>\n<li><strong>Python</strong>\nIn short:\n<ul>\n<li>Just install via <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python.org Downloads</a>\n<ul>\n<li>Make sure you check the option 'Add Python to the environment variables' option</li>\n</ul>\n</li>\n<li>Open a NEW command prompt and install pip:\n<pre><code>python -m pip install -U pip\n</code></pre>\n</li>\n<li>If the above doesn't work (Microsoft App Store sometimes confuses the situation), more\ndetails on installing Python in Windows can be found <a href=\"https://python-docs.readthedocs.io/en/latest/starting/install3/win.html\" rel=\"nofollow\">here</a>.</li>\n</ul>\n</li>\n<li><strong>Git Command Line Tools</strong>\nSee <a href=\"https://www.jamessturtevant.com/posts/5-Ways-to-install-git-on-Windows/\" rel=\"nofollow\">5 Ways to Install Git on Windows</a></li>\n<li><strong>Docker for Windows</strong>\nTo install Docker with Chocolatey\n<ul>\n<li><a href=\"https://chocolatey.org/docs/installation\" rel=\"nofollow\">Install Chocolatey package manager for Windows</a></li>\n<li>Open a command prompt and install Docker Desktop for Windows 10\n<pre><code>choco install docker-cli docker-desktop\n</code></pre>\n</li>\n<li>You probably will need to log out (or restart) Windows for Docker to work properly</li>\n</ul>\n</li>\n<li>For each of the above steps, you may need to close prior command prompts and start new ones</li>\n</ul>\n<p>For Mac OS X:</p>\n<ul>\n<li><a href=\"https://docs.python-guide.org/starting/install3/osx/\" rel=\"nofollow\">Installing Python3 on Mac OS X</a></li>\n<li><a href=\"https://gist.github.com/derhuerst/1b15ff4652a867391f03#step-2--install-git\" rel=\"nofollow\">From: <em>Installing Git, the Easy Way</em></a></li>\n</ul>\n<p>For packaging in Docker (custom build agents, not Docker for Windows), see <a href=\"#packaging-the-cli-with-build-agents\" rel=\"nofollow\">appendix</a>.</p>\n<h2>Installation</h2>\n<p>To install, simply run the following command. As of Jan 2020, Python 2 will be permanently deprecated, therefore this utility is written for Python 3.</p>\n<pre><code>pip3 install neoload\n</code></pre>\n<h2>Interactive CLI Help</h2>\n<p>For usage and CLI argument examples, simply run:</p>\n<pre><code>neoload --help\n</code></pre>\n<h2>Configuration</h2>\n<p>Before running a load test, you will need to initialize a profile to contain connection information to NeoLoad Web. Subsequent commands will use this profile unless switched to another profile, as there can be multiple. <em><strong>This is so that you only need to specify these details once only, then you can focus on validating and running load tests.</strong></em></p>\n<p>Your profile details depend on your license model and how you want to obtain load testing resources (controller + load generators). See below:</p>\n<h3>Create a SaaS-Based License Profile</h3>\n<p>If you have an enterprise license activated in NeoLoad Web SaaS, you do not need to specify license details in your profile. When a controller begins to run a test, it will reach out to NeoLoad Web SaaS to lease an appropriate license.</p>\n<pre><code>neoload --profile saas1 --token [NLW_TOKEN] --zone [NLW_ZONE_ID]\n</code></pre>\n<h3>Create a Self-Hosted Enterprise License Profile</h3>\n<p>If you do not have a SaaS-based license, you will need to specify additional licensing server url and credentials that refer to your own NeoLoad Team License Server.</p>\n<pre><code>neoload --profile nts --token [NLW_TOKEN] --zone [NLW_ZONE_ID] --ntsurl [TEAM_SERVER_URL] --ntslogin [TEAM_SERVER_USERNAME_COLON_ENC_PASS]\n</code></pre>\n<h3>Using NeoLoad Web On-Premise</h3>\n<p>You can also use an instance of NeoLoad Web that is deployed in your own infrastructure with the CLI, however you\nmust override the defaults which are typically pointed to SaaS:</p>\n<pre><code>neoload --profile onprem --token [NLW_TOKEN] --zone [NLW_ZONE_ID] --url [NLW_API_URL] --filesurl [NLW_FILES_URL] --ntsurl [TEAM_SERVER_URL] --ntslogin [TEAM_SERVER_USERNAME_COLON_ENC_PASS] --baseurl [NLW_URL_/#!result/]\n</code></pre>\n<h3>Viewing saved profiles</h3>\n<p>You can always list profiles that have saved using the following command:</p>\n<pre><code>neoload --profiles\n</code></pre>\n<p>You can also view the raw/complete stored JSON representation of saved profile details using the following command:</p>\n<pre><code>neoload --profile [your_profile_name] --summary\n</code></pre>\n<h3>Running Your First Load Test</h3>\n<p>Before proceeding, for now skip to the <a href=\"#obtain-basic-examples\" rel=\"nofollow\">Obtain Basic Examples</a> and run your\nfirst test to make sure everything is working as expected.</p>\n<p><strong>STOP HERE AND DO THE ABOVE BEFORE READING FURTHER</strong></p>\n<h3><em>Future</em> Plans to Execute Local Tests on a Free Trial License</h3>\n<p>If you do not already have an enterprise license, such as if you only have NeoLoad installed on your local workstation (from a Free Trial download or professional license), NeoLoad CLI will eventually support using your installation as an attached controller and load generator.</p>\n<p>Additionally, if you do not have access to a dynamic infrastructure provider (i.e. OpenShift, etc.) and if you do not have Docker installed where the NeoLoad CLI is executed, your local workstation can serve as load testing resources similar to dynamic and containerized resource use cases.</p>\n<p>This is planned to be delivered in June 2020.</p>\n<h2>Running Load Tests</h2>\n<p>Once a profile is established, NeoLoad CLI makes it very easy to execute load tests. All you need is to provide an existing test suite or set of as-code file(s), then specify a scenario.</p>\n<p>NeoLoad CLI defaults to using the NeoLoad Web APIs for Runtime operations, which means that your project assets will be zipped up together and uploaded to the NeoLoad Web deployment you specified in your profile (SaaS or self-hosted).</p>\n<pre><code>neoload --scenario sanityScenario -f [path_to_your_nlp_or_yaml_file]\n</code></pre>\n<p>Once a test is initialized, if you are running in interactive console mode, the NeoLoad CLI will automatically open the system default browser to your live test results.</p>\n<h3>Customizing Test Name and Description</h3>\n<p>Though the default test name includes the scenario, you may want to customize the test name with\nspecific details (e.g. CI job and build number, etc.). To do so add --testname, and optionally --testdesc to provide a readable test description:</p>\n<pre><code>neoload --scenario sanityScenario -f [path_to_your_nlp_or_yaml_file] \\\n        --testname \"MyCustomTestName_${JOB_ID}\" \\\n        --testdesc \"A custom test description containing hashtags like #latest or #issueNum\"\n</code></pre>\n<h3>Obtain Basic Examples</h3>\n<p>Some basic examples are in our Git repository for this utility, under the directory ./tests/. To get them, simply clone the repo:</p>\n<pre><code>git clone https://github.com/Neotys-Labs/neoload-cli.git &amp;&amp; neoload-cli\n</code></pre>\n<p>Then you can run a basic test simply by typing in:</p>\n<pre><code>neoload --attach docker#2,neotys/neoload-loadgenerator:latest\nneoload -f tests/example_2_0_runtime/default.yaml --scenario sanityScenario\n</code></pre>\n<p>Additionally, you can specify multiple files, such as additional SLA, variables, or servers overriding files. This works for both [.nlp] and [.yaml] files.</p>\n<pre><code>neoload -f tests/example_2_0_runtime/default.yaml -f tests/example_2_0_runtime/slas/uat.yaml --scenario sanityScenario\n</code></pre>\n<h3>Non-blocking Execution Workflow</h3>\n<p>You may want to manage individual steps of attaching resources, running, waiting, and detatching resources in a parallel pipeline. This is particularly useful in combination with other parallel steps that dynamically analyze SLA data and fast-fail the test (using API commands) using a known custom real-time analysis process.</p>\n<p>The general process can be seen in the <a href=\"tests/test_attach_functions.py\" rel=\"nofollow\">NeoLoad CLI E2E PyTest suite</a>, but also abstracted below:</p>\n<ul>\n<li>\n<p>Initialize a profile</p>\n<pre><code>neoload --profile example --zone [static_or_dynamic_zone_id] --token [your_neoload_web_token]\n</code></pre>\n</li>\n<li>\n<p>(Optional for static zone) Attach dynamic resources</p>\n<pre><code>neoload --attach docker#2,neotys/neoload-loadgenerator:latest\n</code></pre>\n<p>(Note: this assumes that the host you run the above command is a Docker host or is connected to one, DinD)</p>\n</li>\n<li>\n<p>Kick off a test via NeoLoad Web Runtime</p>\n<pre><code>neoload --nowait --scenario [your_scenario_name] -f [your_project_file(s)] --outfile neoload.stdout\n</code></pre>\n</li>\n<li>\n<p>Grab the ID of the test just executed</p>\n<pre><code>neoload --infile neoload.stdout --query testid\n</code></pre>\n</li>\n<li>\n<p>(Start some other parallel operations, such as monitoring for early advanced SLA failures)</p>\n</li>\n<li>\n<p>Wait (blocking) for test to complete</p>\n<pre><code>neoload --spinwait --summary --junitsla junit_neoload_sla.xml --testid [test_id_obtained_from_above_query]\n</code></pre>\n</li>\n<li>\n<p>(Always) Detatch Optional Docker resources</p>\n<pre><code>neoload --detatch\n</code></pre>\n</li>\n</ul>\n<h2>Additional Options</h2>\n<p>There are many other arguments for test summarization, modification, and exporting results.</p>\n<h3>Using more than one Controller and Load Generator from a zone</h3>\n<p>Presuming that you already have a zone with available resources in it, you can specify\nto use more than one load generator. The zone should be stored in your current profile.</p>\n<pre><code>  neoload --attach zone#3 -f tests/example_2_0_runtime/default.yaml --scenario sanityScenario\n</code></pre>\n<p>...where the number three is the number of available load generators you want this test to utilize.</p>\n<h3>Exporting SLA Results to JUnit</h3>\n<pre><code>  neoload --testid [guid] --junitsla=junit_sla_results.xml\n</code></pre>\n<h3>Verbose and Debug Mode</h3>\n<p>Verbose mode changes logging level to INFO. When executing from an interactive console, it also opens a browser window to the test logs immediately after they're available (useful for monitoring the infrastructure initialization process).</p>\n<pre><code>neoload -f tests/example_2_0_runtime/default.yaml --scenario sanityScenario --verbose\n</code></pre>\n<p>Debug mode changes logging level to DEBUG. This is an extreme amount of internal information which infers verbose/INFO mode and provides manual pausing on critical events (such as after Docker attach but before test execution).</p>\n<pre><code>neoload -f tests/example_2_0_runtime/default.yaml --scenario sanityScenario --debug\n</code></pre>\n<h3>Quiet Mode</h3>\n<p>Adding the <em>--quiet</em> flag generally produces only the relevant output (i.e. JSON, test id, etc.) and no other informational messages. This is useful when piping the structured data output into another process, such as obtaining the most recent test id from stdout file (<em>--quiet</em> is inferred by some other combinations of flags such as <em>--infile</em> AND <em>--query testid</em>).</p>\n<h3>Test Summary</h3>\n<p>Specifying both a <em>--testid</em> value and the <em>--summary</em> flag produces a JSON result set that shows both the high level test status metadata and overall statistics.</p>\n<pre><code>neoload --testid c9f9c994-da31-4b63-b622-42a80e313d15 --summary --quiet\n</code></pre>\n<p>Produces:</p>\n<pre><code>{\n\t'summary':{\n\t\t'author':'Paul Bruce',\n\t\t'description':'',\n\t\t'duration':10921,\n\t\t'end_date':1575675769036,\n\t\t'id':'c9f9c994-da31-4b63-b622-42a80e313d15',\n\t\t'lg_count':1,\n\t\t'name':'NeoLoad-CLI-example-2_0_sanityScenario',\n\t\t'project':'NeoLoad-CLI-example-2_0',\n\t\t'quality_status':'FAILED',\n\t\t'scenario':'sanityScenario',\n\t\t'start_date':1575675758115,\n\t\t'status':'TERMINATED',\n\t\t'termination_reason':'POLICY'\n\t},\n\t'statistics':{\n\t\t'last_request_count_per_second':None,\n\t\t'last_transaction_duration_average':None,\n\t\t'last_virtual_user_count':None,\n\t\t'total_global_count_failure':0,\n\t\t'total_global_downloaded_bytes':97876,\n\t\t'total_global_downloaded_bytes_per_second':8962.183,\n\t\t'total_iteration_count_failure':0,\n\t\t'total_iteration_count_success':10,\n\t\t'total_request_count_failure':0,\n\t\t'total_request_count_per_second':1.0988004,\n\t\t'total_request_count_success':12,\n\t\t'total_request_duration_average':495.75,\n\t\t'total_transaction_count_failure':0,\n\t\t'total_transaction_count_per_second':1.0072337,\n\t\t'total_transaction_count_success':11,\n\t\t'total_transaction_duration_average':496.9091\n\t}\n</code></pre>\n<p><em>TODO: This summary will also include SLA summaries in Jan 2020</em></p>\n<h3>Test Modifications</h3>\n<p>Metadata on a test can be modified after the test is complete, such as name, description, and status. With the required <em>--testid</em> argument as well, these modification arguments can be used individually or in combination with each other.</p>\n<pre><code>neoload --testid [test id] --updatename 'Some new test name' --updatedesc 'Some new description' --updatestatus 'PASSED|FAILED'\n</code></pre>\n<p>Additionally, plus and minus (+/-) operators can be used to append or remove the text specified from the existing name or description data. This is useful in combination with hashtag keywords to flag a test as baseline, candidate, or with an issue tracking id.</p>\n<pre><code>neoload --testid [old baseline test id] --updatedesc '-#baseline'\nneoload --testid [new test id] --updatedesc '+#baseline'\n</code></pre>\n<h3>Test Result listings and queries</h3>\n<p><em>TODO: will be coming in Jan 2020</em></p>\n<h2>Continuous Testing Examples</h2>\n<p>The main goal of the NeoLoad-CLI is to standardize the semantics of how load tests are executed across development, non-prod, and production environments. While the above instructions could be run from a contributor workstation, they can easily translated to various continuous build and deployment orchestration environments, as exampled:</p>\n<ul>\n<li><a href=\"https://github.com/Neotys-Labs/neoload-cli/tree/master/pipeline_examples/jenkins_pipeline\" rel=\"nofollow\">Jenkins</a></li>\n<li><a href=\"https://github.com/Neotys-Labs/neoload-cli/tree/master/pipeline_examples/azure_devops\" rel=\"nofollow\">Azure DevOps</a></li>\n<li><a href=\"https://github.com/Neotys-Labs/neoload-cli/tree/master/pipeline_examples/gitlab\" rel=\"nofollow\">Gitlab</a></li>\n<li>Sorry AWS CodeBuild, haven't seen any F100 clients using the pform</li>\n<li>CircleCI, TBD when <a href=\"https://www.linkedin.com/in/punkdata/\" rel=\"nofollow\">@punkdata</a> gets back to <a href=\"https://www.linkedin.com/in/paulsbruce/\" rel=\"nofollow\">@paulsbruce</a> :)</li>\n</ul>\n<h2>Packaging the CLI with Build Agents</h2>\n<p>Many of the above CI examples include a step to explicitly install the NeoLoad CLI as part of the\nbuild steps. However, if you want the CLI baked into some build agent directly so that it\nis ready for use during a job, here's a Docker example:</p>\n<p>For Docker builds:</p>\n<ul>\n<li><a href=\"https://github.com/Neotys-Labs/neoload-cli/blob/master/tests/docker/dind-python3/Dockerfile\" rel=\"nofollow\">See the test harness Alpine-based Dockerfile</a></li>\n</ul>\n<h2>IDE Integrations</h2>\n<p>Since most of what we do in an IDE is create/edit code, we're mostly interested in how\nto:</p>\n<ul>\n<li>make it easy to write API tests in YAML (automatic syntax validation)</li>\n<li>validate that tests do not contain unanticipated errors even at small scale</li>\n<li>dry-run small (smoke) load tests locally so that code check-ins will work in CI/pipeline tests</li>\n</ul>\n<p>Since the latter two cases are already covered by command-line semantics, our primary focus\nis to accelerate test authoring by providing NeoLoad as-code DSL (Domain-specific Language) validation\nand in some cases editor auto-complete.</p>\n<p>Status of IDE / editor integrations</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">IDE / Editor</th>\n<th align=\"center\">Syntax checks</th>\n<th align=\"center\">Auto-complete</th>\n<th align=\"center\">Setup steps</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Visual Studio Code</td>\n<td align=\"center\">[x]</td>\n<td align=\"center\">[x]</td>\n<td align=\"center\"><a href=\"resources/ides/vscode_settings.json\" rel=\"nofollow\">see instructions</a></td>\n</tr></tbody></table>\n<h2>Contributing</h2>\n<p>Feel free to fork this repo, make changes, <em>test locally</em>, and create a pull request. As part of your testing, you should run the built-in test suite with the following command:</p>\n<pre><code>python3 -m pytest -v tests\n</code></pre>\n<p>*NOTE: omitting the --skipslow and --skipslas arguments also runs Docker-related attaching tests, which you will need to set environment variables up for in order to successfully run the test suite. An example of these variables can be found in <a href=\"tests/example.bash_profile\" rel=\"nofollow\">example.bash_profile</a> and can be addapted for Windows execution as well.</p>\n\n          </div>"}, "last_serial": 7069238, "releases": {"0.3.10": [{"comment_text": "", "digests": {"md5": "41390f47ea98e81656cfc81d6fa80247", "sha256": "a18c4e42702de0eb7f1e60e1fb4bac35d3f1e0ff20f8546f9e544929b3942128"}, "downloads": -1, "filename": "neoload-0.3.10-py2-none-any.whl", "has_sig": false, "md5_digest": "41390f47ea98e81656cfc81d6fa80247", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 127334, "upload_time": "2020-01-09T23:29:55", "upload_time_iso_8601": "2020-01-09T23:29:55.137202Z", "url": "https://files.pythonhosted.org/packages/54/e8/b9c473a70117c85fbe98d2456b17bcc83a4afc0f73b49fbde570abf91db0/neoload-0.3.10-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "047640b28ea527bc110d204b2e35d462", "sha256": "48957aa8cf3154f2fe0ce18d09aef2be63792a41418b107f148e576d84b3247b"}, "downloads": -1, "filename": "neoload-0.3.10.tar.gz", "has_sig": false, "md5_digest": "047640b28ea527bc110d204b2e35d462", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 77392, "upload_time": "2020-01-09T23:29:57", "upload_time_iso_8601": "2020-01-09T23:29:57.239960Z", "url": "https://files.pythonhosted.org/packages/16/8d/60dd7f34f52e74d9009212e845bbefe86bcd90d962379dbf4e2396f972b5/neoload-0.3.10.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "c7abaf0307f5224750338653906dadf9", "sha256": "9b8a40560576f67ec089a130ef68fe7318459f1bd4dae453dce343a0a791c00a"}, "downloads": -1, "filename": "neoload-0.3.2-py2-none-any.whl", "has_sig": false, "md5_digest": "c7abaf0307f5224750338653906dadf9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 92175, "upload_time": "2019-11-26T20:45:35", "upload_time_iso_8601": "2019-11-26T20:45:35.839440Z", "url": "https://files.pythonhosted.org/packages/9b/1a/e0fe39496fb4d81dcf74187dc24c32040e55dcc55773c6138de7d05fd106/neoload-0.3.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7cc46480e243f0d60ee2379c8fd2c4ba", "sha256": "dd3d51050f20ea97260a130a95166419391c69856649a3b1ea884a9840db3949"}, "downloads": -1, "filename": "neoload-0.3.2.tar.gz", "has_sig": false, "md5_digest": "7cc46480e243f0d60ee2379c8fd2c4ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 52466, "upload_time": "2019-11-26T20:45:37", "upload_time_iso_8601": "2019-11-26T20:45:37.598527Z", "url": "https://files.pythonhosted.org/packages/20/e9/70479d512f86e45731a120cc880d9cc03d4bfbe575c46c043126eb29a43b/neoload-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "6742b1c138a38ce76b7bfaa822679735", "sha256": "cd4b2def245a48e8817aaa1f357edd7089b726afdbeb18062bc8d65d2de99a23"}, "downloads": -1, "filename": "neoload-0.3.3-py2-none-any.whl", "has_sig": false, "md5_digest": "6742b1c138a38ce76b7bfaa822679735", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 100694, "upload_time": "2019-11-29T19:45:08", "upload_time_iso_8601": "2019-11-29T19:45:08.217437Z", "url": "https://files.pythonhosted.org/packages/d7/ca/bdebd93ab1f3292fefc80917de82dce8cc4e5b8951b40266fc2578ee7542/neoload-0.3.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c247c207a1518a823ca72b8817c1132", "sha256": "20bc5a37f88b2a5c930aba48f81fab26ee84d39da53b073c3f55a29ddf9276c9"}, "downloads": -1, "filename": "neoload-0.3.3.tar.gz", "has_sig": false, "md5_digest": "3c247c207a1518a823ca72b8817c1132", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 59183, "upload_time": "2019-11-29T19:45:09", "upload_time_iso_8601": "2019-11-29T19:45:09.964498Z", "url": "https://files.pythonhosted.org/packages/8a/59/6c221d40a4f908fab49a99986fe9d236c60bb0f27f89dde2e3ccdf8a3b48/neoload-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "78e224629b0028ab72d61646eefa4466", "sha256": "b4788938007026369bd99e2f80686eefce589554fa3c55f81c0e33a080094c17"}, "downloads": -1, "filename": "neoload-0.3.4-py2-none-any.whl", "has_sig": false, "md5_digest": "78e224629b0028ab72d61646eefa4466", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 102111, "upload_time": "2019-12-01T20:39:34", "upload_time_iso_8601": "2019-12-01T20:39:34.558951Z", "url": "https://files.pythonhosted.org/packages/86/a1/d4678787b1727e5b97b6feb7f970720dc11d360c5c67d955febd8cf59895/neoload-0.3.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2037cbd7c4f875f749a09519c5243a3e", "sha256": "a6135cb6273ad61cd521aba63eda8eba312ff645d05ee482752d8e37df9c330d"}, "downloads": -1, "filename": "neoload-0.3.4.tar.gz", "has_sig": false, "md5_digest": "2037cbd7c4f875f749a09519c5243a3e", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 61425, "upload_time": "2019-12-01T20:39:35", "upload_time_iso_8601": "2019-12-01T20:39:35.963290Z", "url": "https://files.pythonhosted.org/packages/04/f1/46be513f165aed1e13c8033a61f611268e4c4e822d4b41914d18b35715a8/neoload-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "eb7b732eb1a46cd0ef8511b31539fc52", "sha256": "a19426e9c39e36e6b79b5701ef34e80124d995c8968d36324eb8d722104d8600"}, "downloads": -1, "filename": "neoload-0.3.5-py2-none-any.whl", "has_sig": false, "md5_digest": "eb7b732eb1a46cd0ef8511b31539fc52", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 109554, "upload_time": "2019-12-11T16:38:44", "upload_time_iso_8601": "2019-12-11T16:38:44.308214Z", "url": "https://files.pythonhosted.org/packages/34/54/a46d58dd45e362243b2bd3eb3252c461c17bd2dfef86fd7cf5dd81d9b873/neoload-0.3.5-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5f6fdfd7007875c6723392b8f939616", "sha256": "45130e38cec46af0879f41ed1cf1a671f1613e520bcfd1ca76a1fa3491ccbf81"}, "downloads": -1, "filename": "neoload-0.3.5.tar.gz", "has_sig": false, "md5_digest": "f5f6fdfd7007875c6723392b8f939616", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 67349, "upload_time": "2019-12-11T16:38:46", "upload_time_iso_8601": "2019-12-11T16:38:46.165165Z", "url": "https://files.pythonhosted.org/packages/dc/f4/1581a1df960ae3e0535367a9cff786901cf487a29e7599f9815be6123798/neoload-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "60e1fce56dc870fc1d9a3460e6d054d0", "sha256": "3183767a20b2e2b3bae002a3bc4661a376d4b56bf9a4f9d61598b803f5cf6bf6"}, "downloads": -1, "filename": "neoload-0.3.6-py2-none-any.whl", "has_sig": false, "md5_digest": "60e1fce56dc870fc1d9a3460e6d054d0", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 124079, "upload_time": "2019-12-17T21:21:30", "upload_time_iso_8601": "2019-12-17T21:21:30.835172Z", "url": "https://files.pythonhosted.org/packages/3e/d7/76224a4998a47040e4bb5f82a0bf810efe97814e78b524ad9bfee0320aaa/neoload-0.3.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c7419956a8e6cf27af86217de1ffd7b", "sha256": "c77294a5b249faa099dfa4856c2a91c4b09f5fdbfa87e47d68dc00131eac5d4a"}, "downloads": -1, "filename": "neoload-0.3.6.tar.gz", "has_sig": false, "md5_digest": "9c7419956a8e6cf27af86217de1ffd7b", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 74323, "upload_time": "2019-12-17T21:21:32", "upload_time_iso_8601": "2019-12-17T21:21:32.230785Z", "url": "https://files.pythonhosted.org/packages/16/15/e32b2058ecdec1691d5a1b4cdd3ad7e9b3dde321e9fbc502fa9e47896e70/neoload-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "5efc163a4e5f41608752affccff649a6", "sha256": "0d1a5ee1b4a85ee42824b816adcf1cf4b0396652137da06899b7987775e5bae4"}, "downloads": -1, "filename": "neoload-0.3.7-py2-none-any.whl", "has_sig": false, "md5_digest": "5efc163a4e5f41608752affccff649a6", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 126405, "upload_time": "2019-12-31T19:30:49", "upload_time_iso_8601": "2019-12-31T19:30:49.210395Z", "url": "https://files.pythonhosted.org/packages/1d/d9/3d9b3dcc2e6b4dd1e5560764a3374e34170ca90a897500d1ea1c436e9964/neoload-0.3.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f49985aa20bbdf901cbac59b556a37a", "sha256": "bf7de41e65589428bc8eb399798324ffbb7c38eab7db7344e15bf9f645359a19"}, "downloads": -1, "filename": "neoload-0.3.7.tar.gz", "has_sig": false, "md5_digest": "2f49985aa20bbdf901cbac59b556a37a", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 76443, "upload_time": "2019-12-31T19:30:50", "upload_time_iso_8601": "2019-12-31T19:30:50.874691Z", "url": "https://files.pythonhosted.org/packages/8d/d9/b9bff9a9c0d3cf4495af10abf8da6a7631f0cf94901d6ca851218ef7be0f/neoload-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "c6c1d449fa8e916525839dd82944b208", "sha256": "1864b56b50dd36f555de466ac9e81bdf9dbd0ab14be5aafe04b3037e151a6213"}, "downloads": -1, "filename": "neoload-0.3.8-py2-none-any.whl", "has_sig": false, "md5_digest": "c6c1d449fa8e916525839dd82944b208", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 126780, "upload_time": "2020-01-01T18:13:31", "upload_time_iso_8601": "2020-01-01T18:13:31.595182Z", "url": "https://files.pythonhosted.org/packages/c9/a9/cc8493fde2c10bb74ae5d0b4763b23e60496affdfcbe4c3f86b56b3ee24a/neoload-0.3.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b13e4eaba2a9d06cdd377fb9b7b301e1", "sha256": "05375fc784c92b92d0b8acf51a42bddcae978be41ca077b82daec40b902fb205"}, "downloads": -1, "filename": "neoload-0.3.8.tar.gz", "has_sig": false, "md5_digest": "b13e4eaba2a9d06cdd377fb9b7b301e1", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 76765, "upload_time": "2020-01-01T18:13:33", "upload_time_iso_8601": "2020-01-01T18:13:33.358053Z", "url": "https://files.pythonhosted.org/packages/6a/f6/b929bf4063be377729ef0ef6200c196524815013f0ed47df1ab9480f692b/neoload-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "aed0a9d181d190630ca16120e2e8e912", "sha256": "33d045423d6b5a56d3440e27f6d01c31d1b1c5cf0e860c6e7305eff76c6d2e20"}, "downloads": -1, "filename": "neoload-0.3.9-py2-none-any.whl", "has_sig": false, "md5_digest": "aed0a9d181d190630ca16120e2e8e912", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 127260, "upload_time": "2020-01-07T20:08:03", "upload_time_iso_8601": "2020-01-07T20:08:03.438333Z", "url": "https://files.pythonhosted.org/packages/51/f6/87ed10cb52e4e3e1ebed39479492de4ae3d5aa1d66c22069fb87b72f75f9/neoload-0.3.9-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50f81d1a32a0806b9ef6e6057ce23370", "sha256": "118221839aa46f7d4c6d8923016fa2f8a962946bfd95ea1870537819a9616f06"}, "downloads": -1, "filename": "neoload-0.3.9.tar.gz", "has_sig": false, "md5_digest": "50f81d1a32a0806b9ef6e6057ce23370", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 77352, "upload_time": "2020-01-07T20:08:05", "upload_time_iso_8601": "2020-01-07T20:08:05.314077Z", "url": "https://files.pythonhosted.org/packages/b7/37/d20c571c451ab7c82656dc6b5c74dc65ff717b956b8b4fb4e02984ba0539/neoload-0.3.9.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "318c3595e4ced6adc00e4e35fe5b3969", "sha256": "2a5342204c11724c53d1cea7e55845980653affee7343bf55e14e5b429194a82"}, "downloads": -1, "filename": "neoload-0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "318c3595e4ced6adc00e4e35fe5b3969", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 128126, "upload_time": "2020-01-15T23:53:49", "upload_time_iso_8601": "2020-01-15T23:53:49.454065Z", "url": "https://files.pythonhosted.org/packages/15/14/762a8fa9a76dc9feb534b2cf59b482008264291d59a123b901bd7ef9486b/neoload-0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c89397dc6bab1067142ef9cd4998a046", "sha256": "6afbdea854679cb8f9eaebc54a9154ced079c69891d6d6c21fd80c50ba4c6713"}, "downloads": -1, "filename": "neoload-0.4.tar.gz", "has_sig": false, "md5_digest": "c89397dc6bab1067142ef9cd4998a046", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 78224, "upload_time": "2020-01-15T23:53:52", "upload_time_iso_8601": "2020-01-15T23:53:52.209285Z", "url": "https://files.pythonhosted.org/packages/d0/97/559dc111572f69e07f619815bdb59fb41f10f092e4642d3e11e40607f0a5/neoload-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "2376b11d76e7e45c35f25b22a26a9f63", "sha256": "13a7dc8f654e399bb68caf505428ebb0778ee23d98c6b6b6219660444fed689a"}, "downloads": -1, "filename": "neoload-0.4.1-py2-none-any.whl", "has_sig": false, "md5_digest": "2376b11d76e7e45c35f25b22a26a9f63", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 128244, "upload_time": "2020-01-17T17:48:56", "upload_time_iso_8601": "2020-01-17T17:48:56.878905Z", "url": "https://files.pythonhosted.org/packages/c3/bd/7ab0386e905c6359295069daea4ff1135891d9db7b3e2efdba2f34f79d34/neoload-0.4.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1619156d0aee62b3ea12d6f375beb41d", "sha256": "d1f315cb738dd019a6cca43ef433f04cc740673ddce72b03795c4bf1a1ea084e"}, "downloads": -1, "filename": "neoload-0.4.1.tar.gz", "has_sig": false, "md5_digest": "1619156d0aee62b3ea12d6f375beb41d", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 78365, "upload_time": "2020-01-17T17:48:59", "upload_time_iso_8601": "2020-01-17T17:48:59.022166Z", "url": "https://files.pythonhosted.org/packages/bf/84/a2fc6e092e8525f074d82bbe4c6c8455944ae5a979571bb76584e78cd053/neoload-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "5b5e5a54d2af17afdfbba5766507e64f", "sha256": "f15c00c7923eb040f69496e45858ddcbcd2004460ca055a5895e6057d2de327b"}, "downloads": -1, "filename": "neoload-0.4.2-py2-none-any.whl", "has_sig": false, "md5_digest": "5b5e5a54d2af17afdfbba5766507e64f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">3.5.2", "size": 129982, "upload_time": "2020-01-28T16:22:19", "upload_time_iso_8601": "2020-01-28T16:22:19.341072Z", "url": "https://files.pythonhosted.org/packages/ac/b8/46c30279ed65a58e04bce81025cf71d558c6d522c3d76f1e1a9a69e2551a/neoload-0.4.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "271e1a8665f1ac9d3d4c9b158dcf609f", "sha256": "5ee0dcb48803e56d3144adcc7491fc6393cda183fba709db4d86ea271aaa2fe1"}, "downloads": -1, "filename": "neoload-0.4.2.tar.gz", "has_sig": false, "md5_digest": "271e1a8665f1ac9d3d4c9b158dcf609f", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 81860, "upload_time": "2020-01-28T16:22:21", "upload_time_iso_8601": "2020-01-28T16:22:21.011871Z", "url": "https://files.pythonhosted.org/packages/90/16/ae4c84293955bdef2b624db7b644597e38048112cbabc861e7a3a1deb2f9/neoload-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "52dbfc27d4d0a99677011689496db859", "sha256": "f18a5ae8a93350face3ddc4c7226e7652a107f243e629bfb25d16677253642ce"}, "downloads": -1, "filename": "neoload-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "52dbfc27d4d0a99677011689496db859", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.2", "size": 130624, "upload_time": "2020-03-02T01:39:38", "upload_time_iso_8601": "2020-03-02T01:39:38.940986Z", "url": "https://files.pythonhosted.org/packages/53/b3/06fde06404fd55a17cc5c9d057b4924c11cfb7128d8e030bea51be78a8b3/neoload-0.4.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d6400331a6a666b13ab36d6231ab5334", "sha256": "a6a2c4800c1c18ab49cbacacbc6ebdeb104c6ddc514b89b8ea74846bd92b8dac"}, "downloads": -1, "filename": "neoload-0.4.3.tar.gz", "has_sig": false, "md5_digest": "d6400331a6a666b13ab36d6231ab5334", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 82616, "upload_time": "2020-03-02T01:39:40", "upload_time_iso_8601": "2020-03-02T01:39:40.292321Z", "url": "https://files.pythonhosted.org/packages/fa/41/da9c8b05a8f006a0a1a6322a06b3e778a38961da26c7ac0d9bbfe9e1f1f1/neoload-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "6a7ce341f47f8d2da42ca27504dc3b90", "sha256": "bdeddf80399e34812bf63eb841247bf12458ebba7da96b5f495a0ae589482e2e"}, "downloads": -1, "filename": "neoload-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6a7ce341f47f8d2da42ca27504dc3b90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.2", "size": 132413, "upload_time": "2020-03-31T02:06:46", "upload_time_iso_8601": "2020-03-31T02:06:46.234274Z", "url": "https://files.pythonhosted.org/packages/d4/22/54da81662d1925df77b48a453930588719bd9c57cebdd557d328105e0bae/neoload-0.4.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7c9dbb486ae606129e45a018ceb1d06d", "sha256": "21f24bfa46a60228b2c52e9fac7578442fb4d7f01b20c99057aa8f36c9172c50"}, "downloads": -1, "filename": "neoload-0.4.4.tar.gz", "has_sig": false, "md5_digest": "7c9dbb486ae606129e45a018ceb1d06d", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 84439, "upload_time": "2020-03-31T02:06:47", "upload_time_iso_8601": "2020-03-31T02:06:47.406343Z", "url": "https://files.pythonhosted.org/packages/02/8e/236b6097a0e788689ed00188f088b4efe9de1d147af73e514a3c7b4492f9/neoload-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "dfed2eeed9cccaedf3a925f1ab73c08f", "sha256": "1ba22c629083970ff89cd64bdb93d801cdf1651e3275a8e041dc8bb196747b27"}, "downloads": -1, "filename": "neoload-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "dfed2eeed9cccaedf3a925f1ab73c08f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.2", "size": 132856, "upload_time": "2020-04-15T14:28:59", "upload_time_iso_8601": "2020-04-15T14:28:59.141810Z", "url": "https://files.pythonhosted.org/packages/19/5d/1ee0463550677e7e9fb9d16dd4dde2fbbb98f39a2f71b139a4b483c5f324/neoload-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e1c1400f50ac540b51de9e21cd76530", "sha256": "96d6801d68c601d4b63b81f849175eb8bb7330484f118f1ebe3a2cc2f576ba1a"}, "downloads": -1, "filename": "neoload-0.4.5.tar.gz", "has_sig": false, "md5_digest": "3e1c1400f50ac540b51de9e21cd76530", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 85343, "upload_time": "2020-04-15T14:29:00", "upload_time_iso_8601": "2020-04-15T14:29:00.414429Z", "url": "https://files.pythonhosted.org/packages/9a/01/7e733365367b397e0e041c351accb0e7d69725691143d8e3699cc31e2f9e/neoload-0.4.5.tar.gz", "yanked": false}], "1.0.0rc2": [{"comment_text": "", "digests": {"md5": "219766f5282545ec53948bd13e745463", "sha256": "f5faff8c866ce8b67a7e838e8162a38f8b07530305626e36e1f7ec35bc803dc4"}, "downloads": -1, "filename": "neoload-1.0.0rc2.tar.gz", "has_sig": false, "md5_digest": "219766f5282545ec53948bd13e745463", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 193776, "upload_time": "2020-04-21T16:36:38", "upload_time_iso_8601": "2020-04-21T16:36:38.079465Z", "url": "https://files.pythonhosted.org/packages/e2/e3/9a96ca1b78fa47bcb43670421d49bf2ad86409e22c84114f006e2e65c0e8/neoload-1.0.0rc2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dfed2eeed9cccaedf3a925f1ab73c08f", "sha256": "1ba22c629083970ff89cd64bdb93d801cdf1651e3275a8e041dc8bb196747b27"}, "downloads": -1, "filename": "neoload-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "dfed2eeed9cccaedf3a925f1ab73c08f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.2", "size": 132856, "upload_time": "2020-04-15T14:28:59", "upload_time_iso_8601": "2020-04-15T14:28:59.141810Z", "url": "https://files.pythonhosted.org/packages/19/5d/1ee0463550677e7e9fb9d16dd4dde2fbbb98f39a2f71b139a4b483c5f324/neoload-0.4.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e1c1400f50ac540b51de9e21cd76530", "sha256": "96d6801d68c601d4b63b81f849175eb8bb7330484f118f1ebe3a2cc2f576ba1a"}, "downloads": -1, "filename": "neoload-0.4.5.tar.gz", "has_sig": false, "md5_digest": "3e1c1400f50ac540b51de9e21cd76530", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 85343, "upload_time": "2020-04-15T14:29:00", "upload_time_iso_8601": "2020-04-15T14:29:00.414429Z", "url": "https://files.pythonhosted.org/packages/9a/01/7e733365367b397e0e041c351accb0e7d69725691143d8e3699cc31e2f9e/neoload-0.4.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:29 2020"}