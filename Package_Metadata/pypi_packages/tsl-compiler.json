{"info": {"author": "Dan Borufka", "author_email": "danborufka@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# TSL \u00e2\u20ac\u201c Text Scraping Language\nPython package for processing of a scraping language in pseudo-code\n\n*The TSL Python package allows you to write and execute pseudo-code style language to process text files with Regular expressions and simple logic. This gives an easy entry to data mining to non-programmers.*\n\nYou can either run it as a CLI using `python TSL.py myScript.tsl` or use the **TSLEngine class** like this:\n\n```python\nfrom TSLEngine import TSLEngine\n\nTSL = TSLEngine('myScript.tsl')\n\nif TSL.task:\n    TSL.run()\n```\n\n## Example:\n![Sublime Text Syntax Highlighting](https://raw.githubusercontent.com/polygoat/TSL/master/preview.png \"Sublime Text Syntax Highlighting\")\n\n... This will read all lines from `stats/milestones.csv`, take all lines, splits them into columns, selects the second column and saves the corresponding row into a file labeled by said column (e.g. `stats/31-03-2019.txt`).\n\n---\n# Index\n### [How does it work?](#how-does-it-work)\n### [Setup](#setup)\n### [Available TSL Commands](#available-tsl-commands)\n### [Templating](#templating)\n---\n# How does it work?\nTSL runs through the script line by line and executes corresponding Python code in the background. File handling, complex data types, and templating are built-in for rapid prototyping. Every line starts with a command followed by a space and space-separated arguments. \nMost commands support optional clauses like `as ...` (storage variable) or `in ...` (file handle) to supply further information.\n\nA command's inputs and outputs can be **strings** or **collections of strings**. In ladder case, TSL iterates over a collection's strings and applies the command to each of them. The commands `as`, `remember`, `split`, and `for every` loops change the context to the provided variable. This means you can omit `as` clauses in the following commands, always automatically referring to the context. To reference variables rather than strings use square brackets. `log something` will log the string \"something\", while `log [something]` will log the content of the variable called _something_.\n\n---\n# Setup\nUse `pip install tsl` to install the package.\n\n---\n# Available TSL Commands\n\n## File & system operations\n\n### bash `<command>` as `<variable>`\n*Runs a bash command and saves the returned output to a variable.*\n\n**Example:**\n```fortran\n    bash git branch as branches\n```\n\n### empty `[<filepath>]`\n*Opens up a file and deletes all its content.*\n\n**Example:**\n```fortran\n    in wordbag.txt\n    \tempty\n```\n\n### in *`<path/to/textfile.txt>`*\n*Opens up a file and reads all its lines. You can log the lines using `log line`\nAll future file operations are refering to this one until your next \"in\" statement.\nYou'll usually see this followed by a `take` or `find all` command*\n\n**Example:**\n```fortran\n    in stats/01092019.txt\n```\n\n### in *`<path/to/folder>`*\n*Creates the nested directory structure if it doesn't exist. Otherwise, the path will be used as context for future operations.*\n\n**Example:**\n```fortran\n    in \"/Sublime Text/Packages\"\n        count files as fileCount\n        log [fileCount]\n```\n\n### save `[as <filepath>]`\n*Saves the latest collection in the given filename.*\n\n**Example:**\n```fortran\n    save as runner/cleaned_userinputs.txt\n```\n\n### write `[<variable>]`\n*Writes given variable (or the results of the last `find all`) into the last file opened with `in`*\n\n**Example:**\n```fortran\n    write [userIds]\n```\n\n### add *`<string | variable>`* [to `<filepath>`]\n*Appends content to a file different from the currently open one*\n\n**Example:**\n```fortran\n    add [libraries] to libs.txt\n```\n\n---\n## Selections\n\n### select nth [of `[input]`]\n*Selects a specific item of a collection, given its index.*\n\n**Example:**\n```fortran\n    in bigrams.txt   \n        select 4th\n```\n\n\n### select words [of `[input]`][as `<output>`]\n*Selects all words found in the last opened file.*\n\n**Example:**\n```fortran\n    in utterances.txt\t\n    \tselect words\n```\n\n### select [from *`<string | RegEx | int>`*] [to *`<string | RegEx | int>`*]\n*Selects the range from the indicated string/RegEX/number until the indicated string or regular expression or number. Note that we start counting with 1 to keep it natural*\n\n**Example:**\n```fortran\n    select from \"accessibilityApp\" to \"[v:\"\n    select from \\s to \\s\n    select from 1 to \"[v:samsung.tvSearchAndPlay.Genres:drama]\"\n    select two of [bigrams]\n```\n\n### select from `<string | RegEx | integer>`\n*Selects the range from the indicated string / regular expression / number until the end of the line*\n\n****Example:**\n```fortran\n    select from \"dateTime\"\n    select from \\d\\d\\d\n    select from 122 \n```\n\n### select to `<string | RegEx | integer>`\n*Selects the range from the beginning of the line to the indicated string / regular expression / number.*\n\n**Example:**\n```fortran\n    select to \"dateTime\"\n    select to \\W\n    select to 5th  \n    select to 370  \n```\n\n---\n## Debugging & calculations\n\n### be `<property>`\n*Sets one of the following properties of TSL to true:*\n\n`verbose` | `active`\n\n### calculate `operation` as `<variable>`\n*Calculates mathematical operations*\n\n**Example:**\n```fortran\n    calculate (5 * 4) / 2 as ratio\n```\n\n### log *`<variable | string>`*\n*Prints to the console. Use strings with template tags (e.g. \"here is: [varName]\") for variables*\n\n### count `<variable>` as `<countVariable>`\n*Stores the count of lines in a selection.*\n\n**Example:**\n```fortran\n    count [entries-per-day] as frequency\n    log [frequency]\n```\n\n### count *`<files | folders>`* in `<path/to/dir>` as `<countVariable>`\n*Stores the count of files or folders in a directory.*\n\n**Example:**\n```fortran\n    count files in \"C:\\Windows\" as systemFiles\n    log \"Exactly [systemFiles] system files found.\"\n```\n\n---\n## Manipulation\n\n### change `<varName>` to `<formula>`\n*Iterates over a collection and changes all entries according to the template tag. Use brackets to tag variables, like so: `[varName]`*\n\n**Example:**\n```fortran\n    change [salute] to \"Hi, [salute] #[i]\"\n```\n*will e.g. change \"my name is Dan\" to \"Hi, my name is Dan #1\"*\n\n### combine `<setName>` with `<setName>` as `<varName>`\n*Merges two sets and stores it in a new variable.*\n\n**Example:**\n```fortran\n    combine [vowels] with [consonants] as letters\n```\n\n### find all *`<string | RegEx>`* [in `<varName>`] [as `<varName>`]\n*Finds all occurrences of a string or regular expression in the lines of the currently open file or a stored collection. The results of this search are automatically stored in a variable `found`*\n\nExample:\n```fortran\n    in corpus_de.txt\n    \ttake lines as utterances\n    \tfind all [aeiou]+ in [utterances]\n    \tlog [found]\n```\n\n### remove lines\n*Removes the last selected lines (e.g. the ones found using a `find all`)*\n\n### replace *`<string | RegEx>`* by `<string>` [in `<variable>`]\n*Replaces given string or regular expression by another string, optionally in a particular collection.*\n\n**Example:**\n```fortran\n    replace \\W+ by \"_\"\n```\n\n### sort [`<varName>`]\n\n*Sorts either the supplied or last referenced collection alphanumerically (in ascending order).*\n\n### split *`<string|RegEx>`* by `<delimiter>` as `<variable>`\nSplits a string into a collection using delimiter.\n\n**Example:**\n```fortran\n    split apples;bananas;oranges by ; as fruits\n    log [fruits]\n```\n\n### unique lines\n*Removes all duplicate lines from the last referenced collection.*\n\n## Memory\n\n### remember *`<string | variable>`* as `<variableName>`\n*Stores a string or variable in a new variable.*\n\n### take *`<lines | results | files | folders>`* [as `<name>`]\n*Changes the selected collection to whole lines (`take lines as ...`), results of a `find all` directive, or to the files found in a folder specified with a preceding `in <folderPath>` directive.*\n\n**Example:**\n```fortran\n    in source.txt\n    \tfind all <[^>]+>\n    \ttake lines as htmlLines\n    \tlog [htmlLines]\n\n    in libraries/de\n    \ttake files as germanLibs\n    \tlog [germanLibs]\n```\n\n---\n## Flow\n\n### for every `<variable>`\n### ---\n\n*Loops through a collection, populating the variable `i` with the current index. From within the loop, the item of the collection can be accessed using the variable name in singular (books -> book, babies -> baby).*\n\n*If a collection is empty, the for-loop is skipped. This becomes useful to create conditional flows.*\n\n*Always terminate a loop with three consecutive hyphens in a separte line.*\n\n**Example:**\n```fortran\n    in corpus.txt\n    \tfind all [^\\b]+\\b[^\\b]+ as bigrams\n    \tfor every [bigram]\n    \t\tlog \"#[i]: [bigram]\"\n    \t---\n```\n\n### run `path/to/script.tsl`\n*Runs another TSL file*\n\nThe external TSL file will receive the same scope as inlined code.\n\n---\n# Templating\n\nTemplates are enclosed in square brackets and can appear in quoted strings, file paths, and even within regular expressions:\n```fortran\n{\n    remember \"\\CommNetwork\" as domain\n    in user.txt\n        find all \\b[domain][^:]: as user\n        for every [user]\n            select from 0 to -1\n            in \"/users/[user]/credentials.txt\"\n                change [user] to \"[user]:pleaseresetme\"\n                add [user]\n        ---\n}\n```\nIf the variables can not be found, the template tags remain untouched, including square brackets. This allows us to easily mix them in with regular expressions.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/polygoat/TSL", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tsl-compiler", "package_url": "https://pypi.org/project/tsl-compiler/", "platform": "", "project_url": "https://pypi.org/project/tsl-compiler/", "project_urls": {"Homepage": "https://github.com/polygoat/TSL"}, "release_url": "https://pypi.org/project/tsl-compiler/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Text Scraping Language package", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TSL \u00e2\u20ac\u201c Text Scraping Language</h1>\n<p>Python package for processing of a scraping language in pseudo-code</p>\n<p><em>The TSL Python package allows you to write and execute pseudo-code style language to process text files with Regular expressions and simple logic. This gives an easy entry to data mining to non-programmers.</em></p>\n<p>You can either run it as a CLI using <code>python TSL.py myScript.tsl</code> or use the <strong>TSLEngine class</strong> like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">TSLEngine</span> <span class=\"kn\">import</span> <span class=\"n\">TSLEngine</span>\n\n<span class=\"n\">TSL</span> <span class=\"o\">=</span> <span class=\"n\">TSLEngine</span><span class=\"p\">(</span><span class=\"s1\">'myScript.tsl'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">TSL</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">:</span>\n    <span class=\"n\">TSL</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h2>Example:</h2>\n<p><img alt=\"Sublime Text Syntax Highlighting\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/375f88f01117e8a33a3fc3ad6c8309bed98c4073/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706f6c79676f61742f54534c2f6d61737465722f707265766965772e706e67\"></p>\n<p>... This will read all lines from <code>stats/milestones.csv</code>, take all lines, splits them into columns, selects the second column and saves the corresponding row into a file labeled by said column (e.g. <code>stats/31-03-2019.txt</code>).</p>\n<hr>\n<h1>Index</h1>\n<h3><a href=\"#how-does-it-work\" rel=\"nofollow\">How does it work?</a></h3>\n<h3><a href=\"#setup\" rel=\"nofollow\">Setup</a></h3>\n<h3><a href=\"#available-tsl-commands\" rel=\"nofollow\">Available TSL Commands</a></h3>\n<h3><a href=\"#templating\" rel=\"nofollow\">Templating</a></h3>\n<hr>\n<h1>How does it work?</h1>\n<p>TSL runs through the script line by line and executes corresponding Python code in the background. File handling, complex data types, and templating are built-in for rapid prototyping. Every line starts with a command followed by a space and space-separated arguments.\nMost commands support optional clauses like <code>as ...</code> (storage variable) or <code>in ...</code> (file handle) to supply further information.</p>\n<p>A command's inputs and outputs can be <strong>strings</strong> or <strong>collections of strings</strong>. In ladder case, TSL iterates over a collection's strings and applies the command to each of them. The commands <code>as</code>, <code>remember</code>, <code>split</code>, and <code>for every</code> loops change the context to the provided variable. This means you can omit <code>as</code> clauses in the following commands, always automatically referring to the context. To reference variables rather than strings use square brackets. <code>log something</code> will log the string \"something\", while <code>log [something]</code> will log the content of the variable called <em>something</em>.</p>\n<hr>\n<h1>Setup</h1>\n<p>Use <code>pip install tsl</code> to install the package.</p>\n<hr>\n<h1>Available TSL Commands</h1>\n<h2>File &amp; system operations</h2>\n<h3>bash <code>&lt;command&gt;</code> as <code>&lt;variable&gt;</code></h3>\n<p><em>Runs a bash command and saves the returned output to a variable.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">bash</span> <span class=\"n\">git</span> <span class=\"n\">branch</span> <span class=\"n\">as</span> <span class=\"n\">branches</span>\n</pre>\n<h3>empty <code>[&lt;filepath&gt;]</code></h3>\n<p><em>Opens up a file and deletes all its content.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">in</span> <span class=\"n\">wordbag</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n    \t<span class=\"n\">empty</span>\n</pre>\n<h3>in <em><code>&lt;path/to/textfile.txt&gt;</code></em></h3>\n<p><em>Opens up a file and reads all its lines. You can log the lines using <code>log line</code>\nAll future file operations are refering to this one until your next \"in\" statement.\nYou'll usually see this followed by a <code>take</code> or <code>find all</code> command</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">in</span> <span class=\"n\">stats</span><span class=\"o\">/</span><span class=\"mi\">0109201</span><span class=\"mf\">9.</span><span class=\"n\">txt</span>\n</pre>\n<h3>in <em><code>&lt;path/to/folder&gt;</code></em></h3>\n<p><em>Creates the nested directory structure if it doesn't exist. Otherwise, the path will be used as context for future operations.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">in</span> <span class=\"s2\">\"/Sublime Text/Packages\"</span>\n        <span class=\"nb\">count </span><span class=\"n\">files</span> <span class=\"n\">as</span> <span class=\"n\">fileCount</span>\n        <span class=\"nb\">log</span> <span class=\"p\">[</span><span class=\"n\">fileCount</span><span class=\"p\">]</span>\n</pre>\n<h3>save <code>[as &lt;filepath&gt;]</code></h3>\n<p><em>Saves the latest collection in the given filename.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"k\">save </span><span class=\"n\">as</span> <span class=\"n\">runner</span><span class=\"o\">/</span><span class=\"n\">cleaned_userinputs</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n</pre>\n<h3>write <code>[&lt;variable&gt;]</code></h3>\n<p><em>Writes given variable (or the results of the last <code>find all</code>) into the last file opened with <code>in</code></em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"k\">write</span> <span class=\"p\">[</span><span class=\"n\">userIds</span><span class=\"p\">]</span>\n</pre>\n<h3>add <em><code>&lt;string | variable&gt;</code></em> [to <code>&lt;filepath&gt;</code>]</h3>\n<p><em>Appends content to a file different from the currently open one</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">add</span> <span class=\"p\">[</span><span class=\"n\">libraries</span><span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"n\">libs</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n</pre>\n<hr>\n<h2>Selections</h2>\n<h3>select nth [of <code>[input]</code>]</h3>\n<p><em>Selects a specific item of a collection, given its index.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">in</span> <span class=\"n\">bigrams</span><span class=\"p\">.</span><span class=\"n\">txt</span>   \n        <span class=\"k\">select </span><span class=\"mi\">4</span><span class=\"n\">th</span>\n</pre>\n<h3>select words [of <code>[input]</code>][as <code>&lt;output&gt;</code>]</h3>\n<p><em>Selects all words found in the last opened file.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">in</span> <span class=\"n\">utterances</span><span class=\"p\">.</span><span class=\"n\">txt</span>\t\n    \t<span class=\"k\">select </span><span class=\"n\">words</span>\n</pre>\n<h3>select [from <em><code>&lt;string | RegEx | int&gt;</code></em>] [to <em><code>&lt;string | RegEx | int&gt;</code></em>]</h3>\n<p><em>Selects the range from the indicated string/RegEX/number until the indicated string or regular expression or number. Note that we start counting with 1 to keep it natural</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"k\">select </span><span class=\"n\">from</span> <span class=\"s2\">\"accessibilityApp\"</span> <span class=\"n\">to</span> <span class=\"s2\">\"[v:\"</span>\n    <span class=\"k\">select </span><span class=\"n\">from</span> <span class=\"err\">\\</span><span class=\"n\">s</span> <span class=\"n\">to</span> <span class=\"err\">\\</span><span class=\"n\">s</span>\n    <span class=\"k\">select </span><span class=\"n\">from</span> <span class=\"mi\">1</span> <span class=\"n\">to</span> <span class=\"s2\">\"[v:samsung.tvSearchAndPlay.Genres:drama]\"</span>\n    <span class=\"k\">select </span><span class=\"n\">two</span> <span class=\"n\">of</span> <span class=\"p\">[</span><span class=\"n\">bigrams</span><span class=\"p\">]</span>\n</pre>\n<h3>select from <code>&lt;string | RegEx | integer&gt;</code></h3>\n<p><em>Selects the range from the indicated string / regular expression / number until the end of the line</em></p>\n<p>**<strong>Example:</strong></p>\n<pre>    <span class=\"k\">select </span><span class=\"n\">from</span> <span class=\"s2\">\"dateTime\"</span>\n    <span class=\"k\">select </span><span class=\"n\">from</span> <span class=\"err\">\\</span><span class=\"n\">d</span><span class=\"err\">\\</span><span class=\"n\">d</span><span class=\"err\">\\</span><span class=\"n\">d</span>\n    <span class=\"k\">select </span><span class=\"n\">from</span> <span class=\"mi\">122</span> \n</pre>\n<h3>select to <code>&lt;string | RegEx | integer&gt;</code></h3>\n<p><em>Selects the range from the beginning of the line to the indicated string / regular expression / number.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"k\">select </span><span class=\"n\">to</span> <span class=\"s2\">\"dateTime\"</span>\n    <span class=\"k\">select </span><span class=\"n\">to</span> <span class=\"err\">\\</span><span class=\"n\">W</span>\n    <span class=\"k\">select </span><span class=\"n\">to</span> <span class=\"mi\">5</span><span class=\"n\">th</span>  \n    <span class=\"k\">select </span><span class=\"n\">to</span> <span class=\"mi\">370</span>  \n</pre>\n<hr>\n<h2>Debugging &amp; calculations</h2>\n<h3>be <code>&lt;property&gt;</code></h3>\n<p><em>Sets one of the following properties of TSL to true:</em></p>\n<p><code>verbose</code> | <code>active</code></p>\n<h3>calculate <code>operation</code> as <code>&lt;variable&gt;</code></h3>\n<p><em>Calculates mathematical operations</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">calculate</span> <span class=\"p\">(</span><span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"n\">as</span> <span class=\"n\">ratio</span>\n</pre>\n<h3>log <em><code>&lt;variable | string&gt;</code></em></h3>\n<p><em>Prints to the console. Use strings with template tags (e.g. \"here is: [varName]\") for variables</em></p>\n<h3>count <code>&lt;variable&gt;</code> as <code>&lt;countVariable&gt;</code></h3>\n<p><em>Stores the count of lines in a selection.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"nb\">count</span> <span class=\"p\">[</span><span class=\"n\">entries</span><span class=\"o\">-</span><span class=\"n\">per</span><span class=\"o\">-</span><span class=\"n\">day</span><span class=\"p\">]</span> <span class=\"n\">as</span> <span class=\"n\">frequency</span>\n    <span class=\"nb\">log</span> <span class=\"p\">[</span><span class=\"n\">frequency</span><span class=\"p\">]</span>\n</pre>\n<h3>count <em><code>&lt;files | folders&gt;</code></em> in <code>&lt;path/to/dir&gt;</code> as <code>&lt;countVariable&gt;</code></h3>\n<p><em>Stores the count of files or folders in a directory.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"nb\">count </span><span class=\"n\">files</span> <span class=\"n\">in</span> <span class=\"s2\">\"C:\\Windows\"</span> <span class=\"n\">as</span> <span class=\"n\">systemFiles</span>\n    <span class=\"nb\">log</span> <span class=\"s2\">\"Exactly [systemFiles] system files found.\"</span>\n</pre>\n<hr>\n<h2>Manipulation</h2>\n<h3>change <code>&lt;varName&gt;</code> to <code>&lt;formula&gt;</code></h3>\n<p><em>Iterates over a collection and changes all entries according to the template tag. Use brackets to tag variables, like so: <code>[varName]</code></em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">change</span> <span class=\"p\">[</span><span class=\"n\">salute</span><span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"s2\">\"Hi, [salute] #[i]\"</span>\n</pre>\n<p><em>will e.g. change \"my name is Dan\" to \"Hi, my name is Dan #1\"</em></p>\n<h3>combine <code>&lt;setName&gt;</code> with <code>&lt;setName&gt;</code> as <code>&lt;varName&gt;</code></h3>\n<p><em>Merges two sets and stores it in a new variable.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">combine</span> <span class=\"p\">[</span><span class=\"n\">vowels</span><span class=\"p\">]</span> <span class=\"n\">with</span> <span class=\"p\">[</span><span class=\"n\">consonants</span><span class=\"p\">]</span> <span class=\"n\">as</span> <span class=\"n\">letters</span>\n</pre>\n<h3>find all <em><code>&lt;string | RegEx&gt;</code></em> [in <code>&lt;varName&gt;</code>] [as <code>&lt;varName&gt;</code>]</h3>\n<p><em>Finds all occurrences of a string or regular expression in the lines of the currently open file or a stored collection. The results of this search are automatically stored in a variable <code>found</code></em></p>\n<p>Example:</p>\n<pre>    <span class=\"n\">in</span> <span class=\"n\">corpus_de</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n    \t<span class=\"n\">take</span> <span class=\"n\">lines</span> <span class=\"n\">as</span> <span class=\"n\">utterances</span>\n    \t<span class=\"n\">find</span> <span class=\"k\">all</span> <span class=\"p\">[</span><span class=\"n\">aeiou</span><span class=\"p\">]</span><span class=\"o\">+</span> <span class=\"n\">in</span> <span class=\"p\">[</span><span class=\"n\">utterances</span><span class=\"p\">]</span>\n    \t<span class=\"nb\">log</span> <span class=\"p\">[</span><span class=\"n\">found</span><span class=\"p\">]</span>\n</pre>\n<h3>remove lines</h3>\n<p><em>Removes the last selected lines (e.g. the ones found using a <code>find all</code>)</em></p>\n<h3>replace <em><code>&lt;string | RegEx&gt;</code></em> by <code>&lt;string&gt;</code> [in <code>&lt;variable&gt;</code>]</h3>\n<p><em>Replaces given string or regular expression by another string, optionally in a particular collection.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">replace</span> <span class=\"err\">\\</span><span class=\"n\">W</span><span class=\"o\">+</span> <span class=\"n\">by</span> <span class=\"s2\">\"_\"</span>\n</pre>\n<h3>sort [<code>&lt;varName&gt;</code>]</h3>\n<p><em>Sorts either the supplied or last referenced collection alphanumerically (in ascending order).</em></p>\n<h3>split <em><code>&lt;string|RegEx&gt;</code></em> by <code>&lt;delimiter&gt;</code> as <code>&lt;variable&gt;</code></h3>\n<p>Splits a string into a collection using delimiter.</p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">split</span> <span class=\"n\">apples</span><span class=\"p\">;</span><span class=\"n\">bananas</span><span class=\"p\">;</span><span class=\"n\">oranges</span> <span class=\"n\">by</span> <span class=\"p\">;</span> <span class=\"n\">as</span> <span class=\"n\">fruits</span>\n    <span class=\"nb\">log</span> <span class=\"p\">[</span><span class=\"n\">fruits</span><span class=\"p\">]</span>\n</pre>\n<h3>unique lines</h3>\n<p><em>Removes all duplicate lines from the last referenced collection.</em></p>\n<h2>Memory</h2>\n<h3>remember <em><code>&lt;string | variable&gt;</code></em> as <code>&lt;variableName&gt;</code></h3>\n<p><em>Stores a string or variable in a new variable.</em></p>\n<h3>take <em><code>&lt;lines | results | files | folders&gt;</code></em> [as <code>&lt;name&gt;</code>]</h3>\n<p><em>Changes the selected collection to whole lines (<code>take lines as ...</code>), results of a <code>find all</code> directive, or to the files found in a folder specified with a preceding <code>in &lt;folderPath&gt;</code> directive.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">in</span> <span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n    \t<span class=\"n\">find</span> <span class=\"k\">all</span> <span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"err\">^</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">+&gt;</span>\n    \t<span class=\"n\">take</span> <span class=\"n\">lines</span> <span class=\"n\">as</span> <span class=\"n\">htmlLines</span>\n    \t<span class=\"nb\">log</span> <span class=\"p\">[</span><span class=\"n\">htmlLines</span><span class=\"p\">]</span>\n\n    <span class=\"n\">in</span> <span class=\"n\">libraries</span><span class=\"o\">/</span><span class=\"n\">de</span>\n    \t<span class=\"n\">take</span> <span class=\"n\">files</span> <span class=\"n\">as</span> <span class=\"n\">germanLibs</span>\n    \t<span class=\"nb\">log</span> <span class=\"p\">[</span><span class=\"n\">germanLibs</span><span class=\"p\">]</span>\n</pre>\n<hr>\n<h2>Flow</h2>\n<h3>for every <code>&lt;variable&gt;</code></h3>\n<h3>---</h3>\n<p><em>Loops through a collection, populating the variable <code>i</code> with the current index. From within the loop, the item of the collection can be accessed using the variable name in singular (books -&gt; book, babies -&gt; baby).</em></p>\n<p><em>If a collection is empty, the for-loop is skipped. This becomes useful to create conditional flows.</em></p>\n<p><em>Always terminate a loop with three consecutive hyphens in a separte line.</em></p>\n<p><strong>Example:</strong></p>\n<pre>    <span class=\"n\">in</span> <span class=\"n\">corpus</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n    \t<span class=\"n\">find</span> <span class=\"k\">all</span> <span class=\"p\">[</span><span class=\"err\">^\\</span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"err\">\\</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"err\">^\\</span><span class=\"n\">b</span><span class=\"p\">]</span><span class=\"o\">+</span> <span class=\"n\">as</span> <span class=\"n\">bigrams</span>\n    \t<span class=\"n\">for</span> <span class=\"n\">every</span> <span class=\"p\">[</span><span class=\"n\">bigram</span><span class=\"p\">]</span>\n    \t\t<span class=\"nb\">log</span> <span class=\"s2\">\"#[i]: [bigram]\"</span>\n    \t<span class=\"o\">---</span>\n</pre>\n<h3>run <code>path/to/script.tsl</code></h3>\n<p><em>Runs another TSL file</em></p>\n<p>The external TSL file will receive the same scope as inlined code.</p>\n<hr>\n<h1>Templating</h1>\n<p>Templates are enclosed in square brackets and can appear in quoted strings, file paths, and even within regular expressions:</p>\n<pre><span class=\"err\">{</span>\n    <span class=\"n\">remember</span> <span class=\"s2\">\"\\CommNetwork\"</span> <span class=\"n\">as</span> <span class=\"n\">domain</span>\n    <span class=\"n\">in</span> <span class=\"n\">user</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n        <span class=\"n\">find</span> <span class=\"k\">all</span> <span class=\"err\">\\</span><span class=\"n\">b</span><span class=\"p\">[</span><span class=\"n\">domain</span><span class=\"p\">][</span><span class=\"err\">^</span><span class=\"p\">:]:</span> <span class=\"n\">as</span> <span class=\"n\">user</span>\n        <span class=\"n\">for</span> <span class=\"n\">every</span> <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">]</span>\n            <span class=\"k\">select </span><span class=\"n\">from</span> <span class=\"mi\">0</span> <span class=\"n\">to</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"n\">in</span> <span class=\"s2\">\"/users/[user]/credentials.txt\"</span>\n                <span class=\"n\">change</span> <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"s2\">\"[user]:pleaseresetme\"</span>\n                <span class=\"n\">add</span> <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"p\">]</span>\n        <span class=\"o\">---</span>\n<span class=\"err\">}</span>\n</pre>\n<p>If the variables can not be found, the template tags remain untouched, including square brackets. This allows us to easily mix them in with regular expressions.</p>\n\n          </div>"}, "last_serial": 5210683, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d4c4f58bff0c03453e082db64db11073", "sha256": "544827eb46dcfa22e948b226d8e1db722743d42b7640469c5671f86ab1d8fe1b"}, "downloads": -1, "filename": "tsl_compiler-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d4c4f58bff0c03453e082db64db11073", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26691, "upload_time": "2019-05-01T00:10:21", "upload_time_iso_8601": "2019-05-01T00:10:21.823020Z", "url": "https://files.pythonhosted.org/packages/0b/7f/4d870b1aaeeb63ef389285598169839a98540df3e303f3ffe3c9d933e009/tsl_compiler-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bf0debeef9cd0aed347507ec255247a", "sha256": "eceb97e35eed940aaccf5d0b738e1aa24b091148981f6d63f8c5390127416d39"}, "downloads": -1, "filename": "tsl-compiler-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6bf0debeef9cd0aed347507ec255247a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17883, "upload_time": "2019-05-01T00:10:28", "upload_time_iso_8601": "2019-05-01T00:10:28.018864Z", "url": "https://files.pythonhosted.org/packages/9b/1c/8eb192d6e062f2c21423c14d405e29df36bc90746215cdcffa45248d41d9/tsl-compiler-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d4c4f58bff0c03453e082db64db11073", "sha256": "544827eb46dcfa22e948b226d8e1db722743d42b7640469c5671f86ab1d8fe1b"}, "downloads": -1, "filename": "tsl_compiler-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d4c4f58bff0c03453e082db64db11073", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26691, "upload_time": "2019-05-01T00:10:21", "upload_time_iso_8601": "2019-05-01T00:10:21.823020Z", "url": "https://files.pythonhosted.org/packages/0b/7f/4d870b1aaeeb63ef389285598169839a98540df3e303f3ffe3c9d933e009/tsl_compiler-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bf0debeef9cd0aed347507ec255247a", "sha256": "eceb97e35eed940aaccf5d0b738e1aa24b091148981f6d63f8c5390127416d39"}, "downloads": -1, "filename": "tsl-compiler-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6bf0debeef9cd0aed347507ec255247a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17883, "upload_time": "2019-05-01T00:10:28", "upload_time_iso_8601": "2019-05-01T00:10:28.018864Z", "url": "https://files.pythonhosted.org/packages/9b/1c/8eb192d6e062f2c21423c14d405e29df36bc90746215cdcffa45248d41d9/tsl-compiler-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:45:17 2020"}