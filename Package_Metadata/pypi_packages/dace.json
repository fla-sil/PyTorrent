{"info": {"author": "SPCL @ ETH Zurich", "author_email": "talbn@inf.ethz.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![Build Status](https://travis-ci.org/spcl/dace.svg?branch=master)](https://travis-ci.org/spcl/dace)\n[![Documentation Status](https://readthedocs.org/projects/spcldace/badge/?version=latest)](https://spcldace.readthedocs.io/en/latest/?badge=latest)\n[![PyPI version](https://badge.fury.io/py/dace.svg)](https://badge.fury.io/py/dace)\n\n\n![D](dace.svg)aCe - Data-Centric Parallel Programming\n=====================================================\n\n_Decoupling domain science from performance optimization._\n\nDaCe compiles code in various programming languages and paradigms (Python/Numpy, MATLAB, TensorFlow) and maps it efficiently to **CPUs, GPUs, and FPGAs** with high utilization, on par with the state-of-the-art. The key feature driving DaCe is its Stateful DataFlow multiGraph (SDFG) *data-centric intermediate representation*: A transformable, interactive representation of code based on data movement.\nWith data-centric parallel programming, we enable **direct knowledge transfer** of performance optimization, regardless of the scientific application or the target processor.\n\nDaCe can be written inline in Python and transformed in the command-line/Jupyter Notebooks, or SDFGs can be interactively modified using the Data-centric Interactive Optimization Development Environment (DIODE, currently experimental).\n\nFor more information, see our [paper](http://www.arxiv.org/abs/1902.10345).\n\nTutorials\n---------\n\n* [Data-Centric Python Programs with NumPy](https://nbviewer.jupyter.org/github/spcl/dace/blob/master/tutorials/numpy_frontend.ipynb)\n* [Explicit Dataflow in Python](https://nbviewer.jupyter.org/github/spcl/dace/blob/master/tutorials/explicit.ipynb)\n* [SDFG API](https://nbviewer.jupyter.org/github/spcl/dace/blob/master/tutorials/sdfg_api.ipynb)\n* [Transformations](https://nbviewer.jupyter.org/github/spcl/dace/blob/master/tutorials/transformations.ipynb)\n\nInstallation and Dependencies\n-----------------------------\n\nTo install: `pip install dace`\n\nRuntime dependencies:\n * A C++14-capable compiler (e.g., gcc 5.3+)\n * Python 3.6 or newer\n * CMake 2.8.12 or newer (for Windows, CMake 3.15 is recommended)\n\nRunning\n-------\n\n**Python scripts:** Run DaCe programs (in implicit, explicit, or TensorFlow syntax) using Python directly.\n\n**DIODE interactive development (experimental):**: Either run the installed script `diode`, or call `python3 -m diode.diode_server` from the shell. Then, follow the printed instructions to enter the web interface.\n\n**Octave scripts (experimental):** `.m` files can be run using the installed script `dacelab`, which will create the appropriate SDFG file.\n\n**Jupyter Notebooks:** DaCe is Jupyter-compatible. If a result is an SDFG or a state, it will show up directly in the notebook. See the [tutorials](tutorials) for examples.\n\n**[SDFV (standalone SDFG viewer)](https://spcl.github.io/dace/sdfv.html):** To view SDFGs separately, run the `sdfv` installed script with the `.sdfg` file as an argument. Alternatively, you can use the link or open `diode/sdfv.html` directly and choose a file in the browser.\n\n**Note for Windows/Visual C++ users:** If compilation fails in the linkage phase, try setting the following environment variable to force Visual C++ to use Multi-Threaded linkage:\n```\nX:\\path\\to\\dace> set _CL_=/MT\n```\n\n\nPublication\n-----------\n\nIf you use DaCe, cite us:\n```bibtex\n@inproceedings{dace,\n  author    = {Ben-Nun, Tal and de~Fine~Licht, Johannes and Ziogas, Alexandros Nikolaos and Schneider, Timo and Hoefler, Torsten},\n  title     = {Stateful Dataflow Multigraphs: A Data-Centric Model for Performance Portability on Heterogeneous Architectures},\n  year      = {2019},\n  booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},\n  series = {SC '19}\n}\n```\n\nConfiguration\n-------------\n\nDaCe creates a file called `.dace.conf` in the user's home directory. It provides useful settings that can be modified either directly in the file (YAML), within DIODE, or overriden on a case-by-case basis using environment variables that begin with `DACE_` and specify the setting (where categories are separated by underscores). The full configuration schema is located [here](dace/config_schema.yml).\n\nUseful environment variable configurations include:\n\n* `DACE_CONFIG` (default: `~/.dace.conf`): Override DaCe configuration file choice.\n\nContext configuration:\n * `DACE_use_cache` (default: False): Uses DaCe program cache instead of re-optimizing and compiling programs.\n * `DACE_debugprint` (default: True): Print debugging information.\n\nSDFG processing:\n * `DACE_optimizer_interface` (default: `dace.transformation.optimizer.SDFGOptimizer`): Controls the SDFG optimization process by choosing a Python handler. If empty or class name is invalid, skips process. By default, uses the transformation command line interface.\n\nProfiling:\n * `DACE_profiling` (default: False): Enables profiling measurement of the DaCe program runtime in milliseconds. Produces a log file and prints out median runtime.\n * `DACE_treps` (default: 100): Number of repetitions to run a DaCe program when profiling is enabled.\n\n\nContributing\n------------\nDaCe is an open-source project. We are happy to accept Pull Requests with your contributions!\n\nLicense\n-------\nDaCe is published under the New BSD license, see [LICENSE](LICENSE).\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spcl/dace", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "dace", "package_url": "https://pypi.org/project/dace/", "platform": "", "project_url": "https://pypi.org/project/dace/", "project_urls": {"Homepage": "https://github.com/spcl/dace"}, "release_url": "https://pypi.org/project/dace/0.9.5/", "requires_dist": ["numpy", "networkx (>=2.2)", "astunparse", "sympy", "scipy", "pyyaml", "absl-py", "ply", "websockets", "graphviz", "requests", "flask", "scikit-build", "cmake"], "requires_python": ">=3.6", "summary": "Data-Centric Parallel Programming Framework", "version": "0.9.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/spcl/dace\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7d96ec52de1fbfa499dab54adbfe277cc315eb6/68747470733a2f2f7472617669732d63692e6f72672f7370636c2f646163652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://spcldace.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da4d159af97653b33781ff50ddc03743e8f3d9e5/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7370636c646163652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://badge.fury.io/py/dace\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48367ab6cc9ef53716bae771da3ff67dac4af5c4/68747470733a2f2f62616467652e667572792e696f2f70792f646163652e737667\"></a></p>\n<h1><img alt=\"D\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5a2f05c0265e626fddf791d63ba6be70924ea5c/646163652e737667\">aCe - Data-Centric Parallel Programming</h1>\n<p><em>Decoupling domain science from performance optimization.</em></p>\n<p>DaCe compiles code in various programming languages and paradigms (Python/Numpy, MATLAB, TensorFlow) and maps it efficiently to <strong>CPUs, GPUs, and FPGAs</strong> with high utilization, on par with the state-of-the-art. The key feature driving DaCe is its Stateful DataFlow multiGraph (SDFG) <em>data-centric intermediate representation</em>: A transformable, interactive representation of code based on data movement.\nWith data-centric parallel programming, we enable <strong>direct knowledge transfer</strong> of performance optimization, regardless of the scientific application or the target processor.</p>\n<p>DaCe can be written inline in Python and transformed in the command-line/Jupyter Notebooks, or SDFGs can be interactively modified using the Data-centric Interactive Optimization Development Environment (DIODE, currently experimental).</p>\n<p>For more information, see our <a href=\"http://www.arxiv.org/abs/1902.10345\" rel=\"nofollow\">paper</a>.</p>\n<h2>Tutorials</h2>\n<ul>\n<li><a href=\"https://nbviewer.jupyter.org/github/spcl/dace/blob/master/tutorials/numpy_frontend.ipynb\" rel=\"nofollow\">Data-Centric Python Programs with NumPy</a></li>\n<li><a href=\"https://nbviewer.jupyter.org/github/spcl/dace/blob/master/tutorials/explicit.ipynb\" rel=\"nofollow\">Explicit Dataflow in Python</a></li>\n<li><a href=\"https://nbviewer.jupyter.org/github/spcl/dace/blob/master/tutorials/sdfg_api.ipynb\" rel=\"nofollow\">SDFG API</a></li>\n<li><a href=\"https://nbviewer.jupyter.org/github/spcl/dace/blob/master/tutorials/transformations.ipynb\" rel=\"nofollow\">Transformations</a></li>\n</ul>\n<h2>Installation and Dependencies</h2>\n<p>To install: <code>pip install dace</code></p>\n<p>Runtime dependencies:</p>\n<ul>\n<li>A C++14-capable compiler (e.g., gcc 5.3+)</li>\n<li>Python 3.6 or newer</li>\n<li>CMake 2.8.12 or newer (for Windows, CMake 3.15 is recommended)</li>\n</ul>\n<h2>Running</h2>\n<p><strong>Python scripts:</strong> Run DaCe programs (in implicit, explicit, or TensorFlow syntax) using Python directly.</p>\n<p><strong>DIODE interactive development (experimental):</strong>: Either run the installed script <code>diode</code>, or call <code>python3 -m diode.diode_server</code> from the shell. Then, follow the printed instructions to enter the web interface.</p>\n<p><strong>Octave scripts (experimental):</strong> <code>.m</code> files can be run using the installed script <code>dacelab</code>, which will create the appropriate SDFG file.</p>\n<p><strong>Jupyter Notebooks:</strong> DaCe is Jupyter-compatible. If a result is an SDFG or a state, it will show up directly in the notebook. See the <a href=\"tutorials\" rel=\"nofollow\">tutorials</a> for examples.</p>\n<p><strong><a href=\"https://spcl.github.io/dace/sdfv.html\" rel=\"nofollow\">SDFV (standalone SDFG viewer)</a>:</strong> To view SDFGs separately, run the <code>sdfv</code> installed script with the <code>.sdfg</code> file as an argument. Alternatively, you can use the link or open <code>diode/sdfv.html</code> directly and choose a file in the browser.</p>\n<p><strong>Note for Windows/Visual C++ users:</strong> If compilation fails in the linkage phase, try setting the following environment variable to force Visual C++ to use Multi-Threaded linkage:</p>\n<pre><code>X:\\path\\to\\dace&gt; set _CL_=/MT\n</code></pre>\n<h2>Publication</h2>\n<p>If you use DaCe, cite us:</p>\n<pre><span class=\"nc\">@inproceedings</span><span class=\"p\">{</span><span class=\"nl\">dace</span><span class=\"p\">,</span>\n  <span class=\"na\">author</span>    <span class=\"p\">=</span> <span class=\"s\">{Ben-Nun, Tal and de~Fine~Licht, Johannes and Ziogas, Alexandros Nikolaos and Schneider, Timo and Hoefler, Torsten}</span><span class=\"p\">,</span>\n  <span class=\"na\">title</span>     <span class=\"p\">=</span> <span class=\"s\">{Stateful Dataflow Multigraphs: A Data-Centric Model for Performance Portability on Heterogeneous Architectures}</span><span class=\"p\">,</span>\n  <span class=\"na\">year</span>      <span class=\"p\">=</span> <span class=\"s\">{2019}</span><span class=\"p\">,</span>\n  <span class=\"na\">booktitle</span> <span class=\"p\">=</span> <span class=\"s\">{Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis}</span><span class=\"p\">,</span>\n  <span class=\"na\">series</span> <span class=\"p\">=</span> <span class=\"s\">{SC '19}</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Configuration</h2>\n<p>DaCe creates a file called <code>.dace.conf</code> in the user's home directory. It provides useful settings that can be modified either directly in the file (YAML), within DIODE, or overriden on a case-by-case basis using environment variables that begin with <code>DACE_</code> and specify the setting (where categories are separated by underscores). The full configuration schema is located <a href=\"dace/config_schema.yml\" rel=\"nofollow\">here</a>.</p>\n<p>Useful environment variable configurations include:</p>\n<ul>\n<li><code>DACE_CONFIG</code> (default: <code>~/.dace.conf</code>): Override DaCe configuration file choice.</li>\n</ul>\n<p>Context configuration:</p>\n<ul>\n<li><code>DACE_use_cache</code> (default: False): Uses DaCe program cache instead of re-optimizing and compiling programs.</li>\n<li><code>DACE_debugprint</code> (default: True): Print debugging information.</li>\n</ul>\n<p>SDFG processing:</p>\n<ul>\n<li><code>DACE_optimizer_interface</code> (default: <code>dace.transformation.optimizer.SDFGOptimizer</code>): Controls the SDFG optimization process by choosing a Python handler. If empty or class name is invalid, skips process. By default, uses the transformation command line interface.</li>\n</ul>\n<p>Profiling:</p>\n<ul>\n<li><code>DACE_profiling</code> (default: False): Enables profiling measurement of the DaCe program runtime in milliseconds. Produces a log file and prints out median runtime.</li>\n<li><code>DACE_treps</code> (default: 100): Number of repetitions to run a DaCe program when profiling is enabled.</li>\n</ul>\n<h2>Contributing</h2>\n<p>DaCe is an open-source project. We are happy to accept Pull Requests with your contributions!</p>\n<h2>License</h2>\n<p>DaCe is published under the New BSD license, see <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a>.</p>\n\n          </div>"}, "last_serial": 6403762, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "18880afcdb373cd7bfd7706f4c2b223a", "sha256": "3181363a2bec1cd4524d8b6ecc2f039bc1775991669dbc10f01f40c8755334c4"}, "downloads": -1, "filename": "dace-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "18880afcdb373cd7bfd7706f4c2b223a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1149470, "upload_time": "2019-03-15T23:38:34", "upload_time_iso_8601": "2019-03-15T23:38:34.448242Z", "url": "https://files.pythonhosted.org/packages/4a/0d/c8aacdc9d59458ef62063588122ba60af392a8e683c30b2978e176684c6c/dace-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a81006b4c1481c9ed96edbd90bbb980d", "sha256": "1127119579c0a5701fb14675fd7a798e3962c4ec9cd20e68a8ea589fdc432924"}, "downloads": -1, "filename": "dace-0.8.0.tar.gz", "has_sig": false, "md5_digest": "a81006b4c1481c9ed96edbd90bbb980d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 353939, "upload_time": "2019-03-15T23:38:37", "upload_time_iso_8601": "2019-03-15T23:38:37.882598Z", "url": "https://files.pythonhosted.org/packages/55/38/11aab88c778c09a922f6679db179bc2780678ffa00192cfb146191411587/dace-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "87997d9ce93c976c1ed91503962182a1", "sha256": "687fbad9b7834f0e695467c169717cbeba5cab411c2ec736a8daa4ce664bc126"}, "downloads": -1, "filename": "dace-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "87997d9ce93c976c1ed91503962182a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1153625, "upload_time": "2019-03-16T19:47:26", "upload_time_iso_8601": "2019-03-16T19:47:26.749153Z", "url": "https://files.pythonhosted.org/packages/55/2e/3d9a93db50b4a2a44adf2aecd443764d2259fe4f3ffa5f299738e5cc5e87/dace-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2fed873fc3bf24cb3820fffeb7dd812", "sha256": "b7da9b41d19dac74b3f4793699771df973c0b1ca320d8f38da6458a1e97ec633"}, "downloads": -1, "filename": "dace-0.8.1.tar.gz", "has_sig": false, "md5_digest": "a2fed873fc3bf24cb3820fffeb7dd812", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 354336, "upload_time": "2019-03-16T19:47:30", "upload_time_iso_8601": "2019-03-16T19:47:30.723787Z", "url": "https://files.pythonhosted.org/packages/aa/41/b4deeb3ca7a09d30fb93cf4202c896256556e66cab184ba61bebef30c6b1/dace-0.8.1.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "d23cb36eaae4e4aca43448be681b2f9a", "sha256": "18eaeb079daf724e5e9d3b213398e598e06ea79a07c7b23fefed78bc6a136a76"}, "downloads": -1, "filename": "dace-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d23cb36eaae4e4aca43448be681b2f9a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2416024, "upload_time": "2019-10-22T23:07:30", "upload_time_iso_8601": "2019-10-22T23:07:30.845150Z", "url": "https://files.pythonhosted.org/packages/fa/33/9bbf922e770bdbcda65c90b39e20aa6ec2478eb8b4d43ea6af145d7ecfdd/dace-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c990cb1651a096c3213bed83820bb51", "sha256": "8da06fac51fa12b33d7d3c1867ac15eb54e094063913cab0af52f4b4054d197d"}, "downloads": -1, "filename": "dace-0.9.0.tar.gz", "has_sig": false, "md5_digest": "1c990cb1651a096c3213bed83820bb51", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 453123, "upload_time": "2019-10-22T23:07:33", "upload_time_iso_8601": "2019-10-22T23:07:33.027604Z", "url": "https://files.pythonhosted.org/packages/50/46/884b9a6363f5cfd33d3e9a0f91efc1277d651dea26e1169ffdfa5c7be7b0/dace-0.9.0.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "4b3bced61f71cb031343b969d4190f9b", "sha256": "aa325bfd236ded8a35e928bd3c0d7d4b5bde7e5f22dfc776241171091a3b5525"}, "downloads": -1, "filename": "dace-0.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4b3bced61f71cb031343b969d4190f9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2405192, "upload_time": "2020-01-06T18:54:10", "upload_time_iso_8601": "2020-01-06T18:54:10.200495Z", "url": "https://files.pythonhosted.org/packages/93/7c/1635787ea52751eee62d7b8d421145241a45fe702d4eb4dfbaa353f08ecc/dace-0.9.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2045588f2742107dc27f894feb401ff6", "sha256": "38ae784cab7a4ca7170d590fd33548d07958380a5492ab7082272840641f51ac"}, "downloads": -1, "filename": "dace-0.9.5.tar.gz", "has_sig": false, "md5_digest": "2045588f2742107dc27f894feb401ff6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 429818, "upload_time": "2020-01-06T18:54:12", "upload_time_iso_8601": "2020-01-06T18:54:12.518783Z", "url": "https://files.pythonhosted.org/packages/bc/58/b9bb15e0dc9530b066b3f555d8815f789ff0d6e1bbeb425f0b5fbb002b7e/dace-0.9.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b3bced61f71cb031343b969d4190f9b", "sha256": "aa325bfd236ded8a35e928bd3c0d7d4b5bde7e5f22dfc776241171091a3b5525"}, "downloads": -1, "filename": "dace-0.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4b3bced61f71cb031343b969d4190f9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 2405192, "upload_time": "2020-01-06T18:54:10", "upload_time_iso_8601": "2020-01-06T18:54:10.200495Z", "url": "https://files.pythonhosted.org/packages/93/7c/1635787ea52751eee62d7b8d421145241a45fe702d4eb4dfbaa353f08ecc/dace-0.9.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2045588f2742107dc27f894feb401ff6", "sha256": "38ae784cab7a4ca7170d590fd33548d07958380a5492ab7082272840641f51ac"}, "downloads": -1, "filename": "dace-0.9.5.tar.gz", "has_sig": false, "md5_digest": "2045588f2742107dc27f894feb401ff6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 429818, "upload_time": "2020-01-06T18:54:12", "upload_time_iso_8601": "2020-01-06T18:54:12.518783Z", "url": "https://files.pythonhosted.org/packages/bc/58/b9bb15e0dc9530b066b3f555d8815f789ff0d6e1bbeb425f0b5fbb002b7e/dace-0.9.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:40:57 2020"}