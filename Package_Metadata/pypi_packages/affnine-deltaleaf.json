{"info": {"author": "Biswanath Saha", "author_email": "biswanathamz@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Affnine deltaleaf\nEasy way to create MAP (Undirected Graph)and find shortest path from one Node to another.\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install foobar.\n\n```bash\npip install affnine-deltaleaf\n```\n\n## Quick start\n\n```python\nimport affnine_deltaleaf\n\nnewMap=afn_spf.deltaLeaf()         #create a object of affnine deltaleaf\n\nnewMap.editNameOfTheMap(\"Miramar\") #assign a name to the map\n\nnewMap.updateDistance(\"A\",\"B\",1.1) # Distance from one node to another\nnewMap.updateDistance(\"A\",\"D\",2)\nnewMap.updateDistance(\"A\",\"E\",4)\nnewMap.updateDistance(\"B\",\"E\",2)\nnewMap.updateDistance(\"C\",\"E\",1)\nnewMap.updateDistance(\"C\",\"D\",5)\nnewMap.updateDistance(\"D\",\"F\",3)\nnewMap.updateDistance(\"E\",\"F\",3.4)\nnewMap.updateDistance(\"F\",\"A\",3)\nnewMap.updateDistance(\"G\",\"B\",3)\nnewMap.updateDistance(\"H\",\"A\",3)\nnewMap.updateDistance(\"I\",\"C\",3)\nnewMap.updateDistance(\"J\",\"B\",3)\nnewMap.updateDistance(\"K\",\"E\",3)\n\nprint(newMap.finder('A','E')) .   # Find shortest distance and \n                                  # path between two nodes\n\n```\n## Output:\n----------------\n![t.o](https://raw.githubusercontent.com/biswanathamz/affnine_deltaleaf/master/src/image/Screenshot%202019-08-18%20at%209.05.56%20PM.png)\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/biswanathamz/affnine_deltaleaf", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "affnine-deltaleaf", "package_url": "https://pypi.org/project/affnine-deltaleaf/", "platform": "", "project_url": "https://pypi.org/project/affnine-deltaleaf/", "project_urls": {"Homepage": "https://github.com/biswanathamz/affnine_deltaleaf"}, "release_url": "https://pypi.org/project/affnine-deltaleaf/0.2/", "requires_dist": null, "requires_python": "", "summary": "Easy way to create MAP (Undirected Graph)and find shortest path from one Node to another.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Affnine deltaleaf</h1>\n<p>Easy way to create MAP (Undirected Graph)and find shortest path from one Node to another.</p>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install foobar.</p>\n<pre>pip install affnine-deltaleaf\n</pre>\n<h2>Quick start</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">affnine_deltaleaf</span>\n\n<span class=\"n\">newMap</span><span class=\"o\">=</span><span class=\"n\">afn_spf</span><span class=\"o\">.</span><span class=\"n\">deltaLeaf</span><span class=\"p\">()</span>         <span class=\"c1\">#create a object of affnine deltaleaf</span>\n\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">editNameOfTheMap</span><span class=\"p\">(</span><span class=\"s2\">\"Miramar\"</span><span class=\"p\">)</span> <span class=\"c1\">#assign a name to the map</span>\n\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"mf\">1.1</span><span class=\"p\">)</span> <span class=\"c1\"># Distance from one node to another</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"D\"</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"s2\">\"E\"</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"s2\">\"E\"</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"s2\">\"E\"</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"s2\">\"D\"</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"D\"</span><span class=\"p\">,</span><span class=\"s2\">\"F\"</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"E\"</span><span class=\"p\">,</span><span class=\"s2\">\"F\"</span><span class=\"p\">,</span><span class=\"mf\">3.4</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"F\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"G\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"H\"</span><span class=\"p\">,</span><span class=\"s2\">\"A\"</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"I\"</span><span class=\"p\">,</span><span class=\"s2\">\"C\"</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"J\"</span><span class=\"p\">,</span><span class=\"s2\">\"B\"</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">updateDistance</span><span class=\"p\">(</span><span class=\"s2\">\"K\"</span><span class=\"p\">,</span><span class=\"s2\">\"E\"</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">newMap</span><span class=\"o\">.</span><span class=\"n\">finder</span><span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span><span class=\"s1\">'E'</span><span class=\"p\">))</span> <span class=\"o\">.</span>   <span class=\"c1\"># Find shortest distance and </span>\n                                  <span class=\"c1\"># path between two nodes</span>\n</pre>\n<h2>Output:</h2>\n<hr>\n<p><img alt=\"t.o\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f64ec0de5fcf611ba60a1698e6cac1269e26f16e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f62697377616e617468616d7a2f6166666e696e655f64656c74616c6561662f6d61737465722f7372632f696d6167652f53637265656e73686f74253230323031392d30382d31382532306174253230392e30352e3536253230504d2e706e67\"></p>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<p>Please make sure to update tests as appropriate.</p>\n<h2>License</h2>\n<p><a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 5695212, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "f97b7f8ebc814903a58f867246d509a3", "sha256": "9955f1b0b705703f89e8340654a5a54fffe371bbebfe79ecccead1cb58892dff"}, "downloads": -1, "filename": "affnine_deltaleaf-0.1.tar.gz", "has_sig": false, "md5_digest": "f97b7f8ebc814903a58f867246d509a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2903, "upload_time": "2019-08-18T14:27:12", "upload_time_iso_8601": "2019-08-18T14:27:12.488769Z", "url": "https://files.pythonhosted.org/packages/9b/d9/f93681ef5f5cfea1718d45f22b28256e4ee8a72910313aab6ac8c7ce5cf9/affnine_deltaleaf-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7ee1d4d953dda467a4e9f15d398f59e0", "sha256": "32aab7e50bac254a02bda2507eb00c457c899c12a843a3a6176573f2f1834707"}, "downloads": -1, "filename": "affnine_deltaleaf-0.2.tar.gz", "has_sig": false, "md5_digest": "7ee1d4d953dda467a4e9f15d398f59e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3516, "upload_time": "2019-08-18T16:51:11", "upload_time_iso_8601": "2019-08-18T16:51:11.532967Z", "url": "https://files.pythonhosted.org/packages/79/5a/9743b0732d8091d739194d32c79ccaa239456dc381b12f247702ef930e6f/affnine_deltaleaf-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7ee1d4d953dda467a4e9f15d398f59e0", "sha256": "32aab7e50bac254a02bda2507eb00c457c899c12a843a3a6176573f2f1834707"}, "downloads": -1, "filename": "affnine_deltaleaf-0.2.tar.gz", "has_sig": false, "md5_digest": "7ee1d4d953dda467a4e9f15d398f59e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3516, "upload_time": "2019-08-18T16:51:11", "upload_time_iso_8601": "2019-08-18T16:51:11.532967Z", "url": "https://files.pythonhosted.org/packages/79/5a/9743b0732d8091d739194d32c79ccaa239456dc381b12f247702ef930e6f/affnine_deltaleaf-0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:45 2020"}