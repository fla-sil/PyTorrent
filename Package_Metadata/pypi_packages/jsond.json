{"info": {"author": "EDITED devs", "author_email": "dev@edited.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# jsond\n\n[![Build Status](https://travis-ci.org/EDITD/jsond.svg?branch=master)](https://travis-ci.org/EDITD/jsond)\n[![Pypi Version](https://img.shields.io/pypi/v/jsond.svg)](https://pypi.org/project/jsond/)\n[![Python Versions](https://img.shields.io/pypi/pyversions/jsond.svg)](https://pypi.org/project/jsond/)\n\nAn extension of json: but one that (naively) handles dates.\n\n\n## Installation\n\nYou can use pip. (Note that it uses `setuptools`)\n```\npip install jsond\n```\n\nTo also install development tools use:\n```\npip install jsond[dev]\n# or\npip install -e .[dev]\n```\n\n## Simple Usage\n\nI have a date.\n```python\n>>> import datetime\n>>> my_date = datetime.datetime(2011, 3, 15, 0, 0, 0)\n```\n\nStandard `json` doesn't deal with dates :(\n```python\n>>> import json\n>>> json.dumps(my_date)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py\", line 243, in dumps\n    return _default_encoder.encode(obj)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 207, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 270, in iterencode\n    return _iterencode(o, 0)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\", line 184, in default\n    raise TypeError(repr(o) + \" is not JSON serializable\")\nTypeError: datetime.datetime(2011, 3, 15, 0, 0) is not JSON serializable\n```\n\nBut `jsond` will handle it\n```python\n>>> import jsond\n>>> jsond.dumps(my_date)\n'\"datetime:2011-03-15T00:00:00\"'\n>>>\n```\n\nAnd we can pull the date back as well.\n```python\n>>> jsond.loads('\"datetime:2011-03-15T00:00:00\"')\ndatetime.datetime(2011, 3, 15, 0, 0)\n>>> date2 = jsond.loads('\"datetime:2011-03-15T00:00:00\"')\n>>> type(date2)\n<type 'datetime.datetime'>\n>>> date2 == my_date\nTrue\n>>> date2\ndatetime.datetime(2011, 3, 15, 0, 0)\n>>>\n```\n\nAlso, `jsond` will produce output that won't break `json`.\n(Though of course, you'll get a string rather than a datetime object.)\n```python\n>>> enc = jsond.dumps(my_date)\n>>> json.loads(enc)\nu'datetime:2011-03-15T00:00:00'\n>>>\n```\n\n\n## Other usage\n\nOften message-processing systems will use json internally to serialise messages.\n\nBut that means that dates can't (easily) be used.\n\nTo help with this, we provide two functions: `from_json_serialisable_object`\nand `to_json_serialisable_object`.\n\nFor those who prefer spelling serialise with a 'z', there are two 'alias'\nfunctions for convenience.\n\n- `from_json_serializable_object` -> `from_json_serialisable_object`\n- `to_json_serializable_object` -> `to_json_serialisable_object`\n\n```python\ndef handle_message(original_message):\n    # At this stage original_message will be a dict, list etc, but it won't\n    # have any datetime objects as it was json-serialisable.\n    # We might have prepared it earlier with jsond.dumps, but that means that\n    # we have 'datetime:...' string instead of datetime objects.\n    message = jsond.from_json_serialisable_object(original_message)\n\n    # message will now have datetime objects\n    # We can do whatever processing we want.\n\n    # Now we have to put message back on the queue. We have to output an\n    # object that the broker will put back onto the queue etc.\n    # So we can't have datetime objects. But we want to output an object\n    # (not an encoded string).\n    new_message = jsond.to_json_serialisable_object(message)\n\n    # Now we can output/emit/etc new_message.\n    return new_message\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/EDITD/jsond", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "jsond", "package_url": "https://pypi.org/project/jsond/", "platform": "", "project_url": "https://pypi.org/project/jsond/", "project_urls": {"Homepage": "https://github.com/EDITD/jsond"}, "release_url": "https://pypi.org/project/jsond/1.5.0/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "JSON (with dates)", "version": "1.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jsond</h1>\n<p><a href=\"https://travis-ci.org/EDITD/jsond\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23fc7115712c56ba3ef45dee427b84a65a3c657a/68747470733a2f2f7472617669732d63692e6f72672f45444954442f6a736f6e642e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/jsond/\" rel=\"nofollow\"><img alt=\"Pypi Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cac03dcbd283bb32745e8ec01ffd103708505c36/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a736f6e642e737667\"></a>\n<a href=\"https://pypi.org/project/jsond/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59462b54b4e67039dbe523675eb2a57351847b69/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6a736f6e642e737667\"></a></p>\n<p>An extension of json: but one that (naively) handles dates.</p>\n<h2>Installation</h2>\n<p>You can use pip. (Note that it uses <code>setuptools</code>)</p>\n<pre><code>pip install jsond\n</code></pre>\n<p>To also install development tools use:</p>\n<pre><code>pip install jsond[dev]\n# or\npip install -e .[dev]\n</code></pre>\n<h2>Simple Usage</h2>\n<p>I have a date.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>Standard <code>json</code> doesn't deal with dates :(</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">my_date</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/__init__.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">243</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">dumps</span>\n    <span class=\"k\">return</span> <span class=\"n\">_default_encoder</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">207</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">encode</span>\n    <span class=\"n\">chunks</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iterencode</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">_one_shot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">270</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">iterencode</span>\n    <span class=\"k\">return</span> <span class=\"n\">_iterencode</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/json/encoder.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">184</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">default</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">\" is not JSON serializable\"</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">JSON</span> <span class=\"n\">serializable</span>\n</pre>\n<p>But <code>jsond</code> will handle it</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">jsond</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jsond</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">my_date</span><span class=\"p\">)</span>\n<span class=\"s1\">'\"datetime:2011-03-15T00:00:00\"'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>And we can pull the date back as well.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">jsond</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'\"datetime:2011-03-15T00:00:00\"'</span><span class=\"p\">)</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">date2</span> <span class=\"o\">=</span> <span class=\"n\">jsond</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s1\">'\"datetime:2011-03-15T00:00:00\"'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">date2</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"nb\">type</span> <span class=\"s1\">'datetime.datetime'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">date2</span> <span class=\"o\">==</span> <span class=\"n\">my_date</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">date2</span>\n<span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2011</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Also, <code>jsond</code> will produce output that won't break <code>json</code>.\n(Though of course, you'll get a string rather than a datetime object.)</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">enc</span> <span class=\"o\">=</span> <span class=\"n\">jsond</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">my_date</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">enc</span><span class=\"p\">)</span>\n<span class=\"sa\">u</span><span class=\"s1\">'datetime:2011-03-15T00:00:00'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<h2>Other usage</h2>\n<p>Often message-processing systems will use json internally to serialise messages.</p>\n<p>But that means that dates can't (easily) be used.</p>\n<p>To help with this, we provide two functions: <code>from_json_serialisable_object</code>\nand <code>to_json_serialisable_object</code>.</p>\n<p>For those who prefer spelling serialise with a 'z', there are two 'alias'\nfunctions for convenience.</p>\n<ul>\n<li><code>from_json_serializable_object</code> -&gt; <code>from_json_serialisable_object</code></li>\n<li><code>to_json_serializable_object</code> -&gt; <code>to_json_serialisable_object</code></li>\n</ul>\n<pre><span class=\"k\">def</span> <span class=\"nf\">handle_message</span><span class=\"p\">(</span><span class=\"n\">original_message</span><span class=\"p\">):</span>\n    <span class=\"c1\"># At this stage original_message will be a dict, list etc, but it won't</span>\n    <span class=\"c1\"># have any datetime objects as it was json-serialisable.</span>\n    <span class=\"c1\"># We might have prepared it earlier with jsond.dumps, but that means that</span>\n    <span class=\"c1\"># we have 'datetime:...' string instead of datetime objects.</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">jsond</span><span class=\"o\">.</span><span class=\"n\">from_json_serialisable_object</span><span class=\"p\">(</span><span class=\"n\">original_message</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># message will now have datetime objects</span>\n    <span class=\"c1\"># We can do whatever processing we want.</span>\n\n    <span class=\"c1\"># Now we have to put message back on the queue. We have to output an</span>\n    <span class=\"c1\"># object that the broker will put back onto the queue etc.</span>\n    <span class=\"c1\"># So we can't have datetime objects. But we want to output an object</span>\n    <span class=\"c1\"># (not an encoded string).</span>\n    <span class=\"n\">new_message</span> <span class=\"o\">=</span> <span class=\"n\">jsond</span><span class=\"o\">.</span><span class=\"n\">to_json_serialisable_object</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Now we can output/emit/etc new_message.</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_message</span>\n</pre>\n\n          </div>"}, "last_serial": 7151976, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "343845220a3483b6ca59d5ea6255579c", "sha256": "4c515ac58a29e4b8c492725de01c2feddbc49e9c4ae8b2cf66a93c24a808b695"}, "downloads": -1, "filename": "jsond-1.0.0.tar.gz", "has_sig": false, "md5_digest": "343845220a3483b6ca59d5ea6255579c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1652, "upload_time": "2014-10-13T16:28:46", "upload_time_iso_8601": "2014-10-13T16:28:46.152739Z", "url": "https://files.pythonhosted.org/packages/a4/25/b404cc04b0cb4047dd16cd868121e332ec38f0186b511b644522ac17b3c6/jsond-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "a32035b5a86643ba52e8497becb5eff5", "sha256": "9f0dc9a197c09df24873682cd747d812c6475ccf033878828b819a7609ecbf6e"}, "downloads": -1, "filename": "jsond-1.1.0.tar.gz", "has_sig": false, "md5_digest": "a32035b5a86643ba52e8497becb5eff5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2077, "upload_time": "2015-11-06T10:57:39", "upload_time_iso_8601": "2015-11-06T10:57:39.106405Z", "url": "https://files.pythonhosted.org/packages/b2/2d/f14ce0649f4a574784babc70e91a83c5963995e6a78a8ce3aa428f75af6a/jsond-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "02774817dddf55f2160f8c30374187ef", "sha256": "5490be1796c9824190994762d10b31b41c149d9d4feadcf7d0d23e3951434de8"}, "downloads": -1, "filename": "jsond-1.2.0.tar.gz", "has_sig": false, "md5_digest": "02774817dddf55f2160f8c30374187ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2088, "upload_time": "2015-11-20T11:27:21", "upload_time_iso_8601": "2015-11-20T11:27:21.374814Z", "url": "https://files.pythonhosted.org/packages/65/a0/ed4f739a60c1888cd67a81ae1f8428f8b3b4419e191653c53f4a2e781da5/jsond-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "0ca8b85fb32aa46e8d93444d8df6fb7d", "sha256": "44f928959fcb83af6314319618fbed8b5fd90661aef252ab6c96db7db3f8ead3"}, "downloads": -1, "filename": "jsond-1.3.0.tar.gz", "has_sig": false, "md5_digest": "0ca8b85fb32aa46e8d93444d8df6fb7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2182, "upload_time": "2016-03-16T12:24:00", "upload_time_iso_8601": "2016-03-16T12:24:00.846680Z", "url": "https://files.pythonhosted.org/packages/03/de/756b3c31fbb6129a53a825e3a28a5fe32f56cedfb91dfa0d67da590b3e7e/jsond-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "77bff962d8b43cef25364ffc6fdefe11", "sha256": "7870671ca93139a4577b5838616382d652464de2f9a8763fd27278deddcb3c7b"}, "downloads": -1, "filename": "jsond-1.4.0.tar.gz", "has_sig": false, "md5_digest": "77bff962d8b43cef25364ffc6fdefe11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 5323, "upload_time": "2020-05-02T15:00:27", "upload_time_iso_8601": "2020-05-02T15:00:27.523223Z", "url": "https://files.pythonhosted.org/packages/97/3e/32be470670bbe104475b5dc1596d08bddb85493d4f9add3953259275ad6c/jsond-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "6fbcd211cff424109e0541731d11e08f", "sha256": "84ae22f84976d4a7a44f1b6eef527104ddf591f328d4ebb9cb3d1732dbdcf955"}, "downloads": -1, "filename": "jsond-1.5.0.tar.gz", "has_sig": false, "md5_digest": "6fbcd211cff424109e0541731d11e08f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 5322, "upload_time": "2020-05-02T15:22:29", "upload_time_iso_8601": "2020-05-02T15:22:29.887661Z", "url": "https://files.pythonhosted.org/packages/d9/dc/334c9dfec4bf37795cef50637e2ceed07dd3039f547ef7bc4c85a237416f/jsond-1.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6fbcd211cff424109e0541731d11e08f", "sha256": "84ae22f84976d4a7a44f1b6eef527104ddf591f328d4ebb9cb3d1732dbdcf955"}, "downloads": -1, "filename": "jsond-1.5.0.tar.gz", "has_sig": false, "md5_digest": "6fbcd211cff424109e0541731d11e08f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 5322, "upload_time": "2020-05-02T15:22:29", "upload_time_iso_8601": "2020-05-02T15:22:29.887661Z", "url": "https://files.pythonhosted.org/packages/d9/dc/334c9dfec4bf37795cef50637e2ceed07dd3039f547ef7bc4c85a237416f/jsond-1.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:51 2020"}