{"info": {"author": "Bartoszer", "author_email": "bartoszer@bajt.ovh", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# Quake Stats\n[![Build Status](https://travis-ci.org/brabiega/quakestats.svg?branch=master)](https://travis-ci.org/brabiega/quakestats)\n[![PyPI](https://img.shields.io/pypi/v/quakestats)](https://pypi.org/project/quakestats/)\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/quakestats)](https://pypi.org/project/quakestats/#files)\n\nQuake 3 logs / Quake Live events processing project.\n\nAllows to retrieve, process, analyze, store and present Quake matches.\n\nThe project doesn't aim to give global stats like [qlstats](http://qlstats.net) it's rather meant to store statistics from some server group (server domain). The origins of Quake Stats come from a group of players who occasionally play together and want to keep track of their matches... and to have fun from some custom made medals (badges) :)\n\n## Overview\n### Supported features:\n* processing Quake 3 logs (log parsing, at the moment OSP mod only)\n* processing Quake Live event streams (zmq listen, needs some work)\n* translating (to some extent) Quake 3 logs into Quake Live events\n* analysing matches\n* storing matches in Database backend (Mongo DB)\n* presenting match results through a web application\n\n### Supported mods and game modes\nUnfortunately only OSP FFA from Quake 3 is well tested as it was the main use case\n#### mods\n- [x] - OSP (http://www.orangesmoothie.org/tourneyQ3A/index.html)\n- [x] - Quake Live - most of event processing is implemented\n- [ ] - vanilla Q3 not supported due to missing ServerTime info\n- [ ] - CPMA not supported due to missing ServerTime info\n\n#### modes\n- [x] - DUEL\n- [x] - FFA\n- [ ] - CA\n- [ ] - TDM\n- [ ] - CTF\n\n### Custom medals\nAre described here [resources.js](quakestats/static/js/resources.js)\n\n### Examples\nThe stats are presented with fancy charts, custom medals, etc. See the examples below.\n#### Total badges/medals board\n![home1](examples/home1.png)\n#### Total kills & deaths\n![home2](examples/home2.png)\n#### Single match Kill Death Ratio, Worst Enemy, Score over Time chart\n![match1](examples/match1.png)\n\n### Requirements\n- Decent version of Python 2 or 3\n- Instance of Mongo DB (pointed by ```settings.py```)\n- Modern web browser (requires css grid-layout)\n\n## How to setup\nIn order to setup the application you need to have python 3 (virtualenv recommended) and an instance of mongo DB.\n\n### Installation\n#### Install from pip package\n```bash\npip install quakestats\n```\n\n#### Install from source code\nIs also needed install ```quakestats``` package (in virtualenv if you are using it). To do that you could install it directly\n```bash\npip install -r requirements.txt\npython setup.py install\n```\n\n### Configuration file\nThe application is configured by setting ```QUAKESTATS_SETTINGS``` environment variable to path to configuration file.\nSee example [settings.py](examples/settings.py)\n\n### Verify if everything is properly set up\nQuake Stats provide a simple CLI with a command to verify an environment\n```bash\nquakestats status\n```\n\nExample output:\n```\n(venv) [user@pc quakestats]$ quakestats status\napp -> version: 0.9.61\nsettings -> env var: /opt/quakestats/settings.py\nsettings -> RAW_DATA_DIR: /opt/quakestats/data\ndb -> ping: {'ok': 1.0}\nwebapp -> loadable: Quakestats webapp is loadable\n```\n\n### Run Quake Stats web app\nYou can setup Quake Stats web app with any websever you want (as long as it supports python, e.g. mod wsgi, uwsgi).\nThis documentation covers only running in *twisted* webserver\n\n#### Run in twistd (example)\nYou can launch Quake Stats web application using ```twistd``` webserver. Just make sure to install twisted framework first.\nAlso make sure to use some recent version of twisted (tested with 18.7.0 installed by pip).\n```bash\nFLASK_APP=\"quakestats.web\"; QUAKESTATS_SETTINGS=`pwd`/settings.py; twistd web --wsgi quakestats.web.app\n```\n\n## User/Admin guide\n### Setup admin user\nAdmin user is used by web application to access some additional administrative operations. For now it's only setting map sizes. Just to have a list of recently used maps and their sizes. Nothing more at the moment.\n```bash\n# you need to run the command in proper python environment\n# use \"quakestats status\" to check your environment\nquakestats set-admin-pwd <yourpassword>\n```\n\n### Listening for Quake Live stats\nQuake Live exposes server events through tcp socket authenticated with password.\nUse following CLI command to listen and process such events.\n```bash\nquakestats collect-ql <ip> <port> <stats-password>\n```\n\n### Uploading Quake 3 log file\nIn order to process some data you need to send your match log file to web api endpoint ```/api/v2/upload```.\nYou need an ```ADMIN_TOKEN``` set in configuration.\n```bash\ncurl -X POST --form file=@/path/to/your/games.log --form token=adminsecrettoken host:port/api/v2/upload\n```\nAll log files with extracted matches are stored in directory determined by ```RAW_DATA_DIR``` config entry\n\n### Using automated scrupt to send logs\nQuakestats includes a script which is able to watch q3 log file and\nautomatically send match results when match end is detected.\nYou need to install quakestats (use python pip) package on the server where your log file is.\n Example usage:\n\n```bash\n# q3-log-watch --q3logfile ~/.q3a/osp/games.log --api-endpoint http://<QUAKESTATS URL> --api-token <ADMIN TOKEN>\nq3-log-watch --q3logfile ~/.q3a/osp/games.log --api-endpoint http://localhost:8000 --api-token mytoken123\n```\n\n### Rebuilding database\nYou can rebuild your database using files stored in ```RAW_DATA_DIR``` with simple web api call or CLI.\n```bash\ncurl -X POST host:port/api/v2/admin/rebuild --form token=adminsecrettoken\n```\n```bash\n# you need to run the command in proper python environment\n# use \"quakestats status\" to check your environment\nquakestats rebuild-db\n```\nIf you implement some new Medals or any other backend related feature this API call will clear previous data stored in DB and process all matches from data directory once again.\n\n### Merging player results\nUnfortunately the only way to distinguish players in Quake 3 servers is to use player nickname. When player changes his nickname between matches he will be treated as new unique player. In such cases admin can merge results of two specific players. Use with caution as it will rewrite history of all matches stored in database.\n```bash\ncurl -X POST host:port/api/v2/admin/players/merge --form token=admintoken --form source_player_id=297f6272f79d4918c4efe098 --form target_player_id=df55e5cd4582d6f14cd20746\n```\nIt will merge all results from player with id ```297f6272f79d4918c4efe098``` into player with id ```df55e5cd4582d6f14cd20746```. To find out how player ID is build see the development section.\n\n### Importing preprocessed match log\nPreprocessed match logs stored in ```RAW_DATA_DIR``` can be imported using admin match import API.\nThis can be particularly useful when e.g. debugging some bugs on dev infra.\n```bash\ncurl -X POST --form file=@bugmatch.log --form token=admintoken host:port/api/v2/admin/match/import\n```\n\n## Development\n### Tech stack\nPython, Flask, MongoDB, d3.js, riot.js, zmq\n\n### Building blocks\nThere are several 'responsibility bound' components\n\n#### Dataprovider\nGroups logic related to gathering data (logs, events), processing and analysis.\n\n##### How does it work with Quake 3 Players\nQuake 3 players don't have unique ID's so it's hard to distinguish players between matches. In order to overcome this problem each player has ```player_id``` assigned during match analysis. The ID is constructed as hash of ```SERVER_DOMAIN``` and player nickname as a result it's consistent between matches as long as player keeps his nickname and there is no nickname clash. Perhaps there is some better way? Server side auth?\n\n#### Datasource\nGroups logic related to storage backend and storage related operations\n\n#### Web\nWeb application related components\n- api - web API used by frontend and to retrieve Quake 3 logs\n- views - typical flask views\n\n\n#### Data flow\n```\n# Data gathering\nQuake Live Data\t(events) -> QLMatchFeeder >-------|\n                                                  |----> Data Preprocessor (FullMatchReport)\nQuake 3 Data (log) -> Q3MatchFeeder -> Q3toQL >---|\n\n# Data procesing\nData Preprocessor (FullMatchReport) -> Data Analyzer (AnalysisResult)\n\n# Data storage\nData Analyzer (AnalysisResult) -> StorageApi -> StorageBackend\n```\n\n#### Web data flow\n```\nStats webapp ----| -> Web API -> StorageApi -> StorageBackend\n```\n### Extending\n#### How to add new medal\n- see [SpecialScores class](quakestats/dataprovider/analyzer/specials.py) - for special scores\n- see [Badger class](quakestats/dataprovider/analyzer/badges.py) - for badges calculation\n- see [JS resources](quakestats/static/js/resources.js) - to add new medal image\n\n#### Running tests\n```bash\nmake test\n```\n### Assets\nMedals, icons, etc.\nSome of the assets are missing it would be nice to find some free ones or draw them ;)\n\n### TODO\n- [ ] Add support for listening to Quake Live event publisher, minor work needed\n\n### How to release new version\n```bash\nbumpversion <major|minor|patch> --commit --tag\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brabiega/quakestats", "keywords": "quake stats statistics match analysis visualize", "license": "", "maintainer": "", "maintainer_email": "", "name": "quakestats", "package_url": "https://pypi.org/project/quakestats/", "platform": "", "project_url": "https://pypi.org/project/quakestats/", "project_urls": {"Bug Reports": "https://github.com/brabiega/quakestats/issues", "Homepage": "https://github.com/brabiega/quakestats", "Source": "https://github.com/brabiega/quakestats"}, "release_url": "https://pypi.org/project/quakestats/1.4.0/", "requires_dist": ["Flask (>=1.0)", "Flask-PyMongo", "click (<7,>6.5)", "pandas", "passlib", "pymongo", "pyzmq", "requests"], "requires_python": "", "summary": "Quake 3 / Quake Live match processing app", "version": "1.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Quake Stats</h1>\n<p><a href=\"https://travis-ci.org/brabiega/quakestats\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e8d218cda7cf7b4312a371f990a6d5eba8397fb/68747470733a2f2f7472617669732d63692e6f72672f62726162696567612f7175616b6573746174732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/quakestats/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0faf8100d6e31bed5e18a71e48a2b3bf597821d5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7175616b657374617473\"></a>\n<a href=\"https://pypi.org/project/quakestats/#files\" rel=\"nofollow\"><img alt=\"PyPI - Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11a537e115dddc5fbcc37cc413034d4e4c657111/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f7175616b657374617473\"></a></p>\n<p>Quake 3 logs / Quake Live events processing project.</p>\n<p>Allows to retrieve, process, analyze, store and present Quake matches.</p>\n<p>The project doesn't aim to give global stats like <a href=\"http://qlstats.net\" rel=\"nofollow\">qlstats</a> it's rather meant to store statistics from some server group (server domain). The origins of Quake Stats come from a group of players who occasionally play together and want to keep track of their matches... and to have fun from some custom made medals (badges) :)</p>\n<h2>Overview</h2>\n<h3>Supported features:</h3>\n<ul>\n<li>processing Quake 3 logs (log parsing, at the moment OSP mod only)</li>\n<li>processing Quake Live event streams (zmq listen, needs some work)</li>\n<li>translating (to some extent) Quake 3 logs into Quake Live events</li>\n<li>analysing matches</li>\n<li>storing matches in Database backend (Mongo DB)</li>\n<li>presenting match results through a web application</li>\n</ul>\n<h3>Supported mods and game modes</h3>\n<p>Unfortunately only OSP FFA from Quake 3 is well tested as it was the main use case</p>\n<h4>mods</h4>\n<ul>\n<li>[x] - OSP (<a href=\"http://www.orangesmoothie.org/tourneyQ3A/index.html\" rel=\"nofollow\">http://www.orangesmoothie.org/tourneyQ3A/index.html</a>)</li>\n<li>[x] - Quake Live - most of event processing is implemented</li>\n<li>[ ] - vanilla Q3 not supported due to missing ServerTime info</li>\n<li>[ ] - CPMA not supported due to missing ServerTime info</li>\n</ul>\n<h4>modes</h4>\n<ul>\n<li>[x] - DUEL</li>\n<li>[x] - FFA</li>\n<li>[ ] - CA</li>\n<li>[ ] - TDM</li>\n<li>[ ] - CTF</li>\n</ul>\n<h3>Custom medals</h3>\n<p>Are described here <a href=\"quakestats/static/js/resources.js\" rel=\"nofollow\">resources.js</a></p>\n<h3>Examples</h3>\n<p>The stats are presented with fancy charts, custom medals, etc. See the examples below.</p>\n<h4>Total badges/medals board</h4>\n<p><img alt=\"home1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e68ef56614bed48137b4971b68fff4232f0705b6/6578616d706c65732f686f6d65312e706e67\"></p>\n<h4>Total kills &amp; deaths</h4>\n<p><img alt=\"home2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ce61b3b622662771fa81f2f15d315abb9cdb216/6578616d706c65732f686f6d65322e706e67\"></p>\n<h4>Single match Kill Death Ratio, Worst Enemy, Score over Time chart</h4>\n<p><img alt=\"match1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77f1c2aad2d79e0b1467ed00d9d1a087e48a5254/6578616d706c65732f6d61746368312e706e67\"></p>\n<h3>Requirements</h3>\n<ul>\n<li>Decent version of Python 2 or 3</li>\n<li>Instance of Mongo DB (pointed by <code>settings.py</code>)</li>\n<li>Modern web browser (requires css grid-layout)</li>\n</ul>\n<h2>How to setup</h2>\n<p>In order to setup the application you need to have python 3 (virtualenv recommended) and an instance of mongo DB.</p>\n<h3>Installation</h3>\n<h4>Install from pip package</h4>\n<pre>pip install quakestats\n</pre>\n<h4>Install from source code</h4>\n<p>Is also needed install <code>quakestats</code> package (in virtualenv if you are using it). To do that you could install it directly</p>\n<pre>pip install -r requirements.txt\npython setup.py install\n</pre>\n<h3>Configuration file</h3>\n<p>The application is configured by setting <code>QUAKESTATS_SETTINGS</code> environment variable to path to configuration file.\nSee example <a href=\"examples/settings.py\" rel=\"nofollow\">settings.py</a></p>\n<h3>Verify if everything is properly set up</h3>\n<p>Quake Stats provide a simple CLI with a command to verify an environment</p>\n<pre>quakestats status\n</pre>\n<p>Example output:</p>\n<pre><code>(venv) [user@pc quakestats]$ quakestats status\napp -&gt; version: 0.9.61\nsettings -&gt; env var: /opt/quakestats/settings.py\nsettings -&gt; RAW_DATA_DIR: /opt/quakestats/data\ndb -&gt; ping: {'ok': 1.0}\nwebapp -&gt; loadable: Quakestats webapp is loadable\n</code></pre>\n<h3>Run Quake Stats web app</h3>\n<p>You can setup Quake Stats web app with any websever you want (as long as it supports python, e.g. mod wsgi, uwsgi).\nThis documentation covers only running in <em>twisted</em> webserver</p>\n<h4>Run in twistd (example)</h4>\n<p>You can launch Quake Stats web application using <code>twistd</code> webserver. Just make sure to install twisted framework first.\nAlso make sure to use some recent version of twisted (tested with 18.7.0 installed by pip).</p>\n<pre><span class=\"nv\">FLASK_APP</span><span class=\"o\">=</span><span class=\"s2\">\"quakestats.web\"</span><span class=\"p\">;</span> <span class=\"nv\">QUAKESTATS_SETTINGS</span><span class=\"o\">=</span><span class=\"sb\">`</span><span class=\"nb\">pwd</span><span class=\"sb\">`</span>/settings.py<span class=\"p\">;</span> twistd web --wsgi quakestats.web.app\n</pre>\n<h2>User/Admin guide</h2>\n<h3>Setup admin user</h3>\n<p>Admin user is used by web application to access some additional administrative operations. For now it's only setting map sizes. Just to have a list of recently used maps and their sizes. Nothing more at the moment.</p>\n<pre><span class=\"c1\"># you need to run the command in proper python environment</span>\n<span class=\"c1\"># use \"quakestats status\" to check your environment</span>\nquakestats set-admin-pwd &lt;yourpassword&gt;\n</pre>\n<h3>Listening for Quake Live stats</h3>\n<p>Quake Live exposes server events through tcp socket authenticated with password.\nUse following CLI command to listen and process such events.</p>\n<pre>quakestats collect-ql &lt;ip&gt; &lt;port&gt; &lt;stats-password&gt;\n</pre>\n<h3>Uploading Quake 3 log file</h3>\n<p>In order to process some data you need to send your match log file to web api endpoint <code>/api/v2/upload</code>.\nYou need an <code>ADMIN_TOKEN</code> set in configuration.</p>\n<pre>curl -X POST --form <span class=\"nv\">file</span><span class=\"o\">=</span>@/path/to/your/games.log --form <span class=\"nv\">token</span><span class=\"o\">=</span>adminsecrettoken host:port/api/v2/upload\n</pre>\n<p>All log files with extracted matches are stored in directory determined by <code>RAW_DATA_DIR</code> config entry</p>\n<h3>Using automated scrupt to send logs</h3>\n<p>Quakestats includes a script which is able to watch q3 log file and\nautomatically send match results when match end is detected.\nYou need to install quakestats (use python pip) package on the server where your log file is.\nExample usage:</p>\n<pre><span class=\"c1\"># q3-log-watch --q3logfile ~/.q3a/osp/games.log --api-endpoint http://&lt;QUAKESTATS URL&gt; --api-token &lt;ADMIN TOKEN&gt;</span>\nq3-log-watch --q3logfile ~/.q3a/osp/games.log --api-endpoint http://localhost:8000 --api-token mytoken123\n</pre>\n<h3>Rebuilding database</h3>\n<p>You can rebuild your database using files stored in <code>RAW_DATA_DIR</code> with simple web api call or CLI.</p>\n<pre>curl -X POST host:port/api/v2/admin/rebuild --form <span class=\"nv\">token</span><span class=\"o\">=</span>adminsecrettoken\n</pre>\n<pre><span class=\"c1\"># you need to run the command in proper python environment</span>\n<span class=\"c1\"># use \"quakestats status\" to check your environment</span>\nquakestats rebuild-db\n</pre>\n<p>If you implement some new Medals or any other backend related feature this API call will clear previous data stored in DB and process all matches from data directory once again.</p>\n<h3>Merging player results</h3>\n<p>Unfortunately the only way to distinguish players in Quake 3 servers is to use player nickname. When player changes his nickname between matches he will be treated as new unique player. In such cases admin can merge results of two specific players. Use with caution as it will rewrite history of all matches stored in database.</p>\n<pre>curl -X POST host:port/api/v2/admin/players/merge --form <span class=\"nv\">token</span><span class=\"o\">=</span>admintoken --form <span class=\"nv\">source_player_id</span><span class=\"o\">=</span>297f6272f79d4918c4efe098 --form <span class=\"nv\">target_player_id</span><span class=\"o\">=</span>df55e5cd4582d6f14cd20746\n</pre>\n<p>It will merge all results from player with id <code>297f6272f79d4918c4efe098</code> into player with id <code>df55e5cd4582d6f14cd20746</code>. To find out how player ID is build see the development section.</p>\n<h3>Importing preprocessed match log</h3>\n<p>Preprocessed match logs stored in <code>RAW_DATA_DIR</code> can be imported using admin match import API.\nThis can be particularly useful when e.g. debugging some bugs on dev infra.</p>\n<pre>curl -X POST --form <span class=\"nv\">file</span><span class=\"o\">=</span>@bugmatch.log --form <span class=\"nv\">token</span><span class=\"o\">=</span>admintoken host:port/api/v2/admin/match/import\n</pre>\n<h2>Development</h2>\n<h3>Tech stack</h3>\n<p>Python, Flask, MongoDB, d3.js, riot.js, zmq</p>\n<h3>Building blocks</h3>\n<p>There are several 'responsibility bound' components</p>\n<h4>Dataprovider</h4>\n<p>Groups logic related to gathering data (logs, events), processing and analysis.</p>\n<h5>How does it work with Quake 3 Players</h5>\n<p>Quake 3 players don't have unique ID's so it's hard to distinguish players between matches. In order to overcome this problem each player has <code>player_id</code> assigned during match analysis. The ID is constructed as hash of <code>SERVER_DOMAIN</code> and player nickname as a result it's consistent between matches as long as player keeps his nickname and there is no nickname clash. Perhaps there is some better way? Server side auth?</p>\n<h4>Datasource</h4>\n<p>Groups logic related to storage backend and storage related operations</p>\n<h4>Web</h4>\n<p>Web application related components</p>\n<ul>\n<li>api - web API used by frontend and to retrieve Quake 3 logs</li>\n<li>views - typical flask views</li>\n</ul>\n<h4>Data flow</h4>\n<pre><code># Data gathering\nQuake Live Data\t(events) -&gt; QLMatchFeeder &gt;-------|\n                                                  |----&gt; Data Preprocessor (FullMatchReport)\nQuake 3 Data (log) -&gt; Q3MatchFeeder -&gt; Q3toQL &gt;---|\n\n# Data procesing\nData Preprocessor (FullMatchReport) -&gt; Data Analyzer (AnalysisResult)\n\n# Data storage\nData Analyzer (AnalysisResult) -&gt; StorageApi -&gt; StorageBackend\n</code></pre>\n<h4>Web data flow</h4>\n<pre><code>Stats webapp ----| -&gt; Web API -&gt; StorageApi -&gt; StorageBackend\n</code></pre>\n<h3>Extending</h3>\n<h4>How to add new medal</h4>\n<ul>\n<li>see <a href=\"quakestats/dataprovider/analyzer/specials.py\" rel=\"nofollow\">SpecialScores class</a> - for special scores</li>\n<li>see <a href=\"quakestats/dataprovider/analyzer/badges.py\" rel=\"nofollow\">Badger class</a> - for badges calculation</li>\n<li>see <a href=\"quakestats/static/js/resources.js\" rel=\"nofollow\">JS resources</a> - to add new medal image</li>\n</ul>\n<h4>Running tests</h4>\n<pre>make <span class=\"nb\">test</span>\n</pre>\n<h3>Assets</h3>\n<p>Medals, icons, etc.\nSome of the assets are missing it would be nice to find some free ones or draw them ;)</p>\n<h3>TODO</h3>\n<ul>\n<li>[ ] Add support for listening to Quake Live event publisher, minor work needed</li>\n</ul>\n<h3>How to release new version</h3>\n<pre>bumpversion &lt;major<span class=\"p\">|</span>minor<span class=\"p\">|</span>patch&gt; --commit --tag\n</pre>\n\n          </div>"}, "last_serial": 7070671, "releases": {"0.13.0": [{"comment_text": "", "digests": {"md5": "86894473bd4ae34367ce7cb31b252766", "sha256": "8bf31f395884ec1c9a6d5a16a700be6705105904dd3e6b99cf164519e0d11283"}, "downloads": -1, "filename": "quakestats-0.13.0-py3-none-any.whl", "has_sig": false, "md5_digest": "86894473bd4ae34367ce7cb31b252766", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 275805, "upload_time": "2019-11-17T13:40:50", "upload_time_iso_8601": "2019-11-17T13:40:50.196191Z", "url": "https://files.pythonhosted.org/packages/d7/64/ee85965e912d9def5c063115e2567d4bb4a4a56549bdead34a0e92aea79c/quakestats-0.13.0-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "89fc18bc79b101ee76acbf55f917291e", "sha256": "e9b81b4ce30082664e639367d9384b7f651598eb9ee304dcd5387fe470797259"}, "downloads": -1, "filename": "quakestats-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "89fc18bc79b101ee76acbf55f917291e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 276888, "upload_time": "2019-11-17T21:41:36", "upload_time_iso_8601": "2019-11-17T21:41:36.227478Z", "url": "https://files.pythonhosted.org/packages/4f/d7/b584f268a8c43eeb458393ed23a631960fcba8bcc2e48f363840a15ed355/quakestats-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f9d6c361dbe822850e8b2b7f754716a5", "sha256": "825c35662e53e34664bc922f1dfc9fbc986cab9f184eebe8a305bf983a803ee8"}, "downloads": -1, "filename": "quakestats-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f9d6c361dbe822850e8b2b7f754716a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 280974, "upload_time": "2019-11-18T22:17:50", "upload_time_iso_8601": "2019-11-18T22:17:50.522037Z", "url": "https://files.pythonhosted.org/packages/f2/eb/17d5dc8ad4e9f0ff634d2c7726f22130ee1323f498dba09ad105f83a5a98/quakestats-1.0.1-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "488c91834fee820549f259c6a3a8bc76", "sha256": "10fcc98c45a5794f1b9dde57fb46e1bda64d5dd1d907e43ed4917c8d848b61b6"}, "downloads": -1, "filename": "quakestats-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "488c91834fee820549f259c6a3a8bc76", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 281673, "upload_time": "2019-11-19T22:27:06", "upload_time_iso_8601": "2019-11-19T22:27:06.285317Z", "url": "https://files.pythonhosted.org/packages/70/a5/0f39322a9c2771d5e160113f42b86d0b5881991a45ef383427f98ed0c815/quakestats-1.1.0-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "85b07a667f323dee41a27f00c1bc3344", "sha256": "452af6757f502fc387a3d437861379b1be60dfa1edb6ec9c4dd297127643c4bf"}, "downloads": -1, "filename": "quakestats-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "85b07a667f323dee41a27f00c1bc3344", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 285225, "upload_time": "2019-11-24T20:19:20", "upload_time_iso_8601": "2019-11-24T20:19:20.252496Z", "url": "https://files.pythonhosted.org/packages/ee/b8/d995a8bdab1c3ed2e1569aacc4d8b50f9a28a7cc963d21e0d62978509228/quakestats-1.2.0-py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "e63bb8324a10c6ae988be6a5db5a51e8", "sha256": "276931cc3c2a3d197fb2d260d74f93449a9930ff031eab552a0f4afb58fa80ed"}, "downloads": -1, "filename": "quakestats-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e63bb8324a10c6ae988be6a5db5a51e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 314811, "upload_time": "2020-02-05T22:13:00", "upload_time_iso_8601": "2020-02-05T22:13:00.027839Z", "url": "https://files.pythonhosted.org/packages/a0/44/7937245c45be921c38ac668ab74754b3d875800e6e6981dc102c9bb225ed/quakestats-1.3.0-py3-none-any.whl", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "3fabc02742748249e8e950063b2d8b78", "sha256": "cf0348191f4c9bbbf1b508def0545623c66b4680443e5e3a2fc12bb8b0826bbc"}, "downloads": -1, "filename": "quakestats-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3fabc02742748249e8e950063b2d8b78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 314813, "upload_time": "2020-02-05T22:30:01", "upload_time_iso_8601": "2020-02-05T22:30:01.990252Z", "url": "https://files.pythonhosted.org/packages/2d/11/b1fee26ad2049545ad16958963f688dd5a8a4a5711bda8056a8d15eb72c7/quakestats-1.3.1-py3-none-any.whl", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "d6b87154b0b45e493a958bb1c532e0f8", "sha256": "004ec40b109f6fb624a51551dd183d7e26283a35038e2c860633296f72f7002a"}, "downloads": -1, "filename": "quakestats-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d6b87154b0b45e493a958bb1c532e0f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 324066, "upload_time": "2020-04-21T19:28:26", "upload_time_iso_8601": "2020-04-21T19:28:26.105465Z", "url": "https://files.pythonhosted.org/packages/b8/4f/6ba7518e58cad700950c4603c11c6ea7c3d1c0b6be4cdb568145fcbadc5a/quakestats-1.4.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6b87154b0b45e493a958bb1c532e0f8", "sha256": "004ec40b109f6fb624a51551dd183d7e26283a35038e2c860633296f72f7002a"}, "downloads": -1, "filename": "quakestats-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d6b87154b0b45e493a958bb1c532e0f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 324066, "upload_time": "2020-04-21T19:28:26", "upload_time_iso_8601": "2020-04-21T19:28:26.105465Z", "url": "https://files.pythonhosted.org/packages/b8/4f/6ba7518e58cad700950c4603c11c6ea7c3d1c0b6be4cdb568145fcbadc5a/quakestats-1.4.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:09:02 2020"}