{"info": {"author": "Ian Foote", "author_email": "python@ian.feete.org", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# Rest Framework Generic Relations [![Build Status](https://travis-ci.org/Ian-Foote/rest-framework-generic-relations.svg?branch=pep8)](https://travis-ci.org/Ian-Foote/rest-framework-generic-relations)\n\nThis library implements [Django REST Framework](http://www.django-rest-framework.org/) serializers to handle generic foreign keys.\n\n# Requirements\n\nAny currently-supported combination of Django REST Framework, Python, and Django.\n\n# Installation\n\nInstall using `pip`...\n```sh\npip install  rest-framework-generic-relations\n```\nAdd `'generic_relations'` to your `INSTALLED_APPS` setting.\n```python\nINSTALLED_APPS = (\n    ...\n    'generic_relations',\n)\n```\n\n\n# API Reference\n\n## GenericRelatedField\n\nThis field serializes generic foreign keys. For a primer on generic foreign keys, first see: https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/\n\n\nLet's assume a `TaggedItem` model which has a generic relationship with other arbitrary models:\n\n```python\nclass TaggedItem(models.Model):\n    tag_name = models.SlugField()\n    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n    object_id = models.PositiveIntegerField()\n    tagged_object = GenericForeignKey('content_type', 'object_id')\n```\n\nAnd the following two models, which may have associated tags:\n\n```python\nclass Bookmark(models.Model):\n    \"\"\"\n    A bookmark consists of a URL, and 0 or more descriptive tags.\n    \"\"\"\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem)\n\nclass Note(models.Model):\n    \"\"\"\n    A note consists of some text, and 0 or more descriptive tags.\n    \"\"\"\n    text = models.CharField(max_length=1000)\n    tags = GenericRelation(TaggedItem)\n```\n\nNow we define serializers for each model that may get associated with tags.\n\n```python\nclass BookmarkSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Bookmark\n        fields = ('url',)\n\nclass NoteSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Note\n        fields = ('text',)\n```\n\nThe model serializer for the `TaggedItem` model could look like this:\n\n```python\nfrom generic_relations.relations import GenericRelatedField\n\nclass TagSerializer(serializers.ModelSerializer):\n    \"\"\"\n    A `TaggedItem` serializer with a `GenericRelatedField` mapping all possible\n    models to their respective serializers.\n    \"\"\"\n    tagged_object = GenericRelatedField({\n        Bookmark: BookmarkSerializer(),\n        Note: NoteSerializer()\n    })\n\n    class Meta:\n        model = TaggedItem\n        fields = ('tag_name', 'tagged_object')\n```\n\nThe JSON representation of a `TaggedItem` object with `name='django'` and its generic foreign key pointing at a `Bookmark` object with `url='https://www.djangoproject.com/'` would look like this:\n\n```json\n{\n    \"tagged_object\": {\n        \"url\": \"https://www.djangoproject.com/\"\n    },\n    \"tag_name\": \"django\"\n}\n```\n\nIf you want to have your generic foreign key represented as hyperlink, simply use `HyperlinkedRelatedField` objects:\n\n```python\nclass TagSerializer(serializers.ModelSerializer):\n    \"\"\"\n    A `Tag` serializer with a `GenericRelatedField` mapping all possible\n    models to properly set up `HyperlinkedRelatedField`s.\n    \"\"\"\n    tagged_object = GenericRelatedField({\n        Bookmark: serializers.HyperlinkedRelatedField(\n            queryset = Bookmark.objects.all(),\n            view_name='bookmark-detail',\n        ),\n        Note: serializers.HyperlinkedRelatedField(\n            queryset = Note.objects.all(),\n            view_name='note-detail',\n        ),\n    })\n\n    class Meta:\n        model = TaggedItem\n        fields = ('tag_name', 'tagged_object')\n```\n\nThe JSON representation of the same `TaggedItem` example object could now look something like this:\n\n```json\n{\n    \"tagged_object\": \"/bookmark/1/\",\n    \"tag_name\": \"django\"\n}\n```\n\n## Writing to generic foreign keys\n\nThe above `TagSerializer` is also writable. By default, a `GenericRelatedField` iterates over its nested serializers and returns the value of the first serializer that is actually able to perform `to_internal_value()` without any errors.\nNote, that (at the moment) only `HyperlinkedRelatedField` is able to serialize model objects out of the box.\n\n\nThe following operations would create a `TaggedItem` object with it's `tagged_object` property pointing at the `Bookmark` object found at the given detail end point.\n\n```python\ntag_serializer = TagSerializer(data={\n    'tag_name': 'python',\n    'tagged_object': '/bookmark/1/'\n})\n\ntag_serializer.is_valid()\ntag_serializer.save()\n```\n\nIf you feel that this default behavior doesn't suit your needs, you can subclass `GenericRelatedField` and override its `get_serializer_for_instance` or `get_deserializer_for_data` respectively to implement your own way of decision-making.\n\n## GenericModelSerializer\n\nSometimes you may want to serialize a single list of different top-level things. For instance, suppose I have an API view that returns what items are on my bookshelf. Let's define some models:\n\n```python\nfrom django.core.validators import MaxValueValidator\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    author = models.CharField(max_length=255)\n\nclass Bluray(models.Model):\n    title = models.CharField(max_length=255)\n    rating = models.PositiveSmallIntegerField(\n        validators=[MaxValueValidator(5)],\n    )\n```\n\nThen we could have a serializer for each type of object:\n\n```python\nclass BookSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Book\n        fields = ('title', 'author')\n\nclass BluraySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Bluray\n        fields = ('title', 'rating')\n```\n\nNow we can create a generic list serializer, which delegates to the above serializers based on the type of model it's serializing:\n\n```python\nbookshelf_item_serializer = GenericModelSerializer(\n    {\n        Book: BookSerializer(),\n        Bluray: BluraySerializer(),\n    },\n    many=True,\n)\n```\n\nThen we can serialize a mixed list of items:\n\n```python\n>>> bookshelf_item_serializer.to_representation([\n    Book.objects.get(title='War and Peace'),\n    Bluray.objects.get(title='Die Hard'),\n    Bluray.objects.get(title='Shawshank Redemption'),\n    Book.objects.get(title='To Kill a Mockingbird'),\n])\n\n[\n    {'title': 'War and Peace', 'author': 'Leo Tolstoy'},\n    {'title': 'Die Hard', 'rating': 5},\n    {'title': 'Shawshank Redemption', 'rating': 5},\n    {'title': 'To Kill a Mockingbird', 'author': 'Harper Lee'}\n]\n```\n\n\n## A few things you should note:\n\n* Although `GenericForeignKey` fields can be set to any model object, the `GenericRelatedField` only handles models explicitly defined in its configuration dictionary.\n* Reverse generic keys, expressed using the `GenericRelation` field, can be serialized using the regular relational field types, since the type of the target in the relationship is always known.\n* The order in which you register serializers matters as far as write operations are concerned.\n* Unless you provide a custom `get_deserializer_for_data()` method, only `HyperlinkedRelatedField` provides write access to generic model relations.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ian-Foote/rest-framework-generic-relations", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "rest-framework-generic-relations", "package_url": "https://pypi.org/project/rest-framework-generic-relations/", "platform": "", "project_url": "https://pypi.org/project/rest-framework-generic-relations/", "project_urls": {"Homepage": "https://github.com/Ian-Foote/rest-framework-generic-relations"}, "release_url": "https://pypi.org/project/rest-framework-generic-relations/2.0.0/", "requires_dist": ["djangorestframework (>=3.8.0)"], "requires_python": ">=3.4", "summary": "Generic Relations for Django Rest Framework", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Rest Framework Generic Relations <a href=\"https://travis-ci.org/Ian-Foote/rest-framework-generic-relations\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f4e9d2e7659f1f01c6533f3d66ac592817c0c98/68747470733a2f2f7472617669732d63692e6f72672f49616e2d466f6f74652f726573742d6672616d65776f726b2d67656e657269632d72656c6174696f6e732e7376673f6272616e63683d70657038\"></a></h1>\n<p>This library implements <a href=\"http://www.django-rest-framework.org/\" rel=\"nofollow\">Django REST Framework</a> serializers to handle generic foreign keys.</p>\n<h1>Requirements</h1>\n<p>Any currently-supported combination of Django REST Framework, Python, and Django.</p>\n<h1>Installation</h1>\n<p>Install using <code>pip</code>...</p>\n<pre>pip install  rest-framework-generic-relations\n</pre>\n<p>Add <code>'generic_relations'</code> to your <code>INSTALLED_APPS</code> setting.</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'generic_relations'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>API Reference</h1>\n<h2>GenericRelatedField</h2>\n<p>This field serializes generic foreign keys. For a primer on generic foreign keys, first see: <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/\" rel=\"nofollow\">https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/</a></p>\n<p>Let's assume a <code>TaggedItem</code> model which has a generic relationship with other arbitrary models:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TaggedItem</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">tag_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SlugField</span><span class=\"p\">()</span>\n    <span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">ContentType</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">object_id</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">PositiveIntegerField</span><span class=\"p\">()</span>\n    <span class=\"n\">tagged_object</span> <span class=\"o\">=</span> <span class=\"n\">GenericForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'content_type'</span><span class=\"p\">,</span> <span class=\"s1\">'object_id'</span><span class=\"p\">)</span>\n</pre>\n<p>And the following two models, which may have associated tags:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Bookmark</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A bookmark consists of a URL, and 0 or more descriptive tags.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">URLField</span><span class=\"p\">()</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">GenericRelation</span><span class=\"p\">(</span><span class=\"n\">TaggedItem</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Note</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A note consists of some text, and 0 or more descriptive tags.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">GenericRelation</span><span class=\"p\">(</span><span class=\"n\">TaggedItem</span><span class=\"p\">)</span>\n</pre>\n<p>Now we define serializers for each model that may get associated with tags.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BookmarkSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Bookmark</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'url'</span><span class=\"p\">,)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">NoteSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Note</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'text'</span><span class=\"p\">,)</span>\n</pre>\n<p>The model serializer for the <code>TaggedItem</code> model could look like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">generic_relations.relations</span> <span class=\"kn\">import</span> <span class=\"n\">GenericRelatedField</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TagSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A `TaggedItem` serializer with a `GenericRelatedField` mapping all possible</span>\n<span class=\"sd\">    models to their respective serializers.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">tagged_object</span> <span class=\"o\">=</span> <span class=\"n\">GenericRelatedField</span><span class=\"p\">({</span>\n        <span class=\"n\">Bookmark</span><span class=\"p\">:</span> <span class=\"n\">BookmarkSerializer</span><span class=\"p\">(),</span>\n        <span class=\"n\">Note</span><span class=\"p\">:</span> <span class=\"n\">NoteSerializer</span><span class=\"p\">()</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">TaggedItem</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'tag_name'</span><span class=\"p\">,</span> <span class=\"s1\">'tagged_object'</span><span class=\"p\">)</span>\n</pre>\n<p>The JSON representation of a <code>TaggedItem</code> object with <code>name='django'</code> and its generic foreign key pointing at a <code>Bookmark</code> object with <code>url='https://www.djangoproject.com/'</code> would look like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"tagged_object\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://www.djangoproject.com/\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"tag_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"django\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>If you want to have your generic foreign key represented as hyperlink, simply use <code>HyperlinkedRelatedField</code> objects:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">TagSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    A `Tag` serializer with a `GenericRelatedField` mapping all possible</span>\n<span class=\"sd\">    models to properly set up `HyperlinkedRelatedField`s.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">tagged_object</span> <span class=\"o\">=</span> <span class=\"n\">GenericRelatedField</span><span class=\"p\">({</span>\n        <span class=\"n\">Bookmark</span><span class=\"p\">:</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">HyperlinkedRelatedField</span><span class=\"p\">(</span>\n            <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Bookmark</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(),</span>\n            <span class=\"n\">view_name</span><span class=\"o\">=</span><span class=\"s1\">'bookmark-detail'</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">Note</span><span class=\"p\">:</span> <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">HyperlinkedRelatedField</span><span class=\"p\">(</span>\n            <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Note</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(),</span>\n            <span class=\"n\">view_name</span><span class=\"o\">=</span><span class=\"s1\">'note-detail'</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">TaggedItem</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'tag_name'</span><span class=\"p\">,</span> <span class=\"s1\">'tagged_object'</span><span class=\"p\">)</span>\n</pre>\n<p>The JSON representation of the same <code>TaggedItem</code> example object could now look something like this:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"tagged_object\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/bookmark/1/\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"tag_name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"django\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Writing to generic foreign keys</h2>\n<p>The above <code>TagSerializer</code> is also writable. By default, a <code>GenericRelatedField</code> iterates over its nested serializers and returns the value of the first serializer that is actually able to perform <code>to_internal_value()</code> without any errors.\nNote, that (at the moment) only <code>HyperlinkedRelatedField</code> is able to serialize model objects out of the box.</p>\n<p>The following operations would create a <code>TaggedItem</code> object with it's <code>tagged_object</code> property pointing at the <code>Bookmark</code> object found at the given detail end point.</p>\n<pre><span class=\"n\">tag_serializer</span> <span class=\"o\">=</span> <span class=\"n\">TagSerializer</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'tag_name'</span><span class=\"p\">:</span> <span class=\"s1\">'python'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'tagged_object'</span><span class=\"p\">:</span> <span class=\"s1\">'/bookmark/1/'</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">tag_serializer</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">()</span>\n<span class=\"n\">tag_serializer</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<p>If you feel that this default behavior doesn't suit your needs, you can subclass <code>GenericRelatedField</code> and override its <code>get_serializer_for_instance</code> or <code>get_deserializer_for_data</code> respectively to implement your own way of decision-making.</p>\n<h2>GenericModelSerializer</h2>\n<p>Sometimes you may want to serialize a single list of different top-level things. For instance, suppose I have an API view that returns what items are on my bookshelf. Let's define some models:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.validators</span> <span class=\"kn\">import</span> <span class=\"n\">MaxValueValidator</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Bluray</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">PositiveSmallIntegerField</span><span class=\"p\">(</span>\n        <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">MaxValueValidator</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)],</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Then we could have a serializer for each type of object:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BookSerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Book</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BluraySerializer</span><span class=\"p\">(</span><span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">ModelSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Bluray</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'rating'</span><span class=\"p\">)</span>\n</pre>\n<p>Now we can create a generic list serializer, which delegates to the above serializers based on the type of model it's serializing:</p>\n<pre><span class=\"n\">bookshelf_item_serializer</span> <span class=\"o\">=</span> <span class=\"n\">GenericModelSerializer</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Book</span><span class=\"p\">:</span> <span class=\"n\">BookSerializer</span><span class=\"p\">(),</span>\n        <span class=\"n\">Bluray</span><span class=\"p\">:</span> <span class=\"n\">BluraySerializer</span><span class=\"p\">(),</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">many</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Then we can serialize a mixed list of items:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bookshelf_item_serializer</span><span class=\"o\">.</span><span class=\"n\">to_representation</span><span class=\"p\">([</span>\n    <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'War and Peace'</span><span class=\"p\">),</span>\n    <span class=\"n\">Bluray</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Die Hard'</span><span class=\"p\">),</span>\n    <span class=\"n\">Bluray</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Shawshank Redemption'</span><span class=\"p\">),</span>\n    <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'To Kill a Mockingbird'</span><span class=\"p\">),</span>\n<span class=\"p\">])</span>\n\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'War and Peace'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'Leo Tolstoy'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Die Hard'</span><span class=\"p\">,</span> <span class=\"s1\">'rating'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Shawshank Redemption'</span><span class=\"p\">,</span> <span class=\"s1\">'rating'</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'To Kill a Mockingbird'</span><span class=\"p\">,</span> <span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'Harper Lee'</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<h2>A few things you should note:</h2>\n<ul>\n<li>Although <code>GenericForeignKey</code> fields can be set to any model object, the <code>GenericRelatedField</code> only handles models explicitly defined in its configuration dictionary.</li>\n<li>Reverse generic keys, expressed using the <code>GenericRelation</code> field, can be serialized using the regular relational field types, since the type of the target in the relationship is always known.</li>\n<li>The order in which you register serializers matters as far as write operations are concerned.</li>\n<li>Unless you provide a custom <code>get_deserializer_for_data()</code> method, only <code>HyperlinkedRelatedField</code> provides write access to generic model relations.</li>\n</ul>\n\n          </div>"}, "last_serial": 6534220, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "edc161438a6f5d8e4f39aac652dbd438", "sha256": "e8830cf039f4d3d9d69855a9e46d817f33f00e3a785fe75f88f78202efa099b4"}, "downloads": -1, "filename": "rest_framework_generic_relations-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "edc161438a6f5d8e4f39aac652dbd438", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6267, "upload_time": "2014-06-13T07:50:12", "upload_time_iso_8601": "2014-06-13T07:50:12.547086Z", "url": "https://files.pythonhosted.org/packages/1c/a9/cf0bdd949cbc3a55fc495d7ad29d69697332101c299e16a9bc6e08373591/rest_framework_generic_relations-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d0309759112e87f281cd85321ab5d25", "sha256": "1d494519ce202e7a34a19b56a31962713924f4f635243fbc11a7f86c16ac4be0"}, "downloads": -1, "filename": "rest-framework-generic-relations-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6d0309759112e87f281cd85321ab5d25", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3937, "upload_time": "2014-06-13T07:50:14", "upload_time_iso_8601": "2014-06-13T07:50:14.805237Z", "url": "https://files.pythonhosted.org/packages/f8/d9/f3efbf4a3ba9b0f2c82b4232e94c166b57053e629807279feb356f5fd4c5/rest-framework-generic-relations-0.1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "a88394fbe97bfa49aa1846f692a6c72c", "sha256": "a73a8f3ca17b18cfc8ff6ea9d8bd48a5b98cf6f9dee167e5982d087ac0c30d85"}, "downloads": -1, "filename": "rest_framework_generic_relations-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a88394fbe97bfa49aa1846f692a6c72c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6361, "upload_time": "2016-01-21T21:59:03", "upload_time_iso_8601": "2016-01-21T21:59:03.091014Z", "url": "https://files.pythonhosted.org/packages/55/56/9b48a37754a21037c2bdeebcf0c375014fa34ebc2eefe2fe2840aedc912a/rest_framework_generic_relations-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40c92823994b36f87df0861489d5ad17", "sha256": "2928e3bb645883d6d9df7c4366931fe903ab60ee3b6e4720520db9763fb834c0"}, "downloads": -1, "filename": "rest-framework-generic-relations-1.0.0.tar.gz", "has_sig": false, "md5_digest": "40c92823994b36f87df0861489d5ad17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4008, "upload_time": "2016-01-21T21:59:10", "upload_time_iso_8601": "2016-01-21T21:59:10.331083Z", "url": "https://files.pythonhosted.org/packages/ba/d2/5806a0015ed07d2ee1a5631a2d668e65f895bb406f68ad143ea3a11e1a43/rest-framework-generic-relations-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "010690f9321ef32938751378cb71cd93", "sha256": "74835ffa5d9d8c8de5ebf18a7267cd15aac990fbbe378505cdfd07ab70ba1ed7"}, "downloads": -1, "filename": "rest_framework_generic_relations-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "010690f9321ef32938751378cb71cd93", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8543, "upload_time": "2016-02-27T10:17:23", "upload_time_iso_8601": "2016-02-27T10:17:23.951918Z", "url": "https://files.pythonhosted.org/packages/dc/d4/f48cf51bc40e95dd457b8430d387a2fdef0baf4a7dcb2455bd8a9200b928/rest_framework_generic_relations-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c0fd7f745692910977329a5967b9d96", "sha256": "8c0177f13a707b4db7a490625a4b888888c9cf88d0d1e05bfdec9aef136a8d17"}, "downloads": -1, "filename": "rest-framework-generic-relations-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6c0fd7f745692910977329a5967b9d96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5351, "upload_time": "2016-02-27T10:17:28", "upload_time_iso_8601": "2016-02-27T10:17:28.801033Z", "url": "https://files.pythonhosted.org/packages/9b/1a/d230f05e0fae59d4335c132f53a7e3d60f6bdab7cedbd7d88bcf397d9ed6/rest-framework-generic-relations-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "21a3b78099ea5f22b32dabe764b9e42f", "sha256": "10729c8acd8695c18de098da24d90ad9a2cf4d01fa05ac98b07f72c9ddda1cce"}, "downloads": -1, "filename": "rest_framework_generic_relations-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "21a3b78099ea5f22b32dabe764b9e42f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7567, "upload_time": "2018-07-15T16:57:36", "upload_time_iso_8601": "2018-07-15T16:57:36.119963Z", "url": "https://files.pythonhosted.org/packages/fd/ec/077b8427ac48e6199f82544c88e9c66575b905e8234f02b82a04e1a2c317/rest_framework_generic_relations-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "27e912baac10a331a22b87882eb16281", "sha256": "3560a35e610673d955be3e148e81f1c33a1f0c54e9e4b7ad1941162199360b1d"}, "downloads": -1, "filename": "rest-framework-generic-relations-1.2.0.tar.gz", "has_sig": false, "md5_digest": "27e912baac10a331a22b87882eb16281", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7340, "upload_time": "2018-07-15T16:57:37", "upload_time_iso_8601": "2018-07-15T16:57:37.338348Z", "url": "https://files.pythonhosted.org/packages/77/7f/6a9f44da4f77626a68df129f2e6f3ec08e9234803671cc6780e4f45ad687/rest-framework-generic-relations-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "d482b1c3ae4e2f5399aec457c8ab5918", "sha256": "3fbcec76623ff0571b6da2c3fd93af0f7971b0a61b71fa79e2422ee1784a7121"}, "downloads": -1, "filename": "rest_framework_generic_relations-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d482b1c3ae4e2f5399aec457c8ab5918", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7742, "upload_time": "2018-09-02T18:31:11", "upload_time_iso_8601": "2018-09-02T18:31:11.938559Z", "url": "https://files.pythonhosted.org/packages/35/e6/89a2e2e730c7475a77e18f0a8865404e79286243436d020619348e3e00bb/rest_framework_generic_relations-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de28c5543924b34b62c202d30592725f", "sha256": "4ff1120aad417eb3e4a90bd719b5aa0b6704338a62ce08a8bb09fec923f31872"}, "downloads": -1, "filename": "rest-framework-generic-relations-1.2.1.tar.gz", "has_sig": false, "md5_digest": "de28c5543924b34b62c202d30592725f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7523, "upload_time": "2018-09-02T18:31:14", "upload_time_iso_8601": "2018-09-02T18:31:14.172463Z", "url": "https://files.pythonhosted.org/packages/0b/63/0a849d25e01950aebb788e701604ef4c95231c7544d36298f3b98eb09f84/rest-framework-generic-relations-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "3e25ebde2733f49668cd5b1ec4cbc414", "sha256": "4baee60c69f804047d2f0c4f9203077c730c5faa3a2ee8008ad5b8defed597e6"}, "downloads": -1, "filename": "rest_framework_generic_relations-1.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e25ebde2733f49668cd5b1ec4cbc414", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8706, "upload_time": "2019-09-11T10:34:25", "upload_time_iso_8601": "2019-09-11T10:34:25.423818Z", "url": "https://files.pythonhosted.org/packages/a5/8b/646979fa684aa77ba68da0777f44de61cc50bc0d96e4809aea08ebfc0e29/rest_framework_generic_relations-1.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caee94e2a0f5bb17789791c134312a57", "sha256": "cc4f7b962cb05e2533b9a081e8502258d479f59d6de95d6004d966a13c0a8c83"}, "downloads": -1, "filename": "rest-framework-generic-relations-1.2.2.tar.gz", "has_sig": false, "md5_digest": "caee94e2a0f5bb17789791c134312a57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8061, "upload_time": "2019-09-11T10:34:27", "upload_time_iso_8601": "2019-09-11T10:34:27.134738Z", "url": "https://files.pythonhosted.org/packages/b9/3b/d163eaf266ba3ee4d85bd48db2793fdc817f975803adfb900d0d9070c8f5/rest-framework-generic-relations-1.2.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "c2eeab0abd506fbfdcb9f6d9dcbfc52d", "sha256": "d78c58307667ffd6f941c0d7a10343e026e3cb7e1737b8ada30ee0d4914bc16d"}, "downloads": -1, "filename": "rest_framework_generic_relations-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2eeab0abd506fbfdcb9f6d9dcbfc52d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 10983, "upload_time": "2020-01-28T20:02:45", "upload_time_iso_8601": "2020-01-28T20:02:45.173168Z", "url": "https://files.pythonhosted.org/packages/49/04/25296e48d05aec45674ad0060a02f66158f6be670bea252224a21b4cb064/rest_framework_generic_relations-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adb351e62c8706c4b5181f8dbb8217df", "sha256": "0801bc3d11fa4a6e3fcfcc1e89bfe827718ca9629a07b594fccc8f67d4ddafee"}, "downloads": -1, "filename": "rest-framework-generic-relations-2.0.0.tar.gz", "has_sig": false, "md5_digest": "adb351e62c8706c4b5181f8dbb8217df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 10341, "upload_time": "2020-01-28T20:02:47", "upload_time_iso_8601": "2020-01-28T20:02:47.234781Z", "url": "https://files.pythonhosted.org/packages/cc/fe/512862fed9db3d20c8540bf4760a752390084ba95fd74479fe15f6160c87/rest-framework-generic-relations-2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2eeab0abd506fbfdcb9f6d9dcbfc52d", "sha256": "d78c58307667ffd6f941c0d7a10343e026e3cb7e1737b8ada30ee0d4914bc16d"}, "downloads": -1, "filename": "rest_framework_generic_relations-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c2eeab0abd506fbfdcb9f6d9dcbfc52d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.4", "size": 10983, "upload_time": "2020-01-28T20:02:45", "upload_time_iso_8601": "2020-01-28T20:02:45.173168Z", "url": "https://files.pythonhosted.org/packages/49/04/25296e48d05aec45674ad0060a02f66158f6be670bea252224a21b4cb064/rest_framework_generic_relations-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adb351e62c8706c4b5181f8dbb8217df", "sha256": "0801bc3d11fa4a6e3fcfcc1e89bfe827718ca9629a07b594fccc8f67d4ddafee"}, "downloads": -1, "filename": "rest-framework-generic-relations-2.0.0.tar.gz", "has_sig": false, "md5_digest": "adb351e62c8706c4b5181f8dbb8217df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 10341, "upload_time": "2020-01-28T20:02:47", "upload_time_iso_8601": "2020-01-28T20:02:47.234781Z", "url": "https://files.pythonhosted.org/packages/cc/fe/512862fed9db3d20c8540bf4760a752390084ba95fd74479fe15f6160c87/rest-framework-generic-relations-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:39 2020"}