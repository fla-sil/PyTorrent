{"info": {"author": "Joel Midstj\u00e4rna", "author_email": "joel.midstjarna@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# pycstruct\n\n[![AppVeyor](https://ci.appveyor.com/api/projects/status/github/midstar/pycstruct?svg=true)](https://ci.appveyor.com/api/projects/status/github/midstar/pycstruct)\n[![Coverage Status](https://coveralls.io/repos/github/midstar/pycstruct/badge.svg?branch=HEAD)](https://coveralls.io/github/midstar/pycstruct?branch=HEAD)\n[![Documentation](https://readthedocs.org/projects/pycstruct/badge/?version=latest)](https://pycstruct.readthedocs.io/en/latest/?badge=latest)\n\npycstruct is a python library for converting binary data to and from ordinary\npython dictionaries.\n\nData is defined similar to what is done in C language structs, unions,\nbitfields and enums.\n\nTypical usage of this library is read/write binary files or binary data\ntransmitted over a network.\n\nFollowing complex C types are supported:\n\n- Structs\n- Unions\n- Bitfields\n- Enums\n\nThese types may consist of any traditional data types (integer, unsigned integer, \nboolean and float) between 1 to 8 bytes large, arrays (lists), and strings (ASCII/UTF-8).\n\nStructs, unions, biftfields and enums can be embedded inside other structs/unions\nin any level. \n\nIndividual elements can be stored / read in any byte order and alignment.\n\npycstruct also supports parsing of existing C language source code to\nautomatically generate the pycstruct definitions / instances.\n\nCheckout the full documentation [here](https://pycstruct.readthedocs.io/en/latest/).\n\n## Installation\n\nSimply install the package using pip:\n\n    python3 -m pip install pycstruct\n\n## Example\n\nFollowing C has a structure (person) with a set of elements\nthat are written to a binary file.\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\n#pragma pack(1) // To secure no padding is added in struct\n\nstruct person \n{ \n    char name[50];\n    unsigned int age;\n    float height;\n    bool is_male;\n    unsigned int nbr_of_children;\n    unsigned int child_ages[10];\n};\n\n\nvoid main(void) {\n    struct person p;\n    memset(&p, 0, sizeof(struct person));\n\n    strcpy(p.name, \"Foo Bar\");\n    p.age = 42;\n    p.height = 1.75; // m\n    p.is_male = true;\n    p.nbr_of_children = 2;\n    p.child_ages[0] = 7;\n    p.child_ages[1] = 9;\n\n    FILE *f = fopen(\"simple_example.dat\", \"w\");\n    fwrite(&p, sizeof(struct person), 1, f);\n    fclose(f);\n}\n```\n\nTo read the binary file using pycstruct following code \nrequired.\n\n```python\nimport pycstruct\n\nperson = pycstruct.StructDef()\nperson.add('utf-8', 'name', length=50)\nperson.add('uint32', 'age')\nperson.add('float32','height')\nperson.add('bool8', 'is_male')\nperson.add('uint32', 'nbr_of_children')\nperson.add('uint32', 'child_ages', length=10)\n\nf = open('simple_example.dat','rb')\ninbytes = f.read()\nresult = person.deserialize(inbytes)\nf.close()\n\nprint(str(result))\n```\n\nThe produced output will be::\n\n    {'name': 'Foo Bar', 'is_male': True, 'nbr_of_children': 2, \n     'age': 42, 'child_ages': [7, 9, 0, 0, 0, 0, 0, 0, 0, 0], \n     'height': 1.75}\n\nTo write a binary file from python using the same structure\nusing pycstruct following code is required.\n\n```python\nimport pycstruct\n\nperson = pycstruct.StructDef()\nperson.add('utf-8', 'name', length=50)\nperson.add('uint32', 'age')\nperson.add('float32','height')\nperson.add('bool8', 'is_male')\nperson.add('uint32', 'nbr_of_children')\nperson.add('uint32', 'child_ages', length=10)\n\nmrGreen = {}\nmrGreen['name'] = \"MR Green\"\nmrGreen['age'] = 50\nmrGreen['height'] = 1.93\nmrGreen['is_male'] = True\nmrGreen['nbr_of_children'] = 3\nmrGreen['child_ages'] = [13,24,12]\n\nbuffer = person.serialize(mrGreen)\n\nf = open('simple_example_mr_green.dat','wb')\nf.write(buffer)\nf.close()\n```\n\n## Parsing source files\n\npycstruct also supports parsing C source code defined in external\nfiles or defined in strings.\n\nAssume the C code listed in the first example is named\nsimple_example.c. Then you could parse the source\ncode instead of manually creating the definitions:\n\n```python\nimport pycstruct\n\ndefinitions = pycstruct.parse_file('simple_example.c')\n\nwith open('simple_example.dat', 'rb') as f:\n    inbytes = f.read()\n\nresult = definitions['person'].deserialize(inbytes)\n\nprint(str(result))\n```\n\nThe produced output will be the same is in the first example.\n\n## Full documentation\n\nCheckout the full documentation [here](https://pycstruct.readthedocs.io/en/latest/).\n\n## Author and license\n\nThis application is written by Joel Midstj\u00e4rna and is licensed under the MIT License.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/midstar/pycstruct", "keywords": "struct,enum,bitfield,binary,protocol,dict,dictionary", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pycstruct", "package_url": "https://pypi.org/project/pycstruct/", "platform": "", "project_url": "https://pypi.org/project/pycstruct/", "project_urls": {"Bug Tracker": "https://github.com/midstar/pycstruct/issues", "Documentation": "https://pycstruct.readthedocs.io/en/latest/", "Homepage": "http://github.com/midstar/pycstruct", "Source Code": "https://github.com/midstar/pycstruct"}, "release_url": "https://pypi.org/project/pycstruct/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Binary data handling in Python using dictionaries", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pycstruct</h1>\n<p><a href=\"https://ci.appveyor.com/api/projects/status/github/midstar/pycstruct\" rel=\"nofollow\"><img alt=\"AppVeyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31a69c24d629b8282b69a4af13a17984f5f12083/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6d6964737461722f7079637374727563743f7376673d74727565\"></a>\n<a href=\"https://coveralls.io/github/midstar/pycstruct?branch=HEAD\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b43dca4d1f9c86592c7747a934677300ce200b54/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6d6964737461722f7079637374727563742f62616467652e7376673f6272616e63683d48454144\"></a>\n<a href=\"https://pycstruct.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f0040b80689bada5e1e2063027af3d718e2ca3d6/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079637374727563742f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>pycstruct is a python library for converting binary data to and from ordinary\npython dictionaries.</p>\n<p>Data is defined similar to what is done in C language structs, unions,\nbitfields and enums.</p>\n<p>Typical usage of this library is read/write binary files or binary data\ntransmitted over a network.</p>\n<p>Following complex C types are supported:</p>\n<ul>\n<li>Structs</li>\n<li>Unions</li>\n<li>Bitfields</li>\n<li>Enums</li>\n</ul>\n<p>These types may consist of any traditional data types (integer, unsigned integer,\nboolean and float) between 1 to 8 bytes large, arrays (lists), and strings (ASCII/UTF-8).</p>\n<p>Structs, unions, biftfields and enums can be embedded inside other structs/unions\nin any level.</p>\n<p>Individual elements can be stored / read in any byte order and alignment.</p>\n<p>pycstruct also supports parsing of existing C language source code to\nautomatically generate the pycstruct definitions / instances.</p>\n<p>Checkout the full documentation <a href=\"https://pycstruct.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<p>Simply install the package using pip:</p>\n<pre><code>python3 -m pip install pycstruct\n</code></pre>\n<h2>Example</h2>\n<p>Following C has a structure (person) with a set of elements\nthat are written to a binary file.</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdbool.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"cp\">#pragma pack(1) </span><span class=\"c1\">// To secure no padding is added in struct</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">person</span> \n<span class=\"p\">{</span> \n    <span class=\"kt\">char</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">];</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">height</span><span class=\"p\">;</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">is_male</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">nbr_of_children</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">child_ages</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">person</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">person</span><span class=\"p\">));</span>\n\n    <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s\">\"Foo Bar\"</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"mi\">42</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"mf\">1.75</span><span class=\"p\">;</span> <span class=\"c1\">// m</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">is_male</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">nbr_of_children</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">child_ages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">child_ages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">FILE</span> <span class=\"o\">*</span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">fopen</span><span class=\"p\">(</span><span class=\"s\">\"simple_example.dat\"</span><span class=\"p\">,</span> <span class=\"s\">\"w\"</span><span class=\"p\">);</span>\n    <span class=\"n\">fwrite</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">person</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">);</span>\n    <span class=\"n\">fclose</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n<p>To read the binary file using pycstruct following code\nrequired.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pycstruct</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">pycstruct</span><span class=\"o\">.</span><span class=\"n\">StructDef</span><span class=\"p\">()</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'uint32'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'float32'</span><span class=\"p\">,</span><span class=\"s1\">'height'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'bool8'</span><span class=\"p\">,</span> <span class=\"s1\">'is_male'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'uint32'</span><span class=\"p\">,</span> <span class=\"s1\">'nbr_of_children'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'uint32'</span><span class=\"p\">,</span> <span class=\"s1\">'child_ages'</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'simple_example.dat'</span><span class=\"p\">,</span><span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n<span class=\"n\">inbytes</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">inbytes</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n</pre>\n<p>The produced output will be::</p>\n<pre><code>{'name': 'Foo Bar', 'is_male': True, 'nbr_of_children': 2, \n 'age': 42, 'child_ages': [7, 9, 0, 0, 0, 0, 0, 0, 0, 0], \n 'height': 1.75}\n</code></pre>\n<p>To write a binary file from python using the same structure\nusing pycstruct following code is required.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pycstruct</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">pycstruct</span><span class=\"o\">.</span><span class=\"n\">StructDef</span><span class=\"p\">()</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'uint32'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'float32'</span><span class=\"p\">,</span><span class=\"s1\">'height'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'bool8'</span><span class=\"p\">,</span> <span class=\"s1\">'is_male'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'uint32'</span><span class=\"p\">,</span> <span class=\"s1\">'nbr_of_children'</span><span class=\"p\">)</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'uint32'</span><span class=\"p\">,</span> <span class=\"s1\">'child_ages'</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">mrGreen</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">mrGreen</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"MR Green\"</span>\n<span class=\"n\">mrGreen</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">mrGreen</span><span class=\"p\">[</span><span class=\"s1\">'height'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.93</span>\n<span class=\"n\">mrGreen</span><span class=\"p\">[</span><span class=\"s1\">'is_male'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">mrGreen</span><span class=\"p\">[</span><span class=\"s1\">'nbr_of_children'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">mrGreen</span><span class=\"p\">[</span><span class=\"s1\">'child_ages'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">]</span>\n\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"n\">mrGreen</span><span class=\"p\">)</span>\n\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'simple_example_mr_green.dat'</span><span class=\"p\">,</span><span class=\"s1\">'wb'</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Parsing source files</h2>\n<p>pycstruct also supports parsing C source code defined in external\nfiles or defined in strings.</p>\n<p>Assume the C code listed in the first example is named\nsimple_example.c. Then you could parse the source\ncode instead of manually creating the definitions:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pycstruct</span>\n\n<span class=\"n\">definitions</span> <span class=\"o\">=</span> <span class=\"n\">pycstruct</span><span class=\"o\">.</span><span class=\"n\">parse_file</span><span class=\"p\">(</span><span class=\"s1\">'simple_example.c'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'simple_example.dat'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">inbytes</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">definitions</span><span class=\"p\">[</span><span class=\"s1\">'person'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">inbytes</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n</pre>\n<p>The produced output will be the same is in the first example.</p>\n<h2>Full documentation</h2>\n<p>Checkout the full documentation <a href=\"https://pycstruct.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.</p>\n<h2>Author and license</h2>\n<p>This application is written by Joel Midstj\u00e4rna and is licensed under the MIT License.</p>\n\n          </div>"}, "last_serial": 7146326, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0962077e8ffc83ee68feabb5ecbd05ae", "sha256": "7263cc7c308805fd125695f0bd528077c69c0fcad57f2f54e8f514e1573f42cd"}, "downloads": -1, "filename": "pycstruct-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0962077e8ffc83ee68feabb5ecbd05ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8056, "upload_time": "2020-03-14T15:39:05", "upload_time_iso_8601": "2020-03-14T15:39:05.858786Z", "url": "https://files.pythonhosted.org/packages/c8/fb/fbe5a5981bfb67d0aadd01a04c109f06d428d39a3362054271b8ff4729e1/pycstruct-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d2cc9d18fee5ee259a05bbdf963c1f0", "sha256": "0e591542d86d1c0998c195ec39dcab55a8506b9cf5b84c424407494cc80e04ec"}, "downloads": -1, "filename": "pycstruct-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1d2cc9d18fee5ee259a05bbdf963c1f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7167, "upload_time": "2020-03-14T15:39:08", "upload_time_iso_8601": "2020-03-14T15:39:08.418867Z", "url": "https://files.pythonhosted.org/packages/a7/bd/932e34a4d2cf5d9b2b8bbc1f1d1c9796674dd4901516252e80d87b051d7e/pycstruct-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "13bbb3667faccf9147179da2ad96c769", "sha256": "dc3f715941143cbef447be4b80c362f3f86635fa7cb641ad2846b5263f02c23d"}, "downloads": -1, "filename": "pycstruct-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "13bbb3667faccf9147179da2ad96c769", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14867, "upload_time": "2020-05-01T14:56:38", "upload_time_iso_8601": "2020-05-01T14:56:38.996568Z", "url": "https://files.pythonhosted.org/packages/8e/e9/6bc348c846572422e0aedf28c4b68d3ad07b366777e9bb972b14e24b77fd/pycstruct-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6fda341aa57cc0248555de2df36c8f56", "sha256": "dfa8dc01cc38ff16ecc98fafcf4d698a6ec2635b401409dbd66c92d84298c7d0"}, "downloads": -1, "filename": "pycstruct-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6fda341aa57cc0248555de2df36c8f56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13410, "upload_time": "2020-05-01T14:56:40", "upload_time_iso_8601": "2020-05-01T14:56:40.738399Z", "url": "https://files.pythonhosted.org/packages/ae/b5/a0ac83c40231a64bb099c8801ddcb079685e77aace09c479be21d70d7db5/pycstruct-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a4e16444120e4c82cc97586ef2b030ae", "sha256": "4365df27e7521f3b0c60a9e480fb14951c6a6956502185c1b899a8c8d37a330f"}, "downloads": -1, "filename": "pycstruct-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a4e16444120e4c82cc97586ef2b030ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15042, "upload_time": "2020-05-01T16:41:19", "upload_time_iso_8601": "2020-05-01T16:41:19.041250Z", "url": "https://files.pythonhosted.org/packages/88/86/f4590cfc3dfbd8cde4d62c7b6d945a0adc9731876686b023b17565475cba/pycstruct-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31341cd7b2c9cfea470151d1400aafe9", "sha256": "dc77b3d87be4d8f7baab9455c32608818b299c4c54edeb3664c21d53a51e4525"}, "downloads": -1, "filename": "pycstruct-0.3.0.tar.gz", "has_sig": false, "md5_digest": "31341cd7b2c9cfea470151d1400aafe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13640, "upload_time": "2020-05-01T16:41:20", "upload_time_iso_8601": "2020-05-01T16:41:20.451572Z", "url": "https://files.pythonhosted.org/packages/9f/fe/9846d5888ece6e9a7f923cc9bbee07c850e80db229470734e551c68c70eb/pycstruct-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4e16444120e4c82cc97586ef2b030ae", "sha256": "4365df27e7521f3b0c60a9e480fb14951c6a6956502185c1b899a8c8d37a330f"}, "downloads": -1, "filename": "pycstruct-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a4e16444120e4c82cc97586ef2b030ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15042, "upload_time": "2020-05-01T16:41:19", "upload_time_iso_8601": "2020-05-01T16:41:19.041250Z", "url": "https://files.pythonhosted.org/packages/88/86/f4590cfc3dfbd8cde4d62c7b6d945a0adc9731876686b023b17565475cba/pycstruct-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31341cd7b2c9cfea470151d1400aafe9", "sha256": "dc77b3d87be4d8f7baab9455c32608818b299c4c54edeb3664c21d53a51e4525"}, "downloads": -1, "filename": "pycstruct-0.3.0.tar.gz", "has_sig": false, "md5_digest": "31341cd7b2c9cfea470151d1400aafe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13640, "upload_time": "2020-05-01T16:41:20", "upload_time_iso_8601": "2020-05-01T16:41:20.451572Z", "url": "https://files.pythonhosted.org/packages/9f/fe/9846d5888ece6e9a7f923cc9bbee07c850e80db229470734e551c68c70eb/pycstruct-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:38 2020"}