{"info": {"author": "thingsplode", "author_email": "tamas.csaba@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Environment :: Web Environment", "Framework :: Flask", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX", "Programming Language :: Python"], "description": "# appkernel - microservice APIs made easy\n\n\n![alt build_status](https://travis-ci.org/accelero-cloud/appkernel.svg?branch=master \"build status\")\n![alt issues](https://img.shields.io/github/issues/accelero-cloud/appkernel.svg \"Open issues\")\n![alt coverage](https://codecov.io/gh/accelero-cloud/appkernel/branch/master/graph/badge.svg \"code coverage\")\n![GitHub license](https://img.shields.io/github/license/accelero-cloud/appkernel.svg \"license\")\n\n## What is Appkernel?\nA super-easy microservice and API framework, which enables API development from zero to production within minutes (no kidding: literally within minutes).\n\n**It provides data serialisation, transformation, validation, security, ORM, RPC and service mash functions out of the box** ([check out the roadmap for more details](https://github.com/accelero-cloud/appkernel/blob/master/docs/roadmap.md)).\n- [Check out the tutorial :)](https://github.com/accelero-cloud/tutorials)\n- [or read the full documentation.](http://appkernel.readthedocs.io/en/latest/)\n\n... and finally **give a vote on [awesome-python](https://github.com/vinta/awesome-python/pull/1103)** if you like the project, so it gets added to the list of RESTful python frameworks. **Only 15 more votes are missing :)**\n\n## Installation\n\n```bash\n    pip install appkernel\n```\n\n## Crash Course\nLet's build an awseome mini identity service:\n```python\nclass User(Model, MongoRepository):\n    # define the resource schema as class meta data\n    id = Property(str)\n    name = Property(str, index=UniqueIndex)\n    email = Property(str, validators=[Email], index=UniqueIndex)\n    password = Property(str, converter=content_hasher(), omit=True)\n    roles = Property(list, sub_type=str, default_value=['Login'])\n\n    @classmethod\n    def before_post(cls, *args, **kwargs):\n        # this method is automatically called before persisting the instance\n        # one can use after_post for hook after the persistence.\n        user = kwargs.get('model')\n        print(f'going to create the following user: {user}')\n\n\n\nif __name__ == '__main__':\n    # let's expose the user resource\n    kernel = AppKernelEngine()\n    kernel.register(User)\n\n    # let's create and persist a sample user\n    user = User(name='Test User', email='test@accelero.cloud', password='some pass')\n    user.save()\n\n    # and we are all set\n    kernel.run()\n```\nThat's all folks, our user service is ready to roll, the entity is saved, we can re-load the object from the database, or we can request its json schema for validation, or metadata to generate an SPA (Single Page Application).\nOf course validation and some more goodies are built-in as well :)\n\n### Retrieving our our User, using HTTP requests\n\n**GET request**:\n```bash\ncurl -i -X GET \\\n 'http://127.0.0.1:5000/users/'\n```\n**And the result**:\n```json\n{\n  \"_items\": [\n    {\n      \"_type\": \"User\",\n      \"email\": \"test@appkernel.cloud\",\n      \"id\": \"U0590e790-46cf-42a0-bdca-07b0694d08e2\",\n      \"name\": \"Test User\",\n      \"roles\": [\n        \"Login\"\n      ]\n    }\n  ],\n  \"_links\": {\n    \"self\": {\n      \"href\": \"/users/\"\n    }\n  }\n}\n```\n\nAdding extra and secure methods using the `@action` decorator is easy as well:\n\n```python\n@action(method='POST', require=[CurrentSubject(), Role('admin')])\ndef change_password(self, current_password, new_password):\n    if not pbkdf2_sha256.verify(current_password, self.password):\n        raise ServiceException(403, _('Current password is not correct'))\n    else:\n        self.password = new_password\n        self.save()\n    return _('Password changed')\n```\n\nThe example above exposes the `http://base_url/users/<user_id>/change_password` endpoint and allows the user with admin\nrole or the user with the current user_id to call it.\n\nCreate additional hooks, which are called before and after a HTTP method is executed, by simply adding\na static method to the `Model` class following the convention: `before_{http_method}` and `after_{http_method}`:\n\n**Example**:\n```python\n@classmethod\ndef before_post(cls, *args, **kwargs):\n    user = kwargs.get('model')\n    print(f'going to create this user: {user}')\n```\n\nor inspect (and alter) the already persisted object:\n\n```python\n@classmethod\ndef after_post(cls, *args, **kwargs):\n    user = kwargs.get('model')\n    print(f'this user was created: {user}')\n```\n\nWe can also call other services using the built-in REST client proxy. In the snippet bellow we call the `reservations` endpoint\non the Inventory service, by POST-ing a `Reservation` object.\n\n```python\n    client = HttpClientServiceProxy('http://127.0.0.1:5000/')\n    status_code, rsp_dict = client.reservations.post(Reservation(order_id=order.id, products=order.products))\n```\n\n### Some features of the REST endpoint\n\n- GET /users/12345 - retrieve a User object by its database ID;\n- GET /users/?name=Jane&email=jane@appkernel.cloud - retrieve the User named Jane with e-mail address jane@appkernel.cloud;\n- GET /users/?name=Jane&name=John&logic=OR - retrieve Jane or John;\n- GET /users/?roles=~Admin - retrieve all users which have the role Admin;\n- GET /users/?name=[Jane,John] - retrieve all user with the name Jane or John;\n- GET /users/?inserted=>2018-01-01&inserted=<2018-12-31 - return all users created in 2018;\n- GET /users/?page=1&page_size=5&sort_by=inserted&sort_order=DESC - return the first page of 5 elements;\n- GET /users/?query={\"$or\":[{\"name\": \"Jane\"}, {\"name\":\"John\"}]} - return users filtered with a native Mongo Query;\n- GET /users/meta - retrieve the metadata of the User class for constructing self-generating SPAs;\n- GET /users/schema - return the Json Schema of the User class used for validating objects;\n\nAdditionally the following HTTP methods are supported:\n- POST: create a new user (or updates existing one by replacing it) using a json payload or multipart form data\n- PATCH: add or updates some fields on the User object\n- PUT: replaces a User object\n\n### A few features of the built-in ORM function\nFind one single user matching the query Property:\n```python\nuser = User.where(name=='Some username').find_one()\n```\nReturn the first 5 users which have the role \"Admin\":\n```python\nuser_generator = User.where(User.roles % 'Admin').find(page=0, page_size=5)\n```\nOr use native Mongo Query:\n```python\nuser_generator = Project.find_by_query({'name': 'user name'})\n```\n\nAtomic updates:\n```python\n# reserve 10 products with product code TRS abd size M\nquery = StockInventory.where((StockInventory.product.code == 'TRS') & (StockInventory.product.size == ProductSize.M))\nfor _ in range(10):\n    ...\n    query.update(available=StockInventory.available - 1, reserved=StockInventory.reserved + 1)\n```\n\nOne could extend the *AuditedMongoRepository* mixin instead of the *MongoRepository* and we would end up with 3 extra fields:\n- **inserted**: the date-time of insertion;\n- **updated**: the date-time of the last update;\n- **version**: the number of versions stored for this document;\n\n## Some more extras baked into the Model\nGenerate the ID value automatically using a uuid generator and a prefix 'U':\n```python\nid = Property(..., generator=uuid_generator('U'))\n```\nAdd a Unique index to the User's name property:\n```python\nname = Property(..., index=UniqueIndex)\n```\nValidate the e-mail property, using the NotEmpty and Email validators\n```python\nemail = Property(..., validators=[Email, NotEmpty])\n```\nAdd schema validation to the database:\n```python\nUser.add_schema_validation(validation_action='error')\n```\nHash the password and omit this attribute from the json representation:\n```python\npassword = Property(..., converter=content_hasher(rounds=10), omit=True)\n```\nRun the generators on the attributes and validate the object (usually not needed, since it is implicitly called by save and dumps methods):\n```python\nuser.finalise_and_validate()\n```\n### Security is also part of the mix\n\nThe following snippet shows the declarative way of access control:\n```python\nuser_service = kernel.register(User, methods=['GET', 'PUT', 'POST', 'PATCH', 'DELETE'])\nuser_service.deny_all().require(Role('user'), methods='GET').require(Role('admin'),\n                                                                         methods=['PUT', 'POST', 'PATCH', 'DELETE'])\n```\n\n1. user_service.deny_all(): by default access to all methods is forbidden;\n2. require(Role('user'), methods='GET'): GET methods can be used by users having the Role: user (basic login role);\n3. require(Role('admin'), methods=['PUT', 'POST', 'PATCH', 'DELETE']): one needs the Role: admin in order to call other http methods;\n\n[I want to know the current status of the project](docs/roadmap.md)\n\n[For more details feel free to check out the documentation](http://appkernel.readthedocs.io)\n\n## What are we building here?\nThe vision of the project is to provide you with a full-fledged [microservice chassis](http://microservices.io/microservices/news/2016/02/21/microservice-chassis.html),\nas defined by Chris Richardson.\n\n## How does it helps you?\nWe've spent the time on analysing the stack, made the hard choices for you in terms of Database/ORM/Security/Rate Limiting and so on, so\nyou don't have to. You can focus entirely on delivering business value from day one and being the rockstar of your project.\n\nCurrently supported (and fully tested) features:\n- REST endpoints over HTTP\n- Full range of CRUD operations\n- Customizable resource endpoints\n- Customizable, multiple item endpoints\n- Filtering and Sorting\n- Pagination\n- Data Validation\n- Extensible Data Validation\n- Default Values\n- Projections\n- Embedded Resource Serialization\n- Custom ID Fields\n- MongoDB Aggregation Framework\n- Powered by Flask\n\n### Contribute\nBe part of the development: [contribute to the project :)](docs/contributors.md)\n\n### Why did we built this?\n* We had the need to build a myriad of small services in our daily business, ranging from data-aggregation pipelines, to housekeeping services and\nother process automation services. These do share similar requirements and the underlying infrastructure needed to be rebuilt and tested over and over again. The question arose:\nwhat if we avoid spending valuable time on the boilerplate and focus only on the fun part?\n\n* Often time takes a substantial effort to make a valuable internal hack or proof of concept presentable to customers, until it reaches the maturity in terms reliability, fault\ntolerance and security. What if all these non-functional requirements would be taken care by an underlying platform?\n\n* There are several initiatives out there (Flask Admin, Flask Rest Extension and so), which do target parts of the problem, but they either need substantial effort to make them play nice together, either they feel complicated and uneasy to use.\nWe wanted something simple and beautiful, which we love working with.\n\nThese were the major driving question, which lead to the development of App Kernel.\n\n### How does it works?\n\nAppKernel is built around the concepts of Domain Driven Design. You can start the project by laying out the model.\nThe first step is to define the validation and data generations rules. For making life easier, one can also set default values.\nThan one can extend several built-in classes in order to augment the model with extended functionality:\n* extending the Repository class (or its descendants) adds and ORM persistency capability to the model;\n* extending the Service class (or its descendants) add the capablity to expose the model over REST services;\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/accelero-cloud/", "keywords": "microservice,flask,pymongo,serverless,rest,flask,serialisation,orm,mongo,api,rest api", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "appkernel", "package_url": "https://pypi.org/project/appkernel/", "platform": "any", "project_url": "https://pypi.org/project/appkernel/", "project_urls": {"Homepage": "https://github.com/accelero-cloud/"}, "release_url": "https://pypi.org/project/appkernel/1.2.4/", "requires_dist": ["pyyaml", "enum34", "pymongo (==3.7.1)", "simplejson", "Flask (>0.12.3)", "werkzeug", "eventlet", "wrapt", "passlib (==1.7.1)", "jsonschema", "flask-babel", "babel", "pyjwt", "cryptography", "sets", "aiohttp", "cchardet", "aiodns", "requests"], "requires_python": "", "summary": "An easy to use microservice framework.", "version": "1.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>appkernel - microservice APIs made easy</h1>\n<p><img alt=\"alt build_status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/810feb2f4046b2551baa4fcadadab7989245687e/68747470733a2f2f7472617669732d63692e6f72672f616363656c65726f2d636c6f75642f6170706b65726e656c2e7376673f6272616e63683d6d6173746572\">\n<img alt=\"alt issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7f99e39e77b5e14c74cff505a698a91a259d67bb/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f616363656c65726f2d636c6f75642f6170706b65726e656c2e737667\">\n<img alt=\"alt coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9cbdddde9c63f3a39881f0735e4db382a2f08e8f/68747470733a2f2f636f6465636f762e696f2f67682f616363656c65726f2d636c6f75642f6170706b65726e656c2f6272616e63682f6d61737465722f67726170682f62616467652e737667\">\n<img alt=\"GitHub license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/408c2423fd8128782b5b1b088d7aef582d8b4dfe/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f616363656c65726f2d636c6f75642f6170706b65726e656c2e737667\"></p>\n<h2>What is Appkernel?</h2>\n<p>A super-easy microservice and API framework, which enables API development from zero to production within minutes (no kidding: literally within minutes).</p>\n<p><strong>It provides data serialisation, transformation, validation, security, ORM, RPC and service mash functions out of the box</strong> (<a href=\"https://github.com/accelero-cloud/appkernel/blob/master/docs/roadmap.md\" rel=\"nofollow\">check out the roadmap for more details</a>).</p>\n<ul>\n<li><a href=\"https://github.com/accelero-cloud/tutorials\" rel=\"nofollow\">Check out the tutorial :)</a></li>\n<li><a href=\"http://appkernel.readthedocs.io/en/latest/\" rel=\"nofollow\">or read the full documentation.</a></li>\n</ul>\n<p>... and finally <strong>give a vote on <a href=\"https://github.com/vinta/awesome-python/pull/1103\" rel=\"nofollow\">awesome-python</a></strong> if you like the project, so it gets added to the list of RESTful python frameworks. <strong>Only 15 more votes are missing :)</strong></p>\n<h2>Installation</h2>\n<pre>    pip install appkernel\n</pre>\n<h2>Crash Course</h2>\n<p>Let's build an awseome mini identity service:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">MongoRepository</span><span class=\"p\">):</span>\n    <span class=\"c1\"># define the resource schema as class meta data</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">UniqueIndex</span><span class=\"p\">)</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Email</span><span class=\"p\">],</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">UniqueIndex</span><span class=\"p\">)</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">converter</span><span class=\"o\">=</span><span class=\"n\">content_hasher</span><span class=\"p\">(),</span> <span class=\"n\">omit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">roles</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">sub_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Login'</span><span class=\"p\">])</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">before_post</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># this method is automatically called before persisting the instance</span>\n        <span class=\"c1\"># one can use after_post for hook after the persistence.</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'model'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'going to create the following user: </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># let's expose the user resource</span>\n    <span class=\"n\">kernel</span> <span class=\"o\">=</span> <span class=\"n\">AppKernelEngine</span><span class=\"p\">()</span>\n    <span class=\"n\">kernel</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># let's create and persist a sample user</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Test User'</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'test@accelero.cloud'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'some pass'</span><span class=\"p\">)</span>\n    <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># and we are all set</span>\n    <span class=\"n\">kernel</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<p>That's all folks, our user service is ready to roll, the entity is saved, we can re-load the object from the database, or we can request its json schema for validation, or metadata to generate an SPA (Single Page Application).\nOf course validation and some more goodies are built-in as well :)</p>\n<h3>Retrieving our our User, using HTTP requests</h3>\n<p><strong>GET request</strong>:</p>\n<pre>curl -i -X GET <span class=\"se\">\\</span>\n <span class=\"s1\">'http://127.0.0.1:5000/users/'</span>\n</pre>\n<p><strong>And the result</strong>:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"_items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"User\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"test@appkernel.cloud\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"U0590e790-46cf-42a0-bdca-07b0694d08e2\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Test User\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"roles\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"Login\"</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"_links\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"self\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"href\"</span><span class=\"p\">:</span> <span class=\"s2\">\"/users/\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Adding extra and secure methods using the <code>@action</code> decorator is easy as well:</p>\n<pre><span class=\"nd\">@action</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"n\">require</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">CurrentSubject</span><span class=\"p\">(),</span> <span class=\"n\">Role</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">change_password</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">current_password</span><span class=\"p\">,</span> <span class=\"n\">new_password</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pbkdf2_sha256</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">current_password</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ServiceException</span><span class=\"p\">(</span><span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Current password is not correct'</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">new_password</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s1\">'Password changed'</span><span class=\"p\">)</span>\n</pre>\n<p>The example above exposes the <code>http://base_url/users/&lt;user_id&gt;/change_password</code> endpoint and allows the user with admin\nrole or the user with the current user_id to call it.</p>\n<p>Create additional hooks, which are called before and after a HTTP method is executed, by simply adding\na static method to the <code>Model</code> class following the convention: <code>before_{http_method}</code> and <code>after_{http_method}</code>:</p>\n<p><strong>Example</strong>:</p>\n<pre><span class=\"nd\">@classmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">before_post</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'model'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'going to create this user: </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>or inspect (and alter) the already persisted object:</p>\n<pre><span class=\"nd\">@classmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">after_post</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'model'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'this user was created: </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>We can also call other services using the built-in REST client proxy. In the snippet bellow we call the <code>reservations</code> endpoint\non the Inventory service, by POST-ing a <code>Reservation</code> object.</p>\n<pre>    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">HttpClientServiceProxy</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1:5000/'</span><span class=\"p\">)</span>\n    <span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"n\">rsp_dict</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">reservations</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">Reservation</span><span class=\"p\">(</span><span class=\"n\">order_id</span><span class=\"o\">=</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">products</span><span class=\"o\">=</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">products</span><span class=\"p\">))</span>\n</pre>\n<h3>Some features of the REST endpoint</h3>\n<ul>\n<li>GET /users/12345 - retrieve a User object by its database ID;</li>\n<li>GET /users/?name=Jane&amp;email=<a href=\"mailto:jane@appkernel.cloud\">jane@appkernel.cloud</a> - retrieve the User named Jane with e-mail address <a href=\"mailto:jane@appkernel.cloud\">jane@appkernel.cloud</a>;</li>\n<li>GET /users/?name=Jane&amp;name=John&amp;logic=OR - retrieve Jane or John;</li>\n<li>GET /users/?roles=~Admin - retrieve all users which have the role Admin;</li>\n<li>GET /users/?name=[Jane,John] - retrieve all user with the name Jane or John;</li>\n<li>GET /users/?inserted=&gt;2018-01-01&amp;inserted=&lt;2018-12-31 - return all users created in 2018;</li>\n<li>GET /users/?page=1&amp;page_size=5&amp;sort_by=inserted&amp;sort_order=DESC - return the first page of 5 elements;</li>\n<li>GET /users/?query={\"$or\":[{\"name\": \"Jane\"}, {\"name\":\"John\"}]} - return users filtered with a native Mongo Query;</li>\n<li>GET /users/meta - retrieve the metadata of the User class for constructing self-generating SPAs;</li>\n<li>GET /users/schema - return the Json Schema of the User class used for validating objects;</li>\n</ul>\n<p>Additionally the following HTTP methods are supported:</p>\n<ul>\n<li>POST: create a new user (or updates existing one by replacing it) using a json payload or multipart form data</li>\n<li>PATCH: add or updates some fields on the User object</li>\n<li>PUT: replaces a User object</li>\n</ul>\n<h3>A few features of the built-in ORM function</h3>\n<p>Find one single user matching the query Property:</p>\n<pre><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">==</span><span class=\"s1\">'Some username'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find_one</span><span class=\"p\">()</span>\n</pre>\n<p>Return the first 5 users which have the role \"Admin\":</p>\n<pre><span class=\"n\">user_generator</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">roles</span> <span class=\"o\">%</span> <span class=\"s1\">'Admin'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">page_size</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n<p>Or use native Mongo Query:</p>\n<pre><span class=\"n\">user_generator</span> <span class=\"o\">=</span> <span class=\"n\">Project</span><span class=\"o\">.</span><span class=\"n\">find_by_query</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'user name'</span><span class=\"p\">})</span>\n</pre>\n<p>Atomic updates:</p>\n<pre><span class=\"c1\"># reserve 10 products with product code TRS abd size M</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">StockInventory</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">((</span><span class=\"n\">StockInventory</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">==</span> <span class=\"s1\">'TRS'</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">StockInventory</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">==</span> <span class=\"n\">ProductSize</span><span class=\"o\">.</span><span class=\"n\">M</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">available</span><span class=\"o\">=</span><span class=\"n\">StockInventory</span><span class=\"o\">.</span><span class=\"n\">available</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">reserved</span><span class=\"o\">=</span><span class=\"n\">StockInventory</span><span class=\"o\">.</span><span class=\"n\">reserved</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>One could extend the <em>AuditedMongoRepository</em> mixin instead of the <em>MongoRepository</em> and we would end up with 3 extra fields:</p>\n<ul>\n<li><strong>inserted</strong>: the date-time of insertion;</li>\n<li><strong>updated</strong>: the date-time of the last update;</li>\n<li><strong>version</strong>: the number of versions stored for this document;</li>\n</ul>\n<h2>Some more extras baked into the Model</h2>\n<p>Generate the ID value automatically using a uuid generator and a prefix 'U':</p>\n<pre><span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">generator</span><span class=\"o\">=</span><span class=\"n\">uuid_generator</span><span class=\"p\">(</span><span class=\"s1\">'U'</span><span class=\"p\">))</span>\n</pre>\n<p>Add a Unique index to the User's name property:</p>\n<pre><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">UniqueIndex</span><span class=\"p\">)</span>\n</pre>\n<p>Validate the e-mail property, using the NotEmpty and Email validators</p>\n<pre><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Email</span><span class=\"p\">,</span> <span class=\"n\">NotEmpty</span><span class=\"p\">])</span>\n</pre>\n<p>Add schema validation to the database:</p>\n<pre><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">add_schema_validation</span><span class=\"p\">(</span><span class=\"n\">validation_action</span><span class=\"o\">=</span><span class=\"s1\">'error'</span><span class=\"p\">)</span>\n</pre>\n<p>Hash the password and omit this attribute from the json representation:</p>\n<pre><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">converter</span><span class=\"o\">=</span><span class=\"n\">content_hasher</span><span class=\"p\">(</span><span class=\"n\">rounds</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">omit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Run the generators on the attributes and validate the object (usually not needed, since it is implicitly called by save and dumps methods):</p>\n<pre><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">finalise_and_validate</span><span class=\"p\">()</span>\n</pre>\n<h3>Security is also part of the mix</h3>\n<p>The following snippet shows the declarative way of access control:</p>\n<pre><span class=\"n\">user_service</span> <span class=\"o\">=</span> <span class=\"n\">kernel</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"s1\">'PUT'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"s1\">'PATCH'</span><span class=\"p\">,</span> <span class=\"s1\">'DELETE'</span><span class=\"p\">])</span>\n<span class=\"n\">user_service</span><span class=\"o\">.</span><span class=\"n\">deny_all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"n\">Role</span><span class=\"p\">(</span><span class=\"s1\">'user'</span><span class=\"p\">),</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"s1\">'GET'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"n\">Role</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">),</span>\n                                                                         <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'PUT'</span><span class=\"p\">,</span> <span class=\"s1\">'POST'</span><span class=\"p\">,</span> <span class=\"s1\">'PATCH'</span><span class=\"p\">,</span> <span class=\"s1\">'DELETE'</span><span class=\"p\">])</span>\n</pre>\n<ol>\n<li>user_service.deny_all(): by default access to all methods is forbidden;</li>\n<li>require(Role('user'), methods='GET'): GET methods can be used by users having the Role: user (basic login role);</li>\n<li>require(Role('admin'), methods=['PUT', 'POST', 'PATCH', 'DELETE']): one needs the Role: admin in order to call other http methods;</li>\n</ol>\n<p><a href=\"docs/roadmap.md\" rel=\"nofollow\">I want to know the current status of the project</a></p>\n<p><a href=\"http://appkernel.readthedocs.io\" rel=\"nofollow\">For more details feel free to check out the documentation</a></p>\n<h2>What are we building here?</h2>\n<p>The vision of the project is to provide you with a full-fledged <a href=\"http://microservices.io/microservices/news/2016/02/21/microservice-chassis.html\" rel=\"nofollow\">microservice chassis</a>,\nas defined by Chris Richardson.</p>\n<h2>How does it helps you?</h2>\n<p>We've spent the time on analysing the stack, made the hard choices for you in terms of Database/ORM/Security/Rate Limiting and so on, so\nyou don't have to. You can focus entirely on delivering business value from day one and being the rockstar of your project.</p>\n<p>Currently supported (and fully tested) features:</p>\n<ul>\n<li>REST endpoints over HTTP</li>\n<li>Full range of CRUD operations</li>\n<li>Customizable resource endpoints</li>\n<li>Customizable, multiple item endpoints</li>\n<li>Filtering and Sorting</li>\n<li>Pagination</li>\n<li>Data Validation</li>\n<li>Extensible Data Validation</li>\n<li>Default Values</li>\n<li>Projections</li>\n<li>Embedded Resource Serialization</li>\n<li>Custom ID Fields</li>\n<li>MongoDB Aggregation Framework</li>\n<li>Powered by Flask</li>\n</ul>\n<h3>Contribute</h3>\n<p>Be part of the development: <a href=\"docs/contributors.md\" rel=\"nofollow\">contribute to the project :)</a></p>\n<h3>Why did we built this?</h3>\n<ul>\n<li>\n<p>We had the need to build a myriad of small services in our daily business, ranging from data-aggregation pipelines, to housekeeping services and\nother process automation services. These do share similar requirements and the underlying infrastructure needed to be rebuilt and tested over and over again. The question arose:\nwhat if we avoid spending valuable time on the boilerplate and focus only on the fun part?</p>\n</li>\n<li>\n<p>Often time takes a substantial effort to make a valuable internal hack or proof of concept presentable to customers, until it reaches the maturity in terms reliability, fault\ntolerance and security. What if all these non-functional requirements would be taken care by an underlying platform?</p>\n</li>\n<li>\n<p>There are several initiatives out there (Flask Admin, Flask Rest Extension and so), which do target parts of the problem, but they either need substantial effort to make them play nice together, either they feel complicated and uneasy to use.\nWe wanted something simple and beautiful, which we love working with.</p>\n</li>\n</ul>\n<p>These were the major driving question, which lead to the development of App Kernel.</p>\n<h3>How does it works?</h3>\n<p>AppKernel is built around the concepts of Domain Driven Design. You can start the project by laying out the model.\nThe first step is to define the validation and data generations rules. For making life easier, one can also set default values.\nThan one can extend several built-in classes in order to augment the model with extended functionality:</p>\n<ul>\n<li>extending the Repository class (or its descendants) adds and ORM persistency capability to the model;</li>\n<li>extending the Service class (or its descendants) add the capablity to expose the model over REST services;</li>\n</ul>\n\n          </div>"}, "last_serial": 4273460, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "545c110edd5dbcbb9049c6ebf73477b1", "sha256": "d1f37008d334acba4ce3c86bacc4e92ea8b925ee4c17c2359c6ef82ce258ecc8"}, "downloads": -1, "filename": "appkernel-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "545c110edd5dbcbb9049c6ebf73477b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52617, "upload_time": "2018-07-08T20:53:28", "upload_time_iso_8601": "2018-07-08T20:53:28.967823Z", "url": "https://files.pythonhosted.org/packages/84/07/3fa6d116e70ad6dd36d5ccc1c42d4c651b6526d307efc8f99ed765b54eeb/appkernel-0.1.0-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "3744411a2fbfa27e7b3cfa1809b06854", "sha256": "690ad955c0c9897fabe016eebd4cd1ad7fca71d98b3c9893987415302a3ba8fd"}, "downloads": -1, "filename": "appkernel-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3744411a2fbfa27e7b3cfa1809b06854", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52618, "upload_time": "2018-07-08T20:54:14", "upload_time_iso_8601": "2018-07-08T20:54:14.613007Z", "url": "https://files.pythonhosted.org/packages/7d/e3/80aef9fc19f8afa5cbb5e6e8d7c0ad27c4c2e123b7ceaab3868791433e32/appkernel-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "874c7c8975b7a8c159a8845196c61376", "sha256": "d241b870b4ca468a5af723662dab74fea7d5979df98babded063398133cb3493"}, "downloads": -1, "filename": "appkernel-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "874c7c8975b7a8c159a8845196c61376", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48369, "upload_time": "2018-09-09T15:29:29", "upload_time_iso_8601": "2018-09-09T15:29:29.804624Z", "url": "https://files.pythonhosted.org/packages/1a/70/c99d6eab1b1b7056a78d88811340a127a7a606edbe42ca6b6c13f1f2c510/appkernel-1.0.1-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b4694342452e25b847089e8918aeffc4", "sha256": "cb96eda8c9d44569b431661cdb53e5d0ed6019ab32bba3bf0aee49d76221ad64"}, "downloads": -1, "filename": "appkernel-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b4694342452e25b847089e8918aeffc4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48341, "upload_time": "2018-09-09T15:29:31", "upload_time_iso_8601": "2018-09-09T15:29:31.561260Z", "url": "https://files.pythonhosted.org/packages/72/fd/a6b7c70c9747bd13c6c637e6e27f9492f088cfeb809790fafe4ee35b554a/appkernel-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "712f0ffcaf29fdfaaf935af035b0269a", "sha256": "450150a52427d43d0e016f7f78ab7634b106df15f6bab090d074aa196b16ebf0"}, "downloads": -1, "filename": "appkernel-1.1.0.tar.gz", "has_sig": false, "md5_digest": "712f0ffcaf29fdfaaf935af035b0269a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48226, "upload_time": "2018-09-09T15:29:33", "upload_time_iso_8601": "2018-09-09T15:29:33.104046Z", "url": "https://files.pythonhosted.org/packages/23/0b/bc3fc83538d829e41dfc6899a6c394125e44c094006f32a21332068e7b16/appkernel-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "4382b8764d4421abbca39cc53208273d", "sha256": "b91cbd2bf7bd392675d7e1b158074de516f4c715744796d6eb34a6cd6134192c"}, "downloads": -1, "filename": "appkernel-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4382b8764d4421abbca39cc53208273d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 48967, "upload_time": "2018-09-14T12:04:33", "upload_time_iso_8601": "2018-09-14T12:04:33.391255Z", "url": "https://files.pythonhosted.org/packages/2b/cc/d503f90731b0819e640b8e23f056bbba525e182007a7acba167727dc807a/appkernel-1.2.0-py3-none-any.whl", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "e0f74141a1add834abe214c94b2578cb", "sha256": "be07b00d50d173db6134d96246da86b41bd09150b5315953e45aea1c171ee63c"}, "downloads": -1, "filename": "appkernel-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e0f74141a1add834abe214c94b2578cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49032, "upload_time": "2018-09-14T13:38:33", "upload_time_iso_8601": "2018-09-14T13:38:33.853489Z", "url": "https://files.pythonhosted.org/packages/a4/66/411649efc64d3cce0a14f87c2d17959b9e86b66ca4dca2278cbe8461d3a8/appkernel-1.2.1-py3-none-any.whl", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "3fcc152b8aab4b3dbfdf1e02b2ecc01f", "sha256": "b9a6bce8731cde3e17a2f51b2c63f3990ff3b42f2a4025cea168a0064eb906dc"}, "downloads": -1, "filename": "appkernel-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3fcc152b8aab4b3dbfdf1e02b2ecc01f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49098, "upload_time": "2018-09-14T15:04:54", "upload_time_iso_8601": "2018-09-14T15:04:54.378890Z", "url": "https://files.pythonhosted.org/packages/fe/80/d5e59b024cd06fb569619901e743dcdbe8f3f748f3f6f3aafca149bcad8a/appkernel-1.2.2-py3-none-any.whl", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "de79e60b5cede5e9763bf9663bc34213", "sha256": "80b5d4158bbeabcd47386eeace88c32e5d9eb1ef877fba0b09239577e888c984"}, "downloads": -1, "filename": "appkernel-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "de79e60b5cede5e9763bf9663bc34213", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49097, "upload_time": "2018-09-14T16:02:54", "upload_time_iso_8601": "2018-09-14T16:02:54.606645Z", "url": "https://files.pythonhosted.org/packages/bd/9b/d7102f5f4e910b7a271830ea5aa0bff61333a3b786a461f636dd7731ae39/appkernel-1.2.3-py3-none-any.whl", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "6c3ef31731385226f993c147db1b6c14", "sha256": "b0ac8ba3c37dc8878d6cb4036120a23dce45678402d8e51afe40a8f648a467f5"}, "downloads": -1, "filename": "appkernel-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6c3ef31731385226f993c147db1b6c14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49794, "upload_time": "2018-09-14T19:42:40", "upload_time_iso_8601": "2018-09-14T19:42:40.431453Z", "url": "https://files.pythonhosted.org/packages/f5/1c/50bedbf1dc072f08740cebb9e68820ecf88cad3ad5aed967c6ef178d5601/appkernel-1.2.4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6c3ef31731385226f993c147db1b6c14", "sha256": "b0ac8ba3c37dc8878d6cb4036120a23dce45678402d8e51afe40a8f648a467f5"}, "downloads": -1, "filename": "appkernel-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6c3ef31731385226f993c147db1b6c14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49794, "upload_time": "2018-09-14T19:42:40", "upload_time_iso_8601": "2018-09-14T19:42:40.431453Z", "url": "https://files.pythonhosted.org/packages/f5/1c/50bedbf1dc072f08740cebb9e68820ecf88cad3ad5aed967c6ef178d5601/appkernel-1.2.4-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:17:38 2020"}