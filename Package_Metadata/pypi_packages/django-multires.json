{"info": {"author": "Miroslav Shubernetskiy", "author_email": "miroslav@miki725.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "Django-Multires\n===============\n\n.. image:: https://d2weczhvl823v0.cloudfront.net/miki725/django-multires/trend.png\n   :alt: Bitdeli badge\n   :target: https://bitdeli.com/free\n\nDjango-multires is a plug-and-play Django app for managing multiple image resolutions in a db-driven approach.\n\nWhy another lib\n---------------\n\nImages are important aspect of web development. However they come at a price of extra bandwidth due to their size which especially becomes important on mobile devices. To handle this, some sites generate multiple resolutions of each image to serve to different devices or network conditions. The usual approach in doing so is to define ahead of time terms for different levels of resolutions which will be available. For example a ``thumbnail`` could be an image up to ``200x200``, ``high-res`` be up to ``2500x2500``, etc. This is what most of the current image-management Django apps do such as `easy-thumbnails <https://github.com/SmileyChris/easy-thumbnails>`_. In case of ``easy_thumbnails``, these presets are called aliases and some of them even allow to define more advanced options such as crop, rotation, etc. This allows for some advanced uses such as if need to generate image gallery thumbnails cropped square. That is until in one of images a face will be cropped out due to the fact that original image and gallery thumbnails are not of the same aspect ratio hence some regions need to be cropped. This results in adding a field to a model for square thumbnail image. Then of course you need the same image for the landing page banner which should be of 16x9 aspect ratio. That again cropps the image in unpleasing fashion so you end up adding another field. You can probably see where this is going.\n\nThis library does not require to hard code any rules as to how the images will be processed. All rules are stored in a database. So if a need arises to apply a special treatment to any specific image, it is just a matter of creating another rule in db on how to process that specific image. Additional advantage of this approach is that it becomes much easier to change these rules once the application is deployed (no need to change anything in ``settings.py``).\n\nOverview\n--------\n\nAs discussed in **Why another lib**, this library approaches a problem of managing multiple image resolutions in more database-driven way. Each rule how the image should be processed is represented by a ``MultiresRecipe`` model and each processed image is represented by ``MultiresImage`` model. Using them directly can be tedious  however you can use a lightweight wrapper ``MultiresImageField`` around ``ImageField`` for more simple API::\n\n    from multires import MultiresImageField, MultiresRecipe\n\n    # a simple thumbnails recipe\n    # usually would create this in Django admin\n    recipe = MultiresRecipe.objects.get_or_create(\n        title='thumbnail',\n        description='Recipe for thumbnails',\n        namespace='abc',\n        width=200, height=200,\n        file_type='jpeg', quality=80\n    )[0]\n\n    # some test data\n    class FooModel(models.Model):\n        image = MultiresImageField(upload_to='foo', namespace='abc')\n    foo = FooModel.objects.create(image=...)\n\n    # get multires image for foo's image\n    image = foo.image.get_multires_image(recipe)\n\n    # get lazy url for thumbnail image\n    print(image.image.url)\n\n    # or process it manually\n    image.process()\n\n    # get the url for the processed image as per MEDIA_URL\n    # since image has been already processed\n    print(image.image.url)\n\nInstallation\n------------\n\nSince this package is still in development, no stable version has been uploaded to PYPI yet. You can however install it as a `developer <http://github.com/miki725/django-multires/archive/develop.tar.gz#egg=django_multires-dev>`_ version::\n\n    $ pip install django-multires==dev\n\nOnce installed, add it to the ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ...,\n        'multires',\n        ...\n    )\n\nAnd then do the syncdb to create the necessary db tables::\n\n    $ python manage.py syncdb\n\nAdd the multires urls to Django's root urls config to enable lazy urls::\n\n    urlpatterns = patterns(\n        ...\n        url(r'^multires/', include('multires.urls', namespace='multires')),\n    )\n\nCredits\n-------\n\nCurrent maintainers:\n\n* Miroslav Shubernetskiy - `GitHub <http://bit.ly/mkgithub>`_\n\nLicense\n-------\n\nThe source code can be found at GitHub `<https://github.com/miki725/django-multires>`_.\n\nThis library is licensed with `MIT License <http://opensource.org/licenses/MIT>`_::\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n    the Software, and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/miki725/django-multires", "keywords": "django", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-multires", "package_url": "https://pypi.org/project/django-multires/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-multires/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/miki725/django-multires"}, "release_url": "https://pypi.org/project/django-multires/0.1/", "requires_dist": null, "requires_python": null, "summary": "Django-multires is a plug-and-play Django app for managing multiple image resolutions in a db-driven approach.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://bitdeli.com/free\" rel=\"nofollow\"><img alt=\"Bitdeli badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3034e1fa408f1fa839376e748a874c429885ca28/68747470733a2f2f64327765637a68766c38323376302e636c6f756466726f6e742e6e65742f6d696b693732352f646a616e676f2d6d756c74697265732f7472656e642e706e67\"></a>\n<p>Django-multires is a plug-and-play Django app for managing multiple image resolutions in a db-driven approach.</p>\n<div id=\"why-another-lib\">\n<h2>Why another lib</h2>\n<p>Images are important aspect of web development. However they come at a price of extra bandwidth due to their size which especially becomes important on mobile devices. To handle this, some sites generate multiple resolutions of each image to serve to different devices or network conditions. The usual approach in doing so is to define ahead of time terms for different levels of resolutions which will be available. For example a <tt>thumbnail</tt> could be an image up to <tt>200x200</tt>, <tt><span class=\"pre\">high-res</span></tt> be up to <tt>2500x2500</tt>, etc. This is what most of the current image-management Django apps do such as <a href=\"https://github.com/SmileyChris/easy-thumbnails\" rel=\"nofollow\">easy-thumbnails</a>. In case of <tt>easy_thumbnails</tt>, these presets are called aliases and some of them even allow to define more advanced options such as crop, rotation, etc. This allows for some advanced uses such as if need to generate image gallery thumbnails cropped square. That is until in one of images a face will be cropped out due to the fact that original image and gallery thumbnails are not of the same aspect ratio hence some regions need to be cropped. This results in adding a field to a model for square thumbnail image. Then of course you need the same image for the landing page banner which should be of 16x9 aspect ratio. That again cropps the image in unpleasing fashion so you end up adding another field. You can probably see where this is going.</p>\n<p>This library does not require to hard code any rules as to how the images will be processed. All rules are stored in a database. So if a need arises to apply a special treatment to any specific image, it is just a matter of creating another rule in db on how to process that specific image. Additional advantage of this approach is that it becomes much easier to change these rules once the application is deployed (no need to change anything in <tt>settings.py</tt>).</p>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>As discussed in <strong>Why another lib</strong>, this library approaches a problem of managing multiple image resolutions in more database-driven way. Each rule how the image should be processed is represented by a <tt>MultiresRecipe</tt> model and each processed image is represented by <tt>MultiresImage</tt> model. Using them directly can be tedious  however you can use a lightweight wrapper <tt>MultiresImageField</tt> around <tt>ImageField</tt> for more simple API:</p>\n<pre>from multires import MultiresImageField, MultiresRecipe\n\n# a simple thumbnails recipe\n# usually would create this in Django admin\nrecipe = MultiresRecipe.objects.get_or_create(\n    title='thumbnail',\n    description='Recipe for thumbnails',\n    namespace='abc',\n    width=200, height=200,\n    file_type='jpeg', quality=80\n)[0]\n\n# some test data\nclass FooModel(models.Model):\n    image = MultiresImageField(upload_to='foo', namespace='abc')\nfoo = FooModel.objects.create(image=...)\n\n# get multires image for foo's image\nimage = foo.image.get_multires_image(recipe)\n\n# get lazy url for thumbnail image\nprint(image.image.url)\n\n# or process it manually\nimage.process()\n\n# get the url for the processed image as per MEDIA_URL\n# since image has been already processed\nprint(image.image.url)\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Since this package is still in development, no stable version has been uploaded to PYPI yet. You can however install it as a <a href=\"http://github.com/miki725/django-multires/archive/develop.tar.gz#egg=django_multires-dev\" rel=\"nofollow\">developer</a> version:</p>\n<pre>$ pip install django-multires==dev\n</pre>\n<p>Once installed, add it to the <tt>INSTALLED_APPS</tt>:</p>\n<pre>INSTALLED_APPS = (\n    ...,\n    'multires',\n    ...\n)\n</pre>\n<p>And then do the syncdb to create the necessary db tables:</p>\n<pre>$ python manage.py syncdb\n</pre>\n<p>Add the multires urls to Django\u2019s root urls config to enable lazy urls:</p>\n<pre>urlpatterns = patterns(\n    ...\n    url(r'^multires/', include('multires.urls', namespace='multires')),\n)\n</pre>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Current maintainers:</p>\n<ul>\n<li>Miroslav Shubernetskiy - <a href=\"http://bit.ly/mkgithub\" rel=\"nofollow\">GitHub</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The source code can be found at GitHub <a href=\"https://github.com/miki725/django-multires\" rel=\"nofollow\">https://github.com/miki725/django-multires</a>.</p>\n<p>This library is licensed with <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT License</a>:</p>\n<pre>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</pre>\n</div>\n\n          </div>"}, "last_serial": 986527, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 00:55:48 2020"}