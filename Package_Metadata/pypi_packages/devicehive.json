{"info": {"author": "DataArt (http://dataart.com)", "author_email": "info@devicehive.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Home Automation", "Topic :: Internet", "Topic :: Software Development :: Embedded Systems"], "description": "|License| |PyPI| |Build Status|\n\nDevicehive\n==========\n\nThe simplest way to create a client is to use ``DeviceHiveApi`` class.\nIf you need to handle server events such as ``handle_command_insert``,\n``handle_command_update`` or ``handle_notification`` you'll have to\nextend ``Handler`` class and use ``DeviceHive`` class for it.\n\nCreating a client using DeviceHiveApi class\n-------------------------------------------\n\nFirst of all you need to create ``DeviceHiveApi`` object. Then you can\nuse this object for for API calls.\n\nExample:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    device_hive_api = DeviceHiveApi(url, refresh_token=refresh_token)\n\nWebsocket protocol\n~~~~~~~~~~~~~~~~~~\n\nIf you want to use ``Websocket`` protocol you need only to specify the\nurl:\n\n.. code:: python\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n\nAuthentication\n~~~~~~~~~~~~~~\n\nThere are three ways of initial authentication:\n\n-  Using refresh token\n-  Using access token\n-  Using login and password\n\nExamples:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n    device_hive_api = DeviceHiveApi(url, refresh_token='SOME_REFRESH_TOKEN')\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n    device_hive_api = DeviceHiveApi(url, access_token='SOME_ACCESS_TOKEN')\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n    device_hive_api = DeviceHiveApi(url, login='SOME_LOGIN', password='SOME_PASSWORD')\n\nInfo\n~~~~\n\n``get_info()`` method returns ``dict`` with the next fields:\n\n-  ``api_version``\n-  ``server_timestamp``\n-  ``rest_server_url``\n-  ``websocket_server_url``\n\n``get_cluster_info()`` method returns ``dict`` with the next fields:\n\n-  ``bootstrap.servers``\n-  ``zookeeper.connect``\n\nExample:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    device_hive_api = DeviceHiveApi(url, refresh_token=refresh_token)\n    info = device_hive_api.get_info()\n    print(info)\n    cluster_info = device_hive_api.get_cluster_info()\n    print(cluster_info)\n\nProperties\n~~~~~~~~~~\n\n``get_property(name)`` method returns ``dict`` with the next fields:\n\n-  ``entity_version``\n-  ``name``\n-  ``value``\n\n``set_property(name, value)`` method returns entity version.\n\n``delete_property(name)`` method does not return anything.\n\nExample:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    device_hive_api = DeviceHiveApi(url, refresh_token=refresh_token)\n    name = 'user.login.lastTimeoutSent'\n    entity_version = device_hive_api.set_property(name, 'value')\n    print(entity_version)\n    prop = device_hive_api.get_property(name)\n    print(prop)\n    device_hive_api.delete_property(name)\n\nTokens\n~~~~~~\n\n``create_token(user_id, expiration, actions, network_ids, device_ids)``\nmethod returns ``dict`` with the next fields:\n\n-  ``access_token``\n-  ``refresh_token``\n\nonly ``user_id`` is required.\n\n``refresh_token()`` method refreshes the access token and returns it.\n\nExample:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    device_hive_api = DeviceHiveApi(url, refresh_token=refresh_token)\n    tokens = device_hive_api.create_token(1)\n    print(tokens)\n    access_token = device_hive_api.refresh_token()\n    print(access_token)\n\nDevices\n~~~~~~~\n\n``list_devices(name, name_pattern, network_id, network_name, sort_field, sort_order, take, skip)``\nmethod returns list of ``Device`` objects. All args are optional.\n\n``get_device(device_id)`` method returns ``Device`` object.\n\n``put_device(device_id, name, data, network_id, is_blocked)`` method\nreturns ``Device`` object. Only ``device_id`` is required.\n\n``list_commands(device_id, start, end, command, status, sort_field, sort_order, take, skip)``\nmethod returns list of ``Command`` objects. Only ``device_id`` is\nrequired.\n\n``send_command(device_id, command_name, parameters, lifetime, timestamp, status, result)``\nmethod returns ``Command`` object. Only ``device_id`` and\n``command_name`` are required.\n\n``list_notifications(device_id, start, end, notification, sort_field, sort_order, take, skip)``\nmethod returns list of ``Notification`` object. Only ``device_id`` is\nrequired.\n\n``send_notification(device_id, notification_name, parameters, timestamp)``\nmethod returns ``Notification`` object. Only ``device_id`` and\n``notification_name`` are required.\n\nDevice object\n^^^^^^^^^^^^^\n\nProperties:\n\n-  ``id`` (read only)\n-  ``name``\n-  ``data``\n-  ``network_id``\n-  ``device_type_id``\n-  ``is_blocked``\n\nMethods:\n\n-  ``save()`` method does not return anything.\n-  ``remove()`` method does not return anything.\n-  ``list_commands(start, end, command, status, sort_field, sort_order, take, skip)``\n   method returns list of ``Command`` objects. All args are optional.\n-  ``send_command(command_name, parameters, lifetime, timestamp, status, result)``\n   method returns ``Command`` object. Only ``command_name`` is required.\n-  ``list_notifications(start, end, notification, sort_field, sort_order, take, skip)``\n   method returns list of ``Notification`` objects. All args are\n   optional.\n-  ``send_notification(notification_name, parameters, timestamp)``\n   method returns ``Notification`` object. Only ``notification_name`` is\n   required.\n\nCommand object\n^^^^^^^^^^^^^^\n\nProperties:\n\n-  ``id`` (read only)\n-  ``user_id`` (read only)\n-  ``command`` (read only)\n-  ``parameters`` (read only)\n-  ``lifetime`` (read only)\n-  ``timestamp`` (read only)\n-  ``last_updated`` (read only)\n-  ``status``\n-  ``result``\n\nMethods:\n\n-  ``save()`` method does not return anything.\n\nNotification object\n^^^^^^^^^^^^^^^^^^^\n\nProperties:\n\n-  ``device_id`` (read only)\n-  ``id`` (read only)\n-  ``notification`` (read only)\n-  ``parameters`` (read only)\n-  ``timestamp`` (read only)\n\nExample:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    device_hive_api = DeviceHiveApi(url, refresh_token=refresh_token)\n    device_id = 'example-device'\n    device = device_hive_api.put_device(device_id)\n    device.name = 'new-device-name'\n    device.data = {'key': 'value'}\n    device.save()\n    devices = device_hive_api.list_devices()\n    for device in devices:\n        print('Device: %s, name: %s, data: %s' % (device.id, device.name,\n                                                  device.data))\n        device.remove()\n\nNetworks\n~~~~~~~~\n\n``list_networks(name, name_pattern, sort_field, sort_order, take, skip)``\nmethod returns list of ``Network`` objects. All args are optional.\n\n``get_network(network_id)`` method returns ``Network`` object.\n\n``create_network(name, description)`` method returns ``Network`` object.\n\nNetwork object\n^^^^^^^^^^^^^^\n\nProperties:\n\n-  ``id`` (read only)\n-  ``name``\n-  ``description``\n\nMethods:\n\n-  ``save()`` method does not return anything.\n-  ``remove(force)`` method does not return anything. All args are\n   optional.\n\nExample:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    device_hive_api = DeviceHiveApi(url, refresh_token=refresh_token)\n    network_name = 'example-name'\n    network_description = 'example-description'\n    network = device_hive_api.create_network(network_name, network_description)\n    print(network.name)\n\nDevice types\n~~~~~~~~~~~~\n\n``list_device_types(name, name_pattern, sort_field, sort_order, take, skip)``\nmethod returns list of ``DeviceType`` objects. All args are optional.\n\n``get_device_type(device_type_id)`` method returns ``DeviceType``\nobject.\n\n``create_device_type(name, description)`` method returns ``DeviceType``\nobject.\n\nDeviceType object\n^^^^^^^^^^^^^^^^^\n\nProperties:\n\n-  ``id`` (read only)\n-  ``name``\n-  ``description``\n\nMethods:\n\n-  ``save()`` method does not return anything.\n-  ``remove(force)`` method does not return anything. All args are\n   optional.\n\nExample:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    device_hive_api = DeviceHiveApi(url, refresh_token=refresh_token)\n    device_type_name = 'example-name'\n    device_type_description = 'example-description'\n    device_type = device_hive_api.create_device_type(device_type_name,\n                                                     device_type_description)\n    print(device_type.name)\n\nUsers\n~~~~~\n\n``list_users(login, login_pattern, role, status, sort_field, sort_order, take, skip)``\nmethod returns list of ``User`` objects. All args are optional.\n\n``get_current_user()`` method returns ``User`` object.\n\n``get_user(user_id)`` method returns ``User`` object.\n\n``create_user(self, login, password, role, data, all_device_types_available)``\nmethod returns ``User`` object.\n\nUser object\n^^^^^^^^^^^\n\nProperties:\n\n-  ``id`` (read only)\n-  ``login`` (read only)\n-  ``last_login`` (read only)\n-  ``intro_reviewed`` (read only)\n-  ``all_device_types_available`` (read only)\n-  ``role``\n-  ``status``\n-  ``data``\n\nMethods:\n\n-  ``save()`` method does not return anything.\n-  ``update_password(password)`` method does not return anything.\n-  ``remove()`` method does not return anything.\n-  ``list_networks()`` method Returns list of ``Network`` objects.\n-  ``list_device_types()`` method Returns list of ``DeviceType``\n   objects.\n-  ``assign_network(network_id)`` method does not return anything.\n-  ``unassign_network(network_id)`` method does not return anything.\n-  ``assign_device_type(device_type_id)`` method does not return\n   anything.\n-  ``unassign_device_type(device_type_id)`` method does not return\n   anything.\n-  ``allow_all_device_types()`` method does not return anything.\n-  ``disallow_all_device_types()`` method does not return anything.\n\nExample:\n\n.. code:: python\n\n    from devicehive import DeviceHiveApi\n    from devicehive.user import User\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    device_hive_api = DeviceHiveApi(url, refresh_token=refresh_token)\n    login = 'example-login'\n    password = 'example-password'\n    role = User.CLIENT_ROLE\n    data = {'key': 'value'}\n    user = device_hive_api.create_user(login, password, role, data)\n    print(user.login)\n\nCreating a client using DeviceHive class\n----------------------------------------\n\nFirst of all you need to create custom ``Handler`` class.\n\nExample of creating custom ``Handler`` class:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            info = self.api.get_info()\n            print(info)\n            self.api.disconnect()\n\n``handle_connect`` is the only one required method. If you want to\nhandle server events you'll heed to implement ``handle_command_insert``,\n``handle_command_update`` and ``handle_notification`` methods.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n        \n        def handle_connect(self):\n            device_ids = ['example-device-1', 'example-device-2']\n            for device_id in device_ids:\n                device = self.api.put_device(device_id)\n                device.subscribe_insert_commands()\n                device.subscribe_update_commands()\n                device.subscribe_notifications()\n\n        def handle_command_insert(self, command):\n            print(command.command)\n\n        def handle_command_update(self, command):\n            print(command.command)\n\n        def handle_notification(self, notification):\n            print(notification.notification)\n\nThe second step is to use ``DeviceHive`` class for creating connection\nto the server.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive import DeviceHive\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            device_ids = ['example-device-1', 'example-device-2']\n            for device_id in device_ids:\n                device = self.api.put_device(device_id)\n                device.subscribe_insert_commands()\n                device.subscribe_update_commands()\n                device.subscribe_notifications()\n\n        def handle_command_insert(self, command):\n            print(command.command)\n\n        def handle_command_update(self, command):\n            print(command.command)\n\n        def handle_notification(self, notification):\n            print(notification.notification)\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    dh = DeviceHive(SimpleHandler)\n    dh.connect(url, refresh_token=refresh_token)\n\nCustom handler args\n~~~~~~~~~~~~~~~~~~~\n\nIf you need to initialize your handler you can do it the next way:\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive import DeviceHive\n\n\n    class SimpleHandler(Handler):\n\n        def __init__(self, api, some_arg, some_kwarg):\n            Handler.__init__(self, api)\n            self._some_arg = some_arg\n            self._some_kwarg = some_kwarg\n\n        def handle_connect(self):\n            info = self.api.get_info()\n            print(info)\n            self.api.disconnect()\n\n    device_hive = DeviceHive(SimpleHandler, 'some_arg', some_kwarg='some_kwarg')\n\nWebsocket protocol\n~~~~~~~~~~~~~~~~~~\n\nIf you want to use ``Websocket`` protocol you need only to specify the\nurl:\n\n.. code:: python\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n\nAuthentication\n~~~~~~~~~~~~~~\n\nThere are three ways of initial authentication:\n\n-  Using refresh token\n-  Using access token\n-  Using login and password\n\nExamples:\n\n.. code:: python\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n    device_hive.connect(url, refresh_token='SOME_REFRESH_TOKEN')\n\n.. code:: python\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n    device_hive.connect(url, access_token='SOME_ACCESS_TOKEN')\n\n.. code:: python\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n    device_hive.connect(url, login='SOME_LOGIN', password='SOME_PASSWORD')\n\nAPI\n---\n\nAll api calls may be done via ``api`` object. This object available\ninside custom handler with ``self.api`` property.\n\nAPI info\n~~~~~~~~\n\n``self.api.get_info()`` method returns ``dict``. ``get_info`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.get_cluster_info()`` method returns ``dict``.\n``get_cluster_info`` method of ``DeviceHiveApi`` class is the wrapper on\ntop of this call.\n\nSee the description of ``DeviceHiveApi`` `info <#info>`__ methods for\nmore details.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            info = self.api.get_info()\n            print(info)\n            cluster_info = self.api.get_cluster_info()\n            print(cluster_info)\n            self.api.disconnect()\n\nAPI properties\n~~~~~~~~~~~~~~\n\n``self.api.get_property(name)`` method returns ``dict``.\n``get_property`` method of ``DeviceHiveApi`` class is the wrapper on top\nof this call.\n\n``self.api.set_property(name, value)`` method returns entity version.\n``set_property`` method of ``DeviceHiveApi`` class is the wrapper on top\nof this call.\n\n``self.api.delete_property(name)`` method does not return anything.\n``delete_property`` method of ``DeviceHiveApi`` class is the wrapper on\ntop of this call.\n\nSee the description of ``DeviceHiveApi`` `property <#properties>`__\nmethods for more details.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            name = 'user.login.lastTimeoutSent'\n            prop = self.api.get_property(name)\n            print(prop)\n            entity_version = self.api.get_property(name, 'value')\n            print(entity_version)\n            self.api.delete_property(name)\n            self.api.disconnect()\n\nAPI tokens\n~~~~~~~~~~\n\n``self.api.create_token(user_id, expiration, actions, network_ids, device_ids)``\nmethod returns ``dict``. ``create_token`` method of ``DeviceHiveApi``\nclass is the wrapper on top of this call.\n\n``self.api.refresh_token()`` method refreshes the access token and\nreturns it. ``refresh_token`` method of ``DeviceHiveApi`` class is the\nwrapper on top of this call.\n\nSee the description of ``DeviceHiveApi`` `token <#tokens>`__ methods for\nmore details.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            tokens = self.api.create_token(1)\n            print(tokens)\n            access_token = self.api.refresh_token()\n            print(access_token)\n            self.api.disconnect()\n\nAPI commands subscription\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``self.api.subscribe_insert_commands(device_id, network_ids, device_type_ids, names, timestamp)``\nmethod returns ``CommandsSubscription`` object.\n\n``self.api.subscribe_update_commands(device_id, network_ids, device_type_ids, names, timestamp)``\nmethod returns ``CommandsSubscription`` object.\n\nAPI CommandsSubscription object\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nProperties:\n\n-  ``id`` (read only)\n\nMethods:\n\n-  ``remove()`` method does not return anything.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n        insert_subscription = None\n        update_subscription = None\n\n        def handle_connect(self):\n            device_id = 'example-device'\n            device = self.api.put_device(device_id)\n            command_name = 'example-command'\n            self.insert_subscription = self.api.subscribe_insert_commands(\n                device_id, [command_name])\n            self.update_subscription= self.api.subscribe_update_commands(\n                device_id, [command_name])\n            command = device.send_command(command_name)\n            command.status = 'new-status'\n            command.save()\n\n        def handle_command_insert(self, command):\n            print('Command insert: %s, status: %s.' % (command.command,\n                                                       command.status))\n\n        def handle_command_update(self, command):\n            print('Command update: %s, status: %s.' % (command.command,\n                                                       command.status))\n            self.insert_subscription.remove()\n            self.update_subscription.remove()\n\nAPI notifications subscription\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``self.api.subscribe_notifications(device_id, network_ids, device_type_ids, names, timestamp)``\nmethod returns ``NotificationsSubscription`` object.\n\nAPI NotificationsSubscription object\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nProperties:\n\n-  ``id`` (read only)\n\nMethods:\n\n-  ``remove()`` method does not return anything.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n        notification_subscription = None\n\n        def handle_connect(self):\n            device_id = 'example-device'\n            device = self.api.put_device(device_id)\n            notification_name = 'example-notification'\n            self.notification_subscription = self.api.subscribe_notifications(\n                device_id, [notification_name])\n            device.send_notification(notification_name)\n\n        def handle_notification(self, notification):\n            print('Notification: %s.' % notification.notification)\n            self.notification_subscription.remove()\n\nAPI devices\n~~~~~~~~~~~\n\n``self.api.list_devices(name, name_pattern, network_id, network_name, sort_field, sort_order, take, skip)``\nmethod returns list of ``Device`` objects. ``list_devices`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.get_device(device_id)`` method returns ``Device`` object.\n``get_device`` method of ``DeviceHiveApi`` class is the wrapper on top\nof this call.\n\n``self.api.put_device(device_id, name, data, network_id, device_type_id, is_blocked)``\nmethod does not return anything. ``put_device`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.list_commands(device_id, start, end, command, status, sort_field, sort_order, take, skip)``\nmethod returns list of ``Command`` objects. ``list_commands`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.send_command(device_id, command_name, parameters, lifetime, timestamp, status, result)``\nmethod returns ``Command`` object. ``send_command`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.list_notifications(device_id, start, end, notification, sort_field, sort_order, take, skip)``\nmethod returns list of ``Notification`` objects. ``list_notifications``\nmethod of ``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.send_notification(device_id, notification_name, parameters, timestamp)``\nmethod returns ``Notification`` object. ``send_notification`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\nSee the description of ``DeviceHiveApi`` `device <#devices>`__ methods\nfor more details.\n\nAPI device object\n^^^^^^^^^^^^^^^^^\n\nAPI device object has the same properties as `device\nobject <#device-object>`__.\n\nAPI device object has all methods from `device\nobject <#device-object>`__ and extends these methods with:\n\n-  ``subscribe_insert_commands(names, timestamp)`` method returns\n   ``CommandsSubscription`` object. All args are optional.\n-  ``subscribe_update_commands(names, timestamp)`` method returns\n   ``CommandsSubscription`` object. All args are optional.\n-  ``subscribe_notifications(names, timestamp)`` method returns\n   ``NotificationsSubscription`` object. All args are optional.\n\nAPI command object\n^^^^^^^^^^^^^^^^^^\n\nAPI command object has the same properties as `command\nobject <#command-object>`__.\n\nAPI command object has the same methods as `command\nobject <#command-object>`__.\n\nAPI notification object\n^^^^^^^^^^^^^^^^^^^^^^^\n\nAPI notification object has the same properties as `notification\nobject <#notification-object>`__\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            device_id = 'example-device'\n            device = self.api.put_device(device_id)\n            device.name = 'new-device-name'\n            device.data = {'key': 'value'}\n            device.save()\n            devices = self.api.list_devices()\n            for device in devices:\n                print('Device: %s, name: %s, data: %s' % (device.id, device.name,\n                                                          device.data))\n                device.remove()\n            self.api.disconnect()\n\nAPI networks\n~~~~~~~~~~~~\n\n``self.api.list_networks(name, name_pattern, sort_field, sort_order, take, skip)``\nmethod returns list of ``Network`` objects. ``list_networks`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.get_network(network_id)`` method returns ``Network`` object.\n``get_network`` method of ``DeviceHiveApi`` class is the wrapper on top\nof this call.\n\n``self.api.create_network(name, description)`` method returns\n``Network`` object. ``create_network`` method of ``DeviceHiveApi`` class\nis the wrapper on top of this call.\n\nSee the description of ``DeviceHiveApi`` `network <#networks>`__ methods\nfor more details.\n\nAPI network object\n^^^^^^^^^^^^^^^^^^\n\nAPI network object has the same properties as `network\nobject <#network-object>`__.\n\nAPI network object has all methods from `network\nobject <#network-object>`__ and extends these methods with:\n\n-  ``list_devices(name, name_pattern, sort_field, sort_order, take, skip)``\n   method returns list of ``Device`` objects. All args are optional.\n-  ``subscribe_insert_commands(names, timestamp)`` method returns\n   ``CommandsSubscription`` object. All args are optional.\n-  ``subscribe_update_commands(names, timestamp)`` method returns\n   ``CommandsSubscription`` object. All args are optional.\n-  ``subscribe_notifications(names, timestamp)`` method returns\n   ``NotificationsSubscription`` object. All args are optional.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            network_name = 'example-name'\n            network_description = 'example-description'\n            network = self.api.create_network(network_name, network_description)\n            print(network.name)\n            self.api.disconnect()\n\nAPI device types\n~~~~~~~~~~~~~~~~\n\n``self.api.list_device_types(name, name_pattern, sort_field, sort_order, take, skip)``\nmethod returns list of ``DeviceType`` objects. ``list_device_types``\nmethod of ``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.get_device_type(device_type_id)`` method returns\n``DeviceType`` object. ``get_device_type`` method of ``DeviceHiveApi``\nclass is the wrapper on top of this call.\n\n``self.api.create_device_type(name, description)`` method returns\n``DeviceType`` object. ``create_device_type`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\nSee the description of ``DeviceHiveApi`` `device\ntypes <#device-types>`__ methods for more details.\n\nAPI device type object\n^^^^^^^^^^^^^^^^^^^^^^\n\nAPI device type object has the same properties as `device type\nobject <#devicetype-object>`__.\n\nAPI device type object has all methods from `device type\nobject <#devicetype-object>`__ and extends these methods with:\n\n-  ``list_devices(name, name_pattern, sort_field, sort_order, take, skip)``\n   method returns list of ``Device`` objects. All args are optional.\n-  ``subscribe_insert_commands(names, timestamp)`` method returns\n   ``CommandsSubscription`` object. All args are optional.\n-  ``subscribe_update_commands(names, timestamp)`` method returns\n   ``CommandsSubscription`` object. All args are optional.\n-  ``subscribe_notifications(names, timestamp)`` method returns\n   ``NotificationsSubscription`` object. All args are optional.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            device_type_name = 'example-name'\n            device_type_description = 'example-description'\n            device_type = self.api.create_device_type(device_type_name, device_type_description)\n            print(device_type.name)\n            self.api.disconnect()\n\nAPI users\n~~~~~~~~~\n\n``self.api.list_users(login, login_pattern, role, status, sort_field, sort_order, take, skip)``\nmethod returns list of ``User`` objects. ``list_users`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\n``self.api.get_current_user()`` method returns ``User`` object.\n``get_current_user`` method of ``DeviceHiveApi`` class is the wrapper on\ntop of this call.\n\n``self.api.get_user(user_id)`` method returns ``User`` object.\n``get_user`` method of ``DeviceHiveApi`` class is the wrapper on top of\nthis call.\n\n``self.api.create_user(self, login, password, role, data, all_device_types_available)``\nmethod returns ``User`` object. ``create_user`` method of\n``DeviceHiveApi`` class is the wrapper on top of this call.\n\nSee the description of ``DeviceHiveApi`` `user <#users>`__ methods for\nmore details.\n\nAPI user object\n^^^^^^^^^^^^^^^\n\nAPI user object has the same properties as `user\nobject <#user-object>`__.\n\nAPI user object has the same methods as `user object <#user-object>`__.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive.user import User\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            login = 'example-login'\n            password = 'example-password'\n            role = User.CLIENT_ROLE\n            data = {'key': 'value'}\n            user = self.api.create_user(login, password, role, data)\n            print(user.login)\n            self.api.disconnect()\n\nAPI extended example\n--------------------\n\nHere we will create one endpoint which sends notifications and other\nendpoint which receives these notifications.\n\nOn the first we will create ``receiver.py``:\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive import DeviceHive\n\n\n    class ReceiverHandler(Handler):\n\n        def __init__(self, api, device_id='simple-example-device',\n                     accept_command_name='accept_notifications'):\n            Handler.__init__(self, api)\n            self._device_id = device_id\n            self._accept_command_name = accept_command_name\n            self._device = None\n\n        def handle_connect(self):\n            self._device = self.api.put_device(self._device_id)\n            self._device.subscribe_insert_commands([self._accept_command_name])\n            self._device.subscribe_notifications()\n\n        def handle_command_insert(self, command):\n            print('Accept command \"%s\"' % self._accept_command_name)\n            command.status = 'accepted'\n            command.save()\n\n        def handle_notification(self, notification):\n            print('Notification \"%s\" received' % notification.notification)\n\n\n    url = 'ws://playground.devicehive.com/api/websocket'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    dh = DeviceHive(ReceiverHandler)\n    dh.connect(url, refresh_token=refresh_token)\n\nOn the next step we will create ``sender.py``\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive import DeviceHive\n\n\n    class SenderHandler(Handler):\n\n        def __init__(self, api, device_id='simple-example-device',\n                     accept_command_name='accept_notifications',\n                     num_notifications=10):\n            Handler.__init__(self, api)\n            self._device_id = device_id\n            self._accept_command_name = accept_command_name\n            self._num_notifications = num_notifications\n            self._device = None\n\n        def _send_notifications(self):\n            for num_notification in range(self._num_notifications):\n                notification = '%s-notification' % num_notification\n                self._device.send_notification(notification)\n                print('Sending notification \"%s\"' % notification)\n            self.api.disconnect()\n\n        def handle_connect(self):\n            self._device = self.api.get_device(self._device_id)\n            self._device.send_command(self._accept_command_name)\n            print('Sending command \"%s\"' % self._accept_command_name)\n            self._device.subscribe_update_commands([self._accept_command_name])\n\n        def handle_command_update(self, command):\n            if command.status == 'accepted':\n                print('Command \"%s\" accepted' % self._accept_command_name)\n                self._send_notifications()\n\n\n    url = 'http://playground.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    dh = DeviceHive(SenderHandler)\n    dh.connect(url, refresh_token=refresh_token)\n\nRun ``python receiver.py`` in the first terminal. And\n``python sender.py`` in the second. The order of run is important.\n``receiver.py`` must be started first.\n\nDocker tests\n------------\n\nBuild image\n~~~~~~~~~~~\n\n::\n\n    docker build -f Dockerfile.tests -t devicehive-tests .\n\nRun tests\n~~~~~~~~~\n\nYou can run tests with refresh\\_token by setting ``ADMIN_REFRESH_TOKEN``\nand/or ``CLIENT_REFRESH_TOKEN`` variable:\n\n::\n\n    docker run -it -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' devicehive-tests\n\nOr with access\\_token by setting ``ADMIN_ACCESS_TOKEN`` and/or\n``CLIENT_ACCESS_TOKEN`` variable:\n\n::\n\n    docker run -it -e ADMIN_ACCESS_TOKEN='SOME_ADMIN_ACCESS_TOKEN' devicehive-tests\n\nOr with user login and password by setting ``ADMIN_LOGIN`` and\n``ADMIN_PASSWORD`` for admin account and/or ``CLIENT_LOGIN`` and\n``CLIENT_PASSWORD`` for client account.\n\n::\n\n    docker run -it -e ADMIN_LOGIN='SOME_ADMIN_LOGIN' -e ADMIN_PASSWORD='SOME_ADMIN_PASSWORD' devicehive-tests\n\nTo run tests with enabled requests logging you need to change\n``LOG_LEVEL`` variable:\n\n::\n\n    docker run -it -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' -e LOG_LEVEL='DEBUG' devicehive-tests\n\nTo run the specific test you need to set ``TEST`` variable:\n\n::\n\n    docker run -it -e TEST=test_api.py::test_get_info -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' devicehive-tests\n\n.. |License| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n   :target: LICENSE\n.. |PyPI| image:: https://img.shields.io/pypi/v/devicehive.svg\n   :target: https://pypi.python.org/pypi/devicehive\n.. |Build Status| image:: https://travis-ci.org/devicehive/devicehive-python.svg?branch=master\n   :target: https://travis-ci.org/devicehive/devicehive-python\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://devicehive.com", "keywords": "iot cloud m2m gateway embedded devicehive", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "devicehive", "package_url": "https://pypi.org/project/devicehive/", "platform": "", "project_url": "https://pypi.org/project/devicehive/", "project_urls": {"Homepage": "https://devicehive.com"}, "release_url": "https://pypi.org/project/devicehive/2.1.6/", "requires_dist": null, "requires_python": "", "summary": "DeviceHive Python connectivity library", "version": "2.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a> <a href=\"https://pypi.python.org/pypi/devicehive\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/709ada2e13a0b9b1efa09e309e7c9b512492e713/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646576696365686976652e737667\"></a> <a href=\"https://travis-ci.org/devicehive/devicehive-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90fa6def871c33205475aa7fe87547f048961b33/68747470733a2f2f7472617669732d63692e6f72672f646576696365686976652f646576696365686976652d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"devicehive\">\n<h2>Devicehive</h2>\n<p>The simplest way to create a client is to use <tt>DeviceHiveApi</tt> class.\nIf you need to handle server events such as <tt>handle_command_insert</tt>,\n<tt>handle_command_update</tt> or <tt>handle_notification</tt> you\u2019ll have to\nextend <tt>Handler</tt> class and use <tt>DeviceHive</tt> class for it.</p>\n<div id=\"creating-a-client-using-devicehiveapi-class\">\n<h3>Creating a client using DeviceHiveApi class</h3>\n<p>First of all you need to create <tt>DeviceHiveApi</tt> object. Then you can\nuse this object for for API calls.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n</pre>\n<div id=\"websocket-protocol\">\n<h4>Websocket protocol</h4>\n<p>If you want to use <tt>Websocket</tt> protocol you need only to specify the\nurl:</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n</pre>\n</div>\n<div id=\"authentication\">\n<h4>Authentication</h4>\n<p>There are three ways of initial authentication:</p>\n<ul>\n<li>Using refresh token</li>\n<li>Using access token</li>\n<li>Using login and password</li>\n</ul>\n<p>Examples:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'SOME_REFRESH_TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'SOME_ACCESS_TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">login</span><span class=\"o\">=</span><span class=\"s1\">'SOME_LOGIN'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'SOME_PASSWORD'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"info\">\n<h4>Info</h4>\n<p><tt>get_info()</tt> method returns <tt>dict</tt> with the next fields:</p>\n<ul>\n<li><tt>api_version</tt></li>\n<li><tt>server_timestamp</tt></li>\n<li><tt>rest_server_url</tt></li>\n<li><tt>websocket_server_url</tt></li>\n</ul>\n<p><tt>get_cluster_info()</tt> method returns <tt>dict</tt> with the next fields:</p>\n<ul>\n<li><tt>bootstrap.servers</tt></li>\n<li><tt>zookeeper.connect</tt></li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n<span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n<span class=\"n\">cluster_info</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">get_cluster_info</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cluster_info</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"properties\">\n<h4>Properties</h4>\n<p><tt>get_property(name)</tt> method returns <tt>dict</tt> with the next fields:</p>\n<ul>\n<li><tt>entity_version</tt></li>\n<li><tt>name</tt></li>\n<li><tt>value</tt></li>\n</ul>\n<p><tt>set_property(name, value)</tt> method returns entity version.</p>\n<p><tt>delete_property(name)</tt> method does not return anything.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'user.login.lastTimeoutSent'</span>\n<span class=\"n\">entity_version</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">set_property</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">entity_version</span><span class=\"p\">)</span>\n<span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span>\n<span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">delete_property</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"tokens\">\n<h4>Tokens</h4>\n<p><tt>create_token(user_id, expiration, actions, network_ids, device_ids)</tt>\nmethod returns <tt>dict</tt> with the next fields:</p>\n<ul>\n<li><tt>access_token</tt></li>\n<li><tt>refresh_token</tt></li>\n</ul>\n<p>only <tt>user_id</tt> is required.</p>\n<p><tt>refresh_token()</tt> method refreshes the access token and returns it.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n<span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">create_token</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">)</span>\n<span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">refresh_token</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"devices\">\n<h4>Devices</h4>\n<p><tt>list_devices(name, name_pattern, network_id, network_name, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Device</tt> objects. All args are optional.</p>\n<p><tt>get_device(device_id)</tt> method returns <tt>Device</tt> object.</p>\n<p><tt>put_device(device_id, name, data, network_id, is_blocked)</tt> method\nreturns <tt>Device</tt> object. Only <tt>device_id</tt> is required.</p>\n<p><tt>list_commands(device_id, start, end, command, status, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Command</tt> objects. Only <tt>device_id</tt> is\nrequired.</p>\n<p><tt>send_command(device_id, command_name, parameters, lifetime, timestamp, status, result)</tt>\nmethod returns <tt>Command</tt> object. Only <tt>device_id</tt> and\n<tt>command_name</tt> are required.</p>\n<p><tt>list_notifications(device_id, start, end, notification, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Notification</tt> object. Only <tt>device_id</tt> is\nrequired.</p>\n<p><tt>send_notification(device_id, notification_name, parameters, timestamp)</tt>\nmethod returns <tt>Notification</tt> object. Only <tt>device_id</tt> and\n<tt>notification_name</tt> are required.</p>\n<div id=\"device-object\">\n<h5>Device object</h5>\n<p>Properties:</p>\n<ul>\n<li><tt>id</tt> (read only)</li>\n<li><tt>name</tt></li>\n<li><tt>data</tt></li>\n<li><tt>network_id</tt></li>\n<li><tt>device_type_id</tt></li>\n<li><tt>is_blocked</tt></li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><tt>save()</tt> method does not return anything.</li>\n<li><tt>remove()</tt> method does not return anything.</li>\n<li><tt>list_commands(start, end, command, status, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Command</tt> objects. All args are optional.</li>\n<li><tt>send_command(command_name, parameters, lifetime, timestamp, status, result)</tt>\nmethod returns <tt>Command</tt> object. Only <tt>command_name</tt> is required.</li>\n<li><tt>list_notifications(start, end, notification, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Notification</tt> objects. All args are\noptional.</li>\n<li><tt>send_notification(notification_name, parameters, timestamp)</tt>\nmethod returns <tt>Notification</tt> object. Only <tt>notification_name</tt> is\nrequired.</li>\n</ul>\n</div>\n<div id=\"command-object\">\n<h5>Command object</h5>\n<p>Properties:</p>\n<ul>\n<li><tt>id</tt> (read only)</li>\n<li><tt>user_id</tt> (read only)</li>\n<li><tt>command</tt> (read only)</li>\n<li><tt>parameters</tt> (read only)</li>\n<li><tt>lifetime</tt> (read only)</li>\n<li><tt>timestamp</tt> (read only)</li>\n<li><tt>last_updated</tt> (read only)</li>\n<li><tt>status</tt></li>\n<li><tt>result</tt></li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><tt>save()</tt> method does not return anything.</li>\n</ul>\n</div>\n<div id=\"notification-object\">\n<h5>Notification object</h5>\n<p>Properties:</p>\n<ul>\n<li><tt>device_id</tt> (read only)</li>\n<li><tt>id</tt> (read only)</li>\n<li><tt>notification</tt> (read only)</li>\n<li><tt>parameters</tt> (read only)</li>\n<li><tt>timestamp</tt> (read only)</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n<span class=\"n\">device_id</span> <span class=\"o\">=</span> <span class=\"s1\">'example-device'</span>\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">put_device</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'new-device-name'</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">}</span>\n<span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">list_devices</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">device</span> <span class=\"ow\">in</span> <span class=\"n\">devices</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Device: </span><span class=\"si\">%s</span><span class=\"s1\">, name: </span><span class=\"si\">%s</span><span class=\"s1\">, data: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                                              <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))</span>\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"networks\">\n<h4>Networks</h4>\n<p><tt>list_networks(name, name_pattern, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Network</tt> objects. All args are optional.</p>\n<p><tt>get_network(network_id)</tt> method returns <tt>Network</tt> object.</p>\n<p><tt>create_network(name, description)</tt> method returns <tt>Network</tt> object.</p>\n<div id=\"network-object\">\n<h5>Network object</h5>\n<p>Properties:</p>\n<ul>\n<li><tt>id</tt> (read only)</li>\n<li><tt>name</tt></li>\n<li><tt>description</tt></li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><tt>save()</tt> method does not return anything.</li>\n<li><tt>remove(force)</tt> method does not return anything. All args are\noptional.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n<span class=\"n\">network_name</span> <span class=\"o\">=</span> <span class=\"s1\">'example-name'</span>\n<span class=\"n\">network_description</span> <span class=\"o\">=</span> <span class=\"s1\">'example-description'</span>\n<span class=\"n\">network</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">create_network</span><span class=\"p\">(</span><span class=\"n\">network_name</span><span class=\"p\">,</span> <span class=\"n\">network_description</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"device-types\">\n<h4>Device types</h4>\n<p><tt>list_device_types(name, name_pattern, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>DeviceType</tt> objects. All args are optional.</p>\n<p><tt>get_device_type(device_type_id)</tt> method returns <tt>DeviceType</tt>\nobject.</p>\n<p><tt>create_device_type(name, description)</tt> method returns <tt>DeviceType</tt>\nobject.</p>\n<div id=\"devicetype-object\">\n<h5>DeviceType object</h5>\n<p>Properties:</p>\n<ul>\n<li><tt>id</tt> (read only)</li>\n<li><tt>name</tt></li>\n<li><tt>description</tt></li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><tt>save()</tt> method does not return anything.</li>\n<li><tt>remove(force)</tt> method does not return anything. All args are\noptional.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n<span class=\"n\">device_type_name</span> <span class=\"o\">=</span> <span class=\"s1\">'example-name'</span>\n<span class=\"n\">device_type_description</span> <span class=\"o\">=</span> <span class=\"s1\">'example-description'</span>\n<span class=\"n\">device_type</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">create_device_type</span><span class=\"p\">(</span><span class=\"n\">device_type_name</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">device_type_description</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">device_type</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"users\">\n<h4>Users</h4>\n<p><tt>list_users(login, login_pattern, role, status, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>User</tt> objects. All args are optional.</p>\n<p><tt>get_current_user()</tt> method returns <tt>User</tt> object.</p>\n<p><tt>get_user(user_id)</tt> method returns <tt>User</tt> object.</p>\n<p><tt>create_user(self, login, password, role, data, all_device_types_available)</tt>\nmethod returns <tt>User</tt> object.</p>\n<div id=\"user-object\">\n<h5>User object</h5>\n<p>Properties:</p>\n<ul>\n<li><tt>id</tt> (read only)</li>\n<li><tt>login</tt> (read only)</li>\n<li><tt>last_login</tt> (read only)</li>\n<li><tt>intro_reviewed</tt> (read only)</li>\n<li><tt>all_device_types_available</tt> (read only)</li>\n<li><tt>role</tt></li>\n<li><tt>status</tt></li>\n<li><tt>data</tt></li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><tt>save()</tt> method does not return anything.</li>\n<li><tt>update_password(password)</tt> method does not return anything.</li>\n<li><tt>remove()</tt> method does not return anything.</li>\n<li><tt>list_networks()</tt> method Returns list of <tt>Network</tt> objects.</li>\n<li><tt>list_device_types()</tt> method Returns list of <tt>DeviceType</tt>\nobjects.</li>\n<li><tt>assign_network(network_id)</tt> method does not return anything.</li>\n<li><tt>unassign_network(network_id)</tt> method does not return anything.</li>\n<li><tt>assign_device_type(device_type_id)</tt> method does not return\nanything.</li>\n<li><tt>unassign_device_type(device_type_id)</tt> method does not return\nanything.</li>\n<li><tt>allow_all_device_types()</tt> method does not return anything.</li>\n<li><tt>disallow_all_device_types()</tt> method does not return anything.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHiveApi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">devicehive.user</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">device_hive_api</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHiveApi</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n<span class=\"n\">login</span> <span class=\"o\">=</span> <span class=\"s1\">'example-login'</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s1\">'example-password'</span>\n<span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">CLIENT_ROLE</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">}</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">device_hive_api</span><span class=\"o\">.</span><span class=\"n\">create_user</span><span class=\"p\">(</span><span class=\"n\">login</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">role</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"creating-a-client-using-devicehive-class\">\n<h3>Creating a client using DeviceHive class</h3>\n<p>First of all you need to create custom <tt>Handler</tt> class.</p>\n<p>Example of creating custom <tt>Handler</tt> class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n<p><tt>handle_connect</tt> is the only one required method. If you want to\nhandle server events you\u2019ll heed to implement <tt>handle_command_insert</tt>,\n<tt>handle_command_update</tt> and <tt>handle_notification</tt> methods.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">device_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'example-device-1'</span><span class=\"p\">,</span> <span class=\"s1\">'example-device-2'</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">device_id</span> <span class=\"ow\">in</span> <span class=\"n\">device_ids</span><span class=\"p\">:</span>\n            <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">put_device</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span>\n            <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">subscribe_insert_commands</span><span class=\"p\">()</span>\n            <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">subscribe_update_commands</span><span class=\"p\">()</span>\n            <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">subscribe_notifications</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_notification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">notification</span><span class=\"o\">.</span><span class=\"n\">notification</span><span class=\"p\">)</span>\n</pre>\n<p>The second step is to use <tt>DeviceHive</tt> class for creating connection\nto the server.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHive</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">device_ids</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'example-device-1'</span><span class=\"p\">,</span> <span class=\"s1\">'example-device-2'</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">device_id</span> <span class=\"ow\">in</span> <span class=\"n\">device_ids</span><span class=\"p\">:</span>\n            <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">put_device</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span>\n            <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">subscribe_insert_commands</span><span class=\"p\">()</span>\n            <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">subscribe_update_commands</span><span class=\"p\">()</span>\n            <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">subscribe_notifications</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_notification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">notification</span><span class=\"o\">.</span><span class=\"n\">notification</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">dh</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHive</span><span class=\"p\">(</span><span class=\"n\">SimpleHandler</span><span class=\"p\">)</span>\n<span class=\"n\">dh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n</pre>\n<div id=\"custom-handler-args\">\n<h4>Custom handler args</h4>\n<p>If you need to initialize your handler you can do it the next way:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHive</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">,</span> <span class=\"n\">some_arg</span><span class=\"p\">,</span> <span class=\"n\">some_kwarg</span><span class=\"p\">):</span>\n        <span class=\"n\">Handler</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_some_arg</span> <span class=\"o\">=</span> <span class=\"n\">some_arg</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_some_kwarg</span> <span class=\"o\">=</span> <span class=\"n\">some_kwarg</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n\n<span class=\"n\">device_hive</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHive</span><span class=\"p\">(</span><span class=\"n\">SimpleHandler</span><span class=\"p\">,</span> <span class=\"s1\">'some_arg'</span><span class=\"p\">,</span> <span class=\"n\">some_kwarg</span><span class=\"o\">=</span><span class=\"s1\">'some_kwarg'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id1\">\n<h4>Websocket protocol</h4>\n<p>If you want to use <tt>Websocket</tt> protocol you need only to specify the\nurl:</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n</pre>\n</div>\n<div id=\"id2\">\n<h4>Authentication</h4>\n<p>There are three ways of initial authentication:</p>\n<ul>\n<li>Using refresh token</li>\n<li>Using access token</li>\n<li>Using login and password</li>\n</ul>\n<p>Examples:</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n<span class=\"n\">device_hive</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'SOME_REFRESH_TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n<span class=\"n\">device_hive</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'SOME_ACCESS_TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n<span class=\"n\">device_hive</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">login</span><span class=\"o\">=</span><span class=\"s1\">'SOME_LOGIN'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'SOME_PASSWORD'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"api\">\n<h3>API</h3>\n<p>All api calls may be done via <tt>api</tt> object. This object available\ninside custom handler with <tt>self.api</tt> property.</p>\n<div id=\"api-info\">\n<h4>API info</h4>\n<p><tt>self.api.get_info()</tt> method returns <tt>dict</tt>. <tt>get_info</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.get_cluster_info()</tt> method returns <tt>dict</tt>.\n<tt>get_cluster_info</tt> method of <tt>DeviceHiveApi</tt> class is the wrapper on\ntop of this call.</p>\n<p>See the description of <tt>DeviceHiveApi</tt> <a href=\"#info\" rel=\"nofollow\">info</a> methods for\nmore details.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">)</span>\n        <span class=\"n\">cluster_info</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_cluster_info</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cluster_info</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"api-properties\">\n<h4>API properties</h4>\n<p><tt>self.api.get_property(name)</tt> method returns <tt>dict</tt>.\n<tt>get_property</tt> method of <tt>DeviceHiveApi</tt> class is the wrapper on top\nof this call.</p>\n<p><tt>self.api.set_property(name, value)</tt> method returns entity version.\n<tt>set_property</tt> method of <tt>DeviceHiveApi</tt> class is the wrapper on top\nof this call.</p>\n<p><tt>self.api.delete_property(name)</tt> method does not return anything.\n<tt>delete_property</tt> method of <tt>DeviceHiveApi</tt> class is the wrapper on\ntop of this call.</p>\n<p>See the description of <tt>DeviceHiveApi</tt> <a href=\"#properties\" rel=\"nofollow\">property</a>\nmethods for more details.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'user.login.lastTimeoutSent'</span>\n        <span class=\"n\">prop</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">prop</span><span class=\"p\">)</span>\n        <span class=\"n\">entity_version</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_property</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">entity_version</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">delete_property</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"api-tokens\">\n<h4>API tokens</h4>\n<p><tt>self.api.create_token(user_id, expiration, actions, network_ids, device_ids)</tt>\nmethod returns <tt>dict</tt>. <tt>create_token</tt> method of <tt>DeviceHiveApi</tt>\nclass is the wrapper on top of this call.</p>\n<p><tt>self.api.refresh_token()</tt> method refreshes the access token and\nreturns it. <tt>refresh_token</tt> method of <tt>DeviceHiveApi</tt> class is the\nwrapper on top of this call.</p>\n<p>See the description of <tt>DeviceHiveApi</tt> <a href=\"#tokens\" rel=\"nofollow\">token</a> methods for\nmore details.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">create_token</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">)</span>\n        <span class=\"n\">access_token</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">refresh_token</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"api-commands-subscription\">\n<h4>API commands subscription</h4>\n<p><tt>self.api.subscribe_insert_commands(device_id, network_ids, device_type_ids, names, timestamp)</tt>\nmethod returns <tt>CommandsSubscription</tt> object.</p>\n<p><tt>self.api.subscribe_update_commands(device_id, network_ids, device_type_ids, names, timestamp)</tt>\nmethod returns <tt>CommandsSubscription</tt> object.</p>\n<div id=\"api-commandssubscription-object\">\n<h5>API CommandsSubscription object</h5>\n<p>Properties:</p>\n<ul>\n<li><tt>id</tt> (read only)</li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><tt>remove()</tt> method does not return anything.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n    <span class=\"n\">insert_subscription</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">update_subscription</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">device_id</span> <span class=\"o\">=</span> <span class=\"s1\">'example-device'</span>\n        <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">put_device</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span>\n        <span class=\"n\">command_name</span> <span class=\"o\">=</span> <span class=\"s1\">'example-command'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">insert_subscription</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">subscribe_insert_commands</span><span class=\"p\">(</span>\n            <span class=\"n\">device_id</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">command_name</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_subscription</span><span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">subscribe_update_commands</span><span class=\"p\">(</span>\n            <span class=\"n\">device_id</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">command_name</span><span class=\"p\">])</span>\n        <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">send_command</span><span class=\"p\">(</span><span class=\"n\">command_name</span><span class=\"p\">)</span>\n        <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">'new-status'</span>\n        <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Command insert: </span><span class=\"si\">%s</span><span class=\"s1\">, status: </span><span class=\"si\">%s</span><span class=\"s1\">.'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">,</span>\n                                                   <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Command update: </span><span class=\"si\">%s</span><span class=\"s1\">, status: </span><span class=\"si\">%s</span><span class=\"s1\">.'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">,</span>\n                                                   <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">insert_subscription</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update_subscription</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"api-notifications-subscription\">\n<h4>API notifications subscription</h4>\n<p><tt>self.api.subscribe_notifications(device_id, network_ids, device_type_ids, names, timestamp)</tt>\nmethod returns <tt>NotificationsSubscription</tt> object.</p>\n<div id=\"api-notificationssubscription-object\">\n<h5>API NotificationsSubscription object</h5>\n<p>Properties:</p>\n<ul>\n<li><tt>id</tt> (read only)</li>\n</ul>\n<p>Methods:</p>\n<ul>\n<li><tt>remove()</tt> method does not return anything.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n    <span class=\"n\">notification_subscription</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">device_id</span> <span class=\"o\">=</span> <span class=\"s1\">'example-device'</span>\n        <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">put_device</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span>\n        <span class=\"n\">notification_name</span> <span class=\"o\">=</span> <span class=\"s1\">'example-notification'</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">notification_subscription</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">subscribe_notifications</span><span class=\"p\">(</span>\n            <span class=\"n\">device_id</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">notification_name</span><span class=\"p\">])</span>\n        <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">send_notification</span><span class=\"p\">(</span><span class=\"n\">notification_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_notification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Notification: </span><span class=\"si\">%s</span><span class=\"s1\">.'</span> <span class=\"o\">%</span> <span class=\"n\">notification</span><span class=\"o\">.</span><span class=\"n\">notification</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">notification_subscription</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"api-devices\">\n<h4>API devices</h4>\n<p><tt>self.api.list_devices(name, name_pattern, network_id, network_name, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Device</tt> objects. <tt>list_devices</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.get_device(device_id)</tt> method returns <tt>Device</tt> object.\n<tt>get_device</tt> method of <tt>DeviceHiveApi</tt> class is the wrapper on top\nof this call.</p>\n<p><tt>self.api.put_device(device_id, name, data, network_id, device_type_id, is_blocked)</tt>\nmethod does not return anything. <tt>put_device</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.list_commands(device_id, start, end, command, status, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Command</tt> objects. <tt>list_commands</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.send_command(device_id, command_name, parameters, lifetime, timestamp, status, result)</tt>\nmethod returns <tt>Command</tt> object. <tt>send_command</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.list_notifications(device_id, start, end, notification, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Notification</tt> objects. <tt>list_notifications</tt>\nmethod of <tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.send_notification(device_id, notification_name, parameters, timestamp)</tt>\nmethod returns <tt>Notification</tt> object. <tt>send_notification</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p>See the description of <tt>DeviceHiveApi</tt> <a href=\"#devices\" rel=\"nofollow\">device</a> methods\nfor more details.</p>\n<div id=\"api-device-object\">\n<h5>API device object</h5>\n<p>API device object has the same properties as <a href=\"#device-object\" rel=\"nofollow\">device\nobject</a>.</p>\n<p>API device object has all methods from <a href=\"#device-object\" rel=\"nofollow\">device\nobject</a> and extends these methods with:</p>\n<ul>\n<li><tt>subscribe_insert_commands(names, timestamp)</tt> method returns\n<tt>CommandsSubscription</tt> object. All args are optional.</li>\n<li><tt>subscribe_update_commands(names, timestamp)</tt> method returns\n<tt>CommandsSubscription</tt> object. All args are optional.</li>\n<li><tt>subscribe_notifications(names, timestamp)</tt> method returns\n<tt>NotificationsSubscription</tt> object. All args are optional.</li>\n</ul>\n</div>\n<div id=\"api-command-object\">\n<h5>API command object</h5>\n<p>API command object has the same properties as <a href=\"#command-object\" rel=\"nofollow\">command\nobject</a>.</p>\n<p>API command object has the same methods as <a href=\"#command-object\" rel=\"nofollow\">command\nobject</a>.</p>\n</div>\n<div id=\"api-notification-object\">\n<h5>API notification object</h5>\n<p>API notification object has the same properties as <a href=\"#notification-object\" rel=\"nofollow\">notification\nobject</a></p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">device_id</span> <span class=\"o\">=</span> <span class=\"s1\">'example-device'</span>\n        <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">put_device</span><span class=\"p\">(</span><span class=\"n\">device_id</span><span class=\"p\">)</span>\n        <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'new-device-name'</span>\n        <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">}</span>\n        <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">list_devices</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">device</span> <span class=\"ow\">in</span> <span class=\"n\">devices</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Device: </span><span class=\"si\">%s</span><span class=\"s1\">, name: </span><span class=\"si\">%s</span><span class=\"s1\">, data: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))</span>\n            <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"api-networks\">\n<h4>API networks</h4>\n<p><tt>self.api.list_networks(name, name_pattern, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Network</tt> objects. <tt>list_networks</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.get_network(network_id)</tt> method returns <tt>Network</tt> object.\n<tt>get_network</tt> method of <tt>DeviceHiveApi</tt> class is the wrapper on top\nof this call.</p>\n<p><tt>self.api.create_network(name, description)</tt> method returns\n<tt>Network</tt> object. <tt>create_network</tt> method of <tt>DeviceHiveApi</tt> class\nis the wrapper on top of this call.</p>\n<p>See the description of <tt>DeviceHiveApi</tt> <a href=\"#networks\" rel=\"nofollow\">network</a> methods\nfor more details.</p>\n<div id=\"api-network-object\">\n<h5>API network object</h5>\n<p>API network object has the same properties as <a href=\"#network-object\" rel=\"nofollow\">network\nobject</a>.</p>\n<p>API network object has all methods from <a href=\"#network-object\" rel=\"nofollow\">network\nobject</a> and extends these methods with:</p>\n<ul>\n<li><tt>list_devices(name, name_pattern, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Device</tt> objects. All args are optional.</li>\n<li><tt>subscribe_insert_commands(names, timestamp)</tt> method returns\n<tt>CommandsSubscription</tt> object. All args are optional.</li>\n<li><tt>subscribe_update_commands(names, timestamp)</tt> method returns\n<tt>CommandsSubscription</tt> object. All args are optional.</li>\n<li><tt>subscribe_notifications(names, timestamp)</tt> method returns\n<tt>NotificationsSubscription</tt> object. All args are optional.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">network_name</span> <span class=\"o\">=</span> <span class=\"s1\">'example-name'</span>\n        <span class=\"n\">network_description</span> <span class=\"o\">=</span> <span class=\"s1\">'example-description'</span>\n        <span class=\"n\">network</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">create_network</span><span class=\"p\">(</span><span class=\"n\">network_name</span><span class=\"p\">,</span> <span class=\"n\">network_description</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"api-device-types\">\n<h4>API device types</h4>\n<p><tt>self.api.list_device_types(name, name_pattern, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>DeviceType</tt> objects. <tt>list_device_types</tt>\nmethod of <tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.get_device_type(device_type_id)</tt> method returns\n<tt>DeviceType</tt> object. <tt>get_device_type</tt> method of <tt>DeviceHiveApi</tt>\nclass is the wrapper on top of this call.</p>\n<p><tt>self.api.create_device_type(name, description)</tt> method returns\n<tt>DeviceType</tt> object. <tt>create_device_type</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p>See the description of <tt>DeviceHiveApi</tt> <a href=\"#device-types\" rel=\"nofollow\">device\ntypes</a> methods for more details.</p>\n<div id=\"api-device-type-object\">\n<h5>API device type object</h5>\n<p>API device type object has the same properties as <a href=\"#devicetype-object\" rel=\"nofollow\">device type\nobject</a>.</p>\n<p>API device type object has all methods from <a href=\"#devicetype-object\" rel=\"nofollow\">device type\nobject</a> and extends these methods with:</p>\n<ul>\n<li><tt>list_devices(name, name_pattern, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>Device</tt> objects. All args are optional.</li>\n<li><tt>subscribe_insert_commands(names, timestamp)</tt> method returns\n<tt>CommandsSubscription</tt> object. All args are optional.</li>\n<li><tt>subscribe_update_commands(names, timestamp)</tt> method returns\n<tt>CommandsSubscription</tt> object. All args are optional.</li>\n<li><tt>subscribe_notifications(names, timestamp)</tt> method returns\n<tt>NotificationsSubscription</tt> object. All args are optional.</li>\n</ul>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">device_type_name</span> <span class=\"o\">=</span> <span class=\"s1\">'example-name'</span>\n        <span class=\"n\">device_type_description</span> <span class=\"o\">=</span> <span class=\"s1\">'example-description'</span>\n        <span class=\"n\">device_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">create_device_type</span><span class=\"p\">(</span><span class=\"n\">device_type_name</span><span class=\"p\">,</span> <span class=\"n\">device_type_description</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">device_type</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"api-users\">\n<h4>API users</h4>\n<p><tt>self.api.list_users(login, login_pattern, role, status, sort_field, sort_order, take, skip)</tt>\nmethod returns list of <tt>User</tt> objects. <tt>list_users</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p><tt>self.api.get_current_user()</tt> method returns <tt>User</tt> object.\n<tt>get_current_user</tt> method of <tt>DeviceHiveApi</tt> class is the wrapper on\ntop of this call.</p>\n<p><tt>self.api.get_user(user_id)</tt> method returns <tt>User</tt> object.\n<tt>get_user</tt> method of <tt>DeviceHiveApi</tt> class is the wrapper on top of\nthis call.</p>\n<p><tt>self.api.create_user(self, login, password, role, data, all_device_types_available)</tt>\nmethod returns <tt>User</tt> object. <tt>create_user</tt> method of\n<tt>DeviceHiveApi</tt> class is the wrapper on top of this call.</p>\n<p>See the description of <tt>DeviceHiveApi</tt> <a href=\"#users\" rel=\"nofollow\">user</a> methods for\nmore details.</p>\n<div id=\"api-user-object\">\n<h5>API user object</h5>\n<p>API user object has the same properties as <a href=\"#user-object\" rel=\"nofollow\">user\nobject</a>.</p>\n<p>API user object has the same methods as <a href=\"#user-object\" rel=\"nofollow\">user object</a>.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">devicehive.user</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">login</span> <span class=\"o\">=</span> <span class=\"s1\">'example-login'</span>\n        <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s1\">'example-password'</span>\n        <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">CLIENT_ROLE</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"s1\">'value'</span><span class=\"p\">}</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">create_user</span><span class=\"p\">(</span><span class=\"n\">login</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">role</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n</div>\n<div id=\"api-extended-example\">\n<h3>API extended example</h3>\n<p>Here we will create one endpoint which sends notifications and other\nendpoint which receives these notifications.</p>\n<p>On the first we will create <tt>receiver.py</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHive</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ReceiverHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">,</span> <span class=\"n\">device_id</span><span class=\"o\">=</span><span class=\"s1\">'simple-example-device'</span><span class=\"p\">,</span>\n                 <span class=\"n\">accept_command_name</span><span class=\"o\">=</span><span class=\"s1\">'accept_notifications'</span><span class=\"p\">):</span>\n        <span class=\"n\">Handler</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device_id</span> <span class=\"o\">=</span> <span class=\"n\">device_id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accept_command_name</span> <span class=\"o\">=</span> <span class=\"n\">accept_command_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">put_device</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device_id</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span><span class=\"o\">.</span><span class=\"n\">subscribe_insert_commands</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accept_command_name</span><span class=\"p\">])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span><span class=\"o\">.</span><span class=\"n\">subscribe_notifications</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Accept command \"</span><span class=\"si\">%s</span><span class=\"s1\">\"'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accept_command_name</span><span class=\"p\">)</span>\n        <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"s1\">'accepted'</span>\n        <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_notification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Notification \"</span><span class=\"si\">%s</span><span class=\"s1\">\" received'</span> <span class=\"o\">%</span> <span class=\"n\">notification</span><span class=\"o\">.</span><span class=\"n\">notification</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground.devicehive.com/api/websocket'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">dh</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHive</span><span class=\"p\">(</span><span class=\"n\">ReceiverHandler</span><span class=\"p\">)</span>\n<span class=\"n\">dh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n</pre>\n<p>On the next step we will create <tt>sender.py</tt></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">devicehive</span> <span class=\"kn\">import</span> <span class=\"n\">DeviceHive</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SenderHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">,</span> <span class=\"n\">device_id</span><span class=\"o\">=</span><span class=\"s1\">'simple-example-device'</span><span class=\"p\">,</span>\n                 <span class=\"n\">accept_command_name</span><span class=\"o\">=</span><span class=\"s1\">'accept_notifications'</span><span class=\"p\">,</span>\n                 <span class=\"n\">num_notifications</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">Handler</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device_id</span> <span class=\"o\">=</span> <span class=\"n\">device_id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accept_command_name</span> <span class=\"o\">=</span> <span class=\"n\">accept_command_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_notifications</span> <span class=\"o\">=</span> <span class=\"n\">num_notifications</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_send_notifications</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">num_notification</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_num_notifications</span><span class=\"p\">):</span>\n            <span class=\"n\">notification</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">-notification'</span> <span class=\"o\">%</span> <span class=\"n\">num_notification</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span><span class=\"o\">.</span><span class=\"n\">send_notification</span><span class=\"p\">(</span><span class=\"n\">notification</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sending notification \"</span><span class=\"si\">%s</span><span class=\"s1\">\"'</span> <span class=\"o\">%</span> <span class=\"n\">notification</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">get_device</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device_id</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span><span class=\"o\">.</span><span class=\"n\">send_command</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accept_command_name</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Sending command \"</span><span class=\"si\">%s</span><span class=\"s1\">\"'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accept_command_name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_device</span><span class=\"o\">.</span><span class=\"n\">subscribe_update_commands</span><span class=\"p\">([</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accept_command_name</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"s1\">'accepted'</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Command \"</span><span class=\"si\">%s</span><span class=\"s1\">\" accepted'</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_accept_command_name</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_send_notifications</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground.devicehive.com/api/rest'</span>\n<span class=\"n\">refresh_token</span> <span class=\"o\">=</span> <span class=\"s1\">'SOME_REFRESH_TOKEN'</span>\n<span class=\"n\">dh</span> <span class=\"o\">=</span> <span class=\"n\">DeviceHive</span><span class=\"p\">(</span><span class=\"n\">SenderHandler</span><span class=\"p\">)</span>\n<span class=\"n\">dh</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"n\">refresh_token</span><span class=\"p\">)</span>\n</pre>\n<p>Run <tt>python receiver.py</tt> in the first terminal. And\n<tt>python sender.py</tt> in the second. The order of run is important.\n<tt>receiver.py</tt> must be started first.</p>\n</div>\n<div id=\"docker-tests\">\n<h3>Docker tests</h3>\n<div id=\"build-image\">\n<h4>Build image</h4>\n<pre>docker build -f Dockerfile.tests -t devicehive-tests .\n</pre>\n</div>\n<div id=\"run-tests\">\n<h4>Run tests</h4>\n<p>You can run tests with refresh_token by setting <tt>ADMIN_REFRESH_TOKEN</tt>\nand/or <tt>CLIENT_REFRESH_TOKEN</tt> variable:</p>\n<pre>docker run -it -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' devicehive-tests\n</pre>\n<p>Or with access_token by setting <tt>ADMIN_ACCESS_TOKEN</tt> and/or\n<tt>CLIENT_ACCESS_TOKEN</tt> variable:</p>\n<pre>docker run -it -e ADMIN_ACCESS_TOKEN='SOME_ADMIN_ACCESS_TOKEN' devicehive-tests\n</pre>\n<p>Or with user login and password by setting <tt>ADMIN_LOGIN</tt> and\n<tt>ADMIN_PASSWORD</tt> for admin account and/or <tt>CLIENT_LOGIN</tt> and\n<tt>CLIENT_PASSWORD</tt> for client account.</p>\n<pre>docker run -it -e ADMIN_LOGIN='SOME_ADMIN_LOGIN' -e ADMIN_PASSWORD='SOME_ADMIN_PASSWORD' devicehive-tests\n</pre>\n<p>To run tests with enabled requests logging you need to change\n<tt>LOG_LEVEL</tt> variable:</p>\n<pre>docker run -it -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' -e LOG_LEVEL='DEBUG' devicehive-tests\n</pre>\n<p>To run the specific test you need to set <tt>TEST</tt> variable:</p>\n<pre>docker run -it -e TEST=test_api.py::test_get_info -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' devicehive-tests\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3980883, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "fd47cba0374ca1cb282a0bbe5ebd1cc5", "sha256": "902343bd8a48b162b419b21d9e7e35270a6fa471a5a98b0e694300e76f504068"}, "downloads": -1, "filename": "devicehive-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fd47cba0374ca1cb282a0bbe5ebd1cc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24649, "upload_time": "2017-08-22T11:49:35", "upload_time_iso_8601": "2017-08-22T11:49:35.830615Z", "url": "https://files.pythonhosted.org/packages/40/fc/adce1ac83671395eba3a35fbcc58d0e8116f0cbc66c78095a49b90ca4ff6/devicehive-0.0.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "ce13628adbfd4312049a9e4a69dffe9b", "sha256": "aa6515da703338fc1e34d4d1b2e5e89f9b18bca5c5b58de6ac3c1534fe0af71c"}, "downloads": -1, "filename": "devicehive-2.0.0.tar.gz", "has_sig": false, "md5_digest": "ce13628adbfd4312049a9e4a69dffe9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24636, "upload_time": "2017-08-22T11:51:45", "upload_time_iso_8601": "2017-08-22T11:51:45.589842Z", "url": "https://files.pythonhosted.org/packages/85/72/d42189201c68cfe706a8317d6b2d41fadaeb1135485357d7472aa2e233a2/devicehive-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "3ff9a24698c454dcf47f42d43efda0de", "sha256": "151691aa49fc9867c88e1db6ba4d3178e87d8a316a98a5d953d94504f5c34b4e"}, "downloads": -1, "filename": "devicehive-2.0.1.tar.gz", "has_sig": false, "md5_digest": "3ff9a24698c454dcf47f42d43efda0de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24912, "upload_time": "2017-08-25T14:36:16", "upload_time_iso_8601": "2017-08-25T14:36:16.831081Z", "url": "https://files.pythonhosted.org/packages/07/de/8f6611cf06e1c87993d14b6d78ecd3883fd696338c25056bade84a0b45ef/devicehive-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "fca2df896d52cb9460b0383515743315", "sha256": "3b7db204c9ddf8547ece080259a235ead9c42676e277e77ed06b687178906dd7"}, "downloads": -1, "filename": "devicehive-2.0.2.tar.gz", "has_sig": false, "md5_digest": "fca2df896d52cb9460b0383515743315", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25099, "upload_time": "2017-09-20T12:51:32", "upload_time_iso_8601": "2017-09-20T12:51:32.329032Z", "url": "https://files.pythonhosted.org/packages/77/58/22d5811b6103291584027de25b0775310e64ed032049a56580fc6ce42a17/devicehive-2.0.2.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "56fa607c386675733c9e5718e8adcb69", "sha256": "e5709a0b068960c76b95e3212584b3b1b9b5a7a0ae8ebf18db0a6d69bb0db5cf"}, "downloads": -1, "filename": "devicehive-2.1.0.tar.gz", "has_sig": false, "md5_digest": "56fa607c386675733c9e5718e8adcb69", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29421, "upload_time": "2017-10-12T14:59:31", "upload_time_iso_8601": "2017-10-12T14:59:31.797996Z", "url": "https://files.pythonhosted.org/packages/ea/d1/9cb571d304630cb422b2c5be67c46566b801c06306db3079848fb4325ff2/devicehive-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "8c24ef87c0a53fa139990f6fc1e1ed66", "sha256": "f8317168206175d8a5b9b6f4edf5260359c74731de3aa72746e4a444651986fc"}, "downloads": -1, "filename": "devicehive-2.1.1.tar.gz", "has_sig": false, "md5_digest": "8c24ef87c0a53fa139990f6fc1e1ed66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29459, "upload_time": "2017-11-22T11:25:16", "upload_time_iso_8601": "2017-11-22T11:25:16.824008Z", "url": "https://files.pythonhosted.org/packages/72/6f/93206fd6c0baf8ba2f8bffd3e2de69b59278387bd7252a99cc89914d0dcc/devicehive-2.1.1.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "ced7e5bf3a9fbdd1491078014bb84163", "sha256": "70270c1922d38d029e979d92e9a0d6040cba6840d13b4cd7529fc0a2d8dad3f4"}, "downloads": -1, "filename": "devicehive-2.1.2.tar.gz", "has_sig": false, "md5_digest": "ced7e5bf3a9fbdd1491078014bb84163", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32281, "upload_time": "2018-01-19T14:55:08", "upload_time_iso_8601": "2018-01-19T14:55:08.249681Z", "url": "https://files.pythonhosted.org/packages/b6/61/4abe6dd2331f2f7eeab9556857ffc965f8c5f5a75b7999ef443aaa254a01/devicehive-2.1.2.tar.gz", "yanked": false}], "2.1.3": [{"comment_text": "", "digests": {"md5": "72b1776af65cf138d0b4a551049093dd", "sha256": "c8fc4267555a4fd03dfb6d515a3b8f598416980f139bbe51812200e2efa73cc4"}, "downloads": -1, "filename": "devicehive-2.1.3.tar.gz", "has_sig": false, "md5_digest": "72b1776af65cf138d0b4a551049093dd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32304, "upload_time": "2018-03-05T13:42:46", "upload_time_iso_8601": "2018-03-05T13:42:46.175747Z", "url": "https://files.pythonhosted.org/packages/07/e1/ac46aac34a68f11bd5dbec68046c23f87e8010117f87a86eb890402d3632/devicehive-2.1.3.tar.gz", "yanked": false}], "2.1.4": [{"comment_text": "", "digests": {"md5": "0b91fd5e652b6e5066dc12f2f59f83df", "sha256": "fd263f396058f4c474831c2d53ee4ab86e1fdaedd22214d268b84e9c4220bba5"}, "downloads": -1, "filename": "devicehive-2.1.4.tar.gz", "has_sig": false, "md5_digest": "0b91fd5e652b6e5066dc12f2f59f83df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33822, "upload_time": "2018-06-05T10:45:28", "upload_time_iso_8601": "2018-06-05T10:45:28.051736Z", "url": "https://files.pythonhosted.org/packages/14/1f/ab5107214945e1c7ccb3fd4ab64b1517b2c3d4f53aca896b03220f265649/devicehive-2.1.4.tar.gz", "yanked": false}], "2.1.5": [{"comment_text": "", "digests": {"md5": "8c2ca8844f30b510cfc6cc858b31f1a5", "sha256": "9ea76185b51fcb0dc36119799ae49515ddc5901cb2b1f0bdf63a3bccfe2fabb4"}, "downloads": -1, "filename": "devicehive-2.1.5.tar.gz", "has_sig": false, "md5_digest": "8c2ca8844f30b510cfc6cc858b31f1a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34173, "upload_time": "2018-06-18T09:35:17", "upload_time_iso_8601": "2018-06-18T09:35:17.380270Z", "url": "https://files.pythonhosted.org/packages/4e/42/8f4c07dadf7001e9640436e105df1a44c2828e90a87f26e3f516592c47f5/devicehive-2.1.5.tar.gz", "yanked": false}], "2.1.6": [{"comment_text": "", "digests": {"md5": "7b313183bc8dd6b58dfeeeefd76d90b1", "sha256": "b53450dbd9e2dcd8e95fde552f09416ba63f88a72adcb705a02268b998d52fbb"}, "downloads": -1, "filename": "devicehive-2.1.6.tar.gz", "has_sig": false, "md5_digest": "7b313183bc8dd6b58dfeeeefd76d90b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34119, "upload_time": "2018-06-20T10:42:22", "upload_time_iso_8601": "2018-06-20T10:42:22.832959Z", "url": "https://files.pythonhosted.org/packages/77/7c/b11d3f9e7397be9ead11a9bc5c9fd42de7a83a1d98693896f8d450353a3d/devicehive-2.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b313183bc8dd6b58dfeeeefd76d90b1", "sha256": "b53450dbd9e2dcd8e95fde552f09416ba63f88a72adcb705a02268b998d52fbb"}, "downloads": -1, "filename": "devicehive-2.1.6.tar.gz", "has_sig": false, "md5_digest": "7b313183bc8dd6b58dfeeeefd76d90b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34119, "upload_time": "2018-06-20T10:42:22", "upload_time_iso_8601": "2018-06-20T10:42:22.832959Z", "url": "https://files.pythonhosted.org/packages/77/7c/b11d3f9e7397be9ead11a9bc5c9fd42de7a83a1d98693896f8d450353a3d/devicehive-2.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:53 2020"}