{"info": {"author": "jamesqin", "author_email": "jamesqin@vip.qq.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# Tiny DataSet\n\n## What is TinyDataSet?\ntinydataset is two dememsional array, which implements with a list of dictionaries, generated by mysql query action generally.\n```\ntable = [\n    {'stat_date': '2020-01-01', 'k1':'a', 'k2':1},\n    {'stat_date': '2020-01-02', 'k1':'b', 'k2':2},\n    {'stat_date': '2020-01-03', 'k1':'c', 'k2':3}\n]\n```\nGenerally speaking, you may fetch a list of dictionaries after execute mysql query like this:\n```\nconn = pymysql.connect(...)\nconn.cursor(cursor=pymysql.cursors.DictCursor)\ncursor.execute(\"SELECT stat_date,k1,k2,k3 FROM example_table LIMIT 10\")\ncursor.fetchall()\ncursor.close()\nconn.close()\n```\nThis package provides some functions for processing table data structures\n\n\n## Programming Language\n- python 2.7\n- python 3.7\n\n## Install\n```\npip install tinydataset\n```\n\n## Quick Start\n```\nfrom tinydataset import *\n\nclass Test_TinyDataSet(unittest.TestCase):\n\n    def test_VLookupCol(self):\n        table = [\n            {'stat_date': '2020-01-01', 'a':'a', 'x':1},\n            {'stat_date': '2020-01-02', 'b':'b', 'x':2},\n            {'stat_date': '2020-01-03', 'c':'c', 'x':3}\n        ]\n        self.assertEqual(VLookupCol(table,'a',0,stat_date='2020-01-02'), 0)\n        self.assertEqual(VLookupCol(table,'b',0,stat_date='2020-01-02'), 'b')\n        self.assertEqual(VLookupCol(table,'b',0,stat_date='2020-01-02',x=2), 'b')\n        self.assertEqual(VLookupCol(table,'b',0,stat_date='2020-01-02',x=3), 0)\n\n    def test_TableLeftJoin(self):\n        t1 = [\n            {'stat_date': '2020-01-01', 'x':1},\n            {'stat_date': '2020-01-02', 'x':2},\n            {'stat_date': '2020-01-03', 'x':3}\n        ]\n        t2 = [\n            {'stat_date': '2020-01-01', 'y':4},\n            {'stat_date': '2020-01-02', 'y':5},\n            {'stat_date': '2020-01-03', 'y':6}\n        ]\n        t3 = [\n            {'stat_date': '2020-01-01', 'x':1, 'y':4},\n            {'stat_date': '2020-01-02', 'x':2, 'y':5},\n            {'stat_date': '2020-01-03', 'x':3, 'y':6}\n        ]\n        self.assertEqual(TableLeftJoin('stat_date', t1, t2), t3)\n\n    def test_FillTableWithDateRange(self):\n        table = [\n            {'stat_date': '2020-01-02', 'a': 'a'},\n            {'stat_date': '2020-01-03', 'c': 'c'}\n        ]\n        new_table = FillTableWithDateRange(table, '2020-01-05', '2020-01-01', 'stat_date')\n        self.assertEqual(new_table[0]['stat_date'], '2020-01-05')\n        self.assertEqual(new_table[0]['a'], 0)\n        self.assertEqual(new_table[0]['c'], 0)\n        self.assertEqual(new_table[4]['stat_date'], '2020-01-01')\n        self.assertEqual(new_table[0]['a'], 0)\n        self.assertEqual(new_table[0]['c'], 0)\n\n    def test_MakeDateRangeTable(self):\n        expected_table = [\n            {'stat_date': '2020-01-01'}, \n            {'stat_date': '2020-01-02'}, \n            {'stat_date': '2020-01-03'}\n        ]\n        self.assertEqual(MakeDateRangeTable('2020-01-01', '2020-01-03', 'stat_date'), expected_table)\n\n    def test_FillTableMissingColumn(self):\n        table = [\n            {'stat_date': '2020-01-01', 'a': 'a'},\n            {'stat_date': '2020-01-02', 'b': 'b'},\n            {'stat_date': '2020-01-03', 'c': 'c'}\n        ]\n        full_filled_table = [\n            {'stat_date': '2020-01-01', 'a':'a', 'b': 0,  'c': 0 },\n            {'stat_date': '2020-01-02', 'a': 0,  'b':'b', 'c': 0 },\n            {'stat_date': '2020-01-03', 'a': 0,  'b': 0,  'c':'c'},\n        ]\n        self.assertEqual(FillTableMissingColumn(table),full_filled_table)\n\n    def test_ExtractArrayFromTableByCol(self):\n        table = [\n            {'stat_date': '2020-01-01', 'a': 'a'},\n            {'stat_date': '2020-01-02', 'b': 'b'},\n            {'stat_date': '2020-01-03', 'c': 'c'}\n        ]\n        self.assertEqual(ExtractArrayFromTableByCol(table,'a'), ['a', 0,  0 ])\n        self.assertEqual(ExtractArrayFromTableByCol(table,'b'), [ 0, 'b', 0 ])\n        self.assertEqual(ExtractArrayFromTableByCol(table,'c'), [ 0,  0, 'c'])\n\n    def test_MaxInTable(self):\n        table = [\n            {'stat_date': '2020-01-01', 'v': 1, u'\u4e2d\u6587':9},\n            {'stat_date': '2020-01-02', 'v': 2, u'\u4e2d\u6587':5},\n            {'stat_date': '2020-01-03', 'v': 3}\n        ]\n        self.assertEqual(MaxInTable(table, 'v'), 3)\n        self.assertEqual(MaxInTable(table, u'\u4e2d\u6587'), 9)\n\n    def test_SumInTable(self):\n        table = [\n            {'stat_date': '2020-01-01', 'v': 1, u'\u4e2d\u6587':9},\n            {'stat_date': '2020-01-02', 'v': 2, u'\u4e2d\u6587':5},\n            {'stat_date': '2020-01-03', 'v': 3}\n        ]\n        self.assertEqual(SumInTable(table, 'v'), 6)\n        self.assertEqual(SumInTable(table, u'\u4e2d\u6587'), 14)\n```\n\n## Function List\n- Lookup Tools\n    - VLookupCol(table_array, return_col, return_default_val = None, **conditions)\n    - VLookupRow(table_array, **conditions):\n- Table Tools\n    - TableLeftJoin(pri_key, *tables):\n    - FillTableWithDateRange(table_array, begin_date, end_date, date_col_name):\n    - MakeDateRangeTable(begin_date, end_date, date_col_name):\n    - FillTableMissingColumn(table_array, default_val = 0):\n    - ExtractArrayFromTableByCol(table_array, col_name, default_val = 0):\n    - MaxInTable(table_array, col_name):\n    - SumInTable(table_array, col_name):\n    - ReverseTable(table):", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jamesqin-cn/tinydataset", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tinydataset", "package_url": "https://pypi.org/project/tinydataset/", "platform": "any", "project_url": "https://pypi.org/project/tinydataset/", "project_urls": {"Homepage": "https://github.com/jamesqin-cn/tinydataset"}, "release_url": "https://pypi.org/project/tinydataset/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "tinydataset is two dememsional array, which implements with a list of dictionaries, generated by mysql query action generally.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tiny DataSet</h1>\n<h2>What is TinyDataSet?</h2>\n<p>tinydataset is two dememsional array, which implements with a list of dictionaries, generated by mysql query action generally.</p>\n<pre><code>table = [\n    {'stat_date': '2020-01-01', 'k1':'a', 'k2':1},\n    {'stat_date': '2020-01-02', 'k1':'b', 'k2':2},\n    {'stat_date': '2020-01-03', 'k1':'c', 'k2':3}\n]\n</code></pre>\n<p>Generally speaking, you may fetch a list of dictionaries after execute mysql query like this:</p>\n<pre><code>conn = pymysql.connect(...)\nconn.cursor(cursor=pymysql.cursors.DictCursor)\ncursor.execute(\"SELECT stat_date,k1,k2,k3 FROM example_table LIMIT 10\")\ncursor.fetchall()\ncursor.close()\nconn.close()\n</code></pre>\n<p>This package provides some functions for processing table data structures</p>\n<h2>Programming Language</h2>\n<ul>\n<li>python 2.7</li>\n<li>python 3.7</li>\n</ul>\n<h2>Install</h2>\n<pre><code>pip install tinydataset\n</code></pre>\n<h2>Quick Start</h2>\n<pre><code>from tinydataset import *\n\nclass Test_TinyDataSet(unittest.TestCase):\n\n    def test_VLookupCol(self):\n        table = [\n            {'stat_date': '2020-01-01', 'a':'a', 'x':1},\n            {'stat_date': '2020-01-02', 'b':'b', 'x':2},\n            {'stat_date': '2020-01-03', 'c':'c', 'x':3}\n        ]\n        self.assertEqual(VLookupCol(table,'a',0,stat_date='2020-01-02'), 0)\n        self.assertEqual(VLookupCol(table,'b',0,stat_date='2020-01-02'), 'b')\n        self.assertEqual(VLookupCol(table,'b',0,stat_date='2020-01-02',x=2), 'b')\n        self.assertEqual(VLookupCol(table,'b',0,stat_date='2020-01-02',x=3), 0)\n\n    def test_TableLeftJoin(self):\n        t1 = [\n            {'stat_date': '2020-01-01', 'x':1},\n            {'stat_date': '2020-01-02', 'x':2},\n            {'stat_date': '2020-01-03', 'x':3}\n        ]\n        t2 = [\n            {'stat_date': '2020-01-01', 'y':4},\n            {'stat_date': '2020-01-02', 'y':5},\n            {'stat_date': '2020-01-03', 'y':6}\n        ]\n        t3 = [\n            {'stat_date': '2020-01-01', 'x':1, 'y':4},\n            {'stat_date': '2020-01-02', 'x':2, 'y':5},\n            {'stat_date': '2020-01-03', 'x':3, 'y':6}\n        ]\n        self.assertEqual(TableLeftJoin('stat_date', t1, t2), t3)\n\n    def test_FillTableWithDateRange(self):\n        table = [\n            {'stat_date': '2020-01-02', 'a': 'a'},\n            {'stat_date': '2020-01-03', 'c': 'c'}\n        ]\n        new_table = FillTableWithDateRange(table, '2020-01-05', '2020-01-01', 'stat_date')\n        self.assertEqual(new_table[0]['stat_date'], '2020-01-05')\n        self.assertEqual(new_table[0]['a'], 0)\n        self.assertEqual(new_table[0]['c'], 0)\n        self.assertEqual(new_table[4]['stat_date'], '2020-01-01')\n        self.assertEqual(new_table[0]['a'], 0)\n        self.assertEqual(new_table[0]['c'], 0)\n\n    def test_MakeDateRangeTable(self):\n        expected_table = [\n            {'stat_date': '2020-01-01'}, \n            {'stat_date': '2020-01-02'}, \n            {'stat_date': '2020-01-03'}\n        ]\n        self.assertEqual(MakeDateRangeTable('2020-01-01', '2020-01-03', 'stat_date'), expected_table)\n\n    def test_FillTableMissingColumn(self):\n        table = [\n            {'stat_date': '2020-01-01', 'a': 'a'},\n            {'stat_date': '2020-01-02', 'b': 'b'},\n            {'stat_date': '2020-01-03', 'c': 'c'}\n        ]\n        full_filled_table = [\n            {'stat_date': '2020-01-01', 'a':'a', 'b': 0,  'c': 0 },\n            {'stat_date': '2020-01-02', 'a': 0,  'b':'b', 'c': 0 },\n            {'stat_date': '2020-01-03', 'a': 0,  'b': 0,  'c':'c'},\n        ]\n        self.assertEqual(FillTableMissingColumn(table),full_filled_table)\n\n    def test_ExtractArrayFromTableByCol(self):\n        table = [\n            {'stat_date': '2020-01-01', 'a': 'a'},\n            {'stat_date': '2020-01-02', 'b': 'b'},\n            {'stat_date': '2020-01-03', 'c': 'c'}\n        ]\n        self.assertEqual(ExtractArrayFromTableByCol(table,'a'), ['a', 0,  0 ])\n        self.assertEqual(ExtractArrayFromTableByCol(table,'b'), [ 0, 'b', 0 ])\n        self.assertEqual(ExtractArrayFromTableByCol(table,'c'), [ 0,  0, 'c'])\n\n    def test_MaxInTable(self):\n        table = [\n            {'stat_date': '2020-01-01', 'v': 1, u'\u4e2d\u6587':9},\n            {'stat_date': '2020-01-02', 'v': 2, u'\u4e2d\u6587':5},\n            {'stat_date': '2020-01-03', 'v': 3}\n        ]\n        self.assertEqual(MaxInTable(table, 'v'), 3)\n        self.assertEqual(MaxInTable(table, u'\u4e2d\u6587'), 9)\n\n    def test_SumInTable(self):\n        table = [\n            {'stat_date': '2020-01-01', 'v': 1, u'\u4e2d\u6587':9},\n            {'stat_date': '2020-01-02', 'v': 2, u'\u4e2d\u6587':5},\n            {'stat_date': '2020-01-03', 'v': 3}\n        ]\n        self.assertEqual(SumInTable(table, 'v'), 6)\n        self.assertEqual(SumInTable(table, u'\u4e2d\u6587'), 14)\n</code></pre>\n<h2>Function List</h2>\n<ul>\n<li>Lookup Tools\n<ul>\n<li>VLookupCol(table_array, return_col, return_default_val = None, **conditions)</li>\n<li>VLookupRow(table_array, **conditions):</li>\n</ul>\n</li>\n<li>Table Tools\n<ul>\n<li>TableLeftJoin(pri_key, *tables):</li>\n<li>FillTableWithDateRange(table_array, begin_date, end_date, date_col_name):</li>\n<li>MakeDateRangeTable(begin_date, end_date, date_col_name):</li>\n<li>FillTableMissingColumn(table_array, default_val = 0):</li>\n<li>ExtractArrayFromTableByCol(table_array, col_name, default_val = 0):</li>\n<li>MaxInTable(table_array, col_name):</li>\n<li>SumInTable(table_array, col_name):</li>\n<li>ReverseTable(table):</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6767327, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "06333a2ee6a56a0a747ec1211d489fa5", "sha256": "9245b14e716b428ac89ecab4b9f03a390810a4ec01240d7d5a2a4f2261ce23eb"}, "downloads": -1, "filename": "tinydataset-0.1.2.tar.gz", "has_sig": false, "md5_digest": "06333a2ee6a56a0a747ec1211d489fa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4084, "upload_time": "2020-02-14T09:08:25", "upload_time_iso_8601": "2020-02-14T09:08:25.598769Z", "url": "https://files.pythonhosted.org/packages/af/10/e2b61ef037080f78b6baad3f4e699d153db4293c7e608421fbd6c11b426e/tinydataset-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "06333a2ee6a56a0a747ec1211d489fa5", "sha256": "9245b14e716b428ac89ecab4b9f03a390810a4ec01240d7d5a2a4f2261ce23eb"}, "downloads": -1, "filename": "tinydataset-0.1.2.tar.gz", "has_sig": false, "md5_digest": "06333a2ee6a56a0a747ec1211d489fa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4084, "upload_time": "2020-02-14T09:08:25", "upload_time_iso_8601": "2020-02-14T09:08:25.598769Z", "url": "https://files.pythonhosted.org/packages/af/10/e2b61ef037080f78b6baad3f4e699d153db4293c7e608421fbd6c11b426e/tinydataset-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:53:05 2020"}