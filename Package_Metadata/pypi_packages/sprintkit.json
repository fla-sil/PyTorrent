{"info": {"author": "Eric Miller", "author_email": "eric.miller@sprint.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Communications", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Sprint's Network APIs in Python\n===============================\n\nSprintKit (based upon the excellent `restkit` HTTP client) allows developers to\nadd mobile functionality to their Python apps by providing easy access to the\nSprint Developer Sandbox. The Sprint Developer Sandbox is a REST based gateway\nto Sprint's network services including; Location, SMS, MMS, Presence, and\nGeo-Fences.\n\nBasic access to the Developer Sandbox is FR$$, so get signed-up and let's see\nwhat you can build!\n\nPython Dependencies\n===================\n\nSprinKit only has two required dependencies, the rest are only really needed if\nyou intend to hack on the source.\n\nRequired\n--------\n    * restkit - An HTTP Client used for managing HTTP connections.\n    * http-parser - An HTTP Parser required by restkit.\n\nOptional\n--------\n    * nose - Used for unit test discovery and automation.\n    * sphinx - Used for creating the documenation. \n\nInstallation\n============\n\nSprintKit can be found on the Python Package Index (PyPI) and installed over\nthe Internet using either `pip` or Setuptool's `easy_install`. I prefer Pip\nbecause it handles dependencies and provides an unistall mechanism. \n\nThe installation process has only been tested on Linux and Mac OSX. Since\nhttp-parser is a C exstension module you need a gcc compiler and the Python\nheaders to build and install it. This isn't as scary as it seems and works out\nof the box on Mac, but you might have to install a few more things on your\nLinux machine. For instance if you are using a Debian based distro you will\nneed the python-dev package as well as build-essential. \n\nYou might be able to get this all working under Windows (cygwin would probably\nbe the easiest), but I haven't tried it.\n\nPip (the easy way)\n----------------------\nInstalling SprintKit using pip is the easiest way to get up and going quickly,\nbut first you need make sure you have a recent version of \n`distribute` installed::\n\n    $ curl -O http://python-distribute.org/distribute_setup.py\n    $ sudo python distribute_setup.py\n    $ easy_install pip\n\nNote: if you don't have curl installed you can use wget instead.\n\nOnce you have pip, the rest is easy. It will install all of SprintKit's run-time\ndependencies for you::\n\n    $ pip install sprintkit\n\nI like to put everything in a Virtualenv to keep my dependency problems to a\nminimum and make my Python environments repeatable. So, assuming you have\nvirtualenv installed, here is what the full install process looks like::\n\n    $ pip install virtualenv\n    $ virtualenv --no-site-packages --distribute sprintenv\n    $ cd sprintenv\n    $ source bin/activate\n    $ pip install sprintkit\n\n\nConfiguration\n=============\n\nBefore you use SprintKit for the first time, you need to create a configuration\nfile that contains your credentials for accessing the Sprint Developer Sandbox.\nOf course its a good idea to get your credentials before writing the config\nfile.\n\nObtaining Sandbox Credentials\n-----------------------------\n\nSprint provides access to the Developer Sandbox services for free, but you must\nregister to get your API key/secret. \n\n#. First `register <http://developer.sprint.com/ssl/load/registerUser.do>`_ with the `Sprint Developer Site <http://developer.sprint.com>`_ \n#. Next, `sign up <http://developer.sprint.com/site/global/services/use_sprint/register/p_register.jsp>`_ for Sandbox Services.\n#. Finally, note `your Sandbox key and secret <https://developer.sprint.com/site/global/services/use_sprint/sandbox_key/p_sandbox_key.jsp>`_ for configuring SprintKit.\n\nThe free version of the Sandbox is intended for development and demo purposes\ntherefore it is limited to 500 requests per day. If you need unlimited access\nyou can `upgrade <https://developer-store.sprint.com/>`_ your account by\npurchasing credits for the production version.\n\nWrite a Basic Configuration\n---------------------------\n\nThe configuration file must be in standard `INI` format and include a\n`[sprintkit]` section that stores the pertinent Sandbox configuration data.\nHere is a basic configuration sample with the required field/value pairs::\n\n    [sprintkit]\n    key = <insert_your_key_here>\n    secret = <insert_your_secret_here>\n    protocol = http\n    host = www.sprintdevelopersandbox.com\n    port = 80\n    path = /developerSandbox/resources/v1\n\nSprintKit will automatically search for config files first in the current\nworking directory (sprintkit.conf) and then in the $HOME directory\n(.sprintkit.conf). The easiest way to get up and running quickly is to save\nyour config file as `.sprintkit.conf` in your $HOME directory. If you want to\ncustomize the configuration loading process or read config data from a\ndifferent file, read the documentation on the Config object for more details.\n\nQuick Example (or two)\n======================\n\nSprintKit makes interfacing to the Sprint network a snap, here are a few\nsnippets that should give you an idea of what you can do.\n\nSometimes you just need to find out where a phone or device is located (think\nlost phone). Here is a simple Geo-Location fix from the Python shell::\n\n    >>> from sprintkit import Location\n    >>> location = Location()\n    >>> print location.locate(\"XXXXXXXXXX\")\n\nLets say you want to send someone an SMS message as soon as they enter a\ngeo-graphic perimeter. Here is a sample to do\nthat::\n\n    from time import sleep\n    from sprintkit import Perimeter, SMS\n    \n    sms = SMS()\n    starbucks = (38.912683, -94.660306)\n    perimeter = Perimeter(starbucks, 2000)\n    friends_phone = \"XXXXXXXXXX\"\n    inside = perimeter.inside(friends_phone)\n    while not inside:\n        sleep(60)\n        inside = perimeter.inside(friends_phone)\n    sms.send(friends_phone, \"Hey, can you bring me a latte?\")\n\n\nHelp and Documentation\n======================\n\nSprintKit contains extensive Doc Strings, so the quickest way to learn it is to\nuse it from the Python shell::\n\n    >>> from sprintkit import Perimeter\n    >>> perimeter = Perimeter()\n    >>> help(perimeter)\n\nIf you want to have a nicely formatted copy of the documentation you can\ngenerate a pdf from the source::\n\n    make docs\n    open docs/_build/latex/sprintkit.pdf\n\n.. [#] Only required for restkit versions 3.3 and higher.\n\n\nChange Log\n==========\n\n0.1.0\n-----\n\nInitial Release, released on: Fri Jun 24, 2011\n\n    - This is the first version published to the Internets.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ericem/sprintkit", "keywords": "communications", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "sprintkit", "package_url": "https://pypi.org/project/sprintkit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sprintkit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ericem/sprintkit"}, "release_url": "https://pypi.org/project/sprintkit/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Access Sprint's Network APIs Through Python", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"sprint-s-network-apis-in-python\">\n<h2>Sprint\u2019s Network APIs in Python</h2>\n<p>SprintKit (based upon the excellent <cite>restkit</cite> HTTP client) allows developers to\nadd mobile functionality to their Python apps by providing easy access to the\nSprint Developer Sandbox. The Sprint Developer Sandbox is a REST based gateway\nto Sprint\u2019s network services including; Location, SMS, MMS, Presence, and\nGeo-Fences.</p>\n<p>Basic access to the Developer Sandbox is FR$$, so get signed-up and let\u2019s see\nwhat you can build!</p>\n</div>\n<div id=\"python-dependencies\">\n<h2>Python Dependencies</h2>\n<p>SprinKit only has two required dependencies, the rest are only really needed if\nyou intend to hack on the source.</p>\n<div id=\"required\">\n<h3>Required</h3>\n<blockquote>\n<ul>\n<li>restkit - An HTTP Client used for managing HTTP connections.</li>\n<li>http-parser - An HTTP Parser required by restkit.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"optional\">\n<h3>Optional</h3>\n<blockquote>\n<ul>\n<li>nose - Used for unit test discovery and automation.</li>\n<li>sphinx - Used for creating the documenation.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>SprintKit can be found on the Python Package Index (PyPI) and installed over\nthe Internet using either <cite>pip</cite> or Setuptool\u2019s <cite>easy_install</cite>. I prefer Pip\nbecause it handles dependencies and provides an unistall mechanism.</p>\n<p>The installation process has only been tested on Linux and Mac OSX. Since\nhttp-parser is a C exstension module you need a gcc compiler and the Python\nheaders to build and install it. This isn\u2019t as scary as it seems and works out\nof the box on Mac, but you might have to install a few more things on your\nLinux machine. For instance if you are using a Debian based distro you will\nneed the python-dev package as well as build-essential.</p>\n<p>You might be able to get this all working under Windows (cygwin would probably\nbe the easiest), but I haven\u2019t tried it.</p>\n<div id=\"pip-the-easy-way\">\n<h3>Pip (the easy way)</h3>\n<p>Installing SprintKit using pip is the easiest way to get up and going quickly,\nbut first you need make sure you have a recent version of\n<cite>distribute</cite> installed:</p>\n<pre>$ curl -O http://python-distribute.org/distribute_setup.py\n$ sudo python distribute_setup.py\n$ easy_install pip\n</pre>\n<p>Note: if you don\u2019t have curl installed you can use wget instead.</p>\n<p>Once you have pip, the rest is easy. It will install all of SprintKit\u2019s run-time\ndependencies for you:</p>\n<pre>$ pip install sprintkit\n</pre>\n<p>I like to put everything in a Virtualenv to keep my dependency problems to a\nminimum and make my Python environments repeatable. So, assuming you have\nvirtualenv installed, here is what the full install process looks like:</p>\n<pre>$ pip install virtualenv\n$ virtualenv --no-site-packages --distribute sprintenv\n$ cd sprintenv\n$ source bin/activate\n$ pip install sprintkit\n</pre>\n</div>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Before you use SprintKit for the first time, you need to create a configuration\nfile that contains your credentials for accessing the Sprint Developer Sandbox.\nOf course its a good idea to get your credentials before writing the config\nfile.</p>\n<div id=\"obtaining-sandbox-credentials\">\n<h3>Obtaining Sandbox Credentials</h3>\n<p>Sprint provides access to the Developer Sandbox services for free, but you must\nregister to get your API key/secret.</p>\n<ol>\n<li>First <a href=\"http://developer.sprint.com/ssl/load/registerUser.do\" rel=\"nofollow\">register</a> with the <a href=\"http://developer.sprint.com\" rel=\"nofollow\">Sprint Developer Site</a></li>\n<li>Next, <a href=\"http://developer.sprint.com/site/global/services/use_sprint/register/p_register.jsp\" rel=\"nofollow\">sign up</a> for Sandbox Services.</li>\n<li>Finally, note <a href=\"https://developer.sprint.com/site/global/services/use_sprint/sandbox_key/p_sandbox_key.jsp\" rel=\"nofollow\">your Sandbox key and secret</a> for configuring SprintKit.</li>\n</ol>\n<p>The free version of the Sandbox is intended for development and demo purposes\ntherefore it is limited to 500 requests per day. If you need unlimited access\nyou can <a href=\"https://developer-store.sprint.com/\" rel=\"nofollow\">upgrade</a> your account by\npurchasing credits for the production version.</p>\n</div>\n<div id=\"write-a-basic-configuration\">\n<h3>Write a Basic Configuration</h3>\n<p>The configuration file must be in standard <cite>INI</cite> format and include a\n<cite>[sprintkit]</cite> section that stores the pertinent Sandbox configuration data.\nHere is a basic configuration sample with the required field/value pairs:</p>\n<pre>[sprintkit]\nkey = &lt;insert_your_key_here&gt;\nsecret = &lt;insert_your_secret_here&gt;\nprotocol = http\nhost = www.sprintdevelopersandbox.com\nport = 80\npath = /developerSandbox/resources/v1\n</pre>\n<p>SprintKit will automatically search for config files first in the current\nworking directory (sprintkit.conf) and then in the $HOME directory\n(.sprintkit.conf). The easiest way to get up and running quickly is to save\nyour config file as <cite>.sprintkit.conf</cite> in your $HOME directory. If you want to\ncustomize the configuration loading process or read config data from a\ndifferent file, read the documentation on the Config object for more details.</p>\n</div>\n</div>\n<div id=\"quick-example-or-two\">\n<h2>Quick Example (or two)</h2>\n<p>SprintKit makes interfacing to the Sprint network a snap, here are a few\nsnippets that should give you an idea of what you can do.</p>\n<p>Sometimes you just need to find out where a phone or device is located (think\nlost phone). Here is a simple Geo-Location fix from the Python shell:</p>\n<pre>&gt;&gt;&gt; from sprintkit import Location\n&gt;&gt;&gt; location = Location()\n&gt;&gt;&gt; print location.locate(\"XXXXXXXXXX\")\n</pre>\n<p>Lets say you want to send someone an SMS message as soon as they enter a\ngeo-graphic perimeter. Here is a sample to do\nthat:</p>\n<pre>from time import sleep\nfrom sprintkit import Perimeter, SMS\n\nsms = SMS()\nstarbucks = (38.912683, -94.660306)\nperimeter = Perimeter(starbucks, 2000)\nfriends_phone = \"XXXXXXXXXX\"\ninside = perimeter.inside(friends_phone)\nwhile not inside:\n    sleep(60)\n    inside = perimeter.inside(friends_phone)\nsms.send(friends_phone, \"Hey, can you bring me a latte?\")\n</pre>\n</div>\n<div id=\"help-and-documentation\">\n<h2>Help and Documentation</h2>\n<p>SprintKit contains extensive Doc Strings, so the quickest way to learn it is to\nuse it from the Python shell:</p>\n<pre>&gt;&gt;&gt; from sprintkit import Perimeter\n&gt;&gt;&gt; perimeter = Perimeter()\n&gt;&gt;&gt; help(perimeter)\n</pre>\n<p>If you want to have a nicely formatted copy of the documentation you can\ngenerate a pdf from the source:</p>\n<pre>make docs\nopen docs/_build/latex/sprintkit.pdf\n</pre>\n<table id=\"id1\">\n<col><col>\n<tbody>\n<tr><td>[1]</td><td>Only required for restkit versions 3.3 and higher.</td></tr>\n</tbody>\n</table>\n</div>\n<div id=\"change-log\">\n<h2>Change Log</h2>\n<h2 id=\"id2\"><span class=\"section-subtitle\">0.1.0</span></h2>\n<p>Initial Release, released on: Fri Jun 24, 2011</p>\n<blockquote>\n<ul>\n<li>This is the first version published to the Internets.</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 799978, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ca825dbdcc9dcad0b78ceba4cbad2a32", "sha256": "bffd16cef43066355789a2efe1c2245834252deb6898e50b2998849bc3c907bd"}, "downloads": -1, "filename": "sprintkit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ca825dbdcc9dcad0b78ceba4cbad2a32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30624, "upload_time": "2011-06-27T22:18:03", "upload_time_iso_8601": "2011-06-27T22:18:03.907453Z", "url": "https://files.pythonhosted.org/packages/06/5a/cc0fd218a2029777775822ebdcac36e5fb8298b8148cb78f2d793b743695/sprintkit-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca825dbdcc9dcad0b78ceba4cbad2a32", "sha256": "bffd16cef43066355789a2efe1c2245834252deb6898e50b2998849bc3c907bd"}, "downloads": -1, "filename": "sprintkit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ca825dbdcc9dcad0b78ceba4cbad2a32", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30624, "upload_time": "2011-06-27T22:18:03", "upload_time_iso_8601": "2011-06-27T22:18:03.907453Z", "url": "https://files.pythonhosted.org/packages/06/5a/cc0fd218a2029777775822ebdcac36e5fb8298b8148cb78f2d793b743695/sprintkit-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:22 2020"}