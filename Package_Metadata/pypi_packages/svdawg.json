{"info": {"author": "Simone Longo", "author_email": "s.longo@utah.edu", "bugtrack_url": null, "classifiers": [], "description": "# svdawg\n\n#### Created by Simone Longo at the University of Utah<br/>March 2020\n\nAccessories, widgets, and graphics for singular value decomposition (SVD) analysis.\n\n#### NOTE: This is an initial release and may be unstable. Please contact with bug information or feature requests. More functionality will be added over time.\n\n### Installation\n\n```bash\npip3 install svdawg\n```\n\n#### OR\n\nInstallation requires `numpy`, `seaborn`, `matplotlib`, `pandas`, and `sklearn`\n\nIn your terminal:\n```\ngit clone https://github.com/SpacemanSpiff7/svdawg/\ncd svdawg\npip3 install .\n```\n\n*Available methods*\n<pre>\n<b>fillnans(df, fill=0)</b>\n    Parameters:\n            df:   Pandas DataFrame to clean\n            fill: Value to use when replacing np.nan and np.inf (default=0)\n\n    Returns:\n            Returns a copy of the input Pandas DataFrame replacing all np.nan and np.inf with the specified value\n\n\n<b>generate_synthetic_data(m, n)</b>\n    Generate a toy dataset with dimension m x n\n\n    Parameters:\n            m: number of rows\n            n: number of columns\n\n\n<b>lineplot_svs(svd, top=5)</b>\n    Create lineplots of top singular values in U and V^T sorted and unsorted\n\n    Parameters:\n            svd:  A 3-ple containing the result of a SVD\n            top:  Integer indicating which top singular values to include\n\n\n<b>pd_scale(df)</b>\n    StandardScaler transform of Pandas DataFrame, maintaining row and column labels.\n\n    Parameters:\n            df: Pandas DataFrame\n\n    Returns:\n            A scaled and labelled Pandas DataFrame\n\n\n<b>pd_svd(df, labels=True)</b>\n    Compute SVD on a Pandas DataFrame, maintaining row and column labels.\n\n    Parameters:\n            df: Pandas DataFrame\n\n    Returns:\n            Returns decomposition of D = U.S.V^T as labelled\n            Pandas DataFrames as a 3-ple, (U, S, V^T)\n\n\n<b>plot_mat(mat)</b>\n    Plot a scaled matrix using red for negative and green for positive values\n\n    Parameter:\n            mat: some 2D matrix of numerical values\n\n\n<b>plot_sv(svd, sv=0)</b>\n    Tool for plotting U and V^T sorted by a specified singular value\n\n    Parameters:\n            svd: A 3-ple containing the result of a SVD computed by 'pd_svd'\n            sv:  Integer indicating which singular value to sort by\n\n\n<b>plot_svd(svd)</b>\n    Tool for plotting U and V^T\n\n    Parameters:\n            svd: A 3-ple containing the result of a SVD computed by 'pd_svd'\n            sv: Integer indicating which singular value to sort by\n\n\n<b>plot_svs(svd, top=5)</b>\n    Tool for plotting U and V^T sorted by top singular values\n\n    Parameters:\n            svd: A 3-ple containing the result of a SVD computed by 'pd_svd'\n            top: Integer indicating which top singular values to sort by\n\n\n<b>svd_fp(fp, header='infer', sep='\\t', index_col=None)</b>\n    Compute SVD directly from filepath to a table of tab-separated numerical values\n\n    Parameters:\n                fp:         Path to file\n                header:     Specify header, see Pandas.read_csv documentation for default option\n                sep:        field separator (default is tab separated). NOTE: this is different than default Pandas behavior\n                index_col:  specify if dataframe has an existing index (see default Pandas.read_csv documentation)\n\n    Returns:\n                A tuple containing the input dataframe and the result of a SVD on the data\n                Tuple Contents: (Pandas.DataFrame, (U, S, V^T))\n\n\n<b>svd_overview(data, top=3, scale=True)</b>\n    Display original data with line plots of top singular values from V^T and U\n\n    Parameters:\n            data:   untransformed dataframe\n            top:    top n singular values to plot\n            scale:  Preprocess data before SVD (boolean)\n\n\n<b>svdfilter(svd, noise=[0])</b>\n    Tool for filtering a singular value and reconstructing a data set\n\n    Parameters:\n            svd:    A 3-ple containing the result of a SVD\n            noise:  A list enumerating the singular values to set to 0\n\n    Returns:\n            Reconstruction of the filtered dataset as a NumPy array\n</pre>\n\nExample:\n```python\nimport svdawg as sv\n\ntoydata = sv.generate_synthetic_data(100,10)\ntoydata.head()\n```\n\n```\nOut[]:\n          0         1         2         3         4         5         6         7         8         9\n0  1.000000  0.809017  0.309017 -0.309017 -0.809017 -1.000000 -0.809017 -0.309017  0.309017  0.809017\n1  0.998027  0.844328  0.368125 -0.248690 -0.770513 -0.998027 -0.844328 -0.368125  0.248690  0.770513\n2  0.992115  0.876307  0.425779 -0.187381 -0.728969 -0.992115 -0.876307 -0.425779  0.187381  0.728969\n3  0.982287  0.904827  0.481754 -0.125333 -0.684547 -0.982287 -0.904827 -0.481754  0.125333  0.684547\n4  0.968583  0.929776  0.535827 -0.062791 -0.637424 -0.968583 -0.929776 -0.535827  0.062791  0.637424\n```\n\n```python\n# Visualize the data\nsv.plot_mat(toydata)\n```\n\n![Visualization of 'toydata' DataFrame](https://github.com/SpacemanSpiff7/images/blob/master/toydata_vis.png)\n\n\n#### Calculate SVD\n```python\n# Generate SVD results to use with other methods\nsvd = sv.pd_svd(toydata)\n\n# Visualize results\nsv.plot_svd(svd)\n```\n\n![Visualization of 'toydata' SVD](https://github.com/SpacemanSpiff7/images/blob/master/plot_svd_example.png)\n\n```python\n# Examine top singular values\nsv.lineplot_svs(svd, top=4)\n```\n\n![Top 4 Singular Values of 'toydata'](https://github.com/SpacemanSpiff7/images/blob/master/lineplot_svs_example.png)\n\n```python\n# Filter out first singular value\nsv.plot_mat(sv.svdfilter(svd))\n```\n\n![Filtered 1st SV](https://github.com/SpacemanSpiff7/images/blob/master/svdfilter_example.png)\n\n```python\n# Plot SVD sorted by top singular values\nsv.plot_svs(svd, top=4)\n```\n\n![Plotted Singular Values](https://github.com/SpacemanSpiff7/images/blob/master/plot_svs_example.png)\n\n```python\n# Or just plot whichever one you choose\nsv.plot_sv(svd, sv=0)\n```\n\n![Sorted by 0th SV](https://github.com/SpacemanSpiff7/images/blob/master/single_sv.png)\n\n\n```python\n# Quickly visualize Singular values in the context of your original data\nsv.svd_overview(toydata, top=3)\n```\n\n![SVD Overview](https://github.com/SpacemanSpiff7/images/blob/master/Screen%20Shot%202020-03-20%20at%208.05.44%20AM.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SpacemanSpiff7/svdawg", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "svdawg", "package_url": "https://pypi.org/project/svdawg/", "platform": "", "project_url": "https://pypi.org/project/svdawg/", "project_urls": {"Homepage": "https://github.com/SpacemanSpiff7/svdawg"}, "release_url": "https://pypi.org/project/svdawg/0.5/", "requires_dist": ["pandas", "numpy", "seaborn", "matplotlib", "sklearn"], "requires_python": ">=3.6", "summary": "SVD accessories, widgets, and graphics", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>svdawg</h1>\n<h4>Created by Simone Longo at the University of Utah<br>March 2020</h4>\n<p>Accessories, widgets, and graphics for singular value decomposition (SVD) analysis.</p>\n<h4>NOTE: This is an initial release and may be unstable. Please contact with bug information or feature requests. More functionality will be added over time.</h4>\n<h3>Installation</h3>\n<pre>pip3 install svdawg\n</pre>\n<h4>OR</h4>\n<p>Installation requires <code>numpy</code>, <code>seaborn</code>, <code>matplotlib</code>, <code>pandas</code>, and <code>sklearn</code></p>\n<p>In your terminal:</p>\n<pre><code>git clone https://github.com/SpacemanSpiff7/svdawg/\ncd svdawg\npip3 install .\n</code></pre>\n<p><em>Available methods</em></p>\n<pre><b>fillnans(df, fill=0)</b>\n    Parameters:\n            df:   Pandas DataFrame to clean\n            fill: Value to use when replacing np.nan and np.inf (default=0)\n\n    Returns:\n            Returns a copy of the input Pandas DataFrame replacing all np.nan and np.inf with the specified value\n\n\n<b>generate_synthetic_data(m, n)</b>\n    Generate a toy dataset with dimension m x n\n\n    Parameters:\n            m: number of rows\n            n: number of columns\n\n\n<b>lineplot_svs(svd, top=5)</b>\n    Create lineplots of top singular values in U and V^T sorted and unsorted\n\n    Parameters:\n            svd:  A 3-ple containing the result of a SVD\n            top:  Integer indicating which top singular values to include\n\n\n<b>pd_scale(df)</b>\n    StandardScaler transform of Pandas DataFrame, maintaining row and column labels.\n\n    Parameters:\n            df: Pandas DataFrame\n\n    Returns:\n            A scaled and labelled Pandas DataFrame\n\n\n<b>pd_svd(df, labels=True)</b>\n    Compute SVD on a Pandas DataFrame, maintaining row and column labels.\n\n    Parameters:\n            df: Pandas DataFrame\n\n    Returns:\n            Returns decomposition of D = U.S.V^T as labelled\n            Pandas DataFrames as a 3-ple, (U, S, V^T)\n\n\n<b>plot_mat(mat)</b>\n    Plot a scaled matrix using red for negative and green for positive values\n\n    Parameter:\n            mat: some 2D matrix of numerical values\n\n\n<b>plot_sv(svd, sv=0)</b>\n    Tool for plotting U and V^T sorted by a specified singular value\n\n    Parameters:\n            svd: A 3-ple containing the result of a SVD computed by 'pd_svd'\n            sv:  Integer indicating which singular value to sort by\n\n\n<b>plot_svd(svd)</b>\n    Tool for plotting U and V^T\n\n    Parameters:\n            svd: A 3-ple containing the result of a SVD computed by 'pd_svd'\n            sv: Integer indicating which singular value to sort by\n\n\n<b>plot_svs(svd, top=5)</b>\n    Tool for plotting U and V^T sorted by top singular values\n\n    Parameters:\n            svd: A 3-ple containing the result of a SVD computed by 'pd_svd'\n            top: Integer indicating which top singular values to sort by\n\n\n<b>svd_fp(fp, header='infer', sep='\\t', index_col=None)</b>\n    Compute SVD directly from filepath to a table of tab-separated numerical values\n\n    Parameters:\n                fp:         Path to file\n                header:     Specify header, see Pandas.read_csv documentation for default option\n                sep:        field separator (default is tab separated). NOTE: this is different than default Pandas behavior\n                index_col:  specify if dataframe has an existing index (see default Pandas.read_csv documentation)\n\n    Returns:\n                A tuple containing the input dataframe and the result of a SVD on the data\n                Tuple Contents: (Pandas.DataFrame, (U, S, V^T))\n\n\n<b>svd_overview(data, top=3, scale=True)</b>\n    Display original data with line plots of top singular values from V^T and U\n\n    Parameters:\n            data:   untransformed dataframe\n            top:    top n singular values to plot\n            scale:  Preprocess data before SVD (boolean)\n\n\n<b>svdfilter(svd, noise=[0])</b>\n    Tool for filtering a singular value and reconstructing a data set\n\n    Parameters:\n            svd:    A 3-ple containing the result of a SVD\n            noise:  A list enumerating the singular values to set to 0\n\n    Returns:\n            Reconstruction of the filtered dataset as a NumPy array\n</pre>\n<p>Example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">svdawg</span> <span class=\"k\">as</span> <span class=\"nn\">sv</span>\n\n<span class=\"n\">toydata</span> <span class=\"o\">=</span> <span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">generate_synthetic_data</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">toydata</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">()</span>\n</pre>\n<pre><code>Out[]:\n          0         1         2         3         4         5         6         7         8         9\n0  1.000000  0.809017  0.309017 -0.309017 -0.809017 -1.000000 -0.809017 -0.309017  0.309017  0.809017\n1  0.998027  0.844328  0.368125 -0.248690 -0.770513 -0.998027 -0.844328 -0.368125  0.248690  0.770513\n2  0.992115  0.876307  0.425779 -0.187381 -0.728969 -0.992115 -0.876307 -0.425779  0.187381  0.728969\n3  0.982287  0.904827  0.481754 -0.125333 -0.684547 -0.982287 -0.904827 -0.481754  0.125333  0.684547\n4  0.968583  0.929776  0.535827 -0.062791 -0.637424 -0.968583 -0.929776 -0.535827  0.062791  0.637424\n</code></pre>\n<pre><span class=\"c1\"># Visualize the data</span>\n<span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">plot_mat</span><span class=\"p\">(</span><span class=\"n\">toydata</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Visualization of 'toydata' DataFrame\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1b9a4df71d821292f0b9f571cd94c087007b69c6/68747470733a2f2f6769746875622e636f6d2f53706163656d616e5370696666372f696d616765732f626c6f622f6d61737465722f746f79646174615f7669732e706e67\"></p>\n<h4>Calculate SVD</h4>\n<pre><span class=\"c1\"># Generate SVD results to use with other methods</span>\n<span class=\"n\">svd</span> <span class=\"o\">=</span> <span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">pd_svd</span><span class=\"p\">(</span><span class=\"n\">toydata</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Visualize results</span>\n<span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">plot_svd</span><span class=\"p\">(</span><span class=\"n\">svd</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Visualization of 'toydata' SVD\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/161cf8dbc0ef8184914cc714ee3140454713130d/68747470733a2f2f6769746875622e636f6d2f53706163656d616e5370696666372f696d616765732f626c6f622f6d61737465722f706c6f745f7376645f6578616d706c652e706e67\"></p>\n<pre><span class=\"c1\"># Examine top singular values</span>\n<span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">lineplot_svs</span><span class=\"p\">(</span><span class=\"n\">svd</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Top 4 Singular Values of 'toydata'\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b72da19c253cdb9df5a1d8a0cf39b23ada6d3bd/68747470733a2f2f6769746875622e636f6d2f53706163656d616e5370696666372f696d616765732f626c6f622f6d61737465722f6c696e65706c6f745f7376735f6578616d706c652e706e67\"></p>\n<pre><span class=\"c1\"># Filter out first singular value</span>\n<span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">plot_mat</span><span class=\"p\">(</span><span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">svdfilter</span><span class=\"p\">(</span><span class=\"n\">svd</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"Filtered 1st SV\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06ce7b6f686a2550b44d7cef7bfa4d1082c586ea/68747470733a2f2f6769746875622e636f6d2f53706163656d616e5370696666372f696d616765732f626c6f622f6d61737465722f73766466696c7465725f6578616d706c652e706e67\"></p>\n<pre><span class=\"c1\"># Plot SVD sorted by top singular values</span>\n<span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">plot_svs</span><span class=\"p\">(</span><span class=\"n\">svd</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Plotted Singular Values\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2cc83b7a996ffe1c1846d29e0adf935ffcd44155/68747470733a2f2f6769746875622e636f6d2f53706163656d616e5370696666372f696d616765732f626c6f622f6d61737465722f706c6f745f7376735f6578616d706c652e706e67\"></p>\n<pre><span class=\"c1\"># Or just plot whichever one you choose</span>\n<span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">plot_sv</span><span class=\"p\">(</span><span class=\"n\">svd</span><span class=\"p\">,</span> <span class=\"n\">sv</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Sorted by 0th SV\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/117c79b99ea5dd8500bc58c7328fa657863076da/68747470733a2f2f6769746875622e636f6d2f53706163656d616e5370696666372f696d616765732f626c6f622f6d61737465722f73696e676c655f73762e706e67\"></p>\n<pre><span class=\"c1\"># Quickly visualize Singular values in the context of your original data</span>\n<span class=\"n\">sv</span><span class=\"o\">.</span><span class=\"n\">svd_overview</span><span class=\"p\">(</span><span class=\"n\">toydata</span><span class=\"p\">,</span> <span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"SVD Overview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a13522834e17e104a24ecc637ae6b8196d8b915/68747470733a2f2f6769746875622e636f6d2f53706163656d616e5370696666372f696d616765732f626c6f622f6d61737465722f53637265656e25323053686f74253230323032302d30332d32302532306174253230382e30352e3434253230414d2e706e67\"></p>\n\n          </div>"}, "last_serial": 6851416, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "57d78d440b9ab61a54b211d4268e6234", "sha256": "7f701ae568bcdf507173b605ae62a241e73e776e103265c360189d3b5a1f95d8"}, "downloads": -1, "filename": "svdawg-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "57d78d440b9ab61a54b211d4268e6234", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5764, "upload_time": "2020-03-20T14:32:37", "upload_time_iso_8601": "2020-03-20T14:32:37.837001Z", "url": "https://files.pythonhosted.org/packages/23/2b/566ef2cd7aeb212d24903675b5cb2b4e3958df501996bc85652b2127b91b/svdawg-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea1ad6a0927409bd88ac325500bf641e", "sha256": "8e521a7db7f3034ca9a9c97d88559e097206a206203ceb2a9cd1bd4628d7a56b"}, "downloads": -1, "filename": "svdawg-0.1.tar.gz", "has_sig": false, "md5_digest": "ea1ad6a0927409bd88ac325500bf641e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5642, "upload_time": "2020-03-20T14:32:40", "upload_time_iso_8601": "2020-03-20T14:32:40.320586Z", "url": "https://files.pythonhosted.org/packages/62/38/5e70605012a79661554fed28320b24bc90efbdb46dc1aa82711800833948/svdawg-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "76043148d9738162ff8f71d0a98640dc", "sha256": "1536032907475634a57ec388ec6bc6546edc78ec2155ca01096a332e440a75a4"}, "downloads": -1, "filename": "svdawg-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "76043148d9738162ff8f71d0a98640dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7838, "upload_time": "2020-03-20T14:59:47", "upload_time_iso_8601": "2020-03-20T14:59:47.123651Z", "url": "https://files.pythonhosted.org/packages/97/27/72a5e618eeb1bb8fc2bc75091dab79aac8d6152975e459be393afe04ea39/svdawg-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79dd4aa411b1552f6085bea4c3072197", "sha256": "fca03f730f484cbca53daabb0f0b465b7db163519c3641613558d386b11a5982"}, "downloads": -1, "filename": "svdawg-0.2.tar.gz", "has_sig": false, "md5_digest": "79dd4aa411b1552f6085bea4c3072197", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7012, "upload_time": "2020-03-20T14:59:51", "upload_time_iso_8601": "2020-03-20T14:59:51.239831Z", "url": "https://files.pythonhosted.org/packages/59/5f/358f189942a1cedcef66e54baaefafb37ddab3c882683885bc55a451c4a3/svdawg-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "12ee055722e386f7b5a0106afb1c1cb8", "sha256": "978e241137136ffb74bcc8da2628b113710dca70584d0240ae0fc3d205146913"}, "downloads": -1, "filename": "svdawg-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "12ee055722e386f7b5a0106afb1c1cb8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7841, "upload_time": "2020-03-20T15:03:40", "upload_time_iso_8601": "2020-03-20T15:03:40.563575Z", "url": "https://files.pythonhosted.org/packages/43/8a/621a57b3c51d43a3c4f62ca0ce67f0288986472f6d699b9d024bc83dc05f/svdawg-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2205bedbd9273bff6d674db4a55707eb", "sha256": "792a098997f1a4ae8d13036c0f3011c08a9de696d508beb01072ae9b0b8ad593"}, "downloads": -1, "filename": "svdawg-0.3.tar.gz", "has_sig": false, "md5_digest": "2205bedbd9273bff6d674db4a55707eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7014, "upload_time": "2020-03-20T15:03:41", "upload_time_iso_8601": "2020-03-20T15:03:41.669748Z", "url": "https://files.pythonhosted.org/packages/46/96/deec2b5fc57f6239ef1c1a93645a353b80a6498e0da93a746c797b0590fb/svdawg-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "f750d76d889797aa37ad4462bb857d9c", "sha256": "ae3e85e31ceabb23eebd280d2eb2dcccef6b80a7fd25b1773e63737e021677e9"}, "downloads": -1, "filename": "svdawg-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "f750d76d889797aa37ad4462bb857d9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7838, "upload_time": "2020-03-20T15:15:38", "upload_time_iso_8601": "2020-03-20T15:15:38.419200Z", "url": "https://files.pythonhosted.org/packages/a3/f2/50b66aea6106588fb40e669953776ee0fee598ff0a4d0a129a30fbaf5703/svdawg-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1d6fc8b4e53aa2d4e86c3c87be924c1", "sha256": "f51950766a81a0b2cb829aaf3ed1c2b3426853ec651e1f38c950061742938aa3"}, "downloads": -1, "filename": "svdawg-0.4.tar.gz", "has_sig": false, "md5_digest": "b1d6fc8b4e53aa2d4e86c3c87be924c1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7016, "upload_time": "2020-03-20T15:15:39", "upload_time_iso_8601": "2020-03-20T15:15:39.811765Z", "url": "https://files.pythonhosted.org/packages/1c/7f/fdd19d052678e1a05ba12f62496dffec2b8100d81947fdad7c9412f2729e/svdawg-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "faf51b06395d1cf78f5b70f3f4cdd69e", "sha256": "3a9bc185105c44bbbbd8c39547cc5117b57ef60323bdd4b5ab67d74a19599847"}, "downloads": -1, "filename": "svdawg-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "faf51b06395d1cf78f5b70f3f4cdd69e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7844, "upload_time": "2020-03-20T17:36:17", "upload_time_iso_8601": "2020-03-20T17:36:17.532246Z", "url": "https://files.pythonhosted.org/packages/e2/8d/27a7fc975b0626361c69c0193489dd9ccea9e63df626608a80adabe5a960/svdawg-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc0f3d2de889666be5998e90548de2d3", "sha256": "878418d8aee3e210c957ffe0ee38850c7042f536aefd780b7baa278b6cd0659d"}, "downloads": -1, "filename": "svdawg-0.5.tar.gz", "has_sig": false, "md5_digest": "fc0f3d2de889666be5998e90548de2d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7018, "upload_time": "2020-03-20T17:36:19", "upload_time_iso_8601": "2020-03-20T17:36:19.494206Z", "url": "https://files.pythonhosted.org/packages/df/39/db7163d41eb6a814dde071c4a10a770dde8210e3ed18a2e91183073e4b84/svdawg-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "faf51b06395d1cf78f5b70f3f4cdd69e", "sha256": "3a9bc185105c44bbbbd8c39547cc5117b57ef60323bdd4b5ab67d74a19599847"}, "downloads": -1, "filename": "svdawg-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "faf51b06395d1cf78f5b70f3f4cdd69e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7844, "upload_time": "2020-03-20T17:36:17", "upload_time_iso_8601": "2020-03-20T17:36:17.532246Z", "url": "https://files.pythonhosted.org/packages/e2/8d/27a7fc975b0626361c69c0193489dd9ccea9e63df626608a80adabe5a960/svdawg-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc0f3d2de889666be5998e90548de2d3", "sha256": "878418d8aee3e210c957ffe0ee38850c7042f536aefd780b7baa278b6cd0659d"}, "downloads": -1, "filename": "svdawg-0.5.tar.gz", "has_sig": false, "md5_digest": "fc0f3d2de889666be5998e90548de2d3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7018, "upload_time": "2020-03-20T17:36:19", "upload_time_iso_8601": "2020-03-20T17:36:19.494206Z", "url": "https://files.pythonhosted.org/packages/df/39/db7163d41eb6a814dde071c4a10a770dde8210e3ed18a2e91183073e4b84/svdawg-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:54 2020"}