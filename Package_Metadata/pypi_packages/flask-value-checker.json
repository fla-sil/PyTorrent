{"info": {"author": "Aditya Shankar", "author_email": "aditniru@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Flask-value-checker :mag_right:\nImaging web form checking, but now imagine that it was easy and comfy\n\n## Example usage\n```python\nfrom flask_value_checker import Invigilator\nfrom flask import Flask, request\n\ninvigilator = Invigilator()\n\n@app.route('/abc', methods=['POST'])\n@invigilator.check(\n   'POST',\n   '''\n   username : str/lenlim(5, 15)\n   password : str/lenlim(8, inf)\n   stayLoggedIn : str/accept(['on'])/optional\n   '''\n)\ndef abc():\n    stay_logged_in = request.form.get('stayLoggedIn', 'off')\n    return f'hi {request.form['username']}, stay logged in: {stay_logged_in}'\n\napp.run()\n```\n\n#### example default error\nNote: this error can [be customized](#custom-error-showing)\n\n```javascript\n{\n    \"error\": {\n        \"code\": \"MALFORMED_OR_MISSING_PARAMETERS\",\n        \"message\": \"one or more fields we're either missing or malformed\",\n        \"fields\": {\n            \"email\" : \"missing parameter, parameter is required\",\n            \"firstName\" : \"string length must be between 5 and inf\",\n            \"age\" : \"parameter has to be of type 'int'\"\n            ...\n        }\n    }\n}\n```\n---\n## function docs :notebook_with_decorative_cover: :notebook: :closed_book: :blue_book:\n<a name=\"custom-error-showing\"></a>\n### Invigilator(err_function=None)\n- **Type** : `function` or `None`\n- **Description** : the function that displays the final error to the webpage, must be written the the way a standard flask function is written, (although you may wanna check out [Flask.Response](https://flask.palletsprojects.com/en/1.1.x/api/?highlight=response#flask.Response), and return that instead of a tuple like `(error, 400)`)\n- **Example**\n```python\ndef custom_error_shower(errors):\n    return Response(\n        json.dumps({\"errors\": errors,}), status=400, mimetype=\"application/json\"\n    )\n```\n\n### Invigilator.check(http_methods, checker_str)\n##### http_methods:\n- **Type** : `str` or `list of strs`\n- **Description** : HTTP methods to check for,\n\n **NOTE**: if the http method to check for is not present in methods, the decorated function will be called normally and no checks will be performed\n- **Example** : `'GET'`, `'POST'`, `['GET', 'POST']`\n\n---\n## field name attribute docs\nall top attributes (str, int, float) should not have any parameters,\n\n**Note**: top attributes should be placed first, then its sub attributes\nshould be placed\n### str\n##### lenlim(min, max)\nthe minimum and maximum length the fields string can be\n- **min** : `int` or the value `inf`, the minimum accepted string length\n- **max** : `int` or the value `inf` (see [example-usage](#example-usage)), the maximum accepted string length\n\n##### optional\nis the attribute optional ?\n\n##### accept(accepted_vals)\nvalues that can be accepted when using the field name\n- **accepted_vals**: `list of strings`, the acceptable values for the parameter\n\n### int and float\n**int** specifies that the number must be an integer,\n\n**float** specifies that it can be decimal,\n\nboth attributes have the same sub-attributes\n##### lim(min, max)\nthe limits that the numeric values can range between\n- **min** : `float` or the value `inf`, the minimum accepted numeric value\n- **max** : `float` or the value `inf` (see [bigger-full-example](#bigger-full-example)), the maximum accepted numeric value\n\n##### optional\nis the attribute optional ?\n\n---\n##### checker_str\n- **Type** : `str`\n- **Description** : the form attributes and their restrictions written in the prescribed format, [See Here](#writing-parameters)\n---\n## Guide :metal:\n\n### Writing parameters:\n\n- different parameters are separated by a newline\n- the parameter and its rules are separated by an `:`\n- rule conditions are separated by an `/`\n- the first condition should be the type of the required value, `str`, `int` or `float`\n- condition arguments are put in brackets `()`\n\n###### example:\n`score : float/lim(0, 11.5)/optional`\n\n### bigger full example\n```python\n@app.route('/abc')\n@invigilator.check(\n   'POST',\n   '''\n    firstName : str/lenlim(1, 15)\n    middleName : str/optional\n    lastName : str/optional\n    stayLoggedIn : str/accept(['on'])/optional\n    email : str\n    password : str/lenlim(8, inf)\n    phone : str/lenlim(8, 15)\n    # number will have to be an Int,\n    # but it'll have to be greater than\n    # 18, not including 18\n    age : int/lim(18.9, inf)\n    score : float/lim(0, 10) # can be a decimal value\n    '''\n)\ndef abc():\n    some_content\n```\n\n## Dev-docs\n- codestyle : black\n- documentation style : numpydoc\n- HTTP-Returns extra to Numpydoc, that is similar to Return, but is represented as follows\n\n```python\n'''\nHTTP-Returns\n------------\n400\n    on failure, the response will be similar to,\n\n    {\n        \"error\": {\n            \"code\": \"MALFORMED_OR_MISSING_PARAMETERS\",\n            \"message\": \"one or more fields we're either missing or malformed\",\n            \"fields\": {\n                \"email\" : \"missing parameter, parameter is required\",\n                \"firstName\" : \"name has to be under 15 characters\",\n                \"age\" : \"parameter has to be of type 'int'\"\n                ...\n            }\n        }\n    }\n\n*\n    or whatever the original function returns\n\n    *\n'''\n```\n\ni.e.\n\n```\n<return code>\n    <details>\n    <return message>\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/therealadityashankar/flask-value-checker", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "flask-value-checker", "package_url": "https://pypi.org/project/flask-value-checker/", "platform": "", "project_url": "https://pypi.org/project/flask-value-checker/", "project_urls": {"Homepage": "https://github.com/therealadityashankar/flask-value-checker"}, "release_url": "https://pypi.org/project/flask-value-checker/1.1/", "requires_dist": ["Flask>=1.1.1", "colorama>=0.4.3", "pytest >=5.3.4 ; extra == \"test\""], "requires_python": ">=3.6,<4", "summary": "lets check flask parameters", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flask-value-checker :mag_right:</h1>\n<p>Imaging web form checking, but now imagine that it was easy and comfy</p>\n<h2>Example usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask_value_checker</span> <span class=\"kn\">import</span> <span class=\"n\">Invigilator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">request</span>\n\n<span class=\"n\">invigilator</span> <span class=\"o\">=</span> <span class=\"n\">Invigilator</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/abc'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"nd\">@invigilator</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span>\n   <span class=\"s1\">'POST'</span><span class=\"p\">,</span>\n   <span class=\"sd\">'''</span>\n<span class=\"sd\">   username : str/lenlim(5, 15)</span>\n<span class=\"sd\">   password : str/lenlim(8, inf)</span>\n<span class=\"sd\">   stayLoggedIn : str/accept(['on'])/optional</span>\n<span class=\"sd\">   '''</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">abc</span><span class=\"p\">():</span>\n    <span class=\"n\">stay_logged_in</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'stayLoggedIn'</span><span class=\"p\">,</span> <span class=\"s1\">'off'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'hi </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'username'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">, stay logged in: </span><span class=\"si\">{</span><span class=\"n\">stay_logged_in</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<h4>example default error</h4>\n<p>Note: this error can <a href=\"#custom-error-showing\" rel=\"nofollow\">be customized</a></p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"error\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"code\"</span><span class=\"o\">:</span> <span class=\"s2\">\"MALFORMED_OR_MISSING_PARAMETERS\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"message\"</span><span class=\"o\">:</span> <span class=\"s2\">\"one or more fields we're either missing or malformed\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"fields\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"email\"</span> <span class=\"o\">:</span> <span class=\"s2\">\"missing parameter, parameter is required\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"firstName\"</span> <span class=\"o\">:</span> <span class=\"s2\">\"string length must be between 5 and inf\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"age\"</span> <span class=\"o\">:</span> <span class=\"s2\">\"parameter has to be of type 'int'\"</span>\n            <span class=\"p\">...</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<hr>\n<h2>function docs :notebook_with_decorative_cover: :notebook: :closed_book: :blue_book:</h2>\n<p><a></a></p>\n<h3>Invigilator(err_function=None)</h3>\n<ul>\n<li><strong>Type</strong> : <code>function</code> or <code>None</code></li>\n<li><strong>Description</strong> : the function that displays the final error to the webpage, must be written the the way a standard flask function is written, (although you may wanna check out <a href=\"https://flask.palletsprojects.com/en/1.1.x/api/?highlight=response#flask.Response\" rel=\"nofollow\">Flask.Response</a>, and return that instead of a tuple like <code>(error, 400)</code>)</li>\n<li><strong>Example</strong></li>\n</ul>\n<pre><span class=\"k\">def</span> <span class=\"nf\">custom_error_shower</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span>\n        <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"errors\"</span><span class=\"p\">:</span> <span class=\"n\">errors</span><span class=\"p\">,}),</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"n\">mimetype</span><span class=\"o\">=</span><span class=\"s2\">\"application/json\"</span>\n    <span class=\"p\">)</span>\n</pre>\n<h3>Invigilator.check(http_methods, checker_str)</h3>\n<h5>http_methods:</h5>\n<ul>\n<li><strong>Type</strong> : <code>str</code> or <code>list of strs</code></li>\n<li><strong>Description</strong> : HTTP methods to check for,</li>\n</ul>\n<p><strong>NOTE</strong>: if the http method to check for is not present in methods, the decorated function will be called normally and no checks will be performed</p>\n<ul>\n<li><strong>Example</strong> : <code>'GET'</code>, <code>'POST'</code>, <code>['GET', 'POST']</code></li>\n</ul>\n<hr>\n<h2>field name attribute docs</h2>\n<p>all top attributes (str, int, float) should not have any parameters,</p>\n<p><strong>Note</strong>: top attributes should be placed first, then its sub attributes\nshould be placed</p>\n<h3>str</h3>\n<h5>lenlim(min, max)</h5>\n<p>the minimum and maximum length the fields string can be</p>\n<ul>\n<li><strong>min</strong> : <code>int</code> or the value <code>inf</code>, the minimum accepted string length</li>\n<li><strong>max</strong> : <code>int</code> or the value <code>inf</code> (see <a href=\"#example-usage\" rel=\"nofollow\">example-usage</a>), the maximum accepted string length</li>\n</ul>\n<h5>optional</h5>\n<p>is the attribute optional ?</p>\n<h5>accept(accepted_vals)</h5>\n<p>values that can be accepted when using the field name</p>\n<ul>\n<li><strong>accepted_vals</strong>: <code>list of strings</code>, the acceptable values for the parameter</li>\n</ul>\n<h3>int and float</h3>\n<p><strong>int</strong> specifies that the number must be an integer,</p>\n<p><strong>float</strong> specifies that it can be decimal,</p>\n<p>both attributes have the same sub-attributes</p>\n<h5>lim(min, max)</h5>\n<p>the limits that the numeric values can range between</p>\n<ul>\n<li><strong>min</strong> : <code>float</code> or the value <code>inf</code>, the minimum accepted numeric value</li>\n<li><strong>max</strong> : <code>float</code> or the value <code>inf</code> (see <a href=\"#bigger-full-example\" rel=\"nofollow\">bigger-full-example</a>), the maximum accepted numeric value</li>\n</ul>\n<h5>optional</h5>\n<p>is the attribute optional ?</p>\n<hr>\n<h5>checker_str</h5>\n<ul>\n<li><strong>Type</strong> : <code>str</code></li>\n<li><strong>Description</strong> : the form attributes and their restrictions written in the prescribed format, <a href=\"#writing-parameters\" rel=\"nofollow\">See Here</a></li>\n</ul>\n<hr>\n<h2>Guide :metal:</h2>\n<h3>Writing parameters:</h3>\n<ul>\n<li>different parameters are separated by a newline</li>\n<li>the parameter and its rules are separated by an <code>:</code></li>\n<li>rule conditions are separated by an <code>/</code></li>\n<li>the first condition should be the type of the required value, <code>str</code>, <code>int</code> or <code>float</code></li>\n<li>condition arguments are put in brackets <code>()</code></li>\n</ul>\n<h6>example:</h6>\n<p><code>score : float/lim(0, 11.5)/optional</code></p>\n<h3>bigger full example</h3>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/abc'</span><span class=\"p\">)</span>\n<span class=\"nd\">@invigilator</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span>\n   <span class=\"s1\">'POST'</span><span class=\"p\">,</span>\n   <span class=\"sd\">'''</span>\n<span class=\"sd\">    firstName : str/lenlim(1, 15)</span>\n<span class=\"sd\">    middleName : str/optional</span>\n<span class=\"sd\">    lastName : str/optional</span>\n<span class=\"sd\">    stayLoggedIn : str/accept(['on'])/optional</span>\n<span class=\"sd\">    email : str</span>\n<span class=\"sd\">    password : str/lenlim(8, inf)</span>\n<span class=\"sd\">    phone : str/lenlim(8, 15)</span>\n<span class=\"sd\">    # number will have to be an Int,</span>\n<span class=\"sd\">    # but it'll have to be greater than</span>\n<span class=\"sd\">    # 18, not including 18</span>\n<span class=\"sd\">    age : int/lim(18.9, inf)</span>\n<span class=\"sd\">    score : float/lim(0, 10) # can be a decimal value</span>\n<span class=\"sd\">    '''</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">abc</span><span class=\"p\">():</span>\n    <span class=\"n\">some_content</span>\n</pre>\n<h2>Dev-docs</h2>\n<ul>\n<li>codestyle : black</li>\n<li>documentation style : numpydoc</li>\n<li>HTTP-Returns extra to Numpydoc, that is similar to Return, but is represented as follows</li>\n</ul>\n<pre><span class=\"sd\">'''</span>\n<span class=\"sd\">HTTP-Returns</span>\n<span class=\"sd\">------------</span>\n<span class=\"sd\">400</span>\n<span class=\"sd\">    on failure, the response will be similar to,</span>\n\n<span class=\"sd\">    {</span>\n<span class=\"sd\">        \"error\": {</span>\n<span class=\"sd\">            \"code\": \"MALFORMED_OR_MISSING_PARAMETERS\",</span>\n<span class=\"sd\">            \"message\": \"one or more fields we're either missing or malformed\",</span>\n<span class=\"sd\">            \"fields\": {</span>\n<span class=\"sd\">                \"email\" : \"missing parameter, parameter is required\",</span>\n<span class=\"sd\">                \"firstName\" : \"name has to be under 15 characters\",</span>\n<span class=\"sd\">                \"age\" : \"parameter has to be of type 'int'\"</span>\n<span class=\"sd\">                ...</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        }</span>\n<span class=\"sd\">    }</span>\n\n<span class=\"sd\">*</span>\n<span class=\"sd\">    or whatever the original function returns</span>\n\n<span class=\"sd\">    *</span>\n<span class=\"sd\">'''</span>\n</pre>\n<p>i.e.</p>\n<pre><code>&lt;return code&gt;\n    &lt;details&gt;\n    &lt;return message&gt;\n</code></pre>\n\n          </div>"}, "last_serial": 6590959, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "8b32ceb456c55706075581f5c1be735f", "sha256": "f7c44732a4514c7469d2656cc2f9fd2db0260faeda3d2a759a40c8fa7a4afbcf"}, "downloads": -1, "filename": "flask_value_checker-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8b32ceb456c55706075581f5c1be735f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 13435, "upload_time": "2020-02-07T21:57:36", "upload_time_iso_8601": "2020-02-07T21:57:36.760707Z", "url": "https://files.pythonhosted.org/packages/f8/66/b1847c854bd7ac3eec4002ecc54a23a45d3dd0a7b1df465c24c153676238/flask_value_checker-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8d2f1532be0a33ca32c424b8763de79", "sha256": "076cc9a890a1f33440c1084f5b1b0701e76c886deb707f06f81911fe97313797"}, "downloads": -1, "filename": "flask_value_checker-1.0.tar.gz", "has_sig": false, "md5_digest": "a8d2f1532be0a33ca32c424b8763de79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 13499, "upload_time": "2020-02-07T22:04:35", "upload_time_iso_8601": "2020-02-07T22:04:35.838970Z", "url": "https://files.pythonhosted.org/packages/83/e1/f9862ab593402dc3cc104779fee8e81353509ed32ca2436f3d37e93aa7f8/flask_value_checker-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "005827b0638b29aa4fc0e4235257505d", "sha256": "4c4a785606843842363d8ac126691573213068721d3f63b65eea625356fb5ea1"}, "downloads": -1, "filename": "flask_value_checker-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "005827b0638b29aa4fc0e4235257505d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 13435, "upload_time": "2020-02-07T22:11:12", "upload_time_iso_8601": "2020-02-07T22:11:12.540365Z", "url": "https://files.pythonhosted.org/packages/69/ae/74845a883a717efe7ffc8158c86b721acd0f4d005269343fe8a7a0559eda/flask_value_checker-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "040437fde2621e9c7fd4873109733e9a", "sha256": "2330453dc5e18e1d03f371572babf5ccd0ca14f533c32ce58dd5e984d338fab0"}, "downloads": -1, "filename": "flask-value-checker-1.1.tar.gz", "has_sig": false, "md5_digest": "040437fde2621e9c7fd4873109733e9a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 13516, "upload_time": "2020-02-07T22:11:18", "upload_time_iso_8601": "2020-02-07T22:11:18.849862Z", "url": "https://files.pythonhosted.org/packages/4f/ae/6fb00e884883110c4fb829257af050f186e5d4d4779855ce810535cfff44/flask-value-checker-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "005827b0638b29aa4fc0e4235257505d", "sha256": "4c4a785606843842363d8ac126691573213068721d3f63b65eea625356fb5ea1"}, "downloads": -1, "filename": "flask_value_checker-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "005827b0638b29aa4fc0e4235257505d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4", "size": 13435, "upload_time": "2020-02-07T22:11:12", "upload_time_iso_8601": "2020-02-07T22:11:12.540365Z", "url": "https://files.pythonhosted.org/packages/69/ae/74845a883a717efe7ffc8158c86b721acd0f4d005269343fe8a7a0559eda/flask_value_checker-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "040437fde2621e9c7fd4873109733e9a", "sha256": "2330453dc5e18e1d03f371572babf5ccd0ca14f533c32ce58dd5e984d338fab0"}, "downloads": -1, "filename": "flask-value-checker-1.1.tar.gz", "has_sig": false, "md5_digest": "040437fde2621e9c7fd4873109733e9a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4", "size": 13516, "upload_time": "2020-02-07T22:11:18", "upload_time_iso_8601": "2020-02-07T22:11:18.849862Z", "url": "https://files.pythonhosted.org/packages/4f/ae/6fb00e884883110c4fb829257af050f186e5d4d4779855ce810535cfff44/flask-value-checker-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:09 2020"}