{"info": {"author": "chrono-meter@gmx.net", "author_email": "chrono-meter@gmx.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Python Software Foundation License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup :: HTML", "Topic :: Text Processing :: Markup :: XML"], "description": "katagami: a simple xml/html template library\n============================================\n\nThis library is one of many `Python templating libraries\n<http://wiki.python.org/moin/Templating>`_.\n\n\nFeatures\n--------\n * Based on XML's Processing instructions (`<?...?>`)\n * Simple features and simple implementation\n * Python script inside XML/HTML with any level indentation\n * `Inline Python expression`_\n * `Embed Python script`_\n * `Block structure`_\n * Supports both of Python 2 and Python 3\n * As fast as `mako <http://www.makotemplates.org/>`_\n * Iteratable output\n\n\nExample\n-------\n\nMake a HTML string with `inline Python expression`_ and Python's `for` (`Block\nstructure`_)::\n\n    >>> from katagami import render_string, myprint\n    >>> myprint(render_string('''<html>\n    ... <body>\n    ...     <? for name in names: {?>\n    ...         <p>hello, <?=name?></p>\n    ...     <?}?>\n    ... </body>\n    ... </html>''', {'names': ['world', 'python']}))\n    <html>\n    <body>\n    <BLANKLINE>\n            <p>hello, world</p>\n    <BLANKLINE>\n            <p>hello, python</p>\n    <BLANKLINE>\n    </body>\n    </html>\n\n\nInline Python expression\n------------------------\n\nThis feature evaluates your inline expression and output to result::\n\n    >>> myprint(render_string('''<html><body>\n    ...     <?='hello, world'?>\n    ... </body></html>'''))\n    <html><body>\n        hello, world\n    </body></html>\n\nBy the default, this example raises an exception, evaluated expression must be\n`str` (`unicode` in Python 2)::\n\n    >>> myprint(render_string('''<html><body>\n    ...     <?=1?>\n    ... </body></html>''')) #doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n    ...\n    TypeError: Can't convert 'int' object to str implicitly\n\nSet the `cast_string` feature::\n\n    >>> myprint(render_string('''<?py\n    ...         from katagami import cast_string\n    ...     ?><html><body>\n    ...     <?=1?>\n    ... </body></html>'''))\n    <html><body>\n        1\n    </body></html>\n\nAlso set the `except_hook` feature::\n\n    >>> myprint(render_string('''<?py\n    ...         from katagami import except_hook\n    ...     ?><html><body>\n    ...     <?=1?>\n    ... </body></html>'''))\n    <html><body>\n        Can't convert 'int' object to str implicitly\n    </body></html>\n\n\nEmbed Python script\n-------------------\n\nAll indentation will be arranged automatically::\n\n    >>> myprint(render_string('''<html>\n    ... <?py\n    ...     # It is a top level here. This works fine.\n    ...     if 1:\n    ...         msg = 'message from indented script'\n    ... ?>\n    ... <body>\n    ...     <p><?=msg?></p>\n    ...     <?py msg = 'message from single line script' # This works fine too. ?>\n    ...     <p><?=msg?></p>\n    ...     <? if 1: {?>\n    ... <?py\n    ... # Is is nested here. This also works fine.\n    ... msg = 'message from nested indented script'\n    ... ?>\n    ...     <p><?=msg?></p>\n    ...     <?}?>\n    ... </body>\n    ... </html>'''))\n    <html>\n    <BLANKLINE>\n    <body>\n        <p>message from indented script</p>\n    <BLANKLINE>\n        <p>message from single line script</p>\n    <BLANKLINE>\n    <BLANKLINE>\n        <p>message from nested indented script</p>\n    <BLANKLINE>\n    </body>\n    </html>\n\n\nBlock structure\n---------------\n\nIndentation with C-style block structure::\n\n    >>> myprint(render_string('''<html>\n    ... <body>\n    ...     <p>hello,&nbsp;\n    ...     <? try: {?>\n    ...         <?=name?>\n    ...     <?} except NameError: {?>\n    ...         NameError\n    ...     <?} else: {?>\n    ...         never output here\n    ...     <?}?>\n    ...     </p>\n    ... </body>\n    ... </html>'''))\n    <html>\n    <body>\n        <p>hello,&nbsp;\n    <BLANKLINE>\n    <BLANKLINE>\n            NameError\n    <BLANKLINE>\n        </p>\n    </body>\n    </html>\n\nNote\n~~~~\n\n * '<? }' and '{ ?>' are wrong. Don't insert space. '<?}' and '{?>' are correct.\n * Ending colon (':') is required.\n * Block closing '<?}?>' is required.\n\n\nEncoding detection\n------------------\n\nEncoding will be detected automatically::\n\n    >>> myprint(render_string(b'''<html>\n    ... <head><meta charset=\"shift-jis\"></head>\n    ... <body>\\x93\\xfa\\x96{\\x8c\\xea</body>\n    ... </html>'''))\n    <html>\n    <head><meta charset=\"shift-jis\"></head>\n    <body>\\u65e5\\u672c\\u8a9e</body>\n    </html>\n\nSupported formats:\n\n * <?xml encoding=\"ENCODING\"?>\n * <meta charset=\"ENCODING\">\n * <meta http-equiv=\"Content-Type\" content=\"MIMETYPE; ENCODING\">\n\n\nHistory\n-------\n\n * 2.0.1 improve backward compatibility of the test\n * 2.0.0 change a lot and add some features\n * 1.1.0 change api, add except_handler, add shorthand of gettext (<?_message?>),\n         some fixes\n * 1.0.3 fix ignoring `encoding` argument, fix indent bug, add `renderString`\n * 1.0.2 improve doctest compatibility, some fixes\n * 1.0.1 fix bugs, docs, speed\n * 1.0.0 remove backward compatibility", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/katagami", "keywords": null, "license": "PSF", "maintainer": null, "maintainer_email": null, "name": "katagami", "package_url": "https://pypi.org/project/katagami/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/katagami/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/katagami"}, "release_url": "https://pypi.org/project/katagami/2.0.1/", "requires_dist": null, "requires_python": null, "summary": "katagami: a simple xml/html template library", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library is one of many <a href=\"http://wiki.python.org/moin/Templating\" rel=\"nofollow\">Python templating libraries</a>.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<blockquote>\n<ul>\n<li>Based on XML\u2019s Processing instructions (<cite>&lt;?\u2026?&gt;</cite>)</li>\n<li>Simple features and simple implementation</li>\n<li>Python script inside XML/HTML with any level indentation</li>\n<li><a href=\"#inline-python-expression\" rel=\"nofollow\">Inline Python expression</a></li>\n<li><a href=\"#embed-python-script\" rel=\"nofollow\">Embed Python script</a></li>\n<li><a href=\"#block-structure\" rel=\"nofollow\">Block structure</a></li>\n<li>Supports both of Python 2 and Python 3</li>\n<li>As fast as <a href=\"http://www.makotemplates.org/\" rel=\"nofollow\">mako</a></li>\n<li>Iteratable output</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>Make a HTML string with <a href=\"#inline-python-expression\" rel=\"nofollow\">inline Python expression</a> and Python\u2019s <cite>for</cite> (<a href=\"#block-structure\" rel=\"nofollow\">Block\nstructure</a>):</p>\n<pre>&gt;&gt;&gt; from katagami import render_string, myprint\n&gt;&gt;&gt; myprint(render_string('''&lt;html&gt;\n... &lt;body&gt;\n...     &lt;? for name in names: {?&gt;\n...         &lt;p&gt;hello, &lt;?=name?&gt;&lt;/p&gt;\n...     &lt;?}?&gt;\n... &lt;/body&gt;\n... &lt;/html&gt;''', {'names': ['world', 'python']}))\n&lt;html&gt;\n&lt;body&gt;\n&lt;BLANKLINE&gt;\n        &lt;p&gt;hello, world&lt;/p&gt;\n&lt;BLANKLINE&gt;\n        &lt;p&gt;hello, python&lt;/p&gt;\n&lt;BLANKLINE&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</div>\n<div id=\"inline-python-expression\">\n<h2>Inline Python expression</h2>\n<p>This feature evaluates your inline expression and output to result:</p>\n<pre>&gt;&gt;&gt; myprint(render_string('''&lt;html&gt;&lt;body&gt;\n...     &lt;?='hello, world'?&gt;\n... &lt;/body&gt;&lt;/html&gt;'''))\n&lt;html&gt;&lt;body&gt;\n    hello, world\n&lt;/body&gt;&lt;/html&gt;\n</pre>\n<p>By the default, this example raises an exception, evaluated expression must be\n<cite>str</cite> (<cite>unicode</cite> in Python 2):</p>\n<pre>&gt;&gt;&gt; myprint(render_string('''&lt;html&gt;&lt;body&gt;\n...     &lt;?=1?&gt;\n... &lt;/body&gt;&lt;/html&gt;''')) #doctest: +IGNORE_EXCEPTION_DETAIL\nTraceback (most recent call last):\n...\nTypeError: Can't convert 'int' object to str implicitly\n</pre>\n<p>Set the <cite>cast_string</cite> feature:</p>\n<pre>&gt;&gt;&gt; myprint(render_string('''&lt;?py\n...         from katagami import cast_string\n...     ?&gt;&lt;html&gt;&lt;body&gt;\n...     &lt;?=1?&gt;\n... &lt;/body&gt;&lt;/html&gt;'''))\n&lt;html&gt;&lt;body&gt;\n    1\n&lt;/body&gt;&lt;/html&gt;\n</pre>\n<p>Also set the <cite>except_hook</cite> feature:</p>\n<pre>&gt;&gt;&gt; myprint(render_string('''&lt;?py\n...         from katagami import except_hook\n...     ?&gt;&lt;html&gt;&lt;body&gt;\n...     &lt;?=1?&gt;\n... &lt;/body&gt;&lt;/html&gt;'''))\n&lt;html&gt;&lt;body&gt;\n    Can't convert 'int' object to str implicitly\n&lt;/body&gt;&lt;/html&gt;\n</pre>\n</div>\n<div id=\"embed-python-script\">\n<h2>Embed Python script</h2>\n<p>All indentation will be arranged automatically:</p>\n<pre>&gt;&gt;&gt; myprint(render_string('''&lt;html&gt;\n... &lt;?py\n...     # It is a top level here. This works fine.\n...     if 1:\n...         msg = 'message from indented script'\n... ?&gt;\n... &lt;body&gt;\n...     &lt;p&gt;&lt;?=msg?&gt;&lt;/p&gt;\n...     &lt;?py msg = 'message from single line script' # This works fine too. ?&gt;\n...     &lt;p&gt;&lt;?=msg?&gt;&lt;/p&gt;\n...     &lt;? if 1: {?&gt;\n... &lt;?py\n... # Is is nested here. This also works fine.\n... msg = 'message from nested indented script'\n... ?&gt;\n...     &lt;p&gt;&lt;?=msg?&gt;&lt;/p&gt;\n...     &lt;?}?&gt;\n... &lt;/body&gt;\n... &lt;/html&gt;'''))\n&lt;html&gt;\n&lt;BLANKLINE&gt;\n&lt;body&gt;\n    &lt;p&gt;message from indented script&lt;/p&gt;\n&lt;BLANKLINE&gt;\n    &lt;p&gt;message from single line script&lt;/p&gt;\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n    &lt;p&gt;message from nested indented script&lt;/p&gt;\n&lt;BLANKLINE&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</div>\n<div id=\"block-structure\">\n<h2>Block structure</h2>\n<p>Indentation with C-style block structure:</p>\n<pre>&gt;&gt;&gt; myprint(render_string('''&lt;html&gt;\n... &lt;body&gt;\n...     &lt;p&gt;hello,&amp;nbsp;\n...     &lt;? try: {?&gt;\n...         &lt;?=name?&gt;\n...     &lt;?} except NameError: {?&gt;\n...         NameError\n...     &lt;?} else: {?&gt;\n...         never output here\n...     &lt;?}?&gt;\n...     &lt;/p&gt;\n... &lt;/body&gt;\n... &lt;/html&gt;'''))\n&lt;html&gt;\n&lt;body&gt;\n    &lt;p&gt;hello,&amp;nbsp;\n&lt;BLANKLINE&gt;\n&lt;BLANKLINE&gt;\n        NameError\n&lt;BLANKLINE&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<div id=\"note\">\n<h3>Note</h3>\n<blockquote>\n<ul>\n<li>\u2018&lt;? }\u2019 and \u2018{ ?&gt;\u2019 are wrong. Don\u2019t insert space. \u2018&lt;?}\u2019 and \u2018{?&gt;\u2019 are correct.</li>\n<li>Ending colon (\u2018:\u2019) is required.</li>\n<li>Block closing \u2018&lt;?}?&gt;\u2019 is required.</li>\n</ul>\n</blockquote>\n</div>\n</div>\n<div id=\"encoding-detection\">\n<h2>Encoding detection</h2>\n<p>Encoding will be detected automatically:</p>\n<pre>&gt;&gt;&gt; myprint(render_string(b'''&lt;html&gt;\n... &lt;head&gt;&lt;meta charset=\"shift-jis\"&gt;&lt;/head&gt;\n... &lt;body&gt;\\x93\\xfa\\x96{\\x8c\\xea&lt;/body&gt;\n... &lt;/html&gt;'''))\n&lt;html&gt;\n&lt;head&gt;&lt;meta charset=\"shift-jis\"&gt;&lt;/head&gt;\n&lt;body&gt;\\u65e5\\u672c\\u8a9e&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>Supported formats:</p>\n<blockquote>\n<ul>\n<li>&lt;?xml encoding=\u201dENCODING\u201d?&gt;</li>\n<li>&lt;meta charset=\u201dENCODING\u201d&gt;</li>\n<li>&lt;meta http-equiv=\u201dContent-Type\u201d content=\u201dMIMETYPE; ENCODING\u201d&gt;</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<blockquote>\n<ul>\n<li>2.0.1 improve backward compatibility of the test</li>\n<li>2.0.0 change a lot and add some features</li>\n<li><dl>\n<dt>1.1.0 change api, add except_handler, add shorthand of gettext (&lt;?_message?&gt;),</dt>\n<dd>some fixes</dd>\n</dl>\n</li>\n<li>1.0.3 fix ignoring <cite>encoding</cite> argument, fix indent bug, add <cite>renderString</cite></li>\n<li>1.0.2 improve doctest compatibility, some fixes</li>\n<li>1.0.1 fix bugs, docs, speed</li>\n<li>1.0.0 remove backward compatibility</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 1025145, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a29284198edaf77e247383b0450399a0", "sha256": "a14cb99359c8101698e393dfe6644407d1326036ec1290f35cbc200fc5116a27"}, "downloads": -1, "filename": "katagami-0.1.0.zip", "has_sig": false, "md5_digest": "a29284198edaf77e247383b0450399a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14852, "upload_time": "2011-08-24T23:05:28", "upload_time_iso_8601": "2011-08-24T23:05:28.748197Z", "url": "https://files.pythonhosted.org/packages/70/b2/2ef8a1e3bfc85ccf2e4ebaa733d6ed2013e9d7048f22abedc4a726f528a7/katagami-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6caadefa0833e3ff5e6e24c9862dab5d", "sha256": "b8498d93cdf8bc41c59d0ac9e3120a18e24e452d967b4598e3902c33d6681802"}, "downloads": -1, "filename": "katagami-0.1.1.zip", "has_sig": false, "md5_digest": "6caadefa0833e3ff5e6e24c9862dab5d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15146, "upload_time": "2011-08-25T22:55:11", "upload_time_iso_8601": "2011-08-25T22:55:11.617722Z", "url": "https://files.pythonhosted.org/packages/4e/26/d8cd9605ba26b28338e84e0e52f4fbd61ccf7e373192727016760fd4562c/katagami-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "08f657c7448d52c3e4379b93a45a6541", "sha256": "be93e5e1043d25f6712092db90324244779b09117e376b7de109cbeb65860084"}, "downloads": -1, "filename": "katagami-0.1.2.zip", "has_sig": false, "md5_digest": "08f657c7448d52c3e4379b93a45a6541", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15346, "upload_time": "2011-08-28T02:19:41", "upload_time_iso_8601": "2011-08-28T02:19:41.040786Z", "url": "https://files.pythonhosted.org/packages/4c/78/3fdf75f2875dcf2e8cd164def2a00efab66f77f52a050229b275fc6b783d/katagami-0.1.2.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3edec9af911eae9060c75c012124e584", "sha256": "2a2d99307830510a569785764df1bd8df11e9f22f6a37f170e658b89a9e19e4f"}, "downloads": -1, "filename": "katagami-0.2.0.zip", "has_sig": false, "md5_digest": "3edec9af911eae9060c75c012124e584", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15628, "upload_time": "2011-08-28T20:16:20", "upload_time_iso_8601": "2011-08-28T20:16:20.763315Z", "url": "https://files.pythonhosted.org/packages/d8/98/90a3fb0b7578a764512deacfe64f53bdf94888e43cc36a92521e8482ba3b/katagami-0.2.0.zip", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "32753e32a4821d4a8f9f9528ce3b6129", "sha256": "77f00b084b50f1dd530cc29295018b8f01294fc48b1b2567da4fd276c5c07f1d"}, "downloads": -1, "filename": "katagami-0.3.0.zip", "has_sig": false, "md5_digest": "32753e32a4821d4a8f9f9528ce3b6129", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18203, "upload_time": "2011-11-18T20:06:54", "upload_time_iso_8601": "2011-11-18T20:06:54.342540Z", "url": "https://files.pythonhosted.org/packages/dd/37/236050c8a01484c799d1b26f8ec90760476ad966a43d021204c7675a86b6/katagami-0.3.0.zip", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "fdb9c982ed430fb9dd8689fda0fcd283", "sha256": "c8005ebad137744caf08ee743590723758e1162cef90ead8b5b8368d5080ca70"}, "downloads": -1, "filename": "katagami-1.0.0.zip", "has_sig": false, "md5_digest": "fdb9c982ed430fb9dd8689fda0fcd283", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7490, "upload_time": "2012-12-30T01:47:54", "upload_time_iso_8601": "2012-12-30T01:47:54.459085Z", "url": "https://files.pythonhosted.org/packages/65/cc/ddec7f3fc28b1fd372399c818fd99cdb6074712bb41d0392781235ccd171/katagami-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ae3c3c9d46179ff9d2ef58830c0c1a21", "sha256": "1db517999be75bcf4b9f6a68175aa7c1f362b76e3b9c12a822bd73a168f8bd96"}, "downloads": -1, "filename": "katagami-1.0.1.zip", "has_sig": false, "md5_digest": "ae3c3c9d46179ff9d2ef58830c0c1a21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7741, "upload_time": "2012-12-31T09:58:35", "upload_time_iso_8601": "2012-12-31T09:58:35.669209Z", "url": "https://files.pythonhosted.org/packages/29/e2/aa003c0559ad1fee7c7a3c83a7957163621abdfe840c9b6759146ccfc934/katagami-1.0.1.zip", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "787d4b902950d47e5fbd97eb8b64c4b0", "sha256": "3ad3554cfce906827b2b29c9f21531ded50bf77237cf6fcde4b6f23db1016548"}, "downloads": -1, "filename": "katagami-2.0.0.zip", "has_sig": false, "md5_digest": "787d4b902950d47e5fbd97eb8b64c4b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10176, "upload_time": "2013-08-07T07:47:17", "upload_time_iso_8601": "2013-08-07T07:47:17.708123Z", "url": "https://files.pythonhosted.org/packages/df/27/2c2b1b862d481af66183268bfc5d2434ea3ca714a3ae456d42ad0da2ad35/katagami-2.0.0.zip", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "0efa5d640e6bdf6c3a3bae53d8aaaf8a", "sha256": "74c2cd3f714e5b7ae19f92fa6ef058a2fcb0176db2b567102d8437bb76997b0b"}, "downloads": -1, "filename": "katagami-2.0.1.zip", "has_sig": false, "md5_digest": "0efa5d640e6bdf6c3a3bae53d8aaaf8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11114, "upload_time": "2014-03-10T16:58:04", "upload_time_iso_8601": "2014-03-10T16:58:04.106758Z", "url": "https://files.pythonhosted.org/packages/f3/89/14617867dc632070fa86e8f7068c3f3e99fbbe85f10ba01a1a5bd67c80a1/katagami-2.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0efa5d640e6bdf6c3a3bae53d8aaaf8a", "sha256": "74c2cd3f714e5b7ae19f92fa6ef058a2fcb0176db2b567102d8437bb76997b0b"}, "downloads": -1, "filename": "katagami-2.0.1.zip", "has_sig": false, "md5_digest": "0efa5d640e6bdf6c3a3bae53d8aaaf8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11114, "upload_time": "2014-03-10T16:58:04", "upload_time_iso_8601": "2014-03-10T16:58:04.106758Z", "url": "https://files.pythonhosted.org/packages/f3/89/14617867dc632070fa86e8f7068c3f3e99fbbe85f10ba01a1a5bd67c80a1/katagami-2.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:50:35 2020"}