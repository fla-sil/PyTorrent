{"info": {"author": "Felipe Ortiz, Pablo Ahumada", "author_email": "fortizc@gmail.com, pablo.ahumadadiaz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development", "Topic :: System"], "description": "Micro\n=====\n\n|travis| |coverage| |pypi| |pyversion|\n\nA platform to create microservices available through ``celery`` and\nRest (using ``gunicorn``) APIs.\n\nMicro API\n---------\n\nMicro uses a very simple API to run, list and get information about\nplugins:\n\n-  ``plugins()``: list all available plugins.\n-  ``info(plugin_name)``: show information about a specific plugin.\n-  ``help(plugin_name)``: show the plugin help.\n-  ``run(plugin_name, params)``: execute the given plugin.\n\nTo use this API with Celery you can use the\n`Micro-dev <https://github.com/humu1us/micro-dev>`__ package who provides\ntwo important libraries, the access to the Celery API and the PluginBase\nclass who allow writing Micro plugins. To use it as API Rest you can use\nthe ``requests`` python library.\n\nAPI Celery example (using micro-dev)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> from micro.api.endpoints import Requests\n    >>>\n    >>> req = Requests(BROKER_URL, QUEUE_NAME)\n    >>>\n    >>> req.plugins.delay().wait()\n    '[{\"name\": \"Example Plugin\", \"version\": null, \"description\": \"A very simple example plugin\"}]'\n    >>>\n    >>> req.run.delay(\"Example plugin\", name=\"Micro\").wait()\n    {\"msg\": \"Hello Micro!!!\"}\n\n\n\nAPI Rest example (using requests)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> import requests\n    >>>\n    >>> url = \"http://localhost:8000/plugins\"\n    >>> response = requests.request(\"GET\", url)\n    >>> print(response.text)\n    [{\"name\": \"Example Plugin\", \"version\": null, \"description\": \"A very simple example plugin\"}]\n    >>>\n    >>> url = \"http://localhost:8000/run/Example%20Plugin\"\n    >>> payload = '{\"name\": \"Micro\"}'\n    >>> headers = {'content-type': 'application/json'}\n    >>> response = requests.request(\"POST\", url, data=payload, headers=headers)\n    >>> print(response.text)\n    {\"msg\": \"Hello Micro!!!\"}\n\nMicro plugins\n-------------\n\nWrite Micro plugins is very simple all that you need is to create\na file called ``interface.py`` and a class which is the plugin itself.\n\n- the ``interface.py`` file defines the plugin metadata\n- the plugin class must:\n\n  - inherit from ``micro.plugin.pluginbase.PluginBase``\n  - implement the ``run`` method\n  - return Python dictionaries on that `run` method\n\n.. code:: python\n\n    from micro.plugin.pluginbase import PluginBase\n    from micro.plugin.pluginbase import PluginDescription\n\n\n    class ExamplePlugin(PluginBase):\n        def __init__(self):\n            print(\"This is an example plugin\")\n\n        # This is the method executed by Micro\n        # Must return a Python dictionary\n        def run(self, name):\n            return {\"msg\": \"Hello \" + name + \"!!!\"}\n\n\n    # This description is required by Micro\n    plugin = PluginDescription(\n        instance=ExamplePlugin,\n        name=\"Example Plugin\",\n        version=\"0.1.0\",\n        url=\"https://github.com/humu1us/micro\",\n        author=\"Jhon Doe\",\n        author_email=\"jhon.doe@email.com\",\n        description=\"A very simple example plugin\",\n        long_description=\"This plugin is a very simple example, \"\n                         \"for that reason, we don't have a long description\",\n        plugin_help=\"Params: name type string; A name to greet\"\n    )\n\nEach plugin needs to have its own folder inside of the plugins directory\n(check the section `\u201cConfiguring\nMicro\u201d <https://github.com/humu1us/micro#configuring-micro>`__ for\ndetails)\n\nThe plugin directory should look like this:\n\n::\n\n    my_plugindir/\n        example-plugin/\n            interface.py\n            exmple_plugin_core/\n                libs...\n        other-plugin/\n            inteface.py\n            other_plugin_core/\n                libs...\n\n\n**IMPORTANT:** All the plugins must provide its own libraries inside of its own\nnamespace in order to avoid overwritting files. The general recomendation is to\nuse a base directory with the same name of the plugin as the example above shows\n\nInstallation\n------------\n\nPyPi:\n\n::\n\n    $ pip install micro\n\nDevelopment version:\n\n::\n\n    $ git clone git@github.com:humu1us/micro.git\n    $ cd micro\n    $ pip install -e .\n\nor direct from repository:\n\n::\n\n    $ pip install git+ssh://git@github.com/humu1us/micro.git\n\nConfiguration\n-------------\n\nParameters priority\n~~~~~~~~~~~~~~~~~~~\n\nMicro can be configurated through CLI, environment variables, config\nfile and/or default values (in that order).\n\nCommand line (CLI)\n~~~~~~~~~~~~~~~~~~\n\nThese arguments are the highest priority for Micro, so these overwrite\nany other parameters set by any other method. The CLI arguments that can\nbe used are:\n\n::\n\n    $ micro -h\n    usage: micro [-d] [-h] [-v] [-c CONFIG_FILE] [-b BIND] [-B BROKER_URL]\n                 [-C] [-cw WORKERS] [-G] [-gw WORKERS] [-H HOSTNAME]\n                 [-ln LOG_FILE_NAME] [-lp LOG_FOLDER_PATH] [-ll LOG_LEVEL]\n                 [-pp PID_FOLDER_PATH] [-p PLUGIN_PATH] [-q TASK_QUEUES]\n\n    optional arguments:\n      -d, --default-values  show default values and exit\n      -h, --help            show this help message and exit\n      -v, --version         show program's version and exit\n      -c CONFIG_FILE, --config-file CONFIG_FILE\n                            path to the config file\n                            env: MICRO_CONFIG_FILE\n                            default: None\n      -b BIND, --bind BIND  Gunicorn bind, HOST:PORT\n                            env: MICRO_BIND\n                            default: 0.0.0.0:8000\n      -B BROKER_URL, --broker-url BROKER_URL\n                            Celery broker URL\n                            env: MICRO_BROKER_URL\n                            default: None\n      -C, --celery          plugins available through Celery\n                            env: MICRO_CELERY\n                            default: None\n      -cw WORKERS, --celery-workers WORKERS\n                            Celery number of workers\n                            env: MICRO_CELERY_WORKERS\n                            default: 1\n      -G, --gunicorn        plugins available through API Rest\n                            env: MICRO_GUNICORN\n                            default: None\n      -gw WORKERS, --gunicorn-workers WORKERS\n                            Gunicorn number of workers\n                            env: MICRO_GUNICORN_WORKERS\n                            default: 1\n      -H HOSTNAME, --hostname HOSTNAME\n                            Celery worker's hostname\n                            env: MICRO_HOSTNAME\n                            default: micro\n      -ln LOG_FILE_NAME, --log-file-name LOG_FILE_NAME\n                            Micro's log file name\n                            env: MICRO_LOG_FILE_NAME\n                            default: micro.log\n      -lp LOG_FOLDER_PATH, --log-folder-path LOG_FOLDER_PATH\n                            path to the Micro's log folder\n                            env: MICRO_LOG_FOLDER_PATH\n                            default: /var/log/micro\n      -ll LOG_LEVEL, --log-level LOG_LEVEL\n                            Micro's log level\n                            env: MICRO_LOG_LEVEL\n                            default: WARNING\n      -pp PID_FOLDER_PATH, --pid-folder-path PID_FOLDER_PATH\n                            path to the Micro's PID folder\n                            env: MICRO_PID_FOLDER_PATH\n                            default: /var/run/micro\n      -p PLUGIN_PATH, --plugin-path PLUGIN_PATH\n                            path to the plugins folder\n                            env: MICRO_PLUGIN_PATH\n                            default: None\n      -q TASK_QUEUES, --task-queues TASK_QUEUES\n                            Celery task queues\n                            env: MICRO_TASK_QUEUES\n                            default: None\n\n**IMPORTANT:** `-G`, `--gunicorn`  or `-C`, `--celery`, or both, must be included otherwise Micro will finish without any message\n\nEnvironment variables\n~~~~~~~~~~~~~~~~~~~~~\n\nThe next priority in parameters for Micro are environment variables. The\nlist of environment variables used are:\n\n::\n\n    MICRO_CONFIG_FILE        # config file location: /path/to/config/config.json\n    MICRO_BIND               # Gunicorn socket bind (host:port)\n    MICRO_BROKER_URL         # broker url: ampq://user:pass@host:port//\n    MICRO_CELERY             # plugins available through Celery\n    MICRO_CELERY_WORKERS     # number of Celery workers (integer number)\n    MICRO_GUNICORN           # plugins available through API Rest (Gunicorn)\n    MICRO_GUNICORN_WORKERS   # number of Gunicorn workers (integer number)\n    MICRO_HOSTNAME           # workers hostname\n    MICRO_LOG_FILE_NAME      # log file name: micro.log\n    MICRO_LOG_FOLDER_PATH    # path to log folder: /path/to/log/folder\n    MICRO_LOG_LEVEL          # minimun log level to write: DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL\n    MICRO_PID_FOLDER_PATH    # path to Celery pid folder: /path/to/pid/folder\n    MICRO_PLUGIN_PATH        # path to plugin folder: /path/to/plugin/folder\n    MICRO_TASK_QUEUES        # queue name used\n\nConfig file\n~~~~~~~~~~~\n\nThe lowest priority is the use of a JSON config file. The path to this\nconfig file must be set using ``-c, --config-file`` CLI arguments or\n``MICRO_CONFIG`` environment variable.\n\nCelery and Gunicorn configurations can be given through this config file as well.\n\nConfig file example:\n\n.. code:: js\n\n    {\n        \"gunicorn\": {\n            \"bind\": \"0.0.0.0:8000\",\n            \"workers\": 1\n        },\n        \"celery\": {\n            \"broker_url\": \"\",\n            \"workers\": 1,\n            \"hostname\": \"micro\",\n            \"task_queues\": \"\"\n        },\n        \"micro\": {\n            \"log_file_name\": \"micro.log\",\n            \"log_folder_path\": \"/var/log/micro\",\n            \"log_level\": \"WARNING\",\n            \"pid_folder_path\": \"/var/run/micro\",\n            \"plugin_path\": \"\"\n        }\n    }\n\nA config file skeleton can be created using the following command:\n``$ micro --default-values > config.json``\n\nDefault values\n~~~~~~~~~~~~~~\n\nThe default values are the same shown above.\n\nCORS support\n~~~~~~~~~~~~\n\nMicro implements CORS support using `Flask-CORS <http://flask-cors.corydolphin.com/en/latest/>`__\nthe configuration must be made inside of the Gunicorn key using the ``cors`` key, the possible\nvalues are `listed in the CORS documentation <https://flask-cors.corydolphin.com/en/latest/api.html#flask_cors.CORS>`__\n\nFor example this configuration allow any client:\n\n.. code:: js\n\n    {\n        \"gunicorn\": {\n            \"bind\": \"0.0.0.0:8000\",\n            \"workers\": 1,\n            \"cors\": {\"origins\": \"*\"}\n        },\n    ...\n\n\nDocker\n------\n\nPull\n~~~~\n\nTo download from Docker Hub:\n\n::\n\n    $ docker pull humu1us/micro:<tag>\n\nTo check the available tags please visit `Micro\u2019s repository on Docker\nHub <https://hub.docker.com/r/humu1us/micro/>`__\n\nBuild\n~~~~~\n\nTo build the container first move to the branch/tag to use and then use\nthe following command:\n\n::\n\n    $ docker build -t micro:<tag> .\n\nRun\n~~~\n\nAll Micro environment variables are available with ``-e`` flag. For\nexample to run Micro with Celery you can do:\n\n::\n\n    $ docker run -d \\\n        -v /path/to/plugins:/etc/micro/plugins \\\n        -v /path/to/log:/var/log/micro \\\n        -e MICRO_BROKER_URL=amqp://guest:guest@my_host:5672// \\\n        -e MICRO_TASK_QUEUES=test \\\n        -e MICRO_HOSTNAME=my_host \\\n        -e MICRO_CELERY_WORKERS=2 \\\n        -e MICRO_CELERY=1 \\\n        micro:<tag>\n\n``MICRO_BROKER_URL`` and ``MICRO_TASK_QUEUES`` are the only mandatory\nenvironment variables to set when Celery will be used.\n\nWhen Micro will be run with API Rest you have to bind the Gunicorn port:\n\n::\n\n    $ docker run -d \\\n        -v /path/to/plugins:/etc/micro/plugins \\\n        -v /path/to/log:/var/log/micro \\\n        -e MICRO_BIND=0.0.0.0:5000 \\\n        -e MICRO_GUNICORN_WORKERS=2 \\\n        -e MICRO_GUNICORN=1 \\\n        -p 5000:5000 \\\n        micro:<tag>\n\nTests\n-----\n\nRun all unit tests with:\n\n::\n\n    $ python setup.py test\n\n.. |travis| image:: https://img.shields.io/travis/humu1us/micro.svg?branch=master&style=flat-square\n   :target: https://travis-ci.org/humu1us/micro\n.. |coverage| image:: https://img.shields.io/coveralls/humu1us/micro.svg?style=flat-square\n   :target: https://coveralls.io/github/humu1us/micro\n.. |pypi| image:: https://img.shields.io/pypi/v/Micro.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/Micro/\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/micro.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/Micro/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/humu1us/micro", "keywords": "microservices celery", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Micro", "package_url": "https://pypi.org/project/Micro/", "platform": "", "project_url": "https://pypi.org/project/Micro/", "project_urls": {"Homepage": "https://github.com/humu1us/micro"}, "release_url": "https://pypi.org/project/Micro/3.1.0/", "requires_dist": ["amqp (<=2.2.2,>2)", "Flask (<2,>=1)", "Flask-Cors (<4,>=3.0.7)", "celery (<=4.1.0,>4)", "gunicorn (<20,>=19.8.1)", "kombu (<=4.1.0,>4)"], "requires_python": "", "summary": "Celery platform to create microservices", "version": "3.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/humu1us/micro\" rel=\"nofollow\"><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60aa32d4962e940ad4aba8eb48b6aad03c997c81/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f68756d753175732f6d6963726f2e7376673f6272616e63683d6d6173746572267374796c653d666c61742d737175617265\"></a> <a href=\"https://coveralls.io/github/humu1us/micro\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/11b2cd218ba043f7888b337c026a7a51512b507a/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f68756d753175732f6d6963726f2e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.python.org/pypi/Micro/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/94b06b774be5dd705adcd4f83aceedc04fcdbf4f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f4d6963726f2e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://pypi.python.org/pypi/Micro/\" rel=\"nofollow\"><img alt=\"pyversion\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4d6fda2c79b35b09b8f18f3fc3d29fa280c231ed/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d6963726f2e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>A platform to create microservices available through <tt>celery</tt> and\nRest (using <tt>gunicorn</tt>) APIs.</p>\n<div id=\"micro-api\">\n<h2>Micro API</h2>\n<p>Micro uses a very simple API to run, list and get information about\nplugins:</p>\n<ul>\n<li><tt>plugins()</tt>: list all available plugins.</li>\n<li><tt>info(plugin_name)</tt>: show information about a specific plugin.</li>\n<li><tt>help(plugin_name)</tt>: show the plugin help.</li>\n<li><tt>run(plugin_name, params)</tt>: execute the given plugin.</li>\n</ul>\n<p>To use this API with Celery you can use the\n<a href=\"https://github.com/humu1us/micro-dev\" rel=\"nofollow\">Micro-dev</a> package who provides\ntwo important libraries, the access to the Celery API and the PluginBase\nclass who allow writing Micro plugins. To use it as API Rest you can use\nthe <tt>requests</tt> python library.</p>\n<div id=\"api-celery-example-using-micro-dev\">\n<h3>API Celery example (using micro-dev)</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">micro.api.endpoints</span> <span class=\"kn\">import</span> <span class=\"n\">Requests</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">Requests</span><span class=\"p\">(</span><span class=\"n\">BROKER_URL</span><span class=\"p\">,</span> <span class=\"n\">QUEUE_NAME</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n<span class=\"s1\">'[{\"name\": \"Example Plugin\", \"version\": null, \"description\": \"A very simple example plugin\"}]'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">delay</span><span class=\"p\">(</span><span class=\"s2\">\"Example plugin\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Micro\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s2\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello Micro!!!\"</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"api-rest-example-using-requests\">\n<h3>API Rest example (using requests)</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://localhost:8000/plugins\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Example Plugin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"n\">null</span><span class=\"p\">,</span> <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"A very simple example plugin\"</span><span class=\"p\">}]</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://localhost:8000/run/Example%20Plugin\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"name\": \"Micro\"}'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'content-type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s2\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello Micro!!!\"</span><span class=\"p\">}</span>\n</pre>\n</div>\n</div>\n<div id=\"micro-plugins\">\n<h2>Micro plugins</h2>\n<p>Write Micro plugins is very simple all that you need is to create\na file called <tt>interface.py</tt> and a class which is the plugin itself.</p>\n<ul>\n<li>the <tt>interface.py</tt> file defines the plugin metadata</li>\n<li>the plugin class must:<ul>\n<li>inherit from <tt>micro.plugin.pluginbase.PluginBase</tt></li>\n<li>implement the <tt>run</tt> method</li>\n<li>return Python dictionaries on that <cite>run</cite> method</li>\n</ul>\n</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">micro.plugin.pluginbase</span> <span class=\"kn\">import</span> <span class=\"n\">PluginBase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">micro.plugin.pluginbase</span> <span class=\"kn\">import</span> <span class=\"n\">PluginDescription</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ExamplePlugin</span><span class=\"p\">(</span><span class=\"n\">PluginBase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"This is an example plugin\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># This is the method executed by Micro</span>\n    <span class=\"c1\"># Must return a Python dictionary</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"msg\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello \"</span> <span class=\"o\">+</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\"!!!\"</span><span class=\"p\">}</span>\n\n\n<span class=\"c1\"># This description is required by Micro</span>\n<span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">PluginDescription</span><span class=\"p\">(</span>\n    <span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"n\">ExamplePlugin</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Example Plugin\"</span><span class=\"p\">,</span>\n    <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s2\">\"0.1.0\"</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s2\">\"https://github.com/humu1us/micro\"</span><span class=\"p\">,</span>\n    <span class=\"n\">author</span><span class=\"o\">=</span><span class=\"s2\">\"Jhon Doe\"</span><span class=\"p\">,</span>\n    <span class=\"n\">author_email</span><span class=\"o\">=</span><span class=\"s2\">\"jhon.doe@email.com\"</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">\"A very simple example plugin\"</span><span class=\"p\">,</span>\n    <span class=\"n\">long_description</span><span class=\"o\">=</span><span class=\"s2\">\"This plugin is a very simple example, \"</span>\n                     <span class=\"s2\">\"for that reason, we don't have a long description\"</span><span class=\"p\">,</span>\n    <span class=\"n\">plugin_help</span><span class=\"o\">=</span><span class=\"s2\">\"Params: name type string; A name to greet\"</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Each plugin needs to have its own folder inside of the plugins directory\n(check the section <a href=\"https://github.com/humu1us/micro#configuring-micro\" rel=\"nofollow\">\u201cConfiguring\nMicro\u201d</a> for\ndetails)</p>\n<p>The plugin directory should look like this:</p>\n<pre>my_plugindir/\n    example-plugin/\n        interface.py\n        exmple_plugin_core/\n            libs...\n    other-plugin/\n        inteface.py\n        other_plugin_core/\n            libs...\n</pre>\n<p><strong>IMPORTANT:</strong> All the plugins must provide its own libraries inside of its own\nnamespace in order to avoid overwritting files. The general recomendation is to\nuse a base directory with the same name of the plugin as the example above shows</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>PyPi:</p>\n<pre>$ pip install micro\n</pre>\n<p>Development version:</p>\n<pre>$ git clone git@github.com:humu1us/micro.git\n$ cd micro\n$ pip install -e .\n</pre>\n<p>or direct from repository:</p>\n<pre>$ pip install git+ssh://git@github.com/humu1us/micro.git\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<div id=\"parameters-priority\">\n<h3>Parameters priority</h3>\n<p>Micro can be configurated through CLI, environment variables, config\nfile and/or default values (in that order).</p>\n</div>\n<div id=\"command-line-cli\">\n<h3>Command line (CLI)</h3>\n<p>These arguments are the highest priority for Micro, so these overwrite\nany other parameters set by any other method. The CLI arguments that can\nbe used are:</p>\n<pre>$ micro -h\nusage: micro [-d] [-h] [-v] [-c CONFIG_FILE] [-b BIND] [-B BROKER_URL]\n             [-C] [-cw WORKERS] [-G] [-gw WORKERS] [-H HOSTNAME]\n             [-ln LOG_FILE_NAME] [-lp LOG_FOLDER_PATH] [-ll LOG_LEVEL]\n             [-pp PID_FOLDER_PATH] [-p PLUGIN_PATH] [-q TASK_QUEUES]\n\noptional arguments:\n  -d, --default-values  show default values and exit\n  -h, --help            show this help message and exit\n  -v, --version         show program's version and exit\n  -c CONFIG_FILE, --config-file CONFIG_FILE\n                        path to the config file\n                        env: MICRO_CONFIG_FILE\n                        default: None\n  -b BIND, --bind BIND  Gunicorn bind, HOST:PORT\n                        env: MICRO_BIND\n                        default: 0.0.0.0:8000\n  -B BROKER_URL, --broker-url BROKER_URL\n                        Celery broker URL\n                        env: MICRO_BROKER_URL\n                        default: None\n  -C, --celery          plugins available through Celery\n                        env: MICRO_CELERY\n                        default: None\n  -cw WORKERS, --celery-workers WORKERS\n                        Celery number of workers\n                        env: MICRO_CELERY_WORKERS\n                        default: 1\n  -G, --gunicorn        plugins available through API Rest\n                        env: MICRO_GUNICORN\n                        default: None\n  -gw WORKERS, --gunicorn-workers WORKERS\n                        Gunicorn number of workers\n                        env: MICRO_GUNICORN_WORKERS\n                        default: 1\n  -H HOSTNAME, --hostname HOSTNAME\n                        Celery worker's hostname\n                        env: MICRO_HOSTNAME\n                        default: micro\n  -ln LOG_FILE_NAME, --log-file-name LOG_FILE_NAME\n                        Micro's log file name\n                        env: MICRO_LOG_FILE_NAME\n                        default: micro.log\n  -lp LOG_FOLDER_PATH, --log-folder-path LOG_FOLDER_PATH\n                        path to the Micro's log folder\n                        env: MICRO_LOG_FOLDER_PATH\n                        default: /var/log/micro\n  -ll LOG_LEVEL, --log-level LOG_LEVEL\n                        Micro's log level\n                        env: MICRO_LOG_LEVEL\n                        default: WARNING\n  -pp PID_FOLDER_PATH, --pid-folder-path PID_FOLDER_PATH\n                        path to the Micro's PID folder\n                        env: MICRO_PID_FOLDER_PATH\n                        default: /var/run/micro\n  -p PLUGIN_PATH, --plugin-path PLUGIN_PATH\n                        path to the plugins folder\n                        env: MICRO_PLUGIN_PATH\n                        default: None\n  -q TASK_QUEUES, --task-queues TASK_QUEUES\n                        Celery task queues\n                        env: MICRO_TASK_QUEUES\n                        default: None\n</pre>\n<p><strong>IMPORTANT:</strong> <cite>-G</cite>, <cite>\u2013gunicorn</cite>  or <cite>-C</cite>, <cite>\u2013celery</cite>, or both, must be included otherwise Micro will finish without any message</p>\n</div>\n<div id=\"environment-variables\">\n<h3>Environment variables</h3>\n<p>The next priority in parameters for Micro are environment variables. The\nlist of environment variables used are:</p>\n<pre>MICRO_CONFIG_FILE        # config file location: /path/to/config/config.json\nMICRO_BIND               # Gunicorn socket bind (host:port)\nMICRO_BROKER_URL         # broker url: ampq://user:pass@host:port//\nMICRO_CELERY             # plugins available through Celery\nMICRO_CELERY_WORKERS     # number of Celery workers (integer number)\nMICRO_GUNICORN           # plugins available through API Rest (Gunicorn)\nMICRO_GUNICORN_WORKERS   # number of Gunicorn workers (integer number)\nMICRO_HOSTNAME           # workers hostname\nMICRO_LOG_FILE_NAME      # log file name: micro.log\nMICRO_LOG_FOLDER_PATH    # path to log folder: /path/to/log/folder\nMICRO_LOG_LEVEL          # minimun log level to write: DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL\nMICRO_PID_FOLDER_PATH    # path to Celery pid folder: /path/to/pid/folder\nMICRO_PLUGIN_PATH        # path to plugin folder: /path/to/plugin/folder\nMICRO_TASK_QUEUES        # queue name used\n</pre>\n</div>\n<div id=\"config-file\">\n<h3>Config file</h3>\n<p>The lowest priority is the use of a JSON config file. The path to this\nconfig file must be set using <tt><span class=\"pre\">-c,</span> <span class=\"pre\">--config-file</span></tt> CLI arguments or\n<tt>MICRO_CONFIG</tt> environment variable.</p>\n<p>Celery and Gunicorn configurations can be given through this config file as well.</p>\n<p>Config file example:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"gunicorn\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"bind\"</span><span class=\"o\">:</span> <span class=\"s2\">\"0.0.0.0:8000\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"workers\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"celery\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"broker_url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"workers\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"hostname\"</span><span class=\"o\">:</span> <span class=\"s2\">\"micro\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"task_queues\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"micro\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"log_file_name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"micro.log\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"log_folder_path\"</span><span class=\"o\">:</span> <span class=\"s2\">\"/var/log/micro\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"log_level\"</span><span class=\"o\">:</span> <span class=\"s2\">\"WARNING\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"pid_folder_path\"</span><span class=\"o\">:</span> <span class=\"s2\">\"/var/run/micro\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"plugin_path\"</span><span class=\"o\">:</span> <span class=\"s2\">\"\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>A config file skeleton can be created using the following command:\n<tt>$ micro <span class=\"pre\">--default-values</span> &gt; config.json</tt></p>\n</div>\n<div id=\"default-values\">\n<h3>Default values</h3>\n<p>The default values are the same shown above.</p>\n</div>\n<div id=\"cors-support\">\n<h3>CORS support</h3>\n<p>Micro implements CORS support using <a href=\"http://flask-cors.corydolphin.com/en/latest/\" rel=\"nofollow\">Flask-CORS</a>\nthe configuration must be made inside of the Gunicorn key using the <tt>cors</tt> key, the possible\nvalues are <a href=\"https://flask-cors.corydolphin.com/en/latest/api.html#flask_cors.CORS\" rel=\"nofollow\">listed in the CORS documentation</a></p>\n<p>For example this configuration allow any client:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"gunicorn\"</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"bind\"</span><span class=\"o\">:</span> <span class=\"s2\">\"0.0.0.0:8000\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"workers\"</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"cors\"</span><span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"origins\"</span><span class=\"o\">:</span> <span class=\"s2\">\"*\"</span><span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">...</span>\n</pre>\n</div>\n</div>\n<div id=\"docker\">\n<h2>Docker</h2>\n<div id=\"pull\">\n<h3>Pull</h3>\n<p>To download from Docker Hub:</p>\n<pre>$ docker pull humu1us/micro:&lt;tag&gt;\n</pre>\n<p>To check the available tags please visit <a href=\"https://hub.docker.com/r/humu1us/micro/\" rel=\"nofollow\">Micro\u2019s repository on Docker\nHub</a></p>\n</div>\n<div id=\"build\">\n<h3>Build</h3>\n<p>To build the container first move to the branch/tag to use and then use\nthe following command:</p>\n<pre>$ docker build -t micro:&lt;tag&gt; .\n</pre>\n</div>\n<div id=\"run\">\n<h3>Run</h3>\n<p>All Micro environment variables are available with <tt><span class=\"pre\">-e</span></tt> flag. For\nexample to run Micro with Celery you can do:</p>\n<pre>$ docker run -d \\\n    -v /path/to/plugins:/etc/micro/plugins \\\n    -v /path/to/log:/var/log/micro \\\n    -e MICRO_BROKER_URL=amqp://guest:guest@my_host:5672// \\\n    -e MICRO_TASK_QUEUES=test \\\n    -e MICRO_HOSTNAME=my_host \\\n    -e MICRO_CELERY_WORKERS=2 \\\n    -e MICRO_CELERY=1 \\\n    micro:&lt;tag&gt;\n</pre>\n<p><tt>MICRO_BROKER_URL</tt> and <tt>MICRO_TASK_QUEUES</tt> are the only mandatory\nenvironment variables to set when Celery will be used.</p>\n<p>When Micro will be run with API Rest you have to bind the Gunicorn port:</p>\n<pre>$ docker run -d \\\n    -v /path/to/plugins:/etc/micro/plugins \\\n    -v /path/to/log:/var/log/micro \\\n    -e MICRO_BIND=0.0.0.0:5000 \\\n    -e MICRO_GUNICORN_WORKERS=2 \\\n    -e MICRO_GUNICORN=1 \\\n    -p 5000:5000 \\\n    micro:&lt;tag&gt;\n</pre>\n</div>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Run all unit tests with:</p>\n<pre>$ python setup.py test\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4948283, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0a1ac59089685701bf948ac91d8b4eb0", "sha256": "3c8d61ac3274d2b4638dcb29fba5f56286ae396abdc4d9284e640c187ae534e9"}, "downloads": -1, "filename": "Micro-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0a1ac59089685701bf948ac91d8b4eb0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17561, "upload_time": "2017-12-28T05:54:31", "upload_time_iso_8601": "2017-12-28T05:54:31.190283Z", "url": "https://files.pythonhosted.org/packages/33/44/06dbbd697b8d8c4fefec32bf46eeb96cae971793ce7275dd4e015a975759/Micro-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9dcf86400c67019b1f53263906644566", "sha256": "253a0f8f0e5fe8bd5246a29baf27adb1d8e95973c9cd532b7afbc51ffee80296"}, "downloads": -1, "filename": "Micro-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9dcf86400c67019b1f53263906644566", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10419, "upload_time": "2017-12-28T05:54:32", "upload_time_iso_8601": "2017-12-28T05:54:32.297495Z", "url": "https://files.pythonhosted.org/packages/53/ab/735e5ee7c4337ebee22ec67fe658648ae88992dbf72824d144ecae683bc6/Micro-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a7515f813ba9e9059c34acacab88ed9e", "sha256": "dd8967910f4f39b765ab43dd785cd95f963b829c62760f341cec2795bfd18134"}, "downloads": -1, "filename": "Micro-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a7515f813ba9e9059c34acacab88ed9e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17886, "upload_time": "2018-01-04T01:05:37", "upload_time_iso_8601": "2018-01-04T01:05:37.486355Z", "url": "https://files.pythonhosted.org/packages/03/46/7effc9818b4bbcb550e897057fcade0e6191bc1937325f721659700ca316/Micro-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "402ada8296d71c34c2a5f113fd43b4df", "sha256": "cd78cf417abba3a7d25a2591690a88bd8a3dd3ea323969c6a7adccbad74826b1"}, "downloads": -1, "filename": "Micro-1.0.1.tar.gz", "has_sig": false, "md5_digest": "402ada8296d71c34c2a5f113fd43b4df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10774, "upload_time": "2018-01-04T01:05:39", "upload_time_iso_8601": "2018-01-04T01:05:39.072297Z", "url": "https://files.pythonhosted.org/packages/fc/36/b3fd369f5f6d678af07964e23c7c8ca8fb6f1ae5f367c76d69d9f0ffd9ab/Micro-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2a45bb4e30f381670fcd03ec8d85a829", "sha256": "91f5391a180acf9aa9beb529b806bfd827d4c612a6184d589bd1575ba10e4489"}, "downloads": -1, "filename": "Micro-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2a45bb4e30f381670fcd03ec8d85a829", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18411, "upload_time": "2018-06-08T04:47:54", "upload_time_iso_8601": "2018-06-08T04:47:54.987383Z", "url": "https://files.pythonhosted.org/packages/1d/0c/8054c81fda268082ceacd2f04810bffea9f0f7b94a593273723401b5cf00/Micro-1.0.2-py3-none-any.whl", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "0d89a44b0bd3fdfaef1f6344fe656e68", "sha256": "ba47593e74bc216ba57bbc028a00a424403271b30d6fc15135020b8ed6198131"}, "downloads": -1, "filename": "Micro-2.0.0.tar.gz", "has_sig": false, "md5_digest": "0d89a44b0bd3fdfaef1f6344fe656e68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16416, "upload_time": "2018-07-18T07:21:46", "upload_time_iso_8601": "2018-07-18T07:21:46.395817Z", "url": "https://files.pythonhosted.org/packages/3c/7f/7d5c26da8c1c47861e8e26759d98575d25c29775b37aff6fa9666a8794c3/Micro-2.0.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "f53b5246a631ccbbdb01bb3c41ca8398", "sha256": "06c16478861cbcac7483fd2879e5546135b587b6d21868590345422b98c7fdfb"}, "downloads": -1, "filename": "Micro-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f53b5246a631ccbbdb01bb3c41ca8398", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28133, "upload_time": "2019-03-13T22:28:13", "upload_time_iso_8601": "2019-03-13T22:28:13.430243Z", "url": "https://files.pythonhosted.org/packages/00/e4/06dea67ffc02f26519be2caab06a124d133fc86c8ad30b160ec14e861bd5/Micro-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7618ab7a0721ebe157ea6419bcf0e80c", "sha256": "6a4ddb5b6ad53b09230a1c50aadec88420a422aeb73d66b5dd627449cf352df6"}, "downloads": -1, "filename": "Micro-3.0.0.tar.gz", "has_sig": false, "md5_digest": "7618ab7a0721ebe157ea6419bcf0e80c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24654, "upload_time": "2019-03-13T22:28:14", "upload_time_iso_8601": "2019-03-13T22:28:14.865611Z", "url": "https://files.pythonhosted.org/packages/c6/57/b420634a888dd3a0b649a8d000815d293766e6460d5966ed1a22d648f1f4/Micro-3.0.0.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "8cf75fb6837c289a192c5a9204d8233f", "sha256": "97490706a809186d1d5c2179b354946bb209ec5254b2555ec3e427251f581eb3"}, "downloads": -1, "filename": "Micro-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8cf75fb6837c289a192c5a9204d8233f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28357, "upload_time": "2019-03-16T18:31:33", "upload_time_iso_8601": "2019-03-16T18:31:33.815387Z", "url": "https://files.pythonhosted.org/packages/57/9e/f91b445dc810c4759a49fb8fd63355a9f7e6d64e128f120ad086528507cd/Micro-3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f135269f078ad6ef73e242af70cfee5c", "sha256": "ad9894d5bf2b66e7bfb7b702fb51716ee504a337c060b8b7b7647809b867fe13"}, "downloads": -1, "filename": "Micro-3.1.0.tar.gz", "has_sig": false, "md5_digest": "f135269f078ad6ef73e242af70cfee5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25239, "upload_time": "2019-03-16T18:31:35", "upload_time_iso_8601": "2019-03-16T18:31:35.537251Z", "url": "https://files.pythonhosted.org/packages/68/6f/bab9e151ee8b146e941ba3a68e6ae50caa4217810ab3840e8316b567611c/Micro-3.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8cf75fb6837c289a192c5a9204d8233f", "sha256": "97490706a809186d1d5c2179b354946bb209ec5254b2555ec3e427251f581eb3"}, "downloads": -1, "filename": "Micro-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8cf75fb6837c289a192c5a9204d8233f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28357, "upload_time": "2019-03-16T18:31:33", "upload_time_iso_8601": "2019-03-16T18:31:33.815387Z", "url": "https://files.pythonhosted.org/packages/57/9e/f91b445dc810c4759a49fb8fd63355a9f7e6d64e128f120ad086528507cd/Micro-3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f135269f078ad6ef73e242af70cfee5c", "sha256": "ad9894d5bf2b66e7bfb7b702fb51716ee504a337c060b8b7b7647809b867fe13"}, "downloads": -1, "filename": "Micro-3.1.0.tar.gz", "has_sig": false, "md5_digest": "f135269f078ad6ef73e242af70cfee5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25239, "upload_time": "2019-03-16T18:31:35", "upload_time_iso_8601": "2019-03-16T18:31:35.537251Z", "url": "https://files.pythonhosted.org/packages/68/6f/bab9e151ee8b146e941ba3a68e6ae50caa4217810ab3840e8316b567611c/Micro-3.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:21 2020"}