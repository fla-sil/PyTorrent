{"info": {"author": "Shoya Ishimaru", "author_email": "shoya.ishimaru@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7"], "description": "zChainer\n========\n\nscikit-learn like interface and stacked autoencoder for chainer\n\nRequirements\n------------\n\n-  numpy\n-  scikit-learn\n-  chainer >= 1.5\n\nInstallation\n------------\n\n::\n\n    pip install zChainer\n\nUsage\n-----\n\nAutoencoder\n~~~~~~~~~~~\n\n.. code:: python\n\n    import numpy as np\n    import chainer.functions as F\n    import chainer.links as L\n    from chainer import ChainList, optimizers\n    from zChainer import NNAutoEncoder, utility\n\n    data = (..).astype(np.float32)\n\n    encoder = ChainList(\n        L.Linear(784, 200),\n        L.Linear(200, 100))\n    decoder =ChainList(\n        L.Linear(200, 784),\n        L.Linear(100, 200))\n\n    # You can set your own forward function. Default is as below.\n    #def forward(self, x):\n    #    h = F.dropout(F.relu(self.model[0](x)))\n    #    return F.dropout(F.relu(self.model[1](h)))\n    #\n    #NNAutoEncoder.forward = forward\n    ae = NNAutoEncoder(encoder, decoder, optimizers.Adam(), epoch=100, batch_size=100,\n        log_path=\"./ae_log_\"+utility.now()+\".csv\", export_path=\"./ae_\"+utility.now()+\".model\")\n\n    ae.fit(data)\n\nTraining and Testing\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import numpy as np\n    import chainer.functions as F\n    import chainer.links as L\n    from chainer import ChainList, optimizers\n    from zChainer import NNManager, utility\n    import pickle\n\n    X_train = (..).astype(np.float32)\n    y_train = (..).astype(np.int32)\n    X_test = (..).astype(np.float32)\n    y_test = (..).astype(np.int32)\n\n    # Create a new network\n    model = ChainList(L.Linear(784, 200), L.Linear(200, 100), L.Linear(100, 10))\n\n    # or load a serialized model\n    #f = open(\"./ae_2015-12-01_11-26-45.model\")\n    #model = pickle.load(f)\n    #f.close()\n    #model.add_link(L.Linear(100,10))\n\n    def forward(self, x):\n        h = F.relu(self.model[0](x))\n        h = F.relu(self.model[1](h))\n        return F.relu(self.model[2](h))\n\n    def output(self, y):\n        y_trimed = y.data.argmax(axis=1)\n        return np.array(y_trimed, dtype=np.int32)\n\n    NNManager.forward = forward\n    NNManager.output = output\n    nn = NNManager(model, optimizers.Adam(), F.softmax_cross_entropy,\n        epoch=100, batch_size=100,\n        log_path=\"./training_log_\"+utility.now()+\".csv\")\n\n    nn.fit(X_train, y_train, is_classification=True)\n    nn.predict(X_test, y_test)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shoya140/zChainer", "keywords": "deep neural network,machine learning", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "zChainer", "package_url": "https://pypi.org/project/zChainer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zChainer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/shoya140/zChainer"}, "release_url": "https://pypi.org/project/zChainer/0.3.2/", "requires_dist": null, "requires_python": null, "summary": "scikit-learn like interface and stacked autoencoder for chainer", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>scikit-learn like interface and stacked autoencoder for chainer</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>numpy</li>\n<li>scikit-learn</li>\n<li>chainer &gt;= 1.5</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install zChainer\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"autoencoder\">\n<h3>Autoencoder</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">chainer.functions</span> <span class=\"k\">as</span> <span class=\"nn\">F</span>\n<span class=\"kn\">import</span> <span class=\"nn\">chainer.links</span> <span class=\"k\">as</span> <span class=\"nn\">L</span>\n<span class=\"kn\">from</span> <span class=\"nn\">chainer</span> <span class=\"kn\">import</span> <span class=\"n\">ChainList</span><span class=\"p\">,</span> <span class=\"n\">optimizers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zChainer</span> <span class=\"kn\">import</span> <span class=\"n\">NNAutoEncoder</span><span class=\"p\">,</span> <span class=\"n\">utility</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n\n<span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">ChainList</span><span class=\"p\">(</span>\n    <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">784</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span>\n    <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n<span class=\"n\">decoder</span> <span class=\"o\">=</span><span class=\"n\">ChainList</span><span class=\"p\">(</span>\n    <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">784</span><span class=\"p\">),</span>\n    <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># You can set your own forward function. Default is as below.</span>\n<span class=\"c1\">#def forward(self, x):</span>\n<span class=\"c1\">#    h = F.dropout(F.relu(self.model[0](x)))</span>\n<span class=\"c1\">#    return F.dropout(F.relu(self.model[1](h)))</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#NNAutoEncoder.forward = forward</span>\n<span class=\"n\">ae</span> <span class=\"o\">=</span> <span class=\"n\">NNAutoEncoder</span><span class=\"p\">(</span><span class=\"n\">encoder</span><span class=\"p\">,</span> <span class=\"n\">decoder</span><span class=\"p\">,</span> <span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(),</span> <span class=\"n\">epoch</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"n\">log_path</span><span class=\"o\">=</span><span class=\"s2\">\"./ae_log_\"</span><span class=\"o\">+</span><span class=\"n\">utility</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s2\">\".csv\"</span><span class=\"p\">,</span> <span class=\"n\">export_path</span><span class=\"o\">=</span><span class=\"s2\">\"./ae_\"</span><span class=\"o\">+</span><span class=\"n\">utility</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s2\">\".model\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">ae</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"training-and-testing\">\n<h3>Training and Testing</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">chainer.functions</span> <span class=\"k\">as</span> <span class=\"nn\">F</span>\n<span class=\"kn\">import</span> <span class=\"nn\">chainer.links</span> <span class=\"k\">as</span> <span class=\"nn\">L</span>\n<span class=\"kn\">from</span> <span class=\"nn\">chainer</span> <span class=\"kn\">import</span> <span class=\"n\">ChainList</span><span class=\"p\">,</span> <span class=\"n\">optimizers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zChainer</span> <span class=\"kn\">import</span> <span class=\"n\">NNManager</span><span class=\"p\">,</span> <span class=\"n\">utility</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n\n<span class=\"n\">X_train</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n<span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create a new network</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ChainList</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">784</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"n\">L</span><span class=\"o\">.</span><span class=\"n\">Linear</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># or load a serialized model</span>\n<span class=\"c1\">#f = open(\"./ae_2015-12-01_11-26-45.model\")</span>\n<span class=\"c1\">#model = pickle.load(f)</span>\n<span class=\"c1\">#f.close()</span>\n<span class=\"c1\">#model.add_link(L.Linear(100,10))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">forward</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">](</span><span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">h</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">relu</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">h</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">y_trimed</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">argmax</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">y_trimed</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n\n<span class=\"n\">NNManager</span><span class=\"o\">.</span><span class=\"n\">forward</span> <span class=\"o\">=</span> <span class=\"n\">forward</span>\n<span class=\"n\">NNManager</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">output</span>\n<span class=\"n\">nn</span> <span class=\"o\">=</span> <span class=\"n\">NNManager</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(),</span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">softmax_cross_entropy</span><span class=\"p\">,</span>\n    <span class=\"n\">epoch</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n    <span class=\"n\">log_path</span><span class=\"o\">=</span><span class=\"s2\">\"./training_log_\"</span><span class=\"o\">+</span><span class=\"n\">utility</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">+</span><span class=\"s2\">\".csv\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">is_classification</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2067006, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "23ca466ee7befac76e871a976e8e5412", "sha256": "1000c45f8e8af518e0b9dfbcaea83491281c45156f98885d53ea1971fbb307bb"}, "downloads": -1, "filename": "zChainer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "23ca466ee7befac76e871a976e8e5412", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3389, "upload_time": "2015-12-01T03:13:30", "upload_time_iso_8601": "2015-12-01T03:13:30.175140Z", "url": "https://files.pythonhosted.org/packages/fc/5d/1fa95192a6fa4e1d0b30c8bc085dbe52fb5c9548ee5a7f6c5ca09591850b/zChainer-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7d1d25b9e5646c77dc91ca1a39a9940e", "sha256": "f70bdfa4ee47dab06608636c67b6e2ccc36a074c245a1a43cce795e3a46345b4"}, "downloads": -1, "filename": "zChainer-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7d1d25b9e5646c77dc91ca1a39a9940e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3418, "upload_time": "2015-12-01T03:23:22", "upload_time_iso_8601": "2015-12-01T03:23:22.202258Z", "url": "https://files.pythonhosted.org/packages/24/db/7c14591816f10695339e9a9a793a9edbb3674d7cf6f6ba15df0c621c7337/zChainer-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "44248e3aea70c177673ce8001ec58f6a", "sha256": "f929495894a6db6d4c2a16bca4edc340fd1f55cfbd5699673ee9844c99677a28"}, "downloads": -1, "filename": "zChainer-0.1.2.tar.gz", "has_sig": false, "md5_digest": "44248e3aea70c177673ce8001ec58f6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3412, "upload_time": "2015-12-01T03:37:54", "upload_time_iso_8601": "2015-12-01T03:37:54.197205Z", "url": "https://files.pythonhosted.org/packages/11/b1/10ba4f196400c2d97ccbab14f6b96ad0bc95934b0fa9b51b4bb7940966d6/zChainer-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0eaa5331621535625af1edf1d50e2fbb", "sha256": "38fc000fb34d9bf60ae75db0b271a3bcc04cc1cfb3f3bf0b59827a444c7e6ea7"}, "downloads": -1, "filename": "zChainer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0eaa5331621535625af1edf1d50e2fbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3418, "upload_time": "2015-12-01T05:17:19", "upload_time_iso_8601": "2015-12-01T05:17:19.426510Z", "url": "https://files.pythonhosted.org/packages/df/36/8fa22206f9d7a61b1c54999f5aa58951cb5878355d985c9cde4a3654860e/zChainer-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "784c81472c2311601deffdc7acca3489", "sha256": "debd1c6f1b9c04788b0d85458973aacbab6137699acb19f665c9d7e74476bec4"}, "downloads": -1, "filename": "zChainer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "784c81472c2311601deffdc7acca3489", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3556, "upload_time": "2015-12-01T15:30:35", "upload_time_iso_8601": "2015-12-01T15:30:35.854856Z", "url": "https://files.pythonhosted.org/packages/58/5f/cff59226c643635822c83a753db1efa6d701af4534ce702944252fcfbca2/zChainer-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5e35bb0b3e83c3bcc8d404fad14cd76c", "sha256": "d02dbecf1b7f319ddae7a606aeb3831a177125d430a586a1c87c1bc3069b06ab"}, "downloads": -1, "filename": "zChainer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5e35bb0b3e83c3bcc8d404fad14cd76c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3569, "upload_time": "2015-12-04T15:13:45", "upload_time_iso_8601": "2015-12-04T15:13:45.354441Z", "url": "https://files.pythonhosted.org/packages/1b/1d/2ae618b47cd0ccd10df7c913ccb6c3c80dd2a31f17695f35c44a605fb6a0/zChainer-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "6f7a1b313532b7fdaf54c44729db5c23", "sha256": "50181474d5e9c6669055effa2ab14ecff3abb0999bd797621a554cef25351d78"}, "downloads": -1, "filename": "zChainer-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6f7a1b313532b7fdaf54c44729db5c23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3570, "upload_time": "2015-12-04T15:21:53", "upload_time_iso_8601": "2015-12-04T15:21:53.515508Z", "url": "https://files.pythonhosted.org/packages/9d/13/c05d5157dac5c782519a37722c668543d9e717dc6210c9757f6d0d823018/zChainer-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a8865a380191f26ea01e6cc35ce9ac4d", "sha256": "c9188ff7eca75107430227b44712685f07439e50cd91dca05d0c46caddd13615"}, "downloads": -1, "filename": "zChainer-0.3.0.tar.gz", "has_sig": false, "md5_digest": "a8865a380191f26ea01e6cc35ce9ac4d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3714, "upload_time": "2016-04-10T08:45:32", "upload_time_iso_8601": "2016-04-10T08:45:32.554696Z", "url": "https://files.pythonhosted.org/packages/3d/60/ba8b5376b4ada453d70ec9eb46b3d258d513c89eb26f330dbcde0607cea5/zChainer-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "1396da476666a96302b43a04e2976931", "sha256": "0a1a54698122560fb25120f04ecdd66beea344cf240da16f14eaee691a151dc4"}, "downloads": -1, "filename": "zChainer-0.3.1.tar.gz", "has_sig": false, "md5_digest": "1396da476666a96302b43a04e2976931", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3730, "upload_time": "2016-04-12T16:37:45", "upload_time_iso_8601": "2016-04-12T16:37:45.511128Z", "url": "https://files.pythonhosted.org/packages/20/2a/ff626329541c970f7b2e62f7aab0280e7e217a0457149b2ec5ffe9b97148/zChainer-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "1d5262beadbcbd444333e657a5d7aa77", "sha256": "ceebcacb13f5bf000452e0fdb099bd6c706af43ff0c7df2227109ecb32495fa1"}, "downloads": -1, "filename": "zChainer-0.3.2.tar.gz", "has_sig": false, "md5_digest": "1d5262beadbcbd444333e657a5d7aa77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3728, "upload_time": "2016-04-16T11:41:02", "upload_time_iso_8601": "2016-04-16T11:41:02.664195Z", "url": "https://files.pythonhosted.org/packages/a3/8b/c5098e686351297db0d79a834f3d82a2365e6a05beb709068ab07871f9fc/zChainer-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d5262beadbcbd444333e657a5d7aa77", "sha256": "ceebcacb13f5bf000452e0fdb099bd6c706af43ff0c7df2227109ecb32495fa1"}, "downloads": -1, "filename": "zChainer-0.3.2.tar.gz", "has_sig": false, "md5_digest": "1d5262beadbcbd444333e657a5d7aa77", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3728, "upload_time": "2016-04-16T11:41:02", "upload_time_iso_8601": "2016-04-16T11:41:02.664195Z", "url": "https://files.pythonhosted.org/packages/a3/8b/c5098e686351297db0d79a834f3d82a2365e6a05beb709068ab07871f9fc/zChainer-0.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:19 2020"}