{"info": {"author": "Pavel Polishchuk", "author_email": "pavel_polishchuk@ukr.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Chemistry"], "description": "# CReM - chemically reasonable mutations\n\n**CReM** is an open-source Python framework to generate chemical structures using a fragment-based approach.\n\nThe main idea behind is similar to matched molecular pairs considering context that fragments in the identical context are interchangeable. Therefore, one can create a database of interchangeable fragments and use it for generation of chemically valid structures.\n\n**Features:**  \n1) Generation of a custom fragment database  \n2) Three modes of structure generation: MUTATE, GROW, LINK  \n3) Context radius to consider for replacement  \n4) Fragment size to replace and the size of a replacing fragment  \n5) Protection of atoms from modification (e.g. scaffold protection)  \n6) Replacements with fragments occurred in a fragment database with certain minimal frequency  \n7) Make randomly chosen replacements up to the specified number  \n\n**Limitations and known issues**\n1) New ring systems cannot be constructed from fragments, thus representativeness of ring systems in generated structures depends on a used fragment database. We are working on that issue.\n2) Very large molecules will not be processed by CReM. If a molecule has more than 30 non-single single bonds it will not be MUTATED. If a molecule has more than 100 hydrogen atoms it will not be processed by GROW and LINK. If you need to process such large structures please contact me.\n3) Canonicalisation of contexts depends on RDKit SMILES representation. Thus, changing in RDKit SMILES representation may affect fragment databases and make impossible to use a database prepared with previous RDKit version from code running under later RDKit versions.  \n\n## Documentation\n\nhttps://crem.readthedocs.io/en/latest/\n\n## Installation\n\nSeveral command line utilities will be installed to create fragment databases and `crem` module will become available in Python imports to generate structures.\n\nFrom pypi package\n```text\npip install crem\n```\n\nManually from repository\n```text\ngit clone https://github.com/DrrDom/crem\ncd crem\npython3 setup.py sdist bdist_wheel\npip install dist/crem-0.1-py3-none-any.whl\n```\n\nUninstall\n```text\npip uninstall crem\n```\n\n## Dependencies\n\n`crem` requires `rdkit>=2017.09`. To run the guacamol test `guacamol` should be installed.\n\n## Generation of a fragment database\n\nThis step is required if you want to generate a custom fragment database. You can download precompiled databases obtained by fragmentation of the whole ChEMBL by links provided on this page - http://www.qsar4u.com/pages/crem.php.  \n\nFor convenience there is the bash script crem_create_frag_db.sh which includes all steps below. It takes three positional arguments: input file with SMILES, output directory where intermediate files and a final database will be stored and number of CPUs to use (this is optional, default value is 1).\n```text\ncrem_create_frag_db.sh input.smi fragdb_dir 32\n```\n\nFragmentation of input structures:\n```text\nfragmentation -i input.smi -o frags.txt -c 32 -v\n```\n\nConvert fragments to standardized representation of a core and a context of a given radius:\n```text\nfrag_to_env -i frags.txt -o r3.txt -r 3 -c 32 -v\n```\n\nRemove duplicated lines in the output file and count frequency of occurrence of fragemnt-context pairs. These (`sort` and `uniq`) are `bash` utilities but since Win10 is Linux-friendly that should not be a big issue for Win users to execute them\n```text\nsort r3.txt | uniq -c > r3_c.txt\n```\n\nCreate DB and import the file to a database table\n```text\nenv_to_db -i r3_c.txt -o fragments.db -r 3 -c -v\n```\n\nLast three steps should be executed for each radius. All tables can be stored in the same database.\n\n## Structure generation\n\nImport necessary functions from the main module\n```python\nfrom crem.crem import mutate_mol, grow_mol, link_mols\nfrom rdkit import Chem\n```\n\nCreate a molecute and **mutate** it. Only one heavy atom will be substituted. Default radius is 3.\n```python\nm = Chem.MolFromSmiles('c1cc(OC)ccc1C')  # methoxytoluene\nmols = list(mutate_mol(m, db_name='replacements.db', max_size=1))\n```\noutput example\n```text\n['CCc1ccc(C)cc1',\n 'CC#Cc1ccc(C)cc1',\n 'C=C(C)c1ccc(C)cc1',\n 'CCCc1ccc(C)cc1',\n 'CC=Cc1ccc(C)cc1',\n 'CCCCc1ccc(C)cc1',\n 'CCCOc1ccc(C)cc1',\n 'CNCCc1ccc(C)cc1',\n 'COCCc1ccc(C)cc1',\n ...\n 'Cc1ccc(C(C)(C)C)cc1']\n```\n\n\nAdd hydrogens to the molecule to **mutate hydrogens** as well\n```python\nmols = list(mutate_mol(Chem.AddHs(m), db_name='replacements.db', max_size=1))\n```\noutput\n```text\n['CCc1ccc(C)cc1',\n 'CC#Cc1ccc(C)cc1',\n 'C=C(C)c1ccc(C)cc1',\n 'CCCc1ccc(C)cc1',\n 'Cc1ccc(C(C)C)cc1',\n 'CC=Cc1ccc(C)cc1',\n ...\n 'COc1ccc(C)cc1C',\n 'C=Cc1cc(C)ccc1OC',\n 'COc1ccc(C)cc1Cl',\n 'COc1ccc(C)cc1CCl']\n```\n\n**Grow** molecule. Only hydrogens will be replaced. Hydrogens should not be added explicitly.\n```python\nmols = list(grow_mol(m, db_name='replacements_sc2.db'))\n```\noutput\n```text\n['COc1ccc(C)c(Br)c1',\n 'COc1ccc(C)c(C)c1',\n 'COc1ccc(C)c(Cl)c1',\n 'COc1ccc(C)c(OC)c1',\n 'COc1ccc(C)c(N)c1',\n ...\n 'COc1ccc(CCN)cc1']\n```\n\nCreate the second molecule and **link** it to toluene\n```python\nm2 = Chem.MolFromSmiles('NCC(=O)O')  # glycine\nmols = list(link_mols(m, m2, db_name='replacements.db'))\n```\noutput\n```text\n['Cc1ccc(OCC(=O)NCC(=O)O)cc1',\n 'Cc1ccc(OCCOC(=O)CN)cc1',\n 'COc1ccc(CC(=N)NCC(=O)O)cc1',\n 'COc1ccc(CC(=O)NCC(=O)O)cc1',\n 'COc1ccc(CC(=S)NCC(=O)O)cc1',\n 'COc1ccc(CCOC(=O)CN)cc1']\n```\n\nYou can vary the size of a linker and specify the distance between two attachment points in a linking fragment. There are many other arguments available in these functions, look at their **docstrings** for details.\n\n##### Multiprocessing\nAll functions have an argument `ncores` and can make mupltile replacement in one molecule in parallel. If you want to process several molecules in parallel you have to write your own code. However, the described functions are generators and cannot be used with `multiprocessing` module. Therefore, three complementary functions `mutate_mol2`, `grow_mol2` and `link_mols2` were created. They return the list with results and can be pickled and used with `multiprocessing.Pool` or other tools.\n\nExample:\n```python\nfrom multiprocessing import Pool\nfrom functools import partial\nfrom crem.crem import mutate_mol2\nfrom rdkit import Chem\n\np = Pool(2)\ninput_smi = ['c1ccccc1N', 'NCC(=O)OC', 'NCCCO']\ninput_mols = [Chem.MolFromSmiles(s) for s in input_smi]\n\nres = list(p.imap(partial(mutate_mol2, db_name='replacements.db', max_size=1), input_mols))\n```\n\n`res` would be a list of lists with SMILES of generated molecules\n\n## Bechmarks\n\n##### Guacamol\n\n|task|SMILES LSTM*|SMILES GA*|Graph GA*|Graph MCTS*|CReM\n|---|:---:|:---:|:---:|:---:|:---:|\n|Celecoxib rediscovery|**1.000**|0.732|**1.000**|0.355|**1.000**\n|Troglitazone rediscovery|**1.000**|0.515|**1.000**|0.311|**1.000**\n|Thiothixene rediscovery|**1.000**|0.598|**1.000**|0.311|**1.000**\n|Aripiprazole similarity|**1.000**|0.834|**1.000**|0.380|**1.000**\n|Albuterol similarity|**1.000**|0.907|**1.000**|0.749|**1.000**\n|Mestranol similarity|**1.000**|0.79|**1.000**|0.402|**1.000**\n|C11H24|**0.993**|0.829|0.971|0.410|0.966\n|C9H10N2O2PF2Cl|0.879|0.889|**0.982**|0.631|0.940\n|Median molecules 1|**0.438**|0.334|0.406|0.225|0.371\n|Median molecules 2|0.422|0.38|0.432|0.170|**0.434**\n|Osimertinib MPO|0.907|0.886|0.953|0.784|**0.995**\n|Fexofenadine MPO|0.959|0.931|0.998|0.695|**1.000**\n|Ranolazine MPO|0.855|0.881|0.92|0.616|**0.969**\n|Perindopril MPO|0.808|0.661|0.792|0.385|**0.815**\n|Amlodipine MPO|0.894|0.722|0.894|0.533|**0.902**\n|Sitagliptin MPO|0.545|0.689|**0.891**|0.458|0.763\n|Zaleplon MPO|0.669|0.413|0.754|0.488|**0.770**\n|Valsartan SMARTS|0.978|0.552|0.990|0.04|**0.994**\n|Deco Hop|0.996|0.970|**1.000**|0.590|**1.000**\n|Scaffold Hop|0.998|0.885|**1.000**|0.478|**1.000**\n|total score|17.341|14.398|17.983|9.011|17.919\n\n## License\nBSD-3\n\n## Citation\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DrrDom/crem", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "crem", "package_url": "https://pypi.org/project/crem/", "platform": "", "project_url": "https://pypi.org/project/crem/", "project_urls": {"Homepage": "https://github.com/DrrDom/crem"}, "release_url": "https://pypi.org/project/crem/0.2/", "requires_dist": ["rdkit (>=2017.09) ; extra == 'rdkit'"], "requires_python": ">=3.6", "summary": "CReM: chemically reasonable mutations framework", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CReM - chemically reasonable mutations</h1>\n<p><strong>CReM</strong> is an open-source Python framework to generate chemical structures using a fragment-based approach.</p>\n<p>The main idea behind is similar to matched molecular pairs considering context that fragments in the identical context are interchangeable. Therefore, one can create a database of interchangeable fragments and use it for generation of chemically valid structures.</p>\n<p><strong>Features:</strong></p>\n<ol>\n<li>Generation of a custom fragment database</li>\n<li>Three modes of structure generation: MUTATE, GROW, LINK</li>\n<li>Context radius to consider for replacement</li>\n<li>Fragment size to replace and the size of a replacing fragment</li>\n<li>Protection of atoms from modification (e.g. scaffold protection)</li>\n<li>Replacements with fragments occurred in a fragment database with certain minimal frequency</li>\n<li>Make randomly chosen replacements up to the specified number</li>\n</ol>\n<p><strong>Limitations and known issues</strong></p>\n<ol>\n<li>New ring systems cannot be constructed from fragments, thus representativeness of ring systems in generated structures depends on a used fragment database. We are working on that issue.</li>\n<li>Very large molecules will not be processed by CReM. If a molecule has more than 30 non-single single bonds it will not be MUTATED. If a molecule has more than 100 hydrogen atoms it will not be processed by GROW and LINK. If you need to process such large structures please contact me.</li>\n<li>Canonicalisation of contexts depends on RDKit SMILES representation. Thus, changing in RDKit SMILES representation may affect fragment databases and make impossible to use a database prepared with previous RDKit version from code running under later RDKit versions.</li>\n</ol>\n<h2>Documentation</h2>\n<p><a href=\"https://crem.readthedocs.io/en/latest/\" rel=\"nofollow\">https://crem.readthedocs.io/en/latest/</a></p>\n<h2>Installation</h2>\n<p>Several command line utilities will be installed to create fragment databases and <code>crem</code> module will become available in Python imports to generate structures.</p>\n<p>From pypi package</p>\n<pre>pip install crem\n</pre>\n<p>Manually from repository</p>\n<pre>git clone https://github.com/DrrDom/crem\ncd crem\npython3 setup.py sdist bdist_wheel\npip install dist/crem-0.1-py3-none-any.whl\n</pre>\n<p>Uninstall</p>\n<pre>pip uninstall crem\n</pre>\n<h2>Dependencies</h2>\n<p><code>crem</code> requires <code>rdkit&gt;=2017.09</code>. To run the guacamol test <code>guacamol</code> should be installed.</p>\n<h2>Generation of a fragment database</h2>\n<p>This step is required if you want to generate a custom fragment database. You can download precompiled databases obtained by fragmentation of the whole ChEMBL by links provided on this page - <a href=\"http://www.qsar4u.com/pages/crem.php\" rel=\"nofollow\">http://www.qsar4u.com/pages/crem.php</a>.</p>\n<p>For convenience there is the bash script crem_create_frag_db.sh which includes all steps below. It takes three positional arguments: input file with SMILES, output directory where intermediate files and a final database will be stored and number of CPUs to use (this is optional, default value is 1).</p>\n<pre>crem_create_frag_db.sh input.smi fragdb_dir 32\n</pre>\n<p>Fragmentation of input structures:</p>\n<pre>fragmentation -i input.smi -o frags.txt -c 32 -v\n</pre>\n<p>Convert fragments to standardized representation of a core and a context of a given radius:</p>\n<pre>frag_to_env -i frags.txt -o r3.txt -r 3 -c 32 -v\n</pre>\n<p>Remove duplicated lines in the output file and count frequency of occurrence of fragemnt-context pairs. These (<code>sort</code> and <code>uniq</code>) are <code>bash</code> utilities but since Win10 is Linux-friendly that should not be a big issue for Win users to execute them</p>\n<pre>sort r3.txt | uniq -c &gt; r3_c.txt\n</pre>\n<p>Create DB and import the file to a database table</p>\n<pre>env_to_db -i r3_c.txt -o fragments.db -r 3 -c -v\n</pre>\n<p>Last three steps should be executed for each radius. All tables can be stored in the same database.</p>\n<h2>Structure generation</h2>\n<p>Import necessary functions from the main module</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">crem.crem</span> <span class=\"kn\">import</span> <span class=\"n\">mutate_mol</span><span class=\"p\">,</span> <span class=\"n\">grow_mol</span><span class=\"p\">,</span> <span class=\"n\">link_mols</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rdkit</span> <span class=\"kn\">import</span> <span class=\"n\">Chem</span>\n</pre>\n<p>Create a molecute and <strong>mutate</strong> it. Only one heavy atom will be substituted. Default radius is 3.</p>\n<pre><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Chem</span><span class=\"o\">.</span><span class=\"n\">MolFromSmiles</span><span class=\"p\">(</span><span class=\"s1\">'c1cc(OC)ccc1C'</span><span class=\"p\">)</span>  <span class=\"c1\"># methoxytoluene</span>\n<span class=\"n\">mols</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">mutate_mol</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"s1\">'replacements.db'</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<p>output example</p>\n<pre>['CCc1ccc(C)cc1',\n 'CC#Cc1ccc(C)cc1',\n 'C=C(C)c1ccc(C)cc1',\n 'CCCc1ccc(C)cc1',\n 'CC=Cc1ccc(C)cc1',\n 'CCCCc1ccc(C)cc1',\n 'CCCOc1ccc(C)cc1',\n 'CNCCc1ccc(C)cc1',\n 'COCCc1ccc(C)cc1',\n ...\n 'Cc1ccc(C(C)(C)C)cc1']\n</pre>\n<p>Add hydrogens to the molecule to <strong>mutate hydrogens</strong> as well</p>\n<pre><span class=\"n\">mols</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">mutate_mol</span><span class=\"p\">(</span><span class=\"n\">Chem</span><span class=\"o\">.</span><span class=\"n\">AddHs</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">),</span> <span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"s1\">'replacements.db'</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<p>output</p>\n<pre>['CCc1ccc(C)cc1',\n 'CC#Cc1ccc(C)cc1',\n 'C=C(C)c1ccc(C)cc1',\n 'CCCc1ccc(C)cc1',\n 'Cc1ccc(C(C)C)cc1',\n 'CC=Cc1ccc(C)cc1',\n ...\n 'COc1ccc(C)cc1C',\n 'C=Cc1cc(C)ccc1OC',\n 'COc1ccc(C)cc1Cl',\n 'COc1ccc(C)cc1CCl']\n</pre>\n<p><strong>Grow</strong> molecule. Only hydrogens will be replaced. Hydrogens should not be added explicitly.</p>\n<pre><span class=\"n\">mols</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">grow_mol</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"s1\">'replacements_sc2.db'</span><span class=\"p\">))</span>\n</pre>\n<p>output</p>\n<pre>['COc1ccc(C)c(Br)c1',\n 'COc1ccc(C)c(C)c1',\n 'COc1ccc(C)c(Cl)c1',\n 'COc1ccc(C)c(OC)c1',\n 'COc1ccc(C)c(N)c1',\n ...\n 'COc1ccc(CCN)cc1']\n</pre>\n<p>Create the second molecule and <strong>link</strong> it to toluene</p>\n<pre><span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">Chem</span><span class=\"o\">.</span><span class=\"n\">MolFromSmiles</span><span class=\"p\">(</span><span class=\"s1\">'NCC(=O)O'</span><span class=\"p\">)</span>  <span class=\"c1\"># glycine</span>\n<span class=\"n\">mols</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">link_mols</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">m2</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"s1\">'replacements.db'</span><span class=\"p\">))</span>\n</pre>\n<p>output</p>\n<pre>['Cc1ccc(OCC(=O)NCC(=O)O)cc1',\n 'Cc1ccc(OCCOC(=O)CN)cc1',\n 'COc1ccc(CC(=N)NCC(=O)O)cc1',\n 'COc1ccc(CC(=O)NCC(=O)O)cc1',\n 'COc1ccc(CC(=S)NCC(=O)O)cc1',\n 'COc1ccc(CCOC(=O)CN)cc1']\n</pre>\n<p>You can vary the size of a linker and specify the distance between two attachment points in a linking fragment. There are many other arguments available in these functions, look at their <strong>docstrings</strong> for details.</p>\n<h5>Multiprocessing</h5>\n<p>All functions have an argument <code>ncores</code> and can make mupltile replacement in one molecule in parallel. If you want to process several molecules in parallel you have to write your own code. However, the described functions are generators and cannot be used with <code>multiprocessing</code> module. Therefore, three complementary functions <code>mutate_mol2</code>, <code>grow_mol2</code> and <code>link_mols2</code> were created. They return the list with results and can be pickled and used with <code>multiprocessing.Pool</code> or other tools.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">multiprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">Pool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">crem.crem</span> <span class=\"kn\">import</span> <span class=\"n\">mutate_mol2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rdkit</span> <span class=\"kn\">import</span> <span class=\"n\">Chem</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">input_smi</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'c1ccccc1N'</span><span class=\"p\">,</span> <span class=\"s1\">'NCC(=O)OC'</span><span class=\"p\">,</span> <span class=\"s1\">'NCCCO'</span><span class=\"p\">]</span>\n<span class=\"n\">input_mols</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Chem</span><span class=\"o\">.</span><span class=\"n\">MolFromSmiles</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">input_smi</span><span class=\"p\">]</span>\n\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">imap</span><span class=\"p\">(</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">mutate_mol2</span><span class=\"p\">,</span> <span class=\"n\">db_name</span><span class=\"o\">=</span><span class=\"s1\">'replacements.db'</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">input_mols</span><span class=\"p\">))</span>\n</pre>\n<p><code>res</code> would be a list of lists with SMILES of generated molecules</p>\n<h2>Bechmarks</h2>\n<h5>Guacamol</h5>\n<table>\n<thead>\n<tr>\n<th>task</th>\n<th align=\"center\">SMILES LSTM*</th>\n<th align=\"center\">SMILES GA*</th>\n<th align=\"center\">Graph GA*</th>\n<th align=\"center\">Graph MCTS*</th>\n<th align=\"center\">CReM</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Celecoxib rediscovery</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.732</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.355</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>Troglitazone rediscovery</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.515</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.311</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>Thiothixene rediscovery</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.598</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.311</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>Aripiprazole similarity</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.834</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.380</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>Albuterol similarity</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.907</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.749</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>Mestranol similarity</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.79</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.402</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>C11H24</td>\n<td align=\"center\"><strong>0.993</strong></td>\n<td align=\"center\">0.829</td>\n<td align=\"center\">0.971</td>\n<td align=\"center\">0.410</td>\n<td align=\"center\">0.966</td>\n</tr>\n<tr>\n<td>C9H10N2O2PF2Cl</td>\n<td align=\"center\">0.879</td>\n<td align=\"center\">0.889</td>\n<td align=\"center\"><strong>0.982</strong></td>\n<td align=\"center\">0.631</td>\n<td align=\"center\">0.940</td>\n</tr>\n<tr>\n<td>Median molecules 1</td>\n<td align=\"center\"><strong>0.438</strong></td>\n<td align=\"center\">0.334</td>\n<td align=\"center\">0.406</td>\n<td align=\"center\">0.225</td>\n<td align=\"center\">0.371</td>\n</tr>\n<tr>\n<td>Median molecules 2</td>\n<td align=\"center\">0.422</td>\n<td align=\"center\">0.38</td>\n<td align=\"center\">0.432</td>\n<td align=\"center\">0.170</td>\n<td align=\"center\"><strong>0.434</strong></td>\n</tr>\n<tr>\n<td>Osimertinib MPO</td>\n<td align=\"center\">0.907</td>\n<td align=\"center\">0.886</td>\n<td align=\"center\">0.953</td>\n<td align=\"center\">0.784</td>\n<td align=\"center\"><strong>0.995</strong></td>\n</tr>\n<tr>\n<td>Fexofenadine MPO</td>\n<td align=\"center\">0.959</td>\n<td align=\"center\">0.931</td>\n<td align=\"center\">0.998</td>\n<td align=\"center\">0.695</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>Ranolazine MPO</td>\n<td align=\"center\">0.855</td>\n<td align=\"center\">0.881</td>\n<td align=\"center\">0.92</td>\n<td align=\"center\">0.616</td>\n<td align=\"center\"><strong>0.969</strong></td>\n</tr>\n<tr>\n<td>Perindopril MPO</td>\n<td align=\"center\">0.808</td>\n<td align=\"center\">0.661</td>\n<td align=\"center\">0.792</td>\n<td align=\"center\">0.385</td>\n<td align=\"center\"><strong>0.815</strong></td>\n</tr>\n<tr>\n<td>Amlodipine MPO</td>\n<td align=\"center\">0.894</td>\n<td align=\"center\">0.722</td>\n<td align=\"center\">0.894</td>\n<td align=\"center\">0.533</td>\n<td align=\"center\"><strong>0.902</strong></td>\n</tr>\n<tr>\n<td>Sitagliptin MPO</td>\n<td align=\"center\">0.545</td>\n<td align=\"center\">0.689</td>\n<td align=\"center\"><strong>0.891</strong></td>\n<td align=\"center\">0.458</td>\n<td align=\"center\">0.763</td>\n</tr>\n<tr>\n<td>Zaleplon MPO</td>\n<td align=\"center\">0.669</td>\n<td align=\"center\">0.413</td>\n<td align=\"center\">0.754</td>\n<td align=\"center\">0.488</td>\n<td align=\"center\"><strong>0.770</strong></td>\n</tr>\n<tr>\n<td>Valsartan SMARTS</td>\n<td align=\"center\">0.978</td>\n<td align=\"center\">0.552</td>\n<td align=\"center\">0.990</td>\n<td align=\"center\">0.04</td>\n<td align=\"center\"><strong>0.994</strong></td>\n</tr>\n<tr>\n<td>Deco Hop</td>\n<td align=\"center\">0.996</td>\n<td align=\"center\">0.970</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.590</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>Scaffold Hop</td>\n<td align=\"center\">0.998</td>\n<td align=\"center\">0.885</td>\n<td align=\"center\"><strong>1.000</strong></td>\n<td align=\"center\">0.478</td>\n<td align=\"center\"><strong>1.000</strong></td>\n</tr>\n<tr>\n<td>total score</td>\n<td align=\"center\">17.341</td>\n<td align=\"center\">14.398</td>\n<td align=\"center\">17.983</td>\n<td align=\"center\">9.011</td>\n<td align=\"center\">17.919</td>\n</tr></tbody></table>\n<h2>License</h2>\n<p>BSD-3</p>\n<h2>Citation</h2>\n\n          </div>"}, "last_serial": 6924293, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "91755da1bc8ba74f10cff8d568d963d3", "sha256": "703a9d4462ace746406a92ccb2a77b50ea90a174af0744fa678f443f3f3839b8"}, "downloads": -1, "filename": "crem-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "91755da1bc8ba74f10cff8d568d963d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24458, "upload_time": "2019-08-22T07:14:54", "upload_time_iso_8601": "2019-08-22T07:14:54.451232Z", "url": "https://files.pythonhosted.org/packages/a5/79/77c701c0c0eb2ce6701319a95cfd29493e8e51618c5bb621cd40bf4f0841/crem-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3dbb1c1bbdb85df4a7f9758636fee06e", "sha256": "55c4dcbe560c22209543219d705b9b24a78222adcb26e8e0531f455bf1bbfe15"}, "downloads": -1, "filename": "crem-0.1.tar.gz", "has_sig": false, "md5_digest": "3dbb1c1bbdb85df4a7f9758636fee06e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20106, "upload_time": "2019-08-22T07:14:57", "upload_time_iso_8601": "2019-08-22T07:14:57.231018Z", "url": "https://files.pythonhosted.org/packages/49/5e/1ae619500a3515623022dcfe0a8b1a9d1d5f008b2eb2655caf766fff025b/crem-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "b6891a88e8590075e2bb56707c718635", "sha256": "a229df9b266ebe9e241985b0034cf26c5ce89802a21ae3a3c4fd4f7e0bcb5523"}, "downloads": -1, "filename": "crem-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b6891a88e8590075e2bb56707c718635", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27669, "upload_time": "2020-03-31T23:57:58", "upload_time_iso_8601": "2020-03-31T23:57:58.425449Z", "url": "https://files.pythonhosted.org/packages/b0/1d/ba7abcc6068ab5ce0bec9fba20510f689c1bec42848c239eeb97fc3cdb5b/crem-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b96df62685cce287c314b05a23cc6975", "sha256": "d61dae034ccbe369f94b0fae869e50808b08f4d64c7f44c5ccca75e7b197f83b"}, "downloads": -1, "filename": "crem-0.2.tar.gz", "has_sig": false, "md5_digest": "b96df62685cce287c314b05a23cc6975", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24910, "upload_time": "2020-03-31T23:58:00", "upload_time_iso_8601": "2020-03-31T23:58:00.466685Z", "url": "https://files.pythonhosted.org/packages/83/fb/667430dda039b8185d02dcdcaf4adf889cffa3d9e39514b631f8c9368e33/crem-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6891a88e8590075e2bb56707c718635", "sha256": "a229df9b266ebe9e241985b0034cf26c5ce89802a21ae3a3c4fd4f7e0bcb5523"}, "downloads": -1, "filename": "crem-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b6891a88e8590075e2bb56707c718635", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27669, "upload_time": "2020-03-31T23:57:58", "upload_time_iso_8601": "2020-03-31T23:57:58.425449Z", "url": "https://files.pythonhosted.org/packages/b0/1d/ba7abcc6068ab5ce0bec9fba20510f689c1bec42848c239eeb97fc3cdb5b/crem-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b96df62685cce287c314b05a23cc6975", "sha256": "d61dae034ccbe369f94b0fae869e50808b08f4d64c7f44c5ccca75e7b197f83b"}, "downloads": -1, "filename": "crem-0.2.tar.gz", "has_sig": false, "md5_digest": "b96df62685cce287c314b05a23cc6975", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24910, "upload_time": "2020-03-31T23:58:00", "upload_time_iso_8601": "2020-03-31T23:58:00.466685Z", "url": "https://files.pythonhosted.org/packages/83/fb/667430dda039b8185d02dcdcaf4adf889cffa3d9e39514b631f8c9368e33/crem-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:20 2020"}