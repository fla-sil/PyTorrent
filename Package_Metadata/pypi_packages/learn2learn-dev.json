{"info": {"author": "Debajyoti Datta, Ian bunner, Seb Arnold, Praateek Mahajan", "author_email": "smr.arnold@gmail.com, praateekm@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/learnables/learn2learn/gh-pages/assets/img/l2l-full.png\" height=\"120px\" /></p>\n\n--------------------------------------------------------------------------------\n\n[![Build Status](https://travis-ci.com/learnables/learn2learn.svg?branch=master)](https://travis-ci.com/learnables/learn2learn)\n\nlearn2learn is a PyTorch library for meta-learning implementations.\n\nThe goal of meta-learning is to enable agents to *learn how to learn*.\nThat is, we would like our agents to become better learners as they solve more and more tasks.\nFor example, the animation below shows an agent that learns to run after a only one parameter update.\n\n<p align=\"center\"><img src=\"http://learn2learn.net/assets/img/halfcheetah.gif\" height=\"250px\" /></p>\n\n**Features**\n\nlearn2learn provides high- and low-level utilities for meta-learning.\nThe high-level utilities allow arbitrary users to take advantage of exisiting meta-learning algorithms.\nThe low-level utilities enable researchers to develop new and better meta-learning algorithms.\n\nSome features of learn2learn include:\n\n* Modular API: implement your own training loops with our low-level utilities.\n* Provides various meta-learning algorithms (e.g. MAML, FOMAML, MetaSGD, ProtoNets, DiCE)\n* Task generator with unified API, compatible with torchvision, torchtext, torchaudio, and cherry.\n* Provides standardized meta-learning tasks for vision (Omniglot, mini-ImageNet), reinforcement learning (Particles, Mujoco), and even text (news classification).\n* 100% compatible with PyTorch -- use your own modules, datasets, or libraries!\n\n## Installation\n\n~~~bash\npip install learn2learn\n~~~\n\n## API Demo\n\nThe following is an example of using the high-level MAML implementation on MNIST.\nFor more algorithms and lower-level utilities, please refer to the [documentation](http://learn2learn.net/docs/learn2learn/) or the [examples](https://github.com/learnables/learn2learn/tree/master/examples).\n\n~~~python\nimport learn2learn as l2l\n\nmnist = torchvision.datasets.MNIST(root=\"/tmp/mnist\", train=True)\n\nmnist = l2l.data.MetaDataset(mnist)\ntrain_tasks = l2l.data.TaskDataset(mnist,\n                                   task_transforms=[\n                                        NWays(mnist, n=3),\n                                        KShots(mnist, k=1),\n                                        LoadData(mnist),\n                                   ],\n                                   num_tasks=10)\nmodel = Net()\nmaml = l2l.algorithms.MAML(model, lr=1e-3, first_order=False)\nopt = optim.Adam(maml.parameters(), lr=4e-3)\n\nfor iteration in range(num_iterations):\n    learner = maml.clone()  # Creates a clone of model\n    for task in train_tasks:\n        # Split task in adaptation_task and evalutation_task\n        # Fast adapt\n        for step in range(adaptation_steps):\n            error = compute_loss(adaptation_task)\n            learner.adapt(error)\n\n        # Compute evaluation loss\n        evaluation_error = compute_loss(evaluation_task)\n\n        # Meta-update the model parameters\n        opt.zero_grad()\n        evaluation_error.backward()\n        opt.step()\n~~~\n\n## Changelog\n\nA human-readable changelog is available in the [CHANGELOG.md](CHANGELOG.md) file.\n\n## Documentation\n\nDocumentation and tutorials are available on learn2learn\u2019s website: [http://learn2learn.net](http://learn2learn.net).\n\n## Citation\n\nTo cite the `learn2learn` repository in your academic publications, please use the following reference.\n\n> Sebastien M.R. Arnold, Praateek Mahajan, Debajyoti Datta, Ian Bunner. `\"learn2learn\"`. [https://github.com/learnables/learn2learn](https://github.com/learnables/learn2learn), 2019.\n\nYou can also use the following Bibtex entry.\n\n~~~bib\n@misc{learn2learn2019,\n    author       = {Sebastien M.R. Arnold, Praateek Mahajan, Debajyoti Datta, Ian Bunner},\n    title        = {learn2learn},\n    month        = sep,\n    year         = 2019,\n    url          = {https://github.com/learnables/learn2learn}\n    }\n~~~\n\n### Acknowledgements & Friends\n\n1. The RL environments are adapted from Tristan Deleu's [implementations](https://github.com/tristandeleu/pytorch-maml-rl) and from the ProMP [repository](https://github.com/jonasrothfuss/ProMP/). Both shared with permission, under the MIT License.\n2. [TorchMeta](https://github.com/tristandeleu/pytorch-meta) is similar library, with a focus on supervised meta-learning. If learn2learn were missing a particular functionality, we would go check if TorchMeta has it. But we would also open an issue ;)\n3. [higher](https://github.com/facebookresearch/higher) is a PyTorch library that also enables differentiating through optimization inner-loops. Their approach is different from learn2learn in that they monkey-patch nn.Module to be stateless. For more information, refer to [their ArXiv paper](https://arxiv.org/abs/1910.01727).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/learnables/learn2learn/archive/0.1.0.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/learnables/learn2learn", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "learn2learn-dev", "package_url": "https://pypi.org/project/learn2learn-dev/", "platform": "", "project_url": "https://pypi.org/project/learn2learn-dev/", "project_urls": {"Download": "https://github.com/learnables/learn2learn/archive/0.1.0.zip", "Homepage": "https://github.com/learnables/learn2learn"}, "release_url": "https://pypi.org/project/learn2learn-dev/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "PyTorch Meta-Learning Framework for Researchers", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\"><img height=\"120px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bae80b56acc961adca8c5acdfe2960ffb3d2f30d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6c6561726e61626c65732f6c6561726e326c6561726e2f67682d70616765732f6173736574732f696d672f6c326c2d66756c6c2e706e67\"></p>\n<hr>\n<p><a href=\"https://travis-ci.com/learnables/learn2learn\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa7120b8c5c07e31b8f3e20af5434eb05e48a714/68747470733a2f2f7472617669732d63692e636f6d2f6c6561726e61626c65732f6c6561726e326c6561726e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>learn2learn is a PyTorch library for meta-learning implementations.</p>\n<p>The goal of meta-learning is to enable agents to <em>learn how to learn</em>.\nThat is, we would like our agents to become better learners as they solve more and more tasks.\nFor example, the animation below shows an agent that learns to run after a only one parameter update.</p>\n<p align=\"center\"><img height=\"250px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2fa86471a6c0e8f67599c5bf4c39c533a60572b/687474703a2f2f6c6561726e326c6561726e2e6e65742f6173736574732f696d672f68616c66636865657461682e676966\"></p>\n<p><strong>Features</strong></p>\n<p>learn2learn provides high- and low-level utilities for meta-learning.\nThe high-level utilities allow arbitrary users to take advantage of exisiting meta-learning algorithms.\nThe low-level utilities enable researchers to develop new and better meta-learning algorithms.</p>\n<p>Some features of learn2learn include:</p>\n<ul>\n<li>Modular API: implement your own training loops with our low-level utilities.</li>\n<li>Provides various meta-learning algorithms (e.g. MAML, FOMAML, MetaSGD, ProtoNets, DiCE)</li>\n<li>Task generator with unified API, compatible with torchvision, torchtext, torchaudio, and cherry.</li>\n<li>Provides standardized meta-learning tasks for vision (Omniglot, mini-ImageNet), reinforcement learning (Particles, Mujoco), and even text (news classification).</li>\n<li>100% compatible with PyTorch -- use your own modules, datasets, or libraries!</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install learn2learn\n</pre>\n<h2>API Demo</h2>\n<p>The following is an example of using the high-level MAML implementation on MNIST.\nFor more algorithms and lower-level utilities, please refer to the <a href=\"http://learn2learn.net/docs/learn2learn/\" rel=\"nofollow\">documentation</a> or the <a href=\"https://github.com/learnables/learn2learn/tree/master/examples\" rel=\"nofollow\">examples</a>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">learn2learn</span> <span class=\"k\">as</span> <span class=\"nn\">l2l</span>\n\n<span class=\"n\">mnist</span> <span class=\"o\">=</span> <span class=\"n\">torchvision</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">MNIST</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"s2\">\"/tmp/mnist\"</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">mnist</span> <span class=\"o\">=</span> <span class=\"n\">l2l</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">MetaDataset</span><span class=\"p\">(</span><span class=\"n\">mnist</span><span class=\"p\">)</span>\n<span class=\"n\">train_tasks</span> <span class=\"o\">=</span> <span class=\"n\">l2l</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">TaskDataset</span><span class=\"p\">(</span><span class=\"n\">mnist</span><span class=\"p\">,</span>\n                                   <span class=\"n\">task_transforms</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                                        <span class=\"n\">NWays</span><span class=\"p\">(</span><span class=\"n\">mnist</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n                                        <span class=\"n\">KShots</span><span class=\"p\">(</span><span class=\"n\">mnist</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n                                        <span class=\"n\">LoadData</span><span class=\"p\">(</span><span class=\"n\">mnist</span><span class=\"p\">),</span>\n                                   <span class=\"p\">],</span>\n                                   <span class=\"n\">num_tasks</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Net</span><span class=\"p\">()</span>\n<span class=\"n\">maml</span> <span class=\"o\">=</span> <span class=\"n\">l2l</span><span class=\"o\">.</span><span class=\"n\">algorithms</span><span class=\"o\">.</span><span class=\"n\">MAML</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">1e-3</span><span class=\"p\">,</span> <span class=\"n\">first_order</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">opt</span> <span class=\"o\">=</span> <span class=\"n\">optim</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">(</span><span class=\"n\">maml</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">(),</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">4e-3</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">iteration</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_iterations</span><span class=\"p\">):</span>\n    <span class=\"n\">learner</span> <span class=\"o\">=</span> <span class=\"n\">maml</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span>  <span class=\"c1\"># Creates a clone of model</span>\n    <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">train_tasks</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Split task in adaptation_task and evalutation_task</span>\n        <span class=\"c1\"># Fast adapt</span>\n        <span class=\"k\">for</span> <span class=\"n\">step</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">adaptation_steps</span><span class=\"p\">):</span>\n            <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">compute_loss</span><span class=\"p\">(</span><span class=\"n\">adaptation_task</span><span class=\"p\">)</span>\n            <span class=\"n\">learner</span><span class=\"o\">.</span><span class=\"n\">adapt</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Compute evaluation loss</span>\n        <span class=\"n\">evaluation_error</span> <span class=\"o\">=</span> <span class=\"n\">compute_loss</span><span class=\"p\">(</span><span class=\"n\">evaluation_task</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Meta-update the model parameters</span>\n        <span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">zero_grad</span><span class=\"p\">()</span>\n        <span class=\"n\">evaluation_error</span><span class=\"o\">.</span><span class=\"n\">backward</span><span class=\"p\">()</span>\n        <span class=\"n\">opt</span><span class=\"o\">.</span><span class=\"n\">step</span><span class=\"p\">()</span>\n</pre>\n<h2>Changelog</h2>\n<p>A human-readable changelog is available in the <a href=\"CHANGELOG.md\" rel=\"nofollow\">CHANGELOG.md</a> file.</p>\n<h2>Documentation</h2>\n<p>Documentation and tutorials are available on learn2learn\u2019s website: <a href=\"http://learn2learn.net\" rel=\"nofollow\">http://learn2learn.net</a>.</p>\n<h2>Citation</h2>\n<p>To cite the <code>learn2learn</code> repository in your academic publications, please use the following reference.</p>\n<blockquote>\n<p>Sebastien M.R. Arnold, Praateek Mahajan, Debajyoti Datta, Ian Bunner. <code>\"learn2learn\"</code>. <a href=\"https://github.com/learnables/learn2learn\" rel=\"nofollow\">https://github.com/learnables/learn2learn</a>, 2019.</p>\n</blockquote>\n<p>You can also use the following Bibtex entry.</p>\n<pre><span class=\"nc\">@misc</span><span class=\"p\">{</span><span class=\"nl\">learn2learn2019</span><span class=\"p\">,</span>\n    <span class=\"na\">author</span>       <span class=\"p\">=</span> <span class=\"s\">{Sebastien M.R. Arnold, Praateek Mahajan, Debajyoti Datta, Ian Bunner}</span><span class=\"p\">,</span>\n    <span class=\"na\">title</span>        <span class=\"p\">=</span> <span class=\"s\">{learn2learn}</span><span class=\"p\">,</span>\n    <span class=\"na\">month</span>        <span class=\"p\">=</span> <span class=\"nv\">sep</span><span class=\"p\">,</span>\n    <span class=\"na\">year</span>         <span class=\"p\">=</span> <span class=\"m\">2019</span><span class=\"p\">,</span>\n    <span class=\"na\">url</span>          <span class=\"p\">=</span> <span class=\"s\">{https://github.com/learnables/learn2learn}</span>\n    <span class=\"p\">}</span>\n</pre>\n<h3>Acknowledgements &amp; Friends</h3>\n<ol>\n<li>The RL environments are adapted from Tristan Deleu's <a href=\"https://github.com/tristandeleu/pytorch-maml-rl\" rel=\"nofollow\">implementations</a> and from the ProMP <a href=\"https://github.com/jonasrothfuss/ProMP/\" rel=\"nofollow\">repository</a>. Both shared with permission, under the MIT License.</li>\n<li><a href=\"https://github.com/tristandeleu/pytorch-meta\" rel=\"nofollow\">TorchMeta</a> is similar library, with a focus on supervised meta-learning. If learn2learn were missing a particular functionality, we would go check if TorchMeta has it. But we would also open an issue ;)</li>\n<li><a href=\"https://github.com/facebookresearch/higher\" rel=\"nofollow\">higher</a> is a PyTorch library that also enables differentiating through optimization inner-loops. Their approach is different from learn2learn in that they monkey-patch nn.Module to be stateless. For more information, refer to <a href=\"https://arxiv.org/abs/1910.01727\" rel=\"nofollow\">their ArXiv paper</a>.</li>\n</ol>\n\n          </div>"}, "last_serial": 6730711, "releases": {"0.0.6.1": [{"comment_text": "", "digests": {"md5": "5de204c55ce6ca63c0311dc7dedb0c1f", "sha256": "5a9095e387677166d5c2fb84a971ee10ad9fb807bf775ff1d45cce79b6ae4ec4"}, "downloads": -1, "filename": "learn2learn-dev-0.0.6.1.tar.gz", "has_sig": false, "md5_digest": "5de204c55ce6ca63c0311dc7dedb0c1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 279077, "upload_time": "2020-02-24T04:01:27", "upload_time_iso_8601": "2020-02-24T04:01:27.591810Z", "url": "https://files.pythonhosted.org/packages/f5/df/d7ab29fc7af483066302e9b2495824bc548761db26ecaa693ba53db103d1/learn2learn-dev-0.0.6.1.tar.gz", "yanked": false}], "0.0.6.2": [{"comment_text": "", "digests": {"md5": "74614b085d984b484fce64a8b01e63fa", "sha256": "500ae36fe45937f5f4b30c303a40c16969dd6a5991be15d6372ee5e3d7397137"}, "downloads": -1, "filename": "learn2learn-dev-0.0.6.2.tar.gz", "has_sig": false, "md5_digest": "74614b085d984b484fce64a8b01e63fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 284553, "upload_time": "2020-02-24T04:12:27", "upload_time_iso_8601": "2020-02-24T04:12:27.886096Z", "url": "https://files.pythonhosted.org/packages/b8/88/8b31874da45f6483854c0cf403d73ce64f3ebd4c8c6da170485850e3bbb1/learn2learn-dev-0.0.6.2.tar.gz", "yanked": false}], "0.0.6.3": [{"comment_text": "", "digests": {"md5": "6b34bfa139ebfae87c13452ab0269683", "sha256": "a7749e6d5f105e3d35dc5afe7f9b3d6131e3893017ff274a836c19536592a1c6"}, "downloads": -1, "filename": "learn2learn-dev-0.0.6.3.tar.gz", "has_sig": false, "md5_digest": "6b34bfa139ebfae87c13452ab0269683", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 278369, "upload_time": "2020-02-26T18:17:53", "upload_time_iso_8601": "2020-02-26T18:17:53.870205Z", "url": "https://files.pythonhosted.org/packages/8f/91/8c96356e0b1c895e811cb1c30e78a78e05c1b77d996776c166cfda6d8ed1/learn2learn-dev-0.0.6.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "8cfb8595b563f552cbd2c8463f16c2c5", "sha256": "736a2c83d29464d4b4b1a93bfc9692800f38995a646a179521159e9558d69638"}, "downloads": -1, "filename": "learn2learn-dev-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8cfb8595b563f552cbd2c8463f16c2c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 264022, "upload_time": "2020-03-02T01:16:33", "upload_time_iso_8601": "2020-03-02T01:16:33.537932Z", "url": "https://files.pythonhosted.org/packages/72/cf/eef899192e63b600dcc79711c155f4f380450b58204ac0c92716230d3ef9/learn2learn-dev-0.1.0.tar.gz", "yanked": false}], "0.1.0b0": [{"comment_text": "", "digests": {"md5": "1565982d0b704fb29a07d2d5a7290c1f", "sha256": "25d33fd4ed3af5b021430d756b631530b5ee12efef09ca39b67abd205b41c8ed"}, "downloads": -1, "filename": "learn2learn-dev-0.1.0b0.tar.gz", "has_sig": false, "md5_digest": "1565982d0b704fb29a07d2d5a7290c1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1339936, "upload_time": "2020-03-02T01:22:36", "upload_time_iso_8601": "2020-03-02T01:22:36.098783Z", "url": "https://files.pythonhosted.org/packages/19/aa/1e05b5ea91d034600c76e5652f6e13178829608d9330df03806f53c1df7b/learn2learn-dev-0.1.0b0.tar.gz", "yanked": false}], "0.1.0rc0": [{"comment_text": "", "digests": {"md5": "0dd3cfdadabf3075cbba9e91e6c92fee", "sha256": "e1ea1577ebcb98f4dfcea6ef8e4f426c736fafa8cc2e416be266c25f54a14ca2"}, "downloads": -1, "filename": "learn2learn-dev-0.1.0rc0.tar.gz", "has_sig": false, "md5_digest": "0dd3cfdadabf3075cbba9e91e6c92fee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 534071, "upload_time": "2020-03-02T01:32:26", "upload_time_iso_8601": "2020-03-02T01:32:26.547443Z", "url": "https://files.pythonhosted.org/packages/4a/a7/508369cb00c7922ac7cf876e3689f91e656f9f891efaae580fc1dc4036cb/learn2learn-dev-0.1.0rc0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8cfb8595b563f552cbd2c8463f16c2c5", "sha256": "736a2c83d29464d4b4b1a93bfc9692800f38995a646a179521159e9558d69638"}, "downloads": -1, "filename": "learn2learn-dev-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8cfb8595b563f552cbd2c8463f16c2c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 264022, "upload_time": "2020-03-02T01:16:33", "upload_time_iso_8601": "2020-03-02T01:16:33.537932Z", "url": "https://files.pythonhosted.org/packages/72/cf/eef899192e63b600dcc79711c155f4f380450b58204ac0c92716230d3ef9/learn2learn-dev-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:18 2020"}