{"info": {"author": "Philip Paquette", "author_email": "pcpaquette@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Games/Entertainment :: Board Games"], "description": "# Diplomacy: DATC-Compliant Game Engine [![Build Status](https://travis-ci.org/diplomacy/diplomacy.svg?branch=master)](https://travis-ci.org/diplomacy/diplomacy) [![Documentation Status](https://readthedocs.org/projects/diplomacy/badge/?version=latest)](https://docs.diplomacy.ai/en/latest/?badge=latest)\n\nThis project contains an open-source DATC-compliant Diplomacy game engine, a client-server architecture for network play, a web interface to play against bots and to visualize games, and a DAIDE-compatible adapter to connect DAIDE bots to the server.\n\n<p align=\"center\">\n  <img width=\"500\" src=\"docs/images/map_overview.png\" alt=\"Diplomacy Map Overview\">\n</p>\n\n## Documentation\n\nThe complete documentation is available at [docs.diplomacy.ai](https://docs.diplomacy.ai/).\n\n## Getting Started\n\n### Installation\n\nThe latest version of the package can be installed with:\n\n```python3\npip install diplomacy\n```\n\nThe package is compatible with Python 3.5, 3.6, and 3.7.\n\n### Running a game\n\nThe following script plays a game locally by submitting random valid orders until the game is completed.\n\n```python3\nimport random\nfrom diplomacy import Game\nfrom diplomacy.utils.export import to_saved_game_format\n\n# Creating a game\n# Alternatively, a map_name can be specified as an argument. e.g. Game(map_name='pure')\ngame = Game()\nwhile not game.is_game_done:\n\n    # Getting the list of possible orders for all locations\n    possible_orders = game.get_all_possible_orders()\n\n    # For each power, randomly sampling a valid order\n    for power_name, power in game.powers.items():\n        power_orders = [random.choice(possible_orders[loc]) for loc in game.get_orderable_locations(power_name)\n                        if possible_orders[loc]]\n        game.set_orders(power_name, power_orders)\n\n    # Messages can be sent locally with game.add_message\n    # e.g. game.add_message(Message(sender='FRANCE',\n    #                               recipient='ENGLAND',\n    #                               message='This is a message',\n    #                               phase=self.get_current_phase(),\n    #                               time_sent=int(time.time())))\n\n    # Processing the game to move to the next phase\n    game.process()\n\n# Exporting the game to disk to visualize (game is appended to file)\n# Alternatively, we can do >> file.write(json.dumps(to_saved_game_format(game)))\nto_saved_game_format(game, output_path='game.json')\n```\n\n## Web interface\n\nIt is also possible to install a web interface in React to play against bots and/or other humans and to visualize games.\n\nThe web interface can be installed with:\n\n```bash\n# Install NVM\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n\n# Clone repo\ngit clone https://github.com/diplomacy/diplomacy.git\n\n# Install package locally\n# You may want to install it in a conda or virtualenv environment\ncd diplomacy/\npip install -r requirements_dev.txt\n\n# Build node modules\ncd diplomacy/web\nnpm install .\nnpm install . --only=dev\n\n# In a terminal window or tab - Launch React server\nnpm start\n\n# In another terminal window or tab - Launch diplomacy server\npython -m diplomacy.server.run\n```\n\nThe web interface will be accessible at http://localhost:3000.\n\nTo login, users can use admin/password or username/password. Additional users can be created by logging in with a username that does not exist in the database.\n\n![](docs/images/web_interface.png)\n\n### Visualizing a game\n\nIt is possible to visualize a game by using the \"Load a game from disk\" menu on the top-right corner of the web interface.\n\n![](docs/images/visualize_game.png)\n\n\n## Network Game\n\nIt is possible to join a game remotely over a network using websockets. The script below plays a game over a network.\n\nNote. The server must be started with `python -m diplomacy.server.run` for the script to work.\n\n```python3\nimport asyncio\nimport random\nfrom diplomacy.client.connection import connect\nfrom diplomacy.utils import exceptions\n\nPOWERS = ['AUSTRIA', 'ENGLAND', 'FRANCE', 'GERMANY', 'ITALY', 'RUSSIA', 'TURKEY']\n\nasync def create_game(game_id, hostname='localhost', port=8432):\n    \"\"\" Creates a game on the server \"\"\"\n    connection = await connect(hostname, port)\n    channel = await connection.authenticate('random_user', 'password')\n    await channel.create_game(game_id=game_id, rules={'REAL_TIME', 'NO_DEADLINE', 'POWER_CHOICE'})\n\nasync def play(game_id, power_name, hostname='localhost', port=8432):\n    \"\"\" Play as the specified power \"\"\"\n    connection = await connect(hostname, port)\n    channel = await connection.authenticate('user_' + power_name, 'password')\n\n    # Waiting for the game, then joining it\n    while not (await channel.list_games(game_id=game_id)):\n        await asyncio.sleep(1.)\n    game = await channel.join_game(game_id=game_id, power_name=power_name)\n\n    # Playing game\n    while not game.is_game_done:\n        current_phase = game.get_current_phase()\n\n        # Submitting orders\n        if game.get_orderable_locations(power_name):\n            possible_orders = game.get_all_possible_orders()\n            orders = [random.choice(possible_orders[loc]) for loc in game.get_orderable_locations(power_name)\n                      if possible_orders[loc]]\n            print('[%s/%s] - Submitted: %s' % (power_name, game.get_current_phase(), orders))\n            await game.set_orders(power_name=power_name, orders=orders, wait=False)\n\n        # Messages can be sent with game.send_message\n        # await game.send_game_message(message=game.new_power_message('FRANCE', 'This is the message'))\n\n        # Waiting for game to be processed\n        while current_phase == game.get_current_phase():\n            await asyncio.sleep(0.1)\n\n    # A local copy of the game can be saved with to_saved_game_format\n    # To download a copy of the game with messages from all powers, you need to export the game as an admin\n    # by logging in as 'admin' / 'password'\n\nasync def launch(game_id):\n    \"\"\" Creates and plays a network game \"\"\"\n    await create_game(game_id)\n    await asyncio.gather(*[play(game_id, power_name) for power_name in POWERS])\n\nif __name__ == '__main__':\n    asyncio.run(launch(game_id=str(random.randint(1, 1000))))\n\n```\n## License\n\nThis project is licensed under the APGLv3 License - see the [LICENSE](LICENSE) file for details", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/diplomacy/diplomacy", "keywords": "diplomacy diplomacy-game game negotiation", "license": "", "maintainer": "", "maintainer_email": "", "name": "diplomacy", "package_url": "https://pypi.org/project/diplomacy/", "platform": "", "project_url": "https://pypi.org/project/diplomacy/", "project_urls": {"Bug Reports": "https://github.com/diplomacy/diplomacy/issues", "Documentation": "https://docs.diplomacy.ai/", "Homepage": "https://github.com/diplomacy/diplomacy", "Source": "https://github.com/diplomacy/diplomacy/"}, "release_url": "https://pypi.org/project/diplomacy/1.1.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Diplomacy: DATC-Compliant Game Engine with Web Interface", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Diplomacy: DATC-Compliant Game Engine <a href=\"https://travis-ci.org/diplomacy/diplomacy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70b8e3bc92fe0096f72112e99b864f0a3bdc8550/68747470733a2f2f7472617669732d63692e6f72672f6469706c6f6d6163792f6469706c6f6d6163792e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://docs.diplomacy.ai/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/695ddb24678618f2c321e167066f4e5227d219a0/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6469706c6f6d6163792f62616467652f3f76657273696f6e3d6c6174657374\"></a></h1>\n<p>This project contains an open-source DATC-compliant Diplomacy game engine, a client-server architecture for network play, a web interface to play against bots and to visualize games, and a DAIDE-compatible adapter to connect DAIDE bots to the server.</p>\n<p align=\"center\">\n  <img alt=\"Diplomacy Map Overview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bca73556ef0a11c4e206ff09d0484b42dd66ea11/646f63732f696d616765732f6d61705f6f766572766965772e706e67\" width=\"500\">\n</p>\n<h2>Documentation</h2>\n<p>The complete documentation is available at <a href=\"https://docs.diplomacy.ai/\" rel=\"nofollow\">docs.diplomacy.ai</a>.</p>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<p>The latest version of the package can be installed with:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">diplomacy</span>\n</pre>\n<p>The package is compatible with Python 3.5, 3.6, and 3.7.</p>\n<h3>Running a game</h3>\n<p>The following script plays a game locally by submitting random valid orders until the game is completed.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">diplomacy</span> <span class=\"kn\">import</span> <span class=\"n\">Game</span>\n<span class=\"kn\">from</span> <span class=\"nn\">diplomacy.utils.export</span> <span class=\"kn\">import</span> <span class=\"n\">to_saved_game_format</span>\n\n<span class=\"c1\"># Creating a game</span>\n<span class=\"c1\"># Alternatively, a map_name can be specified as an argument. e.g. Game(map_name='pure')</span>\n<span class=\"n\">game</span> <span class=\"o\">=</span> <span class=\"n\">Game</span><span class=\"p\">()</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">is_game_done</span><span class=\"p\">:</span>\n\n    <span class=\"c1\"># Getting the list of possible orders for all locations</span>\n    <span class=\"n\">possible_orders</span> <span class=\"o\">=</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">get_all_possible_orders</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># For each power, randomly sampling a valid order</span>\n    <span class=\"k\">for</span> <span class=\"n\">power_name</span><span class=\"p\">,</span> <span class=\"n\">power</span> <span class=\"ow\">in</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">powers</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">power_orders</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">possible_orders</span><span class=\"p\">[</span><span class=\"n\">loc</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">loc</span> <span class=\"ow\">in</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">get_orderable_locations</span><span class=\"p\">(</span><span class=\"n\">power_name</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"n\">possible_orders</span><span class=\"p\">[</span><span class=\"n\">loc</span><span class=\"p\">]]</span>\n        <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">set_orders</span><span class=\"p\">(</span><span class=\"n\">power_name</span><span class=\"p\">,</span> <span class=\"n\">power_orders</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Messages can be sent locally with game.add_message</span>\n    <span class=\"c1\"># e.g. game.add_message(Message(sender='FRANCE',</span>\n    <span class=\"c1\">#                               recipient='ENGLAND',</span>\n    <span class=\"c1\">#                               message='This is a message',</span>\n    <span class=\"c1\">#                               phase=self.get_current_phase(),</span>\n    <span class=\"c1\">#                               time_sent=int(time.time())))</span>\n\n    <span class=\"c1\"># Processing the game to move to the next phase</span>\n    <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Exporting the game to disk to visualize (game is appended to file)</span>\n<span class=\"c1\"># Alternatively, we can do &gt;&gt; file.write(json.dumps(to_saved_game_format(game)))</span>\n<span class=\"n\">to_saved_game_format</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s1\">'game.json'</span><span class=\"p\">)</span>\n</pre>\n<h2>Web interface</h2>\n<p>It is also possible to install a web interface in React to play against bots and/or other humans and to visualize games.</p>\n<p>The web interface can be installed with:</p>\n<pre><span class=\"c1\"># Install NVM</span>\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh <span class=\"p\">|</span> bash\n\n<span class=\"c1\"># Clone repo</span>\ngit clone https://github.com/diplomacy/diplomacy.git\n\n<span class=\"c1\"># Install package locally</span>\n<span class=\"c1\"># You may want to install it in a conda or virtualenv environment</span>\n<span class=\"nb\">cd</span> diplomacy/\npip install -r requirements_dev.txt\n\n<span class=\"c1\"># Build node modules</span>\n<span class=\"nb\">cd</span> diplomacy/web\nnpm install .\nnpm install . --only<span class=\"o\">=</span>dev\n\n<span class=\"c1\"># In a terminal window or tab - Launch React server</span>\nnpm start\n\n<span class=\"c1\"># In another terminal window or tab - Launch diplomacy server</span>\npython -m diplomacy.server.run\n</pre>\n<p>The web interface will be accessible at <a href=\"http://localhost:3000\" rel=\"nofollow\">http://localhost:3000</a>.</p>\n<p>To login, users can use admin/password or username/password. Additional users can be created by logging in with a username that does not exist in the database.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3c0eadbc81436c362547efcd13142f7fcbfd3cdb/646f63732f696d616765732f7765625f696e746572666163652e706e67\"></p>\n<h3>Visualizing a game</h3>\n<p>It is possible to visualize a game by using the \"Load a game from disk\" menu on the top-right corner of the web interface.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/15c105c93b0a34556242f52917c68ebf75c36181/646f63732f696d616765732f76697375616c697a655f67616d652e706e67\"></p>\n<h2>Network Game</h2>\n<p>It is possible to join a game remotely over a network using websockets. The script below plays a game over a network.</p>\n<p>Note. The server must be started with <code>python -m diplomacy.server.run</code> for the script to work.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">diplomacy.client.connection</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">diplomacy.utils</span> <span class=\"kn\">import</span> <span class=\"n\">exceptions</span>\n\n<span class=\"n\">POWERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'AUSTRIA'</span><span class=\"p\">,</span> <span class=\"s1\">'ENGLAND'</span><span class=\"p\">,</span> <span class=\"s1\">'FRANCE'</span><span class=\"p\">,</span> <span class=\"s1\">'GERMANY'</span><span class=\"p\">,</span> <span class=\"s1\">'ITALY'</span><span class=\"p\">,</span> <span class=\"s1\">'RUSSIA'</span><span class=\"p\">,</span> <span class=\"s1\">'TURKEY'</span><span class=\"p\">]</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">create_game</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"p\">,</span> <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8432</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Creates a game on the server \"\"\"</span>\n    <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n    <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">authenticate</span><span class=\"p\">(</span><span class=\"s1\">'random_user'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">create_game</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"o\">=</span><span class=\"n\">game_id</span><span class=\"p\">,</span> <span class=\"n\">rules</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'REAL_TIME'</span><span class=\"p\">,</span> <span class=\"s1\">'NO_DEADLINE'</span><span class=\"p\">,</span> <span class=\"s1\">'POWER_CHOICE'</span><span class=\"p\">})</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">play</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"p\">,</span> <span class=\"n\">power_name</span><span class=\"p\">,</span> <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8432</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Play as the specified power \"\"\"</span>\n    <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n    <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">authenticate</span><span class=\"p\">(</span><span class=\"s1\">'user_'</span> <span class=\"o\">+</span> <span class=\"n\">power_name</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Waiting for the game, then joining it</span>\n    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">list_games</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"o\">=</span><span class=\"n\">game_id</span><span class=\"p\">)):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">)</span>\n    <span class=\"n\">game</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">join_game</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"o\">=</span><span class=\"n\">game_id</span><span class=\"p\">,</span> <span class=\"n\">power_name</span><span class=\"o\">=</span><span class=\"n\">power_name</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Playing game</span>\n    <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">is_game_done</span><span class=\"p\">:</span>\n        <span class=\"n\">current_phase</span> <span class=\"o\">=</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">get_current_phase</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Submitting orders</span>\n        <span class=\"k\">if</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">get_orderable_locations</span><span class=\"p\">(</span><span class=\"n\">power_name</span><span class=\"p\">):</span>\n            <span class=\"n\">possible_orders</span> <span class=\"o\">=</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">get_all_possible_orders</span><span class=\"p\">()</span>\n            <span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">possible_orders</span><span class=\"p\">[</span><span class=\"n\">loc</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">loc</span> <span class=\"ow\">in</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">get_orderable_locations</span><span class=\"p\">(</span><span class=\"n\">power_name</span><span class=\"p\">)</span>\n                      <span class=\"k\">if</span> <span class=\"n\">possible_orders</span><span class=\"p\">[</span><span class=\"n\">loc</span><span class=\"p\">]]</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'[</span><span class=\"si\">%s</span><span class=\"s1\">/</span><span class=\"si\">%s</span><span class=\"s1\">] - Submitted: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">power_name</span><span class=\"p\">,</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">get_current_phase</span><span class=\"p\">(),</span> <span class=\"n\">orders</span><span class=\"p\">))</span>\n            <span class=\"k\">await</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">set_orders</span><span class=\"p\">(</span><span class=\"n\">power_name</span><span class=\"o\">=</span><span class=\"n\">power_name</span><span class=\"p\">,</span> <span class=\"n\">orders</span><span class=\"o\">=</span><span class=\"n\">orders</span><span class=\"p\">,</span> <span class=\"n\">wait</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Messages can be sent with game.send_message</span>\n        <span class=\"c1\"># await game.send_game_message(message=game.new_power_message('FRANCE', 'This is the message'))</span>\n\n        <span class=\"c1\"># Waiting for game to be processed</span>\n        <span class=\"k\">while</span> <span class=\"n\">current_phase</span> <span class=\"o\">==</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">get_current_phase</span><span class=\"p\">():</span>\n            <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># A local copy of the game can be saved with to_saved_game_format</span>\n    <span class=\"c1\"># To download a copy of the game with messages from all powers, you need to export the game as an admin</span>\n    <span class=\"c1\"># by logging in as 'admin' / 'password'</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\" Creates and plays a network game \"\"\"</span>\n    <span class=\"k\">await</span> <span class=\"n\">create_game</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">play</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"p\">,</span> <span class=\"n\">power_name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">power_name</span> <span class=\"ow\">in</span> <span class=\"n\">POWERS</span><span class=\"p\">])</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">launch</span><span class=\"p\">(</span><span class=\"n\">game_id</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))))</span>\n</pre>\n<h2>License</h2>\n<p>This project is licensed under the APGLv3 License - see the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file for details</p>\n\n          </div>"}, "last_serial": 7009566, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "2a7191c59163e03000e492a32a38fc5e", "sha256": "3227b45ca0afe49fcd7bcaa58ed0d802ae42972dbed64ece414f28caa22998a8"}, "downloads": -1, "filename": "diplomacy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2a7191c59163e03000e492a32a38fc5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 754474, "upload_time": "2019-09-01T20:58:52", "upload_time_iso_8601": "2019-09-01T20:58:52.434561Z", "url": "https://files.pythonhosted.org/packages/8f/ca/34aed4e7b821f8ab8decef56b29813b89a25e6b7aee4338c42fcb22d08bc/diplomacy-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0185a51c6b48a05832eab279c7f943b9", "sha256": "6a6037964d7e226a7456fb9255075ff5d976aea3fca6ffdd12c01d409d1b0835"}, "downloads": -1, "filename": "diplomacy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0185a51c6b48a05832eab279c7f943b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1258262, "upload_time": "2019-09-03T19:22:26", "upload_time_iso_8601": "2019-09-03T19:22:26.664859Z", "url": "https://files.pythonhosted.org/packages/b9/43/3ccfa091ea417dd4e470b1b266d545cd2f7a9a950ea984adc2d2ae102be7/diplomacy-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "de0c242a51f8944a146a53ef0b6ab654", "sha256": "9010ef474011cf0b206efb6aa418c72d4cb83df851f442d3f15a7d9d48cbcf1b"}, "downloads": -1, "filename": "diplomacy-1.1.1.tar.gz", "has_sig": false, "md5_digest": "de0c242a51f8944a146a53ef0b6ab654", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2179604, "upload_time": "2019-09-14T22:26:12", "upload_time_iso_8601": "2019-09-14T22:26:12.383284Z", "url": "https://files.pythonhosted.org/packages/dc/8f/e21d66441f1dde89eb969cb2d8e6e92440e3b4ec812171c1ebc52a74fe00/diplomacy-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "522a66ae0fc7d54231c3caefd458b3a0", "sha256": "ca325a89617131967f2762ae536595f4f0085f5a4c13cc84c0ad690c11882fea"}, "downloads": -1, "filename": "diplomacy-1.1.2.tar.gz", "has_sig": false, "md5_digest": "522a66ae0fc7d54231c3caefd458b3a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2179638, "upload_time": "2020-04-13T12:15:42", "upload_time_iso_8601": "2020-04-13T12:15:42.868664Z", "url": "https://files.pythonhosted.org/packages/73/c2/2f274d224e021be6d1befa2afc6015c79ea1ef43d6a5e275250aacc6db0e/diplomacy-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "522a66ae0fc7d54231c3caefd458b3a0", "sha256": "ca325a89617131967f2762ae536595f4f0085f5a4c13cc84c0ad690c11882fea"}, "downloads": -1, "filename": "diplomacy-1.1.2.tar.gz", "has_sig": false, "md5_digest": "522a66ae0fc7d54231c3caefd458b3a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 2179638, "upload_time": "2020-04-13T12:15:42", "upload_time_iso_8601": "2020-04-13T12:15:42.868664Z", "url": "https://files.pythonhosted.org/packages/73/c2/2f274d224e021be6d1befa2afc6015c79ea1ef43d6a5e275250aacc6db0e/diplomacy-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:19 2020"}