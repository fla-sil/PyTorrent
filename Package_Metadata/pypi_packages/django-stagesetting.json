{"info": {"author": "Keryn Knight", "author_email": "python-package@kerynknight.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.7", "Framework :: Django :: 1.8", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP"], "description": "django-stagesetting 0.5.0\n=========================\n\nAn application for managing site configuration through normal `Django`_ forms,\nand thus through the `admin site`_.\n\n.. |travis_stable| image:: https://travis-ci.org/kezabelle/django-stagesetting.svg?branch=0.5.0\n  :target: https://travis-ci.org/kezabelle/django-stagesetting\n\n.. |travis_master| image:: https://travis-ci.org/kezabelle/django-stagesetting.svg?branch=master\n  :target: https://travis-ci.org/kezabelle/django-stagesetting\n\n==============  ======\nRelease         Status\n==============  ======\nstable (0.5.0)  |travis_stable|\nmaster          |travis_master|\n==============  ======\n\nPre-requisites\n--------------\n\nThe following versions are tested:\n\n* Python 2.7, or 3.3+\n* `Django`_ 1.7+\n\nInstallation\n------------\n\nFirst up, you need to install it  (via `pip`_ as usual)::\n\n    pip install django-stagesetting==0.5.0\n\nOnce that's downloaded, add the package to your ``INSTALLED_APPS``\nin your settings::\n\n    INSTALLED_APPS = (\n        # ...\n        'stagesetting',\n        # ...\n    )\n\ndo a migrate::\n\n    python manage.py migrate stagesetting\n\nAdd a ``STAGESETTINGS`` dictionary to your project's settings::\n\n    STAGESETTINGS = {\n        'SETTING_NAME': '...',\n        'ANOTHER_SETTING_NAME': '...',\n    }\n\nThe setting collection name is the dictionary key, so must be unique.\n\nWriting settings\n^^^^^^^^^^^^^^^^\nSettings may be created in a number of ways, the simplest of which is to\nprovide a ``dictionary`` as the value::\n\n    STAGESETTINGS = {\n        'MY_SETTING': {\n            'an_example-datetime': datetime.today(),\n            'a_date': date.today(),\n            'time_now': time(4, 23),\n            'boolean_field': False,\n            'plain_text': 'char field',\n            'decimal': Decimal('3.25'),\n            'float': 2.3,\n        }\n    }\n\nwhere possible, this will auto-generate a Form class for you, choosing sensible\ndefaults for the field variants where possible.\n\nThe other option is for the value to be a ``list`` or a ``tuple``, where\nthe *first item* represents a form (either a ``dictionary`` as above, **OR**\nthe ``dotted.path.to.a.Form.Class`` if you need custom validation) and the\n*second, optional item* is the default data. The following should all be valid::\n\n    STAGESETTINGS = {\n        'AUTO_GENERATED': [{\n            'datetime': datetime.today(),\n        }],\n        'IMPORT_A_FORM': ['myapp.forms.MyForm'],\n        'IMPORT_WITH_DEFAULT': ['myapp.forms.MyForm', {'default': 'data'}],\n        'AUTO_GENERATED_WITH_OTHER_DEFAULTS': [{\n            'datetime': datetime.today(),\n        }, {'default': 'data'}],\n    }\n\nA simple configuration form (for the ``dotted.path.Format``) might look like::\n\n    from django.core.exceptions import ValidationError\n    from django.forms import Form, DateField\n\n    class DateForm(Form):\n        start = DateField()\n        end = DateField()\n\n        def clean(self):\n            cd = self.cleaned_data\n            if 'start' in cd and 'end' in cd and cd['start'] > cd['end']:\n                raise ValidationError(\"Start date cannot be after end date\")\n            return cd\n\nAs you can see, it really is just a normal `Form`_. Internally, this form's\n``cleaned_data`` will be converted into `JSON`_ before being saved to the\ndatabase.\nIt will get re-converted to proper Python values when pulled out\nof the database, by going through the given `Form`_ class's validation again,\nincluding converting to rich values like model instances.\n\n\nPython types which can be detected\n**********************************\n\nWhen detecting a dictionary as the value and auto-generating a form, the\nfollowing translations will be applied:\n\n- ``None`` becomes `NullBooleanField`_\n- ``datetime.datetime`` becomes `DateTimeField`_\n- ``datetime.date`` becomes `DateField`_\n- ``datetime.time`` becomes `TimeField`_\n- ``datetime.timedelta`` becomes `DurationField`_\n- ``decimal.Decimal`` becomes `DecimalField`_\n- ``float`` becomes `FloatField`_\n- ``True`` or ``False`` become `BooleanField`_\n- ``int`` becomes `IntegerField`_\n- ``uuid.UUID`` becomes `UUIDField`_ or `RegexField`_, depending on the `Django`_ version\n- ``list`` and ``tuple`` become `MultipleChoiceField`_\n- ``collections.OrderedDict``, ``set``, ``frozenset``, and ``dict`` become `ChoiceField`_\n- ``models.Model`` instances become `ModelChoiceField`_\n- ``models.QuerySet`` becomes `ModelMultipleChoiceField`_\n- strings become one of the following, depending on what checks they pass:\n\n  - `GenericIPAddressField`_\n  - `URLField`_\n  - `EmailField`_\n  - `SlugField`_\n  - `CharField`_\n  - `IntegerField`_\n  - `DecimalField`_\n  - `UUIDField`_ (or `RegexField`_, depending on the `Django`_ version)\n  - `DateTimeField`_\n  - `DateField`_\n  - `TimeField`_\n- Some strings are **really** special, and will instead turn into one of the following:\n\n  - if the string == ``STATIC_URL`` or ``STATICFILES_STORAGE`` the field will be\n    a `ChoiceField`_ whose options are all the files found by the\n    project's ``STATICFILES_FINDERS``.\n  - if the string == ``MEDIA_URL``or ``DEFAULT_FILE_STORAGE`` the field will be\n    a `ChoiceField`_ whose options are all the files found by\n    ``DEFAULT_FILE_STORAGE``.\n  - if the string *starts with* ``STATIC_URL`` it will be the same as using\n    the ``STATIC_URL`` generated field, but is a regular expression for filtering\n    to only certain files (i.e. ``/static/.*\\.css$`` would find only css files)\n  - if the string *starts with* ``MEDIA_URL`` it will be the same as above,\n    but for files found in ``DEFAULT_FILE_STORAGE``.\n  - if a string looks like it contains HTML, it will try to use `django-bleach`_\n    for sanitisation, and one of `django-ckeditor`_, `django-tinymce`_,\n    `django-markdown`_, `django-pagedown`_, or `django-epiceditor`_ for an\n    appropriate widget.\n\nUsage in code\n-------------\n\nThe best way to access the settings in your views is to include\n``stagesetting.middleware.ApplyRuntimeSettings`` in your ``MIDDLEWARE_CLASSES``\nwhich will ensure there is a ``request.stagesettings`` variable which can be\nused like so::\n\n    def myview(request):\n        how_many_form_data = request.stagesetting.LIST_PER_PAGE\n        allow_empty_form_data = request.stagesetting['ALLOW_EMPTY']\n\neach setting will be a dictionary of the `Form`_ values, either the default ones\nor those changed in the database.\n\nUsage in templates\n------------------\n\nIf you've already got ``request`` in your template, obviously you can continue\nto use ``request.stagesettings`` if the middleware is wired up.\n\nIf you don't have request, or you're not using the middleware,\n``stagesetting.context_processors.runtime_settings`` provides a ``STAGESETTING``\ntemplate variable which contains the exact same data.\n\nFinally, if not using the middleware nor the context processor, there is a\ntemplate tag available as a last resort. It's usage is::\n\n    {% load stagesetting %}\n    {% stagesetting as NEW_CONTEXT_VARIABLE %}\n    {{ NEW_CONTEXT_VARIABLE.SETTING_NAME.fieldname }}\n\n\nUsage outside of a request\n--------------------------\n\nIf you don't have the middleware, or are in a part of the code which doesn't\nhave a ``request``, you can use the wrapper object directly::\n\n    from stagesetting.models import RuntimeSettingWrapper\n    def my_signal_handler(sender, instance, **kwargs):\n        live_settings = RuntimeSettingWrapper()\n        data = live_settings.LIST_PER_PAGE\n\nTry to keep a single ``RuntimeSettingWrapper`` around for as long as possible,\nrather than creating a new instance everywhere, as the object must fetch\nthe available settings from the database the first time it needs them. It\ncaches them for it's lifetime thereafter.\n\nAlternatives\n------------\n\nOther apps I know of that achieve similar things, or overlap in some obvious\nway. I won't judge you for using them, and I can't promise this is better.\nTo the victor, the spoils of maintenance!\n\n- `django-constance`_ is similar\n\n  - uses ``pickle`` to store an arbitrary python value; ``stagesetting`` only\n    stores stuff it can put into JSON and relies on `Django`_ `Forms`_ to inflate\n    the JSON back into python values.\n  - Has both database and redis backends; ``stagesetting`` only supports\n    the database, though it will only do one query most of the time.\n\n- `django-dynamic-preferences`_ by the look of it.\n- `django-solo`_ as well.\n\nIf you think GitHub popularity is an indication of usage and battle-tested \nproduction-readiness, then any of the above are certainly worth considering, \nbeing much more noticed than this, my attempt.\n\n.. _Django: https://docs.djangoproject.com/en/stable/\n.. _admin site: https://docs.djangoproject.com/en/stable/ref/contrib/admin/\n.. _contrib.admin: https://docs.djangoproject.com/en/stable/ref/contrib/admin/\n.. _Form: https://docs.djangoproject.com/en/stable/topics/forms/\n.. _Forms: https://docs.djangoproject.com/en/stable/topics/forms/\n.. _JSON: http://json.org/\n.. _pip: https://pip.pypa.io/en/stable/\n.. _pytest: http://pytest.org/latest/\n.. _BooleanField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#booleanfield\n.. _CharField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#charfield\n.. _RegexField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#regexfield\n.. _ChoiceField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#choicefield\n.. _DateField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#datefield\n.. _DateTimeField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#datetimefield\n.. _DecimalField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#decimalfield\n.. _DurationField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#durationfield\n.. _EmailField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#emailfield\n.. _FloatField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#floatfield\n.. _GenericIPAddressField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#genericipaddressfield\n.. _IntegerField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#integerfield\n.. _ModelChoiceField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#modelchoicefield\n.. _ModelMultipleChoiceField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#modelmultiplechoicefield\n.. _MultipleChoiceField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#multiplechoicefield\n.. _NullBooleanField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#nullbooleanfield\n.. _SlugField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#slugfield\n.. _TimeField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#timefield\n.. _URLField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#urlfield\n.. _UUIDField: https://docs.djangoproject.com/en/stable/ref/forms/fields/#uuidfield\n.. _django-bleach: https://bitbucket.org/tim_heap/django-bleach\n.. _django-ckeditor: https://github.com/django-ckeditor/django-ckeditor\n.. _django-tinymce: https://github.com/aljosa/django-tinymce\n.. _django-markdown: https://github.com/klen/django_markdown\n.. _django-pagedown: https://github.com/timmyomahony/django-pagedown\n.. _django-epiceditor: https://github.com/barraq/django-epiceditor\n.. _django-constance: https://github.com/jezdez/django-constance\n.. _django-dynamic-preferences: https://github.com/EliotBerriot/django-dynamic-preferences\n.. _django-solo: https://github.com/lazybird/django-solo\n\n\n----\n\nLicense\n-------\n\n``django-stagesetting 0.5.0`` is available under the terms of the\nSimplified BSD License (alternatively known as the FreeBSD License, or\nthe 2-clause License)::\n\n    Copyright (c) 2015, Keryn Knight\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice, this\n       list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright notice,\n       this list of conditions and the following disclaimer in the documentation\n       and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n    The views and conclusions contained in the software and documentation are those\n    of the authors and should not be interpreted as representing official policies,\n    either expressed or implied, of the FreeBSD Project.\n\n\n----\n\nChange log\n----------\n0.5.0\n^^^^^^\n* Minor changes to allow for easy subclassing or replacement of the middleware,\n  context processor etc.\n* Updated test matrix to cover more versions of Django (1.9+)\n\n\n0.4.2\n^^^^^^\n\n* Admin now displays pretty names for the setting keys.\n* ``StaticFilesChoiceField`` and ``DefaultStorageFilesChoiceField`` now both use an\n  LRU cache to avoid having to enumerate the storage backends/finders repeatedly.\n\n\n0.4.1\n^^^^^^\n\n* When generating a form from an ``OrderedDict``, field ordering is now preserved.\n* When a form's values are saved into the database and become stale (because the\n  underlying form/defaults are added to), the new defaults are transparently\n  mapped onto the value when it's made available via the middleware,\n  context processor or template tag.\n\n\n0.4.0\n^^^^^^\n\n* Introduced the ``stagesetting`` template tag.\n* Settings are no longer automatically created on app ``ready()``, instead\n  the defaults are lazily converted when requested via a ``RuntimeSettingWrapper``\n* Added ``StaticFilesChoiceField`` and ``DefaultStorageFilesChoiceField``,\n  which allow for selecting a file that already exists in the given storage.\n* When auto-generating a form, the ``STATIC_URL`` and ``MEDIA_URL`` settings\n  are treated as special, and turned into the aforementioned fields.\n* Providing an incomplete defaults dictionary in the second parameter of a\n  given setting's config will now show *Info* messages to indicate what's\n  missing.\n* When auto-generating a form from a dictionary, HTML-like values will try\n  to use one of `django-ckeditor`_, `django-tinymce`_, `django-markdown`_,\n  `django-pagedown`_, or `django-epiceditor`_ for a widget instead of a normal\n  ``textarea``.\n* Added support for using `django-bleach`_ when encountering HTML-like values\n  in an autogenerated form.\n* Added initial support for `djangorestframework`_\n\n\n0.3.2\n^^^^^^\n\n* Fixed error introduced in ``0.3.1`` when only providing a dictionary, because\n  it turns out it wasn't being covered by tests.\n\n0.3.1\n^^^^^^\n\n* Fixed issue where providing a dictionary wasn't treating the values as\n  implicit defaults to be created into the database.\n\n\n0.3.0\n^^^^^^\n\n* Added ability to auto-generate forms for configuration values which are\n  dictionaries.\n\n0.2.0\n^^^^^^\n\n* Initial release.\n\n.. _djangorestframework: https://github.com/tomchristie/django-rest-framework\n.. _django-bleach: https://bitbucket.org/tim_heap/django-bleach\n.. _django-ckeditor: https://github.com/django-ckeditor/django-ckeditor\n.. _django-tinymce: https://github.com/aljosa/django-tinymce\n.. _django-markdown: https://github.com/klen/django_markdown\n.. _django-pagedown: https://github.com/timmyomahony/django-pagedown\n.. _django-epiceditor: https://github.com/barraq/django-epiceditor", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/kezabelle/django-stagesetting/releases/tag/0.5.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kezabelle/django-stagesetting", "keywords": "settings,django,live,dynamic,utility", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "django-stagesetting", "package_url": "https://pypi.org/project/django-stagesetting/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-stagesetting/", "project_urls": {"Download": "https://github.com/kezabelle/django-stagesetting/releases/tag/0.5.0", "Homepage": "https://github.com/kezabelle/django-stagesetting"}, "release_url": "https://pypi.org/project/django-stagesetting/0.5.0/", "requires_dist": ["Django (>=1.7)"], "requires_python": "", "summary": "Dynamic runtime settings and configuration for Django sites", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>An application for managing site configuration through normal <a href=\"https://docs.djangoproject.com/en/stable/\" rel=\"nofollow\">Django</a> forms,\nand thus through the <a href=\"https://docs.djangoproject.com/en/stable/ref/contrib/admin/\" rel=\"nofollow\">admin site</a>.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Release</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>stable (0.5.0)</td>\n<td><a href=\"https://travis-ci.org/kezabelle/django-stagesetting\" rel=\"nofollow\"><img alt=\"travis_stable\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59a442c62fa7f8a72a940778f9c88fe8608970bb/68747470733a2f2f7472617669732d63692e6f72672f6b657a6162656c6c652f646a616e676f2d737461676573657474696e672e7376673f6272616e63683d302e352e30\"></a></td>\n</tr>\n<tr><td>master</td>\n<td><a href=\"https://travis-ci.org/kezabelle/django-stagesetting\" rel=\"nofollow\"><img alt=\"travis_master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/065777e5995379d7856898bcd3d5831fca7651b5/68747470733a2f2f7472617669732d63692e6f72672f6b657a6162656c6c652f646a616e676f2d737461676573657474696e672e7376673f6272616e63683d6d6173746572\"></a></td>\n</tr>\n</tbody>\n</table>\n<div id=\"pre-requisites\">\n<h2>Pre-requisites</h2>\n<p>The following versions are tested:</p>\n<ul>\n<li>Python 2.7, or 3.3+</li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/\" rel=\"nofollow\">Django</a> 1.7+</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>First up, you need to install it  (via <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> as usual):</p>\n<pre>pip install django-stagesetting==0.5.0\n</pre>\n<p>Once that\u2019s downloaded, add the package to your <tt>INSTALLED_APPS</tt>\nin your settings:</p>\n<pre>INSTALLED_APPS = (\n    # ...\n    'stagesetting',\n    # ...\n)\n</pre>\n<p>do a migrate:</p>\n<pre>python manage.py migrate stagesetting\n</pre>\n<p>Add a <tt>STAGESETTINGS</tt> dictionary to your project\u2019s settings:</p>\n<pre>STAGESETTINGS = {\n    'SETTING_NAME': '...',\n    'ANOTHER_SETTING_NAME': '...',\n}\n</pre>\n<p>The setting collection name is the dictionary key, so must be unique.</p>\n<div id=\"writing-settings\">\n<h3>Writing settings</h3>\n<p>Settings may be created in a number of ways, the simplest of which is to\nprovide a <tt>dictionary</tt> as the value:</p>\n<pre>STAGESETTINGS = {\n    'MY_SETTING': {\n        'an_example-datetime': datetime.today(),\n        'a_date': date.today(),\n        'time_now': time(4, 23),\n        'boolean_field': False,\n        'plain_text': 'char field',\n        'decimal': Decimal('3.25'),\n        'float': 2.3,\n    }\n}\n</pre>\n<p>where possible, this will auto-generate a Form class for you, choosing sensible\ndefaults for the field variants where possible.</p>\n<p>The other option is for the value to be a <tt>list</tt> or a <tt>tuple</tt>, where\nthe <em>first item</em> represents a form (either a <tt>dictionary</tt> as above, <strong>OR</strong>\nthe <tt>dotted.path.to.a.Form.Class</tt> if you need custom validation) and the\n<em>second, optional item</em> is the default data. The following should all be valid:</p>\n<pre>STAGESETTINGS = {\n    'AUTO_GENERATED': [{\n        'datetime': datetime.today(),\n    }],\n    'IMPORT_A_FORM': ['myapp.forms.MyForm'],\n    'IMPORT_WITH_DEFAULT': ['myapp.forms.MyForm', {'default': 'data'}],\n    'AUTO_GENERATED_WITH_OTHER_DEFAULTS': [{\n        'datetime': datetime.today(),\n    }, {'default': 'data'}],\n}\n</pre>\n<p>A simple configuration form (for the <tt>dotted.path.Format</tt>) might look like:</p>\n<pre>from django.core.exceptions import ValidationError\nfrom django.forms import Form, DateField\n\nclass DateForm(Form):\n    start = DateField()\n    end = DateField()\n\n    def clean(self):\n        cd = self.cleaned_data\n        if 'start' in cd and 'end' in cd and cd['start'] &gt; cd['end']:\n            raise ValidationError(\"Start date cannot be after end date\")\n        return cd\n</pre>\n<p>As you can see, it really is just a normal <a href=\"https://docs.djangoproject.com/en/stable/topics/forms/\" rel=\"nofollow\">Form</a>. Internally, this form\u2019s\n<tt>cleaned_data</tt> will be converted into <a href=\"http://json.org/\" rel=\"nofollow\">JSON</a> before being saved to the\ndatabase.\nIt will get re-converted to proper Python values when pulled out\nof the database, by going through the given <a href=\"https://docs.djangoproject.com/en/stable/topics/forms/\" rel=\"nofollow\">Form</a> class\u2019s validation again,\nincluding converting to rich values like model instances.</p>\n<div id=\"python-types-which-can-be-detected\">\n<h4>Python types which can be detected</h4>\n<p>When detecting a dictionary as the value and auto-generating a form, the\nfollowing translations will be applied:</p>\n<ul>\n<li><tt>None</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#nullbooleanfield\" rel=\"nofollow\">NullBooleanField</a></li>\n<li><tt>datetime.datetime</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#datetimefield\" rel=\"nofollow\">DateTimeField</a></li>\n<li><tt>datetime.date</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#datefield\" rel=\"nofollow\">DateField</a></li>\n<li><tt>datetime.time</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#timefield\" rel=\"nofollow\">TimeField</a></li>\n<li><tt>datetime.timedelta</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#durationfield\" rel=\"nofollow\">DurationField</a></li>\n<li><tt>decimal.Decimal</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#decimalfield\" rel=\"nofollow\">DecimalField</a></li>\n<li><tt>float</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#floatfield\" rel=\"nofollow\">FloatField</a></li>\n<li><tt>True</tt> or <tt>False</tt> become <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#booleanfield\" rel=\"nofollow\">BooleanField</a></li>\n<li><tt>int</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#integerfield\" rel=\"nofollow\">IntegerField</a></li>\n<li><tt>uuid.UUID</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#uuidfield\" rel=\"nofollow\">UUIDField</a> or <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#regexfield\" rel=\"nofollow\">RegexField</a>, depending on the <a href=\"https://docs.djangoproject.com/en/stable/\" rel=\"nofollow\">Django</a> version</li>\n<li><tt>list</tt> and <tt>tuple</tt> become <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#multiplechoicefield\" rel=\"nofollow\">MultipleChoiceField</a></li>\n<li><tt>collections.OrderedDict</tt>, <tt>set</tt>, <tt>frozenset</tt>, and <tt>dict</tt> become <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#choicefield\" rel=\"nofollow\">ChoiceField</a></li>\n<li><tt>models.Model</tt> instances become <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#modelchoicefield\" rel=\"nofollow\">ModelChoiceField</a></li>\n<li><tt>models.QuerySet</tt> becomes <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#modelmultiplechoicefield\" rel=\"nofollow\">ModelMultipleChoiceField</a></li>\n<li>strings become one of the following, depending on what checks they pass:<ul>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#genericipaddressfield\" rel=\"nofollow\">GenericIPAddressField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#urlfield\" rel=\"nofollow\">URLField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#emailfield\" rel=\"nofollow\">EmailField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#slugfield\" rel=\"nofollow\">SlugField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#charfield\" rel=\"nofollow\">CharField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#integerfield\" rel=\"nofollow\">IntegerField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#decimalfield\" rel=\"nofollow\">DecimalField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#uuidfield\" rel=\"nofollow\">UUIDField</a> (or <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#regexfield\" rel=\"nofollow\">RegexField</a>, depending on the <a href=\"https://docs.djangoproject.com/en/stable/\" rel=\"nofollow\">Django</a> version)</li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#datetimefield\" rel=\"nofollow\">DateTimeField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#datefield\" rel=\"nofollow\">DateField</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#timefield\" rel=\"nofollow\">TimeField</a></li>\n</ul>\n</li>\n<li>Some strings are <strong>really</strong> special, and will instead turn into one of the following:<ul>\n<li>if the string == <tt>STATIC_URL</tt> or <tt>STATICFILES_STORAGE</tt> the field will be\na <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#choicefield\" rel=\"nofollow\">ChoiceField</a> whose options are all the files found by the\nproject\u2019s <tt>STATICFILES_FINDERS</tt>.</li>\n<li>if the string == <tt><span class=\"pre\">MEDIA_URL``or</span> ``DEFAULT_FILE_STORAGE</tt> the field will be\na <a href=\"https://docs.djangoproject.com/en/stable/ref/forms/fields/#choicefield\" rel=\"nofollow\">ChoiceField</a> whose options are all the files found by\n<tt>DEFAULT_FILE_STORAGE</tt>.</li>\n<li>if the string <em>starts with</em> <tt>STATIC_URL</tt> it will be the same as using\nthe <tt>STATIC_URL</tt> generated field, but is a regular expression for filtering\nto only certain files (i.e. <tt><span class=\"pre\">/static/.*\\.css$</span></tt> would find only css files)</li>\n<li>if the string <em>starts with</em> <tt>MEDIA_URL</tt> it will be the same as above,\nbut for files found in <tt>DEFAULT_FILE_STORAGE</tt>.</li>\n<li>if a string looks like it contains HTML, it will try to use <a href=\"https://bitbucket.org/tim_heap/django-bleach\" rel=\"nofollow\">django-bleach</a>\nfor sanitisation, and one of <a href=\"https://github.com/django-ckeditor/django-ckeditor\" rel=\"nofollow\">django-ckeditor</a>, <a href=\"https://github.com/aljosa/django-tinymce\" rel=\"nofollow\">django-tinymce</a>,\n<a href=\"https://github.com/klen/django_markdown\" rel=\"nofollow\">django-markdown</a>, <a href=\"https://github.com/timmyomahony/django-pagedown\" rel=\"nofollow\">django-pagedown</a>, or <a href=\"https://github.com/barraq/django-epiceditor\" rel=\"nofollow\">django-epiceditor</a> for an\nappropriate widget.</li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"usage-in-code\">\n<h2>Usage in code</h2>\n<p>The best way to access the settings in your views is to include\n<tt>stagesetting.middleware.ApplyRuntimeSettings</tt> in your <tt>MIDDLEWARE_CLASSES</tt>\nwhich will ensure there is a <tt>request.stagesettings</tt> variable which can be\nused like so:</p>\n<pre>def myview(request):\n    how_many_form_data = request.stagesetting.LIST_PER_PAGE\n    allow_empty_form_data = request.stagesetting['ALLOW_EMPTY']\n</pre>\n<p>each setting will be a dictionary of the <a href=\"https://docs.djangoproject.com/en/stable/topics/forms/\" rel=\"nofollow\">Form</a> values, either the default ones\nor those changed in the database.</p>\n</div>\n<div id=\"usage-in-templates\">\n<h2>Usage in templates</h2>\n<p>If you\u2019ve already got <tt>request</tt> in your template, obviously you can continue\nto use <tt>request.stagesettings</tt> if the middleware is wired up.</p>\n<p>If you don\u2019t have request, or you\u2019re not using the middleware,\n<tt>stagesetting.context_processors.runtime_settings</tt> provides a <tt>STAGESETTING</tt>\ntemplate variable which contains the exact same data.</p>\n<p>Finally, if not using the middleware nor the context processor, there is a\ntemplate tag available as a last resort. It\u2019s usage is:</p>\n<pre>{% load stagesetting %}\n{% stagesetting as NEW_CONTEXT_VARIABLE %}\n{{ NEW_CONTEXT_VARIABLE.SETTING_NAME.fieldname }}\n</pre>\n</div>\n<div id=\"usage-outside-of-a-request\">\n<h2>Usage outside of a request</h2>\n<p>If you don\u2019t have the middleware, or are in a part of the code which doesn\u2019t\nhave a <tt>request</tt>, you can use the wrapper object directly:</p>\n<pre>from stagesetting.models import RuntimeSettingWrapper\ndef my_signal_handler(sender, instance, **kwargs):\n    live_settings = RuntimeSettingWrapper()\n    data = live_settings.LIST_PER_PAGE\n</pre>\n<p>Try to keep a single <tt>RuntimeSettingWrapper</tt> around for as long as possible,\nrather than creating a new instance everywhere, as the object must fetch\nthe available settings from the database the first time it needs them. It\ncaches them for it\u2019s lifetime thereafter.</p>\n</div>\n<div id=\"alternatives\">\n<h2>Alternatives</h2>\n<p>Other apps I know of that achieve similar things, or overlap in some obvious\nway. I won\u2019t judge you for using them, and I can\u2019t promise this is better.\nTo the victor, the spoils of maintenance!</p>\n<ul>\n<li><a href=\"https://github.com/jezdez/django-constance\" rel=\"nofollow\">django-constance</a> is similar<ul>\n<li>uses <tt>pickle</tt> to store an arbitrary python value; <tt>stagesetting</tt> only\nstores stuff it can put into JSON and relies on <a href=\"https://docs.djangoproject.com/en/stable/\" rel=\"nofollow\">Django</a> <a href=\"https://docs.djangoproject.com/en/stable/topics/forms/\" rel=\"nofollow\">Forms</a> to inflate\nthe JSON back into python values.</li>\n<li>Has both database and redis backends; <tt>stagesetting</tt> only supports\nthe database, though it will only do one query most of the time.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/EliotBerriot/django-dynamic-preferences\" rel=\"nofollow\">django-dynamic-preferences</a> by the look of it.</li>\n<li><a href=\"https://github.com/lazybird/django-solo\" rel=\"nofollow\">django-solo</a> as well.</li>\n</ul>\n<p>If you think GitHub popularity is an indication of usage and battle-tested\nproduction-readiness, then any of the above are certainly worth considering,\nbeing much more noticed than this, my attempt.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"license\">\n<h2>License</h2>\n<p><tt><span class=\"pre\">django-stagesetting</span> 0.5.0</tt> is available under the terms of the\nSimplified BSD License (alternatively known as the FreeBSD License, or\nthe 2-clause License):</p>\n<pre>Copyright (c) 2015, Keryn Knight\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those\nof the authors and should not be interpreted as representing official policies,\neither expressed or implied, of the FreeBSD Project.\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"change-log\">\n<h2>Change log</h2>\n<div id=\"id1\">\n<h3>0.5.0</h3>\n<ul>\n<li>Minor changes to allow for easy subclassing or replacement of the middleware,\ncontext processor etc.</li>\n<li>Updated test matrix to cover more versions of Django (1.9+)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.4.2</h3>\n<ul>\n<li>Admin now displays pretty names for the setting keys.</li>\n<li><tt>StaticFilesChoiceField</tt> and <tt>DefaultStorageFilesChoiceField</tt> now both use an\nLRU cache to avoid having to enumerate the storage backends/finders repeatedly.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.4.1</h3>\n<ul>\n<li>When generating a form from an <tt>OrderedDict</tt>, field ordering is now preserved.</li>\n<li>When a form\u2019s values are saved into the database and become stale (because the\nunderlying form/defaults are added to), the new defaults are transparently\nmapped onto the value when it\u2019s made available via the middleware,\ncontext processor or template tag.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.4.0</h3>\n<ul>\n<li>Introduced the <tt>stagesetting</tt> template tag.</li>\n<li>Settings are no longer automatically created on app <tt>ready()</tt>, instead\nthe defaults are lazily converted when requested via a <tt>RuntimeSettingWrapper</tt></li>\n<li>Added <tt>StaticFilesChoiceField</tt> and <tt>DefaultStorageFilesChoiceField</tt>,\nwhich allow for selecting a file that already exists in the given storage.</li>\n<li>When auto-generating a form, the <tt>STATIC_URL</tt> and <tt>MEDIA_URL</tt> settings\nare treated as special, and turned into the aforementioned fields.</li>\n<li>Providing an incomplete defaults dictionary in the second parameter of a\ngiven setting\u2019s config will now show <em>Info</em> messages to indicate what\u2019s\nmissing.</li>\n<li>When auto-generating a form from a dictionary, HTML-like values will try\nto use one of <a href=\"https://github.com/django-ckeditor/django-ckeditor\" rel=\"nofollow\">django-ckeditor</a>, <a href=\"https://github.com/aljosa/django-tinymce\" rel=\"nofollow\">django-tinymce</a>, <a href=\"https://github.com/klen/django_markdown\" rel=\"nofollow\">django-markdown</a>,\n<a href=\"https://github.com/timmyomahony/django-pagedown\" rel=\"nofollow\">django-pagedown</a>, or <a href=\"https://github.com/barraq/django-epiceditor\" rel=\"nofollow\">django-epiceditor</a> for a widget instead of a normal\n<tt>textarea</tt>.</li>\n<li>Added support for using <a href=\"https://bitbucket.org/tim_heap/django-bleach\" rel=\"nofollow\">django-bleach</a> when encountering HTML-like values\nin an autogenerated form.</li>\n<li>Added initial support for <a href=\"https://github.com/tomchristie/django-rest-framework\" rel=\"nofollow\">djangorestframework</a></li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.3.2</h3>\n<ul>\n<li>Fixed error introduced in <tt>0.3.1</tt> when only providing a dictionary, because\nit turns out it wasn\u2019t being covered by tests.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.3.1</h3>\n<ul>\n<li>Fixed issue where providing a dictionary wasn\u2019t treating the values as\nimplicit defaults to be created into the database.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.3.0</h3>\n<ul>\n<li>Added ability to auto-generate forms for configuration values which are\ndictionaries.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.2.0</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2671668, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "290b9c9f2a947b84c9606e21b30451aa", "sha256": "1f736979d6fc50b3eb9dd5cecf52a77b8a15437a0c58190628609100e3e49141"}, "downloads": -1, "filename": "django_stagesetting-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "290b9c9f2a947b84c9606e21b30451aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25116, "upload_time": "2015-08-02T12:30:12", "upload_time_iso_8601": "2015-08-02T12:30:12.862200Z", "url": "https://files.pythonhosted.org/packages/0e/85/83b85125904aeade16d107917f6745d0c547cc7b8705277b6db40bc9b405/django_stagesetting-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13a75568d6df141fc44028dece5a1dd2", "sha256": "6ea6833ca49f841c9a7291660d45fa8016b77c3192b22180edb12221139acf50"}, "downloads": -1, "filename": "django-stagesetting-0.2.0.tar.gz", "has_sig": false, "md5_digest": "13a75568d6df141fc44028dece5a1dd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16660, "upload_time": "2015-08-02T12:30:08", "upload_time_iso_8601": "2015-08-02T12:30:08.378856Z", "url": "https://files.pythonhosted.org/packages/e7/a7/cc393d276b3ccdbae1380ffaab2561ada969353dc433ded2b71ae6018ee6/django-stagesetting-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "be242d9b385834d8c08217865b1d431e", "sha256": "fbb1d130a7b83fb7245b57377c7afefee2ccfa47e21bc53fef70f159df7ace03"}, "downloads": -1, "filename": "django_stagesetting-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "be242d9b385834d8c08217865b1d431e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28706, "upload_time": "2015-08-03T18:12:16", "upload_time_iso_8601": "2015-08-03T18:12:16.687624Z", "url": "https://files.pythonhosted.org/packages/b2/93/2105f215d47ffe9d0d8b279135db4ba340b8b3e03d384b97fc2feec2e091/django_stagesetting-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68097d0c44ad3180a195e7ba4533ac4b", "sha256": "a901765fee8299a05e645610ab1d3913ddc3b87808a584adecae33e68a5227df"}, "downloads": -1, "filename": "django-stagesetting-0.3.0.tar.gz", "has_sig": false, "md5_digest": "68097d0c44ad3180a195e7ba4533ac4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23732, "upload_time": "2015-08-03T18:12:12", "upload_time_iso_8601": "2015-08-03T18:12:12.859661Z", "url": "https://files.pythonhosted.org/packages/53/a1/f6a92dbffbd35bccc1ea46ee614256b77840fa6ff00f40f2f349bbe8f08c/django-stagesetting-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b6940c5c1cdf7b871685980a837ec6cc", "sha256": "b7ca33403f75311415ae6dfd53c4df03f5b77f76e86047a7617157d9a20ffd78"}, "downloads": -1, "filename": "django_stagesetting-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b6940c5c1cdf7b871685980a837ec6cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 28824, "upload_time": "2015-08-04T08:25:50", "upload_time_iso_8601": "2015-08-04T08:25:50.358482Z", "url": "https://files.pythonhosted.org/packages/2f/a9/208cc2c6dbbdefde61096d2359ea4c040444baa6cad36fc7a88bd160388b/django_stagesetting-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "161d44735f55a56ff01d2265d895a667", "sha256": "54686edc5453a4bb89c74fb55446f5019b70d11f644bc7525267a052ad18d153"}, "downloads": -1, "filename": "django-stagesetting-0.3.1.tar.gz", "has_sig": false, "md5_digest": "161d44735f55a56ff01d2265d895a667", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23665, "upload_time": "2015-08-04T08:25:47", "upload_time_iso_8601": "2015-08-04T08:25:47.039998Z", "url": "https://files.pythonhosted.org/packages/5f/e5/a6e24bc661556d9bdf7917051f35564f8670488905b924aa1a361d51456f/django-stagesetting-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "7e3d0001c75dc5d335fa5a5216fc7d6f", "sha256": "a8e64d4b5ea79111abbb3f86ab1b355d2d2f87d3233189e503b5ff5677437a82"}, "downloads": -1, "filename": "django_stagesetting-0.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7e3d0001c75dc5d335fa5a5216fc7d6f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29017, "upload_time": "2015-08-04T09:06:37", "upload_time_iso_8601": "2015-08-04T09:06:37.653253Z", "url": "https://files.pythonhosted.org/packages/d7/50/58166df7c83284fb46bcebdc51e649c7b0704d03671cb0c81ba2c1792d24/django_stagesetting-0.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f1eb794852c95140b3acaa86d471002", "sha256": "4fbb68d918c3d0863d781a6c98a1d09c94c067481c0098496fc6af40bf591928"}, "downloads": -1, "filename": "django-stagesetting-0.3.2.tar.gz", "has_sig": false, "md5_digest": "3f1eb794852c95140b3acaa86d471002", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24099, "upload_time": "2015-08-04T09:06:33", "upload_time_iso_8601": "2015-08-04T09:06:33.946334Z", "url": "https://files.pythonhosted.org/packages/10/97/84b63f9dd4628a91d8fd2d78e02ae1dacc4ada0786a5d8fa97ed1e39bf68/django-stagesetting-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "c004dac67464675244c6cdcde0f2e953", "sha256": "39d601b4815d1a98ee772767d888b7935297c3826ad5c1db58c99d95d7bec863"}, "downloads": -1, "filename": "django_stagesetting-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c004dac67464675244c6cdcde0f2e953", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35498, "upload_time": "2015-08-18T18:53:29", "upload_time_iso_8601": "2015-08-18T18:53:29.631482Z", "url": "https://files.pythonhosted.org/packages/1f/3e/b974f68c8e04679bfe78224fb9fd9ec9f67c52c81b2036316b7c0c5a043a/django_stagesetting-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bae2fc14ee7c4decb956cc8b967cc088", "sha256": "da4c4f19e61ff6301423e680a6877231c3aceb841e69ad954f416fc29396373a"}, "downloads": -1, "filename": "django-stagesetting-0.4.0.tar.gz", "has_sig": false, "md5_digest": "bae2fc14ee7c4decb956cc8b967cc088", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33004, "upload_time": "2015-08-18T18:53:24", "upload_time_iso_8601": "2015-08-18T18:53:24.247101Z", "url": "https://files.pythonhosted.org/packages/d5/7f/98c82ce79f39637dfc16b2033faf610532b486d8a2248f4b60d96406d4a1/django-stagesetting-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "84a1749a0590a263bb956f0f48516226", "sha256": "25739239261fca30a86d0fcde85517f016dbd818ed80765813acfa31d8abd3cf"}, "downloads": -1, "filename": "django_stagesetting-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "84a1749a0590a263bb956f0f48516226", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 35992, "upload_time": "2015-08-23T18:15:25", "upload_time_iso_8601": "2015-08-23T18:15:25.975271Z", "url": "https://files.pythonhosted.org/packages/f2/cc/9f0c7fc8c5df0602b47bc358c1cab07788e42244ab4cbef27b7d607d91e1/django_stagesetting-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fceb41d89d1a1761ecf42ef3e5c5a0d3", "sha256": "b1c9f03e73c3514062267daeca9ab2aabeb10fe1608557eccf95521446a9ec8c"}, "downloads": -1, "filename": "django-stagesetting-0.4.1.tar.gz", "has_sig": false, "md5_digest": "fceb41d89d1a1761ecf42ef3e5c5a0d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34081, "upload_time": "2015-08-23T18:15:21", "upload_time_iso_8601": "2015-08-23T18:15:21.559028Z", "url": "https://files.pythonhosted.org/packages/fa/cf/f253365f005fdf96002f1ea2c903c626e5462d5d07d07ece6ae5ee14f29f/django-stagesetting-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "dabd4f621afeee6f3c5e906fae16ba35", "sha256": "dedfdc190c58d5c8abd61b3ab886556fe42a4b398c77ad99787c234b74d3a565"}, "downloads": -1, "filename": "django_stagesetting-0.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dabd4f621afeee6f3c5e906fae16ba35", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36300, "upload_time": "2015-09-08T07:32:20", "upload_time_iso_8601": "2015-09-08T07:32:20.245047Z", "url": "https://files.pythonhosted.org/packages/69/ce/3693aa3aeeb4eade84ecb2072efbb3c4a1739cde3cac76f7253d7e912931/django_stagesetting-0.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb21f4a3c01c511aa73ca67fc56fe2e8", "sha256": "aa6dde32604b00c372e7ff8bd019396e7c716c3fddeb30d182dc5e8d5ab32ab9"}, "downloads": -1, "filename": "django-stagesetting-0.4.2.tar.gz", "has_sig": false, "md5_digest": "fb21f4a3c01c511aa73ca67fc56fe2e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34741, "upload_time": "2015-09-08T07:32:15", "upload_time_iso_8601": "2015-09-08T07:32:15.522191Z", "url": "https://files.pythonhosted.org/packages/8f/cd/fd5aac3849c37766f447eab62dd93d2aa54bdcbba05f8e4cf98669497c72/django-stagesetting-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "a50b88f807d3df73e2f3347f92aa273d", "sha256": "8db1585ace4a58e7369f6ce031775e45a5acfb4f1ad0c30192a292878aacad1d"}, "downloads": -1, "filename": "django_stagesetting-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a50b88f807d3df73e2f3347f92aa273d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37789, "upload_time": "2017-02-27T20:04:56", "upload_time_iso_8601": "2017-02-27T20:04:56.148608Z", "url": "https://files.pythonhosted.org/packages/ab/44/5ba0df78a7fd45e8cf98a3bd085059861b1e0ffc40623b02cbacafa8d1fd/django_stagesetting-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1629bab2c63e6adc08e79d00dab5a1bf", "sha256": "3b18218c26e2bb736f92a5670571f93eda3f4f88b8dce871caa5cef49814ccf2"}, "downloads": -1, "filename": "django-stagesetting-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1629bab2c63e6adc08e79d00dab5a1bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36343, "upload_time": "2017-02-27T20:04:58", "upload_time_iso_8601": "2017-02-27T20:04:58.690379Z", "url": "https://files.pythonhosted.org/packages/15/8e/c8ab0b9b476573030abf121b701792e3ea28a2427279aa1b7875a66f4fe3/django-stagesetting-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a50b88f807d3df73e2f3347f92aa273d", "sha256": "8db1585ace4a58e7369f6ce031775e45a5acfb4f1ad0c30192a292878aacad1d"}, "downloads": -1, "filename": "django_stagesetting-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a50b88f807d3df73e2f3347f92aa273d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37789, "upload_time": "2017-02-27T20:04:56", "upload_time_iso_8601": "2017-02-27T20:04:56.148608Z", "url": "https://files.pythonhosted.org/packages/ab/44/5ba0df78a7fd45e8cf98a3bd085059861b1e0ffc40623b02cbacafa8d1fd/django_stagesetting-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1629bab2c63e6adc08e79d00dab5a1bf", "sha256": "3b18218c26e2bb736f92a5670571f93eda3f4f88b8dce871caa5cef49814ccf2"}, "downloads": -1, "filename": "django-stagesetting-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1629bab2c63e6adc08e79d00dab5a1bf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36343, "upload_time": "2017-02-27T20:04:58", "upload_time_iso_8601": "2017-02-27T20:04:58.690379Z", "url": "https://files.pythonhosted.org/packages/15/8e/c8ab0b9b476573030abf121b701792e3ea28a2427279aa1b7875a66f4fe3/django-stagesetting-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:58 2020"}