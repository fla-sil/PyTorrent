{"info": {"author": "Marc Wouts", "author_email": "marc.wouts@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Framework :: Jupyter", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Easy Plotly\n\n[![Build Status](https://travis-ci.com/mwouts/easyplotly.svg?branch=master)](https://travis-ci.com/mwouts/easyplotly)\n[![codecov.io](https://codecov.io/github/mwouts/easyplotly/coverage.svg?branch=master)](https://codecov.io/github/mwouts/easyplotly?branch=master)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/mwouts/easyplotly.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/mwouts/easyplotly/context:python)\n[![Pypi](https://img.shields.io/pypi/v/easyplotly.svg)](https://pypi.python.org/pypi/easyplotly)\n[![pyversions](https://img.shields.io/pypi/pyversions/easyplotly.svg)](https://pypi.python.org/pypi/easyplotly)\n[![Jupyter Notebook](https://img.shields.io/badge/Binder-Notebook-blue.svg)](\n    https://mybinder.org/v2/gh/mwouts/easyplotly/master?filepath=README.md)\n[![GitHub.io](https://img.shields.io/badge/GitHub-HTML-blue.svg)](https://mwouts.github.io/easyplotly)\n<a class=\"github-button\" href=\"https://github.com/mwouts/easyplotly\" data-icon=\"octicon-star\" data-show-count=\"true\" aria-label=\"Star mwouts/easyplotly on GitHub\">Star</a>\n\nThis is on-going research on how ploting with [Plotly.py](https://github.com/plotly/plotly.py), \nespecially ploting of hierarchical data, could be made easier.\n\nSee the outputs of the commands below - tables and plots - \nin the [HTML export](https://mwouts.github.io/easyplotly/) of this notebook.\nOr even, open this `README.md` as a notebook and run it interactively on \n[Binder](https://mybinder.org/v2/gh/mwouts/easyplotly/master?filepath=README.md)!\n\n## Installation\n\nInstall the `easyplotly` python package with\n\n```\npip install easyplotly\n```\n\n## Sample data\n\nOur sample data is the population and life expectancy, per country and region:\n\n```python\nimport world_bank_data as wb\nimport itables.interactive\n\n# Collect countries\ncountries = wb.get_countries()\nregion_country = countries[['region', 'name']].rename(columns={'name': 'country'})\n\n# Population & life expectancy\nregion_country['population'] = wb.get_series('SP.POP.TOTL', mrv=1, id_or_value='id', simplify_index=True)\nregion_country['life_expectancy'] = wb.get_series('SP.DYN.LE00.IN', mrv=1, id_or_value='id', simplify_index=True)\n\n# Observations restricted to the countries\npop_and_exp = region_country.loc[countries.region != 'Aggregates'].set_index(['region', 'country']).sort_index()\npop_and_exp\n```\n\n## Sunburst Charts\n\n```python\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport easyplotly as ep\n\npio.renderers.default = 'notebook_connected'\nlayout = go.Layout(title='World Population and Life Expectancy<br>Data from the World Bank', height=800)\n```\n\nOur `Sunburst` function accepts inputs of many types: pandas Series, dictionaries, and list of such objects.\nIf you want, you can redefine `labels`, or add other arguments like `text` - use either a Series with an index\nidentical to that of `values`, or a function that to any tuple `(level0, level1, ... leveln)`\nassociates the corresponding label or value.\n\n```python\nsunburst = ep.Sunburst(pop_and_exp.population, text=pop_and_exp.life_expectancy)\ngo.Figure(sunburst, layout)\n```\n\n## Treemaps\n\nThe `Treemap` function works like the `Sunburst` one:\n\n```python\ntreemap = ep.Treemap(pop_and_exp.population, text=pop_and_exp.life_expectancy)\ngo.Figure(treemap, layout)\n```\n\nJust like the `Sunburst` function, it also accepts all the arguments supported by the original\n`go.Sunburst` object. You're even welcome to use the\n[magic underscore notation](https://plot.ly/python/creating-and-updating-figures/#magic-underscore-notation),\nas we do below when we set `marker.colors` with `marker_colors`:\n\n```python\nimport numpy as np\n\n\ndef average(values, weights):\n    \"\"\"Same as np.average, but remove nans\"\"\"\n    total_obs = 0.\n    total_weight = 0.\n    if isinstance(values, np.float):\n        values = [values]\n        weights = [weights]\n    for x, w in zip(values, weights):\n        xw = x * w\n        if np.isnan(xw):\n            continue\n        total_obs += xw\n        total_weight += w\n    return total_obs / total_weight if total_weight != 0 else np.NaN\n\n\ndef life_expectancy(item):\n    \"\"\"Life expectancy associated to a tuple like (), ('Europe & Central Asia') or ('East Asia & Pacific', 'China')\"\"\"\n    sub = pop_and_exp.loc[item] if item else pop_and_exp\n    return average(sub.life_expectancy, weights=sub.population)\n\n\ndef text(item):\n    \"\"\"Return the text associated to a tuple like (), ('Europe & Central Asia') or ('East Asia & Pacific', 'China')\"\"\"\n    life_exp = life_expectancy(item)\n    if life_exp > 0:\n        pop = pop_and_exp.population.loc[item].sum() if item else pop_and_exp.population.sum()  \n        return 'Population: {:,}<br>Life expectancy: {:.2f}'.format(int(pop), life_exp)\n\n\ntreemap = ep.Treemap(pop_and_exp.population,\n                     hoverinfo='label+text',\n                     text=text,\n                     root_label='World',\n                     # magic underscore notation\n                     marker_colors=life_expectancy,\n                     marker_colorscale='RdBu')\n\ngo.Figure(treemap, layout)\n```\n\n## Sankey Plot\n\nPlot links from a dict, or a series with a source/target multiindex:\n\n```python\nlinks = {('A', 'B'): 3, ('B', 'C'): 1, ('B', 'D'): 2, ('C', 'A'): 1, ('D', 'A'): 1, ('A', 'D'): 1}\ngo.Figure(ep.Sankey(links))\n```\n\nPlot links from a DataFrame (sources as the index, targets as the columns):\n\n```python\nimport pandas as pd\n```\n\n```python\nlinks = pd.DataFrame(1, index=['Source A', 'Source B'], columns=['Target'])\ngo.Figure(ep.Sankey(links))\n```\n\nWe conclude the examples with a plot in which the links are a list of pandas Series:\n\n```python\nregion_income = wb.get_countries().query(\"region != 'Aggregates'\").copy()\nregion_income['population'] = wb.get_series('SP.POP.TOTL', mrv=1, id_or_value='id', simplify_index=True)\nincome_lending = region_income.copy()\nregion_income.set_index(['region', 'incomeLevel'], inplace=True)\nincome_lending.set_index(['incomeLevel', 'lendingType'], inplace=True)\n\nlayout = go.Layout(title='Regions income and lending type<br>Data from the World Bank')\n\nsankey = ep.Sankey(\n    link_value=[region_income['population'], income_lending['population']],\n    link_label=[region_income['name'], income_lending['name']])\n\ngo.Figure(sankey, layout)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mwouts/easyplotly", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "easyplotly", "package_url": "https://pypi.org/project/easyplotly/", "platform": "", "project_url": "https://pypi.org/project/easyplotly/", "project_urls": {"Homepage": "https://github.com/mwouts/easyplotly"}, "release_url": "https://pypi.org/project/easyplotly/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Easy Plotly", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Easy Plotly</h1>\n<p><a href=\"https://travis-ci.com/mwouts/easyplotly\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c992eb288fe86e81a6496652638a3f931fa759e7/68747470733a2f2f7472617669732d63692e636f6d2f6d776f7574732f65617379706c6f746c792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/mwouts/easyplotly?branch=master\" rel=\"nofollow\"><img alt=\"codecov.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dca3cb35703faa58cd78aab6ac05b8aca92bb7b8/68747470733a2f2f636f6465636f762e696f2f6769746875622f6d776f7574732f65617379706c6f746c792f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://lgtm.com/projects/g/mwouts/easyplotly/context:python\" rel=\"nofollow\"><img alt=\"Language grade: Python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c06c3eb3acf163a75eda767c66d30652953acf7f/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f6d776f7574732f65617379706c6f746c792e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138\"></a>\n<a href=\"https://pypi.python.org/pypi/easyplotly\" rel=\"nofollow\"><img alt=\"Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6916940bd3ab7cbfcdf32b4854ca8a1b98601101/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f65617379706c6f746c792e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/easyplotly\" rel=\"nofollow\"><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b38ac4fc5a474cef8fc2fc31e72d7f7b4c9c6ae8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f65617379706c6f746c792e737667\"></a>\n<a href=\"https://mybinder.org/v2/gh/mwouts/easyplotly/master?filepath=README.md\" rel=\"nofollow\"><img alt=\"Jupyter Notebook\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e18631504fb0354e822ab7049d743d18ebd1ca6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f42696e6465722d4e6f7465626f6f6b2d626c75652e737667\"></a>\n<a href=\"https://mwouts.github.io/easyplotly\" rel=\"nofollow\"><img alt=\"GitHub.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c932d6ce21da3463bddd48e3ca6b593553f4f26d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4769744875622d48544d4c2d626c75652e737667\"></a>\n<a href=\"https://github.com/mwouts/easyplotly\" rel=\"nofollow\">Star</a></p>\n<p>This is on-going research on how ploting with <a href=\"https://github.com/plotly/plotly.py\" rel=\"nofollow\">Plotly.py</a>,\nespecially ploting of hierarchical data, could be made easier.</p>\n<p>See the outputs of the commands below - tables and plots -\nin the <a href=\"https://mwouts.github.io/easyplotly/\" rel=\"nofollow\">HTML export</a> of this notebook.\nOr even, open this <code>README.md</code> as a notebook and run it interactively on\n<a href=\"https://mybinder.org/v2/gh/mwouts/easyplotly/master?filepath=README.md\" rel=\"nofollow\">Binder</a>!</p>\n<h2>Installation</h2>\n<p>Install the <code>easyplotly</code> python package with</p>\n<pre><code>pip install easyplotly\n</code></pre>\n<h2>Sample data</h2>\n<p>Our sample data is the population and life expectancy, per country and region:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">world_bank_data</span> <span class=\"k\">as</span> <span class=\"nn\">wb</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itables.interactive</span>\n\n<span class=\"c1\"># Collect countries</span>\n<span class=\"n\">countries</span> <span class=\"o\">=</span> <span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">get_countries</span><span class=\"p\">()</span>\n<span class=\"n\">region_country</span> <span class=\"o\">=</span> <span class=\"n\">countries</span><span class=\"p\">[[</span><span class=\"s1\">'region'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'country'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># Population &amp; life expectancy</span>\n<span class=\"n\">region_country</span><span class=\"p\">[</span><span class=\"s1\">'population'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">get_series</span><span class=\"p\">(</span><span class=\"s1\">'SP.POP.TOTL'</span><span class=\"p\">,</span> <span class=\"n\">mrv</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">id_or_value</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">simplify_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">region_country</span><span class=\"p\">[</span><span class=\"s1\">'life_expectancy'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">get_series</span><span class=\"p\">(</span><span class=\"s1\">'SP.DYN.LE00.IN'</span><span class=\"p\">,</span> <span class=\"n\">mrv</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">id_or_value</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">simplify_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Observations restricted to the countries</span>\n<span class=\"n\">pop_and_exp</span> <span class=\"o\">=</span> <span class=\"n\">region_country</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">countries</span><span class=\"o\">.</span><span class=\"n\">region</span> <span class=\"o\">!=</span> <span class=\"s1\">'Aggregates'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">([</span><span class=\"s1\">'region'</span><span class=\"p\">,</span> <span class=\"s1\">'country'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">sort_index</span><span class=\"p\">()</span>\n<span class=\"n\">pop_and_exp</span>\n</pre>\n<h2>Sunburst Charts</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">plotly.graph_objects</span> <span class=\"k\">as</span> <span class=\"nn\">go</span>\n<span class=\"kn\">import</span> <span class=\"nn\">plotly.io</span> <span class=\"k\">as</span> <span class=\"nn\">pio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">easyplotly</span> <span class=\"k\">as</span> <span class=\"nn\">ep</span>\n\n<span class=\"n\">pio</span><span class=\"o\">.</span><span class=\"n\">renderers</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"s1\">'notebook_connected'</span>\n<span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Layout</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'World Population and Life Expectancy&lt;br&gt;Data from the World Bank'</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">800</span><span class=\"p\">)</span>\n</pre>\n<p>Our <code>Sunburst</code> function accepts inputs of many types: pandas Series, dictionaries, and list of such objects.\nIf you want, you can redefine <code>labels</code>, or add other arguments like <code>text</code> - use either a Series with an index\nidentical to that of <code>values</code>, or a function that to any tuple <code>(level0, level1, ... leveln)</code>\nassociates the corresponding label or value.</p>\n<pre><span class=\"n\">sunburst</span> <span class=\"o\">=</span> <span class=\"n\">ep</span><span class=\"o\">.</span><span class=\"n\">Sunburst</span><span class=\"p\">(</span><span class=\"n\">pop_and_exp</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">pop_and_exp</span><span class=\"o\">.</span><span class=\"n\">life_expectancy</span><span class=\"p\">)</span>\n<span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">(</span><span class=\"n\">sunburst</span><span class=\"p\">,</span> <span class=\"n\">layout</span><span class=\"p\">)</span>\n</pre>\n<h2>Treemaps</h2>\n<p>The <code>Treemap</code> function works like the <code>Sunburst</code> one:</p>\n<pre><span class=\"n\">treemap</span> <span class=\"o\">=</span> <span class=\"n\">ep</span><span class=\"o\">.</span><span class=\"n\">Treemap</span><span class=\"p\">(</span><span class=\"n\">pop_and_exp</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">pop_and_exp</span><span class=\"o\">.</span><span class=\"n\">life_expectancy</span><span class=\"p\">)</span>\n<span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">(</span><span class=\"n\">treemap</span><span class=\"p\">,</span> <span class=\"n\">layout</span><span class=\"p\">)</span>\n</pre>\n<p>Just like the <code>Sunburst</code> function, it also accepts all the arguments supported by the original\n<code>go.Sunburst</code> object. You're even welcome to use the\n<a href=\"https://plot.ly/python/creating-and-updating-figures/#magic-underscore-notation\" rel=\"nofollow\">magic underscore notation</a>,\nas we do below when we set <code>marker.colors</code> with <code>marker_colors</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Same as np.average, but remove nans\"\"\"</span>\n    <span class=\"n\">total_obs</span> <span class=\"o\">=</span> <span class=\"mf\">0.</span>\n    <span class=\"n\">total_weight</span> <span class=\"o\">=</span> <span class=\"mf\">0.</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float</span><span class=\"p\">):</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">values</span><span class=\"p\">]</span>\n        <span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">weights</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"p\">):</span>\n        <span class=\"n\">xw</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">w</span>\n        <span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">isnan</span><span class=\"p\">(</span><span class=\"n\">xw</span><span class=\"p\">):</span>\n            <span class=\"k\">continue</span>\n        <span class=\"n\">total_obs</span> <span class=\"o\">+=</span> <span class=\"n\">xw</span>\n        <span class=\"n\">total_weight</span> <span class=\"o\">+=</span> <span class=\"n\">w</span>\n    <span class=\"k\">return</span> <span class=\"n\">total_obs</span> <span class=\"o\">/</span> <span class=\"n\">total_weight</span> <span class=\"k\">if</span> <span class=\"n\">total_weight</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">NaN</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">life_expectancy</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Life expectancy associated to a tuple like (), ('Europe &amp; Central Asia') or ('East Asia &amp; Pacific', 'China')\"\"\"</span>\n    <span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"n\">pop_and_exp</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"k\">else</span> <span class=\"n\">pop_and_exp</span>\n    <span class=\"k\">return</span> <span class=\"n\">average</span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">life_expectancy</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"n\">sub</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">text</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Return the text associated to a tuple like (), ('Europe &amp; Central Asia') or ('East Asia &amp; Pacific', 'China')\"\"\"</span>\n    <span class=\"n\">life_exp</span> <span class=\"o\">=</span> <span class=\"n\">life_expectancy</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">life_exp</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">pop</span> <span class=\"o\">=</span> <span class=\"n\">pop_and_exp</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"k\">else</span> <span class=\"n\">pop_and_exp</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>  \n        <span class=\"k\">return</span> <span class=\"s1\">'Population: </span><span class=\"si\">{:,}</span><span class=\"s1\">&lt;br&gt;Life expectancy: </span><span class=\"si\">{:.2f}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">pop</span><span class=\"p\">),</span> <span class=\"n\">life_exp</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">treemap</span> <span class=\"o\">=</span> <span class=\"n\">ep</span><span class=\"o\">.</span><span class=\"n\">Treemap</span><span class=\"p\">(</span><span class=\"n\">pop_and_exp</span><span class=\"o\">.</span><span class=\"n\">population</span><span class=\"p\">,</span>\n                     <span class=\"n\">hoverinfo</span><span class=\"o\">=</span><span class=\"s1\">'label+text'</span><span class=\"p\">,</span>\n                     <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">,</span>\n                     <span class=\"n\">root_label</span><span class=\"o\">=</span><span class=\"s1\">'World'</span><span class=\"p\">,</span>\n                     <span class=\"c1\"># magic underscore notation</span>\n                     <span class=\"n\">marker_colors</span><span class=\"o\">=</span><span class=\"n\">life_expectancy</span><span class=\"p\">,</span>\n                     <span class=\"n\">marker_colorscale</span><span class=\"o\">=</span><span class=\"s1\">'RdBu'</span><span class=\"p\">)</span>\n\n<span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">(</span><span class=\"n\">treemap</span><span class=\"p\">,</span> <span class=\"n\">layout</span><span class=\"p\">)</span>\n</pre>\n<h2>Sankey Plot</h2>\n<p>Plot links from a dict, or a series with a source/target multiindex:</p>\n<pre><span class=\"n\">links</span> <span class=\"o\">=</span> <span class=\"p\">{(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">):</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">):</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">):</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">):</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">):</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">):</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">(</span><span class=\"n\">ep</span><span class=\"o\">.</span><span class=\"n\">Sankey</span><span class=\"p\">(</span><span class=\"n\">links</span><span class=\"p\">))</span>\n</pre>\n<p>Plot links from a DataFrame (sources as the index, targets as the columns):</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n</pre>\n<pre><span class=\"n\">links</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Source A'</span><span class=\"p\">,</span> <span class=\"s1\">'Source B'</span><span class=\"p\">],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Target'</span><span class=\"p\">])</span>\n<span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">(</span><span class=\"n\">ep</span><span class=\"o\">.</span><span class=\"n\">Sankey</span><span class=\"p\">(</span><span class=\"n\">links</span><span class=\"p\">))</span>\n</pre>\n<p>We conclude the examples with a plot in which the links are a list of pandas Series:</p>\n<pre><span class=\"n\">region_income</span> <span class=\"o\">=</span> <span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">get_countries</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"region != 'Aggregates'\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">region_income</span><span class=\"p\">[</span><span class=\"s1\">'population'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">wb</span><span class=\"o\">.</span><span class=\"n\">get_series</span><span class=\"p\">(</span><span class=\"s1\">'SP.POP.TOTL'</span><span class=\"p\">,</span> <span class=\"n\">mrv</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">id_or_value</span><span class=\"o\">=</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"n\">simplify_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">income_lending</span> <span class=\"o\">=</span> <span class=\"n\">region_income</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"n\">region_income</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">([</span><span class=\"s1\">'region'</span><span class=\"p\">,</span> <span class=\"s1\">'incomeLevel'</span><span class=\"p\">],</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">income_lending</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">([</span><span class=\"s1\">'incomeLevel'</span><span class=\"p\">,</span> <span class=\"s1\">'lendingType'</span><span class=\"p\">],</span> <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">layout</span> <span class=\"o\">=</span> <span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Layout</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'Regions income and lending type&lt;br&gt;Data from the World Bank'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sankey</span> <span class=\"o\">=</span> <span class=\"n\">ep</span><span class=\"o\">.</span><span class=\"n\">Sankey</span><span class=\"p\">(</span>\n    <span class=\"n\">link_value</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">region_income</span><span class=\"p\">[</span><span class=\"s1\">'population'</span><span class=\"p\">],</span> <span class=\"n\">income_lending</span><span class=\"p\">[</span><span class=\"s1\">'population'</span><span class=\"p\">]],</span>\n    <span class=\"n\">link_label</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">region_income</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span> <span class=\"n\">income_lending</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]])</span>\n\n<span class=\"n\">go</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">(</span><span class=\"n\">sankey</span><span class=\"p\">,</span> <span class=\"n\">layout</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6240310, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2936946532dc6e642f9863ac7f4ef8bc", "sha256": "92c94cf9acbf7137ef9eee0a80d211943cb837ea224411f4d17420926ed534cf"}, "downloads": -1, "filename": "easyplotly-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2936946532dc6e642f9863ac7f4ef8bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6128, "upload_time": "2019-12-01T18:05:55", "upload_time_iso_8601": "2019-12-01T18:05:55.177999Z", "url": "https://files.pythonhosted.org/packages/f8/e9/09b69160639dbffa940cf26f730305395bd773f4a019499bdccc638c4fcb/easyplotly-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e5b6a7299b3dbcd1dea9eb4dfbd833de", "sha256": "48d8dc245f4a4b7c10bffee4f1a3f54e8659390cedbbe7137743c5e60e02bd11"}, "downloads": -1, "filename": "easyplotly-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e5b6a7299b3dbcd1dea9eb4dfbd833de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6484, "upload_time": "2019-12-01T23:50:54", "upload_time_iso_8601": "2019-12-01T23:50:54.116605Z", "url": "https://files.pythonhosted.org/packages/05/73/3a0927e227eaf3c60badfbd49f9832c8ea12126f2a0f725434c247f6c9fd/easyplotly-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "daa5199c89b1c08ad2647283cc9c0756", "sha256": "cb926be32231eddc1b1d943bd7a7a9419ee9bc9523a0407cb68b4ac468baa34c"}, "downloads": -1, "filename": "easyplotly-0.1.2.tar.gz", "has_sig": false, "md5_digest": "daa5199c89b1c08ad2647283cc9c0756", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7944, "upload_time": "2019-12-04T07:27:35", "upload_time_iso_8601": "2019-12-04T07:27:35.739561Z", "url": "https://files.pythonhosted.org/packages/42/34/e7e29e106f956a7ad2d3cb2a49032bf0c9600b557be229bdd5a05d5be0f0/easyplotly-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "5fb68fb187a00c9861d9b595d7ab7e34", "sha256": "0a8f29c297f2be9eab299d9f769f6d0715bfe870352fc4394ba8a5d16f249cba"}, "downloads": -1, "filename": "easyplotly-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5fb68fb187a00c9861d9b595d7ab7e34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8020, "upload_time": "2019-12-04T07:49:43", "upload_time_iso_8601": "2019-12-04T07:49:43.284528Z", "url": "https://files.pythonhosted.org/packages/06/e2/2886d53133b463a4d78bafc6920911481f4cba96f299cedbf853f7aa31a8/easyplotly-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5fb68fb187a00c9861d9b595d7ab7e34", "sha256": "0a8f29c297f2be9eab299d9f769f6d0715bfe870352fc4394ba8a5d16f249cba"}, "downloads": -1, "filename": "easyplotly-0.1.3.tar.gz", "has_sig": false, "md5_digest": "5fb68fb187a00c9861d9b595d7ab7e34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8020, "upload_time": "2019-12-04T07:49:43", "upload_time_iso_8601": "2019-12-04T07:49:43.284528Z", "url": "https://files.pythonhosted.org/packages/06/e2/2886d53133b463a4d78bafc6920911481f4cba96f299cedbf853f7aa31a8/easyplotly-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:17 2020"}