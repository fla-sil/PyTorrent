{"info": {"author": "Ziya SARIKAYA @ziyasal", "author_email": "sarikayaziya@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. image:: https://github.com/ziyasal/pyley/raw/master/pyley.png?raw=true\n\npyley\n=====\n\n.. image:: https://img.shields.io/pypi/v/pyley.svg\n    :target: https://pypi.org/project/pyley\n\n.. image:: https://img.shields.io/pypi/pyversions/pyley.svg\n    :target: https://pypi.org/project/pyley\n\n.. image:: https://travis-ci.org/ziyasal/pyley.svg?branch=master\n    :target: https://travis-ci.org/ziyasal/pyley\n\n.. image:: https://coveralls.io/repos/ziyasal/pyley/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/ziyasal/pyley?branch=master\n\n`Python <https://www.python.org/>`_ client for an open-source graph database **Cayley** `<https://github.com/google/cayley>`_.\n\n    Cayley is an open-source graph inspired by the graph database behind `Freebase <http://freebase.com/>`_ and Google's `Knowledge Graph <http://www.google.com/insidesearch/features/search/knowledge.html>`_. Its goal is to be a part of the developer's toolbox where `Linked Data <http://linkeddata.org/>`_ and graph-shaped data (semantic webs, social networks, etc) in general are concerned.\n\nInstall via pip\n---------------\n\nYou can install pyley using::\n\n    $ pip install pyley\n\nSample\n------\n\n**Import pyley:**\n\n.. code-block:: python\n\n    from pyley import CayleyClient, GraphObject\n\n    # Create cayley client\n    # this creates client with default parameters `http://localhost:64210/api/v1/query/gizmo`\n    client = CayleyClient()\n\n    # or  specify `url` and `version` parameters\n    client = CayleyClient(\"http://localhost:64210\", \"v1\")\n\n    g = GraphObject()\n\n    # Query all vertices in the graph, limit to the first 5 vertices found.\n    g.Vertex().GetLimit(5)\n\n    # Start with only one vertex, the literal name \"Humphrey Bogart\", and retrieve all of them.\n    query = g.Vertex(\"Humphrey Bogart\").All();\n    response = client.Send(query)\n    # response.result contains JSON data and response.r contains raw response\n    print response.result \n\n    # `g` and `V` are synonyms for `graph` and `Vertex` respectively, as they are quite common.\n    query = g.V(\"Humphrey Bogart\").All()\n    response = client.Send(query)\n\n    # \"Humphrey Bogart\" is a name, but not an entity. \n    # Let's find the entities with this name in our dataset.\n    # Follow links that are pointing In to our \"Humphrey Bogart\" node with the predicate \"name\".\n    query = g.V(\"Humphrey Bogart\").In(\"<name>\").All()\n    response = client.Send(query)\n\n    # Notice that \"name\" is a generic predicate in our dataset. \n    # Starting with a movie gives a similar effect.\n    query = g.V(\"Casablanca\").In(\"name\").All()\n    response = client.Send(query)\n\n    # Relatedly, we can ask the reverse; all ids with the name \"Casablanca\"\n    query = g.V().Has(\"name\", \"Casablanca\").All()\n    response = client.Send(query)\n\n    # Let's get the list of actors in the film\n    query = g.V().Has(\"name\", \"Casablanca\") \\\n                  .Out(\"/film/film/starring\") \\\n                  .Out(\"/film/performance/actor\") \\\n                  .Out(\"name\") \\\n                  .All()\n\n    response = client.Send(query)\n\n    # But this is starting to get long. \n    # Let's use a morphism -- a pre-defined path stored in a variable -- as our linkage\n    film_to_actor = g.Morphism().Out(\"/film/film/starring\").Out(\"/film/performance/actor\")\n    query = g.V() \\\n            .Has(\"name\", \"Casablanca\") \\\n            .Follow(film_to_actor) \\\n            .Out(\"name\") \\\n            .All()\n    response = client.Send(query)\n\n    # Add data programatically to the JSON result list. Can be any JSON type.\n    query = g.Emit({'name': \"John Doe\", 'age': 41, 'isActor': True})\n    response = client.Send(query)\n\nBugs\n----\n\nIf you encounter a bug, performance issue, or malfunction, please add an `Issues <https://github.com/ziyasal/pyley/issues>`_ with steps on how to reproduce the problem\nor feel to free to open a pull request.\n\n\nTODO\n----\n\n- Improve Gizmo implementation (Basic steps implemented at the moment)\n- Add more tests\n- Add more documentation\n\nOpen Source  Projects in Use\n----------------------------\n\n- `requests <https://github.com/kennethreitz/requests>`_ by @kennethreitz\n\nLicense\n-------\n\n@zi\u03bbasal & @abdullahselek\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.org/pypi/pyley", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ziyasal/pyley", "keywords": "graph database,cayley,cayley python client,client", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pyley", "package_url": "https://pypi.org/project/pyley/", "platform": "Any", "project_url": "https://pypi.org/project/pyley/", "project_urls": {"Download": "https://pypi.org/pypi/pyley", "Homepage": "https://github.com/ziyasal/pyley"}, "release_url": "https://pypi.org/project/pyley/0.2.2.2/", "requires_dist": ["requests"], "requires_python": "", "summary": "Python client for an open-source graph database Cayley", "version": "0.2.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://github.com/ziyasal/pyley/raw/master/pyley.png?raw=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43f8f182d547150484b8813e511cfad0a81f6642/68747470733a2f2f6769746875622e636f6d2f7a69796173616c2f70796c65792f7261772f6d61737465722f70796c65792e706e673f7261773d74727565\">\n<div id=\"pyley\">\n<h2>pyley</h2>\n<a href=\"https://pypi.org/project/pyley\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pyley.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d15dd7bde349e668ea7ec768c675a451b368ec49/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70796c65792e737667\"></a>\n<a href=\"https://pypi.org/project/pyley\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/pyley.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53afbd3612552d6c57632a3c3975637941b6b7a2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70796c65792e737667\"></a>\n<a href=\"https://travis-ci.org/ziyasal/pyley\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ziyasal/pyley.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/56e64939e0220aba5414bf8e23ba8594631e8d84/68747470733a2f2f7472617669732d63692e6f72672f7a69796173616c2f70796c65792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/ziyasal/pyley?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/ziyasal/pyley/badge.svg?branch=master&amp;service=github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d21f0c18278a11a306fed49831c08c5935b348b0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7a69796173616c2f70796c65792f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a>\n<p><a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> client for an open-source graph database <strong>Cayley</strong> <a href=\"https://github.com/google/cayley\" rel=\"nofollow\">https://github.com/google/cayley</a>.</p>\n<blockquote>\nCayley is an open-source graph inspired by the graph database behind <a href=\"http://freebase.com/\" rel=\"nofollow\">Freebase</a> and Google\u2019s <a href=\"http://www.google.com/insidesearch/features/search/knowledge.html\" rel=\"nofollow\">Knowledge Graph</a>. Its goal is to be a part of the developer\u2019s toolbox where <a href=\"http://linkeddata.org/\" rel=\"nofollow\">Linked Data</a> and graph-shaped data (semantic webs, social networks, etc) in general are concerned.</blockquote>\n<div id=\"install-via-pip\">\n<h3>Install via pip</h3>\n<p>You can install pyley using:</p>\n<pre>$ pip install pyley\n</pre>\n</div>\n<div id=\"sample\">\n<h3>Sample</h3>\n<p><strong>Import pyley:</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyley</span> <span class=\"kn\">import</span> <span class=\"n\">CayleyClient</span><span class=\"p\">,</span> <span class=\"n\">GraphObject</span>\n\n<span class=\"c1\"># Create cayley client</span>\n<span class=\"c1\"># this creates client with default parameters `http://localhost:64210/api/v1/query/gizmo`</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">CayleyClient</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># or  specify `url` and `version` parameters</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">CayleyClient</span><span class=\"p\">(</span><span class=\"s2\">\"http://localhost:64210\"</span><span class=\"p\">,</span> <span class=\"s2\">\"v1\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">GraphObject</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Query all vertices in the graph, limit to the first 5 vertices found.</span>\n<span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">Vertex</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">GetLimit</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Start with only one vertex, the literal name \"Humphrey Bogart\", and retrieve all of them.</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">Vertex</span><span class=\"p\">(</span><span class=\"s2\">\"Humphrey Bogart\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">();</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Send</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"c1\"># response.result contains JSON data and response.r contains raw response</span>\n<span class=\"nb\">print</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">result</span>\n\n<span class=\"c1\"># `g` and `V` are synonyms for `graph` and `Vertex` respectively, as they are quite common.</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"s2\">\"Humphrey Bogart\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Send</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># \"Humphrey Bogart\" is a name, but not an entity.</span>\n<span class=\"c1\"># Let's find the entities with this name in our dataset.</span>\n<span class=\"c1\"># Follow links that are pointing In to our \"Humphrey Bogart\" node with the predicate \"name\".</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"s2\">\"Humphrey Bogart\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">In</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;name&gt;\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Send</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Notice that \"name\" is a generic predicate in our dataset.</span>\n<span class=\"c1\"># Starting with a movie gives a similar effect.</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"s2\">\"Casablanca\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">In</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Send</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Relatedly, we can ask the reverse; all ids with the name \"Casablanca\"</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">V</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Has</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Casablanca\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Send</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Let's get the list of actors in the film</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">V</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Has</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Casablanca\"</span><span class=\"p\">)</span> \\\n              <span class=\"o\">.</span><span class=\"n\">Out</span><span class=\"p\">(</span><span class=\"s2\">\"/film/film/starring\"</span><span class=\"p\">)</span> \\\n              <span class=\"o\">.</span><span class=\"n\">Out</span><span class=\"p\">(</span><span class=\"s2\">\"/film/performance/actor\"</span><span class=\"p\">)</span> \\\n              <span class=\"o\">.</span><span class=\"n\">Out</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span> \\\n              <span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">()</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Send</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># But this is starting to get long.</span>\n<span class=\"c1\"># Let's use a morphism -- a pre-defined path stored in a variable -- as our linkage</span>\n<span class=\"n\">film_to_actor</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">Morphism</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">Out</span><span class=\"p\">(</span><span class=\"s2\">\"/film/film/starring\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Out</span><span class=\"p\">(</span><span class=\"s2\">\"/film/performance/actor\"</span><span class=\"p\">)</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">V</span><span class=\"p\">()</span> \\\n        <span class=\"o\">.</span><span class=\"n\">Has</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Casablanca\"</span><span class=\"p\">)</span> \\\n        <span class=\"o\">.</span><span class=\"n\">Follow</span><span class=\"p\">(</span><span class=\"n\">film_to_actor</span><span class=\"p\">)</span> \\\n        <span class=\"o\">.</span><span class=\"n\">Out</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span> \\\n        <span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Send</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add data programatically to the JSON result list. Can be any JSON type.</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">Emit</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s2\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"s1\">'isActor'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Send</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"bugs\">\n<h3>Bugs</h3>\n<p>If you encounter a bug, performance issue, or malfunction, please add an <a href=\"https://github.com/ziyasal/pyley/issues\" rel=\"nofollow\">Issues</a> with steps on how to reproduce the problem\nor feel to free to open a pull request.</p>\n</div>\n<div id=\"todo\">\n<h3>TODO</h3>\n<ul>\n<li>Improve Gizmo implementation (Basic steps implemented at the moment)</li>\n<li>Add more tests</li>\n<li>Add more documentation</li>\n</ul>\n</div>\n<div id=\"open-source-projects-in-use\">\n<h3>Open Source  Projects in Use</h3>\n<ul>\n<li><a href=\"https://github.com/kennethreitz/requests\" rel=\"nofollow\">requests</a> by @kennethreitz</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>@zi\u03bbasal &amp; @abdullahselek</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6034993, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "9a81f98379ed8aa50e364907a3395810", "sha256": "2795d6b3e4cba0ccab9c4bf2886d19e82106742aaf776cbda9f1cd8ac8b04b0c"}, "downloads": -1, "filename": "pyley-0.1.2.zip", "has_sig": false, "md5_digest": "9a81f98379ed8aa50e364907a3395810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5284, "upload_time": "2015-03-02T18:38:18", "upload_time_iso_8601": "2015-03-02T18:38:18.601276Z", "url": "https://files.pythonhosted.org/packages/d8/80/a0edfce43ffa7ac82a833a5030e16e59ffe7a571adfa24373d73b03ebab3/pyley-0.1.2.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ba33d8928cc5b4cb2928924fc859f54f", "sha256": "05e04b4ff301eadff66fc344daea09b066cc8331f98eacab65144e00643e8dc8"}, "downloads": -1, "filename": "pyley-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ba33d8928cc5b4cb2928924fc859f54f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3726, "upload_time": "2017-06-11T20:44:42", "upload_time_iso_8601": "2017-06-11T20:44:42.721302Z", "url": "https://files.pythonhosted.org/packages/b9/8e/7eca099c913cbb3ff92aadd45666cba0e6d926f266604cade9831fa2f9fb/pyley-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "1c9758dc357d42735bdc586ec89f6abd", "sha256": "543bc0865ecb52076868f035dce38a760a61c5877119bdd5cdbc3b34683c34f2"}, "downloads": -1, "filename": "pyley-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1c9758dc357d42735bdc586ec89f6abd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 3849, "upload_time": "2018-03-31T10:54:44", "upload_time_iso_8601": "2018-03-31T10:54:44.621673Z", "url": "https://files.pythonhosted.org/packages/cc/27/5b4109d26a630ed678f3ecbaa0500e94971e46432e47b0e8fb2d1f4bb5c8/pyley-0.2.2-py2.py3-none-any.whl", "yanked": false}], "0.2.2.1": [{"comment_text": "", "digests": {"md5": "b0f137d69a1f8dd36db36fae699d0855", "sha256": "c373b9aaa7905766ad8adc0ce9bad6985ebf2254656de090bc2a09e3f0c42b5f"}, "downloads": -1, "filename": "pyley-0.2.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0f137d69a1f8dd36db36fae699d0855", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6827, "upload_time": "2018-05-28T07:58:54", "upload_time_iso_8601": "2018-05-28T07:58:54.570970Z", "url": "https://files.pythonhosted.org/packages/19/00/f141454805caa251e3767dbd736b18c5747303a6bf408d379802bd8f3faf/pyley-0.2.2.1-py2.py3-none-any.whl", "yanked": false}], "0.2.2.2": [{"comment_text": "", "digests": {"md5": "d78a7c6e3439b00652c789bfb3ca13b3", "sha256": "b293351d753a3c88586baebaed5dfeb48978d4115e520e0a4839312f7506cc6c"}, "downloads": -1, "filename": "pyley-0.2.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d78a7c6e3439b00652c789bfb3ca13b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7020, "upload_time": "2019-10-26T20:33:32", "upload_time_iso_8601": "2019-10-26T20:33:32.221018Z", "url": "https://files.pythonhosted.org/packages/54/84/1313d25fdfef77a1ef73c31ba7d095a1cf91bb94ef494e294d829e8d4349/pyley-0.2.2.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d78a7c6e3439b00652c789bfb3ca13b3", "sha256": "b293351d753a3c88586baebaed5dfeb48978d4115e520e0a4839312f7506cc6c"}, "downloads": -1, "filename": "pyley-0.2.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d78a7c6e3439b00652c789bfb3ca13b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7020, "upload_time": "2019-10-26T20:33:32", "upload_time_iso_8601": "2019-10-26T20:33:32.221018Z", "url": "https://files.pythonhosted.org/packages/54/84/1313d25fdfef77a1ef73c31ba7d095a1cf91bb94ef494e294d829e8d4349/pyley-0.2.2.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:03:12 2020"}