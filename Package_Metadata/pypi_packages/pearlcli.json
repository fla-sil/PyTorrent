{"info": {"author": "Filippo Squillace", "author_email": "feel.sqoox@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools", "Topic :: System :: Shells", "Topic :: System :: Software Distribution", "Topic :: Utilities"], "description": "Pearl\n=====\n\nBecause only in the best Shells you will find a Pearl...\n\n<h1 align=\"center\">\n    <a href=\"https://github.com/pearl-core/pearl\"><img\n        alt=\"Pearl\"\n        width=300px\n        src=\"https://rawgit.com/pearl-core/logo/master/pearl.png\"></a>\n</h1>\n\n|Project Status|Communication|\n|:-----------:|:-----------:|\n|[![Build status](https://api.travis-ci.org/pearl-core/pearl.png?branch=master)](https://travis-ci.org/pearl-core/pearl) | [![Join the gitter chat at https://gitter.im/pearl-core/pearl](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pearl-core/pearl?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) |\n\n**Table of Contents**\n- [Description](#description)\n- [Quickstart](#quickstart)\n- [Installation](#installation)\n  - [Dependencies](#dependencies)\n  - [Linux](#linux)\n  - [OSX](#osx)\n- [Create your own Pearl package](#create-your-own-pearl-package)\n- [Create your own Pearl repository](#create-your-own-pearl-repository)\n- [Troubleshooting](#troubleshooting)\n- [Contributing](#contributing)\n\nDescription\n===========\n**Pearl** is a lightweight package manager for automating reproducible environments\nbetween different systems (Linux and OSX).\nIt can be used for dotfiles, plugins, programs and any form of code\naccessible via git.\n\nAs soon as a package gets installed, its content can be activated out of the box\naccording to certain events, like, for instance, a shell startup (Bash, Zsh or Fish) or\nan editor startup (Vim or Emacs). This is possible via a smart and simple\n[hook mechanism](#create-your-own-pearl-package)\nthat integrates the package content within the Pearl ecosystem.\n\nThe main advantages on using Pearl are:\n\n- Create your own Pearl package in a very simple way.\n- Full control and sync of your dotfiles across different systems.\n- Automatic bootstrap of the package content whenever shells or editors get started.\n- Access to a wide range of existing packages via the [OPH (Official Pearl Hub)](https://github.com/pearl-hub).\n- Allows to create your own shareable package repository.\n- Stable codebase with 100+ unit tests and exhaustive integration tests via [Travis](https://travis-ci.org/pearl-core/pearl) for Linux and OSX.\n- Small number of [dependencies](#dependencies) needed in order to ensure compatibility with most of the systems.\n\nComparison with similar solution: Ansible\n-----------------------------------------\nYou could achieve something similar from what Pearl provide by using\n[Ansible](https://www.ansible.com/). Ansible is a powerful software for IT\nautomation which can be widely used for many use cases.\nDespite of this, Ansible has few drawbacks when using it for lightweight forms of automation:\n\n- Pearl uses bash for writing simple scripts for automation:\n  - it makes easier the integration with other programs in the system (without existing Playbooks may be hard and tedious to achieve this in Ansible);\n  - bash is a powerful, accessible and well-known language;\n- Ansible requires way more dependencies than Pearl;\n- Ansible requires knowledge about how Ansible Playbooks works;\n- Pearl uses built-in [functions](https://github.com/fsquillace/buava/blob/master/README.md#table-of-buava-functions) and [variables](#structure-of-a-pearl-package) which heavily simplify construction of scripts for automation;\n- Pearl makes easier to remove packages and restore the system to an initial state;\n\nQuickstart\n==========\nThe Pearl command allows to: `create`, `list`, `search`, `install`, `update`, `emerge`,\n`remove` the Pearl packages defined according to the configuration located in\n`$XDG_CONFIG_HOME/pearl/pearl.conf` (defaults to `~/.config/pearl/pearl.conf`)\n\n![quickstart](https://raw.githubusercontent.com/pearl-core/resources/master/pearl-opt3.gif)\n\nCreate\n------\n- Command `create` helps you create a new local Pearl package:\n\n```sh\n$ pearl create mydotfiles ~/dotfiles\n```\nThis will create a directory `pearl-config` in `~/dotfiles` containing all the templates to help you\nstart writing a Pearl package. `~/dotfiles` does not need to be an empty directory.\nAdditionally, the local repository in `$XDG_CONFIG_HOME/pearl/pearl.conf` will be updated with\nthe new package entry called `mydotfiles`.\n\nFor more information about the `pearl-config` content look at the [section](#create-your-own-pearl-package) below.\n\nList\n----\n- List all the available packages:\n\n```sh\n$ pearl list\n...\npearl/dot-git\n    Awesome git dotfiles (https://github.com/pearl-hub/git)\npearl/sesaila [installed]\n    Awesome aliases for Bash, Zsh and Fish shells (https://github.com/pearl-hub/sesaila)\npearl/airline [installed]\n    Status/tabline for vim (https://github.com/vim-airline/vim-airline)\npearl/trash-cli [installed]\n    Command line interface to the freedesktop.org trashcan (https://github.com/pearl-hub/trash-cli)\n...\n```\n\nSearch\n------\n- Search for `vim` Pearl packages:\n\n```sh\n$ pearl search vim\n* Updating https://github.com/pearl-hub/repo.git repository\npearl/dot-vim\n    Awesome vim dotfiles (https://github.com/pearl-hub/vim)\n```\n\nInstall\n-------\n- Install `pearl/dot-vim` package (as soon as the package is installed the package is ready out of the box in vim editor!):\n\n```sh\n$ pearl install dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Installing pearl/dot-vim package\n```\n\n- Install `pearl/trash-cli` package:\n\n```sh\n$ pearl install trash-cli\n* Updating https://github.com/pearl-hub/repo.git repository\n* Installing pearl/trash-cli package\n$ trash -h\nUsage: trash [OPTION]... FILE...\n\nPut files in trash\n...\n...\n```\n\nUpdate\n-------\n- Update `pearl/dot-vim` package:\n\n```sh\n$ pearl update dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Updating pearl/dot-vim package\n```\n\n- Update Pearl and all its packages installed:\n\n```sh\n$ pearl update\n...\n* Updating https://github.com/pearl-hub/repo.git repository\n* Updating Pearl script\n* Updating pearl/dot-vim package\n* Updating pearl/airline package\n* Updating pearl/trash-cli package\n* Updating pearl/caprica package\n...\n```\n\nEmerge\n------\nEmerge is an idempotent command for either installing or updating a package\ndepending whether the package is already installed or not. This command turns\nto be particularly useful for establishing dependencies between packages.\nSee the section [below](#define-dependencies-between-pearl-packages)\nfor more details.\n\nRemove\n-------\n- Remove `pearl/dot-vim` package:\n\n```sh\n$ pearl remove dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Removing pearl/dot-vim package\n```\n\n- Remove Pearl and all its packages installed:\n\n```sh\n$ pearl remove\n...\nAre you sure to REMOVE all the Pearl packages in $PEARL_HOME folder? (N/y)\n* Updating https://github.com/pearl-hub/repo.git repository\n* Removing pearl/dot-vim package\n* Removing pearl/airline package\n* Removing pearl/trash-cli package\n* Removing pearl/caprica package\n...\n```\n\nRecommended Pearl Hub packages to install:\n-------------------------------\n\n- [cmd](https://github.com/pearl-hub/cmd)\n- [kyrat](https://github.com/pearl-hub/kyrat)\n- [ranger](https://github.com/pearl-hub/ranger)\n- [sesaila](https://github.com/pearl-hub/sesaila)\n- [trash-cli](https://github.com/pearl-hub/trash-cli)\n- [txum](https://github.com/pearl-hub/txum)\n\nFor dotfiles packages take a look [here](https://github.com/pearl-hub?q=dot).\n\nCheck out the [OPH (Official Pearl Hub)](https://github.com/pearl-hub)\nfor more packages you might be interested.\n\nInstallation\n============\n\nDependencies\n------------\nBefore installing Pearl be sure that all dependencies are properly installed in your system.\nThe Pearl dependencies are the following:\n\n### Mandatory\n- [python (>=3.5)](https://www.python.org/)\n- [bash (>=4.1)](https://www.gnu.org/software/bash/)\n- [git (>=1.8)](https://git-scm.com/)\n\n### Optional\nThe following are not mandatory dependencies but can be handy to have for the hook functions in Pearl package.\nAll the Linux distributions have these dependencies already installed.\n\n- [GNU coreutils](https://www.gnu.org/software/coreutils/)\n- [grep](https://www.gnu.org/software/grep/) \n- [sed](https://www.gnu.org/software/sed/) \n\n### Additional shells supported\nPearl supports also the following shells:\n\n- [fish (>=2.2.0)](https://fishshell.com/)\n- [zsh (>=5.2)](http://www.zsh.org/)\n\n\nLinux\n-----\n\n### Arch Linux\n\nPearl can be installed in Arch Linux through AUR.\nThe package is [pearl-git](https://aur.archlinux.org/packages/pearl-git/).\n\nFor example, to install Pearl via [yay](https://github.com/Jguer/yay) AUR helper:\n```\nyay -S pearl-git\n```\n\nAny other AUR helpers can be found [here](https://wiki.archlinux.org/index.php/AUR_helpers).\n\n### Other Linux distributions\n\nAssuming all Pearl [dependencies](#dependencies) are properly installed\nin the system, to install Pearl you can use the `pip` command.\nUnless there is a specific use case, it is not a good option to use virtual environments such as\n`virtualenv` or `conda` because otherwise Pearl will be only visible within that environment.\nIt is recommended to use the system-wide `pip` which is generally locate in `/usr/bin/pip`.\nThe following will install the package in your `$HOME` directory (`~/.local/`):\n```\n/usr/bin/pip install --user pearlcli\nexport PATH=\"~/.local/bin:$PATH\"\n```\n\nPearl command will be located in `~/.local/bin/pearl`\n\nTo create the `$PEARL_HOME` directory and the new pearl configuration file from template, run: \n```\npearl init\n```\n\nOSX\n---\nIn order to install all Pearl dependencies, you first need to install [Homebrew](http://brew.sh/).\n\nTo install all the needed dependencies via Homebrew:\n```sh\nbrew update\nbrew install bash git coreutils grep gnu-sed python\n```\n\nThe following will install the package under `/usr/local`:\n```\n/usr/local/bin/pip3 install pearlcli\n# If the bin path is not already in $PATH:\nexport PATH=\"/usr/local/bin:$PATH\"\n```\n\nPearl command will be located in `/usr/local/bin/pearl`\n\nTo create the `$PEARL_HOME` directory and the new pearl configuration file from template, run: \n```\npearl init\n```\n\n**IMPORTANT NOTE**: Pearl gets loaded through `~/.bashrc`. The problem is that in OSX,\nthe terminal opens a login shell and only `~/.bash_profile` will get executed.\nRun the following only if `~/.bashrc` is not loaded within `~/.bash_profile` file:\n\n```sh\necho \"[[ -f ~/.bashrc ]] && source ~/.bashrc\" >> ~/.bash_profile\n```\n\nThis will make sure that `~/.bashrc` will run at shell startup.\n\nCreate your own Pearl package\n===============\n**Any git repository is already a Pearl package**. For instance, in order\nto manage a dotfiles repository in Pearl, you just need to change\nthe Pearl configuration file located in `$XDG_CONFIG_HOME/pearl/pearl.conf`.\n\nAdd the following line to `pearl.conf` file:\n\n    PEARL_PACKAGES = {\n        \"mydotfiles\": {\n            \"url\": \"https://github.com/user/mydotfiles.git\",\n            \"description\": \"My dotfiles\"\n        },\n    }\n\nIn other words, update the `PEARL_PACKAGES` dictionary with a new entry containing the\nname of the package (i.e. `mydotfiles`),\nthe git url (i.e. `https://github.com/user/mydotfiles.git`) and an optional description.\n\n***That's it!*** The package will be ready to be [installed](#install),\n[updated](#update), [emerged](#emerge) and [removed](#remove) via the Pearl system.\n\n## Structure of a Pearl package ##\nYour own git repository can contain an **optional** directory\nnamed `pearl-config` used by Pearl to integrate the package with the Pearl environment.\n\n    / (package root)\n    \u2502\n    \u251c\u2500\u2500 pearl-config (optional directory)\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 hooks.sh\n    \u2502   \u251c\u2500\u2500 config.sh\n    \u2502   \u251c\u2500\u2500 config.bash\n    \u2502   \u251c\u2500\u2500 config.zsh\n    \u2502   \u251c\u2500\u2500 config.fish\n    \u2502   \u251c\u2500\u2500 config.vim\n    \u2502   \u2514\u2500\u2500 config.el\n    \u2502\n    \u2514\u2500\u2500 (additional package content)\n\nThe files inside `pearl-config` are also **optional** scripts:\n\n- `hooks.sh` - contains the [hooks functions](#hook-functions) executed during the `install`, `update` and `remove` events.\n- `config.sh` - will be sourced whenever a new Bash/Zsh shell is starting up.\n- `config.bash` - will be sourced whenever a new Bash shell is starting up.\n- `config.zsh` - will be sourced whenever a new Zsh shell is starting up.\n- `config.fish` - will be sourced whenever a new Fish shell is starting up.\n- `config.vim` - will be executed whenever Vim editor is starting up.\n- `config.el` - will be sourced whenever Emacs editor is starting up.\n\nThe following variables can be used in any of the previous scripts:\n\n- `PEARL_HOME`          - Pearl location (`$XDG_DATA_HOME/pearl` which by default is `$HOME/.local/share/pearl`)\n- `PEARL_PKGDIR`        - Pearl package location\n- `PEARL_PKGVARDIR`     - Pearl package location containing data needed for package\n- `PEARL_PKGNAME`       - Pearl package name\n- `PEARL_PKGREPONAME`   - Pearl package repo name (useful to detect and interact with packages within the same repo)\n\nAdditionally, the script `hooks.sh` can use the utility functions available in\n[Buava](https://github.com/fsquillace/buava) and Pearl [*utils*](lib/utils) directory that\nmake easier the integration with Pearl ecosystem.\n\nUseful examples of Pearl packages can be checked in the\n[Official Pearl Hub](https://github.com/pearl-hub).\n\n### The hooks.sh script ###\n#### Hook functions ####\n- `post_install`  - Called *after* an installation of the package occurs.\n- `pre_update`    - Called *before* an update of the package occurs.\n- `post_update`   - Called *after* an update of the package occurs.\n- `pre_remove`    - Called *before* a removal of the package occurs.\n\n#### An hooks.sh script example ####\n\n    post_install() {\n        warn \"Remember to setup your config located in: ~/.dotfile\"\n        # Do a smart backup before modifying the file\n        backup ${HOME}/.dotfile\n        \"# New dotfile\" > ${HOME}/.dotfile\n        link tmux \"$PEARL_PKGDIR/mytmux.conf\"\n\n        info \"Awesome - new package installed!\"\n        return 0\n    }\n    post_update() {\n        post_install\n        return 0\n    }\n    pre_remove() {\n        info \"dotfiles package removed\"\n        unlink tmux \"$PEARL_PKGDIR/mytmux.conf\"\n\n        # Do an idempotent delete\n        delete ${HOME}/.dotfile\n        return 0\n    }\n\nThe `info` and `warn` are functions that print a message\nusing different colors (namely cyan and yellow).\n\nThe `link` `unlink` are idempotent functions (the result will not change\nif the function will be called multiple times) that are able\nto link/unlink a config file in order to be loaded at startup by a certain program.\n\nThe `backup` keeps the last three backups of the file and do not perform backup\nif the file has not been modified since the latest backup. The `delete` is a\nfunction for idempotent remove (it will not raise an error if the file\nno longer exist).\n\nAll these functions belong to the [Buava](https://github.com/fsquillace/buava) package\nin [`utils.sh`](https://github.com/fsquillace/buava/blob/master/lib/utils.sh)\nand to the Pearl [`utils.sh`](lib/utils/utils.sh) script. You can use them\ninside the `hooks.sh` to any hook function.\n\n**Very important note**: All the hook functions **must** be\n[**idempotent**](https://en.wikipedia.org/wiki/Idempotence)\n(the commands of each hook function must produce the same result even if\nthe command gets executed multiple times).\nAll buava commands are idempotent and this will help to write hook functions\nvery quickly.\n\n**Note**: For OSX system, the GNU version `sed` and `grep` are automatically\nimported in `hooks.sh` and can be directly used if needed.\n\n## Create a Pearl package from a local directory ##\nPearl package system will work even for local directories. This is particularly useful\nwhenever a Pearl package needs to be tested before pushing to a git repository.\n\nFor instance, the following lines in `pearl.conf` file will add a package located in\n`/home/joe/dotfiles`:\n\n    PEARL_PACKAGES = {\n        \"mydotfiles\": {\n            \"url\": \"/home/user/mydotfiles\",\n            \"description\": \"My dotfiles\"\n        },\n    }\n\nThe directory path must be an absolute path.\n\nThe package will be ready to be [installed](#install), [updated](#update),\n[emerged](#emerge) and [removed](#remove) via the Pearl system.\n\nThe directory content can be structured in the exact way as described\nin the [section](#structure-of-a-pearl-package) above.\n\n## Define dependencies between Pearl packages ##\nSuppose you have a package `mypack` which depends on another package `mydep`,\nyou can update the `mypack` `hooks.sh` file in this way:\n\n    post_install() {\n        # Install/update the dependency here:\n        pearl emerge ${PEARL_PKGREPONAME}/mydep\n    }\n    post_update() {\n        post_install\n    }\n    pre_remove() {\n        # Uncomment below to strictly remove the dependency\n        # during the removal of the current package:\n        #pearl remove ${PEARL_PKGREPONAME}/mydep\n    }\n\nThe `PEARL_PKGREPONAME` variable will make sure to define dependencies only\nbetween packages of the same repository.\nTo see a real example in Pearl Hub, take a look at the [Kyrat hooks.sh](https://github.com/pearl-hub/kyrat/blob/master/pearl-config/hooks.sh).\n\n## Use third-party git repository not available in Pearl Hub ##\nIf you want to use a third-party git repository\nthat is not available in the [Official Pearl Hub](https://github.com/pearl-hub),\nyou can:\n\n* Create your own git repository and use the `PEARL_PKGVARDIR` directory (recommended)\n* Create your own git repository and use [git submodule](https://git-scm.com/docs/git-submodule)\n* Point directly to the third-party git repository\n\nTo see examples of Pearl packages from third-party git repos take a look at the\n[Official Pearl Hub](https://github.com/pearl-hub).\n\n### Create your own git repository and use the `PEARL_PKGVARDIR` directory (recommended) ###\nYou can use the `PEARL_PKGVARDIR` directory during the installation phase to install the third-party git repository.\nThis is the best way to incorporate third-party project into Pearl ecosystem.\n\nHere it is an example of `hooks.sh` file which install the ranger file manager into the directory `${PEARL_PKGVARDIR}/ranger`:\n\n    function post_install(){\n        install_or_update_git_repo https://github.com/ranger/ranger.git \"${PEARL_PKGVARDIR}/ranger\" master\n    }\n\n    function post_update(){\n        post_install\n    }\n\n    function pre_remove(){\n        rm -rf ${PEARL_PKGVARDIR}/ranger\n    }\n\nThe function `install_or_update_git_repo` comes from the [Buava](https://github.com/fsquillace/buava)\nlibrary in [`utils.sh`](https://github.com/fsquillace/buava/blob/master/lib/utils.sh)\nwhich is natively available in Pearl during the installation.\nYou can even use the functions `install_git_repo` or `update_git_repo` which respectively install or update the git repository.\n\nFor a full example take a look at the [ranger](https://github.com/pearl-hub/ranger) Pearl Hub package.\n\n### Create your own git repository and use git submodule ###\nInside your git repository, you just need to add the third-party git repo as a\n[git submodule](https://git-scm.com/docs/git-submodule).\nFor instance, to add the [powerline](https://github.com/powerline/powerline) in your Pearl package,\nyou can introduce a submodule in the `module` directory:\n\n    git submodule add https://github.com/powerline/powerline.git module\n\nThe filesystem structure of the package will become something like this:\n\n    / (package root)\n    \u2502\n    \u251c\u2500\u2500 pearl-config   (optional directory)\n    \u251c\u2500\u2500 module/        (contains third-party code)\n    \u2514\u2500\u2500 (additional package content)\n\nThen, you just need to modify the config scripts in order to integrate the third-party\nproject inside Pearl environment.\n\n### Point directly to the third-party git repository ###\nLet's suppose you want to install the [vim-rails](https://github.com/tpope/vim-rails) plugin.\nIn your Pearl configuration (`$XDG_CONFIG_HOME/pearl/pearl.conf`), add your new Pearl package:\n\n    PEARL_PACKAGES = {\n        \"vim-rails\": {\n            \"url\": \"https://github.com/tpope/vim-rails.git\",\n            \"description\": \"Ruby on Rails power tools\"\n        },\n    }\n\nInstall the package:\n\n    pearl install vim-rails\n\nVoila', your new vim plugin is ready to be used!\n\nThis approach is particularly useful whenever you do not need to specify\nany pearl config to *\"enrich\"* the third-party project inside\nthe Pearl environment.\n\n\nCreate your own Pearl repository\n===============\nA Pearl repository is just a git repository containing a file located in `pearl-config/pearl.conf`\nwith a list of packages. For instance, the *OPH* repository is available\n[here](https://github.com/pearl-hub/repo-v2).\n\nIn order to use the new repository (i.e. \"https://github.com/myrepo/pearl-repo.git\"),\nupdate the `pearl.conf` file by adding the following line:\n\n    PEARL_REPOS += (\"https://github.com/myrepo/pearl-repo.git\")\n\nTroubleshooting\n===============\n\n## Corrupted Pearl Home directory ##\n\n> **Q**: What should I do if I accidentally removed files/packages in `$PEARL_HOME`?\n\n> **A**: You can recover the structure of the `$PEARL_HOME` by running:\n\n    $> pearl init\n\n> The command will create all the essential directories and symlinks in `$PEARL_HOME`.\n> It is harmless to run the `init` command multiple times since it is idempotent.\n\n## Corrupted package ##\n\n> **Q**: Why I can no longer update/remove a package?\n\n> **A**: This is probably because either one of the hook functions\n> is failing or the package content is corrupted. You can forcely remove the package:\n\n    $> pearl remove <packagename>\n\n> which bypass hook functions that are failing. If that does not even work,\n> you can delete a package by simply removing its directory:\n\n    $> rm -rf $PEARL_HOME/packages/pearl/<packagename>\n\n> After that, you can reinstall the package again.\n> The Pearl packages contain a dedicated directory `var` for storing\n> data needed for the package itself.\n> The `var` data are always managed by the package and they never gets deleted by Pearl\n> during the package removal.\n> If you want to delete the content in `var` package:\n\n    $> rm -rf $PEARL_HOME/var/pearl/<packagename>\n\n## Package shell variables/functions not visible in current shell after installation ##\n\n> **Q**: Why are not package's environment variables/functions visible in\n> my current shell after installing/updating the package?\n\n> **A**: After package install/update, the variables or\n> functions related to the current shell and defined in `pearl-config/config.*`\n> may not be available because a reload of Pearl configuration file is required.\n> You can fix this by simply run the function:\n\n    pearl-source\n\n> which reloads the configuration.\n> The use of such function is not always required but depends\n> whether the variables/functions involve the current shell where the\n> package `install`/`update` occurred (i.e. a new variable defined in `config.sh`\n> and the current shell is a bash or zsh). Alternatively, user can always\n> create a new shell and the package resources will be available as\n> expected.\n\n## Error during package install\n\n> Q: Why Do I get the following error:\n\n    Error on executing 'post_install' hook. Rolling back...\n\n> A: This occurs when the `post_install` hook function fails.\n> Pearl will attempt to roll back and force a removal of the package. In this way\n> you can attempt to install the package again once the hook function gets\n> fixed.\n\nContributing\n============\n\nYou could help improving Pearl and the [OPH](https://github.com/pearl-hub) in the following ways:\n\n- [Reporting Bugs](CONTRIBUTING.md#reporting-bugs)\n- [Suggesting Enhancements](CONTRIBUTING.md#suggesting-enhancements)\n- [Writing Code](CONTRIBUTING.md#your-first-code-contribution)\n\n\n# Change Log #\n\n## [2.1.1][v211] - 2020-01-13 ##\n\n* Replace `install.sh` with `hooks.sh`\n  * `install.sh` will still be valid until next releases\n* Fail if no command is specified\n\n## [2.1.0][v210] - 2020-01-12 ##\n\n* Add `create` command\n* Fix procedure to install Pearl in OSX\n* Fix ci to upload to PyPI\n\n## [2.0.2][v202] - 2020-01-11 ##\n\n* Add instructions to install Pearl in Arch Linux\n* Fix bug for version option\n\n## [2.0.1][v201] - 2020-01-11 ##\n\n* Manual intervention to switch to Pearl v2\n  * [Migration page](https://github.com/pearl-core/pearl/wiki/Migration-to-Pearl-version-2)\n* Codebase re-written in Python\n* Remove the `post_remove`\n* `pearl.conf` is not a python script. This requires manual intervention. Take a look at the `pearl.conf.template` file in codebase\n* `pearl-metadata` directory is finally deprecated\n* Add `--no-confirm` option\n* Add `--force` option\n  * This option bypasses failures even during the hook function execution\n* Add `--verbose` option\n  * `-vv` allows to enable xtrace in hook functions\n* Add `--update-repos` option\n* Shortcut commands (i.e. `i` to specify `install` command) are no longer available\n* Pearl file locations change drastically in order to be complaint with the\n[XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)\n  * As of now, `pearl.conf` resides in `$XDG_CONFIG_HOME/pearl` (default `~/.config/pearl`)\n  * The new location for `$PEARL_HOME` is `$XDG_DATA_HOME/pearl` (default `~/.local/share/pearl`)\n* Remove the variables `$PEARL_ROOT` and `$PEARL_TEMPORARY`\n\n## [1.8.2][v182] - 2019-10-13 ##\n\n* Update `README.md` file\n\n## [1.8.1][v181] - 2019-07-13 ##\n\n* Update `buava`:\n  * New view action for `setup_configuration` helper function\n\n## [1.8.0][v180] - 2019-06-03 ##\n\n* Add roll back mechanism during install package\n* Add `grep` and `sed` as optional dependencies since they may be used in hook functions\n* Add newer `buava`:\n  * `backup` function\n  * `delete` function\n  * `ideavim` and `gvim` dotfiles for (`un`)`link` functions\n  * `install_or_update_vim_plugin_git_repo` function\n  *  Add GNU `sed` and `grep` for OSX compat functions\n\n## [1.7.2][v172] - 2019-01-15 ##\n\n* Fix variables `PEARL_PKGNAME` `PEARL_PKGREPONAME` for vim and emacs boot\n\n## [1.7.1][v171] - 2018-08-11 ##\n\n* Deprecate pathogen\n* Ensure to `cd` when updating package pointing to local directory\n* Fix when package specified with full name does not exist\n* More log info when Git URL package change\n* Proceed even if `install.sh` is syntatically incorrect (prevent block for fixing the broken package)\n* Improve doc and add section about comparison with Ansible\n\n## [1.7.0][v170] - 2018-07-05 ##\n\n* Add the idempotent `emerge` command which update/install packages.\n* No longer support the use of USR1 signal to source the Pearl config to the parent process. To explictly do that run `pearl-source` command instead.\n\n## [1.6.3][v163] - 2018-06-22 ##\n\n* Location of the repo file is `pearl-config/pearl.conf`. Backward compatibility will be kept until 2.0.0\n* Make the branch name inferred from repo's HEAD rather than hardcode the branch with `master`\n\n## [1.6.2][v162] - 2018-06-09 ##\n\n* Add variables `PEARL_PKGNAME` `PEARL_PKGREPONAME`\n* Fix boot vim for deprecating `pearl-metadata`\n* Update doc to use dynamic updates for third-party git repos\n* Add the buava git repo helpers\n\n## [1.6.1][v161] - 2018-02-04 ##\n\n* Fix import `osx-compat.sh`\n* Fix update Pearl submodules during updates\n\n## [1.6.0][v160] - 2018-02-03 ##\n\n* Change directory name to `pearl-config`. Pearl version `2.0.0` will deprecate `pearl-metadata`\n* `link_to_path` to customize symlink name\n* Changes in `buava` for Pearl configs:\n  * `osx_detect` function to detect the OS platform\n  * Improved `choose` function with indexes\n  * Add `ssh` for `[un]link` function\n\n## [1.5.6][v156] - 2017-08-31 ##\n\n* Fix Integ tests\n\n## [1.5.5][v155] - 2017-08-31 ##\n\n* Update Buava:\n  * Update `download` function\n  * Add `choose`, `input` and `contain_elements` functions\n\n## [1.5.4][v154] - 2017-08-28 ##\n\n* Update Buava:\n  * Add `download` function\n  * vimperator gtk2 programs for `[un]link` functions\n\n## [1.5.3][v153] - 2017-06-29 ##\n\n* Add [Pear test utils](https://github.com/pearl-core/test-utils) as new dependency\n* Add [Bunit](https://github.com/fsquillace/bunit) as new dependency\n* Add [Buava](https://github.com/fsquillace/buava) as new dependency\n* Inform about the trap on USR1 signal\n\n## [1.5.2][v152] - 2017-01-07 ##\n\n* Add support for new OSX image in Travis\n* Fallback to a default temp directory if `tty` does not work\n\n## [1.5.1][v151] - 2016-11-15 ##\n\n* Fix git --no-parser log for missing newline\n\n## [1.5.0][v150] - 2016-11-13 ##\n\n* Provide (un)link from/to in utils.sh\n* Provide list of last commits during add/update package\n* Fix `unlink_from_path` when source file is a symlink\n\n## [1.4.5][v145] - 2016-11-11 ##\n\n* Provide (un)link from/to PATH variable in utils.sh\n\n## [1.4.4][v144] - 2016-09-26 ##\n\n* Improving doc and add checkstyle\n\n## [1.4.3][v143] - 2016-05-25 ##\n\n* Remove the requirement of updating the PATH on OSX\n\n## [1.4.2][v142] - 2016-05-10 ##\n\n* Add support for OSX\n* Add check for existing `PEARL_HOME` variable for emacs/vim boot scripts\n* Add `PEARL_HOME/bin` directory to have symlinks for the Pearl packages executables\n* Avoid polluting `PATH` variable by introducing a check first\n\n## [1.4.1][v141] - 2016-04-30 ##\n\n* Introduce `$PEARL_PKGVARDIR` on boot scripts\n* Packages do not need to have `master` as default branch\n* Change the installation process to avoid [pipe bash problem](https://www.idontplaydarts.com/2016/04/detecting-curl-pipe-bash-server-side/)\n* Ensure to get the most updated `post_update` function\n* Refactor unit tests in `test-package.sh`\n\n## [1.4.0][v140] - 2016-04-23 ##\n\n* Add a dedicated directory `$PEARL_PKGVARDIR` for the Pearl packages in order to store data\n  needed during the execution of the package itself\n* Add warning in case of an old version of git or bash\n* Introduce `$PEARL_PKGDIR` environment variable for emacs and vim config files\n* Change the definition of public API\n\n## [1.3.1][v131] - 2016-04-21 ##\n\n* Fix compatibility with Bash 4.1\n* Integration tests with fixed Bash and Git versions\n\n## [1.3.0][v130] - 2016-04-20 ##\n\n* Provide the definition of public API\n* Add the emacs hook\n* Use a better approach to return values from bash functions\n* Change location of the boot files for pearl.fish and pearl.sh\n* Introduce the standard documentation for functions\n* Use try/catch approach to handle errors\n\n## [1.2.0][v120] - 2016-04-14 ##\n\n* Fix the removal of packages by querying the local directory\n* Add (un)link functions for utils.sh\n\n## [1.1.0][v110] - 2016-04-09 ##\n\n* Check if Git URL changed during updates\n* Introduce the template for new Pearl packages\n* Local directories can be used as Pearl packages\n* Add VERSION file\n\n## [1.0.1][v101] - 2016-04-08 ##\n\n* Update docs\n* Add travis and integration tests\n* Introduce the installer\n\n## [1.0.0][v100] - 2016-04-03 ##\n\n* Initial commit.\n\n<!--  Links -->\n\n[v100]: https://github.com/pearl-core/pearl/releases/tag/1.0.0\n[v101]: https://github.com/pearl-core/pearl/releases/tag/1.0.1\n[v110]: https://github.com/pearl-core/pearl/releases/tag/1.1.0\n[v120]: https://github.com/pearl-core/pearl/releases/tag/1.2.0\n[v130]: https://github.com/pearl-core/pearl/releases/tag/1.3.0\n[v131]: https://github.com/pearl-core/pearl/releases/tag/1.3.1\n[v140]: https://github.com/pearl-core/pearl/releases/tag/1.4.0\n[v141]: https://github.com/pearl-core/pearl/releases/tag/1.4.1\n[v142]: https://github.com/pearl-core/pearl/releases/tag/1.4.2\n[v143]: https://github.com/pearl-core/pearl/releases/tag/1.4.3\n[v144]: https://github.com/pearl-core/pearl/releases/tag/1.4.4\n[v145]: https://github.com/pearl-core/pearl/releases/tag/1.4.5\n[v150]: https://github.com/pearl-core/pearl/releases/tag/1.5.0\n[v151]: https://github.com/pearl-core/pearl/releases/tag/1.5.1\n[v152]: https://github.com/pearl-core/pearl/releases/tag/1.5.2\n[v153]: https://github.com/pearl-core/pearl/releases/tag/1.5.3\n[v154]: https://github.com/pearl-core/pearl/releases/tag/1.5.4\n[v155]: https://github.com/pearl-core/pearl/releases/tag/1.5.5\n[v156]: https://github.com/pearl-core/pearl/releases/tag/1.5.6\n[v160]: https://github.com/pearl-core/pearl/releases/tag/1.6.0\n[v161]: https://github.com/pearl-core/pearl/releases/tag/1.6.1\n[v162]: https://github.com/pearl-core/pearl/releases/tag/1.6.2\n[v163]: https://github.com/pearl-core/pearl/releases/tag/1.6.3\n[v170]: https://github.com/pearl-core/pearl/releases/tag/1.7.0\n[v171]: https://github.com/pearl-core/pearl/releases/tag/1.7.1\n[v172]: https://github.com/pearl-core/pearl/releases/tag/1.7.2\n[v180]: https://github.com/pearl-core/pearl/releases/tag/1.8.0\n[v181]: https://github.com/pearl-core/pearl/releases/tag/1.8.1\n[v182]: https://github.com/pearl-core/pearl/releases/tag/1.8.2\n[v201]: https://github.com/pearl-core/pearl/releases/tag/2.0.1\n[v202]: https://github.com/pearl-core/pearl/releases/tag/2.0.2\n[v210]: https://github.com/pearl-core/pearl/releases/tag/2.1.0\n[v211]: https://github.com/pearl-core/pearl/releases/tag/2.1.1\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/pearl-core/pearl/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/pearl-core/pearl", "keywords": "pearl,shell,dotfiles,package manager", "license": "GNU General Public License v3", "maintainer": "", "maintainer_email": "", "name": "pearlcli", "package_url": "https://pypi.org/project/pearlcli/", "platform": "", "project_url": "https://pypi.org/project/pearlcli/", "project_urls": {"Download": "https://github.com/pearl-core/pearl/releases", "Homepage": "http://github.com/pearl-core/pearl"}, "release_url": "https://pypi.org/project/pearlcli/2.1.1/", "requires_dist": ["coverage; extra == 'dev'", "flake8; extra == 'dev'", "pip; extra == 'dev'", "pytest; extra == 'dev'", "Sphinx; extra == 'dev'", "tox; extra == 'dev'", "twine; extra == 'dev'", "watchdog; extra == 'dev'"], "requires_python": ">=3.5", "summary": "Pearl is a lightweight package manager for automating reproducible environments between different systems (Linux and OSX).It can be used for dotfiles, plugins, programs and any form of code accessible via git.", "version": "2.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pearl</h1>\n<p>Because only in the best Shells you will find a Pearl...</p>\n<h1>\n    <a href=\"https://github.com/pearl-core/pearl\" rel=\"nofollow\"><img alt=\"Pearl\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/815796bf9a5fe9ce2de7ec9e2f72185aec9a6e00/68747470733a2f2f7261776769742e636f6d2f706561726c2d636f72652f6c6f676f2f6d61737465722f706561726c2e706e67\" width=\"300px\"></a>\n</h1>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Project Status</th>\n<th align=\"center\">Communication</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><a href=\"https://travis-ci.org/pearl-core/pearl\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/541caacbe21482705f8924dee4fccca355cfd572/68747470733a2f2f6170692e7472617669732d63692e6f72672f706561726c2d636f72652f706561726c2e706e673f6272616e63683d6d6173746572\"></a></td>\n<td align=\"center\"><a href=\"https://gitter.im/pearl-core/pearl?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\" rel=\"nofollow\"><img alt=\"Join the gitter chat at https://gitter.im/pearl-core/pearl\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/454be82554a06af0fd3393415ef17b59d8550498/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\"></a></td>\n</tr></tbody></table>\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#description\" rel=\"nofollow\">Description</a></li>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#dependencies\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#linux\" rel=\"nofollow\">Linux</a></li>\n<li><a href=\"#osx\" rel=\"nofollow\">OSX</a></li>\n</ul>\n</li>\n<li><a href=\"#create-your-own-pearl-package\" rel=\"nofollow\">Create your own Pearl package</a></li>\n<li><a href=\"#create-your-own-pearl-repository\" rel=\"nofollow\">Create your own Pearl repository</a></li>\n<li><a href=\"#troubleshooting\" rel=\"nofollow\">Troubleshooting</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n</ul>\n<h1>Description</h1>\n<p><strong>Pearl</strong> is a lightweight package manager for automating reproducible environments\nbetween different systems (Linux and OSX).\nIt can be used for dotfiles, plugins, programs and any form of code\naccessible via git.</p>\n<p>As soon as a package gets installed, its content can be activated out of the box\naccording to certain events, like, for instance, a shell startup (Bash, Zsh or Fish) or\nan editor startup (Vim or Emacs). This is possible via a smart and simple\n<a href=\"#create-your-own-pearl-package\" rel=\"nofollow\">hook mechanism</a>\nthat integrates the package content within the Pearl ecosystem.</p>\n<p>The main advantages on using Pearl are:</p>\n<ul>\n<li>Create your own Pearl package in a very simple way.</li>\n<li>Full control and sync of your dotfiles across different systems.</li>\n<li>Automatic bootstrap of the package content whenever shells or editors get started.</li>\n<li>Access to a wide range of existing packages via the <a href=\"https://github.com/pearl-hub\" rel=\"nofollow\">OPH (Official Pearl Hub)</a>.</li>\n<li>Allows to create your own shareable package repository.</li>\n<li>Stable codebase with 100+ unit tests and exhaustive integration tests via <a href=\"https://travis-ci.org/pearl-core/pearl\" rel=\"nofollow\">Travis</a> for Linux and OSX.</li>\n<li>Small number of <a href=\"#dependencies\" rel=\"nofollow\">dependencies</a> needed in order to ensure compatibility with most of the systems.</li>\n</ul>\n<h2>Comparison with similar solution: Ansible</h2>\n<p>You could achieve something similar from what Pearl provide by using\n<a href=\"https://www.ansible.com/\" rel=\"nofollow\">Ansible</a>. Ansible is a powerful software for IT\nautomation which can be widely used for many use cases.\nDespite of this, Ansible has few drawbacks when using it for lightweight forms of automation:</p>\n<ul>\n<li>Pearl uses bash for writing simple scripts for automation:\n<ul>\n<li>it makes easier the integration with other programs in the system (without existing Playbooks may be hard and tedious to achieve this in Ansible);</li>\n<li>bash is a powerful, accessible and well-known language;</li>\n</ul>\n</li>\n<li>Ansible requires way more dependencies than Pearl;</li>\n<li>Ansible requires knowledge about how Ansible Playbooks works;</li>\n<li>Pearl uses built-in <a href=\"https://github.com/fsquillace/buava/blob/master/README.md#table-of-buava-functions\" rel=\"nofollow\">functions</a> and <a href=\"#structure-of-a-pearl-package\" rel=\"nofollow\">variables</a> which heavily simplify construction of scripts for automation;</li>\n<li>Pearl makes easier to remove packages and restore the system to an initial state;</li>\n</ul>\n<h1>Quickstart</h1>\n<p>The Pearl command allows to: <code>create</code>, <code>list</code>, <code>search</code>, <code>install</code>, <code>update</code>, <code>emerge</code>,\n<code>remove</code> the Pearl packages defined according to the configuration located in\n<code>$XDG_CONFIG_HOME/pearl/pearl.conf</code> (defaults to <code>~/.config/pearl/pearl.conf</code>)</p>\n<p><img alt=\"quickstart\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ab7f0f0189c46269b3232dd5bce86fa58b2b5608/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706561726c2d636f72652f7265736f75726365732f6d61737465722f706561726c2d6f7074332e676966\"></p>\n<h2>Create</h2>\n<ul>\n<li>Command <code>create</code> helps you create a new local Pearl package:</li>\n</ul>\n<pre>$ pearl create mydotfiles ~/dotfiles\n</pre>\n<p>This will create a directory <code>pearl-config</code> in <code>~/dotfiles</code> containing all the templates to help you\nstart writing a Pearl package. <code>~/dotfiles</code> does not need to be an empty directory.\nAdditionally, the local repository in <code>$XDG_CONFIG_HOME/pearl/pearl.conf</code> will be updated with\nthe new package entry called <code>mydotfiles</code>.</p>\n<p>For more information about the <code>pearl-config</code> content look at the <a href=\"#create-your-own-pearl-package\" rel=\"nofollow\">section</a> below.</p>\n<h2>List</h2>\n<ul>\n<li>List all the available packages:</li>\n</ul>\n<pre>$ pearl list\n...\npearl/dot-git\n    Awesome git dotfiles <span class=\"o\">(</span>https://github.com/pearl-hub/git<span class=\"o\">)</span>\npearl/sesaila <span class=\"o\">[</span>installed<span class=\"o\">]</span>\n    Awesome aliases <span class=\"k\">for</span> Bash, Zsh and Fish shells <span class=\"o\">(</span>https://github.com/pearl-hub/sesaila<span class=\"o\">)</span>\npearl/airline <span class=\"o\">[</span>installed<span class=\"o\">]</span>\n    Status/tabline <span class=\"k\">for</span> vim <span class=\"o\">(</span>https://github.com/vim-airline/vim-airline<span class=\"o\">)</span>\npearl/trash-cli <span class=\"o\">[</span>installed<span class=\"o\">]</span>\n    Command line interface to the freedesktop.org trashcan <span class=\"o\">(</span>https://github.com/pearl-hub/trash-cli<span class=\"o\">)</span>\n...\n</pre>\n<h2>Search</h2>\n<ul>\n<li>Search for <code>vim</code> Pearl packages:</li>\n</ul>\n<pre>$ pearl search vim\n* Updating https://github.com/pearl-hub/repo.git repository\npearl/dot-vim\n    Awesome vim dotfiles <span class=\"o\">(</span>https://github.com/pearl-hub/vim<span class=\"o\">)</span>\n</pre>\n<h2>Install</h2>\n<ul>\n<li>Install <code>pearl/dot-vim</code> package (as soon as the package is installed the package is ready out of the box in vim editor!):</li>\n</ul>\n<pre>$ pearl install dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Installing pearl/dot-vim package\n</pre>\n<ul>\n<li>Install <code>pearl/trash-cli</code> package:</li>\n</ul>\n<pre>$ pearl install trash-cli\n* Updating https://github.com/pearl-hub/repo.git repository\n* Installing pearl/trash-cli package\n$ trash -h\nUsage: trash <span class=\"o\">[</span>OPTION<span class=\"o\">]</span>... FILE...\n\nPut files in trash\n...\n...\n</pre>\n<h2>Update</h2>\n<ul>\n<li>Update <code>pearl/dot-vim</code> package:</li>\n</ul>\n<pre>$ pearl update dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Updating pearl/dot-vim package\n</pre>\n<ul>\n<li>Update Pearl and all its packages installed:</li>\n</ul>\n<pre>$ pearl update\n...\n* Updating https://github.com/pearl-hub/repo.git repository\n* Updating Pearl script\n* Updating pearl/dot-vim package\n* Updating pearl/airline package\n* Updating pearl/trash-cli package\n* Updating pearl/caprica package\n...\n</pre>\n<h2>Emerge</h2>\n<p>Emerge is an idempotent command for either installing or updating a package\ndepending whether the package is already installed or not. This command turns\nto be particularly useful for establishing dependencies between packages.\nSee the section <a href=\"#define-dependencies-between-pearl-packages\" rel=\"nofollow\">below</a>\nfor more details.</p>\n<h2>Remove</h2>\n<ul>\n<li>Remove <code>pearl/dot-vim</code> package:</li>\n</ul>\n<pre>$ pearl remove dot-vim\n* Updating https://github.com/pearl-hub/repo.git repository\n* Removing pearl/dot-vim package\n</pre>\n<ul>\n<li>Remove Pearl and all its packages installed:</li>\n</ul>\n<pre>$ pearl remove\n...\nAre you sure to REMOVE all the Pearl packages in <span class=\"nv\">$PEARL_HOME</span> folder? <span class=\"o\">(</span>N/y<span class=\"o\">)</span>\n* Updating https://github.com/pearl-hub/repo.git repository\n* Removing pearl/dot-vim package\n* Removing pearl/airline package\n* Removing pearl/trash-cli package\n* Removing pearl/caprica package\n...\n</pre>\n<h2>Recommended Pearl Hub packages to install:</h2>\n<ul>\n<li><a href=\"https://github.com/pearl-hub/cmd\" rel=\"nofollow\">cmd</a></li>\n<li><a href=\"https://github.com/pearl-hub/kyrat\" rel=\"nofollow\">kyrat</a></li>\n<li><a href=\"https://github.com/pearl-hub/ranger\" rel=\"nofollow\">ranger</a></li>\n<li><a href=\"https://github.com/pearl-hub/sesaila\" rel=\"nofollow\">sesaila</a></li>\n<li><a href=\"https://github.com/pearl-hub/trash-cli\" rel=\"nofollow\">trash-cli</a></li>\n<li><a href=\"https://github.com/pearl-hub/txum\" rel=\"nofollow\">txum</a></li>\n</ul>\n<p>For dotfiles packages take a look <a href=\"https://github.com/pearl-hub?q=dot\" rel=\"nofollow\">here</a>.</p>\n<p>Check out the <a href=\"https://github.com/pearl-hub\" rel=\"nofollow\">OPH (Official Pearl Hub)</a>\nfor more packages you might be interested.</p>\n<h1>Installation</h1>\n<h2>Dependencies</h2>\n<p>Before installing Pearl be sure that all dependencies are properly installed in your system.\nThe Pearl dependencies are the following:</p>\n<h3>Mandatory</h3>\n<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">python (&gt;=3.5)</a></li>\n<li><a href=\"https://www.gnu.org/software/bash/\" rel=\"nofollow\">bash (&gt;=4.1)</a></li>\n<li><a href=\"https://git-scm.com/\" rel=\"nofollow\">git (&gt;=1.8)</a></li>\n</ul>\n<h3>Optional</h3>\n<p>The following are not mandatory dependencies but can be handy to have for the hook functions in Pearl package.\nAll the Linux distributions have these dependencies already installed.</p>\n<ul>\n<li><a href=\"https://www.gnu.org/software/coreutils/\" rel=\"nofollow\">GNU coreutils</a></li>\n<li><a href=\"https://www.gnu.org/software/grep/\" rel=\"nofollow\">grep</a></li>\n<li><a href=\"https://www.gnu.org/software/sed/\" rel=\"nofollow\">sed</a></li>\n</ul>\n<h3>Additional shells supported</h3>\n<p>Pearl supports also the following shells:</p>\n<ul>\n<li><a href=\"https://fishshell.com/\" rel=\"nofollow\">fish (&gt;=2.2.0)</a></li>\n<li><a href=\"http://www.zsh.org/\" rel=\"nofollow\">zsh (&gt;=5.2)</a></li>\n</ul>\n<h2>Linux</h2>\n<h3>Arch Linux</h3>\n<p>Pearl can be installed in Arch Linux through AUR.\nThe package is <a href=\"https://aur.archlinux.org/packages/pearl-git/\" rel=\"nofollow\">pearl-git</a>.</p>\n<p>For example, to install Pearl via <a href=\"https://github.com/Jguer/yay\" rel=\"nofollow\">yay</a> AUR helper:</p>\n<pre><code>yay -S pearl-git\n</code></pre>\n<p>Any other AUR helpers can be found <a href=\"https://wiki.archlinux.org/index.php/AUR_helpers\" rel=\"nofollow\">here</a>.</p>\n<h3>Other Linux distributions</h3>\n<p>Assuming all Pearl <a href=\"#dependencies\" rel=\"nofollow\">dependencies</a> are properly installed\nin the system, to install Pearl you can use the <code>pip</code> command.\nUnless there is a specific use case, it is not a good option to use virtual environments such as\n<code>virtualenv</code> or <code>conda</code> because otherwise Pearl will be only visible within that environment.\nIt is recommended to use the system-wide <code>pip</code> which is generally locate in <code>/usr/bin/pip</code>.\nThe following will install the package in your <code>$HOME</code> directory (<code>~/.local/</code>):</p>\n<pre><code>/usr/bin/pip install --user pearlcli\nexport PATH=\"~/.local/bin:$PATH\"\n</code></pre>\n<p>Pearl command will be located in <code>~/.local/bin/pearl</code></p>\n<p>To create the <code>$PEARL_HOME</code> directory and the new pearl configuration file from template, run:</p>\n<pre><code>pearl init\n</code></pre>\n<h2>OSX</h2>\n<p>In order to install all Pearl dependencies, you first need to install <a href=\"http://brew.sh/\" rel=\"nofollow\">Homebrew</a>.</p>\n<p>To install all the needed dependencies via Homebrew:</p>\n<pre>brew update\nbrew install bash git coreutils grep gnu-sed python\n</pre>\n<p>The following will install the package under <code>/usr/local</code>:</p>\n<pre><code>/usr/local/bin/pip3 install pearlcli\n# If the bin path is not already in $PATH:\nexport PATH=\"/usr/local/bin:$PATH\"\n</code></pre>\n<p>Pearl command will be located in <code>/usr/local/bin/pearl</code></p>\n<p>To create the <code>$PEARL_HOME</code> directory and the new pearl configuration file from template, run:</p>\n<pre><code>pearl init\n</code></pre>\n<p><strong>IMPORTANT NOTE</strong>: Pearl gets loaded through <code>~/.bashrc</code>. The problem is that in OSX,\nthe terminal opens a login shell and only <code>~/.bash_profile</code> will get executed.\nRun the following only if <code>~/.bashrc</code> is not loaded within <code>~/.bash_profile</code> file:</p>\n<pre><span class=\"nb\">echo</span> <span class=\"s2\">\"[[ -f ~/.bashrc ]] &amp;&amp; source ~/.bashrc\"</span> &gt;&gt; ~/.bash_profile\n</pre>\n<p>This will make sure that <code>~/.bashrc</code> will run at shell startup.</p>\n<h1>Create your own Pearl package</h1>\n<p><strong>Any git repository is already a Pearl package</strong>. For instance, in order\nto manage a dotfiles repository in Pearl, you just need to change\nthe Pearl configuration file located in <code>$XDG_CONFIG_HOME/pearl/pearl.conf</code>.</p>\n<p>Add the following line to <code>pearl.conf</code> file:</p>\n<pre><code>PEARL_PACKAGES = {\n    \"mydotfiles\": {\n        \"url\": \"https://github.com/user/mydotfiles.git\",\n        \"description\": \"My dotfiles\"\n    },\n}\n</code></pre>\n<p>In other words, update the <code>PEARL_PACKAGES</code> dictionary with a new entry containing the\nname of the package (i.e. <code>mydotfiles</code>),\nthe git url (i.e. <code>https://github.com/user/mydotfiles.git</code>) and an optional description.</p>\n<p><em><strong>That's it!</strong></em> The package will be ready to be <a href=\"#install\" rel=\"nofollow\">installed</a>,\n<a href=\"#update\" rel=\"nofollow\">updated</a>, <a href=\"#emerge\" rel=\"nofollow\">emerged</a> and <a href=\"#remove\" rel=\"nofollow\">removed</a> via the Pearl system.</p>\n<h2>Structure of a Pearl package</h2>\n<p>Your own git repository can contain an <strong>optional</strong> directory\nnamed <code>pearl-config</code> used by Pearl to integrate the package with the Pearl environment.</p>\n<pre><code>/ (package root)\n\u2502\n\u251c\u2500\u2500 pearl-config (optional directory)\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 hooks.sh\n\u2502   \u251c\u2500\u2500 config.sh\n\u2502   \u251c\u2500\u2500 config.bash\n\u2502   \u251c\u2500\u2500 config.zsh\n\u2502   \u251c\u2500\u2500 config.fish\n\u2502   \u251c\u2500\u2500 config.vim\n\u2502   \u2514\u2500\u2500 config.el\n\u2502\n\u2514\u2500\u2500 (additional package content)\n</code></pre>\n<p>The files inside <code>pearl-config</code> are also <strong>optional</strong> scripts:</p>\n<ul>\n<li><code>hooks.sh</code> - contains the <a href=\"#hook-functions\" rel=\"nofollow\">hooks functions</a> executed during the <code>install</code>, <code>update</code> and <code>remove</code> events.</li>\n<li><code>config.sh</code> - will be sourced whenever a new Bash/Zsh shell is starting up.</li>\n<li><code>config.bash</code> - will be sourced whenever a new Bash shell is starting up.</li>\n<li><code>config.zsh</code> - will be sourced whenever a new Zsh shell is starting up.</li>\n<li><code>config.fish</code> - will be sourced whenever a new Fish shell is starting up.</li>\n<li><code>config.vim</code> - will be executed whenever Vim editor is starting up.</li>\n<li><code>config.el</code> - will be sourced whenever Emacs editor is starting up.</li>\n</ul>\n<p>The following variables can be used in any of the previous scripts:</p>\n<ul>\n<li><code>PEARL_HOME</code>          - Pearl location (<code>$XDG_DATA_HOME/pearl</code> which by default is <code>$HOME/.local/share/pearl</code>)</li>\n<li><code>PEARL_PKGDIR</code>        - Pearl package location</li>\n<li><code>PEARL_PKGVARDIR</code>     - Pearl package location containing data needed for package</li>\n<li><code>PEARL_PKGNAME</code>       - Pearl package name</li>\n<li><code>PEARL_PKGREPONAME</code>   - Pearl package repo name (useful to detect and interact with packages within the same repo)</li>\n</ul>\n<p>Additionally, the script <code>hooks.sh</code> can use the utility functions available in\n<a href=\"https://github.com/fsquillace/buava\" rel=\"nofollow\">Buava</a> and Pearl <a href=\"lib/utils\" rel=\"nofollow\"><em>utils</em></a> directory that\nmake easier the integration with Pearl ecosystem.</p>\n<p>Useful examples of Pearl packages can be checked in the\n<a href=\"https://github.com/pearl-hub\" rel=\"nofollow\">Official Pearl Hub</a>.</p>\n<h3>The hooks.sh script</h3>\n<h4>Hook functions</h4>\n<ul>\n<li><code>post_install</code>  - Called <em>after</em> an installation of the package occurs.</li>\n<li><code>pre_update</code>    - Called <em>before</em> an update of the package occurs.</li>\n<li><code>post_update</code>   - Called <em>after</em> an update of the package occurs.</li>\n<li><code>pre_remove</code>    - Called <em>before</em> a removal of the package occurs.</li>\n</ul>\n<h4>An hooks.sh script example</h4>\n<pre><code>post_install() {\n    warn \"Remember to setup your config located in: ~/.dotfile\"\n    # Do a smart backup before modifying the file\n    backup ${HOME}/.dotfile\n    \"# New dotfile\" &gt; ${HOME}/.dotfile\n    link tmux \"$PEARL_PKGDIR/mytmux.conf\"\n\n    info \"Awesome - new package installed!\"\n    return 0\n}\npost_update() {\n    post_install\n    return 0\n}\npre_remove() {\n    info \"dotfiles package removed\"\n    unlink tmux \"$PEARL_PKGDIR/mytmux.conf\"\n\n    # Do an idempotent delete\n    delete ${HOME}/.dotfile\n    return 0\n}\n</code></pre>\n<p>The <code>info</code> and <code>warn</code> are functions that print a message\nusing different colors (namely cyan and yellow).</p>\n<p>The <code>link</code> <code>unlink</code> are idempotent functions (the result will not change\nif the function will be called multiple times) that are able\nto link/unlink a config file in order to be loaded at startup by a certain program.</p>\n<p>The <code>backup</code> keeps the last three backups of the file and do not perform backup\nif the file has not been modified since the latest backup. The <code>delete</code> is a\nfunction for idempotent remove (it will not raise an error if the file\nno longer exist).</p>\n<p>All these functions belong to the <a href=\"https://github.com/fsquillace/buava\" rel=\"nofollow\">Buava</a> package\nin <a href=\"https://github.com/fsquillace/buava/blob/master/lib/utils.sh\" rel=\"nofollow\"><code>utils.sh</code></a>\nand to the Pearl <a href=\"lib/utils/utils.sh\" rel=\"nofollow\"><code>utils.sh</code></a> script. You can use them\ninside the <code>hooks.sh</code> to any hook function.</p>\n<p><strong>Very important note</strong>: All the hook functions <strong>must</strong> be\n<a href=\"https://en.wikipedia.org/wiki/Idempotence\" rel=\"nofollow\"><strong>idempotent</strong></a>\n(the commands of each hook function must produce the same result even if\nthe command gets executed multiple times).\nAll buava commands are idempotent and this will help to write hook functions\nvery quickly.</p>\n<p><strong>Note</strong>: For OSX system, the GNU version <code>sed</code> and <code>grep</code> are automatically\nimported in <code>hooks.sh</code> and can be directly used if needed.</p>\n<h2>Create a Pearl package from a local directory</h2>\n<p>Pearl package system will work even for local directories. This is particularly useful\nwhenever a Pearl package needs to be tested before pushing to a git repository.</p>\n<p>For instance, the following lines in <code>pearl.conf</code> file will add a package located in\n<code>/home/joe/dotfiles</code>:</p>\n<pre><code>PEARL_PACKAGES = {\n    \"mydotfiles\": {\n        \"url\": \"/home/user/mydotfiles\",\n        \"description\": \"My dotfiles\"\n    },\n}\n</code></pre>\n<p>The directory path must be an absolute path.</p>\n<p>The package will be ready to be <a href=\"#install\" rel=\"nofollow\">installed</a>, <a href=\"#update\" rel=\"nofollow\">updated</a>,\n<a href=\"#emerge\" rel=\"nofollow\">emerged</a> and <a href=\"#remove\" rel=\"nofollow\">removed</a> via the Pearl system.</p>\n<p>The directory content can be structured in the exact way as described\nin the <a href=\"#structure-of-a-pearl-package\" rel=\"nofollow\">section</a> above.</p>\n<h2>Define dependencies between Pearl packages</h2>\n<p>Suppose you have a package <code>mypack</code> which depends on another package <code>mydep</code>,\nyou can update the <code>mypack</code> <code>hooks.sh</code> file in this way:</p>\n<pre><code>post_install() {\n    # Install/update the dependency here:\n    pearl emerge ${PEARL_PKGREPONAME}/mydep\n}\npost_update() {\n    post_install\n}\npre_remove() {\n    # Uncomment below to strictly remove the dependency\n    # during the removal of the current package:\n    #pearl remove ${PEARL_PKGREPONAME}/mydep\n}\n</code></pre>\n<p>The <code>PEARL_PKGREPONAME</code> variable will make sure to define dependencies only\nbetween packages of the same repository.\nTo see a real example in Pearl Hub, take a look at the <a href=\"https://github.com/pearl-hub/kyrat/blob/master/pearl-config/hooks.sh\" rel=\"nofollow\">Kyrat hooks.sh</a>.</p>\n<h2>Use third-party git repository not available in Pearl Hub</h2>\n<p>If you want to use a third-party git repository\nthat is not available in the <a href=\"https://github.com/pearl-hub\" rel=\"nofollow\">Official Pearl Hub</a>,\nyou can:</p>\n<ul>\n<li>Create your own git repository and use the <code>PEARL_PKGVARDIR</code> directory (recommended)</li>\n<li>Create your own git repository and use <a href=\"https://git-scm.com/docs/git-submodule\" rel=\"nofollow\">git submodule</a></li>\n<li>Point directly to the third-party git repository</li>\n</ul>\n<p>To see examples of Pearl packages from third-party git repos take a look at the\n<a href=\"https://github.com/pearl-hub\" rel=\"nofollow\">Official Pearl Hub</a>.</p>\n<h3>Create your own git repository and use the <code>PEARL_PKGVARDIR</code> directory (recommended)</h3>\n<p>You can use the <code>PEARL_PKGVARDIR</code> directory during the installation phase to install the third-party git repository.\nThis is the best way to incorporate third-party project into Pearl ecosystem.</p>\n<p>Here it is an example of <code>hooks.sh</code> file which install the ranger file manager into the directory <code>${PEARL_PKGVARDIR}/ranger</code>:</p>\n<pre><code>function post_install(){\n    install_or_update_git_repo https://github.com/ranger/ranger.git \"${PEARL_PKGVARDIR}/ranger\" master\n}\n\nfunction post_update(){\n    post_install\n}\n\nfunction pre_remove(){\n    rm -rf ${PEARL_PKGVARDIR}/ranger\n}\n</code></pre>\n<p>The function <code>install_or_update_git_repo</code> comes from the <a href=\"https://github.com/fsquillace/buava\" rel=\"nofollow\">Buava</a>\nlibrary in <a href=\"https://github.com/fsquillace/buava/blob/master/lib/utils.sh\" rel=\"nofollow\"><code>utils.sh</code></a>\nwhich is natively available in Pearl during the installation.\nYou can even use the functions <code>install_git_repo</code> or <code>update_git_repo</code> which respectively install or update the git repository.</p>\n<p>For a full example take a look at the <a href=\"https://github.com/pearl-hub/ranger\" rel=\"nofollow\">ranger</a> Pearl Hub package.</p>\n<h3>Create your own git repository and use git submodule</h3>\n<p>Inside your git repository, you just need to add the third-party git repo as a\n<a href=\"https://git-scm.com/docs/git-submodule\" rel=\"nofollow\">git submodule</a>.\nFor instance, to add the <a href=\"https://github.com/powerline/powerline\" rel=\"nofollow\">powerline</a> in your Pearl package,\nyou can introduce a submodule in the <code>module</code> directory:</p>\n<pre><code>git submodule add https://github.com/powerline/powerline.git module\n</code></pre>\n<p>The filesystem structure of the package will become something like this:</p>\n<pre><code>/ (package root)\n\u2502\n\u251c\u2500\u2500 pearl-config   (optional directory)\n\u251c\u2500\u2500 module/        (contains third-party code)\n\u2514\u2500\u2500 (additional package content)\n</code></pre>\n<p>Then, you just need to modify the config scripts in order to integrate the third-party\nproject inside Pearl environment.</p>\n<h3>Point directly to the third-party git repository</h3>\n<p>Let's suppose you want to install the <a href=\"https://github.com/tpope/vim-rails\" rel=\"nofollow\">vim-rails</a> plugin.\nIn your Pearl configuration (<code>$XDG_CONFIG_HOME/pearl/pearl.conf</code>), add your new Pearl package:</p>\n<pre><code>PEARL_PACKAGES = {\n    \"vim-rails\": {\n        \"url\": \"https://github.com/tpope/vim-rails.git\",\n        \"description\": \"Ruby on Rails power tools\"\n    },\n}\n</code></pre>\n<p>Install the package:</p>\n<pre><code>pearl install vim-rails\n</code></pre>\n<p>Voila', your new vim plugin is ready to be used!</p>\n<p>This approach is particularly useful whenever you do not need to specify\nany pearl config to <em>\"enrich\"</em> the third-party project inside\nthe Pearl environment.</p>\n<h1>Create your own Pearl repository</h1>\n<p>A Pearl repository is just a git repository containing a file located in <code>pearl-config/pearl.conf</code>\nwith a list of packages. For instance, the <em>OPH</em> repository is available\n<a href=\"https://github.com/pearl-hub/repo-v2\" rel=\"nofollow\">here</a>.</p>\n<p>In order to use the new repository (i.e. \"<a href=\"https://github.com/myrepo/pearl-repo.git\" rel=\"nofollow\">https://github.com/myrepo/pearl-repo.git</a>\"),\nupdate the <code>pearl.conf</code> file by adding the following line:</p>\n<pre><code>PEARL_REPOS += (\"https://github.com/myrepo/pearl-repo.git\")\n</code></pre>\n<h1>Troubleshooting</h1>\n<h2>Corrupted Pearl Home directory</h2>\n<blockquote>\n<p><strong>Q</strong>: What should I do if I accidentally removed files/packages in <code>$PEARL_HOME</code>?</p>\n</blockquote>\n<blockquote>\n<p><strong>A</strong>: You can recover the structure of the <code>$PEARL_HOME</code> by running:</p>\n</blockquote>\n<pre><code>$&gt; pearl init\n</code></pre>\n<blockquote>\n<p>The command will create all the essential directories and symlinks in <code>$PEARL_HOME</code>.\nIt is harmless to run the <code>init</code> command multiple times since it is idempotent.</p>\n</blockquote>\n<h2>Corrupted package</h2>\n<blockquote>\n<p><strong>Q</strong>: Why I can no longer update/remove a package?</p>\n</blockquote>\n<blockquote>\n<p><strong>A</strong>: This is probably because either one of the hook functions\nis failing or the package content is corrupted. You can forcely remove the package:</p>\n</blockquote>\n<pre><code>$&gt; pearl remove &lt;packagename&gt;\n</code></pre>\n<blockquote>\n<p>which bypass hook functions that are failing. If that does not even work,\nyou can delete a package by simply removing its directory:</p>\n</blockquote>\n<pre><code>$&gt; rm -rf $PEARL_HOME/packages/pearl/&lt;packagename&gt;\n</code></pre>\n<blockquote>\n<p>After that, you can reinstall the package again.\nThe Pearl packages contain a dedicated directory <code>var</code> for storing\ndata needed for the package itself.\nThe <code>var</code> data are always managed by the package and they never gets deleted by Pearl\nduring the package removal.\nIf you want to delete the content in <code>var</code> package:</p>\n</blockquote>\n<pre><code>$&gt; rm -rf $PEARL_HOME/var/pearl/&lt;packagename&gt;\n</code></pre>\n<h2>Package shell variables/functions not visible in current shell after installation</h2>\n<blockquote>\n<p><strong>Q</strong>: Why are not package's environment variables/functions visible in\nmy current shell after installing/updating the package?</p>\n</blockquote>\n<blockquote>\n<p><strong>A</strong>: After package install/update, the variables or\nfunctions related to the current shell and defined in <code>pearl-config/config.*</code>\nmay not be available because a reload of Pearl configuration file is required.\nYou can fix this by simply run the function:</p>\n</blockquote>\n<pre><code>pearl-source\n</code></pre>\n<blockquote>\n<p>which reloads the configuration.\nThe use of such function is not always required but depends\nwhether the variables/functions involve the current shell where the\npackage <code>install</code>/<code>update</code> occurred (i.e. a new variable defined in <code>config.sh</code>\nand the current shell is a bash or zsh). Alternatively, user can always\ncreate a new shell and the package resources will be available as\nexpected.</p>\n</blockquote>\n<h2>Error during package install</h2>\n<blockquote>\n<p>Q: Why Do I get the following error:</p>\n</blockquote>\n<pre><code>Error on executing 'post_install' hook. Rolling back...\n</code></pre>\n<blockquote>\n<p>A: This occurs when the <code>post_install</code> hook function fails.\nPearl will attempt to roll back and force a removal of the package. In this way\nyou can attempt to install the package again once the hook function gets\nfixed.</p>\n</blockquote>\n<h1>Contributing</h1>\n<p>You could help improving Pearl and the <a href=\"https://github.com/pearl-hub\" rel=\"nofollow\">OPH</a> in the following ways:</p>\n<ul>\n<li><a href=\"CONTRIBUTING.md#reporting-bugs\" rel=\"nofollow\">Reporting Bugs</a></li>\n<li><a href=\"CONTRIBUTING.md#suggesting-enhancements\" rel=\"nofollow\">Suggesting Enhancements</a></li>\n<li><a href=\"CONTRIBUTING.md#your-first-code-contribution\" rel=\"nofollow\">Writing Code</a></li>\n</ul>\n<h1>Change Log</h1>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/2.1.1\" rel=\"nofollow\">2.1.1</a> - 2020-01-13</h2>\n<ul>\n<li>Replace <code>install.sh</code> with <code>hooks.sh</code>\n<ul>\n<li><code>install.sh</code> will still be valid until next releases</li>\n</ul>\n</li>\n<li>Fail if no command is specified</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/2.1.0\" rel=\"nofollow\">2.1.0</a> - 2020-01-12</h2>\n<ul>\n<li>Add <code>create</code> command</li>\n<li>Fix procedure to install Pearl in OSX</li>\n<li>Fix ci to upload to PyPI</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/2.0.2\" rel=\"nofollow\">2.0.2</a> - 2020-01-11</h2>\n<ul>\n<li>Add instructions to install Pearl in Arch Linux</li>\n<li>Fix bug for version option</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/2.0.1\" rel=\"nofollow\">2.0.1</a> - 2020-01-11</h2>\n<ul>\n<li>Manual intervention to switch to Pearl v2\n<ul>\n<li><a href=\"https://github.com/pearl-core/pearl/wiki/Migration-to-Pearl-version-2\" rel=\"nofollow\">Migration page</a></li>\n</ul>\n</li>\n<li>Codebase re-written in Python</li>\n<li>Remove the <code>post_remove</code></li>\n<li><code>pearl.conf</code> is not a python script. This requires manual intervention. Take a look at the <code>pearl.conf.template</code> file in codebase</li>\n<li><code>pearl-metadata</code> directory is finally deprecated</li>\n<li>Add <code>--no-confirm</code> option</li>\n<li>Add <code>--force</code> option\n<ul>\n<li>This option bypasses failures even during the hook function execution</li>\n</ul>\n</li>\n<li>Add <code>--verbose</code> option\n<ul>\n<li><code>-vv</code> allows to enable xtrace in hook functions</li>\n</ul>\n</li>\n<li>Add <code>--update-repos</code> option</li>\n<li>Shortcut commands (i.e. <code>i</code> to specify <code>install</code> command) are no longer available</li>\n<li>Pearl file locations change drastically in order to be complaint with the\n<a href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\" rel=\"nofollow\">XDG Base Directory Specification</a>\n<ul>\n<li>As of now, <code>pearl.conf</code> resides in <code>$XDG_CONFIG_HOME/pearl</code> (default <code>~/.config/pearl</code>)</li>\n<li>The new location for <code>$PEARL_HOME</code> is <code>$XDG_DATA_HOME/pearl</code> (default <code>~/.local/share/pearl</code>)</li>\n</ul>\n</li>\n<li>Remove the variables <code>$PEARL_ROOT</code> and <code>$PEARL_TEMPORARY</code></li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.8.2\" rel=\"nofollow\">1.8.2</a> - 2019-10-13</h2>\n<ul>\n<li>Update <code>README.md</code> file</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.8.1\" rel=\"nofollow\">1.8.1</a> - 2019-07-13</h2>\n<ul>\n<li>Update <code>buava</code>:\n<ul>\n<li>New view action for <code>setup_configuration</code> helper function</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.8.0\" rel=\"nofollow\">1.8.0</a> - 2019-06-03</h2>\n<ul>\n<li>Add roll back mechanism during install package</li>\n<li>Add <code>grep</code> and <code>sed</code> as optional dependencies since they may be used in hook functions</li>\n<li>Add newer <code>buava</code>:\n<ul>\n<li><code>backup</code> function</li>\n<li><code>delete</code> function</li>\n<li><code>ideavim</code> and <code>gvim</code> dotfiles for (<code>un</code>)<code>link</code> functions</li>\n<li><code>install_or_update_vim_plugin_git_repo</code> function</li>\n<li>Add GNU <code>sed</code> and <code>grep</code> for OSX compat functions</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.7.2\" rel=\"nofollow\">1.7.2</a> - 2019-01-15</h2>\n<ul>\n<li>Fix variables <code>PEARL_PKGNAME</code> <code>PEARL_PKGREPONAME</code> for vim and emacs boot</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.7.1\" rel=\"nofollow\">1.7.1</a> - 2018-08-11</h2>\n<ul>\n<li>Deprecate pathogen</li>\n<li>Ensure to <code>cd</code> when updating package pointing to local directory</li>\n<li>Fix when package specified with full name does not exist</li>\n<li>More log info when Git URL package change</li>\n<li>Proceed even if <code>install.sh</code> is syntatically incorrect (prevent block for fixing the broken package)</li>\n<li>Improve doc and add section about comparison with Ansible</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.7.0\" rel=\"nofollow\">1.7.0</a> - 2018-07-05</h2>\n<ul>\n<li>Add the idempotent <code>emerge</code> command which update/install packages.</li>\n<li>No longer support the use of USR1 signal to source the Pearl config to the parent process. To explictly do that run <code>pearl-source</code> command instead.</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.6.3\" rel=\"nofollow\">1.6.3</a> - 2018-06-22</h2>\n<ul>\n<li>Location of the repo file is <code>pearl-config/pearl.conf</code>. Backward compatibility will be kept until 2.0.0</li>\n<li>Make the branch name inferred from repo's HEAD rather than hardcode the branch with <code>master</code></li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.6.2\" rel=\"nofollow\">1.6.2</a> - 2018-06-09</h2>\n<ul>\n<li>Add variables <code>PEARL_PKGNAME</code> <code>PEARL_PKGREPONAME</code></li>\n<li>Fix boot vim for deprecating <code>pearl-metadata</code></li>\n<li>Update doc to use dynamic updates for third-party git repos</li>\n<li>Add the buava git repo helpers</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.6.1\" rel=\"nofollow\">1.6.1</a> - 2018-02-04</h2>\n<ul>\n<li>Fix import <code>osx-compat.sh</code></li>\n<li>Fix update Pearl submodules during updates</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.6.0\" rel=\"nofollow\">1.6.0</a> - 2018-02-03</h2>\n<ul>\n<li>Change directory name to <code>pearl-config</code>. Pearl version <code>2.0.0</code> will deprecate <code>pearl-metadata</code></li>\n<li><code>link_to_path</code> to customize symlink name</li>\n<li>Changes in <code>buava</code> for Pearl configs:\n<ul>\n<li><code>osx_detect</code> function to detect the OS platform</li>\n<li>Improved <code>choose</code> function with indexes</li>\n<li>Add <code>ssh</code> for <code>[un]link</code> function</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.5.6\" rel=\"nofollow\">1.5.6</a> - 2017-08-31</h2>\n<ul>\n<li>Fix Integ tests</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.5.5\" rel=\"nofollow\">1.5.5</a> - 2017-08-31</h2>\n<ul>\n<li>Update Buava:\n<ul>\n<li>Update <code>download</code> function</li>\n<li>Add <code>choose</code>, <code>input</code> and <code>contain_elements</code> functions</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.5.4\" rel=\"nofollow\">1.5.4</a> - 2017-08-28</h2>\n<ul>\n<li>Update Buava:\n<ul>\n<li>Add <code>download</code> function</li>\n<li>vimperator gtk2 programs for <code>[un]link</code> functions</li>\n</ul>\n</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.5.3\" rel=\"nofollow\">1.5.3</a> - 2017-06-29</h2>\n<ul>\n<li>Add <a href=\"https://github.com/pearl-core/test-utils\" rel=\"nofollow\">Pear test utils</a> as new dependency</li>\n<li>Add <a href=\"https://github.com/fsquillace/bunit\" rel=\"nofollow\">Bunit</a> as new dependency</li>\n<li>Add <a href=\"https://github.com/fsquillace/buava\" rel=\"nofollow\">Buava</a> as new dependency</li>\n<li>Inform about the trap on USR1 signal</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.5.2\" rel=\"nofollow\">1.5.2</a> - 2017-01-07</h2>\n<ul>\n<li>Add support for new OSX image in Travis</li>\n<li>Fallback to a default temp directory if <code>tty</code> does not work</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.5.1\" rel=\"nofollow\">1.5.1</a> - 2016-11-15</h2>\n<ul>\n<li>Fix git --no-parser log for missing newline</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.5.0\" rel=\"nofollow\">1.5.0</a> - 2016-11-13</h2>\n<ul>\n<li>Provide (un)link from/to in utils.sh</li>\n<li>Provide list of last commits during add/update package</li>\n<li>Fix <code>unlink_from_path</code> when source file is a symlink</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.4.5\" rel=\"nofollow\">1.4.5</a> - 2016-11-11</h2>\n<ul>\n<li>Provide (un)link from/to PATH variable in utils.sh</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.4.4\" rel=\"nofollow\">1.4.4</a> - 2016-09-26</h2>\n<ul>\n<li>Improving doc and add checkstyle</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.4.3\" rel=\"nofollow\">1.4.3</a> - 2016-05-25</h2>\n<ul>\n<li>Remove the requirement of updating the PATH on OSX</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.4.2\" rel=\"nofollow\">1.4.2</a> - 2016-05-10</h2>\n<ul>\n<li>Add support for OSX</li>\n<li>Add check for existing <code>PEARL_HOME</code> variable for emacs/vim boot scripts</li>\n<li>Add <code>PEARL_HOME/bin</code> directory to have symlinks for the Pearl packages executables</li>\n<li>Avoid polluting <code>PATH</code> variable by introducing a check first</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.4.1\" rel=\"nofollow\">1.4.1</a> - 2016-04-30</h2>\n<ul>\n<li>Introduce <code>$PEARL_PKGVARDIR</code> on boot scripts</li>\n<li>Packages do not need to have <code>master</code> as default branch</li>\n<li>Change the installation process to avoid <a href=\"https://www.idontplaydarts.com/2016/04/detecting-curl-pipe-bash-server-side/\" rel=\"nofollow\">pipe bash problem</a></li>\n<li>Ensure to get the most updated <code>post_update</code> function</li>\n<li>Refactor unit tests in <code>test-package.sh</code></li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.4.0\" rel=\"nofollow\">1.4.0</a> - 2016-04-23</h2>\n<ul>\n<li>Add a dedicated directory <code>$PEARL_PKGVARDIR</code> for the Pearl packages in order to store data\nneeded during the execution of the package itself</li>\n<li>Add warning in case of an old version of git or bash</li>\n<li>Introduce <code>$PEARL_PKGDIR</code> environment variable for emacs and vim config files</li>\n<li>Change the definition of public API</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.3.1\" rel=\"nofollow\">1.3.1</a> - 2016-04-21</h2>\n<ul>\n<li>Fix compatibility with Bash 4.1</li>\n<li>Integration tests with fixed Bash and Git versions</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.3.0\" rel=\"nofollow\">1.3.0</a> - 2016-04-20</h2>\n<ul>\n<li>Provide the definition of public API</li>\n<li>Add the emacs hook</li>\n<li>Use a better approach to return values from bash functions</li>\n<li>Change location of the boot files for pearl.fish and pearl.sh</li>\n<li>Introduce the standard documentation for functions</li>\n<li>Use try/catch approach to handle errors</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.2.0\" rel=\"nofollow\">1.2.0</a> - 2016-04-14</h2>\n<ul>\n<li>Fix the removal of packages by querying the local directory</li>\n<li>Add (un)link functions for utils.sh</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.1.0\" rel=\"nofollow\">1.1.0</a> - 2016-04-09</h2>\n<ul>\n<li>Check if Git URL changed during updates</li>\n<li>Introduce the template for new Pearl packages</li>\n<li>Local directories can be used as Pearl packages</li>\n<li>Add VERSION file</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.0.1\" rel=\"nofollow\">1.0.1</a> - 2016-04-08</h2>\n<ul>\n<li>Update docs</li>\n<li>Add travis and integration tests</li>\n<li>Introduce the installer</li>\n</ul>\n<h2><a href=\"https://github.com/pearl-core/pearl/releases/tag/1.0.0\" rel=\"nofollow\">1.0.0</a> - 2016-04-03</h2>\n<ul>\n<li>Initial commit.</li>\n</ul>\n\n\n          </div>"}, "last_serial": 6447988, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "0e2aee85b64f272c6c54bdad765bf85d", "sha256": "3aac704a2cd28be9d8ed9053a18bca4da70e56bc49c630fec9647d979ab36c07"}, "downloads": -1, "filename": "pearlcli-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e2aee85b64f272c6c54bdad765bf85d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 32241, "upload_time": "2020-01-10T08:25:41", "upload_time_iso_8601": "2020-01-10T08:25:41.533091Z", "url": "https://files.pythonhosted.org/packages/04/07/7e17178e4e5b2447329ed92810493a31c3e3d387974b2aaa93bf86075a9e/pearlcli-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "85ff211d6d125add866aa17bf7ee6954", "sha256": "21ed9677d1a4c67a7f52dad3a10fa84849138a9624c253b32cde11f6b57fd1d8"}, "downloads": -1, "filename": "pearlcli-2.0.0.tar.gz", "has_sig": false, "md5_digest": "85ff211d6d125add866aa17bf7ee6954", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 72823, "upload_time": "2020-01-10T08:25:44", "upload_time_iso_8601": "2020-01-10T08:25:44.397615Z", "url": "https://files.pythonhosted.org/packages/c8/58/e2367835e33a4762208f39c46ac74e65d5bd9694ef1b031a58022797dbbe/pearlcli-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "f12aba3c52790331b254e5e1a7e1683e", "sha256": "c8f42e492af6e446e8efdc24d31ea9dd0f57148508cfe500d3b32b53c7760557"}, "downloads": -1, "filename": "pearlcli-2.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f12aba3c52790331b254e5e1a7e1683e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 76793, "upload_time": "2020-01-11T15:48:04", "upload_time_iso_8601": "2020-01-11T15:48:04.415955Z", "url": "https://files.pythonhosted.org/packages/19/9f/da79db73ddddc67f3a36d5d634474f5dd723dcf941f53e677d330da7cb72/pearlcli-2.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adbd2d0964c9c33b0ca5608789aaccfa", "sha256": "3c01710254c1f459301b5f41cba5357bb6f82e40623ab9420036254d0e1af7a3"}, "downloads": -1, "filename": "pearlcli-2.0.1.tar.gz", "has_sig": false, "md5_digest": "adbd2d0964c9c33b0ca5608789aaccfa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 106513, "upload_time": "2020-01-11T15:48:06", "upload_time_iso_8601": "2020-01-11T15:48:06.698781Z", "url": "https://files.pythonhosted.org/packages/e8/72/11dea87172f4c9b87b6d5ecb3c51d167244e0dae79b46b55b6de44f8a34e/pearlcli-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "b219382dec0a0139fae6b4673acd8c3d", "sha256": "90429922d3e71bd2ba480785c71a33a36f50226c9d3f663067b65b08b91fd3af"}, "downloads": -1, "filename": "pearlcli-2.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b219382dec0a0139fae6b4673acd8c3d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 76960, "upload_time": "2020-01-11T17:11:58", "upload_time_iso_8601": "2020-01-11T17:11:58.312732Z", "url": "https://files.pythonhosted.org/packages/5b/e2/c4bae24eaa19892fa2b4595bb0d1ad06a8447573e14f46d5b9a4b5f029de/pearlcli-2.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cb0fdc9bdfcb41d4039bd5c34b8c153c", "sha256": "a136429a93542300ca1592c2ec415b6c83e1b8cd3d85243677e6fd9a7ec262b0"}, "downloads": -1, "filename": "pearlcli-2.0.2.tar.gz", "has_sig": false, "md5_digest": "cb0fdc9bdfcb41d4039bd5c34b8c153c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 107065, "upload_time": "2020-01-11T17:12:00", "upload_time_iso_8601": "2020-01-11T17:12:00.504316Z", "url": "https://files.pythonhosted.org/packages/9a/3c/225c630693ade5cbfff9e74a9a6c7733d5f6ddc448194235748b996a0120/pearlcli-2.0.2.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "e87e255840791d66e61a9c97e8fba77f", "sha256": "d335fc69ea8bac8b70798a114c4d71ad22e0a9a12f212e5e85bc101879f057b5"}, "downloads": -1, "filename": "pearlcli-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e87e255840791d66e61a9c97e8fba77f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 81252, "upload_time": "2020-01-12T17:12:18", "upload_time_iso_8601": "2020-01-12T17:12:18.480154Z", "url": "https://files.pythonhosted.org/packages/5c/4d/3cf8d27b00cda0d72f676d735076f9815c6ae2da6656cc9cc45c66ce7a10/pearlcli-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a8462c9def249ca81c9ea694fa54259d", "sha256": "736bc231e055232d0b7ce7f794dc36d3de456eee3b83bc60576e904806a704b0"}, "downloads": -1, "filename": "pearlcli-2.1.0.tar.gz", "has_sig": false, "md5_digest": "a8462c9def249ca81c9ea694fa54259d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 108719, "upload_time": "2020-01-12T17:12:20", "upload_time_iso_8601": "2020-01-12T17:12:20.252145Z", "url": "https://files.pythonhosted.org/packages/ff/c5/7bd1c5d7d6ddab60c3848bb63f056d2a38e0d06b7f688260eedd3de4837b/pearlcli-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "b25d646bebde6c8f3f264e5dd46a75d7", "sha256": "22f183308a224db5d70a570fdca6c267eec1eccc56da2221d1e590424f81aa2c"}, "downloads": -1, "filename": "pearlcli-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b25d646bebde6c8f3f264e5dd46a75d7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 81429, "upload_time": "2020-01-14T00:00:57", "upload_time_iso_8601": "2020-01-14T00:00:57.087435Z", "url": "https://files.pythonhosted.org/packages/d6/70/6fd3345d96f7987c03ba4bac6c5b2c624f8b47143978aa73cbc76d6ea2d4/pearlcli-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da9dbed2a322a3d107150f7167c13e44", "sha256": "c0c5a68b6c13e26024389a1946cc321c43138b45d204c18871bdc7dec1d472bb"}, "downloads": -1, "filename": "pearlcli-2.1.1.tar.gz", "has_sig": false, "md5_digest": "da9dbed2a322a3d107150f7167c13e44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 109372, "upload_time": "2020-01-14T00:00:58", "upload_time_iso_8601": "2020-01-14T00:00:58.554555Z", "url": "https://files.pythonhosted.org/packages/8f/aa/7d438925af3156defef55c58b89977471f4e8b33b61db851f3e08e35e8dc/pearlcli-2.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b25d646bebde6c8f3f264e5dd46a75d7", "sha256": "22f183308a224db5d70a570fdca6c267eec1eccc56da2221d1e590424f81aa2c"}, "downloads": -1, "filename": "pearlcli-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b25d646bebde6c8f3f264e5dd46a75d7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 81429, "upload_time": "2020-01-14T00:00:57", "upload_time_iso_8601": "2020-01-14T00:00:57.087435Z", "url": "https://files.pythonhosted.org/packages/d6/70/6fd3345d96f7987c03ba4bac6c5b2c624f8b47143978aa73cbc76d6ea2d4/pearlcli-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "da9dbed2a322a3d107150f7167c13e44", "sha256": "c0c5a68b6c13e26024389a1946cc321c43138b45d204c18871bdc7dec1d472bb"}, "downloads": -1, "filename": "pearlcli-2.1.1.tar.gz", "has_sig": false, "md5_digest": "da9dbed2a322a3d107150f7167c13e44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 109372, "upload_time": "2020-01-14T00:00:58", "upload_time_iso_8601": "2020-01-14T00:00:58.554555Z", "url": "https://files.pythonhosted.org/packages/8f/aa/7d438925af3156defef55c58b89977471f4e8b33b61db851f3e08e35e8dc/pearlcli-2.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:57 2020"}