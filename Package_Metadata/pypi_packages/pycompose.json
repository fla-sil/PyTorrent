{"info": {"author": "Tim Fischer", "author_email": "tim.fischer98@hotmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "# PyCompose\n_A simple way to inject composition through inheritance syntax._\n\n## Inspirations\nThe following links served as inpiration during the writing of this, and as a in-depth explanation of what actually is composition and its benefits and drawbacks versus inheritance.\n* [Ariel Ortiz's 2019 PyCon talk](https://www.youtube.com/watch?v=YXiaWtc0cgE)\n* [forwardable](https://github.com/5long/forwardable)\n\n## Explanation\nFrom the inspirations one can easily see that an older implementation of compositional forwarding exists ([forwardable](https://github.com/5long/forwardable)) so why would I do this to myself? In short, I didn't like the syntax introduced by it. I find the syntax provided by this implementation a bit easier to understand as I find adding things that related to properties of a class inside the brackets in the class statement the most logical.\n\n## Usage\n```python\nfrom pycompose import Compose\n\n\nclass A:\n    test1 = \"123\"\n\n    def hello(self):\n        print(\"A\")\n\n    def __repr__(self):\n        return \"<A>\"\n\n\nclass B:\n    test2 = \"456\"\n\n    def hello(self):\n        print(\"B\")\n\n    def __repr__(self):\n        return \"<B>\"\n\n\nclass C(\n    Compose(A, \"test1\", (\"hello\", \"helloA\")),\n    Compose(B, \"test2\", (\"hello\", \"helloB\"), name=\"b_object\"),\n):\n    ...\n\n\nc = C()\nprint(c.test1 + c.test2)  # > 123456\nc.helloA()                # > A\nc.helloB()                # > B\nprint(c._a, c.b_object)   # > <A> <B>\n```\n\n## Disclaimer\nPlease do note that this project is but a small abstraction for something that can easily be achieved only a few more lines of hand written code. As such I am aware of the fact that this may seem pretty useless to some people.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tim-fi/pycompose", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pycompose", "package_url": "https://pypi.org/project/pycompose/", "platform": "", "project_url": "https://pypi.org/project/pycompose/", "project_urls": {"Homepage": "https://github.com/tim-fi/pycompose"}, "release_url": "https://pypi.org/project/pycompose/1.1/", "requires_dist": null, "requires_python": "", "summary": "A simple way to inject composition through inheritance syntax.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyCompose</h1>\n<p><em>A simple way to inject composition through inheritance syntax.</em></p>\n<h2>Inspirations</h2>\n<p>The following links served as inpiration during the writing of this, and as a in-depth explanation of what actually is composition and its benefits and drawbacks versus inheritance.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=YXiaWtc0cgE\" rel=\"nofollow\">Ariel Ortiz's 2019 PyCon talk</a></li>\n<li><a href=\"https://github.com/5long/forwardable\" rel=\"nofollow\">forwardable</a></li>\n</ul>\n<h2>Explanation</h2>\n<p>From the inspirations one can easily see that an older implementation of compositional forwarding exists (<a href=\"https://github.com/5long/forwardable\" rel=\"nofollow\">forwardable</a>) so why would I do this to myself? In short, I didn't like the syntax introduced by it. I find the syntax provided by this implementation a bit easier to understand as I find adding things that related to properties of a class inside the brackets in the class statement the most logical.</p>\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pycompose</span> <span class=\"kn\">import</span> <span class=\"n\">Compose</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n    <span class=\"n\">test1</span> <span class=\"o\">=</span> <span class=\"s2\">\"123\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"&lt;A&gt;\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n    <span class=\"n\">test2</span> <span class=\"o\">=</span> <span class=\"s2\">\"456\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"B\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"&lt;B&gt;\"</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span>\n    <span class=\"n\">Compose</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"s2\">\"test1\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"helloA\"</span><span class=\"p\">)),</span>\n    <span class=\"n\">Compose</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"s2\">\"test2\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">\"hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"helloB\"</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"b_object\"</span><span class=\"p\">),</span>\n<span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">C</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">test1</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">test2</span><span class=\"p\">)</span>  <span class=\"c1\"># &gt; 123456</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">helloA</span><span class=\"p\">()</span>                <span class=\"c1\"># &gt; A</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">helloB</span><span class=\"p\">()</span>                <span class=\"c1\"># &gt; B</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_a</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">b_object</span><span class=\"p\">)</span>   <span class=\"c1\"># &gt; &lt;A&gt; &lt;B&gt;</span>\n</pre>\n<h2>Disclaimer</h2>\n<p>Please do note that this project is but a small abstraction for something that can easily be achieved only a few more lines of hand written code. As such I am aware of the fact that this may seem pretty useless to some people.</p>\n\n          </div>"}, "last_serial": 5411125, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "589a1f622ed18e96c23674f9452820a2", "sha256": "fc308db214dccaef6abfb374b728a583b4d1226359c6e2343193c6b48848a874"}, "downloads": -1, "filename": "pycompose-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "589a1f622ed18e96c23674f9452820a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3772, "upload_time": "2019-06-12T07:32:03", "upload_time_iso_8601": "2019-06-12T07:32:03.604747Z", "url": "https://files.pythonhosted.org/packages/1b/51/5402507df531dd4dc990af5d75155464f34cdab2086a52fcc6881e0ed8c4/pycompose-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "502562213774b0191bd641fdb55cec1b", "sha256": "0ded4deafc9eeb589bab33351fcde1a49abe2e02dbb74f21a87061d25756b4f6"}, "downloads": -1, "filename": "pycompose-1.0.tar.gz", "has_sig": false, "md5_digest": "502562213774b0191bd641fdb55cec1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2824, "upload_time": "2019-06-12T07:32:06", "upload_time_iso_8601": "2019-06-12T07:32:06.090426Z", "url": "https://files.pythonhosted.org/packages/4c/77/50ccc3016145b406dbd29bf4969475e372a502d98dfe2f6fa295947557f0/pycompose-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "cd5f04091c0b05f9d204fbf1e4f70268", "sha256": "ed30c044c8fca6918354c0c9e1f2dd5df76bb0c945c1f9bf8f212515b0344ad9"}, "downloads": -1, "filename": "pycompose-1.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "cd5f04091c0b05f9d204fbf1e4f70268", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2634, "upload_time": "2019-06-17T17:53:10", "upload_time_iso_8601": "2019-06-17T17:53:10.471658Z", "url": "https://files.pythonhosted.org/packages/2b/fa/fb7213c198b2fb4b1b7212cf5bea7638ef7373829533d2d3788644599add/pycompose-1.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d35db156f1ddd0f468d1bad55918011", "sha256": "8162facc077c1a19e6c68a8b8d3747a345f6c90ef4a633a43e43a5fc4d9f0b85"}, "downloads": -1, "filename": "pycompose-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0d35db156f1ddd0f468d1bad55918011", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3731, "upload_time": "2019-06-17T17:53:08", "upload_time_iso_8601": "2019-06-17T17:53:08.756833Z", "url": "https://files.pythonhosted.org/packages/b1/3f/577dd994fb3cf67377c64d7805d51824c3b0383a2fd00f6cbb9347cb5285/pycompose-1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd5f04091c0b05f9d204fbf1e4f70268", "sha256": "ed30c044c8fca6918354c0c9e1f2dd5df76bb0c945c1f9bf8f212515b0344ad9"}, "downloads": -1, "filename": "pycompose-1.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "cd5f04091c0b05f9d204fbf1e4f70268", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2634, "upload_time": "2019-06-17T17:53:10", "upload_time_iso_8601": "2019-06-17T17:53:10.471658Z", "url": "https://files.pythonhosted.org/packages/2b/fa/fb7213c198b2fb4b1b7212cf5bea7638ef7373829533d2d3788644599add/pycompose-1.1.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d35db156f1ddd0f468d1bad55918011", "sha256": "8162facc077c1a19e6c68a8b8d3747a345f6c90ef4a633a43e43a5fc4d9f0b85"}, "downloads": -1, "filename": "pycompose-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0d35db156f1ddd0f468d1bad55918011", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3731, "upload_time": "2019-06-17T17:53:08", "upload_time_iso_8601": "2019-06-17T17:53:08.756833Z", "url": "https://files.pythonhosted.org/packages/b1/3f/577dd994fb3cf67377c64d7805d51824c3b0383a2fd00f6cbb9347cb5285/pycompose-1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:08:11 2020"}