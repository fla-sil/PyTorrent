{"info": {"author": "BMT, Jaap van der Velde", "author_email": "jaap.vandervelde@bmtglobal.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# Gohlke Grabber\n\nSimple script to download .whl packages from the pre-built Python packages at https://www.lfd.uci.edu/~gohlke/pythonlibs.\n\nChristoph Gohlke maintains 32-bit and 64-bit binaries for many popular scientific Python packages. These can save you some trouble in cases where getting the package from PyPI (using `pip install package_name`) causes pip to try and build underlying C or C++ code. This can of course be made to work on Windows, but requires the installation and configuration of a C/++ compiler and libraries - both of which come standard with a Linux installation, but not with Windows.\n\nSo, if you have issues installing a package, you trust Gohlke's build, and you want something easy that helps automate the download, grab a copy of [gohlkegrabber.py](https://github.com/jaapvandervelde/gohlkegrabber/blob/master/gohlkegrabber/gohlkegrabber.py) and call it like shown below or in [download.py](https://github.com/jaapvandervelde/gohlkegrabber/blob/master/example/download.py).\n\nOf course, once you have a wheel (a file with the `.whl` extension), you can install it using:\n```cmd\npip install path\\to\\saved\\location\\name.whl\n```\n\n## Installing\n\n```cmd\npip install gohlkegrabber\n```\n\n## Dependencies\n\nDependencies that will be installed :\n```\nlxml>=4.4.2\n```\n\n## Getting Started\n\n### Quick\n\nAfter installing, to get a recent copy of `gdal`:\n```python\nfrom gohlkegrabber import GohlkeGrabber\ngg = GohlkeGrabber()\ngg.retrieve('c:/temp', 'gdal')\n```\n\n### In greater detail\n\nWhen you create a `GohlkeGrabber`, it automatically download the index from the website (or reads a cached copy) and figures out all the packages on offer. Of course, this requires an active connection to the web. \n\nYou can list the available packages:\n```python\nprint(list(gg.packages))\n```\nNote that `.packages` is a `dict` - of course you can just use the dictionary directly and the data therein yourself as well. For example, this is what the start of the `numpy` entry looks like:\n```python\n{\n  'numpy-1.16.5+mkl-cp27-cp27m-win32.whl': {\n    'link': 'https://download.lfd.uci.edu/pythonlibs/t7epjj8p/numpy-1.16.5+mkl-cp27-cp27m-win32.whl',\n    'version': '1.16.5+mkl',\n    'build': None,\n    'python': '2.7',\n    'abi': 'cp27m',\n    'platform': 'win32'\n  },\n  'numpy-1.16.5+mkl-cp27-cp27m-win_amd64.whl': ...\n}\n```\n\nTo download the latest version (default) of `numpy`, for Windows 64-bit (default), and for the most recent version of Python (default) for which it is available, you would call:\n```python\nfn, metadata = gg.retrieve(output_folder, 'numpy')\n```\n\n`fn` will be the filename of the wheel that was downloaded. `metadata` will be a dictionary with the metadata for the downloaded wheel. Both will be `None` if no package could be downloaded that matched the request. \n\nAn example of what the metadata would look like:\n```python\n{\n  'link': 'https://download.lfd.uci.edu/pythonlibs/t7epjj8p/numpy-1.17.4+mkl-cp38-cp38-win_amd64.whl',\n  'version': '1.17.4+mkl',\n  'build': None,\n  'python': '3.8',\n  'abi': 'cp38',\n  'platform': 'win_amd64'\n}\n```\nNote that this is just the appropriate entry from the `.packages` `dict`.\n\nTo get a copy for a specific Python version (e.g. 2.7), Windows version (e.g. 32-bit) and package version (e.g. '<1.17'), you can provide extra parameters to the call in no particular order:\n```python\nfn, metadata = gg.retrieve(output_folder, 'numpy', python='2.7', platform='win32', version='<1.17')\n```\n\nAny file downloaded will be stored in the `output_folder`. \n\nIf the file already exists, it won't be downloaded again, unless you pass `overwrite=True` to the `.retrieve()` call. \n\nIf you create the GohlkeGrabber with a `cached` parameter, it will save the downloaded web page to that location, or load that file instead of downloading it again, if it already exists.\n```python\ngg = GohlkeGrabber(cached='work/cache.html')\n```\n\n## License\n\nThis project is licensed under the MIT license. See [LICENSE.txt](https://github.com/jaapvandervelde/gohlkegrabber/blob/master/LICENSE.txt).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/jaapvandervelde/gohlkegrabber/archive/v0.2.7.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jaapvandervelde/gohlkegrabber", "keywords": "package,download,gohlke,wheel", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "gohlkegrabber", "package_url": "https://pypi.org/project/gohlkegrabber/", "platform": "", "project_url": "https://pypi.org/project/gohlkegrabber/", "project_urls": {"Download": "https://github.com/jaapvandervelde/gohlkegrabber/archive/v0.2.7.tar.gz", "Homepage": "https://github.com/jaapvandervelde/gohlkegrabber"}, "release_url": "https://pypi.org/project/gohlkegrabber/0.2.7/", "requires_dist": null, "requires_python": "", "summary": "Simple script to download .whl packages from www.lfd.uci.edu/~gohlke/pythonlibs.", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Gohlke Grabber</h1>\n<p>Simple script to download .whl packages from the pre-built Python packages at <a href=\"https://www.lfd.uci.edu/%7Egohlke/pythonlibs\" rel=\"nofollow\">https://www.lfd.uci.edu/~gohlke/pythonlibs</a>.</p>\n<p>Christoph Gohlke maintains 32-bit and 64-bit binaries for many popular scientific Python packages. These can save you some trouble in cases where getting the package from PyPI (using <code>pip install package_name</code>) causes pip to try and build underlying C or C++ code. This can of course be made to work on Windows, but requires the installation and configuration of a C/++ compiler and libraries - both of which come standard with a Linux installation, but not with Windows.</p>\n<p>So, if you have issues installing a package, you trust Gohlke's build, and you want something easy that helps automate the download, grab a copy of <a href=\"https://github.com/jaapvandervelde/gohlkegrabber/blob/master/gohlkegrabber/gohlkegrabber.py\" rel=\"nofollow\">gohlkegrabber.py</a> and call it like shown below or in <a href=\"https://github.com/jaapvandervelde/gohlkegrabber/blob/master/example/download.py\" rel=\"nofollow\">download.py</a>.</p>\n<p>Of course, once you have a wheel (a file with the <code>.whl</code> extension), you can install it using:</p>\n<pre>pip install path\\to\\saved\\location\\name.whl\n</pre>\n<h2>Installing</h2>\n<pre>pip install gohlkegrabber\n</pre>\n<h2>Dependencies</h2>\n<p>Dependencies that will be installed :</p>\n<pre><code>lxml&gt;=4.4.2\n</code></pre>\n<h2>Getting Started</h2>\n<h3>Quick</h3>\n<p>After installing, to get a recent copy of <code>gdal</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gohlkegrabber</span> <span class=\"kn\">import</span> <span class=\"n\">GohlkeGrabber</span>\n<span class=\"n\">gg</span> <span class=\"o\">=</span> <span class=\"n\">GohlkeGrabber</span><span class=\"p\">()</span>\n<span class=\"n\">gg</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"s1\">'c:/temp'</span><span class=\"p\">,</span> <span class=\"s1\">'gdal'</span><span class=\"p\">)</span>\n</pre>\n<h3>In greater detail</h3>\n<p>When you create a <code>GohlkeGrabber</code>, it automatically download the index from the website (or reads a cached copy) and figures out all the packages on offer. Of course, this requires an active connection to the web.</p>\n<p>You can list the available packages:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">gg</span><span class=\"o\">.</span><span class=\"n\">packages</span><span class=\"p\">))</span>\n</pre>\n<p>Note that <code>.packages</code> is a <code>dict</code> - of course you can just use the dictionary directly and the data therein yourself as well. For example, this is what the start of the <code>numpy</code> entry looks like:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'numpy-1.16.5+mkl-cp27-cp27m-win32.whl'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'link'</span><span class=\"p\">:</span> <span class=\"s1\">'https://download.lfd.uci.edu/pythonlibs/t7epjj8p/numpy-1.16.5+mkl-cp27-cp27m-win32.whl'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'1.16.5+mkl'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'build'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"s1\">'python'</span><span class=\"p\">:</span> <span class=\"s1\">'2.7'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'abi'</span><span class=\"p\">:</span> <span class=\"s1\">'cp27m'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'platform'</span><span class=\"p\">:</span> <span class=\"s1\">'win32'</span>\n  <span class=\"p\">},</span>\n  <span class=\"s1\">'numpy-1.16.5+mkl-cp27-cp27m-win_amd64.whl'</span><span class=\"p\">:</span> <span class=\"o\">...</span>\n<span class=\"p\">}</span>\n</pre>\n<p>To download the latest version (default) of <code>numpy</code>, for Windows 64-bit (default), and for the most recent version of Python (default) for which it is available, you would call:</p>\n<pre><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">gg</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"n\">output_folder</span><span class=\"p\">,</span> <span class=\"s1\">'numpy'</span><span class=\"p\">)</span>\n</pre>\n<p><code>fn</code> will be the filename of the wheel that was downloaded. <code>metadata</code> will be a dictionary with the metadata for the downloaded wheel. Both will be <code>None</code> if no package could be downloaded that matched the request.</p>\n<p>An example of what the metadata would look like:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s1\">'link'</span><span class=\"p\">:</span> <span class=\"s1\">'https://download.lfd.uci.edu/pythonlibs/t7epjj8p/numpy-1.17.4+mkl-cp38-cp38-win_amd64.whl'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"s1\">'1.17.4+mkl'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'build'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n  <span class=\"s1\">'python'</span><span class=\"p\">:</span> <span class=\"s1\">'3.8'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'abi'</span><span class=\"p\">:</span> <span class=\"s1\">'cp38'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'platform'</span><span class=\"p\">:</span> <span class=\"s1\">'win_amd64'</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Note that this is just the appropriate entry from the <code>.packages</code> <code>dict</code>.</p>\n<p>To get a copy for a specific Python version (e.g. 2.7), Windows version (e.g. 32-bit) and package version (e.g. '&lt;1.17'), you can provide extra parameters to the call in no particular order:</p>\n<pre><span class=\"n\">fn</span><span class=\"p\">,</span> <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">gg</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"n\">output_folder</span><span class=\"p\">,</span> <span class=\"s1\">'numpy'</span><span class=\"p\">,</span> <span class=\"n\">python</span><span class=\"o\">=</span><span class=\"s1\">'2.7'</span><span class=\"p\">,</span> <span class=\"n\">platform</span><span class=\"o\">=</span><span class=\"s1\">'win32'</span><span class=\"p\">,</span> <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s1\">'&lt;1.17'</span><span class=\"p\">)</span>\n</pre>\n<p>Any file downloaded will be stored in the <code>output_folder</code>.</p>\n<p>If the file already exists, it won't be downloaded again, unless you pass <code>overwrite=True</code> to the <code>.retrieve()</code> call.</p>\n<p>If you create the GohlkeGrabber with a <code>cached</code> parameter, it will save the downloaded web page to that location, or load that file instead of downloading it again, if it already exists.</p>\n<pre><span class=\"n\">gg</span> <span class=\"o\">=</span> <span class=\"n\">GohlkeGrabber</span><span class=\"p\">(</span><span class=\"n\">cached</span><span class=\"o\">=</span><span class=\"s1\">'work/cache.html'</span><span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p>This project is licensed under the MIT license. See <a href=\"https://github.com/jaapvandervelde/gohlkegrabber/blob/master/LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a>.</p>\n\n          </div>"}, "last_serial": 6389362, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d81fe531aefea03f1c5055af5ac78b49", "sha256": "760e4ddec907edbfea29fac4148b38056ae3714f81463bb3e9bfc401bc6b96a5"}, "downloads": -1, "filename": "gohlkegrabber-0.1.tar.gz", "has_sig": false, "md5_digest": "d81fe531aefea03f1c5055af5ac78b49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3110, "upload_time": "2019-12-11T02:07:30", "upload_time_iso_8601": "2019-12-11T02:07:30.327472Z", "url": "https://files.pythonhosted.org/packages/06/27/e9bee5cc3fd8eede6f26b6c556bb1c8da2703df83364a6bd77c56507d95c/gohlkegrabber-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "0ed25131f4bd18126d3cff1268b70833", "sha256": "6ee34451691d4691840275bfea437446e8cd3b1176698c88c87f3d827c10104f"}, "downloads": -1, "filename": "gohlkegrabber-0.2.tar.gz", "has_sig": false, "md5_digest": "0ed25131f4bd18126d3cff1268b70833", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3091, "upload_time": "2019-12-11T02:12:07", "upload_time_iso_8601": "2019-12-11T02:12:07.777560Z", "url": "https://files.pythonhosted.org/packages/4b/98/20d8db3186e70122a708d09563c9aa83f83e0b1988c4e3dfe310a7624ca3/gohlkegrabber-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d5ea26d2da17ae025b67d8e505c28798", "sha256": "70eecf77bbd9a61029469c923053a84df5024273b317411746674fcfb503b791"}, "downloads": -1, "filename": "gohlkegrabber-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d5ea26d2da17ae025b67d8e505c28798", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3100, "upload_time": "2019-12-11T02:21:29", "upload_time_iso_8601": "2019-12-11T02:21:29.685996Z", "url": "https://files.pythonhosted.org/packages/1d/72/da18a27ef94107096ba33295a570da3dd557ad4a78ac6be560317b5b8f17/gohlkegrabber-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "e80aecfeba5b15f9e4625de8a13010ec", "sha256": "b984a8eed964c0a4d40562ec0c1bbe09ef33be88ca0a60d886df52a58e2a88b5"}, "downloads": -1, "filename": "gohlkegrabber-0.2.2.tar.gz", "has_sig": false, "md5_digest": "e80aecfeba5b15f9e4625de8a13010ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5716, "upload_time": "2019-12-19T05:10:51", "upload_time_iso_8601": "2019-12-19T05:10:51.781470Z", "url": "https://files.pythonhosted.org/packages/f4/21/3b1bcd14f473ec0d60385b6eef855d90cc8782e1a2c594aa157d69af6c94/gohlkegrabber-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "2bb1f053202c9b034a4d94b84fa2dd91", "sha256": "7960da4b55dd4404e8c9459dd0962b3222a8ee77a672a9942c8cdbbf0c85f05e"}, "downloads": -1, "filename": "gohlkegrabber-0.2.3.tar.gz", "has_sig": false, "md5_digest": "2bb1f053202c9b034a4d94b84fa2dd91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5908, "upload_time": "2019-12-20T01:27:07", "upload_time_iso_8601": "2019-12-20T01:27:07.216995Z", "url": "https://files.pythonhosted.org/packages/42/81/b7cc8419bb0dd84f95384da0d5bfd4953bc74cd2563c3a7187be572fc664/gohlkegrabber-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "9def74a001fb56b039cf9e8535547609", "sha256": "0df00dd82c1b952e1366838c696690674d76ae311cf7dd1505e7acb6812d5ab3"}, "downloads": -1, "filename": "gohlkegrabber-0.2.4.tar.gz", "has_sig": false, "md5_digest": "9def74a001fb56b039cf9e8535547609", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5913, "upload_time": "2019-12-20T01:33:12", "upload_time_iso_8601": "2019-12-20T01:33:12.791871Z", "url": "https://files.pythonhosted.org/packages/fc/a4/35056da2597d71567c46aacf4d8c063f5c1171807a9dd257d6974f8a5bf5/gohlkegrabber-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "5cdc40d86f9309c693cac43750533e55", "sha256": "20b173999904b8126929210a54186a879c82295ffb89f83296dacd88d52ae1c7"}, "downloads": -1, "filename": "gohlkegrabber-0.2.5.tar.gz", "has_sig": false, "md5_digest": "5cdc40d86f9309c693cac43750533e55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5902, "upload_time": "2019-12-20T01:41:26", "upload_time_iso_8601": "2019-12-20T01:41:26.843716Z", "url": "https://files.pythonhosted.org/packages/d4/24/cd0ef162dd276c654a5ea8f1ef22cc5ae183699de5144951d34c3393fb21/gohlkegrabber-0.2.5.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "7075c3c9ffc786485b50b89157cd1073", "sha256": "beff996b8b92b33272044c1b0eacd7f48cb44bf062bd00ed09d32e6682b0241a"}, "downloads": -1, "filename": "gohlkegrabber-0.2.7.tar.gz", "has_sig": false, "md5_digest": "7075c3c9ffc786485b50b89157cd1073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6059, "upload_time": "2020-01-03T04:10:22", "upload_time_iso_8601": "2020-01-03T04:10:22.655900Z", "url": "https://files.pythonhosted.org/packages/dd/87/7be2b38dfd6d8efff170730012553505043ed2dc9a9f785fcdf1c1069b8e/gohlkegrabber-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7075c3c9ffc786485b50b89157cd1073", "sha256": "beff996b8b92b33272044c1b0eacd7f48cb44bf062bd00ed09d32e6682b0241a"}, "downloads": -1, "filename": "gohlkegrabber-0.2.7.tar.gz", "has_sig": false, "md5_digest": "7075c3c9ffc786485b50b89157cd1073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6059, "upload_time": "2020-01-03T04:10:22", "upload_time_iso_8601": "2020-01-03T04:10:22.655900Z", "url": "https://files.pythonhosted.org/packages/dd/87/7be2b38dfd6d8efff170730012553505043ed2dc9a9f785fcdf1c1069b8e/gohlkegrabber-0.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:57 2020"}