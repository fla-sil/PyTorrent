{"info": {"author": "Felipe Aguirre Martinez", "author_email": "felipeam86@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "imgdl\n=====\n\nPython package for downloading a collection of images from a list of\nurls. It comes with the following features:\n\n-  Downloads are multithreaded using ``concurrent.futures``.\n-  Relies on a persistent cache. Already downloaded images are not\n   downloaded again, unless you force ``imgdl`` to do so.\n-  Can hide requests behind proxies\n-  It can be used as a command line utility or as a python library.\n-  Normalizes images to JPG format + RGB mode after download.\n-  Generates thumbnails of varying sizes automatically.\n-  Can space downloads with a random timeout drawn from an uniform\n   distribution.\n\nInstallation\n------------\n\n.. code:: bash\n\n    pip install imgdl\n\nOr, from the root project directory:\n\n.. code:: bash\n\n    pip install .\n\nUsage\n-----\n\nHere is a simple example using the default configurations:\n\n.. code:: python\n\n    from imgdl import download\n\n    urls = [\n        'https://upload.wikimedia.org/wikipedia/commons/9/92/Moh_%283%29.jpg',\n        'https://upload.wikimedia.org/wikipedia/commons/8/8b/Moh_%284%29.jpg',\n        'https://upload.wikimedia.org/wikipedia/commons/c/cd/Rostige_T%C3%BCr_P4RM1492.jpg'\n    ]\n\n    paths = download(urls, store_path='~/.datasets/images', n_workers=50)\n\n``100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:08<00:00,  2.68s/it]``\n\nImages will be downloaded to ``~/.datasets/images`` using 50 threads.\nThe function returns the list of paths to each image. Paths are\nconstructed as ``{store_data}/{SHA1-hash(url).jpg}``. If for any reason a\ndownload fails, ``imgdl`` returns a ``None`` as path.\n\nNotice that if you invoke ``download`` again with the same urls, it\nwill not download them again as it will check first that they are\nalready downloaded.\n\n.. code:: python\n\n    paths = download(urls, store_path='~/.datasets/images', n_workers=50)\n\n``100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00<00:00, 24576.00it/s]``\n\nDownload was instantaneous! and ``imgdl`` is clever enough to return\nthe image paths.\n\nHere is the complete list of parameters taken by ``download``:\n\n-  ``iterator``: The only mandatory parameter. Usually a list of urls,\n   but can be any kind of iterator.\n-  ``store_path``: Root path where images should be stored\n-  ``n_workers``: Number of simultaneous threads to use\n-  ``timeout``: Timeout that the url request should tolerate\n-  ``thumbs``: If True, create thumbnails of sizes according to\n   thumbs_size\n-  ``thumbs_size``: Dictionary of the kind {name: (width, height)}\n   indicating the thumbnail sizes to be created.\n-  ``min_wait``: Minimum wait time between image downloads\n-  ``max_wait``: Maximum wait time between image downloads\n-  ``proxies``: Proxy or list of proxies to use for the requests\n-  ``headers``: headers to be given to ``requests``\n-  ``user_agent``: User agent to be used for the requests\n-  ``notebook``: If True, use the notebook version of tqdm progress bar\n-  ``debug`` If True, ``imgdl`` logs urls that could not be downloaded\n-  ``force``: ``download`` checks first if the image already exists on\n   ``store_path`` in order to avoid double downloads. If you want to\n   force downloads, set this to True.\n\nMost of these parameters can also be set on a ``config.yaml`` file found\non the directory where the Python process was launched. See\n`config.yaml.example`_\n\nCommand Line Interface\n----------------------\n\nIt can also be used as a command line utility:\n\n.. code:: bash\n\n    $ imgdl --help\n    usage: imgdl [-h] [-o STORE_PATH] [--thumbs THUMBS] [--n_workers N_WORKERS]\n                 [--timeout TIMEOUT] [--min_wait MIN_WAIT] [--max_wait MAX_WAIT]\n                 [--proxy PROXY] [-u USER_AGENT] [-f] [--notebook] [-d]\n                 urls\n\n    Bulk image downloader from a list of urls\n\n    positional arguments:\n      urls                  Text file with the list of urls to be downloaded\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -o STORE_PATH, --store_path STORE_PATH\n                            Root path where images should be stored (default:\n                            ~/.datasets/imgdl)\n      --thumbs THUMBS       Thumbnail size to be created. Can be specified as many\n                            times as thumbs sizes you want (default: None)\n      --n_workers N_WORKERS\n                            Number of simultaneous threads to use (default: 50)\n      --timeout TIMEOUT     Timeout to be given to the url request (default: 5.0)\n      --min_wait MIN_WAIT   Minimum wait time between image downloads (default:\n                            0.0)\n      --max_wait MAX_WAIT   Maximum wait time between image downloads (default:\n                            0.0)\n      --proxy PROXY         Proxy or list of proxies to use for the requests\n                            (default: None)\n      -u USER_AGENT, --user_agent USER_AGENT\n                            User agent to be used for the requests (default:\n                            Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0)\n                            Gecko/20100101 Firefox/55.0)\n      -f, --force           Force the download even if the files already exists\n                            (default: False)\n      --notebook            Use the notebook version of tqdm (default: False)\n      -d, --debug           Activate debug mode (default: False)\n\n\nDownload images from google\n===========================\n\nThis is an example of how we can use ``imgdl`` to download images from a google image search.\nI currently use this to quickly build up image datasets. I took inspiration from `this`_ blog\npost by `pyimagesearch`_.\n\nRequirements\n------------\n\nInstall imgdl with the ``[google]`` extra requirements:\n\n.. code:: bash\n\n    pip install imgdl[google]\n\n\nDownload the webdriver for Chrome `here`_  and make sure it\u2019s in your PATH, e. g., place it in /usr/bin or /usr/local/bin.\n\n.. code:: bash\n\n    sudo cp chromedriver /usr/local/bin/\n\nClone this repository, or simply download the ``google.py`` script.\n\nUsage\n-----\n\n\nYou are ready to download images from a google images search. Here is an example of usage:\n\n.. code:: bash\n\n    $ python google.py \"paris by night\" -n 600 --interactive\n    Querying google images for 'paris by night'\n    Scrolling down five times\n    600 images found.\n    Downloading to /Users/aguirre/Projets/imagedownloader/examples/images\n    100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 600/600 [01:15<00:00,  7.91it/s]\n    2018-03-04 23:21:52,616 - imgdl.downloader - INFO - 0 images failed to download\n\nThe first argument is the query to be sent to google. With ``-n 600`` you are asking for at least 600 images.\nBy default, a google image query page has only 100 images and requires you to scroll down if you want more.\nWhat the script is doing is using `selenium`_ to simulate a browsing session and scroll down on google search.\nWith the ``--interactive`` flag, chrome will open and you will be able to see how it scrolls down in order to\nget more images. Here is the full list of the command line options:\n\n.. code:: bash\n\n    $ python google.py --help\n    usage: google.py [-h] [-n N_IMAGES] [--interactive] [-o STORE_PATH]\n                     [--thumbs THUMBS] [--n_workers N_WORKERS] [--timeout TIMEOUT]\n                     [--min_wait MIN_WAIT] [--max_wait MAX_WAIT] [--proxy PROXY]\n                     [-u USER_AGENT] [-f] [--notebook] [-d]\n                     query\n\n    Download images from a google images query\n\n    positional arguments:\n      query                 Query string to be executed on google images\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -n N_IMAGES, --n_images N_IMAGES\n                            Number of expected images to download (default: 100)\n      --interactive         Open up chrome interactively to see the search results\n                            and scrolling action. (default: False)\n      -o STORE_PATH, --store_path STORE_PATH\n                            Root path where images should be stored (default:\n                            images)\n      --thumbs THUMBS       Thumbnail size to be created. Can be specified as many\n                            times as thumbs sizes you want (default: None)\n      --n_workers N_WORKERS\n                            Number of simultaneous threads to use (default: 40)\n      --timeout TIMEOUT     Timeout to be given to the url request (default: 5.0)\n      --min_wait MIN_WAIT   Minimum wait time between image downloads (default:\n                            0.0)\n      --max_wait MAX_WAIT   Maximum wait time between image downloads (default:\n                            0.0)\n      --proxy PROXY         Proxy or list of proxies to use for the requests\n                            (default: None)\n      -u USER_AGENT, --user_agent USER_AGENT\n                            User agent to be used for the requests (default:\n                            Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:55.0)\n                            Gecko/20100101 Firefox/55.0)\n      -f, --force           Force the download even if the files already exists\n                            (default: False)\n      --notebook            Use the notebook version of tqdm (default: False)\n      -d, --debug           Activate debug mode (default: False)\n\n\nAcknowledgements\n----------------\n\nImages used for tests are from the `wikimedia commons`_\n\n.. _config.yaml.example: config.yaml.example\n.. _wikimedia commons: https://commons.wikimedia.org\n.. _here: https://sites.google.com/a/chromium.org/chromedriver/downloads\n.. _this: https://www.pyimagesearch.com/2017/12/04/how-to-create-a-deep-learning-dataset-using-google-images/\n.. _pyimagesearch: https://www.pyimagesearch.com/\n.. _selenium: http://selenium-python.readthedocs.io/\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/felipeam86/imagedownloader", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "imgdl", "package_url": "https://pypi.org/project/imgdl/", "platform": "", "project_url": "https://pypi.org/project/imgdl/", "project_urls": {"Homepage": "https://github.com/felipeam86/imagedownloader"}, "release_url": "https://pypi.org/project/imgdl/1.1.0/", "requires_dist": ["Pillow (>=4.2.1)", "requests (>=2.14.2)", "tqdm (>=4.15.0)", "PyYAML", "attrs", "python-json-logger", "jupyter; extra == 'docs'", "ipython; extra == 'docs'", "pandas; extra == 'docs'", "invoke; extra == 'docs'", "selenium; extra == 'google'", "beautifulsoup4; extra == 'google'", "lxml; extra == 'google'", "pytest; extra == 'tests'", "pytest-pep8; extra == 'tests'", "pep8; extra == 'tests'", "autopep8; extra == 'tests'", "pytest-xdist; extra == 'tests'", "pytest-cov; extra == 'tests'"], "requires_python": "~=3.6", "summary": "Bulk image downloader from a list of urls", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"imgdl\">\n<h2>imgdl</h2>\n<p>Python package for downloading a collection of images from a list of\nurls. It comes with the following features:</p>\n<ul>\n<li>Downloads are multithreaded using <tt>concurrent.futures</tt>.</li>\n<li>Relies on a persistent cache. Already downloaded images are not\ndownloaded again, unless you force <tt>imgdl</tt> to do so.</li>\n<li>Can hide requests behind proxies</li>\n<li>It can be used as a command line utility or as a python library.</li>\n<li>Normalizes images to JPG format + RGB mode after download.</li>\n<li>Generates thumbnails of varying sizes automatically.</li>\n<li>Can space downloads with a random timeout drawn from an uniform\ndistribution.</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install imgdl\n</pre>\n<p>Or, from the root project directory:</p>\n<pre>pip install .\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Here is a simple example using the default configurations:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">imgdl</span> <span class=\"kn\">import</span> <span class=\"n\">download</span>\n\n<span class=\"n\">urls</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'https://upload.wikimedia.org/wikipedia/commons/9/92/Moh_</span><span class=\"si\">%283%</span><span class=\"s1\">29.jpg'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'https://upload.wikimedia.org/wikipedia/commons/8/8b/Moh_</span><span class=\"si\">%284%</span><span class=\"s1\">29.jpg'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'https://upload.wikimedia.org/wikipedia/commons/c/cd/Rostige_T%C3%BCr_P4RM1492.jpg'</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">store_path</span><span class=\"o\">=</span><span class=\"s1\">'~/.datasets/images'</span><span class=\"p\">,</span> <span class=\"n\">n_workers</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre>\n<p><tt><span class=\"pre\">100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588|</span> 3/3 [00:08&lt;00:00,\u00a0 2.68s/it]</tt></p>\n<p>Images will be downloaded to <tt><span class=\"pre\">~/.datasets/images</span></tt> using 50 threads.\nThe function returns the list of paths to each image. Paths are\nconstructed as <tt><span class=\"pre\">{store_data}/{SHA1-hash(url).jpg}</span></tt>. If for any reason a\ndownload fails, <tt>imgdl</tt> returns a <tt>None</tt> as path.</p>\n<p>Notice that if you invoke <tt>download</tt> again with the same urls, it\nwill not download them again as it will check first that they are\nalready downloaded.</p>\n<pre><span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"n\">store_path</span><span class=\"o\">=</span><span class=\"s1\">'~/.datasets/images'</span><span class=\"p\">,</span> <span class=\"n\">n_workers</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n</pre>\n<p><tt><span class=\"pre\">100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588|</span> 3/3 [00:00&lt;00:00, 24576.00it/s]</tt></p>\n<p>Download was instantaneous! and <tt>imgdl</tt> is clever enough to return\nthe image paths.</p>\n<p>Here is the complete list of parameters taken by <tt>download</tt>:</p>\n<ul>\n<li><tt>iterator</tt>: The only mandatory parameter. Usually a list of urls,\nbut can be any kind of iterator.</li>\n<li><tt>store_path</tt>: Root path where images should be stored</li>\n<li><tt>n_workers</tt>: Number of simultaneous threads to use</li>\n<li><tt>timeout</tt>: Timeout that the url request should tolerate</li>\n<li><tt>thumbs</tt>: If True, create thumbnails of sizes according to\nthumbs_size</li>\n<li><tt>thumbs_size</tt>: Dictionary of the kind {name: (width, height)}\nindicating the thumbnail sizes to be created.</li>\n<li><tt>min_wait</tt>: Minimum wait time between image downloads</li>\n<li><tt>max_wait</tt>: Maximum wait time between image downloads</li>\n<li><tt>proxies</tt>: Proxy or list of proxies to use for the requests</li>\n<li><tt>headers</tt>: headers to be given to <tt>requests</tt></li>\n<li><tt>user_agent</tt>: User agent to be used for the requests</li>\n<li><tt>notebook</tt>: If True, use the notebook version of tqdm progress bar</li>\n<li><tt>debug</tt> If True, <tt>imgdl</tt> logs urls that could not be downloaded</li>\n<li><tt>force</tt>: <tt>download</tt> checks first if the image already exists on\n<tt>store_path</tt> in order to avoid double downloads. If you want to\nforce downloads, set this to True.</li>\n</ul>\n<p>Most of these parameters can also be set on a <tt>config.yaml</tt> file found\non the directory where the Python process was launched. See\n<a href=\"config.yaml.example\" rel=\"nofollow\">config.yaml.example</a></p>\n</div>\n<div id=\"command-line-interface\">\n<h3>Command Line Interface</h3>\n<p>It can also be used as a command line utility:</p>\n<pre>$ imgdl --help\nusage: imgdl <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-o STORE_PATH<span class=\"o\">]</span> <span class=\"o\">[</span>--thumbs THUMBS<span class=\"o\">]</span> <span class=\"o\">[</span>--n_workers N_WORKERS<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--timeout TIMEOUT<span class=\"o\">]</span> <span class=\"o\">[</span>--min_wait MIN_WAIT<span class=\"o\">]</span> <span class=\"o\">[</span>--max_wait MAX_WAIT<span class=\"o\">]</span>\n             <span class=\"o\">[</span>--proxy PROXY<span class=\"o\">]</span> <span class=\"o\">[</span>-u USER_AGENT<span class=\"o\">]</span> <span class=\"o\">[</span>-f<span class=\"o\">]</span> <span class=\"o\">[</span>--notebook<span class=\"o\">]</span> <span class=\"o\">[</span>-d<span class=\"o\">]</span>\n             urls\n\nBulk image downloader from a list of urls\n\npositional arguments:\n  urls                  Text file with the list of urls to be downloaded\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -o STORE_PATH, --store_path STORE_PATH\n                        Root path where images should be stored <span class=\"o\">(</span>default:\n                        ~/.datasets/imgdl<span class=\"o\">)</span>\n  --thumbs THUMBS       Thumbnail size to be created. Can be specified as many\n                        <span class=\"nb\">times</span> as thumbs sizes you want <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --n_workers N_WORKERS\n                        Number of simultaneous threads to use <span class=\"o\">(</span>default: <span class=\"m\">50</span><span class=\"o\">)</span>\n  --timeout TIMEOUT     Timeout to be given to the url request <span class=\"o\">(</span>default: <span class=\"m\">5</span>.0<span class=\"o\">)</span>\n  --min_wait MIN_WAIT   Minimum <span class=\"nb\">wait</span> <span class=\"nb\">time</span> between image downloads <span class=\"o\">(</span>default:\n                        <span class=\"m\">0</span>.0<span class=\"o\">)</span>\n  --max_wait MAX_WAIT   Maximum <span class=\"nb\">wait</span> <span class=\"nb\">time</span> between image downloads <span class=\"o\">(</span>default:\n                        <span class=\"m\">0</span>.0<span class=\"o\">)</span>\n  --proxy PROXY         Proxy or list of proxies to use <span class=\"k\">for</span> the requests\n                        <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  -u USER_AGENT, --user_agent USER_AGENT\n                        User agent to be used <span class=\"k\">for</span> the requests <span class=\"o\">(</span>default:\n                        Mozilla/5.0 <span class=\"o\">(</span>X11<span class=\"p\">;</span> Ubuntu<span class=\"p\">;</span> Linux x86_64<span class=\"p\">;</span> rv:55.0<span class=\"o\">)</span>\n                        Gecko/20100101 Firefox/55.0<span class=\"o\">)</span>\n  -f, --force           Force the download even <span class=\"k\">if</span> the files already exists\n                        <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n  --notebook            Use the notebook version of tqdm <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n  -d, --debug           Activate debug mode <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"download-images-from-google\">\n<h2>Download images from google</h2>\n<p>This is an example of how we can use <tt>imgdl</tt> to download images from a google image search.\nI currently use this to quickly build up image datasets. I took inspiration from <a href=\"https://www.pyimagesearch.com/2017/12/04/how-to-create-a-deep-learning-dataset-using-google-images/\" rel=\"nofollow\">this</a> blog\npost by <a href=\"https://www.pyimagesearch.com/\" rel=\"nofollow\">pyimagesearch</a>.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>Install imgdl with the <tt>[google]</tt> extra requirements:</p>\n<pre>pip install imgdl<span class=\"o\">[</span>google<span class=\"o\">]</span>\n</pre>\n<p>Download the webdriver for Chrome <a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads\" rel=\"nofollow\">here</a>  and make sure it\u2019s in your PATH, e. g., place it in /usr/bin or /usr/local/bin.</p>\n<pre>sudo cp chromedriver /usr/local/bin/\n</pre>\n<p>Clone this repository, or simply download the <tt>google.py</tt> script.</p>\n</div>\n<div id=\"id1\">\n<h3>Usage</h3>\n<p>You are ready to download images from a google images search. Here is an example of usage:</p>\n<pre>$ python google.py <span class=\"s2\">\"paris by night\"</span> -n <span class=\"m\">600</span> --interactive\nQuerying google images <span class=\"k\">for</span> <span class=\"s1\">'paris by night'</span>\nScrolling down five <span class=\"nb\">times</span>\n<span class=\"m\">600</span> images found.\nDownloading to /Users/aguirre/Projets/imagedownloader/examples/images\n<span class=\"m\">100</span>%<span class=\"p\">|</span>\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588<span class=\"p\">|</span> <span class=\"m\">600</span>/600 <span class=\"o\">[</span><span class=\"m\">01</span>:15&lt;<span class=\"m\">00</span>:00,  <span class=\"m\">7</span>.91it/s<span class=\"o\">]</span>\n<span class=\"m\">2018</span>-03-04 <span class=\"m\">23</span>:21:52,616 - imgdl.downloader - INFO - <span class=\"m\">0</span> images failed to download\n</pre>\n<p>The first argument is the query to be sent to google. With <tt><span class=\"pre\">-n</span> 600</tt> you are asking for at least 600 images.\nBy default, a google image query page has only 100 images and requires you to scroll down if you want more.\nWhat the script is doing is using <a href=\"http://selenium-python.readthedocs.io/\" rel=\"nofollow\">selenium</a> to simulate a browsing session and scroll down on google search.\nWith the <tt><span class=\"pre\">--interactive</span></tt> flag, chrome will open and you will be able to see how it scrolls down in order to\nget more images. Here is the full list of the command line options:</p>\n<pre>$ python google.py --help\nusage: google.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-n N_IMAGES<span class=\"o\">]</span> <span class=\"o\">[</span>--interactive<span class=\"o\">]</span> <span class=\"o\">[</span>-o STORE_PATH<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--thumbs THUMBS<span class=\"o\">]</span> <span class=\"o\">[</span>--n_workers N_WORKERS<span class=\"o\">]</span> <span class=\"o\">[</span>--timeout TIMEOUT<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>--min_wait MIN_WAIT<span class=\"o\">]</span> <span class=\"o\">[</span>--max_wait MAX_WAIT<span class=\"o\">]</span> <span class=\"o\">[</span>--proxy PROXY<span class=\"o\">]</span>\n                 <span class=\"o\">[</span>-u USER_AGENT<span class=\"o\">]</span> <span class=\"o\">[</span>-f<span class=\"o\">]</span> <span class=\"o\">[</span>--notebook<span class=\"o\">]</span> <span class=\"o\">[</span>-d<span class=\"o\">]</span>\n                 query\n\nDownload images from a google images query\n\npositional arguments:\n  query                 Query string to be executed on google images\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -n N_IMAGES, --n_images N_IMAGES\n                        Number of expected images to download <span class=\"o\">(</span>default: <span class=\"m\">100</span><span class=\"o\">)</span>\n  --interactive         Open up chrome interactively to see the search results\n                        and scrolling action. <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n  -o STORE_PATH, --store_path STORE_PATH\n                        Root path where images should be stored <span class=\"o\">(</span>default:\n                        images<span class=\"o\">)</span>\n  --thumbs THUMBS       Thumbnail size to be created. Can be specified as many\n                        <span class=\"nb\">times</span> as thumbs sizes you want <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  --n_workers N_WORKERS\n                        Number of simultaneous threads to use <span class=\"o\">(</span>default: <span class=\"m\">40</span><span class=\"o\">)</span>\n  --timeout TIMEOUT     Timeout to be given to the url request <span class=\"o\">(</span>default: <span class=\"m\">5</span>.0<span class=\"o\">)</span>\n  --min_wait MIN_WAIT   Minimum <span class=\"nb\">wait</span> <span class=\"nb\">time</span> between image downloads <span class=\"o\">(</span>default:\n                        <span class=\"m\">0</span>.0<span class=\"o\">)</span>\n  --max_wait MAX_WAIT   Maximum <span class=\"nb\">wait</span> <span class=\"nb\">time</span> between image downloads <span class=\"o\">(</span>default:\n                        <span class=\"m\">0</span>.0<span class=\"o\">)</span>\n  --proxy PROXY         Proxy or list of proxies to use <span class=\"k\">for</span> the requests\n                        <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n  -u USER_AGENT, --user_agent USER_AGENT\n                        User agent to be used <span class=\"k\">for</span> the requests <span class=\"o\">(</span>default:\n                        Mozilla/5.0 <span class=\"o\">(</span>X11<span class=\"p\">;</span> Ubuntu<span class=\"p\">;</span> Linux x86_64<span class=\"p\">;</span> rv:55.0<span class=\"o\">)</span>\n                        Gecko/20100101 Firefox/55.0<span class=\"o\">)</span>\n  -f, --force           Force the download even <span class=\"k\">if</span> the files already exists\n                        <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n  --notebook            Use the notebook version of tqdm <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n  -d, --debug           Activate debug mode <span class=\"o\">(</span>default: False<span class=\"o\">)</span>\n</pre>\n</div>\n<div id=\"acknowledgements\">\n<h3>Acknowledgements</h3>\n<p>Images used for tests are from the <a href=\"https://commons.wikimedia.org\" rel=\"nofollow\">wikimedia commons</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3777533, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5094404930ef60e7b34b89ac78c42842", "sha256": "d1a9334c4c841b5bf2d2fd378a56c0f4b96c093e38660971d157bdecb3653ff2"}, "downloads": -1, "filename": "imgdl-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5094404930ef60e7b34b89ac78c42842", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 15203, "upload_time": "2018-04-10T23:06:48", "upload_time_iso_8601": "2018-04-10T23:06:48.132720Z", "url": "https://files.pythonhosted.org/packages/ee/27/6964bb0240a8f33cae32918338b718cf356e4d104d63ee54a699fa61a57a/imgdl-1.0.0-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0504695be675073d9534b6562a902a68", "sha256": "b263304d89eac5900ff0913a004b8c0a344c275a758a5a6940a7ebc64ffe477e"}, "downloads": -1, "filename": "imgdl-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0504695be675073d9534b6562a902a68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 14962, "upload_time": "2018-04-18T15:11:21", "upload_time_iso_8601": "2018-04-18T15:11:21.120355Z", "url": "https://files.pythonhosted.org/packages/96/db/f513563d9c9578bfbb325456c57d055f0c327a18ef7804d33b8da9f91deb/imgdl-1.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0504695be675073d9534b6562a902a68", "sha256": "b263304d89eac5900ff0913a004b8c0a344c275a758a5a6940a7ebc64ffe477e"}, "downloads": -1, "filename": "imgdl-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0504695be675073d9534b6562a902a68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.6", "size": 14962, "upload_time": "2018-04-18T15:11:21", "upload_time_iso_8601": "2018-04-18T15:11:21.120355Z", "url": "https://files.pythonhosted.org/packages/96/db/f513563d9c9578bfbb325456c57d055f0c327a18ef7804d33b8da9f91deb/imgdl-1.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:56:43 2020"}