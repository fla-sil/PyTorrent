{"info": {"author": "Franz Steinmetz", "author_email": "franz.steinmetz@dlr.de", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Framework :: Flask", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP", "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Object Brokering", "Topic :: Utilities"], "description": "The ``jsonconversion`` package\n==============================\n\nThis python module helps converting arbitrary Python objects into JSON strings and back. It extends the basic features\nof the ``JSONEncoder`` and ``JSONDecoder`` classes provided by the native ``json`` package. For this purpose,\n``jsonconversion`` ships with these four classes:\n\nThe ``JSONObject`` class\n------------------------\n\nYour serializable classes should inherit from this class. Hereby, they must implement the methods ``from_dict`` and\n``to_dict``. The example further down describes how to do so.\n\nThe ``JSONExtendedEncoder`` class\n---------------------------------\n\nThis is a class used internally by ``JSONObjectEncoder``. However, it can also be used directly, if you do not need the\nfeatures of ``JSONObjectEncoder`` but want to implement your own encoders.\n\nThe class is especially helpful, if you want custom handling of builtins (``int``, ``dict``, ...) or classes deriving\nfrom builtins. This would not be possible if directly inheriting from ``JSONEncoder``. To do so, override the\n``isinstance`` method and return ``False`` for all types you want to handle in the ``default`` method.\n\nIf you look at the source code of ``JSONObjectEncoder``, you will see how this can be used.\n\nThe ``JSONObjectEncoder`` class\n-------------------------------\n\nEncodes Python objects into JSON strings. Supported objects are:\n\n-  Python builtins: ``int``, ``float``, ``str``, ``list``, ``set``, ``dict``, ``tuple``\n-  ``type`` objects: ``isinstance(object, type)``\n-  All classes deriving from ``JSONObject``\n\nThose objects can of course also be nested!\n\nThe ``JSONObjectDecoder`` class\n-------------------------------\n\nDecodes JSON strings converted using the ``JSONObjectEncoder`` back to Python objects.\n\nThe class adds a custom keyword argument to the ``load[s]`` method: ``substitute_modules``. This parameter takes a\n``dict`` in the form ``{\"old.module.MyClass\": \"new.module.MyClass\"}``. It can be used if you have serialized\n``JSONObject``\\s who's module path has changed.\n\nUsage\n=====\n\nUsing ``jsonconversion`` is easy. You can find further code examples in the ``test`` folder.\n\nEncoding and Decoding\n---------------------\n\nIn order to encode Python objects with JSON conversion and to later decode them, you have to import the Python module\n``json``. The module provides the methods ``dump``/``dumps`` for encoding and ``load``/``loads`` for decoding:\n\n.. code:: python\n\n    import json\n\n    from jsonconversion.decoder import JSONObjectDecoder\n    from jsonconversion.encoder import JSONObjectEncoder\n\n    var = (1, 2, 3)  # variable to be serialized\n\n    # \"dumps\" converts the variable to a string, \"dump\" directly writes it to a file\n    str_var = json.dumps(var, cls=JSONObjectEncoder)\n    # Equivalently, \"loads\" converts the object back from a string. \"load\" from a file\n    var_2 = json.loads(str_var, cls=JSONObjectDecoder)\n    assert var == var_2\n\nDeriving from JSONObject\n------------------------\n\nIn order to serialize arbitrary, self-written classes, they must derive from ``JSONObject`` and implement the two\nmethods ``from_dict`` and ``to_dict``:\n\n.. code:: python\n\n    class MyClass(JSONObject):\n\n        def __init__(self, a, b, c):\n            self.a = a\n            self.b = b\n            self.c = c\n\n        @classmethod\n        def from_dict(cls, dict_):\n            return cls(dict_['a'], dict_['b'], dict_['c'])\n\n        def to_dict(self):\n            return {'a': self.a, 'b': self.b, 'c': self.c}\n\n        def __eq__(self, other):\n            return self.a == other.a and self.b == other.b and self.c == other.c\n\nGeneral notes\n-------------\n\n-  ``jsonconversion`` stores the class path in the JSON string when serializing a JSONObject. When decoding the object\n   back, it automatically imports the correct module. You only have to ensure that the module is within your\n   ``PYTHONPATH``.\n\n-  The ``to_dict`` and ``from_dict`` methods only need to specify the elements of a class, needed to recreate the\n   object. Derived attributes of a class (like ``age`` from ``year_born``) do not need to be serialized.\n\n-  If you compare the original object with the object obtained from serialization and deserialization using ``is``, they\n   will differ, as these are objects at different locations in memory. Also a comparison of JSONObject with ``==`` will\n   fail, if you do not tell Python how to compare two objects. This is why ``MyClass`` overrides the ``__eq__`` method.", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/DLR-RM/python-jsonconversion/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DLR-RM/python-jsonconversion", "keywords": "json,conversion,serialization", "license": "BSD", "maintainer": "Franz Steinmetz", "maintainer_email": "franz.steinmetz@dlr.de", "name": "jsonconversion", "package_url": "https://pypi.org/project/jsonconversion/", "platform": "", "project_url": "https://pypi.org/project/jsonconversion/", "project_urls": {"Download": "https://github.com/DLR-RM/python-jsonconversion/tarball/master", "Homepage": "https://github.com/DLR-RM/python-jsonconversion"}, "release_url": "https://pypi.org/project/jsonconversion/0.2.12/", "requires_dist": null, "requires_python": ">=2.6", "summary": "This python module helps converting arbitrary Python objects into JSON strings and back.", "version": "0.2.12", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"the-jsonconversion-package\">\n<h2>The <tt>jsonconversion</tt> package</h2>\n<p>This python module helps converting arbitrary Python objects into JSON strings and back. It extends the basic features\nof the <tt>JSONEncoder</tt> and <tt>JSONDecoder</tt> classes provided by the native <tt>json</tt> package. For this purpose,\n<tt>jsonconversion</tt> ships with these four classes:</p>\n<div id=\"the-jsonobject-class\">\n<h3>The <tt>JSONObject</tt> class</h3>\n<p>Your serializable classes should inherit from this class. Hereby, they must implement the methods <tt>from_dict</tt> and\n<tt>to_dict</tt>. The example further down describes how to do so.</p>\n</div>\n<div id=\"the-jsonextendedencoder-class\">\n<h3>The <tt>JSONExtendedEncoder</tt> class</h3>\n<p>This is a class used internally by <tt>JSONObjectEncoder</tt>. However, it can also be used directly, if you do not need the\nfeatures of <tt>JSONObjectEncoder</tt> but want to implement your own encoders.</p>\n<p>The class is especially helpful, if you want custom handling of builtins (<tt>int</tt>, <tt>dict</tt>, \u2026) or classes deriving\nfrom builtins. This would not be possible if directly inheriting from <tt>JSONEncoder</tt>. To do so, override the\n<tt>isinstance</tt> method and return <tt>False</tt> for all types you want to handle in the <tt>default</tt> method.</p>\n<p>If you look at the source code of <tt>JSONObjectEncoder</tt>, you will see how this can be used.</p>\n</div>\n<div id=\"the-jsonobjectencoder-class\">\n<h3>The <tt>JSONObjectEncoder</tt> class</h3>\n<p>Encodes Python objects into JSON strings. Supported objects are:</p>\n<ul>\n<li>Python builtins: <tt>int</tt>, <tt>float</tt>, <tt>str</tt>, <tt>list</tt>, <tt>set</tt>, <tt>dict</tt>, <tt>tuple</tt></li>\n<li><tt>type</tt> objects: <tt>isinstance(object, type)</tt></li>\n<li>All classes deriving from <tt>JSONObject</tt></li>\n</ul>\n<p>Those objects can of course also be nested!</p>\n</div>\n<div id=\"the-jsonobjectdecoder-class\">\n<h3>The <tt>JSONObjectDecoder</tt> class</h3>\n<p>Decodes JSON strings converted using the <tt>JSONObjectEncoder</tt> back to Python objects.</p>\n<p>The class adds a custom keyword argument to the <tt>load[s]</tt> method: <tt>substitute_modules</tt>. This parameter takes a\n<tt>dict</tt> in the form <tt>{\"old.module.MyClass\": \"new.module.MyClass\"}</tt>. It can be used if you have serialized\n<tt>JSONObject</tt>s who\u2019s module path has changed.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Using <tt>jsonconversion</tt> is easy. You can find further code examples in the <tt>test</tt> folder.</p>\n<div id=\"encoding-and-decoding\">\n<h3>Encoding and Decoding</h3>\n<p>In order to encode Python objects with JSON conversion and to later decode them, you have to import the Python module\n<tt>json</tt>. The module provides the methods <tt>dump</tt>/<tt>dumps</tt> for encoding and <tt>load</tt>/<tt>loads</tt> for decoding:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">jsonconversion.decoder</span> <span class=\"kn\">import</span> <span class=\"n\">JSONObjectDecoder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">jsonconversion.encoder</span> <span class=\"kn\">import</span> <span class=\"n\">JSONObjectEncoder</span>\n\n<span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># variable to be serialized</span>\n\n<span class=\"c1\"># \"dumps\" converts the variable to a string, \"dump\" directly writes it to a file</span>\n<span class=\"n\">str_var</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">JSONObjectEncoder</span><span class=\"p\">)</span>\n<span class=\"c1\"># Equivalently, \"loads\" converts the object back from a string. \"load\" from a file</span>\n<span class=\"n\">var_2</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">str_var</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">JSONObjectDecoder</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">var</span> <span class=\"o\">==</span> <span class=\"n\">var_2</span>\n</pre>\n</div>\n<div id=\"deriving-from-jsonobject\">\n<h3>Deriving from JSONObject</h3>\n<p>In order to serialize arbitrary, self-written classes, they must derive from <tt>JSONObject</tt> and implement the two\nmethods <tt>from_dict</tt> and <tt>to_dict</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"n\">JSONObject</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">c</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_dict</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">dict_</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">dict_</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">],</span> <span class=\"n\">dict_</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">],</span> <span class=\"n\">dict_</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">a</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">c</span>\n</pre>\n</div>\n<div id=\"general-notes\">\n<h3>General notes</h3>\n<ul>\n<li><tt>jsonconversion</tt> stores the class path in the JSON string when serializing a JSONObject. When decoding the object\nback, it automatically imports the correct module. You only have to ensure that the module is within your\n<tt>PYTHONPATH</tt>.</li>\n<li>The <tt>to_dict</tt> and <tt>from_dict</tt> methods only need to specify the elements of a class, needed to recreate the\nobject. Derived attributes of a class (like <tt>age</tt> from <tt>year_born</tt>) do not need to be serialized.</li>\n<li>If you compare the original object with the object obtained from serialization and deserialization using <tt>is</tt>, they\nwill differ, as these are objects at different locations in memory. Also a comparison of JSONObject with <tt>==</tt> will\nfail, if you do not tell Python how to compare two objects. This is why <tt>MyClass</tt> overrides the <tt>__eq__</tt> method.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5441007, "releases": {"0.2.10": [{"comment_text": "", "digests": {"md5": "66314629c8e785eefafaf87f81966179", "sha256": "d93706811519f5f11defe17cba3a8eff760a37285052eefe9f85b68a15f44b38"}, "downloads": -1, "filename": "jsonconversion-0.2.10.tar.gz", "has_sig": false, "md5_digest": "66314629c8e785eefafaf87f81966179", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 11334, "upload_time": "2019-03-11T08:43:59", "upload_time_iso_8601": "2019-03-11T08:43:59.706405Z", "url": "https://files.pythonhosted.org/packages/29/38/448fd3cbda3e78a7bd62b511c99a895a2af4ec31dc08e757c52a1f70cee6/jsonconversion-0.2.10.tar.gz", "yanked": false}], "0.2.11": [{"comment_text": "", "digests": {"md5": "791bb885a9a515ca8b8bcc099dc9ac97", "sha256": "80fa382ced3550cb4129590773931a10ef5ccef23f414864dfa08995b3001f6e"}, "downloads": -1, "filename": "jsonconversion-0.2.11.tar.gz", "has_sig": false, "md5_digest": "791bb885a9a515ca8b8bcc099dc9ac97", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 12910, "upload_time": "2019-06-18T11:26:30", "upload_time_iso_8601": "2019-06-18T11:26:30.633682Z", "url": "https://files.pythonhosted.org/packages/54/4e/8022250471d342fe52b2397b9bb976ed79dd357c2d0f0844680783b171c8/jsonconversion-0.2.11.tar.gz", "yanked": false}], "0.2.12": [{"comment_text": "", "digests": {"md5": "00d0856388338a1167ef598d7f48514f", "sha256": "b4355a311475f85ee899776737344cc3106a437b4f4ed6179650323bd713883e"}, "downloads": -1, "filename": "jsonconversion-0.2.12.tar.gz", "has_sig": false, "md5_digest": "00d0856388338a1167ef598d7f48514f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 13509, "upload_time": "2019-06-24T14:55:38", "upload_time_iso_8601": "2019-06-24T14:55:38.461721Z", "url": "https://files.pythonhosted.org/packages/85/1a/dd7e0218cf4e6922201449bb64679d409b43f1e4907877dd4844ac15e437/jsonconversion-0.2.12.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "a8023fbad58e4832926ea03be6f26f72", "sha256": "ba1ff2f1c1f966912628e0260e69ac4b471179f9ba5aff3097bff13c619542f4"}, "downloads": -1, "filename": "jsonconversion-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a8023fbad58e4832926ea03be6f26f72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10912, "upload_time": "2017-04-04T05:59:29", "upload_time_iso_8601": "2017-04-04T05:59:29.001381Z", "url": "https://files.pythonhosted.org/packages/18/eb/50d6172c996fbc0fe805ad518e70f130cdd0b1f9dc4fdf245dab2725e178/jsonconversion-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "4abf79fb0c2c2d96041c006366efb86a", "sha256": "4f561dfd2cd7b90c08ce1aae5451093d5b23641d1df39ac22a211272afe5cb04"}, "downloads": -1, "filename": "jsonconversion-0.2.3.tar.gz", "has_sig": false, "md5_digest": "4abf79fb0c2c2d96041c006366efb86a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11498, "upload_time": "2017-04-10T13:20:53", "upload_time_iso_8601": "2017-04-10T13:20:53.907326Z", "url": "https://files.pythonhosted.org/packages/ab/e9/1ca38f55e95b8e6c7d0b1c89c8a0265f9c6851389ca845eb38c0bd064789/jsonconversion-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "a92fed0c92fa90e70dd552977acfb68c", "sha256": "154140335dbf43f77df7bf615d2d521b3d9ee1bcba5ff1ebb2c9643fa1e065fa"}, "downloads": -1, "filename": "jsonconversion-0.2.4.tar.gz", "has_sig": false, "md5_digest": "a92fed0c92fa90e70dd552977acfb68c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11000, "upload_time": "2017-04-10T13:37:36", "upload_time_iso_8601": "2017-04-10T13:37:36.115863Z", "url": "https://files.pythonhosted.org/packages/3b/6a/bb259c113731bbeda7c8f0b061d1819795595b43064be32b275742b010a3/jsonconversion-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "7cc83276b40941719a5e350aec8bcec3", "sha256": "644c5e76c33ccfb2d298d14867c14245561a6e4248852e7c340cce2ad0e10e5e"}, "downloads": -1, "filename": "jsonconversion-0.2.5.tar.gz", "has_sig": false, "md5_digest": "7cc83276b40941719a5e350aec8bcec3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6, !=3.*", "size": 11387, "upload_time": "2017-09-27T12:13:27", "upload_time_iso_8601": "2017-09-27T12:13:27.247744Z", "url": "https://files.pythonhosted.org/packages/d0/95/e8cc8cd3d5da23a722563da248c2e913dcb379cf2c221ff431b36c8b6af5/jsonconversion-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "9bec3505d514c2a86dbf4d6946cdb1a0", "sha256": "a17919bce0ddc105e8ef67755b1f4c5443ea666637e56eed1bdbb06dbc66f8eb"}, "downloads": -1, "filename": "jsonconversion-0.2.6-py2.py3.tar.gz", "has_sig": false, "md5_digest": "9bec3505d514c2a86dbf4d6946cdb1a0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 11177, "upload_time": "2018-09-28T08:47:15", "upload_time_iso_8601": "2018-09-28T08:47:15.860460Z", "url": "https://files.pythonhosted.org/packages/e5/43/e9fe0c569ad6b64e8d4b353388a5544cdb54d5ac6c3e7cad72575c5677cc/jsonconversion-0.2.6-py2.py3.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "1d5f02127ccb4d896a0cf00285707e32", "sha256": "d1608b59b00d6a048235fd0d14ee483bb9e69c38cff7e9195d5ef4f26dc2ba64"}, "downloads": -1, "filename": "jsonconversion-0.2.7.tar.gz", "has_sig": false, "md5_digest": "1d5f02127ccb4d896a0cf00285707e32", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 11185, "upload_time": "2018-09-28T08:52:18", "upload_time_iso_8601": "2018-09-28T08:52:18.067821Z", "url": "https://files.pythonhosted.org/packages/57/53/35ebeb28d4758c8c2f57d0faac2a0e065f840794987b8588df65ba836bad/jsonconversion-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "ec8ca6ebe01a18578d90f249a0fb4859", "sha256": "833305a252a000641aedeb8748a86cb88a5b19827d6f580bba274b16ac8ac233"}, "downloads": -1, "filename": "jsonconversion-0.2.8.tar.gz", "has_sig": false, "md5_digest": "ec8ca6ebe01a18578d90f249a0fb4859", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 11276, "upload_time": "2018-11-27T12:15:48", "upload_time_iso_8601": "2018-11-27T12:15:48.807784Z", "url": "https://files.pythonhosted.org/packages/df/bc/d3de3f5cc28eb62791c2c22daf689c8bba16e12d0ea86099f0707e0be1b2/jsonconversion-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "97ae1c0db3cec0f1963e1b962034e08f", "sha256": "f0225980678c91c67c5beeec0c95696d9b4a12b8bcc1c98e6d17a5c6a49bb6a7"}, "downloads": -1, "filename": "jsonconversion-0.2.9.tar.gz", "has_sig": false, "md5_digest": "97ae1c0db3cec0f1963e1b962034e08f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11316, "upload_time": "2018-12-10T08:35:37", "upload_time_iso_8601": "2018-12-10T08:35:37.587102Z", "url": "https://files.pythonhosted.org/packages/d0/1a/073693fb8f62c1027e806c055ab272f2026acf83271398f78c7da4e56eba/jsonconversion-0.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "00d0856388338a1167ef598d7f48514f", "sha256": "b4355a311475f85ee899776737344cc3106a437b4f4ed6179650323bd713883e"}, "downloads": -1, "filename": "jsonconversion-0.2.12.tar.gz", "has_sig": false, "md5_digest": "00d0856388338a1167ef598d7f48514f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.6", "size": 13509, "upload_time": "2019-06-24T14:55:38", "upload_time_iso_8601": "2019-06-24T14:55:38.461721Z", "url": "https://files.pythonhosted.org/packages/85/1a/dd7e0218cf4e6922201449bb64679d409b43f1e4907877dd4844ac15e437/jsonconversion-0.2.12.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:51 2020"}