{"info": {"author": "Takaaki AOKI", "author_email": "aoki.takaaki@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Other Environment", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.4"], "description": "=======================\npeakdetect_delta\n=======================\n\nFind positive spike-like peaks from 1-D array.\n\nexample\n=========\n\n.. code-block:: python\n\n    from peakdetect_delta import peakdetect, peakdetect_simpleedge\n\n    # peak are represented as a tuple ((pvalue, pidx), (sidx, eidx))\n    #   pvalue: value at pidx\n    #   pidx: index of the peak\n    #   sidx: index where y[sidx+1] - y[sidx] > rdelta\n    #   eidx: index where y[eidx] - y[eidx-1] < fdelta \n    #   so, y[sidx:eidx] takes the detected peak\n\n    # examples of peakdetect_simpleedge\n    # case 1.1\n    s = [0, 0, 1.5, 2, 0, 0]\n    assert peakdetect_simpleedge(s, rdelta=1, fdelta=-1) == [((2, 3), (1, 5))]\n\n    # case 1.2\n    s = [0, 2, 0, -2, 0, -2]\n    assert peakdetect_simpleedge(s, rdelta=1, fdelta=1) == [((2, 1), (0, 3)),\n                                                            ((0, 4), (3, 6))]\n\n    # example of peakdetect\n    s= [0, 3, 0, 2, 0, 0, -1, 1, -2, -1]\n    # same as peakdetect_simpleedge\n    assert peakdetect(s, rdelta=1, fdelta=-1, minimumspace=-1)\n               == [((3, 1), (0, 3)), ((2, 3), (2, 5)), ((1, 7), (6, 9))]\n    # first 2 peaks are merged\n    assert peakdetect(s, rdelta=1, fdelta=-1, minimumspace=0)\n               == [((3, 1), (0, 5)), ((1, 7), (6, 9))]\n    peakdetect(s, rdelta=1, fdelta=-1, minimumspace=2)\n               == [((3, 1), (0, 9))]", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/takaakiaoki/peakdetect_delta", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/takaakiaoki/peakdetect_delta", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "peakdetect_delta", "package_url": "https://pypi.org/project/peakdetect_delta/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/peakdetect_delta/", "project_urls": {"Download": "https://github.com/takaakiaoki/peakdetect_delta", "Homepage": "https://github.com/takaakiaoki/peakdetect_delta"}, "release_url": "https://pypi.org/project/peakdetect_delta/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "find positive splike-like peaks, using Delta_raise and Delta_fall thresholds.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Find positive spike-like peaks from 1-D array.</p>\n<div id=\"example\">\n<h2>example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">peakdetect_delta</span> <span class=\"kn\">import</span> <span class=\"n\">peakdetect</span><span class=\"p\">,</span> <span class=\"n\">peakdetect_simpleedge</span>\n\n<span class=\"c1\"># peak are represented as a tuple ((pvalue, pidx), (sidx, eidx))</span>\n<span class=\"c1\">#   pvalue: value at pidx</span>\n<span class=\"c1\">#   pidx: index of the peak</span>\n<span class=\"c1\">#   sidx: index where y[sidx+1] - y[sidx] &gt; rdelta</span>\n<span class=\"c1\">#   eidx: index where y[eidx] - y[eidx-1] &lt; fdelta</span>\n<span class=\"c1\">#   so, y[sidx:eidx] takes the detected peak</span>\n\n<span class=\"c1\"># examples of peakdetect_simpleedge</span>\n<span class=\"c1\"># case 1.1</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">peakdetect_simpleedge</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">rdelta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fdelta</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))]</span>\n\n<span class=\"c1\"># case 1.2</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">peakdetect_simpleedge</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">rdelta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fdelta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)),</span>\n                                                        <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))]</span>\n\n<span class=\"c1\"># example of peakdetect</span>\n<span class=\"n\">s</span><span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"c1\"># same as peakdetect_simpleedge</span>\n<span class=\"k\">assert</span> <span class=\"n\">peakdetect</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">rdelta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fdelta</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">minimumspace</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n           <span class=\"o\">==</span> <span class=\"p\">[((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)),</span> <span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)),</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">))]</span>\n<span class=\"c1\"># first 2 peaks are merged</span>\n<span class=\"k\">assert</span> <span class=\"n\">peakdetect</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">rdelta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fdelta</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">minimumspace</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n           <span class=\"o\">==</span> <span class=\"p\">[((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)),</span> <span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">))]</span>\n<span class=\"n\">peakdetect</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">rdelta</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fdelta</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">minimumspace</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n           <span class=\"o\">==</span> <span class=\"p\">[((</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">))]</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1726390, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Fri May  8 02:56:59 2020"}