{"info": {"author": "Matthew T. Kennerly", "author_email": "mtkennerly@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Version Control", "Topic :: Software Development :: Version Control :: Bazaar", "Topic :: Software Development :: Version Control :: Git", "Topic :: Software Development :: Version Control :: Mercurial"], "description": "# Dynamic versioning plugin for Poetry\n[![Build status](https://travis-ci.org/mtkennerly/poetry-dynamic-versioning.svg?branch=master)](https://travis-ci.org/mtkennerly/poetry-dynamic-versioning)\n[![Version](https://img.shields.io/pypi/v/poetry-dynamic-versioning)](https://pypi.org/project/poetry-dynamic-versioning)\n[![License: MIT](https://img.shields.io/badge/license-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis package is a plugin for [Poetry](https://github.com/sdispater/poetry)\nto enable dynamic versioning based on tags in your version control system,\npowered by [Dunamai](https://github.com/mtkennerly/dunamai).\n\nSince Poetry does not yet officially support plugins\n(refer to [this issue](https://github.com/sdispater/poetry/issues/693))\nas of the time of writing on 2019-10-19, this package takes some novel\nliberties to make the functionality possible. As soon as official support\nlands, this plugin will be updated to do things the official way.\n\n## Installation\nPython 3.5 or newer and Poetry 1.0.0 or newer are required.\n\n* Run `pip install poetry-dynamic-versioning`\n* Add this to your pyproject.toml:\n  ```toml\n  [tool.poetry-dynamic-versioning]\n  enable = true\n  ```\n\nNote that you must install the plugin in your global Python installation,\n**not** as a dependency in pyroject.toml, because the virtual environment\nthat Poetry creates cannot see Poetry itself and therefore cannot patch it.\n\nWith the minimal configuration above, the plugin will automatically take effect\nwhen you run commands such as `poetry build`. It will update the version in\npyproject.toml, then revert the change when the plugin deactivates. If you want\nto include a `__version__` variable in your code, just put a placeholder in the\nappropriate file and configure the plugin to update it (see below) if it isn't\none of the defaults. You are encouraged to use `__version__ = \"0.0.0\"` as a\nstandard placeholder.\n\n## Configuration\nIn your pyproject.toml file, you may configure the following options:\n\n* `[tool.poetry-dynamic-versioning]`: General options.\n  * `enable`: Boolean. Default: false. Since the plugin has to be installed\n    globally, this setting is an opt-in per project. This setting will likely\n    be removed once plugins are officially supported.\n  * `vcs`: String. This is the version control system to check for a version.\n    One of: `any` (default), `git`, `mercurial`, `darcs`, `bazaar`,\n    `subversion`, `fossil`.\n  * `metadata`: Boolean. Default: unset. If true, include the commit hash in\n    the version, and also include a dirty flag if `dirty` is true. If unset,\n    metadata will only be included if you are on a commit without a version tag.\n  * `dirty`: Boolean. Default: false. If true, include a dirty flag in the\n    metadata, indicating whether there are any uncommitted changes.\n  * `pattern`: String. This is a regular expression which will be used to find\n    a tag representing a version. There must be a named capture group `base`\n    with the main part of the version, and optionally you can also have groups\n    named `stage` and `revision` for prereleases. The default is\n    `^v(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?$`.\n  * `format`: String. Default: unset. This defines a custom output format for\n    the version. Available substitutions:\n\n    * `{base}`\n    * `{stage}`\n    * `{revision}`\n    * `{distance}`\n    * `{commit}`\n    * `{dirty}`\n\n    Example: `v{base}+{distance}.{commit}`\n  * `format-jinja`: String. Default: unset. This defines a custom output format\n    for the version, using a [Jinja](https://pypi.org/project/Jinja2) template.\n    When this is set, `format` is ignored.\n\n    Available variables:\n\n    * `base` (string)\n    * `stage` (string or None)\n    * `revision` (integer or None)\n    * `distance` (integer)\n    * `commit` (string)\n    * `dirty` (boolean)\n    * `env` (dictionary of environment variables)\n\n    Available functions:\n\n    * `bump_version` ([from Dunamai](https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L786-L797))\n    * `serialize_pep440` ([from Dunamai](https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L687-L710))\n    * `serialize_semver` ([from Dunamai](https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L740-L752))\n    * `serialize_pvp` ([from Dunamai](https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L766-L775))\n\n    Simple example:\n\n    ```toml\n    format-jinja = \"{% if distance == 0 %}{{ base }}{% else %}{{ base }}+{{ distance }}.{{ commit }}{% endif %}\"\n    ```\n\n    Complex example:\n\n    ```toml\n    format-jinja = \"\"\"\n        {%- if distance == 0 -%}\n            {{ serialize_pep440(base, stage, revision) }}\n        {%- elif revision is not None -%}\n            {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}\n        {%- else -%}\n            {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}\n        {%- endif -%}\n    \"\"\"\n    ```\n  * `style`: String. Default: unset. One of: `pep440`, `semver`, `pvp`.\n    These are preconfigured output formats. If you set both a `style` and\n    a `format`, then the format will be validated against the style's rules.\n    If `style` is unset, the default output format will follow PEP 440,\n    but a custom `format` will only be validated if `style` is set explicitly.\n  * `latest-tag`: Boolean. Default: false. If true, then only check the latest\n    tag for a version, rather than looking through all the tags until a suitable\n    one is found to match the `pattern`.\n* `[tool.poetry-dynamic-versioning.subversion]`: Options specific to Subversion.\n  * `tag-dir`: String. Default: `tags`. This is the location of tags relative\n    to the root.\n* `[tool.poetry-dynamic-versioning.substitution]`: Insert the dynamic version\n  into additional files other than just pyproject.toml. These changes will be\n  reverted when the plugin deactivates.\n  * `files`: List of globs for any files that need substitutions. Default:\n    `[\"*.py\", \"*/__init__.py\", \"*/__version__.py\", \"*/_version.py\"]`.\n    To disable substitution, set this to an empty list.\n  * `patterns`: List of regular expressions for the text to replace.\n    Each regular expression must have two capture groups, which are any\n    text to preserve before and after the replaced text. Default:\n    `[\"(^__version__\\s*=\\s*['\\\"])[^'\\\"]*(['\\\"])\"]`.\n\nSimple example:\n\n```toml\n[tool.poetry-dynamic-versioning]\nenable = true\nvcs = \"git\"\nstyle = \"semver\"\n```\n\n## Caveats\n* The dynamic version is not available during `poetry run` because Poetry\n  uses [`os.execvp()`](https://docs.python.org/2/library/os.html#os.execvp).\n\n## Implementation\nIn order to side-load plugin functionality into Poetry, this package\ndoes the following:\n\n* Upon installation, it delivers a `zzz_poetry_dynamic_versioning.pth`\n  file to your Python site-packages directory. This forces Python to\n  automatically load the plugin after all other modules have been loaded\n  (or at least those alphabetically prior to `zzz`).\n* It patches `builtins.__import__` so that, whenever the first import from\n  Poetry finishes, `poetry.console.main` will be patched. The reason we have\n  to wait for a Poetry import is in case you've used the get-poetry.py script,\n  in which case there is a gap between when Python is fully loaded and when\n  `~/.poetry/bin/poetry` adds the Poetry lib folder to the PYTHONPATH.\n* The patched version of `poetry.console.main` will then, when called,\n  additionally patch either `poetry.poetry.Poetry.create()` or\n  `poetry.factory.Factory.create_poetry()` (depending on your Poetry version)\n  to replace the version from your pyproject.toml file with the dynamically\n  generated version.\n\n## Development\nPlease refer to [CONTRIBUTING.md](CONTRIBUTING.md).\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mtkennerly/poetry-dynamic-versioning", "keywords": "poetry,plugin,version,versioning,dynamic", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "poetry-dynamic-versioning", "package_url": "https://pypi.org/project/poetry-dynamic-versioning/", "platform": "", "project_url": "https://pypi.org/project/poetry-dynamic-versioning/", "project_urls": {"Homepage": "https://github.com/mtkennerly/poetry-dynamic-versioning", "Repository": "https://github.com/mtkennerly/poetry-dynamic-versioning"}, "release_url": "https://pypi.org/project/poetry-dynamic-versioning/0.6.0/", "requires_dist": ["dunamai (>=1.1,<2.0)", "tomlkit (>=0.4)", "jinja2 (>=2.11.1,<3.0.0)"], "requires_python": ">=3.5,<4.0", "summary": "Plugin for Poetry to enable dynamic versioning based on VCS tags", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dynamic versioning plugin for Poetry</h1>\n<p><a href=\"https://travis-ci.org/mtkennerly/poetry-dynamic-versioning\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1f279504a710cc2c6210626aa3dadcedf8e9c6c1/68747470733a2f2f7472617669732d63692e6f72672f6d746b656e6e65726c792f706f657472792d64796e616d69632d76657273696f6e696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/poetry-dynamic-versioning\" rel=\"nofollow\"><img alt=\"Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/64d8111c24c50e394d6bc1c28582e8cb34cdde11/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f706f657472792d64796e616d69632d76657273696f6e696e67\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ede485ee1830ab55be8e2afd1d1af1291ab13b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<p>This package is a plugin for <a href=\"https://github.com/sdispater/poetry\" rel=\"nofollow\">Poetry</a>\nto enable dynamic versioning based on tags in your version control system,\npowered by <a href=\"https://github.com/mtkennerly/dunamai\" rel=\"nofollow\">Dunamai</a>.</p>\n<p>Since Poetry does not yet officially support plugins\n(refer to <a href=\"https://github.com/sdispater/poetry/issues/693\" rel=\"nofollow\">this issue</a>)\nas of the time of writing on 2019-10-19, this package takes some novel\nliberties to make the functionality possible. As soon as official support\nlands, this plugin will be updated to do things the official way.</p>\n<h2>Installation</h2>\n<p>Python 3.5 or newer and Poetry 1.0.0 or newer are required.</p>\n<ul>\n<li>Run <code>pip install poetry-dynamic-versioning</code></li>\n<li>Add this to your pyproject.toml:\n<pre><span class=\"k\">[tool.poetry-dynamic-versioning]</span>\n<span class=\"n\">enable</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n</pre>\n</li>\n</ul>\n<p>Note that you must install the plugin in your global Python installation,\n<strong>not</strong> as a dependency in pyroject.toml, because the virtual environment\nthat Poetry creates cannot see Poetry itself and therefore cannot patch it.</p>\n<p>With the minimal configuration above, the plugin will automatically take effect\nwhen you run commands such as <code>poetry build</code>. It will update the version in\npyproject.toml, then revert the change when the plugin deactivates. If you want\nto include a <code>__version__</code> variable in your code, just put a placeholder in the\nappropriate file and configure the plugin to update it (see below) if it isn't\none of the defaults. You are encouraged to use <code>__version__ = \"0.0.0\"</code> as a\nstandard placeholder.</p>\n<h2>Configuration</h2>\n<p>In your pyproject.toml file, you may configure the following options:</p>\n<ul>\n<li><code>[tool.poetry-dynamic-versioning]</code>: General options.\n<ul>\n<li>\n<p><code>enable</code>: Boolean. Default: false. Since the plugin has to be installed\nglobally, this setting is an opt-in per project. This setting will likely\nbe removed once plugins are officially supported.</p>\n</li>\n<li>\n<p><code>vcs</code>: String. This is the version control system to check for a version.\nOne of: <code>any</code> (default), <code>git</code>, <code>mercurial</code>, <code>darcs</code>, <code>bazaar</code>,\n<code>subversion</code>, <code>fossil</code>.</p>\n</li>\n<li>\n<p><code>metadata</code>: Boolean. Default: unset. If true, include the commit hash in\nthe version, and also include a dirty flag if <code>dirty</code> is true. If unset,\nmetadata will only be included if you are on a commit without a version tag.</p>\n</li>\n<li>\n<p><code>dirty</code>: Boolean. Default: false. If true, include a dirty flag in the\nmetadata, indicating whether there are any uncommitted changes.</p>\n</li>\n<li>\n<p><code>pattern</code>: String. This is a regular expression which will be used to find\na tag representing a version. There must be a named capture group <code>base</code>\nwith the main part of the version, and optionally you can also have groups\nnamed <code>stage</code> and <code>revision</code> for prereleases. The default is\n<code>^v(?P&lt;base&gt;\\d+\\.\\d+\\.\\d+)(-?((?P&lt;stage&gt;[a-zA-Z]+)\\.?(?P&lt;revision&gt;\\d+)?))?$</code>.</p>\n</li>\n<li>\n<p><code>format</code>: String. Default: unset. This defines a custom output format for\nthe version. Available substitutions:</p>\n<ul>\n<li><code>{base}</code></li>\n<li><code>{stage}</code></li>\n<li><code>{revision}</code></li>\n<li><code>{distance}</code></li>\n<li><code>{commit}</code></li>\n<li><code>{dirty}</code></li>\n</ul>\n<p>Example: <code>v{base}+{distance}.{commit}</code></p>\n</li>\n<li>\n<p><code>format-jinja</code>: String. Default: unset. This defines a custom output format\nfor the version, using a <a href=\"https://pypi.org/project/Jinja2\" rel=\"nofollow\">Jinja</a> template.\nWhen this is set, <code>format</code> is ignored.</p>\n<p>Available variables:</p>\n<ul>\n<li><code>base</code> (string)</li>\n<li><code>stage</code> (string or None)</li>\n<li><code>revision</code> (integer or None)</li>\n<li><code>distance</code> (integer)</li>\n<li><code>commit</code> (string)</li>\n<li><code>dirty</code> (boolean)</li>\n<li><code>env</code> (dictionary of environment variables)</li>\n</ul>\n<p>Available functions:</p>\n<ul>\n<li><code>bump_version</code> (<a href=\"https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L786-L797\" rel=\"nofollow\">from Dunamai</a>)</li>\n<li><code>serialize_pep440</code> (<a href=\"https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L687-L710\" rel=\"nofollow\">from Dunamai</a>)</li>\n<li><code>serialize_semver</code> (<a href=\"https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L740-L752\" rel=\"nofollow\">from Dunamai</a>)</li>\n<li><code>serialize_pvp</code> (<a href=\"https://github.com/mtkennerly/dunamai/blob/dc2777cdcc5eeff61c10602e33b1a0dc0bb0357b/dunamai/__init__.py#L766-L775\" rel=\"nofollow\">from Dunamai</a>)</li>\n</ul>\n<p>Simple example:</p>\n<pre><span class=\"n\">format-jinja</span> <span class=\"o\">=</span> <span class=\"s\">\"{% if distance == 0 %}{{ base }}{% else %}{{ base }}+{{ distance }}.{{ commit }}{% endif %}\"</span>\n</pre>\n<p>Complex example:</p>\n<pre><span class=\"n\">format-jinja</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"</span>\n<span class=\"s\">    {%- if distance == 0 -%}</span>\n<span class=\"s\">        {{ serialize_pep440(base, stage, revision) }}</span>\n<span class=\"s\">    {%- elif revision is not None -%}</span>\n<span class=\"s\">        {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}</span>\n<span class=\"s\">    {%- else -%}</span>\n<span class=\"s\">        {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}</span>\n<span class=\"s\">    {%- endif -%}</span>\n<span class=\"s\">\"\"\"</span>\n</pre>\n</li>\n<li>\n<p><code>style</code>: String. Default: unset. One of: <code>pep440</code>, <code>semver</code>, <code>pvp</code>.\nThese are preconfigured output formats. If you set both a <code>style</code> and\na <code>format</code>, then the format will be validated against the style's rules.\nIf <code>style</code> is unset, the default output format will follow PEP 440,\nbut a custom <code>format</code> will only be validated if <code>style</code> is set explicitly.</p>\n</li>\n<li>\n<p><code>latest-tag</code>: Boolean. Default: false. If true, then only check the latest\ntag for a version, rather than looking through all the tags until a suitable\none is found to match the <code>pattern</code>.</p>\n</li>\n</ul>\n</li>\n<li><code>[tool.poetry-dynamic-versioning.subversion]</code>: Options specific to Subversion.\n<ul>\n<li><code>tag-dir</code>: String. Default: <code>tags</code>. This is the location of tags relative\nto the root.</li>\n</ul>\n</li>\n<li><code>[tool.poetry-dynamic-versioning.substitution]</code>: Insert the dynamic version\ninto additional files other than just pyproject.toml. These changes will be\nreverted when the plugin deactivates.\n<ul>\n<li><code>files</code>: List of globs for any files that need substitutions. Default:\n<code>[\"*.py\", \"*/__init__.py\", \"*/__version__.py\", \"*/_version.py\"]</code>.\nTo disable substitution, set this to an empty list.</li>\n<li><code>patterns</code>: List of regular expressions for the text to replace.\nEach regular expression must have two capture groups, which are any\ntext to preserve before and after the replaced text. Default:\n<code>[\"(^__version__\\s*=\\s*['\\\"])[^'\\\"]*(['\\\"])\"]</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Simple example:</p>\n<pre><span class=\"k\">[tool.poetry-dynamic-versioning]</span>\n<span class=\"n\">enable</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n<span class=\"n\">vcs</span> <span class=\"o\">=</span> <span class=\"s\">\"git\"</span>\n<span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"s\">\"semver\"</span>\n</pre>\n<h2>Caveats</h2>\n<ul>\n<li>The dynamic version is not available during <code>poetry run</code> because Poetry\nuses <a href=\"https://docs.python.org/2/library/os.html#os.execvp\" rel=\"nofollow\"><code>os.execvp()</code></a>.</li>\n</ul>\n<h2>Implementation</h2>\n<p>In order to side-load plugin functionality into Poetry, this package\ndoes the following:</p>\n<ul>\n<li>Upon installation, it delivers a <code>zzz_poetry_dynamic_versioning.pth</code>\nfile to your Python site-packages directory. This forces Python to\nautomatically load the plugin after all other modules have been loaded\n(or at least those alphabetically prior to <code>zzz</code>).</li>\n<li>It patches <code>builtins.__import__</code> so that, whenever the first import from\nPoetry finishes, <code>poetry.console.main</code> will be patched. The reason we have\nto wait for a Poetry import is in case you've used the get-poetry.py script,\nin which case there is a gap between when Python is fully loaded and when\n<code>~/.poetry/bin/poetry</code> adds the Poetry lib folder to the PYTHONPATH.</li>\n<li>The patched version of <code>poetry.console.main</code> will then, when called,\nadditionally patch either <code>poetry.poetry.Poetry.create()</code> or\n<code>poetry.factory.Factory.create_poetry()</code> (depending on your Poetry version)\nto replace the version from your pyproject.toml file with the dynamically\ngenerated version.</li>\n</ul>\n<h2>Development</h2>\n<p>Please refer to <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a>.</p>\n\n          </div>"}, "last_serial": 6862336, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ede2f2903618773f8dfdda526637d352", "sha256": "692ea64e566d1a30379663ba072864d6ddc71e4c5317093a478037e00baeb55a"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ede2f2903618773f8dfdda526637d352", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 6419, "upload_time": "2019-06-06T03:19:26", "upload_time_iso_8601": "2019-06-06T03:19:26.035846Z", "url": "https://files.pythonhosted.org/packages/27/07/b7593f49a4b640ae95fcb1305411487bb400b440bb220ee7152904b4fb6e/poetry_dynamic_versioning-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99cb4f79a916c7ac0911e513f8c1341d", "sha256": "e5985207e475dde165f2c4a8969ef152237c8e796f25bd6076846c0a9820ba77"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.1.0.tar.gz", "has_sig": false, "md5_digest": "99cb4f79a916c7ac0911e513f8c1341d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 6860, "upload_time": "2019-06-06T03:19:22", "upload_time_iso_8601": "2019-06-06T03:19:22.858666Z", "url": "https://files.pythonhosted.org/packages/28/e1/42f6f153007b157e2a5b29f09d2c00b94696bfc70bcd18e2d22ed1608af3/poetry-dynamic-versioning-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b8f5849999bd9a99eb01cbfd2f61ba82", "sha256": "a4ab5085881d45b3973534d24487539a016cfd6bf8f0a375bab1055ab84d01c2"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b8f5849999bd9a99eb01cbfd2f61ba82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 6437, "upload_time": "2019-10-19T14:45:56", "upload_time_iso_8601": "2019-10-19T14:45:56.589637Z", "url": "https://files.pythonhosted.org/packages/02/dc/52dff2d55c859d02ec9734ca8517edcf3c7c13fc1edaac055c978a12c97a/poetry_dynamic_versioning-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "11afd7b1c378e0b28d9d422d634d9854", "sha256": "26804d4dac6f8ab98fa4ad65fa4f40785c66f04f33a97cddb1278bdb47dfbc0f"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.2.0.tar.gz", "has_sig": false, "md5_digest": "11afd7b1c378e0b28d9d422d634d9854", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 6789, "upload_time": "2019-10-19T14:45:55", "upload_time_iso_8601": "2019-10-19T14:45:55.118962Z", "url": "https://files.pythonhosted.org/packages/27/33/1f6010aa445851610a6096a0594cba052a3bf021607f65935b1774b1e31f/poetry-dynamic-versioning-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "9d6f39d684539ac7930381a2981b9448", "sha256": "fdc942b163ed0aacb4defce5a315bb7f3e6345ff27f07eed509bdfd09137d2cd"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9d6f39d684539ac7930381a2981b9448", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 6486, "upload_time": "2019-10-27T19:02:29", "upload_time_iso_8601": "2019-10-27T19:02:29.267594Z", "url": "https://files.pythonhosted.org/packages/3f/25/4b7411d13c93a6c71fa6f96d08d740be293805bb6c586eec1d2ee637dcbe/poetry_dynamic_versioning-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d46a38d6d23423457d7bec0dfefb20f", "sha256": "1a6001ba767d5cb88008798cf0fd1e2deab475a76b703f3a367ab977958ccae3"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d46a38d6d23423457d7bec0dfefb20f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 6799, "upload_time": "2019-10-27T19:02:27", "upload_time_iso_8601": "2019-10-27T19:02:27.791245Z", "url": "https://files.pythonhosted.org/packages/59/68/7a793518787de62ff57c93600398cc82462521ae51cc6216afb5cb64148b/poetry-dynamic-versioning-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "d57815c29cbfecf57e377f26f857bd08", "sha256": "cbdbfb0d10ee858dd0c7b8e212ca078134a98b68e7a3d381a2cc106d78057570"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d57815c29cbfecf57e377f26f857bd08", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 6487, "upload_time": "2019-11-28T16:16:28", "upload_time_iso_8601": "2019-11-28T16:16:28.368448Z", "url": "https://files.pythonhosted.org/packages/b7/01/259cc70d569a44650eb351aa587649d920ffc79c88818c734852caae052e/poetry_dynamic_versioning-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eabc89c0f06d97edd137a8cff855d242", "sha256": "6a9e25f680545bf552d632a346029b114e4227f2f00a452eea54d895eedb77ae"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.3.1.tar.gz", "has_sig": false, "md5_digest": "eabc89c0f06d97edd137a8cff855d242", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 6827, "upload_time": "2019-11-28T16:16:25", "upload_time_iso_8601": "2019-11-28T16:16:25.989314Z", "url": "https://files.pythonhosted.org/packages/e9/b0/0b3154b6eb8c1e875cbdd69f8c76f0114c6fa102fb56d430c3585b6bc0de/poetry-dynamic-versioning-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "62003ae0ac07ad89a01442568aa78237", "sha256": "af9547dbc9ee99903c8671114c8044b4d27737ae0bef3e1b58b120490f0a45ec"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "62003ae0ac07ad89a01442568aa78237", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 6880, "upload_time": "2019-12-13T17:10:09", "upload_time_iso_8601": "2019-12-13T17:10:09.391754Z", "url": "https://files.pythonhosted.org/packages/19/75/c5f3c72bac37d359fef712e8fd69d06e706972110c95f2169414e6c0446f/poetry_dynamic_versioning-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c40f96e8dd2d74ba875caea87fa49909", "sha256": "c63f84f97f60934ee0ac2b2a812b3772053702d04c69299868dab183850300f0"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.3.2.tar.gz", "has_sig": false, "md5_digest": "c40f96e8dd2d74ba875caea87fa49909", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 7233, "upload_time": "2019-12-13T17:10:07", "upload_time_iso_8601": "2019-12-13T17:10:07.634903Z", "url": "https://files.pythonhosted.org/packages/3f/65/599c28cb257bbf90eeb6b6d0915289253b0903338c52d6270ee7c0ea006a/poetry-dynamic-versioning-0.3.2.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "a165339cea0734d87786d2ae4f7ebb7b", "sha256": "0bac05e12726ea11b8be6fca904032b1de8ef416256f457bd0e486a56983d434"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a165339cea0734d87786d2ae4f7ebb7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 7773, "upload_time": "2019-12-13T21:48:37", "upload_time_iso_8601": "2019-12-13T21:48:37.940956Z", "url": "https://files.pythonhosted.org/packages/bb/35/848d6a88e73df89a954b2dabe03688a52da65ecfcc711ec2e498c863fa96/poetry_dynamic_versioning-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0924dadc58d46d07baa4fe48124e2442", "sha256": "199fad8e2c0458069c02cdb695f92adb75a5e4dfa358c3b6647183b051fd5be1"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0924dadc58d46d07baa4fe48124e2442", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 8275, "upload_time": "2019-12-13T21:48:36", "upload_time_iso_8601": "2019-12-13T21:48:36.784402Z", "url": "https://files.pythonhosted.org/packages/6d/46/b2d8425ef54e9da7fbc0ed72ae5db87e6ef98ce157c66c10da912abba277/poetry-dynamic-versioning-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "79d3839c48d4c887cad3993873df81a1", "sha256": "048f95eaf438bd7a7bedbf981d7ba0e0206af00301700f61c06ed8a05b85cbeb"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "79d3839c48d4c887cad3993873df81a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8094, "upload_time": "2020-02-12T08:56:10", "upload_time_iso_8601": "2020-02-12T08:56:10.317972Z", "url": "https://files.pythonhosted.org/packages/86/75/4d6b041341cba981227edc2bfd983fdd1aafe39148ad53b4d8e1f3baa252/poetry_dynamic_versioning-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ef1a5317e4df7b106aebb4af3d30747", "sha256": "a17a12337b5de3a14ad35427d76285cf5b179bf1aeadb262de2465e036e2e5a7"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.5.0.tar.gz", "has_sig": false, "md5_digest": "4ef1a5317e4df7b106aebb4af3d30747", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 8737, "upload_time": "2020-02-12T08:56:09", "upload_time_iso_8601": "2020-02-12T08:56:09.300321Z", "url": "https://files.pythonhosted.org/packages/03/ce/baaf6b6f26e92f1697f67705acfeb6bf3ff9717a6d57786762f7dd7fae17/poetry-dynamic-versioning-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "381601f79436ddace3896c7aed3715cf", "sha256": "9badd8d4caaf56a01b138372494ba34929205059c7577f86ddaeceaf949ce57d"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "381601f79436ddace3896c7aed3715cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8416, "upload_time": "2020-03-22T23:40:48", "upload_time_iso_8601": "2020-03-22T23:40:48.560802Z", "url": "https://files.pythonhosted.org/packages/26/d5/b76c0a9a39c01edcc9e3d62dce31e5d21d969f26b9d262d159988e135c1b/poetry_dynamic_versioning-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be3207f2ede5ce267d0f27dae9ec7cc8", "sha256": "45ea1424902c449d2e4cda934727ae34bffca457c27447914bda3118828074d1"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.6.0.tar.gz", "has_sig": false, "md5_digest": "be3207f2ede5ce267d0f27dae9ec7cc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 9234, "upload_time": "2020-03-22T23:40:47", "upload_time_iso_8601": "2020-03-22T23:40:47.126290Z", "url": "https://files.pythonhosted.org/packages/97/bb/738d7ef284ea1584b0e12142137179c0d0759a9a1b6ae688a8780d98b07c/poetry-dynamic-versioning-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "381601f79436ddace3896c7aed3715cf", "sha256": "9badd8d4caaf56a01b138372494ba34929205059c7577f86ddaeceaf949ce57d"}, "downloads": -1, "filename": "poetry_dynamic_versioning-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "381601f79436ddace3896c7aed3715cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 8416, "upload_time": "2020-03-22T23:40:48", "upload_time_iso_8601": "2020-03-22T23:40:48.560802Z", "url": "https://files.pythonhosted.org/packages/26/d5/b76c0a9a39c01edcc9e3d62dce31e5d21d969f26b9d262d159988e135c1b/poetry_dynamic_versioning-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be3207f2ede5ce267d0f27dae9ec7cc8", "sha256": "45ea1424902c449d2e4cda934727ae34bffca457c27447914bda3118828074d1"}, "downloads": -1, "filename": "poetry-dynamic-versioning-0.6.0.tar.gz", "has_sig": false, "md5_digest": "be3207f2ede5ce267d0f27dae9ec7cc8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 9234, "upload_time": "2020-03-22T23:40:47", "upload_time_iso_8601": "2020-03-22T23:40:47.126290Z", "url": "https://files.pythonhosted.org/packages/97/bb/738d7ef284ea1584b0e12142137179c0d0759a9a1b6ae688a8780d98b07c/poetry-dynamic-versioning-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:03 2020"}