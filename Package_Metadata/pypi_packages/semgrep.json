{"info": {"author": "Russell & Return 2 Corp", "author_email": "support@returntocorp.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# semgrep\n\n![Homebrew](https://github.com/returntocorp/homebrew-semgrep/workflows/homebrew/badge.svg)\n[![r2c Community Slack](https://img.shields.io/badge/r2c_slack-join-brightgreen?style=flat&logo=slack&labelColor=4A154B)](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n\n`semgrep` is a tool for easily detecting and preventing bugs and anti-patterns in\nyour codebase. It combines the convenience of `grep` with the correctness of\nsyntactical and semantic search. Developers, DevOps engineers, and security engineers\nuse `semgrep` to write code with confidence.\n\n**Try it now:** [https://semgrep.live](https://semgrep.live/)\n\n## Overview\n\nLanguage support:\n\n| **Python** | **Javascript** | **Go &nbsp; &nbsp; &nbsp;** | **Java &nbsp;** | **C &nbsp; &nbsp; &nbsp; &nbsp;** | **Typescript** | **PHP &nbsp; &nbsp;** |\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n| \u2705 | \u2705 | \u2705 | \u2705 | \u2705 | Coming... | Coming... |\n\nExample patterns:\n\n| **Pattern** | **Matches** |\n| :--- | :--- |\n| `$X == $X` | `if (node.id == node.id): ...` |\n| `requests.get(..., verify=False, ...)` | `requests.get(url, timeout=3, verify=False)` |\n| `os.system(...)` | `from os import system; system('echo semgrep')` |\n| `$ELEMENT.innerHTML` | ``el.innerHTML = \"<img src='x' onerror='alert(`XSS`)'>\";`` |\n| `$TOKEN.SignedString([]byte(\"...\"))` | `ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))` |\n\n\u2192 [see more example patterns in the semgrep-rules repository](https://github.com/returntocorp/semgrep-rules)\n\n## Installation\n\nInstall `semgrep` with [Docker](https://docs.docker.com/install/):\n\n```bash\ndocker pull returntocorp/semgrep\n```\n\nOn OSX, binaries are available via [Homebrew](https://brew.sh/):\n\n```bash\nbrew install returntocorp/semgrep/semgrep\n```\n\nOn Ubuntu, an install script is available [here](https://github.com/returntocorp/semgrep/releases/download/v0.6.0/semgrep-v0.6.0-ubuntu-generic.sh)\n\n## Usage\n\n### Example Usage\n\nHere is a simple Python example, `test.py`. We want to retrieve an object by ID:\n\n```python3\ndef get_node(node_id, nodes):\n    for node in nodes:\n        if node.id == node.id:  # Oops, supposed to be 'node_id'\n            return node\n    return None\n```\n\nThis is a bug. Let's use `semgrep` to find bugs like it, using a simple search pattern: `$X == $X`. It will find all places in our code where the left- and right-hand sides of a comparison are the same expression:\n\n```\n$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --lang python --pattern '$X == $X' test.py\ntest.py\nrule:python.deadcode.eqeq-is-bad: useless comparison operation `node.id == node.id` or `node.id != node.id`.\n3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n```\n\n### r2c-developed Rules\n\nYou can use rules developed by [r2c](https://r2c.dev) to search for issues in your codebase:\n\n```bash\ncd /path/to/code\ndocker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --config r2c\n```\n\n### Custom Rules\n\nYou can also [create your own rules](docs/configuration-files.md):\n\n```bash\ncd /path/to/code\ndocker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --generate-config\ndocker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep\n```\n\n## Configuration\n\nFor simple patterns use the `--lang` and `--pattern` flags. This mode of\noperation is useful for quickly iterating on a pattern on a single file or\nfolder:\n\n```bash\ndocker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --lang javascript --pattern 'eval(...)' path/to/file.js\n```\n\nTo fine-tune your searching, specify the `--help` flag:\n\n```bash\ndocker run --rm returntocorp/semgrep --help\n```\n\n### Configuration Files\n\nFor advanced configuration use the `--config` flag. This flag automagically\nhandles a multitude of input configuration types:\n\n* `--config <file|folder|yaml_url|tarball_url|registy_name>`\n\nIn the absence of this flag, a default configuration is loaded from `.semgrep.yml`\nor multiple files matching `.semgrep/**/*.yml`.\n\n#### Pattern Features\n\n`semgrep` patterns make use of two primary features:\n\n* **Metavariables like `$X`, `$WIDGET`, or `$USERS_2`.** Metavariable names can\nonly contain uppercase characters, or `_`, or digits, and must start with\nan uppercase character or `_` - names like `$x` or `$some_value` are\ninvalid.  Metavariables are used to track a variable across a specific code\nscope.\n* **The `...` (ellipsis) operator.** The ellipsis operator abstracts away\nsequences so you don't have to sweat the details of a particular code pattern.\n\nFor example,\n```yaml\n$FILE = open(...)\n```\nwill find all occurrences in your code where the result of an `open()` call is assigned\nto a variable.\n\n#### Composing Patterns\n\nYou can also construct rules by composing multiple patterns together. \n\nLet's consider an example:\n\n```yaml\nrules:\n  - id: open-never-closed\n    patterns:\n      - pattern: $FILE = open(...)\n      - pattern-not-inside: |\n          $FILE = open(...)\n          ...\n          $FILE.close()\n    message: \"file object opened without corresponding close\"\n    languages: [python]\n    severity: ERROR\n```\n\nThis rule looks for files that are opened but never closed. It accomplishes\nthis by looking for the `open(...)` pattern _and not_ a following `close()`\npattern. The `$FILE` metavariable ensures that the same variable name is used\nin the `open` and `close` calls. The ellipsis operator allows for any arguments\nto be passed to `open` and any sequence of code statements in-between the `open`\nand `close` calls. We don't care how `open` is called or what happens up to\na `close` call, we just need to make sure `close` is called.\n\n**For more information on rule fields like `patterns` and `pattern-not-inside`\nsee the [configuration documentation](docs/configuration-files.md).**\n\n#### Equivalences\n\nEquivalences are another key concept in `semgrep`. `semgrep` automatically searches\nfor code that is semantically equivalent. For example, the following patterns\nare semantically equivalent\n\n```python\nsubprocess.Popen(...)\n```\n\n```python\nfrom subprocess import Popen as sub_popen\nresult = sub_popen(\"ls\")\n```\n\nFor a full list of `semgrep` feature support by language see the\n[language matrix](docs/matrix.md).\n\n### Registry\n\nAs mentioned above, you may also specify a registry name as configuration.\n[r2c](https://r2c.dev) provides a [registry](https://github.com/returntocorp/semgrep-rules)\nof configuration files. These rules have been tuned on thousands of repositories\nusing our [analysis platform](https://app.r2c.dev).\n\n```bash\ndocker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --config r2c\n```\n\n## Resources\n\n* [`semgrep` presentation at HellaSecure](https://www.youtube.com/watch?v=M586wePrwYs) and [slides](https://bit.ly/hella-secure-semgrep) \n* [Pattern features documentation](docs/pattern-features.md)\n* [Configuration files documentation](docs/configuration-files.md)\n* [Integrations](docs/integrations.md)\n* [Development](docs/development.md)\n* [Bug reports](https://github.com/returntocorp/semgrep/issues)\n\n## Contribution\n\n`semgrep` is LGPL-licensed, feel free to help out: [CONTRIBUTING](https://github.com/returntocorp/semgrep/blob/develop/CONTRIBUTING.md).\n\n`semgrep` is a frontend to a larger program analysis library named [`pfff`](https://github.com/returntocorp/pfff/). `pfff` began and was open-sourced at [Facebook](https://github.com/facebookarchive/pfff) but is now archived. The primary maintainer now works at [r2c](https://r2c.dev). `semgrep` was originally named `sgrep` and was renamed to avoid collisons with existing projects.\n\n## Commercial Support\n\n`semgrep` is proudly supported by [r2c](https://r2c.dev). We're hiring! \n\nInterested in a fully-supported, hosted version of semgrep? [Drop your email](https://forms.gle/dpUUvSo1WtELL8DW6) and we'll ping you!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/returntocorp/semgrep", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "semgrep", "package_url": "https://pypi.org/project/semgrep/", "platform": "", "project_url": "https://pypi.org/project/semgrep/", "project_urls": {"Homepage": "https://github.com/returntocorp/semgrep"}, "release_url": "https://pypi.org/project/semgrep/0.6.0/", "requires_dist": ["colorama (==0.4.3)", "pyyaml (==5.3)", "requests (==2.22.0)"], "requires_python": ">=3.6", "summary": "like grep but for code: fast and syntax-aware semantic code pattern search for many languages", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>semgrep</h1>\n<p><img alt=\"Homebrew\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c1096ed8d60af1986e0c2741217895ebe15bead/68747470733a2f2f6769746875622e636f6d2f72657475726e746f636f72702f686f6d65627265772d73656d677265702f776f726b666c6f77732f686f6d65627265772f62616467652e737667\">\n<a href=\"https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA\" rel=\"nofollow\"><img alt=\"r2c Community Slack\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb0b51998a3bb4f7308dedfebfdde0dcc0fc1b67/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7232635f736c61636b2d6a6f696e2d627269676874677265656e3f7374796c653d666c6174266c6f676f3d736c61636b266c6162656c436f6c6f723d344131353442\"></a></p>\n<p><code>semgrep</code> is a tool for easily detecting and preventing bugs and anti-patterns in\nyour codebase. It combines the convenience of <code>grep</code> with the correctness of\nsyntactical and semantic search. Developers, DevOps engineers, and security engineers\nuse <code>semgrep</code> to write code with confidence.</p>\n<p><strong>Try it now:</strong> <a href=\"https://semgrep.live/\" rel=\"nofollow\">https://semgrep.live</a></p>\n<h2>Overview</h2>\n<p>Language support:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>Python</strong></th>\n<th align=\"left\"><strong>Javascript</strong></th>\n<th align=\"left\"><strong>Go \u00a0 \u00a0 \u00a0</strong></th>\n<th align=\"left\"><strong>Java \u00a0</strong></th>\n<th align=\"left\"><strong>C \u00a0 \u00a0 \u00a0 \u00a0</strong></th>\n<th align=\"left\"><strong>Typescript</strong></th>\n<th align=\"left\"><strong>PHP \u00a0 \u00a0</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">\u2705</td>\n<td align=\"left\">\u2705</td>\n<td align=\"left\">\u2705</td>\n<td align=\"left\">\u2705</td>\n<td align=\"left\">\u2705</td>\n<td align=\"left\">Coming...</td>\n<td align=\"left\">Coming...</td>\n</tr></tbody></table>\n<p>Example patterns:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>Pattern</strong></th>\n<th align=\"left\"><strong>Matches</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>$X == $X</code></td>\n<td align=\"left\"><code>if (node.id == node.id): ...</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>requests.get(..., verify=False, ...)</code></td>\n<td align=\"left\"><code>requests.get(url, timeout=3, verify=False)</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>os.system(...)</code></td>\n<td align=\"left\"><code>from os import system; system('echo semgrep')</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>$ELEMENT.innerHTML</code></td>\n<td align=\"left\"><code>el.innerHTML = \"&lt;img src='x' onerror='alert(`XSS`)'&gt;\";</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>$TOKEN.SignedString([]byte(\"...\"))</code></td>\n<td align=\"left\"><code>ss, err := token.SignedString([]byte(\"HARDCODED KEY\"))</code></td>\n</tr></tbody></table>\n<p>\u2192 <a href=\"https://github.com/returntocorp/semgrep-rules\" rel=\"nofollow\">see more example patterns in the semgrep-rules repository</a></p>\n<h2>Installation</h2>\n<p>Install <code>semgrep</code> with <a href=\"https://docs.docker.com/install/\" rel=\"nofollow\">Docker</a>:</p>\n<pre>docker pull returntocorp/semgrep\n</pre>\n<p>On OSX, binaries are available via <a href=\"https://brew.sh/\" rel=\"nofollow\">Homebrew</a>:</p>\n<pre>brew install returntocorp/semgrep/semgrep\n</pre>\n<p>On Ubuntu, an install script is available <a href=\"https://github.com/returntocorp/semgrep/releases/download/v0.6.0/semgrep-v0.6.0-ubuntu-generic.sh\" rel=\"nofollow\">here</a></p>\n<h2>Usage</h2>\n<h3>Example Usage</h3>\n<p>Here is a simple Python example, <code>test.py</code>. We want to retrieve an object by ID:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_node</span><span class=\"p\">(</span><span class=\"n\">node_id</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">nodes</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">:</span>  <span class=\"c1\"># Oops, supposed to be 'node_id'</span>\n            <span class=\"k\">return</span> <span class=\"n\">node</span>\n    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre>\n<p>This is a bug. Let's use <code>semgrep</code> to find bugs like it, using a simple search pattern: <code>$X == $X</code>. It will find all places in our code where the left- and right-hand sides of a comparison are the same expression:</p>\n<pre><code>$ docker run --rm -v \"${PWD}:/home/repo\" returntocorp/semgrep --lang python --pattern '$X == $X' test.py\ntest.py\nrule:python.deadcode.eqeq-is-bad: useless comparison operation `node.id == node.id` or `node.id != node.id`.\n3:        if node.id == node.id:  # Oops, supposed to be 'node_id'\n</code></pre>\n<h3>r2c-developed Rules</h3>\n<p>You can use rules developed by <a href=\"https://r2c.dev\" rel=\"nofollow\">r2c</a> to search for issues in your codebase:</p>\n<pre><span class=\"nb\">cd</span> /path/to/code\ndocker run --rm -v <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">PWD</span><span class=\"si\">}</span><span class=\"s2\">:/home/repo\"</span> returntocorp/semgrep --config r2c\n</pre>\n<h3>Custom Rules</h3>\n<p>You can also <a href=\"docs/configuration-files.md\" rel=\"nofollow\">create your own rules</a>:</p>\n<pre><span class=\"nb\">cd</span> /path/to/code\ndocker run --rm -v <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">PWD</span><span class=\"si\">}</span><span class=\"s2\">:/home/repo\"</span> returntocorp/semgrep --generate-config\ndocker run --rm -v <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">PWD</span><span class=\"si\">}</span><span class=\"s2\">:/home/repo\"</span> returntocorp/semgrep\n</pre>\n<h2>Configuration</h2>\n<p>For simple patterns use the <code>--lang</code> and <code>--pattern</code> flags. This mode of\noperation is useful for quickly iterating on a pattern on a single file or\nfolder:</p>\n<pre>docker run --rm -v <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">PWD</span><span class=\"si\">}</span><span class=\"s2\">:/home/repo\"</span> returntocorp/semgrep --lang javascript --pattern <span class=\"s1\">'eval(...)'</span> path/to/file.js\n</pre>\n<p>To fine-tune your searching, specify the <code>--help</code> flag:</p>\n<pre>docker run --rm returntocorp/semgrep --help\n</pre>\n<h3>Configuration Files</h3>\n<p>For advanced configuration use the <code>--config</code> flag. This flag automagically\nhandles a multitude of input configuration types:</p>\n<ul>\n<li><code>--config &lt;file|folder|yaml_url|tarball_url|registy_name&gt;</code></li>\n</ul>\n<p>In the absence of this flag, a default configuration is loaded from <code>.semgrep.yml</code>\nor multiple files matching <code>.semgrep/**/*.yml</code>.</p>\n<h4>Pattern Features</h4>\n<p><code>semgrep</code> patterns make use of two primary features:</p>\n<ul>\n<li><strong>Metavariables like <code>$X</code>, <code>$WIDGET</code>, or <code>$USERS_2</code>.</strong> Metavariable names can\nonly contain uppercase characters, or <code>_</code>, or digits, and must start with\nan uppercase character or <code>_</code> - names like <code>$x</code> or <code>$some_value</code> are\ninvalid.  Metavariables are used to track a variable across a specific code\nscope.</li>\n<li><strong>The <code>...</code> (ellipsis) operator.</strong> The ellipsis operator abstracts away\nsequences so you don't have to sweat the details of a particular code pattern.</li>\n</ul>\n<p>For example,</p>\n<pre><span class=\"l l-Scalar l-Scalar-Plain\">$FILE = open(...)</span>\n</pre>\n<p>will find all occurrences in your code where the result of an <code>open()</code> call is assigned\nto a variable.</p>\n<h4>Composing Patterns</h4>\n<p>You can also construct rules by composing multiple patterns together.</p>\n<p>Let's consider an example:</p>\n<pre><span class=\"nt\">rules</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">open-never-closed</span>\n    <span class=\"nt\">patterns</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">pattern</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">$FILE = open(...)</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">pattern-not-inside</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">|</span>\n          <span class=\"no\">$FILE = open(...)</span>\n          <span class=\"no\">...</span>\n          <span class=\"no\">$FILE.close()</span>\n    <span class=\"nt\">message</span><span class=\"p\">:</span> <span class=\"s\">\"file</span><span class=\"nv\"> </span><span class=\"s\">object</span><span class=\"nv\"> </span><span class=\"s\">opened</span><span class=\"nv\"> </span><span class=\"s\">without</span><span class=\"nv\"> </span><span class=\"s\">corresponding</span><span class=\"nv\"> </span><span class=\"s\">close\"</span>\n    <span class=\"nt\">languages</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">python</span><span class=\"p p-Indicator\">]</span>\n    <span class=\"nt\">severity</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ERROR</span>\n</pre>\n<p>This rule looks for files that are opened but never closed. It accomplishes\nthis by looking for the <code>open(...)</code> pattern <em>and not</em> a following <code>close()</code>\npattern. The <code>$FILE</code> metavariable ensures that the same variable name is used\nin the <code>open</code> and <code>close</code> calls. The ellipsis operator allows for any arguments\nto be passed to <code>open</code> and any sequence of code statements in-between the <code>open</code>\nand <code>close</code> calls. We don't care how <code>open</code> is called or what happens up to\na <code>close</code> call, we just need to make sure <code>close</code> is called.</p>\n<p><strong>For more information on rule fields like <code>patterns</code> and <code>pattern-not-inside</code>\nsee the <a href=\"docs/configuration-files.md\" rel=\"nofollow\">configuration documentation</a>.</strong></p>\n<h4>Equivalences</h4>\n<p>Equivalences are another key concept in <code>semgrep</code>. <code>semgrep</code> automatically searches\nfor code that is semantically equivalent. For example, the following patterns\nare semantically equivalent</p>\n<pre><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">subprocess</span> <span class=\"kn\">import</span> <span class=\"n\">Popen</span> <span class=\"k\">as</span> <span class=\"n\">sub_popen</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">sub_popen</span><span class=\"p\">(</span><span class=\"s2\">\"ls\"</span><span class=\"p\">)</span>\n</pre>\n<p>For a full list of <code>semgrep</code> feature support by language see the\n<a href=\"docs/matrix.md\" rel=\"nofollow\">language matrix</a>.</p>\n<h3>Registry</h3>\n<p>As mentioned above, you may also specify a registry name as configuration.\n<a href=\"https://r2c.dev\" rel=\"nofollow\">r2c</a> provides a <a href=\"https://github.com/returntocorp/semgrep-rules\" rel=\"nofollow\">registry</a>\nof configuration files. These rules have been tuned on thousands of repositories\nusing our <a href=\"https://app.r2c.dev\" rel=\"nofollow\">analysis platform</a>.</p>\n<pre>docker run --rm -v <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">PWD</span><span class=\"si\">}</span><span class=\"s2\">:/home/repo\"</span> returntocorp/semgrep --config r2c\n</pre>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=M586wePrwYs\" rel=\"nofollow\"><code>semgrep</code> presentation at HellaSecure</a> and <a href=\"https://bit.ly/hella-secure-semgrep\" rel=\"nofollow\">slides</a></li>\n<li><a href=\"docs/pattern-features.md\" rel=\"nofollow\">Pattern features documentation</a></li>\n<li><a href=\"docs/configuration-files.md\" rel=\"nofollow\">Configuration files documentation</a></li>\n<li><a href=\"docs/integrations.md\" rel=\"nofollow\">Integrations</a></li>\n<li><a href=\"docs/development.md\" rel=\"nofollow\">Development</a></li>\n<li><a href=\"https://github.com/returntocorp/semgrep/issues\" rel=\"nofollow\">Bug reports</a></li>\n</ul>\n<h2>Contribution</h2>\n<p><code>semgrep</code> is LGPL-licensed, feel free to help out: <a href=\"https://github.com/returntocorp/semgrep/blob/develop/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING</a>.</p>\n<p><code>semgrep</code> is a frontend to a larger program analysis library named <a href=\"https://github.com/returntocorp/pfff/\" rel=\"nofollow\"><code>pfff</code></a>. <code>pfff</code> began and was open-sourced at <a href=\"https://github.com/facebookarchive/pfff\" rel=\"nofollow\">Facebook</a> but is now archived. The primary maintainer now works at <a href=\"https://r2c.dev\" rel=\"nofollow\">r2c</a>. <code>semgrep</code> was originally named <code>sgrep</code> and was renamed to avoid collisons with existing projects.</p>\n<h2>Commercial Support</h2>\n<p><code>semgrep</code> is proudly supported by <a href=\"https://r2c.dev\" rel=\"nofollow\">r2c</a>. We're hiring!</p>\n<p>Interested in a fully-supported, hosted version of semgrep? <a href=\"https://forms.gle/dpUUvSo1WtELL8DW6\" rel=\"nofollow\">Drop your email</a> and we'll ping you!</p>\n\n          </div>"}, "last_serial": 7183374, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b97a77d8c30e5692cb2afc451d43c4f0", "sha256": "f1f22808a02f5ab90dd5c5ca70c54d4b875179a9daac27410fd5fc925ea6c4a8"}, "downloads": -1, "filename": "semgrep-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b97a77d8c30e5692cb2afc451d43c4f0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 1092, "upload_time": "2020-04-16T01:19:09", "upload_time_iso_8601": "2020-04-16T01:19:09.876887Z", "url": "https://files.pythonhosted.org/packages/97/74/37e7adc460fcaecd3612087e4c3b8b3772317b60d5d054a729a579ecf126/semgrep-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2cddf44dfa4d086696831c574d1c0ca9", "sha256": "2090936df24bb9fde252565162bea39fb888df3f6ac84dce622ad38b305c3495"}, "downloads": -1, "filename": "semgrep-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2cddf44dfa4d086696831c574d1c0ca9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 739, "upload_time": "2020-04-16T01:19:11", "upload_time_iso_8601": "2020-04-16T01:19:11.659871Z", "url": "https://files.pythonhosted.org/packages/0f/14/cce2ecc8a30c6f225dd2505ed73b2c3127be49f8015985123f99e175b71b/semgrep-0.0.1.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "19128c06b9aca9f4bed8f5df9d23639a", "sha256": "c25324c413cfc73fc0e9fc3d127e620f58651f92ae6460ca0b9059d026a84805"}, "downloads": -1, "filename": "semgrep-0.6.0-py36.py37.py38-none-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "19128c06b9aca9f4bed8f5df9d23639a", "packagetype": "bdist_wheel", "python_version": "py36.py37.py38", "requires_python": ">=3.6", "size": 18794087, "upload_time": "2020-05-06T20:37:05", "upload_time_iso_8601": "2020-05-06T20:37:05.863131Z", "url": "https://files.pythonhosted.org/packages/c3/99/07ce6ec2b7f25527bfedf1dd8df804e42ca5a8c4bf374deaa818a348b8d1/semgrep-0.6.0-py36.py37.py38-none-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80aea583bebe4c2bb20f8c6fc324e388", "sha256": "edd40260fb2be636f8c88fff8cd6f051b4ad52d592fa76e37a8675f7380efdd6"}, "downloads": -1, "filename": "semgrep-0.6.0.tar.gz", "has_sig": false, "md5_digest": "80aea583bebe4c2bb20f8c6fc324e388", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31892, "upload_time": "2020-05-06T20:37:07", "upload_time_iso_8601": "2020-05-06T20:37:07.893277Z", "url": "https://files.pythonhosted.org/packages/f4/7c/425b7829fcf0213415d1a7f281e0fed4321a1af0799fb96c36799e8387dc/semgrep-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19128c06b9aca9f4bed8f5df9d23639a", "sha256": "c25324c413cfc73fc0e9fc3d127e620f58651f92ae6460ca0b9059d026a84805"}, "downloads": -1, "filename": "semgrep-0.6.0-py36.py37.py38-none-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "19128c06b9aca9f4bed8f5df9d23639a", "packagetype": "bdist_wheel", "python_version": "py36.py37.py38", "requires_python": ">=3.6", "size": 18794087, "upload_time": "2020-05-06T20:37:05", "upload_time_iso_8601": "2020-05-06T20:37:05.863131Z", "url": "https://files.pythonhosted.org/packages/c3/99/07ce6ec2b7f25527bfedf1dd8df804e42ca5a8c4bf374deaa818a348b8d1/semgrep-0.6.0-py36.py37.py38-none-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80aea583bebe4c2bb20f8c6fc324e388", "sha256": "edd40260fb2be636f8c88fff8cd6f051b4ad52d592fa76e37a8675f7380efdd6"}, "downloads": -1, "filename": "semgrep-0.6.0.tar.gz", "has_sig": false, "md5_digest": "80aea583bebe4c2bb20f8c6fc324e388", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 31892, "upload_time": "2020-05-06T20:37:07", "upload_time_iso_8601": "2020-05-06T20:37:07.893277Z", "url": "https://files.pythonhosted.org/packages/f4/7c/425b7829fcf0213415d1a7f281e0fed4321a1af0799fb96c36799e8387dc/semgrep-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:23 2020"}