{"info": {"author": "Roman Poya", "author_email": "roman_poya@yahoo.com", "bugtrack_url": null, "classifiers": [], "description": "# PostMesh\n\n<!--![almond](doc/almond.png)-->\n<!--![mech](doc/mech2d.png)-->\n<div>\n<img src=\"docs/almond.png\" width=\"45%\" height=\"45%\">\n<img src=\"docs/mech2d.png\" width=\"45%\" height=\"45%\">\n<img src=\"docs/wing2d.png\" width=\"45%\" height=\"45%\">\n<img src=\"docs/torus.png\"  width=\"45%\" height=\"45%\">\n<img src=\"docs/F6Iso_2.png\" width=\"95%\" height=\"95%\">\n<img src=\"docs/f6BL_58.png\" width=\"95%\" height=\"95%\">\n<img src=\"docs/Car_23s.png\" width=\"95%\" height=\"95%\">\n</div>\n\n**PostMesh** is a solid mechanics based a posteriori high order curvilinear mesh generator based on OpenCascade with C++, Cython and Python APIs. Its main goal is to serve as a bridge between CAD models and high order finite element schemes. Hence, it can be used as a plugin with various compiled and interpreted code-bases.\n\n## Philosophy\nPostMesh is an a posteriori curvilinear mesh generator, in that it requires a linear mesh in advance. Higher order nodes are then placed on the linear mesh and the projection of these nodes to the exact boundary is computed with the CAD library and subsequently fed as the Dirichlet boundary condition to either a linear, a linearised or a non-linear solid mechanics problem.\n\n## Build Requirements\nPostMesh depends on the following third party libraries:\n\n- **[GNU make]**                     - build process\n- **C++11 compatible compiler**      - Rvalue references, variadic templates, lambdas etc\n- **[OpenCascade]**                  - CAD processing\n- **[Eigen]**                        - Matrix operations and SIMD vectorisation\n- **[Cython]**                       - Cython bindings\n- **[NumPy]**                        - Python interface\n\n\n[GNU make]:     http://www.gnu.org/software/make\n[OpenCascade]:  http://www.opencascade.com\n[Eigen]:        http://eigen.tuxfamily.org\n[Cython]:       http://www.cython.org\n[NumPy]:        http://www.numpy.org\n\nInstalling these dependencies on unix based systems is straight-forward. For building OpenCascade on Debian based systems, do `apt-get install liboce-*`and on macOS `brew install oce`. Note that, the default location for `Eigen` and `OpenCascade` headers and libraries (under Linux and macOS) are `/usr/local/include/eigen/`, `/usr/local/include/oce/` and `/usr/local/lib`, respectively.\n\n## Installation\nBoth C++ and Python bindings are distributed through this repository. The Python module is available through PyPi\n\n    pip install PostMeshPy\n\n\nTo build PostMesh shared library for C++ API, you typically do\n\n    git clone https://github.com/romeric/PostMesh\n    cd PostMesh\n    make\n    [sudo] make install\n\nTo further build the C++ examples, (after building and installing PostMesh shared library) do\n\n    cd examples\n    make\n\n\nTo build Cython/Python bindings manually (make sure you are in PostMesh directory)\n\n    [sudo] python setup.py install\n\nOr using pip\n\n    python setup.py build_ext\n    python setup.py bdist_wheel\n    cd ../ && pip install PostMesh/dist/*.whl\n\n\n### Usage\nPostMesh provides a very intuitive objected oriented API. The interfaces are designed such that C++ and Python codes look and feel the same. Have a look at the examples directory for getting started with PostMesh. For conveninece, here are two complete examples.\n\n#### A complete C++ example: [3D] surface projections for high order tetrahedral elements\n````c++\n    // MAKE AN INSTANCE OF PostMeshSurface\n    auto curvilinear_mesh = PostMeshSurface();\n    // PASS MESH DATA TO PostMesh - PostMesh TAKES RAW POINTERS AS INPUT ARGUMENTS\n    curvilinear_mesh.SetMeshElements(elements, elements_rows, elements_cols);\n    curvilinear_mesh.SetMeshPoints(points,points_rows, points_cols);\n    curvilinear_mesh.SetMeshEdges(edges, edges_rows, edges_cols);\n    curvilinear_mesh.SetMeshFaces(faces,  faces_rows,  faces_cols);\n    curvilinear_mesh.SetScale(scale);\n    curvilinear_mesh.SetCondition(condition);\n    curvilinear_mesh.SetProjectionPrecision(precision);\n    curvilinear_mesh.ComputeProjectionCriteria();\n    curvilinear_mesh.ScaleMesh();\n    curvilinear_mesh.InferInterpolationPolynomialDegree();\n    curvilinear_mesh.SetNodalSpacing(nodal_spacing, nodal_spacing_rows, nodal_spacing_cols);\n    // READ THE GEOMETRY FROM THE IGES FILE\n    curvilinear_mesh.ReadIGES(iges_filename);\n    // EXTRACT GEOMETRY INFORMATION FROM THE IGES FILE\n    curvilinear_mesh.GetGeomVertices();\n    // EXTRACT TRUE BOUNDARY FACES FROM CAD FILE\n    curvilinear_mesh.GetGeomFaces();\n    curvilinear_mesh.GetGeomPointsOnCorrespondingFaces();\n    // FIRST IDENTIFY WHICH SURFACES CONTAIN WHICH FACES\n    curvilinear_mesh.IdentifySurfacesContainingFaces();\n    // PROJECT ALL BOUNDARY POINTS FROM THE MESH TO THE SURFACE\n    curvilinear_mesh.ProjectMeshOnSurface();\n    // PERFORM POINT INVERSION FOR THE INTERIOR POINTS (ORTHOGONAL POINT PROJECTION)\n    // THE INPUT ARGUMENTS SPECIFY PROJECTION ON CURVE INTERSECTIONS\n    // AND MODIFICATION OF THE LINEAR MESH IF NECESSARY\n    curvilinear_mesh.MeshPointInversionSurface(1,1);\n    // OBTAIN MODIFIED MESH POINTS - THIS IS NECESSARY TO ENSURE LINEAR MESH IS ALSO CORRECT\n    curvilinear_mesh.ReturnModifiedMeshPoints(points);\n    // OBTAIN DIRICHLET DATA - (THE DISPLACMENT OF BOUNDARY NODES)\n    DirichletData Dirichlet_data = curvilinear_mesh.GetDirichletData();\n\n````\n\n#### A complete Python example: [2D] curve projections for high order triangular elements\nAlthough all C++ methods are also available in Python, there are some convenience functions defined at Python level that can help shorten the script\n````python\n    # MAKE AN INSTANCE OF PostMeshCurve\n    curvilinear_mesh = PostMeshCurve(\"tri\",2)\n    curvilinear_mesh.SetScale(scale)\n    curvilinear_mesh.SetCondition(condition)\n    # SET MESH\n    curvilinear_mesh.SetMesh(elements=elements, points=points, edges=edges,\n        faces=np.zeros((1,4),dtype=np.uint64),spacing=nodal_spacing,scale_mesh=True)\n    curvilinear_mesh.SetProjectionPrecision(1.0e-04)\n    curvilinear_mesh.ComputeProjectionCriteria()\n    curvilinear_mesh.GetBoundaryPointsOrder()\n    # SET CAD GEOMETRY\n    curvilinear_mesh.SetGeometry(cad_filename)\n    # PERFORM POINT PROJECTION AND POINT INVERSION\n    curvilinear_mesh.PerformPointProjectionInversionCurve(projection_type=\"arc_length\")\n    # OBTAIN MODIFIED MESH POINTS - THIS IS NECESSARY TO ENSURE LINEAR MESH IS ALSO CORRECT\n    curvilinear_mesh.ReturnModifiedMeshPoints(points)\n    # OBTAIN DIRICHLET DATA - (THE DISPLACMENT OF BOUNDARY NODES)\n    Dirichlet_nodes, Dirichlet_values = curvilinear_mesh.GetDirichletData()\n````\n\n## Reference/Citation\nPostMesh can be cited as\n````latex\n@Article{Poya2016,\n    author=\"Poya, Roman and Sevilla, Ruben and Gil, Antonio J.\",\n    title=\"A unified approach for a posteriori high-order curved mesh generation using solid mechanics\",\n    journal=\"Computational Mechanics\",\n    year=\"2016\",\n    volume=\"58\",\n    number=\"3\",\n    pages=\"457--490\",\n    doi={10.1007/s00466-016-1302-2},\n    url={https://link.springer.com/article/10.1007/s00466-016-1302-2}\n}\n````\n\n## Disclaimer\nPostMesh does not directly produce curved volume meshes, but only curved surface meshes. As mentioned before, the former step can be achieved by relying on a solid mechanics solver.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/romeric/PostMesh", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PostMeshPy", "package_url": "https://pypi.org/project/PostMeshPy/", "platform": "", "project_url": "https://pypi.org/project/PostMeshPy/", "project_urls": {"Homepage": "https://github.com/romeric/PostMesh"}, "release_url": "https://pypi.org/project/PostMeshPy/1.6.1/", "requires_dist": ["numpy (>=1.9)", "cython (>=0.23)"], "requires_python": "", "summary": "A Python wrapper for PostMesh - a high order curvilinear mesh generator based on OpenCascade", "version": "1.6.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PostMesh</h1>\n\n\n<div>\n<img height=\"45%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d8cd7337363b001fc782b0fa5af8209baa1dc81/646f63732f616c6d6f6e642e706e67\" width=\"45%\">\n<img height=\"45%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0227af19d90490b87a4891f86b8c47d23e72f151/646f63732f6d65636832642e706e67\" width=\"45%\">\n<img height=\"45%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/daf863006c6735f67e76ed36f5a9321c76d0f78a/646f63732f77696e6732642e706e67\" width=\"45%\">\n<img height=\"45%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad7475f7cc77f56553bc56dd43d93548b11c8d17/646f63732f746f7275732e706e67\" width=\"45%\">\n<img height=\"95%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c5c7c8189afb96c290c1b55f4c3a179107ad089/646f63732f463649736f5f322e706e67\" width=\"95%\">\n<img height=\"95%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e8927b761624ec2d96b0d26cbf98fa5adff99cb/646f63732f6636424c5f35382e706e67\" width=\"95%\">\n<img height=\"95%\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31b7cf847be0c301c70171c4a486617e4c22f017/646f63732f4361725f3233732e706e67\" width=\"95%\">\n</div>\n<p><strong>PostMesh</strong> is a solid mechanics based a posteriori high order curvilinear mesh generator based on OpenCascade with C++, Cython and Python APIs. Its main goal is to serve as a bridge between CAD models and high order finite element schemes. Hence, it can be used as a plugin with various compiled and interpreted code-bases.</p>\n<h2>Philosophy</h2>\n<p>PostMesh is an a posteriori curvilinear mesh generator, in that it requires a linear mesh in advance. Higher order nodes are then placed on the linear mesh and the projection of these nodes to the exact boundary is computed with the CAD library and subsequently fed as the Dirichlet boundary condition to either a linear, a linearised or a non-linear solid mechanics problem.</p>\n<h2>Build Requirements</h2>\n<p>PostMesh depends on the following third party libraries:</p>\n<ul>\n<li><strong><a href=\"http://www.gnu.org/software/make\" rel=\"nofollow\">GNU make</a></strong>                     - build process</li>\n<li><strong>C++11 compatible compiler</strong>      - Rvalue references, variadic templates, lambdas etc</li>\n<li><strong><a href=\"http://www.opencascade.com\" rel=\"nofollow\">OpenCascade</a></strong>                  - CAD processing</li>\n<li><strong><a href=\"http://eigen.tuxfamily.org\" rel=\"nofollow\">Eigen</a></strong>                        - Matrix operations and SIMD vectorisation</li>\n<li><strong><a href=\"http://www.cython.org\" rel=\"nofollow\">Cython</a></strong>                       - Cython bindings</li>\n<li><strong><a href=\"http://www.numpy.org\" rel=\"nofollow\">NumPy</a></strong>                        - Python interface</li>\n</ul>\n<p>Installing these dependencies on unix based systems is straight-forward. For building OpenCascade on Debian based systems, do <code>apt-get install liboce-*</code>and on macOS <code>brew install oce</code>. Note that, the default location for <code>Eigen</code> and <code>OpenCascade</code> headers and libraries (under Linux and macOS) are <code>/usr/local/include/eigen/</code>, <code>/usr/local/include/oce/</code> and <code>/usr/local/lib</code>, respectively.</p>\n<h2>Installation</h2>\n<p>Both C++ and Python bindings are distributed through this repository. The Python module is available through PyPi</p>\n<pre><code>pip install PostMeshPy\n</code></pre>\n<p>To build PostMesh shared library for C++ API, you typically do</p>\n<pre><code>git clone https://github.com/romeric/PostMesh\ncd PostMesh\nmake\n[sudo] make install\n</code></pre>\n<p>To further build the C++ examples, (after building and installing PostMesh shared library) do</p>\n<pre><code>cd examples\nmake\n</code></pre>\n<p>To build Cython/Python bindings manually (make sure you are in PostMesh directory)</p>\n<pre><code>[sudo] python setup.py install\n</code></pre>\n<p>Or using pip</p>\n<pre><code>python setup.py build_ext\npython setup.py bdist_wheel\ncd ../ &amp;&amp; pip install PostMesh/dist/*.whl\n</code></pre>\n<h3>Usage</h3>\n<p>PostMesh provides a very intuitive objected oriented API. The interfaces are designed such that C++ and Python codes look and feel the same. Have a look at the examples directory for getting started with PostMesh. For conveninece, here are two complete examples.</p>\n<h4>A complete C++ example: [3D] surface projections for high order tetrahedral elements</h4>\n<pre>    <span class=\"c1\">// MAKE AN INSTANCE OF PostMeshSurface</span>\n    <span class=\"k\">auto</span> <span class=\"n\">curvilinear_mesh</span> <span class=\"o\">=</span> <span class=\"n\">PostMeshSurface</span><span class=\"p\">();</span>\n    <span class=\"c1\">// PASS MESH DATA TO PostMesh - PostMesh TAKES RAW POINTERS AS INPUT ARGUMENTS</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">SetMeshElements</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"p\">,</span> <span class=\"n\">elements_rows</span><span class=\"p\">,</span> <span class=\"n\">elements_cols</span><span class=\"p\">);</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">SetMeshPoints</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">,</span><span class=\"n\">points_rows</span><span class=\"p\">,</span> <span class=\"n\">points_cols</span><span class=\"p\">);</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">SetMeshEdges</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">edges_rows</span><span class=\"p\">,</span> <span class=\"n\">edges_cols</span><span class=\"p\">);</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">SetMeshFaces</span><span class=\"p\">(</span><span class=\"n\">faces</span><span class=\"p\">,</span>  <span class=\"n\">faces_rows</span><span class=\"p\">,</span>  <span class=\"n\">faces_cols</span><span class=\"p\">);</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">SetScale</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">);</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">SetCondition</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">);</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">SetProjectionPrecision</span><span class=\"p\">(</span><span class=\"n\">precision</span><span class=\"p\">);</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">ComputeProjectionCriteria</span><span class=\"p\">();</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">ScaleMesh</span><span class=\"p\">();</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">InferInterpolationPolynomialDegree</span><span class=\"p\">();</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">SetNodalSpacing</span><span class=\"p\">(</span><span class=\"n\">nodal_spacing</span><span class=\"p\">,</span> <span class=\"n\">nodal_spacing_rows</span><span class=\"p\">,</span> <span class=\"n\">nodal_spacing_cols</span><span class=\"p\">);</span>\n    <span class=\"c1\">// READ THE GEOMETRY FROM THE IGES FILE</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">ReadIGES</span><span class=\"p\">(</span><span class=\"n\">iges_filename</span><span class=\"p\">);</span>\n    <span class=\"c1\">// EXTRACT GEOMETRY INFORMATION FROM THE IGES FILE</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">GetGeomVertices</span><span class=\"p\">();</span>\n    <span class=\"c1\">// EXTRACT TRUE BOUNDARY FACES FROM CAD FILE</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">GetGeomFaces</span><span class=\"p\">();</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">GetGeomPointsOnCorrespondingFaces</span><span class=\"p\">();</span>\n    <span class=\"c1\">// FIRST IDENTIFY WHICH SURFACES CONTAIN WHICH FACES</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">IdentifySurfacesContainingFaces</span><span class=\"p\">();</span>\n    <span class=\"c1\">// PROJECT ALL BOUNDARY POINTS FROM THE MESH TO THE SURFACE</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">ProjectMeshOnSurface</span><span class=\"p\">();</span>\n    <span class=\"c1\">// PERFORM POINT INVERSION FOR THE INTERIOR POINTS (ORTHOGONAL POINT PROJECTION)</span>\n    <span class=\"c1\">// THE INPUT ARGUMENTS SPECIFY PROJECTION ON CURVE INTERSECTIONS</span>\n    <span class=\"c1\">// AND MODIFICATION OF THE LINEAR MESH IF NECESSARY</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">MeshPointInversionSurface</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"c1\">// OBTAIN MODIFIED MESH POINTS - THIS IS NECESSARY TO ENSURE LINEAR MESH IS ALSO CORRECT</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">ReturnModifiedMeshPoints</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">);</span>\n    <span class=\"c1\">// OBTAIN DIRICHLET DATA - (THE DISPLACMENT OF BOUNDARY NODES)</span>\n    <span class=\"n\">DirichletData</span> <span class=\"n\">Dirichlet_data</span> <span class=\"o\">=</span> <span class=\"n\">curvilinear_mesh</span><span class=\"p\">.</span><span class=\"n\">GetDirichletData</span><span class=\"p\">();</span>\n</pre>\n<h4>A complete Python example: [2D] curve projections for high order triangular elements</h4>\n<p>Although all C++ methods are also available in Python, there are some convenience functions defined at Python level that can help shorten the script</p>\n<pre>    <span class=\"c1\"># MAKE AN INSTANCE OF PostMeshCurve</span>\n    <span class=\"n\">curvilinear_mesh</span> <span class=\"o\">=</span> <span class=\"n\">PostMeshCurve</span><span class=\"p\">(</span><span class=\"s2\">\"tri\"</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">SetScale</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">)</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">SetCondition</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)</span>\n    <span class=\"c1\"># SET MESH</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">SetMesh</span><span class=\"p\">(</span><span class=\"n\">elements</span><span class=\"o\">=</span><span class=\"n\">elements</span><span class=\"p\">,</span> <span class=\"n\">points</span><span class=\"o\">=</span><span class=\"n\">points</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"o\">=</span><span class=\"n\">edges</span><span class=\"p\">,</span>\n        <span class=\"n\">faces</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint64</span><span class=\"p\">),</span><span class=\"n\">spacing</span><span class=\"o\">=</span><span class=\"n\">nodal_spacing</span><span class=\"p\">,</span><span class=\"n\">scale_mesh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">SetProjectionPrecision</span><span class=\"p\">(</span><span class=\"mf\">1.0e-04</span><span class=\"p\">)</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">ComputeProjectionCriteria</span><span class=\"p\">()</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">GetBoundaryPointsOrder</span><span class=\"p\">()</span>\n    <span class=\"c1\"># SET CAD GEOMETRY</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">SetGeometry</span><span class=\"p\">(</span><span class=\"n\">cad_filename</span><span class=\"p\">)</span>\n    <span class=\"c1\"># PERFORM POINT PROJECTION AND POINT INVERSION</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">PerformPointProjectionInversionCurve</span><span class=\"p\">(</span><span class=\"n\">projection_type</span><span class=\"o\">=</span><span class=\"s2\">\"arc_length\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># OBTAIN MODIFIED MESH POINTS - THIS IS NECESSARY TO ENSURE LINEAR MESH IS ALSO CORRECT</span>\n    <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">ReturnModifiedMeshPoints</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">)</span>\n    <span class=\"c1\"># OBTAIN DIRICHLET DATA - (THE DISPLACMENT OF BOUNDARY NODES)</span>\n    <span class=\"n\">Dirichlet_nodes</span><span class=\"p\">,</span> <span class=\"n\">Dirichlet_values</span> <span class=\"o\">=</span> <span class=\"n\">curvilinear_mesh</span><span class=\"o\">.</span><span class=\"n\">GetDirichletData</span><span class=\"p\">()</span>\n</pre>\n<h2>Reference/Citation</h2>\n<p>PostMesh can be cited as</p>\n<pre>@Article<span class=\"nb\">{</span>Poya2016,\n    author=\"Poya, Roman and Sevilla, Ruben and Gil, Antonio J.\",\n    title=\"A unified approach for a posteriori high-order curved mesh generation using solid mechanics\",\n    journal=\"Computational Mechanics\",\n    year=\"2016\",\n    volume=\"58\",\n    number=\"3\",\n    pages=\"457--490\",\n    doi=<span class=\"nb\">{</span>10.1007/s00466-016-1302-2<span class=\"nb\">}</span>,\n    url=<span class=\"nb\">{</span>https://link.springer.com/article/10.1007/s00466-016-1302-2<span class=\"nb\">}</span>\n<span class=\"nb\">}</span>\n</pre>\n<h2>Disclaimer</h2>\n<p>PostMesh does not directly produce curved volume meshes, but only curved surface meshes. As mentioned before, the former step can be achieved by relying on a solid mechanics solver.</p>\n\n          </div>"}, "last_serial": 3956105, "releases": {"1.6.1": [{"comment_text": "", "digests": {"md5": "326f4935e9c39a065a7803b1662ce7b3", "sha256": "8acda08e07c5bcabb8e08dcb75a21152838b917bafc893c7ad580f40d0ded99f"}, "downloads": -1, "filename": "PostMeshPy-1.6.1-cp27-cp27m-macosx_10_12_x86_64.whl", "has_sig": false, "md5_digest": "326f4935e9c39a065a7803b1662ce7b3", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 271269, "upload_time": "2018-06-13T02:28:07", "upload_time_iso_8601": "2018-06-13T02:28:07.246854Z", "url": "https://files.pythonhosted.org/packages/d8/44/f961a5eebf32886fbf84d5a07ca16e0daa04573fc11f7eb4b33aabf3e771/PostMeshPy-1.6.1-cp27-cp27m-macosx_10_12_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89296b4babd14a0bfd67403bfc22056f", "sha256": "405ef90d99d136dbbdc00f812611af6e3380654e268e9cf348638f3b7d83fae8"}, "downloads": -1, "filename": "PostMeshPy-1.6.1.tar.gz", "has_sig": false, "md5_digest": "89296b4babd14a0bfd67403bfc22056f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 211446, "upload_time": "2018-06-13T02:28:09", "upload_time_iso_8601": "2018-06-13T02:28:09.152863Z", "url": "https://files.pythonhosted.org/packages/2e/55/177ac6bbd4a976847e5c09f38b8c14310ab1c7175e1de94d9c8e8aac5763/PostMeshPy-1.6.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "326f4935e9c39a065a7803b1662ce7b3", "sha256": "8acda08e07c5bcabb8e08dcb75a21152838b917bafc893c7ad580f40d0ded99f"}, "downloads": -1, "filename": "PostMeshPy-1.6.1-cp27-cp27m-macosx_10_12_x86_64.whl", "has_sig": false, "md5_digest": "326f4935e9c39a065a7803b1662ce7b3", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 271269, "upload_time": "2018-06-13T02:28:07", "upload_time_iso_8601": "2018-06-13T02:28:07.246854Z", "url": "https://files.pythonhosted.org/packages/d8/44/f961a5eebf32886fbf84d5a07ca16e0daa04573fc11f7eb4b33aabf3e771/PostMeshPy-1.6.1-cp27-cp27m-macosx_10_12_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "89296b4babd14a0bfd67403bfc22056f", "sha256": "405ef90d99d136dbbdc00f812611af6e3380654e268e9cf348638f3b7d83fae8"}, "downloads": -1, "filename": "PostMeshPy-1.6.1.tar.gz", "has_sig": false, "md5_digest": "89296b4babd14a0bfd67403bfc22056f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 211446, "upload_time": "2018-06-13T02:28:09", "upload_time_iso_8601": "2018-06-13T02:28:09.152863Z", "url": "https://files.pythonhosted.org/packages/2e/55/177ac6bbd4a976847e5c09f38b8c14310ab1c7175e1de94d9c8e8aac5763/PostMeshPy-1.6.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:54 2020"}