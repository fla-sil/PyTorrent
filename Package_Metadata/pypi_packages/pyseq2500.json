{"info": {"author": "Kunal Pandit", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Programming Language :: Python :: 3"], "description": "# PySeq2500\nControl an Illumina HiSeq 2500 System Interactively\n\n# Initializing HiSeq\n\n```python\nimport pyseq\n\nhs = pyseq.HiSeq()                  \nhs.initializeCams()                \nhs.initializeInstruments()          # Initialize x,y,z & objective stages. Initialize lasers and optics (filters)\n```\n\nNote that the `pyseq.HiSeq()` constructor accepts serial ports assignments in case your setup is different, i.e:\n\n```python\nhs = pyseq.HiSeq(xCOM='COM67', yCOM='COM68', fpgaCOM=['COM10', 'COM11'], laser1COM='COM12', laser2COM='COM13')\n```\n\n# Basic setup of HiSeq\n\n```python\nhs.l1.set_power(100)                #Set green laser power to 100 mW\nhs.l2.set_power(100)                #Set red laser power to 100 mW\n\nhs.y.move(-180000)                  #Move stage to top right corner of Flow Cell A\nhs.x.move(17571)\nhs.z.move([21250, 21250, 21250])    #Raise z stage\n\nhs.obj.move(30000)                  #Move objective to middle-ish\n\nhs.move_ex(1,'open')                #Move excitation filter 1 to open position\nhs.move_ex(2,'open')                #Move excitation filter 2 to open position\n\nhs.l1.get_power()                   #Get green laser power (mW i think)\nhs.l2.get_power()                   #Get red laser power   (mW i think)\n```\n\n# Image acquisition\n\nThe following code takes a picture from each of the cameras, splits each image into 2, saves all 4 images, and writes a metafile. \nImages and metafile are saved in the directory set in `hs.image_path`.\n\n```python\n# Image destination path\nhs.image_path = 'C:\\\\Users\\\\Public\\\\Documents\\\\PySeq2500\\\\Images\\\\'\n\n# Take an image\nhs.take_picture(32, 128) # take_picture(# frames, bundle height, image_name)\n```\n\nNames of the images are `hs.cam1.left_emission + image_name`. The name of the metafile is just `image_name`. The `image_name` \nargument is optional, if not used it defaults to a time stamp.\n\nCurrently all of the image prefixes (`camN.L/R_emission`) are set to the emission wavelength in `hs.InitializeCams()`\n\nThe images are # frames x bundle height pixels long in the y dimension and 2048 pixels in the x dimension.\nChanging the # frames is probably the best way to change the length of the scan.\nOnly certain values are acceptable for the bundle height, I've just been using 128 as Illumina does.\n\nThe metafile contains info like time, stage position, laser power, filter settings. \n\n# Moving the stage\n\n```python\n# Positioning the stage\n# Currently all of the stages move to absolute positions that are defined in steps\nhs.y.move(Y)         # Y should be a number between -7000000 and 7500000\nhs.x.move(X)         # X should be between 1000 and 50000\nhs.z.move([Z, Z, Z]) # Z should be between 0 and 25000\n\nhs.obj.move(O)       # O should be between 0 and 65000\n```\n\nThe safest way to move the stage out to load slides onto it is `hs.move_stage_out()`. \n\nAlso I would first move the stage in the y direction, into the hiseq before moving it in the x direction because there are some knobs at the front of the hiseq that the stage can run into.\n\nDuring `hs.intializeInstruments()`, the staged is homed to **Y=0, X=30000, Z=0, and O=30000** (although there is no homing for the objective).\n\n# Setting up optics\nBefore taking a picture, the laser power should be set, the excitation filters should be set, and the emission filter should be in the light path. \n\n## Lasers\n\n```python\nhs.l1.set_power(100) # sets laser 1 (green) to 100 mW\nhs.l2.set_power(100) # sets laser 2 (red) to 100 mW\n\nhs.l1.get_power() # returns the power of laser 1 and stores it in hs.l1.power\nhs.l2.get_power() # returns the power of laser 2 and stores it in hs.l2.power\n```\n\nDuring `hs.initializeInstruments()`, both lasers are set to 10 mW\n\n## Filters\n\nDuring `hs.initializeInstruments()`, the excitation filters are homed to the block position and the emission filter is moved into the light path. \n\n```python\nhs.optics.move_ex(N, filter)\t\t#  moves the excitation filter wheel in the N (1 or 2) light path to the filter.\nhs.optics.ex_dict \t\t\t\t\t# stores the positions and names of the filters in a dictionary\nhs.optics.move_em_in(True/False) \t# \"True\" moves the emission filter into the light path, False moves it out.\n```\n\n# Automate a method/recipe on a HiSeq2500\nThe following files are needed to automate a method on a HiSeq 2500 System.\n 1. experiment config\n 1. method config\n 1. method recipe\n\nStart a method on a HiSeq2500 System.\n```\npyseq -c experiment config -n experiment name -o output path\n```\nSee usage of pyseq.\n```\npyseq -h, --help\n```\nSee installed methods.\n```\npyseq -l\n```\nSee a method config and method recipe. The example here is to see the config and recipe for a method called 4i.\n```\npyseq -m 4i\n```\n## Experiment Config\nThe experiment config has 4 sections.\n```\n[experiment]\n[sections]\n[valve24]\n[cycles]\n```\n### [experiment]\nexperiment details (required, unless noted)\n- method: name of installed method or path to method config file (string)\n- cycle: number of cycles to run (integer)\n- first flowcell: which flowcell to start first if running 2, optional (A or B)\n```\n[experiment]\nmethod = 4i            \ncycles = 2              \nfirst flowcell = A\n```\n### [sections]\nposition of sections on flowcell (required). `section name = F: LLx, LLy, URx, URy`\n- section name: name/id of section to image (string)\n- F: flowcell section is on (A or B)\n- LLx: lower left x coordinate of section, use slide ruler (float)\n- LLy: lower left y coordinate of section, use slide ruler (float)\n- URx: upper right x coordinate of section, use slide ruler (float)\n- URy: upper right y coordinate of section, use slide ruler (float)\n```\n[sections]\nsection1 = A: 15.5, 45, 10.5, 35\n```\n### [valve24]\nSpecify additional ports (optional). `N = name`\n- N: port number (integer)\n- Name: name of reagent (string)\n```\n[valve24]\n6 = GFAP\n7 = IBA1\n8 = AF547 + Cy5\n```\n### [cycles]\nSpecify cycle specific reagents (optional). `variablereagent N = name`\n- variablereagent: cycle dependent reagent in recipe, specified in method config (string)\n- N: cycle (integer)\n- name: reagent used for variablereagent at cycle N (string)\n```\n[cycles]\n1stab 1 = GFAP\n1stab 2 = IBA1\n2ndab 1 = AF547 + Cy5\n2ndab 2 = AF547 + Cy5\n```\n## Method Config\nThe method config has 2 sections.\n```\n[method]\n[valve24]\n```\n### [method]\nThe name of this section should match the name of the method.\nThe only required key in this section is **recipe** that has the path to the method recipe as its value.\n```\n[4i]\nrecipe = 4i_recipe.txt\n```\nThe other keys are optional.\n- **flush speed**: flowrate to flush lines with in uL/min (integer)\n- **flush volume**:  volume to flush line with in uL (integer)\n- **reagent speed**: flowrate to pump reagents during recipe in uL/min (integer)\n- **variable reagents**: name of variable ports in recipes that are cycle dependent (string)\n- **first port**: port to start recipe at on first cycle (string)\n- **barrels per lane**: number of syringe barrels that are used per lane on flowcell (integer)\n- **laser power**: set power of laser in mW (integer)\n```\n[4i]\nrecipe = 4i_recipe.txt\nflush speed = 500\nflush volume = 1000\nreagent speed = 200\nvariable reagents = 1stab, 2ndab\nfirst port = blocking\nbarrels per lane = 8\nlaser power = 400\n```\n### [valve24]\nSpecify method required ports (optional). `N = name`\n- N: port number (integer)\n- Name: name of reagent (string)\n```\n[valve24]\n1 = PBS\n2 = water\n3 = elution\n4 = blocking\n5 = imaging\n```\n## Method Recipe\nThere are 5 basic actions to build a recipe.\n1. **PORT**: *port name* (string)\n>Valve switches to specified port.\n```\nPORT: water\n```\n2. **PUMP**: *pump volume in uL* (integer)\n>Syringe pump draws specified volume through flowcell lane.\n```\nPUMP: 2000\n```\n3. **HOLD**: *hold time in min.* (integer)\n>Recipe pauses for specified time.\n```\nHOLD: 10\n```\n4. **WAIT**: ***IMAG** or port name* (string)\n>Recipe waits to continue until the other flowcell is imaging (**IMAG**) or switches to *port name*. If there is only one flowcell, **WAIT** is ignored.\n```\nWAIT: water\n```\n5. **IMAG**: *z focal planes* (integer)\n>The flowcell is imaged at the specified number of z focal planes at the sections listed in the experiment config.\n```\nIMAG: 15\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nygctech/PySeq2500", "keywords": "sequencing,HiSeq,automation,biology", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyseq2500", "package_url": "https://pypi.org/project/pyseq2500/", "platform": "", "project_url": "https://pypi.org/project/pyseq2500/", "project_urls": {"Bug Reports": "https://github.com/nygctech/PySeq2500/issues", "Homepage": "https://github.com/nygctech/PySeq2500", "Source": "https://github.com/nygctech/PySeq2500", "Support": "https://www.hackteria.org/wiki/HiSeq2000_-_Next_Level_Hacking#Control_Software"}, "release_url": "https://pypi.org/project/pyseq2500/0.4/", "requires_dist": ["pyserial (>=3)", "numpy", "scipy", "imageio"], "requires_python": ">=3.5", "summary": "Control an Illumina HiSeq 2500 System", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PySeq2500</h1>\n<p>Control an Illumina HiSeq 2500 System Interactively</p>\n<h1>Initializing HiSeq</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyseq</span>\n\n<span class=\"n\">hs</span> <span class=\"o\">=</span> <span class=\"n\">pyseq</span><span class=\"o\">.</span><span class=\"n\">HiSeq</span><span class=\"p\">()</span>                  \n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">initializeCams</span><span class=\"p\">()</span>                \n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">initializeInstruments</span><span class=\"p\">()</span>          <span class=\"c1\"># Initialize x,y,z &amp; objective stages. Initialize lasers and optics (filters)</span>\n</pre>\n<p>Note that the <code>pyseq.HiSeq()</code> constructor accepts serial ports assignments in case your setup is different, i.e:</p>\n<pre><span class=\"n\">hs</span> <span class=\"o\">=</span> <span class=\"n\">pyseq</span><span class=\"o\">.</span><span class=\"n\">HiSeq</span><span class=\"p\">(</span><span class=\"n\">xCOM</span><span class=\"o\">=</span><span class=\"s1\">'COM67'</span><span class=\"p\">,</span> <span class=\"n\">yCOM</span><span class=\"o\">=</span><span class=\"s1\">'COM68'</span><span class=\"p\">,</span> <span class=\"n\">fpgaCOM</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'COM10'</span><span class=\"p\">,</span> <span class=\"s1\">'COM11'</span><span class=\"p\">],</span> <span class=\"n\">laser1COM</span><span class=\"o\">=</span><span class=\"s1\">'COM12'</span><span class=\"p\">,</span> <span class=\"n\">laser2COM</span><span class=\"o\">=</span><span class=\"s1\">'COM13'</span><span class=\"p\">)</span>\n</pre>\n<h1>Basic setup of HiSeq</h1>\n<pre><span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">set_power</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>                <span class=\"c1\">#Set green laser power to 100 mW</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">l2</span><span class=\"o\">.</span><span class=\"n\">set_power</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>                <span class=\"c1\">#Set red laser power to 100 mW</span>\n\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">180000</span><span class=\"p\">)</span>                  <span class=\"c1\">#Move stage to top right corner of Flow Cell A</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">17571</span><span class=\"p\">)</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">([</span><span class=\"mi\">21250</span><span class=\"p\">,</span> <span class=\"mi\">21250</span><span class=\"p\">,</span> <span class=\"mi\">21250</span><span class=\"p\">])</span>    <span class=\"c1\">#Raise z stage</span>\n\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"mi\">30000</span><span class=\"p\">)</span>                  <span class=\"c1\">#Move objective to middle-ish</span>\n\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">move_ex</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s1\">'open'</span><span class=\"p\">)</span>                <span class=\"c1\">#Move excitation filter 1 to open position</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">move_ex</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s1\">'open'</span><span class=\"p\">)</span>                <span class=\"c1\">#Move excitation filter 2 to open position</span>\n\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">get_power</span><span class=\"p\">()</span>                   <span class=\"c1\">#Get green laser power (mW i think)</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">l2</span><span class=\"o\">.</span><span class=\"n\">get_power</span><span class=\"p\">()</span>                   <span class=\"c1\">#Get red laser power   (mW i think)</span>\n</pre>\n<h1>Image acquisition</h1>\n<p>The following code takes a picture from each of the cameras, splits each image into 2, saves all 4 images, and writes a metafile.\nImages and metafile are saved in the directory set in <code>hs.image_path</code>.</p>\n<pre><span class=\"c1\"># Image destination path</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">image_path</span> <span class=\"o\">=</span> <span class=\"s1\">'C:</span><span class=\"se\">\\\\</span><span class=\"s1\">Users</span><span class=\"se\">\\\\</span><span class=\"s1\">Public</span><span class=\"se\">\\\\</span><span class=\"s1\">Documents</span><span class=\"se\">\\\\</span><span class=\"s1\">PySeq2500</span><span class=\"se\">\\\\</span><span class=\"s1\">Images</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span>\n\n<span class=\"c1\"># Take an image</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">take_picture</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span> <span class=\"c1\"># take_picture(# frames, bundle height, image_name)</span>\n</pre>\n<p>Names of the images are <code>hs.cam1.left_emission + image_name</code>. The name of the metafile is just <code>image_name</code>. The <code>image_name</code>\nargument is optional, if not used it defaults to a time stamp.</p>\n<p>Currently all of the image prefixes (<code>camN.L/R_emission</code>) are set to the emission wavelength in <code>hs.InitializeCams()</code></p>\n<p>The images are # frames x bundle height pixels long in the y dimension and 2048 pixels in the x dimension.\nChanging the # frames is probably the best way to change the length of the scan.\nOnly certain values are acceptable for the bundle height, I've just been using 128 as Illumina does.</p>\n<p>The metafile contains info like time, stage position, laser power, filter settings.</p>\n<h1>Moving the stage</h1>\n<pre><span class=\"c1\"># Positioning the stage</span>\n<span class=\"c1\"># Currently all of the stages move to absolute positions that are defined in steps</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">Y</span><span class=\"p\">)</span>         <span class=\"c1\"># Y should be a number between -7000000 and 7500000</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>         <span class=\"c1\"># X should be between 1000 and 50000</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">([</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">Z</span><span class=\"p\">])</span> <span class=\"c1\"># Z should be between 0 and 25000</span>\n\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">O</span><span class=\"p\">)</span>       <span class=\"c1\"># O should be between 0 and 65000</span>\n</pre>\n<p>The safest way to move the stage out to load slides onto it is <code>hs.move_stage_out()</code>.</p>\n<p>Also I would first move the stage in the y direction, into the hiseq before moving it in the x direction because there are some knobs at the front of the hiseq that the stage can run into.</p>\n<p>During <code>hs.intializeInstruments()</code>, the staged is homed to <strong>Y=0, X=30000, Z=0, and O=30000</strong> (although there is no homing for the objective).</p>\n<h1>Setting up optics</h1>\n<p>Before taking a picture, the laser power should be set, the excitation filters should be set, and the emission filter should be in the light path.</p>\n<h2>Lasers</h2>\n<pre><span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">set_power</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"c1\"># sets laser 1 (green) to 100 mW</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">l2</span><span class=\"o\">.</span><span class=\"n\">set_power</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"c1\"># sets laser 2 (red) to 100 mW</span>\n\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">l1</span><span class=\"o\">.</span><span class=\"n\">get_power</span><span class=\"p\">()</span> <span class=\"c1\"># returns the power of laser 1 and stores it in hs.l1.power</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">l2</span><span class=\"o\">.</span><span class=\"n\">get_power</span><span class=\"p\">()</span> <span class=\"c1\"># returns the power of laser 2 and stores it in hs.l2.power</span>\n</pre>\n<p>During <code>hs.initializeInstruments()</code>, both lasers are set to 10 mW</p>\n<h2>Filters</h2>\n<p>During <code>hs.initializeInstruments()</code>, the excitation filters are homed to the block position and the emission filter is moved into the light path.</p>\n<pre><span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">optics</span><span class=\"o\">.</span><span class=\"n\">move_ex</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"p\">)</span>\t\t<span class=\"c1\">#  moves the excitation filter wheel in the N (1 or 2) light path to the filter.</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">optics</span><span class=\"o\">.</span><span class=\"n\">ex_dict</span> \t\t\t\t\t<span class=\"c1\"># stores the positions and names of the filters in a dictionary</span>\n<span class=\"n\">hs</span><span class=\"o\">.</span><span class=\"n\">optics</span><span class=\"o\">.</span><span class=\"n\">move_em_in</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"o\">/</span><span class=\"kc\">False</span><span class=\"p\">)</span> \t<span class=\"c1\"># \"True\" moves the emission filter into the light path, False moves it out.</span>\n</pre>\n<h1>Automate a method/recipe on a HiSeq2500</h1>\n<p>The following files are needed to automate a method on a HiSeq 2500 System.</p>\n<ol>\n<li>experiment config</li>\n<li>method config</li>\n<li>method recipe</li>\n</ol>\n<p>Start a method on a HiSeq2500 System.</p>\n<pre><code>pyseq -c experiment config -n experiment name -o output path\n</code></pre>\n<p>See usage of pyseq.</p>\n<pre><code>pyseq -h, --help\n</code></pre>\n<p>See installed methods.</p>\n<pre><code>pyseq -l\n</code></pre>\n<p>See a method config and method recipe. The example here is to see the config and recipe for a method called 4i.</p>\n<pre><code>pyseq -m 4i\n</code></pre>\n<h2>Experiment Config</h2>\n<p>The experiment config has 4 sections.</p>\n<pre><code>[experiment]\n[sections]\n[valve24]\n[cycles]\n</code></pre>\n<h3>[experiment]</h3>\n<p>experiment details (required, unless noted)</p>\n<ul>\n<li>method: name of installed method or path to method config file (string)</li>\n<li>cycle: number of cycles to run (integer)</li>\n<li>first flowcell: which flowcell to start first if running 2, optional (A or B)</li>\n</ul>\n<pre><code>[experiment]\nmethod = 4i            \ncycles = 2              \nfirst flowcell = A\n</code></pre>\n<h3>[sections]</h3>\n<p>position of sections on flowcell (required). <code>section name = F: LLx, LLy, URx, URy</code></p>\n<ul>\n<li>section name: name/id of section to image (string)</li>\n<li>F: flowcell section is on (A or B)</li>\n<li>LLx: lower left x coordinate of section, use slide ruler (float)</li>\n<li>LLy: lower left y coordinate of section, use slide ruler (float)</li>\n<li>URx: upper right x coordinate of section, use slide ruler (float)</li>\n<li>URy: upper right y coordinate of section, use slide ruler (float)</li>\n</ul>\n<pre><code>[sections]\nsection1 = A: 15.5, 45, 10.5, 35\n</code></pre>\n<h3>[valve24]</h3>\n<p>Specify additional ports (optional). <code>N = name</code></p>\n<ul>\n<li>N: port number (integer)</li>\n<li>Name: name of reagent (string)</li>\n</ul>\n<pre><code>[valve24]\n6 = GFAP\n7 = IBA1\n8 = AF547 + Cy5\n</code></pre>\n<h3>[cycles]</h3>\n<p>Specify cycle specific reagents (optional). <code>variablereagent N = name</code></p>\n<ul>\n<li>variablereagent: cycle dependent reagent in recipe, specified in method config (string)</li>\n<li>N: cycle (integer)</li>\n<li>name: reagent used for variablereagent at cycle N (string)</li>\n</ul>\n<pre><code>[cycles]\n1stab 1 = GFAP\n1stab 2 = IBA1\n2ndab 1 = AF547 + Cy5\n2ndab 2 = AF547 + Cy5\n</code></pre>\n<h2>Method Config</h2>\n<p>The method config has 2 sections.</p>\n<pre><code>[method]\n[valve24]\n</code></pre>\n<h3>[method]</h3>\n<p>The name of this section should match the name of the method.\nThe only required key in this section is <strong>recipe</strong> that has the path to the method recipe as its value.</p>\n<pre><code>[4i]\nrecipe = 4i_recipe.txt\n</code></pre>\n<p>The other keys are optional.</p>\n<ul>\n<li><strong>flush speed</strong>: flowrate to flush lines with in uL/min (integer)</li>\n<li><strong>flush volume</strong>:  volume to flush line with in uL (integer)</li>\n<li><strong>reagent speed</strong>: flowrate to pump reagents during recipe in uL/min (integer)</li>\n<li><strong>variable reagents</strong>: name of variable ports in recipes that are cycle dependent (string)</li>\n<li><strong>first port</strong>: port to start recipe at on first cycle (string)</li>\n<li><strong>barrels per lane</strong>: number of syringe barrels that are used per lane on flowcell (integer)</li>\n<li><strong>laser power</strong>: set power of laser in mW (integer)</li>\n</ul>\n<pre><code>[4i]\nrecipe = 4i_recipe.txt\nflush speed = 500\nflush volume = 1000\nreagent speed = 200\nvariable reagents = 1stab, 2ndab\nfirst port = blocking\nbarrels per lane = 8\nlaser power = 400\n</code></pre>\n<h3>[valve24]</h3>\n<p>Specify method required ports (optional). <code>N = name</code></p>\n<ul>\n<li>N: port number (integer)</li>\n<li>Name: name of reagent (string)</li>\n</ul>\n<pre><code>[valve24]\n1 = PBS\n2 = water\n3 = elution\n4 = blocking\n5 = imaging\n</code></pre>\n<h2>Method Recipe</h2>\n<p>There are 5 basic actions to build a recipe.</p>\n<ol>\n<li><strong>PORT</strong>: <em>port name</em> (string)</li>\n</ol>\n<blockquote>\n<p>Valve switches to specified port.</p>\n</blockquote>\n<pre><code>PORT: water\n</code></pre>\n<ol>\n<li><strong>PUMP</strong>: <em>pump volume in uL</em> (integer)</li>\n</ol>\n<blockquote>\n<p>Syringe pump draws specified volume through flowcell lane.</p>\n</blockquote>\n<pre><code>PUMP: 2000\n</code></pre>\n<ol>\n<li><strong>HOLD</strong>: <em>hold time in min.</em> (integer)</li>\n</ol>\n<blockquote>\n<p>Recipe pauses for specified time.</p>\n</blockquote>\n<pre><code>HOLD: 10\n</code></pre>\n<ol>\n<li><strong>WAIT</strong>: <em><strong>IMAG</strong> or port name</em> (string)</li>\n</ol>\n<blockquote>\n<p>Recipe waits to continue until the other flowcell is imaging (<strong>IMAG</strong>) or switches to <em>port name</em>. If there is only one flowcell, <strong>WAIT</strong> is ignored.</p>\n</blockquote>\n<pre><code>WAIT: water\n</code></pre>\n<ol>\n<li><strong>IMAG</strong>: <em>z focal planes</em> (integer)</li>\n</ol>\n<blockquote>\n<p>The flowcell is imaged at the specified number of z focal planes at the sections listed in the experiment config.</p>\n</blockquote>\n<pre><code>IMAG: 15\n</code></pre>\n\n          </div>"}, "last_serial": 6866972, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c8d4efe28187ce3f4d58730ffea8f75a", "sha256": "c6bf6c1bf95bd40dcbc78101e85087cc2e573b680cd50695863b31e5fe39a137"}, "downloads": -1, "filename": "pyseq2500-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c8d4efe28187ce3f4d58730ffea8f75a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 40344, "upload_time": "2020-03-18T16:08:41", "upload_time_iso_8601": "2020-03-18T16:08:41.919780Z", "url": "https://files.pythonhosted.org/packages/ab/93/10aef6af27e3857826397a758fee367c41476a7bfb2b0d3cd1d76e0802e8/pyseq2500-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e9ef2b7f5e8f28f128f7b4dcba0caf38", "sha256": "0868d23283c88197c9ac0e3122c80cc89a86ca5bff609b2c5ccfcd9b172fb0b4"}, "downloads": -1, "filename": "pyseq2500-0.1.tar.gz", "has_sig": false, "md5_digest": "e9ef2b7f5e8f28f128f7b4dcba0caf38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 35951, "upload_time": "2020-03-18T16:08:44", "upload_time_iso_8601": "2020-03-18T16:08:44.162254Z", "url": "https://files.pythonhosted.org/packages/72/22/9d8b1e8ed8de1cb7430ddef030cf6d139bd617135b5fb5131e76667b0619/pyseq2500-0.1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "a3b6e2685ad85090132cb6f0e60ae333", "sha256": "ec2a7342bbbacdd23f02043e4851ccab3f7216b6010fe4b29ccee203cc1ca76d"}, "downloads": -1, "filename": "pyseq2500-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a3b6e2685ad85090132cb6f0e60ae333", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 53928, "upload_time": "2020-03-23T17:06:38", "upload_time_iso_8601": "2020-03-23T17:06:38.704158Z", "url": "https://files.pythonhosted.org/packages/c3/34/87109e9736291e4c2dd8c0f8bf0513437fb06abb3c06239a0c94b6d5e710/pyseq2500-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce0b6b4f5efd5c73641354d78c0bd440", "sha256": "18f217d6c3b4ce3a3762b2c7b5c9cc646b576660f2a8568e69a25df8d89223b3"}, "downloads": -1, "filename": "pyseq2500-0.4.tar.gz", "has_sig": false, "md5_digest": "ce0b6b4f5efd5c73641354d78c0bd440", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 42151, "upload_time": "2020-03-23T17:06:41", "upload_time_iso_8601": "2020-03-23T17:06:41.034097Z", "url": "https://files.pythonhosted.org/packages/99/98/8b7e2cc59538dd661ebaa02879f7546867a589498eb11664f325692f7b9d/pyseq2500-0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3b6e2685ad85090132cb6f0e60ae333", "sha256": "ec2a7342bbbacdd23f02043e4851ccab3f7216b6010fe4b29ccee203cc1ca76d"}, "downloads": -1, "filename": "pyseq2500-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a3b6e2685ad85090132cb6f0e60ae333", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 53928, "upload_time": "2020-03-23T17:06:38", "upload_time_iso_8601": "2020-03-23T17:06:38.704158Z", "url": "https://files.pythonhosted.org/packages/c3/34/87109e9736291e4c2dd8c0f8bf0513437fb06abb3c06239a0c94b6d5e710/pyseq2500-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ce0b6b4f5efd5c73641354d78c0bd440", "sha256": "18f217d6c3b4ce3a3762b2c7b5c9cc646b576660f2a8568e69a25df8d89223b3"}, "downloads": -1, "filename": "pyseq2500-0.4.tar.gz", "has_sig": false, "md5_digest": "ce0b6b4f5efd5c73641354d78c0bd440", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 42151, "upload_time": "2020-03-23T17:06:41", "upload_time_iso_8601": "2020-03-23T17:06:41.034097Z", "url": "https://files.pythonhosted.org/packages/99/98/8b7e2cc59538dd661ebaa02879f7546867a589498eb11664f325692f7b9d/pyseq2500-0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:06 2020"}