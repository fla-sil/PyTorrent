{"info": {"author": "Gaurav Sood, Atul Dhingra, Suriyan Laohaprapanon", "author_email": "gsood07@gmail.com, dhingra.atul92@gmail.com, suriyant@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "naampy: Infer Sociodemographic Characteristics from Indian Names\n----------------------------------------------------------------\n\n.. image:: https://travis-ci.org/appeler/naampy.svg?branch=master\n    :target: https://travis-ci.org/appeler/naampy\n.. image:: https://ci.appveyor.com/api/projects/status/q4wr4clilf4samlk?svg=true\n    :target: https://ci.appveyor.com/project/soodoku/naampy\n.. image:: https://img.shields.io/pypi/v/naampy.svg\n    :target: https://pypi.python.org/pypi/naampy\n.. image:: https://pepy.tech/badge/naampy\n    :target: https://pepy.tech/project/naampy\n\n\nThe ability to programmatically reliably infer social attributes of a person from their name can be useful for a broad set of tasks, from estimating bias in coverage of women in the media to estimating bias in lending against certain social groups. But unlike the American Census Bureau, which produces a list of last names and first names, which can (and are) used to infer the gender, race, ethnicity, etc. from names, the Indian government produces no such commensurate datasets. And hence inferring the relationship between gender, ethnicity, language group, etc. and names has generally been done with small datasets constructed in an ad-hoc manner.\n\nWe fill this yawning gap. Using data from the `Indian Electoral Rolls <https://github.com/in-rolls/electoral_rolls>`__ (parsed data `here <https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/MUEGDT>`__), we estimate the proportion female, male, and `third sex` (see `here <https://en.wikipedia.org/wiki/Third_gender>`__) for a particular `first name, year, and state.`\n\nData\n~~~~\n\nIn all, we capitalize on information in the parsed electoral rolls from the following 12 states and union territories: \n\n* Andaman\n* Andhra Pradesh\n* Dadra\n* Daman\n* Goa\n* Jammu and Kashmir\n* Manipur\n* Meghalaya\n* Mizoram\n* Nagaland\n* Puducherry\n\nHow is the underlying data produced?\n====================================\n\nWe split the name into first name and last name (see the python notebook for how we do this) and then aggregate per state and first_name, and tabulate `prop_male, prop_female, prop_third_gender, n_female, n_male, n_third_gender`\n\nThis is used to provide the base prediction.\n\nGiven the association between prop_female and first_name may change over time, we exploited the age. Given the data were collected in 2017, we calculate the year each person was born and then do a group by year to create `prop_male, prop_female, prop_third_gender, n_female, n_male, n_third_gender`\n\nIssues with underlying data\n==============================\n\nConcerns:\n\n* Voting registration lists may not be accurate, systematically underrepresenting the poor, minorities, etc.\n* Voting registrations lists at best reflect the adult citizens. But to the extent that prejudice against women, etc., prevents some kinds of people to reach adulthood, the data bakes those biased in.\n* Indian names are complicated. We do not have good parsers for them yet. We have gone for the default arrangement. Please go through the notebook to look at the judgments we make. We plan to improve the underlying data over time.\n\nGender Classifier\n~~~~~~~~~~~~~~~~~\n\nWe start by providing a base model for first\\_name that gives the Bayes\noptimal solution providing the proportion of women with that name who\nare women. We also provide a series of base models where the state of\nresidence is known. In the future, we plan to use LSTM to learn the relationship between\nsequences of characters in the first name and gender.\n\nInstallation\n~~~~~~~~~~~~~~\n\nWe strongly recommend installing `naampy` inside a Python virtual environment (see `venv documentation <https://docs.python.org/3/library/venv.html#creating-virtual-environments>`__)\n\n::\n\n    pip install naampy\n\n\nUsage\n~~~~~\n\n::\n\n    usage: in_rolls_fn_gender [-h] -f FIRST_NAME\n                            [-s {andaman,andhra,arunachal,dadra,daman,goa,jk,manipur,meghalaya,mizoram,nagaland,puducherry}]\n                            [-y YEAR] [-o OUTPUT]\n                            input\n\n    Appends Electoral roll columns for prop_female, n_female, n_male\n    n_third_gender by first name\n\n    positional arguments:\n    input                 Input file\n\n    optional arguments:\n    -h, --help            show this help message and exit\n    -f FIRST_NAME, --first-name FIRST_NAME\n                            Name or index location of column contains the first\n                            name\n    -s {andaman,andhra,arunachal,dadra,daman,goa,jk,manipur,meghalaya,mizoram,nagaland,puducherry},\n    --state {andaman,andhra,arunachal,dadra,daman,goa,jk,manipur,meghalaya,mizoram,nagaland,puducherry}\n                            State name of Indian electoral rolls data\n                            (default=all)\n    -y YEAR, --year YEAR  Birth year in Indian electoral rolls data\n                            (default=all)\n    -o OUTPUT, --output OUTPUT\n                            Output file with Indian electoral rolls data columns\n\n\nUsing naampy\n~~~~~~~~~~~~\n\n::\n\n    >>> import pandas as pd\n    >>> from naampy import in_rolls_fn_gender\n\n    >>> names = [{'name': 'yoga'},\n    ...          {'name': 'yasmin'},\n    ...          {'name': 'siri'},\n    ...          {'name': 'vivek'}]\n\n    >>> df = pd.DataFrame(names)\n\n    >>> in_rolls_fn_gender(df, 'name')\n        name  n_male  n_female  n_third_gender  prop_female  prop_male  prop_third_gender\n    0    yoga     202       150               0     0.426136   0.573864                0.0\n    1  yasmin      24      2635               0     0.990974   0.009026                0.0\n    2    siri     115       556               0     0.828614   0.171386                0.0\n    3   vivek    2252        13               0     0.005740   0.994260                0.0\n\n    >>> help(in_rolls_fn_gender)\n    Help on method in_rolls_fn_gender in module naampy.in_rolls_fn:\n\n    in_rolls_fn_gender(df, namecol, state=None, year=None) method of builtins.type instance\n        Appends additional columns from Female ratio data to the input DataFrame\n        based on the first name.\n\n        Removes extra space. Checks if the name is the Indian electoral rolls data.\n        If it is, outputs data from that row.\n\n        Args:\n            df (:obj:`DataFrame`): Pandas DataFrame containing the first name\n                column.\n            namecol (str or int): Column's name or location of the name in\n                DataFrame.\n            state (str): The state name of Indian electoral rolls data to be used.\n                (default is None for all states)\n            year (int): The year of Indian electoral rolls to be used.\n                (default is None for all years)\n\n        Returns:\n            DataFrame: Pandas DataFrame with additional columns:-\n                'n_female', 'n_male', 'n_third_gender',\n                'prop_female', 'prop_male', 'prop_third_gender' by first name\n\nAuthors\n~~~~~~~\n\nSuriyan Laohaprapanon and Gaurav Sood\n\nLicense\n~~~~~~~\n\nThe package is released under the `MIT\nLicense <https://opensource.org/licenses/MIT>`__.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/appeler/naampy", "keywords": "gender names", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "naampy", "package_url": "https://pypi.org/project/naampy/", "platform": "", "project_url": "https://pypi.org/project/naampy/", "project_urls": {"Homepage": "https://github.com/appeler/naampy"}, "release_url": "https://pypi.org/project/naampy/0.2.0/", "requires_dist": ["pandas (>=0.19.2)", "check-manifest; extra == 'dev'", "coverage; extra == 'test'"], "requires_python": "", "summary": "Infer Gender from Indian Names", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/appeler/naampy\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/appeler/naampy.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e44e4f603d768988d25e405afda2cbb166444753/68747470733a2f2f7472617669732d63692e6f72672f617070656c65722f6e61616d70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/soodoku/naampy\" rel=\"nofollow\"><img alt=\"https://ci.appveyor.com/api/projects/status/q4wr4clilf4samlk?svg=true\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4afa34b2c3ad07f33486fd040ddd4ec457bd5c45/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f7134777234636c696c663473616d6c6b3f7376673d74727565\"></a>\n<a href=\"https://pypi.python.org/pypi/naampy\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/naampy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c32d7accbcac5512b223d8aef945411ef8e85b2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6e61616d70792e737667\"></a>\n<a href=\"https://pepy.tech/project/naampy\" rel=\"nofollow\"><img alt=\"https://pepy.tech/badge/naampy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b63ae57a636d1daf0970ca98f70aa4f0ac1d508/68747470733a2f2f706570792e746563682f62616467652f6e61616d7079\"></a>\n<p>The ability to programmatically reliably infer social attributes of a person from their name can be useful for a broad set of tasks, from estimating bias in coverage of women in the media to estimating bias in lending against certain social groups. But unlike the American Census Bureau, which produces a list of last names and first names, which can (and are) used to infer the gender, race, ethnicity, etc. from names, the Indian government produces no such commensurate datasets. And hence inferring the relationship between gender, ethnicity, language group, etc. and names has generally been done with small datasets constructed in an ad-hoc manner.</p>\n<p>We fill this yawning gap. Using data from the <a href=\"https://github.com/in-rolls/electoral_rolls\" rel=\"nofollow\">Indian Electoral Rolls</a> (parsed data <a href=\"https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/MUEGDT\" rel=\"nofollow\">here</a>), we estimate the proportion female, male, and <cite>third sex</cite> (see <a href=\"https://en.wikipedia.org/wiki/Third_gender\" rel=\"nofollow\">here</a>) for a particular <cite>first name, year, and state.</cite></p>\n<div id=\"data\">\n<h2>Data</h2>\n<p>In all, we capitalize on information in the parsed electoral rolls from the following 12 states and union territories:</p>\n<ul>\n<li>Andaman</li>\n<li>Andhra Pradesh</li>\n<li>Dadra</li>\n<li>Daman</li>\n<li>Goa</li>\n<li>Jammu and Kashmir</li>\n<li>Manipur</li>\n<li>Meghalaya</li>\n<li>Mizoram</li>\n<li>Nagaland</li>\n<li>Puducherry</li>\n</ul>\n<div id=\"how-is-the-underlying-data-produced\">\n<h3>How is the underlying data produced?</h3>\n<p>We split the name into first name and last name (see the python notebook for how we do this) and then aggregate per state and first_name, and tabulate <cite>prop_male, prop_female, prop_third_gender, n_female, n_male, n_third_gender</cite></p>\n<p>This is used to provide the base prediction.</p>\n<p>Given the association between prop_female and first_name may change over time, we exploited the age. Given the data were collected in 2017, we calculate the year each person was born and then do a group by year to create <cite>prop_male, prop_female, prop_third_gender, n_female, n_male, n_third_gender</cite></p>\n</div>\n<div id=\"issues-with-underlying-data\">\n<h3>Issues with underlying data</h3>\n<p>Concerns:</p>\n<ul>\n<li>Voting registration lists may not be accurate, systematically underrepresenting the poor, minorities, etc.</li>\n<li>Voting registrations lists at best reflect the adult citizens. But to the extent that prejudice against women, etc., prevents some kinds of people to reach adulthood, the data bakes those biased in.</li>\n<li>Indian names are complicated. We do not have good parsers for them yet. We have gone for the default arrangement. Please go through the notebook to look at the judgments we make. We plan to improve the underlying data over time.</li>\n</ul>\n</div>\n</div>\n<div id=\"gender-classifier\">\n<h2>Gender Classifier</h2>\n<p>We start by providing a base model for first_name that gives the Bayes\noptimal solution providing the proportion of women with that name who\nare women. We also provide a series of base models where the state of\nresidence is known. In the future, we plan to use LSTM to learn the relationship between\nsequences of characters in the first name and gender.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>We strongly recommend installing <cite>naampy</cite> inside a Python virtual environment (see <a href=\"https://docs.python.org/3/library/venv.html#creating-virtual-environments\" rel=\"nofollow\">venv documentation</a>)</p>\n<pre>pip install naampy\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>usage: in_rolls_fn_gender [-h] -f FIRST_NAME\n                        [-s {andaman,andhra,arunachal,dadra,daman,goa,jk,manipur,meghalaya,mizoram,nagaland,puducherry}]\n                        [-y YEAR] [-o OUTPUT]\n                        input\n\nAppends Electoral roll columns for prop_female, n_female, n_male\nn_third_gender by first name\n\npositional arguments:\ninput                 Input file\n\noptional arguments:\n-h, --help            show this help message and exit\n-f FIRST_NAME, --first-name FIRST_NAME\n                        Name or index location of column contains the first\n                        name\n-s {andaman,andhra,arunachal,dadra,daman,goa,jk,manipur,meghalaya,mizoram,nagaland,puducherry},\n--state {andaman,andhra,arunachal,dadra,daman,goa,jk,manipur,meghalaya,mizoram,nagaland,puducherry}\n                        State name of Indian electoral rolls data\n                        (default=all)\n-y YEAR, --year YEAR  Birth year in Indian electoral rolls data\n                        (default=all)\n-o OUTPUT, --output OUTPUT\n                        Output file with Indian electoral rolls data columns\n</pre>\n</div>\n<div id=\"using-naampy\">\n<h2>Using naampy</h2>\n<pre>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from naampy import in_rolls_fn_gender\n\n&gt;&gt;&gt; names = [{'name': 'yoga'},\n...          {'name': 'yasmin'},\n...          {'name': 'siri'},\n...          {'name': 'vivek'}]\n\n&gt;&gt;&gt; df = pd.DataFrame(names)\n\n&gt;&gt;&gt; in_rolls_fn_gender(df, 'name')\n    name  n_male  n_female  n_third_gender  prop_female  prop_male  prop_third_gender\n0    yoga     202       150               0     0.426136   0.573864                0.0\n1  yasmin      24      2635               0     0.990974   0.009026                0.0\n2    siri     115       556               0     0.828614   0.171386                0.0\n3   vivek    2252        13               0     0.005740   0.994260                0.0\n\n&gt;&gt;&gt; help(in_rolls_fn_gender)\nHelp on method in_rolls_fn_gender in module naampy.in_rolls_fn:\n\nin_rolls_fn_gender(df, namecol, state=None, year=None) method of builtins.type instance\n    Appends additional columns from Female ratio data to the input DataFrame\n    based on the first name.\n\n    Removes extra space. Checks if the name is the Indian electoral rolls data.\n    If it is, outputs data from that row.\n\n    Args:\n        df (:obj:`DataFrame`): Pandas DataFrame containing the first name\n            column.\n        namecol (str or int): Column's name or location of the name in\n            DataFrame.\n        state (str): The state name of Indian electoral rolls data to be used.\n            (default is None for all states)\n        year (int): The year of Indian electoral rolls to be used.\n            (default is None for all years)\n\n    Returns:\n        DataFrame: Pandas DataFrame with additional columns:-\n            'n_female', 'n_male', 'n_third_gender',\n            'prop_female', 'prop_male', 'prop_third_gender' by first name\n</pre>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Suriyan Laohaprapanon and Gaurav Sood</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The package is released under the <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT\nLicense</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6656346, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "f81c182abe57be6afb46e2d05383c7ba", "sha256": "e6ff410071cfaf678bdb0791c8d597de706f09b1943e7c5035e60b2f232cefcc"}, "downloads": -1, "filename": "naampy-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f81c182abe57be6afb46e2d05383c7ba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9148267, "upload_time": "2020-01-30T08:23:46", "upload_time_iso_8601": "2020-01-30T08:23:46.376484Z", "url": "https://files.pythonhosted.org/packages/e5/d7/16b2f770a6061d3987d9a10f7278008b30be449569c3d83b03584b444776/naampy-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8bbaac10a7bd0731b95825fe1ae58ed0", "sha256": "7e81141752e76b9c6077ad538a1c6be31ec32acab805a955b92fa023cc5956c1"}, "downloads": -1, "filename": "naampy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8bbaac10a7bd0731b95825fe1ae58ed0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9153992, "upload_time": "2020-01-30T08:23:54", "upload_time_iso_8601": "2020-01-30T08:23:54.417375Z", "url": "https://files.pythonhosted.org/packages/7d/cd/bb068a9e951785de0fb64c5d4054ff798908f3c2e74e0509bbacb15b21bd/naampy-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "638052f0914231048578664e8894b5de", "sha256": "ab145dce33e1d89869a93df7d80b77596ddcfbec54d5f8aaa2db9ea3e13e2fe0"}, "downloads": -1, "filename": "naampy-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "638052f0914231048578664e8894b5de", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9148598, "upload_time": "2020-02-04T23:29:46", "upload_time_iso_8601": "2020-02-04T23:29:46.307945Z", "url": "https://files.pythonhosted.org/packages/8e/dd/933ed3e60beb90d0629fbe5253a619889e39e4584bea5dc7b07f7ad2a6f3/naampy-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6844ef1e747168debe2f634f36c7a4af", "sha256": "749db6276ad37e841c0424e7cf1c3d10529a3322743895f924577436ca509fe3"}, "downloads": -1, "filename": "naampy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6844ef1e747168debe2f634f36c7a4af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9154684, "upload_time": "2020-02-04T23:29:49", "upload_time_iso_8601": "2020-02-04T23:29:49.378676Z", "url": "https://files.pythonhosted.org/packages/43/60/a01533596e599bb9a43c299b309ab60773c292193319304935a7f55aedb3/naampy-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "638052f0914231048578664e8894b5de", "sha256": "ab145dce33e1d89869a93df7d80b77596ddcfbec54d5f8aaa2db9ea3e13e2fe0"}, "downloads": -1, "filename": "naampy-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "638052f0914231048578664e8894b5de", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9148598, "upload_time": "2020-02-04T23:29:46", "upload_time_iso_8601": "2020-02-04T23:29:46.307945Z", "url": "https://files.pythonhosted.org/packages/8e/dd/933ed3e60beb90d0629fbe5253a619889e39e4584bea5dc7b07f7ad2a6f3/naampy-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6844ef1e747168debe2f634f36c7a4af", "sha256": "749db6276ad37e841c0424e7cf1c3d10529a3322743895f924577436ca509fe3"}, "downloads": -1, "filename": "naampy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6844ef1e747168debe2f634f36c7a4af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9154684, "upload_time": "2020-02-04T23:29:49", "upload_time_iso_8601": "2020-02-04T23:29:49.378676Z", "url": "https://files.pythonhosted.org/packages/43/60/a01533596e599bb9a43c299b309ab60773c292193319304935a7f55aedb3/naampy-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:54 2020"}