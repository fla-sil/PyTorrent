{"info": {"author": "bmonsalves", "author_email": "bmonsalves@brainfood.cl", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: Other/Proprietary License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# **brainfoodr**\n\nPermite instalar distintas versiones de packages de R para cada proyecto, creado evitando los conflictos entre los proyectos corriendo en una maquina.\n\nEsta libreria esta optimizada para utilizarla con versiones de python >= 3.\n\nEs posible ver un ejemplo de app [ac\u00e1](https://bitbucket.org/brain_food/brainfoodr/src/master/example/ \"Ejemplo\").\n\n\n**Instalacion:**\n\n`pip3 install brainfoodr`\n\nUsuarios de Windows:\n\nSi el comando `brainfoodr` arroja el siguiente error:\n\n`\"brainfoodr\" no se reconoce como un comando interno o externo,\nprograma o archivo por lotes ejecutable.`\n\nEs por que en windows es un cacho utilizar herramientas de desarrollo, asi que una vez que se instala la librer\u00eda es necesario ejecutar el siguiente comando (para linux o mac no es necesario)\n\n`where brainfoodr > file && set /p BFR=<file && doskey brainfoodr=python %BFR% $*`\n\n**Uso:**\n\n`brainfoodr <comando>`\n\n**comandos existentes:**\n\n| Comando       | Descripci\u00f3n   | ejemplo    |\n| ------------- | ------------- | ---------- |\n|  create       | Permite crear una nueva aplicaci\u00f3n con sus archivos y directorios correspondientes | `brainfoodr create myApp` |\n| install       | Permite instalar los packages definidos en el archivo packages_list.txt. <br><br> Para poder ejecutar el comando es necesario situarse dentro del directorio del proyecto  | `brainfoodr install` |\n\n**Archivos creados:**\n\nCuando se crea una aplicaci\u00f3n con el comando `brainfoodr create myApp` se genera automaticamente el siguiente listado de archivos y directorios:\n\n| Archivo/Directorio       | Descripci\u00f3n   |\n| ------------------------ | ------------- |\n| app.json                 | Guarda informaci\u00f3n de la aplicaci\u00f3n creada, solo se utiliza para la ejecucion de los comandos, por lo que no es necesario hacer modificaciones en este archivo |\n| .gitignore               | Define la lista de archivos que NO se subir\u00e1n al repositorio de bitbucket  |\n| packages_list.txt        | En este archivo se definen todas las librerias o packages (y su versi\u00f3n) que se utilizar\u00e1n en el proyecto. <br/><br/> El formato para agregar las librerias con su respectiva versi\u00f3n es el mismo que se utiliza en el archivo requirements.txt de python donde se indica el paquete a instalar seguido de \"==\" la versi\u00f3n del paquete. <br><br> Ejemplo: dplyr==0.8.1 <br><br> **Siempre debe indicarse el nombre del paquete y la versi\u00f3n**   |\n| Rlibraries               | Directorio donde se guardar\u00e1n las librerias instaladas para el proyecto  |\n| Install_packages.r       | Este script toma todos los packages definidos en el archivo packages_list.txt y los instala en la carpeta Rlibraries. <br><br> para instalar las librerias existen 2 opciones: <br><br> - Ejecutar el comando `brainfoodr install` dentro del directorio del proyecto. <br><br> - Ejecutar directamente el script con el comando `Rscript install_packages.r` <br><br> En ambos casos instalar\u00e1 las librerias definidas en el packages_list.txt  |\n| main.r                   | En este archivo se debe comenzar a escribir el script, se utiliza como archivo base para la ejecuci\u00f3n de todo el proyecto. <br><br> De todos modos cada proyecto puede ser organizado como sea necesario... separando los scripts en varios archivos... en varios directorios... lo importante es que, todos los archivos y directorios generados est\u00e9n dentro del directorio del app creada y que la ejecucion del codigo parta desde el archivo main. <br><br> Ademas en este archivo se importan automaticamente las librerias definidas en el archivo packages_list.txt <br><br> Se puede ejecutar el proyecto con el comando `Rscript main.r` |\n| import_packages.r        | Lee el archivo packages_list.txt y hace un import automatico de las librerias definidas  |\n| utils                    | Directorio donde se pueden crear scripts reutilizables en todo el proyecto  |\n| utils.r                  | Contiene metodos y herramientas que pueden servir durante toda la ejecucion del proyecto  |\n| data_files               | Directorio para almacenar las bases de datos que se utilizar\u00e1n en el proyecto (.csv, .xlsx... etc) <br><br> Logicamente, tambien se pueden crear directorios para mantener el orden de los archivos |\n\n\n\n**Notas:**\n- No deber\u00eda generar problemas al utilizar RStudio o cualquier otro editor de codigo r\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "brainfoodr", "package_url": "https://pypi.org/project/brainfoodr/", "platform": "", "project_url": "https://pypi.org/project/brainfoodr/", "project_urls": null, "release_url": "https://pypi.org/project/brainfoodr/0.1.3/", "requires_dist": ["click", "rpy2"], "requires_python": "", "summary": "structure for r projects", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><strong>brainfoodr</strong></h1>\n<p>Permite instalar distintas versiones de packages de R para cada proyecto, creado evitando los conflictos entre los proyectos corriendo en una maquina.</p>\n<p>Esta libreria esta optimizada para utilizarla con versiones de python &gt;= 3.</p>\n<p>Es posible ver un ejemplo de app <a href=\"https://bitbucket.org/brain_food/brainfoodr/src/master/example/\" rel=\"nofollow\" title=\"Ejemplo\">ac\u00e1</a>.</p>\n<p><strong>Instalacion:</strong></p>\n<p><code>pip3 install brainfoodr</code></p>\n<p>Usuarios de Windows:</p>\n<p>Si el comando <code>brainfoodr</code> arroja el siguiente error:</p>\n<p><code>\"brainfoodr\" no se reconoce como un comando interno o externo, programa o archivo por lotes ejecutable.</code></p>\n<p>Es por que en windows es un cacho utilizar herramientas de desarrollo, asi que una vez que se instala la librer\u00eda es necesario ejecutar el siguiente comando (para linux o mac no es necesario)</p>\n<p><code>where brainfoodr &gt; file &amp;&amp; set /p BFR=&lt;file &amp;&amp; doskey brainfoodr=python %BFR% $*</code></p>\n<p><strong>Uso:</strong></p>\n<p><code>brainfoodr &lt;comando&gt;</code></p>\n<p><strong>comandos existentes:</strong></p>\n<table>\n<thead>\n<tr>\n<th>Comando</th>\n<th>Descripci\u00f3n</th>\n<th>ejemplo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>create</td>\n<td>Permite crear una nueva aplicaci\u00f3n con sus archivos y directorios correspondientes</td>\n<td><code>brainfoodr create myApp</code></td>\n</tr>\n<tr>\n<td>install</td>\n<td>Permite instalar los packages definidos en el archivo packages_list.txt. <br><br> Para poder ejecutar el comando es necesario situarse dentro del directorio del proyecto</td>\n<td><code>brainfoodr install</code></td>\n</tr></tbody></table>\n<p><strong>Archivos creados:</strong></p>\n<p>Cuando se crea una aplicaci\u00f3n con el comando <code>brainfoodr create myApp</code> se genera automaticamente el siguiente listado de archivos y directorios:</p>\n<table>\n<thead>\n<tr>\n<th>Archivo/Directorio</th>\n<th>Descripci\u00f3n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.json</td>\n<td>Guarda informaci\u00f3n de la aplicaci\u00f3n creada, solo se utiliza para la ejecucion de los comandos, por lo que no es necesario hacer modificaciones en este archivo</td>\n</tr>\n<tr>\n<td>.gitignore</td>\n<td>Define la lista de archivos que NO se subir\u00e1n al repositorio de bitbucket</td>\n</tr>\n<tr>\n<td>packages_list.txt</td>\n<td>En este archivo se definen todas las librerias o packages (y su versi\u00f3n) que se utilizar\u00e1n en el proyecto. <br><br> El formato para agregar las librerias con su respectiva versi\u00f3n es el mismo que se utiliza en el archivo requirements.txt de python donde se indica el paquete a instalar seguido de \"==\" la versi\u00f3n del paquete. <br><br> Ejemplo: dplyr==0.8.1 <br><br> <strong>Siempre debe indicarse el nombre del paquete y la versi\u00f3n</strong></td>\n</tr>\n<tr>\n<td>Rlibraries</td>\n<td>Directorio donde se guardar\u00e1n las librerias instaladas para el proyecto</td>\n</tr>\n<tr>\n<td>Install_packages.r</td>\n<td>Este script toma todos los packages definidos en el archivo packages_list.txt y los instala en la carpeta Rlibraries. <br><br> para instalar las librerias existen 2 opciones: <br><br> - Ejecutar el comando <code>brainfoodr install</code> dentro del directorio del proyecto. <br><br> - Ejecutar directamente el script con el comando <code>Rscript install_packages.r</code> <br><br> En ambos casos instalar\u00e1 las librerias definidas en el packages_list.txt</td>\n</tr>\n<tr>\n<td>main.r</td>\n<td>En este archivo se debe comenzar a escribir el script, se utiliza como archivo base para la ejecuci\u00f3n de todo el proyecto. <br><br> De todos modos cada proyecto puede ser organizado como sea necesario... separando los scripts en varios archivos... en varios directorios... lo importante es que, todos los archivos y directorios generados est\u00e9n dentro del directorio del app creada y que la ejecucion del codigo parta desde el archivo main. <br><br> Ademas en este archivo se importan automaticamente las librerias definidas en el archivo packages_list.txt <br><br> Se puede ejecutar el proyecto con el comando <code>Rscript main.r</code></td>\n</tr>\n<tr>\n<td>import_packages.r</td>\n<td>Lee el archivo packages_list.txt y hace un import automatico de las librerias definidas</td>\n</tr>\n<tr>\n<td>utils</td>\n<td>Directorio donde se pueden crear scripts reutilizables en todo el proyecto</td>\n</tr>\n<tr>\n<td>utils.r</td>\n<td>Contiene metodos y herramientas que pueden servir durante toda la ejecucion del proyecto</td>\n</tr>\n<tr>\n<td>data_files</td>\n<td>Directorio para almacenar las bases de datos que se utilizar\u00e1n en el proyecto (.csv, .xlsx... etc) <br><br> Logicamente, tambien se pueden crear directorios para mantener el orden de los archivos</td>\n</tr></tbody></table>\n<p><strong>Notas:</strong></p>\n<ul>\n<li>No deber\u00eda generar problemas al utilizar RStudio o cualquier otro editor de codigo r</li>\n</ul>\n\n          </div>"}, "last_serial": 5364334, "releases": {"0.1": [], "0.1.1": [{"comment_text": "", "digests": {"md5": "dab37cbffab7b0338f3e5bb68f9a132b", "sha256": "b3b696009c310a00d332270dd474774890c81de5ba84bb2265e1ed018c3fb4f9"}, "downloads": -1, "filename": "brainfoodr-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dab37cbffab7b0338f3e5bb68f9a132b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4496, "upload_time": "2019-06-04T19:23:38", "upload_time_iso_8601": "2019-06-04T19:23:38.715593Z", "url": "https://files.pythonhosted.org/packages/28/23/508ffa194207e1e7c06e94037083198c4f02e9cfa5b74f719f998537a421/brainfoodr-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "364ad8abab6428331fe2714fcb433247", "sha256": "ed5e0d995ebcba0736aaf0791992584e404f189f3ce58b4e0e2f673bf794fbf8"}, "downloads": -1, "filename": "brainfoodr-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "364ad8abab6428331fe2714fcb433247", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5350, "upload_time": "2019-06-05T21:09:55", "upload_time_iso_8601": "2019-06-05T21:09:55.116698Z", "url": "https://files.pythonhosted.org/packages/b8/53/a6d945c60867b8045b58535f85d01520382289c01aafa98a08172a670618/brainfoodr-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "71c5490cff37ed69e599ae97002b3f9b", "sha256": "d555068883ec30d9ea30607e57b9dab38e973c042731d55baa3998c020557846"}, "downloads": -1, "filename": "brainfoodr-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "71c5490cff37ed69e599ae97002b3f9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5492, "upload_time": "2019-06-05T21:18:50", "upload_time_iso_8601": "2019-06-05T21:18:50.528318Z", "url": "https://files.pythonhosted.org/packages/4a/c1/df463a4cebf9b0455f077ea216e83dcfeee6368d55b215266ff027ad65b5/brainfoodr-0.1.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71c5490cff37ed69e599ae97002b3f9b", "sha256": "d555068883ec30d9ea30607e57b9dab38e973c042731d55baa3998c020557846"}, "downloads": -1, "filename": "brainfoodr-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "71c5490cff37ed69e599ae97002b3f9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5492, "upload_time": "2019-06-05T21:18:50", "upload_time_iso_8601": "2019-06-05T21:18:50.528318Z", "url": "https://files.pythonhosted.org/packages/4a/c1/df463a4cebf9b0455f077ea216e83dcfeee6368d55b215266ff027ad65b5/brainfoodr-0.1.3-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:36:25 2020"}