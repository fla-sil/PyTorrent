{"info": {"author": "Tim Savannah", "author_email": "kata198@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP"], "description": "toJiraTable\n===========\n\nReads input from stdin and converts it to a JIRA table.\n\n\nThe first line it reads is used as the table header, and all subsequent lines are made into the body. Supports shell\\-style splitting of fields (you can use quotes to \"group\" items with spaces into a single field).\n\n\nBy default, it will split by whitespace, so each word becomes an item. The entire table, by default, will grow to the longest row, and fill in blanks where needed.\n\n\nIf you need to split by an alternative thing, such as two\\-spaces (if columns are seperated by two\\-or\\-more spaces, and contain characters with spaces between) there are various \\-\\-split\\-by options available, see usage below. See usage and examples for more information.\n\n\n**Usage:**\n\n\n\tUsage: toJiraTable\n\n\tConverts stdin to a JIRA table. If no arguments provided, it will use \"shell\\-style\" splitting\n\n\t\tso quoting strings with spaces makes them a single column, otherwise spaces/tabs/whatever\n\n\t\tsplits. The first line passed in becomes the header, the remainder become the body.\n\n\n\tBy default, everything will be matched to the longest row. Any missing columns in a row will\n\n\t\tbe filled by blank columns at the end. Use \\-\\-no\\-stretch to disable this.\n\n\n\t\tArguments:\n\n\n\t\t\t\\-\\-no\\-stretch                \\-  Do not stretch each row to the longest row. See above.\n\n\t\t\t\\-\\-split\\-header\\-by=X         \\-  Instead of using shell\\-style splitting, split by provided string for the header line\n\n\t\t\t\\-\\-split\\-body\\-by=X           \\-  Instead of using shell\\-style splitting, split by the provided string for body lines\n\n\t\t\t\\-\\-split\\-by=X                \\-  Split both header and body by the given string\n\n\t\t\t\\-\\-split\\-keep\\-empty          \\-  By default, using the \\-\\-split\\-by* will strip empty columns. The default behaviour is \n\n\t\t\t\t\t\t\t\t\t\t useful, in example: if a script outputs strings which are not quoted, but has at least two\n\n\t\t\t\t\t\t\t\t\t\t spaces between each real column, using \\-\\-split\\-body\\-by='  '  will ensure that any place that \n\n\t\t\t\t\t\t\t\t\t\t is separated by two or more spaces becomes a column. This option disables that feature.\n\n\n\n**Example Usage:**\n\n\n*Simple split:*\n\n\n\t[myuser]$ ( echo 'Hostname \"Free Space\"'; cat hostnames.txt ) \\| toJiraTable \n\n\t\\|\\|Hostname\\|\\|Free Space\\|\\|\n\n\t\\|host1\\|500G\\|\n\n\t\\|wwwprod1\\|120G\\|\n\n\t\\|wwwdev1\\|11G\\|\n\n\n*More complicated split. In this case, we want the body to form columns any time there are at least two spaces:*\n\n\n(dataset)\n\n\n\t[myuser]$ cat myData\n\n\tName Size Comment\n\n\tGeorge Jetson  500G    The man from the future\n\n\tJeeves  200M           Everyone's favourite butlet\n\n\n(convert to JIRA table)\n\n\n\t[myuser]$ cat myData \\| ./toJiraTable \\-\\-split\\-body\\-by=\"  \"\n\n\t\\|\\|Name\\|\\|Size\\|\\|Comment\\|\\|\n\n\t\\|George Jetson\\|500G\\|The man from the future\\|\n\n\t\\|Jeeves\\|200M\\|Everyone's favourite butlet\\|\n\n\n\n*Tab\\-deliminated split:*\n\n\n(dataset):\n\n\t[myuser]$ python \\-c \"import sys; sys.stdout.write(repr(open('myData', 'rt').read()).replace('\\\\\\\\n', '\\\\n') + '\\n');\"\n\n\t\"Name\\tSize\\tComment\n\n\tGeorge Jetson\\t500G\\tThe man from the future\n\n\tJeeves\\t200M\\tEveryone's favourite butlet\n\n\t\"\n\n\n(convert to JIRA table)\n\n\t[myuser]$ cat myData \\| ./toJiraTable \\-\\-split\\-by='\\t'\n\n\t\\|\\|Name\\|\\|Size\\|\\|Comment\\|\\|\n\n\t\\|George Jetson\\|500G\\|The man from the future\\|\n\n\t\\|Jeeves\\|200M\\|Everyone's favourite butlet\\|", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kata198/toJiraTable", "keywords": "JIRA,table,to,toJiraTable,convert,string,stdin,input,header,body", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "toJiraTable", "package_url": "https://pypi.org/project/toJiraTable/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/toJiraTable/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/kata198/toJiraTable"}, "release_url": "https://pypi.org/project/toJiraTable/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "A tool which reads input from stdin and converts it to a JIRA table", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Reads input from stdin and converts it to a JIRA table.</p>\n<p>The first line it reads is used as the table header, and all subsequent lines are made into the body. Supports shell-style splitting of fields (you can use quotes to \u201cgroup\u201d items with spaces into a single field).</p>\n<p>By default, it will split by whitespace, so each word becomes an item. The entire table, by default, will grow to the longest row, and fill in blanks where needed.</p>\n<p>If you need to split by an alternative thing, such as two-spaces (if columns are seperated by two-or-more spaces, and contain characters with spaces between) there are various \u2013split-by options available, see usage below. See usage and examples for more information.</p>\n<p><strong>Usage:</strong></p>\n<blockquote>\n<p>Usage: toJiraTable</p>\n<p>Converts stdin to a JIRA table. If no arguments provided, it will use \u201cshell-style\u201d splitting</p>\n<blockquote>\n<p>so quoting strings with spaces makes them a single column, otherwise spaces/tabs/whatever</p>\n<p>splits. The first line passed in becomes the header, the remainder become the body.</p>\n</blockquote>\n<p>By default, everything will be matched to the longest row. Any missing columns in a row will</p>\n<blockquote>\n<p>be filled by blank columns at the end. Use \u2013no-stretch to disable this.</p>\n<p>Arguments:</p>\n<blockquote>\n<p>\u2013no-stretch                -  Do not stretch each row to the longest row. See above.</p>\n<p>\u2013split-header-by=X         -  Instead of using shell-style splitting, split by provided string for the header line</p>\n<p>\u2013split-body-by=X           -  Instead of using shell-style splitting, split by the provided string for body lines</p>\n<p>\u2013split-by=X                -  Split both header and body by the given string</p>\n<p>\u2013split-keep-empty          -  By default, using the \u2013split-by* will strip empty columns. The default behaviour is</p>\n<blockquote>\n<p>useful, in example: if a script outputs strings which are not quoted, but has at least two</p>\n<p>spaces between each real column, using \u2013split-body-by=\u2019  \u2018  will ensure that any place that</p>\n<p>is separated by two or more spaces becomes a column. This option disables that feature.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><strong>Example Usage:</strong></p>\n<p><em>Simple split:</em></p>\n<blockquote>\n<p>[myuser]$ ( echo \u2018Hostname \u201cFree Space\u201d\u2019; cat hostnames.txt ) | toJiraTable</p>\n<p>||Hostname||Free Space||</p>\n<p>|host1|500G|</p>\n<p>|wwwprod1|120G|</p>\n<p>|wwwdev1|11G|</p>\n</blockquote>\n<p><em>More complicated split. In this case, we want the body to form columns any time there are at least two spaces:</em></p>\n<p>(dataset)</p>\n<blockquote>\n<p>[myuser]$ cat myData</p>\n<p>Name Size Comment</p>\n<p>George Jetson  500G    The man from the future</p>\n<p>Jeeves  200M           Everyone\u2019s favourite butlet</p>\n</blockquote>\n<p>(convert to JIRA table)</p>\n<blockquote>\n<p>[myuser]$ cat myData | ./toJiraTable \u2013split-body-by=\u201d  \u201c</p>\n<p>||Name||Size||Comment||</p>\n<p>|George Jetson|500G|The man from the future|</p>\n<p>|Jeeves|200M|Everyone\u2019s favourite butlet|</p>\n</blockquote>\n<p><em>Tab-deliminated split:</em></p>\n<p>(dataset):</p>\n<blockquote>\n<p>[myuser]$ python -c \u201cimport sys; sys.stdout.write(repr(open(\u2018myData\u2019, \u2018rt\u2019).read()).replace(\u2018\\n\u2019, \u2018\\n\u2019) + \u2018n\u2019);\u201d</p>\n<p>\u201cNametSizetComment</p>\n<p>George Jetsont500GtThe man from the future</p>\n<p>Jeevest200MtEveryone\u2019s favourite butlet</p>\n<p>\u201c</p>\n</blockquote>\n<p>(convert to JIRA table)</p>\n<blockquote>\n<p>[myuser]$ cat myData | ./toJiraTable \u2013split-by=\u2019t\u2019</p>\n<p>||Name||Size||Comment||</p>\n<p>|George Jetson|500G|The man from the future|</p>\n<p>|Jeeves|200M|Everyone\u2019s favourite butlet|</p>\n</blockquote>\n\n          </div>"}, "last_serial": 2291885, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "472b64875f3b78a26bd8fb19b6977017", "sha256": "628932c9e3eb104bd478e933589b4aa6d2ffd7e54fd8420ee6f6ee2fadf4c71a"}, "downloads": -1, "filename": "toJiraTable-1.0.tar.gz", "has_sig": false, "md5_digest": "472b64875f3b78a26bd8fb19b6977017", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16189, "upload_time": "2015-10-09T14:41:33", "upload_time_iso_8601": "2015-10-09T14:41:33.943216Z", "url": "https://files.pythonhosted.org/packages/8e/cb/2f50c1e69424e28e57addd4b51dda5dde1d328a53f49a5d3058b76584f3c/toJiraTable-1.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "9128e378369d5e0369c408f8bdf77f0a", "sha256": "08a5ac7499e09afe854dd13779ace212ac13607132e6320484d0af4d9f33bd6d"}, "downloads": -1, "filename": "toJiraTable-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9128e378369d5e0369c408f8bdf77f0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16358, "upload_time": "2015-10-09T14:45:34", "upload_time_iso_8601": "2015-10-09T14:45:34.138440Z", "url": "https://files.pythonhosted.org/packages/3e/86/c6eda863f8d8cd612b498e6bad4d2a45cdc8d82ff74bb3ecccd47b446ace/toJiraTable-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "ae230850038f7d8dda0cdb9b6105f279", "sha256": "163a12f6fc0056d33fc5bc2b7c135e4261f7c0b6bf57fbb7b7f88e5bd9544f4e"}, "downloads": -1, "filename": "toJiraTable-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ae230850038f7d8dda0cdb9b6105f279", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16635, "upload_time": "2016-08-19T22:58:53", "upload_time_iso_8601": "2016-08-19T22:58:53.317084Z", "url": "https://files.pythonhosted.org/packages/c2/30/ad0f6503d4ed8541909fbe655b68cf870ea3c2e7b528db7cdf0842db559e/toJiraTable-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ae230850038f7d8dda0cdb9b6105f279", "sha256": "163a12f6fc0056d33fc5bc2b7c135e4261f7c0b6bf57fbb7b7f88e5bd9544f4e"}, "downloads": -1, "filename": "toJiraTable-1.1.0.tar.gz", "has_sig": false, "md5_digest": "ae230850038f7d8dda0cdb9b6105f279", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16635, "upload_time": "2016-08-19T22:58:53", "upload_time_iso_8601": "2016-08-19T22:58:53.317084Z", "url": "https://files.pythonhosted.org/packages/c2/30/ad0f6503d4ed8541909fbe655b68cf870ea3c2e7b528db7cdf0842db559e/toJiraTable-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:51:32 2020"}