{"info": {"author": "Johann-Mattis List", "author_email": "list@shh.mpg.de", "bugtrack_url": null, "classifiers": [], "description": "# SinoPy: Python Library for quantitative tasks in Chinese historical linguistics\n\n[![DOI](https://zenodo.org/badge/30593438.svg)](https://zenodo.org/badge/latestdoi/30593438)\n![PyPI](https://img.shields.io/pypi/v/sinopy.svg)\n\nSinoPy is an attempt to provide useful functionality for users working with Chinese dialects and Sino-Tibetan language data and struggling with tasks like converting characters to Pinyin, analysing characters, or analysing readings in Chinese dialects and other SEA languages. \n\nIf you use the library in your research, please quote it as:\n\n> List, Johann-Mattis (2018): SinoPy: Python Library for quantitative tasks in Chinese historical linguistics. Version 0.3.0. Jena: Max Planck Institute for the Science of Human History. DOI: https://zenodo.org/badge/latestdoi/30593438\n\nThis is intended as a plugin for LingPy, or an addon. The library gives utility functions that prove useful to handle Chinese data in a very broad context, ranging from Chinese character readings up to proposed readings in Middle Chinese and older stages of the language.\n\n## Quick Usage Examples\n\nConvert Baxter's (1992) Middle Chinese transcription system to plain IPA (with tone marks).\n\n```python\n>>> from sinopy import baxter2ipa\n>>> baxter2ipa('bjang')\n'bja\u014b\u00b9'\n>>> baxter2ipa('bjang', segmented=True)\n['b', 'j', 'a', '\u014b', '\u00b9']\n```\n\nConvert Chinese characters to P\u012bny\u012bn\n\n```python\n>>> from sinopy import pinyin\n>>> pinyin('\u6211', variant='cantonese')\n'ngo5'\n>>> pinyin('\u6211', variant='mandarin')\n'w\u01d2'\n```\n\nTry to find character by combining two characters:\n\n```python\n>>> from sinopy import character_from_structure\n>>> character_from_structure('+\u4eba\u6211')\n'\u4fc4'\n```\n\n## More examples\n\nAt the moment, you may have difficulties finding a common idea behind SinoPy,\nas the collection of scripts is very diverse. The general topic, however, are\nbasic operations one frequently encounters when working with Chinese and SEA\nlinguistic data.\n\nBut let's just look at a couple of examples:\n\n```python\n>>> from sinopy import *\n>>> char = \"\u6211\"\n>>> pinyin(char, variant=\"mandarin\")\nw\u01d2\n```\n\nSo obviously, we can convert characters to P\u012bny\u012bn.\n\n```python\n>>> is_chinese(char)\nTrue\n>>> is_chinese('b')\nFalse\n```\n\nSo the library also checks if a character belongs to Chinese Unicode range.\n\nBut we have also a range of functions for handling Middle Chinese and related problems. For example the following:\n\n```python\n>>> parse_baxter('ngaH')\n('ng', '', 'a', 'H')\n```\n\nSo this function will read in a Middle Chinese string (as encoded in the system of Baxter 1992) and return its main constituents (initial, medial, final, and tone).\n\nBut we can also directly convert a character to its Middle Chinese reading:\n\n```python\n>>> chars2baxter(char)\n['ngaX']\n```\n\nOr we can retrieve a basic gloss.\n\n```python\n>>> chars2gloss(char)\n['our, us, i, me, my, we']\n```\n\nA rather complex function is the `sixtuple2baxter` function, which reads in the classical six-character descriptions of the Middle Chinese reading of a given character and yields the Middle Chinese value following Baxter's system. You find a lot of sixtuple readings in the DOC database (published with the [Tower of Babel project](http://starling.rinet.ru/cgi-bin/response.cgi?root=config&morpho=0&basename=\\data\\china\\doc&first=1)).\n\n```python\n>>> sixtuple2baxter('\u87f9\u958b\u4e00\u4e0a\u6d77\u6ce5')                            \n['n', '', 'oj', 'X']\n>>> chars2baxter('\u4e43')                 \n['nojX']\n```\n\nYou can also directly try to retrieve the MC reading from passing two f\u01cenqi\u00e8 characters, for example:\n\n```python\n>>> fanqie2mch('\u6d77\u6ce5')\n'xej'\n>>> fanqie2mch('\u6ce5\u6d77')\n'nojX'\n```\n\nAnd if you don't like Baxter's MCH transcriptions, you can simply turn it to IPA:\n\n```python\n>>> baxter2ipa('nojX')\nnoj\u00b2\n>>> baxter2ipa('tsyang')\n'\u02a8a\u014b\u00b9'\n```\n\nAs a final important function, consider the parser for morphemes:\n\n```python\n>>> parse_chinese_morphemes('\u02a8a\u014b\u00b9')\n['\u02a8', '-', 'a', '\u014b', '\u00b9']\n```\n\nThe quintuple that he method returns splits the sequence into its five main constituents, initial, medial, nucleus, coda, and tone.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lingpy/sinopy", "keywords": "Chinese linguistics,historical linguistics,computer-assisted language comparison", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "sinopy", "package_url": "https://pypi.org/project/sinopy/", "platform": "", "project_url": "https://pypi.org/project/sinopy/", "project_urls": {"Homepage": "https://github.com/lingpy/sinopy"}, "release_url": "https://pypi.org/project/sinopy/0.3.4/", "requires_dist": null, "requires_python": "", "summary": "A Python library for quantitative tasks in Chinese historical linguistics.", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SinoPy: Python Library for quantitative tasks in Chinese historical linguistics</h1>\n<p><a href=\"https://zenodo.org/badge/latestdoi/30593438\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59c8d232fb96de26fea0829429527bf73294ef33/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f33303539333433382e737667\"></a>\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdaa9a44e7ef92fb11ee89be4a6b988f6333dc87/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73696e6f70792e737667\"></p>\n<p>SinoPy is an attempt to provide useful functionality for users working with Chinese dialects and Sino-Tibetan language data and struggling with tasks like converting characters to Pinyin, analysing characters, or analysing readings in Chinese dialects and other SEA languages.</p>\n<p>If you use the library in your research, please quote it as:</p>\n<blockquote>\n<p>List, Johann-Mattis (2018): SinoPy: Python Library for quantitative tasks in Chinese historical linguistics. Version 0.3.0. Jena: Max Planck Institute for the Science of Human History. DOI: <a href=\"https://zenodo.org/badge/latestdoi/30593438\" rel=\"nofollow\">https://zenodo.org/badge/latestdoi/30593438</a></p>\n</blockquote>\n<p>This is intended as a plugin for LingPy, or an addon. The library gives utility functions that prove useful to handle Chinese data in a very broad context, ranging from Chinese character readings up to proposed readings in Middle Chinese and older stages of the language.</p>\n<h2>Quick Usage Examples</h2>\n<p>Convert Baxter's (1992) Middle Chinese transcription system to plain IPA (with tone marks).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sinopy</span> <span class=\"kn\">import</span> <span class=\"n\">baxter2ipa</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">baxter2ipa</span><span class=\"p\">(</span><span class=\"s1\">'bjang'</span><span class=\"p\">)</span>\n<span class=\"s1\">'bja\u014b\u00b9'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">baxter2ipa</span><span class=\"p\">(</span><span class=\"s1\">'bjang'</span><span class=\"p\">,</span> <span class=\"n\">segmented</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'j'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'\u014b'</span><span class=\"p\">,</span> <span class=\"s1\">'\u00b9'</span><span class=\"p\">]</span>\n</pre>\n<p>Convert Chinese characters to P\u012bny\u012bn</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sinopy</span> <span class=\"kn\">import</span> <span class=\"n\">pinyin</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pinyin</span><span class=\"p\">(</span><span class=\"s1\">'\u6211'</span><span class=\"p\">,</span> <span class=\"n\">variant</span><span class=\"o\">=</span><span class=\"s1\">'cantonese'</span><span class=\"p\">)</span>\n<span class=\"s1\">'ngo5'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pinyin</span><span class=\"p\">(</span><span class=\"s1\">'\u6211'</span><span class=\"p\">,</span> <span class=\"n\">variant</span><span class=\"o\">=</span><span class=\"s1\">'mandarin'</span><span class=\"p\">)</span>\n<span class=\"s1\">'w\u01d2'</span>\n</pre>\n<p>Try to find character by combining two characters:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sinopy</span> <span class=\"kn\">import</span> <span class=\"n\">character_from_structure</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">character_from_structure</span><span class=\"p\">(</span><span class=\"s1\">'+\u4eba\u6211'</span><span class=\"p\">)</span>\n<span class=\"s1\">'\u4fc4'</span>\n</pre>\n<h2>More examples</h2>\n<p>At the moment, you may have difficulties finding a common idea behind SinoPy,\nas the collection of scripts is very diverse. The general topic, however, are\nbasic operations one frequently encounters when working with Chinese and SEA\nlinguistic data.</p>\n<p>But let's just look at a couple of examples:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">sinopy</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"s2\">\"\u6211\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pinyin</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"n\">variant</span><span class=\"o\">=</span><span class=\"s2\">\"mandarin\"</span><span class=\"p\">)</span>\n<span class=\"n\">w\u01d2</span>\n</pre>\n<p>So obviously, we can convert characters to P\u012bny\u012bn.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_chinese</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">is_chinese</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>So the library also checks if a character belongs to Chinese Unicode range.</p>\n<p>But we have also a range of functions for handling Middle Chinese and related problems. For example the following:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parse_baxter</span><span class=\"p\">(</span><span class=\"s1\">'ngaH'</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"s1\">'ng'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">)</span>\n</pre>\n<p>So this function will read in a Middle Chinese string (as encoded in the system of Baxter 1992) and return its main constituents (initial, medial, final, and tone).</p>\n<p>But we can also directly convert a character to its Middle Chinese reading:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">chars2baxter</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'ngaX'</span><span class=\"p\">]</span>\n</pre>\n<p>Or we can retrieve a basic gloss.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">chars2gloss</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'our, us, i, me, my, we'</span><span class=\"p\">]</span>\n</pre>\n<p>A rather complex function is the <code>sixtuple2baxter</code> function, which reads in the classical six-character descriptions of the Middle Chinese reading of a given character and yields the Middle Chinese value following Baxter's system. You find a lot of sixtuple readings in the DOC database (published with the <a href=\"http://starling.rinet.ru/cgi-bin/response.cgi?root=config&amp;morpho=0&amp;basename=%5Cdata%5Cchina%5Cdoc&amp;first=1\" rel=\"nofollow\">Tower of Babel project</a>).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">sixtuple2baxter</span><span class=\"p\">(</span><span class=\"s1\">'\u87f9\u958b\u4e00\u4e0a\u6d77\u6ce5'</span><span class=\"p\">)</span>                            \n<span class=\"p\">[</span><span class=\"s1\">'n'</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">'oj'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">chars2baxter</span><span class=\"p\">(</span><span class=\"s1\">'\u4e43'</span><span class=\"p\">)</span>                 \n<span class=\"p\">[</span><span class=\"s1\">'nojX'</span><span class=\"p\">]</span>\n</pre>\n<p>You can also directly try to retrieve the MC reading from passing two f\u01cenqi\u00e8 characters, for example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fanqie2mch</span><span class=\"p\">(</span><span class=\"s1\">'\u6d77\u6ce5'</span><span class=\"p\">)</span>\n<span class=\"s1\">'xej'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">fanqie2mch</span><span class=\"p\">(</span><span class=\"s1\">'\u6ce5\u6d77'</span><span class=\"p\">)</span>\n<span class=\"s1\">'nojX'</span>\n</pre>\n<p>And if you don't like Baxter's MCH transcriptions, you can simply turn it to IPA:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">baxter2ipa</span><span class=\"p\">(</span><span class=\"s1\">'nojX'</span><span class=\"p\">)</span>\n<span class=\"n\">noj</span><span class=\"err\">\u00b2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">baxter2ipa</span><span class=\"p\">(</span><span class=\"s1\">'tsyang'</span><span class=\"p\">)</span>\n<span class=\"s1\">'\u02a8a\u014b\u00b9'</span>\n</pre>\n<p>As a final important function, consider the parser for morphemes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">parse_chinese_morphemes</span><span class=\"p\">(</span><span class=\"s1\">'\u02a8a\u014b\u00b9'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'\u02a8'</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'\u014b'</span><span class=\"p\">,</span> <span class=\"s1\">'\u00b9'</span><span class=\"p\">]</span>\n</pre>\n<p>The quintuple that he method returns splits the sequence into its five main constituents, initial, medial, nucleus, coda, and tone.</p>\n\n          </div>"}, "last_serial": 6246474, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "6e3ac72dbb66a90fd217a5c22d42590b", "sha256": "40ec83844d96494903bc09c187ae5743385f12387ed7be465797a445e83de1ba"}, "downloads": -1, "filename": "sinopy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6e3ac72dbb66a90fd217a5c22d42590b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24403, "upload_time": "2018-08-24T10:53:33", "upload_time_iso_8601": "2018-08-24T10:53:33.155963Z", "url": "https://files.pythonhosted.org/packages/66/aa/0207b082cf1789eb8654dc0763cddcfe1d55b96d79299af0bb7b74b11905/sinopy-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "5d8d450e84d9e2bcb1c3df54e0638102", "sha256": "fb8cb22f08facd19fac77877874d43604c52854dbc592585a35928488ecd805c"}, "downloads": -1, "filename": "sinopy-0.3.1.tar.gz", "has_sig": false, "md5_digest": "5d8d450e84d9e2bcb1c3df54e0638102", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9714486, "upload_time": "2018-08-24T12:04:06", "upload_time_iso_8601": "2018-08-24T12:04:06.350179Z", "url": "https://files.pythonhosted.org/packages/2a/04/ce6261d2fdae3f3ba48153b8c90ae8003ffcf3342a3218adaf30bf416347/sinopy-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "8bdb56c7565fffc73c2d47cca2e4abd1", "sha256": "ed32a06522799cc5126f41dd2e6354fcdaf15eec8751783590db52d96771b1e3"}, "downloads": -1, "filename": "sinopy-0.3.2.tar.gz", "has_sig": false, "md5_digest": "8bdb56c7565fffc73c2d47cca2e4abd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10053973, "upload_time": "2018-11-25T13:18:27", "upload_time_iso_8601": "2018-11-25T13:18:27.786437Z", "url": "https://files.pythonhosted.org/packages/ae/e1/bb3c6a936816ccd4d4e3ae3d9763baf8ed6693ae11e8bc3d9db800a7b878/sinopy-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "dad4cf8f9757838d419383ac71259ab8", "sha256": "6a771b82fa5e496299a495d3e77c758227803c235eafc31536c0ba295785400a"}, "downloads": -1, "filename": "sinopy-0.3.3.tar.gz", "has_sig": false, "md5_digest": "dad4cf8f9757838d419383ac71259ab8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10053231, "upload_time": "2018-11-26T10:50:47", "upload_time_iso_8601": "2018-11-26T10:50:47.987778Z", "url": "https://files.pythonhosted.org/packages/e1/cd/a53af0c0900563085d046c06a7dd0c92303533084e31510cec7ffd61cc3b/sinopy-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "4679dbfbcb92abcee356d7c11232e0bd", "sha256": "f0f6d2d05cb739900e534b191c8262631b3fcd628de72914f9e93ff06ce37e8d"}, "downloads": -1, "filename": "sinopy-0.3.4.tar.gz", "has_sig": false, "md5_digest": "4679dbfbcb92abcee356d7c11232e0bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11703471, "upload_time": "2019-12-05T09:36:10", "upload_time_iso_8601": "2019-12-05T09:36:10.605536Z", "url": "https://files.pythonhosted.org/packages/fb/4b/059327435613b3e8f535ecd06609413b25c3b772ac2a8a622df2a8cb5536/sinopy-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4679dbfbcb92abcee356d7c11232e0bd", "sha256": "f0f6d2d05cb739900e534b191c8262631b3fcd628de72914f9e93ff06ce37e8d"}, "downloads": -1, "filename": "sinopy-0.3.4.tar.gz", "has_sig": false, "md5_digest": "4679dbfbcb92abcee356d7c11232e0bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11703471, "upload_time": "2019-12-05T09:36:10", "upload_time_iso_8601": "2019-12-05T09:36:10.605536Z", "url": "https://files.pythonhosted.org/packages/fb/4b/059327435613b3e8f535ecd06609413b25c3b772ac2a8a622df2a8cb5536/sinopy-0.3.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:27 2020"}