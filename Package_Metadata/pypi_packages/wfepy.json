{"info": {"author": "Filip Poboril", "author_email": "fpoboril@redhat.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries"], "description": "WfEpy\n=====\n\n**WfEpy (Workflow Engine for Python)** is Python library for creating workflows\nand automating various processes. It is designed to be as simple as possible so\ndevelopers can focus on tasks logic, not how to execute workflow, store state,\netc.\n\nIndividual steps in workflow are simply functions with decorator and transitions\nbetween tasks are also defined by decorators. Everything what developer needs to\ndo is add few decorators to functions that implements tasks logic. This library\nis then used to build graph from tasks and transitions and execute tasks in\nworkflow by traversing graph and calling task functions. Context passed to each\nfunction is arbitrary user object that can be used to store data, connect to\nother services or APIs, ...\n\n.. code:: python\n\n    @wfepy.task()\n    @wfepy.start_point()\n    @wfepy.followed_by('make_coffee')\n    def start(context):\n        ...\n\n    @wfepy.task()\n    @wfepy.followed_by('drink_coffee')\n    def make_coffee(context):\n        ...\n\n    @wfepy.task()\n    @wfepy.followed_by('end')\n    def drink_coffee(context):\n        ...\n\n    @wfepy.task()\n    @wfepy.end_point()\n    def end(context):\n        ...\n\nWfEpy does not provide any server scheduler or something like that. It was\ndesigned to be used in scripts, that are for example periodically executed by\ncron. If workflow have task that cannot be finished in single run library\nprovides way how to store current state of runner including user data and\nrestore it on next run.\n\n.. code:: python\n\n    import coffee_workflow\n\n    wf = wfepy.Workflow()\n    wf.load_tasks(coffee_workflow)\n\n    runner = wf.create_runner()\n    if restore_state:\n        runner.load('state-file')\n\n    runner.run()\n\n    runner.dump('state-file')\n\nThis simple design provides many options how to execute your workflow and\ncustomize it. This was also reason why this library was created, we don't want\nto manage new service/server that executes few simple workflows. We would like\nto use service we already have, for example Jenkins, cron, ...\n\n\nInstallation\n------------\n\nInstall it using pip ::\n\n    pip3 install wfepy\n\nor clone repository ::\n\n    git clone https://github.com/redhat-aqe/wfepy.git\n    cd wfepy\n\nand install Python package including dependencies ::\n\n    python3 setup.py install", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/redhat-aqe/wfepy/archive/v0.1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/redhat-aqe/wfepy", "keywords": "Workflow,Workflow Engine", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wfepy", "package_url": "https://pypi.org/project/wfepy/", "platform": "", "project_url": "https://pypi.org/project/wfepy/", "project_urls": {"Download": "https://github.com/redhat-aqe/wfepy/archive/v0.1.1.tar.gz", "Homepage": "https://github.com/redhat-aqe/wfepy"}, "release_url": "https://pypi.org/project/wfepy/0.1.1/", "requires_dist": null, "requires_python": ">=3.5, <4", "summary": "Workflow Engine for Python", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>WfEpy (Workflow Engine for Python)</strong> is Python library for creating workflows\nand automating various processes. It is designed to be as simple as possible so\ndevelopers can focus on tasks logic, not how to execute workflow, store state,\netc.</p>\n<p>Individual steps in workflow are simply functions with decorator and transitions\nbetween tasks are also defined by decorators. Everything what developer needs to\ndo is add few decorators to functions that implements tasks logic. This library\nis then used to build graph from tasks and transitions and execute tasks in\nworkflow by traversing graph and calling task functions. Context passed to each\nfunction is arbitrary user object that can be used to store data, connect to\nother services or APIs, \u2026</p>\n<pre><span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">()</span>\n<span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">start_point</span><span class=\"p\">()</span>\n<span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">followed_by</span><span class=\"p\">(</span><span class=\"s1\">'make_coffee'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">()</span>\n<span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">followed_by</span><span class=\"p\">(</span><span class=\"s1\">'drink_coffee'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_coffee</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">()</span>\n<span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">followed_by</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">drink_coffee</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">()</span>\n<span class=\"nd\">@wfepy</span><span class=\"o\">.</span><span class=\"n\">end_point</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">end</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>WfEpy does not provide any server scheduler or something like that. It was\ndesigned to be used in scripts, that are for example periodically executed by\ncron. If workflow have task that cannot be finished in single run library\nprovides way how to store current state of runner including user data and\nrestore it on next run.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">coffee_workflow</span>\n\n<span class=\"n\">wf</span> <span class=\"o\">=</span> <span class=\"n\">wfepy</span><span class=\"o\">.</span><span class=\"n\">Workflow</span><span class=\"p\">()</span>\n<span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">load_tasks</span><span class=\"p\">(</span><span class=\"n\">coffee_workflow</span><span class=\"p\">)</span>\n\n<span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">wf</span><span class=\"o\">.</span><span class=\"n\">create_runner</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">restore_state</span><span class=\"p\">:</span>\n    <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'state-file'</span><span class=\"p\">)</span>\n\n<span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n\n<span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"s1\">'state-file'</span><span class=\"p\">)</span>\n</pre>\n<p>This simple design provides many options how to execute your workflow and\ncustomize it. This was also reason why this library was created, we don\u2019t want\nto manage new service/server that executes few simple workflows. We would like\nto use service we already have, for example Jenkins, cron, \u2026</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install it using pip</p>\n<pre>pip3 install wfepy\n</pre>\n<p>or clone repository</p>\n<pre>git clone https://github.com/redhat-aqe/wfepy.git\ncd wfepy\n</pre>\n<p>and install Python package including dependencies</p>\n<pre>python3 setup.py install\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6325899, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b4c2f5db7d5adb14922eb10751095425", "sha256": "bad2059980b2291bf4f06ef9bf6e2e44f36ec1b9be5a86e10a76aeb9d4b43735"}, "downloads": -1, "filename": "wfepy-0.1.tar.gz", "has_sig": false, "md5_digest": "b4c2f5db7d5adb14922eb10751095425", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6426, "upload_time": "2019-12-05T10:51:15", "upload_time_iso_8601": "2019-12-05T10:51:15.862014Z", "url": "https://files.pythonhosted.org/packages/5f/db/ebc257f5945880c132a834069e2570c5ee228c06da207d60a78159bed544/wfepy-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "913f3405a3d0c541b777be6d597fdb62", "sha256": "4c9f47cabf99a1efa0287149637eeeb869b324e8e2bc0d7487db28d9ada6e7c6"}, "downloads": -1, "filename": "wfepy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "913f3405a3d0c541b777be6d597fdb62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 7408, "upload_time": "2019-12-18T14:16:19", "upload_time_iso_8601": "2019-12-18T14:16:19.153207Z", "url": "https://files.pythonhosted.org/packages/39/68/57d35e988aa961c42a5371eb91469456dd6f912671ac1ee8caaf9bdce55f/wfepy-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "913f3405a3d0c541b777be6d597fdb62", "sha256": "4c9f47cabf99a1efa0287149637eeeb869b324e8e2bc0d7487db28d9ada6e7c6"}, "downloads": -1, "filename": "wfepy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "913f3405a3d0c541b777be6d597fdb62", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <4", "size": 7408, "upload_time": "2019-12-18T14:16:19", "upload_time_iso_8601": "2019-12-18T14:16:19.153207Z", "url": "https://files.pythonhosted.org/packages/39/68/57d35e988aa961c42a5371eb91469456dd6f912671ac1ee8caaf9bdce55f/wfepy-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:07 2020"}