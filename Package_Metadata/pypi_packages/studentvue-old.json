{"info": {"author": "Kai Chang", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Student Vue Scraper\n![PyPI version](https://badge.fury.io/py/studentvue%40old.svg)\n\nTHIS LIBRARY IS FOR THE OLD VERSION OF STUDENTVUE. IT IS NOT MAINTAINED. FOR AN API FOR THE CURRENT VERSION GO TO THE [MASTER BRANCH](https://github.com/kajchang/StudentVue).\n\nThis repository provides a easy way to access data from StudentVue portals in Python programs.\n\n# How to Use\n\n```pip install studentvue@old``` or clone / download the repository and ```python setup.py install```.\n\n```\nfrom studentvue import StudentVue\n```\n\n```\nsv = StudentVue('username', 'password', 'domain name')\n```\n\n\n## Scraper Usage\n\nThe current functions of the both StudentVue classes are ```getSchedule()```, ```getStudentContactInfo()```, ```getStudentInfo()```, ```getSchoolInfo()```, ```getReportCard()```, ```getGradeBook()```, ```getGradesbyGradingPeriod(grading_period)``` and ```getGradingInfobyPeriod()```.\n\n```getSchedule()``` returns a list of dictionaries with basic class information:\n```\n[\n    {\n        \"Period\": \"1\",\n        \"Course Title\": \"Computer Programming\",\n        \"Room Name\": \"999\",\n        \"Teacher\": \"Someone\"\n    }, ...]\n```\n\n```getStudentContactInfo()``` returns a dictionary with contact information on the student:\n```\n{\n    \"Name\": \"Kid, Some\",\n    \"User ID\": \"somekid\",\n    \"Home Address\": \"Some Where Street, Some City, Some State, 99999\",\n    \"Mail Address\": \"Same as Home Address\",\n    \"Phone Numbers\": \"Home: 999-999-999\"\n}\n```\n\n```getStudentInfo()``` returns a dictionary with some other information on the student:\n```\n{\n    \"Student Name\": \"Some J. Kid\",\n    \"Student No\": \"32562395\",\n    \"Gender\": \"Male\",\n    \"Grade\": \"9\"\n}\n```\n\n```getSchoolInfo()``` returns a dictionary with some information on the school:\n```\n{\n    \"Principal\": \"Someone\",\n    \"School Name\": \"Some HS\",\n    \"Address\": \"Some Where Street, Some City, Some State, 99999\",\n    \"Phone\": \"999-999-999\",\n    \"Fax\": \"999-999-999\",\n    \"Website URL\": \"https://some-school-website/\"\n}\n```\n\n```getReportCard()``` returns a list of dictionaries with class information and your grade from the last report card:\n```\n[\n    {\n        \"Period\": \"1\",\n        \"Course Title\": \"Computer Programming\",\n        \"Teacher\": \"Someone\",\n        \"Marks\": \"A\"\n    }, ...]\n```\n\n```getGradeBook()``` is similar, but returns numbers out of 100 instead of letters, and returns the latest grades from this grading period, opposed to grades from the last report card. Additionally, it sometimes includes the overall grade for the season/ semester/ trimester:\n```\n[\n    {\n        \"Period\": \"1\",\n        \"Course Title\": \"Computer Programming\",\n        \"Teacher\": \"Someone\",\n        \"P6\": 95.54,\n        \"Spring\": 96.67\n    }, ...]\n```\n\n```getGradesbyGradingPeriod(grading_period)``` takes a grading period as a parameter and returns the final grade for that grading period, out of 100, in the same format as ```getGradeBook()```:\n```\n[\n    {\n        \"Period\": \"1\",\n        \"Course Title\": \"Computer Programming\",\n        \"Teacher\": \"Someone\",\n        \"P1\": 97.42\n    }, ...]\n```\n\n```getGradingInfobyPeriod(period)``` takes a period as a parameter and returns a dictionary with a grading overview and individual assignment grades:\n```\n{\n    \"Summary\": [\n        {\n            \"Assignment Type\": \"Classwork\",\n            \"Weight\": 0.05,\n            \"Points\": 566.0,\n            \"Points Possible\": 450.0,\n            \"Average\": 0.0629\n        }, ...\n    ],\n    \"Assignments\": [\n        {\n            \"Date\": \"05/22/2018\",\n            \"Assignment\": \"Chapter 14 Test\",\n            \"Assignment Type\": \"Tests and Quizzes\",\n            \"Score Type\": \"Raw Score\",\n            \"Points\": \"3.50/5.00\",\n            \"Notes\": \" \"\n        }, ...\n    ]\n}\n```\n\n# TODO\n\n- Write tests\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kajchang/studentvuescraper", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "studentvue-old", "package_url": "https://pypi.org/project/studentvue-old/", "platform": "", "project_url": "https://pypi.org/project/studentvue-old/", "project_urls": {"Homepage": "https://github.com/kajchang/studentvuescraper"}, "release_url": "https://pypi.org/project/studentvue-old/1.0/", "requires_dist": ["robobrowser"], "requires_python": "", "summary": "Python Scraper for StudentVue Portals", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Student Vue Scraper</h1>\n<p><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/902408e51728c31a9289b7b8b7414c795cc51bc0/68747470733a2f2f62616467652e667572792e696f2f70792f73747564656e747675652534306f6c642e737667\"></p>\n<p>THIS LIBRARY IS FOR THE OLD VERSION OF STUDENTVUE. IT IS NOT MAINTAINED. FOR AN API FOR THE CURRENT VERSION GO TO THE <a href=\"https://github.com/kajchang/StudentVue\" rel=\"nofollow\">MASTER BRANCH</a>.</p>\n<p>This repository provides a easy way to access data from StudentVue portals in Python programs.</p>\n<h1>How to Use</h1>\n<p><code>pip install studentvue@old</code> or clone / download the repository and <code>python setup.py install</code>.</p>\n<pre><code>from studentvue import StudentVue\n</code></pre>\n<pre><code>sv = StudentVue('username', 'password', 'domain name')\n</code></pre>\n<h2>Scraper Usage</h2>\n<p>The current functions of the both StudentVue classes are <code>getSchedule()</code>, <code>getStudentContactInfo()</code>, <code>getStudentInfo()</code>, <code>getSchoolInfo()</code>, <code>getReportCard()</code>, <code>getGradeBook()</code>, <code>getGradesbyGradingPeriod(grading_period)</code> and <code>getGradingInfobyPeriod()</code>.</p>\n<p><code>getSchedule()</code> returns a list of dictionaries with basic class information:</p>\n<pre><code>[\n    {\n        \"Period\": \"1\",\n        \"Course Title\": \"Computer Programming\",\n        \"Room Name\": \"999\",\n        \"Teacher\": \"Someone\"\n    }, ...]\n</code></pre>\n<p><code>getStudentContactInfo()</code> returns a dictionary with contact information on the student:</p>\n<pre><code>{\n    \"Name\": \"Kid, Some\",\n    \"User ID\": \"somekid\",\n    \"Home Address\": \"Some Where Street, Some City, Some State, 99999\",\n    \"Mail Address\": \"Same as Home Address\",\n    \"Phone Numbers\": \"Home: 999-999-999\"\n}\n</code></pre>\n<p><code>getStudentInfo()</code> returns a dictionary with some other information on the student:</p>\n<pre><code>{\n    \"Student Name\": \"Some J. Kid\",\n    \"Student No\": \"32562395\",\n    \"Gender\": \"Male\",\n    \"Grade\": \"9\"\n}\n</code></pre>\n<p><code>getSchoolInfo()</code> returns a dictionary with some information on the school:</p>\n<pre><code>{\n    \"Principal\": \"Someone\",\n    \"School Name\": \"Some HS\",\n    \"Address\": \"Some Where Street, Some City, Some State, 99999\",\n    \"Phone\": \"999-999-999\",\n    \"Fax\": \"999-999-999\",\n    \"Website URL\": \"https://some-school-website/\"\n}\n</code></pre>\n<p><code>getReportCard()</code> returns a list of dictionaries with class information and your grade from the last report card:</p>\n<pre><code>[\n    {\n        \"Period\": \"1\",\n        \"Course Title\": \"Computer Programming\",\n        \"Teacher\": \"Someone\",\n        \"Marks\": \"A\"\n    }, ...]\n</code></pre>\n<p><code>getGradeBook()</code> is similar, but returns numbers out of 100 instead of letters, and returns the latest grades from this grading period, opposed to grades from the last report card. Additionally, it sometimes includes the overall grade for the season/ semester/ trimester:</p>\n<pre><code>[\n    {\n        \"Period\": \"1\",\n        \"Course Title\": \"Computer Programming\",\n        \"Teacher\": \"Someone\",\n        \"P6\": 95.54,\n        \"Spring\": 96.67\n    }, ...]\n</code></pre>\n<p><code>getGradesbyGradingPeriod(grading_period)</code> takes a grading period as a parameter and returns the final grade for that grading period, out of 100, in the same format as <code>getGradeBook()</code>:</p>\n<pre><code>[\n    {\n        \"Period\": \"1\",\n        \"Course Title\": \"Computer Programming\",\n        \"Teacher\": \"Someone\",\n        \"P1\": 97.42\n    }, ...]\n</code></pre>\n<p><code>getGradingInfobyPeriod(period)</code> takes a period as a parameter and returns a dictionary with a grading overview and individual assignment grades:</p>\n<pre><code>{\n    \"Summary\": [\n        {\n            \"Assignment Type\": \"Classwork\",\n            \"Weight\": 0.05,\n            \"Points\": 566.0,\n            \"Points Possible\": 450.0,\n            \"Average\": 0.0629\n        }, ...\n    ],\n    \"Assignments\": [\n        {\n            \"Date\": \"05/22/2018\",\n            \"Assignment\": \"Chapter 14 Test\",\n            \"Assignment Type\": \"Tests and Quizzes\",\n            \"Score Type\": \"Raw Score\",\n            \"Points\": \"3.50/5.00\",\n            \"Notes\": \" \"\n        }, ...\n    ]\n}\n</code></pre>\n<h1>TODO</h1>\n<ul>\n<li>Write tests</li>\n</ul>\n\n          </div>"}, "last_serial": 6264498, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "0859b5edc875ab9c0b81e202320168f6", "sha256": "b90b07569f27137df890a9e7718ba99c47e46c99d5cddb3ded2669fa30bc7c4a"}, "downloads": -1, "filename": "studentvue_old-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0859b5edc875ab9c0b81e202320168f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9970, "upload_time": "2019-12-09T04:15:18", "upload_time_iso_8601": "2019-12-09T04:15:18.163508Z", "url": "https://files.pythonhosted.org/packages/3b/0e/875481e4a40e93a18e8db4be4186c50ac31f96260de4ab7d1c13307f93d4/studentvue_old-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50935c6f6ce83d1e493b81d11193b4f5", "sha256": "dd0c327a849f38ad2c79399039e7966cdbddfd9ae7f8e46458ae0f7505796e75"}, "downloads": -1, "filename": "studentvue@old-1.0.tar.gz", "has_sig": false, "md5_digest": "50935c6f6ce83d1e493b81d11193b4f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4081, "upload_time": "2019-12-09T04:15:22", "upload_time_iso_8601": "2019-12-09T04:15:22.260487Z", "url": "https://files.pythonhosted.org/packages/02/61/d9b73f455c55b5cdde9bf8dfe4031f174aad36023d81b907bff8e8c24f6c/studentvue@old-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0859b5edc875ab9c0b81e202320168f6", "sha256": "b90b07569f27137df890a9e7718ba99c47e46c99d5cddb3ded2669fa30bc7c4a"}, "downloads": -1, "filename": "studentvue_old-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0859b5edc875ab9c0b81e202320168f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9970, "upload_time": "2019-12-09T04:15:18", "upload_time_iso_8601": "2019-12-09T04:15:18.163508Z", "url": "https://files.pythonhosted.org/packages/3b/0e/875481e4a40e93a18e8db4be4186c50ac31f96260de4ab7d1c13307f93d4/studentvue_old-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50935c6f6ce83d1e493b81d11193b4f5", "sha256": "dd0c327a849f38ad2c79399039e7966cdbddfd9ae7f8e46458ae0f7505796e75"}, "downloads": -1, "filename": "studentvue@old-1.0.tar.gz", "has_sig": false, "md5_digest": "50935c6f6ce83d1e493b81d11193b4f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4081, "upload_time": "2019-12-09T04:15:22", "upload_time_iso_8601": "2019-12-09T04:15:22.260487Z", "url": "https://files.pythonhosted.org/packages/02/61/d9b73f455c55b5cdde9bf8dfe4031f174aad36023d81b907bff8e8c24f6c/studentvue@old-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:58 2020"}