{"info": {"author": "CB", "author_email": "alain.trouve@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# CB-Epid-Covid\n\nImplementation d'un mod\u00e8le simple de pr\u00e9vision du nombre de d\u00e9c\u00e8s \njournaliers en fonction des donn\u00e9es de mortalit\u00e9 journali\u00e8res report\u00e9es. \n\nLe mod\u00e8le d'\u00e9volution du nombre de cas est juste un mod\u00e8le d'EDO qui \nestime la dynamique du param\u00eatre de la variable de Poisson sous-jacent au \nnombre de morts cumul\u00e9s en fonction du temps. Le systeme contient deux \n\u00e9quations, la premi\u00e8re pour le nombre de mort (cumul\u00e9) $`t\\to m(t)`$ et l'autre \npour l'\u00e9volution du taux d'accroissement $`\\alpha`$ journalier du nombre de morts\n\n```math\n\\left\\{\\begin{array}{rcl}\n\\dot{m} & = & \\alpha m \\\\\n\\dot{\\alpha} &= &-\\rho\\alpha\n\\end{array}\\right.\n```\n\nOn suppose ici que $`\\rho`$ est constant en temps (mod\u00e9lisation de l'effet du \nconfinement) \u00e0 estimer sur les donn\u00e9es. Ce type de comportement est bien \ncorrobor\u00e9 sur les donn\u00e9es de la r\u00e9gion de Hubei et de l'Italie) \n\nLa solution est donn\u00e9e par \n\n```math\n\\left\\{\n\\begin{array}{rcl}\n\\alpha(t) & = & \\alpha(t_0)\\exp(-\\rho(t-t_0))\\\\\n& &\\\\\nm(t)&= & m(t_0)\\exp(\\frac{\\alpha(t_0)}{\\rho}(1-\\exp(-\\rho(t-t_0))\n\\end{array}\\right.\n```\n\nDans l'impl\u00e9mentation actuelle, nous avons comme param\u00e8tre \n$`\\theta=(m_0,\\alpha_0,\\rho)`$ et implicitement $`t_0`$ qui est fix\u00e9 \u00e0 la main. \nOn suppose que les donn\u00e9es observ\u00e9es sont i.i.d et que \n$`\\mathbf{m}_i\\sim\\mathcal{P}(m(t_i))`$ pour \n$`i=0,\\cdots,n-1`$ (mod\u00e8le de bruit Poissonien). \nL'estimation est faite par max de vraisemblance par un algorithme L-BFGS.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://plmlab.math.cnrs.fr/atrouve/cb-epid-covid.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "cbcov", "package_url": "https://pypi.org/project/cbcov/", "platform": "", "project_url": "https://pypi.org/project/cbcov/", "project_urls": {"Homepage": "https://plmlab.math.cnrs.fr/atrouve/cb-epid-covid.git"}, "release_url": "https://pypi.org/project/cbcov/0.2/", "requires_dist": null, "requires_python": "", "summary": "Simple models for covid prediction", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>CB-Epid-Covid</h1>\n<p>Implementation d'un mod\u00e8le simple de pr\u00e9vision du nombre de d\u00e9c\u00e8s\njournaliers en fonction des donn\u00e9es de mortalit\u00e9 journali\u00e8res report\u00e9es.</p>\n<p>Le mod\u00e8le d'\u00e9volution du nombre de cas est juste un mod\u00e8le d'EDO qui\nestime la dynamique du param\u00eatre de la variable de Poisson sous-jacent au\nnombre de morts cumul\u00e9s en fonction du temps. Le systeme contient deux\n\u00e9quations, la premi\u00e8re pour le nombre de mort (cumul\u00e9) $<code>t\\to m(t)</code>$ et l'autre\npour l'\u00e9volution du taux d'accroissement $<code>\\alpha</code>$ journalier du nombre de morts</p>\n<pre>\\left\\{\\begin{array}{rcl}\n\\dot{m} &amp; = &amp; \\alpha m \\\\\n\\dot{\\alpha} &amp;= &amp;-\\rho\\alpha\n\\end{array}\\right.\n</pre>\n<p>On suppose ici que $<code>\\rho</code>$ est constant en temps (mod\u00e9lisation de l'effet du\nconfinement) \u00e0 estimer sur les donn\u00e9es. Ce type de comportement est bien\ncorrobor\u00e9 sur les donn\u00e9es de la r\u00e9gion de Hubei et de l'Italie)</p>\n<p>La solution est donn\u00e9e par</p>\n<pre>\\left\\{\n\\begin{array}{rcl}\n\\alpha(t) &amp; = &amp; \\alpha(t_0)\\exp(-\\rho(t-t_0))\\\\\n&amp; &amp;\\\\\nm(t)&amp;= &amp; m(t_0)\\exp(\\frac{\\alpha(t_0)}{\\rho}(1-\\exp(-\\rho(t-t_0))\n\\end{array}\\right.\n</pre>\n<p>Dans l'impl\u00e9mentation actuelle, nous avons comme param\u00e8tre\n$<code>\\theta=(m_0,\\alpha_0,\\rho)</code>$ et implicitement $<code>t_0</code>$ qui est fix\u00e9 \u00e0 la main.\nOn suppose que les donn\u00e9es observ\u00e9es sont i.i.d et que\n$<code>\\mathbf{m}_i\\sim\\mathcal{P}(m(t_i))</code>$ pour\n$<code>i=0,\\cdots,n-1</code>$ (mod\u00e8le de bruit Poissonien).\nL'estimation est faite par max de vraisemblance par un algorithme L-BFGS.</p>\n\n          </div>"}, "last_serial": 6927359, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7783ac0d89149ca7d2b29f7bdc593a67", "sha256": "c57b2afcd43c710b1ad92917da4b0d9d7c0a0d77fd066cc7e30170aacad8ebb3"}, "downloads": -1, "filename": "cbcov-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7783ac0d89149ca7d2b29f7bdc593a67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11874, "upload_time": "2020-04-01T10:01:32", "upload_time_iso_8601": "2020-04-01T10:01:32.294225Z", "url": "https://files.pythonhosted.org/packages/0f/5d/973d77bc6267f179af1a88f31ea53deb776284ddb00b0cb673ecf20cc4de/cbcov-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "8d8a487a32b7a8372840cfc84fda3b8f", "sha256": "b5b40b66b32eb2a0d436f0ca3907748d11443f159aa7cb92c7dc2cebe7b92fc1"}, "downloads": -1, "filename": "cbcov-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8d8a487a32b7a8372840cfc84fda3b8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14665, "upload_time": "2020-04-01T12:34:50", "upload_time_iso_8601": "2020-04-01T12:34:50.127772Z", "url": "https://files.pythonhosted.org/packages/35/05/c02d46df42f3cbd8bb1da9ddc808177c288eb547c9ef73f057d19e79040f/cbcov-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8d8a487a32b7a8372840cfc84fda3b8f", "sha256": "b5b40b66b32eb2a0d436f0ca3907748d11443f159aa7cb92c7dc2cebe7b92fc1"}, "downloads": -1, "filename": "cbcov-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8d8a487a32b7a8372840cfc84fda3b8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14665, "upload_time": "2020-04-01T12:34:50", "upload_time_iso_8601": "2020-04-01T12:34:50.127772Z", "url": "https://files.pythonhosted.org/packages/35/05/c02d46df42f3cbd8bb1da9ddc808177c288eb547c9ef73f057d19e79040f/cbcov-0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:35:10 2020"}