{"info": {"author": "The Wasmer Engineering Team <engineering@wasmer.io>", "author_email": "The Wasmer Engineering Team <engineering@wasmer.io>", "bugtrack_url": null, "classifiers": [], "description": "<p align=\"center\">\n  <a href=\"https://wasmer.io\" target=\"_blank\" rel=\"noopener\">\n    <img width=\"300\" src=\"https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/logo.png\" alt=\"Wasmer logo\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://spectrum.chat/wasmer\">\n    <img src=\"https://withspectrum.github.io/badge/badge.svg\" alt=\"Join the Wasmer Community\" valign=\"middle\"></a>\n  <a href=\"https://pypi.org/project/wasmer/\">\n      <img src=\"https://img.shields.io/pypi/format/wasmer.svg\" alt=\"Pypi\" valign=\"middle\"/></a>\n  <a href=\"https://pypi.org/project/wasmer/\">\n      <img src=\"https://pepy.tech/badge/wasmer\" alt=\"Number of downloads on Pypi\" valign=\"middle\"/></a>\n  <a href=\"https://github.com/wasmerio/wasmer/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/wasmerio/wasmer.svg\" alt=\"License\" valign=\"middle\"></a>\n</p>\n\nWasmer is a Python library for executing WebAssembly binaries:\n\n  * **Easy to use**: The `wasmer` API mimics the standard WebAssembly API,\n  * **Fast**: `wasmer` executes the WebAssembly modules as fast as\n    possible, close to **native speed**,\n  * **Safe**: All calls to WebAssembly will be fast, but more\n    importantly, completely safe and sandboxed.\n\n# Install\n\nTo install the `wasmer` Python library, just run this command in your\nshell:\n\n```sh\n$ pip install wasmer\n```\n\n**Note**: There is a limited set of wheels published so far. More are\ncoming.\n\n[View the `wasmer` on Pypi](https://pypi.org/project/wasmer/).\n\n# Example\n\nThere is a toy program in `examples/simple.rs`, written in Rust (or\nany other language that compiles to WebAssembly):\n\n```rust\n#[no_mangle]\npub extern fn sum(x: i32, y: i32) -> i32 {\n    x + y\n}\n```\n\nAfter compilation to WebAssembly, the\n[`examples/simple.wasm`](https://github.com/wasmerio/python-ext-wasm/blob/master/examples/simple.wasm)\nbinary file is generated. ([Download\nit](https://github.com/wasmerio/python-ext-wasm/raw/master/examples/simple.wasm)).\n\nThen, we can excecute it in Python:\n\n```python\nfrom wasmer import Instance\n\nwasm_bytes = open('simple.wasm', 'rb').read()\ninstance = Instance(wasm_bytes)\nresult = instance.exports.sum(5, 37)\n\nprint(result) # 42!\n```\n\nAnd then, finally, enjoy by running:\n\n```sh\n$ python examples/simple.py\n```\n\nFor a soft introduction about how different languages compile to Wasm, it is possible to give it a try at [WebAssembly Studio](https://webassembly.studio).\n\n# API of the `wasmer` extension/module\n\n## The `Instance` class\n\nInstantiates a WebAssembly module represented by bytes, and calls\nexported functions on it:\n\n```python\nfrom wasmer import Instance\n\n# Get the Wasm module as bytes.\nwasm_bytes = open('my_program.wasm', 'rb').read()\n\n# Instantiate the Wasm module.\ninstance = Instance(wasm_bytes)\n\n# Call a function on it.\nresult = instance.exports.sum(1, 2)\n\nprint(result) # 3\n```\n\n### Exported functions\n\nAll exported functions are accessible on the `exports` getter.\nArguments of these functions are automatically casted to WebAssembly\nvalues. If one wants to explicitely pass a value of a particular type,\nit is possible to use the `Value` class,\ne.g. `instance.exports.sum(Value.i32(1), Value.i32(2))`. Note that for\nmost usecases, this is not necessary.\n\n### Exported memory\n\nThe `memory` getter exposes the `Memory` class representing the memory\nof that particular instance, e.g.:\n\n```python\nview = instance.memory.uint8_view()\n```\n\n`Instance.memory` can return `None` if no memory is exported.\n\nSee below for more information.\n\n## The `Module` class\n\nCompiles a sequence of bytes into a WebAssembly module. From here, it\nis possible to instantiate it:\n\n```python\nfrom wasmer import Module\n\n# Get the Wasm bytes.\nwasm_bytes = open('my_program.wasm', 'rb').read()\n\n# Compile the bytes into a Wasm module.\nmodule = Module(wasm_bytes)\n\n# Instantiate the Wasm module.\ninstance = module.instantiate()\n\n# Call a function on it.\nresult = instance.exports.sum(1, 2)\n\nprint(result) # 3\n```\n\n### Exports, imports, and custom sections\n\nIt is also possible to query the module to get a list of exports, of\nimports, or of custom sections.\n\n```python\nfrom wasmer import Module, ExportKind, ImportKind\n\n# Get the Wasm bytes.\nwasm_bytes = open('my_program.wasm', 'rb').read()\n\n# Compile the bytes into a Wasm module.\nmodule = Module(wasm_bytes)\n\n# Check all the exports.\nassert module.exports == [{'kind': ExportKind.MEMORY,   'name': 'memory'},\n                          {'kind': ExportKind.TABLE,    'name': '__indirect_function_table'},\n                          {'kind': ExportKind.GLOBAL,   'name': '__heap_base'},\n                          {'kind': ExportKind.GLOBAL,   'name': '__data_end'},\n                          {'kind': ExportKind.FUNCTION, 'name': 'sum'}]\n\n# Check all the imports.\nassert module.imports == [{'kind': ImportKind.FUNCTION,\n                           'namespace': 'ns',\n                           'name': 'func'},\n                          {'kind': ImportKind.MEMORY,\n                           'namespace': 'ns',\n                           'name': 'mem',\n                           'minimum_pages': 3,\n                           'maximum_pages': 4},\n                          {'kind': ImportKind.GLOBAL,\n                           'namespace': 'ns',\n                           'name': 'glo',\n                           'mutable': False,\n                           'type': 'f32'},\n                          {'kind': ImportKind.TABLE,\n                           'namespace': 'ns',\n                           'name': 'tab',\n                           'minimum_elements': 1,\n                           'maximum_elements': 2,\n                           'element_type': 'anyfunc'}]\n\n# Check all the custom sections.\nassert sorted(module.custom_section_names) == ['section1', 'section2']\n\n# Check one specific custom section content (in bytes).\ncustom_section1 = module.custom_section('section1')\n\nassert type(custom_section1) == bytes\nassert custom_sections1 == b'Wasmer'\n```\n\nNote the `ExportKind` and `ImportKind` enumerations. They are precisely\n[`IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum).\n\n`Module.exports` always returns a list of dictionnaries with the\n`kind` and `name` pairs. `Module.imports` always returns a list of\ndictionnaries with at least the `namespace` and `name` pairs. Some\nspecific pairs exist, see the following table.\n\n| `ExportKind`/`ImportKind` variants | Meaning | Specific pairs for `imports` |\n|-|-|-|\n| `FUNCTION` | Function | none |\n| `GLOBAL` | Global variable | `mutable` and `type` |\n| `MEMORY` | Memory | `minimum_pages` and `maximum_pages` (`None` if absent) |\n| `TABLE` | Table | `minimum_elements`, `maximum_elements` (`None` is absent) and `element_type` |\n\n### Serialization and deserialization\n\nThe `Module.serialize` method and its complementary\n`Module.deserialize` static method help to respectively serialize and\ndeserialize a compiled WebAssembly module, thus saving the compilation\ntime for the next use:\n\n```python\nfrom wasmer import Module\n\n# Get the Wasm bytes.\nwasm_bytes = open('my_program.wasm', 'rb').read()\n\n# Compile the bytes into a Wasm module.\nmodule1 = Module(wasm_bytes)\n\n# Serialize the module.\nserialized_module = module1.serialize()\n\n# Let's forget about the module for this example.\ndel module1\n\n# Deserialize the module.\nmodule2 = Module.deserialize(serialized_module)\n\n# Instantiate and use it.\nresult = module2.instantiate().exports.sum(1, 2)\n\nprint(result) # 3\n```\n\nA serialized module is a sequence of bytes. They can be saved in any\nstorage.\n\nThe `Module.validate` static method check whether the given bytes\nrepresent valid WebAssembly bytes:\n\n```python\nfrom wasmer import Module\n\nwasm_bytes = open('my_program.wasm', 'rb').read()\n\nif not Module.validate(wasm_bytes):\n    print('The program seems corrupted.')\n```\n\n## The `Value` class\n\nBuilds WebAssembly values with the correct types:\n\n```python\nfrom wasmer import Value\n\n# Integer on 32-bits.\nvalue_i32 = Value.i32(7)\n\n# Integer on 64-bits.\nvalue_i64 = Value.i64(7)\n\n# Float on 32-bits.\nvalue_f32 = Value.f32(7.42)\n\n# Float on 64-bits.\nvalue_f64 = Value.f64(7.42)\n\n# Integer on 128-bits.\nvalue_v128 = Value.v128(7)\n```\n\nThe `Value.([if](32|64)|v128)` static methods must be considered as\nstatic constructors.\n\nThe `__repr__` method allows to get a string representation of a\n`Value` instance:\n\n```python\nprint(repr(value_i32)) # I32(7)\n```\n\n## The `Memory` class\n\nA WebAssembly instance has its own memory, represented by the `Memory`\nclass. It is accessible by the `Instance.memory` getter.\n\n### Growing the memory\n\nThe `Memory.grow` method allows to grow the memory by a number of\npages (of 65kb each).\n\n```python\ninstance.memory.grow(1)\n```\n\n### Getting an access to the in-memory data\n\nThe `Memory` class offers 2 ways to get an access to its data:\n\n  1. Direct raw buffer access, through the [Python Buffer\n     Protocol][python-buffer-protocol],\n  2. Views.\n\nTo get a direct raw buffer, you can use the `buffer` getter, combined\nwith the builtin [`memoryview`], [`bytes`] or [`bytearray`] Python\nfunctions:\n\n```python\n# With `memoryview`\nmemory_view = memoryview(instance.memory.buffer)\nmemory_size = memory_view.nbytes\nassert bytes(memory_view[0:3]).decode() == 'Wasmer'\n\n# With `bytearray`\nbyte_array = bytearray(instance.memory.buffer)\nmemory_size = len(byte_array)\nassert byte_array[0:6].decode() == 'Wasmer'\n```\n\nTo create specific views over the memory data, you can use the\nfollowing methods:\n\n  * `uint8_view(offset = 0)`,\n  * `int8_view(offset = 0)`,\n  * `uint16_view(offset = 0)`,\n  * `int16_view(offset = 0)`,\n  * `uint32_view(offset = 0)`,\n  * `int32_view(offset = 0)`.\n\nAll these methods accept one optional argument: `offset`, to subset\nthe memory view at a particular offset. These methods return\nrespectively an `*Array` object, i.e. `uint8_view` returns a\n`Uint8Array` object and so on.\n\n```python\nuint8_view = instance.memory.uint8_view(offset = 7)\nbytes = uint8_view[0:3]\n```\n\n[python-buffer-protocol]: https://docs.python.org/3/c-api/buffer.html\n[`memoryview`]: https://docs.python.org/3.3/library/functions.html#func-memoryview\n[`bytes`]: https://docs.python.org/3.3/library/functions.html#bytes\n[`bytearray`]: https://docs.python.org/3.3/library/functions.html#bytearray\n\n### The `*Array` classes\n\nThese classes represent views over a memory of an instance where\nelements are specific bytes.\n\n| Class | View buffer as a sequence of\u2026 | Bytes per element |\n|-|-|-|\n| `Int8Array` | `int8` | 1 |\n| `Uint8Array` | `uint8` | 1 |\n| `Int16Array` | `int16` | 2 |\n| `Uint16Array` | `uint16` | 2 |\n| `Int32Array` | `int32` | 4 |\n| `Uint32Array` | `uint32` | 4 |\n\nAll these classes share the same implementation. Taking the example of\n`Uint8Array`, the class looks like this:\n\n```python\nclass Uint8Array:\n    @property\n    def bytes_per_element()\n\n    def __len__()\n    def __getitem__(index|slice)\n    def __setitem__(index, value)\n```\n\n### Let's see in action\n\nFirst start with a `uint8_view`:\n\n```python\nfrom wasmer import Instance\n\n# Get the Wasm module as bytes.\nwasm_bytes = open('my_program.wasm', 'rb').read()\n\n# Instantiate the Wasm module.\ninstance = Instance(wasm_bytes)\n\n# Call a function that returns a pointer to a string for instance.\npointer = instance.exports.return_string()\n\n# Get the memory view, with the offset set to `pointer` (default is 0).\nmemory = instance.memory.uint8_view(offset = pointer)\nmemory_length = len(memory)\n\n# Read the string pointed by the pointer.\nnth = 0;\nstring = ''\n\nwhile nth < memory_length:\n    char = memory[nth]\n\n    if char == 0:\n        break\n\n    string += chr(char)\n    nth += 1\n\nprint(string) # Hello, World!\n```\n\nA slice can be used as index of the `__getitem__` method, which is\nuseful when we already know the size of the data we want to read, e.g.:\n\n```python\nprint(bytes(memory[0:13]).decode()) # Hello, World!\n```\n\nWith a direct raw buffer, we would get:\n\n```python\n# Call a function that returns a pointer to a string for instance.\npointer = instance.exports.return_string()\n\n# Get a `bytearray` object.\nbyte_array = bytearray(instance.memory.buffer)\n\n# Read the string pointed by the pointer.\nprint(byte_array[pointer:pointer+13].decode()) # Hello, World!\n```\n\nNotice that `*Array` and `Buffer` treat bytes in little-endian, as\nrequired by the WebAssembly specification, [Chapter Structure, Section\nInstructions, Sub-Section Memory\nInstructions](https://webassembly.github.io/spec/core/syntax/instructions.html#memory-instructions):\n\n> All values are read and written in [little\n> endian](https://en.wikipedia.org/wiki/Endianness#Little-endian) byte\n> order.\n\nEach view shares the same memory buffer internally. Let's have some fun:\n\n```python\nint8 = instance.memory.int8_view()\nint16 = instance.memory.int16_view()\nint32 = instance.memory.int32_view()\n\n               b\u2081\n            \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nint8[0] = 0b00000001\n               b\u2082\n            \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nint8[1] = 0b00000100\n               b\u2083\n            \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nint8[2] = 0b00010000\n               b\u2084\n            \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nint8[3] = 0b01000000\n\n// No surprise with the following assertions.\n                       b\u2081\n                    \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nassert int8[0] == 0b00000001\n                       b\u2082\n                    \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nassert int8[1] == 0b00000100\n                       b\u2083\n                    \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nassert int8[2] == 0b00010000\n                       b\u2084\n                    \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nassert int8[3] == 0b01000000\n\n// The `int16` view reads 2 bytes.\n                        b\u2082       b\u2081\n                     \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510 \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nassert int16[0] == 0b00000100_00000001\n                        b\u2084       b\u2083\n                     \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510 \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nassert int16[1] == 0b01000000_00010000\n\n// The `int32` view reads 4 bytes.\n                        b\u2084       b\u2083       b\u2082       b\u2081\n                     \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510 \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510 \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510 \u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510\nassert int32[0] == 0b01000000_00010000_00000100_00000001\n```\n\n### Performance\n\nUsing the direct raw buffer API with\n`bytearray(instance.memory.buffer)` is 15x faster than using\n`instance.memory.uint8_view()` for _reading_. However, the direct raw\nbuffer API is _read-only_ for the moment, whilst the views are read\nand write. Chose them wisely.\n\n# Development\n\nThe Python extension is written in Rust, with [`pyo3`] and\n[`maturin`].\n\nTo set up your environment, run only once:\n\n```sh\n$ just prelude\n```\n\nIt will install `pyo3` and `maturin` for Python and for Rust. It will\nalso install [`virtualenv`].\n\nThen, simply run:\n\n```sh\n$ .env/bin/activate\n$ just build\n$ just python-run examples/simple.py\n```\n\nIf you need to interact with Python, or run a specific file, use the\nfollowing commands:\n\n```sh\n$ just python-run\n$ just python-run file/to/run.py\n```\n\nFinally, to inspect the extension; run:\n\n```sh\n$ just inspect\n```\n\n(Yes, you need [`just`]).\n\n# Testing\n\nOnce the extension is compiled and installed (just run `just build`),\nrun the following command:\n\n```sh\n$ just test\n```\n\n# What is WebAssembly?\n\nQuoting [the WebAssembly site](https://webassembly.org/):\n\n> WebAssembly (abbreviated Wasm) is a binary instruction format for a\n> stack-based virtual machine. Wasm is designed as a portable target\n> for compilation of high-level languages like C/C++/Rust, enabling\n> deployment on the web for client and server applications.\n\nAbout speed:\n\n> WebAssembly aims to execute at native speed by taking advantage of\n> [common hardware\n> capabilities](https://webassembly.org/docs/portability/#assumptions-for-efficient-execution)\n> available on a wide range of platforms.\n\nAbout safety:\n\n> WebAssembly describes a memory-safe, sandboxed [execution\n> environment](https://webassembly.org/docs/semantics/#linear-memory) [\u2026].\n\n# License\n\nThe entire project is under the MIT License. Please read [the\n`LICENSE` file][license].\n\n\n[Pypi]: https://pypi.org/\n[`rust-cpython`]: https://github.com/dgrunwald/rust-cpython\n[`pyo3`]: https://github.com/PyO3/pyo3\n[`maturin`]: https://github.com/PyO3/maturin\n[`virtualenv`]: https://virtualenv.pypa.io/\n[`just`]: https://github.com/casey/just/\n[license]: https://github.com/wasmerio/wasmer/blob/master/LICENSE\n", "description_content_type": "text/markdown; charset=UTF-8; variant=GFM", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "python extension webassembly", "license": "", "maintainer": "", "maintainer_email": "", "name": "wasmer", "package_url": "https://pypi.org/project/wasmer/", "platform": "", "project_url": "https://pypi.org/project/wasmer/", "project_urls": null, "release_url": "https://pypi.org/project/wasmer/0.4.1/", "requires_dist": null, "requires_python": "", "summary": "Python extension to run WebAssembly binaries", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <a href=\"https://wasmer.io\" rel=\"nofollow\">\n    <img alt=\"Wasmer logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f61dd52e07bc98d2509d128f93e6cfc240934c91/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f7761736d6572696f2f7761736d65722f6d61737465722f6173736574732f6c6f676f2e706e67\" width=\"300\">\n  </a>\n</p>\n<p align=\"center\">\n  <a href=\"https://spectrum.chat/wasmer\" rel=\"nofollow\">\n    <img alt=\"Join the Wasmer Community\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8299923510866316317464943f9b48d147f835ce/68747470733a2f2f77697468737065637472756d2e6769746875622e696f2f62616467652f62616467652e737667\"></a>\n  <a href=\"https://pypi.org/project/wasmer/\" rel=\"nofollow\">\n      <img alt=\"Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/375871558d3994e80661e7c631a146f302029484/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f7761736d65722e737667\"></a>\n  <a href=\"https://pypi.org/project/wasmer/\" rel=\"nofollow\">\n      <img alt=\"Number of downloads on Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3161f5c7246486f1505570de13bef9dfe3ec35c/68747470733a2f2f706570792e746563682f62616467652f7761736d6572\"></a>\n  <a href=\"https://github.com/wasmerio/wasmer/blob/master/LICENSE\" rel=\"nofollow\">\n    <img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46df69a33e702081baf6e28890c8a17a965c790b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f7761736d6572696f2f7761736d65722e737667\"></a>\n</p>\n<p>Wasmer is a Python library for executing WebAssembly binaries:</p>\n<ul>\n<li><strong>Easy to use</strong>: The <code>wasmer</code> API mimics the standard WebAssembly API,</li>\n<li><strong>Fast</strong>: <code>wasmer</code> executes the WebAssembly modules as fast as\npossible, close to <strong>native speed</strong>,</li>\n<li><strong>Safe</strong>: All calls to WebAssembly will be fast, but more\nimportantly, completely safe and sandboxed.</li>\n</ul>\n<h1>Install</h1>\n<p>To install the <code>wasmer</code> Python library, just run this command in your\nshell:</p>\n<pre>$ pip install wasmer\n</pre>\n<p><strong>Note</strong>: There is a limited set of wheels published so far. More are\ncoming.</p>\n<p><a href=\"https://pypi.org/project/wasmer/\" rel=\"nofollow\">View the <code>wasmer</code> on Pypi</a>.</p>\n<h1>Example</h1>\n<p>There is a toy program in <code>examples/simple.rs</code>, written in Rust (or\nany other language that compiles to WebAssembly):</p>\n<pre><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre>\n<p>After compilation to WebAssembly, the\n<a href=\"https://github.com/wasmerio/python-ext-wasm/blob/master/examples/simple.wasm\" rel=\"nofollow\"><code>examples/simple.wasm</code></a>\nbinary file is generated. (<a href=\"https://github.com/wasmerio/python-ext-wasm/raw/master/examples/simple.wasm\" rel=\"nofollow\">Download\nit</a>).</p>\n<p>Then, we can excecute it in Python:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Instance</span>\n\n<span class=\"n\">wasm_bytes</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'simple.wasm'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"n\">wasm_bytes</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">exports</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># 42!</span>\n</pre>\n<p>And then, finally, enjoy by running:</p>\n<pre>$ python examples/simple.py\n</pre>\n<p>For a soft introduction about how different languages compile to Wasm, it is possible to give it a try at <a href=\"https://webassembly.studio\" rel=\"nofollow\">WebAssembly Studio</a>.</p>\n<h1>API of the <code>wasmer</code> extension/module</h1>\n<h2>The <code>Instance</code> class</h2>\n<p>Instantiates a WebAssembly module represented by bytes, and calls\nexported functions on it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Instance</span>\n\n<span class=\"c1\"># Get the Wasm module as bytes.</span>\n<span class=\"n\">wasm_bytes</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_program.wasm'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Instantiate the Wasm module.</span>\n<span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"n\">wasm_bytes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Call a function on it.</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">exports</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># 3</span>\n</pre>\n<h3>Exported functions</h3>\n<p>All exported functions are accessible on the <code>exports</code> getter.\nArguments of these functions are automatically casted to WebAssembly\nvalues. If one wants to explicitely pass a value of a particular type,\nit is possible to use the <code>Value</code> class,\ne.g. <code>instance.exports.sum(Value.i32(1), Value.i32(2))</code>. Note that for\nmost usecases, this is not necessary.</p>\n<h3>Exported memory</h3>\n<p>The <code>memory</code> getter exposes the <code>Memory</code> class representing the memory\nof that particular instance, e.g.:</p>\n<pre><span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">uint8_view</span><span class=\"p\">()</span>\n</pre>\n<p><code>Instance.memory</code> can return <code>None</code> if no memory is exported.</p>\n<p>See below for more information.</p>\n<h2>The <code>Module</code> class</h2>\n<p>Compiles a sequence of bytes into a WebAssembly module. From here, it\nis possible to instantiate it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n\n<span class=\"c1\"># Get the Wasm bytes.</span>\n<span class=\"n\">wasm_bytes</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_program.wasm'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Compile the bytes into a Wasm module.</span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">wasm_bytes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Instantiate the Wasm module.</span>\n<span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">instantiate</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Call a function on it.</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">exports</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># 3</span>\n</pre>\n<h3>Exports, imports, and custom sections</h3>\n<p>It is also possible to query the module to get a list of exports, of\nimports, or of custom sections.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span><span class=\"p\">,</span> <span class=\"n\">ExportKind</span><span class=\"p\">,</span> <span class=\"n\">ImportKind</span>\n\n<span class=\"c1\"># Get the Wasm bytes.</span>\n<span class=\"n\">wasm_bytes</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_program.wasm'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Compile the bytes into a Wasm module.</span>\n<span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">wasm_bytes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Check all the exports.</span>\n<span class=\"k\">assert</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">exports</span> <span class=\"o\">==</span> <span class=\"p\">[{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ExportKind</span><span class=\"o\">.</span><span class=\"n\">MEMORY</span><span class=\"p\">,</span>   <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'memory'</span><span class=\"p\">},</span>\n                          <span class=\"p\">{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ExportKind</span><span class=\"o\">.</span><span class=\"n\">TABLE</span><span class=\"p\">,</span>    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'__indirect_function_table'</span><span class=\"p\">},</span>\n                          <span class=\"p\">{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ExportKind</span><span class=\"o\">.</span><span class=\"n\">GLOBAL</span><span class=\"p\">,</span>   <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'__heap_base'</span><span class=\"p\">},</span>\n                          <span class=\"p\">{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ExportKind</span><span class=\"o\">.</span><span class=\"n\">GLOBAL</span><span class=\"p\">,</span>   <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'__data_end'</span><span class=\"p\">},</span>\n                          <span class=\"p\">{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ExportKind</span><span class=\"o\">.</span><span class=\"n\">FUNCTION</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'sum'</span><span class=\"p\">}]</span>\n\n<span class=\"c1\"># Check all the imports.</span>\n<span class=\"k\">assert</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">imports</span> <span class=\"o\">==</span> <span class=\"p\">[{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ImportKind</span><span class=\"o\">.</span><span class=\"n\">FUNCTION</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'namespace'</span><span class=\"p\">:</span> <span class=\"s1\">'ns'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'func'</span><span class=\"p\">},</span>\n                          <span class=\"p\">{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ImportKind</span><span class=\"o\">.</span><span class=\"n\">MEMORY</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'namespace'</span><span class=\"p\">:</span> <span class=\"s1\">'ns'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'mem'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'minimum_pages'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'maximum_pages'</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n                          <span class=\"p\">{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ImportKind</span><span class=\"o\">.</span><span class=\"n\">GLOBAL</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'namespace'</span><span class=\"p\">:</span> <span class=\"s1\">'ns'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'glo'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'mutable'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'f32'</span><span class=\"p\">},</span>\n                          <span class=\"p\">{</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"n\">ImportKind</span><span class=\"o\">.</span><span class=\"n\">TABLE</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'namespace'</span><span class=\"p\">:</span> <span class=\"s1\">'ns'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'tab'</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'minimum_elements'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'maximum_elements'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n                           <span class=\"s1\">'element_type'</span><span class=\"p\">:</span> <span class=\"s1\">'anyfunc'</span><span class=\"p\">}]</span>\n\n<span class=\"c1\"># Check all the custom sections.</span>\n<span class=\"k\">assert</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">custom_section_names</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s1\">'section1'</span><span class=\"p\">,</span> <span class=\"s1\">'section2'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Check one specific custom section content (in bytes).</span>\n<span class=\"n\">custom_section1</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">custom_section</span><span class=\"p\">(</span><span class=\"s1\">'section1'</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">custom_section1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">bytes</span>\n<span class=\"k\">assert</span> <span class=\"n\">custom_sections1</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">'Wasmer'</span>\n</pre>\n<p>Note the <code>ExportKind</code> and <code>ImportKind</code> enumerations. They are precisely\n<a href=\"https://docs.python.org/3/library/enum.html#enum.IntEnum\" rel=\"nofollow\"><code>IntEnum</code></a>.</p>\n<p><code>Module.exports</code> always returns a list of dictionnaries with the\n<code>kind</code> and <code>name</code> pairs. <code>Module.imports</code> always returns a list of\ndictionnaries with at least the <code>namespace</code> and <code>name</code> pairs. Some\nspecific pairs exist, see the following table.</p>\n<table>\n<thead>\n<tr>\n<th><code>ExportKind</code>/<code>ImportKind</code> variants</th>\n<th>Meaning</th>\n<th>Specific pairs for <code>imports</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>FUNCTION</code></td>\n<td>Function</td>\n<td>none</td>\n</tr>\n<tr>\n<td><code>GLOBAL</code></td>\n<td>Global variable</td>\n<td><code>mutable</code> and <code>type</code></td>\n</tr>\n<tr>\n<td><code>MEMORY</code></td>\n<td>Memory</td>\n<td><code>minimum_pages</code> and <code>maximum_pages</code> (<code>None</code> if absent)</td>\n</tr>\n<tr>\n<td><code>TABLE</code></td>\n<td>Table</td>\n<td><code>minimum_elements</code>, <code>maximum_elements</code> (<code>None</code> is absent) and <code>element_type</code></td>\n</tr></tbody></table>\n<h3>Serialization and deserialization</h3>\n<p>The <code>Module.serialize</code> method and its complementary\n<code>Module.deserialize</code> static method help to respectively serialize and\ndeserialize a compiled WebAssembly module, thus saving the compilation\ntime for the next use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n\n<span class=\"c1\"># Get the Wasm bytes.</span>\n<span class=\"n\">wasm_bytes</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_program.wasm'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Compile the bytes into a Wasm module.</span>\n<span class=\"n\">module1</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"p\">(</span><span class=\"n\">wasm_bytes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Serialize the module.</span>\n<span class=\"n\">serialized_module</span> <span class=\"o\">=</span> <span class=\"n\">module1</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Let's forget about the module for this example.</span>\n<span class=\"k\">del</span> <span class=\"n\">module1</span>\n\n<span class=\"c1\"># Deserialize the module.</span>\n<span class=\"n\">module2</span> <span class=\"o\">=</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">deserialize</span><span class=\"p\">(</span><span class=\"n\">serialized_module</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Instantiate and use it.</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">module2</span><span class=\"o\">.</span><span class=\"n\">instantiate</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">exports</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"c1\"># 3</span>\n</pre>\n<p>A serialized module is a sequence of bytes. They can be saved in any\nstorage.</p>\n<p>The <code>Module.validate</code> static method check whether the given bytes\nrepresent valid WebAssembly bytes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Module</span>\n\n<span class=\"n\">wasm_bytes</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_program.wasm'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">Module</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">wasm_bytes</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The program seems corrupted.'</span><span class=\"p\">)</span>\n</pre>\n<h2>The <code>Value</code> class</h2>\n<p>Builds WebAssembly values with the correct types:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span>\n\n<span class=\"c1\"># Integer on 32-bits.</span>\n<span class=\"n\">value_i32</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">i32</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Integer on 64-bits.</span>\n<span class=\"n\">value_i64</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">i64</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Float on 32-bits.</span>\n<span class=\"n\">value_f32</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">f32</span><span class=\"p\">(</span><span class=\"mf\">7.42</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Float on 64-bits.</span>\n<span class=\"n\">value_f64</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">f64</span><span class=\"p\">(</span><span class=\"mf\">7.42</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Integer on 128-bits.</span>\n<span class=\"n\">value_v128</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">v128</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>Value.([if](32|64)|v128)</code> static methods must be considered as\nstatic constructors.</p>\n<p>The <code>__repr__</code> method allows to get a string representation of a\n<code>Value</code> instance:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">value_i32</span><span class=\"p\">))</span> <span class=\"c1\"># I32(7)</span>\n</pre>\n<h2>The <code>Memory</code> class</h2>\n<p>A WebAssembly instance has its own memory, represented by the <code>Memory</code>\nclass. It is accessible by the <code>Instance.memory</code> getter.</p>\n<h3>Growing the memory</h3>\n<p>The <code>Memory.grow</code> method allows to grow the memory by a number of\npages (of 65kb each).</p>\n<pre><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">grow</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<h3>Getting an access to the in-memory data</h3>\n<p>The <code>Memory</code> class offers 2 ways to get an access to its data:</p>\n<ol>\n<li>Direct raw buffer access, through the <a href=\"https://docs.python.org/3/c-api/buffer.html\" rel=\"nofollow\">Python Buffer\nProtocol</a>,</li>\n<li>Views.</li>\n</ol>\n<p>To get a direct raw buffer, you can use the <code>buffer</code> getter, combined\nwith the builtin <a href=\"https://docs.python.org/3.3/library/functions.html#func-memoryview\" rel=\"nofollow\"><code>memoryview</code></a>, <a href=\"https://docs.python.org/3.3/library/functions.html#bytes\" rel=\"nofollow\"><code>bytes</code></a> or <a href=\"https://docs.python.org/3.3/library/functions.html#bytearray\" rel=\"nofollow\"><code>bytearray</code></a> Python\nfunctions:</p>\n<pre><span class=\"c1\"># With `memoryview`</span>\n<span class=\"n\">memory_view</span> <span class=\"o\">=</span> <span class=\"nb\">memoryview</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n<span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"n\">memory_view</span><span class=\"o\">.</span><span class=\"n\">nbytes</span>\n<span class=\"k\">assert</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">memory_view</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'Wasmer'</span>\n\n<span class=\"c1\"># With `bytearray`</span>\n<span class=\"n\">byte_array</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n<span class=\"n\">memory_size</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">byte_array</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">byte_array</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'Wasmer'</span>\n</pre>\n<p>To create specific views over the memory data, you can use the\nfollowing methods:</p>\n<ul>\n<li><code>uint8_view(offset = 0)</code>,</li>\n<li><code>int8_view(offset = 0)</code>,</li>\n<li><code>uint16_view(offset = 0)</code>,</li>\n<li><code>int16_view(offset = 0)</code>,</li>\n<li><code>uint32_view(offset = 0)</code>,</li>\n<li><code>int32_view(offset = 0)</code>.</li>\n</ul>\n<p>All these methods accept one optional argument: <code>offset</code>, to subset\nthe memory view at a particular offset. These methods return\nrespectively an <code>*Array</code> object, i.e. <code>uint8_view</code> returns a\n<code>Uint8Array</code> object and so on.</p>\n<pre><span class=\"n\">uint8_view</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">uint8_view</span><span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"nb\">bytes</span> <span class=\"o\">=</span> <span class=\"n\">uint8_view</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n</pre>\n<h3>The <code>*Array</code> classes</h3>\n<p>These classes represent views over a memory of an instance where\nelements are specific bytes.</p>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>View buffer as a sequence of\u2026</th>\n<th>Bytes per element</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Int8Array</code></td>\n<td><code>int8</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>Uint8Array</code></td>\n<td><code>uint8</code></td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>Int16Array</code></td>\n<td><code>int16</code></td>\n<td>2</td>\n</tr>\n<tr>\n<td><code>Uint16Array</code></td>\n<td><code>uint16</code></td>\n<td>2</td>\n</tr>\n<tr>\n<td><code>Int32Array</code></td>\n<td><code>int32</code></td>\n<td>4</td>\n</tr>\n<tr>\n<td><code>Uint32Array</code></td>\n<td><code>uint32</code></td>\n<td>4</td>\n</tr></tbody></table>\n<p>All these classes share the same implementation. Taking the example of\n<code>Uint8Array</code>, the class looks like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Uint8Array</span><span class=\"p\">:</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">bytes_per_element</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">|</span><span class=\"nb\">slice</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<h3>Let's see in action</h3>\n<p>First start with a <code>uint8_view</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wasmer</span> <span class=\"kn\">import</span> <span class=\"n\">Instance</span>\n\n<span class=\"c1\"># Get the Wasm module as bytes.</span>\n<span class=\"n\">wasm_bytes</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'my_program.wasm'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Instantiate the Wasm module.</span>\n<span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">Instance</span><span class=\"p\">(</span><span class=\"n\">wasm_bytes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Call a function that returns a pointer to a string for instance.</span>\n<span class=\"n\">pointer</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">exports</span><span class=\"o\">.</span><span class=\"n\">return_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the memory view, with the offset set to `pointer` (default is 0).</span>\n<span class=\"n\">memory</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">uint8_view</span><span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">pointer</span><span class=\"p\">)</span>\n<span class=\"n\">memory_length</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read the string pointed by the pointer.</span>\n<span class=\"n\">nth</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n\n<span class=\"k\">while</span> <span class=\"n\">nth</span> <span class=\"o\">&lt;</span> <span class=\"n\">memory_length</span><span class=\"p\">:</span>\n    <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">memory</span><span class=\"p\">[</span><span class=\"n\">nth</span><span class=\"p\">]</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n\n    <span class=\"n\">string</span> <span class=\"o\">+=</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n    <span class=\"n\">nth</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span> <span class=\"c1\"># Hello, World!</span>\n</pre>\n<p>A slice can be used as index of the <code>__getitem__</code> method, which is\nuseful when we already know the size of the data we want to read, e.g.:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span> <span class=\"c1\"># Hello, World!</span>\n</pre>\n<p>With a direct raw buffer, we would get:</p>\n<pre><span class=\"c1\"># Call a function that returns a pointer to a string for instance.</span>\n<span class=\"n\">pointer</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">exports</span><span class=\"o\">.</span><span class=\"n\">return_string</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get a `bytearray` object.</span>\n<span class=\"n\">byte_array</span> <span class=\"o\">=</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read the string pointed by the pointer.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">byte_array</span><span class=\"p\">[</span><span class=\"n\">pointer</span><span class=\"p\">:</span><span class=\"n\">pointer</span><span class=\"o\">+</span><span class=\"mi\">13</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">())</span> <span class=\"c1\"># Hello, World!</span>\n</pre>\n<p>Notice that <code>*Array</code> and <code>Buffer</code> treat bytes in little-endian, as\nrequired by the WebAssembly specification, <a href=\"https://webassembly.github.io/spec/core/syntax/instructions.html#memory-instructions\" rel=\"nofollow\">Chapter Structure, Section\nInstructions, Sub-Section Memory\nInstructions</a>:</p>\n<blockquote>\n<p>All values are read and written in <a href=\"https://en.wikipedia.org/wiki/Endianness#Little-endian\" rel=\"nofollow\">little\nendian</a> byte\norder.</p>\n</blockquote>\n<p>Each view shares the same memory buffer internally. Let's have some fun:</p>\n<pre><span class=\"n\">int8</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">int8_view</span><span class=\"p\">()</span>\n<span class=\"n\">int16</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">int16_view</span><span class=\"p\">()</span>\n<span class=\"n\">int32</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">int32_view</span><span class=\"p\">()</span>\n\n               <span class=\"n\">b</span><span class=\"err\">\u2081</span>\n            <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"n\">int8</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mb\">0b00000001</span>\n               <span class=\"n\">b</span><span class=\"err\">\u2082</span>\n            <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"n\">int8</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mb\">0b00000100</span>\n               <span class=\"n\">b</span><span class=\"err\">\u2083</span>\n            <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"n\">int8</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mb\">0b00010000</span>\n               <span class=\"n\">b</span><span class=\"err\">\u2084</span>\n            <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"n\">int8</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mb\">0b01000000</span>\n\n<span class=\"o\">//</span> <span class=\"n\">No</span> <span class=\"n\">surprise</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">assertions</span><span class=\"o\">.</span>\n                       <span class=\"n\">b</span><span class=\"err\">\u2081</span>\n                    <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"k\">assert</span> <span class=\"n\">int8</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mb\">0b00000001</span>\n                       <span class=\"n\">b</span><span class=\"err\">\u2082</span>\n                    <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"k\">assert</span> <span class=\"n\">int8</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mb\">0b00000100</span>\n                       <span class=\"n\">b</span><span class=\"err\">\u2083</span>\n                    <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"k\">assert</span> <span class=\"n\">int8</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mb\">0b00010000</span>\n                       <span class=\"n\">b</span><span class=\"err\">\u2084</span>\n                    <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"k\">assert</span> <span class=\"n\">int8</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mb\">0b01000000</span>\n\n<span class=\"o\">//</span> <span class=\"n\">The</span> <span class=\"err\">`</span><span class=\"n\">int16</span><span class=\"err\">`</span> <span class=\"n\">view</span> <span class=\"n\">reads</span> <span class=\"mi\">2</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span>\n                        <span class=\"n\">b</span><span class=\"err\">\u2082</span>       <span class=\"n\">b</span><span class=\"err\">\u2081</span>\n                     <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span> <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"k\">assert</span> <span class=\"n\">int16</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mb\">0b00000100_00000001</span>\n                        <span class=\"n\">b</span><span class=\"err\">\u2084</span>       <span class=\"n\">b</span><span class=\"err\">\u2083</span>\n                     <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span> <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"k\">assert</span> <span class=\"n\">int16</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mb\">0b01000000_00010000</span>\n\n<span class=\"o\">//</span> <span class=\"n\">The</span> <span class=\"err\">`</span><span class=\"n\">int32</span><span class=\"err\">`</span> <span class=\"n\">view</span> <span class=\"n\">reads</span> <span class=\"mi\">4</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span>\n                        <span class=\"n\">b</span><span class=\"err\">\u2084</span>       <span class=\"n\">b</span><span class=\"err\">\u2083</span>       <span class=\"n\">b</span><span class=\"err\">\u2082</span>       <span class=\"n\">b</span><span class=\"err\">\u2081</span>\n                     <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span> <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span> <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span> <span class=\"err\">\u250c\u252c\u252c\u252c\u252c\u252c\u252c\u2510</span>\n<span class=\"k\">assert</span> <span class=\"n\">int32</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mb\">0b01000000_00010000_00000100_00000001</span>\n</pre>\n<h3>Performance</h3>\n<p>Using the direct raw buffer API with\n<code>bytearray(instance.memory.buffer)</code> is 15x faster than using\n<code>instance.memory.uint8_view()</code> for <em>reading</em>. However, the direct raw\nbuffer API is <em>read-only</em> for the moment, whilst the views are read\nand write. Chose them wisely.</p>\n<h1>Development</h1>\n<p>The Python extension is written in Rust, with <a href=\"https://github.com/PyO3/pyo3\" rel=\"nofollow\"><code>pyo3</code></a> and\n<a href=\"https://github.com/PyO3/maturin\" rel=\"nofollow\"><code>maturin</code></a>.</p>\n<p>To set up your environment, run only once:</p>\n<pre>$ just prelude\n</pre>\n<p>It will install <code>pyo3</code> and <code>maturin</code> for Python and for Rust. It will\nalso install <a href=\"https://virtualenv.pypa.io/\" rel=\"nofollow\"><code>virtualenv</code></a>.</p>\n<p>Then, simply run:</p>\n<pre>$ .env/bin/activate\n$ just build\n$ just python-run examples/simple.py\n</pre>\n<p>If you need to interact with Python, or run a specific file, use the\nfollowing commands:</p>\n<pre>$ just python-run\n$ just python-run file/to/run.py\n</pre>\n<p>Finally, to inspect the extension; run:</p>\n<pre>$ just inspect\n</pre>\n<p>(Yes, you need <a href=\"https://github.com/casey/just/\" rel=\"nofollow\"><code>just</code></a>).</p>\n<h1>Testing</h1>\n<p>Once the extension is compiled and installed (just run <code>just build</code>),\nrun the following command:</p>\n<pre>$ just <span class=\"nb\">test</span>\n</pre>\n<h1>What is WebAssembly?</h1>\n<p>Quoting <a href=\"https://webassembly.org/\" rel=\"nofollow\">the WebAssembly site</a>:</p>\n<blockquote>\n<p>WebAssembly (abbreviated Wasm) is a binary instruction format for a\nstack-based virtual machine. Wasm is designed as a portable target\nfor compilation of high-level languages like C/C++/Rust, enabling\ndeployment on the web for client and server applications.</p>\n</blockquote>\n<p>About speed:</p>\n<blockquote>\n<p>WebAssembly aims to execute at native speed by taking advantage of\n<a href=\"https://webassembly.org/docs/portability/#assumptions-for-efficient-execution\" rel=\"nofollow\">common hardware\ncapabilities</a>\navailable on a wide range of platforms.</p>\n</blockquote>\n<p>About safety:</p>\n<blockquote>\n<p>WebAssembly describes a memory-safe, sandboxed <a href=\"https://webassembly.org/docs/semantics/#linear-memory\" rel=\"nofollow\">execution\nenvironment</a> [\u2026].</p>\n</blockquote>\n<h1>License</h1>\n<p>The entire project is under the MIT License. Please read <a href=\"https://github.com/wasmerio/wasmer/blob/master/LICENSE\" rel=\"nofollow\">the\n<code>LICENSE</code> file</a>.</p>\n\n          </div>"}, "last_serial": 7017215, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "32beb9448df0452e046ff80bbcb9a24e", "sha256": "557beda28a8df8b2dd7f59c73b19f1d309ecfba0c43ee2fb5108fbeae7019b49"}, "downloads": -1, "filename": "wasmer-0.1.3-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "32beb9448df0452e046ff80bbcb9a24e", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 948324, "upload_time": "2019-04-11T00:31:09", "upload_time_iso_8601": "2019-04-11T00:31:09.122994Z", "url": "https://files.pythonhosted.org/packages/85/8a/bad015026eec52a9c6542545e2d0ce5905b525f5240cd24e3be58bb32c05/wasmer-0.1.3-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "72bd075a49c3c0910b6f908208770019", "sha256": "68f0f301a1b70f79f4240f178124cd2f69b4ad8da0b81874b9fce3c90b4e7b3c"}, "downloads": -1, "filename": "wasmer-0.1.4-cp35-cp35m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "72bd075a49c3c0910b6f908208770019", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 948631, "upload_time": "2019-04-11T01:29:54", "upload_time_iso_8601": "2019-04-11T01:29:54.335346Z", "url": "https://files.pythonhosted.org/packages/17/a5/2ff54d0b98c14522bde143f0fb60eb7b67fd9a83bc91c5cb494dcc1eafea/wasmer-0.1.4-cp35-cp35m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd69866309bb6e282d7cc3228c88e94a", "sha256": "3c5305fa114a3b7364ed390b15ee5ad6c861a959b0d6e7389970b29cd9c14000"}, "downloads": -1, "filename": "wasmer-0.1.4-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "fd69866309bb6e282d7cc3228c88e94a", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1035960, "upload_time": "2019-04-12T00:28:33", "upload_time_iso_8601": "2019-04-12T00:28:33.803692Z", "url": "https://files.pythonhosted.org/packages/ce/8d/7f10906e7ca14f64052c10d37a43a16f6fa4a6c86cfb5cb20cbfae034ef3/wasmer-0.1.4-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f926418b36c9f446052560279ac0199d", "sha256": "fb9f5696584944283e1a8364da4cc3bee638a2d2e3fe70e16a62452d89820235"}, "downloads": -1, "filename": "wasmer-0.1.4-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "f926418b36c9f446052560279ac0199d", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 948632, "upload_time": "2019-04-11T01:29:51", "upload_time_iso_8601": "2019-04-11T01:29:51.502160Z", "url": "https://files.pythonhosted.org/packages/b2/65/b599e66caf7debf079640db8c177c9ed1e3bfdd4772d6722090f97177e5d/wasmer-0.1.4-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70f8fa8ec6ae9affbb4fb7526cdd5cad", "sha256": "16ccaaf739fad0cf7e62d337962566dfe6dd4c1f751cd2596f33926044872a3b"}, "downloads": -1, "filename": "wasmer-0.1.4-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "70f8fa8ec6ae9affbb4fb7526cdd5cad", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1035959, "upload_time": "2019-04-12T00:28:31", "upload_time_iso_8601": "2019-04-12T00:28:31.700409Z", "url": "https://files.pythonhosted.org/packages/8c/56/ed784d21e15b9d15cd3177fc0966bd4e3f86e46a29e09c18c7b7cde2cc77/wasmer-0.1.4-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7a87c4f559a1759ff10ace4202db3a9", "sha256": "14749cb9835f7964eed03dabb0110c992a31f6f0fcd7f5e6a63d473809254707"}, "downloads": -1, "filename": "wasmer-0.1.4-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "c7a87c4f559a1759ff10ace4202db3a9", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 948630, "upload_time": "2019-04-11T01:29:48", "upload_time_iso_8601": "2019-04-11T01:29:48.401798Z", "url": "https://files.pythonhosted.org/packages/ba/b5/5cd2c835b265fbe47b4e94464dde8c957a269c8ef491aeeb9745b6938c15/wasmer-0.1.4-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ee8c18d392ade933843d0c2d57be9780", "sha256": "8a4e400fd5be4cfa2029e0aaf0388d37a37e5541cc0ce0544bc6d66bac19e354"}, "downloads": -1, "filename": "wasmer-0.1.4-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "ee8c18d392ade933843d0c2d57be9780", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1035960, "upload_time": "2019-04-12T00:28:29", "upload_time_iso_8601": "2019-04-12T00:28:29.711758Z", "url": "https://files.pythonhosted.org/packages/8d/09/374b2c92fdf0a6dc11c069a862bfcca5f9ecd18952e4e3e14b84fb52dead/wasmer-0.1.4-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "9bca17469b2de12ec64618789a33709c", "sha256": "b3604a6f1d9952bf93e4b0e46ec0f4afaad53f1c839ce15804b4d0c86a988b44"}, "downloads": -1, "filename": "wasmer-0.1.5-cp35-cp35m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "9bca17469b2de12ec64618789a33709c", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 972319, "upload_time": "2019-04-15T22:48:07", "upload_time_iso_8601": "2019-04-15T22:48:07.018313Z", "url": "https://files.pythonhosted.org/packages/ef/48/ad60aef0443ec9e207359a33f42e7edf48cec899d7a33aff03988242a53c/wasmer-0.1.5-cp35-cp35m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3901b84b30426cc9b827ad10b2a2c8ac", "sha256": "98983c69e99d9f2dabe9637c5132613c222f5a5940f0c31dc018c9381a7ea91d"}, "downloads": -1, "filename": "wasmer-0.1.5-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "3901b84b30426cc9b827ad10b2a2c8ac", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1042924, "upload_time": "2019-04-15T22:45:43", "upload_time_iso_8601": "2019-04-15T22:45:43.151704Z", "url": "https://files.pythonhosted.org/packages/ec/71/28f411d134800f0e0650184a1cceeabd817174d3a8c5dcac60366ab19589/wasmer-0.1.5-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ede9b655fce897c4e26e2a84c752f788", "sha256": "48059fb6dae38f7ef2050c77d6aa3849280434fdbe8aadc94a873675884fd382"}, "downloads": -1, "filename": "wasmer-0.1.5-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "ede9b655fce897c4e26e2a84c752f788", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 972407, "upload_time": "2019-04-15T22:48:04", "upload_time_iso_8601": "2019-04-15T22:48:04.147160Z", "url": "https://files.pythonhosted.org/packages/c0/97/19a0d91c73ec5126c0f5aa6eefc114d59c7320fc271f2255227c6e9db811/wasmer-0.1.5-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04c32299dba2694c30dc12b09050ccbc", "sha256": "6cbcf5a7867565f9d06decb8e3ab392dafec7a431b93d900e36f926daddd6aed"}, "downloads": -1, "filename": "wasmer-0.1.5-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "04c32299dba2694c30dc12b09050ccbc", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1043030, "upload_time": "2019-04-15T22:45:41", "upload_time_iso_8601": "2019-04-15T22:45:41.244335Z", "url": "https://files.pythonhosted.org/packages/8c/9a/82c4f3856361311da08cac9b04058e7a110493aeeac1ccbd4900a25eb1fd/wasmer-0.1.5-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "adf57a612b35247fd927df9fe7748941", "sha256": "fe613759adbc590c78296eaec2041f57b2ef7e699e4fc66d5b1ee4c86958d039"}, "downloads": -1, "filename": "wasmer-0.1.5-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "adf57a612b35247fd927df9fe7748941", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 972462, "upload_time": "2019-04-15T22:48:01", "upload_time_iso_8601": "2019-04-15T22:48:01.240411Z", "url": "https://files.pythonhosted.org/packages/6f/b6/580feafc36d40d07e3983ff800afec2a002284f0c77707ec68ab8e2a5e92/wasmer-0.1.5-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd801c1a6b367a3707bf08b3847f1c4d", "sha256": "fccc16a57700df02df68f0cffd5269f2deea26f391fe06c6f9dec379c53fa81c"}, "downloads": -1, "filename": "wasmer-0.1.5-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "dd801c1a6b367a3707bf08b3847f1c4d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1042987, "upload_time": "2019-04-15T22:45:39", "upload_time_iso_8601": "2019-04-15T22:45:39.517601Z", "url": "https://files.pythonhosted.org/packages/74/33/97bad814ab994d4dc1913abd8f301143da7f702b531cde889b36a6e0e165/wasmer-0.1.5-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "2d0c3a273b74017d9304e95a0c83cdb2", "sha256": "f8cbeaac6c6a323a49684a6afd59ce2e53f096587ce1a22f1932a2ffcc093748"}, "downloads": -1, "filename": "wasmer-0.2.0-cp35-cp35m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "2d0c3a273b74017d9304e95a0c83cdb2", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 972932, "upload_time": "2019-04-15T23:02:23", "upload_time_iso_8601": "2019-04-15T23:02:23.643272Z", "url": "https://files.pythonhosted.org/packages/c2/67/16c3a45451e64525cd244a27692ffffcb689fa12038cd07989986830ce0b/wasmer-0.2.0-cp35-cp35m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac133e86865dd94684fed7db7667bd94", "sha256": "2bfefe62c3d7e6c2cc8d8a2bf18f485c9c160783a1f48cb6236da3873ecf5a5e"}, "downloads": -1, "filename": "wasmer-0.2.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "ac133e86865dd94684fed7db7667bd94", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1043628, "upload_time": "2019-04-15T23:04:37", "upload_time_iso_8601": "2019-04-15T23:04:37.826397Z", "url": "https://files.pythonhosted.org/packages/51/72/068334b0395f6b534d16320137bf892a3d4455cff43440d93d5c1fc92ee4/wasmer-0.2.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "67a2c21e33a7d99a09402120c3588321", "sha256": "db33eded68ea8b250f596f853f23f77184466487d2ea4feb8a439fab10623ab5"}, "downloads": -1, "filename": "wasmer-0.2.0-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "67a2c21e33a7d99a09402120c3588321", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 972893, "upload_time": "2019-04-15T23:02:20", "upload_time_iso_8601": "2019-04-15T23:02:20.750694Z", "url": "https://files.pythonhosted.org/packages/29/67/73213ea3da9f68cb5dd7fc222b7d2fa24edac4ca7e770270f257b3736868/wasmer-0.2.0-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ecf180f4339926e9cf6b1ab9f73392f", "sha256": "1d0b9adee04205e592f9b5c6da9c1a4a6e930f826e70f47890c3afe9de5a507f"}, "downloads": -1, "filename": "wasmer-0.2.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "2ecf180f4339926e9cf6b1ab9f73392f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1043661, "upload_time": "2019-04-15T23:04:35", "upload_time_iso_8601": "2019-04-15T23:04:35.837198Z", "url": "https://files.pythonhosted.org/packages/e6/64/d24089c3279c6ef14c9d1f03ed9a459316b83b2dbd3ad4d9f70dc0eefbb2/wasmer-0.2.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51ea3c718d87f209cb86fd3279461b9d", "sha256": "2e9dcb3022f02787dcd39cf934679eea5e95241c25979db23c6872a0798abec2"}, "downloads": -1, "filename": "wasmer-0.2.0-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "51ea3c718d87f209cb86fd3279461b9d", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 972946, "upload_time": "2019-04-15T23:02:17", "upload_time_iso_8601": "2019-04-15T23:02:17.642729Z", "url": "https://files.pythonhosted.org/packages/9a/8f/f48f4ca3afa9eebbbe679ad7d29e755d5952ccd594d1c29f215020f22e39/wasmer-0.2.0-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c912ddd72fe597ab3eb45191e1820506", "sha256": "7844eb79725cf5b5f280c37b984acd2c90c4f737920482f8a169440bb802fe13"}, "downloads": -1, "filename": "wasmer-0.2.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "c912ddd72fe597ab3eb45191e1820506", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1043466, "upload_time": "2019-04-15T23:04:34", "upload_time_iso_8601": "2019-04-15T23:04:34.337094Z", "url": "https://files.pythonhosted.org/packages/2c/a7/e357c5947bf115a1e4b79157293424d575772ced9e33506ea389649d63b2/wasmer-0.2.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a674346ea871cf33cc9622dd22fb7c37", "sha256": "75d854cb5acdc32f289ceb310a72d66190fa531dd126eac970ed6788939a5d40"}, "downloads": -1, "filename": "wasmer-0.3.0-cp35-cp35m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "a674346ea871cf33cc9622dd22fb7c37", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 994240, "upload_time": "2019-07-16T08:34:44", "upload_time_iso_8601": "2019-07-16T08:34:44.205834Z", "url": "https://files.pythonhosted.org/packages/ef/62/c345db886f6ec90f1d9e3398ea2ed18432223a564eb040bc5e4468746687/wasmer-0.3.0-cp35-cp35m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f25c78c02d68e2707b488eb1dc054e83", "sha256": "7b5235dd4ee1cf48d054e7216a1fefe15b8b1a48ffe5e9bb2655724cf84d7a31"}, "downloads": -1, "filename": "wasmer-0.3.0-cp35-cp35m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f25c78c02d68e2707b488eb1dc054e83", "packagetype": "bdist_wheel", "python_version": "cp35", "requires_python": null, "size": 1123491, "upload_time": "2019-07-16T08:12:39", "upload_time_iso_8601": "2019-07-16T08:12:39.602875Z", "url": "https://files.pythonhosted.org/packages/7a/81/92e72fa0643a8360edf12eadaf76bc63592187e5190de2c75be807056ce2/wasmer-0.3.0-cp35-cp35m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8a874746e9534928860f09c28ba4844", "sha256": "4fe592b764fc09d535757682d0ced6da1037976a7eb97986fce3523779a89682"}, "downloads": -1, "filename": "wasmer-0.3.0-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "b8a874746e9534928860f09c28ba4844", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 994318, "upload_time": "2019-07-16T08:34:31", "upload_time_iso_8601": "2019-07-16T08:34:31.501249Z", "url": "https://files.pythonhosted.org/packages/f3/d1/43eedf0c73e9b8af15f7382ee9dbdfac043f2424187d716f8563808346f1/wasmer-0.3.0-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83013f26426f0025aac1039de011149c", "sha256": "e547b1074e52c10f0581de415b509aa61e577f5248340a68b356938393d773c8"}, "downloads": -1, "filename": "wasmer-0.3.0-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "83013f26426f0025aac1039de011149c", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1123467, "upload_time": "2019-07-16T08:12:37", "upload_time_iso_8601": "2019-07-16T08:12:37.305568Z", "url": "https://files.pythonhosted.org/packages/a7/89/739e34035f355ab4aa0801f5cdda07ce50247d7feed38a6075b8962514ed/wasmer-0.3.0-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21c38368d7668f073f1f1303c5823194", "sha256": "2edb87608daa3b46bd2520e0b5b90580fde9c805be4d92eeb98c22b29a21abc6"}, "downloads": -1, "filename": "wasmer-0.3.0-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "21c38368d7668f073f1f1303c5823194", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 994014, "upload_time": "2019-07-16T08:34:18", "upload_time_iso_8601": "2019-07-16T08:34:18.188844Z", "url": "https://files.pythonhosted.org/packages/02/61/8cd89aec2149cf81c005532157471bb1e0c4837a2b9332e619454ec99ded/wasmer-0.3.0-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53f21d0390bccc9aca2299869788b4f6", "sha256": "fcfe2c7a9fbf323f3520ef9766b82e80cd433d7f8c87ff084b18bcde716923af"}, "downloads": -1, "filename": "wasmer-0.3.0-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "53f21d0390bccc9aca2299869788b4f6", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1123064, "upload_time": "2019-07-16T08:12:35", "upload_time_iso_8601": "2019-07-16T08:12:35.073137Z", "url": "https://files.pythonhosted.org/packages/ee/5f/93eac0a1c307ab97df5fd91cbb91c23dc464df604f1af62b520031abd8d7/wasmer-0.3.0-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b86acbbd4ce1f9fc58cbb428e66f83b", "sha256": "1d2c337425721fd9ac6c6b17698ef8a9795b236a38b0e3c85872a5845ffb0d90"}, "downloads": -1, "filename": "wasmer-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1b86acbbd4ce1f9fc58cbb428e66f83b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1338, "upload_time": "2019-07-17T22:51:22", "upload_time_iso_8601": "2019-07-17T22:51:22.563000Z", "url": "https://files.pythonhosted.org/packages/c8/91/03f6a73ebce72f0bc208314403d74bf6b11082f689e9693a3dfafd75b105/wasmer-0.3.0-py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "b1e0a9b45c65972347e30a8f5d3b99d0", "sha256": "519d9f7a33f0dc28498edf8d074944df1cfda3f4d56a6b0a9dc606e99f230c07"}, "downloads": -1, "filename": "wasmer-0.4.1-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "b1e0a9b45c65972347e30a8f5d3b99d0", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1014508, "upload_time": "2020-03-02T15:56:34", "upload_time_iso_8601": "2020-03-02T15:56:34.945512Z", "url": "https://files.pythonhosted.org/packages/79/74/ba855aaad2e6b7bc0f4d3d66461b673e0ccdfbc28f5c5cf137d9e55c22ea/wasmer-0.4.1-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc6f2ab311a93c343f5574f6aea7d32f", "sha256": "c36c6c7a3582c0467ea76c5b86a5a25c2e1a713669ebf8fc6511b26f30828ed7"}, "downloads": -1, "filename": "wasmer-0.4.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "fc6f2ab311a93c343f5574f6aea7d32f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1110571, "upload_time": "2020-03-02T15:55:56", "upload_time_iso_8601": "2020-03-02T15:55:56.916905Z", "url": "https://files.pythonhosted.org/packages/32/60/54b791c14db809c01185e0be423954bdcd63681c7525b672592c5d75c3ec/wasmer-0.4.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96038680e5a684a8b5ae998a2639fcb2", "sha256": "6e37fd76931da954d12f7708e7fc790c479e17ea6dfe54bb4f1403d6fe919c62"}, "downloads": -1, "filename": "wasmer-0.4.1-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "96038680e5a684a8b5ae998a2639fcb2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1014421, "upload_time": "2020-03-02T15:56:32", "upload_time_iso_8601": "2020-03-02T15:56:32.783772Z", "url": "https://files.pythonhosted.org/packages/fe/54/4617f951eeb52060409d643f175b6dfba762d1ab8ee5f813d8eb10564ce1/wasmer-0.4.1-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "107b0c66e031b332fe9129b21535bdb5", "sha256": "d5a58b318628bd48605a4810ee9ba030ec4423dee730d45f031bd082cf36ad8b"}, "downloads": -1, "filename": "wasmer-0.4.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "107b0c66e031b332fe9129b21535bdb5", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1110258, "upload_time": "2020-03-02T15:55:40", "upload_time_iso_8601": "2020-03-02T15:55:40.251155Z", "url": "https://files.pythonhosted.org/packages/d2/13/9d54be06542c605a33d74a9c75f0e197681ad65c9aa6216eb169e1a1a718/wasmer-0.4.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d3d5f1581bb8280169094df4a43acfe", "sha256": "f864b1e910e6803aa8f3ed9c371b145f0b6fd191f5fbefea011ac7ed4258734d"}, "downloads": -1, "filename": "wasmer-0.4.1-cp38-cp38-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "4d3d5f1581bb8280169094df4a43acfe", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 1014425, "upload_time": "2020-03-02T15:56:26", "upload_time_iso_8601": "2020-03-02T15:56:26.770075Z", "url": "https://files.pythonhosted.org/packages/e9/4a/aea75408ee23c8c2cf6e8c03ebbfd76dc273b70aed9e5091b6b4810b2c79/wasmer-0.4.1-cp38-cp38-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caab0032eb0178b8b724afef257b5da8", "sha256": "fa1c8479781c91e6b814ef006f6e099b6550eba12601a8617475fb514fc09365"}, "downloads": -1, "filename": "wasmer-0.4.1-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "caab0032eb0178b8b724afef257b5da8", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 1110242, "upload_time": "2020-03-02T15:55:40", "upload_time_iso_8601": "2020-03-02T15:55:40.378764Z", "url": "https://files.pythonhosted.org/packages/76/c9/c8aa8689176c61a987bfa1e527d7d1905504c3eaed6c37e60137002e0409/wasmer-0.4.1-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f06d0c59f36609185cb0b05b4e9b54e5", "sha256": "92aee4b3994735f72e27c9deaca36d063781ddfd1068756bf63509288c1a2c14"}, "downloads": -1, "filename": "wasmer-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f06d0c59f36609185cb0b05b4e9b54e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1339, "upload_time": "2020-04-14T13:41:04", "upload_time_iso_8601": "2020-04-14T13:41:04.502759Z", "url": "https://files.pythonhosted.org/packages/9a/0e/3725f306ebed63f6a8e322460580c93ffdd63632fdad5b0b5451a8d5a710/wasmer-0.4.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1e0a9b45c65972347e30a8f5d3b99d0", "sha256": "519d9f7a33f0dc28498edf8d074944df1cfda3f4d56a6b0a9dc606e99f230c07"}, "downloads": -1, "filename": "wasmer-0.4.1-cp36-cp36m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "b1e0a9b45c65972347e30a8f5d3b99d0", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1014508, "upload_time": "2020-03-02T15:56:34", "upload_time_iso_8601": "2020-03-02T15:56:34.945512Z", "url": "https://files.pythonhosted.org/packages/79/74/ba855aaad2e6b7bc0f4d3d66461b673e0ccdfbc28f5c5cf137d9e55c22ea/wasmer-0.4.1-cp36-cp36m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fc6f2ab311a93c343f5574f6aea7d32f", "sha256": "c36c6c7a3582c0467ea76c5b86a5a25c2e1a713669ebf8fc6511b26f30828ed7"}, "downloads": -1, "filename": "wasmer-0.4.1-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "fc6f2ab311a93c343f5574f6aea7d32f", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": null, "size": 1110571, "upload_time": "2020-03-02T15:55:56", "upload_time_iso_8601": "2020-03-02T15:55:56.916905Z", "url": "https://files.pythonhosted.org/packages/32/60/54b791c14db809c01185e0be423954bdcd63681c7525b672592c5d75c3ec/wasmer-0.4.1-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96038680e5a684a8b5ae998a2639fcb2", "sha256": "6e37fd76931da954d12f7708e7fc790c479e17ea6dfe54bb4f1403d6fe919c62"}, "downloads": -1, "filename": "wasmer-0.4.1-cp37-cp37m-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "96038680e5a684a8b5ae998a2639fcb2", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1014421, "upload_time": "2020-03-02T15:56:32", "upload_time_iso_8601": "2020-03-02T15:56:32.783772Z", "url": "https://files.pythonhosted.org/packages/fe/54/4617f951eeb52060409d643f175b6dfba762d1ab8ee5f813d8eb10564ce1/wasmer-0.4.1-cp37-cp37m-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "107b0c66e031b332fe9129b21535bdb5", "sha256": "d5a58b318628bd48605a4810ee9ba030ec4423dee730d45f031bd082cf36ad8b"}, "downloads": -1, "filename": "wasmer-0.4.1-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "107b0c66e031b332fe9129b21535bdb5", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": null, "size": 1110258, "upload_time": "2020-03-02T15:55:40", "upload_time_iso_8601": "2020-03-02T15:55:40.251155Z", "url": "https://files.pythonhosted.org/packages/d2/13/9d54be06542c605a33d74a9c75f0e197681ad65c9aa6216eb169e1a1a718/wasmer-0.4.1-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d3d5f1581bb8280169094df4a43acfe", "sha256": "f864b1e910e6803aa8f3ed9c371b145f0b6fd191f5fbefea011ac7ed4258734d"}, "downloads": -1, "filename": "wasmer-0.4.1-cp38-cp38-macosx_10_7_x86_64.whl", "has_sig": false, "md5_digest": "4d3d5f1581bb8280169094df4a43acfe", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 1014425, "upload_time": "2020-03-02T15:56:26", "upload_time_iso_8601": "2020-03-02T15:56:26.770075Z", "url": "https://files.pythonhosted.org/packages/e9/4a/aea75408ee23c8c2cf6e8c03ebbfd76dc273b70aed9e5091b6b4810b2c79/wasmer-0.4.1-cp38-cp38-macosx_10_7_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caab0032eb0178b8b724afef257b5da8", "sha256": "fa1c8479781c91e6b814ef006f6e099b6550eba12601a8617475fb514fc09365"}, "downloads": -1, "filename": "wasmer-0.4.1-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "caab0032eb0178b8b724afef257b5da8", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": null, "size": 1110242, "upload_time": "2020-03-02T15:55:40", "upload_time_iso_8601": "2020-03-02T15:55:40.378764Z", "url": "https://files.pythonhosted.org/packages/76/c9/c8aa8689176c61a987bfa1e527d7d1905504c3eaed6c37e60137002e0409/wasmer-0.4.1-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f06d0c59f36609185cb0b05b4e9b54e5", "sha256": "92aee4b3994735f72e27c9deaca36d063781ddfd1068756bf63509288c1a2c14"}, "downloads": -1, "filename": "wasmer-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f06d0c59f36609185cb0b05b4e9b54e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 1339, "upload_time": "2020-04-14T13:41:04", "upload_time_iso_8601": "2020-04-14T13:41:04.502759Z", "url": "https://files.pythonhosted.org/packages/9a/0e/3725f306ebed63f6a8e322460580c93ffdd63632fdad5b0b5451a8d5a710/wasmer-0.4.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:32:17 2020"}