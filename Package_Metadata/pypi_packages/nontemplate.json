{"info": {"author": "Nick Moore", "author_email": "nick@zoic.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "===================\n NonTemplate v0.13\n===================\n\nFor more information, see <http://code.zoic.org/nontemplate/>.\n\nSummary\n=======\n\n* NonTemplate allows you to generate simple XML output directly\n  in your Python code with a minimum of syntactic noise.\n\n* It uses the **with** statement introduced in Python 2.6 to ensure\n  that once a tag is opened, it will be closed.\n\n* Python code and template codes can be interleaved naturally,\n  without resorting to restrictive language constructions.\n  Your favourite debugger can see, and set breakpoints in, every\n  level of your template.\n\n* 100% pure Python (>= 2.6), and it works just fine in Python\n  3.0 as well.\n   \n* Performance is comparable to the commonly used templating languages\n  and is better than most.\n\n* Asynchronous use is easy: NonTemplate is happy reading from iterables\n  and writing to IO streams.  This means you can start sending XHTML\n  to your clients while your database is still retrieving rows ... \n\n\nExample\n=======\n::\n\n    import nontemplate\n\n    D = nontemplate.Document(doctype=nontemplate.doctype.html_2_0)\n    \n    with D.html():\n        D._comment(\"this is a test\")\n        D._comment(\"this --> is too\")\n        D._emit(\"<!-- testing & < > emit -->\\n\")\n        with D.head():\n            D.title()(\"foo\")\n        with D.body():\n            with D.h1(id=\"foo\"):\n                D._text(\"This is a <foo> & test\")\n            with D.table(_class=\"cool\"):\n                with D.tbody():\n                    for row in range(1,3):\n                        with D.tr():\n                            for col in range(1,3):\n                                D.td()(\"%d,%d\" % (row,col))", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.zoic.org/nontemplate/", "keywords": "xml,html,template", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "nontemplate", "package_url": "https://pypi.org/project/nontemplate/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/nontemplate/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.zoic.org/nontemplate/"}, "release_url": "https://pypi.org/project/nontemplate/0.13/", "requires_dist": null, "requires_python": null, "summary": "Nontemplate is not a Templating Language", "version": "0.13", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>For more information, see &lt;<a href=\"http://code.zoic.org/nontemplate/\" rel=\"nofollow\">http://code.zoic.org/nontemplate/</a>&gt;.</p>\n<div id=\"summary\">\n<h2>Summary</h2>\n<ul>\n<li>NonTemplate allows you to generate simple XML output directly\nin your Python code with a minimum of syntactic noise.</li>\n<li>It uses the <strong>with</strong> statement introduced in Python 2.6 to ensure\nthat once a tag is opened, it will be closed.</li>\n<li>Python code and template codes can be interleaved naturally,\nwithout resorting to restrictive language constructions.\nYour favourite debugger can see, and set breakpoints in, every\nlevel of your template.</li>\n<li>100% pure Python (&gt;= 2.6), and it works just fine in Python\n3.0 as well.</li>\n<li>Performance is comparable to the commonly used templating languages\nand is better than most.</li>\n<li>Asynchronous use is easy: NonTemplate is happy reading from iterables\nand writing to IO streams.  This means you can start sending XHTML\nto your clients while your database is still retrieving rows \u2026</li>\n</ul>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre>import nontemplate\n\nD = nontemplate.Document(doctype=nontemplate.doctype.html_2_0)\n\nwith D.html():\n    D._comment(\"this is a test\")\n    D._comment(\"this --&gt; is too\")\n    D._emit(\"&lt;!-- testing &amp; &lt; &gt; emit --&gt;\\n\")\n    with D.head():\n        D.title()(\"foo\")\n    with D.body():\n        with D.h1(id=\"foo\"):\n            D._text(\"This is a &lt;foo&gt; &amp; test\")\n        with D.table(_class=\"cool\"):\n            with D.tbody():\n                for row in range(1,3):\n                    with D.tr():\n                        for col in range(1,3):\n                            D.td()(\"%d,%d\" % (row,col))\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1741239, "releases": {"0.1": [], "0.11": [{"comment_text": "", "digests": {"md5": "a595a55c88ad2489fa37eb3f9af0e333", "sha256": "651bb7226cf99d3fdbacf9e90bab4a46e4f646543d38b917323e57afd9aa5d50"}, "downloads": -1, "filename": "nontemplate-0.11.tar.gz", "has_sig": false, "md5_digest": "a595a55c88ad2489fa37eb3f9af0e333", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4488, "upload_time": "2010-09-24T14:44:10", "upload_time_iso_8601": "2010-09-24T14:44:10.840444Z", "url": "https://files.pythonhosted.org/packages/0e/dd/d7965f19655e5302e7cf057e624c68629cc67a48d53d895d2cab8d65a574/nontemplate-0.11.tar.gz", "yanked": false}], "0.12": [{"comment_text": "", "digests": {"md5": "99b46eebe3ea3e06d8137c0705406aa5", "sha256": "93482f403727913e0edf29d624926a7f02c6596c2dac4582b80e1569ea05c171"}, "downloads": -1, "filename": "nontemplate-0.12.tar.gz", "has_sig": false, "md5_digest": "99b46eebe3ea3e06d8137c0705406aa5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4481, "upload_time": "2010-09-24T15:35:44", "upload_time_iso_8601": "2010-09-24T15:35:44.482555Z", "url": "https://files.pythonhosted.org/packages/73/b4/4613a856cab81df5e948ba4a44f52cd95275a3cfb4508d02adde993f486c/nontemplate-0.12.tar.gz", "yanked": false}], "0.13": [{"comment_text": "", "digests": {"md5": "0b45d4c9af2f6d12b9ef632ad5940116", "sha256": "d7b85a7860c154b2d1092a4f6a4fbe3cd2b042c34ce11df2b13d496b2332e4c3"}, "downloads": -1, "filename": "nontemplate-0.13.tar.gz", "has_sig": false, "md5_digest": "0b45d4c9af2f6d12b9ef632ad5940116", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4395, "upload_time": "2015-09-28T00:55:55", "upload_time_iso_8601": "2015-09-28T00:55:55.411525Z", "url": "https://files.pythonhosted.org/packages/c8/36/31680595d7880cb5574f1564972097d732e54f4c5eafb61c747c852c0742/nontemplate-0.13.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b45d4c9af2f6d12b9ef632ad5940116", "sha256": "d7b85a7860c154b2d1092a4f6a4fbe3cd2b042c34ce11df2b13d496b2332e4c3"}, "downloads": -1, "filename": "nontemplate-0.13.tar.gz", "has_sig": false, "md5_digest": "0b45d4c9af2f6d12b9ef632ad5940116", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4395, "upload_time": "2015-09-28T00:55:55", "upload_time_iso_8601": "2015-09-28T00:55:55.411525Z", "url": "https://files.pythonhosted.org/packages/c8/36/31680595d7880cb5574f1564972097d732e54f4c5eafb61c747c852c0742/nontemplate-0.13.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:51 2020"}