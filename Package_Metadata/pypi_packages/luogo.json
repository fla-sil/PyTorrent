{"info": {"author": "Chris Loverchio", "author_email": "chrisloverchio@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "===============================\nluogo\n===============================\nluogo is a basic service locator for Python3. I've been working a lot with dependency injection and service location in Java and thought it would be interesting to build something from scratch in my current language of choice. \n\nWhy the name *luogo*? I'm not brimming with funny/clever ideas at the moment; however, I've been watching this Italian crime drama which has inspired me to work on my Italian...\n\nYou might have guessed by now that \"luogo\" is Italian for *location* or *place*. \n\nInstallation\n-------------\n\n::\n\n    pip install luogo\n\nUsage\n-----\n\nYou can start by defining your services in a service file (must feature \"service\" in the name). \nServices are denoted with the *Service* decorator.\n\n.. code-block:: python\n\n    # world_servce.py\n    from luogo import Service\n\n\n    @Service\n    class HelloWorldService:\n    \n        def greeting(self):\n            return \"Hello World!\"\n\n\nYour service client or implementation can then be in any file or module.\n\n\n.. code-block:: python\n\n    # client.py\n    from luogo import Locator, Implementation\n\n\n    @Implementation\n    class HelloWorldServiceClient:\n    \n        def greeting(self):\n            service = Locator.get_service(\"HelloWorldService\")\n            return service.greeting()\n\n\n.. code-block:: python\n\n    print(HelloWorldServiceClient().greeting())\n    # Hello World!\n\n\nYou can also mark functions as services:\n\n.. code-block:: python\n\n    # world_service.py\n    from luogo import Service\n\n\n    @Service\n    def hello_world_service:\n        return \"Hello World!\"\n\n\n.. code-block:: python\n\n    # client.py\n    from luogo import Locator, Implementation\n\n\n    @Implementation\n    def hello_world_service_client:\n        return Locator.get_service(\"hello_world_service\")\n    \n.. code-block:: python\n\n    print(hello_world_service_client())\n    # Hello World!\n\nNotes\n-----\n - I finally made it a thing to start using python3 so this probably isn't python2 compatible (might have used a python3 lib somewhere). I might work on it though.\n - Services need to be a file that features the word **service** somewhere in the file name; however, implementations can be anywhere.\n - *Locator* depends on a case insensitive string representation of the service name; however, it's easy to get that if you don't always feel like typing it out.\n \nWorks for my purposes, hopefully it can be of use to someone else!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cloverchio/luogo", "keywords": "python3 python service locator dependency injection", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "luogo", "package_url": "https://pypi.org/project/luogo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/luogo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cloverchio/luogo"}, "release_url": "https://pypi.org/project/luogo/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "A service locator for python.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>luogo is a basic service locator for Python3. I\u2019ve been working a lot with dependency injection and service location in Java and thought it would be interesting to build something from scratch in my current language of choice.</p>\n<p>Why the name <em>luogo</em>? I\u2019m not brimming with funny/clever ideas at the moment; however, I\u2019ve been watching this Italian crime drama which has inspired me to work on my Italian\u2026</p>\n<p>You might have guessed by now that \u201cluogo\u201d is Italian for <em>location</em> or <em>place</em>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install luogo\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>You can start by defining your services in a service file (must feature \u201cservice\u201d in the name).\nServices are denoted with the <em>Service</em> decorator.</p>\n<pre><span class=\"c1\"># world_servce.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">luogo</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span>\n\n\n<span class=\"nd\">@Service</span>\n<span class=\"k\">class</span> <span class=\"nc\">HelloWorldService</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Hello World!\"</span>\n</pre>\n<p>Your service client or implementation can then be in any file or module.</p>\n<pre><span class=\"c1\"># client.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">luogo</span> <span class=\"kn\">import</span> <span class=\"n\">Locator</span><span class=\"p\">,</span> <span class=\"n\">Implementation</span>\n\n\n<span class=\"nd\">@Implementation</span>\n<span class=\"k\">class</span> <span class=\"nc\">HelloWorldServiceClient</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">Locator</span><span class=\"o\">.</span><span class=\"n\">get_service</span><span class=\"p\">(</span><span class=\"s2\">\"HelloWorldService\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">greeting</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">HelloWorldServiceClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">greeting</span><span class=\"p\">())</span>\n<span class=\"c1\"># Hello World!</span>\n</pre>\n<p>You can also mark functions as services:</p>\n<pre><span class=\"c1\"># world_service.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">luogo</span> <span class=\"kn\">import</span> <span class=\"n\">Service</span>\n\n\n<span class=\"nd\">@Service</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world_service</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"Hello World!\"</span>\n</pre>\n<pre><span class=\"c1\"># client.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">luogo</span> <span class=\"kn\">import</span> <span class=\"n\">Locator</span><span class=\"p\">,</span> <span class=\"n\">Implementation</span>\n\n\n<span class=\"nd\">@Implementation</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world_service_client</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">Locator</span><span class=\"o\">.</span><span class=\"n\">get_service</span><span class=\"p\">(</span><span class=\"s2\">\"hello_world_service\"</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">hello_world_service_client</span><span class=\"p\">())</span>\n<span class=\"c1\"># Hello World!</span>\n</pre>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<blockquote>\n<ul>\n<li>I finally made it a thing to start using python3 so this probably isn\u2019t python2 compatible (might have used a python3 lib somewhere). I might work on it though.</li>\n<li>Services need to be a file that features the word <strong>service</strong> somewhere in the file name; however, implementations can be anywhere.</li>\n<li><em>Locator</em> depends on a case insensitive string representation of the service name; however, it\u2019s easy to get that if you don\u2019t always feel like typing it out.</li>\n</ul>\n</blockquote>\n<p>Works for my purposes, hopefully it can be of use to someone else!</p>\n</div>\n\n          </div>"}, "last_serial": 2854998, "releases": {"0.0.1": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "6e972005bc6d39e3a886adb48e6e0211", "sha256": "5039de1c4fd28a26355a155f0e5860e1b27613f0c0ba76d7530ecc42fdab6f95"}, "downloads": -1, "filename": "luogo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6e972005bc6d39e3a886adb48e6e0211", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4609, "upload_time": "2017-05-05T23:01:17", "upload_time_iso_8601": "2017-05-05T23:01:17.372747Z", "url": "https://files.pythonhosted.org/packages/48/fa/749a8356ccc858d51d46886cdf9d21295adba1bee18eafafacc27ded6a0f/luogo-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6e972005bc6d39e3a886adb48e6e0211", "sha256": "5039de1c4fd28a26355a155f0e5860e1b27613f0c0ba76d7530ecc42fdab6f95"}, "downloads": -1, "filename": "luogo-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6e972005bc6d39e3a886adb48e6e0211", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4609, "upload_time": "2017-05-05T23:01:17", "upload_time_iso_8601": "2017-05-05T23:01:17.372747Z", "url": "https://files.pythonhosted.org/packages/48/fa/749a8356ccc858d51d46886cdf9d21295adba1bee18eafafacc27ded6a0f/luogo-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:03 2020"}