{"info": {"author": "Mariano Mara", "author_email": "mariano.mara@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "------------\r\nPivot Table\r\n------------\r\n\r\n------------\r\nIntroduction\r\n------------\r\n\r\nGiven a list of arbitrary objects this module will help you transpose certain selected attributes in order to show them as columns in a table.\r\n\r\nSome features:\r\n\r\n- support for Python 2.4 up to 2.7\r\n- support for Unicode\r\n- you don't need to add boilerplate code to fill up missing values\r\n- both columns and rows will be ordered out of the box\r\n\r\n**Note**: Certain parts of this module (Aggregation and X-Axis definition) are *heavily* based on `Collective.Pivottable`_ written by Luciano Pacheco\r\n\r\n----------\r\nAn example\r\n----------\r\n\r\nLet's dive into an example so you can see right now if this module may help you or not. Later on, we have full details of every part of it:\r\n\r\nLet's say you have a web service that connects every day to DistroWatch and retrieves a list with the five more popular distros in the Page Hit Ranking. This service gives you the name of the distro, the H.P.D., the tendency and the number of releases each distro has.\r\n\r\nAn object that can hold such structure might look like this ::\r\n\r\n    >>> class Distros(object):                                                                                                                                                       \r\n    ...    def __init__(self, name, h_p_d, tendency, releases):\r\n    ...        self.name = name\r\n    ...        self.h_p_d = h_p_d\r\n    ...        self.tendency = tendency \r\n    ...        self.releases = releases                            \r\n    ...    def __repr__(self):\r\n    ...        return \"<Distro: %s, %d, %s, %d>\" % (self.name, self.h_p_d, self.tendency, self.releases)\r\n\r\nYou retrieve this week's data and you get ::\r\n\r\n    >>> distros = [\r\n    ...            Distros(u'Ubuntu', 2075, u'+', 13),\r\n    ...            Distros(u'Mint', 1547, u'=', 12),\r\n    ...            Distros(u'Fedora', 1460, u'+', 14),\r\n    ...            Distros(u'Debian', 1143, u'+', 10),\r\n    ...            Distros(u'OpenSuse', 1135, u'+', 26)\r\n    ...           ]\r\n\r\nWith this information you would like to get a table like this (notice that the distros are alphabetically ordered and the name of the object attributes are different):\r\n\r\n+-------------------+--------+--------+--------+----------+--------+\r\n|  Distro           | Debian | Fedora |  Mint  | OpenSuse | Ubuntu |\r\n+===================+========+========+========+==========+========+\r\n| Hits per distro   |  1143  |  1460  |  1547  |   1135   |  2075  |\r\n+-------------------+--------+--------+--------+----------+--------+\r\n| Tendency          |   \\+   |   \\+   |   =    |    \\+    |   \\+   | \r\n+-------------------+--------+--------+--------+----------+--------+\r\n| Releases          |   10   |   14   |   12   |    26    |   13   |\r\n+-------------------+--------+--------+--------+----------+--------+\r\n\r\nYou can use this module in this way to get the transposed data (don't worry, we'll explain each attribute later) ::\r\n\r\n    >>> from pivottable import PivotTable, Sum, GroupBy\r\n    >>> pt = PivotTable()\r\n    >>> pt.rows = distros\r\n    >>> pt.xaxis = \"name\"\r\n    >>> pt.yaxis = [\r\n    ...         {'attr':u'h_p_d', 'label':u'Hits per distro', 'aggr':Sum},\r\n    ...         {'attr':u'tendency', 'label':u'Tendency', 'aggr':Sum},\r\n    ...         {'attr':u'releases', 'label':u'Releases', 'aggr':Sum}]\r\n\r\nAnd finally here's the result ::\r\n\r\n    >>> [a for a in pt.result] \r\n    [[u'metric', u'Debian', u'Fedora', u'Mint', u'OpenSuse', u'Ubuntu'], [u'Hits per distro', u'1143', u'1460', u'1547', u'1135', u'2075'], [u'Tendency', u'+', u'+', u'=', u'+', u'+'], [u'Releases', u'10', u'14', u'12', u'26', u'13']]\r\n\r\nOr using .next() to get a more clean detail ::\r\n\r\n    >>> a = pt.result \r\n    >>> a.next()\r\n    [u'metric', u'Debian', u'Fedora', u'Mint', u'OpenSuse', u'Ubuntu']\r\n    >>> a.next() \r\n    [u'Hits per distro', u'1143', u'1460', u'1547', u'1135', u'2075']\r\n    >>> a.next() \r\n    [u'Tendency', u'+', u'+', u'=', u'+', u'+']\r\n    >>> a.next() \r\n    [u'Releases', u'10', u'14', u'12', u'26', u'13']\r\n\r\nAs you might have noticed, the column that brings the name for the measured attribute it's called *metric*. In the current release of this library, this name is hardcoded and cannot be changed (although it's trivial to fix, it might be ready in the next release of this library). \r\n\r\n---------------------------\r\nComplete module's reference\r\n---------------------------\r\n\r\n**class PivotTable**:\r\n\r\nThis is the module's main class where you can store the rows you want to pivot and the one that holds the pivotted data. By default it has no __init__ method so it can be initialized by simply calling PivotTable().\r\n\r\n*Attributes*:\r\n\r\n- **rows**: An attribute where you set the list of objects you want to transpose.\r\n\r\n- **result**: this is a read only attribute that will return the properly transposed data. In case some required attribute is missing or wrong, calling result will raise a PivotTableError.\r\n\r\n- **xaxis**: The name of the object attribute that will be use to pivot values.  This attr must exist in every object of the list assigned to rows. E.g. if you want a table that, as columns, has all the months for a given year and your object provides such date in a 'period' attribute, you should assign 'period' as the xaxis.\r\n\r\n- **xaxis_format**: Callable that will be applied to the pivotted headers. Useful for localization: if your columns will be datetime objects, instead of returning the datetime repr, return a string: e.g: \"jan-10\", \"ene-10\", etc.\r\n\r\n- **xaxis_sort**: Boolean flag. Set it to True if you want the pivotted columns to be ordered when building the table. *Warning*: setting this value as False will not return the columns in the order you append the objects to the list assigned to rows but rather a semi random one (before transposing, a set() operation is applied and afterwards a sorted() operation, in case you set this attribute to True). Default: True\r\n\r\n- **yaxis**: A list of dictionaries that provides the information required to proper understand your object and what kind of pivot table you need. Provide a dictionary for each attribute in your object you want in the table minus the xaxis attr (that you have already defined in xaxis). Each attribute you define will be a row in the new table except the ones you define as GroupBy attributes (these are going to be use as the pivot keys). The supported keys in each dictionary are:\r\n    * Mandatory:\r\n        * *attr*: the name of the attr in your object that will provide a value to use in the table\r\n        * *label*: the name you want to show in the table that represents the attr. Useful for translation purposes\r\n        * *aggr*: the kind of operation that will be acted upon the submitted attr. See pivottable.Aggregation for more on this. \r\n    * Optional:\r\n        * *format*: a callable that will be use in 'attr' before presenting the information. Useful for localizing number formats (e.g. an attr value is 0.234 but you want to display '23.4%' to american audiences and '23,4%' to german ones). This callable must only accept a \"value\" parameter.\r\n\r\n- **yaxis_order**: In case you're providing more than one attribute as the key to group the data (denoted in yaxis by using 'aggr':GroupBy as value:key for the given attributes), you can tell the module in this attribute in what order you want these columns to appear in the final table.\r\n\r\n- **headers**: This is a read only attribute. After you completed all the required attributes, you can use this attribute to see which are the values for the header row. This same attribute will be the first value in the result attribute (but it will be properly formatted then).\r\n \r\n\r\n**class PivotTableError**:\r\n\r\nThe main error class for this module: will report any errors encountered while pivotting the rows\r\n\r\n**class Aggregation**:\r\n\r\nThis class works as template for you to define new forms of aggregation you might find useful. At the current release, other than GroupBy and Sum are not defined and has no meaning other than to allow PivotTable to differenciate between keys to transpose and keys as Y-Axis. This is because subtotals and totals are not yet implemented. In a next version of this module these two features will be developed and you will be able to subclass Aggregation and create new forms of Aggregations.\r\n\r\n----------------------\r\nA more complex example\r\n----------------------\r\n\r\nWe are ready to work on a more complex example, trying to showcase all PivotTable features.\r\n\r\nImagine you work as a reporting analyst at `Capsule Corp`_. Capsule Corp. has at least two commercial offices in some of the major cities of the world. Your boss requests a report with the results for some key drivers (Customer Base, Churn Rate, Sales and Net Income) for every month in 2010.\r\n\r\nTo make the scenario a little more complex (and the example shorter) we won't report every city, every office, every month. Let's see how PivotTable takes care of filling in the blanks:\r\n\r\nLet's start by creating an object that can hold our data and some formatting functions ::\r\n\r\n    >>> from babel import numbers, dates\r\n    >>> import datetime\r\n    >>> from decimal import Decimal\r\n    >>> locale = \"en\"\r\n    >>> class Office(object): \r\n    ...    def __init__(self, city, office, month, initial_customer_base, sales, cancellations, income): \r\n    ...        self.city = city\r\n    ...        self.office = office\r\n    ...        self.month = month\r\n    ...        self.initial_customer_base = initial_customer_base\r\n    ...        self.sales = sales\r\n    ...        self.cancellations = cancellations\r\n    ...        self.income = Decimal(income)\r\n    ...    @property\r\n    ...    def net_income(self):\r\n    ...        return self.income-(self.income*Decimal('0.21'))\r\n    ...    @property\r\n    ...    def churn(self):\r\n    ...        try:\r\n    ...            return float(self.cancellations)/(float(self.initial_customer_base)+float(self.sales))\r\n    ...        except TypeError:\r\n    ...            if self.cancellations is None: return 0\r\n    ...            elif self.sales is None:\r\n    ...                return float(self.cancellations)/float(self.initial_customer_base)\r\n    ...\r\n    >>> def percent(value):\r\n    ...     try:\r\n    ...         return numbers.format_percent(value, '#.##%', locale)\r\n    ...     except TypeError:\r\n    ...         return u''\r\n    ...\r\n    >>> def currency(value):\r\n    ...     try:\r\n    ...         return numbers.format_currency(value or 0, 'USD', locale=locale)\r\n    ...     except TypeError:\r\n    ...         return u''\r\n    ...\r\n    >>> def numerical(value):\r\n    ...     try:\r\n    ...         return numbers.format_number(value, locale=locale)\r\n    ...     except TypeError:\r\n    ...         return None\r\n    ...\r\n    >>> def format_month(value):\r\n    ...     try:\r\n    ...         return dates.format_date(value, 'MMM-yy', locale)\r\n    ...     except AssertionError:\r\n    ...         return value\r\n    ...\r\n\r\nAnd now a list of Office objects ::\r\n\r\n    >>> data = [\r\n    ...     Office(u'West City', u'2nd Office', datetime.date(2010, 1, 1), 12309, 245, 14, 15687697),\r\n    ...     Office(u'West City', u'3nd Office', datetime.date(2010, 1, 1), 4562, 11, 5, 567332),\r\n    ...     Office(u'West City', u'1nd Office', datetime.date(2010, 1, 1), 896466, 2344, 156, 16677999),\r\n    ...     Office(u'West City', u'4nd Office', datetime.date(2010, 1, 1), 976, None, 1, 44780),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 1, 1), 3678, 34, 5, 333241),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 9, 1), 4016, 84, 20, 338930),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 8, 1), 3999, 18, 1, 336808),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 7, 1), 3854, 167, 22, 335697),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 6, 1), 3766, 99, 11, 334243),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 5, 1), 3771, 12, 17, 333796),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 4, 1), 3754, 34, 5, 333574),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 3, 1), 3722, 45, 13, 333370),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 2, 1), 3707, 20, 2, 333466),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 10, 1), 4080, 135, 28, 338257),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 11, 1), 4187, 259, 33, 340268),\r\n    ...     Office(u'North City', u'1nd Office', datetime.date(2010, 12, 1), 4413, 367, 17, 343352),\r\n    ...     Office(u'West City', u'2nd Office', datetime.date(2010, 2, 1), 12540, 245, 14, 15688736),\r\n    ...     Office(u'West City', u'3nd Office', datetime.date(2010, 2, 1), 4568, 11, 5, 567575),\r\n    ...     Office(u'West City', u'1nd Office', datetime.date(2010, 2, 1), 898654, 2344, 156, 16687999),\r\n    ...     Office(u'West City', u'4nd Office', datetime.date(2010, 2, 1), 975, None, 1, 44788),\r\n    ...     Office(u'West City', u'2nd Office', datetime.date(2010, 3, 1), 12771, 245, 14, 15689723),\r\n    ...     Office(u'West City', u'3nd Office', datetime.date(2010, 3, 1), 4574, 11, 5, 567441),\r\n    ...     Office(u'West City', u'1nd Office', datetime.date(2010, 3, 1), 900842, 2344, 156, 16689588),\r\n    ...     Office(u'South City', u'1nd Office', datetime.date(2010, 1, 1), 1238754, 9011, 794, 1177405748),\r\n    ...     Office(u'South City', u'1nd Office', datetime.date(2010, 3, 1), 1256852, 4028, 893, 1177869032),\r\n    ...     Office(u'South City', u'1nd Office', datetime.date(2010, 5, 1), 1261837, 7988, 1705, 1179026096),\r\n    ...     Office(u'South City', u'1nd Office', datetime.date(2010, 7, 1), 1262820, 5555, 1094, 1182109042),\r\n    ...     Office(u'South City', u'1nd Office', datetime.date(2010, 9, 1), 1266728, 8234, 693, 1184648971),\r\n    ...     Office(u'South City', u'1nd Office', datetime.date(2010, 11, 1), 1272283, 8887, 917, 1185449009),\r\n    ...     Office(u'South City', u'1nd Office', datetime.date(2010, 12, 1), 1280253, 8845, 820, 1277349020),\r\n    ...     Office(u'West City', u'4nd Office', datetime.date(2010, 5, 1), 974, None, 1, 44233),\r\n    ...     Office(u'West City', u'4nd Office', datetime.date(2010, 6, 1), 973, None, 2, 44356),\r\n    ...     Office(u'West City', u'4nd Office', datetime.date(2010, 7, 1), 971, None, 1, 44441),\r\n    ...     Office(u'North City', u'2nd Office', datetime.date(2010, 6, 1), 0, 555, 2, 50001),\r\n    ...     Office(u'North City', u'2nd Office', datetime.date(2010, 7, 1), 553, 10, None, 52345),\r\n    ...     Office(u'North City', u'2nd Office', datetime.date(2010, 8, 1), 563, 20, 11, 53400),\r\n    ...     Office(u'North City', u'2nd Office', datetime.date(2010, 9, 1), 572, 34, 5, 55890),\r\n    ...     Office(u'North City', u'2nd Office', datetime.date(2010, 10, 1), 601, 256, 25, 77860),\r\n    ...     Office(u'North City', u'2nd Office', datetime.date(2010, 11, 1), 832, 322, 11, 100543),\r\n    ...     Office(u'North City', u'2nd Office', datetime.date(2010, 12, 1), 1143, 477, 77, 135789)\r\n    ...     ]\r\n    ...\r\n\r\nNow, we'll try to pivot this information. Let's see step by step.\r\n\r\nFirst, we build a PivotTable instance ::\r\n\r\n    >>> pt = PivotTable()\r\n\r\nIn our object Office, the attribute *month* is the one we want to transpose into columns ::\r\n\r\n   >>> pt.xaxis = \"month\"\r\n\r\nSince it's a date instance and we want to show a localized string instead of datetime default repr, we apply a formatter function (we defined *format_month* at the beginning of this exercise) ::\r\n\r\n   >>> pt.xaxis_format = format_month\r\n\r\nWe want the months to be ordered ::\r\n\r\n   >>> pt.xaxis_sort = True\r\n\r\nEnough about the X-axis, let's start working with the Y-axis. First we need to tell PivotTable what Office's attributes should be presented as rows and which ones should be use as Y-axis keys to separate the data. Plus we want to label each metric with a special name and apply some formatter options.\r\nHere we have the Y-axis keys ::\r\n\r\n   >>> pt.yaxis = [\r\n   ...         {'attr':'city', 'label':u'City', 'aggr':GroupBy},\r\n   ...         {'attr':'office', 'label':u'Office', 'aggr':GroupBy}]\r\n   ...\r\n\r\n\r\nNow the metrics that will be transformed into rows. As explained before, at the moment, the Aggregate functions (other than GroupBy) bear no meaning and not specific action will be apply when they're invoked. Nevertheless, we need to defined an Aggregation function that's not GroupBy in order PivotTable can tell which ones are keys and which ones, metrics ::\r\n\r\n   >>> pt.yaxis += [\r\n   ...         {'attr':'initial_customer_base', 'label':u'Customer Base', 'aggr':Sum, 'format':numerical},\r\n   ...         {'attr':'churn', 'label':u'Churn Rate', 'aggr':Sum, 'format':percent},\r\n   ...         {'attr':'sales', 'label':u'Sales', 'aggr':Sum, 'format':numerical},\r\n   ...         {'attr':'net_income', 'label':u'Net Income', 'aggr':Sum, 'format':currency}]\r\n   ...\r\n\r\nAnd finally in which order we want the Y-axis keys be presented: first city and then office ::\r\n\r\n   >>> pt.yaxis_order = [u'city', u'office']\r\n\r\nNow that everything's configured, let's add our objects ::\r\n\r\n   >>> pt.rows = data\r\n\r\nJust to get a preview, we can see which are going to be our headers (previous to formatting) ::\r\n\r\n   >>> pt.headers\r\n   ['city', 'office', u'metric', datetime.date(2010, 1, 1), datetime.date(2010, 2, 1), datetime.date(2010, 3, 1), datetime.date(2010, 4, 1), datetime.date(2010, 5, 1), datetime.date(2010, 6, 1), datetime.date(2010, 7, 1), datetime.date(2010, 8, 1), datetime.date(2010, 9, 1), datetime.date(2010, 10, 1), datetime.date(2010, 11, 1), datetime.date(2010, 12, 1)]\r\n\r\nAnd here's the final output. We have all the information ordered out of the box both in the Y-axis and the X-axis and with the proper formatting, ready to be incorporated in wherever we need it (for example a template language to build html pages) ::\r\n\r\n   >>> for a in pt.result: print(a)\r\n   ['city', 'office', u'metric', u'Jan-10', u'Feb-10', u'Mar-10', u'Apr-10', u'May-10', u'Jun-10', u'Jul-10', u'Aug-10', u'Sep-10', u'Oct-10', u'Nov-10', u'Dec-10']\r\n   [u'North City', u'1nd Office', u'Customer Base', u'3,678', u'3,707', u'3,722', u'3,754', u'3,771', u'3,766', u'3,854', u'3,999', u'4,016', u'4,080', u'4,187', u'4,413']\r\n   [u'North City', u'1nd Office', u'Churn Rate', u'0.13%', u'0.05%', u'0.34%', u'0.13%', u'0.45%', u'0.28%', u'0.55%', u'0.02%', u'0.49%', u'0.66%', u'0.74%', u'0.36%']\r\n   [u'North City', u'1nd Office', u'Sales', u'34', u'20', u'45', u'34', u'12', u'99', u'167', u'18', u'84', u'135', u'259', u'367']\r\n   [u'North City', u'1nd Office', u'Net Income', u'$263,260.39', u'$263,438.14', u'$263,362.30', u'$263,523.46', u'$263,698.84', u'$264,051.97', u'$265,200.63', u'$266,078.32', u'$267,754.70', u'$267,223.03', u'$268,811.72', u'$271,248.08']\r\n   [u'North City', u'2nd Office', u'Customer Base', None, None, None, None, None, u'0', u'553', u'563', u'572', u'601', u'832', u'1,143']\r\n   [u'North City', u'2nd Office', u'Churn Rate', None, None, None, None, None, u'0.36%', u'0%', u'1.89%', u'0.82%', u'2.92%', u'0.95%', u'4.75%']\r\n   [u'North City', u'2nd Office', u'Sales', None, None, None, None, None, u'555', u'10', u'20', u'34', u'256', u'322', u'477']\r\n   [u'North City', u'2nd Office', u'Net Income', None, None, None, None, None, u'$39,500.79', u'$41,352.55', u'$42,186.00', u'$44,153.10', u'$61,509.40', u'$79,428.97', u'$107,273.31']\r\n   [u'South City', u'1nd Office', u'Customer Base', u'1,238,754', None, u'1,256,852', None, u'1,261,837', None, u'1,262,820', None, u'1,266,728', None, u'1,272,283', u'1,280,253']\r\n   [u'South City', u'1nd Office', u'Churn Rate', u'0.06%', None, u'0.07%', None, u'0.13%', None, u'0.09%', None, u'0.05%', None, u'0.07%', u'0.06%']\r\n   [u'South City', u'1nd Office', u'Sales', u'9,011', None, u'4,028', None, u'7,988', None, u'5,555', None, u'8,234', None, u'8,887', u'8,845']\r\n   [u'South City', u'1nd Office', u'Net Income', u'$930,150,540.92', None, u'$930,516,535.28', None, u'$931,430,615.84', None, u'$933,866,143.18', None, u'$935,872,687.09', None, u'$936,504,717.11', u'$1,009,105,725.80']\r\n   [u'West City', u'1nd Office', u'Customer Base', u'896,466', u'898,654', u'900,842', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'1nd Office', u'Churn Rate', u'0.02%', u'0.02%', u'0.02%', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'1nd Office', u'Sales', u'2,344', u'2,344', u'2,344', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'1nd Office', u'Net Income', u'$13,175,619.21', u'$13,183,519.21', u'$13,184,774.52', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'2nd Office', u'Customer Base', u'12,309', u'12,540', u'12,771', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'2nd Office', u'Churn Rate', u'0.11%', u'0.11%', u'0.11%', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'2nd Office', u'Sales', u'245', u'245', u'245', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'2nd Office', u'Net Income', u'$12,393,280.63', u'$12,394,101.44', u'$12,394,881.17', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'3nd Office', u'Customer Base', u'4,562', u'4,568', u'4,574', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'3nd Office', u'Churn Rate', u'0.11%', u'0.11%', u'0.11%', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'3nd Office', u'Sales', u'11', u'11', u'11', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'3nd Office', u'Net Income', u'$448,192.28', u'$448,384.25', u'$448,278.39', None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'4nd Office', u'Customer Base', u'976', u'975', None, None, u'974', u'973', u'971', None, None, None, None, None]\r\n   [u'West City', u'4nd Office', u'Churn Rate', u'0.1%', u'0.1%', None, None, u'0.1%', u'0.2%', u'0.1%', None, None, None, None, None]\r\n   [u'West City', u'4nd Office', u'Sales', None, None, None, None, None, None, None, None, None, None, None, None]\r\n   [u'West City', u'4nd Office', u'Net Income', u'$35,376.20', u'$35,382.52', None, None, u'$34,944.07', u'$35,041.24', u'$35,108.39', None, None, None, None, None]\r\n\r\nIf we change the locale, we will get the information localized for a different culture (of course, PivotTable has nothing to do with it, that's Babel work) ::\r\n\r\n   >>> locale = \"es\"\r\n   >>> a = pt.result\r\n   >>> a.next()\r\n   ['city', 'office', u'metric', u'ene-10', u'feb-10', u'mar-10', u'abr-10', u'may-10', u'jun-10', u'jul-10', u'ago-10', u'sep-10', u'oct-10', u'nov-10', u'dic-10']\r\n   >>> a.next()\r\n   [u'North City', u'1nd Office', u'Customer Base', u'3.678', u'3.707', u'3.722', u'3.754', u'3.771', u'3.766', u'3.854', u'3.999', u'4.016', u'4.080', u'4.187', u'4.413']\r\n   >>> a.next()\r\n   [u'North City', u'1nd Office', u'Churn Rate', u'0,13%', u'0,05%', u'0,34%', u'0,13%', u'0,45%', u'0,28%', u'0,55%', u'0,02%', u'0,49%', u'0,66%', u'0,74%', u'0,36%']\r\n   >>> a.next()\r\n   [u'North City', u'1nd Office', u'Sales', u'34', u'20', u'45', u'34', u'12', u'99', u'167', u'18', u'84', u'135', u'259', u'367']\r\n   >>> a.next()\r\n   [u'North City', u'1nd Office', u'Net Income', u'US$\\xa0263.260,39', u'US$\\xa0263.438,14', u'US$\\xa0263.362,30', u'US$\\xa0263.523,46', u'US$\\xa0263.698,84', u'US$\\xa0264.051,97', u'US$\\xa0265.200,63', u'US$\\xa0266.078,32', u'US$\\xa0267.754,70', u'US$\\xa0267.223,03', u'US$\\xa0268.811,72', u'US$\\xa0271.248,08']\r\n\r\nWe can change the Y-axis order too ::\r\n\r\n   >>> locale = \"en\"\r\n   >>> pt.yaxis_order = [u'office', u'city']\r\n   >>> a = pt.result\r\n   >>> a.next()\r\n   ['office', 'city', u'metric', u'Jan-10', u'Feb-10', u'Mar-10', u'Apr-10', u'May-10', u'Jun-10', u'Jul-10', u'Aug-10', u'Sep-10', u'Oct-10', u'Nov-10', u'Dec-10']\r\n   >>> a.next()\r\n   [u'1nd Office', u'North City', u'Customer Base', u'3,678', u'3,707', u'3,722', u'3,754', u'3,771', u'3,766', u'3,854', u'3,999', u'4,016', u'4,080', u'4,187', u'4,413']\r\n   >>> a.next()\r\n   [u'1nd Office', u'North City', u'Churn Rate', u'0.13%', u'0.05%', u'0.34%', u'0.13%', u'0.45%', u'0.28%', u'0.55%', u'0.02%', u'0.49%', u'0.66%', u'0.74%', u'0.36%']\r\n   >>> a.next()\r\n   [u'1nd Office', u'North City', u'Sales', u'34', u'20', u'45', u'34', u'12', u'99', u'167', u'18', u'84', u'135', u'259', u'367']\r\n   >>> a.next()\r\n   [u'1nd Office', u'North City', u'Net Income', u'$263,260.39', u'$263,438.14', u'$263,362.30', u'$263,523.46', u'$263,698.84', u'$264,051.97', u'$265,200.63', u'$266,078.32', u'$267,754.70', u'$267,223.03', u'$268,811.72', u'$271,248.08']\r\n   >>> a.next()\r\n   [u'1nd Office', u'South City', u'Customer Base', u'1,238,754', None, u'1,256,852', None, u'1,261,837', None, u'1,262,820', None, u'1,266,728', None, u'1,272,283', u'1,280,253']\r\n\r\nI guess that's all. Thanks for your patience. If you are interested in more examples you can check the `test suite`_ for PivotTable.\r\n\r\n.. _Collective.Pivottable: http://pypi.python.org/pypi/collective.pivottable/1.1.1dev-r97462\r\n.. _Capsule Corp: http://www.dragonballencyclopedia.com/index.php?title=Capsule_Corporation&variant=qdb\r\n.. _test suite: https://github.com/marplatense/python-pivottable/blob/master/tests/test.py", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/marplatense/python-pivottable/downloads", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marplatense/python-pivottable", "keywords": "pivot,table,pivottable,python", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pivottable", "package_url": "https://pypi.org/project/pivottable/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pivottable/", "project_urls": {"Download": "https://github.com/marplatense/python-pivottable/downloads", "Homepage": "https://github.com/marplatense/python-pivottable"}, "release_url": "https://pypi.org/project/pivottable/0.8/", "requires_dist": null, "requires_python": null, "summary": "A module that will help you to generate Pivot Tables base on arbitrary objects", "version": "0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pivot-table\">\n<h2>Pivot Table</h2>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Given a list of arbitrary objects this module will help you transpose certain selected attributes in order to show them as columns in a table.</p>\n<p>Some features:</p>\n<ul>\n<li>support for Python 2.4 up to 2.7</li>\n<li>support for Unicode</li>\n<li>you don\u2019t need to add boilerplate code to fill up missing values</li>\n<li>both columns and rows will be ordered out of the box</li>\n</ul>\n<p><strong>Note</strong>: Certain parts of this module (Aggregation and X-Axis definition) are <em>heavily</em> based on <a href=\"http://pypi.python.org/pypi/collective.pivottable/1.1.1dev-r97462\" rel=\"nofollow\">Collective.Pivottable</a> written by Luciano Pacheco</p>\n</div>\n<div id=\"an-example\">\n<h2>An example</h2>\n<p>Let\u2019s dive into an example so you can see right now if this module may help you or not. Later on, we have full details of every part of it:</p>\n<p>Let\u2019s say you have a web service that connects every day to DistroWatch and retrieves a list with the five more popular distros in the Page Hit Ranking. This service gives you the name of the distro, the H.P.D., the tendency and the number of releases each distro has.</p>\n<p>An object that can hold such structure might look like this</p>\n<pre>&gt;&gt;&gt; class Distros(object):\n...    def __init__(self, name, h_p_d, tendency, releases):\n...        self.name = name\n...        self.h_p_d = h_p_d\n...        self.tendency = tendency\n...        self.releases = releases\n...    def __repr__(self):\n...        return \"&lt;Distro: %s, %d, %s, %d&gt;\" % (self.name, self.h_p_d, self.tendency, self.releases)\n</pre>\n<p>You retrieve this week\u2019s data and you get</p>\n<pre>&gt;&gt;&gt; distros = [\n...            Distros(u'Ubuntu', 2075, u'+', 13),\n...            Distros(u'Mint', 1547, u'=', 12),\n...            Distros(u'Fedora', 1460, u'+', 14),\n...            Distros(u'Debian', 1143, u'+', 10),\n...            Distros(u'OpenSuse', 1135, u'+', 26)\n...           ]\n</pre>\n<p>With this information you would like to get a table like this (notice that the distros are alphabetically ordered and the name of the object attributes are different):</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Distro</th>\n<th>Debian</th>\n<th>Fedora</th>\n<th>Mint</th>\n<th>OpenSuse</th>\n<th>Ubuntu</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Hits per distro</td>\n<td>1143</td>\n<td>1460</td>\n<td>1547</td>\n<td>1135</td>\n<td>2075</td>\n</tr>\n<tr><td>Tendency</td>\n<td>+</td>\n<td>+</td>\n<td>=</td>\n<td>+</td>\n<td>+</td>\n</tr>\n<tr><td>Releases</td>\n<td>10</td>\n<td>14</td>\n<td>12</td>\n<td>26</td>\n<td>13</td>\n</tr>\n</tbody>\n</table>\n<p>You can use this module in this way to get the transposed data (don\u2019t worry, we\u2019ll explain each attribute later)</p>\n<pre>&gt;&gt;&gt; from pivottable import PivotTable, Sum, GroupBy\n&gt;&gt;&gt; pt = PivotTable()\n&gt;&gt;&gt; pt.rows = distros\n&gt;&gt;&gt; pt.xaxis = \"name\"\n&gt;&gt;&gt; pt.yaxis = [\n...         {'attr':u'h_p_d', 'label':u'Hits per distro', 'aggr':Sum},\n...         {'attr':u'tendency', 'label':u'Tendency', 'aggr':Sum},\n...         {'attr':u'releases', 'label':u'Releases', 'aggr':Sum}]\n</pre>\n<p>And finally here\u2019s the result</p>\n<pre>&gt;&gt;&gt; [a for a in pt.result]\n[[u'metric', u'Debian', u'Fedora', u'Mint', u'OpenSuse', u'Ubuntu'], [u'Hits per distro', u'1143', u'1460', u'1547', u'1135', u'2075'], [u'Tendency', u'+', u'+', u'=', u'+', u'+'], [u'Releases', u'10', u'14', u'12', u'26', u'13']]\n</pre>\n<p>Or using .next() to get a more clean detail</p>\n<pre>&gt;&gt;&gt; a = pt.result\n&gt;&gt;&gt; a.next()\n[u'metric', u'Debian', u'Fedora', u'Mint', u'OpenSuse', u'Ubuntu']\n&gt;&gt;&gt; a.next()\n[u'Hits per distro', u'1143', u'1460', u'1547', u'1135', u'2075']\n&gt;&gt;&gt; a.next()\n[u'Tendency', u'+', u'+', u'=', u'+', u'+']\n&gt;&gt;&gt; a.next()\n[u'Releases', u'10', u'14', u'12', u'26', u'13']\n</pre>\n<p>As you might have noticed, the column that brings the name for the measured attribute it\u2019s called <em>metric</em>. In the current release of this library, this name is hardcoded and cannot be changed (although it\u2019s trivial to fix, it might be ready in the next release of this library).</p>\n</div>\n<div id=\"complete-module-s-reference\">\n<h2>Complete module\u2019s reference</h2>\n<p><strong>class PivotTable</strong>:</p>\n<p>This is the module\u2019s main class where you can store the rows you want to pivot and the one that holds the pivotted data. By default it has no __init__ method so it can be initialized by simply calling PivotTable().</p>\n<p><em>Attributes</em>:</p>\n<ul>\n<li><strong>rows</strong>: An attribute where you set the list of objects you want to transpose.</li>\n<li><strong>result</strong>: this is a read only attribute that will return the properly transposed data. In case some required attribute is missing or wrong, calling result will raise a PivotTableError.</li>\n<li><strong>xaxis</strong>: The name of the object attribute that will be use to pivot values.  This attr must exist in every object of the list assigned to rows. E.g. if you want a table that, as columns, has all the months for a given year and your object provides such date in a \u2018period\u2019 attribute, you should assign \u2018period\u2019 as the xaxis.</li>\n<li><strong>xaxis_format</strong>: Callable that will be applied to the pivotted headers. Useful for localization: if your columns will be datetime objects, instead of returning the datetime repr, return a string: e.g: \u201cjan-10\u201d, \u201cene-10\u201d, etc.</li>\n<li><strong>xaxis_sort</strong>: Boolean flag. Set it to True if you want the pivotted columns to be ordered when building the table. <em>Warning</em>: setting this value as False will not return the columns in the order you append the objects to the list assigned to rows but rather a semi random one (before transposing, a set() operation is applied and afterwards a sorted() operation, in case you set this attribute to True). Default: True</li>\n<li><dl>\n<dt><strong>yaxis</strong>: A list of dictionaries that provides the information required to proper understand your object and what kind of pivot table you need. Provide a dictionary for each attribute in your object you want in the table minus the xaxis attr (that you have already defined in xaxis). Each attribute you define will be a row in the new table except the ones you define as GroupBy attributes (these are going to be use as the pivot keys). The supported keys in each dictionary are:</dt>\n<dd><ul>\n<li><dl>\n<dt>Mandatory:</dt>\n<dd><ul>\n<li><em>attr</em>: the name of the attr in your object that will provide a value to use in the table</li>\n<li><em>label</em>: the name you want to show in the table that represents the attr. Useful for translation purposes</li>\n<li><em>aggr</em>: the kind of operation that will be acted upon the submitted attr. See pivottable.Aggregation for more on this.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>Optional:</dt>\n<dd><ul>\n<li><em>format</em>: a callable that will be use in \u2018attr\u2019 before presenting the information. Useful for localizing number formats (e.g. an attr value is 0.234 but you want to display \u201823.4%\u2019 to american audiences and \u201823,4%\u2019 to german ones). This callable must only accept a \u201cvalue\u201d parameter.</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><strong>yaxis_order</strong>: In case you\u2019re providing more than one attribute as the key to group the data (denoted in yaxis by using \u2018aggr\u2019:GroupBy as value:key for the given attributes), you can tell the module in this attribute in what order you want these columns to appear in the final table.</li>\n<li><strong>headers</strong>: This is a read only attribute. After you completed all the required attributes, you can use this attribute to see which are the values for the header row. This same attribute will be the first value in the result attribute (but it will be properly formatted then).</li>\n</ul>\n<p><strong>class PivotTableError</strong>:</p>\n<p>The main error class for this module: will report any errors encountered while pivotting the rows</p>\n<p><strong>class Aggregation</strong>:</p>\n<p>This class works as template for you to define new forms of aggregation you might find useful. At the current release, other than GroupBy and Sum are not defined and has no meaning other than to allow PivotTable to differenciate between keys to transpose and keys as Y-Axis. This is because subtotals and totals are not yet implemented. In a next version of this module these two features will be developed and you will be able to subclass Aggregation and create new forms of Aggregations.</p>\n</div>\n<div id=\"a-more-complex-example\">\n<h2>A more complex example</h2>\n<p>We are ready to work on a more complex example, trying to showcase all PivotTable features.</p>\n<p>Imagine you work as a reporting analyst at <a href=\"http://www.dragonballencyclopedia.com/index.php?title=Capsule_Corporation&amp;variant=qdb\" rel=\"nofollow\">Capsule Corp</a>. Capsule Corp. has at least two commercial offices in some of the major cities of the world. Your boss requests a report with the results for some key drivers (Customer Base, Churn Rate, Sales and Net Income) for every month in 2010.</p>\n<p>To make the scenario a little more complex (and the example shorter) we won\u2019t report every city, every office, every month. Let\u2019s see how PivotTable takes care of filling in the blanks:</p>\n<p>Let\u2019s start by creating an object that can hold our data and some formatting functions</p>\n<pre>&gt;&gt;&gt; from babel import numbers, dates\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; locale = \"en\"\n&gt;&gt;&gt; class Office(object):\n...    def __init__(self, city, office, month, initial_customer_base, sales, cancellations, income):\n...        self.city = city\n...        self.office = office\n...        self.month = month\n...        self.initial_customer_base = initial_customer_base\n...        self.sales = sales\n...        self.cancellations = cancellations\n...        self.income = Decimal(income)\n...    @property\n...    def net_income(self):\n...        return self.income-(self.income*Decimal('0.21'))\n...    @property\n...    def churn(self):\n...        try:\n...            return float(self.cancellations)/(float(self.initial_customer_base)+float(self.sales))\n...        except TypeError:\n...            if self.cancellations is None: return 0\n...            elif self.sales is None:\n...                return float(self.cancellations)/float(self.initial_customer_base)\n...\n&gt;&gt;&gt; def percent(value):\n...     try:\n...         return numbers.format_percent(value, '#.##%', locale)\n...     except TypeError:\n...         return u''\n...\n&gt;&gt;&gt; def currency(value):\n...     try:\n...         return numbers.format_currency(value or 0, 'USD', locale=locale)\n...     except TypeError:\n...         return u''\n...\n&gt;&gt;&gt; def numerical(value):\n...     try:\n...         return numbers.format_number(value, locale=locale)\n...     except TypeError:\n...         return None\n...\n&gt;&gt;&gt; def format_month(value):\n...     try:\n...         return dates.format_date(value, 'MMM-yy', locale)\n...     except AssertionError:\n...         return value\n...\n</pre>\n<p>And now a list of Office objects</p>\n<pre>&gt;&gt;&gt; data = [\n...     Office(u'West City', u'2nd Office', datetime.date(2010, 1, 1), 12309, 245, 14, 15687697),\n...     Office(u'West City', u'3nd Office', datetime.date(2010, 1, 1), 4562, 11, 5, 567332),\n...     Office(u'West City', u'1nd Office', datetime.date(2010, 1, 1), 896466, 2344, 156, 16677999),\n...     Office(u'West City', u'4nd Office', datetime.date(2010, 1, 1), 976, None, 1, 44780),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 1, 1), 3678, 34, 5, 333241),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 9, 1), 4016, 84, 20, 338930),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 8, 1), 3999, 18, 1, 336808),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 7, 1), 3854, 167, 22, 335697),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 6, 1), 3766, 99, 11, 334243),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 5, 1), 3771, 12, 17, 333796),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 4, 1), 3754, 34, 5, 333574),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 3, 1), 3722, 45, 13, 333370),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 2, 1), 3707, 20, 2, 333466),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 10, 1), 4080, 135, 28, 338257),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 11, 1), 4187, 259, 33, 340268),\n...     Office(u'North City', u'1nd Office', datetime.date(2010, 12, 1), 4413, 367, 17, 343352),\n...     Office(u'West City', u'2nd Office', datetime.date(2010, 2, 1), 12540, 245, 14, 15688736),\n...     Office(u'West City', u'3nd Office', datetime.date(2010, 2, 1), 4568, 11, 5, 567575),\n...     Office(u'West City', u'1nd Office', datetime.date(2010, 2, 1), 898654, 2344, 156, 16687999),\n...     Office(u'West City', u'4nd Office', datetime.date(2010, 2, 1), 975, None, 1, 44788),\n...     Office(u'West City', u'2nd Office', datetime.date(2010, 3, 1), 12771, 245, 14, 15689723),\n...     Office(u'West City', u'3nd Office', datetime.date(2010, 3, 1), 4574, 11, 5, 567441),\n...     Office(u'West City', u'1nd Office', datetime.date(2010, 3, 1), 900842, 2344, 156, 16689588),\n...     Office(u'South City', u'1nd Office', datetime.date(2010, 1, 1), 1238754, 9011, 794, 1177405748),\n...     Office(u'South City', u'1nd Office', datetime.date(2010, 3, 1), 1256852, 4028, 893, 1177869032),\n...     Office(u'South City', u'1nd Office', datetime.date(2010, 5, 1), 1261837, 7988, 1705, 1179026096),\n...     Office(u'South City', u'1nd Office', datetime.date(2010, 7, 1), 1262820, 5555, 1094, 1182109042),\n...     Office(u'South City', u'1nd Office', datetime.date(2010, 9, 1), 1266728, 8234, 693, 1184648971),\n...     Office(u'South City', u'1nd Office', datetime.date(2010, 11, 1), 1272283, 8887, 917, 1185449009),\n...     Office(u'South City', u'1nd Office', datetime.date(2010, 12, 1), 1280253, 8845, 820, 1277349020),\n...     Office(u'West City', u'4nd Office', datetime.date(2010, 5, 1), 974, None, 1, 44233),\n...     Office(u'West City', u'4nd Office', datetime.date(2010, 6, 1), 973, None, 2, 44356),\n...     Office(u'West City', u'4nd Office', datetime.date(2010, 7, 1), 971, None, 1, 44441),\n...     Office(u'North City', u'2nd Office', datetime.date(2010, 6, 1), 0, 555, 2, 50001),\n...     Office(u'North City', u'2nd Office', datetime.date(2010, 7, 1), 553, 10, None, 52345),\n...     Office(u'North City', u'2nd Office', datetime.date(2010, 8, 1), 563, 20, 11, 53400),\n...     Office(u'North City', u'2nd Office', datetime.date(2010, 9, 1), 572, 34, 5, 55890),\n...     Office(u'North City', u'2nd Office', datetime.date(2010, 10, 1), 601, 256, 25, 77860),\n...     Office(u'North City', u'2nd Office', datetime.date(2010, 11, 1), 832, 322, 11, 100543),\n...     Office(u'North City', u'2nd Office', datetime.date(2010, 12, 1), 1143, 477, 77, 135789)\n...     ]\n...\n</pre>\n<p>Now, we\u2019ll try to pivot this information. Let\u2019s see step by step.</p>\n<p>First, we build a PivotTable instance</p>\n<pre>&gt;&gt;&gt; pt = PivotTable()\n</pre>\n<p>In our object Office, the attribute <em>month</em> is the one we want to transpose into columns</p>\n<pre>&gt;&gt;&gt; pt.xaxis = \"month\"\n</pre>\n<p>Since it\u2019s a date instance and we want to show a localized string instead of datetime default repr, we apply a formatter function (we defined <em>format_month</em> at the beginning of this exercise)</p>\n<pre>&gt;&gt;&gt; pt.xaxis_format = format_month\n</pre>\n<p>We want the months to be ordered</p>\n<pre>&gt;&gt;&gt; pt.xaxis_sort = True\n</pre>\n<p>Enough about the X-axis, let\u2019s start working with the Y-axis. First we need to tell PivotTable what Office\u2019s attributes should be presented as rows and which ones should be use as Y-axis keys to separate the data. Plus we want to label each metric with a special name and apply some formatter options.\nHere we have the Y-axis keys</p>\n<pre>&gt;&gt;&gt; pt.yaxis = [\n...         {'attr':'city', 'label':u'City', 'aggr':GroupBy},\n...         {'attr':'office', 'label':u'Office', 'aggr':GroupBy}]\n...\n</pre>\n<p>Now the metrics that will be transformed into rows. As explained before, at the moment, the Aggregate functions (other than GroupBy) bear no meaning and not specific action will be apply when they\u2019re invoked. Nevertheless, we need to defined an Aggregation function that\u2019s not GroupBy in order PivotTable can tell which ones are keys and which ones, metrics</p>\n<pre>&gt;&gt;&gt; pt.yaxis += [\n...         {'attr':'initial_customer_base', 'label':u'Customer Base', 'aggr':Sum, 'format':numerical},\n...         {'attr':'churn', 'label':u'Churn Rate', 'aggr':Sum, 'format':percent},\n...         {'attr':'sales', 'label':u'Sales', 'aggr':Sum, 'format':numerical},\n...         {'attr':'net_income', 'label':u'Net Income', 'aggr':Sum, 'format':currency}]\n...\n</pre>\n<p>And finally in which order we want the Y-axis keys be presented: first city and then office</p>\n<pre>&gt;&gt;&gt; pt.yaxis_order = [u'city', u'office']\n</pre>\n<p>Now that everything\u2019s configured, let\u2019s add our objects</p>\n<pre>&gt;&gt;&gt; pt.rows = data\n</pre>\n<p>Just to get a preview, we can see which are going to be our headers (previous to formatting)</p>\n<pre>&gt;&gt;&gt; pt.headers\n['city', 'office', u'metric', datetime.date(2010, 1, 1), datetime.date(2010, 2, 1), datetime.date(2010, 3, 1), datetime.date(2010, 4, 1), datetime.date(2010, 5, 1), datetime.date(2010, 6, 1), datetime.date(2010, 7, 1), datetime.date(2010, 8, 1), datetime.date(2010, 9, 1), datetime.date(2010, 10, 1), datetime.date(2010, 11, 1), datetime.date(2010, 12, 1)]\n</pre>\n<p>And here\u2019s the final output. We have all the information ordered out of the box both in the Y-axis and the X-axis and with the proper formatting, ready to be incorporated in wherever we need it (for example a template language to build html pages)</p>\n<pre>&gt;&gt;&gt; for a in pt.result: print(a)\n['city', 'office', u'metric', u'Jan-10', u'Feb-10', u'Mar-10', u'Apr-10', u'May-10', u'Jun-10', u'Jul-10', u'Aug-10', u'Sep-10', u'Oct-10', u'Nov-10', u'Dec-10']\n[u'North City', u'1nd Office', u'Customer Base', u'3,678', u'3,707', u'3,722', u'3,754', u'3,771', u'3,766', u'3,854', u'3,999', u'4,016', u'4,080', u'4,187', u'4,413']\n[u'North City', u'1nd Office', u'Churn Rate', u'0.13%', u'0.05%', u'0.34%', u'0.13%', u'0.45%', u'0.28%', u'0.55%', u'0.02%', u'0.49%', u'0.66%', u'0.74%', u'0.36%']\n[u'North City', u'1nd Office', u'Sales', u'34', u'20', u'45', u'34', u'12', u'99', u'167', u'18', u'84', u'135', u'259', u'367']\n[u'North City', u'1nd Office', u'Net Income', u'$263,260.39', u'$263,438.14', u'$263,362.30', u'$263,523.46', u'$263,698.84', u'$264,051.97', u'$265,200.63', u'$266,078.32', u'$267,754.70', u'$267,223.03', u'$268,811.72', u'$271,248.08']\n[u'North City', u'2nd Office', u'Customer Base', None, None, None, None, None, u'0', u'553', u'563', u'572', u'601', u'832', u'1,143']\n[u'North City', u'2nd Office', u'Churn Rate', None, None, None, None, None, u'0.36%', u'0%', u'1.89%', u'0.82%', u'2.92%', u'0.95%', u'4.75%']\n[u'North City', u'2nd Office', u'Sales', None, None, None, None, None, u'555', u'10', u'20', u'34', u'256', u'322', u'477']\n[u'North City', u'2nd Office', u'Net Income', None, None, None, None, None, u'$39,500.79', u'$41,352.55', u'$42,186.00', u'$44,153.10', u'$61,509.40', u'$79,428.97', u'$107,273.31']\n[u'South City', u'1nd Office', u'Customer Base', u'1,238,754', None, u'1,256,852', None, u'1,261,837', None, u'1,262,820', None, u'1,266,728', None, u'1,272,283', u'1,280,253']\n[u'South City', u'1nd Office', u'Churn Rate', u'0.06%', None, u'0.07%', None, u'0.13%', None, u'0.09%', None, u'0.05%', None, u'0.07%', u'0.06%']\n[u'South City', u'1nd Office', u'Sales', u'9,011', None, u'4,028', None, u'7,988', None, u'5,555', None, u'8,234', None, u'8,887', u'8,845']\n[u'South City', u'1nd Office', u'Net Income', u'$930,150,540.92', None, u'$930,516,535.28', None, u'$931,430,615.84', None, u'$933,866,143.18', None, u'$935,872,687.09', None, u'$936,504,717.11', u'$1,009,105,725.80']\n[u'West City', u'1nd Office', u'Customer Base', u'896,466', u'898,654', u'900,842', None, None, None, None, None, None, None, None, None]\n[u'West City', u'1nd Office', u'Churn Rate', u'0.02%', u'0.02%', u'0.02%', None, None, None, None, None, None, None, None, None]\n[u'West City', u'1nd Office', u'Sales', u'2,344', u'2,344', u'2,344', None, None, None, None, None, None, None, None, None]\n[u'West City', u'1nd Office', u'Net Income', u'$13,175,619.21', u'$13,183,519.21', u'$13,184,774.52', None, None, None, None, None, None, None, None, None]\n[u'West City', u'2nd Office', u'Customer Base', u'12,309', u'12,540', u'12,771', None, None, None, None, None, None, None, None, None]\n[u'West City', u'2nd Office', u'Churn Rate', u'0.11%', u'0.11%', u'0.11%', None, None, None, None, None, None, None, None, None]\n[u'West City', u'2nd Office', u'Sales', u'245', u'245', u'245', None, None, None, None, None, None, None, None, None]\n[u'West City', u'2nd Office', u'Net Income', u'$12,393,280.63', u'$12,394,101.44', u'$12,394,881.17', None, None, None, None, None, None, None, None, None]\n[u'West City', u'3nd Office', u'Customer Base', u'4,562', u'4,568', u'4,574', None, None, None, None, None, None, None, None, None]\n[u'West City', u'3nd Office', u'Churn Rate', u'0.11%', u'0.11%', u'0.11%', None, None, None, None, None, None, None, None, None]\n[u'West City', u'3nd Office', u'Sales', u'11', u'11', u'11', None, None, None, None, None, None, None, None, None]\n[u'West City', u'3nd Office', u'Net Income', u'$448,192.28', u'$448,384.25', u'$448,278.39', None, None, None, None, None, None, None, None, None]\n[u'West City', u'4nd Office', u'Customer Base', u'976', u'975', None, None, u'974', u'973', u'971', None, None, None, None, None]\n[u'West City', u'4nd Office', u'Churn Rate', u'0.1%', u'0.1%', None, None, u'0.1%', u'0.2%', u'0.1%', None, None, None, None, None]\n[u'West City', u'4nd Office', u'Sales', None, None, None, None, None, None, None, None, None, None, None, None]\n[u'West City', u'4nd Office', u'Net Income', u'$35,376.20', u'$35,382.52', None, None, u'$34,944.07', u'$35,041.24', u'$35,108.39', None, None, None, None, None]\n</pre>\n<p>If we change the locale, we will get the information localized for a different culture (of course, PivotTable has nothing to do with it, that\u2019s Babel work)</p>\n<pre>&gt;&gt;&gt; locale = \"es\"\n&gt;&gt;&gt; a = pt.result\n&gt;&gt;&gt; a.next()\n['city', 'office', u'metric', u'ene-10', u'feb-10', u'mar-10', u'abr-10', u'may-10', u'jun-10', u'jul-10', u'ago-10', u'sep-10', u'oct-10', u'nov-10', u'dic-10']\n&gt;&gt;&gt; a.next()\n[u'North City', u'1nd Office', u'Customer Base', u'3.678', u'3.707', u'3.722', u'3.754', u'3.771', u'3.766', u'3.854', u'3.999', u'4.016', u'4.080', u'4.187', u'4.413']\n&gt;&gt;&gt; a.next()\n[u'North City', u'1nd Office', u'Churn Rate', u'0,13%', u'0,05%', u'0,34%', u'0,13%', u'0,45%', u'0,28%', u'0,55%', u'0,02%', u'0,49%', u'0,66%', u'0,74%', u'0,36%']\n&gt;&gt;&gt; a.next()\n[u'North City', u'1nd Office', u'Sales', u'34', u'20', u'45', u'34', u'12', u'99', u'167', u'18', u'84', u'135', u'259', u'367']\n&gt;&gt;&gt; a.next()\n[u'North City', u'1nd Office', u'Net Income', u'US$\\xa0263.260,39', u'US$\\xa0263.438,14', u'US$\\xa0263.362,30', u'US$\\xa0263.523,46', u'US$\\xa0263.698,84', u'US$\\xa0264.051,97', u'US$\\xa0265.200,63', u'US$\\xa0266.078,32', u'US$\\xa0267.754,70', u'US$\\xa0267.223,03', u'US$\\xa0268.811,72', u'US$\\xa0271.248,08']\n</pre>\n<p>We can change the Y-axis order too</p>\n<pre>&gt;&gt;&gt; locale = \"en\"\n&gt;&gt;&gt; pt.yaxis_order = [u'office', u'city']\n&gt;&gt;&gt; a = pt.result\n&gt;&gt;&gt; a.next()\n['office', 'city', u'metric', u'Jan-10', u'Feb-10', u'Mar-10', u'Apr-10', u'May-10', u'Jun-10', u'Jul-10', u'Aug-10', u'Sep-10', u'Oct-10', u'Nov-10', u'Dec-10']\n&gt;&gt;&gt; a.next()\n[u'1nd Office', u'North City', u'Customer Base', u'3,678', u'3,707', u'3,722', u'3,754', u'3,771', u'3,766', u'3,854', u'3,999', u'4,016', u'4,080', u'4,187', u'4,413']\n&gt;&gt;&gt; a.next()\n[u'1nd Office', u'North City', u'Churn Rate', u'0.13%', u'0.05%', u'0.34%', u'0.13%', u'0.45%', u'0.28%', u'0.55%', u'0.02%', u'0.49%', u'0.66%', u'0.74%', u'0.36%']\n&gt;&gt;&gt; a.next()\n[u'1nd Office', u'North City', u'Sales', u'34', u'20', u'45', u'34', u'12', u'99', u'167', u'18', u'84', u'135', u'259', u'367']\n&gt;&gt;&gt; a.next()\n[u'1nd Office', u'North City', u'Net Income', u'$263,260.39', u'$263,438.14', u'$263,362.30', u'$263,523.46', u'$263,698.84', u'$264,051.97', u'$265,200.63', u'$266,078.32', u'$267,754.70', u'$267,223.03', u'$268,811.72', u'$271,248.08']\n&gt;&gt;&gt; a.next()\n[u'1nd Office', u'South City', u'Customer Base', u'1,238,754', None, u'1,256,852', None, u'1,261,837', None, u'1,262,820', None, u'1,266,728', None, u'1,272,283', u'1,280,253']\n</pre>\n<p>I guess that\u2019s all. Thanks for your patience. If you are interested in more examples you can check the <a href=\"https://github.com/marplatense/python-pivottable/blob/master/tests/test.py\" rel=\"nofollow\">test suite</a> for PivotTable.</p>\n</div>\n\n          </div>"}, "last_serial": 253248, "releases": {"0.8": [{"comment_text": "", "digests": {"md5": "36d7433e2a06eabf8bd5304ebf470a2f", "sha256": "2e738632f2a0e4bed10cd4574b1323242da1d1924e96f588cc9abca144d6bcde"}, "downloads": -1, "filename": "pivottable-0.8-py2.4.egg", "has_sig": false, "md5_digest": "36d7433e2a06eabf8bd5304ebf470a2f", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 17146, "upload_time": "2011-02-03T20:05:24", "upload_time_iso_8601": "2011-02-03T20:05:24.643367Z", "url": "https://files.pythonhosted.org/packages/d2/99/6f17ae69e01151f78eac725aa48bc2cdf8d1af27a4d545e98818715ce46b/pivottable-0.8-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c8421dd20d88d6b0c220a2a2e85985f", "sha256": "96fbba8aad18552e60704f0903311687912b09635670bed44761b6d6e7d791ca"}, "downloads": -1, "filename": "pivottable-0.8-py2.5.egg", "has_sig": false, "md5_digest": "9c8421dd20d88d6b0c220a2a2e85985f", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 17018, "upload_time": "2011-02-03T20:05:38", "upload_time_iso_8601": "2011-02-03T20:05:38.485325Z", "url": "https://files.pythonhosted.org/packages/74/81/1f52129e6ce0e716205cd54a5e4e1d5f52659baae82dfba94b00015e4c64/pivottable-0.8-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eaa41ff28b788c66bdcb25e88e10f55", "sha256": "f2921f0af8574a3eb7bcd52a213b300195344b6a3b51ba83ce6e7386e318eb86"}, "downloads": -1, "filename": "pivottable-0.8-py2.6.egg", "has_sig": false, "md5_digest": "7eaa41ff28b788c66bdcb25e88e10f55", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 17072, "upload_time": "2011-02-03T20:05:52", "upload_time_iso_8601": "2011-02-03T20:05:52.414827Z", "url": "https://files.pythonhosted.org/packages/fc/8b/3ab0c95101b6a94b65553c0806689ff9ca1c43656cfb7f3e05ac58e61c8e/pivottable-0.8-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6d48836072f82144288e9f3d8d93030", "sha256": "2ec7e712514a7d082f74d62f593571d9aedfbfea634ea23d1e3d7a6c20755aa4"}, "downloads": -1, "filename": "pivottable-0.8-py2.7.egg", "has_sig": false, "md5_digest": "a6d48836072f82144288e9f3d8d93030", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 16800, "upload_time": "2011-02-03T20:06:02", "upload_time_iso_8601": "2011-02-03T20:06:02.791553Z", "url": "https://files.pythonhosted.org/packages/83/87/5c3a4ee29e10c58565e21c7ab70b96e3b6162dc68cef2c0be81b81c06e09/pivottable-0.8-py2.7.egg", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36d7433e2a06eabf8bd5304ebf470a2f", "sha256": "2e738632f2a0e4bed10cd4574b1323242da1d1924e96f588cc9abca144d6bcde"}, "downloads": -1, "filename": "pivottable-0.8-py2.4.egg", "has_sig": false, "md5_digest": "36d7433e2a06eabf8bd5304ebf470a2f", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 17146, "upload_time": "2011-02-03T20:05:24", "upload_time_iso_8601": "2011-02-03T20:05:24.643367Z", "url": "https://files.pythonhosted.org/packages/d2/99/6f17ae69e01151f78eac725aa48bc2cdf8d1af27a4d545e98818715ce46b/pivottable-0.8-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c8421dd20d88d6b0c220a2a2e85985f", "sha256": "96fbba8aad18552e60704f0903311687912b09635670bed44761b6d6e7d791ca"}, "downloads": -1, "filename": "pivottable-0.8-py2.5.egg", "has_sig": false, "md5_digest": "9c8421dd20d88d6b0c220a2a2e85985f", "packagetype": "bdist_egg", "python_version": "2.5", "requires_python": null, "size": 17018, "upload_time": "2011-02-03T20:05:38", "upload_time_iso_8601": "2011-02-03T20:05:38.485325Z", "url": "https://files.pythonhosted.org/packages/74/81/1f52129e6ce0e716205cd54a5e4e1d5f52659baae82dfba94b00015e4c64/pivottable-0.8-py2.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "7eaa41ff28b788c66bdcb25e88e10f55", "sha256": "f2921f0af8574a3eb7bcd52a213b300195344b6a3b51ba83ce6e7386e318eb86"}, "downloads": -1, "filename": "pivottable-0.8-py2.6.egg", "has_sig": false, "md5_digest": "7eaa41ff28b788c66bdcb25e88e10f55", "packagetype": "bdist_egg", "python_version": "2.6", "requires_python": null, "size": 17072, "upload_time": "2011-02-03T20:05:52", "upload_time_iso_8601": "2011-02-03T20:05:52.414827Z", "url": "https://files.pythonhosted.org/packages/fc/8b/3ab0c95101b6a94b65553c0806689ff9ca1c43656cfb7f3e05ac58e61c8e/pivottable-0.8-py2.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6d48836072f82144288e9f3d8d93030", "sha256": "2ec7e712514a7d082f74d62f593571d9aedfbfea634ea23d1e3d7a6c20755aa4"}, "downloads": -1, "filename": "pivottable-0.8-py2.7.egg", "has_sig": false, "md5_digest": "a6d48836072f82144288e9f3d8d93030", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 16800, "upload_time": "2011-02-03T20:06:02", "upload_time_iso_8601": "2011-02-03T20:06:02.791553Z", "url": "https://files.pythonhosted.org/packages/83/87/5c3a4ee29e10c58565e21c7ab70b96e3b6162dc68cef2c0be81b81c06e09/pivottable-0.8-py2.7.egg", "yanked": false}], "timestamp": "Fri May  8 02:53:57 2020"}