{"info": {"author": "pwwang", "author_email": "pwwang@pwwang.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# pymedoo - A lightweight database framework for python.  \nit's inspired by [Medoo][1] for PHP and [Records][7] for python.  \n\n![Pypi][8] ![Github][9] ![Codacy][10] ![Codacy coverage][11] ![Travis building][12]\n\n## Install\n```bash\npip install medoo\n```\n\n## Required packages for databases\n\n| Database | Package   |\n|----------|---------  |\n| sqlite   | [sqlite3][2]   |\n| mysql    | [pymysql][3]   |\n| pgsql    | [psycopg2][4]  |\n| mssql    | [pymssql][5]   |\n| oracle   | [cx_Oracle][6] |\n\n## Get started\n### SELECT\n\n```python\nfrom medoo import Medoo\n\n# For other arguments, please refer to the original connect function of each client.\nme = Medoo(dbtype = 'sqlite', database = 'file:///path/to/test.sqlite')\n\n# SELECT * FROM \"Customers\"\nrs = me.select('Customers')\n\nprint(rs.export('csv', delimiter = '\\t'))\n```\n|CustomerID|CustomerName|ContactName|Address|City|PostalCode|Country|\n|-|-|-|-|-|-|-|\n|1|Alfreds Futterkiste|Maria Anders|Obere Str. 57|Berlin|12209|Germany|\n|2|Ana Trujillo Emparedados y helados|Ana Trujillo|Avda. de la Constituci\u00f3n 2222|M\u00e9xico D.F.|5021|Mexico|\n|3|Antonio Moreno Taquer\u00eda|Antonio Moreno|Mataderos 2312|M\u00e9xico D.F.|5023|Mexico|\n|4|Around the Horn|Thomas Hardy|120 Hanover Sq.|London|WA1 1DP|UK|\n|5|Berglunds snabbk\u00f6p|Christina Berglund|Berguvsv\u00e4gen 8|Lule\u00e5|S-958 22|Sweden|\n\n```python\n# SELECT \"CustomerID\",\"CustomerName\" FROM \"Customers\"\nme.select('Customers', 'CustomerID, CustomerName')\nme.select('Customers', ['CustomerID', 'CustomerName'])\n\n# SELECT \"C\".\"CustomerID\" AS \"CustomerID\",\"C\".\"CustomerName\" AS \"name\" FROM \"Customers\" AS \"C\"\nme.select('Customers(C)', ['C.CustomerID(id)', 'C.CustomerName(name)'])\n\n# SELECT DISTINCT \"Country\" FROM \"Customers\"\nme.select('Customers', 'Country', distinct = True)\n\n# SELECT COUNT(\"CustomerID\") FROM \"Customers\"\nme.select('Customers', 'CustomerID|COUNT')\n\n# SELECT COUNT(DISTINCT \"CustomerID\") AS \"c\" FROM \"Customers\"\nme.select('Customers', 'CustomerID|.COUNT(c)')\n\n# SELECT \"CustomerID\"+1 FROM \"Customers\"\nfrom medoo import Field, Raw\nme.select('Customers', Field('CustomerID')+1)\n\n# SELECT 'Name: ' || CustomerName AS name FROM \"Customers\"\nrs = me.select('Customers', Raw(\"'Name: ' || CustomerName AS name\"))\nfor r in rs: print(r.name)\n```\n```\nName: Alfreds Futterkiste\nName: Ana Trujillo Emparedados y helados\nName: Antonio Moreno Taquer\u00eda\nName: Around the Horn\nName: Berglunds snabbk\u00f6p\n```\n\n### WHERE\n#### Single condition\n```python\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" = 1\nme.select('Customers', where = {'CustomerID': 1})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" < 3\nme.select('Customers', where = {'CustomerID[<]': 3})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (1,2,3)\nme.select('Customers', where = {'CustomerID': (1,2,3)})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerName\" LIKE '%b%' OR \"CustomerName\" LIKE '%c%'\nme.select('Customers', where = {'CustomerName[~]': ('a', 'b')})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" BETWEEN 1 AND 3\nme.select('Customers', where = {'CustomerID[<>]': (1,3)})\n\n# SELECT * FROM \"Customers\" WHERE NOT \"CustomerID\" BETWEEN 1 AND 3\nme.select('Customers', where = {'!CustomerID[<>]': (1,3)})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" IS NULL\nme.select('Customers', where = {'CustomerID[is]': None}) # where = {'id[==]': None}\n\n# SELECT * FROM \"Customers\" WHERE INSTR(\"CustomerName\", 'Antonio')\nme.select('Customers', where = {Raw('INSTR(\"CustomerName\", \\'Antonio\\')'):None})\n```\n\n#### Compond\n```python\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (1,2,3) AND \"CustomerName\" LIKE '%b%'\nme.select('Customers', where = {\n    'CustomerID': (1,2,3),\n    'CustomerName[~]': 'b'\n})\n# SELECT * FROM \"Customers\" \n# WHERE (\"CustomerID\" IN (1,2,3) AND \"CustomerName\" LIKE '%b%') AND\n#\t(\"CustomerName\" = 'cd' OR \"CustomerID\" = 2) AND\n#\t(\"CustomerID\" < 3 AND NOT \"CustomerName\" = 'bc')\nme.select('Customers', where = {\n    'AND': {\n        'CustomerID': (1,2,3),\n        'CustomerName[~]': 'b'\n    },\n    'OR': {\n        'CustomerName': 'cd',\n        'CustomerID': 2\n    },\n    # you can use comment to distinguish multiple ANDs and ORs\n    'AND #2': {\n        'CustomerID[<]': 3,\n        '!CustomerName': 'bc'\n    }\n})\n```\n\n#### Modifier\n```python\n# SELECT * FROM \"Customers\" ORDER BY \"CustomerID\" DESC, \"CustomerName\" ASC LIMIT 2 OFFSET 1\n# MSSQL:\n# SELECT * FROM \"Customers\" ORDER BY \"CustomerID\" DESC, \"CustomerName\" ASC\n#\tOFFSET 1 ROWS FETCH NEXT 2 ROWS ONLY\nme.select('Customers', where = {\n    'ORDER': {'CustomerID': 'desc', 'CustomerName': 'asc'},\n    'LIMIT': (2, 1)\n})\n\n# SELECT COUNT(\"CustomerID\") AS \"c\",\"CustomerName\" FROM \"Customers\" GROUP BY \"Country\" HAVING \"CustomerID\" > 1\nme.select('Customers', 'CustomerID|count(c), CustomerName', where = {\n    'GROUP': 'Country',\n    'HAVING': {'CustomerID[>]': 1}\n})\n```\n\n### Using subquery\n```python\nprint(me.select('Orders').export('csv', delimiter = '\\t'))\n```\n|OrderID|CustomerID|OrderDate|\n|-|-|-|\n|10308|2|1996-09-18|\n|10309|37|1996-09-19|\n|10310|77|1996-09-20|\n```python\n# SELECT * FROM \"Customers\" AS \"C\",(SELECT \"CustomerID\" FROM \"Orders\") AS \"O\" \n#   WHERE \"C\".\"CustomerID\" = \"O\".\"CustomerID\"\nme.select([\n    'Customers(C)', # the first table\n    me.builder.select('Orders', 'CustomerID', sub = 'O')\n], where = {\n    'C.CustomerID': Field('O.CustomerID')\n})\n\n# SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (SELECT \"CustomerID\" FROM \"Orders\")\nme.select('Customers', where = {\n    'CustomerID': me.builder.select('Orders', 'CustomerID')\n})\n```\n\n### JOIN\n```python\n# SELECT \"O\".\"OrderID\",\"C\".\"CustomerName\",\"O\".\"OrderDate\" FROM \"Orders\" AS \"O\" \n#   INNER JOIN \"Customers\" AS \"C\" ON \"C\".\"CustomerID\"=\"O\".\"CustomerID\"\nme.select('Orders(O)', 'O.OrderID,C.CustomerName,O.OrderDate', join = {\n    'Customers(C)': 'CustomerID'\n})\n\n# equivalent to\nme.select('Orders(O)', 'O.OrderID,C.CustomerName,O.OrderDate', join = {\n    'Customers(C)[><]': 'CustomerID'\n})\n# [>] LEFT JOIN, [<] RIGHT JOIN [<>] FULL OUTER JOIN\n\n# Join on multiple columns (same in different tables)\n# join = { 'Customers(C)[><]': ['CustomerID', 'OtherColumn'] }\n\n# Join on different columns: JOIN \"Customers\" AS \"C\" ON \"C\".\"CustomerID\"=\"O\".\"OtherID\"\n# join = { 'Customers(C)[><]': {'CustomerID', 'OtherID'} }\n\n# You can join multiple tables, use OrderedDict if you want to keep the order.\n```\n\n### UNION\n```python\n# SELECT \"CustomerID\" FROM \"Customers\" UNION SELECT \"CustomerID\" FROM \"Orders\"\nme.union(\n    me.builder.select('Customers', 'CustomerID'),\n    me.builder.select('Orders', 'CustomerID')\n)\n\n# SELECT \"CustomerID\" FROM \"Customers\" UNION ALL SELECT \"CustomerID\" FROM \"Orders\"\nme.union(\n    me.builder.select('Customers', 'CustomerID'),\n    me.builder.select('Orders', 'CustomerID', sub = True)\n)\n```\n\n### Records\n`Medoo.select` and `Medoo.union` return a collection of records, which is basically a generator, but you can still get items from it, as it will consume the generate if necessary. The idea is borrowed from [Records][7].\n```python\nrecords = me.select('Customers', 'CustomerID(id)')\nrecord  = records.first() # <Record {'id': 1}>\n\n# equivalent to\nrecord  = records[0] \n\n# you may also select other rows: records[1], records[2]\n# or return all rows: \nprint(records.all())\n\n# you can also export the records\n# this is the courtesy from tablib (https://github.com/kennethreitz/tablib)\n# check the kwargs with its documentation\nprint(records.export('csv', delimiter = '\\t'))\n\n# You can also apply tablib's other function on the data:\n# records.tldata.<function>(<args>)\n\n# to get the value of each field from a record:\nprint(record[0]) # 1\nprint(record['id']) # 1\nprint(record.id) # 1\nprint(record.as_dict()) # {'id': 1}\n```\n\n### INSERT\n```python\n# INSERT INTO \"Orders\" (\"OrderID\",\"CustomerID\",\"OrderDate\") VALUES (1,2,'1999-09-09'),(2,8,'2001-10-12')\nme.insert(\n    'Orders', # table\n    'OrderID, CustomerID, OrderDate', # fields\n    (1,2,'1999-09-09'), # values\n    (2,8,'2001-10-12')\n    # ...\n)\n# get the last insert row id\nprint(me.id()) # 5\n\n# INSERT INTO \"Orders\" (\"OrderID\",\"CustomerID\",\"OrderDate\") VALUES (1,2,'1999-09-09'),(2,8,'2001-10,12')\nme.insert(\n    'Orders', # table\n    {'OrderID': 1, 'CustomerID': 2, 'OrderDate': '1999-09-09'}, # fields with the first value\n    (2,8,'2001-10-12')\n    # ...\n)\nme.insert(\n    'Orders', # table\n    {'OrderID': 1, 'CustomerID': 2, 'OrderDate': '1999-09-09'}, # fields with the first value\n    {'OrderID': 2, 'CustomerID': 8, 'OrderDate': '2001-10-12'}  # specify the fields as well\n    # ...\n)\n# Or if your values have all the fields\n# INSERT INTO \"Orders\" VALUES (1,2,'1999-09-09'),(2,8,'2001-10-12')\nme.insert(\n    'Orders', # table\n    (1,2,'1999-09-09')\n    (2,8,'2001-10-12')\n    # ...\n)\n\n# You may hold the changes until all data inserted\nme.insert(..., commit = False)\nme.insert(..., commit = False)\nme.insert(..., commit = False)\nme.insert(..., commit = False)\nme.commit()\n# This applies with UPDATE and DELETE as well.\n```\n\n### UPDATE\n```python\n# UPDATE \"Orders\" SET \"CustomerID\"=10 WHERE \"OrderID\" = 2\nme.update(\n    'Orders', # table\n    data  = {'CustomerID': 10},\n    where = {'OrderID': 2}\n)\n# UPDATE \"Orders\" SET \"CustomerID\"=\"CustomerID\"+1 WHERE \"OrderID\" = 2\nme.update(\n    'Orders', # table\n    data  = {'CustomerID[+]': 1},\n    where = {'OrderID': 2}\n)\n```\n\n### DELETE\n```python\n# DELETE FROM \"Orders\" WHERE \"OrderID\" = 2\nme.delete('Orders', where = {'OrderID': 2})\n```\n\n### Other functions of `Medoo`\n```python\n# Fetch a single value\nme.get('Customers', 'CustomerID', where = {'CustomerName': 'Around the Horn'}) # == 1\n\n# Check if a record exists\nme.has('Customers', where = {'CustomerID': 10}) # == False\n\n# Return the last query\nme.last() # SELECT * FROM \"Customers\" WHERE \"CustomerID\" = 10\n\n# Show all the queries bound with `me`\n\n# You have to passing `logging = True` to `Medoo(..., logging = True)`\nme.log()\n\n# Return the errors\nme.error()\n\n# Submit an SQL query\nme.query(sql, commit = True)\n```\n\n### Extending `pymedoo`\n`pymedoo` is highly extendable, including the operators in `WHERE` conditions and `UPDATE SET` clause, `JOIN` operators, and some functions such as how to quote the table names, field names and values. All of these have been defined with `Dialect` class, what you need to do is just extend this class and specify it to the `Medoo` instance.  \nFor example, let's define a case-insensitive `LIKE` operator using a shortcut `~~`:\n```python\nfrom medoo import Medoo, Dialect\n\nclass MyDialect(Dialect):\n    OPERATOR_MAP = {\n        '~~': 'ilike'\n    }\n\n    @classmethod\n    def ilike(klass, field, value):\n        # support single value\n        if not isinstance(value, list):\n            value = [value]\n        \n        terms = [\n            \"UPPER({}) LIKE UPPER({})\".format(field, klass.value(v)) # quote the value\n            for v in value\n        ]\n        # use OR to connect\n        return ' OR '.join(terms)\n\n# tell medoo to use this dialect\nme = Medoo(...)\nme.dialect(MyDialect)\n\n# SELECT * FROM \"Customers\" WHERE UPPER(\"CustomerName\") LIKE UPPER('%an%')\nrecords = me.select('Customers', where = {\n    'CustomerName[~~]': '%an%'\n})\nprint(records.export('csv', delimiter = '\\t'))\n```\n|CustomerID|CustomerName|ContactName|Address|City|PostalCode|Country|\n|-|-|-|-|-|-|-|\n|2|Ana Trujillo Emparedados y helados|Ana Trujillo|Avda. de la Constituci\u00f3n 2222|M\u00e9xico D.F.|5021|Mexico|\n|3|Antonio Moreno Taquer\u00eda|Antonio Moreno|Mataderos 2312|M\u00e9xico D.F.|5023|Mexico|\n\n\n[1]: https://medoo.in/\n[2]: https://docs.python.org/2/library/sqlite3.html\n[3]: https://github.com/PyMySQL/PyMySQL\n[4]: http://initd.org/psycopg/docs/\n[5]: http://www.pymssql.org/en/stable/\n[6]: https://oracle.github.io/python-cx_Oracle/\n[7]: https://github.com/kennethreitz/records\n[8]: https://img.shields.io/pypi/v/medoo.svg?style=flat-square\n[9]: https://img.shields.io/github/tag/pwwang/pymedoo.svg?style=flat-square\n[10]: https://img.shields.io/codacy/grade/83a79e32a9414a08be67d17b3e93a2ad.svg?style=flat-square\n[11]: https://img.shields.io/codacy/coverage/83a79e32a9414a08be67d17b3e93a2ad.svg?style=flat-square\n[12]: https://img.shields.io/travis/pwwang/pymedoo.svg?style=flat-square", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pwwang/pymedoo", "keywords": "", "license": "MIT", "maintainer": "pwwang", "maintainer_email": "pwwang@pwwang.com", "name": "pymedoo", "package_url": "https://pypi.org/project/pymedoo/", "platform": "", "project_url": "https://pypi.org/project/pymedoo/", "project_urls": {"Homepage": "https://github.com/pwwang/pymedoo", "Repository": "https://github.com/pwwang/pymedoo"}, "release_url": "https://pypi.org/project/pymedoo/0.0.5/", "requires_dist": ["six (>=1.12,<2.0); python_version >= \"2.7\" and python_version < \"2.8\""], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "A lightweight database framework for python", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pymedoo - A lightweight database framework for python.</h1>\n<p>it's inspired by <a href=\"https://medoo.in/\" rel=\"nofollow\">Medoo</a> for PHP and <a href=\"https://github.com/kennethreitz/records\" rel=\"nofollow\">Records</a> for python.</p>\n<p><img alt=\"Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bab13f1f6c4f87bfec35bc1d7fc7a7ad6c2254b5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d65646f6f2e7376673f7374796c653d666c61742d737175617265\"> <img alt=\"Github\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d28c1c9572994d162d171bb5813277101fc24e04/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f707777616e672f70796d65646f6f2e7376673f7374796c653d666c61742d737175617265\"> <img alt=\"Codacy\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dc76b67d70cdf8a26aa75896e251158c5011c6d1/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f67726164652f38336137396533326139343134613038626536376431376233653933613261642e7376673f7374796c653d666c61742d737175617265\"> <img alt=\"Codacy coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5bb915315d262b29404b490c927e83d6c32e9be3/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f636f7665726167652f38336137396533326139343134613038626536376431376233653933613261642e7376673f7374796c653d666c61742d737175617265\"> <img alt=\"Travis building\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c77f18d72302e063734519b1fc1e5bd99affdb33/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f707777616e672f70796d65646f6f2e7376673f7374796c653d666c61742d737175617265\"></p>\n<h2>Install</h2>\n<pre>pip install medoo\n</pre>\n<h2>Required packages for databases</h2>\n<table>\n<thead>\n<tr>\n<th>Database</th>\n<th>Package</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sqlite</td>\n<td><a href=\"https://docs.python.org/2/library/sqlite3.html\" rel=\"nofollow\">sqlite3</a></td>\n</tr>\n<tr>\n<td>mysql</td>\n<td><a href=\"https://github.com/PyMySQL/PyMySQL\" rel=\"nofollow\">pymysql</a></td>\n</tr>\n<tr>\n<td>pgsql</td>\n<td><a href=\"http://initd.org/psycopg/docs/\" rel=\"nofollow\">psycopg2</a></td>\n</tr>\n<tr>\n<td>mssql</td>\n<td><a href=\"http://www.pymssql.org/en/stable/\" rel=\"nofollow\">pymssql</a></td>\n</tr>\n<tr>\n<td>oracle</td>\n<td><a href=\"https://oracle.github.io/python-cx_Oracle/\" rel=\"nofollow\">cx_Oracle</a></td>\n</tr></tbody></table>\n<h2>Get started</h2>\n<h3>SELECT</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">medoo</span> <span class=\"kn\">import</span> <span class=\"n\">Medoo</span>\n\n<span class=\"c1\"># For other arguments, please refer to the original connect function of each client.</span>\n<span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">Medoo</span><span class=\"p\">(</span><span class=\"n\">dbtype</span> <span class=\"o\">=</span> <span class=\"s1\">'sqlite'</span><span class=\"p\">,</span> <span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"s1\">'file:///path/to/test.sqlite'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\"</span>\n<span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s1\">'csv'</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>CustomerID</th>\n<th>CustomerName</th>\n<th>ContactName</th>\n<th>Address</th>\n<th>City</th>\n<th>PostalCode</th>\n<th>Country</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Alfreds Futterkiste</td>\n<td>Maria Anders</td>\n<td>Obere Str. 57</td>\n<td>Berlin</td>\n<td>12209</td>\n<td>Germany</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Ana Trujillo Emparedados y helados</td>\n<td>Ana Trujillo</td>\n<td>Avda. de la Constituci\u00f3n 2222</td>\n<td>M\u00e9xico D.F.</td>\n<td>5021</td>\n<td>Mexico</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Antonio Moreno Taquer\u00eda</td>\n<td>Antonio Moreno</td>\n<td>Mataderos 2312</td>\n<td>M\u00e9xico D.F.</td>\n<td>5023</td>\n<td>Mexico</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Around the Horn</td>\n<td>Thomas Hardy</td>\n<td>120 Hanover Sq.</td>\n<td>London</td>\n<td>WA1 1DP</td>\n<td>UK</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Berglunds snabbk\u00f6p</td>\n<td>Christina Berglund</td>\n<td>Berguvsv\u00e4gen 8</td>\n<td>Lule\u00e5</td>\n<td>S-958 22</td>\n<td>Sweden</td>\n</tr></tbody></table>\n<pre><span class=\"c1\"># SELECT \"CustomerID\",\"CustomerName\" FROM \"Customers\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID, CustomerName'</span><span class=\"p\">)</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'CustomerID'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerName'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># SELECT \"C\".\"CustomerID\" AS \"CustomerID\",\"C\".\"CustomerName\" AS \"name\" FROM \"Customers\" AS \"C\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers(C)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'C.CustomerID(id)'</span><span class=\"p\">,</span> <span class=\"s1\">'C.CustomerName(name)'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># SELECT DISTINCT \"Country\" FROM \"Customers\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'Country'</span><span class=\"p\">,</span> <span class=\"n\">distinct</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SELECT COUNT(\"CustomerID\") FROM \"Customers\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID|COUNT'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SELECT COUNT(DISTINCT \"CustomerID\") AS \"c\" FROM \"Customers\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID|.COUNT(c)'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SELECT \"CustomerID\"+1 FROM \"Customers\"</span>\n<span class=\"kn\">from</span> <span class=\"nn\">medoo</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">Raw</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'CustomerID'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SELECT 'Name: ' || CustomerName AS name FROM \"Customers\"</span>\n<span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">Raw</span><span class=\"p\">(</span><span class=\"s2\">\"'Name: ' || CustomerName AS name\"</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">rs</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<pre><code>Name: Alfreds Futterkiste\nName: Ana Trujillo Emparedados y helados\nName: Antonio Moreno Taquer\u00eda\nName: Around the Horn\nName: Berglunds snabbk\u00f6p\n</code></pre>\n<h3>WHERE</h3>\n<h4>Single condition</h4>\n<pre><span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerID\" = 1</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerID\" &lt; 3</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID[&lt;]'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (1,2,3)</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)})</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerName\" LIKE '%b%' OR \"CustomerName\" LIKE '%c%'</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerName[~]'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">)})</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerID\" BETWEEN 1 AND 3</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID[&lt;&gt;]'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)})</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE NOT \"CustomerID\" BETWEEN 1 AND 3</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'!CustomerID[&lt;&gt;]'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)})</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerID\" IS NULL</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID[is]'</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">})</span> <span class=\"c1\"># where = {'id[==]': None}</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE INSTR(\"CustomerName\", 'Antonio')</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">Raw</span><span class=\"p\">(</span><span class=\"s1\">'INSTR(\"CustomerName\", </span><span class=\"se\">\\'</span><span class=\"s1\">Antonio</span><span class=\"se\">\\'</span><span class=\"s1\">)'</span><span class=\"p\">):</span><span class=\"kc\">None</span><span class=\"p\">})</span>\n</pre>\n<h4>Compond</h4>\n<pre><span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (1,2,3) AND \"CustomerName\" LIKE '%b%'</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n    <span class=\"s1\">'CustomerName[~]'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span>\n<span class=\"p\">})</span>\n<span class=\"c1\"># SELECT * FROM \"Customers\" </span>\n<span class=\"c1\"># WHERE (\"CustomerID\" IN (1,2,3) AND \"CustomerName\" LIKE '%b%') AND</span>\n<span class=\"c1\">#\t(\"CustomerName\" = 'cd' OR \"CustomerID\" = 2) AND</span>\n<span class=\"c1\">#\t(\"CustomerID\" &lt; 3 AND NOT \"CustomerName\" = 'bc')</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'AND'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n        <span class=\"s1\">'CustomerName[~]'</span><span class=\"p\">:</span> <span class=\"s1\">'b'</span>\n    <span class=\"p\">},</span>\n    <span class=\"s1\">'OR'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'CustomerName'</span><span class=\"p\">:</span> <span class=\"s1\">'cd'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"mi\">2</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># you can use comment to distinguish multiple ANDs and ORs</span>\n    <span class=\"s1\">'AND #2'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'CustomerID[&lt;]'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n        <span class=\"s1\">'!CustomerName'</span><span class=\"p\">:</span> <span class=\"s1\">'bc'</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Modifier</h4>\n<pre><span class=\"c1\"># SELECT * FROM \"Customers\" ORDER BY \"CustomerID\" DESC, \"CustomerName\" ASC LIMIT 2 OFFSET 1</span>\n<span class=\"c1\"># MSSQL:</span>\n<span class=\"c1\"># SELECT * FROM \"Customers\" ORDER BY \"CustomerID\" DESC, \"CustomerName\" ASC</span>\n<span class=\"c1\">#\tOFFSET 1 ROWS FETCH NEXT 2 ROWS ONLY</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'ORDER'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"s1\">'desc'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerName'</span><span class=\"p\">:</span> <span class=\"s1\">'asc'</span><span class=\"p\">},</span>\n    <span class=\"s1\">'LIMIT'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># SELECT COUNT(\"CustomerID\") AS \"c\",\"CustomerName\" FROM \"Customers\" GROUP BY \"Country\" HAVING \"CustomerID\" &gt; 1</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID|count(c), CustomerName'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'GROUP'</span><span class=\"p\">:</span> <span class=\"s1\">'Country'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'HAVING'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID[&gt;]'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>Using subquery</h3>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Orders'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s1\">'csv'</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>OrderID</th>\n<th>CustomerID</th>\n<th>OrderDate</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10308</td>\n<td>2</td>\n<td>1996-09-18</td>\n</tr>\n<tr>\n<td>10309</td>\n<td>37</td>\n<td>1996-09-19</td>\n</tr>\n<tr>\n<td>10310</td>\n<td>77</td>\n<td>1996-09-20</td>\n</tr></tbody></table>\n<pre><span class=\"c1\"># SELECT * FROM \"Customers\" AS \"C\",(SELECT \"CustomerID\" FROM \"Orders\") AS \"O\" </span>\n<span class=\"c1\">#   WHERE \"C\".\"CustomerID\" = \"O\".\"CustomerID\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span>\n    <span class=\"s1\">'Customers(C)'</span><span class=\"p\">,</span> <span class=\"c1\"># the first table</span>\n    <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">,</span> <span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"s1\">'O'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'C.CustomerID'</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"s1\">'O.CustomerID'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerID\" IN (SELECT \"CustomerID\" FROM \"Orders\")</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>JOIN</h3>\n<pre><span class=\"c1\"># SELECT \"O\".\"OrderID\",\"C\".\"CustomerName\",\"O\".\"OrderDate\" FROM \"Orders\" AS \"O\" </span>\n<span class=\"c1\">#   INNER JOIN \"Customers\" AS \"C\" ON \"C\".\"CustomerID\"=\"O\".\"CustomerID\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Orders(O)'</span><span class=\"p\">,</span> <span class=\"s1\">'O.OrderID,C.CustomerName,O.OrderDate'</span><span class=\"p\">,</span> <span class=\"n\">join</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'Customers(C)'</span><span class=\"p\">:</span> <span class=\"s1\">'CustomerID'</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># equivalent to</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Orders(O)'</span><span class=\"p\">,</span> <span class=\"s1\">'O.OrderID,C.CustomerName,O.OrderDate'</span><span class=\"p\">,</span> <span class=\"n\">join</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'Customers(C)[&gt;&lt;]'</span><span class=\"p\">:</span> <span class=\"s1\">'CustomerID'</span>\n<span class=\"p\">})</span>\n<span class=\"c1\"># [&gt;] LEFT JOIN, [&lt;] RIGHT JOIN [&lt;&gt;] FULL OUTER JOIN</span>\n\n<span class=\"c1\"># Join on multiple columns (same in different tables)</span>\n<span class=\"c1\"># join = { 'Customers(C)[&gt;&lt;]': ['CustomerID', 'OtherColumn'] }</span>\n\n<span class=\"c1\"># Join on different columns: JOIN \"Customers\" AS \"C\" ON \"C\".\"CustomerID\"=\"O\".\"OtherID\"</span>\n<span class=\"c1\"># join = { 'Customers(C)[&gt;&lt;]': {'CustomerID', 'OtherID'} }</span>\n\n<span class=\"c1\"># You can join multiple tables, use OrderedDict if you want to keep the order.</span>\n</pre>\n<h3>UNION</h3>\n<pre><span class=\"c1\"># SELECT \"CustomerID\" FROM \"Customers\" UNION SELECT \"CustomerID\" FROM \"Orders\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span>\n    <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">),</span>\n    <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># SELECT \"CustomerID\" FROM \"Customers\" UNION ALL SELECT \"CustomerID\" FROM \"Orders\"</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span>\n    <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">),</span>\n    <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">builder</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">,</span> <span class=\"n\">sub</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>Records</h3>\n<p><code>Medoo.select</code> and <code>Medoo.union</code> return a collection of records, which is basically a generator, but you can still get items from it, as it will consume the generate if necessary. The idea is borrowed from <a href=\"https://github.com/kennethreitz/records\" rel=\"nofollow\">Records</a>.</p>\n<pre><span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID(id)'</span><span class=\"p\">)</span>\n<span class=\"n\">record</span>  <span class=\"o\">=</span> <span class=\"n\">records</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span> <span class=\"c1\"># &lt;Record {'id': 1}&gt;</span>\n\n<span class=\"c1\"># equivalent to</span>\n<span class=\"n\">record</span>  <span class=\"o\">=</span> <span class=\"n\">records</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> \n\n<span class=\"c1\"># you may also select other rows: records[1], records[2]</span>\n<span class=\"c1\"># or return all rows: </span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># you can also export the records</span>\n<span class=\"c1\"># this is the courtesy from tablib (https://github.com/kennethreitz/tablib)</span>\n<span class=\"c1\"># check the kwargs with its documentation</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s1\">'csv'</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># You can also apply tablib's other function on the data:</span>\n<span class=\"c1\"># records.tldata.&lt;function&gt;(&lt;args&gt;)</span>\n\n<span class=\"c1\"># to get the value of each field from a record:</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"c1\"># 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">])</span> <span class=\"c1\"># 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"c1\"># 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">as_dict</span><span class=\"p\">())</span> <span class=\"c1\"># {'id': 1}</span>\n</pre>\n<h3>INSERT</h3>\n<pre><span class=\"c1\"># INSERT INTO \"Orders\" (\"OrderID\",\"CustomerID\",\"OrderDate\") VALUES (1,2,'1999-09-09'),(2,8,'2001-10-12')</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"c1\"># table</span>\n    <span class=\"s1\">'OrderID, CustomerID, OrderDate'</span><span class=\"p\">,</span> <span class=\"c1\"># fields</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s1\">'1999-09-09'</span><span class=\"p\">),</span> <span class=\"c1\"># values</span>\n    <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"s1\">'2001-10-12'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># get the last insert row id</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">())</span> <span class=\"c1\"># 5</span>\n\n<span class=\"c1\"># INSERT INTO \"Orders\" (\"OrderID\",\"CustomerID\",\"OrderDate\") VALUES (1,2,'1999-09-09'),(2,8,'2001-10,12')</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"c1\"># table</span>\n    <span class=\"p\">{</span><span class=\"s1\">'OrderID'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'OrderDate'</span><span class=\"p\">:</span> <span class=\"s1\">'1999-09-09'</span><span class=\"p\">},</span> <span class=\"c1\"># fields with the first value</span>\n    <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"s1\">'2001-10-12'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"c1\"># table</span>\n    <span class=\"p\">{</span><span class=\"s1\">'OrderID'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'OrderDate'</span><span class=\"p\">:</span> <span class=\"s1\">'1999-09-09'</span><span class=\"p\">},</span> <span class=\"c1\"># fields with the first value</span>\n    <span class=\"p\">{</span><span class=\"s1\">'OrderID'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s1\">'OrderDate'</span><span class=\"p\">:</span> <span class=\"s1\">'2001-10-12'</span><span class=\"p\">}</span>  <span class=\"c1\"># specify the fields as well</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Or if your values have all the fields</span>\n<span class=\"c1\"># INSERT INTO \"Orders\" VALUES (1,2,'1999-09-09'),(2,8,'2001-10-12')</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"c1\"># table</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s1\">'1999-09-09'</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"s1\">'2001-10-12'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># You may hold the changes until all data inserted</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">commit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">commit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">commit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">commit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n<span class=\"c1\"># This applies with UPDATE and DELETE as well.</span>\n</pre>\n<h3>UPDATE</h3>\n<pre><span class=\"c1\"># UPDATE \"Orders\" SET \"CustomerID\"=10 WHERE \"OrderID\" = 2</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"c1\"># table</span>\n    <span class=\"n\">data</span>  <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span>\n    <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'OrderID'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># UPDATE \"Orders\" SET \"CustomerID\"=\"CustomerID\"+1 WHERE \"OrderID\" = 2</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n    <span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"c1\"># table</span>\n    <span class=\"n\">data</span>  <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID[+]'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'OrderID'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<h3>DELETE</h3>\n<pre><span class=\"c1\"># DELETE FROM \"Orders\" WHERE \"OrderID\" = 2</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'Orders'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'OrderID'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n</pre>\n<h3>Other functions of <code>Medoo</code></h3>\n<pre><span class=\"c1\"># Fetch a single value</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"s1\">'CustomerID'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerName'</span><span class=\"p\">:</span> <span class=\"s1\">'Around the Horn'</span><span class=\"p\">})</span> <span class=\"c1\"># == 1</span>\n\n<span class=\"c1\"># Check if a record exists</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'CustomerID'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">})</span> <span class=\"c1\"># == False</span>\n\n<span class=\"c1\"># Return the last query</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">last</span><span class=\"p\">()</span> <span class=\"c1\"># SELECT * FROM \"Customers\" WHERE \"CustomerID\" = 10</span>\n\n<span class=\"c1\"># Show all the queries bound with `me`</span>\n\n<span class=\"c1\"># You have to passing `logging = True` to `Medoo(..., logging = True)`</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Return the errors</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Submit an SQL query</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">commit</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Extending <code>pymedoo</code></h3>\n<p><code>pymedoo</code> is highly extendable, including the operators in <code>WHERE</code> conditions and <code>UPDATE SET</code> clause, <code>JOIN</code> operators, and some functions such as how to quote the table names, field names and values. All of these have been defined with <code>Dialect</code> class, what you need to do is just extend this class and specify it to the <code>Medoo</code> instance.<br>\nFor example, let's define a case-insensitive <code>LIKE</code> operator using a shortcut <code>~~</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">medoo</span> <span class=\"kn\">import</span> <span class=\"n\">Medoo</span><span class=\"p\">,</span> <span class=\"n\">Dialect</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyDialect</span><span class=\"p\">(</span><span class=\"n\">Dialect</span><span class=\"p\">):</span>\n    <span class=\"n\">OPERATOR_MAP</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'~~'</span><span class=\"p\">:</span> <span class=\"s1\">'ilike'</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">ilike</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"c1\"># support single value</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]</span>\n        \n        <span class=\"n\">terms</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"UPPER(</span><span class=\"si\">{}</span><span class=\"s2\">) LIKE UPPER(</span><span class=\"si\">{}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span> <span class=\"c1\"># quote the value</span>\n            <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">value</span>\n        <span class=\"p\">]</span>\n        <span class=\"c1\"># use OR to connect</span>\n        <span class=\"k\">return</span> <span class=\"s1\">' OR '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">terms</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># tell medoo to use this dialect</span>\n<span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">Medoo</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">dialect</span><span class=\"p\">(</span><span class=\"n\">MyDialect</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SELECT * FROM \"Customers\" WHERE UPPER(\"CustomerName\") LIKE UPPER('%an%')</span>\n<span class=\"n\">records</span> <span class=\"o\">=</span> <span class=\"n\">me</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'Customers'</span><span class=\"p\">,</span> <span class=\"n\">where</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'CustomerName[~~]'</span><span class=\"p\">:</span> <span class=\"s1\">'</span><span class=\"si\">%a</span><span class=\"s1\">n%'</span>\n<span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">records</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s1\">'csv'</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">))</span>\n</pre>\n<table>\n<thead>\n<tr>\n<th>CustomerID</th>\n<th>CustomerName</th>\n<th>ContactName</th>\n<th>Address</th>\n<th>City</th>\n<th>PostalCode</th>\n<th>Country</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>Ana Trujillo Emparedados y helados</td>\n<td>Ana Trujillo</td>\n<td>Avda. de la Constituci\u00f3n 2222</td>\n<td>M\u00e9xico D.F.</td>\n<td>5021</td>\n<td>Mexico</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Antonio Moreno Taquer\u00eda</td>\n<td>Antonio Moreno</td>\n<td>Mataderos 2312</td>\n<td>M\u00e9xico D.F.</td>\n<td>5023</td>\n<td>Mexico</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 5493628, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "f7f46e610d66fb6b581634e4ff473e2e", "sha256": "4dd2b0486cdc0ad34b4b9ceaa2037c9d4b0e34f733667b835c5dfc0e82fed6f1"}, "downloads": -1, "filename": "pymedoo-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f7f46e610d66fb6b581634e4ff473e2e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 19113, "upload_time": "2019-06-12T22:51:33", "upload_time_iso_8601": "2019-06-12T22:51:33.108956Z", "url": "https://files.pythonhosted.org/packages/b1/50/f14dc5b5fde279fe195bb5633bed46b0b8e8e6a1c5f2e2a8cae751d93e7c/pymedoo-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b0e9b91e4e79e28183be9000693e6afa", "sha256": "109c2a4271d7adcc5f6fcbb8859c102b6e07100d88b1520d8ef6b34c634cdb22"}, "downloads": -1, "filename": "pymedoo-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b0e9b91e4e79e28183be9000693e6afa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 20769, "upload_time": "2019-06-12T22:51:35", "upload_time_iso_8601": "2019-06-12T22:51:35.632052Z", "url": "https://files.pythonhosted.org/packages/61/11/9c5c1d956782f00145afe6c2f2a9757d489c64c2779f3b8dba6c99f4eb6b/pymedoo-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "c8b1e554fb6a67c6fa059d2593c104d3", "sha256": "71eb75e6fa4ea4937461435052c464ee065e7246b1a9f6587c94f875805a4a91"}, "downloads": -1, "filename": "pymedoo-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c8b1e554fb6a67c6fa059d2593c104d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 19145, "upload_time": "2019-07-06T00:51:18", "upload_time_iso_8601": "2019-07-06T00:51:18.684018Z", "url": "https://files.pythonhosted.org/packages/c4/fa/7fa215c2a24b7e32e0893b0857cae30389ebb2eaf99bfa17975386d65403/pymedoo-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6718c5f17449349ee216ca681d7cdbd9", "sha256": "db81f042166cd83485e365d8b73690e5724e57112b151993a3fce6a51135e37d"}, "downloads": -1, "filename": "pymedoo-0.0.5.tar.gz", "has_sig": false, "md5_digest": "6718c5f17449349ee216ca681d7cdbd9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 20674, "upload_time": "2019-07-06T00:51:20", "upload_time_iso_8601": "2019-07-06T00:51:20.343085Z", "url": "https://files.pythonhosted.org/packages/37/d7/6a2732e0996ede36d9bccae6f8a3ab6e18fd44530497c468cb199e613ebb/pymedoo-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8b1e554fb6a67c6fa059d2593c104d3", "sha256": "71eb75e6fa4ea4937461435052c464ee065e7246b1a9f6587c94f875805a4a91"}, "downloads": -1, "filename": "pymedoo-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c8b1e554fb6a67c6fa059d2593c104d3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 19145, "upload_time": "2019-07-06T00:51:18", "upload_time_iso_8601": "2019-07-06T00:51:18.684018Z", "url": "https://files.pythonhosted.org/packages/c4/fa/7fa215c2a24b7e32e0893b0857cae30389ebb2eaf99bfa17975386d65403/pymedoo-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6718c5f17449349ee216ca681d7cdbd9", "sha256": "db81f042166cd83485e365d8b73690e5724e57112b151993a3fce6a51135e37d"}, "downloads": -1, "filename": "pymedoo-0.0.5.tar.gz", "has_sig": false, "md5_digest": "6718c5f17449349ee216ca681d7cdbd9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 20674, "upload_time": "2019-07-06T00:51:20", "upload_time_iso_8601": "2019-07-06T00:51:20.343085Z", "url": "https://files.pythonhosted.org/packages/37/d7/6a2732e0996ede36d9bccae6f8a3ab6e18fd44530497c468cb199e613ebb/pymedoo-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:19 2020"}