{"info": {"author": "Aur\u00e9lien G\u00e2teau", "author_email": "mail@agateau.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "[![Build Status](https://travis-ci.org/agateau/qpropgen.svg?branch=master)](https://travis-ci.org/agateau/qpropgen)\n\n# qpropgen\n\nA tool to generate QML-friendly QObject-based C++ classes from class definition\nfiles.\n\nInstall it with:\n\n    pip install qpropgen\n\n## Quick Intro\n\nDeclaring properties in a QObject class requires writing a lot of boilerplate\ncode. qpropgen goal is to write this boilerplate for you.\n\nSuppose we want to create a `Person` class, with `firstName`, `lastName` and\n`birthDate` properties.\n\nFirst we create a class definition file named `person.yaml` with the following\ncontent:\n\n```yaml\nclass: Person\nproperties:\n- name: firstName\n  type: QString\n- name: lastName\n  type: QString\n- name: birthDate\n  type: QDateTime\n```\n\nNext, we generate its header and implementation with `qpropgen person.yaml`.\nThis produces two files: `person.h` and `person.cpp` (The filenames are based\non the filename of the class definition).\n\nNote: in practice, you probably want to inherit from the generated classes to\nimplement other aspects of the class to create and/or to override getters and\nsetters.\n\n## Syntax of class definition files\n\nA class definition file **must** contain the following fields:\n\n- `class`: the name of the class to generate.\n\n- `properties`: the list of its properties (see below).\n\nIt **may** also contain the following fields:\n\n- `includes`: a list of files to include in the header.\n\n- `baseClass`: name of the class to inherit from. Defaults to `QObject`.\n\n- `defaults`: default values for some property attributes (see below).\n\n### The `properties` field\n\n`properties` is an array of property definitions.\n\nA property definition **must** contain the following fields:\n\n- `type`\n- `name`\n\nIt **may** contain the following fields:\n\n- `access`: Can be `private` or `protected`. Defines the access modifier for\n  the generated member variables. Defaults to `private`.\n\n- `mutability`: One of `constant`, `readonly`, `readwrite`. Defaults to\n  `readwrite`.\n\n- `argType`: The type of the setter argument. If not set qpropgen uses const\n  references for types which are not pointers and not known scalars (int, bool,\n  qreal).\n\n- `varName`: Name of the variable backing the property. Defaults to `m<Name>`,\n  so the variable of the `foo` property will be `mFoo`.\n\n- `setterName`: Name of the setter. Defaults to `set<Name>`, so the setter of\n  the `foo` property will be `setFoo`.\n\n- `impl`: One of `plain` (getter and setter), `virtual` (virtual getter and\n  setter) or `pure` (virtual pure getter and setter).\n\n- `value`: The default value of the property.\n\n### The `defaults` field\n\nAdding a field to the `defaults` object lets you define default values for all\nproperties.\n\nFor example you can define that all properties are of type `qreal` by default\nwith:\n\n```yaml\ndefaults:\n  type: qreal\n```\n\nOf course fields which require a unique value, like `name`, should not have a\ndefault.\n\n## Build system integration\n\nThe `cmake/qpropgen.cmake` can be included in your project to integrate\nqpropgen. It takes care of finding the `qpropgen` executable and provides a\n`qpropgen()` CMake function.\n\nThis CMake function lets you define .yaml files to process. For example:\n\n\n```cmake\nset(prj_SRCS main.cpp)\nqpropgen(prj_QPROPGEN foo.yaml bar.yaml)\nadd_executable(prj ${prj_SRCS} ${prj_QPROPGEN})\n```\n\n## Examples\n\nThe `examples/` directory contains examples of the various settings. The\nproduced executable does nothing, but you can look in the build directory at\nthe .h and .cpp files produced by qpropgen during the build.\n\n## Tests\n\nThe project currently lacks real unit tests, so the examples serve as tests:\nthe `./tests.sh` script can be run to build the examples.\n\n## Trivia\n\nI started this project when I was working on the [SFXR-Qt][] sound generator (a\nQtQuick port of [SFXR][]), and was finding it too tedious to declare all the\nproperties necessary to represent sounds :)\n\n[SFXR-Qt]: https://github.com/agateau/sfxr-qt\n[SFXR]: http://www.drpetter.se/project_sfxr.html", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/agateau/qpropgen", "keywords": "qt,qml,commandline,qobject,generator", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "qpropgen", "package_url": "https://pypi.org/project/qpropgen/", "platform": "any", "project_url": "https://pypi.org/project/qpropgen/", "project_urls": {"Homepage": "https://github.com/agateau/qpropgen"}, "release_url": "https://pypi.org/project/qpropgen/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Generate QML-friendly QObject-based C++ classes from class definition files", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/agateau/qpropgen\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d65ee0ed50695e243bb94c8fbb8682553464dc0/68747470733a2f2f7472617669732d63692e6f72672f616761746561752f7170726f7067656e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>qpropgen</h1>\n<p>A tool to generate QML-friendly QObject-based C++ classes from class definition\nfiles.</p>\n<p>Install it with:</p>\n<pre><code>pip install qpropgen\n</code></pre>\n<h2>Quick Intro</h2>\n<p>Declaring properties in a QObject class requires writing a lot of boilerplate\ncode. qpropgen goal is to write this boilerplate for you.</p>\n<p>Suppose we want to create a <code>Person</code> class, with <code>firstName</code>, <code>lastName</code> and\n<code>birthDate</code> properties.</p>\n<p>First we create a class definition file named <code>person.yaml</code> with the following\ncontent:</p>\n<pre><span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Person</span>\n<span class=\"nt\">properties</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">firstName</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">QString</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">lastName</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">QString</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">birthDate</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">QDateTime</span>\n</pre>\n<p>Next, we generate its header and implementation with <code>qpropgen person.yaml</code>.\nThis produces two files: <code>person.h</code> and <code>person.cpp</code> (The filenames are based\non the filename of the class definition).</p>\n<p>Note: in practice, you probably want to inherit from the generated classes to\nimplement other aspects of the class to create and/or to override getters and\nsetters.</p>\n<h2>Syntax of class definition files</h2>\n<p>A class definition file <strong>must</strong> contain the following fields:</p>\n<ul>\n<li>\n<p><code>class</code>: the name of the class to generate.</p>\n</li>\n<li>\n<p><code>properties</code>: the list of its properties (see below).</p>\n</li>\n</ul>\n<p>It <strong>may</strong> also contain the following fields:</p>\n<ul>\n<li>\n<p><code>includes</code>: a list of files to include in the header.</p>\n</li>\n<li>\n<p><code>baseClass</code>: name of the class to inherit from. Defaults to <code>QObject</code>.</p>\n</li>\n<li>\n<p><code>defaults</code>: default values for some property attributes (see below).</p>\n</li>\n</ul>\n<h3>The <code>properties</code> field</h3>\n<p><code>properties</code> is an array of property definitions.</p>\n<p>A property definition <strong>must</strong> contain the following fields:</p>\n<ul>\n<li><code>type</code></li>\n<li><code>name</code></li>\n</ul>\n<p>It <strong>may</strong> contain the following fields:</p>\n<ul>\n<li>\n<p><code>access</code>: Can be <code>private</code> or <code>protected</code>. Defines the access modifier for\nthe generated member variables. Defaults to <code>private</code>.</p>\n</li>\n<li>\n<p><code>mutability</code>: One of <code>constant</code>, <code>readonly</code>, <code>readwrite</code>. Defaults to\n<code>readwrite</code>.</p>\n</li>\n<li>\n<p><code>argType</code>: The type of the setter argument. If not set qpropgen uses const\nreferences for types which are not pointers and not known scalars (int, bool,\nqreal).</p>\n</li>\n<li>\n<p><code>varName</code>: Name of the variable backing the property. Defaults to <code>m&lt;Name&gt;</code>,\nso the variable of the <code>foo</code> property will be <code>mFoo</code>.</p>\n</li>\n<li>\n<p><code>setterName</code>: Name of the setter. Defaults to <code>set&lt;Name&gt;</code>, so the setter of\nthe <code>foo</code> property will be <code>setFoo</code>.</p>\n</li>\n<li>\n<p><code>impl</code>: One of <code>plain</code> (getter and setter), <code>virtual</code> (virtual getter and\nsetter) or <code>pure</code> (virtual pure getter and setter).</p>\n</li>\n<li>\n<p><code>value</code>: The default value of the property.</p>\n</li>\n</ul>\n<h3>The <code>defaults</code> field</h3>\n<p>Adding a field to the <code>defaults</code> object lets you define default values for all\nproperties.</p>\n<p>For example you can define that all properties are of type <code>qreal</code> by default\nwith:</p>\n<pre><span class=\"nt\">defaults</span><span class=\"p\">:</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">qreal</span>\n</pre>\n<p>Of course fields which require a unique value, like <code>name</code>, should not have a\ndefault.</p>\n<h2>Build system integration</h2>\n<p>The <code>cmake/qpropgen.cmake</code> can be included in your project to integrate\nqpropgen. It takes care of finding the <code>qpropgen</code> executable and provides a\n<code>qpropgen()</code> CMake function.</p>\n<p>This CMake function lets you define .yaml files to process. For example:</p>\n<pre><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"s\">prj_SRCS</span> <span class=\"s\">main.cpp</span><span class=\"p\">)</span>\n<span class=\"nb\">qpropgen</span><span class=\"p\">(</span><span class=\"s\">prj_QPROPGEN</span> <span class=\"s\">foo.yaml</span> <span class=\"s\">bar.yaml</span><span class=\"p\">)</span>\n<span class=\"nb\">add_executable</span><span class=\"p\">(</span><span class=\"s\">prj</span> <span class=\"o\">${</span><span class=\"nv\">prj_SRCS</span><span class=\"o\">}</span> <span class=\"o\">${</span><span class=\"nv\">prj_QPROPGEN</span><span class=\"o\">}</span><span class=\"p\">)</span>\n</pre>\n<h2>Examples</h2>\n<p>The <code>examples/</code> directory contains examples of the various settings. The\nproduced executable does nothing, but you can look in the build directory at\nthe .h and .cpp files produced by qpropgen during the build.</p>\n<h2>Tests</h2>\n<p>The project currently lacks real unit tests, so the examples serve as tests:\nthe <code>./tests.sh</code> script can be run to build the examples.</p>\n<h2>Trivia</h2>\n<p>I started this project when I was working on the <a href=\"https://github.com/agateau/sfxr-qt\" rel=\"nofollow\">SFXR-Qt</a> sound generator (a\nQtQuick port of <a href=\"http://www.drpetter.se/project_sfxr.html\" rel=\"nofollow\">SFXR</a>), and was finding it too tedious to declare all the\nproperties necessary to represent sounds :)</p>\n\n          </div>"}, "last_serial": 4665441, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a8ada4fd4396961fb8ad87d1f424ad6d", "sha256": "c51512e352f7caeccf26e2e50cb34a67af35294d7a9fd3e80de93e6fc2319e22"}, "downloads": -1, "filename": "qpropgen-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a8ada4fd4396961fb8ad87d1f424ad6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7059, "upload_time": "2018-12-08T19:06:00", "upload_time_iso_8601": "2018-12-08T19:06:00.947011Z", "url": "https://files.pythonhosted.org/packages/aa/80/607bab06df5e63ee88ddd1e2250a8409e2f3b1a4e5bc1c09a19e8d5c08d0/qpropgen-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "f26128b4787077931da424bb2c1553d1", "sha256": "52fa07fadecabe20a74e4cf9c1f37a1188d32b7bdfe56f3c903d5fb958d1de9f"}, "downloads": -1, "filename": "qpropgen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "f26128b4787077931da424bb2c1553d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7488, "upload_time": "2018-12-08T19:23:11", "upload_time_iso_8601": "2018-12-08T19:23:11.726959Z", "url": "https://files.pythonhosted.org/packages/f1/3f/c31ffca007e8f84f6200d9381db6965a458d7949f1883c374cbb2bdc59f3/qpropgen-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "465653457aae834df58eebd1762d03d0", "sha256": "d7745d6d25d428fde373ea3b1c9f8436e380c9bc6b9ffde3ce02a037a55ba4f6"}, "downloads": -1, "filename": "qpropgen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "465653457aae834df58eebd1762d03d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7802, "upload_time": "2019-01-06T12:11:59", "upload_time_iso_8601": "2019-01-06T12:11:59.711898Z", "url": "https://files.pythonhosted.org/packages/bd/e6/e8ea64dc71720c616e7394133181699710a60867d9a78ebb95fa4481c7de/qpropgen-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "465653457aae834df58eebd1762d03d0", "sha256": "d7745d6d25d428fde373ea3b1c9f8436e380c9bc6b9ffde3ce02a037a55ba4f6"}, "downloads": -1, "filename": "qpropgen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "465653457aae834df58eebd1762d03d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7802, "upload_time": "2019-01-06T12:11:59", "upload_time_iso_8601": "2019-01-06T12:11:59.711898Z", "url": "https://files.pythonhosted.org/packages/bd/e6/e8ea64dc71720c616e7394133181699710a60867d9a78ebb95fa4481c7de/qpropgen-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:19 2020"}