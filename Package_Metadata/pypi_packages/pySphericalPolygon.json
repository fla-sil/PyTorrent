{"info": {"author": "Omry V", "author_email": "omryv@post.bgu.ac.il", "bugtrack_url": null, "classifiers": [], "description": "pySphericalPolygon\r\n==================\r\n\r\n\r\nPerform point in polygon operations \r\n\r\nOn github: https://github.com/omrivolk/pySphericalPolygon\r\n\r\nInstall\r\n-------\r\n\r\n.. code-block:: python\r\n\r\n  pip install pySphericalPolygon\r\n  \r\nUsage\r\n-----\r\n\r\n.. code-block:: python\r\n\r\n  import pySphericalPolygon as pysp\r\n\r\n\r\nCreate a spherical polygon with vertices [[tetah_1,phi_1],[tetah_2,phi_2]...].\r\n\r\nFor geographical purpuses tetha is latitude and phi is longtitude.\r\n\r\n.. code-block:: python\r\n\r\n  sp = pysp.SpericalPolygon([[0,0],\r\n                           [80,30],\r\n                           [10,60]])\r\n\r\nCheck if a point is inside\r\n\r\n.. code-block:: python\r\n\r\n\tprint sp.contains_points([[30,30]])\r\n\t[ True]\r\n\r\n\r\nCheck many points at once\r\n\r\n.. code-block:: python\r\n\r\n\tprint sp.contains_points([[30,30],[-30,30],[-90,40]])\r\n\t[ True False False]\r\n\r\n\r\nBoth vertices and/or points may be specified in radians\r\n\r\n.. code-block:: python\r\n\r\n\tprint sp.contains_points([[0.52359878,0.52359878],[-0.52359878,0.52359878],[-1.57079633,0.6981317]],radians=True)\r\n\t[ True False False]\r\n\t\r\n\r\nConvention deafult is geographic:\r\n\r\n\r\n\t(-\u03c0/2 rad) -90\u00b0  \u2264 tetha \u2264 90\u00b0  (\u03c0/2 rad)\r\n\r\n\t(-\u03c0   rad) -180\u00b0 \u2264  phi  \u2264 180\u00b0 (\u03c0   rad)\r\n\r\nBut mathematic convetion is supprted too:\r\n\r\n\r\n\t(0 rad) 0\u00b0 \u2264 tetha \u2264 180\u00b0 (\u03c0 rad)\r\n\r\n\t(0 rad) 0\u00b0 \u2264  phi  \u2264 360\u00b0 (2\u03c0 rad)\r\n\r\n.. code-block:: python\r\n\t\r\n\t  sp = pysp.SpericalPolygon([[90,0],\r\n                           [10,30],\r\n                           [80,60]],convention='math')", "description_content_type": null, "docs_url": "https://pythonhosted.org/pySphericalPolygon/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/omrivolk/pySphericalPolygon", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pySphericalPolygon", "package_url": "https://pypi.org/project/pySphericalPolygon/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pySphericalPolygon/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/omrivolk/pySphericalPolygon"}, "release_url": "https://pypi.org/project/pySphericalPolygon/0.1.9/", "requires_dist": null, "requires_python": null, "summary": "preform point in spherical polygon operations", "version": "0.1.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Perform point in polygon operations</p>\n<p>On github: <a href=\"https://github.com/omrivolk/pySphericalPolygon\" rel=\"nofollow\">https://github.com/omrivolk/pySphericalPolygon</a></p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">pySphericalPolygon</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pySphericalPolygon</span> <span class=\"k\">as</span> <span class=\"nn\">pysp</span>\n</pre>\n<p>Create a spherical polygon with vertices [[tetah_1,phi_1],[tetah_2,phi_2]\u2026].</p>\n<p>For geographical purpuses tetha is latitude and phi is longtitude.</p>\n<pre><span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">pysp</span><span class=\"o\">.</span><span class=\"n\">SpericalPolygon</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                         <span class=\"p\">[</span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],</span>\n                         <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">60</span><span class=\"p\">]])</span>\n</pre>\n<p>Check if a point is inside</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">contains_points</span><span class=\"p\">([[</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">]])</span>\n<span class=\"p\">[</span> <span class=\"kc\">True</span><span class=\"p\">]</span>\n</pre>\n<p>Check many points at once</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">contains_points</span><span class=\"p\">([[</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],[</span><span class=\"o\">-</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],[</span><span class=\"o\">-</span><span class=\"mi\">90</span><span class=\"p\">,</span><span class=\"mi\">40</span><span class=\"p\">]])</span>\n<span class=\"p\">[</span> <span class=\"kc\">True</span> <span class=\"kc\">False</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n</pre>\n<p>Both vertices and/or points may be specified in radians</p>\n<pre><span class=\"nb\">print</span> <span class=\"n\">sp</span><span class=\"o\">.</span><span class=\"n\">contains_points</span><span class=\"p\">([[</span><span class=\"mf\">0.52359878</span><span class=\"p\">,</span><span class=\"mf\">0.52359878</span><span class=\"p\">],[</span><span class=\"o\">-</span><span class=\"mf\">0.52359878</span><span class=\"p\">,</span><span class=\"mf\">0.52359878</span><span class=\"p\">],[</span><span class=\"o\">-</span><span class=\"mf\">1.57079633</span><span class=\"p\">,</span><span class=\"mf\">0.6981317</span><span class=\"p\">]],</span><span class=\"n\">radians</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">[</span> <span class=\"kc\">True</span> <span class=\"kc\">False</span> <span class=\"kc\">False</span><span class=\"p\">]</span>\n</pre>\n<p>Convention deafult is geographic:</p>\n<blockquote>\n<p>(-\u03c0/2 rad) -90\u00b0  \u2264 tetha \u2264 90\u00b0  (\u03c0/2 rad)</p>\n<p>(-\u03c0   rad) -180\u00b0 \u2264  phi  \u2264 180\u00b0 (\u03c0   rad)</p>\n</blockquote>\n<p>But mathematic convetion is supprted too:</p>\n<blockquote>\n<p>(0 rad) 0\u00b0 \u2264 tetha \u2264 180\u00b0 (\u03c0 rad)</p>\n<p>(0 rad) 0\u00b0 \u2264  phi  \u2264 360\u00b0 (2\u03c0 rad)</p>\n</blockquote>\n<pre><span class=\"n\">sp</span> <span class=\"o\">=</span> <span class=\"n\">pysp</span><span class=\"o\">.</span><span class=\"n\">SpericalPolygon</span><span class=\"p\">([[</span><span class=\"mi\">90</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],</span>\n                 <span class=\"p\">[</span><span class=\"mi\">80</span><span class=\"p\">,</span><span class=\"mi\">60</span><span class=\"p\">]],</span><span class=\"n\">convention</span><span class=\"o\">=</span><span class=\"s1\">'math'</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2451940, "releases": {"0.1.9": [{"comment_text": "", "digests": {"md5": "da52f1f64ee85007644ec3db1d0f95c5", "sha256": "2fa30d058e40a91f435cfa200a32948e5d17e97a270ea3e4ff9d621e4f0ffbe3"}, "downloads": -1, "filename": "pySphericalPolygon-0.1.9.tar.gz", "has_sig": false, "md5_digest": "da52f1f64ee85007644ec3db1d0f95c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4522, "upload_time": "2016-11-09T22:46:12", "upload_time_iso_8601": "2016-11-09T22:46:12.921530Z", "url": "https://files.pythonhosted.org/packages/e9/5a/45fe8ac5f926765d86a2bfd05b0d9f6eed8c10ec48dee07a5bd55c45d3e6/pySphericalPolygon-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da52f1f64ee85007644ec3db1d0f95c5", "sha256": "2fa30d058e40a91f435cfa200a32948e5d17e97a270ea3e4ff9d621e4f0ffbe3"}, "downloads": -1, "filename": "pySphericalPolygon-0.1.9.tar.gz", "has_sig": false, "md5_digest": "da52f1f64ee85007644ec3db1d0f95c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4522, "upload_time": "2016-11-09T22:46:12", "upload_time_iso_8601": "2016-11-09T22:46:12.921530Z", "url": "https://files.pythonhosted.org/packages/e9/5a/45fe8ac5f926765d86a2bfd05b0d9f6eed8c10ec48dee07a5bd55c45d3e6/pySphericalPolygon-0.1.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:14 2020"}