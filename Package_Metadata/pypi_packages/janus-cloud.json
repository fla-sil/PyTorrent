{"info": {"author": "OpenSight", "author_email": "public@opensight.cn", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Pyramid", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU Affero General Public License v3", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Topic :: System :: Monitoring", "Topic :: System :: Networking :: Monitoring", "Topic :: System :: Systems Administration"], "description": "Janus-cloud\n=============\n\nJanus-cloud is an JANUS API proxy to construct the Janus WebRTC server cluster, which is based on Python3 so that it can be deployed on any platform. A Back-to-Back API proxy would be deployed between the client and the original Janus servers. In one hand, the WebRTC client communicates with Janus-cloud proxy through Janus' original  API, just like with the real Janus server. In the other hand, Janus-cloud proxy would forwards the requests to the back-end Janus server in the cluster on behave of the client. Janus-cloud proxy is only responsible for the API (signalling) processing, while media streams is still left to Janus server to relay, so that the clients would establish the PeerConnctions with the back-end Janus server directly, without Janus-cloud involvement. In this case, Janus-cloud proxy can be considered as a WebRTC signal server, while the original Janus server would be downgraded to work as a WebRTC media server.\n\n1 Why Janus-cloud\n-----------------\n\nJanus is an excellent WebRTC server, simple and well-structured. Its pluggable design and sophisticated API is impressive and amazing. But it also comes with some disadvantage.\nFirst, Janus is design to be a standalone server, which cannot be scale to support the huge RTC workload. But in the cloud-based environment, scalability is essential. With the help of Janus-cloud, engineers can easily build a large and scalable cluster system of WebRTC server. \nSecond, Janus processes the WebRTC signalling, as well as the media data. But in the real communication world, signalling and media are usually divided into two plane, so that more flexibility can be provided. Janus-cloud fulfills this requirement by handling the signalling only and leaving media to Janus-server. Janus-cloud is developed by Python3 language which is more suitable to deal with the signalling, in the other hand, C language, which is used by Janus server, is more suitable to transmit media data in an efficient way . \n\n\n2 Features\n-----------------\n\n- Scalable, Janus media servers can be added/removed to/from the cluster dynamically\n- Support Janus media service self-register, service monitor, circuit breaker\n- Pluggable, support the new features through developing the new plugin\n- the Same API with the Janus server, which is compatible with the original client of the Janus server\n\n\n3 Components\n-------------------\n\nJanus-cloud has two main components, Janus-proxy and Janus-sentinel.\n\n### Janus-proxy\n\nJanus-proxy is responsible for signal handling, which communicates with the WebRTC client and relay the signal from client to the backend Janus servers. It conceals the detail of the backend Janus server cluster and output the same interface with the original Janus server. Janus-proxy is usually running on a standalone machine which is between the WebRTC client and the backend Janus servers. The WebRTC client interact with Janus-proxy for signal, but transfer to/from the real Janus Server for media. Janus-proxy has the following features/limitation:\n\n- Only provide the WebSocket(s) API, not provide RESTful, RabbitMQ, MQTT, Nanomsg and UnixSockets like Janus\n- Communicate with the backend Janus server by WebSocket\n- Pluggable. Its business functionality is implemented by the various plugins\n- Support RESTful admin interface\n- Scalable. The backend Janus server can be added/removed to/from Janus-proxy dynamically\n- Support multi algorithm to choose which backend server to relay signal\n\n### Janus-sentinel\n\nJanus-sentinel is responsible to care for the Janus server, normally, it runs at the same (virtual) machine with the Janus server. it has the following capabilities:\n\n- Supervise the process of the Janus server, and keep it running\n- Monitor the status of the Janus server, and report it to Janus-proxy through HTTP\n- Calculate the workload of the Janus server\n- Support post the status/workload statistic to multi HTTP URL\n\nNote: the process of the Janus server can be started and maintained by the other system tools or system administrator manul, instead of Janus-sentinel. In this case, Janus-sentinel is only responsible for monitoring Janus server's status by its WebSocket API. But this approach is not a good idea.\n\n4 Plugins of Janus-proxy\n------------------------------\n\nJanus-proxy is composed of many plugins, and the business logic of Janus-proxy is implemented by these plugins. The folloing plugins are provided within Janus-proxy by now. \n\n### echotest\n\nThis is a trivial EchoTest plugin which is only used for test and show plugin interface of Janus-proxy. It provide devlopers a scketch for plugin\n\n### videocall\n\nThis is a simple video call plugin which allow two WebRTC peer communicate with each other through the medium Janus server. It achieves the same funciton and outputs the same APIs with the videocall plugin of Janus server, as well as it can distribute the workload among the backend Janus servers. \nMoreover, Janus-proxy also can be scaled out for videocall plugin to handle much more video calls. Different WebRTC peers may be assigned to different Janus-proxies which is able to communicates with each other through admin interface.\n\n### p2pcall\n\nThis is an other video call plugin, very similar to the videocall plugin, except that two WebRTC peer communicate with each other in p2p mode. It outputs same APIs like the videocall plugin, and also make Janux-proxy be able to scaled out to handle more video call. Howerver no backend Janus servers is need to handle the media stream, because the WebRTC peers transmit the media data with each other directly.\n\n\n### videoroom\n\n\nThis is a plugin implementing a videoconferencing SFU, just like videoroom plugin of the Janus server. It tries to keep almost the same API with the videoroom plugin of Janus server, and scale it out by distributing different publishers to different backend Janus server, so that Janus-proxy can support more publishers in one videoconferencing room than single Janus server. Constrast to the vidroroom plugin of Janus server, there are some limitations below on this plugin to simplify the code. \n\n- rtp_forward not support\n- audiolevel_event not support\n- subscriber switch not support\n\n5 Topology\n-----------------\nThe structure of Janus-cloud would be similar with the below topology. \n\n\n```\n                                                                               +-----------------------------+\n                                                                               |Virtual Machine 2            |\n                                                                               |      +----------+           |\n                                                                          +---------->+  Janus   |           |\n                                                                          |    |      +-----+----+           |\n                                                                          |    |            |                |\n                                     +------------------------------+     |    |      +-----+-------------+  |\n                                     |Virtual Machine 1             |     |    |      |  Janus-sentinel   |  |\n+-----------------------+            |                              |     |    |      +-------------------+  |\n| Web Browser           |  WebSocket |      +----------------+      |     |    +-----------------------------+\n| (e.g. Chrome/Firefox) +------------------>+  Janus-proxy   +------------+\n+-----------------------+            |      +----------------+      |     |\n                                     |                              |     |    +-----------------------------+\n                                     +------------------------------+     |    |Virtual Machine 3            |\n                                                                          |    |     +---------+             |\n                                                                          +--------->+ Janus   |             |\n                                                                               |     +-----+---+             |\n                                                                               |           |                 |\n                                                                               |     +-----+------------+    |\n                                                                               |     | Janus-sentinel   |    |\n                                                                               |     +------------------+    |\n                                                                               +-----------------------------+\n\n\n```\nJanus-proxy is often deployed on a standalone machine between WebRTC client(like Browser) and Janus server. All signal  from WebRTC client would be received by Janus-proxy first , then relayed to one of the backend Janus servers.\n\nJanus-sentinel is often deployed along with the Janus server on the same machine. Janus-sentinel keep Janus process running and moniter its status, then report to Janus-proxy at intervals.\n\n\n6 Installation\n----------------\n\nBefore installation, the following requrements must be satisfied.\n\n- Python >= 3.5\n- pip\n- setuptools \n\n\nJanus-cloud supports python 3.5 and up. It's strongly recommanded to install Janus-cloud in a python virtual environment, like \"venv\". \n\n### Install from PyPi \n\nTo install Janus-cloud from PyPi, \n\n``` {.sourceCode .bash}\n$ pip install janus-cloud\n```\n\n### Install from source\n\nTo install Janus-cloud from project source\n\n``` {.sourceCode .bash}\n$ pip install <project_root>\n```\n\nWhere <project_root> is the root directory of project source, which contians the setup.py file\n\nFor developer, who want to debug the Janus-cloud, and install it for develop mode:\n\n``` {.sourceCode .bash}\n$ pip install -e <project_root>\n```\n\n7 Configure and Start\n---------------------------\n\nSome resource files, like sample configuration(with explanations), html test scripts, and etc, are shipped within the project source. \nAfter installation, these resource would be installed under ** <sys.prefix>/opt/janus-cloud ** where <sys.prefix> is the root diriectory of your filesystem. or the the root directory of virtual environment if install in a virtual environment. \n\n### janus-sentinel\n\nEdit the configuration file of Janus-sentinel, then type the following commands to start.\n\n``` {.sourceCode .bash}\n$ janus-sentinel <janus-sentinel config file path>\n```\n\n### janus-proxy\n\nEdit the configuration file of Janus-proxy, then type the following commands to start.\n\n``` {.sourceCode .bash}\n$ janus-proxy <janus-proxy config file path>\n```\n\n8 Requirements for the backend Janus server\n-----------------------------------------------------------\n\nBy now, Janus-proxy / Janus-sentinel only suport corresponding with the backend Janus server by WebSocket, not support other transport. And there is no secret/token mechanism applied in the communication between them, because the API of the Janus server is only used by Janus-proxy / Janus-sentinel internel, and not directly output to outside.\n\nIn summary, there are some requirements below on the configuration of the backend Janus sever when deploying with Janux-cloud:\n\n* WebSocket transport must be enabled to correspond with Janus-proxy/Janus-sentinel\n* api_secret and token_auth feature must be disabled \n* admin_secret feature must be disabled\n\n\n9 Directory structure of project source\n---------------------------------\n\nKeep It Simple, and Stupid\n\n```\njanus-cloud/\n    |\n    +----conf/            Sample configuration files\n    |\n    +----html/            Html & js page code for test client\n    |\n    +----januscloud/      Pythond code package of janus-cloud\n    |\n    +----CHANGES.md       change log for each release\n    |\n    +----README.md        This readme\n    |\n    +----LICENSE          AGPL 3.0 license \n    |\n    +----MANIFEST.in      Manifest file describing the static resource file\n    |\n    +----setup.py         Python setup script\n```\n\nChangelog\n==============\n\nAll notable changes to this project will be documented in this file.\n\n\n [v0.1.0]  - 2020-03-29\n---------------------------------\n\n* initial version released\n* janus-proxy and janus-sentinel are finished\n* echotest, videocall, p2pcall, videoroom plugins of janus-proxy are ready\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OpenSight/janus-cloud", "keywords": "Janus cloud WebRTC", "license": "AGPLv3", "maintainer": "", "maintainer_email": "", "name": "janus-cloud", "package_url": "https://pypi.org/project/janus-cloud/", "platform": "", "project_url": "https://pypi.org/project/janus-cloud/", "project_urls": {"Homepage": "https://github.com/OpenSight/janus-cloud"}, "release_url": "https://pypi.org/project/janus-cloud/0.1.0/", "requires_dist": ["gevent (==1.4.0)", "ws4py (==0.5.1)", "PyYAML (==5.1)", "pyramid (==1.10.4)", "requests (>=2.18.4)", "python-daemon (==2.2.3)"], "requires_python": "", "summary": "Janus-cloud is an JANUS API proxy to implement the Janus WebRTC server cluster", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Janus-cloud</h1>\n<p>Janus-cloud is an JANUS API proxy to construct the Janus WebRTC server cluster, which is based on Python3 so that it can be deployed on any platform. A Back-to-Back API proxy would be deployed between the client and the original Janus servers. In one hand, the WebRTC client communicates with Janus-cloud proxy through Janus' original  API, just like with the real Janus server. In the other hand, Janus-cloud proxy would forwards the requests to the back-end Janus server in the cluster on behave of the client. Janus-cloud proxy is only responsible for the API (signalling) processing, while media streams is still left to Janus server to relay, so that the clients would establish the PeerConnctions with the back-end Janus server directly, without Janus-cloud involvement. In this case, Janus-cloud proxy can be considered as a WebRTC signal server, while the original Janus server would be downgraded to work as a WebRTC media server.</p>\n<h2>1 Why Janus-cloud</h2>\n<p>Janus is an excellent WebRTC server, simple and well-structured. Its pluggable design and sophisticated API is impressive and amazing. But it also comes with some disadvantage.\nFirst, Janus is design to be a standalone server, which cannot be scale to support the huge RTC workload. But in the cloud-based environment, scalability is essential. With the help of Janus-cloud, engineers can easily build a large and scalable cluster system of WebRTC server.\nSecond, Janus processes the WebRTC signalling, as well as the media data. But in the real communication world, signalling and media are usually divided into two plane, so that more flexibility can be provided. Janus-cloud fulfills this requirement by handling the signalling only and leaving media to Janus-server. Janus-cloud is developed by Python3 language which is more suitable to deal with the signalling, in the other hand, C language, which is used by Janus server, is more suitable to transmit media data in an efficient way .</p>\n<h2>2 Features</h2>\n<ul>\n<li>Scalable, Janus media servers can be added/removed to/from the cluster dynamically</li>\n<li>Support Janus media service self-register, service monitor, circuit breaker</li>\n<li>Pluggable, support the new features through developing the new plugin</li>\n<li>the Same API with the Janus server, which is compatible with the original client of the Janus server</li>\n</ul>\n<h2>3 Components</h2>\n<p>Janus-cloud has two main components, Janus-proxy and Janus-sentinel.</p>\n<h3>Janus-proxy</h3>\n<p>Janus-proxy is responsible for signal handling, which communicates with the WebRTC client and relay the signal from client to the backend Janus servers. It conceals the detail of the backend Janus server cluster and output the same interface with the original Janus server. Janus-proxy is usually running on a standalone machine which is between the WebRTC client and the backend Janus servers. The WebRTC client interact with Janus-proxy for signal, but transfer to/from the real Janus Server for media. Janus-proxy has the following features/limitation:</p>\n<ul>\n<li>Only provide the WebSocket(s) API, not provide RESTful, RabbitMQ, MQTT, Nanomsg and UnixSockets like Janus</li>\n<li>Communicate with the backend Janus server by WebSocket</li>\n<li>Pluggable. Its business functionality is implemented by the various plugins</li>\n<li>Support RESTful admin interface</li>\n<li>Scalable. The backend Janus server can be added/removed to/from Janus-proxy dynamically</li>\n<li>Support multi algorithm to choose which backend server to relay signal</li>\n</ul>\n<h3>Janus-sentinel</h3>\n<p>Janus-sentinel is responsible to care for the Janus server, normally, it runs at the same (virtual) machine with the Janus server. it has the following capabilities:</p>\n<ul>\n<li>Supervise the process of the Janus server, and keep it running</li>\n<li>Monitor the status of the Janus server, and report it to Janus-proxy through HTTP</li>\n<li>Calculate the workload of the Janus server</li>\n<li>Support post the status/workload statistic to multi HTTP URL</li>\n</ul>\n<p>Note: the process of the Janus server can be started and maintained by the other system tools or system administrator manul, instead of Janus-sentinel. In this case, Janus-sentinel is only responsible for monitoring Janus server's status by its WebSocket API. But this approach is not a good idea.</p>\n<h2>4 Plugins of Janus-proxy</h2>\n<p>Janus-proxy is composed of many plugins, and the business logic of Janus-proxy is implemented by these plugins. The folloing plugins are provided within Janus-proxy by now.</p>\n<h3>echotest</h3>\n<p>This is a trivial EchoTest plugin which is only used for test and show plugin interface of Janus-proxy. It provide devlopers a scketch for plugin</p>\n<h3>videocall</h3>\n<p>This is a simple video call plugin which allow two WebRTC peer communicate with each other through the medium Janus server. It achieves the same funciton and outputs the same APIs with the videocall plugin of Janus server, as well as it can distribute the workload among the backend Janus servers.\nMoreover, Janus-proxy also can be scaled out for videocall plugin to handle much more video calls. Different WebRTC peers may be assigned to different Janus-proxies which is able to communicates with each other through admin interface.</p>\n<h3>p2pcall</h3>\n<p>This is an other video call plugin, very similar to the videocall plugin, except that two WebRTC peer communicate with each other in p2p mode. It outputs same APIs like the videocall plugin, and also make Janux-proxy be able to scaled out to handle more video call. Howerver no backend Janus servers is need to handle the media stream, because the WebRTC peers transmit the media data with each other directly.</p>\n<h3>videoroom</h3>\n<p>This is a plugin implementing a videoconferencing SFU, just like videoroom plugin of the Janus server. It tries to keep almost the same API with the videoroom plugin of Janus server, and scale it out by distributing different publishers to different backend Janus server, so that Janus-proxy can support more publishers in one videoconferencing room than single Janus server. Constrast to the vidroroom plugin of Janus server, there are some limitations below on this plugin to simplify the code.</p>\n<ul>\n<li>rtp_forward not support</li>\n<li>audiolevel_event not support</li>\n<li>subscriber switch not support</li>\n</ul>\n<h2>5 Topology</h2>\n<p>The structure of Janus-cloud would be similar with the below topology.</p>\n<pre><code>                                                                               +-----------------------------+\n                                                                               |Virtual Machine 2            |\n                                                                               |      +----------+           |\n                                                                          +----------&gt;+  Janus   |           |\n                                                                          |    |      +-----+----+           |\n                                                                          |    |            |                |\n                                     +------------------------------+     |    |      +-----+-------------+  |\n                                     |Virtual Machine 1             |     |    |      |  Janus-sentinel   |  |\n+-----------------------+            |                              |     |    |      +-------------------+  |\n| Web Browser           |  WebSocket |      +----------------+      |     |    +-----------------------------+\n| (e.g. Chrome/Firefox) +------------------&gt;+  Janus-proxy   +------------+\n+-----------------------+            |      +----------------+      |     |\n                                     |                              |     |    +-----------------------------+\n                                     +------------------------------+     |    |Virtual Machine 3            |\n                                                                          |    |     +---------+             |\n                                                                          +---------&gt;+ Janus   |             |\n                                                                               |     +-----+---+             |\n                                                                               |           |                 |\n                                                                               |     +-----+------------+    |\n                                                                               |     | Janus-sentinel   |    |\n                                                                               |     +------------------+    |\n                                                                               +-----------------------------+\n\n\n</code></pre>\n<p>Janus-proxy is often deployed on a standalone machine between WebRTC client(like Browser) and Janus server. All signal  from WebRTC client would be received by Janus-proxy first , then relayed to one of the backend Janus servers.</p>\n<p>Janus-sentinel is often deployed along with the Janus server on the same machine. Janus-sentinel keep Janus process running and moniter its status, then report to Janus-proxy at intervals.</p>\n<h2>6 Installation</h2>\n<p>Before installation, the following requrements must be satisfied.</p>\n<ul>\n<li>Python &gt;= 3.5</li>\n<li>pip</li>\n<li>setuptools</li>\n</ul>\n<p>Janus-cloud supports python 3.5 and up. It's strongly recommanded to install Janus-cloud in a python virtual environment, like \"venv\".</p>\n<h3>Install from PyPi</h3>\n<p>To install Janus-cloud from PyPi,</p>\n<pre>$ pip install janus-cloud\n</pre>\n<h3>Install from source</h3>\n<p>To install Janus-cloud from project source</p>\n<pre>$ pip install &lt;project_root&gt;\n</pre>\n<p>Where &lt;project_root&gt; is the root directory of project source, which contians the setup.py file</p>\n<p>For developer, who want to debug the Janus-cloud, and install it for develop mode:</p>\n<pre>$ pip install -e &lt;project_root&gt;\n</pre>\n<h2>7 Configure and Start</h2>\n<p>Some resource files, like sample configuration(with explanations), html test scripts, and etc, are shipped within the project source.\nAfter installation, these resource would be installed under ** &lt;sys.prefix&gt;/opt/janus-cloud ** where &lt;sys.prefix&gt; is the root diriectory of your filesystem. or the the root directory of virtual environment if install in a virtual environment.</p>\n<h3>janus-sentinel</h3>\n<p>Edit the configuration file of Janus-sentinel, then type the following commands to start.</p>\n<pre>$ janus-sentinel &lt;janus-sentinel config file path&gt;\n</pre>\n<h3>janus-proxy</h3>\n<p>Edit the configuration file of Janus-proxy, then type the following commands to start.</p>\n<pre>$ janus-proxy &lt;janus-proxy config file path&gt;\n</pre>\n<h2>8 Requirements for the backend Janus server</h2>\n<p>By now, Janus-proxy / Janus-sentinel only suport corresponding with the backend Janus server by WebSocket, not support other transport. And there is no secret/token mechanism applied in the communication between them, because the API of the Janus server is only used by Janus-proxy / Janus-sentinel internel, and not directly output to outside.</p>\n<p>In summary, there are some requirements below on the configuration of the backend Janus sever when deploying with Janux-cloud:</p>\n<ul>\n<li>WebSocket transport must be enabled to correspond with Janus-proxy/Janus-sentinel</li>\n<li>api_secret and token_auth feature must be disabled</li>\n<li>admin_secret feature must be disabled</li>\n</ul>\n<h2>9 Directory structure of project source</h2>\n<p>Keep It Simple, and Stupid</p>\n<pre><code>janus-cloud/\n    |\n    +----conf/            Sample configuration files\n    |\n    +----html/            Html &amp; js page code for test client\n    |\n    +----januscloud/      Pythond code package of janus-cloud\n    |\n    +----CHANGES.md       change log for each release\n    |\n    +----README.md        This readme\n    |\n    +----LICENSE          AGPL 3.0 license \n    |\n    +----MANIFEST.in      Manifest file describing the static resource file\n    |\n    +----setup.py         Python setup script\n</code></pre>\n<h1>Changelog</h1>\n<p>All notable changes to this project will be documented in this file.</p>\n<h2>[v0.1.0]  - 2020-03-29</h2>\n<ul>\n<li>initial version released</li>\n<li>janus-proxy and janus-sentinel are finished</li>\n<li>echotest, videocall, p2pcall, videoroom plugins of janus-proxy are ready</li>\n</ul>\n\n          </div>"}, "last_serial": 6905286, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4e495c1123cb45be9475840955f8a4c6", "sha256": "9463c576168a46905188cddafef28a96dbe0a8ec54f1ffa229f571b6e32eb7c0"}, "downloads": -1, "filename": "janus_cloud-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4e495c1123cb45be9475840955f8a4c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 117481, "upload_time": "2020-03-29T06:49:00", "upload_time_iso_8601": "2020-03-29T06:49:00.754287Z", "url": "https://files.pythonhosted.org/packages/d4/68/e45a77e94ec9fdb216efafe52a1b54b7631d2c07a54f93305078c1d268cf/janus_cloud-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e404787b346af377137bc800a7e355d1", "sha256": "686b0a63360ff5e6011b62e2c5808a1cc6a358eb3e292be4a7e817a8bfc808e7"}, "downloads": -1, "filename": "janus-cloud-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e404787b346af377137bc800a7e355d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93650, "upload_time": "2020-03-29T06:49:03", "upload_time_iso_8601": "2020-03-29T06:49:03.566447Z", "url": "https://files.pythonhosted.org/packages/c2/d1/84a5dc3df3aad925ab03bade2cca8077a5348006a22821ebea7800607309/janus-cloud-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e495c1123cb45be9475840955f8a4c6", "sha256": "9463c576168a46905188cddafef28a96dbe0a8ec54f1ffa229f571b6e32eb7c0"}, "downloads": -1, "filename": "janus_cloud-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4e495c1123cb45be9475840955f8a4c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 117481, "upload_time": "2020-03-29T06:49:00", "upload_time_iso_8601": "2020-03-29T06:49:00.754287Z", "url": "https://files.pythonhosted.org/packages/d4/68/e45a77e94ec9fdb216efafe52a1b54b7631d2c07a54f93305078c1d268cf/janus_cloud-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e404787b346af377137bc800a7e355d1", "sha256": "686b0a63360ff5e6011b62e2c5808a1cc6a358eb3e292be4a7e817a8bfc808e7"}, "downloads": -1, "filename": "janus-cloud-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e404787b346af377137bc800a7e355d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 93650, "upload_time": "2020-03-29T06:49:03", "upload_time_iso_8601": "2020-03-29T06:49:03.566447Z", "url": "https://files.pythonhosted.org/packages/c2/d1/84a5dc3df3aad925ab03bade2cca8077a5348006a22821ebea7800607309/janus-cloud-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:14 2020"}