{"info": {"author": "Gary Poster", "author_email": "gary.poster@canonical.com", "bugtrack_url": null, "classifiers": [], "description": "~~~~~~~~\nzc.blist\n~~~~~~~~\n\n.. contents::\n\n========\nOverview\n========\n\nThe sequence in this package has a list-like API, but stores its values in\nindividual buckets. This means that, for small changes in large sequences, the\nsequence could be a big win. For instance, an ordered BTree-based container\nmight want to store order in a sequence, so that moves only cause a bucket or\ntwo--around 50 strings or less--to be rewritten in the database, rather than\nthe entire contents (which might be thousands of strings, for instance).\n\nIf the sequence is most often completely rearranged, the complexity of the code\nin this package is not desirable.  It only makes sense if changes most\nfrequently are fairly small.\n\nOne downside is that reading and writing is more work than with a normal list.\nIf this were to actually gain traction, perhaps writing some or all of it in C\nwould be helpful.  However, it still seems pretty snappy.\n\nAnother downside is the corollary of the bucket advantage listed initially:\nwith more persistent objects, iterating over it will fill a lot of ZODB's\nobject cache (which is based on the number of objects cached, rather than the\nsize). Consider specifying a big object cache if you are using these to store a\nlot of data and are frequently iterating or changing.\n\nThese sequences return slices as iterators, and add some helpful iteration\nmethods.  It adds a ``copy`` method that provides a cheap copy of the blist\nthat shares all buckets and indexes until a write happens, at which point it\ncopies and mutates the affected indexes and buckets.\n\nWe'll take a glance at how these differences work, and then describe the\nimplementation's basic mechanism, and close with a brief discussion of\nperformance characteristics in the abstract.\n\n==============================\nDifferences from Python's List\n==============================\n\nSlices are Iterators\n====================\n\nThis doesn't need much discussion.  Getting slices of all sorts returns\niterators.\n\n    >>> from zc.blist import BList\n    >>> l = BList(range(1000))\n    >>> l[345:351] # doctest: +ELLIPSIS\n    <generator object at ...>\n    >>> list(l[345:351])\n    [345, 346, 347, 348, 349, 350]\n\n    >>> l[351:345:-1] # doctest: +ELLIPSIS\n    <generator object at ...>\n    >>> list(l[351:345:-1])\n    [351, 350, 349, 348, 347, 346]\n\n    >>> l[345:351:2] # doctest: +ELLIPSIS\n    <generator object at ...>\n    >>> list(l[345:351:2])\n    [345, 347, 349]\n\nAdditional Iteration Methods\n============================\n\n``iterReversed`` lets you iterate over the list in reverse order, efficiently,\nwith a given start point.  It is used for slices that proceed with a step of\n-1.\n\n    >>> i = l.iterReversed()\n    >>> i.next()\n    999\n    >>> i.next()\n    998\n    >>> list(i)[-10:]\n    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n``iterSlice`` lets you iterate over the list with a slice.  It is equivalent to\nusing a slice with __getitem__.\n\n    >>> i = l.iterSlice(345, 351, 2)\n    >>> i # doctest: +ELLIPSIS\n    <generator object at ...>\n    >>> list(i)\n    [345, 347, 349]\n\nCheap ``copy``\n==============\n\nThe ``copy`` method produces a cheap copy of the given blist.  All buckets\nand indexes are shared until a change is made to either side.  Copies can\nsafely be made of other copies.\n\n    >>> c = l.copy()\n    >>> l == c\n    True\n    >>> list(c) == list(l)\n    True\n    >>> del c[10:]\n    >>> list(l) == range(1000)\n    True\n    >>> list(c)\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> l == c\n    False\n    >>> c2 = c.copy()\n    >>> c2 == c\n    True\n    >>> list(c2)\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n=========\nMechanism\n=========\n\nIn its implementation, the sequence is an adapted B+ tree. Indexes are keys, but\neach bucket or branch starts at 0. For instance, a perfectly-balanced bucket\nsequence with 16 items, and a limit of 3 entries in a bucket or branch, would\nhave \"keys\" like this. In the diagram, the top three rows are indexes, and the\nbottom row consists of buckets::\n\n        0           8\n     0     4     0     4\n    0 2   0 2   0 2   0 2\n   01 01 01 01 01 01 01 01\n\nSo, for instance, you would get the value at position 5 using this process:\n\n- In the top index (the top row, with keys of 0 and 8), find the largest key\n  that is lower than the desired position, and use the associated value (index\n  or bucket, which is in this case the index represented by the first pair of 0\n  and 4 in the second row) for the next step. In this case, the top index has\n  keys of 0 and 8, so the largest key lower than position 5 is 0. Subtract this\n  key from the position for the next step. This difference will be used as the\n  position for the next step. In this case, the next position will be (5-0=) 5.\n\n- The next index has keys of 0 and 4. The largest key lower than 5 is 4. Use\n  the child index associated with the 4 key for the next step (the second pair\n  of 0 and 2 in the third row), and subtract the key (4) from the position (5)\n  for the position to be used in the next step (=1).\n\n- The next index (the second pair of 0 and 2 in the third row) needs to find\n  position 1.  This will return the third pair of 0 1 in the last row.  The new\n  position will be (1-0=) 1.\n\n- Finally, position 1 in the bottom bucket stores the actual desired value.\n\nThis arrangement minimizes the changes to keys necessary when a new value is\ninserted low in the sequence: ignoring balancing the tree, only parents and\ntheir subsequent siblings must be adjusted. For instance, inserting a new value\nin the 0 position of the bucketsequence described above (the worst case for the\nalgorithm, in terms of the number of objects touched) would result in the\nfollowing tree::\n\n        0           9\n     0     5     0     4\n    0  3   0 2   0 2   0 2\n   012 01 01 01 01 01 01 01\n\n===========================\nPerformance Characteristics\n===========================\n\nThe Good\n========\n\n- ``__getitem__`` is efficient, not loading unnecessary buckets.  It handles\n  slices pretty well too, not even loading intermediary buckets if the slice\n  is very large.  Slices currently return iterables rather than lists; this\n  may switch to a view of some sort.  All that should be assumed right now is\n  that you can iterate over the result of a slice.\n\n- ``__setitem__`` and all the write methods do a pretty good job in terms of\n  efficient loading of buckets, and only writing what they need to.  It\n  supports full Python slice semantics.\n\n- ``copy`` is cheap: it reuses buckets and indexes so that new inner\n  components are created lazily when they mutate.\n\n- While ``__contains__``, ``__iter__``, ``index`` and other methods are brute\n  force and written in Python, they might not load all buckets and items, while\n  with a normal list or tuple, they always will. See also ``iter``,\n  ``iterReversed``, and ``iterSlice``.\n\nThe So-So\n=========\n\n- ``count``, ``__eq__``, and other methods load all buckets and items, and are\n  brute force, and in Python. In contrast, lists and tuples will load all\n  items (worse), and is brute force in C (better, but not algorithmically).\n\nThe Bad\n=======\n\n- This will create a lot of Persistent objects for one blist, which may cause\n  cache eviction problems depending on circumstances and usage.\n\n- Did I mention that this was in Python, not C?  That's fixable, at least, and\n  in fact doesn't appear to be too problematic at the moment, at least for the\n  author's usage.\n\n\n\n=======\nChanges\n=======\n\n1.0b2 (2009-03-12)\n==================\n\n- fixed: internal data structures were not stored correctly in the ZODB, so\n  BLists loaded from a fresh DB connection would break.\n\n- removed unused code and the dependency on rwproperty\n\n- improved test coverage of the BList API, fixed access to items at index -1\n  or at the ends of the valid index range\n\n\n1.0b1 (2008-10-06)\n==================\n\nInitial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "ZPL", "maintainer": null, "maintainer_email": null, "name": "zc.blist", "package_url": "https://pypi.org/project/zc.blist/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zc.blist/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/zc.blist/1.0b2/", "requires_dist": null, "requires_python": null, "summary": "ZODB-friendly BTree-based list implementation", "version": "1.0b2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id1\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#differences-from-python-s-list\" id=\"id2\" rel=\"nofollow\">Differences from Python\u2019s List</a><ul>\n<li><a href=\"#slices-are-iterators\" id=\"id3\" rel=\"nofollow\">Slices are Iterators</a></li>\n<li><a href=\"#additional-iteration-methods\" id=\"id4\" rel=\"nofollow\">Additional Iteration Methods</a></li>\n<li><a href=\"#cheap-copy\" id=\"id5\" rel=\"nofollow\">Cheap <tt>copy</tt></a></li>\n</ul>\n</li>\n<li><a href=\"#mechanism\" id=\"id6\" rel=\"nofollow\">Mechanism</a></li>\n<li><a href=\"#performance-characteristics\" id=\"id7\" rel=\"nofollow\">Performance Characteristics</a><ul>\n<li><a href=\"#the-good\" id=\"id8\" rel=\"nofollow\">The Good</a></li>\n<li><a href=\"#the-so-so\" id=\"id9\" rel=\"nofollow\">The So-So</a></li>\n<li><a href=\"#the-bad\" id=\"id10\" rel=\"nofollow\">The Bad</a></li>\n</ul>\n</li>\n<li><a href=\"#changes\" id=\"id11\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#b2-2009-03-12\" id=\"id12\" rel=\"nofollow\">1.0b2 (2009-03-12)</a></li>\n<li><a href=\"#b1-2008-10-06\" id=\"id13\" rel=\"nofollow\">1.0b1 (2008-10-06)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Overview</a></h2>\n<p>The sequence in this package has a list-like API, but stores its values in\nindividual buckets. This means that, for small changes in large sequences, the\nsequence could be a big win. For instance, an ordered BTree-based container\nmight want to store order in a sequence, so that moves only cause a bucket or\ntwo\u2013around 50 strings or less\u2013to be rewritten in the database, rather than\nthe entire contents (which might be thousands of strings, for instance).</p>\n<p>If the sequence is most often completely rearranged, the complexity of the code\nin this package is not desirable.  It only makes sense if changes most\nfrequently are fairly small.</p>\n<p>One downside is that reading and writing is more work than with a normal list.\nIf this were to actually gain traction, perhaps writing some or all of it in C\nwould be helpful.  However, it still seems pretty snappy.</p>\n<p>Another downside is the corollary of the bucket advantage listed initially:\nwith more persistent objects, iterating over it will fill a lot of ZODB\u2019s\nobject cache (which is based on the number of objects cached, rather than the\nsize). Consider specifying a big object cache if you are using these to store a\nlot of data and are frequently iterating or changing.</p>\n<p>These sequences return slices as iterators, and add some helpful iteration\nmethods.  It adds a <tt>copy</tt> method that provides a cheap copy of the blist\nthat shares all buckets and indexes until a write happens, at which point it\ncopies and mutates the affected indexes and buckets.</p>\n<p>We\u2019ll take a glance at how these differences work, and then describe the\nimplementation\u2019s basic mechanism, and close with a brief discussion of\nperformance characteristics in the abstract.</p>\n</div>\n<div id=\"differences-from-python-s-list\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Differences from Python\u2019s List</a></h2>\n<div id=\"slices-are-iterators\">\n<h3><a href=\"#id3\" rel=\"nofollow\">Slices are Iterators</a></h3>\n<p>This doesn\u2019t need much discussion.  Getting slices of all sorts returns\niterators.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from zc.blist import BList\n&gt;&gt;&gt; l = BList(range(1000))\n&gt;&gt;&gt; l[345:351] # doctest: +ELLIPSIS\n&lt;generator object at ...&gt;\n&gt;&gt;&gt; list(l[345:351])\n[345, 346, 347, 348, 349, 350]\n</pre>\n<pre>&gt;&gt;&gt; l[351:345:-1] # doctest: +ELLIPSIS\n&lt;generator object at ...&gt;\n&gt;&gt;&gt; list(l[351:345:-1])\n[351, 350, 349, 348, 347, 346]\n</pre>\n<pre>&gt;&gt;&gt; l[345:351:2] # doctest: +ELLIPSIS\n&lt;generator object at ...&gt;\n&gt;&gt;&gt; list(l[345:351:2])\n[345, 347, 349]\n</pre>\n</blockquote>\n</div>\n<div id=\"additional-iteration-methods\">\n<h3><a href=\"#id4\" rel=\"nofollow\">Additional Iteration Methods</a></h3>\n<p><tt>iterReversed</tt> lets you iterate over the list in reverse order, efficiently,\nwith a given start point.  It is used for slices that proceed with a step of\n-1.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; i = l.iterReversed()\n&gt;&gt;&gt; i.next()\n999\n&gt;&gt;&gt; i.next()\n998\n&gt;&gt;&gt; list(i)[-10:]\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n</pre>\n</blockquote>\n<p><tt>iterSlice</tt> lets you iterate over the list with a slice.  It is equivalent to\nusing a slice with __getitem__.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; i = l.iterSlice(345, 351, 2)\n&gt;&gt;&gt; i # doctest: +ELLIPSIS\n&lt;generator object at ...&gt;\n&gt;&gt;&gt; list(i)\n[345, 347, 349]\n</pre>\n</blockquote>\n</div>\n<div id=\"cheap-copy\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Cheap <tt>copy</tt></a></h3>\n<p>The <tt>copy</tt> method produces a cheap copy of the given blist.  All buckets\nand indexes are shared until a change is made to either side.  Copies can\nsafely be made of other copies.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; c = l.copy()\n&gt;&gt;&gt; l == c\nTrue\n&gt;&gt;&gt; list(c) == list(l)\nTrue\n&gt;&gt;&gt; del c[10:]\n&gt;&gt;&gt; list(l) == range(1000)\nTrue\n&gt;&gt;&gt; list(c)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n&gt;&gt;&gt; l == c\nFalse\n&gt;&gt;&gt; c2 = c.copy()\n&gt;&gt;&gt; c2 == c\nTrue\n&gt;&gt;&gt; list(c2)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</pre>\n</blockquote>\n</div>\n</div>\n<div id=\"mechanism\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Mechanism</a></h2>\n<p>In its implementation, the sequence is an adapted B+ tree. Indexes are keys, but\neach bucket or branch starts at 0. For instance, a perfectly-balanced bucket\nsequence with 16 items, and a limit of 3 entries in a bucket or branch, would\nhave \u201ckeys\u201d like this. In the diagram, the top three rows are indexes, and the\nbottom row consists of buckets:</p>\n<pre>     0           8\n  0     4     0     4\n 0 2   0 2   0 2   0 2\n01 01 01 01 01 01 01 01\n</pre>\n<p>So, for instance, you would get the value at position 5 using this process:</p>\n<ul>\n<li>In the top index (the top row, with keys of 0 and 8), find the largest key\nthat is lower than the desired position, and use the associated value (index\nor bucket, which is in this case the index represented by the first pair of 0\nand 4 in the second row) for the next step. In this case, the top index has\nkeys of 0 and 8, so the largest key lower than position 5 is 0. Subtract this\nkey from the position for the next step. This difference will be used as the\nposition for the next step. In this case, the next position will be (5-0=) 5.</li>\n<li>The next index has keys of 0 and 4. The largest key lower than 5 is 4. Use\nthe child index associated with the 4 key for the next step (the second pair\nof 0 and 2 in the third row), and subtract the key (4) from the position (5)\nfor the position to be used in the next step (=1).</li>\n<li>The next index (the second pair of 0 and 2 in the third row) needs to find\nposition 1.  This will return the third pair of 0 1 in the last row.  The new\nposition will be (1-0=) 1.</li>\n<li>Finally, position 1 in the bottom bucket stores the actual desired value.</li>\n</ul>\n<p>This arrangement minimizes the changes to keys necessary when a new value is\ninserted low in the sequence: ignoring balancing the tree, only parents and\ntheir subsequent siblings must be adjusted. For instance, inserting a new value\nin the 0 position of the bucketsequence described above (the worst case for the\nalgorithm, in terms of the number of objects touched) would result in the\nfollowing tree:</p>\n<pre>     0           9\n  0     5     0     4\n 0  3   0 2   0 2   0 2\n012 01 01 01 01 01 01 01\n</pre>\n</div>\n<div id=\"performance-characteristics\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Performance Characteristics</a></h2>\n<div id=\"the-good\">\n<h3><a href=\"#id8\" rel=\"nofollow\">The Good</a></h3>\n<ul>\n<li><tt>__getitem__</tt> is efficient, not loading unnecessary buckets.  It handles\nslices pretty well too, not even loading intermediary buckets if the slice\nis very large.  Slices currently return iterables rather than lists; this\nmay switch to a view of some sort.  All that should be assumed right now is\nthat you can iterate over the result of a slice.</li>\n<li><tt>__setitem__</tt> and all the write methods do a pretty good job in terms of\nefficient loading of buckets, and only writing what they need to.  It\nsupports full Python slice semantics.</li>\n<li><tt>copy</tt> is cheap: it reuses buckets and indexes so that new inner\ncomponents are created lazily when they mutate.</li>\n<li>While <tt>__contains__</tt>, <tt>__iter__</tt>, <tt>index</tt> and other methods are brute\nforce and written in Python, they might not load all buckets and items, while\nwith a normal list or tuple, they always will. See also <tt>iter</tt>,\n<tt>iterReversed</tt>, and <tt>iterSlice</tt>.</li>\n</ul>\n</div>\n<div id=\"the-so-so\">\n<h3><a href=\"#id9\" rel=\"nofollow\">The So-So</a></h3>\n<ul>\n<li><tt>count</tt>, <tt>__eq__</tt>, and other methods load all buckets and items, and are\nbrute force, and in Python. In contrast, lists and tuples will load all\nitems (worse), and is brute force in C (better, but not algorithmically).</li>\n</ul>\n</div>\n<div id=\"the-bad\">\n<h3><a href=\"#id10\" rel=\"nofollow\">The Bad</a></h3>\n<ul>\n<li>This will create a lot of Persistent objects for one blist, which may cause\ncache eviction problems depending on circumstances and usage.</li>\n<li>Did I mention that this was in Python, not C?  That\u2019s fixable, at least, and\nin fact doesn\u2019t appear to be too problematic at the moment, at least for the\nauthor\u2019s usage.</li>\n</ul>\n</div>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id11\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"b2-2009-03-12\">\n<h3><a href=\"#id12\" rel=\"nofollow\">1.0b2 (2009-03-12)</a></h3>\n<ul>\n<li>fixed: internal data structures were not stored correctly in the ZODB, so\nBLists loaded from a fresh DB connection would break.</li>\n<li>removed unused code and the dependency on rwproperty</li>\n<li>improved test coverage of the BList API, fixed access to items at index -1\nor at the ends of the valid index range</li>\n</ul>\n</div>\n<div id=\"b1-2008-10-06\">\n<h3><a href=\"#id13\" rel=\"nofollow\">1.0b1 (2008-10-06)</a></h3>\n<p>Initial release.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 802160, "releases": {"1.0b1": [{"comment_text": "", "digests": {"md5": "f7910107f9efa810d0561e25dd241e93", "sha256": "d4c07c0555acdf2ecc947a16ff19ebcc69bd659560367881648fdb42d855998c"}, "downloads": -1, "filename": "zc.blist-1.0b1.tar.gz", "has_sig": true, "md5_digest": "f7910107f9efa810d0561e25dd241e93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24154, "upload_time": "2008-10-06T11:54:40", "upload_time_iso_8601": "2008-10-06T11:54:40Z", "url": "https://files.pythonhosted.org/packages/5e/c8/b28f6a726e29c951136f7ca85fbc87f10d3c799104639462cd62b1b6c300/zc.blist-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "335eb7fa3b8a5a3ac13dc37ac4337e76", "sha256": "f257f02e8c5ec55467e64c8d2c21c1d9471b83fba0377560d98f0340ed1925ed"}, "downloads": -1, "filename": "zc.blist-1.0b2.tar.gz", "has_sig": true, "md5_digest": "335eb7fa3b8a5a3ac13dc37ac4337e76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25014, "upload_time": "2009-03-12T18:39:08", "upload_time_iso_8601": "2009-03-12T18:39:08.166671Z", "url": "https://files.pythonhosted.org/packages/de/c0/2ad9b2b28282cfaaa9e9715e8909071ef719f3ab0fa695766b7548b6665b/zc.blist-1.0b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "335eb7fa3b8a5a3ac13dc37ac4337e76", "sha256": "f257f02e8c5ec55467e64c8d2c21c1d9471b83fba0377560d98f0340ed1925ed"}, "downloads": -1, "filename": "zc.blist-1.0b2.tar.gz", "has_sig": true, "md5_digest": "335eb7fa3b8a5a3ac13dc37ac4337e76", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25014, "upload_time": "2009-03-12T18:39:08", "upload_time_iso_8601": "2009-03-12T18:39:08.166671Z", "url": "https://files.pythonhosted.org/packages/de/c0/2ad9b2b28282cfaaa9e9715e8909071ef719f3ab0fa695766b7548b6665b/zc.blist-1.0b2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:29 2020"}