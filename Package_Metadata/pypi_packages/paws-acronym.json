{"info": {"author": "David Guszejnov", "author_email": "guszejnov.david@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Overview\n\nThe PAWS (Proper Acronyms With Synonyms) is a python algorithm to generate English acronyms from a set of keywords. It is inspired by ACRONYM (Acronym CReatiON for You and Me, https://github.com/bacook17/acronym) but unlike ACRONYM this algorithm creates proper acronyms using the first N letters from keywords in all possible combinations. Furthermore, it can replace any keyword with its synonyms (using nltk) to provide more alternatives.\n\nThe code is highly customizable, it is possible to set which keywords can be replaced by synonyms as well as establishing dependencies between words so that similar or contradictory keywords are not used in the same acronym. Also, it is possible to force the use of important keywords in the resulting acronyms.\n\n# Install\n\nCan be installed with pip:\n```\n$ pip3 install paws_acronym\n```\nor by downloading the repository and then running\n```\n$ make install\n```\n\n# Usage\n\nPAWS is designed to be called in the format\n```\n$paws_acronym <keywords> ... [options]\n```\nKeywords are to be entered separated by spaces (e.g., `large code`). To allow the code to substitute a word with its synonyms, put a `*` in front of the word (e.g., `*good`). It is also possible to group words together by listing them one after another, separeted by commas and no whitespaces, from each group only one word is used in an acronym (e.g., `bike,car`)\n\nOptions:                                                                       \n```\n   -h --help                         Shows options\n   --forced_words=<words>            List of words (separated by commas) that MUST be part of the acronym (these words should be already included with keywords).\n   --min_acronymlength=<N>           Minimum length of the acronym [default: 3]\n   --max_letters_to_use=<N>          Sets the maximum number of letters that can be used from the beginning of keywords [default: 5]\n   --use_synonyms_for_all            If turned on, all keywords can have synonyms. Note that this can drastically increase the number of results\n   --strict=<f>                      Sets how strictly should words be related to English by changing the `nltk` word corpus (0: `words`, 1: `brown`, other: `gutenberg`) [default: None]\n```\n# Examples\n\nLet's try to name an algorithm that generates acronyms using synonyms.\n```\n$ paws_acronym acronym generator synonyms\nUsing keywords:  acronym generator synonyms\nNumber of words to process 460\nWords processed, 7 acronyms found, filtering for extra criteria...\n        AGE : Acronym GEnerator\n        AGEN : Acronym GENerator\n        AGES : Acronym GEnerator Synonyms\n        GAS : Generator Acronym Synonyms\n        GENERA : GENERator Acronym\n        SAC : Synonyms ACronym\n        SAGE : Synonyms Acronym GEnerator\n```\nThese are quite limited in scope, we could get a lot more options if we added some optional adjectives and prepositions. Also, we could replace `generator` with `algorithm` or `code`. To avoid repetition of similar words we can define them to be dependent on each other, so we get maximum one adjective, one preposition and one of `code`/`generator`/`algorithm`. Also, it is a good idea to enable the use of synonyms. Note that allowing synonyms for words like `good` will lead to a lot of possible acronyms so let's filter our results to the ones that include the key words of `acronym` and `synonyms`. \n```\n$ paws_acronym acronym generator,code,algorithm synonyms *with,*of,*from *good,*proper --forced_words=acronym,synonyms\nUsing 43 keywords:  acronym adept algorithm beneficial code commodity dear dependable effective estimable expert from full generator good goodness honest honorable just near of practiced proficient proper respectable right ripe safe salutary secure serious skilful skillful sound soundly synonyms thoroughly undecomposed unspoiled unspoilt upright well with\nKeyword dependencies:  [0. 4. 1. 4. 1. 4. 4. 4. 4. 4. 4. 3. 4. 1. 4. 4. 4. 4. 4. 4. 3. 4. 4. 4.\n 4. 4. 4. 4. 4. 4. 4. 4. 4. 4. 4. 2. 4. 4. 4. 4. 4. 4. 3.]\nNumber of words to process 29492\nWords processed, 1718 acronyms found, filtering for extra criteria...\n        ACCESS : ACronym Code EStimable Synonyms\n        ...\n```\nThis will put out over a hundred possible acronyms. At this point it is up to the user to peruse them and identify the ones that could work with little or no modifications, like:\n```\nADAGES : ADept Acronym GEnerator using Synonyms\nAGENTS : Acronym GENeration Through Synonyms\nEASY : Expert Acronyms from SYnonyms\nGAS : Generator of Acronyms from Synonyms\nGREASY : Generator of REspectable Acronyms from SYnonyms\nHAGS : Honest Acronym Generation from Synonyms\nPAGES : Proper Acronym GEneration from Synonyms\nPAWS : Proper Acronym With Synonyms\nRAGES : Respectable Acronym GEneration with Synonyms\nSEAS : SErious Acronyms from Synonyms\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/guszejnovdavid/PAWS_acronym_generator", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "paws-acronym", "package_url": "https://pypi.org/project/paws-acronym/", "platform": "", "project_url": "https://pypi.org/project/paws-acronym/", "project_urls": {"Homepage": "https://github.com/guszejnovdavid/PAWS_acronym_generator"}, "release_url": "https://pypi.org/project/paws-acronym/0.3.0/", "requires_dist": ["numpy", "docopt", "nltk"], "requires_python": "", "summary": "Proper Acronyms With Synonyms, creates acronyms from a list of keywords", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Overview</h1>\n<p>The PAWS (Proper Acronyms With Synonyms) is a python algorithm to generate English acronyms from a set of keywords. It is inspired by ACRONYM (Acronym CReatiON for You and Me, <a href=\"https://github.com/bacook17/acronym\" rel=\"nofollow\">https://github.com/bacook17/acronym</a>) but unlike ACRONYM this algorithm creates proper acronyms using the first N letters from keywords in all possible combinations. Furthermore, it can replace any keyword with its synonyms (using nltk) to provide more alternatives.</p>\n<p>The code is highly customizable, it is possible to set which keywords can be replaced by synonyms as well as establishing dependencies between words so that similar or contradictory keywords are not used in the same acronym. Also, it is possible to force the use of important keywords in the resulting acronyms.</p>\n<h1>Install</h1>\n<p>Can be installed with pip:</p>\n<pre><code>$ pip3 install paws_acronym\n</code></pre>\n<p>or by downloading the repository and then running</p>\n<pre><code>$ make install\n</code></pre>\n<h1>Usage</h1>\n<p>PAWS is designed to be called in the format</p>\n<pre><code>$paws_acronym &lt;keywords&gt; ... [options]\n</code></pre>\n<p>Keywords are to be entered separated by spaces (e.g., <code>large code</code>). To allow the code to substitute a word with its synonyms, put a <code>*</code> in front of the word (e.g., <code>*good</code>). It is also possible to group words together by listing them one after another, separeted by commas and no whitespaces, from each group only one word is used in an acronym (e.g., <code>bike,car</code>)</p>\n<p>Options:</p>\n<pre><code>   -h --help                         Shows options\n   --forced_words=&lt;words&gt;            List of words (separated by commas) that MUST be part of the acronym (these words should be already included with keywords).\n   --min_acronymlength=&lt;N&gt;           Minimum length of the acronym [default: 3]\n   --max_letters_to_use=&lt;N&gt;          Sets the maximum number of letters that can be used from the beginning of keywords [default: 5]\n   --use_synonyms_for_all            If turned on, all keywords can have synonyms. Note that this can drastically increase the number of results\n   --strict=&lt;f&gt;                      Sets how strictly should words be related to English by changing the `nltk` word corpus (0: `words`, 1: `brown`, other: `gutenberg`) [default: None]\n</code></pre>\n<h1>Examples</h1>\n<p>Let's try to name an algorithm that generates acronyms using synonyms.</p>\n<pre><code>$ paws_acronym acronym generator synonyms\nUsing keywords:  acronym generator synonyms\nNumber of words to process 460\nWords processed, 7 acronyms found, filtering for extra criteria...\n        AGE : Acronym GEnerator\n        AGEN : Acronym GENerator\n        AGES : Acronym GEnerator Synonyms\n        GAS : Generator Acronym Synonyms\n        GENERA : GENERator Acronym\n        SAC : Synonyms ACronym\n        SAGE : Synonyms Acronym GEnerator\n</code></pre>\n<p>These are quite limited in scope, we could get a lot more options if we added some optional adjectives and prepositions. Also, we could replace <code>generator</code> with <code>algorithm</code> or <code>code</code>. To avoid repetition of similar words we can define them to be dependent on each other, so we get maximum one adjective, one preposition and one of <code>code</code>/<code>generator</code>/<code>algorithm</code>. Also, it is a good idea to enable the use of synonyms. Note that allowing synonyms for words like <code>good</code> will lead to a lot of possible acronyms so let's filter our results to the ones that include the key words of <code>acronym</code> and <code>synonyms</code>.</p>\n<pre><code>$ paws_acronym acronym generator,code,algorithm synonyms *with,*of,*from *good,*proper --forced_words=acronym,synonyms\nUsing 43 keywords:  acronym adept algorithm beneficial code commodity dear dependable effective estimable expert from full generator good goodness honest honorable just near of practiced proficient proper respectable right ripe safe salutary secure serious skilful skillful sound soundly synonyms thoroughly undecomposed unspoiled unspoilt upright well with\nKeyword dependencies:  [0. 4. 1. 4. 1. 4. 4. 4. 4. 4. 4. 3. 4. 1. 4. 4. 4. 4. 4. 4. 3. 4. 4. 4.\n 4. 4. 4. 4. 4. 4. 4. 4. 4. 4. 4. 2. 4. 4. 4. 4. 4. 4. 3.]\nNumber of words to process 29492\nWords processed, 1718 acronyms found, filtering for extra criteria...\n        ACCESS : ACronym Code EStimable Synonyms\n        ...\n</code></pre>\n<p>This will put out over a hundred possible acronyms. At this point it is up to the user to peruse them and identify the ones that could work with little or no modifications, like:</p>\n<pre><code>ADAGES : ADept Acronym GEnerator using Synonyms\nAGENTS : Acronym GENeration Through Synonyms\nEASY : Expert Acronyms from SYnonyms\nGAS : Generator of Acronyms from Synonyms\nGREASY : Generator of REspectable Acronyms from SYnonyms\nHAGS : Honest Acronym Generation from Synonyms\nPAGES : Proper Acronym GEneration from Synonyms\nPAWS : Proper Acronym With Synonyms\nRAGES : Respectable Acronym GEneration with Synonyms\nSEAS : SErious Acronyms from Synonyms\n</code></pre>\n\n          </div>"}, "last_serial": 6029944, "releases": {"0.2.3": [{"comment_text": "", "digests": {"md5": "5425d1a34259fa49b6453b0f7c076172", "sha256": "1d238a18be5423ae37f57ebd88d95a71e526a19b10c82d683a0d6abe62154af5"}, "downloads": -1, "filename": "paws_acronym-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5425d1a34259fa49b6453b0f7c076172", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7148, "upload_time": "2019-10-24T19:48:40", "upload_time_iso_8601": "2019-10-24T19:48:40.703466Z", "url": "https://files.pythonhosted.org/packages/47/ed/a6fb7701653ad37f715411a2e3bbb9f04bfc9d45549ed7100256a860a4c1/paws_acronym-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0115d5c3eb282713bb1aa8f394e347c3", "sha256": "df1a86a40c9ec4b1be88635ddff1e59b077b94355c6c8d7c8fb7e7168aaa59be"}, "downloads": -1, "filename": "paws_acronym-0.2.3.tar.gz", "has_sig": false, "md5_digest": "0115d5c3eb282713bb1aa8f394e347c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5544, "upload_time": "2019-10-24T19:48:42", "upload_time_iso_8601": "2019-10-24T19:48:42.741504Z", "url": "https://files.pythonhosted.org/packages/24/7b/b4eb88344736a5290709c6b18d5b203d4ac81e8b69b1b5b2a453b9be4137/paws_acronym-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "82bec9eefd72fefa2ddb22ccc9af3052", "sha256": "c239258177386c1d9265c7d5ae6301217ec8c2b544e55d23ed89f85330841b6e"}, "downloads": -1, "filename": "paws_acronym-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "82bec9eefd72fefa2ddb22ccc9af3052", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7289, "upload_time": "2019-10-25T14:27:09", "upload_time_iso_8601": "2019-10-25T14:27:09.923278Z", "url": "https://files.pythonhosted.org/packages/e4/d8/d0738348feb84a65110128c5b451262dd3aa0e4c061a8f5dd37a01e2920f/paws_acronym-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c2aad495b4775c093785da0482856c7", "sha256": "b12dd88995cefc03c34a2d9acf6fd0d831d8d09309240cf6accf31c78b7d9b45"}, "downloads": -1, "filename": "paws_acronym-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0c2aad495b4775c093785da0482856c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5637, "upload_time": "2019-10-25T14:27:11", "upload_time_iso_8601": "2019-10-25T14:27:11.337967Z", "url": "https://files.pythonhosted.org/packages/de/38/9b2753b4aee475fb790ca777948b77133047340737c90d049b9ef9f37de9/paws_acronym-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "82bec9eefd72fefa2ddb22ccc9af3052", "sha256": "c239258177386c1d9265c7d5ae6301217ec8c2b544e55d23ed89f85330841b6e"}, "downloads": -1, "filename": "paws_acronym-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "82bec9eefd72fefa2ddb22ccc9af3052", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7289, "upload_time": "2019-10-25T14:27:09", "upload_time_iso_8601": "2019-10-25T14:27:09.923278Z", "url": "https://files.pythonhosted.org/packages/e4/d8/d0738348feb84a65110128c5b451262dd3aa0e4c061a8f5dd37a01e2920f/paws_acronym-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c2aad495b4775c093785da0482856c7", "sha256": "b12dd88995cefc03c34a2d9acf6fd0d831d8d09309240cf6accf31c78b7d9b45"}, "downloads": -1, "filename": "paws_acronym-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0c2aad495b4775c093785da0482856c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5637, "upload_time": "2019-10-25T14:27:11", "upload_time_iso_8601": "2019-10-25T14:27:11.337967Z", "url": "https://files.pythonhosted.org/packages/de/38/9b2753b4aee475fb790ca777948b77133047340737c90d049b9ef9f37de9/paws_acronym-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:44 2020"}