{"info": {"author": "Ge Yang", "author_email": "yangge1987@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Programming Language :: Python :: 3"], "description": "``params-proto``, A Python Decorator That Gives Your Model Parameters Super-power\n=================================================================================\n\n-  2019/06/11: Now supports ``tab-completion`` at the command line!\n-  2018/11/08: Now supports both python ``3.52`` as well as ``3.6``!\n   :bangbang::star:\n\nWhat is \u201cExperiment Parameter Hell\u201d?\n------------------------------------\n\n\u201cExperiemnt Parameter Hell\u201d occurs when you have more than twenty\nparameters for your ML project that are all defined as string/function\nparameters with ``click`` or ``argparse``. Sometimes these parameters\nare defined in a launch script and passes through five layers of\nfunction calls during an experiment.\n\nYour Python IDEs work very hard on static code-block analysis to intelligently\nmake you more productive, and the \u201cparameter hell\u201d breaks all of that.\n\nIn your ML project, you want to avoid using dictionaries or opaque\nargparse definitions as much as you can. You want to write those\nparameters **declaratively** instead. This way, your IDE can actually\nhelp you navigate through those layers of function calls.\n\nWriting documentation as uhm\u2026, man page?\n----------------------------------------\n\n``Params-Proto`` exposes your argument namespace\u2019s doc string as the\nusage note. For users of your code-block, there is no better help than the one\nthat comes with the script itself!\n\n   With ``params-proto``, your help is only one ``-h`` away :)\n\nAnd **Your code-block becomes the documentation.**\n\nWhy Use Params_Proto Instead of Click or Argparse?\n--------------------------------------------------\n\n**Because this is declarative**, which makes it easy to refactor your\ncode-block and find variable references.\n\n-  You want to place all of the arguments under a namespace that can be\n   statically checked.\n-  This allows your IDE to:\n\n   1. Find usage of each argument\n   2. jump from *anywhere* in your code-block base to the declaration of that\n      argument\n   3. refactor your argument name **in the entire code-block base**\n      automatically\n\n``Params_proto`` is the declarative way to write command line arguments,\nand is the way to go for ML projects.\n\nTab-completion for your script!\n-------------------------------\n\n``params_proto`` uses ``argparse`` together with ``argcomplete``, which\nenables command line autocomplete on tabs! To enable run\n\n.. code-block:: python\n\n   pip install params-proto\n   # then:\n   activate-global-python-argcomplete\n\nFor details, see ```argcomplete``\\ \u2019s\ndocumentation <https://github.com/kislyuk/argcomplete#installation>`__.\n\nSimple Example (with batteries included!!):battery:\n---------------------------------------------------\n\n.. code-block:: python\n\n   # this.code-block.py\n   from params_proto import cli_parse, BoolFlag, Proto\n\n   @cli_parse\n   class Args:\n       \"\"\"\n       [README]\n           Generator for the 2D Particle Map Dataset. See Usage help below:\n       \"\"\"\n       load = Proto(None, dtype=str, help=\"to visualize existing data located at this path\")\n       x_dim = Proto(2, help=\"The dimension for the observation space\")\n       data_size = Proto(20, help=\"The size of the dataset. Note we x2 because we generate transitions.\")\n       show_plot = BoolFlag(True, help=\"Shows the plot when true.\")\n\n   def train():\n       D = Discriminator(Args.x_dim)\n\n   def launch(**kwargs):\n       Args.update(kwargs)\n\n   if __name__ == \"__main__\":\n       launch(show_plot=True)\n\nnow, if you run this code-block, it gives you this help in the command line:\n\n.. code-block:: python\n\n   (/Users/ge/anaconda/envs/some-project) \u279c git:(master) python -m this.code-block.py -h\n   usage: generate.py [-h] [--load LOAD] [--x-dim X_DIM] [--data-size DATA_SIZE]\n                      [--show-plot]\n\n   [README] Generator for the 2D Particle Map Dataset. See Usage help below:\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     --load LOAD           to visualize existing data located at this path\n     --x-dim X_DIM         The dimension for the observation space\n     --data-size DATA_SIZE\n                           The size of the dataset. Note we x2 because we\n                           generate transitions.\n     --show-plot           Shows the plot when true.\n\nNow, isn\u2019t this awesome? :bang::stars:\n\nHow to override when calling from python\n----------------------------------------\n\nIt is very easy to over-ride the parameters when you call your function:\nhave most of your training code-block **directly** reference the parser\nnamespace (your configuration namespace really), and just monkey patch\nthe attribute.\n\n``params-proto`` works very well with the clound ML launch tool\n`jaynes <https://github.com/episodeyang/jaynes>`__. Take a look at the\nautomagic awesomeness of\n`jaynes <https://github.com/episodeyang/jaynes>`__:)\n\nTodo\n----\n\nDone\n~~~~\n\n-  [x] publish\n-  [x] add test\n-  [x] add ``python3.52`` test on top of ``python3.6`` test.\n\nInstallation\n------------\n\n.. code-block:: bash\n\n   pip install params-proto\n\nUsage\n-----\n\nTo use a python namespace to declare commandline argments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**Updated** We now use a ``Proto`` helper function to declare the\nargparse arguments! See example below:\n\nSimple example showing how to use python namespace to declare command line arguments:\n-------------------------------------------------------------------------------------\n\n**note**: for boolean, use ``bool`` or ``\"bool\"``. ``params_proto`` will\nautomatically use ``distutils.util.strtobool`` to parse it into\n``bool``. Details look\n`here <https://docs.python.org/2/distutils/apiref.html?highlight=distutils.util#distutils.util.strtobool>`__\n\n.. code-block:: python\n\n   from .params_proto import cli_parse, is_hidden, Proto, ParamsProto, proto_signature\n\n\n   def test_cli_proto():\n       @cli_parse\n       class G(ParamsProto):\n           \"\"\"Supervised MAML in tensorflow\"\"\"\n           npts = Proto(100, help=\"number of points to sample from distribution\")\n           num_epochs = Proto(70000, help=\"number of epochs to train\")\n           num_tasks = Proto(10, help=\"number of tasks in the inner loop\")\n           num_grad_steps = Proto(1, help=\"number of gradient descent steps in the inner loop\")\n           num_points_sampled = Proto(10, help=\"effectively the k-shot\")\n           eval_grad_steps = Proto([0, 1, 10], type=bool, help=\"the grad steps evaluated with full sample\")\n           fix_amp = Proto(False, help=\"controls the sampling, fix the amplitude of the sample distribution if True\")\n\n       assert G.npts == 100\n       G.npts = 10\n       assert G.npts == 10\n       assert vars(G) == {'npts': 10, 'num_epochs': 70000, 'num_tasks': 10, 'num_grad_steps': 1,\n                          'num_points_sampled': 10, 'fix_amp': False,\n                          'eval_grad_steps': [0, 1, 10]}\n       assert G._proto is not None, '_proto should exist'\n\nSetting Function Signatures using Python Namespace\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nsometimes, you have a function with wildcard keyword argument signature.\nIt is annoying to work with such functions because the static type\nanalysis of the IDE doesn\u2019t tell you what needs to go in.\n\nI originally wrote this decorator to help with that case, however the\ndynamically set function signature won\u2019t show up in the IDE in general.\nUse this for inspection purposes if you like.\n\nBelow si the usage example and the test case:\n\n.. code-block:: python\n\n   def test_proto_signature():\n       @cli_parse\n       class G(ParamsProto):\n           \"\"\"some parameter proto\"\"\"\n           n = 1\n           npts = Proto(100, help=\"number of points to sample from distribution\")\n           ok = True\n\n       @proto_signature(G._proto)\n       def main_demo(**kwargs):\n           print('npts = ', kwargs['npts'])\n           return kwargs['npts']\n\n       # First way is to use proto_signature decorator. The dynamically generated signature\n       # however does not show up in pyCharm. It does however, show during run time.\n       import inspect\n\n       assert main_demo(npts=10) == 10\n       print(\"main_demo<Function> signature:\", inspect.signature(main_demo))\n       assert str(inspect.signature(main_demo)) == \"(n=1, npts=100, ok=True)\"\n\nTo Develop\n----------\n\n.. code-block:: bash\n\n   git clone https://github.com/episodeyang/params_proto.git\n   cd params_proto\n   make dev\n\nTo test, run the following under both python ``3.52`` and ``3.6``.\n\n.. code-block:: bash\n\n   make test\n\nThis ``make dev`` command should build the wheel and install it in your\ncurrent python environment. Take a look at the\n`https://github.com/episodeyang/params_proto/blob/master/Makefile <https://github.com/episodeyang/params_proto/blob/master/Makefile>`__ for details.\n\n**To publish**, first update the version number, then do:\n\n.. code-block:: bash\n\n   make publish\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/episodeyang/params_proto", "keywords": "params_proto,decorator,argparse,argcomplete,auto-completion,autocomplete,shell arguments,argument parser", "license": "", "maintainer": "", "maintainer_email": "", "name": "params-proto", "package_url": "https://pypi.org/project/params-proto/", "platform": "", "project_url": "https://pypi.org/project/params-proto/", "project_urls": {"Homepage": "https://github.com/episodeyang/params_proto"}, "release_url": "https://pypi.org/project/params-proto/2.8.1/", "requires_dist": ["waterbear", "argparse", "argcomplete", "typing"], "requires_python": "", "summary": "A command line argument parsing utility using python class-based namespace for better IDE static auto-completion", "version": "2.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <ul>\n<li>2019/06/11: Now supports <tt><span class=\"pre\">tab-completion</span></tt> at the command line!</li>\n<li>2018/11/08: Now supports both python <tt>3.52</tt> as well as <tt>3.6</tt>!\n:bangbang::star:</li>\n</ul>\n<div id=\"what-is-experiment-parameter-hell\">\n<h2>What is \u201cExperiment Parameter Hell\u201d?</h2>\n<p>\u201cExperiemnt Parameter Hell\u201d occurs when you have more than twenty\nparameters for your ML project that are all defined as string/function\nparameters with <tt>click</tt> or <tt>argparse</tt>. Sometimes these parameters\nare defined in a launch script and passes through five layers of\nfunction calls during an experiment.</p>\n<p>Your Python IDEs work very hard on static code-block analysis to intelligently\nmake you more productive, and the \u201cparameter hell\u201d breaks all of that.</p>\n<p>In your ML project, you want to avoid using dictionaries or opaque\nargparse definitions as much as you can. You want to write those\nparameters <strong>declaratively</strong> instead. This way, your IDE can actually\nhelp you navigate through those layers of function calls.</p>\n</div>\n<div id=\"writing-documentation-as-uhm-man-page\">\n<h2>Writing documentation as uhm\u2026, man page?</h2>\n<p><tt><span class=\"pre\">Params-Proto</span></tt> exposes your argument namespace\u2019s doc string as the\nusage note. For users of your code-block, there is no better help than the one\nthat comes with the script itself!</p>\n<blockquote>\nWith <tt><span class=\"pre\">params-proto</span></tt>, your help is only one <tt><span class=\"pre\">-h</span></tt> away :)</blockquote>\n<p>And <strong>Your code-block becomes the documentation.</strong></p>\n</div>\n<div id=\"why-use-params-proto-instead-of-click-or-argparse\">\n<h2>Why Use Params_Proto Instead of Click or Argparse?</h2>\n<p><strong>Because this is declarative</strong>, which makes it easy to refactor your\ncode-block and find variable references.</p>\n<ul>\n<li>You want to place all of the arguments under a namespace that can be\nstatically checked.</li>\n<li>This allows your IDE to:<ol>\n<li>Find usage of each argument</li>\n<li>jump from <em>anywhere</em> in your code-block base to the declaration of that\nargument</li>\n<li>refactor your argument name <strong>in the entire code-block base</strong>\nautomatically</li>\n</ol>\n</li>\n</ul>\n<p><tt>Params_proto</tt> is the declarative way to write command line arguments,\nand is the way to go for ML projects.</p>\n</div>\n<div id=\"tab-completion-for-your-script\">\n<h2>Tab-completion for your script!</h2>\n<p><tt>params_proto</tt> uses <tt>argparse</tt> together with <tt>argcomplete</tt>, which\nenables command line autocomplete on tabs! To enable run</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">params</span><span class=\"o\">-</span><span class=\"n\">proto</span>\n<span class=\"c1\"># then:</span>\n<span class=\"n\">activate</span><span class=\"o\">-</span><span class=\"k\">global</span><span class=\"o\">-</span><span class=\"n\">python</span><span class=\"o\">-</span><span class=\"n\">argcomplete</span>\n</pre>\n<p>For details, see <tt>`argcomplete</tt>\u2019s\ndocumentation &lt;<a href=\"https://github.com/kislyuk/argcomplete#installation\" rel=\"nofollow\">https://github.com/kislyuk/argcomplete#installation</a>&gt;`__.</p>\n</div>\n<div id=\"simple-example-with-batteries-included-battery\">\n<h2>Simple Example (with batteries included!!):battery:</h2>\n<pre><span class=\"c1\"># this.code-block.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">params_proto</span> <span class=\"kn\">import</span> <span class=\"n\">cli_parse</span><span class=\"p\">,</span> <span class=\"n\">BoolFlag</span><span class=\"p\">,</span> <span class=\"n\">Proto</span>\n\n<span class=\"nd\">@cli_parse</span>\n<span class=\"k\">class</span> <span class=\"nc\">Args</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"\n    [README]\n        Generator for the 2D Particle Map Dataset. See Usage help below:\n    \"\"\"</span>\n    <span class=\"n\">load</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"to visualize existing data located at this path\"</span><span class=\"p\">)</span>\n    <span class=\"n\">x_dim</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"The dimension for the observation space\"</span><span class=\"p\">)</span>\n    <span class=\"n\">data_size</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"The size of the dataset. Note we x2 because we generate transitions.\"</span><span class=\"p\">)</span>\n    <span class=\"n\">show_plot</span> <span class=\"o\">=</span> <span class=\"n\">BoolFlag</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"Shows the plot when true.\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">train</span><span class=\"p\">():</span>\n    <span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"n\">Discriminator</span><span class=\"p\">(</span><span class=\"n\">Args</span><span class=\"o\">.</span><span class=\"n\">x_dim</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">Args</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">launch</span><span class=\"p\">(</span><span class=\"n\">show_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>now, if you run this code-block, it gives you this help in the command line:</p>\n<pre><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">ge</span><span class=\"o\">/</span><span class=\"n\">anaconda</span><span class=\"o\">/</span><span class=\"n\">envs</span><span class=\"o\">/</span><span class=\"n\">some</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"p\">)</span> <span class=\"err\">\u279c</span> <span class=\"n\">git</span><span class=\"p\">:(</span><span class=\"n\">master</span><span class=\"p\">)</span> <span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">this</span><span class=\"o\">.</span><span class=\"n\">code</span><span class=\"o\">-</span><span class=\"n\">block</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"o\">-</span><span class=\"n\">h</span>\n<span class=\"n\">usage</span><span class=\"p\">:</span> <span class=\"n\">generate</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">load</span> <span class=\"n\">LOAD</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"n\">dim</span> <span class=\"n\">X_DIM</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">size</span> <span class=\"n\">DATA_SIZE</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">plot</span><span class=\"p\">]</span>\n\n<span class=\"p\">[</span><span class=\"n\">README</span><span class=\"p\">]</span> <span class=\"n\">Generator</span> <span class=\"k\">for</span> <span class=\"n\">the</span> <span class=\"mi\">2</span><span class=\"n\">D</span> <span class=\"n\">Particle</span> <span class=\"n\">Map</span> <span class=\"n\">Dataset</span><span class=\"o\">.</span> <span class=\"n\">See</span> <span class=\"n\">Usage</span> <span class=\"n\">help</span> <span class=\"n\">below</span><span class=\"p\">:</span>\n\n<span class=\"n\">optional</span> <span class=\"n\">arguments</span><span class=\"p\">:</span>\n  <span class=\"o\">-</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">help</span>            <span class=\"n\">show</span> <span class=\"n\">this</span> <span class=\"n\">help</span> <span class=\"n\">message</span> <span class=\"ow\">and</span> <span class=\"n\">exit</span>\n  <span class=\"o\">--</span><span class=\"n\">load</span> <span class=\"n\">LOAD</span>           <span class=\"n\">to</span> <span class=\"n\">visualize</span> <span class=\"n\">existing</span> <span class=\"n\">data</span> <span class=\"n\">located</span> <span class=\"n\">at</span> <span class=\"n\">this</span> <span class=\"n\">path</span>\n  <span class=\"o\">--</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"n\">dim</span> <span class=\"n\">X_DIM</span>         <span class=\"n\">The</span> <span class=\"n\">dimension</span> <span class=\"k\">for</span> <span class=\"n\">the</span> <span class=\"n\">observation</span> <span class=\"n\">space</span>\n  <span class=\"o\">--</span><span class=\"n\">data</span><span class=\"o\">-</span><span class=\"n\">size</span> <span class=\"n\">DATA_SIZE</span>\n                        <span class=\"n\">The</span> <span class=\"n\">size</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">dataset</span><span class=\"o\">.</span> <span class=\"n\">Note</span> <span class=\"n\">we</span> <span class=\"n\">x2</span> <span class=\"n\">because</span> <span class=\"n\">we</span>\n                        <span class=\"n\">generate</span> <span class=\"n\">transitions</span><span class=\"o\">.</span>\n  <span class=\"o\">--</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">plot</span>           <span class=\"n\">Shows</span> <span class=\"n\">the</span> <span class=\"n\">plot</span> <span class=\"n\">when</span> <span class=\"n\">true</span><span class=\"o\">.</span>\n</pre>\n<p>Now, isn\u2019t this awesome? :bang::stars:</p>\n</div>\n<div id=\"how-to-override-when-calling-from-python\">\n<h2>How to override when calling from python</h2>\n<p>It is very easy to over-ride the parameters when you call your function:\nhave most of your training code-block <strong>directly</strong> reference the parser\nnamespace (your configuration namespace really), and just monkey patch\nthe attribute.</p>\n<p><tt><span class=\"pre\">params-proto</span></tt> works very well with the clound ML launch tool\n<a href=\"https://github.com/episodeyang/jaynes\" rel=\"nofollow\">jaynes</a>. Take a look at the\nautomagic awesomeness of\n<a href=\"https://github.com/episodeyang/jaynes\" rel=\"nofollow\">jaynes</a>:)</p>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<h2 id=\"done\"><span class=\"section-subtitle\">Done</span></h2>\n<ul>\n<li>[x] publish</li>\n<li>[x] add test</li>\n<li>[x] add <tt>python3.52</tt> test on top of <tt>python3.6</tt> test.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install params-proto\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<h2 id=\"to-use-a-python-namespace-to-declare-commandline-argments\"><span class=\"section-subtitle\">To use a python namespace to declare commandline argments</span></h2>\n<p><strong>Updated</strong> We now use a <tt>Proto</tt> helper function to declare the\nargparse arguments! See example below:</p>\n</div>\n<div id=\"simple-example-showing-how-to-use-python-namespace-to-declare-command-line-arguments\">\n<h2>Simple example showing how to use python namespace to declare command line arguments:</h2>\n<p><strong>note</strong>: for boolean, use <tt>bool</tt> or <tt>\"bool\"</tt>. <tt>params_proto</tt> will\nautomatically use <tt>distutils.util.strtobool</tt> to parse it into\n<tt>bool</tt>. Details look\n<a href=\"https://docs.python.org/2/distutils/apiref.html?highlight=distutils.util#distutils.util.strtobool\" rel=\"nofollow\">here</a></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.params_proto</span> <span class=\"kn\">import</span> <span class=\"n\">cli_parse</span><span class=\"p\">,</span> <span class=\"n\">is_hidden</span><span class=\"p\">,</span> <span class=\"n\">Proto</span><span class=\"p\">,</span> <span class=\"n\">ParamsProto</span><span class=\"p\">,</span> <span class=\"n\">proto_signature</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_cli_proto</span><span class=\"p\">():</span>\n    <span class=\"nd\">@cli_parse</span>\n    <span class=\"k\">class</span> <span class=\"nc\">G</span><span class=\"p\">(</span><span class=\"n\">ParamsProto</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Supervised MAML in tensorflow\"\"\"</span>\n        <span class=\"n\">npts</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"number of points to sample from distribution\"</span><span class=\"p\">)</span>\n        <span class=\"n\">num_epochs</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"mi\">70000</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"number of epochs to train\"</span><span class=\"p\">)</span>\n        <span class=\"n\">num_tasks</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"number of tasks in the inner loop\"</span><span class=\"p\">)</span>\n        <span class=\"n\">num_grad_steps</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"number of gradient descent steps in the inner loop\"</span><span class=\"p\">)</span>\n        <span class=\"n\">num_points_sampled</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"effectively the k-shot\"</span><span class=\"p\">)</span>\n        <span class=\"n\">eval_grad_steps</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"the grad steps evaluated with full sample\"</span><span class=\"p\">)</span>\n        <span class=\"n\">fix_amp</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"controls the sampling, fix the amplitude of the sample distribution if True\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">npts</span> <span class=\"o\">==</span> <span class=\"mi\">100</span>\n    <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">npts</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n    <span class=\"k\">assert</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">npts</span> <span class=\"o\">==</span> <span class=\"mi\">10</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'npts'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'num_epochs'</span><span class=\"p\">:</span> <span class=\"mi\">70000</span><span class=\"p\">,</span> <span class=\"s1\">'num_tasks'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'num_grad_steps'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                       <span class=\"s1\">'num_points_sampled'</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'fix_amp'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                       <span class=\"s1\">'eval_grad_steps'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]}</span>\n    <span class=\"k\">assert</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">_proto</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">'_proto should exist'</span>\n</pre>\n<div id=\"setting-function-signatures-using-python-namespace\">\n<h3>Setting Function Signatures using Python Namespace</h3>\n<p>sometimes, you have a function with wildcard keyword argument signature.\nIt is annoying to work with such functions because the static type\nanalysis of the IDE doesn\u2019t tell you what needs to go in.</p>\n<p>I originally wrote this decorator to help with that case, however the\ndynamically set function signature won\u2019t show up in the IDE in general.\nUse this for inspection purposes if you like.</p>\n<p>Below si the usage example and the test case:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_proto_signature</span><span class=\"p\">():</span>\n    <span class=\"nd\">@cli_parse</span>\n    <span class=\"k\">class</span> <span class=\"nc\">G</span><span class=\"p\">(</span><span class=\"n\">ParamsProto</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"some parameter proto\"\"\"</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">npts</span> <span class=\"o\">=</span> <span class=\"n\">Proto</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">\"number of points to sample from distribution\"</span><span class=\"p\">)</span>\n        <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@proto_signature</span><span class=\"p\">(</span><span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">_proto</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">main_demo</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'npts = '</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'npts'</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'npts'</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># First way is to use proto_signature decorator. The dynamically generated signature</span>\n    <span class=\"c1\"># however does not show up in pyCharm. It does however, show during run time.</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">main_demo</span><span class=\"p\">(</span><span class=\"n\">npts</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">10</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"main_demo&lt;Function&gt; signature:\"</span><span class=\"p\">,</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">main_demo</span><span class=\"p\">))</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">main_demo</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"s2\">\"(n=1, npts=100, ok=True)\"</span>\n</pre>\n</div>\n</div>\n<div id=\"to-develop\">\n<h2>To Develop</h2>\n<pre>git clone https://github.com/episodeyang/params_proto.git\n<span class=\"nb\">cd</span> params_proto\nmake dev\n</pre>\n<p>To test, run the following under both python <tt>3.52</tt> and <tt>3.6</tt>.</p>\n<pre>make <span class=\"nb\">test</span>\n</pre>\n<p>This <tt>make dev</tt> command should build the wheel and install it in your\ncurrent python environment. Take a look at the\n<a href=\"https://github.com/episodeyang/params_proto/blob/master/Makefile\" rel=\"nofollow\">https://github.com/episodeyang/params_proto/blob/master/Makefile</a> for details.</p>\n<p><strong>To publish</strong>, first update the version number, then do:</p>\n<pre>make publish\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6528569, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "7ce5c6d8ab460865a424d2548ee2944f", "sha256": "21c7195c6876d6fd4d56cf576af9e4f1ec5dbedc1ab50a0408550fd74f74bb73"}, "downloads": -1, "filename": "params_proto-0.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7ce5c6d8ab460865a424d2548ee2944f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4515, "upload_time": "2017-09-06T09:43:00", "upload_time_iso_8601": "2017-09-06T09:43:00.076586Z", "url": "https://files.pythonhosted.org/packages/fa/74/04a4b763d1afdf81a2555ef1249b5922191af106bc7d3c8d0002cae8dc27/params_proto-0.0.0-py3-none-any.whl", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "a9cde59f6dbece820a1ee3645d0d4f07", "sha256": "5879086f6752e5caba4ec245e83d374efca60423407c59c72635f4c929516294"}, "downloads": -1, "filename": "params_proto-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a9cde59f6dbece820a1ee3645d0d4f07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4575, "upload_time": "2017-09-06T09:48:22", "upload_time_iso_8601": "2017-09-06T09:48:22.883667Z", "url": "https://files.pythonhosted.org/packages/ec/77/b8f83ac0253b5eb8eff2e23ae29b1faa16c7a8fdfc7a9c5db9cd6d5aa16a/params_proto-0.0.1-py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "c23089ce502db72b8fdedb5184a56af0", "sha256": "689fe88a3becdf8a5ae9aa4104e939a9a0c4f21719b983082e7ec2ee4158a1da"}, "downloads": -1, "filename": "params_proto-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c23089ce502db72b8fdedb5184a56af0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4584, "upload_time": "2017-09-06T20:31:38", "upload_time_iso_8601": "2017-09-06T20:31:38.481126Z", "url": "https://files.pythonhosted.org/packages/4d/b6/9ebd9fc1047c342a53af784f9556cfc7661756567e1766571a6ace40d260/params_proto-0.5.0-py3-none-any.whl", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "2c1f3cecb832191a03be0d19be387d87", "sha256": "9f621c6ac8cd3291e8b81094605f26ea6299eb8345424b103c31f6f01d522b5c"}, "downloads": -1, "filename": "params_proto-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2c1f3cecb832191a03be0d19be387d87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6836, "upload_time": "2017-09-07T06:31:11", "upload_time_iso_8601": "2017-09-07T06:31:11.083856Z", "url": "https://files.pythonhosted.org/packages/29/67/c7f6d811f1e5de4b6f1080ca250f13720ab46381ea944a07a3dde40570b8/params_proto-0.5.2-py3-none-any.whl", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "76c8c36a69aa0f92bd241491fb18b8ec", "sha256": "abec10e1d0ef2e53737ac28452041ea1d4adf69e1e01ded68b028f5176433bfa"}, "downloads": -1, "filename": "params_proto-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "76c8c36a69aa0f92bd241491fb18b8ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6904, "upload_time": "2017-09-07T06:42:05", "upload_time_iso_8601": "2017-09-07T06:42:05.898387Z", "url": "https://files.pythonhosted.org/packages/9e/9c/86a40e0e822ce6ea10983e91a6929671299baf25d592f8aaf1e9fe16762d/params_proto-0.5.3-py3-none-any.whl", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "0672cbedbba6fca1ad91eb860f824d19", "sha256": "7a6eccd2dd34bb1b8188d88ea8f20486666b42669ab6ea8c102c3fefe3839115"}, "downloads": -1, "filename": "params_proto-0.5.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0672cbedbba6fca1ad91eb860f824d19", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6947, "upload_time": "2017-09-07T06:44:16", "upload_time_iso_8601": "2017-09-07T06:44:16.799951Z", "url": "https://files.pythonhosted.org/packages/5b/93/544b36275f4fe4b94b67df38ddd1701e9e411f98dc6358aaa41aa6cbbd52/params_proto-0.5.4-py3-none-any.whl", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "3b390d2eab8bfdb08892b2750441fbbd", "sha256": "800f9fc17951da26951f5aff4dfce8627c38b075aab8dcbeb0e9f29c541462e2"}, "downloads": -1, "filename": "params_proto-0.5.5-py3-none-any.whl", "has_sig": false, "md5_digest": "3b390d2eab8bfdb08892b2750441fbbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6950, "upload_time": "2017-09-07T06:47:22", "upload_time_iso_8601": "2017-09-07T06:47:22.101866Z", "url": "https://files.pythonhosted.org/packages/9a/46/d77611cb506d115dc3f1ce45e7cd19023fde65ff3377c249a844b0122174/params_proto-0.5.5-py3-none-any.whl", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "454a0e0231264d5dd56348014b894b3f", "sha256": "996599832a414506029e1afbe57f8e814389f3a4b8432c610743414f6b93ea84"}, "downloads": -1, "filename": "params_proto-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "454a0e0231264d5dd56348014b894b3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7872, "upload_time": "2017-09-07T19:07:59", "upload_time_iso_8601": "2017-09-07T19:07:59.040315Z", "url": "https://files.pythonhosted.org/packages/43/c8/6f339e34530d0a89872e58aa7cb30b686e1d5ad3efb5e43c44a85a0dfa87/params_proto-1.0.0-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "bc1b5a80aeb3788b3a12940d5c199af2", "sha256": "b3ca2df925b8e8ed1e2db7e69a55e709ae37cd542a14780caf604cde3953ecad"}, "downloads": -1, "filename": "params_proto-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bc1b5a80aeb3788b3a12940d5c199af2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8342, "upload_time": "2017-09-08T00:22:23", "upload_time_iso_8601": "2017-09-08T00:22:23.318364Z", "url": "https://files.pythonhosted.org/packages/c7/2b/79ee3012215c565dae0386f53f9d4532aeb35558ee4cb28b038f0e7c2a9e/params_proto-1.1.0-py3-none-any.whl", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "5dd8abb02f37da62d856f316020b0ab3", "sha256": "2f045041f771cef682756a5c5ed14d471577e669338d681c9fb8fdd05c79117f"}, "downloads": -1, "filename": "params_proto-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5dd8abb02f37da62d856f316020b0ab3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8374, "upload_time": "2017-09-11T01:47:29", "upload_time_iso_8601": "2017-09-11T01:47:29.573757Z", "url": "https://files.pythonhosted.org/packages/eb/a5/08d4f97b19363f6378f8da2db485def80a0a03628a2259005cdf807680ab/params_proto-1.1.1-py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "91dff481d2450ffa129dc89162fb51a2", "sha256": "16970e1441e882977f0b6d2bb75e8550d04eb4e673fc4bcf73f0306d7d83e8fa"}, "downloads": -1, "filename": "params_proto-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "91dff481d2450ffa129dc89162fb51a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8479, "upload_time": "2017-09-11T03:55:34", "upload_time_iso_8601": "2017-09-11T03:55:34.553723Z", "url": "https://files.pythonhosted.org/packages/fa/3c/0a605f4300d1eb8a9bc87b24582deb0d1a5f3c26c6983e51722899158850/params_proto-1.2.0-py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "f473cc26769162c146017a5816459f4e", "sha256": "5233b9e6da1497d756cd3d008fdbf84f4a1899cb0add4c5fbf84e73b5f29f586"}, "downloads": -1, "filename": "params_proto-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f473cc26769162c146017a5816459f4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8499, "upload_time": "2017-09-11T04:02:28", "upload_time_iso_8601": "2017-09-11T04:02:28.832262Z", "url": "https://files.pythonhosted.org/packages/32/a8/70f5aa6f70e3fc3e2270feda3bf4e2124166ba16a702133233e3280c7821/params_proto-1.3.0-py3-none-any.whl", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "0dd080c1f29ddc618ea5462c1b55d9fc", "sha256": "1961ff68190051a1abc5b39498cae6b9fdb8370243f07c5ddf6f2b690413f4e7"}, "downloads": -1, "filename": "params_proto-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0dd080c1f29ddc618ea5462c1b55d9fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8188, "upload_time": "2018-01-13T09:01:08", "upload_time_iso_8601": "2018-01-13T09:01:08.336150Z", "url": "https://files.pythonhosted.org/packages/ac/ea/914dccccc800702dbdde426e660c437ef14f9ee9a57eabb90a06005201cc/params_proto-2.0.0-py3-none-any.whl", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "28e5ac0030fc923147476b95d234af15", "sha256": "59d1d982f448a4906cfe2f0848b789883142e96442604739ebed5de83a376636"}, "downloads": -1, "filename": "params_proto-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "28e5ac0030fc923147476b95d234af15", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8185, "upload_time": "2018-01-13T09:05:27", "upload_time_iso_8601": "2018-01-13T09:05:27.830516Z", "url": "https://files.pythonhosted.org/packages/a6/ee/f1bdc86ebe8d7a3d59e9fe0d8e857360d3a71ee68ae0d115df2921da7470/params_proto-2.0.1-py3-none-any.whl", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "37f19c4949b3b9f313d2747ad0d35ae9", "sha256": "46bdde0da9ca88d1995d28fbd7668e2d8d4f1d4b43ff45d4b85f935f093a4d48"}, "downloads": -1, "filename": "params_proto-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "37f19c4949b3b9f313d2747ad0d35ae9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8468, "upload_time": "2018-01-14T06:23:11", "upload_time_iso_8601": "2018-01-14T06:23:11.853086Z", "url": "https://files.pythonhosted.org/packages/b9/69/09e7d3614927fe1c9eeafdd3658677c081575af54e1b7b38037cce8d75d9/params_proto-2.0.2-py3-none-any.whl", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "992f34cfbde5251578a602f4f068d3e8", "sha256": "5709af1d3340b680a5cba56feb39df0a7381ddd8c77b43e875aea1e1282be921"}, "downloads": -1, "filename": "params_proto-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "992f34cfbde5251578a602f4f068d3e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8498, "upload_time": "2018-01-14T06:32:06", "upload_time_iso_8601": "2018-01-14T06:32:06.250576Z", "url": "https://files.pythonhosted.org/packages/75/33/7fbae0f432a73330e4ee16305c2dbc58d71f1d6f85929dafddad8bd34cff/params_proto-2.0.3-py3-none-any.whl", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "241d22691ce7992f775cc4d93ce3c62e", "sha256": "60c8ca60a6dea35d198fd297dbaf492a9af9194d9e245800b70d40ef26e36306"}, "downloads": -1, "filename": "params_proto-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "241d22691ce7992f775cc4d93ce3c62e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8543, "upload_time": "2018-01-14T18:23:39", "upload_time_iso_8601": "2018-01-14T18:23:39.796251Z", "url": "https://files.pythonhosted.org/packages/e8/11/527b1ea7f48f129e0813f3c785d238b7b98bc4b92f688a2a2ab1d08dd954/params_proto-2.1.0-py3-none-any.whl", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "124a1e6bc7971f0fcb843c02ea08ded1", "sha256": "0dcc53beb444d4a69fb3ae5234c9665df99c0640d41afbb6d3f3c274ea15131e"}, "downloads": -1, "filename": "params_proto-2.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "124a1e6bc7971f0fcb843c02ea08ded1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8758, "upload_time": "2018-01-14T20:28:23", "upload_time_iso_8601": "2018-01-14T20:28:23.986264Z", "url": "https://files.pythonhosted.org/packages/af/39/8414cc302ed55997aecb7bbcd91754aca8247e83b52f12fd939056df9f07/params_proto-2.2.0-py3-none-any.whl", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "893d0a4d801b4d0bc2669a4c2492646d", "sha256": "f7050643cde4a11e0ca98181c3548662bf87e88b11c905e51e544b389cf518c5"}, "downloads": -1, "filename": "params_proto-2.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "893d0a4d801b4d0bc2669a4c2492646d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8745, "upload_time": "2018-01-14T21:27:17", "upload_time_iso_8601": "2018-01-14T21:27:17.668777Z", "url": "https://files.pythonhosted.org/packages/f5/9e/7800dc4a06ac7fcf77b44d2f98cc046b525198f4f535f56c57c33cea46b1/params_proto-2.2.1-py3-none-any.whl", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "d414c5f7a59e26b4e5871e269220b00f", "sha256": "3b487213800221815eb1bd3efcbe4e0ded6bb64627c56f26581e427d6468e4df"}, "downloads": -1, "filename": "params_proto-2.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d414c5f7a59e26b4e5871e269220b00f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6594, "upload_time": "2018-04-20T18:14:59", "upload_time_iso_8601": "2018-04-20T18:14:59.520198Z", "url": "https://files.pythonhosted.org/packages/12/ae/8f8a93f26ef82260dd44d7b102e249b7f7e84af4ceb06255026a40ff8ba8/params_proto-2.3.0-py3-none-any.whl", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "6810fb63a4ab7d892ea50075a513e0c5", "sha256": "f2902ecaa178d66f17b7053d585437250dc72f4e5f66b1360891c56832ea850e"}, "downloads": -1, "filename": "params_proto-2.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6810fb63a4ab7d892ea50075a513e0c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8304, "upload_time": "2019-06-12T01:43:33", "upload_time_iso_8601": "2019-06-12T01:43:33.012481Z", "url": "https://files.pythonhosted.org/packages/3e/dc/117bbd05b2b480cb8e04a0a5e266ce50618dce680ec34e297453b45ec477/params_proto-2.4.0-py3-none-any.whl", "yanked": false}], "2.5.2": [{"comment_text": "", "digests": {"md5": "9081c7613966fe7b838cd614cf3e70a1", "sha256": "2b85d6991d6ac560ccc94b90ce783c3bca2ab5a12fbed10d90ca8fba173ec1b7"}, "downloads": -1, "filename": "params_proto-2.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9081c7613966fe7b838cd614cf3e70a1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12350, "upload_time": "2019-11-09T14:05:47", "upload_time_iso_8601": "2019-11-09T14:05:47.270695Z", "url": "https://files.pythonhosted.org/packages/be/ea/0f105db909f4c1a109cbfed6c5a59a54fab61bcd795bb0baa2385111b6e2/params_proto-2.5.2-py3-none-any.whl", "yanked": false}], "2.6.0": [{"comment_text": "", "digests": {"md5": "034f9a728bb94d52f01e8cd96ad29a18", "sha256": "656b11a60ef341ac00d3dabfb1f46ca5efd210a6aeddfc2244cd34d5b66c5cef"}, "downloads": -1, "filename": "params_proto-2.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "034f9a728bb94d52f01e8cd96ad29a18", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13792, "upload_time": "2019-11-17T21:54:18", "upload_time_iso_8601": "2019-11-17T21:54:18.810413Z", "url": "https://files.pythonhosted.org/packages/e1/72/55eed21f61cc8ba425feea0fce3df7c95247c5c6d044221fab292cfd8694/params_proto-2.6.0-py3-none-any.whl", "yanked": false}], "2.7.2": [{"comment_text": "", "digests": {"md5": "e174fc152960e5c65c4c24de9222e61e", "sha256": "a5a01b469128453a03c9929ac18bc8e2e57c215d4001942de07b0573ad9c3ec1"}, "downloads": -1, "filename": "params_proto-2.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e174fc152960e5c65c4c24de9222e61e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15758, "upload_time": "2019-12-15T09:55:37", "upload_time_iso_8601": "2019-12-15T09:55:37.431212Z", "url": "https://files.pythonhosted.org/packages/41/21/67b93c18a772f82685d3c0aba9b4b3ae4f0eaa3be41624bc9bd54eb0d542/params_proto-2.7.2-py3-none-any.whl", "yanked": false}], "2.7.3": [{"comment_text": "", "digests": {"md5": "1603e87a3c3b9634c8c530905e3adbd2", "sha256": "1e01b779e95ab7fb6046703c33d571adc6c6870937fedfc6e102b9f3149d9a9e"}, "downloads": -1, "filename": "params_proto-2.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1603e87a3c3b9634c8c530905e3adbd2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16073, "upload_time": "2019-12-16T11:19:17", "upload_time_iso_8601": "2019-12-16T11:19:17.703740Z", "url": "https://files.pythonhosted.org/packages/04/e2/0a3e3b173f6bb605fc042afc4feaf47632bdfce63367a3ed0c7bea4a9f6d/params_proto-2.7.3-py3-none-any.whl", "yanked": false}], "2.7.4": [{"comment_text": "", "digests": {"md5": "644cd9441222c73886cb9c2228b4d49c", "sha256": "2dff2cf7bb79bae72f659393f68bf4af45bfd25bba16b56a0fbf4241a05b2826"}, "downloads": -1, "filename": "params_proto-2.7.4-py3-none-any.whl", "has_sig": false, "md5_digest": "644cd9441222c73886cb9c2228b4d49c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16067, "upload_time": "2019-12-18T00:58:29", "upload_time_iso_8601": "2019-12-18T00:58:29.667809Z", "url": "https://files.pythonhosted.org/packages/e8/95/41daa4c7eac30609c73d44be7ac2ad4354981fcdc4007a9fe1a72ba7b0a4/params_proto-2.7.4-py3-none-any.whl", "yanked": false}], "2.7.5": [{"comment_text": "", "digests": {"md5": "b1a960089dfac9a242d02799e2c721e8", "sha256": "50e553758f4691893c42b8e11c123343f449fd837af2b356664d2973db8d069a"}, "downloads": -1, "filename": "params_proto-2.7.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b1a960089dfac9a242d02799e2c721e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16104, "upload_time": "2020-01-05T00:50:44", "upload_time_iso_8601": "2020-01-05T00:50:44.368239Z", "url": "https://files.pythonhosted.org/packages/5b/db/d56fe5aa3ce3cef4be10ef188f97510beff77c3de8a4b615e19c324726cb/params_proto-2.7.5-py3-none-any.whl", "yanked": false}], "2.7.6": [{"comment_text": "", "digests": {"md5": "5ebfbede99cc91ed0ab881dfaf3cc491", "sha256": "5d7f90454e60c0707a9d29a85ee9524326ec1d229ad4a84a4411203aa393511a"}, "downloads": -1, "filename": "params_proto-2.7.6-py3-none-any.whl", "has_sig": false, "md5_digest": "5ebfbede99cc91ed0ab881dfaf3cc491", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16096, "upload_time": "2020-01-05T05:44:01", "upload_time_iso_8601": "2020-01-05T05:44:01.535315Z", "url": "https://files.pythonhosted.org/packages/7b/1e/107ea2e9216a417742d5b2de4a5124a3c3d4fee3adc2ca386fac2c86ac52/params_proto-2.7.6-py3-none-any.whl", "yanked": false}], "2.7.7": [{"comment_text": "", "digests": {"md5": "7fa92416aa8528c01be5cfcbf7c5f9d7", "sha256": "c4fa0b990f3345632136d4bb3c6fee9fb40948c33a19b0003bc42811845a64ff"}, "downloads": -1, "filename": "params_proto-2.7.7-py3-none-any.whl", "has_sig": false, "md5_digest": "7fa92416aa8528c01be5cfcbf7c5f9d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16171, "upload_time": "2020-01-16T02:40:11", "upload_time_iso_8601": "2020-01-16T02:40:11.483150Z", "url": "https://files.pythonhosted.org/packages/00/2e/7db9d37ea4a2a0652b93d774735bec7cec720e6ca716a34c7fecb1c5eca1/params_proto-2.7.7-py3-none-any.whl", "yanked": false}], "2.8.0": [{"comment_text": "", "digests": {"md5": "081eefc089ecca845b0ef68a58f9af63", "sha256": "c071e452a983f6ad56cba7b86b02284df1b75092e0c24d2fcc618c60d90f3e07"}, "downloads": -1, "filename": "params_proto-2.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "081eefc089ecca845b0ef68a58f9af63", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16168, "upload_time": "2020-01-20T22:46:12", "upload_time_iso_8601": "2020-01-20T22:46:12.318769Z", "url": "https://files.pythonhosted.org/packages/e0/84/de4b103170ae444d64c23892518487d3ab0fe88e6e0dc1b416039ec14b58/params_proto-2.8.0-py3-none-any.whl", "yanked": false}], "2.8.1": [{"comment_text": "", "digests": {"md5": "5eb850ac9b56e09e03661fdbd695135d", "sha256": "7664933248521d5c80c6526d8bef466880de35956f4b44dad3a55ca40f1343e8"}, "downloads": -1, "filename": "params_proto-2.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5eb850ac9b56e09e03661fdbd695135d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16174, "upload_time": "2020-01-27T20:52:00", "upload_time_iso_8601": "2020-01-27T20:52:00.402782Z", "url": "https://files.pythonhosted.org/packages/82/79/6b9f864475f99e0d5e2854f8361a0568325442b78632bd5839e1945cd282/params_proto-2.8.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5eb850ac9b56e09e03661fdbd695135d", "sha256": "7664933248521d5c80c6526d8bef466880de35956f4b44dad3a55ca40f1343e8"}, "downloads": -1, "filename": "params_proto-2.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5eb850ac9b56e09e03661fdbd695135d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16174, "upload_time": "2020-01-27T20:52:00", "upload_time_iso_8601": "2020-01-27T20:52:00.402782Z", "url": "https://files.pythonhosted.org/packages/82/79/6b9f864475f99e0d5e2854f8361a0568325442b78632bd5839e1945cd282/params_proto-2.8.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:58:31 2020"}