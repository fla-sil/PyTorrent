{"info": {"author": "Federico Bianchi", "author_email": "f.bianchi@unibocconi.it", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "=========================================\nCompass-aligned Distributional Embeddings\n=========================================\n\n\n.. image:: https://img.shields.io/pypi/v/cade.svg\n        :target: https://pypi.python.org/pypi/cade\n\n.. image:: https://travis-ci.com/vinid/cade.svg\n        :target: https://travis-ci.com/vinid/cade\n\n\nThis package contains Python code to generate compass aligned distributional embeddings.\nComparing word vectors in different corpora requires alignment.\nWe propose a method to aligned distributional representation based on word2vec.\nThis method is efficient and it is based on a simple heuristic: we train a general word embedding, **the compass**\nand we use this embedding to freeze one of the layers of the CBOW architecture.\n\nSee the `AAAI\n<https://aaai.org/ojs/index.php/AAAI/article/view/4594>`_ and  `Arxiv pre-print\n<https://arxiv.org/abs/2004.06519>`_ papers for more details.\n\n.. image:: https://raw.githubusercontent.com/vinid/cade/master/img/CADE.png\n   :width: 400pt\n\nReference\n---------\n\nThis work is based on the following papers: `AAAI\n<https://aaai.org/ojs/index.php/AAAI/article/view/4594>`_ and `Arxiv-preprint\n<https://arxiv.org/abs/2004.06519>`_\n\n+ Bianchi, F., Di Carlo, V., Nicoli, P., & Palmonari, M. (2020). **Compass-aligned Distributional Embeddings for Studying Semantic Differences across Corpora**. Arxiv. https://arxiv.org/abs/2004.06519\n+ Di Carlo, V., Bianchi, F., & Palmonari, M. (2019). **Training Temporal Word Embeddings with a Compass**. Proceedings of the AAAI Conference on Artificial Intelligence, 33(01), 6326-6334. https://doi.org/10.1609/aaai.v33i01.33016326\n\n\nAbstract\n--------\n\nWord2vec is one of the most used algorithms to generate word embeddings because of a good mix of efficiency, quality of the generated representations and cognitive grounding. However, word meaning is not static and depends on the context in which words are used. Differences in word meaning that depends on time, location, topic, and other factors, can be studied by analyzing embeddings generated from different corpora in collections that are representative of these factors. For example, language evolution can be studied using a collection of news articles published in different time periods. In this paper, we present a general framework to support cross-corpora language studies with word embeddings, where embeddings generated from different corpora can be compared to find correspondences and differences in meaning across the corpora. CADE is the core component of our framework and solves the key problem of aligning the embeddings generated from different corpora. In particular, we focus on providing solid evidence about the effectiveness, generality, and robustness of CADE. To this end, we conduct quantitative and qualitative experiments in different domains, from temporal word embeddings to language localization and topical analysis. The results of our experiments suggest that CADE achieves state-of-the-art or superior performance on tasks where several competing approaches are available, yet providing a general method that can be used in a variety of domains. Finally, our experiments shed light on the conditions under which the alignment is reliable, which substantially depends on the degree of cross-corpora vocabulary overlap.\n\nWhat's this About?\n------------------\n\nDifferent words assume different meaning in different contexts. Think for example of how people once used the word `amazon` to mainly\nrefer to the forest. Or think about the differences between American and British English. This is what we usually call meaning shift.\nSee some examples of meaning shifts:\n\n.. image:: https://raw.githubusercontent.com/vinid/cade/master/img/shift_meaning.png\n   :width: 400pt\n\nWhy not using standard word embeddings? Well, long story short, different embeddings generated from different\ncorpora are not comparable: they need to be aligned!\n\nWith CADE we provide a method to align different corpora (in the same language) and to compare them.\nAlignment allow us to compare different word embeddings in different corpora using cosine similarity!\n\n\nHere are some example of mappings between text about Pokemons (from the Reddit board) and text about\nScientific stuff (again, Reddit) that you can learn with CADE.\n\nFor example, you can take the vector of the word Arceus, from the Pokemon corpus and find that it is very similar to the\nword `god` in the Science corpus. You wonder why? Arceus is the good of Pokemons! See some examples of mapping like this in the table, where we show\nthe top-5 nearest neighbors of the mapped space!\n\n.. image:: https://raw.githubusercontent.com/vinid/cade/master/img/mappings.png\n   :width: 400pt\n\nInstalling\n----------\n\nWe use a custom/edited implementation of gensim, this **WILL** clash with your gensim installation, consider installing this inside a virtual environment\n\n.. code-block::  bash\n\n    pip install -U cade\n\n**REMEMBER TO USE A VIRTUAL ENVIRONMENT**\n\n.. code-block::  bash\n\n    pip install git+https://github.com/valedica/gensim.git\n\nGuide\n-----\n\n* **Remember**: when you call the training method of :code:`CADE` the class creates a \"model/\" folder where it is going to save the trained objects. The compass will be trained as first element and it will be saved in that folder. If you want to overwrite it remember to set the parameter :code:`overwrite=True`, **otherwise** it will reload the already trained compass.\n\n* **What do you need**: Different corpora you want to compare (i.e., text from 1991, text from 1992 / text from the New York Times, text from The Guardian ... etc...) and the concatenation of those text slices (the compass).\n\n* **The compass** should be the concatenation of the slice you want to align. In the next code section you will see that we are going to use arxiv papers text from two different years. The \"compass.txt\" file contains the concatenation of both slices.\n\nHow To Use\n----------\n\n* Training\n\nSuppose you have corpora you want to compare text \"arxiv_14.txt\" and \"arxiv_9.txt\". First of all, create the concatenation\nof these two and create a \"compass.txt\" file. Now you can train the compass.\n\n.. code-block:: python\n\n    from cade.cade import CADE\n    from gensim.models.word2vec import Word2Vec\n    aligner = CADE(size=30)\n\n    # train the compass: the text should be the concatenation of the text from the slices\n    aligner.train_compass(\"examples/training/compass.txt\", overwrite=False) # keep an eye on the overwrite behaviour\n..\n\nYou can see that the class covers the same parameters the Gensim word2vec library has. After this first training you can train the slices:\n\n.. code-block:: python\n\n    # now you can train slices and they will be already aligned\n    # these are gensim word2vec objects\n    slice_one = aligner.train_slice(\"examples/training/arxiv_14.txt\", save=True)\n    slice_two = aligner.train_slice(\"examples/training/arxiv_9.txt\", save=True)\n..\n\nThese two slices are now aligned and can be compared!\n\n* Load Data\n\nYou can load data has you do with gensim.\n\n.. code-block:: python\n\n    model1 = Word2Vec.load(\"model/arxiv_14.model\")\n    model2 = Word2Vec.load(\"model/arxiv_9.model\")\n..\n\nand you can start comparing it with standard methods\n\n.. code-block:: python\n\n    from scipy.spatial.distance import cosine\n    print(1 - cosine(model1[\"like\"], model[\"sign\"]))\n..\n\nPeople\n------\n+ `Federico Bianchi <twitter.com/fb_vinid>`_ - Bocconi University -  (f.bianchi@unibocconi.it)\n+ Valerio Di Carlo -  BUP Solutions\n+ Paolo Nicoli -  University of Milano-Bicocca\n+ Matteo Palmonari - University of Milano-Bicocca - (matteo.palmonari@unimib.it)\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-09-11)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vinid/cade", "keywords": "cade", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "cade", "package_url": "https://pypi.org/project/cade/", "platform": "", "project_url": "https://pypi.org/project/cade/", "project_urls": {"Homepage": "https://github.com/vinid/cade"}, "release_url": "https://pypi.org/project/cade/1.1.6/", "requires_dist": ["cython", "numpy", "matplotlib", "smart-open (==1.10.0)"], "requires_python": ">=3.5", "summary": "Compass-aligned Distributional Embeddings", "version": "1.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"compass-aligned-distributional-embeddings\">\n<h2>Compass-aligned Distributional Embeddings</h2>\n<a href=\"https://pypi.python.org/pypi/cade\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/cade.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a06eb8147bb8bf676829e8ded5dc98d86b81f18c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636164652e737667\"></a>\n<a href=\"https://travis-ci.com/vinid/cade\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/vinid/cade.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53b37ea5d68d86ccb17e1d286d8e6abbf726df7d/68747470733a2f2f7472617669732d63692e636f6d2f76696e69642f636164652e737667\"></a>\n<p>This package contains Python code to generate compass aligned distributional embeddings.\nComparing word vectors in different corpora requires alignment.\nWe propose a method to aligned distributional representation based on word2vec.\nThis method is efficient and it is based on a simple heuristic: we train a general word embedding, <strong>the compass</strong>\nand we use this embedding to freeze one of the layers of the CBOW architecture.</p>\n<p>See the <a href=\"https://aaai.org/ojs/index.php/AAAI/article/view/4594\" rel=\"nofollow\">AAAI</a> and  <a href=\"https://arxiv.org/abs/2004.06519\" rel=\"nofollow\">Arxiv pre-print</a> papers for more details.</p>\n<img alt=\"https://raw.githubusercontent.com/vinid/cade/master/img/CADE.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af69566e3f1216796b951d07fe1acd9065115fdb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76696e69642f636164652f6d61737465722f696d672f434144452e706e67\" width=\"400pt\">\n<div id=\"reference\">\n<h3>Reference</h3>\n<p>This work is based on the following papers: <a href=\"https://aaai.org/ojs/index.php/AAAI/article/view/4594\" rel=\"nofollow\">AAAI</a> and <a href=\"https://arxiv.org/abs/2004.06519\" rel=\"nofollow\">Arxiv-preprint</a></p>\n<ul>\n<li>Bianchi, F., Di Carlo, V., Nicoli, P., &amp; Palmonari, M. (2020). <strong>Compass-aligned Distributional Embeddings for Studying Semantic Differences across Corpora</strong>. Arxiv. <a href=\"https://arxiv.org/abs/2004.06519\" rel=\"nofollow\">https://arxiv.org/abs/2004.06519</a></li>\n<li>Di Carlo, V., Bianchi, F., &amp; Palmonari, M. (2019). <strong>Training Temporal Word Embeddings with a Compass</strong>. Proceedings of the AAAI Conference on Artificial Intelligence, 33(01), 6326-6334. <a href=\"https://doi.org/10.1609/aaai.v33i01.33016326\" rel=\"nofollow\">https://doi.org/10.1609/aaai.v33i01.33016326</a></li>\n</ul>\n</div>\n<div id=\"abstract\">\n<h3>Abstract</h3>\n<p>Word2vec is one of the most used algorithms to generate word embeddings because of a good mix of efficiency, quality of the generated representations and cognitive grounding. However, word meaning is not static and depends on the context in which words are used. Differences in word meaning that depends on time, location, topic, and other factors, can be studied by analyzing embeddings generated from different corpora in collections that are representative of these factors. For example, language evolution can be studied using a collection of news articles published in different time periods. In this paper, we present a general framework to support cross-corpora language studies with word embeddings, where embeddings generated from different corpora can be compared to find correspondences and differences in meaning across the corpora. CADE is the core component of our framework and solves the key problem of aligning the embeddings generated from different corpora. In particular, we focus on providing solid evidence about the effectiveness, generality, and robustness of CADE. To this end, we conduct quantitative and qualitative experiments in different domains, from temporal word embeddings to language localization and topical analysis. The results of our experiments suggest that CADE achieves state-of-the-art or superior performance on tasks where several competing approaches are available, yet providing a general method that can be used in a variety of domains. Finally, our experiments shed light on the conditions under which the alignment is reliable, which substantially depends on the degree of cross-corpora vocabulary overlap.</p>\n</div>\n<div id=\"what-s-this-about\">\n<h3>What\u2019s this About?</h3>\n<p>Different words assume different meaning in different contexts. Think for example of how people once used the word <cite>amazon</cite> to mainly\nrefer to the forest. Or think about the differences between American and British English. This is what we usually call meaning shift.\nSee some examples of meaning shifts:</p>\n<img alt=\"https://raw.githubusercontent.com/vinid/cade/master/img/shift_meaning.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/defb35954a6f51324af17b9edd3eeaf46d4a3059/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76696e69642f636164652f6d61737465722f696d672f73686966745f6d65616e696e672e706e67\" width=\"400pt\">\n<p>Why not using standard word embeddings? Well, long story short, different embeddings generated from different\ncorpora are not comparable: they need to be aligned!</p>\n<p>With CADE we provide a method to align different corpora (in the same language) and to compare them.\nAlignment allow us to compare different word embeddings in different corpora using cosine similarity!</p>\n<p>Here are some example of mappings between text about Pokemons (from the Reddit board) and text about\nScientific stuff (again, Reddit) that you can learn with CADE.</p>\n<p>For example, you can take the vector of the word Arceus, from the Pokemon corpus and find that it is very similar to the\nword <cite>god</cite> in the Science corpus. You wonder why? Arceus is the good of Pokemons! See some examples of mapping like this in the table, where we show\nthe top-5 nearest neighbors of the mapped space!</p>\n<img alt=\"https://raw.githubusercontent.com/vinid/cade/master/img/mappings.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87a8eb57448d47d2ca5fc35681221fd0403c0574/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f76696e69642f636164652f6d61737465722f696d672f6d617070696e67732e706e67\" width=\"400pt\">\n</div>\n<div id=\"installing\">\n<h3>Installing</h3>\n<p>We use a custom/edited implementation of gensim, this <strong>WILL</strong> clash with your gensim installation, consider installing this inside a virtual environment</p>\n<pre>pip install -U cade\n</pre>\n<p><strong>REMEMBER TO USE A VIRTUAL ENVIRONMENT</strong></p>\n<pre>pip install git+https://github.com/valedica/gensim.git\n</pre>\n</div>\n<div id=\"guide\">\n<h3>Guide</h3>\n<ul>\n<li><strong>Remember</strong>: when you call the training method of <code>CADE</code> the class creates a \u201cmodel/\u201d folder where it is going to save the trained objects. The compass will be trained as first element and it will be saved in that folder. If you want to overwrite it remember to set the parameter <code>overwrite=True</code>, <strong>otherwise</strong> it will reload the already trained compass.</li>\n<li><strong>What do you need</strong>: Different corpora you want to compare (i.e., text from 1991, text from 1992 / text from the New York Times, text from The Guardian \u2026 etc\u2026) and the concatenation of those text slices (the compass).</li>\n<li><strong>The compass</strong> should be the concatenation of the slice you want to align. In the next code section you will see that we are going to use arxiv papers text from two different years. The \u201ccompass.txt\u201d file contains the concatenation of both slices.</li>\n</ul>\n</div>\n<div id=\"how-to-use\">\n<h3>How To Use</h3>\n<ul>\n<li>Training</li>\n</ul>\n<p>Suppose you have corpora you want to compare text \u201carxiv_14.txt\u201d and \u201carxiv_9.txt\u201d. First of all, create the concatenation\nof these two and create a \u201ccompass.txt\u201d file. Now you can train the compass.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cade.cade</span> <span class=\"kn\">import</span> <span class=\"n\">CADE</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gensim.models.word2vec</span> <span class=\"kn\">import</span> <span class=\"n\">Word2Vec</span>\n<span class=\"n\">aligner</span> <span class=\"o\">=</span> <span class=\"n\">CADE</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># train the compass: the text should be the concatenation of the text from the slices</span>\n<span class=\"n\">aligner</span><span class=\"o\">.</span><span class=\"n\">train_compass</span><span class=\"p\">(</span><span class=\"s2\">\"examples/training/compass.txt\"</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\"># keep an eye on the overwrite behaviour</span>\n</pre>\n<p>You can see that the class covers the same parameters the Gensim word2vec library has. After this first training you can train the slices:</p>\n<pre><span class=\"c1\"># now you can train slices and they will be already aligned</span>\n<span class=\"c1\"># these are gensim word2vec objects</span>\n<span class=\"n\">slice_one</span> <span class=\"o\">=</span> <span class=\"n\">aligner</span><span class=\"o\">.</span><span class=\"n\">train_slice</span><span class=\"p\">(</span><span class=\"s2\">\"examples/training/arxiv_14.txt\"</span><span class=\"p\">,</span> <span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">slice_two</span> <span class=\"o\">=</span> <span class=\"n\">aligner</span><span class=\"o\">.</span><span class=\"n\">train_slice</span><span class=\"p\">(</span><span class=\"s2\">\"examples/training/arxiv_9.txt\"</span><span class=\"p\">,</span> <span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>These two slices are now aligned and can be compared!</p>\n<ul>\n<li>Load Data</li>\n</ul>\n<p>You can load data has you do with gensim.</p>\n<pre><span class=\"n\">model1</span> <span class=\"o\">=</span> <span class=\"n\">Word2Vec</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"model/arxiv_14.model\"</span><span class=\"p\">)</span>\n<span class=\"n\">model2</span> <span class=\"o\">=</span> <span class=\"n\">Word2Vec</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"model/arxiv_9.model\"</span><span class=\"p\">)</span>\n</pre>\n<p>and you can start comparing it with standard methods</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">scipy.spatial.distance</span> <span class=\"kn\">import</span> <span class=\"n\">cosine</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">cosine</span><span class=\"p\">(</span><span class=\"n\">model1</span><span class=\"p\">[</span><span class=\"s2\">\"like\"</span><span class=\"p\">],</span> <span class=\"n\">model</span><span class=\"p\">[</span><span class=\"s2\">\"sign\"</span><span class=\"p\">]))</span>\n</pre>\n</div>\n<div id=\"people\">\n<h3>People</h3>\n<ul>\n<li><a href=\"twitter.com/fb_vinid\" rel=\"nofollow\">Federico Bianchi</a> - Bocconi University -  (<a href=\"mailto:f.bianchi%40unibocconi.it\">f<span>.</span>bianchi<span>@</span>unibocconi<span>.</span>it</a>)</li>\n<li>Valerio Di Carlo -  BUP Solutions</li>\n<li>Paolo Nicoli -  University of Milano-Bicocca</li>\n<li>Matteo Palmonari - University of Milano-Bicocca - (<a href=\"mailto:matteo.palmonari%40unimib.it\">matteo<span>.</span>palmonari<span>@</span>unimib<span>.</span>it</a>)</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id2\"><span class=\"section-subtitle\">0.1.0 (2019-09-11)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7099367, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "39f689302e396b8fe9603dc2e7fdaac8", "sha256": "03e7a19c6c4882466c7bf70e24fb39343e6fb2db33a182d20417a856311b44f3"}, "downloads": -1, "filename": "cade-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "39f689302e396b8fe9603dc2e7fdaac8", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.5", "size": 13339, "upload_time": "2020-04-24T17:52:39", "upload_time_iso_8601": "2020-04-24T17:52:39.174779Z", "url": "https://files.pythonhosted.org/packages/67/8f/87549ab91b9f2c22d4e3a2e24542ad897952cd363f555f3f5042e565602e/cade-0.0.1-py3.7.egg", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "1cd0990ed0183b9e3108028841ce4fcd", "sha256": "7a6e748754a38ea3d9a082755c299e274f53874e7ddaecd69947c6e37dbe36b5"}, "downloads": -1, "filename": "cade-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1cd0990ed0183b9e3108028841ce4fcd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 9236, "upload_time": "2020-04-24T17:52:36", "upload_time_iso_8601": "2020-04-24T17:52:36.533565Z", "url": "https://files.pythonhosted.org/packages/46/65/291b174fa158600a4697fb51c57c0d7d292232da055576dfd5b4f0e74fda/cade-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "df5164fe8f2c447b08a63ad6e1d2e0ac", "sha256": "6c1c2bb83c0a0bf954ec34141a88459905751a305b5ec93b7fb322d40725ca3d"}, "downloads": -1, "filename": "cade-1.0.0.tar.gz", "has_sig": false, "md5_digest": "df5164fe8f2c447b08a63ad6e1d2e0ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14618, "upload_time": "2020-04-24T17:52:40", "upload_time_iso_8601": "2020-04-24T17:52:40.597856Z", "url": "https://files.pythonhosted.org/packages/37/b8/9eaf1bda863bcc9546daa4a9c011fb94753d92550c3b3aa24c1d0fb187ec/cade-1.0.0.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "c79186fb450baa3cebe69d72d7525a9d", "sha256": "a423975f42cd5d0e85b46427634bd92e85a0a7dd037b5b674c764a24c3e238f4"}, "downloads": -1, "filename": "cade-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c79186fb450baa3cebe69d72d7525a9d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 9237, "upload_time": "2020-04-24T18:14:33", "upload_time_iso_8601": "2020-04-24T18:14:33.572886Z", "url": "https://files.pythonhosted.org/packages/5c/8e/d9e57b8789637354e8cfe153be138ef4e27d7329b6199422162ccea261dd/cade-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc54bb983dd6bc701bc26f3cb6694fca", "sha256": "7e942b0036c20e5912af48c2154ef59e8b3a846c80b25bd34aa6bcf17c983a1b"}, "downloads": -1, "filename": "cade-1.1.2.tar.gz", "has_sig": false, "md5_digest": "cc54bb983dd6bc701bc26f3cb6694fca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17563, "upload_time": "2020-04-24T18:14:35", "upload_time_iso_8601": "2020-04-24T18:14:35.532720Z", "url": "https://files.pythonhosted.org/packages/b6/e6/0975818365d5f06f4e193d50e37836191bbbe4db5b0e2058c8faedda4656/cade-1.1.2.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "c396731c474bc8598a8d9c6e5b34550e", "sha256": "57bd833002ddce7d07b7baac1518c8b6c3c7aaf1ee689ed78af0dafb488ce130"}, "downloads": -1, "filename": "cade-1.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c396731c474bc8598a8d9c6e5b34550e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8979, "upload_time": "2020-04-24T19:45:19", "upload_time_iso_8601": "2020-04-24T19:45:19.732861Z", "url": "https://files.pythonhosted.org/packages/27/f4/a4563747b163938a8fd55dcee4617a0f3d83f41e1a9529ed5adbc3432e17/cade-1.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c72dc009820ed932a9ccdc989a28b490", "sha256": "9bf63ebb6d215a4e9dfc6a3a5971526b351a0459ac89b59dc094e8b94f6d55f1"}, "downloads": -1, "filename": "cade-1.1.4.tar.gz", "has_sig": false, "md5_digest": "c72dc009820ed932a9ccdc989a28b490", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17566, "upload_time": "2020-04-24T19:45:20", "upload_time_iso_8601": "2020-04-24T19:45:20.844889Z", "url": "https://files.pythonhosted.org/packages/a3/5a/216b28bfcb519bc030770adcfeb98773f0d9838a09193a59827529c92d6a/cade-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "6e9b2247b388b43f2f1c78bc5a812858", "sha256": "2e9fdad74ef3c640c42f9085c01a26041775d678493feb9ead9e233e03adfadf"}, "downloads": -1, "filename": "cade-1.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6e9b2247b388b43f2f1c78bc5a812858", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8593, "upload_time": "2020-04-25T09:52:00", "upload_time_iso_8601": "2020-04-25T09:52:00.097730Z", "url": "https://files.pythonhosted.org/packages/98/90/965412ba9cb1f2ea84b86ef0312f5a38c927bae125259340f2418288ae9c/cade-1.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e47b23c24fc328a18c79a33e4e76279a", "sha256": "352a949b7120e3f99513f4a5c7ce7dae69ce4e23613d2cc5df02e6ceb779ffef"}, "downloads": -1, "filename": "cade-1.1.5.tar.gz", "has_sig": false, "md5_digest": "e47b23c24fc328a18c79a33e4e76279a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15061, "upload_time": "2020-04-25T09:52:01", "upload_time_iso_8601": "2020-04-25T09:52:01.183186Z", "url": "https://files.pythonhosted.org/packages/df/cf/42aae7fa9a0283ddf9e38b89b8ed6de4b4bb7bd950f1fd174c79dc8258dd/cade-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "cd0d847e0390cb720a94f4941b9dcb41", "sha256": "7554fe1ae3bcac647042e8982622a5187dd0b85893af06db9f0645f5b7f5c57a"}, "downloads": -1, "filename": "cade-1.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cd0d847e0390cb720a94f4941b9dcb41", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8611, "upload_time": "2020-04-25T12:47:00", "upload_time_iso_8601": "2020-04-25T12:47:00.982775Z", "url": "https://files.pythonhosted.org/packages/df/a9/69a6b6983a75cb464a25ac5b69fbe8f0a6d238bf622749c9c701fffd5a98/cade-1.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9019ac46e1237b06865120cbb3e1eae", "sha256": "06a593c12c89409e4e20baafb9aea24de76dbf7316b573c986603c02c453a3ad"}, "downloads": -1, "filename": "cade-1.1.6.tar.gz", "has_sig": false, "md5_digest": "a9019ac46e1237b06865120cbb3e1eae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15080, "upload_time": "2020-04-25T12:47:02", "upload_time_iso_8601": "2020-04-25T12:47:02.085431Z", "url": "https://files.pythonhosted.org/packages/ef/ee/abf745eaba64d94e775d233a6c80b8c771392793b2c9f59a41d09c412266/cade-1.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cd0d847e0390cb720a94f4941b9dcb41", "sha256": "7554fe1ae3bcac647042e8982622a5187dd0b85893af06db9f0645f5b7f5c57a"}, "downloads": -1, "filename": "cade-1.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cd0d847e0390cb720a94f4941b9dcb41", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 8611, "upload_time": "2020-04-25T12:47:00", "upload_time_iso_8601": "2020-04-25T12:47:00.982775Z", "url": "https://files.pythonhosted.org/packages/df/a9/69a6b6983a75cb464a25ac5b69fbe8f0a6d238bf622749c9c701fffd5a98/cade-1.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9019ac46e1237b06865120cbb3e1eae", "sha256": "06a593c12c89409e4e20baafb9aea24de76dbf7316b573c986603c02c453a3ad"}, "downloads": -1, "filename": "cade-1.1.6.tar.gz", "has_sig": false, "md5_digest": "a9019ac46e1237b06865120cbb3e1eae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15080, "upload_time": "2020-04-25T12:47:02", "upload_time_iso_8601": "2020-04-25T12:47:02.085431Z", "url": "https://files.pythonhosted.org/packages/ef/ee/abf745eaba64d94e775d233a6c80b8c771392793b2c9f59a41d09c412266/cade-1.1.6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:42 2020"}