{"info": {"author": "Maximilian Knespel", "author_email": "mxmlnkn@github.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: System :: Archiving"], "description": "# Random Access Read-Only Tar Mount (Ratarmount)\n\n[![PyPI version](https://badge.fury.io/py/ratarmount.svg)](https://badge.fury.io/py/ratarmount)\n[![Downloads](https://pepy.tech/badge/ratarmount/month)](https://pepy.tech/project/ratarmount/month)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\n[![Build Status](https://travis-ci.org/mxmlnkn/ratarmount.svg?branch=master)](https://travis-ci.com/mxmlnkn/ratarmount)\n\nCombines the random access indexing idea from [tarindexer](https://github.com/devsnd/tarindexer) and then **mounts** the **TAR** using [fusepy](https://github.com/fusepy/fusepy) for easy read-only access just like [archivemount](https://github.com/cybernoid/archivemount/).\nIt also will mount TARs inside TARs inside TARs, ... **recursively** into folders of the same name, which is useful for the ImageNet data set.\nFurthermore, it now has support for **BZip2** compressed TAR archives provided by [indexed_bzip2](https://github.com/mxmlnkn/indexed_bzip2), a refactored and extended version of [bzcat](https://github.com/landley/toybox/blob/c77b66455762f42bb824c1aa8cc60e7f4d44bdab/toys/other/bzcat.c) from [toybox](https://landley.net/code/toybox/), and support for **Gzip** compressed TAR archives provided by the [indexed_gzip](https://github.com/pauldmccarthy/indexed_gzip) dependency.\n\n\n# Table of Contents\n1. [Installation](#installation)\n2. [Usage](#usage)\n3. [The Problem](#the-problem)\n4. [The Solution](#the-solution)\n5. [Benchmarks](benchmarks/BENCHMARKS.md)\n\n# Installation\n\nYou can simply install it from PyPI:\n```\npip install ratarmount\n```\n\nOr, if you want to test the latest development version on a Debian-like system:\n```bash\nsudo apt-get update\nsudo apt-get install python3 python3-pip git\ngit clone https://github.com/mxmlnkn/ratarmount.git\npython3 -m pip install --user .\nratarmount --help\n```\n\nYou can also simply download [ratarmount.py](https://github.com/mxmlnkn/ratarmount/raw/master/ratarmount.py) and call it directly but then BZip2 support will not work and you will have to install the dependencies manually, so at least `pip3 install --user fusepy`.\n\nIf you want to use other serialization backends instead of the default SQLite one, then either install those packages manually or install ratarmount by specifying the `legacy-serializers` feature:\n\n```\npip install ratarmount[legacy-serializers]\n```\n\n# Usage\n\n```\nusage: ratarmount.py [-h] [-f] [-d DEBUG] [-c] [-r] [-s SERIALIZATION_BACKEND]\n                     [-p PREFIX] [--fuse FUSE]\n                     tar-file-path [mount-path]\n\nIf no mount path is specified, then the tar will be mounted to a folder of the\nsame name but without a file extension. TAR files contained inside the tar and\neven TARs in TARs in TARs will be mounted recursively at folders of the same\nname barred the file extension '.tar'. In order to reduce the mounting time,\nthe created index for random access to files inside the tar will be saved to\n<path to tar>.index.<backend>[.<compression]. If it can't be saved there, it\nwill be saved in ~/.ratarmount/<path to tar: '/' ->\n'_'>.index.<backend>[.<compression].\n\npositional arguments:\n  tar-file-path         The path to the TAR archive to be mounted.\n  mount-path            The path to a folder to mount the TAR contents into.\n                        (default: None)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f, --foreground      Keeps the python program in foreground so it can print\n                        debug output when the mounted path is accessed.\n                        (default: False)\n  -d DEBUG, --debug DEBUG\n                        Sets the debugging level. Higher means more output.\n                        Currently, 3 is the highest. (default: 1)\n  -c, --recreate-index  If specified, pre-existing .index files will be\n                        deleted and newly created. (default: False)\n  -r, --recursive       Mount TAR archives inside the mounted TAR recursively.\n                        Note that this only has an effect when creating an\n                        index. If an index already exists, then this option\n                        will be effectively ignored. Recreate the index if you\n                        want change the recursive mounting policy anyways.\n                        (default: False)\n  -s SERIALIZATION_BACKEND, --serialization-backend SERIALIZATION_BACKEND\n                        (deprecated) Specify which library to use for writing\n                        out the TAR index. Supported keywords: (none,pickle,pi\n                        ckle2,pickle3,custom,cbor,msgpack,rapidjson,ujson,simp\n                        lejson,sqlite)[.(lz4,gz)] (default: sqlite)\n  -p PREFIX, --prefix PREFIX\n                        The specified path to the folder inside the TAR will\n                        be mounted to root. This can be useful when the\n                        archive as created with absolute paths. E.g., for an\n                        archive created with `tar -P cf\n                        /var/log/apt/history.log`, -p /var/log/apt/ can be\n                        specified so that the mount target directory\n                        >directly< contains history.log. (default: )\n  --fuse FUSE           Comma separated FUSE options. See \"man mount.fuse\" for\n                        help. Example: --fuse\n                        \"allow_other,entry_timeout=2.8,gid=0\". (default: )\n```\n\nIndex files are if possible created to / if existing loaded from these file locations in order:\n\n  - `<path to tar>.index.<serialization backend>`\n  - `~/.tarmount/<path to tar: '/' -> '_'>.index.<serialization backend>`\n\n\n# The Problem\n\nYou downloaded a large TAR file from the internet, for example the [1.31TB](http://academictorrents.com/details/564a77c1e1119da199ff32622a1609431b9f1c47) large [ImageNet](http://image-net.org/), and you now want to use it but lack the space, time, or a file system fast enough to extract all the 14.2 million image files.\n\n\n## Partial Solutions\n\n### Archivemount\n\n[Archivemount](https://github.com/cybernoid/archivemount/) seems to have large performance issues for too many files for both mounting and file access in version 0.8.7. A more in-depth comparison benchmark can be found [here](benchmarks/BENCHMARKS.md).\n\n  - Mounting the 6.5GB ImageNet Large-Scale Visual Recognition Challenge 2012 validation data set, and then testing the speed with: `time cat mounted/ILSVRC2012_val_00049975.JPEG | wc -c` takes 250ms for archivemount and 2ms for ratarmount.\n  - Trying to mount the 150GB [ILSVRC object localization data set](https://www.kaggle.com/c/imagenet-object-localization-challenge) containing 2 million images was given up upon after 2 hours. Ratarmount takes ~15min to create a ~150MB index and <1ms for opening an already created index (SQLite database) and mounting the TAR. In contrast, archivemount will take the same amount of time even for subsequent mounts.\n  - Does not support recursive mounting. Although, you could write a script to stack archivemount on top of archivemount for all contained TAR files.\n\n### Tarindexer\n\n[Tarindex](https://github.com/devsnd/tarindexer) is a command line to tool written in Python which can create index files and then use the index file to extract single files from the tar fast. However, it also has some caveats which ratarmount tries to solve:\n\n  - It only works with single files, meaning it would be necessary to loop over the extract-call. But this would require loading the possibly quite large tar index file into memory each time. For example for ImageNet, the resulting index file is hundreds of MB large. Also, extracting directories will be a hassle.\n  - It's difficult to integrate tarindexer into other production environments. Ratarmount instead uses FUSE to mount the TAR as a folder readable by any other programs requiring access to the contained data.\n  - Can't handle TARs recursively. In order to extract files inside a TAR which itself is inside a TAR, the packed TAR first needs to be extracted.\n\n\n### TAR Browser\n\nI didn't find out about [TAR Browser](https://github.com/tomorrow-nf/tar-as-filesystem/) before I finished the ratarmount script. That's also one of it's cons:\n\n  - Hard to find. I don't seem to be the only one who has trouble finding it as it has zero stars on Github after 4 years compared to 29 stars for tarindexer after roughly the same amount of time.\n  - Hassle to set up. Needs compilation and I gave up when I was instructed to set up a MySQL database for it to use. Confusingly, the setup instructions are not on its Github but [here](https://web.wpi.edu/Pubs/E-project/Available/E-project-030615-133259/unrestricted/TARBrowserFinal.pdf).\n  - Doesn't seem to support recursive TAR mounting. I didn't test it because of the MysQL dependency but the code does not seem to have logic for recursive mounting.\n\nPros:\n  - supports bz2- and xz-compressed TAR archives\n\n\n## The Solution\n\nRatarmount creates an index file with file names, ownership, permission flags, and offset information to be stored at the TAR file's location or inside `~/.ratarmount/` and then offers a FUSE mount integration for easy access to the files.\n\nThe test with the first version (50e8dbb), which used pickle serialization, for the ImageNet data set is promising:\n\n  - TAR size: 1.31TB\n  - Contains TARs: yes\n  - Files in TAR: ~26 000\n  - Files in TAR (including recursively in contained TARs): 14.2 million\n  - Index creation (first mounting): 4 hours\n  - Index size: 1GB\n  - Index loading (subsequent mounting): 80s\n  - Reading a 40kB file: 100ms (first time) and 4ms (subsequent times)\n\nThe reading time for a small file simply verifies the random access by using file seek to be working. The difference between the first read and subsequent reads is not because of ratarmount but because of operating system and file system caches.\n\nHere is a more recent test for version 0.2.0 with the new default SQLite backend:\n\n  - TAR size: 124GB\n  - Contains TARs: yes\n  - Files in TAR: 1000\n  - Files in TAR (including recursively in contained TARs): 1.26 million\n  - Index creation (first mounting): 15m 39s\n  - Index size: 146MB\n  - Index loading (subsequent mounting): 0.000s\n  - Reading a 64kB file: ~4ms\n  - Running 'find mountPoint -type f | wc -l' (1.26M stat calls): 1m 50s\n\n## Benchmarks\n\nDuring the making of this project several benchmarks were created. These can be viewed [here](benchmarks/BENCHMARKS.md).\nThese are some of the things benchmarked and compared there:\n\n  - Memory and runtime comparisons of backends for saving the index with offsets\n  - Comparison of SQLite table designs\n  - Mounting and file access time comparison between archivemount and ratarmount\n\n![Benchmark comparison between ratarmount and archivemount](benchmarks/plots/archivemount-comparison.png)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mxmlnkn/ratarmount", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ratarmount", "package_url": "https://pypi.org/project/ratarmount/", "platform": "", "project_url": "https://pypi.org/project/ratarmount/", "project_urls": {"Homepage": "https://github.com/mxmlnkn/ratarmount"}, "release_url": "https://pypi.org/project/ratarmount/0.4.1/", "requires_dist": ["fusepy", "indexed-gzip", "indexed-bzip2", "lz4 ; extra == 'legacy-serializers'", "msgpack ; extra == 'legacy-serializers'", "simplejson ; extra == 'legacy-serializers'", "pyyaml ; extra == 'legacy-serializers'", "ujson ; extra == 'legacy-serializers'", "cbor ; extra == 'legacy-serializers'", "python-rapidjson ; extra == 'legacy-serializers'"], "requires_python": "", "summary": "Random Access Read-Only Tar Mount", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Random Access Read-Only Tar Mount (Ratarmount)</h1>\n<p><a href=\"https://badge.fury.io/py/ratarmount\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ecfc603b261c37e3842199624cede3488a2a9f1/68747470733a2f2f62616467652e667572792e696f2f70792f72617461726d6f756e742e737667\"></a>\n<a href=\"https://pepy.tech/project/ratarmount/month\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44a8eec0a6b936847b310a4ace5c8c3ca7790800/68747470733a2f2f706570792e746563682f62616467652f72617461726d6f756e742f6d6f6e7468\"></a>\n<a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c88fab50b4a1dc0cd91faeb7ba5654d56e380260/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"https://travis-ci.com/mxmlnkn/ratarmount\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7de14136ca888fd5e84570ca45a560865db7037/68747470733a2f2f7472617669732d63692e6f72672f6d786d6c6e6b6e2f72617461726d6f756e742e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Combines the random access indexing idea from <a href=\"https://github.com/devsnd/tarindexer\" rel=\"nofollow\">tarindexer</a> and then <strong>mounts</strong> the <strong>TAR</strong> using <a href=\"https://github.com/fusepy/fusepy\" rel=\"nofollow\">fusepy</a> for easy read-only access just like <a href=\"https://github.com/cybernoid/archivemount/\" rel=\"nofollow\">archivemount</a>.\nIt also will mount TARs inside TARs inside TARs, ... <strong>recursively</strong> into folders of the same name, which is useful for the ImageNet data set.\nFurthermore, it now has support for <strong>BZip2</strong> compressed TAR archives provided by <a href=\"https://github.com/mxmlnkn/indexed_bzip2\" rel=\"nofollow\">indexed_bzip2</a>, a refactored and extended version of <a href=\"https://github.com/landley/toybox/blob/c77b66455762f42bb824c1aa8cc60e7f4d44bdab/toys/other/bzcat.c\" rel=\"nofollow\">bzcat</a> from <a href=\"https://landley.net/code/toybox/\" rel=\"nofollow\">toybox</a>, and support for <strong>Gzip</strong> compressed TAR archives provided by the <a href=\"https://github.com/pauldmccarthy/indexed_gzip\" rel=\"nofollow\">indexed_gzip</a> dependency.</p>\n<h1>Table of Contents</h1>\n<ol>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#the-problem\" rel=\"nofollow\">The Problem</a></li>\n<li><a href=\"#the-solution\" rel=\"nofollow\">The Solution</a></li>\n<li><a href=\"benchmarks/BENCHMARKS.md\" rel=\"nofollow\">Benchmarks</a></li>\n</ol>\n<h1>Installation</h1>\n<p>You can simply install it from PyPI:</p>\n<pre><code>pip install ratarmount\n</code></pre>\n<p>Or, if you want to test the latest development version on a Debian-like system:</p>\n<pre>sudo apt-get update\nsudo apt-get install python3 python3-pip git\ngit clone https://github.com/mxmlnkn/ratarmount.git\npython3 -m pip install --user .\nratarmount --help\n</pre>\n<p>You can also simply download <a href=\"https://github.com/mxmlnkn/ratarmount/raw/master/ratarmount.py\" rel=\"nofollow\">ratarmount.py</a> and call it directly but then BZip2 support will not work and you will have to install the dependencies manually, so at least <code>pip3 install --user fusepy</code>.</p>\n<p>If you want to use other serialization backends instead of the default SQLite one, then either install those packages manually or install ratarmount by specifying the <code>legacy-serializers</code> feature:</p>\n<pre><code>pip install ratarmount[legacy-serializers]\n</code></pre>\n<h1>Usage</h1>\n<pre><code>usage: ratarmount.py [-h] [-f] [-d DEBUG] [-c] [-r] [-s SERIALIZATION_BACKEND]\n                     [-p PREFIX] [--fuse FUSE]\n                     tar-file-path [mount-path]\n\nIf no mount path is specified, then the tar will be mounted to a folder of the\nsame name but without a file extension. TAR files contained inside the tar and\neven TARs in TARs in TARs will be mounted recursively at folders of the same\nname barred the file extension '.tar'. In order to reduce the mounting time,\nthe created index for random access to files inside the tar will be saved to\n&lt;path to tar&gt;.index.&lt;backend&gt;[.&lt;compression]. If it can't be saved there, it\nwill be saved in ~/.ratarmount/&lt;path to tar: '/' -&gt;\n'_'&gt;.index.&lt;backend&gt;[.&lt;compression].\n\npositional arguments:\n  tar-file-path         The path to the TAR archive to be mounted.\n  mount-path            The path to a folder to mount the TAR contents into.\n                        (default: None)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -f, --foreground      Keeps the python program in foreground so it can print\n                        debug output when the mounted path is accessed.\n                        (default: False)\n  -d DEBUG, --debug DEBUG\n                        Sets the debugging level. Higher means more output.\n                        Currently, 3 is the highest. (default: 1)\n  -c, --recreate-index  If specified, pre-existing .index files will be\n                        deleted and newly created. (default: False)\n  -r, --recursive       Mount TAR archives inside the mounted TAR recursively.\n                        Note that this only has an effect when creating an\n                        index. If an index already exists, then this option\n                        will be effectively ignored. Recreate the index if you\n                        want change the recursive mounting policy anyways.\n                        (default: False)\n  -s SERIALIZATION_BACKEND, --serialization-backend SERIALIZATION_BACKEND\n                        (deprecated) Specify which library to use for writing\n                        out the TAR index. Supported keywords: (none,pickle,pi\n                        ckle2,pickle3,custom,cbor,msgpack,rapidjson,ujson,simp\n                        lejson,sqlite)[.(lz4,gz)] (default: sqlite)\n  -p PREFIX, --prefix PREFIX\n                        The specified path to the folder inside the TAR will\n                        be mounted to root. This can be useful when the\n                        archive as created with absolute paths. E.g., for an\n                        archive created with `tar -P cf\n                        /var/log/apt/history.log`, -p /var/log/apt/ can be\n                        specified so that the mount target directory\n                        &gt;directly&lt; contains history.log. (default: )\n  --fuse FUSE           Comma separated FUSE options. See \"man mount.fuse\" for\n                        help. Example: --fuse\n                        \"allow_other,entry_timeout=2.8,gid=0\". (default: )\n</code></pre>\n<p>Index files are if possible created to / if existing loaded from these file locations in order:</p>\n<ul>\n<li><code>&lt;path to tar&gt;.index.&lt;serialization backend&gt;</code></li>\n<li><code>~/.tarmount/&lt;path to tar: '/' -&gt; '_'&gt;.index.&lt;serialization backend&gt;</code></li>\n</ul>\n<h1>The Problem</h1>\n<p>You downloaded a large TAR file from the internet, for example the <a href=\"http://academictorrents.com/details/564a77c1e1119da199ff32622a1609431b9f1c47\" rel=\"nofollow\">1.31TB</a> large <a href=\"http://image-net.org/\" rel=\"nofollow\">ImageNet</a>, and you now want to use it but lack the space, time, or a file system fast enough to extract all the 14.2 million image files.</p>\n<h2>Partial Solutions</h2>\n<h3>Archivemount</h3>\n<p><a href=\"https://github.com/cybernoid/archivemount/\" rel=\"nofollow\">Archivemount</a> seems to have large performance issues for too many files for both mounting and file access in version 0.8.7. A more in-depth comparison benchmark can be found <a href=\"benchmarks/BENCHMARKS.md\" rel=\"nofollow\">here</a>.</p>\n<ul>\n<li>Mounting the 6.5GB ImageNet Large-Scale Visual Recognition Challenge 2012 validation data set, and then testing the speed with: <code>time cat mounted/ILSVRC2012_val_00049975.JPEG | wc -c</code> takes 250ms for archivemount and 2ms for ratarmount.</li>\n<li>Trying to mount the 150GB <a href=\"https://www.kaggle.com/c/imagenet-object-localization-challenge\" rel=\"nofollow\">ILSVRC object localization data set</a> containing 2 million images was given up upon after 2 hours. Ratarmount takes ~15min to create a ~150MB index and &lt;1ms for opening an already created index (SQLite database) and mounting the TAR. In contrast, archivemount will take the same amount of time even for subsequent mounts.</li>\n<li>Does not support recursive mounting. Although, you could write a script to stack archivemount on top of archivemount for all contained TAR files.</li>\n</ul>\n<h3>Tarindexer</h3>\n<p><a href=\"https://github.com/devsnd/tarindexer\" rel=\"nofollow\">Tarindex</a> is a command line to tool written in Python which can create index files and then use the index file to extract single files from the tar fast. However, it also has some caveats which ratarmount tries to solve:</p>\n<ul>\n<li>It only works with single files, meaning it would be necessary to loop over the extract-call. But this would require loading the possibly quite large tar index file into memory each time. For example for ImageNet, the resulting index file is hundreds of MB large. Also, extracting directories will be a hassle.</li>\n<li>It's difficult to integrate tarindexer into other production environments. Ratarmount instead uses FUSE to mount the TAR as a folder readable by any other programs requiring access to the contained data.</li>\n<li>Can't handle TARs recursively. In order to extract files inside a TAR which itself is inside a TAR, the packed TAR first needs to be extracted.</li>\n</ul>\n<h3>TAR Browser</h3>\n<p>I didn't find out about <a href=\"https://github.com/tomorrow-nf/tar-as-filesystem/\" rel=\"nofollow\">TAR Browser</a> before I finished the ratarmount script. That's also one of it's cons:</p>\n<ul>\n<li>Hard to find. I don't seem to be the only one who has trouble finding it as it has zero stars on Github after 4 years compared to 29 stars for tarindexer after roughly the same amount of time.</li>\n<li>Hassle to set up. Needs compilation and I gave up when I was instructed to set up a MySQL database for it to use. Confusingly, the setup instructions are not on its Github but <a href=\"https://web.wpi.edu/Pubs/E-project/Available/E-project-030615-133259/unrestricted/TARBrowserFinal.pdf\" rel=\"nofollow\">here</a>.</li>\n<li>Doesn't seem to support recursive TAR mounting. I didn't test it because of the MysQL dependency but the code does not seem to have logic for recursive mounting.</li>\n</ul>\n<p>Pros:</p>\n<ul>\n<li>supports bz2- and xz-compressed TAR archives</li>\n</ul>\n<h2>The Solution</h2>\n<p>Ratarmount creates an index file with file names, ownership, permission flags, and offset information to be stored at the TAR file's location or inside <code>~/.ratarmount/</code> and then offers a FUSE mount integration for easy access to the files.</p>\n<p>The test with the first version (50e8dbb), which used pickle serialization, for the ImageNet data set is promising:</p>\n<ul>\n<li>TAR size: 1.31TB</li>\n<li>Contains TARs: yes</li>\n<li>Files in TAR: ~26 000</li>\n<li>Files in TAR (including recursively in contained TARs): 14.2 million</li>\n<li>Index creation (first mounting): 4 hours</li>\n<li>Index size: 1GB</li>\n<li>Index loading (subsequent mounting): 80s</li>\n<li>Reading a 40kB file: 100ms (first time) and 4ms (subsequent times)</li>\n</ul>\n<p>The reading time for a small file simply verifies the random access by using file seek to be working. The difference between the first read and subsequent reads is not because of ratarmount but because of operating system and file system caches.</p>\n<p>Here is a more recent test for version 0.2.0 with the new default SQLite backend:</p>\n<ul>\n<li>TAR size: 124GB</li>\n<li>Contains TARs: yes</li>\n<li>Files in TAR: 1000</li>\n<li>Files in TAR (including recursively in contained TARs): 1.26 million</li>\n<li>Index creation (first mounting): 15m 39s</li>\n<li>Index size: 146MB</li>\n<li>Index loading (subsequent mounting): 0.000s</li>\n<li>Reading a 64kB file: ~4ms</li>\n<li>Running 'find mountPoint -type f | wc -l' (1.26M stat calls): 1m 50s</li>\n</ul>\n<h2>Benchmarks</h2>\n<p>During the making of this project several benchmarks were created. These can be viewed <a href=\"benchmarks/BENCHMARKS.md\" rel=\"nofollow\">here</a>.\nThese are some of the things benchmarked and compared there:</p>\n<ul>\n<li>Memory and runtime comparisons of backends for saving the index with offsets</li>\n<li>Comparison of SQLite table designs</li>\n<li>Mounting and file access time comparison between archivemount and ratarmount</li>\n</ul>\n<p><img alt=\"Benchmark comparison between ratarmount and archivemount\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdfd049c0d37b32c27f79580b3c4e19264721754/62656e63686d61726b732f706c6f74732f617263686976656d6f756e742d636f6d70617269736f6e2e706e67\"></p>\n\n          </div>"}, "last_serial": 6995014, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "58052a6bdd6ca85c26c258fc3b511f1d", "sha256": "20a261ccf6a1453f0514d621cfaef283d05666e700c8bfa776a8abf903c02a2e"}, "downloads": -1, "filename": "ratarmount-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "58052a6bdd6ca85c26c258fc3b511f1d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11286, "upload_time": "2019-11-14T12:13:42", "upload_time_iso_8601": "2019-11-14T12:13:42.249845Z", "url": "https://files.pythonhosted.org/packages/5c/03/60a017d160b9decf95e8cb8c424e7f668cc3a943c2f32ffc891f0dcb5046/ratarmount-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3bb2613945b1bfcd74b90f11b12747e8", "sha256": "043e658aeac580e96023c652a2a5126f60c53f02a7c944b908936cd97264e40c"}, "downloads": -1, "filename": "ratarmount-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3bb2613945b1bfcd74b90f11b12747e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13658, "upload_time": "2019-11-14T12:13:44", "upload_time_iso_8601": "2019-11-14T12:13:44.827012Z", "url": "https://files.pythonhosted.org/packages/7f/96/cdac02e3aea5cab74c86a3fc42f0488074c9a4928dd85aa8189cc4fd8694/ratarmount-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5640e85ddd353712a1c452886229222c", "sha256": "1318c61729a92c0ed368127b23b9f0789b768e42cf32ae461a20f28743393f18"}, "downloads": -1, "filename": "ratarmount-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5640e85ddd353712a1c452886229222c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14201, "upload_time": "2019-11-17T17:19:23", "upload_time_iso_8601": "2019-11-17T17:19:23.934955Z", "url": "https://files.pythonhosted.org/packages/dd/cb/05ddf5436c63f332df43f0444d19fb579fdc8dd2ecc8bde209f0c1fc3812/ratarmount-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a4c61af68f26bedd8bb9e85dd54870b", "sha256": "b2fc15be12d75a1696534e2f595c801b7ecf7c93e777fb72e9812d671f2e6744"}, "downloads": -1, "filename": "ratarmount-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9a4c61af68f26bedd8bb9e85dd54870b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17006, "upload_time": "2019-11-17T17:19:25", "upload_time_iso_8601": "2019-11-17T17:19:25.686999Z", "url": "https://files.pythonhosted.org/packages/42/44/23784c733bfcb87c23201f642e3d40accc8f6edbd924b16ff16d2c864414/ratarmount-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2bae2f7251587078b7f26b194e70ec7f", "sha256": "83c06da4fdd59fed65fac24ee39ff5bc6c9f7ae2cb54c1f9eb8cf9a12f6b4840"}, "downloads": -1, "filename": "ratarmount-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2bae2f7251587078b7f26b194e70ec7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71397, "upload_time": "2019-11-23T11:30:53", "upload_time_iso_8601": "2019-11-23T11:30:53.098430Z", "url": "https://files.pythonhosted.org/packages/7d/b0/4e3634d61dcac990df31aab94f8a5941f1e22f96d37ac29972cba2825cd9/ratarmount-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f48ad98bd2fdf59f6c6e4f370fff9eb7", "sha256": "a69468c81885b94fe844adbc6e4172330bcb01a685d41a85a09d82d5028c4ac6"}, "downloads": -1, "filename": "ratarmount-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f48ad98bd2fdf59f6c6e4f370fff9eb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83411, "upload_time": "2019-11-23T11:42:30", "upload_time_iso_8601": "2019-11-23T11:42:30.365381Z", "url": "https://files.pythonhosted.org/packages/c1/55/f7fe48a2deb1c2b0c106caeee87a818b166e5cd9a7f928dd7c74243c32a2/ratarmount-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "c7fa5938b92be67d7eea2ebb192bd8b0", "sha256": "24f5f28fd69d2c5ce2bf187822d12a99b370bdbd651efe797b0cbaab2de3eabb"}, "downloads": -1, "filename": "ratarmount-0.3.2.tar.gz", "has_sig": false, "md5_digest": "c7fa5938b92be67d7eea2ebb192bd8b0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 83459, "upload_time": "2019-12-01T14:17:12", "upload_time_iso_8601": "2019-12-01T14:17:12.378531Z", "url": "https://files.pythonhosted.org/packages/23/89/ab602515440377b076a18f0c516bc24e0f0fa98d3c5d5e48c9d67043747b/ratarmount-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "7b9c5ddb2c4956cd6fbb0994679f530f", "sha256": "7f2e3edfccef69abc797a458a3bac16a0587fcf4c70e4b2b5795d05506556a2a"}, "downloads": -1, "filename": "ratarmount-0.3.3.tar.gz", "has_sig": false, "md5_digest": "7b9c5ddb2c4956cd6fbb0994679f530f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84938, "upload_time": "2019-12-05T07:26:24", "upload_time_iso_8601": "2019-12-05T07:26:24.014362Z", "url": "https://files.pythonhosted.org/packages/87/bd/e9b4da2528dadef4d16523529537272d03533c7af4c001b4df4c094bb2d3/ratarmount-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "e5d3ee47968b8fd9c24579c317b7415f", "sha256": "1014bd244817a9684d2e5e9dfc4bb0bb4754eb01a8177fde7bac3e9b989757f1"}, "downloads": -1, "filename": "ratarmount-0.3.4.tar.gz", "has_sig": false, "md5_digest": "e5d3ee47968b8fd9c24579c317b7415f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 85187, "upload_time": "2019-12-06T21:47:45", "upload_time_iso_8601": "2019-12-06T21:47:45.811715Z", "url": "https://files.pythonhosted.org/packages/31/a4/ce10af4674dffe2cd2544bc9aee567edfc636baa73290454e5593426833f/ratarmount-0.3.4.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "cd0e2318f260861426938128045f2da9", "sha256": "1274c32efc6bf77c2aba36bb9c1a42b302631d588ada3f5168a015b41339c524"}, "downloads": -1, "filename": "ratarmount-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cd0e2318f260861426938128045f2da9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22286, "upload_time": "2019-12-15T21:51:06", "upload_time_iso_8601": "2019-12-15T21:51:06.446038Z", "url": "https://files.pythonhosted.org/packages/ff/66/b812d52420de7f265d3d5ae2b64cc0cdc58820efc960ab5efcabc904467e/ratarmount-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62dc25007ab9eb92917e1981f3f1411d", "sha256": "5df2e3ce0676afcadefd6984fa56a00b61840f622fb58bc01910a29cce4d6a88"}, "downloads": -1, "filename": "ratarmount-0.4.0.tar.gz", "has_sig": false, "md5_digest": "62dc25007ab9eb92917e1981f3f1411d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22394, "upload_time": "2019-12-15T21:51:07", "upload_time_iso_8601": "2019-12-15T21:51:07.484463Z", "url": "https://files.pythonhosted.org/packages/5c/7b/240d9646c21dd55bf4612710880a4a558ab3dac0f173573afb02db8d5424/ratarmount-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "ba0af563ed7cae3209bcca992db4635a", "sha256": "e5d0ff8d005fb36a3073efe5b48c92421df6732a945bdf41f6657f1a41283b9b"}, "downloads": -1, "filename": "ratarmount-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba0af563ed7cae3209bcca992db4635a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23046, "upload_time": "2020-04-10T17:16:13", "upload_time_iso_8601": "2020-04-10T17:16:13.732375Z", "url": "https://files.pythonhosted.org/packages/08/60/2084880e9bf67cfdbae91590c41449149c80984b124222d8d0fecf2c4d74/ratarmount-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32a2ed964650ca20ebac6bea90789b30", "sha256": "d3520660159e40c892582f7649fb450d4cb37ec44a005009604c2b95812cd8e7"}, "downloads": -1, "filename": "ratarmount-0.4.1.tar.gz", "has_sig": false, "md5_digest": "32a2ed964650ca20ebac6bea90789b30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23102, "upload_time": "2020-04-10T17:16:14", "upload_time_iso_8601": "2020-04-10T17:16:14.818242Z", "url": "https://files.pythonhosted.org/packages/06/29/d83854b0bdcd11dfc14f6aba0199f0491c45f9e37f660c2e53fdca2673a3/ratarmount-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba0af563ed7cae3209bcca992db4635a", "sha256": "e5d0ff8d005fb36a3073efe5b48c92421df6732a945bdf41f6657f1a41283b9b"}, "downloads": -1, "filename": "ratarmount-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba0af563ed7cae3209bcca992db4635a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23046, "upload_time": "2020-04-10T17:16:13", "upload_time_iso_8601": "2020-04-10T17:16:13.732375Z", "url": "https://files.pythonhosted.org/packages/08/60/2084880e9bf67cfdbae91590c41449149c80984b124222d8d0fecf2c4d74/ratarmount-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32a2ed964650ca20ebac6bea90789b30", "sha256": "d3520660159e40c892582f7649fb450d4cb37ec44a005009604c2b95812cd8e7"}, "downloads": -1, "filename": "ratarmount-0.4.1.tar.gz", "has_sig": false, "md5_digest": "32a2ed964650ca20ebac6bea90789b30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23102, "upload_time": "2020-04-10T17:16:14", "upload_time_iso_8601": "2020-04-10T17:16:14.818242Z", "url": "https://files.pythonhosted.org/packages/06/29/d83854b0bdcd11dfc14f6aba0199f0491c45f9e37f660c2e53fdca2673a3/ratarmount-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:08 2020"}