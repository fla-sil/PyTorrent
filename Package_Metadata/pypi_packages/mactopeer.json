{"info": {"author": "Pier Carlo Chiodi", "author_email": "pierky@pierky.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "Intended Audience :: Telecommunications Industry", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP", "Topic :: System :: Networking"], "description": "mac-to-peer\n===========\n\n|PYPIVersion| |PythonVersions| |BuildStatus| |Coveralls|\n\nAutomatically fetch MAC/IP address tables (ARP and IPv6 neighbors) from devices and build MAC address to BGP peer ASN mappings.\n\nParticularly focused on building **pmacct**'s *bgp_peer_src_as_map* `file <https://github.com/pmacct/pmacct/blob/master/examples/peers.map.example>`__.\n\n.. code::\n\n  router1#show ip arp\n  Protocol  Address          Age (min)  Hardware Addr   Type   Interface\n  Internet  192.0.2.1             101   0000.5E00.5300  ARPA   TenGigabitEthernet0/0/0\n  \n  router1#show bgp ipv4 unicast neighbors 192.0.2.1\n  BGP neighbor is 192.0.2.1, remote AS 65536, internal link\n  ...\n\nExpected: **00:00:5E:00:53:00** -> **AS65536**\n\nJSON output format:\n\n.. code::\n\n  $ mactopeer -u pierky -p - --hostname router1.example.com\n  Enter password:\n  {\n    \"router1.example.com\": {\n      \"00:00:5E:00:53:00\": {\n        \"ifaces\": [\n          \"TenGigabitEthernet0/0/0\"\n        ],\n        \"ip_addrs\": [\n          \"192.0.2.1\"\n        ],\n        \"peer_asns\": {\n          \"65536\": {\n            \"description\": \"my-peer\",\n            \"ip_addrs\": [\n              \"192.0.2.1\"\n            ]\n          }\n        }\n      }\n    }\n  }\n\npmacct output format:\n\n.. code::\n\n  $ mactopeer -u pierky -p - --devices device.json -f pmacct\n  Enter password:\n  id=65536      ip=203.0.113.1          src_mac=00:00:5E:00:53:00\n\nInstallation and dependencies\n-----------------------------\n\nInstall the program using pip:\n\n.. code::\n\n  pip install mactopeer\n\nThe script uses the `NAPALM <https://napalm.readthedocs.io/>`__ library to connect to network devices and to fetch data from them: you must install the whole library...\n\n.. code::\n\n  pip install napalm\n\n... or at least the subset of network drivers needed to connect to the devices you actually need:\n\n.. code::\n\n  pip install napalm-ios napalm-junos\n\nFor more details, the full list of network drivers and their dependencies please see the official `NAPALM documentation <https://napalm.readthedocs.io/en/latest/installation/index.html>`__.\n\nUsage and features\n------------------\n\nThe ``--help`` shows all the options this program offers. See `its output in USAGE.rst <USAGE.rst>`__.\n\nA list of devices can be provided using an input JSON file: for details about its schema please run ``mactopeer --help-devices``. See `its output in USAGE.rst <USAGE.rst#devices-json-file-schema>`__.\n\nFilters can be set to skip entries on the basis of their MAC address, IP address or resulting peer ASN. Useful to exclude iBGP sessions or to handle exceptions.\n\nMultithreading is also supported to fetch information from more than one device concurrently.\n\nThe list of supported devices can be found in the `Supported Devices <https://napalm.readthedocs.io/en/latest/support/index.html>`__ section of the NAPALM's documentation website. All those implementing the ``get_arp_table`` and ``get_bgp_neighbors`` methods should work: at time of writing they are EOS, IOS, IOSX-R, JunOS, NXOS, VyOS.\n\nIntegration with PeeringDB\n++++++++++++++++++++++++++\n\nThe ``--use-peeringdb`` argument can be used to fetch missing peers' ASNs from PeeringDB, for example in case of multi-lateral peering (such as route servers at IXPs). In this case, routers have not a straight mapping between IP address and BGP neighborship, so the IP address is used to look into PeeringDB records to find the network which is using it.\n\nCaveats\n-------\n\n- Currently VRF support is missing, mostly because it's not included in NAPALM yet.\n- IPv6 neighbors table can only be fetched if a not yet released version of NAPALM is used, that is one which includes `this pull request <https://github.com/napalm-automation/napalm-base/pull/311>`__. To avoid the ``WARNING - Skipping IPv6 neighbors table`` message please use the ``--arp-only`` argument.\n\nAuthor\n------\n\nPier Carlo Chiodi - https://pierky.com/\n\nBlog: https://blog.pierky.com/ Twitter: `@pierky <https://twitter.com/pierky>`_\n\n.. |PYPIVersion| image:: https://img.shields.io/pypi/v/mactopeer.svg\n    :target: https://pypi.python.org/pypi/mactopeer/\n.. |PythonVersions| image:: https://img.shields.io/pypi/pyversions/mactopeer.svg\n.. |BuildStatus| image:: https://travis-ci.org/pierky/mactopeer.svg?branch=master\n    :target: https://travis-ci.org/pierky/mactopeer\n.. |Coveralls| image:: https://coveralls.io/repos/github/pierky/mactopeer/badge.svg?branch=master\n    :target: https://coveralls.io/github/pierky/mactopeer?branch=master\n\n\nChange log\n==========\n\nv0.3.0\n------\n\n- Improvement: made ``use_peeringdb`` an attribute of devices' declaration.\n\n- Improvement: some fixes.\n\nAlso, the tool can be used as a library now.\n\nv0.2.0\n------\n\n- New: IP based filters extended to the use of prefixes too.\n\n- New: ``--use-peeringdb`` argument to fetch missing peers' ASNs from PeeringDB (e.g. in case of multi-lateral peering at IXPs).\n\nv0.1.0\n------\n\nFirst release.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/pierky/mactopeer", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pierky/mactopeer", "keywords": "BGP,IP Routing,pmacct,bgp_peer_src_as_map", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "mactopeer", "package_url": "https://pypi.org/project/mactopeer/", "platform": "", "project_url": "https://pypi.org/project/mactopeer/", "project_urls": {"Download": "https://github.com/pierky/mactopeer", "Homepage": "https://github.com/pierky/mactopeer"}, "release_url": "https://pypi.org/project/mactopeer/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Automatically fetch MAC/IP address tables (ARP and IPv6 neighbors) from devices and build MAC address to BGP peer ASN mappings.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"mac-to-peer\">\n<h2>mac-to-peer</h2>\n<p><a href=\"https://pypi.python.org/pypi/mactopeer/\" rel=\"nofollow\"><img alt=\"PYPIVersion\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b91973705dd13ce4fcd2105d4575456e426243ee/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6163746f706565722e737667\"></a> <img alt=\"PythonVersions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08e1e9f1831a44beb06baf2a9654e2f615e2cf95/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d6163746f706565722e737667\"> <a href=\"https://travis-ci.org/pierky/mactopeer\" rel=\"nofollow\"><img alt=\"BuildStatus\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33b8c54554338b706676485fdb33b8b2fb20da8c/68747470733a2f2f7472617669732d63692e6f72672f706965726b792f6d6163746f706565722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/github/pierky/mactopeer?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/427a966fb0cfc58f0e3a21fcb75b9c7596b481bc/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f706965726b792f6d6163746f706565722f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Automatically fetch MAC/IP address tables (ARP and IPv6 neighbors) from devices and build MAC address to BGP peer ASN mappings.</p>\n<p>Particularly focused on building <strong>pmacct</strong>\u2019s <em>bgp_peer_src_as_map</em> <a href=\"https://github.com/pmacct/pmacct/blob/master/examples/peers.map.example\" rel=\"nofollow\">file</a>.</p>\n<pre>router1#show ip arp\nProtocol  Address          Age (min)  Hardware Addr   Type   Interface\nInternet  192.0.2.1             101   0000.5E00.5300  ARPA   TenGigabitEthernet0/0/0\n\nrouter1#show bgp ipv4 unicast neighbors 192.0.2.1\nBGP neighbor is 192.0.2.1, remote AS 65536, internal link\n...\n</pre>\n<p>Expected: <strong>00:00:5E:00:53:00</strong> -&gt; <strong>AS65536</strong></p>\n<p>JSON output format:</p>\n<pre>$ mactopeer -u pierky -p - --hostname router1.example.com\nEnter password:\n{\n  \"router1.example.com\": {\n    \"00:00:5E:00:53:00\": {\n      \"ifaces\": [\n        \"TenGigabitEthernet0/0/0\"\n      ],\n      \"ip_addrs\": [\n        \"192.0.2.1\"\n      ],\n      \"peer_asns\": {\n        \"65536\": {\n          \"description\": \"my-peer\",\n          \"ip_addrs\": [\n            \"192.0.2.1\"\n          ]\n        }\n      }\n    }\n  }\n}\n</pre>\n<p>pmacct output format:</p>\n<pre>$ mactopeer -u pierky -p - --devices device.json -f pmacct\nEnter password:\nid=65536      ip=203.0.113.1          src_mac=00:00:5E:00:53:00\n</pre>\n<div id=\"installation-and-dependencies\">\n<h3>Installation and dependencies</h3>\n<p>Install the program using pip:</p>\n<pre>pip install mactopeer\n</pre>\n<p>The script uses the <a href=\"https://napalm.readthedocs.io/\" rel=\"nofollow\">NAPALM</a> library to connect to network devices and to fetch data from them: you must install the whole library\u2026</p>\n<pre>pip install napalm\n</pre>\n<p>\u2026 or at least the subset of network drivers needed to connect to the devices you actually need:</p>\n<pre>pip install napalm-ios napalm-junos\n</pre>\n<p>For more details, the full list of network drivers and their dependencies please see the official <a href=\"https://napalm.readthedocs.io/en/latest/installation/index.html\" rel=\"nofollow\">NAPALM documentation</a>.</p>\n</div>\n<div id=\"usage-and-features\">\n<h3>Usage and features</h3>\n<p>The <tt><span class=\"pre\">--help</span></tt> shows all the options this program offers. See <a href=\"USAGE.rst\" rel=\"nofollow\">its output in USAGE.rst</a>.</p>\n<p>A list of devices can be provided using an input JSON file: for details about its schema please run <tt>mactopeer <span class=\"pre\">--help-devices</span></tt>. See <a href=\"USAGE.rst#devices-json-file-schema\" rel=\"nofollow\">its output in USAGE.rst</a>.</p>\n<p>Filters can be set to skip entries on the basis of their MAC address, IP address or resulting peer ASN. Useful to exclude iBGP sessions or to handle exceptions.</p>\n<p>Multithreading is also supported to fetch information from more than one device concurrently.</p>\n<p>The list of supported devices can be found in the <a href=\"https://napalm.readthedocs.io/en/latest/support/index.html\" rel=\"nofollow\">Supported Devices</a> section of the NAPALM\u2019s documentation website. All those implementing the <tt>get_arp_table</tt> and <tt>get_bgp_neighbors</tt> methods should work: at time of writing they are EOS, IOS, IOSX-R, JunOS, NXOS, VyOS.</p>\n<div id=\"integration-with-peeringdb\">\n<h4>Integration with PeeringDB</h4>\n<p>The <tt><span class=\"pre\">--use-peeringdb</span></tt> argument can be used to fetch missing peers\u2019 ASNs from PeeringDB, for example in case of multi-lateral peering (such as route servers at IXPs). In this case, routers have not a straight mapping between IP address and BGP neighborship, so the IP address is used to look into PeeringDB records to find the network which is using it.</p>\n</div>\n</div>\n<div id=\"caveats\">\n<h3>Caveats</h3>\n<ul>\n<li>Currently VRF support is missing, mostly because it\u2019s not included in NAPALM yet.</li>\n<li>IPv6 neighbors table can only be fetched if a not yet released version of NAPALM is used, that is one which includes <a href=\"https://github.com/napalm-automation/napalm-base/pull/311\" rel=\"nofollow\">this pull request</a>. To avoid the <tt>WARNING - Skipping IPv6 neighbors table</tt> message please use the <tt><span class=\"pre\">--arp-only</span></tt> argument.</li>\n</ul>\n</div>\n<div id=\"author\">\n<h3>Author</h3>\n<p>Pier Carlo Chiodi - <a href=\"https://pierky.com/\" rel=\"nofollow\">https://pierky.com/</a></p>\n<p>Blog: <a href=\"https://blog.pierky.com/\" rel=\"nofollow\">https://blog.pierky.com/</a> Twitter: <a href=\"https://twitter.com/pierky\" rel=\"nofollow\">@pierky</a></p>\n</div>\n</div>\n<div id=\"change-log\">\n<h2>Change log</h2>\n<div id=\"v0-3-0\">\n<h3>v0.3.0</h3>\n<ul>\n<li>Improvement: made <tt>use_peeringdb</tt> an attribute of devices\u2019 declaration.</li>\n<li>Improvement: some fixes.</li>\n</ul>\n<p>Also, the tool can be used as a library now.</p>\n</div>\n<div id=\"v0-2-0\">\n<h3>v0.2.0</h3>\n<ul>\n<li>New: IP based filters extended to the use of prefixes too.</li>\n<li>New: <tt><span class=\"pre\">--use-peeringdb</span></tt> argument to fetch missing peers\u2019 ASNs from PeeringDB (e.g. in case of multi-lateral peering at IXPs).</li>\n</ul>\n</div>\n<div id=\"v0-1-0\">\n<h3>v0.1.0</h3>\n<p>First release.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3213234, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1b7f632e7b86c07ebf3198c3efff68df", "sha256": "6ed0d09017be3b1f062d6046bf2eea8a4cda445b0a22da3dc7d7318246aa740e"}, "downloads": -1, "filename": "mactopeer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1b7f632e7b86c07ebf3198c3efff68df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9378, "upload_time": "2017-09-25T16:38:09", "upload_time_iso_8601": "2017-09-25T16:38:09.638127Z", "url": "https://files.pythonhosted.org/packages/1b/fe/879ca5ffb64276866ab7f992d880f927ce3fbca920a290bccc533b8b2225/mactopeer-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "19e9a0c1325bf1b499132519eabb1bb3", "sha256": "c39aebca2118caf44c2d835dd0d825da19b1e0b90d442980636704488af56629"}, "downloads": -1, "filename": "mactopeer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "19e9a0c1325bf1b499132519eabb1bb3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12845, "upload_time": "2017-09-26T16:59:34", "upload_time_iso_8601": "2017-09-26T16:59:34.882266Z", "url": "https://files.pythonhosted.org/packages/30/bc/3e259813fcaf31e0904517fbae1f86da62be7a036048d3b65114612ccd2f/mactopeer-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "dd9d5e0f19bdc3d360590fc47e5403d8", "sha256": "3a79349ac5a0c78eab5893ba097a010ca4539c0871d9e8174ee919ddc4bb0c00"}, "downloads": -1, "filename": "mactopeer-0.3.0.tar.gz", "has_sig": false, "md5_digest": "dd9d5e0f19bdc3d360590fc47e5403d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33248, "upload_time": "2017-09-29T16:33:56", "upload_time_iso_8601": "2017-09-29T16:33:56.578062Z", "url": "https://files.pythonhosted.org/packages/cf/ac/0746e6f1faeac553b3cfd5b9569ce4c13477212099c1d0fee3fe95c37066/mactopeer-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd9d5e0f19bdc3d360590fc47e5403d8", "sha256": "3a79349ac5a0c78eab5893ba097a010ca4539c0871d9e8174ee919ddc4bb0c00"}, "downloads": -1, "filename": "mactopeer-0.3.0.tar.gz", "has_sig": false, "md5_digest": "dd9d5e0f19bdc3d360590fc47e5403d8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33248, "upload_time": "2017-09-29T16:33:56", "upload_time_iso_8601": "2017-09-29T16:33:56.578062Z", "url": "https://files.pythonhosted.org/packages/cf/ac/0746e6f1faeac553b3cfd5b9569ce4c13477212099c1d0fee3fe95c37066/mactopeer-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:16 2020"}