{"info": {"author": "Robert Lechte", "author_email": "robertlechte@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "sqlakeyset: offset-free paging for sqlalchemy\n=============================================\n\n**Notice:** In accordance with Python 2's rapidly-approaching end-of-life date, we've stopped supporting Python 2. If you really need it, the latest version to support Python 2 is 0.1.1559103842, but you'll miss out on all the latest features and bugfixes from the latest version. You should be upgrading anyway!\n\n.. image:: https://travis-ci.org/djrobstep/sqlakeyset.svg?branch=master\n    :target: https://travis-ci.org/djrobstep/sqlakeyset\n\nThis library implements keyset-based paging for SQLAlchemy (both ORM and core).\n\nThis library has been tested with PostgreSQL and MariaDB/MySQL. It should work with other SQLAlchemy-supported databases too provided they support ``row(`` syntax (see below).\n\nBackground\n----------\n\nA lot of people use SQL's ``OFFSET`` syntax to implement paging of query results. The trouble with that is, the more pages you get through, the slower your query gets. Also, if the results you're paging through change frequently, it's possible to skip over or repeat results between pages. Keyset paging avoids these problems: Selecting even the millionth page is as fast as selecting the first.\n\n\nGetting Started\n---------------\n\nHere's how it works with a typical ORM query:\n\n.. code-block:: python\n\n    from sqlakeyset import get_page\n    from sqlbag import S\n\n    from models import Book\n\n    with S('postgresql:///books') as s:  # create a session\n        q = s.query(Book).order_by(Book.author, Book.title, Book.id)  #\n\n        # gets the first page\n        page1 = get_page(q, per_page=20)\n\n        # gets the key for the next page\n        next_page = page1.paging.next\n\n        # gets the second page\n        page2 = get_page(q, per_page=20, page=next_page)\n\n        # returning to the first page, getting the key\n        previous_page = page2.paging.previous\n\n        # the first page again, backwards from the previous page\n        page1 = get_page(q, per_page=20, page=previous_page)\n\n        # what if new items were added at the start?\n        if page1.paging.has_previous:\n\n            # go back even further\n            previous_page = page1.paging.previous\n            page1 = get_page(q, per_page=20, page=previous_page)\n\n\nUnder the Hood\n--------------\n\nsqlakeyset does the following to your query in order to get the paged contents:\n\n- adds a where clause, to get only rows after the specified row key.\n- if getting the previous page, reverses the ``order by`` direction in order the get the rows *before* the specified bookmark.\n- adds a limit clause, to fetch only enough items to fill the page, plus one additional (this additional row is used only to test for the existence of further pages after the current one, and is discarded from the results).\n- returns the page contents as an ordinary list that has an attached ``.paging`` attribute with the paging information for this and related pages.\n\n\nPage objects\n------------\n\nPaged items/rows are returned in a Page object, which is a vanilla python list, except with an attached ``Paging`` object with the paging information.\n\nProperties such as `next` and `previous` return a 2-tuple containing the ordering key for the row, and a boolean to specify if the direction is forwards or backwards.\n\nIn our above example, the 2-tuple specifying the second page might look like:\n\n.. code-block:: python\n\n    ('Joseph Heller', 'Catch 22', 123), False\n\nThe `False` means the query will fetch the page *after* the row containing Catch 22. This tuple contains two elements, title and id, to match the order by clause of the query.\n\nThe page before this row would be specified as:\n\n.. code-block:: python\n\n    ('Joseph Heller', 'Catch 22', 123), True\n\nThe first and last pages are fetched with `None` instead of a tuple, so for the first page (this is also the default if the page parameter is not specified):\n\n.. code-block:: python\n\n    None, False\n\nAnd the last page:\n\n.. code-block:: python\n\n    None, True\n\nKeyset Serialization\n--------------------\n\nYou will probably want to turn these keysets/bookmarks into strings for passing around. ``sqlakeyset`` includes code to do this. To get a serialized bookmark, just add ``bookmark_`` to the name of the property that holds the keyset you want.\n\nMost commonly you'll want ``next`` and ``previous``, so:\n\n.. code-block:: python\n\n    >>> page.paging.bookmark_previous\n    <i:1~i:2015~s:Bad Blood~i:34\n    >>> page.paging.bookmark_next\n    >i:1~i:2014~s:Shake It Off~i:31\n\n``sqlakeyset`` uses the python csv row serializer to serialize the bookmark values (using ``~`` instead of a ``,`` as the separator). Direction is indicated by ``>`` (forwards/next), or ``<`` (backwards/previous) at the start of the string.\n\nLimitations\n-----------\n\n- **Golden Rule:** Always ensure your keysets are unique per row. If you violate this condition you risk skipped rows and other nasty problems. The simplest way to do this is to always include your primary key column(s) at the end of your ordering columns.\n\n- Any rows containing null values in their keysets **will be omitted from the results**, so your ordering columns should be ``NOT NULL``. (This is a consequence of the fact that comparisons against ``NULL`` are always false in SQL.) This may change in the future if we work out an alternative implementation; but for now we recommend using ``coalesce`` as a workaround:\n\n.. code-block:: python\n\n    from sqlakeyset import get_page\n    from sqlalchemy import func\n    from sqlbag import S\n    from models import Book\n    with S('postgresql:///books') as s:\n        # If Book.cost can be NULL:\n        q = s.query(Book).order_by(func.coalesce(Book.cost, 0), Book.id)\n        # page1 will start with books where cost is null:\n        page1 = get_page(q, per_page=20)\n\n- If you're using the in-built keyset serialization, this only handles basic data/column types so far (strings, ints, floats, datetimes, dates, booleans, and a few others). The serialization can be extended to serialize more advanced types as necessary (documentation on this is forthcoming).\n\n\nDocumentation\n-------------\n\n``sqlakeyset`` is in early alpha and documentation other than this README is scarce so far. We are working on remedying this. Watch this space.\n\n\nInstallation\n------------\n\nAssuming you have `pip <https://pip.pypa.io>`_ installed, all you need to do is install as follows:\n\n.. code-block:: shell\n\n    $ pip install sqlakeyset\n\nThis will install sqlakeyset and also sqlalchemy if not already installed. Obviously you'll need the necessary database driver for your chosen database to be installed also.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/djrobstep/sqlakeyset", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sqlakeyset", "package_url": "https://pypi.org/project/sqlakeyset/", "platform": "", "project_url": "https://pypi.org/project/sqlakeyset/", "project_urls": {"Homepage": "https://github.com/djrobstep/sqlakeyset"}, "release_url": "https://pypi.org/project/sqlakeyset/0.1.1579837191/", "requires_dist": ["sqlalchemy", "python-dateutil"], "requires_python": "", "summary": "offset-free paging for sqlalchemy", "version": "0.1.1579837191", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Notice:</strong> In accordance with Python 2\u2019s rapidly-approaching end-of-life date, we\u2019ve stopped supporting Python 2. If you really need it, the latest version to support Python 2 is 0.1.1559103842, but you\u2019ll miss out on all the latest features and bugfixes from the latest version. You should be upgrading anyway!</p>\n<a href=\"https://travis-ci.org/djrobstep/sqlakeyset\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/djrobstep/sqlakeyset.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d826be506661edaf5da269f677a8f1aa58ed33a/68747470733a2f2f7472617669732d63692e6f72672f646a726f62737465702f73716c616b65797365742e7376673f6272616e63683d6d6173746572\"></a>\n<p>This library implements keyset-based paging for SQLAlchemy (both ORM and core).</p>\n<p>This library has been tested with PostgreSQL and MariaDB/MySQL. It should work with other SQLAlchemy-supported databases too provided they support <tt>row(</tt> syntax (see below).</p>\n<div id=\"background\">\n<h2>Background</h2>\n<p>A lot of people use SQL\u2019s <tt>OFFSET</tt> syntax to implement paging of query results. The trouble with that is, the more pages you get through, the slower your query gets. Also, if the results you\u2019re paging through change frequently, it\u2019s possible to skip over or repeat results between pages. Keyset paging avoids these problems: Selecting even the millionth page is as fast as selecting the first.</p>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>Here\u2019s how it works with a typical ORM query:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlakeyset</span> <span class=\"kn\">import</span> <span class=\"n\">get_page</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlbag</span> <span class=\"kn\">import</span> <span class=\"n\">S</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n<span class=\"k\">with</span> <span class=\"n\">S</span><span class=\"p\">(</span><span class=\"s1\">'postgresql:///books'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>  <span class=\"c1\"># create a session</span>\n    <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>  <span class=\"c1\">#</span>\n\n    <span class=\"c1\"># gets the first page</span>\n    <span class=\"n\">page1</span> <span class=\"o\">=</span> <span class=\"n\">get_page</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># gets the key for the next page</span>\n    <span class=\"n\">next_page</span> <span class=\"o\">=</span> <span class=\"n\">page1</span><span class=\"o\">.</span><span class=\"n\">paging</span><span class=\"o\">.</span><span class=\"n\">next</span>\n\n    <span class=\"c1\"># gets the second page</span>\n    <span class=\"n\">page2</span> <span class=\"o\">=</span> <span class=\"n\">get_page</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"n\">next_page</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># returning to the first page, getting the key</span>\n    <span class=\"n\">previous_page</span> <span class=\"o\">=</span> <span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">paging</span><span class=\"o\">.</span><span class=\"n\">previous</span>\n\n    <span class=\"c1\"># the first page again, backwards from the previous page</span>\n    <span class=\"n\">page1</span> <span class=\"o\">=</span> <span class=\"n\">get_page</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"n\">previous_page</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># what if new items were added at the start?</span>\n    <span class=\"k\">if</span> <span class=\"n\">page1</span><span class=\"o\">.</span><span class=\"n\">paging</span><span class=\"o\">.</span><span class=\"n\">has_previous</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># go back even further</span>\n        <span class=\"n\">previous_page</span> <span class=\"o\">=</span> <span class=\"n\">page1</span><span class=\"o\">.</span><span class=\"n\">paging</span><span class=\"o\">.</span><span class=\"n\">previous</span>\n        <span class=\"n\">page1</span> <span class=\"o\">=</span> <span class=\"n\">get_page</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">page</span><span class=\"o\">=</span><span class=\"n\">previous_page</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"under-the-hood\">\n<h2>Under the Hood</h2>\n<p>sqlakeyset does the following to your query in order to get the paged contents:</p>\n<ul>\n<li>adds a where clause, to get only rows after the specified row key.</li>\n<li>if getting the previous page, reverses the <tt>order by</tt> direction in order the get the rows <em>before</em> the specified bookmark.</li>\n<li>adds a limit clause, to fetch only enough items to fill the page, plus one additional (this additional row is used only to test for the existence of further pages after the current one, and is discarded from the results).</li>\n<li>returns the page contents as an ordinary list that has an attached <tt>.paging</tt> attribute with the paging information for this and related pages.</li>\n</ul>\n</div>\n<div id=\"page-objects\">\n<h2>Page objects</h2>\n<p>Paged items/rows are returned in a Page object, which is a vanilla python list, except with an attached <tt>Paging</tt> object with the paging information.</p>\n<p>Properties such as <cite>next</cite> and <cite>previous</cite> return a 2-tuple containing the ordering key for the row, and a boolean to specify if the direction is forwards or backwards.</p>\n<p>In our above example, the 2-tuple specifying the second page might look like:</p>\n<pre><span class=\"p\">(</span><span class=\"s1\">'Joseph Heller'</span><span class=\"p\">,</span> <span class=\"s1\">'Catch 22'</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">),</span> <span class=\"kc\">False</span>\n</pre>\n<p>The <cite>False</cite> means the query will fetch the page <em>after</em> the row containing Catch 22. This tuple contains two elements, title and id, to match the order by clause of the query.</p>\n<p>The page before this row would be specified as:</p>\n<pre><span class=\"p\">(</span><span class=\"s1\">'Joseph Heller'</span><span class=\"p\">,</span> <span class=\"s1\">'Catch 22'</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">),</span> <span class=\"kc\">True</span>\n</pre>\n<p>The first and last pages are fetched with <cite>None</cite> instead of a tuple, so for the first page (this is also the default if the page parameter is not specified):</p>\n<pre><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n</pre>\n<p>And the last page:</p>\n<pre><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"keyset-serialization\">\n<h2>Keyset Serialization</h2>\n<p>You will probably want to turn these keysets/bookmarks into strings for passing around. <tt>sqlakeyset</tt> includes code to do this. To get a serialized bookmark, just add <tt>bookmark_</tt> to the name of the property that holds the keyset you want.</p>\n<p>Most commonly you\u2019ll want <tt>next</tt> and <tt>previous</tt>, so:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">paging</span><span class=\"o\">.</span><span class=\"n\">bookmark_previous</span>\n<span class=\"o\">&lt;</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"o\">~</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"mi\">2015</span><span class=\"o\">~</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"n\">Bad</span> <span class=\"n\">Blood</span><span class=\"o\">~</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"mi\">34</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">paging</span><span class=\"o\">.</span><span class=\"n\">bookmark_next</span>\n<span class=\"o\">&gt;</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"o\">~</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"mi\">2014</span><span class=\"o\">~</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"n\">Shake</span> <span class=\"n\">It</span> <span class=\"n\">Off</span><span class=\"o\">~</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"mi\">31</span>\n</pre>\n<p><tt>sqlakeyset</tt> uses the python csv row serializer to serialize the bookmark values (using <tt>~</tt> instead of a <tt>,</tt> as the separator). Direction is indicated by <tt>&gt;</tt> (forwards/next), or <tt>&lt;</tt> (backwards/previous) at the start of the string.</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<ul>\n<li><strong>Golden Rule:</strong> Always ensure your keysets are unique per row. If you violate this condition you risk skipped rows and other nasty problems. The simplest way to do this is to always include your primary key column(s) at the end of your ordering columns.</li>\n<li>Any rows containing null values in their keysets <strong>will be omitted from the results</strong>, so your ordering columns should be <tt>NOT NULL</tt>. (This is a consequence of the fact that comparisons against <tt>NULL</tt> are always false in SQL.) This may change in the future if we work out an alternative implementation; but for now we recommend using <tt>coalesce</tt> as a workaround:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlakeyset</span> <span class=\"kn\">import</span> <span class=\"n\">get_page</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">func</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlbag</span> <span class=\"kn\">import</span> <span class=\"n\">S</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n<span class=\"k\">with</span> <span class=\"n\">S</span><span class=\"p\">(</span><span class=\"s1\">'postgresql:///books'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n    <span class=\"c1\"># If Book.cost can be NULL:</span>\n    <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">coalesce</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">cost</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"c1\"># page1 will start with books where cost is null:</span>\n    <span class=\"n\">page1</span> <span class=\"o\">=</span> <span class=\"n\">get_page</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">per_page</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>If you\u2019re using the in-built keyset serialization, this only handles basic data/column types so far (strings, ints, floats, datetimes, dates, booleans, and a few others). The serialization can be extended to serialize more advanced types as necessary (documentation on this is forthcoming).</li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><tt>sqlakeyset</tt> is in early alpha and documentation other than this README is scarce so far. We are working on remedying this. Watch this space.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Assuming you have <a href=\"https://pip.pypa.io\" rel=\"nofollow\">pip</a> installed, all you need to do is install as follows:</p>\n<pre>$ pip install sqlakeyset\n</pre>\n<p>This will install sqlakeyset and also sqlalchemy if not already installed. Obviously you\u2019ll need the necessary database driver for your chosen database to be installed also.</p>\n</div>\n\n          </div>"}, "last_serial": 6511806, "releases": {"0.1.1472125695": [{"comment_text": "", "digests": {"md5": "01908472fd94573cba65d220a9ef2578", "sha256": "02f44cdda986d200c9d1d079a5c106a6fbc2d1646b117c7e644e6516a22877da"}, "downloads": -1, "filename": "sqlakeyset-0.1.1472125695-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "01908472fd94573cba65d220a9ef2578", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 13467, "upload_time": "2016-08-25T12:06:46", "upload_time_iso_8601": "2016-08-25T12:06:46.897910Z", "url": "https://files.pythonhosted.org/packages/9c/bb/286e639f2040fe7973750a5c247fdd2571e1ba3c368f5f24bafb4f4c8184/sqlakeyset-0.1.1472125695-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7191b5d91bdc1cdf287cfd29315ac71d", "sha256": "b2d8f67e069d717c5a4068c1580b7e49f04944d145af0e770bd0681b50dc9265"}, "downloads": -1, "filename": "sqlakeyset-0.1.1472125695.tar.gz", "has_sig": false, "md5_digest": "7191b5d91bdc1cdf287cfd29315ac71d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11051, "upload_time": "2016-08-25T12:06:44", "upload_time_iso_8601": "2016-08-25T12:06:44.004144Z", "url": "https://files.pythonhosted.org/packages/71/be/cfd3cdf27c77e98ce2249e6ed980a93e5a533eb11dcdb78dbbe5552a25bd/sqlakeyset-0.1.1472125695.tar.gz", "yanked": false}], "0.1.1485813522": [{"comment_text": "", "digests": {"md5": "df87e059f28485b4644ad1f4c9d9bace", "sha256": "f34f7b00dd66491815b050b6f1725d0836a51749bbff342afaa10aee5715e65b"}, "downloads": -1, "filename": "sqlakeyset-0.1.1485813522-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "df87e059f28485b4644ad1f4c9d9bace", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 13717, "upload_time": "2017-01-30T22:06:10", "upload_time_iso_8601": "2017-01-30T22:06:10.180386Z", "url": "https://files.pythonhosted.org/packages/f0/91/f15a15373bed6b76a29d037d89990ea0a2bbb530eeefb219c38a43f93632/sqlakeyset-0.1.1485813522-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60d33b8f0180e96f515ad6abf4c59875", "sha256": "252452e27ac67438f0e5ccaad214830130f186b3dbba86478ce2ed8a16c8c72a"}, "downloads": -1, "filename": "sqlakeyset-0.1.1485813522.tar.gz", "has_sig": false, "md5_digest": "60d33b8f0180e96f515ad6abf4c59875", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8856, "upload_time": "2017-01-30T22:06:05", "upload_time_iso_8601": "2017-01-30T22:06:05.278591Z", "url": "https://files.pythonhosted.org/packages/93/c0/c9d11265cb94de44597ebd6916e8dd3eb53a52b24d217489c7717427d47f/sqlakeyset-0.1.1485813522.tar.gz", "yanked": false}], "0.1.1558438465": [{"comment_text": "", "digests": {"md5": "979e556133dec9ddd014ec2062892f89", "sha256": "b526e048d571f0b6b5006320109fb6bbc48b005e74ecea1cab7f24f78e882a10"}, "downloads": -1, "filename": "sqlakeyset-0.1.1558438465-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "979e556133dec9ddd014ec2062892f89", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11347, "upload_time": "2019-05-21T11:36:47", "upload_time_iso_8601": "2019-05-21T11:36:47.488701Z", "url": "https://files.pythonhosted.org/packages/fe/b2/10e4cad7e80deb904c2cfad233a1c668b1ca76c87facf708206065d8e08d/sqlakeyset-0.1.1558438465-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ef6539ea10c5d9656c8581758b8cc75", "sha256": "38fd6e0982bc3c33c92b86ded0b471b8fcb29d8f2014967499a2e133e70455f4"}, "downloads": -1, "filename": "sqlakeyset-0.1.1558438465.tar.gz", "has_sig": false, "md5_digest": "2ef6539ea10c5d9656c8581758b8cc75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11424, "upload_time": "2019-05-21T11:36:49", "upload_time_iso_8601": "2019-05-21T11:36:49.661218Z", "url": "https://files.pythonhosted.org/packages/89/9e/b5bd6c86ba9dbb7b06922de5c0676cc1d8c78a8d4508f92bf4899aff9dc5/sqlakeyset-0.1.1558438465.tar.gz", "yanked": false}], "0.1.1559103842": [{"comment_text": "", "digests": {"md5": "8f44d66c9e33caf3131f10e54b3e526f", "sha256": "7f5ec3f66794618d8364743a41a09d75691475a8fcd2b3b0c6d81209d4e12e0a"}, "downloads": -1, "filename": "sqlakeyset-0.1.1559103842-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8f44d66c9e33caf3131f10e54b3e526f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11377, "upload_time": "2019-05-29T07:54:05", "upload_time_iso_8601": "2019-05-29T07:54:05.563581Z", "url": "https://files.pythonhosted.org/packages/30/5a/d997e6cb3b4deee47fc1f14f162f1175b837752cb8c71d1e9b5d28f71e3d/sqlakeyset-0.1.1559103842-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82036822d242e91b6c7bd7f643db1ccd", "sha256": "6644d3a6df7fe69d6f3b356befac156c19b1641c5a520cccc82e1d5c9aef0103"}, "downloads": -1, "filename": "sqlakeyset-0.1.1559103842.tar.gz", "has_sig": false, "md5_digest": "82036822d242e91b6c7bd7f643db1ccd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11463, "upload_time": "2019-05-29T07:54:08", "upload_time_iso_8601": "2019-05-29T07:54:08.416192Z", "url": "https://files.pythonhosted.org/packages/68/f6/96568d405dc6eada6cfea8d69d19d9a16b2968555c04e7db73e8b7a86983/sqlakeyset-0.1.1559103842.tar.gz", "yanked": false}], "0.1.1576552828": [{"comment_text": "", "digests": {"md5": "f6be591faa97a6495393ce905d81edcb", "sha256": "eb2dee67c8ecea041b4148aa29a2b5b227c51d3c977e7a0d4058be60b1e8f21f"}, "downloads": -1, "filename": "sqlakeyset-0.1.1576552828-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f6be591faa97a6495393ce905d81edcb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12131, "upload_time": "2019-12-17T03:20:59", "upload_time_iso_8601": "2019-12-17T03:20:59.011430Z", "url": "https://files.pythonhosted.org/packages/6b/9c/a365890dd8587a26d9b751034b67bb4888e8bd0f75d3807cf2994be5d126/sqlakeyset-0.1.1576552828-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61e730a7d0fae74260699922a93e8937", "sha256": "92896a8826e3af0549439382ad798901ae8ad9105c37385f1e1678481a96f82d"}, "downloads": -1, "filename": "sqlakeyset-0.1.1576552828.tar.gz", "has_sig": false, "md5_digest": "61e730a7d0fae74260699922a93e8937", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11551, "upload_time": "2019-12-17T03:21:00", "upload_time_iso_8601": "2019-12-17T03:21:00.891351Z", "url": "https://files.pythonhosted.org/packages/9a/8a/ae2dc0d76a28b5e42f480e8fc5a963fe68fd49242587c522c6aa9fb88eab/sqlakeyset-0.1.1576552828.tar.gz", "yanked": false}], "0.1.1576554700": [{"comment_text": "", "digests": {"md5": "360f6a9e8d93d1a846bf20322dc7181e", "sha256": "7fe8f2fa3482d918dd2e0014c6c38665d03bccc1daa2faccc458007fca9481c9"}, "downloads": -1, "filename": "sqlakeyset-0.1.1576554700-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "360f6a9e8d93d1a846bf20322dc7181e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 12113, "upload_time": "2019-12-17T03:54:08", "upload_time_iso_8601": "2019-12-17T03:54:08.493432Z", "url": "https://files.pythonhosted.org/packages/f2/59/0ff469e0962647b41ad102250e1e49c247eb9c79a2e45f60d2a03e22e437/sqlakeyset-0.1.1576554700-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ec1592288f3f1927e19ae52339e4241", "sha256": "3b9a34de1c6638bb48a1184fd9ad197eb772d4c5b6360d1f45d1e5a9440d01df"}, "downloads": -1, "filename": "sqlakeyset-0.1.1576554700.tar.gz", "has_sig": false, "md5_digest": "1ec1592288f3f1927e19ae52339e4241", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12383, "upload_time": "2019-12-17T03:54:11", "upload_time_iso_8601": "2019-12-17T03:54:11.510784Z", "url": "https://files.pythonhosted.org/packages/12/06/df2c044347d1f6873670767146af49a70d2366342c3556b3eb76ff12662b/sqlakeyset-0.1.1576554700.tar.gz", "yanked": false}], "0.1.1579837191": [{"comment_text": "", "digests": {"md5": "ac8af3459f73ae9d2797944eefccf106", "sha256": "1aa250f0b124dd1a34e951542bcd6d1b858c4677846b3ca21aa1dabf54b8431f"}, "downloads": -1, "filename": "sqlakeyset-0.1.1579837191-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac8af3459f73ae9d2797944eefccf106", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16048, "upload_time": "2020-01-24T03:40:43", "upload_time_iso_8601": "2020-01-24T03:40:43.588083Z", "url": "https://files.pythonhosted.org/packages/58/b2/c6072df94bf1efdd8d7f356e770e00fa06894ea6713f0c5c16770c160d78/sqlakeyset-0.1.1579837191-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcbde39a00ee4ac78ca9a75f82467344", "sha256": "064355bfd30515012dea96dfec4e7fddab985ffd5bb57f517b60c47552a041ce"}, "downloads": -1, "filename": "sqlakeyset-0.1.1579837191.tar.gz", "has_sig": false, "md5_digest": "dcbde39a00ee4ac78ca9a75f82467344", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16356, "upload_time": "2020-01-24T03:40:45", "upload_time_iso_8601": "2020-01-24T03:40:45.626879Z", "url": "https://files.pythonhosted.org/packages/ac/78/8b46501e957dbcd07ee2858ff7b53d486aac7017e9b959adfbbe73aeaec6/sqlakeyset-0.1.1579837191.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac8af3459f73ae9d2797944eefccf106", "sha256": "1aa250f0b124dd1a34e951542bcd6d1b858c4677846b3ca21aa1dabf54b8431f"}, "downloads": -1, "filename": "sqlakeyset-0.1.1579837191-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac8af3459f73ae9d2797944eefccf106", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16048, "upload_time": "2020-01-24T03:40:43", "upload_time_iso_8601": "2020-01-24T03:40:43.588083Z", "url": "https://files.pythonhosted.org/packages/58/b2/c6072df94bf1efdd8d7f356e770e00fa06894ea6713f0c5c16770c160d78/sqlakeyset-0.1.1579837191-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dcbde39a00ee4ac78ca9a75f82467344", "sha256": "064355bfd30515012dea96dfec4e7fddab985ffd5bb57f517b60c47552a041ce"}, "downloads": -1, "filename": "sqlakeyset-0.1.1579837191.tar.gz", "has_sig": false, "md5_digest": "dcbde39a00ee4ac78ca9a75f82467344", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16356, "upload_time": "2020-01-24T03:40:45", "upload_time_iso_8601": "2020-01-24T03:40:45.626879Z", "url": "https://files.pythonhosted.org/packages/ac/78/8b46501e957dbcd07ee2858ff7b53d486aac7017e9b959adfbbe73aeaec6/sqlakeyset-0.1.1579837191.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:01 2020"}