{"info": {"author": "R\u00e9mi Alvergnat", "author_email": "toilal.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "ReBulk\n=======\n\n.. image:: http://img.shields.io/pypi/v/rebulk.svg\n    :target: https://pypi.python.org/pypi/rebulk\n    :alt: Latest Version\n\n.. image:: http://img.shields.io/badge/license-MIT-blue.svg\n    :target: https://pypi.python.org/pypi/rebulk\n    :alt: MIT License\n\n.. image:: http://img.shields.io/travis/Toilal/rebulk.svg\n    :target: http://travis-ci.org/Toilal/rebulk?branch=master\n    :alt: Build Status\n\n.. image:: http://img.shields.io/coveralls/Toilal/rebulk.svg\n    :target: https://coveralls.io/r/Toilal/rebulk?branch=master\n    :alt: Coveralls\n\nReBulk is a python library that performs advanced searches in strings that would be hard to implement using\n`re module`_ or `String methods`_ only.\n\nIt includes some features like ``Patterns``, ``Match``, ``Rule`` that allows developers to build a\ncustom and complex string matcher using a readable and extendable API.\n\nThis project is hosted on GitHub: `<https://github.com/Toilal/rebulk>`_\n\nInstall\n-------\n.. code-block:: sh\n\n    $ pip install rebulk\n\nUsage\n------\nRegular expression, string and function based patterns are declared in a ``Rebulk`` object. It use a fluent API to\nchain ``string``, ``regex``, and ``functional`` methods to define various patterns types.\n\n.. code-block:: python\n\n    >>> from rebulk import Rebulk\n    >>> bulk = Rebulk().string('brown').regex(r'qu\\w+').functional(lambda s: (20, 25))\n\nWhen ``Rebulk`` object is fully configured, you can call ``matches`` method with an input string to retrieve all\n``Match`` objects found by registered pattern.\n\n.. code-block:: python\n\n    >>> bulk.matches(\"The quick brown fox jumps over the lazy dog\")\n    [<brown:(10, 15)>, <quick:(4, 9)>, <jumps:(20, 25)>]\n\nIf multiple ``Match`` objects are found at the same position, only the longer one is kept.\n\n.. code-block:: python\n\n    >>> bulk = Rebulk().string('lakers').string('la')\n    >>> bulk.matches(\"the lakers are from la\")\n    [<lakers:(4, 10)>, <la:(20, 22)>]\n\nString Patterns\n---------------\nString patterns are based on `str.find`_ method to find matches, but returns all matches in the string. ``ignore_case``\ncan be enabled to ignore case.\n\n.. code-block:: python\n\n    >>> Rebulk().string('la').matches(\"lalalilala\")\n    [<la:(0, 2)>, <la:(2, 4)>, <la:(6, 8)>, <la:(8, 10)>]\n\n    >>> Rebulk().string('la').matches(\"LalAlilAla\")\n    [<la:(8, 10)>]\n\n    >>> Rebulk().string('la', ignore_case=True).matches(\"LalAlilAla\")\n    [<La:(0, 2)>, <lA:(2, 4)>, <lA:(6, 8)>, <la:(8, 10)>]\n\nYou can define several patterns with a single ``string`` method call.\n\n.. code-block:: python\n\n    >>> Rebulk().string('Winter', 'coming').matches(\"Winter is coming...\")\n    [<Winter:(0, 6)>, <coming:(10, 16)>]\n\nRegular Expression Patterns\n---------------------------\nRegular Expression patterns are based on a compiled regular expression.\n`re.finditer`_ method is used to find matches.\n\nIf `regex module`_ is available, it will be used by rebulk instead of default `re module`_.\n\n.. code-block:: python\n\n    >>> Rebulk().regex(r'l\\w').matches(\"lolita\")\n    [<lo:(0, 2)>, <li:(2, 4)>]\n\nYou can define several patterns with a single ``regex`` method call.\n\n.. code-block:: python\n\n    >>> Rebulk().regex(r'Wint\\wr', r'com\\w{3}').matches(\"Winter is coming...\")\n    [<Winter:(0, 6)>, <coming:(10, 16)>]\n\nAll keyword arguments from `re.compile`_ are supported.\n\n.. code-block:: python\n\n    >>> import re  # import required for flags constant\n    >>> Rebulk().regex('L[A-Z]KERS', flags=re.IGNORECASE) \\\n    ...         .matches(\"The LaKeRs are from La\")\n    [<LaKeRs:(4, 10)>]\n\n    >>> Rebulk().regex('L[A-Z]', 'L[A-Z]KERS', flags=re.IGNORECASE) \\\n    ...         .matches(\"The LaKeRs are from La\")\n    [<La:(20, 22)>, <LaKeRs:(4, 10)>]\n\n    >>> Rebulk().regex(('L[A-Z]', re.IGNORECASE), ('L[a-z]KeRs')) \\\n    ...         .matches(\"The LaKeRs are from La\")\n    [<La:(20, 22)>, <LaKeRs:(4, 10)>]\n\nIf `regex module`_ is available, it automatically supports repeated captures.\n\n.. code-block:: python\n\n    >>> # If regex module is available, repeated_captures is True by default.\n    >>> matches = Rebulk().regex(r'(\\d+)(?:-(\\d+))+').matches(\"01-02-03-04\")\n    >>> matches[0].children # doctest:+SKIP\n    [<01:(0, 2)>, <02:(3, 5)>, <03:(6, 8)>, <04:(9, 11)>]\n\n    >>> # If regex module is not available, or if repeated_captures is forced to False.\n    >>> matches = Rebulk().regex(r'(\\d+)(?:-(\\d+))+', repeated_captures=False) \\\n    ...                   .matches(\"01-02-03-04\")\n    >>> matches[0].children\n    [<01:(0, 2)+initiator=01-02-03-04>, <04:(9, 11)+initiator=01-02-03-04>]\n\n- ``abbreviations``\n\n  Defined as a list of 2-tuple, each tuple is an abbreviation. It simply replace ``tuple[0]`` with ``tuple[1]`` in the\n  expression.\n\n  >>> Rebulk().regex(r'Custom-separators', abbreviations=[(\"-\", r\"[\\W_]+\")])\\\n  ...         .matches(\"Custom_separators using-abbreviations\")\n  [<Custom_separators:(0, 17)>]\n\n\nFunctional Patterns\n-------------------\nFunctional Patterns are based on the evaluation of a function.\n\nThe function should have the same parameters as ``Rebulk.matches`` method, that is the input string,\nand must return at least start index and end index of the ``Match`` object.\n\n.. code-block:: python\n\n    >>> def func(string):\n    ...     index = string.find('?')\n    ...     if index > -1:\n    ...         return 0, index - 11\n    >>> Rebulk().functional(func).matches(\"Why do simple ? Forget about it ...\")\n    [<Why:(0, 3)>]\n\nYou can also return a dict of keywords arguments for ``Match`` object.\n\nYou can define several patterns with a single ``functional`` method call, and function used can return multiple\nmatches.\n\nChain Patterns\n--------------\nChain Patterns are ordered composition of string, functional and regex patterns. Repeater can be set to define\nrepetition on chain part.\n\n.. code-block:: python\n\n    >>> r = Rebulk().regex_defaults(flags=re.IGNORECASE)\\\n    ...             .defaults(children=True, formatter={'episode': int, 'version': int})\\\n    ...             .chain()\\\n    ...             .regex(r'e(?P<episode>\\d{1,4})').repeater(1)\\\n    ...             .regex(r'v(?P<version>\\d+)').repeater('?')\\\n    ...             .regex(r'[ex-](?P<episode>\\d{1,4})').repeater('*')\\\n    ...             .close() # .repeater(1) could be omitted as it's the default behavior\n    >>> r.matches(\"This is E14v2-15-16-17\").to_dict()  # converts matches to dict\n    MatchesDict([('episode', [14, 15, 16, 17]), ('version', 2)])\n\nPatterns parameters\n-------------------\n\nAll patterns have options that can be given as keyword arguments.\n\n- ``validator``\n\n  Function to validate ``Match`` value given by the pattern. Can also be a ``dict``, to use ``validator`` with pattern\n  named with key.\n\n  .. code-block:: python\n\n      >>> def check_leap_year(match):\n      ...     return int(match.value) in [1980, 1984, 1988]\n      >>> matches = Rebulk().regex(r'\\d{4}', validator=check_leap_year) \\\n      ...                   .matches(\"In year 1982 ...\")\n      >>> len(matches)\n      0\n      >>> matches = Rebulk().regex(r'\\d{4}', validator=check_leap_year) \\\n      ...                   .matches(\"In year 1984 ...\")\n      >>> len(matches)\n      1\n\nSome base validator functions are available in ``rebulk.validators`` module. Most of those functions have to be\nconfigured using ``functools.partial`` to map them to function accepting a single ``match`` argument.\n\n- ``formatter``\n\n  Function to convert ``Match`` value given by the pattern. Can also be a ``dict``, to use ``formatter`` with matches\n  named with key.\n\n  .. code-block:: python\n\n      >>> def year_formatter(value):\n      ...     return int(value)\n      >>> matches = Rebulk().regex(r'\\d{4}', formatter=year_formatter) \\\n      ...                   .matches(\"In year 1982 ...\")\n      >>> isinstance(matches[0].value, int)\n      True\n\n- ``pre_match_processor`` / ``post_match_processor``\n\n  Function to mutagen or invalidate a match generated by a pattern.\n\n  Function has a single parameter which is the Match object. If function returns False, it will be considered as an\n  invalid match. If function returns a match instance, it will replace the original match with this instance in the\n  process.\n\n- ``post_processor``\n\n  Function to change the default output of the pattern. Function parameters are Matches list and Pattern object.\n\n- ``name``\n\n  The name of the pattern. It is automatically passed to ``Match`` objects generated by this pattern.\n\n- ``tags``\n\n  A list of string that qualifies this pattern.\n\n- ``value``\n\n  Override value property for generated ``Match`` objects. Can also be a ``dict``, to use ``value`` with pattern\n  named with key.\n\n- ``validate_all``\n\n  By default, validator is called for returned ``Match`` objects only. Enable this option to validate them all, parent\n  and children included.\n\n- ``format_all``\n\n  By default, formatter is called for returned ``Match`` values only. Enable this option to format them all, parent and\n  children included.\n\n- ``disabled``\n\n  A ``function(context)`` to disable the pattern if returning ``True``.\n\n- ``children``\n\n  If ``True``, all children ``Match`` objects will be retrieved instead of a single parent ``Match`` object.\n\n- ``private``\n\n  If ``True``, ``Match`` objects generated from this pattern are available internally only. They will be removed at\n  the end of ``Rebulk.matches`` method call.\n\n- ``private_parent``\n\n  Force parent matches to be returned and flag them as private.\n\n- ``private_children``\n\n  Force children matches to be returned and flag them as private.\n\n- ``private_names``\n\n  Matches names that will be declared as private\n\n- ``ignore_names``\n\n  Matches names that will be ignored from the pattern output, after validation.\n\n- ``marker``\n\n  If ``true``, ``Match`` objects generated from this pattern will be markers matches instead of standard matches.\n  They won't be included in ``Matches`` sequence, but will be available in ``Matches.markers`` sequence (see\n  ``Markers`` section).\n\n\nMatch\n-----\n\nA ``Match`` object is the result created by a registered pattern.\n\nIt has a ``value`` property defined, and position indices are available through ``start``, ``end`` and ``span``\nproperties.\n\nIn some case, it contains children ``Match`` objects in ``children`` property, and each child ``Match`` object\nreference its parent in ``parent`` property. Also, a ``name`` property can be defined for the match.\n\nIf groups are defined in a Regular Expression pattern, each group match will be converted to a\nsingle ``Match`` object. If a group has a name defined (``(?P<name>group)``), it is set as ``name`` property in a child\n``Match`` object. The whole regexp match (``re.group(0)``) will be converted to the main ``Match`` object,\nand all subgroups (1, 2, ... n) will be converted to ``children`` matches of the main ``Match`` object.\n\n.. code-block:: python\n\n    >>> matches = Rebulk() \\\n    ...         .regex(r\"One, (?P<one>\\w+), Two, (?P<two>\\w+), Three, (?P<three>\\w+)\") \\\n    ...         .matches(\"Zero, 0, One, 1, Two, 2, Three, 3, Four, 4\")\n    >>> matches\n    [<One, 1, Two, 2, Three, 3:(9, 33)>]\n    >>> for child in matches[0].children:\n    ...     '%s = %s' % (child.name, child.value)\n    'one = 1'\n    'two = 2'\n    'three = 3'\n\nIt's possible to retrieve only children by using ``children`` parameters. You can also customize the way structure\nis generated with ``every``, ``private_parent`` and ``private_children`` parameters.\n\n.. code-block:: python\n\n    >>> matches = Rebulk() \\\n    ...         .regex(r\"One, (?P<one>\\w+), Two, (?P<two>\\w+), Three, (?P<three>\\w+)\", children=True) \\\n    ...         .matches(\"Zero, 0, One, 1, Two, 2, Three, 3, Four, 4\")\n    >>> matches\n    [<1:(14, 15)+name=one+initiator=One, 1, Two, 2, Three, 3>, <2:(22, 23)+name=two+initiator=One, 1, Two, 2, Three, 3>, <3:(32, 33)+name=three+initiator=One, 1, Two, 2, Three, 3>]\n\nMatch object has the following properties that can be given to Pattern objects\n\n- ``formatter``\n\n  Function to convert ``Match`` value given by the pattern. Can also be a ``dict``, to use ``formatter`` with matches\n  named with key.\n\n  .. code-block:: python\n\n      >>> def year_formatter(value):\n      ...     return int(value)\n      >>> matches = Rebulk().regex(r'\\d{4}', formatter=year_formatter) \\\n      ...                   .matches(\"In year 1982 ...\")\n      >>> isinstance(matches[0].value, int)\n      True\n\n- ``format_all``\n\n  By default, formatter is called for returned ``Match`` values only. Enable this option to format them all, parent and\n  children included.\n\n- ``conflict_solver``\n\n  A ``function(match, conflicting_match)`` used to solve conflict. Returned object will be removed from matches by\n  ``ConflictSolver`` default rule. If ``__default__`` string is returned, it will fallback to default behavior\n  keeping longer match.\n\n\nMatches\n-------\n\nA ``Matches`` object holds the result of ``Rebulk.matches`` method call. It's a sequence of ``Match`` objects and\nit behaves like a list.\n\nAll methods accepts a ``predicate`` function to filter ``Match`` objects using a callable, and an ``index`` int to\nretrieve a single element from default returned matches.\n\nIt has the following additional methods and properties on it.\n\n- ``starting(index, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects that starts at given index.\n\n- ``ending(index, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects that ends at given index.\n\n- ``previous(match, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects that are previous and nearest to match.\n\n- ``next(match, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects that are next and nearest to match.\n\n- ``tagged(tag, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects that have the given tag defined.\n\n- ``named(name, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects that have the given name.\n\n- ``range(start=0, end=None, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects for given range, sorted from start to end.\n\n- ``holes(start=0, end=None, formatter=None, ignore=None, predicate=None, index=None)``\n\n  Retrieves a list of *hole* ``Match`` objects for given range. A hole match is created for each range where no match\n  is available.\n\n- ``conflicting(match, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects that conflicts with given match.\n\n- ``chain_before(self, position, seps, start=0, predicate=None, index=None)``:\n\n  Retrieves a list of chained matches, before position, matching predicate and separated by characters from seps only.\n\n- ``chain_after(self, position, seps, end=None, predicate=None, index=None)``:\n\n  Retrieves a list of chained matches, after position, matching predicate and separated by characters from seps only.\n\n- ``at_match(match, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects at the same position as match.\n\n- ``at_span(span, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects from given (start, end) tuple.\n\n- ``at_index(pos, predicate=None, index=None)``\n\n  Retrieves a list of ``Match`` objects from given position.\n\n- ``names``\n\n  Retrieves a sequence of all ``Match.name`` properties.\n\n- ``tags``\n\n  Retrieves a sequence of all ``Match.tags`` properties.\n\n- ``to_dict(details=False, first_value=False, enforce_list=False)``\n\n  Convert to an ordered dict, with ``Match.name`` as key and ``Match.value`` as value.\n\n  It's a subclass of `OrderedDict`_, that contains a ``matches`` property which is a dict with  ``Match.name`` as key\n  and list of ``Match`` objects as value.\n\n  If ``first_value`` is ``True`` and distinct values are found for the same name, value will be wrapped to a list.\n  If ``False``, first value only will be kept and values lists can be retrieved with ``values_list`` which is a dict\n  with ``Match.name`` as key and list of ``Match.value`` as value.\n\n  if ``enforce_list`` is ``True``, all values will be wrapped to a list, even if a single value is found.\n\n  If ``details`` is True, ``Match.value`` objects are replaced with complete ``Match`` object.\n\n- ``markers``\n\n  A custom ``Matches`` sequences specialized for ``markers`` matches (see below)\n\nMarkers\n-------\n\nIf you have defined some patterns with ``markers`` property, then ``Matches.markers`` points to a special ``Matches``\nsequence that contains only ``markers`` matches. This sequence supports all methods from ``Matches``.\n\nMarkers matches are not intended to be used in final result, but can be used to implement a ``Rule``.\n\nRules\n-----\nRules are a convenient and readable way to implement advanced conditional logic involving several ``Match`` objects.\nWhen a rule is triggered, it can perform an action on ``Matches`` object, like filtering out, adding additional tags or\nrenaming.\n\nRules are implemented by extending the abstract ``Rule`` class. They are registered using ``Rebulk.rule`` method by\ngiving either a ``Rule`` instance, a ``Rule`` class or a module containing ``Rule classes`` only.\n\nFor a rule to be triggered, ``Rule.when`` method must return ``True``, or a non empty list of ``Match``\nobjects, or any other truthy object. When triggered, ``Rule.then`` method is called to perform the action with\n``when_response`` parameter defined as the response of ``Rule.when`` call.\n\nInstead of implementing ``Rule.then`` method, you can define ``consequence`` class property with a Consequence classe\nor instance, like ``RemoveMatch``, ``RenameMatch`` or ``AppendMatch``. You can also use a list of consequence when\nrequired : ``when_response`` must then be iterable, and elements of this iterable will be given to each consequence in\nthe same order.\n\nWhen many rules are registered, it can be useful to set ``priority`` class variable to define a priority integer\nbetween all rule executions (higher priorities will be executed first). You can also define ``dependency`` to declare\nanother Rule class as dependency for the current rule, meaning that it will be executed before.\n\nFor all rules with the same ``priority`` value, ``when`` is called before, and ``then`` is called after all.\n\n.. code-block:: python\n\n    >>> from rebulk import Rule, RemoveMatch\n\n    >>> class FirstOnlyRule(Rule):\n    ...     consequence = RemoveMatch\n    ...\n    ...     def when(self, matches, context):\n    ...         grabbed = matches.named(\"grabbed\", 0)\n    ...         if grabbed and matches.previous(grabbed):\n    ...             return grabbed\n\n    >>> rebulk = Rebulk()\n\n    >>> rebulk.regex(\"This match(.*?)grabbed\", name=\"grabbed\")\n    <...Rebulk object ...>\n    >>> rebulk.regex(\"if it's(.*?)first match\", private=True)\n    <...Rebulk object at ...>\n    >>> rebulk.rules(FirstOnlyRule)\n    <...Rebulk object at ...>\n\n    >>> rebulk.matches(\"This match is grabbed only if it's the first match\")\n    [<This match is grabbed:(0, 21)+name=grabbed>]\n    >>> rebulk.matches(\"if it's NOT the first match, This match is NOT grabbed\")\n    []\n\n.. _re module: https://docs.python.org/3/library/re.html\n.. _regex module: https://pypi.python.org/pypi/regex\n.. _String methods: https://docs.python.org/3/library/stdtypes.html#str\n.. _str.find: https://docs.python.org/3/library/stdtypes.html#str.find\n.. _re.finditer: https://docs.python.org/3/library/re.html#re.finditer\n.. _re.compile: https://docs.python.org/3/library/re.html#re.compile\n.. _OrderedDict: https://docs.python.org/2/library/collections.html#collections.OrderedDict", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.python.org/packages/source/r/rebulk/rebulk-2.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Toilal/rebulk/", "keywords": "re regexp regular expression search pattern string match", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rebulk", "package_url": "https://pypi.org/project/rebulk/", "platform": "", "project_url": "https://pypi.org/project/rebulk/", "project_urls": {"Download": "https://pypi.python.org/packages/source/r/rebulk/rebulk-2.0.1.tar.gz", "Homepage": "https://github.com/Toilal/rebulk/"}, "release_url": "https://pypi.org/project/rebulk/2.0.1/", "requires_dist": null, "requires_python": "", "summary": "Rebulk - Define simple search patterns in bulk to perform advanced matching on any string.", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/rebulk\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/00778293be83310e26a59dc0d0cd1ca4f1ce421f/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f726562756c6b2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/rebulk\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e2deb1b1504333134e46414fd2ff19d9adb09f9/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"http://travis-ci.org/Toilal/rebulk?branch=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f9059e75b10a45c9da0d35feb23dc51bfa9f9a6f/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f546f696c616c2f726562756c6b2e737667\"></a>\n<a href=\"https://coveralls.io/r/Toilal/rebulk?branch=master\" rel=\"nofollow\"><img alt=\"Coveralls\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/99b3e4ed29b47953f9020c9bdd8952ec265f2303/687474703a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f546f696c616c2f726562756c6b2e737667\"></a>\n<p>ReBulk is a python library that performs advanced searches in strings that would be hard to implement using\n<a href=\"https://docs.python.org/3/library/re.html\" rel=\"nofollow\">re module</a> or <a href=\"https://docs.python.org/3/library/stdtypes.html#str\" rel=\"nofollow\">String methods</a> only.</p>\n<p>It includes some features like <tt>Patterns</tt>, <tt>Match</tt>, <tt>Rule</tt> that allows developers to build a\ncustom and complex string matcher using a readable and extendable API.</p>\n<p>This project is hosted on GitHub: <a href=\"https://github.com/Toilal/rebulk\" rel=\"nofollow\">https://github.com/Toilal/rebulk</a></p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>$ pip install rebulk\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Regular expression, string and function based patterns are declared in a <tt>Rebulk</tt> object. It use a fluent API to\nchain <tt>string</tt>, <tt>regex</tt>, and <tt>functional</tt> methods to define various patterns types.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rebulk</span> <span class=\"kn\">import</span> <span class=\"n\">Rebulk</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bulk</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s1\">'brown'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'qu\\w+'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">functional</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">))</span>\n</pre>\n<p>When <tt>Rebulk</tt> object is fully configured, you can call <tt>matches</tt> method with an input string to retrieve all\n<tt>Match</tt> objects found by registered pattern.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bulk</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">brown</span><span class=\"p\">:(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">quick</span><span class=\"p\">:(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">jumps</span><span class=\"p\">:(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>If multiple <tt>Match</tt> objects are found at the same position, only the longer one is kept.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bulk</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s1\">'lakers'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s1\">'la'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bulk</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"the lakers are from la\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">lakers</span><span class=\"p\">:(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">la</span><span class=\"p\">:(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"string-patterns\">\n<h2>String Patterns</h2>\n<p>String patterns are based on <a href=\"https://docs.python.org/3/library/stdtypes.html#str.find\" rel=\"nofollow\">str.find</a> method to find matches, but returns all matches in the string. <tt>ignore_case</tt>\ncan be enabled to ignore case.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s1\">'la'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"lalalilala\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">la</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">la</span><span class=\"p\">:(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">la</span><span class=\"p\">:(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">la</span><span class=\"p\">:(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s1\">'la'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"LalAlilAla\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">la</span><span class=\"p\">:(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s1\">'la'</span><span class=\"p\">,</span> <span class=\"n\">ignore_case</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"LalAlilAla\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">La</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">lA</span><span class=\"p\">:(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">lA</span><span class=\"p\">:(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">la</span><span class=\"p\">:(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>You can define several patterns with a single <tt>string</tt> method call.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"s1\">'Winter'</span><span class=\"p\">,</span> <span class=\"s1\">'coming'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"Winter is coming...\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Winter</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">coming</span><span class=\"p\">:(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"regular-expression-patterns\">\n<h2>Regular Expression Patterns</h2>\n<p>Regular Expression patterns are based on a compiled regular expression.\n<a href=\"https://docs.python.org/3/library/re.html#re.finditer\" rel=\"nofollow\">re.finditer</a> method is used to find matches.</p>\n<p>If <a href=\"https://pypi.python.org/pypi/regex\" rel=\"nofollow\">regex module</a> is available, it will be used by rebulk instead of default <a href=\"https://docs.python.org/3/library/re.html\" rel=\"nofollow\">re module</a>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'l\\w'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"lolita\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">lo</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">li</span><span class=\"p\">:(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>You can define several patterns with a single <tt>regex</tt> method call.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'Wint\\wr'</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">'com\\w</span><span class=\"si\">{3}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"Winter is coming...\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Winter</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">coming</span><span class=\"p\">:(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>All keyword arguments from <a href=\"https://docs.python.org/3/library/re.html#re.compile\" rel=\"nofollow\">re.compile</a> are supported.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">re</span>  <span class=\"c1\"># import required for flags constant</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"s1\">'L[A-Z]KERS'</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"The LaKeRs are from La\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">LaKeRs</span><span class=\"p\">:(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"s1\">'L[A-Z]'</span><span class=\"p\">,</span> <span class=\"s1\">'L[A-Z]KERS'</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"The LaKeRs are from La\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">La</span><span class=\"p\">:(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">LaKeRs</span><span class=\"p\">:(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">((</span><span class=\"s1\">'L[A-Z]'</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'L[a-z]KeRs'</span><span class=\"p\">))</span> \\\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"The LaKeRs are from La\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">La</span><span class=\"p\">:(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">LaKeRs</span><span class=\"p\">:(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>If <a href=\"https://pypi.python.org/pypi/regex\" rel=\"nofollow\">regex module</a> is available, it automatically supports repeated captures.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># If regex module is available, repeated_captures is True by default.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'(\\d+)(?:-(\\d+))+'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"01-02-03-04\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">children</span> <span class=\"c1\"># doctest:+SKIP</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"mi\">01</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">02</span><span class=\"p\">:(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">03</span><span class=\"p\">:(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">04</span><span class=\"p\">:(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># If regex module is not available, or if repeated_captures is forced to False.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'(\\d+)(?:-(\\d+))+'</span><span class=\"p\">,</span> <span class=\"n\">repeated_captures</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>                   <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"01-02-03-04\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">children</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"mi\">01</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">initiator</span><span class=\"o\">=</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">04</span><span class=\"p\">:(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">initiator</span><span class=\"o\">=</span><span class=\"mi\">01</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">03</span><span class=\"o\">-</span><span class=\"mi\">04</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li><p><tt>abbreviations</tt></p>\n<p>Defined as a list of 2-tuple, each tuple is an abbreviation. It simply replace <tt>tuple[0]</tt> with <tt>tuple[1]</tt> in the\nexpression.</p>\n<pre>&gt;&gt;&gt; Rebulk().regex(r'Custom-separators', abbreviations=[(\"-\", r\"[\\W_]+\")])\\\n...         .matches(\"Custom_separators using-abbreviations\")\n[&lt;Custom_separators:(0, 17)&gt;]\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"functional-patterns\">\n<h2>Functional Patterns</h2>\n<p>Functional Patterns are based on the evaluation of a function.</p>\n<p>The function should have the same parameters as <tt>Rebulk.matches</tt> method, that is the input string,\nand must return at least start index and end index of the <tt>Match</tt> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s1\">'?'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">&gt;</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">index</span> <span class=\"o\">-</span> <span class=\"mi\">11</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">functional</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"Why do simple ? Forget about it ...\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">Why</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>You can also return a dict of keywords arguments for <tt>Match</tt> object.</p>\n<p>You can define several patterns with a single <tt>functional</tt> method call, and function used can return multiple\nmatches.</p>\n</div>\n<div id=\"chain-patterns\">\n<h2>Chain Patterns</h2>\n<p>Chain Patterns are ordered composition of string, functional and regex patterns. Repeater can be set to define\nrepetition on chain part.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex_defaults</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span>\\\n<span class=\"o\">...</span>             <span class=\"o\">.</span><span class=\"n\">defaults</span><span class=\"p\">(</span><span class=\"n\">children</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">formatter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'episode'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s1\">'version'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">})</span>\\\n<span class=\"o\">...</span>             <span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">()</span>\\\n<span class=\"o\">...</span>             <span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'e(?P&lt;episode&gt;\\d{1,4})'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">repeater</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\\\n<span class=\"o\">...</span>             <span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'v(?P&lt;version&gt;\\d+)'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">repeater</span><span class=\"p\">(</span><span class=\"s1\">'?'</span><span class=\"p\">)</span>\\\n<span class=\"o\">...</span>             <span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'[ex-](?P&lt;episode&gt;\\d{1,4})'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">repeater</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">)</span>\\\n<span class=\"o\">...</span>             <span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span> <span class=\"c1\"># .repeater(1) could be omitted as it's the default behavior</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"This is E14v2-15-16-17\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">()</span>  <span class=\"c1\"># converts matches to dict</span>\n<span class=\"n\">MatchesDict</span><span class=\"p\">([(</span><span class=\"s1\">'episode'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">]),</span> <span class=\"p\">(</span><span class=\"s1\">'version'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)])</span>\n</pre>\n</div>\n<div id=\"patterns-parameters\">\n<h2>Patterns parameters</h2>\n<p>All patterns have options that can be given as keyword arguments.</p>\n<ul>\n<li><p><tt>validator</tt></p>\n<p>Function to validate <tt>Match</tt> value given by the pattern. Can also be a <tt>dict</tt>, to use <tt>validator</tt> with pattern\nnamed with key.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">check_leap_year</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"mi\">1980</span><span class=\"p\">,</span> <span class=\"mi\">1984</span><span class=\"p\">,</span> <span class=\"mi\">1988</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\d</span><span class=\"si\">{4}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">check_leap_year</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>                   <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"In year 1982 ...\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\d</span><span class=\"si\">{4}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">validator</span><span class=\"o\">=</span><span class=\"n\">check_leap_year</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>                   <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"In year 1984 ...\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n</pre>\n</li>\n</ul>\n<p>Some base validator functions are available in <tt>rebulk.validators</tt> module. Most of those functions have to be\nconfigured using <tt>functools.partial</tt> to map them to function accepting a single <tt>match</tt> argument.</p>\n<ul>\n<li><p><tt>formatter</tt></p>\n<p>Function to convert <tt>Match</tt> value given by the pattern. Can also be a <tt>dict</tt>, to use <tt>formatter</tt> with matches\nnamed with key.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">year_formatter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\d</span><span class=\"si\">{4}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">formatter</span><span class=\"o\">=</span><span class=\"n\">year_formatter</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>                   <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"In year 1982 ...\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n</li>\n<li><p><tt>pre_match_processor</tt> / <tt>post_match_processor</tt></p>\n<p>Function to mutagen or invalidate a match generated by a pattern.</p>\n<p>Function has a single parameter which is the Match object. If function returns False, it will be considered as an\ninvalid match. If function returns a match instance, it will replace the original match with this instance in the\nprocess.</p>\n</li>\n<li><p><tt>post_processor</tt></p>\n<p>Function to change the default output of the pattern. Function parameters are Matches list and Pattern object.</p>\n</li>\n<li><p><tt>name</tt></p>\n<p>The name of the pattern. It is automatically passed to <tt>Match</tt> objects generated by this pattern.</p>\n</li>\n<li><p><tt>tags</tt></p>\n<p>A list of string that qualifies this pattern.</p>\n</li>\n<li><p><tt>value</tt></p>\n<p>Override value property for generated <tt>Match</tt> objects. Can also be a <tt>dict</tt>, to use <tt>value</tt> with pattern\nnamed with key.</p>\n</li>\n<li><p><tt>validate_all</tt></p>\n<p>By default, validator is called for returned <tt>Match</tt> objects only. Enable this option to validate them all, parent\nand children included.</p>\n</li>\n<li><p><tt>format_all</tt></p>\n<p>By default, formatter is called for returned <tt>Match</tt> values only. Enable this option to format them all, parent and\nchildren included.</p>\n</li>\n<li><p><tt>disabled</tt></p>\n<p>A <tt>function(context)</tt> to disable the pattern if returning <tt>True</tt>.</p>\n</li>\n<li><p><tt>children</tt></p>\n<p>If <tt>True</tt>, all children <tt>Match</tt> objects will be retrieved instead of a single parent <tt>Match</tt> object.</p>\n</li>\n<li><p><tt>private</tt></p>\n<p>If <tt>True</tt>, <tt>Match</tt> objects generated from this pattern are available internally only. They will be removed at\nthe end of <tt>Rebulk.matches</tt> method call.</p>\n</li>\n<li><p><tt>private_parent</tt></p>\n<p>Force parent matches to be returned and flag them as private.</p>\n</li>\n<li><p><tt>private_children</tt></p>\n<p>Force children matches to be returned and flag them as private.</p>\n</li>\n<li><p><tt>private_names</tt></p>\n<p>Matches names that will be declared as private</p>\n</li>\n<li><p><tt>ignore_names</tt></p>\n<p>Matches names that will be ignored from the pattern output, after validation.</p>\n</li>\n<li><p><tt>marker</tt></p>\n<p>If <tt>true</tt>, <tt>Match</tt> objects generated from this pattern will be markers matches instead of standard matches.\nThey won\u2019t be included in <tt>Matches</tt> sequence, but will be available in <tt>Matches.markers</tt> sequence (see\n<tt>Markers</tt> section).</p>\n</li>\n</ul>\n</div>\n<div id=\"match\">\n<h2>Match</h2>\n<p>A <tt>Match</tt> object is the result created by a registered pattern.</p>\n<p>It has a <tt>value</tt> property defined, and position indices are available through <tt>start</tt>, <tt>end</tt> and <tt>span</tt>\nproperties.</p>\n<p>In some case, it contains children <tt>Match</tt> objects in <tt>children</tt> property, and each child <tt>Match</tt> object\nreference its parent in <tt>parent</tt> property. Also, a <tt>name</tt> property can be defined for the match.</p>\n<p>If groups are defined in a Regular Expression pattern, each group match will be converted to a\nsingle <tt>Match</tt> object. If a group has a name defined (<tt><span class=\"pre\">(?P&lt;name&gt;group)</span></tt>), it is set as <tt>name</tt> property in a child\n<tt>Match</tt> object. The whole regexp match (<tt>re.group(0)</tt>) will be converted to the main <tt>Match</tt> object,\nand all subgroups (1, 2, \u2026 n) will be converted to <tt>children</tt> matches of the main <tt>Match</tt> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span> \\\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"One, (?P&lt;one&gt;\\w+), Two, (?P&lt;two&gt;\\w+), Three, (?P&lt;three&gt;\\w+)\"</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"Zero, 0, One, 1, Two, 2, Three, 3, Four, 4\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">One</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Two</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Three</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\"> = </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"s1\">'one = 1'</span>\n<span class=\"s1\">'two = 2'</span>\n<span class=\"s1\">'three = 3'</span>\n</pre>\n<p>It\u2019s possible to retrieve only children by using <tt>children</tt> parameters. You can also customize the way structure\nis generated with <tt>every</tt>, <tt>private_parent</tt> and <tt>private_children</tt> parameters.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span> \\\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">\"One, (?P&lt;one&gt;\\w+), Two, (?P&lt;two&gt;\\w+), Three, (?P&lt;three&gt;\\w+)\"</span><span class=\"p\">,</span> <span class=\"n\">children</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>         <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"Zero, 0, One, 1, Two, 2, Three, 3, Four, 4\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"p\">:(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">one</span><span class=\"o\">+</span><span class=\"n\">initiator</span><span class=\"o\">=</span><span class=\"n\">One</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Two</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Three</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"p\">:(</span><span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">two</span><span class=\"o\">+</span><span class=\"n\">initiator</span><span class=\"o\">=</span><span class=\"n\">One</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Two</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Three</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"p\">:(</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">three</span><span class=\"o\">+</span><span class=\"n\">initiator</span><span class=\"o\">=</span><span class=\"n\">One</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Two</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Three</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n</pre>\n<p>Match object has the following properties that can be given to Pattern objects</p>\n<ul>\n<li><p><tt>formatter</tt></p>\n<p>Function to convert <tt>Match</tt> value given by the pattern. Can also be a <tt>dict</tt>, to use <tt>formatter</tt> with matches\nnamed with key.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">year_formatter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'\\d</span><span class=\"si\">{4}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">formatter</span><span class=\"o\">=</span><span class=\"n\">year_formatter</span><span class=\"p\">)</span> \\\n<span class=\"o\">...</span>                   <span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"In year 1982 ...\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n</li>\n<li><p><tt>format_all</tt></p>\n<p>By default, formatter is called for returned <tt>Match</tt> values only. Enable this option to format them all, parent and\nchildren included.</p>\n</li>\n<li><p><tt>conflict_solver</tt></p>\n<p>A <tt>function(match, conflicting_match)</tt> used to solve conflict. Returned object will be removed from matches by\n<tt>ConflictSolver</tt> default rule. If <tt>__default__</tt> string is returned, it will fallback to default behavior\nkeeping longer match.</p>\n</li>\n</ul>\n</div>\n<div id=\"matches\">\n<h2>Matches</h2>\n<p>A <tt>Matches</tt> object holds the result of <tt>Rebulk.matches</tt> method call. It\u2019s a sequence of <tt>Match</tt> objects and\nit behaves like a list.</p>\n<p>All methods accepts a <tt>predicate</tt> function to filter <tt>Match</tt> objects using a callable, and an <tt>index</tt> int to\nretrieve a single element from default returned matches.</p>\n<p>It has the following additional methods and properties on it.</p>\n<ul>\n<li><p><tt>starting(index, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects that starts at given index.</p>\n</li>\n<li><p><tt>ending(index, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects that ends at given index.</p>\n</li>\n<li><p><tt>previous(match, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects that are previous and nearest to match.</p>\n</li>\n<li><p><tt>next(match, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects that are next and nearest to match.</p>\n</li>\n<li><p><tt>tagged(tag, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects that have the given tag defined.</p>\n</li>\n<li><p><tt>named(name, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects that have the given name.</p>\n</li>\n<li><p><tt>range(start=0, end=None, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects for given range, sorted from start to end.</p>\n</li>\n<li><p><tt>holes(start=0, end=None, formatter=None, ignore=None, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <em>hole</em> <tt>Match</tt> objects for given range. A hole match is created for each range where no match\nis available.</p>\n</li>\n<li><p><tt>conflicting(match, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects that conflicts with given match.</p>\n</li>\n<li><p><tt>chain_before(self, position, seps, start=0, predicate=None, index=None)</tt>:</p>\n<p>Retrieves a list of chained matches, before position, matching predicate and separated by characters from seps only.</p>\n</li>\n<li><p><tt>chain_after(self, position, seps, end=None, predicate=None, index=None)</tt>:</p>\n<p>Retrieves a list of chained matches, after position, matching predicate and separated by characters from seps only.</p>\n</li>\n<li><p><tt>at_match(match, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects at the same position as match.</p>\n</li>\n<li><p><tt>at_span(span, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects from given (start, end) tuple.</p>\n</li>\n<li><p><tt>at_index(pos, predicate=None, index=None)</tt></p>\n<p>Retrieves a list of <tt>Match</tt> objects from given position.</p>\n</li>\n<li><p><tt>names</tt></p>\n<p>Retrieves a sequence of all <tt>Match.name</tt> properties.</p>\n</li>\n<li><p><tt>tags</tt></p>\n<p>Retrieves a sequence of all <tt>Match.tags</tt> properties.</p>\n</li>\n<li><p><tt>to_dict(details=False, first_value=False, enforce_list=False)</tt></p>\n<p>Convert to an ordered dict, with <tt>Match.name</tt> as key and <tt>Match.value</tt> as value.</p>\n<p>It\u2019s a subclass of <a href=\"https://docs.python.org/2/library/collections.html#collections.OrderedDict\" rel=\"nofollow\">OrderedDict</a>, that contains a <tt>matches</tt> property which is a dict with  <tt>Match.name</tt> as key\nand list of <tt>Match</tt> objects as value.</p>\n<p>If <tt>first_value</tt> is <tt>True</tt> and distinct values are found for the same name, value will be wrapped to a list.\nIf <tt>False</tt>, first value only will be kept and values lists can be retrieved with <tt>values_list</tt> which is a dict\nwith <tt>Match.name</tt> as key and list of <tt>Match.value</tt> as value.</p>\n<p>if <tt>enforce_list</tt> is <tt>True</tt>, all values will be wrapped to a list, even if a single value is found.</p>\n<p>If <tt>details</tt> is True, <tt>Match.value</tt> objects are replaced with complete <tt>Match</tt> object.</p>\n</li>\n<li><p><tt>markers</tt></p>\n<p>A custom <tt>Matches</tt> sequences specialized for <tt>markers</tt> matches (see below)</p>\n</li>\n</ul>\n</div>\n<div id=\"markers\">\n<h2>Markers</h2>\n<p>If you have defined some patterns with <tt>markers</tt> property, then <tt>Matches.markers</tt> points to a special <tt>Matches</tt>\nsequence that contains only <tt>markers</tt> matches. This sequence supports all methods from <tt>Matches</tt>.</p>\n<p>Markers matches are not intended to be used in final result, but can be used to implement a <tt>Rule</tt>.</p>\n</div>\n<div id=\"rules\">\n<h2>Rules</h2>\n<p>Rules are a convenient and readable way to implement advanced conditional logic involving several <tt>Match</tt> objects.\nWhen a rule is triggered, it can perform an action on <tt>Matches</tt> object, like filtering out, adding additional tags or\nrenaming.</p>\n<p>Rules are implemented by extending the abstract <tt>Rule</tt> class. They are registered using <tt>Rebulk.rule</tt> method by\ngiving either a <tt>Rule</tt> instance, a <tt>Rule</tt> class or a module containing <tt>Rule classes</tt> only.</p>\n<p>For a rule to be triggered, <tt>Rule.when</tt> method must return <tt>True</tt>, or a non empty list of <tt>Match</tt>\nobjects, or any other truthy object. When triggered, <tt>Rule.then</tt> method is called to perform the action with\n<tt>when_response</tt> parameter defined as the response of <tt>Rule.when</tt> call.</p>\n<p>Instead of implementing <tt>Rule.then</tt> method, you can define <tt>consequence</tt> class property with a Consequence classe\nor instance, like <tt>RemoveMatch</tt>, <tt>RenameMatch</tt> or <tt>AppendMatch</tt>. You can also use a list of consequence when\nrequired : <tt>when_response</tt> must then be iterable, and elements of this iterable will be given to each consequence in\nthe same order.</p>\n<p>When many rules are registered, it can be useful to set <tt>priority</tt> class variable to define a priority integer\nbetween all rule executions (higher priorities will be executed first). You can also define <tt>dependency</tt> to declare\nanother Rule class as dependency for the current rule, meaning that it will be executed before.</p>\n<p>For all rules with the same <tt>priority</tt> value, <tt>when</tt> is called before, and <tt>then</tt> is called after all.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">rebulk</span> <span class=\"kn\">import</span> <span class=\"n\">Rule</span><span class=\"p\">,</span> <span class=\"n\">RemoveMatch</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">FirstOnlyRule</span><span class=\"p\">(</span><span class=\"n\">Rule</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">consequence</span> <span class=\"o\">=</span> <span class=\"n\">RemoveMatch</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">when</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"n\">grabbed</span> <span class=\"o\">=</span> <span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"n\">named</span><span class=\"p\">(</span><span class=\"s2\">\"grabbed\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">grabbed</span> <span class=\"ow\">and</span> <span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"n\">previous</span><span class=\"p\">(</span><span class=\"n\">grabbed</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>             <span class=\"k\">return</span> <span class=\"n\">grabbed</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rebulk</span> <span class=\"o\">=</span> <span class=\"n\">Rebulk</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rebulk</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"s2\">\"This match(.*?)grabbed\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"grabbed\"</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;...</span><span class=\"n\">Rebulk</span> <span class=\"nb\">object</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rebulk</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"p\">(</span><span class=\"s2\">\"if it's(.*?)first match\"</span><span class=\"p\">,</span> <span class=\"n\">private</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;...</span><span class=\"n\">Rebulk</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rebulk</span><span class=\"o\">.</span><span class=\"n\">rules</span><span class=\"p\">(</span><span class=\"n\">FirstOnlyRule</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;...</span><span class=\"n\">Rebulk</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"o\">...&gt;</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rebulk</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"This match is grabbed only if it's the first match\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">This</span> <span class=\"n\">match</span> <span class=\"ow\">is</span> <span class=\"n\">grabbed</span><span class=\"p\">:(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">grabbed</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">rebulk</span><span class=\"o\">.</span><span class=\"n\">matches</span><span class=\"p\">(</span><span class=\"s2\">\"if it's NOT the first match, This match is NOT grabbed\"</span><span class=\"p\">)</span>\n<span class=\"p\">[]</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 7148380, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2583c5f716434d0cdbb3be5a0ebb77cf", "sha256": "11f03b6b0fabd2d7fafee49c3d151495ef8068291972f55610cbf0d028f45f86"}, "downloads": -1, "filename": "rebulk-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2583c5f716434d0cdbb3be5a0ebb77cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10236, "upload_time": "2015-09-18T20:27:18", "upload_time_iso_8601": "2015-09-18T20:27:18.060521Z", "url": "https://files.pythonhosted.org/packages/a8/8a/88dd8ad76ebf95c2346a97444ebe885554236feb6b718ca4caa2d929981b/rebulk-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "737b5dfc6b74970da6a839d77f4605f2", "sha256": "787ba5a0deda86aa7ff337d6211ded13048945af1efb76a38eda4b7b037a417a"}, "downloads": -1, "filename": "rebulk-0.1.0.tar.gz", "has_sig": false, "md5_digest": "737b5dfc6b74970da6a839d77f4605f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14505, "upload_time": "2015-09-23T20:09:13", "upload_time_iso_8601": "2015-09-23T20:09:13.701746Z", "url": "https://files.pythonhosted.org/packages/a5/df/0ac438b36ba346924955950dedceba7efb87d147a8a8df3b8174f1a5f906/rebulk-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0c1885e99da7c44cbbaafa3152220d22", "sha256": "51fee81543e7350ea7b97d5545a6afb1d0f77a7a955003234c6fc9f49b920d15"}, "downloads": -1, "filename": "rebulk-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0c1885e99da7c44cbbaafa3152220d22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21811, "upload_time": "2015-10-01T14:42:42", "upload_time_iso_8601": "2015-10-01T14:42:42.031733Z", "url": "https://files.pythonhosted.org/packages/73/34/8d4c740a308e13c8aa873a99c707df20debc04e89a11e711168a4f0dd956/rebulk-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d1ea8bf3f676042857fb08d33f5a208f", "sha256": "1add41679b8828ea3fa7a742ce69abd3f8115683f5a4a2366a4937087a1b9f6e"}, "downloads": -1, "filename": "rebulk-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d1ea8bf3f676042857fb08d33f5a208f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19707, "upload_time": "2015-10-01T18:46:52", "upload_time_iso_8601": "2015-10-01T18:46:52.700495Z", "url": "https://files.pythonhosted.org/packages/16/c8/498995c94f6daefdbec8d5c0d5cb0b065b80a804635d6304a9df6a0dbf49/rebulk-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c22a42412834edd443b3e3240041572e", "sha256": "b4c67d635915df5924a11057aa5e0309b21f69012e21ea8777268ed338b1ce89"}, "downloads": -1, "filename": "rebulk-0.3.0.tar.gz", "has_sig": false, "md5_digest": "c22a42412834edd443b3e3240041572e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26221, "upload_time": "2015-10-18T21:38:36", "upload_time_iso_8601": "2015-10-18T21:38:36.275583Z", "url": "https://files.pythonhosted.org/packages/51/31/d8c9ff5800c0903c25550977f0d25eca089c763f705e387ba2708361b8ce/rebulk-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "9eda0f726f9d6007bb503219af4c0d2c", "sha256": "6196ba874a9ec5c11b0fc894f74d258d3bbb88d089687041b2ceab963fdbaea0"}, "downloads": -1, "filename": "rebulk-0.4.0.tar.gz", "has_sig": false, "md5_digest": "9eda0f726f9d6007bb503219af4c0d2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34091, "upload_time": "2015-10-30T22:39:05", "upload_time_iso_8601": "2015-10-30T22:39:05.756062Z", "url": "https://files.pythonhosted.org/packages/93/ce/a27f3ec3371c9b5bc43b29254d9e53a262b0a5b114b818591c6cd6998cfd/rebulk-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "bdd9955d941d5825eac5b48573ede5f1", "sha256": "b763e8c22be3bad3f7a98f26fc789bbfa35719ec4e31a8511d5e4cfb7cf87750"}, "downloads": -1, "filename": "rebulk-0.4.1.tar.gz", "has_sig": false, "md5_digest": "bdd9955d941d5825eac5b48573ede5f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34161, "upload_time": "2015-11-01T21:05:33", "upload_time_iso_8601": "2015-11-01T21:05:33.065761Z", "url": "https://files.pythonhosted.org/packages/2d/5b/84bf4e4381eb911c516fb5b7d30c19eaa62262e60652b867b226879b6cb1/rebulk-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "73933ab16aac908f041706fb16abb6ac", "sha256": "b897c29ac7e5580e50b861983c93bce4d9aa126bbec5a498535fc68919d742ca"}, "downloads": -1, "filename": "rebulk-0.4.2.tar.gz", "has_sig": false, "md5_digest": "73933ab16aac908f041706fb16abb6ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34371, "upload_time": "2015-11-05T19:58:46", "upload_time_iso_8601": "2015-11-05T19:58:46.657616Z", "url": "https://files.pythonhosted.org/packages/2f/87/fec3c906184e3e2b8921799152e4af2674d238f25da4ca4bc81252e27ce2/rebulk-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "bf0362dd7ed8731dc0a704f156d254c8", "sha256": "fca38ded166482c0a7d36d52492b09fa2d2b970104928978752f2659aec67fbc"}, "downloads": -1, "filename": "rebulk-0.5.0.tar.gz", "has_sig": false, "md5_digest": "bf0362dd7ed8731dc0a704f156d254c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 248092, "upload_time": "2015-11-07T22:59:49", "upload_time_iso_8601": "2015-11-07T22:59:49.615529Z", "url": "https://files.pythonhosted.org/packages/3c/7d/b7fe31c3ed547061ede9bf0fa89e7e0b56fb33cd3087e79b5f424a40242b/rebulk-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "ad06e0317a04e2c2cd9f02bd42467d07", "sha256": "bd4fcc5b9790677f77e7936253defd7a185e59f1e0beeb882f047cbf5393e01e"}, "downloads": -1, "filename": "rebulk-0.6.0.tar.gz", "has_sig": false, "md5_digest": "ad06e0317a04e2c2cd9f02bd42467d07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 248790, "upload_time": "2015-11-09T21:37:28", "upload_time_iso_8601": "2015-11-09T21:37:28.630080Z", "url": "https://files.pythonhosted.org/packages/0c/95/c0627bba76e63936a1cf77da948fb22623aa2266912935aa6462b3c28566/rebulk-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "6f4012b11adeb6656634ad91c2c3ac49", "sha256": "70ec42bdd9b9b893a1242f1afbe1dd3bab362abf2c333d9222159234fc80d83f"}, "downloads": -1, "filename": "rebulk-0.6.1.tar.gz", "has_sig": false, "md5_digest": "6f4012b11adeb6656634ad91c2c3ac49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 249533, "upload_time": "2015-11-11T21:16:50", "upload_time_iso_8601": "2015-11-11T21:16:50.537634Z", "url": "https://files.pythonhosted.org/packages/d4/c6/c37a6551e557816500f0d72dfa7ef62d2f623830a54c9f6c88f7b8882f72/rebulk-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "e36e01aed725e8fb2fe318c3ea70b600", "sha256": "8e960dfe0a8a08f0d6e431bb1bbc7bfa802a04e2bff7b48ab7b12918aa507dd6"}, "downloads": -1, "filename": "rebulk-0.6.2.tar.gz", "has_sig": false, "md5_digest": "e36e01aed725e8fb2fe318c3ea70b600", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 249639, "upload_time": "2015-11-14T08:02:32", "upload_time_iso_8601": "2015-11-14T08:02:32.176349Z", "url": "https://files.pythonhosted.org/packages/a5/50/447c0909b99627206090ab5a5005b689a7cd8b9bef67b2eaa6b3ee87eebf/rebulk-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "d50dc8edc0f69e9aaceda1a4ab18f0f4", "sha256": "13aa8a4f1ec3931ef1aac706db75e53dcd07bab38f12dad2e560d9c6af575458"}, "downloads": -1, "filename": "rebulk-0.6.3.tar.gz", "has_sig": false, "md5_digest": "d50dc8edc0f69e9aaceda1a4ab18f0f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 250045, "upload_time": "2015-11-15T09:55:14", "upload_time_iso_8601": "2015-11-15T09:55:14.662751Z", "url": "https://files.pythonhosted.org/packages/09/6c/7283d0b895bfb0bdf05e487827d3eff7f096e622838c0bfc439654a388a5/rebulk-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "5155ac8dee7108a93d9c44651595ea85", "sha256": "16094db62bd693af8811110ee10fdf4239720eae9bd74535123f387534118fbc"}, "downloads": -1, "filename": "rebulk-0.6.4.tar.gz", "has_sig": false, "md5_digest": "5155ac8dee7108a93d9c44651595ea85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 250078, "upload_time": "2015-11-21T14:28:50", "upload_time_iso_8601": "2015-11-21T14:28:50.855217Z", "url": "https://files.pythonhosted.org/packages/63/e3/3762f9b4e92cd6be2496fdf2ffb33c96f8be8b33f6f03a59762c9c4d7197/rebulk-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "ea141621d5af239a4e85e03294301135", "sha256": "b14e2a4a44faa7a5684003be2240cce03da742e5973924976437dad4862e429d"}, "downloads": -1, "filename": "rebulk-0.6.5.tar.gz", "has_sig": false, "md5_digest": "ea141621d5af239a4e85e03294301135", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 250351, "upload_time": "2016-01-22T05:59:57", "upload_time_iso_8601": "2016-01-22T05:59:57.719033Z", "url": "https://files.pythonhosted.org/packages/a8/f6/13dc8a64f387d5a0a5fe0005cb84b9b32dd6fe19df09d9f146da59b8574c/rebulk-0.6.5.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "1afafd3ea7bf216e07f8a877463cdb6b", "sha256": "848b845a656b6990e3796a104dcdaba9f265efbd63109ba882849accb548aa5d"}, "downloads": -1, "filename": "rebulk-0.7.0.tar.gz", "has_sig": false, "md5_digest": "1afafd3ea7bf216e07f8a877463cdb6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254319, "upload_time": "2016-01-25T23:33:37", "upload_time_iso_8601": "2016-01-25T23:33:37.167545Z", "url": "https://files.pythonhosted.org/packages/b1/f2/78a39980079f9de5ea4b99a20fe34ceab8e62bd467281cf654b5b289ea83/rebulk-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "98f677cf8f05acc42f49b02145071497", "sha256": "c472793cecbe2d75c8850a8e50e9b00dadec0a906c70644121bae7389a530401"}, "downloads": -1, "filename": "rebulk-0.7.1.tar.gz", "has_sig": false, "md5_digest": "98f677cf8f05acc42f49b02145071497", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254375, "upload_time": "2016-02-03T18:20:49", "upload_time_iso_8601": "2016-02-03T18:20:49.782843Z", "url": "https://files.pythonhosted.org/packages/80/3d/1f49630aa020791d1358ab19d879c52f7ea8f056a2360d64cb37a1a2bcc1/rebulk-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "7501125afdaac727a54266fe5a5de018", "sha256": "ee4c75819c6d0eeedb531fb22c214e50f303ccc4703f27db1f993cd082ed5a20"}, "downloads": -1, "filename": "rebulk-0.7.2.tar.gz", "has_sig": false, "md5_digest": "7501125afdaac727a54266fe5a5de018", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254345, "upload_time": "2016-04-27T21:48:36", "upload_time_iso_8601": "2016-04-27T21:48:36.930517Z", "url": "https://files.pythonhosted.org/packages/77/df/06b4d2ddc94d8618cd6da533e42c090cbf4aa90bd046a5b0224a53282e9d/rebulk-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "bba47602412c1a974873d3e249148e48", "sha256": "1ee0f672be5cfeed793d294c1cfc078c254fb0966af59191e4f6a0785b3b1697"}, "downloads": -1, "filename": "rebulk-0.7.3.tar.gz", "has_sig": false, "md5_digest": "bba47602412c1a974873d3e249148e48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254565, "upload_time": "2016-07-25T21:39:57", "upload_time_iso_8601": "2016-07-25T21:39:57.523454Z", "url": "https://files.pythonhosted.org/packages/4d/71/44e0ca08d29265185963bf39a5566746ef1a7e663b5e155bd67a9e4fbd5c/rebulk-0.7.3.tar.gz", "yanked": false}], "0.7.3.dev0": [{"comment_text": "", "digests": {"md5": "f9630a20937cee22a944bb1e77db58d9", "sha256": "47102ebf9ae03adc0c5f8e24393586716c5ee2a0da7bd7c579eef9cbdcf46b9f"}, "downloads": -1, "filename": "rebulk-0.7.3.dev0.tar.gz", "has_sig": false, "md5_digest": "f9630a20937cee22a944bb1e77db58d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254596, "upload_time": "2016-07-25T21:39:02", "upload_time_iso_8601": "2016-07-25T21:39:02.355102Z", "url": "https://files.pythonhosted.org/packages/71/91/e6eb16cd067c02a3f0885539d062c583650a6ceddc3478bce8b03e5aa9f3/rebulk-0.7.3.dev0.tar.gz", "yanked": false}], "0.7.4": [{"comment_text": "", "digests": {"md5": "716c1d76bce9a94389af141e0893a3d2", "sha256": "1bbea5ebcc18b70c5deb19ba6924fb76392d5130b0fe712e3af7a4e4bee18e21"}, "downloads": -1, "filename": "rebulk-0.7.4.tar.gz", "has_sig": false, "md5_digest": "716c1d76bce9a94389af141e0893a3d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255137, "upload_time": "2016-09-11T10:01:56", "upload_time_iso_8601": "2016-09-11T10:01:56.221156Z", "url": "https://files.pythonhosted.org/packages/e7/57/50fd1a365093b8edc71a8cae3d070d50c133eaa229272a53bb2f1ee34195/rebulk-0.7.4.tar.gz", "yanked": false}], "0.7.5": [{"comment_text": "", "digests": {"md5": "aa74b34086977e4ca86c1f3ddca149ab", "sha256": "050102f497a32e2b9eb32e0e914e809f2343b46efb82eaf0d5d09f76cd218458"}, "downloads": -1, "filename": "rebulk-0.7.5.tar.gz", "has_sig": false, "md5_digest": "aa74b34086977e4ca86c1f3ddca149ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255757, "upload_time": "2016-09-18T09:44:51", "upload_time_iso_8601": "2016-09-18T09:44:51.253117Z", "url": "https://files.pythonhosted.org/packages/7d/8b/4c0993f9af94a730db5e006379ea1707afd8d6387db6f95ae45e4c1ba8bb/rebulk-0.7.5.tar.gz", "yanked": false}], "0.7.6": [{"comment_text": "", "digests": {"md5": "aa823265a156b8a0c7f448b5be32db1d", "sha256": "1357820b13460fc30ecdf58b7743b34da79f76bec954c21051da9eefab0e82cd"}, "downloads": -1, "filename": "rebulk-0.7.6.tar.gz", "has_sig": false, "md5_digest": "aa823265a156b8a0c7f448b5be32db1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 256070, "upload_time": "2016-09-18T20:36:46", "upload_time_iso_8601": "2016-09-18T20:36:46.177742Z", "url": "https://files.pythonhosted.org/packages/1b/e6/ff6bab7e66679a01ea52b0269a354df3a8047572eac107fff70110f5d943/rebulk-0.7.6.tar.gz", "yanked": false}], "0.7.7": [{"comment_text": "", "digests": {"md5": "c602fac777b269f9e48ec94124b40926", "sha256": "1b17f6153b26e88d247fac7a3a0735ba03d8ffad7a73d4c95516bf6db1d430ed"}, "downloads": -1, "filename": "rebulk-0.7.7.tar.gz", "has_sig": false, "md5_digest": "c602fac777b269f9e48ec94124b40926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 256170, "upload_time": "2016-11-26T13:58:27", "upload_time_iso_8601": "2016-11-26T13:58:27.940153Z", "url": "https://files.pythonhosted.org/packages/6a/d5/57de5c84b15865cb89b477cbf714129a3d7b78f6681a36e9250e059969f2/rebulk-0.7.7.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "91d2848a91796891e75840f5a16143af", "sha256": "b09451c6c7bf38dcc0f089e9580eff9b3b55eb5bb4b9587c0168e351c1b5b225"}, "downloads": -1, "filename": "rebulk-0.8.0.tar.gz", "has_sig": false, "md5_digest": "91d2848a91796891e75840f5a16143af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 256852, "upload_time": "2016-11-26T20:36:10", "upload_time_iso_8601": "2016-11-26T20:36:10.553694Z", "url": "https://files.pythonhosted.org/packages/7e/57/132a5047e7b7389233c235be265640573c1360914b815b09f03dac2d149b/rebulk-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "cb252523d4a2e818d09c4da991a85d22", "sha256": "368116d8c2e1a028d65c57cd34dfa99f47631cf741de174305575fcdc54875fd"}, "downloads": -1, "filename": "rebulk-0.8.1.tar.gz", "has_sig": false, "md5_digest": "cb252523d4a2e818d09c4da991a85d22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 256871, "upload_time": "2016-11-27T08:34:51", "upload_time_iso_8601": "2016-11-27T08:34:51.299228Z", "url": "https://files.pythonhosted.org/packages/a5/b5/e3f8ddb062477bbadcc68fee092316d33f38c93a154fed1da9d33286ab94/rebulk-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "ba9687962e6fcf6c979eb4af5654d47a", "sha256": "8c09901bda7b79a21d46faf489d67d017aa54d38bdabdb53f824068a6640401a"}, "downloads": -1, "filename": "rebulk-0.8.2.tar.gz", "has_sig": false, "md5_digest": "ba9687962e6fcf6c979eb4af5654d47a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 257147, "upload_time": "2016-11-27T14:43:36", "upload_time_iso_8601": "2016-11-27T14:43:36.984360Z", "url": "https://files.pythonhosted.org/packages/58/06/5072bb14eecb98948b57ffa32120da550037fa9b64e1860190755fea97ff/rebulk-0.8.2.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "9f1a6c3c26e5e9b4fb748c1ca27557ab", "sha256": "e0c69bdddccbba3ef881948ea96f1d62eda91201c306ea568a676507a30985eb"}, "downloads": -1, "filename": "rebulk-0.9.0.tar.gz", "has_sig": false, "md5_digest": "9f1a6c3c26e5e9b4fb748c1ca27557ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 257342, "upload_time": "2017-05-31T13:42:09", "upload_time_iso_8601": "2017-05-31T13:42:09.624814Z", "url": "https://files.pythonhosted.org/packages/a6/e1/4d7f428da2a537f6325af46fdfda4c8e425f92a0ce7e4a2c4a30558f7160/rebulk-0.9.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "b65c2f0745aee1828e6fe85ff9434aa6", "sha256": "1d49e4f7ef6fb874e60efccacbbe661092fabdb7770cdf7f7de4516d50535998"}, "downloads": -1, "filename": "rebulk-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b65c2f0745aee1828e6fe85ff9434aa6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255918, "upload_time": "2018-10-12T21:08:41", "upload_time_iso_8601": "2018-10-12T21:08:41.561766Z", "url": "https://files.pythonhosted.org/packages/34/2e/fa453c6d8a895a96d5cd0ddb673e6c45f69d7ca9a2544eb8f36114ed7789/rebulk-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "bf62651ec1d1cafb37a98cf78cf0415d", "sha256": "81142667c5626913392d81c199bfb2ca60a16d85c402c3e371f0f29dbc262684"}, "downloads": -1, "filename": "rebulk-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bf62651ec1d1cafb37a98cf78cf0415d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255891, "upload_time": "2019-08-12T20:32:14", "upload_time_iso_8601": "2019-08-12T20:32:14.412392Z", "url": "https://files.pythonhosted.org/packages/ff/fc/25e350ad71b22dca6d49979d43a523e13e7d5f9b5893ce0e8dfc509e2503/rebulk-1.0.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "1dcfc1d18ae723df096b254291fc6397", "sha256": "1b0d526859ef3e8647f37c606d7ae7c32259e370b3f1519e4219a3ba72740aec"}, "downloads": -1, "filename": "rebulk-2.0.0.tar.gz", "has_sig": false, "md5_digest": "1dcfc1d18ae723df096b254291fc6397", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 257112, "upload_time": "2019-08-29T22:21:31", "upload_time_iso_8601": "2019-08-29T22:21:31.390555Z", "url": "https://files.pythonhosted.org/packages/ad/f6/3b27f7399ac8486d86e239e0a44acacfd0e0a3e5903071420c0b0cf8b465/rebulk-2.0.0.tar.gz", "yanked": false}], "2.0.0b1": [{"comment_text": "", "digests": {"md5": "be934737adeeb8317e5299678c5263cb", "sha256": "6d040bb0db91820441a199de3b1d8f368e2d666f90ca36b6e935062c12bd0b23"}, "downloads": -1, "filename": "rebulk-2.0.0b1.tar.gz", "has_sig": false, "md5_digest": "be934737adeeb8317e5299678c5263cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 256997, "upload_time": "2019-08-27T21:57:07", "upload_time_iso_8601": "2019-08-27T21:57:07.491591Z", "url": "https://files.pythonhosted.org/packages/76/7b/f05b5129485b7059e33e08b8b5218568cea5b8bd069292a03bb076f387f1/rebulk-2.0.0b1.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "4d18db19e72aa643dc90ffd2ca482c75", "sha256": "320ded3cc456347d828f95e9aa5f8bab77ac01943cad024c06012069fe19690a"}, "downloads": -1, "filename": "rebulk-2.0.1.tar.gz", "has_sig": false, "md5_digest": "4d18db19e72aa643dc90ffd2ca482c75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 258115, "upload_time": "2020-05-01T21:33:03", "upload_time_iso_8601": "2020-05-01T21:33:03.009697Z", "url": "https://files.pythonhosted.org/packages/60/5c/e74c216b4e8e30d40226b6a9add2a596abe3af3ce63c4ffcdba6f33497f8/rebulk-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d18db19e72aa643dc90ffd2ca482c75", "sha256": "320ded3cc456347d828f95e9aa5f8bab77ac01943cad024c06012069fe19690a"}, "downloads": -1, "filename": "rebulk-2.0.1.tar.gz", "has_sig": false, "md5_digest": "4d18db19e72aa643dc90ffd2ca482c75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 258115, "upload_time": "2020-05-01T21:33:03", "upload_time_iso_8601": "2020-05-01T21:33:03.009697Z", "url": "https://files.pythonhosted.org/packages/60/5c/e74c216b4e8e30d40226b6a9add2a596abe3af3ce63c4ffcdba6f33497f8/rebulk-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:16 2020"}