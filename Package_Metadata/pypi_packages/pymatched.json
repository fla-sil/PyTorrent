{"info": {"author": "Seonghyeon Kim", "author_email": "k.seonghyeon@mymusictaste.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "*<h1 align=\"center\">py<b>matched\u21d2</b></h1>*\n\n# What is pymatched?\npymatched is a library which provides functional pattern matching.\n\n# Installation\n```bash\npip install pymatched\n```\n\n# Syntax\n```python\nresult = match(<'func'>) >> Mapping[Hashable, Any]\n```\n\n## Match order\n1. exact match\n2. oneof match\n3. placeholder match (if target is immutable iterable)\n4. type match with guard (Contravariant match)\n5. type match (Invariant match)\n6. type match (Contravariant match)\n7. handling default if exists\n\n# Usage\n\n### Note: How to match mutable value?\nas you know, mutable things cannot be key of dict so we can not match easly.\n\nthis is the example of list.\n\n#### Case A: use type guards\n\n```python\nx = match([1, 2, 3]) >> {\n    list                            : \"list\",\n    oneof([1], [1, 2], [1, 2, 3])   : \"[1] | [1, 2] | [1, 2, 3]\",\n    (list, lambda x: x == [1, 2, 3]): \"(list, f(list) -> bool)\",\n    # [1, 2, 3]: \"[1, 2, 3]\",  --> list is unhashable so not working\n}\n```\n\n#### Case B: use nested match\n\n```python\nx = match([1, 2, 3]) >> {\n    list: match(...) >> {\n        (list, lambda v: v == [1, _, 3]): \"pattern is (1, * ,3)\",\n        ...                             : \"default\"\n    } \n}\n```\n\n\n## Value match\n\n```python\nfrom pymatched import match\n\nmatch(1) >> {\n    1: \"It's 1\",\n    5: \"It's 5\",\n}\n```\n\n## Handling default case\nuse elipsis `...` or `typing.Any`\n\nif nothing catched but default handler not defined, RuntimeError will be raised.\n\n```python\nfrom typing import Any\nfrom pymatched import match\n\nmatch(None) >> {\n    ...: \"default\",\n    # Any: \"also default\",\n}\n```\n\n## Type match\n```python\nfrom pymatched import match\n\nmatch(42) >> {\n    int: \"int caught\",\n    ...: lambda v: f\"{type(v)} caught\"\n}\n```\n\n###  Type match with guard\n\nIf tuple's first element is type and second element is lambda, this case will be considered as type match with guard.\n\n```python\nfrom pymatched import match\n\nmatch(42) >> {\n    (int, lambda: v: v == 42): \"42 caught\",\n    int                      : \"int except 42\",\n}\n```\n\ntype match with guard can use `typing.Any`.\n\n```python\nfrom typing import Any\nfrom pymatched import match\n\nmatch(42) >> {\n    (Any, lambda: v: v in (42, \"42\")): \"42 caught\",\n    int                              : \"int except 42\",\n}\n```\n\n### Exception match in type match\n\n`pymatched.do` wraps executing function. when wrapped function raises error, `do` catch it and return it as normal return. \n\n```python\nfrom pymatched import match, do\n\ndef fx(v):\n    raise Exception(\"Ooops!\")\n\nmatch(do(fx, None)) >> {\n    Exception: \"exception caught\",\n    ...      : lambda v: f\"{v} caught\",\n}\n```\n\n## Oneof match\n```python\nfrom pymatched import oneof, match\n\nfx = lambda x: x\n\nmatch(fx(5)) >> {\n    oneof(1, 2, 3): \"one of 1, 2, 3\",\n    oneof(4, 5, 6): \"one of 4, 5, 6\",\n}\n```\n\n# Placeholder match\n\n```python\nfrom pymatched import oneof, match\n\nmatch((1, 2, 3, 4)) >> {  # change (1, 2, 3, 4) into (100, 2, 3, 4) or (1, 9, 3, 9)\n    (1, _, 3, _): \"pattern (1, *, 3, *)\",\n    (_, 2, _, 4): \"pattern (*, 2, *, 4)\",\n}\n```\n\n## Nested match\n\nIf match with `pymatchied._` (PlaceholderTyoe) or `...` (Ellipsis), this match will be considered as nested match.\n\n```python\nfrom pymatched import match, _\n\nmatch(5) >> {\n    int: match(_) >> {\n        5: \"It's 5\",\n        ...: \"default\"\n    },\n}\n```\n\n## Mixed match\n\ncases could be mixed, but resolved by designated match order.\n\n```python\nfrom pymatched import oneof, match\n\nv = (1, 2, 3)\n\nx = match(v) >> {\n    tuple                         : \"Tuple caught\",\n    (tuple, lambda v: v[-1] == 3) : \"last item of tuple is 3\",\n    (1, _, 3)                     : \"pattern is (1, *, 3)\".\n    oneof((1,), (1, 2), (1, 2, 3)): \"one of (1,) | (1, 2) | (1, 2, 3)\",\n    (1, 2, 3)                     : \"(1, 2, 3)\"\n}\n```\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/NovemberOscar/pymatched", "keywords": "functional,functional programming,match,pattern matching", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pymatched", "package_url": "https://pypi.org/project/pymatched/", "platform": "", "project_url": "https://pypi.org/project/pymatched/", "project_urls": {"Homepage": "https://github.com/NovemberOscar/pymatched", "Repository": "https://github.com/NovemberOscar/pymatched"}, "release_url": "https://pypi.org/project/pymatched/0.2.1/", "requires_dist": null, "requires_python": ">=3.6,<4.0", "summary": "A library which provides simple functional pattern matching.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em></em></p><h1><em>py<b>matched\u21d2</b></em></h1><p></p>\n<h1>What is pymatched?</h1>\n<p>pymatched is a library which provides functional pattern matching.</p>\n<h1>Installation</h1>\n<pre>pip install pymatched\n</pre>\n<h1>Syntax</h1>\n<pre><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"s1\">'func'</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">Mapping</span><span class=\"p\">[</span><span class=\"n\">Hashable</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>\n</pre>\n<h2>Match order</h2>\n<ol>\n<li>exact match</li>\n<li>oneof match</li>\n<li>placeholder match (if target is immutable iterable)</li>\n<li>type match with guard (Contravariant match)</li>\n<li>type match (Invariant match)</li>\n<li>type match (Contravariant match)</li>\n<li>handling default if exists</li>\n</ol>\n<h1>Usage</h1>\n<h3>Note: How to match mutable value?</h3>\n<p>as you know, mutable things cannot be key of dict so we can not match easly.</p>\n<p>this is the example of list.</p>\n<h4>Case A: use type guards</h4>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">list</span>                            <span class=\"p\">:</span> <span class=\"s2\">\"list\"</span><span class=\"p\">,</span>\n    <span class=\"n\">oneof</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>   <span class=\"p\">:</span> <span class=\"s2\">\"[1] | [1, 2] | [1, 2, 3]\"</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]):</span> <span class=\"s2\">\"(list, f(list) -&gt; bool)\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># [1, 2, 3]: \"[1, 2, 3]\",  --&gt; list is unhashable so not working</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Case B: use nested match</h4>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">list</span><span class=\"p\">:</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n        <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]):</span> <span class=\"s2\">\"pattern is (1, * ,3)\"</span><span class=\"p\">,</span>\n        <span class=\"o\">...</span>                             <span class=\"p\">:</span> <span class=\"s2\">\"default\"</span>\n    <span class=\"p\">}</span> \n<span class=\"p\">}</span>\n</pre>\n<h2>Value match</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"s2\">\"It's 1\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"s2\">\"It's 5\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Handling default case</h2>\n<p>use elipsis <code>...</code> or <code>typing.Any</code></p>\n<p>if nothing catched but default handler not defined, RuntimeError will be raised.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"s2\">\"default\"</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Any: \"also default\",</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Type match</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"s2\">\"int caught\"</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> caught\"</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Type match with guard</h3>\n<p>If tuple's first element is type and second element is lambda, this case will be considered as type match with guard.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"mi\">42</span><span class=\"p\">):</span> <span class=\"s2\">\"42 caught\"</span><span class=\"p\">,</span>\n    <span class=\"nb\">int</span>                      <span class=\"p\">:</span> <span class=\"s2\">\"int except 42\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<p>type match with guard can use <code>typing.Any</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"s2\">\"42\"</span><span class=\"p\">)):</span> <span class=\"s2\">\"42 caught\"</span><span class=\"p\">,</span>\n    <span class=\"nb\">int</span>                              <span class=\"p\">:</span> <span class=\"s2\">\"int except 42\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Exception match in type match</h3>\n<p><code>pymatched.do</code> wraps executing function. when wrapped function raises error, <code>do</code> catch it and return it as normal return.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">do</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fx</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">\"Ooops!\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">do</span><span class=\"p\">(</span><span class=\"n\">fx</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"ne\">Exception</span><span class=\"p\">:</span> <span class=\"s2\">\"exception caught\"</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>      <span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"n\">v</span><span class=\"si\">}</span><span class=\"s2\"> caught\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Oneof match</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">oneof</span><span class=\"p\">,</span> <span class=\"n\">match</span>\n\n<span class=\"n\">fx</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">fx</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"n\">oneof</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"s2\">\"one of 1, 2, 3\"</span><span class=\"p\">,</span>\n    <span class=\"n\">oneof</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span> <span class=\"s2\">\"one of 4, 5, 6\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h1>Placeholder match</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">oneof</span><span class=\"p\">,</span> <span class=\"n\">match</span>\n\n<span class=\"n\">match</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>  <span class=\"c1\"># change (1, 2, 3, 4) into (100, 2, 3, 4) or (1, 9, 3, 9)</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">):</span> <span class=\"s2\">\"pattern (1, *, 3, *)\"</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"s2\">\"pattern (*, 2, *, 4)\"</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Nested match</h2>\n<p>If match with <code>pymatchied._</code> (PlaceholderTyoe) or <code>...</code> (Ellipsis), this match will be considered as nested match.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">_</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">int</span><span class=\"p\">:</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n        <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"s2\">\"It's 5\"</span><span class=\"p\">,</span>\n        <span class=\"o\">...</span><span class=\"p\">:</span> <span class=\"s2\">\"default\"</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Mixed match</h2>\n<p>cases could be mixed, but resolved by designated match order.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymatched</span> <span class=\"kn\">import</span> <span class=\"n\">oneof</span><span class=\"p\">,</span> <span class=\"n\">match</span>\n\n<span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">tuple</span>                         <span class=\"p\">:</span> <span class=\"s2\">\"Tuple caught\"</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"s2\">\"last item of tuple is 3\"</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>                     <span class=\"p\">:</span> <span class=\"s2\">\"pattern is (1, *, 3)\"</span><span class=\"o\">.</span>\n    <span class=\"n\">oneof</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)):</span> <span class=\"s2\">\"one of (1,) | (1, 2) | (1, 2, 3)\"</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>                     <span class=\"p\">:</span> <span class=\"s2\">\"(1, 2, 3)\"</span>\n<span class=\"p\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6658355, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9b55fd0b88509541f86ab7b029e712ca", "sha256": "a2bebdfbc792eddf9fa00aeca974f9f38c8c89a1ae0e10da5600a33d7c8c0e1d"}, "downloads": -1, "filename": "pymatched-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9b55fd0b88509541f86ab7b029e712ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 1553, "upload_time": "2020-02-12T09:26:14", "upload_time_iso_8601": "2020-02-12T09:26:14.553734Z", "url": "https://files.pythonhosted.org/packages/4d/01/c315e463dece986f16fb0b85dbb59235a44ac48c3788036dfeea7056c1c2/pymatched-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ba25a6c25f5d58c680a2118716dfa4f", "sha256": "ab18fe4c87158593c53e1837c9535c1b8d8d62720e7ecbcd5d6062ef4aa675b9"}, "downloads": -1, "filename": "pymatched-0.1.0.tar.gz", "has_sig": false, "md5_digest": "0ba25a6c25f5d58c680a2118716dfa4f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 1379, "upload_time": "2020-02-12T09:26:16", "upload_time_iso_8601": "2020-02-12T09:26:16.716685Z", "url": "https://files.pythonhosted.org/packages/01/d1/8e2f5a2e14564ba8b3aa0421cafb375cfae786f8577ed4eb95c9c0d3ad29/pymatched-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "def333d97e771c72324a41dada085139", "sha256": "c7760a2de4cf04251bfe93f8c73f557f2f583fde02978a06cfcad1d4ae71266e"}, "downloads": -1, "filename": "pymatched-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "def333d97e771c72324a41dada085139", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 3419, "upload_time": "2020-02-19T04:38:07", "upload_time_iso_8601": "2020-02-19T04:38:07.649903Z", "url": "https://files.pythonhosted.org/packages/39/25/18e447c652d6871a707944dc3a0a33121e18fdb8402c9681e7e8a34cdc40/pymatched-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e92c46b9d9167c4599244f4b79d8c8fa", "sha256": "6e3b3e88bbecdf5a08dc43cf006f2a76e9ce56c3d94136af89eb29ba10d9606d"}, "downloads": -1, "filename": "pymatched-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e92c46b9d9167c4599244f4b79d8c8fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 3150, "upload_time": "2020-02-19T04:38:08", "upload_time_iso_8601": "2020-02-19T04:38:08.707604Z", "url": "https://files.pythonhosted.org/packages/c6/03/6b7fee96127bbf9be0b819a942cca1d331abb8e7b5e4e5973a6340f89ac6/pymatched-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1cf6786c510d0bb2042432c4fe2d9cf2", "sha256": "4793328686476c3aa014eafb160ab1eef9f4a22385a859ab452db67b23c5a6c0"}, "downloads": -1, "filename": "pymatched-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1cf6786c510d0bb2042432c4fe2d9cf2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4844, "upload_time": "2020-02-19T05:15:30", "upload_time_iso_8601": "2020-02-19T05:15:30.976499Z", "url": "https://files.pythonhosted.org/packages/51/d8/9f0dec6e2563534c8cd571122818d6c4859fd31e023586bdbe0492e8814b/pymatched-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "467b6ee5df0cd846bdb9156c04a66292", "sha256": "3e09270245d7f93f953254420752bf7f08e77d327085f8328ffe0f2a0821df4c"}, "downloads": -1, "filename": "pymatched-0.2.1.tar.gz", "has_sig": false, "md5_digest": "467b6ee5df0cd846bdb9156c04a66292", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5098, "upload_time": "2020-02-19T05:15:33", "upload_time_iso_8601": "2020-02-19T05:15:33.027783Z", "url": "https://files.pythonhosted.org/packages/1d/bb/d2412fe236c7fc54c3181aae5141f59f35692597c03b37f64eff6578960c/pymatched-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1cf6786c510d0bb2042432c4fe2d9cf2", "sha256": "4793328686476c3aa014eafb160ab1eef9f4a22385a859ab452db67b23c5a6c0"}, "downloads": -1, "filename": "pymatched-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1cf6786c510d0bb2042432c4fe2d9cf2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 4844, "upload_time": "2020-02-19T05:15:30", "upload_time_iso_8601": "2020-02-19T05:15:30.976499Z", "url": "https://files.pythonhosted.org/packages/51/d8/9f0dec6e2563534c8cd571122818d6c4859fd31e023586bdbe0492e8814b/pymatched-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "467b6ee5df0cd846bdb9156c04a66292", "sha256": "3e09270245d7f93f953254420752bf7f08e77d327085f8328ffe0f2a0821df4c"}, "downloads": -1, "filename": "pymatched-0.2.1.tar.gz", "has_sig": false, "md5_digest": "467b6ee5df0cd846bdb9156c04a66292", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 5098, "upload_time": "2020-02-19T05:15:33", "upload_time_iso_8601": "2020-02-19T05:15:33.027783Z", "url": "https://files.pythonhosted.org/packages/1d/bb/d2412fe236c7fc54c3181aae5141f59f35692597c03b37f64eff6578960c/pymatched-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:29 2020"}