{"info": {"author": "Filipe Waitman", "author_email": "filwaitman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "Bank Account Validator\r\n=======================\r\n\r\nPython implementation for bank account validation.\r\n\r\nCurrently, the biggest Brazilian banks are implemented - and so being validated. There is no other countries' banks implemented, but the code is modular and it can be done easily.\r\n\r\nUsage:\r\n\r\n.. code:: python\r\n\r\n    from bank_account_validator.core import Bank\r\n    bank_class = Bank.get('bank_code', 'country_code')\r\n    bank_class(branch='branch', branch_digit='branch_digit', \r\n               account='account', account_digit='account_digit').execute()\r\n\r\n\r\n\r\nExamples:\r\n\r\n.. code:: python\r\n\r\n    from bank_account_validator.core import Bank, BrazilianBank\r\n\r\n    # Account below is correct, so nothing is raised by calling execute()\r\n    bank_class = Bank.get('237', 'BR')\r\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='7').execute()\r\n\r\n    # Account below has invalid branch so InvalidBranch will be raised\r\n    bank_class = BrazilianBank.get('237')\r\n    bank_class(branch='1769', branch_digit='0', account='200040', account_digit='7').execute()\r\n    # InvalidBranch: Branch \"1769-0\" is wrong.\r\n\r\n    # Account below has invalid account so InvalidAccount will be raised\r\n    bank_class = BrazilianBank.get('237')\r\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='0').execute()\r\n    # InvalidAccount: Account \"0200040-0\" is wrong.\r\n\r\n    # Sometimes there is not an unitary validation for both branch and account\r\n    # I mean, the full combination is evaluated at once.\r\n    bank_class = BrazilianBank.get('033')\r\n    bank_class(branch='2006', branch_digit='', account='01008407', account_digit='1').execute()\r\n    # InvalidBranchAndAccountCombination: Combination (branch=\"2006\", account=\"01008407-1\") does not match.\r\n\r\n    # It also validates wether digits must be supplied or not, as well as branch/account lengths\r\n    bank_class = BrazilianBank.get('237')\r\n    bank_class(branch='111769', branch_digit='8', account='200040', account_digit='7').execute()\r\n    # InvalidBranchlength: For bank code \"237\", branches length must be 4.\r\n\r\n    bank_class(branch='1769', branch_digit='8', account='11200040', account_digit='7').execute()\r\n    # InvalidAccountlength: For bank code \"237\", accounts length must be 7.\r\n\r\n    bank_class(branch='1769', branch_digit='', account='200040', account_digit='7').execute()\r\n    # MissingBranchDigit: For bank code \"237\", branches must have a digit, of length 1.\r\n\r\n    bank_class(branch='1769', branch_digit='11', account='200040', account_digit='7').execute()\r\n    # UnexpectedBranchDigit: For bank code \"237\", branches must have 1 digits.\r\n\r\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='').execute()\r\n    # MissingAccountDigit: For bank code \"237\", accounts must have a digit, of length 1.\r\n\r\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='11').execute()\r\n    # UnexpectedAccountDigit: For bank code \"237\", accounts must have 1 digits.\r\n\r\n\r\n\r\nContribute\r\n----------\r\n\r\nDid you think in some interesting feature, or have you found a bug? Please let me know!\r\n\r\nOf course you can also download the project and send me some `pull requests <https://github.com/filwaitman/bank-account-validator/pulls>`_.\r\n\r\n\r\nYou can send your suggestions by `opening issues <https://github.com/filwaitman/bank-account-validator/issues>`_.\r\n\r\nYou can contact me directly as well. Take a look at my contact information at `http://filwaitman.github.io/ <http://filwaitman.github.io/>`_ (email is preferred rather than mobile phone).", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/filwaitman/bank-account-validator/tarball/0.1", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/filwaitman/bank-account-validator", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "bank-account-validator", "package_url": "https://pypi.org/project/bank-account-validator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bank-account-validator/", "project_urls": {"Download": "https://github.com/filwaitman/bank-account-validator/tarball/0.1", "Homepage": "https://github.com/filwaitman/bank-account-validator"}, "release_url": "https://pypi.org/project/bank-account-validator/0.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python implementation for bank account validation.</p>\n<p>Currently, the biggest Brazilian banks are implemented - and so being validated. There is no other countries\u2019 banks implemented, but the code is modular and it can be done easily.</p>\n<p>Usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bank_account_validator.core</span> <span class=\"kn\">import</span> <span class=\"n\">Bank</span>\n<span class=\"n\">bank_class</span> <span class=\"o\">=</span> <span class=\"n\">Bank</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'bank_code'</span><span class=\"p\">,</span> <span class=\"s1\">'country_code'</span><span class=\"p\">)</span>\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'branch'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'branch_digit'</span><span class=\"p\">,</span>\n           <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'account'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'account_digit'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n</pre>\n<p>Examples:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bank_account_validator.core</span> <span class=\"kn\">import</span> <span class=\"n\">Bank</span><span class=\"p\">,</span> <span class=\"n\">BrazilianBank</span>\n\n<span class=\"c1\"># Account below is correct, so nothing is raised by calling execute()</span>\n<span class=\"n\">bank_class</span> <span class=\"o\">=</span> <span class=\"n\">Bank</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'237'</span><span class=\"p\">,</span> <span class=\"s1\">'BR'</span><span class=\"p\">)</span>\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'1769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'8'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'7'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Account below has invalid branch so InvalidBranch will be raised</span>\n<span class=\"n\">bank_class</span> <span class=\"o\">=</span> <span class=\"n\">BrazilianBank</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'237'</span><span class=\"p\">)</span>\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'1769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'7'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># InvalidBranch: Branch \"1769-0\" is wrong.</span>\n\n<span class=\"c1\"># Account below has invalid account so InvalidAccount will be raised</span>\n<span class=\"n\">bank_class</span> <span class=\"o\">=</span> <span class=\"n\">BrazilianBank</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'237'</span><span class=\"p\">)</span>\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'1769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'8'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'0'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># InvalidAccount: Account \"0200040-0\" is wrong.</span>\n\n<span class=\"c1\"># Sometimes there is not an unitary validation for both branch and account</span>\n<span class=\"c1\"># I mean, the full combination is evaluated at once.</span>\n<span class=\"n\">bank_class</span> <span class=\"o\">=</span> <span class=\"n\">BrazilianBank</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'033'</span><span class=\"p\">)</span>\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'2006'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'01008407'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># InvalidBranchAndAccountCombination: Combination (branch=\"2006\", account=\"01008407-1\") does not match.</span>\n\n<span class=\"c1\"># It also validates wether digits must be supplied or not, as well as branch/account lengths</span>\n<span class=\"n\">bank_class</span> <span class=\"o\">=</span> <span class=\"n\">BrazilianBank</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'237'</span><span class=\"p\">)</span>\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'111769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'8'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'7'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># InvalidBranchlength: For bank code \"237\", branches length must be 4.</span>\n\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'1769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'8'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'11200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'7'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># InvalidAccountlength: For bank code \"237\", accounts length must be 7.</span>\n\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'1769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'7'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># MissingBranchDigit: For bank code \"237\", branches must have a digit, of length 1.</span>\n\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'1769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'11'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'7'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># UnexpectedBranchDigit: For bank code \"237\", branches must have 1 digits.</span>\n\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'1769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'8'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># MissingAccountDigit: For bank code \"237\", accounts must have a digit, of length 1.</span>\n\n<span class=\"n\">bank_class</span><span class=\"p\">(</span><span class=\"n\">branch</span><span class=\"o\">=</span><span class=\"s1\">'1769'</span><span class=\"p\">,</span> <span class=\"n\">branch_digit</span><span class=\"o\">=</span><span class=\"s1\">'8'</span><span class=\"p\">,</span> <span class=\"n\">account</span><span class=\"o\">=</span><span class=\"s1\">'200040'</span><span class=\"p\">,</span> <span class=\"n\">account_digit</span><span class=\"o\">=</span><span class=\"s1\">'11'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">()</span>\n<span class=\"c1\"># UnexpectedAccountDigit: For bank code \"237\", accounts must have 1 digits.</span>\n</pre>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>Did you think in some interesting feature, or have you found a bug? Please let me know!</p>\n<p>Of course you can also download the project and send me some <a href=\"https://github.com/filwaitman/bank-account-validator/pulls\" rel=\"nofollow\">pull requests</a>.</p>\n<p>You can send your suggestions by <a href=\"https://github.com/filwaitman/bank-account-validator/issues\" rel=\"nofollow\">opening issues</a>.</p>\n<p>You can contact me directly as well. Take a look at my contact information at <a href=\"http://filwaitman.github.io/\" rel=\"nofollow\">http://filwaitman.github.io/</a> (email is preferred rather than mobile phone).</p>\n</div>\n\n          </div>"}, "last_serial": 1955898, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "7c6a27e20265664b8a41cdae690125d4", "sha256": "18b2b26bf67f0970d8d194724691cf688290dae9a4e277f7ef46424371ea4109"}, "downloads": -1, "filename": "bank-account-validator-0.1.tar.gz", "has_sig": false, "md5_digest": "7c6a27e20265664b8a41cdae690125d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15538, "upload_time": "2016-02-14T19:42:45", "upload_time_iso_8601": "2016-02-14T19:42:45.221593Z", "url": "https://files.pythonhosted.org/packages/4a/b2/8b328f789efa9c80a91fb39e282705162b1a73e92efcc74ae6136568d4af/bank-account-validator-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7c6a27e20265664b8a41cdae690125d4", "sha256": "18b2b26bf67f0970d8d194724691cf688290dae9a4e277f7ef46424371ea4109"}, "downloads": -1, "filename": "bank-account-validator-0.1.tar.gz", "has_sig": false, "md5_digest": "7c6a27e20265664b8a41cdae690125d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15538, "upload_time": "2016-02-14T19:42:45", "upload_time_iso_8601": "2016-02-14T19:42:45.221593Z", "url": "https://files.pythonhosted.org/packages/4a/b2/8b328f789efa9c80a91fb39e282705162b1a73e92efcc74ae6136568d4af/bank-account-validator-0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:55 2020"}