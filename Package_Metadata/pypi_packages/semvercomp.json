{"info": {"author": "Esteban Borai", "author_email": "estebanborai@outlook.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# semvercomp\n\ud83d\udc0d Semantic Version Comparison for Python\n\nImplementation of a `Version` object with comparison capabilities and tag validation following [semver](https://semver.org/) conventions.\n\n## Installation\n```bash\npip install semvercomp\n```\n\n## Usage\n- [Classes](https://github.com/estebanborai/semvercomp#classes)\n\t- [Version](https://github.com/estebanborai/semvercomp#versionmajor0--int-minor0--int-patch0--int-pre_release--str-patch--str-has_vfalse--str)\n- [Comparison of Version Objects](https://github.com/estebanborai/semvercomp#comparison-of-version-objects)\n\t- [Equal](https://github.com/estebanborai/semvercomp#equal)\n\t- [Greater](https://github.com/estebanborai/semvercomp#greater)\n\t- [Lower](https://github.com/estebanborai/semvercomp#lower)\n- [Validation](https://github.com/estebanborai/semvercomp#validation)\n\t- [validate_version](https://github.com/estebanborai/semvercomp#validate_versionversion-str-parts-dict-is_ok-bool)\n- [Utils](https://github.com/estebanborai/semvercomp#utils)\n\t- [to_version_list](https://github.com/estebanborai/semvercomp#to_version_listcoll-iterable-version)\n\n### Classes\n#### `Version(major=0 : int, minor=0 : int, patch=0 : int, pre_release=\"\" : str, patch=\"\" : str, has_v=False : str)`\n\nClass `Version` represents a version tag following *semver* conventions.\nA version tag is structured the following way:\n```\nX.Y.Z-pre+build\n```\n\nValue | Name | Description\n------------ | ------------- | -------------\n`X` | `Major` | Version when you make incompatible API changes\n`Y` | `Minor` | Version when you add functionality in a backwards-compatible manner\n`Z` | `Patch` | Version when you make backwards-compatible bug fixes\n`pre` | `Pre Release` | Version *pre-release* tag\n`build` | `Build` | Version *build* tag\n\nSource: [Semantic Versioning 2.0.0](https://semver.org/)\n\n- Public Properties\n\nKey | Value | Type\n------------ | ------------- | -------------\n`has_v` | `bool` | Flag for preceding `v` or `V` in version tag\n`major` | `int` | Major member\n`minor` | `int` | Minor member\n`patch` | `int` | Patch member\n`pre_release` | `str` | Pre Release member\n`build` | `str` | Build member\n\n- Instance of Version\n\n```python\nfrom semvercomp.Version import Version\n\nver = Version(1, 0, 0, 'beta', '20191224')\nprint(str(ver))\n# 1.0.0-beta+20191224\n```\n\n- Creating a Version object from a version string:\n\n```python\nfrom semvercomp.Version import Version\n\nstr_v = Version()\nstr_v.parse_version_number('v1.0.0-beta')\n# str_v.major == 1\n# str_v.minor == 0\n# str_v.patch == 0\n# str_v.has_v == True\n# str_v.pre_release == 'beta'\n```\n\n### Comparison of Version Objects\n`Version` class implements `__gt__`, `__lt__` and `__eq__` built-in methods to implement comparison.\n#### Equal\n```python\nfrom semvercomp.Version import Version\n\na = Version(1, 0, 0)\nb = Version(1, 0, 0)\nprint(a == b) # True\n```\n\n#### Greater\n```python\nfrom semvercomp.Version import Version\n\na = Version(1, 1, 0)\nb = Version(1, 0, 0)\nprint(a > b) # True\n```\n\n#### Lower\n```python\nfrom semvercomp.Version import Version\n\na = Version(0, 1, 0)\nb = Version(1, 0, 0)\nprint(a < b) # True\n```\n\n### Validation\nIt is possible to validate and gather the different members of a version tag using `validate version` from `semvercomp.validators`.\n\n#### `validate_version(version: str): (parts: dict(), is_ok: bool)`\nWill return a tuple where, the first element is a dictionary with the properties of the given version tag destructured.\n\nThe second element in the tuple is a boolean flag that stands as the validation result.\n\n```python\nfrom semvercomp.validators import validate_version\n\nver_str = 'v1.0.22'\n(parts, is_ok) = validate_version(ver_str)\nprint(parts) # {'has_v': True, 'major': 1, 'minor': 0, 'patch': 22, 'pre_release': None, 'build': None}\nprint(is_ok) # True\n```\n\n### Utils\n#### `to_version_list(coll: iterable): Version[]`\nCreate an array of Version objects from an iterable of version tags as strings.\n\n```python\nfrom semvercomp.utils import to_version_list\n\nall = [\n\t'1.0.0-beta',\n\t'0.1.0+1234',\n\t'33.22.3'\n]\n\nversions = to_version_list(all)\n```\n\n## Development\n### Requirements\n- [pyenv](https://github.com/pyenv/pyenv)\n- [pipenv](https://pipenv.readthedocs.io/en/latest/)\n- [Visual Studio Code](https://code.visualstudio.com/) **Recommended**\n\n### Debugging\n- Debugging tests\nTests for this package are written with `pytest`.\nThe following json, is an example of the `.vscode/settings.json`:\n```json\n{\n\t\"python.pythonPath\": /* Your Python Binary Address*/,\n\t\"python.testing.pytestArgs\": [\n\t\t\"tests\"\n\t],\n\t\"python.testing.unittestEnabled\": false,\n\t\"python.testing.nosetestsEnabled\": false,\n\t\"python.testing.pytestEnabled\": true\n}\n```\n\n### Testing\n- Running unit tests\n```bash\n# from repository root directory\npytest\n```\n\n- Running test coverage\n```bash\n# from repository root directory\npytest --cov=semvercomp tests/\n\n# or with html report\npytest --cov-report html --cov=semvercomp tests/\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/estebanborai/semvercomp", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "semvercomp", "package_url": "https://pypi.org/project/semvercomp/", "platform": "", "project_url": "https://pypi.org/project/semvercomp/", "project_urls": {"Homepage": "https://github.com/estebanborai/semvercomp"}, "release_url": "https://pypi.org/project/semvercomp/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Semantic Version Comparison for Python", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>semvercomp</h1>\n<p>\ud83d\udc0d Semantic Version Comparison for Python</p>\n<p>Implementation of a <code>Version</code> object with comparison capabilities and tag validation following <a href=\"https://semver.org/\" rel=\"nofollow\">semver</a> conventions.</p>\n<h2>Installation</h2>\n<pre>pip install semvercomp\n</pre>\n<h2>Usage</h2>\n<ul>\n<li><a href=\"https://github.com/estebanborai/semvercomp#classes\" rel=\"nofollow\">Classes</a>\n<ul>\n<li><a href=\"https://github.com/estebanborai/semvercomp#versionmajor0--int-minor0--int-patch0--int-pre_release--str-patch--str-has_vfalse--str\" rel=\"nofollow\">Version</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/estebanborai/semvercomp#comparison-of-version-objects\" rel=\"nofollow\">Comparison of Version Objects</a>\n<ul>\n<li><a href=\"https://github.com/estebanborai/semvercomp#equal\" rel=\"nofollow\">Equal</a></li>\n<li><a href=\"https://github.com/estebanborai/semvercomp#greater\" rel=\"nofollow\">Greater</a></li>\n<li><a href=\"https://github.com/estebanborai/semvercomp#lower\" rel=\"nofollow\">Lower</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/estebanborai/semvercomp#validation\" rel=\"nofollow\">Validation</a>\n<ul>\n<li><a href=\"https://github.com/estebanborai/semvercomp#validate_versionversion-str-parts-dict-is_ok-bool\" rel=\"nofollow\">validate_version</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/estebanborai/semvercomp#utils\" rel=\"nofollow\">Utils</a>\n<ul>\n<li><a href=\"https://github.com/estebanborai/semvercomp#to_version_listcoll-iterable-version\" rel=\"nofollow\">to_version_list</a></li>\n</ul>\n</li>\n</ul>\n<h3>Classes</h3>\n<h4><code>Version(major=0 : int, minor=0 : int, patch=0 : int, pre_release=\"\" : str, patch=\"\" : str, has_v=False : str)</code></h4>\n<p>Class <code>Version</code> represents a version tag following <em>semver</em> conventions.\nA version tag is structured the following way:</p>\n<pre><code>X.Y.Z-pre+build\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>X</code></td>\n<td><code>Major</code></td>\n<td>Version when you make incompatible API changes</td>\n</tr>\n<tr>\n<td><code>Y</code></td>\n<td><code>Minor</code></td>\n<td>Version when you add functionality in a backwards-compatible manner</td>\n</tr>\n<tr>\n<td><code>Z</code></td>\n<td><code>Patch</code></td>\n<td>Version when you make backwards-compatible bug fixes</td>\n</tr>\n<tr>\n<td><code>pre</code></td>\n<td><code>Pre Release</code></td>\n<td>Version <em>pre-release</em> tag</td>\n</tr>\n<tr>\n<td><code>build</code></td>\n<td><code>Build</code></td>\n<td>Version <em>build</em> tag</td>\n</tr></tbody></table>\n<p>Source: <a href=\"https://semver.org/\" rel=\"nofollow\">Semantic Versioning 2.0.0</a></p>\n<ul>\n<li>Public Properties</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>has_v</code></td>\n<td><code>bool</code></td>\n<td>Flag for preceding <code>v</code> or <code>V</code> in version tag</td>\n</tr>\n<tr>\n<td><code>major</code></td>\n<td><code>int</code></td>\n<td>Major member</td>\n</tr>\n<tr>\n<td><code>minor</code></td>\n<td><code>int</code></td>\n<td>Minor member</td>\n</tr>\n<tr>\n<td><code>patch</code></td>\n<td><code>int</code></td>\n<td>Patch member</td>\n</tr>\n<tr>\n<td><code>pre_release</code></td>\n<td><code>str</code></td>\n<td>Pre Release member</td>\n</tr>\n<tr>\n<td><code>build</code></td>\n<td><code>str</code></td>\n<td>Build member</td>\n</tr></tbody></table>\n<ul>\n<li>Instance of Version</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">semvercomp.Version</span> <span class=\"kn\">import</span> <span class=\"n\">Version</span>\n\n<span class=\"n\">ver</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'beta'</span><span class=\"p\">,</span> <span class=\"s1\">'20191224'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ver</span><span class=\"p\">))</span>\n<span class=\"c1\"># 1.0.0-beta+20191224</span>\n</pre>\n<ul>\n<li>Creating a Version object from a version string:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">semvercomp.Version</span> <span class=\"kn\">import</span> <span class=\"n\">Version</span>\n\n<span class=\"n\">str_v</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">()</span>\n<span class=\"n\">str_v</span><span class=\"o\">.</span><span class=\"n\">parse_version_number</span><span class=\"p\">(</span><span class=\"s1\">'v1.0.0-beta'</span><span class=\"p\">)</span>\n<span class=\"c1\"># str_v.major == 1</span>\n<span class=\"c1\"># str_v.minor == 0</span>\n<span class=\"c1\"># str_v.patch == 0</span>\n<span class=\"c1\"># str_v.has_v == True</span>\n<span class=\"c1\"># str_v.pre_release == 'beta'</span>\n</pre>\n<h3>Comparison of Version Objects</h3>\n<p><code>Version</code> class implements <code>__gt__</code>, <code>__lt__</code> and <code>__eq__</code> built-in methods to implement comparison.</p>\n<h4>Equal</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">semvercomp.Version</span> <span class=\"kn\">import</span> <span class=\"n\">Version</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n<h4>Greater</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">semvercomp.Version</span> <span class=\"kn\">import</span> <span class=\"n\">Version</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n<h4>Lower</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">semvercomp.Version</span> <span class=\"kn\">import</span> <span class=\"n\">Version</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Version</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n<h3>Validation</h3>\n<p>It is possible to validate and gather the different members of a version tag using <code>validate version</code> from <code>semvercomp.validators</code>.</p>\n<h4><code>validate_version(version: str): (parts: dict(), is_ok: bool)</code></h4>\n<p>Will return a tuple where, the first element is a dictionary with the properties of the given version tag destructured.</p>\n<p>The second element in the tuple is a boolean flag that stands as the validation result.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">semvercomp.validators</span> <span class=\"kn\">import</span> <span class=\"n\">validate_version</span>\n\n<span class=\"n\">ver_str</span> <span class=\"o\">=</span> <span class=\"s1\">'v1.0.22'</span>\n<span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">,</span> <span class=\"n\">is_ok</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">validate_version</span><span class=\"p\">(</span><span class=\"n\">ver_str</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span> <span class=\"c1\"># {'has_v': True, 'major': 1, 'minor': 0, 'patch': 22, 'pre_release': None, 'build': None}</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">is_ok</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n<h3>Utils</h3>\n<h4><code>to_version_list(coll: iterable): Version[]</code></h4>\n<p>Create an array of Version objects from an iterable of version tags as strings.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">semvercomp.utils</span> <span class=\"kn\">import</span> <span class=\"n\">to_version_list</span>\n\n<span class=\"nb\">all</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"s1\">'1.0.0-beta'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'0.1.0+1234'</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'33.22.3'</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">versions</span> <span class=\"o\">=</span> <span class=\"n\">to_version_list</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"p\">)</span>\n</pre>\n<h2>Development</h2>\n<h3>Requirements</h3>\n<ul>\n<li><a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a></li>\n<li><a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">pipenv</a></li>\n<li><a href=\"https://code.visualstudio.com/\" rel=\"nofollow\">Visual Studio Code</a> <strong>Recommended</strong></li>\n</ul>\n<h3>Debugging</h3>\n<ul>\n<li>Debugging tests\nTests for this package are written with <code>pytest</code>.\nThe following json, is an example of the <code>.vscode/settings.json</code>:</li>\n</ul>\n<pre><span class=\"p\">{</span>\n\t<span class=\"nt\">\"python.pythonPath\"</span><span class=\"p\">:</span> <span class=\"err\">/*</span> <span class=\"err\">Your</span> <span class=\"err\">Python</span> <span class=\"err\">Binary</span> <span class=\"err\">Address*/</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"python.testing.pytestArgs\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n\t\t<span class=\"s2\">\"tests\"</span>\n\t<span class=\"p\">],</span>\n\t<span class=\"nt\">\"python.testing.unittestEnabled\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"python.testing.nosetestsEnabled\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n\t<span class=\"nt\">\"python.testing.pytestEnabled\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n</pre>\n<h3>Testing</h3>\n<ul>\n<li>Running unit tests</li>\n</ul>\n<pre><span class=\"c1\"># from repository root directory</span>\npytest\n</pre>\n<ul>\n<li>Running test coverage</li>\n</ul>\n<pre><span class=\"c1\"># from repository root directory</span>\npytest --cov<span class=\"o\">=</span>semvercomp tests/\n\n<span class=\"c1\"># or with html report</span>\npytest --cov-report html --cov<span class=\"o\">=</span>semvercomp tests/\n</pre>\n\n          </div>"}, "last_serial": 5531353, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3cd3a5e20608d466c872fc64bd680f59", "sha256": "18fa2d68dc76df463749a058994be00ada44b7f0c2b52e03cd149f2c3e8264d0"}, "downloads": -1, "filename": "semvercomp-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3cd3a5e20608d466c872fc64bd680f59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6178, "upload_time": "2019-07-14T14:53:11", "upload_time_iso_8601": "2019-07-14T14:53:11.926348Z", "url": "https://files.pythonhosted.org/packages/95/2f/7e9e40ce2e083614c9a0f0e08e6e47ffbe51c4c95ebd40bf6e66996826b3/semvercomp-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3d421049e5ad94a08e0e112fff216ef", "sha256": "a9ea00661f4f16e41e601f33b1c5b1ba03b737ce7b43368c9cbf736364e82a90"}, "downloads": -1, "filename": "semvercomp-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b3d421049e5ad94a08e0e112fff216ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3794, "upload_time": "2019-07-14T14:53:14", "upload_time_iso_8601": "2019-07-14T14:53:14.298839Z", "url": "https://files.pythonhosted.org/packages/7a/e5/e04fa038d253214b874375681e7051236ba2d012773a247479e54725d0f5/semvercomp-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "809f315a60db3d088314f9932a1cd12b", "sha256": "da647a950274e35689403ca41224f39e2dd81034913c170044e6f84ed0726e40"}, "downloads": -1, "filename": "semvercomp-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "809f315a60db3d088314f9932a1cd12b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7418, "upload_time": "2019-07-14T15:48:59", "upload_time_iso_8601": "2019-07-14T15:48:59.344638Z", "url": "https://files.pythonhosted.org/packages/96/96/ec8b994e25baf057c18dd2e6f408b8016158f5ed19728508d79af3fdc2b9/semvercomp-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d7240998dc514736078a9f284025dc5", "sha256": "ac3f42aa15d9b5e598d9d405f48e0f59169d1370ffed1c860f8f746f4b8a96b4"}, "downloads": -1, "filename": "semvercomp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2d7240998dc514736078a9f284025dc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5345, "upload_time": "2019-07-14T15:49:01", "upload_time_iso_8601": "2019-07-14T15:49:01.633087Z", "url": "https://files.pythonhosted.org/packages/98/58/807f0e08d17db529c15d8aba06dc25bb1ca4dd709e77ccd2a7013689173a/semvercomp-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "809f315a60db3d088314f9932a1cd12b", "sha256": "da647a950274e35689403ca41224f39e2dd81034913c170044e6f84ed0726e40"}, "downloads": -1, "filename": "semvercomp-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "809f315a60db3d088314f9932a1cd12b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7418, "upload_time": "2019-07-14T15:48:59", "upload_time_iso_8601": "2019-07-14T15:48:59.344638Z", "url": "https://files.pythonhosted.org/packages/96/96/ec8b994e25baf057c18dd2e6f408b8016158f5ed19728508d79af3fdc2b9/semvercomp-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d7240998dc514736078a9f284025dc5", "sha256": "ac3f42aa15d9b5e598d9d405f48e0f59169d1370ffed1c860f8f746f4b8a96b4"}, "downloads": -1, "filename": "semvercomp-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2d7240998dc514736078a9f284025dc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5345, "upload_time": "2019-07-14T15:49:01", "upload_time_iso_8601": "2019-07-14T15:49:01.633087Z", "url": "https://files.pythonhosted.org/packages/98/58/807f0e08d17db529c15d8aba06dc25bb1ca4dd709e77ccd2a7013689173a/semvercomp-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:20 2020"}