{"info": {"author": "Sasho Savkov", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP"], "description": "# Planchet\n_Your large data processing personal assistant_\n\n[![CircleCI](https://circleci.com/gh/savkov/planchet.svg?style=shield)](https://circleci.com/gh/savkov/planchet)\n[![Maintainability](https://api.codeclimate.com/v1/badges/4291c3334f1699a4f227/maintainability)](https://codeclimate.com/github/savkov/planchet/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/4291c3334f1699a4f227/test_coverage)](https://codeclimate.com/github/savkov/planchet/test_coverage)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## About\n\nPlanchet (pronounced /pl\u028c\u0303\u0283\u025b/) is a data package manager suited for processing large arrays of data\nitems. It supports natively reading and writing into CSV and JSONL data files\nand serving their content over a FastAPI service to clients that process the\ndata. It is a tool for scientist and hackers, not production. \n\n## How it works\n\nPlanchet solves the controlled processing of large amounts of data in a simple\nand slightly naive way by controlling the reading and writing of the data as\nopposed to the processing. When you create a job with Planchet you tell the \nsevice where to read, where to write and what classes to use for that. Next,\nyou (using the client or simple HTTP requests) ask the service for _n_ data \nitems, which your process works through locally. When your processing is done,\nit ships the items back to Planchet, who writes them to disk. All jobs and \nserving and receiving of items is logged in a Redis instance with persistence.\nThis assures that if you stop processing you will only lose the processing of\nthe data that was not sent back to Planchet. Planchet will automatically resume\njobs and skip over processed items.\n\n_Caveat:_ Planchet is running in a single thread to avoid the mess of multiple\nprocesses writing in the same file. Until this is fixed (may be never) you\nshould be careful with your batch sizes -- keep them not too big and not too \nsmall.\n\n![diagram](https://github.com/savkov/planchet/blob/master/img/Planchet.png)\n\n## Installation\n\nPlanchet works in two components: a service and a client. The service is the\ncore that does all the work managing the data while the client is a light\nwrapper around `requests` that makes it easy to access the service API.\n\n### Service\n\nYou can use this repo and start streight away like this:\n```bash\ngit clone git@github.com:savkov/planchet.git\nexport REDIS_PWD=<some-password>\nmake install\nmake run-redis\nmake run\n```\n\nIf you want to run Planchet on a different port, you can use the `uvicorn` \ncommand but note that you **MUST** use only one worker. \n\n```bash\nuvicorn app:app --reload --host 0.0.0.0 --port 5005 --workers 1\n```\n\nYou can also run docker-compose from the git repo:\n\n```shell script\ngit clone git@github.com:savkov/planchet.git\nexport REDIS_PWD=<some-password>\ndocker-compose up\n```\n\n### Client\n\n```bash\npip install planchet\n```\n\n## Example\n\n\n### On the server\n\nOn the server we need to install Planchet and download some news headlines data\nin an accessible directory. Then we multiply the data 1000 times as there are \nonly 200 lines originally. Don't forget to set your _Redis password_ before\nyou do `make install-redis`! \n```bash\ngit clone https://github.com/savkov/planchet.git\ncd planchet\nmkdir data\nwget https://raw.githubusercontent.com/explosion/prodigy-recipes/master/example-datasets/news_headlines.jsonl -O data/news_headlines.jsonl\npython -c \"news=open('data/news_headlines.jsonl').read();open('data/news_headlines.jsonl', 'w').write(''.join([news for _ in range(200)]))\"\nexport PLANCHET_REDIS_PWD=<your-redis-password>\nmake install\nmake install-redis\nmake run\n```\n\nNote that planchet will run at port 5005 on your host machine.\n\n### On the client\n\nOn the client side we need to install the Planchet client and [spaCy](spacy.io).\n\n```bash\npip install planchet spacy tqdm\npython -m spacy download en_core_web_sm\nexport PLANCHET_REDIS_PWD=<your-redis-password>\n\n```\nThen we write the following script in a file called `spacy_ner.py` making sure \nyou fill in the placeholders.\n\n```python\nfrom planchet import PlanchetClient\nimport spacy\nfrom tqdm import tqdm\n\nnlp = spacy.load(\"en_core_web_sm\")\n\nPLANCHET_HOST = 'localhost'  # <--- CHANGE IF NEEDED\nPLANCHET_PORT = 5005\n\nurl = f'http://{PLANCHET_HOST}:{PLANCHET_PORT}'\nclient = PlanchetClient(url)\n\njob_name = 'spacy-ner-job'\nmetadata = { # NOTE: this assumes planchet has access to this path\n    'input_file_path': './data/news_headlines.jsonl',\n    'output_file_path': './data/entities.jsonl'\n}\n\n# make sure you don't use the clean_start option here\nclient.start_job(job_name, metadata, 'JsonlReader', writer_name='JsonlWriter')\n\n# make sure the number of items is large enough to avoid blocking the server\nn_items = 100\nheadlines = client.get(job_name, n_items)\n\nwhile headlines:\n    ents = []\n    print('Processing headlines batch...')\n    for id_, item in tqdm(headlines):\n        item['ents'] = [ent.text for ent in nlp(item['text']).ents]\n        ents.append((id_, item))\n    client.send(job_name, ents)\n    headlines = client.get(job_name, n_items)\n\n```\n\nFinally, we want to do some parallel processing with 8 processes. We can start\neach process manually or we can use the `parallel` tool to start them all.\n\n```bash\nseq -w 0 8 | parallel python spacy_ner.py {}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "planchet", "package_url": "https://pypi.org/project/planchet/", "platform": "", "project_url": "https://pypi.org/project/planchet/", "project_urls": null, "release_url": "https://pypi.org/project/planchet/0.3.0/", "requires_dist": ["requests (==2.23.0)"], "requires_python": "", "summary": "Large Data Processing Assistant", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Planchet</h1>\n<p><em>Your large data processing personal assistant</em></p>\n<p><a href=\"https://circleci.com/gh/savkov/planchet\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1691bafa9b98d3a09090fa7e592cb8ba19248e96/68747470733a2f2f636972636c6563692e636f6d2f67682f7361766b6f762f706c616e636865742e7376673f7374796c653d736869656c64\"></a>\n<a href=\"https://codeclimate.com/github/savkov/planchet/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26ef7b11678f124e5fc8e878dceeeac961fd0d48/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f34323931633333333466313639396134663232372f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://codeclimate.com/github/savkov/planchet/test_coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21301a8f94dba77dcd6149fe107353e5e2b19d38/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f34323931633333333466313639396134663232372f746573745f636f766572616765\"></a>\n<a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<h2>About</h2>\n<p>Planchet (pronounced /pl\u028c\u0303\u0283\u025b/) is a data package manager suited for processing large arrays of data\nitems. It supports natively reading and writing into CSV and JSONL data files\nand serving their content over a FastAPI service to clients that process the\ndata. It is a tool for scientist and hackers, not production.</p>\n<h2>How it works</h2>\n<p>Planchet solves the controlled processing of large amounts of data in a simple\nand slightly naive way by controlling the reading and writing of the data as\nopposed to the processing. When you create a job with Planchet you tell the\nsevice where to read, where to write and what classes to use for that. Next,\nyou (using the client or simple HTTP requests) ask the service for <em>n</em> data\nitems, which your process works through locally. When your processing is done,\nit ships the items back to Planchet, who writes them to disk. All jobs and\nserving and receiving of items is logged in a Redis instance with persistence.\nThis assures that if you stop processing you will only lose the processing of\nthe data that was not sent back to Planchet. Planchet will automatically resume\njobs and skip over processed items.</p>\n<p><em>Caveat:</em> Planchet is running in a single thread to avoid the mess of multiple\nprocesses writing in the same file. Until this is fixed (may be never) you\nshould be careful with your batch sizes -- keep them not too big and not too\nsmall.</p>\n<p><img alt=\"diagram\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58b86291d2366e0475480140df5f00762fb0d05e/68747470733a2f2f6769746875622e636f6d2f7361766b6f762f706c616e636865742f626c6f622f6d61737465722f696d672f506c616e636865742e706e67\"></p>\n<h2>Installation</h2>\n<p>Planchet works in two components: a service and a client. The service is the\ncore that does all the work managing the data while the client is a light\nwrapper around <code>requests</code> that makes it easy to access the service API.</p>\n<h3>Service</h3>\n<p>You can use this repo and start streight away like this:</p>\n<pre>git clone git@github.com:savkov/planchet.git\n<span class=\"nb\">export</span> <span class=\"nv\">REDIS_PWD</span><span class=\"o\">=</span>&lt;some-password&gt;\nmake install\nmake run-redis\nmake run\n</pre>\n<p>If you want to run Planchet on a different port, you can use the <code>uvicorn</code>\ncommand but note that you <strong>MUST</strong> use only one worker.</p>\n<pre>uvicorn app:app --reload --host <span class=\"m\">0</span>.0.0.0 --port <span class=\"m\">5005</span> --workers <span class=\"m\">1</span>\n</pre>\n<p>You can also run docker-compose from the git repo:</p>\n<pre>git clone git@github.com:savkov/planchet.git\n<span class=\"nb\">export</span> <span class=\"nv\">REDIS_PWD</span><span class=\"o\">=</span>&lt;some-password&gt;\ndocker-compose up\n</pre>\n<h3>Client</h3>\n<pre>pip install planchet\n</pre>\n<h2>Example</h2>\n<h3>On the server</h3>\n<p>On the server we need to install Planchet and download some news headlines data\nin an accessible directory. Then we multiply the data 1000 times as there are\nonly 200 lines originally. Don't forget to set your <em>Redis password</em> before\nyou do <code>make install-redis</code>!</p>\n<pre>git clone https://github.com/savkov/planchet.git\n<span class=\"nb\">cd</span> planchet\nmkdir data\nwget https://raw.githubusercontent.com/explosion/prodigy-recipes/master/example-datasets/news_headlines.jsonl -O data/news_headlines.jsonl\npython -c <span class=\"s2\">\"news=open('data/news_headlines.jsonl').read();open('data/news_headlines.jsonl', 'w').write(''.join([news for _ in range(200)]))\"</span>\n<span class=\"nb\">export</span> <span class=\"nv\">PLANCHET_REDIS_PWD</span><span class=\"o\">=</span>&lt;your-redis-password&gt;\nmake install\nmake install-redis\nmake run\n</pre>\n<p>Note that planchet will run at port 5005 on your host machine.</p>\n<h3>On the client</h3>\n<p>On the client side we need to install the Planchet client and <a href=\"spacy.io\" rel=\"nofollow\">spaCy</a>.</p>\n<pre>pip install planchet spacy tqdm\npython -m spacy download en_core_web_sm\n<span class=\"nb\">export</span> <span class=\"nv\">PLANCHET_REDIS_PWD</span><span class=\"o\">=</span>&lt;your-redis-password&gt;\n</pre>\n<p>Then we write the following script in a file called <code>spacy_ner.py</code> making sure\nyou fill in the placeholders.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">planchet</span> <span class=\"kn\">import</span> <span class=\"n\">PlanchetClient</span>\n<span class=\"kn\">import</span> <span class=\"nn\">spacy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tqdm</span> <span class=\"kn\">import</span> <span class=\"n\">tqdm</span>\n\n<span class=\"n\">nlp</span> <span class=\"o\">=</span> <span class=\"n\">spacy</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"en_core_web_sm\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">PLANCHET_HOST</span> <span class=\"o\">=</span> <span class=\"s1\">'localhost'</span>  <span class=\"c1\"># &lt;--- CHANGE IF NEEDED</span>\n<span class=\"n\">PLANCHET_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">5005</span>\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'http://</span><span class=\"si\">{</span><span class=\"n\">PLANCHET_HOST</span><span class=\"si\">}</span><span class=\"s1\">:</span><span class=\"si\">{</span><span class=\"n\">PLANCHET_PORT</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">PlanchetClient</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n<span class=\"n\">job_name</span> <span class=\"o\">=</span> <span class=\"s1\">'spacy-ner-job'</span>\n<span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"c1\"># NOTE: this assumes planchet has access to this path</span>\n    <span class=\"s1\">'input_file_path'</span><span class=\"p\">:</span> <span class=\"s1\">'./data/news_headlines.jsonl'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'output_file_path'</span><span class=\"p\">:</span> <span class=\"s1\">'./data/entities.jsonl'</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># make sure you don't use the clean_start option here</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">start_job</span><span class=\"p\">(</span><span class=\"n\">job_name</span><span class=\"p\">,</span> <span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"s1\">'JsonlReader'</span><span class=\"p\">,</span> <span class=\"n\">writer_name</span><span class=\"o\">=</span><span class=\"s1\">'JsonlWriter'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># make sure the number of items is large enough to avoid blocking the server</span>\n<span class=\"n\">n_items</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">headlines</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">job_name</span><span class=\"p\">,</span> <span class=\"n\">n_items</span><span class=\"p\">)</span>\n\n<span class=\"k\">while</span> <span class=\"n\">headlines</span><span class=\"p\">:</span>\n    <span class=\"n\">ents</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Processing headlines batch...'</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">headlines</span><span class=\"p\">):</span>\n        <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'ents'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ent</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"k\">for</span> <span class=\"n\">ent</span> <span class=\"ow\">in</span> <span class=\"n\">nlp</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'text'</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">ents</span><span class=\"p\">]</span>\n        <span class=\"n\">ents</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">id_</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">))</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">job_name</span><span class=\"p\">,</span> <span class=\"n\">ents</span><span class=\"p\">)</span>\n    <span class=\"n\">headlines</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">job_name</span><span class=\"p\">,</span> <span class=\"n\">n_items</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, we want to do some parallel processing with 8 processes. We can start\neach process manually or we can use the <code>parallel</code> tool to start them all.</p>\n<pre>seq -w <span class=\"m\">0</span> <span class=\"m\">8</span> <span class=\"p\">|</span> parallel python spacy_ner.py <span class=\"o\">{}</span>\n</pre>\n\n          </div>"}, "last_serial": 7012019, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "f585f8f480a7b4e885c545c280f21fc7", "sha256": "e684a8bbdefcbac52035dea7412ed22dbdbed64ce1cc34dcfcb2aba88eda857a"}, "downloads": -1, "filename": "planchet-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f585f8f480a7b4e885c545c280f21fc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3024, "upload_time": "2020-03-27T09:28:05", "upload_time_iso_8601": "2020-03-27T09:28:05.104580Z", "url": "https://files.pythonhosted.org/packages/d1/13/5c470dfcedae51f9d7510ee22d5ad66fd08a039528583b807547379ba4b3/planchet-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "daf2fce3a3e666562d803a94c3b45e14", "sha256": "f823182dcb9653a52572ca0144ce594ea7d783ad48a1e8a2cde64bd729fe0ba5"}, "downloads": -1, "filename": "planchet-0.1.2.tar.gz", "has_sig": false, "md5_digest": "daf2fce3a3e666562d803a94c3b45e14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7415, "upload_time": "2020-03-27T09:28:06", "upload_time_iso_8601": "2020-03-27T09:28:06.964629Z", "url": "https://files.pythonhosted.org/packages/3a/7f/8b4e37ee44c967bff193821952a29fe88b8e7aeb4d804d62c809a3007459/planchet-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c59e376c288972b57a9d1a18b3e9fc41", "sha256": "198da93a80c1eb3354d09c962b5e05589fad32529deab4094bff1d6b55bf4c69"}, "downloads": -1, "filename": "planchet-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c59e376c288972b57a9d1a18b3e9fc41", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6128, "upload_time": "2020-04-04T22:13:19", "upload_time_iso_8601": "2020-04-04T22:13:19.569238Z", "url": "https://files.pythonhosted.org/packages/f8/b4/08bd181122d4cba6866f999f4ebc30f47ab0807a032edb926fe8d73b1f6a/planchet-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "247d0d5011dd7dfb65587050fa10b776", "sha256": "effaa49dacae70fc15592a36cfd9452d893e9ae22fe3a34ca73ed2a34e4a73ca"}, "downloads": -1, "filename": "planchet-0.1.3.tar.gz", "has_sig": false, "md5_digest": "247d0d5011dd7dfb65587050fa10b776", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7968, "upload_time": "2020-04-04T22:13:20", "upload_time_iso_8601": "2020-04-04T22:13:20.934065Z", "url": "https://files.pythonhosted.org/packages/11/8b/d3fa5f44b33661e3d97a60e982894ddf1d10f7324259fd19248ab46449aa/planchet-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "290baca162cfb3ea4e9086cbd0bd5b57", "sha256": "e3dad7fdeef80c2522396eb6ed62418cb53e7a2a1c6fcceb79c43e45f953fe88"}, "downloads": -1, "filename": "planchet-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "290baca162cfb3ea4e9086cbd0bd5b57", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6116, "upload_time": "2020-04-07T20:06:14", "upload_time_iso_8601": "2020-04-07T20:06:14.494321Z", "url": "https://files.pythonhosted.org/packages/74/bb/3c9ad5385d1c88233484c2e5f4e6e35c747ca52f1df49f6c9384fd3307dd/planchet-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a5a67a5b78b43b85ba70b8ad6d6302e", "sha256": "85169131db145867c1b9c9e95cf63b713605a13c8eabfbc3784eb9916cbb75d5"}, "downloads": -1, "filename": "planchet-0.1.4.tar.gz", "has_sig": false, "md5_digest": "1a5a67a5b78b43b85ba70b8ad6d6302e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10362, "upload_time": "2020-04-07T20:06:15", "upload_time_iso_8601": "2020-04-07T20:06:15.439973Z", "url": "https://files.pythonhosted.org/packages/b2/4e/addef728ce00e0b59ed6bc382e370160fea9772763b7a8b40134e4309c49/planchet-0.1.4.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9623dbead9eec93a564688167a681393", "sha256": "17570256e8f3083655296ac42c7b2a8cfb119fd718f15b5a3153c535facfcd74"}, "downloads": -1, "filename": "planchet-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9623dbead9eec93a564688167a681393", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6171, "upload_time": "2020-04-09T18:51:09", "upload_time_iso_8601": "2020-04-09T18:51:09.055924Z", "url": "https://files.pythonhosted.org/packages/47/30/3c5249ac4f58ecbb767c9fe38ed5172d8ad322f9f9dc013e9f38da4bf887/planchet-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfada184492621f60ed6de8d8963f829", "sha256": "fd2e89cadd5ebd599901e9df76e6f891f0866a4f0d7ac76a97239685b03be742"}, "downloads": -1, "filename": "planchet-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bfada184492621f60ed6de8d8963f829", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8631, "upload_time": "2020-04-09T18:51:09", "upload_time_iso_8601": "2020-04-09T18:51:09.977733Z", "url": "https://files.pythonhosted.org/packages/bd/8e/46d0ddd361c8b88b9a7903d16afb1e69fbd26bfcd68d46b3a2688cb01770/planchet-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "adea75d471922d6fcfd81e4d2da3d21b", "sha256": "ef03587c9cc2797a6fc950367604b2f060b492fa3734d04108536e9f02bc9c57"}, "downloads": -1, "filename": "planchet-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "adea75d471922d6fcfd81e4d2da3d21b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6221, "upload_time": "2020-04-13T18:51:29", "upload_time_iso_8601": "2020-04-13T18:51:29.527811Z", "url": "https://files.pythonhosted.org/packages/ed/f2/7185d8b5d397509ffeec065d3e9cffd4e11722059208748c384beff7b2ab/planchet-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0eba1fa0d8fd41a9ae55344dd3767136", "sha256": "add141035a70e18103be91b542059382bf88fc19eb73d962dc2675fed4b2e624"}, "downloads": -1, "filename": "planchet-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0eba1fa0d8fd41a9ae55344dd3767136", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11536, "upload_time": "2020-04-13T18:51:30", "upload_time_iso_8601": "2020-04-13T18:51:30.868373Z", "url": "https://files.pythonhosted.org/packages/a5/1a/995a39fd1753f585b3db38e7671cebb3eae77a183dd4934b0a98dbc64cb7/planchet-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "adea75d471922d6fcfd81e4d2da3d21b", "sha256": "ef03587c9cc2797a6fc950367604b2f060b492fa3734d04108536e9f02bc9c57"}, "downloads": -1, "filename": "planchet-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "adea75d471922d6fcfd81e4d2da3d21b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6221, "upload_time": "2020-04-13T18:51:29", "upload_time_iso_8601": "2020-04-13T18:51:29.527811Z", "url": "https://files.pythonhosted.org/packages/ed/f2/7185d8b5d397509ffeec065d3e9cffd4e11722059208748c384beff7b2ab/planchet-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0eba1fa0d8fd41a9ae55344dd3767136", "sha256": "add141035a70e18103be91b542059382bf88fc19eb73d962dc2675fed4b2e624"}, "downloads": -1, "filename": "planchet-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0eba1fa0d8fd41a9ae55344dd3767136", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11536, "upload_time": "2020-04-13T18:51:30", "upload_time_iso_8601": "2020-04-13T18:51:30.868373Z", "url": "https://files.pythonhosted.org/packages/a5/1a/995a39fd1753f585b3db38e7671cebb3eae77a183dd4934b0a98dbc64cb7/planchet-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:43 2020"}