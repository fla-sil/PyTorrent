{"info": {"author": "Samuel Cook", "author_email": "rigdoncook@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# GeoFactory\n\nThis is a faker provider that generates fake geojson data. It simulates all the different\ntypes of features and geometries in the geojson specification. There is also a test\nsuite for the class and it's methods run with pytest.\n\n## Setup\n\nInstall from source:\n\n`pip install git+https://github.com/scook12/geofactory.git@master`\n\nOR\n\n`pipenv install git+https://github.com/scook12/geofactory.git@master#egg=geofactory`\n\nInstall with pip:\n\n`pip install geofactory`\n\n## Use\n\nGeoFactory is just an additional community provider for geojson. \n\nAn example might look like this:\n\n`from faker import Faker`\n\n`from geofactory import GeoFactory`\n\n`factory = Faker()`\n\n`factory.add_provider(GeoFactory)`\n\n`pt = factory.point()`\n\n`pt` is now a valid geojson Point feature. All methods follow this pattern.\n\n## Methods\n\n**lnglat**\n\nReturns a given number of random longitude/latitude pairs.\n\n**point**\n\nReturns a single geojson point object with random coordinates\n\n**multipoint**\n\nReturns a multipoint geojson object with a random number of random points\n:param: count_limit - determines the maxiumum number of points generated\n\n**linestring**\n\nReturns a linestring geojson object with a random number of nodes\n:param: node_limit - determines the maxiumum number of nodes generated\n\n**multilinestring**\n\nReturns a multilinestring with a random number of segments with a random number of nodes\n:param: node_limit - determines maximum number of nodes for a given linestring\n:param: count_limit - determines the maximum number of line segments generated\n\n**polygon**\n\nReturns a randomly arranged polygon with a specific number of nodes\n:param: node_limit - determines how many nodes will be in the return polygon\n\n**multypolygon**\n\nReturns a geojson multipolygon with a specific number of randomly arranged polygons\n:param: count_limit - determines how many polygons will be created\n\n**geometry_collection**\n\nReturns a specific number of random geojson geometries as a collection\n:param: count_limit - determines how many geometries will be generated\n\n**feature**\n\nReturns a random geojson feature object\n\n**feature_collection**\n\nReturns a specific number of random features in a feature collection object\n:param: count_limit - determines how many features will be generated\n\n**to_file**\n\nWrites geojson object to file\n:param: path - full path and filename for data to be written to\n:param: data - valid geojson object to dump in path\n\n## Contribute\n\nOpen an issue, fork the repo, submit a PR. This is a tiny side project I built to be \nused while developing an app that ingested geojson, so there aren't a ton of guidelines.\n\nIf you make changes to existing methods, be sure to run `pytest` to make sure they all \nare still passing. If you write a new method or class, please include some basic pytest\ncases.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scook12/geofactory", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "geofactory", "package_url": "https://pypi.org/project/geofactory/", "platform": "", "project_url": "https://pypi.org/project/geofactory/", "project_urls": {"Homepage": "https://github.com/scook12/geofactory"}, "release_url": "https://pypi.org/project/geofactory/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A simple geojson provider for faker", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>GeoFactory</h1>\n<p>This is a faker provider that generates fake geojson data. It simulates all the different\ntypes of features and geometries in the geojson specification. There is also a test\nsuite for the class and it's methods run with pytest.</p>\n<h2>Setup</h2>\n<p>Install from source:</p>\n<p><code>pip install git+https://github.com/scook12/geofactory.git@master</code></p>\n<p>OR</p>\n<p><code>pipenv install git+https://github.com/scook12/geofactory.git@master#egg=geofactory</code></p>\n<p>Install with pip:</p>\n<p><code>pip install geofactory</code></p>\n<h2>Use</h2>\n<p>GeoFactory is just an additional community provider for geojson.</p>\n<p>An example might look like this:</p>\n<p><code>from faker import Faker</code></p>\n<p><code>from geofactory import GeoFactory</code></p>\n<p><code>factory = Faker()</code></p>\n<p><code>factory.add_provider(GeoFactory)</code></p>\n<p><code>pt = factory.point()</code></p>\n<p><code>pt</code> is now a valid geojson Point feature. All methods follow this pattern.</p>\n<h2>Methods</h2>\n<p><strong>lnglat</strong></p>\n<p>Returns a given number of random longitude/latitude pairs.</p>\n<p><strong>point</strong></p>\n<p>Returns a single geojson point object with random coordinates</p>\n<p><strong>multipoint</strong></p>\n<p>Returns a multipoint geojson object with a random number of random points\n:param: count_limit - determines the maxiumum number of points generated</p>\n<p><strong>linestring</strong></p>\n<p>Returns a linestring geojson object with a random number of nodes\n:param: node_limit - determines the maxiumum number of nodes generated</p>\n<p><strong>multilinestring</strong></p>\n<p>Returns a multilinestring with a random number of segments with a random number of nodes\n:param: node_limit - determines maximum number of nodes for a given linestring\n:param: count_limit - determines the maximum number of line segments generated</p>\n<p><strong>polygon</strong></p>\n<p>Returns a randomly arranged polygon with a specific number of nodes\n:param: node_limit - determines how many nodes will be in the return polygon</p>\n<p><strong>multypolygon</strong></p>\n<p>Returns a geojson multipolygon with a specific number of randomly arranged polygons\n:param: count_limit - determines how many polygons will be created</p>\n<p><strong>geometry_collection</strong></p>\n<p>Returns a specific number of random geojson geometries as a collection\n:param: count_limit - determines how many geometries will be generated</p>\n<p><strong>feature</strong></p>\n<p>Returns a random geojson feature object</p>\n<p><strong>feature_collection</strong></p>\n<p>Returns a specific number of random features in a feature collection object\n:param: count_limit - determines how many features will be generated</p>\n<p><strong>to_file</strong></p>\n<p>Writes geojson object to file\n:param: path - full path and filename for data to be written to\n:param: data - valid geojson object to dump in path</p>\n<h2>Contribute</h2>\n<p>Open an issue, fork the repo, submit a PR. This is a tiny side project I built to be\nused while developing an app that ingested geojson, so there aren't a ton of guidelines.</p>\n<p>If you make changes to existing methods, be sure to run <code>pytest</code> to make sure they all\nare still passing. If you write a new method or class, please include some basic pytest\ncases.</p>\n\n          </div>"}, "last_serial": 6436334, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2e887caf35d7cf5baf9f9ba6188da400", "sha256": "18598988eb8de31ee17597bab670bad0ad3b89cba33f5dfa22f2c1194fe52d1e"}, "downloads": -1, "filename": "geofactory-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2e887caf35d7cf5baf9f9ba6188da400", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3996, "upload_time": "2020-01-11T15:53:58", "upload_time_iso_8601": "2020-01-11T15:53:58.092372Z", "url": "https://files.pythonhosted.org/packages/7e/f6/6637d0e0a4b9c17b8cf34e8892c63e8cfb60b39bcfffd99acc8cce783a0e/geofactory-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8789ea0dc4f7d0c008db8665eb41e7a5", "sha256": "f546b0f6d912a6a1b3a4ea57cb2c160ed3c8c79e5a8a1d662b34333c419e8ed4"}, "downloads": -1, "filename": "geofactory-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8789ea0dc4f7d0c008db8665eb41e7a5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2983, "upload_time": "2020-01-11T15:54:00", "upload_time_iso_8601": "2020-01-11T15:54:00.246723Z", "url": "https://files.pythonhosted.org/packages/82/91/97d88800e9a2d464d59ae47d3305d28cbedb7cf32610dde034f129188bf0/geofactory-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "4a06fd145c4b800771aa881f171bca0f", "sha256": "ecdb40550969536887bf25a4dcbb60cd0d81266a0b461d325a14d0bb200be68a"}, "downloads": -1, "filename": "geofactory-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4a06fd145c4b800771aa881f171bca0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3997, "upload_time": "2020-01-11T16:08:27", "upload_time_iso_8601": "2020-01-11T16:08:27.518716Z", "url": "https://files.pythonhosted.org/packages/bb/9d/81f14bc37e105a6fbc0fd3e946a8ebb41843169ed7499ca880730f16258b/geofactory-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "564c8489d6ba4eddd11061bf6752caa7", "sha256": "bb315f2b55a4d81fa66fe1e83fee5fa7f8f56305f7f4b63aa6568d3d6ef3aa3d"}, "downloads": -1, "filename": "geofactory-0.0.2.tar.gz", "has_sig": false, "md5_digest": "564c8489d6ba4eddd11061bf6752caa7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2978, "upload_time": "2020-01-11T16:08:29", "upload_time_iso_8601": "2020-01-11T16:08:29.004719Z", "url": "https://files.pythonhosted.org/packages/18/fa/5c0b5fdb9bad2ea2e818e88eb1aaa6456aa675d2f08a482a319f70206709/geofactory-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a06fd145c4b800771aa881f171bca0f", "sha256": "ecdb40550969536887bf25a4dcbb60cd0d81266a0b461d325a14d0bb200be68a"}, "downloads": -1, "filename": "geofactory-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4a06fd145c4b800771aa881f171bca0f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3997, "upload_time": "2020-01-11T16:08:27", "upload_time_iso_8601": "2020-01-11T16:08:27.518716Z", "url": "https://files.pythonhosted.org/packages/bb/9d/81f14bc37e105a6fbc0fd3e946a8ebb41843169ed7499ca880730f16258b/geofactory-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "564c8489d6ba4eddd11061bf6752caa7", "sha256": "bb315f2b55a4d81fa66fe1e83fee5fa7f8f56305f7f4b63aa6568d3d6ef3aa3d"}, "downloads": -1, "filename": "geofactory-0.0.2.tar.gz", "has_sig": false, "md5_digest": "564c8489d6ba4eddd11061bf6752caa7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2978, "upload_time": "2020-01-11T16:08:29", "upload_time_iso_8601": "2020-01-11T16:08:29.004719Z", "url": "https://files.pythonhosted.org/packages/18/fa/5c0b5fdb9bad2ea2e818e88eb1aaa6456aa675d2f08a482a319f70206709/geofactory-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:58:07 2020"}