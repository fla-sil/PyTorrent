{"info": {"author": "Nathan R. Yergler", "author_email": "nathan@yergler.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "License :: OSI Approved :: BSD License"], "description": "=====\ndingo\n=====\n\n*dingo* is a `Django`_ application which extends the `Django Admin`_\nto allow the easy creation of additional views for Model classes and\ninstances.  dingo also allows you to customize the Admin of third\nparty applications, without subclassing or modifying the original\nsource tree.\n\nFeatures\n========\n\n* Easily create new views for your Model Admin, either at the Model or\n  object level.\n* Inject customizations into the admin declaration of a third\n  party application without modifying the original code base.\n\nUsage\n=====\n\nTo use dingo, ensure that it's on the Python path, and add it to your\n``INSTALLED_APPS`` setting in ``settings.py``.  Note that dingo *must*\nbe installed *before* ``django.contrib.admin``, as it replaces the\ndefault ``AdminSite`` with one which will instrument the\n``ModelAdmin`` classes registered.\n\ndingo requires Django 1.2 or later.\n\nModels vs. Objects\n------------------\n\ndingo can be used to register views for Models or Objects.  Views\nregistered for Models are not specific to any instance of the model;\nthey can be thought of as similar to Django admin actions with an\n[potentially] empty queryset.  Instance views operate on single model\ninstances; you can think of them as similar to admin actions that\noperate on a single object instead of a queryset.\n\ndingo views differ from `admin actions`_ in a couple of subtle ways.\nThe most important difference is that they may be injected into third\nparty applications wihthout sub-classing or modifying the application\ncode.  dingo views also have a different user interface by default.\ndingo includes replacement admin templates which show dingo views as\nbuttons in the upper right hand area of the change list and change\nform views.\n\nAdding Views\n------------\n\nIf you want to use dingo to add model or object views to your Model's\nadmin, you can define them either as functions or as methods on the\nModelAdmin.\n\nFor example, to define the view as a function::\n\n  import dingo\n  import dingo_test.models\n\n  @dingo.object_view(dingo_test.models.RstDocument)\n  @dingo.short_description(\"Render\")\n  def render(model_admin, request, object_id):\n\n      from django.shortcuts import redirect\n      document = dingo_test.mdoels.RstDocument.objects.get(id=object_id)\n\n      return Response()\n\nThe same view may also be a method on the ModelAdmin::\n\n  class RstDocumentAdmin(ModelAdmin):\n\n      @dingo.object_view(dingo_test.models.RstDocument)\n      @dingo.short_description(\"Render\")\n      def render(self, request, object_id):\n          pass\n\nNote that the use of the ``short_description`` decorator defines the\nlabel used in the admin user interface, and is optional in this case.\nIf no description is provided, dingo will format the function or\nmethod name, similar to how Django formats default verbose names for\nmodels.\n\nAdding Views to Third Party Applications\n----------------------------------------\n\nSo long as dingo is listed in ``INSTALLED_APPS`` before\n``django.contrib.admin``, the function-based example above will work\nas desired.  Note that the code needs to be imported to ensure that\nregistration occurs properly.\n\nMissing Features / Bugs\n=======================\n\n* Model views are significantly less developed than Instance views.\n* Different actions for Models in different AdminSites are not\n  currently supported.  To accomodate this, a site-local action\n  registry will need to be used.\n\n.. _django: http://djangoproject.com/\n.. _Django Admin: http://docs.djangoproject.com/en/1.1/ref/contrib/admin/\n.. _admin actions: http://docs.djangoproject.com/en/1.1/ref/contrib/admin/actions/#ref-contrib-admin-actions", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://gitorious.org/dingo", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "dingo", "package_url": "https://pypi.org/project/dingo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dingo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://gitorious.org/dingo"}, "release_url": "https://pypi.org/project/dingo/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><em>dingo</em> is a <a href=\"http://djangoproject.com/\" rel=\"nofollow\">Django</a> application which extends the <a href=\"http://docs.djangoproject.com/en/1.1/ref/contrib/admin/\" rel=\"nofollow\">Django Admin</a>\nto allow the easy creation of additional views for Model classes and\ninstances.  dingo also allows you to customize the Admin of third\nparty applications, without subclassing or modifying the original\nsource tree.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Easily create new views for your Model Admin, either at the Model or\nobject level.</li>\n<li>Inject customizations into the admin declaration of a third\nparty application without modifying the original code base.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use dingo, ensure that it\u2019s on the Python path, and add it to your\n<tt>INSTALLED_APPS</tt> setting in <tt>settings.py</tt>.  Note that dingo <em>must</em>\nbe installed <em>before</em> <tt>django.contrib.admin</tt>, as it replaces the\ndefault <tt>AdminSite</tt> with one which will instrument the\n<tt>ModelAdmin</tt> classes registered.</p>\n<p>dingo requires Django 1.2 or later.</p>\n<div id=\"models-vs-objects\">\n<h3>Models vs. Objects</h3>\n<p>dingo can be used to register views for Models or Objects.  Views\nregistered for Models are not specific to any instance of the model;\nthey can be thought of as similar to Django admin actions with an\n[potentially] empty queryset.  Instance views operate on single model\ninstances; you can think of them as similar to admin actions that\noperate on a single object instead of a queryset.</p>\n<p>dingo views differ from <a href=\"http://docs.djangoproject.com/en/1.1/ref/contrib/admin/actions/#ref-contrib-admin-actions\" rel=\"nofollow\">admin actions</a> in a couple of subtle ways.\nThe most important difference is that they may be injected into third\nparty applications wihthout sub-classing or modifying the application\ncode.  dingo views also have a different user interface by default.\ndingo includes replacement admin templates which show dingo views as\nbuttons in the upper right hand area of the change list and change\nform views.</p>\n</div>\n<div id=\"adding-views\">\n<h3>Adding Views</h3>\n<p>If you want to use dingo to add model or object views to your Model\u2019s\nadmin, you can define them either as functions or as methods on the\nModelAdmin.</p>\n<p>For example, to define the view as a function:</p>\n<pre>import dingo\nimport dingo_test.models\n\n@dingo.object_view(dingo_test.models.RstDocument)\n@dingo.short_description(\"Render\")\ndef render(model_admin, request, object_id):\n\n    from django.shortcuts import redirect\n    document = dingo_test.mdoels.RstDocument.objects.get(id=object_id)\n\n    return Response()\n</pre>\n<p>The same view may also be a method on the ModelAdmin:</p>\n<pre>class RstDocumentAdmin(ModelAdmin):\n\n    @dingo.object_view(dingo_test.models.RstDocument)\n    @dingo.short_description(\"Render\")\n    def render(self, request, object_id):\n        pass\n</pre>\n<p>Note that the use of the <tt>short_description</tt> decorator defines the\nlabel used in the admin user interface, and is optional in this case.\nIf no description is provided, dingo will format the function or\nmethod name, similar to how Django formats default verbose names for\nmodels.</p>\n</div>\n<div id=\"adding-views-to-third-party-applications\">\n<h3>Adding Views to Third Party Applications</h3>\n<p>So long as dingo is listed in <tt>INSTALLED_APPS</tt> before\n<tt>django.contrib.admin</tt>, the function-based example above will work\nas desired.  Note that the code needs to be imported to ensure that\nregistration occurs properly.</p>\n</div>\n</div>\n<div id=\"missing-features-bugs\">\n<h2>Missing Features / Bugs</h2>\n<ul>\n<li>Model views are significantly less developed than Instance views.</li>\n<li>Different actions for Models in different AdminSites are not\ncurrently supported.  To accomodate this, a site-local action\nregistry will need to be used.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 788970, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "071e258c61ec0bc588710d68d8844655", "sha256": "eecb321cbc695d10f8a1b444d80a049050a487daca3d0c3f4c974cd036616e27"}, "downloads": -1, "filename": "dingo-0.1.tar.gz", "has_sig": false, "md5_digest": "071e258c61ec0bc588710d68d8844655", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5034, "upload_time": "2010-04-19T05:32:53", "upload_time_iso_8601": "2010-04-19T05:32:53.324363Z", "url": "https://files.pythonhosted.org/packages/9f/f5/5ec1589b0f1c927a2df80dcc90d32f0bb6fe00ef1f407ddae6f637e12b47/dingo-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "45c5fb227ca63ced7a575f7956b5c01b", "sha256": "e630260c23a508d23ab7a15656ae809f2e0de786446a7ce3efebc823af95d803"}, "downloads": -1, "filename": "dingo-0.1.1.tar.gz", "has_sig": false, "md5_digest": "45c5fb227ca63ced7a575f7956b5c01b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7399, "upload_time": "2010-04-19T06:06:46", "upload_time_iso_8601": "2010-04-19T06:06:46.347111Z", "url": "https://files.pythonhosted.org/packages/b3/3c/1bef9e6a6230568c614e2c6209ce08976a3c1dac9b4b85435e371283369b/dingo-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "92d153b29eb0202d601d6f344ccbd23e", "sha256": "2aee20eb53661a48fc665efda28711242e557931626cd553dbd37596a3a2324b"}, "downloads": -1, "filename": "dingo-0.2.tar.gz", "has_sig": false, "md5_digest": "92d153b29eb0202d601d6f344ccbd23e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6973, "upload_time": "2010-05-06T23:12:25", "upload_time_iso_8601": "2010-05-06T23:12:25.865451Z", "url": "https://files.pythonhosted.org/packages/14/15/3e0ce61e884c370f461bcc34cfcbad96d849793a14a8b8f9ab64d8448fde/dingo-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3245e54248ff446103bc376d0d5076a4", "sha256": "cade157deabb3d125e730ab60295b4cc47a8852985cce826893484679de59bc5"}, "downloads": -1, "filename": "dingo-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3245e54248ff446103bc376d0d5076a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7161, "upload_time": "2010-06-13T17:41:26", "upload_time_iso_8601": "2010-06-13T17:41:26.876834Z", "url": "https://files.pythonhosted.org/packages/27/b7/9a34889aaf5fdef2638acd03b95a419358205118dd07dd599c68624311a8/dingo-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3245e54248ff446103bc376d0d5076a4", "sha256": "cade157deabb3d125e730ab60295b4cc47a8852985cce826893484679de59bc5"}, "downloads": -1, "filename": "dingo-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3245e54248ff446103bc376d0d5076a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7161, "upload_time": "2010-06-13T17:41:26", "upload_time_iso_8601": "2010-06-13T17:41:26.876834Z", "url": "https://files.pythonhosted.org/packages/27/b7/9a34889aaf5fdef2638acd03b95a419358205118dd07dd599c68624311a8/dingo-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:20 2020"}