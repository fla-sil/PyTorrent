{"info": {"author": "Simon Kaeser", "author_email": "skaeser@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Introduction\n============\n\nThe ``horae.core`` package provides several core functionality used by the\n``horae.*`` packages which there are:\n\n* Formatters for:\n  \n  * Prices\n  * Sizes\n  * Dates and times\n  * Hours\n  \n* Global configuration defining:\n  \n  * Title and description of the application\n  * Work days\n  * The currency\n  \n* Generic interfaces for objects having a textual or integer ID\n* Utility managing integer IDs\n* Utility creating textual IDs\n* Base implementation of a container holding objects having a textual\n  or integer ID\n\nUsage\n=====\n\nFormatters\n----------\n\nPrices\n''''''\n\nThe price formatter formats the given value using the current locale and adds\nthe configured currency. The formatter is registered as an adapter implementing\n``horae.core.interfaces.ICurrencyFormatter`` and adapting any ``context`` and\nthe ``request``. The following example shows the usage of the formatter in a\nview::\n\n    import grok\n    from zope.component import getMultiAdapter\n    \n    from horae.core import interfaces\n    \n    class SampleView(grok.View):\n        \n        def currency_formatted_price(self):\n            formatter = getMultiAdapter((self.context, self.request),\n                                        interface=interfaces.ICurrencyFormatter)\n            return formatter.format(1050.25)\n\nSizes\n'''''\n\nThe size formatter formats the given value (in bytes) as a number appending the\nappropriate unit (B, KB, MB, GB). The formatter is registered as an adapter\nimplementing ``horae.core.interfaces.ISizeFormatter`` and adapting the ``request``.\nThe following example shows the usage of the formatter in a view::\n\n    class SampleView(grok.View):\n        \n        def size_formatted_price(self):\n            return interfaces.ISizeFormatter(self.request).format(2048)\n\nDates and times\n'''''''''''''''\n\nThe date and time formatters are simple functions part of the ``horae.core.utils``\nmodule. There are two functions available:\n\n``formatDateTime(value, request, format=('dateTime', 'short'), html=True)``\n  Formats the datetime ``value`` using the locale provided by the ``request``\n  and the ``format`` provided. HTML output may be disabled by the ``html``\n  argument.\n``formatDateTimeRange(start, end, request, format=('dateTime', 'short'), html=True)``\n  Formats the datetime range (``start``, ``end``) using the locale provided\n  by the ``request`` and the ``format`` provided. HTML output may be disabled\n  by the ``html`` argument.\n\nHours\n'''''\n\nAs with the date and time formatters the hours formatter is a simple function of the\n``horae.core.utils`` module:\n\n``formatHours(value, request)``\n  Formats the ``value`` as a decimal using the locale provided by the ``request``.\n\nIDs and base container implementation\n-------------------------------------\n\n``horae.core`` defines two interfaces for objects having an ID:\n\n``horae.core.interfaces.ITextId``\n  An object having a text ID\n``horae.core.interfaces.IIntId``\n  An object having an integer ID\n\nText IDs may be generated by the text ID manager which is a global utility implementing\n``horae.core.interfaces.ITextIdManager``. The utility has two methods:\n\n``normalize(name)``\n  Returns a normalized string usable in URLs based on the ``name`` provided\n``idFromName(container, name)``\n  Returns a valid ID for a new object to be added to the ``container`` from the ``name``\n  provided\n\nInteger IDs are managed by the int ID manager which is a local utility implementing\n``horae.core.interfaces.IIntIdManager``. The utility provides a method to get the next\nID for a given key:\n\n``nextId(self, key)``\n  Returns the next ID for the given ``key``\n\nContainer\n'''''''''\n\nThe base container implementation resides in the ``horae.core.container`` module and\nconsists of a ``Container`` class implementing ``horae.core.interfaces.IContainer``.\nThe container is mainly there to simplify the process of adding new objects implementing\none of the aforementioned ID interfaces. The ``add_object(obj)`` method checks if the\ngiven object has an attribute named ``id`` and whether it is ``None``. If no ID is available\none is generated. If the object implements ``horae.core.interfaces.ITextId`` the ID is\ngenerated by using the text ID manager otherwise by the int ID manager. A simple usage\nwould look like this::\n\n    import grok\n    \n    from horae.core import interfaces, container\n    \n    class SampleContainer(container):\n        \n        def id_key(self):\n            return 'sample_key'\n    \n    class SampleIntIdContent(grok.Model):\n        grok.implements(interfaces.IIntId)\n    \n    class SampleTextIdContent(grok.Model):\n        grok.implements(interfaces.ITextId)\n\nAn example usage of the above sample classes would look like this::\n\n    >>> container = SampleContainer()\n    >>> intcontent1 = SampleIntIdContent()\n    >>> container.add_object(intcontent1)\n    1\n    >>> intcontent1.id\n    1\n    >>> intcontent2 = SampleIntIdContent()\n    >>> container.add_object(intcontent2)\n    2\n    >>> intcontent2.id\n    2\n    >>> textcontent1 = SampleTextContent()\n    >>> textcontent1.name = u'Test name of the content'\n    >>> container.add_object(textcontent1)\n    'test_name_of_the_content'\n    >>> textcontent1.id\n    'test_name_of_the_content'\n    >>> textcontent2 = SampleTextContent()\n    >>> textcontent2.name = u'Test name of the content'\n    >>> container.add_object(textcontent2)\n    'test_name_of_the_content-2'\n    >>> textcontent2.id\n    'test_name_of_the_content-2'\n\nDependencies\n============\n\nHorae\n-----\n\n* `horae.cache <http://pypi.python.org/pypi/horae.cache>`_\n\nThird party\n-----------\n\n* `grok <http://pypi.python.org/pypi/grok>`_\n* `zope.app.locales <http://pypi.python.org/pypi/zope.app.locales>`_\n* `z3c.taskqueue <http://pypi.python.org/pypi/z3c.taskqueue>`_\n\nChangelog\n=========\n\n1.0a1 (2012-01-16)\n------------------\n\n* Initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "horae.core", "package_url": "https://pypi.org/project/horae.core/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/horae.core/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/horae.core/1.0a1/", "requires_dist": null, "requires_python": null, "summary": "Basic functionality for Horae", "version": "1.0a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>The <tt>horae.core</tt> package provides several core functionality used by the\n<tt>horae.*</tt> packages which there are:</p>\n<ul>\n<li>Formatters for:<ul>\n<li>Prices</li>\n<li>Sizes</li>\n<li>Dates and times</li>\n<li>Hours</li>\n</ul>\n</li>\n<li>Global configuration defining:<ul>\n<li>Title and description of the application</li>\n<li>Work days</li>\n<li>The currency</li>\n</ul>\n</li>\n<li>Generic interfaces for objects having a textual or integer ID</li>\n<li>Utility managing integer IDs</li>\n<li>Utility creating textual IDs</li>\n<li>Base implementation of a container holding objects having a textual\nor integer ID</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"formatters\">\n<h3>Formatters</h3>\n<div id=\"prices\">\n<h4>Prices</h4>\n<p>The price formatter formats the given value using the current locale and adds\nthe configured currency. The formatter is registered as an adapter implementing\n<tt>horae.core.interfaces.ICurrencyFormatter</tt> and adapting any <tt>context</tt> and\nthe <tt>request</tt>. The following example shows the usage of the formatter in a\nview:</p>\n<pre>import grok\nfrom zope.component import getMultiAdapter\n\nfrom horae.core import interfaces\n\nclass SampleView(grok.View):\n\n    def currency_formatted_price(self):\n        formatter = getMultiAdapter((self.context, self.request),\n                                    interface=interfaces.ICurrencyFormatter)\n        return formatter.format(1050.25)\n</pre>\n</div>\n<div id=\"sizes\">\n<h4>Sizes</h4>\n<p>The size formatter formats the given value (in bytes) as a number appending the\nappropriate unit (B, KB, MB, GB). The formatter is registered as an adapter\nimplementing <tt>horae.core.interfaces.ISizeFormatter</tt> and adapting the <tt>request</tt>.\nThe following example shows the usage of the formatter in a view:</p>\n<pre>class SampleView(grok.View):\n\n    def size_formatted_price(self):\n        return interfaces.ISizeFormatter(self.request).format(2048)\n</pre>\n</div>\n<div id=\"dates-and-times\">\n<h4>Dates and times</h4>\n<p>The date and time formatters are simple functions part of the <tt>horae.core.utils</tt>\nmodule. There are two functions available:</p>\n<dl>\n<dt><tt>formatDateTime(value, request, <span class=\"pre\">format=('dateTime',</span> <span class=\"pre\">'short'),</span> html=True)</tt></dt>\n<dd>Formats the datetime <tt>value</tt> using the locale provided by the <tt>request</tt>\nand the <tt>format</tt> provided. HTML output may be disabled by the <tt>html</tt>\nargument.</dd>\n<dt><tt>formatDateTimeRange(start, end, request, <span class=\"pre\">format=('dateTime',</span> <span class=\"pre\">'short'),</span> html=True)</tt></dt>\n<dd>Formats the datetime range (<tt>start</tt>, <tt>end</tt>) using the locale provided\nby the <tt>request</tt> and the <tt>format</tt> provided. HTML output may be disabled\nby the <tt>html</tt> argument.</dd>\n</dl>\n</div>\n<div id=\"hours\">\n<h4>Hours</h4>\n<p>As with the date and time formatters the hours formatter is a simple function of the\n<tt>horae.core.utils</tt> module:</p>\n<dl>\n<dt><tt>formatHours(value, request)</tt></dt>\n<dd>Formats the <tt>value</tt> as a decimal using the locale provided by the <tt>request</tt>.</dd>\n</dl>\n</div>\n</div>\n<div id=\"ids-and-base-container-implementation\">\n<h3>IDs and base container implementation</h3>\n<p><tt>horae.core</tt> defines two interfaces for objects having an ID:</p>\n<dl>\n<dt><tt>horae.core.interfaces.ITextId</tt></dt>\n<dd>An object having a text ID</dd>\n<dt><tt>horae.core.interfaces.IIntId</tt></dt>\n<dd>An object having an integer ID</dd>\n</dl>\n<p>Text IDs may be generated by the text ID manager which is a global utility implementing\n<tt>horae.core.interfaces.ITextIdManager</tt>. The utility has two methods:</p>\n<dl>\n<dt><tt>normalize(name)</tt></dt>\n<dd>Returns a normalized string usable in URLs based on the <tt>name</tt> provided</dd>\n<dt><tt>idFromName(container, name)</tt></dt>\n<dd>Returns a valid ID for a new object to be added to the <tt>container</tt> from the <tt>name</tt>\nprovided</dd>\n</dl>\n<p>Integer IDs are managed by the int ID manager which is a local utility implementing\n<tt>horae.core.interfaces.IIntIdManager</tt>. The utility provides a method to get the next\nID for a given key:</p>\n<dl>\n<dt><tt>nextId(self, key)</tt></dt>\n<dd>Returns the next ID for the given <tt>key</tt></dd>\n</dl>\n<div id=\"container\">\n<h4>Container</h4>\n<p>The base container implementation resides in the <tt>horae.core.container</tt> module and\nconsists of a <tt>Container</tt> class implementing <tt>horae.core.interfaces.IContainer</tt>.\nThe container is mainly there to simplify the process of adding new objects implementing\none of the aforementioned ID interfaces. The <tt>add_object(obj)</tt> method checks if the\ngiven object has an attribute named <tt>id</tt> and whether it is <tt>None</tt>. If no ID is available\none is generated. If the object implements <tt>horae.core.interfaces.ITextId</tt> the ID is\ngenerated by using the text ID manager otherwise by the int ID manager. A simple usage\nwould look like this:</p>\n<pre>import grok\n\nfrom horae.core import interfaces, container\n\nclass SampleContainer(container):\n\n    def id_key(self):\n        return 'sample_key'\n\nclass SampleIntIdContent(grok.Model):\n    grok.implements(interfaces.IIntId)\n\nclass SampleTextIdContent(grok.Model):\n    grok.implements(interfaces.ITextId)\n</pre>\n<p>An example usage of the above sample classes would look like this:</p>\n<pre>&gt;&gt;&gt; container = SampleContainer()\n&gt;&gt;&gt; intcontent1 = SampleIntIdContent()\n&gt;&gt;&gt; container.add_object(intcontent1)\n1\n&gt;&gt;&gt; intcontent1.id\n1\n&gt;&gt;&gt; intcontent2 = SampleIntIdContent()\n&gt;&gt;&gt; container.add_object(intcontent2)\n2\n&gt;&gt;&gt; intcontent2.id\n2\n&gt;&gt;&gt; textcontent1 = SampleTextContent()\n&gt;&gt;&gt; textcontent1.name = u'Test name of the content'\n&gt;&gt;&gt; container.add_object(textcontent1)\n'test_name_of_the_content'\n&gt;&gt;&gt; textcontent1.id\n'test_name_of_the_content'\n&gt;&gt;&gt; textcontent2 = SampleTextContent()\n&gt;&gt;&gt; textcontent2.name = u'Test name of the content'\n&gt;&gt;&gt; container.add_object(textcontent2)\n'test_name_of_the_content-2'\n&gt;&gt;&gt; textcontent2.id\n'test_name_of_the_content-2'\n</pre>\n</div>\n</div>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<div id=\"horae\">\n<h3>Horae</h3>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/horae.cache\" rel=\"nofollow\">horae.cache</a></li>\n</ul>\n</div>\n<div id=\"third-party\">\n<h3>Third party</h3>\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/grok\" rel=\"nofollow\">grok</a></li>\n<li><a href=\"http://pypi.python.org/pypi/zope.app.locales\" rel=\"nofollow\">zope.app.locales</a></li>\n<li><a href=\"http://pypi.python.org/pypi/z3c.taskqueue\" rel=\"nofollow\">z3c.taskqueue</a></li>\n</ul>\n</div>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<h2 id=\"a1-2012-01-16\"><span class=\"section-subtitle\">1.0a1 (2012-01-16)</span></h2>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 792988, "releases": {"1.0a1": [{"comment_text": "", "digests": {"md5": "8ed3c28cb27f9fc9d624c73f418e7a5c", "sha256": "1f61013914110b9546b32a41d892233b2ef7f442f60de26976d557c0a1265299"}, "downloads": -1, "filename": "horae.core-1.0a1.tar.gz", "has_sig": false, "md5_digest": "8ed3c28cb27f9fc9d624c73f418e7a5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11777, "upload_time": "2012-01-16T12:02:52", "upload_time_iso_8601": "2012-01-16T12:02:52.684345Z", "url": "https://files.pythonhosted.org/packages/5e/c8/92d05d584727eb84fc5c98ea92753006db39893ce68db4dbf70fb2cd33a1/horae.core-1.0a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ed3c28cb27f9fc9d624c73f418e7a5c", "sha256": "1f61013914110b9546b32a41d892233b2ef7f442f60de26976d557c0a1265299"}, "downloads": -1, "filename": "horae.core-1.0a1.tar.gz", "has_sig": false, "md5_digest": "8ed3c28cb27f9fc9d624c73f418e7a5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11777, "upload_time": "2012-01-16T12:02:52", "upload_time_iso_8601": "2012-01-16T12:02:52.684345Z", "url": "https://files.pythonhosted.org/packages/5e/c8/92d05d584727eb84fc5c98ea92753006db39893ce68db4dbf70fb2cd33a1/horae.core-1.0a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:37 2020"}