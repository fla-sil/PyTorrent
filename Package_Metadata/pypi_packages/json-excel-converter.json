{"info": {"author": "Mirek Simek", "author_email": "miroslav.simek@vscht.cz", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# JSON to excel converter\n\n[![](https://img.shields.io/github/license/oarepo/json-excel-converter.svg)](https://github.com/oarepo/json-excel-converter/blob/master/LICENSE)\n[![](https://img.shields.io/travis/oarepo/json-excel-converter.svg)](https://travis-ci.org/oarepo/json-excel-converter)\n[![](https://img.shields.io/coveralls/oarepo/json-excel-converter.svg)](https://coveralls.io/r/oarepo/json-excel-converter)\n[![](https://img.shields.io/pypi/v/json-excel-converter.svg)](https://pypi.org/pypi/json-excel-converter)\n\nA package that converts json to CSV, excel or other table formats\n\n<!--TOC-->\n\n- [JSON to excel converter](#json-to-excel-converter)\n  - [Sample output](#sample-output)\n    - [Simple json](#simple-json)\n    - [Nested json](#nested-json)\n    - [json with array property](#json-with-array-property)\n  - [Installation](#installation)\n  - [Usage](#usage)\n    - [Simple usage](#simple-usage)\n    - [Streaming usage with restarts](#streaming-usage-with-restarts)\n    - [Arrays](#arrays)\n    - [XLSX Formatting](#xlsx-formatting)\n      - [Cell format](#cell-format)\n      - [Column widths](#column-widths)\n      - [Row heights](#row-heights)\n      - [Urls](#urls)\n      - [Custom cell rendering](#custom-cell-rendering)\n\n<!--TOC-->\n\n## Sample output\n\n![](./docs/sample.png)\n\n### Simple json\n\n```json\n[\n  {\n    \"col1\": \"val1\",\n    \"col2\": \"val2\" \n  }\n]\n```\n\nthe generated CSV/excel is:\n\n```\ncol1          col2\n==================\nval1          val2\n```\n\n### Nested json\n\n```json\n[\n  {\n    \"col1\": \"val1\",\n    \"col2\": {\n      \"col21\": \"val21\",\n      \"col22\": \"val22\"\n    }\n  }\n]\n```\n\nthe generated CSV/excel is (in excel, col2 spans two cells horizontally):\n\n```\ncol1          col2\n              col21         col22\n=================================\nval1          val21         val22\n```\n\n### json with array property\n\n```json\n[\n  {\n    \"col1\": \"val1\",\n    \"col2\": [\n      {\n        \"col21\": \"val21\"\n      },\n      {\n        \"col21\": \"val22\"\n      }\n    ]\n  }\n]\n```\n\nthe generated CSV/excel is (in excel, col2 spans two cells horizontally):\n\n```\ncol1          col2         \n              col21         col21\n=================================\nval1          val21         val22\n```\n\n\n## Installation\n\n```bash\npip install json-excel-converter[extra]\n```\n\nwhere extra is:\n\n * ``xlsxwriter`` to use the xlsxwriter\n\n## Usage\n\n### Simple usage\n\n```python\n\nfrom json_excel_converter import Converter \nfrom json_excel_converter.xlsx import Writer\n\ndata = [\n    {'a': [1], 'b': 'hello'},\n    {'a': [1, 2, 3], 'b': 'world'}\n]\n\nconv = Converter()\nconv.convert(data, Writer(file='/tmp/test.xlsx'))\n```\n\n### Streaming usage with restarts\n\n```python\n\nfrom json_excel_converter import Converter, LinearizationError \nfrom json_excel_converter.csv import Writer\n\nconv = Converter()\nwriter = Writer(file='/tmp/test.csv')\nwhile True:\n    try:\n        data = get_streaming_data()     # custom function to get iterator of data\n        conv.convert_streaming(data, writer)\n        break\n    except LinearizationError:\n        pass\n```\n\n### Arrays\n\nWhen the first row is processed, the library guesses the columns layout. In case of arrays,\na column (or more columns if the array contains json objects) is created for each\nof the items in the array, as shown in the example above.\n\nOn subsequent rows the array might contain more items. The library reacts by adjusting \nthe number of columns in the layout and raising ``LinearizationError`` as previous rows might\nbe already output.\n\n``Converter.convert_streaming`` just raises this exception - it is the responsibility of caller\nto take the right action.\n\n``Converter.convert`` captures this error and restarts the processing. In case of CSV\nthis means truncating the output file to 0 bytes and processing the data again. XLSX writer\ncaches all the data before writing them to excel so the restart just means discarding the cache.\n\nIf you know the size of the array in advance, you should pass it in options. Then no\nprocessing restarts are required and ``LinearizationError`` is not raised.\n\n ```python\n\nfrom json_excel_converter import Converter, Options\nfrom json_excel_converter.xlsx import Writer\n\ndata = [\n    {'a': [1]},\n    {'a': [1, 2, 3]}\n]\noptions = Options()\noptions['a'].cardinality = 3\n\nconv = Converter(options=options)\nwriter = Writer(file='/tmp/test.xlsx')\nconv.convert(data, writer)\n# or\nconv.convert_streaming(data, writer)    # no exception occurs here\n```\n\n### XLSX Formatting\n\n#### Cell format\n\nXLSX writer enables you to format the header and data by passing an array of header_formatters or\ndata_formatters. Take these from ``json_excel_converter.xlsx.formats`` package or create your own.\n\n```python\nfrom json_excel_converter import Converter\n\nfrom json_excel_converter.xlsx import Writer\nfrom json_excel_converter.xlsx.formats import LastUnderlined, Bold, \\\n    Centered, Format\n\ndata = [\n    {'a': 'Hello'},\n    {'a': 'World'}\n]\n\nw = Writer('/tmp/test3.xlsx',\n           header_formats=(\n               Centered, Bold, LastUnderlined,\n               Format({\n                   'font_color': 'red'\n               })),\n           data_formats=(\n               Format({\n                   'font_color': 'green'\n               }),)\n           )\n\nconv = Converter()\nconv.convert(data, w)\n```\n\nSee https://xlsxwriter.readthedocs.io/format.html for details on formats in xlsxwriter\n\n#### Column widths\n\nPass the required column widths to writer:\n\n```python\nw = Writer('/tmp/test3.xlsx', column_widths={\n    'a': 20\n})\n```\n\nWidth of nested data can be specified as well: \n\n```python\ndata = [\n    {'a': {'b': 1, 'c': 2}}\n]\n\nw = Writer('/tmp/test3.xlsx', column_widths={\n    'a.b': 20,\n    'a.c': 30,\n})\n```\n\n![](./docs/test3.png)\n\nTo set the default column width, pass it as ``DEFAULT_COLUMN_WIDTH`` property:\n\n```python\nw = Writer('/tmp/test3.xlsx', column_widths={\n    DEFAULT_COLUMN_WIDTH: 20\n})\n```\n\n#### Row heights\n\nRow heights can be specified via the ``row_heights`` writer option:\n\n```python\nw = Writer('/tmp/test3.xlsx', row_heights={\n    DEFAULT_ROW_HEIGHT: 20,     # a bit taller rows\n    1: 40                       # extra tall header\n})\n```\n#### Urls\n\n![](./docs/test4.png)\n\nTo render url, pass a function that gets data of a row and returns url to options\n\n ```python\ndata = [\n    {'a': 'https://google.com'},\n]\n\noptions = Options()\noptions['a'].url = lambda data: data['a']\n\nconv = Converter(options)\nconv.convert(data, w)\n```\n**Note:** this will only be rendered in XLSX output, CSV output will silently\nignore the link.\n\n#### Custom cell rendering\n\nOverride the ``write_cell`` method. The method receives ``cell_data`` \n(instance of ``json_excel_converter.Value``) and ``data`` (the original\ndata being written to this row). Note that this method is used both\nfor writing header and rows - for header the ``data`` parameter is None. \n\n```python\nclass UrlWriter(Writer):\n    def write_cell(self, row, col, cell_data, cell_format, data):\n        if cell_data.path == 'a' and data:\n            self.sheet.write_url(row, col,\n                                 'https://test.org/' + data['b'],\n                                 string=cell_data.value)\n        else:\n            super().write_cell(row, col, cell_data, cell_format, data)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/oarepo/json-excel-converter", "keywords": "json,excel,csv,xlsxwriter", "license": "", "maintainer": "", "maintainer_email": "", "name": "json-excel-converter", "package_url": "https://pypi.org/project/json-excel-converter/", "platform": "", "project_url": "https://pypi.org/project/json-excel-converter/", "project_urls": {"Homepage": "https://github.com/oarepo/json-excel-converter", "Repository": "https://github.com/oarepo/json-excel-converter"}, "release_url": "https://pypi.org/project/json-excel-converter/1.3.0/", "requires_dist": ["xlsxwriter (>=1.2,<2.0); extra == \"xlsxwriter\""], "requires_python": ">=3.6,<4.0", "summary": "JSON to excel convertor", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JSON to excel converter</h1>\n<p><a href=\"https://github.com/oarepo/json-excel-converter/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/759ad45108a0d9578802b6c045b2922260f61644/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6f617265706f2f6a736f6e2d657863656c2d636f6e7665727465722e737667\"></a>\n<a href=\"https://travis-ci.org/oarepo/json-excel-converter\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22cd03965bcd87eaf484a3669f1ea658289c01dc/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6f617265706f2f6a736f6e2d657863656c2d636f6e7665727465722e737667\"></a>\n<a href=\"https://coveralls.io/r/oarepo/json-excel-converter\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5eb52d6883c094dc76b7890fd0d193e53c80da6b/68747470733a2f2f696d672e736869656c64732e696f2f636f766572616c6c732f6f617265706f2f6a736f6e2d657863656c2d636f6e7665727465722e737667\"></a>\n<a href=\"https://pypi.org/pypi/json-excel-converter\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23a1ba7b16937417d058a79262a6e832b830bfd6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a736f6e2d657863656c2d636f6e7665727465722e737667\"></a></p>\n<p>A package that converts json to CSV, excel or other table formats</p>\n\n<ul>\n<li><a href=\"#json-to-excel-converter\" rel=\"nofollow\">JSON to excel converter</a>\n<ul>\n<li><a href=\"#sample-output\" rel=\"nofollow\">Sample output</a>\n<ul>\n<li><a href=\"#simple-json\" rel=\"nofollow\">Simple json</a></li>\n<li><a href=\"#nested-json\" rel=\"nofollow\">Nested json</a></li>\n<li><a href=\"#json-with-array-property\" rel=\"nofollow\">json with array property</a></li>\n</ul>\n</li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#simple-usage\" rel=\"nofollow\">Simple usage</a></li>\n<li><a href=\"#streaming-usage-with-restarts\" rel=\"nofollow\">Streaming usage with restarts</a></li>\n<li><a href=\"#arrays\" rel=\"nofollow\">Arrays</a></li>\n<li><a href=\"#xlsx-formatting\" rel=\"nofollow\">XLSX Formatting</a>\n<ul>\n<li><a href=\"#cell-format\" rel=\"nofollow\">Cell format</a></li>\n<li><a href=\"#column-widths\" rel=\"nofollow\">Column widths</a></li>\n<li><a href=\"#row-heights\" rel=\"nofollow\">Row heights</a></li>\n<li><a href=\"#urls\" rel=\"nofollow\">Urls</a></li>\n<li><a href=\"#custom-cell-rendering\" rel=\"nofollow\">Custom cell rendering</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>Sample output</h2>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af082d2afda85f411d7ce8ed41bfc7769af470be/2e2f646f63732f73616d706c652e706e67\"></p>\n<h3>Simple json</h3>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"col1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"val1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"col2\"</span><span class=\"p\">:</span> <span class=\"s2\">\"val2\"</span> \n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>the generated CSV/excel is:</p>\n<pre><code>col1          col2\n==================\nval1          val2\n</code></pre>\n<h3>Nested json</h3>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"col1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"val1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"col2\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"col21\"</span><span class=\"p\">:</span> <span class=\"s2\">\"val21\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"col22\"</span><span class=\"p\">:</span> <span class=\"s2\">\"val22\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>the generated CSV/excel is (in excel, col2 spans two cells horizontally):</p>\n<pre><code>col1          col2\n              col21         col22\n=================================\nval1          val21         val22\n</code></pre>\n<h3>json with array property</h3>\n<pre><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nt\">\"col1\"</span><span class=\"p\">:</span> <span class=\"s2\">\"val1\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"col2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"col21\"</span><span class=\"p\">:</span> <span class=\"s2\">\"val21\"</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nt\">\"col21\"</span><span class=\"p\">:</span> <span class=\"s2\">\"val22\"</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>the generated CSV/excel is (in excel, col2 spans two cells horizontally):</p>\n<pre><code>col1          col2         \n              col21         col21\n=================================\nval1          val21         val22\n</code></pre>\n<h2>Installation</h2>\n<pre>pip install json-excel-converter<span class=\"o\">[</span>extra<span class=\"o\">]</span>\n</pre>\n<p>where extra is:</p>\n<ul>\n<li><code>xlsxwriter</code> to use the xlsxwriter</li>\n</ul>\n<h2>Usage</h2>\n<h3>Simple usage</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter</span> <span class=\"kn\">import</span> <span class=\"n\">Converter</span> \n<span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter.xlsx</span> <span class=\"kn\">import</span> <span class=\"n\">Writer</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'hello'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">Converter</span><span class=\"p\">()</span>\n<span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/test.xlsx'</span><span class=\"p\">))</span>\n</pre>\n<h3>Streaming usage with restarts</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter</span> <span class=\"kn\">import</span> <span class=\"n\">Converter</span><span class=\"p\">,</span> <span class=\"n\">LinearizationError</span> \n<span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter.csv</span> <span class=\"kn\">import</span> <span class=\"n\">Writer</span>\n\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">Converter</span><span class=\"p\">()</span>\n<span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/test.csv'</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">get_streaming_data</span><span class=\"p\">()</span>     <span class=\"c1\"># custom function to get iterator of data</span>\n        <span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">convert_streaming</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"p\">)</span>\n        <span class=\"k\">break</span>\n    <span class=\"k\">except</span> <span class=\"n\">LinearizationError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n</pre>\n<h3>Arrays</h3>\n<p>When the first row is processed, the library guesses the columns layout. In case of arrays,\na column (or more columns if the array contains json objects) is created for each\nof the items in the array, as shown in the example above.</p>\n<p>On subsequent rows the array might contain more items. The library reacts by adjusting\nthe number of columns in the layout and raising <code>LinearizationError</code> as previous rows might\nbe already output.</p>\n<p><code>Converter.convert_streaming</code> just raises this exception - it is the responsibility of caller\nto take the right action.</p>\n<p><code>Converter.convert</code> captures this error and restarts the processing. In case of CSV\nthis means truncating the output file to 0 bytes and processing the data again. XLSX writer\ncaches all the data before writing them to excel so the restart just means discarding the cache.</p>\n<p>If you know the size of the array in advance, you should pass it in options. Then no\nprocessing restarts are required and <code>LinearizationError</code> is not raised.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter</span> <span class=\"kn\">import</span> <span class=\"n\">Converter</span><span class=\"p\">,</span> <span class=\"n\">Options</span>\n<span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter.xlsx</span> <span class=\"kn\">import</span> <span class=\"n\">Writer</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]},</span>\n   <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">()</span>\n<span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cardinality</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">Converter</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">options</span><span class=\"p\">)</span>\n<span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/test.xlsx'</span><span class=\"p\">)</span>\n<span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"p\">)</span>\n<span class=\"c1\"># or</span>\n<span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">convert_streaming</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">writer</span><span class=\"p\">)</span>    <span class=\"c1\"># no exception occurs here</span>\n</pre>\n<h3>XLSX Formatting</h3>\n<h4>Cell format</h4>\n<p>XLSX writer enables you to format the header and data by passing an array of header_formatters or\ndata_formatters. Take these from <code>json_excel_converter.xlsx.formats</code> package or create your own.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter</span> <span class=\"kn\">import</span> <span class=\"n\">Converter</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter.xlsx</span> <span class=\"kn\">import</span> <span class=\"n\">Writer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">json_excel_converter.xlsx.formats</span> <span class=\"kn\">import</span> <span class=\"n\">LastUnderlined</span><span class=\"p\">,</span> <span class=\"n\">Bold</span><span class=\"p\">,</span> \\\n    <span class=\"n\">Centered</span><span class=\"p\">,</span> <span class=\"n\">Format</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'Hello'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'World'</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/test3.xlsx'</span><span class=\"p\">,</span>\n           <span class=\"n\">header_formats</span><span class=\"o\">=</span><span class=\"p\">(</span>\n               <span class=\"n\">Centered</span><span class=\"p\">,</span> <span class=\"n\">Bold</span><span class=\"p\">,</span> <span class=\"n\">LastUnderlined</span><span class=\"p\">,</span>\n               <span class=\"n\">Format</span><span class=\"p\">({</span>\n                   <span class=\"s1\">'font_color'</span><span class=\"p\">:</span> <span class=\"s1\">'red'</span>\n               <span class=\"p\">})),</span>\n           <span class=\"n\">data_formats</span><span class=\"o\">=</span><span class=\"p\">(</span>\n               <span class=\"n\">Format</span><span class=\"p\">({</span>\n                   <span class=\"s1\">'font_color'</span><span class=\"p\">:</span> <span class=\"s1\">'green'</span>\n               <span class=\"p\">}),)</span>\n           <span class=\"p\">)</span>\n\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">Converter</span><span class=\"p\">()</span>\n<span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n</pre>\n<p>See <a href=\"https://xlsxwriter.readthedocs.io/format.html\" rel=\"nofollow\">https://xlsxwriter.readthedocs.io/format.html</a> for details on formats in xlsxwriter</p>\n<h4>Column widths</h4>\n<p>Pass the required column widths to writer:</p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/test3.xlsx'</span><span class=\"p\">,</span> <span class=\"n\">column_widths</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">20</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Width of nested data can be specified as well:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/test3.xlsx'</span><span class=\"p\">,</span> <span class=\"n\">column_widths</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'a.b'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"s1\">'a.c'</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b27d076100dbdef2423ff13fc6357b827f235fc2/2e2f646f63732f74657374332e706e67\"></p>\n<p>To set the default column width, pass it as <code>DEFAULT_COLUMN_WIDTH</code> property:</p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/test3.xlsx'</span><span class=\"p\">,</span> <span class=\"n\">column_widths</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"n\">DEFAULT_COLUMN_WIDTH</span><span class=\"p\">:</span> <span class=\"mi\">20</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Row heights</h4>\n<p>Row heights can be specified via the <code>row_heights</code> writer option:</p>\n<pre><span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">Writer</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/test3.xlsx'</span><span class=\"p\">,</span> <span class=\"n\">row_heights</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"n\">DEFAULT_ROW_HEIGHT</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>     <span class=\"c1\"># a bit taller rows</span>\n    <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">40</span>                       <span class=\"c1\"># extra tall header</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Urls</h4>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70ee0a9464631232147f4c97ee6c1d981606e239/2e2f646f63732f74657374342e706e67\"></p>\n<p>To render url, pass a function that gets data of a row and returns url to options</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"s1\">'https://google.com'</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">Options</span><span class=\"p\">()</span>\n<span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span>\n\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">Converter</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n<span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Note:</strong> this will only be rendered in XLSX output, CSV output will silently\nignore the link.</p>\n<h4>Custom cell rendering</h4>\n<p>Override the <code>write_cell</code> method. The method receives <code>cell_data</code>\n(instance of <code>json_excel_converter.Value</code>) and <code>data</code> (the original\ndata being written to this row). Note that this method is used both\nfor writing header and rows - for header the <code>data</code> parameter is None.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">UrlWriter</span><span class=\"p\">(</span><span class=\"n\">Writer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">write_cell</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">cell_data</span><span class=\"p\">,</span> <span class=\"n\">cell_format</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">cell_data</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">==</span> <span class=\"s1\">'a'</span> <span class=\"ow\">and</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"n\">write_url</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span>\n                                 <span class=\"s1\">'https://test.org/'</span> <span class=\"o\">+</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">],</span>\n                                 <span class=\"n\">string</span><span class=\"o\">=</span><span class=\"n\">cell_data</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">write_cell</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">cell_data</span><span class=\"p\">,</span> <span class=\"n\">cell_format</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7103671, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "101ab31570e7414e226d662487d1c359", "sha256": "05e4161927a736dc82143eeda15ce5dcdf1487d5b4e196e96dd442d029c265e5"}, "downloads": -1, "filename": "json_excel_converter-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "101ab31570e7414e226d662487d1c359", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 15464, "upload_time": "2020-03-01T08:35:30", "upload_time_iso_8601": "2020-03-01T08:35:30.252817Z", "url": "https://files.pythonhosted.org/packages/d7/cc/61a3be138f879f8e502fb3d880c2a495e4b39200b960ce24fa2f45f470fc/json_excel_converter-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84f443b395c43ad19e38010dec5c8a64", "sha256": "3fd4b302d3e3b9d723c8e6bfffeb11b3ed01674bf0eeb3f9fbc9b8ccc0a01281"}, "downloads": -1, "filename": "json_excel_converter-1.0.0.tar.gz", "has_sig": false, "md5_digest": "84f443b395c43ad19e38010dec5c8a64", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 15663, "upload_time": "2020-03-01T08:35:33", "upload_time_iso_8601": "2020-03-01T08:35:33.053608Z", "url": "https://files.pythonhosted.org/packages/ac/96/d29776f3b02da5ab3807bdf6d78bb9524215c58388797c1accc3b8eb95cc/json_excel_converter-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "9acec89911902ff1503cfb087b16c875", "sha256": "55129fbd456175184bbff29ee5a70900f27e31e068827a25e0139c6dccd0c41e"}, "downloads": -1, "filename": "json_excel_converter-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9acec89911902ff1503cfb087b16c875", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 15563, "upload_time": "2020-03-01T09:18:19", "upload_time_iso_8601": "2020-03-01T09:18:19.644713Z", "url": "https://files.pythonhosted.org/packages/9d/72/4b3dea40e83184a570ea0c4f0ecd6b030dd1b6806427d0461896e4e670fd/json_excel_converter-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "094fbfa5b30e6dcdd5d76d3b1068801f", "sha256": "31a1fcc3bb5902f582e2657b0e7b8fd89d50c8ba6fe078527e2412360cb98f01"}, "downloads": -1, "filename": "json_excel_converter-1.0.1.tar.gz", "has_sig": false, "md5_digest": "094fbfa5b30e6dcdd5d76d3b1068801f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 15716, "upload_time": "2020-03-01T09:18:20", "upload_time_iso_8601": "2020-03-01T09:18:20.879094Z", "url": "https://files.pythonhosted.org/packages/9f/6b/f306a73b9752a4782131765553eb7d450c485cdbd81feaaec07cf81640e8/json_excel_converter-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "be18c91154f3baa16364c8fe4577fe9b", "sha256": "1a70d1ba73d46b24ba160c272f698b1cdbd2cbbaba422ce752d9db907f40619e"}, "downloads": -1, "filename": "json_excel_converter-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "be18c91154f3baa16364c8fe4577fe9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 15809, "upload_time": "2020-03-04T17:46:32", "upload_time_iso_8601": "2020-03-04T17:46:32.214322Z", "url": "https://files.pythonhosted.org/packages/1a/4d/e5b0e080722f4657208f24740ebeedf7287373a1802a59799b237479f2b6/json_excel_converter-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "906ad5698505d141fe0bd18ad0a6eb02", "sha256": "79282bac996c8211bfb261d8c346470f633421d823c8c72243fe7f664244edd7"}, "downloads": -1, "filename": "json_excel_converter-1.1.0.tar.gz", "has_sig": false, "md5_digest": "906ad5698505d141fe0bd18ad0a6eb02", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 16078, "upload_time": "2020-03-04T17:46:33", "upload_time_iso_8601": "2020-03-04T17:46:33.462708Z", "url": "https://files.pythonhosted.org/packages/a0/f0/d5103754c2a3771e898cc1d116f8e0fa0c264772f66437f50e7947a2c30d/json_excel_converter-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "6da3cd1f4e7aa1ffe4554d26a146cb37", "sha256": "f7c876f7cd4f442e4d67025dc1a33c45eca63d585d4860ca7c7bf69f26fabefc"}, "downloads": -1, "filename": "json_excel_converter-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6da3cd1f4e7aa1ffe4554d26a146cb37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 16419, "upload_time": "2020-03-04T18:53:22", "upload_time_iso_8601": "2020-03-04T18:53:22.643989Z", "url": "https://files.pythonhosted.org/packages/29/a3/826c014a964a0dd4c064929478b6d3ebeda34e66227aafedeeb94708d110/json_excel_converter-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c088eafc5a490580440bcce793c5bd5a", "sha256": "3e06f2652cf701d1331e9e55af6839df51a51b4ab9f2edb546e41de2eebfefda"}, "downloads": -1, "filename": "json_excel_converter-1.2.0.tar.gz", "has_sig": false, "md5_digest": "c088eafc5a490580440bcce793c5bd5a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 17190, "upload_time": "2020-03-04T18:53:23", "upload_time_iso_8601": "2020-03-04T18:53:23.939066Z", "url": "https://files.pythonhosted.org/packages/74/b0/50aabc1014756596607bec4a4a96ec622b8460316c50a8ec28650bf933a1/json_excel_converter-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "eb05be7e7b7429428916f9b690a11445", "sha256": "18bc8a742c8612b986c7b0cf62311041dd343727d5aa9ee8f83af7db0b7121ef"}, "downloads": -1, "filename": "json_excel_converter-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb05be7e7b7429428916f9b690a11445", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 16985, "upload_time": "2020-04-26T08:53:57", "upload_time_iso_8601": "2020-04-26T08:53:57.002438Z", "url": "https://files.pythonhosted.org/packages/ff/fa/6292e162cc10ce28e77e710622ffc8ee2ffb8df82403403c3d86d1f24dba/json_excel_converter-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62b81359fecfd9f7d6a6039976db691f", "sha256": "1d0ccb8d70b415805be3ae1dfb8f45cdf1aea06541404b1b4754efef5ebd5ccc"}, "downloads": -1, "filename": "json_excel_converter-1.3.0.tar.gz", "has_sig": false, "md5_digest": "62b81359fecfd9f7d6a6039976db691f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 18027, "upload_time": "2020-04-26T08:53:57", "upload_time_iso_8601": "2020-04-26T08:53:57.893829Z", "url": "https://files.pythonhosted.org/packages/45/8a/c7e58568e16130648e26a7490ed13ecbb746ff04ebcbcbdf1be6b9d3fe42/json_excel_converter-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eb05be7e7b7429428916f9b690a11445", "sha256": "18bc8a742c8612b986c7b0cf62311041dd343727d5aa9ee8f83af7db0b7121ef"}, "downloads": -1, "filename": "json_excel_converter-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "eb05be7e7b7429428916f9b690a11445", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 16985, "upload_time": "2020-04-26T08:53:57", "upload_time_iso_8601": "2020-04-26T08:53:57.002438Z", "url": "https://files.pythonhosted.org/packages/ff/fa/6292e162cc10ce28e77e710622ffc8ee2ffb8df82403403c3d86d1f24dba/json_excel_converter-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "62b81359fecfd9f7d6a6039976db691f", "sha256": "1d0ccb8d70b415805be3ae1dfb8f45cdf1aea06541404b1b4754efef5ebd5ccc"}, "downloads": -1, "filename": "json_excel_converter-1.3.0.tar.gz", "has_sig": false, "md5_digest": "62b81359fecfd9f7d6a6039976db691f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 18027, "upload_time": "2020-04-26T08:53:57", "upload_time_iso_8601": "2020-04-26T08:53:57.893829Z", "url": "https://files.pythonhosted.org/packages/45/8a/c7e58568e16130648e26a7490ed13ecbb746ff04ebcbcbdf1be6b9d3fe42/json_excel_converter-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:49 2020"}