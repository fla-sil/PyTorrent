{"info": {"author": "Paul Wilson", "author_email": "paulalexwilson@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Programming Language :: Python"], "description": "*******************\nmanuelpi.fakemodule\n*******************\n\nA plugin to enable the definition and usage of whole\nPython modules from within doctests.\n\nIntro and Motivation\n====================\n\n`manuelpi.fakemodule` is a plugin for `Manuel`_ that supports syntax \nfor creating modules within a doctest. The module, once defined, is then\nusable by subsequent doctest statements.\n\nThis functionality is useful for packages that you might describe as\nbeing 'meta'; they operate on modules. Thus, being able to define\nand then process modules within the same doctest using a clean and \nuncluttered syntax is extremely beneficial. \n\nOne such package to benefit from this sort of facility is `Martian`_, \nwhich scans modules for configuration directives, registering them as\nit goes.\n\n.. _Martian: http://pypi.python.org/pypi/martian\n.. _Manuel: http://packages.python.org/manuel\n\nUsage\n=====\n\nThe special REStructure Text directive::\n\n'.. module-block:: <MODULE_NAME>' \n\nis used to denote the start of a module and its alias <MODULE_NAME> for \nthe rest of the doctest. We then define the module's body at a single \nindentation level after this directive. What follows is an example of a \nfull doctest::\n\n We create a new module with a main function to perform this task::\n\n .. module-block:: test_module \n\n    import sys\n\n    class A:\n        def do_something(self):\n            return \"Hello World\"\n\n    def main():\n        print A().do_something()\n\n  Now let's execute the main function\n\n.. ignore-next-block\n\n::\n\n    >>> test_module.main()\n    Hello World\n\nThe above doctest creates a new module `test_module` and then exercises\nthe objects within it. Notice how the module becomes immediately available\nto the doctet after its definition. \n\nTo use `manualpi.fakemodule` in your application, set up your tests as\ndescribed in the Manuel documentation and import the `Manuel` class from\n`manuelpi.fakemodule`::\n\n  ...\n  import manuelpi.fakemodule\n  ...\n  m += manuelpi.fakemodule.Manuel()\n\nCHANGES\n*******\n\n0.1b1 (2009-12-16)\n==================\n\n* Initial Public Release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.python.org/pypi/manuelpi.fakemodule", "keywords": null, "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "manuelpi.fakemodule", "package_url": "https://pypi.org/project/manuelpi.fakemodule/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/manuelpi.fakemodule/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.python.org/pypi/manuelpi.fakemodule"}, "release_url": "https://pypi.org/project/manuelpi.fakemodule/0.1b1/", "requires_dist": null, "requires_python": null, "summary": "Module support in doctests", "version": "0.1b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A plugin to enable the definition and usage of whole\nPython modules from within doctests.</p>\n<div id=\"intro-and-motivation\">\n<h2>Intro and Motivation</h2>\n<p><cite>manuelpi.fakemodule</cite> is a plugin for <a href=\"http://packages.python.org/manuel\" rel=\"nofollow\">Manuel</a> that supports syntax\nfor creating modules within a doctest. The module, once defined, is then\nusable by subsequent doctest statements.</p>\n<p>This functionality is useful for packages that you might describe as\nbeing \u2018meta\u2019; they operate on modules. Thus, being able to define\nand then process modules within the same doctest using a clean and\nuncluttered syntax is extremely beneficial.</p>\n<p>One such package to benefit from this sort of facility is <a href=\"http://pypi.python.org/pypi/martian\" rel=\"nofollow\">Martian</a>,\nwhich scans modules for configuration directives, registering them as\nit goes.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The special REStructure Text directive:</p>\n<pre>'.. module-block:: &lt;MODULE_NAME&gt;'\n</pre>\n<p>is used to denote the start of a module and its alias &lt;MODULE_NAME&gt; for\nthe rest of the doctest. We then define the module\u2019s body at a single\nindentation level after this directive. What follows is an example of a\nfull doctest:</p>\n<pre>We create a new module with a main function to perform this task::\n\n.. module-block:: test_module\n\n   import sys\n\n   class A:\n       def do_something(self):\n           return \"Hello World\"\n\n   def main():\n       print A().do_something()\n\n Now let's execute the main function\n</pre>\n<pre>&gt;&gt;&gt; test_module.main()\nHello World\n</pre>\n<p>The above doctest creates a new module <cite>test_module</cite> and then exercises\nthe objects within it. Notice how the module becomes immediately available\nto the doctet after its definition.</p>\n<p>To use <cite>manualpi.fakemodule</cite> in your application, set up your tests as\ndescribed in the Manuel documentation and import the <cite>Manuel</cite> class from\n<cite>manuelpi.fakemodule</cite>:</p>\n<pre>...\nimport manuelpi.fakemodule\n...\nm += manuelpi.fakemodule.Manuel()\n</pre>\n<div id=\"changes\">\n<h3>CHANGES</h3>\n</div>\n</div>\n<div id=\"b1-2009-12-16\">\n<h2>0.1b1 (2009-12-16)</h2>\n<ul>\n<li>Initial Public Release</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 794504, "releases": {"0.1a": [{"comment_text": "", "digests": {"md5": "2a5ce15e3470fd6c1f3ea106141d32de", "sha256": "363dc353623a855e78c9e65fbecf633b39e013f94b1e0fc96d8892e1b40640e5"}, "downloads": -1, "filename": "manuelpi.fakemodule-0.1a.tar.gz", "has_sig": false, "md5_digest": "2a5ce15e3470fd6c1f3ea106141d32de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6357, "upload_time": "2009-12-10T13:12:08", "upload_time_iso_8601": "2009-12-10T13:12:08.810898Z", "url": "https://files.pythonhosted.org/packages/da/81/38e2bdce99d3e7b52452e0827e00167e93d63076615a6542c078145a33cf/manuelpi.fakemodule-0.1a.tar.gz", "yanked": false}], "0.1b1": [{"comment_text": "", "digests": {"md5": "c49d45a62475df9ad223fe3f2de568f2", "sha256": "3772f6b2102501a78580f7575bc736eb76cb50d0c264ef4f9e751f05fd26d7e4"}, "downloads": -1, "filename": "manuelpi.fakemodule-0.1b1.tar.gz", "has_sig": false, "md5_digest": "c49d45a62475df9ad223fe3f2de568f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7184, "upload_time": "2009-12-16T02:10:17", "upload_time_iso_8601": "2009-12-16T02:10:17.097068Z", "url": "https://files.pythonhosted.org/packages/83/0a/24e0b5edb8b9491d4391a8890234647feb2c7d0fbfb7ebbbe37cd4bb9b5c/manuelpi.fakemodule-0.1b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c49d45a62475df9ad223fe3f2de568f2", "sha256": "3772f6b2102501a78580f7575bc736eb76cb50d0c264ef4f9e751f05fd26d7e4"}, "downloads": -1, "filename": "manuelpi.fakemodule-0.1b1.tar.gz", "has_sig": false, "md5_digest": "c49d45a62475df9ad223fe3f2de568f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7184, "upload_time": "2009-12-16T02:10:17", "upload_time_iso_8601": "2009-12-16T02:10:17.097068Z", "url": "https://files.pythonhosted.org/packages/83/0a/24e0b5edb8b9491d4391a8890234647feb2c7d0fbfb7ebbbe37cd4bb9b5c/manuelpi.fakemodule-0.1b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:28 2020"}