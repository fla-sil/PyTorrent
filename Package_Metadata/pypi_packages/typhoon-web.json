{"info": {"author": "WeiJi Hsiao", "author_email": "weiji.hsiao@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "```\n================================================\n    _____            _ \n   |_   _|   _ _ __ | |__  based on Tornado\n     | || | | | '_ \\| '_ \\ / _ \\ / _ \\| '_ \\ \n     | || |_| | |_) | | | | (_) | (_) | | | |\n     |_| \\__, | .__/|_| |_|\\___/ \\___/|_| |_|\n         |___/|_|\n================================================\n```\n\nTyphoon is a wrapper around the [Tornado](https://www.tornadoweb.org/en/stable/) web framework. It offers the ability to attach log records with a trace id, which is used to trace individual HTTP requests. By default Typhoon obtains trace id from the request's header `X-TRACEID`. To change this behavior, subclass `typhoon.web.Application` and overwrite the `get_trace_id` method.\n\n## Requirements\n- tornado >= 5.1\n  \n## Installation\n- Use pip:\n  ```\n  pip install typhoon-web\n  pip install typhoon-web --upgrade\n  ```\n- Clone repository and install with:\n  ```\n  python setup.py install\n  ```\n\n## Hello, world\n\nHere is a simple \u201cHello, world\u201d example web app for Typhoon:\n```python\nimport logging\nimport time\n\nimport tornado.ioloop\nimport typhoon.web\nimport typhoon.log\n\nclass MainHandler(typhoon.web.RequestHandler):\n    @typhoon.web.run_in_executor\n    def process(self):\n        logging.info('go to sleep')\n        time.sleep(3)\n        logging.info('wake up')\n        return 'Hello, world'\n\n    async def get(self):\n        result = await self.process()\n        self.write(result)\n    \n    # Native coroutine (using async def and await) was introduced in Python 3.5.\n    # For previous version, use generator-based coroutine. \n    # For example:\n    #\n    # @tornado.gen.coroutine\n    # def get(self):\n    #     result = yield self.process()\n    #     self.write(result)\n\ndef make_app():\n    return typhoon.web.Application([\n        (r'/', MainHandler),\n    ])\n\nif __name__ == '__main__':\n    typhoon.log.configure(log_path='/home/logs')\n    app = make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n```\nIn this example, three different log files will be generated in the log_path:\n- **access.log** records summaries of each http request.\n- **stats.log** records messages for statistics and analysis.\n- **app.log** contains all logs that are neither access logs nor stats logs.\n\nTo log to stats.log, use an instance of `typhoon.log.StatsLogger`:\n```python\nimport typhoon.log\n\nstats_log = typhoon.log.StatsLogger()\n\nstats_log.info({'user_count': 100})\nstats_log.info({'job_register': 20}, topic='register')\n```\nNotice that logging methods of `StatsLogger` only accept a `dict` object as message.\n\n## Trace id\nBy default trace id is automatically obtained and handled by Typhoon only when the client sends a request with a header `X-TRACEID: some-value`:\n```bash\n$ curl -H \"X-TRACEID: ceon1haa6cau1dung1\" http://127.0.0.1:8888\n```\n\nTo customize the way trace id is passed, subclass `typhoon.web.Application` and overwrite the `get_trace_id` method.\n```python\nimport typhoon.web\n\nclass MyApplication(typhoon.web.Application):\n    def get_trace_id(self, handler):\n        # obtain trace id from URL Parameter.\n        return handler.get_argument('traceId', '-')\n```\nIn the above example, trace id is passed through an URL parameter:\n```bash\n$ curl http://127.0.0.1:8888?traceId=ceon1haa6cau1dung1\n```\n\nYou may have to call another service and pass down the trace id. In this case, use `typhoon.log.TRACE_ID()` to obtain current trace id:\n```python\nimport requests\nimport typhoon.web\nimport typhoon.log\n\nclass MainHandler(typhoon.web.RequestHandler):\n    @typhoon.web.run_in_executor\n    def process(self):\n        # call another service and pass down current trace id.\n        r = request.get('http://127.0.0.1:9990/hello', header={'X-TRACEID': typhoon.log.TRACE_ID()})\n        if r.status_code == 200:\n            return 'Hello, world'\n        else:\n            return 'oops!'\n\n    async def get(self):\n        result = await self.process()\n        self.write(result)\n```\n\n## <font color='green'>**[new]**</font> High-Level API\nFor those who are not familiar with Tornado, Typhoon provides high-level api since v1.0.2. \n\nNeither `RequestHandler`, nor `Application`. Just subclass `typhoon.rest.RestControler`, and decorated method with `typhoon.rest.route` decorator.\n\nHere is a \u201cHello, world\u201d example.\n```python\nfrom typhoon.rest import RestController, RestResult, route, start_server\nfrom typhoon.status import OK\n\nclass Controller(RestController):\n    @route(uri=r'/hello', method='get')\n    def greet(self, user=None):\n        if user is not None:\n            content = f'Hello, {user}'\n        else:\n            content = 'Hello, world'\n        return RestResult(status=OK, content=content)\n\nif __name__ == '__main__':\n    start_server(\n        controller = Controller(),\n        port=8888\n    )\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/WeiJiHsiao/typhoon", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "typhoon-web", "package_url": "https://pypi.org/project/typhoon-web/", "platform": "", "project_url": "https://pypi.org/project/typhoon-web/", "project_urls": {"Homepage": "https://github.com/WeiJiHsiao/typhoon"}, "release_url": "https://pypi.org/project/typhoon-web/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "A wrapper around the Tornado web framework that supports logs with traceId.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <pre><code>================================================\n    _____            _ \n   |_   _|   _ _ __ | |__  based on Tornado\n     | || | | | '_ \\| '_ \\ / _ \\ / _ \\| '_ \\ \n     | || |_| | |_) | | | | (_) | (_) | | | |\n     |_| \\__, | .__/|_| |_|\\___/ \\___/|_| |_|\n         |___/|_|\n================================================\n</code></pre>\n<p>Typhoon is a wrapper around the <a href=\"https://www.tornadoweb.org/en/stable/\" rel=\"nofollow\">Tornado</a> web framework. It offers the ability to attach log records with a trace id, which is used to trace individual HTTP requests. By default Typhoon obtains trace id from the request's header <code>X-TRACEID</code>. To change this behavior, subclass <code>typhoon.web.Application</code> and overwrite the <code>get_trace_id</code> method.</p>\n<h2>Requirements</h2>\n<ul>\n<li>tornado &gt;= 5.1</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>Use pip:\n<pre><code>pip install typhoon-web\npip install typhoon-web --upgrade\n</code></pre>\n</li>\n<li>Clone repository and install with:\n<pre><code>python setup.py install\n</code></pre>\n</li>\n</ul>\n<h2>Hello, world</h2>\n<p>Here is a simple \u201cHello, world\u201d example web app for Typhoon:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tornado.ioloop</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typhoon.web</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typhoon.log</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MainHandler</span><span class=\"p\">(</span><span class=\"n\">typhoon</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">RequestHandler</span><span class=\"p\">):</span>\n    <span class=\"nd\">@typhoon</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'go to sleep'</span><span class=\"p\">)</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'wake up'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'Hello, world'</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># Native coroutine (using async def and await) was introduced in Python 3.5.</span>\n    <span class=\"c1\"># For previous version, use generator-based coroutine. </span>\n    <span class=\"c1\"># For example:</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># @tornado.gen.coroutine</span>\n    <span class=\"c1\"># def get(self):</span>\n    <span class=\"c1\">#     result = yield self.process()</span>\n    <span class=\"c1\">#     self.write(result)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_app</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">typhoon</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">MainHandler</span><span class=\"p\">),</span>\n    <span class=\"p\">])</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">typhoon</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">log_path</span><span class=\"o\">=</span><span class=\"s1\">'/home/logs'</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">make_app</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">8888</span><span class=\"p\">)</span>\n    <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">ioloop</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>In this example, three different log files will be generated in the log_path:</p>\n<ul>\n<li><strong>access.log</strong> records summaries of each http request.</li>\n<li><strong>stats.log</strong> records messages for statistics and analysis.</li>\n<li><strong>app.log</strong> contains all logs that are neither access logs nor stats logs.</li>\n</ul>\n<p>To log to stats.log, use an instance of <code>typhoon.log.StatsLogger</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">typhoon.log</span>\n\n<span class=\"n\">stats_log</span> <span class=\"o\">=</span> <span class=\"n\">typhoon</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">StatsLogger</span><span class=\"p\">()</span>\n\n<span class=\"n\">stats_log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">({</span><span class=\"s1\">'user_count'</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">})</span>\n<span class=\"n\">stats_log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">({</span><span class=\"s1\">'job_register'</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">},</span> <span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"s1\">'register'</span><span class=\"p\">)</span>\n</pre>\n<p>Notice that logging methods of <code>StatsLogger</code> only accept a <code>dict</code> object as message.</p>\n<h2>Trace id</h2>\n<p>By default trace id is automatically obtained and handled by Typhoon only when the client sends a request with a header <code>X-TRACEID: some-value</code>:</p>\n<pre>$ curl -H <span class=\"s2\">\"X-TRACEID: ceon1haa6cau1dung1\"</span> http://127.0.0.1:8888\n</pre>\n<p>To customize the way trace id is passed, subclass <code>typhoon.web.Application</code> and overwrite the <code>get_trace_id</code> method.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">typhoon.web</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyApplication</span><span class=\"p\">(</span><span class=\"n\">typhoon</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_trace_id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">):</span>\n        <span class=\"c1\"># obtain trace id from URL Parameter.</span>\n        <span class=\"k\">return</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">get_argument</span><span class=\"p\">(</span><span class=\"s1\">'traceId'</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">)</span>\n</pre>\n<p>In the above example, trace id is passed through an URL parameter:</p>\n<pre>$ curl http://127.0.0.1:8888?traceId<span class=\"o\">=</span>ceon1haa6cau1dung1\n</pre>\n<p>You may have to call another service and pass down the trace id. In this case, use <code>typhoon.log.TRACE_ID()</code> to obtain current trace id:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typhoon.web</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typhoon.log</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MainHandler</span><span class=\"p\">(</span><span class=\"n\">typhoon</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">RequestHandler</span><span class=\"p\">):</span>\n    <span class=\"nd\">@typhoon</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># call another service and pass down current trace id.</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://127.0.0.1:9990/hello'</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'X-TRACEID'</span><span class=\"p\">:</span> <span class=\"n\">typhoon</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">TRACE_ID</span><span class=\"p\">()})</span>\n        <span class=\"k\">if</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'Hello, world'</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'oops!'</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n<h2>&lt;font color='green'&gt;<strong>[new]</strong>&lt;/font&gt; High-Level API</h2>\n<p>For those who are not familiar with Tornado, Typhoon provides high-level api since v1.0.2.</p>\n<p>Neither <code>RequestHandler</code>, nor <code>Application</code>. Just subclass <code>typhoon.rest.RestControler</code>, and decorated method with <code>typhoon.rest.route</code> decorator.</p>\n<p>Here is a \u201cHello, world\u201d example.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typhoon.rest</span> <span class=\"kn\">import</span> <span class=\"n\">RestController</span><span class=\"p\">,</span> <span class=\"n\">RestResult</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"n\">start_server</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typhoon.status</span> <span class=\"kn\">import</span> <span class=\"n\">OK</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Controller</span><span class=\"p\">(</span><span class=\"n\">RestController</span><span class=\"p\">):</span>\n    <span class=\"nd\">@route</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'/hello'</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'get'</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">greet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">user</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s1\">'Hello, </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"s1\">'Hello, world'</span>\n        <span class=\"k\">return</span> <span class=\"n\">RestResult</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">OK</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">start_server</span><span class=\"p\">(</span>\n        <span class=\"n\">controller</span> <span class=\"o\">=</span> <span class=\"n\">Controller</span><span class=\"p\">(),</span>\n        <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">8888</span>\n    <span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6470332, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "b93527e375920cf581c63e24b12fb430", "sha256": "120477f15ceb8f99c53e8c264b0319b4f8427941493ca2ca1557370ea9f6db32"}, "downloads": -1, "filename": "typhoon-web-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b93527e375920cf581c63e24b12fb430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6653, "upload_time": "2019-09-25T03:35:29", "upload_time_iso_8601": "2019-09-25T03:35:29.975111Z", "url": "https://files.pythonhosted.org/packages/70/5e/66f5170f8f5fb23d694a1610db71ddde7a9ab4e87e0a07325466b26b13d6/typhoon-web-0.3.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "40c6884c4e47d1e57a89711fb971eed1", "sha256": "8f060885aff2b4e53807b383e7527f0ad8bde0816b26fd09ce76fd03c86632f7"}, "downloads": -1, "filename": "typhoon-web-1.0.1.tar.gz", "has_sig": false, "md5_digest": "40c6884c4e47d1e57a89711fb971eed1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9404, "upload_time": "2020-01-13T10:48:39", "upload_time_iso_8601": "2020-01-13T10:48:39.238049Z", "url": "https://files.pythonhosted.org/packages/40/f0/54cafe70afd25ec54192855aaaac4c7ed3c034b0375e2b4ebab08b23a48a/typhoon-web-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "46f25b360945f818de5ae25690fa1eed", "sha256": "aef19417ea73e25aa85cc68eebded78e0fe53356eff63572e2e5729e7aeec736"}, "downloads": -1, "filename": "typhoon-web-1.0.2.tar.gz", "has_sig": false, "md5_digest": "46f25b360945f818de5ae25690fa1eed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11998, "upload_time": "2020-01-17T02:54:05", "upload_time_iso_8601": "2020-01-17T02:54:05.642778Z", "url": "https://files.pythonhosted.org/packages/ce/26/bd5651facb1342e8353e08089fd2f7f7b09c3a00a5a1abde6687bd0a5f4e/typhoon-web-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "46f25b360945f818de5ae25690fa1eed", "sha256": "aef19417ea73e25aa85cc68eebded78e0fe53356eff63572e2e5729e7aeec736"}, "downloads": -1, "filename": "typhoon-web-1.0.2.tar.gz", "has_sig": false, "md5_digest": "46f25b360945f818de5ae25690fa1eed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11998, "upload_time": "2020-01-17T02:54:05", "upload_time_iso_8601": "2020-01-17T02:54:05.642778Z", "url": "https://files.pythonhosted.org/packages/ce/26/bd5651facb1342e8353e08089fd2f7f7b09c3a00a5a1abde6687bd0a5f4e/typhoon-web-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:39 2020"}