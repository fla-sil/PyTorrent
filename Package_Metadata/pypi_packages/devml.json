{"info": {"author": "Noah Gift", "author_email": "consulting@noahgift.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "|Codacy Badge| |CircleCI|\n\ndevml\n=====\n\nMachine Learning, Statistics and Utilities around Developer Productivity\n\nA few handy bits of functionality:\n\n-  Can checkout all repositories in Github\n-  Converts a tree of checked out repositories on disk into a pandas\n   dataframe\n-  Statistics on combined DataFrames\n\nInstallation\n------------\n\n::\n\n    pip install devml\n\nThis pip install installs a command-line tool: dml (which is referenced\nin the documentation below). And also library devml, which is referenced\nbelow as well.\n\nGet environment setup\n---------------------\n\nCode is written to support Python 3.6 or greater. You can get that here:\nhttps://www.python.org/downloads/release/python-360/.\n\nAn easy way to run the project locally is to check the repo out and in the root of the repo run:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    make setup\n\nThis create a virtualenv in ~/.devml\n\nNext, source that virtualenv:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    source ~/.devml/bin/activate\n\nRun Make All (installs, lints and tests)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    make all\n\n    # #Example output\n    #(.devml) \u279c  devml git:(master) make all                    \n    #pip install -r requirements.txt\n    #Requirement already satisfied: pytest in /Users/noahgift/.devml/lib/python3.6/site-packages (from -r requirements.txt (line #1)\n    ---------- coverage: platform darwin, python 3.6.2-final-0 -----------\n    Name                       Stmts   Miss  Cover\n    ----------------------------------------------\n    devml/__init__.py              1      0   100%\n    devml/author_stats.py          6      6     0%\n    devml/fetch_repo.py           54     42    22%\n    devml/mkdata.py               84     21    75%\n    devml/org_stats.py            76     55    28%\n    devml/post_processing.py      50     35    30%\n    devml/state.py                29      9    69%\n    devml/stats.py                55     43    22%\n    devml/ts.py                   29     14    52%\n    devml/util.py                 12      4    67%\n    dml.py                       111     66    41%\n    ----------------------------------------------\n    TOTAL                        507    295    42%\n    ....\n\nYou don't use virtualenv or don't want to use it. No problem, just run\n``make all`` it should probably work if you have python 3.6 installed.\n\n::\n\n\n    make all\n\nExplore Jupyter Notebooks on Github Organizations\n-------------------------------------------------\n\nYou can explore combined datasets here using this example as a starter:\n\nhttps://github.com/noahgift/devml/blob/master/notebooks/github\\_data\\_exploration.ipynb\n\n.. figure:: https://user-images.githubusercontent.com/58792/31581904-66ee7fc0-b12a-11e7-804a-7b0f1728f30a.png\n   :alt: Pallets Project\n\n   Pallets Project\n\nExplore Jupyter Notebooks on Repository Churn\n---------------------------------------------\n\nYou can explore File Metadata exploration example here:\n\nhttps://github.com/noahgift/devml/blob/master/notebooks/repo\\_file\\_exploration.ipynb\n\nAll Files Churned by type:\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. figure:: https://user-images.githubusercontent.com/58792/31587879-59d9724e-b19e-11e7-942e-999c02d7b566.png\n   :alt: Pallets Project Relative Churn by file type\n\n   Pallets Project Relative Churn by file type\n\nSummary Churn Statistics by type:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. figure:: https://user-images.githubusercontent.com/58792/31587931-5d79199e-b19f-11e7-89c2-98185fdef909.png\n   :alt: Pallets Project by file type Churn statistics\n\n   Pallets Project by file type Churn statistics\n\nExpected Configuration\n----------------------\n\nThe command-line tools expects for you to create a project directory\nwith a config.json file. Inside the config.json file, you will need to\nprovide an oath token. You can find information about how to do that\nhere:\nhttps://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/.\n\nAlternately, you can pass these values in via the python API or via the\ncommand-line as options. They stand for the following:\n\n-  org: Github Organization (To clone entire tree of repos)\n-  checkout\\_dir: place to checkout\n-  oath: personal oath token generated from Github\n\n::\n\n    \u279c  devml git:(master) \u2717 cat project/config.json \n    {\n        \"project\" : \n            {\n                \"org\":\"pallets\",\n                \"checkout_dir\": \"/tmp/checkout\",\n                \"oath\": \"<keygenerated from Github>\"\n            }\n        \n    }\n\nBasic command-line Usage\n------------------------\n\nYou can find out stats for a checkout or a directory full of checkout as\nfollows\n\n.. code:: bash\n\n\n    dml gstats author --path ~/src/mycompanyrepo(s)\n    Top Commits By Author:                     author_name  commits\n    0                     John Smith     3059\n    1                      Sally Joe     2995\n    2                   Greg Mathews     2194\n    3                 Jim Mayflower      1448\n\nBasic API Usage (Converting a tree of repo(s) into a pandas DataFrame)\n----------------------------------------------------------------------\n\n::\n\n    In [1]: from devml import (mkdata, stats)\n\n    In [2]: org_df = mkdata.create_org_df(path=/src/mycompanyrepo(s)\")\n    In [3]: author_counts = stats.author_commit_count(org_df)\n\n    In [4]: author_counts.head()\n    Out[4]: \n          author_name  commits\n    0       John Smith     3059\n    1        Sally Joe     2995\n    2     Greg Mathews     2194\n    3    Jim Mayflower     1448\n    4   Truck Pritter      1441\n\nClone all repos in Github using API\n-----------------------------------\n\n::\n\n    In [1]: from devml import (mkdata, stats, state, fetch_repo)\n\n    In [2]: dest, token, org = state.get_project_metadata(\"../project/config.json\")\n    In [3]: fetch_repo.clone_org_repos(token, org, \n            dest, branch=\"master\")\n    017-10-14 17:11:36,590 - devml - INFO - Creating Checkout Root:  /tmp/checkout\n    2017-10-14 17:11:37,346 - devml - INFO - Found Repo # 1 REPO NAME: flask , URL: git@github.com:pallets/flask.git \n    2017-10-14 17:11:37,347 - devml - INFO - Found Repo # 2 REPO NAME: pallets-sphinx-themes , URL: git@github.com:pallets/pallets-sphinx-themes.git \n    2017-10-14 17:11:37,347 - devml - INFO - Found Repo # 3 REPO NAME: markupsafe , URL: git@github.com:pallets/markupsafe.git \n    2017-10-14 17:11:37,348 - devml - INFO - Found Repo # 4 REPO NAME: jinja , URL: git@github.com:pallets/jinja.git \n    2017-10-14 17:11:37,349 - devml - INFO - Found Repo # 5 REPO NAME: werkzeug , URL: git@githu\n    In [4]: !ls -l /tmp/checkout\n    total 0\n    drwxr-xr-x  21 noahgift  wheel  672 Oct 14 17:11 click\n    drwxr-xr-x  25 noahgift  wheel  800 Oct 14 17:11 flask\n    drwxr-xr-x  11 noahgift  wheel  352 Oct 14 17:11 flask-docs\n    drwxr-xr-x  12 noahgift  wheel  384 Oct 14 17:11 flask-ext-migrate\n    drwxr-xr-x   8 noahgift  wheel  256 Oct 14 17:11 flask-snippets\n    drwxr-xr-x  14 noahgift  wheel  448 Oct 14 17:11 flask-website\n    drwxr-xr-x  18 noahgift  wheel  576 Oct 14 17:11 itsdangerous\n    drwxr-xr-x  23 noahgift  wheel  736 Oct 14 17:11 jinja\n    drwxr-xr-x  18 noahgift  wheel  576 Oct 14 17:11 markupsafe\n    drwxr-xr-x   4 noahgift  wheel  128 Oct 14 17:11 meta\n    drwxr-xr-x  10 noahgift  wheel  320 Oct 14 17:11 pallets-sphinx-themes\n    drwxr-xr-x   9 noahgift  wheel  288 Oct 14 17:11 pocoo-sphinx-themes\n    drwxr-xr-x  15 noahgift  wheel  480 Oct 14 17:11 website\n    drwxr-xr-x  25 noahgift  wheel  800 Oct 14 17:11 werkzeug\n\nAdvanced CLI-Author: Get Activity Statistics for a Tree of Checkouts or a Checkout and sort\n-------------------------------------------------------------------------------------------\n\n::\n\n     \u279c  devml git:(master) \u2717 dml gstats activity --path /tmp/checkout --sort active_days \n\n    Top Unique Active Days:               author_name  active_days active_duration  active_ratio\n    86         Armin Ronacher          989       3817 days      0.260000\n    501  Markus Unterwaditzer          342       1820 days      0.190000\n    216            David Lord          129        712 days      0.180000\n    664           Ron DuPlain           78        854 days      0.090000\n    444         Kenneth Reitz           68       2566 days      0.030000\n    197      Daniel Neuh\u00e4user           42       1457 days      0.030000\n    297          Georg Brandl           41       1337 days      0.030000\n    196     Daniel Neuha\u0308user           36        435 days      0.080000\n    450      Keyan Pishdadian           28        885 days      0.030000\n    169     Christopher Grebs           28       1515 days      0.020000\n    666    Ronny Pfannschmidt           27       3060 days      0.010000\n    712           Simon Sapin           22        793 days      0.030000\n    372           Jeff Widman           19        840 days      0.020000\n    427    Julen Ruiz Aizpuru           16         36 days      0.440000\n    21                 Adrian           16       1935 days      0.010000\n    569        Nicholas Wiles           14        197 days      0.070000\n    912                lord63           14        692 days      0.020000\n    756           ThiefMaster           12       1287 days      0.010000\n    763       Thomas Waldmann           11       1560 days      0.010000\n    628            Priit Laes           10       1567 days      0.010000\n    23        Adrian Moennich           10        521 days      0.020000\n    391  Jochen Kupperschmidt           10       3060 days      0.000000\n\nAdvanced CLI-Churn: Get churn by file type\n------------------------------------------\n\nGet the top ten files sorted by churn count with the extension .py:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    \u2717 dml gstats churn --path /Users/noahgift/src/flask --limit 10 --ext .py\n    2017-10-15 12:10:55,783 - devml.post_processing - INFO - Running churn cmd: [git log --name-only --pretty=format:] at path [/Users/noahgift/src/flask]\n                           files  churn_count  line_count extension  \\\n    1            b'flask/app.py'          316      2183.0       .py   \n    3        b'flask/helpers.py'          176      1019.0       .py   \n    5    b'tests/flask_tests.py'          127         NaN       .py   \n    7                b'flask.py'          104         NaN       .py   \n    8                b'setup.py'           80       112.0       .py   \n    10           b'flask/cli.py'           75       759.0       .py   \n    11      b'flask/wrappers.py'           70       194.0       .py   \n    12      b'flask/__init__.py'           65        49.0       .py   \n    13           b'flask/ctx.py'           62       415.0       .py   \n    14  b'tests/test_helpers.py'           62       888.0       .py   \n\n        relative_churn  \n    1             0.14  \n    3             0.17  \n    5              NaN  \n    7              NaN  \n    8             0.71  \n    10            0.10  \n    11            0.36  \n    12            1.33  \n    13            0.15  \n    14            0.07  \n\nGet descriptive statistics for extension .py and compare to another repository\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn this example, flask, this repo and cpython are all compared to see\nhow the median churn is.\n\n::\n\n    (.devml) \u279c  devml git:(master) dml gstats metachurn --path /Users/noahgift/src/flask --ext .py --statistic median  \n    2017-10-15 12:39:44,781 - devml.post_processing - INFO - Running churn cmd: [git log --name-only --pretty=format:] at path [/Users/noahgift/src/flask]\n    MEDIAN Statistics:\n\n               churn_count  line_count  relative_churn\n    extension                                         \n    .py                  2        85.0            0.13\n    (.devml) \u279c  devml git:(master) dml gstats metachurn --path /Users/noahgift/src/devml --ext .py --statistic median\n    2017-10-15 12:40:10,999 - devml.post_processing - INFO - Running churn cmd: [git log --name-only --pretty=format:] at path [/Users/noahgift/src/devml]\n    MEDIAN Statistics:\n\n               churn_count  line_count  relative_churn\n    extension                                         \n    .py                  1        62.5            0.02\n\n    (.devml) \u279c  devml git:(master) dml gstats metachurn --path /Users/noahgift/src/cpython --ext .py --statistic median\n    2017-10-15 12:42:19,260 - devml.post_processing - INFO - Running churn cmd: [git log --name-only --pretty=format:] at path [/Users/noahgift/src/cpython]\n    MEDIAN Statistics:\n\n               churn_count  line_count  relative_churn\n    extension                                         \n    .py                  7       169.5             0.1\n\nGet Relative Churn for an Author\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n\n    dml gstats authorchurnmeta --author \"Armin Ronacher\" --path /tmp/checkout/flask --ext .py\n\n    #He has 6.5% median relative churn...very good.\n\n    count    193.000000\n    mean       0.331860\n    std        0.625431\n    min        0.001000\n    25%        0.030000\n    50%        0.065000\n    75%        0.250000\n    max        3.000000\n    Name: author_rel_churn, dtype: float64\n\nCompare CPython Active Ratio with Linux Active Ratio\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    # Linux Development Active Ratio\n    dml gstats activity --path /Users/noahgift/src/linux --sort active_days\n\n                           author_name  active_days active_duration  active_ratio\n    14541                 Takashi Iwai         1677       4590 days      0.370000\n    4382                  Eric Dumazet         1460       4504 days      0.320000\n    3641               David S. Miller         1428       4513 days      0.320000\n    7216                 Johannes Berg         1329       4328 days      0.310000\n    8717                Linus Torvalds         1281       4565 days      0.280000\n    275                        Al Viro         1249       4562 days      0.270000\n    9915         Mauro Carvalho Chehab         1227       4464 days      0.270000\n    9375                    Mark Brown         1198       4187 days      0.290000\n    3172                 Dan Carpenter         1158       3972 days      0.290000\n    12979                 Russell King         1141       4602 days      0.250000\n    1683                      Axel Lin         1040       2720 days      0.380000\n    400                   Alex Deucher         1036       3497 days      0.300000\n\n\n    # CPython Development Active Ratio\n\n                author_name  active_days active_duration  active_ratio\n    146    Guido van Rossum         2256       9673 days      0.230000\n    301   Raymond Hettinger         1361       5635 days      0.240000\n    128          Fred Drake         1239       5335 days      0.230000\n    47    Benjamin Peterson         1234       3494 days      0.350000\n    132        Georg Brandl         1080       4091 days      0.260000\n    375      Victor Stinner          980       2818 days      0.350000\n    235     Martin v. L\u00f6wis          958       5266 days      0.180000\n    36       Antoine Pitrou          883       3376 days      0.260000\n    362          Tim Peters          869       5060 days      0.170000\n    164         Jack Jansen          800       4998 days      0.160000\n    24   Andrew M. Kuchling          743       4632 days      0.160000\n    330    Serhiy Storchaka          720       1759 days      0.410000\n    44         Barry Warsaw          696       8485 days      0.080000\n    52         Brett Cannon          681       5278 days      0.130000\n    262        Neal Norwitz          559       2573 days      0.220000\n\n    In this analysis, Guido of Python has a 23% probability of working on a given day, and Linux has a 28% chance.\n\nDeletion Statistics\n-------------------\n\nFind all delete files from repository\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    dml gstats deleted --path /Users/noahgift/src/flask\n\n    DELETION STATISTICS\n\n                                                     files          ext\n    0                        b'tests/test_deprecations.py'          .py\n    1                       b'scripts/flask-07-upgrade.py'          .py\n    2                             b'flask/ext/__init__.py'          .py\n    3                                  b'flask/exthook.py'          .py\n    4                        b'scripts/flaskext_compat.py'          .py\n    5                                 b'tests/test_ext.py'          .py\n\nFAQ\n---\n\nWhat is Churn and Why Do I Care?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCode churn is the amount of times a file has been modified. Relative\nchurn is the amount of times it has been modified relative to lines of\ncode. Research into defects in software has shown that relative code\nchurn is highly predictive of defects, i.e., the greater the relative\nchurn number the higher the amount of defects.\n\n\"Increase in relative code churn measures is accompanied by an increase\nin system defect density; \"\n\nYou can read the entire study here:\nhttps://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/icse05churn.pdf\n\n.. |Codacy Badge| image:: https://api.codacy.com/project/badge/Grade/3e382eedf6424c1282aab4dd13e54c26\n   :target: https://www.codacy.com/app/noahgift/devml?utm_source=github.com&utm_medium=referral&utm_content=noahgift/devml&utm_campaign=badger\n.. |CircleCI| image:: https://circleci.com/gh/noahgift/devml.svg?style=svg\n   :target: https://circleci.com/gh/noahgift/devml", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/noahgift/devml", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "devml", "package_url": "https://pypi.org/project/devml/", "platform": "any", "project_url": "https://pypi.org/project/devml/", "project_urls": {"Homepage": "https://github.com/noahgift/devml"}, "release_url": "https://pypi.org/project/devml/0.5.1/", "requires_dist": null, "requires_python": "", "summary": "Machine Learning, Statistics and Utilities around Developer Productivity, Company Productivity and Project Productivity", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.codacy.com/app/noahgift/devml?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=noahgift/devml&amp;utm_campaign=badger\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ec923b16433f1d2a84324f2acca73db15f8b6246/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3365333832656564663634323463313238326161623464643133653534633236\"></a> <a href=\"https://circleci.com/gh/noahgift/devml\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/79ff11d0902e19893f29d29bf1b665ea160a2720/68747470733a2f2f636972636c6563692e636f6d2f67682f6e6f6168676966742f6465766d6c2e7376673f7374796c653d737667\"></a></p>\n<div id=\"devml\">\n<h2>devml</h2>\n<p>Machine Learning, Statistics and Utilities around Developer Productivity</p>\n<p>A few handy bits of functionality:</p>\n<ul>\n<li>Can checkout all repositories in Github</li>\n<li>Converts a tree of checked out repositories on disk into a pandas\ndataframe</li>\n<li>Statistics on combined DataFrames</li>\n</ul>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install devml\n</pre>\n<p>This pip install installs a command-line tool: dml (which is referenced\nin the documentation below). And also library devml, which is referenced\nbelow as well.</p>\n</div>\n<div id=\"get-environment-setup\">\n<h3>Get environment setup</h3>\n<p>Code is written to support Python 3.6 or greater. You can get that here:\n<a href=\"https://www.python.org/downloads/release/python-360/\" rel=\"nofollow\">https://www.python.org/downloads/release/python-360/</a>.</p>\n<div id=\"an-easy-way-to-run-the-project-locally-is-to-check-the-repo-out-and-in-the-root-of-the-repo-run\">\n<h4>An easy way to run the project locally is to check the repo out and in the root of the repo run:</h4>\n<pre>make setup\n</pre>\n<p>This create a virtualenv in ~/.devml</p>\n</div>\n<div id=\"next-source-that-virtualenv\">\n<h4>Next, source that virtualenv:</h4>\n<pre>source ~/.devml/bin/activate\n</pre>\n</div>\n<div id=\"run-make-all-installs-lints-and-tests\">\n<h4>Run Make All (installs, lints and tests)</h4>\n<pre>make all\n\n# #Example output\n#(.devml) \u279c  devml git:(master) make all\n#pip install -r requirements.txt\n#Requirement already satisfied: pytest in /Users/noahgift/.devml/lib/python3.6/site-packages (from -r requirements.txt (line #1)\n---------- coverage: platform darwin, python 3.6.2-final-0 -----------\nName                       Stmts   Miss  Cover\n----------------------------------------------\ndevml/__init__.py              1      0   100%\ndevml/author_stats.py          6      6     0%\ndevml/fetch_repo.py           54     42    22%\ndevml/mkdata.py               84     21    75%\ndevml/org_stats.py            76     55    28%\ndevml/post_processing.py      50     35    30%\ndevml/state.py                29      9    69%\ndevml/stats.py                55     43    22%\ndevml/ts.py                   29     14    52%\ndevml/util.py                 12      4    67%\ndml.py                       111     66    41%\n----------------------------------------------\nTOTAL                        507    295    42%\n....\n</pre>\n<p>You don\u2019t use virtualenv or don\u2019t want to use it. No problem, just run\n<tt>make all</tt> it should probably work if you have python 3.6 installed.</p>\n<pre>make all\n</pre>\n</div>\n</div>\n<div id=\"explore-jupyter-notebooks-on-github-organizations\">\n<h3>Explore Jupyter Notebooks on Github Organizations</h3>\n<p>You can explore combined datasets here using this example as a starter:</p>\n<p><a href=\"https://github.com/noahgift/devml/blob/master/notebooks/github_data_exploration.ipynb\" rel=\"nofollow\">https://github.com/noahgift/devml/blob/master/notebooks/github_data_exploration.ipynb</a></p>\n<div>\n<img alt=\"Pallets Project\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dea3059c754e9b16775f1878f7c37d4040c166d1/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f35383739322f33313538313930342d36366565376663302d623132612d313165372d383034612d3762306631373238663330612e706e67\">\n<p>Pallets Project</p>\n</div>\n</div>\n<div id=\"explore-jupyter-notebooks-on-repository-churn\">\n<h3>Explore Jupyter Notebooks on Repository Churn</h3>\n<p>You can explore File Metadata exploration example here:</p>\n<p><a href=\"https://github.com/noahgift/devml/blob/master/notebooks/repo_file_exploration.ipynb\" rel=\"nofollow\">https://github.com/noahgift/devml/blob/master/notebooks/repo_file_exploration.ipynb</a></p>\n<div id=\"all-files-churned-by-type\">\n<h4>All Files Churned by type:</h4>\n<div>\n<img alt=\"Pallets Project Relative Churn by file type\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c1fd22a50bd622072d7646438563c4ab962421d5/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f35383739322f33313538373837392d35396439373234652d623139652d313165372d393432652d3939396330326437623536362e706e67\">\n<p>Pallets Project Relative Churn by file type</p>\n</div>\n</div>\n<div id=\"summary-churn-statistics-by-type\">\n<h4>Summary Churn Statistics by type:</h4>\n<div>\n<img alt=\"Pallets Project by file type Churn statistics\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c79aa90d203021e16ffcf0e0c98b010029eb557f/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f35383739322f33313538373933312d35643739313939652d623139662d313165372d383963322d3938313835666465663930392e706e67\">\n<p>Pallets Project by file type Churn statistics</p>\n</div>\n</div>\n</div>\n<div id=\"expected-configuration\">\n<h3>Expected Configuration</h3>\n<p>The command-line tools expects for you to create a project directory\nwith a config.json file. Inside the config.json file, you will need to\nprovide an oath token. You can find information about how to do that\nhere:\n<a href=\"https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/\" rel=\"nofollow\">https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/</a>.</p>\n<p>Alternately, you can pass these values in via the python API or via the\ncommand-line as options. They stand for the following:</p>\n<ul>\n<li>org: Github Organization (To clone entire tree of repos)</li>\n<li>checkout_dir: place to checkout</li>\n<li>oath: personal oath token generated from Github</li>\n</ul>\n<pre>\u279c  devml git:(master) \u2717 cat project/config.json\n{\n    \"project\" :\n        {\n            \"org\":\"pallets\",\n            \"checkout_dir\": \"/tmp/checkout\",\n            \"oath\": \"&lt;keygenerated from Github&gt;\"\n        }\n\n}\n</pre>\n</div>\n<div id=\"basic-command-line-usage\">\n<h3>Basic command-line Usage</h3>\n<p>You can find out stats for a checkout or a directory full of checkout as\nfollows</p>\n<pre>dml gstats author --path ~/src/mycompanyrepo<span class=\"o\">(</span>s<span class=\"o\">)</span>\nTop Commits By Author:                     author_name  commits\n<span class=\"m\">0</span>                     John Smith     <span class=\"m\">3059</span>\n<span class=\"m\">1</span>                      Sally Joe     <span class=\"m\">2995</span>\n<span class=\"m\">2</span>                   Greg Mathews     <span class=\"m\">2194</span>\n<span class=\"m\">3</span>                 Jim Mayflower      <span class=\"m\">1448</span>\n</pre>\n</div>\n<div id=\"basic-api-usage-converting-a-tree-of-repo-s-into-a-pandas-dataframe\">\n<h3>Basic API Usage (Converting a tree of repo(s) into a pandas DataFrame)</h3>\n<pre>In [1]: from devml import (mkdata, stats)\n\nIn [2]: org_df = mkdata.create_org_df(path=/src/mycompanyrepo(s)\")\nIn [3]: author_counts = stats.author_commit_count(org_df)\n\nIn [4]: author_counts.head()\nOut[4]:\n      author_name  commits\n0       John Smith     3059\n1        Sally Joe     2995\n2     Greg Mathews     2194\n3    Jim Mayflower     1448\n4   Truck Pritter      1441\n</pre>\n</div>\n<div id=\"clone-all-repos-in-github-using-api\">\n<h3>Clone all repos in Github using API</h3>\n<pre>In [1]: from devml import (mkdata, stats, state, fetch_repo)\n\nIn [2]: dest, token, org = state.get_project_metadata(\"../project/config.json\")\nIn [3]: fetch_repo.clone_org_repos(token, org,\n        dest, branch=\"master\")\n017-10-14 17:11:36,590 - devml - INFO - Creating Checkout Root:  /tmp/checkout\n2017-10-14 17:11:37,346 - devml - INFO - Found Repo # 1 REPO NAME: flask , URL: git@github.com:pallets/flask.git\n2017-10-14 17:11:37,347 - devml - INFO - Found Repo # 2 REPO NAME: pallets-sphinx-themes , URL: git@github.com:pallets/pallets-sphinx-themes.git\n2017-10-14 17:11:37,347 - devml - INFO - Found Repo # 3 REPO NAME: markupsafe , URL: git@github.com:pallets/markupsafe.git\n2017-10-14 17:11:37,348 - devml - INFO - Found Repo # 4 REPO NAME: jinja , URL: git@github.com:pallets/jinja.git\n2017-10-14 17:11:37,349 - devml - INFO - Found Repo # 5 REPO NAME: werkzeug , URL: git@githu\nIn [4]: !ls -l /tmp/checkout\ntotal 0\ndrwxr-xr-x  21 noahgift  wheel  672 Oct 14 17:11 click\ndrwxr-xr-x  25 noahgift  wheel  800 Oct 14 17:11 flask\ndrwxr-xr-x  11 noahgift  wheel  352 Oct 14 17:11 flask-docs\ndrwxr-xr-x  12 noahgift  wheel  384 Oct 14 17:11 flask-ext-migrate\ndrwxr-xr-x   8 noahgift  wheel  256 Oct 14 17:11 flask-snippets\ndrwxr-xr-x  14 noahgift  wheel  448 Oct 14 17:11 flask-website\ndrwxr-xr-x  18 noahgift  wheel  576 Oct 14 17:11 itsdangerous\ndrwxr-xr-x  23 noahgift  wheel  736 Oct 14 17:11 jinja\ndrwxr-xr-x  18 noahgift  wheel  576 Oct 14 17:11 markupsafe\ndrwxr-xr-x   4 noahgift  wheel  128 Oct 14 17:11 meta\ndrwxr-xr-x  10 noahgift  wheel  320 Oct 14 17:11 pallets-sphinx-themes\ndrwxr-xr-x   9 noahgift  wheel  288 Oct 14 17:11 pocoo-sphinx-themes\ndrwxr-xr-x  15 noahgift  wheel  480 Oct 14 17:11 website\ndrwxr-xr-x  25 noahgift  wheel  800 Oct 14 17:11 werkzeug\n</pre>\n</div>\n<div id=\"advanced-cli-author-get-activity-statistics-for-a-tree-of-checkouts-or-a-checkout-and-sort\">\n<h3>Advanced CLI-Author: Get Activity Statistics for a Tree of Checkouts or a Checkout and sort</h3>\n<pre> \u279c  devml git:(master) \u2717 dml gstats activity --path /tmp/checkout --sort active_days\n\nTop Unique Active Days:               author_name  active_days active_duration  active_ratio\n86         Armin Ronacher          989       3817 days      0.260000\n501  Markus Unterwaditzer          342       1820 days      0.190000\n216            David Lord          129        712 days      0.180000\n664           Ron DuPlain           78        854 days      0.090000\n444         Kenneth Reitz           68       2566 days      0.030000\n197      Daniel Neuh\u00e4user           42       1457 days      0.030000\n297          Georg Brandl           41       1337 days      0.030000\n196     Daniel Neuha\u0308user           36        435 days      0.080000\n450      Keyan Pishdadian           28        885 days      0.030000\n169     Christopher Grebs           28       1515 days      0.020000\n666    Ronny Pfannschmidt           27       3060 days      0.010000\n712           Simon Sapin           22        793 days      0.030000\n372           Jeff Widman           19        840 days      0.020000\n427    Julen Ruiz Aizpuru           16         36 days      0.440000\n21                 Adrian           16       1935 days      0.010000\n569        Nicholas Wiles           14        197 days      0.070000\n912                lord63           14        692 days      0.020000\n756           ThiefMaster           12       1287 days      0.010000\n763       Thomas Waldmann           11       1560 days      0.010000\n628            Priit Laes           10       1567 days      0.010000\n23        Adrian Moennich           10        521 days      0.020000\n391  Jochen Kupperschmidt           10       3060 days      0.000000\n</pre>\n</div>\n<div id=\"advanced-cli-churn-get-churn-by-file-type\">\n<h3>Advanced CLI-Churn: Get churn by file type</h3>\n<div id=\"get-the-top-ten-files-sorted-by-churn-count-with-the-extension-py\">\n<h4>Get the top ten files sorted by churn count with the extension .py:</h4>\n<pre>\u2717 dml gstats churn --path /Users/noahgift/src/flask --limit 10 --ext .py\n2017-10-15 12:10:55,783 - devml.post_processing - INFO - Running churn cmd: [git log --name-only --pretty=format:] at path [/Users/noahgift/src/flask]\n                       files  churn_count  line_count extension  \\\n1            b'flask/app.py'          316      2183.0       .py\n3        b'flask/helpers.py'          176      1019.0       .py\n5    b'tests/flask_tests.py'          127         NaN       .py\n7                b'flask.py'          104         NaN       .py\n8                b'setup.py'           80       112.0       .py\n10           b'flask/cli.py'           75       759.0       .py\n11      b'flask/wrappers.py'           70       194.0       .py\n12      b'flask/__init__.py'           65        49.0       .py\n13           b'flask/ctx.py'           62       415.0       .py\n14  b'tests/test_helpers.py'           62       888.0       .py\n\n    relative_churn\n1             0.14\n3             0.17\n5              NaN\n7              NaN\n8             0.71\n10            0.10\n11            0.36\n12            1.33\n13            0.15\n14            0.07\n</pre>\n</div>\n<div id=\"get-descriptive-statistics-for-extension-py-and-compare-to-another-repository\">\n<h4>Get descriptive statistics for extension .py and compare to another repository</h4>\n<p>In this example, flask, this repo and cpython are all compared to see\nhow the median churn is.</p>\n<pre>(.devml) \u279c  devml git:(master) dml gstats metachurn --path /Users/noahgift/src/flask --ext .py --statistic median\n2017-10-15 12:39:44,781 - devml.post_processing - INFO - Running churn cmd: [git log --name-only --pretty=format:] at path [/Users/noahgift/src/flask]\nMEDIAN Statistics:\n\n           churn_count  line_count  relative_churn\nextension\n.py                  2        85.0            0.13\n(.devml) \u279c  devml git:(master) dml gstats metachurn --path /Users/noahgift/src/devml --ext .py --statistic median\n2017-10-15 12:40:10,999 - devml.post_processing - INFO - Running churn cmd: [git log --name-only --pretty=format:] at path [/Users/noahgift/src/devml]\nMEDIAN Statistics:\n\n           churn_count  line_count  relative_churn\nextension\n.py                  1        62.5            0.02\n\n(.devml) \u279c  devml git:(master) dml gstats metachurn --path /Users/noahgift/src/cpython --ext .py --statistic median\n2017-10-15 12:42:19,260 - devml.post_processing - INFO - Running churn cmd: [git log --name-only --pretty=format:] at path [/Users/noahgift/src/cpython]\nMEDIAN Statistics:\n\n           churn_count  line_count  relative_churn\nextension\n.py                  7       169.5             0.1\n</pre>\n</div>\n<div id=\"get-relative-churn-for-an-author\">\n<h4>Get Relative Churn for an Author</h4>\n<pre>dml gstats authorchurnmeta --author \"Armin Ronacher\" --path /tmp/checkout/flask --ext .py\n\n#He has 6.5% median relative churn...very good.\n\ncount    193.000000\nmean       0.331860\nstd        0.625431\nmin        0.001000\n25%        0.030000\n50%        0.065000\n75%        0.250000\nmax        3.000000\nName: author_rel_churn, dtype: float64\n</pre>\n</div>\n<div id=\"compare-cpython-active-ratio-with-linux-active-ratio\">\n<h4>Compare CPython Active Ratio with Linux Active Ratio</h4>\n<pre># Linux Development Active Ratio\ndml gstats activity --path /Users/noahgift/src/linux --sort active_days\n\n                       author_name  active_days active_duration  active_ratio\n14541                 Takashi Iwai         1677       4590 days      0.370000\n4382                  Eric Dumazet         1460       4504 days      0.320000\n3641               David S. Miller         1428       4513 days      0.320000\n7216                 Johannes Berg         1329       4328 days      0.310000\n8717                Linus Torvalds         1281       4565 days      0.280000\n275                        Al Viro         1249       4562 days      0.270000\n9915         Mauro Carvalho Chehab         1227       4464 days      0.270000\n9375                    Mark Brown         1198       4187 days      0.290000\n3172                 Dan Carpenter         1158       3972 days      0.290000\n12979                 Russell King         1141       4602 days      0.250000\n1683                      Axel Lin         1040       2720 days      0.380000\n400                   Alex Deucher         1036       3497 days      0.300000\n\n\n# CPython Development Active Ratio\n\n            author_name  active_days active_duration  active_ratio\n146    Guido van Rossum         2256       9673 days      0.230000\n301   Raymond Hettinger         1361       5635 days      0.240000\n128          Fred Drake         1239       5335 days      0.230000\n47    Benjamin Peterson         1234       3494 days      0.350000\n132        Georg Brandl         1080       4091 days      0.260000\n375      Victor Stinner          980       2818 days      0.350000\n235     Martin v. L\u00f6wis          958       5266 days      0.180000\n36       Antoine Pitrou          883       3376 days      0.260000\n362          Tim Peters          869       5060 days      0.170000\n164         Jack Jansen          800       4998 days      0.160000\n24   Andrew M. Kuchling          743       4632 days      0.160000\n330    Serhiy Storchaka          720       1759 days      0.410000\n44         Barry Warsaw          696       8485 days      0.080000\n52         Brett Cannon          681       5278 days      0.130000\n262        Neal Norwitz          559       2573 days      0.220000\n\nIn this analysis, Guido of Python has a 23% probability of working on a given day, and Linux has a 28% chance.\n</pre>\n</div>\n</div>\n<div id=\"deletion-statistics\">\n<h3>Deletion Statistics</h3>\n<h3 id=\"find-all-delete-files-from-repository\"><span class=\"section-subtitle\">Find all delete files from repository</span></h3>\n<pre>dml gstats deleted --path /Users/noahgift/src/flask\n\nDELETION STATISTICS\n\n                                                 files          ext\n0                        b'tests/test_deprecations.py'          .py\n1                       b'scripts/flask-07-upgrade.py'          .py\n2                             b'flask/ext/__init__.py'          .py\n3                                  b'flask/exthook.py'          .py\n4                        b'scripts/flaskext_compat.py'          .py\n5                                 b'tests/test_ext.py'          .py\n</pre>\n</div>\n<div id=\"faq\">\n<h3>FAQ</h3>\n<h3 id=\"what-is-churn-and-why-do-i-care\"><span class=\"section-subtitle\">What is Churn and Why Do I Care?</span></h3>\n<p>Code churn is the amount of times a file has been modified. Relative\nchurn is the amount of times it has been modified relative to lines of\ncode. Research into defects in software has shown that relative code\nchurn is highly predictive of defects, i.e., the greater the relative\nchurn number the higher the amount of defects.</p>\n<p>\u201cIncrease in relative code churn measures is accompanied by an increase\nin system defect density; \u201c</p>\n<p>You can read the entire study here:\n<a href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/icse05churn.pdf\" rel=\"nofollow\">https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/icse05churn.pdf</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3270855, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "6003f45eba4ba1c54311588ed274c046", "sha256": "219caaca453aa0d5256df2beeed68683da4b17551978ae30c8eecf1bab4b4dc5"}, "downloads": -1, "filename": "devml-0.2.tar.gz", "has_sig": false, "md5_digest": "6003f45eba4ba1c54311588ed274c046", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8976, "upload_time": "2017-10-21T20:27:20", "upload_time_iso_8601": "2017-10-21T20:27:20.160657Z", "url": "https://files.pythonhosted.org/packages/f8/dd/eff92a6af07787aaabf55f4281f250bff68198da32648aaac789f1784187/devml-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "7f60e2e40bd271c7344f514f8496c64f", "sha256": "50e39924b56a6ced540842e975075010989bae3a36d94220818ea58965422f00"}, "downloads": -1, "filename": "devml-0.3.tar.gz", "has_sig": false, "md5_digest": "7f60e2e40bd271c7344f514f8496c64f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14354, "upload_time": "2017-10-21T20:42:04", "upload_time_iso_8601": "2017-10-21T20:42:04.899488Z", "url": "https://files.pythonhosted.org/packages/ff/96/b0935b376806bc3ae68896a0c8646c57d75c376fe218db7c8c2562bea06a/devml-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "0dc0fdfb5ca964a49cfc8cbd864e1ff1", "sha256": "b31eaade63ecc4c000c190d6cb60dbf316643abe7ec286b0f40c5c9ccbdacba6"}, "downloads": -1, "filename": "devml-0.4.tar.gz", "has_sig": false, "md5_digest": "0dc0fdfb5ca964a49cfc8cbd864e1ff1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16408, "upload_time": "2017-10-21T21:18:12", "upload_time_iso_8601": "2017-10-21T21:18:12.207111Z", "url": "https://files.pythonhosted.org/packages/ed/08/60ca5fe92b4cf1c421e9c7095770b3d02db06604a361c75ce490c4ae3087/devml-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "fa74e3a9888412f71f923eb84e5039b7", "sha256": "0ecf2cef1e96340e1ea80562ac7fcba01123f48d3ad18126f6e5ebed5e4d79b8"}, "downloads": -1, "filename": "devml-0.5.tar.gz", "has_sig": false, "md5_digest": "fa74e3a9888412f71f923eb84e5039b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16746, "upload_time": "2017-10-23T00:34:57", "upload_time_iso_8601": "2017-10-23T00:34:57.818471Z", "url": "https://files.pythonhosted.org/packages/56/a5/97224debf31c776ac42d41e47771f7dd63e26df414ba81a59169414e4bdc/devml-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "4d6fccd00648df0634310d6c87ab410a", "sha256": "fd5d92ffe31f01dde01626ca5703db999749e1d6e88e44d59b70c477ee6fa6f3"}, "downloads": -1, "filename": "devml-0.5.1.tar.gz", "has_sig": false, "md5_digest": "4d6fccd00648df0634310d6c87ab410a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22585, "upload_time": "2017-10-23T02:20:17", "upload_time_iso_8601": "2017-10-23T02:20:17.796574Z", "url": "https://files.pythonhosted.org/packages/fc/b7/7fc5c02b9741ba3ba5966347f1231fc0e6f384f3311a3a00f514ac282165/devml-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4d6fccd00648df0634310d6c87ab410a", "sha256": "fd5d92ffe31f01dde01626ca5703db999749e1d6e88e44d59b70c477ee6fa6f3"}, "downloads": -1, "filename": "devml-0.5.1.tar.gz", "has_sig": false, "md5_digest": "4d6fccd00648df0634310d6c87ab410a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22585, "upload_time": "2017-10-23T02:20:17", "upload_time_iso_8601": "2017-10-23T02:20:17.796574Z", "url": "https://files.pythonhosted.org/packages/fc/b7/7fc5c02b9741ba3ba5966347f1231fc0e6f384f3311a3a00f514ac282165/devml-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:52 2020"}