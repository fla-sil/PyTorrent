{"info": {"author": "Phil Ewels", "author_email": "phil.ewels@scilifelab.se", "bugtrack_url": null, "classifiers": [], "description": "# ![nf-core/tools](docs/images/nfcore-tools_logo.png) <!-- omit in toc -->\n\n[![GitHub Actions CI Status](https://github.com/nf-core/tools/workflows/CI%20tests/badge.svg)](https://github.com/nf-core/tools/actions)\n[![codecov](https://codecov.io/gh/nf-core/tools/branch/master/graph/badge.svg)](https://codecov.io/gh/nf-core/tools)\n[![install with bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat-square)](http://bioconda.github.io/recipes/nf-core/README.html)\n\nA python package with helper tools for the nf-core community.\n\n## Table of contents <!-- omit in toc -->\n\n* [`nf-core` tools installation](#installation)\n* [`nf-core list` - List available pipelines](#listing-pipelines)\n* [`nf-core launch` - Run a pipeline with interactive parameter prompts](#launch-a-pipeline)\n* [`nf-core download` - Download pipeline for offline use](#downloading-pipelines-for-offline-use)\n* [`nf-core licences` - List software licences in a pipeline](#pipeline-software-licences)\n* [`nf-core create` - Create a new workflow from the nf-core template](#creating-a-new-workflow)\n* [`nf-core lint` - Check pipeline code against nf-core guidelines](#linting-a-workflow)\n* [`nf-core bump-version` - Update nf-core pipeline version number](#bumping-a-pipeline-version-number)\n* [`nf-core sync` - Synchronise pipeline TEMPLATE branches](#sync-a-pipeline-with-the-template)\n* [Citation](#citation)\n\nThe nf-core tools package is written in Python and can be imported and used within other packages.\nFor documentation of the internal Python functions, please refer to the [Tools Python API docs](https://nf-co.re/tools-docs/).\n\n## Installation\n\nYou can install `nf-core/tools` using [bioconda](https://bioconda.github.io/recipes/nf-core/README.html):\n\n```bash\nconda install -c bioconda nf-core\n```\n\nIt can also be installed from [PyPI](https://pypi.python.org/pypi/nf-core/) using pip as follows:\n\n```bash\npip install nf-core\n```\n\nOr, if you would like the development version instead, the command is:\n\n```bash\npip install --upgrade --force-reinstall git+https://github.com/nf-core/tools.git@dev\n```\n\nAlternatively, if you would like to edit the files locally:\nClone the repository code - you should probably specify your fork instead\n\n```bash\ngit clone https://github.com/nf-core/tools.git nf-core-tools\ncd nf-core-tools\n```\n\nInstall with pip\n\n```bash\npip install -e .\n```\n\nAlternatively, install the package with Python\n\n```bash\npython setup.py develop\n```\n\n## Listing pipelines\n\nThe command `nf-core list` shows all available nf-core pipelines along with their latest version,  when that was published and how recently the pipeline code was pulled to your local system (if at all).\n\nAn example of the output from the command is as follows:\n\n```console\n$ nf-core list\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nName                       Version    Released      Last Pulled     Have latest release?\n-------------------------  ---------  ------------  --------------  ----------------------\nnf-core/rnaseq             1.3        4 days ago    27 minutes ago  Yes\nnf-core/hlatyping          1.1.4      3 weeks ago   1 months ago    No\nnf-core/eager              2.0.6      3 weeks ago   -               -\nnf-core/mhcquant           1.2.6      3 weeks ago   -               -\nnf-core/rnafusion          1.0        1 months ago  -               -\nnf-core/methylseq          1.3        1 months ago  3 months ago    No\nnf-core/ampliseq           1.0.0      3 months ago  -               -\nnf-core/deepvariant        1.0        4 months ago  -               -\nnf-core/atacseq            dev        -             1 months ago    No\nnf-core/bacass             dev        -             -               -\nnf-core/bcellmagic         dev        -             -               -\nnf-core/chipseq            dev        -             1 months ago    No\nnf-core/clinvap            dev        -             -               -\n```\n\nTo narrow down the list, supply one or more additional keywords to filter the pipelines based on matches in titles, descriptions and topics:\n\n```console\n$ nf-core list rna rna-seq\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nName               Version    Released      Last Pulled     Have latest release?\n-----------------  ---------  ------------  --------------  ----------------------\nnf-core/rnaseq     1.3        4 days ago    28 minutes ago  Yes\nnf-core/rnafusion  1.0        1 months ago  -               -\nnf-core/lncpipe    dev        -             -               -\nnf-core/smrnaseq   dev        -             -               -\n```\n\nYou can sort the results by latest release (`-s release`, default),\nwhen you last pulled a local copy (`-s pulled`),\nalphabetically (`-s name`),\nor number of GitHub stars (`-s stars`).\n\n```console\n$ nf-core list -s stars\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nName                         Stargazers  Version    Released      Last Pulled     Have latest release?\n-------------------------  ------------  ---------  ------------  --------------  ----------------------\nnf-core/rnaseq                       81  1.3        4 days ago    30 minutes ago  Yes\nnf-core/methylseq                    22  1.3        1 months ago  3 months ago    No\nnf-core/ampliseq                     21  1.0.0      3 months ago  -               -\nnf-core/chipseq                      20  dev        -             1 months ago    No\nnf-core/deepvariant                  15  1.0        4 months ago  -               -\nnf-core/eager                        14  2.0.6      3 weeks ago   -               -\nnf-core/rnafusion                    14  1.0        1 months ago  -               -\nnf-core/lncpipe                       9  dev        -             -               -\nnf-core/exoseq                        8  dev        -             -               -\nnf-core/mag                           8  dev        -             -               -\n```\n\nFinally, to return machine-readable JSON output, use the `--json` flag.\n\n## Launch a pipeline\n\nSome nextflow pipelines have a considerable number of command line flags that can be used.\nTo help with this, the `nf-core launch` command uses an interactive command-line wizard tool to prompt you for\nvalues for running nextflow and the pipeline parameters.\n\nIf the pipeline in question has a `parameters.settings.json` file following the [nf-core parameter JSON schema](https://nf-co.re/parameter-schema), parameters will be grouped and have associated description text and variable typing.\n\nNextflow `params` variables are saved in to a JSON file called `nfx-params.json` and used by nextflow with the `-params-file` flag.\nThis makes it easier to reuse these in the future.\n\nIt is not essential to run the pipeline - the wizard will ask you if you want to launch the command at the end.\nIf not, you finish with the `params` JSON file and a nextflow command that you can copy and paste.\n\n```console\n$ nf-core launch rnaseq\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nINFO: Launching nf-core/rnaseq\nMain nextflow options\n\nConfig profile to use\n -profile [standard]: docker\n\nUnique name for this nextflow run\n -name [None]: test_run\n\nWork directory for intermediate files\n -w [./work]:\n\nResume a previous workflow run\n -resume [y/N]:\n\nRelease / revision to use\n -r [None]: 1.3\n\n\nParameter group: Main options\nDo you want to change the group's defaults? [y/N]: y\n\nInput files\nSpecify the location of your input FastQ files.\n --reads ['data/*{1,2}.fastq.gz']: '/path/to/reads_*{R1,R2}.fq.gz'\n\n[..truncated..]\n\nNextflow command:\n  nextflow run nf-core/rnaseq -profile \"docker\" -name \"test_run\" -r \"1.3\" -params-file \"/Users/ewels/testing/nfx-params.json\"\n\n\nDo you want to run this command now? [y/N]: y\n\nINFO: Launching workflow!\nN E X T F L O W  ~  version 19.01.0\nLaunching `nf-core/rnaseq` [evil_engelbart] - revision: 37f260d360 [master]\n\n[..truncated..]\n```\n\n## Downloading pipelines for offline use\n\nSometimes you may need to run an nf-core pipeline on a server or HPC system that has no internet connection. In this case you will need to fetch the pipeline files first, then manually transfer them to your system.\n\nTo make this process easier and ensure accurate retrieval of correctly versioned code and software containers, we have written a download helper tool. Simply specify the name of the nf-core pipeline and it will be downloaded to your current working directory.\n\nBy default, the pipeline will download the pipeline code and the [institutional nf-core/configs](https://github.com/nf-core/configs) files.\nIf you specify the flag `--singularity`, it will also download any singularity image files that are required.\n\nUse `-r`/`--release` to download a specific release of the pipeline. If not specified, the tool will automatically fetch the latest release.\n\n```console\n$ nf-core download methylseq -r 1.4 --singularity\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nINFO: Saving methylseq\n Pipeline release: 1.4\n Pull singularity containers: Yes\n Output file: nf-core-methylseq-1.4.tar.gz\n\nINFO: Downloading workflow files from GitHub\n\nINFO: Downloading centralised configs from GitHub\n\nINFO: Downloading 1 singularity container\n\nINFO: Building singularity image from dockerhub: docker://nfcore/methylseq:1.4\nINFO:    Converting OCI blobs to SIF format\nINFO:    Starting build...\nGetting image source signatures\n....\nINFO:    Creating SIF file...\nINFO:    Build complete: /my-pipelines/nf-core-methylseq-1.4/singularity-images/nf-core-methylseq-1.4.simg\n\nINFO: Compressing download..\n\nINFO: Command to extract files: tar -xzf nf-core-methylseq-1.4.tar.gz\n\nINFO: MD5 checksum for nf-core-methylseq-1.4.tar.gz: f5c2b035619967bb227230bc3ec986c5\n```\n\nThe tool automatically compresses all of the resulting file in to a `.tar.gz` archive.\nYou can choose other formats (`.tar.bz2`, `zip`) or to not compress (`none`) with the `-c`/`--compress` flag.\nThe console output provides the command you need to extract the files.\n\nOnce uncompressed, you will see the following file structure for the downloaded pipeline:\n\n```console\n$ tree -L 2 nf-core-methylseq-1.4/\n\nnf-core-methylseq-1.4\n\u251c\u2500\u2500 configs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 configtest.nf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 LICENSE\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nextflow.config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nfcore_custom.config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 singularity-images\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 nf-core-methylseq-1.4.simg\n\u2514\u2500\u2500 workflow\n    \u251c\u2500\u2500 assets\n    \u251c\u2500\u2500 bin\n    \u251c\u2500\u2500 CHANGELOG.md\n    \u251c\u2500\u2500 CODE_OF_CONDUCT.md\n    \u251c\u2500\u2500 conf\n    \u251c\u2500\u2500 Dockerfile\n    \u251c\u2500\u2500 docs\n    \u251c\u2500\u2500 environment.yml\n    \u251c\u2500\u2500 LICENSE\n    \u251c\u2500\u2500 main.nf\n    \u251c\u2500\u2500 nextflow.config\n    \u251c\u2500\u2500 parameters.settings.json\n    \u2514\u2500\u2500 README.md\n\n10 directories, 15 files\n```\n\nThe pipeline files are automatically updated so that the local copy of institutional configs are available when running the pipeline.\nSo using `-profile <NAME>` should work if available within [nf-core/configs](https://github.com/nf-core/configs).\n\nYou can run the pipeline by simply providing the directory path for the `workflow` folder.\nNote that if using Singularity, you will also need to provide the path to the Singularity image.\nFor example:\n\n```bash\nnextflow run /path/to/nf-core-methylseq-1.4/workflow/ \\\n     -profile singularity \\\n     -with-singularity /path/to/nf-core-methylseq-1.4/singularity-images/nf-core-methylseq-1.4.simg \\\n     # .. other normal pipeline parameters from here on..\n     --reads '*_R{1,2}.fastq.gz' --genome GRCh38\n```\n\n## Pipeline software licences\n\nSometimes it's useful to see the software licences of the tools used in a pipeline. You can use the `licences` subcommand to fetch and print the software licence from each conda / PyPI package used in an nf-core pipeline.\n\n```console\n$ nf-core licences rnaseq\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nINFO: Warning: This tool only prints licence information for the software tools packaged using conda.\n        The pipeline may use other software and dependencies not described here.\n\nPackage Name           Version    Licence\n---------------------  ---------  --------------------\nstringtie              1.3.3      Artistic License 2.0\npreseq                 2.0.3      GPL\ntrim-galore            0.4.5      GPL\nbioconductor-edger     3.20.7     GPL >=2\nfastqc                 0.11.7     GPL >=3\nopenjdk                8.0.144    GPLv2\nr-gplots               3.0.1      GPLv2\nr-markdown             0.8        GPLv2\nrseqc                  2.6.4      GPLv2\nbioconductor-dupradar  1.8.0      GPLv3\nhisat2                 2.1.0      GPLv3\nmultiqc                1.5        GPLv3\nr-data.table           1.10.4     GPLv3\nstar                   2.5.4a     GPLv3\nsubread                1.6.1      GPLv3\npicard                 2.18.2     MIT\nsamtools               1.8        MIT\n```\n\n## Creating a new workflow\n\nThe `create` subcommand makes a new workflow using the nf-core base template.\nWith a given pipeline name, description and author, it makes a starter pipeline which follows nf-core best practices.\n\nAfter creating the files, the command initialises the folder as a git repository and makes an initial commit. This first \"vanilla\" commit which is identical to the output from the templating tool is important, as it allows us to keep your pipeline in sync with the base template in the future.\nSee the [nf-core syncing docs](https://nf-co.re/developers/sync) for more information.\n\n```console\n$ nf-core create\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\nWorkflow Name: nextbigthing\nDescription: This pipeline analyses data from the next big 'omics technique\nAuthor: Big Steve\n\nINFO: Creating new nf-core pipeline: nf-core/nextbigthing\n\nINFO: Initialising pipeline git repository\n\nINFO: Done. Remember to add a remote and push to GitHub:\n  cd /path/to/nf-core-nextbigthing\n  git remote add origin git@github.com:USERNAME/REPO_NAME.git\n  git push\n```\n\nOnce you have run the command, create a new empty repository on GitHub under your username (not the `nf-core` organisation, yet).\nOn your computer, add this repository as a git remote and push to it:\n\n```console\ngit remote add origin https://github.com/ewels/nf-core-nextbigthing.git\ngit push --set-upstream origin master\n```\n\nYou can then continue to edit, commit and push normally as you build your pipeline.\n\nPlease see the [nf-core documentation](https://nf-co.re/developers/adding_pipelines) for a full walkthrough of how to create a new nf-core workflow.\n\nNote that if the required arguments for `nf-core create` are not given, it will interactively prompt for them. If you prefer, you can supply them as command line arguments. See `nf-core create --help` for more information.\n\n## Linting a workflow\n\nThe `lint` subcommand checks a given pipeline for all nf-core community guidelines.\nThis is the same test that is used on the automated continuous integration tests.\n\nFor example, the current version looks something like this:\n\n```console\n$ cd path/to/my_pipeline\n$ nf-core lint .\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\nRunning pipeline tests  [####################################]  100%  None\n\nINFO: ===========\n LINTING RESULTS\n=================\n  72 tests passed   2 tests had warnings   0 tests failed\n\nWARNING: Test Warnings:\n  http://nf-co.re/errors#8: Conda package is not latest available: picard=2.18.2, 2.18.6 available\n  http://nf-co.re/errors#8: Conda package is not latest available: bwameth=0.2.0, 0.2.1 available\n```\n\nYou can find extensive documentation about each of the lint tests in the [lint errors documentation](https://nf-co.re/errors).\n\n## Bumping a pipeline version number\n\nWhen releasing a new version of a nf-core pipeline, version numbers have to be updated in several different places. The helper command `nf-core bump-version` automates this for you to avoid manual errors (and frustration!).\n\nThe command uses results from the linting process, so will only work with workflows that pass these tests.\n\nUsage is `nf-core bump-version <pipeline_dir> <new_version>`, eg:\n\n```console\n$ cd path/to/my_pipeline\n$ nf-core bump-version . 1.0\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nINFO: Running nf-core lint tests\nRunning pipeline tests  [####################################]  100%  None\n\nINFO: ===========\n LINTING RESULTS\n=================\n  118 tests passed   0 tests had warnings   0 tests failed\n\nINFO: Changing version number:\n  Current version number is '1.0dev'\n  New version number will be '1.0'\n\nINFO: Updating version in nextflow.config\n - version = '1.0dev'\n + version = '1.0'\n\nINFO: Updating version in nextflow.config\n - process.container = 'nfcore/mypipeline:dev'\n + process.container = 'nfcore/mypipeline:1.0'\n\nINFO: Updating version in .github/workflows/ci.yml\n - docker tag nfcore/mypipeline:dev nfcore/mypipeline:dev\n + docker tag nfcore/mypipeline:dev nfcore/mypipeline:1.0\n\nINFO: Updating version in environment.yml\n - name: nf-core-mypipeline-1.0dev\n + name: nf-core-mypipeline-1.0\n\nINFO: Updating version in Dockerfile\n - ENV PATH /opt/conda/envs/nf-core-mypipeline-1.0dev/bin:$PATH\n - RUN conda env export --name nf-core-mypipeline-1.0dev > nf-core-mypipeline-1.0dev.yml\n + ENV PATH /opt/conda/envs/nf-core-mypipeline-1.0/bin:$PATH\n + RUN conda env export --name nf-core-mypipeline-1.0 > nf-core-mypipeline-1.0.yml\n```\n\nTo change the required version of Nextflow instead of the pipeline version number, use the flag `--nextflow`.\n\n## Sync a pipeline with the template\n\nOver time, the main nf-core pipeline template is updated. To keep all nf-core pipelines up to date,\nwe synchronise these updates automatically when new versions of nf-core/tools are released.\nThis is done by maintaining a special `TEMPLATE` branch, containing a vanilla copy of the nf-core template\nwith only the variables used when it first ran (name, description etc.). This branch is updated and a\npull-request can be made with just the updates from the main template code.\n\nThis command takes a pipeline directory and attempts to run this synchronisation.\nUsage is `nf-core sync <pipeline_dir>`, eg:\n\n```console\n$ nf-core sync my_pipeline/\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nINFO: Pipeline directory: /path/to/my_pipeline\n\nINFO: Fetching workflow config variables\n\nINFO: Deleting all files in TEMPLATE branch\n\nINFO: Making a new template pipeline using pipeline variables\n\nINFO: Committed changes to TEMPLATE branch\n\nINFO: Now try to merge the updates in to your pipeline:\n  cd /path/to/my_pipeline\n  git merge TEMPLATE\n```\n\nIf your pipeline repository does not already have a `TEMPLATE` branch, you can instruct\nthe command to try to create one by giving the `--make-template-branch` flag.\nIf it has to, the sync tool will then create an orphan branch - see the\n[nf-core website sync documentation](https://nf-co.re/developers/sync) for details on\nhow to handle this.\n\nBy default, the tool will collect workflow variables from the current branch in your\npipeline directory. You can supply the `--from-branch` flag to specific a different branch.\n\nFinally, if you give the `--pull-request` flag, the command will push any changes to the remote\nand attempt to create a pull request using the GitHub API. The GitHub username and repository\nname will be fetched from the remote url (see `git remote -v | grep origin`), or can be supplied\nwith `--username` and `--repository`.\n\nTo create the pull request, a personal access token is required for API authentication.\nThese can be created at [https://github.com/settings/tokens](https://github.com/settings/tokens).\nSupply this using the `--auth-token` flag.\n\nFinally, if `--all` is supplied, then the command attempts to pull and synchronise all nf-core workflows.\nThis is used by the nf-core/tools release automation to synchronise all nf-core pipelines\nwith the newest version of the template. It requires authentication as either the nf-core-bot account\nor as an nf-core administrator.\n\n```console\n$ nf-core sync --all\n\n                                          ,--./,-.\n          ___     __   __   __   ___     /,-._.--~\\\n    |\\ | |__  __ /  ` /  \\ |__) |__         }  {\n    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,\n                                          `._,._,'\n\n\nINFO: Syncing nf-core/ampliseq\n\n[...]\n\nINFO: Successfully synchronised [n] pipelines\n```\n\n## Citation\n\nIf you use `nf-core tools` in your work, please cite the `nf-core` publication as follows:\n\n> **The nf-core framework for community-curated bioinformatics pipelines.**\n>\n> Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso & Sven Nahnsen.\n>\n> _Nat Biotechnol._ 2020 Feb 13. doi: [10.1038/s41587-020-0439-x](https://dx.doi.org/10.1038/s41587-020-0439-x).  \n> ReadCube: [Full Access Link](https://rdcu.be/b1GjZ)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nf-core/tools", "keywords": "nf-core,nextflow,bioinformatics,workflow,pipeline,biology,sequencing,NGS,next generation sequencing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nf-core", "package_url": "https://pypi.org/project/nf-core/", "platform": "", "project_url": "https://pypi.org/project/nf-core/", "project_urls": {"Homepage": "https://github.com/nf-core/tools"}, "release_url": "https://pypi.org/project/nf-core/1.9/", "requires_dist": ["cookiecutter", "click", "GitPython", "jsonschema", "pyyaml", "requests", "requests-cache", "tabulate"], "requires_python": "", "summary": "Helper tools for use with nf-core Nextflow pipelines.", "version": "1.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><img alt=\"nf-core/tools\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3509244d5fb7165e46377c59d7448e293808d05/646f63732f696d616765732f6e66636f72652d746f6f6c735f6c6f676f2e706e67\"> </h1>\n<p><a href=\"https://github.com/nf-core/tools/actions\" rel=\"nofollow\"><img alt=\"GitHub Actions CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6961e7e162226b91fe9847d2b7d3b8016a19a5a/68747470733a2f2f6769746875622e636f6d2f6e662d636f72652f746f6f6c732f776f726b666c6f77732f434925323074657374732f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/nf-core/tools\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2174385d06a6c7c3d475103a38cea85f93bcc6b8/68747470733a2f2f636f6465636f762e696f2f67682f6e662d636f72652f746f6f6c732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"http://bioconda.github.io/recipes/nf-core/README.html\" rel=\"nofollow\"><img alt=\"install with bioconda\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46594aa9d755bed29a0b8f0a7ca2fa8dba131a8d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696e7374616c6c253230776974682d62696f636f6e64612d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<p>A python package with helper tools for the nf-core community.</p>\n<h2>Table of contents </h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\"><code>nf-core</code> tools installation</a></li>\n<li><a href=\"#listing-pipelines\" rel=\"nofollow\"><code>nf-core list</code> - List available pipelines</a></li>\n<li><a href=\"#launch-a-pipeline\" rel=\"nofollow\"><code>nf-core launch</code> - Run a pipeline with interactive parameter prompts</a></li>\n<li><a href=\"#downloading-pipelines-for-offline-use\" rel=\"nofollow\"><code>nf-core download</code> - Download pipeline for offline use</a></li>\n<li><a href=\"#pipeline-software-licences\" rel=\"nofollow\"><code>nf-core licences</code> - List software licences in a pipeline</a></li>\n<li><a href=\"#creating-a-new-workflow\" rel=\"nofollow\"><code>nf-core create</code> - Create a new workflow from the nf-core template</a></li>\n<li><a href=\"#linting-a-workflow\" rel=\"nofollow\"><code>nf-core lint</code> - Check pipeline code against nf-core guidelines</a></li>\n<li><a href=\"#bumping-a-pipeline-version-number\" rel=\"nofollow\"><code>nf-core bump-version</code> - Update nf-core pipeline version number</a></li>\n<li><a href=\"#sync-a-pipeline-with-the-template\" rel=\"nofollow\"><code>nf-core sync</code> - Synchronise pipeline TEMPLATE branches</a></li>\n<li><a href=\"#citation\" rel=\"nofollow\">Citation</a></li>\n</ul>\n<p>The nf-core tools package is written in Python and can be imported and used within other packages.\nFor documentation of the internal Python functions, please refer to the <a href=\"https://nf-co.re/tools-docs/\" rel=\"nofollow\">Tools Python API docs</a>.</p>\n<h2>Installation</h2>\n<p>You can install <code>nf-core/tools</code> using <a href=\"https://bioconda.github.io/recipes/nf-core/README.html\" rel=\"nofollow\">bioconda</a>:</p>\n<pre>conda install -c bioconda nf-core\n</pre>\n<p>It can also be installed from <a href=\"https://pypi.python.org/pypi/nf-core/\" rel=\"nofollow\">PyPI</a> using pip as follows:</p>\n<pre>pip install nf-core\n</pre>\n<p>Or, if you would like the development version instead, the command is:</p>\n<pre>pip install --upgrade --force-reinstall git+https://github.com/nf-core/tools.git@dev\n</pre>\n<p>Alternatively, if you would like to edit the files locally:\nClone the repository code - you should probably specify your fork instead</p>\n<pre>git clone https://github.com/nf-core/tools.git nf-core-tools\n<span class=\"nb\">cd</span> nf-core-tools\n</pre>\n<p>Install with pip</p>\n<pre>pip install -e .\n</pre>\n<p>Alternatively, install the package with Python</p>\n<pre>python setup.py develop\n</pre>\n<h2>Listing pipelines</h2>\n<p>The command <code>nf-core list</code> shows all available nf-core pipelines along with their latest version,  when that was published and how recently the pipeline code was pulled to your local system (if at all).</p>\n<p>An example of the output from the command is as follows:</p>\n<pre><span class=\"gp\">$</span> nf-core list\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">Name                       Version    Released      Last Pulled     Have latest release?</span>\n<span class=\"go\">-------------------------  ---------  ------------  --------------  ----------------------</span>\n<span class=\"go\">nf-core/rnaseq             1.3        4 days ago    27 minutes ago  Yes</span>\n<span class=\"go\">nf-core/hlatyping          1.1.4      3 weeks ago   1 months ago    No</span>\n<span class=\"go\">nf-core/eager              2.0.6      3 weeks ago   -               -</span>\n<span class=\"go\">nf-core/mhcquant           1.2.6      3 weeks ago   -               -</span>\n<span class=\"go\">nf-core/rnafusion          1.0        1 months ago  -               -</span>\n<span class=\"go\">nf-core/methylseq          1.3        1 months ago  3 months ago    No</span>\n<span class=\"go\">nf-core/ampliseq           1.0.0      3 months ago  -               -</span>\n<span class=\"go\">nf-core/deepvariant        1.0        4 months ago  -               -</span>\n<span class=\"go\">nf-core/atacseq            dev        -             1 months ago    No</span>\n<span class=\"go\">nf-core/bacass             dev        -             -               -</span>\n<span class=\"go\">nf-core/bcellmagic         dev        -             -               -</span>\n<span class=\"go\">nf-core/chipseq            dev        -             1 months ago    No</span>\n<span class=\"go\">nf-core/clinvap            dev        -             -               -</span>\n</pre>\n<p>To narrow down the list, supply one or more additional keywords to filter the pipelines based on matches in titles, descriptions and topics:</p>\n<pre><span class=\"gp\">$</span> nf-core list rna rna-seq\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">Name               Version    Released      Last Pulled     Have latest release?</span>\n<span class=\"go\">-----------------  ---------  ------------  --------------  ----------------------</span>\n<span class=\"go\">nf-core/rnaseq     1.3        4 days ago    28 minutes ago  Yes</span>\n<span class=\"go\">nf-core/rnafusion  1.0        1 months ago  -               -</span>\n<span class=\"go\">nf-core/lncpipe    dev        -             -               -</span>\n<span class=\"go\">nf-core/smrnaseq   dev        -             -               -</span>\n</pre>\n<p>You can sort the results by latest release (<code>-s release</code>, default),\nwhen you last pulled a local copy (<code>-s pulled</code>),\nalphabetically (<code>-s name</code>),\nor number of GitHub stars (<code>-s stars</code>).</p>\n<pre><span class=\"gp\">$</span> nf-core list -s stars\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">Name                         Stargazers  Version    Released      Last Pulled     Have latest release?</span>\n<span class=\"go\">-------------------------  ------------  ---------  ------------  --------------  ----------------------</span>\n<span class=\"go\">nf-core/rnaseq                       81  1.3        4 days ago    30 minutes ago  Yes</span>\n<span class=\"go\">nf-core/methylseq                    22  1.3        1 months ago  3 months ago    No</span>\n<span class=\"go\">nf-core/ampliseq                     21  1.0.0      3 months ago  -               -</span>\n<span class=\"go\">nf-core/chipseq                      20  dev        -             1 months ago    No</span>\n<span class=\"go\">nf-core/deepvariant                  15  1.0        4 months ago  -               -</span>\n<span class=\"go\">nf-core/eager                        14  2.0.6      3 weeks ago   -               -</span>\n<span class=\"go\">nf-core/rnafusion                    14  1.0        1 months ago  -               -</span>\n<span class=\"go\">nf-core/lncpipe                       9  dev        -             -               -</span>\n<span class=\"go\">nf-core/exoseq                        8  dev        -             -               -</span>\n<span class=\"go\">nf-core/mag                           8  dev        -             -               -</span>\n</pre>\n<p>Finally, to return machine-readable JSON output, use the <code>--json</code> flag.</p>\n<h2>Launch a pipeline</h2>\n<p>Some nextflow pipelines have a considerable number of command line flags that can be used.\nTo help with this, the <code>nf-core launch</code> command uses an interactive command-line wizard tool to prompt you for\nvalues for running nextflow and the pipeline parameters.</p>\n<p>If the pipeline in question has a <code>parameters.settings.json</code> file following the <a href=\"https://nf-co.re/parameter-schema\" rel=\"nofollow\">nf-core parameter JSON schema</a>, parameters will be grouped and have associated description text and variable typing.</p>\n<p>Nextflow <code>params</code> variables are saved in to a JSON file called <code>nfx-params.json</code> and used by nextflow with the <code>-params-file</code> flag.\nThis makes it easier to reuse these in the future.</p>\n<p>It is not essential to run the pipeline - the wizard will ask you if you want to launch the command at the end.\nIf not, you finish with the <code>params</code> JSON file and a nextflow command that you can copy and paste.</p>\n<pre><span class=\"gp\">$</span> nf-core launch rnaseq\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">INFO: Launching nf-core/rnaseq</span>\n<span class=\"go\">Main nextflow options</span>\n\n<span class=\"go\">Config profile to use</span>\n<span class=\"go\"> -profile [standard]: docker</span>\n\n<span class=\"go\">Unique name for this nextflow run</span>\n<span class=\"go\"> -name [None]: test_run</span>\n\n<span class=\"go\">Work directory for intermediate files</span>\n<span class=\"go\"> -w [./work]:</span>\n\n<span class=\"go\">Resume a previous workflow run</span>\n<span class=\"go\"> -resume [y/N]:</span>\n\n<span class=\"go\">Release / revision to use</span>\n<span class=\"go\"> -r [None]: 1.3</span>\n\n\n<span class=\"go\">Parameter group: Main options</span>\n<span class=\"go\">Do you want to change the group's defaults? [y/N]: y</span>\n\n<span class=\"go\">Input files</span>\n<span class=\"go\">Specify the location of your input FastQ files.</span>\n<span class=\"go\"> --reads ['data/*{1,2}.fastq.gz']: '/path/to/reads_*{R1,R2}.fq.gz'</span>\n\n<span class=\"go\">[..truncated..]</span>\n\n<span class=\"go\">Nextflow command:</span>\n<span class=\"go\">  nextflow run nf-core/rnaseq -profile \"docker\" -name \"test_run\" -r \"1.3\" -params-file \"/Users/ewels/testing/nfx-params.json\"</span>\n\n\n<span class=\"go\">Do you want to run this command now? [y/N]: y</span>\n\n<span class=\"go\">INFO: Launching workflow!</span>\n<span class=\"go\">N E X T F L O W  ~  version 19.01.0</span>\n<span class=\"go\">Launching `nf-core/rnaseq` [evil_engelbart] - revision: 37f260d360 [master]</span>\n\n<span class=\"go\">[..truncated..]</span>\n</pre>\n<h2>Downloading pipelines for offline use</h2>\n<p>Sometimes you may need to run an nf-core pipeline on a server or HPC system that has no internet connection. In this case you will need to fetch the pipeline files first, then manually transfer them to your system.</p>\n<p>To make this process easier and ensure accurate retrieval of correctly versioned code and software containers, we have written a download helper tool. Simply specify the name of the nf-core pipeline and it will be downloaded to your current working directory.</p>\n<p>By default, the pipeline will download the pipeline code and the <a href=\"https://github.com/nf-core/configs\" rel=\"nofollow\">institutional nf-core/configs</a> files.\nIf you specify the flag <code>--singularity</code>, it will also download any singularity image files that are required.</p>\n<p>Use <code>-r</code>/<code>--release</code> to download a specific release of the pipeline. If not specified, the tool will automatically fetch the latest release.</p>\n<pre><span class=\"gp\">$</span> nf-core download methylseq -r <span class=\"m\">1</span>.4 --singularity\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">INFO: Saving methylseq</span>\n<span class=\"go\"> Pipeline release: 1.4</span>\n<span class=\"go\"> Pull singularity containers: Yes</span>\n<span class=\"go\"> Output file: nf-core-methylseq-1.4.tar.gz</span>\n\n<span class=\"go\">INFO: Downloading workflow files from GitHub</span>\n\n<span class=\"go\">INFO: Downloading centralised configs from GitHub</span>\n\n<span class=\"go\">INFO: Downloading 1 singularity container</span>\n\n<span class=\"go\">INFO: Building singularity image from dockerhub: docker://nfcore/methylseq:1.4</span>\n<span class=\"go\">INFO:    Converting OCI blobs to SIF format</span>\n<span class=\"go\">INFO:    Starting build...</span>\n<span class=\"go\">Getting image source signatures</span>\n<span class=\"go\">....</span>\n<span class=\"go\">INFO:    Creating SIF file...</span>\n<span class=\"go\">INFO:    Build complete: /my-pipelines/nf-core-methylseq-1.4/singularity-images/nf-core-methylseq-1.4.simg</span>\n\n<span class=\"go\">INFO: Compressing download..</span>\n\n<span class=\"go\">INFO: Command to extract files: tar -xzf nf-core-methylseq-1.4.tar.gz</span>\n\n<span class=\"go\">INFO: MD5 checksum for nf-core-methylseq-1.4.tar.gz: f5c2b035619967bb227230bc3ec986c5</span>\n</pre>\n<p>The tool automatically compresses all of the resulting file in to a <code>.tar.gz</code> archive.\nYou can choose other formats (<code>.tar.bz2</code>, <code>zip</code>) or to not compress (<code>none</code>) with the <code>-c</code>/<code>--compress</code> flag.\nThe console output provides the command you need to extract the files.</p>\n<p>Once uncompressed, you will see the following file structure for the downloaded pipeline:</p>\n<pre><span class=\"gp\">$</span> tree -L <span class=\"m\">2</span> nf-core-methylseq-1.4/\n\n<span class=\"go\">nf-core-methylseq-1.4</span>\n<span class=\"go\">\u251c\u2500\u2500 configs</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 conf</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 configtest.nf</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 docs</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 LICENSE</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 nextflow.config</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u251c\u2500\u2500 nfcore_custom.config</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md</span>\n<span class=\"go\">\u251c\u2500\u2500 singularity-images</span>\n<span class=\"go\">\u2502\u00a0\u00a0 \u2514\u2500\u2500 nf-core-methylseq-1.4.simg</span>\n<span class=\"go\">\u2514\u2500\u2500 workflow</span>\n<span class=\"go\">    \u251c\u2500\u2500 assets</span>\n<span class=\"go\">    \u251c\u2500\u2500 bin</span>\n<span class=\"go\">    \u251c\u2500\u2500 CHANGELOG.md</span>\n<span class=\"go\">    \u251c\u2500\u2500 CODE_OF_CONDUCT.md</span>\n<span class=\"go\">    \u251c\u2500\u2500 conf</span>\n<span class=\"go\">    \u251c\u2500\u2500 Dockerfile</span>\n<span class=\"go\">    \u251c\u2500\u2500 docs</span>\n<span class=\"go\">    \u251c\u2500\u2500 environment.yml</span>\n<span class=\"go\">    \u251c\u2500\u2500 LICENSE</span>\n<span class=\"go\">    \u251c\u2500\u2500 main.nf</span>\n<span class=\"go\">    \u251c\u2500\u2500 nextflow.config</span>\n<span class=\"go\">    \u251c\u2500\u2500 parameters.settings.json</span>\n<span class=\"go\">    \u2514\u2500\u2500 README.md</span>\n\n<span class=\"go\">10 directories, 15 files</span>\n</pre>\n<p>The pipeline files are automatically updated so that the local copy of institutional configs are available when running the pipeline.\nSo using <code>-profile &lt;NAME&gt;</code> should work if available within <a href=\"https://github.com/nf-core/configs\" rel=\"nofollow\">nf-core/configs</a>.</p>\n<p>You can run the pipeline by simply providing the directory path for the <code>workflow</code> folder.\nNote that if using Singularity, you will also need to provide the path to the Singularity image.\nFor example:</p>\n<pre>nextflow run /path/to/nf-core-methylseq-1.4/workflow/ <span class=\"se\">\\</span>\n     -profile singularity <span class=\"se\">\\</span>\n     -with-singularity /path/to/nf-core-methylseq-1.4/singularity-images/nf-core-methylseq-1.4.simg <span class=\"se\">\\</span>\n     <span class=\"c1\"># .. other normal pipeline parameters from here on..</span>\n     --reads <span class=\"s1\">'*_R{1,2}.fastq.gz'</span> --genome GRCh38\n</pre>\n<h2>Pipeline software licences</h2>\n<p>Sometimes it's useful to see the software licences of the tools used in a pipeline. You can use the <code>licences</code> subcommand to fetch and print the software licence from each conda / PyPI package used in an nf-core pipeline.</p>\n<pre><span class=\"gp\">$</span> nf-core licences rnaseq\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">INFO: Warning: This tool only prints licence information for the software tools packaged using conda.</span>\n<span class=\"go\">        The pipeline may use other software and dependencies not described here.</span>\n\n<span class=\"go\">Package Name           Version    Licence</span>\n<span class=\"go\">---------------------  ---------  --------------------</span>\n<span class=\"go\">stringtie              1.3.3      Artistic License 2.0</span>\n<span class=\"go\">preseq                 2.0.3      GPL</span>\n<span class=\"go\">trim-galore            0.4.5      GPL</span>\n<span class=\"go\">bioconductor-edger     3.20.7     GPL &gt;=2</span>\n<span class=\"go\">fastqc                 0.11.7     GPL &gt;=3</span>\n<span class=\"go\">openjdk                8.0.144    GPLv2</span>\n<span class=\"go\">r-gplots               3.0.1      GPLv2</span>\n<span class=\"go\">r-markdown             0.8        GPLv2</span>\n<span class=\"go\">rseqc                  2.6.4      GPLv2</span>\n<span class=\"go\">bioconductor-dupradar  1.8.0      GPLv3</span>\n<span class=\"go\">hisat2                 2.1.0      GPLv3</span>\n<span class=\"go\">multiqc                1.5        GPLv3</span>\n<span class=\"go\">r-data.table           1.10.4     GPLv3</span>\n<span class=\"go\">star                   2.5.4a     GPLv3</span>\n<span class=\"go\">subread                1.6.1      GPLv3</span>\n<span class=\"go\">picard                 2.18.2     MIT</span>\n<span class=\"go\">samtools               1.8        MIT</span>\n</pre>\n<h2>Creating a new workflow</h2>\n<p>The <code>create</code> subcommand makes a new workflow using the nf-core base template.\nWith a given pipeline name, description and author, it makes a starter pipeline which follows nf-core best practices.</p>\n<p>After creating the files, the command initialises the folder as a git repository and makes an initial commit. This first \"vanilla\" commit which is identical to the output from the templating tool is important, as it allows us to keep your pipeline in sync with the base template in the future.\nSee the <a href=\"https://nf-co.re/developers/sync\" rel=\"nofollow\">nf-core syncing docs</a> for more information.</p>\n<pre><span class=\"gp\">$</span> nf-core create\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n<span class=\"go\">Workflow Name: nextbigthing</span>\n<span class=\"go\">Description: This pipeline analyses data from the next big 'omics technique</span>\n<span class=\"go\">Author: Big Steve</span>\n\n<span class=\"go\">INFO: Creating new nf-core pipeline: nf-core/nextbigthing</span>\n\n<span class=\"go\">INFO: Initialising pipeline git repository</span>\n\n<span class=\"go\">INFO: Done. Remember to add a remote and push to GitHub:</span>\n<span class=\"go\">  cd /path/to/nf-core-nextbigthing</span>\n<span class=\"go\">  git remote add origin git@github.com:USERNAME/REPO_NAME.git</span>\n<span class=\"go\">  git push</span>\n</pre>\n<p>Once you have run the command, create a new empty repository on GitHub under your username (not the <code>nf-core</code> organisation, yet).\nOn your computer, add this repository as a git remote and push to it:</p>\n<pre><span class=\"go\">git remote add origin https://github.com/ewels/nf-core-nextbigthing.git</span>\n<span class=\"go\">git push --set-upstream origin master</span>\n</pre>\n<p>You can then continue to edit, commit and push normally as you build your pipeline.</p>\n<p>Please see the <a href=\"https://nf-co.re/developers/adding_pipelines\" rel=\"nofollow\">nf-core documentation</a> for a full walkthrough of how to create a new nf-core workflow.</p>\n<p>Note that if the required arguments for <code>nf-core create</code> are not given, it will interactively prompt for them. If you prefer, you can supply them as command line arguments. See <code>nf-core create --help</code> for more information.</p>\n<h2>Linting a workflow</h2>\n<p>The <code>lint</code> subcommand checks a given pipeline for all nf-core community guidelines.\nThis is the same test that is used on the automated continuous integration tests.</p>\n<p>For example, the current version looks something like this:</p>\n<pre><span class=\"gp\">$</span> <span class=\"nb\">cd</span> path/to/my_pipeline\n<span class=\"gp\">$</span> nf-core lint .\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n<span class=\"go\">Running pipeline tests  [####################################]  100%  None</span>\n\n<span class=\"go\">INFO: ===========</span>\n<span class=\"go\"> LINTING RESULTS</span>\n<span class=\"go\">=================</span>\n<span class=\"go\">  72 tests passed   2 tests had warnings   0 tests failed</span>\n\n<span class=\"go\">WARNING: Test Warnings:</span>\n<span class=\"go\">  http://nf-co.re/errors#8: Conda package is not latest available: picard=2.18.2, 2.18.6 available</span>\n<span class=\"go\">  http://nf-co.re/errors#8: Conda package is not latest available: bwameth=0.2.0, 0.2.1 available</span>\n</pre>\n<p>You can find extensive documentation about each of the lint tests in the <a href=\"https://nf-co.re/errors\" rel=\"nofollow\">lint errors documentation</a>.</p>\n<h2>Bumping a pipeline version number</h2>\n<p>When releasing a new version of a nf-core pipeline, version numbers have to be updated in several different places. The helper command <code>nf-core bump-version</code> automates this for you to avoid manual errors (and frustration!).</p>\n<p>The command uses results from the linting process, so will only work with workflows that pass these tests.</p>\n<p>Usage is <code>nf-core bump-version &lt;pipeline_dir&gt; &lt;new_version&gt;</code>, eg:</p>\n<pre><span class=\"gp\">$</span> <span class=\"nb\">cd</span> path/to/my_pipeline\n<span class=\"gp\">$</span> nf-core bump-version . <span class=\"m\">1</span>.0\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">INFO: Running nf-core lint tests</span>\n<span class=\"go\">Running pipeline tests  [####################################]  100%  None</span>\n\n<span class=\"go\">INFO: ===========</span>\n<span class=\"go\"> LINTING RESULTS</span>\n<span class=\"go\">=================</span>\n<span class=\"go\">  118 tests passed   0 tests had warnings   0 tests failed</span>\n\n<span class=\"go\">INFO: Changing version number:</span>\n<span class=\"go\">  Current version number is '1.0dev'</span>\n<span class=\"go\">  New version number will be '1.0'</span>\n\n<span class=\"go\">INFO: Updating version in nextflow.config</span>\n<span class=\"go\"> - version = '1.0dev'</span>\n<span class=\"go\"> + version = '1.0'</span>\n\n<span class=\"go\">INFO: Updating version in nextflow.config</span>\n<span class=\"go\"> - process.container = 'nfcore/mypipeline:dev'</span>\n<span class=\"go\"> + process.container = 'nfcore/mypipeline:1.0'</span>\n\n<span class=\"go\">INFO: Updating version in .github/workflows/ci.yml</span>\n<span class=\"go\"> - docker tag nfcore/mypipeline:dev nfcore/mypipeline:dev</span>\n<span class=\"go\"> + docker tag nfcore/mypipeline:dev nfcore/mypipeline:1.0</span>\n\n<span class=\"go\">INFO: Updating version in environment.yml</span>\n<span class=\"go\"> - name: nf-core-mypipeline-1.0dev</span>\n<span class=\"go\"> + name: nf-core-mypipeline-1.0</span>\n\n<span class=\"go\">INFO: Updating version in Dockerfile</span>\n<span class=\"go\"> - ENV PATH /opt/conda/envs/nf-core-mypipeline-1.0dev/bin:$PATH</span>\n<span class=\"go\"> - RUN conda env export --name nf-core-mypipeline-1.0dev &gt; nf-core-mypipeline-1.0dev.yml</span>\n<span class=\"go\"> + ENV PATH /opt/conda/envs/nf-core-mypipeline-1.0/bin:$PATH</span>\n<span class=\"go\"> + RUN conda env export --name nf-core-mypipeline-1.0 &gt; nf-core-mypipeline-1.0.yml</span>\n</pre>\n<p>To change the required version of Nextflow instead of the pipeline version number, use the flag <code>--nextflow</code>.</p>\n<h2>Sync a pipeline with the template</h2>\n<p>Over time, the main nf-core pipeline template is updated. To keep all nf-core pipelines up to date,\nwe synchronise these updates automatically when new versions of nf-core/tools are released.\nThis is done by maintaining a special <code>TEMPLATE</code> branch, containing a vanilla copy of the nf-core template\nwith only the variables used when it first ran (name, description etc.). This branch is updated and a\npull-request can be made with just the updates from the main template code.</p>\n<p>This command takes a pipeline directory and attempts to run this synchronisation.\nUsage is <code>nf-core sync &lt;pipeline_dir&gt;</code>, eg:</p>\n<pre><span class=\"gp\">$</span> nf-core sync my_pipeline/\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">INFO: Pipeline directory: /path/to/my_pipeline</span>\n\n<span class=\"go\">INFO: Fetching workflow config variables</span>\n\n<span class=\"go\">INFO: Deleting all files in TEMPLATE branch</span>\n\n<span class=\"go\">INFO: Making a new template pipeline using pipeline variables</span>\n\n<span class=\"go\">INFO: Committed changes to TEMPLATE branch</span>\n\n<span class=\"go\">INFO: Now try to merge the updates in to your pipeline:</span>\n<span class=\"go\">  cd /path/to/my_pipeline</span>\n<span class=\"go\">  git merge TEMPLATE</span>\n</pre>\n<p>If your pipeline repository does not already have a <code>TEMPLATE</code> branch, you can instruct\nthe command to try to create one by giving the <code>--make-template-branch</code> flag.\nIf it has to, the sync tool will then create an orphan branch - see the\n<a href=\"https://nf-co.re/developers/sync\" rel=\"nofollow\">nf-core website sync documentation</a> for details on\nhow to handle this.</p>\n<p>By default, the tool will collect workflow variables from the current branch in your\npipeline directory. You can supply the <code>--from-branch</code> flag to specific a different branch.</p>\n<p>Finally, if you give the <code>--pull-request</code> flag, the command will push any changes to the remote\nand attempt to create a pull request using the GitHub API. The GitHub username and repository\nname will be fetched from the remote url (see <code>git remote -v | grep origin</code>), or can be supplied\nwith <code>--username</code> and <code>--repository</code>.</p>\n<p>To create the pull request, a personal access token is required for API authentication.\nThese can be created at <a href=\"https://github.com/settings/tokens\" rel=\"nofollow\">https://github.com/settings/tokens</a>.\nSupply this using the <code>--auth-token</code> flag.</p>\n<p>Finally, if <code>--all</code> is supplied, then the command attempts to pull and synchronise all nf-core workflows.\nThis is used by the nf-core/tools release automation to synchronise all nf-core pipelines\nwith the newest version of the template. It requires authentication as either the nf-core-bot account\nor as an nf-core administrator.</p>\n<pre><span class=\"gp\">$</span> nf-core sync --all\n\n<span class=\"go\">                                          ,--./,-.</span>\n<span class=\"go\">          ___     __   __   __   ___     /,-._.--~\\</span>\n<span class=\"go\">    |\\ | |__  __ /  ` /  \\ |__) |__         }  {</span>\n<span class=\"go\">    | \\| |       \\__, \\__/ |  \\ |___     \\`-._,-`-,</span>\n<span class=\"go\">                                          `._,._,'</span>\n\n\n<span class=\"go\">INFO: Syncing nf-core/ampliseq</span>\n\n<span class=\"go\">[...]</span>\n\n<span class=\"go\">INFO: Successfully synchronised [n] pipelines</span>\n</pre>\n<h2>Citation</h2>\n<p>If you use <code>nf-core tools</code> in your work, please cite the <code>nf-core</code> publication as follows:</p>\n<blockquote>\n<p><strong>The nf-core framework for community-curated bioinformatics pipelines.</strong></p>\n<p>Philip Ewels, Alexander Peltzer, Sven Fillinger, Harshil Patel, Johannes Alneberg, Andreas Wilm, Maxime Ulysse Garcia, Paolo Di Tommaso &amp; Sven Nahnsen.</p>\n<p><em>Nat Biotechnol.</em> 2020 Feb 13. doi: <a href=\"https://dx.doi.org/10.1038/s41587-020-0439-x\" rel=\"nofollow\">10.1038/s41587-020-0439-x</a>.<br>\nReadCube: <a href=\"https://rdcu.be/b1GjZ\" rel=\"nofollow\">Full Access Link</a></p>\n</blockquote>\n\n          </div>"}, "last_serial": 6668748, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "934fb60ebe5320dbc216d8b1f21867be", "sha256": "4f97ebd485e86198dd92d888b0b610e66ef4d68f647fa57643841a3068a9a26f"}, "downloads": -1, "filename": "nf-core-1.0.tar.gz", "has_sig": false, "md5_digest": "934fb60ebe5320dbc216d8b1f21867be", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20866, "upload_time": "2018-06-12T15:15:58", "upload_time_iso_8601": "2018-06-12T15:15:58.107103Z", "url": "https://files.pythonhosted.org/packages/3c/39/cd5d93b17970ef4f4854385c3d7efad129864a399115c9cac0d0fdc6bf57/nf-core-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "65796de4f91ce0d374d0f8c73fae7c07", "sha256": "9f045333f85cd81e9eab32f88867e458da3309d19191ed5d90cfb1488888664f"}, "downloads": -1, "filename": "nf-core-1.0.1.tar.gz", "has_sig": false, "md5_digest": "65796de4f91ce0d374d0f8c73fae7c07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20856, "upload_time": "2018-07-18T09:26:18", "upload_time_iso_8601": "2018-07-18T09:26:18.777645Z", "url": "https://files.pythonhosted.org/packages/1c/17/374a1c0a40e1cd263a27eabb871c71e0500da8c4721feef9fd3111c63c59/nf-core-1.0.1.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "fff2b88e697cb5af416b0896ff462887", "sha256": "2258f0f02db2b17c942a5609083bd342054fcc39a9727359606c3ad1b9a28820"}, "downloads": -1, "filename": "nf-core-1.1.tar.gz", "has_sig": false, "md5_digest": "fff2b88e697cb5af416b0896ff462887", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47758, "upload_time": "2018-08-14T19:05:07", "upload_time_iso_8601": "2018-08-14T19:05:07.677874Z", "url": "https://files.pythonhosted.org/packages/d1/19/ef667d089848741957ce3afd7cbf051f94a5567defe9412dea1b036bc4a6/nf-core-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "4ab81ecce2932743fb91a0d546b6c711", "sha256": "74589eacd8829ad2566ca360bb66a49f35645d9899f90cb0e5834eed2cf567f2"}, "downloads": -1, "filename": "nf-core-1.2.tar.gz", "has_sig": false, "md5_digest": "4ab81ecce2932743fb91a0d546b6c711", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 53146, "upload_time": "2018-10-01T19:24:09", "upload_time_iso_8601": "2018-10-01T19:24:09.349239Z", "url": "https://files.pythonhosted.org/packages/9a/10/d4419093c0cc66d856df1a45c3b5c4548600d403596afbf77224dff4b571/nf-core-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "cae4a205da58b04d459737b59b965692", "sha256": "2a993d57e3ccb3af79559e1faf6ba17f4df6965b1b47c5bd797fa6e0430df802"}, "downloads": -1, "filename": "nf-core-1.3.tar.gz", "has_sig": false, "md5_digest": "cae4a205da58b04d459737b59b965692", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54990, "upload_time": "2018-11-21T13:45:39", "upload_time_iso_8601": "2018-11-21T13:45:39.254979Z", "url": "https://files.pythonhosted.org/packages/3f/a2/6b2e901dd31d0fc1766300728ee32df1a8981c13aba8d16fedb70d363ecd/nf-core-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "ad76e0b2ae6c709819e3a0c7eb18ea18", "sha256": "bb27e74a16de903d7e067808885b3fc0464f15340db963bdd55a2ef3de6cd9e4"}, "downloads": -1, "filename": "nf-core-1.4.tar.gz", "has_sig": false, "md5_digest": "ad76e0b2ae6c709819e3a0c7eb18ea18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55665, "upload_time": "2018-12-12T15:49:01", "upload_time_iso_8601": "2018-12-12T15:49:01.110439Z", "url": "https://files.pythonhosted.org/packages/a6/d8/7101aa95a7976a3171e02bbdece884989f507359dfa1d5f1bb9c04eb0127/nf-core-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "a3c007901e768d3e508201091f21b386", "sha256": "85a51027555d46a6275db91489c9e16a22536a6033c10080cfa25d52e523f580"}, "downloads": -1, "filename": "nf-core-1.5.tar.gz", "has_sig": false, "md5_digest": "a3c007901e768d3e508201091f21b386", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67172, "upload_time": "2019-03-13T22:22:09", "upload_time_iso_8601": "2019-03-13T22:22:09.817163Z", "url": "https://files.pythonhosted.org/packages/f7/56/9977d64de49d0d03a37bb8264bfc91a8814d04436e4752a28d1a61516188/nf-core-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "03d092b26929b1b21f1f6c6d8c977c6c", "sha256": "3d94796419ba4c5b1df1c59e897a5d2c1d6c55e5ca16fc60dbf0306b0fd8d314"}, "downloads": -1, "filename": "nf-core-1.6.tar.gz", "has_sig": false, "md5_digest": "03d092b26929b1b21f1f6c6d8c977c6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65929, "upload_time": "2019-04-09T11:43:36", "upload_time_iso_8601": "2019-04-09T11:43:36.749707Z", "url": "https://files.pythonhosted.org/packages/3d/27/a2184c5c6f6002901180b4cfa94b3113f32aa0ed80cf2de46d0a311d7f21/nf-core-1.6.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "a83b40707befc2627fc035a7bbb50650", "sha256": "17f58bac741c50a9a601efbe91f229422c3088e509169712d83ed9d97b0762cc"}, "downloads": -1, "filename": "nf-core-1.7.tar.gz", "has_sig": false, "md5_digest": "a83b40707befc2627fc035a7bbb50650", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 68683, "upload_time": "2019-10-07T14:03:10", "upload_time_iso_8601": "2019-10-07T14:03:10.529657Z", "url": "https://files.pythonhosted.org/packages/b4/01/d4e9db3b14d61f6ea0e548abf5c6b7560b9c02529684736eb7081e9fd3b4/nf-core-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "e1487302f85db79fd77463e1429a5b08", "sha256": "c1ca2ea3a5163403310a2bf0026a8404f33b61eb40dad7007b10b956ceb3e702"}, "downloads": -1, "filename": "nf-core-1.8.tar.gz", "has_sig": false, "md5_digest": "e1487302f85db79fd77463e1429a5b08", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81317, "upload_time": "2020-01-27T13:24:16", "upload_time_iso_8601": "2020-01-27T13:24:16.562995Z", "url": "https://files.pythonhosted.org/packages/2d/7d/0e38c4faf9067cc9689ced05337ba13aa39e61aa6ce7b9d132cbf0601eb3/nf-core-1.8.tar.gz", "yanked": false}], "1.9": [{"comment_text": "", "digests": {"md5": "d7315a53e472173471f4fcac7637358c", "sha256": "54054b07ad773a2cca1c471ad3f4ca817a59c8829ff0a7a33f01efbd5cb49376"}, "downloads": -1, "filename": "nf_core-1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "d7315a53e472173471f4fcac7637358c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 92224, "upload_time": "2020-02-20T15:21:26", "upload_time_iso_8601": "2020-02-20T15:21:26.071492Z", "url": "https://files.pythonhosted.org/packages/dd/91/d8da0ad0fbd0326234b9e28b8e4b313861a62291a1e60c8f78ad254897fe/nf_core-1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28a9f87d52ca584aea47159d8d616618", "sha256": "ba237a05efd360a3cb7606fc546e35ae8cd326003c08238ace0088646bcc00b5"}, "downloads": -1, "filename": "nf-core-1.9.tar.gz", "has_sig": false, "md5_digest": "28a9f87d52ca584aea47159d8d616618", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82534, "upload_time": "2020-02-20T15:21:27", "upload_time_iso_8601": "2020-02-20T15:21:27.514430Z", "url": "https://files.pythonhosted.org/packages/ad/36/19e674feed9c643a06a09b9b22a6dd2b05a4fa5879c482ad16b9f013589a/nf-core-1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7315a53e472173471f4fcac7637358c", "sha256": "54054b07ad773a2cca1c471ad3f4ca817a59c8829ff0a7a33f01efbd5cb49376"}, "downloads": -1, "filename": "nf_core-1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "d7315a53e472173471f4fcac7637358c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 92224, "upload_time": "2020-02-20T15:21:26", "upload_time_iso_8601": "2020-02-20T15:21:26.071492Z", "url": "https://files.pythonhosted.org/packages/dd/91/d8da0ad0fbd0326234b9e28b8e4b313861a62291a1e60c8f78ad254897fe/nf_core-1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "28a9f87d52ca584aea47159d8d616618", "sha256": "ba237a05efd360a3cb7606fc546e35ae8cd326003c08238ace0088646bcc00b5"}, "downloads": -1, "filename": "nf-core-1.9.tar.gz", "has_sig": false, "md5_digest": "28a9f87d52ca584aea47159d8d616618", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82534, "upload_time": "2020-02-20T15:21:27", "upload_time_iso_8601": "2020-02-20T15:21:27.514430Z", "url": "https://files.pythonhosted.org/packages/ad/36/19e674feed9c643a06a09b9b22a6dd2b05a4fa5879c482ad16b9f013589a/nf-core-1.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:35 2020"}