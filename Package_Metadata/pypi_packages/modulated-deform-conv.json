{"info": {"author": "qiaoxin", "author_email": "qiaoxin182@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# modulated-deform-conv\n\u8be5\u9879\u76ee\u662f\u4e00\u4e2a Pytorch C++ and CUDA Extension,\u91c7\u7528C++\u548cCuda\u5b9e\u73b0\u4e86deformable-conv2d,modulated-deformable-conv2d,deformable-conv3d,modulated-deformable-conv3d\u7684forward function\u548cbackward function,\u5e76\u5728Python\u4e2d\u5bf9\u5176\u8fdb\u884c\u4e86\u5305\u88c5\u3002\n<br />This Project is a Pytorch C++ and CUDA Extension, which implements  the forward function and backward function for deformable-conv2d, modulated-deformable-conv2d, deformable-conv3d, modulated-deformable-conv3d, then encapsulates C++ and CUDA  code into Python Package.\n\n### \u5b89\u88c5 Install\n* run `pip install modulated-deform-conv`\n* or `git clone https://github.com/CHONSPQX/modulated-deform-conv.git`,then `cd modulated-deform-conv` and run `python setup.py install`\n\n\n#### \u8981\u6c42 Requires\n* Python 3\n* Pytorch>=1.3\n* Linux, gcc\u7248\u672c>=4.9(For Linux, gcc version>=4.9)\n* Windows,CUDA\u7248\u672c\u9700\u8981VS\u7248\u672c\u517c\u5bb9(For Windows, CUDA version must be compatiable with Visual Studio version)\n\n\u7531\u4e8e\u8d44\u6e90\u6709\u9650\uff0c\u76ee\u524d\u6d4b\u8bd5\u8fc7\u7684\u73af\u5883\u6709(Because of limited resources, only the following environment are tested)\n- Ubuntu18.04 , gcc 7.4 , CUDA 10.2 ,Python3.7.4, Pytorch 1.3.1\n- Ubuntu18.04 , gcc 7.4 , CUDA 10.2 ,Python3.7.4, Pytorch 1.4.0\n- Windows10 , Visual Studio 2017 , CUDA 10.1 ,Python3.7.6, Pytorch 1.4.0\n\n#### \u901f\u5ea6\u4f18\u5316  Speed Optimization\n* `pip download modulated-deform-conv`\n\u89e3\u538b\u5f97\u5230\u7684\u538b\u7f29\u6587\u4ef6\uff0c\u8fdb\u5165`modulated-deform-conv`\uff0c\u6253\u5f00`src/config.h`\uff0c\u7528\u6237\u53ef\u6839\u636e\u81ea\u8eab\u663e\u5361\u60c5\u51b5\uff0c\u8bbe\u7f6e\u4ee5\u4e0b\u4e24\u4e2a\u53d8\u91cf\uff0c\u83b7\u5f97\u66f4\u5feb\u8fd0\u884c\u901f\u5ea6\uff0c\u7136\u540e\u8fd0\u884c `python setup.py install`\n<br>Unzip the downloaded compressed file, `cd modulated-deform-conv`, then open `src/config.h`,users are recommended to set the following `VARIABLES` to optimize run speed according to their NVIDIA GPU condition, then run `python setup.py install`\n\t* `const int CUDA_NUM_THREADS`\n\t* `const int MAX_GRID_NUM`\n\n* \u8fd0\u884c\u65f6\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012`in_step`\u53c2\u6570\u6765\u4f18\u5316\u901f\u5ea6\uff0c\u8be5\u53d8\u91cf\u63a7\u5236\u6bcf\u6b21\u5e76\u884c\u5904\u7406\u7684batch \u5927\u5c0f\u3002\n<br> Or users can set different `in_step`  value in run time, which controls the batch size of each parallel processing .\n\n### \u4f7f\u7528 Use\n\u76f4\u63a5\u4f7f\u7528C++\u51fd\u6570\uff0c\u8bf7`import MDCONV_CUDA`\n\u4f7f\u7528\u5c01\u88c5\u540e\u7684python\u7c7b\uff0c\u8bf7`import modulated_deform_conv`\nUsing C++ functions directly, please  `import MDCONV_CUDA`\nUsing the packaged function by Python, please `import modulated_deform_conv`\n\n# \u6587\u6863 Documents\n## 1.C++ and CUDA Code\n* \u6587\u4ef6 Files\n\n|Filename                      |Content                    |\n|:--------------------------:| :-----------------------: |\n|`config.h`      | **macro&gloabl variables&inline functions**       |\n|`deformable_conv.cu`| **MDCONV_CUDA.deform_conv2d_forward_cuda MDCONV_CUDA.deform_conv2d_backward_cuda**  |\n|`mdeformable_conv.cu`| **MDCONV_CUDA.modulated_deform_conv2d_forward_cuda MDCONV_CUDA.modulated_deform_conv2d_backward_cuda**  |\n|`deformable_conv3d.cu`| **MDCONV_CUDA.deform_conv3d_forward_cuda  MDCONV_CUDA.deform_conv3d_backward_cuda**  |\n|`mdeformable_conv3d.cu`| **MDCONV_CUDA.modulated_deform_conv3d_forward_cuda MDCONV_CUDA.modulated_deform_conv2d_backward_cuda**  |\n|`utils.cu`| **some code for display debug outputs**  |\n|`warp.cpp`| **glue code between C++ and Python**  |\n\n* \u53d8\u91cf Variables\n\n|Variable Name       |       Type              | Introduction |\n| :--------------------:  | :-------------------: |:----------------:|\n|`kernel_h`| `const int`|first dimension size of the convolution kernel|\n|`kernel_w`| `const int`|second dimension size of the convolution kernel|\n|`kernel_l`| `const int`|third dimension size of the convolution kernel|\n|`stride_h`| `const int`|stride for first dimension|\n|`stride_w`| `const int`|stride for second dimension|\n|`stride_l`| `const int`|stride for third dimension|\n|`pad_h`| `const int`|zero padding for first dimension|\n|`pad_w`| `const int`|zero padding for second dimension|\n|`pad_l`| `const int`|zero padding for third dimension|\n|`dilation_h`| `const int`|dilation rate for first dimension|\n|`dilation_w`| `const int`|dilation rate for second dimension|\n|`dilation_l`| `const int`|dilation rate for third dimension|\n|`group`| `const int`|group of convolution |\n|`deformable_group`| `const int`|group of offset and mask |\n|`in_step`| `const int`|batch size of each parallel processing|\n|`with_bias`| `const bool`|if have bias|\n|`input`| `at::Tensor` |`B,I,H,W[,L]`,`I` must be divisible by`group` and ` deformable_group`|\n|`grad_input`| `at::Tensor` |`grad_input` must be size like `input` |\n|`weight`| `at::Tensor` |`O,I/group,H,W[,L]`\uff0c`O`must be divisible by`group`|\n|`grad_weight`| `at::Tensor` |`grad_weight` must be size like `weight`|\n|`bias`| `at::Tensor` |`[O]`, if `with_bias=true`, `bias` must be non-null|\n|`grad_bias`| `at::Tensor` |`grad_bias` must be size like `bias`|\n|`offset`| `at::Tensor` |`B,deformable_group*2*kernel_h*kernel_w,H,W` `B,deformable_group*3*kernel_h*kernel_w*kernel_l,H,W,L`|\n|`grad_offset`| `at::Tensor` |`grad_offset` must be size like `offset`|\n|`mask`| `at::Tensor` |`B,deformable_group*kernel_h*kernel_w,H,W` `B,deformable_group*kernel_h*kernel_w*kernel_l,H,W,L`|\n|`grad_mask`| `at::Tensor` |`grad_mask` must be size like `mask`|\n|`output`| `at::Tensor` |`B,O,OH,OW[,OL]`|\n|`grad_output`| `at::Tensor` |`grad_output` must be size like `output`|\n\n## 2.Python Code\n\n|Class Name                     |Type                    |\n|:--------------------------:| :-----------------------: |\n|`class DeformConv2dFunction`      | `torch.autograd.Function`       |\n|`class ModulatedDeformConv2dFunction`      | `torch.autograd.Function`      |\n|`class DeformConv3dFunction`      | `torch.autograd.Function`       |\n|`class ModulatedDeformConv3dFunction`      | `torch.autograd.Function`      |\n|`class DeformConv2d`      | `torch.nn.Module`       |\n|`class ModulatedDeformConv2d`      | `torch.nn.Module`      |\n|`class DeformConv3d`      | `torch.nn.Module`       |\n|`class ModulatedDeformConv3d`      | `torch.nn.Module`      |\n\n## Author\n**Xin Qiao** `qiaoxin182@gmail.com`\n+ [github/chonspqx](https://github.com/chonspqx)\n\n## License\nCopyright (c) 2020 Xin Qiao\nReleased under the MIT license", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com", "keywords": "pytorch,cuda,deform", "license": "", "maintainer": "", "maintainer_email": "", "name": "modulated-deform-conv", "package_url": "https://pypi.org/project/modulated-deform-conv/", "platform": "", "project_url": "https://pypi.org/project/modulated-deform-conv/", "project_urls": {"Homepage": "https://www.github.com"}, "release_url": "https://pypi.org/project/modulated-deform-conv/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "cuda implementation of deformable conv2d, modulated deformable conv2d,deformable conv3d, modulated deformable conv3d", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>modulated-deform-conv</h1>\n<p>\u8be5\u9879\u76ee\u662f\u4e00\u4e2a Pytorch C++ and CUDA Extension,\u91c7\u7528C++\u548cCuda\u5b9e\u73b0\u4e86deformable-conv2d,modulated-deformable-conv2d,deformable-conv3d,modulated-deformable-conv3d\u7684forward function\u548cbackward function,\u5e76\u5728Python\u4e2d\u5bf9\u5176\u8fdb\u884c\u4e86\u5305\u88c5\u3002\n<br>This Project is a Pytorch C++ and CUDA Extension, which implements  the forward function and backward function for deformable-conv2d, modulated-deformable-conv2d, deformable-conv3d, modulated-deformable-conv3d, then encapsulates C++ and CUDA  code into Python Package.</p>\n<h3>\u5b89\u88c5 Install</h3>\n<ul>\n<li>run <code>pip install modulated-deform-conv</code></li>\n<li>or <code>git clone https://github.com/CHONSPQX/modulated-deform-conv.git</code>,then <code>cd modulated-deform-conv</code> and run <code>python setup.py install</code></li>\n</ul>\n<h4>\u8981\u6c42 Requires</h4>\n<ul>\n<li>Python 3</li>\n<li>Pytorch&gt;=1.3</li>\n<li>Linux, gcc\u7248\u672c&gt;=4.9(For Linux, gcc version&gt;=4.9)</li>\n<li>Windows,CUDA\u7248\u672c\u9700\u8981VS\u7248\u672c\u517c\u5bb9(For Windows, CUDA version must be compatiable with Visual Studio version)</li>\n</ul>\n<p>\u7531\u4e8e\u8d44\u6e90\u6709\u9650\uff0c\u76ee\u524d\u6d4b\u8bd5\u8fc7\u7684\u73af\u5883\u6709(Because of limited resources, only the following environment are tested)</p>\n<ul>\n<li>Ubuntu18.04 , gcc 7.4 , CUDA 10.2 ,Python3.7.4, Pytorch 1.3.1</li>\n<li>Ubuntu18.04 , gcc 7.4 , CUDA 10.2 ,Python3.7.4, Pytorch 1.4.0</li>\n<li>Windows10 , Visual Studio 2017 , CUDA 10.1 ,Python3.7.6, Pytorch 1.4.0</li>\n</ul>\n<h4>\u901f\u5ea6\u4f18\u5316  Speed Optimization</h4>\n<ul>\n<li>\n<p><code>pip download modulated-deform-conv</code>\n\u89e3\u538b\u5f97\u5230\u7684\u538b\u7f29\u6587\u4ef6\uff0c\u8fdb\u5165<code>modulated-deform-conv</code>\uff0c\u6253\u5f00<code>src/config.h</code>\uff0c\u7528\u6237\u53ef\u6839\u636e\u81ea\u8eab\u663e\u5361\u60c5\u51b5\uff0c\u8bbe\u7f6e\u4ee5\u4e0b\u4e24\u4e2a\u53d8\u91cf\uff0c\u83b7\u5f97\u66f4\u5feb\u8fd0\u884c\u901f\u5ea6\uff0c\u7136\u540e\u8fd0\u884c <code>python setup.py install</code>\n<br>Unzip the downloaded compressed file, <code>cd modulated-deform-conv</code>, then open <code>src/config.h</code>,users are recommended to set the following <code>VARIABLES</code> to optimize run speed according to their NVIDIA GPU condition, then run <code>python setup.py install</code></p>\n<ul>\n<li><code>const int CUDA_NUM_THREADS</code></li>\n<li><code>const int MAX_GRID_NUM</code></li>\n</ul>\n</li>\n<li>\n<p>\u8fd0\u884c\u65f6\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012<code>in_step</code>\u53c2\u6570\u6765\u4f18\u5316\u901f\u5ea6\uff0c\u8be5\u53d8\u91cf\u63a7\u5236\u6bcf\u6b21\u5e76\u884c\u5904\u7406\u7684batch \u5927\u5c0f\u3002\n<br> Or users can set different <code>in_step</code>  value in run time, which controls the batch size of each parallel processing .</p>\n</li>\n</ul>\n<h3>\u4f7f\u7528 Use</h3>\n<p>\u76f4\u63a5\u4f7f\u7528C++\u51fd\u6570\uff0c\u8bf7<code>import MDCONV_CUDA</code>\n\u4f7f\u7528\u5c01\u88c5\u540e\u7684python\u7c7b\uff0c\u8bf7<code>import modulated_deform_conv</code>\nUsing C++ functions directly, please  <code>import MDCONV_CUDA</code>\nUsing the packaged function by Python, please <code>import modulated_deform_conv</code></p>\n<h1>\u6587\u6863 Documents</h1>\n<h2>1.C++ and CUDA Code</h2>\n<ul>\n<li>\u6587\u4ef6 Files</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Filename</th>\n<th align=\"center\">Content</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>config.h</code></td>\n<td align=\"center\"><strong>macro&amp;gloabl variables&amp;inline functions</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><code>deformable_conv.cu</code></td>\n<td align=\"center\"><strong>MDCONV_CUDA.deform_conv2d_forward_cuda MDCONV_CUDA.deform_conv2d_backward_cuda</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><code>mdeformable_conv.cu</code></td>\n<td align=\"center\"><strong>MDCONV_CUDA.modulated_deform_conv2d_forward_cuda MDCONV_CUDA.modulated_deform_conv2d_backward_cuda</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><code>deformable_conv3d.cu</code></td>\n<td align=\"center\"><strong>MDCONV_CUDA.deform_conv3d_forward_cuda  MDCONV_CUDA.deform_conv3d_backward_cuda</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><code>mdeformable_conv3d.cu</code></td>\n<td align=\"center\"><strong>MDCONV_CUDA.modulated_deform_conv3d_forward_cuda MDCONV_CUDA.modulated_deform_conv2d_backward_cuda</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><code>utils.cu</code></td>\n<td align=\"center\"><strong>some code for display debug outputs</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><code>warp.cpp</code></td>\n<td align=\"center\"><strong>glue code between C++ and Python</strong></td>\n</tr></tbody></table>\n<ul>\n<li>\u53d8\u91cf Variables</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Variable Name</th>\n<th align=\"center\">Type</th>\n<th align=\"center\">Introduction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>kernel_h</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">first dimension size of the convolution kernel</td>\n</tr>\n<tr>\n<td align=\"center\"><code>kernel_w</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">second dimension size of the convolution kernel</td>\n</tr>\n<tr>\n<td align=\"center\"><code>kernel_l</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">third dimension size of the convolution kernel</td>\n</tr>\n<tr>\n<td align=\"center\"><code>stride_h</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">stride for first dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>stride_w</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">stride for second dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>stride_l</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">stride for third dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>pad_h</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">zero padding for first dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>pad_w</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">zero padding for second dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>pad_l</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">zero padding for third dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>dilation_h</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">dilation rate for first dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>dilation_w</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">dilation rate for second dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>dilation_l</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">dilation rate for third dimension</td>\n</tr>\n<tr>\n<td align=\"center\"><code>group</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">group of convolution</td>\n</tr>\n<tr>\n<td align=\"center\"><code>deformable_group</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">group of offset and mask</td>\n</tr>\n<tr>\n<td align=\"center\"><code>in_step</code></td>\n<td align=\"center\"><code>const int</code></td>\n<td align=\"center\">batch size of each parallel processing</td>\n</tr>\n<tr>\n<td align=\"center\"><code>with_bias</code></td>\n<td align=\"center\"><code>const bool</code></td>\n<td align=\"center\">if have bias</td>\n</tr>\n<tr>\n<td align=\"center\"><code>input</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>B,I,H,W[,L]</code>,<code>I</code> must be divisible by<code>group</code> and <code>deformable_group</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>grad_input</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>grad_input</code> must be size like <code>input</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>weight</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>O,I/group,H,W[,L]</code>\uff0c<code>O</code>must be divisible by<code>group</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>grad_weight</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>grad_weight</code> must be size like <code>weight</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>bias</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>[O]</code>, if <code>with_bias=true</code>, <code>bias</code> must be non-null</td>\n</tr>\n<tr>\n<td align=\"center\"><code>grad_bias</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>grad_bias</code> must be size like <code>bias</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>offset</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>B,deformable_group*2*kernel_h*kernel_w,H,W</code> <code>B,deformable_group*3*kernel_h*kernel_w*kernel_l,H,W,L</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>grad_offset</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>grad_offset</code> must be size like <code>offset</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>mask</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>B,deformable_group*kernel_h*kernel_w,H,W</code> <code>B,deformable_group*kernel_h*kernel_w*kernel_l,H,W,L</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>grad_mask</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>grad_mask</code> must be size like <code>mask</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>output</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>B,O,OH,OW[,OL]</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>grad_output</code></td>\n<td align=\"center\"><code>at::Tensor</code></td>\n<td align=\"center\"><code>grad_output</code> must be size like <code>output</code></td>\n</tr></tbody></table>\n<h2>2.Python Code</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Class Name</th>\n<th align=\"center\">Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>class DeformConv2dFunction</code></td>\n<td align=\"center\"><code>torch.autograd.Function</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>class ModulatedDeformConv2dFunction</code></td>\n<td align=\"center\"><code>torch.autograd.Function</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>class DeformConv3dFunction</code></td>\n<td align=\"center\"><code>torch.autograd.Function</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>class ModulatedDeformConv3dFunction</code></td>\n<td align=\"center\"><code>torch.autograd.Function</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>class DeformConv2d</code></td>\n<td align=\"center\"><code>torch.nn.Module</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>class ModulatedDeformConv2d</code></td>\n<td align=\"center\"><code>torch.nn.Module</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>class DeformConv3d</code></td>\n<td align=\"center\"><code>torch.nn.Module</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>class ModulatedDeformConv3d</code></td>\n<td align=\"center\"><code>torch.nn.Module</code></td>\n</tr></tbody></table>\n<h2>Author</h2>\n<p><strong>Xin Qiao</strong> <code>qiaoxin182@gmail.com</code></p>\n<ul>\n<li><a href=\"https://github.com/chonspqx\" rel=\"nofollow\">github/chonspqx</a></li>\n</ul>\n<h2>License</h2>\n<p>Copyright (c) 2020 Xin Qiao\nReleased under the MIT license</p>\n\n          </div>"}, "last_serial": 6826123, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "eda404caf0a35edf2925958438f88e56", "sha256": "2dc163f2bb11ca018cd868836b068e8cb76475b454095c3d91d29528ef2468e8"}, "downloads": -1, "filename": "modulated_deform_conv-1.0.1.tar.gz", "has_sig": false, "md5_digest": "eda404caf0a35edf2925958438f88e56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17151, "upload_time": "2020-02-15T22:26:24", "upload_time_iso_8601": "2020-02-15T22:26:24.331809Z", "url": "https://files.pythonhosted.org/packages/ab/2a/bd61a714079b8e5fedc03c4ee669fde87c4d2c6008be0da58010a3b98e1c/modulated_deform_conv-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2de19b1d879fe5e20093e73d9549a41b", "sha256": "ba9c55559cf6dd4d22859fd51d0de00bfb22229c38f7955a7e3ca08e2712fa8c"}, "downloads": -1, "filename": "modulated_deform_conv-1.0.2-py3.7-linux-x86_64.egg", "has_sig": false, "md5_digest": "2de19b1d879fe5e20093e73d9549a41b", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 1734470, "upload_time": "2020-03-17T05:10:11", "upload_time_iso_8601": "2020-03-17T05:10:11.532235Z", "url": "https://files.pythonhosted.org/packages/e8/21/6b60071b56ce578b9f0450eea6e789757bf238945a3d2b2d6d2e1036ec4f/modulated_deform_conv-1.0.2-py3.7-linux-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dc09062ce4edd19e3b248bec1dcd5a6", "sha256": "fd63511d2a7861ce5c0fc8af4d73d6c4a97191164719cb47a41a951712c6aa85"}, "downloads": -1, "filename": "modulated_deform_conv-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8dc09062ce4edd19e3b248bec1dcd5a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19832, "upload_time": "2020-03-17T05:10:13", "upload_time_iso_8601": "2020-03-17T05:10:13.573710Z", "url": "https://files.pythonhosted.org/packages/e2/82/b505131895b0b685385c596c05b77167c6937de456295bcdece60e5e0bf4/modulated_deform_conv-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2de19b1d879fe5e20093e73d9549a41b", "sha256": "ba9c55559cf6dd4d22859fd51d0de00bfb22229c38f7955a7e3ca08e2712fa8c"}, "downloads": -1, "filename": "modulated_deform_conv-1.0.2-py3.7-linux-x86_64.egg", "has_sig": false, "md5_digest": "2de19b1d879fe5e20093e73d9549a41b", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 1734470, "upload_time": "2020-03-17T05:10:11", "upload_time_iso_8601": "2020-03-17T05:10:11.532235Z", "url": "https://files.pythonhosted.org/packages/e8/21/6b60071b56ce578b9f0450eea6e789757bf238945a3d2b2d6d2e1036ec4f/modulated_deform_conv-1.0.2-py3.7-linux-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "8dc09062ce4edd19e3b248bec1dcd5a6", "sha256": "fd63511d2a7861ce5c0fc8af4d73d6c4a97191164719cb47a41a951712c6aa85"}, "downloads": -1, "filename": "modulated_deform_conv-1.0.2.tar.gz", "has_sig": false, "md5_digest": "8dc09062ce4edd19e3b248bec1dcd5a6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19832, "upload_time": "2020-03-17T05:10:13", "upload_time_iso_8601": "2020-03-17T05:10:13.573710Z", "url": "https://files.pythonhosted.org/packages/e2/82/b505131895b0b685385c596c05b77167c6937de456295bcdece60e5e0bf4/modulated_deform_conv-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:44 2020"}