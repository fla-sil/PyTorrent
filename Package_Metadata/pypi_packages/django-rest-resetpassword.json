{"info": {"author": "Joshua Chinemezu", "author_email": "joshuachinemezu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# Django Rest Password Reset\n\nThis python package provides a simple password reset strategy for django rest framework, where users can request password\nreset tokens via their registered e-mail address.\n\nCredits - https://github.com/anexia-it/django-rest-passwordreset\n\nThe main idea behind this package is to not make any assumptions about how the token is delivered to the end-user (e-mail, text-message, etc...) and to major issues in the origin package.\nAlso, this package provides a signal that can be reacted on (e.g., by sending an e-mail or a text message).\n\nThis package basically provides two REST endpoints:\n\n- Request a token\n- Verify (confirm) a token (and change the password)\n\n## Quickstart\n\n1. Install the package from pypi using pip:\n\n```bash\npip install django-rest-resetpassword\n```\n\n2. Add `django_rest_resetpassword` to your `INSTALLED_APPS` (after `rest_framework`) within your Django settings file:\n\n```python\nINSTALLED_APPS = (\n    ...\n    'django.contrib.auth',\n    ...\n    'rest_framework',\n    ...\n    'django_rest_resetpassword',\n    ...\n)\n```\n\n3. This package stores tokens in a separate database table (see [django_rest_resetpassword/models.py](django_rest_resetpassword/models.py)). Therefore, you have to run django migrations:\n\n```bash\npython manage.py migrate\n```\n\n4. This package provides two endpoints, which can be included by including `django_rest_resetpassword.urls` in your `urls.py` as follows:\n\n```python\nfrom django.conf.urls import url, include\n\n\nurlpatterns = [\n    ...\n    url(r'^accounts/password-reset/',\n        include('django_rest_resetpassword.urls', namespace='password_reset')),\n    ...\n]\n```\n\n**Note**: You can adapt the url to your needs.\n\n### Endpoints\n\nThe following endpoints are provided:\n\n- `POST ${API_URL}/password-reset/` - request a reset password token by using the `email` parameter\n- `POST ${API_URL}//password-reset/validate_token/` - will return a 200 if a given `token` is valid\n- `POST ${API_URL}password-reset/confirm/` - using a valid `token`, the users password is set to the provided `password`\n\nwhere `${API_URL}/` is the url specified in your _urls.py_ (e.g., `api/password_reset/`)\n\n### Signals\n\n- `reset_password_token_created(sender, instance, reset_password_token)` Fired when a reset password token is generated\n- `pre_password_reset(user)` - fired just before a password is being reset\n- `post_password_reset(user)` - fired after a password has been reset\n\n### Example for sending an e-mail\n\n1. Create two new django templates: `email/user_reset_password.html` and `email/user_reset_password.txt`. Those templates will contain the e-mail message sent to the user, aswell as the password reset link (or token).\n   Within the templates, you can access the following context variables: `current_user`, `username`, `email`, `reset_password_url`. Feel free to adapt this to your needs.\n\n2. Add the following code, which contains a Django Signal Receiver (`@receiver(...)`), to your application. Take care where to put this code, as it needs to be executed by the python interpreter (see the section _The `reset_password_token_created` signal is not fired_ below, aswell as [this part of the django documentation](https://docs.djangoproject.com/en/1.11/topics/signals/#connecting-receiver-functions) and [How to Create Django Signals Tutorial](https://simpleisbetterthancomplex.com/tutorial/2016/07/28/how-to-create-django-signals.html) for more information).\n\n```python\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.dispatch import receiver\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\n\nfrom django_rest_resetpassword.signals import reset_password_token_created\n\n\n@receiver(reset_password_token_created)\ndef password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):\n    \"\"\"\n    Handles password reset tokens\n    When a token is created, an e-mail needs to be sent to the user\n    :param sender: View Class that sent the signal\n    :param instance: View Instance that sent the signal\n    :param reset_password_token: Token Model Object\n    :param args:\n    :param kwargs:\n    :return:\n    \"\"\"\n    # send an e-mail to the user\n    context = {\n        'current_user': reset_password_token.user,\n        'username': reset_password_token.user.username,\n        'email': reset_password_token.user.email,\n        'reset_password_url': \"{}?token={}\".format(reverse('password_reset:reset-password-request'), reset_password_token.key)\n    }\n\n    # render email text\n    email_html_message = render_to_string('email/user_reset_password.html', context)\n    email_plaintext_message = render_to_string('email/user_reset_password.txt', context)\n\n    msg = EmailMultiAlternatives(\n        # title:\n        \"Password Reset for {title}\".format(title=\"Some website title\"),\n        # message:\n        email_plaintext_message,\n        # from:\n        \"noreply@somehost.local\",\n        # to:\n        [reset_password_token.user.email]\n    )\n    msg.attach_alternative(email_html_message, \"text/html\")\n    msg.send()\n\n```\n\n3. You should now be able to use the endpoints to request a password reset token via your e-mail address.\n   If you want to test this locally, I recommend using some kind of fake mailserver (such as maildump).\n\n# Configuration / Settings\n\nThe following settings can be set in Djangos `settings.py` file:\n\n- `DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME` - time in hours about how long the token is active (Default: 24)\n\n  **Please note**: expired tokens are automatically cleared based on this setting in every call of `ResetPasswordRequestToken.post`.\n\n- `DJANGO_REST_RESETPASSWORD_NO_INFORMATION_LEAKAGE` - will cause a 200 to be returned on `POST ${API_URL}/reset_password/`\n  even if the user doesn't exist in the databse (Default: False)\n\n- `DJANGO_REST_MULTITOKENAUTH_REQUIRE_USABLE_PASSWORD` - allows password reset for a user that does not\n  [have a usable password](https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.User.has_usable_password) (Default: True)\n\n## Custom Email Lookup\n\nBy default, `email` lookup is used to find the user instance. You can change that by adding\n\n```python\nDJANGO_REST_LOOKUP_FIELD = 'custom_email_field'\n```\n\ninto Django settings.py file.\n\n## Custom Remote IP Address and User Agent Header Lookup\n\nIf your setup demands that the IP adress of the user is in another header (e.g., 'X-Forwarded-For'), you can configure that (using Django Request Headers):\n\n```python\nDJANGO_REST_RESETPASSWORD_IP_ADDRESS_HEADER = 'HTTP_X_FORWARDED_FOR'\n```\n\nThe same is true for the user agent:\n\n```python\nHTTP_USER_AGENT_HEADER = 'HTTP_USER_AGENT'\n```\n\n## Custom Token Generator\n\nBy default, a random string token of length 10 to 50 is generated using the `RandomStringTokenGenerator` class.\nThis library offers a possibility to configure the params of `RandomStringTokenGenerator` as well as switch to\nanother token generator, e.g. `RandomNumberTokenGenerator`. You can also generate your own token generator class.\n\nYou can change that by adding\n\n```python\nDJANGO_REST_RESETPASSWORD_TOKEN_CONFIG = {\n    \"CLASS\": ...,\n    \"OPTIONS\": {...}\n}\n```\n\ninto Django settings.py file.\n\n### RandomStringTokenGenerator\n\nThis is the default configuration.\n\n```python\nDJANGO_REST_RESETPASSWORD_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_resetpassword.tokens.RandomStringTokenGenerator\"\n}\n```\n\nYou can configure the length as follows:\n\n```python\nDJANGO_REST_RESETPASSWORD_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_resetpassword.tokens.RandomStringTokenGenerator\",\n    \"OPTIONS\": {\n        \"min_length\": 20,\n        \"max_length\": 30\n    }\n}\n```\n\nIt uses `os.urandom()` to generate a good random string.\n\n### RandomNumberTokenGenerator\n\n```python\nDJANGO_REST_RESETPASSWORD_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_resetpassword.tokens.RandomNumberTokenGenerator\"\n}\n```\n\nYou can configure the minimum and maximum number as follows:\n\n```python\nDJANGO_REST_RESETPASSWORD_TOKEN_CONFIG = {\n    \"CLASS\": \"django_rest_resetpassword.tokens.RandomNumberTokenGenerator\",\n    \"OPTIONS\": {\n        \"min_number\": 1500,\n        \"max_number\": 9999\n    }\n}\n```\n\nIt uses `random.SystemRandom().randint()` to generate a good random number.\n\n### Write your own Token Generator\n\nPlease see [token_configuration/django_rest_resetpassword/tokens.py](token_configuration/django_rest_resetpassword/tokens.py) for example implementation of number and string token generator.\n\nThe basic idea is to create a new class that inherits from BaseTokenGenerator, takes arbitrary arguments (`args` and `kwargs`)\nin the `__init__` function as well as implementing a `generate_token` function.\n\n```python\nfrom django_rest_resetpassword.tokens import BaseTokenGenerator\n\n\nclass RandomStringTokenGenerator(BaseTokenGenerator):\n    \"\"\"\n    Generates a random string with min and max length using os.urandom and binascii.hexlify\n    \"\"\"\n\n    def __init__(self, min_length=10, max_length=50, *args, **kwargs):\n        self.min_length = min_length\n        self.max_length = max_length\n\n    def generate_token(self, *args, **kwargs):\n        \"\"\" generates a pseudo random code using os.urandom and binascii.hexlify \"\"\"\n        # determine the length based on min_length and max_length\n        length = random.randint(self.min_length, self.max_length)\n\n        # generate the token using os.urandom and hexlify\n        return binascii.hexlify(\n            os.urandom(self.max_length)\n        ).decode()[0:length]\n```\n\n## Documentation / Browsable API\n\nThis package supports the [DRF auto-generated documentation](https://www.django-rest-framework.org/topics/documenting-your-api/) (via `coreapi`) as well as the [DRF browsable API](https://www.django-rest-framework.org/topics/browsable-api/).\n\n![drf_browsable_email_validation](docs/browsable_api_email_validation.png 'Browsable API E-Mail Validation')\n\n![drf_browsable_password_validation](docs/browsable_api_password_validation.png 'Browsable API E-Mail Validation')\n\n![coreapi_docs](docs/coreapi_docs.png 'Core API Docs')\n\n## Known Issues / FAQ\n\n### Django 2.1 Migrations - Multiple Primary keys for table ...\n\nDjango 2.1 introduced a breaking change for migrations (see [Django Issue #29790](https://code.djangoproject.com/ticket/29790)). We therefore had to rewrite the migration [0002_pk_migration.py](django_rest_resetpassword/migrations/0002_pk_migration.py) such that it covers Django versions before (`<`) 2.1 and later (`>=`) 2.1.\n\nSome information is written down in Issue #8.\n\n### The `reset_password_token_created` signal is not fired\n\nYou need to make sure that the code with `@receiver(reset_password_token_created)` is executed by the python interpreter. To ensure this, you have two options:\n\n1. Put the code at a place that is automatically loaded by Django (e.g., models.py, views.py), or\n\n2. Import the file that contains the signal within your app.py `ready` function:\n\n   _some_app/signals.py_\n\n```python\nfrom django.core.mail import EmailMultiAlternatives\nfrom django.dispatch import receiver\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\n\nfrom django_rest_resetpassword.signals import reset_password_token_created\n\n\n@receiver(reset_password_token_created)\ndef password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):\n    # ...\n```\n\n_some_app/app.py_\n\n```python\nfrom django.apps import AppConfig\n\nclass SomeAppConfig(AppConfig):\n    name = 'your_django_project.some_app'\n    verbose_name = 'Some App'\n\n    def ready(self):\n        import your_django_project.some_app.signals  # noqa\n```\n\n_some_app/**init**.py_\n\n```python\ndefault_app_config = 'your_django_project.some_app.SomeAppConfig'\n```\n\n### MongoDB not working\n\nApparently, the following piece of code in the Django Model prevents MongodB from working:\n\n```python\n id = models.AutoField(\n     primary_key=True\n )\n```\n\nSee issue #49 for details.\n\n## Contributions\n\nThis library tries to follow the unix philosophy of \"do one thing and do it well\" (which is providing a basic password reset endpoint for Django Rest Framework). Contributions are welcome in the form of pull requests and issues! If you create a pull request, please make sure that you are not introducing breaking changes.\n\n## Tests\n\nSee folder [tests/](tests/). Basically, all endpoints are covered with multiple\nunit tests.\n\nUse this code snippet to run tests:\n\n```bash\npip install -r requirements_test.txt\npython setup.py install\ncd tests\npython manage.py test\n```\n\n## Release on PyPi\n\nTo release this package on pypi, the following steps are used:\n\n```bash\nrm -rf dist/ build/\npython setup.py sdist\ntwine upload dist/*\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joshuachinemezu/django-rest-resetpassword.git", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "django-rest-resetpassword", "package_url": "https://pypi.org/project/django-rest-resetpassword/", "platform": "", "project_url": "https://pypi.org/project/django-rest-resetpassword/", "project_urls": {"Homepage": "https://github.com/joshuachinemezu/django-rest-resetpassword.git"}, "release_url": "https://pypi.org/project/django-rest-resetpassword/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "An extension of django rest framework, providing a configurable password reset strategy", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django Rest Password Reset</h1>\n<p>This python package provides a simple password reset strategy for django rest framework, where users can request password\nreset tokens via their registered e-mail address.</p>\n<p>Credits - <a href=\"https://github.com/anexia-it/django-rest-passwordreset\" rel=\"nofollow\">https://github.com/anexia-it/django-rest-passwordreset</a></p>\n<p>The main idea behind this package is to not make any assumptions about how the token is delivered to the end-user (e-mail, text-message, etc...) and to major issues in the origin package.\nAlso, this package provides a signal that can be reacted on (e.g., by sending an e-mail or a text message).</p>\n<p>This package basically provides two REST endpoints:</p>\n<ul>\n<li>Request a token</li>\n<li>Verify (confirm) a token (and change the password)</li>\n</ul>\n<h2>Quickstart</h2>\n<ol>\n<li>Install the package from pypi using pip:</li>\n</ol>\n<pre>pip install django-rest-resetpassword\n</pre>\n<ol>\n<li>Add <code>django_rest_resetpassword</code> to your <code>INSTALLED_APPS</code> (after <code>rest_framework</code>) within your Django settings file:</li>\n</ol>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'django.contrib.auth'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'rest_framework'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'django_rest_resetpassword'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">)</span>\n</pre>\n<ol>\n<li>This package stores tokens in a separate database table (see <a href=\"django_rest_resetpassword/models.py\" rel=\"nofollow\">django_rest_resetpassword/models.py</a>). Therefore, you have to run django migrations:</li>\n</ol>\n<pre>python manage.py migrate\n</pre>\n<ol>\n<li>This package provides two endpoints, which can be included by including <code>django_rest_resetpassword.urls</code> in your <code>urls.py</code> as follows:</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^accounts/password-reset/'</span><span class=\"p\">,</span>\n        <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'django_rest_resetpassword.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'password_reset'</span><span class=\"p\">)),</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>Note</strong>: You can adapt the url to your needs.</p>\n<h3>Endpoints</h3>\n<p>The following endpoints are provided:</p>\n<ul>\n<li><code>POST ${API_URL}/password-reset/</code> - request a reset password token by using the <code>email</code> parameter</li>\n<li><code>POST ${API_URL}//password-reset/validate_token/</code> - will return a 200 if a given <code>token</code> is valid</li>\n<li><code>POST ${API_URL}password-reset/confirm/</code> - using a valid <code>token</code>, the users password is set to the provided <code>password</code></li>\n</ul>\n<p>where <code>${API_URL}/</code> is the url specified in your <em>urls.py</em> (e.g., <code>api/password_reset/</code>)</p>\n<h3>Signals</h3>\n<ul>\n<li><code>reset_password_token_created(sender, instance, reset_password_token)</code> Fired when a reset password token is generated</li>\n<li><code>pre_password_reset(user)</code> - fired just before a password is being reset</li>\n<li><code>post_password_reset(user)</code> - fired after a password has been reset</li>\n</ul>\n<h3>Example for sending an e-mail</h3>\n<ol>\n<li>\n<p>Create two new django templates: <code>email/user_reset_password.html</code> and <code>email/user_reset_password.txt</code>. Those templates will contain the e-mail message sent to the user, aswell as the password reset link (or token).\nWithin the templates, you can access the following context variables: <code>current_user</code>, <code>username</code>, <code>email</code>, <code>reset_password_url</code>. Feel free to adapt this to your needs.</p>\n</li>\n<li>\n<p>Add the following code, which contains a Django Signal Receiver (<code>@receiver(...)</code>), to your application. Take care where to put this code, as it needs to be executed by the python interpreter (see the section <em>The <code>reset_password_token_created</code> signal is not fired</em> below, aswell as <a href=\"https://docs.djangoproject.com/en/1.11/topics/signals/#connecting-receiver-functions\" rel=\"nofollow\">this part of the django documentation</a> and <a href=\"https://simpleisbetterthancomplex.com/tutorial/2016/07/28/how-to-create-django-signals.html\" rel=\"nofollow\">How to Create Django Signals Tutorial</a> for more information).</p>\n</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">EmailMultiAlternatives</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">receiver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.loader</span> <span class=\"kn\">import</span> <span class=\"n\">render_to_string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django_rest_resetpassword.signals</span> <span class=\"kn\">import</span> <span class=\"n\">reset_password_token_created</span>\n\n\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">reset_password_token_created</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">password_reset_token_created</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">reset_password_token</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Handles password reset tokens</span>\n<span class=\"sd\">    When a token is created, an e-mail needs to be sent to the user</span>\n<span class=\"sd\">    :param sender: View Class that sent the signal</span>\n<span class=\"sd\">    :param instance: View Instance that sent the signal</span>\n<span class=\"sd\">    :param reset_password_token: Token Model Object</span>\n<span class=\"sd\">    :param args:</span>\n<span class=\"sd\">    :param kwargs:</span>\n<span class=\"sd\">    :return:</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># send an e-mail to the user</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'current_user'</span><span class=\"p\">:</span> <span class=\"n\">reset_password_token</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span>\n        <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"n\">reset_password_token</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">,</span>\n        <span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"n\">reset_password_token</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">,</span>\n        <span class=\"s1\">'reset_password_url'</span><span class=\"p\">:</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">?token=</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s1\">'password_reset:reset-password-request'</span><span class=\"p\">),</span> <span class=\"n\">reset_password_token</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\"># render email text</span>\n    <span class=\"n\">email_html_message</span> <span class=\"o\">=</span> <span class=\"n\">render_to_string</span><span class=\"p\">(</span><span class=\"s1\">'email/user_reset_password.html'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n    <span class=\"n\">email_plaintext_message</span> <span class=\"o\">=</span> <span class=\"n\">render_to_string</span><span class=\"p\">(</span><span class=\"s1\">'email/user_reset_password.txt'</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">EmailMultiAlternatives</span><span class=\"p\">(</span>\n        <span class=\"c1\"># title:</span>\n        <span class=\"s2\">\"Password Reset for </span><span class=\"si\">{title}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Some website title\"</span><span class=\"p\">),</span>\n        <span class=\"c1\"># message:</span>\n        <span class=\"n\">email_plaintext_message</span><span class=\"p\">,</span>\n        <span class=\"c1\"># from:</span>\n        <span class=\"s2\">\"noreply@somehost.local\"</span><span class=\"p\">,</span>\n        <span class=\"c1\"># to:</span>\n        <span class=\"p\">[</span><span class=\"n\">reset_password_token</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">attach_alternative</span><span class=\"p\">(</span><span class=\"n\">email_html_message</span><span class=\"p\">,</span> <span class=\"s2\">\"text/html\"</span><span class=\"p\">)</span>\n    <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n</pre>\n<ol>\n<li>You should now be able to use the endpoints to request a password reset token via your e-mail address.\nIf you want to test this locally, I recommend using some kind of fake mailserver (such as maildump).</li>\n</ol>\n<h1>Configuration / Settings</h1>\n<p>The following settings can be set in Djangos <code>settings.py</code> file:</p>\n<ul>\n<li>\n<p><code>DJANGO_REST_MULTITOKENAUTH_RESET_TOKEN_EXPIRY_TIME</code> - time in hours about how long the token is active (Default: 24)</p>\n<p><strong>Please note</strong>: expired tokens are automatically cleared based on this setting in every call of <code>ResetPasswordRequestToken.post</code>.</p>\n</li>\n<li>\n<p><code>DJANGO_REST_RESETPASSWORD_NO_INFORMATION_LEAKAGE</code> - will cause a 200 to be returned on <code>POST ${API_URL}/reset_password/</code>\neven if the user doesn't exist in the databse (Default: False)</p>\n</li>\n<li>\n<p><code>DJANGO_REST_MULTITOKENAUTH_REQUIRE_USABLE_PASSWORD</code> - allows password reset for a user that does not\n<a href=\"https://docs.djangoproject.com/en/2.2/ref/contrib/auth/#django.contrib.auth.models.User.has_usable_password\" rel=\"nofollow\">have a usable password</a> (Default: True)</p>\n</li>\n</ul>\n<h2>Custom Email Lookup</h2>\n<p>By default, <code>email</code> lookup is used to find the user instance. You can change that by adding</p>\n<pre><span class=\"n\">DJANGO_REST_LOOKUP_FIELD</span> <span class=\"o\">=</span> <span class=\"s1\">'custom_email_field'</span>\n</pre>\n<p>into Django settings.py file.</p>\n<h2>Custom Remote IP Address and User Agent Header Lookup</h2>\n<p>If your setup demands that the IP adress of the user is in another header (e.g., 'X-Forwarded-For'), you can configure that (using Django Request Headers):</p>\n<pre><span class=\"n\">DJANGO_REST_RESETPASSWORD_IP_ADDRESS_HEADER</span> <span class=\"o\">=</span> <span class=\"s1\">'HTTP_X_FORWARDED_FOR'</span>\n</pre>\n<p>The same is true for the user agent:</p>\n<pre><span class=\"n\">HTTP_USER_AGENT_HEADER</span> <span class=\"o\">=</span> <span class=\"s1\">'HTTP_USER_AGENT'</span>\n</pre>\n<h2>Custom Token Generator</h2>\n<p>By default, a random string token of length 10 to 50 is generated using the <code>RandomStringTokenGenerator</code> class.\nThis library offers a possibility to configure the params of <code>RandomStringTokenGenerator</code> as well as switch to\nanother token generator, e.g. <code>RandomNumberTokenGenerator</code>. You can also generate your own token generator class.</p>\n<p>You can change that by adding</p>\n<pre><span class=\"n\">DJANGO_REST_RESETPASSWORD_TOKEN_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"CLASS\"</span><span class=\"p\">:</span> <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>into Django settings.py file.</p>\n<h3>RandomStringTokenGenerator</h3>\n<p>This is the default configuration.</p>\n<pre><span class=\"n\">DJANGO_REST_RESETPASSWORD_TOKEN_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"CLASS\"</span><span class=\"p\">:</span> <span class=\"s2\">\"django_rest_resetpassword.tokens.RandomStringTokenGenerator\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can configure the length as follows:</p>\n<pre><span class=\"n\">DJANGO_REST_RESETPASSWORD_TOKEN_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"CLASS\"</span><span class=\"p\">:</span> <span class=\"s2\">\"django_rest_resetpassword.tokens.RandomStringTokenGenerator\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"min_length\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"max_length\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>It uses <code>os.urandom()</code> to generate a good random string.</p>\n<h3>RandomNumberTokenGenerator</h3>\n<pre><span class=\"n\">DJANGO_REST_RESETPASSWORD_TOKEN_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"CLASS\"</span><span class=\"p\">:</span> <span class=\"s2\">\"django_rest_resetpassword.tokens.RandomNumberTokenGenerator\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can configure the minimum and maximum number as follows:</p>\n<pre><span class=\"n\">DJANGO_REST_RESETPASSWORD_TOKEN_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"CLASS\"</span><span class=\"p\">:</span> <span class=\"s2\">\"django_rest_resetpassword.tokens.RandomNumberTokenGenerator\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"OPTIONS\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"min_number\"</span><span class=\"p\">:</span> <span class=\"mi\">1500</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"max_number\"</span><span class=\"p\">:</span> <span class=\"mi\">9999</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>It uses <code>random.SystemRandom().randint()</code> to generate a good random number.</p>\n<h3>Write your own Token Generator</h3>\n<p>Please see <a href=\"token_configuration/django_rest_resetpassword/tokens.py\" rel=\"nofollow\">token_configuration/django_rest_resetpassword/tokens.py</a> for example implementation of number and string token generator.</p>\n<p>The basic idea is to create a new class that inherits from BaseTokenGenerator, takes arbitrary arguments (<code>args</code> and <code>kwargs</code>)\nin the <code>__init__</code> function as well as implementing a <code>generate_token</code> function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_rest_resetpassword.tokens</span> <span class=\"kn\">import</span> <span class=\"n\">BaseTokenGenerator</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RandomStringTokenGenerator</span><span class=\"p\">(</span><span class=\"n\">BaseTokenGenerator</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Generates a random string with min and max length using os.urandom and binascii.hexlify</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_length</span> <span class=\"o\">=</span> <span class=\"n\">min_length</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"n\">max_length</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">generate_token</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\" generates a pseudo random code using os.urandom and binascii.hexlify \"\"\"</span>\n        <span class=\"c1\"># determine the length based on min_length and max_length</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_length</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_length</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># generate the token using os.urandom and hexlify</span>\n        <span class=\"k\">return</span> <span class=\"n\">binascii</span><span class=\"o\">.</span><span class=\"n\">hexlify</span><span class=\"p\">(</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">urandom</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_length</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"n\">length</span><span class=\"p\">]</span>\n</pre>\n<h2>Documentation / Browsable API</h2>\n<p>This package supports the <a href=\"https://www.django-rest-framework.org/topics/documenting-your-api/\" rel=\"nofollow\">DRF auto-generated documentation</a> (via <code>coreapi</code>) as well as the <a href=\"https://www.django-rest-framework.org/topics/browsable-api/\" rel=\"nofollow\">DRF browsable API</a>.</p>\n<p><img alt=\"drf_browsable_email_validation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/309ec62ba5c1ca97bc3e1ea79d05f4ca0b62caa3/646f63732f62726f777361626c655f6170695f656d61696c5f76616c69646174696f6e2e706e67\"></p>\n<p><img alt=\"drf_browsable_password_validation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea82940bfc39745971c87995ed3c2156d32a3c70/646f63732f62726f777361626c655f6170695f70617373776f72645f76616c69646174696f6e2e706e67\"></p>\n<p><img alt=\"coreapi_docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/791c03aa4acde5361ba603577f3cd29b712e7331/646f63732f636f72656170695f646f63732e706e67\"></p>\n<h2>Known Issues / FAQ</h2>\n<h3>Django 2.1 Migrations - Multiple Primary keys for table ...</h3>\n<p>Django 2.1 introduced a breaking change for migrations (see <a href=\"https://code.djangoproject.com/ticket/29790\" rel=\"nofollow\">Django Issue #29790</a>). We therefore had to rewrite the migration <a href=\"django_rest_resetpassword/migrations/0002_pk_migration.py\" rel=\"nofollow\">0002_pk_migration.py</a> such that it covers Django versions before (<code>&lt;</code>) 2.1 and later (<code>&gt;=</code>) 2.1.</p>\n<p>Some information is written down in Issue #8.</p>\n<h3>The <code>reset_password_token_created</code> signal is not fired</h3>\n<p>You need to make sure that the code with <code>@receiver(reset_password_token_created)</code> is executed by the python interpreter. To ensure this, you have two options:</p>\n<ol>\n<li>\n<p>Put the code at a place that is automatically loaded by Django (e.g., models.py, views.py), or</p>\n</li>\n<li>\n<p>Import the file that contains the signal within your app.py <code>ready</code> function:</p>\n<p><em>some_app/signals.py</em></p>\n</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">EmailMultiAlternatives</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">receiver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.loader</span> <span class=\"kn\">import</span> <span class=\"n\">render_to_string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django_rest_resetpassword.signals</span> <span class=\"kn\">import</span> <span class=\"n\">reset_password_token_created</span>\n\n\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">reset_password_token_created</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">password_reset_token_created</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">reset_password_token</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p><em>some_app/app.py</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SomeAppConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'your_django_project.some_app'</span>\n    <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"s1\">'Some App'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">your_django_project.some_app.signals</span>  <span class=\"c1\"># noqa</span>\n</pre>\n<p><em>some_app/<strong>init</strong>.py</em></p>\n<pre><span class=\"n\">default_app_config</span> <span class=\"o\">=</span> <span class=\"s1\">'your_django_project.some_app.SomeAppConfig'</span>\n</pre>\n<h3>MongoDB not working</h3>\n<p>Apparently, the following piece of code in the Django Model prevents MongodB from working:</p>\n<pre> <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">AutoField</span><span class=\"p\">(</span>\n     <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n <span class=\"p\">)</span>\n</pre>\n<p>See issue #49 for details.</p>\n<h2>Contributions</h2>\n<p>This library tries to follow the unix philosophy of \"do one thing and do it well\" (which is providing a basic password reset endpoint for Django Rest Framework). Contributions are welcome in the form of pull requests and issues! If you create a pull request, please make sure that you are not introducing breaking changes.</p>\n<h2>Tests</h2>\n<p>See folder <a href=\"tests/\" rel=\"nofollow\">tests/</a>. Basically, all endpoints are covered with multiple\nunit tests.</p>\n<p>Use this code snippet to run tests:</p>\n<pre>pip install -r requirements_test.txt\npython setup.py install\n<span class=\"nb\">cd</span> tests\npython manage.py <span class=\"nb\">test</span>\n</pre>\n<h2>Release on PyPi</h2>\n<p>To release this package on pypi, the following steps are used:</p>\n<pre>rm -rf dist/ build/\npython setup.py sdist\ntwine upload dist/*\n</pre>\n\n          </div>"}, "last_serial": 6452038, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2a15a3883d1b4f44c186902d7bdee69e", "sha256": "6cc2729137a2ac5305cc2864033ade83bd3b08c98436329ba471827a2d67b085"}, "downloads": -1, "filename": "django_rest_resetpassword-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2a15a3883d1b4f44c186902d7bdee69e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13044, "upload_time": "2020-01-14T13:29:39", "upload_time_iso_8601": "2020-01-14T13:29:39.410201Z", "url": "https://files.pythonhosted.org/packages/f3/46/dee8cdc72b4d5001cb4e0770ad3e683b0d126a7bbbe89fc9273de21e8889/django_rest_resetpassword-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2977a80c01278bf505748eafa74c91cd", "sha256": "83cf567be6e1cfc5116dc60324e42747d830c9e6188ed72377b1b2f1dbf7bc53"}, "downloads": -1, "filename": "django-rest-resetpassword-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2977a80c01278bf505748eafa74c91cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8714, "upload_time": "2020-01-14T13:29:42", "upload_time_iso_8601": "2020-01-14T13:29:42.080312Z", "url": "https://files.pythonhosted.org/packages/ec/36/1776f023389d9e14e2855bd51501547b4fc8041030adcdecf46c511eb9b3/django-rest-resetpassword-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "72022bdb48ad461d110f3a37a4ec6e34", "sha256": "5c143049e2457a1928b56ab32730c3fdfa1a4bd07310d45776a3fc9ca2f6036c"}, "downloads": -1, "filename": "django-rest-resetpassword-0.0.2.tar.gz", "has_sig": false, "md5_digest": "72022bdb48ad461d110f3a37a4ec6e34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10112, "upload_time": "2020-01-14T13:48:18", "upload_time_iso_8601": "2020-01-14T13:48:18.647208Z", "url": "https://files.pythonhosted.org/packages/ba/cd/16600c9e35d6441f39fc88caf4bd8d1b58debb8d6a74f0c0a9702426ad27/django-rest-resetpassword-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "cf6f96e1800cffca5359c044e382fe6e", "sha256": "28037b515e3d96b108dbaad95b1cb0b84bb11923f7e159d9c996a671ec5e4000"}, "downloads": -1, "filename": "django_rest_resetpassword-0.0.3.tar.gz", "has_sig": false, "md5_digest": "cf6f96e1800cffca5359c044e382fe6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10132, "upload_time": "2020-01-14T13:52:39", "upload_time_iso_8601": "2020-01-14T13:52:39.664111Z", "url": "https://files.pythonhosted.org/packages/a1/04/f66b5230482d655ac8c56bc7eeadfb3f6b3cc56dae8307878318fd17f8d6/django_rest_resetpassword-0.0.3.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "c1aa6cd0c482d5aab74c42fbe12ad5b6", "sha256": "3ad83f8446bbf12dd18cc95e5c5c80d4d2e58c35814666054e8570e1f50a0f23"}, "downloads": -1, "filename": "django_rest_resetpassword-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c1aa6cd0c482d5aab74c42fbe12ad5b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9942, "upload_time": "2020-01-14T13:56:57", "upload_time_iso_8601": "2020-01-14T13:56:57.723770Z", "url": "https://files.pythonhosted.org/packages/e2/c5/76d3c3e0b951e26ce38d69a4026dba320b7b3b93a76e8d95e3eed6d3e069/django_rest_resetpassword-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8bd17edfbee9d74a6b33fd255aa13521", "sha256": "7f8576aab20528e93cd7ae3f02f45ffc885b23a304226e5799656d5aa5f982a0"}, "downloads": -1, "filename": "django_rest_resetpassword-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8bd17edfbee9d74a6b33fd255aa13521", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9090, "upload_time": "2020-01-14T14:14:58", "upload_time_iso_8601": "2020-01-14T14:14:58.995933Z", "url": "https://files.pythonhosted.org/packages/b4/93/18e44d235c772f45bdde8f7e2cd31c6112a688e8e58a2fab0965cd70f1cb/django_rest_resetpassword-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "8d95c28184fa9baf60140235aca495b6", "sha256": "f09d8af6d878cf6732b1ffeff1f8fb3ee9dbd93c7639e08b1c450380ff8cd773"}, "downloads": -1, "filename": "django_rest_resetpassword-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8d95c28184fa9baf60140235aca495b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 198811, "upload_time": "2020-01-14T14:47:13", "upload_time_iso_8601": "2020-01-14T14:47:13.989079Z", "url": "https://files.pythonhosted.org/packages/6f/31/eb664a428ecc9bc4e8f0e99ee78a8c08fe315e0cbe582e31382a80bdc783/django_rest_resetpassword-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8d95c28184fa9baf60140235aca495b6", "sha256": "f09d8af6d878cf6732b1ffeff1f8fb3ee9dbd93c7639e08b1c450380ff8cd773"}, "downloads": -1, "filename": "django_rest_resetpassword-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8d95c28184fa9baf60140235aca495b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 198811, "upload_time": "2020-01-14T14:47:13", "upload_time_iso_8601": "2020-01-14T14:47:13.989079Z", "url": "https://files.pythonhosted.org/packages/6f/31/eb664a428ecc9bc4e8f0e99ee78a8c08fe315e0cbe582e31382a80bdc783/django_rest_resetpassword-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:00 2020"}