{"info": {"author": "Victor Klapholz", "author_email": "victor.klapholz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "*****************************************************************************************\n:fire:flask-json-api:fire:: Flask boilerplate setup code for REST application/json API's\n*****************************************************************************************\n\nThe **Flask JSON API** package provides boilerplate code for setting up REST based apps\nwritten with `Flask <https://github.com/pallets/flask>`_.\n\n\n\nInstalling flask-json-api\n=========================\n\n.. code-block:: bash\n\n  pip install flask-json-api\n\n\nUsing Flask JSON API\n====================\n\nUsing **Flak JSON API** is as easy as initiating it with the Flask app instance:\n\n.. code-block:: python\n\n    from flask import Flask\n\n    from flask_json_api import FlaskJsonApi\n\n    app = Flask(__name__)\n\n    flask_json_api = FlaskJsonApi(app)\n\nHow it works\n============\n\nThis package requires the ``application/json content-type`` header, or else an HTTP error will be returned:\n\n.. code-block:: python\n\n    import requests\n\n    # providing the application/json content type will succeed\n    url = 'http://localhost:5000/api'\n    headers = {'Content-Type': 'application/json'}\n\n    r = requests.get(url, headers=headers)\n\n    assert r.status_code == 200\n\n    # not providing the application/json content type will fail\n    url = 'http://localhost:5000/api'\n\n    r = requests.get(url)\n\n    assert r.status_code == 415\n\n\nRegister expected and unexpected exception types:\n=================================================\nAlthough all errors should be returned as JSON, you can register different exception types as:\n * ``Expected Errors`` - will return **400** http error code (and logged with WARNING level)\n * ``Unexpected Errors`` - will return **500** http error code (and logged with ERROR level)\n\n.. code-block:: python\n\n    class ExpectedError(Exception):\n    \"\"\"Expected error, such as Data Validation Error\"\"\"\n\n    class UnexpectedError(Exception):\n        \"\"\"Unexpected error, such as database is not accessible\"\"\"\n\n    flask_json_api.register_expected_exception(ExpectedError)\n    flask_json_api.register_unexpected_exception(UnexpectedError)\n\nWhitelisting paths that do not require application/json\n-------------------------------------------------------\nWhenever the ``flask.request.path`` starts with any of these ``exclude_paths``, then the\napplication/json header won't be required.\n\n.. code-block:: python\n\n    flask_json_api.set_application_json_exclude_paths(exclude_paths=['/home'])\n\n    # Please note that if the exclude_paths will contain '/',\n    # then no path will require the application/json content-type", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/py-ddd/flask-json-api", "keywords": "flask", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "flask-json-api", "package_url": "https://pypi.org/project/flask-json-api/", "platform": "", "project_url": "https://pypi.org/project/flask-json-api/", "project_urls": {"Homepage": "https://gitlab.com/py-ddd/flask-json-api"}, "release_url": "https://pypi.org/project/flask-json-api/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "The Flask JSON API package provides boilerplate code for setting up REST based apps.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>The <strong>Flask JSON API</strong> package provides boilerplate code for setting up REST based apps\nwritten with <a href=\"https://github.com/pallets/flask\" rel=\"nofollow\">Flask</a>.</p>\n<div id=\"installing-flask-json-api\">\n<h2>Installing flask-json-api</h2>\n<pre>pip install flask-json-api\n</pre>\n</div>\n<div id=\"using-flask-json-api\">\n<h2>Using Flask JSON API</h2>\n<p>Using <strong>Flak JSON API</strong> is as easy as initiating it with the Flask app instance:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">flask_json_api</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskJsonApi</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n<span class=\"n\">flask_json_api</span> <span class=\"o\">=</span> <span class=\"n\">FlaskJsonApi</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"how-it-works\">\n<h2>How it works</h2>\n<p>This package requires the <tt>application/json <span class=\"pre\">content-type</span></tt> header, or else an HTTP error will be returned:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"c1\"># providing the application/json content type will succeed</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:5000/api'</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">}</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n\n<span class=\"c1\"># not providing the application/json content type will fail</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:5000/api'</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">415</span>\n</pre>\n</div>\n<div id=\"register-expected-and-unexpected-exception-types\">\n<h2>Register expected and unexpected exception types:</h2>\n<dl>\n<dt>Although all errors should be returned as JSON, you can register different exception types as:</dt>\n<dd><ul>\n<li><tt>Expected Errors</tt> - will return <strong>400</strong> http error code (and logged with WARNING level)</li>\n<li><tt>Unexpected Errors</tt> - will return <strong>500</strong> http error code (and logged with ERROR level)</li>\n</ul>\n</dd>\n</dl>\n<pre><span class=\"k\">class</span> <span class=\"nc\">ExpectedError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n<span class=\"sd\">\"\"\"Expected error, such as Data Validation Error\"\"\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UnexpectedError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Unexpected error, such as database is not accessible\"\"\"</span>\n\n<span class=\"n\">flask_json_api</span><span class=\"o\">.</span><span class=\"n\">register_expected_exception</span><span class=\"p\">(</span><span class=\"n\">ExpectedError</span><span class=\"p\">)</span>\n<span class=\"n\">flask_json_api</span><span class=\"o\">.</span><span class=\"n\">register_unexpected_exception</span><span class=\"p\">(</span><span class=\"n\">UnexpectedError</span><span class=\"p\">)</span>\n</pre>\n<div id=\"whitelisting-paths-that-do-not-require-application-json\">\n<h3>Whitelisting paths that do not require application/json</h3>\n<p>Whenever the <tt>flask.request.path</tt> starts with any of these <tt>exclude_paths</tt>, then the\napplication/json header won\u2019t be required.</p>\n<pre><span class=\"n\">flask_json_api</span><span class=\"o\">.</span><span class=\"n\">set_application_json_exclude_paths</span><span class=\"p\">(</span><span class=\"n\">exclude_paths</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'/home'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Please note that if the exclude_paths will contain '/',</span>\n<span class=\"c1\"># then no path will require the application/json content-type</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3701994, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ba549df81c393363129f284010e3773d", "sha256": "4fc21069bc85ba1968c9fd36d2c8d4b1e0657568ed94735d07ef628e5d4fac2b"}, "downloads": -1, "filename": "flask-json-api-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ba549df81c393363129f284010e3773d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3460, "upload_time": "2018-03-24T18:27:09", "upload_time_iso_8601": "2018-03-24T18:27:09.926626Z", "url": "https://files.pythonhosted.org/packages/f9/87/d486b9b1381a896b77e196e097e37dfe6611c9ba5d805b6a6277adec6e3d/flask-json-api-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba549df81c393363129f284010e3773d", "sha256": "4fc21069bc85ba1968c9fd36d2c8d4b1e0657568ed94735d07ef628e5d4fac2b"}, "downloads": -1, "filename": "flask-json-api-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ba549df81c393363129f284010e3773d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3460, "upload_time": "2018-03-24T18:27:09", "upload_time_iso_8601": "2018-03-24T18:27:09.926626Z", "url": "https://files.pythonhosted.org/packages/f9/87/d486b9b1381a896b77e196e097e37dfe6611c9ba5d805b6a6277adec6e3d/flask-json-api-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:44 2020"}