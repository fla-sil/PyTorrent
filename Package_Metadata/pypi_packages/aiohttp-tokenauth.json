{"info": {"author": "Alexander Polishchuk", "author_email": "apolishchuk52@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: AsyncIO", "Intended Audience :: Developers", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "# aiohttp-tokenauth\n\nAiohttp simple token auth middleware that can check any token that assign to user or group of users in database or some another place.\n\n## Installation\n```bash\npip install aiohttp_tokenauth\n```\n\n## Documentation\n\n### Basic usage\nFirst of all, let's create a simple app.\n```python\n# Full text in example/simple_app.py\nfrom aiohttp import web\nfrom aiohttp_tokenauth import token_auth_middleware\n\n\nasync def example_resource(request):\n    return web.json_response(request['user'])\n\n\nasync def init():\n\n    async def user_loader(token: str):\n        \"\"\"Checks that token is valid\n\n        It's the callback that will get the token from \"Authorization\" header.\n        It can check that token is exist in a database or some another place.\n\n        Args:\n            token (str): A token from \"Authorization\" http header.\n\n        Returns:\n            Dict or something else. If the callback returns None then\n            the aiohttp.web.HTTPForbidden will be raised.\n        \"\"\"\n        user = None\n        if token == 'fake-token':\n            user = {'uuid': 'fake-uuid'}\n        return user\n\n    app = web.Application(middlewares=[token_auth_middleware(user_loader)])\n    app.router.add_get('/', example_resource)\n    return app\n\n\nif __name__ == '__main__':\n    web.run_app(init())\n```\nThen, run the aiohttp app.\n```bash\n$ python example/simple_app.py\n======== Running on http://0.0.0.0:8080 ========\n(Press CTRL+C to quit)\n```\nNow try to get access to url with token in \"Authorization\" header.\n```bash\n$ curl -H 'Authorization: Bearer fake-token' http://0.0.0.0:8080\n{\"uuid\": \"fake-uuid\"}\n```\nAnd result without token.\n```bash\n$ curl http://0.0.0.0:8080\n401: Missing authorization header\n```\n\n### Ignoring routes and http methods\nYou can ignore specific routes, app the paths to \"exclude_routes\".\n```python\napp = web.Application(middlewares=[\n    token_auth_middleware(\n        user_loader=user_loader,\n        # You can use regular expressions here\n        exclude_routes=('/exclude', r'/exclude/\\w+/info'),\n        exclude_methods=('POST',),\n    ),\n])\n```\n\n### Change auth scheme\nFor changing the scheme (prefix in \"Authorization\" header) use `auth_scheme` argument.\n```python\napp = web.Application(middlewares=[\n    token_auth_middleware(\n        user_loader=user_loader,\n        auth_scheme='Token',\n    ),\n])\n```\nNow such request is valid:\n```bash\n$ curl -H 'Authorization: Token fake-token' http://0.0.0.0:8080\n{\"uuid\": \"fake-uuid\"}\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/madnesspie/aiohttp-tokenauth", "keywords": "", "license": "GNU General Public License v3 or later (GPLv3+)", "maintainer": "", "maintainer_email": "", "name": "aiohttp-tokenauth", "package_url": "https://pypi.org/project/aiohttp-tokenauth/", "platform": "POSIX", "project_url": "https://pypi.org/project/aiohttp-tokenauth/", "project_urls": {"Homepage": "https://github.com/madnesspie/aiohttp-tokenauth"}, "release_url": "https://pypi.org/project/aiohttp-tokenauth/0.0.2/", "requires_dist": ["aiohttp"], "requires_python": "", "summary": "Simple way to add token auth level in your aiohttp app", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>aiohttp-tokenauth</h1>\n<p>Aiohttp simple token auth middleware that can check any token that assign to user or group of users in database or some another place.</p>\n<h2>Installation</h2>\n<pre>pip install aiohttp_tokenauth\n</pre>\n<h2>Documentation</h2>\n<h3>Basic usage</h3>\n<p>First of all, let's create a simple app.</p>\n<pre><span class=\"c1\"># Full text in example/simple_app.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp_tokenauth</span> <span class=\"kn\">import</span> <span class=\"n\">token_auth_middleware</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">example_resource</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">json_response</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s1\">'user'</span><span class=\"p\">])</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">init</span><span class=\"p\">():</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">user_loader</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Checks that token is valid</span>\n\n<span class=\"sd\">        It's the callback that will get the token from \"Authorization\" header.</span>\n<span class=\"sd\">        It can check that token is exist in a database or some another place.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            token (str): A token from \"Authorization\" http header.</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            Dict or something else. If the callback returns None then</span>\n<span class=\"sd\">            the aiohttp.web.HTTPForbidden will be raised.</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">token</span> <span class=\"o\">==</span> <span class=\"s1\">'fake-token'</span><span class=\"p\">:</span>\n            <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'uuid'</span><span class=\"p\">:</span> <span class=\"s1\">'fake-uuid'</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">user</span>\n\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">middlewares</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">token_auth_middleware</span><span class=\"p\">(</span><span class=\"n\">user_loader</span><span class=\"p\">)])</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">example_resource</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">run_app</span><span class=\"p\">(</span><span class=\"n\">init</span><span class=\"p\">())</span>\n</pre>\n<p>Then, run the aiohttp app.</p>\n<pre>$ python example/simple_app.py\n<span class=\"o\">========</span> Running on http://0.0.0.0:8080 <span class=\"o\">========</span>\n<span class=\"o\">(</span>Press CTRL+C to quit<span class=\"o\">)</span>\n</pre>\n<p>Now try to get access to url with token in \"Authorization\" header.</p>\n<pre>$ curl -H <span class=\"s1\">'Authorization: Bearer fake-token'</span> http://0.0.0.0:8080\n<span class=\"o\">{</span><span class=\"s2\">\"uuid\"</span>: <span class=\"s2\">\"fake-uuid\"</span><span class=\"o\">}</span>\n</pre>\n<p>And result without token.</p>\n<pre>$ curl http://0.0.0.0:8080\n<span class=\"m\">401</span>: Missing authorization header\n</pre>\n<h3>Ignoring routes and http methods</h3>\n<p>You can ignore specific routes, app the paths to \"exclude_routes\".</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">middlewares</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">token_auth_middleware</span><span class=\"p\">(</span>\n        <span class=\"n\">user_loader</span><span class=\"o\">=</span><span class=\"n\">user_loader</span><span class=\"p\">,</span>\n        <span class=\"c1\"># You can use regular expressions here</span>\n        <span class=\"n\">exclude_routes</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'/exclude'</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s1\">'/exclude/\\w+/info'</span><span class=\"p\">),</span>\n        <span class=\"n\">exclude_methods</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'POST'</span><span class=\"p\">,),</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">])</span>\n</pre>\n<h3>Change auth scheme</h3>\n<p>For changing the scheme (prefix in \"Authorization\" header) use <code>auth_scheme</code> argument.</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">(</span><span class=\"n\">middlewares</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"n\">token_auth_middleware</span><span class=\"p\">(</span>\n        <span class=\"n\">user_loader</span><span class=\"o\">=</span><span class=\"n\">user_loader</span><span class=\"p\">,</span>\n        <span class=\"n\">auth_scheme</span><span class=\"o\">=</span><span class=\"s1\">'Token'</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">])</span>\n</pre>\n<p>Now such request is valid:</p>\n<pre>$ curl -H <span class=\"s1\">'Authorization: Token fake-token'</span> http://0.0.0.0:8080\n<span class=\"o\">{</span><span class=\"s2\">\"uuid\"</span>: <span class=\"s2\">\"fake-uuid\"</span><span class=\"o\">}</span>\n</pre>\n\n          </div>"}, "last_serial": 6970576, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "8e5fac70b7ac4aaa57a3b3386fbbcd96", "sha256": "def68d3618e084cfb1f67c3f81042365b6eeee12f80dfe69ded7253ce397d052"}, "downloads": -1, "filename": "aiohttp_tokenauth-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8e5fac70b7ac4aaa57a3b3386fbbcd96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16276, "upload_time": "2020-04-07T14:55:37", "upload_time_iso_8601": "2020-04-07T14:55:37.389739Z", "url": "https://files.pythonhosted.org/packages/da/d5/d8ea93c585735352d3c320e6383cdedf3fbd336bf87f76f5fea69862cca0/aiohttp_tokenauth-0.0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e5fac70b7ac4aaa57a3b3386fbbcd96", "sha256": "def68d3618e084cfb1f67c3f81042365b6eeee12f80dfe69ded7253ce397d052"}, "downloads": -1, "filename": "aiohttp_tokenauth-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8e5fac70b7ac4aaa57a3b3386fbbcd96", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16276, "upload_time": "2020-04-07T14:55:37", "upload_time_iso_8601": "2020-04-07T14:55:37.389739Z", "url": "https://files.pythonhosted.org/packages/da/d5/d8ea93c585735352d3c320e6383cdedf3fbd336bf87f76f5fea69862cca0/aiohttp_tokenauth-0.0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 16:21:14 2020"}