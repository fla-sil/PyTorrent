{"info": {"author": "Canonical Landscape team", "author_email": "juju@lists.ubuntu.com", "bugtrack_url": null, "classifiers": [], "description": "***********************************\ntxjuju: a twisted-based Juju client\n***********************************\n\n``txjuju`` provides `twisted <https://twistedmatrix.com/>`_-based tools\nfor interacting with `Juju <http://www.ubuntu.com/cloud/juju>`_.  This\nincludes both an API client and a CLI wrapper.  The library is limited\nto Python 2, but does support both Juju 1.x and 2.x.  Support for\nPython 3 is on the radar.\n\nNote that only a portion of Juju's capability is exposed in txjuju.\nThis is because the code originates in the\n`Landscape <https://landscape.canonical.com/>`_ project and did not grow\nmuch beyond the needs of Landscape.  The official Python bindings for\nJuju (`python-libjuju <https://github.com/juju-solutions/python-libjuju>`_)\nwill usually offer a better experience.  At some point python-libjuju\nmay entirely supercede txjuju.\n\n\nKey Components\n==============\n\nHere are the essential classes of txjuju:\n\n* `txjuju.api.Endpoint <txjuju/api.py>`_\n* `txjuju.api.Juju2APIClient <txjuju/api.py>`_ and `txjuju.api.Juju1APIClient <txjuju/api.py>`_\n* `txjuju.cli.Juju2CLI <txjuju/cli.py>`_ and `txjuju.cli.Juju1CLI <txjuju/cli.py>`_\n\nAdditionally, `txjuju.prepare_for_bootstrap() <txjuju/__init__.py>`_ is especially useful.\n\nFor more information see `DOC.rst <DOC.rst>`_.\n\n\nExample Usage\n=============\n\nAPI Client\n----------\n\n.. code:: python\n\n   from twisted.internet import reactor\n   from twisted.internet.defer import inlineCallbacks\n   from txjuju.api import Endpoint\n\n   endpoint = Endpoint(reactor, \"ec2-1-2-3-4.compute-1.amazonaws.com\")\n   deferred = endpoint.connect()\n\n   @inlineCallbacks\n   def connected(client):\n       yield client.login(\"user-admin\", \"54830489236383334d1d9fd84adae72c\")\n       yield client.setAnnotations(\"unit\", \"1\", {\"foo\": \"bar\"})\n\n   deferred.addCallback(connected)\n\n   reactor.run()\n\nCLI Wrapper\n-----------\n\n.. code:: python\n\n   import pprint\n   from twisted.internet import reactor\n   from twisted.internet.defer import inlineCallbacks, returnValue\n   from txjuju import prepare_for_bootstrap\n   from txjuju.cli import BootstrapSpec, Juju1CLI\n\n   cfgdir = \"/tmp/my-juju\"\n   spec = BootstrapSpec(\"my-env\", \"lxd\")\n   cli = Juju1CLI(cfgdir)\n\n   @inlineCallbacks\n   def bootstrap():\n       prepare_for_bootstrap(spec, \"1.25.6\", cfgdir)\n       yield cli.boostrap(spec.name, \"0\")\n       raw = yield cli.api_info(spec.name)\n       returnValue(raw)\n\n   deferred = bootstrap()\n   deferred.addCallback(lambda v: pprint.pprint(v))\n\n   reactor.run()\n\n\nContributing\n============\n\nIf you'd like to contribute to txjuju, feel free to open an issue or\nsend us a pull request.  As far as borrowing from txjuju goes, the\ncode is LGPLv3-licensed.\n\nPackaging\n---------\n\nA Python package may be created using ``python2 setup.py sdist``.\nFor building a debian package see `BUILD <BUILD>`_ and\n`build.sh <build.sh>`_.\n\nStyle\n---------\n\nThe txjuju code follows PEP 8.  It is a good idea to frequently run\nsomething like `flake8 <https://pypi.python.org/pypi/flake8>`_ when\nmaking changes.  Other txjuju-specific guidelines:\n\n* use double quotes for strings\n* test methods should have docstrings\n\nTesting\n---------\n\nTo run the test suite, run ``make test`` or\n``python2 -m unittest txjuju.tests.test_XXX``.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/juju/txjuju", "keywords": "", "license": "LGPLv3", "maintainer": "", "maintainer_email": "", "name": "txjuju", "package_url": "https://pypi.org/project/txjuju/", "platform": "", "project_url": "https://pypi.org/project/txjuju/", "project_urls": {"Homepage": "https://github.com/juju/txjuju"}, "release_url": "https://pypi.org/project/txjuju/0.9.0a2/", "requires_dist": null, "requires_python": "", "summary": "A twisted-based Juju client.", "version": "0.9.0a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt>txjuju</tt> provides <a href=\"https://twistedmatrix.com/\" rel=\"nofollow\">twisted</a>-based tools\nfor interacting with <a href=\"http://www.ubuntu.com/cloud/juju\" rel=\"nofollow\">Juju</a>.  This\nincludes both an API client and a CLI wrapper.  The library is limited\nto Python 2, but does support both Juju 1.x and 2.x.  Support for\nPython 3 is on the radar.</p>\n<p>Note that only a portion of Juju\u2019s capability is exposed in txjuju.\nThis is because the code originates in the\n<a href=\"https://landscape.canonical.com/\" rel=\"nofollow\">Landscape</a> project and did not grow\nmuch beyond the needs of Landscape.  The official Python bindings for\nJuju (<a href=\"https://github.com/juju-solutions/python-libjuju\" rel=\"nofollow\">python-libjuju</a>)\nwill usually offer a better experience.  At some point python-libjuju\nmay entirely supercede txjuju.</p>\n<div id=\"key-components\">\n<h2>Key Components</h2>\n<p>Here are the essential classes of txjuju:</p>\n<ul>\n<li><a href=\"txjuju/api.py\" rel=\"nofollow\">txjuju.api.Endpoint</a></li>\n<li><a href=\"txjuju/api.py\" rel=\"nofollow\">txjuju.api.Juju2APIClient</a> and <a href=\"txjuju/api.py\" rel=\"nofollow\">txjuju.api.Juju1APIClient</a></li>\n<li><a href=\"txjuju/cli.py\" rel=\"nofollow\">txjuju.cli.Juju2CLI</a> and <a href=\"txjuju/cli.py\" rel=\"nofollow\">txjuju.cli.Juju1CLI</a></li>\n</ul>\n<p>Additionally, <a href=\"txjuju/__init__.py\" rel=\"nofollow\">txjuju.prepare_for_bootstrap()</a> is especially useful.</p>\n<p>For more information see <a href=\"DOC.rst\" rel=\"nofollow\">DOC.rst</a>.</p>\n</div>\n<div id=\"example-usage\">\n<h2>Example Usage</h2>\n<div id=\"api-client\">\n<h3>API Client</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span>\n<span class=\"kn\">from</span> <span class=\"nn\">txjuju.api</span> <span class=\"kn\">import</span> <span class=\"n\">Endpoint</span>\n\n<span class=\"n\">endpoint</span> <span class=\"o\">=</span> <span class=\"n\">Endpoint</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">,</span> <span class=\"s2\">\"ec2-1-2-3-4.compute-1.amazonaws.com\"</span><span class=\"p\">)</span>\n<span class=\"n\">deferred</span> <span class=\"o\">=</span> <span class=\"n\">endpoint</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">connected</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"s2\">\"user-admin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"54830489236383334d1d9fd84adae72c\"</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">setAnnotations</span><span class=\"p\">(</span><span class=\"s2\">\"unit\"</span><span class=\"p\">,</span> <span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">})</span>\n\n<span class=\"n\">deferred</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"n\">connected</span><span class=\"p\">)</span>\n\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"cli-wrapper\">\n<h3>CLI Wrapper</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet</span> <span class=\"kn\">import</span> <span class=\"n\">reactor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span><span class=\"p\">,</span> <span class=\"n\">returnValue</span>\n<span class=\"kn\">from</span> <span class=\"nn\">txjuju</span> <span class=\"kn\">import</span> <span class=\"n\">prepare_for_bootstrap</span>\n<span class=\"kn\">from</span> <span class=\"nn\">txjuju.cli</span> <span class=\"kn\">import</span> <span class=\"n\">BootstrapSpec</span><span class=\"p\">,</span> <span class=\"n\">Juju1CLI</span>\n\n<span class=\"n\">cfgdir</span> <span class=\"o\">=</span> <span class=\"s2\">\"/tmp/my-juju\"</span>\n<span class=\"n\">spec</span> <span class=\"o\">=</span> <span class=\"n\">BootstrapSpec</span><span class=\"p\">(</span><span class=\"s2\">\"my-env\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lxd\"</span><span class=\"p\">)</span>\n<span class=\"n\">cli</span> <span class=\"o\">=</span> <span class=\"n\">Juju1CLI</span><span class=\"p\">(</span><span class=\"n\">cfgdir</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">bootstrap</span><span class=\"p\">():</span>\n    <span class=\"n\">prepare_for_bootstrap</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"p\">,</span> <span class=\"s2\">\"1.25.6\"</span><span class=\"p\">,</span> <span class=\"n\">cfgdir</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">boostrap</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">\"0\"</span><span class=\"p\">)</span>\n    <span class=\"n\">raw</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">cli</span><span class=\"o\">.</span><span class=\"n\">api_info</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"n\">returnValue</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span>\n\n<span class=\"n\">deferred</span> <span class=\"o\">=</span> <span class=\"n\">bootstrap</span><span class=\"p\">()</span>\n<span class=\"n\">deferred</span><span class=\"o\">.</span><span class=\"n\">addCallback</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">))</span>\n\n<span class=\"n\">reactor</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>If you\u2019d like to contribute to txjuju, feel free to open an issue or\nsend us a pull request.  As far as borrowing from txjuju goes, the\ncode is LGPLv3-licensed.</p>\n<div id=\"packaging\">\n<h3>Packaging</h3>\n<p>A Python package may be created using <tt>python2 setup.py sdist</tt>.\nFor building a debian package see <a href=\"BUILD\" rel=\"nofollow\">BUILD</a> and\n<a href=\"build.sh\" rel=\"nofollow\">build.sh</a>.</p>\n</div>\n<div id=\"style\">\n<h3>Style</h3>\n<p>The txjuju code follows PEP 8.  It is a good idea to frequently run\nsomething like <a href=\"https://pypi.python.org/pypi/flake8\" rel=\"nofollow\">flake8</a> when\nmaking changes.  Other txjuju-specific guidelines:</p>\n<ul>\n<li>use double quotes for strings</li>\n<li>test methods should have docstrings</li>\n</ul>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>To run the test suite, run <tt>make test</tt> or\n<tt>python2 <span class=\"pre\">-m</span> unittest txjuju.tests.test_XXX</tt>.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2509945, "releases": {"0.9.0a1": [{"comment_text": "", "digests": {"md5": "5f37613a8fab93806098bb830ab83e55", "sha256": "fc2501709189b99ef3dbe9c528135f3ab079de5d7af4b671087fb7f156a7bc04"}, "downloads": -1, "filename": "txjuju-0.9.0a1.tar.gz", "has_sig": false, "md5_digest": "5f37613a8fab93806098bb830ab83e55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39625, "upload_time": "2016-12-09T22:33:28", "upload_time_iso_8601": "2016-12-09T22:33:28.392379Z", "url": "https://files.pythonhosted.org/packages/06/d4/b17dc04c721d9633b295bc71a9aec0ab37325bf1b6a5694e9b0908bd3154/txjuju-0.9.0a1.tar.gz", "yanked": false}], "0.9.0a2": [{"comment_text": "", "digests": {"md5": "5e428fc681850cf4f959bc9f015eaf07", "sha256": "c1d33b23ac0faf3386ad35f1c66fec12ac58a3e103663b097510a529fe9a13dc"}, "downloads": -1, "filename": "txjuju-0.9.0a2.tar.gz", "has_sig": false, "md5_digest": "5e428fc681850cf4f959bc9f015eaf07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41121, "upload_time": "2016-12-09T22:40:52", "upload_time_iso_8601": "2016-12-09T22:40:52.685724Z", "url": "https://files.pythonhosted.org/packages/ec/00/22038c507789d93188393e0f1032927bee21aaebb3b2e4c40e5720a50541/txjuju-0.9.0a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e428fc681850cf4f959bc9f015eaf07", "sha256": "c1d33b23ac0faf3386ad35f1c66fec12ac58a3e103663b097510a529fe9a13dc"}, "downloads": -1, "filename": "txjuju-0.9.0a2.tar.gz", "has_sig": false, "md5_digest": "5e428fc681850cf4f959bc9f015eaf07", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41121, "upload_time": "2016-12-09T22:40:52", "upload_time_iso_8601": "2016-12-09T22:40:52.685724Z", "url": "https://files.pythonhosted.org/packages/ec/00/22038c507789d93188393e0f1032927bee21aaebb3b2e4c40e5720a50541/txjuju-0.9.0a2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:43:14 2020"}