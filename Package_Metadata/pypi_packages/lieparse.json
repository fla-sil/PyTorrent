{"info": {"author": "Vidmantas Bal\u010dytis", "author_email": "vidma@lema.lt", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: Python Software Foundation License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3 :: Only", "Topic :: Internet :: WWW/HTTP :: Indexing/Search"], "description": "lieparse Python project\n=======================\n\n**lieparse** is HTML parser ant text retriever using user defined rule set.\n\n**HISTORY**\n-----------\n\nLibrary was initially written for Vilnius University **Liepa-2** project. Although *LIEPA* is an abbreviation of project name, in Lithuanian *Liepa* means \"Linden tree\". The tree image is in projects logotype also.\n\n**QUICK USAGE**\n---------------\n\nLets say you have HTML markup text read into string HtmlText.\nThen to retrieve all text from division with id=\"main\" you need to::\n\n    from lieparse import lieParser\n    rules = '<div id=\"main\">$Data[]</div> ::$Data[];'\n    parser = lieParser(rules)\n    parser.feed(HtmlText)\n    parser.close()\n\n*More sophisticated example can be found after rules syntax definitions*\n\n**RULES SYNTAX**\n----------------\n\nRules consist of statements optionally separated by white space.\n\nWhite space is considered space, tab, new line and comment.\n\nComment begins from ``#`` sign and lasts to line end. (Concretely regex match ``r'(?:\\s*(?:#.*?\\n)?)*\\s*'``)\n\nStatements can contain incorporated statements and data definitions.\n\n**Statements are**:\n~~~~~~~~~~~~~~~~~~~\n\n**Rep statement**\n+++++++++++++++++\n\nloops matching all incorporated statements::\n\n   #(<<other statements>>)\n   #+(<<other statements>>)\n   *(<<other statements>>)\n\nwhere::\n\n   # is optional numeric value and means repeat count\n   + is one-or-more modifier. If standing alone it is the same as 1+\n   * is zero-or-more modifier. Cannot be preceded by number\n\nIf ``*`` modifier was specified or when ``+`` modified statement reaches zero count, statement exits on first match of logical statements following *Rep* construct (or of course after enclosing *Tag* ends). In version 1.1.x such *Break* statement has higher priority than internal *Rep* statements. Earlier if same statement matched as *Rep* or as *Break* it was considered as a part of *Rep* statement.\n\nIf number or ``+``, ``*`` modifiers are found before other statements (*Tag* or *Any*), repeat block is generated automatically. So writing ``'2<div></div>'`` is automatically converted to ``'2(<div></div>)'``.\n\n**Any statement**\n+++++++++++++++++\n\nmatches any of incorporated statements::\n\n    {<<other statements>>}\n\nAny-match is done by statements definition order until first one matches. Statement can contain *Any*, *Tag* or *Rep* statements. *Print* statement is not allowed here.\n\n**Tag statement**\n+++++++++++++++++\n\nmain matching statement the html text is checked onto::\n\n    <name attr=\"string\" $aData[<<aData attrs>>] >\n        <<filterStr>> $Data[<<Data attrs>>] <<other statements>>\n    </name>\n\nwhere::\n\n   name is tag name, something like 'div', 'li', 'span'.\n\n   attr is optional and optionally multiple attribute that must be present in html\n      tag to be matched. Real tag must contain all, but maybe not only, specified attributes\n      to match this rule. If attribute in html tag has no value, in rule it must be\n      specified with empty string as a value.\n\n   class=\"\" attribute is split by whitespace into sets while parsing rule as well\n      as while parsing html. Rule attribute set must be html attribute subset to match.\n\n   style=\"\" attribute is handled similarly, but splitting on ';' and replacing\n      multiple white space to single space and stripping spaces before adding to set.\n\n   $aData is optional and optionally multiple attribute data definition. Can be\n      indirect data ($*data[]) also. Definition follows. Data variable name must\n      insensitive match regular expression ``'[a-z]+[a-z0-9_]*'``\n\n   filterStr is optional tag data filtering string. If enclosed in '/' marks -\n      regular expression match is performed against Tag data. If simple string -\n      full match is performed (i.e. \"My data\" is equivalent to \"/^My data$/\").\n      If tag data is not matched - tag is considered not matching.\n\n   $Data is optional and optionally multiple data collection attribute. Can be\n      indirect data ($*data[]) or to-first-tag data ($data[!]) or both.\n\nStatement can incorporate other statements (*Rep*, *Any*, *Tag*, *Print*) mixed with *$Data* definitions\n\n**Print statement**\n+++++++++++++++++++\n\nonly facility to output gathered data::\n\n    :<<flags>> <<loopDef>>:<<\"string\">> $pData[<<pData attrs>>] <<Other print statements>> ;\n\nwhere::\n\n   flags is optional print behavior modifiers - string (no quotes) containing one or\n      more flag letters. Next flags are defined:\n\n      n - print new line after full print statement\n      N - print new line after each individual loop of print statement\n      s - separate each print value with space\n      U - convert output to UPERCASE\n      u - capitalize output words\n      l - convert output to lowercase\n      A - redirect output to stream A, can be specified, defaults to sys/stdout\n      B - redirect output to stream B, can be specified, defaults to sys/stdout\n      C - redirect output to stream C, can be specified, defaults to sys/stdout\n        stream parameters are spread to child items but child item can have stream redefined\n\n   loopDef is expression defining how much times print body will be performed. If not\n      specified it defaults to 1. If defined - it is counted at run time depending\n      on real data. Loop counter is from 0 up-to loopDef. On run time current loop counter\n      can be accessed in index expressions as $0. Outer loop statements counter is\n      accessible as $1 for first surrounding print statement, $2 for second and so on, the\n      last being ourselves (so same as $0).\n\n   loopDef can be one of next:\n\n      indexExpr - countable expression (look below) with $# as surrounding\n         loop counters, numbers, parenthesis, arithmetic operations '+', '-', '*'\n         and (form version 1.1.0) C-style ternary operators.\n\n      empty - index is set to 1\n\n   string is optional string that will be printed\n\n   pData is data variable name (can be indirect: $*pData) from which data will be printed.\n      Full definition is below.\n\nstring, pData and other print statements can be freely mixed inside print statement body.\n\n**Index Expressions**\n+++++++++++++++++++++\n\n**indexExpr** - countable expression, that can be used in print statement loop definition and in pData (print statement data) definition. It is countable expression with $# as surrounding loop counters, $<<name>> or $*<<name>> as variable array length, numbers, parenthesis and arithmetic operations ``+``, ``-``, ``*``.\n\n**Valid indexExpr's:**\n\n::\n\n   3\n   $2 + 1\n   ($1 + 1) * 2\n   $Data - 1\n\n**Data Definitions**\n+++++++++++++++++++++\n\n**Data** definitions can be found inside *Tag* definition (aData), inside *Tag* body (dData and xData) and print statement (pData). Data reference (without []) can be found in print loopDef.\n\n*pData* can not be modified - information is only retrieved from named variable. Other types of Data is dedicated to collect data from tag attributes or html text.\n\nAll data variables are arrays. After definition (even if it occurs with ``+`` sign) array pointer is 0. Pointer can be incremented by ``+`` sign in variable attributes. Pointer can never be decremented. ``-`` sign in attributes clears variable data, leaving index unchanged.\n\n``!`` in attributes defines xData instead of dData.\n\nVariables can be direct:\n\n``$<<name>>[<<attr>>]`` - defines variable named <<name>>\n\nand indirect:\n\n``$*<<name>>[<<attr>>]`` - here name of variable is kept in last element of array ``$<<name>>[]``\n\nOnly one level of indirection is allowed.\n\n*<<attr>>* and behavior differs depending on variable scope (aData, dData, xData or pData). However in all scopes accessed data is same for same named variable.\n\n*For aData, dData and xData*:\n+++++++++++++++++++++++++++++\n\n*<<attr>>* consists of optional flag with values ``!``, ``+`` or ``-`` and optional space separated strings.\n\nIf flag is::\n\n   '!' - xData type variable is defined. Valid only for variables inside Tag body.\n\n   '+' - index value is incremented before other operations. The exception is if variable is\n         first time defined - in this case index is left 0.\n\n   '-' - all data accumulated in variable by current index is cleared before other operations.\n\n| When no flag is present, data is appended to variable by current index.\n| String can be enclosed in double quotation marks. This allows strings with spaces. If no strings are defined - passed data is simply added to variable.\n\nString can be::\n\n   /<<match>>/         - if passed data not matches regular expression it is ignored.\n         All other strings are not processed\n\n   /<<find>>/<<repl>>/ - if <<find>> regular expression matches passed data, it is\n         replaced with <<repl>> and got data added to variable. On no match - data is\n         ignored. Other strings are processed with all data passed to them.\n\n   +/<<find>>/<<repl>>/ - if <<find>> regular expression matches passed data, it is\n         replaced with <<repl>> and got data added to variable. On no match - original\n         data is added to variable. Always must be enclosed in quotation marks. New in 1.1.0.\n         After replace other processing strings (if any) get replaced, not original data.\n\n   @<<attrName>>       - Value of specified Tag attribute is added to variable.\n\n   <<otherString>>     - specified string is added to variable.\n\n*Data passed to variables is*::\n\n   aData - all Tag attributes with names as name=\"value\". If there is some class values\n         they are passed as separate class=\"value\" pairs.\n\n   dData - all accumulated data in this and above Tag levels.\n\n   xData - all accumulated data up to first sub-tag match.\n\n*For pData*\n+++++++++++\n*<<attr>>* can be one of next forms:\n\n``<<indexExpr0>>;<<indexExpr>> <<regexps>>``  - for indirect variables only\n\nor\n\n``<<indexExpr>> <<regexps>>``                - for all variables\n\nwhere::\n\n   <<indexExpr>> - is optional array index value at which will be printed. If not specified\n         defaults to $0\n\n   <<indexExpr0>> - is optional parent array index from which variable name is taken.\n         Defaults to $0.\n\n   <<regexps>> is optional regular expressions in form /<<find>>/<<repl>>/\n         All expressions are applied to data value before print by order of appearance.\n\n**SYSTEM VARIABLES**\n--------------------\n\nFrom version 1.1.0 we have defined some global system variables. If found anywhere in text variable\nname is replaced with it's value. You can use command line (or #!flags) option --no-vars-expand\nif such behavior is undesirable. Another workaround is shown in example lieparse3_rule.txt\nbased on extracting data from this chapter.\n\n*Defined system variables*::\n\n   $URL       -  full URL of site we are examining\n   $PROTO     -  protocol of site (http:// or https://)\n   $BASEURL   -  base URL of site\n   $BASEURLNP -  base URL of site without port number. If no port specified - same as $BASEURL\n   $PORT      -  port number. If not specified, empty string\n   $DATE      -  date the extracting program is being run (as returned by strftime(\"%x\"))\n   $TIME      -  time, program is running (as returned by strftime(\"%X\"))\n   $DATETIME  -  date and time, program is running (as returned by strftime(\"%c\"))\n\n**Parsing parameters inside rules file**\n----------------------------------------\n\n|\n| Starting with version 1.1.0 you can define parsing parameters inside rules file.\n| Older versions treats this as comment.\n\nSyntax is: ``#!<<parameter name>> <<space separated parameter values>>``\n\nDo not define parameters in first file line - Linux shell will treat that as executable file definition.\n\nNext parameters are recognized::\n\n   url      -  location to parse URL\n   href     -  same as above. If both specified, first found is used\n   winurl   -  URL for Windows systems. Normally used with file:// references\n   winhref  -  same as above\n   linurl   -  URL for Linux systems. Normally used with file:// references\n   linhref  -  same as above\n   usragent -  user agent. Can be specified by name or by value\n   fromurl  -  set URL we are coming from\n   flags    -  specify list of space separated behavior flags. Next are defined:\n      ssl-verify, dump-rules, dump-vars, dump-json, dump-json-np, no-vars-expand\n   output-file[ABCE]? see LiepaParse -h for definition\n   time-locale - specify locale for system time variables $DATE, $DATETIME and $TIME\n\n\n**ADVANCED EXAMPLE**\n--------------------\n\nWe will retrieve python library names from docs.python.org site::\n\n    import sys\n    from lieparse import lieParser\n    from pycurl import Curl, global_init, global_cleanup, GLOBAL_ALL\n    usragent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0\"\n    url = \"https://docs.python.org/3.6/py-modindex.html\"\n    rules = r'''\n    <table class=\"indextable modindextable\">\n        *<code class=\"xref\">\n            $Data[+]\n        </code>\n    </table>\n    :N $Data:$Data[];     # if flags are ns we will have space separated list\n    '''\n\n    global_init(pycurl.GLOBAL_ALL)\n    c = Curl()\n    c.setopt(c.USERAGENT, usragent)\n    c.setopt(c.SSL_VERIFYPEER, 0)      # have problems verifying certificate under Windows\n    c.setopt(c.URL, url)\n    s = c.perform_rs()\n    global_cleanup()\n\n    parser = lieParser(rules)\n    parser.feed(s)\n    v = parser.close()\n    if v != 0:\n        print(\"Unmatched {} items\".format(v), file=sys.stderr)\n\n**Summary**\n-----------\n\n:Author: Vidmantas Bal\u010dytis <vidma@lema.lt>\n:Version: 1.1.0 (2020-03-03)\n:Changes: 1.0.0- 1.0.4 versions released have same code base and differs only in documentation\n\n          1.0.5\n            - bug fix looping all rules after full match\n            - bug fix retrieving attribute data\n            - syntax and value error no more prints traceback\n            - added testing script LiepaParse and samples\n\n          1.1.0 major service release, compatible with rules written for older versions.\n            - breaking statement from zero-or-more *Rep* loop has now greater priority than internal `Rep statement`_. thats why some rules written for 1.1.x may not run on 1.0.x. Backwards compatibility is ensured.\n            - `Index Expressions`_ now can have $<<var name>> and $*<<var name>> as operands. Also C-style ternary operations were added.\n            - `Print statement`_ new flags are introduced\n            - formating now is preserved in <pre> tags\n            - `SYSTEM VARIABLES`_ and their expansion is introduced\n            - added find/replace string with keep-on-not-found type in data variables.\n            - `Parsing parameters inside rules file`_ is introduced.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/lieparse/", "keywords": "html parser", "license": "", "maintainer": "", "maintainer_email": "", "name": "lieparse", "package_url": "https://pypi.org/project/lieparse/", "platform": "", "project_url": "https://pypi.org/project/lieparse/", "project_urls": {"Homepage": "https://pypi.org/project/lieparse/"}, "release_url": "https://pypi.org/project/lieparse/1.1.0/", "requires_dist": ["regex", "rst2ansi"], "requires_python": ">=3.5", "summary": "HTML parser ant text retriever using user defined rule set", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>lieparse</strong> is HTML parser ant text retriever using user defined rule set.</p>\n<div id=\"history\">\n<h2><strong>HISTORY</strong></h2>\n<p>Library was initially written for Vilnius University <strong>Liepa-2</strong> project. Although <em>LIEPA</em> is an abbreviation of project name, in Lithuanian <em>Liepa</em> means \u201cLinden tree\u201d. The tree image is in projects logotype also.</p>\n</div>\n<div id=\"quick-usage\">\n<h2><strong>QUICK USAGE</strong></h2>\n<p>Lets say you have HTML markup text read into string HtmlText.\nThen to retrieve all text from division with id=\u201dmain\u201d you need to:</p>\n<pre>from lieparse import lieParser\nrules = '&lt;div id=\"main\"&gt;$Data[]&lt;/div&gt; ::$Data[];'\nparser = lieParser(rules)\nparser.feed(HtmlText)\nparser.close()\n</pre>\n<p><em>More sophisticated example can be found after rules syntax definitions</em></p>\n</div>\n<div id=\"rules-syntax\">\n<h2><strong>RULES SYNTAX</strong></h2>\n<p>Rules consist of statements optionally separated by white space.</p>\n<p>White space is considered space, tab, new line and comment.</p>\n<p>Comment begins from <tt>#</tt> sign and lasts to line end. (Concretely regex match <tt><span class=\"pre\">r'(?:\\s*(?:#.*?\\n)?)*\\s*'</span></tt>)</p>\n<p>Statements can contain incorporated statements and data definitions.</p>\n<div id=\"statements-are\">\n<h3><strong>Statements are</strong>:</h3>\n<div id=\"rep-statement\">\n<h4><strong>Rep statement</strong></h4>\n<p>loops matching all incorporated statements:</p>\n<pre>#(&lt;&lt;other statements&gt;&gt;)\n#+(&lt;&lt;other statements&gt;&gt;)\n*(&lt;&lt;other statements&gt;&gt;)\n</pre>\n<p>where:</p>\n<pre># is optional numeric value and means repeat count\n+ is one-or-more modifier. If standing alone it is the same as 1+\n* is zero-or-more modifier. Cannot be preceded by number\n</pre>\n<p>If <tt>*</tt> modifier was specified or when <tt>+</tt> modified statement reaches zero count, statement exits on first match of logical statements following <em>Rep</em> construct (or of course after enclosing <em>Tag</em> ends). In version 1.1.x such <em>Break</em> statement has higher priority than internal <em>Rep</em> statements. Earlier if same statement matched as <em>Rep</em> or as <em>Break</em> it was considered as a part of <em>Rep</em> statement.</p>\n<p>If number or <tt>+</tt>, <tt>*</tt> modifiers are found before other statements (<em>Tag</em> or <em>Any</em>), repeat block is generated automatically. So writing <tt><span class=\"pre\">'2&lt;div&gt;&lt;/div&gt;'</span></tt> is automatically converted to <tt><span class=\"pre\">'2(&lt;div&gt;&lt;/div&gt;)'</span></tt>.</p>\n</div>\n<div id=\"any-statement\">\n<h4><strong>Any statement</strong></h4>\n<p>matches any of incorporated statements:</p>\n<pre>{&lt;&lt;other statements&gt;&gt;}\n</pre>\n<p>Any-match is done by statements definition order until first one matches. Statement can contain <em>Any</em>, <em>Tag</em> or <em>Rep</em> statements. <em>Print</em> statement is not allowed here.</p>\n</div>\n<div id=\"tag-statement\">\n<h4><strong>Tag statement</strong></h4>\n<p>main matching statement the html text is checked onto:</p>\n<pre>&lt;name attr=\"string\" $aData[&lt;&lt;aData attrs&gt;&gt;] &gt;\n    &lt;&lt;filterStr&gt;&gt; $Data[&lt;&lt;Data attrs&gt;&gt;] &lt;&lt;other statements&gt;&gt;\n&lt;/name&gt;\n</pre>\n<p>where:</p>\n<pre>name is tag name, something like 'div', 'li', 'span'.\n\nattr is optional and optionally multiple attribute that must be present in html\n   tag to be matched. Real tag must contain all, but maybe not only, specified attributes\n   to match this rule. If attribute in html tag has no value, in rule it must be\n   specified with empty string as a value.\n\nclass=\"\" attribute is split by whitespace into sets while parsing rule as well\n   as while parsing html. Rule attribute set must be html attribute subset to match.\n\nstyle=\"\" attribute is handled similarly, but splitting on ';' and replacing\n   multiple white space to single space and stripping spaces before adding to set.\n\n$aData is optional and optionally multiple attribute data definition. Can be\n   indirect data ($*data[]) also. Definition follows. Data variable name must\n   insensitive match regular expression ``'[a-z]+[a-z0-9_]*'``\n\nfilterStr is optional tag data filtering string. If enclosed in '/' marks -\n   regular expression match is performed against Tag data. If simple string -\n   full match is performed (i.e. \"My data\" is equivalent to \"/^My data$/\").\n   If tag data is not matched - tag is considered not matching.\n\n$Data is optional and optionally multiple data collection attribute. Can be\n   indirect data ($*data[]) or to-first-tag data ($data[!]) or both.\n</pre>\n<p>Statement can incorporate other statements (<em>Rep</em>, <em>Any</em>, <em>Tag</em>, <em>Print</em>) mixed with <em>$Data</em> definitions</p>\n</div>\n<div id=\"print-statement\">\n<h4><strong>Print statement</strong></h4>\n<p>only facility to output gathered data:</p>\n<pre>:&lt;&lt;flags&gt;&gt; &lt;&lt;loopDef&gt;&gt;:&lt;&lt;\"string\"&gt;&gt; $pData[&lt;&lt;pData attrs&gt;&gt;] &lt;&lt;Other print statements&gt;&gt; ;\n</pre>\n<p>where:</p>\n<pre>flags is optional print behavior modifiers - string (no quotes) containing one or\n   more flag letters. Next flags are defined:\n\n   n - print new line after full print statement\n   N - print new line after each individual loop of print statement\n   s - separate each print value with space\n   U - convert output to UPERCASE\n   u - capitalize output words\n   l - convert output to lowercase\n   A - redirect output to stream A, can be specified, defaults to sys/stdout\n   B - redirect output to stream B, can be specified, defaults to sys/stdout\n   C - redirect output to stream C, can be specified, defaults to sys/stdout\n     stream parameters are spread to child items but child item can have stream redefined\n\nloopDef is expression defining how much times print body will be performed. If not\n   specified it defaults to 1. If defined - it is counted at run time depending\n   on real data. Loop counter is from 0 up-to loopDef. On run time current loop counter\n   can be accessed in index expressions as $0. Outer loop statements counter is\n   accessible as $1 for first surrounding print statement, $2 for second and so on, the\n   last being ourselves (so same as $0).\n\nloopDef can be one of next:\n\n   indexExpr - countable expression (look below) with $# as surrounding\n      loop counters, numbers, parenthesis, arithmetic operations '+', '-', '*'\n      and (form version 1.1.0) C-style ternary operators.\n\n   empty - index is set to 1\n\nstring is optional string that will be printed\n\npData is data variable name (can be indirect: $*pData) from which data will be printed.\n   Full definition is below.\n</pre>\n<p>string, pData and other print statements can be freely mixed inside print statement body.</p>\n</div>\n<div id=\"index-expressions\">\n<h4><strong>Index Expressions</strong></h4>\n<p><strong>indexExpr</strong> - countable expression, that can be used in print statement loop definition and in pData (print statement data) definition. It is countable expression with $# as surrounding loop counters, $&lt;&lt;name&gt;&gt; or $*&lt;&lt;name&gt;&gt; as variable array length, numbers, parenthesis and arithmetic operations <tt>+</tt>, <tt>-</tt>, <tt>*</tt>.</p>\n<p><strong>Valid indexExpr\u2019s:</strong></p>\n<pre>3\n$2 + 1\n($1 + 1) * 2\n$Data - 1\n</pre>\n</div>\n<div id=\"data-definitions\">\n<h4><strong>Data Definitions</strong></h4>\n<p><strong>Data</strong> definitions can be found inside <em>Tag</em> definition (aData), inside <em>Tag</em> body (dData and xData) and print statement (pData). Data reference (without []) can be found in print loopDef.</p>\n<p><em>pData</em> can not be modified - information is only retrieved from named variable. Other types of Data is dedicated to collect data from tag attributes or html text.</p>\n<p>All data variables are arrays. After definition (even if it occurs with <tt>+</tt> sign) array pointer is 0. Pointer can be incremented by <tt>+</tt> sign in variable attributes. Pointer can never be decremented. <tt>-</tt> sign in attributes clears variable data, leaving index unchanged.</p>\n<p><tt>!</tt> in attributes defines xData instead of dData.</p>\n<p>Variables can be direct:</p>\n<p><tt><span class=\"pre\">$&lt;&lt;name&gt;&gt;[&lt;&lt;attr&gt;&gt;]</span></tt> - defines variable named &lt;&lt;name&gt;&gt;</p>\n<p>and indirect:</p>\n<p><tt><span class=\"pre\">$*&lt;&lt;name&gt;&gt;[&lt;&lt;attr&gt;&gt;]</span></tt> - here name of variable is kept in last element of array <tt><span class=\"pre\">$&lt;&lt;name&gt;&gt;[]</span></tt></p>\n<p>Only one level of indirection is allowed.</p>\n<p><em>&lt;&lt;attr&gt;&gt;</em> and behavior differs depending on variable scope (aData, dData, xData or pData). However in all scopes accessed data is same for same named variable.</p>\n</div>\n<div id=\"for-adata-ddata-and-xdata\">\n<h4><em>For aData, dData and xData</em>:</h4>\n<p><em>&lt;&lt;attr&gt;&gt;</em> consists of optional flag with values <tt>!</tt>, <tt>+</tt> or <tt>-</tt> and optional space separated strings.</p>\n<p>If flag is:</p>\n<pre>'!' - xData type variable is defined. Valid only for variables inside Tag body.\n\n'+' - index value is incremented before other operations. The exception is if variable is\n      first time defined - in this case index is left 0.\n\n'-' - all data accumulated in variable by current index is cleared before other operations.\n</pre>\n<div>\n<div>When no flag is present, data is appended to variable by current index.</div>\n<div>String can be enclosed in double quotation marks. This allows strings with spaces. If no strings are defined - passed data is simply added to variable.</div>\n</div>\n<p>String can be:</p>\n<pre>/&lt;&lt;match&gt;&gt;/         - if passed data not matches regular expression it is ignored.\n      All other strings are not processed\n\n/&lt;&lt;find&gt;&gt;/&lt;&lt;repl&gt;&gt;/ - if &lt;&lt;find&gt;&gt; regular expression matches passed data, it is\n      replaced with &lt;&lt;repl&gt;&gt; and got data added to variable. On no match - data is\n      ignored. Other strings are processed with all data passed to them.\n\n+/&lt;&lt;find&gt;&gt;/&lt;&lt;repl&gt;&gt;/ - if &lt;&lt;find&gt;&gt; regular expression matches passed data, it is\n      replaced with &lt;&lt;repl&gt;&gt; and got data added to variable. On no match - original\n      data is added to variable. Always must be enclosed in quotation marks. New in 1.1.0.\n      After replace other processing strings (if any) get replaced, not original data.\n\n@&lt;&lt;attrName&gt;&gt;       - Value of specified Tag attribute is added to variable.\n\n&lt;&lt;otherString&gt;&gt;     - specified string is added to variable.\n</pre>\n<p><em>Data passed to variables is</em>:</p>\n<pre>aData - all Tag attributes with names as name=\"value\". If there is some class values\n      they are passed as separate class=\"value\" pairs.\n\ndData - all accumulated data in this and above Tag levels.\n\nxData - all accumulated data up to first sub-tag match.\n</pre>\n</div>\n<div id=\"for-pdata\">\n<h4><em>For pData</em></h4>\n<p><em>&lt;&lt;attr&gt;&gt;</em> can be one of next forms:</p>\n<p><tt><span class=\"pre\">&lt;&lt;indexExpr0&gt;&gt;;&lt;&lt;indexExpr&gt;&gt;</span> &lt;&lt;regexps&gt;&gt;</tt>  - for indirect variables only</p>\n<p>or</p>\n<p><tt>&lt;&lt;indexExpr&gt;&gt; &lt;&lt;regexps&gt;&gt;</tt>                - for all variables</p>\n<p>where:</p>\n<pre>&lt;&lt;indexExpr&gt;&gt; - is optional array index value at which will be printed. If not specified\n      defaults to $0\n\n&lt;&lt;indexExpr0&gt;&gt; - is optional parent array index from which variable name is taken.\n      Defaults to $0.\n\n&lt;&lt;regexps&gt;&gt; is optional regular expressions in form /&lt;&lt;find&gt;&gt;/&lt;&lt;repl&gt;&gt;/\n      All expressions are applied to data value before print by order of appearance.\n</pre>\n</div>\n</div>\n</div>\n<div id=\"system-variables\">\n<h2><strong>SYSTEM VARIABLES</strong></h2>\n<p>From version 1.1.0 we have defined some global system variables. If found anywhere in text variable\nname is replaced with it\u2019s value. You can use command line (or #!flags) option \u2013no-vars-expand\nif such behavior is undesirable. Another workaround is shown in example lieparse3_rule.txt\nbased on extracting data from this chapter.</p>\n<p><em>Defined system variables</em>:</p>\n<pre>$URL       -  full URL of site we are examining\n$PROTO     -  protocol of site (http:// or https://)\n$BASEURL   -  base URL of site\n$BASEURLNP -  base URL of site without port number. If no port specified - same as $BASEURL\n$PORT      -  port number. If not specified, empty string\n$DATE      -  date the extracting program is being run (as returned by strftime(\"%x\"))\n$TIME      -  time, program is running (as returned by strftime(\"%X\"))\n$DATETIME  -  date and time, program is running (as returned by strftime(\"%c\"))\n</pre>\n</div>\n<div id=\"parsing-parameters-inside-rules-file\">\n<h2><strong>Parsing parameters inside rules file</strong></h2>\n<div>\n<div><br></div>\n<div>Starting with version 1.1.0 you can define parsing parameters inside rules file.</div>\n<div>Older versions treats this as comment.</div>\n</div>\n<p>Syntax is: <tt><span class=\"pre\">#!&lt;&lt;parameter</span> name&gt;&gt; &lt;&lt;space separated parameter values&gt;&gt;</tt></p>\n<p>Do not define parameters in first file line - Linux shell will treat that as executable file definition.</p>\n<p>Next parameters are recognized:</p>\n<pre>url      -  location to parse URL\nhref     -  same as above. If both specified, first found is used\nwinurl   -  URL for Windows systems. Normally used with file:// references\nwinhref  -  same as above\nlinurl   -  URL for Linux systems. Normally used with file:// references\nlinhref  -  same as above\nusragent -  user agent. Can be specified by name or by value\nfromurl  -  set URL we are coming from\nflags    -  specify list of space separated behavior flags. Next are defined:\n   ssl-verify, dump-rules, dump-vars, dump-json, dump-json-np, no-vars-expand\noutput-file[ABCE]? see LiepaParse -h for definition\ntime-locale - specify locale for system time variables $DATE, $DATETIME and $TIME\n</pre>\n</div>\n<div id=\"advanced-example\">\n<h2><strong>ADVANCED EXAMPLE</strong></h2>\n<p>We will retrieve python library names from docs.python.org site:</p>\n<pre>import sys\nfrom lieparse import lieParser\nfrom pycurl import Curl, global_init, global_cleanup, GLOBAL_ALL\nusragent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0\"\nurl = \"https://docs.python.org/3.6/py-modindex.html\"\nrules = r'''\n&lt;table class=\"indextable modindextable\"&gt;\n    *&lt;code class=\"xref\"&gt;\n        $Data[+]\n    &lt;/code&gt;\n&lt;/table&gt;\n:N $Data:$Data[];     # if flags are ns we will have space separated list\n'''\n\nglobal_init(pycurl.GLOBAL_ALL)\nc = Curl()\nc.setopt(c.USERAGENT, usragent)\nc.setopt(c.SSL_VERIFYPEER, 0)      # have problems verifying certificate under Windows\nc.setopt(c.URL, url)\ns = c.perform_rs()\nglobal_cleanup()\n\nparser = lieParser(rules)\nparser.feed(s)\nv = parser.close()\nif v != 0:\n    print(\"Unmatched {} items\".format(v), file=sys.stderr)\n</pre>\n</div>\n<div id=\"summary\">\n<h2><strong>Summary</strong></h2>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>Author:</th><td><p>Vidmantas Bal\u010dytis &lt;<a href=\"mailto:vidma%40lema.lt\">vidma<span>@</span>lema<span>.</span>lt</a>&gt;</p>\n</td>\n</tr>\n<tr><th>Version:</th><td><p>1.1.0 (2020-03-03)</p>\n</td>\n</tr>\n<tr><th>Changes:</th><td><p>1.0.0- 1.0.4 versions released have same code base and differs only in documentation</p>\n<dl>\n<dt>1.0.5</dt>\n<dd><ul>\n<li>bug fix looping all rules after full match</li>\n<li>bug fix retrieving attribute data</li>\n<li>syntax and value error no more prints traceback</li>\n<li>added testing script LiepaParse and samples</li>\n</ul>\n</dd>\n<dt>1.1.0 major service release, compatible with rules written for older versions.</dt>\n<dd><ul>\n<li>breaking statement from zero-or-more <em>Rep</em> loop has now greater priority than internal <a href=\"#rep-statement\" rel=\"nofollow\">Rep statement</a>. thats why some rules written for 1.1.x may not run on 1.0.x. Backwards compatibility is ensured.</li>\n<li><a href=\"#index-expressions\" rel=\"nofollow\">Index Expressions</a> now can have $&lt;&lt;var name&gt;&gt; and $*&lt;&lt;var name&gt;&gt; as operands. Also C-style ternary operations were added.</li>\n<li><a href=\"#print-statement\" rel=\"nofollow\">Print statement</a> new flags are introduced</li>\n<li>formating now is preserved in &lt;pre&gt; tags</li>\n<li><a href=\"#system-variables\" rel=\"nofollow\">SYSTEM VARIABLES</a> and their expansion is introduced</li>\n<li>added find/replace string with keep-on-not-found type in data variables.</li>\n<li><a href=\"#parsing-parameters-inside-rules-file\" rel=\"nofollow\">Parsing parameters inside rules file</a> is introduced.</li>\n</ul>\n</dd>\n</dl>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 6736450, "releases": {"1.0.4": [{"comment_text": "", "digests": {"md5": "a2b5b82dd3823a19187cbc685d98053c", "sha256": "2f7dd7cfbb719b0bf8c58b66e27db964398c733fdf5863cf8642a80f50da3f03"}, "downloads": -1, "filename": "lieparse-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a2b5b82dd3823a19187cbc685d98053c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27002, "upload_time": "2020-01-09T17:59:12", "upload_time_iso_8601": "2020-01-09T17:59:12.278656Z", "url": "https://files.pythonhosted.org/packages/e9/1f/8b47d1f73eb6bbcb557d9df701c280880ad37c880503c35b30dcbce230b8/lieparse-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea817e9a68075b0933618f7ff3f710f1", "sha256": "63868585aec44680d2230c931e4800b4e93d9ce69227ff8631a2fc8ca74e5eaa"}, "downloads": -1, "filename": "lieparse-1.0.4.tar.gz", "has_sig": false, "md5_digest": "ea817e9a68075b0933618f7ff3f710f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23353, "upload_time": "2020-01-09T17:59:14", "upload_time_iso_8601": "2020-01-09T17:59:14.220174Z", "url": "https://files.pythonhosted.org/packages/90/7a/7202b13c5cdf068163627e86dbbdc775176bd16df5c0bff78c763158a708/lieparse-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "b2e3226005e7eedb5672f793f546230e", "sha256": "537b1a2111f73d9f1b465403f43572ab0c1e59f76a1231e8135bfaace77998ea"}, "downloads": -1, "filename": "lieparse-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b2e3226005e7eedb5672f793f546230e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28671, "upload_time": "2020-02-02T18:40:07", "upload_time_iso_8601": "2020-02-02T18:40:07.795590Z", "url": "https://files.pythonhosted.org/packages/6a/4c/1d744192d15ca5d27ad86cf01dd42a53c3872591a2a4b3230c09ccd86f3a/lieparse-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac4e969e75d997917e28b25768316c8f", "sha256": "c149b338efa7875ce5fd443d9dd4591dc2fee9f4fef9594a7be6d494293645dd"}, "downloads": -1, "filename": "lieparse-1.0.5.tar.gz", "has_sig": false, "md5_digest": "ac4e969e75d997917e28b25768316c8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 29697, "upload_time": "2020-02-02T18:40:09", "upload_time_iso_8601": "2020-02-02T18:40:09.649849Z", "url": "https://files.pythonhosted.org/packages/b2/bb/b22407be37a8632ba0b4e9d9d81d7d133f597c2d14a75653c5427a526109/lieparse-1.0.5.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "1745e9b7dd8da80ce03a7d6bfa18451a", "sha256": "e1a964c829ca840bfa8af97e729813ab39f0440ccea0d07c9cacb0c6d2955d20"}, "downloads": -1, "filename": "lieparse-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1745e9b7dd8da80ce03a7d6bfa18451a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 38163, "upload_time": "2020-03-02T22:02:25", "upload_time_iso_8601": "2020-03-02T22:02:25.954934Z", "url": "https://files.pythonhosted.org/packages/1f/a5/ac1986eb84d45a82cc9c800b98cf3f1e43d0b822650a651daf23bb93be4a/lieparse-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fac24a0e6c523def170e392ea301a05", "sha256": "3997e3a19eb97e095ed674dce65b152abb50b614e78b3c7ba62cfc62a668549f"}, "downloads": -1, "filename": "lieparse-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1fac24a0e6c523def170e392ea301a05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 39779, "upload_time": "2020-03-02T22:02:27", "upload_time_iso_8601": "2020-03-02T22:02:27.664101Z", "url": "https://files.pythonhosted.org/packages/38/93/317acbc214a2e78e24f453dffe59f813d72260f465502506612f1c2511c6/lieparse-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1745e9b7dd8da80ce03a7d6bfa18451a", "sha256": "e1a964c829ca840bfa8af97e729813ab39f0440ccea0d07c9cacb0c6d2955d20"}, "downloads": -1, "filename": "lieparse-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1745e9b7dd8da80ce03a7d6bfa18451a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 38163, "upload_time": "2020-03-02T22:02:25", "upload_time_iso_8601": "2020-03-02T22:02:25.954934Z", "url": "https://files.pythonhosted.org/packages/1f/a5/ac1986eb84d45a82cc9c800b98cf3f1e43d0b822650a651daf23bb93be4a/lieparse-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1fac24a0e6c523def170e392ea301a05", "sha256": "3997e3a19eb97e095ed674dce65b152abb50b614e78b3c7ba62cfc62a668549f"}, "downloads": -1, "filename": "lieparse-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1fac24a0e6c523def170e392ea301a05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 39779, "upload_time": "2020-03-02T22:02:27", "upload_time_iso_8601": "2020-03-02T22:02:27.664101Z", "url": "https://files.pythonhosted.org/packages/38/93/317acbc214a2e78e24f453dffe59f813d72260f465502506612f1c2511c6/lieparse-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:09 2020"}