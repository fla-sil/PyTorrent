{"info": {"author": "Oliver Russell", "author_email": "ojhrussell@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development"], "description": "# immerframe\n\nIntuitively perform deep updates on python objects\n- without mutating them\n- while being efficient via structural sharing - no `deepcopy`\n- while maintaining type correctness\n\n*This is (almost) a Python port of [immer](https://github.com/mweststrate/immer).*\n\n```bash\npip install immerframe\n```\n\nFirst, let's import some stuff\n\n```\nfrom dataclasses import dataclass\nfrom immerframe import Proxy\n```\n\nNow, consider the data:\n\n```python\n@dataclass\nclass Ant:\n    age: int\n\nant_10 = Ant(age=10)\nant_20 = Ant(age=20)\nnested = {\n    \"ants\": [ant_10, ant_20, None],\n}\n```\n\nlet's pretend to mutate it\n\n```python\nwith Proxy(nested) as (p, new_nested):\n    p[\"ants\"][0].age += 1\n    p[\"ants\"].pop()\n    p[\"foo\"] = 99\n```\n\n(note `p` and `new_nested` should have the correct types in mypy)\n\n\n`nested` will remain the same\n\n```python\nassert nested == {\n    \"ants\": [ant_10, ant_20, None],\n}\n```\n\n`new_nested` will be `nested`, but with the mutations with specified in the `with Proxy(...)` block\n\nassert new_nested == {\n    \"ants\": [Ant(age=11), ant_20],\n    \"foo\": 99,\n}\n```\n\nbut it _won't_ be a deep copy\n\n```python\nassert new_nested[\"ants\"][1] is ant_20\n```\n\n`immerframe` supports most thing's that can be `copy`ed\n\n## Things to remember\n\n#### Mutating the same thing in a block twice may not do what you'd expect in the following type of case:\n\n```python\nwith Proxy([1]) as (l, new_l):\n    l[0] += 5\n    l[0] += 10\n```\n\nwill give `l == [11]`\n\n#### Use keys rather than references to loop over and mutate nested `dict`s/`list`s:\n\n```python\nwith Proxy(new_nested) as (p, new_nested):\n    for k in new_nested:\n        p[k] += 1\n    for i, n in enumerate(new_nested[\"ants\"]):\n        if n.age < 15:\n            p[\"ants\"][i].age + 10\n```\n\n\n### TODO\n\n- implement all dunder methods\n- finish typing", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/leontrolski/immerframe", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "immerframe", "package_url": "https://pypi.org/project/immerframe/", "platform": "", "project_url": "https://pypi.org/project/immerframe/", "project_urls": {"Homepage": "https://github.com/leontrolski/immerframe"}, "release_url": "https://pypi.org/project/immerframe/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "creates the next immutable object by simply modifying the current one", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>immerframe</h1>\n<p>Intuitively perform deep updates on python objects</p>\n<ul>\n<li>without mutating them</li>\n<li>while being efficient via structural sharing - no <code>deepcopy</code></li>\n<li>while maintaining type correctness</li>\n</ul>\n<p><em>This is (almost) a Python port of <a href=\"https://github.com/mweststrate/immer\" rel=\"nofollow\">immer</a>.</em></p>\n<pre>pip install immerframe\n</pre>\n<p>First, let's import some stuff</p>\n<pre><code>from dataclasses import dataclass\nfrom immerframe import Proxy\n</code></pre>\n<p>Now, consider the data:</p>\n<pre><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Ant</span><span class=\"p\">:</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"n\">ant_10</span> <span class=\"o\">=</span> <span class=\"n\">Ant</span><span class=\"p\">(</span><span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">ant_20</span> <span class=\"o\">=</span> <span class=\"n\">Ant</span><span class=\"p\">(</span><span class=\"n\">age</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">nested</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"ants\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">ant_10</span><span class=\"p\">,</span> <span class=\"n\">ant_20</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<p>let's pretend to mutate it</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Proxy</span><span class=\"p\">(</span><span class=\"n\">nested</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">new_nested</span><span class=\"p\">):</span>\n    <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s2\">\"ants\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s2\">\"ants\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">99</span>\n</pre>\n<p>(note <code>p</code> and <code>new_nested</code> should have the correct types in mypy)</p>\n<p><code>nested</code> will remain the same</p>\n<pre><span class=\"k\">assert</span> <span class=\"n\">nested</span> <span class=\"o\">==</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"ants\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">ant_10</span><span class=\"p\">,</span> <span class=\"n\">ant_20</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<p><code>new_nested</code> will be <code>nested</code>, but with the mutations with specified in the <code>with Proxy(...)</code> block</p>\n<p>assert new_nested == {\n\"ants\": [Ant(age=11), ant_20],\n\"foo\": 99,\n}</p>\n<pre><code>\nbut it _won't_ be a deep copy\n\n```python\nassert new_nested[\"ants\"][1] is ant_20\n</code></pre>\n<p><code>immerframe</code> supports most thing's that can be <code>copy</code>ed</p>\n<h2>Things to remember</h2>\n<h4>Mutating the same thing in a block twice may not do what you'd expect in the following type of case:</h4>\n<pre><span class=\"k\">with</span> <span class=\"n\">Proxy</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">new_l</span><span class=\"p\">):</span>\n    <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">5</span>\n    <span class=\"n\">l</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">10</span>\n</pre>\n<p>will give <code>l == [11]</code></p>\n<h4>Use keys rather than references to loop over and mutate nested <code>dict</code>s/<code>list</code>s:</h4>\n<pre><span class=\"k\">with</span> <span class=\"n\">Proxy</span><span class=\"p\">(</span><span class=\"n\">new_nested</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">new_nested</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">new_nested</span><span class=\"p\">:</span>\n        <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">new_nested</span><span class=\"p\">[</span><span class=\"s2\">\"ants\"</span><span class=\"p\">]):</span>\n        <span class=\"k\">if</span> <span class=\"n\">n</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">&lt;</span> <span class=\"mi\">15</span><span class=\"p\">:</span>\n            <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"s2\">\"ants\"</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">+</span> <span class=\"mi\">10</span>\n</pre>\n<h3>TODO</h3>\n<ul>\n<li>implement all dunder methods</li>\n<li>finish typing</li>\n</ul>\n\n          </div>"}, "last_serial": 6619617, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "81a0c9438761178bcb03f9a3a976dacc", "sha256": "4dad4550a42e21ee2a77cba04a89301e82dc8cc98c393e49490e163542085588"}, "downloads": -1, "filename": "immerframe-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "81a0c9438761178bcb03f9a3a976dacc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5163, "upload_time": "2019-03-29T09:34:01", "upload_time_iso_8601": "2019-03-29T09:34:01.250082Z", "url": "https://files.pythonhosted.org/packages/e3/54/e74a0958e3c80d4d583aa850d197510a31eed614c5a0cbc69c91964b294a/immerframe-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a3d3927e2953d7f2f2d9ddbf6eaee23a", "sha256": "168332fc9ad306083764e81ac947189991e98b1a76dc660244bb6ff285d76d17"}, "downloads": -1, "filename": "immerframe-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a3d3927e2953d7f2f2d9ddbf6eaee23a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3831, "upload_time": "2019-03-29T09:34:03", "upload_time_iso_8601": "2019-03-29T09:34:03.070778Z", "url": "https://files.pythonhosted.org/packages/4d/69/4bb2e928681b73cec16249150bfae28f241abf11ce323e13c09610650d64/immerframe-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "acb02ca72da5597e4b26ceaa716b3b7d", "sha256": "85a88044a73bbe6a3f06957a7e80af7341821b58c537294b85ce0906368d0048"}, "downloads": -1, "filename": "immerframe-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "acb02ca72da5597e4b26ceaa716b3b7d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5256, "upload_time": "2019-03-29T13:44:34", "upload_time_iso_8601": "2019-03-29T13:44:34.604675Z", "url": "https://files.pythonhosted.org/packages/46/66/52d461f55982ba11ec01e59093fc92657ffcf808e95d26e6a0f9a3626136/immerframe-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d1dd84a7ca36aaa93adbf6e389377d4", "sha256": "2afa7722c151f45954a05e76f6e9a13023d835b0fae08f77b619ed9851628c31"}, "downloads": -1, "filename": "immerframe-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2d1dd84a7ca36aaa93adbf6e389377d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3929, "upload_time": "2019-03-29T13:44:36", "upload_time_iso_8601": "2019-03-29T13:44:36.389616Z", "url": "https://files.pythonhosted.org/packages/ac/fa/28e56eb5c38420ee123e189cd7ab5f668fb40a23e7a466cc3be8bbb5ab73/immerframe-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "303ecc3135c33143bbaac5aa3da9bb02", "sha256": "528eb69b1373c94f6ee450da6fb64dee32dcb2463ce707f748981d77ba18295f"}, "downloads": -1, "filename": "immerframe-0.0.3.tar.gz", "has_sig": false, "md5_digest": "303ecc3135c33143bbaac5aa3da9bb02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4260, "upload_time": "2019-04-11T15:57:57", "upload_time_iso_8601": "2019-04-11T15:57:57.546578Z", "url": "https://files.pythonhosted.org/packages/0d/62/a507407fe023ccca7bb2ca621f5daf27e2f07f015f498cf7a2cde7ea34b3/immerframe-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "84004deefde3bbdd5771bdabb94b3aff", "sha256": "94413e362a6315dbcbe93c0b893dacb89c11caef877980ae9d01806a27014bd3"}, "downloads": -1, "filename": "immerframe-0.0.4.tar.gz", "has_sig": false, "md5_digest": "84004deefde3bbdd5771bdabb94b3aff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4339, "upload_time": "2019-04-11T16:10:56", "upload_time_iso_8601": "2019-04-11T16:10:56.461670Z", "url": "https://files.pythonhosted.org/packages/41/2c/c99f8ede83974f59bff99bd9efc054abe5e71dfbcfec8a568fa9bfc2f8bb/immerframe-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "21cb6de57f98a20066bfeac7fb1aae39", "sha256": "abae9ccaf8f2393d1441d15894314f13e539de8de5c305af3af1747bd4a0fc6a"}, "downloads": -1, "filename": "immerframe-0.0.5.tar.gz", "has_sig": false, "md5_digest": "21cb6de57f98a20066bfeac7fb1aae39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4538, "upload_time": "2019-04-11T17:01:50", "upload_time_iso_8601": "2019-04-11T17:01:50.296498Z", "url": "https://files.pythonhosted.org/packages/a0/52/259d44ef726f2bb47301b5d54174d0c59b18b2787a2c96ea0683ab4a4fb5/immerframe-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "3ee433c5bcf9da9bc46fbc4ff4e065e1", "sha256": "b683bcc7850195601fffdfd99798e4800277e948564eaadc46de3b5b6bac5a16"}, "downloads": -1, "filename": "immerframe-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ee433c5bcf9da9bc46fbc4ff4e065e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5035, "upload_time": "2020-02-12T22:28:28", "upload_time_iso_8601": "2020-02-12T22:28:28.733372Z", "url": "https://files.pythonhosted.org/packages/3f/99/9b7a59060843251b50dae37cdd11a462850a19393be4f4a0d09c418010b0/immerframe-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3ee433c5bcf9da9bc46fbc4ff4e065e1", "sha256": "b683bcc7850195601fffdfd99798e4800277e948564eaadc46de3b5b6bac5a16"}, "downloads": -1, "filename": "immerframe-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3ee433c5bcf9da9bc46fbc4ff4e065e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5035, "upload_time": "2020-02-12T22:28:28", "upload_time_iso_8601": "2020-02-12T22:28:28.733372Z", "url": "https://files.pythonhosted.org/packages/3f/99/9b7a59060843251b50dae37cdd11a462850a19393be4f4a0d09c418010b0/immerframe-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:37 2020"}