{"info": {"author": "Brian Lee, Neil Stoddard", "author_email": "brian.lee@ni.com, neil.stoddard@ni.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Manufacturing", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: System :: Hardware :: Hardware Drivers"], "description": "===========  =================================================================================================================================\r\nInfo         Contains a Python API for interacting with NI-DAQmx. See `GitHub <https://github.com/ni/nidaqmx-python/>`_ for the latest source.\r\nAuthor       National Instruments\r\n===========  =================================================================================================================================\r\n\r\nAbout\r\n=====\r\n\r\nThe **nidaqmx** package contains an API (Application Programming Interface)\r\nfor interacting with the NI-DAQmx driver. The package is implemented in Python.\r\nThis package was created and is supported by NI. The package is implemented as a \r\ncomplex, highly object-oriented wrapper around the NI-DAQmx C API using the \r\n`ctypes <https://docs.python.org/2/library/ctypes.html>`_ Python library.\r\n\r\n**nidaqmx** 0.5 supports all versions of the NI-DAQmx driver that ships with the\r\nC API. The C API is included in any version of the driver that supports it. The \r\n**nidaqmx** package does not require installation of the C header files.\r\n\r\nSome functions in the **nidaqmx** package may be unavailable with earlier \r\nversions of the NI-DAQmx driver. Visit the \r\n`ni.com/downloads <http://www.ni.com/downloads/>`_ to upgrade your version of \r\nNI-DAQmx.\r\n\r\n**nidaqmx** supports only the Windows operating system.\r\n\r\n**nidaqmx** supports CPython 2.7, 3.4+, PyPy2, and PyPy3.\r\n\r\nInstallation\r\n============\r\n\r\nRunning **nidaqmx** requires NI-DAQmx or NI-DAQmx Runtime. Visit the\r\n`ni.com/downloads <http://www.ni.com/downloads/>`_ to download the latest version \r\nof NI-DAQmx.\r\n\r\n**nidaqmx** can be installed with `pip <http://pypi.python.org/pypi/pip>`_::\r\n\r\n  $ python -m pip install nidaqmx\r\n\r\nOr **easy_install** from\r\n`setuptools <http://pypi.python.org/pypi/setuptools>`_::\r\n\r\n  $ python -m easy_install nidaqmx\r\n\r\nYou also can download the project source and run::\r\n\r\n  $ python setup.py install\r\n\r\n.. _usage-section:\r\n\r\nUsage\r\n=====\r\nThe following is a basic example of using an **nidaqmx.task.Task** object. \r\nThis example illustrates how the single, dynamic **nidaqmx.task.Task.read** \r\nmethod returns the appropriate data type.\r\n\r\n.. code-block:: python\r\n\r\n  >>> import nidaqmx\r\n  >>> with nidaqmx.Task() as task:\r\n  ...     task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\")\r\n  ...     task.read()\r\n  ...\r\n  -0.07476920729381246\r\n  >>> with nidaqmx.Task() as task:\r\n  ...     task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\")\r\n  ...     task.read(number_of_samples_per_channel=2)\r\n  ...\r\n  [0.26001373311970705, 0.37796597238117036]\r\n  >>> from nidaqmx.constants import LineGrouping\r\n  >>> with nidaqmx.Task() as task:\r\n  ...     task.di_channels.add_di_chan(\r\n  ...         \"cDAQ2Mod4/port0/line0:1\", line_grouping=LineGrouping.CHAN_PER_LINE)\r\n  ...     task.read(number_of_samples_per_channel=2)\r\n  ...\r\n  [[False, True], [True, True]]\r\n\r\nA single, dynamic **nidaqmx.task.Task.write** method also exists.\r\n\r\n.. code-block:: python\r\n\r\n  >>> import nidaqmx\r\n  >>> from nidaqmx.types import CtrTime\r\n  >>> with nidaqmx.Task() as task:\r\n  ...     task.co_channels.add_co_pulse_chan_time(\"Dev1/ctr0\")\r\n  ...     sample = CtrTime(high_time=0.001, low_time=0.001)\r\n  ...     task.write(sample)\r\n  ...\r\n  1\r\n  >>> with nidaqmx.Task() as task:\r\n  ...     task.ao_channels.add_ao_voltage_chan(\"Dev1/ao0\")\r\n  ...     task.write([1.1, 2.2, 3.3, 4.4, 5.5], auto_start=True)\r\n  ...\r\n  5\r\n\r\nConsider using the **nidaqmx.stream_readers** and **nidaqmx.stream_writers**\r\nclasses to increase the performance of your application, which accept pre-allocated\r\nNumPy arrays.\r\n\r\nFollowing is an example of using an **nidaqmx.system.System** object.\r\n\r\n.. code-block:: python\r\n\r\n  >>> import nidaqmx.system\r\n  >>> system = nidaqmx.system.System.local()\r\n  >>> system.driver_version\r\n  DriverVersion(major_version=16L, minor_version=0L, update_version=0L)\r\n  >>> for device in system.devices:\r\n  ...     print(device)\r\n  ...\r\n  Device(name=Dev1)\r\n  Device(name=Dev2)\r\n  Device(name=cDAQ1)\r\n  >>> import collections\r\n  >>> isinstance(system.devices, collections.Sequence)\r\n  True\r\n  >>> device = system.devices['Dev1']\r\n  >>> device == nidaqmx.system.Device('Dev1')\r\n  True\r\n  >>> isinstance(device.ai_physical_chans, collections.Sequence)\r\n  True\r\n  >>> phys_chan = device.ai_physical_chans['ai0']\r\n  >>> phys_chan\r\n  PhysicalChannel(name=Dev1/ai0)\r\n  >>> phys_chan == nidaqmx.system.PhysicalChannel('Dev1/ai0')\r\n  True\r\n  >>> phys_chan.ai_term_cfgs\r\n  [<TerminalConfiguration.RSE: 10083>, <TerminalConfiguration.NRSE: 10078>, <TerminalConfiguration.DIFFERENTIAL: 10106>]\r\n  >>> from enum import Enum\r\n  >>> isinstance(phys_chan.ai_term_cfgs[0], Enum)\r\n  True\r\n\r\nSupport / Feedback\r\n==================\r\n\r\nThe **nidaqmx** package is supported by NI. For support for **nidaqmx**, open \r\na request through the NI support portal at `ni.com <http://www.ni.com>`_.\r\n\r\nBugs / Feature Requests\r\n=======================\r\n\r\nTo report a bug or submit a feature request, please use the \r\n`GitHub issues page <https://github.com/ni/nidaqmx-python/issues>`_.\r\n\r\nInformation to Include When Asking for Help\r\n-------------------------------------------\r\n\r\nPlease include **all** of the following information when opening an issue:\r\n\r\n- Detailed steps on how to reproduce the problem and full traceback, if \r\n  applicable.\r\n- The python version used::\r\n\r\n  $ python -c \"import sys; print(sys.version)\"\r\n\r\n- The versions of the **nidaqmx**, numpy, six and enum34 packages used::\r\n\r\n  $ python -m pip list\r\n\r\n- The version of the NI-DAQmx driver used. Follow \r\n  `this KB article <http://digital.ni.com/express.nsf/bycode/ex8amn>`_ \r\n  to determine the version of NI-DAQmx you have installed.\r\n- The operating system and version, for example Windows 7, CentOS 7.2, ...\r\n\r\nDocumentation\r\n=============\r\n\r\nDocumentation is available `here <http://nidaqmx-python.readthedocs.io>`_.\r\n\r\nAdditional Documentation\r\n========================\r\n\r\nRefer to the `NI-DAQmx Help <http://digital.ni.com/express.nsf/bycode/exagg4>`_ \r\nfor API-agnostic information about NI-DAQmx or measurement concepts.\r\n\r\nNI-DAQmx Help installs only with the full version of NI-DAQmx.\r\n\r\nLicense\r\n=======\r\n\r\n**nidaqmx** is licensed under an MIT-style license (see\r\n`LICENSE <https://github.com/ni/nidaqmx-python/blob/master/LICENSE>`_).\r\nOther incorporated projects may be licensed under different licenses. All\r\nlicenses allow for non-commercial and commercial use.\r\n\r\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "nidaqmx,nidaq,daqmx,daq", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nidaqmx", "package_url": "https://pypi.org/project/nidaqmx/", "platform": "", "project_url": "https://pypi.org/project/nidaqmx/", "project_urls": null, "release_url": "https://pypi.org/project/nidaqmx/0.5.7/", "requires_dist": ["numpy", "six", "enum34; python_version < \"3.4\""], "requires_python": "", "summary": "NI-DAQmx Python API", "version": "0.5.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Info</td>\n<td>Contains a Python API for interacting with NI-DAQmx. See <a href=\"https://github.com/ni/nidaqmx-python/\" rel=\"nofollow\">GitHub</a> for the latest source.</td>\n</tr>\n<tr><td>Author</td>\n<td>National Instruments</td>\n</tr>\n</tbody>\n</table>\n<div id=\"about\">\n<h2>About</h2>\n<p>The <strong>nidaqmx</strong> package contains an API (Application Programming Interface)\nfor interacting with the NI-DAQmx driver. The package is implemented in Python.\nThis package was created and is supported by NI. The package is implemented as a\ncomplex, highly object-oriented wrapper around the NI-DAQmx C API using the\n<a href=\"https://docs.python.org/2/library/ctypes.html\" rel=\"nofollow\">ctypes</a> Python library.</p>\n<p><strong>nidaqmx</strong> 0.5 supports all versions of the NI-DAQmx driver that ships with the\nC API. The C API is included in any version of the driver that supports it. The\n<strong>nidaqmx</strong> package does not require installation of the C header files.</p>\n<p>Some functions in the <strong>nidaqmx</strong> package may be unavailable with earlier\nversions of the NI-DAQmx driver. Visit the\n<a href=\"http://www.ni.com/downloads/\" rel=\"nofollow\">ni.com/downloads</a> to upgrade your version of\nNI-DAQmx.</p>\n<p><strong>nidaqmx</strong> supports only the Windows operating system.</p>\n<p><strong>nidaqmx</strong> supports CPython 2.7, 3.4+, PyPy2, and PyPy3.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Running <strong>nidaqmx</strong> requires NI-DAQmx or NI-DAQmx Runtime. Visit the\n<a href=\"http://www.ni.com/downloads/\" rel=\"nofollow\">ni.com/downloads</a> to download the latest version\nof NI-DAQmx.</p>\n<p><strong>nidaqmx</strong> can be installed with <a href=\"http://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a>:</p>\n<pre>$ python -m pip install nidaqmx\n</pre>\n<p>Or <strong>easy_install</strong> from\n<a href=\"http://pypi.python.org/pypi/setuptools\" rel=\"nofollow\">setuptools</a>:</p>\n<pre>$ python -m easy_install nidaqmx\n</pre>\n<p>You also can download the project source and run:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<span id=\"usage-section\"></span><h2>Usage</h2>\n<p>The following is a basic example of using an <strong>nidaqmx.task.Task</strong> object.\nThis example illustrates how the single, dynamic <strong>nidaqmx.task.Task.read</strong>\nmethod returns the appropriate data type.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">nidaqmx</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">nidaqmx</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">ai_channels</span><span class=\"o\">.</span><span class=\"n\">add_ai_voltage_chan</span><span class=\"p\">(</span><span class=\"s2\">\"Dev1/ai0\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">-</span><span class=\"mf\">0.07476920729381246</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">nidaqmx</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">ai_channels</span><span class=\"o\">.</span><span class=\"n\">add_ai_voltage_chan</span><span class=\"p\">(</span><span class=\"s2\">\"Dev1/ai0\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">number_of_samples_per_channel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"p\">[</span><span class=\"mf\">0.26001373311970705</span><span class=\"p\">,</span> <span class=\"mf\">0.37796597238117036</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nidaqmx.constants</span> <span class=\"kn\">import</span> <span class=\"n\">LineGrouping</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">nidaqmx</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">di_channels</span><span class=\"o\">.</span><span class=\"n\">add_di_chan</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>         <span class=\"s2\">\"cDAQ2Mod4/port0/line0:1\"</span><span class=\"p\">,</span> <span class=\"n\">line_grouping</span><span class=\"o\">=</span><span class=\"n\">LineGrouping</span><span class=\"o\">.</span><span class=\"n\">CHAN_PER_LINE</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">number_of_samples_per_channel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"p\">[[</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]]</span>\n</pre>\n<p>A single, dynamic <strong>nidaqmx.task.Task.write</strong> method also exists.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">nidaqmx</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">nidaqmx.types</span> <span class=\"kn\">import</span> <span class=\"n\">CtrTime</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">nidaqmx</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">co_channels</span><span class=\"o\">.</span><span class=\"n\">add_co_pulse_chan_time</span><span class=\"p\">(</span><span class=\"s2\">\"Dev1/ctr0\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">CtrTime</span><span class=\"p\">(</span><span class=\"n\">high_time</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">low_time</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">nidaqmx</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">ao_channels</span><span class=\"o\">.</span><span class=\"n\">add_ao_voltage_chan</span><span class=\"p\">(</span><span class=\"s2\">\"Dev1/ao0\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">([</span><span class=\"mf\">1.1</span><span class=\"p\">,</span> <span class=\"mf\">2.2</span><span class=\"p\">,</span> <span class=\"mf\">3.3</span><span class=\"p\">,</span> <span class=\"mf\">4.4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">],</span> <span class=\"n\">auto_start</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">5</span>\n</pre>\n<p>Consider using the <strong>nidaqmx.stream_readers</strong> and <strong>nidaqmx.stream_writers</strong>\nclasses to increase the performance of your application, which accept pre-allocated\nNumPy arrays.</p>\n<p>Following is an example of using an <strong>nidaqmx.system.System</strong> object.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">nidaqmx.system</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span> <span class=\"o\">=</span> <span class=\"n\">nidaqmx</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">driver_version</span>\n<span class=\"n\">DriverVersion</span><span class=\"p\">(</span><span class=\"n\">major_version</span><span class=\"o\">=</span><span class=\"mi\">16</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">minor_version</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">update_version</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"n\">L</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">device</span> <span class=\"ow\">in</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">devices</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Dev1</span><span class=\"p\">)</span>\n<span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Dev2</span><span class=\"p\">)</span>\n<span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">cDAQ1</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">collections</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">devices</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">devices</span><span class=\"p\">[</span><span class=\"s1\">'Dev1'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">device</span> <span class=\"o\">==</span> <span class=\"n\">nidaqmx</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">(</span><span class=\"s1\">'Dev1'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">ai_physical_chans</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">phys_chan</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">ai_physical_chans</span><span class=\"p\">[</span><span class=\"s1\">'ai0'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">phys_chan</span>\n<span class=\"n\">PhysicalChannel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">Dev1</span><span class=\"o\">/</span><span class=\"n\">ai0</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">phys_chan</span> <span class=\"o\">==</span> <span class=\"n\">nidaqmx</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">PhysicalChannel</span><span class=\"p\">(</span><span class=\"s1\">'Dev1/ai0'</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">phys_chan</span><span class=\"o\">.</span><span class=\"n\">ai_term_cfgs</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">TerminalConfiguration</span><span class=\"o\">.</span><span class=\"n\">RSE</span><span class=\"p\">:</span> <span class=\"mi\">10083</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">TerminalConfiguration</span><span class=\"o\">.</span><span class=\"n\">NRSE</span><span class=\"p\">:</span> <span class=\"mi\">10078</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">TerminalConfiguration</span><span class=\"o\">.</span><span class=\"n\">DIFFERENTIAL</span><span class=\"p\">:</span> <span class=\"mi\">10106</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">phys_chan</span><span class=\"o\">.</span><span class=\"n\">ai_term_cfgs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">Enum</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n</div>\n<div id=\"support-feedback\">\n<h2>Support / Feedback</h2>\n<p>The <strong>nidaqmx</strong> package is supported by NI. For support for <strong>nidaqmx</strong>, open\na request through the NI support portal at <a href=\"http://www.ni.com\" rel=\"nofollow\">ni.com</a>.</p>\n</div>\n<div id=\"bugs-feature-requests\">\n<h2>Bugs / Feature Requests</h2>\n<p>To report a bug or submit a feature request, please use the\n<a href=\"https://github.com/ni/nidaqmx-python/issues\" rel=\"nofollow\">GitHub issues page</a>.</p>\n<div id=\"information-to-include-when-asking-for-help\">\n<h3>Information to Include When Asking for Help</h3>\n<p>Please include <strong>all</strong> of the following information when opening an issue:</p>\n<ul>\n<li><p>Detailed steps on how to reproduce the problem and full traceback, if\napplicable.</p>\n</li>\n<li><p>The python version used:</p>\n<pre>$ python -c \"import sys; print(sys.version)\"\n</pre>\n</li>\n<li><p>The versions of the <strong>nidaqmx</strong>, numpy, six and enum34 packages used:</p>\n<pre>$ python -m pip list\n</pre>\n</li>\n<li><p>The version of the NI-DAQmx driver used. Follow\n<a href=\"http://digital.ni.com/express.nsf/bycode/ex8amn\" rel=\"nofollow\">this KB article</a>\nto determine the version of NI-DAQmx you have installed.</p>\n</li>\n<li><p>The operating system and version, for example Windows 7, CentOS 7.2, \u2026</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation is available <a href=\"http://nidaqmx-python.readthedocs.io\" rel=\"nofollow\">here</a>.</p>\n</div>\n<div id=\"additional-documentation\">\n<h2>Additional Documentation</h2>\n<p>Refer to the <a href=\"http://digital.ni.com/express.nsf/bycode/exagg4\" rel=\"nofollow\">NI-DAQmx Help</a>\nfor API-agnostic information about NI-DAQmx or measurement concepts.</p>\n<p>NI-DAQmx Help installs only with the full version of NI-DAQmx.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><strong>nidaqmx</strong> is licensed under an MIT-style license (see\n<a href=\"https://github.com/ni/nidaqmx-python/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>).\nOther incorporated projects may be licensed under different licenses. All\nlicenses allow for non-commercial and commercial use.</p>\n</div>\n\n          </div>"}, "last_serial": 7068668, "releases": {"0.5.2": [{"comment_text": "", "digests": {"md5": "e8b55023c2572b1d2b65fc8c89382c30", "sha256": "b7ae11f20ca2b9a0464555bc4e6d5b426a2c532508e0bed5ad2cc36c3c8da540"}, "downloads": -1, "filename": "nidaqmx-0.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e8b55023c2572b1d2b65fc8c89382c30", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 263061, "upload_time": "2017-03-22T21:10:40", "upload_time_iso_8601": "2017-03-22T21:10:40.717387Z", "url": "https://files.pythonhosted.org/packages/12/ae/5cfafa8ba40e86517c9fde60ae0537ca634ceb32afbd4998a59a51209570/nidaqmx-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1aca01328357f7e724f53cc0aa0da0e3", "sha256": "aef21421d1caa4e7a5e080fceaf22b4ed970a2e83a8513715234a7cae1ac9610"}, "downloads": -1, "filename": "nidaqmx-0.5.2.zip", "has_sig": false, "md5_digest": "1aca01328357f7e724f53cc0aa0da0e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 272938, "upload_time": "2017-03-22T21:10:43", "upload_time_iso_8601": "2017-03-22T21:10:43.589540Z", "url": "https://files.pythonhosted.org/packages/a7/5d/8f85366869de02e3a97820f4c98cc0db17fb6b35ae2efe0c655b6791b5d0/nidaqmx-0.5.2.zip", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "fc08bf9a67cdbd55bc40460a6376b1c6", "sha256": "014ff5b0167a605bb769da8442cbaa5e620af9d9375a1b5742ba64a16cb2df2a"}, "downloads": -1, "filename": "nidaqmx-0.5.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fc08bf9a67cdbd55bc40460a6376b1c6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 264151, "upload_time": "2017-07-10T18:42:44", "upload_time_iso_8601": "2017-07-10T18:42:44.352150Z", "url": "https://files.pythonhosted.org/packages/8a/1f/f1264da4993027552497412bc1d9eb2d963d5d3b06083cfd214df0bf9110/nidaqmx-0.5.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "40599cfa2574b816bc5d94f5133968b6", "sha256": "1e140eceac4e8c72755a6b48e81432b9cb8285f298501c5849362831f5d67ce1"}, "downloads": -1, "filename": "nidaqmx-0.5.4.zip", "has_sig": false, "md5_digest": "40599cfa2574b816bc5d94f5133968b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 274970, "upload_time": "2017-07-10T18:42:46", "upload_time_iso_8601": "2017-07-10T18:42:46.899166Z", "url": "https://files.pythonhosted.org/packages/44/78/934f10c30f50b6825cdeb6d1e19b5c6cf1ef46144b1d339df95bbbf02d8c/nidaqmx-0.5.4.zip", "yanked": false}], "0.5.5": [{"comment_text": "", "digests": {"md5": "a49df3a012346d9b191498d4fb0cca08", "sha256": "caa1c5436a4beb0e2deb0fed8b3a4401e49055b76264d68137d7e86a85dcfbce"}, "downloads": -1, "filename": "nidaqmx-0.5.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a49df3a012346d9b191498d4fb0cca08", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 270709, "upload_time": "2017-07-26T20:51:07", "upload_time_iso_8601": "2017-07-26T20:51:07.911671Z", "url": "https://files.pythonhosted.org/packages/44/2b/1bffbe5b6c918af1c8493a82f513c90104191e3535979d35b5852ca3d335/nidaqmx-0.5.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82afad7c120c1cabd788781e14e074d7", "sha256": "b8a3b3c262c590d29f59b636427887b274273da4ccc09a681ed076f7fe4d642c"}, "downloads": -1, "filename": "nidaqmx-0.5.5.zip", "has_sig": false, "md5_digest": "82afad7c120c1cabd788781e14e074d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 281595, "upload_time": "2017-07-26T20:51:10", "upload_time_iso_8601": "2017-07-26T20:51:10.084183Z", "url": "https://files.pythonhosted.org/packages/aa/db/ee406833f398703880895abfe450b0296abec71c6087bf810c0f44981041/nidaqmx-0.5.5.zip", "yanked": false}], "0.5.6": [{"comment_text": "", "digests": {"md5": "829a42a3ddb8b26827efe57bccdbe260", "sha256": "7dcb8ac8f4779d56b07e0e02f75b60ce3cbbe749e035dece10ae8ed62f0786b9"}, "downloads": -1, "filename": "nidaqmx-0.5.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "829a42a3ddb8b26827efe57bccdbe260", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 270839, "upload_time": "2017-09-21T23:02:40", "upload_time_iso_8601": "2017-09-21T23:02:40.923502Z", "url": "https://files.pythonhosted.org/packages/0f/99/16c353577df8a152ca622d34e13e18ee78e781043f602e9b6710568758fd/nidaqmx-0.5.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "03fe8329f657ea7859a62756f9b1d540", "sha256": "a90fb6ced6b18779a1ab8d3a8eefb8611941a9952b615659501d9a3398af0c5f"}, "downloads": -1, "filename": "nidaqmx-0.5.6.zip", "has_sig": false, "md5_digest": "03fe8329f657ea7859a62756f9b1d540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 281720, "upload_time": "2017-09-21T23:02:42", "upload_time_iso_8601": "2017-09-21T23:02:42.637891Z", "url": "https://files.pythonhosted.org/packages/71/e8/a0ac874175d12b500a44057fd73d2b2a12fb6139e8caee53de7f055bff45/nidaqmx-0.5.6.zip", "yanked": false}], "0.5.7": [{"comment_text": "", "digests": {"md5": "6888a346340fd516726733b877c448ee", "sha256": "cf8ede46944dc155d39a32ad4612543a925da72597cc823ca7f7a89b4abdc5be"}, "downloads": -1, "filename": "nidaqmx-0.5.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6888a346340fd516726733b877c448ee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 270919, "upload_time": "2017-12-14T21:15:14", "upload_time_iso_8601": "2017-12-14T21:15:14.483889Z", "url": "https://files.pythonhosted.org/packages/c5/00/40a4ab636f91b6b3bc77e4947ffdf9ad8b4c01c1cc701b5fc6e4df30fe34/nidaqmx-0.5.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a00991ee9aa13d5261becc23fc89c049", "sha256": "678452d2928c758ccb347353745df728c0ee8915a6e4587393c583c5727b18d6"}, "downloads": -1, "filename": "nidaqmx-0.5.7.zip", "has_sig": false, "md5_digest": "a00991ee9aa13d5261becc23fc89c049", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 281807, "upload_time": "2017-12-14T21:15:19", "upload_time_iso_8601": "2017-12-14T21:15:19.442464Z", "url": "https://files.pythonhosted.org/packages/66/2d/64d9cc15b8f1b2127059132a026b8e31a9251a60fd07aea9221e72929a44/nidaqmx-0.5.7.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6888a346340fd516726733b877c448ee", "sha256": "cf8ede46944dc155d39a32ad4612543a925da72597cc823ca7f7a89b4abdc5be"}, "downloads": -1, "filename": "nidaqmx-0.5.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6888a346340fd516726733b877c448ee", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 270919, "upload_time": "2017-12-14T21:15:14", "upload_time_iso_8601": "2017-12-14T21:15:14.483889Z", "url": "https://files.pythonhosted.org/packages/c5/00/40a4ab636f91b6b3bc77e4947ffdf9ad8b4c01c1cc701b5fc6e4df30fe34/nidaqmx-0.5.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a00991ee9aa13d5261becc23fc89c049", "sha256": "678452d2928c758ccb347353745df728c0ee8915a6e4587393c583c5727b18d6"}, "downloads": -1, "filename": "nidaqmx-0.5.7.zip", "has_sig": false, "md5_digest": "a00991ee9aa13d5261becc23fc89c049", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 281807, "upload_time": "2017-12-14T21:15:19", "upload_time_iso_8601": "2017-12-14T21:15:19.442464Z", "url": "https://files.pythonhosted.org/packages/66/2d/64d9cc15b8f1b2127059132a026b8e31a9251a60fd07aea9221e72929a44/nidaqmx-0.5.7.zip", "yanked": false}], "timestamp": "Fri May  8 00:45:25 2020"}