{"info": {"author": "Yaroslav Polyakov", "author_email": "yaroslaff@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License"], "description": "a2conf is CLI utilities and python module to read/write apache2 config files.\n\n# Installation\nUsual simple way:\n~~~\npip3 install a2conf\n~~~\n\nor get sources from git repo:\n~~~\ngit clone https://gitlab.com/yaroslaff/a2conf.git\n~~~\nIf using git sources (without installing), work from root dir of repo and do `export PYTONPATH=.`\n\n\n# CLI utilities\n## a2conf.py utility\n### Examples\n\nFor all examples we will use file \n[examples/example.conf](https://gitlab.com/yaroslaff/a2conf/raw/master/examples/example.conf).\nYou can omit this parameter to use default `/etc/apache2/apache2.conf`.\n\nUse `export PYTHONPATH=.` to use module if it's not installed.\n\nMost useful examples:\n~~~shell\n$ bin/a2conf examples/example.conf --dump --vhost secure.example.com \n# examples/example.conf:15\n<VirtualHost *:443> \n    # SSL site\n    DocumentRoot /var/www/example \n    ServerName example.com # .... OUR TEST SITE ....\n    ServerAlias www.example.com 1.example.com 2.example.com secure.example.com \n    DirectoryIndex index.html index.htm default.htm index.php \n    Options -Indexes +FollowSymLinks \n    SSLEngine On # SSL Enabled for this virtual host\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem \n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem \n    SSLCertificateChainFile /etc/letsencrypt/live/example.com/chain.pem \n</VirtualHost> \n\n# Only specific commands with --vhost filter\n$ bin/a2conf examples/example.conf --vhost www.example.com:443 --cmd documentroot sslcertificatefile \nDocumentRoot /var/www/example\nSSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n\n# Same output achieved with other way of filtering (based on SSLEngine directive)\n$ bin/a2conf examples/example.conf --filter sslengine on --cmd documentroot sslcertificatefile\nDocumentRoot /var/www/example\nSSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n\n# All hostnames configured in this config file\n$ bin/a2conf examples/example.conf --cmd servername serveralias --uargs\nsecure.example.com example.com www.example.com 2.example.com 1.example.com\n\n# per-vhost summary with filtering\n$ bin/a2conf examples/example.conf --cmd servername serveralias --vhfmt 'Host: {servername} Root: {documentroot} Cert: {sslcertificatefile}' --filter sslcertificatefile\nHost: example.com Root: /var/www/example Cert: /etc/letsencrypt/live/example.com/fullchain.pem\n~~~\n\nYou can get list of all available tokens for `--vhfmt` option in verbose mode (`-v` option).\n\n## a2certbot.py\na2certbot.py utility used to quickly detect common [LetsEncrypt](https://letsencrypt.org/) configuration errors such as:\n- DocumentRoot mismatch between VirtualHost and LetsEncrypt renew config file (e.g. if someone moved site content)\n- RewriteRule or Redirect apache directives preventing verification\n- DNS record points to other host or not exists at all\n- And **ANY OTHER** problem (such as using wrong certificate path in apache or whatever). a2certbot.py \nsimulates HTTP verification (If LetsEncrypt verification fails, a2certbot will fail too, and vice versa).\n\na2certbot.py does not calls LetsEncrypt servers for verification, so if you will use a2certbot.py to verify your \nconfiguration, you will not hit [failed validation limit](https://letsencrypt.org/docs/rate-limits/) \n(*5 failures per account, per hostname, per hour* at moment) and will not be blacklisted on LetsEncrypt site.\n\nBefore requesting new certificates:\n~~~shell\n# Verify configuration for website for which you want to request certificate for first time.\nbin/a2certbot.py --prepare -w /var/www/virtual/static.okerr.com/ -d static.okerr.com\n=== manual ===\nInfo:\n    (static.okerr.com) is local 37.59.102.26\n    (static.okerr.com) Vhost: /etc/apache2/sites-enabled/static.okerr.com.conf:1\n    (static.okerr.com) DocumentRoot: /var/www/virtual/static.okerr.com/\n    (static.okerr.com) DocumentRoot /var/www/virtual/static.okerr.com/ matches LetsEncrypt and Apache\n    (static.okerr.com) Simulated check match root: /var/www/virtual/static.okerr.com/\n---\n\n# You can verify all hostnames for site\nbin/a2certbot.py --prepare -w /var/www/virtual/static.okerr.com/ -d static.okerr.com -d static2.okerr.com\n\n# ... and finally simple main all-in-one command, it guesses aliases and root (command below does same as command above):\nbin/a2certbot.py --prepare -d static.okerr.com --aliases\n~~~\n\nIf `certbot renew` fails:\n~~~shell\n# Check (verify) ALL existing LetsEncrypt certificates (to check why 'certbot renew' may fail ):\nroot@bravo:/home/xenon# a2certbot.py \n=== /etc/letsencrypt/renewal/bravo.okerr.com.conf PROBLEM ===\nInfo:\n    (bravo.okerr.com) Vhost: /etc/apache2/sites-enabled/okerr.conf:17\n    LetsEncrypt conf file: /etc/letsencrypt/renewal/bravo.okerr.com.conf\n    bravo.okerr.com is local 37.59.102.26\nProblems:\n    No DocumentRoot in vhost at /etc/apache2/sites-enabled/okerr.conf:17\n---\n\n# Verify only one certificate \nroot@bravo:/home/xenon# a2certbot.py --host bravo.okerr.com\n=== /etc/letsencrypt/renewal/bravo.okerr.com.conf PROBLEM ===\nInfo:\n    (bravo.okerr.com) Vhost: /etc/apache2/sites-enabled/okerr.conf:17\n    LetsEncrypt conf file: /etc/letsencrypt/renewal/bravo.okerr.com.conf\n    bravo.okerr.com is local 37.59.102.26\nProblems:\n    No DocumentRoot in vhost at /etc/apache2/sites-enabled/okerr.conf:17\n---\n~~~\n\na2certbot.py can generate letsencrypt certificates in simple way (automatically detecting all aliases and \nDocumentRoot, but you can use -d instead of --aliases):\n~~~\nroot@bravo:/home/xenon# a2certbot.py --create -d static.okerr.com --aliases\nCreate cert for static.okerr.com\nRUNNING: certbot certonly --webroot -w /var/www/virtual/static.okerr.com/ -d static.okerr.com -d static2.okerr.com\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator webroot, Installer None\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for static2.okerr.com\nUsing the webroot path /var/www/virtual/static.okerr.com for all unmatched domains.\nWaiting for verification...\nCleaning up challenges\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n...\n~~~\n\n### a2certbot.py warnings (false positives)\na2certbot.py expects that requests to .well-known directory of HTTP (port 80) virtualhost must not be redirected.\nIf you have redirection like this: `Redirect 301 / https://example.com/` it will report problem:\n~~~\nProblems:\n    Requests will be redirected: Redirect 301 / https://www.example.com/\n~~~\n\nActually, this could be OK (false positive) and real verification from `certbot renew` may pass (if https \nsite has same  DocumentRoot). To see if this is real problem or not see result for 'Simulated check'. \nIf simulated check matches - website will pass certbot verification. \n\nTo avoid such false positive, do not use such 'blind' redirection, better use this:\n~~~\n      RewriteCond %{REQUEST_URI} !^/\\.well\\-known        \n      RewriteRule (.*) https://%{SERVER_NAME}$1 [R=301,L]\n~~~\nThis code in `<VirtuaHost *:80>` context will redirect all requests to HTTPS site EXCEPT LetsEncrypt verification \nrequests.\n\n## a2okerr.py\na2okerr.py is useful only if you are using [okerr](https://okerr.com/): free and open source hybrid (host/network) monitoring system. \n\n[Okerr](https://okerr.com/) is like [nagios](https://www.nagios.org/) or [zabbix](https://www.zabbix.com/), but can perform network checks \nfrom remote locations, has tiny and optional local client  which can run from cron, has powerful logical\nindicators (notify me only if more then 2 servers are dead, notify me if any problem is not fixed for more then 30 minutes, ...), \npublic status pages (like https://status.io/ but free), fault-tolerant sites \n(okerr will redirect dynamic DNS record to backup server if main server is dead, and point it back to main server\n when it's OK), supports [Telegram](https://telegram.org/) and has many other nice features. \n\nYou can use it as free service (like wordpress or gmail) or you can install okerr server on your own linux machine \nfrom  [okerr git repository](https://gitlab.com/yaroslaff/okerr-dev/).\n\nYou will need to install small [okerrupdate](https://gitlab.com/yaroslaff/okerrupdate) package to use a2okerr.py: `pip3 install okerrupdate`.\n\na2okerr.py discovers all https sites from apache config and creates SSL-indicator in your okerr project \nfor each website. You will get alert message to email and/or telegram if any of your https sites has any problem \n(certificate is not updated in time for any reason and will expire soon or already expired. \nWebsite unavailable for any reason). If you have linux server or website - you need okerr.\n\n~~~shell\n# Create indicator for all local https websites. If indicator already exists, HTTP error 400 will be received - this is OK.\na2okerr.py\n\n# alter prefix, policy and description\na2okerr.py --prefix my:prefix: --policy Hourly --desc \"I love okerr and a2okerr\"\n\n# do not really create indicators, just dry run\na2oker.py --dry\n~~~\n\n# Node class\n\n## Properties and methods\n\n`raw` - text line as-is, with all spaces, tabs and with comments\n\n`cmd` - cmd ('ServerName') without args or None (if section)\n\n`section` - section (e.g. 'VirtualHost')\n\n`args` - one text line args to cmd or section. for vhost args could be '*:80', for ServerAlias: 'example.com example.org'\n\n`name` - name of node. cmd if node has cmd, or section name (in brackets) if this is section. e.g. 'ServerName' or\n'<VirtualHost>'\n\n`content` - list of child nodes (possible empty). For container sections (VirtualHost) attribute `content` is list\n of children. For usual commands (e.g. ServerName) - empty list.\n\n\n### Methods\n\n`__init__(self, read=filename, raw=None, parent=None, name=None, path=None, line=None, includes=True)` - In most cases you should not need to use\nany parameters here except `includes` and `read`. `read` is apache config filename to read. Use `includes=False` if you want `read_file` method to ignore `Include*` directives.\n\n`children(name=None, recursive=None)` - Main query method, returns generator for all children  nodes (e.g. for VirtualHost node). Generator is empty if no\nchildren. If name specified, generator will return only nodes with this name (e.g. 'servername' or '<VirtualHost>'). If recursive is On,\ngenerator will return nested nodes too (e.g. what is inside `<IfModule>` or `<Directory>` settings). To get just one first element use\n`next(node.children('ServerName'))`. It will raise `StopIteration` if node has no such children elements.\n\n`first(name, recursive=None)` - wrapper for `children()`. Returns only first element or `None`. Not raising exceptions.\n\n`read_file(filename)` - Reads apache config. Called automatically from `__init__` if you specified `read` argument.\n\n`dump(fh=sys.stdout, depth=0)` - dump loaded config in unified format (indented). if fh not specified, just dumps to stdout()\n\n`write_file(filename)` - opens file for writing and dump() to this file.\n\n## Examples\n\n### Just dump apache config\n`examples/ex1_dump.py` just loads config and dumps its structure (without comments) as JSON:\n~~~python\n#!/usr/bin/env python3\nimport sys\nimport a2conf\nimport json\n\nroot = a2conf.Node(sys.argv[1])\n\ndef section_dump(node):\n    data = dict()\n\n    for ch in node.children():\n        if ch.section and not ch.section.startswith('/'):\n            if ch.args:\n                key = ch.section + ' ' + ch.args\n            else:\n                key = ch.section\n            data[key] = section_dump(ch)\n        elif ch.cmd:\n            data[ch.cmd] = ch.args\n    return data\n\ndata = section_dump(root)\nprint(json.dumps(data, indent=4))\n~~~\n\nOutput:\n~~~\n$ examples/ex1_dump.py examples/example.conf\n{\n    \"VirtualHost *:80\": {\n        \"DocumentRoot\": \"/var/www/example\",\n        \"ServerName\": \"example.com\",\n        \"ServerAlias\": \"www.example.com example.com 1.example.com 2.example.com\",\n        \"DirectoryIndex\": \"index.html index.htm default.htm index.php\",\n        \"Options\": \"-Indexes +FollowSymLinks\"\n    },\n    \"VirtualHost *:443\": {\n        \"DocumentRoot\": \"/var/www/example\",\n        \"ServerName\": \"example.com\",\n        \"ServerAlias\": \"www.example.com 1.example.com 2.example.com secure.example.com\",\n        \"DirectoryIndex\": \"index.html index.htm default.htm index.php\",\n        \"Options\": \"-Indexes +FollowSymLinks\",\n        \"SSLEngine\": \"On\",\n        \"SSLCertificateFile\": \"/etc/letsencrypt/live/example.com/fullchain.pem\",\n        \"SSLCertificateKeyFile\": \"/etc/letsencrypt/live/example.com/privkey.pem\",\n        \"SSLCertificateChainFile\": \"/etc/letsencrypt/live/example.com/chain.pem\"\n    }\n}\n~~~\nNote - this is short example just for demo, it's not very good for production: if virtualhost has more then one directive\n(e.g. `ServerAlias`, `RewriteRule`, `RewriteCond`), only last one will be used.\n\n\n### Query\n`examples/ex2_query.py` print all SSL sites from config:\n```python\n#!/usr/bin/env python3\nimport sys\nimport a2conf\nroot = a2conf.Node(sys.argv[1])\n\nfor vhost in root.children('<VirtualHost>'):\n    servername = vhost.first('servername').args # One query method, via first(). Not much fail-safe but short.\n\n    try:\n        ssl_option = next(vhost.children('sslengine')).args # Other query method, via children()\n        if ssl_option.lower() == 'on':\n            print(\"{} has SSL enabled\".format(servername))\n    except StopIteration:\n        # No SSL Engine directive in this vhost\n        continue\n```\n\nOutput:\n```\n$ examples/ex2_query.py examples/example.conf\nexample.com has SSL enabled\n```\n\n### Replace and delete\n`examples/ex3_replace_delete.py` disables SSLEngine directive:\n~~~python\n#!/usr/bin/env python3\nimport sys\nimport a2conf\nroot = a2conf.Node(sys.argv[1])\n\nfor vhost in root.children('<VirtualHost>'):\n    if vhost.first('sslengine'):\n        vhost.delete() # Delete SSL vhost\n    else:\n        # Modify DocumentRoot\n        vhost.first('DocumentRoot').args = '/var/www/example2'\n        vhost.first('DocumentRoot').suffix = '# New DocumentRoot!'\n        # Delete ServerAlias\n        vhost.first('ServerAlias').delete()\n\nroot.dump()\n~~~\n\nOutput:\n~~~shell\n$ examples/ex3_replace_delete.py examples/example.conf\n#\n# Example config file for a2conf\n#\n<VirtualHost *:80>\n    # Non-ssl site\n    DocumentRoot /var/www/example2 # New DocumentRoot!\n    ServerName example.com # .... OUR TEST SITE ....\n    DirectoryIndex index.html index.htm default.htm index.php\n    Options -Indexes +FollowSymLinks\n</VirtualHost>\n~~~\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/yaroslaff/a2conf", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "a2conf", "package_url": "https://pypi.org/project/a2conf/", "platform": "", "project_url": "https://pypi.org/project/a2conf/", "project_urls": {"Homepage": "https://gitlab.com/yaroslaff/a2conf"}, "release_url": "https://pypi.org/project/a2conf/0.2.9/", "requires_dist": ["requests"], "requires_python": ">=3", "summary": "apache2 configuration file parser and query tool", "version": "0.2.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>a2conf is CLI utilities and python module to read/write apache2 config files.</p>\n<h1>Installation</h1>\n<p>Usual simple way:</p>\n<pre><code>pip3 install a2conf\n</code></pre>\n<p>or get sources from git repo:</p>\n<pre><code>git clone https://gitlab.com/yaroslaff/a2conf.git\n</code></pre>\n<p>If using git sources (without installing), work from root dir of repo and do <code>export PYTONPATH=.</code></p>\n<h1>CLI utilities</h1>\n<h2>a2conf.py utility</h2>\n<h3>Examples</h3>\n<p>For all examples we will use file\n<a href=\"https://gitlab.com/yaroslaff/a2conf/raw/master/examples/example.conf\" rel=\"nofollow\">examples/example.conf</a>.\nYou can omit this parameter to use default <code>/etc/apache2/apache2.conf</code>.</p>\n<p>Use <code>export PYTHONPATH=.</code> to use module if it's not installed.</p>\n<p>Most useful examples:</p>\n<pre>$ bin/a2conf examples/example.conf --dump --vhost secure.example.com \n<span class=\"c1\"># examples/example.conf:15</span>\n&lt;VirtualHost *:443&gt; \n    <span class=\"c1\"># SSL site</span>\n    DocumentRoot /var/www/example \n    ServerName example.com <span class=\"c1\"># .... OUR TEST SITE ....</span>\n    ServerAlias www.example.com <span class=\"m\">1</span>.example.com <span class=\"m\">2</span>.example.com secure.example.com \n    DirectoryIndex index.html index.htm default.htm index.php \n    Options -Indexes +FollowSymLinks \n    SSLEngine On <span class=\"c1\"># SSL Enabled for this virtual host</span>\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem \n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem \n    SSLCertificateChainFile /etc/letsencrypt/live/example.com/chain.pem \n&lt;/VirtualHost&gt; \n\n<span class=\"c1\"># Only specific commands with --vhost filter</span>\n$ bin/a2conf examples/example.conf --vhost www.example.com:443 --cmd documentroot sslcertificatefile \nDocumentRoot /var/www/example\nSSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n\n<span class=\"c1\"># Same output achieved with other way of filtering (based on SSLEngine directive)</span>\n$ bin/a2conf examples/example.conf --filter sslengine on --cmd documentroot sslcertificatefile\nDocumentRoot /var/www/example\nSSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n\n<span class=\"c1\"># All hostnames configured in this config file</span>\n$ bin/a2conf examples/example.conf --cmd servername serveralias --uargs\nsecure.example.com example.com www.example.com <span class=\"m\">2</span>.example.com <span class=\"m\">1</span>.example.com\n\n<span class=\"c1\"># per-vhost summary with filtering</span>\n$ bin/a2conf examples/example.conf --cmd servername serveralias --vhfmt <span class=\"s1\">'Host: {servername} Root: {documentroot} Cert: {sslcertificatefile}'</span> --filter sslcertificatefile\nHost: example.com Root: /var/www/example Cert: /etc/letsencrypt/live/example.com/fullchain.pem\n</pre>\n<p>You can get list of all available tokens for <code>--vhfmt</code> option in verbose mode (<code>-v</code> option).</p>\n<h2>a2certbot.py</h2>\n<p>a2certbot.py utility used to quickly detect common <a href=\"https://letsencrypt.org/\" rel=\"nofollow\">LetsEncrypt</a> configuration errors such as:</p>\n<ul>\n<li>DocumentRoot mismatch between VirtualHost and LetsEncrypt renew config file (e.g. if someone moved site content)</li>\n<li>RewriteRule or Redirect apache directives preventing verification</li>\n<li>DNS record points to other host or not exists at all</li>\n<li>And <strong>ANY OTHER</strong> problem (such as using wrong certificate path in apache or whatever). a2certbot.py\nsimulates HTTP verification (If LetsEncrypt verification fails, a2certbot will fail too, and vice versa).</li>\n</ul>\n<p>a2certbot.py does not calls LetsEncrypt servers for verification, so if you will use a2certbot.py to verify your\nconfiguration, you will not hit <a href=\"https://letsencrypt.org/docs/rate-limits/\" rel=\"nofollow\">failed validation limit</a>\n(<em>5 failures per account, per hostname, per hour</em> at moment) and will not be blacklisted on LetsEncrypt site.</p>\n<p>Before requesting new certificates:</p>\n<pre><span class=\"c1\"># Verify configuration for website for which you want to request certificate for first time.</span>\nbin/a2certbot.py --prepare -w /var/www/virtual/static.okerr.com/ -d static.okerr.com\n<span class=\"o\">===</span> <span class=\"nv\">manual</span> <span class=\"o\">===</span>\nInfo:\n    <span class=\"o\">(</span>static.okerr.com<span class=\"o\">)</span> is <span class=\"nb\">local</span> <span class=\"m\">37</span>.59.102.26\n    <span class=\"o\">(</span>static.okerr.com<span class=\"o\">)</span> Vhost: /etc/apache2/sites-enabled/static.okerr.com.conf:1\n    <span class=\"o\">(</span>static.okerr.com<span class=\"o\">)</span> DocumentRoot: /var/www/virtual/static.okerr.com/\n    <span class=\"o\">(</span>static.okerr.com<span class=\"o\">)</span> DocumentRoot /var/www/virtual/static.okerr.com/ matches LetsEncrypt and Apache\n    <span class=\"o\">(</span>static.okerr.com<span class=\"o\">)</span> Simulated check match root: /var/www/virtual/static.okerr.com/\n---\n\n<span class=\"c1\"># You can verify all hostnames for site</span>\nbin/a2certbot.py --prepare -w /var/www/virtual/static.okerr.com/ -d static.okerr.com -d static2.okerr.com\n\n<span class=\"c1\"># ... and finally simple main all-in-one command, it guesses aliases and root (command below does same as command above):</span>\nbin/a2certbot.py --prepare -d static.okerr.com --aliases\n</pre>\n<p>If <code>certbot renew</code> fails:</p>\n<pre><span class=\"c1\"># Check (verify) ALL existing LetsEncrypt certificates (to check why 'certbot renew' may fail ):</span>\nroot@bravo:/home/xenon# a2certbot.py \n<span class=\"o\">===</span> /etc/letsencrypt/renewal/bravo.okerr.com.conf <span class=\"nv\">PROBLEM</span> <span class=\"o\">===</span>\nInfo:\n    <span class=\"o\">(</span>bravo.okerr.com<span class=\"o\">)</span> Vhost: /etc/apache2/sites-enabled/okerr.conf:17\n    LetsEncrypt conf file: /etc/letsencrypt/renewal/bravo.okerr.com.conf\n    bravo.okerr.com is <span class=\"nb\">local</span> <span class=\"m\">37</span>.59.102.26\nProblems:\n    No DocumentRoot in vhost at /etc/apache2/sites-enabled/okerr.conf:17\n---\n\n<span class=\"c1\"># Verify only one certificate </span>\nroot@bravo:/home/xenon# a2certbot.py --host bravo.okerr.com\n<span class=\"o\">===</span> /etc/letsencrypt/renewal/bravo.okerr.com.conf <span class=\"nv\">PROBLEM</span> <span class=\"o\">===</span>\nInfo:\n    <span class=\"o\">(</span>bravo.okerr.com<span class=\"o\">)</span> Vhost: /etc/apache2/sites-enabled/okerr.conf:17\n    LetsEncrypt conf file: /etc/letsencrypt/renewal/bravo.okerr.com.conf\n    bravo.okerr.com is <span class=\"nb\">local</span> <span class=\"m\">37</span>.59.102.26\nProblems:\n    No DocumentRoot in vhost at /etc/apache2/sites-enabled/okerr.conf:17\n---\n</pre>\n<p>a2certbot.py can generate letsencrypt certificates in simple way (automatically detecting all aliases and\nDocumentRoot, but you can use -d instead of --aliases):</p>\n<pre><code>root@bravo:/home/xenon# a2certbot.py --create -d static.okerr.com --aliases\nCreate cert for static.okerr.com\nRUNNING: certbot certonly --webroot -w /var/www/virtual/static.okerr.com/ -d static.okerr.com -d static2.okerr.com\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator webroot, Installer None\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for static2.okerr.com\nUsing the webroot path /var/www/virtual/static.okerr.com for all unmatched domains.\nWaiting for verification...\nCleaning up challenges\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n...\n</code></pre>\n<h3>a2certbot.py warnings (false positives)</h3>\n<p>a2certbot.py expects that requests to .well-known directory of HTTP (port 80) virtualhost must not be redirected.\nIf you have redirection like this: <code>Redirect 301 / https://example.com/</code> it will report problem:</p>\n<pre><code>Problems:\n    Requests will be redirected: Redirect 301 / https://www.example.com/\n</code></pre>\n<p>Actually, this could be OK (false positive) and real verification from <code>certbot renew</code> may pass (if https\nsite has same  DocumentRoot). To see if this is real problem or not see result for 'Simulated check'.\nIf simulated check matches - website will pass certbot verification.</p>\n<p>To avoid such false positive, do not use such 'blind' redirection, better use this:</p>\n<pre><code>      RewriteCond %{REQUEST_URI} !^/\\.well\\-known        \n      RewriteRule (.*) https://%{SERVER_NAME}$1 [R=301,L]\n</code></pre>\n<p>This code in <code>&lt;VirtuaHost *:80&gt;</code> context will redirect all requests to HTTPS site EXCEPT LetsEncrypt verification\nrequests.</p>\n<h2>a2okerr.py</h2>\n<p>a2okerr.py is useful only if you are using <a href=\"https://okerr.com/\" rel=\"nofollow\">okerr</a>: free and open source hybrid (host/network) monitoring system.</p>\n<p><a href=\"https://okerr.com/\" rel=\"nofollow\">Okerr</a> is like <a href=\"https://www.nagios.org/\" rel=\"nofollow\">nagios</a> or <a href=\"https://www.zabbix.com/\" rel=\"nofollow\">zabbix</a>, but can perform network checks\nfrom remote locations, has tiny and optional local client  which can run from cron, has powerful logical\nindicators (notify me only if more then 2 servers are dead, notify me if any problem is not fixed for more then 30 minutes, ...),\npublic status pages (like <a href=\"https://status.io/\" rel=\"nofollow\">https://status.io/</a> but free), fault-tolerant sites\n(okerr will redirect dynamic DNS record to backup server if main server is dead, and point it back to main server\nwhen it's OK), supports <a href=\"https://telegram.org/\" rel=\"nofollow\">Telegram</a> and has many other nice features.</p>\n<p>You can use it as free service (like wordpress or gmail) or you can install okerr server on your own linux machine\nfrom  <a href=\"https://gitlab.com/yaroslaff/okerr-dev/\" rel=\"nofollow\">okerr git repository</a>.</p>\n<p>You will need to install small <a href=\"https://gitlab.com/yaroslaff/okerrupdate\" rel=\"nofollow\">okerrupdate</a> package to use a2okerr.py: <code>pip3 install okerrupdate</code>.</p>\n<p>a2okerr.py discovers all https sites from apache config and creates SSL-indicator in your okerr project\nfor each website. You will get alert message to email and/or telegram if any of your https sites has any problem\n(certificate is not updated in time for any reason and will expire soon or already expired.\nWebsite unavailable for any reason). If you have linux server or website - you need okerr.</p>\n<pre><span class=\"c1\"># Create indicator for all local https websites. If indicator already exists, HTTP error 400 will be received - this is OK.</span>\na2okerr.py\n\n<span class=\"c1\"># alter prefix, policy and description</span>\na2okerr.py --prefix my:prefix: --policy Hourly --desc <span class=\"s2\">\"I love okerr and a2okerr\"</span>\n\n<span class=\"c1\"># do not really create indicators, just dry run</span>\na2oker.py --dry\n</pre>\n<h1>Node class</h1>\n<h2>Properties and methods</h2>\n<p><code>raw</code> - text line as-is, with all spaces, tabs and with comments</p>\n<p><code>cmd</code> - cmd ('ServerName') without args or None (if section)</p>\n<p><code>section</code> - section (e.g. 'VirtualHost')</p>\n<p><code>args</code> - one text line args to cmd or section. for vhost args could be '*:80', for ServerAlias: 'example.com example.org'</p>\n<p><code>name</code> - name of node. cmd if node has cmd, or section name (in brackets) if this is section. e.g. 'ServerName' or\n'&lt;VirtualHost&gt;'</p>\n<p><code>content</code> - list of child nodes (possible empty). For container sections (VirtualHost) attribute <code>content</code> is list\nof children. For usual commands (e.g. ServerName) - empty list.</p>\n<h3>Methods</h3>\n<p><code>__init__(self, read=filename, raw=None, parent=None, name=None, path=None, line=None, includes=True)</code> - In most cases you should not need to use\nany parameters here except <code>includes</code> and <code>read</code>. <code>read</code> is apache config filename to read. Use <code>includes=False</code> if you want <code>read_file</code> method to ignore <code>Include*</code> directives.</p>\n<p><code>children(name=None, recursive=None)</code> - Main query method, returns generator for all children  nodes (e.g. for VirtualHost node). Generator is empty if no\nchildren. If name specified, generator will return only nodes with this name (e.g. 'servername' or '&lt;VirtualHost&gt;'). If recursive is On,\ngenerator will return nested nodes too (e.g. what is inside <code>&lt;IfModule&gt;</code> or <code>&lt;Directory&gt;</code> settings). To get just one first element use\n<code>next(node.children('ServerName'))</code>. It will raise <code>StopIteration</code> if node has no such children elements.</p>\n<p><code>first(name, recursive=None)</code> - wrapper for <code>children()</code>. Returns only first element or <code>None</code>. Not raising exceptions.</p>\n<p><code>read_file(filename)</code> - Reads apache config. Called automatically from <code>__init__</code> if you specified <code>read</code> argument.</p>\n<p><code>dump(fh=sys.stdout, depth=0)</code> - dump loaded config in unified format (indented). if fh not specified, just dumps to stdout()</p>\n<p><code>write_file(filename)</code> - opens file for writing and dump() to this file.</p>\n<h2>Examples</h2>\n<h3>Just dump apache config</h3>\n<p><code>examples/ex1_dump.py</code> just loads config and dumps its structure (without comments) as JSON:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">a2conf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">a2conf</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">section_dump</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">ch</span> <span class=\"ow\">in</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">():</span>\n        <span class=\"k\">if</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">section</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">section</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">:</span>\n                <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">section</span> <span class=\"o\">+</span> <span class=\"s1\">' '</span> <span class=\"o\">+</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">args</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">section</span>\n            <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">section_dump</span><span class=\"p\">(</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ch</span><span class=\"o\">.</span><span class=\"n\">args</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">section_dump</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre><code>$ examples/ex1_dump.py examples/example.conf\n{\n    \"VirtualHost *:80\": {\n        \"DocumentRoot\": \"/var/www/example\",\n        \"ServerName\": \"example.com\",\n        \"ServerAlias\": \"www.example.com example.com 1.example.com 2.example.com\",\n        \"DirectoryIndex\": \"index.html index.htm default.htm index.php\",\n        \"Options\": \"-Indexes +FollowSymLinks\"\n    },\n    \"VirtualHost *:443\": {\n        \"DocumentRoot\": \"/var/www/example\",\n        \"ServerName\": \"example.com\",\n        \"ServerAlias\": \"www.example.com 1.example.com 2.example.com secure.example.com\",\n        \"DirectoryIndex\": \"index.html index.htm default.htm index.php\",\n        \"Options\": \"-Indexes +FollowSymLinks\",\n        \"SSLEngine\": \"On\",\n        \"SSLCertificateFile\": \"/etc/letsencrypt/live/example.com/fullchain.pem\",\n        \"SSLCertificateKeyFile\": \"/etc/letsencrypt/live/example.com/privkey.pem\",\n        \"SSLCertificateChainFile\": \"/etc/letsencrypt/live/example.com/chain.pem\"\n    }\n}\n</code></pre>\n<p>Note - this is short example just for demo, it's not very good for production: if virtualhost has more then one directive\n(e.g. <code>ServerAlias</code>, <code>RewriteRule</code>, <code>RewriteCond</code>), only last one will be used.</p>\n<h3>Query</h3>\n<p><code>examples/ex2_query.py</code> print all SSL sites from config:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">a2conf</span>\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">a2conf</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">vhost</span> <span class=\"ow\">in</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">(</span><span class=\"s1\">'&lt;VirtualHost&gt;'</span><span class=\"p\">):</span>\n    <span class=\"n\">servername</span> <span class=\"o\">=</span> <span class=\"n\">vhost</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"s1\">'servername'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"c1\"># One query method, via first(). Not much fail-safe but short.</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">ssl_option</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">vhost</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">(</span><span class=\"s1\">'sslengine'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"c1\"># Other query method, via children()</span>\n        <span class=\"k\">if</span> <span class=\"n\">ssl_option</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">'on'</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\"> has SSL enabled\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">servername</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span><span class=\"p\">:</span>\n        <span class=\"c1\"># No SSL Engine directive in this vhost</span>\n        <span class=\"k\">continue</span>\n</pre>\n<p>Output:</p>\n<pre><code>$ examples/ex2_query.py examples/example.conf\nexample.com has SSL enabled\n</code></pre>\n<h3>Replace and delete</h3>\n<p><code>examples/ex3_replace_delete.py</code> disables SSLEngine directive:</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">a2conf</span>\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">a2conf</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">vhost</span> <span class=\"ow\">in</span> <span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">(</span><span class=\"s1\">'&lt;VirtualHost&gt;'</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">vhost</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"s1\">'sslengine'</span><span class=\"p\">):</span>\n        <span class=\"n\">vhost</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span> <span class=\"c1\"># Delete SSL vhost</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Modify DocumentRoot</span>\n        <span class=\"n\">vhost</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"s1\">'DocumentRoot'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"s1\">'/var/www/example2'</span>\n        <span class=\"n\">vhost</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"s1\">'DocumentRoot'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"s1\">'# New DocumentRoot!'</span>\n        <span class=\"c1\"># Delete ServerAlias</span>\n        <span class=\"n\">vhost</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">(</span><span class=\"s1\">'ServerAlias'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n<span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span>\n</pre>\n<p>Output:</p>\n<pre>$ examples/ex3_replace_delete.py examples/example.conf\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Example config file for a2conf</span>\n<span class=\"c1\">#</span>\n&lt;VirtualHost *:80&gt;\n    <span class=\"c1\"># Non-ssl site</span>\n    DocumentRoot /var/www/example2 <span class=\"c1\"># New DocumentRoot!</span>\n    ServerName example.com <span class=\"c1\"># .... OUR TEST SITE ....</span>\n    DirectoryIndex index.html index.htm default.htm index.php\n    Options -Indexes +FollowSymLinks\n&lt;/VirtualHost&gt;\n</pre>\n\n          </div>"}, "last_serial": 7130436, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "78d0616f7f5ad2128fb9026b0c6de83d", "sha256": "75cdb01ba8bbeea08b9599d1ece120128395e597fbb6cc0931f800467f086b24"}, "downloads": -1, "filename": "a2conf-0.1.1.tar.gz", "has_sig": false, "md5_digest": "78d0616f7f5ad2128fb9026b0c6de83d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5528, "upload_time": "2019-11-28T19:10:03", "upload_time_iso_8601": "2019-11-28T19:10:03.908196Z", "url": "https://files.pythonhosted.org/packages/56/31/88ada0d62efd234c1d8d05ffdf4b54f8e599308f6fa53d9ad057158962df/a2conf-0.1.1.tar.gz", "yanked": false}], "0.1.12": [{"comment_text": "", "digests": {"md5": "4049744d4b5eb2c43752902bd1993182", "sha256": "eaa1d3315c17ce43adf73421f680c9877ea23104c0636f0a7aff3f1e9d823bc0"}, "downloads": -1, "filename": "a2conf-0.1.12.tar.gz", "has_sig": false, "md5_digest": "4049744d4b5eb2c43752902bd1993182", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10731, "upload_time": "2019-12-01T20:42:29", "upload_time_iso_8601": "2019-12-01T20:42:29.419427Z", "url": "https://files.pythonhosted.org/packages/6a/57/4c3e044457f7e73eff427f1a1b45f6d0722d47a4ad75a2d9d5219acc53ec/a2conf-0.1.12.tar.gz", "yanked": false}], "0.1.13": [{"comment_text": "", "digests": {"md5": "a09bfc7ca68c8ebff9f2a09093df0f6e", "sha256": "5c6f42095af7de64b25d499f4b428fc5258a8e10c10d2dc7bc9e1befdfd79b68"}, "downloads": -1, "filename": "a2conf-0.1.13.tar.gz", "has_sig": false, "md5_digest": "a09bfc7ca68c8ebff9f2a09093df0f6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13036, "upload_time": "2019-12-01T21:08:10", "upload_time_iso_8601": "2019-12-01T21:08:10.493431Z", "url": "https://files.pythonhosted.org/packages/dc/c6/2680422ff026fecf5118758e547fb409bad040300df8632ddf0273709edc/a2conf-0.1.13.tar.gz", "yanked": false}], "0.1.14": [{"comment_text": "", "digests": {"md5": "e62e68c924b6d8ca63ca43f5ecedf01c", "sha256": "0b70a284c0dc76dbd24c72024ae8cdb63056da5537080bbdad7362327c0d4648"}, "downloads": -1, "filename": "a2conf-0.1.14.tar.gz", "has_sig": false, "md5_digest": "e62e68c924b6d8ca63ca43f5ecedf01c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13600, "upload_time": "2019-12-11T14:51:23", "upload_time_iso_8601": "2019-12-11T14:51:23.922862Z", "url": "https://files.pythonhosted.org/packages/20/46/4902699353e5e8a1dc99d28470c6f8d05d6860437c50e303cb80fae328b6/a2conf-0.1.14.tar.gz", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "ade1da6a59029fb53673d9973316d986", "sha256": "58ae6aa19cbfeebb54785e69fea52f9ffd6d44f1cb5f1c2ef7045dc46b165b5e"}, "downloads": -1, "filename": "a2conf-0.1.15.tar.gz", "has_sig": false, "md5_digest": "ade1da6a59029fb53673d9973316d986", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13638, "upload_time": "2019-12-20T22:27:24", "upload_time_iso_8601": "2019-12-20T22:27:24.770815Z", "url": "https://files.pythonhosted.org/packages/ad/fd/d220f0e3132212e33b7fa0974930068d47c2ab2602caa6f29adc9b38f201/a2conf-0.1.15.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "558e5442a2d2af3ae1d7b0e0f4b744ee", "sha256": "fb5b6b4d77e705ab799b9cfa38baa0a0153cc06a83dd0021926d9f0f5d03ecc5"}, "downloads": -1, "filename": "a2conf-0.1.4.tar.gz", "has_sig": false, "md5_digest": "558e5442a2d2af3ae1d7b0e0f4b744ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8767, "upload_time": "2019-11-30T08:21:19", "upload_time_iso_8601": "2019-11-30T08:21:19.738496Z", "url": "https://files.pythonhosted.org/packages/7e/22/a7b36fe1be3b6424edd6dab49251fea7d36ec6fc6097f35e3c9d09bababc/a2conf-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "a59a3c1d4ddd9c4ac318a0f19dffce77", "sha256": "465a9942e9bee5fe255237b2e7775af842eeb4eb5878971c8c014b72d4ed7a58"}, "downloads": -1, "filename": "a2conf-0.1.5.tar.gz", "has_sig": false, "md5_digest": "a59a3c1d4ddd9c4ac318a0f19dffce77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8805, "upload_time": "2019-12-01T11:17:31", "upload_time_iso_8601": "2019-12-01T11:17:31.110229Z", "url": "https://files.pythonhosted.org/packages/17/b9/4163535b631706f6f48a104fd12bdff3419fc3caffc371d45c855514f44e/a2conf-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "d316e3d50938a6938810c68caaf7aa6e", "sha256": "447a51c3bf48972c2978f017da47a91a5ad38db4f61e0a09277d84f07859b52c"}, "downloads": -1, "filename": "a2conf-0.1.6.tar.gz", "has_sig": false, "md5_digest": "d316e3d50938a6938810c68caaf7aa6e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8931, "upload_time": "2019-12-01T12:01:43", "upload_time_iso_8601": "2019-12-01T12:01:43.499297Z", "url": "https://files.pythonhosted.org/packages/67/82/c580a72f670bd7fc1251da5142760593b1e5cf79a98c0a3908d016c900d3/a2conf-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "484e113bd0be57880d6f6291c4a0a94d", "sha256": "b2b61f461753986e8d09bc49f74b49fc23ef2fc69503cbda799946c2ed755854"}, "downloads": -1, "filename": "a2conf-0.1.7.tar.gz", "has_sig": false, "md5_digest": "484e113bd0be57880d6f6291c4a0a94d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 9010, "upload_time": "2019-12-01T12:19:41", "upload_time_iso_8601": "2019-12-01T12:19:41.183398Z", "url": "https://files.pythonhosted.org/packages/a1/43/46d5a0ca524440de3c7ccc62756bed880169e1ab3e2c221fe9a9f36a6bfe/a2conf-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "fc4b16ff50274bf363cd3c36db6134a7", "sha256": "47d25b7cf220904e93199cc1acddf7d0e63dba57bdd1f8b712da37ce7b3261e9"}, "downloads": -1, "filename": "a2conf-0.1.8.tar.gz", "has_sig": false, "md5_digest": "fc4b16ff50274bf363cd3c36db6134a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 9262, "upload_time": "2019-12-01T14:40:30", "upload_time_iso_8601": "2019-12-01T14:40:30.213818Z", "url": "https://files.pythonhosted.org/packages/9b/e9/d476ec8c63ac8cbe11f0d8285fac5147b702211ff651c76eb82536e89d09/a2conf-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "2b68ec6b052294f287f4c39e2b24f213", "sha256": "16f295d370df5e5d3ed385bf253fa70b4eed20824fab7da4ccdc12e380efaea7"}, "downloads": -1, "filename": "a2conf-0.1.9.tar.gz", "has_sig": false, "md5_digest": "2b68ec6b052294f287f4c39e2b24f213", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 9342, "upload_time": "2019-12-01T16:14:34", "upload_time_iso_8601": "2019-12-01T16:14:34.717529Z", "url": "https://files.pythonhosted.org/packages/1e/46/cc1ddae9d5b937e722e2aa97d444fc0a2541d17539229ed073e4636d168a/a2conf-0.1.9.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "0e2f4e15311551ceff5383e4948fc465", "sha256": "961323cd956dc7eb7e3c0df07a6668d039ffe472244d9e381417588f59b1ded4"}, "downloads": -1, "filename": "a2conf-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0e2f4e15311551ceff5383e4948fc465", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12392, "upload_time": "2020-02-07T18:04:45", "upload_time_iso_8601": "2020-02-07T18:04:45.584729Z", "url": "https://files.pythonhosted.org/packages/e6/ec/2ff35917deb616b37324d831872f410510c2b665945a96dcc9f0647aff3c/a2conf-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "b847834281b9f6ff0545876d2c24490d", "sha256": "48b289a4a7e3a290b888da70c224bdddde4e6daf163e4b2f26cd0fca7c9128e0"}, "downloads": -1, "filename": "a2conf-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b847834281b9f6ff0545876d2c24490d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12704, "upload_time": "2020-03-12T00:20:36", "upload_time_iso_8601": "2020-03-12T00:20:36.816050Z", "url": "https://files.pythonhosted.org/packages/a0/08/8a154a9b140c975d3682af0f5452191ef87619b719e1302efbcfe5421f54/a2conf-0.2.4-py3-none-any.whl", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "c6c26d2043cb0eca1d629e9903f9ada9", "sha256": "499b750b25e6d94fad87a8478c33e0b6957c49b732d473c09eee224d95a09dbc"}, "downloads": -1, "filename": "a2conf-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c6c26d2043cb0eca1d629e9903f9ada9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 12832, "upload_time": "2020-03-13T20:37:29", "upload_time_iso_8601": "2020-03-13T20:37:29.546074Z", "url": "https://files.pythonhosted.org/packages/98/56/d17fe3872df833defd67412d642633eebdaf4efdb855c218c471d0b76b0c/a2conf-0.2.6-py3-none-any.whl", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "9bd2273e3cbe6487deeed54d2856d2dd", "sha256": "aa61c1678b28f5f6db9257cc7e733a5b10d0f5d5ee38ff4c1572eec9da8c2fe8"}, "downloads": -1, "filename": "a2conf-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "9bd2273e3cbe6487deeed54d2856d2dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 17173, "upload_time": "2020-04-01T15:42:48", "upload_time_iso_8601": "2020-04-01T15:42:48.714418Z", "url": "https://files.pythonhosted.org/packages/b4/34/cd2a4733baabc62354dbeac50c7ab416386181e354c795962046a5521dc0/a2conf-0.2.7-py3-none-any.whl", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "0ebce656c10d2ab4409b704e1e1ec764", "sha256": "a96a9d207f195c079ca2c36b19e2fd0c4ef122d793eeafa551b9b0a187c7ff17"}, "downloads": -1, "filename": "a2conf-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "0ebce656c10d2ab4409b704e1e1ec764", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 20786, "upload_time": "2020-04-11T21:33:26", "upload_time_iso_8601": "2020-04-11T21:33:26.257979Z", "url": "https://files.pythonhosted.org/packages/0a/cb/f3289520015b1ed243c4ba1f8ae90785cb09323bfb88331e313f673cb692/a2conf-0.2.8-py3-none-any.whl", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "6a6c25f96f2fca4f5fa9eea26525f509", "sha256": "432cf28ef1cc94104519cc01adfb624916360998c5542baa2b1722bd8756e736"}, "downloads": -1, "filename": "a2conf-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "6a6c25f96f2fca4f5fa9eea26525f509", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21632, "upload_time": "2020-04-29T16:53:00", "upload_time_iso_8601": "2020-04-29T16:53:00.474167Z", "url": "https://files.pythonhosted.org/packages/77/56/c3f72669c7798c92b307a4de9e722f0453496b6f5ab36e5d422104624931/a2conf-0.2.9-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a6c25f96f2fca4f5fa9eea26525f509", "sha256": "432cf28ef1cc94104519cc01adfb624916360998c5542baa2b1722bd8756e736"}, "downloads": -1, "filename": "a2conf-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "6a6c25f96f2fca4f5fa9eea26525f509", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 21632, "upload_time": "2020-04-29T16:53:00", "upload_time_iso_8601": "2020-04-29T16:53:00.474167Z", "url": "https://files.pythonhosted.org/packages/77/56/c3f72669c7798c92b307a4de9e722f0453496b6f5ab36e5d422104624931/a2conf-0.2.9-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 15:55:33 2020"}