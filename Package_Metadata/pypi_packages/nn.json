{"info": {"author": "Ravindra Marella", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "A neural network library built on top of TensorFlow for quickly building deep learning models.\n\n[![Build Status](https://travis-ci.org/marella/nn.svg?branch=master)](https://travis-ci.org/marella/nn)\n\n## Usage\n\n`nn.Tensor` is the core data structure which is a wrapper for `tf.Tensor` and provides additional functionality. It can be created using the `nn.tensor()` function:\n\n```py\nimport nn\n\na = nn.tensor([1, 2, 3])\nassert isinstance(a, nn.Tensor)\nassert a.shape == (3, )\n```\n\nIt supports method chaining:\n\n```py\nc = a.square().sum()\nassert c.numpy() == 14\n```\n\nand can be used with `tf.Tensor` objects:\n\n```py\nimport tensorflow as tf\n\nb = tf.constant(2)\nc = (a - b).square().sum()\nassert c.numpy() == 2\n```\n\nIt can also be used with high level APIs such as `tf.keras`:\n\n```py\nmodel = nn.Sequential([\n  nn.Dense(128, activation='relu'),\n  nn.Dropout(0.2),\n  nn.Dense(10)\n])\n\ny = model(x)\nassert isinstance(y, nn.Tensor)\n```\n\nand to perform automatic differentiation and optimization:\n\n```py\noptimizer = nn.Adam()\nwith nn.GradientTape() as tape:\n    outputs = model(inputs)\n    loss = (targets - outputs).square().mean()\ngrads = tape.gradient(loss, model.trainable_variables)\noptimizer.apply_gradients(zip(grads, model.trainable_variables))\n```\n\nTo use it with ops that expect `tf.Tensor` objects as inputs, wrap the ops using `nn.op()`:\n\n```py\nmean = nn.op(tf.reduce_mean)\nc = mean(a)\nassert isinstance(c, nn.Tensor)\n\nmaximum = nn.op(tf.maximum, binary=True)\nc = maximum(a, b)\nassert isinstance(c, nn.Tensor)\n```\n\nor convert it to a `tf.Tensor` object using the `tf()` method or `nn.tf()` function:\n\n```py\nb = a.tf()\nassert isinstance(b, tf.Tensor)\n\nb = nn.tf(a)\nassert isinstance(b, tf.Tensor)\n```\n\nSee more examples [here][examples].\n\n## Installation\n\nRequirements:\n\n-   TensorFlow >= 2.0\n-   Python >= 3.6\n\nInstall from PyPI (recommended):\n\n```sh\npip install nn\n```\n\nAlternatively, install from source:\n\n```sh\ngit clone https://github.com/marella/nn.git\ncd nn\npip install -e .\n```\n\n[TensorFlow] should be installed separately.\n\n## Testing\n\nTo run tests, install dependencies:\n\n```sh\npip install -e .[tests]\n```\n\nand run:\n\n```sh\npytest tests\n```\n\n[tensorflow]: https://www.tensorflow.org/install\n[examples]: https://github.com/marella/train/tree/master/examples", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marella/nn", "keywords": "nn tensorflow neural-network deep-learning machine-learning", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "nn", "package_url": "https://pypi.org/project/nn/", "platform": "", "project_url": "https://pypi.org/project/nn/", "project_urls": {"Homepage": "https://github.com/marella/nn"}, "release_url": "https://pypi.org/project/nn/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A neural network library built on top of TensorFlow for quickly building deep learning models.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A neural network library built on top of TensorFlow for quickly building deep learning models.</p>\n<p><a href=\"https://travis-ci.org/marella/nn\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3388aa8401176cdef81f793177e0f7073644a95/68747470733a2f2f7472617669732d63692e6f72672f6d6172656c6c612f6e6e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Usage</h2>\n<p><code>nn.Tensor</code> is the core data structure which is a wrapper for <code>tf.Tensor</code> and provides additional functionality. It can be created using the <code>nn.tensor()</code> function:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">nn</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n</pre>\n<p>It supports method chaining:</p>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">14</span>\n</pre>\n<p>and can be used with <code>tf.Tensor</code> objects:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tensorflow</span> <span class=\"k\">as</span> <span class=\"nn\">tf</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">constant</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">numpy</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n</pre>\n<p>It can also be used with high level APIs such as <code>tf.keras</code>:</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Sequential</span><span class=\"p\">([</span>\n  <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">activation</span><span class=\"o\">=</span><span class=\"s1\">'relu'</span><span class=\"p\">),</span>\n  <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Dropout</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">),</span>\n  <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Dense</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">)</span>\n</pre>\n<p>and to perform automatic differentiation and optimization:</p>\n<pre><span class=\"n\">optimizer</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Adam</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">GradientTape</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tape</span><span class=\"p\">:</span>\n    <span class=\"n\">outputs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">)</span>\n    <span class=\"n\">loss</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">targets</span> <span class=\"o\">-</span> <span class=\"n\">outputs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">square</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"n\">grads</span> <span class=\"o\">=</span> <span class=\"n\">tape</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">trainable_variables</span><span class=\"p\">)</span>\n<span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">apply_gradients</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">grads</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">trainable_variables</span><span class=\"p\">))</span>\n</pre>\n<p>To use it with ops that expect <code>tf.Tensor</code> objects as inputs, wrap the ops using <code>nn.op()</code>:</p>\n<pre><span class=\"n\">mean</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">reduce_mean</span><span class=\"p\">)</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">)</span>\n\n<span class=\"n\">maximum</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">maximum</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">maximum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">)</span>\n</pre>\n<p>or convert it to a <code>tf.Tensor</code> object using the <code>tf()</code> method or <code>nn.tf()</code> function:</p>\n<pre><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">tf</span><span class=\"p\">()</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">)</span>\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">tf</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">tf</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">)</span>\n</pre>\n<p>See more examples <a href=\"https://github.com/marella/train/tree/master/examples\" rel=\"nofollow\">here</a>.</p>\n<h2>Installation</h2>\n<p>Requirements:</p>\n<ul>\n<li>TensorFlow &gt;= 2.0</li>\n<li>Python &gt;= 3.6</li>\n</ul>\n<p>Install from PyPI (recommended):</p>\n<pre>pip install nn\n</pre>\n<p>Alternatively, install from source:</p>\n<pre>git clone https://github.com/marella/nn.git\n<span class=\"nb\">cd</span> nn\npip install -e .\n</pre>\n<p><a href=\"https://www.tensorflow.org/install\" rel=\"nofollow\">TensorFlow</a> should be installed separately.</p>\n<h2>Testing</h2>\n<p>To run tests, install dependencies:</p>\n<pre>pip install -e .<span class=\"o\">[</span>tests<span class=\"o\">]</span>\n</pre>\n<p>and run:</p>\n<pre>pytest tests\n</pre>\n\n          </div>"}, "last_serial": 6526024, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "44390bae8910fda3a363c379031740cb", "sha256": "22c82a90451f0989fb8965b12847439f9603c9419cb6ce6900a0b2bdf55f6a2d"}, "downloads": -1, "filename": "nn-0.0.0.tar.gz", "has_sig": false, "md5_digest": "44390bae8910fda3a363c379031740cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 818, "upload_time": "2018-01-09T22:52:31", "upload_time_iso_8601": "2018-01-09T22:52:31.434910Z", "url": "https://files.pythonhosted.org/packages/c0/c3/109d6484593190119474a4041da827e8f258ff6b1c809c3e5bc9a2f5f617/nn-0.0.0.tar.gz", "yanked": false}], "0.0.1": [{"comment_text": "", "digests": {"md5": "63563c9bf0c89931528f2ab245ee4df9", "sha256": "f811f8a9ef50b2e91b80ab2c25c4edeee4544630c01fc885772c1f5114b406d5"}, "downloads": -1, "filename": "nn-0.0.1.tar.gz", "has_sig": false, "md5_digest": "63563c9bf0c89931528f2ab245ee4df9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5572, "upload_time": "2018-04-01T22:11:42", "upload_time_iso_8601": "2018-04-01T22:11:42.787284Z", "url": "https://files.pythonhosted.org/packages/1b/cd/f7b6fda1097528b00d87b7649e9dff45854525fa2e5e0c3d1b18af4c9bbf/nn-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "44529b809a92d2245fdb8b9d03f52efe", "sha256": "eff6d57ff1c8739eeba1da8a34f251b805f01423db70d70e8a8816bb33f95b78"}, "downloads": -1, "filename": "nn-0.0.2.tar.gz", "has_sig": false, "md5_digest": "44529b809a92d2245fdb8b9d03f52efe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6092, "upload_time": "2018-04-04T16:39:07", "upload_time_iso_8601": "2018-04-04T16:39:07.830094Z", "url": "https://files.pythonhosted.org/packages/1c/a0/3a86eeed9e1ab97619f1a287312c5260165044265ed822e98d0e70188c2e/nn-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "409bef6e2f2e6cefef6537337d7e84fd", "sha256": "59ab2643c3ab6c783ae27260cc2f22ffa54c81537f3a8ce68d3aaa29abb6c1e6"}, "downloads": -1, "filename": "nn-0.0.3.tar.gz", "has_sig": false, "md5_digest": "409bef6e2f2e6cefef6537337d7e84fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3407, "upload_time": "2018-05-10T15:29:56", "upload_time_iso_8601": "2018-05-10T15:29:56.779353Z", "url": "https://files.pythonhosted.org/packages/1d/43/66b683f66df1147edbba049ec987ca0653aa0b7850c29ff0030c71ec45bd/nn-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "d56682681b5170691e2f7b7e6bf79379", "sha256": "f5d4323349c332535677317586821beff6f1fa89ecbd92198735e480462af766"}, "downloads": -1, "filename": "nn-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d56682681b5170691e2f7b7e6bf79379", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3003, "upload_time": "2018-05-13T09:54:36", "upload_time_iso_8601": "2018-05-13T09:54:36.105004Z", "url": "https://files.pythonhosted.org/packages/8a/85/e4799e7384316bd700e2148ed79c931eaada7b25ffd2b2aff21a297275f8/nn-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "bbfb0cc3d65a9e7693a6a20f1dfc25f8", "sha256": "2d527b020a92cd5f98ceb13e0883df5a66be56b63c268af1eab6ab789071c45a"}, "downloads": -1, "filename": "nn-0.0.5.tar.gz", "has_sig": false, "md5_digest": "bbfb0cc3d65a9e7693a6a20f1dfc25f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5896, "upload_time": "2018-05-13T19:44:37", "upload_time_iso_8601": "2018-05-13T19:44:37.750620Z", "url": "https://files.pythonhosted.org/packages/48/3c/69a5af7df847f13bb603ee53e409cf2752ef09bbf4ce2bc375e84734b447/nn-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "fa2ce7c031f97c7894ca10173615415c", "sha256": "b3225dff5a4cf6bba38a87b636cf496c1ebd95f1539a8b72bc5d2bbe760bf143"}, "downloads": -1, "filename": "nn-0.0.6.tar.gz", "has_sig": false, "md5_digest": "fa2ce7c031f97c7894ca10173615415c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5888, "upload_time": "2018-05-14T17:51:58", "upload_time_iso_8601": "2018-05-14T17:51:58.699574Z", "url": "https://files.pythonhosted.org/packages/87/6e/6d701591c89fc58c372be1863a9410007338be835b52fb3e71598bdc7f10/nn-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "f0f35a40d77ce32a23327d6c37210b4f", "sha256": "5bc81d229e7532bb39d6ecf160c46645fce379bff79e320225d8cefc9c367570"}, "downloads": -1, "filename": "nn-0.0.7.tar.gz", "has_sig": false, "md5_digest": "f0f35a40d77ce32a23327d6c37210b4f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5947, "upload_time": "2018-05-15T13:49:24", "upload_time_iso_8601": "2018-05-15T13:49:24.058858Z", "url": "https://files.pythonhosted.org/packages/cd/09/0ef3006ad53a419877d081c42e335df2ab4e7fca410d4da143b981cc7881/nn-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "36ecd6d54c0e357d135a1401888c7f9a", "sha256": "56e2a3d6921d388ff14c3de2e4afa417c579e5739adde6812ae23e3fa2a9a6d5"}, "downloads": -1, "filename": "nn-0.0.8.tar.gz", "has_sig": false, "md5_digest": "36ecd6d54c0e357d135a1401888c7f9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7496, "upload_time": "2018-05-15T15:04:50", "upload_time_iso_8601": "2018-05-15T15:04:50.123195Z", "url": "https://files.pythonhosted.org/packages/94/65/139c753fd0a17c5e0be137ca879dbc7d6643ec08027bcee310af562d0766/nn-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "c36d86a568cd406dae2551470c7da860", "sha256": "7015e4171074bc97649708738429fcde9e1ba63855478a96993d01c58745a820"}, "downloads": -1, "filename": "nn-0.0.9.tar.gz", "has_sig": false, "md5_digest": "c36d86a568cd406dae2551470c7da860", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7512, "upload_time": "2018-05-17T16:29:12", "upload_time_iso_8601": "2018-05-17T16:29:12.997415Z", "url": "https://files.pythonhosted.org/packages/32/5b/4ff7a1bdc8e30e260c4dd44343275c50497b9db9fd96100fef1b7ca8a2b6/nn-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "90a34a720263d963fd04a18a416685bf", "sha256": "02ef51675c910bd19d63d9700ee8e8c6a56787f8b786f98f1ef5b6163ac360ee"}, "downloads": -1, "filename": "nn-0.1.0.tar.gz", "has_sig": false, "md5_digest": "90a34a720263d963fd04a18a416685bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4780, "upload_time": "2020-01-24T15:44:18", "upload_time_iso_8601": "2020-01-24T15:44:18.639550Z", "url": "https://files.pythonhosted.org/packages/00/f7/a1b7c670ecdb03296edb9f539c4d310b9524993e1eb5e0e4686d6617151e/nn-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ca18363db75bb603c2f17641b0ff27ca", "sha256": "1c364054b0859d97ba1b600c95eb2992ef55701e8eeb6a3911db86b868937967"}, "downloads": -1, "filename": "nn-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ca18363db75bb603c2f17641b0ff27ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4979, "upload_time": "2020-01-27T12:01:45", "upload_time_iso_8601": "2020-01-27T12:01:45.309055Z", "url": "https://files.pythonhosted.org/packages/b3/2a/b00995cba3fda79210c0002355925b45a3abf882c2b3c42b5275dc6708df/nn-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ca18363db75bb603c2f17641b0ff27ca", "sha256": "1c364054b0859d97ba1b600c95eb2992ef55701e8eeb6a3911db86b868937967"}, "downloads": -1, "filename": "nn-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ca18363db75bb603c2f17641b0ff27ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4979, "upload_time": "2020-01-27T12:01:45", "upload_time_iso_8601": "2020-01-27T12:01:45.309055Z", "url": "https://files.pythonhosted.org/packages/b3/2a/b00995cba3fda79210c0002355925b45a3abf882c2b3c42b5275dc6708df/nn-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:06 2020"}