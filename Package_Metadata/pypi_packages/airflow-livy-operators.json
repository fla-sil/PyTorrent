{"info": {"author": "Vadim Panov", "author_email": "headcra6@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Airflow Livy Operators\n\n[![Build Status](https://travis-ci.org/panovvv/airflow-livy-operators.svg?branch=master)](https://travis-ci.org/panovvv/airflow-livy-operators)\n[![Code coverage](https://codecov.io/gh/panovvv/airflow-livy-operators/branch/master/graph/badge.svg)](https://codecov.io/gh/panovvv/airflow-livy-operators)\n\nLets Airflow DAGs run Spark jobs via Livy:\n* Sessions,\n* Batches. This mode supports additional verification via Spark/YARN REST API.\n\nSee [this blog post](https://www.shortn0tes.com/2020/03/airflow-livy-spark.html \"Blog post\") for more information and detailed comparison of ways to run Spark jobs from Airflow.\n\n## Directories and files of interest\n* `airflow_home/plugins`: Airflow Livy operators' code.\n* `airflow_home/dags`: example DAGs for Airflow.\n* `batches`: Spark jobs code, to be used in Livy batches.\n* `sessions`: (Optionally) templated Spark code for Livy sessions.\n* `helper.sh`: helper shell script. Can be used to run sample DAGs,\nprep development environment and more.\nRun it to find out what other commands are available.\n\n\n## How do I...\n\n### ...run the examples?\nPrerequisites:\n* Python 3. Make sure it's installed and in __$PATH__\n* Spark cluster with Livy. Where to get that? You can \"mock\" it on your machine with \n[my Spark cluster on Docker Compose](https://github.com/panovvv/bigdata-docker-compose).\n\nNow, \n1. __Optional - this step can be skipped if you're mocking a cluster on your\nmachine__. Open *helper.sh*. Inside `init_airflow()` function you'll see Airflow\nConnections for Livy, Spark and YARN. Redefine as appropriate.\n1. run `./helper.sh up` to bring up the whole infrastructure. \nAirflow UI will be available at\n[localhost:8888](http://localhost:8888 \"Airflow UI\").\n1. Ctrl+C to stop Airflow. Then `./helper.sh down` to dispose of\nremaining Airflow processes (shouldn't be required if everything goes well.\nRun this if you can't start Airflow again due to some non-informative errors) .\n\n### ... use it in my project?\n```bash\npip install airflow-livy-operators\n```\nThis is how you import them:\n```python\nfrom airflow_livy.session import LivySessionOperator\nfrom airflow_livy.batch import LivyBatchOperator\n```\n\n### ... set up the development environment?\nAlright, you want to contribute and need to be able to run the stuff on your machine,\nas well as the usual niceness that comes with IDEs (debugging, syntax highlighting).\n\n* run `./helper.sh dev` to install all dev dependencies.\n* `./helper.sh updev` runs Airflow with local operators' code (as opposed to \npulling them from PyPi). Useful for development.\n* (Pycharm-specific) point PyCharm to your newly-created virtual environment: go to\n`\"Preferences\" -> \"Project: airflow-livy-operators\" -> \"Project interpreter\", select\n\"Existing environment\"` and pick __python3__ executable from __venv__ folder\n(__venv/bin/python3__)\n* `./helper.sh cov` - run tests with coverage report \n(will be saved to *htmlcov/*).\n* `./helper.sh lint` - highlight code style errors.\n* `./helper.sh format` to reformat all code \n([Black](https://black.readthedocs.io/en/stable/) + \n[isort](https://readthedocs.org/projects/isort/))\n\n### ... debug?\n\n* (Pycharm-specific) Step-by-step debugging with `airflow test` \nand running PySpark batch jobs locally (with debugging as well) \nis supported via run configurations under `.idea/runConfigurations`.\nYou shouldn't have to do anything to use them - just open the folder\nin PyCharm as a project.\n* An example of how a batch can be ran on local Spark:\n```bash\npython ./batches/join_2_files.py \\\n\"file:////Users/vpanov/data/vpanov/bigdata-docker-compose/data/grades.csv\" \\\n\"file:///Users/vpanov/data/vpanov/bigdata-docker-compose/data/ssn-address.tsv\" \\\n-file1_sep=, -file1_header=true \\\n-file1_schema=\"\\`Last name\\` STRING, \\`First name\\` STRING, SSN STRING, Test1 INT, Test2 INT, Test3 INT, Test4 INT, Final INT, Grade STRING\" \\\n-file1_join_column=SSN -file2_header=false \\\n-file2_schema=\"\\`Last name\\` STRING, \\`First name\\` STRING, SSN STRING, Address1 STRING, Address2 STRING\" \\\n-file2_join_column=SSN -output_header=true \\\n-output_columns=\"file1.\\`Last name\\` AS LastName, file1.\\`First name\\` AS FirstName, file1.SSN, file2.Address1, file2.Address2\" \n\n# Optionally append to save result to file\n#-output_path=\"file:///Users/vpanov/livy_batch_example\" \n```\n\n## TODO\n* helper.sh - replace with modern tools (e.g. pipenv + Docker image)\n* Disable some of flake8 flags for cleaner code\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/panovvv/airflow-livy-operators", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "airflow-livy-operators", "package_url": "https://pypi.org/project/airflow-livy-operators/", "platform": "", "project_url": "https://pypi.org/project/airflow-livy-operators/", "project_urls": {"Homepage": "https://github.com/panovvv/airflow-livy-operators"}, "release_url": "https://pypi.org/project/airflow-livy-operators/0.3/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Lets Airflow DAGs run Spark jobs via Livy: sessions and/or batches.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Airflow Livy Operators</h1>\n<p><a href=\"https://travis-ci.org/panovvv/airflow-livy-operators\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/65064721a6b8d56196ec22897a96bdb0aa7cf1f0/68747470733a2f2f7472617669732d63692e6f72672f70616e6f7676762f616972666c6f772d6c6976792d6f70657261746f72732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/panovvv/airflow-livy-operators\" rel=\"nofollow\"><img alt=\"Code coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5feb21373a193b3446cd33b8a132f4dae1137360/68747470733a2f2f636f6465636f762e696f2f67682f70616e6f7676762f616972666c6f772d6c6976792d6f70657261746f72732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Lets Airflow DAGs run Spark jobs via Livy:</p>\n<ul>\n<li>Sessions,</li>\n<li>Batches. This mode supports additional verification via Spark/YARN REST API.</li>\n</ul>\n<p>See <a href=\"https://www.shortn0tes.com/2020/03/airflow-livy-spark.html\" rel=\"nofollow\" title=\"Blog post\">this blog post</a> for more information and detailed comparison of ways to run Spark jobs from Airflow.</p>\n<h2>Directories and files of interest</h2>\n<ul>\n<li><code>airflow_home/plugins</code>: Airflow Livy operators' code.</li>\n<li><code>airflow_home/dags</code>: example DAGs for Airflow.</li>\n<li><code>batches</code>: Spark jobs code, to be used in Livy batches.</li>\n<li><code>sessions</code>: (Optionally) templated Spark code for Livy sessions.</li>\n<li><code>helper.sh</code>: helper shell script. Can be used to run sample DAGs,\nprep development environment and more.\nRun it to find out what other commands are available.</li>\n</ul>\n<h2>How do I...</h2>\n<h3>...run the examples?</h3>\n<p>Prerequisites:</p>\n<ul>\n<li>Python 3. Make sure it's installed and in <strong>$PATH</strong></li>\n<li>Spark cluster with Livy. Where to get that? You can \"mock\" it on your machine with\n<a href=\"https://github.com/panovvv/bigdata-docker-compose\" rel=\"nofollow\">my Spark cluster on Docker Compose</a>.</li>\n</ul>\n<p>Now,</p>\n<ol>\n<li><strong>Optional - this step can be skipped if you're mocking a cluster on your\nmachine</strong>. Open <em>helper.sh</em>. Inside <code>init_airflow()</code> function you'll see Airflow\nConnections for Livy, Spark and YARN. Redefine as appropriate.</li>\n<li>run <code>./helper.sh up</code> to bring up the whole infrastructure.\nAirflow UI will be available at\n<a href=\"http://localhost:8888\" rel=\"nofollow\" title=\"Airflow UI\">localhost:8888</a>.</li>\n<li>Ctrl+C to stop Airflow. Then <code>./helper.sh down</code> to dispose of\nremaining Airflow processes (shouldn't be required if everything goes well.\nRun this if you can't start Airflow again due to some non-informative errors) .</li>\n</ol>\n<h3>... use it in my project?</h3>\n<pre>pip install airflow-livy-operators\n</pre>\n<p>This is how you import them:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">airflow_livy.session</span> <span class=\"kn\">import</span> <span class=\"n\">LivySessionOperator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">airflow_livy.batch</span> <span class=\"kn\">import</span> <span class=\"n\">LivyBatchOperator</span>\n</pre>\n<h3>... set up the development environment?</h3>\n<p>Alright, you want to contribute and need to be able to run the stuff on your machine,\nas well as the usual niceness that comes with IDEs (debugging, syntax highlighting).</p>\n<ul>\n<li>run <code>./helper.sh dev</code> to install all dev dependencies.</li>\n<li><code>./helper.sh updev</code> runs Airflow with local operators' code (as opposed to\npulling them from PyPi). Useful for development.</li>\n<li>(Pycharm-specific) point PyCharm to your newly-created virtual environment: go to\n<code>\"Preferences\" -&gt; \"Project: airflow-livy-operators\" -&gt; \"Project interpreter\", select \"Existing environment\"</code> and pick <strong>python3</strong> executable from <strong>venv</strong> folder\n(<strong>venv/bin/python3</strong>)</li>\n<li><code>./helper.sh cov</code> - run tests with coverage report\n(will be saved to <em>htmlcov/</em>).</li>\n<li><code>./helper.sh lint</code> - highlight code style errors.</li>\n<li><code>./helper.sh format</code> to reformat all code\n(<a href=\"https://black.readthedocs.io/en/stable/\" rel=\"nofollow\">Black</a> +\n<a href=\"https://readthedocs.org/projects/isort/\" rel=\"nofollow\">isort</a>)</li>\n</ul>\n<h3>... debug?</h3>\n<ul>\n<li>(Pycharm-specific) Step-by-step debugging with <code>airflow test</code>\nand running PySpark batch jobs locally (with debugging as well)\nis supported via run configurations under <code>.idea/runConfigurations</code>.\nYou shouldn't have to do anything to use them - just open the folder\nin PyCharm as a project.</li>\n<li>An example of how a batch can be ran on local Spark:</li>\n</ul>\n<pre>python ./batches/join_2_files.py <span class=\"se\">\\</span>\n<span class=\"s2\">\"file:////Users/vpanov/data/vpanov/bigdata-docker-compose/data/grades.csv\"</span> <span class=\"se\">\\</span>\n<span class=\"s2\">\"file:///Users/vpanov/data/vpanov/bigdata-docker-compose/data/ssn-address.tsv\"</span> <span class=\"se\">\\</span>\n-file1_sep<span class=\"o\">=</span>, -file1_header<span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"se\">\\</span>\n-file1_schema<span class=\"o\">=</span><span class=\"s2\">\"\\`Last name\\` STRING, \\`First name\\` STRING, SSN STRING, Test1 INT, Test2 INT, Test3 INT, Test4 INT, Final INT, Grade STRING\"</span> <span class=\"se\">\\</span>\n-file1_join_column<span class=\"o\">=</span>SSN -file2_header<span class=\"o\">=</span><span class=\"nb\">false</span> <span class=\"se\">\\</span>\n-file2_schema<span class=\"o\">=</span><span class=\"s2\">\"\\`Last name\\` STRING, \\`First name\\` STRING, SSN STRING, Address1 STRING, Address2 STRING\"</span> <span class=\"se\">\\</span>\n-file2_join_column<span class=\"o\">=</span>SSN -output_header<span class=\"o\">=</span><span class=\"nb\">true</span> <span class=\"se\">\\</span>\n-output_columns<span class=\"o\">=</span><span class=\"s2\">\"file1.\\`Last name\\` AS LastName, file1.\\`First name\\` AS FirstName, file1.SSN, file2.Address1, file2.Address2\"</span> \n\n<span class=\"c1\"># Optionally append to save result to file</span>\n<span class=\"c1\">#-output_path=\"file:///Users/vpanov/livy_batch_example\" </span>\n</pre>\n<h2>TODO</h2>\n<ul>\n<li>helper.sh - replace with modern tools (e.g. pipenv + Docker image)</li>\n<li>Disable some of flake8 flags for cleaner code</li>\n</ul>\n\n          </div>"}, "last_serial": 6793271, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "fe1c8c5af760c89d3988eee46721d6cf", "sha256": "a00b124b2a8f346a424e49a9971edaacd841526ffca8342c84252df4073787ed"}, "downloads": -1, "filename": "airflow_livy_operators-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fe1c8c5af760c89d3988eee46721d6cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11610, "upload_time": "2020-03-11T15:56:54", "upload_time_iso_8601": "2020-03-11T15:56:54.308235Z", "url": "https://files.pythonhosted.org/packages/05/8c/de6f947f8b1c7e662bc6b5e20da76bf5fedb0ac1b02a79799d61922bd367/airflow_livy_operators-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "353162b91c40bfb37385139327d7857c", "sha256": "41ede890e4ab086fff2de3cb3b94b569e65292c1c47ca35ace1f1184689a508d"}, "downloads": -1, "filename": "airflow-livy-operators-0.3.tar.gz", "has_sig": false, "md5_digest": "353162b91c40bfb37385139327d7857c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10529, "upload_time": "2020-03-11T15:56:56", "upload_time_iso_8601": "2020-03-11T15:56:56.407565Z", "url": "https://files.pythonhosted.org/packages/ce/d2/81bb382a5475020c051576107b5ed7dcf525afa63810f7f3882edba34e2e/airflow-livy-operators-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe1c8c5af760c89d3988eee46721d6cf", "sha256": "a00b124b2a8f346a424e49a9971edaacd841526ffca8342c84252df4073787ed"}, "downloads": -1, "filename": "airflow_livy_operators-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fe1c8c5af760c89d3988eee46721d6cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 11610, "upload_time": "2020-03-11T15:56:54", "upload_time_iso_8601": "2020-03-11T15:56:54.308235Z", "url": "https://files.pythonhosted.org/packages/05/8c/de6f947f8b1c7e662bc6b5e20da76bf5fedb0ac1b02a79799d61922bd367/airflow_livy_operators-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "353162b91c40bfb37385139327d7857c", "sha256": "41ede890e4ab086fff2de3cb3b94b569e65292c1c47ca35ace1f1184689a508d"}, "downloads": -1, "filename": "airflow-livy-operators-0.3.tar.gz", "has_sig": false, "md5_digest": "353162b91c40bfb37385139327d7857c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10529, "upload_time": "2020-03-11T15:56:56", "upload_time_iso_8601": "2020-03-11T15:56:56.407565Z", "url": "https://files.pythonhosted.org/packages/ce/d2/81bb382a5475020c051576107b5ed7dcf525afa63810f7f3882edba34e2e/airflow-livy-operators-0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:30 2020"}