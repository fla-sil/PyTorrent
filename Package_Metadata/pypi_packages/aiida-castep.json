{"info": {"author": "Bonan Zhu", "author_email": "bz240@cam.ac.uk", "bugtrack_url": null, "classifiers": ["Framework :: AiiDA", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "AiiDA plugin for working with CASTEP\n====================================\n[![Documentation Status](https://readthedocs.org/projects/aiida-castep/badge/?version=master)](https://aiida-castep.readthedocs.io/en/master/?badge=master)\n[![pipeline status](https://gitlab.com/bz1/aiida-castep/badges/master/pipeline.svg)](https://gitlab.com/bz1/aiida-castep/commits/master)\n(master)  \n[![Documentation Status](https://readthedocs.org/projects/aiida-castep/badge/?version=dev)](https://aiida-castep.readthedocs.io/en/dev/?badge=dev)\n[![pipeline status](https://gitlab.com/bz1/aiida-castep/badges/dev/pipeline.svg)](https://gitlab.com/bz1/aiida-castep/commits/dev)\n(dev)  \n\nA plugin for [AiiDA](www.aiida.net) to work with plane-wave pseudopotential DFT code [CASTEP](www.castep.org).\nCASTEP has a single binary executable and calculation is primarily controlled by the *task* keyword.\nThe generic `CastepCalculation` should work with all tasks, at least in terms of generating input files.\nLikewise a generic `CastepParser` class is implemented and can handle parsing most information we are interested in *singlepoint*, *geometryoptimisation*, *bandstructure/spectral* tasks.\nMost output files are retrieved if present, and it is possible to explicitly request retrieval from the remote computer. \nThe goal of this plugin is not to provide a comprehensive parser of the CASTEP results, but to build a graph of calculations performed for provenance preservation and workflow automation.\nInput and output of a simple calculation:\n\n![Asingle calculation](https://gitlab.com/bz1/aiida-castep/raw/dev/docs/source/images/Si_bs_example.png)\n\nor a series of operations and automated calculations:\n\n![A series of calculations](https://gitlab.com/bz1/aiida-castep/raw/dev/docs/source/images/calc_series_example.png)\n\nThe raw files can always be extracted from the database and analysed by the post-processing tools of choice. \nEven better, such tools may be integrated with the AiiDA framework and have the analysis appended to the provenance graph.\n\nHighlights of available features:\n* Storing usp/recpot as `UspData` (sub-class of `SingleFileData`) in AiiDA database and create/use of pseudo family groups.\n* Store OTFG generating strings as `OTFGData` in AiiDA. Create of family/group are also supported. OTFG library (such as \"C19\") are represented as a OTFG string works for all elements.\n* Preparation of CASTEP input files. Writing cell and parameters files are both supported. Tags in *positions_abs* block file should also work, e.g *LABEL*, *SPIN*, *MIXTURE*.\n* Parsing energy, force, stress from output .castep file and .geom file\n* Parsing trajectory from .geom, .ts, .md files.\n* Checking errors in .param and .cell files before submitting, using dictionaries shipped from built from CASTEP executable.\n* Extra KpointData input node for BS, SEPCTRAL and PHONON tasks.\n* Preparing transition state search calculations\n* A `create_restart` function for easy creation of continuation/restart calculations. Input can be altered using `param_update` and `param_delete` keyword arguments. Automatic copying/linking of remote check files by AiiDA.\n* A `get_castep_inputs_summary` function to print a summary of inputs of a calculations.\n* A `compare_with` method to compare the inputs of two calculations.\n\nDependencies\n------------\n\nThe primary dependency is the `aiida_core` package. The dependencies are:\n\n* The plugin version 1.0 and above support only `aiida_core>=1.0.0b6`.\n* The plugin version 0.3 support only `aiida_core` 0.12.x versions.\n\nDue to major design and API changes in the `aiida_core`, scripts written are incompatible between and new versions.\n\n\nDocumentation\n-------------\n\nDocumentation is hosted at Read the Docs:  \n[dev version](https://aiida-castep.readthedocs.io/en/dev/)  \n[master version](https://aiida-castep.readthedocs.io/en/master/)\n\nTodos and nice-to-haves\n-----------------------\n\n* Methods for importing existing calculations \n* Support for submitting file based CASTEP calculations.\n* At the moment there is no enforcement on the type in `Dict` input node. For example, setting *smearing_width* to 0.1 and \"0.1\" is equivalent, but they will store differently in the database.\n\nHow to test\n-----------\n\nThe tests uses the `pytest` framework. First, install with the dependencies\n```\npip install aiida_core[testing]\npip install aiida-castep[testing]\n```\n\nThen you can run the command `pytest` from the project directory.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/bz1/aiida-castep", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "aiida-castep", "package_url": "https://pypi.org/project/aiida-castep/", "platform": "", "project_url": "https://pypi.org/project/aiida-castep/", "project_urls": {"Homepage": "https://gitlab.com/bz1/aiida-castep"}, "release_url": "https://pypi.org/project/aiida-castep/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "AiiDA plugin for CASTEP", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AiiDA plugin for working with CASTEP</h1>\n<p><a href=\"https://aiida-castep.readthedocs.io/en/master/?badge=master\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c61b2e50bc4c5a5bebffbff4df9521010a90d5c7/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696964612d6361737465702f62616467652f3f76657273696f6e3d6d6173746572\"></a>\n<a href=\"https://gitlab.com/bz1/aiida-castep/commits/master\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/71053ab30a26dc78ae5f5b47b3cde2f52b2c838a/68747470733a2f2f6769746c61622e636f6d2f627a312f61696964612d6361737465702f6261646765732f6d61737465722f706970656c696e652e737667\"></a>\n(master)<br>\n<a href=\"https://aiida-castep.readthedocs.io/en/dev/?badge=dev\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f79123f89aa62b9e66518db8d0d4db45123eb97/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61696964612d6361737465702f62616467652f3f76657273696f6e3d646576\"></a>\n<a href=\"https://gitlab.com/bz1/aiida-castep/commits/dev\" rel=\"nofollow\"><img alt=\"pipeline status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5fbd9ded1612812c9932b4566e63a42a16a801c/68747470733a2f2f6769746c61622e636f6d2f627a312f61696964612d6361737465702f6261646765732f6465762f706970656c696e652e737667\"></a>\n(dev)</p>\n<p>A plugin for <a href=\"www.aiida.net\" rel=\"nofollow\">AiiDA</a> to work with plane-wave pseudopotential DFT code <a href=\"www.castep.org\" rel=\"nofollow\">CASTEP</a>.\nCASTEP has a single binary executable and calculation is primarily controlled by the <em>task</em> keyword.\nThe generic <code>CastepCalculation</code> should work with all tasks, at least in terms of generating input files.\nLikewise a generic <code>CastepParser</code> class is implemented and can handle parsing most information we are interested in <em>singlepoint</em>, <em>geometryoptimisation</em>, <em>bandstructure/spectral</em> tasks.\nMost output files are retrieved if present, and it is possible to explicitly request retrieval from the remote computer.\nThe goal of this plugin is not to provide a comprehensive parser of the CASTEP results, but to build a graph of calculations performed for provenance preservation and workflow automation.\nInput and output of a simple calculation:</p>\n<p><img alt=\"Asingle calculation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1351e224db2516008a3b39ec4b19503c5e05df4f/68747470733a2f2f6769746c61622e636f6d2f627a312f61696964612d6361737465702f7261772f6465762f646f63732f736f757263652f696d616765732f53695f62735f6578616d706c652e706e67\"></p>\n<p>or a series of operations and automated calculations:</p>\n<p><img alt=\"A series of calculations\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d249b3c82ec59c7f07525e923e32eda1cb7a4186/68747470733a2f2f6769746c61622e636f6d2f627a312f61696964612d6361737465702f7261772f6465762f646f63732f736f757263652f696d616765732f63616c635f7365726965735f6578616d706c652e706e67\"></p>\n<p>The raw files can always be extracted from the database and analysed by the post-processing tools of choice.\nEven better, such tools may be integrated with the AiiDA framework and have the analysis appended to the provenance graph.</p>\n<p>Highlights of available features:</p>\n<ul>\n<li>Storing usp/recpot as <code>UspData</code> (sub-class of <code>SingleFileData</code>) in AiiDA database and create/use of pseudo family groups.</li>\n<li>Store OTFG generating strings as <code>OTFGData</code> in AiiDA. Create of family/group are also supported. OTFG library (such as \"C19\") are represented as a OTFG string works for all elements.</li>\n<li>Preparation of CASTEP input files. Writing cell and parameters files are both supported. Tags in <em>positions_abs</em> block file should also work, e.g <em>LABEL</em>, <em>SPIN</em>, <em>MIXTURE</em>.</li>\n<li>Parsing energy, force, stress from output .castep file and .geom file</li>\n<li>Parsing trajectory from .geom, .ts, .md files.</li>\n<li>Checking errors in .param and .cell files before submitting, using dictionaries shipped from built from CASTEP executable.</li>\n<li>Extra KpointData input node for BS, SEPCTRAL and PHONON tasks.</li>\n<li>Preparing transition state search calculations</li>\n<li>A <code>create_restart</code> function for easy creation of continuation/restart calculations. Input can be altered using <code>param_update</code> and <code>param_delete</code> keyword arguments. Automatic copying/linking of remote check files by AiiDA.</li>\n<li>A <code>get_castep_inputs_summary</code> function to print a summary of inputs of a calculations.</li>\n<li>A <code>compare_with</code> method to compare the inputs of two calculations.</li>\n</ul>\n<h2>Dependencies</h2>\n<p>The primary dependency is the <code>aiida_core</code> package. The dependencies are:</p>\n<ul>\n<li>The plugin version 1.0 and above support only <code>aiida_core&gt;=1.0.0b6</code>.</li>\n<li>The plugin version 0.3 support only <code>aiida_core</code> 0.12.x versions.</li>\n</ul>\n<p>Due to major design and API changes in the <code>aiida_core</code>, scripts written are incompatible between and new versions.</p>\n<h2>Documentation</h2>\n<p>Documentation is hosted at Read the Docs:<br>\n<a href=\"https://aiida-castep.readthedocs.io/en/dev/\" rel=\"nofollow\">dev version</a><br>\n<a href=\"https://aiida-castep.readthedocs.io/en/master/\" rel=\"nofollow\">master version</a></p>\n<h2>Todos and nice-to-haves</h2>\n<ul>\n<li>Methods for importing existing calculations</li>\n<li>Support for submitting file based CASTEP calculations.</li>\n<li>At the moment there is no enforcement on the type in <code>Dict</code> input node. For example, setting <em>smearing_width</em> to 0.1 and \"0.1\" is equivalent, but they will store differently in the database.</li>\n</ul>\n<h2>How to test</h2>\n<p>The tests uses the <code>pytest</code> framework. First, install with the dependencies</p>\n<pre><code>pip install aiida_core[testing]\npip install aiida-castep[testing]\n</code></pre>\n<p>Then you can run the command <code>pytest</code> from the project directory.</p>\n\n          </div>"}, "last_serial": 6229897, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "c132070d00facf15c2067bf362524a0a", "sha256": "86bbd1c34f78ce0012ae91b350de7661ad8fc402aae79835fc025589122cac89"}, "downloads": -1, "filename": "aiida_castep-0.3.0-py2-none-any.whl", "has_sig": false, "md5_digest": "c132070d00facf15c2067bf362524a0a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 68144, "upload_time": "2018-10-30T13:33:50", "upload_time_iso_8601": "2018-10-30T13:33:50.196129Z", "url": "https://files.pythonhosted.org/packages/a4/98/fb046421cca279bcfb541de55d8935c15ed37c04297827c916869a781b3e/aiida_castep-0.3.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f116636d72d1e24b26a1b547b26affec", "sha256": "3c2ac035db879987e5634351b357fc4dc5767583874410a2240f4a72e709d2bb"}, "downloads": -1, "filename": "aiida-castep-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f116636d72d1e24b26a1b547b26affec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54793, "upload_time": "2018-10-30T13:33:51", "upload_time_iso_8601": "2018-10-30T13:33:51.878354Z", "url": "https://files.pythonhosted.org/packages/7e/94/ea7dcd16b2d540adb9cc18311c05c64a1c7168b3700172fc8782c12c8228/aiida-castep-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "232e8a00e400100937bbfc030bbb032d", "sha256": "28c7437d2e1e80667f6e6ae9bb0e9c28039251a566e66293801d41e0f4116184"}, "downloads": -1, "filename": "aiida_castep-0.3.1-py2-none-any.whl", "has_sig": false, "md5_digest": "232e8a00e400100937bbfc030bbb032d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 204801, "upload_time": "2019-03-20T21:26:54", "upload_time_iso_8601": "2019-03-20T21:26:54.973272Z", "url": "https://files.pythonhosted.org/packages/7b/f8/d3959335d97cacdc0bbb84b4f704bdb1f1aa46023eb9412af09ed2836f3b/aiida_castep-0.3.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b7ad2d68e2cf073a3d0975dd14debef", "sha256": "27a083687ca35653dfe6548de9b10cefa768eff7fdddeb09ad527edd9fea9cdf"}, "downloads": -1, "filename": "aiida-castep-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2b7ad2d68e2cf073a3d0975dd14debef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 181361, "upload_time": "2019-03-20T21:26:56", "upload_time_iso_8601": "2019-03-20T21:26:56.494401Z", "url": "https://files.pythonhosted.org/packages/4c/3c/1a086da7f79116974c500a1fafbc3bad3e7b42595484db3affc05411d7b2/aiida-castep-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "7cf23b74b49ac6fa8a59686fc88367f5", "sha256": "0d4740eb83f9bcd5d3de9048e60b61ab5381c10ef7d1062d31ad5b687c353a20"}, "downloads": -1, "filename": "aiida_castep-0.3.2-py2-none-any.whl", "has_sig": false, "md5_digest": "7cf23b74b49ac6fa8a59686fc88367f5", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 209139, "upload_time": "2019-05-24T09:25:23", "upload_time_iso_8601": "2019-05-24T09:25:23.983809Z", "url": "https://files.pythonhosted.org/packages/2d/0d/7290d958176eb339709a05425f7374ae21461dbd93ff8afee9b830710b74/aiida_castep-0.3.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc550970780a0211816acbe48310d387", "sha256": "0015e7b397abc13423e853c3a5b9e6f410e4ba42d812cffe82c28cddc0b68724"}, "downloads": -1, "filename": "aiida-castep-0.3.2.tar.gz", "has_sig": false, "md5_digest": "cc550970780a0211816acbe48310d387", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 186525, "upload_time": "2019-05-24T09:25:25", "upload_time_iso_8601": "2019-05-24T09:25:25.591023Z", "url": "https://files.pythonhosted.org/packages/25/6c/d80a175b6d5d1930377f0d430457f7b88db67f6bb1d0a591a4058934904d/aiida-castep-0.3.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "5c4413f21143515186c0e2ad45b0a7ce", "sha256": "2a44441a767c97a0a170f5e85a7ed8c509ee3bee1309e39ab1de9fbb479ab080"}, "downloads": -1, "filename": "aiida-castep-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5c4413f21143515186c0e2ad45b0a7ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 253352, "upload_time": "2019-12-02T17:20:41", "upload_time_iso_8601": "2019-12-02T17:20:41.190847Z", "url": "https://files.pythonhosted.org/packages/a6/aa/933551918904f342e11967b59f9ffe0d0c23f481fd79fd228bf883ea65d6/aiida-castep-1.0.0.tar.gz", "yanked": false}], "1.0.0b1": [{"comment_text": "", "digests": {"md5": "446cdb8c86ef21767f588d84e47b7090", "sha256": "6aa7d803389fcea941378af4d21220631b628cf31f6fa179f6eb2cd7c69645ee"}, "downloads": -1, "filename": "aiida-castep-1.0.0b1.tar.gz", "has_sig": false, "md5_digest": "446cdb8c86ef21767f588d84e47b7090", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 190998, "upload_time": "2019-06-18T11:21:18", "upload_time_iso_8601": "2019-06-18T11:21:18.753148Z", "url": "https://files.pythonhosted.org/packages/2d/cb/c37abddf1d55bdbee1916d7c9250172855ce660365d65739074057036c20/aiida-castep-1.0.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c4413f21143515186c0e2ad45b0a7ce", "sha256": "2a44441a767c97a0a170f5e85a7ed8c509ee3bee1309e39ab1de9fbb479ab080"}, "downloads": -1, "filename": "aiida-castep-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5c4413f21143515186c0e2ad45b0a7ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 253352, "upload_time": "2019-12-02T17:20:41", "upload_time_iso_8601": "2019-12-02T17:20:41.190847Z", "url": "https://files.pythonhosted.org/packages/a6/aa/933551918904f342e11967b59f9ffe0d0c23f481fd79fd228bf883ea65d6/aiida-castep-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:03 2020"}