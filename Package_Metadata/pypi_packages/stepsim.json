{"info": {"author": "Florian Berger", "author_email": "fberger@florian-berger.de", "bugtrack_url": null, "classifiers": [], "description": "About\n-----\n\nStepSim is a lightweight step-based simulation module written in Python.\nIt can do simple real-time simulations of discrete systems. StepSim\nsupports step-by-step simulation or can run until a break condition\noccurs.\n\nSimulations are made up of *containers* and *converters*. A *container*\nstores a discrete amount of units of a certain type. A *converter* draws\nunits from one or more containers and delivers the result to another\ncontainer.\n\nStepSim does not even attempt to do any parallel processing. It\nprocesses converters round-robin in a fixed order.\n\nPrerequisites\n-------------\n\nPython (tested on Python 3.1.2 and 2.6.5)\n`http://www.python.org <http://www.python.org>`_\n\nInstallation\n------------\n\nUnzip the file, then at the command line run\n\n::\n\n    python setup.py install\n\nRunning Tests\n-------------\n\nOpen a shell / DOS window, navigate to the stepsim directory, and run\n\n::\n\n    python -m doctest README\n\nDocumentation\n-------------\n\nTo read the API documentation, open a shell / DOS window, navigate to\nthe stepsim directory, and run\n\n::\n\n    pydoc stepsim\n\nYou can create a HTML version using\n\n::\n\n    pydoc -w stepsim\n\nExample\n-------\n\nFirst import the stepsim module:\n\n::\n\n    >>> import stepsim\n\nTo get verbose output, activate logging to console:\n\n::\n\n    >>> stepsim.log_to_stdout()\n    >>> stepsim.loglevel(\"debug\")\n\nNow create some containers:\n\n::\n\n    >>> cashbox = stepsim.Container(\"cashbox\", \"EUR\", 10)\n    >>> storage = stepsim.Container(\"storage\", \"parts\")\n\nThen create a converter and set up the draw-deliver-ratio:\n\n::\n\n    >>> buyer = stepsim.Converter(\"buyer\", 2, (cashbox, 3), (storage, 2))\n    buyer: Adding source 'cashbox', drawing 3 EUR per step.\n\nFrom any list of converters, we can get a list of simulation milestones\nthat lead to an end condition (without explicitly creating a\nsimulation):\n\n::\n\n    >>> stepsim.loglevel(\"info\")\n    >>> stepsim.milestones(\"storage == 3\", [buyer])\n    ------------------------------\n    Milestones to achieve storage == 3:\n    <BLANKLINE>\n    Milestone:\n    6 EUR in cashbox (10 delivered, 166.67%)\n    total: 100.0%\n    <BLANKLINE>\n    Milestone:\n    3.0 parts in storage (0 delivered, 0.0%)\n    total: 0.0%\n    ------------------------------\n    [<Milestone (cashbox: 6) 100.0%>, <Milestone (storage: 3.0) 0.0%>]\n\nLet's create a simulation:\n\n::\n\n    >>> stepsim.loglevel(\"debug\")\n    >>> s = stepsim.Simulation(buyer)\n    Adding converter 'buyer' to simulation.\n    Current containers: ['cashbox', 'storage']\n    >>> s\n    <Simulation, converters: [<buyer: converting from ['cashbox'] to storage>], containers: [<cashbox: 10 EUR in stock>, <storage: 0 parts in stock>]>\n\nThe step() method is used to advance the simulation by one step:\n\n::\n\n    >>> stepsim.loglevel(\"info\")\n    >>> s.step()\n    buyer: Drawing 3 EUR from cashbox.\n\nIt is also possible to check conditions inbetween. The simulation\ninstance offers a convenience method to do this using a string\ndescribing the condition:\n\n::\n\n    >>> s.check(\"cashbox == 10\")\n    False\n    >>> s.check(\"cashbox != 10\")\n    True\n    >>> s.check(\"storage >= 0\")\n    True\n\nIt is possible to evaluate how many steps it will take until a certain\ncondition is met:\n\n::\n\n    >>> stepsim.be_quiet()\n    >>> s.estimate_finish(\"storage == 2\", 100)\n    4\n\nBehind the scenes, this will run a copy of the simulation. A maximum\nstep value will prevent hanging on impossible conditions:\n\n::\n\n    >>> s.estimate_finish(\"cashbox < 1\", 100)\n    100\n\nWhen you remove a converter, its last step will be reverted. Note that\nthis does not rewind the simulation step counter.\n\n::\n\n    >>> stepsim.log_to_stdout()\n    >>> stepsim.loglevel(\"debug\")\n    >>> s.step()\n    buyer: Conversion in progress, 2 steps left.\n    Active Container of buyer: None\n    >>> s.remove_converter(\"buyer\")\n    reverting last draw from 'buyer'\n    buyer: returning 3 EUR to cashbox.\n    Removing converter 'buyer' from simulation.\n    Current containers: []\n\nIt is possible to limit the number of units that a converter will\ndeliver.\n\n::\n\n    >>> buyer.set_max_units(3)\n    buyer: setting max_units to 3\n\nNote that this command will reset the counter of units delivered.\n\nBy stepping through the simulation, we can check when the converter\nstops.\n\n::\n\n    >>> s.add_converter(buyer)\n    Adding converter 'buyer' to simulation.\n    Current containers: ['cashbox', 'storage']\n    >>> s.step()\n    buyer: Ready to draw resources\n    buyer: Drawing 3 EUR from cashbox.\n    cashbox has 7 EUR left now.\n    buyer: Setting processing countdown to 2 steps\n    Active Container of buyer: <cashbox: 7 EUR in stock>\n    >>> s.step()\n    buyer: Conversion in progress, 2 steps left.\n    Active Container of buyer: None\n    >>> s.step()\n    buyer: Conversion in progress, 1 steps left.\n    Active Container of buyer: None\n    >>> s.step()\n    buyer: Delivering 2 parts to storage.\n    storage stock is 2 parts now.\n    buyer has delivered 2 units since last reset.\n    Active Container of buyer: <storage: 2 parts in stock>\n    >>> s.step()\n    buyer: delivered 2 units and would deliver 2 next step, max units is 3, no action.\n    >>> s.step()\n    buyer: delivered 2 units and would deliver 2 next step, max units is 3, no action.\n\nWith the maximum number of units set to -1, the converter will deliver\nan unlimited number. This is the default.\n\n::\n\n    >>> buyer.set_max_units(-1)\n    buyer: setting max_units to -1\n\nIt is possible to temporarily change the speed of the converter by\ngiving the temporary steps value and a duration. This method will return\nTrue if the change was successful:\n\n::\n\n    >>> buyer.set_temporary_steps(4, 4)\n    buyer: setting steps = 4 for 4 steps\n    buyer: setting remaining countdown to -1\n    True\n    >>> s.step()\n    buyer: Ready to draw resources\n    buyer: Drawing 3 EUR from cashbox.\n    cashbox has 4 EUR left now.\n    buyer: Setting processing countdown to 4 steps\n    Active Container of buyer: <cashbox: 4 EUR in stock>\n    >>> s.step()\n    buyer: Conversion in progress, 4 steps left.\n    Active Container of buyer: None\n    >>> s.step()\n    buyer: Conversion in progress, 3 steps left.\n    Active Container of buyer: None\n    >>> s.step()\n    buyer: Conversion in progress, 2 steps left.\n    Active Container of buyer: None\n    >>> s.step()\n    buyer: Conversion in progress, 1 steps left.\n    Active Container of buyer: None\n    >>> s.step()\n    buyer: Delivering 2 parts to storage.\n    storage stock is 4 parts now.\n    restoring buyer.steps to 2\n    buyer has delivered 2 units since last reset.\n    Active Container of buyer: <storage: 4 parts in stock>\n\nWe can run the simulation from the current state until an end condition\nis satisfied. In this case we let it run until the buyer can not buy any\nmore parts:\n\n::\n\n    >>> s.run(lambda: not buyer.last_step_successful)\n    Starting simulation.\n    --- Step 15: -----------------------------------------------\n    buyer: Ready to draw resources\n    buyer: Drawing 3 EUR from cashbox.\n    cashbox has 1 EUR left now.\n    buyer: Setting processing countdown to 2 steps\n    Active Container of buyer: <cashbox: 1 EUR in stock>\n    --- Step 16: -----------------------------------------------\n    buyer: Conversion in progress, 2 steps left.\n    Active Container of buyer: None\n    --- Step 17: -----------------------------------------------\n    buyer: Conversion in progress, 1 steps left.\n    Active Container of buyer: None\n    --- Step 18: -----------------------------------------------\n    buyer: Delivering 2 parts to storage.\n    storage stock is 6 parts now.\n    buyer has delivered 4 units since last reset.\n    Active Container of buyer: <storage: 6 parts in stock>\n    --- Step 19: -----------------------------------------------\n    buyer: Ready to draw resources\n    buyer: Cannot draw 3 EUR from cashbox, only 1 left.\n    Active Container of buyer: None\n    --- Break condition met, simulation finished. ---------------\n    Final state after 19 steps:\n    <cashbox: 1 EUR in stock>\n    <storage: 6 parts in stock>\n\nYou can export the simulation graph in the DOT graph language (see\n`http://www.graphviz.org/ <http://www.graphviz.org/>`_):\n\n::\n\n    >>> s.save_dot(\"part_buyer.dot\")\n    Writing DOT file.\n    digraph {\n        graph [size=5] ;\n        node [fontsize=10, fontname=\"Bitstream Vera Sans\"] ;\n        \"cashbox\" [shape=box];\n        \"cashbox\" -> \"buyer\" ;\n        \"storage\" [shape=box];\n        \"buyer\" -> \"storage\" ;\n    }\n    <BLANKLINE>\n\nClean up:\n\n::\n\n    >>> import os\n    >>> os.remove(\"part_buyer.dot\")\n\nThe file 'making\\_cakes.py' shows a more elaborate example. It is\nincluded in the ZIP archive and will be installed in\n'share/doc/stepsim/examples'.\n\nLicense\n-------\n\nStepSim is licensed under the GPL. See the file COPYING for details.\n\nLinks\n-----\n\nStepSim on Launchpad: https://launchpad.net/stepsim\n\nStepSim on ohloh: https://www.ohloh.net/p/stepsim\n\nStepSim on Freecode: http://freecode.com/projects/stepsim\n\nStepSim in the Python Package Index: http://pypi.python.org/pypi/stepsim\n\nAuthor\n------\n\nFlorian Berger", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://florian-berger.de/en/software/stepsim", "keywords": null, "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "stepsim", "package_url": "https://pypi.org/project/stepsim/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/stepsim/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://florian-berger.de/en/software/stepsim"}, "release_url": "https://pypi.org/project/stepsim/0.5.7/", "requires_dist": null, "requires_python": null, "summary": "StepSim - Python Step-based Simulation Package", "version": "0.5.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"about\">\n<h2>About</h2>\n<p>StepSim is a lightweight step-based simulation module written in Python.\nIt can do simple real-time simulations of discrete systems. StepSim\nsupports step-by-step simulation or can run until a break condition\noccurs.</p>\n<p>Simulations are made up of <em>containers</em> and <em>converters</em>. A <em>container</em>\nstores a discrete amount of units of a certain type. A <em>converter</em> draws\nunits from one or more containers and delivers the result to another\ncontainer.</p>\n<p>StepSim does not even attempt to do any parallel processing. It\nprocesses converters round-robin in a fixed order.</p>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>Python (tested on Python 3.1.2 and 2.6.5)\n<a href=\"http://www.python.org\" rel=\"nofollow\">http://www.python.org</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Unzip the file, then at the command line run</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<p>Open a shell / DOS window, navigate to the stepsim directory, and run</p>\n<pre>python -m doctest README\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>To read the API documentation, open a shell / DOS window, navigate to\nthe stepsim directory, and run</p>\n<pre>pydoc stepsim\n</pre>\n<p>You can create a HTML version using</p>\n<pre>pydoc -w stepsim\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<p>First import the stepsim module:</p>\n<pre>&gt;&gt;&gt; import stepsim\n</pre>\n<p>To get verbose output, activate logging to console:</p>\n<pre>&gt;&gt;&gt; stepsim.log_to_stdout()\n&gt;&gt;&gt; stepsim.loglevel(\"debug\")\n</pre>\n<p>Now create some containers:</p>\n<pre>&gt;&gt;&gt; cashbox = stepsim.Container(\"cashbox\", \"EUR\", 10)\n&gt;&gt;&gt; storage = stepsim.Container(\"storage\", \"parts\")\n</pre>\n<p>Then create a converter and set up the draw-deliver-ratio:</p>\n<pre>&gt;&gt;&gt; buyer = stepsim.Converter(\"buyer\", 2, (cashbox, 3), (storage, 2))\nbuyer: Adding source 'cashbox', drawing 3 EUR per step.\n</pre>\n<p>From any list of converters, we can get a list of simulation milestones\nthat lead to an end condition (without explicitly creating a\nsimulation):</p>\n<pre>&gt;&gt;&gt; stepsim.loglevel(\"info\")\n&gt;&gt;&gt; stepsim.milestones(\"storage == 3\", [buyer])\n------------------------------\nMilestones to achieve storage == 3:\n&lt;BLANKLINE&gt;\nMilestone:\n6 EUR in cashbox (10 delivered, 166.67%)\ntotal: 100.0%\n&lt;BLANKLINE&gt;\nMilestone:\n3.0 parts in storage (0 delivered, 0.0%)\ntotal: 0.0%\n------------------------------\n[&lt;Milestone (cashbox: 6) 100.0%&gt;, &lt;Milestone (storage: 3.0) 0.0%&gt;]\n</pre>\n<p>Let\u2019s create a simulation:</p>\n<pre>&gt;&gt;&gt; stepsim.loglevel(\"debug\")\n&gt;&gt;&gt; s = stepsim.Simulation(buyer)\nAdding converter 'buyer' to simulation.\nCurrent containers: ['cashbox', 'storage']\n&gt;&gt;&gt; s\n&lt;Simulation, converters: [&lt;buyer: converting from ['cashbox'] to storage&gt;], containers: [&lt;cashbox: 10 EUR in stock&gt;, &lt;storage: 0 parts in stock&gt;]&gt;\n</pre>\n<p>The step() method is used to advance the simulation by one step:</p>\n<pre>&gt;&gt;&gt; stepsim.loglevel(\"info\")\n&gt;&gt;&gt; s.step()\nbuyer: Drawing 3 EUR from cashbox.\n</pre>\n<p>It is also possible to check conditions inbetween. The simulation\ninstance offers a convenience method to do this using a string\ndescribing the condition:</p>\n<pre>&gt;&gt;&gt; s.check(\"cashbox == 10\")\nFalse\n&gt;&gt;&gt; s.check(\"cashbox != 10\")\nTrue\n&gt;&gt;&gt; s.check(\"storage &gt;= 0\")\nTrue\n</pre>\n<p>It is possible to evaluate how many steps it will take until a certain\ncondition is met:</p>\n<pre>&gt;&gt;&gt; stepsim.be_quiet()\n&gt;&gt;&gt; s.estimate_finish(\"storage == 2\", 100)\n4\n</pre>\n<p>Behind the scenes, this will run a copy of the simulation. A maximum\nstep value will prevent hanging on impossible conditions:</p>\n<pre>&gt;&gt;&gt; s.estimate_finish(\"cashbox &lt; 1\", 100)\n100\n</pre>\n<p>When you remove a converter, its last step will be reverted. Note that\nthis does not rewind the simulation step counter.</p>\n<pre>&gt;&gt;&gt; stepsim.log_to_stdout()\n&gt;&gt;&gt; stepsim.loglevel(\"debug\")\n&gt;&gt;&gt; s.step()\nbuyer: Conversion in progress, 2 steps left.\nActive Container of buyer: None\n&gt;&gt;&gt; s.remove_converter(\"buyer\")\nreverting last draw from 'buyer'\nbuyer: returning 3 EUR to cashbox.\nRemoving converter 'buyer' from simulation.\nCurrent containers: []\n</pre>\n<p>It is possible to limit the number of units that a converter will\ndeliver.</p>\n<pre>&gt;&gt;&gt; buyer.set_max_units(3)\nbuyer: setting max_units to 3\n</pre>\n<p>Note that this command will reset the counter of units delivered.</p>\n<p>By stepping through the simulation, we can check when the converter\nstops.</p>\n<pre>&gt;&gt;&gt; s.add_converter(buyer)\nAdding converter 'buyer' to simulation.\nCurrent containers: ['cashbox', 'storage']\n&gt;&gt;&gt; s.step()\nbuyer: Ready to draw resources\nbuyer: Drawing 3 EUR from cashbox.\ncashbox has 7 EUR left now.\nbuyer: Setting processing countdown to 2 steps\nActive Container of buyer: &lt;cashbox: 7 EUR in stock&gt;\n&gt;&gt;&gt; s.step()\nbuyer: Conversion in progress, 2 steps left.\nActive Container of buyer: None\n&gt;&gt;&gt; s.step()\nbuyer: Conversion in progress, 1 steps left.\nActive Container of buyer: None\n&gt;&gt;&gt; s.step()\nbuyer: Delivering 2 parts to storage.\nstorage stock is 2 parts now.\nbuyer has delivered 2 units since last reset.\nActive Container of buyer: &lt;storage: 2 parts in stock&gt;\n&gt;&gt;&gt; s.step()\nbuyer: delivered 2 units and would deliver 2 next step, max units is 3, no action.\n&gt;&gt;&gt; s.step()\nbuyer: delivered 2 units and would deliver 2 next step, max units is 3, no action.\n</pre>\n<p>With the maximum number of units set to -1, the converter will deliver\nan unlimited number. This is the default.</p>\n<pre>&gt;&gt;&gt; buyer.set_max_units(-1)\nbuyer: setting max_units to -1\n</pre>\n<p>It is possible to temporarily change the speed of the converter by\ngiving the temporary steps value and a duration. This method will return\nTrue if the change was successful:</p>\n<pre>&gt;&gt;&gt; buyer.set_temporary_steps(4, 4)\nbuyer: setting steps = 4 for 4 steps\nbuyer: setting remaining countdown to -1\nTrue\n&gt;&gt;&gt; s.step()\nbuyer: Ready to draw resources\nbuyer: Drawing 3 EUR from cashbox.\ncashbox has 4 EUR left now.\nbuyer: Setting processing countdown to 4 steps\nActive Container of buyer: &lt;cashbox: 4 EUR in stock&gt;\n&gt;&gt;&gt; s.step()\nbuyer: Conversion in progress, 4 steps left.\nActive Container of buyer: None\n&gt;&gt;&gt; s.step()\nbuyer: Conversion in progress, 3 steps left.\nActive Container of buyer: None\n&gt;&gt;&gt; s.step()\nbuyer: Conversion in progress, 2 steps left.\nActive Container of buyer: None\n&gt;&gt;&gt; s.step()\nbuyer: Conversion in progress, 1 steps left.\nActive Container of buyer: None\n&gt;&gt;&gt; s.step()\nbuyer: Delivering 2 parts to storage.\nstorage stock is 4 parts now.\nrestoring buyer.steps to 2\nbuyer has delivered 2 units since last reset.\nActive Container of buyer: &lt;storage: 4 parts in stock&gt;\n</pre>\n<p>We can run the simulation from the current state until an end condition\nis satisfied. In this case we let it run until the buyer can not buy any\nmore parts:</p>\n<pre>&gt;&gt;&gt; s.run(lambda: not buyer.last_step_successful)\nStarting simulation.\n--- Step 15: -----------------------------------------------\nbuyer: Ready to draw resources\nbuyer: Drawing 3 EUR from cashbox.\ncashbox has 1 EUR left now.\nbuyer: Setting processing countdown to 2 steps\nActive Container of buyer: &lt;cashbox: 1 EUR in stock&gt;\n--- Step 16: -----------------------------------------------\nbuyer: Conversion in progress, 2 steps left.\nActive Container of buyer: None\n--- Step 17: -----------------------------------------------\nbuyer: Conversion in progress, 1 steps left.\nActive Container of buyer: None\n--- Step 18: -----------------------------------------------\nbuyer: Delivering 2 parts to storage.\nstorage stock is 6 parts now.\nbuyer has delivered 4 units since last reset.\nActive Container of buyer: &lt;storage: 6 parts in stock&gt;\n--- Step 19: -----------------------------------------------\nbuyer: Ready to draw resources\nbuyer: Cannot draw 3 EUR from cashbox, only 1 left.\nActive Container of buyer: None\n--- Break condition met, simulation finished. ---------------\nFinal state after 19 steps:\n&lt;cashbox: 1 EUR in stock&gt;\n&lt;storage: 6 parts in stock&gt;\n</pre>\n<p>You can export the simulation graph in the DOT graph language (see\n<a href=\"http://www.graphviz.org/\" rel=\"nofollow\">http://www.graphviz.org/</a>):</p>\n<pre>&gt;&gt;&gt; s.save_dot(\"part_buyer.dot\")\nWriting DOT file.\ndigraph {\n    graph [size=5] ;\n    node [fontsize=10, fontname=\"Bitstream Vera Sans\"] ;\n    \"cashbox\" [shape=box];\n    \"cashbox\" -&gt; \"buyer\" ;\n    \"storage\" [shape=box];\n    \"buyer\" -&gt; \"storage\" ;\n}\n&lt;BLANKLINE&gt;\n</pre>\n<p>Clean up:</p>\n<pre>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.remove(\"part_buyer.dot\")\n</pre>\n<p>The file \u2018making_cakes.py\u2019 shows a more elaborate example. It is\nincluded in the ZIP archive and will be installed in\n\u2018share/doc/stepsim/examples\u2019.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>StepSim is licensed under the GPL. See the file COPYING for details.</p>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<p>StepSim on Launchpad: <a href=\"https://launchpad.net/stepsim\" rel=\"nofollow\">https://launchpad.net/stepsim</a></p>\n<p>StepSim on ohloh: <a href=\"https://www.ohloh.net/p/stepsim\" rel=\"nofollow\">https://www.ohloh.net/p/stepsim</a></p>\n<p>StepSim on Freecode: <a href=\"http://freecode.com/projects/stepsim\" rel=\"nofollow\">http://freecode.com/projects/stepsim</a></p>\n<p>StepSim in the Python Package Index: <a href=\"http://pypi.python.org/pypi/stepsim\" rel=\"nofollow\">http://pypi.python.org/pypi/stepsim</a></p>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>Florian Berger</p>\n</div>\n\n          </div>"}, "last_serial": 783215, "releases": {"0.1.0": [], "0.2.0": [], "0.3.0": [], "0.3.1": [], "0.3.2": [], "0.4.0": [], "0.5.0": [], "0.5.1": [], "0.5.2": [], "0.5.3": [], "0.5.4": [], "0.5.5": [], "0.5.6": [], "0.5.7": [], "0.5.8a": []}, "urls": [], "timestamp": "Fri May  8 03:02:02 2020"}