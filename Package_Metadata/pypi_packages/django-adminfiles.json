{"info": {"author": "Carl Meyer", "author_email": "carl@oddbird.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "=================\ndjango-adminfiles\n=================\n\nA file upload manager and picker for the Django admin, with support\nfor browsing and embedding from Flickr, Youtube, Vimeo, etc.\n\nUpload files and view uploaded files (with thumbnails) in a\nfile-picker underneath any content textarea. Click on a file to add a\nreference to it into the content area.\n\nInline file references can be customized per-mime-type to automate the\ncorrect presentation of each file: <img> tags (with additional markup\nas needed) for images, links for downloadable files, even embedded\nplayers for audio or video files. See `the screencast`_.\n\n.. _the screencast: http://vimeo.com/8940852\n\nInstallation\n============\n\nInstall from PyPI with ``easy_install`` or ``pip``::\n\n    pip install django-adminfiles\n\nor get the in-development version::\n\n    pip install http://bitbucket.org/carljm/django-adminfiles/get/tip.gz\n\n\nDependencies\n------------\n\n``django-adminfiles`` requires `Django`_ 1.4 or later,\n`sorl-thumbnail`_ 11.12 (not compatible with old 3.x series)\nand the `Python Imaging Library`_.\n\n`djangoembed`_ or `django-oembed`_ is required for OEmbed\nfunctionality. `flickrapi`_ is required for browsing Flickr photos, `gdata`_\nfor Youtube videos.\n\n.. _Django: http://www.djangoproject.com/\n.. _sorl-thumbnail: http://pypi.python.org/pypi/sorl-thumbnail/11.12\n.. _Python Imaging Library: http://www.pythonware.com/products/pil/\n.. _django-oembed: http://pypi.python.org/pypi/django-oembed\n.. _djangoembed: http://pypi.python.org/pypi/djangoembed\n.. _gdata: http://pypi.python.org/pypi/gdata\n.. _flickrapi: http://pypi.python.org/pypi/flickrapi\n\nUsage\n=====\n\nTo use django-adminfiles in your Django project:\n\n    1. Add ``'adminfiles'`` to your ``INSTALLED_APPS`` setting. Also\n       add ``'sorl.thumbnail'`` if you have not installed it already.\n\n    2. Run ``python manage.py syncdb`` to to create the adminfiles database\n       tables.\n\n    3. Make the contents of the ``adminfiles/static/adminfiles`` directory\n       available at ``STATIC_URL/adminfiles``.  This can be done by through\n       your webserver configuration, via an app such as\n       ``django.contrib.staticfiles``, or by copying the files or making a\n       symlink.\n\n    4. Add ``url(r'^adminfiles/', include('adminfiles.urls'))`` in your\n       root URLconf.\n\n    5. Inherit content model admin options from\n       `FilePickerAdmin`_.\n\nIn addition, you may want to set the ``THUMBNAIL_EXTENSION`` setting for\n`sorl-thumbnail`_ to ``\"png\"`` rather than the default ``\"jpg\"``, so that\nimages with alpha transparency aren't broken when thumbnailed in the\nadminfiles file-picker.\n\n\nFilePickerAdmin\n===============\n\nFor each model you'd like to use the ``django-adminfiles`` picker\nwith, inherit that model's admin options class from\n``adminfiles.admin.FilePickerAdmin`` instead of the usual\n``django.contrib.admin.ModelAdmin``, and set the ``adminfiles_fields``\nattribute to a list/tuple of the names of the content fields it is\nused with.\n\nFor instance, if you have a ``Post`` model with a ``content``\nTextField, and you'd like to insert references into that TextField\nfrom a ``django-adminfiles`` picker::\n\n    from django.contrib import admin\n\n    from adminfiles.admin import FilePickerAdmin\n\n    from myapp.models import Post\n\n    class PostAdmin(FilePickerAdmin):\n        adminfiles_fields = ('content',)\n\n    admin.site.register(Post, PostAdmin)\n\nThe picker displays thumbnails of all uploaded images, and appropriate\nicons for non-image files. It also allows you to filter and view only\nimages or only non-image files. In the lower left it contains links to\nupload a new file or refresh the list of available files.\n\nIf you click on a file thumbnail/icon, a menu pops up with options to\nedit or delete the uploaded file, or insert it into the associated\ncontent field. To modify the default insertion options, set the\n`ADMINFILES_INSERT_LINKS`_ setting.\n\nFile references\n===============\n\nWhen you use the file upload picker to insert an uploaded file\nreference in a text content field, it inserts something like\n``<<<my-file-slug>>>``, built from the `ADMINFILES_REF_START`_ and\n`ADMINFILES_REF_END`_ settings and the slug of the ``FileUpload``\ninstance.\n\nThe reference can also contain arbitrary key=value option after the\nfile slug, separated by colons, e.g.:\n``<<<my-file-slug:class=left>>>``.\n\nThese generic references allow you to use ``django-adminfiles`` with\nraw HTML content or any type of text markup. They also allow you to\nchange uploaded files and have old references to the file pick up the\nchange (as long as the slug does not change). The URL path to the\nfile, or other metadata like the height or width of an image, are not\nhardcoded in your content.\n\nRendering references\n--------------------\n\nThese references need to be rendered at some point into whatever\nmarkup you ultimately want. The markup produced by the rendering is\ncontrolled by the Django templates under ``adminfiles/render/``.\n\nThe template used is selected according to the mime type of the file\nupload referenced. For instance, for rendering a file with mime type\n``image/jpeg``, the template used would be the first template of the\nfollowing that exists: ``adminfiles/render/image/jpeg.html``,\n``adminfiles/render/image/default.html``,\n``adminfiles/render/default.html``.\n\nIf a file should be rendered as if it had a different mime type\n(e.g. an image you want to link to rather than display), pass the\n``as`` option with the mime type you want it rendered as (where either\nthe sub-type or the entire mime-type can be replaced with\n``default``). For instance, with the default available templates if\nyou wanted to link to an image file, you could use\n``<<<my-image:as=default>>>``.\n\nTwo rendering templates are included with ``django-adminfiles``:\n``adminfiles/render/image/default.html`` (used for any type of image)\nand ``adminfiles/render/default.html`` (used for any other type of\nfile). These default templates produce an HTML ``img`` tag for images\nand a simple ``a`` link to other file types. They also respect three\nkey-value options: ``class``, which will be used as the the ``class``\nattribute of the ``img`` or ``a`` tag; ``alt``, which will be the\nimage alt text (images only; if not provided ``upload.title`` is used\nfor alt text); and ``title``, which will override ``upload.title`` as\nthe link text of the ``a`` tag (non-images only).\n\nYou can easily override these templates with your own, and provide\nadditional templates for other file types. The template is rendered\nwith the following context:\n\n``upload``\n    The ``FileUpload`` model instance whose slug field matches the\n    reference. Useful attributes of this instance include\n    ``upload.upload`` (a `Django File object`_), ``upload.title``,\n    ``upload.description``, ``upload.mime_type`` (first and second\n    parts separately accessible as ``upload.content_type`` and\n    ``upload.sub_type``) and ``upload.is_image`` (True if\n    ``upload.content_type`` is \"image\"). Images also have\n    ``upload.height`` and ``upload.width`` available.\n\n``options``\n    A dictionary of the key=value options in the reference.\n\nIf a reference is encountered with an invalid slug (no ``FileUpload``\nfound in the database with that slug), the value of the\n`ADMINFILES_STRING_IF_NOT_FOUND`_ setting is rendered instead\n(defaults to the empty string).\n\n.. _Django File object: http://docs.djangoproject.com/en/dev/ref/files/file/\n\nrender_uploads template filter\n------------------------------\n\n``django-adminfiles`` provides two methods for making the actual\nrendering happen. The simple method is a template filter:\n``render_uploads``. To use it, just load the ``adminfiles_tags`` tag\nlibrary, and apply the ``render_uploads`` filter to your content field::\n\n    {% load adminfiles_tags %}\n\n    {{ post.content|render_uploads }}\n\nThe ``render_uploads`` filter just replaces any file upload references\nin the content with the rendered template (described above).\n\nThe filter also accepts an optional argument: an alternate base path\nto the templates to use for rendering each uploaded file\nreference. This path will replace ``adminfiles/render`` as the base\npath in the mime-type-based search for specific templates. This allows\ndifferent renderings to be used in different circumstances::\n\n    {{ post.content|render_uploads:\"adminfiles/alt_render\" }}\n\nFor a file of mime type ``text/plain`` this would use one of the\nfollowing templates: ``adminfiles/alt_render/text/plain.html``,\n``adminfiles/alt_render/text/default.html``, or\n``adminfiles/alt_render/default.html``.\n\nrender_upload template filter\n-----------------------------\n\nIf you have a ``FileUpload`` model instance in your template and wish\nto render just that instance using the normal rendering logic, you can\nuse the ``render_upload`` filter. This filter accepts options in the\nsame \"key=val:key2=val2\" format used for passing options to\ninline-embedded files; the special option ``template_path`` specifies\nan alternate base path for finding rendering templates::\n\n    {{ my_upload|render_upload:\"template_path=adminfiles/alt_render:class=special\" }}\n\npre-rendering at save time\n--------------------------\n\nIn some cases, markup in content fields is pre-rendered when the model\nis saved, and stored in the database or cache. In this case, it may be\npreferable to also render the uploaded file references in that step,\nrather than re-rendering them every time the content is displayed in\nthe template.\n\nTo use this approach, first you need to integrate the function\n``adminfiles.utils.render_uploads`` into your existing content\npre-rendering process, which should be automatically triggered by\nsaving the content model. \n\nThe ``adminfiles.utils.render_uploads`` function takes a content\nstring as its argument and returns the same string with all uploaded\nfile references replaced, same as the template tag. It also accepts a\n``template_path`` argument, which is the same as the argument accepted\nby the `render_uploads template filter`_.\n\nIntegrating this function in the markup-rendering step is outside the\nscope of ``django-adminfiles``. For instance, if using\n`django-markitup`_ with Markdown to process content markup, the\n``MARKITUP_FILTER`` setting might look like this::\n\n    MARKITUP_FILTER = (\"utils.markup_filter\", {})\n\nWhich points to a function in ``utils.py`` like this::\n\n    from markdown import markdown\n    from adminfiles.utils import render_uploads\n\n    def markup_filter(markup):\n        return markdown(render_uploads(markup))\n\nOnce this is done, set the `ADMINFILES_USE_SIGNALS`_ setting to\nTrue. Now ``django-adminfiles`` will automatically track all\nreferences to uploaded files in your content models. Anytime an\nuploaded file is changed, all content models which reference it will\nautomatically be re-saved (and thus updated with the new uploaded\nfile).\n\n.. _django-markitup: http://bitbucket.org/carljm/django-markitup\n\nEmbedding media from other sites\n================================\n\n``django-adminfiles`` allows embedding media from any site that supports the\nOEmbed protocol. OEmbed support is provided via `djangoembed`_ or\n`django-oembed`_, one of which must be installed for embedding to work.\n\nIf a supported OEmbed application is installed, the `render_uploads template\nfilter`_ will also automatically replace any OEmbed-capable URLs with the\nappropriate embed markup (so URLs from any site supported by the installed\nOEmbed application can simply be pasted in to the content manually).\n\nIn addition, ``django-adminfiles`` provides views in its filepicker to\nbrowse Flickr photos, Youtube videos, and Vimeo videos and insert\ntheir URLs into the context textarea with a click. To enable these\nbrowsing views, set the `ADMINFILES_YOUTUBE_USER`_,\n`ADMINFILES_VIMEO_USER`_, or `ADMINFILES_FLICKR_USER`_ and\n`ADMINFILES_FLICKR_API_KEY`_ settings (and make sure the\n`dependencies`_ are satisfied).\n\nTo add support for browsing content from another site, just create a\nclass view that inherits from ``adminfiles.views.OEmbedView`` and add\nits dotted path to the `ADMINFILES_BROWSER_VIEWS`_ setting. See the\nexisting views in ``adminfiles/views.py`` for details.\n\nTo list the available browsing views and their status (enabled or\ndisabled, and why), ``django-adminfiles`` provides an\n``adminfiles_browser_views`` management command, which you can run\nwith ``./manage.py adminfiles_browser_views``.\n\nSettings\n========\n\nADMINFILES_REF_START\n--------------------\n\nMarker indicating the beginning of an uploaded-file reference in text\ncontent. Defaults to '<<<'.\n\nIf you set this to something insufficiently distinctive (a string\nthat's likely to show up otherwise in your content), all bets are off.\n\nSpecial regex characters are escaped, thus you can safely set it to\nsomething like '[[[', but you can't do advanced regex magic with it.\n\nADMINFILES_REF_END\n------------------\n\nMarker indicating the end of an uploaded-file reference in text\ncontent. Defaults to '>>>'.\n\nIf you set this to something insufficiently distinctive (a string\nthat's likely to show up otherwise in your content), all bets are off.\n\nSpecial regex characters are escaped, thus you can safely set it to\nsomething like ']]]', but you can't do advanced regex magic with it.\n\nADMINFILES_USE_SIGNALS\n----------------------\n\nA boolean setting: should ``django-adminfiles`` track which content\nmodels reference which uploaded files, and re-save those content\nmodels whenever a referenced uploaded file changes? \n\nSet this to True if you already pre-render markup in content fields at\nsave time and want to render upload references at that same save-time\npre-rendering step.\n\nDefaults to False. If this setting doesn't make sense to you, you can\nsafely just leave it False and use the `render_uploads template\nfilter`_.\n\nADMINFILES_STRING_IF_NOT_FOUND\n------------------------------\n\nThe string used to replace invalid uploaded file references (given\nslug not found). Defaults to ``u''``.\n\nADMINFILES_STDICON_SET\n----------------------\n\nDjango-adminfiles ships with a few icons for common file types, used\nfor displaying non-image files in the file-picker. To enable a broader\nrange of mime-type icons, set this setting to the name of an icon set\nincluded at `stdicon.com`_, and icons from that set will be linked.\n\n.. _stdicon.com: http://www.stdicon.com\n\nADMINFILES_INSERT_LINKS\n-----------------------\n\nBy default, the admin file picker popup menu for images allows\ninserting a reference with no options, a reference with \"class=left\",\nor a reference with \"class=right\". For non-images, the default popup\nmenu only allows inserting a reference without options. To change the\ninsertion options for various file types, set\n``ADMINFILES_INSERT_LINKS`` to a dictionary mapping mime-types (or\npartial mime-types) to a list of insertion menu options. For instance,\nthe default setting looks like this::\n\n    ADMINFILES_INSERT_LINKS = {\n        '': [('Insert Link', {})],\n        'image': [('Insert', {}),\n                  ('Insert (left)', {'class': 'left'}),\n                  ('Insert (right)', {'class': 'right'})]\n    }\n\nEach key in the dictionary can be the first segment of a mime type\n(e.g. \"image\"), or a full mime type (e.g. \"audio/mpeg\"), or an empty\nstring (the default used if no mime type matches). For any given file\nthe most specific matching entry is used. The dictionary should always\ncontain a default entry (empty string key), or some files may have no\ninsertion options.\n\nEach value in the dictionary is a list of menu items. Each menu item\nis a two-tuple, where the first entry is the user-visible name for the\ninsertion option, and the second entry is a dictionary of options to\nbe added to the inserted file reference.\n\n\nADMINFILES_UPLOAD_TO\n--------------------\n\nThe ``upload_to`` argument that will be passed to the ``FileField`` on\n``django-admin-upload``'s ``FileUpload`` model; determines where\n``django-adminfiles`` keeps its uploaded files, relative to\n``MEDIA_URL``. Can include strftime formatting codes as described `in\nthe Django documentation`_. By default, set to ``'adminfiles'``.\n\n.. _in the Django documentation: http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.FileField.upload_to\n\nADMINFILES_THUMB_ORDER\n----------------------\n\nThe ordering that will be applied to thumbnails displayed in the\npicker. Expects a tuple of field names, prefixed with ``-`` to\nindicate reverse ordering, same as `\"ordering\" model Meta\nattribute`_. The default value is ``('-upload_date')``; thumbnails\nordered by date uploaded, most recent first.\n\n.. _\"ordering\" model Meta attribute:  http://docs.djangoproject.com/en/dev/ref/models/options/#ordering\n\nADMINFILES_BROWSER_VIEWS\n------------------------\n\nList of dotted paths to file-browsing views to make available in the\nfilepicker. The default setting includes all the views bundled with\n``django-adminfiles``::\n\n    ['adminfiles.views.AllView',\n    'adminfiles.views.ImagesView',\n    'adminfiles.views.AudioView',\n    'adminfiles.views.FilesView',\n    'adminfiles.views.FlickrView',\n    'adminfiles.views.YouTubeView',\n    'adminfiles.views.VimeoView']\n\nThe last three may be disabled despite their inclusion in this setting\nif their `dependencies`_ are not satisfied or their required settings\nare not set.\n\nADMINFILES_YOUTUBE_USER\n-----------------------\n\nRequired for use of the Youtube video browser.\n\nADMINFILES_VIMEO_USER\n---------------------\n\nRequired for use of the Vimeo video browser.\n\nADMINFILES_VIMEO_PAGES\n----------------------\n\nThe Vimeo API returns 20 videos per page; this setting determines the\nmaximum number of pages to fetch (defaults to 1, Vimeo-imposed maximum of\n3).\n\nADMINFILES_FLICKR_USER\n----------------------\n\nRequired for use of the Flickr photo browser.\n\nADMINFILES_FLICKR_API_KEY\n-------------------------\n\nRequired for use of the Flickr photo browser.\n\nJQUERY_URL\n----------\n\n``django-adminfiles`` requires the jQuery Javascript library.  By default,\n``django-adminfiles`` uses the latest version of jQuery 1.4 hosted by Google,\nvia the URL http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js.\n\nIf you wish to use a different version of jQuery, or host it yourself, set the\n``JQUERY_URL`` setting. ``JQUERY_URL`` can be absolute or relative; if relative\nit is relative to ``STATIC_URL``. For example::\n\n    JQUERY_URL = 'jquery.min.js'\n\nThis will use the jQuery available at ``STATIC_URL/jquery.min.js``.\nCHANGES\n=======\n\n1.0.1 (2013.06.15)\n------------------\n\n- Fix for non-local file storages. Thanks vitaly4uk.\n\n- Fix MANIFEST.in so static assets are included with release tarball. Thanks\n  StillNewb for the report.\n\n\n1.0 (2013.06.06)\n----------------\n\n- BACKWARDS-INCOMPATIBLE: Django versions prior to 1.4 are no longer tested or supported.\n\n- BACKWARDS-INCOMPATIBLE: Removed the ``ADMINFILES_MEDIA_URL`` setting, use\n  ``STATIC_URL`` everywhere for static assets. Thanks Rudolph Froger for the\n  nudge.\n\n- Updated to most recent sorl-thumbnail. Thanks Svyatoslav Bulbakha.\n\n- Added Russian translation. Thanks Svyatoslav Bulbakha.\n\n- Added Spanish translation. Thanks Andr\u00e9s Reyes Monge.\n\n- Updated to use Django 1.3's class-based views. Fixes #10. Thanks Andr\u00e9s\n  Reyes Monge and Ales Zabala Alava.\n\n\n0.5.1 (2011.03.22)\n------------------\n\n- Added support for djangoembed as well as django-oembed.\n\n- Added support for multiple pages of Vimeo results via\n  ADMINFILES_VIMEO_PAGES setting (defaults to 1).\n\n- Added German translation. Thanks Jannis Leidel.\n\n\n\n0.5.0 (2010.03.09)\n------------------\n\n- Added ``as`` template override keyword option\n\n- Added ``render_upload`` filter\n\n- Added YouTube, Flickr, Vimeo browsers\n\n- Added OEmbed support\n\n- Added translation hooks and Polish translation: thanks Ludwik Trammer!\n\n- Added support for linking full set of mime-type icons from stdicon.com.\n\n- Made the JS reference-insertion options configurable.\n\n- BACKWARDS-INCOMPATIBLE: default rendering template is now\n  ``adminfiles/render/default.html`` instead of\n  ``adminfiles/render.html``.  Image-specific rendering should\n  override ``adminfiles/render/image/default.html`` instead of testing\n  ``upload.is_image`` in default template.\n\n- Added per-mime-type template rendering\n\n- Upgraded to jQuery 1.4\n\n- Fixed bug where YouTube and Flickr links showed up even when disabled.\n\n- Added sync_upload_refs command\n\n\n0.3.4 (2009.12.03)\n------------------\n\n- Fixed over-eager escaping in render_uploads template tag.\n\n\n0.3.3 (2009.12.02)\n------------------\n\n- Fixed insertion of slugs for non-image files.\n\n\n0.3.2 (2009.12.02)\n------------------\n\n- Fixed setup.py package_data so media and templates are installed from sdist.\n\n\n0.3.1 (2009.11.25)\n------------------\n\n- Fixed setup.py so ``tests`` package is not installed.\n\n\n0.3.0 (2009.11.23)\n------------------\n\n- Initial release as ``django-adminfiles``\n\n- Added docs and test suite\n\n- Added reference parsing & rendering, template filter, signal handling\n\nTODO\n====\n\n- Fix run_tests and short DB names deprecation warnings when running tests \n  on 1.3.\n\n- Test and document snipshot integration and select dropdown integration.\n\n- Add integration with plain FilePathField or FileField (for unobtrusive use\n  with third-party apps).\n\n- Make URLs in JS portable (by reversing \"all\" view to find out where\n  we've been included in the URLconf).\n\n- Link to online demo or video.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/carljm/django-adminfiles/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-adminfiles", "package_url": "https://pypi.org/project/django-adminfiles/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-adminfiles/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/carljm/django-adminfiles/"}, "release_url": "https://pypi.org/project/django-adminfiles/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "File upload manager and picker for Django admin", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A file upload manager and picker for the Django admin, with support\nfor browsing and embedding from Flickr, Youtube, Vimeo, etc.</p>\n<p>Upload files and view uploaded files (with thumbnails) in a\nfile-picker underneath any content textarea. Click on a file to add a\nreference to it into the content area.</p>\n<p>Inline file references can be customized per-mime-type to automate the\ncorrect presentation of each file: &lt;img&gt; tags (with additional markup\nas needed) for images, links for downloadable files, even embedded\nplayers for audio or video files. See <a href=\"http://vimeo.com/8940852\" rel=\"nofollow\">the screencast</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from PyPI with <tt>easy_install</tt> or <tt>pip</tt>:</p>\n<pre>pip install django-adminfiles\n</pre>\n<p>or get the in-development version:</p>\n<pre>pip install http://bitbucket.org/carljm/django-adminfiles/get/tip.gz\n</pre>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p><tt><span class=\"pre\">django-adminfiles</span></tt> requires <a href=\"http://www.djangoproject.com/\" rel=\"nofollow\">Django</a> 1.4 or later,\n<a href=\"http://pypi.python.org/pypi/sorl-thumbnail/11.12\" rel=\"nofollow\">sorl-thumbnail</a> 11.12 (not compatible with old 3.x series)\nand the <a href=\"http://www.pythonware.com/products/pil/\" rel=\"nofollow\">Python Imaging Library</a>.</p>\n<p><a href=\"http://pypi.python.org/pypi/djangoembed\" rel=\"nofollow\">djangoembed</a> or <a href=\"http://pypi.python.org/pypi/django-oembed\" rel=\"nofollow\">django-oembed</a> is required for OEmbed\nfunctionality. <a href=\"http://pypi.python.org/pypi/flickrapi\" rel=\"nofollow\">flickrapi</a> is required for browsing Flickr photos, <a href=\"http://pypi.python.org/pypi/gdata\" rel=\"nofollow\">gdata</a>\nfor Youtube videos.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use django-adminfiles in your Django project:</p>\n<blockquote>\n<ol>\n<li>Add <tt>'adminfiles'</tt> to your <tt>INSTALLED_APPS</tt> setting. Also\nadd <tt>'sorl.thumbnail'</tt> if you have not installed it already.</li>\n<li>Run <tt>python manage.py syncdb</tt> to to create the adminfiles database\ntables.</li>\n<li>Make the contents of the <tt>adminfiles/static/adminfiles</tt> directory\navailable at <tt>STATIC_URL/adminfiles</tt>.  This can be done by through\nyour webserver configuration, via an app such as\n<tt>django.contrib.staticfiles</tt>, or by copying the files or making a\nsymlink.</li>\n<li>Add <tt><span class=\"pre\">url(r'^adminfiles/',</span> <span class=\"pre\">include('adminfiles.urls'))</span></tt> in your\nroot URLconf.</li>\n<li>Inherit content model admin options from\n<a href=\"#filepickeradmin\" rel=\"nofollow\">FilePickerAdmin</a>.</li>\n</ol>\n</blockquote>\n<p>In addition, you may want to set the <tt>THUMBNAIL_EXTENSION</tt> setting for\n<a href=\"http://pypi.python.org/pypi/sorl-thumbnail/11.12\" rel=\"nofollow\">sorl-thumbnail</a> to <tt>\"png\"</tt> rather than the default <tt>\"jpg\"</tt>, so that\nimages with alpha transparency aren\u2019t broken when thumbnailed in the\nadminfiles file-picker.</p>\n</div>\n<div id=\"filepickeradmin\">\n<h2>FilePickerAdmin</h2>\n<p>For each model you\u2019d like to use the <tt><span class=\"pre\">django-adminfiles</span></tt> picker\nwith, inherit that model\u2019s admin options class from\n<tt>adminfiles.admin.FilePickerAdmin</tt> instead of the usual\n<tt>django.contrib.admin.ModelAdmin</tt>, and set the <tt>adminfiles_fields</tt>\nattribute to a list/tuple of the names of the content fields it is\nused with.</p>\n<p>For instance, if you have a <tt>Post</tt> model with a <tt>content</tt>\nTextField, and you\u2019d like to insert references into that TextField\nfrom a <tt><span class=\"pre\">django-adminfiles</span></tt> picker:</p>\n<pre>from django.contrib import admin\n\nfrom adminfiles.admin import FilePickerAdmin\n\nfrom myapp.models import Post\n\nclass PostAdmin(FilePickerAdmin):\n    adminfiles_fields = ('content',)\n\nadmin.site.register(Post, PostAdmin)\n</pre>\n<p>The picker displays thumbnails of all uploaded images, and appropriate\nicons for non-image files. It also allows you to filter and view only\nimages or only non-image files. In the lower left it contains links to\nupload a new file or refresh the list of available files.</p>\n<p>If you click on a file thumbnail/icon, a menu pops up with options to\nedit or delete the uploaded file, or insert it into the associated\ncontent field. To modify the default insertion options, set the\n<a href=\"#adminfiles-insert-links\" rel=\"nofollow\">ADMINFILES_INSERT_LINKS</a> setting.</p>\n</div>\n<div id=\"file-references\">\n<h2>File references</h2>\n<p>When you use the file upload picker to insert an uploaded file\nreference in a text content field, it inserts something like\n<tt><span class=\"pre\">&lt;&lt;&lt;my-file-slug&gt;&gt;&gt;</span></tt>, built from the <a href=\"#adminfiles-ref-start\" rel=\"nofollow\">ADMINFILES_REF_START</a> and\n<a href=\"#adminfiles-ref-end\" rel=\"nofollow\">ADMINFILES_REF_END</a> settings and the slug of the <tt>FileUpload</tt>\ninstance.</p>\n<p>The reference can also contain arbitrary key=value option after the\nfile slug, separated by colons, e.g.:\n<tt><span class=\"pre\">&lt;&lt;&lt;my-file-slug:class=left&gt;&gt;&gt;</span></tt>.</p>\n<p>These generic references allow you to use <tt><span class=\"pre\">django-adminfiles</span></tt> with\nraw HTML content or any type of text markup. They also allow you to\nchange uploaded files and have old references to the file pick up the\nchange (as long as the slug does not change). The URL path to the\nfile, or other metadata like the height or width of an image, are not\nhardcoded in your content.</p>\n<div id=\"rendering-references\">\n<h3>Rendering references</h3>\n<p>These references need to be rendered at some point into whatever\nmarkup you ultimately want. The markup produced by the rendering is\ncontrolled by the Django templates under <tt>adminfiles/render/</tt>.</p>\n<p>The template used is selected according to the mime type of the file\nupload referenced. For instance, for rendering a file with mime type\n<tt>image/jpeg</tt>, the template used would be the first template of the\nfollowing that exists: <tt>adminfiles/render/image/jpeg.html</tt>,\n<tt>adminfiles/render/image/default.html</tt>,\n<tt>adminfiles/render/default.html</tt>.</p>\n<p>If a file should be rendered as if it had a different mime type\n(e.g. an image you want to link to rather than display), pass the\n<tt>as</tt> option with the mime type you want it rendered as (where either\nthe sub-type or the entire mime-type can be replaced with\n<tt>default</tt>). For instance, with the default available templates if\nyou wanted to link to an image file, you could use\n<tt><span class=\"pre\">&lt;&lt;&lt;my-image:as=default&gt;&gt;&gt;</span></tt>.</p>\n<p>Two rendering templates are included with <tt><span class=\"pre\">django-adminfiles</span></tt>:\n<tt>adminfiles/render/image/default.html</tt> (used for any type of image)\nand <tt>adminfiles/render/default.html</tt> (used for any other type of\nfile). These default templates produce an HTML <tt>img</tt> tag for images\nand a simple <tt>a</tt> link to other file types. They also respect three\nkey-value options: <tt>class</tt>, which will be used as the the <tt>class</tt>\nattribute of the <tt>img</tt> or <tt>a</tt> tag; <tt>alt</tt>, which will be the\nimage alt text (images only; if not provided <tt>upload.title</tt> is used\nfor alt text); and <tt>title</tt>, which will override <tt>upload.title</tt> as\nthe link text of the <tt>a</tt> tag (non-images only).</p>\n<p>You can easily override these templates with your own, and provide\nadditional templates for other file types. The template is rendered\nwith the following context:</p>\n<dl>\n<dt><tt>upload</tt></dt>\n<dd>The <tt>FileUpload</tt> model instance whose slug field matches the\nreference. Useful attributes of this instance include\n<tt>upload.upload</tt> (a <a href=\"http://docs.djangoproject.com/en/dev/ref/files/file/\" rel=\"nofollow\">Django File object</a>), <tt>upload.title</tt>,\n<tt>upload.description</tt>, <tt>upload.mime_type</tt> (first and second\nparts separately accessible as <tt>upload.content_type</tt> and\n<tt>upload.sub_type</tt>) and <tt>upload.is_image</tt> (True if\n<tt>upload.content_type</tt> is \u201cimage\u201d). Images also have\n<tt>upload.height</tt> and <tt>upload.width</tt> available.</dd>\n<dt><tt>options</tt></dt>\n<dd>A dictionary of the key=value options in the reference.</dd>\n</dl>\n<p>If a reference is encountered with an invalid slug (no <tt>FileUpload</tt>\nfound in the database with that slug), the value of the\n<a href=\"#adminfiles-string-if-not-found\" rel=\"nofollow\">ADMINFILES_STRING_IF_NOT_FOUND</a> setting is rendered instead\n(defaults to the empty string).</p>\n</div>\n<div id=\"render-uploads-template-filter\">\n<h3>render_uploads template filter</h3>\n<p><tt><span class=\"pre\">django-adminfiles</span></tt> provides two methods for making the actual\nrendering happen. The simple method is a template filter:\n<tt>render_uploads</tt>. To use it, just load the <tt>adminfiles_tags</tt> tag\nlibrary, and apply the <tt>render_uploads</tt> filter to your content field:</p>\n<pre>{% load adminfiles_tags %}\n\n{{ post.content|render_uploads }}\n</pre>\n<p>The <tt>render_uploads</tt> filter just replaces any file upload references\nin the content with the rendered template (described above).</p>\n<p>The filter also accepts an optional argument: an alternate base path\nto the templates to use for rendering each uploaded file\nreference. This path will replace <tt>adminfiles/render</tt> as the base\npath in the mime-type-based search for specific templates. This allows\ndifferent renderings to be used in different circumstances:</p>\n<pre>{{ post.content|render_uploads:\"adminfiles/alt_render\" }}\n</pre>\n<p>For a file of mime type <tt>text/plain</tt> this would use one of the\nfollowing templates: <tt>adminfiles/alt_render/text/plain.html</tt>,\n<tt>adminfiles/alt_render/text/default.html</tt>, or\n<tt>adminfiles/alt_render/default.html</tt>.</p>\n</div>\n<div id=\"render-upload-template-filter\">\n<h3>render_upload template filter</h3>\n<p>If you have a <tt>FileUpload</tt> model instance in your template and wish\nto render just that instance using the normal rendering logic, you can\nuse the <tt>render_upload</tt> filter. This filter accepts options in the\nsame \u201ckey=val:key2=val2\u201d format used for passing options to\ninline-embedded files; the special option <tt>template_path</tt> specifies\nan alternate base path for finding rendering templates:</p>\n<pre>{{ my_upload|render_upload:\"template_path=adminfiles/alt_render:class=special\" }}\n</pre>\n</div>\n<div id=\"pre-rendering-at-save-time\">\n<h3>pre-rendering at save time</h3>\n<p>In some cases, markup in content fields is pre-rendered when the model\nis saved, and stored in the database or cache. In this case, it may be\npreferable to also render the uploaded file references in that step,\nrather than re-rendering them every time the content is displayed in\nthe template.</p>\n<p>To use this approach, first you need to integrate the function\n<tt>adminfiles.utils.render_uploads</tt> into your existing content\npre-rendering process, which should be automatically triggered by\nsaving the content model.</p>\n<p>The <tt>adminfiles.utils.render_uploads</tt> function takes a content\nstring as its argument and returns the same string with all uploaded\nfile references replaced, same as the template tag. It also accepts a\n<tt>template_path</tt> argument, which is the same as the argument accepted\nby the <a href=\"#render-uploads-template-filter\" rel=\"nofollow\">render_uploads template filter</a>.</p>\n<p>Integrating this function in the markup-rendering step is outside the\nscope of <tt><span class=\"pre\">django-adminfiles</span></tt>. For instance, if using\n<a href=\"http://bitbucket.org/carljm/django-markitup\" rel=\"nofollow\">django-markitup</a> with Markdown to process content markup, the\n<tt>MARKITUP_FILTER</tt> setting might look like this:</p>\n<pre>MARKITUP_FILTER = (\"utils.markup_filter\", {})\n</pre>\n<p>Which points to a function in <tt>utils.py</tt> like this:</p>\n<pre>from markdown import markdown\nfrom adminfiles.utils import render_uploads\n\ndef markup_filter(markup):\n    return markdown(render_uploads(markup))\n</pre>\n<p>Once this is done, set the <a href=\"#adminfiles-use-signals\" rel=\"nofollow\">ADMINFILES_USE_SIGNALS</a> setting to\nTrue. Now <tt><span class=\"pre\">django-adminfiles</span></tt> will automatically track all\nreferences to uploaded files in your content models. Anytime an\nuploaded file is changed, all content models which reference it will\nautomatically be re-saved (and thus updated with the new uploaded\nfile).</p>\n</div>\n</div>\n<div id=\"embedding-media-from-other-sites\">\n<h2>Embedding media from other sites</h2>\n<p><tt><span class=\"pre\">django-adminfiles</span></tt> allows embedding media from any site that supports the\nOEmbed protocol. OEmbed support is provided via <a href=\"http://pypi.python.org/pypi/djangoembed\" rel=\"nofollow\">djangoembed</a> or\n<a href=\"http://pypi.python.org/pypi/django-oembed\" rel=\"nofollow\">django-oembed</a>, one of which must be installed for embedding to work.</p>\n<p>If a supported OEmbed application is installed, the <a href=\"#render-uploads-template-filter\" rel=\"nofollow\">render_uploads template\nfilter</a> will also automatically replace any OEmbed-capable URLs with the\nappropriate embed markup (so URLs from any site supported by the installed\nOEmbed application can simply be pasted in to the content manually).</p>\n<p>In addition, <tt><span class=\"pre\">django-adminfiles</span></tt> provides views in its filepicker to\nbrowse Flickr photos, Youtube videos, and Vimeo videos and insert\ntheir URLs into the context textarea with a click. To enable these\nbrowsing views, set the <a href=\"#adminfiles-youtube-user\" rel=\"nofollow\">ADMINFILES_YOUTUBE_USER</a>,\n<a href=\"#adminfiles-vimeo-user\" rel=\"nofollow\">ADMINFILES_VIMEO_USER</a>, or <a href=\"#adminfiles-flickr-user\" rel=\"nofollow\">ADMINFILES_FLICKR_USER</a> and\n<a href=\"#adminfiles-flickr-api-key\" rel=\"nofollow\">ADMINFILES_FLICKR_API_KEY</a> settings (and make sure the\n<a href=\"#dependencies\" rel=\"nofollow\">dependencies</a> are satisfied).</p>\n<p>To add support for browsing content from another site, just create a\nclass view that inherits from <tt>adminfiles.views.OEmbedView</tt> and add\nits dotted path to the <a href=\"#adminfiles-browser-views\" rel=\"nofollow\">ADMINFILES_BROWSER_VIEWS</a> setting. See the\nexisting views in <tt>adminfiles/views.py</tt> for details.</p>\n<p>To list the available browsing views and their status (enabled or\ndisabled, and why), <tt><span class=\"pre\">django-adminfiles</span></tt> provides an\n<tt>adminfiles_browser_views</tt> management command, which you can run\nwith <tt>./manage.py adminfiles_browser_views</tt>.</p>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<div id=\"adminfiles-ref-start\">\n<h3>ADMINFILES_REF_START</h3>\n<p>Marker indicating the beginning of an uploaded-file reference in text\ncontent. Defaults to \u2018&lt;&lt;&lt;\u2019.</p>\n<p>If you set this to something insufficiently distinctive (a string\nthat\u2019s likely to show up otherwise in your content), all bets are off.</p>\n<p>Special regex characters are escaped, thus you can safely set it to\nsomething like \u2018[[[\u2018, but you can\u2019t do advanced regex magic with it.</p>\n</div>\n<div id=\"adminfiles-ref-end\">\n<h3>ADMINFILES_REF_END</h3>\n<p>Marker indicating the end of an uploaded-file reference in text\ncontent. Defaults to \u2018&gt;&gt;&gt;\u2019.</p>\n<p>If you set this to something insufficiently distinctive (a string\nthat\u2019s likely to show up otherwise in your content), all bets are off.</p>\n<p>Special regex characters are escaped, thus you can safely set it to\nsomething like \u2018]]]\u2019, but you can\u2019t do advanced regex magic with it.</p>\n</div>\n<div id=\"adminfiles-use-signals\">\n<h3>ADMINFILES_USE_SIGNALS</h3>\n<p>A boolean setting: should <tt><span class=\"pre\">django-adminfiles</span></tt> track which content\nmodels reference which uploaded files, and re-save those content\nmodels whenever a referenced uploaded file changes?</p>\n<p>Set this to True if you already pre-render markup in content fields at\nsave time and want to render upload references at that same save-time\npre-rendering step.</p>\n<p>Defaults to False. If this setting doesn\u2019t make sense to you, you can\nsafely just leave it False and use the <a href=\"#render-uploads-template-filter\" rel=\"nofollow\">render_uploads template\nfilter</a>.</p>\n</div>\n<div id=\"adminfiles-string-if-not-found\">\n<h3>ADMINFILES_STRING_IF_NOT_FOUND</h3>\n<p>The string used to replace invalid uploaded file references (given\nslug not found). Defaults to <tt>u''</tt>.</p>\n</div>\n<div id=\"adminfiles-stdicon-set\">\n<h3>ADMINFILES_STDICON_SET</h3>\n<p>Django-adminfiles ships with a few icons for common file types, used\nfor displaying non-image files in the file-picker. To enable a broader\nrange of mime-type icons, set this setting to the name of an icon set\nincluded at <a href=\"http://www.stdicon.com\" rel=\"nofollow\">stdicon.com</a>, and icons from that set will be linked.</p>\n</div>\n<div id=\"adminfiles-insert-links\">\n<h3>ADMINFILES_INSERT_LINKS</h3>\n<p>By default, the admin file picker popup menu for images allows\ninserting a reference with no options, a reference with \u201cclass=left\u201d,\nor a reference with \u201cclass=right\u201d. For non-images, the default popup\nmenu only allows inserting a reference without options. To change the\ninsertion options for various file types, set\n<tt>ADMINFILES_INSERT_LINKS</tt> to a dictionary mapping mime-types (or\npartial mime-types) to a list of insertion menu options. For instance,\nthe default setting looks like this:</p>\n<pre>ADMINFILES_INSERT_LINKS = {\n    '': [('Insert Link', {})],\n    'image': [('Insert', {}),\n              ('Insert (left)', {'class': 'left'}),\n              ('Insert (right)', {'class': 'right'})]\n}\n</pre>\n<p>Each key in the dictionary can be the first segment of a mime type\n(e.g. \u201cimage\u201d), or a full mime type (e.g. \u201caudio/mpeg\u201d), or an empty\nstring (the default used if no mime type matches). For any given file\nthe most specific matching entry is used. The dictionary should always\ncontain a default entry (empty string key), or some files may have no\ninsertion options.</p>\n<p>Each value in the dictionary is a list of menu items. Each menu item\nis a two-tuple, where the first entry is the user-visible name for the\ninsertion option, and the second entry is a dictionary of options to\nbe added to the inserted file reference.</p>\n</div>\n<div id=\"adminfiles-upload-to\">\n<h3>ADMINFILES_UPLOAD_TO</h3>\n<p>The <tt>upload_to</tt> argument that will be passed to the <tt>FileField</tt> on\n<tt><span class=\"pre\">django-admin-upload</span></tt>\u2019s <tt>FileUpload</tt> model; determines where\n<tt><span class=\"pre\">django-adminfiles</span></tt> keeps its uploaded files, relative to\n<tt>MEDIA_URL</tt>. Can include strftime formatting codes as described <a href=\"http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.FileField.upload_to\" rel=\"nofollow\">in\nthe Django documentation</a>. By default, set to <tt>'adminfiles'</tt>.</p>\n</div>\n<div id=\"adminfiles-thumb-order\">\n<h3>ADMINFILES_THUMB_ORDER</h3>\n<p>The ordering that will be applied to thumbnails displayed in the\npicker. Expects a tuple of field names, prefixed with <tt>-</tt> to\nindicate reverse ordering, same as <a href=\"http://docs.djangoproject.com/en/dev/ref/models/options/#ordering\" rel=\"nofollow\">\u201cordering\u201d model Meta\nattribute</a>. The default value is <tt><span class=\"pre\">('-upload_date')</span></tt>; thumbnails\nordered by date uploaded, most recent first.</p>\n</div>\n<div id=\"adminfiles-browser-views\">\n<h3>ADMINFILES_BROWSER_VIEWS</h3>\n<p>List of dotted paths to file-browsing views to make available in the\nfilepicker. The default setting includes all the views bundled with\n<tt><span class=\"pre\">django-adminfiles</span></tt>:</p>\n<pre>['adminfiles.views.AllView',\n'adminfiles.views.ImagesView',\n'adminfiles.views.AudioView',\n'adminfiles.views.FilesView',\n'adminfiles.views.FlickrView',\n'adminfiles.views.YouTubeView',\n'adminfiles.views.VimeoView']\n</pre>\n<p>The last three may be disabled despite their inclusion in this setting\nif their <a href=\"#dependencies\" rel=\"nofollow\">dependencies</a> are not satisfied or their required settings\nare not set.</p>\n</div>\n<div id=\"adminfiles-youtube-user\">\n<h3>ADMINFILES_YOUTUBE_USER</h3>\n<p>Required for use of the Youtube video browser.</p>\n</div>\n<div id=\"adminfiles-vimeo-user\">\n<h3>ADMINFILES_VIMEO_USER</h3>\n<p>Required for use of the Vimeo video browser.</p>\n</div>\n<div id=\"adminfiles-vimeo-pages\">\n<h3>ADMINFILES_VIMEO_PAGES</h3>\n<p>The Vimeo API returns 20 videos per page; this setting determines the\nmaximum number of pages to fetch (defaults to 1, Vimeo-imposed maximum of\n3).</p>\n</div>\n<div id=\"adminfiles-flickr-user\">\n<h3>ADMINFILES_FLICKR_USER</h3>\n<p>Required for use of the Flickr photo browser.</p>\n</div>\n<div id=\"adminfiles-flickr-api-key\">\n<h3>ADMINFILES_FLICKR_API_KEY</h3>\n<p>Required for use of the Flickr photo browser.</p>\n</div>\n<div id=\"jquery-url\">\n<h3>JQUERY_URL</h3>\n<p><tt><span class=\"pre\">django-adminfiles</span></tt> requires the jQuery Javascript library.  By default,\n<tt><span class=\"pre\">django-adminfiles</span></tt> uses the latest version of jQuery 1.4 hosted by Google,\nvia the URL <a href=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js\" rel=\"nofollow\">http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js</a>.</p>\n<p>If you wish to use a different version of jQuery, or host it yourself, set the\n<tt>JQUERY_URL</tt> setting. <tt>JQUERY_URL</tt> can be absolute or relative; if relative\nit is relative to <tt>STATIC_URL</tt>. For example:</p>\n<pre>JQUERY_URL = 'jquery.min.js'\n</pre>\n<p>This will use the jQuery available at <tt>STATIC_URL/jquery.min.js</tt>.\nCHANGES\n=======</p>\n</div>\n<div id=\"id1\">\n<h3>1.0.1 (2013.06.15)</h3>\n<ul>\n<li>Fix for non-local file storages. Thanks vitaly4uk.</li>\n<li>Fix MANIFEST.in so static assets are included with release tarball. Thanks\nStillNewb for the report.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0 (2013.06.06)</h3>\n<ul>\n<li>BACKWARDS-INCOMPATIBLE: Django versions prior to 1.4 are no longer tested or supported.</li>\n<li>BACKWARDS-INCOMPATIBLE: Removed the <tt>ADMINFILES_MEDIA_URL</tt> setting, use\n<tt>STATIC_URL</tt> everywhere for static assets. Thanks Rudolph Froger for the\nnudge.</li>\n<li>Updated to most recent sorl-thumbnail. Thanks Svyatoslav Bulbakha.</li>\n<li>Added Russian translation. Thanks Svyatoslav Bulbakha.</li>\n<li>Added Spanish translation. Thanks Andr\u00e9s Reyes Monge.</li>\n<li>Updated to use Django 1.3\u2019s class-based views. Fixes #10. Thanks Andr\u00e9s\nReyes Monge and Ales Zabala Alava.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.5.1 (2011.03.22)</h3>\n<ul>\n<li>Added support for djangoembed as well as django-oembed.</li>\n<li>Added support for multiple pages of Vimeo results via\nADMINFILES_VIMEO_PAGES setting (defaults to 1).</li>\n<li>Added German translation. Thanks Jannis Leidel.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.5.0 (2010.03.09)</h3>\n<ul>\n<li>Added <tt>as</tt> template override keyword option</li>\n<li>Added <tt>render_upload</tt> filter</li>\n<li>Added YouTube, Flickr, Vimeo browsers</li>\n<li>Added OEmbed support</li>\n<li>Added translation hooks and Polish translation: thanks Ludwik Trammer!</li>\n<li>Added support for linking full set of mime-type icons from stdicon.com.</li>\n<li>Made the JS reference-insertion options configurable.</li>\n<li>BACKWARDS-INCOMPATIBLE: default rendering template is now\n<tt>adminfiles/render/default.html</tt> instead of\n<tt>adminfiles/render.html</tt>.  Image-specific rendering should\noverride <tt>adminfiles/render/image/default.html</tt> instead of testing\n<tt>upload.is_image</tt> in default template.</li>\n<li>Added per-mime-type template rendering</li>\n<li>Upgraded to jQuery 1.4</li>\n<li>Fixed bug where YouTube and Flickr links showed up even when disabled.</li>\n<li>Added sync_upload_refs command</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.3.4 (2009.12.03)</h3>\n<ul>\n<li>Fixed over-eager escaping in render_uploads template tag.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.3.3 (2009.12.02)</h3>\n<ul>\n<li>Fixed insertion of slugs for non-image files.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.3.2 (2009.12.02)</h3>\n<ul>\n<li>Fixed setup.py package_data so media and templates are installed from sdist.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.3.1 (2009.11.25)</h3>\n<ul>\n<li>Fixed setup.py so <tt>tests</tt> package is not installed.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.3.0 (2009.11.23)</h3>\n<ul>\n<li>Initial release as <tt><span class=\"pre\">django-adminfiles</span></tt></li>\n<li>Added docs and test suite</li>\n<li>Added reference parsing &amp; rendering, template filter, signal handling</li>\n</ul>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Fix run_tests and short DB names deprecation warnings when running tests\non 1.3.</li>\n<li>Test and document snipshot integration and select dropdown integration.</li>\n<li>Add integration with plain FilePathField or FileField (for unobtrusive use\nwith third-party apps).</li>\n<li>Make URLs in JS portable (by reversing \u201call\u201d view to find out where\nwe\u2019ve been included in the URLconf).</li>\n<li>Link to online demo or video.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 771904, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "e5555ddeb74bd898b4908ea3fc02721f", "sha256": "ffffe8b732b233d3c35a5b7bff5afd61c1742d821bdd097a9237fd7e1282d0fb"}, "downloads": -1, "filename": "django-adminfiles-0.3.0.tar.gz", "has_sig": true, "md5_digest": "e5555ddeb74bd898b4908ea3fc02721f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51204, "upload_time": "2009-11-24T05:00:03", "upload_time_iso_8601": "2009-11-24T05:00:03.291215Z", "url": "https://files.pythonhosted.org/packages/6d/eb/80037ae939c63fde612d80044a43ccef2281d02e6abf710e0e051b82b73d/django-adminfiles-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "3085793cbe54e0dc8ad500cee1ef8556", "sha256": "ae29ee1025cb0ffaf68cf267cdc1900e7bc4cebeb47e49eb56d62d0bbcf5663b"}, "downloads": -1, "filename": "django-adminfiles-0.3.1.tar.gz", "has_sig": true, "md5_digest": "3085793cbe54e0dc8ad500cee1ef8556", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51304, "upload_time": "2009-11-25T06:22:48", "upload_time_iso_8601": "2009-11-25T06:22:48.624419Z", "url": "https://files.pythonhosted.org/packages/e8/fc/8e01e79112623854ddc1dc08fc8b6006b021e06ca5f3f7980ab903f46176/django-adminfiles-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "0ba34426effcbb7025d54ebba09918cb", "sha256": "623681f1ae6dfc02a640f80668bdff0a0f3a1e3b1472e24ed558887dc8d10f48"}, "downloads": -1, "filename": "django-adminfiles-0.3.2.tar.gz", "has_sig": true, "md5_digest": "0ba34426effcbb7025d54ebba09918cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51381, "upload_time": "2009-12-03T04:55:07", "upload_time_iso_8601": "2009-12-03T04:55:07.261996Z", "url": "https://files.pythonhosted.org/packages/60/1d/9ce6d0976a3faef31539527a98566e0e570014acb95f96e784ee2baeed4b/django-adminfiles-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "e0464dab37e55ef5e326679f3b6830ac", "sha256": "5f252561733e9eb0f6e46bdea7e4223cc1bd8626672217cb557dff4b1368e7fe"}, "downloads": -1, "filename": "django-adminfiles-0.3.3.tar.gz", "has_sig": true, "md5_digest": "e0464dab37e55ef5e326679f3b6830ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51400, "upload_time": "2009-12-03T05:17:56", "upload_time_iso_8601": "2009-12-03T05:17:56.204329Z", "url": "https://files.pythonhosted.org/packages/2e/c6/99350f8561d633784f1e3f17691a17d289a25fa11acfd0130e72615fde3b/django-adminfiles-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "d01e6e69731c879b288997225e813fa4", "sha256": "3d00658ef6c0200a46dbcb9bc6e82925c7ad4e96822c80d778fdfeb85797b216"}, "downloads": -1, "filename": "django-adminfiles-0.3.4.tar.gz", "has_sig": true, "md5_digest": "d01e6e69731c879b288997225e813fa4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47333, "upload_time": "2009-12-04T04:07:20", "upload_time_iso_8601": "2009-12-04T04:07:20.669233Z", "url": "https://files.pythonhosted.org/packages/be/ec/e76aaa5a485df62f387a9de27420e5336abc1ba3aaf0295c0cc36c816bbb/django-adminfiles-0.3.4.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "f506da3caa356c67b9f3b57da683f2f5", "sha256": "3903d55a97fe71e2ed6c65b0889c2682117965164c36424e2ed1abb7d0ee41b4"}, "downloads": -1, "filename": "django-adminfiles-0.5.0.tar.gz", "has_sig": true, "md5_digest": "f506da3caa356c67b9f3b57da683f2f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63773, "upload_time": "2010-03-10T05:21:41", "upload_time_iso_8601": "2010-03-10T05:21:41.500656Z", "url": "https://files.pythonhosted.org/packages/15/a0/271efe87843f0ff238eb7c2dd106da55280d7ff56e8bf4b53c7d5b0da580/django-adminfiles-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "fccea12dab82a365a159c14b5be5bf1f", "sha256": "fc154a01ffc63fa7529983e72c584efd8ee9779806c065d2e2407708bc6841cf"}, "downloads": -1, "filename": "django-adminfiles-0.5.1.tar.gz", "has_sig": true, "md5_digest": "fccea12dab82a365a159c14b5be5bf1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64496, "upload_time": "2011-03-22T19:08:02", "upload_time_iso_8601": "2011-03-22T19:08:02.220753Z", "url": "https://files.pythonhosted.org/packages/ef/5b/7b76c5ea9745e1075ea28de63744500f808c5191d14b5e2332cb514d7488/django-adminfiles-0.5.1.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "c6077490c90ee765c3721670bb33bd14", "sha256": "c4ea4307096906ab19a2c4ae6ec4cf04bc4740efc27898d1213689618ce2305a"}, "downloads": -1, "filename": "django-adminfiles-1.0.tar.gz", "has_sig": true, "md5_digest": "c6077490c90ee765c3721670bb33bd14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47019, "upload_time": "2013-06-06T17:21:16", "upload_time_iso_8601": "2013-06-06T17:21:16.101555Z", "url": "https://files.pythonhosted.org/packages/d1/85/7e84f04068339dc107995059de3e0621ab73de7b9a15bb32cc5d470cf1de/django-adminfiles-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "db768791f5870ac867b6ee14bf89b899", "sha256": "9effa56f20b2c280822f42f4ccd268453caf86aed6fa5457f0a026b37b7eb9b8"}, "downloads": -1, "filename": "django-adminfiles-1.0.1.tar.gz", "has_sig": true, "md5_digest": "db768791f5870ac867b6ee14bf89b899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70790, "upload_time": "2013-06-15T20:03:42", "upload_time_iso_8601": "2013-06-15T20:03:42.409087Z", "url": "https://files.pythonhosted.org/packages/06/e6/fb9c27c6688a63a8124c47f93640760e698e9ce1ea01e6f701ff717313c5/django-adminfiles-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "db768791f5870ac867b6ee14bf89b899", "sha256": "9effa56f20b2c280822f42f4ccd268453caf86aed6fa5457f0a026b37b7eb9b8"}, "downloads": -1, "filename": "django-adminfiles-1.0.1.tar.gz", "has_sig": true, "md5_digest": "db768791f5870ac867b6ee14bf89b899", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70790, "upload_time": "2013-06-15T20:03:42", "upload_time_iso_8601": "2013-06-15T20:03:42.409087Z", "url": "https://files.pythonhosted.org/packages/06/e6/fb9c27c6688a63a8124c47f93640760e698e9ce1ea01e6f701ff717313c5/django-adminfiles-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:49 2020"}