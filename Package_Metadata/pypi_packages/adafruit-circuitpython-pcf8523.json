{"info": {"author": "Adafruit Industries", "author_email": "circuitpython@adafruit.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries", "Topic :: System :: Hardware"], "description": "Introduction to Adafruit's PCF8523 Real Time Clock (RTC) Library\n================================================================\n\n.. image:: https://readthedocs.org/projects/adafruit-circuitpython-pcf8523/badge/?version=latest\n    :target: https://circuitpython.readthedocs.io/projects/pcf8523/en/latest/\n    :alt: Documentation Status\n\n.. image :: https://img.shields.io/discord/327254708534116352.svg\n    :target: https://discord.gg/nBQh6qu\n    :alt: Discord\n\n.. image:: https://github.com/adafruit/Adafruit_CircuitPython_PCF8523/workflows/Build%20CI/badge.svg\n    :target: https://github.com/adafruit/Adafruit_CircuitPython_PCF8523/actions/\n    :alt: Build Status\n\nThis is a great battery-backed real time clock (RTC) that allows your\nmicrocontroller project to keep track of time even if it is reprogrammed,\nor if the power is lost. Perfect for datalogging, clock-building, time\nstamping, timers and alarms, etc. Equipped with PCF8523 RTC - it can\nrun from 3.3V or 5V power & logic!\n\nThe PCF8523 is simple and inexpensive but not a high precision device.\nIt may lose or gain up to two seconds a day. For a high-precision,\ntemperature compensated alternative, please check out the\n`DS3231 precision RTC. <https://www.adafruit.com/products/3013>`_\nIf you need a DS1307 for compatibility reasons, check out our\n`DS1307 RTC breakout <https://www.adafruit.com/products/3296>`_.\n\n.. image:: _static/3295-00.jpg\n    :alt: PCF8523 Breakout Board\n\nDependencies\n=============\n\nThis driver depends on the `Register <https://github.com/adafruit/Adafruit_CircuitPython_Register>`_\nand `Bus Device <https://github.com/adafruit/Adafruit_CircuitPython_BusDevice>`_\nlibraries. Please ensure they are also available on the CircuitPython filesystem.\nThis is easily achieved by downloading\n`a library and driver bundle <https://github.com/adafruit/Adafruit_CircuitPython_Bundle>`_.\n\nInstalling from PyPI\n====================\nOn supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally `from\nPyPI <https://pypi.org/project/adafruit-circuitpython-pcf8523/>`_. To install for current user:\n\n.. code-block:: shell\n\n    pip3 install adafruit-circuitpython-pcf8523\n\nTo install system-wide (this may be required in some cases):\n\n.. code-block:: shell\n\n    sudo pip3 install adafruit-circuitpython-pcf8523\n\nTo install in a virtual environment in your current project:\n\n.. code-block:: shell\n\n    mkdir project-name && cd project-name\n    python3 -m venv .env\n    source .env/bin/activate\n    pip3 install adafruit-circuitpython-pcf8523\n\n\nUsage Notes\n===========\n\nBasics\n------\n\nOf course, you must import the library to use it:\n\n.. code:: python\n\n    import busio\n    import adafruit_pcf8523\n    import time\n\nAll the Adafruit RTC libraries take an instantiated and active I2C object\n(from the `busio` library) as an argument to their constructor. The way to\ncreate an I2C object depends on the board you are using. For boards with labeled\nSCL and SDA pins, you can:\n\n.. code:: python\n\n    from board import *\n\nYou can also use pins defined by the onboard `microcontroller` through the\n`microcontroller.pin` module.\n\nNow, to initialize the I2C bus:\n\n.. code:: python\n\n    i2c_bus = busio.I2C(SCL, SDA)\n\nOnce you have created the I2C interface object, you can use it to instantiate\nthe RTC object:\n\n.. code:: python\n\n    rtc = adafruit_pcf8523.PCF8523(i2c_bus)\n\nDate and time\n-------------\n\nTo set the time, you need to set datetime` to a `time.struct_time` object:\n\n.. code:: python\n\n    rtc.datetime = time.struct_time((2017,1,9,15,6,0,0,9,-1))\n\nAfter the RTC is set, you retrieve the time by reading the `datetime`\nattribute and access the standard attributes of a struct_time such as ``tm_year``,\n``tm_hour`` and ``tm_min``.\n\n.. code:: python\n\n    t = rtc.datetime\n    print(t)\n    print(t.tm_hour, t.tm_min)\n\nAlarm\n-----\n\nTo set the time, you need to set `alarm` to a tuple with a `time.struct_time`\nobject and string representing the frequency such as \"hourly\":\n\n.. code:: python\n\n    rtc.alarm = (time.struct_time((2017,1,9,15,6,0,0,9,-1)), \"daily\")\n\nAfter the RTC is set, you retrieve the alarm status by reading the\n`alarm_status` attribute. Once True, set it back to False to reset.\n\n.. code:: python\n\n    if rtc.alarm_status:\n        print(\"wake up!\")\n        rtc.alarm_status = False\n\nContributing\n============\n\nContributions are welcome! Please read our `Code of Conduct\n<https://github.com/adafruit/Adafruit_CircuitPython_PCF8523/blob/master/CODE_OF_CONDUCT.md>`_\nbefore contributing to help this project stay welcoming.\n\nDocumentation\n=============\n\nFor information on building library documentation, please check out `this guide <https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library/sharing-our-docs-on-readthedocs#sphinx-5-1>`_.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adafruit/Adafruit_CircuitPython_PCF8523", "keywords": "adafruit pcf8523 real time clock rtc breakout hardware micropython circuitpython", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "adafruit-circuitpython-pcf8523", "package_url": "https://pypi.org/project/adafruit-circuitpython-pcf8523/", "platform": "", "project_url": "https://pypi.org/project/adafruit-circuitpython-pcf8523/", "project_urls": {"Homepage": "https://github.com/adafruit/Adafruit_CircuitPython_PCF8523"}, "release_url": "https://pypi.org/project/adafruit-circuitpython-pcf8523/1.4.1/", "requires_dist": null, "requires_python": "", "summary": "CircuitPython library for PCF8523 real time clock.", "version": "1.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction-to-adafruit-s-pcf8523-real-time-clock-rtc-library\">\n<h2>Introduction to Adafruit\u2019s PCF8523 Real Time Clock (RTC) Library</h2>\n<a href=\"https://circuitpython.readthedocs.io/projects/pcf8523/en/latest/\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b36ed07d6aa4e3e544ef6f61cddca30080a45921/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f61646166727569742d63697263756974707974686f6e2d706366383532332f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://discord.gg/nBQh6qu\" rel=\"nofollow\"><img alt=\"Discord\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e2973e7de9caf359680953316fa3b541f702086c/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3332373235343730383533343131363335322e737667\"></a>\n<a href=\"https://github.com/adafruit/Adafruit_CircuitPython_PCF8523/actions/\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88f79f3eed0fb5825ea2aa01f7bcd0d8d6bfa1f3/68747470733a2f2f6769746875622e636f6d2f61646166727569742f41646166727569745f43697263756974507974686f6e5f504346383532332f776f726b666c6f77732f4275696c6425323043492f62616467652e737667\"></a>\n<p>This is a great battery-backed real time clock (RTC) that allows your\nmicrocontroller project to keep track of time even if it is reprogrammed,\nor if the power is lost. Perfect for datalogging, clock-building, time\nstamping, timers and alarms, etc. Equipped with PCF8523 RTC - it can\nrun from 3.3V or 5V power &amp; logic!</p>\n<p>The PCF8523 is simple and inexpensive but not a high precision device.\nIt may lose or gain up to two seconds a day. For a high-precision,\ntemperature compensated alternative, please check out the\n<a href=\"https://www.adafruit.com/products/3013\" rel=\"nofollow\">DS3231 precision RTC.</a>\nIf you need a DS1307 for compatibility reasons, check out our\n<a href=\"https://www.adafruit.com/products/3296\" rel=\"nofollow\">DS1307 RTC breakout</a>.</p>\n<img alt=\"PCF8523 Breakout Board\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a9f2e3a47c1720bde261f6b7c28f2c63a311438/5f7374617469632f333239352d30302e6a7067\">\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>This driver depends on the <a href=\"https://github.com/adafruit/Adafruit_CircuitPython_Register\" rel=\"nofollow\">Register</a>\nand <a href=\"https://github.com/adafruit/Adafruit_CircuitPython_BusDevice\" rel=\"nofollow\">Bus Device</a>\nlibraries. Please ensure they are also available on the CircuitPython filesystem.\nThis is easily achieved by downloading\n<a href=\"https://github.com/adafruit/Adafruit_CircuitPython_Bundle\" rel=\"nofollow\">a library and driver bundle</a>.</p>\n</div>\n<div id=\"installing-from-pypi\">\n<h2>Installing from PyPI</h2>\n<p>On supported GNU/Linux systems like the Raspberry Pi, you can install the driver locally <a href=\"https://pypi.org/project/adafruit-circuitpython-pcf8523/\" rel=\"nofollow\">from\nPyPI</a>. To install for current user:</p>\n<pre>pip3 install adafruit-circuitpython-pcf8523\n</pre>\n<p>To install system-wide (this may be required in some cases):</p>\n<pre>sudo pip3 install adafruit-circuitpython-pcf8523\n</pre>\n<p>To install in a virtual environment in your current project:</p>\n<pre>mkdir project-name <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> project-name\npython3 -m venv .env\n<span class=\"nb\">source</span> .env/bin/activate\npip3 install adafruit-circuitpython-pcf8523\n</pre>\n</div>\n<div id=\"usage-notes\">\n<h2>Usage Notes</h2>\n<div id=\"basics\">\n<h3>Basics</h3>\n<p>Of course, you must import the library to use it:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">busio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">adafruit_pcf8523</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n</pre>\n<p>All the Adafruit RTC libraries take an instantiated and active I2C object\n(from the <cite>busio</cite> library) as an argument to their constructor. The way to\ncreate an I2C object depends on the board you are using. For boards with labeled\nSCL and SDA pins, you can:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">board</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n</pre>\n<p>You can also use pins defined by the onboard <cite>microcontroller</cite> through the\n<cite>microcontroller.pin</cite> module.</p>\n<p>Now, to initialize the I2C bus:</p>\n<pre><span class=\"n\">i2c_bus</span> <span class=\"o\">=</span> <span class=\"n\">busio</span><span class=\"o\">.</span><span class=\"n\">I2C</span><span class=\"p\">(</span><span class=\"n\">SCL</span><span class=\"p\">,</span> <span class=\"n\">SDA</span><span class=\"p\">)</span>\n</pre>\n<p>Once you have created the I2C interface object, you can use it to instantiate\nthe RTC object:</p>\n<pre><span class=\"n\">rtc</span> <span class=\"o\">=</span> <span class=\"n\">adafruit_pcf8523</span><span class=\"o\">.</span><span class=\"n\">PCF8523</span><span class=\"p\">(</span><span class=\"n\">i2c_bus</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"date-and-time\">\n<h3>Date and time</h3>\n<p>To set the time, you need to set datetime` to a <cite>time.struct_time</cite> object:</p>\n<pre><span class=\"n\">rtc</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">struct_time</span><span class=\"p\">((</span><span class=\"mi\">2017</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre>\n<p>After the RTC is set, you retrieve the time by reading the <cite>datetime</cite>\nattribute and access the standard attributes of a struct_time such as <tt>tm_year</tt>,\n<tt>tm_hour</tt> and <tt>tm_min</tt>.</p>\n<pre><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">rtc</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tm_hour</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">tm_min</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"alarm\">\n<h3>Alarm</h3>\n<p>To set the time, you need to set <cite>alarm</cite> to a tuple with a <cite>time.struct_time</cite>\nobject and string representing the frequency such as \u201chourly\u201d:</p>\n<pre><span class=\"n\">rtc</span><span class=\"o\">.</span><span class=\"n\">alarm</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">struct_time</span><span class=\"p\">((</span><span class=\"mi\">2017</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"s2\">\"daily\"</span><span class=\"p\">)</span>\n</pre>\n<p>After the RTC is set, you retrieve the alarm status by reading the\n<cite>alarm_status</cite> attribute. Once True, set it back to False to reset.</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">rtc</span><span class=\"o\">.</span><span class=\"n\">alarm_status</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"wake up!\"</span><span class=\"p\">)</span>\n    <span class=\"n\">rtc</span><span class=\"o\">.</span><span class=\"n\">alarm_status</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are welcome! Please read our <a href=\"https://github.com/adafruit/Adafruit_CircuitPython_PCF8523/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a>\nbefore contributing to help this project stay welcoming.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>For information on building library documentation, please check out <a href=\"https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library/sharing-our-docs-on-readthedocs#sphinx-5-1\" rel=\"nofollow\">this guide</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 6995258, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "8211593a75329c1e464209e3615e2ed6", "sha256": "c926028f50276c203e312b760535576ce4e7554a4329c2a9d1d518559b27f596"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.2.0.tar.gz", "has_sig": false, "md5_digest": "8211593a75329c1e464209e3615e2ed6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 261884, "upload_time": "2018-08-07T23:41:01", "upload_time_iso_8601": "2018-08-07T23:41:01.376293Z", "url": "https://files.pythonhosted.org/packages/44/46/4976e7a85f5a8989c9c246ef87e2b4e9915269dde47c324ffaae3e69d989/adafruit-circuitpython-pcf8523-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "d1352c8b8a895fd3ae332572743a8484", "sha256": "4a38645d94e1b9cd41dc2f7ede924fd4a8eb9296895a40f3dd20c51c00d3807d"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.2.1.tar.gz", "has_sig": false, "md5_digest": "d1352c8b8a895fd3ae332572743a8484", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 261879, "upload_time": "2018-11-12T17:38:48", "upload_time_iso_8601": "2018-11-12T17:38:48.127455Z", "url": "https://files.pythonhosted.org/packages/9a/26/ccf751c65c7085351a587c2dba4c36e534dde3ce55b0396f78086715b952/adafruit-circuitpython-pcf8523-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "b1431096b485983c0ec1c6e0ffdec1f9", "sha256": "e621654903897a8311049c99f083dcabe3662d5b8b939c7b337cd3aa46d97d37"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.2.2.tar.gz", "has_sig": false, "md5_digest": "b1431096b485983c0ec1c6e0ffdec1f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 259845, "upload_time": "2019-01-15T03:12:32", "upload_time_iso_8601": "2019-01-15T03:12:32.768397Z", "url": "https://files.pythonhosted.org/packages/1e/99/0b85eba1c299649715235f06094463f6323d111ddf197afb4f8042bb2e4e/adafruit-circuitpython-pcf8523-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "e4cd57afaab4d6e563df7d734f3e737c", "sha256": "e746ec4d83d14e7564e350277dd732c4283b76e28c7e4a159a4c7d38d5089be1"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.2.3.tar.gz", "has_sig": false, "md5_digest": "e4cd57afaab4d6e563df7d734f3e737c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 260741, "upload_time": "2019-03-26T17:16:17", "upload_time_iso_8601": "2019-03-26T17:16:17.373529Z", "url": "https://files.pythonhosted.org/packages/ca/d1/1c214d73f4219d7f063e88cf6a8cdde41cc74c9947706f119ae89d0088a1/adafruit-circuitpython-pcf8523-1.2.3.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "d5c96ddb9c1af29762120cfb87277619", "sha256": "88efe8bd83b3eef73db5839b7de5778ec4e25a3c5a7a051b90b6f9c5e8a8d8c6"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.3.0.tar.gz", "has_sig": false, "md5_digest": "d5c96ddb9c1af29762120cfb87277619", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 260743, "upload_time": "2019-08-27T19:09:14", "upload_time_iso_8601": "2019-08-27T19:09:14.241939Z", "url": "https://files.pythonhosted.org/packages/cf/33/32b49a2b0b7f92bec72af5bb9f6ec62cfad4502a79028bee3e93dd8e3f78/adafruit-circuitpython-pcf8523-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "6f932733c027963930ce14d079cc70aa", "sha256": "0944b30b26adb862c06a04be4c8e476eae7115f6779511ff5969e41333924050"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.3.1.tar.gz", "has_sig": false, "md5_digest": "6f932733c027963930ce14d079cc70aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262402, "upload_time": "2020-01-23T02:18:12", "upload_time_iso_8601": "2020-01-23T02:18:12.490595Z", "url": "https://files.pythonhosted.org/packages/f5/8f/1a5a6cd0079c6f0c4ce7200a34d1b958c0a9e1cbaaab2611042d6f33129f/adafruit-circuitpython-pcf8523-1.3.1.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "d874f9f79389ceb1938f93436b3628eb", "sha256": "a77725fe39315852e3fdf570a30a58bd53024031086859334b3362f294567651"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.4.0.tar.gz", "has_sig": false, "md5_digest": "d874f9f79389ceb1938f93436b3628eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262577, "upload_time": "2020-03-20T15:22:16", "upload_time_iso_8601": "2020-03-20T15:22:16.214688Z", "url": "https://files.pythonhosted.org/packages/8f/75/df368d7f2a5c02d85a8858b27507d891dd95933b719782dfe9fad49e68e5/adafruit-circuitpython-pcf8523-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "b87f72ddf3d4f450171fbc55f58a819e", "sha256": "ffb0b4d50de9b7abe0b24136fc6a8bac5e0de78ba97128b4ebf3fbb9aeb77f76"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.4.1.tar.gz", "has_sig": false, "md5_digest": "b87f72ddf3d4f450171fbc55f58a819e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262625, "upload_time": "2020-04-10T17:47:06", "upload_time_iso_8601": "2020-04-10T17:47:06.605303Z", "url": "https://files.pythonhosted.org/packages/a4/1f/00b7c03f090707e409568052f510fe9695bf72bf8ec67ec16d855c525f2c/adafruit-circuitpython-pcf8523-1.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b87f72ddf3d4f450171fbc55f58a819e", "sha256": "ffb0b4d50de9b7abe0b24136fc6a8bac5e0de78ba97128b4ebf3fbb9aeb77f76"}, "downloads": -1, "filename": "adafruit-circuitpython-pcf8523-1.4.1.tar.gz", "has_sig": false, "md5_digest": "b87f72ddf3d4f450171fbc55f58a819e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 262625, "upload_time": "2020-04-10T17:47:06", "upload_time_iso_8601": "2020-04-10T17:47:06.605303Z", "url": "https://files.pythonhosted.org/packages/a4/1f/00b7c03f090707e409568052f510fe9695bf72bf8ec67ec16d855c525f2c/adafruit-circuitpython-pcf8523-1.4.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:56 2020"}