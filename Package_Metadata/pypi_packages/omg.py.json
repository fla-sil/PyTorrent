{"info": {"author": "Asyncy", "author_email": "me@kennethreitz.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# omg.py\n\nA micro-framework for the excellent **[Open Microservices Guide](https://microservices.guide/)**, for suppportive code written in Python 3.6+.\n\n**Note**: this is pre-release software, and is subject to improvement. Contributions are welcome! This framework is being developed for [other languages](https://github.com/microservices?utf8=%E2%9C%93&q=omg.*&type=&language=), as well. If you'd like to help, [let us know](kenneth@storyscript.io)!\n\n# Intended / Example Usage\n\n```shell\n$ cat service.py\n```\n```python\nimport omg\nfrom uuid import uuid4\n\nservice = omg.Microservice(name='uuid')\n\n@service.register()\ndef new(prefix: str) -> str:\n    \"\"\"Generates a UUID, with a given prefix.\"\"\"\n    return f'{prefix}{uuid4().hex}'\n\nif __name__ == '__main__':\n    service.serve(ensure=True)\n```\n\n`register` takes some optional arguments: `name` and `path`. You can also call `service.add(f=new)`, instead.\n\nIf not available on disk, the required `Dockerfile` and `microservice.yml` files will automatically be generated, for your application:\n\n```shell\n$ cat microservice.yml\nactions:\n  new:\n    help: Generates a UUID, with a given prefix.\n    arguments:\n      prefix:\n        in: query\n        required: true\n        type: string\n    http:\n      method: get\n      path: /new\n      port: 8080\n    output:\n      type: string\nlifecycle:\n  startup:\n    command:\n    - python3\n    - /app/service.py\nomg: 1\n\n```\n\n```shell\n$ cat Dockerfile\nFROM kennethreitz/pipenv\nCOPY . /app\nCMD [\"python3\", \"service.py\"]\n```\n\nNow, run your microservice!\n\n```shell\n$ python service.py\n2019-05-09 14:45:39,342 - micro - DEBUG - Initiating 'uuid' service.\n2019-05-09 14:45:39,344 - micro - DEBUG - Registering Flask endpoint: '/new'\n2019-05-09 14:45:39,344 - micro - DEBUG - Dockerfile './Dockerfile' already exists!\n2019-05-09 14:45:39,345 - micro - DEBUG - Microservice Manifest './microservice.yml' already exists!\n2019-05-09 14:45:39,346 - micro - INFO - Serving on: '*:8080'\n```\n\nThis will spawn a Flask application (using the production-ready [waitress web server](https://docs.pylonsproject.org/projects/waitress/en/stable/)), preconfigured to serve the masses!\n\nOr, use the [omg-cli](https://github.com/microservices/omg-cli):\n\n```shell\n$ omg run new -a prefix='user-'\n\u2026\n```\n\n## Installation\n\n```shell\n$ pip install omg.py\n```\n\n**P.S.** Do provide feedback, if you desire! :)\n\n\u2728 \ud83c\udf70 \u2728\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/microservices/omg.py", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "omg.py", "package_url": "https://pypi.org/project/omg.py/", "platform": "", "project_url": "https://pypi.org/project/omg.py/", "project_urls": {"Homepage": "https://github.com/microservices/omg.py"}, "release_url": "https://pypi.org/project/omg.py/0.3.3/", "requires_dist": ["pyyaml", "Flask", "waitress", "setproctitle"], "requires_python": ">=3.6.0", "summary": "A micro-framework for the OMG, and code written in Python 3.6+.", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>omg.py</h1>\n<p>A micro-framework for the excellent <strong><a href=\"https://microservices.guide/\" rel=\"nofollow\">Open Microservices Guide</a></strong>, for suppportive code written in Python 3.6+.</p>\n<p><strong>Note</strong>: this is pre-release software, and is subject to improvement. Contributions are welcome! This framework is being developed for <a href=\"https://github.com/microservices?utf8=%E2%9C%93&amp;q=omg.*&amp;type=&amp;language=\" rel=\"nofollow\">other languages</a>, as well. If you'd like to help, <a href=\"kenneth@storyscript.io\" rel=\"nofollow\">let us know</a>!</p>\n<h1>Intended / Example Usage</h1>\n<pre>$ cat service.py\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">omg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">uuid</span> <span class=\"kn\">import</span> <span class=\"n\">uuid4</span>\n\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">omg</span><span class=\"o\">.</span><span class=\"n\">Microservice</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'uuid'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@service</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Generates a UUID, with a given prefix.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">prefix</span><span class=\"si\">}{</span><span class=\"n\">uuid4</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">hex</span><span class=\"si\">}</span><span class=\"s1\">'</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">serve</span><span class=\"p\">(</span><span class=\"n\">ensure</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><code>register</code> takes some optional arguments: <code>name</code> and <code>path</code>. You can also call <code>service.add(f=new)</code>, instead.</p>\n<p>If not available on disk, the required <code>Dockerfile</code> and <code>microservice.yml</code> files will automatically be generated, for your application:</p>\n<pre>$ cat microservice.yml\nactions:\n  new:\n    help: Generates a UUID, with a given prefix.\n    arguments:\n      prefix:\n        in: query\n        required: <span class=\"nb\">true</span>\n        type: string\n    http:\n      method: get\n      path: /new\n      port: <span class=\"m\">8080</span>\n    output:\n      type: string\nlifecycle:\n  startup:\n    command:\n    - python3\n    - /app/service.py\nomg: <span class=\"m\">1</span>\n</pre>\n<pre>$ cat Dockerfile\nFROM kennethreitz/pipenv\nCOPY . /app\nCMD <span class=\"o\">[</span><span class=\"s2\">\"python3\"</span>, <span class=\"s2\">\"service.py\"</span><span class=\"o\">]</span>\n</pre>\n<p>Now, run your microservice!</p>\n<pre>$ python service.py\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,342 - micro - DEBUG - Initiating <span class=\"s1\">'uuid'</span> service.\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,344 - micro - DEBUG - Registering Flask endpoint: <span class=\"s1\">'/new'</span>\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,344 - micro - DEBUG - Dockerfile <span class=\"s1\">'./Dockerfile'</span> already exists!\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,345 - micro - DEBUG - Microservice Manifest <span class=\"s1\">'./microservice.yml'</span> already exists!\n<span class=\"m\">2019</span>-05-09 <span class=\"m\">14</span>:45:39,346 - micro - INFO - Serving on: <span class=\"s1\">'*:8080'</span>\n</pre>\n<p>This will spawn a Flask application (using the production-ready <a href=\"https://docs.pylonsproject.org/projects/waitress/en/stable/\" rel=\"nofollow\">waitress web server</a>), preconfigured to serve the masses!</p>\n<p>Or, use the <a href=\"https://github.com/microservices/omg-cli\" rel=\"nofollow\">omg-cli</a>:</p>\n<pre>$ omg run new -a <span class=\"nv\">prefix</span><span class=\"o\">=</span><span class=\"s1\">'user-'</span>\n\u2026\n</pre>\n<h2>Installation</h2>\n<pre>$ pip install omg.py\n</pre>\n<p><strong>P.S.</strong> Do provide feedback, if you desire! :)</p>\n<p>\u2728 \ud83c\udf70 \u2728</p>\n\n          </div>"}, "last_serial": 5262669, "releases": {"0.3.3": [{"comment_text": "", "digests": {"md5": "e402058f6ed3d92ed03ad72ce4403fd5", "sha256": "e424f58af7333b7fa62c2c9e22a922def75dbc54df2a7e04cde28ec8e82b258d"}, "downloads": -1, "filename": "omg.py-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e402058f6ed3d92ed03ad72ce4403fd5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8137, "upload_time": "2019-05-13T14:41:56", "upload_time_iso_8601": "2019-05-13T14:41:56.940059Z", "url": "https://files.pythonhosted.org/packages/42/93/3f3a2082a90fd8c9394c9cf99c16d320dda92be733abdcfebe9ece58275f/omg.py-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10a0cc65a4da70b56c982d812fa221d6", "sha256": "2f5d7e6a6d4dded47ca021033353f41ae2cfb49c089f57505eb8fbaa2db6d545"}, "downloads": -1, "filename": "omg.py-0.3.3.tar.gz", "has_sig": false, "md5_digest": "10a0cc65a4da70b56c982d812fa221d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6857, "upload_time": "2019-05-13T14:41:58", "upload_time_iso_8601": "2019-05-13T14:41:58.926555Z", "url": "https://files.pythonhosted.org/packages/f6/b3/117c13acc0452b676e31ee30a562247290afa289459a0aae356be8b47c13/omg.py-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e402058f6ed3d92ed03ad72ce4403fd5", "sha256": "e424f58af7333b7fa62c2c9e22a922def75dbc54df2a7e04cde28ec8e82b258d"}, "downloads": -1, "filename": "omg.py-0.3.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e402058f6ed3d92ed03ad72ce4403fd5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8137, "upload_time": "2019-05-13T14:41:56", "upload_time_iso_8601": "2019-05-13T14:41:56.940059Z", "url": "https://files.pythonhosted.org/packages/42/93/3f3a2082a90fd8c9394c9cf99c16d320dda92be733abdcfebe9ece58275f/omg.py-0.3.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10a0cc65a4da70b56c982d812fa221d6", "sha256": "2f5d7e6a6d4dded47ca021033353f41ae2cfb49c089f57505eb8fbaa2db6d545"}, "downloads": -1, "filename": "omg.py-0.3.3.tar.gz", "has_sig": false, "md5_digest": "10a0cc65a4da70b56c982d812fa221d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 6857, "upload_time": "2019-05-13T14:41:58", "upload_time_iso_8601": "2019-05-13T14:41:58.926555Z", "url": "https://files.pythonhosted.org/packages/f6/b3/117c13acc0452b676e31ee30a562247290afa289459a0aae356be8b47c13/omg.py-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:31 2020"}