{"info": {"author": "Stephan Seitz", "author_email": "stephan.seitz@yahoo.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "===========\nfarneback3d\n===========\n\n.. image:: https://badge.fury.io/py/farneback3d.svg\n    :target: https://badge.fury.io/py/farneback3d\n.. image:: https://travis-ci.org/theHamsta/farnback3d.svg?branch=master\n    :target: https://travis-ci.org/theHamsta/farnback3d\n\n\nA CUDA implementation of the Farneback optical flow algorithm [1]_ for the calculation of dense volumetric flow fields. Since this algorithm is based on the approximation of the signal by polynomial expansion it is especial suited for the motion estimation in smooth signals without clear edges.\n\nTo know more about the implementation, have a look on `this OpenCV class <https://docs.opencv.org/3.3.0/de/d9e/classcv_1_1FarnebackOpticalFlow.html>`_ that was used as a template for this implementation.\n\nDevelopment takes place on `Github <https://github.com/theHamsta/farneback3d>`_.\n\nPython interface\n================\n\nThe project uses `pycuda <https://github.com/inducer/pycuda>`_ to provide a pure-python package available on PyPi\n\n.. code-block:: bash\n\n    pip install farneback3d\n\nUsage:\n\n.. code-block:: python\n\n    import farneback3d\n\n    ... # create some numpy volumes vol0 and vol1 (can also be pycuda GPUArrays) \n\n    # set parameters for optical flow (parameters have the same meaning as in the OpenCV implementation)\n    optflow = farneback3d.Farneback(\n            pyr_scale=0.8,         # Scaling between multi-scale pyramid levels\n            levels=6,              # Number of multi-scale levels\n            num_iterations=5,      # Iterations on each multi-scale level\n            winsize=9,             # Window size for Gaussian filtering of polynomial coefficients\n            poly_n=5,              # Size of window for weighted least-square estimation of polynomial coefficients\n            poly_sigma=1.2,        # Sigma for Gaussian weighting of least-square estimation of polynomial coefficients\n        )\n\n    # calculate frame-to-frame flow between vol0 and vol1\n    flow = optflow.calc_flow(vol0, vol1)\n\n\nC++ interface\n=============\n\nTo be implemented...\n\n\nFuture plans\n=============\n\nThe current implementation uses a naive approach to perform the necessary convolutions.\nThe algorithm could be sped up drastically by performing separable convolutions along each coordinate axis.\n\nReferences\n==========\n\n.. [1] Farneb\u00e4ck, Gunnar. \"Two-frame motion estimation based on polynomial expansion.\" Scandinavian conference on Image analysis. Springer, Berlin, Heidelberg, 2003.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/theHamsta", "keywords": "", "license": "GPL v3", "maintainer": "", "maintainer_email": "", "name": "farneback3d", "package_url": "https://pypi.org/project/farneback3d/", "platform": "", "project_url": "https://pypi.org/project/farneback3d/", "project_urls": {"Homepage": "https://github.com/theHamsta"}, "release_url": "https://pypi.org/project/farneback3d/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "CUDA-accelerated volumetric optical flow estimation using the Farneback algorithm", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/farneback3d\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/farneback3d.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c874f370b208417d0421c3c0f676605d068954bd/68747470733a2f2f62616467652e667572792e696f2f70792f6661726e656261636b33642e737667\"></a>\n<a href=\"https://travis-ci.org/theHamsta/farnback3d\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/theHamsta/farnback3d.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa7224288a1532c30e676f2d6618668dd0513d7d/68747470733a2f2f7472617669732d63692e6f72672f74686548616d7374612f6661726e6261636b33642e7376673f6272616e63683d6d6173746572\"></a>\n<p>A CUDA implementation of the Farneback optical flow algorithm <a href=\"#id2\" id=\"id1\" rel=\"nofollow\">[1]</a> for the calculation of dense volumetric flow fields. Since this algorithm is based on the approximation of the signal by polynomial expansion it is especial suited for the motion estimation in smooth signals without clear edges.</p>\n<p>To know more about the implementation, have a look on <a href=\"https://docs.opencv.org/3.3.0/de/d9e/classcv_1_1FarnebackOpticalFlow.html\" rel=\"nofollow\">this OpenCV class</a> that was used as a template for this implementation.</p>\n<p>Development takes place on <a href=\"https://github.com/theHamsta/farneback3d\" rel=\"nofollow\">Github</a>.</p>\n<div id=\"python-interface\">\n<h2>Python interface</h2>\n<p>The project uses <a href=\"https://github.com/inducer/pycuda\" rel=\"nofollow\">pycuda</a> to provide a pure-python package available on PyPi</p>\n<pre>pip install farneback3d\n</pre>\n<p>Usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">farneback3d</span>\n\n<span class=\"o\">...</span> <span class=\"c1\"># create some numpy volumes vol0 and vol1 (can also be pycuda GPUArrays)</span>\n\n<span class=\"c1\"># set parameters for optical flow (parameters have the same meaning as in the OpenCV implementation)</span>\n<span class=\"n\">optflow</span> <span class=\"o\">=</span> <span class=\"n\">farneback3d</span><span class=\"o\">.</span><span class=\"n\">Farneback</span><span class=\"p\">(</span>\n        <span class=\"n\">pyr_scale</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span>         <span class=\"c1\"># Scaling between multi-scale pyramid levels</span>\n        <span class=\"n\">levels</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span>              <span class=\"c1\"># Number of multi-scale levels</span>\n        <span class=\"n\">num_iterations</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>      <span class=\"c1\"># Iterations on each multi-scale level</span>\n        <span class=\"n\">winsize</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">,</span>             <span class=\"c1\"># Window size for Gaussian filtering of polynomial coefficients</span>\n        <span class=\"n\">poly_n</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>              <span class=\"c1\"># Size of window for weighted least-square estimation of polynomial coefficients</span>\n        <span class=\"n\">poly_sigma</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">,</span>        <span class=\"c1\"># Sigma for Gaussian weighting of least-square estimation of polynomial coefficients</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c1\"># calculate frame-to-frame flow between vol0 and vol1</span>\n<span class=\"n\">flow</span> <span class=\"o\">=</span> <span class=\"n\">optflow</span><span class=\"o\">.</span><span class=\"n\">calc_flow</span><span class=\"p\">(</span><span class=\"n\">vol0</span><span class=\"p\">,</span> <span class=\"n\">vol1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"c-interface\">\n<h2>C++ interface</h2>\n<p>To be implemented\u2026</p>\n</div>\n<div id=\"future-plans\">\n<h2>Future plans</h2>\n<p>The current implementation uses a naive approach to perform the necessary convolutions.\nThe algorithm could be sped up drastically by performing separable convolutions along each coordinate axis.</p>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<table id=\"id2\">\n<col><col>\n<tbody>\n<tr><td><a href=\"#id1\" rel=\"nofollow\">[1]</a></td><td>Farneb\u00e4ck, Gunnar. \u201cTwo-frame motion estimation based on polynomial expansion.\u201d Scandinavian conference on Image analysis. Springer, Berlin, Heidelberg, 2003.</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 4720709, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2d1908259e535369e5df1c6629b8aa19", "sha256": "aecf7a2fc0e42082a3f72cdb0b3026a602f77c65569de54de2a8bf4ce4fbafb7"}, "downloads": -1, "filename": "farneback3d-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2d1908259e535369e5df1c6629b8aa19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31519, "upload_time": "2018-03-12T11:39:29", "upload_time_iso_8601": "2018-03-12T11:39:29.844939Z", "url": "https://files.pythonhosted.org/packages/3e/f9/629feb2edfe8cd8324e4117d0d318a533adecbc36b6df39183bf1874aefc/farneback3d-0.0.1.tar.gz", "yanked": false}], "0.0.1.1": [{"comment_text": "", "digests": {"md5": "7bd32f6f55f816f3c70445721749c6e8", "sha256": "8e432bcf2389144089a48018bff70d240f339af0ebbae78ddc764adce273ab0d"}, "downloads": -1, "filename": "farneback3d-0.0.1.1.tar.gz", "has_sig": false, "md5_digest": "7bd32f6f55f816f3c70445721749c6e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31560, "upload_time": "2018-03-12T11:50:14", "upload_time_iso_8601": "2018-03-12T11:50:14.757866Z", "url": "https://files.pythonhosted.org/packages/11/12/f51a205fa4d5991487caa549186c31e03a86c874d10f67c3fc0df0bde7cd/farneback3d-0.0.1.1.tar.gz", "yanked": false}], "0.0.1.2": [{"comment_text": "", "digests": {"md5": "35166386e84bc82f80e156b4e8004240", "sha256": "fc4dbfb096f1407dad4ce2a95e9dce7ebe9b5694dde2d6081f16293388e86b35"}, "downloads": -1, "filename": "farneback3d-0.0.1.2.tar.gz", "has_sig": false, "md5_digest": "35166386e84bc82f80e156b4e8004240", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31536, "upload_time": "2018-03-12T14:25:17", "upload_time_iso_8601": "2018-03-12T14:25:17.973090Z", "url": "https://files.pythonhosted.org/packages/45/e5/844787a884b7cb800bf153fba6d826f6e9f8efa98a826c327832f0260b36/farneback3d-0.0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "bd144929d78f3f1feafd600e25589881", "sha256": "09869b7aeee27b7f8429496877c3d4ffcda325311887eda1aa95460910920572"}, "downloads": -1, "filename": "farneback3d-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bd144929d78f3f1feafd600e25589881", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33420, "upload_time": "2019-01-21T08:09:13", "upload_time_iso_8601": "2019-01-21T08:09:13.438645Z", "url": "https://files.pythonhosted.org/packages/23/13/6e737ef04cdde92849ed211fbe3e25640bf42ffb8f562eab39165664f5a8/farneback3d-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bd144929d78f3f1feafd600e25589881", "sha256": "09869b7aeee27b7f8429496877c3d4ffcda325311887eda1aa95460910920572"}, "downloads": -1, "filename": "farneback3d-0.1.3.tar.gz", "has_sig": false, "md5_digest": "bd144929d78f3f1feafd600e25589881", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33420, "upload_time": "2019-01-21T08:09:13", "upload_time_iso_8601": "2019-01-21T08:09:13.438645Z", "url": "https://files.pythonhosted.org/packages/23/13/6e737ef04cdde92849ed211fbe3e25640bf42ffb8f562eab39165664f5a8/farneback3d-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:42 2020"}