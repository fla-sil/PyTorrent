{"info": {"author": "Sam Kingston and AUTHORS", "author_email": "sam@sjkwi.com.au", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "virtualenv-api - an API for virtualenv\n======================================\n\n|Build Status|\n|Latest version|\n|BSD License|\n\n`virtualenv`_ is a tool to create isolated Python environments. Unfortunately,\nit does not expose a native Python API.  This package aims to provide an API in\nthe form of a wrapper around virtualenv.\n\nIt can be used to create and delete environments and perform package management\ninside the environment.\n\nFull support is provided for Python 2.7 and Python 3.3+.\n\n.. _virtualenv: http://www.virtualenv.org/\n.. |Build Status| image:: https://travis-ci.org/sjkingo/virtualenv-api.svg\n   :target: https://travis-ci.org/sjkingo/virtualenv-api\n.. |Latest version| image:: https://img.shields.io/pypi/v/virtualenv-api.svg\n   :target: https://pypi.python.org/pypi/virtualenv-api\n.. |BSD License| image:: https://img.shields.io/pypi/l/virtualenv-api.svg\n   :target: https://github.com/sjkingo/virtualenv-api/blob/master/LICENSE\n\n\nInstallation\n------------\n\nThe latest stable release is available on `PyPi`_:\n\n::\n\n    $ pip install virtualenv-api\n\nPlease note that the distribution is named ``virtualenv-api``, yet the Python\npackage is named ``virtualenvapi``.\n\nAlternatively, you may fetch the latest version from git:\n\n::\n\n    $ pip install git+https://github.com/sjkingo/virtualenv-api.git\n\n.. _PyPi: https://pypi.python.org/pypi/virtualenv-api\n\nExamples\n--------\n\n-  To begin managing an environment (it will be created if it does not\n   exist):\n\n.. code:: python\n\n    from virtualenvapi.manage import VirtualEnvironment\n    env = VirtualEnvironment('/path/to/environment/name')\n\nYou may also specify the Python interpreter to use in this environment by\npassing the ``python`` argument to the class constructor (new in 2.1.3):\n\n.. code:: python\n\n    env = VirtualEnvironment('/path/to/environment/name', python='python3')\n\nIf you have already activated a virtualenv and wish to operate on it, simply\ncall ``VirtualEnvironment`` with no arguments:\n\n.. code:: python\n\n    env = VirtualEnvironment()\n\n*New in 2.1.7:*\n\nAn optional argument ``readonly`` may be provided (defaults to ``False``) that\nwill prevent all operations that could potentially modify the environment.\n\n-  Check if the ``mezzanine`` package is installed:\n\n.. code:: python\n\n    >>> env.is_installed('mezzanine')\n    False\n\n-  Install the latest version of the ``mezzanine`` package:\n\n.. code:: python\n\n    >>> env.install('mezzanine')\n\n-  A wheel of the latest version of the ``mezzanine`` package (new in\n   2.1.4):\n\n.. code:: python\n\n    >>> env.wheel('mezzanine')\n\n-  Install version 1.4 of the ``django`` package (this is pip\u2019s syntax):\n\n.. code:: python\n\n    >>> env.install('django==1.4')\n\n-  Upgrade the ``django`` package to the latest version:\n\n.. code:: python\n\n    >>> env.upgrade('django')\n\n-  Upgrade all packages to their latest versions (new in 2.1.7):\n\n.. code:: python\n\n    >>> env.upgrade_all()\n\n-  Uninstall the ``mezzanine`` package:\n\n.. code:: python\n\n    >>> env.uninstall('mezzanine')\n\nPackages may be specified as name only (to work on the latest version), using\npip\u2019s package syntax (e.g. ``django==1.4``) or as a tuple of ``('name',\n'ver')`` (e.g. ``('django', '1.4')``).\n\n-  A package may be installed directly from a git repository (must end\n   with ``.git``):\n\n.. code:: python\n\n    >>> env.install('git+git://github.com/sjkingo/cartridge-payments.git')\n\n*New in 2.1.10:*\n\n-  A package can be installed in pip's *editable* mode by prefixing the package\n   name with `-e` (this is pip's syntax):\n\n.. code:: python\n\n    >>> env.install('-e git+https://github.com/stephenmcd/cartridge.git')\n\n-  Instances of the environment provide an ``installed_packages``\n   property:\n\n.. code:: python\n\n    >>> env.installed_packages\n    [('django', '1.5'), ('wsgiref', '0.1.2')]\n\n-  A list of package names is also available in the same manner:\n\n.. code:: python\n\n    >>> env.installed_package_names\n    ['django', 'wsgiref']\n\n-  Search for a package on PyPI (changed in 2.1.5: this now returns a\n   dictionary instead of list):\n\n.. code:: python\n\n    >>> env.search('virtualenv-api')\n    {'virtualenv-api': 'An API for virtualenv/pip'}\n    >>> len(env.search('requests'))\n    231\n\n-  The old functionality (pre 2.1.5) of ``env.search`` may be used:\n\n.. code:: python\n\n    >>> list(env.search('requests').items())\n    [('virtualenv-api', 'An API for virtualenv/pip')]\n\nVerbose output from each command is available in the environment\u2019s\n``build.log`` file, which is appended to with each operation. Any errors are\nlogged to ``build.err``.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zerotk/virtualenv-api", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "zerotk.virtualenv-api", "package_url": "https://pypi.org/project/zerotk.virtualenv-api/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zerotk.virtualenv-api/", "project_urls": {"Homepage": "https://github.com/zerotk/virtualenv-api"}, "release_url": "https://pypi.org/project/zerotk.virtualenv-api/2.2.1/", "requires_dist": null, "requires_python": "", "summary": "An API for virtualenv/pip", "version": "2.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/sjkingo/virtualenv-api\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/285c9d2bc69fdccde79800966f5a414f145cbd3b/68747470733a2f2f7472617669732d63692e6f72672f736a6b696e676f2f7669727475616c656e762d6170692e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/virtualenv-api\" rel=\"nofollow\"><img alt=\"Latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c81779ae2e95aefef3efb94a1ba9cfe5538b8a58/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7669727475616c656e762d6170692e737667\"></a>\n<a href=\"https://github.com/sjkingo/virtualenv-api/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"BSD License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a201db100ca13a0eeb37e4720a28fd0c24422eba/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7669727475616c656e762d6170692e737667\"></a></p>\n<p><a href=\"http://www.virtualenv.org/\" rel=\"nofollow\">virtualenv</a> is a tool to create isolated Python environments. Unfortunately,\nit does not expose a native Python API.  This package aims to provide an API in\nthe form of a wrapper around virtualenv.</p>\n<p>It can be used to create and delete environments and perform package management\ninside the environment.</p>\n<p>Full support is provided for Python 2.7 and Python 3.3+.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The latest stable release is available on <a href=\"https://pypi.python.org/pypi/virtualenv-api\" rel=\"nofollow\">PyPi</a>:</p>\n<pre>$ pip install virtualenv-api\n</pre>\n<p>Please note that the distribution is named <tt><span class=\"pre\">virtualenv-api</span></tt>, yet the Python\npackage is named <tt>virtualenvapi</tt>.</p>\n<p>Alternatively, you may fetch the latest version from git:</p>\n<pre>$ pip install git+https://github.com/sjkingo/virtualenv-api.git\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<ul>\n<li>To begin managing an environment (it will be created if it does not\nexist):</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">virtualenvapi.manage</span> <span class=\"kn\">import</span> <span class=\"n\">VirtualEnvironment</span>\n<span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">VirtualEnvironment</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/environment/name'</span><span class=\"p\">)</span>\n</pre>\n<p>You may also specify the Python interpreter to use in this environment by\npassing the <tt>python</tt> argument to the class constructor (new in 2.1.3):</p>\n<pre><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">VirtualEnvironment</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/environment/name'</span><span class=\"p\">,</span> <span class=\"n\">python</span><span class=\"o\">=</span><span class=\"s1\">'python3'</span><span class=\"p\">)</span>\n</pre>\n<p>If you have already activated a virtualenv and wish to operate on it, simply\ncall <tt>VirtualEnvironment</tt> with no arguments:</p>\n<pre><span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"n\">VirtualEnvironment</span><span class=\"p\">()</span>\n</pre>\n<p><em>New in 2.1.7:</em></p>\n<p>An optional argument <tt>readonly</tt> may be provided (defaults to <tt>False</tt>) that\nwill prevent all operations that could potentially modify the environment.</p>\n<ul>\n<li>Check if the <tt>mezzanine</tt> package is installed:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">is_installed</span><span class=\"p\">(</span><span class=\"s1\">'mezzanine'</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n</pre>\n<ul>\n<li>Install the latest version of the <tt>mezzanine</tt> package:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">(</span><span class=\"s1\">'mezzanine'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>A wheel of the latest version of the <tt>mezzanine</tt> package (new in\n2.1.4):</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">wheel</span><span class=\"p\">(</span><span class=\"s1\">'mezzanine'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Install version 1.4 of the <tt>django</tt> package (this is pip\u2019s syntax):</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">(</span><span class=\"s1\">'django==1.4'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Upgrade the <tt>django</tt> package to the latest version:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">upgrade</span><span class=\"p\">(</span><span class=\"s1\">'django'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Upgrade all packages to their latest versions (new in 2.1.7):</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">upgrade_all</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Uninstall the <tt>mezzanine</tt> package:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">uninstall</span><span class=\"p\">(</span><span class=\"s1\">'mezzanine'</span><span class=\"p\">)</span>\n</pre>\n<p>Packages may be specified as name only (to work on the latest version), using\npip\u2019s package syntax (e.g. <tt><span class=\"pre\">django==1.4</span></tt>) or as a tuple of <tt>('name',\n'ver')</tt> (e.g. <tt>('django', '1.4')</tt>).</p>\n<ul>\n<li>A package may be installed directly from a git repository (must end\nwith <tt>.git</tt>):</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">(</span><span class=\"s1\">'git+git://github.com/sjkingo/cartridge-payments.git'</span><span class=\"p\">)</span>\n</pre>\n<p><em>New in 2.1.10:</em></p>\n<ul>\n<li>A package can be installed in pip\u2019s <em>editable</em> mode by prefixing the package\nname with <cite>-e</cite> (this is pip\u2019s syntax):</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">(</span><span class=\"s1\">'-e git+https://github.com/stephenmcd/cartridge.git'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Instances of the environment provide an <tt>installed_packages</tt>\nproperty:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">installed_packages</span>\n<span class=\"p\">[(</span><span class=\"s1\">'django'</span><span class=\"p\">,</span> <span class=\"s1\">'1.5'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'wsgiref'</span><span class=\"p\">,</span> <span class=\"s1\">'0.1.2'</span><span class=\"p\">)]</span>\n</pre>\n<ul>\n<li>A list of package names is also available in the same manner:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">installed_package_names</span>\n<span class=\"p\">[</span><span class=\"s1\">'django'</span><span class=\"p\">,</span> <span class=\"s1\">'wsgiref'</span><span class=\"p\">]</span>\n</pre>\n<ul>\n<li>Search for a package on PyPI (changed in 2.1.5: this now returns a\ndictionary instead of list):</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'virtualenv-api'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'virtualenv-api'</span><span class=\"p\">:</span> <span class=\"s1\">'An API for virtualenv/pip'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'requests'</span><span class=\"p\">))</span>\n<span class=\"mi\">231</span>\n</pre>\n<ul>\n<li>The old functionality (pre 2.1.5) of <tt>env.search</tt> may be used:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s1\">'requests'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"p\">[(</span><span class=\"s1\">'virtualenv-api'</span><span class=\"p\">,</span> <span class=\"s1\">'An API for virtualenv/pip'</span><span class=\"p\">)]</span>\n</pre>\n<p>Verbose output from each command is available in the environment\u2019s\n<tt>build.log</tt> file, which is appended to with each operation. Any errors are\nlogged to <tt>build.err</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 2633893, "releases": {"2.1.14": [{"comment_text": "", "digests": {"md5": "90a250c1a63dc7bd0b0ea8d6f87b2ee6", "sha256": "3b78ab613178a4df20a54b7b49a59ff49406c279b7c6fe471bf0832fb96a7a77"}, "downloads": -1, "filename": "zerotk.virtualenv-api-2.1.14.tar.gz", "has_sig": false, "md5_digest": "90a250c1a63dc7bd0b0ea8d6f87b2ee6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7208, "upload_time": "2017-02-08T16:25:16", "upload_time_iso_8601": "2017-02-08T16:25:16.605056Z", "url": "https://files.pythonhosted.org/packages/1d/90/14675063b2a0e339056b7d417c6c4e2606bea330dcb2c4cbc5c89faec17f/zerotk.virtualenv-api-2.1.14.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "854dd40136457380cbf0052f3d11a8ae", "sha256": "e1ad57b36cdc2ffd02b5d6ffbee78d5b4ce2e834ce44e2d3638f64137d2b1b95"}, "downloads": -1, "filename": "zerotk.virtualenv-api-2.2.0.tar.gz", "has_sig": false, "md5_digest": "854dd40136457380cbf0052f3d11a8ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12166, "upload_time": "2017-02-08T17:44:21", "upload_time_iso_8601": "2017-02-08T17:44:21.214150Z", "url": "https://files.pythonhosted.org/packages/a6/e4/c6310504ed494045f772876c31006c075fba45d4667f875c13586c94f353/zerotk.virtualenv-api-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "10830db6ce20ba69bf106d3954191abd", "sha256": "7d8195ec6ad7d3670ce3761ba0065a95993e71fa5c35d6f47b26a1a7d661bd82"}, "downloads": -1, "filename": "zerotk.virtualenv-api-2.2.1.tar.gz", "has_sig": false, "md5_digest": "10830db6ce20ba69bf106d3954191abd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12165, "upload_time": "2017-02-10T17:07:49", "upload_time_iso_8601": "2017-02-10T17:07:49.147434Z", "url": "https://files.pythonhosted.org/packages/fb/7e/db66bc8da2f1e96698d37fb92c1e32ffa98dbb3510abd54b0e7577fe2489/zerotk.virtualenv-api-2.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "10830db6ce20ba69bf106d3954191abd", "sha256": "7d8195ec6ad7d3670ce3761ba0065a95993e71fa5c35d6f47b26a1a7d661bd82"}, "downloads": -1, "filename": "zerotk.virtualenv-api-2.2.1.tar.gz", "has_sig": false, "md5_digest": "10830db6ce20ba69bf106d3954191abd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12165, "upload_time": "2017-02-10T17:07:49", "upload_time_iso_8601": "2017-02-10T17:07:49.147434Z", "url": "https://files.pythonhosted.org/packages/fb/7e/db66bc8da2f1e96698d37fb92c1e32ffa98dbb3510abd54b0e7577fe2489/zerotk.virtualenv-api-2.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:17:32 2020"}