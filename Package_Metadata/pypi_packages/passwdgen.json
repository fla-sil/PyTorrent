{"info": {"author": "Thane Thomson", "author_email": "connect@thanethomson.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: POSIX", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Utilities"], "description": "# passwdgen\n\n[![Build Status](https://travis-ci.org/thanethomson/passwdgen.svg?branch=master)](https://travis-ci.org/thanethomson/passwdgen)\n[![PyPI](https://img.shields.io/pypi/v/passwdgen.svg)](https://pypi.python.org/pypi/passwdgen)\n[![PyPI](https://img.shields.io/pypi/pyversions/passwdgen.svg)](https://pypi.python.org/pypi/passwdgen)\n\n## Overview\n`passwdgen` is a simple password generation utility with a couple of\npowerful extra features (including password entropy calculation and\nentropy-based password generation).\n\n\n## Installation\nTo use `passwdgen`, you will need to install Python 3.6+.\n\n```bash\n> pip install passwdgen\n```\n\nIf you want `passwdgen` to be globally accessible, you'll need to\ninstall it with `sudo`/`root` privileges:\n\n```bash\n> sudo pip install passwdgen\n```\n\n\n## Usage\nThe simplest password generation command you can execute is:\n\n```bash\n> passwdgen generate\ntotems-representing-sachem-tarrier\n```\n\n## Commands\nTo find out more detailed help about a particular command, simply\nrun:\n\n```bash\n> passwdgen <command> --help\n\n# For example:\n> passwdgen generate --help\n```\n\n### `info`\nAllows you to calculate the entropy of a particular password. For\nexample, on UNIX-like systems, you can simply pipe the password into\nthe info command:\n\n```bash\n> echo \"some-password\" | passwdgen info\n> cat /path/to/password/file | passwdgen info\n```\n\nIf you do not pipe text into `passwdgen`, it will prompt you to enter\nthe password on the command line:\n\n```bash\n> passwdgen info\nPlease enter the password to check: <type your password here>\n```\n\nFor more information on password entropy, please see the section\non **Entropy** further on in this README.\n\n### `generate`\nGenerate a password. Two kinds of passwords can be generated:\n\n* dictionary-based passwords (the default), or\n* character-based passwords (see this [XKCD](http://xkcd.com/936/)\n  before you choose this mechanism).\n\nSome examples of **dictionary-based** password generation:\n\n```bash\n# Generate a dictionary-based password 6 words long\n> passwdgen generate -l 6\n\n# Generate a dictionary-based password with minimum entropy 70 bits\n> passwdgen generate -m 70\n\n# Generate a dictionary-based password and copy it to the clipboard\n> passwdgen generate -c\n\n# Generate a dictionary-based password with colons (:) as a separator\n> passwdgen generate -s colon\n\n# Generate a dictionary-based password and display its entropy info\n> passwdgen generate -i\n\n# Generate a dictionary-based password based on the given starting letters\n> passwdgen generate --starting-letters hello\n```\n\nSome examples of **character-based** password generation:\n\n```bash\n# Generate a password 15 characters long comprising numbers and letters\n> passwdgen generate -t alpha-numeric -l 15\n\n# Generate a password 18 characters long comprising numbers, letters and\n# special characters\n> passwdgen generate -t special -l 18\n\n# Generate a password 12 characters long and display its entropy info\n> passwdgen generate -t special -l 12 -i\n\n# Generate a character-based password, copy it to the clipboard, and\n# display its entropy info\n> passwdgen generate -t special -c -i\n```\n\n### `rng`\nRuns a quick test of your OS' pseudorandom number generator (PRNG).\nComputes a sample set (by default, 1 million entries) of random\nnumbers between 0 and 100 (inclusive)\n\nFor example:\n\n```bash\n> passwdgen rng\nTesting OS RNG. Attempting to generate 1000000 samples between 0 and 100 (inclusive). Please wait...\n\nStatistics\n----------\nMean               : 49.966455 (should approach 50.000 as the sample size increases; 0.067% difference)\nStandard deviation : 29.151161 (should be as close to 29.154759 as possible; 0.012% difference)\nTime taken         : 2.083 seconds\n\n```\n\nThe expected standard deviation for a random variable with a discrete\nuniform random distribution is expected to be calculated as per\n[this Wikipedia entry](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n\n### `wordlist`\nAt present, this command has only one sub-command: `clean`. To take\nan arbitrary word list (a text file with one word per line) and\nclean it up, do the following:\n\n```bash\n> passwdgen wordlist clean /path/to/input/file.txt /path/to/output/file.txt\n```\n\nThis command will:\n\n* remove empty lines,\n* strip out any plurals (`'s` at the end of strings),\n* convert all words to lowercase,\n* deduplicate entries, and\n* sort everything alphabetically.\n\n\n## API\nUsing `passwdgen` from your own Python project is easy:\n\n```python\nimport passwdgen\n\n# Generate a dictionary-based password using the built-in dictionary\nmy_password = passwdgen.words()\n\n# Generate a character-based password\nmy_password = passwdgen.chars()\n\n# Generate a dictionary-based password with 6 words\nlong_password = passwdgen.words(word_count=6)\n\n# Generate a dictionary-based password with minimum entropy 80\ndifficult_password = passwdgen.words(min_entropy=80)\n\n# Generate a dictionary-based password with a custom dictionary\nmy_dictionary = passwdgen.load_word_list(\"/path/to/my/dict.txt\")\npassword = passwdgen.words(my_dictionary)\n```\n\n### `passwdgen.words(dict_set, separator, word_count, min_entropy, starting_letters)`\nGenerates a dictionary-based password. All arguments are keyword\narguments and are optional:\n\n* `dict_set`: A `set` containing all of the possible words from which to\n  generate a password. If not supplied, this will default to the\n  built-in dictionary.\n* `separator`: The separator character to use between the words.\n  Default value: `-` (hyphen)\n* `word_count`: The number of words to use when generating the password.\n  If not specified, and `min_entropy` is not specified, this defaults\n  to `4`.\n* `min_entropy`: The minimum required entropy of the generated\n  password. If `word_count` is specified, this parameter is ignored.\n* `starting_letters`: A string containing the desired starting letters\n  of each word in the generated password. Note: if `word_count` or\n  `min_entropy` are specified, this string must contain at least\n  the relevant number of characters to match the number of generated\n  words. Otherwise the generated password will have exactly the same\n  number of words as this string has characters.\n\nReturns a string.\n\n### `passwdgen.chars(charset, length, min_entropy)`\nGenerates a character-based password. All arguments are keyword\narguments and are optional:\n\n* `charset`: The ID of the character set from which to source characters\n  for the generated password. Default: `special`. See the\n  section on **Character Sets** below.\n* `length`: The required number of characters in the generated password.\n  If neither `length` nor `min_entropy` are specified, this defaults\n  to `12`.\n* `min_entropy`: The minimum required entropy of the generated\n  password. If `length` is specified, this parameter is ignored.\n\nReturns a string.\n\n### `passwdgen.load_word_list(filename, encoding)`\nLoads a word list into memory. All arguments are keyword arguments\nand are optional:\n\n* `filename`: The path to the file from which to load the words. This\n  file must be a plain text file containing one word per line. If\n  not specified, this loads the built-in dictionary into memory.\n* `encoding`: The character encoding to use when reading the file.\n\nReturns a `set` containing the loaded words.\n\n### `passwdgen.secure_random(a, b)`\nSecurely generates a random number using the given limits.\n\n* `a` (required): If `b` is specified, `a` represents the lower limit\n  (inclusive) of the resulting random number. If `b` is not specified,\n  `a` represents the upper limit (exclusive) of the generated number,\n  and the lower limit defaults to `0`.\n* `b` (optional): The upper limit (exclusive) of the generated random\n  number.\n\nReturns a securely generated random number with `a <= result < b` if\n`b` is specified, or `0 <= result < a` if `b` is not specified.\n\n### `passwdgen.calculate_entropy(password, dict_set)`\nAttempts to calculate the entropy of the given password based on\nthe preconfigured character sets and the dictionary.\n\n* `password` (required): The password whose entropy is to be calculated.\n* `dict_set` (optional): A `set` of words comprising the dictionary\n  for which to perform the dictionary-based entropy calculation.\n\nReturns a `dict` whose keys represent the IDs of the different character\nsets tested, and values represent the corresponding entropies.\n\n\n## Character Sets\nThe following character sets are available at present (for use with the\n`generate --charset <charset>` command).\n\n* `dict`: Dictionary-based password generation.\n* `alpha-lower`: Lowercase alphabetical letters (`a-z`).\n* `alpha-upper`: Uppercase alphabetical letters (`A-Z`).\n* `alpha`: Alphabetical (`a-z`, `A-Z`).\n* `alpha-numeric`: Alphanumeric characters (`a-z`, `A-Z`, `0-9`).\n* `alpha-numeric-spaced`: Alphanumeric characters and spaces (`a-z`,\n  `A-Z`, `0-9`, ` `).\n* `numeric`: Numeric characters (`0-9`).\n* `alpha-lower-sep`: Lowercase alphabetical letters and separators\n  (`a-z`, `-_. ,;:`).\n* `alpha-upper-sep`: Uppercase alphabetical letters and separators\n  (`A-Z`, `-_. ,;:`).\n* `special`: Alphanumeric characters and special characters\n  (`a-z`, `A-Z`, `0-9`, ``-_. ,;:!@#$%^&*()+={}[]'\\\"\\\\/?<>`~``).\n\n\n## Entropy\nEntropy, in the context of information theory, provides a convenient\nway to quantify the amount of information in a particular set of\ndata. With regard to password strength, the higher the entropy of\na password, the more difficult it is for an attacker to guess.\n\nFrom the perspective of the generator, the password strength is measured\nby way of the information source. From the perspective of an attacker,\nthe more information is known about the information source that\ngenerated the password (e.g. the kind of random number generator used,\nthe character set to which the password belongs), the lower the entropy\nof that password.\n\n### Secure random number generation\nEntropy calculations are based on the assumption that the random number\nsource is of *good quality* (see [CSPRNG](https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator))\nand generates [uniformly distributed](https://en.wikipedia.org/wiki/Discrete_uniform_distribution)\nrandom numbers. The random number generator (RNG) used in `passwd`\nis provided by the `os.urandom()` function, which uses `/dev/urandom`\non POSIX systems and `CryptGenRandom()` on Windows systems.\n\n### Character-based calculation\nThis password generator uses the following definition for entropy: a\nsingle character `c` from a character set of size `n` characters has\nan entropy of `log2(n)` bits (per character). Entropy adds up as the\nlength of the password increases, i.e. two characters from the character\nset of size `n` will have a combined overall entropy of `2 x log2(n)`.\n\nFor example, if the lowercase alphabet `a..z` is used as the character\nset, it has `n=26`. Each character would have an entropy of\n`log2(26) = 4.700439718141093` bits per character. A password string,\ntherefore, such as `mysuperweakpassword` of length 19 characters, will\nhave a total entropy of `19 x log2(26) = 89.31` bits.\n\nAs the size of the character set increases, so does the entropy of the\npassword of a certain length, as an attacker attempting a brute force\nattack would have to search a much larger set of possibilities to\nfind the password.\n\n### Dictionary-based calculation\nThe dictionary-based method of entropy calculation assumes that an\nattacker has prior knowledge that the password was generated using a\ndictionary of words, and even knows which dictionary was used. This\nwould obviously be the case if you personally used `passwdgen` to\ngenerate a dictionary-based password, as all the code and the dictionary\nare out in the open.\n\nIn this case, instead of assuming a character set (which would mean\na far higher entropy in passwords with 2 or more words), a\ndictionary-based attack could be performed much quicker.\n\nFor example, the password `dog-far-nightly-can` is 19 characters long\nand makes use of the lowercase alphabet and hyphens (resulting in a\ncharacter set of 27 possible characters). This means that a\nbrute force attacker using the full lowercase alphabet and hyphens\nwould be faced with a potential password entropy of\n`19 x log2(27) = 90.34` bits.\n\nIf, however, the attacker knows that the password is dictionary-based\nand that the words are separated by hyphens, the attacker would only\nhave to guess the 4 words from the dictionary making up the password.\nThis results in a potential entropy from the perspective of the\nattacker of `4 x log2(275,185) = 72.28` bits (assuming dictionary\nsize of 275,185 words). This is still a pretty strong password, but\nit is still easier to crack than a password where the attacker does not\nknow that it is dictionary-based.\n\n### How much entropy is enough?\nSo how does one select an appropriate entropy for trying to prevent\nbrute force attacks? This is difficult to estimate, because it depends\nentirely on the resources available to an attacker. Usually it's cheaper\nand easier to perform social engineering attacks if someone wants to\nobtain your password, but if you're paranoid about security and want to\ncover all your bases, you have to think about the kinds of computing\npower available to attackers.\n\nAssuming that whichever service stores your password does not store the\nclear password itself, but a [SHA-256](https://en.wikipedia.org/wiki/SHA-2)\nhash of the password (common practice today), and an attacker manages\nto get hold of this SHA-256 hash, they will have to try many possible\npermutations of input passwords that will eventually match to that\nSHA-256 hash.\n\nIn general, [GPU-based hash attacks are much faster](https://blog.codinghorror.com/speed-hashing/)\nthan CPU-based hash attacks. At the time of this writing, it would seem\nas though high-end GPUs have the ability to perform around 1,000\nmegahashes per second (that's 1,000,000,000 hashes per second, or\n`10^9` hashes per second).\n\nLet's assume you generate a dictionary-based password, where the\nsource dictionary size is **71,188** words. Let's also assume that the\nattacker has the same source dictionary, and knows which character you\nuse to separate the words in your password (in this case, a hyphen).\n\n| Words | Permutations                      | Time to Crack    | Entropy    |\n| ----- | --------------------------------- | ---------------- | ---------- |\n| 2     | 5,067,660,156                     | 5.07 seconds     | 32.24 bits |\n| 3     | 360,746,455,865,016               | 4.175 days       | 48.36 bits |\n| 4     | 25,679,736,460,751,163,960        | 814 years        | 64.47 bits |\n| 5     | 1,827,986,360,222,110,855,328,640 | 57,965,067 years | 80.6 bits  |\n\nOf course, if an attacker splits the work up evenly across multiple\nGPUs, the time to crack goes down linearly, so a 4-word password being\nbrute-force cracked by 2 GPUs would take 407 years, 3 GPUs would take\n203.5 years, 10 GPUs 81.4 years, 100 GPUs 8.1 years, 1,000 GPUs\nwould take about 9.5 months, and 10,000 GPUs would take 29.7 days.\n\nSo, as you see, it really depends on the resources available to an\nattacker. In general though, right now, a password with entropy\n80 bits and upwards, from the perspective of an attacker, is pretty\nmuch infeasible to crack (so a 5-word password from a significantly\nsized source dictionary and a good quality PRNG). This will, of course,\npossibly change in the age of quantum computers.\n\n\n## Dictionary\nThe included dictionary is a \"cleaned out\" (see the `wordlist clean`\ncommand provided by `passwdgen`) version of a dictionary created\nthrough [SCOWL (And Friends)](http://wordlist.aspell.net/), using their\n[word list generator](http://app.aspell.net/create).\n\nAt present, the embedded dictionary contains **71,188** words, ensuring\nan entropy of `log2(71,188) = 16.119` bits per word.\n\n### Legal\nCopyright 2000-2014 by Kevin Atkinson\n\n> Permission to use, copy, modify, distribute and sell these word\n> lists, the associated scripts, the output created from the scripts,\n> and its documentation for any purpose is hereby granted without fee,\n> provided that the above copyright notice appears in all copies and\n> that both that copyright notice and this permission notice appear in\n> supporting documentation. Kevin Atkinson makes no representations\n> about the suitability of this array for any purpose. It is provided\n> \"as is\" without express or implied warranty.\n\nCopyright (c) J Ross Beresford 1993-1999. All Rights Reserved.\n\n> The following restriction is placed on the use of this publication:\n> if The UK Advanced Cryptics Dictionary is used in a software package\n> or redistributed in any form, the copyright notice must be\n> prominently displayed and the text of this document must be included\n> verbatim.\n>\n> There are no other restrictions: I would like to see the list\n> distributed as widely as possible.\n\nMany sources were used in the creation of SCOWL, most of them were in\nthe public domain or used indirectly.  For a full list please see the\nSCOWL readme.\n\n[http://wordlist.aspell.net/](http://wordlist.aspell.net/)\n\n\n## References\nThe following sources were consulted in building the password generator:\n\n* [Entropy (information theory) ~ Wikipedia](https://en.wikipedia.org/wiki/Entropy_(information_theory))\n* [How should I calculate the entropy of a password? ~ Cryptography StackExchange](http://crypto.stackexchange.com/questions/374/how-should-i-calculate-the-entropy-of-a-password)\n* [How to calculate password entropy](https://ritcyberselfdefense.wordpress.com/2011/09/24/how-to-calculate-password-entropy/)\n* [Permutation ~ Wikipedia](https://en.wikipedia.org/wiki/Permutation)\n\n\n## License\n**The MIT License (MIT)**\n\nCopyright (c) 2016 Thane Thomson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thanethomson/passwdgen", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "passwdgen", "package_url": "https://pypi.org/project/passwdgen/", "platform": "", "project_url": "https://pypi.org/project/passwdgen/", "project_urls": {"Homepage": "https://github.com/thanethomson/passwdgen"}, "release_url": "https://pypi.org/project/passwdgen/0.3.1/", "requires_dist": ["pyperclip (==1.7.0)"], "requires_python": "", "summary": "A password generation utility", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>passwdgen</h1>\n<p><a href=\"https://travis-ci.org/thanethomson/passwdgen\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c24f8ea5f2a25748855070c40fcac578de4c6cfb/68747470733a2f2f7472617669732d63692e6f72672f7468616e6574686f6d736f6e2f70617373776467656e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/passwdgen\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a02e1cecf4a5a5f34acb0dc6d771c059e7056551/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f70617373776467656e2e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/passwdgen\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b0f6c4d32c9b0327d6aaf18c0aa47fd23e4959b8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70617373776467656e2e737667\"></a></p>\n<h2>Overview</h2>\n<p><code>passwdgen</code> is a simple password generation utility with a couple of\npowerful extra features (including password entropy calculation and\nentropy-based password generation).</p>\n<h2>Installation</h2>\n<p>To use <code>passwdgen</code>, you will need to install Python 3.6+.</p>\n<pre>&gt; pip install passwdgen\n</pre>\n<p>If you want <code>passwdgen</code> to be globally accessible, you'll need to\ninstall it with <code>sudo</code>/<code>root</code> privileges:</p>\n<pre>&gt; sudo pip install passwdgen\n</pre>\n<h2>Usage</h2>\n<p>The simplest password generation command you can execute is:</p>\n<pre>&gt; passwdgen generate\ntotems-representing-sachem-tarrier\n</pre>\n<h2>Commands</h2>\n<p>To find out more detailed help about a particular command, simply\nrun:</p>\n<pre>&gt; passwdgen &lt;command&gt; --help\n\n<span class=\"c1\"># For example:</span>\n&gt; passwdgen generate --help\n</pre>\n<h3><code>info</code></h3>\n<p>Allows you to calculate the entropy of a particular password. For\nexample, on UNIX-like systems, you can simply pipe the password into\nthe info command:</p>\n<pre>&gt; <span class=\"nb\">echo</span> <span class=\"s2\">\"some-password\"</span> <span class=\"p\">|</span> passwdgen info\n&gt; cat /path/to/password/file <span class=\"p\">|</span> passwdgen info\n</pre>\n<p>If you do not pipe text into <code>passwdgen</code>, it will prompt you to enter\nthe password on the command line:</p>\n<pre>&gt; passwdgen info\nPlease enter the password to check: &lt;<span class=\"nb\">type</span> your password here&gt;\n</pre>\n<p>For more information on password entropy, please see the section\non <strong>Entropy</strong> further on in this README.</p>\n<h3><code>generate</code></h3>\n<p>Generate a password. Two kinds of passwords can be generated:</p>\n<ul>\n<li>dictionary-based passwords (the default), or</li>\n<li>character-based passwords (see this <a href=\"http://xkcd.com/936/\" rel=\"nofollow\">XKCD</a>\nbefore you choose this mechanism).</li>\n</ul>\n<p>Some examples of <strong>dictionary-based</strong> password generation:</p>\n<pre><span class=\"c1\"># Generate a dictionary-based password 6 words long</span>\n&gt; passwdgen generate -l <span class=\"m\">6</span>\n\n<span class=\"c1\"># Generate a dictionary-based password with minimum entropy 70 bits</span>\n&gt; passwdgen generate -m <span class=\"m\">70</span>\n\n<span class=\"c1\"># Generate a dictionary-based password and copy it to the clipboard</span>\n&gt; passwdgen generate -c\n\n<span class=\"c1\"># Generate a dictionary-based password with colons (:) as a separator</span>\n&gt; passwdgen generate -s colon\n\n<span class=\"c1\"># Generate a dictionary-based password and display its entropy info</span>\n&gt; passwdgen generate -i\n\n<span class=\"c1\"># Generate a dictionary-based password based on the given starting letters</span>\n&gt; passwdgen generate --starting-letters hello\n</pre>\n<p>Some examples of <strong>character-based</strong> password generation:</p>\n<pre><span class=\"c1\"># Generate a password 15 characters long comprising numbers and letters</span>\n&gt; passwdgen generate -t alpha-numeric -l <span class=\"m\">15</span>\n\n<span class=\"c1\"># Generate a password 18 characters long comprising numbers, letters and</span>\n<span class=\"c1\"># special characters</span>\n&gt; passwdgen generate -t special -l <span class=\"m\">18</span>\n\n<span class=\"c1\"># Generate a password 12 characters long and display its entropy info</span>\n&gt; passwdgen generate -t special -l <span class=\"m\">12</span> -i\n\n<span class=\"c1\"># Generate a character-based password, copy it to the clipboard, and</span>\n<span class=\"c1\"># display its entropy info</span>\n&gt; passwdgen generate -t special -c -i\n</pre>\n<h3><code>rng</code></h3>\n<p>Runs a quick test of your OS' pseudorandom number generator (PRNG).\nComputes a sample set (by default, 1 million entries) of random\nnumbers between 0 and 100 (inclusive)</p>\n<p>For example:</p>\n<pre>&gt; passwdgen rng\nTesting OS RNG. Attempting to generate <span class=\"m\">1000000</span> samples between <span class=\"m\">0</span> and <span class=\"m\">100</span> <span class=\"o\">(</span>inclusive<span class=\"o\">)</span>. Please wait...\n\nStatistics\n----------\nMean               : <span class=\"m\">49</span>.966455 <span class=\"o\">(</span>should approach <span class=\"m\">50</span>.000 as the sample size increases<span class=\"p\">;</span> <span class=\"m\">0</span>.067% difference<span class=\"o\">)</span>\nStandard deviation : <span class=\"m\">29</span>.151161 <span class=\"o\">(</span>should be as close to <span class=\"m\">29</span>.154759 as possible<span class=\"p\">;</span> <span class=\"m\">0</span>.012% difference<span class=\"o\">)</span>\nTime taken         : <span class=\"m\">2</span>.083 seconds\n</pre>\n<p>The expected standard deviation for a random variable with a discrete\nuniform random distribution is expected to be calculated as per\n<a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\" rel=\"nofollow\">this Wikipedia entry</a>.</p>\n<h3><code>wordlist</code></h3>\n<p>At present, this command has only one sub-command: <code>clean</code>. To take\nan arbitrary word list (a text file with one word per line) and\nclean it up, do the following:</p>\n<pre>&gt; passwdgen wordlist clean /path/to/input/file.txt /path/to/output/file.txt\n</pre>\n<p>This command will:</p>\n<ul>\n<li>remove empty lines,</li>\n<li>strip out any plurals (<code>'s</code> at the end of strings),</li>\n<li>convert all words to lowercase,</li>\n<li>deduplicate entries, and</li>\n<li>sort everything alphabetically.</li>\n</ul>\n<h2>API</h2>\n<p>Using <code>passwdgen</code> from your own Python project is easy:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">passwdgen</span>\n\n<span class=\"c1\"># Generate a dictionary-based password using the built-in dictionary</span>\n<span class=\"n\">my_password</span> <span class=\"o\">=</span> <span class=\"n\">passwdgen</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Generate a character-based password</span>\n<span class=\"n\">my_password</span> <span class=\"o\">=</span> <span class=\"n\">passwdgen</span><span class=\"o\">.</span><span class=\"n\">chars</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Generate a dictionary-based password with 6 words</span>\n<span class=\"n\">long_password</span> <span class=\"o\">=</span> <span class=\"n\">passwdgen</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">(</span><span class=\"n\">word_count</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate a dictionary-based password with minimum entropy 80</span>\n<span class=\"n\">difficult_password</span> <span class=\"o\">=</span> <span class=\"n\">passwdgen</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">(</span><span class=\"n\">min_entropy</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate a dictionary-based password with a custom dictionary</span>\n<span class=\"n\">my_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">passwdgen</span><span class=\"o\">.</span><span class=\"n\">load_word_list</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/my/dict.txt\"</span><span class=\"p\">)</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">passwdgen</span><span class=\"o\">.</span><span class=\"n\">words</span><span class=\"p\">(</span><span class=\"n\">my_dictionary</span><span class=\"p\">)</span>\n</pre>\n<h3><code>passwdgen.words(dict_set, separator, word_count, min_entropy, starting_letters)</code></h3>\n<p>Generates a dictionary-based password. All arguments are keyword\narguments and are optional:</p>\n<ul>\n<li><code>dict_set</code>: A <code>set</code> containing all of the possible words from which to\ngenerate a password. If not supplied, this will default to the\nbuilt-in dictionary.</li>\n<li><code>separator</code>: The separator character to use between the words.\nDefault value: <code>-</code> (hyphen)</li>\n<li><code>word_count</code>: The number of words to use when generating the password.\nIf not specified, and <code>min_entropy</code> is not specified, this defaults\nto <code>4</code>.</li>\n<li><code>min_entropy</code>: The minimum required entropy of the generated\npassword. If <code>word_count</code> is specified, this parameter is ignored.</li>\n<li><code>starting_letters</code>: A string containing the desired starting letters\nof each word in the generated password. Note: if <code>word_count</code> or\n<code>min_entropy</code> are specified, this string must contain at least\nthe relevant number of characters to match the number of generated\nwords. Otherwise the generated password will have exactly the same\nnumber of words as this string has characters.</li>\n</ul>\n<p>Returns a string.</p>\n<h3><code>passwdgen.chars(charset, length, min_entropy)</code></h3>\n<p>Generates a character-based password. All arguments are keyword\narguments and are optional:</p>\n<ul>\n<li><code>charset</code>: The ID of the character set from which to source characters\nfor the generated password. Default: <code>special</code>. See the\nsection on <strong>Character Sets</strong> below.</li>\n<li><code>length</code>: The required number of characters in the generated password.\nIf neither <code>length</code> nor <code>min_entropy</code> are specified, this defaults\nto <code>12</code>.</li>\n<li><code>min_entropy</code>: The minimum required entropy of the generated\npassword. If <code>length</code> is specified, this parameter is ignored.</li>\n</ul>\n<p>Returns a string.</p>\n<h3><code>passwdgen.load_word_list(filename, encoding)</code></h3>\n<p>Loads a word list into memory. All arguments are keyword arguments\nand are optional:</p>\n<ul>\n<li><code>filename</code>: The path to the file from which to load the words. This\nfile must be a plain text file containing one word per line. If\nnot specified, this loads the built-in dictionary into memory.</li>\n<li><code>encoding</code>: The character encoding to use when reading the file.</li>\n</ul>\n<p>Returns a <code>set</code> containing the loaded words.</p>\n<h3><code>passwdgen.secure_random(a, b)</code></h3>\n<p>Securely generates a random number using the given limits.</p>\n<ul>\n<li><code>a</code> (required): If <code>b</code> is specified, <code>a</code> represents the lower limit\n(inclusive) of the resulting random number. If <code>b</code> is not specified,\n<code>a</code> represents the upper limit (exclusive) of the generated number,\nand the lower limit defaults to <code>0</code>.</li>\n<li><code>b</code> (optional): The upper limit (exclusive) of the generated random\nnumber.</li>\n</ul>\n<p>Returns a securely generated random number with <code>a &lt;= result &lt; b</code> if\n<code>b</code> is specified, or <code>0 &lt;= result &lt; a</code> if <code>b</code> is not specified.</p>\n<h3><code>passwdgen.calculate_entropy(password, dict_set)</code></h3>\n<p>Attempts to calculate the entropy of the given password based on\nthe preconfigured character sets and the dictionary.</p>\n<ul>\n<li><code>password</code> (required): The password whose entropy is to be calculated.</li>\n<li><code>dict_set</code> (optional): A <code>set</code> of words comprising the dictionary\nfor which to perform the dictionary-based entropy calculation.</li>\n</ul>\n<p>Returns a <code>dict</code> whose keys represent the IDs of the different character\nsets tested, and values represent the corresponding entropies.</p>\n<h2>Character Sets</h2>\n<p>The following character sets are available at present (for use with the\n<code>generate --charset &lt;charset&gt;</code> command).</p>\n<ul>\n<li><code>dict</code>: Dictionary-based password generation.</li>\n<li><code>alpha-lower</code>: Lowercase alphabetical letters (<code>a-z</code>).</li>\n<li><code>alpha-upper</code>: Uppercase alphabetical letters (<code>A-Z</code>).</li>\n<li><code>alpha</code>: Alphabetical (<code>a-z</code>, <code>A-Z</code>).</li>\n<li><code>alpha-numeric</code>: Alphanumeric characters (<code>a-z</code>, <code>A-Z</code>, <code>0-9</code>).</li>\n<li><code>alpha-numeric-spaced</code>: Alphanumeric characters and spaces (<code>a-z</code>,\n<code>A-Z</code>, <code>0-9</code>, <code></code>).</li>\n<li><code>numeric</code>: Numeric characters (<code>0-9</code>).</li>\n<li><code>alpha-lower-sep</code>: Lowercase alphabetical letters and separators\n(<code>a-z</code>, <code>-_. ,;:</code>).</li>\n<li><code>alpha-upper-sep</code>: Uppercase alphabetical letters and separators\n(<code>A-Z</code>, <code>-_. ,;:</code>).</li>\n<li><code>special</code>: Alphanumeric characters and special characters\n(<code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>-_. ,;:!@#$%^&amp;*()+={}[]'\\\"\\\\/?&lt;&gt;`~</code>).</li>\n</ul>\n<h2>Entropy</h2>\n<p>Entropy, in the context of information theory, provides a convenient\nway to quantify the amount of information in a particular set of\ndata. With regard to password strength, the higher the entropy of\na password, the more difficult it is for an attacker to guess.</p>\n<p>From the perspective of the generator, the password strength is measured\nby way of the information source. From the perspective of an attacker,\nthe more information is known about the information source that\ngenerated the password (e.g. the kind of random number generator used,\nthe character set to which the password belongs), the lower the entropy\nof that password.</p>\n<h3>Secure random number generation</h3>\n<p>Entropy calculations are based on the assumption that the random number\nsource is of <em>good quality</em> (see <a href=\"https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator\" rel=\"nofollow\">CSPRNG</a>)\nand generates <a href=\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\" rel=\"nofollow\">uniformly distributed</a>\nrandom numbers. The random number generator (RNG) used in <code>passwd</code>\nis provided by the <code>os.urandom()</code> function, which uses <code>/dev/urandom</code>\non POSIX systems and <code>CryptGenRandom()</code> on Windows systems.</p>\n<h3>Character-based calculation</h3>\n<p>This password generator uses the following definition for entropy: a\nsingle character <code>c</code> from a character set of size <code>n</code> characters has\nan entropy of <code>log2(n)</code> bits (per character). Entropy adds up as the\nlength of the password increases, i.e. two characters from the character\nset of size <code>n</code> will have a combined overall entropy of <code>2 x log2(n)</code>.</p>\n<p>For example, if the lowercase alphabet <code>a..z</code> is used as the character\nset, it has <code>n=26</code>. Each character would have an entropy of\n<code>log2(26) = 4.700439718141093</code> bits per character. A password string,\ntherefore, such as <code>mysuperweakpassword</code> of length 19 characters, will\nhave a total entropy of <code>19 x log2(26) = 89.31</code> bits.</p>\n<p>As the size of the character set increases, so does the entropy of the\npassword of a certain length, as an attacker attempting a brute force\nattack would have to search a much larger set of possibilities to\nfind the password.</p>\n<h3>Dictionary-based calculation</h3>\n<p>The dictionary-based method of entropy calculation assumes that an\nattacker has prior knowledge that the password was generated using a\ndictionary of words, and even knows which dictionary was used. This\nwould obviously be the case if you personally used <code>passwdgen</code> to\ngenerate a dictionary-based password, as all the code and the dictionary\nare out in the open.</p>\n<p>In this case, instead of assuming a character set (which would mean\na far higher entropy in passwords with 2 or more words), a\ndictionary-based attack could be performed much quicker.</p>\n<p>For example, the password <code>dog-far-nightly-can</code> is 19 characters long\nand makes use of the lowercase alphabet and hyphens (resulting in a\ncharacter set of 27 possible characters). This means that a\nbrute force attacker using the full lowercase alphabet and hyphens\nwould be faced with a potential password entropy of\n<code>19 x log2(27) = 90.34</code> bits.</p>\n<p>If, however, the attacker knows that the password is dictionary-based\nand that the words are separated by hyphens, the attacker would only\nhave to guess the 4 words from the dictionary making up the password.\nThis results in a potential entropy from the perspective of the\nattacker of <code>4 x log2(275,185) = 72.28</code> bits (assuming dictionary\nsize of 275,185 words). This is still a pretty strong password, but\nit is still easier to crack than a password where the attacker does not\nknow that it is dictionary-based.</p>\n<h3>How much entropy is enough?</h3>\n<p>So how does one select an appropriate entropy for trying to prevent\nbrute force attacks? This is difficult to estimate, because it depends\nentirely on the resources available to an attacker. Usually it's cheaper\nand easier to perform social engineering attacks if someone wants to\nobtain your password, but if you're paranoid about security and want to\ncover all your bases, you have to think about the kinds of computing\npower available to attackers.</p>\n<p>Assuming that whichever service stores your password does not store the\nclear password itself, but a <a href=\"https://en.wikipedia.org/wiki/SHA-2\" rel=\"nofollow\">SHA-256</a>\nhash of the password (common practice today), and an attacker manages\nto get hold of this SHA-256 hash, they will have to try many possible\npermutations of input passwords that will eventually match to that\nSHA-256 hash.</p>\n<p>In general, <a href=\"https://blog.codinghorror.com/speed-hashing/\" rel=\"nofollow\">GPU-based hash attacks are much faster</a>\nthan CPU-based hash attacks. At the time of this writing, it would seem\nas though high-end GPUs have the ability to perform around 1,000\nmegahashes per second (that's 1,000,000,000 hashes per second, or\n<code>10^9</code> hashes per second).</p>\n<p>Let's assume you generate a dictionary-based password, where the\nsource dictionary size is <strong>71,188</strong> words. Let's also assume that the\nattacker has the same source dictionary, and knows which character you\nuse to separate the words in your password (in this case, a hyphen).</p>\n<table>\n<thead>\n<tr>\n<th>Words</th>\n<th>Permutations</th>\n<th>Time to Crack</th>\n<th>Entropy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>5,067,660,156</td>\n<td>5.07 seconds</td>\n<td>32.24 bits</td>\n</tr>\n<tr>\n<td>3</td>\n<td>360,746,455,865,016</td>\n<td>4.175 days</td>\n<td>48.36 bits</td>\n</tr>\n<tr>\n<td>4</td>\n<td>25,679,736,460,751,163,960</td>\n<td>814 years</td>\n<td>64.47 bits</td>\n</tr>\n<tr>\n<td>5</td>\n<td>1,827,986,360,222,110,855,328,640</td>\n<td>57,965,067 years</td>\n<td>80.6 bits</td>\n</tr></tbody></table>\n<p>Of course, if an attacker splits the work up evenly across multiple\nGPUs, the time to crack goes down linearly, so a 4-word password being\nbrute-force cracked by 2 GPUs would take 407 years, 3 GPUs would take\n203.5 years, 10 GPUs 81.4 years, 100 GPUs 8.1 years, 1,000 GPUs\nwould take about 9.5 months, and 10,000 GPUs would take 29.7 days.</p>\n<p>So, as you see, it really depends on the resources available to an\nattacker. In general though, right now, a password with entropy\n80 bits and upwards, from the perspective of an attacker, is pretty\nmuch infeasible to crack (so a 5-word password from a significantly\nsized source dictionary and a good quality PRNG). This will, of course,\npossibly change in the age of quantum computers.</p>\n<h2>Dictionary</h2>\n<p>The included dictionary is a \"cleaned out\" (see the <code>wordlist clean</code>\ncommand provided by <code>passwdgen</code>) version of a dictionary created\nthrough <a href=\"http://wordlist.aspell.net/\" rel=\"nofollow\">SCOWL (And Friends)</a>, using their\n<a href=\"http://app.aspell.net/create\" rel=\"nofollow\">word list generator</a>.</p>\n<p>At present, the embedded dictionary contains <strong>71,188</strong> words, ensuring\nan entropy of <code>log2(71,188) = 16.119</code> bits per word.</p>\n<h3>Legal</h3>\n<p>Copyright 2000-2014 by Kevin Atkinson</p>\n<blockquote>\n<p>Permission to use, copy, modify, distribute and sell these word\nlists, the associated scripts, the output created from the scripts,\nand its documentation for any purpose is hereby granted without fee,\nprovided that the above copyright notice appears in all copies and\nthat both that copyright notice and this permission notice appear in\nsupporting documentation. Kevin Atkinson makes no representations\nabout the suitability of this array for any purpose. It is provided\n\"as is\" without express or implied warranty.</p>\n</blockquote>\n<p>Copyright (c) J Ross Beresford 1993-1999. All Rights Reserved.</p>\n<blockquote>\n<p>The following restriction is placed on the use of this publication:\nif The UK Advanced Cryptics Dictionary is used in a software package\nor redistributed in any form, the copyright notice must be\nprominently displayed and the text of this document must be included\nverbatim.</p>\n<p>There are no other restrictions: I would like to see the list\ndistributed as widely as possible.</p>\n</blockquote>\n<p>Many sources were used in the creation of SCOWL, most of them were in\nthe public domain or used indirectly.  For a full list please see the\nSCOWL readme.</p>\n<p><a href=\"http://wordlist.aspell.net/\" rel=\"nofollow\">http://wordlist.aspell.net/</a></p>\n<h2>References</h2>\n<p>The following sources were consulted in building the password generator:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Entropy_(information_theory)\" rel=\"nofollow\">Entropy (information theory) ~ Wikipedia</a></li>\n<li><a href=\"http://crypto.stackexchange.com/questions/374/how-should-i-calculate-the-entropy-of-a-password\" rel=\"nofollow\">How should I calculate the entropy of a password? ~ Cryptography StackExchange</a></li>\n<li><a href=\"https://ritcyberselfdefense.wordpress.com/2011/09/24/how-to-calculate-password-entropy/\" rel=\"nofollow\">How to calculate password entropy</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Permutation\" rel=\"nofollow\">Permutation ~ Wikipedia</a></li>\n</ul>\n<h2>License</h2>\n<p><strong>The MIT License (MIT)</strong></p>\n<p>Copyright (c) 2016 Thane Thomson</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n          </div>"}, "last_serial": 6077478, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b885f61db1ee50c77460a946cbfffff1", "sha256": "bf32d5da9d039ea79f42530afcc572898d53682c10c1ac60641e58f10a001529"}, "downloads": -1, "filename": "passwdgen-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b885f61db1ee50c77460a946cbfffff1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203256, "upload_time": "2016-12-05T14:41:28", "upload_time_iso_8601": "2016-12-05T14:41:28.784580Z", "url": "https://files.pythonhosted.org/packages/e4/51/ded7ab93c096bf0dfe6c555f750f9042ddd2d397b3bd4f50100d27e01872/passwdgen-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a33dca1b14e45693dd9d7ee97588ed65", "sha256": "d81669f77867b7a1aed65450aa6de62c994ea2e4df2921659eb02b9a6ccb6f5a"}, "downloads": -1, "filename": "passwdgen-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a33dca1b14e45693dd9d7ee97588ed65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203382, "upload_time": "2016-12-05T15:45:39", "upload_time_iso_8601": "2016-12-05T15:45:39.331190Z", "url": "https://files.pythonhosted.org/packages/7d/2d/8dded6ed8190840f57661f364f056b2f41d76e6a17178df0dd6cb7f6de79/passwdgen-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4d7c82ed289ece9d4e83fcd7a608afb4", "sha256": "afd8bc4031639d48b3b55ad39db268c23e8cd99f76f07dd00b5c25c452bdde97"}, "downloads": -1, "filename": "passwdgen-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4d7c82ed289ece9d4e83fcd7a608afb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203449, "upload_time": "2016-12-06T08:05:56", "upload_time_iso_8601": "2016-12-06T08:05:56.158320Z", "url": "https://files.pythonhosted.org/packages/f3/97/60a145c1f51ccef3a52b7fa5a3c11e80520781778f9ae6755c9d1ec99e84/passwdgen-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "595a55cdcee33cf8b87e0def890d380e", "sha256": "a562c1356c6a45a38b23955a1da42fbdeab2b407968241f0afdd4cb24aa7cc68"}, "downloads": -1, "filename": "passwdgen-0.2.0.tar.gz", "has_sig": false, "md5_digest": "595a55cdcee33cf8b87e0def890d380e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 204139, "upload_time": "2016-12-06T13:42:07", "upload_time_iso_8601": "2016-12-06T13:42:07.149908Z", "url": "https://files.pythonhosted.org/packages/34/de/cdd3a6c54d5244a08bc68c22e816994b4c5ef33f379b604fa1cf73b0afdc/passwdgen-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3df366833aea4205a110886c9361ca2c", "sha256": "605383c87cd075ac6f8cc769214e2993bc3759dff3508cd8480bd94beb05c173"}, "downloads": -1, "filename": "passwdgen-0.2.1.tar.gz", "has_sig": false, "md5_digest": "3df366833aea4205a110886c9361ca2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 204139, "upload_time": "2016-12-06T15:44:45", "upload_time_iso_8601": "2016-12-06T15:44:45.304672Z", "url": "https://files.pythonhosted.org/packages/96/96/9fb1bd0d5acb5e389f87629b3925b41ad7babb879a08b5b5ade91bce5f8c/passwdgen-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "9c879b8622e388c423d8070d32670169", "sha256": "0a2ef31a69afba099d816f7ddeefc71f14368d94a507860273ae9229483f706c"}, "downloads": -1, "filename": "passwdgen-0.2.2.tar.gz", "has_sig": false, "md5_digest": "9c879b8622e388c423d8070d32670169", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 204140, "upload_time": "2016-12-06T15:56:17", "upload_time_iso_8601": "2016-12-06T15:56:17.338199Z", "url": "https://files.pythonhosted.org/packages/e9/d2/5137de607d8c360361a09ceebd0ac07511a5d89b72f21248cf4712df1e43/passwdgen-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "c1b0b5a784a81e9a1ef4194b435ed9ed", "sha256": "ce91205f72f8e723d539b647e4bfeb0c11cb5940e2e92239a7b22bbb1c6c30bc"}, "downloads": -1, "filename": "passwdgen-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c1b0b5a784a81e9a1ef4194b435ed9ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 205624, "upload_time": "2018-02-26T07:58:02", "upload_time_iso_8601": "2018-02-26T07:58:02.557821Z", "url": "https://files.pythonhosted.org/packages/42/47/12eb5f26d0489c76849ade4137e51d10be780ddd80490f6c13fa6786340c/passwdgen-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91c758f7c2b569b0d783ac781493ff4c", "sha256": "73ab49ee9a97126b6c4dbacebd08d1bac95cb349054fb7d68207a29902214ffc"}, "downloads": -1, "filename": "passwdgen-0.2.3.tar.gz", "has_sig": false, "md5_digest": "91c758f7c2b569b0d783ac781493ff4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 203375, "upload_time": "2018-02-26T07:58:04", "upload_time_iso_8601": "2018-02-26T07:58:04.573012Z", "url": "https://files.pythonhosted.org/packages/a0/6d/9955826526b7d71ee8c41bb663bdd1a667c6e35def76acf70ad01bf40223/passwdgen-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "beb4bc37f52278854eee0c69e855128e", "sha256": "aa156ad5b41557af155bd3eba4f17021f24c869cabc083dc7018428f40f4edfe"}, "downloads": -1, "filename": "passwdgen-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "beb4bc37f52278854eee0c69e855128e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 205461, "upload_time": "2019-11-04T20:25:16", "upload_time_iso_8601": "2019-11-04T20:25:16.117772Z", "url": "https://files.pythonhosted.org/packages/52/e7/d4a969807b03ab4c9cbac67245ceccd31eb614c160b79190d6aa3daf068a/passwdgen-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8915b9cf557e52d34b853fb9bf33ba55", "sha256": "318361c63d8b48c8c8a7a08db3550212d5dfe68b16372e888fcf052a07700b5c"}, "downloads": -1, "filename": "passwdgen-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8915b9cf557e52d34b853fb9bf33ba55", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 210864, "upload_time": "2019-11-04T20:25:17", "upload_time_iso_8601": "2019-11-04T20:25:17.440636Z", "url": "https://files.pythonhosted.org/packages/c1/87/424bac79f97ad0f5c6e4c325a1463409d8fa90d9228e3cb4099deb1d462e/passwdgen-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "b37da7f11b83aea123a98b96c8a09a40", "sha256": "5a68ed14031f4bf582b9bdf63081c147784eb90ec6f5b5cde32096cd7ffada76"}, "downloads": -1, "filename": "passwdgen-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b37da7f11b83aea123a98b96c8a09a40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 212276, "upload_time": "2019-11-04T20:37:19", "upload_time_iso_8601": "2019-11-04T20:37:19.035689Z", "url": "https://files.pythonhosted.org/packages/b2/e1/2ba16846c65801b366cede038949ef6e334b84f7fb4536f3fbd045e1bf8f/passwdgen-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7291178d6ec406185df6278f29fa2bba", "sha256": "8f52c277633b461b53f1b18ef809a21d20c04a0cbdf6a9f67cff2596d4b328d6"}, "downloads": -1, "filename": "passwdgen-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7291178d6ec406185df6278f29fa2bba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 219367, "upload_time": "2019-11-04T20:37:20", "upload_time_iso_8601": "2019-11-04T20:37:20.997397Z", "url": "https://files.pythonhosted.org/packages/8d/0c/c497b9753a8f0067347d1af28883630d27345ad60672a8005f459596dd94/passwdgen-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b37da7f11b83aea123a98b96c8a09a40", "sha256": "5a68ed14031f4bf582b9bdf63081c147784eb90ec6f5b5cde32096cd7ffada76"}, "downloads": -1, "filename": "passwdgen-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b37da7f11b83aea123a98b96c8a09a40", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 212276, "upload_time": "2019-11-04T20:37:19", "upload_time_iso_8601": "2019-11-04T20:37:19.035689Z", "url": "https://files.pythonhosted.org/packages/b2/e1/2ba16846c65801b366cede038949ef6e334b84f7fb4536f3fbd045e1bf8f/passwdgen-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7291178d6ec406185df6278f29fa2bba", "sha256": "8f52c277633b461b53f1b18ef809a21d20c04a0cbdf6a9f67cff2596d4b328d6"}, "downloads": -1, "filename": "passwdgen-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7291178d6ec406185df6278f29fa2bba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 219367, "upload_time": "2019-11-04T20:37:20", "upload_time_iso_8601": "2019-11-04T20:37:20.997397Z", "url": "https://files.pythonhosted.org/packages/8d/0c/c497b9753a8f0067347d1af28883630d27345ad60672a8005f459596dd94/passwdgen-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:03 2020"}