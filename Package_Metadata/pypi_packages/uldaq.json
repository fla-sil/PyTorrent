{"info": {"author": "Measurement Computing", "author_email": "info@mccdaq.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Manufacturing", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: System :: Hardware :: Hardware Drivers"], "description": "===========  ===============================================================================================\nInfo         Contains a Python API for interacting with Measurement Computing's Universal Library for Linux.\nAuthor       Measurement Computing\n===========  ===============================================================================================\n\nAbout\n=====\n\nThe **uldaq** Python package contains an API (Application Programming Interface)\nfor interacting with Measurement Computing DAQ devices. The package is implemented\nas an object-oriented wrapper around the UL for Linux C API using the `ctypes <https://docs.python.org/2/library/ctypes.html>`_ Python library.\n\n**uldaq** supports Python 2.7, 3.4+\n\nPrerequisites\n=============\n\nRunning the **uldaq** Python API requires the ``UL for Linux C API``.\n\n* Visit `uldaq on GitHub <https://github.com/mccdaq/uldaq/>`_\n  to install the latest version of the UL for Linux C API.\n\nInstalling the **uldaq** Python API requires ``Python`` along with the ``pip``, ``setuptools`` and ``wheel`` packages.\n\n* For more information on installing Python, go to `python.org <https://www.python.org/>`_.\n* For more information on installing Python packages with pip, see the\n  `Installing Packages <https://packaging.python.org/tutorials/installing-packages/>`_ tutorial on python.org.\n\nInstallation\n============\n\nInstall the **uldaq** Python API with::\n\n  $ pip install uldaq\n\n..\n\n  **Note**: Installation may need to be run with sudo.\n\nExamples\n========\nA complete set of examples is include in the source tarball.\nTo obtain and run the examples, follow these steps:\n\n#. Go to `pypi.org/project/uldaq <https://pypi.org/project/uldaq/>`_.\n#. Under **Navigation** click the ``Download files`` link.\n#. Click the ``uldaq-1.1.2.tar.gz`` link to download the file.\n#. Copy the file from the default download location to a desired location.\n#. Navigate to the file location and run::\n\n    $ tar -xvf uldaq-1.1.2.tar.gz\n\n\n#. The Python examples are located in the examples folder. Run the following commands to execute the analog input example::\n\n    $ cd uldaq-1.1.2/examples\n    $ ./a_in.py\n\n  **Note**: For best results, run examples in a terminal window.\n\nUsage\n=====\nThe following is a simple example for reading a single voltage value from each channel in\nan analog input subsystem of a Measurement Computing DAQ device.\n\n.. code-block:: python\n\n from uldaq import (get_daq_device_inventory, DaqDevice, InterfaceType,\n                    AiInputMode, Range, AInFlag)\n\n try:\n     # Get a list of available DAQ devices\n     devices = get_daq_device_inventory(InterfaceType.USB)\n     # Create a DaqDevice Object and connect to the device\n     daq_device = DaqDevice(devices[0])\n     daq_device.connect()\n     # Get AiDevice and AiInfo objects for the analog input subsystem\n     ai_device = daq_device.get_ai_device()\n     ai_info = ai_device.get_info()\n\n     # Read and display voltage values for all analog input channels\n     for channel in range(ai_info.get_num_chans()):\n         data = ai_device.a_in(channel, AiInputMode.SINGLE_ENDED,\n                               Range.BIP10VOLTS, AInFlag.DEFAULT)\n         print('Channel', channel, 'Data:', data)\n\n     daq_device.disconnect()\n     daq_device.release()\n\n except ULException as e:\n     print('\\n', e)  # Display any error messages\n\nThe same example using a with block:\n\n.. code-block:: python\n\n from uldaq import (get_daq_device_inventory, DaqDevice, InterfaceType,\n                    AiInputMode, Range, AInFlag)\n\n try:\n     # Get a list of available devices\n     devices = get_daq_device_inventory(InterfaceType.USB)\n     # Create a DaqDevice Object and connect to the device\n     with DaqDevice(devices[0]) as daq_device:\n         # Get AiDevice and AiInfo objects for the analog input subsystem\n         ai_device = daq_device.get_ai_device()\n         ai_info = ai_device.get_info()\n\n         # Read and display voltage values for all analog input channels\n         for channel in range(ai_info.get_num_chans()):\n             data = ai_device.a_in(channel, AiInputMode.SINGLE_ENDED,\n                                   Range.BIP10VOLTS, AInFlag.DEFAULT)\n             print('Channel', channel, 'Data:', data)\n\n except ULException as e:\n     print('\\n', e)  # Display any error messages\n\nSupport/Feedback\n================\nThe **uldaq** package is supported by MCC. For **uldaq** support, contact technical support\nthrough `mccdaq.com/Support.aspx <http://www.mccdaq.com/Support.aspx>`_ . Please include version information for Python,\nuldaq C API and uldaq Python API packages used as well as detailed steps on how to reproduce the\nproblem.\n\nDocumentation\n=============\nDocumentation is available at `mccdaq.com <https://www.mccdaq.com/PDFs/Manuals/UL-Linux/python/>`_.\n\nLicense\n=======\n**uldaq** is licensed under an MIT-style license. Other incorporated projects may be licensed under\ndifferent licenses. All licenses allow for non-commercial and commercial use.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.mccdaq.com", "keywords": "uldaq,mcc,ul,daq,data,acquisition", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "uldaq", "package_url": "https://pypi.org/project/uldaq/", "platform": "", "project_url": "https://pypi.org/project/uldaq/", "project_urls": {"Homepage": "http://www.mccdaq.com"}, "release_url": "https://pypi.org/project/uldaq/1.1.2/", "requires_dist": ["enum34 ; python_version < \"3.4\""], "requires_python": "", "summary": "Universal Library Python API for Measurement Computing DAQ devices", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>Info</td>\n<td>Contains a Python API for interacting with Measurement Computing\u2019s Universal Library for Linux.</td>\n</tr>\n<tr><td>Author</td>\n<td>Measurement Computing</td>\n</tr>\n</tbody>\n</table>\n<div id=\"about\">\n<h2>About</h2>\n<p>The <strong>uldaq</strong> Python package contains an API (Application Programming Interface)\nfor interacting with Measurement Computing DAQ devices. The package is implemented\nas an object-oriented wrapper around the UL for Linux C API using the <a href=\"https://docs.python.org/2/library/ctypes.html\" rel=\"nofollow\">ctypes</a> Python library.</p>\n<p><strong>uldaq</strong> supports Python 2.7, 3.4+</p>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>Running the <strong>uldaq</strong> Python API requires the <tt>UL for Linux C API</tt>.</p>\n<ul>\n<li>Visit <a href=\"https://github.com/mccdaq/uldaq/\" rel=\"nofollow\">uldaq on GitHub</a>\nto install the latest version of the UL for Linux C API.</li>\n</ul>\n<p>Installing the <strong>uldaq</strong> Python API requires <tt>Python</tt> along with the <tt>pip</tt>, <tt>setuptools</tt> and <tt>wheel</tt> packages.</p>\n<ul>\n<li>For more information on installing Python, go to <a href=\"https://www.python.org/\" rel=\"nofollow\">python.org</a>.</li>\n<li>For more information on installing Python packages with pip, see the\n<a href=\"https://packaging.python.org/tutorials/installing-packages/\" rel=\"nofollow\">Installing Packages</a> tutorial on python.org.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the <strong>uldaq</strong> Python API with:</p>\n<pre>$ pip install uldaq\n</pre>\n<blockquote>\n<strong>Note</strong>: Installation may need to be run with sudo.</blockquote>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>A complete set of examples is include in the source tarball.\nTo obtain and run the examples, follow these steps:</p>\n<ol>\n<li><p>Go to <a href=\"https://pypi.org/project/uldaq/\" rel=\"nofollow\">pypi.org/project/uldaq</a>.</p>\n</li>\n<li><p>Under <strong>Navigation</strong> click the <tt>Download files</tt> link.</p>\n</li>\n<li><p>Click the <tt><span class=\"pre\">uldaq-1.1.2.tar.gz</span></tt> link to download the file.</p>\n</li>\n<li><p>Copy the file from the default download location to a desired location.</p>\n</li>\n<li><p>Navigate to the file location and run:</p>\n<pre>$ tar -xvf uldaq-1.1.2.tar.gz\n</pre>\n</li>\n<li><p>The Python examples are located in the examples folder. Run the following commands to execute the analog input example:</p>\n<pre>$ cd uldaq-1.1.2/examples\n$ ./a_in.py\n</pre>\n</li>\n</ol>\n<blockquote>\n<strong>Note</strong>: For best results, run examples in a terminal window.</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The following is a simple example for reading a single voltage value from each channel in\nan analog input subsystem of a Measurement Computing DAQ device.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">uldaq</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">get_daq_device_inventory</span><span class=\"p\">,</span> <span class=\"n\">DaqDevice</span><span class=\"p\">,</span> <span class=\"n\">InterfaceType</span><span class=\"p\">,</span>\n                   <span class=\"n\">AiInputMode</span><span class=\"p\">,</span> <span class=\"n\">Range</span><span class=\"p\">,</span> <span class=\"n\">AInFlag</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Get a list of available DAQ devices</span>\n    <span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"n\">get_daq_device_inventory</span><span class=\"p\">(</span><span class=\"n\">InterfaceType</span><span class=\"o\">.</span><span class=\"n\">USB</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Create a DaqDevice Object and connect to the device</span>\n    <span class=\"n\">daq_device</span> <span class=\"o\">=</span> <span class=\"n\">DaqDevice</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">daq_device</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Get AiDevice and AiInfo objects for the analog input subsystem</span>\n    <span class=\"n\">ai_device</span> <span class=\"o\">=</span> <span class=\"n\">daq_device</span><span class=\"o\">.</span><span class=\"n\">get_ai_device</span><span class=\"p\">()</span>\n    <span class=\"n\">ai_info</span> <span class=\"o\">=</span> <span class=\"n\">ai_device</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Read and display voltage values for all analog input channels</span>\n    <span class=\"k\">for</span> <span class=\"n\">channel</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ai_info</span><span class=\"o\">.</span><span class=\"n\">get_num_chans</span><span class=\"p\">()):</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ai_device</span><span class=\"o\">.</span><span class=\"n\">a_in</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">AiInputMode</span><span class=\"o\">.</span><span class=\"n\">SINGLE_ENDED</span><span class=\"p\">,</span>\n                              <span class=\"n\">Range</span><span class=\"o\">.</span><span class=\"n\">BIP10VOLTS</span><span class=\"p\">,</span> <span class=\"n\">AInFlag</span><span class=\"o\">.</span><span class=\"n\">DEFAULT</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Channel'</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"s1\">'Data:'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"n\">daq_device</span><span class=\"o\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n    <span class=\"n\">daq_device</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n\n<span class=\"k\">except</span> <span class=\"n\">ULException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>  <span class=\"c1\"># Display any error messages</span>\n</pre>\n<p>The same example using a with block:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">uldaq</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">get_daq_device_inventory</span><span class=\"p\">,</span> <span class=\"n\">DaqDevice</span><span class=\"p\">,</span> <span class=\"n\">InterfaceType</span><span class=\"p\">,</span>\n                   <span class=\"n\">AiInputMode</span><span class=\"p\">,</span> <span class=\"n\">Range</span><span class=\"p\">,</span> <span class=\"n\">AInFlag</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Get a list of available devices</span>\n    <span class=\"n\">devices</span> <span class=\"o\">=</span> <span class=\"n\">get_daq_device_inventory</span><span class=\"p\">(</span><span class=\"n\">InterfaceType</span><span class=\"o\">.</span><span class=\"n\">USB</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Create a DaqDevice Object and connect to the device</span>\n    <span class=\"k\">with</span> <span class=\"n\">DaqDevice</span><span class=\"p\">(</span><span class=\"n\">devices</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">daq_device</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Get AiDevice and AiInfo objects for the analog input subsystem</span>\n        <span class=\"n\">ai_device</span> <span class=\"o\">=</span> <span class=\"n\">daq_device</span><span class=\"o\">.</span><span class=\"n\">get_ai_device</span><span class=\"p\">()</span>\n        <span class=\"n\">ai_info</span> <span class=\"o\">=</span> <span class=\"n\">ai_device</span><span class=\"o\">.</span><span class=\"n\">get_info</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Read and display voltage values for all analog input channels</span>\n        <span class=\"k\">for</span> <span class=\"n\">channel</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ai_info</span><span class=\"o\">.</span><span class=\"n\">get_num_chans</span><span class=\"p\">()):</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ai_device</span><span class=\"o\">.</span><span class=\"n\">a_in</span><span class=\"p\">(</span><span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"n\">AiInputMode</span><span class=\"o\">.</span><span class=\"n\">SINGLE_ENDED</span><span class=\"p\">,</span>\n                                  <span class=\"n\">Range</span><span class=\"o\">.</span><span class=\"n\">BIP10VOLTS</span><span class=\"p\">,</span> <span class=\"n\">AInFlag</span><span class=\"o\">.</span><span class=\"n\">DEFAULT</span><span class=\"p\">)</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Channel'</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"p\">,</span> <span class=\"s1\">'Data:'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"k\">except</span> <span class=\"n\">ULException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>  <span class=\"c1\"># Display any error messages</span>\n</pre>\n</div>\n<div id=\"support-feedback\">\n<h2>Support/Feedback</h2>\n<p>The <strong>uldaq</strong> package is supported by MCC. For <strong>uldaq</strong> support, contact technical support\nthrough <a href=\"http://www.mccdaq.com/Support.aspx\" rel=\"nofollow\">mccdaq.com/Support.aspx</a> . Please include version information for Python,\nuldaq C API and uldaq Python API packages used as well as detailed steps on how to reproduce the\nproblem.</p>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation is available at <a href=\"https://www.mccdaq.com/PDFs/Manuals/UL-Linux/python/\" rel=\"nofollow\">mccdaq.com</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><strong>uldaq</strong> is licensed under an MIT-style license. Other incorporated projects may be licensed under\ndifferent licenses. All licenses allow for non-commercial and commercial use.</p>\n</div>\n\n          </div>"}, "last_serial": 6183030, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0912bab632e42186eb7e6dd2720ad88f", "sha256": "fb03e5786f6211c364ae81a9bfbc5501ec2267ce5e39c841a515f90f5f950121"}, "downloads": -1, "filename": "uldaq-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0912bab632e42186eb7e6dd2720ad88f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 57418, "upload_time": "2018-05-01T18:44:39", "upload_time_iso_8601": "2018-05-01T18:44:39.274077Z", "url": "https://files.pythonhosted.org/packages/06/4d/fc7e3599dde526abc99bbefacc23c2d9c93b7dd7e9d968b0603132fce600/uldaq-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0bfe998206e0bdad34945267c2a3a36", "sha256": "a990e810368da087c8e0fa443e1c49056dc90a2acf4ef7d616fe844970c2c215"}, "downloads": -1, "filename": "uldaq-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e0bfe998206e0bdad34945267c2a3a36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70746, "upload_time": "2018-05-01T18:44:40", "upload_time_iso_8601": "2018-05-01T18:44:40.879325Z", "url": "https://files.pythonhosted.org/packages/8c/1d/bb6523086d8a944a433732f7eea5fb6fe98240cb9038c26e33706fb8d0a1/uldaq-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "0045b5f8cf04335dc51348a0dc352e6a", "sha256": "6aa707d549c81b663cc8077187b399d9c9320e259da7ff0b1acc61fb0e85b8da"}, "downloads": -1, "filename": "uldaq-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0045b5f8cf04335dc51348a0dc352e6a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 61022, "upload_time": "2018-12-03T19:34:41", "upload_time_iso_8601": "2018-12-03T19:34:41.096088Z", "url": "https://files.pythonhosted.org/packages/d7/be/96c4e83aaa7d38021b4127ff70c6c76dbbffb01f470d936eb41d0b46972c/uldaq-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d02fe45da5468fd6b35317a2d4deebb2", "sha256": "57adb6faed1e203703ec59d7b7db3f6078495aea201d6cf87c60eec1c3099185"}, "downloads": -1, "filename": "uldaq-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d02fe45da5468fd6b35317a2d4deebb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2751303, "upload_time": "2018-12-03T19:34:44", "upload_time_iso_8601": "2018-12-03T19:34:44.740994Z", "url": "https://files.pythonhosted.org/packages/51/18/1890538a976dd56be650535021a733c0eb62c9225bc11509f6711705b054/uldaq-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "4ee2dade99e61b7d6f53649869f539a3", "sha256": "fb36c6766bfdf57132f33ef616572ddfa651c3f695a219db60c9521121f6bc86"}, "downloads": -1, "filename": "uldaq-1.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4ee2dade99e61b7d6f53649869f539a3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 62846, "upload_time": "2019-04-03T16:10:34", "upload_time_iso_8601": "2019-04-03T16:10:34.755913Z", "url": "https://files.pythonhosted.org/packages/cb/dd/f98003f488334d5b128f02bd7d4ed23d2d01d29d8a5b2055ac32f24d89fe/uldaq-1.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ac2a30fbdf297724bb7e6e3da633ced", "sha256": "06f64d51b95ffb596914607a1a68543983e5f815b4d06d23aef5d507f9e006c2"}, "downloads": -1, "filename": "uldaq-1.1.1.tar.gz", "has_sig": false, "md5_digest": "0ac2a30fbdf297724bb7e6e3da633ced", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2754063, "upload_time": "2019-04-03T16:10:38", "upload_time_iso_8601": "2019-04-03T16:10:38.949516Z", "url": "https://files.pythonhosted.org/packages/3d/4f/60289cfe1887fb34dc3ad45cc3b9adab8736dea3a4d20d1e09c555e3964e/uldaq-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "3c60165bdf9850d7df1ca2f37b5271a7", "sha256": "94e7b62ac716a15c07a83bda742b5d97c38a71e285fe5ad89d69eb61d16a156b"}, "downloads": -1, "filename": "uldaq-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c60165bdf9850d7df1ca2f37b5271a7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 61889, "upload_time": "2019-11-22T19:35:08", "upload_time_iso_8601": "2019-11-22T19:35:08.363567Z", "url": "https://files.pythonhosted.org/packages/5d/2c/3caf06ca63919cc95952c8f2a3a0700dd4e192de731c949ee5f0f93a1f79/uldaq-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9388a197c75995fae62fd12edad5e3c", "sha256": "9deb26d5263614b65cf1ff5ee87f714861a383f0020ae7c43b98458b8b63c71e"}, "downloads": -1, "filename": "uldaq-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b9388a197c75995fae62fd12edad5e3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87773, "upload_time": "2019-11-22T19:35:10", "upload_time_iso_8601": "2019-11-22T19:35:10.551102Z", "url": "https://files.pythonhosted.org/packages/ac/98/009d8d64c307655cb0c7f5b7fe853e4d07d2b80d64d9bbbed885d6f03a4a/uldaq-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c60165bdf9850d7df1ca2f37b5271a7", "sha256": "94e7b62ac716a15c07a83bda742b5d97c38a71e285fe5ad89d69eb61d16a156b"}, "downloads": -1, "filename": "uldaq-1.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3c60165bdf9850d7df1ca2f37b5271a7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 61889, "upload_time": "2019-11-22T19:35:08", "upload_time_iso_8601": "2019-11-22T19:35:08.363567Z", "url": "https://files.pythonhosted.org/packages/5d/2c/3caf06ca63919cc95952c8f2a3a0700dd4e192de731c949ee5f0f93a1f79/uldaq-1.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9388a197c75995fae62fd12edad5e3c", "sha256": "9deb26d5263614b65cf1ff5ee87f714861a383f0020ae7c43b98458b8b63c71e"}, "downloads": -1, "filename": "uldaq-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b9388a197c75995fae62fd12edad5e3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87773, "upload_time": "2019-11-22T19:35:10", "upload_time_iso_8601": "2019-11-22T19:35:10.551102Z", "url": "https://files.pythonhosted.org/packages/ac/98/009d8d64c307655cb0c7f5b7fe853e4d07d2b80d64d9bbbed885d6f03a4a/uldaq-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:14 2020"}