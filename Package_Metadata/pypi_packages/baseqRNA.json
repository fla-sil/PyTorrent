{"info": {"author": "Xiannian Zhang", "author_email": "friedpine@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "# DropRNA\n\n## Install baseq_drops\nWe need python3 and a package called: baseq_drops, which could be installed by:\n\n    pip install baseqdrops\n\nAfter install, you will have a runnable command `baseq-Drop`\n\n## Config file\n\nThe pipeline need the following software or resources:\n\n+ `star`: STAR software, for fast alignment of RNA-Seq data;\n+ `samtools`: Sorting bam file;\n+ `whitelistDir`: The barcode whitelist files for indrop and 10X should be placed under whitelistDir.\nThese files can be downloaded from XXX.\n+ `cellranger_ref_<genome>`: The key process of read alignment and tagging to genes\n are inspired and borrowed from the open source cellranger pipeline\n (https://github.com/10XGenomics/cellranger).\n The refernces of genome index and transcriptome can be downloaded\n from https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest.\nIn the config file, the directory of cellrange references is named as `cellranger_<genome>`.\n\nWhile running command, the configures are recorded in the file called `config_drops.ini`:\n\n    [Drops]\n    samtools = /path/to/samtools\n    star = /path/to/STAR\n    whitelistDir = /path/to/whitelist_file_directory\n    cellranger_hg38 = /path/to/reference/refdata-cellranger-GRCh38-1.2.0/\n\n## Process Steps\n1. `Extract the Cell Barcode` Counting the number of each kinds of barcode; this will genrate a barcode_count.<sample>.csv;\n2. `Cell Barcode correction and filtering` Correcting the cell barcode with 1bp mismatch, filtering the barcode with min number of reads;\n3. `Split the reads of valid Cell Barcodes` The raw pair-end raw reads are splitted to 16 single end files for multiprocessing according to the 2bp prefix of barcode; For example, we will get: split.<sample>.<AA|AT|AC|AG...|GG>.fq\n4. `Star Alignment` Fastq files runs at the same time; The bam file sorted by sequence header is generated;\n5. `Reads tagging` Tagging the reads alignment position to the corresponding gene name\n6. `Genrating UMI table`\n\n## Run Command\n\nThe main config is:\n\n+ `--config`: config file;\n+ `--genome/-g`: genome version;\n+ `--protocol`: [10X|indrop|dropseq]\n+ `--minreads`:  Minimum reads for a barcode\n+ `--name/-n` : Sample name\n+ `--fq1/-1`: Read 1\n+ `--fq2/-2`: Read 2\n+ `--top_million_reads`: How many million reads to use, mainly for testing pipeline with fraction of reads (default 1000)\n+ `--dir/-d`: output path\n\nIf you config the: `cellranger_ref_hg38` you can run the following:\n\n    baseqdrops run_pipe --config ./config_drops.ini -g hg38 -p 10X --minreads 10000 -n 10X_test -1 10x_1.1.fq.gz -2 10x.2.fq.gz -d ./\n\n### For older version 10X results\nThe cell barcode length is 15 and UMI length is 5.\n\n    baseqdrops run_pipe --config ./config_drops.ini -g hg38 -p 10X --minreads 10000 -n 10X_test -1 10x_1.1.fq.gz -2 10x.2.fq.gz -d ./\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.beiseq.com", "keywords": "sample setuptools development", "license": "", "maintainer": "", "maintainer_email": "", "name": "baseqRNA", "package_url": "https://pypi.org/project/baseqRNA/", "platform": "", "project_url": "https://pypi.org/project/baseqRNA/", "project_urls": {"Homepage": "https://www.beiseq.com"}, "release_url": "https://pypi.org/project/baseqRNA/1.5/", "requires_dist": ["click", "configparser", "matplotlib", "numpy", "pandas", "check-manifest; extra == 'dev'", "coverage; extra == 'test'"], "requires_python": "", "summary": "Pipeline for Processing RNA-Seq datasets", "version": "1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            # DropRNA<br><br>## Install baseq_drops<br>We need python3 and a package called: baseq_drops, which could be installed by:<br><br>    pip install baseqdrops<br><br>After install, you will have a runnable command `baseq-Drop`<br><br>## Config file<br><br>The pipeline need the following software or resources:<br><br>+ `star`: STAR software, for fast alignment of RNA-Seq data;<br>+ `samtools`: Sorting bam file;<br>+ `whitelistDir`: The barcode whitelist files for indrop and 10X should be placed under whitelistDir.<br>These files can be downloaded from XXX.<br>+ `cellranger_ref_&lt;genome&gt;`: The key process of read alignment and tagging to genes<br> are inspired and borrowed from the open source cellranger pipeline<br> (https://github.com/10XGenomics/cellranger).<br> The refernces of genome index and transcriptome can be downloaded<br> from https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest.<br>In the config file, the directory of cellrange references is named as `cellranger_&lt;genome&gt;`.<br><br>While running command, the configures are recorded in the file called `config_drops.ini`:<br><br>    [Drops]<br>    samtools = /path/to/samtools<br>    star = /path/to/STAR<br>    whitelistDir = /path/to/whitelist_file_directory<br>    cellranger_hg38 = /path/to/reference/refdata-cellranger-GRCh38-1.2.0/<br><br>## Process Steps<br>1. `Extract the Cell Barcode` Counting the number of each kinds of barcode; this will genrate a barcode_count.&lt;sample&gt;.csv;<br>2. `Cell Barcode correction and filtering` Correcting the cell barcode with 1bp mismatch, filtering the barcode with min number of reads;<br>3. `Split the reads of valid Cell Barcodes` The raw pair-end raw reads are splitted to 16 single end files for multiprocessing according to the 2bp prefix of barcode; For example, we will get: split.&lt;sample&gt;.&lt;AA|AT|AC|AG...|GG&gt;.fq<br>4. `Star Alignment` Fastq files runs at the same time; The bam file sorted by sequence header is generated;<br>5. `Reads tagging` Tagging the reads alignment position to the corresponding gene name<br>6. `Genrating UMI table`<br><br>## Run Command<br><br>The main config is:<br><br>+ `--config`: config file;<br>+ `--genome/-g`: genome version;<br>+ `--protocol`: [10X|indrop|dropseq]<br>+ `--minreads`:  Minimum reads for a barcode<br>+ `--name/-n` : Sample name<br>+ `--fq1/-1`: Read 1<br>+ `--fq2/-2`: Read 2<br>+ `--top_million_reads`: How many million reads to use, mainly for testing pipeline with fraction of reads (default 1000)<br>+ `--dir/-d`: output path<br><br>If you config the: `cellranger_ref_hg38` you can run the following:<br><br>    baseqdrops run_pipe --config ./config_drops.ini -g hg38 -p 10X --minreads 10000 -n 10X_test -1 10x_1.1.fq.gz -2 10x.2.fq.gz -d ./<br><br>### For older version 10X results<br>The cell barcode length is 15 and UMI length is 5.<br><br>    baseqdrops run_pipe --config ./config_drops.ini -g hg38 -p 10X --minreads 10000 -n 10X_test -1 10x_1.1.fq.gz -2 10x.2.fq.gz -d ./<br><br><br><br>\n          </div>"}, "last_serial": 4706485, "releases": {"1.5": [{"comment_text": "", "digests": {"md5": "f039d9a489a4dd7259bd89b2c7c13322", "sha256": "56530794332cabb3527ee98372967f11cfd7ff228f429a3276cf48a01f3a2f0c"}, "downloads": -1, "filename": "baseqRNA-1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f039d9a489a4dd7259bd89b2c7c13322", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24004, "upload_time": "2019-01-17T05:49:26", "upload_time_iso_8601": "2019-01-17T05:49:26.258142Z", "url": "https://files.pythonhosted.org/packages/56/da/152269c62bcd76786056408cdb51027daf54c4ae1305140eaf9a6f2a4e4a/baseqRNA-1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08ab0b486ff2fcd51f9c277f883adab0", "sha256": "152adebd57aa184ada3c9ad033a27324e52fbce384d31ecf007985c68b138f0f"}, "downloads": -1, "filename": "baseqRNA-1.5.tar.gz", "has_sig": false, "md5_digest": "08ab0b486ff2fcd51f9c277f883adab0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16666, "upload_time": "2019-01-17T05:49:30", "upload_time_iso_8601": "2019-01-17T05:49:30.483440Z", "url": "https://files.pythonhosted.org/packages/fd/7c/bcaee938ae69df7feb988b631477b6c85cdc20a217b56dae18fdd3efe5af/baseqRNA-1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f039d9a489a4dd7259bd89b2c7c13322", "sha256": "56530794332cabb3527ee98372967f11cfd7ff228f429a3276cf48a01f3a2f0c"}, "downloads": -1, "filename": "baseqRNA-1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f039d9a489a4dd7259bd89b2c7c13322", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24004, "upload_time": "2019-01-17T05:49:26", "upload_time_iso_8601": "2019-01-17T05:49:26.258142Z", "url": "https://files.pythonhosted.org/packages/56/da/152269c62bcd76786056408cdb51027daf54c4ae1305140eaf9a6f2a4e4a/baseqRNA-1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08ab0b486ff2fcd51f9c277f883adab0", "sha256": "152adebd57aa184ada3c9ad033a27324e52fbce384d31ecf007985c68b138f0f"}, "downloads": -1, "filename": "baseqRNA-1.5.tar.gz", "has_sig": false, "md5_digest": "08ab0b486ff2fcd51f9c277f883adab0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16666, "upload_time": "2019-01-17T05:49:30", "upload_time_iso_8601": "2019-01-17T05:49:30.483440Z", "url": "https://files.pythonhosted.org/packages/fd/7c/bcaee938ae69df7feb988b631477b6c85cdc20a217b56dae18fdd3efe5af/baseqRNA-1.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:49 2020"}