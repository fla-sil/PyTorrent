{"info": {"author": "Tino Wagner", "author_email": "ich@tinowagner.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Sound/Audio", "Topic :: Scientific/Engineering"], "description": "python-samplerate\n=================\n\nThis is a wrapper around Erik de Castro Lopo's `libsamplerate`_ (aka Secret\nRabbit Code) for high-quality sample rate conversion.\n\nIt implements all three `APIs\n<http://www.mega-nerd.com/libsamplerate/api.html>`_ available in\n`libsamplerate`_:\n\n* **Simple API**: for resampling a large chunk of data with a single library\n  call\n* **Full API**: for obtaining the resampled signal from successive chunks of\n  data\n* **Callback API**: like Full API, but input samples are provided by a callback\n  function\n\nLibrary calls to `libsamplerate`_ are performed using `CFFI\n<http://cffi.readthedocs.io/en/latest/>`_.\n\n\nInstallation\n------------\n\n    $ pip install samplerate\n\nBinaries of `libsamplerate`_ for macOS and Windows (32 and 64 bit) are included\nand used if not present on the system.\n\n\nUsage\n-----\n\n.. code-block:: python\n\n   import numpy as np\n   import samplerate\n\n   # Synthesize data\n   fs = 1000.\n   t = np.arange(fs * 2) / fs\n   input_data = np.sin(2 * np.pi * 5 * t)\n\n   # Simple API\n   ratio = 1.5\n   converter = 'sinc_best'  # or 'sinc_fastest', ...\n   output_data_simple = samplerate.resample(input_data, ratio, converter)\n\n   # Full API\n   resampler = samplerate.Resampler(converter, channels=1)\n   output_data_full = resampler.process(input_data, ratio, end_of_input=True)\n\n   # The result is the same for both APIs.\n   assert np.allclose(output_data_simple, output_data_full)\n\n   # See `samplerate.CallbackResampler` for the Callback API, or\n   # `examples/play_modulation.py` for an example.\n\nSee ``samplerate.resample``, ``samplerate.Resampler``, and\n``samplerate.CallbackResampler`` in the API documentation for details.\n\n\nSee also\n--------\n\n* `scikits.samplerate <https://pypi.python.org/pypi/scikits.samplerate>`_\n  implements only the Simple API and uses `Cython <http://cython.org/>`_ for\n  extern calls. The `resample` function of `scikits.samplerate` and this package\n  share the same function signature for compatiblity.\n\n* `resampy <https://github.com/bmcfee/resampy>`_: sample rate conversion in\n  Python + Cython.\n\n\nLicense\n-------\n\nThis project is licensed under the `MIT license\n<https://opensource.org/licenses/MIT>`_.\n\nAs of version 0.1.9, `libsamplerate`_ is licensed under the `2-clause BSD\nlicense <https://opensource.org/licenses/BSD-2-Clause>`_.\n\n\n.. _libsamplerate: http://www.mega-nerd.com/libsamplerate/", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tuxu/python-samplerate", "keywords": "samplerate converter signal processing audio", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "samplerate", "package_url": "https://pypi.org/project/samplerate/", "platform": "any", "project_url": "https://pypi.org/project/samplerate/", "project_urls": {"Homepage": "https://github.com/tuxu/python-samplerate"}, "release_url": "https://pypi.org/project/samplerate/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python bindings for libsamplerate based on CFFI and NumPy", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a wrapper around Erik de Castro Lopo\u2019s <a href=\"http://www.mega-nerd.com/libsamplerate/\" rel=\"nofollow\">libsamplerate</a> (aka Secret\nRabbit Code) for high-quality sample rate conversion.</p>\n<p>It implements all three <a href=\"http://www.mega-nerd.com/libsamplerate/api.html\" rel=\"nofollow\">APIs</a> available in\n<a href=\"http://www.mega-nerd.com/libsamplerate/\" rel=\"nofollow\">libsamplerate</a>:</p>\n<ul>\n<li><strong>Simple API</strong>: for resampling a large chunk of data with a single library\ncall</li>\n<li><strong>Full API</strong>: for obtaining the resampled signal from successive chunks of\ndata</li>\n<li><strong>Callback API</strong>: like Full API, but input samples are provided by a callback\nfunction</li>\n</ul>\n<p>Library calls to <a href=\"http://www.mega-nerd.com/libsamplerate/\" rel=\"nofollow\">libsamplerate</a> are performed using <a href=\"http://cffi.readthedocs.io/en/latest/\" rel=\"nofollow\">CFFI</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\n$ pip install samplerate</blockquote>\n<p>Binaries of <a href=\"http://www.mega-nerd.com/libsamplerate/\" rel=\"nofollow\">libsamplerate</a> for macOS and Windows (32 and 64 bit) are included\nand used if not present on the system.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">samplerate</span>\n\n<span class=\"c1\"># Synthesize data</span>\n<span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"mf\">1000.</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">fs</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">fs</span>\n<span class=\"n\">input_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Simple API</span>\n<span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span>\n<span class=\"n\">converter</span> <span class=\"o\">=</span> <span class=\"s1\">'sinc_best'</span>  <span class=\"c1\"># or 'sinc_fastest', ...</span>\n<span class=\"n\">output_data_simple</span> <span class=\"o\">=</span> <span class=\"n\">samplerate</span><span class=\"o\">.</span><span class=\"n\">resample</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">converter</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Full API</span>\n<span class=\"n\">resampler</span> <span class=\"o\">=</span> <span class=\"n\">samplerate</span><span class=\"o\">.</span><span class=\"n\">Resampler</span><span class=\"p\">(</span><span class=\"n\">converter</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">output_data_full</span> <span class=\"o\">=</span> <span class=\"n\">resampler</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"p\">,</span> <span class=\"n\">ratio</span><span class=\"p\">,</span> <span class=\"n\">end_of_input</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The result is the same for both APIs.</span>\n<span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">output_data_simple</span><span class=\"p\">,</span> <span class=\"n\">output_data_full</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># See `samplerate.CallbackResampler` for the Callback API, or</span>\n<span class=\"c1\"># `examples/play_modulation.py` for an example.</span>\n</pre>\n<p>See <tt>samplerate.resample</tt>, <tt>samplerate.Resampler</tt>, and\n<tt>samplerate.CallbackResampler</tt> in the API documentation for details.</p>\n</div>\n<div id=\"see-also\">\n<h2>See also</h2>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/scikits.samplerate\" rel=\"nofollow\">scikits.samplerate</a>\nimplements only the Simple API and uses <a href=\"http://cython.org/\" rel=\"nofollow\">Cython</a> for\nextern calls. The <cite>resample</cite> function of <cite>scikits.samplerate</cite> and this package\nshare the same function signature for compatiblity.</li>\n<li><a href=\"https://github.com/bmcfee/resampy\" rel=\"nofollow\">resampy</a>: sample rate conversion in\nPython + Cython.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This project is licensed under the <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT license</a>.</p>\n<p>As of version 0.1.9, <a href=\"http://www.mega-nerd.com/libsamplerate/\" rel=\"nofollow\">libsamplerate</a> is licensed under the <a href=\"https://opensource.org/licenses/BSD-2-Clause\" rel=\"nofollow\">2-clause BSD\nlicense</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2664609, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "79be4b973d23617c602b54e7d35d10af", "sha256": "f55e5c9d0a8ba3c82a53b7d9c34a2d145439c61166a7f310efaec88f2781b8f8"}, "downloads": -1, "filename": "samplerate-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "79be4b973d23617c602b54e7d35d10af", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4028658, "upload_time": "2017-02-24T00:01:44", "upload_time_iso_8601": "2017-02-24T00:01:44.947823Z", "url": "https://files.pythonhosted.org/packages/0c/3c/4c1aa376332d18e708dcc3289e4dbdd2c508bcac1b8eb1b35b73092fa00f/samplerate-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8309a43d9c362da4bc38eac979ee8857", "sha256": "75ef725e6cd9c4545569caf4c47147beab7b53b2c36e5122e8c285d348f88847"}, "downloads": -1, "filename": "samplerate-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8309a43d9c362da4bc38eac979ee8857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4044998, "upload_time": "2017-02-24T00:01:56", "upload_time_iso_8601": "2017-02-24T00:01:56.505278Z", "url": "https://files.pythonhosted.org/packages/da/9c/6a13fbc59b1ceaef194a53d3aeafa983057133fb13660c423854184eafa7/samplerate-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79be4b973d23617c602b54e7d35d10af", "sha256": "f55e5c9d0a8ba3c82a53b7d9c34a2d145439c61166a7f310efaec88f2781b8f8"}, "downloads": -1, "filename": "samplerate-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "79be4b973d23617c602b54e7d35d10af", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4028658, "upload_time": "2017-02-24T00:01:44", "upload_time_iso_8601": "2017-02-24T00:01:44.947823Z", "url": "https://files.pythonhosted.org/packages/0c/3c/4c1aa376332d18e708dcc3289e4dbdd2c508bcac1b8eb1b35b73092fa00f/samplerate-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8309a43d9c362da4bc38eac979ee8857", "sha256": "75ef725e6cd9c4545569caf4c47147beab7b53b2c36e5122e8c285d348f88847"}, "downloads": -1, "filename": "samplerate-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8309a43d9c362da4bc38eac979ee8857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4044998, "upload_time": "2017-02-24T00:01:56", "upload_time_iso_8601": "2017-02-24T00:01:56.505278Z", "url": "https://files.pythonhosted.org/packages/da/9c/6a13fbc59b1ceaef194a53d3aeafa983057133fb13660c423854184eafa7/samplerate-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:55 2020"}