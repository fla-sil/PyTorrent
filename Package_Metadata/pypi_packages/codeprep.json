{"info": {"author": "Hlib Babii", "author_email": "hlibbabii@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Pre-processors"], "description": "<!--\nSPDX-FileCopyrightText: 2020 Hlib Babii <hlibbabii@gmail.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n# Codeprep\n\n[![Build Status](https://travis-ci.org/giganticode/codeprep.svg?branch=master)](https://travis-ci.org/giganticode/codeprep)\n[![Maintainability](https://api.codeclimate.com/v1/badges/64c9b107bc09fdb1b3b1/maintainability)](https://codeclimate.com/github/giganticode/codeprep/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/64c9b107bc09fdb1b3b1/test_coverage)](https://codeclimate.com/github/giganticode/codeprep/test_coverage)\n[![PyPI version fury.io](https://badge.fury.io/py/codeprep.svg)](https://pypi.python.org/pypi/codeprep/)\n\n**This is a tool for preprocessing source code corpora according to a specified vocabulary modeling choice.**\n\nSupported modeling choices are: \n* Splitting algorithm (no identifier splitting, camel-case splitting, snake-case splitting, BPE (byte-pair-encoding), \nnumber-splitting, ronin: http://joss.theoj.org/papers/10.21105/joss.00653); \n* Number of merges if using BPE; \n* Ignoring/preserving string literals; \n* Ignoring/preserving comments; \n* Preserving case/lowercasing;\n* Preserving/ignoring newlines and tabs.\n* applying/not applying stemming after basic splitting \n\n# Getting started\n\nMake sure you have python >= 3.6 installed in your system; pip, setuptools and wheel are up to date.\n```bash\npython --version\npython -m pip install --upgrade pip setuptools wheel\n```\n\nInstall **codeprep** lib:\n```bash\npip install codeprep\n```\n\nIn order to run the **ronin** algorithm, you will have to additionally install Spiral module (https://github.com/casics/spiral/):\n```bash\npip install git+https://github.com/casics/spiral.git\n```\n\nThe tool can be used **as a python library** as well as a standalone module runnable with a **CLI**. \nYou can pass the path to the dataset or the text itself to be preprocessed. When using Python API for the former option \nyou need to import methods from `codeprep.api.text` module, for the latter - from `codeprep.api.corpus`.\nBelow you can see the general patterns of usage.\n\n\nPython API\n```python\n>>> import codeprep.api.text as cp\n>>> cp.<commmand>('Some code to be split')\n```\n\n```python\n>>> import codeprep.api.corpus as cp\n>>> cp.<commmand>('/path/to/the/dataset')\n```\n\nCLI\n```bash\ncodeprep <commmand> \"Some code to be split\"\n```\n\n```bash\ncodeprep <commmand> --path /path/to/the/dataset\n```\n\nHereafter we will demonstrate the usage as a python library. The CLI is analogous to the python API. You can find the documentation about how to use it [here](codeprep/cli/spec.py). \n\n## Usage examples\n\n### Basic splitting \nTokenization + CamelCase- and snake_case- splitting:\n\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     \u00dcberraschung\");\n...     }\n... }'''\n>>> cp.basic(input_code)\n['void', '<w>', 'test', '_', 'Word', 'Ueberraschung', 'Printer', '</w>', '(', ')', '{', '\\n', \n'\\t', 'if', '(', 'eps', '>', '=', '0', '.', '<w>', '345', 'e', '</w>', '+', '4', ')', '{', '/', '/', 'FIXME', '\\n', \n'\\t', '\\t', '<w>', 'print', 'Word', '</w>', '(', '\"', '\\t', '.', '.', '.', '\\t', '\u00dcberraschung', '\"', ')', ';', '\\n', \n'\\t', '}', '\\n', \n'}']\n```\n\n### Tokenize but don't split identifiers\n\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     \u00dcberraschung\");\n...     }\n... }'''\n>>> cp.nosplit(input_code)\n['void', 'test_WordUeberraschungPrinter', '(', ')', '{', '\\n', \n'\\t', 'if', '(', 'eps', '>', '=', '0', '.', '345e', '+', '4', ')', '{', '/', '/', 'FIXME', '\\n', \n'\\t', '\\t', 'printWord', '(', '\"', '\\t', '.', '.', '.', '\\t', '\u00dcberraschung', '\"', ')', ';', '\\n', \n'\\t', '}', '\\n', \n'}']\n```\n\n### BPE (Byte-Pair encoding)\n\nThe following code does **camelCase-** and **snake_case-** splitting and applies **bpe with 10k merges** on top:\n\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     \u00dcberraschung\");\n...     }\n... }'''\n>>> cp.bpe(input_code, bpe_codes_id='10k')\n['v', 'oid</t>', 'test_', 'Word', 'U', 'eb', 'err', 'as', 'ch', 'un', 'g', 'Print', 'er</t>', '(</t>', ')</t>', '{</t>', '\\n', \n'\\t', 'i', 'f</t>', '(</t>', 'e', 'ps</t>', '></t>', '=</t>', '0</t>', '.</t>', '34', '5', 'e</t>', '+</t>', '4</t>', ')</t>', '{</t>', '/</t>', '/</t>', 'FIX', 'M', 'E</t>',  '\\n', \n'\\t', '\\t', 'print', 'Word</t>', '(</t>', '\"</t>', '\\t', '.</t>', '.</t>', '.</t>', '\\t', '\u00dc', 'b', 'err', 'as', 'ch', 'un', 'g</t>', '\"</t>', ')</t>', ';</t>', '\\n', \n'\\t', '}</t>', '\\n', \n'}</t>']\n```\n\n**codeprep** by default does BPE using bpe codes leaned on [the Github Java Corpus](http://groups.inf.ed.ac.uk/cup/javaGithub/). The argument `bpe_codes_id='10k'` tells the **codeprep** tool to use 10,000 bpe merges. \nOther possible values are `1k` and `5k` (1,000 and 5,000 merges respectively). Please refer to section [Learning custom BPE codes](#Learning-custom-BPE-codes) to train custom bpe codes.\n\n**For other commands and options like `chars`, `--split-numbers`, `--ronin`, `--stem`, please refer to the [docs](codeprep/cli/spec.py)**.\n\n## Calculate vocabulary \nSet `calc_vocab` param to `True` when calling a preprocessing method to calculate the vocabulary of the preprocessed corpus, e.g.:\n```python\n>>> import codeprep.api.corpus as cp\n>>> cp.basic('/path/to/train/on', calc_vocab=True)\n...\nVocab is available at /path/to/vocab\n```\n\n## Learning custom BPE codes\nIf you don't want to use, pre-trained BPE codes, it's possible to train custom ones. For example, to train 10,000 merges on the corpus located at the path `/path/to/train/on`, the following command should be run (only CLI):\n\n```bash\ncodeprep learn-bpe 10000 -p /path/to/train/on --id custom-bpe-codes \n```\n\nNow it is possible to do bpe splitting by running the bpe command with the number of merges from 0 to 10,000 (for example with 3500 merges):\n\n```bash\ncodeprep bpe custom-bpe-codes-3500 -p /path/to/preprocess \n```\n\nBefore bpe codes are trained, the [basic preprocessing](#basic-splitting) is done, which can also be tuned with arguments described in section [Tweaking preprocessing](#tweaking-preprocessing).\n\n\n## Additional options\n### Tweaking preprocessing\nYou can pass the following parameters with a `True` value (default values for all of them are False), to tweak the way the imput is preprocessed:\n\n * `no_str` - replace strings with <string> placeholders.\n * `no_com` - replace comments with <comment> placeholders.\n * `no_spaces` - remove newlines and tabs.\n * `no_unicode` - replace words containing non-ascii characters with <non-en> placeholders.\n * `no_case` - lowercase words and encode information about case in <Cap> <CAP> tokens.\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     \u00dcberraschung\");\n...     }\n... }'''\n>>> cp.basic(input_code, no_spaces=True, no_unicode=True, no_case=True, no_com=True, no_str=True)\n['void', '<w>', 'test', '_', '<Cap>', 'word', '<Cap>', 'ueberraschung', '<Cap>', 'printer', '</w>', '(', ')', '{', \n'if', '(', 'eps', '>', '=', '0', '.', '<w>', '345', 'e', '</w>', '+', '4', ')', '{', '/', '/', '<CAPS>', 'fixme', \n'<w>', 'print', '<Cap>', 'word', '</w>', '(', '\"', '.', '.', '.', '<Cap>', '<non-en>', '\"', ')', ';', \n'}', \n'}']\n```\n\nSimilar params can be specified as switches `--no-str`, `--no-com`, `--no-spaces`, `--no-unicode`, `--no-case` in CLI commands.\n\n### Specifying the language\nUnless explicitely specified, **codeprep** will assume the language is java. To make sure the input is preprocessed as intended, it is always **highly recommended** to specify it:\n```python\nimport codeprep.api.text as cp\n>>> cp.bpe(\"volatile\", '1k')\n['volatile']\n>>> cp.bpe(\"volatile\", '1k', extension=\"py\")\n['v', 'ol', 'a', 'ti', 'le</t>']\n# Since 'volatile' is a keyword in java, it is represented as one token unlike in python \n# where it is pretty rare when used as an identifier and therefore represented as multiple subtokens.\n```\n\nWhen preprocessing a corpus, `codeprep` identifies the language based on the file extension. If you want only files with (a) certain extension(s) to be preprocessed, you can specify --ext param \n```bash\ncodeprep basic --path /path/to/be/preprocessed --ext \"java\"\n\n# or if you want to pre-process multiple types of files: \ncodeprep basic --path /path/to/be/preprocessed --ext \"java|c|py|js\"\n```\n### Miscellaneous\nYou can specify the path to where the preprocessed corpus will be written:\n```bash\ncodeprep basic --path /path/to/preprocess --output-path /path/to/output\n```\n\nTo print logs with log level DEBUG and higher to stdout:\n```bash\ncodeprep basic --path /path/to/preprocess --verbose\n```\n\n## Getting Help\nTo get help on commands and options:\n\n```bash\ncodeprep --help\n```\n\n\n# Advanced\n\n### Caching\n\nWhen preprocessing a dataset, **codeprep** first parses source code and converts it into internal representation, \nwhich is after that converted to a preprocessed dataset depending on provided parameters. The intermediate \nrepresentation is cached, so that when the same dataset is pre-processed again with different parameters,\n**codeprep** (providing no changes have been made to the dataset) would use the cache rather than parsing \nthe source code again.\n\nTo store the cache, **codeprep** uses a directory speecified by `$XDG_CACHE_HOME/codeprep/<codeprep_version>` variable if its value is set, \n`$HOME/.cache/codeprep/<codeprep_version>` otherwise.\n\nRemoving the cache will not change the final result, however, will result in slower pre-processing.\n\n# Releases\n\n## 1.0.1\n- Fix training custom bpe codes (Thanks to @mir-am)\n- Fix corpus pre-processing on Windows\n## 1.0.0\n- DOI assigned\n\n## 1.0.0-alpha.12\n- Bugfixes and minor improvements\n\n## 1.0.0-alpha.11 (NOT backward compatible with 1.0.0-alpha.10)\n\n- Include token types in the metadata\n- Expand on token type hierarchy\n- Make possible to return full token index in the iterator\n\n## 1.0.0-alpha.10 (NOT backward compatible with 1.0.0-alpha.9)\n\n- Add boundaries of comments to pre-processing metadata\n- Add Windows and OSx support\n- Switch from unittest to pytest+doctest\n- Bugfixes related to literal presentation of tokens on the disk\n- Bugfixes related to adding </t> to mark the end of a full token\n\n## 1.0.0-alpha.9 (NOT backward compatible with 1.0.0-alpha.7)\n\n- Add `get_corpus_size()` method to `PreprocessedCorpus` class\n- Do BPE splitting without splitting by convention first\n- Use </t> to mark the last sub-token of a token\n- Replacing non-ascii sequences with a special char\n- Follow symlinks when reading a dataset\n- make possible to preserve case when doing stemming\n- Bugfixes\n\n## 1.0.0-alpha.7 (NOT backward compatible with 1.0.0-alpha.6)\n\n- Store version in `codeprep.__version__`\n- implement `--full-strings` and `--max-str-length` options\n- replace `ronin` method/command wit`--ronin` option and apply ronin algorithm on word level instead of full identifier level\n- if `split_numbers` option is set to `True`, split numbers not only in code but also in strings and comments\n- change placeholder values to more human-readable\n- improve logging displaying\n- Bugfixes\n\n## 1.0.0-alpha.6\n\nInitial PyPI release\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/giganticode/codeprep", "keywords": "big large data source code corpus machine learning pre-processing nlp", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "codeprep", "package_url": "https://pypi.org/project/codeprep/", "platform": "", "project_url": "https://pypi.org/project/codeprep/", "project_urls": {"Homepage": "http://github.com/giganticode/codeprep"}, "release_url": "https://pypi.org/project/codeprep/1.0.1/", "requires_dist": ["appdirs (==1.4.3)", "dill (==0.3.1.1)", "docopt (==0.6.2)", "docopt-subcommands (==3.0.0)", "jsons (==1.0.0)", "nltk (==3.4.5)", "Pygments (==2.5.2)", "PyYAML (==5.1.2)", "regex (==2019.11.1)", "tqdm (==4.39.0)"], "requires_python": ">=3.6", "summary": "A toolkit for pre-processing large source code corpora", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Codeprep</h1>\n<p><a href=\"https://travis-ci.org/giganticode/codeprep\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/995080c6974d324c86e48c9519e7847e13368faf/68747470733a2f2f7472617669732d63692e6f72672f676967616e7469636f64652f636f6465707265702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/giganticode/codeprep/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/643004da560b52ee01a65501779da75d5d92ecd8/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f36346339623130376263303966646231623362312f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://codeclimate.com/github/giganticode/codeprep/test_coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b11d8c29dd285e8a9f332a765a2048c658cdc36f/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f36346339623130376263303966646231623362312f746573745f636f766572616765\"></a>\n<a href=\"https://pypi.python.org/pypi/codeprep/\" rel=\"nofollow\"><img alt=\"PyPI version fury.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2ed9a66e61e4843941a1acf5f01f597a57368588/68747470733a2f2f62616467652e667572792e696f2f70792f636f6465707265702e737667\"></a></p>\n<p><strong>This is a tool for preprocessing source code corpora according to a specified vocabulary modeling choice.</strong></p>\n<p>Supported modeling choices are:</p>\n<ul>\n<li>Splitting algorithm (no identifier splitting, camel-case splitting, snake-case splitting, BPE (byte-pair-encoding),\nnumber-splitting, ronin: <a href=\"http://joss.theoj.org/papers/10.21105/joss.00653\" rel=\"nofollow\">http://joss.theoj.org/papers/10.21105/joss.00653</a>);</li>\n<li>Number of merges if using BPE;</li>\n<li>Ignoring/preserving string literals;</li>\n<li>Ignoring/preserving comments;</li>\n<li>Preserving case/lowercasing;</li>\n<li>Preserving/ignoring newlines and tabs.</li>\n<li>applying/not applying stemming after basic splitting</li>\n</ul>\n<h1>Getting started</h1>\n<p>Make sure you have python &gt;= 3.6 installed in your system; pip, setuptools and wheel are up to date.</p>\n<pre>python --version\npython -m pip install --upgrade pip setuptools wheel\n</pre>\n<p>Install <strong>codeprep</strong> lib:</p>\n<pre>pip install codeprep\n</pre>\n<p>In order to run the <strong>ronin</strong> algorithm, you will have to additionally install Spiral module (<a href=\"https://github.com/casics/spiral/\" rel=\"nofollow\">https://github.com/casics/spiral/</a>):</p>\n<pre>pip install git+https://github.com/casics/spiral.git\n</pre>\n<p>The tool can be used <strong>as a python library</strong> as well as a standalone module runnable with a <strong>CLI</strong>.\nYou can pass the path to the dataset or the text itself to be preprocessed. When using Python API for the former option\nyou need to import methods from <code>codeprep.api.text</code> module, for the latter - from <code>codeprep.api.corpus</code>.\nBelow you can see the general patterns of usage.</p>\n<p>Python API</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">codeprep.api.text</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.&lt;</span><span class=\"n\">commmand</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'Some code to be split'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">codeprep.api.corpus</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.&lt;</span><span class=\"n\">commmand</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/the/dataset'</span><span class=\"p\">)</span>\n</pre>\n<p>CLI</p>\n<pre>codeprep &lt;commmand&gt; <span class=\"s2\">\"Some code to be split\"</span>\n</pre>\n<pre>codeprep &lt;commmand&gt; --path /path/to/the/dataset\n</pre>\n<p>Hereafter we will demonstrate the usage as a python library. The CLI is analogous to the python API. You can find the documentation about how to use it <a href=\"codeprep/cli/spec.py\" rel=\"nofollow\">here</a>.</p>\n<h2>Usage examples</h2>\n<h3>Basic splitting</h3>\n<p>Tokenization + CamelCase- and snake_case- splitting:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">codeprep.api.text</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">input_code</span> <span class=\"o\">=</span> <span class=\"s1\">'''void test_WordUeberraschungPrinter() {</span>\n<span class=\"s1\">...     if (eps &gt;= 0.345e+4) { // FIXME</span>\n<span class=\"s1\">...         printWord(\"     ...     \u00dcberraschung\");</span>\n<span class=\"s1\">...     }</span>\n<span class=\"s1\">... }'''</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"p\">(</span><span class=\"n\">input_code</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'void'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">'Word'</span><span class=\"p\">,</span> <span class=\"s1\">'Ueberraschung'</span><span class=\"p\">,</span> <span class=\"s1\">'Printer'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;/w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'if'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">'eps'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'='</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'345'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;/w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"s1\">'4'</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'FIXME'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'print'</span><span class=\"p\">,</span> <span class=\"s1\">'Word'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;/w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'\u00dcberraschung'</span><span class=\"p\">,</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">';'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'}'</span><span class=\"p\">]</span>\n</pre>\n<h3>Tokenize but don't split identifiers</h3>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">codeprep.api.text</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">input_code</span> <span class=\"o\">=</span> <span class=\"s1\">'''void test_WordUeberraschungPrinter() {</span>\n<span class=\"s1\">...     if (eps &gt;= 0.345e+4) { // FIXME</span>\n<span class=\"s1\">...         printWord(\"     ...     \u00dcberraschung\");</span>\n<span class=\"s1\">...     }</span>\n<span class=\"s1\">... }'''</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">nosplit</span><span class=\"p\">(</span><span class=\"n\">input_code</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'void'</span><span class=\"p\">,</span> <span class=\"s1\">'test_WordUeberraschungPrinter'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'if'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">'eps'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'='</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'345e'</span><span class=\"p\">,</span> <span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"s1\">'4'</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'FIXME'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'printWord'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'\u00dcberraschung'</span><span class=\"p\">,</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">';'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'}'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'}'</span><span class=\"p\">]</span>\n</pre>\n<h3>BPE (Byte-Pair encoding)</h3>\n<p>The following code does <strong>camelCase-</strong> and <strong>snake_case-</strong> splitting and applies <strong>bpe with 10k merges</strong> on top:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">codeprep.api.text</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">input_code</span> <span class=\"o\">=</span> <span class=\"s1\">'''void test_WordUeberraschungPrinter() {</span>\n<span class=\"s1\">...     if (eps &gt;= 0.345e+4) { // FIXME</span>\n<span class=\"s1\">...         printWord(\"     ...     \u00dcberraschung\");</span>\n<span class=\"s1\">...     }</span>\n<span class=\"s1\">... }'''</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">bpe</span><span class=\"p\">(</span><span class=\"n\">input_code</span><span class=\"p\">,</span> <span class=\"n\">bpe_codes_id</span><span class=\"o\">=</span><span class=\"s1\">'10k'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"s1\">'oid&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'test_'</span><span class=\"p\">,</span> <span class=\"s1\">'Word'</span><span class=\"p\">,</span> <span class=\"s1\">'U'</span><span class=\"p\">,</span> <span class=\"s1\">'eb'</span><span class=\"p\">,</span> <span class=\"s1\">'err'</span><span class=\"p\">,</span> <span class=\"s1\">'as'</span><span class=\"p\">,</span> <span class=\"s1\">'ch'</span><span class=\"p\">,</span> <span class=\"s1\">'un'</span><span class=\"p\">,</span> <span class=\"s1\">'g'</span><span class=\"p\">,</span> <span class=\"s1\">'Print'</span><span class=\"p\">,</span> <span class=\"s1\">'er&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'(&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">')&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'{&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'i'</span><span class=\"p\">,</span> <span class=\"s1\">'f&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'(&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'ps&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'=&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'0&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'.&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'34'</span><span class=\"p\">,</span> <span class=\"s1\">'5'</span><span class=\"p\">,</span> <span class=\"s1\">'e&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'+&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'4&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">')&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'{&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'/&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'/&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'FIX'</span><span class=\"p\">,</span> <span class=\"s1\">'M'</span><span class=\"p\">,</span> <span class=\"s1\">'E&lt;/t&gt;'</span><span class=\"p\">,</span>  <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'print'</span><span class=\"p\">,</span> <span class=\"s1\">'Word&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'(&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'\"&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'.&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'.&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'.&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'\u00dc'</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"s1\">'err'</span><span class=\"p\">,</span> <span class=\"s1\">'as'</span><span class=\"p\">,</span> <span class=\"s1\">'ch'</span><span class=\"p\">,</span> <span class=\"s1\">'un'</span><span class=\"p\">,</span> <span class=\"s1\">'g&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'\"&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">')&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">';&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"s1\">'}&lt;/t&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> \n<span class=\"s1\">'}&lt;/t&gt;'</span><span class=\"p\">]</span>\n</pre>\n<p><strong>codeprep</strong> by default does BPE using bpe codes leaned on <a href=\"http://groups.inf.ed.ac.uk/cup/javaGithub/\" rel=\"nofollow\">the Github Java Corpus</a>. The argument <code>bpe_codes_id='10k'</code> tells the <strong>codeprep</strong> tool to use 10,000 bpe merges.\nOther possible values are <code>1k</code> and <code>5k</code> (1,000 and 5,000 merges respectively). Please refer to section <a href=\"#Learning-custom-BPE-codes\" rel=\"nofollow\">Learning custom BPE codes</a> to train custom bpe codes.</p>\n<p><strong>For other commands and options like <code>chars</code>, <code>--split-numbers</code>, <code>--ronin</code>, <code>--stem</code>, please refer to the <a href=\"codeprep/cli/spec.py\" rel=\"nofollow\">docs</a></strong>.</p>\n<h2>Calculate vocabulary</h2>\n<p>Set <code>calc_vocab</code> param to <code>True</code> when calling a preprocessing method to calculate the vocabulary of the preprocessed corpus, e.g.:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">codeprep.api.corpus</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/train/on'</span><span class=\"p\">,</span> <span class=\"n\">calc_vocab</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">Vocab</span> <span class=\"ow\">is</span> <span class=\"n\">available</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">vocab</span>\n</pre>\n<h2>Learning custom BPE codes</h2>\n<p>If you don't want to use, pre-trained BPE codes, it's possible to train custom ones. For example, to train 10,000 merges on the corpus located at the path <code>/path/to/train/on</code>, the following command should be run (only CLI):</p>\n<pre>codeprep learn-bpe <span class=\"m\">10000</span> -p /path/to/train/on --id custom-bpe-codes \n</pre>\n<p>Now it is possible to do bpe splitting by running the bpe command with the number of merges from 0 to 10,000 (for example with 3500 merges):</p>\n<pre>codeprep bpe custom-bpe-codes-3500 -p /path/to/preprocess \n</pre>\n<p>Before bpe codes are trained, the <a href=\"#basic-splitting\" rel=\"nofollow\">basic preprocessing</a> is done, which can also be tuned with arguments described in section <a href=\"#tweaking-preprocessing\" rel=\"nofollow\">Tweaking preprocessing</a>.</p>\n<h2>Additional options</h2>\n<h3>Tweaking preprocessing</h3>\n<p>You can pass the following parameters with a <code>True</code> value (default values for all of them are False), to tweak the way the imput is preprocessed:</p>\n<ul>\n<li><code>no_str</code> - replace strings with &lt;string&gt; placeholders.</li>\n<li><code>no_com</code> - replace comments with &lt;comment&gt; placeholders.</li>\n<li><code>no_spaces</code> - remove newlines and tabs.</li>\n<li><code>no_unicode</code> - replace words containing non-ascii characters with &lt;non-en&gt; placeholders.</li>\n<li><code>no_case</code> - lowercase words and encode information about case in &lt;Cap&gt; &lt;CAP&gt; tokens.</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">codeprep.api.text</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">input_code</span> <span class=\"o\">=</span> <span class=\"s1\">'''void test_WordUeberraschungPrinter() {</span>\n<span class=\"s1\">...     if (eps &gt;= 0.345e+4) { // FIXME</span>\n<span class=\"s1\">...         printWord(\"     ...     \u00dcberraschung\");</span>\n<span class=\"s1\">...     }</span>\n<span class=\"s1\">... }'''</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">basic</span><span class=\"p\">(</span><span class=\"n\">input_code</span><span class=\"p\">,</span> <span class=\"n\">no_spaces</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">no_unicode</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">no_case</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">no_com</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">no_str</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'void'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cap&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cap&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'ueberraschung'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cap&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'printer'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;/w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">'{'</span><span class=\"p\">,</span> \n<span class=\"s1\">'if'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">'eps'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'='</span><span class=\"p\">,</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'345'</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;/w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"s1\">'4'</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">'{'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;CAPS&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'fixme'</span><span class=\"p\">,</span> \n<span class=\"s1\">'&lt;w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'print'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cap&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'word'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;/w&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'('</span><span class=\"p\">,</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;Cap&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;non-en&gt;'</span><span class=\"p\">,</span> <span class=\"s1\">'\"'</span><span class=\"p\">,</span> <span class=\"s1\">')'</span><span class=\"p\">,</span> <span class=\"s1\">';'</span><span class=\"p\">,</span> \n<span class=\"s1\">'}'</span><span class=\"p\">,</span> \n<span class=\"s1\">'}'</span><span class=\"p\">]</span>\n</pre>\n<p>Similar params can be specified as switches <code>--no-str</code>, <code>--no-com</code>, <code>--no-spaces</code>, <code>--no-unicode</code>, <code>--no-case</code> in CLI commands.</p>\n<h3>Specifying the language</h3>\n<p>Unless explicitely specified, <strong>codeprep</strong> will assume the language is java. To make sure the input is preprocessed as intended, it is always <strong>highly recommended</strong> to specify it:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">codeprep.api.text</span> <span class=\"k\">as</span> <span class=\"nn\">cp</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">bpe</span><span class=\"p\">(</span><span class=\"s2\">\"volatile\"</span><span class=\"p\">,</span> <span class=\"s1\">'1k'</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'volatile'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">bpe</span><span class=\"p\">(</span><span class=\"s2\">\"volatile\"</span><span class=\"p\">,</span> <span class=\"s1\">'1k'</span><span class=\"p\">,</span> <span class=\"n\">extension</span><span class=\"o\">=</span><span class=\"s2\">\"py\"</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"s1\">'v'</span><span class=\"p\">,</span> <span class=\"s1\">'ol'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"s1\">'ti'</span><span class=\"p\">,</span> <span class=\"s1\">'le&lt;/t&gt;'</span><span class=\"p\">]</span>\n<span class=\"c1\"># Since 'volatile' is a keyword in java, it is represented as one token unlike in python </span>\n<span class=\"c1\"># where it is pretty rare when used as an identifier and therefore represented as multiple subtokens.</span>\n</pre>\n<p>When preprocessing a corpus, <code>codeprep</code> identifies the language based on the file extension. If you want only files with (a) certain extension(s) to be preprocessed, you can specify --ext param</p>\n<pre>codeprep basic --path /path/to/be/preprocessed --ext <span class=\"s2\">\"java\"</span>\n\n<span class=\"c1\"># or if you want to pre-process multiple types of files: </span>\ncodeprep basic --path /path/to/be/preprocessed --ext <span class=\"s2\">\"java|c|py|js\"</span>\n</pre>\n<h3>Miscellaneous</h3>\n<p>You can specify the path to where the preprocessed corpus will be written:</p>\n<pre>codeprep basic --path /path/to/preprocess --output-path /path/to/output\n</pre>\n<p>To print logs with log level DEBUG and higher to stdout:</p>\n<pre>codeprep basic --path /path/to/preprocess --verbose\n</pre>\n<h2>Getting Help</h2>\n<p>To get help on commands and options:</p>\n<pre>codeprep --help\n</pre>\n<h1>Advanced</h1>\n<h3>Caching</h3>\n<p>When preprocessing a dataset, <strong>codeprep</strong> first parses source code and converts it into internal representation,\nwhich is after that converted to a preprocessed dataset depending on provided parameters. The intermediate\nrepresentation is cached, so that when the same dataset is pre-processed again with different parameters,\n<strong>codeprep</strong> (providing no changes have been made to the dataset) would use the cache rather than parsing\nthe source code again.</p>\n<p>To store the cache, <strong>codeprep</strong> uses a directory speecified by <code>$XDG_CACHE_HOME/codeprep/&lt;codeprep_version&gt;</code> variable if its value is set,\n<code>$HOME/.cache/codeprep/&lt;codeprep_version&gt;</code> otherwise.</p>\n<p>Removing the cache will not change the final result, however, will result in slower pre-processing.</p>\n<h1>Releases</h1>\n<h2>1.0.1</h2>\n<ul>\n<li>Fix training custom bpe codes (Thanks to @mir-am)</li>\n<li>Fix corpus pre-processing on Windows</li>\n</ul>\n<h2>1.0.0</h2>\n<ul>\n<li>DOI assigned</li>\n</ul>\n<h2>1.0.0-alpha.12</h2>\n<ul>\n<li>Bugfixes and minor improvements</li>\n</ul>\n<h2>1.0.0-alpha.11 (NOT backward compatible with 1.0.0-alpha.10)</h2>\n<ul>\n<li>Include token types in the metadata</li>\n<li>Expand on token type hierarchy</li>\n<li>Make possible to return full token index in the iterator</li>\n</ul>\n<h2>1.0.0-alpha.10 (NOT backward compatible with 1.0.0-alpha.9)</h2>\n<ul>\n<li>Add boundaries of comments to pre-processing metadata</li>\n<li>Add Windows and OSx support</li>\n<li>Switch from unittest to pytest+doctest</li>\n<li>Bugfixes related to literal presentation of tokens on the disk</li>\n<li>Bugfixes related to adding &lt;/t&gt; to mark the end of a full token</li>\n</ul>\n<h2>1.0.0-alpha.9 (NOT backward compatible with 1.0.0-alpha.7)</h2>\n<ul>\n<li>Add <code>get_corpus_size()</code> method to <code>PreprocessedCorpus</code> class</li>\n<li>Do BPE splitting without splitting by convention first</li>\n<li>Use &lt;/t&gt; to mark the last sub-token of a token</li>\n<li>Replacing non-ascii sequences with a special char</li>\n<li>Follow symlinks when reading a dataset</li>\n<li>make possible to preserve case when doing stemming</li>\n<li>Bugfixes</li>\n</ul>\n<h2>1.0.0-alpha.7 (NOT backward compatible with 1.0.0-alpha.6)</h2>\n<ul>\n<li>Store version in <code>codeprep.__version__</code></li>\n<li>implement <code>--full-strings</code> and <code>--max-str-length</code> options</li>\n<li>replace <code>ronin</code> method/command wit<code>--ronin</code> option and apply ronin algorithm on word level instead of full identifier level</li>\n<li>if <code>split_numbers</code> option is set to <code>True</code>, split numbers not only in code but also in strings and comments</li>\n<li>change placeholder values to more human-readable</li>\n<li>improve logging displaying</li>\n<li>Bugfixes</li>\n</ul>\n<h2>1.0.0-alpha.6</h2>\n<p>Initial PyPI release</p>\n\n          </div>"}, "last_serial": 6838287, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "4191626afb57722abd2af87479abc661", "sha256": "8cb61ef5eb73f4442a779b6c17f526e91e7d11b159d6bbec8bd06f63ec106ac8"}, "downloads": -1, "filename": "codeprep-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4191626afb57722abd2af87479abc661", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 252052, "upload_time": "2020-01-24T16:00:23", "upload_time_iso_8601": "2020-01-24T16:00:23.751439Z", "url": "https://files.pythonhosted.org/packages/eb/79/0f4145c16abc6c4c51c0a4e726aeb7095a738b76fa98ffe9010e6586cdbe/codeprep-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8da0210974cafbfc29f1a3a3ac3cecee", "sha256": "fe0d5f3357424a41b4500f41e2fe5ef9138e84930c6e5d914e9f81b455a06cd0"}, "downloads": -1, "filename": "codeprep-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8da0210974cafbfc29f1a3a3ac3cecee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 227823, "upload_time": "2020-01-24T16:00:27", "upload_time_iso_8601": "2020-01-24T16:00:27.503661Z", "url": "https://files.pythonhosted.org/packages/e5/29/16765fcc1763b84f259dc517a2c98f827787e36c14948b749cab9a04c5d7/codeprep-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "981b184b0cbaae28991c089855e3db8a", "sha256": "e686afc549604e3045b136b5459d21e21f3058c7085ace9c6329704ff9d07b5a"}, "downloads": -1, "filename": "codeprep-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "981b184b0cbaae28991c089855e3db8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 252544, "upload_time": "2020-03-18T18:40:41", "upload_time_iso_8601": "2020-03-18T18:40:41.175252Z", "url": "https://files.pythonhosted.org/packages/9f/83/c895263bf5604bff43f424c0140efedfffc18a2c7820e4feac9863c28d7d/codeprep-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a36ec9da7e13b13bf1f479952fd8cb41", "sha256": "d47360b2e4320356d8cfa9a65a51583bda7a956379950c66161ecb49f59b2728"}, "downloads": -1, "filename": "codeprep-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a36ec9da7e13b13bf1f479952fd8cb41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 228589, "upload_time": "2020-03-18T18:40:43", "upload_time_iso_8601": "2020-03-18T18:40:43.353748Z", "url": "https://files.pythonhosted.org/packages/7b/f8/244ebaf2bafbcf75b37dd7127c6ffba97badb5f4e89864ab6e4e8c4b4876/codeprep-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "981b184b0cbaae28991c089855e3db8a", "sha256": "e686afc549604e3045b136b5459d21e21f3058c7085ace9c6329704ff9d07b5a"}, "downloads": -1, "filename": "codeprep-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "981b184b0cbaae28991c089855e3db8a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 252544, "upload_time": "2020-03-18T18:40:41", "upload_time_iso_8601": "2020-03-18T18:40:41.175252Z", "url": "https://files.pythonhosted.org/packages/9f/83/c895263bf5604bff43f424c0140efedfffc18a2c7820e4feac9863c28d7d/codeprep-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a36ec9da7e13b13bf1f479952fd8cb41", "sha256": "d47360b2e4320356d8cfa9a65a51583bda7a956379950c66161ecb49f59b2728"}, "downloads": -1, "filename": "codeprep-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a36ec9da7e13b13bf1f479952fd8cb41", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 228589, "upload_time": "2020-03-18T18:40:43", "upload_time_iso_8601": "2020-03-18T18:40:43.353748Z", "url": "https://files.pythonhosted.org/packages/7b/f8/244ebaf2bafbcf75b37dd7127c6ffba97badb5f4e89864ab6e4e8c4b4876/codeprep-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:14 2020"}