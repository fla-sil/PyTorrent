{"info": {"author": "Peveri Martin", "author_email": "martinpeveri@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Django Admin Log\n================\n\nApplication that logs errors generated in a web system into a model. The model is displayed in the administrator.\n\nInstalling\n----------\n\npip install django-admin-log\n\nQuick start\n-----------\n\n1. Include the app 'log' to INSTALLED_APPS in the settings.py\n\t\t\n2. Apply migration with migrate for registry the model of django-seo-admin::\n\n\tpython manage.py migrate\n\n3. Run server\n\nHow to use?\n-----------\n\n1. For example, to record an error\n\nIn the views.py::\n\t\t\n\tfrom log.utils import set_error_to_log\n\n\tdef myview(request, pk):\n\n\t\ttry:\n\t\t\traise \"Error auto generate\"\n\t\texcept Exception, e:\n\t\t\tset_error_to_log(request, str(e))\n\nWhen occurs on error, go the administrator and visualize the record in the model.\n\n2. For example, for get errors loaded on a date\n\t\nIn the views.py::\n\n\tfrom log.utils import get_data_log\n\n\tdef myview(request, pk):\n\n\t\tnow = datetime.datetime.now()\n\t\tdata = get_data_log('date', now)\n\t\tcontent = data[0].content\n\n\t\treturn HttpResponse(content)\n\nIn this example, i'm getting errors from field date with the value now. Then getting the first value.\nOther field can be username.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mapeveri/django-admin-log", "keywords": null, "license": "BSD License", "maintainer": null, "maintainer_email": null, "name": "django-admin-log", "package_url": "https://pypi.org/project/django-admin-log/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-admin-log/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mapeveri/django-admin-log"}, "release_url": "https://pypi.org/project/django-admin-log/0.2/", "requires_dist": null, "requires_python": null, "summary": "Application that logs errors generated in a web system into a model. The model is displayed in the administrator.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Application that logs errors generated in a web system into a model. The model is displayed in the administrator.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>pip install django-admin-log</p>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Include the app \u2018log\u2019 to INSTALLED_APPS in the settings.py</p>\n</li>\n<li><p>Apply migration with migrate for registry the model of django-seo-admin:</p>\n<pre>python manage.py migrate\n</pre>\n</li>\n<li><p>Run server</p>\n</li>\n</ol>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use?</h2>\n<ol>\n<li>For example, to record an error</li>\n</ol>\n<p>In the views.py:</p>\n<pre>from log.utils import set_error_to_log\n\ndef myview(request, pk):\n\n        try:\n                raise \"Error auto generate\"\n        except Exception, e:\n                set_error_to_log(request, str(e))\n</pre>\n<p>When occurs on error, go the administrator and visualize the record in the model.</p>\n<ol>\n<li>For example, for get errors loaded on a date</li>\n</ol>\n<p>In the views.py:</p>\n<pre>from log.utils import get_data_log\n\ndef myview(request, pk):\n\n        now = datetime.datetime.now()\n        data = get_data_log('date', now)\n        content = data[0].content\n\n        return HttpResponse(content)\n</pre>\n<p>In this example, i\u2019m getting errors from field date with the value now. Then getting the first value.\nOther field can be username.</p>\n</div>\n\n          </div>"}, "last_serial": 1509120, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8bc938922f2d4afffa2d0caaee4d5a57", "sha256": "cfaddfdb5ecdd35407ecd8ecd749d416f872632d75e1b078d6e43438c269dad9"}, "downloads": -1, "filename": "django-admin-log-0.1.tar.gz", "has_sig": false, "md5_digest": "8bc938922f2d4afffa2d0caaee4d5a57", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2607, "upload_time": "2015-04-17T01:24:02", "upload_time_iso_8601": "2015-04-17T01:24:02.582700Z", "url": "https://files.pythonhosted.org/packages/af/1f/af6f94283dc938fa0e310429f22d09132c498c0021fde1be75c0b7c06a4f/django-admin-log-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "7b27d97b93af7600ad46e1edb10fa810", "sha256": "416b9749047599f1ec1b67ff52c3ff580219cd9d056879408ca546f9b93eabae"}, "downloads": -1, "filename": "django-admin-log-0.2.tar.gz", "has_sig": false, "md5_digest": "7b27d97b93af7600ad46e1edb10fa810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2663, "upload_time": "2015-04-17T11:04:36", "upload_time_iso_8601": "2015-04-17T11:04:36.888952Z", "url": "https://files.pythonhosted.org/packages/cc/7c/6622751756c90d367f9df61db3e30ee01ccfd3617219f368dfa07e6658e7/django-admin-log-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7b27d97b93af7600ad46e1edb10fa810", "sha256": "416b9749047599f1ec1b67ff52c3ff580219cd9d056879408ca546f9b93eabae"}, "downloads": -1, "filename": "django-admin-log-0.2.tar.gz", "has_sig": false, "md5_digest": "7b27d97b93af7600ad46e1edb10fa810", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2663, "upload_time": "2015-04-17T11:04:36", "upload_time_iso_8601": "2015-04-17T11:04:36.888952Z", "url": "https://files.pythonhosted.org/packages/cc/7c/6622751756c90d367f9df61db3e30ee01ccfd3617219f368dfa07e6658e7/django-admin-log-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:49 2020"}