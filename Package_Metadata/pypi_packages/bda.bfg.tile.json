{"info": {"author": "BlueDynamics Alliance", "author_email": "dev@bluedynamics.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "A tile is a piece of web application, i.e. a form, a navigation, etc.\n\nSplitting your application in such small and logic application parts makes it\neasy to re-use this application, simplifies application ajaxification and\nthe use of same application parts in different manners.\n\nImports.:\n\n    >>> from bda.bfg.tile import Tile\n    >>> from bda.bfg.tile import TileRenderer\n    >>> from bda.bfg.tile import registerTile\n    >>> from bda.bfg.tile import tile\n    \nWe need some dummies as model and request.:\n\n    >>> class Model(object): pass\n    >>> model = Model()\n    >>> from repoze.bfg.request import DEFAULT_REQUEST_FACTORIES\n    >>> request = DEFAULT_REQUEST_FACTORIES[None]['factory'](environ={})\n    \nThe pure Tile itself. Normally you do not create this directly, this is done\ndue registration, see below.:\n\n    >>> mytile = Tile('testdata/tile1.pt', None)\n    >>> mytile(model,  request)\n    u'<span>Tile One</span>'\n\nRegister a tile using the prior template testtemplate. When no object is given,\nthe default tile is instanciated as above.:\n\n    >>> registerTile('tileone', 'testdata/tile1.pt')\n\nRender the already registered tile.:\n\n    >>> TileRenderer(model, request)('tileone')\n    u'<span>Tile One</span>'\n\nNow the decorator - level=1 is needed for the doctest only to reduce the module\nlevel.:\n\n    >>> @tile('tiletwo', 'testdata/tile2.pt', level=1)\n    ... class Tile2(Tile):\n    ...     data = u'custom'\n    >>> TileRenderer(model, request)('tiletwo')\n    u'<span>Tile Two: <b><span>Tile One</span></b></span>'\n\nYou can define an attribute which is responsible to render the tile instead of\ndefining a template. By default ``render`` is taken. With the keyword argument \n``attribute`` you can point to a different attribute.:\n    \n    >>> @tile('attrtile')\n    ... class Tile2(Tile):\n    ...     def render(self):\n    ...         return u'<h1>Rendered via attribute call</h1>'\n    >>> TileRenderer(model, request)('attrtile')\n    u'<h1>Rendered via attribute call</h1>'\n    \n    >>> @tile('attrtile', attribute='foobar')\n    ... class Tile2(Tile):\n    ...     def foobar(self):\n    ...         return u'<h1>Rendered via attribute foobar call</h1>'\n    >>> TileRenderer(model, request)('attrtile')\n    u'<h1>Rendered via attribute foobar call</h1>'", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://svn.bluedynamics.net/svn/internal/bda.tile", "keywords": "", "license": "GNU General Public Licence", "maintainer": null, "maintainer_email": null, "name": "bda.bfg.tile", "package_url": "https://pypi.org/project/bda.bfg.tile/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/bda.bfg.tile/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://svn.bluedynamics.net/svn/internal/bda.tile"}, "release_url": "https://pypi.org/project/bda.bfg.tile/1.0/", "requires_dist": null, "requires_python": null, "summary": "Handle web application parts as tiles.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A tile is a piece of web application, i.e. a form, a navigation, etc.</p>\n<p>Splitting your application in such small and logic application parts makes it\neasy to re-use this application, simplifies application ajaxification and\nthe use of same application parts in different manners.</p>\n<p>Imports.:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from bda.bfg.tile import Tile\n&gt;&gt;&gt; from bda.bfg.tile import TileRenderer\n&gt;&gt;&gt; from bda.bfg.tile import registerTile\n&gt;&gt;&gt; from bda.bfg.tile import tile\n</pre>\n</blockquote>\n<p>We need some dummies as model and request.:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; class Model(object): pass\n&gt;&gt;&gt; model = Model()\n&gt;&gt;&gt; from repoze.bfg.request import DEFAULT_REQUEST_FACTORIES\n&gt;&gt;&gt; request = DEFAULT_REQUEST_FACTORIES[None]['factory'](environ={})\n</pre>\n</blockquote>\n<p>The pure Tile itself. Normally you do not create this directly, this is done\ndue registration, see below.:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; mytile = Tile('testdata/tile1.pt', None)\n&gt;&gt;&gt; mytile(model,  request)\nu'&lt;span&gt;Tile One&lt;/span&gt;'\n</pre>\n</blockquote>\n<p>Register a tile using the prior template testtemplate. When no object is given,\nthe default tile is instanciated as above.:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; registerTile('tileone', 'testdata/tile1.pt')\n</pre>\n</blockquote>\n<p>Render the already registered tile.:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; TileRenderer(model, request)('tileone')\nu'&lt;span&gt;Tile One&lt;/span&gt;'\n</pre>\n</blockquote>\n<p>Now the decorator - level=1 is needed for the doctest only to reduce the module\nlevel.:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; @tile('tiletwo', 'testdata/tile2.pt', level=1)\n... class Tile2(Tile):\n...     data = u'custom'\n&gt;&gt;&gt; TileRenderer(model, request)('tiletwo')\nu'&lt;span&gt;Tile Two: &lt;b&gt;&lt;span&gt;Tile One&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;'\n</pre>\n</blockquote>\n<p>You can define an attribute which is responsible to render the tile instead of\ndefining a template. By default <tt>render</tt> is taken. With the keyword argument\n<tt>attribute</tt> you can point to a different attribute.:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; @tile('attrtile')\n... class Tile2(Tile):\n...     def render(self):\n...         return u'&lt;h1&gt;Rendered via attribute call&lt;/h1&gt;'\n&gt;&gt;&gt; TileRenderer(model, request)('attrtile')\nu'&lt;h1&gt;Rendered via attribute call&lt;/h1&gt;'\n</pre>\n<pre>&gt;&gt;&gt; @tile('attrtile', attribute='foobar')\n... class Tile2(Tile):\n...     def foobar(self):\n...         return u'&lt;h1&gt;Rendered via attribute foobar call&lt;/h1&gt;'\n&gt;&gt;&gt; TileRenderer(model, request)('attrtile')\nu'&lt;h1&gt;Rendered via attribute foobar call&lt;/h1&gt;'\n</pre>\n</blockquote>\n\n          </div>"}, "last_serial": 786751, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5781d18ce262042b5cf81f5f010c7f98", "sha256": "18ab1b358b7a40bda8820f0f0ae0e8d8d1bdaa92a63ebffc5f8f1010470e3ed8"}, "downloads": -1, "filename": "bda.bfg.tile-1.0.tar.gz", "has_sig": false, "md5_digest": "5781d18ce262042b5cf81f5f010c7f98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5015, "upload_time": "2009-09-10T17:02:04", "upload_time_iso_8601": "2009-09-10T17:02:04.831214Z", "url": "https://files.pythonhosted.org/packages/a9/90/5fbb2f0d93a294201f80ba127450e3406749c22623df001f4bbbbcf0e0b8/bda.bfg.tile-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5781d18ce262042b5cf81f5f010c7f98", "sha256": "18ab1b358b7a40bda8820f0f0ae0e8d8d1bdaa92a63ebffc5f8f1010470e3ed8"}, "downloads": -1, "filename": "bda.bfg.tile-1.0.tar.gz", "has_sig": false, "md5_digest": "5781d18ce262042b5cf81f5f010c7f98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5015, "upload_time": "2009-09-10T17:02:04", "upload_time_iso_8601": "2009-09-10T17:02:04.831214Z", "url": "https://files.pythonhosted.org/packages/a9/90/5fbb2f0d93a294201f80ba127450e3406749c22623df001f4bbbbcf0e0b8/bda.bfg.tile-1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:35 2020"}