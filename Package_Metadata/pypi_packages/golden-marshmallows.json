{"info": {"author": "Guillaume Chorn", "author_email": "guillaume.chorn@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# golden-marshmallows\nA better integration between SQLAlchemy and Marshmallow. A little (SQL)alchemy to turn `marshmallow`s into gold.\n\n# Installation\nSimply install with `pip`:\n```\n$ pip install golden-marshmallows\n```\n# Usage\n## Serialization\nTake these SQLAlchemy models as examples:\n```python\nclass WizardCollege(Base):\n    __tablename__ = 'wizard_college'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    alchemists = relationship('Alchemist')\n\n    def __repr__(self):\n        return '<WizardCollege(name={self.name!r})>'.format(self=self)\n\nclass Alchemist(Base):\n    __tablename__ = 'alchemists'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    school_id = Column(Integer, ForeignKey('wizard_college.id'))\n    formulae = relationship('Formula')\n\n    def __repr__(self):\n        return '<Alchemist(name={self.name!r})>'.format(self=self)\n\nclass Formula(Base):\n    __tablename__ = 'forumulae'\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    author_id = Column(Integer, ForeignKey('alchemists.id'))\n\n    def __repr__(self):\n        return '<Formula(title={self.title!r})>'.format(self=self)\n```\nThe `GoldenSchema` class allows quick and easy generation of `marshmallow` schemas that can be used for SQLAlchemy object serialization/deserialization. Simply pass the model class on initialization and you're ready to go:\n```python\nimport json\nfrom golden_marshmallows.schema import GoldenSchema\nfrom models import Alchemist, Formula, WizardCollege\n\nalchemist = Alchemist(name='Albertus Magnus', school_id=1)\nsession.add(alchemist)\nsession.flush()\n\nschema = GoldenSchema(Alchemist)\n\nserialized = schema.dump(alchemist).data\n\nprint(json.dump(serialized, indent=4))\n# {\n#     \"id\": 1,\n#     \"name\": \"Albertus Magnus\",\n#     \"school_id\": 1\n# }\n```\nThat's it! No need to define your own `Schema` subclass, unless you really want to (more on that below).\n\n## Nested objects\nBut what about this alchemist's formulae? Nested objects can easily be added to the mix by passing in a dictionary mapping each field that contains a nested object (or objects) to the relevant SQLAlchemy class:\n```python\nnested_map = {\n    'formulae': {\n        'class': Formula,\n        'many': True\n    }\n}\n\nformula = Formula(title='transmutation')\nalchemist.formulae.append(formula)\nsession.commit()\n\nschema = GoldenSchema(Alchemist, nested_map=nested_map)\n\nserialized = schema.dump(alchemist).data\n\nprint(json.dump(serialized, indent=4))\n# {\n#     \"id\": 1,\n#     \"name\": \"Albertus Magnus\",\n#     \"school_id\": 1,\n#     \"formulae\" : [\n#         {\n#             \"title\": \"transmutation\"\n#         }\n#     ]\n# }\n```\nIn fact, the `GoldenSchema` class supports arbitrary nesting in this fashion, simply adjust the map as necessary:\n```python\nnested_map = {\n    'alchemists': {\n        'class': Alchemist,\n        'many': True,\n        'nested_map': {\n            'formulae': {\n                'class': Formula,\n                'many': True\n            }\n        }\n    }\n}\n\ncollege = WizardCollege(name='Bogwarts')\ncollege.alchemists.append(alchemist)\nsession.add(college)\nsession.flush()\n\nschema = GoldenSchema(WizardCollege, nested_map=nested_map)\n\nserialized = schema.dump(college).data\n\nprint(json.dump(serialized, indent=4))\n# {\n#     \"id\": 1,\n#     \"name\": \"Bogwarts\",\n#     \"alchemists\": [\n#         {\n#             \"id\": 1,\n#             \"school_id\": 1,\n#             \"name\": \"Albertus Magnus\",\n#             \"formulae\": [\n#                 {\n#                     \"title\": \"transmutation\",\n#                     \"author_id\": 1,\n#                     \"id\": 1\n#                 }\n#             ]\n#         }\n#     ]\n# }\n```\nYou may need more control over the `GoldenSchema` instances that are nested into your top-level schema in the `nested_map` parameter. If that's the case, you can simply create a nested `GoldenSchema` instance and pass it in directly like so:\n```python\nfrom marshmallow.fields import List, String\n\n\nFormulaSchema = GoldenSchema(Formula)\n\n\nclass FormulaSchemaWithIngredients(FormulaSchema):\n    ingredients = List(String())\n\n\nnested_map = {\n    'formulae': {\n        'class': FormulaSchemaWithIngredients,\n        'many': True\n    }\n}\n\nalchemist = session.query(Alchemist).first()\nformula = alchemist.formulae[0]\nformula.ingredients = ['lead', 'magic']\n\nschema = GoldenSchema(Alchemist, nested_map=nested_map)\n\nserialized = schema.dump(alchemist).data\n\nprint(json.dump(serialized, indent=4))\n# {\n#     \"id\": 1,\n#     \"name\": \"Albertus Magnus\",\n#     \"school_id\": 1,\n#     \"formulae\" : [\n#         {\n#             \"title\": \"transmutation\",\n#             \"ingredients\": [\n#                 \"lead\",\n#                 \"magic\"\n#             ]\n#         }\n#     ]\n# }\n```\n## Deserialization\nOf course, you can deserialize data into SQLAlchemy objects just as easily:\n```python\n# Start at the end of the last example and work backwards\ndata = {\n    \"id\": 1,\n    \"name\": \"Bogwarts\",\n    \"alchemists\": [\n        {\n            \"formulae\": [\n                {\n                    \"title\": \"transmutation\",\n                    \"author_id\": 1,\n                    \"id\": 1\n                }\n            ],\n            \"school_id\": 1,\n            \"id\": 1,\n            \"name\": \"Albertus Magnus\"\n        }\n    ]\n}\n\ncollege = schema.load(data).data\nprint(college)\n# <WizardCollege(name='Bogwarts')>\nprint(college.alchemists)\n# [<Alchemist(name='Albertus Magnus')>]\nprint(college.alchemists[0].formulae)\n# [<Formula(title='transmutation')>]\n```\n# Extra Features\n## camelCasing/snake_casing\nThe `snake_to_camel` flag allows serde to/from camelCase, for example when serializing Python data into JSON to send as an API Response:\n```python\n# `Formula.author_id` is easily converted to camelCase\nschema = GoldenSchema(Formula, snake_to_camel=True)\n\nserialized = schema.dump(formula).data\n\nprint(json.dumps(serialized, indent=4))\n# Notice `author_id` has become `authorId`\n# {\n#     \"title\": \"transmutation\",\n#     \"authorId\": 1,\n#     \"id\": 1\n# }\n```\nThe same `GoldenSchema` instance, when used to `load` (deserialize) data, will expect camelCased attributes and load them as snake_cased attributes:\n```python\ndata = {\n    \"title\": \"transmutation\",\n    \"authorId\": 1,\n    \"id\": 1\n}\nformula = schema.load(data).data\n\nprint(formula.author_id)\n# 1\n```\nA flag with the opposite behavior, `camel_to_snake`, is also included.\n\nThis feature also works for manually declared fields; that is, fields you yourself declare when subclassing `GoldenSchema` like so:\n```python\nclass MySchema(GoldenSchema):\n    manually_declared = fields.Function(lambda obj: 'my special value')\n\nmy_schema = MySchema(Formula, snake_to_camel=True)\n\nserialized = schema.dump(formula).data\nprint(json.dumps(serialized, indent=4))\n# `manually_declared` has become camelCase\n# {\n#     \"title\": \"transmutation\",\n#     \"authorId\": 1,\n#     \"id\": 1,\n#     \"manuallyDeclared\": \"my special value\"\n# }\n```\nIn fact, you can use this feature without involving SQLAlchemy at all; just use `CaseChangingSchema`, the parent class of `GoldenSchema`:\n```python\nfrom golden_marshmallows.schema import CaseChangingSchema\n\nclass SnakeSchema(CaseChangingSchema):\n    attr_one = fields.String()\n    attr_two = fields.Integer()\n\nclass SnakeObj:\n    def __init__(self, attr_one, attr_two):\n        self.attr_one = attr_one\n        self.attr_two = attr_two\n\nschema = SnakeSchema(snake_to_camel=True)\nobj = SnakeObj('field1', 2)\n\nserialized = schema.dump(obj).data\nprint(json.dumps(serialized, indent=4))\n# {\n#     'attrOne': 'field1',\n#     'attrTwo': 2\n# }\n```\n\n## Copying objects\nAs a minor convenience, you can pass the `new_obj` flag on initialization to indicate that any fields named `id` should be ignored during deserialization:\n```python\nschema = GoldenSchema(Formula, snake_to_camel=True, new_obj=True)\n\ndata = {\n    \"title\": \"transmutation\",\n    \"authorId\": 1,\n    \"id\": 1\n}\n\nnew_formula = schema.load(data).data\nprint(new_formula.title)\n# 'transmutation'\nprint(new_formula.id)  # None\n```\nThis allows you to quickly deserialize data representations of existing objects into new copies.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/gchorn/golden-marshmallows/archive/v0.2.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gchorn/golden-marshmallows", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "golden-marshmallows", "package_url": "https://pypi.org/project/golden-marshmallows/", "platform": "", "project_url": "https://pypi.org/project/golden-marshmallows/", "project_urls": {"Download": "https://github.com/gchorn/golden-marshmallows/archive/v0.2.1.tar.gz", "Homepage": "https://github.com/gchorn/golden-marshmallows"}, "release_url": "https://pypi.org/project/golden-marshmallows/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Marshmallow Schema subclass that auto-defines fields based on SQLAlchemy classes", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>golden-marshmallows</h1>\n<p>A better integration between SQLAlchemy and Marshmallow. A little (SQL)alchemy to turn <code>marshmallow</code>s into gold.</p>\n<h1>Installation</h1>\n<p>Simply install with <code>pip</code>:</p>\n<pre><code>$ pip install golden-marshmallows\n</code></pre>\n<h1>Usage</h1>\n<h2>Serialization</h2>\n<p>Take these SQLAlchemy models as examples:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">WizardCollege</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'wizard_college'</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n    <span class=\"n\">alchemists</span> <span class=\"o\">=</span> <span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s1\">'Alchemist'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'&lt;WizardCollege(name=</span><span class=\"si\">{self.name!r}</span><span class=\"s1\">)&gt;'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Alchemist</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'alchemists'</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n    <span class=\"n\">school_id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'wizard_college.id'</span><span class=\"p\">))</span>\n    <span class=\"n\">formulae</span> <span class=\"o\">=</span> <span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"s1\">'Formula'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'&lt;Alchemist(name=</span><span class=\"si\">{self.name!r}</span><span class=\"s1\">)&gt;'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Formula</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'forumulae'</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n    <span class=\"n\">author_id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"s1\">'alchemists.id'</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'&lt;Formula(title=</span><span class=\"si\">{self.title!r}</span><span class=\"s1\">)&gt;'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre>\n<p>The <code>GoldenSchema</code> class allows quick and easy generation of <code>marshmallow</code> schemas that can be used for SQLAlchemy object serialization/deserialization. Simply pass the model class on initialization and you're ready to go:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">golden_marshmallows.schema</span> <span class=\"kn\">import</span> <span class=\"n\">GoldenSchema</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models</span> <span class=\"kn\">import</span> <span class=\"n\">Alchemist</span><span class=\"p\">,</span> <span class=\"n\">Formula</span><span class=\"p\">,</span> <span class=\"n\">WizardCollege</span>\n\n<span class=\"n\">alchemist</span> <span class=\"o\">=</span> <span class=\"n\">Alchemist</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Albertus Magnus'</span><span class=\"p\">,</span> <span class=\"n\">school_id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">alchemist</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">GoldenSchema</span><span class=\"p\">(</span><span class=\"n\">Alchemist</span><span class=\"p\">)</span>\n\n<span class=\"n\">serialized</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">alchemist</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">serialized</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     \"id\": 1,</span>\n<span class=\"c1\">#     \"name\": \"Albertus Magnus\",</span>\n<span class=\"c1\">#     \"school_id\": 1</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>That's it! No need to define your own <code>Schema</code> subclass, unless you really want to (more on that below).</p>\n<h2>Nested objects</h2>\n<p>But what about this alchemist's formulae? Nested objects can easily be added to the mix by passing in a dictionary mapping each field that contains a nested object (or objects) to the relevant SQLAlchemy class:</p>\n<pre><span class=\"n\">nested_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'formulae'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"n\">Formula</span><span class=\"p\">,</span>\n        <span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">formula</span> <span class=\"o\">=</span> <span class=\"n\">Formula</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">'transmutation'</span><span class=\"p\">)</span>\n<span class=\"n\">alchemist</span><span class=\"o\">.</span><span class=\"n\">formulae</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">formula</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">GoldenSchema</span><span class=\"p\">(</span><span class=\"n\">Alchemist</span><span class=\"p\">,</span> <span class=\"n\">nested_map</span><span class=\"o\">=</span><span class=\"n\">nested_map</span><span class=\"p\">)</span>\n\n<span class=\"n\">serialized</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">alchemist</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">serialized</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     \"id\": 1,</span>\n<span class=\"c1\">#     \"name\": \"Albertus Magnus\",</span>\n<span class=\"c1\">#     \"school_id\": 1,</span>\n<span class=\"c1\">#     \"formulae\" : [</span>\n<span class=\"c1\">#         {</span>\n<span class=\"c1\">#             \"title\": \"transmutation\"</span>\n<span class=\"c1\">#         }</span>\n<span class=\"c1\">#     ]</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>In fact, the <code>GoldenSchema</code> class supports arbitrary nesting in this fashion, simply adjust the map as necessary:</p>\n<pre><span class=\"n\">nested_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'alchemists'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"n\">Alchemist</span><span class=\"p\">,</span>\n        <span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">'nested_map'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">'formulae'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"n\">Formula</span><span class=\"p\">,</span>\n                <span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">college</span> <span class=\"o\">=</span> <span class=\"n\">WizardCollege</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Bogwarts'</span><span class=\"p\">)</span>\n<span class=\"n\">college</span><span class=\"o\">.</span><span class=\"n\">alchemists</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">alchemist</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">college</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">GoldenSchema</span><span class=\"p\">(</span><span class=\"n\">WizardCollege</span><span class=\"p\">,</span> <span class=\"n\">nested_map</span><span class=\"o\">=</span><span class=\"n\">nested_map</span><span class=\"p\">)</span>\n\n<span class=\"n\">serialized</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">college</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">serialized</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     \"id\": 1,</span>\n<span class=\"c1\">#     \"name\": \"Bogwarts\",</span>\n<span class=\"c1\">#     \"alchemists\": [</span>\n<span class=\"c1\">#         {</span>\n<span class=\"c1\">#             \"id\": 1,</span>\n<span class=\"c1\">#             \"school_id\": 1,</span>\n<span class=\"c1\">#             \"name\": \"Albertus Magnus\",</span>\n<span class=\"c1\">#             \"formulae\": [</span>\n<span class=\"c1\">#                 {</span>\n<span class=\"c1\">#                     \"title\": \"transmutation\",</span>\n<span class=\"c1\">#                     \"author_id\": 1,</span>\n<span class=\"c1\">#                     \"id\": 1</span>\n<span class=\"c1\">#                 }</span>\n<span class=\"c1\">#             ]</span>\n<span class=\"c1\">#         }</span>\n<span class=\"c1\">#     ]</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>You may need more control over the <code>GoldenSchema</code> instances that are nested into your top-level schema in the <code>nested_map</code> parameter. If that's the case, you can simply create a nested <code>GoldenSchema</code> instance and pass it in directly like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">marshmallow.fields</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">String</span>\n\n\n<span class=\"n\">FormulaSchema</span> <span class=\"o\">=</span> <span class=\"n\">GoldenSchema</span><span class=\"p\">(</span><span class=\"n\">Formula</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FormulaSchemaWithIngredients</span><span class=\"p\">(</span><span class=\"n\">FormulaSchema</span><span class=\"p\">):</span>\n    <span class=\"n\">ingredients</span> <span class=\"o\">=</span> <span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">())</span>\n\n\n<span class=\"n\">nested_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'formulae'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'class'</span><span class=\"p\">:</span> <span class=\"n\">FormulaSchemaWithIngredients</span><span class=\"p\">,</span>\n        <span class=\"s1\">'many'</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">alchemist</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Alchemist</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"n\">formula</span> <span class=\"o\">=</span> <span class=\"n\">alchemist</span><span class=\"o\">.</span><span class=\"n\">formulae</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">formula</span><span class=\"o\">.</span><span class=\"n\">ingredients</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'lead'</span><span class=\"p\">,</span> <span class=\"s1\">'magic'</span><span class=\"p\">]</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">GoldenSchema</span><span class=\"p\">(</span><span class=\"n\">Alchemist</span><span class=\"p\">,</span> <span class=\"n\">nested_map</span><span class=\"o\">=</span><span class=\"n\">nested_map</span><span class=\"p\">)</span>\n\n<span class=\"n\">serialized</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">alchemist</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">serialized</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     \"id\": 1,</span>\n<span class=\"c1\">#     \"name\": \"Albertus Magnus\",</span>\n<span class=\"c1\">#     \"school_id\": 1,</span>\n<span class=\"c1\">#     \"formulae\" : [</span>\n<span class=\"c1\">#         {</span>\n<span class=\"c1\">#             \"title\": \"transmutation\",</span>\n<span class=\"c1\">#             \"ingredients\": [</span>\n<span class=\"c1\">#                 \"lead\",</span>\n<span class=\"c1\">#                 \"magic\"</span>\n<span class=\"c1\">#             ]</span>\n<span class=\"c1\">#         }</span>\n<span class=\"c1\">#     ]</span>\n<span class=\"c1\"># }</span>\n</pre>\n<h2>Deserialization</h2>\n<p>Of course, you can deserialize data into SQLAlchemy objects just as easily:</p>\n<pre><span class=\"c1\"># Start at the end of the last example and work backwards</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bogwarts\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"alchemists\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"formulae\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"transmutation\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"author_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">],</span>\n            <span class=\"s2\">\"school_id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Albertus Magnus\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">college</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">college</span><span class=\"p\">)</span>\n<span class=\"c1\"># &lt;WizardCollege(name='Bogwarts')&gt;</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">college</span><span class=\"o\">.</span><span class=\"n\">alchemists</span><span class=\"p\">)</span>\n<span class=\"c1\"># [&lt;Alchemist(name='Albertus Magnus')&gt;]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">college</span><span class=\"o\">.</span><span class=\"n\">alchemists</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">formulae</span><span class=\"p\">)</span>\n<span class=\"c1\"># [&lt;Formula(title='transmutation')&gt;]</span>\n</pre>\n<h1>Extra Features</h1>\n<h2>camelCasing/snake_casing</h2>\n<p>The <code>snake_to_camel</code> flag allows serde to/from camelCase, for example when serializing Python data into JSON to send as an API Response:</p>\n<pre><span class=\"c1\"># `Formula.author_id` is easily converted to camelCase</span>\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">GoldenSchema</span><span class=\"p\">(</span><span class=\"n\">Formula</span><span class=\"p\">,</span> <span class=\"n\">snake_to_camel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">serialized</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">formula</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">serialized</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># Notice `author_id` has become `authorId`</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     \"title\": \"transmutation\",</span>\n<span class=\"c1\">#     \"authorId\": 1,</span>\n<span class=\"c1\">#     \"id\": 1</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>The same <code>GoldenSchema</code> instance, when used to <code>load</code> (deserialize) data, will expect camelCased attributes and load them as snake_cased attributes:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"transmutation\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"authorId\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n<span class=\"n\">formula</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">formula</span><span class=\"o\">.</span><span class=\"n\">author_id</span><span class=\"p\">)</span>\n<span class=\"c1\"># 1</span>\n</pre>\n<p>A flag with the opposite behavior, <code>camel_to_snake</code>, is also included.</p>\n<p>This feature also works for manually declared fields; that is, fields you yourself declare when subclassing <code>GoldenSchema</code> like so:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MySchema</span><span class=\"p\">(</span><span class=\"n\">GoldenSchema</span><span class=\"p\">):</span>\n    <span class=\"n\">manually_declared</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"s1\">'my special value'</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_schema</span> <span class=\"o\">=</span> <span class=\"n\">MySchema</span><span class=\"p\">(</span><span class=\"n\">Formula</span><span class=\"p\">,</span> <span class=\"n\">snake_to_camel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">serialized</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">formula</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">serialized</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># `manually_declared` has become camelCase</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     \"title\": \"transmutation\",</span>\n<span class=\"c1\">#     \"authorId\": 1,</span>\n<span class=\"c1\">#     \"id\": 1,</span>\n<span class=\"c1\">#     \"manuallyDeclared\": \"my special value\"</span>\n<span class=\"c1\"># }</span>\n</pre>\n<p>In fact, you can use this feature without involving SQLAlchemy at all; just use <code>CaseChangingSchema</code>, the parent class of <code>GoldenSchema</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">golden_marshmallows.schema</span> <span class=\"kn\">import</span> <span class=\"n\">CaseChangingSchema</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SnakeSchema</span><span class=\"p\">(</span><span class=\"n\">CaseChangingSchema</span><span class=\"p\">):</span>\n    <span class=\"n\">attr_one</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">String</span><span class=\"p\">()</span>\n    <span class=\"n\">attr_two</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SnakeObj</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attr_one</span><span class=\"p\">,</span> <span class=\"n\">attr_two</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attr_one</span> <span class=\"o\">=</span> <span class=\"n\">attr_one</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attr_two</span> <span class=\"o\">=</span> <span class=\"n\">attr_two</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">SnakeSchema</span><span class=\"p\">(</span><span class=\"n\">snake_to_camel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">SnakeObj</span><span class=\"p\">(</span><span class=\"s1\">'field1'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">serialized</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">serialized</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     'attrOne': 'field1',</span>\n<span class=\"c1\">#     'attrTwo': 2</span>\n<span class=\"c1\"># }</span>\n</pre>\n<h2>Copying objects</h2>\n<p>As a minor convenience, you can pass the <code>new_obj</code> flag on initialization to indicate that any fields named <code>id</code> should be ignored during deserialization:</p>\n<pre><span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">GoldenSchema</span><span class=\"p\">(</span><span class=\"n\">Formula</span><span class=\"p\">,</span> <span class=\"n\">snake_to_camel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">new_obj</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"transmutation\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"authorId\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">new_formula</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_formula</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>\n<span class=\"c1\"># 'transmutation'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">new_formula</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>  <span class=\"c1\"># None</span>\n</pre>\n<p>This allows you to quickly deserialize data representations of existing objects into new copies.</p>\n\n          </div>"}, "last_serial": 6892772, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "8262dae6cbca6801d269f1142fa4b2a4", "sha256": "0af24553b59661ff87ca3bd3a92bc10f93bceecbb2109c8dec1119adbeb8d915"}, "downloads": -1, "filename": "golden_marshmallows-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8262dae6cbca6801d269f1142fa4b2a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4757, "upload_time": "2018-04-12T06:00:13", "upload_time_iso_8601": "2018-04-12T06:00:13.030614Z", "url": "https://files.pythonhosted.org/packages/60/58/dd6b2dbe4fe5c27a9ea012aa63222b74ef541cfeec2da1a04ac955adef37/golden_marshmallows-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f659b892b98502eccc58fc425030df06", "sha256": "94cd0a3155d7a1ee4c00cbab3faaafe286f3aaf2e0617044dd4ddc3e81a54891"}, "downloads": -1, "filename": "golden_marshmallows-0.2.0.tar.gz", "has_sig": false, "md5_digest": "f659b892b98502eccc58fc425030df06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6470, "upload_time": "2018-05-11T19:37:35", "upload_time_iso_8601": "2018-05-11T19:37:35.744194Z", "url": "https://files.pythonhosted.org/packages/fb/18/d4cf2f51612e84803e0363e3cc7bce7a352f03a29b857498d153c433d0aa/golden_marshmallows-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "4a86c84abcac1e67417c0143aa4b2e99", "sha256": "cdb238247f8a277a29e2736676c6b3120938c65b328f7b6ffd9d8f77326aadab"}, "downloads": -1, "filename": "golden_marshmallows-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a86c84abcac1e67417c0143aa4b2e99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7208, "upload_time": "2020-03-27T00:25:20", "upload_time_iso_8601": "2020-03-27T00:25:20.570907Z", "url": "https://files.pythonhosted.org/packages/74/b7/12bb4c39af9b325b164d988cac4a8d4baae7b8d0b1f984586553dc95574f/golden_marshmallows-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "199dcd4b6e0ce51e06e004bf3bd61a9a", "sha256": "d5bec337926dfc0dd04a314ee3c0bd5c670dc68ec48754076978d398ebb633e2"}, "downloads": -1, "filename": "golden_marshmallows-0.2.1.tar.gz", "has_sig": false, "md5_digest": "199dcd4b6e0ce51e06e004bf3bd61a9a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6545, "upload_time": "2020-03-04T19:55:14", "upload_time_iso_8601": "2020-03-04T19:55:14.749846Z", "url": "https://files.pythonhosted.org/packages/3c/be/aefed507986d85164c13aba06e0a415c4c9fee30218f0f59af8d25dc4f21/golden_marshmallows-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "f73f402aabe2232e04aeab72d66e0939", "sha256": "457a6a0d197eef9cdaa0a6243e5f0049c4e4ff01eb843ca18b49d5b7890a301c"}, "downloads": -1, "filename": "golden_marshmallows-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f73f402aabe2232e04aeab72d66e0939", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8318, "upload_time": "2020-03-27T00:27:18", "upload_time_iso_8601": "2020-03-27T00:27:18.665390Z", "url": "https://files.pythonhosted.org/packages/2b/fa/4caf5500d9bd56a13c25e451c19091f91bfe0326ea11aab98f9eee19d552/golden_marshmallows-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f73f402aabe2232e04aeab72d66e0939", "sha256": "457a6a0d197eef9cdaa0a6243e5f0049c4e4ff01eb843ca18b49d5b7890a301c"}, "downloads": -1, "filename": "golden_marshmallows-0.3.0.tar.gz", "has_sig": false, "md5_digest": "f73f402aabe2232e04aeab72d66e0939", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8318, "upload_time": "2020-03-27T00:27:18", "upload_time_iso_8601": "2020-03-27T00:27:18.665390Z", "url": "https://files.pythonhosted.org/packages/2b/fa/4caf5500d9bd56a13c25e451c19091f91bfe0326ea11aab98f9eee19d552/golden_marshmallows-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:56 2020"}