{"info": {"author": "Michael Fladischer", "author_email": "michael@fladi.at", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Internet :: WWW/HTTP :: WSGI :: Application", "Topic :: Multimedia :: Sound/Audio", "Topic :: Multimedia :: Video"], "description": "django-icecast-balancer\n=======================\n\nA easy to set up HTTP load balancer for Icecast2 servers using the Django \nframework. It redirects clients like VLC or Xine along several instances of \nIcecast2 providing the same stream.\n\n\nHow it works\n------------\n  The application itself polls all configured Icecast2 servers for free slots \n  on their streams and uses HTTP redirects (302) to distribute clients to free \n  streaming slots. Selection of free slots is based on GeoIP support if available.\n\nDownload\n--------\n  http://pypi.python.org/\n\nInstallation\n------------\nFrom source:\n  1. Download the tar.gz file\n  2. Extract it: tar xfz django-icecast-balancer-.tar.gz\n  3. Run the setup: python django-icecast-balancer-/setup.py install \n\nDebian package:\n  Install the package from http://debian.fladi.at/.\n\nIntegration\n-----------\nDjango\n~~~~~~\n  ALERT! This example is using the Django runserver command which is only intended \n  for development, not for production use. If you are looking for a way to provide \n  icecast_balancer in a high-demand environment, take a look at mod_wsgi which is \n  much more suitable. \n\n  Add icecast_balancer to INSTALLED_APPS in settings.py and a URL mapping in urls.py \n  for the balancer in your project:\n\n    urlpatterns = patterns('',\n        (r'^icecast_balancer/', include('icecast_balancer.urls')),\n    )\n\n  After that synchronize the database:\n\n    django-admin syncdb --settings=my_weave_server.settings --pythonpath=.\n\n  Run the development server:\n\n    django-admin runserver --settings=my_weave_server.settings --pythonpath=.\n\nIcecast2 XSLT interface\n~~~~~~~~~~~~~~~~~~~~~~~\n  The load-balancer needs to be able to periodically poll the status of the configured \n  Icecast2 servers. Therefor the package includes the file load.xsl. This file needs to \n  be copied to the web root of each Icecast2 server that will take part in the load-balancer. \n  For Debian this location is at /usr/share/icecast2/web/. To test if the file is at the \n  right location open the URL to the Icecast2 server in the browser and attach load.xsl \n  to it like this:\n\n    http://<icecast2-ip>:<icecast2-port>/load.xsl \n\n  The output should look something like this:\n\n    <load>\n      <mount name=\"/fm4-hq.ogg\">32</mount>\n      <mount name=\"/fm4-lq.ogg\">96</mount>\n      <mount name=\"/fm4-mq.ogg\">64</mount>\n    </load>\n\n  If there is an error stating \"The file you requested could not be found\" the file \n  is probably not in the right folder.\n\nUpdating the servers\n--------------------\nCreate a new cronjob for the user running the Django project:\n\n  */5 * * * * python path/to/project/manage.py icecastpoll --settings=project.settings\n\n  An interval of 5 minutes as shown in the above example should be sufficient but it \n  can be decreased down to 1 minute.\n\nCelery\n~~~~~~\n  If the Django project includes a working setup for Celery the management command \n  \"icecastpoll\" will automatically dispatch the update as a async task. The cronjob \n  is still required to trigger the updates.\n\nUsage\n-----\n  Got to the admin interface of the Django instance. There are now three models for \n  the icecast_balancer application:\n    * Mounts\n    * Servers\n    * Streams \n\n  Populate them with the servers and streams to match the actual Icecast setup.\n\n  Once everything is setup up correctly test the load-balancer by opening a stream \n  in your favourite video player:\n\n    http://<django-hostname>/icecast_balancer/<stream-name>/\n\n  The player will now be redirected to a Icecast2 server and the stream will be \n  played from there. \n  \nFeedback\n--------\n\nUse `Issue Tracker on Google Code`__ for the bug reports / feature requests.\n\nContact me directly at michael@fladi.at.\n\n__ http://code.google.com/p/django-icecast-balancer/issues/list", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/django-icecast-balancer/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-icecast-balancer", "package_url": "https://pypi.org/project/django-icecast-balancer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-icecast-balancer/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/django-icecast-balancer/"}, "release_url": "https://pypi.org/project/django-icecast-balancer/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "A simple HTTP based load balancer for Icecast streaming servers.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            django-icecast-balancer<br>=======================<br><br>A easy to set up HTTP load balancer for Icecast2 servers using the Django <br>framework. It redirects clients like VLC or Xine along several instances of <br>Icecast2 providing the same stream.<br><br><br>How it works<br>------------<br>  The application itself polls all configured Icecast2 servers for free slots <br>  on their streams and uses HTTP redirects (302) to distribute clients to free <br>  streaming slots. Selection of free slots is based on GeoIP support if available.<br><br>Download<br>--------<br>  http://pypi.python.org/<br><br>Installation<br>------------<br>From source:<br>  1. Download the tar.gz file<br>  2. Extract it: tar xfz django-icecast-balancer-.tar.gz<br>  3. Run the setup: python django-icecast-balancer-/setup.py install <br><br>Debian package:<br>  Install the package from http://debian.fladi.at/.<br><br>Integration<br>-----------<br>Django<br>~~~~~~<br>  ALERT! This example is using the Django runserver command which is only intended <br>  for development, not for production use. If you are looking for a way to provide <br>  icecast_balancer in a high-demand environment, take a look at mod_wsgi which is <br>  much more suitable. <br><br>  Add icecast_balancer to INSTALLED_APPS in settings.py and a URL mapping in urls.py <br>  for the balancer in your project:<br><br>    urlpatterns = patterns('',<br>        (r'^icecast_balancer/', include('icecast_balancer.urls')),<br>    )<br><br>  After that synchronize the database:<br><br>    django-admin syncdb --settings=my_weave_server.settings --pythonpath=.<br><br>  Run the development server:<br><br>    django-admin runserver --settings=my_weave_server.settings --pythonpath=.<br><br>Icecast2 XSLT interface<br>~~~~~~~~~~~~~~~~~~~~~~~<br>  The load-balancer needs to be able to periodically poll the status of the configured <br>  Icecast2 servers. Therefor the package includes the file load.xsl. This file needs to <br>  be copied to the web root of each Icecast2 server that will take part in the load-balancer. <br>  For Debian this location is at /usr/share/icecast2/web/. To test if the file is at the <br>  right location open the URL to the Icecast2 server in the browser and attach load.xsl <br>  to it like this:<br><br>    http://&lt;icecast2-ip&gt;:&lt;icecast2-port&gt;/load.xsl <br><br>  The output should look something like this:<br><br>    &lt;load&gt;<br>      &lt;mount name=\"/fm4-hq.ogg\"&gt;32&lt;/mount&gt;<br>      &lt;mount name=\"/fm4-lq.ogg\"&gt;96&lt;/mount&gt;<br>      &lt;mount name=\"/fm4-mq.ogg\"&gt;64&lt;/mount&gt;<br>    &lt;/load&gt;<br><br>  If there is an error stating \"The file you requested could not be found\" the file <br>  is probably not in the right folder.<br><br>Updating the servers<br>--------------------<br>Create a new cronjob for the user running the Django project:<br><br>  */5 * * * * python path/to/project/manage.py icecastpoll --settings=project.settings<br><br>  An interval of 5 minutes as shown in the above example should be sufficient but it <br>  can be decreased down to 1 minute.<br><br>Celery<br>~~~~~~<br>  If the Django project includes a working setup for Celery the management command <br>  \"icecastpoll\" will automatically dispatch the update as a async task. The cronjob <br>  is still required to trigger the updates.<br><br>Usage<br>-----<br>  Got to the admin interface of the Django instance. There are now three models for <br>  the icecast_balancer application:<br>    * Mounts<br>    * Servers<br>    * Streams <br><br>  Populate them with the servers and streams to match the actual Icecast setup.<br><br>  Once everything is setup up correctly test the load-balancer by opening a stream <br>  in your favourite video player:<br><br>    http://&lt;django-hostname&gt;/icecast_balancer/&lt;stream-name&gt;/<br><br>  The player will now be redirected to a Icecast2 server and the stream will be <br>  played from there. <br>  <br>Feedback<br>--------<br><br>Use `Issue Tracker on Google Code`__ for the bug reports / feature requests.<br><br>Contact me directly at michael@fladi.at.<br><br>__ http://code.google.com/p/django-icecast-balancer/issues/list\n          </div>"}, "last_serial": 789834, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "f54f2dd8a3cd2e3553ebba2a7f6f7d48", "sha256": "4fc6f0023a73a7854b9d52b6a55271858c540998e6ee2caf87dbd45e0d3af78e"}, "downloads": -1, "filename": "django-icecast-balancer-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f54f2dd8a3cd2e3553ebba2a7f6f7d48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4336, "upload_time": "2010-04-03T23:13:44", "upload_time_iso_8601": "2010-04-03T23:13:44.670603Z", "url": "https://files.pythonhosted.org/packages/88/d5/7edf24783d0d0ee3ef48780a3abbc204b463775dd5da2fc85980a8e348cc/django-icecast-balancer-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "7f41e7d80a42bb2802c086e6ec2f3bda", "sha256": "fe9faa81ded9a479bcd71f5dbe08616d5e9634f3c2dbd0a661951686dabce97b"}, "downloads": -1, "filename": "django-icecast-balancer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "7f41e7d80a42bb2802c086e6ec2f3bda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6319, "upload_time": "2010-04-03T23:23:07", "upload_time_iso_8601": "2010-04-03T23:23:07.107702Z", "url": "https://files.pythonhosted.org/packages/58/51/43e1b7e9a1a40458f59c00fa2f607c4998cb3895c2ce1d8dffe5c02570b9/django-icecast-balancer-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7f41e7d80a42bb2802c086e6ec2f3bda", "sha256": "fe9faa81ded9a479bcd71f5dbe08616d5e9634f3c2dbd0a661951686dabce97b"}, "downloads": -1, "filename": "django-icecast-balancer-0.1.4.tar.gz", "has_sig": false, "md5_digest": "7f41e7d80a42bb2802c086e6ec2f3bda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6319, "upload_time": "2010-04-03T23:23:07", "upload_time_iso_8601": "2010-04-03T23:23:07.107702Z", "url": "https://files.pythonhosted.org/packages/58/51/43e1b7e9a1a40458f59c00fa2f607c4998cb3895c2ce1d8dffe5c02570b9/django-icecast-balancer-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:39 2020"}