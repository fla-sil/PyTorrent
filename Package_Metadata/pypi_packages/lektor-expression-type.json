{"info": {"author": "Jeff Dairiki", "author_email": "dairiki@dairiki.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Environment :: Web Environment", "Framework :: Lektor", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# Lektor Expression Type Plugin\n\nAdd jinja-evaluated types, `expression` and `format_expression`, to\n[Lektor][].\n\nThese allow one to define data model fields whose values are Jinja2\nexpressions.\n\n## The Types\n\nBoth the `expression` and `format_expression` types are evaluated by\nthe jinja template engine.\n\n**`expression`**\n\nThe `expression` type is evaluated as a Jinja2 expression.\n\nAn example value for this type might be:\n```\nthis.children.order_by('-pub_date').limit(4)\n```\nThis would evaluate to a Lektor [Query][] instance.\n\n**`format_expression`**\n\nThe `format_expression` type is evaluated as a Jinja2 template.  It\nwill always evaluate to a string.\n\nAn example value for this type might be:\n```\nThe blog contains {{ site.get('/blog').count() }} pages.\n```\n\n## Installation\n\nAdd lektor-expression-type to your project from command line:\n\n```\nlektor plugins add lektor-expression-type\n```\n\nSee [the Lektor plugin documentation][plugins] for more information.\n\n## Motivating Example\n\nSuppose you want to create an _Index_ data model, for pages which will\nbe used display lists of other pages on your site.\nYou could create a model definition like this (called, perhaps,\n`models/index.ini`):\n\n\n```ini\n[model]\nname = Index Page\nlabel = Index: {{ this.title}}\n\n[fields.title]\nlabel = Title\ntype = string\n\n[fields.items]\nlabel = Items\ntype = expression\ndescription = Pages to list on this page\n```\n\nIn a particular index page which uses this model, you might set the\n`items` field to\n`site.get('/projects').filter(F.tag == 'interesting')`,\nthen in the page template (e.g. in `templates/index.html`) one could\nreference the `items` field (e.g. `{% for page in this.items %}`)\nto determine which pages to display on the page.\n\n## Author\n\nJeff Dairiki <dairiki@dairiki.org>\n\n\n[Lektor]: <https://www.getlektor.com/> \"Lektor Static Content Management System\"\n[plugins]: <https://www.getlektor.com/docs/plugins/>\n[Query]: <https://www.getlektor.com/docs/api/db/query/>\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dairiki/lektor-expression-type/", "keywords": "Lektor plugin", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "lektor-expression-type", "package_url": "https://pypi.org/project/lektor-expression-type/", "platform": "", "project_url": "https://pypi.org/project/lektor-expression-type/", "project_urls": {"Homepage": "https://github.com/dairiki/lektor-expression-type/"}, "release_url": "https://pypi.org/project/lektor-expression-type/0.1b1/", "requires_dist": null, "requires_python": "", "summary": "Add jinja-evaluated types to Lektor", "version": "0.1b1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Lektor Expression Type Plugin</h1>\n<p>Add jinja-evaluated types, <code>expression</code> and <code>format_expression</code>, to\n<a href=\"https://www.getlektor.com/\" rel=\"nofollow\" title=\"Lektor Static Content Management System\">Lektor</a>.</p>\n<p>These allow one to define data model fields whose values are Jinja2\nexpressions.</p>\n<h2>The Types</h2>\n<p>Both the <code>expression</code> and <code>format_expression</code> types are evaluated by\nthe jinja template engine.</p>\n<p><strong><code>expression</code></strong></p>\n<p>The <code>expression</code> type is evaluated as a Jinja2 expression.</p>\n<p>An example value for this type might be:</p>\n<pre><code>this.children.order_by('-pub_date').limit(4)\n</code></pre>\n<p>This would evaluate to a Lektor <a href=\"https://www.getlektor.com/docs/api/db/query/\" rel=\"nofollow\">Query</a> instance.</p>\n<p><strong><code>format_expression</code></strong></p>\n<p>The <code>format_expression</code> type is evaluated as a Jinja2 template.  It\nwill always evaluate to a string.</p>\n<p>An example value for this type might be:</p>\n<pre><code>The blog contains {{ site.get('/blog').count() }} pages.\n</code></pre>\n<h2>Installation</h2>\n<p>Add lektor-expression-type to your project from command line:</p>\n<pre><code>lektor plugins add lektor-expression-type\n</code></pre>\n<p>See <a href=\"https://www.getlektor.com/docs/plugins/\" rel=\"nofollow\">the Lektor plugin documentation</a> for more information.</p>\n<h2>Motivating Example</h2>\n<p>Suppose you want to create an <em>Index</em> data model, for pages which will\nbe used display lists of other pages on your site.\nYou could create a model definition like this (called, perhaps,\n<code>models/index.ini</code>):</p>\n<pre><span class=\"k\">[model]</span>\n<span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"s\">Index Page</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">Index: {{ this.title}}</span>\n\n<span class=\"k\">[fields.title]</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">Title</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">string</span>\n\n<span class=\"k\">[fields.items]</span>\n<span class=\"na\">label</span> <span class=\"o\">=</span> <span class=\"s\">Items</span>\n<span class=\"na\">type</span> <span class=\"o\">=</span> <span class=\"s\">expression</span>\n<span class=\"na\">description</span> <span class=\"o\">=</span> <span class=\"s\">Pages to list on this page</span>\n</pre>\n<p>In a particular index page which uses this model, you might set the\n<code>items</code> field to\n<code>site.get('/projects').filter(F.tag == 'interesting')</code>,\nthen in the page template (e.g. in <code>templates/index.html</code>) one could\nreference the <code>items</code> field (e.g. <code>{% for page in this.items %}</code>)\nto determine which pages to display on the page.</p>\n<h2>Author</h2>\n<p>Jeff Dairiki <a href=\"mailto:dairiki@dairiki.org\">dairiki@dairiki.org</a></p>\n\n          </div>"}, "last_serial": 7172663, "releases": {"0.1b1": [{"comment_text": "", "digests": {"md5": "4b6da75f218a9cfa9dac75c31c50679e", "sha256": "672950b36b59bd43be31dddbed9b4308cff9ad74b1c03bfa7471b996d657e086"}, "downloads": -1, "filename": "lektor_expression_type-0.1b1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4b6da75f218a9cfa9dac75c31c50679e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4215, "upload_time": "2020-05-05T15:10:21", "upload_time_iso_8601": "2020-05-05T15:10:21.730347Z", "url": "https://files.pythonhosted.org/packages/be/db/b0d70b1e54ed3f4eb839e1018dcbf0d5fe469b0fd01325b5f10b8f866863/lektor_expression_type-0.1b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffe389e2ab545255b91182f5b6e12d38", "sha256": "c794a4a989596c63e16558b954bf5b533b91b4ed31ee32cdc615936560bf8a52"}, "downloads": -1, "filename": "lektor-expression-type-0.1b1.tar.gz", "has_sig": true, "md5_digest": "ffe389e2ab545255b91182f5b6e12d38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7601, "upload_time": "2020-05-05T15:10:24", "upload_time_iso_8601": "2020-05-05T15:10:24.253461Z", "url": "https://files.pythonhosted.org/packages/be/a6/1d8b164107e5dd4863af70c6df8960c63d755dad431a2f53c438d806f725/lektor-expression-type-0.1b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b6da75f218a9cfa9dac75c31c50679e", "sha256": "672950b36b59bd43be31dddbed9b4308cff9ad74b1c03bfa7471b996d657e086"}, "downloads": -1, "filename": "lektor_expression_type-0.1b1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "4b6da75f218a9cfa9dac75c31c50679e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4215, "upload_time": "2020-05-05T15:10:21", "upload_time_iso_8601": "2020-05-05T15:10:21.730347Z", "url": "https://files.pythonhosted.org/packages/be/db/b0d70b1e54ed3f4eb839e1018dcbf0d5fe469b0fd01325b5f10b8f866863/lektor_expression_type-0.1b1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffe389e2ab545255b91182f5b6e12d38", "sha256": "c794a4a989596c63e16558b954bf5b533b91b4ed31ee32cdc615936560bf8a52"}, "downloads": -1, "filename": "lektor-expression-type-0.1b1.tar.gz", "has_sig": true, "md5_digest": "ffe389e2ab545255b91182f5b6e12d38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7601, "upload_time": "2020-05-05T15:10:24", "upload_time_iso_8601": "2020-05-05T15:10:24.253461Z", "url": "https://files.pythonhosted.org/packages/be/a6/1d8b164107e5dd4863af70c6df8960c63d755dad431a2f53c438d806f725/lektor-expression-type-0.1b1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:08 2020"}