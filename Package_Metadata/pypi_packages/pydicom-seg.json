{"info": {"author": "Sven Koitka", "author_email": "sven.koitka@uk-essen.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# pydicom-seg\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Python versions](https://img.shields.io/pypi/pyversions/pydicom-seg.svg)](https://img.shields.io/pypi/pyversions/pydicom-seg.svg)\n[![PyPI version](https://badge.fury.io/py/pydicom-seg.svg)](https://badge.fury.io/py/pydicom-seg)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3597421.svg)](https://doi.org/10.5281/zenodo.3597421)\n\nReading and writing of [DICOM-SEG](http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.8.20.html) medical image segmentation storage files using [pydicom](https://github.com/pydicom/pydicom) as DICOM serialization/deserialization library.\n\n## Motivation\n\nConverting DICOM-SEG files into ITK compatible data formats, commonly used for\nresearch, is made possible by the [dcmqi](https://github.com/QIICR/dcmqi)\nproject for some time. However, the project is written in C++ and offers only\naccess to the conversion via the binaries `itkimage2segimage` and\n`segimage2itkimage`. After a conversion of a DICOM-SEG file to ITK NRRD file\nformat, the user has to scan the output directory for generated files, load\nthem individually and potentially combine multiple files to the desired format.\n\nThis library aims to make this process much easier, by providing a Python\nnative implementation of reading and writing functionality with support for\n`numpy` and `SimpleITK`. Additionally, common use cases like loading\nmulti-class segmentations are supported out-of-the-box.\n\n## Installation\n\n### Install from PyPI\n\n```bash\npip install pydicom-seg\n```\n\n### Install from source\n\nThis package uses [Poetry](https://python-poetry.org/) as build system.\n\n```bash\ngit clone https://github.com/razorx89/pydicom-seg.git\ncd pydicom-seg\npoetry build\npip install dist/pydicom_seg-<version>-py3-none-any.whl\n```\n\n## Getting Started\n\n### Loading binary segments\n\n```python\nimport pydicom\nimport pydicom_seg\nimport SimpleITK as sitk\n\ndcm = pydicom.dcmread('segmentation.dcm')\n\nreader = pydicom_seg.SegmentReader()\nresult = reader.read(dcm)\n\nfor segment_number in result.available_segments:\n    image_data = result.segment_data(segment_number)  # directly available\n    image = result.segment_image(segment_number)  # lazy construction\n    sitk.WriteImage(image, f'/tmp/segmentation-{segment_number}.nrrd', True)\n```\n\n### Loading a multi-class segmentation\n\n```python\ndcm = pydicom.dcmread('segmentation.dcm')\n\nreader = pydicom_seg.MultiClassReader()\nresult = reader.read(dcm)\n\nimage_data = result.data  # directly available\nimage = result.image  # lazy construction\nsitk.WriteImage(image, '/tmp/segmentation.nrrd', True)\n```\n\n### Saving a multi-class segmentation\n\n```python\nsegmentation: SimpleITK.Image = ...  # A segmentation image with integer data type\n                                     # and a single component per voxel\ndicom_series_paths = [...]  # Paths to an imaging series related to the segmentation\nsource_images = [\n    pydicom.dcmread(x, stop_before_pixels=True)\n    for x in dicom_series_paths\n]\ntemplate = pydicom_seg.template.from_dcmqi_metainfo('metainfo.json')\nwriter = pydicom_seg.MultiClassWriter(\n    template=template,\n    inplane_cropping=True,  # Crop image slices to the minimum bounding box on \n                            # x and y axes\n    skip_empty_slices=True,  # Don't encode slices with only zeros\n    skip_missing_segments=False,  # If a segment definition is missing in the\n                                  # template, then raise an error instead of\n                                  # skipping it.\n)\ndcm = writer.write(segmentation, source_images)\ndcm.save_as('segmentation.dcm')\n```\n\n## License\n\n`pydicom-seg` is distributed under the [MIT license](./LICENSE).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/razorx89/pydicom-seg", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pydicom-seg", "package_url": "https://pypi.org/project/pydicom-seg/", "platform": "", "project_url": "https://pypi.org/project/pydicom-seg/", "project_urls": {"Homepage": "https://github.com/razorx89/pydicom-seg"}, "release_url": "https://pypi.org/project/pydicom-seg/0.1.0/", "requires_dist": ["jsonschema (>=3.2.0,<4.0.0)", "pydicom (>=1.3.0,<2.0.0)", "SimpleITK (>=1.2.4,<2.0.0)", "numpy (>=1.18.0,<2.0.0)", "attrs (>=19.3.0,<20.0.0)"], "requires_python": ">=3.5,<4.0", "summary": "Python package for DICOM-SEG medical segmentation file reading and writing", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pydicom-seg</h1>\n<p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"https://img.shields.io/pypi/pyversions/pydicom-seg.svg\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/afcc22c5a58ea6599ce4beb32c8e80ad040f1cea/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f70796469636f6d2d7365672e737667\"></a>\n<a href=\"https://badge.fury.io/py/pydicom-seg\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3acb0286b2a124caf49374d2e47bf780da2d5f39/68747470733a2f2f62616467652e667572792e696f2f70792f70796469636f6d2d7365672e737667\"></a>\n<a href=\"https://doi.org/10.5281/zenodo.3597421\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f694b92aa09a75ce29defe7f9b30ef30758145f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333539373432312e737667\"></a></p>\n<p>Reading and writing of <a href=\"http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.8.20.html\" rel=\"nofollow\">DICOM-SEG</a> medical image segmentation storage files using <a href=\"https://github.com/pydicom/pydicom\" rel=\"nofollow\">pydicom</a> as DICOM serialization/deserialization library.</p>\n<h2>Motivation</h2>\n<p>Converting DICOM-SEG files into ITK compatible data formats, commonly used for\nresearch, is made possible by the <a href=\"https://github.com/QIICR/dcmqi\" rel=\"nofollow\">dcmqi</a>\nproject for some time. However, the project is written in C++ and offers only\naccess to the conversion via the binaries <code>itkimage2segimage</code> and\n<code>segimage2itkimage</code>. After a conversion of a DICOM-SEG file to ITK NRRD file\nformat, the user has to scan the output directory for generated files, load\nthem individually and potentially combine multiple files to the desired format.</p>\n<p>This library aims to make this process much easier, by providing a Python\nnative implementation of reading and writing functionality with support for\n<code>numpy</code> and <code>SimpleITK</code>. Additionally, common use cases like loading\nmulti-class segmentations are supported out-of-the-box.</p>\n<h2>Installation</h2>\n<h3>Install from PyPI</h3>\n<pre>pip install pydicom-seg\n</pre>\n<h3>Install from source</h3>\n<p>This package uses <a href=\"https://python-poetry.org/\" rel=\"nofollow\">Poetry</a> as build system.</p>\n<pre>git clone https://github.com/razorx89/pydicom-seg.git\n<span class=\"nb\">cd</span> pydicom-seg\npoetry build\npip install dist/pydicom_seg-&lt;version&gt;-py3-none-any.whl\n</pre>\n<h2>Getting Started</h2>\n<h3>Loading binary segments</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pydicom</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pydicom_seg</span>\n<span class=\"kn\">import</span> <span class=\"nn\">SimpleITK</span> <span class=\"k\">as</span> <span class=\"nn\">sitk</span>\n\n<span class=\"n\">dcm</span> <span class=\"o\">=</span> <span class=\"n\">pydicom</span><span class=\"o\">.</span><span class=\"n\">dcmread</span><span class=\"p\">(</span><span class=\"s1\">'segmentation.dcm'</span><span class=\"p\">)</span>\n\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">pydicom_seg</span><span class=\"o\">.</span><span class=\"n\">SegmentReader</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">dcm</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">segment_number</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">available_segments</span><span class=\"p\">:</span>\n    <span class=\"n\">image_data</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">segment_data</span><span class=\"p\">(</span><span class=\"n\">segment_number</span><span class=\"p\">)</span>  <span class=\"c1\"># directly available</span>\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">segment_image</span><span class=\"p\">(</span><span class=\"n\">segment_number</span><span class=\"p\">)</span>  <span class=\"c1\"># lazy construction</span>\n    <span class=\"n\">sitk</span><span class=\"o\">.</span><span class=\"n\">WriteImage</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"sa\">f</span><span class=\"s1\">'/tmp/segmentation-</span><span class=\"si\">{</span><span class=\"n\">segment_number</span><span class=\"si\">}</span><span class=\"s1\">.nrrd'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Loading a multi-class segmentation</h3>\n<pre><span class=\"n\">dcm</span> <span class=\"o\">=</span> <span class=\"n\">pydicom</span><span class=\"o\">.</span><span class=\"n\">dcmread</span><span class=\"p\">(</span><span class=\"s1\">'segmentation.dcm'</span><span class=\"p\">)</span>\n\n<span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">pydicom_seg</span><span class=\"o\">.</span><span class=\"n\">MultiClassReader</span><span class=\"p\">()</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">dcm</span><span class=\"p\">)</span>\n\n<span class=\"n\">image_data</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">data</span>  <span class=\"c1\"># directly available</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">image</span>  <span class=\"c1\"># lazy construction</span>\n<span class=\"n\">sitk</span><span class=\"o\">.</span><span class=\"n\">WriteImage</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"s1\">'/tmp/segmentation.nrrd'</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h3>Saving a multi-class segmentation</h3>\n<pre><span class=\"n\">segmentation</span><span class=\"p\">:</span> <span class=\"n\">SimpleITK</span><span class=\"o\">.</span><span class=\"n\">Image</span> <span class=\"o\">=</span> <span class=\"o\">...</span>  <span class=\"c1\"># A segmentation image with integer data type</span>\n                                     <span class=\"c1\"># and a single component per voxel</span>\n<span class=\"n\">dicom_series_paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>  <span class=\"c1\"># Paths to an imaging series related to the segmentation</span>\n<span class=\"n\">source_images</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">pydicom</span><span class=\"o\">.</span><span class=\"n\">dcmread</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">stop_before_pixels</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">dicom_series_paths</span>\n<span class=\"p\">]</span>\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">pydicom_seg</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">from_dcmqi_metainfo</span><span class=\"p\">(</span><span class=\"s1\">'metainfo.json'</span><span class=\"p\">)</span>\n<span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">pydicom_seg</span><span class=\"o\">.</span><span class=\"n\">MultiClassWriter</span><span class=\"p\">(</span>\n    <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">,</span>\n    <span class=\"n\">inplane_cropping</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Crop image slices to the minimum bounding box on </span>\n                            <span class=\"c1\"># x and y axes</span>\n    <span class=\"n\">skip_empty_slices</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># Don't encode slices with only zeros</span>\n    <span class=\"n\">skip_missing_segments</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>  <span class=\"c1\"># If a segment definition is missing in the</span>\n                                  <span class=\"c1\"># template, then raise an error instead of</span>\n                                  <span class=\"c1\"># skipping it.</span>\n<span class=\"p\">)</span>\n<span class=\"n\">dcm</span> <span class=\"o\">=</span> <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">segmentation</span><span class=\"p\">,</span> <span class=\"n\">source_images</span><span class=\"p\">)</span>\n<span class=\"n\">dcm</span><span class=\"o\">.</span><span class=\"n\">save_as</span><span class=\"p\">(</span><span class=\"s1\">'segmentation.dcm'</span><span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p><code>pydicom-seg</code> is distributed under the <a href=\"./LICENSE\" rel=\"nofollow\">MIT license</a>.</p>\n\n          </div>"}, "last_serial": 6392265, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "96dc0ab6cf684c1a62775361cfa9068f", "sha256": "220bb1441407fc97283ee4617befe0ed379a718fc6396272ec1e3946cd5e3440"}, "downloads": -1, "filename": "pydicom_seg-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "96dc0ab6cf684c1a62775361cfa9068f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 16928, "upload_time": "2020-01-03T18:49:05", "upload_time_iso_8601": "2020-01-03T18:49:05.782784Z", "url": "https://files.pythonhosted.org/packages/68/dd/bc62f9cae91f7c39885b2531b0e2250177d00cf3833888f4513f97abdbd3/pydicom_seg-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78878839c96ca0eceb50903b02d86737", "sha256": "60e849197bbc2103888bf8e67f286ca9b4724ba158c4f7fa08235781c97e095e"}, "downloads": -1, "filename": "pydicom-seg-0.1.0.tar.gz", "has_sig": false, "md5_digest": "78878839c96ca0eceb50903b02d86737", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 17720, "upload_time": "2020-01-03T18:49:03", "upload_time_iso_8601": "2020-01-03T18:49:03.203204Z", "url": "https://files.pythonhosted.org/packages/a5/ed/38b6676b7830731b831be9f021966f90e209db212dd1829dfbe169cd319d/pydicom-seg-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "96dc0ab6cf684c1a62775361cfa9068f", "sha256": "220bb1441407fc97283ee4617befe0ed379a718fc6396272ec1e3946cd5e3440"}, "downloads": -1, "filename": "pydicom_seg-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "96dc0ab6cf684c1a62775361cfa9068f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 16928, "upload_time": "2020-01-03T18:49:05", "upload_time_iso_8601": "2020-01-03T18:49:05.782784Z", "url": "https://files.pythonhosted.org/packages/68/dd/bc62f9cae91f7c39885b2531b0e2250177d00cf3833888f4513f97abdbd3/pydicom_seg-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "78878839c96ca0eceb50903b02d86737", "sha256": "60e849197bbc2103888bf8e67f286ca9b4724ba158c4f7fa08235781c97e095e"}, "downloads": -1, "filename": "pydicom-seg-0.1.0.tar.gz", "has_sig": false, "md5_digest": "78878839c96ca0eceb50903b02d86737", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 17720, "upload_time": "2020-01-03T18:49:03", "upload_time_iso_8601": "2020-01-03T18:49:03.203204Z", "url": "https://files.pythonhosted.org/packages/a5/ed/38b6676b7830731b831be9f021966f90e209db212dd1829dfbe169cd319d/pydicom-seg-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:02 2020"}