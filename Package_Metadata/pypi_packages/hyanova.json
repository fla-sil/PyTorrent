{"info": {"author": "Su Qiao", "author_email": "qiaosu98@outlook.com", "bugtrack_url": null, "classifiers": [], "description": "# HyANOVA\n\nHyANOVA is a pure python implementation of fuctional ANOVA algorithm,\nwhich can be used to analyze the importance of hyperparameters in\nmachine learning algorithm.\n\n.. _header-n3:\n\nQuick Start\n===========\n\nTo install the package, please use the ``pip`` installation as follows:\n\n.. code:: shell\n\n   pip install hyanova\n\nHere is a short example of usage. You can download the\n`data <./examples/iris[GridSearchCV]Model1.csv>`__ from the example\nfolder.\n\n.. code:: python\n\n   import hyanova\n\n   path = './iris[GridSearchCV]Model1.csv' \t\t# gridsearch results generated by sklearn\n   metric = 'mean_test_score' \t\t\t\t# metric for model performance\n   df,params = hyanova.read_csv(path,metric)\n   # df,params = hyanova.read_df(df,metric)\t\t You can also load data from pd.DataFrame\n   importance = hyanova.analyze(df)\n\nThe ``metric`` is the feature you choose to evaluate the model\nperformance, it must appears in the ``.csv`` file or the\n``pandas.DataFrame`` object's column. And the result you got will be\nsimilar to this below, see the next section(ANOVA) for more details.\n\n.. code:: python\n\n   print(importance)\n   >>>              u       v_u  F_u(v_u/v_all)\n   0           (alpha,)  0.056885        0.892057\n   1        (l1_ratio,)  0.002489        0.039030\n   2  (alpha, l1_ratio)  0.004394        0.068912\n\n.. _header-n11:\n\nAPIs\n====\n\n.. _header-n12:\n\nLoad Data\n---------\n\nHyANOVA is designed to analyze the grid search results generated by\nsklearn. It provides two ways to load the data.\n\n.. _header-n14:\n\nread_df(df,metric)\n~~~~~~~~~~~~~~~~~~\n\nYou can use ``read_df(df,metric)`` to load data from a\n``<class 'pandas.core.frame.DataFrame'>`` object.\n\n   **Parameters:**\n\n   -  **df:**\\ <class 'pandas.core.frame.DataFrame'>, the ``DataFrame``\n      you want to analyze.\n\n   -  **metric:**\\ string, the metric you choose.\n\n   **Returns:**\n\n   -  **result_df:**\\ <class 'pandas.core.frame.DataFrame'>,a\n      ``DataFrame`` with all hyperparameters' value and the value of\n      metric you choose\n\n   -  **params_list:** list, a ``list`` of all hyperparameters' name.\n\n.. _header-n29:\n\nread_csv(path,metric)\n~~~~~~~~~~~~~~~~~~~~~\n\nUse ``hyanova.read_csv(path,metric)`` to load data from ``.csv`` file.\nIt is equivalent to ``hyanova.read_df(pandas.read_csv(path),metric)``.\n\n   **Parameters:**\n\n   -  **path:**\\ string, path of the ``DataFrame`` you want to analyze.\n\n   -  **metric:**\\ string, the metric you choose.\n\n   **Returns:**\n\n   -  **result_df:**\\ <class 'pandas.core.frame.DataFrame'>,a\n      ``DataFrame`` with all hyperparameters' value and the value of\n      metric you choose\n\n   -  **params_list:** list, a ``list`` of all hyperparameters' name.\n\n.. _header-n44:\n\nExample\n~~~~~~~\n\nThe `template\nfile <https://github.com/exiarepairii/hyanova/tree/master/example/iris[GridSearchCV]Model1.csv>`__\ncan be find at the example folder. Here is an example.\n\n.. code:: python\n\n   print(df.head)\n\n.. code:: shell\n\n   >>> mean_fit_time  std_fit_time  mean_score_time  std_score_time  param_alpha  \\\n   0       0.003899      0.000194         0.048513        0.007621     0.000977   \n   1       0.003401      0.000584         0.042454        0.011295     0.000977   \n   2       0.002706      0.000502         0.048544        0.009059     0.000977   \n   3       0.003304      0.000531         0.040709        0.003031     0.000977   \n   4       0.001801      0.000116         0.000289        0.000014     0.000977   \n\n      param_l1_ratio                                     params  \\\n   0            0.00   {'alpha': 0.0009765625, 'l1_ratio': 0.0}   \n   1            0.25  {'alpha': 0.0009765625, 'l1_ratio': 0.25}   \n   2            0.50   {'alpha': 0.0009765625, 'l1_ratio': 0.5}   \n   3            0.75  {'alpha': 0.0009765625, 'l1_ratio': 0.75}   \n   4            1.00   {'alpha': 0.0009765625, 'l1_ratio': 1.0}   \n\n      split0_test_score  split1_test_score  split2_test_score  mean_test_score  \\\n   0           0.828571           0.971429           0.971429         0.923810   \n   1           0.885714           0.971429           0.942857         0.933333   \n   2           0.885714           1.000000           0.942857         0.942857   \n   3           0.885714           0.914286           0.914286         0.904762   \n   4           0.885714           1.000000           0.942857         0.942857   \n\n      std_test_score  rank_test_score  \n   0        0.067344                4  \n   1        0.035635                3  \n   2        0.046657                1  \n   3        0.013469                5  \n   4        0.046657                1  \n\n.. code:: python\n\n   df,params = hyanova.read_df(df,'mean_test_score')\n   print(df.head)\n   >>>  alpha  l1_ratio  mean_test_score\n   0  0.000977      0.00         0.923810\n   1  0.000977      0.25         0.933333\n   2  0.000977      0.50         0.942857\n   3  0.000977      0.75         0.904762\n   4  0.000977      1.00         0.942857\n   print(params)\n   >>> ['alpha', 'l1_ratio']\n\n.. _header-n49:\n\nANOVA\n-----\n\n.. _header-n50:\n\nanalyze(df,max_iter=-1)\n~~~~~~~~~~~~~~~~~~~~~~~\n\nUse ``hyanova.analyze(df,max_iter=-1)`` to do the functional ANOVA\ndecomposition.\n\n   **Parameters:**\n\n   -  **df:**\\ <class 'pandas.core.frame.DataFrame'>, the ``DataFrame``\n      you want to analyze.\n\n   -  **max_iter:**\\ int, default to -1.\n\n   **Returns:**\n\n   -  **result_df:**\\ <class 'pandas.core.frame.DataFrame'>\n\nThe ``df`` parameter needs a ``pnadas.DataFrame`` object which has a\nformat similar to the following table. You can use the methods HyANOVA\nprovides to load data easily.\n\n== ======= ======== ===================\n\\  alpha   l1_ratio mean\\ *test*\\ score\n== ======= ======== ===================\n0  0.00977 0.00     0.923810\n1  0.00977 0.25     0.933333\n2  0.00977 0.50     0.942857\n3  0.00977 0.75     0.904762\n== ======= ======== ===================\n\n**Note:** The metric(mean\\ *test*\\ score) should always be in the last\ncolumn.\n\n.. _header-n91:\n\nExample\n~~~~~~~\n\nThe ``hyanova.analyze(df)`` will return a ``DataFrame`` with\nhyperparameters' name, variance(v\\ *u) and the importance(F*\\ u).\n\n.. code:: python\n\n   importance = hyanova.analyze(df)\n   >>> 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00<00:00, 11.32 it/s]\n   print(importance)\n   >>>              u       v_u  F_u(v_u/v_all)\n   0           (alpha,)  0.056885        0.892057\n   1        (l1_ratio,)  0.002489        0.039030\n   2  (alpha, l1_ratio)  0.004394        0.068912\n\n**Note:** The F\\ *u is the ratio of the variance caused by the\nhyperparameter itself(v*\\ u) to the variance of all trials(v\\ *all), so\nall F*\\ u sums always equal to 1.See references for more details.\n\nDue to the performance limitations of Python, the functional ANOVA will\nbe very slow when the number of hyperparameters is high (more than 5).\nYou can end the analysis early by setting the ``max_iter`` parameter. In\nfact, we usually only need the univariate importance, so set the\n``max_iter`` parameter to equal the number of features for shorter\nruntime.\n\n.. code:: python\n\n   importance = hyanova.analyze(df,max_iter=2)\n   >>> 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00<00:00, 8.12 it/s]\n   print(importance)\n   >>>              u       v_u  F_u(v_u/v_all)\n   0           (alpha,)  0.056885        0.892057\n   1        (l1_ratio,)  0.002489        0.039030\n\n.. _header-n97:\n\nExample usage\n-------------\n\nYou can use sklearn to do hyperparameters search and then use hyanova to\nanalyze the importance of hyperparameters.\n\n.. code:: python\n\n   import sklearn.datasets\n   from sklearn.model_selection import GridSearchCV\n   from sklearn.svm import SVC\n   import pandas as pd\n   import hyanova\n\n   iris = sklearn.datasets.load_iris()\n   X = iris.data\n   y = iris.target\n   model = SVC()\n   grid = {'C': np.linspace(1e-9, 128, 10000)\n   \t\t'kernel': ('rbf', 'linear', 'poly', 'sigmoid')}\n   grid_search = GridSearchCV(model,grid)\n   result = grid_search.fit(X, y)\n   df = pd.DataFrame(result.cv_results_)\n   metric = 'mean_test_score'\n   df, params = hyanova.read_df(df,metric)\n   importance = hyanova.analyze(df)\n\n.. _header-n100:\n\nDependencies\n============\n\n-  numpy\n\n-  pandas\n\n-  tqdm\n\n.. _header-n108:\n\nWhy created HyANOVA?\n====================\n\nI am completing my undergraduate thesis. In order to better understand\nthe models used in my article, I looked for a lot of algorithms that can\nmeasure the importance of hyperparameters. Among them, functional ANOVA\nseems to be the most effective. But the original author's implementation\nis based on java and uses python to call java files, which confuses me.\nI hope there is a module that is easier to understand and implemented\ncompletely based on python, which can help me with ANOVA decomposition,\nso I created HyANOVA. Hope that will help you too!\n\n.. _header-n110:\n\nReferences\n==========\n\n1. Hutter, F., Hoos, H. & Leyton-Brown, K.. (2014). An Efficient\n   Approach for Assessing Hyperparameter Importance. Proceedings of the\n   31st International Conference on Machine Learning, in PMLR\n   32(1):754-762\n\n2. https://github.com/frank-hutter/fanova\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/exiarepairii/hyanova", "keywords": "anova,sklearn,hyperparameter,hyperparameter importance", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hyanova", "package_url": "https://pypi.org/project/hyanova/", "platform": "any", "project_url": "https://pypi.org/project/hyanova/", "project_urls": {"Homepage": "https://github.com/exiarepairii/hyanova"}, "release_url": "https://pypi.org/project/hyanova/1.1.2/", "requires_dist": ["numpy", "pandas", "tqdm"], "requires_python": ">=3.6", "summary": "A pure python implementation of fuctional ANOVA algorithm.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># HyANOVA</p>\n<p>HyANOVA is a pure python implementation of fuctional ANOVA algorithm,\nwhich can be used to analyze the importance of hyperparameters in\nmachine learning algorithm.</p>\n<div id=\"quick-start\">\n<span id=\"header-n3\"></span><h2>Quick Start</h2>\n<p>To install the package, please use the <tt>pip</tt> installation as follows:</p>\n<pre>pip install hyanova\n</pre>\n<p>Here is a short example of usage. You can download the\n<a href=\"./examples/iris%5BGridSearchCV%5DModel1.csv\" rel=\"nofollow\">data</a> from the example\nfolder.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">hyanova</span>\n\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s1\">'./iris[GridSearchCV]Model1.csv'</span>              <span class=\"c1\"># gridsearch results generated by sklearn</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"s1\">'mean_test_score'</span>                           <span class=\"c1\"># metric for model performance</span>\n<span class=\"n\">df</span><span class=\"p\">,</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">hyanova</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"c1\"># df,params = hyanova.read_df(df,metric)              You can also load data from pd.DataFrame</span>\n<span class=\"n\">importance</span> <span class=\"o\">=</span> <span class=\"n\">hyanova</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>metric</tt> is the feature you choose to evaluate the model\nperformance, it must appears in the <tt>.csv</tt> file or the\n<tt>pandas.DataFrame</tt> object\u2019s column. And the result you got will be\nsimilar to this below, see the next section(ANOVA) for more details.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">importance</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>              <span class=\"n\">u</span>       <span class=\"n\">v_u</span>  <span class=\"n\">F_u</span><span class=\"p\">(</span><span class=\"n\">v_u</span><span class=\"o\">/</span><span class=\"n\">v_all</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>           <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,)</span>  <span class=\"mf\">0.056885</span>        <span class=\"mf\">0.892057</span>\n<span class=\"mi\">1</span>        <span class=\"p\">(</span><span class=\"n\">l1_ratio</span><span class=\"p\">,)</span>  <span class=\"mf\">0.002489</span>        <span class=\"mf\">0.039030</span>\n<span class=\"mi\">2</span>  <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">l1_ratio</span><span class=\"p\">)</span>  <span class=\"mf\">0.004394</span>        <span class=\"mf\">0.068912</span>\n</pre>\n</div>\n<div id=\"apis\">\n<span id=\"header-n11\"></span><h2>APIs</h2>\n<div id=\"load-data\">\n<span id=\"header-n12\"></span><h3>Load Data</h3>\n<p>HyANOVA is designed to analyze the grid search results generated by\nsklearn. It provides two ways to load the data.</p>\n<div id=\"read-df-df-metric\">\n<span id=\"header-n14\"></span><h4>read_df(df,metric)</h4>\n<p>You can use <tt>read_df(df,metric)</tt> to load data from a\n<tt>&lt;class 'pandas.core.frame.DataFrame'&gt;</tt> object.</p>\n<blockquote>\n<p><strong>Parameters:</strong></p>\n<ul>\n<li><strong>df:</strong>&lt;class \u2018pandas.core.frame.DataFrame\u2019&gt;, the <tt>DataFrame</tt>\nyou want to analyze.</li>\n<li><strong>metric:</strong>string, the metric you choose.</li>\n</ul>\n<p><strong>Returns:</strong></p>\n<ul>\n<li><strong>result_df:</strong>&lt;class \u2018pandas.core.frame.DataFrame\u2019&gt;,a\n<tt>DataFrame</tt> with all hyperparameters\u2019 value and the value of\nmetric you choose</li>\n<li><strong>params_list:</strong> list, a <tt>list</tt> of all hyperparameters\u2019 name.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"read-csv-path-metric\">\n<span id=\"header-n29\"></span><h4>read_csv(path,metric)</h4>\n<p>Use <tt>hyanova.read_csv(path,metric)</tt> to load data from <tt>.csv</tt> file.\nIt is equivalent to <tt><span class=\"pre\">hyanova.read_df(pandas.read_csv(path),metric)</span></tt>.</p>\n<blockquote>\n<p><strong>Parameters:</strong></p>\n<ul>\n<li><strong>path:</strong>string, path of the <tt>DataFrame</tt> you want to analyze.</li>\n<li><strong>metric:</strong>string, the metric you choose.</li>\n</ul>\n<p><strong>Returns:</strong></p>\n<ul>\n<li><strong>result_df:</strong>&lt;class \u2018pandas.core.frame.DataFrame\u2019&gt;,a\n<tt>DataFrame</tt> with all hyperparameters\u2019 value and the value of\nmetric you choose</li>\n<li><strong>params_list:</strong> list, a <tt>list</tt> of all hyperparameters\u2019 name.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"example\">\n<span id=\"header-n44\"></span><h4>Example</h4>\n<p>The <a href=\"https://github.com/exiarepairii/hyanova/tree/master/example/iris%5BGridSearchCV%5DModel1.csv\" rel=\"nofollow\">template\nfile</a>\ncan be find at the example folder. Here is an example.</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">)</span>\n</pre>\n<pre>&gt;&gt;&gt; mean_fit_time  std_fit_time  mean_score_time  std_score_time  param_alpha  <span class=\"se\">\\\n</span><span class=\"m\">0</span>       <span class=\"m\">0</span>.003899      <span class=\"m\">0</span>.000194         <span class=\"m\">0</span>.048513        <span class=\"m\">0</span>.007621     <span class=\"m\">0</span>.000977\n<span class=\"m\">1</span>       <span class=\"m\">0</span>.003401      <span class=\"m\">0</span>.000584         <span class=\"m\">0</span>.042454        <span class=\"m\">0</span>.011295     <span class=\"m\">0</span>.000977\n<span class=\"m\">2</span>       <span class=\"m\">0</span>.002706      <span class=\"m\">0</span>.000502         <span class=\"m\">0</span>.048544        <span class=\"m\">0</span>.009059     <span class=\"m\">0</span>.000977\n<span class=\"m\">3</span>       <span class=\"m\">0</span>.003304      <span class=\"m\">0</span>.000531         <span class=\"m\">0</span>.040709        <span class=\"m\">0</span>.003031     <span class=\"m\">0</span>.000977\n<span class=\"m\">4</span>       <span class=\"m\">0</span>.001801      <span class=\"m\">0</span>.000116         <span class=\"m\">0</span>.000289        <span class=\"m\">0</span>.000014     <span class=\"m\">0</span>.000977\n\n   param_l1_ratio                                     params  <span class=\"se\">\\\n</span><span class=\"m\">0</span>            <span class=\"m\">0</span>.00   <span class=\"o\">{</span><span class=\"s1\">'alpha'</span>: <span class=\"m\">0</span>.0009765625, <span class=\"s1\">'l1_ratio'</span>: <span class=\"m\">0</span>.0<span class=\"o\">}</span>\n<span class=\"m\">1</span>            <span class=\"m\">0</span>.25  <span class=\"o\">{</span><span class=\"s1\">'alpha'</span>: <span class=\"m\">0</span>.0009765625, <span class=\"s1\">'l1_ratio'</span>: <span class=\"m\">0</span>.25<span class=\"o\">}</span>\n<span class=\"m\">2</span>            <span class=\"m\">0</span>.50   <span class=\"o\">{</span><span class=\"s1\">'alpha'</span>: <span class=\"m\">0</span>.0009765625, <span class=\"s1\">'l1_ratio'</span>: <span class=\"m\">0</span>.5<span class=\"o\">}</span>\n<span class=\"m\">3</span>            <span class=\"m\">0</span>.75  <span class=\"o\">{</span><span class=\"s1\">'alpha'</span>: <span class=\"m\">0</span>.0009765625, <span class=\"s1\">'l1_ratio'</span>: <span class=\"m\">0</span>.75<span class=\"o\">}</span>\n<span class=\"m\">4</span>            <span class=\"m\">1</span>.00   <span class=\"o\">{</span><span class=\"s1\">'alpha'</span>: <span class=\"m\">0</span>.0009765625, <span class=\"s1\">'l1_ratio'</span>: <span class=\"m\">1</span>.0<span class=\"o\">}</span>\n\n   split0_test_score  split1_test_score  split2_test_score  mean_test_score  <span class=\"se\">\\\n</span><span class=\"m\">0</span>           <span class=\"m\">0</span>.828571           <span class=\"m\">0</span>.971429           <span class=\"m\">0</span>.971429         <span class=\"m\">0</span>.923810\n<span class=\"m\">1</span>           <span class=\"m\">0</span>.885714           <span class=\"m\">0</span>.971429           <span class=\"m\">0</span>.942857         <span class=\"m\">0</span>.933333\n<span class=\"m\">2</span>           <span class=\"m\">0</span>.885714           <span class=\"m\">1</span>.000000           <span class=\"m\">0</span>.942857         <span class=\"m\">0</span>.942857\n<span class=\"m\">3</span>           <span class=\"m\">0</span>.885714           <span class=\"m\">0</span>.914286           <span class=\"m\">0</span>.914286         <span class=\"m\">0</span>.904762\n<span class=\"m\">4</span>           <span class=\"m\">0</span>.885714           <span class=\"m\">1</span>.000000           <span class=\"m\">0</span>.942857         <span class=\"m\">0</span>.942857\n\n   std_test_score  rank_test_score\n<span class=\"m\">0</span>        <span class=\"m\">0</span>.067344                <span class=\"m\">4</span>\n<span class=\"m\">1</span>        <span class=\"m\">0</span>.035635                <span class=\"m\">3</span>\n<span class=\"m\">2</span>        <span class=\"m\">0</span>.046657                <span class=\"m\">1</span>\n<span class=\"m\">3</span>        <span class=\"m\">0</span>.013469                <span class=\"m\">5</span>\n<span class=\"m\">4</span>        <span class=\"m\">0</span>.046657                <span class=\"m\">1</span>\n</pre>\n<pre><span class=\"n\">df</span><span class=\"p\">,</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">hyanova</span><span class=\"o\">.</span><span class=\"n\">read_df</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span><span class=\"s1\">'mean_test_score'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">head</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>  <span class=\"n\">alpha</span>  <span class=\"n\">l1_ratio</span>  <span class=\"n\">mean_test_score</span>\n<span class=\"mi\">0</span>  <span class=\"mf\">0.000977</span>      <span class=\"mf\">0.00</span>         <span class=\"mf\">0.923810</span>\n<span class=\"mi\">1</span>  <span class=\"mf\">0.000977</span>      <span class=\"mf\">0.25</span>         <span class=\"mf\">0.933333</span>\n<span class=\"mi\">2</span>  <span class=\"mf\">0.000977</span>      <span class=\"mf\">0.50</span>         <span class=\"mf\">0.942857</span>\n<span class=\"mi\">3</span>  <span class=\"mf\">0.000977</span>      <span class=\"mf\">0.75</span>         <span class=\"mf\">0.904762</span>\n<span class=\"mi\">4</span>  <span class=\"mf\">0.000977</span>      <span class=\"mf\">1.00</span>         <span class=\"mf\">0.942857</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">[</span><span class=\"s1\">'alpha'</span><span class=\"p\">,</span> <span class=\"s1\">'l1_ratio'</span><span class=\"p\">]</span>\n</pre>\n</div>\n</div>\n<div id=\"anova\">\n<span id=\"header-n49\"></span><h3>ANOVA</h3>\n<div id=\"analyze-df-max-iter-1\">\n<span id=\"header-n50\"></span><h4>analyze(df,max_iter=-1)</h4>\n<p>Use <tt><span class=\"pre\">hyanova.analyze(df,max_iter=-1)</span></tt> to do the functional ANOVA\ndecomposition.</p>\n<blockquote>\n<p><strong>Parameters:</strong></p>\n<ul>\n<li><strong>df:</strong>&lt;class \u2018pandas.core.frame.DataFrame\u2019&gt;, the <tt>DataFrame</tt>\nyou want to analyze.</li>\n<li><strong>max_iter:</strong>int, default to -1.</li>\n</ul>\n<p><strong>Returns:</strong></p>\n<ul>\n<li><strong>result_df:</strong>&lt;class \u2018pandas.core.frame.DataFrame\u2019&gt;</li>\n</ul>\n</blockquote>\n<p>The <tt>df</tt> parameter needs a <tt>pnadas.DataFrame</tt> object which has a\nformat similar to the following table. You can use the methods HyANOVA\nprovides to load data easily.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th></th>\n<th>alpha</th>\n<th>l1_ratio</th>\n<th>mean<em>test</em>score</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>0</td>\n<td>0.00977</td>\n<td>0.00</td>\n<td>0.923810</td>\n</tr>\n<tr><td>1</td>\n<td>0.00977</td>\n<td>0.25</td>\n<td>0.933333</td>\n</tr>\n<tr><td>2</td>\n<td>0.00977</td>\n<td>0.50</td>\n<td>0.942857</td>\n</tr>\n<tr><td>3</td>\n<td>0.00977</td>\n<td>0.75</td>\n<td>0.904762</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note:</strong> The metric(mean<em>test</em>score) should always be in the last\ncolumn.</p>\n</div>\n<div id=\"id1\">\n<span id=\"header-n91\"></span><h4>Example</h4>\n<p>The <tt>hyanova.analyze(df)</tt> will return a <tt>DataFrame</tt> with\nhyperparameters\u2019 name, variance(v<em>u) and the importance(F</em>u).</p>\n<pre><span class=\"n\">importance</span> <span class=\"o\">=</span> <span class=\"n\">hyanova</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">100</span><span class=\"o\">%|</span><span class=\"err\">\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588</span><span class=\"o\">|</span> <span class=\"mi\">3</span><span class=\"o\">/</span><span class=\"mi\">3</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"o\">&lt;</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mf\">11.32</span> <span class=\"n\">it</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">importance</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>              <span class=\"n\">u</span>       <span class=\"n\">v_u</span>  <span class=\"n\">F_u</span><span class=\"p\">(</span><span class=\"n\">v_u</span><span class=\"o\">/</span><span class=\"n\">v_all</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>           <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,)</span>  <span class=\"mf\">0.056885</span>        <span class=\"mf\">0.892057</span>\n<span class=\"mi\">1</span>        <span class=\"p\">(</span><span class=\"n\">l1_ratio</span><span class=\"p\">,)</span>  <span class=\"mf\">0.002489</span>        <span class=\"mf\">0.039030</span>\n<span class=\"mi\">2</span>  <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">l1_ratio</span><span class=\"p\">)</span>  <span class=\"mf\">0.004394</span>        <span class=\"mf\">0.068912</span>\n</pre>\n<p><strong>Note:</strong> The F<em>u is the ratio of the variance caused by the\nhyperparameter itself(v</em>u) to the variance of all trials(v<em>all), so\nall F</em>u sums always equal to 1.See references for more details.</p>\n<p>Due to the performance limitations of Python, the functional ANOVA will\nbe very slow when the number of hyperparameters is high (more than 5).\nYou can end the analysis early by setting the <tt>max_iter</tt> parameter. In\nfact, we usually only need the univariate importance, so set the\n<tt>max_iter</tt> parameter to equal the number of features for shorter\nruntime.</p>\n<pre><span class=\"n\">importance</span> <span class=\"o\">=</span> <span class=\"n\">hyanova</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span><span class=\"n\">max_iter</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">100</span><span class=\"o\">%|</span><span class=\"err\">\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588</span><span class=\"o\">|</span> <span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"mi\">2</span> <span class=\"p\">[</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"o\">&lt;</span><span class=\"mi\">00</span><span class=\"p\">:</span><span class=\"mi\">00</span><span class=\"p\">,</span> <span class=\"mf\">8.12</span> <span class=\"n\">it</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">importance</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>              <span class=\"n\">u</span>       <span class=\"n\">v_u</span>  <span class=\"n\">F_u</span><span class=\"p\">(</span><span class=\"n\">v_u</span><span class=\"o\">/</span><span class=\"n\">v_all</span><span class=\"p\">)</span>\n<span class=\"mi\">0</span>           <span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">,)</span>  <span class=\"mf\">0.056885</span>        <span class=\"mf\">0.892057</span>\n<span class=\"mi\">1</span>        <span class=\"p\">(</span><span class=\"n\">l1_ratio</span><span class=\"p\">,)</span>  <span class=\"mf\">0.002489</span>        <span class=\"mf\">0.039030</span>\n</pre>\n</div>\n</div>\n<div id=\"example-usage\">\n<span id=\"header-n97\"></span><h3>Example usage</h3>\n<p>You can use sklearn to do hyperparameters search and then use hyanova to\nanalyze the importance of hyperparameters.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sklearn.datasets</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">GridSearchCV</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.svm</span> <span class=\"kn\">import</span> <span class=\"n\">SVC</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hyanova</span>\n\n<span class=\"n\">iris</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_iris</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">iris</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">SVC</span><span class=\"p\">()</span>\n<span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'C'</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mf\">1e-9</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">)</span>\n             <span class=\"s1\">'kernel'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"s1\">'rbf'</span><span class=\"p\">,</span> <span class=\"s1\">'linear'</span><span class=\"p\">,</span> <span class=\"s1\">'poly'</span><span class=\"p\">,</span> <span class=\"s1\">'sigmoid'</span><span class=\"p\">)}</span>\n<span class=\"n\">grid_search</span> <span class=\"o\">=</span> <span class=\"n\">GridSearchCV</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span><span class=\"n\">grid</span><span class=\"p\">)</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">grid_search</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">cv_results_</span><span class=\"p\">)</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"s1\">'mean_test_score'</span>\n<span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">hyanova</span><span class=\"o\">.</span><span class=\"n\">read_df</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"n\">importance</span> <span class=\"o\">=</span> <span class=\"n\">hyanova</span><span class=\"o\">.</span><span class=\"n\">analyze</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"dependencies\">\n<span id=\"header-n100\"></span><h2>Dependencies</h2>\n<ul>\n<li>numpy</li>\n<li>pandas</li>\n<li>tqdm</li>\n</ul>\n</div>\n<div id=\"why-created-hyanova\">\n<span id=\"header-n108\"></span><h2>Why created HyANOVA?</h2>\n<p>I am completing my undergraduate thesis. In order to better understand\nthe models used in my article, I looked for a lot of algorithms that can\nmeasure the importance of hyperparameters. Among them, functional ANOVA\nseems to be the most effective. But the original author\u2019s implementation\nis based on java and uses python to call java files, which confuses me.\nI hope there is a module that is easier to understand and implemented\ncompletely based on python, which can help me with ANOVA decomposition,\nso I created HyANOVA. Hope that will help you too!</p>\n</div>\n<div id=\"references\">\n<span id=\"header-n110\"></span><h2>References</h2>\n<ol>\n<li>Hutter, F., Hoos, H. &amp; Leyton-Brown, K.. (2014). An Efficient\nApproach for Assessing Hyperparameter Importance. Proceedings of the\n31st International Conference on Machine Learning, in PMLR\n32(1):754-762</li>\n<li><a href=\"https://github.com/frank-hutter/fanova\" rel=\"nofollow\">https://github.com/frank-hutter/fanova</a></li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 6943828, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "f2d592125ff36e8e68f6dad128a51f8b", "sha256": "16bdf900525f8c00fa21f4b669301e85bf986f7f692fed1c62613a65f1be983a"}, "downloads": -1, "filename": "hyanova-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f2d592125ff36e8e68f6dad128a51f8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5896, "upload_time": "2020-02-24T19:22:37", "upload_time_iso_8601": "2020-02-24T19:22:37.226786Z", "url": "https://files.pythonhosted.org/packages/7d/55/962b36b965a753686ce793c67d84bbc853151c50dd7d31c608fc287ba94e/hyanova-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c81afefdf8cdbdcf777d337182a9789", "sha256": "73afb24bdbcabd61d451f87c6f7b76e41d54d69cea0b6031d20ebc1214d77f2c"}, "downloads": -1, "filename": "hyanova-1.0.3.zip", "has_sig": false, "md5_digest": "9c81afefdf8cdbdcf777d337182a9789", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11269, "upload_time": "2020-02-24T19:22:39", "upload_time_iso_8601": "2020-02-24T19:22:39.530448Z", "url": "https://files.pythonhosted.org/packages/3c/55/81eb6c60acc73370b584716db7f30aabfa6bba26a1daaf21397366fa79f1/hyanova-1.0.3.zip", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "94be540cfeb04453e4497822b55e288f", "sha256": "2bde4a55ed09ded06ab1950a6195d8cc2b748be95e756a77d133c18d1447107d"}, "downloads": -1, "filename": "hyanova-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "94be540cfeb04453e4497822b55e288f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5906, "upload_time": "2020-02-25T02:55:00", "upload_time_iso_8601": "2020-02-25T02:55:00.318283Z", "url": "https://files.pythonhosted.org/packages/7a/c0/d7662e6f986ca867155480193dc1fe9437db187c84fcc9e482c16b035b90/hyanova-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "682ce3baa8158433339ff6346d72fbaf", "sha256": "0991b63b57c96bf8a3c01d53af2e67b9ea14125e33e7573f023da1b38563edff"}, "downloads": -1, "filename": "hyanova-1.0.4.zip", "has_sig": false, "md5_digest": "682ce3baa8158433339ff6346d72fbaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11310, "upload_time": "2020-02-25T02:55:03", "upload_time_iso_8601": "2020-02-25T02:55:03.634335Z", "url": "https://files.pythonhosted.org/packages/04/9f/93228de9c5e8b0210bd6a32bd7e7b07acf1f15ea0cd8f718d02bd0bb1b7f/hyanova-1.0.4.zip", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "fbe18b90a46592628aeefedfcee02c1c", "sha256": "d86e16be45f1ca3b90f988de1b169eac0ac77db341bb19101c2d5ca27604f164"}, "downloads": -1, "filename": "hyanova-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fbe18b90a46592628aeefedfcee02c1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5906, "upload_time": "2020-02-25T03:06:04", "upload_time_iso_8601": "2020-02-25T03:06:04.852259Z", "url": "https://files.pythonhosted.org/packages/6a/55/992c87bbfeef4b1d1469dd9f888ebf0026786da08028c415c5394d65c331/hyanova-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c146fbf9c1bbb253e7a9047648aa623", "sha256": "4cc7d4fc5602c1db4bf97e89148d3ceecb5601834447e3570119a27b49b64b24"}, "downloads": -1, "filename": "hyanova-1.0.5.zip", "has_sig": false, "md5_digest": "4c146fbf9c1bbb253e7a9047648aa623", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11310, "upload_time": "2020-02-25T03:06:06", "upload_time_iso_8601": "2020-02-25T03:06:06.328099Z", "url": "https://files.pythonhosted.org/packages/ce/e8/14754ffed4845c5ba2ca3250cc80096177918b3b659a6eb8776adfccdee2/hyanova-1.0.5.zip", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "d2dc6281605389a326121cc3c88a16d9", "sha256": "17dbc2254e9817e9159889fba9665df47299210bf8fa7a084676288cbd8af532"}, "downloads": -1, "filename": "hyanova-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d2dc6281605389a326121cc3c88a16d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5903, "upload_time": "2020-02-25T03:15:23", "upload_time_iso_8601": "2020-02-25T03:15:23.061368Z", "url": "https://files.pythonhosted.org/packages/ea/f4/f749a94196f90b28a52620c101e1c0047d51a9d73405daaf8b8af6975b09/hyanova-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b909239d88142ad1c11b0aa52ce2b7ee", "sha256": "0549426bf2bf2cf1a93f62b799b48656c5f4d1841a3f3d677a84354d1b25bba5"}, "downloads": -1, "filename": "hyanova-1.0.6.zip", "has_sig": false, "md5_digest": "b909239d88142ad1c11b0aa52ce2b7ee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11313, "upload_time": "2020-02-25T03:15:25", "upload_time_iso_8601": "2020-02-25T03:15:25.427349Z", "url": "https://files.pythonhosted.org/packages/b4/be/c700f92719f09dbc7af576e263f2eda6393a8f8901dd524c3ee2093b6152/hyanova-1.0.6.zip", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "1cf026c7ca5e20d881f1db71233063df", "sha256": "f1f9eb126271df6851a96fa1f9f9e6bef77b37a1e95b542f87c5c42eec5e1c16"}, "downloads": -1, "filename": "hyanova-1.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1cf026c7ca5e20d881f1db71233063df", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5898, "upload_time": "2020-02-25T03:23:48", "upload_time_iso_8601": "2020-02-25T03:23:48.974679Z", "url": "https://files.pythonhosted.org/packages/bd/d1/24a28eef4bef0d1f4fcc94e1b281b665f4db70c989bf5b266d5f41d056c3/hyanova-1.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2725433539cd94624ff9e160d168e0b3", "sha256": "283ef7e1fad1cb831ef850248c49cdcae5078d0faef57a1baa0ff6fb362d0ef5"}, "downloads": -1, "filename": "hyanova-1.0.7.zip", "has_sig": false, "md5_digest": "2725433539cd94624ff9e160d168e0b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13851, "upload_time": "2020-02-25T03:23:50", "upload_time_iso_8601": "2020-02-25T03:23:50.141785Z", "url": "https://files.pythonhosted.org/packages/53/1f/731009c4d20a5ae9557e2b38806783016bf8939c8d6979c62f0793f365fe/hyanova-1.0.7.zip", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "61efb4ab6118195366be8c1e51b16c5a", "sha256": "e8c57f4a897f0e8139496f26df2552c1b1e13fb03e1f5271686ce1011fff8dc2"}, "downloads": -1, "filename": "hyanova-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "61efb4ab6118195366be8c1e51b16c5a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5959, "upload_time": "2020-02-25T03:41:11", "upload_time_iso_8601": "2020-02-25T03:41:11.854059Z", "url": "https://files.pythonhosted.org/packages/26/33/8e09dd0f3708072d03fc949f5fc9489568b7ae783becc2e494198f2bbbc6/hyanova-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92adecb783f1b93475293d5f4e3e4285", "sha256": "657c1e2eaf53cdc71ca1cc0c4d016658d26ee1f148dfb7621ab854d0fc8969c2"}, "downloads": -1, "filename": "hyanova-1.0.8.zip", "has_sig": false, "md5_digest": "92adecb783f1b93475293d5f4e3e4285", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14167, "upload_time": "2020-02-25T03:41:26", "upload_time_iso_8601": "2020-02-25T03:41:26.170782Z", "url": "https://files.pythonhosted.org/packages/54/42/39ab4b849f20c770d3e7a4102d1c8742992cd9596e4dd9c2e61a9aa9827f/hyanova-1.0.8.zip", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "03940358d07903a7e6a700b0b67ca588", "sha256": "f9d5ce2c84a67367becc25573153039bba6b8282d04e38913b6fe4c1c60c6f61"}, "downloads": -1, "filename": "hyanova-1.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "03940358d07903a7e6a700b0b67ca588", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5957, "upload_time": "2020-02-25T03:48:58", "upload_time_iso_8601": "2020-02-25T03:48:58.729200Z", "url": "https://files.pythonhosted.org/packages/41/09/cd7f1fe32455ca4fa7304ba98a693476c8ea73b135737f3c786a65bf2199/hyanova-1.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2625b6d6de864d31aa3e03c3e4419a11", "sha256": "726393752bbb4775c7c10e4139c46203bd2c9be003fafd6b5a67eb8878f324ae"}, "downloads": -1, "filename": "hyanova-1.0.9.zip", "has_sig": false, "md5_digest": "2625b6d6de864d31aa3e03c3e4419a11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14160, "upload_time": "2020-02-25T03:49:08", "upload_time_iso_8601": "2020-02-25T03:49:08.658093Z", "url": "https://files.pythonhosted.org/packages/d5/df/f4ce3700b2ed6b306ffb90ec523f9e88c7e2e56e9596f48aa0483ef7c295/hyanova-1.0.9.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "5577b2e17b3c34a9a3e7481a6d25e8be", "sha256": "ef249daddd85e201d0e1fb2de2dff8be83f0aab1932986b7981d5354f0a13747"}, "downloads": -1, "filename": "hyanova-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5577b2e17b3c34a9a3e7481a6d25e8be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6202, "upload_time": "2020-04-03T10:12:53", "upload_time_iso_8601": "2020-04-03T10:12:53.623064Z", "url": "https://files.pythonhosted.org/packages/e8/e6/6737029f01b9cd0a6e097f679c3404c12521c51a428175986d9e44081096/hyanova-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2625e94d5b5716318e02be0845da4da0", "sha256": "ff4076ee16a2a66edec9cd51e6c8e1f66c2ea08bb094ce8b6a3cec51eb3e3908"}, "downloads": -1, "filename": "hyanova-1.1.0.zip", "has_sig": false, "md5_digest": "2625e94d5b5716318e02be0845da4da0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14404, "upload_time": "2020-04-03T10:12:55", "upload_time_iso_8601": "2020-04-03T10:12:55.071911Z", "url": "https://files.pythonhosted.org/packages/fe/c6/b6c6256394ef3fc2a8839494104fb1cc89b96ae02ccfb95e389197451d61/hyanova-1.1.0.zip", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "0ee0b2d9477eb47e0d3f66568e962ca9", "sha256": "65c137e3448db2423525b7c4ca1864bb3285d89465af3a82152aa03a3490cb90"}, "downloads": -1, "filename": "hyanova-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0ee0b2d9477eb47e0d3f66568e962ca9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6205, "upload_time": "2020-04-03T10:34:55", "upload_time_iso_8601": "2020-04-03T10:34:55.058028Z", "url": "https://files.pythonhosted.org/packages/bb/cd/cc68d5d2eff97a95b3fe62822c777f0c094844b8a0ff96f44a0d459a424e/hyanova-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ce67fbcdcdb034f8f77c5d7396ec45a", "sha256": "87ed3fc90cfd3b06ec9af8f5fabd6452de05de2cdd050c078832ef1ae385d0e1"}, "downloads": -1, "filename": "hyanova-1.1.1.zip", "has_sig": false, "md5_digest": "9ce67fbcdcdb034f8f77c5d7396ec45a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 14402, "upload_time": "2020-04-03T10:34:56", "upload_time_iso_8601": "2020-04-03T10:34:56.811805Z", "url": "https://files.pythonhosted.org/packages/f8/94/885e7862c82659ffad34e76ee80d3d82c5688abd79876f9a06e81ec246e4/hyanova-1.1.1.zip", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "b1f87aa05282b886ebe2b8886b00935e", "sha256": "c6243b7b953c1d6dbec99230999ef0d18d8f1cfeb9c358708a52f895cc206898"}, "downloads": -1, "filename": "hyanova-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b1f87aa05282b886ebe2b8886b00935e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6642, "upload_time": "2020-04-03T14:40:12", "upload_time_iso_8601": "2020-04-03T14:40:12.100833Z", "url": "https://files.pythonhosted.org/packages/0f/27/3b9d6f2e9cf7dcc113317e94684f319c30b55dd8558467e7a525ff802266/hyanova-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53f8523514830f54e8efec7b6e548d23", "sha256": "077753795f8f85fc98c57ba8117c674d350055b3328d527ffef4ac495e249c9b"}, "downloads": -1, "filename": "hyanova-1.1.2.zip", "has_sig": false, "md5_digest": "53f8523514830f54e8efec7b6e548d23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15990, "upload_time": "2020-04-03T14:40:14", "upload_time_iso_8601": "2020-04-03T14:40:14.470642Z", "url": "https://files.pythonhosted.org/packages/93/fb/98164235f48035d371666049c744172fcd949f28155645914e11a52a502d/hyanova-1.1.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1f87aa05282b886ebe2b8886b00935e", "sha256": "c6243b7b953c1d6dbec99230999ef0d18d8f1cfeb9c358708a52f895cc206898"}, "downloads": -1, "filename": "hyanova-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b1f87aa05282b886ebe2b8886b00935e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6642, "upload_time": "2020-04-03T14:40:12", "upload_time_iso_8601": "2020-04-03T14:40:12.100833Z", "url": "https://files.pythonhosted.org/packages/0f/27/3b9d6f2e9cf7dcc113317e94684f319c30b55dd8558467e7a525ff802266/hyanova-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53f8523514830f54e8efec7b6e548d23", "sha256": "077753795f8f85fc98c57ba8117c674d350055b3328d527ffef4ac495e249c9b"}, "downloads": -1, "filename": "hyanova-1.1.2.zip", "has_sig": false, "md5_digest": "53f8523514830f54e8efec7b6e548d23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15990, "upload_time": "2020-04-03T14:40:14", "upload_time_iso_8601": "2020-04-03T14:40:14.470642Z", "url": "https://files.pythonhosted.org/packages/93/fb/98164235f48035d371666049c744172fcd949f28155645914e11a52a502d/hyanova-1.1.2.zip", "yanked": false}], "timestamp": "Fri May  8 00:49:41 2020"}