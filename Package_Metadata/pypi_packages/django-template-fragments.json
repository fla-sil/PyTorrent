{"info": {"author": "Laurent Peuch", "author_email": "cortex@worlddomination.be", "bugtrack_url": null, "classifiers": [], "description": "# Introduction\n\nOften, when you use a client-side javascript framework (e.g. backbone/ember/angular/wathever), you'll want small templates to render your page. The problem starts when:\n* you still want to be able to use django template engine\n* and you want a cool place to define your small templates.\n\nThose are the 2 issues that this django app tries to address. It also comes with helper functionalities for those kind of templates, like the `verbatim` templatetags from django 1.5 dev code that allows you to define a zone where django won't interpret anything to avoid conflicts with template languages like `mustache.js`.\n\nWith it, you define all your small templates in the same directory and you'll be able to access them in the `fragments` javascript object that contains the (rendered by django) templates.\n\n# Installation\n\nFrom pip:\n\n    pip install django-template-fragments\n\nFrom setup.py:\n\n    git clone git://github.com/Psycojoker/django-template-fragments.git\n    cd django-template-fragments\n    python setup.py install\n\nCreate a dir where you want to store your fragments, then add `FRAGMENTS_DIR` to your `settings.py`, it must be an absolute path.\n\nI like to define my `FRAGMENTS_DIR` like this:\n\n    import os\n    PROJECT_PATH = os.path.abspath(os.path.split(__file__)[0])\n    SUBPROJECT_PATH = os.path.split(PROJECT_PATH)[0]\n\n    FRAGMENTS_DIR = os.path.join(SUBPROJECT_PATH, \"fragments\")\n\nThis will set it to the directory `project_name/fragments` (where your `settings.py` is in `project_name/project_name/settings.py`).\n\nNext, write some small html snippets in this dir.\n\nThen add something like this to your `urls.py`\n\n    url(r'^', include('fragments.urls')),\n\nAnd somewhere in your base template\n\n    <script type=\"text/javascript\" src=\"{% url fragments %}\" />\n\nThis will give you a javascript object `fragments` containing all your fragments, the key is the filename of the fragment without the extension.\n\nExample: `object_list.html` will be accessible in the `fragments` object like this: `fragments.object_list`\n\nIf you put the fragment in a subdir in the `FRAGMENTS_DIR`, the key will be the filename without its extension joined with the subdir path where the `/` are replaced by `_`.\n\nNot clear? Here is an example: the file `FRAGMENTS_DIR/one/two/three.html` will be accessible at the key `one_two_three`.\n\n# HamlPy support\n\nIf you have [HamlPy](https://github.com/jessemiller/HamlPy) installed and that your fragment name ends with `.haml`, django-template-fragments will take it into account and use HamlPy to generate the html.\n\n# Verbatim tag\n\n**You have to put `fragments` in your installed apps in settings.py for this to work**.\n\nI've taken code from the dev branch of django 1.5 to allow the use of the\n[verbatim](https://docs.djangoproject.com/en/dev/ref/templates/builtins/#verbatim)\ntemplatetags to avoid conflicts between django template syntax and other\ntemplate engine syntax (e.g. mustache).\n\nExample:\n\n    {% load fragments %}\n\n    {{ will_be_interpreted }}\n    {% verbatim %}\n    {{ wont_be_interpredted }}\n    {% endverbatim %}\n\nYou can also choose a specific closing tag as described in django documentation.\n\nExample from the doc:\n\n    {% load fragments %}\n\n    {% verbatim myblock %}\n        Avoid template rendering via the {% verbatim %}{% endverbatim %} block.\n    {% endverbatim myblock %}\n\n# Ignored files extensions\n\nBy default `django-template-fragments` ignores every files that ends with one of those: `.pyc` `.swo` `.swp` `~`\n\nYou can specify your own list by defining `FRAGMENTS_IGNORED_FILE_TYPES` in your `settings.py`.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Psycojoker/django-template-fragments", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-template-fragments", "package_url": "https://pypi.org/project/django-template-fragments/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-template-fragments/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Psycojoker/django-template-fragments"}, "release_url": "https://pypi.org/project/django-template-fragments/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "helper for templates used in javascript client framework: allow to store small django templates in a dir and generate a javascript object that contains them all as strings", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Introduction<br><br>Often, when you use a client-side javascript framework (e.g. backbone/ember/angular/wathever), you'll want small templates to render your page. The problem starts when:<br>* you still want to be able to use django template engine<br>* and you want a cool place to define your small templates.<br><br>Those are the 2 issues that this django app tries to address. It also comes with helper functionalities for those kind of templates, like the `verbatim` templatetags from django 1.5 dev code that allows you to define a zone where django won't interpret anything to avoid conflicts with template languages like `mustache.js`.<br><br>With it, you define all your small templates in the same directory and you'll be able to access them in the `fragments` javascript object that contains the (rendered by django) templates.<br><br># Installation<br><br>From pip:<br><br>    pip install django-template-fragments<br><br>From setup.py:<br><br>    git clone git://github.com/Psycojoker/django-template-fragments.git<br>    cd django-template-fragments<br>    python setup.py install<br><br>Create a dir where you want to store your fragments, then add `FRAGMENTS_DIR` to your `settings.py`, it must be an absolute path.<br><br>I like to define my `FRAGMENTS_DIR` like this:<br><br>    import os<br>    PROJECT_PATH = os.path.abspath(os.path.split(__file__)[0])<br>    SUBPROJECT_PATH = os.path.split(PROJECT_PATH)[0]<br><br>    FRAGMENTS_DIR = os.path.join(SUBPROJECT_PATH, \"fragments\")<br><br>This will set it to the directory `project_name/fragments` (where your `settings.py` is in `project_name/project_name/settings.py`).<br><br>Next, write some small html snippets in this dir.<br><br>Then add something like this to your `urls.py`<br><br>    url(r'^', include('fragments.urls')),<br><br>And somewhere in your base template<br><br>    &lt;script type=\"text/javascript\" src=\"{% url fragments %}\" /&gt;<br><br>This will give you a javascript object `fragments` containing all your fragments, the key is the filename of the fragment without the extension.<br><br>Example: `object_list.html` will be accessible in the `fragments` object like this: `fragments.object_list`<br><br>If you put the fragment in a subdir in the `FRAGMENTS_DIR`, the key will be the filename without its extension joined with the subdir path where the `/` are replaced by `_`.<br><br>Not clear? Here is an example: the file `FRAGMENTS_DIR/one/two/three.html` will be accessible at the key `one_two_three`.<br><br># HamlPy support<br><br>If you have [HamlPy](https://github.com/jessemiller/HamlPy) installed and that your fragment name ends with `.haml`, django-template-fragments will take it into account and use HamlPy to generate the html.<br><br># Verbatim tag<br><br>**You have to put `fragments` in your installed apps in settings.py for this to work**.<br><br>I've taken code from the dev branch of django 1.5 to allow the use of the<br>[verbatim](https://docs.djangoproject.com/en/dev/ref/templates/builtins/#verbatim)<br>templatetags to avoid conflicts between django template syntax and other<br>template engine syntax (e.g. mustache).<br><br>Example:<br><br>    {% load fragments %}<br><br>    {{ will_be_interpreted }}<br>    {% verbatim %}<br>    {{ wont_be_interpredted }}<br>    {% endverbatim %}<br><br>You can also choose a specific closing tag as described in django documentation.<br><br>Example from the doc:<br><br>    {% load fragments %}<br><br>    {% verbatim myblock %}<br>        Avoid template rendering via the {% verbatim %}{% endverbatim %} block.<br>    {% endverbatim myblock %}<br><br># Ignored files extensions<br><br>By default `django-template-fragments` ignores every files that ends with one of those: `.pyc` `.swo` `.swp` `~`<br><br>You can specify your own list by defining `FRAGMENTS_IGNORED_FILE_TYPES` in your `settings.py`.\n          </div>"}, "last_serial": 790835, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "3e1b7c1e732f35ffe8f4c974db06da31", "sha256": "df5a5bed5ee08b492eb1479e04f3961e183511530ebf134262b6b7727af4aa27"}, "downloads": -1, "filename": "django-template-fragments-0.1.tar.gz", "has_sig": false, "md5_digest": "3e1b7c1e732f35ffe8f4c974db06da31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5355, "upload_time": "2012-08-30T22:24:17", "upload_time_iso_8601": "2012-08-30T22:24:17.689331Z", "url": "https://files.pythonhosted.org/packages/45/35/d3a03b8a2bcb1883c85d9c59443fa3b627d973c1b41fcf050642834ab278/django-template-fragments-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "c5b2ef85fa68992e9fef5fd6c7ed8e5b", "sha256": "5f299d94087e35bede48298ba9c660fdfd4d68eb6e7540a6cdef7a6cbe19afa7"}, "downloads": -1, "filename": "django-template-fragments-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c5b2ef85fa68992e9fef5fd6c7ed8e5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5756, "upload_time": "2012-09-01T06:19:57", "upload_time_iso_8601": "2012-09-01T06:19:57.562801Z", "url": "https://files.pythonhosted.org/packages/a3/57/fb32df30978ebd4c5b7388e97d1dd08b4e87a4b65dd2dc1da7d002aff48f/django-template-fragments-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "66143488b4db8c3f1d7338087236ee36", "sha256": "0a56997991d34efd9281c76a566427ff5e3ea457c3d2b2a7748107756ffa5e9b"}, "downloads": -1, "filename": "django-template-fragments-0.1.2.tar.gz", "has_sig": false, "md5_digest": "66143488b4db8c3f1d7338087236ee36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5761, "upload_time": "2012-09-01T19:14:48", "upload_time_iso_8601": "2012-09-01T19:14:48.017288Z", "url": "https://files.pythonhosted.org/packages/7a/3c/dc8ff0584517a3315430f0af98e79d86cc8c43cdef10a1b2ed9e40cda969/django-template-fragments-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "730a3d9fe38489d03b7023fd7b8931d3", "sha256": "8025b5b05432df8dc1412ffe15a42aa36850faa00b1bfbf493ff6cf24e803f97"}, "downloads": -1, "filename": "django-template-fragments-0.1.3.tar.gz", "has_sig": false, "md5_digest": "730a3d9fe38489d03b7023fd7b8931d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5753, "upload_time": "2012-09-05T01:35:07", "upload_time_iso_8601": "2012-09-05T01:35:07.245697Z", "url": "https://files.pythonhosted.org/packages/f4/07/2aeb550d7db60e7d7f88a98fb5551f227191f57ae33ccdffdb1f280b75d4/django-template-fragments-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "730a3d9fe38489d03b7023fd7b8931d3", "sha256": "8025b5b05432df8dc1412ffe15a42aa36850faa00b1bfbf493ff6cf24e803f97"}, "downloads": -1, "filename": "django-template-fragments-0.1.3.tar.gz", "has_sig": false, "md5_digest": "730a3d9fe38489d03b7023fd7b8931d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5753, "upload_time": "2012-09-05T01:35:07", "upload_time_iso_8601": "2012-09-05T01:35:07.245697Z", "url": "https://files.pythonhosted.org/packages/f4/07/2aeb550d7db60e7d7f88a98fb5551f227191f57ae33ccdffdb1f280b75d4/django-template-fragments-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:37 2020"}