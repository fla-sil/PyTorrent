{"info": {"author": "Rainy Chan", "author_email": "rainydew@qq.com", "bugtrack_url": null, "classifiers": [], "description": "json_compare\r\n============\r\n\r\nA library to compare any json string/bytes/json-like-objects. Version\r\n1.16 is a quickfix version that supports Python 3.8.\r\n\r\nFeatures\r\n--------\r\n\r\n-  Compare jsons and print the differences (what and where they are,\r\n   recursion supported). Useful for interface testing.\r\n-  Config whether it will ignore the order of items in a list or not,\r\n   recursively.\r\n-  Both python 26+ and 35+ supported.\r\n-  Regular expressions supported for string to skip unconcerned keys or\r\n   just to assert the format.\r\n-  Compact **str** and **unicode** (or **bytes** and **str** in\r\n   python3), they are considered equal. Good for non ascii coding\r\n   languages.\r\n-  Both **json string** (**unicode** or **binary** str) and **json\r\n   object** (**dict**, **list** or **tuple**) are supported.\r\n-  Support tuples, so results from pymysql.cursors.DictCursor can\r\n   compare with interface response directly.\r\n-  Json type legal check.\r\n-  Support skipping anywhere using argument like *ignore_path=[\u201c/a/1/k\u201d,\r\n   \u201c/a/1/l\u201d]*, dict keys or list indexes. Skipped fields are regarded as\r\n   match.\r\n-  The ignore_path list now support regular expressions too. You can use\r\n   *[r\u201c^(/:raw-latex:`\\d+`/a)\u201d]* as ignore_path to skip all keys named\r\n   \u201ca\u201d in *[{\u201ca\u201d: 1, \u201cb\u201d: 2}, {\u201ca\u201d: 1, \u201cb\u201d: 4}]* but still compare the\r\n   value of \u201cb\u201d. (New)\r\n\r\n   -  Useful when compare multi records in database query result\r\n      (dictionary cursor) with some fields unconcerned.\r\n\r\n-  Fuzzy equal when handling floats. (New)\r\n-  Python 3.8 supported. (New)\r\n\r\nQuickStart\r\n----------\r\n\r\ninstall\r\n\r\n.. code:: shell\r\n\r\n   pip install jsoncomparedeep\r\n\r\nor update\r\n\r\n.. code:: shell\r\n\r\n   pip install -U jsoncomparedeep\r\n\r\na simple example\r\n\r\n.. code:: python\r\n\r\n   from json_compare import Jcompare\r\n   cp=Jcompare()\r\n   print(cp.compare({\"key1\":[\"v1\",\"v2\"],\"key2\":{\"key3\":1}},{\"key1\":[\"v2\",\"v1\"],\"key2\":{\"key3\":2}}))\r\n\r\nto see\r\n\r\n::\r\n\r\n   a is {'key2': {'key3': 1}, 'key1': ['v1', 'v2']}\r\n   b is {'key2': {'key3': 2}, 'key1': ['v2', 'v1']}\r\n   ignore_list_seq = True, re_compare = True\r\n   different value at /key2/key3\r\n   a: 1\r\n   b: 2\r\n   False\r\n\r\nFor more demos and information, just install it and visit the test file\r\n**test_json_compare.py** in\r\n**Your_Python_Path/Lib/site-packages/json_compare/**\r\n\r\nSmall Hints\r\n-----------\r\n\r\n-  Datetime in SQL result is not JSON serializable type, use something\r\n   like **CAST(create_time as CHAR) \u2018create_time\u2019** in SQL statement to\r\n   solve it.\r\n\r\nBug report\r\n----------\r\n\r\n-  Issues and bugs report to rainydew@qq.com.\r\n-  Homepage icon leads to my Github project page, issues / PRs / stars\r\n   are welcomed :)\r\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rainydew/jsoncomparedeep", "keywords": "json comparison order unicode fuzzy", "license": "", "maintainer": "", "maintainer_email": "", "name": "jsoncomparedeep", "package_url": "https://pypi.org/project/jsoncomparedeep/", "platform": "", "project_url": "https://pypi.org/project/jsoncomparedeep/", "project_urls": {"Homepage": "https://github.com/rainydew/jsoncomparedeep"}, "release_url": "https://pypi.org/project/jsoncomparedeep/1.16/", "requires_dist": null, "requires_python": "", "summary": "A recursive json comparison library that handles list orders and fuzzy types", "version": "1.16", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A library to compare any json string/bytes/json-like-objects. Version\n1.16 is a quickfix version that supports Python 3.8.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Compare jsons and print the differences (what and where they are,\nrecursion supported). Useful for interface testing.</li>\n<li>Config whether it will ignore the order of items in a list or not,\nrecursively.</li>\n<li>Both python 26+ and 35+ supported.</li>\n<li>Regular expressions supported for string to skip unconcerned keys or\njust to assert the format.</li>\n<li>Compact <strong>str</strong> and <strong>unicode</strong> (or <strong>bytes</strong> and <strong>str</strong> in\npython3), they are considered equal. Good for non ascii coding\nlanguages.</li>\n<li>Both <strong>json string</strong> (<strong>unicode</strong> or <strong>binary</strong> str) and <strong>json\nobject</strong> (<strong>dict</strong>, <strong>list</strong> or <strong>tuple</strong>) are supported.</li>\n<li>Support tuples, so results from pymysql.cursors.DictCursor can\ncompare with interface response directly.</li>\n<li>Json type legal check.</li>\n<li>Support skipping anywhere using argument like <em>ignore_path=[\u201c/a/1/k\u201d,\n\u201c/a/1/l\u201d]</em>, dict keys or list indexes. Skipped fields are regarded as\nmatch.</li>\n<li>The ignore_path list now support regular expressions too. You can use\n<em>[r\u201c^(/:raw-latex:`d+`/a)\u201d]</em> as ignore_path to skip all keys named\n\u201ca\u201d in <em>[{\u201ca\u201d: 1, \u201cb\u201d: 2}, {\u201ca\u201d: 1, \u201cb\u201d: 4}]</em> but still compare the\nvalue of \u201cb\u201d. (New)<ul>\n<li>Useful when compare multi records in database query result\n(dictionary cursor) with some fields unconcerned.</li>\n</ul>\n</li>\n<li>Fuzzy equal when handling floats. (New)</li>\n<li>Python 3.8 supported. (New)</li>\n</ul>\n</div>\n<div id=\"quickstart\">\n<h2>QuickStart</h2>\n<p>install</p>\n<pre>pip install jsoncomparedeep\n</pre>\n<p>or update</p>\n<pre>pip install -U jsoncomparedeep\n</pre>\n<p>a simple example</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json_compare</span> <span class=\"kn\">import</span> <span class=\"n\">Jcompare</span>\n<span class=\"n\">cp</span><span class=\"o\">=</span><span class=\"n\">Jcompare</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cp</span><span class=\"o\">.</span><span class=\"n\">compare</span><span class=\"p\">({</span><span class=\"s2\">\"key1\"</span><span class=\"p\">:[</span><span class=\"s2\">\"v1\"</span><span class=\"p\">,</span><span class=\"s2\">\"v2\"</span><span class=\"p\">],</span><span class=\"s2\">\"key2\"</span><span class=\"p\">:{</span><span class=\"s2\">\"key3\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}},{</span><span class=\"s2\">\"key1\"</span><span class=\"p\">:[</span><span class=\"s2\">\"v2\"</span><span class=\"p\">,</span><span class=\"s2\">\"v1\"</span><span class=\"p\">],</span><span class=\"s2\">\"key2\"</span><span class=\"p\">:{</span><span class=\"s2\">\"key3\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}}))</span>\n</pre>\n<p>to see</p>\n<pre>a is {'key2': {'key3': 1}, 'key1': ['v1', 'v2']}\nb is {'key2': {'key3': 2}, 'key1': ['v2', 'v1']}\nignore_list_seq = True, re_compare = True\ndifferent value at /key2/key3\na: 1\nb: 2\nFalse\n</pre>\n<p>For more demos and information, just install it and visit the test file\n<strong>test_json_compare.py</strong> in\n<strong>Your_Python_Path/Lib/site-packages/json_compare/</strong></p>\n</div>\n<div id=\"small-hints\">\n<h2>Small Hints</h2>\n<ul>\n<li>Datetime in SQL result is not JSON serializable type, use something\nlike <strong>CAST(create_time as CHAR) \u2018create_time\u2019</strong> in SQL statement to\nsolve it.</li>\n</ul>\n</div>\n<div id=\"bug-report\">\n<h2>Bug report</h2>\n<ul>\n<li>Issues and bugs report to <a href=\"mailto:rainydew%40qq.com\">rainydew<span>@</span>qq<span>.</span>com</a>.</li>\n<li>Homepage icon leads to my Github project page, issues / PRs / stars\nare welcomed :)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6851275, "releases": {"1.12": [{"comment_text": "", "digests": {"md5": "c1abc689f422b071d1461f357ced3e45", "sha256": "b68f86a0ac87440e9c09470e97144c0767134d40b7878dfdb20b01ff1f26c176"}, "downloads": -1, "filename": "jsoncomparedeep-1.12.tar.gz", "has_sig": false, "md5_digest": "c1abc689f422b071d1461f357ced3e45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6505, "upload_time": "2019-07-14T09:00:22", "upload_time_iso_8601": "2019-07-14T09:00:22.775377Z", "url": "https://files.pythonhosted.org/packages/79/c2/23128027ab914090b0408c9fe51bd263959b982a91224cc92c2a1f0eddb2/jsoncomparedeep-1.12.tar.gz", "yanked": false}], "1.14": [{"comment_text": "", "digests": {"md5": "e9874e220e1823a5396afab345e76c58", "sha256": "a03baa2cf0e32c8fd42712070de6bb7f83272251d69ea5b778c359d9f187da05"}, "downloads": -1, "filename": "jsoncomparedeep-1.14.tar.gz", "has_sig": false, "md5_digest": "e9874e220e1823a5396afab345e76c58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7417, "upload_time": "2019-08-19T18:31:14", "upload_time_iso_8601": "2019-08-19T18:31:14.334753Z", "url": "https://files.pythonhosted.org/packages/48/e1/bad96fd3cf92f0be8e062b23179b0775d4468f9590372a2e6ee185fe0d6a/jsoncomparedeep-1.14.tar.gz", "yanked": false}], "1.16": [{"comment_text": "", "digests": {"md5": "b517cb270719e0720ddff5e2fe6b7ef0", "sha256": "01370099dc63162134576d458b27cdc297096877439ef1182f52e6ac4d28c7b4"}, "downloads": -1, "filename": "jsoncomparedeep-1.16.tar.gz", "has_sig": false, "md5_digest": "b517cb270719e0720ddff5e2fe6b7ef0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7548, "upload_time": "2020-03-20T17:13:00", "upload_time_iso_8601": "2020-03-20T17:13:00.953306Z", "url": "https://files.pythonhosted.org/packages/af/96/b834a35892bc1c7da751af2856a8bba552a9dee441d6aa3706cec2a70579/jsoncomparedeep-1.16.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b517cb270719e0720ddff5e2fe6b7ef0", "sha256": "01370099dc63162134576d458b27cdc297096877439ef1182f52e6ac4d28c7b4"}, "downloads": -1, "filename": "jsoncomparedeep-1.16.tar.gz", "has_sig": false, "md5_digest": "b517cb270719e0720ddff5e2fe6b7ef0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7548, "upload_time": "2020-03-20T17:13:00", "upload_time_iso_8601": "2020-03-20T17:13:00.953306Z", "url": "https://files.pythonhosted.org/packages/af/96/b834a35892bc1c7da751af2856a8bba552a9dee441d6aa3706cec2a70579/jsoncomparedeep-1.16.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:52 2020"}