{"info": {"author": "Stefan Delic", "author_email": "eastempiretradingcompany2019@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "EETC Algo Trading\n=====================\n\nDescription\n-----------\nAlgorithmic Trading Python Library by EETC.\n\nThis library simplifies writing and running algorithmic trading bots.\nIt integrates EETC services for placing orders and receiving live data, allowing the developer\nto focus solely on implementing the trading algorithm.\n\n\nHow it works\n------------\nThis library connects to [EETC Data Feed](https://github.com/delicmakaveli/eetc-data-feed) and receives live data via [ZeroMQ](http://zeromq.org/).\nTo place orders for Stocks, Options, Crypto, etc. this library communicates with [EETC Order Manager](https://github.com/delicmakaveli/eetc-order-manager-crypto) via ZeroMQ.\n\nExample [code](https://github.com/delicmakaveli/eetc-trading-lib-python/blob/master/examples/simple.py):\n```python\nfrom eetc_algo_trading import EETCTradingBot\n\n\ndef algorithm(bot_instance, topic=None, manual_trigger_details=None):\n    bot_instance.algorithm_lock = True  # kinda \"obtain\" lock\n    if topic:\n        print(\"Executing Strategy for Topic: {}\".format(topic))\n        # whatever logic\n    elif manual_trigger_details:\n        print(\"Executing Strategy Manually...\")\n        print(\"Request data:\", manual_trigger_details)\n        # whatever logic\n    else:\n        print(\"Executing Strategy...\")\n        # whatever logic\n\n    bot_instance.algorithm_lock = False  # kinda \"release\" lock\n\n\nbot = EETCTradingBot(\n    algorithm=algorithm,\n    eetc_api_key=\"rAnDoMaPiKeyProvidedbyEETC\",\n    data_feed_topics=[\"candles:BTC/USD:1m\"],\n    trigger_on_topics=[\"candles:BTC/USD:1m\"],\n    allow_remote_triggering=False,\n)\n\nbot.start()\n```\n\nThe only thing a developer needs to do is write the \"algorithm\" function and pass it to the EETCTradingBot during initialization.\n\n### Authentication\nTo be able to receive data or execute trades, an API key is needed, which will be provided to you by EETC.\nAlthough this library is open-sourced, nobody who isn't a client of EETC will be able to use the services that this library uses without the API key.\n\nTo become a client and obtain your API key, please contact us at: [eastempiretradingcompany2019@gmail.com](eastempiretradingcompany2019@gmail.com)\n\n### Order management\nIt is entirely up to the developer to implement their own order management logic.\n[EETC Order Manager](https://github.com/delicmakaveli/eetc-order-manager-crypto) provides various APIs where clients can get order information and receive real-time updates.\n\nThe most common tactic is to write a helper function for managing orders which will be executed within the algorithm function.\n\nThis approach may not be the most user-friendly, but it was chosen because it gives the developer absolute freedom for writing their strategy, which includes order management.\n\n### Manual execution via ZeroMQ\nStrategies can be triggered either manually via ZeroMQ by sending a request via REQ-REP sockets.\nWhat information you put inside this request and how you process it is entirely up to you.\nOne simple use case for this might be when one algorithm is not sure about a trading decision, it can call\nanother algorithm which may be able to do that.\n\n### Event-based execution\nStrategies can also be triggered whenever a certain kind of data signal comes in (topic).\nFor example on each \"candles:BTC/USD:1m\" signal, execute the strategy.\n\n### Scheduled execution\n\nComing soon...\n\n\nSystem Requirements\n-------------------\n- Python 3.6 (should also work with other versions of Pythhon 3)\n- TA-Lib C library installed (https://mrjbq7.github.io/ta-lib/install.html)\n\nInstallation\n------------\n\n- PyPi repository: https://pypi.org/project/eetc-algo-trading-lib/\n- Run command: `pip install eetc-algo-trading-lib`\n\nDevelopment\n-----------\n- Packaging: https://packaging.python.org/tutorials/packaging-projects/\n\nLicence\n-------\nThis project is licensed under [GNU Public License](https://github.com/delicmakaveli/eetc-trading-lib-python/blob/master/LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/delicmakaveli/eetc-trading-lib-python", "keywords": "", "license": "GPLv2", "maintainer": "", "maintainer_email": "", "name": "eetc-algo-trading-lib", "package_url": "https://pypi.org/project/eetc-algo-trading-lib/", "platform": "", "project_url": "https://pypi.org/project/eetc-algo-trading-lib/", "project_urls": {"Homepage": "https://github.com/delicmakaveli/eetc-trading-lib-python"}, "release_url": "https://pypi.org/project/eetc-algo-trading-lib/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Algorithmic Trading Library by East Empire Trading Company.", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EETC Algo Trading</h1>\n<h2>Description</h2>\n<p>Algorithmic Trading Python Library by EETC.</p>\n<p>This library simplifies writing and running algorithmic trading bots.\nIt integrates EETC services for placing orders and receiving live data, allowing the developer\nto focus solely on implementing the trading algorithm.</p>\n<h2>How it works</h2>\n<p>This library connects to <a href=\"https://github.com/delicmakaveli/eetc-data-feed\" rel=\"nofollow\">EETC Data Feed</a> and receives live data via <a href=\"http://zeromq.org/\" rel=\"nofollow\">ZeroMQ</a>.\nTo place orders for Stocks, Options, Crypto, etc. this library communicates with <a href=\"https://github.com/delicmakaveli/eetc-order-manager-crypto\" rel=\"nofollow\">EETC Order Manager</a> via ZeroMQ.</p>\n<p>Example <a href=\"https://github.com/delicmakaveli/eetc-trading-lib-python/blob/master/examples/simple.py\" rel=\"nofollow\">code</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eetc_algo_trading</span> <span class=\"kn\">import</span> <span class=\"n\">EETCTradingBot</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">algorithm</span><span class=\"p\">(</span><span class=\"n\">bot_instance</span><span class=\"p\">,</span> <span class=\"n\">topic</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">manual_trigger_details</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">bot_instance</span><span class=\"o\">.</span><span class=\"n\">algorithm_lock</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>  <span class=\"c1\"># kinda \"obtain\" lock</span>\n    <span class=\"k\">if</span> <span class=\"n\">topic</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Executing Strategy for Topic: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">topic</span><span class=\"p\">))</span>\n        <span class=\"c1\"># whatever logic</span>\n    <span class=\"k\">elif</span> <span class=\"n\">manual_trigger_details</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Executing Strategy Manually...\"</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Request data:\"</span><span class=\"p\">,</span> <span class=\"n\">manual_trigger_details</span><span class=\"p\">)</span>\n        <span class=\"c1\"># whatever logic</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Executing Strategy...\"</span><span class=\"p\">)</span>\n        <span class=\"c1\"># whatever logic</span>\n\n    <span class=\"n\">bot_instance</span><span class=\"o\">.</span><span class=\"n\">algorithm_lock</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>  <span class=\"c1\"># kinda \"release\" lock</span>\n\n\n<span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">EETCTradingBot</span><span class=\"p\">(</span>\n    <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"n\">algorithm</span><span class=\"p\">,</span>\n    <span class=\"n\">eetc_api_key</span><span class=\"o\">=</span><span class=\"s2\">\"rAnDoMaPiKeyProvidedbyEETC\"</span><span class=\"p\">,</span>\n    <span class=\"n\">data_feed_topics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"candles:BTC/USD:1m\"</span><span class=\"p\">],</span>\n    <span class=\"n\">trigger_on_topics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"candles:BTC/USD:1m\"</span><span class=\"p\">],</span>\n    <span class=\"n\">allow_remote_triggering</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">bot</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>The only thing a developer needs to do is write the \"algorithm\" function and pass it to the EETCTradingBot during initialization.</p>\n<h3>Authentication</h3>\n<p>To be able to receive data or execute trades, an API key is needed, which will be provided to you by EETC.\nAlthough this library is open-sourced, nobody who isn't a client of EETC will be able to use the services that this library uses without the API key.</p>\n<p>To become a client and obtain your API key, please contact us at: <a href=\"eastempiretradingcompany2019@gmail.com\" rel=\"nofollow\">eastempiretradingcompany2019@gmail.com</a></p>\n<h3>Order management</h3>\n<p>It is entirely up to the developer to implement their own order management logic.\n<a href=\"https://github.com/delicmakaveli/eetc-order-manager-crypto\" rel=\"nofollow\">EETC Order Manager</a> provides various APIs where clients can get order information and receive real-time updates.</p>\n<p>The most common tactic is to write a helper function for managing orders which will be executed within the algorithm function.</p>\n<p>This approach may not be the most user-friendly, but it was chosen because it gives the developer absolute freedom for writing their strategy, which includes order management.</p>\n<h3>Manual execution via ZeroMQ</h3>\n<p>Strategies can be triggered either manually via ZeroMQ by sending a request via REQ-REP sockets.\nWhat information you put inside this request and how you process it is entirely up to you.\nOne simple use case for this might be when one algorithm is not sure about a trading decision, it can call\nanother algorithm which may be able to do that.</p>\n<h3>Event-based execution</h3>\n<p>Strategies can also be triggered whenever a certain kind of data signal comes in (topic).\nFor example on each \"candles:BTC/USD:1m\" signal, execute the strategy.</p>\n<h3>Scheduled execution</h3>\n<p>Coming soon...</p>\n<h2>System Requirements</h2>\n<ul>\n<li>Python 3.6 (should also work with other versions of Pythhon 3)</li>\n<li>TA-Lib C library installed (<a href=\"https://mrjbq7.github.io/ta-lib/install.html\" rel=\"nofollow\">https://mrjbq7.github.io/ta-lib/install.html</a>)</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>PyPi repository: <a href=\"https://pypi.org/project/eetc-algo-trading-lib/\" rel=\"nofollow\">https://pypi.org/project/eetc-algo-trading-lib/</a></li>\n<li>Run command: <code>pip install eetc-algo-trading-lib</code></li>\n</ul>\n<h2>Development</h2>\n<ul>\n<li>Packaging: <a href=\"https://packaging.python.org/tutorials/packaging-projects/\" rel=\"nofollow\">https://packaging.python.org/tutorials/packaging-projects/</a></li>\n</ul>\n<h2>Licence</h2>\n<p>This project is licensed under <a href=\"https://github.com/delicmakaveli/eetc-trading-lib-python/blob/master/LICENSE\" rel=\"nofollow\">GNU Public License</a>.</p>\n\n          </div>"}, "last_serial": 5139522, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1c085cdbf3db147755ce02cc8027388e", "sha256": "fb3781249b1cbd8d5b63d194638fe34b29cfa4f69523bcb444cc878c8385456e"}, "downloads": -1, "filename": "eetc_algo_trading_lib-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1c085cdbf3db147755ce02cc8027388e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13986, "upload_time": "2019-04-13T23:10:20", "upload_time_iso_8601": "2019-04-13T23:10:20.624566Z", "url": "https://files.pythonhosted.org/packages/0b/2c/22de5813a457a1f876f274a9fa7ea13386aefcc0fb8f5565f3d4c460397b/eetc_algo_trading_lib-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4255c0b0e48a36c6a7b20024e20d5bce", "sha256": "ce5bab3f9316ee11f87751c3ba4ee7f3f0ceb5ff93ef5909eb11c272b027dc96"}, "downloads": -1, "filename": "eetc-algo-trading-lib-0.1.tar.gz", "has_sig": false, "md5_digest": "4255c0b0e48a36c6a7b20024e20d5bce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6053, "upload_time": "2019-04-13T23:10:22", "upload_time_iso_8601": "2019-04-13T23:10:22.876742Z", "url": "https://files.pythonhosted.org/packages/fe/fc/f6585b0312993e7e9dbe5c2b954676c50ce4d71c83ae69da72bd506ba9e5/eetc-algo-trading-lib-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "ca2ca03995d22ad2b671790c9c5e2d7a", "sha256": "04636ff828209c333a8c8593f3269c54e5b7e6682688ef5724d6b86087ca5b05"}, "downloads": -1, "filename": "eetc_algo_trading_lib-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ca2ca03995d22ad2b671790c9c5e2d7a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14069, "upload_time": "2019-04-13T23:28:52", "upload_time_iso_8601": "2019-04-13T23:28:52.992675Z", "url": "https://files.pythonhosted.org/packages/31/c4/963adca534c8ca233c1ad62ff05e83f5fb51f310721a13348826860299f0/eetc_algo_trading_lib-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a5a731afa75f10620fbbf57b7dc280a", "sha256": "bc2aeea51743cc9b667d6b817f23b15b48e770c4f2cd426f42b2a43603c2bf66"}, "downloads": -1, "filename": "eetc-algo-trading-lib-0.2.tar.gz", "has_sig": false, "md5_digest": "8a5a731afa75f10620fbbf57b7dc280a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6147, "upload_time": "2019-04-13T23:28:54", "upload_time_iso_8601": "2019-04-13T23:28:54.755275Z", "url": "https://files.pythonhosted.org/packages/f7/c7/5269e938f1a66d4a87917f9a7ab7efc6a1fb5fbd56c01e1407397c4215bc/eetc-algo-trading-lib-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "49e3ad18edc3ada41c1892ce030143ee", "sha256": "8a8c3bb8c30c6e4a77f2a41168270035dec0dc9c92a9bebb4177063e96b17734"}, "downloads": -1, "filename": "eetc_algo_trading_lib-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49e3ad18edc3ada41c1892ce030143ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14266, "upload_time": "2019-04-13T23:46:50", "upload_time_iso_8601": "2019-04-13T23:46:50.093447Z", "url": "https://files.pythonhosted.org/packages/ec/63/389c5f8d2ace2c1b42b9dc75e03e9d4a77b10f6af6eef9c7819cf808c16e/eetc_algo_trading_lib-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6efa22a05aeeb5508d275a02786738ac", "sha256": "a6eaa0e95dac714219396068e03794ae8c33c4d7c3dd11c589a41ba772abf195"}, "downloads": -1, "filename": "eetc-algo-trading-lib-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6efa22a05aeeb5508d275a02786738ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6400, "upload_time": "2019-04-13T23:46:51", "upload_time_iso_8601": "2019-04-13T23:46:51.774341Z", "url": "https://files.pythonhosted.org/packages/05/1b/5e6fdf38562c353cfa8e218f2267fb31094fcea80b58effaea3ce520ee08/eetc-algo-trading-lib-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49e3ad18edc3ada41c1892ce030143ee", "sha256": "8a8c3bb8c30c6e4a77f2a41168270035dec0dc9c92a9bebb4177063e96b17734"}, "downloads": -1, "filename": "eetc_algo_trading_lib-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49e3ad18edc3ada41c1892ce030143ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14266, "upload_time": "2019-04-13T23:46:50", "upload_time_iso_8601": "2019-04-13T23:46:50.093447Z", "url": "https://files.pythonhosted.org/packages/ec/63/389c5f8d2ace2c1b42b9dc75e03e9d4a77b10f6af6eef9c7819cf808c16e/eetc_algo_trading_lib-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6efa22a05aeeb5508d275a02786738ac", "sha256": "a6eaa0e95dac714219396068e03794ae8c33c4d7c3dd11c589a41ba772abf195"}, "downloads": -1, "filename": "eetc-algo-trading-lib-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6efa22a05aeeb5508d275a02786738ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6400, "upload_time": "2019-04-13T23:46:51", "upload_time_iso_8601": "2019-04-13T23:46:51.774341Z", "url": "https://files.pythonhosted.org/packages/05/1b/5e6fdf38562c353cfa8e218f2267fb31094fcea80b58effaea3ce520ee08/eetc-algo-trading-lib-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:24 2020"}