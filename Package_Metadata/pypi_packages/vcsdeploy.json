{"info": {"author": "Antonio Cuni", "author_email": "anto.cuni@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Win32 (MS Windows)", "Environment :: X11 Applications :: Qt", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: System :: Installation/Setup"], "description": ".. -*- restructuredtext -*-\n\nvcsdeploy\n==========\n\nEasily deploy your applications through your VCS\n=================================================\n\n``vcsdeploy`` allows you to easily deploy updates of your application to your\ncustomers through your favorite Version Control System.  So far, only\nmercurial is supported, but it should be very easy to add support for\nadditional VCSs.\n\nThe idea is that the application is installed by cloning the repository.\nEvery version of the application is represented as a Mercurial ``tag``: when\n``vcsdeploy`` runs, it pulls changes from the designed remote repository, and\nit displays a window showing all the available versions.  The user can then\nselect the appropriate version and update the application to it.\n\n\nExample of usage\n----------------\n\nSuppose your application ``myapp`` is installed in ``c:\\\\myapp``.  You need to\nwrite a basic config file, say ``myapp-config.py``::\n\n    class Config(object):\n        path = 'c:\\\\myapp'\n        version_regex = '^Version'\n\n\n``path`` contains the local repository which contains the application.  The\nrepository must be configured in a way that ``hg pull`` pulls the remote\nrepository without asking the user for any password, e.g. by using the ``ssh``\nprotocol or by `storing the http password`_.\n\n.. _`storing the http password`: http://mercurial.selenic.com/wiki/FAQ#FAQ.2BAC8-CommonProblems.How_can_I_store_my_HTTP_login_once_and_for_all_.3F\n\n``version_regex`` is a regular expression which is tested against all the tags\nfound in the repository, to make sure that the user will see only the tags\nthat start with ``Version``.  This way, we can still use Mercurial tags for\ninternal development reasons, without cluttering what is displayed to the\nfinal user.\n\nThen, we just need to launch ``vcsdeploy.pyw /path/to/myapp-config.py`` to\nstart ``vcsdeploy``.\n\n\nRequirements\n------------\n\nTo run ``vcsdeploy`` you need:\n\n  - PyQt4\n\n  - mercurial installed as a Python package (i.e., you need to be able to do\n    ``import mercurial`` from Python)\n\n  - the `py lib`_ (``easy_install py``)\n\n.. _`py lib`: http://pylib.org/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/antocuni/vcsdeploy", "keywords": "deployment vcs mercurial GUI", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "vcsdeploy", "package_url": "https://pypi.org/project/vcsdeploy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/vcsdeploy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://bitbucket.org/antocuni/vcsdeploy"}, "release_url": "https://pypi.org/project/vcsdeploy/0.3/", "requires_dist": null, "requires_python": null, "summary": "Minimal GUI to deploy updates through a VCS repository", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"vcsdeploy\">\n<h2>vcsdeploy</h2>\n</div>\n<div id=\"easily-deploy-your-applications-through-your-vcs\">\n<h2>Easily deploy your applications through your VCS</h2>\n<p><tt>vcsdeploy</tt> allows you to easily deploy updates of your application to your\ncustomers through your favorite Version Control System.  So far, only\nmercurial is supported, but it should be very easy to add support for\nadditional VCSs.</p>\n<p>The idea is that the application is installed by cloning the repository.\nEvery version of the application is represented as a Mercurial <tt>tag</tt>: when\n<tt>vcsdeploy</tt> runs, it pulls changes from the designed remote repository, and\nit displays a window showing all the available versions.  The user can then\nselect the appropriate version and update the application to it.</p>\n<div id=\"example-of-usage\">\n<h3>Example of usage</h3>\n<p>Suppose your application <tt>myapp</tt> is installed in <tt><span class=\"pre\">c:\\\\myapp</span></tt>.  You need to\nwrite a basic config file, say <tt><span class=\"pre\">myapp-config.py</span></tt>:</p>\n<pre>class Config(object):\n    path = 'c:\\\\myapp'\n    version_regex = '^Version'\n</pre>\n<p><tt>path</tt> contains the local repository which contains the application.  The\nrepository must be configured in a way that <tt>hg pull</tt> pulls the remote\nrepository without asking the user for any password, e.g. by using the <tt>ssh</tt>\nprotocol or by <a href=\"http://mercurial.selenic.com/wiki/FAQ#FAQ.2BAC8-CommonProblems.How_can_I_store_my_HTTP_login_once_and_for_all_.3F\" rel=\"nofollow\">storing the http password</a>.</p>\n<p><tt>version_regex</tt> is a regular expression which is tested against all the tags\nfound in the repository, to make sure that the user will see only the tags\nthat start with <tt>Version</tt>.  This way, we can still use Mercurial tags for\ninternal development reasons, without cluttering what is displayed to the\nfinal user.</p>\n<p>Then, we just need to launch <tt>vcsdeploy.pyw <span class=\"pre\">/path/to/myapp-config.py</span></tt> to\nstart <tt>vcsdeploy</tt>.</p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>To run <tt>vcsdeploy</tt> you need:</p>\n<blockquote>\n<ul>\n<li>PyQt4</li>\n<li>mercurial installed as a Python package (i.e., you need to be able to do\n<tt>import mercurial</tt> from Python)</li>\n<li>the <a href=\"http://pylib.org/\" rel=\"nofollow\">py lib</a> (<tt>easy_install py</tt>)</li>\n</ul>\n</blockquote>\n</div>\n</div>\n\n          </div>"}, "last_serial": 704900, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "71707e1e3953a555e6975f42eecb383a", "sha256": "35c1164f362fda55c9cde10ea602731f5d58862c3eff75af96be93a5af16edfe"}, "downloads": -1, "filename": "vcsdeploy-0.2.tar.gz", "has_sig": false, "md5_digest": "71707e1e3953a555e6975f42eecb383a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8709, "upload_time": "2012-04-13T18:09:05", "upload_time_iso_8601": "2012-04-13T18:09:05.195093Z", "url": "https://files.pythonhosted.org/packages/7c/cb/c744509a9e32bf1b8321f460491363656b9c408a264773d784e7a42ee6fd/vcsdeploy-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "6fe0fedd2bdcd9b51e3177e809da4c40", "sha256": "3b9977d67eaca0535104e488885899353b86dbb6fa5a6dfe82529e4897828e69"}, "downloads": -1, "filename": "vcsdeploy-0.3.tar.gz", "has_sig": false, "md5_digest": "6fe0fedd2bdcd9b51e3177e809da4c40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8687, "upload_time": "2012-04-13T18:20:31", "upload_time_iso_8601": "2012-04-13T18:20:31.717894Z", "url": "https://files.pythonhosted.org/packages/a6/8a/bda08665390cd9635051657b0307b0322e1850dfc7d8c1b165b5d018f88a/vcsdeploy-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6fe0fedd2bdcd9b51e3177e809da4c40", "sha256": "3b9977d67eaca0535104e488885899353b86dbb6fa5a6dfe82529e4897828e69"}, "downloads": -1, "filename": "vcsdeploy-0.3.tar.gz", "has_sig": false, "md5_digest": "6fe0fedd2bdcd9b51e3177e809da4c40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8687, "upload_time": "2012-04-13T18:20:31", "upload_time_iso_8601": "2012-04-13T18:20:31.717894Z", "url": "https://files.pythonhosted.org/packages/a6/8a/bda08665390cd9635051657b0307b0322e1850dfc7d8c1b165b5d018f88a/vcsdeploy-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:24 2020"}