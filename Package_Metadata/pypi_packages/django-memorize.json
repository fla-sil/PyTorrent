{"info": {"author": "Cristian Esquivias", "author_email": "cristian.esquivias@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: Education", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Topic :: Education", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Writing a flashcard application is almost a rite of passage for django users.\r\nYou create a simple Card model, you create a quiz view and template and you call\r\nit a day. A simple application and not very useful.\r\n\r\nDjango-memorize adds a more advanced way of learning your flashcards (or\r\nwhatever items you'd like) with the theory of `spaced repetition\r\n<http://en.wikipedia.org/wiki/Spaced_repetition spaced repetition>`_. The\r\n`SuperMemo 2 algorithm <http://www.supermemo.com/english/ol/sm2.htm>`_ is\r\ncurrently used. Flashcard web apps have just gotten better and easier.\r\n\r\nInstallation\r\n============\r\n#. Download the `latest version\r\n<http://code.google.com/p/django-memorize/downloads/list>`_.\r\n#. Extract and run ``python setup.py install``.\r\n#. Add ``memorize`` to ``INSTALLED_APPS`` list.\r\n\r\nUsage\r\n=====\r\n\r\nAdd an Item to Practice\r\n-----------------------\r\nLet's assume you have a flashcard web app with a card model::\r\n\r\n  from django.db import models\r\n  from django.contrib.auth.models import User\r\n\r\n  class Card(models.Model):\r\n      front = models.CharField(max_length=255)\r\n      back = models.CharField(max_length=255)\r\n      user = models.ForeignKey(User)\r\n\r\n\r\nTo begin practicing a new card, save a practice object for your flashcard::\r\n\r\n  from memorize.models import Practice\r\n\r\n  card = Card(front=\"When was Sgt. Pepper released?\", back=\"1967\",\r\nuser=request.user)\r\n  practice = Practice(item=card, user=card.user)\r\n  practice.save()\r\n\r\n\r\nStart Practicing\r\n----------------\r\nThe view ``memorize.views.next_practice_item`` does all the work of determining\r\nwhat the next item a user should practice. You just need to provide a template\r\nfile. Add an item to your urls.py file::\r\n\r\n  urlpatterns += patterns(\r\n      'memorize.views',\r\n      url(r'^item/next/$', 'next_practice_item', {'template':\r\n'memorize/next.html'}, name='next-song'),\r\n  )\r\n\r\n\r\nTemplate Variables Provided\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nform\r\n    A ``memorize.forms.RatingsForm`` instance you use to save the performance on\r\nthis practice instance.\r\n\r\nitem\r\n    Your original item. Use this to get your information (e.g., ``card.front``\r\ninformation)\r\n\r\npractice\r\n    The practice row.\r\n\r\nSaving Feedback\r\n---------------\r\nThe key to spaced repetition algorithms is using your past performance to\r\ndetermine when is the optimal time to reshow an item. If you used the\r\n``next_practice_item`` the template will have a ``form`` object that provides\r\nall the relative information.\r\n\r\nThe view ``memorize.views.process_rating`` will process the data. Add this view\r\nto your urls.py file.\r\n\r\nExample::\r\n\r\n  <form action=\"{% url memorize.views.process_rating %}\" method=\"post\">\r\n      {{ form }}\r\n  </form>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/django-memorize/", "keywords": "", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "django-memorize", "package_url": "https://pypi.org/project/django-memorize/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-memorize/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/django-memorize/"}, "release_url": "https://pypi.org/project/django-memorize/0.5.1/", "requires_dist": null, "requires_python": null, "summary": "Memorize your Django project's items with spaced repetition theory", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            Writing a flashcard application is almost a rite of passage for django users.\n<br>You create a simple Card model, you create a quiz view and template and you call\n<br>it a day. A simple application and not very useful.\n<br>\n<br>Django-memorize adds a more advanced way of learning your flashcards (or\n<br>whatever items you'd like) with the theory of `spaced repetition\n<br>&lt;http://en.wikipedia.org/wiki/Spaced_repetition spaced repetition&gt;`_. The\n<br>`SuperMemo 2 algorithm &lt;http://www.supermemo.com/english/ol/sm2.htm&gt;`_ is\n<br>currently used. Flashcard web apps have just gotten better and easier.\n<br>\n<br>Installation\n<br>============\n<br>#. Download the `latest version\n<br>&lt;http://code.google.com/p/django-memorize/downloads/list&gt;`_.\n<br>#. Extract and run ``python setup.py install``.\n<br>#. Add ``memorize`` to ``INSTALLED_APPS`` list.\n<br>\n<br>Usage\n<br>=====\n<br>\n<br>Add an Item to Practice\n<br>-----------------------\n<br>Let's assume you have a flashcard web app with a card model::\n<br>\n<br>  from django.db import models\n<br>  from django.contrib.auth.models import User\n<br>\n<br>  class Card(models.Model):\n<br>      front = models.CharField(max_length=255)\n<br>      back = models.CharField(max_length=255)\n<br>      user = models.ForeignKey(User)\n<br>\n<br>\n<br>To begin practicing a new card, save a practice object for your flashcard::\n<br>\n<br>  from memorize.models import Practice\n<br>\n<br>  card = Card(front=\"When was Sgt. Pepper released?\", back=\"1967\",\n<br>user=request.user)\n<br>  practice = Practice(item=card, user=card.user)\n<br>  practice.save()\n<br>\n<br>\n<br>Start Practicing\n<br>----------------\n<br>The view ``memorize.views.next_practice_item`` does all the work of determining\n<br>what the next item a user should practice. You just need to provide a template\n<br>file. Add an item to your urls.py file::\n<br>\n<br>  urlpatterns += patterns(\n<br>      'memorize.views',\n<br>      url(r'^item/next/$', 'next_practice_item', {'template':\n<br>'memorize/next.html'}, name='next-song'),\n<br>  )\n<br>\n<br>\n<br>Template Variables Provided\n<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~\n<br>form\n<br>    A ``memorize.forms.RatingsForm`` instance you use to save the performance on\n<br>this practice instance.\n<br>\n<br>item\n<br>    Your original item. Use this to get your information (e.g., ``card.front``\n<br>information)\n<br>\n<br>practice\n<br>    The practice row.\n<br>\n<br>Saving Feedback\n<br>---------------\n<br>The key to spaced repetition algorithms is using your past performance to\n<br>determine when is the optimal time to reshow an item. If you used the\n<br>``next_practice_item`` the template will have a ``form`` object that provides\n<br>all the relative information.\n<br>\n<br>The view ``memorize.views.process_rating`` will process the data. Add this view\n<br>to your urls.py file.\n<br>\n<br>Example::\n<br>\n<br>  &lt;form action=\"{% url memorize.views.process_rating %}\" method=\"post\"&gt;\n<br>      {{ form }}\n<br>  &lt;/form&gt;\n          </div>"}, "last_serial": 152317, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "fec43882c60c5c5d05b01cbf3feec271", "sha256": "852eb7a7cb50c8460e111987f8bcd40729ae36f936e5c2e90eaf1d148806e082"}, "downloads": -1, "filename": "django-memorize-0.5.1.tar.gz", "has_sig": false, "md5_digest": "fec43882c60c5c5d05b01cbf3feec271", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16039, "upload_time": "2010-02-11T22:09:31", "upload_time_iso_8601": "2010-02-11T22:09:31.103187Z", "url": "https://files.pythonhosted.org/packages/fa/11/61ff8be34c4d6d1e166a9f2936a4110f281f2a6bb3895004ad25b60438e1/django-memorize-0.5.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "64ca6e66944e99aa549b695ba930b7df", "sha256": "2b8df7b276d05b839d2af80e3ca44ab56658a38deca4b588a67120dac4ac617f"}, "downloads": -1, "filename": "django-memorize-0.5.1.zip", "has_sig": false, "md5_digest": "64ca6e66944e99aa549b695ba930b7df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21239, "upload_time": "2010-02-11T22:09:32", "upload_time_iso_8601": "2010-02-11T22:09:32.382636Z", "url": "https://files.pythonhosted.org/packages/76/7f/c45aade6cb6cc3e6e7b49b84effe468e3bb005235b3adea11f6005c908fc/django-memorize-0.5.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fec43882c60c5c5d05b01cbf3feec271", "sha256": "852eb7a7cb50c8460e111987f8bcd40729ae36f936e5c2e90eaf1d148806e082"}, "downloads": -1, "filename": "django-memorize-0.5.1.tar.gz", "has_sig": false, "md5_digest": "fec43882c60c5c5d05b01cbf3feec271", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16039, "upload_time": "2010-02-11T22:09:31", "upload_time_iso_8601": "2010-02-11T22:09:31.103187Z", "url": "https://files.pythonhosted.org/packages/fa/11/61ff8be34c4d6d1e166a9f2936a4110f281f2a6bb3895004ad25b60438e1/django-memorize-0.5.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "64ca6e66944e99aa549b695ba930b7df", "sha256": "2b8df7b276d05b839d2af80e3ca44ab56658a38deca4b588a67120dac4ac617f"}, "downloads": -1, "filename": "django-memorize-0.5.1.zip", "has_sig": false, "md5_digest": "64ca6e66944e99aa549b695ba930b7df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21239, "upload_time": "2010-02-11T22:09:32", "upload_time_iso_8601": "2010-02-11T22:09:32.382636Z", "url": "https://files.pythonhosted.org/packages/76/7f/c45aade6cb6cc3e6e7b49b84effe468e3bb005235b3adea11f6005c908fc/django-memorize-0.5.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:35:07 2020"}