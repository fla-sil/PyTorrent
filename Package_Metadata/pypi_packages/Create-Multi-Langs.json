{"info": {"author": "Yihua Chiu", "author_email": "mychiux413@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Code Generators", "Typing :: Typed"], "description": "# Create-Multi-Langs\n\nCreate-Multi-Langs is a package to create code for multi-lingual sites development, \n\n## Features\n- Use CSV file grid table as translated source data instead of JSON to better manage translations.\n- Output code language support python, go, javascript(ES6), typescript.\n- No more map or dict like so, but use property to get `code intelligence`.\n- Support watching mode for source csv file.\n\n## Install\n```\npip install create-multi-langs\n```\n\n\n## Prepare Data\n\nprepare csv data by yourself, liek `valid_format.csv`:\n\n| _field | zh-tw | en | _note |\n|--------|-------|----|-------|\n| SelectLang | \u7e41\u9ad4\u4e2d\u6587 | English | # select language |\n| Login | \u767b\u5165 | Login | used for login button |\n| Hello | \u60a8\u597d,\u6b61\u8fce | Hello,Welcome | pop up greeting message |\n\n* Use CSV file as source data, a grid table is easier to manage for multi-lingual application.\n* `_field` and `_note` are preserved column names, others column names are considered as language code\n* the values under column `_field`, will become the field name in code file, but constraint the name with common naming rule of which language\n* the values under column `_note`, will become the comment for code docs\n\n## Usage\n```bash\ncreate-multi-langs valid_format.csv generated.py\n```\n* support output language: `typscript`, `javascript`, `go`, `python`\n* the generated code is determined by your output filename extension like: .py .go .js .ts .mjs\n\n\n## Testing\nimport from generated.py:\n```python\nfrom generated import MultiLangs, ZH_TW, EN\n\nml = MultiLangs(ZH_TW)\nassert ml.hello == \"\u60a8\u597d,\u6b61\u8fce\"\nassert ml.login == \"\u767b\u5165\"\nassert ml.select_lang == \"\u7e41\u9ad4\u4e2d\u6587\"\n\nml.set_lang(EN)\nassert ml.hello == \"Hello,Welcome\"\nassert ml.login == \"Login\"\nassert ml.select_lang == \"English\"\n```\n\nimport from generated.js:\n```javascript\nimport { ml, setLang } from \"./generated_frontend.mjs\"\n\nvar compare = function(expect_value, actual_value) {\n    if (expect_value !== actual_value) {\n        return `[Error] expect '${expect_value}' but got '${actual_value}'\\n`\n    }\n    return \"\"\n}\n\nvar errs = \"\"\nerrs += compare(ml.hello, \"\u60a8\u597d,\u6b61\u8fce\")\nerrs += compare(ml.login, \"\u767b\u5165\")\nerrs += compare(ml.selectLang, \"\u7e41\u9ad4\u4e2d\u6587\")\nsetLang(\"en\")\nerrs += compare(ml.hello, \"Hello,Welcome\")\nerrs += compare(ml.login, \"Login\")\nerrs += compare(ml.selectLang, \"English\")\n\nif (errs !== \"\") {\n    throw errs\n}\n```\n\nimport from generated.ts:\n```typescript\nimport { ml, setLang } from \"./generated_frontend\"\n\nconst compare = (expect_value: string, actual_value: string): string => {\n    if (expect_value !== actual_value) {\n        return `[Error] expect '${expect_value}' but got '${actual_value}'\\n`\n    }\n    return \"\"\n}\n\nlet errs = \"\"\nerrs += compare(ml.hello, \"\u60a8\u597d,\u6b61\u8fce\")\nerrs += compare(ml.login, \"\u767b\u5165\")\nerrs += compare(ml.selectLang, \"\u7e41\u9ad4\u4e2d\u6587\")\nsetLang(\"en\")\nerrs += compare(ml.hello, \"Hello,Welcome\")\nerrs += compare(ml.login, \"Login\")\nerrs += compare(ml.selectLang, \"English\")\n\nif (errs !== \"\") {\n    throw errs\n}\n```\n\nimport from generated.go:\n```go\npackage generated\n\nimport \"testing\"\nimport \"github.com/stretchr/testify/assert\"\n\nfunc TestGenerated(t *testing.T) {\n\tml := NewMultiLangs(ZHTW)\n\tassert.Equal(t, \"\u60a8\u597d,\u6b61\u8fce\", ml.Hello)\n\tassert.Equal(t, \"\u767b\u5165\", ml.Login)\n\tassert.Equal(t, \"\u7e41\u9ad4\u4e2d\u6587\", ml.SelectLang)\n\tml.SetLang(EN)\n\tassert.Equal(t, \"Hello,Welcome\", ml.Hello)\n\tassert.Equal(t, \"Login\", ml.Login)\n\tassert.Equal(t, \"English\", ml.SelectLang)\n}\n```\n\n## Help\n```shell\n$ create-multi-langs --help\nusage: create-multi-langs [-h] [--backend] [--py_typing] [--watch] [--sep SEP]\n                          [--naming_rule NAMING_RULE]\n                          from_csv to_file\n\nRunning DeepSpeech inference.\n\npositional arguments:\n  from_csv              Generate script from csv\n  to_file               generate file path, support ext: .go .py .js .ts .mjs\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --backend, -b         Default is generate frontend script for js/ts\n  --py_typing, -t       Default is generate python script without typing\n  --watch, -w           Watch csv file changed\n  --sep SEP, -s SEP     CSV seperated punctuation\n  --naming_rule NAMING_RULE, -n NAMING_RULE\n                        specify your property style, [valid options]\n                        `ucc`(UpperCamelCase), `lcc`(lowerCamelCase),\n                        `upper`(ALL_UPERCASE_UNDERSCORE),\n                        `lower`(all_lowercase_underscore) [default setting]\n                        Go: `ucc`, Python: `lower`, Typescript: `lcc`,\n                        javascript: `lcc`\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mychiux413/create-multi-langs", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Create-Multi-Langs", "package_url": "https://pypi.org/project/Create-Multi-Langs/", "platform": "any", "project_url": "https://pypi.org/project/Create-Multi-Langs/", "project_urls": {"Homepage": "https://github.com/mychiux413/create-multi-langs"}, "release_url": "https://pypi.org/project/Create-Multi-Langs/0.1.1/", "requires_dist": ["pandas", "typing", "jinja2"], "requires_python": ">=3.5", "summary": "Create-Multi-Langs is a library for creating code file from translated csv file.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Create-Multi-Langs</h1>\n<p>Create-Multi-Langs is a package to create code for multi-lingual sites development,</p>\n<h2>Features</h2>\n<ul>\n<li>Use CSV file grid table as translated source data instead of JSON to better manage translations.</li>\n<li>Output code language support python, go, javascript(ES6), typescript.</li>\n<li>No more map or dict like so, but use property to get <code>code intelligence</code>.</li>\n<li>Support watching mode for source csv file.</li>\n</ul>\n<h2>Install</h2>\n<pre><code>pip install create-multi-langs\n</code></pre>\n<h2>Prepare Data</h2>\n<p>prepare csv data by yourself, liek <code>valid_format.csv</code>:</p>\n<table>\n<thead>\n<tr>\n<th>_field</th>\n<th>zh-tw</th>\n<th>en</th>\n<th>_note</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SelectLang</td>\n<td>\u7e41\u9ad4\u4e2d\u6587</td>\n<td>English</td>\n<td># select language</td>\n</tr>\n<tr>\n<td>Login</td>\n<td>\u767b\u5165</td>\n<td>Login</td>\n<td>used for login button</td>\n</tr>\n<tr>\n<td>Hello</td>\n<td>\u60a8\u597d,\u6b61\u8fce</td>\n<td>Hello,Welcome</td>\n<td>pop up greeting message</td>\n</tr></tbody></table>\n<ul>\n<li>Use CSV file as source data, a grid table is easier to manage for multi-lingual application.</li>\n<li><code>_field</code> and <code>_note</code> are preserved column names, others column names are considered as language code</li>\n<li>the values under column <code>_field</code>, will become the field name in code file, but constraint the name with common naming rule of which language</li>\n<li>the values under column <code>_note</code>, will become the comment for code docs</li>\n</ul>\n<h2>Usage</h2>\n<pre>create-multi-langs valid_format.csv generated.py\n</pre>\n<ul>\n<li>support output language: <code>typscript</code>, <code>javascript</code>, <code>go</code>, <code>python</code></li>\n<li>the generated code is determined by your output filename extension like: .py .go .js .ts .mjs</li>\n</ul>\n<h2>Testing</h2>\n<p>import from generated.py:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">generated</span> <span class=\"kn\">import</span> <span class=\"n\">MultiLangs</span><span class=\"p\">,</span> <span class=\"n\">ZH_TW</span><span class=\"p\">,</span> <span class=\"n\">EN</span>\n\n<span class=\"n\">ml</span> <span class=\"o\">=</span> <span class=\"n\">MultiLangs</span><span class=\"p\">(</span><span class=\"n\">ZH_TW</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">hello</span> <span class=\"o\">==</span> <span class=\"s2\">\"\u60a8\u597d,\u6b61\u8fce\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">login</span> <span class=\"o\">==</span> <span class=\"s2\">\"\u767b\u5165\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">select_lang</span> <span class=\"o\">==</span> <span class=\"s2\">\"\u7e41\u9ad4\u4e2d\u6587\"</span>\n\n<span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">set_lang</span><span class=\"p\">(</span><span class=\"n\">EN</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">hello</span> <span class=\"o\">==</span> <span class=\"s2\">\"Hello,Welcome\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">login</span> <span class=\"o\">==</span> <span class=\"s2\">\"Login\"</span>\n<span class=\"k\">assert</span> <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"n\">select_lang</span> <span class=\"o\">==</span> <span class=\"s2\">\"English\"</span>\n</pre>\n<p>import from generated.js:</p>\n<pre><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ml</span><span class=\"p\">,</span> <span class=\"nx\">setLang</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"./generated_frontend.mjs\"</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">compare</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">expect_value</span><span class=\"p\">,</span> <span class=\"nx\">actual_value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">expect_value</span> <span class=\"o\">!==</span> <span class=\"nx\">actual_value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"sb\">`[Error] expect '</span><span class=\"si\">${</span><span class=\"nx\">expect_value</span><span class=\"si\">}</span><span class=\"sb\">' but got '</span><span class=\"si\">${</span><span class=\"nx\">actual_value</span><span class=\"si\">}</span><span class=\"sb\">'</span><span class=\"err\">\\</span><span class=\"sb\">n`</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">errs</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">hello</span><span class=\"p\">,</span> <span class=\"s2\">\"\u60a8\u597d,\u6b61\u8fce\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">,</span> <span class=\"s2\">\"\u767b\u5165\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">selectLang</span><span class=\"p\">,</span> <span class=\"s2\">\"\u7e41\u9ad4\u4e2d\u6587\"</span><span class=\"p\">)</span>\n<span class=\"nx\">setLang</span><span class=\"p\">(</span><span class=\"s2\">\"en\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">hello</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello,Welcome\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">,</span> <span class=\"s2\">\"Login\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">selectLang</span><span class=\"p\">,</span> <span class=\"s2\">\"English\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">errs</span> <span class=\"o\">!==</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">errs</span>\n<span class=\"p\">}</span>\n</pre>\n<p>import from generated.ts:</p>\n<pre><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ml</span><span class=\"p\">,</span> <span class=\"nx\">setLang</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">\"./generated_frontend\"</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">compare</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">expect_value</span>: <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">actual_value</span>: <span class=\"kt\">string</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"kt\">string</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">expect_value</span> <span class=\"o\">!==</span> <span class=\"nx\">actual_value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"sb\">`[Error] expect '</span><span class=\"si\">${</span><span class=\"nx\">expect_value</span><span class=\"si\">}</span><span class=\"sb\">' but got '</span><span class=\"si\">${</span><span class=\"nx\">actual_value</span><span class=\"si\">}</span><span class=\"sb\">'</span><span class=\"err\">\\</span><span class=\"sb\">n`</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"s2\">\"\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">let</span> <span class=\"nx\">errs</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">hello</span><span class=\"p\">,</span> <span class=\"s2\">\"\u60a8\u597d,\u6b61\u8fce\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">,</span> <span class=\"s2\">\"\u767b\u5165\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">selectLang</span><span class=\"p\">,</span> <span class=\"s2\">\"\u7e41\u9ad4\u4e2d\u6587\"</span><span class=\"p\">)</span>\n<span class=\"nx\">setLang</span><span class=\"p\">(</span><span class=\"s2\">\"en\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">hello</span><span class=\"p\">,</span> <span class=\"s2\">\"Hello,Welcome\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">login</span><span class=\"p\">,</span> <span class=\"s2\">\"Login\"</span><span class=\"p\">)</span>\n<span class=\"nx\">errs</span> <span class=\"o\">+=</span> <span class=\"nx\">compare</span><span class=\"p\">(</span><span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">selectLang</span><span class=\"p\">,</span> <span class=\"s2\">\"English\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">errs</span> <span class=\"o\">!==</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">errs</span>\n<span class=\"p\">}</span>\n</pre>\n<p>import from generated.go:</p>\n<pre><span class=\"kn\">package</span> <span class=\"nx\">generated</span>\n\n<span class=\"kn\">import</span> <span class=\"s\">\"testing\"</span>\n<span class=\"kn\">import</span> <span class=\"s\">\"github.com/stretchr/testify/assert\"</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">TestGenerated</span><span class=\"p\">(</span><span class=\"nx\">t</span> <span class=\"o\">*</span><span class=\"nx\">testing</span><span class=\"p\">.</span><span class=\"nx\">T</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">ml</span> <span class=\"o\">:=</span> <span class=\"nx\">NewMultiLangs</span><span class=\"p\">(</span><span class=\"nx\">ZHTW</span><span class=\"p\">)</span>\n\t<span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">Equal</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"s\">\"\u60a8\u597d,\u6b61\u8fce\"</span><span class=\"p\">,</span> <span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">Hello</span><span class=\"p\">)</span>\n\t<span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">Equal</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"s\">\"\u767b\u5165\"</span><span class=\"p\">,</span> <span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">Login</span><span class=\"p\">)</span>\n\t<span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">Equal</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"s\">\"\u7e41\u9ad4\u4e2d\u6587\"</span><span class=\"p\">,</span> <span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">SelectLang</span><span class=\"p\">)</span>\n\t<span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">SetLang</span><span class=\"p\">(</span><span class=\"nx\">EN</span><span class=\"p\">)</span>\n\t<span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">Equal</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"s\">\"Hello,Welcome\"</span><span class=\"p\">,</span> <span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">Hello</span><span class=\"p\">)</span>\n\t<span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">Equal</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"s\">\"Login\"</span><span class=\"p\">,</span> <span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">Login</span><span class=\"p\">)</span>\n\t<span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">Equal</span><span class=\"p\">(</span><span class=\"nx\">t</span><span class=\"p\">,</span> <span class=\"s\">\"English\"</span><span class=\"p\">,</span> <span class=\"nx\">ml</span><span class=\"p\">.</span><span class=\"nx\">SelectLang</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Help</h2>\n<pre>$ create-multi-langs --help\nusage: create-multi-langs <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--backend<span class=\"o\">]</span> <span class=\"o\">[</span>--py_typing<span class=\"o\">]</span> <span class=\"o\">[</span>--watch<span class=\"o\">]</span> <span class=\"o\">[</span>--sep SEP<span class=\"o\">]</span>\n                          <span class=\"o\">[</span>--naming_rule NAMING_RULE<span class=\"o\">]</span>\n                          from_csv to_file\n\nRunning DeepSpeech inference.\n\npositional arguments:\n  from_csv              Generate script from csv\n  to_file               generate file path, support ext: .go .py .js .ts .mjs\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --backend, -b         Default is generate frontend script <span class=\"k\">for</span> js/ts\n  --py_typing, -t       Default is generate python script without typing\n  --watch, -w           Watch csv file changed\n  --sep SEP, -s SEP     CSV seperated punctuation\n  --naming_rule NAMING_RULE, -n NAMING_RULE\n                        specify your property style, <span class=\"o\">[</span>valid options<span class=\"o\">]</span>\n                        <span class=\"sb\">`</span>ucc<span class=\"sb\">`</span><span class=\"o\">(</span>UpperCamelCase<span class=\"o\">)</span>, <span class=\"sb\">`</span>lcc<span class=\"sb\">`</span><span class=\"o\">(</span>lowerCamelCase<span class=\"o\">)</span>,\n                        <span class=\"sb\">`</span>upper<span class=\"sb\">`</span><span class=\"o\">(</span>ALL_UPERCASE_UNDERSCORE<span class=\"o\">)</span>,\n                        <span class=\"sb\">`</span>lower<span class=\"sb\">`</span><span class=\"o\">(</span>all_lowercase_underscore<span class=\"o\">)</span> <span class=\"o\">[</span>default setting<span class=\"o\">]</span>\n                        Go: <span class=\"sb\">`</span>ucc<span class=\"sb\">`</span>, Python: <span class=\"sb\">`</span>lower<span class=\"sb\">`</span>, Typescript: <span class=\"sb\">`</span>lcc<span class=\"sb\">`</span>,\n                        javascript: <span class=\"sb\">`</span>lcc<span class=\"sb\">`</span>\n</pre>\n\n          </div>"}, "last_serial": 6397710, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "a3a88784bd833b2ff82d9be6006bcffb", "sha256": "5606aad16c6cfab2c0f55f71de4d8b1c66d156281ded4bf96bd7d21e195a5838"}, "downloads": -1, "filename": "Create_Multi_Langs-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a3a88784bd833b2ff82d9be6006bcffb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20485, "upload_time": "2020-01-05T09:49:02", "upload_time_iso_8601": "2020-01-05T09:49:02.416642Z", "url": "https://files.pythonhosted.org/packages/43/b1/42486ba28c88a55eb9ee61c0e6cdf978221d2a5ce301c57ae8abea3710dc/Create_Multi_Langs-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "709ba9a3b28aad17a1d3982d4299420a", "sha256": "8cb964845eb7ae4e06378a831253e5d103870869a9c35c33724df5eec206743c"}, "downloads": -1, "filename": "Create-Multi-Langs-0.1.1.tar.gz", "has_sig": false, "md5_digest": "709ba9a3b28aad17a1d3982d4299420a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9684, "upload_time": "2020-01-05T09:49:05", "upload_time_iso_8601": "2020-01-05T09:49:05.289093Z", "url": "https://files.pythonhosted.org/packages/92/6b/615fd3cea43a63a679aa9f9a5912242e9944000532edf51cddcc4c30ff4a/Create-Multi-Langs-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3a88784bd833b2ff82d9be6006bcffb", "sha256": "5606aad16c6cfab2c0f55f71de4d8b1c66d156281ded4bf96bd7d21e195a5838"}, "downloads": -1, "filename": "Create_Multi_Langs-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a3a88784bd833b2ff82d9be6006bcffb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20485, "upload_time": "2020-01-05T09:49:02", "upload_time_iso_8601": "2020-01-05T09:49:02.416642Z", "url": "https://files.pythonhosted.org/packages/43/b1/42486ba28c88a55eb9ee61c0e6cdf978221d2a5ce301c57ae8abea3710dc/Create_Multi_Langs-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "709ba9a3b28aad17a1d3982d4299420a", "sha256": "8cb964845eb7ae4e06378a831253e5d103870869a9c35c33724df5eec206743c"}, "downloads": -1, "filename": "Create-Multi-Langs-0.1.1.tar.gz", "has_sig": false, "md5_digest": "709ba9a3b28aad17a1d3982d4299420a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9684, "upload_time": "2020-01-05T09:49:05", "upload_time_iso_8601": "2020-01-05T09:49:05.289093Z", "url": "https://files.pythonhosted.org/packages/92/6b/615fd3cea43a63a679aa9f9a5912242e9944000532edf51cddcc4c30ff4a/Create-Multi-Langs-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:23 2020"}