{"info": {"author": "Bob Anderson", "author_email": "bob.anderson.ok@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Mathematics"], "description": "planetriangles\n===============\n\nMostly you will use:\n\n    err_msg, a, b, c, A, B, C = complete_the_triangle(a, b, c, A, B, C) \n\nThis is the main routine in the plane_triangles.py module.  Its input parameters default to None.\n\nIt solves (if possible) for the missing sides and/or angles in the parameter list.\n\nIf two solutions are possible, it will indicate this by a return value in ``err_msg`` that starts with \"Other\". The\nfirst answer should be used, then a request made for the return of the second by repeating the original call with\nthe ``ssa_flag`` set to ``'other'``, i.e.\n\n    err_msg, a, b, c, A, B, C = complete_the_triangle(a, b, c, A, B, C, ssa_flag='other')   \n\nInstallation\n============\n    pip install planetriangles\n\nThen, to get started, from a python REPL you can run the exerciser with ...\n\n    >>> from planetriangles.exerciser import run_ui\n    >>> run_ui()\n\nLoad the user functions with ...\n\n    >>> from planetriangles.plane_triangles import *\n\nAll of the exported functions have help text included.\nSo you can get help\nwith the usual ``help(complete_the_triangle)`` method. There are a number of formatting routines for converting angles\nto various forms (radians, degrees, degrees and minutes, degrees minutes seconds) with a specified precision.\n\nThe module (``plane_triangles_tests.py``) contains a set of tests. It uses ``assert`` statements to detect\nerrors. Importing the module will run the tests. All is well when no ``assert`` throws an exception.\n\nThere is an interactive test/excercise program that can be invoked by importing and executing ``run_ui()`` from the\nmodule ``excerciser.py``.  To get it started,\ndo this ...\n\n    >>> from planetriangles.exerciser import run_ui\n    >>> run_ui()\n\nIt starts with a prompt that allow one to set the desired format\nfor the display of angles (radians, degrees, degrees and minutes, degrees and minutes and seconds).\n\nThe next two prompts allow the precision (number of digits to right of decimal point) for angles and lengths to be\nspecified.\n\nA loop is then entered that prompts for the sides and angles to be used. Just press enter to indicate that a value will\nnot be provided (i.e., is to be calculated).\n\nIf all six parameters are left empty, the loop terminates.\n\nExample\n=======\n\n    >>> from planetriangles.exerciser import run_ui()\n    >>> run_ui()\n    .\n    Session started...\n    .\n    Angle format to use [r, d, dm, dms]: d\n    Angle precision (digits to right of decimal point) to use: 4\n    Length precision (digits to right of decimal point) to use: 4\n    .\n    Side a: 1\n    Side b: 1\n    Side c: \n    Angle A (degrees): \n    Angle B (degrees): \n    Angle C (degrees): 90\n    a: 1.0000 b: 1.0000 c: 1.4142   A: 45.0000d B: 45.0000d C: 90.0000d\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bob-anderson-ok/plane_triangle", "keywords": "trigonometry,triangle,law of sines,law of cosines", "license": "License :: OSI Approved :: MIT License", "maintainer": "", "maintainer_email": "", "name": "planetriangles", "package_url": "https://pypi.org/project/planetriangles/", "platform": "", "project_url": "https://pypi.org/project/planetriangles/", "project_urls": {"Homepage": "https://github.com/bob-anderson-ok/plane_triangle"}, "release_url": "https://pypi.org/project/planetriangles/1.1/", "requires_dist": null, "requires_python": "", "summary": "Finds the remaining sides and angles of a triangle when given enough of the sides and/or angles. Includes a command line exerciser, formatting tools, and a test suite.", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"planetriangles\">\n<h2>planetriangles</h2>\n<p>Mostly you will use:</p>\n<blockquote>\nerr_msg, a, b, c, A, B, C = complete_the_triangle(a, b, c, A, B, C)</blockquote>\n<p>This is the main routine in the plane_triangles.py module.  Its input parameters default to None.</p>\n<p>It solves (if possible) for the missing sides and/or angles in the parameter list.</p>\n<p>If two solutions are possible, it will indicate this by a return value in <tt>err_msg</tt> that starts with \u201cOther\u201d. The\nfirst answer should be used, then a request made for the return of the second by repeating the original call with\nthe <tt>ssa_flag</tt> set to <tt>'other'</tt>, i.e.</p>\n<blockquote>\nerr_msg, a, b, c, A, B, C = complete_the_triangle(a, b, c, A, B, C, ssa_flag=\u2019other\u2019)</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\npip install planetriangles</blockquote>\n<p>Then, to get started, from a python REPL you can run the exerciser with \u2026</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from planetriangles.exerciser import run_ui\n&gt;&gt;&gt; run_ui()\n</pre>\n</blockquote>\n<p>Load the user functions with \u2026</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from planetriangles.plane_triangles import *\n</pre>\n</blockquote>\n<p>All of the exported functions have help text included.\nSo you can get help\nwith the usual <tt>help(complete_the_triangle)</tt> method. There are a number of formatting routines for converting angles\nto various forms (radians, degrees, degrees and minutes, degrees minutes seconds) with a specified precision.</p>\n<p>The module (<tt>plane_triangles_tests.py</tt>) contains a set of tests. It uses <tt>assert</tt> statements to detect\nerrors. Importing the module will run the tests. All is well when no <tt>assert</tt> throws an exception.</p>\n<p>There is an interactive test/excercise program that can be invoked by importing and executing <tt>run_ui()</tt> from the\nmodule <tt>excerciser.py</tt>.  To get it started,\ndo this \u2026</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from planetriangles.exerciser import run_ui\n&gt;&gt;&gt; run_ui()\n</pre>\n</blockquote>\n<p>It starts with a prompt that allow one to set the desired format\nfor the display of angles (radians, degrees, degrees and minutes, degrees and minutes and seconds).</p>\n<p>The next two prompts allow the precision (number of digits to right of decimal point) for angles and lengths to be\nspecified.</p>\n<p>A loop is then entered that prompts for the sides and angles to be used. Just press enter to indicate that a value will\nnot be provided (i.e., is to be calculated).</p>\n<p>If all six parameters are left empty, the loop terminates.</p>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<blockquote>\n<pre>&gt;&gt;&gt; from planetriangles.exerciser import run_ui()\n&gt;&gt;&gt; run_ui()\n.\nSession started...\n.\nAngle format to use [r, d, dm, dms]: d\nAngle precision (digits to right of decimal point) to use: 4\nLength precision (digits to right of decimal point) to use: 4\n.\nSide a: 1\nSide b: 1\nSide c:\nAngle A (degrees):\nAngle B (degrees):\nAngle C (degrees): 90\na: 1.0000 b: 1.0000 c: 1.4142   A: 45.0000d B: 45.0000d C: 90.0000d\n</pre>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 6751673, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b307d59056ba22956548792cf265aef8", "sha256": "7700a91017f6f6b1ac99ff2766e4ad8593c0a7d76141037d1cb01a710b004cee"}, "downloads": -1, "filename": "planetriangles-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b307d59056ba22956548792cf265aef8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9123, "upload_time": "2020-03-04T21:51:43", "upload_time_iso_8601": "2020-03-04T21:51:43.346560Z", "url": "https://files.pythonhosted.org/packages/77/e9/356c5c505f182228363d66f2ad6ff92acb4df708dbe4a619ae4b9055e6bd/planetriangles-1.0-py3-none-any.whl", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "5c1dcf02f5c6fe10fe0edd4431cdd16c", "sha256": "a64537ea52aa31e27510b53c554f793c21b922b582a6a3628c2a17791c7700f5"}, "downloads": -1, "filename": "planetriangles-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c1dcf02f5c6fe10fe0edd4431cdd16c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10546, "upload_time": "2020-03-04T23:27:56", "upload_time_iso_8601": "2020-03-04T23:27:56.762871Z", "url": "https://files.pythonhosted.org/packages/ef/81/52c24e4d60ba5e566153cd819049dad63331baa52d8ff9490d39bd7b01eb/planetriangles-1.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5c1dcf02f5c6fe10fe0edd4431cdd16c", "sha256": "a64537ea52aa31e27510b53c554f793c21b922b582a6a3628c2a17791c7700f5"}, "downloads": -1, "filename": "planetriangles-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5c1dcf02f5c6fe10fe0edd4431cdd16c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10546, "upload_time": "2020-03-04T23:27:56", "upload_time_iso_8601": "2020-03-04T23:27:56.762871Z", "url": "https://files.pythonhosted.org/packages/ef/81/52c24e4d60ba5e566153cd819049dad63331baa52d8ff9490d39bd7b01eb/planetriangles-1.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:53:41 2020"}