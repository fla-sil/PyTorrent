{"info": {"author": "Tang Jiawei", "author_email": "3245813583@qq.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Help on package Extendedmathuse:\n\nNAME\n\n    Extendedmathuse\n\nPACKAGE CONTENTS\n\n\nCLASSES\n\n    builtins.object\n        N_arynumber\n        fraction\n\n    class N_arynumber(builtins.object)\n     |  N_arynumber(number, Decimal=10, a=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], join='', **kw)\n     |  \n     |  This category supports a+b, ab, a*b, a/b, a//b, a%b, a==b, a<b, a>b, a<=b, a>=b, a!=b, and support mixed with int type.\n     |  You can use self.number, self.strnumber, self.Decimal, self.a , self.join, self.is_positive to see the specific value.(see the description of binaryconversion for information on self)\n     |  Keyword parameters introduction:\n     |      special_choice->Select 'a' or 'm' or None,\n     |      'a': add on the default a (0~9&A~Z)\n     |      'm': use decimal as the number on the digit\n     |  \n     |  Methods defined here:\n     |  \n     |  __add__(a, b)\n     |  \n     |  __eq__(a, b)\n     |      Return self==value.\n     |  \n     |  __float__(self)\n     |  \n     |  __floordiv__(a, b)\n     |  \n     |  __ge__(a, b)\n     |      Return self>=value.\n     |  \n     |  __gt__(a, b)\n     |      Return self>value.\n     |  \n     |  __init__(self, number, Decimal=10, a=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], join='', **kw)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  __int__(a)\n     |  \n     |  __le__(a, b)\n     |      Return self<=value.\n     |  \n     |  __lt__(a, b)\n     |      Return self<value.\n     |  \n     |  __mod__(a, b)\n     |  \n     |  __mul__(a, b)\n     |  \n     |  __ne__(a, b)\n     |      Return self!=value.\n     |  \n     |  __neg__(self)\n     |  \n     |  __pos__(self)\n     |  \n     |  __radd__(b, a)\n     |  \n     |  __repr__(a)\n     |      Return repr(self).\n     |  \n     |  __req__(b, a)\n     |  \n     |  __rfloordiv__(b, a)\n     |  \n     |  __rge__(b, a)\n     |  \n     |  __rgt__(b, a)\n     |  \n     |  __rle__(b, a)\n     |  \n     |  __rlt__(b, a)\n     |  \n     |  __rmod__(b, a)\n     |  \n     |  __rmul__(b, a)\n     |  \n     |  __rne__(b, a)\n     |  \n     |  __rsub__(b, a)\n     |  \n     |  __rtruediv__(b, a)\n     |  \n     |  __str__(a)\n     |      Return str(self).\n     |  \n     |  __sub__(a, b)\n     |  \n     |  __truediv__(a, b)\n     |  \n     |  is_positive(self)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |  \n     |  __hash__ = None\n\n    class fraction(builtins.object)\n     |  fraction(molecule, denominator=1)\n     |  \n     |  This fraction class can perform many fraction calculations and is very useful.\n     |  \n     |  Alternate method:\n     |      If molecule is not a number, divide molec by denominator. If the result is not a fraction, take the return value of molecule.__fraction__().\n     |  \n     |  Methods defined here:\n     |  \n     |  __add__(a, b)\n     |  \n     |  __eq__(a, b)\n     |      Return self==value.\n     |  \n     |  __float__(self)\n     |  \n     |  __ge__(a, b)\n     |      Return self>=value.\n     |  \n     |  __gt__(a, b)\n     |      Return self>value.\n     |  \n     |  __init__(self, molecule, denominator=1)\n     |      Initialize self.  See help(type(self)) for accurate signature.\n     |  \n     |  __le__(a, b)\n     |      Return self<=value.\n     |  \n     |  __lt__(a, b)\n     |      Return self<value.\n     |  \n     |  __mul__(a, b)\n     |  \n     |  __ne__(a, b)\n     |      Return self!=value.\n     |  \n     |  __radd__(b, a)\n     |  \n     |  __repr__(self)\n     |      Return repr(self).\n     |  \n     |  __req__(a, b)\n     |  \n     |  __rge__(a, b)\n     |  \n     |  __rgt__(a, b)\n     |  \n     |  __rle__(a, b)\n     |  \n     |  __rlt__(a, b)\n     |  \n     |  __rmul__(b, a)\n     |  \n     |  __rne__(a, b)\n     |  \n     |  __rsub__(a, b)\n     |  \n     |  __rtruediv__(a, b)\n     |  \n     |  __str__(self)\n     |      Return str(self).\n     |  \n     |  __sub__(a, b)\n     |  \n     |  __truediv__(a, b)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |  \n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |  \n     |  __weakref__\n     |      list of weak references to the object (if defined)\n     |  \n     |  ----------------------------------------------------------------------\n     |  Data and other attributes defined here:\n     |  \n     |  __hash__ = None\n\nFUNCTIONS\n\n    binaryconversion(number, newradix=2, a=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], append=None, join=',')\n        This is a function for converting a numeric hex:\n        number -> Is N_arynumber or decimal number type, you can use N_arynumber(number, hexadecimal (default is 10), the list of characters or strings used (default is 0~9&A~Z), connector (default is ',') ,is_positive(kw,bool,default is True))\n        newradix -> The number of the number to convert to, the default is 2\n        a, append, join -> The character to be converted into a number, starting from 1, the default is 1~9&A~Z, input 'a' to append to the default list, and 'm' to use decimal digits in digits ( Of course, it is very possible to use join (the default is ', ') to separate digits)\n\n    comparison_list(a, b)\n        Compare lists a and b to output the same part.\n\n    decompositionfactor(a)\n        This function can decompose a positive integer a by a prime factor:\n            a-> a positive integer that needs to be decomposed,int\n\n    gcd(*number)\n        Output the greatest common divisor of several numbers.\n\n    isprimenumber(a)\n        This function returns whether a is a prime number:\n        a -> the number to be detected, int\n\n    lcm(*number)\n        Output the least common multiple of several numbers.\n\n    primenumberinrange(d=None, b=None)\n        This function returns all prime numbers in a region:\n        d -> number of starts (default is 1, int)\n        b -> the last number of the ending number (default is 1, int)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "Extendedmathuse", "package_url": "https://pypi.org/project/Extendedmathuse/", "platform": "", "project_url": "https://pypi.org/project/Extendedmathuse/", "project_urls": {"Homepage": "https://pypi.org"}, "release_url": "https://pypi.org/project/Extendedmathuse/2.1.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Simple digital manipulation", "version": "2.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Help on package Extendedmathuse:</p>\n<p>NAME</p>\n<pre><code>Extendedmathuse\n</code></pre>\n<p>PACKAGE CONTENTS</p>\n<p>CLASSES</p>\n<pre><code>builtins.object\n    N_arynumber\n    fraction\n\nclass N_arynumber(builtins.object)\n |  N_arynumber(number, Decimal=10, a=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], join='', **kw)\n |  \n |  This category supports a+b, ab, a*b, a/b, a//b, a%b, a==b, a&lt;b, a&gt;b, a&lt;=b, a&gt;=b, a!=b, and support mixed with int type.\n |  You can use self.number, self.strnumber, self.Decimal, self.a , self.join, self.is_positive to see the specific value.(see the description of binaryconversion for information on self)\n |  Keyword parameters introduction:\n |      special_choice-&gt;Select 'a' or 'm' or None,\n |      'a': add on the default a (0~9&amp;A~Z)\n |      'm': use decimal as the number on the digit\n |  \n |  Methods defined here:\n |  \n |  __add__(a, b)\n |  \n |  __eq__(a, b)\n |      Return self==value.\n |  \n |  __float__(self)\n |  \n |  __floordiv__(a, b)\n |  \n |  __ge__(a, b)\n |      Return self&gt;=value.\n |  \n |  __gt__(a, b)\n |      Return self&gt;value.\n |  \n |  __init__(self, number, Decimal=10, a=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], join='', **kw)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __int__(a)\n |  \n |  __le__(a, b)\n |      Return self&lt;=value.\n |  \n |  __lt__(a, b)\n |      Return self&lt;value.\n |  \n |  __mod__(a, b)\n |  \n |  __mul__(a, b)\n |  \n |  __ne__(a, b)\n |      Return self!=value.\n |  \n |  __neg__(self)\n |  \n |  __pos__(self)\n |  \n |  __radd__(b, a)\n |  \n |  __repr__(a)\n |      Return repr(self).\n |  \n |  __req__(b, a)\n |  \n |  __rfloordiv__(b, a)\n |  \n |  __rge__(b, a)\n |  \n |  __rgt__(b, a)\n |  \n |  __rle__(b, a)\n |  \n |  __rlt__(b, a)\n |  \n |  __rmod__(b, a)\n |  \n |  __rmul__(b, a)\n |  \n |  __rne__(b, a)\n |  \n |  __rsub__(b, a)\n |  \n |  __rtruediv__(b, a)\n |  \n |  __str__(a)\n |      Return str(self).\n |  \n |  __sub__(a, b)\n |  \n |  __truediv__(a, b)\n |  \n |  is_positive(self)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n\nclass fraction(builtins.object)\n |  fraction(molecule, denominator=1)\n |  \n |  This fraction class can perform many fraction calculations and is very useful.\n |  \n |  Alternate method:\n |      If molecule is not a number, divide molec by denominator. If the result is not a fraction, take the return value of molecule.__fraction__().\n |  \n |  Methods defined here:\n |  \n |  __add__(a, b)\n |  \n |  __eq__(a, b)\n |      Return self==value.\n |  \n |  __float__(self)\n |  \n |  __ge__(a, b)\n |      Return self&gt;=value.\n |  \n |  __gt__(a, b)\n |      Return self&gt;value.\n |  \n |  __init__(self, molecule, denominator=1)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __le__(a, b)\n |      Return self&lt;=value.\n |  \n |  __lt__(a, b)\n |      Return self&lt;value.\n |  \n |  __mul__(a, b)\n |  \n |  __ne__(a, b)\n |      Return self!=value.\n |  \n |  __radd__(b, a)\n |  \n |  __repr__(self)\n |      Return repr(self).\n |  \n |  __req__(a, b)\n |  \n |  __rge__(a, b)\n |  \n |  __rgt__(a, b)\n |  \n |  __rle__(a, b)\n |  \n |  __rlt__(a, b)\n |  \n |  __rmul__(b, a)\n |  \n |  __rne__(a, b)\n |  \n |  __rsub__(a, b)\n |  \n |  __rtruediv__(a, b)\n |  \n |  __str__(self)\n |      Return str(self).\n |  \n |  __sub__(a, b)\n |  \n |  __truediv__(a, b)\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors defined here:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __weakref__\n |      list of weak references to the object (if defined)\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n</code></pre>\n<p>FUNCTIONS</p>\n<pre><code>binaryconversion(number, newradix=2, a=['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], append=None, join=',')\n    This is a function for converting a numeric hex:\n    number -&gt; Is N_arynumber or decimal number type, you can use N_arynumber(number, hexadecimal (default is 10), the list of characters or strings used (default is 0~9&amp;A~Z), connector (default is ',') ,is_positive(kw,bool,default is True))\n    newradix -&gt; The number of the number to convert to, the default is 2\n    a, append, join -&gt; The character to be converted into a number, starting from 1, the default is 1~9&amp;A~Z, input 'a' to append to the default list, and 'm' to use decimal digits in digits ( Of course, it is very possible to use join (the default is ', ') to separate digits)\n\ncomparison_list(a, b)\n    Compare lists a and b to output the same part.\n\ndecompositionfactor(a)\n    This function can decompose a positive integer a by a prime factor:\n        a-&gt; a positive integer that needs to be decomposed,int\n\ngcd(*number)\n    Output the greatest common divisor of several numbers.\n\nisprimenumber(a)\n    This function returns whether a is a prime number:\n    a -&gt; the number to be detected, int\n\nlcm(*number)\n    Output the least common multiple of several numbers.\n\nprimenumberinrange(d=None, b=None)\n    This function returns all prime numbers in a region:\n    d -&gt; number of starts (default is 1, int)\n    b -&gt; the last number of the ending number (default is 1, int)\n</code></pre>\n\n          </div>"}, "last_serial": 6220430, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "f09d77d07519221dfb62685316073644", "sha256": "5425886264e982de9061d6e14faef43bd1a1af07015454ee62bdc8446f4a6225"}, "downloads": -1, "filename": "Extendedmathuse-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f09d77d07519221dfb62685316073644", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6029, "upload_time": "2019-11-02T04:46:53", "upload_time_iso_8601": "2019-11-02T04:46:53.473424Z", "url": "https://files.pythonhosted.org/packages/d5/d4/492d74d12ca647cbf8d698bf8550e0208c4ec0ec77735c602cbfd851081d/Extendedmathuse-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d9acc4bf1dd7710f8362373e79d6094", "sha256": "a030d8d0f1ace5a5a5473041e0b3b9413c9481ffe8cbd777da829cd0cb104066"}, "downloads": -1, "filename": "Extendedmathuse-2.0.0.tar.gz", "has_sig": false, "md5_digest": "3d9acc4bf1dd7710f8362373e79d6094", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4601, "upload_time": "2019-11-02T04:46:55", "upload_time_iso_8601": "2019-11-02T04:46:55.054257Z", "url": "https://files.pythonhosted.org/packages/9a/91/1fc5b19b551ad108f4b596d5454588122351277a846abe42375e4713b6ec/Extendedmathuse-2.0.0.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "4d5e80c2b5c49f0d8c406520a43d472f", "sha256": "ad7820d00b248d5f96b3c81158c3affcf094ee8fbff8106619d4927a8597002f"}, "downloads": -1, "filename": "Extendedmathuse-2.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4d5e80c2b5c49f0d8c406520a43d472f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6112, "upload_time": "2019-11-02T08:18:33", "upload_time_iso_8601": "2019-11-02T08:18:33.373864Z", "url": "https://files.pythonhosted.org/packages/92/ab/face269b80669a66a1fb57a46dbc681194ddbbba3dca66ec4acf11c2c837/Extendedmathuse-2.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd89595649782d120072ba4c3144b000", "sha256": "864e25fb3c8ee5fd3526537d486f7dc47ba1c21ca397ea585dc7fe0cf6930956"}, "downloads": -1, "filename": "Extendedmathuse-2.0.2.tar.gz", "has_sig": false, "md5_digest": "bd89595649782d120072ba4c3144b000", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4685, "upload_time": "2019-11-02T08:18:34", "upload_time_iso_8601": "2019-11-02T08:18:34.954783Z", "url": "https://files.pythonhosted.org/packages/10/de/79cb4a8cc1c1ff3fe9c63460d5f897903f5f596b4aa2487b17294038966d/Extendedmathuse-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "25ee529822202620d1db95541d01f848", "sha256": "2fbd61a97fcc4e97e278ec0c4f7aafffaa72e28b097d429f32a476424e3deb8f"}, "downloads": -1, "filename": "Extendedmathuse-2.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "25ee529822202620d1db95541d01f848", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6132, "upload_time": "2019-11-02T23:05:32", "upload_time_iso_8601": "2019-11-02T23:05:32.492440Z", "url": "https://files.pythonhosted.org/packages/f7/d0/1f2bb16656689cbb0aa700a4dc07e31bd664d54a026ecc076873408dc16b/Extendedmathuse-2.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1eb0fa9cdd0bd37a02a7ab1fedbcc282", "sha256": "9efb8fd7a49466741d7fd5ba735901030732b3532859248ef900b881506dd356"}, "downloads": -1, "filename": "Extendedmathuse-2.0.3.tar.gz", "has_sig": false, "md5_digest": "1eb0fa9cdd0bd37a02a7ab1fedbcc282", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4702, "upload_time": "2019-11-02T23:05:34", "upload_time_iso_8601": "2019-11-02T23:05:34.668742Z", "url": "https://files.pythonhosted.org/packages/8a/3d/97fbaf838793ec3f600c5a96fad084d0ec4d9c439ac55ecbfbcc55ca4cc0/Extendedmathuse-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "e9d6c43740b60682fcbbcf77f4ee05eb", "sha256": "5e5b18537723abaf59b0e84210002201b2578e36f9fb3d014ff9dc9f37bda371"}, "downloads": -1, "filename": "Extendedmathuse-2.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e9d6c43740b60682fcbbcf77f4ee05eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6173, "upload_time": "2019-11-09T08:52:48", "upload_time_iso_8601": "2019-11-09T08:52:48.639931Z", "url": "https://files.pythonhosted.org/packages/cf/00/2d6be9b208504e43e3822e15f014702151b1b24e319f9f372d394b77a2b9/Extendedmathuse-2.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "513b56567a7d3b0f3d0eac6c83b035a9", "sha256": "bc8562f570f36d1aea980b067e9b1bc6a06d661bb0d2b692a8cb26955b1a58ec"}, "downloads": -1, "filename": "Extendedmathuse-2.0.4.tar.gz", "has_sig": false, "md5_digest": "513b56567a7d3b0f3d0eac6c83b035a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4753, "upload_time": "2019-11-09T08:52:50", "upload_time_iso_8601": "2019-11-09T08:52:50.331587Z", "url": "https://files.pythonhosted.org/packages/12/e1/81c74f207e4c4e16bdbb28241d129c91af8636b2df6b3420189da4b4a516/Extendedmathuse-2.0.4.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "888163778662b1707ace564beff852e5", "sha256": "a2ccbf921f0ac83a228dbe9ef5012621602bb085c8541245aac0dcc48814b968"}, "downloads": -1, "filename": "Extendedmathuse-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "888163778662b1707ace564beff852e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7655, "upload_time": "2019-11-23T10:15:07", "upload_time_iso_8601": "2019-11-23T10:15:07.255381Z", "url": "https://files.pythonhosted.org/packages/6c/8c/b5bd0976bb4ac91a354a6f1c973cbc2b4153a65230858e1c2eb9e53aaee3/Extendedmathuse-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09d3284bcf52ae4ac5fd6c35b84aa4ec", "sha256": "5b9f567bfb5ba799f16bf68438ae3a423c98612df70eb383adb898668a048a20"}, "downloads": -1, "filename": "Extendedmathuse-2.1.0.tar.gz", "has_sig": false, "md5_digest": "09d3284bcf52ae4ac5fd6c35b84aa4ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6373, "upload_time": "2019-11-23T10:15:09", "upload_time_iso_8601": "2019-11-23T10:15:09.350794Z", "url": "https://files.pythonhosted.org/packages/4e/d8/b6840123650aa48c1dde0fea8819831e19164b37a74922f81d51b9e3e98e/Extendedmathuse-2.1.0.tar.gz", "yanked": false}], "2.1.2": [{"comment_text": "", "digests": {"md5": "607708c69c2a5a3706b1104d851f4391", "sha256": "3c7465ea1260cb8b1791e4764553e4918e34654520ba07f7f22a202f893e668d"}, "downloads": -1, "filename": "Extendedmathuse-2.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "607708c69c2a5a3706b1104d851f4391", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7460, "upload_time": "2019-11-30T03:45:21", "upload_time_iso_8601": "2019-11-30T03:45:21.232765Z", "url": "https://files.pythonhosted.org/packages/d3/ed/79c4dbc368f39356d1c54824ee66fcaca3446681ed196141636d1ffee2ec/Extendedmathuse-2.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1db7b1df53d1cf72ba02a427ee6b7a01", "sha256": "8a59ad0e0b7f037e5950cec726b9c7c8c618525dde233a679512ec4e3d4fd872"}, "downloads": -1, "filename": "Extendedmathuse-2.1.2.tar.gz", "has_sig": false, "md5_digest": "1db7b1df53d1cf72ba02a427ee6b7a01", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6062, "upload_time": "2019-11-30T03:45:23", "upload_time_iso_8601": "2019-11-30T03:45:23.436077Z", "url": "https://files.pythonhosted.org/packages/2e/0d/c944822e06aac347ad4f5b5f35fef53b5a02f4f575fcb988a524f9d844a3/Extendedmathuse-2.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "607708c69c2a5a3706b1104d851f4391", "sha256": "3c7465ea1260cb8b1791e4764553e4918e34654520ba07f7f22a202f893e668d"}, "downloads": -1, "filename": "Extendedmathuse-2.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "607708c69c2a5a3706b1104d851f4391", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7460, "upload_time": "2019-11-30T03:45:21", "upload_time_iso_8601": "2019-11-30T03:45:21.232765Z", "url": "https://files.pythonhosted.org/packages/d3/ed/79c4dbc368f39356d1c54824ee66fcaca3446681ed196141636d1ffee2ec/Extendedmathuse-2.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1db7b1df53d1cf72ba02a427ee6b7a01", "sha256": "8a59ad0e0b7f037e5950cec726b9c7c8c618525dde233a679512ec4e3d4fd872"}, "downloads": -1, "filename": "Extendedmathuse-2.1.2.tar.gz", "has_sig": false, "md5_digest": "1db7b1df53d1cf72ba02a427ee6b7a01", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6062, "upload_time": "2019-11-30T03:45:23", "upload_time_iso_8601": "2019-11-30T03:45:23.436077Z", "url": "https://files.pythonhosted.org/packages/2e/0d/c944822e06aac347ad4f5b5f35fef53b5a02f4f575fcb988a524f9d844a3/Extendedmathuse-2.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:33 2020"}