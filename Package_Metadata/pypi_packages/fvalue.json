{"info": {"author": "Marc-Antoine Ouimet", "author_email": "ouimetmarcantoine@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# py-formatted-value\n\n[![Build Status](https://travis-ci.org/MartyO256/py-formatted-value.svg?branch=master)](https://travis-ci.org/MartyO256/py-formatted-value)\n\n---\n\nFormat experimental values and their uncertainties using appropriate significant figures and matching decimal places.\n\n---\n\n## Installation\n\nTo install `fvalue`, run:\n```shell script\npip install fvalue\n```\n\n## Examples\n\nThe following examples showcase the core features of the library.\n\n```py\nfrom fvalue import FormattedValue\nfrom decimal import Decimal\n\nFormattedValue(\n    value=10_973_731.768_160,\n    error=0.000_021,\n    error_significant_figures=2,\n    rounding=FormattedValue.RoundingOption.ROUND_HALF_EVEN,\n).formatted(\n    template=FormattedValue.SIUNITX_TEMPLATE,\n    units=r\"\\per\\meter\",\n)\n# >>> \"\\SI{10973731.768160 \\pm 0.000021 e0}{\\per\\meter}\"\n\nFormattedValue(\n    value=0.000_002_671,\n    error=0.000_000_452,\n    error_significant_figures=1,\n).formatted(\n    template=FormattedValue.SIUNITX_NUM_TEMPLATE,\n)\n# >>> \"\\num{2.7 \\pm 0.5 e-6}\"\n\nFormattedValue(\n    0.000_002_671,\n    0.000_000_452,\n    error_significant_figures=2,\n).formatted(\n    FormattedValue.SIUNITX_NUM_TEMPLATE,\n    multiplier=10 ** 3,\n)\n# >>> \"0.00267 \u00c2\u00b1 0.00045\"\n\nFormattedValue(\n    Decimal(\"1.602_176_634E-19\"),\n).formatted(\n    FormattedValue.SIUNITX_VALUE_TEMPLATE,\n    units=r\"\\coulomb\",\n)\n# >>> \"\\SI{1.602176634 e-19}{\\coulomb}\"\n\nFormattedValue(\n    Decimal(\"1.416_784E32\"),\n    Decimal(\"0.000_016E32\"),\n    error_significant_figures=2,\n).formatted(\n    FormattedValue.NATURAL_TEMPLATE,\n    units=r\"K\",\n)\n# >>> \"(1416784 \u00c2\u00b1 16) x 10^26 K\"\n\nFormattedValue(\n    656,\n    10,\n).formatted(\n    FormattedValue.NATURAL_TEMPLATE,\n    units=r\"nm\",\n)\n# >>> \"(66 \u00c2\u00b1 1) x 10 nm\"\n```\n\n## Usage\n\nInstances of `FormattedValue` are used to produce string representations of experimental quantities with their uncertainties.\nThe number of significant figures in the error on a value is set on instantiation.\nThe decimal places of the value always match that of the error in formatted strings.\nValues of small magnitude are automatically formatted with an appropriate decimal exponent in the scientific notation.\n\n### Rounding\n\nThe rounding policies used in the formatting are those of the `decimal` library, namely: `ROUND_HALF_EVEN`, `ROUND_05UP`, `ROUND_CEILING`, `ROUND_DOWN`, `ROUND_FLOOR`, `ROUND_HALF_DOWN`, `ROUND_HALF_UP` and `ROUND_UP`.\nAll of these are conveniently available as an enumeration at `FormattedValue.RoundingOption`.\nBy default, `ROUND_HALF_EVEN` is used to mitigate some biases.\n\n### Templates\n\nTemplates allow for the placement in strings of the rounded value, error, decimal exponent, and units optionally.\nUsing the `formatted` method of an instance of `FormattedValue`, strings and callable templates can be used.\n\nIf a given template is a string, then:\n\n* `{0}` corresponds to the rounded value;\n* `{1}` corresponds to the rounded error;\n* `{2}` corresponds to the decimal exponent in scientific notation;\n* `{3}` corresponds to the units.\n\nFor instance, `\"({0} \u00c2\u00b1 {1}) x 10^{2} {3}\"` would generate `\"(10 \u00c2\u00b1 1) x 10^0 m\"` for a formatted value with value `10`, error `1`, and units `\"m\"`.\n\nIf a given template is a function, then it should have type signature `Callable[[str, str, str, str], str]`, with arguments `(value: str, error: str, exponent: str, units: str) -> str`. \nOne such template is accessible at `FormattedValue.NATURAL_TEMPLATE`.\n\nVarious templates are available to speed up the generation of formatted strings.\nThe default template is for [SIUNITX](https://ctan.org/pkg/siunitx), which is accessible at `FormattedValue.SIUNITX_TEMPLATE` and produces strings as `\"\\SI{{0} \\pm {1} e{2}}{{3}}\"`.\nOther templates include: `Formatted.SIUNITX_VALUE_TEMPLATE`, `Formatted.SIUNITX_ERROR_TEMPLATE`, `Formatted.SIUNITX_NUM_TEMPLATE`, `Formatted.SIUNITX_NUM_VALUE_TEMPLATE`, `Formatted.SIUNITX_NUM_ERROR_TEMPLATE`.\n\n### Multiplier\n\nThe `formatted` method of instances of `FormattedValue` allows for a multiplier to be applied to both the value and error of the instance.\nThis allows for an experimental value to be used using the International System of Units for data processing, and prefixed units to be used for the presentation of results in reports.\n\n## About\n\n### Authors\n\n- **Marc-Antoine Ouimet** - [MartyO256](https://github.com/MartyO256)\n\n### License\n\nThis project is licensed under the MIT License. See the [LICENSE.md](LICENSE.md)\nfile for details.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MartyO256/py-formatted-value", "keywords": "significant figures values uncertainty formatting format", "license": "", "maintainer": "", "maintainer_email": "", "name": "fvalue", "package_url": "https://pypi.org/project/fvalue/", "platform": "", "project_url": "https://pypi.org/project/fvalue/", "project_urls": {"Homepage": "https://github.com/MartyO256/py-formatted-value"}, "release_url": "https://pypi.org/project/fvalue/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Values and their uncertainties formatter up to a given number of significant figures in the uncertainty.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>py-formatted-value</h1>\n<p><a href=\"https://travis-ci.org/MartyO256/py-formatted-value\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4fafe27f19ed886ef9404797c1340d48ebd33e93/68747470733a2f2f7472617669732d63692e6f72672f4d617274794f3235362f70792d666f726d61747465642d76616c75652e7376673f6272616e63683d6d6173746572\"></a></p>\n<hr>\n<p>Format experimental values and their uncertainties using appropriate significant figures and matching decimal places.</p>\n<hr>\n<h2>Installation</h2>\n<p>To install <code>fvalue</code>, run:</p>\n<pre>pip install fvalue\n</pre>\n<h2>Examples</h2>\n<p>The following examples showcase the core features of the library.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fvalue</span> <span class=\"kn\">import</span> <span class=\"n\">FormattedValue</span>\n<span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n\n<span class=\"n\">FormattedValue</span><span class=\"p\">(</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">10_973_731.768_160</span><span class=\"p\">,</span>\n    <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"mf\">0.000_021</span><span class=\"p\">,</span>\n    <span class=\"n\">error_significant_figures</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">rounding</span><span class=\"o\">=</span><span class=\"n\">FormattedValue</span><span class=\"o\">.</span><span class=\"n\">RoundingOption</span><span class=\"o\">.</span><span class=\"n\">ROUND_HALF_EVEN</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">formatted</span><span class=\"p\">(</span>\n    <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">FormattedValue</span><span class=\"o\">.</span><span class=\"n\">SIUNITX_TEMPLATE</span><span class=\"p\">,</span>\n    <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"\\per\\meter\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; \"\\SI{10973731.768160 \\pm 0.000021 e0}{\\per\\meter}\"</span>\n\n<span class=\"n\">FormattedValue</span><span class=\"p\">(</span>\n    <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mf\">0.000_002_671</span><span class=\"p\">,</span>\n    <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"mf\">0.000_000_452</span><span class=\"p\">,</span>\n    <span class=\"n\">error_significant_figures</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">formatted</span><span class=\"p\">(</span>\n    <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">FormattedValue</span><span class=\"o\">.</span><span class=\"n\">SIUNITX_NUM_TEMPLATE</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; \"\\num{2.7 \\pm 0.5 e-6}\"</span>\n\n<span class=\"n\">FormattedValue</span><span class=\"p\">(</span>\n    <span class=\"mf\">0.000_002_671</span><span class=\"p\">,</span>\n    <span class=\"mf\">0.000_000_452</span><span class=\"p\">,</span>\n    <span class=\"n\">error_significant_figures</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">formatted</span><span class=\"p\">(</span>\n    <span class=\"n\">FormattedValue</span><span class=\"o\">.</span><span class=\"n\">SIUNITX_NUM_TEMPLATE</span><span class=\"p\">,</span>\n    <span class=\"n\">multiplier</span><span class=\"o\">=</span><span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; \"0.00267 \u00c2\u00b1 0.00045\"</span>\n\n<span class=\"n\">FormattedValue</span><span class=\"p\">(</span>\n    <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"1.602_176_634E-19\"</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">formatted</span><span class=\"p\">(</span>\n    <span class=\"n\">FormattedValue</span><span class=\"o\">.</span><span class=\"n\">SIUNITX_VALUE_TEMPLATE</span><span class=\"p\">,</span>\n    <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"\\coulomb\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; \"\\SI{1.602176634 e-19}{\\coulomb}\"</span>\n\n<span class=\"n\">FormattedValue</span><span class=\"p\">(</span>\n    <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"1.416_784E32\"</span><span class=\"p\">),</span>\n    <span class=\"n\">Decimal</span><span class=\"p\">(</span><span class=\"s2\">\"0.000_016E32\"</span><span class=\"p\">),</span>\n    <span class=\"n\">error_significant_figures</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">formatted</span><span class=\"p\">(</span>\n    <span class=\"n\">FormattedValue</span><span class=\"o\">.</span><span class=\"n\">NATURAL_TEMPLATE</span><span class=\"p\">,</span>\n    <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"K\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; \"(1416784 \u00c2\u00b1 16) x 10^26 K\"</span>\n\n<span class=\"n\">FormattedValue</span><span class=\"p\">(</span>\n    <span class=\"mi\">656</span><span class=\"p\">,</span>\n    <span class=\"mi\">10</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">formatted</span><span class=\"p\">(</span>\n    <span class=\"n\">FormattedValue</span><span class=\"o\">.</span><span class=\"n\">NATURAL_TEMPLATE</span><span class=\"p\">,</span>\n    <span class=\"n\">units</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">\"nm\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; \"(66 \u00c2\u00b1 1) x 10 nm\"</span>\n</pre>\n<h2>Usage</h2>\n<p>Instances of <code>FormattedValue</code> are used to produce string representations of experimental quantities with their uncertainties.\nThe number of significant figures in the error on a value is set on instantiation.\nThe decimal places of the value always match that of the error in formatted strings.\nValues of small magnitude are automatically formatted with an appropriate decimal exponent in the scientific notation.</p>\n<h3>Rounding</h3>\n<p>The rounding policies used in the formatting are those of the <code>decimal</code> library, namely: <code>ROUND_HALF_EVEN</code>, <code>ROUND_05UP</code>, <code>ROUND_CEILING</code>, <code>ROUND_DOWN</code>, <code>ROUND_FLOOR</code>, <code>ROUND_HALF_DOWN</code>, <code>ROUND_HALF_UP</code> and <code>ROUND_UP</code>.\nAll of these are conveniently available as an enumeration at <code>FormattedValue.RoundingOption</code>.\nBy default, <code>ROUND_HALF_EVEN</code> is used to mitigate some biases.</p>\n<h3>Templates</h3>\n<p>Templates allow for the placement in strings of the rounded value, error, decimal exponent, and units optionally.\nUsing the <code>formatted</code> method of an instance of <code>FormattedValue</code>, strings and callable templates can be used.</p>\n<p>If a given template is a string, then:</p>\n<ul>\n<li><code>{0}</code> corresponds to the rounded value;</li>\n<li><code>{1}</code> corresponds to the rounded error;</li>\n<li><code>{2}</code> corresponds to the decimal exponent in scientific notation;</li>\n<li><code>{3}</code> corresponds to the units.</li>\n</ul>\n<p>For instance, <code>\"({0} \u00c2\u00b1 {1}) x 10^{2} {3}\"</code> would generate <code>\"(10 \u00c2\u00b1 1) x 10^0 m\"</code> for a formatted value with value <code>10</code>, error <code>1</code>, and units <code>\"m\"</code>.</p>\n<p>If a given template is a function, then it should have type signature <code>Callable[[str, str, str, str], str]</code>, with arguments <code>(value: str, error: str, exponent: str, units: str) -&gt; str</code>.\nOne such template is accessible at <code>FormattedValue.NATURAL_TEMPLATE</code>.</p>\n<p>Various templates are available to speed up the generation of formatted strings.\nThe default template is for <a href=\"https://ctan.org/pkg/siunitx\" rel=\"nofollow\">SIUNITX</a>, which is accessible at <code>FormattedValue.SIUNITX_TEMPLATE</code> and produces strings as <code>\"\\SI{{0} \\pm {1} e{2}}{{3}}\"</code>.\nOther templates include: <code>Formatted.SIUNITX_VALUE_TEMPLATE</code>, <code>Formatted.SIUNITX_ERROR_TEMPLATE</code>, <code>Formatted.SIUNITX_NUM_TEMPLATE</code>, <code>Formatted.SIUNITX_NUM_VALUE_TEMPLATE</code>, <code>Formatted.SIUNITX_NUM_ERROR_TEMPLATE</code>.</p>\n<h3>Multiplier</h3>\n<p>The <code>formatted</code> method of instances of <code>FormattedValue</code> allows for a multiplier to be applied to both the value and error of the instance.\nThis allows for an experimental value to be used using the International System of Units for data processing, and prefixed units to be used for the presentation of results in reports.</p>\n<h2>About</h2>\n<h3>Authors</h3>\n<ul>\n<li><strong>Marc-Antoine Ouimet</strong> - <a href=\"https://github.com/MartyO256\" rel=\"nofollow\">MartyO256</a></li>\n</ul>\n<h3>License</h3>\n<p>This project is licensed under the MIT License. See the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a>\nfile for details.</p>\n\n          </div>"}, "last_serial": 6270735, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "936b846eb4361718dd7297265716f7e7", "sha256": "d2cb4ceba722c024cdcef2d4bb9fc68312aace7c81d77630f68c140e171ad791"}, "downloads": -1, "filename": "fvalue-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "936b846eb4361718dd7297265716f7e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6698, "upload_time": "2019-12-10T04:12:28", "upload_time_iso_8601": "2019-12-10T04:12:28.066355Z", "url": "https://files.pythonhosted.org/packages/25/f7/46a4eb0593392f39d78c1678abf047d8ae47a1955e58e8979fe511d45b40/fvalue-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e043ce39d8b070a0c3bdc7684db5835", "sha256": "34158828daac419ab20f26702dc61ff7a82a00fbddc14a2e9c676df6ff4e98d4"}, "downloads": -1, "filename": "fvalue-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9e043ce39d8b070a0c3bdc7684db5835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6518, "upload_time": "2019-12-10T04:12:30", "upload_time_iso_8601": "2019-12-10T04:12:30.239960Z", "url": "https://files.pythonhosted.org/packages/c8/2e/86f039d4d40b6c50a128b8b06cf9f756c5c86b76e3bbf1b63c9c2bf2260c/fvalue-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "936b846eb4361718dd7297265716f7e7", "sha256": "d2cb4ceba722c024cdcef2d4bb9fc68312aace7c81d77630f68c140e171ad791"}, "downloads": -1, "filename": "fvalue-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "936b846eb4361718dd7297265716f7e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6698, "upload_time": "2019-12-10T04:12:28", "upload_time_iso_8601": "2019-12-10T04:12:28.066355Z", "url": "https://files.pythonhosted.org/packages/25/f7/46a4eb0593392f39d78c1678abf047d8ae47a1955e58e8979fe511d45b40/fvalue-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e043ce39d8b070a0c3bdc7684db5835", "sha256": "34158828daac419ab20f26702dc61ff7a82a00fbddc14a2e9c676df6ff4e98d4"}, "downloads": -1, "filename": "fvalue-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9e043ce39d8b070a0c3bdc7684db5835", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6518, "upload_time": "2019-12-10T04:12:30", "upload_time_iso_8601": "2019-12-10T04:12:30.239960Z", "url": "https://files.pythonhosted.org/packages/c8/2e/86f039d4d40b6c50a128b8b06cf9f756c5c86b76e3bbf1b63c9c2bf2260c/fvalue-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:30 2020"}