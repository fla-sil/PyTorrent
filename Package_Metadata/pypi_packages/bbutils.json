{"info": {"author": "Kai Raphahn", "author_email": "kai.raphahn@laburec.de", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Topic :: Software Development :: Libraries"], "description": "# bbutils\n\nCollection of code I use frequently in many of my projects. Especially the logging feature.\n\n### Features\n\n* Logging to console (colored) and file, in can be extended via additional writer via a plugin feature. The logging is done directly, but also can be done via a thread and a simple buffer.  \n\n## Installation\n\nYou can install unqlite using `pip`.\n\n    pip install bbutils\n\n## Basic logging usage\n\nBelow is a sample designed to show some of the basic features and functionality of the logging library.\n\n### Step 1: Setup\n\nTo begin, instantiate an ``Logging`` object.  Then do the setup via `log.setup(**kwargs)`.\n\n```pycon\nlog = Logging()\nlog.setup(app=\"example\", level=3)\n```\n\n###### Possible values for setup():\n\n* **app**: Application name\n* **use_thread**: use threaded output\n* **interval**: update interval for threaded mode in seconds\n* **level**: verbose level (integer)\n* **index**: dictionay with a lookup table for the different commands for each verbose level\n\n###### Verbose level and the commands\n\n```pycon\nindex = {\n    0: [\"INFORM\", \"WARN\", \"ERROR\", \"EXCEPTION\", \"TIMER\", \"PROGRESS\"],\n    1: [\"INFORM\", \"DEBUG1\", \"WARN\", \"ERROR\", \"EXCEPTION\", \"TIMER\", \"PROGRESS\"],\n    2: [\"INFORM\", \"DEBUG1\", \"DEBUG1\", \"WARN\", \"ERROR\", \"EXCEPTION\", \"TIMER\", \"PROGRESS\"],\n    3: [\"INFORM\", \"DEBUG1\", \"DEBUG2\", \"DEBUG3\", \"WARN\", \"ERROR\", \"EXCEPTION\", \"TIMER\", \"PROGRESS\"]\n}\n```\n\n### Step 2: Output writer\n\n* console\n* file\n\n```pycon\n    # We want console and file logging\n    console = log.get_writer(\"console\")\n    fileio = log.get_writer(\"file\")\n\n    # file name to log to\n    filename = os.path.abspath(os.path.normpath(\"{0:s}/run-tests.log\".format(os.getcwd())))\n\n    # setup file and console output, set filename and filler for space for readable output.\n    console.setup(text_space=15)\n    fileio.setup(text_space=15, filename=filename)\n```\n\n###### Possible values for console.setup():\n\n* **text_space**: number of space fillers for application name and tag\n* **seperator**: seperator for tags and content, currently '|' as default\n* **error_index**: list of commands (see _Verbose level and the commands_) redirected to **_stderr_**\n* **bar_len**: length of progress bar\n\n\n###### Possible values for file.setup():\n\nThere are two modes for the file output. First is setting the filename directly. The second is setting filename, logname and logpath. The second enables to append a date and time value to the output filename.\n\n* **text_space**: number of space fillers for application name and tag\n* **append_data**: continue old logfile (only for filename)\n* **filename**: filename for logfile (excludes **_logname_**, **_logpath_** and **_append_datetime_**)\n* **logname**: general name for logfile (example logname=example will result in a filename of <path>/exaple_2020-01-01_00.00.00.log)\n* **logpath**: path to store the logfile, works only with **_logname_**\n* **append_datetime**: add datetime to **_logname_** and **_logpath_**\n\n\n### Step 3: Register writer\n\nIts possible to create self written writer and use these. Look in bbutil.logging.types for the `Writer` class and the `Message` class.\n\n```pycon\n    # register the output\n    log.register(console)\n    log.register(fileio)\n```\n\n### Step 4: Use the class\n\n* inform(tag: str, content: str)\n* warn(tag: str, content: str)\n* debug1(tag: str, content: str)\n* debug2(tag: str, content: str)\n* debug3(tag: str, content: str)\n* error(content: str)\n* exception(e: Exception)\n* traceback()\n* progress(limit: int, interval: int = 0)\n* timer(content: str)\n\n###### Example for 'inform'\n\n```\nlog.inform(\"EXAMPLE\", \"example 1, this will be shown with every log level\")\n\nexample         EXAMPLE        | example 1, this will be shown with every log level\n```\n\n\n### example.py\n\nSee file [here](https://raw.githubusercontent.com/TheUncleKai/bbutils/master/example.py)\n\n![Example output](https://raw.githubusercontent.com/TheUncleKai/bbutils/master/example.png \"Example output\")\n\n```pycon\nimport os\nimport time\nfrom bbutil.logging import Logging\n\n\nif __name__ == '__main__':\n\n    log = Logging()\n\n    # Setup the logging, appicatio name is 'example', log level is 2\n    log.setup(app=\"example\", level=3)\n\n    # We want console and file logging\n    console = log.get_writer(\"console\")\n    fileio = log.get_writer(\"file\")\n\n    # file name to log to\n    filename = os.path.abspath(os.path.normpath(\"{0:s}/run-tests.log\".format(os.getcwd())))\n\n    # setup file and console output, set filename and filler for space for readable output.\n    console.setup(text_space=15)\n    fileio.setup(text_space=15, filename=filename)\n\n    # register the output\n    log.register(console)\n    log.register(fileio)\n\n    # switch logging on\n    log.open()\n\n    # example 1, this will be shown with every log level\n    log.inform(\"EXAMPLE\", \"example 1, this will be shown with every log level\")\n\n    # example 2, this will be shown with every log level\n    log.warn(\"EXAMPLE\", \"this will be shown with every log level\")\n\n    # error example, this will be shown with every log level\n    log.error(\"this will be shown with every log level!\")\n\n    # debug 1 example, this will be shown only with log level 1 and above\n    log.debug1(\"DEBUG\", \"this will be shown only with log level 1 and above\")\n\n    # debug 2 example, this will be shown only with log level 2 and above\n    log.debug2(\"DEBUG\", \"this will be shown only with log level 2 and above\")\n\n    # debug 3 example, this will be shown only with log level 3\n    log.debug3(\"DEBUG\", \"this will be shown only with log level 3\")\n\n    # show exceptions, this will be shown with every log level\n    log.inform(\"EXCEPTIONS\", \"this will be shown with every log level\")\n\n    try:\n        _ = 1 / 0\n    except ZeroDivisionError as e:\n        log.exception(e)\n\n    # show traceback, this will be shown with every log level\n    log.inform(\"TRACEBACK\", \"this will be shown with every log level\")\n    try:\n        _ = 1 / 0\n    except ZeroDivisionError:\n        log.traceback()\n\n    # show a progress meter via console\n    # first parameter: limit of the counter\n    # second parameter: update interval\n    # the update interval is there to prevent flickering, it also reduces the load\n    log.inform(\"PROGRESS\", \"count from 0 to 1000 in 10 interval, set the value via set()\")\n    count1 = 0\n    progress1 = log.progress(1000, 10)\n\n    while True:\n        progress1.set(count1)\n        time.sleep(0.0001)\n\n        count1 += 1\n\n        if count1 > 1000:\n            break\n\n    # to remove the progress bar use clear\n    log.clear()\n\n    # it also can be used backwards\n    log.inform(\"PROGRESS\", \"count from 1000 to 0 in 10 interval, set the value via set()\")\n    count2 = 1000\n    progress2 = log.progress(1000, 10)\n    progress2.counter = 1000\n\n    while True:\n        progress2.set(count2)\n        time.sleep(0.0001)\n\n        count2 -= 1\n\n        if count2 == 0:\n            break\n\n    # to remove the progress bar use clear\n    log.clear()\n\n    # now we use inc instead of setting the value\n    log.inform(\"PROGRESS\", \"count from 0 to 1000 in 10 interval, set the value via inc()\")\n    count3 = 0\n    progress3 = log.progress(1000, 10)\n\n    while True:\n        progress3.inc()\n        time.sleep(0.0001)\n\n        count3 += 1\n\n        if count3 > 1000:\n            break\n\n    # to remove the progress bar use clear\n    log.clear()\n\n    log.inform(\"MEASURE\", \"Measure time.sleep(3)\")\n    timer1 = log.timer(\"Measure something\")\n    time.sleep(3)\n    timer1.stop()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/TheUncleKai/bbutils", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "bbutils", "package_url": "https://pypi.org/project/bbutils/", "platform": "", "project_url": "https://pypi.org/project/bbutils/", "project_urls": {"Homepage": "https://github.com/TheUncleKai/bbutils"}, "release_url": "https://pypi.org/project/bbutils/0.2.0.0/", "requires_dist": ["colorama"], "requires_python": "", "summary": "Small collection of stuff for all my other python projects (including logging).", "version": "0.2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>bbutils</h1>\n<p>Collection of code I use frequently in many of my projects. Especially the logging feature.</p>\n<h3>Features</h3>\n<ul>\n<li>Logging to console (colored) and file, in can be extended via additional writer via a plugin feature. The logging is done directly, but also can be done via a thread and a simple buffer.</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install unqlite using <code>pip</code>.</p>\n<pre><code>pip install bbutils\n</code></pre>\n<h2>Basic logging usage</h2>\n<p>Below is a sample designed to show some of the basic features and functionality of the logging library.</p>\n<h3>Step 1: Setup</h3>\n<p>To begin, instantiate an <code>Logging</code> object.  Then do the setup via <code>log.setup(**kwargs)</code>.</p>\n<pre><span class=\"go\">log = Logging()</span>\n<span class=\"go\">log.setup(app=\"example\", level=3)</span>\n</pre>\n<h6>Possible values for setup():</h6>\n<ul>\n<li><strong>app</strong>: Application name</li>\n<li><strong>use_thread</strong>: use threaded output</li>\n<li><strong>interval</strong>: update interval for threaded mode in seconds</li>\n<li><strong>level</strong>: verbose level (integer)</li>\n<li><strong>index</strong>: dictionay with a lookup table for the different commands for each verbose level</li>\n</ul>\n<h6>Verbose level and the commands</h6>\n<pre><span class=\"go\">index = {</span>\n<span class=\"go\">    0: [\"INFORM\", \"WARN\", \"ERROR\", \"EXCEPTION\", \"TIMER\", \"PROGRESS\"],</span>\n<span class=\"go\">    1: [\"INFORM\", \"DEBUG1\", \"WARN\", \"ERROR\", \"EXCEPTION\", \"TIMER\", \"PROGRESS\"],</span>\n<span class=\"go\">    2: [\"INFORM\", \"DEBUG1\", \"DEBUG1\", \"WARN\", \"ERROR\", \"EXCEPTION\", \"TIMER\", \"PROGRESS\"],</span>\n<span class=\"go\">    3: [\"INFORM\", \"DEBUG1\", \"DEBUG2\", \"DEBUG3\", \"WARN\", \"ERROR\", \"EXCEPTION\", \"TIMER\", \"PROGRESS\"]</span>\n<span class=\"go\">}</span>\n</pre>\n<h3>Step 2: Output writer</h3>\n<ul>\n<li>console</li>\n<li>file</li>\n</ul>\n<pre><span class=\"go\">    # We want console and file logging</span>\n<span class=\"go\">    console = log.get_writer(\"console\")</span>\n<span class=\"go\">    fileio = log.get_writer(\"file\")</span>\n\n<span class=\"go\">    # file name to log to</span>\n<span class=\"go\">    filename = os.path.abspath(os.path.normpath(\"{0:s}/run-tests.log\".format(os.getcwd())))</span>\n\n<span class=\"go\">    # setup file and console output, set filename and filler for space for readable output.</span>\n<span class=\"go\">    console.setup(text_space=15)</span>\n<span class=\"go\">    fileio.setup(text_space=15, filename=filename)</span>\n</pre>\n<h6>Possible values for console.setup():</h6>\n<ul>\n<li><strong>text_space</strong>: number of space fillers for application name and tag</li>\n<li><strong>seperator</strong>: seperator for tags and content, currently '|' as default</li>\n<li><strong>error_index</strong>: list of commands (see <em>Verbose level and the commands</em>) redirected to <strong><em>stderr</em></strong></li>\n<li><strong>bar_len</strong>: length of progress bar</li>\n</ul>\n<h6>Possible values for file.setup():</h6>\n<p>There are two modes for the file output. First is setting the filename directly. The second is setting filename, logname and logpath. The second enables to append a date and time value to the output filename.</p>\n<ul>\n<li><strong>text_space</strong>: number of space fillers for application name and tag</li>\n<li><strong>append_data</strong>: continue old logfile (only for filename)</li>\n<li><strong>filename</strong>: filename for logfile (excludes <strong><em>logname</em></strong>, <strong><em>logpath</em></strong> and <strong><em>append_datetime</em></strong>)</li>\n<li><strong>logname</strong>: general name for logfile (example logname=example will result in a filename of &lt;path&gt;/exaple_2020-01-01_00.00.00.log)</li>\n<li><strong>logpath</strong>: path to store the logfile, works only with <strong><em>logname</em></strong></li>\n<li><strong>append_datetime</strong>: add datetime to <strong><em>logname</em></strong> and <strong><em>logpath</em></strong></li>\n</ul>\n<h3>Step 3: Register writer</h3>\n<p>Its possible to create self written writer and use these. Look in bbutil.logging.types for the <code>Writer</code> class and the <code>Message</code> class.</p>\n<pre><span class=\"go\">    # register the output</span>\n<span class=\"go\">    log.register(console)</span>\n<span class=\"go\">    log.register(fileio)</span>\n</pre>\n<h3>Step 4: Use the class</h3>\n<ul>\n<li>inform(tag: str, content: str)</li>\n<li>warn(tag: str, content: str)</li>\n<li>debug1(tag: str, content: str)</li>\n<li>debug2(tag: str, content: str)</li>\n<li>debug3(tag: str, content: str)</li>\n<li>error(content: str)</li>\n<li>exception(e: Exception)</li>\n<li>traceback()</li>\n<li>progress(limit: int, interval: int = 0)</li>\n<li>timer(content: str)</li>\n</ul>\n<h6>Example for 'inform'</h6>\n<pre><code>log.inform(\"EXAMPLE\", \"example 1, this will be shown with every log level\")\n\nexample         EXAMPLE        | example 1, this will be shown with every log level\n</code></pre>\n<h3>example.py</h3>\n<p>See file <a href=\"https://raw.githubusercontent.com/TheUncleKai/bbutils/master/example.py\" rel=\"nofollow\">here</a></p>\n<p><img alt=\"Example output\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6eeb100a1d1cdaca5124f587b332b97f7d03314e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f546865556e636c654b61692f62627574696c732f6d61737465722f6578616d706c652e706e67\"></p>\n<pre><span class=\"go\">import os</span>\n<span class=\"go\">import time</span>\n<span class=\"go\">from bbutil.logging import Logging</span>\n\n\n<span class=\"go\">if __name__ == '__main__':</span>\n\n<span class=\"go\">    log = Logging()</span>\n\n<span class=\"go\">    # Setup the logging, appicatio name is 'example', log level is 2</span>\n<span class=\"go\">    log.setup(app=\"example\", level=3)</span>\n\n<span class=\"go\">    # We want console and file logging</span>\n<span class=\"go\">    console = log.get_writer(\"console\")</span>\n<span class=\"go\">    fileio = log.get_writer(\"file\")</span>\n\n<span class=\"go\">    # file name to log to</span>\n<span class=\"go\">    filename = os.path.abspath(os.path.normpath(\"{0:s}/run-tests.log\".format(os.getcwd())))</span>\n\n<span class=\"go\">    # setup file and console output, set filename and filler for space for readable output.</span>\n<span class=\"go\">    console.setup(text_space=15)</span>\n<span class=\"go\">    fileio.setup(text_space=15, filename=filename)</span>\n\n<span class=\"go\">    # register the output</span>\n<span class=\"go\">    log.register(console)</span>\n<span class=\"go\">    log.register(fileio)</span>\n\n<span class=\"go\">    # switch logging on</span>\n<span class=\"go\">    log.open()</span>\n\n<span class=\"go\">    # example 1, this will be shown with every log level</span>\n<span class=\"go\">    log.inform(\"EXAMPLE\", \"example 1, this will be shown with every log level\")</span>\n\n<span class=\"go\">    # example 2, this will be shown with every log level</span>\n<span class=\"go\">    log.warn(\"EXAMPLE\", \"this will be shown with every log level\")</span>\n\n<span class=\"go\">    # error example, this will be shown with every log level</span>\n<span class=\"go\">    log.error(\"this will be shown with every log level!\")</span>\n\n<span class=\"go\">    # debug 1 example, this will be shown only with log level 1 and above</span>\n<span class=\"go\">    log.debug1(\"DEBUG\", \"this will be shown only with log level 1 and above\")</span>\n\n<span class=\"go\">    # debug 2 example, this will be shown only with log level 2 and above</span>\n<span class=\"go\">    log.debug2(\"DEBUG\", \"this will be shown only with log level 2 and above\")</span>\n\n<span class=\"go\">    # debug 3 example, this will be shown only with log level 3</span>\n<span class=\"go\">    log.debug3(\"DEBUG\", \"this will be shown only with log level 3\")</span>\n\n<span class=\"go\">    # show exceptions, this will be shown with every log level</span>\n<span class=\"go\">    log.inform(\"EXCEPTIONS\", \"this will be shown with every log level\")</span>\n\n<span class=\"go\">    try:</span>\n<span class=\"go\">        _ = 1 / 0</span>\n<span class=\"go\">    except ZeroDivisionError as e:</span>\n<span class=\"go\">        log.exception(e)</span>\n\n<span class=\"go\">    # show traceback, this will be shown with every log level</span>\n<span class=\"go\">    log.inform(\"TRACEBACK\", \"this will be shown with every log level\")</span>\n<span class=\"go\">    try:</span>\n<span class=\"go\">        _ = 1 / 0</span>\n<span class=\"go\">    except ZeroDivisionError:</span>\n<span class=\"go\">        log.traceback()</span>\n\n<span class=\"go\">    # show a progress meter via console</span>\n<span class=\"go\">    # first parameter: limit of the counter</span>\n<span class=\"go\">    # second parameter: update interval</span>\n<span class=\"go\">    # the update interval is there to prevent flickering, it also reduces the load</span>\n<span class=\"go\">    log.inform(\"PROGRESS\", \"count from 0 to 1000 in 10 interval, set the value via set()\")</span>\n<span class=\"go\">    count1 = 0</span>\n<span class=\"go\">    progress1 = log.progress(1000, 10)</span>\n\n<span class=\"go\">    while True:</span>\n<span class=\"go\">        progress1.set(count1)</span>\n<span class=\"go\">        time.sleep(0.0001)</span>\n\n<span class=\"go\">        count1 += 1</span>\n\n<span class=\"go\">        if count1 &gt; 1000:</span>\n<span class=\"go\">            break</span>\n\n<span class=\"go\">    # to remove the progress bar use clear</span>\n<span class=\"go\">    log.clear()</span>\n\n<span class=\"go\">    # it also can be used backwards</span>\n<span class=\"go\">    log.inform(\"PROGRESS\", \"count from 1000 to 0 in 10 interval, set the value via set()\")</span>\n<span class=\"go\">    count2 = 1000</span>\n<span class=\"go\">    progress2 = log.progress(1000, 10)</span>\n<span class=\"go\">    progress2.counter = 1000</span>\n\n<span class=\"go\">    while True:</span>\n<span class=\"go\">        progress2.set(count2)</span>\n<span class=\"go\">        time.sleep(0.0001)</span>\n\n<span class=\"go\">        count2 -= 1</span>\n\n<span class=\"go\">        if count2 == 0:</span>\n<span class=\"go\">            break</span>\n\n<span class=\"go\">    # to remove the progress bar use clear</span>\n<span class=\"go\">    log.clear()</span>\n\n<span class=\"go\">    # now we use inc instead of setting the value</span>\n<span class=\"go\">    log.inform(\"PROGRESS\", \"count from 0 to 1000 in 10 interval, set the value via inc()\")</span>\n<span class=\"go\">    count3 = 0</span>\n<span class=\"go\">    progress3 = log.progress(1000, 10)</span>\n\n<span class=\"go\">    while True:</span>\n<span class=\"go\">        progress3.inc()</span>\n<span class=\"go\">        time.sleep(0.0001)</span>\n\n<span class=\"go\">        count3 += 1</span>\n\n<span class=\"go\">        if count3 &gt; 1000:</span>\n<span class=\"go\">            break</span>\n\n<span class=\"go\">    # to remove the progress bar use clear</span>\n<span class=\"go\">    log.clear()</span>\n\n<span class=\"go\">    log.inform(\"MEASURE\", \"Measure time.sleep(3)\")</span>\n<span class=\"go\">    timer1 = log.timer(\"Measure something\")</span>\n<span class=\"go\">    time.sleep(3)</span>\n<span class=\"go\">    timer1.stop()</span>\n</pre>\n\n          </div>"}, "last_serial": 6592032, "releases": {"0.1.0.4": [{"comment_text": "", "digests": {"md5": "205432de351c531fb6c1ab53a6855f33", "sha256": "694979f0b0fcc7c3c937b0a7d0b95f6d976473f23a928969face1215db7bfe58"}, "downloads": -1, "filename": "bbutils-0.1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "205432de351c531fb6c1ab53a6855f33", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25207, "upload_time": "2020-01-12T21:04:15", "upload_time_iso_8601": "2020-01-12T21:04:15.213212Z", "url": "https://files.pythonhosted.org/packages/d7/14/6effb78e59cb5bd4496125e52a605ef912ee3bec3209bd1781bfbdbb482b/bbutils-0.1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4a1fe0a7ecacc71839a6e77720d3fcc0", "sha256": "ddb73542f48fd4195a2c6e3a3e6a3287d1663ff61fc5793091bcbc42961e54f0"}, "downloads": -1, "filename": "bbutils-0.1.0.4.tar.gz", "has_sig": false, "md5_digest": "4a1fe0a7ecacc71839a6e77720d3fcc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18041, "upload_time": "2020-01-12T21:04:19", "upload_time_iso_8601": "2020-01-12T21:04:19.018695Z", "url": "https://files.pythonhosted.org/packages/85/09/81149b37b59e16ad8d32afa3c243e8d9300bc3f8a9b4dfbe2910c2477f83/bbutils-0.1.0.4.tar.gz", "yanked": false}], "0.2.0.0": [{"comment_text": "", "digests": {"md5": "7e17e3cfb38bd478247daeaaeccf7d52", "sha256": "118afa399429ec282a7586749e6260ffd39b4fa01b093856f73e0c6ebb811217"}, "downloads": -1, "filename": "bbutils-0.2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7e17e3cfb38bd478247daeaaeccf7d52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25269, "upload_time": "2020-02-08T01:28:27", "upload_time_iso_8601": "2020-02-08T01:28:27.866679Z", "url": "https://files.pythonhosted.org/packages/90/b1/67f69ee16c2f9019f57e183811208de671aa811bd3f7e7f4f3aca55e822a/bbutils-0.2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "148b52a5d7417c96757131b8057282fa", "sha256": "ac7859affdaf1cc351452abc3fede75fec790595af322de47f729707a48eb2e6"}, "downloads": -1, "filename": "bbutils-0.2.0.0.tar.gz", "has_sig": false, "md5_digest": "148b52a5d7417c96757131b8057282fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18094, "upload_time": "2020-02-08T01:28:29", "upload_time_iso_8601": "2020-02-08T01:28:29.342204Z", "url": "https://files.pythonhosted.org/packages/da/f9/72592816a0b44dee12baee95f25b7506490b7400731be00076679921adc8/bbutils-0.2.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7e17e3cfb38bd478247daeaaeccf7d52", "sha256": "118afa399429ec282a7586749e6260ffd39b4fa01b093856f73e0c6ebb811217"}, "downloads": -1, "filename": "bbutils-0.2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7e17e3cfb38bd478247daeaaeccf7d52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25269, "upload_time": "2020-02-08T01:28:27", "upload_time_iso_8601": "2020-02-08T01:28:27.866679Z", "url": "https://files.pythonhosted.org/packages/90/b1/67f69ee16c2f9019f57e183811208de671aa811bd3f7e7f4f3aca55e822a/bbutils-0.2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "148b52a5d7417c96757131b8057282fa", "sha256": "ac7859affdaf1cc351452abc3fede75fec790595af322de47f729707a48eb2e6"}, "downloads": -1, "filename": "bbutils-0.2.0.0.tar.gz", "has_sig": false, "md5_digest": "148b52a5d7417c96757131b8057282fa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18094, "upload_time": "2020-02-08T01:28:29", "upload_time_iso_8601": "2020-02-08T01:28:29.342204Z", "url": "https://files.pythonhosted.org/packages/da/f9/72592816a0b44dee12baee95f25b7506490b7400731be00076679921adc8/bbutils-0.2.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:38 2020"}