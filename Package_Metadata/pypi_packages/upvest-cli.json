{"info": {"author": "upvest.co", "author_email": "tech@upvest.co", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development"], "description": "Upvest CLI\n**********\n\nUse the Upvest API from the command line!\n\nInstallation\n------------\n\nTo install the Upvest CLI, using Python 3.6+::\n\n  pip install upvest-cli\n\nor alternatively directly from the repository::\n\n  pip install https://github.com/toknapp/upvest-cli\n\nBasic usage\n-----------\n\nThere are three 'layers' of the upvest CLI commands.\n\n- :code:`upvest` the starting point for commands to configure which endpoint to talk to\n- :code:`app` or :code:`user` to decide between using the application (tenant) API or the user (clientele) API and include the necessary credentials\n- commands : such as 'createuser' or 'listassets' or 'createwallet'\n\nFor example:\n\nCreate a user::\n\n  upvest -e https://api.playground.upvest.co/ app -K keyid -S keysecret -P keypassphrase createuser username password\n\nConfiguration file\n------------------\n\nA configuration file will help to fill in most command line arguments, thus avoiding\nhaving to repeat several credentials and ensuring secrets and passwords do not linger\nin your bash history.\n\n:code:`--help` on each subcommand will show which environment variables to set in place\nof commandline arguments, however a configuration file can also be used.\n\nThis will be loaded by default from :code:`upvest.yaml` or :code:`.upvest.yaml` however\nthis can be configured using the :code:`--configfile` or :code:`-c` flag to pass in the path\nto the configuration file.\n\nThe configuration file should take the following form::\n\n  endpoints:\n    my_example_name:\n      base_url: https://api.playground.upvest.co/\n      api_key: ...\n      api_key_secret: ...\n      api_key_passphrase: ...\n      oauth_client_id: ...\n      oauth_client_secret: ...\n\nThis can then be referenced from the command line to switch between\nenvironments or applications as you define them::\n\n  upvest -e my_example_name user -l username -w password listwallets\n\n\nExample Usage\n-------------\n\nHere is a quick guide on how to create a user, create a wallet for that user,\nthen receive and send to and from it. Once you have created an API key at\nhttps://login.upvest.co, and created a configuration file as above, take the\nfollowing steps.\n\nStep 1 - Create a user\n______________________\n\nCreate a single user with the given username and password::\n\n  upvest -e my_example_name app createuser test_username test_password\n\nStep 2 - Create a wallet\n________________________\n\nFirst list the assets available for your application to use::\n\n  upvest -e my_example_name app listassets\n\n  Symbol |                                        Name | ID\n  -------| ------------------------------------------- | ------------------------------------\n     ETH |                             Ether (Ropsten) | deaaa6bf-d944-57fa-8ec4-2dd45d1f5d3f\n      UP |       Upvest Testing ERC20 Faucet (Ropsten) | cf08564b-8fa3-5c88-a29b-029915471249\n\nThen create a wallet for the test user using one or more asset IDs from that list. In this\nexample, creating an Ether Ropsten wallet::\n\n  upvest -e my_example_name user --login test_username --password test_password createwallet deaaa6bf-d944-57fa-8ec4-2dd45d1f5d3f\n\n  2bd5f676-e86c-4cb4-bdaf-4afefffed3f4 0x16edb0e94d0baa4d0a528b501e9dcffbd7752d5d\n\nThis returns firstly the unique ID of the wallet, as well as the public address.\n\nStep 3 - Receive tokens\n_______________________\n\nGo to a public faucet - for example, the `public ropsten faucet\n<https://faucet.ropsten.be>`_ - and send to the address of the user's wallet.\n\nNow, once the transfer has been confirmed, you can see the balances of the\nuser's wallet::\n\n  upvest -e my_example_name user --login test_username --password test_password listwallets\n\n  2bd5f676-e86c-4cb4-bdaf-4afefffed3f4 0x16edb0e94d0baa4d0a528b501e9dcffbd7752d5d\n     deaaa6bf-d944-57fa-8ec4-2dd45d1f5d3f Ether (Ropsten) 1000000000000000000 10^18\n\nThis returns the unique wallet ID followed by the public address, then a balance of\neach of the tokens the wallet can hold. In this case, the balance is 1*10^18.\n\nStep 4 - Sending\n________________\n\nNow that you have a wallet containing some tokens, you can send them to another\nwallet. For example, to send the tokens back to the faucet wallet::\n\n  # example:\n  upvest -e my_example_name user -l test_username -w test_password send <walletid> <assetid> <quantity> <fee> <recipient>\n  # real transaction:\n  upvest -e my_example_name user -l test_username -w test_password send 2bd5f676-e86c-4cb4-bdaf-4afefffed3f4 deaaa6bf-d944-57fa-8ec4-2dd45d1f5d3f 900000000000000000 5000000000 0x687422eea2cb73b5d3e242ba5456b782919afc85\n  Transaction successfully created: 0xa536ffdfcee7d6cf49bd68eb8186089dd7588797daf8b9e8db88a84a732e8cf2\n\nThis will return the transaction ID.\n\n\nAdvanced API usage\n------------------\n\nThe Upvest CLI is meant as a simple tool to test and inspect how the Upvest API\nworks and responds. When you have more complicated applications to build, head\nover to `the Upvest documentation <https://docs.upvest.co>`_ to read more about\nhow the API works. This CLI tool uses `the Upvest Python SDK <https://github.com/toknapp/python-sdk-upvest>`_\nhowever there are tools for other languages too. Happy hacking!\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://docs.upvest.co", "keywords": "upvest blockchain api cli", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "upvest-cli", "package_url": "https://pypi.org/project/upvest-cli/", "platform": "", "project_url": "https://pypi.org/project/upvest-cli/", "project_urls": {"Homepage": "https://docs.upvest.co"}, "release_url": "https://pypi.org/project/upvest-cli/0.5/", "requires_dist": ["upvest (>=0.0.7)", "PyYAML (>=5.1)", "pre-commit (==1.10.5) ; extra == 'dev'", "prospector (==1.1.6.2) ; extra == 'dev'"], "requires_python": "", "summary": "Upvest CLI: CLI for using the Upvest CLI", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Use the Upvest API from the command line!</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install the Upvest CLI, using Python 3.6+:</p>\n<pre>pip install upvest-cli\n</pre>\n<p>or alternatively directly from the repository:</p>\n<pre>pip install https://github.com/toknapp/upvest-cli\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic usage</h2>\n<p>There are three \u2018layers\u2019 of the upvest CLI commands.</p>\n<ul>\n<li><code>upvest</code> the starting point for commands to configure which endpoint to talk to</li>\n<li><code>app</code> or <code>user</code> to decide between using the application (tenant) API or the user (clientele) API and include the necessary credentials</li>\n<li>commands : such as \u2018createuser\u2019 or \u2018listassets\u2019 or \u2018createwallet\u2019</li>\n</ul>\n<p>For example:</p>\n<p>Create a user:</p>\n<pre>upvest -e https://api.playground.upvest.co/ app -K keyid -S keysecret -P keypassphrase createuser username password\n</pre>\n</div>\n<div id=\"configuration-file\">\n<h2>Configuration file</h2>\n<p>A configuration file will help to fill in most command line arguments, thus avoiding\nhaving to repeat several credentials and ensuring secrets and passwords do not linger\nin your bash history.</p>\n<p><code>--help</code> on each subcommand will show which environment variables to set in place\nof commandline arguments, however a configuration file can also be used.</p>\n<p>This will be loaded by default from <code>upvest.yaml</code> or <code>.upvest.yaml</code> however\nthis can be configured using the <code>--configfile</code> or <code>-c</code> flag to pass in the path\nto the configuration file.</p>\n<p>The configuration file should take the following form:</p>\n<pre>endpoints:\n  my_example_name:\n    base_url: https://api.playground.upvest.co/\n    api_key: ...\n    api_key_secret: ...\n    api_key_passphrase: ...\n    oauth_client_id: ...\n    oauth_client_secret: ...\n</pre>\n<p>This can then be referenced from the command line to switch between\nenvironments or applications as you define them:</p>\n<pre>upvest -e my_example_name user -l username -w password listwallets\n</pre>\n</div>\n<div id=\"example-usage\">\n<h2>Example Usage</h2>\n<p>Here is a quick guide on how to create a user, create a wallet for that user,\nthen receive and send to and from it. Once you have created an API key at\n<a href=\"https://login.upvest.co\" rel=\"nofollow\">https://login.upvest.co</a>, and created a configuration file as above, take the\nfollowing steps.</p>\n<div id=\"step-1-create-a-user\">\n<h3>Step 1 - Create a user</h3>\n<p>Create a single user with the given username and password:</p>\n<pre>upvest -e my_example_name app createuser test_username test_password\n</pre>\n</div>\n<div id=\"step-2-create-a-wallet\">\n<h3>Step 2 - Create a wallet</h3>\n<p>First list the assets available for your application to use:</p>\n<pre>upvest -e my_example_name app listassets\n\nSymbol |                                        Name | ID\n-------| ------------------------------------------- | ------------------------------------\n   ETH |                             Ether (Ropsten) | deaaa6bf-d944-57fa-8ec4-2dd45d1f5d3f\n    UP |       Upvest Testing ERC20 Faucet (Ropsten) | cf08564b-8fa3-5c88-a29b-029915471249\n</pre>\n<p>Then create a wallet for the test user using one or more asset IDs from that list. In this\nexample, creating an Ether Ropsten wallet:</p>\n<pre>upvest -e my_example_name user --login test_username --password test_password createwallet deaaa6bf-d944-57fa-8ec4-2dd45d1f5d3f\n\n2bd5f676-e86c-4cb4-bdaf-4afefffed3f4 0x16edb0e94d0baa4d0a528b501e9dcffbd7752d5d\n</pre>\n<p>This returns firstly the unique ID of the wallet, as well as the public address.</p>\n</div>\n<div id=\"step-3-receive-tokens\">\n<h3>Step 3 - Receive tokens</h3>\n<p>Go to a public faucet - for example, the <a href=\"https://faucet.ropsten.be\" rel=\"nofollow\">public ropsten faucet</a> - and send to the address of the user\u2019s wallet.</p>\n<p>Now, once the transfer has been confirmed, you can see the balances of the\nuser\u2019s wallet:</p>\n<pre>upvest -e my_example_name user --login test_username --password test_password listwallets\n\n2bd5f676-e86c-4cb4-bdaf-4afefffed3f4 0x16edb0e94d0baa4d0a528b501e9dcffbd7752d5d\n   deaaa6bf-d944-57fa-8ec4-2dd45d1f5d3f Ether (Ropsten) 1000000000000000000 10^18\n</pre>\n<p>This returns the unique wallet ID followed by the public address, then a balance of\neach of the tokens the wallet can hold. In this case, the balance is 1*10^18.</p>\n</div>\n<div id=\"step-4-sending\">\n<h3>Step 4 - Sending</h3>\n<p>Now that you have a wallet containing some tokens, you can send them to another\nwallet. For example, to send the tokens back to the faucet wallet:</p>\n<pre># example:\nupvest -e my_example_name user -l test_username -w test_password send &lt;walletid&gt; &lt;assetid&gt; &lt;quantity&gt; &lt;fee&gt; &lt;recipient&gt;\n# real transaction:\nupvest -e my_example_name user -l test_username -w test_password send 2bd5f676-e86c-4cb4-bdaf-4afefffed3f4 deaaa6bf-d944-57fa-8ec4-2dd45d1f5d3f 900000000000000000 5000000000 0x687422eea2cb73b5d3e242ba5456b782919afc85\nTransaction successfully created: 0xa536ffdfcee7d6cf49bd68eb8186089dd7588797daf8b9e8db88a84a732e8cf2\n</pre>\n<p>This will return the transaction ID.</p>\n</div>\n</div>\n<div id=\"advanced-api-usage\">\n<h2>Advanced API usage</h2>\n<p>The Upvest CLI is meant as a simple tool to test and inspect how the Upvest API\nworks and responds. When you have more complicated applications to build, head\nover to <a href=\"https://docs.upvest.co\" rel=\"nofollow\">the Upvest documentation</a> to read more about\nhow the API works. This CLI tool uses <a href=\"https://github.com/toknapp/python-sdk-upvest\" rel=\"nofollow\">the Upvest Python SDK</a>\nhowever there are tools for other languages too. Happy hacking!</p>\n</div>\n\n          </div>"}, "last_serial": 6002506, "releases": {"0.1.dev0": [{"comment_text": "", "digests": {"md5": "1da451ec8388b9238b102c506b587eab", "sha256": "62fd6d4cf120fb237b9180b064f3003395447339611e84575aa519713e5ae894"}, "downloads": -1, "filename": "upvest_cli-0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "1da451ec8388b9238b102c506b587eab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7172, "upload_time": "2019-07-30T13:37:33", "upload_time_iso_8601": "2019-07-30T13:37:33.089281Z", "url": "https://files.pythonhosted.org/packages/fb/56/e0ae7f92c6507de6e082a5a168a402a6f22569e18589503190382fc40d64/upvest_cli-0.1.dev0-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "03ffd80c859fed0569f78505275bd88a", "sha256": "1874a4298f77bacec33866fcc4539ea2f0fd0a261ee6c587fd8aa35e57b5c380"}, "downloads": -1, "filename": "upvest_cli-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "03ffd80c859fed0569f78505275bd88a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8649, "upload_time": "2019-08-06T07:57:37", "upload_time_iso_8601": "2019-08-06T07:57:37.096420Z", "url": "https://files.pythonhosted.org/packages/13/4c/d4063f447853f73998c6cbb4a5acbd1da4aeff0de7672491c888151ceff3/upvest_cli-0.2-py3-none-any.whl", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "5cc51284d4587769c943bb0fc877f1a0", "sha256": "7736010abe80e0ad7081a5cca4a2ac345802b82388e741afa527460ce05c7e1c"}, "downloads": -1, "filename": "upvest_cli-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5cc51284d4587769c943bb0fc877f1a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8669, "upload_time": "2019-08-07T06:38:34", "upload_time_iso_8601": "2019-08-07T06:38:34.503622Z", "url": "https://files.pythonhosted.org/packages/5e/a3/d192d79933aa3ea8dc198d1332e9039b6428122aa7d0b506477ac9a2f8f6/upvest_cli-0.3-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "d4d80b8e4a0780ef0f4064420100368e", "sha256": "41d2e36a5be0e251567bc639b988aa39bf75d6fe360cfdbba53965123db8df02"}, "downloads": -1, "filename": "upvest_cli-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "d4d80b8e4a0780ef0f4064420100368e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8746, "upload_time": "2019-08-20T13:13:01", "upload_time_iso_8601": "2019-08-20T13:13:01.508751Z", "url": "https://files.pythonhosted.org/packages/d1/80/83f347ac53e2b0a173db3e000d2d84a22de7275b3985a75ba6e7bf1057a8/upvest_cli-0.3.1-py3-none-any.whl", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "48726421bc0dee74fd56292e7bf11481", "sha256": "3ec087a782cd5b12ac25fb25a404345e7b651405da03e8421b8a377ac341cdb9"}, "downloads": -1, "filename": "upvest_cli-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "48726421bc0dee74fd56292e7bf11481", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9078, "upload_time": "2019-09-09T09:05:04", "upload_time_iso_8601": "2019-09-09T09:05:04.110777Z", "url": "https://files.pythonhosted.org/packages/56/76/3699b5611b8fbe5a1c8f677ca540b22513ce84f89d62e80dbc92125f330d/upvest_cli-0.4-py3-none-any.whl", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "fa3b4c1847e3978e54fff345c68235b1", "sha256": "de3139df9c5c18b62690f460ca27ad04be5e4c3965e7b6674317d46c46957bd3"}, "downloads": -1, "filename": "upvest_cli-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fa3b4c1847e3978e54fff345c68235b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9091, "upload_time": "2019-10-20T09:59:53", "upload_time_iso_8601": "2019-10-20T09:59:53.984434Z", "url": "https://files.pythonhosted.org/packages/68/55/7b4a074adeb9bcb986d71e6c2a963a29e5a5f54debe7031ce2ea69a19b00/upvest_cli-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c50e65755d41d8a3e8ea0487bd8deabb", "sha256": "e7861ca972783a89bc005a8a676ce9aa8922951fea1a1606cef26ed57c57ac76"}, "downloads": -1, "filename": "upvest-cli-0.5.tar.gz", "has_sig": false, "md5_digest": "c50e65755d41d8a3e8ea0487bd8deabb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8749, "upload_time": "2019-10-20T09:59:56", "upload_time_iso_8601": "2019-10-20T09:59:56.037243Z", "url": "https://files.pythonhosted.org/packages/96/9e/79e65c02f197e3d2b55b3792345dce25acea3bca85d0747b948f4b310abd/upvest-cli-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fa3b4c1847e3978e54fff345c68235b1", "sha256": "de3139df9c5c18b62690f460ca27ad04be5e4c3965e7b6674317d46c46957bd3"}, "downloads": -1, "filename": "upvest_cli-0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "fa3b4c1847e3978e54fff345c68235b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9091, "upload_time": "2019-10-20T09:59:53", "upload_time_iso_8601": "2019-10-20T09:59:53.984434Z", "url": "https://files.pythonhosted.org/packages/68/55/7b4a074adeb9bcb986d71e6c2a963a29e5a5f54debe7031ce2ea69a19b00/upvest_cli-0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c50e65755d41d8a3e8ea0487bd8deabb", "sha256": "e7861ca972783a89bc005a8a676ce9aa8922951fea1a1606cef26ed57c57ac76"}, "downloads": -1, "filename": "upvest-cli-0.5.tar.gz", "has_sig": false, "md5_digest": "c50e65755d41d8a3e8ea0487bd8deabb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8749, "upload_time": "2019-10-20T09:59:56", "upload_time_iso_8601": "2019-10-20T09:59:56.037243Z", "url": "https://files.pythonhosted.org/packages/96/9e/79e65c02f197e3d2b55b3792345dce25acea3bca85d0747b948f4b310abd/upvest-cli-0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:42 2020"}