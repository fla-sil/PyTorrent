{"info": {"author": "Ozzy", "author_email": "cfhamlet@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# os-netloc-rule\n\n[![Build Status](https://www.travis-ci.org/cfhamlet/os-netloc-rule.svg?branch=master)](https://www.travis-ci.org/cfhamlet/os-netloc-rule)\n[![codecov](https://codecov.io/gh/cfhamlet/os-netloc-rule/branch/master/graph/badge.svg)](https://codecov.io/gh/cfhamlet/os-netloc-rule)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/os-netloc-rule.svg)](https://pypi.python.org/pypi/os-netloc-rule)\n[![PyPI](https://img.shields.io/pypi/v/os-netloc-rule.svg)](https://pypi.python.org/pypi/os-netloc-rule)\n\nA common library for netloc rule use case.\n\n\nNetloc match is a very common and useful operation on processing URL. For example, netloc blacklist is a series rules of netloc with *ALLOWED* or *DISALLOWED*:\n\n```\nabc.example.com ALLOWED\n.example.com DISALLOWED\n```\n\nYou can skip processing ``http://www.example.com/001.html`` becase it match the rule ``.example.com DISALLOWED``.\n\n\n\n## Install\n\n```\npip install os-netloc-rule\n```\n\n\n\n## Usage\n\n* we have different  implementations of matcher. From the benchmark , ``DictMatcher`` is much more quickly and memory efficient\n\n    * ``TreeMatcher``, based on prefix tree\n    \n        ```\n        from os_netloc_rule import TreeMatcher as Matcher\n        ```\n    \n    * ``DictMatcher``, based on dict\n\n        ```\n        from os_netloc_rule import DictMatcher as Matcher\n        ```\n\n* load rule\n\n    ```\n    from os_netloc_rule import DictMatcher as Matcher\n    \n    rules = [\n        ('www.example.com', 1),\n        ('abc.example.com', 2),\n        ('abc.example.com:8080', 3),\n    ]\n    \n    matcher = Matcher()\n    for netloc, rule in rules:\n        matcher.load(netloc, rule)\n    ```\n\n* match rule\n\n    ```\n    matcher.match('www.example.com')\n    matcher.match('abc.example.com:8080')\n    ```\n\n* if there are same netloc with different rule,  the latter covers the former by default. But you can custom your own ``cmp`` function when loading rules\n\n    ```\n    def cmp(former, latter):\n        return former if former > latter else latter\n        \n    matcher.load(netloc, rule, cmp=cmp)\n    ```\n\n* dump rules\n\n    ```\n    for netloc, rule in matcher.dump():\n        pass\n    ```\n\n* delete rule\n\n    ```\n    delete, rule = matcher.delete('www.example.com')\n    ```\n\n## Benchmark\n\n``TreeMatcher``:\n\n| python version | operation |   memory   | speed  |\n| :------------: | :-------: | :--------: | :----: |\n|     2.7.14     |   load    | 100w, 380M | 91k/s  |\n|     2.7.14     |   match   |     -      | 118k/s |\n|     3.6.4      |   load    | 100w, 300M | 96k/s  |\n|     3.6.4      |   match   |     -      | 123k/s |\n|   pypy-5.7.1   |   load    | 100w, 251M | 283k/s |\n|   pypy-5.7.1   |   match   |     -      | 529k/s |\n| pypy3.6-7.2.0  |   load    | 100w, 305M | 265k/s |\n| pypy3.6-7.2.0  |   match   |     -      | 473k/s |\n\n``DictMatcher``:\n\n| python version | operation |   memory   |  speed  |\n| :------------: | :-------: | :--------: | :-----: |\n|     2.7.14     |   load    | 100w, 120M | 650k/s  |\n|     2.7.14     |   match   |     -      | 417k/s  |\n|     3.6.4      |   load    | 100w, 100M | 578k/s  |\n|     3.6.4      |   match   |     -      | 389k/s  |\n|   pypy-5.7.1   |   load    | 100w, 75M  | 1.14m/s |\n|   pypy-5.7.1   |   match   |     -      | 2.4m/s  |\n| pypy3.6-7.2.0  |   load    | 100w, 180M | 1.1m/s  |\n| pypy3.6-7.2.0  |   match   |     -      |  2m/s   |\n\n\n## Unit Tests\n\n```\ntox\n```\n\n## License\n\nMIT licensed.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cfhamlet/os-netloc-rule", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "os-netloc-rule", "package_url": "https://pypi.org/project/os-netloc-rule/", "platform": "", "project_url": "https://pypi.org/project/os-netloc-rule/", "project_urls": {"Homepage": "https://github.com/cfhamlet/os-netloc-rule"}, "release_url": "https://pypi.org/project/os-netloc-rule/0.2/", "requires_dist": null, "requires_python": ">=2.7", "summary": "A common library for netloc rule use case.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>os-netloc-rule</h1>\n<p><a href=\"https://www.travis-ci.org/cfhamlet/os-netloc-rule\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/61dd4b323fbb36f99c31c4c861364c4d1b0a4873/68747470733a2f2f7777772e7472617669732d63692e6f72672f636668616d6c65742f6f732d6e65746c6f632d72756c652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/cfhamlet/os-netloc-rule\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5fdcab451a2fc16cff4bf46d3beef9dd89b85e81/68747470733a2f2f636f6465636f762e696f2f67682f636668616d6c65742f6f732d6e65746c6f632d72756c652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/os-netloc-rule\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3595d9a5af3bb4ca6a0053684d171f6a9b8f588b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6f732d6e65746c6f632d72756c652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/os-netloc-rule\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36675022d4868a978ff8d286fa0de91df743ea91/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6f732d6e65746c6f632d72756c652e737667\"></a></p>\n<p>A common library for netloc rule use case.</p>\n<p>Netloc match is a very common and useful operation on processing URL. For example, netloc blacklist is a series rules of netloc with <em>ALLOWED</em> or <em>DISALLOWED</em>:</p>\n<pre><code>abc.example.com ALLOWED\n.example.com DISALLOWED\n</code></pre>\n<p>You can skip processing <code>http://www.example.com/001.html</code> becase it match the rule <code>.example.com DISALLOWED</code>.</p>\n<h2>Install</h2>\n<pre><code>pip install os-netloc-rule\n</code></pre>\n<h2>Usage</h2>\n<ul>\n<li>\n<p>we have different  implementations of matcher. From the benchmark , <code>DictMatcher</code> is much more quickly and memory efficient</p>\n<ul>\n<li>\n<p><code>TreeMatcher</code>, based on prefix tree</p>\n<pre><code>from os_netloc_rule import TreeMatcher as Matcher\n</code></pre>\n</li>\n<li>\n<p><code>DictMatcher</code>, based on dict</p>\n<pre><code>from os_netloc_rule import DictMatcher as Matcher\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>load rule</p>\n<pre><code>from os_netloc_rule import DictMatcher as Matcher\n\nrules = [\n    ('www.example.com', 1),\n    ('abc.example.com', 2),\n    ('abc.example.com:8080', 3),\n]\n\nmatcher = Matcher()\nfor netloc, rule in rules:\n    matcher.load(netloc, rule)\n</code></pre>\n</li>\n<li>\n<p>match rule</p>\n<pre><code>matcher.match('www.example.com')\nmatcher.match('abc.example.com:8080')\n</code></pre>\n</li>\n<li>\n<p>if there are same netloc with different rule,  the latter covers the former by default. But you can custom your own <code>cmp</code> function when loading rules</p>\n<pre><code>def cmp(former, latter):\n    return former if former &gt; latter else latter\n    \nmatcher.load(netloc, rule, cmp=cmp)\n</code></pre>\n</li>\n<li>\n<p>dump rules</p>\n<pre><code>for netloc, rule in matcher.dump():\n    pass\n</code></pre>\n</li>\n<li>\n<p>delete rule</p>\n<pre><code>delete, rule = matcher.delete('www.example.com')\n</code></pre>\n</li>\n</ul>\n<h2>Benchmark</h2>\n<p><code>TreeMatcher</code>:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">python version</th>\n<th align=\"center\">operation</th>\n<th align=\"center\">memory</th>\n<th align=\"center\">speed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">2.7.14</td>\n<td align=\"center\">load</td>\n<td align=\"center\">100w, 380M</td>\n<td align=\"center\">91k/s</td>\n</tr>\n<tr>\n<td align=\"center\">2.7.14</td>\n<td align=\"center\">match</td>\n<td align=\"center\">-</td>\n<td align=\"center\">118k/s</td>\n</tr>\n<tr>\n<td align=\"center\">3.6.4</td>\n<td align=\"center\">load</td>\n<td align=\"center\">100w, 300M</td>\n<td align=\"center\">96k/s</td>\n</tr>\n<tr>\n<td align=\"center\">3.6.4</td>\n<td align=\"center\">match</td>\n<td align=\"center\">-</td>\n<td align=\"center\">123k/s</td>\n</tr>\n<tr>\n<td align=\"center\">pypy-5.7.1</td>\n<td align=\"center\">load</td>\n<td align=\"center\">100w, 251M</td>\n<td align=\"center\">283k/s</td>\n</tr>\n<tr>\n<td align=\"center\">pypy-5.7.1</td>\n<td align=\"center\">match</td>\n<td align=\"center\">-</td>\n<td align=\"center\">529k/s</td>\n</tr>\n<tr>\n<td align=\"center\">pypy3.6-7.2.0</td>\n<td align=\"center\">load</td>\n<td align=\"center\">100w, 305M</td>\n<td align=\"center\">265k/s</td>\n</tr>\n<tr>\n<td align=\"center\">pypy3.6-7.2.0</td>\n<td align=\"center\">match</td>\n<td align=\"center\">-</td>\n<td align=\"center\">473k/s</td>\n</tr></tbody></table>\n<p><code>DictMatcher</code>:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">python version</th>\n<th align=\"center\">operation</th>\n<th align=\"center\">memory</th>\n<th align=\"center\">speed</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">2.7.14</td>\n<td align=\"center\">load</td>\n<td align=\"center\">100w, 120M</td>\n<td align=\"center\">650k/s</td>\n</tr>\n<tr>\n<td align=\"center\">2.7.14</td>\n<td align=\"center\">match</td>\n<td align=\"center\">-</td>\n<td align=\"center\">417k/s</td>\n</tr>\n<tr>\n<td align=\"center\">3.6.4</td>\n<td align=\"center\">load</td>\n<td align=\"center\">100w, 100M</td>\n<td align=\"center\">578k/s</td>\n</tr>\n<tr>\n<td align=\"center\">3.6.4</td>\n<td align=\"center\">match</td>\n<td align=\"center\">-</td>\n<td align=\"center\">389k/s</td>\n</tr>\n<tr>\n<td align=\"center\">pypy-5.7.1</td>\n<td align=\"center\">load</td>\n<td align=\"center\">100w, 75M</td>\n<td align=\"center\">1.14m/s</td>\n</tr>\n<tr>\n<td align=\"center\">pypy-5.7.1</td>\n<td align=\"center\">match</td>\n<td align=\"center\">-</td>\n<td align=\"center\">2.4m/s</td>\n</tr>\n<tr>\n<td align=\"center\">pypy3.6-7.2.0</td>\n<td align=\"center\">load</td>\n<td align=\"center\">100w, 180M</td>\n<td align=\"center\">1.1m/s</td>\n</tr>\n<tr>\n<td align=\"center\">pypy3.6-7.2.0</td>\n<td align=\"center\">match</td>\n<td align=\"center\">-</td>\n<td align=\"center\">2m/s</td>\n</tr></tbody></table>\n<h2>Unit Tests</h2>\n<pre><code>tox\n</code></pre>\n<h2>License</h2>\n<p>MIT licensed.</p>\n\n          </div>"}, "last_serial": 6128605, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "1ff36ff5e90d20582790a600e99bd5fa", "sha256": "4ca0d438ec581dbc9b97ca19a11cd19ed4d462dcda30eaea62adb50f866a6576"}, "downloads": -1, "filename": "os-netloc-rule-0.0.1.tar.gz", "has_sig": false, "md5_digest": "1ff36ff5e90d20582790a600e99bd5fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 5479, "upload_time": "2019-11-11T09:22:16", "upload_time_iso_8601": "2019-11-11T09:22:16.563140Z", "url": "https://files.pythonhosted.org/packages/67/28/055feadcb2539c2df9942a46c6fe3138b70f49e036feed5b8e1d08a9015f/os-netloc-rule-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a47f48530d3edabc388eddfaf9615ccd", "sha256": "24bb35f51375fba6b4d93f98d2e1e42a4e6847eaf02a7a1de9228cdcee0888c3"}, "downloads": -1, "filename": "os-netloc-rule-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a47f48530d3edabc388eddfaf9615ccd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6626, "upload_time": "2019-11-12T09:23:19", "upload_time_iso_8601": "2019-11-12T09:23:19.716162Z", "url": "https://files.pythonhosted.org/packages/2a/8a/30dca03a8e2e24a5a0170cf5e16890adc928cf067f3c14e386b5e9457237/os-netloc-rule-0.0.2.tar.gz", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "5379e8ec77cd95e4c748b45d8c8df550", "sha256": "bc9599e089513faa3b16eabf511f025dfc0ca440888f5e17ad280bcb50effac9"}, "downloads": -1, "filename": "os-netloc-rule-0.1.tar.gz", "has_sig": false, "md5_digest": "5379e8ec77cd95e4c748b45d8c8df550", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6632, "upload_time": "2019-11-12T09:54:47", "upload_time_iso_8601": "2019-11-12T09:54:47.462278Z", "url": "https://files.pythonhosted.org/packages/f9/c2/3a17c2e73d030e4a251522c9080885cad90ed9847a67a7332a0b002ff180/os-netloc-rule-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "16a45e6171aa0f03e7edda1d4e6d3b20", "sha256": "58ea69f31fd71eb50f3ce816665d3e6898329572db636f3b98c2a12948512fad"}, "downloads": -1, "filename": "os-netloc-rule-0.2.tar.gz", "has_sig": false, "md5_digest": "16a45e6171aa0f03e7edda1d4e6d3b20", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 8296, "upload_time": "2019-11-13T08:08:17", "upload_time_iso_8601": "2019-11-13T08:08:17.402443Z", "url": "https://files.pythonhosted.org/packages/dd/9d/223a235ac4a29c703207d7bba4fb08fd94dd2e7f617b502d929d9e8b1221/os-netloc-rule-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16a45e6171aa0f03e7edda1d4e6d3b20", "sha256": "58ea69f31fd71eb50f3ce816665d3e6898329572db636f3b98c2a12948512fad"}, "downloads": -1, "filename": "os-netloc-rule-0.2.tar.gz", "has_sig": false, "md5_digest": "16a45e6171aa0f03e7edda1d4e6d3b20", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 8296, "upload_time": "2019-11-13T08:08:17", "upload_time_iso_8601": "2019-11-13T08:08:17.402443Z", "url": "https://files.pythonhosted.org/packages/dd/9d/223a235ac4a29c703207d7bba4fb08fd94dd2e7f617b502d929d9e8b1221/os-netloc-rule-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:05 2020"}