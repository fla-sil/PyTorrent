{"info": {"author": "Nico Bosshard", "author_email": "nico@bosshome.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## How to install:\n### Put dumped prod.keys to %userprofile%/.switch, install python, execute \"pip install nsz\" and use \"nsz\" like every other cmd command.\nPython 3.6 or later is required. Python 3.8 and later requires Buildtools for Visual Studio 2019 from https://visualstudio.microsoft.com/de/downloads/ on Windows.\n\n### or just use windows portable builds.<br/>\n\nTo manually install dependencies use:<br/>\npip install -r requirements.txt\n\n## How to Update\npip install nsz --upgrade<br/>\nor download the latest windows portable build.\n\n## NSZ\nNSZ files are not a real format, they are functionally identical to NSP files. Their sole purpose to alert the user that it contains compressed NCZ files. NCZ files can be mixed with NCA files in the same container.\n\nNSC_Builder supports compressing NSP to NSZ, and decompressing NSZ to NSP. The sample scripts located here are just examples of how the format works.\n\nNSC_Builder can be downloaded at https://github.com/julesontheroad/NSC_BUILDER\n\n## XCZ\nXCZ files are not a real format, they are functionally identical to XCI files. Their sole purpose to alert the user that it contains compressed NCZ files. NCZ files can be mixed with NCA files in the same container.\n\n## NCZ\nThese are compressed NCA files. The NCA's are decrypted, and then compressed using zStandard. Only NCA's with a 0x4000 byte header are supported (CNMT nca's are not supported).\n\nThe first 0x4000 bytes of a NCZ file is exactly the same as the original NCA (and still encrypted).\n\nAt 0x4000, there is the variable sized NCZ Header. It contains a list of sections which tell the decompressor how to re-encrypt the NCA data after decompression. It can also contain an optional block compression header allowing random read access.\n\nAll of the information in the header can be derived from the original NCA + Ticket, however it is provided preparsed to make decompression as easy as possible for third parties.\n\nDirectly after the NCZ header, the zStandard stream begins and ends at EOF. The stream is decompressed to offset 0x4000. If block compression is used the stream is splatted into independent blocks and can be decompressed as shown in https://github.com/nicoboss/nsz/blob/master/nsz/BlockDecompressorReader.py\n\n```python\nclass Section:\n\tdef __init__(self, f):\n\t\tself.magic = f.read(8) # b'NCZSECTN'\n\t\tself.offset = f.readInt64()\n\t\tself.size = f.readInt64()\n\t\tself.cryptoType = f.readInt64()\n\t\tf.readInt64() # padding\n\t\tself.cryptoKey = f.read(16)\n\t\tself.cryptoCounter = f.read(16)\n\nclass Block:\n\tdef __init__(self, f):\n\t\tself.magic = f.read(8) # b'NCZBLOCK'\n\t\tself.version = f.readInt8()\n\t\tself.type = f.readInt8()\n\t\tself.unused = f.readInt8()\n\t\tself.blockSizeExponent = f.readInt8()\n\t\tself.numberOfBlocks = f.readInt32()\n\t\tself.decompressedSize = f.readInt64()\n\t\tself.compressedBlockSizeList = []\n\t\tfor i in range(self.numberOfBlocks):\n\t\t\tself.compressedBlockSizeList.append(f.readInt32())\n\nnspf.seek(0x4000)\nsectionCount = nspf.readInt64()\nfor i in range(sectionCount):\n\tsections.append(Section(nspf))\n\nif blockCompression:\n\tBlockHeader = Block(nspf)\n```\n\n## Compressor script\n\nRequires latest hactool compatible prod.keys at<br/>\nWindows: %userprofile%\\.switch\\ (enter .switch. as foldername to get a folder named .switch)<br/>\nLinux: $HOME/.switch/<br/>\nor keys.txt at the location of nsz.py/nsz.exe<br/>\nPlease dump your keys using https://github.com/shchmue/Lockpick_RCM/releases<br/>\nAlways keep your keys up to date as otherwise newer games can't be decrypted anymore.<br/>\n\nExample usage:<br/>\nnsz --level 18 -C title1.nsp title2.nsp title3.nsp<br/>\nwill generate title1.nsz title2.nsz title3.nsz<br/>\n\nThis tool was only tested with base games, updates and DLCs.<br/>\n\n## Usage\n```\nnsz.py --help\nusage: nsz.py [-h] [-C] [-D] [-l LEVEL] [-B] [-S] [-s BS] [-V] [-p]\n              [-t THREADS] [-m MULTI] [-o [OUTPUT]] [-w] [-r] [--rm-source]\n              [-i] [--depth DEPTH] [-x] [--extractregex EXTRACTREGEX]\n              [--titlekeys] [-c CREATE]\n              [file [file ...]]\n\npositional arguments:\n  file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C                    Compress NSP/XCI\n  -D                    Decompress NSZ/XCZ/NCZ\n  -l LEVEL, --level LEVEL\n                        Compression Level: Trade-off between compression speed\n                        and compression ratio. Default: 18, Max: 22\n  -B, --block           Use block compression option. This mode allows highly\n                        multi-threaded compression/decompression with random\n                        read access allowing compressed games to be played\n                        without decompression in the future however this comes\n                        with a slightly lower compression ratio cost. This is\n                        the default option for XCZ.\n  -S, --solid           Use solid compression option. Slightly higher\n                        compression ratio but won't allow for random read\n                        access. File compressed this way will never be\n                        mountable (have to be installed or decompressed first\n                        to run). This is the default option for NSZ.\n  -s BS, --bs BS        Block Size for random read access 2^x while x between\n                        14 and 32. Default: 20 => 1 MB\n  -V, --verify          Verifies files after compression raising an unhandled\n                        exception on hash mismatch and verify existing NSP and\n                        NSZ files when given as parameter\n  -p, --parseCnmt       Extract TitleId/Version from Cnmt if this information\n                        cannot be obtained from the filename. Required for\n                        skipping/overwriting existing files and --rm-old-\n                        version to work properly if some not every file is\n                        named properly. Supported filenames:\n                        *TitleID*[vVersion]*\n  -t THREADS, --threads THREADS\n                        Number of threads to compress with. Numbers < 1\n                        corresponds to the number of logical CPU cores for\n                        block compression and 3 for solid compression\n  -m MULTI, --multi MULTI\n                        Executes multiple compression tasks in parallel. Take\n                        a look at available RAM especially if compression\n                        level is over 18.\n  -o [OUTPUT], --output [OUTPUT]\n                        Directory to save the output NSZ files\n  -w, --overwrite       Continues even if there already is a file with the\n                        same name or title id inside the output directory\n  -r, --rm-old-version  Removes older versions if found\n  --rm-source           Deletes source file/s after compressing/decompressing.\n                        It's recommended to only use this in combination with\n                        --verify\n  -i, --info            Show info about title or file\n  --depth DEPTH         Max depth for file info and extraction\n  -x, --extract         Extract a NSP/XCI/NSZ/XCZ\n  --extractregex EXTRACTREGEX\n                        Regex specifying which files inside the container\n                        should be extracted\n  --titlekeys           Extracts titlekeys from your NSP/NSZ files and adds\n                        missing keys to ./titlekeys.txt and JSON files inside\n                        ./titledb/ (obtainable from\n                        https://github.com/blawar/titledb). Titlekeys can be\n                        used to unlock updates using NUT OG (OG fork\n                        obtainable from https://github.com/plato79/nut). There\n                        is currently no publicly known way of optioning NSX\n                        files. To MitM: Apply disable_ca_verification &\n                        disable_browser_ca_verification patches, use your\n                        device's nx_tls_client_cert.pfx (Password: switch,\n                        Install to OS and import for Fiddler or import into\n                        Charles/OWASP ZAP). Use it for aauth-\n                        lp1.ndas.srv.nintendo.net:443, dauth-\n                        lp1.ndas.srv.nintendo.net:443 and\n                        app-b01-lp1.npns.srv.nintendo.net:443. Try with your\n                        WiiU first as there you won't get banned if you mess\n                        up.\n  -c CREATE, --create CREATE\n                        create / pack a NSP\n```\n\n## References\nNSZ pip package: https://pypi.org/project/nsz/<br/>\nForum thread: https://gbatemp.net/threads/nsz-homebrew-compatible-nsp-xci-compressor-decompressor.550556/\n\n## Credits\n\nSciresM for his hardware crypto functions; the blazing install speeds (50 MB/sec +) achieved here would not be possible without this.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nicoboss/nsz", "keywords": "nsz,xcz,ncz,nsp,xci,nca,Switch", "license": "", "maintainer": "Nico Bosshard", "maintainer_email": "nico@bosshome.ch", "name": "nsz", "package_url": "https://pypi.org/project/nsz/", "platform": "", "project_url": "https://pypi.org/project/nsz/", "project_urls": {"Homepage": "https://github.com/nicoboss/nsz"}, "release_url": "https://pypi.org/project/nsz/3.1.1/", "requires_dist": ["pycryptodome (>=3.9.0)", "zstandard", "enlighten", "kivy (==1.11.1)", "pygame ; platform_system == \"Linux\"", "kivy-deps.sdl2 (==0.1.22) ; platform_system == \"Windows\"", "kivy-deps.glew (==0.1.12) ; platform_system == \"Windows\""], "requires_python": ">=3.6", "summary": "NSZ - Homebrew compatible NSP/XCI compressor/decompressor", "version": "3.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>How to install:</h2>\n<h3>Put dumped prod.keys to %userprofile%/.switch, install python, execute \"pip install nsz\" and use \"nsz\" like every other cmd command.</h3>\n<p>Python 3.6 or later is required. Python 3.8 and later requires Buildtools for Visual Studio 2019 from <a href=\"https://visualstudio.microsoft.com/de/downloads/\" rel=\"nofollow\">https://visualstudio.microsoft.com/de/downloads/</a> on Windows.</p>\n<h3>or just use windows portable builds.<br></h3>\n<p>To manually install dependencies use:<br>\npip install -r requirements.txt</p>\n<h2>How to Update</h2>\n<p>pip install nsz --upgrade<br>\nor download the latest windows portable build.</p>\n<h2>NSZ</h2>\n<p>NSZ files are not a real format, they are functionally identical to NSP files. Their sole purpose to alert the user that it contains compressed NCZ files. NCZ files can be mixed with NCA files in the same container.</p>\n<p>NSC_Builder supports compressing NSP to NSZ, and decompressing NSZ to NSP. The sample scripts located here are just examples of how the format works.</p>\n<p>NSC_Builder can be downloaded at <a href=\"https://github.com/julesontheroad/NSC_BUILDER\" rel=\"nofollow\">https://github.com/julesontheroad/NSC_BUILDER</a></p>\n<h2>XCZ</h2>\n<p>XCZ files are not a real format, they are functionally identical to XCI files. Their sole purpose to alert the user that it contains compressed NCZ files. NCZ files can be mixed with NCA files in the same container.</p>\n<h2>NCZ</h2>\n<p>These are compressed NCA files. The NCA's are decrypted, and then compressed using zStandard. Only NCA's with a 0x4000 byte header are supported (CNMT nca's are not supported).</p>\n<p>The first 0x4000 bytes of a NCZ file is exactly the same as the original NCA (and still encrypted).</p>\n<p>At 0x4000, there is the variable sized NCZ Header. It contains a list of sections which tell the decompressor how to re-encrypt the NCA data after decompression. It can also contain an optional block compression header allowing random read access.</p>\n<p>All of the information in the header can be derived from the original NCA + Ticket, however it is provided preparsed to make decompression as easy as possible for third parties.</p>\n<p>Directly after the NCZ header, the zStandard stream begins and ends at EOF. The stream is decompressed to offset 0x4000. If block compression is used the stream is splatted into independent blocks and can be decompressed as shown in <a href=\"https://github.com/nicoboss/nsz/blob/master/nsz/BlockDecompressorReader.py\" rel=\"nofollow\">https://github.com/nicoboss/nsz/blob/master/nsz/BlockDecompressorReader.py</a></p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Section</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">magic</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\"># b'NCZSECTN'</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt64</span><span class=\"p\">()</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt64</span><span class=\"p\">()</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cryptoType</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt64</span><span class=\"p\">()</span>\n\t\t<span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt64</span><span class=\"p\">()</span> <span class=\"c1\"># padding</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cryptoKey</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cryptoCounter</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Block</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">magic</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"c1\"># b'NCZBLOCK'</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt8</span><span class=\"p\">()</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt8</span><span class=\"p\">()</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unused</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt8</span><span class=\"p\">()</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">blockSizeExponent</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt8</span><span class=\"p\">()</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numberOfBlocks</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt32</span><span class=\"p\">()</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decompressedSize</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt64</span><span class=\"p\">()</span>\n\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compressedBlockSizeList</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t\t<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">numberOfBlocks</span><span class=\"p\">):</span>\n\t\t\t<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compressedBlockSizeList</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">readInt32</span><span class=\"p\">())</span>\n\n<span class=\"n\">nspf</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mh\">0x4000</span><span class=\"p\">)</span>\n<span class=\"n\">sectionCount</span> <span class=\"o\">=</span> <span class=\"n\">nspf</span><span class=\"o\">.</span><span class=\"n\">readInt64</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">sectionCount</span><span class=\"p\">):</span>\n\t<span class=\"n\">sections</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Section</span><span class=\"p\">(</span><span class=\"n\">nspf</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">blockCompression</span><span class=\"p\">:</span>\n\t<span class=\"n\">BlockHeader</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"n\">nspf</span><span class=\"p\">)</span>\n</pre>\n<h2>Compressor script</h2>\n<p>Requires latest hactool compatible prod.keys at<br>\nWindows: %userprofile%.switch\\ (enter .switch. as foldername to get a folder named .switch)<br>\nLinux: $HOME/.switch/<br>\nor keys.txt at the location of nsz.py/nsz.exe<br>\nPlease dump your keys using <a href=\"https://github.com/shchmue/Lockpick_RCM/releases\" rel=\"nofollow\">https://github.com/shchmue/Lockpick_RCM/releases</a><br>\nAlways keep your keys up to date as otherwise newer games can't be decrypted anymore.<br></p>\n<p>Example usage:<br>\nnsz --level 18 -C title1.nsp title2.nsp title3.nsp<br>\nwill generate title1.nsz title2.nsz title3.nsz<br></p>\n<p>This tool was only tested with base games, updates and DLCs.<br></p>\n<h2>Usage</h2>\n<pre><code>nsz.py --help\nusage: nsz.py [-h] [-C] [-D] [-l LEVEL] [-B] [-S] [-s BS] [-V] [-p]\n              [-t THREADS] [-m MULTI] [-o [OUTPUT]] [-w] [-r] [--rm-source]\n              [-i] [--depth DEPTH] [-x] [--extractregex EXTRACTREGEX]\n              [--titlekeys] [-c CREATE]\n              [file [file ...]]\n\npositional arguments:\n  file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -C                    Compress NSP/XCI\n  -D                    Decompress NSZ/XCZ/NCZ\n  -l LEVEL, --level LEVEL\n                        Compression Level: Trade-off between compression speed\n                        and compression ratio. Default: 18, Max: 22\n  -B, --block           Use block compression option. This mode allows highly\n                        multi-threaded compression/decompression with random\n                        read access allowing compressed games to be played\n                        without decompression in the future however this comes\n                        with a slightly lower compression ratio cost. This is\n                        the default option for XCZ.\n  -S, --solid           Use solid compression option. Slightly higher\n                        compression ratio but won't allow for random read\n                        access. File compressed this way will never be\n                        mountable (have to be installed or decompressed first\n                        to run). This is the default option for NSZ.\n  -s BS, --bs BS        Block Size for random read access 2^x while x between\n                        14 and 32. Default: 20 =&gt; 1 MB\n  -V, --verify          Verifies files after compression raising an unhandled\n                        exception on hash mismatch and verify existing NSP and\n                        NSZ files when given as parameter\n  -p, --parseCnmt       Extract TitleId/Version from Cnmt if this information\n                        cannot be obtained from the filename. Required for\n                        skipping/overwriting existing files and --rm-old-\n                        version to work properly if some not every file is\n                        named properly. Supported filenames:\n                        *TitleID*[vVersion]*\n  -t THREADS, --threads THREADS\n                        Number of threads to compress with. Numbers &lt; 1\n                        corresponds to the number of logical CPU cores for\n                        block compression and 3 for solid compression\n  -m MULTI, --multi MULTI\n                        Executes multiple compression tasks in parallel. Take\n                        a look at available RAM especially if compression\n                        level is over 18.\n  -o [OUTPUT], --output [OUTPUT]\n                        Directory to save the output NSZ files\n  -w, --overwrite       Continues even if there already is a file with the\n                        same name or title id inside the output directory\n  -r, --rm-old-version  Removes older versions if found\n  --rm-source           Deletes source file/s after compressing/decompressing.\n                        It's recommended to only use this in combination with\n                        --verify\n  -i, --info            Show info about title or file\n  --depth DEPTH         Max depth for file info and extraction\n  -x, --extract         Extract a NSP/XCI/NSZ/XCZ\n  --extractregex EXTRACTREGEX\n                        Regex specifying which files inside the container\n                        should be extracted\n  --titlekeys           Extracts titlekeys from your NSP/NSZ files and adds\n                        missing keys to ./titlekeys.txt and JSON files inside\n                        ./titledb/ (obtainable from\n                        https://github.com/blawar/titledb). Titlekeys can be\n                        used to unlock updates using NUT OG (OG fork\n                        obtainable from https://github.com/plato79/nut). There\n                        is currently no publicly known way of optioning NSX\n                        files. To MitM: Apply disable_ca_verification &amp;\n                        disable_browser_ca_verification patches, use your\n                        device's nx_tls_client_cert.pfx (Password: switch,\n                        Install to OS and import for Fiddler or import into\n                        Charles/OWASP ZAP). Use it for aauth-\n                        lp1.ndas.srv.nintendo.net:443, dauth-\n                        lp1.ndas.srv.nintendo.net:443 and\n                        app-b01-lp1.npns.srv.nintendo.net:443. Try with your\n                        WiiU first as there you won't get banned if you mess\n                        up.\n  -c CREATE, --create CREATE\n                        create / pack a NSP\n</code></pre>\n<h2>References</h2>\n<p>NSZ pip package: <a href=\"https://pypi.org/project/nsz/\" rel=\"nofollow\">https://pypi.org/project/nsz/</a><br>\nForum thread: <a href=\"https://gbatemp.net/threads/nsz-homebrew-compatible-nsp-xci-compressor-decompressor.550556/\" rel=\"nofollow\">https://gbatemp.net/threads/nsz-homebrew-compatible-nsp-xci-compressor-decompressor.550556/</a></p>\n<h2>Credits</h2>\n<p>SciresM for his hardware crypto functions; the blazing install speeds (50 MB/sec +) achieved here would not be possible without this.</p>\n\n          </div>"}, "last_serial": 6372272, "releases": {"2.1": [{"comment_text": "", "digests": {"md5": "ba045347fe0306cbe3032cd761842a53", "sha256": "4e09673a7dc4b5d0e81d86aa81b09f351a399a720cba5acf1e5c850248cc743c"}, "downloads": -1, "filename": "nsz-2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ba045347fe0306cbe3032cd761842a53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 53792, "upload_time": "2019-11-14T11:50:48", "upload_time_iso_8601": "2019-11-14T11:50:48.868138Z", "url": "https://files.pythonhosted.org/packages/5d/2f/f31b6d0d972144860737d7e59c6f54e2c3d0ece322039d097dcfe79039d4/nsz-2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5301010354d26712f375f5b5a8abf892", "sha256": "212a3f2a3db8827d4e93d544df57949f0e4badb89d1ebbf70410290e7218f369"}, "downloads": -1, "filename": "nsz-2.1.tar.gz", "has_sig": false, "md5_digest": "5301010354d26712f375f5b5a8abf892", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 43827, "upload_time": "2019-11-14T11:50:52", "upload_time_iso_8601": "2019-11-14T11:50:52.153771Z", "url": "https://files.pythonhosted.org/packages/6e/95/7e9a613a49b061585c588689004a17916419230a63d624a01a3e4481b2c8/nsz-2.1.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "c399b35754f295a612fb44cc004d495b", "sha256": "c6a8a3d69952bf72046ef8044677ff40ae6eb5b9e429c618d2a6803407aee686"}, "downloads": -1, "filename": "nsz-2.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c399b35754f295a612fb44cc004d495b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 53953, "upload_time": "2019-11-14T21:13:44", "upload_time_iso_8601": "2019-11-14T21:13:44.804236Z", "url": "https://files.pythonhosted.org/packages/14/23/0eb200d2052203e94ffc311829b4df82db43e6660cb0f4ca7fedbcdba4d0/nsz-2.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d9b5f9d525e4fb04008844cd1a9c676", "sha256": "2f30cb70ef065efdfd0603dcbcba2e5293ba54938eef85a5c976ebc650b2aaa5"}, "downloads": -1, "filename": "nsz-2.1.1.tar.gz", "has_sig": false, "md5_digest": "3d9b5f9d525e4fb04008844cd1a9c676", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44141, "upload_time": "2019-11-14T21:13:46", "upload_time_iso_8601": "2019-11-14T21:13:46.515866Z", "url": "https://files.pythonhosted.org/packages/f2/35/77ccaed4cddab70bbf08bb5a5b600b6ce41041b1f1d632ed9a2ad3dc6bc5/nsz-2.1.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "f860e007bba79231ec271f5db07d0573", "sha256": "aa16cb8b597fbff6a8aa89dfeb07232a9c4200db948b991de898a5b4066d8af4"}, "downloads": -1, "filename": "nsz-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f860e007bba79231ec271f5db07d0573", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 179195, "upload_time": "2019-12-24T01:29:20", "upload_time_iso_8601": "2019-12-24T01:29:20.252698Z", "url": "https://files.pythonhosted.org/packages/a8/c3/2a5573f402096f5c5f6d1606e84cc45500ff4cfdab8b2779ad95cb4b6255/nsz-3.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ecf378bbcf0cedd1423ebb7d19564cd", "sha256": "43846f5ab4058d6d75e02502fcbe187c4772ade4090e2f7741eb36b900dc880b"}, "downloads": -1, "filename": "nsz-3.0.0.tar.gz", "has_sig": false, "md5_digest": "0ecf378bbcf0cedd1423ebb7d19564cd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 151169, "upload_time": "2019-12-24T01:29:22", "upload_time_iso_8601": "2019-12-24T01:29:22.314788Z", "url": "https://files.pythonhosted.org/packages/cc/e1/12e07237e45d0710cb26a5df35665d71cf2e0ecfe4fd6b8f10fcbc953a6b/nsz-3.0.0.tar.gz", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "311e287c796d5e048a35b3cf1e293b08", "sha256": "fb2bfa8e52bffa53dc86720689a933ec6ea6dfb1bc5a5e157e05c95ee4240f12"}, "downloads": -1, "filename": "nsz-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "311e287c796d5e048a35b3cf1e293b08", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 281281, "upload_time": "2019-12-29T15:41:47", "upload_time_iso_8601": "2019-12-29T15:41:47.781877Z", "url": "https://files.pythonhosted.org/packages/e3/1f/1b7abba4e10509ce1142cc2c12031a78324cfd5ead7c08030be59f33a69b/nsz-3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "57b2f76525e2b3e1d54fea9d76284b23", "sha256": "52a548b97ea91cfa72329aa282f4e883fc91255d5f62b913a8f602806724fdc0"}, "downloads": -1, "filename": "nsz-3.1.0.tar.gz", "has_sig": false, "md5_digest": "57b2f76525e2b3e1d54fea9d76284b23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 245488, "upload_time": "2019-12-29T15:41:51", "upload_time_iso_8601": "2019-12-29T15:41:51.320022Z", "url": "https://files.pythonhosted.org/packages/ce/d3/515ae455cf17e81ec0d81f21c2fe82e104a2a620457d983122c972aefd2f/nsz-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "c4f4a4e6205ed108d0d2b4269977685a", "sha256": "96c361de5ab34fdcc9712f819516744439a9763c48bd68f145d46811ab66cd83"}, "downloads": -1, "filename": "nsz-3.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c4f4a4e6205ed108d0d2b4269977685a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 179540, "upload_time": "2019-12-29T17:58:06", "upload_time_iso_8601": "2019-12-29T17:58:06.095246Z", "url": "https://files.pythonhosted.org/packages/15/e9/4e02bc0ea81a2b3806154bdca7f97c0be3b0a25ed905922ea96adfcaf5da/nsz-3.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60380ca3a1756b762b9f4e323483ca0b", "sha256": "09874711404a265edd1160d767a8f7aa5c06444e8d7b8b6d0375812b4155baa3"}, "downloads": -1, "filename": "nsz-3.1.1.tar.gz", "has_sig": false, "md5_digest": "60380ca3a1756b762b9f4e323483ca0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 151554, "upload_time": "2019-12-29T17:58:12", "upload_time_iso_8601": "2019-12-29T17:58:12.196146Z", "url": "https://files.pythonhosted.org/packages/39/ae/5e4fe1dd4233bbeff67d757702ba10df819c4b8c16829793ee379c86969d/nsz-3.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c4f4a4e6205ed108d0d2b4269977685a", "sha256": "96c361de5ab34fdcc9712f819516744439a9763c48bd68f145d46811ab66cd83"}, "downloads": -1, "filename": "nsz-3.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c4f4a4e6205ed108d0d2b4269977685a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 179540, "upload_time": "2019-12-29T17:58:06", "upload_time_iso_8601": "2019-12-29T17:58:06.095246Z", "url": "https://files.pythonhosted.org/packages/15/e9/4e02bc0ea81a2b3806154bdca7f97c0be3b0a25ed905922ea96adfcaf5da/nsz-3.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60380ca3a1756b762b9f4e323483ca0b", "sha256": "09874711404a265edd1160d767a8f7aa5c06444e8d7b8b6d0375812b4155baa3"}, "downloads": -1, "filename": "nsz-3.1.1.tar.gz", "has_sig": false, "md5_digest": "60380ca3a1756b762b9f4e323483ca0b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 151554, "upload_time": "2019-12-29T17:58:12", "upload_time_iso_8601": "2019-12-29T17:58:12.196146Z", "url": "https://files.pythonhosted.org/packages/39/ae/5e4fe1dd4233bbeff67d757702ba10df819c4b8c16829793ee379c86969d/nsz-3.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:23 2020"}