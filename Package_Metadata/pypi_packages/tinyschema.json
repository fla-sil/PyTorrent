{"info": {"author": "UNKNOWN", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: Implementation :: CPython"], "description": "tinyschema\n========================================\n\nfeatures\n\n- schema definition\n- schema validation\n- data validation\n\nschema definition\n----------------------------------------\n\nThe way of schema definition is like a below sample.\n\n.. code:: python\n\n    import tinyschema as t\n\n    class Point(t.Schema):\n        x = t.column(t.IntegerField)\n        y = t.column(t.IntegerField)\n        z = t.column(t.IntegerField, required=False)\n\nAccessing field with dot-access, like a plain python object. But a\nreturned object is wrapped by Field object.\n\nField object has these members.\n\n- name -- name of field (system value)\n- value -- value of field\n\nSo this Point schema accessing a field like a below.\n\n.. code::\n\n    pt = Point(x=10, y=20)\n\n    print(pt.x.name)   # => x\n    print(pt.x.value)  # => 10\n\n\naddition\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA column of Schema can store your favirote value. below example is\nstored a value about css-class \"hidden\". and adding label option\nthat display expression for human (display value).\n\n.. code:: python\n\n    class Point(t.Schema):\n        x = t.column(t.IntegerField, label=u\"x-coordinate\", class_=\"hidden\")\n\n    pt = Point(x=10, y=20)\n\n    print(pt.x.label)  # => x-coordinate\n    print(pt.x.class_) # => \"hidden\"\n\n\nschema validation\n----------------------------------------\n\nSchema has a behavior of schema-validation. schema-validation is format checking.\n\n- filtering expected values only.\n- checking type of value.\n- converting value if need.\n\n.. code:: python\n\n    params = {\"x\": \"10\", \"y\": \"20\", \"foo\": \"foo\"}\n    pt = Point.fromdict(params)\n    print(pt.validate())  # => OrderedDict([('x', 10), ('y', 20), ('z', None)])\n\nschema-validation is run by calling validate() method. In above code,\n\"foo\" value is not member of Point schema, so validated value does not\ninclude a value name of foo. And a column-z has required=False option,\nbecause of this, a passed value that doesn't have a value name of z,\nconverted value is None.\n\nwhen schema error is found.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwhen schema validation is failure, then, Failure exception is raised.\n\n.. code:: python\n\n    params = {\"x\": \"aa\"}\n    pt = Point.fromdict(params)\n    pt.validate()\n    # tinyschema.Failure: <Failure errors=defaultdict(<class 'list'>, {'y': ['required'], 'x': ['aa is not int']})>\n\n\nAdding field validation\n----------------------------------------\n\nAdding field validation example is here.(using oneOf validator)\n\n.. code:: python\n\n    class Signal(t.Schema):\n        color = t.column(t.TextField, t.OneOf([\"red\", \"blue\", \"yellow\"]))\n\n    # success version\n    signal = Signal(color=\"red\")\n    data = signal.validate()\n    print(data[\"color\"])  # => \"red\"\n\n    # failure version\n    try:\n        signal2 = Signal(color=\"green\")\n        data = signal2.validate()\n    except t.Failure as e:\n        print(e)\n       # <Failure errors=defaultdict(<class 'list'>, {'color': ['green is not in red, blue, yellow']})>\n\ndefault validator are below.\n\n- Any, Regex, Email, Range, Length, OneOf, Subset, URL\n\ndefault type of field.\n\n- IntegerField, FloatField, BooleanField, TextField, ChoicesField, PositiveIntegerField\n\n\nmore complex structure\n----------------------------------------\n\ntinyschema support more complex structure like a dict-tree, sequence,\nor combination of one.\n\ndict-tree(using Container)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA field of schema is also schema. below example, Pair Schema has two\nmembers, l and r. And l and r is a Point Schema.\n\n.. code:: python\n\n    class Pair(t.Schema):\n        l = t.column(t.Container(Point), class_=\"left\")\n        r = t.column(t.Container(Point), class_=\"right\")\n\n    params = {\n        \"l\": {\"x\": \"10\", \"y\": \"20\", \"foo\": \"foo\"},\n        \"r\": {\"x\": \"100\", \"y\": \"20\"},\n    }\n\n    pair = Pair.fromdict(params)\n\n    import pprint\n    pprint.pprint(pair.validate())\n    # {'l': OrderedDict([('x', 10), ('y', 20), ('z', None)]),\n    #  'r': OrderedDict([('x', 100), ('y', 20), ('z', None)])}\n\n    pair.l.value.x.name # => x\n    pair.l.value.x.value # => 10\n\n\nsequence(using Collection)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPointList is a sequence of Point.\n\n.. code:: python\n\n    class PointList(t.Schema):\n        points = t.column(t.Collection(Point))\n\n    params = {\n        \"points\": [{\"x\": \"10\", \"y\": \"20\"}, {\"x\": \"20\", \"y\": \"20\"}, {\"x\": \"30\", \"y\": \"20\"}, ]\n    }\n\n    plist = PointList.fromdict(params)\n\n    import pprint\n    pprint.pprint(plist.validate())\n    # {'points': [OrderedDict([('x', 10), ('y', 20), ('z', None)]),\n    #             OrderedDict([('x', 20), ('y', 20), ('z', None)]),\n    #             OrderedDict([('x', 30), ('y', 20), ('z', None)])]}\n\n\ndata validation\n----------------------------------------\n\ndata-validation is a checking about a relation of each data.\n\n(TODO: gentle example)\n\n.. code:: python\n\n    from tinyschema.datavalidation import ValidationObject, multi, Invalid, single, share\n\n\n    class PointValidation(ValidationObject):\n        def __init__(self, limit):\n            self.limit = limit\n\n        @multi([\"x\", \"z\"])\n        def equals(self, x, z):\n            if x != z:\n                raise Invalid(\"not equal\")\n\n        @share(single(\"x\"), single(\"y\"), single(\"z\"))\n        def limit(self, value):\n            if value > self.limit:\n                raise Invalid(\"too large\")\n\n    validate = PointValidation(limit=100)\n\n    print(validate(Point(x=10, y=20)))  # => OrderedDict([('x', 10), ('y', 20), ('z', None)])\n\n    print(validate(Point(x=10, y=20, z=10)))  # => OrderedDict([('x', 10), ('y', 20), ('z', 10)])\n\n    print(validate(Point(x=10, y=20, z=1000)))\n    # tinyschema.Failure: <Failure errors=defaultdict(<class 'list'>, {'z': ['too large'], 'x': ['not equal']})>\n\n    print(validate(Point(x=\"aa\")))\n    # tinyschema.Failure: <Failure errors=defaultdict(<class 'list'>, {'x': ['aa is not int'], 'y': ['required']})>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/podhmo/tinyschema", "keywords": "", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "tinyschema", "package_url": "https://pypi.org/project/tinyschema/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tinyschema/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/podhmo/tinyschema"}, "release_url": "https://pypi.org/project/tinyschema/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "tiny schema implementation", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>features</p>\n<ul>\n<li>schema definition</li>\n<li>schema validation</li>\n<li>data validation</li>\n</ul>\n<div id=\"schema-definition\">\n<h2>schema definition</h2>\n<p>The way of schema definition is like a below sample.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">tinyschema</span> <span class=\"k\">as</span> <span class=\"nn\">t</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">)</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">)</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>Accessing field with dot-access, like a plain python object. But a\nreturned object is wrapped by Field object.</p>\n<p>Field object has these members.</p>\n<ul>\n<li>name \u2013 name of field (system value)</li>\n<li>value \u2013 value of field</li>\n</ul>\n<p>So this Point schema accessing a field like a below.</p>\n<pre>pt = Point(x=10, y=20)\n\nprint(pt.x.name)   # =&gt; x\nprint(pt.x.value)  # =&gt; 10\n</pre>\n<div id=\"addition\">\n<h3>addition</h3>\n<p>A column of Schema can store your favirote value. below example is\nstored a value about css-class \u201chidden\u201d. and adding label option\nthat display expression for human (display value).</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Point</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"x-coordinate\"</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"s2\">\"hidden\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">)</span>  <span class=\"c1\"># =&gt; x-coordinate</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">class_</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; \"hidden\"</span>\n</pre>\n</div>\n</div>\n<div id=\"schema-validation\">\n<h2>schema validation</h2>\n<p>Schema has a behavior of schema-validation. schema-validation is format checking.</p>\n<ul>\n<li>filtering expected values only.</li>\n<li>checking type of value.</li>\n<li>converting value if need.</li>\n</ul>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">}</span>\n<span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"o\">.</span><span class=\"n\">fromdict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">())</span>  <span class=\"c1\"># =&gt; OrderedDict([('x', 10), ('y', 20), ('z', None)])</span>\n</pre>\n<p>schema-validation is run by calling validate() method. In above code,\n\u201cfoo\u201d value is not member of Point schema, so validated value does not\ninclude a value name of foo. And a column-z has required=False option,\nbecause of this, a passed value that doesn\u2019t have a value name of z,\nconverted value is None.</p>\n<div id=\"when-schema-error-is-found\">\n<h3>when schema error is found.</h3>\n<p>when schema validation is failure, then, Failure exception is raised.</p>\n<pre><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"s2\">\"aa\"</span><span class=\"p\">}</span>\n<span class=\"n\">pt</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"o\">.</span><span class=\"n\">fromdict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"n\">pt</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"c1\"># tinyschema.Failure: &lt;Failure errors=defaultdict(&lt;class 'list'&gt;, {'y': ['required'], 'x': ['aa is not int']})&gt;</span>\n</pre>\n</div>\n</div>\n<div id=\"adding-field-validation\">\n<h2>Adding field validation</h2>\n<p>Adding field validation example is here.(using oneOf validator)</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Signal</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">OneOf</span><span class=\"p\">([</span><span class=\"s2\">\"red\"</span><span class=\"p\">,</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yellow\"</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># success version</span>\n<span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"red\"</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"color\"</span><span class=\"p\">])</span>  <span class=\"c1\"># =&gt; \"red\"</span>\n\n<span class=\"c1\"># failure version</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">signal2</span> <span class=\"o\">=</span> <span class=\"n\">Signal</span><span class=\"p\">(</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"green\"</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">signal2</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Failure</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n   <span class=\"c1\"># &lt;Failure errors=defaultdict(&lt;class 'list'&gt;, {'color': ['green is not in red, blue, yellow']})&gt;</span>\n</pre>\n<p>default validator are below.</p>\n<ul>\n<li>Any, Regex, Email, Range, Length, OneOf, Subset, URL</li>\n</ul>\n<p>default type of field.</p>\n<ul>\n<li>IntegerField, FloatField, BooleanField, TextField, ChoicesField, PositiveIntegerField</li>\n</ul>\n</div>\n<div id=\"more-complex-structure\">\n<h2>more complex structure</h2>\n<p>tinyschema support more complex structure like a dict-tree, sequence,\nor combination of one.</p>\n<div id=\"dict-tree-using-container\">\n<h3>dict-tree(using Container)</h3>\n<p>A field of schema is also schema. below example, Pair Schema has two\nmembers, l and r. And l and r is a Point Schema.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Pair</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Container</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">),</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"s2\">\"left\"</span><span class=\"p\">)</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Container</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">),</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"s2\">\"right\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"l\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"foo\"</span><span class=\"p\">},</span>\n    <span class=\"s2\">\"r\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"s2\">\"100\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20\"</span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"n\">Pair</span><span class=\"o\">.</span><span class=\"n\">fromdict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n<span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">())</span>\n<span class=\"c1\"># {'l': OrderedDict([('x', 10), ('y', 20), ('z', None)]),</span>\n<span class=\"c1\">#  'r': OrderedDict([('x', 100), ('y', 20), ('z', None)])}</span>\n\n<span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"c1\"># =&gt; x</span>\n<span class=\"n\">pair</span><span class=\"o\">.</span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"c1\"># =&gt; 10</span>\n</pre>\n</div>\n<div id=\"sequence-using-collection\">\n<h3>sequence(using Collection)</h3>\n<p>PointList is a sequence of Point.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">PointList</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">):</span>\n    <span class=\"n\">points</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">Collection</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">))</span>\n\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"points\"</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"s2\">\"10\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"s2\">\"30\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"s2\">\"20\"</span><span class=\"p\">},</span> <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">plist</span> <span class=\"o\">=</span> <span class=\"n\">PointList</span><span class=\"o\">.</span><span class=\"n\">fromdict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n<span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">plist</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">())</span>\n<span class=\"c1\"># {'points': [OrderedDict([('x', 10), ('y', 20), ('z', None)]),</span>\n<span class=\"c1\">#             OrderedDict([('x', 20), ('y', 20), ('z', None)]),</span>\n<span class=\"c1\">#             OrderedDict([('x', 30), ('y', 20), ('z', None)])]}</span>\n</pre>\n</div>\n</div>\n<div id=\"data-validation\">\n<h2>data validation</h2>\n<p>data-validation is a checking about a relation of each data.</p>\n<p>(TODO: gentle example)</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tinyschema.datavalidation</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationObject</span><span class=\"p\">,</span> <span class=\"n\">multi</span><span class=\"p\">,</span> <span class=\"n\">Invalid</span><span class=\"p\">,</span> <span class=\"n\">single</span><span class=\"p\">,</span> <span class=\"n\">share</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PointValidation</span><span class=\"p\">(</span><span class=\"n\">ValidationObject</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"n\">limit</span>\n\n    <span class=\"nd\">@multi</span><span class=\"p\">([</span><span class=\"s2\">\"x\"</span><span class=\"p\">,</span> <span class=\"s2\">\"z\"</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">equals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">z</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">Invalid</span><span class=\"p\">(</span><span class=\"s2\">\"not equal\"</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@share</span><span class=\"p\">(</span><span class=\"n\">single</span><span class=\"p\">(</span><span class=\"s2\">\"x\"</span><span class=\"p\">),</span> <span class=\"n\">single</span><span class=\"p\">(</span><span class=\"s2\">\"y\"</span><span class=\"p\">),</span> <span class=\"n\">single</span><span class=\"p\">(</span><span class=\"s2\">\"z\"</span><span class=\"p\">))</span>\n    <span class=\"k\">def</span> <span class=\"nf\">limit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">Invalid</span><span class=\"p\">(</span><span class=\"s2\">\"too large\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">validate</span> <span class=\"o\">=</span> <span class=\"n\">PointValidation</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)))</span>  <span class=\"c1\"># =&gt; OrderedDict([('x', 10), ('y', 20), ('z', None)])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)))</span>  <span class=\"c1\"># =&gt; OrderedDict([('x', 10), ('y', 20), ('z', 10)])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)))</span>\n<span class=\"c1\"># tinyschema.Failure: &lt;Failure errors=defaultdict(&lt;class 'list'&gt;, {'z': ['too large'], 'x': ['not equal']})&gt;</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"aa\"</span><span class=\"p\">)))</span>\n<span class=\"c1\"># tinyschema.Failure: &lt;Failure errors=defaultdict(&lt;class 'list'&gt;, {'x': ['aa is not int'], 'y': ['required']})&gt;</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 1346050, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "1e1ab9308bbf43bc1c4fe16b162e6b28", "sha256": "60fbb4ecf74771711e2e03e8904d7aa697582a13b0558f6e13c87ffe986ff277"}, "downloads": -1, "filename": "tinyschema-0.2.tar.gz", "has_sig": false, "md5_digest": "1e1ab9308bbf43bc1c4fe16b162e6b28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15170, "upload_time": "2014-12-14T05:29:09", "upload_time_iso_8601": "2014-12-14T05:29:09.835502Z", "url": "https://files.pythonhosted.org/packages/1e/ac/4a36b77957dc4f1514ee6e6264e45b7d9abd1ab86056929d88450f49965f/tinyschema-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "83cb59ab8a46cd48f7e891307add7169", "sha256": "ab70b083c68e1f1f62b61904252ef3f6903f5e109d0663cdc855aeddcea8038d"}, "downloads": -1, "filename": "tinyschema-0.2.1.tar.gz", "has_sig": false, "md5_digest": "83cb59ab8a46cd48f7e891307add7169", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15223, "upload_time": "2014-12-16T13:04:19", "upload_time_iso_8601": "2014-12-16T13:04:19.440258Z", "url": "https://files.pythonhosted.org/packages/e1/11/8770ed503db8da139e9690cfb0f4769be627181e3d96db14936c19caf726/tinyschema-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83cb59ab8a46cd48f7e891307add7169", "sha256": "ab70b083c68e1f1f62b61904252ef3f6903f5e109d0663cdc855aeddcea8038d"}, "downloads": -1, "filename": "tinyschema-0.2.1.tar.gz", "has_sig": false, "md5_digest": "83cb59ab8a46cd48f7e891307add7169", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15223, "upload_time": "2014-12-16T13:04:19", "upload_time_iso_8601": "2014-12-16T13:04:19.440258Z", "url": "https://files.pythonhosted.org/packages/e1/11/8770ed503db8da139e9690cfb0f4769be627181e3d96db14936c19caf726/tinyschema-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:55 2020"}