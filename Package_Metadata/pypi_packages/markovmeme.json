{"info": {"author": "Vanessa Sochat", "author_email": "vsochat@stanford.edu", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development"], "description": "# Markov Meme\n\n[![PyPI version](https://badge.fury.io/py/markovmeme.svg)](https://pypi.org/project/markovmeme/)\n[![GitHub actions status](https://github.com/vsoch/markovmeme/workflows/ci/badge.svg?branch=master)](https://github.com/vsoch/markovmeme/actions?query=branch%3Amaster+workflow%3Aci)\n\nWouldn't it be great to generate themed memes with Markov Models? Or just randomly\ngenerated text? I think so too.\n\n## Usage\n\n### Install\n\nYou can install from pypi\n\n```bash\npip install markovmeme\n```\n\nor install from the repository directly:\n\n```bash\n$ git clone https://github.com/vsoch/markovmeme\n$ python setup.py install\n```\n\n## Usage\n\nYou can see the basic usage as follows. Basically, there is a \"generate\" command:\n\n```bash\n$ markov-meme \nusage: markov-meme [-h] {generate} ...\n\nMarkov Meme Generator\n\noptional arguments:\n  -h, --help  show this help message and exit\n\nactions:\n  actions for Markov Meme Generator\n\n  {generate}  markovmeme actions\n    generate  generate a meme\n```\n\nYou can see the corpus available by looking at the generate help:\n\n```bash\n$ markov-meme generate --help\nusage: markov-meme generate [-h] [--outfile OUTFILE] [--fontsize FONTSIZE]\n                            [--font {OpenSans-Regular,Pacifico-Regular,Anton-Regular}]\n                            [--corpus {hamlet,dr_seuss,trump_speech,the_office,office/stanley,office/toby,office/meredith,office/holly,office/creed,office/oscar,office/deangelo,office/david,office/dwight,office/kelly,office/phyllis,office/jim,office/nellie,office/gabe,office/clark,office/roy,office/karen,office/michael,office/andy,office/charles,office/kevin,office/pam,office/ryan,office/erin,office/robert,office/darryl,office/pete,office/jan,office/jo,office/angela}]\n                            [--custom-corpus CUSTOM_CORPUS]\n                            [--image CUSTOM_IMAGE] [--no-model]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --outfile OUTFILE     the output file to save the image (defaults to\n                        randomly generated png)\n  --fontsize FONTSIZE   font size of text (if desired) defaults to 16\n  --font {OpenSans-Regular,Pacifico-Regular,Anton-Regular}\n                        choice of font (defaults to open sans)\n  --corpus {hamlet,dr_seuss,trump_speech,the_office,office/stanley,office/toby,office/meredith,office/holly,office/creed,office/oscar,office/deangelo,office/david,office/dwight,office/kelly,office/phyllis,office/jim,office/nellie,office/gabe,office/clark,office/roy,office/karen,office/michael,office/andy,office/charles,office/kevin,office/pam,office/ryan,office/erin,office/robert,office/darryl,office/pete,office/jan,office/jo,office/angela}\n                        the corpus to use to generate the meme, matches to\n                        images.\n  --custom-corpus CUSTOM_CORPUS\n                        A custom corpus file, full path\n  --image CUSTOM_IMAGE  A custom image file, full path\n  --no-model            Don't generate a sentence from corpus, just randomly\n                        select sentence.\n```\n\n### Random Generation\n\nTo generate a meme from a random corpus, you can just run:\n\n```bash\n$ markov-meme generate\n```\n\nIf the randomly selected corpus doesn't have matching images, you'll see\n\n```bash\nNo images exist for corpus office/clark. Please specify --image.\n```\n\n### Corpus and Image Selection\n\nAnd you can run the same command again, or specify a specific corpus and image.\n\n```bash\n$ markov-meme generate --corpus office/michael --image markovmeme/data/images/office/michael1.png\n```\n\nThe same can be done for specifying a custom corpus, which should be a text file with lines\nto generate the model from.\n\n```bash\n$ markov-meme generate --custom-corpus markovmeme/data/corpus/office/michael.txt --image markovmeme/data/images/office/michael2.png\n```\n\n### Skip Model\n\nIf you don't want to use a model (and want real lines from some corpus) add `--no-model`\n\n```bash\n$ markov-meme generate --no-model\n```\n\n## Interactive Python\nFor the most part, text size and number of characters are limited to fit reasonable within\n1-3 lines. If you want to customize or otherwise play around with this, you can interact\nwith the class directly:\n\n```python\nfrom markovmeme.main import MemeImage\nfrom markovmeme.text import generate_text\n\n# corpus is absolute path, or relative to module's data/corpus folder\ncorpus = \"office/michael\"\n\ntext = generate_text(corpus=corpus, use_model=True, size=10)\n\n# Set image to full path, or None to select based on corpus\nmeme = MemeImage(image=None, corpus=corpus)\n\n# Add text generated, centered on top\nmeme.write_text(text, fontsize=args.fontsize, font=font)\n\n# Leave outfile as None to generate random name\nmeme.save_image(None)\n```\n\n## Support\n\nDo you have a question? Or want to suggest a feature to make it better?\nPlease [open an issue!](https://www.github.com/vsoch/markovmeme)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/vsoch/markovmeme", "keywords": "generate memes using a Markov Model", "license": "LICENSE", "maintainer": "Vanessa Sochat", "maintainer_email": "vsochat@stanford.edu", "name": "markovmeme", "package_url": "https://pypi.org/project/markovmeme/", "platform": "", "project_url": "https://pypi.org/project/markovmeme/", "project_urls": {"Homepage": "http://www.github.com/vsoch/markovmeme"}, "release_url": "https://pypi.org/project/markovmeme/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Command line tool for generating markov memes.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Markov Meme</h1>\n<p><a href=\"https://pypi.org/project/markovmeme/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb1dbaba5ac15b0bca6e44f03568a59d4d849b45/68747470733a2f2f62616467652e667572792e696f2f70792f6d61726b6f766d656d652e737667\"></a>\n<a href=\"https://github.com/vsoch/markovmeme/actions?query=branch%3Amaster+workflow%3Aci\" rel=\"nofollow\"><img alt=\"GitHub actions status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2fe4073b3494b3e6ed12d0461b9859cc278efda3/68747470733a2f2f6769746875622e636f6d2f76736f63682f6d61726b6f766d656d652f776f726b666c6f77732f63692f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Wouldn't it be great to generate themed memes with Markov Models? Or just randomly\ngenerated text? I think so too.</p>\n<h2>Usage</h2>\n<h3>Install</h3>\n<p>You can install from pypi</p>\n<pre>pip install markovmeme\n</pre>\n<p>or install from the repository directly:</p>\n<pre>$ git clone https://github.com/vsoch/markovmeme\n$ python setup.py install\n</pre>\n<h2>Usage</h2>\n<p>You can see the basic usage as follows. Basically, there is a \"generate\" command:</p>\n<pre>$ markov-meme \nusage: markov-meme <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">{</span>generate<span class=\"o\">}</span> ...\n\nMarkov Meme Generator\n\noptional arguments:\n  -h, --help  show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n\nactions:\n  actions <span class=\"k\">for</span> Markov Meme Generator\n\n  <span class=\"o\">{</span>generate<span class=\"o\">}</span>  markovmeme actions\n    generate  generate a meme\n</pre>\n<p>You can see the corpus available by looking at the generate help:</p>\n<pre>$ markov-meme generate --help\nusage: markov-meme generate <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--outfile OUTFILE<span class=\"o\">]</span> <span class=\"o\">[</span>--fontsize FONTSIZE<span class=\"o\">]</span>\n                            <span class=\"o\">[</span>--font <span class=\"o\">{</span>OpenSans-Regular,Pacifico-Regular,Anton-Regular<span class=\"o\">}]</span>\n                            <span class=\"o\">[</span>--corpus <span class=\"o\">{</span>hamlet,dr_seuss,trump_speech,the_office,office/stanley,office/toby,office/meredith,office/holly,office/creed,office/oscar,office/deangelo,office/david,office/dwight,office/kelly,office/phyllis,office/jim,office/nellie,office/gabe,office/clark,office/roy,office/karen,office/michael,office/andy,office/charles,office/kevin,office/pam,office/ryan,office/erin,office/robert,office/darryl,office/pete,office/jan,office/jo,office/angela<span class=\"o\">}]</span>\n                            <span class=\"o\">[</span>--custom-corpus CUSTOM_CORPUS<span class=\"o\">]</span>\n                            <span class=\"o\">[</span>--image CUSTOM_IMAGE<span class=\"o\">]</span> <span class=\"o\">[</span>--no-model<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --outfile OUTFILE     the output file to save the image <span class=\"o\">(</span>defaults to\n                        randomly generated png<span class=\"o\">)</span>\n  --fontsize FONTSIZE   font size of text <span class=\"o\">(</span><span class=\"k\">if</span> desired<span class=\"o\">)</span> defaults to <span class=\"m\">16</span>\n  --font <span class=\"o\">{</span>OpenSans-Regular,Pacifico-Regular,Anton-Regular<span class=\"o\">}</span>\n                        choice of font <span class=\"o\">(</span>defaults to open sans<span class=\"o\">)</span>\n  --corpus <span class=\"o\">{</span>hamlet,dr_seuss,trump_speech,the_office,office/stanley,office/toby,office/meredith,office/holly,office/creed,office/oscar,office/deangelo,office/david,office/dwight,office/kelly,office/phyllis,office/jim,office/nellie,office/gabe,office/clark,office/roy,office/karen,office/michael,office/andy,office/charles,office/kevin,office/pam,office/ryan,office/erin,office/robert,office/darryl,office/pete,office/jan,office/jo,office/angela<span class=\"o\">}</span>\n                        the corpus to use to generate the meme, matches to\n                        images.\n  --custom-corpus CUSTOM_CORPUS\n                        A custom corpus file, full path\n  --image CUSTOM_IMAGE  A custom image file, full path\n  --no-model            Don<span class=\"err\">'</span>t generate a sentence from corpus, just randomly\n                        <span class=\"k\">select</span> sentence.\n</pre>\n<h3>Random Generation</h3>\n<p>To generate a meme from a random corpus, you can just run:</p>\n<pre>$ markov-meme generate\n</pre>\n<p>If the randomly selected corpus doesn't have matching images, you'll see</p>\n<pre>No images exist <span class=\"k\">for</span> corpus office/clark. Please specify --image.\n</pre>\n<h3>Corpus and Image Selection</h3>\n<p>And you can run the same command again, or specify a specific corpus and image.</p>\n<pre>$ markov-meme generate --corpus office/michael --image markovmeme/data/images/office/michael1.png\n</pre>\n<p>The same can be done for specifying a custom corpus, which should be a text file with lines\nto generate the model from.</p>\n<pre>$ markov-meme generate --custom-corpus markovmeme/data/corpus/office/michael.txt --image markovmeme/data/images/office/michael2.png\n</pre>\n<h3>Skip Model</h3>\n<p>If you don't want to use a model (and want real lines from some corpus) add <code>--no-model</code></p>\n<pre>$ markov-meme generate --no-model\n</pre>\n<h2>Interactive Python</h2>\n<p>For the most part, text size and number of characters are limited to fit reasonable within\n1-3 lines. If you want to customize or otherwise play around with this, you can interact\nwith the class directly:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">markovmeme.main</span> <span class=\"kn\">import</span> <span class=\"n\">MemeImage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">markovmeme.text</span> <span class=\"kn\">import</span> <span class=\"n\">generate_text</span>\n\n<span class=\"c1\"># corpus is absolute path, or relative to module's data/corpus folder</span>\n<span class=\"n\">corpus</span> <span class=\"o\">=</span> <span class=\"s2\">\"office/michael\"</span>\n\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">generate_text</span><span class=\"p\">(</span><span class=\"n\">corpus</span><span class=\"o\">=</span><span class=\"n\">corpus</span><span class=\"p\">,</span> <span class=\"n\">use_model</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set image to full path, or None to select based on corpus</span>\n<span class=\"n\">meme</span> <span class=\"o\">=</span> <span class=\"n\">MemeImage</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">corpus</span><span class=\"o\">=</span><span class=\"n\">corpus</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add text generated, centered on top</span>\n<span class=\"n\">meme</span><span class=\"o\">.</span><span class=\"n\">write_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">fontsize</span><span class=\"p\">,</span> <span class=\"n\">font</span><span class=\"o\">=</span><span class=\"n\">font</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Leave outfile as None to generate random name</span>\n<span class=\"n\">meme</span><span class=\"o\">.</span><span class=\"n\">save_image</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<h2>Support</h2>\n<p>Do you have a question? Or want to suggest a feature to make it better?\nPlease <a href=\"https://www.github.com/vsoch/markovmeme\" rel=\"nofollow\">open an issue!</a></p>\n\n          </div>"}, "last_serial": 6373023, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "454f7ba7397d0f244deb570e8dcac155", "sha256": "8518ffaf4a430efc31d3fd5e9d2d20ca3829e8e94785eefcaed8bb489e8fbe72"}, "downloads": -1, "filename": "markovmeme-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "454f7ba7397d0f244deb570e8dcac155", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 51916145, "upload_time": "2019-12-29T23:27:36", "upload_time_iso_8601": "2019-12-29T23:27:36.423464Z", "url": "https://files.pythonhosted.org/packages/87/e1/526c8d324573ce45da47d845e27929e9d5b66dd769e108f568038c77ede3/markovmeme-0.0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf8cbce9839208b11fb3b036cabcf02c", "sha256": "bd46d74dcda01f73d978a91de696b5a1a077bda9263464188ac902333e1a9752"}, "downloads": -1, "filename": "markovmeme-0.0.1.tar.gz", "has_sig": false, "md5_digest": "cf8cbce9839208b11fb3b036cabcf02c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51839448, "upload_time": "2019-12-29T23:28:06", "upload_time_iso_8601": "2019-12-29T23:28:06.172020Z", "url": "https://files.pythonhosted.org/packages/ae/ca/bf345eb16403330c63d66890e5814219647d95b1f7df9cf1c9a39257880c/markovmeme-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "454f7ba7397d0f244deb570e8dcac155", "sha256": "8518ffaf4a430efc31d3fd5e9d2d20ca3829e8e94785eefcaed8bb489e8fbe72"}, "downloads": -1, "filename": "markovmeme-0.0.1-py3.7.egg", "has_sig": false, "md5_digest": "454f7ba7397d0f244deb570e8dcac155", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 51916145, "upload_time": "2019-12-29T23:27:36", "upload_time_iso_8601": "2019-12-29T23:27:36.423464Z", "url": "https://files.pythonhosted.org/packages/87/e1/526c8d324573ce45da47d845e27929e9d5b66dd769e108f568038c77ede3/markovmeme-0.0.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf8cbce9839208b11fb3b036cabcf02c", "sha256": "bd46d74dcda01f73d978a91de696b5a1a077bda9263464188ac902333e1a9752"}, "downloads": -1, "filename": "markovmeme-0.0.1.tar.gz", "has_sig": false, "md5_digest": "cf8cbce9839208b11fb3b036cabcf02c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51839448, "upload_time": "2019-12-29T23:28:06", "upload_time_iso_8601": "2019-12-29T23:28:06.172020Z", "url": "https://files.pythonhosted.org/packages/ae/ca/bf345eb16403330c63d66890e5814219647d95b1f7df9cf1c9a39257880c/markovmeme-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:40 2020"}