{"info": {"author": "Etienne Kintzler", "author_email": "etienne.kintzler@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# api-offres-emploi \nA python wrapper for [API Offres d'emploi v2](https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2.html) available on [Emploi Store](https://www.emploi-store.fr/portail/accueil) (Pole Emploi).\n\n### Table of content\n\n- [1. Setting up](#1-setting-up)\n- [2. Usage](#2-usage)\n  - [Installation](#21-installation)\n  - [Authentification](#22-authentification)\n- [3. Examples](#3-examples)\n  - [3.1. search](#31-search)\n  - [3.2. referentiel](#32-referentiel)\n- [4. Analysis of the search output](#4-analysis-of-the-search-output)\n  - [4.1. Aggregate view of job offers](#41-aggregate-view-of-job-offers)\n  - [4.2. Detailed view of job offers](#42-detailed-view-of-job-offers)\n\n## 1. Setting up\nTo use the API, you need to subscribe to the _Api Offres d'emploi v2_. Here are the steps:\n- Create an account on [Emploi store](https://www.emploi-store-dev.fr/)\n- Go to the dashboard (*Tableau de bord*) and create an application. You should then have the client ID (_Identifiant_) and client secret key (_Cl\u00e9 secr\u00e8te_).\n- Go to [catalogue](https://www.emploi-store-dev.fr/portail-developpeur/catalogueapi) and subscribe to _Api Offres d'emploi v2_\n\n## 2. Usage\n\n### 2.1. Installation\nThe package can be installed via pip:\n```python\npip install api-offres-emploi\n```\n\n### 2.2. Authentification\nTo authentificate, create an instance of `Api` with your client id and secrets (you might want to access these two variables through environment variables instead of hardcoding them):\n\n```python\nfrom offres_emploi import Api\nclient = Api(client_id=\"<your client id>\", \n             client_secret=\"<your client secret>\")\n```\n\n### 2.3. Methods exposed by the API 'Offres d'emploi v2'\nThe API _Offres d'emploi v2_ has two methods : \n- `search` : return aggregate count (named _filtresPossibles_) of the job offers along with the detailed list of these job offers (named _resultats_). A lot of parameters are available : date, keywords, localization, etc. Extensive information on the website page [Rechercher par crit\u00e8res](https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/rechercher-par-criteres.html).\n- `referentiel` : return reference source (more information on the website page [R\u00e9f\u00e9rentiels](https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/referentiels.html)).\n\n**About range and pagination**: In the method `search`, only the first 150 job offers are returned by default by the API (since the default `range` value is `0-149`). There are three constraints regarding the `range` parameter ([see the reference for the parameter 'range'](https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/rechercher-par-criteres.html)):\n- the maximal value for the first element of range is 1000 \n- the maximal value for the second element of range is 1149\n- the number of result for a given requests must be inferior or equals to 150 \n\nHence for a given search, it is possible to get up to 1150 job offers, by modifying the value of the parameter `range` for each request (`0-149` then `150-299`, `300-449`, etc.). However some `search` might have much more than 1150 job offers. In this case one has to narrow down the search using additional parameters (for instance: by playing with the parameters `minCreationDate` and `maxCreationDate` of the request). \n\n**Limit rate** : The API limit rate is set to 3 requests per second.\n\n**Equivalence between the *API Offres d'emploi v2* methods and this module methods**: The 2 main methods from *Api Offres d'emploi v2* have the same name in the python module (`search` and `referentiel`) and are methods of the module class `Api`. One notable difference is that the output of `search` of this module has an additional `Content-Range` entry (describe hereafter).\n\n## 3. Examples\n### 3.1. Search\n#### Minimal example of search\nThe _API Offres d'emploi v2_ has default parameters, so we can make a requests without parameters (will return the latest job offers) :\n```python\nbasic_search = client.search()\n```\nThe output of the module's `Api.search` method is the same as the _Api Offres d'emploi v2_ (dictionnary with entries `filtresPossibles` and `resultats`) with an additional entry, `Content-Range`, that gives the first and last index used for the `range` parameter along with the total number of available job offers for this request. For instance : \n```python\nbasic_search['Content-Range']\n```\nwill output :\n```python\n{'first_index': '0', 'last_index': '149', 'max_results': '300749'}\n```\nThe other fields (`filtresPossibles` and `resultats`) are explored further the [section 4](#4-analysis-of-the-search-output).\n\n#### A more complex search\nA more sensible approach would be to search for special keyword over a certain period, for instance the job offers with that include the keyword _big data_ since 2020-03-01 at 12h30. \n```python\nfrom offres_emploi.utils import dt_to_str_iso\nimport datetime\n\nstart_dt = datetime.datetime(2020, 3, 1, 12, 30)\nend_dt = datetime.datetime.today()\nparams = {\n    \"motsCles\": \"data science\",\n    'minCreationDate': dt_to_str_iso(start_dt),\n    'maxCreationDate': dt_to_str_iso(end_dt)\n}\nsearch_on_big_data = client.search(params=params)\n```\n\nThe full list of parameters for the `search` request are available in the page [Rechercher par crit\u00e8res](https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/rechercher-par-criteres.html). These parameters are passed as dictionary to the parameter `params`. Note that the keys of this dictionnary are in camelCase, as in the _API Offres d'emploi v2_ specification. Also, we feed a `datetime` object to the helper function `dt_to_str_iso` to convert it to a string with the appropriate [ISO-8601](https://www.w3.org/TR/NOTE-datetime) format required by the API.\n\n### 3.2. Referentiel\nGetting reference source (_referentiel_ in french) is more straightforward since it does not need any parameter ; one just need to specify the desired reference source:\n```python\nreferentiel_metiers = client.referentiel('metiers')\n```\nIt will output the following list of dictionnaries: \n```python\n[{'code': '1',\n  'libelle': \"M\u00e9tiers de l'environnement et du d\u00e9veloppement durable\"},\n {'code': '2',\n  'libelle': 'M\u00e9tiers de la d\u00e9fense et de la s\u00e9curit\u00e9 publique (hors logistique, sant\u00e9, tertiaire, restauration)'},\n {'code': '3',\n  'libelle': \"M\u00e9tiers du patrimoine et de la restauration d'oeuvres d'art\"},\n {'code': '4', 'libelle': \"M\u00e9tiers de l'intelligence \u00e9conomique\"},\n {'code': '5', 'libelle': 'M\u00e9tiers de la recherche'},\n ...\n ]\n```\n\nThe full list of *referentiel* is available in the docstring of the method or in the [R\u00e9f\u00e9rentiel page](https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/referentiels.html) of the API.\n\n## 4. Analysis of the search output\nThe output of the `Api.search` is a dictionary with three entries:\n\n- *filtresPossibles*\n- *resultats*\n- *Content-Range*\n\nThe breakdown of the available job offers into different categories (type of contract, experience, qualification, nature of contract) are available in the _filtresPossibles_ field and the detailed view of the job offers in _resultats_ field.\n\n```python\nfilters = search_on_big_data['filtresPossibles']\nresults =  search_on_big_data['resultats']\ncontent_range = search_on_big_data['Content-Range']\n```\n\nThe number of job offers available at this point in time for this search is given by:\n\n```python\ncontent_range['max_results']\n```\n\n### 4.1. Aggregate view of job offers\nThe helper function `filters_to_df` is used to convert the field `filtresPossibles` in a suitable format:\n\n```python\nfrom offres_emploi.utils import filters_to_df\nfilters_df = filters_to_df(filters)\n```\nIt will output:\n```python\n           filtre valeur_possible  nb_resultats\n0     typeContrat             CDD             3\n1     typeContrat             CDI           138\n2     typeContrat             LIB            37\n3      experience               0            15\n4      experience               1            96\n5      experience               2            47\n6      experience               3            20\n7   qualification               0             4\n8   qualification               9            76\n9   qualification               X            98\n10  natureContrat              E1           141\n11  natureContrat              NS            37\n```\n\nIt is then straightforward to plot these figures using the data visualization library [seaborn](https://seaborn.pydata.org/):\n\n```python\nimport seaborn as sns\ng = sns.FacetGrid(filters_df, col=\"filtre\", sharex=False, sharey=False)\ng = g.map(data=sns.barplot, row=\"valeur_possible\", col=\"nb_resultats\")\n```\n\n![barplot of the breakdown](/img/filters.png)\n\n\n### 4.2 Detailed view of job offers\nThe detailed view _resultats_ has a more friendly structure and can be pass directly to a `pandas.DataFrame` constructor. For example, to  know the salary offered by the enterprises for this search:\n\n```python\nimport pandas as pd\nresults_df = pd.DataFrame(results)\nsalary_by_enterprise = (\n results_df[['entreprise', 'salaire']]\n .dropna()\n .agg(dict(entreprise=lambda x: x.get('nom'),\n           salaire=lambda x: x.get('commentaire')))\n .dropna(subset=[\"salaire\"])\n .loc[lambda df: df.salaire.str.contains(\"\\d+\")]\n .sort_values(\"salaire\")\n)\n```\n\nIt will output:\n\n```python\n                                  entreprise                        salaire\n73                                CLEEVEN SE         25 - 45 k\u20ac brut annuel\n112                                    ASTEK         30 - 40 k\u20ac brut annuel\n113                                 ADSERVIO         30 - 50 k\u20ac brut annuel\n15                                   REDLEAN         30 - 50 k\u20ac brut annuel\n29                           EOLE CONSULTING         30 - 50 k\u20ac brut annuel\n66                               PHOENIX ISI         32 - 35 k\u20ac brut annuel\n12                          DGA DRH CPP SDCO         32 - 52 k\u20ac brut annuel\n109                                EXPERTEAM         35 - 45 k\u20ac brut annuel\n47                              GROUPE ASTEN         35 - 48 k\u20ac brut annuel\n16                                 ENERGISME         35 - 60 k\u20ac brut annuel\n90                                     VISEO         36 - 50 k\u20ac brut annuel\n80   SOCIETE ALTRAN, Bat Teck - E. Golf Park         38 - 42 k\u20ac brut annuel\n14                AINABL TECHNOLOGIES FRANCE         38 - 50 k\u20ac brut annuel\n68   SOCIETE ALTRAN, Bat Teck - E. Golf Park         40 - 45 k\u20ac brut annuel\n28                                   Katchme         40 - 50 k\u20ac brut annuel\n124                                 HUMAINEA         42 - 45 k\u20ac brut annuel\n79   SOCIETE ALTRAN, Bat Teck - E. Golf Park         45 - 48 k\u20ac brut annuel\n86                          DGA DRH CPP FDCO  A partir de 34 k\u20ac brut annuel\n114                     SILICOM REGION OUEST  A partir de 35 k\u20ac brut annuel\n17                                      SNEF  A partir de 40 k\u20ac brut annuel\n96                               NODYA GROUP  A partir de 40 k\u20ac brut annuel\n89                       QUADRA INFORMATIQUE  A partir de 45 k\u20ac brut annuel\n35                                   Hunteed  A partir de 49 k\u20ac brut annuel\n```\nNow you know where to apply.\n\n\n\n\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/etiennekintzler/api-offres-emploi", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "api-offres-emploi", "package_url": "https://pypi.org/project/api-offres-emploi/", "platform": "", "project_url": "https://pypi.org/project/api-offres-emploi/", "project_urls": {"Homepage": "https://github.com/etiennekintzler/api-offres-emploi"}, "release_url": "https://pypi.org/project/api-offres-emploi/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Python interface to 'API Offres d'emploi v2' (Pole Emploi job search API)", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>api-offres-emploi</h1>\n<p>A python wrapper for <a href=\"https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2.html\" rel=\"nofollow\">API Offres d'emploi v2</a> available on <a href=\"https://www.emploi-store.fr/portail/accueil\" rel=\"nofollow\">Emploi Store</a> (Pole Emploi).</p>\n<h3>Table of content</h3>\n<ul>\n<li><a href=\"#1-setting-up\" rel=\"nofollow\">1. Setting up</a></li>\n<li><a href=\"#2-usage\" rel=\"nofollow\">2. Usage</a>\n<ul>\n<li><a href=\"#21-installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#22-authentification\" rel=\"nofollow\">Authentification</a></li>\n</ul>\n</li>\n<li><a href=\"#3-examples\" rel=\"nofollow\">3. Examples</a>\n<ul>\n<li><a href=\"#31-search\" rel=\"nofollow\">3.1. search</a></li>\n<li><a href=\"#32-referentiel\" rel=\"nofollow\">3.2. referentiel</a></li>\n</ul>\n</li>\n<li><a href=\"#4-analysis-of-the-search-output\" rel=\"nofollow\">4. Analysis of the search output</a>\n<ul>\n<li><a href=\"#41-aggregate-view-of-job-offers\" rel=\"nofollow\">4.1. Aggregate view of job offers</a></li>\n<li><a href=\"#42-detailed-view-of-job-offers\" rel=\"nofollow\">4.2. Detailed view of job offers</a></li>\n</ul>\n</li>\n</ul>\n<h2>1. Setting up</h2>\n<p>To use the API, you need to subscribe to the <em>Api Offres d'emploi v2</em>. Here are the steps:</p>\n<ul>\n<li>Create an account on <a href=\"https://www.emploi-store-dev.fr/\" rel=\"nofollow\">Emploi store</a></li>\n<li>Go to the dashboard (<em>Tableau de bord</em>) and create an application. You should then have the client ID (<em>Identifiant</em>) and client secret key (<em>Cl\u00e9 secr\u00e8te</em>).</li>\n<li>Go to <a href=\"https://www.emploi-store-dev.fr/portail-developpeur/catalogueapi\" rel=\"nofollow\">catalogue</a> and subscribe to <em>Api Offres d'emploi v2</em></li>\n</ul>\n<h2>2. Usage</h2>\n<h3>2.1. Installation</h3>\n<p>The package can be installed via pip:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">api</span><span class=\"o\">-</span><span class=\"n\">offres</span><span class=\"o\">-</span><span class=\"n\">emploi</span>\n</pre>\n<h3>2.2. Authentification</h3>\n<p>To authentificate, create an instance of <code>Api</code> with your client id and secrets (you might want to access these two variables through environment variables instead of hardcoding them):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">offres_emploi</span> <span class=\"kn\">import</span> <span class=\"n\">Api</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Api</span><span class=\"p\">(</span><span class=\"n\">client_id</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your client id&gt;\"</span><span class=\"p\">,</span> \n             <span class=\"n\">client_secret</span><span class=\"o\">=</span><span class=\"s2\">\"&lt;your client secret&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<h3>2.3. Methods exposed by the API 'Offres d'emploi v2'</h3>\n<p>The API <em>Offres d'emploi v2</em> has two methods :</p>\n<ul>\n<li><code>search</code> : return aggregate count (named <em>filtresPossibles</em>) of the job offers along with the detailed list of these job offers (named <em>resultats</em>). A lot of parameters are available : date, keywords, localization, etc. Extensive information on the website page <a href=\"https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/rechercher-par-criteres.html\" rel=\"nofollow\">Rechercher par crit\u00e8res</a>.</li>\n<li><code>referentiel</code> : return reference source (more information on the website page <a href=\"https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/referentiels.html\" rel=\"nofollow\">R\u00e9f\u00e9rentiels</a>).</li>\n</ul>\n<p><strong>About range and pagination</strong>: In the method <code>search</code>, only the first 150 job offers are returned by default by the API (since the default <code>range</code> value is <code>0-149</code>). There are three constraints regarding the <code>range</code> parameter (<a href=\"https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/rechercher-par-criteres.html\" rel=\"nofollow\">see the reference for the parameter 'range'</a>):</p>\n<ul>\n<li>the maximal value for the first element of range is 1000</li>\n<li>the maximal value for the second element of range is 1149</li>\n<li>the number of result for a given requests must be inferior or equals to 150</li>\n</ul>\n<p>Hence for a given search, it is possible to get up to 1150 job offers, by modifying the value of the parameter <code>range</code> for each request (<code>0-149</code> then <code>150-299</code>, <code>300-449</code>, etc.). However some <code>search</code> might have much more than 1150 job offers. In this case one has to narrow down the search using additional parameters (for instance: by playing with the parameters <code>minCreationDate</code> and <code>maxCreationDate</code> of the request).</p>\n<p><strong>Limit rate</strong> : The API limit rate is set to 3 requests per second.</p>\n<p><strong>Equivalence between the <em>API Offres d'emploi v2</em> methods and this module methods</strong>: The 2 main methods from <em>Api Offres d'emploi v2</em> have the same name in the python module (<code>search</code> and <code>referentiel</code>) and are methods of the module class <code>Api</code>. One notable difference is that the output of <code>search</code> of this module has an additional <code>Content-Range</code> entry (describe hereafter).</p>\n<h2>3. Examples</h2>\n<h3>3.1. Search</h3>\n<h4>Minimal example of search</h4>\n<p>The <em>API Offres d'emploi v2</em> has default parameters, so we can make a requests without parameters (will return the latest job offers) :</p>\n<pre><span class=\"n\">basic_search</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">()</span>\n</pre>\n<p>The output of the module's <code>Api.search</code> method is the same as the <em>Api Offres d'emploi v2</em> (dictionnary with entries <code>filtresPossibles</code> and <code>resultats</code>) with an additional entry, <code>Content-Range</code>, that gives the first and last index used for the <code>range</code> parameter along with the total number of available job offers for this request. For instance :</p>\n<pre><span class=\"n\">basic_search</span><span class=\"p\">[</span><span class=\"s1\">'Content-Range'</span><span class=\"p\">]</span>\n</pre>\n<p>will output :</p>\n<pre><span class=\"p\">{</span><span class=\"s1\">'first_index'</span><span class=\"p\">:</span> <span class=\"s1\">'0'</span><span class=\"p\">,</span> <span class=\"s1\">'last_index'</span><span class=\"p\">:</span> <span class=\"s1\">'149'</span><span class=\"p\">,</span> <span class=\"s1\">'max_results'</span><span class=\"p\">:</span> <span class=\"s1\">'300749'</span><span class=\"p\">}</span>\n</pre>\n<p>The other fields (<code>filtresPossibles</code> and <code>resultats</code>) are explored further the <a href=\"#4-analysis-of-the-search-output\" rel=\"nofollow\">section 4</a>.</p>\n<h4>A more complex search</h4>\n<p>A more sensible approach would be to search for special keyword over a certain period, for instance the job offers with that include the keyword <em>big data</em> since 2020-03-01 at 12h30.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">offres_emploi.utils</span> <span class=\"kn\">import</span> <span class=\"n\">dt_to_str_iso</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">start_dt</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"n\">end_dt</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"motsCles\"</span><span class=\"p\">:</span> <span class=\"s2\">\"data science\"</span><span class=\"p\">,</span>\n    <span class=\"s1\">'minCreationDate'</span><span class=\"p\">:</span> <span class=\"n\">dt_to_str_iso</span><span class=\"p\">(</span><span class=\"n\">start_dt</span><span class=\"p\">),</span>\n    <span class=\"s1\">'maxCreationDate'</span><span class=\"p\">:</span> <span class=\"n\">dt_to_str_iso</span><span class=\"p\">(</span><span class=\"n\">end_dt</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">search_on_big_data</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<p>The full list of parameters for the <code>search</code> request are available in the page <a href=\"https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/rechercher-par-criteres.html\" rel=\"nofollow\">Rechercher par crit\u00e8res</a>. These parameters are passed as dictionary to the parameter <code>params</code>. Note that the keys of this dictionnary are in camelCase, as in the <em>API Offres d'emploi v2</em> specification. Also, we feed a <code>datetime</code> object to the helper function <code>dt_to_str_iso</code> to convert it to a string with the appropriate <a href=\"https://www.w3.org/TR/NOTE-datetime\" rel=\"nofollow\">ISO-8601</a> format required by the API.</p>\n<h3>3.2. Referentiel</h3>\n<p>Getting reference source (<em>referentiel</em> in french) is more straightforward since it does not need any parameter ; one just need to specify the desired reference source:</p>\n<pre><span class=\"n\">referentiel_metiers</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">referentiel</span><span class=\"p\">(</span><span class=\"s1\">'metiers'</span><span class=\"p\">)</span>\n</pre>\n<p>It will output the following list of dictionnaries:</p>\n<pre><span class=\"p\">[{</span><span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'libelle'</span><span class=\"p\">:</span> <span class=\"s2\">\"M\u00e9tiers de l'environnement et du d\u00e9veloppement durable\"</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'2'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'libelle'</span><span class=\"p\">:</span> <span class=\"s1\">'M\u00e9tiers de la d\u00e9fense et de la s\u00e9curit\u00e9 publique (hors logistique, sant\u00e9, tertiaire, restauration)'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'3'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'libelle'</span><span class=\"p\">:</span> <span class=\"s2\">\"M\u00e9tiers du patrimoine et de la restauration d'oeuvres d'art\"</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'4'</span><span class=\"p\">,</span> <span class=\"s1\">'libelle'</span><span class=\"p\">:</span> <span class=\"s2\">\"M\u00e9tiers de l'intelligence \u00e9conomique\"</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'code'</span><span class=\"p\">:</span> <span class=\"s1\">'5'</span><span class=\"p\">,</span> <span class=\"s1\">'libelle'</span><span class=\"p\">:</span> <span class=\"s1\">'M\u00e9tiers de la recherche'</span><span class=\"p\">},</span>\n <span class=\"o\">...</span>\n <span class=\"p\">]</span>\n</pre>\n<p>The full list of <em>referentiel</em> is available in the docstring of the method or in the <a href=\"https://www.emploi-store-dev.fr/portail-developpeur-cms/home/catalogue-des-api/documentation-des-api/api/api-offres-demploi-v2/referentiels.html\" rel=\"nofollow\">R\u00e9f\u00e9rentiel page</a> of the API.</p>\n<h2>4. Analysis of the search output</h2>\n<p>The output of the <code>Api.search</code> is a dictionary with three entries:</p>\n<ul>\n<li><em>filtresPossibles</em></li>\n<li><em>resultats</em></li>\n<li><em>Content-Range</em></li>\n</ul>\n<p>The breakdown of the available job offers into different categories (type of contract, experience, qualification, nature of contract) are available in the <em>filtresPossibles</em> field and the detailed view of the job offers in <em>resultats</em> field.</p>\n<pre><span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"n\">search_on_big_data</span><span class=\"p\">[</span><span class=\"s1\">'filtresPossibles'</span><span class=\"p\">]</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span>  <span class=\"n\">search_on_big_data</span><span class=\"p\">[</span><span class=\"s1\">'resultats'</span><span class=\"p\">]</span>\n<span class=\"n\">content_range</span> <span class=\"o\">=</span> <span class=\"n\">search_on_big_data</span><span class=\"p\">[</span><span class=\"s1\">'Content-Range'</span><span class=\"p\">]</span>\n</pre>\n<p>The number of job offers available at this point in time for this search is given by:</p>\n<pre><span class=\"n\">content_range</span><span class=\"p\">[</span><span class=\"s1\">'max_results'</span><span class=\"p\">]</span>\n</pre>\n<h3>4.1. Aggregate view of job offers</h3>\n<p>The helper function <code>filters_to_df</code> is used to convert the field <code>filtresPossibles</code> in a suitable format:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">offres_emploi.utils</span> <span class=\"kn\">import</span> <span class=\"n\">filters_to_df</span>\n<span class=\"n\">filters_df</span> <span class=\"o\">=</span> <span class=\"n\">filters_to_df</span><span class=\"p\">(</span><span class=\"n\">filters</span><span class=\"p\">)</span>\n</pre>\n<p>It will output:</p>\n<pre>           <span class=\"n\">filtre</span> <span class=\"n\">valeur_possible</span>  <span class=\"n\">nb_resultats</span>\n<span class=\"mi\">0</span>     <span class=\"n\">typeContrat</span>             <span class=\"n\">CDD</span>             <span class=\"mi\">3</span>\n<span class=\"mi\">1</span>     <span class=\"n\">typeContrat</span>             <span class=\"n\">CDI</span>           <span class=\"mi\">138</span>\n<span class=\"mi\">2</span>     <span class=\"n\">typeContrat</span>             <span class=\"n\">LIB</span>            <span class=\"mi\">37</span>\n<span class=\"mi\">3</span>      <span class=\"n\">experience</span>               <span class=\"mi\">0</span>            <span class=\"mi\">15</span>\n<span class=\"mi\">4</span>      <span class=\"n\">experience</span>               <span class=\"mi\">1</span>            <span class=\"mi\">96</span>\n<span class=\"mi\">5</span>      <span class=\"n\">experience</span>               <span class=\"mi\">2</span>            <span class=\"mi\">47</span>\n<span class=\"mi\">6</span>      <span class=\"n\">experience</span>               <span class=\"mi\">3</span>            <span class=\"mi\">20</span>\n<span class=\"mi\">7</span>   <span class=\"n\">qualification</span>               <span class=\"mi\">0</span>             <span class=\"mi\">4</span>\n<span class=\"mi\">8</span>   <span class=\"n\">qualification</span>               <span class=\"mi\">9</span>            <span class=\"mi\">76</span>\n<span class=\"mi\">9</span>   <span class=\"n\">qualification</span>               <span class=\"n\">X</span>            <span class=\"mi\">98</span>\n<span class=\"mi\">10</span>  <span class=\"n\">natureContrat</span>              <span class=\"n\">E1</span>           <span class=\"mi\">141</span>\n<span class=\"mi\">11</span>  <span class=\"n\">natureContrat</span>              <span class=\"n\">NS</span>            <span class=\"mi\">37</span>\n</pre>\n<p>It is then straightforward to plot these figures using the data visualization library <a href=\"https://seaborn.pydata.org/\" rel=\"nofollow\">seaborn</a>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">seaborn</span> <span class=\"k\">as</span> <span class=\"nn\">sns</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">FacetGrid</span><span class=\"p\">(</span><span class=\"n\">filters_df</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"s2\">\"filtre\"</span><span class=\"p\">,</span> <span class=\"n\">sharex</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">sharey</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">g</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">barplot</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">=</span><span class=\"s2\">\"valeur_possible\"</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"o\">=</span><span class=\"s2\">\"nb_resultats\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"barplot of the breakdown\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a6f57491cc1304b2c9083a66989c2163c74505a/2f696d672f66696c746572732e706e67\"></p>\n<h3>4.2 Detailed view of job offers</h3>\n<p>The detailed view <em>resultats</em> has a more friendly structure and can be pass directly to a <code>pandas.DataFrame</code> constructor. For example, to  know the salary offered by the enterprises for this search:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"n\">results_df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"n\">salary_by_enterprise</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n <span class=\"n\">results_df</span><span class=\"p\">[[</span><span class=\"s1\">'entreprise'</span><span class=\"p\">,</span> <span class=\"s1\">'salaire'</span><span class=\"p\">]]</span>\n <span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">()</span>\n <span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">entreprise</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'nom'</span><span class=\"p\">),</span>\n           <span class=\"n\">salaire</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'commentaire'</span><span class=\"p\">)))</span>\n <span class=\"o\">.</span><span class=\"n\">dropna</span><span class=\"p\">(</span><span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"salaire\"</span><span class=\"p\">])</span>\n <span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">salaire</span><span class=\"o\">.</span><span class=\"n\">str</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"s2\">\"\\d+\"</span><span class=\"p\">)]</span>\n <span class=\"o\">.</span><span class=\"n\">sort_values</span><span class=\"p\">(</span><span class=\"s2\">\"salaire\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n<p>It will output:</p>\n<pre>                                  <span class=\"n\">entreprise</span>                        <span class=\"n\">salaire</span>\n<span class=\"mi\">73</span>                                <span class=\"n\">CLEEVEN</span> <span class=\"n\">SE</span>         <span class=\"mi\">25</span> <span class=\"o\">-</span> <span class=\"mi\">45</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">112</span>                                    <span class=\"n\">ASTEK</span>         <span class=\"mi\">30</span> <span class=\"o\">-</span> <span class=\"mi\">40</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">113</span>                                 <span class=\"n\">ADSERVIO</span>         <span class=\"mi\">30</span> <span class=\"o\">-</span> <span class=\"mi\">50</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">15</span>                                   <span class=\"n\">REDLEAN</span>         <span class=\"mi\">30</span> <span class=\"o\">-</span> <span class=\"mi\">50</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">29</span>                           <span class=\"n\">EOLE</span> <span class=\"n\">CONSULTING</span>         <span class=\"mi\">30</span> <span class=\"o\">-</span> <span class=\"mi\">50</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">66</span>                               <span class=\"n\">PHOENIX</span> <span class=\"n\">ISI</span>         <span class=\"mi\">32</span> <span class=\"o\">-</span> <span class=\"mi\">35</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">12</span>                          <span class=\"n\">DGA</span> <span class=\"n\">DRH</span> <span class=\"n\">CPP</span> <span class=\"n\">SDCO</span>         <span class=\"mi\">32</span> <span class=\"o\">-</span> <span class=\"mi\">52</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">109</span>                                <span class=\"n\">EXPERTEAM</span>         <span class=\"mi\">35</span> <span class=\"o\">-</span> <span class=\"mi\">45</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">47</span>                              <span class=\"n\">GROUPE</span> <span class=\"n\">ASTEN</span>         <span class=\"mi\">35</span> <span class=\"o\">-</span> <span class=\"mi\">48</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">16</span>                                 <span class=\"n\">ENERGISME</span>         <span class=\"mi\">35</span> <span class=\"o\">-</span> <span class=\"mi\">60</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">90</span>                                     <span class=\"n\">VISEO</span>         <span class=\"mi\">36</span> <span class=\"o\">-</span> <span class=\"mi\">50</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">80</span>   <span class=\"n\">SOCIETE</span> <span class=\"n\">ALTRAN</span><span class=\"p\">,</span> <span class=\"n\">Bat</span> <span class=\"n\">Teck</span> <span class=\"o\">-</span> <span class=\"n\">E</span><span class=\"o\">.</span> <span class=\"n\">Golf</span> <span class=\"n\">Park</span>         <span class=\"mi\">38</span> <span class=\"o\">-</span> <span class=\"mi\">42</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">14</span>                <span class=\"n\">AINABL</span> <span class=\"n\">TECHNOLOGIES</span> <span class=\"n\">FRANCE</span>         <span class=\"mi\">38</span> <span class=\"o\">-</span> <span class=\"mi\">50</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">68</span>   <span class=\"n\">SOCIETE</span> <span class=\"n\">ALTRAN</span><span class=\"p\">,</span> <span class=\"n\">Bat</span> <span class=\"n\">Teck</span> <span class=\"o\">-</span> <span class=\"n\">E</span><span class=\"o\">.</span> <span class=\"n\">Golf</span> <span class=\"n\">Park</span>         <span class=\"mi\">40</span> <span class=\"o\">-</span> <span class=\"mi\">45</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">28</span>                                   <span class=\"n\">Katchme</span>         <span class=\"mi\">40</span> <span class=\"o\">-</span> <span class=\"mi\">50</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">124</span>                                 <span class=\"n\">HUMAINEA</span>         <span class=\"mi\">42</span> <span class=\"o\">-</span> <span class=\"mi\">45</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">79</span>   <span class=\"n\">SOCIETE</span> <span class=\"n\">ALTRAN</span><span class=\"p\">,</span> <span class=\"n\">Bat</span> <span class=\"n\">Teck</span> <span class=\"o\">-</span> <span class=\"n\">E</span><span class=\"o\">.</span> <span class=\"n\">Golf</span> <span class=\"n\">Park</span>         <span class=\"mi\">45</span> <span class=\"o\">-</span> <span class=\"mi\">48</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">86</span>                          <span class=\"n\">DGA</span> <span class=\"n\">DRH</span> <span class=\"n\">CPP</span> <span class=\"n\">FDCO</span>  <span class=\"n\">A</span> <span class=\"n\">partir</span> <span class=\"n\">de</span> <span class=\"mi\">34</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">114</span>                     <span class=\"n\">SILICOM</span> <span class=\"n\">REGION</span> <span class=\"n\">OUEST</span>  <span class=\"n\">A</span> <span class=\"n\">partir</span> <span class=\"n\">de</span> <span class=\"mi\">35</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">17</span>                                      <span class=\"n\">SNEF</span>  <span class=\"n\">A</span> <span class=\"n\">partir</span> <span class=\"n\">de</span> <span class=\"mi\">40</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">96</span>                               <span class=\"n\">NODYA</span> <span class=\"n\">GROUP</span>  <span class=\"n\">A</span> <span class=\"n\">partir</span> <span class=\"n\">de</span> <span class=\"mi\">40</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">89</span>                       <span class=\"n\">QUADRA</span> <span class=\"n\">INFORMATIQUE</span>  <span class=\"n\">A</span> <span class=\"n\">partir</span> <span class=\"n\">de</span> <span class=\"mi\">45</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n<span class=\"mi\">35</span>                                   <span class=\"n\">Hunteed</span>  <span class=\"n\">A</span> <span class=\"n\">partir</span> <span class=\"n\">de</span> <span class=\"mi\">49</span> <span class=\"n\">k</span><span class=\"err\">\u20ac</span> <span class=\"n\">brut</span> <span class=\"n\">annuel</span>\n</pre>\n<p>Now you know where to apply.</p>\n\n          </div>"}, "last_serial": 7013270, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "bdcf1f9fff24bf9335b8ae3a8720f798", "sha256": "c004b1adba159a629982f55f6c3625d9ef91940170c7c99bf11b649ea6336670"}, "downloads": -1, "filename": "api_offres_emploi-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bdcf1f9fff24bf9335b8ae3a8720f798", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9909, "upload_time": "2020-04-13T22:37:34", "upload_time_iso_8601": "2020-04-13T22:37:34.795280Z", "url": "https://files.pythonhosted.org/packages/8c/61/3d02dd7f030dc1225f02183d5bf1649cce491de087591e2260357b82c564/api_offres_emploi-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c6280323045260a402e62b7a168ccee", "sha256": "589c640ab86e63ddcf37f56c3486fb11a4ed91f48be915cd760dec9697245ac7"}, "downloads": -1, "filename": "api-offres-emploi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2c6280323045260a402e62b7a168ccee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8791, "upload_time": "2020-04-13T22:37:36", "upload_time_iso_8601": "2020-04-13T22:37:36.798751Z", "url": "https://files.pythonhosted.org/packages/49/3a/5ba8dfd01d6adf2277962f6100d7fe9a567e83c7799268a8f24f3385b8ad/api-offres-emploi-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bdcf1f9fff24bf9335b8ae3a8720f798", "sha256": "c004b1adba159a629982f55f6c3625d9ef91940170c7c99bf11b649ea6336670"}, "downloads": -1, "filename": "api_offres_emploi-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bdcf1f9fff24bf9335b8ae3a8720f798", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9909, "upload_time": "2020-04-13T22:37:34", "upload_time_iso_8601": "2020-04-13T22:37:34.795280Z", "url": "https://files.pythonhosted.org/packages/8c/61/3d02dd7f030dc1225f02183d5bf1649cce491de087591e2260357b82c564/api_offres_emploi-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c6280323045260a402e62b7a168ccee", "sha256": "589c640ab86e63ddcf37f56c3486fb11a4ed91f48be915cd760dec9697245ac7"}, "downloads": -1, "filename": "api-offres-emploi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2c6280323045260a402e62b7a168ccee", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8791, "upload_time": "2020-04-13T22:37:36", "upload_time_iso_8601": "2020-04-13T22:37:36.798751Z", "url": "https://files.pythonhosted.org/packages/49/3a/5ba8dfd01d6adf2277962f6100d7fe9a567e83c7799268a8f24f3385b8ad/api-offres-emploi-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:47 2020"}