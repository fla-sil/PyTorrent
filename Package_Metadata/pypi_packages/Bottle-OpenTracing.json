{"info": {"author": "Daniel Jimenez", "author_email": "danijimenez010@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Bottle-OpenTracing\n\nThis package enables distributed tracing in Bottle applications via `The OpenTracing Project`.\nIt is heavily influenced by the [Flask Opentracing implementation](https://github.com/opentracing-contrib/python-flask).\n\nInstallation\n============\n\nRun the following command:\n\n```\n$ pip install Bottle-Opentracing\n```\n\nUsage\n=====\n\nThis Bottle extension allows for tracing of Bottle apps using the OpenTracing API. All\nthat it requires is for a ``BottleTracing`` tracer to be initialized using an\ninstance of an OpenTracing tracer. You can either trace all requests to your site, or use function decorators to trace certain individual requests.\n\n**Note:** `optional_args` in both cases are any number of attributes (as strings) of `bottle.Request` that you wish to set as tags on the created span\n\nInitialize\n----------\n\n`BottleTracing` wraps the tracer instance that's supported by opentracing. To create a `BottleTracing` object, you can either pass in a tracer object directly or a callable that returns the tracer object. For example:\n\n```python\nimport opentracing\nfrom bottle_opentracing import BottleTracing\n\nopentracing_tracer = ## some OpenTracing tracer implementation\ntracing = BottleTracing(opentracing_tracer, ...)\n```\n\nor\n\n```python\nimport opentracing\nfrom bottle_opentracing import BottleTracing\n\ndef initialize_tracer():\n    ...\n    return opentracing_tracer\n\ntracing = BottleTracing(initialize_tracer, ...)\n```\n\nTrace All Requests\n------------------\n\n```python\nimport opentracing\nfrom bottle_opentracing import BottleTracing\n\napp = bottle.app()\n\nopentracing_tracer = ## some OpenTracing tracer implementation\ntracing = BottleTracing(opentracing_tracer, True, app, [optional_args])\n```\n\nTrace Individual Requests\n-------------------------\n\n```python\nimport opentracing\nfrom bottle_opentracing import BottleTracing\n\napp = bottle.app()\n\nopentracing_tracer = ## some OpenTracing tracer implementation  \ntracing = BottleTracing(opentracing_tracer)\n\n@app.get('/some_url')\n@tracing.trace(optional_args)\ndef some_view_func():\n\t...     \n\treturn some_view \n```\n\nAccessing Spans Manually\n------------------------\n\nIn order to access the span for a request, we've provided an method `BottleTracing.get_span(request)` that returns the span for the request, if it is exists and is not finished. This can be used to log important events to the span, set tags, or create child spans to trace non-RPC events. If no request is passed in, the current request will be used.\n\nTracing an RPC\n--------------\n\nIf you want to make an RPC and continue an existing trace, you can inject the current span into the RPC. For example, if making an http request, the following code will continue your trace across the wire:\n\n```python\n@tracing.trace()\ndef some_view_func(request):\n    new_request = some_http_request\n    current_span = tracing.get_span(request)\n    text_carrier = {}\n    opentracing_tracer.inject(span, opentracing.Format.TEXT_MAP, text_carrier)\n    for k, v in text_carrier.iteritems():\n        new_request.add_header(k,v)\n    ... # make request\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/Creativelair/Bottle-Opentracing/archive/v0.0.5.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Creativelair/Bottle-Opentracing", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "Bottle-OpenTracing", "package_url": "https://pypi.org/project/Bottle-OpenTracing/", "platform": "any", "project_url": "https://pypi.org/project/Bottle-OpenTracing/", "project_urls": {"Download": "https://github.com/Creativelair/Bottle-Opentracing/archive/v0.0.5.tar.gz", "Homepage": "https://github.com/Creativelair/Bottle-Opentracing"}, "release_url": "https://pypi.org/project/Bottle-OpenTracing/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "OpenTracing support for Bottle applications", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Bottle-OpenTracing</h1>\n<p>This package enables distributed tracing in Bottle applications via <code>The OpenTracing Project</code>.\nIt is heavily influenced by the <a href=\"https://github.com/opentracing-contrib/python-flask\" rel=\"nofollow\">Flask Opentracing implementation</a>.</p>\n<h1>Installation</h1>\n<p>Run the following command:</p>\n<pre><code>$ pip install Bottle-Opentracing\n</code></pre>\n<h1>Usage</h1>\n<p>This Bottle extension allows for tracing of Bottle apps using the OpenTracing API. All\nthat it requires is for a <code>BottleTracing</code> tracer to be initialized using an\ninstance of an OpenTracing tracer. You can either trace all requests to your site, or use function decorators to trace certain individual requests.</p>\n<p><strong>Note:</strong> <code>optional_args</code> in both cases are any number of attributes (as strings) of <code>bottle.Request</code> that you wish to set as tags on the created span</p>\n<h2>Initialize</h2>\n<p><code>BottleTracing</code> wraps the tracer instance that's supported by opentracing. To create a <code>BottleTracing</code> object, you can either pass in a tracer object directly or a callable that returns the tracer object. For example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">opentracing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bottle_opentracing</span> <span class=\"kn\">import</span> <span class=\"n\">BottleTracing</span>\n\n<span class=\"n\">opentracing_tracer</span> <span class=\"o\">=</span> <span class=\"c1\">## some OpenTracing tracer implementation</span>\n<span class=\"n\">tracing</span> <span class=\"o\">=</span> <span class=\"n\">BottleTracing</span><span class=\"p\">(</span><span class=\"n\">opentracing_tracer</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">opentracing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bottle_opentracing</span> <span class=\"kn\">import</span> <span class=\"n\">BottleTracing</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">initialize_tracer</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"n\">opentracing_tracer</span>\n\n<span class=\"n\">tracing</span> <span class=\"o\">=</span> <span class=\"n\">BottleTracing</span><span class=\"p\">(</span><span class=\"n\">initialize_tracer</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h2>Trace All Requests</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">opentracing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bottle_opentracing</span> <span class=\"kn\">import</span> <span class=\"n\">BottleTracing</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">bottle</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"p\">()</span>\n\n<span class=\"n\">opentracing_tracer</span> <span class=\"o\">=</span> <span class=\"c1\">## some OpenTracing tracer implementation</span>\n<span class=\"n\">tracing</span> <span class=\"o\">=</span> <span class=\"n\">BottleTracing</span><span class=\"p\">(</span><span class=\"n\">opentracing_tracer</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">optional_args</span><span class=\"p\">])</span>\n</pre>\n<h2>Trace Individual Requests</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">opentracing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bottle_opentracing</span> <span class=\"kn\">import</span> <span class=\"n\">BottleTracing</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">bottle</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"p\">()</span>\n\n<span class=\"n\">opentracing_tracer</span> <span class=\"o\">=</span> <span class=\"c1\">## some OpenTracing tracer implementation  </span>\n<span class=\"n\">tracing</span> <span class=\"o\">=</span> <span class=\"n\">BottleTracing</span><span class=\"p\">(</span><span class=\"n\">opentracing_tracer</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'/some_url'</span><span class=\"p\">)</span>\n<span class=\"nd\">@tracing</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">(</span><span class=\"n\">optional_args</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_view_func</span><span class=\"p\">():</span>\n\t<span class=\"o\">...</span>     \n\t<span class=\"k\">return</span> <span class=\"n\">some_view</span> \n</pre>\n<h2>Accessing Spans Manually</h2>\n<p>In order to access the span for a request, we've provided an method <code>BottleTracing.get_span(request)</code> that returns the span for the request, if it is exists and is not finished. This can be used to log important events to the span, set tags, or create child spans to trace non-RPC events. If no request is passed in, the current request will be used.</p>\n<h2>Tracing an RPC</h2>\n<p>If you want to make an RPC and continue an existing trace, you can inject the current span into the RPC. For example, if making an http request, the following code will continue your trace across the wire:</p>\n<pre><span class=\"nd\">@tracing</span><span class=\"o\">.</span><span class=\"n\">trace</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_view_func</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">new_request</span> <span class=\"o\">=</span> <span class=\"n\">some_http_request</span>\n    <span class=\"n\">current_span</span> <span class=\"o\">=</span> <span class=\"n\">tracing</span><span class=\"o\">.</span><span class=\"n\">get_span</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"n\">text_carrier</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">opentracing_tracer</span><span class=\"o\">.</span><span class=\"n\">inject</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span> <span class=\"n\">opentracing</span><span class=\"o\">.</span><span class=\"n\">Format</span><span class=\"o\">.</span><span class=\"n\">TEXT_MAP</span><span class=\"p\">,</span> <span class=\"n\">text_carrier</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">text_carrier</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">():</span>\n        <span class=\"n\">new_request</span><span class=\"o\">.</span><span class=\"n\">add_header</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span> <span class=\"c1\"># make request</span>\n</pre>\n\n          </div>"}, "last_serial": 7139366, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "04396854649a57633fca96eeb96ffe4b", "sha256": "6cb22638f0ac4b2879f287fef7b167c0e2a59e4dae141b6174eb8e58027b58eb"}, "downloads": -1, "filename": "Bottle-OpenTracing-0.0.3.tar.gz", "has_sig": false, "md5_digest": "04396854649a57633fca96eeb96ffe4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6563, "upload_time": "2020-04-30T17:38:39", "upload_time_iso_8601": "2020-04-30T17:38:39.435447Z", "url": "https://files.pythonhosted.org/packages/eb/f7/d0726594cde16dd2db8f7f6c79edf87947d3dbd3335f5d53e5ea09b1aff0/Bottle-OpenTracing-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "381b9936790e024d39d43c7be739846f", "sha256": "9b714bf208469b91cf2f78677946dd0a8717e1d15bf283717856c2c8d6238798"}, "downloads": -1, "filename": "Bottle-OpenTracing-0.0.4.tar.gz", "has_sig": false, "md5_digest": "381b9936790e024d39d43c7be739846f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6530, "upload_time": "2020-04-30T17:44:43", "upload_time_iso_8601": "2020-04-30T17:44:43.063784Z", "url": "https://files.pythonhosted.org/packages/64/0d/2c1ced6a827afa8b30c521f2522c84ac2c91ffee905277a2639460652e41/Bottle-OpenTracing-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "bda0e87d9269e6e19e448dbf3cb6899b", "sha256": "dd5782fb5db46efc98ca7461e31e4596d52a2fde50023a0bdb71bb1d9614583c"}, "downloads": -1, "filename": "Bottle-OpenTracing-0.0.5.tar.gz", "has_sig": false, "md5_digest": "bda0e87d9269e6e19e448dbf3cb6899b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6535, "upload_time": "2020-04-30T18:03:23", "upload_time_iso_8601": "2020-04-30T18:03:23.560993Z", "url": "https://files.pythonhosted.org/packages/40/f1/406b4f5765fb50b23d37aa1ef03956665c00e9955177c787daac61a91446/Bottle-OpenTracing-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bda0e87d9269e6e19e448dbf3cb6899b", "sha256": "dd5782fb5db46efc98ca7461e31e4596d52a2fde50023a0bdb71bb1d9614583c"}, "downloads": -1, "filename": "Bottle-OpenTracing-0.0.5.tar.gz", "has_sig": false, "md5_digest": "bda0e87d9269e6e19e448dbf3cb6899b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6535, "upload_time": "2020-04-30T18:03:23", "upload_time_iso_8601": "2020-04-30T18:03:23.560993Z", "url": "https://files.pythonhosted.org/packages/40/f1/406b4f5765fb50b23d37aa1ef03956665c00e9955177c787daac61a91446/Bottle-OpenTracing-0.0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:33 2020"}