{"info": {"author": "Daniil Minukhin", "author_email": "ddddsa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Documentation", "Topic :: Utilities"], "description": "[![](https://img.shields.io/pypi/v/foliantcontrib.templateparser.svg)](https://pypi.org/project/foliantcontrib.templateparser/)  [![](https://img.shields.io/github/v/tag/foliant-docs/foliantcontrib.templateparser.svg?label=GitHub)](https://github.com/foliant-docs/foliantcontrib.templateparser)\n\n# TemplateParser preprocessor for Foliant\n\nPreprocessor which allows to use templates in Foliant source files. Preprocessor now supports only [Jinja2](http://jinja.pocoo.org/) templating engine, but more can be added easily.\n\n## Installation\n\n```bash\n$ pip install foliantcontrib.templateparser\n```\n\n## Config\n\nAll params that are stated in foliant.yml are considered global params. All of them may be overriden in template tag options, which have higher priority.\n\n```yaml\npreprocessors:\n    - templateparser:\n        engine: jinja2\n        engine_params:\n            root: '/usr/src/app'\n        context:\n            param1: 1008\n            param2: 'Kittens'\n        ext_context: context.yml\n        param3: 'Puppies'\n```\n\n`engine`\n:   name of the template engine which will be used to process template. Supported engines right now: `jinja2`.\n\n`engine_params`\n:   dictionary with parameters which will be transfered to the template engine.\n\n`context`\n:   dictionary with variables which will be redirected to the template.\n\n`ext_context`\n:   path to YAML- or JSON-file with context dictionary. (relative to current md-file)\n\n_All parameters with other names are also transfered to the template, as if they appeared inside the `context` dictionary. (`param3` in the above example)_\n\n> Please note that even if this may seem convenient, it is preferred to include template variables in the `context` dictionary, as in future more reserved parameters may be added which may conflict with your stray variables.\n\nIf some variable names overlap among these methods to supply context, preprocessor uses this priority order:\n\n1. Context dictionary.\n2. Stray variables.\n3. External context file.\n\n## Usage\n\nTo use the template in a Markdown file just insert a tag of the template engine name, for example:\n\n```html\nThis is ordinary markdown text.\n<jinja2>\nThis is a Jinja2 template:\nI can count to five!\n{% for i in range(5) %}{{ i + 1 }}{% endfor %}\n</jinja2>\n```\n\nAfter making a document with Foliant this will be transformed to:\n\n```\nThis is ordinary markdown text.\n\nThis is a Jinja2 template:\nI can count to five!\n12345\n```\n\nYou can also use a general `<template>` tag, but in this case you have to specify the engine you want to use in the `engine` parameter:\n\n```html\nThis is ordinary markdown text.\n<template engine=\"jinja2\">\nThis is a Jinja2 template:\nI can count to five!\n{% for i in range(5) %}{{ i + 1 }}{% endfor %}\n</template>\n```\n\n### Integration with metadata\n\nTemplates support latest Foliant [metadata](https://foliant-docs.github.io/docs/cli/meta/) functionality. You can find the meta dictionary for current section under `meta` variable inside template:\n\n```html\n<meta status=\"ready\" title=\"Custom Title\" author=\"John\"></meta>\n\n<jinja2>\nDocument status: {{ meta.status }}\n\nThe document \"{{ meta.title }}\" is brought to you by {{ meta.author }}\n</jinja2>\n```\n\nResult:\n\n```html\nDocument status: ready\n\nThe document \"Custom Title\" is brought to you by John\n```\n\nYou can also find the whole project's `Meta` object under `meta_object` variable inside template:\n\n```html\n<meta status=\"ready\" title=\"Custom Title\" author=\"John\"></meta>\n\n<jinja2>\nList of chapters in this project:\n{% for chapter in meta_object.chapters %}\n* {{ chapter.name }}\n{%- endfor %}\n</jinja2>\n```\n\nResult:\n\n```html\nList of chapters in this project:\n\n* index\n* sub\n* auth\n```\n\n### Sending variables to template\n\nTo send a variable to template, add them into the `context` option. This option accepts `yaml` dictionary format.\n\n> Please note that foliant doesn't support multiline tag options yet, so use one-line dictionary format {'key1': value1, ...}\n\n```html\n<jinja2 context=\"{'name': Andy, 'age': 8}\">\nHi, my name is {{name}}!\nI am {{age}} years old.\n{% for prev in range(age - 1, 0, -1) %}\nThe year before I was {{prev}} years old.\n{% endfor %}\n</jinja2>\n```\n\nResult:\n\n```\nHi, my name is Andy!\nI am 8 years old.\n\nThe year before I was 7 years old.\n\nThe year before I was 6 years old.\n\nThe year before I was 5 years old.\n\nThe year before I was 4 years old.\n\nThe year before I was 3 years old.\n\nThe year before I was 2 years old.\n\nThe year before I was 1 years old.\n```\n\n### Extends and includes\n\nExtends and includes work in templates. The path of the extending\\\\included file is relative to the Markdown file where the template lives.\n\nIn Jinja2 engine you can override the path of the included\\\\extended files with `root` engine_param. **Note that this param is relative to project root.**\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/foliant-docs/foliantcontrib.templateparser", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "foliantcontrib.templateparser", "package_url": "https://pypi.org/project/foliantcontrib.templateparser/", "platform": "any", "project_url": "https://pypi.org/project/foliantcontrib.templateparser/", "project_urls": {"Homepage": "https://github.com/foliant-docs/foliantcontrib.templateparser"}, "release_url": "https://pypi.org/project/foliantcontrib.templateparser/1.0.3/", "requires_dist": ["foliant (>=1.0.8)", "foliantcontrib.utils.combined-options (>=1.0.4)", "foliantcontrib.utils.preprocessor-ext (>=1.0.0)", "foliantcontrib.meta (>=1.2.0)", "jinja2"], "requires_python": "", "summary": "Template parser preprocessor for Foliant.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/foliantcontrib.templateparser/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a51f35f07311ae5ae6ecbec678b9c5791e31060/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666f6c69616e74636f6e747269622e74656d706c6174657061727365722e737667\"></a>  <a href=\"https://github.com/foliant-docs/foliantcontrib.templateparser\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/27fcc2e1fea477f278b0a2f71431f01eeb929e79/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f666f6c69616e742d646f63732f666f6c69616e74636f6e747269622e74656d706c6174657061727365722e7376673f6c6162656c3d476974487562\"></a></p>\n<h1>TemplateParser preprocessor for Foliant</h1>\n<p>Preprocessor which allows to use templates in Foliant source files. Preprocessor now supports only <a href=\"http://jinja.pocoo.org/\" rel=\"nofollow\">Jinja2</a> templating engine, but more can be added easily.</p>\n<h2>Installation</h2>\n<pre>$ pip install foliantcontrib.templateparser\n</pre>\n<h2>Config</h2>\n<p>All params that are stated in foliant.yml are considered global params. All of them may be overriden in template tag options, which have higher priority.</p>\n<pre><span class=\"nt\">preprocessors</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">templateparser</span><span class=\"p\">:</span>\n        <span class=\"nt\">engine</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">jinja2</span>\n        <span class=\"nt\">engine_params</span><span class=\"p\">:</span>\n            <span class=\"nt\">root</span><span class=\"p\">:</span> <span class=\"s\">'/usr/src/app'</span>\n        <span class=\"nt\">context</span><span class=\"p\">:</span>\n            <span class=\"nt\">param1</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1008</span>\n            <span class=\"nt\">param2</span><span class=\"p\">:</span> <span class=\"s\">'Kittens'</span>\n        <span class=\"nt\">ext_context</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">context.yml</span>\n        <span class=\"nt\">param3</span><span class=\"p\">:</span> <span class=\"s\">'Puppies'</span>\n</pre>\n<p><code>engine</code>\n:   name of the template engine which will be used to process template. Supported engines right now: <code>jinja2</code>.</p>\n<p><code>engine_params</code>\n:   dictionary with parameters which will be transfered to the template engine.</p>\n<p><code>context</code>\n:   dictionary with variables which will be redirected to the template.</p>\n<p><code>ext_context</code>\n:   path to YAML- or JSON-file with context dictionary. (relative to current md-file)</p>\n<p><em>All parameters with other names are also transfered to the template, as if they appeared inside the <code>context</code> dictionary. (<code>param3</code> in the above example)</em></p>\n<blockquote>\n<p>Please note that even if this may seem convenient, it is preferred to include template variables in the <code>context</code> dictionary, as in future more reserved parameters may be added which may conflict with your stray variables.</p>\n</blockquote>\n<p>If some variable names overlap among these methods to supply context, preprocessor uses this priority order:</p>\n<ol>\n<li>Context dictionary.</li>\n<li>Stray variables.</li>\n<li>External context file.</li>\n</ol>\n<h2>Usage</h2>\n<p>To use the template in a Markdown file just insert a tag of the template engine name, for example:</p>\n<pre>This is ordinary markdown text.\n<span class=\"p\">&lt;</span><span class=\"nt\">jinja2</span><span class=\"p\">&gt;</span>\nThis is a Jinja2 template:\nI can count to five!\n{% for i in range(5) %}{{ i + 1 }}{% endfor %}\n<span class=\"p\">&lt;/</span><span class=\"nt\">jinja2</span><span class=\"p\">&gt;</span>\n</pre>\n<p>After making a document with Foliant this will be transformed to:</p>\n<pre><code>This is ordinary markdown text.\n\nThis is a Jinja2 template:\nI can count to five!\n12345\n</code></pre>\n<p>You can also use a general <code>&lt;template&gt;</code> tag, but in this case you have to specify the engine you want to use in the <code>engine</code> parameter:</p>\n<pre>This is ordinary markdown text.\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span> <span class=\"na\">engine</span><span class=\"o\">=</span><span class=\"s\">\"jinja2\"</span><span class=\"p\">&gt;</span>\nThis is a Jinja2 template:\nI can count to five!\n{% for i in range(5) %}{{ i + 1 }}{% endfor %}\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</pre>\n<h3>Integration with metadata</h3>\n<p>Templates support latest Foliant <a href=\"https://foliant-docs.github.io/docs/cli/meta/\" rel=\"nofollow\">metadata</a> functionality. You can find the meta dictionary for current section under <code>meta</code> variable inside template:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">status</span><span class=\"o\">=</span><span class=\"s\">\"ready\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"Custom Title\"</span> <span class=\"na\">author</span><span class=\"o\">=</span><span class=\"s\">\"John\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">meta</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">jinja2</span><span class=\"p\">&gt;</span>\nDocument status: {{ meta.status }}\n\nThe document \"{{ meta.title }}\" is brought to you by {{ meta.author }}\n<span class=\"p\">&lt;/</span><span class=\"nt\">jinja2</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Result:</p>\n<pre>Document status: ready\n\nThe document \"Custom Title\" is brought to you by John\n</pre>\n<p>You can also find the whole project's <code>Meta</code> object under <code>meta_object</code> variable inside template:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">status</span><span class=\"o\">=</span><span class=\"s\">\"ready\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"Custom Title\"</span> <span class=\"na\">author</span><span class=\"o\">=</span><span class=\"s\">\"John\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">meta</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">jinja2</span><span class=\"p\">&gt;</span>\nList of chapters in this project:\n{% for chapter in meta_object.chapters %}\n* {{ chapter.name }}\n{%- endfor %}\n<span class=\"p\">&lt;/</span><span class=\"nt\">jinja2</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Result:</p>\n<pre>List of chapters in this project:\n\n* index\n* sub\n* auth\n</pre>\n<h3>Sending variables to template</h3>\n<p>To send a variable to template, add them into the <code>context</code> option. This option accepts <code>yaml</code> dictionary format.</p>\n<blockquote>\n<p>Please note that foliant doesn't support multiline tag options yet, so use one-line dictionary format {'key1': value1, ...}</p>\n</blockquote>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">jinja2</span> <span class=\"na\">context</span><span class=\"o\">=</span><span class=\"s\">\"{'name': Andy, 'age': 8}\"</span><span class=\"p\">&gt;</span>\nHi, my name is {{name}}!\nI am {{age}} years old.\n{% for prev in range(age - 1, 0, -1) %}\nThe year before I was {{prev}} years old.\n{% endfor %}\n<span class=\"p\">&lt;/</span><span class=\"nt\">jinja2</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Result:</p>\n<pre><code>Hi, my name is Andy!\nI am 8 years old.\n\nThe year before I was 7 years old.\n\nThe year before I was 6 years old.\n\nThe year before I was 5 years old.\n\nThe year before I was 4 years old.\n\nThe year before I was 3 years old.\n\nThe year before I was 2 years old.\n\nThe year before I was 1 years old.\n</code></pre>\n<h3>Extends and includes</h3>\n<p>Extends and includes work in templates. The path of the extending\\included file is relative to the Markdown file where the template lives.</p>\n<p>In Jinja2 engine you can override the path of the included\\extended files with <code>root</code> engine_param. <strong>Note that this param is relative to project root.</strong></p>\n\n          </div>"}, "last_serial": 6925584, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "63db1875217af20e6843ede8057dc928", "sha256": "c446c219b9b96e50c23cc8097e4929435150e7db3ee72862782d0a1e6e4f3576"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63db1875217af20e6843ede8057dc928", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7198, "upload_time": "2019-05-15T07:05:18", "upload_time_iso_8601": "2019-05-15T07:05:18.499607Z", "url": "https://files.pythonhosted.org/packages/63/a2/9777ddcfdc373ad96d0529232ff2abd65900883dd3b2e259a7f4d7fe8b26/foliantcontrib.templateparser-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1ac3c9849324610b8dfa537410aca1b", "sha256": "775a9657e1080a84be4e40654e2e27ef954509596017840ab220d1a6da04f928"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d1ac3c9849324610b8dfa537410aca1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5097, "upload_time": "2019-05-15T07:05:20", "upload_time_iso_8601": "2019-05-15T07:05:20.602785Z", "url": "https://files.pythonhosted.org/packages/dd/12/4627458c21bbdfbd8208dab553102e116fc4a33959212d49d1a08f72702c/foliantcontrib.templateparser-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "af054bf06f4127e2e09df22938c9c8e4", "sha256": "25ad527d700ef833689a16a1f59d17715436d7aa8abbe2c0708a8497b791fdf9"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "af054bf06f4127e2e09df22938c9c8e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6869, "upload_time": "2019-05-20T09:24:49", "upload_time_iso_8601": "2019-05-20T09:24:49.906315Z", "url": "https://files.pythonhosted.org/packages/47/3b/2e4406903ddb68eae4e98f0ff1723c2310ac3f528b644f25cde42b6bb62f/foliantcontrib.templateparser-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd89b3c9f011b03c094950761bf92e26", "sha256": "c788f32649673dd12e6257fa79714093bdcc52f8c667b01a59f007c236055c11"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bd89b3c9f011b03c094950761bf92e26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4848, "upload_time": "2019-05-20T09:24:51", "upload_time_iso_8601": "2019-05-20T09:24:51.029601Z", "url": "https://files.pythonhosted.org/packages/7c/d3/4b8a682d8a48906538ef73f7e6e7d4334d0da71d982f584bc29df325c875/foliantcontrib.templateparser-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "45c37323aaa294e00376a5af75dcb92d", "sha256": "bd52864eedcefe9c07f7df4389447875f55011ba8812fed91566718db0bcf39a"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "45c37323aaa294e00376a5af75dcb92d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6909, "upload_time": "2019-06-14T13:18:43", "upload_time_iso_8601": "2019-06-14T13:18:43.634780Z", "url": "https://files.pythonhosted.org/packages/4a/f9/844e1e29de743a3795987ef613e8077df995fe96f64eef686459c34f35d7/foliantcontrib.templateparser-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa0891d6344fbd79e60762d0a971054b", "sha256": "f25f19b50571b3e7b3f1b7efad37b6c04f14be86e2372753cfa0263c39fcd4b0"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.2.tar.gz", "has_sig": false, "md5_digest": "fa0891d6344fbd79e60762d0a971054b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4903, "upload_time": "2019-06-14T13:18:44", "upload_time_iso_8601": "2019-06-14T13:18:44.824568Z", "url": "https://files.pythonhosted.org/packages/e4/9d/9899abd7d86ebc50326648d2c92307c3628a6193d702ac98de1426760dd5/foliantcontrib.templateparser-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "39099eb1e7894ffca6b6e5e51996e524", "sha256": "832ae505b4d497a4e2a4c00f6a8d4f704c0228ccc87753a0936592669c11e8a8"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "39099eb1e7894ffca6b6e5e51996e524", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7379, "upload_time": "2020-04-01T06:37:55", "upload_time_iso_8601": "2020-04-01T06:37:55.947121Z", "url": "https://files.pythonhosted.org/packages/7d/7b/9f76d8b9667faedf5d3e3eedb66b494a2fde04530860c0afc59637e80888/foliantcontrib.templateparser-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efc902a7caa3c811f79fe4a954ef0d79", "sha256": "883178bbfac0f6370294351be2dfc7fb6b6c0748a41570fa265ed183668f258a"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.3.tar.gz", "has_sig": false, "md5_digest": "efc902a7caa3c811f79fe4a954ef0d79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5483, "upload_time": "2020-04-01T06:37:57", "upload_time_iso_8601": "2020-04-01T06:37:57.130481Z", "url": "https://files.pythonhosted.org/packages/04/9c/661429710dc8de427c6f87cf7e9a93acf74963da1509282d373757635097/foliantcontrib.templateparser-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "39099eb1e7894ffca6b6e5e51996e524", "sha256": "832ae505b4d497a4e2a4c00f6a8d4f704c0228ccc87753a0936592669c11e8a8"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "39099eb1e7894ffca6b6e5e51996e524", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7379, "upload_time": "2020-04-01T06:37:55", "upload_time_iso_8601": "2020-04-01T06:37:55.947121Z", "url": "https://files.pythonhosted.org/packages/7d/7b/9f76d8b9667faedf5d3e3eedb66b494a2fde04530860c0afc59637e80888/foliantcontrib.templateparser-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efc902a7caa3c811f79fe4a954ef0d79", "sha256": "883178bbfac0f6370294351be2dfc7fb6b6c0748a41570fa265ed183668f258a"}, "downloads": -1, "filename": "foliantcontrib.templateparser-1.0.3.tar.gz", "has_sig": false, "md5_digest": "efc902a7caa3c811f79fe4a954ef0d79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5483, "upload_time": "2020-04-01T06:37:57", "upload_time_iso_8601": "2020-04-01T06:37:57.130481Z", "url": "https://files.pythonhosted.org/packages/04/9c/661429710dc8de427c6f87cf7e9a93acf74963da1509282d373757635097/foliantcontrib.templateparser-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:07 2020"}