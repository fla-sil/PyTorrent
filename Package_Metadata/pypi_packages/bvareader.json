{"info": {"author": "Luk\u00e1\u0161 Hejtmy Hejtm\u00e1nek", "author_email": "hejtmy@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# BVA reader\nPython package which reads and parses xml data from LF in Motol.\n\n## Installation\nThe project is currently hosted on test PyPi and can be downloaded from such\n[https://test.pypi.org/project/bvareader/](https://test.pypi.org/project/bvareader/)\n\n\n## Use examples\nMain use can be through the command line prompts, which doesn't require you to run your own preprocessing scripts. But if you prefer, you can preprocess and save the data in your own way.\n\n```python\nfrom bvareader.reader import read_xml_bva\nfrom bvareader.reader import read_xml_sync\nfrom bvareader.reader import read_sync_file\nfrom bvareader.reader import save_csv\n\nfrom bvareader.preprocessing import preprocess_bva_data\nfrom bvareader.preprocessing import add_rotation\n\npd_bva = read_xml_bva(\"example_data/example.xml\")\npd_bva_clean = preprocess_bva_data(pd_bva)\npd_bva = add_rotation(pd_bva)\n\nsave_csv(pd_bva_clean, \"bva.csv\")\nsave_csv(pd_bva, \"bva_full.csv\")\n\nbva_sync = read_xml_sync(\"example_data/example.xml\")\nsave_csv(pd_sync, \"bva_sync.csv\")\n\npd_sync = read_sync_file(\"example_data/example.csv\")\nsave_csv(pd_sync, \"sync.csv\")\n```\n\n#### Timestamp\nBva outputs real timestamp (date and time of each recording). This package converts this datetime number as the POSIX timestamp (number of seconds since 1.1.1970) as per `datetime.timestamp()` function described in [here](https://docs.python.org/3/library/datetime.html#datetime.datetime)\n\n## Command line prompt\nBy installing the package from PyPI, you will get the python entry point which you can use in the command line. You can investigate each command with the `--help` tag. e.g. `bva-preprocess-xmx --help`. Mostly you will need only the `bva-preprocess-xml` and potentially `bva-settings-to-csv` commands\n\nBVA xml output preprocessing\n```bash\nbva-preprocess-xml \"path_to_xml\" -o/--output \"output-prefix\"\nbva-settings-to-csv \"path_to_xml\"-o/--output \"output-prefix\"\nbva-phases-table \"path_to_xml\" -o/--output \"output-prefix\"\nbva-measures-start-stop-table \"path_to_xml\" -o/--output \"output-prefix\"\n```\n\n### FAQ\nQ: The command line commands are not found.\n\nA: If you are using conda or virtual envs, make sure you are in a correct environment\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hejtmy/bva-reader", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bvareader", "package_url": "https://pypi.org/project/bvareader/", "platform": "", "project_url": "https://pypi.org/project/bvareader/", "project_urls": {"Homepage": "https://github.com/hejtmy/bva-reader"}, "release_url": "https://pypi.org/project/bvareader/0.2.0/", "requires_dist": ["pandas", "numpy (>=1.16.0)", "matplotlib", "Click (>=7.0)"], "requires_python": "", "summary": "Package to read and process BVA data from LF Motol", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BVA reader</h1>\n<p>Python package which reads and parses xml data from LF in Motol.</p>\n<h2>Installation</h2>\n<p>The project is currently hosted on test PyPi and can be downloaded from such\n<a href=\"https://test.pypi.org/project/bvareader/\" rel=\"nofollow\">https://test.pypi.org/project/bvareader/</a></p>\n<h2>Use examples</h2>\n<p>Main use can be through the command line prompts, which doesn't require you to run your own preprocessing scripts. But if you prefer, you can preprocess and save the data in your own way.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bvareader.reader</span> <span class=\"kn\">import</span> <span class=\"n\">read_xml_bva</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bvareader.reader</span> <span class=\"kn\">import</span> <span class=\"n\">read_xml_sync</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bvareader.reader</span> <span class=\"kn\">import</span> <span class=\"n\">read_sync_file</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bvareader.reader</span> <span class=\"kn\">import</span> <span class=\"n\">save_csv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">bvareader.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">preprocess_bva_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bvareader.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">add_rotation</span>\n\n<span class=\"n\">pd_bva</span> <span class=\"o\">=</span> <span class=\"n\">read_xml_bva</span><span class=\"p\">(</span><span class=\"s2\">\"example_data/example.xml\"</span><span class=\"p\">)</span>\n<span class=\"n\">pd_bva_clean</span> <span class=\"o\">=</span> <span class=\"n\">preprocess_bva_data</span><span class=\"p\">(</span><span class=\"n\">pd_bva</span><span class=\"p\">)</span>\n<span class=\"n\">pd_bva</span> <span class=\"o\">=</span> <span class=\"n\">add_rotation</span><span class=\"p\">(</span><span class=\"n\">pd_bva</span><span class=\"p\">)</span>\n\n<span class=\"n\">save_csv</span><span class=\"p\">(</span><span class=\"n\">pd_bva_clean</span><span class=\"p\">,</span> <span class=\"s2\">\"bva.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">save_csv</span><span class=\"p\">(</span><span class=\"n\">pd_bva</span><span class=\"p\">,</span> <span class=\"s2\">\"bva_full.csv\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">bva_sync</span> <span class=\"o\">=</span> <span class=\"n\">read_xml_sync</span><span class=\"p\">(</span><span class=\"s2\">\"example_data/example.xml\"</span><span class=\"p\">)</span>\n<span class=\"n\">save_csv</span><span class=\"p\">(</span><span class=\"n\">pd_sync</span><span class=\"p\">,</span> <span class=\"s2\">\"bva_sync.csv\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">pd_sync</span> <span class=\"o\">=</span> <span class=\"n\">read_sync_file</span><span class=\"p\">(</span><span class=\"s2\">\"example_data/example.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">save_csv</span><span class=\"p\">(</span><span class=\"n\">pd_sync</span><span class=\"p\">,</span> <span class=\"s2\">\"sync.csv\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Timestamp</h4>\n<p>Bva outputs real timestamp (date and time of each recording). This package converts this datetime number as the POSIX timestamp (number of seconds since 1.1.1970) as per <code>datetime.timestamp()</code> function described in <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" rel=\"nofollow\">here</a></p>\n<h2>Command line prompt</h2>\n<p>By installing the package from PyPI, you will get the python entry point which you can use in the command line. You can investigate each command with the <code>--help</code> tag. e.g. <code>bva-preprocess-xmx --help</code>. Mostly you will need only the <code>bva-preprocess-xml</code> and potentially <code>bva-settings-to-csv</code> commands</p>\n<p>BVA xml output preprocessing</p>\n<pre>bva-preprocess-xml <span class=\"s2\">\"path_to_xml\"</span> -o/--output <span class=\"s2\">\"output-prefix\"</span>\nbva-settings-to-csv <span class=\"s2\">\"path_to_xml\"</span>-o/--output <span class=\"s2\">\"output-prefix\"</span>\nbva-phases-table <span class=\"s2\">\"path_to_xml\"</span> -o/--output <span class=\"s2\">\"output-prefix\"</span>\nbva-measures-start-stop-table <span class=\"s2\">\"path_to_xml\"</span> -o/--output <span class=\"s2\">\"output-prefix\"</span>\n</pre>\n<h3>FAQ</h3>\n<p>Q: The command line commands are not found.</p>\n<p>A: If you are using conda or virtual envs, make sure you are in a correct environment</p>\n\n          </div>"}, "last_serial": 5765802, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "04499d5bd3a5abbf1590388d13b1841e", "sha256": "7fbb438f2be23e6e6802ca92db9c4844e6de629ba0f5f24400ba5d95f85fcbd1"}, "downloads": -1, "filename": "bvareader-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "04499d5bd3a5abbf1590388d13b1841e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8631, "upload_time": "2019-09-01T02:26:44", "upload_time_iso_8601": "2019-09-01T02:26:44.785338Z", "url": "https://files.pythonhosted.org/packages/9b/ad/6659137589e1c0b570436b2dd332c4f616588fce4835654dfa9bf610b9d4/bvareader-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7dbbf5fb8e664554f4b2feba7771f17e", "sha256": "bdb2de7308116ac6eb8c0e9e8e3fe4da7364eac3f0f1b1bff35e928b532b263b"}, "downloads": -1, "filename": "bvareader-0.1.3.tar.gz", "has_sig": false, "md5_digest": "7dbbf5fb8e664554f4b2feba7771f17e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6616, "upload_time": "2019-09-01T02:26:48", "upload_time_iso_8601": "2019-09-01T02:26:48.773697Z", "url": "https://files.pythonhosted.org/packages/63/1f/bcdae9cffe6341754cf6f32dd3b4efc71d0a3d656d61e21be63b38e1320d/bvareader-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3a47c9bcb9d2bb3c9d5435579db28159", "sha256": "24c65a68580dee9a9feb2e4db4caf829d7b02defe861cf324b42cfa8f39cb386"}, "downloads": -1, "filename": "bvareader-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a47c9bcb9d2bb3c9d5435579db28159", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9029, "upload_time": "2019-09-01T02:26:47", "upload_time_iso_8601": "2019-09-01T02:26:47.100090Z", "url": "https://files.pythonhosted.org/packages/3f/04/b312c9774b527cc2abfe17492e5bafe691c93d7b4114b706683e83238099/bvareader-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46e79f0a6b668b2b1dee17610680e1a5", "sha256": "ff74834ef5bcfad06cf28919f20e904a94b8c62fdc7bcf31feda453508ddbf6b"}, "downloads": -1, "filename": "bvareader-0.2.0.tar.gz", "has_sig": false, "md5_digest": "46e79f0a6b668b2b1dee17610680e1a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6789, "upload_time": "2019-09-01T02:26:49", "upload_time_iso_8601": "2019-09-01T02:26:49.848294Z", "url": "https://files.pythonhosted.org/packages/9f/a0/c22cc290a8c0f44edbcb9b1bfe18b2abf59f7b4b3a0ada5769a7fae15707/bvareader-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a47c9bcb9d2bb3c9d5435579db28159", "sha256": "24c65a68580dee9a9feb2e4db4caf829d7b02defe861cf324b42cfa8f39cb386"}, "downloads": -1, "filename": "bvareader-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3a47c9bcb9d2bb3c9d5435579db28159", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9029, "upload_time": "2019-09-01T02:26:47", "upload_time_iso_8601": "2019-09-01T02:26:47.100090Z", "url": "https://files.pythonhosted.org/packages/3f/04/b312c9774b527cc2abfe17492e5bafe691c93d7b4114b706683e83238099/bvareader-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46e79f0a6b668b2b1dee17610680e1a5", "sha256": "ff74834ef5bcfad06cf28919f20e904a94b8c62fdc7bcf31feda453508ddbf6b"}, "downloads": -1, "filename": "bvareader-0.2.0.tar.gz", "has_sig": false, "md5_digest": "46e79f0a6b668b2b1dee17610680e1a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6789, "upload_time": "2019-09-01T02:26:49", "upload_time_iso_8601": "2019-09-01T02:26:49.848294Z", "url": "https://files.pythonhosted.org/packages/9f/a0/c22cc290a8c0f44edbcb9b1bfe18b2abf59f7b4b3a0ada5769a7fae15707/bvareader-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:54 2020"}