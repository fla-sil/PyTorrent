{"info": {"author": "Ying Jin, Eric Paniagua, Oliver Tam, Molly Hammell", "author_email": "yjin@cshl.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: Unix", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "TEToolkit\n=========\n\nVersion: 2.0.3\n\n*NOTE* TEtranscripts and TEcount rely on specially curated GTF files, which are not\npackaged with this software due to their size. Please go to \n`our website <http://hammelllab.labsites.cshl.edu/software#TEToolkit>`_\nfor instructions to download the curated GTF files.\n\nTEtranscripts and TEcount takes RNA-seq (and similar data) and annotates reads to both\ngenes & transposable elements. TEtranscripts then performs differential analysis using\nDESeq2.\n\n\n`Github Page <https://github.com/mhammell-laboratory/tetoolkit>`_\n\n`Pypi Page <https://pypi.python.org/pypi/TEToolkit>`_\n\n`MHammell Lab <http://hammelllab.labsites.cshl.edu/software>`_\n\nCreated by Ying Jin, Eric Paniagua, Oliver Tam & Molly Hammell, February 2014\n\nCopyright (C) 2014-2018 Ying Jin, Eric Paniagua, Oliver Tam & Molly Hammell\n\nContact: Ying Jin (yjin@cshl.edu)\n\nRequirements\n------------\n\nPython:     2.6.x or 2.7.x (not tested in Python 3.x)\n\npysam:      0.9.x or greater\n\nR:          2.15.x or greater\n\nDESeq2:     1.10.x or greater\n\n\nInstallation\n------------\n\n1. Download compressed tarball.\n2. Unpack tarball.\n3. Navigate into unpacked directory.\n4. Run the following::\n\n    $ python setup.py install\n\nIf you want to install locally (e.g. /local/home/usr),\nrun this command instead::\n\n    $ python setup.py install --prefix /local/home/usr\n\n*NOTE* In the above example, you must add\n\n    /local/home/usr/bin\n\nto the PATH variable, and\n\n     /local/home/usr/lib/python2.X/site-packages \n\nto the PYTHONPATH variable, where python2.X refers to the \npython version (e.g. python2.7 if using python version 2.7.x).\n\n\nTEtranscripts\n=============\n\nUsage\n-----\n\n::\n\n    usage: TEtranscripts -t treatment sample [treatment sample ...] \n                         -c control sample [control sample ...]\n                         --GTF genic-GTF-file\n                         --TE TE-GTF-file \n                         [optional arguments]\n\n    Required arguments:\n      -t | --treatment [treatment sample 1 treatment sample 2...]\n         Sample files in group 1 (e.g. treatment/mutant), separated by space\n      -c | --control [control sample 1 control sample 2 ...]\n         Sample files in group 2 (e.g. control/wildtype), separated by space\n      --GTF genic-GTF-file  GTF file for gene annotations\n      --TE TE-GTF-file      GTF file for transposable element annotations\n\n    Optional arguments:\n\n      *Input/Output options*\n      --format [input file format]\n         Input file format: BAM or SAM. DEFAULT: BAM\n      --stranded [option]   Is this a stranded library? (yes, no, or reverse).\n                            DEFAULT: yes.\n      --sortByPos           Input file is sorted by chromosome position.\n      --project [name]      Prefix used for output files (e.g. project name)\n                            DEFAULT: TEtranscript_out\n\n      *Analysis options*\n      --mode [TE counting mode]\n         How to count TE:\n            uniq        (unique mappers only)\n            multi       (distribute among all alignments).\n         DEFAULT: multi\n      --minread [min_read] read count cutoff. DEFAULT: 1\n      -L | --fragmentLength [fragLength]\n         Average length of fragment used for single-end sequencing\n         DEFAULT: For paired-end, estimated from the input alignment file. For single-end, ignored by default.\n      -i | --iteration \n         maximum number of iterations used to optimize multi-reads assignment. DEFAULT: 100\n      -p | --padj [pvalue]\n         FDR cutoff for significance. DEFAULT: 0.05\n      -f | --foldchange [foldchange]\n         Fold-change ratio (absolute) cutoff for differential expression. \n         DEFAULT: 1\n\n      *DESeq1 compatibility options*\n      --DESeq\n         Use DESeq (instead of DESeq2) for differential analysis.\n      -n | --norm [normalization]\n         Normalization method : DESeq_default (default normalization method of DESeq), TC (total annotated read counts), quant (quantile normalization). Only applicable if DESeq is used instead of DESeq2.\n         DEFAULT: DESeq_default\n\n      *Other options*\n      -h | --help\n         Show help message\n      --verbose [number]\n         Set verbose level.\n           0: only show critical messages\n           1: show additional warning messages\n           2: show process information\n           3: show debug messages\n         DEFAULT: 2\n      --version\n         Show program's version and exit\n\n*NOTE* BAM files must be either unsorted or sorted by queryname. If the BAM files are sorted by position, please use the '--sortByPos' option\n\n\nExample Command Lines\n---------------------\n\nIf BAM files are unsorted, or sorted by queryname:: \n\n    TEtranscripts --format BAM --mode multi -t RNAseq1.bam RNAseq2.bam -c CtlRNAseq1.bam CtlRNAseq.bam --project sample_nosort_test\n\nIf BAM files are sorted by coordinates/position::\n\n    TEtranscripts --sortByPos --format BAM --mode multi -t RNAseq1.bam RNAseq2.bam -c CtlRNAseq1.bam CtlRNAseq.bam --project sample_sorted_test\n\n\nTEcount\n=============\n\nUsage\n-----\n\n::\n\n    usage: TEcount -b RNAseq BAM \n                   --GTF genic-GTF-file\n                   --TE TE-GTF-file \n                   [optional arguments]\n\n    Required arguments:\n      -b | --BAM alignment-file  RNAseq alignment file (BAM preferred)\n      --GTF genic-GTF-file       GTF file for gene annotations\n      --TE TE-GTF-file           GTF file for transposable element annotations\n\n    Optional arguments:\n\n      *Input/Output options*\n      --format [input file format]\n         Input file format: BAM or SAM. DEFAULT: BAM\n      --stranded [option]   Is this a stranded library? (yes, no, or reverse).\n                            DEFAULT: yes.\n      --sortByPos           Input file is sorted by chromosome position.\n      --project [name]      Prefix used for output files (e.g. project name)\n                            DEFAULT: TEcount_out\n\n      *Analysis options*\n      --mode [TE counting mode]\n         How to count TE:\n            uniq        (unique mappers only)\n            multi       (distribute among all alignments).\n         DEFAULT: multi\n      -L | --fragmentLength [fragLength]\n         Average length of fragment used for single-end sequencing\n         DEFAULT: For paired-end, estimated from the input alignment file. For single-end, ignored by default.\n      -i | --iteration \n         maximum number of iterations used to optimize multi-reads assignment. DEFAULT: 100\n\n      *Other options*\n      -h | --help\n         Show help message\n      --verbose [number]\n         Set verbose level.\n           0: only show critical messages\n           1: show additional warning messages\n           2: show process information\n           3: show debug messages\n         DEFAULT: 2\n      --version\n         Show program's version and exit\n\n*NOTE* BAM files must be either unsorted or sorted by queryname. If the BAM files are sorted by position, please use the '--sortByPos' option\n\n\nExample Command Lines\n---------------------\n\nIf BAM files are unsorted, or sorted by queryname:: \n\n    TEcount --format BAM --mode multi -b RNAseq.bam --project sample_nosort_test\n\nIf BAM files are sorted by coordinates/position::\n\n    TEtranscripts --sortByPos --format BAM --mode multi -b RNAseq.bam --project sample_sorted_test\n\n\nRecommendations for TEToolkit input files\n=========================================\n\nTEToolkit can perform transposable element quantification from alignment results (e.g. BAM files) generated from a variety of programs. \nGiven the variety of experimental systems, we could not provide an optimal alignment strategy for every approach. Therefore,\nwe recommend that users identify the optimal parameters for their particular genome and alignment program in order to get the best\nresults.\n\nWhen optimizing the alignment parameters, we recommend taking these points into consideration:\n\n*Allowing sufficient number of multi-mappers during alignment*\n\nMost alignment programs provide only 1 alignment per read by default. We recommend reporting multiple alignments per read. We have found \nthat reporting a maximum of 100 alignments per read provides an optimal compromise between the size of the alignment file and recovery \nof multi-mappers in many genome builds. However, we highly suggest that users optimize this parameter for their particular experiment, \nas this could significantly improve the quality of transposable element quantification.\n\n*Optimizing alignment parameters for non-reference strains*\n\nIt is common that the specific laboratory strains used in an experiment contains genomic variations not present in the reference strain.\nWhile this can be mitigated through allowing mismatches during alignments, certain lab strains (e.g. Drosophila melanogaster) have\ndiverged significantly from the reference genomes. We highly recommend that users should refine their alignment procedures to better\naccount for the expected variations between their lab strains and the reference genome, which will accordingly improve their analysis\nwith TEToolkit. Users can also align to a custom genome build specific to their organism, though they would need GTF annotations for \ngenes and transposable elements that are compatible with their custom genome in order to utilize TEToolkit. Please contact us if you\nrequire advice in generating these annotation files.\n\n*Specific recommendations when using STAR*\n\n`STAR <https://github.com/alexdobin/STAR>`_ utilizes two parameters for optimal identification of multi-mappers `--outFilterMultimapNmax` and `--outAnchorMultimapNmax`. \nThe author of STAR recommends that `--outAnchorMultimapNmax` should be set at twice the value used in `--outFilterMultimapNmax`, \nbut no less than 50. In our study, we used the same number for both parameters (100), and found negligible differences in identifying \nmulti-mappers. Upon further discussion with the author of STAR, we recommend that setting the same value for `--outAnchorMultimapNmax`\nand `--outFilterMultimapNmax`, though we highly suggest users test multiple values of `--outAnchorMultimapNmax` to identify the \noptimal value for their experiment.\n\n\nCopying & distribution\n======================\n\nTEtranscripts and TEcount are part of TEToolKit.\n\nTEToolKit is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut *WITHOUT ANY WARRANTY*; without even the implied warranty of\n*MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE*.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with TEToolKit.  If not, see `this website <http://www.gnu.org/licenses/>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://hammelllab.labsites.cshl.edu/software#TEToolkit", "keywords": "TE transposable element differential enrichment", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "TEToolkit", "package_url": "https://pypi.org/project/TEToolkit/", "platform": "Linux", "project_url": "https://pypi.org/project/TEToolkit/", "project_urls": {"Homepage": "http://hammelllab.labsites.cshl.edu/software#TEToolkit"}, "release_url": "https://pypi.org/project/TEToolkit/2.0.3/", "requires_dist": null, "requires_python": "", "summary": "Tools for estimating differential enrichment of Transposable Elements and other highly repetitive regions", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"tetoolkit\">\n<h2>TEToolkit</h2>\n<p>Version: 2.0.3</p>\n<p><em>NOTE</em> TEtranscripts and TEcount rely on specially curated GTF files, which are not\npackaged with this software due to their size. Please go to\n<a href=\"http://hammelllab.labsites.cshl.edu/software#TEToolkit\" rel=\"nofollow\">our website</a>\nfor instructions to download the curated GTF files.</p>\n<p>TEtranscripts and TEcount takes RNA-seq (and similar data) and annotates reads to both\ngenes &amp; transposable elements. TEtranscripts then performs differential analysis using\nDESeq2.</p>\n<p><a href=\"https://github.com/mhammell-laboratory/tetoolkit\" rel=\"nofollow\">Github Page</a></p>\n<p><a href=\"https://pypi.python.org/pypi/TEToolkit\" rel=\"nofollow\">Pypi Page</a></p>\n<p><a href=\"http://hammelllab.labsites.cshl.edu/software\" rel=\"nofollow\">MHammell Lab</a></p>\n<p>Created by Ying Jin, Eric Paniagua, Oliver Tam &amp; Molly Hammell, February 2014</p>\n<p>Copyright (C) 2014-2018 Ying Jin, Eric Paniagua, Oliver Tam &amp; Molly Hammell</p>\n<p>Contact: Ying Jin (<a href=\"mailto:yjin%40cshl.edu\">yjin<span>@</span>cshl<span>.</span>edu</a>)</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>Python:     2.6.x or 2.7.x (not tested in Python 3.x)</p>\n<p>pysam:      0.9.x or greater</p>\n<p>R:          2.15.x or greater</p>\n<p>DESeq2:     1.10.x or greater</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<ol>\n<li><p>Download compressed tarball.</p>\n</li>\n<li><p>Unpack tarball.</p>\n</li>\n<li><p>Navigate into unpacked directory.</p>\n</li>\n<li><p>Run the following:</p>\n<pre>$ python setup.py install\n</pre>\n</li>\n</ol>\n<p>If you want to install locally (e.g. /local/home/usr),\nrun this command instead:</p>\n<pre>$ python setup.py install --prefix /local/home/usr\n</pre>\n<p><em>NOTE</em> In the above example, you must add</p>\n<blockquote>\n/local/home/usr/bin</blockquote>\n<p>to the PATH variable, and</p>\n<blockquote>\n/local/home/usr/lib/python2.X/site-packages</blockquote>\n<p>to the PYTHONPATH variable, where python2.X refers to the\npython version (e.g. python2.7 if using python version 2.7.x).</p>\n</div>\n</div>\n<div id=\"tetranscripts\">\n<h2>TEtranscripts</h2>\n<div id=\"usage\">\n<h3>Usage</h3>\n<pre>usage: TEtranscripts -t treatment sample [treatment sample ...]\n                     -c control sample [control sample ...]\n                     --GTF genic-GTF-file\n                     --TE TE-GTF-file\n                     [optional arguments]\n\nRequired arguments:\n  -t | --treatment [treatment sample 1 treatment sample 2...]\n     Sample files in group 1 (e.g. treatment/mutant), separated by space\n  -c | --control [control sample 1 control sample 2 ...]\n     Sample files in group 2 (e.g. control/wildtype), separated by space\n  --GTF genic-GTF-file  GTF file for gene annotations\n  --TE TE-GTF-file      GTF file for transposable element annotations\n\nOptional arguments:\n\n  *Input/Output options*\n  --format [input file format]\n     Input file format: BAM or SAM. DEFAULT: BAM\n  --stranded [option]   Is this a stranded library? (yes, no, or reverse).\n                        DEFAULT: yes.\n  --sortByPos           Input file is sorted by chromosome position.\n  --project [name]      Prefix used for output files (e.g. project name)\n                        DEFAULT: TEtranscript_out\n\n  *Analysis options*\n  --mode [TE counting mode]\n     How to count TE:\n        uniq        (unique mappers only)\n        multi       (distribute among all alignments).\n     DEFAULT: multi\n  --minread [min_read] read count cutoff. DEFAULT: 1\n  -L | --fragmentLength [fragLength]\n     Average length of fragment used for single-end sequencing\n     DEFAULT: For paired-end, estimated from the input alignment file. For single-end, ignored by default.\n  -i | --iteration\n     maximum number of iterations used to optimize multi-reads assignment. DEFAULT: 100\n  -p | --padj [pvalue]\n     FDR cutoff for significance. DEFAULT: 0.05\n  -f | --foldchange [foldchange]\n     Fold-change ratio (absolute) cutoff for differential expression.\n     DEFAULT: 1\n\n  *DESeq1 compatibility options*\n  --DESeq\n     Use DESeq (instead of DESeq2) for differential analysis.\n  -n | --norm [normalization]\n     Normalization method : DESeq_default (default normalization method of DESeq), TC (total annotated read counts), quant (quantile normalization). Only applicable if DESeq is used instead of DESeq2.\n     DEFAULT: DESeq_default\n\n  *Other options*\n  -h | --help\n     Show help message\n  --verbose [number]\n     Set verbose level.\n       0: only show critical messages\n       1: show additional warning messages\n       2: show process information\n       3: show debug messages\n     DEFAULT: 2\n  --version\n     Show program's version and exit\n</pre>\n<p><em>NOTE</em> BAM files must be either unsorted or sorted by queryname. If the BAM files are sorted by position, please use the \u2018\u2013sortByPos\u2019 option</p>\n</div>\n<div id=\"example-command-lines\">\n<h3>Example Command Lines</h3>\n<p>If BAM files are unsorted, or sorted by queryname:</p>\n<pre>TEtranscripts --format BAM --mode multi -t RNAseq1.bam RNAseq2.bam -c CtlRNAseq1.bam CtlRNAseq.bam --project sample_nosort_test\n</pre>\n<p>If BAM files are sorted by coordinates/position:</p>\n<pre>TEtranscripts --sortByPos --format BAM --mode multi -t RNAseq1.bam RNAseq2.bam -c CtlRNAseq1.bam CtlRNAseq.bam --project sample_sorted_test\n</pre>\n</div>\n</div>\n<div id=\"tecount\">\n<h2>TEcount</h2>\n<div id=\"id1\">\n<h3>Usage</h3>\n<pre>usage: TEcount -b RNAseq BAM\n               --GTF genic-GTF-file\n               --TE TE-GTF-file\n               [optional arguments]\n\nRequired arguments:\n  -b | --BAM alignment-file  RNAseq alignment file (BAM preferred)\n  --GTF genic-GTF-file       GTF file for gene annotations\n  --TE TE-GTF-file           GTF file for transposable element annotations\n\nOptional arguments:\n\n  *Input/Output options*\n  --format [input file format]\n     Input file format: BAM or SAM. DEFAULT: BAM\n  --stranded [option]   Is this a stranded library? (yes, no, or reverse).\n                        DEFAULT: yes.\n  --sortByPos           Input file is sorted by chromosome position.\n  --project [name]      Prefix used for output files (e.g. project name)\n                        DEFAULT: TEcount_out\n\n  *Analysis options*\n  --mode [TE counting mode]\n     How to count TE:\n        uniq        (unique mappers only)\n        multi       (distribute among all alignments).\n     DEFAULT: multi\n  -L | --fragmentLength [fragLength]\n     Average length of fragment used for single-end sequencing\n     DEFAULT: For paired-end, estimated from the input alignment file. For single-end, ignored by default.\n  -i | --iteration\n     maximum number of iterations used to optimize multi-reads assignment. DEFAULT: 100\n\n  *Other options*\n  -h | --help\n     Show help message\n  --verbose [number]\n     Set verbose level.\n       0: only show critical messages\n       1: show additional warning messages\n       2: show process information\n       3: show debug messages\n     DEFAULT: 2\n  --version\n     Show program's version and exit\n</pre>\n<p><em>NOTE</em> BAM files must be either unsorted or sorted by queryname. If the BAM files are sorted by position, please use the \u2018\u2013sortByPos\u2019 option</p>\n</div>\n<div id=\"id2\">\n<h3>Example Command Lines</h3>\n<p>If BAM files are unsorted, or sorted by queryname:</p>\n<pre>TEcount --format BAM --mode multi -b RNAseq.bam --project sample_nosort_test\n</pre>\n<p>If BAM files are sorted by coordinates/position:</p>\n<pre>TEtranscripts --sortByPos --format BAM --mode multi -b RNAseq.bam --project sample_sorted_test\n</pre>\n</div>\n</div>\n<div id=\"recommendations-for-tetoolkit-input-files\">\n<h2>Recommendations for TEToolkit input files</h2>\n<p>TEToolkit can perform transposable element quantification from alignment results (e.g. BAM files) generated from a variety of programs.\nGiven the variety of experimental systems, we could not provide an optimal alignment strategy for every approach. Therefore,\nwe recommend that users identify the optimal parameters for their particular genome and alignment program in order to get the best\nresults.</p>\n<p>When optimizing the alignment parameters, we recommend taking these points into consideration:</p>\n<p><em>Allowing sufficient number of multi-mappers during alignment</em></p>\n<p>Most alignment programs provide only 1 alignment per read by default. We recommend reporting multiple alignments per read. We have found\nthat reporting a maximum of 100 alignments per read provides an optimal compromise between the size of the alignment file and recovery\nof multi-mappers in many genome builds. However, we highly suggest that users optimize this parameter for their particular experiment,\nas this could significantly improve the quality of transposable element quantification.</p>\n<p><em>Optimizing alignment parameters for non-reference strains</em></p>\n<p>It is common that the specific laboratory strains used in an experiment contains genomic variations not present in the reference strain.\nWhile this can be mitigated through allowing mismatches during alignments, certain lab strains (e.g. Drosophila melanogaster) have\ndiverged significantly from the reference genomes. We highly recommend that users should refine their alignment procedures to better\naccount for the expected variations between their lab strains and the reference genome, which will accordingly improve their analysis\nwith TEToolkit. Users can also align to a custom genome build specific to their organism, though they would need GTF annotations for\ngenes and transposable elements that are compatible with their custom genome in order to utilize TEToolkit. Please contact us if you\nrequire advice in generating these annotation files.</p>\n<p><em>Specific recommendations when using STAR</em></p>\n<p><a href=\"https://github.com/alexdobin/STAR\" rel=\"nofollow\">STAR</a> utilizes two parameters for optimal identification of multi-mappers <cite>\u2013outFilterMultimapNmax</cite> and <cite>\u2013outAnchorMultimapNmax</cite>.\nThe author of STAR recommends that <cite>\u2013outAnchorMultimapNmax</cite> should be set at twice the value used in <cite>\u2013outFilterMultimapNmax</cite>,\nbut no less than 50. In our study, we used the same number for both parameters (100), and found negligible differences in identifying\nmulti-mappers. Upon further discussion with the author of STAR, we recommend that setting the same value for <cite>\u2013outAnchorMultimapNmax</cite>\nand <cite>\u2013outFilterMultimapNmax</cite>, though we highly suggest users test multiple values of <cite>\u2013outAnchorMultimapNmax</cite> to identify the\noptimal value for their experiment.</p>\n</div>\n<div id=\"copying-distribution\">\n<h2>Copying &amp; distribution</h2>\n<p>TEtranscripts and TEcount are part of TEToolKit.</p>\n<p>TEToolKit is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.</p>\n<p>This program is distributed in the hope that it will be useful,\nbut <em>WITHOUT ANY WARRANTY</em>; without even the implied warranty of\n<em>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE</em>.  See the\nGNU General Public License for more details.</p>\n<p>You should have received a copy of the GNU General Public License\nalong with TEToolKit.  If not, see <a href=\"http://www.gnu.org/licenses/\" rel=\"nofollow\">this website</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 4013276, "releases": {"1.4.11": [{"comment_text": "", "digests": {"md5": "b7ae9a94887d5e60ec461c5346b91226", "sha256": "89e5b295f5573ea8e507df6ae3f36521560ce698d2f9e5363622ac38950d8cb4"}, "downloads": -1, "filename": "TEToolkit-1.4.11.tar.gz", "has_sig": false, "md5_digest": "b7ae9a94887d5e60ec461c5346b91226", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82202, "upload_time": "2015-05-21T15:55:54", "upload_time_iso_8601": "2015-05-21T15:55:54.098149Z", "url": "https://files.pythonhosted.org/packages/36/8f/0ebbeaf8dc547e108660cf1ff8ae0d8735b1e92dec1df7d6b87f31dbaad5/TEToolkit-1.4.11.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "9f4c422a3170132df1121fa577187e62", "sha256": "fdcf1aec00f84ab487456df949bd7e85d5379d947323e2b8ba40de09c4434fa8"}, "downloads": -1, "filename": "TEToolkit-1.5.0.tar.gz", "has_sig": false, "md5_digest": "9f4c422a3170132df1121fa577187e62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82556, "upload_time": "2015-10-26T20:44:36", "upload_time_iso_8601": "2015-10-26T20:44:36.735470Z", "url": "https://files.pythonhosted.org/packages/6d/a7/3124624726ec038725cf4742cf02196937a551a58123e072b6daa9cc28de/TEToolkit-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "05745b2d5109911e95593e423446a831", "sha256": "22c13ca45bccc89e9d9bf48d59ae6db1fa4c634def64fc56ba9bffd23aa689ac"}, "downloads": -1, "filename": "TEToolkit-1.5.1.tar.gz", "has_sig": false, "md5_digest": "05745b2d5109911e95593e423446a831", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65070, "upload_time": "2016-08-03T18:59:25", "upload_time_iso_8601": "2016-08-03T18:59:25.460414Z", "url": "https://files.pythonhosted.org/packages/3c/a2/b8fc869e59439d3f7523adb6d0caf4ba0f58b002ec72148518dc927042d0/TEToolkit-1.5.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "2e1927c6b3c16328886d146e370b41e3", "sha256": "d568f4ca906beccc530d802a9129180949a6e174d33cb81ad98d0534e131c1b1"}, "downloads": -1, "filename": "TEToolkit-2.0.0.tar.gz", "has_sig": false, "md5_digest": "2e1927c6b3c16328886d146e370b41e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84482, "upload_time": "2018-05-25T03:01:30", "upload_time_iso_8601": "2018-05-25T03:01:30.108798Z", "url": "https://files.pythonhosted.org/packages/c9/37/1472047b4855b7ec481fa6b489143c6baebe952f19b8eded1f21b652fddc/TEToolkit-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "e793d516c562175ecc05e41a0db8ec1f", "sha256": "ccc01b85a83a51efe2c830803d33227508e8bd12dc608fbfdbc85548525e4782"}, "downloads": -1, "filename": "TEToolkit-2.0.1.tar.gz", "has_sig": false, "md5_digest": "e793d516c562175ecc05e41a0db8ec1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84491, "upload_time": "2018-05-25T03:43:21", "upload_time_iso_8601": "2018-05-25T03:43:21.467560Z", "url": "https://files.pythonhosted.org/packages/ad/8f/c3c458788ed3d37bb7d78e7e5ae665d77223a211303b136bd040dd8ea91f/TEToolkit-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "08432b9dce6e19cfcbcbaa26487f7563", "sha256": "3bc9f6b202169d6d7fb3b08793c8465d6243651bca6542dd4ec42fd8bd65f483"}, "downloads": -1, "filename": "TEToolkit-2.0.2.tar.gz", "has_sig": false, "md5_digest": "08432b9dce6e19cfcbcbaa26487f7563", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 84482, "upload_time": "2018-05-25T18:29:21", "upload_time_iso_8601": "2018-05-25T18:29:21.318984Z", "url": "https://files.pythonhosted.org/packages/c7/a8/11dcbb017659c63cd46730b9237a58e8630955c1435c284306e3271634ca/TEToolkit-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "771f23b23c9097502ac7603e84e30a4b", "sha256": "1d0f5928b30c6cd9dbef8e092ae0c11e9e707faf92a19af8eed3e360da7d4e46"}, "downloads": -1, "filename": "TEToolkit-2.0.3.tar.gz", "has_sig": false, "md5_digest": "771f23b23c9097502ac7603e84e30a4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103042, "upload_time": "2018-06-28T23:19:04", "upload_time_iso_8601": "2018-06-28T23:19:04.810921Z", "url": "https://files.pythonhosted.org/packages/86/01/5e4de6185a765e5507cf5ba35d49a0877d4321850fe69557842432644097/TEToolkit-2.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "771f23b23c9097502ac7603e84e30a4b", "sha256": "1d0f5928b30c6cd9dbef8e092ae0c11e9e707faf92a19af8eed3e360da7d4e46"}, "downloads": -1, "filename": "TEToolkit-2.0.3.tar.gz", "has_sig": false, "md5_digest": "771f23b23c9097502ac7603e84e30a4b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103042, "upload_time": "2018-06-28T23:19:04", "upload_time_iso_8601": "2018-06-28T23:19:04.810921Z", "url": "https://files.pythonhosted.org/packages/86/01/5e4de6185a765e5507cf5ba35d49a0877d4321850fe69557842432644097/TEToolkit-2.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:11 2020"}