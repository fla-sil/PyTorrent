{"info": {"author": "Hide", "author_email": "padocon@naver.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# pythondi\n[![license]](/LICENSE)\n[![pypi]](https://pypi.org/project/pythondi/)\n[![pyversions]](http://pypi.python.org/pypi/pythondi)\n![badge](https://action-badges.now.sh/teamhide/pythondi)\n[![Downloads](https://pepy.tech/badge/pythondi)](https://pepy.tech/project/pythondi)\n\n---\n\npythondi is a lightweight dependency injection library for python\n\n## Installation\n\n```python\npip3 install pythondi\n```\n\n## Usage\n\nFirst, you have to binding classes to provider.\n\nThere is three different ways to binding.\n\n- Binding one by one\n\n```python\nfrom pythondi import Provider\n\n\nprovider = Provider()\nprovider.bind(Repo, SQLRepo)\nprovider.bind(Usecase, CreateUsecase)\n```\n\n- Binding at initialization(In this case, you can bind only one)\n\n```python\nfrom pythondi import Provider\n\n\nprovider = Provider(cls=Repo, new_cls=SQLRepo)\n```\n\n- Binding at initialization with dictionary\n\n```python\nfrom pythondi import Provider\n\n\nprovider = Provider(classes={Repo: SQLRepo, Usecase: CreateUsecase})\n```\n\n\nAfter binding, you need to configure it to container\n\n```python\nfrom pythondi import configure, configure_after_clear\n\n\n# Inject with configure\nconfigure(provider=provider)\n\n# Or if you want to fresh inject, use `configure_after_clear`\nconfigure_after_clear(provider=provider)\n```\n\nImport inject\n\n```python\nfrom pythondi import inject\n```\n\nAdd type annotations that you want to inject dependencies\n\n```python\nclass Usecase:\n    def __init__(self, repo: Repo):\n        self.repo = repo\n```\n\nAdd decorator\n\n```python\nclass Usecase:\n    @inject()\n    def __init__(self, repo: Repo):\n        self.repo = repo\n```\n\nInitialize class with no arguments\n\n```python\nusecase = Usecase()\n```\n\nOr, you can also inject manually through decorator arguments\n\n```python\nclass Usecase:\n    @inject(repo=SQLRepo)\n    def __init__(self, repo):\n        self.repo = repo\n```\n\nIn this case, do not have to configure providers and type annotation.\n\n## Note\n\nAt the moment of inject, class is automatically initialized.\n\nSo you don't have to initialize your class inside of code.\n\n**Yes:**\n```python\n@inject()\ndef __init__(self, repo: Repo):\n    self.repo = repo\n```\n\n**No:**\n```python\n@inject()\ndef __init__(self, repo: Repo):\n    self.repo = repo()\n```\n\n## General example\n\n```python\nimport abc\n\nfrom pythondi import Provider, configure, configure_after_clear, inject\n\n\nclass Repo:\n    \"\"\"Interface class\"\"\"\n    __metaclass__ = abc.ABCMeta\n\n    @abc.abstractmethod\n    def get(self):\n        pass\n\n\nclass SQLRepo(Repo):\n    \"\"\"Impl class\"\"\"\n    def get(self):\n        print('SQLRepo')\n\n\nclass Usecase:\n    @inject()\n    def __init__(self, repo: Repo):\n        self.repo = repo\n\n\nif __name__ == '__main__':\n    # Init provider\n    provider = Provider()\n\n    # Bind `Impl` class to `Interface` class\n    provider.bind(Repo, SQLRepo)\n\n    # Inject with configure\n    configure(provider=provider)\n\n    # Or if you want to fresh injection, use `configure_after_clear`\n    configure_after_clear(provider=provider)\n\n    # Init class without arguments\n    u = Usecase()\n```\n\n## FastAPI example\n\n```python\nfrom fastapi import FastAPI, APIRouter\n\nfrom pythondi import Provider, configure, inject\nimport abc\n\nrouter = APIRouter()\n\n\nclass Repo:\n    \"\"\"Interface class\"\"\"\n    __metaclass__ = abc.ABCMeta\n\n    @abc.abstractmethod\n    def get(self):\n        pass\n\n\nclass SQLRepo(Repo):\n    \"\"\"Impl class\"\"\"\n    def __init__(self):\n        pass\n\n    def get(self):\n        print('SQLRepo')\n\n\n@router.route('/')\ndef home():\n    usecase = Usecase()\n    usecase.repo.get()\n    return {'hello': 'world'}\n\n\nclass Usecase:\n    @inject()\n    def __init__(self, repo: Repo):\n        self.repo = repo\n\n\ndef create_app():\n    provider = Provider()\n    provider.bind(Repo, SQLRepo)\n    configure(provider=provider)\n    app = FastAPI()\n    app.include_router(router)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run(debug=True)\n```\n\n## Flask example\n\n```python\nfrom flask import Flask, Blueprint, jsonify\n\nfrom pythondi import Provider, configure, inject\nimport abc\n\nbp = Blueprint('home', __name__)\n\n\nclass Repo:\n    \"\"\"Interface class\"\"\"\n    __metaclass__ = abc.ABCMeta\n\n    @abc.abstractmethod\n    def get(self):\n        pass\n\n\nclass SQLRepo(Repo):\n    \"\"\"Impl class\"\"\"\n    def __init__(self):\n        pass\n\n    def get(self):\n        print('SQLRepo')\n\n\n@bp.route('/')\ndef home():\n    usecase = Usecase()\n    usecase.repo.get()\n    return jsonify({'hello': 'world'})\n\n\nclass Usecase:\n    @inject()\n    def __init__(self, repo: Repo):\n        self.repo = repo\n\n\ndef create_app():\n    provider = Provider()\n    provider.bind(Repo, SQLRepo)\n    configure(provider=provider)\n    app = Flask(__name__)\n    app.register_blueprint(bp)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run(debug=True)\n```\n\n## Sanic example\n```python\nimport abc\n\nfrom sanic import Sanic, Blueprint\nfrom sanic.response import json\n\nfrom pythondi import Provider, configure, inject\n\n\nclass Repo:\n    \"\"\"Interface class\"\"\"\n    __metaclass__ = abc.ABCMeta\n\n    @abc.abstractmethod\n    def get(self):\n        pass\n\n\nclass SQLRepo(Repo):\n    \"\"\"Impl class\"\"\"\n    def __init__(self):\n        pass\n\n    def get(self):\n        print('SQLRepo')\n\n\nbp = Blueprint('home', url_prefix='/')\n\n\n@bp.route('/')\nasync def home(request):\n    usecase = Usecase()\n    usecase.repo.get()\n    return json({'hello': 'world'})\n\n\nclass Usecase:\n    @inject()\n    def __init__(self, repo: Repo):\n        self.repo = repo\n\n\ndef create_app():\n    provider = Provider()\n    provider.bind(Repo, SQLRepo)\n    configure(provider=provider)\n    app = Sanic(__name__)\n    app.blueprint(bp)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run(debug=True)\n\n```\n\n## Django example\n\n```python\n\"\"\"\nIn case of django, just put the initializing code inside of django startup\n\nYou can use project folder's __init__.py or urls.py\n\"\"\"\n```\n[license]: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n[pypi]: https://img.shields.io/pypi/v/pythondi\n[pyversions]: https://img.shields.io/pypi/pyversions/pythondi", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/teamhide/pythondi", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pythondi", "package_url": "https://pypi.org/project/pythondi/", "platform": "", "project_url": "https://pypi.org/project/pythondi/", "project_urls": {"Homepage": "https://github.com/teamhide/pythondi"}, "release_url": "https://pypi.org/project/pythondi/1.1.6/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Python dependency injection library", "version": "1.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pythondi</h1>\n<p><a href=\"/LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<a href=\"https://pypi.org/project/pythondi/\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc6ceace33695a0aa58b0a3dc79ab212fa27d508/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707974686f6e6469\"></a>\n<a href=\"http://pypi.python.org/pypi/pythondi\" rel=\"nofollow\"><img alt=\"pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df874d66736609bce3518398c3da875185da325c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707974686f6e6469\"></a>\n<img alt=\"badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa54e4a7e9d632932a33ae21fb4a1fba992ee335/68747470733a2f2f616374696f6e2d6261646765732e6e6f772e73682f7465616d686964652f707974686f6e6469\">\n<a href=\"https://pepy.tech/project/pythondi\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/73acca346f11533c7006fb6fa852e81087ee5b96/68747470733a2f2f706570792e746563682f62616467652f707974686f6e6469\"></a></p>\n<hr>\n<p>pythondi is a lightweight dependency injection library for python</p>\n<h2>Installation</h2>\n<pre><span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">pythondi</span>\n</pre>\n<h2>Usage</h2>\n<p>First, you have to binding classes to provider.</p>\n<p>There is three different ways to binding.</p>\n<ul>\n<li>Binding one by one</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span>\n\n\n<span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"p\">()</span>\n<span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">,</span> <span class=\"n\">SQLRepo</span><span class=\"p\">)</span>\n<span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Usecase</span><span class=\"p\">,</span> <span class=\"n\">CreateUsecase</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Binding at initialization(In this case, you can bind only one)</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span>\n\n\n<span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">Repo</span><span class=\"p\">,</span> <span class=\"n\">new_cls</span><span class=\"o\">=</span><span class=\"n\">SQLRepo</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Binding at initialization with dictionary</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span>\n\n\n<span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"p\">(</span><span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"n\">Repo</span><span class=\"p\">:</span> <span class=\"n\">SQLRepo</span><span class=\"p\">,</span> <span class=\"n\">Usecase</span><span class=\"p\">:</span> <span class=\"n\">CreateUsecase</span><span class=\"p\">})</span>\n</pre>\n<p>After binding, you need to configure it to container</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">configure</span><span class=\"p\">,</span> <span class=\"n\">configure_after_clear</span>\n\n\n<span class=\"c1\"># Inject with configure</span>\n<span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or if you want to fresh inject, use `configure_after_clear`</span>\n<span class=\"n\">configure_after_clear</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n</pre>\n<p>Import inject</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span>\n</pre>\n<p>Add type annotations that you want to inject dependencies</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Usecase</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">Repo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span>\n</pre>\n<p>Add decorator</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Usecase</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">Repo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span>\n</pre>\n<p>Initialize class with no arguments</p>\n<pre><span class=\"n\">usecase</span> <span class=\"o\">=</span> <span class=\"n\">Usecase</span><span class=\"p\">()</span>\n</pre>\n<p>Or, you can also inject manually through decorator arguments</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Usecase</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">repo</span><span class=\"o\">=</span><span class=\"n\">SQLRepo</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span>\n</pre>\n<p>In this case, do not have to configure providers and type annotation.</p>\n<h2>Note</h2>\n<p>At the moment of inject, class is automatically initialized.</p>\n<p>So you don't have to initialize your class inside of code.</p>\n<p><strong>Yes:</strong></p>\n<pre><span class=\"nd\">@inject</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">Repo</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span>\n</pre>\n<p><strong>No:</strong></p>\n<pre><span class=\"nd\">@inject</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">Repo</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span><span class=\"p\">()</span>\n</pre>\n<h2>General example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span><span class=\"p\">,</span> <span class=\"n\">configure</span><span class=\"p\">,</span> <span class=\"n\">configure_after_clear</span><span class=\"p\">,</span> <span class=\"n\">inject</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Repo</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Interface class\"\"\"</span>\n    <span class=\"n\">__metaclass__</span> <span class=\"o\">=</span> <span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">ABCMeta</span>\n\n    <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SQLRepo</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Impl class\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'SQLRepo'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Usecase</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">Repo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Init provider</span>\n    <span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Bind `Impl` class to `Interface` class</span>\n    <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">,</span> <span class=\"n\">SQLRepo</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Inject with configure</span>\n    <span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Or if you want to fresh injection, use `configure_after_clear`</span>\n    <span class=\"n\">configure_after_clear</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Init class without arguments</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">Usecase</span><span class=\"p\">()</span>\n</pre>\n<h2>FastAPI example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fastapi</span> <span class=\"kn\">import</span> <span class=\"n\">FastAPI</span><span class=\"p\">,</span> <span class=\"n\">APIRouter</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span><span class=\"p\">,</span> <span class=\"n\">configure</span><span class=\"p\">,</span> <span class=\"n\">inject</span>\n<span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n\n<span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"n\">APIRouter</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Repo</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Interface class\"\"\"</span>\n    <span class=\"n\">__metaclass__</span> <span class=\"o\">=</span> <span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">ABCMeta</span>\n\n    <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SQLRepo</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Impl class\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'SQLRepo'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@router</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">():</span>\n    <span class=\"n\">usecase</span> <span class=\"o\">=</span> <span class=\"n\">Usecase</span><span class=\"p\">()</span>\n    <span class=\"n\">usecase</span><span class=\"o\">.</span><span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Usecase</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">Repo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">():</span>\n    <span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"p\">()</span>\n    <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">,</span> <span class=\"n\">SQLRepo</span><span class=\"p\">)</span>\n    <span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">FastAPI</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">include_router</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Flask example</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">Blueprint</span><span class=\"p\">,</span> <span class=\"n\">jsonify</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span><span class=\"p\">,</span> <span class=\"n\">configure</span><span class=\"p\">,</span> <span class=\"n\">inject</span>\n<span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n\n<span class=\"n\">bp</span> <span class=\"o\">=</span> <span class=\"n\">Blueprint</span><span class=\"p\">(</span><span class=\"s1\">'home'</span><span class=\"p\">,</span> <span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Repo</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Interface class\"\"\"</span>\n    <span class=\"n\">__metaclass__</span> <span class=\"o\">=</span> <span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">ABCMeta</span>\n\n    <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SQLRepo</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Impl class\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'SQLRepo'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@bp</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">():</span>\n    <span class=\"n\">usecase</span> <span class=\"o\">=</span> <span class=\"n\">Usecase</span><span class=\"p\">()</span>\n    <span class=\"n\">usecase</span><span class=\"o\">.</span><span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">jsonify</span><span class=\"p\">({</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">})</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Usecase</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">Repo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">():</span>\n    <span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"p\">()</span>\n    <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">,</span> <span class=\"n\">SQLRepo</span><span class=\"p\">)</span>\n    <span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_blueprint</span><span class=\"p\">(</span><span class=\"n\">bp</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Sanic example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sanic</span> <span class=\"kn\">import</span> <span class=\"n\">Sanic</span><span class=\"p\">,</span> <span class=\"n\">Blueprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sanic.response</span> <span class=\"kn\">import</span> <span class=\"n\">json</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pythondi</span> <span class=\"kn\">import</span> <span class=\"n\">Provider</span><span class=\"p\">,</span> <span class=\"n\">configure</span><span class=\"p\">,</span> <span class=\"n\">inject</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Repo</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Interface class\"\"\"</span>\n    <span class=\"n\">__metaclass__</span> <span class=\"o\">=</span> <span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">ABCMeta</span>\n\n    <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SQLRepo</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Impl class\"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'SQLRepo'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">bp</span> <span class=\"o\">=</span> <span class=\"n\">Blueprint</span><span class=\"p\">(</span><span class=\"s1\">'home'</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@bp</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">usecase</span> <span class=\"o\">=</span> <span class=\"n\">Usecase</span><span class=\"p\">()</span>\n    <span class=\"n\">usecase</span><span class=\"o\">.</span><span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"p\">({</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">})</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Usecase</span><span class=\"p\">:</span>\n    <span class=\"nd\">@inject</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">Repo</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">repo</span> <span class=\"o\">=</span> <span class=\"n\">repo</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">create_app</span><span class=\"p\">():</span>\n    <span class=\"n\">provider</span> <span class=\"o\">=</span> <span class=\"n\">Provider</span><span class=\"p\">()</span>\n    <span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">Repo</span><span class=\"p\">,</span> <span class=\"n\">SQLRepo</span><span class=\"p\">)</span>\n    <span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"n\">provider</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Sanic</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">blueprint</span><span class=\"p\">(</span><span class=\"n\">bp</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">app</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">create_app</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Django example</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">In case of django, just put the initializing code inside of django startup</span>\n\n<span class=\"sd\">You can use project folder's __init__.py or urls.py</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n\n          </div>"}, "last_serial": 7089245, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1d27d3f7e0bcfccee678b9e65ee6eafa", "sha256": "848eabaf8dbeaaca2da9d364c06c12d6f527d4c9d652fcc96fab132bc46a9d40"}, "downloads": -1, "filename": "PythonDI-1.0.0.tar.gz", "has_sig": false, "md5_digest": "1d27d3f7e0bcfccee678b9e65ee6eafa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 2088, "upload_time": "2019-11-12T08:21:24", "upload_time_iso_8601": "2019-11-12T08:21:24.422221Z", "url": "https://files.pythonhosted.org/packages/9f/42/c4330ea8e31eebb6842fd803850bef7054c2e1cb1c6071f94ab7aeb8e280/PythonDI-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2783f7f67a64c0c18b8280bcf2b2f5f6", "sha256": "a10de91b2318c5d74a2fb5bf4fcea2165cb84044c4edff2917fa45e8e82fdc3f"}, "downloads": -1, "filename": "PythonDI-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2783f7f67a64c0c18b8280bcf2b2f5f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 2807, "upload_time": "2019-11-12T13:58:09", "upload_time_iso_8601": "2019-11-12T13:58:09.519158Z", "url": "https://files.pythonhosted.org/packages/70/1c/df1997f47f338e706b0489e9341f59dc3c8ad47185aa4576cfaaaa8621a9/PythonDI-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "32c260fac4d06f99df086efa52f78235", "sha256": "a0cbc94f86c186ee3cd4820c5e88245edf813de6f1a5f3c6ea863b3aab80a9b8"}, "downloads": -1, "filename": "pythondi-1.0.2.tar.gz", "has_sig": false, "md5_digest": "32c260fac4d06f99df086efa52f78235", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 2842, "upload_time": "2019-11-12T14:04:21", "upload_time_iso_8601": "2019-11-12T14:04:21.848982Z", "url": "https://files.pythonhosted.org/packages/8d/6c/c4ab5f6802317ce3926ed9d2eb5f8ebe96fee250ea2108e758bc6bd7fada/pythondi-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "009e84233d5157aa929940a39458071e", "sha256": "1b0e5673794df790bc28fefc14f054e28a1782ecaba5ca117529ed63d742adc2"}, "downloads": -1, "filename": "pythondi-1.0.3.tar.gz", "has_sig": false, "md5_digest": "009e84233d5157aa929940a39458071e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 3690, "upload_time": "2019-11-13T14:38:04", "upload_time_iso_8601": "2019-11-13T14:38:04.096736Z", "url": "https://files.pythonhosted.org/packages/de/6d/b88654d26bc9117f7295d3aa8ef83c275fe82570391b047e77770ff4c330/pythondi-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "f807d160f16cd99456b3f4e2a9010dc4", "sha256": "f840442c6fe8832e6aff2489df8155f6d770adbc3be9aa006b6c1645dcdffd89"}, "downloads": -1, "filename": "pythondi-1.0.4.tar.gz", "has_sig": false, "md5_digest": "f807d160f16cd99456b3f4e2a9010dc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4137, "upload_time": "2019-11-14T01:18:00", "upload_time_iso_8601": "2019-11-14T01:18:00.781274Z", "url": "https://files.pythonhosted.org/packages/fb/9b/e0f45aaba354bfd234438fa8c7ff735a9fe5fabc86c78a61831ad96b0cfd/pythondi-1.0.4.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "66b647143c7bdcfe7eb4e07a83b406b3", "sha256": "e1d4f0f7fc835e9be69563780717ee20ab3a2dc888052a89ff834f4f06f7a3ee"}, "downloads": -1, "filename": "pythondi-1.1.0.tar.gz", "has_sig": false, "md5_digest": "66b647143c7bdcfe7eb4e07a83b406b3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4279, "upload_time": "2019-11-14T06:59:14", "upload_time_iso_8601": "2019-11-14T06:59:14.729487Z", "url": "https://files.pythonhosted.org/packages/2a/66/2b2fd5f133a036f486a4d972a008e567a769cc16b50fe90d6610999caa35/pythondi-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "26bd0c2d09ffbaf8f5ccbf9fc51fee76", "sha256": "4c754e700199d47603beedb3a742236270e254556d4fc4a7ff327b9184d7f648"}, "downloads": -1, "filename": "pythondi-1.1.1.tar.gz", "has_sig": false, "md5_digest": "26bd0c2d09ffbaf8f5ccbf9fc51fee76", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4353, "upload_time": "2019-11-14T07:51:46", "upload_time_iso_8601": "2019-11-14T07:51:46.239129Z", "url": "https://files.pythonhosted.org/packages/38/ec/5319d319e3f9534e4c71ec82813cbb2a5d301591aebef7224e8d94f1afd1/pythondi-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "3f0c83beae26244f7192c5ca826db344", "sha256": "614d1e5022bda0f47caf36c0ea6bfa253bb501eed123f75ed6e76f845430d51c"}, "downloads": -1, "filename": "pythondi-1.1.2.tar.gz", "has_sig": false, "md5_digest": "3f0c83beae26244f7192c5ca826db344", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4539, "upload_time": "2019-12-06T07:22:10", "upload_time_iso_8601": "2019-12-06T07:22:10.710274Z", "url": "https://files.pythonhosted.org/packages/0b/7a/e3414648fe8717c2a344f4d9fa92e2a3a2d0d4d9baf569c77d3df9533bc2/pythondi-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "21de21470762ca235f2adf9a3e369461", "sha256": "753b81c7dbe5934978ebc0a654d074687f9aa1d452dc17ca7d74a4aa0c40c594"}, "downloads": -1, "filename": "pythondi-1.1.3.tar.gz", "has_sig": false, "md5_digest": "21de21470762ca235f2adf9a3e369461", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4637, "upload_time": "2019-12-09T01:27:38", "upload_time_iso_8601": "2019-12-09T01:27:38.752363Z", "url": "https://files.pythonhosted.org/packages/78/d7/f7134cd6cfe6367c1db0a4669c44a22193bb56097332275ffdc2dc9fc90c/pythondi-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "75d75128d26ae40abc13aec3272ad2c7", "sha256": "aac13247c967f3bba3213ac14cda3506d504e488a9a2070c84f1d6e9c24c3dc8"}, "downloads": -1, "filename": "pythondi-1.1.4.tar.gz", "has_sig": false, "md5_digest": "75d75128d26ae40abc13aec3272ad2c7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4782, "upload_time": "2020-01-31T11:05:49", "upload_time_iso_8601": "2020-01-31T11:05:49.070956Z", "url": "https://files.pythonhosted.org/packages/31/78/e05fbcd7f5538bd950b3e18c6cccd65aff21b51ff8cba56098c3888fc3c6/pythondi-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "93d72b998524bb3d1ccb9108738bbf1b", "sha256": "9e44b3df4ff4d9d4cfbec35e5f8f46df9af0fb890799f179bb9274e14bfe4b00"}, "downloads": -1, "filename": "pythondi-1.1.5.tar.gz", "has_sig": false, "md5_digest": "93d72b998524bb3d1ccb9108738bbf1b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 5422, "upload_time": "2020-04-17T12:57:19", "upload_time_iso_8601": "2020-04-17T12:57:19.823697Z", "url": "https://files.pythonhosted.org/packages/98/c2/cfde74604f2d2642a9cd533ddd43e3f2ca88375cebd0dd4f8dce5163336b/pythondi-1.1.5.tar.gz", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "666331b472067bca143999b2f6d4bafd", "sha256": "e20b921483af7f02925982f1661a3a395986b7af734b56dd95500ca3cbdb1db5"}, "downloads": -1, "filename": "pythondi-1.1.6.tar.gz", "has_sig": false, "md5_digest": "666331b472067bca143999b2f6d4bafd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6129, "upload_time": "2020-04-24T01:59:26", "upload_time_iso_8601": "2020-04-24T01:59:26.171327Z", "url": "https://files.pythonhosted.org/packages/b4/3a/ab16b15b9cf686c72aad78afd0e432fb314ec10342c3151d7a00782e31f5/pythondi-1.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "666331b472067bca143999b2f6d4bafd", "sha256": "e20b921483af7f02925982f1661a3a395986b7af734b56dd95500ca3cbdb1db5"}, "downloads": -1, "filename": "pythondi-1.1.6.tar.gz", "has_sig": false, "md5_digest": "666331b472067bca143999b2f6d4bafd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6129, "upload_time": "2020-04-24T01:59:26", "upload_time_iso_8601": "2020-04-24T01:59:26.171327Z", "url": "https://files.pythonhosted.org/packages/b4/3a/ab16b15b9cf686c72aad78afd0e432fb314ec10342c3151d7a00782e31f5/pythondi-1.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:01 2020"}