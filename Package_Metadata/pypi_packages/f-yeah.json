{"info": {"author": "Jeremiah Paige", "author_email": "ucodery@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![fyeah - reusable f-strings](https://raw.githubusercontent.com/ucodery/fyeah/master/art/logo.png)](https://ucodery.github.io/fyeah/)\n------\n\n#### Reusable f-strings\nUnify on one format sytle.\nWith F-yeah Just add parentheses and be on your way.\n\n## Usage\nKeep using f-string formatting, but when you need to re-use a template, use the\n`f` function instead of the `f` listeral\n\nThese two lines are equivalent\n```python\nprint(f'about to put {os.getpid()} to sleep')\nprint(f('about to put {os.getpid()} to sleep'))\n# \"about to put 421 to sleep\"\n```\n\nNo longer choose between copying around f-string literals or continuing to use\nold-style format() calls.\n\nInstead of this\n```python\ndef mul(value):\n    assert isinstance(value, int), 'Expected value to be an integer, got {type(value)} instead'\n    return value * value\n\ndef pow(value):\n    assert isinstance(value, int), 'Expected value to be an integer, got {type(value)} instead'\n    return value ** value\n```\nOr this\n```python\nbad_check = 'expected value to be an integer, got {type(value)} instead'\n\ndef mul(value):\n    assert isinstance(value, int), bad_check.format(value=value)\n    return value * value\n\ndef pow(value):\n    assert isinstance(value, int), bad_check.format(value=value)\n    return value ** value\n```\nJust write the template once to get consistent strings that stay in sync.\n```python\nfrom fyeah import f\nbad_check = 'Expected value to be an integer, got {type(value)} instead'\n\ndef mul(value):\n    assert isinstance(value, int), f(bad_check)\n    return value * value\n\ndef pow(value):\n    assert isinstance(value, int), f(bad_check)\n    return value ** value\n```\n\n#### Why would I use a function over the literal?\nf-string literals are evaluated when they are created. This makes situations like the\nfollowing impossible.\n```python\nclass BaseListRunner:\n    command = ['ls']\n    args = []\n    notify_running = '{self.__class__.__name__} is executing {self.command} with \"{\" \".join(self.args)}\"'\n\n    def run(self):\n        log.debug(f(self.notify_running))\n        subprocess.call(self.command + args)\n\nclass AllListRunner:\n    def __init__(self):\n        self.args.append('-A')\n\nAllListRunner().run()\n# DEBUG: AllListRunnner is executing ls with \"-A\"\n```\n\n#### Why would I use F-yeah instead of the format() builtin?\nAlthough the format mini-language and f-strings share a lot of syntax, they have\ndivered somewhat. You could use only format() for all your strings, but format()\nis more verbose and less flexible as compared to f-strings; enough so that f-strings\nwere adopted into the language. Using F-yeah makes the following possible.\n```python\nG_COUNT = 0\ncount_tracker = '{G_COUNT=} at {datetime.datetime.utcnow():%H:%M:%S}'\n\ndef aquire():\n    G_COUNT += 1\n    log.debug(f(count_tracker))\n\ndef release():\n    G_COUNT -= 1\n    log.debug(f(count_tracker))\n\ndef check():\n    log.debug(f(count_tracker))\n    return G_COUNT\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ucodery/fyeah", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "f-yeah", "package_url": "https://pypi.org/project/f-yeah/", "platform": "", "project_url": "https://pypi.org/project/f-yeah/", "project_urls": {"Homepage": "https://github.com/ucodery/fyeah"}, "release_url": "https://pypi.org/project/f-yeah/0.1.6/", "requires_dist": ["tox ; extra == 'dev'"], "requires_python": ">=3.6, <3.9", "summary": "Reusable f-strings", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2><a href=\"https://ucodery.github.io/fyeah/\" rel=\"nofollow\"><img alt=\"fyeah - reusable f-strings\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83fa07028c69167507423b35567f43ee5bca93c3/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f75636f646572792f66796561682f6d61737465722f6172742f6c6f676f2e706e67\"></a></h2>\n<h4>Reusable f-strings</h4>\n<p>Unify on one format sytle.\nWith F-yeah Just add parentheses and be on your way.</p>\n<h2>Usage</h2>\n<p>Keep using f-string formatting, but when you need to re-use a template, use the\n<code>f</code> function instead of the <code>f</code> listeral</p>\n<p>These two lines are equivalent</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'about to put </span><span class=\"si\">{</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s1\"> to sleep'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"s1\">'about to put {os.getpid()} to sleep'</span><span class=\"p\">))</span>\n<span class=\"c1\"># \"about to put 421 to sleep\"</span>\n</pre>\n<p>No longer choose between copying around f-string literals or continuing to use\nold-style format() calls.</p>\n<p>Instead of this</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"s1\">'Expected value to be an integer, got {type(value)} instead'</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">*</span> <span class=\"n\">value</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"s1\">'Expected value to be an integer, got {type(value)} instead'</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">**</span> <span class=\"n\">value</span>\n</pre>\n<p>Or this</p>\n<pre><span class=\"n\">bad_check</span> <span class=\"o\">=</span> <span class=\"s1\">'expected value to be an integer, got {type(value)} instead'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"n\">bad_check</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">*</span> <span class=\"n\">value</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"n\">bad_check</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">**</span> <span class=\"n\">value</span>\n</pre>\n<p>Just write the template once to get consistent strings that stay in sync.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fyeah</span> <span class=\"kn\">import</span> <span class=\"n\">f</span>\n<span class=\"n\">bad_check</span> <span class=\"o\">=</span> <span class=\"s1\">'Expected value to be an integer, got {type(value)} instead'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">bad_check</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">*</span> <span class=\"n\">value</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">bad_check</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">**</span> <span class=\"n\">value</span>\n</pre>\n<h4>Why would I use a function over the literal?</h4>\n<p>f-string literals are evaluated when they are created. This makes situations like the\nfollowing impossible.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BaseListRunner</span><span class=\"p\">:</span>\n    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'ls'</span><span class=\"p\">]</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">notify_running</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"si\">{self.__class__.__name__}</span><span class=\"s1\"> is executing </span><span class=\"si\">{self.command}</span><span class=\"s1\"> with \"{\" \".join(self.args)}\"'</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">notify_running</span><span class=\"p\">))</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command</span> <span class=\"o\">+</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">AllListRunner</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'-A'</span><span class=\"p\">)</span>\n\n<span class=\"n\">AllListRunner</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"c1\"># DEBUG: AllListRunnner is executing ls with \"-A\"</span>\n</pre>\n<h4>Why would I use F-yeah instead of the format() builtin?</h4>\n<p>Although the format mini-language and f-strings share a lot of syntax, they have\ndivered somewhat. You could use only format() for all your strings, but format()\nis more verbose and less flexible as compared to f-strings; enough so that f-strings\nwere adopted into the language. Using F-yeah makes the following possible.</p>\n<pre><span class=\"n\">G_COUNT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">count_tracker</span> <span class=\"o\">=</span> <span class=\"s1\">'{G_COUNT=} at {datetime.datetime.utcnow():%H:%M:%S}'</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">aquire</span><span class=\"p\">():</span>\n    <span class=\"n\">G_COUNT</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">count_tracker</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">release</span><span class=\"p\">():</span>\n    <span class=\"n\">G_COUNT</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">count_tracker</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">():</span>\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">count_tracker</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">G_COUNT</span>\n</pre>\n\n          </div>"}, "last_serial": 7148734, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "02ee767c443074658d6d8b833055fa64", "sha256": "a324245beac1aeabff25c28804db14cd7942bd467d71766060f7c6f02f99a8d0"}, "downloads": -1, "filename": "f_yeah-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "02ee767c443074658d6d8b833055fa64", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3099, "upload_time": "2019-07-23T15:23:25", "upload_time_iso_8601": "2019-07-23T15:23:25.480958Z", "url": "https://files.pythonhosted.org/packages/87/e8/57a89912f3d1207a3022755cfe97fdf5bb34c7df67572b6c909b3f7e14dd/f_yeah-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02d276a619d97702c654513929f0ecde", "sha256": "68fa17c31ee0a67424e88cc79a6fcf694ff7424b093164f131f3c704f6cdbd01"}, "downloads": -1, "filename": "f-yeah-0.1.0.tar.gz", "has_sig": false, "md5_digest": "02d276a619d97702c654513929f0ecde", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 1782, "upload_time": "2019-07-23T15:23:31", "upload_time_iso_8601": "2019-07-23T15:23:31.218116Z", "url": "https://files.pythonhosted.org/packages/ef/59/aa9869e0b16598c45a7bc7557b04089e58d923b196eac2c78b7d137588b4/f-yeah-0.1.0.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "78184be623c74f168e09b828343fe7f3", "sha256": "86d2d4a2a1eaef56fdd3708b8063417f6d2ded1174fc07f40e525858b467cd67"}, "downloads": -1, "filename": "f_yeah-0.1.5-cp36-cp36m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "78184be623c74f168e09b828343fe7f3", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6, <3.9", "size": 33899, "upload_time": "2020-05-01T04:37:59", "upload_time_iso_8601": "2020-05-01T04:37:59.569799Z", "url": "https://files.pythonhosted.org/packages/64/2d/db95300fe8f63c50d3313d1958826bb81bcae0a4594249d290202a8d1103/f_yeah-0.1.5-cp36-cp36m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e06ab214f076beda89bb4c588209bf65", "sha256": "769e7c98af07591536ae6680227bff8e5b2bf1fcfeb8b0f8361fea27028e1b5b"}, "downloads": -1, "filename": "f_yeah-0.1.5-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e06ab214f076beda89bb4c588209bf65", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6, <3.9", "size": 126659, "upload_time": "2020-05-01T04:38:00", "upload_time_iso_8601": "2020-05-01T04:38:00.890185Z", "url": "https://files.pythonhosted.org/packages/df/c5/0dc26bfe69e4bc5129a5a9895e5d7769bf90d4a127dad3b894749979e1ad/f_yeah-0.1.5-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6009458a5c80aea60dce9f6c1f596ca1", "sha256": "73ca1c02b99681a7f84e15eb6e14e60aaa009b9d0e6efcce700d3b8c026c93a9"}, "downloads": -1, "filename": "f_yeah-0.1.5-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "6009458a5c80aea60dce9f6c1f596ca1", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6, <3.9", "size": 33881, "upload_time": "2020-05-01T04:38:02", "upload_time_iso_8601": "2020-05-01T04:38:02.243939Z", "url": "https://files.pythonhosted.org/packages/03/fd/9e157e3283438fb7f3e845e65d6fc10162702f32d3a2a7e00b8252c3903d/f_yeah-0.1.5-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a432952f9e53d777c6461062754efa4", "sha256": "1042568d8d5b387db68bc736c96555b3b48e4d07f63e6b9a15fef036617aecc7"}, "downloads": -1, "filename": "f_yeah-0.1.5-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "5a432952f9e53d777c6461062754efa4", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6, <3.9", "size": 127950, "upload_time": "2020-05-01T04:38:03", "upload_time_iso_8601": "2020-05-01T04:38:03.420598Z", "url": "https://files.pythonhosted.org/packages/7a/01/a99765f44c80e658fc844b491876b95ae96dec637544a5fe56bec317f809/f_yeah-0.1.5-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39bbacbd77d1761d45854c7451ac61c0", "sha256": "705b7d8120bae36faf202b97502f48f98af9bdedbb3b431b187af80256ce0de5"}, "downloads": -1, "filename": "f_yeah-0.1.5-cp38-cp38-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "39bbacbd77d1761d45854c7451ac61c0", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6, <3.9", "size": 38634, "upload_time": "2020-05-01T04:38:04", "upload_time_iso_8601": "2020-05-01T04:38:04.906761Z", "url": "https://files.pythonhosted.org/packages/0d/d5/160b01fa88fd5e4423c08084c65efd1d61c450e6d7607cb81d83bbb97b31/f_yeah-0.1.5-cp38-cp38-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35c8cd44e8205353f0ea0f451141d43c", "sha256": "bb0be9963c0550e9d5a8701ba7aed755ef495eefb0e459f3b1a354541d58f223"}, "downloads": -1, "filename": "f_yeah-0.1.5-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "35c8cd44e8205353f0ea0f451141d43c", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6, <3.9", "size": 135691, "upload_time": "2020-05-01T04:38:06", "upload_time_iso_8601": "2020-05-01T04:38:06.110324Z", "url": "https://files.pythonhosted.org/packages/88/0e/80883af4a500a3f522f9e9c6dbdbd4b0ec3779b62131fbfa03f9e293d2c1/f_yeah-0.1.5-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "164c81cc6163337e98de9a4ce81ffe44", "sha256": "43b89b518057d1d1747846fdfea39a17ef16ae5105f399ba5019e96e530cdd7f"}, "downloads": -1, "filename": "f-yeah-0.1.5.tar.gz", "has_sig": false, "md5_digest": "164c81cc6163337e98de9a4ce81ffe44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.9", "size": 4190, "upload_time": "2020-05-01T04:38:07", "upload_time_iso_8601": "2020-05-01T04:38:07.006090Z", "url": "https://files.pythonhosted.org/packages/d8/73/0a888da24dc6a230f5763c5b0a9aae43c88b3ce741f99df44c7be7c60fa4/f-yeah-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "e778206d270fcbdc5d586969a82ea9b4", "sha256": "0946fb81ec5751711d5c7cba1d1c778f599dbb38873d587e844a386ebb4c6f90"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp36-cp36m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "e778206d270fcbdc5d586969a82ea9b4", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6, <3.9", "size": 34567, "upload_time": "2020-05-01T22:50:37", "upload_time_iso_8601": "2020-05-01T22:50:37.106523Z", "url": "https://files.pythonhosted.org/packages/bc/a1/9ac22a1d89ab533fb452af22be0838d7171099cef0b93af5beb35e1510a4/f_yeah-0.1.6-cp36-cp36m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "523d0db3440b7e73fafffd08375079dd", "sha256": "aae7684c3c2f5169654a6693fca94c5dcf491307463bac40d105f930a3f96172"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "523d0db3440b7e73fafffd08375079dd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6, <3.9", "size": 127329, "upload_time": "2020-05-01T22:50:38", "upload_time_iso_8601": "2020-05-01T22:50:38.329754Z", "url": "https://files.pythonhosted.org/packages/6a/21/50a2fceb3d543fb58358bbaae4282579ff72644b73a43e96e6046a31c49b/f_yeah-0.1.6-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02cd3c8b2268aed2e0ac8b800c4f8c5b", "sha256": "244dccac3b6bb05a7ef8fdd36c657929464d92009dc02fb40f33a4834d71e8e8"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "02cd3c8b2268aed2e0ac8b800c4f8c5b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6, <3.9", "size": 34552, "upload_time": "2020-05-01T22:50:39", "upload_time_iso_8601": "2020-05-01T22:50:39.373998Z", "url": "https://files.pythonhosted.org/packages/8d/e6/e398580f568c81c7afe280ea38c99ddbe059e5f2c48ef4d5a088665d1f01/f_yeah-0.1.6-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf228b817c71ed3550616e4f72100c3a", "sha256": "1ff3372ae69df059096b006813d711c79554f2befe5134a7bb93019df8cfe3ac"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "cf228b817c71ed3550616e4f72100c3a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6, <3.9", "size": 128621, "upload_time": "2020-05-01T22:50:40", "upload_time_iso_8601": "2020-05-01T22:50:40.285223Z", "url": "https://files.pythonhosted.org/packages/6b/6d/ee3c58a20f83263c0a122fcbf1cb2e4705832c1d9119d83f1fde9a073d70/f_yeah-0.1.6-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a242f169ecf47c5d8a66c3964d4d9b68", "sha256": "53684feff0b29af5e59d7b246358448befd95d538947a03f1430c83791deda73"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp38-cp38-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "a242f169ecf47c5d8a66c3964d4d9b68", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6, <3.9", "size": 39303, "upload_time": "2020-05-01T22:50:41", "upload_time_iso_8601": "2020-05-01T22:50:41.603564Z", "url": "https://files.pythonhosted.org/packages/f0/97/be0e2ad131e64f5a254d95d30b67816064a3b4d43dc41028de7d1bdd3f70/f_yeah-0.1.6-cp38-cp38-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f77d603b673c9add7989acc7f21945af", "sha256": "613b40fbfc922f7e81d4b4f0ddf457aae6c852e6140abba3ed702ce5df73cffd"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f77d603b673c9add7989acc7f21945af", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6, <3.9", "size": 136361, "upload_time": "2020-05-01T22:50:42", "upload_time_iso_8601": "2020-05-01T22:50:42.797619Z", "url": "https://files.pythonhosted.org/packages/f5/7a/96fac39275023f54d5ca50666f9819f07a033069e2f71bde2f4c02013b50/f_yeah-0.1.6-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54e45868aca23ce7bd169e2666ecdfa4", "sha256": "5c11c1a5314b0579a49a84c8c3ca51278a7e1da0fb05aef4fb649997e8e1499a"}, "downloads": -1, "filename": "f-yeah-0.1.6.tar.gz", "has_sig": false, "md5_digest": "54e45868aca23ce7bd169e2666ecdfa4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.9", "size": 5271, "upload_time": "2020-05-01T22:50:44", "upload_time_iso_8601": "2020-05-01T22:50:44.082315Z", "url": "https://files.pythonhosted.org/packages/50/15/9ef4264c2708746424738346924a0b692f7e882c7d7820765798cfc1ca76/f-yeah-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e778206d270fcbdc5d586969a82ea9b4", "sha256": "0946fb81ec5751711d5c7cba1d1c778f599dbb38873d587e844a386ebb4c6f90"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp36-cp36m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "e778206d270fcbdc5d586969a82ea9b4", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6, <3.9", "size": 34567, "upload_time": "2020-05-01T22:50:37", "upload_time_iso_8601": "2020-05-01T22:50:37.106523Z", "url": "https://files.pythonhosted.org/packages/bc/a1/9ac22a1d89ab533fb452af22be0838d7171099cef0b93af5beb35e1510a4/f_yeah-0.1.6-cp36-cp36m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "523d0db3440b7e73fafffd08375079dd", "sha256": "aae7684c3c2f5169654a6693fca94c5dcf491307463bac40d105f930a3f96172"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp36-cp36m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "523d0db3440b7e73fafffd08375079dd", "packagetype": "bdist_wheel", "python_version": "cp36", "requires_python": ">=3.6, <3.9", "size": 127329, "upload_time": "2020-05-01T22:50:38", "upload_time_iso_8601": "2020-05-01T22:50:38.329754Z", "url": "https://files.pythonhosted.org/packages/6a/21/50a2fceb3d543fb58358bbaae4282579ff72644b73a43e96e6046a31c49b/f_yeah-0.1.6-cp36-cp36m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02cd3c8b2268aed2e0ac8b800c4f8c5b", "sha256": "244dccac3b6bb05a7ef8fdd36c657929464d92009dc02fb40f33a4834d71e8e8"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp37-cp37m-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "02cd3c8b2268aed2e0ac8b800c4f8c5b", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6, <3.9", "size": 34552, "upload_time": "2020-05-01T22:50:39", "upload_time_iso_8601": "2020-05-01T22:50:39.373998Z", "url": "https://files.pythonhosted.org/packages/8d/e6/e398580f568c81c7afe280ea38c99ddbe059e5f2c48ef4d5a088665d1f01/f_yeah-0.1.6-cp37-cp37m-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf228b817c71ed3550616e4f72100c3a", "sha256": "1ff3372ae69df059096b006813d711c79554f2befe5134a7bb93019df8cfe3ac"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp37-cp37m-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "cf228b817c71ed3550616e4f72100c3a", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.6, <3.9", "size": 128621, "upload_time": "2020-05-01T22:50:40", "upload_time_iso_8601": "2020-05-01T22:50:40.285223Z", "url": "https://files.pythonhosted.org/packages/6b/6d/ee3c58a20f83263c0a122fcbf1cb2e4705832c1d9119d83f1fde9a073d70/f_yeah-0.1.6-cp37-cp37m-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a242f169ecf47c5d8a66c3964d4d9b68", "sha256": "53684feff0b29af5e59d7b246358448befd95d538947a03f1430c83791deda73"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp38-cp38-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "a242f169ecf47c5d8a66c3964d4d9b68", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6, <3.9", "size": 39303, "upload_time": "2020-05-01T22:50:41", "upload_time_iso_8601": "2020-05-01T22:50:41.603564Z", "url": "https://files.pythonhosted.org/packages/f0/97/be0e2ad131e64f5a254d95d30b67816064a3b4d43dc41028de7d1bdd3f70/f_yeah-0.1.6-cp38-cp38-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f77d603b673c9add7989acc7f21945af", "sha256": "613b40fbfc922f7e81d4b4f0ddf457aae6c852e6140abba3ed702ce5df73cffd"}, "downloads": -1, "filename": "f_yeah-0.1.6-cp38-cp38-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "f77d603b673c9add7989acc7f21945af", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.6, <3.9", "size": 136361, "upload_time": "2020-05-01T22:50:42", "upload_time_iso_8601": "2020-05-01T22:50:42.797619Z", "url": "https://files.pythonhosted.org/packages/f5/7a/96fac39275023f54d5ca50666f9819f07a033069e2f71bde2f4c02013b50/f_yeah-0.1.6-cp38-cp38-manylinux1_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54e45868aca23ce7bd169e2666ecdfa4", "sha256": "5c11c1a5314b0579a49a84c8c3ca51278a7e1da0fb05aef4fb649997e8e1499a"}, "downloads": -1, "filename": "f-yeah-0.1.6.tar.gz", "has_sig": false, "md5_digest": "54e45868aca23ce7bd169e2666ecdfa4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6, <3.9", "size": 5271, "upload_time": "2020-05-01T22:50:44", "upload_time_iso_8601": "2020-05-01T22:50:44.082315Z", "url": "https://files.pythonhosted.org/packages/50/15/9ef4264c2708746424738346924a0b692f7e882c7d7820765798cfc1ca76/f-yeah-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:28 2020"}