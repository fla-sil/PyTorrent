{"info": {"author": "Sergey Shevtsov", "author_email": "dev.serzh@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6"], "description": "\n# tiny_web\nPython WSGI micro-framework to build api/site\n\n![purpose](https://img.shields.io/badge/purpose-learning-green.svg)\n![PyPI](https://img.shields.io/pypi/v/tiny_web)\n\n## Installation\n\n```shell\npip install tiny_web\n```\n\n## Quickstart\n\n```python\nfrom tiny_web.api import Api\n\napp = Api()\n\n\n# Basic route\n@app.route(\"/home\")\ndef home(request, response):\n    response.text = \"Hello from the HOME page\"\n    return response\n\n\n# Parametrized route\n@app.route(\"/hello/{name}\")\ndef greeting(request, response, name):\n    response.text = f\"Hello, {name}\"\n    return response\n\n\n'''\nClass based controller.\nClass methods are handlers for http request methods\n'''\n@app.route(\"/book\")\nclass BooksResource:\n    def get(self, req, resp):\n        resp.text = \"Books Page\"\n        return response\n\n    def post(self, req, resp):\n        resp.text = \"Endpoint to create a book\"\n        return response\n\n\n'''\nYou can response with templates.\nTemplates may be served in \"templates\" folder.\nJinja2 used as a template engine.\n'''\n@app.route(\"/template\")\ndef template_handler(req, resp):\n    resp.body = app.template(\n        \"index.html\", context={\"name\": \"Bumbo\", \"title\": \"Best Framework\"}).encode()\n    return response\n\n\n'''\nYou also can use query string parameters.\n\"tiny_web\" uses \"webob\" library to wrap requests and responses.\nSo if query looks like \"/users?name=john\" you can handle params like this.\nSee more on https://docs.pylonsproject.org/projects/webob/en/stable/reference.html\n'''\n@app.route(\"/users\")\ndef users(request, response):\n    name = request.GET.get(\"name\")\n    response.html = f\"Hello {name}\"\n    return response\n\n\n'''\nYou may use helpers for html or json\n'''\n@app.route(\"/users\")\ndef users(request, response):\n    response.html = app.template(\"users.html\")\n    return response\n\n\n@app.route(\"/items\")\ndef users(request, response):\n    items = [{'id': 1, 'name': 'item_1'}, {'id': 2, 'name': 'item_2'}]\n    response.json = {'items': items}\n    return response\n```\n\n### Unit Tests\n\nThe recommended way of writing unit tests is with [pytest](https://docs.pytest.org/en/latest/). There are two built in fixtures\nthat you may want to use when writing unit tests with Bumbo. The first one is `app` which is an instance of the main `API` class:\n\n```python\ndef test_route_overlap_throws_exception(app):\n    @app.route(\"/\")\n    def home(req, resp):\n        resp.text = \"Welcome Home.\"\n\n    with pytest.raises(AssertionError):\n        @app.route(\"/\")\n        def home2(req, resp):\n            resp.text = \"Welcome Home2.\"\n```\n\nThe other one is `client` that you can use to send HTTP requests to your handlers. It is based on the famous [requests](http://docs.python-requests.org/en/master/) and it should feel very familiar:\n\n```python\ndef test_parameterized_route(app, client):\n    @app.route(\"/{name}\")\n    def hello(req, resp, name):\n        resp.text = f\"hey {name}\"\n\n    assert client.get(\"http://testserver/john\").text == \"hey john\"\n```\n\n## Templates\n\nThe default folder for templates is `templates`. You can change it when initializing the main `API()` class:\n\n```python\napp = API(templates_dir=\"templates_dir_name\")\n```\n\nThen you can use HTML files in that folder like so in a handler:\n\n```python\n@app.route(\"/show/template\")\ndef handler_with_template(req, resp):\n    resp.html = app.template(\n        \"example.html\", context={\"title\": \"Hello\", \"body\": \"World!\"})\n```\n\n## Static Files\n\nJust like templates, the default folder for static files is `static` and you can override it:\n\n```python\napp = API(static_dir=\"static_dir_name\")\n```\n\nThen you can use the files inside this folder in HTML files:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{{title}}</title>\n\n  <link href=\"/static/main.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n\n<body>\n    <h1>{{body}}</h1>\n    <p>This is a paragraph</p>\n</body>\n</html>\n```\n\nAlso you may want use custom 404 page, just make '404.html' in the root of templates folder.\n\n### Middleware\n\nYou can create custom middleware classes by inheriting from the `bumbo.middleware.Middleware` class and overriding its two methods\nthat are called before and after each request:\n\n```python\nfrom bumbo.api import API\nfrom bumbo.middleware import Middleware\n\n\napp = API()\n\n\nclass SimpleCustomMiddleware(Middleware):\n    def process_request(self, req):\n        print(\"Before dispatch\", req.url)\n\n    def process_response(self, req, res):\n        print(\"After dispatch\", req.url)\n\n\napp.add_middleware(SimpleCustomMiddleware)\n```\n\n\nTODO:\n- [x] Templates\n- [x] Exceptions\n- [x] Static files\n- [x] Middlewares\n- [x] Documentation\n- [x] Build package\n- [ ] Dockerize and deploy demo\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tiny-web", "package_url": "https://pypi.org/project/tiny-web/", "platform": "", "project_url": "https://pypi.org/project/tiny-web/", "project_urls": null, "release_url": "https://pypi.org/project/tiny-web/0.0.4/", "requires_dist": ["jinja2 (==2.11.2)", "markupsafe (==1.1.1)", "parse (==1.15.0)", "webob (==1.8.6)", "whitenoise (==5.0.1)", "requests (==2.23.0)", "requests-wsgi-adapter (==0.4.1)"], "requires_python": ">=3.6.0", "summary": "WSGI-compatible framework to learn how to create tiny web applications", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tiny_web</h1>\n<p>Python WSGI micro-framework to build api/site</p>\n<p><img alt=\"purpose\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecc4fbe0ecba552b3f912f14745221a472c6b300/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707572706f73652d6c6561726e696e672d677265656e2e737667\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc3741902c33cce8aa4f4d7c00626cad65020c78/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74696e795f776562\"></p>\n<h2>Installation</h2>\n<pre>pip install tiny_web\n</pre>\n<h2>Quickstart</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tiny_web.api</span> <span class=\"kn\">import</span> <span class=\"n\">Api</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Api</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Basic route</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/home\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Hello from the HOME page\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"c1\"># Parametrized route</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/hello/</span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">Class based controller.</span>\n<span class=\"sd\">Class methods are handlers for http request methods</span>\n<span class=\"sd\">'''</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/book\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">BooksResource</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Books Page\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Endpoint to create a book\"</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">You can response with templates.</span>\n<span class=\"sd\">Templates may be served in \"templates\" folder.</span>\n<span class=\"sd\">Jinja2 used as a template engine.</span>\n<span class=\"sd\">'''</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/template\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">template_handler</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"index.html\"</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bumbo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Best Framework\"</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">You also can use query string parameters.</span>\n<span class=\"sd\">\"tiny_web\" uses \"webob\" library to wrap requests and responses.</span>\n<span class=\"sd\">So if query looks like \"/users?name=john\" you can handle params like this.</span>\n<span class=\"sd\">See more on https://docs.pylonsproject.org/projects/webob/en/stable/reference.html</span>\n<span class=\"sd\">'''</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/users\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">users</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"Hello </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"sd\">'''</span>\n<span class=\"sd\">You may use helpers for html or json</span>\n<span class=\"sd\">'''</span>\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/users\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">users</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span><span class=\"s2\">\"users.html\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/items\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">users</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'item_1'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'item_2'</span><span class=\"p\">}]</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'items'</span><span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n<h3>Unit Tests</h3>\n<p>The recommended way of writing unit tests is with <a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a>. There are two built in fixtures\nthat you may want to use when writing unit tests with Bumbo. The first one is <code>app</code> which is an instance of the main <code>API</code> class:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_route_overlap_throws_exception</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Welcome Home.\"</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">AssertionError</span><span class=\"p\">):</span>\n        <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">home2</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n            <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">\"Welcome Home2.\"</span>\n</pre>\n<p>The other one is <code>client</code> that you can use to send HTTP requests to your handlers. It is based on the famous <a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\">requests</a> and it should feel very familiar:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_parameterized_route</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">):</span>\n    <span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/</span><span class=\"si\">{name}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">\"hey </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"http://testserver/john\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">==</span> <span class=\"s2\">\"hey john\"</span>\n</pre>\n<h2>Templates</h2>\n<p>The default folder for templates is <code>templates</code>. You can change it when initializing the main <code>API()</code> class:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"p\">(</span><span class=\"n\">templates_dir</span><span class=\"o\">=</span><span class=\"s2\">\"templates_dir_name\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can use HTML files in that folder like so in a handler:</p>\n<pre><span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s2\">\"/show/template\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler_with_template</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">resp</span><span class=\"p\">):</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"example.html\"</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"s2\">\"body\"</span><span class=\"p\">:</span> <span class=\"s2\">\"World!\"</span><span class=\"p\">})</span>\n</pre>\n<h2>Static Files</h2>\n<p>Just like templates, the default folder for static files is <code>static</code> and you can override it:</p>\n<pre><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"p\">(</span><span class=\"n\">static_dir</span><span class=\"o\">=</span><span class=\"s2\">\"static_dir_name\"</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can use the files inside this folder in HTML files:</p>\n<pre><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"en\"</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"UTF-8\"</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>{{title}}<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/static/main.css\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"text/css\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>{{body}}<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>This is a paragraph<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre>\n<p>Also you may want use custom 404 page, just make '404.html' in the root of templates folder.</p>\n<h3>Middleware</h3>\n<p>You can create custom middleware classes by inheriting from the <code>bumbo.middleware.Middleware</code> class and overriding its two methods\nthat are called before and after each request:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bumbo.api</span> <span class=\"kn\">import</span> <span class=\"n\">API</span>\n<span class=\"kn\">from</span> <span class=\"nn\">bumbo.middleware</span> <span class=\"kn\">import</span> <span class=\"n\">Middleware</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">API</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleCustomMiddleware</span><span class=\"p\">(</span><span class=\"n\">Middleware</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Before dispatch\"</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"After dispatch\"</span><span class=\"p\">,</span> <span class=\"n\">req</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_middleware</span><span class=\"p\">(</span><span class=\"n\">SimpleCustomMiddleware</span><span class=\"p\">)</span>\n</pre>\n<p>TODO:</p>\n<ul>\n<li>[x] Templates</li>\n<li>[x] Exceptions</li>\n<li>[x] Static files</li>\n<li>[x] Middlewares</li>\n<li>[x] Documentation</li>\n<li>[x] Build package</li>\n<li>[ ] Dockerize and deploy demo</li>\n</ul>\n\n          </div>"}, "last_serial": 7138173, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "21a23ebaad7fd850e03f34176cd5c0a2", "sha256": "9caa51aa6cd4c16736a301b3d80045814b9971eeda47f7fb8f6db90407b5ceac"}, "downloads": -1, "filename": "tiny_web-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "21a23ebaad7fd850e03f34176cd5c0a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 6150, "upload_time": "2020-04-30T08:19:51", "upload_time_iso_8601": "2020-04-30T08:19:51.959520Z", "url": "https://files.pythonhosted.org/packages/e8/17/52036d1b0770de1ba711fcdcc5368315c949e3fa88b1bbb5c7e785b9638a/tiny_web-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "795026e5705fc9a42dddbb654ae8551d", "sha256": "2d41dca5957e36c54658c8c39a9b765a63a153fe11106529f6906be2ee2d4113"}, "downloads": -1, "filename": "tiny_web-0.0.1.tar.gz", "has_sig": false, "md5_digest": "795026e5705fc9a42dddbb654ae8551d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 5548, "upload_time": "2020-04-30T08:19:54", "upload_time_iso_8601": "2020-04-30T08:19:54.145439Z", "url": "https://files.pythonhosted.org/packages/90/2d/bd67faad2db8c882c721020cc7c6c0cf8c734c84bdcc6e203411b223e8ee/tiny_web-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "8eeb8f980085f0f3b33a005db4190c3f", "sha256": "aec9b0810bb06aea39d1597f42a9c91b0634582461fde34b9ea3e858eb6390dc"}, "downloads": -1, "filename": "tiny_web-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8eeb8f980085f0f3b33a005db4190c3f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7877, "upload_time": "2020-04-30T08:57:20", "upload_time_iso_8601": "2020-04-30T08:57:20.937001Z", "url": "https://files.pythonhosted.org/packages/c5/46/4c45ba48afb043bc9e45ff11d4cba3348aba4ffb036ceb5a504bb8e54740/tiny_web-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e87c42800a5a3c8c8514b9927cce9dd", "sha256": "42b6b5ee4b232e5741880bcc455a2a40f21820562f607c33f89c8df2e08fb745"}, "downloads": -1, "filename": "tiny_web-0.0.2.tar.gz", "has_sig": false, "md5_digest": "8e87c42800a5a3c8c8514b9927cce9dd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9252, "upload_time": "2020-04-30T08:57:22", "upload_time_iso_8601": "2020-04-30T08:57:22.976544Z", "url": "https://files.pythonhosted.org/packages/b5/2a/09124c1f8ee20b63d08fd406f47eda52fa5770449747fcb8d20f287fe7a6/tiny_web-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "14b7c6fe78cadc8dcc88922a30e8f9c1", "sha256": "64e04939b5ce571ae08c3db7c5346cbd75b4fa969ae4406ee779b76532b88151"}, "downloads": -1, "filename": "tiny_web-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "14b7c6fe78cadc8dcc88922a30e8f9c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7872, "upload_time": "2020-04-30T09:19:16", "upload_time_iso_8601": "2020-04-30T09:19:16.163505Z", "url": "https://files.pythonhosted.org/packages/f4/0e/24708d64931dc40ff8b187de8db37a0b647abb2697b7160c0ede411e1bce/tiny_web-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a602f1da8f81246c7998628f96e9923", "sha256": "99ff3e18e93d27d05210f689526ec0f3d8a0302e1d4fe2ff9e4e5ec53c110428"}, "downloads": -1, "filename": "tiny_web-0.0.3.tar.gz", "has_sig": false, "md5_digest": "0a602f1da8f81246c7998628f96e9923", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9234, "upload_time": "2020-04-30T09:19:18", "upload_time_iso_8601": "2020-04-30T09:19:18.866381Z", "url": "https://files.pythonhosted.org/packages/12/a9/2a76ed5daf7b8d91e25767971be69bb2e1ebac9a839a4732951f31b1395e/tiny_web-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "12235d47c2cae9c18f9c701cc945db0e", "sha256": "215933682726e0a96ef0ab0da1f1955282351c624aef181787ab27ad8c4d9625"}, "downloads": -1, "filename": "tiny_web-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "12235d47c2cae9c18f9c701cc945db0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7947, "upload_time": "2020-04-30T15:24:45", "upload_time_iso_8601": "2020-04-30T15:24:45.930698Z", "url": "https://files.pythonhosted.org/packages/b6/f6/2307a22fce280180dc22d5019cfe379dae75531a4a365a89173d2dc51b25/tiny_web-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d85577af983ffd75c2f67a3fbc2180f7", "sha256": "1b9cedc112704a777a9d5ea774cde61bc34856af767742fc89f2b40adaaf4a69"}, "downloads": -1, "filename": "tiny_web-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d85577af983ffd75c2f67a3fbc2180f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9352, "upload_time": "2020-04-30T15:24:49", "upload_time_iso_8601": "2020-04-30T15:24:49.736461Z", "url": "https://files.pythonhosted.org/packages/a3/89/00e8e38d848af124c83d4df878268f8984150cc45bf67bd50bb62b90b8a1/tiny_web-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "12235d47c2cae9c18f9c701cc945db0e", "sha256": "215933682726e0a96ef0ab0da1f1955282351c624aef181787ab27ad8c4d9625"}, "downloads": -1, "filename": "tiny_web-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "12235d47c2cae9c18f9c701cc945db0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 7947, "upload_time": "2020-04-30T15:24:45", "upload_time_iso_8601": "2020-04-30T15:24:45.930698Z", "url": "https://files.pythonhosted.org/packages/b6/f6/2307a22fce280180dc22d5019cfe379dae75531a4a365a89173d2dc51b25/tiny_web-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d85577af983ffd75c2f67a3fbc2180f7", "sha256": "1b9cedc112704a777a9d5ea774cde61bc34856af767742fc89f2b40adaaf4a69"}, "downloads": -1, "filename": "tiny_web-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d85577af983ffd75c2f67a3fbc2180f7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9352, "upload_time": "2020-04-30T15:24:49", "upload_time_iso_8601": "2020-04-30T15:24:49.736461Z", "url": "https://files.pythonhosted.org/packages/a3/89/00e8e38d848af124c83d4df878268f8984150cc45bf67bd50bb62b90b8a1/tiny_web-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:52 2020"}