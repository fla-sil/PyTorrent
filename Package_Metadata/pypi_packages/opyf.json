{"info": {"author": "Gauthier Rousseau", "author_email": "gauthier.rousseau@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "\ufeff\n# About\n\nOpyFlow : Python package for Optical Flow measurements\n\nOpyflow is based on openCV and VTK libraries to detect good features to track, calculate their displacements by the Lukas Kanade method and interpolate them on a mesh. The package contains also some rendering tools built with matplotlib. Velocities can be exported (csv,tecplot, vtk, hdf5).\nFor flow calculations, the process is mainly inspired on the openCV python sample [lktrack.py](https://github.com/opencv/opencv/blob/master/samples/python/lk_track.py).\n\nAuthor: Gauthier Rousseau\n\nCorresponding e-mail : gauthier.rousseau@gmail.com\n\n## Quick start\n\nAssuming that you already have an environment with python installed (<=3.7), run the following command on your terminal:\n\n```shell\npip install opyf\n```\n\nor from the *opyflow* repository\n\n```shell\npython setup.py install\n```\n\nThis should install the opyf library and the main dependencies (vtk and opencv) automatically.\n\nTo analyze a frame sequence (*png*, *bmp*, *jpeg*, *tiff*) you can run the following script:\n\n```python\nimport opyf\nanalyzer=opyf.frameSequenceAnalyzer(\"folder/toward/images\")\n```\n\nFor a video (*mp4*, *avi*, *mkv*, ... ):\n\n```python\nanalyzer=opyf.videoAnalyzer(\"video/file/path\")\n```\n\nTo perform your first analyze run :\n\n```python\nanalyzer.extractGoodFeaturesAndDisplacements()\n```\n\nopyf package contains two frames and one video for testing and practicing yourself:\n\n- The two frames were extracted from the frame sequence of the Test case A of the *PIV Challenge 2014*\n\n![PIV challenge](test/Test_case_PIV_Challenge_2014/gif/example_PIV_challenge.gif)\n\nWhen applied to the entire dataset, It can produce the above result (see [Test PIV Challenge 2014 - Case A](test/Test_case_PIV_Challenge_2014/testPIVChallengeCaseA.md) for details on the procedure).\n\n- The video is a bird eye view video of a stream river taken by a drone and from which surface velocities can be extracted ([see the following python file for the different possible procedures](test/Test_Navizence/test_opyf_Navizence.py) ).\n\n![bird eye view Navizence](test/Test_Navizence/gif/example_Navizence_Drone.gif)\n\n## Contents\n\nThis archive is organized as follows:\n\nThe setup file:\n\n- setup.py\n\nThe package Folder opyf:\n\n- opyf\n\n  - Track.py\n  - Interpolate.py\n  - Files.py\n  - Filters.py\n  - Render.py\n  - custom_cmap.py (based on Chris Slocum file)\n\nThe test Folder:\n\n- test\n\n  - Test_case_PIV_Challenge_2014\n\n    - CommandLines-Opyf-PIV-Challenge2014-Test.py\n\n    - CommandLines-Opyf-PIV-Challenge2014-Test_Simple.py\n\n    - mask.tiff\n\n    - images (sample of 2 source images)\n\n      - A_00001_a.tif\n      - A_00001_b.tif\n    - ReadMe_Download_Images.txt (instruction to download the entire image sequence of the test)\n    - meanFlow.png (Results for the CommandLines)\n    - rms.png\n    - [testPIVChallengeCaseA.md](test/Test_case_PIV_Challenge_2014/testPIVChallengeCaseA.md)\n\n  - Test_land_slide_youtube_video\n    - OpyFlow_testcase_youtube_MA.py\n    - OpyFlow_testcase_youtube_simple.py\n    - mask.png\n    - The video must be downloaded from youtube with the package pytube\n    - ReadMe_download_a_youtube_video.txt (instruction to download the video)\n  - Test_Navizence\n    - [2018.07.04_Station_fixe_30m_sample.mp4](test/Test_Navizence/2018.07.04_Station_fixe_30m_sample.mp4)\n    - [test_opyf_Navizence.py](test/Test_Navizence/test_opyf_Navizence.py)\n\nOne test file performed on the [PIV challenge 2014 caseA](http://www.pivchallenge.org/pivchallenge4.html#case_a):\nThe results are compared to the main findings of the challenge:\n``-K\u00e4hler CJ, Astarita T, Vlachos PP, Sakakibara J, Hain R, Discetti S, Foy RL, Cierpka C, 2016, Main results of the 4th International PIV Challenge, Experiments in Fluids, 57: 97.''\n\nA test on synthetic images is still required.\n\n## Installation with anaconda\n\nThe package requires python and basic python package: csv, numpy, matplotlib, tqdm\n\nThe main dependencies are :\n\nOpenCV\nVTK\n\nThe code use last versions of VTK and openCV.\nHowever, pip (Python Package Index) doesn't have the last vtk yet.\nIt is also a bit tricky to compile the source directly from the vtk website.\nHowever, the simplest way to install it is to use miniconda or anaconda and the last updated sources from conda-forge.\n\nWhen miniconda/anaconda is installed type in the command prompt:\n\nconda create -n opyfenv vtk opencv matplotlib scipy tqdm (spyder)\nsource activate opyfenv\n\nThese command lines will install the an environnement with python 3.6.\n\nTested on:\nPython version: 2.7 and 3.6\nVTK : 7.0.1 and +\nopencv : 3.2 and +\nnumpy: 1.17\nmatplotlib : 2.0.0\n\n## Citation\n\nThis package has been developed in the course of my PhD at EPFL to study [Turbulent flows over rough permeable beds](https://infoscience.epfl.ch/record/264790/files/EPFL_TH9327.pdf). Outputs are visible in the manuscript as well as in this [Video](https://www.youtube.com/watch?v=JmwE-kL0kTk) where paraview animations have been rendered thanks to opyf outputs.\n\n@PhdThesis{rousseau2019turbulent,\n  title={Turbulent flows over rough permeable beds in mountain rivers: Experimental insights and modeling},\n  author={Rousseau, Gauthier},\n  year={2019},\n  institution={EPFL}\n}\n\nContributors : Hugo Rousseau, Mohamed Nadeem, LHE team and others\n\nCredits for UAV video : Bob de Graffenried\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/groussea/opyflow", "keywords": "optical flow", "license": "GPL-3.0", "maintainer": "", "maintainer_email": "", "name": "opyf", "package_url": "https://pypi.org/project/opyf/", "platform": "", "project_url": "https://pypi.org/project/opyf/", "project_urls": {"Homepage": "https://github.com/groussea/opyflow"}, "release_url": "https://pypi.org/project/opyf/1.2/", "requires_dist": ["ipython", "vtk", "opencv-python", "tqdm", "h5py", "matplotlib", "scipy", "pytube"], "requires_python": "", "summary": "OpyFlow - Python package for Optical Flow measurements.", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>About</h1>\n<p>OpyFlow : Python package for Optical Flow measurements</p>\n<p>Opyflow is based on openCV and VTK libraries to detect good features to track, calculate their displacements by the Lukas Kanade method and interpolate them on a mesh. The package contains also some rendering tools built with matplotlib. Velocities can be exported (csv,tecplot, vtk, hdf5).\nFor flow calculations, the process is mainly inspired on the openCV python sample <a href=\"https://github.com/opencv/opencv/blob/master/samples/python/lk_track.py\" rel=\"nofollow\">lktrack.py</a>.</p>\n<p>Author: Gauthier Rousseau</p>\n<p>Corresponding e-mail : <a href=\"mailto:gauthier.rousseau@gmail.com\">gauthier.rousseau@gmail.com</a></p>\n<h2>Quick start</h2>\n<p>Assuming that you already have an environment with python installed (&lt;=3.7), run the following command on your terminal:</p>\n<pre>pip install opyf\n</pre>\n<p>or from the <em>opyflow</em> repository</p>\n<pre>python setup.py install\n</pre>\n<p>This should install the opyf library and the main dependencies (vtk and opencv) automatically.</p>\n<p>To analyze a frame sequence (<em>png</em>, <em>bmp</em>, <em>jpeg</em>, <em>tiff</em>) you can run the following script:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">opyf</span>\n<span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"n\">opyf</span><span class=\"o\">.</span><span class=\"n\">frameSequenceAnalyzer</span><span class=\"p\">(</span><span class=\"s2\">\"folder/toward/images\"</span><span class=\"p\">)</span>\n</pre>\n<p>For a video (<em>mp4</em>, <em>avi</em>, <em>mkv</em>, ... ):</p>\n<pre><span class=\"n\">analyzer</span><span class=\"o\">=</span><span class=\"n\">opyf</span><span class=\"o\">.</span><span class=\"n\">videoAnalyzer</span><span class=\"p\">(</span><span class=\"s2\">\"video/file/path\"</span><span class=\"p\">)</span>\n</pre>\n<p>To perform your first analyze run :</p>\n<pre><span class=\"n\">analyzer</span><span class=\"o\">.</span><span class=\"n\">extractGoodFeaturesAndDisplacements</span><span class=\"p\">()</span>\n</pre>\n<p>opyf package contains two frames and one video for testing and practicing yourself:</p>\n<ul>\n<li>The two frames were extracted from the frame sequence of the Test case A of the <em>PIV Challenge 2014</em></li>\n</ul>\n<p><img alt=\"PIV challenge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e6a3679170cf9cf57d601ebf933851d5041001c/746573742f546573745f636173655f5049565f4368616c6c656e67655f323031342f6769662f6578616d706c655f5049565f6368616c6c656e67652e676966\"></p>\n<p>When applied to the entire dataset, It can produce the above result (see <a href=\"test/Test_case_PIV_Challenge_2014/testPIVChallengeCaseA.md\" rel=\"nofollow\">Test PIV Challenge 2014 - Case A</a> for details on the procedure).</p>\n<ul>\n<li>The video is a bird eye view video of a stream river taken by a drone and from which surface velocities can be extracted (<a href=\"test/Test_Navizence/test_opyf_Navizence.py\" rel=\"nofollow\">see the following python file for the different possible procedures</a> ).</li>\n</ul>\n<p><img alt=\"bird eye view Navizence\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1a3771fb25cf26deda33d3c5aab51d9b4467cb22/746573742f546573745f4e6176697a656e63652f6769662f6578616d706c655f4e6176697a656e63655f44726f6e652e676966\"></p>\n<h2>Contents</h2>\n<p>This archive is organized as follows:</p>\n<p>The setup file:</p>\n<ul>\n<li>setup.py</li>\n</ul>\n<p>The package Folder opyf:</p>\n<ul>\n<li>\n<p>opyf</p>\n<ul>\n<li>Track.py</li>\n<li>Interpolate.py</li>\n<li>Files.py</li>\n<li>Filters.py</li>\n<li>Render.py</li>\n<li>custom_cmap.py (based on Chris Slocum file)</li>\n</ul>\n</li>\n</ul>\n<p>The test Folder:</p>\n<ul>\n<li>\n<p>test</p>\n<ul>\n<li>\n<p>Test_case_PIV_Challenge_2014</p>\n<ul>\n<li>\n<p>CommandLines-Opyf-PIV-Challenge2014-Test.py</p>\n</li>\n<li>\n<p>CommandLines-Opyf-PIV-Challenge2014-Test_Simple.py</p>\n</li>\n<li>\n<p>mask.tiff</p>\n</li>\n<li>\n<p>images (sample of 2 source images)</p>\n<ul>\n<li>A_00001_a.tif</li>\n<li>A_00001_b.tif</li>\n</ul>\n</li>\n<li>\n<p>ReadMe_Download_Images.txt (instruction to download the entire image sequence of the test)</p>\n</li>\n<li>\n<p>meanFlow.png (Results for the CommandLines)</p>\n</li>\n<li>\n<p>rms.png</p>\n</li>\n<li>\n<p><a href=\"test/Test_case_PIV_Challenge_2014/testPIVChallengeCaseA.md\" rel=\"nofollow\">testPIVChallengeCaseA.md</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Test_land_slide_youtube_video</p>\n<ul>\n<li>OpyFlow_testcase_youtube_MA.py</li>\n<li>OpyFlow_testcase_youtube_simple.py</li>\n<li>mask.png</li>\n<li>The video must be downloaded from youtube with the package pytube</li>\n<li>ReadMe_download_a_youtube_video.txt (instruction to download the video)</li>\n</ul>\n</li>\n<li>\n<p>Test_Navizence</p>\n<ul>\n<li><a href=\"test/Test_Navizence/2018.07.04_Station_fixe_30m_sample.mp4\" rel=\"nofollow\">2018.07.04_Station_fixe_30m_sample.mp4</a></li>\n<li><a href=\"test/Test_Navizence/test_opyf_Navizence.py\" rel=\"nofollow\">test_opyf_Navizence.py</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>One test file performed on the <a href=\"http://www.pivchallenge.org/pivchallenge4.html#case_a\" rel=\"nofollow\">PIV challenge 2014 caseA</a>:\nThe results are compared to the main findings of the challenge:\n``-K\u00e4hler CJ, Astarita T, Vlachos PP, Sakakibara J, Hain R, Discetti S, Foy RL, Cierpka C, 2016, Main results of the 4th International PIV Challenge, Experiments in Fluids, 57: 97.''</p>\n<p>A test on synthetic images is still required.</p>\n<h2>Installation with anaconda</h2>\n<p>The package requires python and basic python package: csv, numpy, matplotlib, tqdm</p>\n<p>The main dependencies are :</p>\n<p>OpenCV\nVTK</p>\n<p>The code use last versions of VTK and openCV.\nHowever, pip (Python Package Index) doesn't have the last vtk yet.\nIt is also a bit tricky to compile the source directly from the vtk website.\nHowever, the simplest way to install it is to use miniconda or anaconda and the last updated sources from conda-forge.</p>\n<p>When miniconda/anaconda is installed type in the command prompt:</p>\n<p>conda create -n opyfenv vtk opencv matplotlib scipy tqdm (spyder)\nsource activate opyfenv</p>\n<p>These command lines will install the an environnement with python 3.6.</p>\n<p>Tested on:\nPython version: 2.7 and 3.6\nVTK : 7.0.1 and +\nopencv : 3.2 and +\nnumpy: 1.17\nmatplotlib : 2.0.0</p>\n<h2>Citation</h2>\n<p>This package has been developed in the course of my PhD at EPFL to study <a href=\"https://infoscience.epfl.ch/record/264790/files/EPFL_TH9327.pdf\" rel=\"nofollow\">Turbulent flows over rough permeable beds</a>. Outputs are visible in the manuscript as well as in this <a href=\"https://www.youtube.com/watch?v=JmwE-kL0kTk\" rel=\"nofollow\">Video</a> where paraview animations have been rendered thanks to opyf outputs.</p>\n<p>@PhdThesis{rousseau2019turbulent,\ntitle={Turbulent flows over rough permeable beds in mountain rivers: Experimental insights and modeling},\nauthor={Rousseau, Gauthier},\nyear={2019},\ninstitution={EPFL}\n}</p>\n<p>Contributors : Hugo Rousseau, Mohamed Nadeem, LHE team and others</p>\n<p>Credits for UAV video : Bob de Graffenried</p>\n\n          </div>"}, "last_serial": 7120313, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "0e250a0eeafb5206790e059981ffd69b", "sha256": "8bfe5f907e310fb084a3265d6a3ddbd302bb7d6a6c8d7a1e2392794fa5f2dc56"}, "downloads": -1, "filename": "opyf-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e250a0eeafb5206790e059981ffd69b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49968, "upload_time": "2020-04-28T09:56:15", "upload_time_iso_8601": "2020-04-28T09:56:15.817611Z", "url": "https://files.pythonhosted.org/packages/0e/db/4d2fa91282b8638a09e8efebc8addb815c69050497f1823fbbaa475ae19e/opyf-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38ae4f3e9efc137894f1a236ec184df1", "sha256": "b5be2d1d75258fc5d4b44834ef4fd53152b00373afd47e40cf6f856bca9bcda6"}, "downloads": -1, "filename": "opyf-1.1.tar.gz", "has_sig": false, "md5_digest": "38ae4f3e9efc137894f1a236ec184df1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34699, "upload_time": "2020-04-28T09:56:18", "upload_time_iso_8601": "2020-04-28T09:56:18.393750Z", "url": "https://files.pythonhosted.org/packages/28/b9/0d38f4b980727dd3b1a6ead875f5eb6c01e7175603069a8cdeb80555ba5d/opyf-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "1d46e02527b505016efa8f5b04642213", "sha256": "c2fa9529e7b80041f747f2f5d8a50e6956579bc8d6c5ae96b590f477dc92cc4c"}, "downloads": -1, "filename": "opyf-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1d46e02527b505016efa8f5b04642213", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49998, "upload_time": "2020-04-28T13:11:33", "upload_time_iso_8601": "2020-04-28T13:11:33.230100Z", "url": "https://files.pythonhosted.org/packages/e0/e7/6b566b544db095bdd05ef5076af0aa3992db6facafbd025f0293aac2a8d5/opyf-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74ad7fdffef58ad9d7a77681a567a7c2", "sha256": "0c09c577cba42dce0398d6689ec6fb0ca2517b9a7ab6af032ec23ffab8271733"}, "downloads": -1, "filename": "opyf-1.2.tar.gz", "has_sig": false, "md5_digest": "74ad7fdffef58ad9d7a77681a567a7c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34729, "upload_time": "2020-04-28T13:11:34", "upload_time_iso_8601": "2020-04-28T13:11:34.733282Z", "url": "https://files.pythonhosted.org/packages/34/93/6b02321903d30c3a921dacdfd4837c59d8809c0da4fb75d117351b04927f/opyf-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d46e02527b505016efa8f5b04642213", "sha256": "c2fa9529e7b80041f747f2f5d8a50e6956579bc8d6c5ae96b590f477dc92cc4c"}, "downloads": -1, "filename": "opyf-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1d46e02527b505016efa8f5b04642213", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49998, "upload_time": "2020-04-28T13:11:33", "upload_time_iso_8601": "2020-04-28T13:11:33.230100Z", "url": "https://files.pythonhosted.org/packages/e0/e7/6b566b544db095bdd05ef5076af0aa3992db6facafbd025f0293aac2a8d5/opyf-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74ad7fdffef58ad9d7a77681a567a7c2", "sha256": "0c09c577cba42dce0398d6689ec6fb0ca2517b9a7ab6af032ec23ffab8271733"}, "downloads": -1, "filename": "opyf-1.2.tar.gz", "has_sig": false, "md5_digest": "74ad7fdffef58ad9d7a77681a567a7c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34729, "upload_time": "2020-04-28T13:11:34", "upload_time_iso_8601": "2020-04-28T13:11:34.733282Z", "url": "https://files.pythonhosted.org/packages/34/93/6b02321903d30c3a921dacdfd4837c59d8809c0da4fb75d117351b04927f/opyf-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:54 2020"}