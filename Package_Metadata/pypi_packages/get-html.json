{"info": {"author": "Lucy Linder", "author_email": "lucy.derlin@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# get-html: get raw or rendered HTML (for humans)\n\n**<p align=center>Read all the details on how I started implementing this at \u21dd\n[Rendering-HTML_a-journey](https://github.com/derlin/get-html/blob/master/blog/Rendering-HTML_a-journey.md) \u21dc </p>**\n\nThis module is made for anyone needing to scrape HTML (i.e. scrape the web).\n\nIt knows how to do only one thing, but does it well: getting HTML from a web page. The kind of HTML is up to you. Either:\n\n* the **raw HTML**, directly from the server or,\n* the **rendered HTML**, after JS/AJAX calls.\n\nMoreover, it is made such that you can use a unique method throughout your project, \nand switch between the two behaviors at launch by setting an environment variable.\n\n## HtmlRenderer: a class to seamlessly render a page\n\n`HtmlRenderer` handles all the specific `pyppeteer` stuff for you. It is also thread-safe.\n\n### \"sync\" usage \n\nHere is a **typical usage**:\n\n```python\nfrom get_html import HtmlRenderer\n\nrenderer = HtmlRenderer()\ntry:  \n    # use the renderer. The underlying browser will be instantiated on first call to render.\n    response = renderer.render(url='https://xkcd.com')\n    html = response.text # or resposne.content to get the raw bytes\n    # ... etc.\nfinally:\n    # close the underlying browser\n    renderer.close()\n```\n\nOr simply use a **context manager**:\n```python\nfrom get_html import create_renderer\n\nwith create_renderer() as renderer:  \n    # use the renderer. The underlying browser will be instanciated on first call to render\n    response = renderer.render(url='https://xkcd.com')\n    html = response.text # or resposne.content to get the raw bytes\n\n# here, the underlying browser will be closed\n```\n\nIf you need to **manipulate the page** before getting the content, pass an *async* function to `render`.\nIt will be called after the page loaded, but before the HTML content is fetched.\nFor example:\n```python\nfrom get_html import create_renderer\n\nasync def scroll_to_end(page):\n    # https://github.com/miyakogi/pyppeteer/issues/205#issuecomment-470886682\n    await page.evaluate('{window.scrollBy(0, document.body.scrollHeight);}')\n\nwith create_renderer() as renderer: \n    response = renderer.render('https://9gag.com', manipulate_page_func=scroll_to_end)\n```\n\n### \"async\" usage \n\nAll public methods have an *async* counterpart. When using *async*, however, you need to ensure that\n\n1. the browser is created once,\n2. the browser is closed once.\n \nBy default, the browser is launched upon first use, usually on the first call of `render`. \nWhen using *async*, this may be a problem, as multiple coroutine will try to create the browser multiple times.\nTo avoid this, ensure you trigger the browser creation *before* launching the other tasks (same for closing, wait for all tasks to complete).\n\nA concrete example is available in\n[examples/async_example.py](https://github.com/derlin/blob/master/examples/async_example.py). Here is the gist:\n\n```python\nimport asyncio\nfrom get_html import HtmlRenderer\n\nloop = asyncio.get_event_loop()\nrenderer = HtmlRenderer()\n\n# trigger the browser creation only once, before the tasks\nloop.run_until_complete(renderer.async_browser)\n\n# .. TASKS WITH RENDERING CALLS ... \n#    e.g. loop.run_until_complete(someRenderingTask())\n\n# finally close the browser once the tasks completed\nloop.run_until_complete(renderer.async_close())\n```\n\n## do_get: seemlessly switch between behaviors\n\n```python\nfrom get_html.env_defined_get import do_get\n\nresponse = do_get('https://xkcd.com')\nassert response.status_code == 200\n\nhtml_bytes = response.content\nhtml_string = response.text\n```\n\nThe actual behavior of `do_get` will depend on the environment variable `RENDER_HTML`:\n\n* `RENDER_HTML=[1|y|true|on]`: `do_get` will launch a chromium instance under the hood and render the page (rendered HTML)\n* `RENDER_HTML=<anything BUT 2>` (default): `do_get` will forward the call to `requests.get` (raw HTML). \n  Do **NOT** use `2` before reading through the multi-threading section.\n\nIf rendering support is on, a browser instance will be launched **on module load**, and will be kept alive throughout the life of the application.\nKeep that in mind if you have low-memory (chromium !!).\n\n## Multi-threading\n\n`HtmlRenderer` is thread-safe.\n\nFor `do_get` with rendering support, there are two possibilities.\n\n1. Create **only one browser**, shared by all threads. In this case, only one thread can execute `render` at a time (locking mechanism);\n2. Create **one browser per thread**. In this case, threads can render in parallel. But be careful, each time a new thread calls `do_get`,\n  *a new browser is launched*, that will keep running until the end of the program (or until you call `get_html.env_defined_get.close()`).\n\nEnable mode (2) by setting `RENDER_HTML=2`. But again, ensure you don't have too many threads, since chromium needs a lot of memory.\n\n## Running tests\n\nOn Windows/Linux:\n```bash\npip install tox\ntox\n```\n\nOn Mac (see https://github.com/tox-dev/tox/issues/1485):\n```bash\npip install \"tox<3.7\"\ntox\n```\n\n## Common errors\n\n**`libXX not found` (Linux)**\n\nSee [issue #290 of puppeteer](https://github.com/puppeteer/puppeteer/issues/290#issuecomment-480247488)\n\n```bash\nsudo apt-get install gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/derlin/get-html", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "get-html", "package_url": "https://pypi.org/project/get-html/", "platform": "", "project_url": "https://pypi.org/project/get-html/", "project_urls": {"Homepage": "https://github.com/derlin/get-html"}, "release_url": "https://pypi.org/project/get-html/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "HTTP GET with JS rendering support, to get the rendered HTML from a page easily", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>get-html: get raw or rendered HTML (for humans)</h1>\n<p><strong></strong></p><p align=\"center\"><strong>Read all the details on how I started implementing this at \u21dd\n<a href=\"https://github.com/derlin/get-html/blob/master/blog/Rendering-HTML_a-journey.md\" rel=\"nofollow\">Rendering-HTML_a-journey</a> \u21dc </strong></p><p></p>\n<p>This module is made for anyone needing to scrape HTML (i.e. scrape the web).</p>\n<p>It knows how to do only one thing, but does it well: getting HTML from a web page. The kind of HTML is up to you. Either:</p>\n<ul>\n<li>the <strong>raw HTML</strong>, directly from the server or,</li>\n<li>the <strong>rendered HTML</strong>, after JS/AJAX calls.</li>\n</ul>\n<p>Moreover, it is made such that you can use a unique method throughout your project,\nand switch between the two behaviors at launch by setting an environment variable.</p>\n<h2>HtmlRenderer: a class to seamlessly render a page</h2>\n<p><code>HtmlRenderer</code> handles all the specific <code>pyppeteer</code> stuff for you. It is also thread-safe.</p>\n<h3>\"sync\" usage</h3>\n<p>Here is a <strong>typical usage</strong>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">get_html</span> <span class=\"kn\">import</span> <span class=\"n\">HtmlRenderer</span>\n\n<span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"n\">HtmlRenderer</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>  \n    <span class=\"c1\"># use the renderer. The underlying browser will be instantiated on first call to render.</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'https://xkcd.com'</span><span class=\"p\">)</span>\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"c1\"># or resposne.content to get the raw bytes</span>\n    <span class=\"c1\"># ... etc.</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"c1\"># close the underlying browser</span>\n    <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>Or simply use a <strong>context manager</strong>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">get_html</span> <span class=\"kn\">import</span> <span class=\"n\">create_renderer</span>\n\n<span class=\"k\">with</span> <span class=\"n\">create_renderer</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">renderer</span><span class=\"p\">:</span>  \n    <span class=\"c1\"># use the renderer. The underlying browser will be instanciated on first call to render</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"s1\">'https://xkcd.com'</span><span class=\"p\">)</span>\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"c1\"># or resposne.content to get the raw bytes</span>\n\n<span class=\"c1\"># here, the underlying browser will be closed</span>\n</pre>\n<p>If you need to <strong>manipulate the page</strong> before getting the content, pass an <em>async</em> function to <code>render</code>.\nIt will be called after the page loaded, but before the HTML content is fetched.\nFor example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">get_html</span> <span class=\"kn\">import</span> <span class=\"n\">create_renderer</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">scroll_to_end</span><span class=\"p\">(</span><span class=\"n\">page</span><span class=\"p\">):</span>\n    <span class=\"c1\"># https://github.com/miyakogi/pyppeteer/issues/205#issuecomment-470886682</span>\n    <span class=\"k\">await</span> <span class=\"n\">page</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"s1\">'{window.scrollBy(0, document.body.scrollHeight);}'</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">create_renderer</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">renderer</span><span class=\"p\">:</span> \n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s1\">'https://9gag.com'</span><span class=\"p\">,</span> <span class=\"n\">manipulate_page_func</span><span class=\"o\">=</span><span class=\"n\">scroll_to_end</span><span class=\"p\">)</span>\n</pre>\n<h3>\"async\" usage</h3>\n<p>All public methods have an <em>async</em> counterpart. When using <em>async</em>, however, you need to ensure that</p>\n<ol>\n<li>the browser is created once,</li>\n<li>the browser is closed once.</li>\n</ol>\n<p>By default, the browser is launched upon first use, usually on the first call of <code>render</code>.\nWhen using <em>async</em>, this may be a problem, as multiple coroutine will try to create the browser multiple times.\nTo avoid this, ensure you trigger the browser creation <em>before</em> launching the other tasks (same for closing, wait for all tasks to complete).</p>\n<p>A concrete example is available in\n<a href=\"https://github.com/derlin/blob/master/examples/async_example.py\" rel=\"nofollow\">examples/async_example.py</a>. Here is the gist:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">get_html</span> <span class=\"kn\">import</span> <span class=\"n\">HtmlRenderer</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"n\">HtmlRenderer</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># trigger the browser creation only once, before the tasks</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">async_browser</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># .. TASKS WITH RENDERING CALLS ... </span>\n<span class=\"c1\">#    e.g. loop.run_until_complete(someRenderingTask())</span>\n\n<span class=\"c1\"># finally close the browser once the tasks completed</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">async_close</span><span class=\"p\">())</span>\n</pre>\n<h2>do_get: seemlessly switch between behaviors</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">get_html.env_defined_get</span> <span class=\"kn\">import</span> <span class=\"n\">do_get</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">do_get</span><span class=\"p\">(</span><span class=\"s1\">'https://xkcd.com'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span>\n\n<span class=\"n\">html_bytes</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span>\n<span class=\"n\">html_string</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span>\n</pre>\n<p>The actual behavior of <code>do_get</code> will depend on the environment variable <code>RENDER_HTML</code>:</p>\n<ul>\n<li><code>RENDER_HTML=[1|y|true|on]</code>: <code>do_get</code> will launch a chromium instance under the hood and render the page (rendered HTML)</li>\n<li><code>RENDER_HTML=&lt;anything BUT 2&gt;</code> (default): <code>do_get</code> will forward the call to <code>requests.get</code> (raw HTML).\nDo <strong>NOT</strong> use <code>2</code> before reading through the multi-threading section.</li>\n</ul>\n<p>If rendering support is on, a browser instance will be launched <strong>on module load</strong>, and will be kept alive throughout the life of the application.\nKeep that in mind if you have low-memory (chromium !!).</p>\n<h2>Multi-threading</h2>\n<p><code>HtmlRenderer</code> is thread-safe.</p>\n<p>For <code>do_get</code> with rendering support, there are two possibilities.</p>\n<ol>\n<li>Create <strong>only one browser</strong>, shared by all threads. In this case, only one thread can execute <code>render</code> at a time (locking mechanism);</li>\n<li>Create <strong>one browser per thread</strong>. In this case, threads can render in parallel. But be careful, each time a new thread calls <code>do_get</code>,\n<em>a new browser is launched</em>, that will keep running until the end of the program (or until you call <code>get_html.env_defined_get.close()</code>).</li>\n</ol>\n<p>Enable mode (2) by setting <code>RENDER_HTML=2</code>. But again, ensure you don't have too many threads, since chromium needs a lot of memory.</p>\n<h2>Running tests</h2>\n<p>On Windows/Linux:</p>\n<pre>pip install tox\ntox\n</pre>\n<p>On Mac (see <a href=\"https://github.com/tox-dev/tox/issues/1485\" rel=\"nofollow\">https://github.com/tox-dev/tox/issues/1485</a>):</p>\n<pre>pip install <span class=\"s2\">\"tox&lt;3.7\"</span>\ntox\n</pre>\n<h2>Common errors</h2>\n<p><strong><code>libXX not found</code> (Linux)</strong></p>\n<p>See <a href=\"https://github.com/puppeteer/puppeteer/issues/290#issuecomment-480247488\" rel=\"nofollow\">issue #290 of puppeteer</a></p>\n<pre>sudo apt-get install gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget\n</pre>\n\n          </div>"}, "last_serial": 6772695, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "d2b324fb479eb54a4d7f953c62ea882e", "sha256": "23f109e35e97c226678e86fce1c2cc15c587bb69ff70f197e9925692c4ee80d4"}, "downloads": -1, "filename": "get-html-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d2b324fb479eb54a4d7f953c62ea882e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8372, "upload_time": "2020-02-29T18:25:47", "upload_time_iso_8601": "2020-02-29T18:25:47.456920Z", "url": "https://files.pythonhosted.org/packages/81/83/1133718499a182524a6f185d8ed0258a6ffcf5fbdf4acaa5938252eb01e3/get-html-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "16f20475d00b36c733aeeeeeb0e0361e", "sha256": "c4903dc04972ef7530ee1b91def546b05288f8767143a02231fe055f893642f5"}, "downloads": -1, "filename": "get-html-0.0.3.tar.gz", "has_sig": false, "md5_digest": "16f20475d00b36c733aeeeeeb0e0361e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10583, "upload_time": "2020-03-08T17:08:27", "upload_time_iso_8601": "2020-03-08T17:08:27.363428Z", "url": "https://files.pythonhosted.org/packages/1f/70/b79b01ea50a326889a95620c3a32e679970946a7131ba59295cc9b745852/get-html-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16f20475d00b36c733aeeeeeb0e0361e", "sha256": "c4903dc04972ef7530ee1b91def546b05288f8767143a02231fe055f893642f5"}, "downloads": -1, "filename": "get-html-0.0.3.tar.gz", "has_sig": false, "md5_digest": "16f20475d00b36c733aeeeeeb0e0361e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10583, "upload_time": "2020-03-08T17:08:27", "upload_time_iso_8601": "2020-03-08T17:08:27.363428Z", "url": "https://files.pythonhosted.org/packages/1f/70/b79b01ea50a326889a95620c3a32e679970946a7131ba59295cc9b745852/get-html-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:48 2020"}