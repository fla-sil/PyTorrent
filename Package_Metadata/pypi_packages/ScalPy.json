{"info": {"author": "Sumit Kumar, Abhishek Jana and Anjan A. Sen", "author_email": "sumit@ctp-jamia.res.in", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Scientific/Engineering"], "description": "==================================================================\nScalPy: A python tool to study dynamical systems in cosmology\n==================================================================\nThis code solves dynamical system for scalar fields such as minimally coupled \nquintessence, tachyon and Galileon fields. We have included two types of potential \nfor each scalar field: power law V(phi)=phi^n and exponential \nV(phi) = exp(K*phi) where n and K are real constants.\n\n#############################\n\nInstallation:\n=================\nIn Linux system, install scalpy using pip\n\n\t% sudo pip install scalpy\n\nor to install it using source, download the tar file from the url\n\n\thttps://github.com/sum33it/scalpy\n\n\t% unzip scalpy-master.zip\n\t% cd scalpy-master\n\t% sudo python setup.py install\n\n\nStructure:\n==========\n\nThere are following important files in the code:\n\n\n1) scalar.py\n\nThis file solves the dynamical system for scalar field where we give initial \nconditions (at decoupling) on quantities like field evolution, slope of the \npotential etc. as input (see below for details). In this file, different \nobservables such as luminosity distance, Hubble parameter, angular diameter distance, \ngrowth rate, growth function, power spectrum are defined.\n\n2) solver.py\n\nFor a given set of w0(present value of e.o.s) and Ophi_0 (present value of energy \ndensity parameter of scalar field), this solves for the initial conditions needed at \ndecoupling.\n\n3) fluids.py\n\nThis gives different observables for standard cosmological models such as LCDM, wCDM, w0waCDM and GCG.\nIn this file also, different observables such as luminosity distance, Hubble parameter, \nangular diameter distance, growth rate, growth function, power spectrum are defined.\n\n4) transfer_func.py\n\nThis provides transfer functions given by Eisenstein and Hu as well as BBKS.\n\n\n========================\npre-installed softwares:\n========================\nYou should have following packages installed in your system:\n\n-numpy\n\n-scipy\n\n\n===============================\nUsing the package\n===============================\n\nstart your favourite python interpretor\n\n\t>>> python\nor\n\n\t>>> ipython\n\nthen import scalpy\n\n\t>>> import scalpy\n\nIf you want to work with scalar field with power law potential, import the class named scalarpow from scalar\t\n\n\t>>> from scalpy.scalar import *\n\t>>> x = scalarpow(2.0,0.2,2)\n\nFirst argument is Ophi_i (initial value of density parameter for scalar field) second \nargument is lambda_i (initial value of parameter lambda_i) and third argument is order \nof power to scalar field power law potential.\nOne can put fourth, fifth, sixth and seventh arguments which are h, Ob0, ns and \nsigma8 if you don't want to use default values which are \n(h = 0.67, Ob0 = 0.045, ns = 0.96, sigma_8 = 0.8)\n\nIf you want to use tachyonic scalar field with exponential potential, you should \nimport the class named \"tachyonexp\". Below is the present list of classes included in \nthe package with the arguments they need:\n\n    scalarpow(Ophi_i,lambda_i,n): scalar field with power law potential\n    scalarexp(Ophi_i,lambda_i): scalar field with exponential potential\n    tachyonpow(Ophi_i,lambda_i,n): tachyonic scalar field with power law potential\n    tachyonexp(Ophi_i,lambda_i): tachyonic scalar field with exponential potential\n    galileonpow(Ophi_i,epsilon,lambda_i,n): galileon field with power law potential\n    galileonexp(Ophi_i,epsilon,lambda_i): galileon field with exponential potential\n\narguments are:\n\n    ophi_i: initial value (at a = 0.001 or z \\approax 1000) of density parameter for scalar field\n    lambda_i: initial value for lambda parameter (see \"Sen and Scherrer\")\n    epsilon: initial value for \"epsilon\" parameter in Galileon field \n            (see W. Hossain and A.A. Sen, Phys. Lett. B713 (2012), 140-144, arxiv: 1201.6192)\n    n: order of power law potential V(phi)=phi^n\n\n\nThere are many attributes of the corresponding class. These are the standard \ncosmological functions such as normalized Hubble parameter, density parameters for \nmatter and scalar field, luminosity distance, etc. Below is the list of attributes to \na given class with arguments:\n\n\thub(N): dimensionless Hubble parameter as a function of N=log(a) normalized today at 1\n\tophi_pres(): present day density parameter for scalar field\n\tophi_z(z): density parameter for scalar field as function of redshift z\n\teqn_state_pres(): present day equation of state for scalar field\n\teqn_state_n(N): equation of state for scalar field as a function of N=log(a)\n\teqn_state_z(z): equation of state for scalar field as a function of redshift z\n\thubz(z): dimensionless Hubble parameter as a function of z normalized today at 1\n\tco_dis_z(z): comoving distance (Mpc) as a function of redshift z\n\tang_dis_z(z): angular diameter distance (Mpc) as a function of z\n\tlum_dis_z(z): luminosity distance (Mpc) as a function of z\n\ttime_delay_dis(zd,zs): time delay distance; zd = redshift of lens, zs = redshift of source\n\tlookback_time_z(z): lookback time (in billion years) as a funtion of z\n\tage_by(): age of the universe in units of billion years\n\tom_z(z): density parameter for matter as a function of z\n\tOm_diag(z): Om diagnostic (given by Sahni et al) as a function of redshift z\n\tRth(z): CMB shift parameter as a function of redshift z\n\tD_plus_z(z): growing mode solution of growth equation\n\tfsigma8z(z): f*sigma8 as a function of z\n\tPk_bbks(k,z): linear matter power spectrum (Using BBKS transfer function) as a \n\t\t\t\tfunction of wave number k and redshift z\n\tPk_wh(k,z): linear matter power spectrum (Using Eisenstein-Hu transfer function) \n\t\t\t\tas a function of wave number k and redshift z\n\tDPk_bbks(k,z): dimensionless linear power spectrum(Using BBKS transfer function) \n\t\t\t\tas a function of wave number k and redshift z\n\tDPk_wh(k,z): dimensionless linear power spectrum (Using Eisenstein-Hu transfer \n\t\t\t\tfunction) as a function of wave number k and redshift z\n\nTo calculate an atribute to a class,\n\n\t>>> x.hubz(0)\n\t>>> array(1.0)\n\nto calculate power spectrum\n\n\t>>> x.Pk_wh(0.01,0.1)\n\nAlternatively, you can also use it like\n\n\t>>> scalarpow(2.0,0.3,2).hubz(0)\n\t>>> scalarpow(2.0,0.3,2).Pk_wh(0.01,0.1)\n\n\nOne can give four more arguments while calling classes, namely h, Ob0, ns and sigma_8 \nif one don't want to use default values of h = 0.7, Ob0 = 0.045, ns = 0.96  and \nsigma_8 = 0.8 e.g.\n\n\t>>> galileonpow(2.0,0.5,0.1,2,0.67,0.045,0.9634,0.83).Pk_bbks(1.0,0)\n\nIn arguments of attributes to a class, one can give a value as well as an array. \nFor this functions np.vectorize should be used. e.g.\n\n\t>>> x = scalarexp(2.0,0.1)\n\t>>> z = np.linspace(0,1,10)\n\t>>> f = np.vectorize(x.dis_z)\n\t>>> distance = f(z)\n\nFor LCDM, wCDM, w0waCDM and GCG models, one should import fluids.py file\n\n\t>>> from scalpy.fluids import *\n\t>>> x = LCDM(0.3)\n\t>>> x.hubz(0.1)\n\nHere we have four classes: LCDM for concordance Lambda CDM model, wCDM for constant w \nmodel with w not equat to -1, w0waCDM for varying dark energy model with CPL \nparametrization and GCG for generalized chaplygin gas. The arguments for different \nclasses are:\n\n    LCDM(Om0): standard Lambda CDM model with cosmological constant. Om0 is present value of density parameter for total matter.\n    wCDM(Om0,w): Dark energy model with dark energy density goes as (1+z)^(3(1+w))\n    w0waCDM(Om0,w0,wa): Varying dark energy model with CPL parametrization w(a) = w0 + wa*(1-a)\n    GCG(Om0,As,alpha): Dark energy is parametrized by equation of state for GCG\n\nthe atributes to these classes are:\n\n\thubz(z): dimensionless Hubble parameter as a function of redshift z\n\tdis_z(z): comoving distance as a function of redshift z\n\tang_dis_z(z): angular diameter distance as a function of z\n\tlum_dis_z(z): luminosity distance as a function of z\n\ttime_delay_dis(zd,zs): time delay distance; zd = redshift of lens, zs = redshift of source\n\tlookback_time_z(z): lookback time (in billion years) as a funtion of z\n\tage_by(): age of the universe in units of billion years\n\tom_z(z): density parameter for matter as a function of z\n\tOm_diag(z): Om diagnostic (given by Sahni et al) as a function of redshift z\n\tRth(z): CMB shift parameter as a function of redshift z\n\tD_plus_z(z): growing mode solution of growth equation\n\tfsigma8z(z): f*sigma8 as a function of z\n\tPk_bbks(k,z): linear matter power spectrum (Using BBKS transfer function) as a \n\t\t\t\tfunction of wave number k and redshift z\n\tPk_wh(k,z): linear matter power spectrum (Using Eisenstein-Hu transfer function) \n\t\t\t\tas a function of wave number k and redshift z\n\tDPk_bbks(k,z): dimensionless linear power spectrum(Using BBKS transfer function) \n\t\t\t\tas a function of wave number k and redshift z\n\tDPk_wh(k,z): dimensionless linear power spectrum (Using Eisenstein-Hu transfer \n\t\t\t\tfunction) as a function of wave number k and redshift z\n\nTo calculate linear power spectrum at redshift z=0 and for k = 0.01 for w0waCDM model,\n\n\t>>> w0waCDM(0.3,-1.02,0.5).Pk_bbks(0.01,0)\n\nHere we have taken Om0=0.3, w0=-1.02 and w0 = 0.5\n\nHere also, one can give four more arguments while importing classes, namely Ob0, ns, h \nand sigma_8 if one doesn't want to use default values of h = 0.7, Ob0 = 0.045, ns = 0.96 \nand sigma_8 = 0.8 e.g.\n\n\t>>> w0waCDM(0.3,-1.02,0.5,0.67,0.045,0.9634,0.83).Pk_bbks(1.0,0)\n\n######################################################\nSome example (for plotting)\n######################################################\n\n\t>>> python\n\t>>> import pylab as pl\n\t>>> from scalpy.scalar import *\n\t>>> x = galileonpow(2.1,10.0,0.2,2)\n\t>>> z1 = pl.linspace(0,2,100) \n\t>>> y = x.hubz(z1)\n\t>>> pl.plot(z1,y)\n\t>>> pl.show()\n\n\nIf you want to plot linear matter power spectrum on log scale from k = 0.001 to k = 1.0 at redshift z = 0\n\n\t>>> k = pl.logspace(-3,0,100)\n\t>>> P = x.Pk_wh(k,0)\n\t>>> pl.loglog(k,P)\n\t>>> pl.show()", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/sum33it/scalpy", "keywords": "scalar field dynamicscosmology", "license": "GNU GENERAL PUBLIC LICENSE v3", "maintainer": null, "maintainer_email": null, "name": "ScalPy", "package_url": "https://pypi.org/project/ScalPy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ScalPy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/sum33it/scalpy"}, "release_url": "https://pypi.org/project/ScalPy/0.1.0b/", "requires_dist": null, "requires_python": null, "summary": "a package for studying dynamics of scalar fields in cosmology.", "version": "0.1.0b", "yanked": false, "html_description": "<div class=\"project-description\">\n            ==================================================================<br>ScalPy: A python tool to study dynamical systems in cosmology<br>==================================================================<br>This code solves dynamical system for scalar fields such as minimally coupled <br>quintessence, tachyon and Galileon fields. We have included two types of potential <br>for each scalar field: power law V(phi)=phi^n and exponential <br>V(phi) = exp(K*phi) where n and K are real constants.<br><br>#############################<br><br>Installation:<br>=================<br>In Linux system, install scalpy using pip<br><br>\t% sudo pip install scalpy<br><br>or to install it using source, download the tar file from the url<br><br>\thttps://github.com/sum33it/scalpy<br><br>\t% unzip scalpy-master.zip<br>\t% cd scalpy-master<br>\t% sudo python setup.py install<br><br><br>Structure:<br>==========<br><br>There are following important files in the code:<br><br><br>1) scalar.py<br><br>This file solves the dynamical system for scalar field where we give initial <br>conditions (at decoupling) on quantities like field evolution, slope of the <br>potential etc. as input (see below for details). In this file, different <br>observables such as luminosity distance, Hubble parameter, angular diameter distance, <br>growth rate, growth function, power spectrum are defined.<br><br>2) solver.py<br><br>For a given set of w0(present value of e.o.s) and Ophi_0 (present value of energy <br>density parameter of scalar field), this solves for the initial conditions needed at <br>decoupling.<br><br>3) fluids.py<br><br>This gives different observables for standard cosmological models such as LCDM, wCDM, w0waCDM and GCG.<br>In this file also, different observables such as luminosity distance, Hubble parameter, <br>angular diameter distance, growth rate, growth function, power spectrum are defined.<br><br>4) transfer_func.py<br><br>This provides transfer functions given by Eisenstein and Hu as well as BBKS.<br><br><br>========================<br>pre-installed softwares:<br>========================<br>You should have following packages installed in your system:<br><br>-numpy<br><br>-scipy<br><br><br>===============================<br>Using the package<br>===============================<br><br>start your favourite python interpretor<br><br>\t&gt;&gt;&gt; python<br>or<br><br>\t&gt;&gt;&gt; ipython<br><br>then import scalpy<br><br>\t&gt;&gt;&gt; import scalpy<br><br>If you want to work with scalar field with power law potential, import the class named scalarpow from scalar\t<br><br>\t&gt;&gt;&gt; from scalpy.scalar import *<br>\t&gt;&gt;&gt; x = scalarpow(2.0,0.2,2)<br><br>First argument is Ophi_i (initial value of density parameter for scalar field) second <br>argument is lambda_i (initial value of parameter lambda_i) and third argument is order <br>of power to scalar field power law potential.<br>One can put fourth, fifth, sixth and seventh arguments which are h, Ob0, ns and <br>sigma8 if you don't want to use default values which are <br>(h = 0.67, Ob0 = 0.045, ns = 0.96, sigma_8 = 0.8)<br><br>If you want to use tachyonic scalar field with exponential potential, you should <br>import the class named \"tachyonexp\". Below is the present list of classes included in <br>the package with the arguments they need:<br><br>    scalarpow(Ophi_i,lambda_i,n): scalar field with power law potential<br>    scalarexp(Ophi_i,lambda_i): scalar field with exponential potential<br>    tachyonpow(Ophi_i,lambda_i,n): tachyonic scalar field with power law potential<br>    tachyonexp(Ophi_i,lambda_i): tachyonic scalar field with exponential potential<br>    galileonpow(Ophi_i,epsilon,lambda_i,n): galileon field with power law potential<br>    galileonexp(Ophi_i,epsilon,lambda_i): galileon field with exponential potential<br><br>arguments are:<br><br>    ophi_i: initial value (at a = 0.001 or z \\approax 1000) of density parameter for scalar field<br>    lambda_i: initial value for lambda parameter (see \"Sen and Scherrer\")<br>    epsilon: initial value for \"epsilon\" parameter in Galileon field <br>            (see W. Hossain and A.A. Sen, Phys. Lett. B713 (2012), 140-144, arxiv: 1201.6192)<br>    n: order of power law potential V(phi)=phi^n<br><br><br>There are many attributes of the corresponding class. These are the standard <br>cosmological functions such as normalized Hubble parameter, density parameters for <br>matter and scalar field, luminosity distance, etc. Below is the list of attributes to <br>a given class with arguments:<br><br>\thub(N): dimensionless Hubble parameter as a function of N=log(a) normalized today at 1<br>\tophi_pres(): present day density parameter for scalar field<br>\tophi_z(z): density parameter for scalar field as function of redshift z<br>\teqn_state_pres(): present day equation of state for scalar field<br>\teqn_state_n(N): equation of state for scalar field as a function of N=log(a)<br>\teqn_state_z(z): equation of state for scalar field as a function of redshift z<br>\thubz(z): dimensionless Hubble parameter as a function of z normalized today at 1<br>\tco_dis_z(z): comoving distance (Mpc) as a function of redshift z<br>\tang_dis_z(z): angular diameter distance (Mpc) as a function of z<br>\tlum_dis_z(z): luminosity distance (Mpc) as a function of z<br>\ttime_delay_dis(zd,zs): time delay distance; zd = redshift of lens, zs = redshift of source<br>\tlookback_time_z(z): lookback time (in billion years) as a funtion of z<br>\tage_by(): age of the universe in units of billion years<br>\tom_z(z): density parameter for matter as a function of z<br>\tOm_diag(z): Om diagnostic (given by Sahni et al) as a function of redshift z<br>\tRth(z): CMB shift parameter as a function of redshift z<br>\tD_plus_z(z): growing mode solution of growth equation<br>\tfsigma8z(z): f*sigma8 as a function of z<br>\tPk_bbks(k,z): linear matter power spectrum (Using BBKS transfer function) as a <br>\t\t\t\tfunction of wave number k and redshift z<br>\tPk_wh(k,z): linear matter power spectrum (Using Eisenstein-Hu transfer function) <br>\t\t\t\tas a function of wave number k and redshift z<br>\tDPk_bbks(k,z): dimensionless linear power spectrum(Using BBKS transfer function) <br>\t\t\t\tas a function of wave number k and redshift z<br>\tDPk_wh(k,z): dimensionless linear power spectrum (Using Eisenstein-Hu transfer <br>\t\t\t\tfunction) as a function of wave number k and redshift z<br><br>To calculate an atribute to a class,<br><br>\t&gt;&gt;&gt; x.hubz(0)<br>\t&gt;&gt;&gt; array(1.0)<br><br>to calculate power spectrum<br><br>\t&gt;&gt;&gt; x.Pk_wh(0.01,0.1)<br><br>Alternatively, you can also use it like<br><br>\t&gt;&gt;&gt; scalarpow(2.0,0.3,2).hubz(0)<br>\t&gt;&gt;&gt; scalarpow(2.0,0.3,2).Pk_wh(0.01,0.1)<br><br><br>One can give four more arguments while calling classes, namely h, Ob0, ns and sigma_8 <br>if one don't want to use default values of h = 0.7, Ob0 = 0.045, ns = 0.96  and <br>sigma_8 = 0.8 e.g.<br><br>\t&gt;&gt;&gt; galileonpow(2.0,0.5,0.1,2,0.67,0.045,0.9634,0.83).Pk_bbks(1.0,0)<br><br>In arguments of attributes to a class, one can give a value as well as an array. <br>For this functions np.vectorize should be used. e.g.<br><br>\t&gt;&gt;&gt; x = scalarexp(2.0,0.1)<br>\t&gt;&gt;&gt; z = np.linspace(0,1,10)<br>\t&gt;&gt;&gt; f = np.vectorize(x.dis_z)<br>\t&gt;&gt;&gt; distance = f(z)<br><br>For LCDM, wCDM, w0waCDM and GCG models, one should import fluids.py file<br><br>\t&gt;&gt;&gt; from scalpy.fluids import *<br>\t&gt;&gt;&gt; x = LCDM(0.3)<br>\t&gt;&gt;&gt; x.hubz(0.1)<br><br>Here we have four classes: LCDM for concordance Lambda CDM model, wCDM for constant w <br>model with w not equat to -1, w0waCDM for varying dark energy model with CPL <br>parametrization and GCG for generalized chaplygin gas. The arguments for different <br>classes are:<br><br>    LCDM(Om0): standard Lambda CDM model with cosmological constant. Om0 is present value of density parameter for total matter.<br>    wCDM(Om0,w): Dark energy model with dark energy density goes as (1+z)^(3(1+w))<br>    w0waCDM(Om0,w0,wa): Varying dark energy model with CPL parametrization w(a) = w0 + wa*(1-a)<br>    GCG(Om0,As,alpha): Dark energy is parametrized by equation of state for GCG<br><br>the atributes to these classes are:<br><br>\thubz(z): dimensionless Hubble parameter as a function of redshift z<br>\tdis_z(z): comoving distance as a function of redshift z<br>\tang_dis_z(z): angular diameter distance as a function of z<br>\tlum_dis_z(z): luminosity distance as a function of z<br>\ttime_delay_dis(zd,zs): time delay distance; zd = redshift of lens, zs = redshift of source<br>\tlookback_time_z(z): lookback time (in billion years) as a funtion of z<br>\tage_by(): age of the universe in units of billion years<br>\tom_z(z): density parameter for matter as a function of z<br>\tOm_diag(z): Om diagnostic (given by Sahni et al) as a function of redshift z<br>\tRth(z): CMB shift parameter as a function of redshift z<br>\tD_plus_z(z): growing mode solution of growth equation<br>\tfsigma8z(z): f*sigma8 as a function of z<br>\tPk_bbks(k,z): linear matter power spectrum (Using BBKS transfer function) as a <br>\t\t\t\tfunction of wave number k and redshift z<br>\tPk_wh(k,z): linear matter power spectrum (Using Eisenstein-Hu transfer function) <br>\t\t\t\tas a function of wave number k and redshift z<br>\tDPk_bbks(k,z): dimensionless linear power spectrum(Using BBKS transfer function) <br>\t\t\t\tas a function of wave number k and redshift z<br>\tDPk_wh(k,z): dimensionless linear power spectrum (Using Eisenstein-Hu transfer <br>\t\t\t\tfunction) as a function of wave number k and redshift z<br><br>To calculate linear power spectrum at redshift z=0 and for k = 0.01 for w0waCDM model,<br><br>\t&gt;&gt;&gt; w0waCDM(0.3,-1.02,0.5).Pk_bbks(0.01,0)<br><br>Here we have taken Om0=0.3, w0=-1.02 and w0 = 0.5<br><br>Here also, one can give four more arguments while importing classes, namely Ob0, ns, h <br>and sigma_8 if one doesn't want to use default values of h = 0.7, Ob0 = 0.045, ns = 0.96 <br>and sigma_8 = 0.8 e.g.<br><br>\t&gt;&gt;&gt; w0waCDM(0.3,-1.02,0.5,0.67,0.045,0.9634,0.83).Pk_bbks(1.0,0)<br><br>######################################################<br>Some example (for plotting)<br>######################################################<br><br>\t&gt;&gt;&gt; python<br>\t&gt;&gt;&gt; import pylab as pl<br>\t&gt;&gt;&gt; from scalpy.scalar import *<br>\t&gt;&gt;&gt; x = galileonpow(2.1,10.0,0.2,2)<br>\t&gt;&gt;&gt; z1 = pl.linspace(0,2,100) <br>\t&gt;&gt;&gt; y = x.hubz(z1)<br>\t&gt;&gt;&gt; pl.plot(z1,y)<br>\t&gt;&gt;&gt; pl.show()<br><br><br>If you want to plot linear matter power spectrum on log scale from k = 0.001 to k = 1.0 at redshift z = 0<br><br>\t&gt;&gt;&gt; k = pl.logspace(-3,0,100)<br>\t&gt;&gt;&gt; P = x.Pk_wh(k,0)<br>\t&gt;&gt;&gt; pl.loglog(k,P)<br>\t&gt;&gt;&gt; pl.show()\n          </div>"}, "last_serial": 1455192, "releases": {"0.1.0a": [{"comment_text": "", "digests": {"md5": "285eb2e645e6d4d7630db1cfcceb4016", "sha256": "2971570aa96fa19c455b13c539e4b80a58fe39b19f8c130ce600b8a9928dc3b3"}, "downloads": -1, "filename": "ScalPy-0.1.0a.tar.gz", "has_sig": false, "md5_digest": "285eb2e645e6d4d7630db1cfcceb4016", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9980, "upload_time": "2015-01-02T10:30:33", "upload_time_iso_8601": "2015-01-02T10:30:33.621673Z", "url": "https://files.pythonhosted.org/packages/2d/d7/6d80b082bbe4bf1b0a8ce9ccc12bd48a73942826bb8877a163104b1bf177/ScalPy-0.1.0a.tar.gz", "yanked": false}], "0.1.0b": [{"comment_text": "", "digests": {"md5": "3df36c280f8ad3bae48f88bdf18f8b31", "sha256": "09faa576c2a9f3557c1f20a0eee33cc29235c2a800c01c9d3f7ff55ab48f6919"}, "downloads": -1, "filename": "ScalPy-0.1.0b.tar.gz", "has_sig": false, "md5_digest": "3df36c280f8ad3bae48f88bdf18f8b31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10494, "upload_time": "2015-03-10T02:29:51", "upload_time_iso_8601": "2015-03-10T02:29:51.124418Z", "url": "https://files.pythonhosted.org/packages/fa/f6/2fde70948a28d00b593b808d020a33e7966c25b270823cd8a77a639018ce/ScalPy-0.1.0b.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3df36c280f8ad3bae48f88bdf18f8b31", "sha256": "09faa576c2a9f3557c1f20a0eee33cc29235c2a800c01c9d3f7ff55ab48f6919"}, "downloads": -1, "filename": "ScalPy-0.1.0b.tar.gz", "has_sig": false, "md5_digest": "3df36c280f8ad3bae48f88bdf18f8b31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10494, "upload_time": "2015-03-10T02:29:51", "upload_time_iso_8601": "2015-03-10T02:29:51.124418Z", "url": "https://files.pythonhosted.org/packages/fa/f6/2fde70948a28d00b593b808d020a33e7966c25b270823cd8a77a639018ce/ScalPy-0.1.0b.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:09 2020"}