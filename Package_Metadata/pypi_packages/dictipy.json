{"info": {"author": "Gioele Crispo", "author_email": "crispogioele@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Dictipy\n\nDictipy creates the right dict also for nested objects using recursion, whenever the standard\nPython ```__dict__()``` cannot. \n\n![Python 2.7, 3.4, 3.5, 3.6, 3.7, 3.8](https://img.shields.io/badge/python-%202.7%2C%203.4%2C%203.5%2C%203.6%2C%203.7%2C%203.8-blue.svg)\n[![PyPI version](https://badge.fury.io/py/dictipy.svg)](https://badge.fury.io/py/dictipy)\n[![Build Status](https://travis-ci.org/gioelecrispo/dictipy.svg?branch=master)](https://travis-ci.org/gioelecrispo/dictipy)\n[![codecov](https://codecov.io/gh/gioelecrispo/dictipy/branch/master/graph/badge.svg)](https://codecov.io/gh/gioelecrispo/dictipy)\n\n\n## Table of contents\n1. Motivation\n2. Usage\n\n## 1. Motivation\nUsing get_dict makes you able to recursively get dict of nested objects **without** explicitly \noverriding ```__repr__()``` function, making it usable for other purposes.\nIt could be useful when you have very complex nested object and you want not to override each sub-object \n```__repr__()``` function. Imagine for example an operation which produces a complex object which has to be\nserialized and sent through a REST protocol as a json.\nThe ```json.dumps()``` cannot execute the task if the argument object is not a dict. Again, using simply the \nstandard Python ```__dict__()``` function does not solve the problem if a nested object has to be considered.\n\n## 2. Usage\nSimply import ```get_dict``` function from ```dictipy``` and use it on any potentially serializable object.\n\n---\nExample 1: Nested objects.\n```python\nfrom dictipy import get_dict\n\n\nclass Parent:\n\n    def __init__(self, parent_field):\n        self.parent_field = parent_field\n        self.child = Child(1)\n\n\nclass Child:\n\n    def __init__(self, child_field):\n        self.child_field = child_field\n\n\nif __name__ == \"__main__\":\n    p = Parent(0)\n    print(\"Standard Python dict:  \", p.__dict__)\n    print(\"Dictipy get_dict:      \", get_dict(p))\n```\n\nResult: \n```python\nStandard Python dict:   {'parent_field': 0, 'child': <__main__.Child object at 0x0000021C530BFEB8>}\nDictipy get_dict:       {'parent_field': 0, 'child': {'child_field': 1}}\n```\n\n--- \nExample 2: Json serialization.\n```python\nfrom dictipy import get_dict\nimport json\n\n\nclass Parent:\n\n    def __init__(self, parent_field):\n        self.parent_field = parent_field\n        self.child = Child(1)\n\n\nclass Child:\n\n    def __init__(self, child_field):\n        self.child_field = child_field\n\n\nif __name__ == \"__main__\":\n    p = Parent(0)\n    j1 = json.dumps(p) # throws -> TypeError: Object of type Parent is not JSON serializable\n    j2 = json.dumps(p.__dict__) # throws -> TypeError: Object of type Child is not JSON serializable\n    j3 = json.dumps(get_dict(p)) # returns -> '{\"parent_field\": 0, \"child\": {\"child_field\": 1}}'\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gioelecrispo/dictipy.git", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dictipy", "package_url": "https://pypi.org/project/dictipy/", "platform": "", "project_url": "https://pypi.org/project/dictipy/", "project_urls": {"Homepage": "https://github.com/gioelecrispo/dictipy.git"}, "release_url": "https://pypi.org/project/dictipy/0.0.3/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Dictipy creates the right dict also for nested objects using recursion.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dictipy</h1>\n<p>Dictipy creates the right dict also for nested objects using recursion, whenever the standard\nPython <code>__dict__()</code> cannot.</p>\n<p><img alt=\"Python 2.7, 3.4, 3.5, 3.6, 3.7, 3.8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f11a0b04bddd7a1e795e29d13e6e992608f9abc2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d253230322e37253243253230332e34253243253230332e35253243253230332e36253243253230332e37253243253230332e382d626c75652e737667\">\n<a href=\"https://badge.fury.io/py/dictipy\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67874f40d22104dc1175db0dc6e4a80df49c95b7/68747470733a2f2f62616467652e667572792e696f2f70792f646963746970792e737667\"></a>\n<a href=\"https://travis-ci.org/gioelecrispo/dictipy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f186f18043b789298d73a4237ce7365e7271695b/68747470733a2f2f7472617669732d63692e6f72672f67696f656c6563726973706f2f646963746970792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/gioelecrispo/dictipy\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/015ab02950bfc4d15266637c81d390055ffe9694/68747470733a2f2f636f6465636f762e696f2f67682f67696f656c6563726973706f2f646963746970792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h2>Table of contents</h2>\n<ol>\n<li>Motivation</li>\n<li>Usage</li>\n</ol>\n<h2>1. Motivation</h2>\n<p>Using get_dict makes you able to recursively get dict of nested objects <strong>without</strong> explicitly\noverriding <code>__repr__()</code> function, making it usable for other purposes.\nIt could be useful when you have very complex nested object and you want not to override each sub-object\n<code>__repr__()</code> function. Imagine for example an operation which produces a complex object which has to be\nserialized and sent through a REST protocol as a json.\nThe <code>json.dumps()</code> cannot execute the task if the argument object is not a dict. Again, using simply the\nstandard Python <code>__dict__()</code> function does not solve the problem if a nested object has to be considered.</p>\n<h2>2. Usage</h2>\n<p>Simply import <code>get_dict</code> function from <code>dictipy</code> and use it on any potentially serializable object.</p>\n<hr>\n<p>Example 1: Nested objects.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dictipy</span> <span class=\"kn\">import</span> <span class=\"n\">get_dict</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Parent</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent_field</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_field</span> <span class=\"o\">=</span> <span class=\"n\">parent_field</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">Child</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Child</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child_field</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child_field</span> <span class=\"o\">=</span> <span class=\"n\">child_field</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Parent</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Standard Python dict:  \"</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Dictipy get_dict:      \"</span><span class=\"p\">,</span> <span class=\"n\">get_dict</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span>\n</pre>\n<p>Result:</p>\n<pre><span class=\"n\">Standard</span> <span class=\"n\">Python</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>   <span class=\"p\">{</span><span class=\"s1\">'parent_field'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'child'</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">__main__</span><span class=\"o\">.</span><span class=\"n\">Child</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x0000021C530BFEB8</span><span class=\"o\">&gt;</span><span class=\"p\">}</span>\n<span class=\"n\">Dictipy</span> <span class=\"n\">get_dict</span><span class=\"p\">:</span>       <span class=\"p\">{</span><span class=\"s1\">'parent_field'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'child'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'child_field'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}}</span>\n</pre>\n<hr>\n<p>Example 2: Json serialization.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dictipy</span> <span class=\"kn\">import</span> <span class=\"n\">get_dict</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Parent</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent_field</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parent_field</span> <span class=\"o\">=</span> <span class=\"n\">parent_field</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">Child</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Child</span><span class=\"p\">:</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">child_field</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child_field</span> <span class=\"o\">=</span> <span class=\"n\">child_field</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Parent</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">j1</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"c1\"># throws -&gt; TypeError: Object of type Parent is not JSON serializable</span>\n    <span class=\"n\">j2</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span> <span class=\"c1\"># throws -&gt; TypeError: Object of type Child is not JSON serializable</span>\n    <span class=\"n\">j3</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">get_dict</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">))</span> <span class=\"c1\"># returns -&gt; '{\"parent_field\": 0, \"child\": {\"child_field\": 1}}'</span>\n</pre>\n\n          </div>"}, "last_serial": 6190434, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9590e1f5fe5716f4b02468e85524ad87", "sha256": "dd74e46ccd23e43f941649624718a428632676334463587187b1da74ff02a87d"}, "downloads": -1, "filename": "dictipy-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9590e1f5fe5716f4b02468e85524ad87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3513, "upload_time": "2019-11-20T21:41:02", "upload_time_iso_8601": "2019-11-20T21:41:02.344162Z", "url": "https://files.pythonhosted.org/packages/57/58/78d021dc5506e769016e67f2be00abfabaad8b2f53ab3b118b7b05441d56/dictipy-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8af0cede7c077a263a7cc295b440075e", "sha256": "7eb4afac2e8c2d65401fabd535ae42fd6bdabe8893a3df423d7a4cb6c8f82600"}, "downloads": -1, "filename": "dictipy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8af0cede7c077a263a7cc295b440075e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2751, "upload_time": "2019-11-20T21:41:04", "upload_time_iso_8601": "2019-11-20T21:41:04.444786Z", "url": "https://files.pythonhosted.org/packages/56/19/4793e7b228000066d5d43c3ae16444677ce597f8786b3feaa4099c56fc16/dictipy-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "9467356edfa80a75948b1658f86f2345", "sha256": "3decf1cfb06eb5b620c26e6a0b356d5f129127b7c0dfed61a1d7e6ed0ceb40be"}, "downloads": -1, "filename": "dictipy-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9467356edfa80a75948b1658f86f2345", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 3515, "upload_time": "2019-11-20T22:18:46", "upload_time_iso_8601": "2019-11-20T22:18:46.024086Z", "url": "https://files.pythonhosted.org/packages/d1/57/00dfc6c872e2186bd9355b2b5b4d057c7a24799bf4674257e50844df9026/dictipy-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1dd03abe6eda4e34550facd1d035f757", "sha256": "0ad4d6cd929cbad699386953c24be6a4dd09717835483ab4bb4137424c92f606"}, "downloads": -1, "filename": "dictipy-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1dd03abe6eda4e34550facd1d035f757", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 2931, "upload_time": "2019-11-20T22:18:47", "upload_time_iso_8601": "2019-11-20T22:18:47.378926Z", "url": "https://files.pythonhosted.org/packages/c1/98/d0fe2a967130ff43d778a65f15fe5857c1a10e9ea2e4afb194c9ecd09107/dictipy-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "9779f7f5eb8953bc172b0bbcbc2baad5", "sha256": "62cc9903fd892ede384a1424dd3517af7d0d1928e5fb3c3cc4dc03f1857ab260"}, "downloads": -1, "filename": "dictipy-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9779f7f5eb8953bc172b0bbcbc2baad5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 4176, "upload_time": "2019-11-24T16:45:02", "upload_time_iso_8601": "2019-11-24T16:45:02.811162Z", "url": "https://files.pythonhosted.org/packages/2d/46/6ec6e4b180c1b7080826a0f4cc201c496d5dee43a291a21e3385a0ac4ba8/dictipy-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fdd45c392e21fd227987f04a2569d4c", "sha256": "ab43bfcac78d8ef28ce98dee723732722eb61e36d5cf4dd6645d2c6c20305fbe"}, "downloads": -1, "filename": "dictipy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7fdd45c392e21fd227987f04a2569d4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3109, "upload_time": "2019-11-24T16:45:04", "upload_time_iso_8601": "2019-11-24T16:45:04.526868Z", "url": "https://files.pythonhosted.org/packages/39/1a/f11c0b11ec9c381753aed87a3862f8379d42d69fc6d11811acacf47ad9d7/dictipy-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9779f7f5eb8953bc172b0bbcbc2baad5", "sha256": "62cc9903fd892ede384a1424dd3517af7d0d1928e5fb3c3cc4dc03f1857ab260"}, "downloads": -1, "filename": "dictipy-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9779f7f5eb8953bc172b0bbcbc2baad5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 4176, "upload_time": "2019-11-24T16:45:02", "upload_time_iso_8601": "2019-11-24T16:45:02.811162Z", "url": "https://files.pythonhosted.org/packages/2d/46/6ec6e4b180c1b7080826a0f4cc201c496d5dee43a291a21e3385a0ac4ba8/dictipy-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7fdd45c392e21fd227987f04a2569d4c", "sha256": "ab43bfcac78d8ef28ce98dee723732722eb61e36d5cf4dd6645d2c6c20305fbe"}, "downloads": -1, "filename": "dictipy-0.0.3.tar.gz", "has_sig": false, "md5_digest": "7fdd45c392e21fd227987f04a2569d4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 3109, "upload_time": "2019-11-24T16:45:04", "upload_time_iso_8601": "2019-11-24T16:45:04.526868Z", "url": "https://files.pythonhosted.org/packages/39/1a/f11c0b11ec9c381753aed87a3862f8379d42d69fc6d11811acacf47ad9d7/dictipy-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:32 2020"}