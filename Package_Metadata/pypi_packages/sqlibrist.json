{"info": {"author": "Serj Zavadsky", "author_email": "fevral13@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Database", "Topic :: Database :: Database Engines/Servers", "Topic :: Utilities"], "description": "sqlibrist\n=========\n\nSqlibrist is command-line tool, made for developers, who do not use ORM to manage their database\nstructure. Programming database objects and deploying them to production\nis not easy. Naive approach is to manually write patches with SQL statements and then replay\nthem on others DB instances. This, being simple and straightforward, may get tricky\nwhen your database structure grows in size and have numerous inter-dependent\nobjects.\n\nSqlibrist in essense is tool to make the process of creating SQL patches much more\neasy, and as side-effect it proposes a way to organize your SQL code. It does not\ndictate design desisions, or stands on your way when you do something wrong\n(notorious shooting in foot). All database objects are described declaratively\nin separate files in the form of ``CREATE TABLE`` or ``CREATE FUNCTION``, having\ndependency instructions.\n\nYou may think of sqlibrist as Version Control System for database. The whole thing\nis inspired by Sqitch (see Alternatives below) and Django Migrations (may be you\nremember Django South). Every time you invoke ``makemigration`` command, snapshot\nof current scheme is made and compared with previous snapshot. Then, SQL patch\nis created with instructions to recreate all changed objects cascadely with their\ndependencies, create new or remove deleted. In the latter case, sqlibrist will not\nlet you delete object that has left dependants.\n\nCurrently PostgreSQL is supported. MySQL support is experimental, and not well-tested\nyet.\n\n\nPlatform compatibility\n======================\n\nLinux, Mac OS, Windows. See installation instructions for each below.\n\n\nRequirements\n============\n\nPython dependencies:\n\n- PyYAML\n- psycopg2 (optional)\n- mysql-python (optional)\n\nInstallation\n============\n\nLinux\n-----\n\n**Ubuntu/Debian**\n\nFirst install required libraries::\n\n    $ sudo apt-get install python-pip python-dev libyaml-dev\n    $ sudo apt-get install libmysqlclient-dev  # for MySQL\n    $ sudo apt-get install libpq-dev  # PostgreSQL\n\nSqlibrist can be installed into virtualenv::\n\n    $ pip install sqlibrist\n\nor system-wide::\n\n    $ sudo pip install sqlibrist\n\n**Fedora/CentOS/RHEL**\n\nFirst install required libraries (replace ``dnf`` to ``yum`` if you are using\npre-dnf package manager)::\n\n    $ sudo dnf install python-devel python-pip libyaml-devel\n    $ sudo dnf install postgresql-devel  # PostgreSQL\n\n    $ sudo dnf install mariadb-devel  # for MariaDB\n    or\n    $ sudo dnf install mysql++-devel  # for MySQL\n\nSqlibrist can be installed into virtualenv::\n\n    $ pip install sqlibrist\n\nor system-wide::\n\n    $ sudo pip install sqlibrist\n\n\nMacOS\n-----\n\nFirst install required libraries::\n\n    $ sudo easy_install pip\n    $ brew install mysql  # for MySQL\n    $ brew install postgres  # PostgreSQL\n\n\nSqlibrist can be installed into virtualenv::\n\n    $ pip install sqlibrist\n\nor system-wide::\n\n    $ sudo pip install sqlibrist\n\nAlso you need to install database dependencies\nMySQL::\n\n    $ pip install mysql-python\n\nPostgreSQL::\n\n    $ pip install psycopg2\n\nWindows\n-------\nTODO\n\nTutorial\n========\n\nLet's create simple project and go through typical steps of DB schema manageent.\nThis will be small webshop.\n\nCreate empty directory::\n\n    $ mkdir shop_schema\n    $ cd shop_schema\n\nThen we need to create sqlibrist database structure, where we will keep\nschema and migrations::\n\n    $ sqlibrist init\n    Creating directories...\n    Done.\n\nYou will get the following DB structure::\n\n    shop_schema\n        sqlibrist.yaml\n        migrations\n        schema\n            constraints\n            functions\n            indexes\n            tables\n            triggers\n            types\n            views\n\nIn ``sqlibrist.yaml`` you will configure DB connections::\n\n    ---\n    default:\n      engine: pg\n      user: <username>\n      name: <database_name>\n      password: <password>\n    # host: 127.0.0.1\n    # port: 5432\n\n``host`` and ``port`` are optional.\n\nOnce you configured DB connection, test if is correct::\n\n    $ sqlibrist test_connection\n    Connection OK\n\nNext we need to create sqlibrist migrations table::\n\n    $ sqlibrist initdb\n    Creating db...\n    Creating schema and migrations log table...\n\n    Done.\n\nNow we are ready to build our DB schema.\n\nCreate file ``shop_schema/schema/tables/user.sql``::\n\n    --UP\n    CREATE TABLE \"user\" (\n    id SERIAL PRIMARY KEY,\n    name TEXT,\n    password TEXT);\n\nThe first line ``--UP`` means that the following are SQL statements for 'forward'\nmigration. The opposite is optional ``--DOWN``, which contains instructions for reverting.\nTo be safe, and not accidentally drop any table with your data, we will not include\nanything like DROP TABLE. Working with table upgrades and ``--DOWN`` is on the way\nbelow.\n\n``shop_schema/schema/tables/product.sql``::\n\n    --UP\n    CREATE TABLE product (\n    id SERIAL PRIMARY KEY,\n    name TEXT,\n    price MONEY);\n\n``shop_schema/schema/tables/order.sql``::\n\n    --REQ tables/user\n    --UP\n    CREATE TABLE \"order\" (\n    id SERIAL PRIMARY KEY,\n    user_id INTEGER REFERENCES \"user\"(id),\n    date DATE);\n\nImportant here is the ``--REQ tables/user`` statement. It tells sqlibrist, that\n``order`` table depends on ``user`` table. This will guarantee, that ``user`` will\nbe created before ``order``.\n\n``shop_schema/schema/tables/order_product.sql``::\n\n    --REQ tables/order\n    --UP\n    CREATE TABLE order_product (\n    id SERIAL PRIMARY KEY,\n    order_id INTEGER REFERENCES \"order\"(id),\n    product_id INTEGER REFERENCES product(id),\n    quantity INTEGER);\n\nOk, now let's create our first migration::\n\n    $ sqlibrist makemigration -n 'initial'\n    Creating:\n     tables/user\n     tables/product\n     tables/order\n     tables/order_product\n    Creating new migration 0001-initial\n\nNew files were created in ``shop_schema/migrations/0001-initial``::\n\n    up.sql\n    down.sql\n    schema.json\n\n``up.sql`` contains SQL to apply your changes (create tables), ``down.sql`` has nothing\nnotable, since our .sql files have no ``--DOWN`` section, and the ``schema.json``\nhas snapshot of current schema.\n\nIf you want to make more changes to the schema files prior to applying newly created\nmigration, delete the directory with those 3 files, in our case ``0001-initial``.\n\nYou are free to review and edit ``up.sql`` and ``down.sql``, of course if you know what\nyou are doing. **DO NOT edit schema.json**.\n\nNow go ahead and apply our migration::\n\n    $ sqlibrist migrate\n    Applying migration 0001-initial... done\n\nWell done! Tables are created, but let's do something more interesting.\n\nWe will create view that shows all user orders with order total:\n\n``shop_schema/schema/views/user_orders.sql``::\n\n    --REQ tables/user\n    --REQ tables/order\n    --REQ tables/product\n    --REQ tables/order_product\n\n    --UP\n    CREATE VIEW user_orders AS SELECT\n     u.id as user_id,\n     o.id as order_id,\n     o.date,\n     SUM(p.price*op.quantity) AS total\n\n     FROM \"user\" u\n     INNER JOIN \"order\" o ON u.id=o.user_id\n     INNER JOIN order_product op ON o.id=op.order_id\n     INNER JOIN product p ON p.id=op.product_id\n\n     GROUP BY o.id, u.id;\n\n    --DOWN\n    DROP VIEW user_orders;\n\n... and function to return only given user's orders:\n\n``shop_schema/schema/functions/get_user_orders.sql``::\n\n    --REQ views/user_orders\n\n    --UP\n    CREATE FUNCTION get_user_orders(_user_id INTEGER)\n    RETURNS SETOF user_orders\n    LANGUAGE SQL AS $$\n\n    SELECT * FROM user_orders\n    WHERE user_id=_user_id;\n\n    $$;\n\n    --DOWN\n    DROP FUNCTION get_user_orders(INTEGER);\n\nNext create new migration and apply it::\n\n    $ sqlibrist makemigration -n 'user_orders view and function'\n    Creating:\n     views/user_orders\n     functions/get_user_orders\n    Creating new migration 0002-user_orders view and function\n\n    $ sqlibrist migrate\n    Applying migration 0002-user_orders view and function... done\n\nWe have four tables, one view and one function.\n\nNow you want to add one more field in the ``user_orders`` view. There can be couple\nof issues here:\n\n* we could try to drop and create updated view, but the database server will\n  complain, that *get_user_orders* function depends on droppable view;\n\n* we could be smart and create view with ``CREATE OR REPLACE VIEW user_orders...``,\n  however single view's fields and their types make separate type, and the\n  function ``get_user_orders`` returns that type. We can't simply change view type\n  without recreating the function.\n\nThis is where sqlibrist comes to help. Add one more field ``SUM(op.quantity) as order_total``\nto the ``user_orders`` view::\n\n    --REQ tables/user\n    --REQ tables/order\n    --REQ tables/product\n    --REQ tables/order_product\n\n    --UP\n    CREATE VIEW user_orders AS SELECT\n     u.id as user_id,\n     o.id as order_id,\n     o.date,\n     SUM(p.price*op.quantity) AS total,\n     SUM(op.quantity) as order_total\n\n     FROM \"user\" u\n     INNER JOIN \"order\" o ON u.id=o.user_id\n     INNER JOIN order_product op ON o.id=op.order_id\n     INNER JOIN product p ON p.id=op.product_id\n\n     GROUP BY o.id, u.id;\n\n    --DOWN\n    DROP VIEW user_orders;\n\nWe can see, what was changed from the latest schema snapshot::\n\n    $ sqlibrist -V diff\n    Changed items:\n      views/user_orders\n    ---\n\n    +++\n\n    @@ -2,7 +2,8 @@\n\n          u.id as user_id,\n          o.id as order_id,\n          o.date,\n    -     SUM(p.price*op.quantity) AS total\n    +     SUM(p.price*op.quantity) AS total,\n    +     SUM(op.quantity) as total_quantity\n\n          FROM \"user\" u\n          INNER JOIN \"order\" o ON u.id=o.user_id\n\nNow let's make migration::\n\n    $ sqlibrist makemigration\n    Updating:\n     dropping:\n      functions/get_user_orders\n      views/user_orders\n     creating:\n      views/user_orders\n      functions/get_user_orders\n    Creating new migration 0003-auto\n\nYou can see, that sqlibrist first drops ``get_user_orders`` function, after that\n``user_orders`` view does not have dependent objects and can be dropped too.\nThen view and function are created in order, opposite to dropping.\nApply our changes::\n\n    $ sqlibrist migrate\n    Applying migration 0003-auto... done\n\nLast topic is to make change to table structure. Since we did not add ``--DROP`` section\nto our tables, any change has to be made manually. This is done in several steps:\n\n1. Edit CREATE TABLE definition to reflect new structure;\n2. Generate new migration with ``makemigration`` command;\n3. Manually edit new migration's ``up.sql`` with ALTER TABLE instructions.\n\nTo demonstrate this, let's add field ``type text`` to the ``product`` table. It will\nlook like this:\n\n``shop_schema/schema/tables/product.sql``::\n\n    --UP\n    CREATE TABLE product (\n    id SERIAL PRIMARY KEY,\n    name TEXT,\n    \"type\" TEXT,\n    price MONEY);\n\nThis was #1. Next create new migration::\n\n    $ sqlibrist makemigration -n 'new product field'\n    Updating:\n     dropping:\n      functions/get_user_orders\n      views/user_orders\n     creating:\n      views/user_orders\n      functions/get_user_orders\n    Creating new migration 0004-new product field\n\nPlease, pay attention here, that even though we changed product table definition,\n``tables/product`` is not in migration process, but ALL dependent objects are recreated.\nThis behavior is intended. This was #2.\n\nNow #3: open ``shop_schema/migrations/0004-new product field/up.sql`` with your editor\nand look for line 12 with text ``-- ==== Add your instruction here ====``. This is\nthe point in migration when all dependent objects are dropped and you can issue\nALTER TABLE instructions.\n\nJust below this line paste following::\n\n    ALTER TABLE product\n    ADD COLUMN \"type\" TEXT;\n\nYour ``up.sql`` will look like this::\n\n    -- begin --\n    DROP FUNCTION get_user_orders(INTEGER);\n    -- end --\n\n\n    -- begin --\n    DROP VIEW user_orders;\n    -- end --\n\n\n    -- begin --\n    -- ==== Add your instruction here ====\n    ALTER TABLE product\n    ADD COLUMN \"type\" TEXT;\n    -- end --\n\n\n    -- begin --\n    CREATE VIEW user_orders AS SELECT\n         u.id as user_id,\n         o.id as order_id,\n         o.date,\n         SUM(p.price*op.quantity) AS total,\n         SUM(op.quantity) as total_quantity\n\n         FROM \"user\" u\n         INNER JOIN \"order\" o ON u.id=o.user_id\n         INNER JOIN order_product op ON o.id=op.order_id\n         INNER JOIN product p ON p.id=op.product_id\n\n         GROUP BY o.id, u.id;\n    -- end --\n\n\n    -- begin --\n    CREATE FUNCTION get_user_orders(_user_id INTEGER)\n        RETURNS SETOF user_orders\n        LANGUAGE SQL AS $$\n\n        SELECT * FROM user_orders\n        WHERE user_id=_user_id;\n\n        $$;\n    -- end --\n\nMigration text is self-explanatory: drop function and view, alter table and then\ncreate view and function, with respect to their dependencies.\n\nFinally, apply your changes::\n\n    $ sqlibrist migrate\n    Applying migration 0004-new product field... done\n\n\nRules of thumb\n==============\n\n* **do not add CASCADE to DROP statements, even when dropping views/functions/indexes**.\nYou may and will implicitly drop table(s) with your data;\n\n* **avoid circular dependencies**. If you create objects that depend on each other\nin circle, sqlibrist will not know, how to update them. I bet, you will try to\ndo so, but migration will not be created and sqlibrist will show you warning and\ndependency path;\n\n* **do not create --DOWN sections for tables**. Manually write ALTER TABLE instructions\nas described in the Tutorial;\n\n* **always test migrations on your test database before applying them to production**.\n\n\nDjango integration\n==================\n\nSqlibrist has a very small application to integrate itself into your Django\nproject and access DB configuration.\n\nInstallation\n------------\n\nAdd ``'django_sqlibrist'`` to INSTALLED_APPS\n\nSettings\n--------\n\n``SQLIBRIST_DIRECTORY`` - Path to the directory with schema and migrations files.\nDefaults to project's BASE_DIR/sql\n\nUsage\n-----\n::\n\n    $ python manage.py sqlibrist <command> [options]\n\nIf you want your tables to be accessible from Django ORM and/or for using\nDjango Admin for these tables, add following attributes to the model's ``Meta`` class:\n::\n\n    class SomeTable(models.Model):\n        field1 = models.CharField()\n        ...\n        class Meta:\n            managed = False  # will tell Django to not create migrations for that table\n            table_name = 'sometable'  # name of your table\n\nIf primary key has other name than ``id`` and type not Integer, add that field to\nmodel class with ``primary_key=True`` argument, for example::\n\n    my_key = models.IntegerField(primary_key=True)\n\nMigrating existing models\n-------------------------\nTODO:\n\n\nAlternatives\n============\n\nSqlibrist is not new concept, it has a lot of alternatives, most notable, I think,\nis [sqitch](http://sqitch.org/). It is great tool, with rich development history and\ncommunity arount it. I started using it at first, however it did not make me completely\nhappy. My problem with sqitch was pretty hard installation progress\n(shame on me, first of all). It is written in Perl and has huge number of dependencies.\nFor man, unfamiliar with Perl pachage systems, it was quite a challenge to\ninstall sqitch on 3 different Linux distributions: Fedora, Ubuntu and Arch.\nIn addition, I found sqitch's dependency tracking being complicated and unobvious\nto perform relatively simple schema changes. Don't get me wrong - I am not\nadvocating you against using sqitch, you should try it yourself.\n\n\nTODO\n====\n\n- documentation\n    * django_sqlibrist: Migrating existing models\n    * detailed info on all commands\n\nChangelog\n=========\n\n0.1.10 string encoding fix\n\n0.1.9 config file parsing fixed, MAC installation added (thanks to https://github.com/tolyadouble); django integration improved\n\n0.1.8 fixes\n\n0.1.7 fixes\n\n0.1.6 fixes\n\n0.1.5 django_sqlibrist takes engine and connection from django project settings\n\n0.1.4 django_sqlibrist configurator fixed\n\n0.1.3 django_sqlibrist configurator fixed\n\n0.1.2 LazyConfig fixed\n\n0.1.1 fixed loading config file\n\n0.1.0 django_sqlibrist gets DB connection settings from Django project's settings instead of config file\n\n 0.0.7 django_sqlibrist moved to separate package and is importable in settings.py as \"django_sqlibrist\"", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/condograde/sqlibrist", "keywords": "sqlibrist,db structure,sql,schema migration", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "sqlibrist", "package_url": "https://pypi.org/project/sqlibrist/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/sqlibrist/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/condograde/sqlibrist"}, "release_url": "https://pypi.org/project/sqlibrist/0.1.10/", "requires_dist": null, "requires_python": null, "summary": "Simple tool for managing DB structure, automating patch creation for DB structure migration.", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            sqlibrist<br>=========<br><br>Sqlibrist is command-line tool, made for developers, who do not use ORM to manage their database<br>structure. Programming database objects and deploying them to production<br>is not easy. Naive approach is to manually write patches with SQL statements and then replay<br>them on others DB instances. This, being simple and straightforward, may get tricky<br>when your database structure grows in size and have numerous inter-dependent<br>objects.<br><br>Sqlibrist in essense is tool to make the process of creating SQL patches much more<br>easy, and as side-effect it proposes a way to organize your SQL code. It does not<br>dictate design desisions, or stands on your way when you do something wrong<br>(notorious shooting in foot). All database objects are described declaratively<br>in separate files in the form of ``CREATE TABLE`` or ``CREATE FUNCTION``, having<br>dependency instructions.<br><br>You may think of sqlibrist as Version Control System for database. The whole thing<br>is inspired by Sqitch (see Alternatives below) and Django Migrations (may be you<br>remember Django South). Every time you invoke ``makemigration`` command, snapshot<br>of current scheme is made and compared with previous snapshot. Then, SQL patch<br>is created with instructions to recreate all changed objects cascadely with their<br>dependencies, create new or remove deleted. In the latter case, sqlibrist will not<br>let you delete object that has left dependants.<br><br>Currently PostgreSQL is supported. MySQL support is experimental, and not well-tested<br>yet.<br><br><br>Platform compatibility<br>======================<br><br>Linux, Mac OS, Windows. See installation instructions for each below.<br><br><br>Requirements<br>============<br><br>Python dependencies:<br><br>- PyYAML<br>- psycopg2 (optional)<br>- mysql-python (optional)<br><br>Installation<br>============<br><br>Linux<br>-----<br><br>**Ubuntu/Debian**<br><br>First install required libraries::<br><br>    $ sudo apt-get install python-pip python-dev libyaml-dev<br>    $ sudo apt-get install libmysqlclient-dev  # for MySQL<br>    $ sudo apt-get install libpq-dev  # PostgreSQL<br><br>Sqlibrist can be installed into virtualenv::<br><br>    $ pip install sqlibrist<br><br>or system-wide::<br><br>    $ sudo pip install sqlibrist<br><br>**Fedora/CentOS/RHEL**<br><br>First install required libraries (replace ``dnf`` to ``yum`` if you are using<br>pre-dnf package manager)::<br><br>    $ sudo dnf install python-devel python-pip libyaml-devel<br>    $ sudo dnf install postgresql-devel  # PostgreSQL<br><br>    $ sudo dnf install mariadb-devel  # for MariaDB<br>    or<br>    $ sudo dnf install mysql++-devel  # for MySQL<br><br>Sqlibrist can be installed into virtualenv::<br><br>    $ pip install sqlibrist<br><br>or system-wide::<br><br>    $ sudo pip install sqlibrist<br><br><br>MacOS<br>-----<br><br>First install required libraries::<br><br>    $ sudo easy_install pip<br>    $ brew install mysql  # for MySQL<br>    $ brew install postgres  # PostgreSQL<br><br><br>Sqlibrist can be installed into virtualenv::<br><br>    $ pip install sqlibrist<br><br>or system-wide::<br><br>    $ sudo pip install sqlibrist<br><br>Also you need to install database dependencies<br>MySQL::<br><br>    $ pip install mysql-python<br><br>PostgreSQL::<br><br>    $ pip install psycopg2<br><br>Windows<br>-------<br>TODO<br><br>Tutorial<br>========<br><br>Let's create simple project and go through typical steps of DB schema manageent.<br>This will be small webshop.<br><br>Create empty directory::<br><br>    $ mkdir shop_schema<br>    $ cd shop_schema<br><br>Then we need to create sqlibrist database structure, where we will keep<br>schema and migrations::<br><br>    $ sqlibrist init<br>    Creating directories...<br>    Done.<br><br>You will get the following DB structure::<br><br>    shop_schema<br>        sqlibrist.yaml<br>        migrations<br>        schema<br>            constraints<br>            functions<br>            indexes<br>            tables<br>            triggers<br>            types<br>            views<br><br>In ``sqlibrist.yaml`` you will configure DB connections::<br><br>    ---<br>    default:<br>      engine: pg<br>      user: &lt;username&gt;<br>      name: &lt;database_name&gt;<br>      password: &lt;password&gt;<br>    # host: 127.0.0.1<br>    # port: 5432<br><br>``host`` and ``port`` are optional.<br><br>Once you configured DB connection, test if is correct::<br><br>    $ sqlibrist test_connection<br>    Connection OK<br><br>Next we need to create sqlibrist migrations table::<br><br>    $ sqlibrist initdb<br>    Creating db...<br>    Creating schema and migrations log table...<br><br>    Done.<br><br>Now we are ready to build our DB schema.<br><br>Create file ``shop_schema/schema/tables/user.sql``::<br><br>    --UP<br>    CREATE TABLE \"user\" (<br>    id SERIAL PRIMARY KEY,<br>    name TEXT,<br>    password TEXT);<br><br>The first line ``--UP`` means that the following are SQL statements for 'forward'<br>migration. The opposite is optional ``--DOWN``, which contains instructions for reverting.<br>To be safe, and not accidentally drop any table with your data, we will not include<br>anything like DROP TABLE. Working with table upgrades and ``--DOWN`` is on the way<br>below.<br><br>``shop_schema/schema/tables/product.sql``::<br><br>    --UP<br>    CREATE TABLE product (<br>    id SERIAL PRIMARY KEY,<br>    name TEXT,<br>    price MONEY);<br><br>``shop_schema/schema/tables/order.sql``::<br><br>    --REQ tables/user<br>    --UP<br>    CREATE TABLE \"order\" (<br>    id SERIAL PRIMARY KEY,<br>    user_id INTEGER REFERENCES \"user\"(id),<br>    date DATE);<br><br>Important here is the ``--REQ tables/user`` statement. It tells sqlibrist, that<br>``order`` table depends on ``user`` table. This will guarantee, that ``user`` will<br>be created before ``order``.<br><br>``shop_schema/schema/tables/order_product.sql``::<br><br>    --REQ tables/order<br>    --UP<br>    CREATE TABLE order_product (<br>    id SERIAL PRIMARY KEY,<br>    order_id INTEGER REFERENCES \"order\"(id),<br>    product_id INTEGER REFERENCES product(id),<br>    quantity INTEGER);<br><br>Ok, now let's create our first migration::<br><br>    $ sqlibrist makemigration -n 'initial'<br>    Creating:<br>     tables/user<br>     tables/product<br>     tables/order<br>     tables/order_product<br>    Creating new migration 0001-initial<br><br>New files were created in ``shop_schema/migrations/0001-initial``::<br><br>    up.sql<br>    down.sql<br>    schema.json<br><br>``up.sql`` contains SQL to apply your changes (create tables), ``down.sql`` has nothing<br>notable, since our .sql files have no ``--DOWN`` section, and the ``schema.json``<br>has snapshot of current schema.<br><br>If you want to make more changes to the schema files prior to applying newly created<br>migration, delete the directory with those 3 files, in our case ``0001-initial``.<br><br>You are free to review and edit ``up.sql`` and ``down.sql``, of course if you know what<br>you are doing. **DO NOT edit schema.json**.<br><br>Now go ahead and apply our migration::<br><br>    $ sqlibrist migrate<br>    Applying migration 0001-initial... done<br><br>Well done! Tables are created, but let's do something more interesting.<br><br>We will create view that shows all user orders with order total:<br><br>``shop_schema/schema/views/user_orders.sql``::<br><br>    --REQ tables/user<br>    --REQ tables/order<br>    --REQ tables/product<br>    --REQ tables/order_product<br><br>    --UP<br>    CREATE VIEW user_orders AS SELECT<br>     u.id as user_id,<br>     o.id as order_id,<br>     o.date,<br>     SUM(p.price*op.quantity) AS total<br><br>     FROM \"user\" u<br>     INNER JOIN \"order\" o ON u.id=o.user_id<br>     INNER JOIN order_product op ON o.id=op.order_id<br>     INNER JOIN product p ON p.id=op.product_id<br><br>     GROUP BY o.id, u.id;<br><br>    --DOWN<br>    DROP VIEW user_orders;<br><br>... and function to return only given user's orders:<br><br>``shop_schema/schema/functions/get_user_orders.sql``::<br><br>    --REQ views/user_orders<br><br>    --UP<br>    CREATE FUNCTION get_user_orders(_user_id INTEGER)<br>    RETURNS SETOF user_orders<br>    LANGUAGE SQL AS $$<br><br>    SELECT * FROM user_orders<br>    WHERE user_id=_user_id;<br><br>    $$;<br><br>    --DOWN<br>    DROP FUNCTION get_user_orders(INTEGER);<br><br>Next create new migration and apply it::<br><br>    $ sqlibrist makemigration -n 'user_orders view and function'<br>    Creating:<br>     views/user_orders<br>     functions/get_user_orders<br>    Creating new migration 0002-user_orders view and function<br><br>    $ sqlibrist migrate<br>    Applying migration 0002-user_orders view and function... done<br><br>We have four tables, one view and one function.<br><br>Now you want to add one more field in the ``user_orders`` view. There can be couple<br>of issues here:<br><br>* we could try to drop and create updated view, but the database server will<br>  complain, that *get_user_orders* function depends on droppable view;<br><br>* we could be smart and create view with ``CREATE OR REPLACE VIEW user_orders...``,<br>  however single view's fields and their types make separate type, and the<br>  function ``get_user_orders`` returns that type. We can't simply change view type<br>  without recreating the function.<br><br>This is where sqlibrist comes to help. Add one more field ``SUM(op.quantity) as order_total``<br>to the ``user_orders`` view::<br><br>    --REQ tables/user<br>    --REQ tables/order<br>    --REQ tables/product<br>    --REQ tables/order_product<br><br>    --UP<br>    CREATE VIEW user_orders AS SELECT<br>     u.id as user_id,<br>     o.id as order_id,<br>     o.date,<br>     SUM(p.price*op.quantity) AS total,<br>     SUM(op.quantity) as order_total<br><br>     FROM \"user\" u<br>     INNER JOIN \"order\" o ON u.id=o.user_id<br>     INNER JOIN order_product op ON o.id=op.order_id<br>     INNER JOIN product p ON p.id=op.product_id<br><br>     GROUP BY o.id, u.id;<br><br>    --DOWN<br>    DROP VIEW user_orders;<br><br>We can see, what was changed from the latest schema snapshot::<br><br>    $ sqlibrist -V diff<br>    Changed items:<br>      views/user_orders<br>    ---<br><br>    +++<br><br>    @@ -2,7 +2,8 @@<br><br>          u.id as user_id,<br>          o.id as order_id,<br>          o.date,<br>    -     SUM(p.price*op.quantity) AS total<br>    +     SUM(p.price*op.quantity) AS total,<br>    +     SUM(op.quantity) as total_quantity<br><br>          FROM \"user\" u<br>          INNER JOIN \"order\" o ON u.id=o.user_id<br><br>Now let's make migration::<br><br>    $ sqlibrist makemigration<br>    Updating:<br>     dropping:<br>      functions/get_user_orders<br>      views/user_orders<br>     creating:<br>      views/user_orders<br>      functions/get_user_orders<br>    Creating new migration 0003-auto<br><br>You can see, that sqlibrist first drops ``get_user_orders`` function, after that<br>``user_orders`` view does not have dependent objects and can be dropped too.<br>Then view and function are created in order, opposite to dropping.<br>Apply our changes::<br><br>    $ sqlibrist migrate<br>    Applying migration 0003-auto... done<br><br>Last topic is to make change to table structure. Since we did not add ``--DROP`` section<br>to our tables, any change has to be made manually. This is done in several steps:<br><br>1. Edit CREATE TABLE definition to reflect new structure;<br>2. Generate new migration with ``makemigration`` command;<br>3. Manually edit new migration's ``up.sql`` with ALTER TABLE instructions.<br><br>To demonstrate this, let's add field ``type text`` to the ``product`` table. It will<br>look like this:<br><br>``shop_schema/schema/tables/product.sql``::<br><br>    --UP<br>    CREATE TABLE product (<br>    id SERIAL PRIMARY KEY,<br>    name TEXT,<br>    \"type\" TEXT,<br>    price MONEY);<br><br>This was #1. Next create new migration::<br><br>    $ sqlibrist makemigration -n 'new product field'<br>    Updating:<br>     dropping:<br>      functions/get_user_orders<br>      views/user_orders<br>     creating:<br>      views/user_orders<br>      functions/get_user_orders<br>    Creating new migration 0004-new product field<br><br>Please, pay attention here, that even though we changed product table definition,<br>``tables/product`` is not in migration process, but ALL dependent objects are recreated.<br>This behavior is intended. This was #2.<br><br>Now #3: open ``shop_schema/migrations/0004-new product field/up.sql`` with your editor<br>and look for line 12 with text ``-- ==== Add your instruction here ====``. This is<br>the point in migration when all dependent objects are dropped and you can issue<br>ALTER TABLE instructions.<br><br>Just below this line paste following::<br><br>    ALTER TABLE product<br>    ADD COLUMN \"type\" TEXT;<br><br>Your ``up.sql`` will look like this::<br><br>    -- begin --<br>    DROP FUNCTION get_user_orders(INTEGER);<br>    -- end --<br><br><br>    -- begin --<br>    DROP VIEW user_orders;<br>    -- end --<br><br><br>    -- begin --<br>    -- ==== Add your instruction here ====<br>    ALTER TABLE product<br>    ADD COLUMN \"type\" TEXT;<br>    -- end --<br><br><br>    -- begin --<br>    CREATE VIEW user_orders AS SELECT<br>         u.id as user_id,<br>         o.id as order_id,<br>         o.date,<br>         SUM(p.price*op.quantity) AS total,<br>         SUM(op.quantity) as total_quantity<br><br>         FROM \"user\" u<br>         INNER JOIN \"order\" o ON u.id=o.user_id<br>         INNER JOIN order_product op ON o.id=op.order_id<br>         INNER JOIN product p ON p.id=op.product_id<br><br>         GROUP BY o.id, u.id;<br>    -- end --<br><br><br>    -- begin --<br>    CREATE FUNCTION get_user_orders(_user_id INTEGER)<br>        RETURNS SETOF user_orders<br>        LANGUAGE SQL AS $$<br><br>        SELECT * FROM user_orders<br>        WHERE user_id=_user_id;<br><br>        $$;<br>    -- end --<br><br>Migration text is self-explanatory: drop function and view, alter table and then<br>create view and function, with respect to their dependencies.<br><br>Finally, apply your changes::<br><br>    $ sqlibrist migrate<br>    Applying migration 0004-new product field... done<br><br><br>Rules of thumb<br>==============<br><br>* **do not add CASCADE to DROP statements, even when dropping views/functions/indexes**.<br>You may and will implicitly drop table(s) with your data;<br><br>* **avoid circular dependencies**. If you create objects that depend on each other<br>in circle, sqlibrist will not know, how to update them. I bet, you will try to<br>do so, but migration will not be created and sqlibrist will show you warning and<br>dependency path;<br><br>* **do not create --DOWN sections for tables**. Manually write ALTER TABLE instructions<br>as described in the Tutorial;<br><br>* **always test migrations on your test database before applying them to production**.<br><br><br>Django integration<br>==================<br><br>Sqlibrist has a very small application to integrate itself into your Django<br>project and access DB configuration.<br><br>Installation<br>------------<br><br>Add ``'django_sqlibrist'`` to INSTALLED_APPS<br><br>Settings<br>--------<br><br>``SQLIBRIST_DIRECTORY`` - Path to the directory with schema and migrations files.<br>Defaults to project's BASE_DIR/sql<br><br>Usage<br>-----<br>::<br><br>    $ python manage.py sqlibrist &lt;command&gt; [options]<br><br>If you want your tables to be accessible from Django ORM and/or for using<br>Django Admin for these tables, add following attributes to the model's ``Meta`` class:<br>::<br><br>    class SomeTable(models.Model):<br>        field1 = models.CharField()<br>        ...<br>        class Meta:<br>            managed = False  # will tell Django to not create migrations for that table<br>            table_name = 'sometable'  # name of your table<br><br>If primary key has other name than ``id`` and type not Integer, add that field to<br>model class with ``primary_key=True`` argument, for example::<br><br>    my_key = models.IntegerField(primary_key=True)<br><br>Migrating existing models<br>-------------------------<br>TODO:<br><br><br>Alternatives<br>============<br><br>Sqlibrist is not new concept, it has a lot of alternatives, most notable, I think,<br>is [sqitch](http://sqitch.org/). It is great tool, with rich development history and<br>community arount it. I started using it at first, however it did not make me completely<br>happy. My problem with sqitch was pretty hard installation progress<br>(shame on me, first of all). It is written in Perl and has huge number of dependencies.<br>For man, unfamiliar with Perl pachage systems, it was quite a challenge to<br>install sqitch on 3 different Linux distributions: Fedora, Ubuntu and Arch.<br>In addition, I found sqitch's dependency tracking being complicated and unobvious<br>to perform relatively simple schema changes. Don't get me wrong - I am not<br>advocating you against using sqitch, you should try it yourself.<br><br><br>TODO<br>====<br><br>- documentation<br>    * django_sqlibrist: Migrating existing models<br>    * detailed info on all commands<br><br>Changelog<br>=========<br><br>0.1.10 string encoding fix<br><br>0.1.9 config file parsing fixed, MAC installation added (thanks to https://github.com/tolyadouble); django integration improved<br><br>0.1.8 fixes<br><br>0.1.7 fixes<br><br>0.1.6 fixes<br><br>0.1.5 django_sqlibrist takes engine and connection from django project settings<br><br>0.1.4 django_sqlibrist configurator fixed<br><br>0.1.3 django_sqlibrist configurator fixed<br><br>0.1.2 LazyConfig fixed<br><br>0.1.1 fixed loading config file<br><br>0.1.0 django_sqlibrist gets DB connection settings from Django project's settings instead of config file<br><br> 0.0.7 django_sqlibrist moved to separate package and is importable in settings.py as \"django_sqlibrist\"\n          </div>"}, "last_serial": 2326840, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "2cef4bc32edce17a69f9f4fef321b2ab", "sha256": "89e956166c57b2eb437fff462bf9c91d4d49f2bbd58266e308d8285c8ae3dc02"}, "downloads": -1, "filename": "sqlibrist-0.0.6.tar.gz", "has_sig": false, "md5_digest": "2cef4bc32edce17a69f9f4fef321b2ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8555, "upload_time": "2016-03-20T10:24:03", "upload_time_iso_8601": "2016-03-20T10:24:03.743991Z", "url": "https://files.pythonhosted.org/packages/17/f7/a1e6245c2a224c9f60fc3681159d57404305f9ecffc4d53e0a283854f1ab/sqlibrist-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "520cc7ad99b5f72993a5324589d5b1bb", "sha256": "d38c4d291d3b5f32579d7cda31ad80345975df6a21e5911f49f7e2b11e3043ab"}, "downloads": -1, "filename": "sqlibrist-0.0.7.tar.gz", "has_sig": false, "md5_digest": "520cc7ad99b5f72993a5324589d5b1bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10676, "upload_time": "2016-03-20T15:44:20", "upload_time_iso_8601": "2016-03-20T15:44:20.970359Z", "url": "https://files.pythonhosted.org/packages/1e/8d/63093f13b174c87f1738e9fde88cdfbc43965fb206f3a391ee46e9ba25a5/sqlibrist-0.0.7.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "b00b7b4444ffa0b4631300eb7d2f500b", "sha256": "01caf35fa9a1751d3caa60c3f004f19a14b75278d36c310ba9d604a749400d4b"}, "downloads": -1, "filename": "sqlibrist-0.1.0.tar.gz", "has_sig": false, "md5_digest": "b00b7b4444ffa0b4631300eb7d2f500b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16503, "upload_time": "2016-03-21T09:50:04", "upload_time_iso_8601": "2016-03-21T09:50:04.715039Z", "url": "https://files.pythonhosted.org/packages/df/c0/64d23a96c011cd74b747596ab32c1a9014d34bdeedb4f90acace95b8a259/sqlibrist-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0e9fad75e12e279a563d32e35f5bd5af", "sha256": "4a0bd54607323a4d64fef5065da36c5d59b24b3a60964c38ade6cdb2db3d7e77"}, "downloads": -1, "filename": "sqlibrist-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0e9fad75e12e279a563d32e35f5bd5af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17268, "upload_time": "2016-03-22T12:16:18", "upload_time_iso_8601": "2016-03-22T12:16:18.014962Z", "url": "https://files.pythonhosted.org/packages/78/d2/7fcb7fd78dc9ab2576621417a8f62ab38a6f54a145e31584f195b37a76b2/sqlibrist-0.1.1.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "7fba357c82878758c4c3b72d919ddd18", "sha256": "5f11eaeafc33285447c9e50f96f665f44daa4e892a8a9d8ea01ea0844fa37285"}, "downloads": -1, "filename": "sqlibrist-0.1.10.tar.gz", "has_sig": false, "md5_digest": "7fba357c82878758c4c3b72d919ddd18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17940, "upload_time": "2016-09-06T08:37:24", "upload_time_iso_8601": "2016-09-06T08:37:24.259867Z", "url": "https://files.pythonhosted.org/packages/6b/7f/59cde541cea4ea63d042562ed3d4003f2e0d16e5422068accf04f86edc52/sqlibrist-0.1.10.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "29cf6e2940fbd66f841e2445fdb14be6", "sha256": "5e25a90fe7c699a69537f6dbb918410a57d9821b820f04c0d9efcc10ea5de2f8"}, "downloads": -1, "filename": "sqlibrist-0.1.2.tar.gz", "has_sig": false, "md5_digest": "29cf6e2940fbd66f841e2445fdb14be6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17323, "upload_time": "2016-03-23T15:53:24", "upload_time_iso_8601": "2016-03-23T15:53:24.080689Z", "url": "https://files.pythonhosted.org/packages/9d/d2/a1c086fd0d45ecf726ba69fa0d4d8f04409c5e9bd0ba262b921f4c231df4/sqlibrist-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1f2cd96789e3d56608e2cf322036adb7", "sha256": "1065c5a5e1a4a8c29ec1a1fe99031387ead5941163c739f44703553f87700222"}, "downloads": -1, "filename": "sqlibrist-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1f2cd96789e3d56608e2cf322036adb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17332, "upload_time": "2016-03-23T15:59:58", "upload_time_iso_8601": "2016-03-23T15:59:58.933488Z", "url": "https://files.pythonhosted.org/packages/b7/03/56aadc20d7a456ae4dc21046fe81b2a4a25db921f92d6743f592268046d3/sqlibrist-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "7e0e302e81740cabea1bb37e93140aa9", "sha256": "52975d4e2ac952ca0ad1bc48e26cadb0c3595ee7cc2312be9ad480a2dd0d7453"}, "downloads": -1, "filename": "sqlibrist-0.1.4.tar.gz", "has_sig": false, "md5_digest": "7e0e302e81740cabea1bb37e93140aa9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17347, "upload_time": "2016-03-24T07:31:37", "upload_time_iso_8601": "2016-03-24T07:31:37.259164Z", "url": "https://files.pythonhosted.org/packages/f7/e8/8e69934488d827d844803aed5013bffbe3e9600a21e9b5761ee9a805c8ef/sqlibrist-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "17a9d9112df0d466d95801974e7e2f15", "sha256": "0edd32287bb1a1f3eb5ac135130455d853b668fbee1a3e2a3b6f56671199bb82"}, "downloads": -1, "filename": "sqlibrist-0.1.5.tar.gz", "has_sig": false, "md5_digest": "17a9d9112df0d466d95801974e7e2f15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17359, "upload_time": "2016-04-04T18:10:50", "upload_time_iso_8601": "2016-04-04T18:10:50.065741Z", "url": "https://files.pythonhosted.org/packages/3d/30/5b09157d42a5fb11ebd69af5c70414a2096ec57a65b49e52e5a7df252ba8/sqlibrist-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "654f9c88a5c1f2fd7be25a61f1d16386", "sha256": "a9728cc6ffdcab06e721a4792e54bcc3350ce0d1fb9db805514acc047fb3440d"}, "downloads": -1, "filename": "sqlibrist-0.1.6.tar.gz", "has_sig": false, "md5_digest": "654f9c88a5c1f2fd7be25a61f1d16386", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17334, "upload_time": "2016-04-04T18:15:15", "upload_time_iso_8601": "2016-04-04T18:15:15.310407Z", "url": "https://files.pythonhosted.org/packages/4e/42/9c37dd9e969e0560b13eb803f115c93b097e96e0618200aec1f193f01571/sqlibrist-0.1.6.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "5b00d097b26db4ff190259eee6fd71cf", "sha256": "2492c4a3a4532710a2b5fff694dc6ddcb90f1c8c9c99e83617da9e1029c329a8"}, "downloads": -1, "filename": "sqlibrist-0.1.8.tar.gz", "has_sig": false, "md5_digest": "5b00d097b26db4ff190259eee6fd71cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17385, "upload_time": "2016-04-20T13:26:51", "upload_time_iso_8601": "2016-04-20T13:26:51.238089Z", "url": "https://files.pythonhosted.org/packages/94/a2/b58ad6c61f3342fe095780c132e60558ed85f690d57d1bd10e0adfb3b55f/sqlibrist-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "52c84d7063fabe608aab044e873a3601", "sha256": "d011bbaea5dcab6cab9ade5d91ea1e472f981759d70949ecbcf1e297879cb60e"}, "downloads": -1, "filename": "sqlibrist-0.1.9.tar.gz", "has_sig": false, "md5_digest": "52c84d7063fabe608aab044e873a3601", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17930, "upload_time": "2016-04-22T09:05:34", "upload_time_iso_8601": "2016-04-22T09:05:34.710633Z", "url": "https://files.pythonhosted.org/packages/ec/11/40d929a0cbd03e1abed9a2fb0e491876faef889fd6dcb82e05464d91b1dc/sqlibrist-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7fba357c82878758c4c3b72d919ddd18", "sha256": "5f11eaeafc33285447c9e50f96f665f44daa4e892a8a9d8ea01ea0844fa37285"}, "downloads": -1, "filename": "sqlibrist-0.1.10.tar.gz", "has_sig": false, "md5_digest": "7fba357c82878758c4c3b72d919ddd18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17940, "upload_time": "2016-09-06T08:37:24", "upload_time_iso_8601": "2016-09-06T08:37:24.259867Z", "url": "https://files.pythonhosted.org/packages/6b/7f/59cde541cea4ea63d042562ed3d4003f2e0d16e5422068accf04f86edc52/sqlibrist-0.1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:44 2020"}