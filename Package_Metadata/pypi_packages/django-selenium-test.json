{"info": {"author": "Tom Wiesing", "author_email": "tkw01536@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Testing"], "description": "# django-selenium-test\n\n[![Build button](https://travis-ci.com/tkw1536/django_selenium_test.svg?branch=master)](https://travis-ci.com/tkw1536/django_selenium_test/)\n![License](https://img.shields.io/pypi/l/django-selenium-test.svg)\n![Status](https://img.shields.io/pypi/status/django-selenium-test.svg)\n[![Latest version](https://img.shields.io/pypi/v/django-selenium-test.svg)](https://pypi.python.org/pypi/django-selenium-test)\n\nWrite Selenium tests on Django 2.x and Djano 3.0 and Python 3.8. \nBased on [django-selenium-clean](https://github.com/aptiko/django-selenium-clean). \n\nThis documentation is currently a work-in-progress. \n\n## Tutorial\n\n### Installation\n\nIn your virtualenv:\n\n```sh\npip install django-selenium-test\n```\n\n### Setting up\n\n* Create a new django project and app:\n\n```sh\ndjango-admin startproject foo\ncd foo\npython manage.py startapp bar\n```\n\n* In ``foo/settings.py``, add ``'bar'`` to ``INSTALLED_APPS``\n\n* In ``foo/urls.py``, add ``from bar.views import SimpleView`` to the\n  top, and add ``url(r'^$', SimpleView.as_view())`` to ``urlpatterns``.\n\n* Add the SimpleView to ``bar/views.py``:\n\n```python\nimport textwrap\n\nfrom django.http import HttpResponse\nfrom django.views.generic.base import View\n\n\nclass SimpleView(View):\n\n    def dispatch(request, *args, **kwargs):\n        response_text = textwrap.dedent('''\\\n            <html>\n            <head>\n            <title>Greetings to the world</title>\n            </head>\n            <body>\n            <h1 id=\"earth\">Greetings to earth</h1>\n            <h1 id=\"world\" style=\"display: none;\">Hello, world!</h1>\n\n            <p>We have some javascript here so that when you click the button\n                the heading above toggles between \"Greetings to earth\" and\n                \"Hello, world!\".</p>\n\n            <button onclick=\"toggle()\">Toggle</button>\n\n            <script type=\"text/javascript\">\n                toggle = function () {\n                    var heading_earth = document.getElementById(\"earth\");\n                    var heading_world = document.getElementById(\"world\");\n                    if (heading_earth.style.display == 'none') {\n                        heading_world.style.display = 'none';\n                        heading_earth.style.display = 'block';\n                    } else {\n                        heading_earth.style.display = 'none';\n                        heading_world.style.display = 'block';\n                    }\n                }\n            </script>\n            </body>\n            </html>\n        ''')\n        return HttpResponse(response_text)\n```\n\nWe're done setting up. If you now run ``python manage.py runserver``\nin your browser and visit http://localhost:8000/ in your browser, you\nshould see the simple page. Let's now proceed to write a test for it.\n\n### Writing the test\n\nModify ``bar/tests.py`` so that it has the following contents:\n\n```python\nfrom unittest import skipUnless\n\nfrom django.conf import settings\n\nfrom django_selenium_test import selenium, SeleniumTestCase, PageElement\nfrom selenium.webdriver.common.by import By\n\n\n@skipUnless(getattr(settings, 'SELENIUM_WEBDRIVERS', False),\n            \"Selenium is unconfigured\")\nclass HelloTestCase(SeleniumTestCase):\n\n    heading_earth = PageElement(By.ID, 'earth')\n    heading_world = PageElement(By.ID, 'world')\n    button = PageElement(By.CSS_SELECTOR, 'button')\n\n    def test_toggle(self):\n        # Visit the page\n        self.selenium.get(self.live_server_url)\n\n        # Check that the earth heading is visible\n        self.assertTrue(self.heading_earth.is_displayed())\n        self.assertFalse(self.heading_world.is_displayed())\n\n        # Toggle and check the new condition\n        self.button.click()\n        self.heading_world.wait_until_is_displayed()\n        self.assertFalse(self.heading_earth.is_displayed())\n        self.assertTrue(self.heading_world.is_displayed())\n\n        # Toggle again and re-check\n        self.button.click()\n        self.heading_earth.wait_until_is_displayed()\n        self.assertTrue(self.heading_earth.is_displayed())\n        self.assertFalse(self.heading_world.is_displayed())\n```\n\n### Executing the test\n\nTry ``python manage.py test`` and it will skip the test because\nselenium is unconfigured. You need to configure it by specifying\n``SELENIUM_WEBDRIVERS`` in ``foo/settings.py``:\n\n```python\nfrom django_selenium_test.settings import make_chrome_driver\n\nSELENIUM_WEBDRIVERS = {\n    'default': make_chrome_driver([], {}),\n}\n```\n\nNow try again, and it should execute the test. \n\n### Advanced test running tricks\n\n#### Executing a test in many widths\n\nAdd this to your ``foo/settings.py``:\n\n```python\nSELENIUM_WIDTHS = [1024, 800, 350]\n```\n\nThis will result in executing all ``SeleniumTestCase``'s three times,\none for each specified browser width. Useful for responsive designs.\nThe default is to run them on only one width, 1024.\n\n#### Using many selenium drivers\n\nYou can have many ``SELENIUM_WEBDRIVERS``:\n\n```python\nfrom django_selenium_test.settings import make_chrome_driver, make_firefox_driver\nSELENIUM_WEBDRIVERS = {\n    'default': make_chrome_driver([], {})\n    'firefox': make_firefox_driver([], {})\n}\n```\n\nBy default, the ``default`` one is used. You can specify another using\nthe ``SELENIUM_WEBDRIVER`` environment variable:\n\n```sh\nSELENIUM_WEBDRIVER=firefox python manage.py test\n```\n\n\n#### Running a headless browser\n\nIt can be very useful to run the selenium tests with a headless\nbrowser, that is, in an invisible browser window. For one thing, it\nis much faster. \n\nTo achieve this, pass headless=True to the make_BRAND_driver() function:\n\n```python\nfrom django_selenium_test.settings import make_chrome_driver, make_firefox_driver\nSELENIUM_WEBDRIVERS = {\n    'default': make_chrome_driver([], {}, headless=True)\n    'firefox': make_firefox_driver([], {}, headless=True)\n}\n```\n\n#### Using advanced integration tests\n\n(Currently undocumented)\n\n\n## Reference\n\n### SeleniumTestCase objects\n\n.. code:: python\n\n   from django_selenium_test import SeleniumTestCase\n\n``SeleniumTestCase`` is the same as Django's\n``StaticLiveServerTestCase`` but it adds a little bit of Selenium\nfunctionality. Derive your Selenium tests from this class instead of\n``StaticLiveServerTestCase``.\n\nThe most important feature of ``SeleniumTestCase`` is the ``selenium``\nattribute.  Technically it is a wrapper around the selenium driver. In\npractice, you can think about it as the browser, or as the equivalent\nof Django's test client. It has all `selenium driver attributes and\nmethods`_, but you will mostly use ``get()``. It also has the\nfollowing additional methods:\n\n* ``self.selenium.login(**credentials)``,\n``self.selenium.force_login(user, base_url)``,\n``self.selenium.logout()``\n\n  Similar to the Django test client ``login()``, ``force_login()`` and\n  ``logout()`` methods.  ``login()`` returns ``True`` if login is\n  possible; ``False`` if the provided credentials are incorrect, or the\n  user is inactive, or if the sessions framework is not available.\n\n  The `force_login()` code was adapted from [django-selenium-login](https://github.com/feffe/django-selenium-login/blob/master/seleniumlogin/__init__.py),\n  which is licensed under the MIT License. \n\n* ``self.selenium.wait_until_n_windows(n, timeout=2)``\n\n  Useful when a Javascript action has caused the browser to open\n  another window. The typical usage is this:\n\n```python\nbutton_that_will_open_a_second_window.click()\nself.selenium.wait_until_n_windows(n=2, timeout=10)\nwindows = self.selenium.window_handles\nself.selenium.switch_to_window(windows[1])\n# continue testing\n```\n\n  If the timeout (in seconds) elapses and the number of browser\n  windows never becomes ``n``, an ``AssertionError`` is raised.\n\n- [selenium driver attributes and methods](http://selenium-python.readthedocs.org/api.html#module-selenium.webdriver.remote.webdriver)\n\nPageElement objects\n-------------------\n\n```python\nfrom django_selenium_test import PageElement\n```\n\n``PageElement`` is a lazy wrapper around WebElement_; it has all its\nproperties and methods. It is initialized with a locator_, but the\nelement is not actually located until needed. In addition to\nWebElement_ properties and methods, it has these:\n\n* ``PageElement.exists()``: Returns True if the element can be located.\n\n* ``PageElement.wait_until_exists(timeout=10)``\n\n  ``PageElement.wait_until_not_exists(timeout=10)``\n\n  ``PageElement.wait_until_is_displayed(timeout=10)``\n\n  ``PageElement.wait_until_not_displayed(timeout=10)``\n\n  ``PageElement.wait_until_contains(text, timeout=10)``\n\n  ``PageElement.wait_until_not_contains(text, timeout=10)``\n\n  What these methods do should be self-explanatory from their name. The\n  ones ending in ``contains`` refer to whether the element contains the\n  specified text.  The methods raise an exception if there is a timeout.\n\n- [WebElement](http://selenium-python.readthedocs.org/api.html#module-selenium.webdriver.remote.webelement)\n- [locator](http://selenium-python.readthedocs.org/api.html#locate-elements-by)\n\n### IntegrationTest objects\n(Currently undocumented)\n\n### Running django-selenium-test's own unit tests\n\nBy default the unit tests will use Chrome::\n\n```sh\n./setup.py test\n```\n\nUse the ``SELENIUM_BROWSER`` environment variable to use another browser:\n\n```sh\nSELENIUM_BROWSER=firefox ./setup.py test\n```\n\n## License\n\nLicensed under the BSD 3-clause license; see `LICENSE.txt` for details.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tkw1536/django_selenium_test", "keywords": "", "license": "BSD 3-Clause License", "maintainer": "", "maintainer_email": "", "name": "django-selenium-test", "package_url": "https://pypi.org/project/django-selenium-test/", "platform": "", "project_url": "https://pypi.org/project/django-selenium-test/", "project_urls": {"Homepage": "https://github.com/tkw1536/django_selenium_test"}, "release_url": "https://pypi.org/project/django-selenium-test/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Write clean Selenium tests in Django", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-selenium-test</h1>\n<p><a href=\"https://travis-ci.com/tkw1536/django_selenium_test/\" rel=\"nofollow\"><img alt=\"Build button\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/43797508f5b7a6b4c332c72a46079eee2bf97519/68747470733a2f2f7472617669732d63692e636f6d2f746b77313533362f646a616e676f5f73656c656e69756d5f746573742e7376673f6272616e63683d6d6173746572\"></a>\n<img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8bafbd42cd5d2ce4a94204854606970c1d0b9e99/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f646a616e676f2d73656c656e69756d2d746573742e737667\">\n<img alt=\"Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed31879bbaaaec7054c73156fc4d64faf0079c9f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f646a616e676f2d73656c656e69756d2d746573742e737667\">\n<a href=\"https://pypi.python.org/pypi/django-selenium-test\" rel=\"nofollow\"><img alt=\"Latest version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/412b960563b085bbd2d64c70cf707baca462aa13/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d73656c656e69756d2d746573742e737667\"></a></p>\n<p>Write Selenium tests on Django 2.x and Djano 3.0 and Python 3.8.\nBased on <a href=\"https://github.com/aptiko/django-selenium-clean\" rel=\"nofollow\">django-selenium-clean</a>.</p>\n<p>This documentation is currently a work-in-progress.</p>\n<h2>Tutorial</h2>\n<h3>Installation</h3>\n<p>In your virtualenv:</p>\n<pre>pip install django-selenium-test\n</pre>\n<h3>Setting up</h3>\n<ul>\n<li>Create a new django project and app:</li>\n</ul>\n<pre>django-admin startproject foo\n<span class=\"nb\">cd</span> foo\npython manage.py startapp bar\n</pre>\n<ul>\n<li>\n<p>In <code>foo/settings.py</code>, add <code>'bar'</code> to <code>INSTALLED_APPS</code></p>\n</li>\n<li>\n<p>In <code>foo/urls.py</code>, add <code>from bar.views import SimpleView</code> to the\ntop, and add <code>url(r'^$', SimpleView.as_view())</code> to <code>urlpatterns</code>.</p>\n</li>\n<li>\n<p>Add the SimpleView to <code>bar/views.py</code>:</p>\n</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">textwrap</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.base</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">response_text</span> <span class=\"o\">=</span> <span class=\"n\">textwrap</span><span class=\"o\">.</span><span class=\"n\">dedent</span><span class=\"p\">(</span><span class=\"s1\">'''</span><span class=\"se\">\\</span>\n<span class=\"s1\">            &lt;html&gt;</span>\n<span class=\"s1\">            &lt;head&gt;</span>\n<span class=\"s1\">            &lt;title&gt;Greetings to the world&lt;/title&gt;</span>\n<span class=\"s1\">            &lt;/head&gt;</span>\n<span class=\"s1\">            &lt;body&gt;</span>\n<span class=\"s1\">            &lt;h1 id=\"earth\"&gt;Greetings to earth&lt;/h1&gt;</span>\n<span class=\"s1\">            &lt;h1 id=\"world\" style=\"display: none;\"&gt;Hello, world!&lt;/h1&gt;</span>\n\n<span class=\"s1\">            &lt;p&gt;We have some javascript here so that when you click the button</span>\n<span class=\"s1\">                the heading above toggles between \"Greetings to earth\" and</span>\n<span class=\"s1\">                \"Hello, world!\".&lt;/p&gt;</span>\n\n<span class=\"s1\">            &lt;button onclick=\"toggle()\"&gt;Toggle&lt;/button&gt;</span>\n\n<span class=\"s1\">            &lt;script type=\"text/javascript\"&gt;</span>\n<span class=\"s1\">                toggle = function () {</span>\n<span class=\"s1\">                    var heading_earth = document.getElementById(\"earth\");</span>\n<span class=\"s1\">                    var heading_world = document.getElementById(\"world\");</span>\n<span class=\"s1\">                    if (heading_earth.style.display == 'none') {</span>\n<span class=\"s1\">                        heading_world.style.display = 'none';</span>\n<span class=\"s1\">                        heading_earth.style.display = 'block';</span>\n<span class=\"s1\">                    } else {</span>\n<span class=\"s1\">                        heading_earth.style.display = 'none';</span>\n<span class=\"s1\">                        heading_world.style.display = 'block';</span>\n<span class=\"s1\">                    }</span>\n<span class=\"s1\">                }</span>\n<span class=\"s1\">            &lt;/script&gt;</span>\n<span class=\"s1\">            &lt;/body&gt;</span>\n<span class=\"s1\">            &lt;/html&gt;</span>\n<span class=\"s1\">        '''</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">response_text</span><span class=\"p\">)</span>\n</pre>\n<p>We're done setting up. If you now run <code>python manage.py runserver</code>\nin your browser and visit <a href=\"http://localhost:8000/\" rel=\"nofollow\">http://localhost:8000/</a> in your browser, you\nshould see the simple page. Let's now proceed to write a test for it.</p>\n<h3>Writing the test</h3>\n<p>Modify <code>bar/tests.py</code> so that it has the following contents:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">unittest</span> <span class=\"kn\">import</span> <span class=\"n\">skipUnless</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django_selenium_test</span> <span class=\"kn\">import</span> <span class=\"n\">selenium</span><span class=\"p\">,</span> <span class=\"n\">SeleniumTestCase</span><span class=\"p\">,</span> <span class=\"n\">PageElement</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.common.by</span> <span class=\"kn\">import</span> <span class=\"n\">By</span>\n\n\n<span class=\"nd\">@skipUnless</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">,</span> <span class=\"s1\">'SELENIUM_WEBDRIVERS'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">),</span>\n            <span class=\"s2\">\"Selenium is unconfigured\"</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">HelloTestCase</span><span class=\"p\">(</span><span class=\"n\">SeleniumTestCase</span><span class=\"p\">):</span>\n\n    <span class=\"n\">heading_earth</span> <span class=\"o\">=</span> <span class=\"n\">PageElement</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"s1\">'earth'</span><span class=\"p\">)</span>\n    <span class=\"n\">heading_world</span> <span class=\"o\">=</span> <span class=\"n\">PageElement</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span> <span class=\"s1\">'world'</span><span class=\"p\">)</span>\n    <span class=\"n\">button</span> <span class=\"o\">=</span> <span class=\"n\">PageElement</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">CSS_SELECTOR</span><span class=\"p\">,</span> <span class=\"s1\">'button'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_toggle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Visit the page</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">live_server_url</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check that the earth heading is visible</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">heading_earth</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">heading_world</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># Toggle and check the new condition</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">heading_world</span><span class=\"o\">.</span><span class=\"n\">wait_until_is_displayed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">heading_earth</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">heading_world</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># Toggle again and re-check</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">heading_earth</span><span class=\"o\">.</span><span class=\"n\">wait_until_is_displayed</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTrue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">heading_earth</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">heading_world</span><span class=\"o\">.</span><span class=\"n\">is_displayed</span><span class=\"p\">())</span>\n</pre>\n<h3>Executing the test</h3>\n<p>Try <code>python manage.py test</code> and it will skip the test because\nselenium is unconfigured. You need to configure it by specifying\n<code>SELENIUM_WEBDRIVERS</code> in <code>foo/settings.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_selenium_test.settings</span> <span class=\"kn\">import</span> <span class=\"n\">make_chrome_driver</span>\n\n<span class=\"n\">SELENIUM_WEBDRIVERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"n\">make_chrome_driver</span><span class=\"p\">([],</span> <span class=\"p\">{}),</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Now try again, and it should execute the test.</p>\n<h3>Advanced test running tricks</h3>\n<h4>Executing a test in many widths</h4>\n<p>Add this to your <code>foo/settings.py</code>:</p>\n<pre><span class=\"n\">SELENIUM_WIDTHS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">350</span><span class=\"p\">]</span>\n</pre>\n<p>This will result in executing all <code>SeleniumTestCase</code>'s three times,\none for each specified browser width. Useful for responsive designs.\nThe default is to run them on only one width, 1024.</p>\n<h4>Using many selenium drivers</h4>\n<p>You can have many <code>SELENIUM_WEBDRIVERS</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_selenium_test.settings</span> <span class=\"kn\">import</span> <span class=\"n\">make_chrome_driver</span><span class=\"p\">,</span> <span class=\"n\">make_firefox_driver</span>\n<span class=\"n\">SELENIUM_WEBDRIVERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"n\">make_chrome_driver</span><span class=\"p\">([],</span> <span class=\"p\">{})</span>\n    <span class=\"s1\">'firefox'</span><span class=\"p\">:</span> <span class=\"n\">make_firefox_driver</span><span class=\"p\">([],</span> <span class=\"p\">{})</span>\n<span class=\"p\">}</span>\n</pre>\n<p>By default, the <code>default</code> one is used. You can specify another using\nthe <code>SELENIUM_WEBDRIVER</code> environment variable:</p>\n<pre><span class=\"nv\">SELENIUM_WEBDRIVER</span><span class=\"o\">=</span>firefox python manage.py <span class=\"nb\">test</span>\n</pre>\n<h4>Running a headless browser</h4>\n<p>It can be very useful to run the selenium tests with a headless\nbrowser, that is, in an invisible browser window. For one thing, it\nis much faster.</p>\n<p>To achieve this, pass headless=True to the make_BRAND_driver() function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_selenium_test.settings</span> <span class=\"kn\">import</span> <span class=\"n\">make_chrome_driver</span><span class=\"p\">,</span> <span class=\"n\">make_firefox_driver</span>\n<span class=\"n\">SELENIUM_WEBDRIVERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'default'</span><span class=\"p\">:</span> <span class=\"n\">make_chrome_driver</span><span class=\"p\">([],</span> <span class=\"p\">{},</span> <span class=\"n\">headless</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"s1\">'firefox'</span><span class=\"p\">:</span> <span class=\"n\">make_firefox_driver</span><span class=\"p\">([],</span> <span class=\"p\">{},</span> <span class=\"n\">headless</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Using advanced integration tests</h4>\n<p>(Currently undocumented)</p>\n<h2>Reference</h2>\n<h3>SeleniumTestCase objects</h3>\n<p>.. code:: python</p>\n<p>from django_selenium_test import SeleniumTestCase</p>\n<p><code>SeleniumTestCase</code> is the same as Django's\n<code>StaticLiveServerTestCase</code> but it adds a little bit of Selenium\nfunctionality. Derive your Selenium tests from this class instead of\n<code>StaticLiveServerTestCase</code>.</p>\n<p>The most important feature of <code>SeleniumTestCase</code> is the <code>selenium</code>\nattribute.  Technically it is a wrapper around the selenium driver. In\npractice, you can think about it as the browser, or as the equivalent\nof Django's test client. It has all <code>selenium driver attributes and methods</code>_, but you will mostly use <code>get()</code>. It also has the\nfollowing additional methods:</p>\n<ul>\n<li>\n<p><code>self.selenium.login(**credentials)</code>,\n<code>self.selenium.force_login(user, base_url)</code>,\n<code>self.selenium.logout()</code></p>\n<p>Similar to the Django test client <code>login()</code>, <code>force_login()</code> and\n<code>logout()</code> methods.  <code>login()</code> returns <code>True</code> if login is\npossible; <code>False</code> if the provided credentials are incorrect, or the\nuser is inactive, or if the sessions framework is not available.</p>\n<p>The <code>force_login()</code> code was adapted from <a href=\"https://github.com/feffe/django-selenium-login/blob/master/seleniumlogin/__init__.py\" rel=\"nofollow\">django-selenium-login</a>,\nwhich is licensed under the MIT License.</p>\n</li>\n<li>\n<p><code>self.selenium.wait_until_n_windows(n, timeout=2)</code></p>\n<p>Useful when a Javascript action has caused the browser to open\nanother window. The typical usage is this:</p>\n</li>\n</ul>\n<pre><span class=\"n\">button_that_will_open_a_second_window</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">wait_until_n_windows</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">windows</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">window_handles</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">switch_to_window</span><span class=\"p\">(</span><span class=\"n\">windows</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"c1\"># continue testing</span>\n</pre>\n<p>If the timeout (in seconds) elapses and the number of browser\nwindows never becomes <code>n</code>, an <code>AssertionError</code> is raised.</p>\n<ul>\n<li><a href=\"http://selenium-python.readthedocs.org/api.html#module-selenium.webdriver.remote.webdriver\" rel=\"nofollow\">selenium driver attributes and methods</a></li>\n</ul>\n<h2>PageElement objects</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_selenium_test</span> <span class=\"kn\">import</span> <span class=\"n\">PageElement</span>\n</pre>\n<p><code>PageElement</code> is a lazy wrapper around WebElement_; it has all its\nproperties and methods. It is initialized with a locator_, but the\nelement is not actually located until needed. In addition to\nWebElement_ properties and methods, it has these:</p>\n<ul>\n<li>\n<p><code>PageElement.exists()</code>: Returns True if the element can be located.</p>\n</li>\n<li>\n<p><code>PageElement.wait_until_exists(timeout=10)</code></p>\n<p><code>PageElement.wait_until_not_exists(timeout=10)</code></p>\n<p><code>PageElement.wait_until_is_displayed(timeout=10)</code></p>\n<p><code>PageElement.wait_until_not_displayed(timeout=10)</code></p>\n<p><code>PageElement.wait_until_contains(text, timeout=10)</code></p>\n<p><code>PageElement.wait_until_not_contains(text, timeout=10)</code></p>\n<p>What these methods do should be self-explanatory from their name. The\nones ending in <code>contains</code> refer to whether the element contains the\nspecified text.  The methods raise an exception if there is a timeout.</p>\n</li>\n</ul>\n<ul>\n<li><a href=\"http://selenium-python.readthedocs.org/api.html#module-selenium.webdriver.remote.webelement\" rel=\"nofollow\">WebElement</a></li>\n<li><a href=\"http://selenium-python.readthedocs.org/api.html#locate-elements-by\" rel=\"nofollow\">locator</a></li>\n</ul>\n<h3>IntegrationTest objects</h3>\n<p>(Currently undocumented)</p>\n<h3>Running django-selenium-test's own unit tests</h3>\n<p>By default the unit tests will use Chrome::</p>\n<pre>./setup.py <span class=\"nb\">test</span>\n</pre>\n<p>Use the <code>SELENIUM_BROWSER</code> environment variable to use another browser:</p>\n<pre><span class=\"nv\">SELENIUM_BROWSER</span><span class=\"o\">=</span>firefox ./setup.py <span class=\"nb\">test</span>\n</pre>\n<h2>License</h2>\n<p>Licensed under the BSD 3-clause license; see <code>LICENSE.txt</code> for details.</p>\n\n          </div>"}, "last_serial": 7099290, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e7fbd2c2fea3e8e8ec89d266277b9a87", "sha256": "b5599f0a1e37c5b8a4f2e2201e670542a0a8ba4a8aba9851ac8cf196aac57137"}, "downloads": -1, "filename": "django_selenium_test-1.0.0-py3.8.egg", "has_sig": false, "md5_digest": "e7fbd2c2fea3e8e8ec89d266277b9a87", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 39235, "upload_time": "2020-04-15T10:21:58", "upload_time_iso_8601": "2020-04-15T10:21:58.066517Z", "url": "https://files.pythonhosted.org/packages/31/66/e939d187777a2ae063957dc8e3ade77a39292cb9fc32148b1b83a745c77d/django_selenium_test-1.0.0-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c0a9d81a20b17707e393f042c5ece40", "sha256": "0c78da4eabeed02a12653345c02367d2ebe0c7b298e5d6bc165cc78e6b28c103"}, "downloads": -1, "filename": "django-selenium-test-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9c0a9d81a20b17707e393f042c5ece40", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20753, "upload_time": "2020-04-15T10:21:55", "upload_time_iso_8601": "2020-04-15T10:21:55.634708Z", "url": "https://files.pythonhosted.org/packages/fe/4a/3444a0e5923b76815125b3b3a133c14b6c4e468a4bb2f525bee55cab3834/django-selenium-test-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "f10d6b10112bc7f97bddcf869efb830a", "sha256": "30126bee1cb702860298579740fac583b9a14d09351700baa87b5f3673775f60"}, "downloads": -1, "filename": "django_selenium_test-1.0.1-py3.8.egg", "has_sig": false, "md5_digest": "f10d6b10112bc7f97bddcf869efb830a", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 40447, "upload_time": "2020-04-15T12:39:16", "upload_time_iso_8601": "2020-04-15T12:39:16.112483Z", "url": "https://files.pythonhosted.org/packages/ca/f1/8dc9cba3a118cb6af79e6360ae35f795921c94bb11567a1888a43410dbfa/django_selenium_test-1.0.1-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a543025d7057bc585977bb580f922b1a", "sha256": "a9da1ac4efb43874ea59b53da60c344a43d76c337230012b72811ff47f690369"}, "downloads": -1, "filename": "django-selenium-test-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a543025d7057bc585977bb580f922b1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21838, "upload_time": "2020-04-15T12:39:14", "upload_time_iso_8601": "2020-04-15T12:39:14.405386Z", "url": "https://files.pythonhosted.org/packages/ce/ed/b1058909f4041b0086d20f6c3fdec2ee0572b6d16dd0329fc71ce88b5d03/django-selenium-test-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "8338dba855dbb05425b5ef76903c523d", "sha256": "d117e14483a6b10286c3a7c1ea2f5027d32e831155abdc5f2bfb0d6455f034df"}, "downloads": -1, "filename": "django_selenium_test-1.0.2-py3.8.egg", "has_sig": false, "md5_digest": "8338dba855dbb05425b5ef76903c523d", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 41995, "upload_time": "2020-04-15T15:39:47", "upload_time_iso_8601": "2020-04-15T15:39:47.240683Z", "url": "https://files.pythonhosted.org/packages/71/e6/caed845c5ae960db03201e1d336f26d12c97c24e351101d62020ae9d1d60/django_selenium_test-1.0.2-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "0266171d767bb15e9263b60f8cac1197", "sha256": "bf72d3a62458e1d29635dd267fae8a6f298e03f504790b5d4f9d1b65f326065c"}, "downloads": -1, "filename": "django-selenium-test-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0266171d767bb15e9263b60f8cac1197", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21962, "upload_time": "2020-04-15T15:39:45", "upload_time_iso_8601": "2020-04-15T15:39:45.852444Z", "url": "https://files.pythonhosted.org/packages/8b/57/b44fd8bc380a3ee4d108540d3f64d09a6fb271c02ddf658fcd8f0f82c1d6/django-selenium-test-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "eb915e69fa66281c07f5e7bad992d6f8", "sha256": "58227d3ea9a253244fc00705f4788eba8131a6bd218b6249d903d42099b726a6"}, "downloads": -1, "filename": "django_selenium_test-1.0.3-py3.8.egg", "has_sig": false, "md5_digest": "eb915e69fa66281c07f5e7bad992d6f8", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 42131, "upload_time": "2020-04-25T12:28:50", "upload_time_iso_8601": "2020-04-25T12:28:50.959511Z", "url": "https://files.pythonhosted.org/packages/fb/44/181e6e148cdeb71eb2eac2a7fd1730879588b48dc9f20a277e0f9ccb7a9a/django_selenium_test-1.0.3-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a20800efe212f05ea7476ca755174b1", "sha256": "f5c548659b4bb3e5419a01639e1e5b0676cdf388f899e49db3e9c8e5ce7f6205"}, "downloads": -1, "filename": "django-selenium-test-1.0.3.tar.gz", "has_sig": false, "md5_digest": "9a20800efe212f05ea7476ca755174b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22154, "upload_time": "2020-04-25T12:28:49", "upload_time_iso_8601": "2020-04-25T12:28:49.226814Z", "url": "https://files.pythonhosted.org/packages/e4/51/5ec46f5526ec50614b535177c304a8d5d1d4086bf3b8c778a87c355a193a/django-selenium-test-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eb915e69fa66281c07f5e7bad992d6f8", "sha256": "58227d3ea9a253244fc00705f4788eba8131a6bd218b6249d903d42099b726a6"}, "downloads": -1, "filename": "django_selenium_test-1.0.3-py3.8.egg", "has_sig": false, "md5_digest": "eb915e69fa66281c07f5e7bad992d6f8", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": null, "size": 42131, "upload_time": "2020-04-25T12:28:50", "upload_time_iso_8601": "2020-04-25T12:28:50.959511Z", "url": "https://files.pythonhosted.org/packages/fb/44/181e6e148cdeb71eb2eac2a7fd1730879588b48dc9f20a277e0f9ccb7a9a/django_selenium_test-1.0.3-py3.8.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a20800efe212f05ea7476ca755174b1", "sha256": "f5c548659b4bb3e5419a01639e1e5b0676cdf388f899e49db3e9c8e5ce7f6205"}, "downloads": -1, "filename": "django-selenium-test-1.0.3.tar.gz", "has_sig": false, "md5_digest": "9a20800efe212f05ea7476ca755174b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22154, "upload_time": "2020-04-25T12:28:49", "upload_time_iso_8601": "2020-04-25T12:28:49.226814Z", "url": "https://files.pythonhosted.org/packages/e4/51/5ec46f5526ec50614b535177c304a8d5d1d4086bf3b8c778a87c355a193a/django-selenium-test-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:39 2020"}