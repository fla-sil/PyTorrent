{"info": {"author": "Alberto Pettarin", "author_email": "alberto@albertopettarin.it", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Documentation", "Topic :: Education", "Topic :: Education :: Computer Aided Instruction (CAI)", "Topic :: Multimedia :: Sound/Audio :: Analysis", "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis", "Topic :: Multimedia :: Sound/Audio :: Speech", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Human Machine Interfaces", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Software Development :: Internationalization", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Localization", "Topic :: Text Processing", "Topic :: Text Processing :: Linguistic", "Topic :: Text Processing :: Markup", "Topic :: Utilities"], "description": "ipapy\n=====\n\n**ipapy** is a Python module to work with International Phonetic\nAlphabet (IPA) strings.\n\n-  Version: 0.0.9\n-  Date: 2019-05-05\n-  Developer: `Alberto Pettarin <http://www.albertopettarin.it/>`__\n-  License: the MIT License (MIT)\n-  Contact: `click here <http://www.albertopettarin.it/contact.html>`__\n-  Links: `GitHub <https://github.com/pettarin/ipapy>`__ -\n   `PyPI <https://pypi.python.org/pypi/ipapy>`__\n\nInstallation\n------------\n\n.. code:: bash\n\n   $ pip install ipapy\n\nor\n\n.. code:: bash\n\n   $ git clone https://github.com/pettarin/ipapy.git\n   $ cd ipapy\n\nUsage\n-----\n\nAs A Python Module\n~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n   ###########\n   # IMPORTS #\n   ###########\n   from ipapy import UNICODE_TO_IPA\n   from ipapy import is_valid_ipa\n   from ipapy.ipachar import IPAConsonant\n   from ipapy.ipachar import IPAVowel\n   from ipapy.ipastring import IPAString\n\n\n   ###########\n   # IPAChar #\n   ###########\n\n   # Def.: an IPAChar is an IPA letter or diacritic/suprasegmental/tone mark\n\n   # create IPAChar from its Unicode representation\n   c1 = UNICODE_TO_IPA[u\"a\"]                   # vowel open front unrounded\n   c2 = UNICODE_TO_IPA[u\"e\"]                   # vowel close-mid front unrounded\n   c3 = UNICODE_TO_IPA[u\"\\u03B2\"]              # consonant voiced bilabial non-sibilant-fricative\n   tS1 = UNICODE_TO_IPA[u\"t\u0361\u0283\"]                 # consonant voiceless palato-alveolar sibilant-affricate\n   tS2 = UNICODE_TO_IPA[u\"t\u035c\u0283\"]                 # consonant voiceless palato-alveolar sibilant-affricate\n   tS3 = UNICODE_TO_IPA[u\"t\u0283\"]                 # consonant voiceless palato-alveolar sibilant-affricate\n   tS4 = UNICODE_TO_IPA[u\"\u02a7\"]                  # consonant voiceless palato-alveolar sibilant-affricate\n   tS5 = UNICODE_TO_IPA[u\"\\u0074\\u0361\\u0283\"] # consonant voiceless palato-alveolar sibilant-affricate\n   tS6 = UNICODE_TO_IPA[u\"\\u0074\\u035C\\u0283\"] # consonant voiceless palato-alveolar sibilant-affricate\n   tS7 = UNICODE_TO_IPA[u\"\\u0074\\u0283\"]       # consonant voiceless palato-alveolar sibilant-affricate\n   tS8 = UNICODE_TO_IPA[u\"\\u02A7\"]             # consonant voiceless palato-alveolar sibilant-affricate\n   c1 == c2    # False\n   c1 == c3    # False\n   c1 == tS1   # False\n   tS1 == tS2  # True (they both point to the same IPAChar object)\n   tS1 == tS3  # True (idem)\n   tS1 == tS4  # True (idem)\n   tS1 == tS5  # True (idem)\n   tS1 == tS6  # True (idem)\n   tS1 == tS7  # True (idem)\n   tS1 == tS8  # True (idem)\n\n   # create custom IPAChars\n   my_a1 = IPAVowel(name=\"my_a_1\", descriptors=u\"open front unrounded\", unicode_repr=u\"a\")\n   my_a2 = IPAVowel(name=\"my_a_2\", descriptors=[u\"open\", \"front\", \"unrounded\"], unicode_repr=u\"a\")\n   my_a3 = IPAVowel(name=\"my_a_3\", height=u\"open\", backness=u\"front\", roundness=u\"unrounded\", unicode_repr=u\"a\")\n   my_a4 = IPAVowel(name=\"my_a_4\", descriptors=[u\"low\", u\"fnt\", \"unr\"], unicode_repr=u\"a\")\n   my_ee = IPAVowel(name=\"my_e_1\", descriptors=u\"close-mid front unrounded\", unicode_repr=u\"e\")\n   my_b1 = IPAConsonant(name=\"bilabial fricative\", descriptors=u\"voiced bilabial non-sibilant-fricative\", unicode_repr=u\"\\u03B2\")\n   my_b2 = IPAConsonant(name=\"bf\", voicing=u\"voiced\", place=u\"bilabial\", manner=u\"non-sibilant-fricative\", unicode_repr=u\"\\u03B2\")\n   my_tS = IPAConsonant(name=\"tS\", voicing=u\"voiceless\", place=u\"palato-alveolar\", manner=u\"sibilant-affricate\", unicode_repr=u\"t\u0361\u0283\")\n   my_a1 == my_a2                  # False (two different objects)\n   my_a1 == c1                     # False (two different objects)\n   my_a1 == UNICODE_TO_IPA[\"a\"]    # False (two different objects)\n\n   # associate non-standard Unicode representation\n   my_aa = IPAVowel(name=\"a special\", descriptors=[u\"low\", u\"fnt\", u\"unr\"], unicode_repr=u\"a{*}\")\n   print(my_aa)    # \"a{*}\"\n\n   # equality vs. equivalence\n   my_tS == tS1                # False (my_tS is a different object than tS1)\n   my_tS.is_equivalent(tS1)    # True  (my_tS is equivalent to tS1...)\n   tS1.is_equivalent(my_tS)    # True  (... and vice versa)\n\n   # compare IPAChar objects\n   my_a1.is_equivalent(my_a2)  # True\n   my_a1.is_equivalent(my_a3)  # True\n   my_a1.is_equivalent(my_a4)  # True\n   my_a1.is_equivalent(my_ee)  # False\n   my_a1.is_equivalent(my_b1)  # False\n   my_b1.is_equivalent(my_b2)  # True\n   my_b1.is_equivalent(my_tS)  # False\n\n   # compare IPAChar and a Unicode string\n   my_b1.is_equivalent(u\"\\u03B2\")  # True\n   my_b1.is_equivalent(u\"\u03b2\")       # True\n   my_b1.is_equivalent(u\"b\")       # False\n   my_tS.is_equivalent(u\"tS\")      # False\n   my_tS.is_equivalent(u\"t\u0283\")      # False (missing the combining diacritic)\n   my_tS.is_equivalent(u\"t\u0361\u0283\")      # True (has combining diacritic)\n\n   # compare IPAChar and a string listing descriptors\n   my_a1.is_equivalent(u\"open front unrounded\")                                # False (missing 'vowel')\n   my_a1.is_equivalent(u\"open front unrounded vowel\")                          # True\n   my_a1.is_equivalent(u\"low fnt unr vwl\")                                     # True (known abbreviations are good as well)\n   my_ee.is_equivalent(u\"open front unrounded vowel\")                          # False\n   my_b1.is_equivalent(u\"voiced bilabial non-sibilant-fricative\")              # False (missing 'consonant')\n   my_b1.is_equivalent(u\"voiced bilabial non-sibilant-fricative consonant\")    # True\n   my_b1.is_equivalent(u\"consonant non-sibilant-fricative bilabial voiced\")    # True (the order does not matter)\n   my_b1.is_equivalent(u\"consonant non-sibilant-fricative bilabial voiceless\") # False\n\n   # compare IPAChar and list of descriptors\n   my_a1.is_equivalent([u\"open\", u\"front\", u\"unrounded\"])              # False\n   my_a1.is_equivalent([u\"vowel\", u\"open\", u\"front\", u\"unrounded\"])    # True\n   my_a1.is_equivalent([u\"open\", u\"unrounded\", u\"vowel\", u\"front\"])    # True\n   my_a1.is_equivalent([u\"low\", u\"fnt\", u\"unr\", u\"vwl\"])               # True\n\n\n   #############\n   # IPAString #\n   #############\n\n   # Def.: an IPAString is a list of IPAChar objects\n\n   # check if Unicode string contains only IPA valid characters\n   s_uni = u\"\u0259\u02c8ki\u02d0n \u00e6\u02cck\u00e6n\u02c8\u03b8\u0251.l\u0259.d\u0361\u0292i\"   # Unicode string of the IPA pronunciation for \"achene acanthology\"\n   is_valid_ipa(s_uni)                 # True\n   is_valid_ipa(u\"LoL\")                # False (uppercase letter L is not IPA valid)\n\n   # create IPAString from list of IPAChar objects\n   new_s_ipa = IPAString(ipa_chars=[c3, c2, tS1, c1])\n\n   # create IPAString from Unicode string\n   s_ipa = IPAString(unicode_string=s_uni)\n\n   # IPAString is similar to regular Python string object\n   print(s_ipa)                            # \"\u0259\u02c8ki\u02d0n \u00e6\u02cck\u00e6n\u02c8\u03b8\u0251.l\u0259.d\u0361\u0292i\"\n   len(s_ipa)                              # 21\n   s_ipa[0]                                # (first IPA char)\n   s_ipa[5:8]                              # (6th, 7th, 8th IPA chars)\n   s_ipa[19:]                              # (IPA chars from the 20th)\n   s_ipa[-1]                               # (last IPA char)\n   len(new_s_ipa)                          # 4\n   new_s_ipa.append(UNICODE_TO_IPA[u\"a\"])  # (append IPA char \"a\")\n   len(new_s_ipa)                          # 5\n   new_s_ipa.append(UNICODE_TO_IPA[u\"t\u0361\u0283\"]) # (append IPA char \"t\u0361\u0283\")\n   len(new_s_ipa)                          # 6\n   new_s_ipa.extend(s_ipa)                 # (append s_ipa to new_s_ipa)\n   len(new_s_ipa)                          # 27\n   double = s_ipa + new_s_ipa              # (concatenate s_ipa and new_s_ipa)\n   len(double)                             # 48\n\n   # new IPAString objects containing only...\n   print(s_ipa.consonants)                 # \"knkn\u03b8ld\u0361\u0292\"                (consonants)\n   print(s_ipa.vowels)                     # \"\u0259i\u00e6\u00e6\u0251\u0259i\"                 (vowels)\n   print(s_ipa.letters)                    # \"\u0259kin\u00e6k\u00e6n\u03b8\u0251l\u0259d\u0361\u0292i\"         (vowels and consonants)\n   print(s_ipa.cns_vwl)                    # \"\u0259kin\u00e6k\u00e6n\u03b8\u0251l\u0259d\u0361\u0292i\"         (vowels and consonants)\n   print(s_ipa.cns_vwl_pstr)               # \"\u0259\u02c8kin\u00e6k\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"       (  + primary stress marks)\n   print(s_ipa.cns_vwl_pstr_long)          # \"\u0259\u02c8ki\u02d0n\u00e6k\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"      (    + long marks)\n   print(s_ipa.cns_vwl_str)                # \"\u0259\u02c8kin\u00e6\u02cck\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"      (  + stress marks)\n   print(s_ipa.cns_vwl_str_len)            # \"\u0259\u02c8ki\u02d0n\u00e6\u02cck\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"     (    + length marks)\n   print(s_ipa.cns_vwl_str_len_wb)         # \"\u0259\u02c8ki\u02d0n \u00e6\u02cck\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"    (      + word breaks)\n   print(s_ipa.cns_vwl_str_len_wb_sb)      # \"\u0259\u02c8ki\u02d0n \u00e6\u02cck\u00e6n\u02c8\u03b8\u0251.l\u0259.d\u0361\u0292i\"  (        + syllable breaks)\n   cns = s_ipa.consonants                  # (store new IPA string)\n   cns == s_ipa.consonants                 # False (two different objects)\n   cns.is_equivalent(s_ipa.consonants)     # True\n   cns.is_equivalent(s_ipa)                # False\n\n   # print representation and name of all IPAChar objects in IPAString\n   for c in s_ipa:\n       print(u\"%s\\t%s\" % (c, c.name))\n   # \u0259 vowel mid central unrounded\n   # \u02c8 suprasegmental primary-stress\n   # k consonant voiceless velar plosive\n   # i vowel close front unrounded\n   # \u02d0 suprasegmental long\n   # n consonant voiced alveolar nasal\n   #   suprasegmental word-break\n   # \u00e6 vowel near-open front unrounded\n   # \u02cc suprasegmental secondary-stress\n   # k consonant voiceless velar plosive\n   # \u00e6 vowel near-open front unrounded\n   # n consonant voiced alveolar nasal\n   # \u02c8 suprasegmental primary-stress\n   # \u03b8 consonant voiceless dental non-sibilant-fricative\n   # \u0251 vowel open back unrounded\n   # . suprasegmental syllable-break\n   # l consonant voiced alveolar lateral-approximant\n   # \u0259 vowel mid central unrounded\n   # . suprasegmental syllable-break\n   # d\u0361\u0292   consonant voiced palato-alveolar sibilant-affricate\n   # i vowel close front unrounded\n\n   # compare IPAString objects\n   s_ipa_d = IPAString(unicode_string=u\"diff\")\n   s_ipa_1 = IPAString(unicode_string=u\"at\u0361\u0283e\")\n   s_ipa_2 = IPAString(unicode_string=u\"a\u02a7e\")\n   s_ipa_3 = IPAString(unicode_string=u\"at\u0361\u0283e\", single_char_parsing=True)\n   s_ipa_d == s_ipa_1              # False\n   s_ipa_1 == s_ipa_2              # False (different objects)\n   s_ipa_1 == s_ipa_3              # False (different objects)\n   s_ipa_2 == s_ipa_3              # False (different objects)\n   s_ipa_d.is_equivalent(s_ipa_1)  # False\n   s_ipa_1.is_equivalent(s_ipa_2)  # True\n   s_ipa_2.is_equivalent(s_ipa_1)  # True\n   s_ipa_1.is_equivalent(s_ipa_3)  # True\n   s_ipa_2.is_equivalent(s_ipa_3)  # True\n\n   # compare IPAString and list of IPAChar objects\n   s_ipa_1.is_equivalent([my_a1, my_tS, my_ee])    # True\n\n   # compare IPAString and Unicode string\n   s_ipa_d.is_equivalent(u\"diff\")                  # True\n   s_ipa_1.is_equivalent(u\"atse\")                  # False\n   s_ipa_1.is_equivalent(u\"atSe\")                  # False\n   s_ipa_1.is_equivalent(u\"at\u0361\u0283e\")                  # True\n   s_ipa_1.is_equivalent(u\"at\u035c\u0283e\")                  # True\n   s_ipa_1.is_equivalent(u\"a\u02a7e\")                   # True\n   s_ipa_1.is_equivalent(u\"at\u0361\u0283eLOL\", ignore=True)  # True (ignore chars non IPA valid)\n   s_ipa_1.is_equivalent(u\"at\u0361\u0283eLoL\", ignore=True)  # False (ignore chars non IPA valid, note extra \"o\")\n\n\n   ########################\n   # CONVERSION FUNCTIONS #\n   ########################\n   from ipapy.kirshenbaummapper import KirshenbaumMapper\n   kmapper = KirshenbaumMapper()                                    # mapper to Kirshenbaum ASCII IPA\n   s_k_ipa = kmapper.map_ipa_string(s_ipa)                          # u\"@'ki:n#&,k&n'TA#l@#dZi\"\n   s_k_uni = kmapper.map_unicode_string(s_uni)                      # u\"@'ki:n#&,k&n'TA#l@#dZi\"\n   s_k_ipa == s_k_uni                                               # True\n   s_k_lis = kmapper.map_unicode_string(s_uni, return_as_list=True) # [u'@', u\"'\", u'k', u'i', u':', u'n', u'#', u'&', u',', u'k', u'&', u'n', u\"'\", u'T', u'A', u'#', u'l', u'@', u'#', u'dZ', u'i']\n\n   from ipapy.arpabetmapper import ARPABETMapper\n   amapper = ARPABETMapper()                                                    # mapper to ARPABET ASCII IPA (stress marks not supported yet)\n   s_a = amapper.map_unicode_string(u\"p\u0279u\u02d0f\")                                   # error: long suprasegmental not mapped\n   s_a = amapper.map_unicode_string(u\"p\u0279u\u02d0f\", ignore=True)                      # u\"PRUWF\"\n   s_a = amapper.map_unicode_string(u\"p\u0279u\u02d0f\", ignore=True, return_as_list=True) # [u'P', u'R', u'UW', u'F']\n\nAs A Command Line Tool\n~~~~~~~~~~~~~~~~~~~~~~\n\n**ipapy** comes with a command line tool to perform operations on a\ngiven Unicode UTF-8 encoded string, representing an IPA string.\nTherefore, it is recommended to run it on a shell supporting UTF-8.\n\nCurrently, the supported operations are:\n\n-  ``canonize``: canonize the Unicode representation of the IPA string\n-  ``chars``: list all IPA characters appearing in the IPA string\n-  ``check``: check if the given Unicode string is IPA valid\n-  ``clean``: remove characters that are not IPA valid\n-  ``u2a``: print the corresponding ARPABET (ASCII IPA) string\n-  ``u2k``: print the corresponding Kirshenbaum (ASCII IPA) string\n\nRun with the ``--help`` parameter to list all the available options:\n\n.. code:: bash\n\n   $ python -m ipapy --help\n\n   usage: __main__.py [-h] [-i] [-p] [--separator [SEPARATOR]] [-s] [-u]\n                      command string\n\n   ipapy perform a command on the given IPA/Unicode string\n\n   positional arguments:\n     command               [canonize|chars|check|clean|u2a|u2k]\n     string                String to canonize, check, clean, or convert\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -i, --ignore          Ignore Unicode characters that are not IPA valid\n     -p, --print-invalid   Print Unicode characters that are not IPA valid\n     --separator [SEPARATOR]\n                           Print IPA chars separated by this character (default:\n                           '')\n     -s, --single-char-parsing\n                           Perform single character parsing instead of maximal\n                           parsing\n     -u, --unicode         Print each Unicode character that is not IPA valid\n                           with its Unicode codepoint and name\n\nExamples:\n\n.. code:: bash\n\n   $ python -m ipapy canonize \"e\u02a7iu\"\n   et\u0361\u0283iu\n\n   $ python -m ipapy canonize \"e\u02a7iu\" --separator \" \"\n   e t\u0361\u0283 i u\n\n   $ python -m ipapy chars \"e\u02a7iu\"\n   'e' vowel close-mid front unrounded (U+0065)\n   't\u0361\u0283'   consonant voiceless palato-alveolar sibilant-affricate (U+0074 U+0361 U+0283)\n   'i' vowel close front unrounded (U+0069)\n   'u' vowel close back rounded (U+0075)\n\n   $ python -m ipapy chars \"et\u0361\u0283iu\"\n   'e' vowel close-mid front unrounded (U+0065)\n   't\u0361\u0283'   consonant voiceless palato-alveolar sibilant-affricate (U+0074 U+0361 U+0283)\n   'i' vowel close front unrounded (U+0069)\n   'u' vowel close back rounded (U+0075)\n\n   $ python -m ipapy chars \"et\u0361\u0283iu\" -s\n   'e' vowel close-mid front unrounded (U+0065)\n   't' consonant voiceless alveolar plosive (U+0074)\n   '\u0361' diacritic tie-bar-above (U+0361)\n   '\u0283' consonant voiceless palato-alveolar sibilant-fricative (U+0283)\n   'i' vowel close front unrounded (U+0069)\n   'u' vowel close back rounded (U+0075)\n\n   $ python -m ipapy check \"e\u02a7iu\"\n   True\n\n   $ python -m ipapy check \"LoL\"\n   False\n\n   $ python -m ipapy check \"LoL\" -p\n   False\n   LL\n\n   $ python -m ipapy check \"LoLOL\" -p -u\n   False\n   LLOL\n   'L' 0x4c    LATIN CAPITAL LETTER L\n   'O' 0x4f    LATIN CAPITAL LETTER O\n\n   $ python -m ipapy clean \"/e\u02a7iu/\"\n   e\u02a7iu\n\n   $ python -m ipapy u2k \"e\u02a7iu\"\n   etSiu\n\n   $ python -m ipapy u2k \"eTa\"\n   The given string contains characters not IPA valid. Use the 'ignore' option to ignore them.\n\n   $ python -m ipapy u2k \"eTa\" -i\n   ea\n\n   $ python -m ipapy u2a \"e\u02a7iu\" --separator \" \"\n   EH CH IH UW\n\nUnit Testing\n------------\n\n.. code:: bash\n\n   $ python run_all_unit_tests.py\n\nLicense\n-------\n\n**ipapy** is released under the MIT License.\n\nAcknowledgments\n---------------\n\n-  Bram Vanroy provided a fix to ``setup.py`` for Windows users\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pettarin/ipapy", "keywords": "ipapy,International Phonetic Alphabet,IPA,ASCII IPA,ASCIIIPA,ASCII-IPA,Kirshenbaum,Kirshenbaum IPA,Unicode", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "ipapy", "package_url": "https://pypi.org/project/ipapy/", "platform": "", "project_url": "https://pypi.org/project/ipapy/", "project_urls": {"Homepage": "https://github.com/pettarin/ipapy"}, "release_url": "https://pypi.org/project/ipapy/0.0.9.0/", "requires_dist": null, "requires_python": "", "summary": "ipapy is a Python module to work with IPA strings", "version": "0.0.9.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>ipapy</strong> is a Python module to work with International Phonetic\nAlphabet (IPA) strings.</p>\n<ul>\n<li>Version: 0.0.9</li>\n<li>Date: 2019-05-05</li>\n<li>Developer: <a href=\"http://www.albertopettarin.it/\" rel=\"nofollow\">Alberto Pettarin</a></li>\n<li>License: the MIT License (MIT)</li>\n<li>Contact: <a href=\"http://www.albertopettarin.it/contact.html\" rel=\"nofollow\">click here</a></li>\n<li>Links: <a href=\"https://github.com/pettarin/ipapy\" rel=\"nofollow\">GitHub</a> -\n<a href=\"https://pypi.python.org/pypi/ipapy\" rel=\"nofollow\">PyPI</a></li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install ipapy\n</pre>\n<p>or</p>\n<pre>$ git clone https://github.com/pettarin/ipapy.git\n$ <span class=\"nb\">cd</span> ipapy\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"as-a-python-module\">\n<h3>As A Python Module</h3>\n<pre><span class=\"c1\">###########</span>\n<span class=\"c1\"># IMPORTS #</span>\n<span class=\"c1\">###########</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ipapy</span> <span class=\"kn\">import</span> <span class=\"n\">UNICODE_TO_IPA</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ipapy</span> <span class=\"kn\">import</span> <span class=\"n\">is_valid_ipa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ipapy.ipachar</span> <span class=\"kn\">import</span> <span class=\"n\">IPAConsonant</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ipapy.ipachar</span> <span class=\"kn\">import</span> <span class=\"n\">IPAVowel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ipapy.ipastring</span> <span class=\"kn\">import</span> <span class=\"n\">IPAString</span>\n\n\n<span class=\"c1\">###########</span>\n<span class=\"c1\"># IPAChar #</span>\n<span class=\"c1\">###########</span>\n\n<span class=\"c1\"># Def.: an IPAChar is an IPA letter or diacritic/suprasegmental/tone mark</span>\n\n<span class=\"c1\"># create IPAChar from its Unicode representation</span>\n<span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span>                   <span class=\"c1\"># vowel open front unrounded</span>\n<span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"e\"</span><span class=\"p\">]</span>                   <span class=\"c1\"># vowel close-mid front unrounded</span>\n<span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\u03B2</span><span class=\"s2\">\"</span><span class=\"p\">]</span>              <span class=\"c1\"># consonant voiced bilabial non-sibilant-fricative</span>\n<span class=\"n\">tS1</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"t\u0361\u0283\"</span><span class=\"p\">]</span>                 <span class=\"c1\"># consonant voiceless palato-alveolar sibilant-affricate</span>\n<span class=\"n\">tS2</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"t\u035c\u0283\"</span><span class=\"p\">]</span>                 <span class=\"c1\"># consonant voiceless palato-alveolar sibilant-affricate</span>\n<span class=\"n\">tS3</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"t\u0283\"</span><span class=\"p\">]</span>                 <span class=\"c1\"># consonant voiceless palato-alveolar sibilant-affricate</span>\n<span class=\"n\">tS4</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"\u02a7\"</span><span class=\"p\">]</span>                  <span class=\"c1\"># consonant voiceless palato-alveolar sibilant-affricate</span>\n<span class=\"n\">tS5</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\u0074\\u0361\\u0283</span><span class=\"s2\">\"</span><span class=\"p\">]</span> <span class=\"c1\"># consonant voiceless palato-alveolar sibilant-affricate</span>\n<span class=\"n\">tS6</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\u0074\\u035C\\u0283</span><span class=\"s2\">\"</span><span class=\"p\">]</span> <span class=\"c1\"># consonant voiceless palato-alveolar sibilant-affricate</span>\n<span class=\"n\">tS7</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\u0074\\u0283</span><span class=\"s2\">\"</span><span class=\"p\">]</span>       <span class=\"c1\"># consonant voiceless palato-alveolar sibilant-affricate</span>\n<span class=\"n\">tS8</span> <span class=\"o\">=</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\u02A7</span><span class=\"s2\">\"</span><span class=\"p\">]</span>             <span class=\"c1\"># consonant voiceless palato-alveolar sibilant-affricate</span>\n<span class=\"n\">c1</span> <span class=\"o\">==</span> <span class=\"n\">c2</span>    <span class=\"c1\"># False</span>\n<span class=\"n\">c1</span> <span class=\"o\">==</span> <span class=\"n\">c3</span>    <span class=\"c1\"># False</span>\n<span class=\"n\">c1</span> <span class=\"o\">==</span> <span class=\"n\">tS1</span>   <span class=\"c1\"># False</span>\n<span class=\"n\">tS1</span> <span class=\"o\">==</span> <span class=\"n\">tS2</span>  <span class=\"c1\"># True (they both point to the same IPAChar object)</span>\n<span class=\"n\">tS1</span> <span class=\"o\">==</span> <span class=\"n\">tS3</span>  <span class=\"c1\"># True (idem)</span>\n<span class=\"n\">tS1</span> <span class=\"o\">==</span> <span class=\"n\">tS4</span>  <span class=\"c1\"># True (idem)</span>\n<span class=\"n\">tS1</span> <span class=\"o\">==</span> <span class=\"n\">tS5</span>  <span class=\"c1\"># True (idem)</span>\n<span class=\"n\">tS1</span> <span class=\"o\">==</span> <span class=\"n\">tS6</span>  <span class=\"c1\"># True (idem)</span>\n<span class=\"n\">tS1</span> <span class=\"o\">==</span> <span class=\"n\">tS7</span>  <span class=\"c1\"># True (idem)</span>\n<span class=\"n\">tS1</span> <span class=\"o\">==</span> <span class=\"n\">tS8</span>  <span class=\"c1\"># True (idem)</span>\n\n<span class=\"c1\"># create custom IPAChars</span>\n<span class=\"n\">my_a1</span> <span class=\"o\">=</span> <span class=\"n\">IPAVowel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my_a_1\"</span><span class=\"p\">,</span> <span class=\"n\">descriptors</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"open front unrounded\"</span><span class=\"p\">,</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_a2</span> <span class=\"o\">=</span> <span class=\"n\">IPAVowel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my_a_2\"</span><span class=\"p\">,</span> <span class=\"n\">descriptors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"open\"</span><span class=\"p\">,</span> <span class=\"s2\">\"front\"</span><span class=\"p\">,</span> <span class=\"s2\">\"unrounded\"</span><span class=\"p\">],</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_a3</span> <span class=\"o\">=</span> <span class=\"n\">IPAVowel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my_a_3\"</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"open\"</span><span class=\"p\">,</span> <span class=\"n\">backness</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"front\"</span><span class=\"p\">,</span> <span class=\"n\">roundness</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"unrounded\"</span><span class=\"p\">,</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_a4</span> <span class=\"o\">=</span> <span class=\"n\">IPAVowel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my_a_4\"</span><span class=\"p\">,</span> <span class=\"n\">descriptors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"low\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"fnt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"unr\"</span><span class=\"p\">],</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"a\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_ee</span> <span class=\"o\">=</span> <span class=\"n\">IPAVowel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"my_e_1\"</span><span class=\"p\">,</span> <span class=\"n\">descriptors</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"close-mid front unrounded\"</span><span class=\"p\">,</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"e\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_b1</span> <span class=\"o\">=</span> <span class=\"n\">IPAConsonant</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"bilabial fricative\"</span><span class=\"p\">,</span> <span class=\"n\">descriptors</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"voiced bilabial non-sibilant-fricative\"</span><span class=\"p\">,</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\u03B2</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_b2</span> <span class=\"o\">=</span> <span class=\"n\">IPAConsonant</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"bf\"</span><span class=\"p\">,</span> <span class=\"n\">voicing</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"voiced\"</span><span class=\"p\">,</span> <span class=\"n\">place</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"bilabial\"</span><span class=\"p\">,</span> <span class=\"n\">manner</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"non-sibilant-fricative\"</span><span class=\"p\">,</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\u03B2</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_tS</span> <span class=\"o\">=</span> <span class=\"n\">IPAConsonant</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"tS\"</span><span class=\"p\">,</span> <span class=\"n\">voicing</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"voiceless\"</span><span class=\"p\">,</span> <span class=\"n\">place</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"palato-alveolar\"</span><span class=\"p\">,</span> <span class=\"n\">manner</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"sibilant-affricate\"</span><span class=\"p\">,</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"t\u0361\u0283\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_a1</span> <span class=\"o\">==</span> <span class=\"n\">my_a2</span>                  <span class=\"c1\"># False (two different objects)</span>\n<span class=\"n\">my_a1</span> <span class=\"o\">==</span> <span class=\"n\">c1</span>                     <span class=\"c1\"># False (two different objects)</span>\n<span class=\"n\">my_a1</span> <span class=\"o\">==</span> <span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">]</span>    <span class=\"c1\"># False (two different objects)</span>\n\n<span class=\"c1\"># associate non-standard Unicode representation</span>\n<span class=\"n\">my_aa</span> <span class=\"o\">=</span> <span class=\"n\">IPAVowel</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"a special\"</span><span class=\"p\">,</span> <span class=\"n\">descriptors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"low\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"fnt\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"unr\"</span><span class=\"p\">],</span> <span class=\"n\">unicode_repr</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"a{*}\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">my_aa</span><span class=\"p\">)</span>    <span class=\"c1\"># \"a{*}\"</span>\n\n<span class=\"c1\"># equality vs. equivalence</span>\n<span class=\"n\">my_tS</span> <span class=\"o\">==</span> <span class=\"n\">tS1</span>                <span class=\"c1\"># False (my_tS is a different object than tS1)</span>\n<span class=\"n\">my_tS</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">tS1</span><span class=\"p\">)</span>    <span class=\"c1\"># True  (my_tS is equivalent to tS1...)</span>\n<span class=\"n\">tS1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">my_tS</span><span class=\"p\">)</span>    <span class=\"c1\"># True  (... and vice versa)</span>\n\n<span class=\"c1\"># compare IPAChar objects</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">my_a2</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">my_a3</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">my_a4</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">my_ee</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">my_b1</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">my_b2</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">my_tS</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n\n<span class=\"c1\"># compare IPAChar and a Unicode string</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\u03B2</span><span class=\"s2\">\"</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"\u03b2\"</span><span class=\"p\">)</span>       <span class=\"c1\"># True</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"b\"</span><span class=\"p\">)</span>       <span class=\"c1\"># False</span>\n<span class=\"n\">my_tS</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"tS\"</span><span class=\"p\">)</span>      <span class=\"c1\"># False</span>\n<span class=\"n\">my_tS</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"t\u0283\"</span><span class=\"p\">)</span>      <span class=\"c1\"># False (missing the combining diacritic)</span>\n<span class=\"n\">my_tS</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"t\u0361\u0283\"</span><span class=\"p\">)</span>      <span class=\"c1\"># True (has combining diacritic)</span>\n\n<span class=\"c1\"># compare IPAChar and a string listing descriptors</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"open front unrounded\"</span><span class=\"p\">)</span>                                <span class=\"c1\"># False (missing 'vowel')</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"open front unrounded vowel\"</span><span class=\"p\">)</span>                          <span class=\"c1\"># True</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"low fnt unr vwl\"</span><span class=\"p\">)</span>                                     <span class=\"c1\"># True (known abbreviations are good as well)</span>\n<span class=\"n\">my_ee</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"open front unrounded vowel\"</span><span class=\"p\">)</span>                          <span class=\"c1\"># False</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"voiced bilabial non-sibilant-fricative\"</span><span class=\"p\">)</span>              <span class=\"c1\"># False (missing 'consonant')</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"voiced bilabial non-sibilant-fricative consonant\"</span><span class=\"p\">)</span>    <span class=\"c1\"># True</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"consonant non-sibilant-fricative bilabial voiced\"</span><span class=\"p\">)</span>    <span class=\"c1\"># True (the order does not matter)</span>\n<span class=\"n\">my_b1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"consonant non-sibilant-fricative bilabial voiceless\"</span><span class=\"p\">)</span> <span class=\"c1\"># False</span>\n\n<span class=\"c1\"># compare IPAChar and list of descriptors</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">([</span><span class=\"sa\">u</span><span class=\"s2\">\"open\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"front\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"unrounded\"</span><span class=\"p\">])</span>              <span class=\"c1\"># False</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">([</span><span class=\"sa\">u</span><span class=\"s2\">\"vowel\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"open\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"front\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"unrounded\"</span><span class=\"p\">])</span>    <span class=\"c1\"># True</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">([</span><span class=\"sa\">u</span><span class=\"s2\">\"open\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"unrounded\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"vowel\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"front\"</span><span class=\"p\">])</span>    <span class=\"c1\"># True</span>\n<span class=\"n\">my_a1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">([</span><span class=\"sa\">u</span><span class=\"s2\">\"low\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"fnt\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"unr\"</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s2\">\"vwl\"</span><span class=\"p\">])</span>               <span class=\"c1\"># True</span>\n\n\n<span class=\"c1\">#############</span>\n<span class=\"c1\"># IPAString #</span>\n<span class=\"c1\">#############</span>\n\n<span class=\"c1\"># Def.: an IPAString is a list of IPAChar objects</span>\n\n<span class=\"c1\"># check if Unicode string contains only IPA valid characters</span>\n<span class=\"n\">s_uni</span> <span class=\"o\">=</span> <span class=\"sa\">u</span><span class=\"s2\">\"\u0259\u02c8ki\u02d0n \u00e6\u02cck\u00e6n\u02c8\u03b8\u0251.l\u0259.d\u0361\u0292i\"</span>   <span class=\"c1\"># Unicode string of the IPA pronunciation for \"achene acanthology\"</span>\n<span class=\"n\">is_valid_ipa</span><span class=\"p\">(</span><span class=\"n\">s_uni</span><span class=\"p\">)</span>                 <span class=\"c1\"># True</span>\n<span class=\"n\">is_valid_ipa</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"LoL\"</span><span class=\"p\">)</span>                <span class=\"c1\"># False (uppercase letter L is not IPA valid)</span>\n\n<span class=\"c1\"># create IPAString from list of IPAChar objects</span>\n<span class=\"n\">new_s_ipa</span> <span class=\"o\">=</span> <span class=\"n\">IPAString</span><span class=\"p\">(</span><span class=\"n\">ipa_chars</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">c3</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">tS1</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># create IPAString from Unicode string</span>\n<span class=\"n\">s_ipa</span> <span class=\"o\">=</span> <span class=\"n\">IPAString</span><span class=\"p\">(</span><span class=\"n\">unicode_string</span><span class=\"o\">=</span><span class=\"n\">s_uni</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># IPAString is similar to regular Python string object</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"p\">)</span>                            <span class=\"c1\"># \"\u0259\u02c8ki\u02d0n \u00e6\u02cck\u00e6n\u02c8\u03b8\u0251.l\u0259.d\u0361\u0292i\"</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"p\">)</span>                              <span class=\"c1\"># 21</span>\n<span class=\"n\">s_ipa</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>                                <span class=\"c1\"># (first IPA char)</span>\n<span class=\"n\">s_ipa</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">]</span>                              <span class=\"c1\"># (6th, 7th, 8th IPA chars)</span>\n<span class=\"n\">s_ipa</span><span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">:]</span>                              <span class=\"c1\"># (IPA chars from the 20th)</span>\n<span class=\"n\">s_ipa</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>                               <span class=\"c1\"># (last IPA char)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_s_ipa</span><span class=\"p\">)</span>                          <span class=\"c1\"># 4</span>\n<span class=\"n\">new_s_ipa</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"a\"</span><span class=\"p\">])</span>  <span class=\"c1\"># (append IPA char \"a\")</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_s_ipa</span><span class=\"p\">)</span>                          <span class=\"c1\"># 5</span>\n<span class=\"n\">new_s_ipa</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">UNICODE_TO_IPA</span><span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s2\">\"t\u0361\u0283\"</span><span class=\"p\">])</span> <span class=\"c1\"># (append IPA char \"t\u0361\u0283\")</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_s_ipa</span><span class=\"p\">)</span>                          <span class=\"c1\"># 6</span>\n<span class=\"n\">new_s_ipa</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"p\">)</span>                 <span class=\"c1\"># (append s_ipa to new_s_ipa)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_s_ipa</span><span class=\"p\">)</span>                          <span class=\"c1\"># 27</span>\n<span class=\"n\">double</span> <span class=\"o\">=</span> <span class=\"n\">s_ipa</span> <span class=\"o\">+</span> <span class=\"n\">new_s_ipa</span>              <span class=\"c1\"># (concatenate s_ipa and new_s_ipa)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">double</span><span class=\"p\">)</span>                             <span class=\"c1\"># 48</span>\n\n<span class=\"c1\"># new IPAString objects containing only...</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">consonants</span><span class=\"p\">)</span>                 <span class=\"c1\"># \"knkn\u03b8ld\u0361\u0292\"                (consonants)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">vowels</span><span class=\"p\">)</span>                     <span class=\"c1\"># \"\u0259i\u00e6\u00e6\u0251\u0259i\"                 (vowels)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">letters</span><span class=\"p\">)</span>                    <span class=\"c1\"># \"\u0259kin\u00e6k\u00e6n\u03b8\u0251l\u0259d\u0361\u0292i\"         (vowels and consonants)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">cns_vwl</span><span class=\"p\">)</span>                    <span class=\"c1\"># \"\u0259kin\u00e6k\u00e6n\u03b8\u0251l\u0259d\u0361\u0292i\"         (vowels and consonants)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">cns_vwl_pstr</span><span class=\"p\">)</span>               <span class=\"c1\"># \"\u0259\u02c8kin\u00e6k\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"       (  + primary stress marks)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">cns_vwl_pstr_long</span><span class=\"p\">)</span>          <span class=\"c1\"># \"\u0259\u02c8ki\u02d0n\u00e6k\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"      (    + long marks)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">cns_vwl_str</span><span class=\"p\">)</span>                <span class=\"c1\"># \"\u0259\u02c8kin\u00e6\u02cck\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"      (  + stress marks)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">cns_vwl_str_len</span><span class=\"p\">)</span>            <span class=\"c1\"># \"\u0259\u02c8ki\u02d0n\u00e6\u02cck\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"     (    + length marks)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">cns_vwl_str_len_wb</span><span class=\"p\">)</span>         <span class=\"c1\"># \"\u0259\u02c8ki\u02d0n \u00e6\u02cck\u00e6n\u02c8\u03b8\u0251l\u0259d\u0361\u0292i\"    (      + word breaks)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">cns_vwl_str_len_wb_sb</span><span class=\"p\">)</span>      <span class=\"c1\"># \"\u0259\u02c8ki\u02d0n \u00e6\u02cck\u00e6n\u02c8\u03b8\u0251.l\u0259.d\u0361\u0292i\"  (        + syllable breaks)</span>\n<span class=\"n\">cns</span> <span class=\"o\">=</span> <span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">consonants</span>                  <span class=\"c1\"># (store new IPA string)</span>\n<span class=\"n\">cns</span> <span class=\"o\">==</span> <span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">consonants</span>                 <span class=\"c1\"># False (two different objects)</span>\n<span class=\"n\">cns</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"o\">.</span><span class=\"n\">consonants</span><span class=\"p\">)</span>     <span class=\"c1\"># True</span>\n<span class=\"n\">cns</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"p\">)</span>                <span class=\"c1\"># False</span>\n\n<span class=\"c1\"># print representation and name of all IPAChar objects in IPAString</span>\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">s_ipa</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"si\">%s</span><span class=\"se\">\\t</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n<span class=\"c1\"># \u0259 vowel mid central unrounded</span>\n<span class=\"c1\"># \u02c8 suprasegmental primary-stress</span>\n<span class=\"c1\"># k consonant voiceless velar plosive</span>\n<span class=\"c1\"># i vowel close front unrounded</span>\n<span class=\"c1\"># \u02d0 suprasegmental long</span>\n<span class=\"c1\"># n consonant voiced alveolar nasal</span>\n<span class=\"c1\">#   suprasegmental word-break</span>\n<span class=\"c1\"># \u00e6 vowel near-open front unrounded</span>\n<span class=\"c1\"># \u02cc suprasegmental secondary-stress</span>\n<span class=\"c1\"># k consonant voiceless velar plosive</span>\n<span class=\"c1\"># \u00e6 vowel near-open front unrounded</span>\n<span class=\"c1\"># n consonant voiced alveolar nasal</span>\n<span class=\"c1\"># \u02c8 suprasegmental primary-stress</span>\n<span class=\"c1\"># \u03b8 consonant voiceless dental non-sibilant-fricative</span>\n<span class=\"c1\"># \u0251 vowel open back unrounded</span>\n<span class=\"c1\"># . suprasegmental syllable-break</span>\n<span class=\"c1\"># l consonant voiced alveolar lateral-approximant</span>\n<span class=\"c1\"># \u0259 vowel mid central unrounded</span>\n<span class=\"c1\"># . suprasegmental syllable-break</span>\n<span class=\"c1\"># d\u0361\u0292   consonant voiced palato-alveolar sibilant-affricate</span>\n<span class=\"c1\"># i vowel close front unrounded</span>\n\n<span class=\"c1\"># compare IPAString objects</span>\n<span class=\"n\">s_ipa_d</span> <span class=\"o\">=</span> <span class=\"n\">IPAString</span><span class=\"p\">(</span><span class=\"n\">unicode_string</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"diff\"</span><span class=\"p\">)</span>\n<span class=\"n\">s_ipa_1</span> <span class=\"o\">=</span> <span class=\"n\">IPAString</span><span class=\"p\">(</span><span class=\"n\">unicode_string</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"at\u0361\u0283e\"</span><span class=\"p\">)</span>\n<span class=\"n\">s_ipa_2</span> <span class=\"o\">=</span> <span class=\"n\">IPAString</span><span class=\"p\">(</span><span class=\"n\">unicode_string</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"a\u02a7e\"</span><span class=\"p\">)</span>\n<span class=\"n\">s_ipa_3</span> <span class=\"o\">=</span> <span class=\"n\">IPAString</span><span class=\"p\">(</span><span class=\"n\">unicode_string</span><span class=\"o\">=</span><span class=\"sa\">u</span><span class=\"s2\">\"at\u0361\u0283e\"</span><span class=\"p\">,</span> <span class=\"n\">single_char_parsing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">s_ipa_d</span> <span class=\"o\">==</span> <span class=\"n\">s_ipa_1</span>              <span class=\"c1\"># False</span>\n<span class=\"n\">s_ipa_1</span> <span class=\"o\">==</span> <span class=\"n\">s_ipa_2</span>              <span class=\"c1\"># False (different objects)</span>\n<span class=\"n\">s_ipa_1</span> <span class=\"o\">==</span> <span class=\"n\">s_ipa_3</span>              <span class=\"c1\"># False (different objects)</span>\n<span class=\"n\">s_ipa_2</span> <span class=\"o\">==</span> <span class=\"n\">s_ipa_3</span>              <span class=\"c1\"># False (different objects)</span>\n<span class=\"n\">s_ipa_d</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">s_ipa_1</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">s_ipa_2</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">s_ipa_2</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">s_ipa_1</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">s_ipa_3</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"n\">s_ipa_2</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"n\">s_ipa_3</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n\n<span class=\"c1\"># compare IPAString and list of IPAChar objects</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">([</span><span class=\"n\">my_a1</span><span class=\"p\">,</span> <span class=\"n\">my_tS</span><span class=\"p\">,</span> <span class=\"n\">my_ee</span><span class=\"p\">])</span>    <span class=\"c1\"># True</span>\n\n<span class=\"c1\"># compare IPAString and Unicode string</span>\n<span class=\"n\">s_ipa_d</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"diff\"</span><span class=\"p\">)</span>                  <span class=\"c1\"># True</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"atse\"</span><span class=\"p\">)</span>                  <span class=\"c1\"># False</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"atSe\"</span><span class=\"p\">)</span>                  <span class=\"c1\"># False</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"at\u0361\u0283e\"</span><span class=\"p\">)</span>                  <span class=\"c1\"># True</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"at\u035c\u0283e\"</span><span class=\"p\">)</span>                  <span class=\"c1\"># True</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"a\u02a7e\"</span><span class=\"p\">)</span>                   <span class=\"c1\"># True</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"at\u0361\u0283eLOL\"</span><span class=\"p\">,</span> <span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># True (ignore chars non IPA valid)</span>\n<span class=\"n\">s_ipa_1</span><span class=\"o\">.</span><span class=\"n\">is_equivalent</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"at\u0361\u0283eLoL\"</span><span class=\"p\">,</span> <span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># False (ignore chars non IPA valid, note extra \"o\")</span>\n\n\n<span class=\"c1\">########################</span>\n<span class=\"c1\"># CONVERSION FUNCTIONS #</span>\n<span class=\"c1\">########################</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ipapy.kirshenbaummapper</span> <span class=\"kn\">import</span> <span class=\"n\">KirshenbaumMapper</span>\n<span class=\"n\">kmapper</span> <span class=\"o\">=</span> <span class=\"n\">KirshenbaumMapper</span><span class=\"p\">()</span>                                    <span class=\"c1\"># mapper to Kirshenbaum ASCII IPA</span>\n<span class=\"n\">s_k_ipa</span> <span class=\"o\">=</span> <span class=\"n\">kmapper</span><span class=\"o\">.</span><span class=\"n\">map_ipa_string</span><span class=\"p\">(</span><span class=\"n\">s_ipa</span><span class=\"p\">)</span>                          <span class=\"c1\"># u\"@'ki:n#&amp;,k&amp;n'TA#l@#dZi\"</span>\n<span class=\"n\">s_k_uni</span> <span class=\"o\">=</span> <span class=\"n\">kmapper</span><span class=\"o\">.</span><span class=\"n\">map_unicode_string</span><span class=\"p\">(</span><span class=\"n\">s_uni</span><span class=\"p\">)</span>                      <span class=\"c1\"># u\"@'ki:n#&amp;,k&amp;n'TA#l@#dZi\"</span>\n<span class=\"n\">s_k_ipa</span> <span class=\"o\">==</span> <span class=\"n\">s_k_uni</span>                                               <span class=\"c1\"># True</span>\n<span class=\"n\">s_k_lis</span> <span class=\"o\">=</span> <span class=\"n\">kmapper</span><span class=\"o\">.</span><span class=\"n\">map_unicode_string</span><span class=\"p\">(</span><span class=\"n\">s_uni</span><span class=\"p\">,</span> <span class=\"n\">return_as_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># [u'@', u\"'\", u'k', u'i', u':', u'n', u'#', u'&amp;', u',', u'k', u'&amp;', u'n', u\"'\", u'T', u'A', u'#', u'l', u'@', u'#', u'dZ', u'i']</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">ipapy.arpabetmapper</span> <span class=\"kn\">import</span> <span class=\"n\">ARPABETMapper</span>\n<span class=\"n\">amapper</span> <span class=\"o\">=</span> <span class=\"n\">ARPABETMapper</span><span class=\"p\">()</span>                                                    <span class=\"c1\"># mapper to ARPABET ASCII IPA (stress marks not supported yet)</span>\n<span class=\"n\">s_a</span> <span class=\"o\">=</span> <span class=\"n\">amapper</span><span class=\"o\">.</span><span class=\"n\">map_unicode_string</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"p\u0279u\u02d0f\"</span><span class=\"p\">)</span>                                   <span class=\"c1\"># error: long suprasegmental not mapped</span>\n<span class=\"n\">s_a</span> <span class=\"o\">=</span> <span class=\"n\">amapper</span><span class=\"o\">.</span><span class=\"n\">map_unicode_string</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"p\u0279u\u02d0f\"</span><span class=\"p\">,</span> <span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>                      <span class=\"c1\"># u\"PRUWF\"</span>\n<span class=\"n\">s_a</span> <span class=\"o\">=</span> <span class=\"n\">amapper</span><span class=\"o\">.</span><span class=\"n\">map_unicode_string</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"p\u0279u\u02d0f\"</span><span class=\"p\">,</span> <span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">return_as_list</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># [u'P', u'R', u'UW', u'F']</span>\n</pre>\n</div>\n<div id=\"as-a-command-line-tool\">\n<h3>As A Command Line Tool</h3>\n<p><strong>ipapy</strong> comes with a command line tool to perform operations on a\ngiven Unicode UTF-8 encoded string, representing an IPA string.\nTherefore, it is recommended to run it on a shell supporting UTF-8.</p>\n<p>Currently, the supported operations are:</p>\n<ul>\n<li><tt>canonize</tt>: canonize the Unicode representation of the IPA string</li>\n<li><tt>chars</tt>: list all IPA characters appearing in the IPA string</li>\n<li><tt>check</tt>: check if the given Unicode string is IPA valid</li>\n<li><tt>clean</tt>: remove characters that are not IPA valid</li>\n<li><tt>u2a</tt>: print the corresponding ARPABET (ASCII IPA) string</li>\n<li><tt>u2k</tt>: print the corresponding Kirshenbaum (ASCII IPA) string</li>\n</ul>\n<p>Run with the <tt><span class=\"pre\">--help</span></tt> parameter to list all the available options:</p>\n<pre>$ python -m ipapy --help\n\nusage: __main__.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-i<span class=\"o\">]</span> <span class=\"o\">[</span>-p<span class=\"o\">]</span> <span class=\"o\">[</span>--separator <span class=\"o\">[</span>SEPARATOR<span class=\"o\">]]</span> <span class=\"o\">[</span>-s<span class=\"o\">]</span> <span class=\"o\">[</span>-u<span class=\"o\">]</span>\n                   <span class=\"nb\">command</span> string\n\nipapy perform a <span class=\"nb\">command</span> on the given IPA/Unicode string\n\npositional arguments:\n  <span class=\"nb\">command</span>               <span class=\"o\">[</span>canonize<span class=\"p\">|</span>chars<span class=\"p\">|</span>check<span class=\"p\">|</span>clean<span class=\"p\">|</span>u2a<span class=\"p\">|</span>u2k<span class=\"o\">]</span>\n  string                String to canonize, check, clean, or convert\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -i, --ignore          Ignore Unicode characters that are not IPA valid\n  -p, --print-invalid   Print Unicode characters that are not IPA valid\n  --separator <span class=\"o\">[</span>SEPARATOR<span class=\"o\">]</span>\n                        Print IPA chars separated by this character <span class=\"o\">(</span>default:\n                        <span class=\"s1\">''</span><span class=\"o\">)</span>\n  -s, --single-char-parsing\n                        Perform single character parsing instead of maximal\n                        parsing\n  -u, --unicode         Print each Unicode character that is not IPA valid\n                        with its Unicode codepoint and name\n</pre>\n<p>Examples:</p>\n<pre>$ python -m ipapy canonize <span class=\"s2\">\"e\u02a7iu\"</span>\net\u0361\u0283iu\n\n$ python -m ipapy canonize <span class=\"s2\">\"e\u02a7iu\"</span> --separator <span class=\"s2\">\" \"</span>\ne t\u0361\u0283 i u\n\n$ python -m ipapy chars <span class=\"s2\">\"e\u02a7iu\"</span>\n<span class=\"s1\">'e'</span> vowel close-mid front unrounded <span class=\"o\">(</span>U+0065<span class=\"o\">)</span>\n<span class=\"s1\">'t\u0361\u0283'</span>   consonant voiceless palato-alveolar sibilant-affricate <span class=\"o\">(</span>U+0074 U+0361 U+0283<span class=\"o\">)</span>\n<span class=\"s1\">'i'</span> vowel close front unrounded <span class=\"o\">(</span>U+0069<span class=\"o\">)</span>\n<span class=\"s1\">'u'</span> vowel close back rounded <span class=\"o\">(</span>U+0075<span class=\"o\">)</span>\n\n$ python -m ipapy chars <span class=\"s2\">\"et\u0361\u0283iu\"</span>\n<span class=\"s1\">'e'</span> vowel close-mid front unrounded <span class=\"o\">(</span>U+0065<span class=\"o\">)</span>\n<span class=\"s1\">'t\u0361\u0283'</span>   consonant voiceless palato-alveolar sibilant-affricate <span class=\"o\">(</span>U+0074 U+0361 U+0283<span class=\"o\">)</span>\n<span class=\"s1\">'i'</span> vowel close front unrounded <span class=\"o\">(</span>U+0069<span class=\"o\">)</span>\n<span class=\"s1\">'u'</span> vowel close back rounded <span class=\"o\">(</span>U+0075<span class=\"o\">)</span>\n\n$ python -m ipapy chars <span class=\"s2\">\"et\u0361\u0283iu\"</span> -s\n<span class=\"s1\">'e'</span> vowel close-mid front unrounded <span class=\"o\">(</span>U+0065<span class=\"o\">)</span>\n<span class=\"s1\">'t'</span> consonant voiceless alveolar plosive <span class=\"o\">(</span>U+0074<span class=\"o\">)</span>\n<span class=\"s1\">'\u0361'</span> diacritic tie-bar-above <span class=\"o\">(</span>U+0361<span class=\"o\">)</span>\n<span class=\"s1\">'\u0283'</span> consonant voiceless palato-alveolar sibilant-fricative <span class=\"o\">(</span>U+0283<span class=\"o\">)</span>\n<span class=\"s1\">'i'</span> vowel close front unrounded <span class=\"o\">(</span>U+0069<span class=\"o\">)</span>\n<span class=\"s1\">'u'</span> vowel close back rounded <span class=\"o\">(</span>U+0075<span class=\"o\">)</span>\n\n$ python -m ipapy check <span class=\"s2\">\"e\u02a7iu\"</span>\nTrue\n\n$ python -m ipapy check <span class=\"s2\">\"LoL\"</span>\nFalse\n\n$ python -m ipapy check <span class=\"s2\">\"LoL\"</span> -p\nFalse\nLL\n\n$ python -m ipapy check <span class=\"s2\">\"LoLOL\"</span> -p -u\nFalse\nLLOL\n<span class=\"s1\">'L'</span> 0x4c    LATIN CAPITAL LETTER L\n<span class=\"s1\">'O'</span> 0x4f    LATIN CAPITAL LETTER O\n\n$ python -m ipapy clean <span class=\"s2\">\"/e\u02a7iu/\"</span>\ne\u02a7iu\n\n$ python -m ipapy u2k <span class=\"s2\">\"e\u02a7iu\"</span>\netSiu\n\n$ python -m ipapy u2k <span class=\"s2\">\"eTa\"</span>\nThe given string contains characters not IPA valid. Use the <span class=\"s1\">'ignore'</span> option to ignore them.\n\n$ python -m ipapy u2k <span class=\"s2\">\"eTa\"</span> -i\nea\n\n$ python -m ipapy u2a <span class=\"s2\">\"e\u02a7iu\"</span> --separator <span class=\"s2\">\" \"</span>\nEH CH IH UW\n</pre>\n</div>\n</div>\n<div id=\"unit-testing\">\n<h2>Unit Testing</h2>\n<pre>$ python run_all_unit_tests.py\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><strong>ipapy</strong> is released under the MIT License.</p>\n</div>\n<div id=\"acknowledgments\">\n<h2>Acknowledgments</h2>\n<ul>\n<li>Bram Vanroy provided a fix to <tt>setup.py</tt> for Windows users</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5229870, "releases": {"0.0.1.0": [{"comment_text": "", "digests": {"md5": "3aaae9f4d55d1140496add8bf63e1d42", "sha256": "fdb7f47be21f99a31767c7c02b5666442b492e2c145c29d642a5f822d864f6ca"}, "downloads": -1, "filename": "ipapy-0.0.1.0.tar.gz", "has_sig": false, "md5_digest": "3aaae9f4d55d1140496add8bf63e1d42", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32436, "upload_time": "2016-05-19T15:33:04", "upload_time_iso_8601": "2016-05-19T15:33:04.671948Z", "url": "https://files.pythonhosted.org/packages/fc/45/2851945ee8f9c86b16c5be1bc12375d6f3c8a4607baec00e75bf096c5615/ipapy-0.0.1.0.tar.gz", "yanked": false}], "0.0.1.1": [{"comment_text": "", "digests": {"md5": "4d13ad0b2fc933817e0c76d19728e9a4", "sha256": "e0529c637802721d15c6c442dbcb9e2200668b8abcd86b6679355d10e2c3a613"}, "downloads": -1, "filename": "ipapy-0.0.1.1.tar.gz", "has_sig": false, "md5_digest": "4d13ad0b2fc933817e0c76d19728e9a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32438, "upload_time": "2016-05-19T15:35:29", "upload_time_iso_8601": "2016-05-19T15:35:29.241983Z", "url": "https://files.pythonhosted.org/packages/53/55/a835b18a1a47eb488af94e9f50d4bbb3f7483bf2f2bcb2d308beb0487782/ipapy-0.0.1.1.tar.gz", "yanked": false}], "0.0.2.0": [{"comment_text": "", "digests": {"md5": "b9eee120780db3bc2d684f3e46e0705a", "sha256": "be2c920be452ede6b7a246e6278cfe847a28f5156787fcd76941383baa3a25ee"}, "downloads": -1, "filename": "ipapy-0.0.2.0.tar.gz", "has_sig": false, "md5_digest": "b9eee120780db3bc2d684f3e46e0705a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32586, "upload_time": "2016-05-21T12:08:35", "upload_time_iso_8601": "2016-05-21T12:08:35.988829Z", "url": "https://files.pythonhosted.org/packages/84/98/6071e4729cfa8576dc789a5f02fc16fafb0affdaa4c320cecc77086d1d54/ipapy-0.0.2.0.tar.gz", "yanked": false}], "0.0.3.0": [{"comment_text": "", "digests": {"md5": "d9f6b1f362461faad50bf5587c19ea88", "sha256": "7ff9cc2ce65e068748e32d62d24688d84f51dc68c8ba7258fc94dddea75500c8"}, "downloads": -1, "filename": "ipapy-0.0.3.0.tar.gz", "has_sig": false, "md5_digest": "d9f6b1f362461faad50bf5587c19ea88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34037, "upload_time": "2016-05-23T08:56:51", "upload_time_iso_8601": "2016-05-23T08:56:51.933656Z", "url": "https://files.pythonhosted.org/packages/36/66/78279c0cd6adf1e9ea07102639e958aae32f6371071e9f116a223ddaccd9/ipapy-0.0.3.0.tar.gz", "yanked": false}], "0.0.4.0": [{"comment_text": "", "digests": {"md5": "7b496f20ae67fba4cfa463a5a069ec90", "sha256": "cc554e94ec5518ac409bcea641ac7e91171bead8c67d2ffa7e46b8e39e4fee19"}, "downloads": -1, "filename": "ipapy-0.0.4.0.tar.gz", "has_sig": false, "md5_digest": "7b496f20ae67fba4cfa463a5a069ec90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34108, "upload_time": "2016-05-24T15:21:02", "upload_time_iso_8601": "2016-05-24T15:21:02.428224Z", "url": "https://files.pythonhosted.org/packages/f4/c4/52fc7e6e0749c44a7176f1a69dd57ab93f72c08478bdd395b5d3d3400d49/ipapy-0.0.4.0.tar.gz", "yanked": false}], "0.0.5.0": [{"comment_text": "", "digests": {"md5": "06d03259df205bd3ad8547fd9cfda40b", "sha256": "2201400180d425ccd6ec66ca5cc81d853e0fafcf76fd271b6faff31342fd1020"}, "downloads": -1, "filename": "ipapy-0.0.5.0.tar.gz", "has_sig": false, "md5_digest": "06d03259df205bd3ad8547fd9cfda40b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34382, "upload_time": "2016-05-26T11:56:42", "upload_time_iso_8601": "2016-05-26T11:56:42.555508Z", "url": "https://files.pythonhosted.org/packages/8d/14/e239613573951c2ddab6366046f93570e0129a26ea161ff491302a387200/ipapy-0.0.5.0.tar.gz", "yanked": false}], "0.0.6.0": [{"comment_text": "", "digests": {"md5": "243845174543610a40b6b9cdfa16e5a0", "sha256": "64b0de60f6d1347aa7d5581697b79edf93638838756a6d98b1586d5df8459dc9"}, "downloads": -1, "filename": "ipapy-0.0.6.0.tar.gz", "has_sig": false, "md5_digest": "243845174543610a40b6b9cdfa16e5a0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40034, "upload_time": "2016-05-28T09:46:45", "upload_time_iso_8601": "2016-05-28T09:46:45.673496Z", "url": "https://files.pythonhosted.org/packages/e3/06/a9bacba9b9ca7041a2531889c412bba9bd5cbef8e8af481dd608a400ee81/ipapy-0.0.6.0.tar.gz", "yanked": false}], "0.0.7.0": [{"comment_text": "", "digests": {"md5": "e9e78b8f8cc4fb0d657136048d92a3e4", "sha256": "7c32b1597481b433b23ff5c1e71d7164bfbcb6d2a01d6d4f4f9b2666706ec581"}, "downloads": -1, "filename": "ipapy-0.0.7.0.tar.gz", "has_sig": false, "md5_digest": "e9e78b8f8cc4fb0d657136048d92a3e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40224, "upload_time": "2016-06-04T12:11:44", "upload_time_iso_8601": "2016-06-04T12:11:44.802965Z", "url": "https://files.pythonhosted.org/packages/9d/24/a6816c505199f8f62e7df16dee206040d7d6e4b6a0b12a4a31c727c8f94e/ipapy-0.0.7.0.tar.gz", "yanked": false}], "0.0.8.0": [{"comment_text": "", "digests": {"md5": "b56f5ba2abf945cf01d7252e6b462e9e", "sha256": "b843a2404194392ca5b1cca72103acf8c69b6f4609e99817a2e934ed7ba70cf8"}, "downloads": -1, "filename": "ipapy-0.0.8.0.tar.gz", "has_sig": false, "md5_digest": "b56f5ba2abf945cf01d7252e6b462e9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40478, "upload_time": "2016-06-07T09:29:27", "upload_time_iso_8601": "2016-06-07T09:29:27.127351Z", "url": "https://files.pythonhosted.org/packages/ae/d2/1af2bf40023d0cbc5d5cb9477938b923b8dc2eae479e5f0d1b4350db72be/ipapy-0.0.8.0.tar.gz", "yanked": false}], "0.0.9.0": [{"comment_text": "", "digests": {"md5": "6d88c2fcc87174fc67a6b829f0bf2565", "sha256": "b96d0435282103c7d893c8226a458b70a810d130ce65fabe127c8a7490d1f82b"}, "downloads": -1, "filename": "ipapy-0.0.9.0-py2-none-any.whl", "has_sig": false, "md5_digest": "6d88c2fcc87174fc67a6b829f0bf2565", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 38724, "upload_time": "2019-05-05T22:27:35", "upload_time_iso_8601": "2019-05-05T22:27:35.890892Z", "url": "https://files.pythonhosted.org/packages/5d/b6/c170e49cd5d3aaa8cbbe3c836d2fe09c72f08cf3b8ea1e4b4f81fed7881b/ipapy-0.0.9.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c87b745b63f5a69571815a979af9cc6", "sha256": "e1bc73f6a4861b9a0ff562b70b87dab8acf7a63badd98caabd6e248b3839f1c9"}, "downloads": -1, "filename": "ipapy-0.0.9.0.tar.gz", "has_sig": false, "md5_digest": "4c87b745b63f5a69571815a979af9cc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37415, "upload_time": "2019-05-05T22:27:37", "upload_time_iso_8601": "2019-05-05T22:27:37.753585Z", "url": "https://files.pythonhosted.org/packages/41/0d/7e8652df6af20a61bb3315f5c9d99fb9ea8f3779ff80fca9d71001230f90/ipapy-0.0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d88c2fcc87174fc67a6b829f0bf2565", "sha256": "b96d0435282103c7d893c8226a458b70a810d130ce65fabe127c8a7490d1f82b"}, "downloads": -1, "filename": "ipapy-0.0.9.0-py2-none-any.whl", "has_sig": false, "md5_digest": "6d88c2fcc87174fc67a6b829f0bf2565", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 38724, "upload_time": "2019-05-05T22:27:35", "upload_time_iso_8601": "2019-05-05T22:27:35.890892Z", "url": "https://files.pythonhosted.org/packages/5d/b6/c170e49cd5d3aaa8cbbe3c836d2fe09c72f08cf3b8ea1e4b4f81fed7881b/ipapy-0.0.9.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c87b745b63f5a69571815a979af9cc6", "sha256": "e1bc73f6a4861b9a0ff562b70b87dab8acf7a63badd98caabd6e248b3839f1c9"}, "downloads": -1, "filename": "ipapy-0.0.9.0.tar.gz", "has_sig": false, "md5_digest": "4c87b745b63f5a69571815a979af9cc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37415, "upload_time": "2019-05-05T22:27:37", "upload_time_iso_8601": "2019-05-05T22:27:37.753585Z", "url": "https://files.pythonhosted.org/packages/41/0d/7e8652df6af20a61bb3315f5c9d99fb9ea8f3779ff80fca9d71001230f90/ipapy-0.0.9.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:44 2020"}