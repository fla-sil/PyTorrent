{"info": {"author": "Casey Slaught", "author_email": "casey@caracal.cloud", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# simple-arcgis-wrapper\n\nA simple wrapper for interacting with the ArcGIS Online REST API.\n\n## About\n\nThis project is geared towards developers who want to get data into the ArcGIS Online as easily as possible. The REST API can be pretty confusing if you aren't familiar with ArcGIS jargon and the ArcGIS API for Python is cumbersome for cloud-based programs, so we created this simple wrapper to abstract some of the difficulties with creating resources and adding data.\n\n## Prerequisites\n\nFirst you will need an ArcGIS Online account. If you plan on using token authentication, rather than a username and password, you will need an app registered on the Developer portal.\n\nThen you will need to know a thing or two about ArcGIS.\n### Feature service: \n- \"Feature services allow you to serve features over the Internet and provide the symbology to use when displaying the features.\"\n- A feature service can store many feature layers.\n\n### Feature layer\n- \"A feature layer is a grouping of similar geographic features, for example, buildings, parcels, cities, roads, and earthquake epicenters.\"\n- A feature layer can store many geometric features.\n\n### Feature\n- \"Feature classes are collections of common features, each having the same spatial representation, such as points, lines, or polygons, and a common set of attribute columns.\"\n\n\n## Installing\n\n```\npip install simple-arcgis-wrapper\n```\n\n## Usage\n\n### Import it\n```\nimport simple_arcgis_wrapper as saw\n```\n\n### Identify yourself\n\n#### Token-based  authentication\nYou will need a registered app and tokens obtained through the OAuth flow. Check out [this link](https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/server-based-user-logins/) to learn more about setting up OAuth.\n\n```\napi = saw.ArcgisAPI(\n    access_token='ACCESS_TOKEN',   # access token obtained from user\n    refresh_token='REFRESH_TOKEN', # refresh token obtained from user\n    username='USERNAME',           # username obtained from user\n    client_id='CLIENT_ID'          # your OAuth app's client ID\n)\n```\n\n#### Username and password authentication\nIf you just want to add data to your own account you can use this authentication scheme. Use this for one-off tasks, as this scheme will only be valid for 1 hour. Use OAuth tokens for longer-lived operations.\n```\napi = saw.ArcgisAPI.fromusernamepassword(\n    username='username', \n    password='password'\n)\n```\n\n### Create a feature service\n\n```\nservice = api.services.create_feature_service('NAME', 'DESCRIPTION')\n\n# service is a FeatureService object\nprint(service.id, service.name, service.url)\n```\n\n### Create a feature layer in the feature service\n\nA feature layer stores your features, so you need to define the layer type and any additional fields.\n\n```\nfields = saw.fields.Fields()\nfields.add_field('Date', saw.fields.DateField)\nfields.add_field('Name', saw.fields.StringField)\nfields.add_field('Altitude', saw.fields.DoubleField)\n\nlayer = api.services.create_feature_layer(\n    layer_type='point',                      # point, line, or polygon\n    name='NAME',                               \n    description='DESCRIPTION',       \n    feature_service_url=service.url,\n    fields=fields,                     \n    x_min=10.0, y_min=10.0,                  # min bounding box parameters\n    x_max=20.0, y_max=20.0,                  # max bounding box parameters\n    wkid=4326                                # well-known ID spatial reference\n)\n\n# layer is a FeatureLayer object\nprint(layer.id, layer.name, layer.url)\n\n```\n\n### Create a table in the feature service\n\nA table is like a feature layer except it doesn't have coordinates. \n\n```\nfields = saw.fields.Fields()\nfields.add_field('Date', saw.fields.DateField)\nfields.add_field('Name', saw.fields.StringField)\nfields.add_field('Email', saw.fields.StringField)\n\ntable = api.services.create_table(\n    name=\"TABLE_NAME\", \n    description=\"TABLE_DESCRIPTION\",\n    feature_service_url=feature_service.url,\n    fields=fields\n)\n\n# table is a Table object\nprint(table.id, table.name, table.url)\n```\n\n### Add one point to the feature layer\n\n```\n# attribute keys must match the layer's fields\nattributes = {\n    'Date': '2020-01-01 15:30:45',\n    'Name': 'John Doe',\n    'Altitude': 12.5\n}\n\nsuccess = api.services.add_point(\n    lon=10.0, \n    lat=20.0, \n    attributes=attributes\n    layer_id=layer.id, \n    feature_service_url=service.url\n)\n\nprint(success) # True or False\n```\n\n### Add multiple points to the feature layer\n\n```\nattributes = {\n    \"Date\": \"2020-01-01 15:30:45\",\n    \"Name\": \"John Doe\",\n    \"DeviceId\": \"abc123\",\n}\n\np1 = {\n    'lon': 10.0, 'lat': 20.0,\n    'Date': \"2020-01-01 12:12:12\",\n    'Name': 'John Doe',\n    'DeviceId': 'abc123'\n}\n\np2 = {\n    'lon': 10.0, 'lat': 20.0,\n    'Date': \"2020-01-01 12:12:12\",\n    'Name': 'John Doe',\n    'DeviceId': 'abc123'\n}\n\nadds = api.services.add_points(\n    points=[p1, p2], \n    layer_id=layer.id, \n    feature_service_url=service.url\n)\n\n# adds is a dict where key is object ID and value is success\nfor object_id, success in adds.items():\n    print(object_id, success)\n```\n\n\n### Get a feature service\nGet a feature service by passing the exact name of the service.\n```\nother_service = self.api.services.get_feature_service('OTHER_NAME')\n```\n\n### Get a feature layer\nGet a layer from a feature service by looking up it's ID or exact name.\n```\nlayer_by_id = api.services.get_feature_layer(service.url, layer_id=0)\nlayer_by_name = api.services.get_feature_layer(service.url, layer_name=\"other layer\")\n```\n\n### Get features\nYou can get features from a feature layer by passing an SQL 92 formatted _where_ clause as described [here](https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm). Specify the attributes you want returned with the _out_fields_ argument.\n\n>Pro tip: return all features with _where=\"1=1\"_\n\n>Only point features supported right now.\n```\npoint_features = api.services.get_features(\n    where=\"DeviceId = 'abc123'\",\n    layer_id=layer.id,\n    feature_service_url=service.url,\n    out_fields=['OBJECTID']\n)\n\n# point is a PointFeature object\npoint = point_features[0]\nprint(point.id, point.x, point.y)\n```\n\n### Update a feature service\n>Only updating the service's _title_ supported right now.\n\n```\nsuccess = api.services.update_feature_service(\n    feature_service_id=service.id, \n    title=\"New Title\"\n)\n\nprint(success) # True or False\n```\n\n### Update features\nUpdate multiple features by passing a list of tuples which contain an object ID, attributes to update and geometry respectively. If you want to update features based on a where clause, first get the features you want as described above.\n\n>If you are not updating attributes or geometry, pass None.\n```\nupdates_list = [\n    (0, {\"Name\": \"John Doe II\"}, {\"x\": 10.1, \"y\": 20.1}),\n    (1, None, {\"x\": 10.3, \"y\": 20.2}),\n    (1, {\"Name\": \"John Doe II\"}, None),\n]\n\nupdates = api.services.update_features(\n    updates=updates_list, \n    layer_id=layer.id, \n    feature_service_url=service.url\n)\n\nfor object_id, success in updates.items():\n    print(object_id, success)\n```\n\n### Update table rows\nUpdate multiple table rows by passing a list of tuples which contain an object ID and attributes to update. You can use a where clause to filter the affected rows.\n\n```\nupdates_list = [\n    (0, {\"Name\": \"John Doe II\", \"Email\": \"johndoe2@example.com\"}),\n    (1, {\"Name\": \"John Doe II\", \"Email\": \"johndoe2@example.com\"})\n]\n\nupdates = api.services.update_table_rows(\n    updates=updates_list, \n    table_id=table.id, \n    feature_service_url=service.url\n)\n\nfor object_id, success in updates.items():\n    print(object_id, success)\n```\n\n\n### Delete features from a feature layer or table\n\nDelete features by passing an SQL 92 _where_ clause.\n```\ndeletes = api.services.delete_features(\n    where=\"DeviceId = 'abc123'\",\n    layer_id=layer.id,\n    feature_service_url=service.url\n)\n\nfor object_id, success in deletes.items():\n    print(object_id, success)\n```\n\n### Delete a feature layer\n\n```\napi.services.delete_feature_layers([layer.id], service.url)\n```\n\n### Delete a feature service\n\n```\napi.services.delete_feature_service(service.id)\n```\n\n### Exceptions\nInvalid arguments to ArcGIS may result in an error. You can catch them with _ArcGISException_ which includes the message returned from ArcGIS.\n```\ntry:\n    # try to create a duplicate feature service\n    api.services.create_feature_service('NAME', 'DESCRIPTION')\nexcept saw.exceptions.ArcGISException as e:\n    print(e)\n```\n\n## Testing\n\nBefore testing, configure the following environment variables:\n- ARCGIS_ACCESS_TOKEN\n- ARCGIS_REFRESH_TOKEN\n- ARCGIS_CLIENT_ID\n- ARCGIS_USERNAME\n- ARCGIS_PASSWORD\n\nBy running the tests you will incur a small charge to your account.\n\n```\npython -m unittest tests/test*.py\n```\n\n## Authors\n\n* **Casey Slaught** - *Lead developer* - [Caracal](https://github.com/caracal-cloud)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) for details\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/caracal-cloud/simple-arcgis-wrapper", "keywords": "arcgis gis rest api wrapper", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "simple-arcgis-wrapper", "package_url": "https://pypi.org/project/simple-arcgis-wrapper/", "platform": "", "project_url": "https://pypi.org/project/simple-arcgis-wrapper/", "project_urls": {"Homepage": "https://github.com/caracal-cloud/simple-arcgis-wrapper"}, "release_url": "https://pypi.org/project/simple-arcgis-wrapper/1.0.4/", "requires_dist": ["requests (>=2.10.0)"], "requires_python": ">=3.5", "summary": "A simple wrapper for interacting with the ArcGIS Online REST API.", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>simple-arcgis-wrapper</h1>\n<p>A simple wrapper for interacting with the ArcGIS Online REST API.</p>\n<h2>About</h2>\n<p>This project is geared towards developers who want to get data into the ArcGIS Online as easily as possible. The REST API can be pretty confusing if you aren't familiar with ArcGIS jargon and the ArcGIS API for Python is cumbersome for cloud-based programs, so we created this simple wrapper to abstract some of the difficulties with creating resources and adding data.</p>\n<h2>Prerequisites</h2>\n<p>First you will need an ArcGIS Online account. If you plan on using token authentication, rather than a username and password, you will need an app registered on the Developer portal.</p>\n<p>Then you will need to know a thing or two about ArcGIS.</p>\n<h3>Feature service:</h3>\n<ul>\n<li>\"Feature services allow you to serve features over the Internet and provide the symbology to use when displaying the features.\"</li>\n<li>A feature service can store many feature layers.</li>\n</ul>\n<h3>Feature layer</h3>\n<ul>\n<li>\"A feature layer is a grouping of similar geographic features, for example, buildings, parcels, cities, roads, and earthquake epicenters.\"</li>\n<li>A feature layer can store many geometric features.</li>\n</ul>\n<h3>Feature</h3>\n<ul>\n<li>\"Feature classes are collections of common features, each having the same spatial representation, such as points, lines, or polygons, and a common set of attribute columns.\"</li>\n</ul>\n<h2>Installing</h2>\n<pre><code>pip install simple-arcgis-wrapper\n</code></pre>\n<h2>Usage</h2>\n<h3>Import it</h3>\n<pre><code>import simple_arcgis_wrapper as saw\n</code></pre>\n<h3>Identify yourself</h3>\n<h4>Token-based  authentication</h4>\n<p>You will need a registered app and tokens obtained through the OAuth flow. Check out <a href=\"https://developers.arcgis.com/documentation/core-concepts/security-and-authentication/server-based-user-logins/\" rel=\"nofollow\">this link</a> to learn more about setting up OAuth.</p>\n<pre><code>api = saw.ArcgisAPI(\n    access_token='ACCESS_TOKEN',   # access token obtained from user\n    refresh_token='REFRESH_TOKEN', # refresh token obtained from user\n    username='USERNAME',           # username obtained from user\n    client_id='CLIENT_ID'          # your OAuth app's client ID\n)\n</code></pre>\n<h4>Username and password authentication</h4>\n<p>If you just want to add data to your own account you can use this authentication scheme. Use this for one-off tasks, as this scheme will only be valid for 1 hour. Use OAuth tokens for longer-lived operations.</p>\n<pre><code>api = saw.ArcgisAPI.fromusernamepassword(\n    username='username', \n    password='password'\n)\n</code></pre>\n<h3>Create a feature service</h3>\n<pre><code>service = api.services.create_feature_service('NAME', 'DESCRIPTION')\n\n# service is a FeatureService object\nprint(service.id, service.name, service.url)\n</code></pre>\n<h3>Create a feature layer in the feature service</h3>\n<p>A feature layer stores your features, so you need to define the layer type and any additional fields.</p>\n<pre><code>fields = saw.fields.Fields()\nfields.add_field('Date', saw.fields.DateField)\nfields.add_field('Name', saw.fields.StringField)\nfields.add_field('Altitude', saw.fields.DoubleField)\n\nlayer = api.services.create_feature_layer(\n    layer_type='point',                      # point, line, or polygon\n    name='NAME',                               \n    description='DESCRIPTION',       \n    feature_service_url=service.url,\n    fields=fields,                     \n    x_min=10.0, y_min=10.0,                  # min bounding box parameters\n    x_max=20.0, y_max=20.0,                  # max bounding box parameters\n    wkid=4326                                # well-known ID spatial reference\n)\n\n# layer is a FeatureLayer object\nprint(layer.id, layer.name, layer.url)\n\n</code></pre>\n<h3>Create a table in the feature service</h3>\n<p>A table is like a feature layer except it doesn't have coordinates.</p>\n<pre><code>fields = saw.fields.Fields()\nfields.add_field('Date', saw.fields.DateField)\nfields.add_field('Name', saw.fields.StringField)\nfields.add_field('Email', saw.fields.StringField)\n\ntable = api.services.create_table(\n    name=\"TABLE_NAME\", \n    description=\"TABLE_DESCRIPTION\",\n    feature_service_url=feature_service.url,\n    fields=fields\n)\n\n# table is a Table object\nprint(table.id, table.name, table.url)\n</code></pre>\n<h3>Add one point to the feature layer</h3>\n<pre><code># attribute keys must match the layer's fields\nattributes = {\n    'Date': '2020-01-01 15:30:45',\n    'Name': 'John Doe',\n    'Altitude': 12.5\n}\n\nsuccess = api.services.add_point(\n    lon=10.0, \n    lat=20.0, \n    attributes=attributes\n    layer_id=layer.id, \n    feature_service_url=service.url\n)\n\nprint(success) # True or False\n</code></pre>\n<h3>Add multiple points to the feature layer</h3>\n<pre><code>attributes = {\n    \"Date\": \"2020-01-01 15:30:45\",\n    \"Name\": \"John Doe\",\n    \"DeviceId\": \"abc123\",\n}\n\np1 = {\n    'lon': 10.0, 'lat': 20.0,\n    'Date': \"2020-01-01 12:12:12\",\n    'Name': 'John Doe',\n    'DeviceId': 'abc123'\n}\n\np2 = {\n    'lon': 10.0, 'lat': 20.0,\n    'Date': \"2020-01-01 12:12:12\",\n    'Name': 'John Doe',\n    'DeviceId': 'abc123'\n}\n\nadds = api.services.add_points(\n    points=[p1, p2], \n    layer_id=layer.id, \n    feature_service_url=service.url\n)\n\n# adds is a dict where key is object ID and value is success\nfor object_id, success in adds.items():\n    print(object_id, success)\n</code></pre>\n<h3>Get a feature service</h3>\n<p>Get a feature service by passing the exact name of the service.</p>\n<pre><code>other_service = self.api.services.get_feature_service('OTHER_NAME')\n</code></pre>\n<h3>Get a feature layer</h3>\n<p>Get a layer from a feature service by looking up it's ID or exact name.</p>\n<pre><code>layer_by_id = api.services.get_feature_layer(service.url, layer_id=0)\nlayer_by_name = api.services.get_feature_layer(service.url, layer_name=\"other layer\")\n</code></pre>\n<h3>Get features</h3>\n<p>You can get features from a feature layer by passing an SQL 92 formatted <em>where</em> clause as described <a href=\"https://developers.arcgis.com/rest/services-reference/query-feature-service-layer-.htm\" rel=\"nofollow\">here</a>. Specify the attributes you want returned with the <em>out_fields</em> argument.</p>\n<blockquote>\n<p>Pro tip: return all features with <em>where=\"1=1\"</em></p>\n</blockquote>\n<blockquote>\n<p>Only point features supported right now.</p>\n</blockquote>\n<pre><code>point_features = api.services.get_features(\n    where=\"DeviceId = 'abc123'\",\n    layer_id=layer.id,\n    feature_service_url=service.url,\n    out_fields=['OBJECTID']\n)\n\n# point is a PointFeature object\npoint = point_features[0]\nprint(point.id, point.x, point.y)\n</code></pre>\n<h3>Update a feature service</h3>\n<blockquote>\n<p>Only updating the service's <em>title</em> supported right now.</p>\n</blockquote>\n<pre><code>success = api.services.update_feature_service(\n    feature_service_id=service.id, \n    title=\"New Title\"\n)\n\nprint(success) # True or False\n</code></pre>\n<h3>Update features</h3>\n<p>Update multiple features by passing a list of tuples which contain an object ID, attributes to update and geometry respectively. If you want to update features based on a where clause, first get the features you want as described above.</p>\n<blockquote>\n<p>If you are not updating attributes or geometry, pass None.</p>\n</blockquote>\n<pre><code>updates_list = [\n    (0, {\"Name\": \"John Doe II\"}, {\"x\": 10.1, \"y\": 20.1}),\n    (1, None, {\"x\": 10.3, \"y\": 20.2}),\n    (1, {\"Name\": \"John Doe II\"}, None),\n]\n\nupdates = api.services.update_features(\n    updates=updates_list, \n    layer_id=layer.id, \n    feature_service_url=service.url\n)\n\nfor object_id, success in updates.items():\n    print(object_id, success)\n</code></pre>\n<h3>Update table rows</h3>\n<p>Update multiple table rows by passing a list of tuples which contain an object ID and attributes to update. You can use a where clause to filter the affected rows.</p>\n<pre><code>updates_list = [\n    (0, {\"Name\": \"John Doe II\", \"Email\": \"johndoe2@example.com\"}),\n    (1, {\"Name\": \"John Doe II\", \"Email\": \"johndoe2@example.com\"})\n]\n\nupdates = api.services.update_table_rows(\n    updates=updates_list, \n    table_id=table.id, \n    feature_service_url=service.url\n)\n\nfor object_id, success in updates.items():\n    print(object_id, success)\n</code></pre>\n<h3>Delete features from a feature layer or table</h3>\n<p>Delete features by passing an SQL 92 <em>where</em> clause.</p>\n<pre><code>deletes = api.services.delete_features(\n    where=\"DeviceId = 'abc123'\",\n    layer_id=layer.id,\n    feature_service_url=service.url\n)\n\nfor object_id, success in deletes.items():\n    print(object_id, success)\n</code></pre>\n<h3>Delete a feature layer</h3>\n<pre><code>api.services.delete_feature_layers([layer.id], service.url)\n</code></pre>\n<h3>Delete a feature service</h3>\n<pre><code>api.services.delete_feature_service(service.id)\n</code></pre>\n<h3>Exceptions</h3>\n<p>Invalid arguments to ArcGIS may result in an error. You can catch them with <em>ArcGISException</em> which includes the message returned from ArcGIS.</p>\n<pre><code>try:\n    # try to create a duplicate feature service\n    api.services.create_feature_service('NAME', 'DESCRIPTION')\nexcept saw.exceptions.ArcGISException as e:\n    print(e)\n</code></pre>\n<h2>Testing</h2>\n<p>Before testing, configure the following environment variables:</p>\n<ul>\n<li>ARCGIS_ACCESS_TOKEN</li>\n<li>ARCGIS_REFRESH_TOKEN</li>\n<li>ARCGIS_CLIENT_ID</li>\n<li>ARCGIS_USERNAME</li>\n<li>ARCGIS_PASSWORD</li>\n</ul>\n<p>By running the tests you will incur a small charge to your account.</p>\n<pre><code>python -m unittest tests/test*.py\n</code></pre>\n<h2>Authors</h2>\n<ul>\n<li><strong>Casey Slaught</strong> - <em>Lead developer</em> - <a href=\"https://github.com/caracal-cloud\" rel=\"nofollow\">Caracal</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> for details</p>\n\n          </div>"}, "last_serial": 6659185, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "203f0503667e3de5be4cb92e7bb47ace", "sha256": "101337b28843f7bba243062eda3d5c3beafe8fdd9dfaf7e880e140c6c277a0e9"}, "downloads": -1, "filename": "simple_arcgis_wrapper-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "203f0503667e3de5be4cb92e7bb47ace", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10983, "upload_time": "2020-01-29T09:33:19", "upload_time_iso_8601": "2020-01-29T09:33:19.398640Z", "url": "https://files.pythonhosted.org/packages/15/0d/e4d683055a77d16de27221cd486b17cb4cd5b161d5105af7afb6ab1b6fe3/simple_arcgis_wrapper-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e80369f9b2cd4daa7d4e6d462b84d933", "sha256": "ec18209817441f56c868a73fa713354f0c24f075856ddb4832cea58ce0017b93"}, "downloads": -1, "filename": "simple-arcgis-wrapper-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e80369f9b2cd4daa7d4e6d462b84d933", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9992, "upload_time": "2020-01-29T09:33:20", "upload_time_iso_8601": "2020-01-29T09:33:20.806170Z", "url": "https://files.pythonhosted.org/packages/77/8b/1989efe24a9e0959cfdb1c2bc0ee8ba7ec2bf76ce9a8c8ccbe40b452cbee/simple-arcgis-wrapper-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "0adbbcdec7055e60a0d62cc01c6392cf", "sha256": "bc914c115aa4afcc3b498761f624b4b6eabef70b17778cc02ebea40eb9c80dde"}, "downloads": -1, "filename": "simple_arcgis_wrapper-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0adbbcdec7055e60a0d62cc01c6392cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10920, "upload_time": "2020-01-29T10:13:31", "upload_time_iso_8601": "2020-01-29T10:13:31.224890Z", "url": "https://files.pythonhosted.org/packages/bf/fe/f59c9a64279abaec46c1637e044bc94385ab3ce16e7cbfb8707fdc464c8b/simple_arcgis_wrapper-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6484b98eea524084211945acdf8d61c6", "sha256": "8cea22eaa705d47e711373169c729906a1a1cf3cd8e2c75be6b86b36049dd282"}, "downloads": -1, "filename": "simple-arcgis-wrapper-1.0.2.tar.gz", "has_sig": false, "md5_digest": "6484b98eea524084211945acdf8d61c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9922, "upload_time": "2020-01-29T10:13:33", "upload_time_iso_8601": "2020-01-29T10:13:33.138775Z", "url": "https://files.pythonhosted.org/packages/55/05/46c90443991f367d944d6cf8e01836b497722bc59ba106f292642227c516/simple-arcgis-wrapper-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "abfaefd26c055fcd367ea48dc9931b55", "sha256": "24bcbd19a8ebd145ab6f1c63cbf1ad720ebc11948079bdfc93be4464adb83035"}, "downloads": -1, "filename": "simple_arcgis_wrapper-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "abfaefd26c055fcd367ea48dc9931b55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12685, "upload_time": "2020-02-19T08:39:33", "upload_time_iso_8601": "2020-02-19T08:39:33.703800Z", "url": "https://files.pythonhosted.org/packages/6b/f7/9d2ef47fc905b8b8eb24f19e04fb01a75af1574e81b233a884ef06664083/simple_arcgis_wrapper-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbb9695f23d1ae4d9e121974facbea10", "sha256": "0b47f44601c86151dd7e48eadc657595a72d468a5f1b8d2e00d5b7f76b875c53"}, "downloads": -1, "filename": "simple-arcgis-wrapper-1.0.4.tar.gz", "has_sig": false, "md5_digest": "cbb9695f23d1ae4d9e121974facbea10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13251, "upload_time": "2020-02-19T08:39:36", "upload_time_iso_8601": "2020-02-19T08:39:36.608846Z", "url": "https://files.pythonhosted.org/packages/91/38/d9f985ccae3123db1b700e92dc02e243e28ec5ec2742a97a7be84bf71f79/simple-arcgis-wrapper-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "abfaefd26c055fcd367ea48dc9931b55", "sha256": "24bcbd19a8ebd145ab6f1c63cbf1ad720ebc11948079bdfc93be4464adb83035"}, "downloads": -1, "filename": "simple_arcgis_wrapper-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "abfaefd26c055fcd367ea48dc9931b55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 12685, "upload_time": "2020-02-19T08:39:33", "upload_time_iso_8601": "2020-02-19T08:39:33.703800Z", "url": "https://files.pythonhosted.org/packages/6b/f7/9d2ef47fc905b8b8eb24f19e04fb01a75af1574e81b233a884ef06664083/simple_arcgis_wrapper-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cbb9695f23d1ae4d9e121974facbea10", "sha256": "0b47f44601c86151dd7e48eadc657595a72d468a5f1b8d2e00d5b7f76b875c53"}, "downloads": -1, "filename": "simple-arcgis-wrapper-1.0.4.tar.gz", "has_sig": false, "md5_digest": "cbb9695f23d1ae4d9e121974facbea10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13251, "upload_time": "2020-02-19T08:39:36", "upload_time_iso_8601": "2020-02-19T08:39:36.608846Z", "url": "https://files.pythonhosted.org/packages/91/38/d9f985ccae3123db1b700e92dc02e243e28ec5ec2742a97a7be84bf71f79/simple-arcgis-wrapper-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:03 2020"}