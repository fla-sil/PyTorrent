{"info": {"author": "Qordoba", "author_email": "Sam Havens <sam.havens@qordoba.com>, Melisa Stal <melisa@qordoba.com>", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Text Processing :: Linguistic", "Typing :: Typed"], "description": "# replaCy\n\nWe found that in multiple projects we had duplicate code for using spaCy\u2019s blazing fast matcher to do the same thing: Match-Replace-Grammaticalize. So we wrote replaCy!\n\n* Match - spaCy\u2019s matcher is great, and lets you match on text, shape, POS, dependency parse, and other features. We extended this with \u201cmatch hooks\u201d,  predicates that get used in the callback function to further refine a match.\n* Replace - Not built into spaCy\u2019s matcher syntax, but easily added. You often want to replace a matched word with some other term.\n* Grammaticalize - If you match on \u201dLEMMA\u201d: \u201cdance\u201d, and replace with suggestions: [\"sing\"], but the actual match is danced, you need to conjugate \u201csing\u201d appropriately. This is the \u201ckiller feature\u201d of replaCy\n\n## Requirements\n\n* `spacy >= 2.0` (not installed by default, but replaCy needs to be instantiated with an `nlp` object)\n\n## Installation\n\n`pip install replacy`\n\n## Quick start\n\n```python\nfrom replacy import ReplaceMatcher\nfrom replacy.db import load_json\nimport spacy\n\n\nmatch_dict = load_json('/path/to/your/match/dict.json')\n# load nlp spacy model of your choice\nnlp = spacy.load(\"en_core_web_sm\")\n\nrmatcher = ReplaceMatcher(nlp)\n\n# get inflected suggestions\n# look up the first suggestion\nspan = rmatcher(\"She extracts revenge.\")[0]\nspan._.suggestions\n# >>> ['exacts']\n```\n\n## match_dict.json format\n\nHere is a minimal `match_dict.json`:\n\n```json\n{\n    \"extract-revenge\": {\n        \"patterns\": [\n            {\n                \"LEMMA\": \"extract\",\n                \"TEMPLATE_ID\": 1\n            }\n        ],\n        \"suggestions\": [\n            [\n                {\n                    \"TEXT\": \"exact\",\n                    \"FROM_TEMPLATE_ID\": 1\n                }\n            ]\n        ],\n        \"match_hook\": [\n            {\n                \"name\": \"succeeded_by_phrase\",\n                \"args\": \"revenge\",\n                \"match_if_predicate_is\": true\n            }\n        ],\n        \"test\": {\n            \"positive\": [\n                \"And at the same time extract revenge on those he so despises?\",\n                \"Watch as Tampa Bay extracts revenge against his former Los Angeles Rams team.\"\n            ],\n            \"negative\": [\n                \"Mother flavours her custards with lemon extract.\"\n            ]\n        }\n    }\n}\n```\n\n* The top-level key, `extract-revenge` must be unique (as must any dictionary key). The name is used as a unique identifier, but never shown.\n\n* The inner keys are as follows\n  * `patterns` - A list of [spaCy Matcher patterns](https://spacy.io/usage/rule-based-matching#matcher) (actually, a superset of a spaCy matcher pattern), which may look like e.g. `[{\"LOWER\": \"hello\"}, {\"IS_PUNCT\": True}, {\"LOWER\": \"world\"}]`. The added syntax which makes it a superset is being able to add `\"TEMPLATE_ID\": int` to some of the dicts. This labels that part of the match as a template to be inflected, such as a verb to conjugate or a noun to pluralize. In the above example, we label the lemma `extract` as having `TEMPLATE_ID` of `1`.\n  * `suggestions` - a list of lists of dicts. The dicts have 1-2 keys: either just `TEXT`, which will be used in the suggestion, or `\"TEXT\": \"sometext\"` and `\"FROM_TEMPLATE_ID\": int`, which will apply the conjugation/pluralization of the `TEMPLATE_ID` with value `int` to `\"TEXT\"`. In the above example, suggestions is `[[{\"TEXT\":\"exact\",\"FROM_TEMPLATE_ID\":1}]]`, which means we will match the conjugation of `exact` to the conjugation of `extracts`, from the step above.\n  * `match_hook` - (despite the singular name) A list of \"match hooks\". These are Python functions which refine matches. See the following section.\n  * `test` - has `positive` and `negative` keys. `positive` is a list of strings which this rule SHOULD match against, `negative` is a list of strings which SHOULD NOT match. Used for testing now, but we have plans to infer rules from this section.\n  * (optional) `comment` - a string for other humans to read; ignored by replaCy\n  * (optional) `anything` - you can add any extra structure here, and replaCy will attempt to tag matching spans with this information using the spaCy custom extension attributes namespace `span._` ([spaCy docs](https://spacy.io/usage/processing-pipelines#custom-components-attributes)). For example, you can add the key `oogly` with value `\"boogly\"` for the match `\"LOWER\": \"secret password\"`. Then if you call `span = rmatcher(\"This is the secret password.\")[0]`, then `span._.oogly == \"boogly\"`.\n  replaCy tries to be cool about default values with user-defined extensions. If you have a match with the key-value pair `\"coolnes\": 10`, replaCy will infer that `coolness` is an `int`. When it adds `coolness` to all spaCy spans, it will make it so `span._.coolness` defaults to `0`. This way, you can check all spans for `if span._.coolness > THRESHOLD` and not cause an `AttributeError`. You can change this the way you would change any spaCy custom attribute, e.g.\n\n  ```python\n    from spacy.tokens import Span\n\n    Span.set_extension(\"coolness\", default=9000)\n  ```\n\nBetween match hooks and custom span attributes, replaCy is incredibly powerful, and allows you to control your NLP application's behavior from a single JSON file.\n\n### Match hooks\n\nMatch hooks are powerful and somewhat confusing. replaCy provides a starting kit of hooks, but since they are just Python functions, you can supply your own. To see all the built in hooks, see [default_match_hooks.py](https://github.com/Qordobacode/replaCy/blob/master/replacy/default_match_hooks.py). An example is `preceded_by_pos`, which is copied here in full. Notice the signature of the function; if this interests you, see the next subsection, \"Hooks Return Predicates\".\n\n```python\nSpacyMatchPredicate = Callable[[Doc, int, int], bool]\n\ndef preceded_by_pos(pos) -> SpacyMatchPredicate:\n    if isinstance(pos, list):\n        pos_list = pos\n\n        def _preceded_by_pos(doc, start, end):\n            bools = [doc[start - 1].pos_ == p for p in pos_list]\n            return any(bools)\n\n        return _preceded_by_pos\n    elif isinstance(pos, str):\n        return lambda doc, start, end: doc[start - 1].pos_ == pos\n    else:\n        raise ValueError(\n            \"args of preceded_by_pos should be a string or list of strings\"\n        )\n```\n\nThis allows us to put in our `match_dict.json` a hook that effectively says \"only do this spaCy match is the preceding POS tag is `pos`, where `pos` is either a string, like `\"NOUN\"`, or a list such as `[\"NOUN\", \"PROPN\"]`. Here is the most complicated replaCy match I have written, which demonstrates the use of many hooks:\n\n```json\n{\n    \"require\": {\n        \"patterns\": [\n            {\n                \"LEMMA\": \"require\",\n                \"POS\": \"VERB\",\n                \"DEP\": {\n                    \"NOT_IN\": [\n                        \"amod\"\n                    ]\n                },\n                \"TEMPLATE_ID\": 1\n            }\n        ],\n        \"suggestions\": [\n            [\n                {\n                    \"TEXT\": \"need\",\n                    \"FROM_TEMPLATE_ID\": 1\n                }\n            ]\n        ],\n        \"match_hook\": [\n            {\n                \"name\": \"succeeded_by_phrase\",\n                \"args\": \"that\",\n                \"match_if_predicate_is\": false\n            },\n            {\n                \"name\": \"succeeded_by_phrase\",\n                \"args\": \"of\",\n                \"match_if_predicate_is\": false\n            },\n            {\n                \"name\": \"preceded_by_dep\",\n                \"args\": \"auxpass\",\n                \"match_if_predicate_is\": false\n            },\n            {\n                \"name\": \"relative_x_is_y\",\n                \"args\": [\n                    \"children\",\n                    \"dep\",\n                    \"csubj\"\n                ],\n                \"match_if_predicate_is\": false\n            }\n        ],\n        \"test\": {\n            \"positive\": [\n                \"Those require more consideration.\",\n                \"Your condition is serious and requires surgery.\",\n                \"I require stimulants to function.\"\n            ],\n            \"negative\": [\n                \"My pride requires of me that I tell you to piss off.\",\n                \"Is there any required reading?\",\n                \"I am required to tell you that I am a registered Mex offender - I make horrible nachos.\",\n                \"Deciphering the code requires an expert.\",\n                \"Making small models requires manual skill.\"\n            ]\n        },\n        \"comment\": \"The pattern includes DEP NOT_IN amod because of expresssions like 'required reading' and the relative_x_is_y hook is because this doesn't work for clausal subjects\"\n    }\n}\n```\n\n#### Hooks Return Predicates\n\nTo be a match hook, a Python function must take 1 or 0 arguments, and return a predicate (function which returns a boolean) with inputs `(doc, start, end)`. If you read about the spaCy Matcher, you will understand why the arguments are `doc, start, end`. The reason match hooks RETURN a predicate, rather than BEING a predicate is for flexibility. It allows us to have `preceded_by_pos` instead of `preceded_by_noun`, `preceded_by_adj`, etc.\n\nThe structure of a match hook is:\n\n* `name`, the name of the Python function\n* (optional) `args` - the argument of the function. Yes, argument, singular - match hooks take one or zero arguments. If you need more than one argument, have the hook accept a dict or list.\n* `match_if_predicate_is` - a boolean which flips the behavior from \"if this predicate is true, then match\" or \"if this predicate is false, then match\". This is just to make naming functions easier. For example, we have `preceded_by_pos` as a hook, with `arg: \"NOUN\"`, and `match_if_predicate_is` set to `true`. This hook is much more sensible than `not_preceded_by_pos`, with args `[every, pos, but, NOUN]`.\n\nTo use your own match hooks, instantiate the replace matcher with a module containing them, e.g.\n\n```python\n    from replacy import ReplaceMatcher\n    from replacy.db import load_json\n    import spacy\n\n    # import the module with your hooks\n    # the name doesn't matter, it just needs to be a python module\n    import my.custom_hooks as ch\n\n\n    nlp = spacy.load(\"en_core_web_sm\")\n    rmatch_dict = load_json(\"./resources/match_dict.json\")\n    # pass replaCy your custom hooks here, and then they are usable in your match_dict.json\n    rmatcher = ReplaceMatcher(nlp, rmatch_dict, custom_match_hooks=ch)\n    span = rmatcher(\"She excepts her fate.\")[0]\n    span._.suggestions\n    # >>> ['acccepts']\n```\n\n## Testing match_dict (JSON schema validation)\n\n```python\nfrom replacy import ReplaceMatcher\nfrom replacy.db import load_json\n\nmatch_dict = load_json('/path/to/your/match/dict')\nReplaceMatcher.validate_match_dict(match_dict)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Qordobacode/replaCy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "replacy", "package_url": "https://pypi.org/project/replacy/", "platform": "", "project_url": "https://pypi.org/project/replacy/", "project_urls": {"Homepage": "https://github.com/Qordobacode/replaCy"}, "release_url": "https://pypi.org/project/replacy/0.18.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "ReplaCy = spaCy Matcher + pyInflect. Create rules, correct sentences.", "version": "0.18.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>replaCy</h1>\n<p>We found that in multiple projects we had duplicate code for using spaCy\u2019s blazing fast matcher to do the same thing: Match-Replace-Grammaticalize. So we wrote replaCy!</p>\n<ul>\n<li>Match - spaCy\u2019s matcher is great, and lets you match on text, shape, POS, dependency parse, and other features. We extended this with \u201cmatch hooks\u201d,  predicates that get used in the callback function to further refine a match.</li>\n<li>Replace - Not built into spaCy\u2019s matcher syntax, but easily added. You often want to replace a matched word with some other term.</li>\n<li>Grammaticalize - If you match on \u201dLEMMA\u201d: \u201cdance\u201d, and replace with suggestions: [\"sing\"], but the actual match is danced, you need to conjugate \u201csing\u201d appropriately. This is the \u201ckiller feature\u201d of replaCy</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li><code>spacy &gt;= 2.0</code> (not installed by default, but replaCy needs to be instantiated with an <code>nlp</code> object)</li>\n</ul>\n<h2>Installation</h2>\n<p><code>pip install replacy</code></p>\n<h2>Quick start</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">replacy</span> <span class=\"kn\">import</span> <span class=\"n\">ReplaceMatcher</span>\n<span class=\"kn\">from</span> <span class=\"nn\">replacy.db</span> <span class=\"kn\">import</span> <span class=\"n\">load_json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">spacy</span>\n\n\n<span class=\"n\">match_dict</span> <span class=\"o\">=</span> <span class=\"n\">load_json</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/your/match/dict.json'</span><span class=\"p\">)</span>\n<span class=\"c1\"># load nlp spacy model of your choice</span>\n<span class=\"n\">nlp</span> <span class=\"o\">=</span> <span class=\"n\">spacy</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"en_core_web_sm\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">rmatcher</span> <span class=\"o\">=</span> <span class=\"n\">ReplaceMatcher</span><span class=\"p\">(</span><span class=\"n\">nlp</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get inflected suggestions</span>\n<span class=\"c1\"># look up the first suggestion</span>\n<span class=\"n\">span</span> <span class=\"o\">=</span> <span class=\"n\">rmatcher</span><span class=\"p\">(</span><span class=\"s2\">\"She extracts revenge.\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">span</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">suggestions</span>\n<span class=\"c1\"># &gt;&gt;&gt; ['exacts']</span>\n</pre>\n<h2>match_dict.json format</h2>\n<p>Here is a minimal <code>match_dict.json</code>:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"extract-revenge\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"patterns\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"LEMMA\"</span><span class=\"p\">:</span> <span class=\"s2\">\"extract\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"TEMPLATE_ID\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"suggestions\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">\"TEXT\"</span><span class=\"p\">:</span> <span class=\"s2\">\"exact\"</span><span class=\"p\">,</span>\n                    <span class=\"nt\">\"FROM_TEMPLATE_ID\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"match_hook\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"succeeded_by_phrase\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"s2\">\"revenge\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"match_if_predicate_is\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"test\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"positive\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"And at the same time extract revenge on those he so despises?\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"Watch as Tampa Bay extracts revenge against his former Los Angeles Rams team.\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">\"negative\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"Mother flavours her custards with lemon extract.\"</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<ul>\n<li>\n<p>The top-level key, <code>extract-revenge</code> must be unique (as must any dictionary key). The name is used as a unique identifier, but never shown.</p>\n</li>\n<li>\n<p>The inner keys are as follows</p>\n<ul>\n<li><code>patterns</code> - A list of <a href=\"https://spacy.io/usage/rule-based-matching#matcher\" rel=\"nofollow\">spaCy Matcher patterns</a> (actually, a superset of a spaCy matcher pattern), which may look like e.g. <code>[{\"LOWER\": \"hello\"}, {\"IS_PUNCT\": True}, {\"LOWER\": \"world\"}]</code>. The added syntax which makes it a superset is being able to add <code>\"TEMPLATE_ID\": int</code> to some of the dicts. This labels that part of the match as a template to be inflected, such as a verb to conjugate or a noun to pluralize. In the above example, we label the lemma <code>extract</code> as having <code>TEMPLATE_ID</code> of <code>1</code>.</li>\n<li><code>suggestions</code> - a list of lists of dicts. The dicts have 1-2 keys: either just <code>TEXT</code>, which will be used in the suggestion, or <code>\"TEXT\": \"sometext\"</code> and <code>\"FROM_TEMPLATE_ID\": int</code>, which will apply the conjugation/pluralization of the <code>TEMPLATE_ID</code> with value <code>int</code> to <code>\"TEXT\"</code>. In the above example, suggestions is <code>[[{\"TEXT\":\"exact\",\"FROM_TEMPLATE_ID\":1}]]</code>, which means we will match the conjugation of <code>exact</code> to the conjugation of <code>extracts</code>, from the step above.</li>\n<li><code>match_hook</code> - (despite the singular name) A list of \"match hooks\". These are Python functions which refine matches. See the following section.</li>\n<li><code>test</code> - has <code>positive</code> and <code>negative</code> keys. <code>positive</code> is a list of strings which this rule SHOULD match against, <code>negative</code> is a list of strings which SHOULD NOT match. Used for testing now, but we have plans to infer rules from this section.</li>\n<li>(optional) <code>comment</code> - a string for other humans to read; ignored by replaCy</li>\n<li>(optional) <code>anything</code> - you can add any extra structure here, and replaCy will attempt to tag matching spans with this information using the spaCy custom extension attributes namespace <code>span._</code> (<a href=\"https://spacy.io/usage/processing-pipelines#custom-components-attributes\" rel=\"nofollow\">spaCy docs</a>). For example, you can add the key <code>oogly</code> with value <code>\"boogly\"</code> for the match <code>\"LOWER\": \"secret password\"</code>. Then if you call <code>span = rmatcher(\"This is the secret password.\")[0]</code>, then <code>span._.oogly == \"boogly\"</code>.\nreplaCy tries to be cool about default values with user-defined extensions. If you have a match with the key-value pair <code>\"coolnes\": 10</code>, replaCy will infer that <code>coolness</code> is an <code>int</code>. When it adds <code>coolness</code> to all spaCy spans, it will make it so <code>span._.coolness</code> defaults to <code>0</code>. This way, you can check all spans for <code>if span._.coolness &gt; THRESHOLD</code> and not cause an <code>AttributeError</code>. You can change this the way you would change any spaCy custom attribute, e.g.</li>\n</ul>\n<pre>  <span class=\"kn\">from</span> <span class=\"nn\">spacy.tokens</span> <span class=\"kn\">import</span> <span class=\"n\">Span</span>\n\n  <span class=\"n\">Span</span><span class=\"o\">.</span><span class=\"n\">set_extension</span><span class=\"p\">(</span><span class=\"s2\">\"coolness\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">9000</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<p>Between match hooks and custom span attributes, replaCy is incredibly powerful, and allows you to control your NLP application's behavior from a single JSON file.</p>\n<h3>Match hooks</h3>\n<p>Match hooks are powerful and somewhat confusing. replaCy provides a starting kit of hooks, but since they are just Python functions, you can supply your own. To see all the built in hooks, see <a href=\"https://github.com/Qordobacode/replaCy/blob/master/replacy/default_match_hooks.py\" rel=\"nofollow\">default_match_hooks.py</a>. An example is <code>preceded_by_pos</code>, which is copied here in full. Notice the signature of the function; if this interests you, see the next subsection, \"Hooks Return Predicates\".</p>\n<pre><span class=\"n\">SpacyMatchPredicate</span> <span class=\"o\">=</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Doc</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">preceded_by_pos</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">SpacyMatchPredicate</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n        <span class=\"n\">pos_list</span> <span class=\"o\">=</span> <span class=\"n\">pos</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">_preceded_by_pos</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">):</span>\n            <span class=\"n\">bools</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"n\">start</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pos_</span> <span class=\"o\">==</span> <span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">pos_list</span><span class=\"p\">]</span>\n            <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">bools</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">_preceded_by_pos</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">doc</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">doc</span><span class=\"p\">[</span><span class=\"n\">start</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pos_</span> <span class=\"o\">==</span> <span class=\"n\">pos</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"args of preceded_by_pos should be a string or list of strings\"</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>This allows us to put in our <code>match_dict.json</code> a hook that effectively says \"only do this spaCy match is the preceding POS tag is <code>pos</code>, where <code>pos</code> is either a string, like <code>\"NOUN\"</code>, or a list such as <code>[\"NOUN\", \"PROPN\"]</code>. Here is the most complicated replaCy match I have written, which demonstrates the use of many hooks:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"require\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"patterns\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"LEMMA\"</span><span class=\"p\">:</span> <span class=\"s2\">\"require\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"POS\"</span><span class=\"p\">:</span> <span class=\"s2\">\"VERB\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"DEP\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"nt\">\"NOT_IN\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                        <span class=\"s2\">\"amod\"</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">},</span>\n                <span class=\"nt\">\"TEMPLATE_ID\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"suggestions\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">\"TEXT\"</span><span class=\"p\">:</span> <span class=\"s2\">\"need\"</span><span class=\"p\">,</span>\n                    <span class=\"nt\">\"FROM_TEMPLATE_ID\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"match_hook\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"succeeded_by_phrase\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"s2\">\"that\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"match_if_predicate_is\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"succeeded_by_phrase\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"s2\">\"of\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"match_if_predicate_is\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"preceded_by_dep\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"s2\">\"auxpass\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"match_if_predicate_is\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"relative_x_is_y\"</span><span class=\"p\">,</span>\n                <span class=\"nt\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"s2\">\"children\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"dep\"</span><span class=\"p\">,</span>\n                    <span class=\"s2\">\"csubj\"</span>\n                <span class=\"p\">],</span>\n                <span class=\"nt\">\"match_if_predicate_is\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"test\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">\"positive\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"Those require more consideration.\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"Your condition is serious and requires surgery.\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"I require stimulants to function.\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">\"negative\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"My pride requires of me that I tell you to piss off.\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"Is there any required reading?\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"I am required to tell you that I am a registered Mex offender - I make horrible nachos.\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"Deciphering the code requires an expert.\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"Making small models requires manual skill.\"</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"comment\"</span><span class=\"p\">:</span> <span class=\"s2\">\"The pattern includes DEP NOT_IN amod because of expresssions like 'required reading' and the relative_x_is_y hook is because this doesn't work for clausal subjects\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<h4>Hooks Return Predicates</h4>\n<p>To be a match hook, a Python function must take 1 or 0 arguments, and return a predicate (function which returns a boolean) with inputs <code>(doc, start, end)</code>. If you read about the spaCy Matcher, you will understand why the arguments are <code>doc, start, end</code>. The reason match hooks RETURN a predicate, rather than BEING a predicate is for flexibility. It allows us to have <code>preceded_by_pos</code> instead of <code>preceded_by_noun</code>, <code>preceded_by_adj</code>, etc.</p>\n<p>The structure of a match hook is:</p>\n<ul>\n<li><code>name</code>, the name of the Python function</li>\n<li>(optional) <code>args</code> - the argument of the function. Yes, argument, singular - match hooks take one or zero arguments. If you need more than one argument, have the hook accept a dict or list.</li>\n<li><code>match_if_predicate_is</code> - a boolean which flips the behavior from \"if this predicate is true, then match\" or \"if this predicate is false, then match\". This is just to make naming functions easier. For example, we have <code>preceded_by_pos</code> as a hook, with <code>arg: \"NOUN\"</code>, and <code>match_if_predicate_is</code> set to <code>true</code>. This hook is much more sensible than <code>not_preceded_by_pos</code>, with args <code>[every, pos, but, NOUN]</code>.</li>\n</ul>\n<p>To use your own match hooks, instantiate the replace matcher with a module containing them, e.g.</p>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">replacy</span> <span class=\"kn\">import</span> <span class=\"n\">ReplaceMatcher</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">replacy.db</span> <span class=\"kn\">import</span> <span class=\"n\">load_json</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">spacy</span>\n\n    <span class=\"c1\"># import the module with your hooks</span>\n    <span class=\"c1\"># the name doesn't matter, it just needs to be a python module</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">my.custom_hooks</span> <span class=\"k\">as</span> <span class=\"nn\">ch</span>\n\n\n    <span class=\"n\">nlp</span> <span class=\"o\">=</span> <span class=\"n\">spacy</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"en_core_web_sm\"</span><span class=\"p\">)</span>\n    <span class=\"n\">rmatch_dict</span> <span class=\"o\">=</span> <span class=\"n\">load_json</span><span class=\"p\">(</span><span class=\"s2\">\"./resources/match_dict.json\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># pass replaCy your custom hooks here, and then they are usable in your match_dict.json</span>\n    <span class=\"n\">rmatcher</span> <span class=\"o\">=</span> <span class=\"n\">ReplaceMatcher</span><span class=\"p\">(</span><span class=\"n\">nlp</span><span class=\"p\">,</span> <span class=\"n\">rmatch_dict</span><span class=\"p\">,</span> <span class=\"n\">custom_match_hooks</span><span class=\"o\">=</span><span class=\"n\">ch</span><span class=\"p\">)</span>\n    <span class=\"n\">span</span> <span class=\"o\">=</span> <span class=\"n\">rmatcher</span><span class=\"p\">(</span><span class=\"s2\">\"She excepts her fate.\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">span</span><span class=\"o\">.</span><span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">suggestions</span>\n    <span class=\"c1\"># &gt;&gt;&gt; ['acccepts']</span>\n</pre>\n<h2>Testing match_dict (JSON schema validation)</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">replacy</span> <span class=\"kn\">import</span> <span class=\"n\">ReplaceMatcher</span>\n<span class=\"kn\">from</span> <span class=\"nn\">replacy.db</span> <span class=\"kn\">import</span> <span class=\"n\">load_json</span>\n\n<span class=\"n\">match_dict</span> <span class=\"o\">=</span> <span class=\"n\">load_json</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/your/match/dict'</span><span class=\"p\">)</span>\n<span class=\"n\">ReplaceMatcher</span><span class=\"o\">.</span><span class=\"n\">validate_match_dict</span><span class=\"p\">(</span><span class=\"n\">match_dict</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7147189, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "677df7422acab2545b9988fff53be070", "sha256": "e3fa768ef626d1954bb60a352d491b97fd67443503431de7d0d0286ed39fa3f4"}, "downloads": -1, "filename": "replacy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "677df7422acab2545b9988fff53be070", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4566, "upload_time": "2019-12-18T17:50:48", "upload_time_iso_8601": "2019-12-18T17:50:48.604791Z", "url": "https://files.pythonhosted.org/packages/d9/ad/2736b171faf5f0bfa84b9898536e346b56e3591e20f4f34f34107e219d4c/replacy-0.1.0.tar.gz", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "b5fa342488cb2b5625631246b34ede8e", "sha256": "d552a6bb46bd4f375565ab59d65b053436ec69af1331eefbdaf1fa53a4d300ff"}, "downloads": -1, "filename": "replacy-0.10.0.tar.gz", "has_sig": false, "md5_digest": "b5fa342488cb2b5625631246b34ede8e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6876, "upload_time": "2020-03-02T20:16:52", "upload_time_iso_8601": "2020-03-02T20:16:52.151552Z", "url": "https://files.pythonhosted.org/packages/92/69/6843ee3a7e1b380f90e34ac122bd20ab8f9e13ee68402ef6f8321d7ff685/replacy-0.10.0.tar.gz", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "3fc9c4ca86ff28a87f6b198cbc1847cf", "sha256": "347d6b00df863a0d3df3b7c5c2f76a9e1046194f3a02b76b6b6041fb8ddc5d53"}, "downloads": -1, "filename": "replacy-0.11.0.tar.gz", "has_sig": false, "md5_digest": "3fc9c4ca86ff28a87f6b198cbc1847cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7185, "upload_time": "2020-03-09T23:15:56", "upload_time_iso_8601": "2020-03-09T23:15:56.356493Z", "url": "https://files.pythonhosted.org/packages/bb/9d/032a9530e322a40fd2e4e6de44df0702abeede26ed9158d789dddb63ccd3/replacy-0.11.0.tar.gz", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "8e8edb7ef80cfa61b56a417ff00e9da6", "sha256": "4841a6594cd7b69fd31058d5800545dab48264e0a1b93fa53a2c994e26d23fa9"}, "downloads": -1, "filename": "replacy-0.12.0.tar.gz", "has_sig": false, "md5_digest": "8e8edb7ef80cfa61b56a417ff00e9da6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7971, "upload_time": "2020-03-10T02:30:39", "upload_time_iso_8601": "2020-03-10T02:30:39.541997Z", "url": "https://files.pythonhosted.org/packages/2f/d2/66c3717cd3dde25d4d74973746e6d2c7b958f333db63faff5e7c2152dd81/replacy-0.12.0.tar.gz", "yanked": false}], "0.13.0": [{"comment_text": "", "digests": {"md5": "e67cc683505d5db8d5a9dea93b6fbc34", "sha256": "bf895f8c829883b1af67d4b73fe768187fa47f98b3f13f5138d410b682bc2b60"}, "downloads": -1, "filename": "replacy-0.13.0.tar.gz", "has_sig": false, "md5_digest": "e67cc683505d5db8d5a9dea93b6fbc34", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8643, "upload_time": "2020-03-10T22:47:28", "upload_time_iso_8601": "2020-03-10T22:47:28.414782Z", "url": "https://files.pythonhosted.org/packages/78/ef/5aa26e08986b39db8102f60fd5b46b4c0082a7dee3be15eb91ae380e3d42/replacy-0.13.0.tar.gz", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "2b9f24563645fa72a7617d13cf5bbd00", "sha256": "ab63692b6e18123125cf88c2db871a036e431c374444225ae0e803bfb6c625b8"}, "downloads": -1, "filename": "replacy-0.14.0.tar.gz", "has_sig": false, "md5_digest": "2b9f24563645fa72a7617d13cf5bbd00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8594, "upload_time": "2020-03-25T01:01:27", "upload_time_iso_8601": "2020-03-25T01:01:27.994784Z", "url": "https://files.pythonhosted.org/packages/3a/ce/b962007a3178cd7ba0b8023492657cd04469aab1da59674d531b2d3aa5b3/replacy-0.14.0.tar.gz", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "c8e4952d6200e8215cc39868f9198061", "sha256": "5dbc8a1e0bf87763c168473b95646a817ab926fb72ccdf20b298d3def792ecea"}, "downloads": -1, "filename": "replacy-0.15.0.tar.gz", "has_sig": false, "md5_digest": "c8e4952d6200e8215cc39868f9198061", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 8684, "upload_time": "2020-03-25T01:37:58", "upload_time_iso_8601": "2020-03-25T01:37:58.498080Z", "url": "https://files.pythonhosted.org/packages/66/d4/f01c6ed280c8c34d1c8c394a138cb0a0db7216206385ecece358b8e5d41a/replacy-0.15.0.tar.gz", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "91225d621b3d76471e6103857feedbcd", "sha256": "36d19d584309368161e36153a1216bf9497e56147ad8db752f043401cf15f475"}, "downloads": -1, "filename": "replacy-0.16.0.tar.gz", "has_sig": false, "md5_digest": "91225d621b3d76471e6103857feedbcd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9988, "upload_time": "2020-03-25T02:16:47", "upload_time_iso_8601": "2020-03-25T02:16:47.939037Z", "url": "https://files.pythonhosted.org/packages/42/7e/ef1998185487679b7ab20b44b95a9cc82e74b32d5bfc0e8fc9d77a8fe5ce/replacy-0.16.0.tar.gz", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "f681d717b88bed09520dc827641c9104", "sha256": "02aa852f3a37317b7c82fe774fd96f89ff8fa6c5aa4271a9cccf0cd68b5a057a"}, "downloads": -1, "filename": "replacy-0.18.0.tar.gz", "has_sig": false, "md5_digest": "f681d717b88bed09520dc827641c9104", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13325, "upload_time": "2020-05-01T19:07:12", "upload_time_iso_8601": "2020-05-01T19:07:12.976185Z", "url": "https://files.pythonhosted.org/packages/3e/6b/65ba147e87d26c1addc14456b7a84a60a253088fce9947615719c23c6862/replacy-0.18.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "6d4f787e29e3eacaca0d9e6537d79486", "sha256": "9481d08b7cc6ec48ac1b8098ae2c8fba646c353e6ca23efccf62ef5c0c8d21b6"}, "downloads": -1, "filename": "replacy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6d4f787e29e3eacaca0d9e6537d79486", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4578, "upload_time": "2019-12-18T17:55:47", "upload_time_iso_8601": "2019-12-18T17:55:47.164297Z", "url": "https://files.pythonhosted.org/packages/de/fc/3564c10e604406761da750aca05ea2509c7389407cf64614a944997f087d/replacy-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "b3d7ced0d849a1a0d014031bb7188fdc", "sha256": "f6bdc441fdaad9acfb72eb45aa7f48dc42e3d016abd838a67f17f792dab26579"}, "downloads": -1, "filename": "replacy-0.3.0.tar.gz", "has_sig": false, "md5_digest": "b3d7ced0d849a1a0d014031bb7188fdc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5068, "upload_time": "2019-12-18T18:04:17", "upload_time_iso_8601": "2019-12-18T18:04:17.054084Z", "url": "https://files.pythonhosted.org/packages/f7/5b/32ae654583b6df94f0bdf344cae52fe4e84488253bd7179c6d75088e4850/replacy-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "9f7cb4a7b56d724d22e2cd0bd8fadd2b", "sha256": "c46a8909bad6c8a5f60b251b3b7d028235c4ffd15b2ea3344ac9c05f0ce3ed5b"}, "downloads": -1, "filename": "replacy-0.4.0.tar.gz", "has_sig": false, "md5_digest": "9f7cb4a7b56d724d22e2cd0bd8fadd2b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5124, "upload_time": "2019-12-18T20:25:57", "upload_time_iso_8601": "2019-12-18T20:25:57.056995Z", "url": "https://files.pythonhosted.org/packages/9d/bf/9212cedbd4d9b1bce036a94d6560129e35480ee9215471ede6c9495f7852/replacy-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "3a1ffa132e2cfe17bf8c3578a58192fc", "sha256": "b5ae81df4b9a49b883fe1e7b60fa1d01f196e1a344b8223190a2262755f6b84a"}, "downloads": -1, "filename": "replacy-0.5.0.tar.gz", "has_sig": false, "md5_digest": "3a1ffa132e2cfe17bf8c3578a58192fc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5158, "upload_time": "2020-01-16T14:21:30", "upload_time_iso_8601": "2020-01-16T14:21:30.888895Z", "url": "https://files.pythonhosted.org/packages/72/c0/27dd1545a5e7adc1522b8d8708410453025901968d3d5c6c9ea8b6a10f9e/replacy-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "0b0f3fe4cd7ed1e9e07a9eafff45a265", "sha256": "629364d562292edda125e5f9e09db2a0e0e6e0560c895bd0ecdc0669031ff856"}, "downloads": -1, "filename": "replacy-0.6.0.tar.gz", "has_sig": false, "md5_digest": "0b0f3fe4cd7ed1e9e07a9eafff45a265", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5940, "upload_time": "2020-01-17T21:37:31", "upload_time_iso_8601": "2020-01-17T21:37:31.414022Z", "url": "https://files.pythonhosted.org/packages/b0/e4/78ccf10780cd2914161b2dcc2b7d60f69da092c77a07aec6a31844127569/replacy-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "5cb997bcb1d0f5036f84e9d7866e9a47", "sha256": "610dd334774c4c643313c14193823e831fce45063518aa43eee3c77b19d36be0"}, "downloads": -1, "filename": "replacy-0.7.0.tar.gz", "has_sig": false, "md5_digest": "5cb997bcb1d0f5036f84e9d7866e9a47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5947, "upload_time": "2020-01-17T22:19:55", "upload_time_iso_8601": "2020-01-17T22:19:55.213728Z", "url": "https://files.pythonhosted.org/packages/c1/a6/15ed33e5fb33ab5b0dbc25887de2a7bae5b523850d958cbf11d46e205a47/replacy-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "0f25eef32eb4e741921dd4984fe4f116", "sha256": "ed72f2a94846dc0a5f2f9ec4fa57a0e21598fc3341e2d6868d9149af75684639"}, "downloads": -1, "filename": "replacy-0.8.0.tar.gz", "has_sig": false, "md5_digest": "0f25eef32eb4e741921dd4984fe4f116", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6414, "upload_time": "2020-02-07T22:27:39", "upload_time_iso_8601": "2020-02-07T22:27:39.545475Z", "url": "https://files.pythonhosted.org/packages/1e/e3/a1e4ccdecc0fae757124fc1e45a55ed8dd68786ddceead5dff761d3415e2/replacy-0.8.0.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "adc413dcd2099c522bb13df79d123f33", "sha256": "ebd392d719479e1ca32a440896b1e12d8c6157514313c0e84021d0a345acd4df"}, "downloads": -1, "filename": "replacy-0.9.0.tar.gz", "has_sig": false, "md5_digest": "adc413dcd2099c522bb13df79d123f33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6348, "upload_time": "2020-02-07T23:42:39", "upload_time_iso_8601": "2020-02-07T23:42:39.329643Z", "url": "https://files.pythonhosted.org/packages/42/58/fc3d3eab20571b6a1469cceda51af1abe02730c17483560274155d5931ee/replacy-0.9.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f681d717b88bed09520dc827641c9104", "sha256": "02aa852f3a37317b7c82fe774fd96f89ff8fa6c5aa4271a9cccf0cd68b5a057a"}, "downloads": -1, "filename": "replacy-0.18.0.tar.gz", "has_sig": false, "md5_digest": "f681d717b88bed09520dc827641c9104", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13325, "upload_time": "2020-05-01T19:07:12", "upload_time_iso_8601": "2020-05-01T19:07:12.976185Z", "url": "https://files.pythonhosted.org/packages/3e/6b/65ba147e87d26c1addc14456b7a84a60a253088fce9947615719c23c6862/replacy-0.18.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:39 2020"}