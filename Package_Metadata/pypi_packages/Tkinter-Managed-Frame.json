{"info": {"author": "Christopher \"Arkevorkhat\" Trent", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Topic :: Software Development :: Libraries :: Tcl Extensions"], "description": "# TKinter Managed Frames\n\nAdds a Frame widget with a built in content manager.\n## Installation\nDownload from PYPI.  \n`pip install TKinterManagedFrame`  \nor  \n`python -m pip install TKinterManagedFrame`\n## Methods\n- `__init__()`\n\n  - args\n    - `master`: a tkinter widget that is capable of having children\n      - this includes `Tk`, `Frame`, and `TopLevel`\n    - `nameList`: A list of names that will be associated with empty `Frame` objects.\n    - `initialIndex`: the first `Frame` that will be displayed.\n      - if this is not present in `nameList`, a `Frame` will be created to associate with it.\n    - `options`: takes any number of keyword arguments.\n      - see the documentation for `tkinter.Frame` for the full list of options.\n- `getCurrentFrameKey()`\n  - returns the key of the currently displayed `Frame`.\n- `getCurrentFrame()`\n  - returns a reference to the currently displayed `Frame`\n- `getFrameAtKey()`\n  - args\n    - `key`: the key at which the requested `Frame` is stored\n  - returns a reference to the `Frame` at the given `key`.\n  - `@raises` `KeyError`: if `key` is not being managed\n- `addOption()`\n  - args\n    - `inputFrame`: the `Frame` object to be added\n    - `key`: the location at which `inputFrame' will be stored in the manager.\n  - `@raises KeyError`: if `key` is already being managed\n    - use `updateOption()` to change an already managed frame.\n- `updateOption()`\n  - args\n    - `inputFrame`: the frame to place at `key`\n    - `key`: the location at which to place `inputFrame`\n  - `@raises KeyError`: if `key` is not being managed\n- `changeOption()`\n  - args\n    - `key`: the the key of the desired `Frame`.\n  - `@raises KeyError` if `key` is not being managed.\n- `setOption()`\n  - args\n    - `inputFrame`: the `Frame` to be added\n    - `key`: the key at which to store `inputFrame`\n  - `@raises KeyError` if `key` is already being managed\n- `removeOption()`\n  - args\n    - `key`: the key value at which the `Frame` to be deleted is stored\n    - `default`: (defaults to an arbitrary frame), the key value of the frame that will be displayed if `key` references the currently displayed `Frame`\n  - `@raises KeyError` if either `key` or `default` are not being managed.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ChristopherJTrent/TKinterManagedFrame", "keywords": "", "license": "GNU GPL", "maintainer": "", "maintainer_email": "", "name": "Tkinter-Managed-Frame", "package_url": "https://pypi.org/project/Tkinter-Managed-Frame/", "platform": "", "project_url": "https://pypi.org/project/Tkinter-Managed-Frame/", "project_urls": {"Homepage": "https://github.com/ChristopherJTrent/TKinterManagedFrame"}, "release_url": "https://pypi.org/project/Tkinter-Managed-Frame/1.0.3/", "requires_dist": ["wheel"], "requires_python": ">=3.3", "summary": "Adds a Tkinter Frame subclass that offers simple update functionality", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>TKinter Managed Frames</h1>\n<p>Adds a Frame widget with a built in content manager.</p>\n<h2>Installation</h2>\n<p>Download from PYPI.<br>\n<code>pip install TKinterManagedFrame</code><br>\nor<br>\n<code>python -m pip install TKinterManagedFrame</code></p>\n<h2>Methods</h2>\n<ul>\n<li>\n<p><code>__init__()</code></p>\n<ul>\n<li>args\n<ul>\n<li><code>master</code>: a tkinter widget that is capable of having children\n<ul>\n<li>this includes <code>Tk</code>, <code>Frame</code>, and <code>TopLevel</code></li>\n</ul>\n</li>\n<li><code>nameList</code>: A list of names that will be associated with empty <code>Frame</code> objects.</li>\n<li><code>initialIndex</code>: the first <code>Frame</code> that will be displayed.\n<ul>\n<li>if this is not present in <code>nameList</code>, a <code>Frame</code> will be created to associate with it.</li>\n</ul>\n</li>\n<li><code>options</code>: takes any number of keyword arguments.\n<ul>\n<li>see the documentation for <code>tkinter.Frame</code> for the full list of options.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>getCurrentFrameKey()</code></p>\n<ul>\n<li>returns the key of the currently displayed <code>Frame</code>.</li>\n</ul>\n</li>\n<li>\n<p><code>getCurrentFrame()</code></p>\n<ul>\n<li>returns a reference to the currently displayed <code>Frame</code></li>\n</ul>\n</li>\n<li>\n<p><code>getFrameAtKey()</code></p>\n<ul>\n<li>args\n<ul>\n<li><code>key</code>: the key at which the requested <code>Frame</code> is stored</li>\n</ul>\n</li>\n<li>returns a reference to the <code>Frame</code> at the given <code>key</code>.</li>\n<li><code>@raises</code> <code>KeyError</code>: if <code>key</code> is not being managed</li>\n</ul>\n</li>\n<li>\n<p><code>addOption()</code></p>\n<ul>\n<li>args\n<ul>\n<li><code>inputFrame</code>: the <code>Frame</code> object to be added</li>\n<li><code>key</code>: the location at which `inputFrame' will be stored in the manager.</li>\n</ul>\n</li>\n<li><code>@raises KeyError</code>: if <code>key</code> is already being managed\n<ul>\n<li>use <code>updateOption()</code> to change an already managed frame.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>updateOption()</code></p>\n<ul>\n<li>args\n<ul>\n<li><code>inputFrame</code>: the frame to place at <code>key</code></li>\n<li><code>key</code>: the location at which to place <code>inputFrame</code></li>\n</ul>\n</li>\n<li><code>@raises KeyError</code>: if <code>key</code> is not being managed</li>\n</ul>\n</li>\n<li>\n<p><code>changeOption()</code></p>\n<ul>\n<li>args\n<ul>\n<li><code>key</code>: the the key of the desired <code>Frame</code>.</li>\n</ul>\n</li>\n<li><code>@raises KeyError</code> if <code>key</code> is not being managed.</li>\n</ul>\n</li>\n<li>\n<p><code>setOption()</code></p>\n<ul>\n<li>args\n<ul>\n<li><code>inputFrame</code>: the <code>Frame</code> to be added</li>\n<li><code>key</code>: the key at which to store <code>inputFrame</code></li>\n</ul>\n</li>\n<li><code>@raises KeyError</code> if <code>key</code> is already being managed</li>\n</ul>\n</li>\n<li>\n<p><code>removeOption()</code></p>\n<ul>\n<li>args\n<ul>\n<li><code>key</code>: the key value at which the <code>Frame</code> to be deleted is stored</li>\n<li><code>default</code>: (defaults to an arbitrary frame), the key value of the frame that will be displayed if <code>key</code> references the currently displayed <code>Frame</code></li>\n</ul>\n</li>\n<li><code>@raises KeyError</code> if either <code>key</code> or <code>default</code> are not being managed.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6766367, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "47e804e8c444b504b3f7e16e413a5ac8", "sha256": "462fd11a9cd1c5ea9a2a576fd94aaed979bf34b42ba5c92018bfc5381465c62f"}, "downloads": -1, "filename": "Tkinter_Managed_Frame-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "47e804e8c444b504b3f7e16e413a5ac8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 14714, "upload_time": "2020-03-07T03:15:26", "upload_time_iso_8601": "2020-03-07T03:15:26.941226Z", "url": "https://files.pythonhosted.org/packages/07/e7/dfadf3bc4cc8778ff31ad2a33e5ce81483e2d706f4f201fb173b081d8359/Tkinter_Managed_Frame-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fe8ff339a85e7d66ce8659f84a2c701", "sha256": "8245370322c886c4553d5d0370c4055ba4e4d2e502174f13a3909e1b3adfa91d"}, "downloads": -1, "filename": "Tkinter Managed Frame-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0fe8ff339a85e7d66ce8659f84a2c701", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 3238, "upload_time": "2020-03-07T03:15:29", "upload_time_iso_8601": "2020-03-07T03:15:29.429180Z", "url": "https://files.pythonhosted.org/packages/71/79/5db829b913a519c77ec6fe9c9558be66e8c4e3752381ea4316be5b28480a/Tkinter%20Managed%20Frame-1.0.0.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "723e57d832028b7f35710b25ae2146d1", "sha256": "84b3c5880fbef98ff7f3f0f0606b6510d7c50448b250420b51769cf7e58fbb2a"}, "downloads": -1, "filename": "Tkinter_Managed_Frame-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "723e57d832028b7f35710b25ae2146d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 14711, "upload_time": "2020-03-07T03:21:13", "upload_time_iso_8601": "2020-03-07T03:21:13.818361Z", "url": "https://files.pythonhosted.org/packages/6b/9b/7e9cd94396a82f4c646399b181c08c922052e90feb3df8e4c78bf8d761e4/Tkinter_Managed_Frame-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43deefb10ce64e96a8058c2484f99fa6", "sha256": "e52cdb193baa7255346a771846a9eee5ca88789f449ed38647a1bf1dfbf8ba6f"}, "downloads": -1, "filename": "Tkinter Managed Frame-1.0.3.tar.gz", "has_sig": false, "md5_digest": "43deefb10ce64e96a8058c2484f99fa6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 3232, "upload_time": "2020-03-07T03:21:15", "upload_time_iso_8601": "2020-03-07T03:21:15.098841Z", "url": "https://files.pythonhosted.org/packages/d1/48/38aeafa1610f546f33e1d6f5c9eddd5382aa285fe979e438c73ada8b911d/Tkinter%20Managed%20Frame-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "723e57d832028b7f35710b25ae2146d1", "sha256": "84b3c5880fbef98ff7f3f0f0606b6510d7c50448b250420b51769cf7e58fbb2a"}, "downloads": -1, "filename": "Tkinter_Managed_Frame-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "723e57d832028b7f35710b25ae2146d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 14711, "upload_time": "2020-03-07T03:21:13", "upload_time_iso_8601": "2020-03-07T03:21:13.818361Z", "url": "https://files.pythonhosted.org/packages/6b/9b/7e9cd94396a82f4c646399b181c08c922052e90feb3df8e4c78bf8d761e4/Tkinter_Managed_Frame-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43deefb10ce64e96a8058c2484f99fa6", "sha256": "e52cdb193baa7255346a771846a9eee5ca88789f449ed38647a1bf1dfbf8ba6f"}, "downloads": -1, "filename": "Tkinter Managed Frame-1.0.3.tar.gz", "has_sig": false, "md5_digest": "43deefb10ce64e96a8058c2484f99fa6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 3232, "upload_time": "2020-03-07T03:21:15", "upload_time_iso_8601": "2020-03-07T03:21:15.098841Z", "url": "https://files.pythonhosted.org/packages/d1/48/38aeafa1610f546f33e1d6f5c9eddd5382aa285fe979e438c73ada8b911d/Tkinter%20Managed%20Frame-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:36 2020"}