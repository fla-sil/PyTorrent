{"info": {"author": "Maplecroft", "author_email": "james.rutherford@maplecroft.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django"], "description": "Django CMS Self-Assessment Questionnaires\n=========================================\n\nThis is a Django app that provides some generic building blocks for\ncreating self-assessment questionnaires using Django CMS (2.4.x).\n\nQuick Start\n-----------\n\n(assuming you already have a working Django CMS project)\n\n1. Install django-cms-saq and django-taggit using pip\n\n   pip install django-cms-saq django-taggit\n\n2. Add ``cms_saq`` and ``taggit`` to your ``INSTALLED_APPS``\n\n   INSTALLED\\_APPS = ( ... 'taggit', 'cms\\_saq', ... )\n\n3. Add ``cms_saq.urls`` to your urls.py\n\n   urlpatterns = patterns('', ... url(r'^saq/',\n   include('cms\\_saq.urls'), ... )\n\n4. The django-cms-saq plugins should now be available to add to your CMS\n   pages.\n\nAvailable Plugins\n-----------------\n\nQuestions\n~~~~~~~~~\n\nThe core of django-cms-saq is the question plugins. Each question is\nuniquely identified by its **slug**. Answers to questions are be stored\nwith references to their **slug** and the users that submitted them.\n\nThere is no formal grouping of questions in the models, so there's no\nconcept of a *questionnaire*. Questions are merely plugins placed on\npages. Where you need to aggregate answers to questions (eg. for\naverage/total scores for a series of questions grouped on a page, or in\na section), you can use **tags**.\n\nQuestion Types\n^^^^^^^^^^^^^^\n\n-  **Single Choice Question**\n\nDisplays a list of radio buttons, from which a user can select a single answer.\n\n-  **Multi Choice Question**\n\nDisplays a list of checkboxes, from which a user can select *one or more* answers.\n\nScores for multi-choice questions will be the sum of the scores for all the chosen answers.\n\n-  **Free Text Question**\n\nDisplays a text input box.\n\nFree text questions are not scored.\nThey are simply for collecting information about the user (eg. name / address / company details).\n\n-  **Drop-down Question**\n\nDisplays a select box.\n\n-  **Grouped Drop-down Question**\n\nDisplays a select box with optgroups.\n\nBack / Next Buttons\n~~~~~~~~~~~~~~~~~~~\n\nThis plugin contains the javascript code that submits answers to the\n``cms_saq.views.submit`` view. This plugin **must** be included on each\npage of questions.\n\nSectioned Scoring\n~~~~~~~~~~~~~~~~~\n\nThis is a simple analysis plugin. It displays aggregate total scores for\nquestions grouped by tags. Scores are displayed as percentages of the\nmaximum score available for each group.\n\nProgress Bar\n~~~~~~~~~~~~\n\nThis simply adds a progress bar to any page that is part of the\nquestionnaire. It displays the number of answered questions out of the\ntotal available in the entire tree. You can also filter out optional\nquestions to show progress on required questions only (though this won't\ncount answers to optional questions, so might be misleading).\n\nBulk Answer\n~~~~~~~~~~~\n\nUseful for 'skip this section' type functionality, this allows the\ninsertion of a button into the page that marks all single-choice\nquestions with a given answer. It only works on questions where the\ngiven answer value is one of the options and disregards any other user\ninput.\n\nAdding your own analysis -- how to access user submissions\n----------------------------------------------------------\n\nEach user submission is stored in a ``cms_saq.models.Submission``\nobject, which references the user, the question and the answer(s), as\nwell as containing a score calculated at submission. For some guidance\non creating a plugin to display your own analysis (and how to query\nsubmissions by question tags), take a look at the source code for\n``cms_saq.cms_plugins.SectionedScoringPlugin``.\n\nIntegration with django-lazysignup\n----------------------------------\n\nIf you add ``SAQ_LAZYSIGNUP=True`` to your settings.py, the\n``cms_saq.views.submit`` view will use the ``allow_lazy_user`` decorator\nfrom django-lazysignup.\n\nSee https://github.com/danfairs/django-lazysignup for more info on lazysignup.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Maplecroft/django-cms-saq", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "django-cms-saq", "package_url": "https://pypi.org/project/django-cms-saq/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-cms-saq/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Maplecroft/django-cms-saq"}, "release_url": "https://pypi.org/project/django-cms-saq/0.2.3/", "requires_dist": null, "requires_python": null, "summary": "Self-assessment questionnaires with Django CMS.", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a Django app that provides some generic building blocks for\ncreating self-assessment questionnaires using Django CMS (2.4.x).</p>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<p>(assuming you already have a working Django CMS project)</p>\n<ol>\n<li><p>Install django-cms-saq and django-taggit using pip</p>\n<p>pip install django-cms-saq django-taggit</p>\n</li>\n<li><p>Add <tt>cms_saq</tt> and <tt>taggit</tt> to your <tt>INSTALLED_APPS</tt></p>\n<p>INSTALLED_APPS = ( \u2026 \u2018taggit\u2019, \u2018cms_saq\u2019, \u2026 )</p>\n</li>\n<li><p>Add <tt>cms_saq.urls</tt> to your urls.py</p>\n<p>urlpatterns = patterns(\u2018\u2019, \u2026 url(r\u2019^saq/\u2019,\ninclude(\u2018cms_saq.urls\u2019), \u2026 )</p>\n</li>\n<li><p>The django-cms-saq plugins should now be available to add to your CMS\npages.</p>\n</li>\n</ol>\n</div>\n<div id=\"available-plugins\">\n<h2>Available Plugins</h2>\n<div id=\"questions\">\n<h3>Questions</h3>\n<p>The core of django-cms-saq is the question plugins. Each question is\nuniquely identified by its <strong>slug</strong>. Answers to questions are be stored\nwith references to their <strong>slug</strong> and the users that submitted them.</p>\n<p>There is no formal grouping of questions in the models, so there\u2019s no\nconcept of a <em>questionnaire</em>. Questions are merely plugins placed on\npages. Where you need to aggregate answers to questions (eg. for\naverage/total scores for a series of questions grouped on a page, or in\na section), you can use <strong>tags</strong>.</p>\n<div id=\"question-types\">\n<h4>Question Types</h4>\n<ul>\n<li><strong>Single Choice Question</strong></li>\n</ul>\n<p>Displays a list of radio buttons, from which a user can select a single answer.</p>\n<ul>\n<li><strong>Multi Choice Question</strong></li>\n</ul>\n<p>Displays a list of checkboxes, from which a user can select <em>one or more</em> answers.</p>\n<p>Scores for multi-choice questions will be the sum of the scores for all the chosen answers.</p>\n<ul>\n<li><strong>Free Text Question</strong></li>\n</ul>\n<p>Displays a text input box.</p>\n<p>Free text questions are not scored.\nThey are simply for collecting information about the user (eg. name / address / company details).</p>\n<ul>\n<li><strong>Drop-down Question</strong></li>\n</ul>\n<p>Displays a select box.</p>\n<ul>\n<li><strong>Grouped Drop-down Question</strong></li>\n</ul>\n<p>Displays a select box with optgroups.</p>\n</div>\n</div>\n<div id=\"back-next-buttons\">\n<h3>Back / Next Buttons</h3>\n<p>This plugin contains the javascript code that submits answers to the\n<tt>cms_saq.views.submit</tt> view. This plugin <strong>must</strong> be included on each\npage of questions.</p>\n</div>\n<div id=\"sectioned-scoring\">\n<h3>Sectioned Scoring</h3>\n<p>This is a simple analysis plugin. It displays aggregate total scores for\nquestions grouped by tags. Scores are displayed as percentages of the\nmaximum score available for each group.</p>\n</div>\n<div id=\"progress-bar\">\n<h3>Progress Bar</h3>\n<p>This simply adds a progress bar to any page that is part of the\nquestionnaire. It displays the number of answered questions out of the\ntotal available in the entire tree. You can also filter out optional\nquestions to show progress on required questions only (though this won\u2019t\ncount answers to optional questions, so might be misleading).</p>\n</div>\n<div id=\"bulk-answer\">\n<h3>Bulk Answer</h3>\n<p>Useful for \u2018skip this section\u2019 type functionality, this allows the\ninsertion of a button into the page that marks all single-choice\nquestions with a given answer. It only works on questions where the\ngiven answer value is one of the options and disregards any other user\ninput.</p>\n</div>\n</div>\n<div id=\"adding-your-own-analysis-how-to-access-user-submissions\">\n<h2>Adding your own analysis \u2013 how to access user submissions</h2>\n<p>Each user submission is stored in a <tt>cms_saq.models.Submission</tt>\nobject, which references the user, the question and the answer(s), as\nwell as containing a score calculated at submission. For some guidance\non creating a plugin to display your own analysis (and how to query\nsubmissions by question tags), take a look at the source code for\n<tt>cms_saq.cms_plugins.SectionedScoringPlugin</tt>.</p>\n</div>\n<div id=\"integration-with-django-lazysignup\">\n<h2>Integration with django-lazysignup</h2>\n<p>If you add <tt>SAQ_LAZYSIGNUP=True</tt> to your settings.py, the\n<tt>cms_saq.views.submit</tt> view will use the <tt>allow_lazy_user</tt> decorator\nfrom django-lazysignup.</p>\n<p>See <a href=\"https://github.com/danfairs/django-lazysignup\" rel=\"nofollow\">https://github.com/danfairs/django-lazysignup</a> for more info on lazysignup.</p>\n</div>\n\n          </div>"}, "last_serial": 1071758, "releases": {"0.1.28": [{"comment_text": "", "digests": {"md5": "fb92560acfe70c1ab981c3f9b95505e5", "sha256": "b292970b376e1f7997080123e659aff89d9f9303f296e73e6cd68a51a337df6c"}, "downloads": -1, "filename": "django-cms-saq-0.1.28.tar.gz", "has_sig": false, "md5_digest": "fb92560acfe70c1ab981c3f9b95505e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38032, "upload_time": "2014-04-25T10:21:46", "upload_time_iso_8601": "2014-04-25T10:21:46.707293Z", "url": "https://files.pythonhosted.org/packages/48/7d/1c4578200560140247e433e501078632241a62ca3ca462b115b925a37e30/django-cms-saq-0.1.28.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "bf0d94b4c54b776dbbdec341cffaa0e1", "sha256": "16f264dfd7be6a25bcd766873ecb7966059e4367db0f47959cd6765d21c718f2"}, "downloads": -1, "filename": "django-cms-saq-0.2.3.tar.gz", "has_sig": false, "md5_digest": "bf0d94b4c54b776dbbdec341cffaa0e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38082, "upload_time": "2014-04-25T10:21:29", "upload_time_iso_8601": "2014-04-25T10:21:29.380199Z", "url": "https://files.pythonhosted.org/packages/c8/0e/2514225c0da94475b455b76300a189c7d4d7fe3989cabadda1beda2c7bb1/django-cms-saq-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bf0d94b4c54b776dbbdec341cffaa0e1", "sha256": "16f264dfd7be6a25bcd766873ecb7966059e4367db0f47959cd6765d21c718f2"}, "downloads": -1, "filename": "django-cms-saq-0.2.3.tar.gz", "has_sig": false, "md5_digest": "bf0d94b4c54b776dbbdec341cffaa0e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38082, "upload_time": "2014-04-25T10:21:29", "upload_time_iso_8601": "2014-04-25T10:21:29.380199Z", "url": "https://files.pythonhosted.org/packages/c8/0e/2514225c0da94475b455b76300a189c7d4d7fe3989cabadda1beda2c7bb1/django-cms-saq-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:01 2020"}