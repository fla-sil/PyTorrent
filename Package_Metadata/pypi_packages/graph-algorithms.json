{"info": {"author": "David McDougall <dam1784[at]rit.edu>", "author_email": "dam1784[at]rit.edu", "bugtrack_url": null, "classifiers": [], "description": "Common Graph Algorithms Library\r\n\r\nLibrary of graph algorithms which operate directly on python data structures.\r\n\r\nThis library uses a novel API for representing graphs.  Graph vertexes can be \r\nany hashable python value and the connectivity between vertexes is\r\nrepresented with a callback function.  This callback is named the 'adjacent' \r\nfunction.  The adjacent function has the following form:\r\n\r\ndef adjacent(vertex):\r\n    '''\r\n    This function returns all vertexes which the given vertex is connected to.\r\n    '''\r\n    return iterable-of-neighboring-vertexes\r\n\r\n\r\n\r\nContents:\r\n\r\ndepth_first_traversal()\r\n    A lazy depth first traversal\r\n\r\ndepth_first_search()\r\n    A depth first search\r\n\r\niterative_deepening_depth_first_search()\r\n    Searching infinite graphs\r\n\r\na_star()\r\n    Fast optimal pathfinding\r\n\r\ntopological_sort()\r\n    Dependency resolution.\r\n\r\nstrongly_connected_components()\r\n    Determines which areas of the graph can reach which other areas.\r\n\r\nIn the future I would like to implement more algorithms:\r\n- Minimum Spanning Tree\r\n- Min-cut/Max-flow\r\n- Substructure Search\r\n\r\n\r\nInstallation note:\r\nThis package optionally uses numpy.\r\nNumpy is used by some unit tests.\r\nNumpy is used to calculate A-stars effective branching factor (EBF).\r\nIf numpy is not available then EBF is not reported.\r\n\r\n\r\nComments and feedback are welcome\r\nSend to David McDougall  email: dam1784[at]rit.edu\r\n", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.python.org/pypi/common_algorithms", "keywords": null, "license": "The MIT License (MIT)", "maintainer": null, "maintainer_email": null, "name": "graph-algorithms", "package_url": "https://pypi.org/project/graph-algorithms/", "platform": null, "project_url": "https://pypi.org/project/graph-algorithms/", "project_urls": {"Homepage": "https://pypi.python.org/pypi/common_algorithms"}, "release_url": "https://pypi.org/project/graph-algorithms/0.1/", "requires_dist": null, "requires_python": null, "summary": "Common Graph Algorithms Library", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Common Graph Algorithms Library</p>\n<p>Library of graph algorithms which operate directly on python data structures.</p>\n<p>This library uses a novel API for representing graphs.  Graph vertexes can be\nany hashable python value and the connectivity between vertexes is\nrepresented with a callback function.  This callback is named the \u2018adjacent\u2019\nfunction.  The adjacent function has the following form:</p>\n<dl>\n<dt>def adjacent(vertex):</dt>\n<dd>\u2018\u2019\u2019\nThis function returns all vertexes which the given vertex is connected to.\n\u2018\u2019\u2019\nreturn iterable-of-neighboring-vertexes</dd>\n</dl>\n<p>Contents:</p>\n<dl>\n<dt>depth_first_traversal()</dt>\n<dd>A lazy depth first traversal</dd>\n<dt>depth_first_search()</dt>\n<dd>A depth first search</dd>\n<dt>iterative_deepening_depth_first_search()</dt>\n<dd>Searching infinite graphs</dd>\n<dt>a_star()</dt>\n<dd>Fast optimal pathfinding</dd>\n<dt>topological_sort()</dt>\n<dd>Dependency resolution.</dd>\n<dt>strongly_connected_components()</dt>\n<dd>Determines which areas of the graph can reach which other areas.</dd>\n</dl>\n<p>In the future I would like to implement more algorithms:\n- Minimum Spanning Tree\n- Min-cut/Max-flow\n- Substructure Search</p>\n<p>Installation note:\nThis package optionally uses numpy.\nNumpy is used by some unit tests.\nNumpy is used to calculate A-stars effective branching factor (EBF).\nIf numpy is not available then EBF is not reported.</p>\n<p>Comments and feedback are welcome\nSend to David McDougall  email: dam1784[at]rit.edu</p>\n\n          </div>"}, "last_serial": 2618988, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "827bc201d123ef79cf8911f752328f1f", "sha256": "cc76c5cf183c3697298295ebe57e4f9235a4a133528e9cd240db9b2018afbcc2"}, "downloads": -1, "filename": "graph_algorithms-0.1.tar.gz", "has_sig": false, "md5_digest": "827bc201d123ef79cf8911f752328f1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19566, "upload_time": "2017-02-04T14:22:57", "upload_time_iso_8601": "2017-02-04T14:22:57.420998Z", "url": "https://files.pythonhosted.org/packages/8f/e3/0860a018ef1dfc549d415088d2dcbb7dc01b65a62dd77bda4bf4fcc347bc/graph_algorithms-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "827bc201d123ef79cf8911f752328f1f", "sha256": "cc76c5cf183c3697298295ebe57e4f9235a4a133528e9cd240db9b2018afbcc2"}, "downloads": -1, "filename": "graph_algorithms-0.1.tar.gz", "has_sig": false, "md5_digest": "827bc201d123ef79cf8911f752328f1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19566, "upload_time": "2017-02-04T14:22:57", "upload_time_iso_8601": "2017-02-04T14:22:57.420998Z", "url": "https://files.pythonhosted.org/packages/8f/e3/0860a018ef1dfc549d415088d2dcbb7dc01b65a62dd77bda4bf4fcc347bc/graph_algorithms-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:48 2020"}