{"info": {"author": "Julian Blank", "author_email": "blankjul@egr.msu.edu", "bugtrack_url": null, "classifiers": [], "description": "pydacefit\n==================================\n\nThe documentation can be found here:\nhttps://www.egr.msu.edu/coinlab/blankjul/pydacefit/\n\nThe purpose of this clone is to have a python version of the popular dacefit toolbox in MATLAB .\nThe toolbox can be found `here <https://www.mathworks.com/matlabcentral/fileexchange/38530-surrogate-model-optimization-toolbox>`_.\n\nThis framework is an exact clone of the original code and the correctness has been checked.\nPlease contact me if you should be scenarios where the values are significantly different (10^6).\n\nInstallation\n==================================\n\nThe test problems are uploaded to the PyPi Repository.\n\n.. code:: bash\n\n    pip install pydacefit\n\nUsage\n==================================\n\n.. code:: python\n\n\n    import numpy as np\n\n    from pydacefit.corr import corr_gauss, corr_cubic, corr_exp, corr_expg, corr_spline, corr_spherical\n    from pydacefit.dace import DACE, regr_linear, regr_quadratic\n    from pydacefit.regr import regr_constant\n\n    import matplotlib.pyplot as plt\n\n    # -----------------------------------------------\n    # Different ways of initialization\n    # -----------------------------------------------\n\n    # regression can be: regr_constant, regr_linear or regr_quadratic\n    regression = regr_constant\n    # regression = regr_linear\n    # regression = regr_quadratic\n\n\n    # then define the correlation (all possible correlations are shown below)\n    # please have a look at the MATLAB document for more details\n    correlation = corr_gauss\n    # correlation = corr_cubic\n    # correlation = corr_exp\n    # correlation = corr_expg\n    # correlation = corr_spline\n    # correlation = corr_spherical\n    # correlation = corr_cubic\n\n\n    # This initializes a DACEFIT objective using the provided regression and correlation\n    # because an initial theta is provided and also thetaL and thetaU the hyper parameter\n    # optimization is done\n    dacefit = DACE(regr=regression, corr=correlation,\n                   theta=1.0, thetaL=0.00001, thetaU=100)\n\n    # if no lower and upper bounds are defined, then no hyperparameter optimization is executed\n    dacefit_no_hyperparameter_optimization = DACE(regr=regression, corr=correlation,\n                                                  theta=1.0, thetaL=None, thetaU=None)\n\n    # to turn on the automatic relevance detection use a vector for theta and define bounds\n    dacefit_with_ard = DACE(regr=regression, corr=correlation,\n                            theta=[1.0, 1.0], thetaL=[0.001, 0.0001], thetaU=[20, 20])\n\n\n    # -----------------------------------------------\n    # Create some data for the purpose of testing\n    # -----------------------------------------------\n\n    def fun(X):\n        return np.sum(np.sin(X * 2 * np.pi), axis=1)\n\n\n    X = np.random.random((20, 1))\n    F = fun(X)\n\n    # -----------------------------------------------\n    # Fit the model with the data and predict\n    # -----------------------------------------------\n\n    # create the model and fit it\n    dacefit.fit(X, F)\n\n    # predict values for plotting\n    _X = np.linspace(0, 1, 100)[:, None]\n    _F = dacefit.predict(_X)\n\n    # -----------------------------------------------\n    # Plot the results\n    # -----------------------------------------------\n\n    plt.scatter(X, F, label=\"prediction\")\n    plt.plot(_X, _F, label=\"data\")\n    plt.legend()\n    plt.show()\n\n    print(\"MSE: \", np.mean(np.abs(fun(_X)[:, None] - _F)))\n\nContact\n==================================\nFeel free to contact me if you have any question:\n\n| Julian Blank (blankjul [at] egr.msu.edu)\n| Michigan State University\n| Computational Optimization and Innovation Laboratory (COIN)\n| East Lansing, MI 48824, USA\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/msu-coinlab/pydacefit", "keywords": "metamodel,surrogate,response surface", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "pydacefit", "package_url": "https://pypi.org/project/pydacefit/", "platform": "any", "project_url": "https://pypi.org/project/pydacefit/", "project_urls": {"Homepage": "https://github.com/msu-coinlab/pydacefit"}, "release_url": "https://pypi.org/project/pydacefit/1.0.1/", "requires_dist": ["numpy (>=1.15)"], "requires_python": "", "summary": "Surrogate Model", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pydacefit\">\n<h2>pydacefit</h2>\n<p>The documentation can be found here:\n<a href=\"https://www.egr.msu.edu/coinlab/blankjul/pydacefit/\" rel=\"nofollow\">https://www.egr.msu.edu/coinlab/blankjul/pydacefit/</a></p>\n<p>The purpose of this clone is to have a python version of the popular dacefit toolbox in MATLAB .\nThe toolbox can be found <a href=\"https://www.mathworks.com/matlabcentral/fileexchange/38530-surrogate-model-optimization-toolbox\" rel=\"nofollow\">here</a>.</p>\n<p>This framework is an exact clone of the original code and the correctness has been checked.\nPlease contact me if you should be scenarios where the values are significantly different (10^6).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The test problems are uploaded to the PyPi Repository.</p>\n<pre>pip install pydacefit\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydacefit.corr</span> <span class=\"kn\">import</span> <span class=\"n\">corr_gauss</span><span class=\"p\">,</span> <span class=\"n\">corr_cubic</span><span class=\"p\">,</span> <span class=\"n\">corr_exp</span><span class=\"p\">,</span> <span class=\"n\">corr_expg</span><span class=\"p\">,</span> <span class=\"n\">corr_spline</span><span class=\"p\">,</span> <span class=\"n\">corr_spherical</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydacefit.dace</span> <span class=\"kn\">import</span> <span class=\"n\">DACE</span><span class=\"p\">,</span> <span class=\"n\">regr_linear</span><span class=\"p\">,</span> <span class=\"n\">regr_quadratic</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydacefit.regr</span> <span class=\"kn\">import</span> <span class=\"n\">regr_constant</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"c1\"># -----------------------------------------------</span>\n<span class=\"c1\"># Different ways of initialization</span>\n<span class=\"c1\"># -----------------------------------------------</span>\n\n<span class=\"c1\"># regression can be: regr_constant, regr_linear or regr_quadratic</span>\n<span class=\"n\">regression</span> <span class=\"o\">=</span> <span class=\"n\">regr_constant</span>\n<span class=\"c1\"># regression = regr_linear</span>\n<span class=\"c1\"># regression = regr_quadratic</span>\n\n\n<span class=\"c1\"># then define the correlation (all possible correlations are shown below)</span>\n<span class=\"c1\"># please have a look at the MATLAB document for more details</span>\n<span class=\"n\">correlation</span> <span class=\"o\">=</span> <span class=\"n\">corr_gauss</span>\n<span class=\"c1\"># correlation = corr_cubic</span>\n<span class=\"c1\"># correlation = corr_exp</span>\n<span class=\"c1\"># correlation = corr_expg</span>\n<span class=\"c1\"># correlation = corr_spline</span>\n<span class=\"c1\"># correlation = corr_spherical</span>\n<span class=\"c1\"># correlation = corr_cubic</span>\n\n\n<span class=\"c1\"># This initializes a DACEFIT objective using the provided regression and correlation</span>\n<span class=\"c1\"># because an initial theta is provided and also thetaL and thetaU the hyper parameter</span>\n<span class=\"c1\"># optimization is done</span>\n<span class=\"n\">dacefit</span> <span class=\"o\">=</span> <span class=\"n\">DACE</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"o\">=</span><span class=\"n\">regression</span><span class=\"p\">,</span> <span class=\"n\">corr</span><span class=\"o\">=</span><span class=\"n\">correlation</span><span class=\"p\">,</span>\n               <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">thetaL</span><span class=\"o\">=</span><span class=\"mf\">0.00001</span><span class=\"p\">,</span> <span class=\"n\">thetaU</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># if no lower and upper bounds are defined, then no hyperparameter optimization is executed</span>\n<span class=\"n\">dacefit_no_hyperparameter_optimization</span> <span class=\"o\">=</span> <span class=\"n\">DACE</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"o\">=</span><span class=\"n\">regression</span><span class=\"p\">,</span> <span class=\"n\">corr</span><span class=\"o\">=</span><span class=\"n\">correlation</span><span class=\"p\">,</span>\n                                              <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">thetaL</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">thetaU</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># to turn on the automatic relevance detection use a vector for theta and define bounds</span>\n<span class=\"n\">dacefit_with_ard</span> <span class=\"o\">=</span> <span class=\"n\">DACE</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"o\">=</span><span class=\"n\">regression</span><span class=\"p\">,</span> <span class=\"n\">corr</span><span class=\"o\">=</span><span class=\"n\">correlation</span><span class=\"p\">,</span>\n                        <span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">],</span> <span class=\"n\">thetaL</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"mf\">0.0001</span><span class=\"p\">],</span> <span class=\"n\">thetaU</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">])</span>\n\n\n<span class=\"c1\"># -----------------------------------------------</span>\n<span class=\"c1\"># Create some data for the purpose of testing</span>\n<span class=\"c1\"># -----------------------------------------------</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fun</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">X</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -----------------------------------------------</span>\n<span class=\"c1\"># Fit the model with the data and predict</span>\n<span class=\"c1\"># -----------------------------------------------</span>\n\n<span class=\"c1\"># create the model and fit it</span>\n<span class=\"n\">dacefit</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># predict values for plotting</span>\n<span class=\"n\">_X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n<span class=\"n\">_F</span> <span class=\"o\">=</span> <span class=\"n\">dacefit</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">_X</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># -----------------------------------------------</span>\n<span class=\"c1\"># Plot the results</span>\n<span class=\"c1\"># -----------------------------------------------</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">scatter</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"prediction\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">_X</span><span class=\"p\">,</span> <span class=\"n\">_F</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"data\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"MSE: \"</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">(</span><span class=\"n\">_X</span><span class=\"p\">)[:,</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">_F</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>Feel free to contact me if you have any question:</p>\n<div>\n<div>Julian Blank (blankjul [at] egr.msu.edu)</div>\n<div>Michigan State University</div>\n<div>Computational Optimization and Innovation Laboratory (COIN)</div>\n<div>East Lansing, MI 48824, USA</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4994313, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e1c9ef63fc7fa8bdafbfaba4dd81f323", "sha256": "7910f45d4cbf09821a8be3f2f8796a2d1f9367309e8e42479e8ae76896ec6fd6"}, "downloads": -1, "filename": "pydacefit-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e1c9ef63fc7fa8bdafbfaba4dd81f323", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9811, "upload_time": "2019-03-27T18:34:05", "upload_time_iso_8601": "2019-03-27T18:34:05.493224Z", "url": "https://files.pythonhosted.org/packages/46/7e/c169ac1eb070e27fdd88e712756ebf283435e3a380a1b066504c846255bf/pydacefit-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9ba143d2818e598bbf95917c982edf6b", "sha256": "0a6e409315cde2fbba1ada6526302f26d115e426680bf8c846f051180f71dd25"}, "downloads": -1, "filename": "pydacefit-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9ba143d2818e598bbf95917c982edf6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8594, "upload_time": "2019-03-27T18:34:07", "upload_time_iso_8601": "2019-03-27T18:34:07.806781Z", "url": "https://files.pythonhosted.org/packages/b4/fb/86f6d6acb97ce58adc8644e2d7b0a1c94448b0a06d9228a4d937a0b3c221/pydacefit-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "4e452e66e60f24d5e4f88aab2429e63d", "sha256": "210e14ef6dad5372a9ab25128df38c0af9a495508b07f9f6570c09362ca494f4"}, "downloads": -1, "filename": "pydacefit-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e452e66e60f24d5e4f88aab2429e63d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9805, "upload_time": "2019-03-27T18:48:00", "upload_time_iso_8601": "2019-03-27T18:48:00.680283Z", "url": "https://files.pythonhosted.org/packages/5e/28/73b349b7557251fd5730606c5b5477651518b313aad4b445d1e08c482808/pydacefit-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "196be74b76cc34a1401f0ed10c90df6a", "sha256": "13f4bb9b2f9511b298511f71410294790be8c12e216b1704adcfabbc1d073083"}, "downloads": -1, "filename": "pydacefit-1.0.1.tar.gz", "has_sig": false, "md5_digest": "196be74b76cc34a1401f0ed10c90df6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8582, "upload_time": "2019-03-27T18:48:02", "upload_time_iso_8601": "2019-03-27T18:48:02.169379Z", "url": "https://files.pythonhosted.org/packages/10/f1/2e582500e666625798b2c3e3ddce0bc00fdf8b0e3a3f49e2008051b7739b/pydacefit-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4e452e66e60f24d5e4f88aab2429e63d", "sha256": "210e14ef6dad5372a9ab25128df38c0af9a495508b07f9f6570c09362ca494f4"}, "downloads": -1, "filename": "pydacefit-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4e452e66e60f24d5e4f88aab2429e63d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9805, "upload_time": "2019-03-27T18:48:00", "upload_time_iso_8601": "2019-03-27T18:48:00.680283Z", "url": "https://files.pythonhosted.org/packages/5e/28/73b349b7557251fd5730606c5b5477651518b313aad4b445d1e08c482808/pydacefit-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "196be74b76cc34a1401f0ed10c90df6a", "sha256": "13f4bb9b2f9511b298511f71410294790be8c12e216b1704adcfabbc1d073083"}, "downloads": -1, "filename": "pydacefit-1.0.1.tar.gz", "has_sig": false, "md5_digest": "196be74b76cc34a1401f0ed10c90df6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8582, "upload_time": "2019-03-27T18:48:02", "upload_time_iso_8601": "2019-03-27T18:48:02.169379Z", "url": "https://files.pythonhosted.org/packages/10/f1/2e582500e666625798b2c3e3ddce0bc00fdf8b0e3a3f49e2008051b7739b/pydacefit-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:30 2020"}