{"info": {"author": "Simon May", "author_email": "simon.may@mpa-garching.mpg.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Physics"], "description": "# minimal-lagrangians\nThis is a Python program which allows one to specify the field content of an extension\nof the Standard Model of particle physics (SM) and, using this information, generates the\nmost general renormalizable Lagrangian that describes such a model. As the program was\nwritten for the study of minimal dark matter models with radiative neutrino masses,\nit can handle additional fields with the following properties:\n- scalar or Weyl fermion fields\n- SU(3) singlets\n- SU(2) singlets, doublets or triplets\n- arbitrary hypercharge\n- charged under a global \u2124\u2082 symmetry\n- charged under an arbitrary number of global U(1) symmetries\n\n## Requirements\nThe program requires Python\u00a03 (tested with Python\u00a0\u2265\u00a03.4).\nNo external libraries are necessary.\n\n## Installation\n`minimal-lagrangians` is [available on pip](https://pypi.org/project/minimal-lagrangians/), so it can simply be installed by running\n\n    pip install minimal-lagrangians\n\n## Usage\n`minimal-lagrangians` only prints the potential involving at least one new (i.\u00a0e. non-SM) field,\ni.\u00a0e. the kinetic terms and the Standard Model Lagrangian are omitted. The models are\nnot checked for anomalies (tools like SARAH can be used for this purpose).\n\nThe new models are currently defined in the file [`data.py`](data.py). Models can be\nadded in a user-defined file (to be used with the `--model-file` option, see below) in\nthe following form:\n```python\n[\n\tBSMModel('<model_name>', (\n\t\t    # list of fields\n\t\t    # type       name   SU(2) rep.  hypercharge\n\t\t    # for a scalar field, e.g. a scalar doublet with hypercharge 1:\n\t\t    ScalarField ('S',   2,          Y=1),\n\t\t    # for a fermion field, e.g. a fermion singlet with hypercharge 0:\n\t\t    FermionField('F',   1,          Y=0),\n\t\t    # \u2124\u2082-even scalar field:\n\t\t    ScalarField ('S',   1,          Y=0, z2=1),\n\t\t    # \u2026\n\t\t),\n\t\t# optional: parameter values for different hypercharge assignments (offsets), e.g.\n\t\t(0, 2, \u2026)\n\t),\n\t# \u2026\n]\n```\n\nTo add fields with global U(1) charges, use the optional parameter `u1`:\n```python\n        # type       name   SU(2) rep.  hypercharge  U(1) charges\n        # for a scalar field, e.g. a scalar doublet with hypercharge 1:\n        ScalarField ('S',   2,          Y=1,         u1=[ 1, 3, \u2026]),\n        # for a fermion field, e.g. a fermion singlet with hypercharge 0:\n        FermionField('F',   1,          Y=0,         u1=[-1, 2, \u2026]),\n```\nThe Standard Model fields are assumed to be neutral (`z2=1`, U(1) charges zero) under the new global symmetries.\n\nInformation on how to run the program on the command line can be obtained with\n`minimal-lagrangians -h`:\n>     usage: minimal-lagrangians [-h] [--format {LaTeX,SARAH,plain}]\n>                                [--model-file [path/to/file.py]]\n>                                [--omit-equivalent-scalars]\n>                                [--omit-self-interaction] [--list-discarded-terms]\n>                                [--sarah-no-scalar-cpv] [--version]\n>                                model [parameter \u03b1]\n>     \n>     A Python program to generate the Lagrangians for dark matter models\n>     \n>     positional arguments:\n>       model                 name of the model whose Lagrangian is to be generated\n>                             (specify \u201clist\u201d in order to list all available models)\n>       parameter \u03b1           value of the model parameter \u03b1 (determines\n>                             hypercharges of the fields)\n>     \n>     optional arguments:\n>       -h, --help            show this help message and exit\n>       --format {LaTeX,SARAH,plain}\n>                             output format for the generated Lagrangian (default:\n>                             plain)\n>       --model-file [path/to/file.py]\n>                             file containing user-defined models; a file is only\n>                             read if this option is present (default: ./models.py)\n>       --omit-equivalent-scalars\n>                             keep only scalar fields from the model which have\n>                             unique quantum numbers and absolute hypercharge values\n>                             (omit duplicates)\n>       --omit-self-interaction\n>                             omit pure self-interactions of the new fields in the\n>                             Lagrangian, that is, output only interaction terms\n>                             which involve both SM and new fields (default: output\n>                             all terms)\n>       --list-discarded-terms\n>                             list redundant terms which were discarded from the\n>                             Lagrangian due to identities\n>       --sarah-no-scalar-cpv\n>                             assume that there is no CP violation causing mixing\n>                             between scalar and pseudoscalar fields for SARAH\n>                             output\n>       --version             show program\u2019s version number and exit\n\n\nTest cases can be run using\n\n    ./test.py\n\nAmong other checks, this currently tests whether the program produces the correct\nLagrangian for the following models:\n- T1-3-B with \u03b1\u00a0=\u00a00, which is studied in [(Fiaschi, Klasen, May; arXiv:1812.11133 [hep-ph])][1].\n- T1-1-A with \u03b1\u00a0=\u00a00, as given in [(Farzan; arXiv:0908.3729 [hep-ph])][2], which\n  presents an implementation of this model.\n- The models given in [(Cheung, Sanford; arXiv:1311.5896 [hep-ph])][3]:\n  - singlet\u2013doublet fermion model (SDF, \u201cmodel\u00a0A\u201d)\n  - singlet\u2013doublet scalar model (SDS, \u201cmodel\u00a0B\u201d)\n  - singlet\u2013triplet scalar model (STS, \u201cmodel\u00a0C\u201d)\n- The Higgs triplet model (\u2192 seesaw type\u00a0II), see e.\u00a0g.\n  [(Kanemura, Yagyu; arXiv:1201.6287 [hep-ph])][4].\n\n## Examples\nFor example, running\n\n    minimal-lagrangians --omit-equivalent-scalars T1-1-A 0\n\nprints the Lagrangian for the model T1-1-A with \u03b1 = 0 from\n[(Restrepo, Zapata, Yaguna; arXiv:1308.3655 [hep-ph])][5]:\n>      - M_\u03d5'\u00b2 \u03d5'^\u2020 \u03d5' - \u00bd M_\u03c6\u00b2 \u03c6\u00b2\n>      - (\u03bb\u2081 (H \u03d5') \u03c6 + H.c.)\n>      - \u03bb\u2082 (H^\u2020 H) (\u03d5'^\u2020 \u03d5') - \u03bb\u2083 (H^\u2020 \u03d5') (\u03d5'^\u2020 H) - \u03bb\u2084 (\u03d5'^\u2020 \u03d5')\u00b2 - \u03bb\u2085 (H^\u2020 H) \u03c6\u00b2 - \u03bb\u2086 (\u03d5'^\u2020 \u03d5') \u03c6\u00b2 - (\u03bb\u2087 (H \u03d5')\u00b2 + H.c.) - \u03bb\u2088 \u03c6\u2074\n>      - (\u00bd M_\u03c8 \u03c8 \u03c8 + H.c.)\n>      - (y\u2081 (\u03d5'^\u2020 L) \u03c8 + H.c.)\n\nRunning\n\n    minimal-lagrangians STS\n\nprints the Lagrangian for model C (singlet\u2013triplet scalar) from\n[(Cheung, Sanford; arXiv:1311.5896 [hep-ph])][3]:\n>      - \u00bd M_T\u00b2 Tr(T\u00b2) - \u00bd M_S\u00b2 S\u00b2\n>      - \u03bb\u2081 H^\u2020 T\u00b2 H - \u03bb\u2082 (H^\u2020 T H) S - \u03bb\u2083 (H^\u2020 H) S\u00b2 - \u03bb\u2084 Tr(T\u00b2)\u00b2 - \u03bb\u2085 Tr(T\u00b2) S\u00b2 - \u03bb\u2086 S\u2074\n\n## Source files\n- [`minimal-lagrangians.py`](minimal-lagrangians.py):\n  The main executable file, responsible for parsing command line arguments and starting execution of the selected model\n- [`minimal-lagrangians`](minimal-lagrangians):\n  A symbolic link to [`minimal-lagrangians.py`](minimal-lagrangians.py)\n- [`test.py`](test.py):\n  The program\u2019s test suite\n- [`setup.py`](setup.py):\n  The [`setuptools`](https://pypi.org/project/setuptools) script used to create the program\u2019s distribution package\n- Directory [`min_lag/`](min_lag/):\n  The main program package\n  - [`min_lag/__init__.py`](min_lag/__init__.py):\n    Python package file for the [`min_lag`](min_lag/) package\n  - [`min_lag/data.py`](min_lag/data.py):\n    Contains the predefined models\n  - [`min_lag/fields.py`](min_lag/fields.py):\n    Contains the class definitions `Field` objects, such as `ScalarField` or `FermionField`\n  - [`min_lag/models.py`](min_lag/models.py):\n    Contains the class definitions `Model` and `BSMModel` objects, as well as the definition of the Standard Model (`STANDARD_MODEL`)\n  - [`min_lag/terms.py`](min_lag/terms.py):\n    Contains the class definitions for Lagrangians and their terms (`Lagrangian`, `InvariantTerm`)\n  - [`min_lag/unicode_util.py`](min_lag/unicode_util.py):\n    Contains some small utility functions dealing with to Unicode characters, and related data\n  - [`min_lag/version.py`](min_lag/version.py):\n    Contains the program\u2019s version number; generated by [`setup.py`](setup.py)\n  - Directory [`min_lag/output/`](min_lag/output/):\n    Contains the different output modules\n    - [`min_lag/output/__init__.py`](min_lag/output/__init__.py):\n      Contains the base (abstract) class definition for the formatter classes and other common output definitions\n    - [`min_lag/output/LaTeX.py`](min_lag/output/LaTeX.py):\n      Contains the output module for the LaTeX output format\n    - [`min_lag/output/plain.py`](min_lag/output/plain.py):\n      Contains the output module for the (Unicode) plain text output format\n    - Directory [`min_lag/output/SARAH/`](min_lag/output/SARAH/):\n      Contains the code and data for the SARAH output format\n      - [`min_lag/output/SARAH/__init__.py`](min_lag/output/SARAH/__init__.py):\n        Contains the code for the SARAH output format\n      - Directory [`min_lag/output/SARAH/data/`](min_lag/output/SARAH/data/):\n        Contains data files for the SARAH output format\n        - [`min_lag/output/SARAH/data/model.m`](min_lag/output/SARAH/data/model.m):\n          Template for the main SARAH model file\n        - [`min_lag/output/SARAH/data/parameters.m`](min_lag/output/SARAH/data/parameters.m):\n          Template for the SARAH model file `parameters.m`\n        - [`min_lag/output/SARAH/data/particles.m`](min_lag/output/SARAH/data/particles.m):\n          Template for the SARAH model file `particles.m`\n        - [`min_lag/output/SARAH/data/SPheno.m`](min_lag/output/SARAH/data/SPheno.m):\n          Template for the SARAH model file `SPheno.m`\n\n\n[1]: https://arxiv.org/abs/1812.11133\n[2]: https://arxiv.org/abs/0908.3729\n[3]: https://arxiv.org/abs/1311.5896\n[4]: https://arxiv.org/abs/1201.6287\n[5]: https://arxiv.org/abs/1308.3655\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/Socob/minimal-lagrangians", "keywords": "particle physics,beyond the standard model,dark matter", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "minimal-lagrangians", "package_url": "https://pypi.org/project/minimal-lagrangians/", "platform": "OS Independent", "project_url": "https://pypi.org/project/minimal-lagrangians/", "project_urls": {"Homepage": "https://gitlab.com/Socob/minimal-lagrangians"}, "release_url": "https://pypi.org/project/minimal-lagrangians/1.1.2/", "requires_dist": null, "requires_python": ">=3.4", "summary": "A Python program to generate the Lagrangians for dark matter models", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>minimal-lagrangians</h1>\n<p>This is a Python program which allows one to specify the field content of an extension\nof the Standard Model of particle physics (SM) and, using this information, generates the\nmost general renormalizable Lagrangian that describes such a model. As the program was\nwritten for the study of minimal dark matter models with radiative neutrino masses,\nit can handle additional fields with the following properties:</p>\n<ul>\n<li>scalar or Weyl fermion fields</li>\n<li>SU(3) singlets</li>\n<li>SU(2) singlets, doublets or triplets</li>\n<li>arbitrary hypercharge</li>\n<li>charged under a global \u2124\u2082 symmetry</li>\n<li>charged under an arbitrary number of global U(1) symmetries</li>\n</ul>\n<h2>Requirements</h2>\n<p>The program requires Python\u00a03 (tested with Python\u00a0\u2265\u00a03.4).\nNo external libraries are necessary.</p>\n<h2>Installation</h2>\n<p><code>minimal-lagrangians</code> is <a href=\"https://pypi.org/project/minimal-lagrangians/\" rel=\"nofollow\">available on pip</a>, so it can simply be installed by running</p>\n<pre><code>pip install minimal-lagrangians\n</code></pre>\n<h2>Usage</h2>\n<p><code>minimal-lagrangians</code> only prints the potential involving at least one new (i.\u00a0e. non-SM) field,\ni.\u00a0e. the kinetic terms and the Standard Model Lagrangian are omitted. The models are\nnot checked for anomalies (tools like SARAH can be used for this purpose).</p>\n<p>The new models are currently defined in the file <a href=\"data.py\" rel=\"nofollow\"><code>data.py</code></a>. Models can be\nadded in a user-defined file (to be used with the <code>--model-file</code> option, see below) in\nthe following form:</p>\n<pre><span class=\"p\">[</span>\n\t<span class=\"n\">BSMModel</span><span class=\"p\">(</span><span class=\"s1\">'&lt;model_name&gt;'</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n\t\t    <span class=\"c1\"># list of fields</span>\n\t\t    <span class=\"c1\"># type       name   SU(2) rep.  hypercharge</span>\n\t\t    <span class=\"c1\"># for a scalar field, e.g. a scalar doublet with hypercharge 1:</span>\n\t\t    <span class=\"n\">ScalarField</span> <span class=\"p\">(</span><span class=\"s1\">'S'</span><span class=\"p\">,</span>   <span class=\"mi\">2</span><span class=\"p\">,</span>          <span class=\"n\">Y</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n\t\t    <span class=\"c1\"># for a fermion field, e.g. a fermion singlet with hypercharge 0:</span>\n\t\t    <span class=\"n\">FermionField</span><span class=\"p\">(</span><span class=\"s1\">'F'</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">,</span>          <span class=\"n\">Y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n\t\t    <span class=\"c1\"># \u2124\u2082-even scalar field:</span>\n\t\t    <span class=\"n\">ScalarField</span> <span class=\"p\">(</span><span class=\"s1\">'S'</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">,</span>          <span class=\"n\">Y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z2</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n\t\t    <span class=\"c1\"># \u2026</span>\n\t\t<span class=\"p\">),</span>\n\t\t<span class=\"c1\"># optional: parameter values for different hypercharge assignments (offsets), e.g.</span>\n\t\t<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"err\">\u2026</span><span class=\"p\">)</span>\n\t<span class=\"p\">),</span>\n\t<span class=\"c1\"># \u2026</span>\n<span class=\"p\">]</span>\n</pre>\n<p>To add fields with global U(1) charges, use the optional parameter <code>u1</code>:</p>\n<pre>        <span class=\"c1\"># type       name   SU(2) rep.  hypercharge  U(1) charges</span>\n        <span class=\"c1\"># for a scalar field, e.g. a scalar doublet with hypercharge 1:</span>\n        <span class=\"n\">ScalarField</span> <span class=\"p\">(</span><span class=\"s1\">'S'</span><span class=\"p\">,</span>   <span class=\"mi\">2</span><span class=\"p\">,</span>          <span class=\"n\">Y</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>         <span class=\"n\">u1</span><span class=\"o\">=</span><span class=\"p\">[</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"err\">\u2026</span><span class=\"p\">]),</span>\n        <span class=\"c1\"># for a fermion field, e.g. a fermion singlet with hypercharge 0:</span>\n        <span class=\"n\">FermionField</span><span class=\"p\">(</span><span class=\"s1\">'F'</span><span class=\"p\">,</span>   <span class=\"mi\">1</span><span class=\"p\">,</span>          <span class=\"n\">Y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>         <span class=\"n\">u1</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"err\">\u2026</span><span class=\"p\">]),</span>\n</pre>\n<p>The Standard Model fields are assumed to be neutral (<code>z2=1</code>, U(1) charges zero) under the new global symmetries.</p>\n<p>Information on how to run the program on the command line can be obtained with\n<code>minimal-lagrangians -h</code>:</p>\n<blockquote>\n<pre><code>usage: minimal-lagrangians [-h] [--format {LaTeX,SARAH,plain}]\n                           [--model-file [path/to/file.py]]\n                           [--omit-equivalent-scalars]\n                           [--omit-self-interaction] [--list-discarded-terms]\n                           [--sarah-no-scalar-cpv] [--version]\n                           model [parameter \u03b1]\n\nA Python program to generate the Lagrangians for dark matter models\n\npositional arguments:\n  model                 name of the model whose Lagrangian is to be generated\n                        (specify \u201clist\u201d in order to list all available models)\n  parameter \u03b1           value of the model parameter \u03b1 (determines\n                        hypercharges of the fields)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --format {LaTeX,SARAH,plain}\n                        output format for the generated Lagrangian (default:\n                        plain)\n  --model-file [path/to/file.py]\n                        file containing user-defined models; a file is only\n                        read if this option is present (default: ./models.py)\n  --omit-equivalent-scalars\n                        keep only scalar fields from the model which have\n                        unique quantum numbers and absolute hypercharge values\n                        (omit duplicates)\n  --omit-self-interaction\n                        omit pure self-interactions of the new fields in the\n                        Lagrangian, that is, output only interaction terms\n                        which involve both SM and new fields (default: output\n                        all terms)\n  --list-discarded-terms\n                        list redundant terms which were discarded from the\n                        Lagrangian due to identities\n  --sarah-no-scalar-cpv\n                        assume that there is no CP violation causing mixing\n                        between scalar and pseudoscalar fields for SARAH\n                        output\n  --version             show program\u2019s version number and exit\n</code></pre>\n</blockquote>\n<p>Test cases can be run using</p>\n<pre><code>./test.py\n</code></pre>\n<p>Among other checks, this currently tests whether the program produces the correct\nLagrangian for the following models:</p>\n<ul>\n<li>T1-3-B with \u03b1\u00a0=\u00a00, which is studied in <a href=\"https://arxiv.org/abs/1812.11133\" rel=\"nofollow\">(Fiaschi, Klasen, May; arXiv:1812.11133 [hep-ph])</a>.</li>\n<li>T1-1-A with \u03b1\u00a0=\u00a00, as given in <a href=\"https://arxiv.org/abs/0908.3729\" rel=\"nofollow\">(Farzan; arXiv:0908.3729 [hep-ph])</a>, which\npresents an implementation of this model.</li>\n<li>The models given in <a href=\"https://arxiv.org/abs/1311.5896\" rel=\"nofollow\">(Cheung, Sanford; arXiv:1311.5896 [hep-ph])</a>:\n<ul>\n<li>singlet\u2013doublet fermion model (SDF, \u201cmodel\u00a0A\u201d)</li>\n<li>singlet\u2013doublet scalar model (SDS, \u201cmodel\u00a0B\u201d)</li>\n<li>singlet\u2013triplet scalar model (STS, \u201cmodel\u00a0C\u201d)</li>\n</ul>\n</li>\n<li>The Higgs triplet model (\u2192 seesaw type\u00a0II), see e.\u00a0g.\n<a href=\"https://arxiv.org/abs/1201.6287\" rel=\"nofollow\">(Kanemura, Yagyu; arXiv:1201.6287 [hep-ph])</a>.</li>\n</ul>\n<h2>Examples</h2>\n<p>For example, running</p>\n<pre><code>minimal-lagrangians --omit-equivalent-scalars T1-1-A 0\n</code></pre>\n<p>prints the Lagrangian for the model T1-1-A with \u03b1 = 0 from\n<a href=\"https://arxiv.org/abs/1308.3655\" rel=\"nofollow\">(Restrepo, Zapata, Yaguna; arXiv:1308.3655 [hep-ph])</a>:</p>\n<blockquote>\n<pre><code> - M_\u03d5'\u00b2 \u03d5'^\u2020 \u03d5' - \u00bd M_\u03c6\u00b2 \u03c6\u00b2\n - (\u03bb\u2081 (H \u03d5') \u03c6 + H.c.)\n - \u03bb\u2082 (H^\u2020 H) (\u03d5'^\u2020 \u03d5') - \u03bb\u2083 (H^\u2020 \u03d5') (\u03d5'^\u2020 H) - \u03bb\u2084 (\u03d5'^\u2020 \u03d5')\u00b2 - \u03bb\u2085 (H^\u2020 H) \u03c6\u00b2 - \u03bb\u2086 (\u03d5'^\u2020 \u03d5') \u03c6\u00b2 - (\u03bb\u2087 (H \u03d5')\u00b2 + H.c.) - \u03bb\u2088 \u03c6\u2074\n - (\u00bd M_\u03c8 \u03c8 \u03c8 + H.c.)\n - (y\u2081 (\u03d5'^\u2020 L) \u03c8 + H.c.)\n</code></pre>\n</blockquote>\n<p>Running</p>\n<pre><code>minimal-lagrangians STS\n</code></pre>\n<p>prints the Lagrangian for model C (singlet\u2013triplet scalar) from\n<a href=\"https://arxiv.org/abs/1311.5896\" rel=\"nofollow\">(Cheung, Sanford; arXiv:1311.5896 [hep-ph])</a>:</p>\n<blockquote>\n<pre><code> - \u00bd M_T\u00b2 Tr(T\u00b2) - \u00bd M_S\u00b2 S\u00b2\n - \u03bb\u2081 H^\u2020 T\u00b2 H - \u03bb\u2082 (H^\u2020 T H) S - \u03bb\u2083 (H^\u2020 H) S\u00b2 - \u03bb\u2084 Tr(T\u00b2)\u00b2 - \u03bb\u2085 Tr(T\u00b2) S\u00b2 - \u03bb\u2086 S\u2074\n</code></pre>\n</blockquote>\n<h2>Source files</h2>\n<ul>\n<li><a href=\"minimal-lagrangians.py\" rel=\"nofollow\"><code>minimal-lagrangians.py</code></a>:\nThe main executable file, responsible for parsing command line arguments and starting execution of the selected model</li>\n<li><a href=\"minimal-lagrangians\" rel=\"nofollow\"><code>minimal-lagrangians</code></a>:\nA symbolic link to <a href=\"minimal-lagrangians.py\" rel=\"nofollow\"><code>minimal-lagrangians.py</code></a></li>\n<li><a href=\"test.py\" rel=\"nofollow\"><code>test.py</code></a>:\nThe program\u2019s test suite</li>\n<li><a href=\"setup.py\" rel=\"nofollow\"><code>setup.py</code></a>:\nThe <a href=\"https://pypi.org/project/setuptools\" rel=\"nofollow\"><code>setuptools</code></a> script used to create the program\u2019s distribution package</li>\n<li>Directory <a href=\"min_lag/\" rel=\"nofollow\"><code>min_lag/</code></a>:\nThe main program package\n<ul>\n<li><a href=\"min_lag/__init__.py\" rel=\"nofollow\"><code>min_lag/__init__.py</code></a>:\nPython package file for the <a href=\"min_lag/\" rel=\"nofollow\"><code>min_lag</code></a> package</li>\n<li><a href=\"min_lag/data.py\" rel=\"nofollow\"><code>min_lag/data.py</code></a>:\nContains the predefined models</li>\n<li><a href=\"min_lag/fields.py\" rel=\"nofollow\"><code>min_lag/fields.py</code></a>:\nContains the class definitions <code>Field</code> objects, such as <code>ScalarField</code> or <code>FermionField</code></li>\n<li><a href=\"min_lag/models.py\" rel=\"nofollow\"><code>min_lag/models.py</code></a>:\nContains the class definitions <code>Model</code> and <code>BSMModel</code> objects, as well as the definition of the Standard Model (<code>STANDARD_MODEL</code>)</li>\n<li><a href=\"min_lag/terms.py\" rel=\"nofollow\"><code>min_lag/terms.py</code></a>:\nContains the class definitions for Lagrangians and their terms (<code>Lagrangian</code>, <code>InvariantTerm</code>)</li>\n<li><a href=\"min_lag/unicode_util.py\" rel=\"nofollow\"><code>min_lag/unicode_util.py</code></a>:\nContains some small utility functions dealing with to Unicode characters, and related data</li>\n<li><a href=\"min_lag/version.py\" rel=\"nofollow\"><code>min_lag/version.py</code></a>:\nContains the program\u2019s version number; generated by <a href=\"setup.py\" rel=\"nofollow\"><code>setup.py</code></a></li>\n<li>Directory <a href=\"min_lag/output/\" rel=\"nofollow\"><code>min_lag/output/</code></a>:\nContains the different output modules\n<ul>\n<li><a href=\"min_lag/output/__init__.py\" rel=\"nofollow\"><code>min_lag/output/__init__.py</code></a>:\nContains the base (abstract) class definition for the formatter classes and other common output definitions</li>\n<li><a href=\"min_lag/output/LaTeX.py\" rel=\"nofollow\"><code>min_lag/output/LaTeX.py</code></a>:\nContains the output module for the LaTeX output format</li>\n<li><a href=\"min_lag/output/plain.py\" rel=\"nofollow\"><code>min_lag/output/plain.py</code></a>:\nContains the output module for the (Unicode) plain text output format</li>\n<li>Directory <a href=\"min_lag/output/SARAH/\" rel=\"nofollow\"><code>min_lag/output/SARAH/</code></a>:\nContains the code and data for the SARAH output format\n<ul>\n<li><a href=\"min_lag/output/SARAH/__init__.py\" rel=\"nofollow\"><code>min_lag/output/SARAH/__init__.py</code></a>:\nContains the code for the SARAH output format</li>\n<li>Directory <a href=\"min_lag/output/SARAH/data/\" rel=\"nofollow\"><code>min_lag/output/SARAH/data/</code></a>:\nContains data files for the SARAH output format\n<ul>\n<li><a href=\"min_lag/output/SARAH/data/model.m\" rel=\"nofollow\"><code>min_lag/output/SARAH/data/model.m</code></a>:\nTemplate for the main SARAH model file</li>\n<li><a href=\"min_lag/output/SARAH/data/parameters.m\" rel=\"nofollow\"><code>min_lag/output/SARAH/data/parameters.m</code></a>:\nTemplate for the SARAH model file <code>parameters.m</code></li>\n<li><a href=\"min_lag/output/SARAH/data/particles.m\" rel=\"nofollow\"><code>min_lag/output/SARAH/data/particles.m</code></a>:\nTemplate for the SARAH model file <code>particles.m</code></li>\n<li><a href=\"min_lag/output/SARAH/data/SPheno.m\" rel=\"nofollow\"><code>min_lag/output/SARAH/data/SPheno.m</code></a>:\nTemplate for the SARAH model file <code>SPheno.m</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7012909, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8247c01b435b07703ad6bc0b0022839e", "sha256": "870b889d07f7b73d34907da91376ceb65c823c8005d59880af36f92bd71f8f0e"}, "downloads": -1, "filename": "minimal_lagrangians-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8247c01b435b07703ad6bc0b0022839e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 53480, "upload_time": "2020-03-18T02:22:14", "upload_time_iso_8601": "2020-03-18T02:22:14.913814Z", "url": "https://files.pythonhosted.org/packages/04/56/662629ef2557035bd31b390e8950d6b136d8ff3bd0893c0d638a99165907/minimal_lagrangians-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "71fbf7d469402d682ce5631456665a66", "sha256": "a76cecc1b666fa41c187cc1d92177f1fb4d192058aa5c16524aaef7dbaebeb00"}, "downloads": -1, "filename": "minimal-lagrangians-1.0.0.tar.gz", "has_sig": false, "md5_digest": "71fbf7d469402d682ce5631456665a66", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 36079, "upload_time": "2020-03-18T02:22:17", "upload_time_iso_8601": "2020-03-18T02:22:17.585732Z", "url": "https://files.pythonhosted.org/packages/c3/77/7a5c8df785f649927d43e4c6908b8b80a9a581a5e63733bee68d6c300a15/minimal-lagrangians-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "391c4b3f4c92c8c78eb07e5ed23071a8", "sha256": "82a1b1164c80ae0e6b9615ebf13e53bc4799d030225d84cf46adf90677f650b3"}, "downloads": -1, "filename": "minimal_lagrangians-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "391c4b3f4c92c8c78eb07e5ed23071a8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 54638, "upload_time": "2020-03-20T21:38:39", "upload_time_iso_8601": "2020-03-20T21:38:39.686687Z", "url": "https://files.pythonhosted.org/packages/81/0b/b55085ce45e0f1bf1a96547220a92a7325a32a7cf3b52ad8b9d3f3c21429/minimal_lagrangians-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b985bc6b7b92c6aeced047a23423be00", "sha256": "cbcc7f5f7a04ee65247443aa759e80f865eae38a933178fb91c2959b251fb666"}, "downloads": -1, "filename": "minimal-lagrangians-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b985bc6b7b92c6aeced047a23423be00", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 56247, "upload_time": "2020-03-20T21:38:41", "upload_time_iso_8601": "2020-03-20T21:38:41.011008Z", "url": "https://files.pythonhosted.org/packages/53/3a/3b6cbc836e74f105f12a789dc6d1bc95cf29ccd39a6156680969962787b7/minimal-lagrangians-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "1b75254efd9cc2e3c77c4750b5ef7bc7", "sha256": "6f8ca5392375b35ce702c9c83d9f16f919102f0a284a8fd6cfe61aeff07d2d70"}, "downloads": -1, "filename": "minimal_lagrangians-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1b75254efd9cc2e3c77c4750b5ef7bc7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 54627, "upload_time": "2020-04-02T19:58:01", "upload_time_iso_8601": "2020-04-02T19:58:01.497211Z", "url": "https://files.pythonhosted.org/packages/87/40/de669dedb82b91ee437f779f61191d0172d2ebb97b5851aa63010493eced/minimal_lagrangians-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "936f928d7c47561f16388b1f4fcc6916", "sha256": "ba5e43c3d12c52bda6dc5428bff2b4e564249314d6900487fafff1b121d3cf6c"}, "downloads": -1, "filename": "minimal-lagrangians-1.1.1.tar.gz", "has_sig": false, "md5_digest": "936f928d7c47561f16388b1f4fcc6916", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 56250, "upload_time": "2020-04-02T19:58:02", "upload_time_iso_8601": "2020-04-02T19:58:02.769189Z", "url": "https://files.pythonhosted.org/packages/16/5f/d7bea4560cc40b83ee5448119bbe9ac1124e7881d9aaaacfa0f8db5297d6/minimal-lagrangians-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "4248716695b061378e797b9d2d696aca", "sha256": "6aaa1534a3741e39b0833abfffcd6f35dc75a7dc4614c0d4f7681b89dffa8fc6"}, "downloads": -1, "filename": "minimal_lagrangians-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4248716695b061378e797b9d2d696aca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 54628, "upload_time": "2020-04-13T21:27:22", "upload_time_iso_8601": "2020-04-13T21:27:22.189471Z", "url": "https://files.pythonhosted.org/packages/58/ea/d6bdaac3afc08e6d826fa538828d26d85953aa9d69e2e1378e64134c16d8/minimal_lagrangians-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ab48daaa8ef11475b2ee42ceaaa33d8", "sha256": "ea1c568a699910d60603e446641865e119160638b226dbb5f106078f090cb64b"}, "downloads": -1, "filename": "minimal-lagrangians-1.1.2.tar.gz", "has_sig": false, "md5_digest": "2ab48daaa8ef11475b2ee42ceaaa33d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 56246, "upload_time": "2020-04-13T21:27:23", "upload_time_iso_8601": "2020-04-13T21:27:23.601168Z", "url": "https://files.pythonhosted.org/packages/26/0e/8ad8c51fd1b862029460c66b3cd4544032dbc14fb2acf86cbe699d6efb63/minimal-lagrangians-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4248716695b061378e797b9d2d696aca", "sha256": "6aaa1534a3741e39b0833abfffcd6f35dc75a7dc4614c0d4f7681b89dffa8fc6"}, "downloads": -1, "filename": "minimal_lagrangians-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4248716695b061378e797b9d2d696aca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 54628, "upload_time": "2020-04-13T21:27:22", "upload_time_iso_8601": "2020-04-13T21:27:22.189471Z", "url": "https://files.pythonhosted.org/packages/58/ea/d6bdaac3afc08e6d826fa538828d26d85953aa9d69e2e1378e64134c16d8/minimal_lagrangians-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ab48daaa8ef11475b2ee42ceaaa33d8", "sha256": "ea1c568a699910d60603e446641865e119160638b226dbb5f106078f090cb64b"}, "downloads": -1, "filename": "minimal-lagrangians-1.1.2.tar.gz", "has_sig": false, "md5_digest": "2ab48daaa8ef11475b2ee42ceaaa33d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 56246, "upload_time": "2020-04-13T21:27:23", "upload_time_iso_8601": "2020-04-13T21:27:23.601168Z", "url": "https://files.pythonhosted.org/packages/26/0e/8ad8c51fd1b862029460c66b3cd4544032dbc14fb2acf86cbe699d6efb63/minimal-lagrangians-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:23 2020"}