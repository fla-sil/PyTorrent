{"info": {"author": "Andy Lutomirski", "author_email": "luto@amacapital.net", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: POSIX :: Linux"], "description": "What is virtme?\n===============\n\nVirtme is a set of simple tools to run a virtualized Linux kernel that\nuses the host Linux distribution or a simple rootfs instead of a whole\ndisk image.\n\nVirtme is tiny, easy to use, and makes testing kernel changes quite simple.\n\nSome day this might be useful as a sort of sandbox.  Right now it's not\nreally configurable enough for that.\n\nVirtme is hosted at kernel.org in utils/kernel/virtme/virtme.git ([web][korg-web] | [git][korg-git]).  It's mirrored [on github][github].\n\n[korg-web]: https://git.kernel.org/cgit/utils/kernel/virtme/virtme.git \"virtme on kernel.org\"\n[korg-git]: git://git.kernel.org/pub/scm/utils/kernel/virtme/virtme.git \"git address\"\n[github]: https://github.com/amluto/virtme\n\nHow to use virtme\n=================\n\nYou'll need a Linux kernel that has these options (built-in or as modules)\n\n    CONFIG_VIRTIO\n    CONFIG_VIRTIO_PCI\n    CONFIG_NET_9P\n    CONFIG_NET_9P_VIRTIO\n    CONFIG_9P_FS\n\nFor networking support, you also need CONFIG_VIRTIO_NET.\n\nFor script support, you need CONFIG_VIRTIO_CONSOLE.\n\nFor disk support, you need CONFIG_SCSI_VIRTIO.\n\nThat kernel needs to be sane.  Your kernel is probably sane, but allmodconfig and allyesconfig generate insane kernels.  Sanity includes:\n\n    CONFIG_CMDLINE_OVERRIDE=n\n    CONFIG_BINFMT_SCRIPT=y\n    CONFIG_TMPFS=y\n\nYou may also have better luck if you set:\n\n    CONFIG_EMBEDDED=n\n    CONFIG_EXPERT=n\n    CONFIG_MODULE_SIG_FORCE=n\n    CONFIG_DEVTMPFS=y\n\nAn easy, somewhat-reliable way to generate a working config is to append\nthe `prereqs.config` file to your .config and then run `make defconfig`.\n\nYour host system will need to satisfy some prerequisites:\n\n* You need Python 3.3 or higher.\n* QEMU 1.6 or higher is recommended.  QEMU 1.4 and 1.5 are partially supported using a rather ugly kludge.\n  * You will have a much better experience if KVM is enabled.  That means that you should be on bare metal with hardware virtualization (VT-x or SVM) enabled or in a VM that supports nested virtualization.  On some Linux distributions, you may need to be a member of the \"kvm\" group.  Using VirtualBox or most VPS providers will fall back to emulation.\n* Depending on the options you use, you may need a statically linked `busybox` binary somewhere in your path.\n\nOnce you have such a kernel, run one of:\n\n* virtme-run --kimg PATH_TO_BZIMAGE\n* virtme-run --installed-kernel\n* virtme-run --installed-kernel VERSION\n\nOn x86, you can usually find a bzImage in `arch/x86/boot/bzImage` once you've\ncompiled your kernel.\n\nNote that the --kimg mode does not support modules.\n\nYou can then do things like `cd /home/username` and you will have readonly\naccess to all your files.\n\nVirtme gives you console input and output by default.  Type ctrl-a x to exit.\nType ctrl-a c to access the QEMU monitor.\n\nFor now, the virtme console is a serial console -- virtconsole seems to be unusably buggy.  I don't know of any way to keep the tty state in sync between the host and guest, so resizing the host window after starting the guest may confuse guest libraries like readline.\n\nGraphics\n========\n\nIf you want graphical output instead of console output, pass --graphics.  Note that this is the opposite of QEMU's default behavior.\n\nArchitecture support\n====================\n\nBy default, virtme will use whatever architecture would be shown by `uname -m`.  You can override this with `--arch`.  Note that you may need to do some poorly documented fiddling for now to get non-native architectures working, and you will almost certainly need to set `--root` to a root that matches the architecture.\n\nx86\n---\n\nx86 (both x86_64 and i386) is fully supported, although some odd KVM configurations may cause problems.\n\nARM\n---\n\nARM is supported using qemu's `versatilepb` machine.  This is an unfortunate choice: that's a rather outdated machine, and virtme should be using a different system (`vexpress-a15` or `virt`) that is more modern and does not depend on PCI.  There is no built-in KVM support for ARM right now, although it might work by accident -- I don't own a real KVM-capable ARM machine to test it on.\n\nAarch64\n-------\n\nAarch64 works out of the box if you have a new enough version of QEMU.\n\nPPC64\n-----\n\nPPC64 appears to be reasonably functional.\n\nOthers\n------\n\nOther architectures may or may not work.  Adding support is trivial, so ping me if you need another architecture.  Unrecognized architectures use a set of maybe-acceptable defaults.\n\nUpcoming features\n=================\n\nIn the near term, the high-priority features are:\n\n* Support for modular virtfs and 9p for non-installed kernels.\n* Some way to configure writable mounts.\n* A clean way to run a script in the guest for testing.", "description_content_type": null, "docs_url": null, "download_url": "https://www.kernel.org/pub/linux/utils/kernel/virtme/releases/virtme-0.0.1.tar.xz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.kernel.org/cgit/utils/kernel/virtme/virtme.git", "keywords": null, "license": "GPLv2", "maintainer": null, "maintainer_email": null, "name": "virtme", "package_url": "https://pypi.org/project/virtme/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/virtme/", "project_urls": {"Download": "https://www.kernel.org/pub/linux/utils/kernel/virtme/releases/virtme-0.0.1.tar.xz", "Homepage": "https://git.kernel.org/cgit/utils/kernel/virtme/virtme.git"}, "release_url": "https://pypi.org/project/virtme/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Virtualize the running distro or a simple rootfs", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-virtme\">\n<h2>What is virtme?</h2>\n<p>Virtme is a set of simple tools to run a virtualized Linux kernel that\nuses the host Linux distribution or a simple rootfs instead of a whole\ndisk image.</p>\n<p>Virtme is tiny, easy to use, and makes testing kernel changes quite simple.</p>\n<p>Some day this might be useful as a sort of sandbox.  Right now it\u2019s not\nreally configurable enough for that.</p>\n<p>Virtme is hosted at kernel.org in utils/kernel/virtme/virtme.git ([web][korg-web] | [git][korg-git]).  It\u2019s mirrored [on github][github].</p>\n<p>[korg-web]: <a href=\"https://git.kernel.org/cgit/utils/kernel/virtme/virtme.git\" rel=\"nofollow\">https://git.kernel.org/cgit/utils/kernel/virtme/virtme.git</a> \u201cvirtme on kernel.org\u201d\n[korg-git]: git://git.kernel.org/pub/scm/utils/kernel/virtme/virtme.git \u201cgit address\u201d\n[github]: https://github.com/amluto/virtme</p>\n</div>\n<div id=\"how-to-use-virtme\">\n<h2>How to use virtme</h2>\n<p>You\u2019ll need a Linux kernel that has these options (built-in or as modules)</p>\n<blockquote>\nCONFIG_VIRTIO\nCONFIG_VIRTIO_PCI\nCONFIG_NET_9P\nCONFIG_NET_9P_VIRTIO\nCONFIG_9P_FS</blockquote>\n<p>For networking support, you also need CONFIG_VIRTIO_NET.</p>\n<p>For script support, you need CONFIG_VIRTIO_CONSOLE.</p>\n<p>For disk support, you need CONFIG_SCSI_VIRTIO.</p>\n<p>That kernel needs to be sane.  Your kernel is probably sane, but allmodconfig and allyesconfig generate insane kernels.  Sanity includes:</p>\n<blockquote>\nCONFIG_CMDLINE_OVERRIDE=n\nCONFIG_BINFMT_SCRIPT=y\nCONFIG_TMPFS=y</blockquote>\n<p>You may also have better luck if you set:</p>\n<blockquote>\nCONFIG_EMBEDDED=n\nCONFIG_EXPERT=n\nCONFIG_MODULE_SIG_FORCE=n\nCONFIG_DEVTMPFS=y</blockquote>\n<p>An easy, somewhat-reliable way to generate a working config is to append\nthe <cite>prereqs.config</cite> file to your .config and then run <cite>make defconfig</cite>.</p>\n<p>Your host system will need to satisfy some prerequisites:</p>\n<ul>\n<li>You need Python 3.3 or higher.</li>\n<li>QEMU 1.6 or higher is recommended.  QEMU 1.4 and 1.5 are partially supported using a rather ugly kludge.\n* You will have a much better experience if KVM is enabled.  That means that you should be on bare metal with hardware virtualization (VT-x or SVM) enabled or in a VM that supports nested virtualization.  On some Linux distributions, you may need to be a member of the \u201ckvm\u201d group.  Using VirtualBox or most VPS providers will fall back to emulation.</li>\n<li>Depending on the options you use, you may need a statically linked <cite>busybox</cite> binary somewhere in your path.</li>\n</ul>\n<p>Once you have such a kernel, run one of:</p>\n<ul>\n<li>virtme-run \u2013kimg PATH_TO_BZIMAGE</li>\n<li>virtme-run \u2013installed-kernel</li>\n<li>virtme-run \u2013installed-kernel VERSION</li>\n</ul>\n<p>On x86, you can usually find a bzImage in <cite>arch/x86/boot/bzImage</cite> once you\u2019ve\ncompiled your kernel.</p>\n<p>Note that the \u2013kimg mode does not support modules.</p>\n<p>You can then do things like <cite>cd /home/username</cite> and you will have readonly\naccess to all your files.</p>\n<p>Virtme gives you console input and output by default.  Type ctrl-a x to exit.\nType ctrl-a c to access the QEMU monitor.</p>\n<p>For now, the virtme console is a serial console \u2013 virtconsole seems to be unusably buggy.  I don\u2019t know of any way to keep the tty state in sync between the host and guest, so resizing the host window after starting the guest may confuse guest libraries like readline.</p>\n</div>\n<div id=\"graphics\">\n<h2>Graphics</h2>\n<p>If you want graphical output instead of console output, pass \u2013graphics.  Note that this is the opposite of QEMU\u2019s default behavior.</p>\n</div>\n<div id=\"architecture-support\">\n<h2>Architecture support</h2>\n<p>By default, virtme will use whatever architecture would be shown by <cite>uname -m</cite>.  You can override this with <cite>\u2013arch</cite>.  Note that you may need to do some poorly documented fiddling for now to get non-native architectures working, and you will almost certainly need to set <cite>\u2013root</cite> to a root that matches the architecture.</p>\n<div id=\"x86\">\n<h3>x86</h3>\n<p>x86 (both x86_64 and i386) is fully supported, although some odd KVM configurations may cause problems.</p>\n</div>\n<div id=\"arm\">\n<h3>ARM</h3>\n<p>ARM is supported using qemu\u2019s <cite>versatilepb</cite> machine.  This is an unfortunate choice: that\u2019s a rather outdated machine, and virtme should be using a different system (<cite>vexpress-a15</cite> or <cite>virt</cite>) that is more modern and does not depend on PCI.  There is no built-in KVM support for ARM right now, although it might work by accident \u2013 I don\u2019t own a real KVM-capable ARM machine to test it on.</p>\n</div>\n<div id=\"aarch64\">\n<h3>Aarch64</h3>\n<p>Aarch64 works out of the box if you have a new enough version of QEMU.</p>\n</div>\n<div id=\"ppc64\">\n<h3>PPC64</h3>\n<p>PPC64 appears to be reasonably functional.</p>\n</div>\n<div id=\"others\">\n<h3>Others</h3>\n<p>Other architectures may or may not work.  Adding support is trivial, so ping me if you need another architecture.  Unrecognized architectures use a set of maybe-acceptable defaults.</p>\n</div>\n</div>\n<div id=\"upcoming-features\">\n<h2>Upcoming features</h2>\n<p>In the near term, the high-priority features are:</p>\n<ul>\n<li>Support for modular virtfs and 9p for non-installed kernels.</li>\n<li>Some way to configure writable mounts.</li>\n<li>A clean way to run a script in the guest for testing.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1219739, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "aa932a80e5e3c1a5d0544b334882b9f1", "sha256": "ef3dc92e782901f6416ddc8830c791353887ab4d9377d3e09fd0b5548465bed7"}, "downloads": -1, "filename": "virtme-0.0.1.tar.gz", "has_sig": false, "md5_digest": "aa932a80e5e3c1a5d0544b334882b9f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24644, "upload_time": "2014-09-10T18:05:28", "upload_time_iso_8601": "2014-09-10T18:05:28.397416Z", "url": "https://files.pythonhosted.org/packages/a3/a6/83dfe4e387075387f029dd471ce922149303846cb9ce001689055ea68d00/virtme-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa932a80e5e3c1a5d0544b334882b9f1", "sha256": "ef3dc92e782901f6416ddc8830c791353887ab4d9377d3e09fd0b5548465bed7"}, "downloads": -1, "filename": "virtme-0.0.1.tar.gz", "has_sig": false, "md5_digest": "aa932a80e5e3c1a5d0544b334882b9f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24644, "upload_time": "2014-09-10T18:05:28", "upload_time_iso_8601": "2014-09-10T18:05:28.397416Z", "url": "https://files.pythonhosted.org/packages/a3/a6/83dfe4e387075387f029dd471ce922149303846cb9ce001689055ea68d00/virtme-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:35:32 2020"}