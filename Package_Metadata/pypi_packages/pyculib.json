{"info": {"author": "Continuum Analytics, Inc.", "author_email": "support@continuum.io", "bugtrack_url": null, "classifiers": [], "description": "Pyculib\n=======\n\nPyculib provides Python bindings to the following CUDA libraries:\n\n-  `cuBLAS <https://developer.nvidia.com/cublas>`__\n-  `cuFFT <https://developer.nvidia.com/cufft>`__\n-  `cuSPARSE <https://developer.nvidia.com/cusparse>`__\n-  `cuRAND <https://developer.nvidia.com/curand>`__\n-  CUDA Sorting algorithms from the\n   `CUB <https://nvlabs.github.io/cub/>`__ and `Modern\n   GPU <https://github.com/moderngpu/moderngpu>`__ libraries.\n\nThese bindings are direct ports of those available in `Anaconda\nAccelerate <https://docs.continuum.io/accelerate/cuda-libs>`__.\n\nDocumentation is located\n`here <http://pyculib.readthedocs.io/en/latest/>`__\n\nInstalling\n----------\n\nThe easiest way to install Pyculib and get updates is by using the\n`Anaconda Distribution <https://www.continuum.io/downloads>`__\n\n::\n\n    #> conda install pyculib\n\nTo compile from source, it is recommended to create a conda environment\ncontaining the following:\n\n-  cffi\n-  cudatoolkit\n-  numpy\n-  numba\n-  pyculib\\_sorting\n-  scipy\n\nfor instructions on how to do this see the\n`conda <https://conda.io/docs/>`__ documentation, specifically the\nsection on `managing\nenvironments <https://conda.io/docs/using/envs.html#managing-environments>`__.\n\nOnce a suitable environment is activated, installation achieved simply\nby running:\n\n::\n\n    #> python setup.py install\n\nand the installation can be tested with:\n\n::\n\n    #> ./runtests.py\n\nDocumentation\n-------------\n\nDocumentation is located\n`here <http://pyculib.readthedocs.io/en/latest/>`__.\n\nBuilding Documentation\n~~~~~~~~~~~~~~~~~~~~~~\n\nIt is also possible to build a local copy of the documentation from\nsource. This requires GNU Make and sphinx (available via conda).\n\nDocumentation is stored in the ``doc`` folder, and should be built with:\n\n::\n\n    #> make SPHINXOPTS=-Wn clean html\n\nThis ensures that the documentation renders without errors. If errors\noccur, they can all be seen at once by building with:\n\n::\n\n    #> make SPHINXOPTS=-n clean html\n\nHowever, these errors should all be fixed so that building with ``-Wn``\nis possible prior to merging any documentation changes or updates.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://continuum.io", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pyculib", "package_url": "https://pypi.org/project/pyculib/", "platform": "", "project_url": "https://pypi.org/project/pyculib/", "project_urls": {"Homepage": "http://continuum.io"}, "release_url": "https://pypi.org/project/pyculib/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Pyculib - python bindings for NVIDIA CUDA libraries", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Pyculib provides Python bindings to the following CUDA libraries:</p>\n<ul>\n<li><a href=\"https://developer.nvidia.com/cublas\" rel=\"nofollow\">cuBLAS</a></li>\n<li><a href=\"https://developer.nvidia.com/cufft\" rel=\"nofollow\">cuFFT</a></li>\n<li><a href=\"https://developer.nvidia.com/cusparse\" rel=\"nofollow\">cuSPARSE</a></li>\n<li><a href=\"https://developer.nvidia.com/curand\" rel=\"nofollow\">cuRAND</a></li>\n<li>CUDA Sorting algorithms from the\n<a href=\"https://nvlabs.github.io/cub/\" rel=\"nofollow\">CUB</a> and <a href=\"https://github.com/moderngpu/moderngpu\" rel=\"nofollow\">Modern\nGPU</a> libraries.</li>\n</ul>\n<p>These bindings are direct ports of those available in <a href=\"https://docs.continuum.io/accelerate/cuda-libs\" rel=\"nofollow\">Anaconda\nAccelerate</a>.</p>\n<p>Documentation is located\n<a href=\"http://pyculib.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a></p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>The easiest way to install Pyculib and get updates is by using the\n<a href=\"https://www.continuum.io/downloads\" rel=\"nofollow\">Anaconda Distribution</a></p>\n<pre>#&gt; conda install pyculib\n</pre>\n<p>To compile from source, it is recommended to create a conda environment\ncontaining the following:</p>\n<ul>\n<li>cffi</li>\n<li>cudatoolkit</li>\n<li>numpy</li>\n<li>numba</li>\n<li>pyculib_sorting</li>\n<li>scipy</li>\n</ul>\n<p>for instructions on how to do this see the\n<a href=\"https://conda.io/docs/\" rel=\"nofollow\">conda</a> documentation, specifically the\nsection on <a href=\"https://conda.io/docs/using/envs.html#managing-environments\" rel=\"nofollow\">managing\nenvironments</a>.</p>\n<p>Once a suitable environment is activated, installation achieved simply\nby running:</p>\n<pre>#&gt; python setup.py install\n</pre>\n<p>and the installation can be tested with:</p>\n<pre>#&gt; ./runtests.py\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation is located\n<a href=\"http://pyculib.readthedocs.io/en/latest/\" rel=\"nofollow\">here</a>.</p>\n<div id=\"building-documentation\">\n<h3>Building Documentation</h3>\n<p>It is also possible to build a local copy of the documentation from\nsource. This requires GNU Make and sphinx (available via conda).</p>\n<p>Documentation is stored in the <tt>doc</tt> folder, and should be built with:</p>\n<pre>#&gt; make SPHINXOPTS=-Wn clean html\n</pre>\n<p>This ensures that the documentation renders without errors. If errors\noccur, they can all be seen at once by building with:</p>\n<pre>#&gt; make SPHINXOPTS=-n clean html\n</pre>\n<p>However, these errors should all be fixed so that building with <tt><span class=\"pre\">-Wn</span></tt>\nis possible prior to merging any documentation changes or updates.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3050463, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "ede1e5cd3a8491751b2b30edcdc3ad97", "sha256": "f8afe9e939abe577bdda449da80373f3ecd902992de548d26d7dbba521eb7c95"}, "downloads": -1, "filename": "pyculib-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ede1e5cd3a8491751b2b30edcdc3ad97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88187, "upload_time": "2017-07-26T16:36:35", "upload_time_iso_8601": "2017-07-26T16:36:35.500480Z", "url": "https://files.pythonhosted.org/packages/f9/77/d3744b78a9ad0167c14fb1cccdc59f03d6e010406df9aca39a441574e29c/pyculib-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ede1e5cd3a8491751b2b30edcdc3ad97", "sha256": "f8afe9e939abe577bdda449da80373f3ecd902992de548d26d7dbba521eb7c95"}, "downloads": -1, "filename": "pyculib-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ede1e5cd3a8491751b2b30edcdc3ad97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 88187, "upload_time": "2017-07-26T16:36:35", "upload_time_iso_8601": "2017-07-26T16:36:35.500480Z", "url": "https://files.pythonhosted.org/packages/f9/77/d3744b78a9ad0167c14fb1cccdc59f03d6e010406df9aca39a441574e29c/pyculib-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:34 2020"}