{"info": {"author": "Gabriel Frisch", "author_email": "gabriel.frisch@hds.utc.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Mathematics"], "description": "# sparsebm: a python implementation for the Latent Bloc Model (LBM) and Stochastic Bloc Model (SBM) for an efficient analysis of large graphs.\n\n## Installing\n\nFrom pypi:\n\n```\npip3 install sparsebm\n```\n\nTo use GPU acceleration:\n\n```\npip3 install sparsebm[gpu]\n```\n\nOr\n```\npip3 install sparsebm\npip3 install cupy\n```\n\n## Example\n### Generate SBM Synthetic graph\n- Generate a synthetic graph to analyse with SBM:\n```python\nimport numpy as np\nfrom sparsebm import generate_bernouilli_SBM\n#\n# Define the properties of your graph\n#\nnumber_of_nodes = 10 ** 3\nnumber_of_clusters = 4\ncluster_proportions = np.ones(number_of_clusters) / number_of_clusters\nconnection_probabilities = np.array([[0.05, 0.018, 0.006, 0.0307], [0.018, 0.037, 0, 0], [0.006, 0, 0.055, 0.012], [0.0307, 0, 0.012, 0.043]])\n#\n# The graph is generated\n#\ndata = generate_bernouilli_SBM(number_of_nodes, number_of_clusters, connection_probabilities, cluster_proportions, symetric=True)\ngraph, cluster_indicator, = (data[\"X\"], data[\"Y\"])\n```\n\n### Infere with sparsebm SBM_bernouilli:\n - Use the bernouilli Stochastic Bloc Model:\n```python\n    from sparsebm import SBM_bernouilli\n\n    model = SBM_bernouilli(\n        number_of_clusters,\n        gpu_number=None, # Or give the desired GPU index.\n        symetric=True,\n    )\n\n    model.fit(graph)\n\n    print(\"Labels:\")\n    print(model.labels)\n```\nTo use GPU acceleration, CUPY needs to be installed and replace gpu_number to the desired GPU index.\n\n\n\n### Generate LBM Synthetic graph\n- Generate a synthetic graph to analyse with LBM:\n``` python\n    from sparsebm import generate_bernouilli_LBM\n    import numpy as np\n    #\n    # Define the properties of your graph\n    #\n    number_of_rows = 10 ** 3\n    number_of_columns = 2* number_of_rows\n    nb_row_clusters, nb_column_clusters = 3, 4\n    row_cluster_proportions = np.ones(nb_row_clusters) / nb_row_clusters\n    column_cluster_proportions = np.ones(nb_column_clusters) / nb_column_clusters\n    connection_probabilities = np.array([[0.1, 0.0125, 0.0125, 0.05], [0.0125, 0.1, 0.0125, 0.05], [0, 0.0125, 0.1, 0]])\n    #\n    # The graph is generated\n    #\n    data = generate_bernouilli_LBM(\n            number_of_rows,\n            number_of_columns,\n            nb_row_clusters,\n            nb_column_clusters,\n            connection_probabilities,\n            row_cluster_proportions,\n            column_cluster_proportions\n        )\n    graph, row_cluster_indicator, column_cluster_indicator, = (data[\"X\"], data[\"Y1\"], data[\"Y2\"])\n```\n\n### Infere with sparsebm LBM_bernouilli:\n - Use the bernouilli Latent Bloc Model:\n\n``` python\n    from sparsebm import LBM_bernouilli\n\n    model = LBM_bernouilli(\n        nb_row_clusters,\n        nb_column_clusters,\n        gpu_number=None, # Or give the desired GPU index.\n    )\n    model.fit(graph)\n\n    print(\"Row labels:\")\n    print(model.row_labels)\n\n    print(\"Column labels:\")\n    print(model.column_labels)\n```\nTo use GPU acceleration, CUPY needs to be installed and set gpu_number the desired GPU index.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gfrisch/sparsebm", "keywords": "datamining graph LBM SBM variationnal sparse", "license": "", "maintainer": "", "maintainer_email": "", "name": "sparsebm", "package_url": "https://pypi.org/project/sparsebm/", "platform": "", "project_url": "https://pypi.org/project/sparsebm/", "project_urls": {"Homepage": "https://github.com/gfrisch/sparsebm"}, "release_url": "https://pypi.org/project/sparsebm/0.2/", "requires_dist": ["progressbar2", "scipy", "numpy", "cupy ; extra == 'gpu'", "pytest ; extra == 'test'"], "requires_python": ">=3.5", "summary": "An implementation of Stochastic Bloc model and Latent Block model efficient with sparse matrices.", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sparsebm: a python implementation for the Latent Bloc Model (LBM) and Stochastic Bloc Model (SBM) for an efficient analysis of large graphs.</h1>\n<h2>Installing</h2>\n<p>From pypi:</p>\n<pre><code>pip3 install sparsebm\n</code></pre>\n<p>To use GPU acceleration:</p>\n<pre><code>pip3 install sparsebm[gpu]\n</code></pre>\n<p>Or</p>\n<pre><code>pip3 install sparsebm\npip3 install cupy\n</code></pre>\n<h2>Example</h2>\n<h3>Generate SBM Synthetic graph</h3>\n<ul>\n<li>Generate a synthetic graph to analyse with SBM:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sparsebm</span> <span class=\"kn\">import</span> <span class=\"n\">generate_bernouilli_SBM</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># Define the properties of your graph</span>\n<span class=\"c1\">#</span>\n<span class=\"n\">number_of_nodes</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"mi\">3</span>\n<span class=\"n\">number_of_clusters</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">cluster_proportions</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">number_of_clusters</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">number_of_clusters</span>\n<span class=\"n\">connection_probabilities</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.018</span><span class=\"p\">,</span> <span class=\"mf\">0.006</span><span class=\"p\">,</span> <span class=\"mf\">0.0307</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.018</span><span class=\"p\">,</span> <span class=\"mf\">0.037</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.006</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.055</span><span class=\"p\">,</span> <span class=\"mf\">0.012</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.0307</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.012</span><span class=\"p\">,</span> <span class=\"mf\">0.043</span><span class=\"p\">]])</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># The graph is generated</span>\n<span class=\"c1\">#</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">generate_bernouilli_SBM</span><span class=\"p\">(</span><span class=\"n\">number_of_nodes</span><span class=\"p\">,</span> <span class=\"n\">number_of_clusters</span><span class=\"p\">,</span> <span class=\"n\">connection_probabilities</span><span class=\"p\">,</span> <span class=\"n\">cluster_proportions</span><span class=\"p\">,</span> <span class=\"n\">symetric</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">cluster_indicator</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"X\"</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"Y\"</span><span class=\"p\">])</span>\n</pre>\n<h3>Infere with sparsebm SBM_bernouilli:</h3>\n<ul>\n<li>Use the bernouilli Stochastic Bloc Model:</li>\n</ul>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">sparsebm</span> <span class=\"kn\">import</span> <span class=\"n\">SBM_bernouilli</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">SBM_bernouilli</span><span class=\"p\">(</span>\n        <span class=\"n\">number_of_clusters</span><span class=\"p\">,</span>\n        <span class=\"n\">gpu_number</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Or give the desired GPU index.</span>\n        <span class=\"n\">symetric</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Labels:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">)</span>\n</pre>\n<p>To use GPU acceleration, CUPY needs to be installed and replace gpu_number to the desired GPU index.</p>\n<h3>Generate LBM Synthetic graph</h3>\n<ul>\n<li>Generate a synthetic graph to analyse with LBM:</li>\n</ul>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">sparsebm</span> <span class=\"kn\">import</span> <span class=\"n\">generate_bernouilli_LBM</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Define the properties of your graph</span>\n    <span class=\"c1\">#</span>\n    <span class=\"n\">number_of_rows</span> <span class=\"o\">=</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"mi\">3</span>\n    <span class=\"n\">number_of_columns</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">*</span> <span class=\"n\">number_of_rows</span>\n    <span class=\"n\">nb_row_clusters</span><span class=\"p\">,</span> <span class=\"n\">nb_column_clusters</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n    <span class=\"n\">row_cluster_proportions</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">nb_row_clusters</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">nb_row_clusters</span>\n    <span class=\"n\">column_cluster_proportions</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">nb_column_clusters</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">nb_column_clusters</span>\n    <span class=\"n\">connection_probabilities</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.0125</span><span class=\"p\">,</span> <span class=\"mf\">0.0125</span><span class=\"p\">,</span> <span class=\"mf\">0.05</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">0.0125</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.0125</span><span class=\"p\">,</span> <span class=\"mf\">0.05</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.0125</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># The graph is generated</span>\n    <span class=\"c1\">#</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">generate_bernouilli_LBM</span><span class=\"p\">(</span>\n            <span class=\"n\">number_of_rows</span><span class=\"p\">,</span>\n            <span class=\"n\">number_of_columns</span><span class=\"p\">,</span>\n            <span class=\"n\">nb_row_clusters</span><span class=\"p\">,</span>\n            <span class=\"n\">nb_column_clusters</span><span class=\"p\">,</span>\n            <span class=\"n\">connection_probabilities</span><span class=\"p\">,</span>\n            <span class=\"n\">row_cluster_proportions</span><span class=\"p\">,</span>\n            <span class=\"n\">column_cluster_proportions</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">row_cluster_indicator</span><span class=\"p\">,</span> <span class=\"n\">column_cluster_indicator</span><span class=\"p\">,</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"X\"</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"Y1\"</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s2\">\"Y2\"</span><span class=\"p\">])</span>\n</pre>\n<h3>Infere with sparsebm LBM_bernouilli:</h3>\n<ul>\n<li>Use the bernouilli Latent Bloc Model:</li>\n</ul>\n<pre>    <span class=\"kn\">from</span> <span class=\"nn\">sparsebm</span> <span class=\"kn\">import</span> <span class=\"n\">LBM_bernouilli</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">LBM_bernouilli</span><span class=\"p\">(</span>\n        <span class=\"n\">nb_row_clusters</span><span class=\"p\">,</span>\n        <span class=\"n\">nb_column_clusters</span><span class=\"p\">,</span>\n        <span class=\"n\">gpu_number</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"c1\"># Or give the desired GPU index.</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Row labels:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">row_labels</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Column labels:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">column_labels</span><span class=\"p\">)</span>\n</pre>\n<p>To use GPU acceleration, CUPY needs to be installed and set gpu_number the desired GPU index.</p>\n\n          </div>"}, "last_serial": 6754052, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "886353eeea3c5c7db5a876444e445b5b", "sha256": "5b2b6a0931b2ae44e643b9a22259cbed510af713612974cc9622d457614b997f"}, "downloads": -1, "filename": "sparsebm-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "886353eeea3c5c7db5a876444e445b5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13411, "upload_time": "2020-02-21T18:55:57", "upload_time_iso_8601": "2020-02-21T18:55:57.726780Z", "url": "https://files.pythonhosted.org/packages/e3/b6/0d9b05669dda256676fe00814f562db5c4f952caff578dd5f944738d7c28/sparsebm-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bd9d212aeb0aa06d45c936d2536bab3", "sha256": "a7b0e58f203ce20734d0615c9266ffe43d5a34a81aa51a5f6ab4a26d65801e6a"}, "downloads": -1, "filename": "sparsebm-0.1.tar.gz", "has_sig": false, "md5_digest": "1bd9d212aeb0aa06d45c936d2536bab3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11283, "upload_time": "2020-02-21T18:56:00", "upload_time_iso_8601": "2020-02-21T18:56:00.017402Z", "url": "https://files.pythonhosted.org/packages/03/0c/323c9b0aacd9c331e42d3bb8f482e3d61943fb451f2c6a02ba24e1381537/sparsebm-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "26749cbeb0ca29198e8624914ba6e4f6", "sha256": "ce0938a450b4a6f4dc07590b484006ce18b1456f05db08fb6fc2a3a1c3ecb8d8"}, "downloads": -1, "filename": "sparsebm-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "26749cbeb0ca29198e8624914ba6e4f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13290, "upload_time": "2020-03-05T09:13:57", "upload_time_iso_8601": "2020-03-05T09:13:57.734485Z", "url": "https://files.pythonhosted.org/packages/74/6d/6b89548f0ede27650a4d80c4bcf4f7261a323e9b95e31d23e04c8105e2f3/sparsebm-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88a4597af1dab74fa1d2dc3b708d3eed", "sha256": "a96088d12e76c107cd244c078c17ce7ca8d2c6b18cb2d12001827ba013ca9d27"}, "downloads": -1, "filename": "sparsebm-0.2.tar.gz", "has_sig": false, "md5_digest": "88a4597af1dab74fa1d2dc3b708d3eed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11172, "upload_time": "2020-03-05T09:13:59", "upload_time_iso_8601": "2020-03-05T09:13:59.183956Z", "url": "https://files.pythonhosted.org/packages/8b/53/3e15bf9021e78eb83599322200d3c757d0c006fcac98d1786df8915e4fd6/sparsebm-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26749cbeb0ca29198e8624914ba6e4f6", "sha256": "ce0938a450b4a6f4dc07590b484006ce18b1456f05db08fb6fc2a3a1c3ecb8d8"}, "downloads": -1, "filename": "sparsebm-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "26749cbeb0ca29198e8624914ba6e4f6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13290, "upload_time": "2020-03-05T09:13:57", "upload_time_iso_8601": "2020-03-05T09:13:57.734485Z", "url": "https://files.pythonhosted.org/packages/74/6d/6b89548f0ede27650a4d80c4bcf4f7261a323e9b95e31d23e04c8105e2f3/sparsebm-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "88a4597af1dab74fa1d2dc3b708d3eed", "sha256": "a96088d12e76c107cd244c078c17ce7ca8d2c6b18cb2d12001827ba013ca9d27"}, "downloads": -1, "filename": "sparsebm-0.2.tar.gz", "has_sig": false, "md5_digest": "88a4597af1dab74fa1d2dc3b708d3eed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11172, "upload_time": "2020-03-05T09:13:59", "upload_time_iso_8601": "2020-03-05T09:13:59.183956Z", "url": "https://files.pythonhosted.org/packages/8b/53/3e15bf9021e78eb83599322200d3c757d0c006fcac98d1786df8915e4fd6/sparsebm-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:50 2020"}