{"info": {"author": "Charles L Jackson", "author_email": "chuckj44@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Communications :: Email"], "description": "================\nmboxattachments\n================\nmboxattachments is a Python class for extracting all embedded files in\na group of emails.  It was developed to assist in the running of a\nphotography club.  Members of the club would regularly send emails\ncontaining images to the club secretary.  The secretary would manually\nsave the attachments, organize those files, and prepare a show for the\nmembers.  The manual saving process was time consuming and error prone.\n\nThis utility allows downloading all the attachments in a set of emails\ncontained in an mbox file. Conveniently, gmail permits exporting emails\nas mbox files\n\n------------\nInstallation\n------------\nOn debian and Windows 7 the following is known to work\n\n::\n\n   pip install mboxattachments\n\n\n\n---------\nRunning\n---------\n::\n\n  mboxattachments --exportpath  images  emails.mbox\n\n----------\nExamples\n----------\n\n::\n\n  mboxattachments --filter_from flur  --exportpath images emails.mbox\n\nThe above line will test all email messages in the file emails.mbox\nto see the the senders name (FROM field) matches the regular expression\nflur.  If an mail matches, all of its attachments will be written to\na file in the directory images.\n\n::\n\n  mboxattachments --SQstart 1000  --exportpath images emails.mbox\n\nThe above command will save the attachments from every file in\nemails.bmox.  The file names will be of the form\nSQ1000....,\nSQ1001....,\nSQ1003....\n\n\n----------\nOptions\n----------\n\n::\n\n  options:   specify output directory\n             filter by sender\n             filter by recipient\n             filter by date\n             specify destination diretory for attachments\n             set sequence number field starting value (default 0)\n\n  usage:\n   mboxattachments [--help] [--version] [--debug] [--filter_from regexp]\n                   [--filter_to regexp] [--filter_date regexp]\n                   [--exportpath path] [--SQstart value]  input_mbox_file ...\n\n  attachments are stored as separate files\n  file names are of the form\n  <sequence number>-<email subject>-<email sender>-<file name of attachment>\n    for example, a possible file name is\n    SQ0146-CellPhone - Action-johndoe@gmail.com-myPrettyPicture.jpg\n    ------ ------------------ ----------------- -------------------\n    seqnum    email subject     sender           file name in email\n\n\n---------\nWebsite\n---------\n\n\nhttp://www.chuck-jackson-photos.com/mboxattachments\n\ndownload\n\nhttp://www.chuck-jackson-photos.com/mboxattachments/mboxattachments-0.5.32.tar.gz", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.chuck-jackson-photos.com/mboxattachments", "keywords": "mbox attachments extract email photos images", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "mboxattachments", "package_url": "https://pypi.org/project/mboxattachments/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mboxattachments/", "project_urls": {"Homepage": "http://www.chuck-jackson-photos.com/mboxattachments"}, "release_url": "https://pypi.org/project/mboxattachments/0.5.35/", "requires_dist": null, "requires_python": null, "summary": "Utility for exporting attachments from mbox files", "version": "0.5.35", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>mboxattachments is a Python class for extracting all embedded files in\na group of emails.  It was developed to assist in the running of a\nphotography club.  Members of the club would regularly send emails\ncontaining images to the club secretary.  The secretary would manually\nsave the attachments, organize those files, and prepare a show for the\nmembers.  The manual saving process was time consuming and error prone.</p>\n<p>This utility allows downloading all the attachments in a set of emails\ncontained in an mbox file. Conveniently, gmail permits exporting emails\nas mbox files</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>On debian and Windows 7 the following is known to work</p>\n<pre>pip install mboxattachments\n</pre>\n</div>\n<div id=\"running\">\n<h2>Running</h2>\n<pre>mboxattachments --exportpath  images  emails.mbox\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre>mboxattachments --filter_from flur  --exportpath images emails.mbox\n</pre>\n<p>The above line will test all email messages in the file emails.mbox\nto see the the senders name (FROM field) matches the regular expression\nflur.  If an mail matches, all of its attachments will be written to\na file in the directory images.</p>\n<pre>mboxattachments --SQstart 1000  --exportpath images emails.mbox\n</pre>\n<p>The above command will save the attachments from every file in\nemails.bmox.  The file names will be of the form\nSQ1000\u2026.,\nSQ1001\u2026.,\nSQ1003\u2026.</p>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<pre>options:   specify output directory\n           filter by sender\n           filter by recipient\n           filter by date\n           specify destination diretory for attachments\n           set sequence number field starting value (default 0)\n\nusage:\n mboxattachments [--help] [--version] [--debug] [--filter_from regexp]\n                 [--filter_to regexp] [--filter_date regexp]\n                 [--exportpath path] [--SQstart value]  input_mbox_file ...\n\nattachments are stored as separate files\nfile names are of the form\n&lt;sequence number&gt;-&lt;email subject&gt;-&lt;email sender&gt;-&lt;file name of attachment&gt;\n  for example, a possible file name is\n  SQ0146-CellPhone - Action-johndoe@gmail.com-myPrettyPicture.jpg\n  ------ ------------------ ----------------- -------------------\n  seqnum    email subject     sender           file name in email\n</pre>\n</div>\n<div id=\"website\">\n<h2>Website</h2>\n<p><a href=\"http://www.chuck-jackson-photos.com/mboxattachments\" rel=\"nofollow\">http://www.chuck-jackson-photos.com/mboxattachments</a></p>\n<p>download</p>\n<p><a href=\"http://www.chuck-jackson-photos.com/mboxattachments/mboxattachments-0.5.32.tar.gz\" rel=\"nofollow\">http://www.chuck-jackson-photos.com/mboxattachments/mboxattachments-0.5.32.tar.gz</a></p>\n</div>\n\n          </div>"}, "last_serial": 2701059, "releases": {"0.5.35": [{"comment_text": "", "digests": {"md5": "dc3f1a187f4375646c0c329370e43636", "sha256": "890e35dd91f12587d9304b90b9ff0de1380eb464b37d2d308139934e9854796e"}, "downloads": -1, "filename": "mboxattachments-0.5.35.tar.gz", "has_sig": false, "md5_digest": "dc3f1a187f4375646c0c329370e43636", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8888, "upload_time": "2017-03-12T20:44:11", "upload_time_iso_8601": "2017-03-12T20:44:11.269977Z", "url": "https://files.pythonhosted.org/packages/a9/bc/d973d5b92b93bc8d7ab5e32ac5945def38498f369240339bbb410e71ae54/mboxattachments-0.5.35.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dc3f1a187f4375646c0c329370e43636", "sha256": "890e35dd91f12587d9304b90b9ff0de1380eb464b37d2d308139934e9854796e"}, "downloads": -1, "filename": "mboxattachments-0.5.35.tar.gz", "has_sig": false, "md5_digest": "dc3f1a187f4375646c0c329370e43636", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8888, "upload_time": "2017-03-12T20:44:11", "upload_time_iso_8601": "2017-03-12T20:44:11.269977Z", "url": "https://files.pythonhosted.org/packages/a9/bc/d973d5b92b93bc8d7ab5e32ac5945def38498f369240339bbb410e71ae54/mboxattachments-0.5.35.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:02 2020"}