{"info": {"author": "Joachim Viide", "author_email": "jviide@iki.fi", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# tagged [![CircleCI](https://circleci.com/gh/jviide/tagged.svg?style=shield)](https://circleci.com/gh/jviide/tagged) [![PyPI](https://img.shields.io/pypi/v/tagged.svg?color=blue)](https://pypi.org/project/tagged/)\n\nA Python version of JavaScript's [tagged templates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates), mixed with Python 3's [f-strings](https://docs.python.org/3/reference/lexical_analysis.html#f-strings).\n\nFor a more involved example how this package can be used in practice, see [htm.py](https://github.com/jviide/htm.py) that implements JSX-like syntax in plain Python.\n\n## Installation\n\n```sh\n$ pip3 install tagged\n```\n\n## Usage\n\nThis package defines `tag`, a decorator for creating new tags. Let's define a simple one:\n\n```py\nfrom tagged import tag\n\n@tag\ndef t(strings, values):\n    return strings, values\n```\n\nNow `t` can be called with a template string that can contain any Python 3 expression between `{` and `}`. The \"static\" parts of the string are listed in `strings` and the evaluated expressions are listed in `values`.\n\n```py\nstrings, values = t(\"1 + {2} equals {1 + 2}\")\n# strings == ('1 + ', ' equals ', '')\n# values == (2, 3)\n```\n\nBecause the expressions are evaluated in the current context they can refer to local variables:\n\n```py\na = [1, 2, 3]\nstrings, values = t(\"the sum of {a} is {sum(a)}\")\n# strings == ('the sum of ', ' is ', '')\n# values == ([1, 2, 3], 6)\n```\n\nDouble curly brackets are interpreted as a single textual curly bracket:\n\n```py\nstrings, values = t(\"Inline a set between {{ and }} like this: {({1, 2, 3})}\")\n# strings == ('Inline a set between { and } like this: ', '')\n# values == ({1, 2, 3},)\n```\n\n## rexample\n\nLet's define a custom tag `rex` that allows composing regular expressions from strings and other regular expressions.\n\n```py\nimport re\nfrom tagged import tag\n\n\n@tag\ndef rex(strings, values):\n    pattern = strings[0]\n    for value, string in zip(values, strings[1:]):\n        if isinstance(value, re.Pattern):\n            value = value.pattern\n        elif isinstance(value, str):\n            value = re.escape(value)\n        else:\n            raise TypeError(\"expected re.Pattern or str\")\n        pattern += \"(?:\" + value + \")\" + string\n    return re.compile(pattern)\n\n\ngreeting = re.compile(\"Hello|Hi|Greetings\")\nname = \"Python 3.7\"\n\nrex(\"{greeting}, {name}!\")\n# re.compile('(?:Hello|Hi|Greetings), (?:Python\\\\ 3\\\\.7)!')\n```\n\n## Development\n\n### Running Tests\n\n```sh\n$ python3 -m unittest discover -s tests\n```\n\n## License\n\nThis library is licensed under the MIT license. See [./LICENSE](./LICENSE).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jviide/tagged", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tagged", "package_url": "https://pypi.org/project/tagged/", "platform": "", "project_url": "https://pypi.org/project/tagged/", "project_urls": {"Homepage": "https://github.com/jviide/tagged"}, "release_url": "https://pypi.org/project/tagged/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Tagged templates for Python", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>tagged <a href=\"https://circleci.com/gh/jviide/tagged\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c15888388576e86c92496137df847a321b9cb32/68747470733a2f2f636972636c6563692e636f6d2f67682f6a76696964652f7461676765642e7376673f7374796c653d736869656c64\"></a> <a href=\"https://pypi.org/project/tagged/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e62bc311a6d9ff7ee2e6f18b97f7ae3cb0eb691/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7461676765642e7376673f636f6c6f723d626c7565\"></a></h1>\n<p>A Python version of JavaScript's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates\" rel=\"nofollow\">tagged templates</a>, mixed with Python 3's <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#f-strings\" rel=\"nofollow\">f-strings</a>.</p>\n<p>For a more involved example how this package can be used in practice, see <a href=\"https://github.com/jviide/htm.py\" rel=\"nofollow\">htm.py</a> that implements JSX-like syntax in plain Python.</p>\n<h2>Installation</h2>\n<pre>$ pip3 install tagged\n</pre>\n<h2>Usage</h2>\n<p>This package defines <code>tag</code>, a decorator for creating new tags. Let's define a simple one:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tagged</span> <span class=\"kn\">import</span> <span class=\"n\">tag</span>\n\n<span class=\"nd\">@tag</span>\n<span class=\"k\">def</span> <span class=\"nf\">t</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">strings</span><span class=\"p\">,</span> <span class=\"n\">values</span>\n</pre>\n<p>Now <code>t</code> can be called with a template string that can contain any Python 3 expression between <code>{</code> and <code>}</code>. The \"static\" parts of the string are listed in <code>strings</code> and the evaluated expressions are listed in <code>values</code>.</p>\n<pre><span class=\"n\">strings</span><span class=\"p\">,</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s2\">\"1 + </span><span class=\"si\">{2}</span><span class=\"s2\"> equals {1 + 2}\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># strings == ('1 + ', ' equals ', '')</span>\n<span class=\"c1\"># values == (2, 3)</span>\n</pre>\n<p>Because the expressions are evaluated in the current context they can refer to local variables:</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">strings</span><span class=\"p\">,</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s2\">\"the sum of </span><span class=\"si\">{a}</span><span class=\"s2\"> is {sum(a)}\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># strings == ('the sum of ', ' is ', '')</span>\n<span class=\"c1\"># values == ([1, 2, 3], 6)</span>\n</pre>\n<p>Double curly brackets are interpreted as a single textual curly bracket:</p>\n<pre><span class=\"n\">strings</span><span class=\"p\">,</span> <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"p\">(</span><span class=\"s2\">\"Inline a set between {{ and }} like this: {({1, 2, 3})}\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># strings == ('Inline a set between { and } like this: ', '')</span>\n<span class=\"c1\"># values == ({1, 2, 3},)</span>\n</pre>\n<h2>rexample</h2>\n<p>Let's define a custom tag <code>rex</code> that allows composing regular expressions from strings and other regular expressions.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tagged</span> <span class=\"kn\">import</span> <span class=\"n\">tag</span>\n\n\n<span class=\"nd\">@tag</span>\n<span class=\"k\">def</span> <span class=\"nf\">rex</span><span class=\"p\">(</span><span class=\"n\">strings</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">):</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">strings</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">for</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">string</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">strings</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">Pattern</span><span class=\"p\">):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">pattern</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">\"expected re.Pattern or str\"</span><span class=\"p\">)</span>\n        <span class=\"n\">pattern</span> <span class=\"o\">+=</span> <span class=\"s2\">\"(?:\"</span> <span class=\"o\">+</span> <span class=\"n\">value</span> <span class=\"o\">+</span> <span class=\"s2\">\")\"</span> <span class=\"o\">+</span> <span class=\"n\">string</span>\n    <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s2\">\"Hello|Hi|Greetings\"</span><span class=\"p\">)</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Python 3.7\"</span>\n\n<span class=\"n\">rex</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{greeting}</span><span class=\"s2\">, </span><span class=\"si\">{name}</span><span class=\"s2\">!\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># re.compile('(?:Hello|Hi|Greetings), (?:Python\\\\ 3\\\\.7)!')</span>\n</pre>\n<h2>Development</h2>\n<h3>Running Tests</h3>\n<pre>$ python3 -m unittest discover -s tests\n</pre>\n<h2>License</h2>\n<p>This library is licensed under the MIT license. See <a href=\"./LICENSE\" rel=\"nofollow\">./LICENSE</a>.</p>\n\n          </div>"}, "last_serial": 5925013, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "2aa728469f9431db7e39051aa58751c1", "sha256": "32da45011fa32edfdd7561e22d8c5e70489f9cfdf803a34c260fec50638043a6"}, "downloads": -1, "filename": "tagged-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2aa728469f9431db7e39051aa58751c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3428, "upload_time": "2019-07-08T15:21:28", "upload_time_iso_8601": "2019-07-08T15:21:28.261435Z", "url": "https://files.pythonhosted.org/packages/89/ba/d2f72e5a874e3764cf9781724ca53a1ed59d54ee273685eccb9a1906d4ad/tagged-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30df17b3c5a3160c5243723ed0f8710a", "sha256": "5afb4c5bc9713358d1355b5434fa0bda8ab9df460ddeff6339fcf8ebc674522b"}, "downloads": -1, "filename": "tagged-0.0.1.tar.gz", "has_sig": false, "md5_digest": "30df17b3c5a3160c5243723ed0f8710a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2387, "upload_time": "2019-07-08T15:21:30", "upload_time_iso_8601": "2019-07-08T15:21:30.351833Z", "url": "https://files.pythonhosted.org/packages/60/82/ae92732f5e241f99a2330a8ef2b95c48a55522c4c8a57abba8a298dfe5a2/tagged-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "21b4504dfdb74e384b341985a8b649e7", "sha256": "6f9bbb98c083536c5ec283688ddc9cec830ac0de19ab4ad9fa12db66985f7469"}, "downloads": -1, "filename": "tagged-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "21b4504dfdb74e384b341985a8b649e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4174, "upload_time": "2019-10-03T19:43:44", "upload_time_iso_8601": "2019-10-03T19:43:44.618824Z", "url": "https://files.pythonhosted.org/packages/43/a8/bf957ffdcd91d1ffad19083e4af72269ff7bb832113e2558e8270d4efd22/tagged-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "430303baf6e3d4bf57199ef8957f5de0", "sha256": "fb1e830ce83b7df7e92d03ad349babad0c78eb1d1c5dd922e067f1079b119666"}, "downloads": -1, "filename": "tagged-0.0.2.tar.gz", "has_sig": false, "md5_digest": "430303baf6e3d4bf57199ef8957f5de0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3265, "upload_time": "2019-10-03T19:43:46", "upload_time_iso_8601": "2019-10-03T19:43:46.530786Z", "url": "https://files.pythonhosted.org/packages/d0/5e/96ad04eb807533cb676a790bb2d38800c4236d108b49505da822a21b4472/tagged-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "21b4504dfdb74e384b341985a8b649e7", "sha256": "6f9bbb98c083536c5ec283688ddc9cec830ac0de19ab4ad9fa12db66985f7469"}, "downloads": -1, "filename": "tagged-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "21b4504dfdb74e384b341985a8b649e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4174, "upload_time": "2019-10-03T19:43:44", "upload_time_iso_8601": "2019-10-03T19:43:44.618824Z", "url": "https://files.pythonhosted.org/packages/43/a8/bf957ffdcd91d1ffad19083e4af72269ff7bb832113e2558e8270d4efd22/tagged-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "430303baf6e3d4bf57199ef8957f5de0", "sha256": "fb1e830ce83b7df7e92d03ad349babad0c78eb1d1c5dd922e067f1079b119666"}, "downloads": -1, "filename": "tagged-0.0.2.tar.gz", "has_sig": false, "md5_digest": "430303baf6e3d4bf57199ef8957f5de0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3265, "upload_time": "2019-10-03T19:43:46", "upload_time_iso_8601": "2019-10-03T19:43:46.530786Z", "url": "https://files.pythonhosted.org/packages/d0/5e/96ad04eb807533cb676a790bb2d38800c4236d108b49505da822a21b4472/tagged-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:29 2020"}