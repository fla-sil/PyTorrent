{"info": {"author": "Coursera Inc.", "author_email": "pandas-ply@coursera.org", "bugtrack_url": null, "classifiers": [], "description": "**pandas-ply**: functional data manipulation for pandas\n=======================================================\n\n**pandas-ply** is a thin layer which makes it easier to manipulate data with `pandas <http://pandas.pydata.org/>`_. In particular, it provides elegant, functional, chainable syntax in cases where **pandas** would require mutation, saved intermediate values, or other awkward constructions. In this way, it aims to move **pandas** closer to the \"grammar of data manipulation\" provided by the `dplyr <http://cran.r-project.org/web/packages/dplyr/index.html>`_ package for R.\n\nFor example, take the **dplyr** code below:\n\n.. code:: r\n\n  flights %>%\n    group_by(year, month, day) %>%\n    summarise(\n      arr = mean(arr_delay, na.rm = TRUE),\n      dep = mean(dep_delay, na.rm = TRUE)\n    ) %>%\n    filter(arr > 30 & dep > 30)\n\nThe most common way to express this in **pandas** is probably:\n\n.. code:: python\n\n  grouped_flights = flights.groupby(['year', 'month', 'day'])\n  output = pd.DataFrame()\n  output['arr'] = grouped_flights.arr_delay.mean()\n  output['dep'] = grouped_flights.dep_delay.mean()\n  filtered_output = output[(output.arr > 30) & (output.dep > 30)]\n\n**pandas-ply** lets you instead write:\n\n.. code:: python\n\n  (flights\n    .groupby(['year', 'month', 'day'])\n    .ply_select(\n      arr = X.arr_delay.mean(),\n      dep = X.dep_delay.mean())\n    .ply_where(X.arr > 30, X.dep > 30))\n\nIn our opinion, this **pandas-ply** code is cleaner, more expressive, more readable, more concise, and less error-prone than the original **pandas** code.\n\nExplanatory notes on the **pandas-ply** code sample above:\n\n* **pandas-ply**'s methods (like ``ply_select`` and ``ply_where`` above) are attached directly to **pandas** objects and can be used immediately, without any wrapping or redirection. They start with a ``ply_`` prefix to distinguish them from built-in **pandas** methods.\n* **pandas-ply**'s methods are named for (and modelled after) SQL's operators. (But keep in mind that these operators will not always appear in the same order as they do in a SQL statement: ``SELECT a FROM b WHERE c GROUP BY d`` probably maps to ``b.ply_where(c).groupby(d).ply_select(a)``.)\n* **pandas-ply** includes a simple system for building \"symbolic expressions\" to provide as arguments to its methods. ``X`` above is an instance of ``ply.symbolic.Symbol``. Operations on this symbol produce larger compound symbolic expressions. When ``pandas-ply`` receives a symbolic expression as an argument, it converts it into a function. So, for instance, ``X.arr > 30`` in the above code could have instead been provided as ``lambda x: x.arr > 30``. Use of symbolic expressions allows the ``lambda x:`` to be left off, resulting in less cluttered code.\n\nWarning\n-------\n\n**pandas-ply** is new, and in an experimental stage of its development. The API is not yet stable. Expect the unexpected.\n\n(Pull requests are welcome. Feel free to contact us at pandas-ply@coursera.org.)\n\nUsing **pandas-ply**\n--------------------\n\nInstall **pandas-ply** with:\n\n::\n\n  $ pip install pandas-ply\n\n\nTypical use of **pandas-ply** starts with:\n\n.. code:: python\n\n  import pandas as pd\n  from pandas_ply import install_ply, X, sym_call\n\n  install_ply(pd)\n\nAfter calling ``install_ply``, all **pandas** objects have **pandas-ply**'s methods attached.\n\nAPI reference\n-------------\n\nFull API reference is available at `<http://pythonhosted.org/pandas-ply/>`_.\n\nPossible TODOs\n--------------\n\n* Extend ``pandas``' native ``groupby`` to support symbolic expressions?\n* Extend ``pandas``' native ``apply`` to support symbolic expressions?\n* Add ``.ply_call`` to ``pandas`` objects to extend chainability?\n* Version of ``ply_select`` which supports later computed columns relying on earlier computed columns?\n* Version of ``ply_select`` which supports careful column ordering?\n* Better handling of indices?\n\nLicense\n-------\n\nCopyright 2015 Coursera Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", "description_content_type": null, "docs_url": "https://pythonhosted.org/pandas-ply/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/coursera/pandas-ply", "keywords": null, "license": "Apache License 2.0", "maintainer": null, "maintainer_email": null, "name": "pandas-ply", "package_url": "https://pypi.org/project/pandas-ply/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pandas-ply/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/coursera/pandas-ply"}, "release_url": "https://pypi.org/project/pandas-ply/0.2.1/", "requires_dist": null, "requires_python": null, "summary": "functional data manipulation for pandas", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>pandas-ply</strong> is a thin layer which makes it easier to manipulate data with <a href=\"http://pandas.pydata.org/\" rel=\"nofollow\">pandas</a>. In particular, it provides elegant, functional, chainable syntax in cases where <strong>pandas</strong> would require mutation, saved intermediate values, or other awkward constructions. In this way, it aims to move <strong>pandas</strong> closer to the \u201cgrammar of data manipulation\u201d provided by the <a href=\"http://cran.r-project.org/web/packages/dplyr/index.html\" rel=\"nofollow\">dplyr</a> package for R.</p>\n<p>For example, take the <strong>dplyr</strong> code below:</p>\n<pre><span class=\"n\">flights</span> <span class=\"o\">%&gt;%</span>\n  <span class=\"nf\">group_by</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n  <span class=\"nf\">summarise</span><span class=\"p\">(</span>\n    <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">arr_delay</span><span class=\"p\">,</span> <span class=\"n\">na.rm</span> <span class=\"o\">=</span> <span class=\"kc\">TRUE</span><span class=\"p\">),</span>\n    <span class=\"n\">dep</span> <span class=\"o\">=</span> <span class=\"nf\">mean</span><span class=\"p\">(</span><span class=\"n\">dep_delay</span><span class=\"p\">,</span> <span class=\"n\">na.rm</span> <span class=\"o\">=</span> <span class=\"kc\">TRUE</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span> <span class=\"o\">%&gt;%</span>\n  <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"n\">arr</span> <span class=\"o\">&gt;</span> <span class=\"m\">30</span> <span class=\"o\">&amp;</span> <span class=\"n\">dep</span> <span class=\"o\">&gt;</span> <span class=\"m\">30</span><span class=\"p\">)</span>\n</pre>\n<p>The most common way to express this in <strong>pandas</strong> is probably:</p>\n<pre><span class=\"n\">grouped_flights</span> <span class=\"o\">=</span> <span class=\"n\">flights</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">'year'</span><span class=\"p\">,</span> <span class=\"s1\">'month'</span><span class=\"p\">,</span> <span class=\"s1\">'day'</span><span class=\"p\">])</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">()</span>\n<span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">'arr'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">grouped_flights</span><span class=\"o\">.</span><span class=\"n\">arr_delay</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">'dep'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">grouped_flights</span><span class=\"o\">.</span><span class=\"n\">dep_delay</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"n\">filtered_output</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"p\">[(</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">arr</span> <span class=\"o\">&gt;</span> <span class=\"mi\">30</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">dep</span> <span class=\"o\">&gt;</span> <span class=\"mi\">30</span><span class=\"p\">)]</span>\n</pre>\n<p><strong>pandas-ply</strong> lets you instead write:</p>\n<pre><span class=\"p\">(</span><span class=\"n\">flights</span>\n  <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">'year'</span><span class=\"p\">,</span> <span class=\"s1\">'month'</span><span class=\"p\">,</span> <span class=\"s1\">'day'</span><span class=\"p\">])</span>\n  <span class=\"o\">.</span><span class=\"n\">ply_select</span><span class=\"p\">(</span>\n    <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">arr_delay</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(),</span>\n    <span class=\"n\">dep</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">dep_delay</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">())</span>\n  <span class=\"o\">.</span><span class=\"n\">ply_where</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">arr</span> <span class=\"o\">&gt;</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">dep</span> <span class=\"o\">&gt;</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n</pre>\n<p>In our opinion, this <strong>pandas-ply</strong> code is cleaner, more expressive, more readable, more concise, and less error-prone than the original <strong>pandas</strong> code.</p>\n<p>Explanatory notes on the <strong>pandas-ply</strong> code sample above:</p>\n<ul>\n<li><strong>pandas-ply</strong>\u2019s methods (like <tt>ply_select</tt> and <tt>ply_where</tt> above) are attached directly to <strong>pandas</strong> objects and can be used immediately, without any wrapping or redirection. They start with a <tt>ply_</tt> prefix to distinguish them from built-in <strong>pandas</strong> methods.</li>\n<li><strong>pandas-ply</strong>\u2019s methods are named for (and modelled after) SQL\u2019s operators. (But keep in mind that these operators will not always appear in the same order as they do in a SQL statement: <tt>SELECT a FROM b WHERE c GROUP BY d</tt> probably maps to <tt><span class=\"pre\">b.ply_where(c).groupby(d).ply_select(a)</span></tt>.)</li>\n<li><strong>pandas-ply</strong> includes a simple system for building \u201csymbolic expressions\u201d to provide as arguments to its methods. <tt>X</tt> above is an instance of <tt>ply.symbolic.Symbol</tt>. Operations on this symbol produce larger compound symbolic expressions. When <tt><span class=\"pre\">pandas-ply</span></tt> receives a symbolic expression as an argument, it converts it into a function. So, for instance, <tt>X.arr &gt; 30</tt> in the above code could have instead been provided as <tt>lambda x: x.arr &gt; 30</tt>. Use of symbolic expressions allows the <tt>lambda x:</tt> to be left off, resulting in less cluttered code.</li>\n</ul>\n<div id=\"warning\">\n<h2>Warning</h2>\n<p><strong>pandas-ply</strong> is new, and in an experimental stage of its development. The API is not yet stable. Expect the unexpected.</p>\n<p>(Pull requests are welcome. Feel free to contact us at <a href=\"mailto:pandas-ply%40coursera.org\">pandas-ply<span>@</span>coursera<span>.</span>org</a>.)</p>\n</div>\n<div id=\"using-pandas-ply\">\n<h2>Using <strong>pandas-ply</strong></h2>\n<p>Install <strong>pandas-ply</strong> with:</p>\n<pre>$ pip install pandas-ply\n</pre>\n<p>Typical use of <strong>pandas-ply</strong> starts with:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pandas_ply</span> <span class=\"kn\">import</span> <span class=\"n\">install_ply</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">sym_call</span>\n\n<span class=\"n\">install_ply</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">)</span>\n</pre>\n<p>After calling <tt>install_ply</tt>, all <strong>pandas</strong> objects have <strong>pandas-ply</strong>\u2019s methods attached.</p>\n</div>\n<div id=\"api-reference\">\n<h2>API reference</h2>\n<p>Full API reference is available at <a href=\"http://pythonhosted.org/pandas-ply/\" rel=\"nofollow\">http://pythonhosted.org/pandas-ply/</a>.</p>\n</div>\n<div id=\"possible-todos\">\n<h2>Possible TODOs</h2>\n<ul>\n<li>Extend <tt>pandas</tt>\u2019 native <tt>groupby</tt> to support symbolic expressions?</li>\n<li>Extend <tt>pandas</tt>\u2019 native <tt>apply</tt> to support symbolic expressions?</li>\n<li>Add <tt>.ply_call</tt> to <tt>pandas</tt> objects to extend chainability?</li>\n<li>Version of <tt>ply_select</tt> which supports later computed columns relying on earlier computed columns?</li>\n<li>Version of <tt>ply_select</tt> which supports careful column ordering?</li>\n<li>Better handling of indices?</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Copyright 2015 Coursera Inc.</p>\n<p>Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at</p>\n<blockquote>\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0</a></blockquote>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \u201cAS IS\u201d BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n</div>\n\n          </div>"}, "last_serial": 1695973, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "8bc48fbfedf8c5eaed62bf324731490e", "sha256": "77e0e168767503d36af8e129e20f9a5297b5bc54ff67659500b688e7f41424f9"}, "downloads": -1, "filename": "pandas-ply-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8bc48fbfedf8c5eaed62bf324731490e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6654, "upload_time": "2014-11-26T00:22:27", "upload_time_iso_8601": "2014-11-26T00:22:27.044884Z", "url": "https://files.pythonhosted.org/packages/ce/bb/7cc2077ce0b28ef3c718c8acc4d41bbab750a9de4755c7d57834fa44e7cd/pandas-ply-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d01fb800c7533f778bd90da45ec90525", "sha256": "3c5c0eefdc6c31d5d04e19b02844d4896c332e3c25678591eb17a4880f984794"}, "downloads": -1, "filename": "pandas-ply-0.1.1.tar.gz", "has_sig": false, "md5_digest": "d01fb800c7533f778bd90da45ec90525", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7161, "upload_time": "2014-12-02T02:59:57", "upload_time_iso_8601": "2014-12-02T02:59:57.036354Z", "url": "https://files.pythonhosted.org/packages/c2/0b/f5ef437df95f009899a612ecbc4d321b5c57dc9c075b2ed99daf2ca740db/pandas-ply-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e7269b4de63e1144070267b3c1188cb1", "sha256": "50f8d863a6f904adebdf3065c516221fbb1c9ce2bc4f6ca0bb09984dc8ef86a4"}, "downloads": -1, "filename": "pandas-ply-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e7269b4de63e1144070267b3c1188cb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15439, "upload_time": "2014-12-02T03:02:05", "upload_time_iso_8601": "2014-12-02T03:02:05.983758Z", "url": "https://files.pythonhosted.org/packages/5a/18/afb8b564efe37821836ebc7338ee530c90abf760484e66fba035f894967e/pandas-ply-0.1.2.tar.gz", "yanked": false}], "0.2.0": [], "0.2.1": [{"comment_text": "", "digests": {"md5": "ce354dabb0353863c08b324f9ac9193f", "sha256": "7af7f868edea3969f9bf7b10b7de5034f65f3174fb350ba9bdcf15541ec5722d"}, "downloads": -1, "filename": "pandas-ply-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ce354dabb0353863c08b324f9ac9193f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14325, "upload_time": "2015-08-27T08:23:00", "upload_time_iso_8601": "2015-08-27T08:23:00.027980Z", "url": "https://files.pythonhosted.org/packages/8d/6b/434ef2f9c96e10ba6f75a1f82a85cf46ac98199f581627c9e732504a62f3/pandas-ply-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ce354dabb0353863c08b324f9ac9193f", "sha256": "7af7f868edea3969f9bf7b10b7de5034f65f3174fb350ba9bdcf15541ec5722d"}, "downloads": -1, "filename": "pandas-ply-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ce354dabb0353863c08b324f9ac9193f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14325, "upload_time": "2015-08-27T08:23:00", "upload_time_iso_8601": "2015-08-27T08:23:00.027980Z", "url": "https://files.pythonhosted.org/packages/8d/6b/434ef2f9c96e10ba6f75a1f82a85cf46ac98199f581627c9e732504a62f3/pandas-ply-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:28 2020"}