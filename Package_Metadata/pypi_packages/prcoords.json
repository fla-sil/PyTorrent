{"info": {"author": "Mingye Wang", "author_email": "arthur200126@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: GIS"], "description": "PRCoords\n========\n\nPeople's Rectified Coordinates (PRCoords) is a cross-language implementation of \"public secret\" Chinese coordinate obfuscation methods including GCJ-02 and BD-09, along with general deobfuscation methods previously established in [ChinaMapShift][], [eviltransform][], and [geoChina][]. (Referring to the process of replacing straight lines with wavy ones as a \"transform\" is euphemism overdone.)\n\n[ChinaMapShift]: https://gist.github.com/anonymous/e7c6f67555099180ce1ae8da4ba2c513\n[geoChina]: https://github.com/caijun/geoChina/blob/master/R/cst.R\n[eviltransform]: https://github.com/googollee/eviltransform\n\nLanguages\n---------\n\n- [x] JavaScript ([`npm install prcoords`](https://www.npmjs.com/package/prcoords))\n  * Web demo: https://artoria2e5.github.io/PRCoords/demo\n- [x] Python ([`pip install prcoords`](https://pypi.org/project/prcoords/))\n- [x] \\(Obj-\\)C/C++ (C structs)\n  * [ ] Makefile with `install`\n- [ ] Ruby\n- [ ] Swift\n- [ ] C#\n- [x] Haskell (GCJ only; data structure incomplete)\n  * need to move googollee/eviltransform#54 here sometime.\n- [ ] Java\n- [ ] Matlab/Octave\n  * too lazy to split the files. also expand \"caijun\"\n- [x] PGSQL\n- [ ] Typed Racket\n  * is it done?\n\n(should I split them into submodules?)\n\nFor languages not yet supported, we recommend you to check for [eviltransform][] (MIT) or [geoChina][] (GPLv3, R) instead.\n\nAPI\n---\n\nPRCoord's APIs operate on, and returns, dedicated structures for coordinates. In API names, we generally refer to WGS-84 as `wgs`, GCJ-02 as `gcj`, and BD-09 (lat-lon) as `bd`. \n\n### Inverse functions\n\nThe obfuscations generally have these properties to maintain basic usefulness:\n\n1. `obfs(coord)` is sort of close to `coord`.\n2. `obfs(a) - obfs(b)` is usually close to `a - b`. (The closer `a` and `b` are\n   to each other, the better it works.)\n\nIn general two approaches of inverting the \"forward\" obfuscations, or working from\n`obfs(coord)` to `coord`, are implemented:\n\n* _Run it backwards_: `obfs(coord)` is never too far from `coord`, so just use\n \u00a0`obfs(obfs(coord)) - obfs(coord)` to estimate `obfs(coord) - coord`.\n* _Iterate a bit_: Get a rough `guess` somehow, and just use property 2 to estimate\n  the remaining error as `obfs(guess) - obfs(coord)` and correct the `guess`.\n\nYou can read on the demo page about how well these methods work from the `\u0394Roundtrip`\nentry. Unless you are doing archival work, you generally don't have to iterate.\n\n### The \"in China\" sanity check\n\nTypically PRCoords is only supposed to be ran on obfuscated input data, which\nare primarily Chinese coordinates. For this reason, initial implementations\ninclude this [very very rough](https://news.ycombinator.com/item?id=10965506)\nsanity check that spans a rectangular region on a mercator-projected map.\nThis check can be overridden by passing a boolean value, or may be not at all\nimplemented in certain languages if I am not in the right mood for doing\nsilly things.\n\nThere is an \"insane\" sanity check intended to approximate the range of Google\nand Baidu's distortion, intended for use by [IITC](https://iitc.me):\n[`js/insane_is_in_china.js`](https://github.com/Artoria2e5/PRCoords/blob/master/js/insane_is_in_china.js).\nIt is basically a ray-casting polygon check with 70 vertices. You, as the\ncaller, should still be responsible for telling whether a point is part of the\ngov-screwed Chinese data.\n\nWhy another wheel?\n------------------\n\n* Public Domain\n* Clean API based on pairs of coordinates\n* Need to find a place for this sarcastic name\n\nPhysical PRCoords\n-----------------\n\nYou can print out a minimal copy of PRCoords with [this PDF file](https://commons.wikimedia.org/wiki/File:PRcoords_Cheatsheet.pdf). I am working on some better options [in issue #2](https://github.com/Artoria2e5/PRCoords/issues/2). A fairly simple tote bag with an older version of the PDF is [available from Teespring](https://teespring.com/miniprcoords-tote-v1).\n\nFeel free to print and sell t-shirts with the PDF file! It is put in the Public Domain, so you don't have to pay me for that. You can always fund my subversive activities on [Patreon](https://www.patreon.com/artoria2e5) though.\n\nLicense\n-------\n\nUnless otherwise mentioned, all files in this package, including this README file,\nare dual-licensed under:\n\n* [CC0 1.0 Public Domain Dedication](https://creativecommons.org/publicdomain/zero/1.0/)\n* [GNU General Public License (version 3 or up)](https://gnu.org/licenses/gpl.html)\n\nGPL is only included for fun here.\n\nSources\n-------\n\n* [Algorithm.Coords.Converter](https://archive.is/20130815104734/emq.googlecode.com/svn/emq/src/Algorithm/Coords/Converter.java) from [EMQ](https://code.google.com/archive/p/emq/) ([GitHub mirror](https://github.com/richardyu-au/emq)) is probably *the* GCJ leak. It is a JSP project \"for demonstrating GIS systems\", probably done by some government contractor.\n  * There is some randomness in the GCJ deltas on both axes: one `sin` invocation and one LCG. Each add a maximum of 1 meter of error.\n* [on4wp7](https://archive.is/20150702191259/https://on4wp7.codeplex.com/SourceControl/changeset/view/21483%23353936) (2013) is the earliest rationalized GCJ (forward) implementation. No randomness is attempted.\n* [ChinaMapShift][] (2014) figured out the quick iterative inverse for GCJ. I learned about it via geoChina first and generalized it here.\n* BD-09 is not very well sourced, but [pycoordtrans](https://github.com/zxteloiv/pycoordtrans) (2014) seems to have it.\n\nSee also\n--------\n\n* [Restrictions on geographic data in China](https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China#Coordinate_systems): this Wikipedia article outlines impacts and the \"common secret\" deobfuscation approach.\n  * Chinese readers: see [\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6d4b\u7ed8\u9650\u5236](https://zh.wikipedia.org/wiki/\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6d4b\u7ed8\u9650\u5236).\n* [eviltransform][] is among the most popular cross-language soltions to the problem. It borrows its name directly from [EvilTransform.cs](https://github.com/Leask/EvilTransform/blob/master/EvilTransform.cs), an early refactored version of a raw-flesh Java implementation found in \"[emq](https://code.google.com/archive/p/emq/)\", some sort of government contractor GIS demo project.\n  * Since June 2016, eviltransform contains numerous parameter errors that compromise its output, especially for BD-09. See googollee/eviltransform[#43](https://github.com/googollee/eviltransform/issues/43), [#53](https://github.com/googollee/eviltransform/pull/53) and [#44](https://github.com/googollee/eviltransform/issues/44) for corrections. As of June 2019 these problems are not fixed.\n* [geoChina][] by caijun is a clear, concise implementation written in R. It features the iterative method from ChinaMapShift.\n* I am planning on moving some of the comments on the algorithm found in [my initial JavaScript implementation](https://zh.wikipedia.org/wiki/User:Artoria2e5/PRCoords.js) to the [GitHub Wiki](https://github.com/Artoria2e5/PRCoords/wiki). I don't think anyone is going to be interested in copying comments on these idiocy when translating my implementation to other languages.\n** If you are doing a translation, consider only using the comments from the PDF.\n\nOh, and finally, here is an official [news report](https://archive.fo/20110804185923/http://cxzy.people.com.cn/GB/196034/14908095.html) on that particular *\\[bleep\\]* who came up with GCJ-02.\n\n\n<a href=\"https://artoria2e5.github.io/PRCoords/demo\">\n  <img src=\"https://Artoria2e5.github.io/PRCoords/Globe%2C_distorted_China.svg\" width=\"100%\" height=\"100\">\n</a>", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Artoria2e5/PRCoords", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "prcoords", "package_url": "https://pypi.org/project/prcoords/", "platform": "", "project_url": "https://pypi.org/project/prcoords/", "project_urls": {"Homepage": "https://github.com/Artoria2e5/PRCoords"}, "release_url": "https://pypi.org/project/prcoords/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "Public Domain library for rectifying Chinese coordinates (gcj-02/bd-09)", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PRCoords</h1>\n<p>People's Rectified Coordinates (PRCoords) is a cross-language implementation of \"public secret\" Chinese coordinate obfuscation methods including GCJ-02 and BD-09, along with general deobfuscation methods previously established in <a href=\"https://gist.github.com/anonymous/e7c6f67555099180ce1ae8da4ba2c513\" rel=\"nofollow\">ChinaMapShift</a>, <a href=\"https://github.com/googollee/eviltransform\" rel=\"nofollow\">eviltransform</a>, and <a href=\"https://github.com/caijun/geoChina/blob/master/R/cst.R\" rel=\"nofollow\">geoChina</a>. (Referring to the process of replacing straight lines with wavy ones as a \"transform\" is euphemism overdone.)</p>\n<h2>Languages</h2>\n<ul>\n<li>[x] JavaScript (<a href=\"https://www.npmjs.com/package/prcoords\" rel=\"nofollow\"><code>npm install prcoords</code></a>)\n<ul>\n<li>Web demo: <a href=\"https://artoria2e5.github.io/PRCoords/demo\" rel=\"nofollow\">https://artoria2e5.github.io/PRCoords/demo</a></li>\n</ul>\n</li>\n<li>[x] Python (<a href=\"https://pypi.org/project/prcoords/\" rel=\"nofollow\"><code>pip install prcoords</code></a>)</li>\n<li>[x] (Obj-)C/C++ (C structs)\n<ul>\n<li>[ ] Makefile with <code>install</code></li>\n</ul>\n</li>\n<li>[ ] Ruby</li>\n<li>[ ] Swift</li>\n<li>[ ] C#</li>\n<li>[x] Haskell (GCJ only; data structure incomplete)\n<ul>\n<li>need to move googollee/eviltransform#54 here sometime.</li>\n</ul>\n</li>\n<li>[ ] Java</li>\n<li>[ ] Matlab/Octave\n<ul>\n<li>too lazy to split the files. also expand \"caijun\"</li>\n</ul>\n</li>\n<li>[x] PGSQL</li>\n<li>[ ] Typed Racket\n<ul>\n<li>is it done?</li>\n</ul>\n</li>\n</ul>\n<p>(should I split them into submodules?)</p>\n<p>For languages not yet supported, we recommend you to check for <a href=\"https://github.com/googollee/eviltransform\" rel=\"nofollow\">eviltransform</a> (MIT) or <a href=\"https://github.com/caijun/geoChina/blob/master/R/cst.R\" rel=\"nofollow\">geoChina</a> (GPLv3, R) instead.</p>\n<h2>API</h2>\n<p>PRCoord's APIs operate on, and returns, dedicated structures for coordinates. In API names, we generally refer to WGS-84 as <code>wgs</code>, GCJ-02 as <code>gcj</code>, and BD-09 (lat-lon) as <code>bd</code>.</p>\n<h3>Inverse functions</h3>\n<p>The obfuscations generally have these properties to maintain basic usefulness:</p>\n<ol>\n<li><code>obfs(coord)</code> is sort of close to <code>coord</code>.</li>\n<li><code>obfs(a) - obfs(b)</code> is usually close to <code>a - b</code>. (The closer <code>a</code> and <code>b</code> are\nto each other, the better it works.)</li>\n</ol>\n<p>In general two approaches of inverting the \"forward\" obfuscations, or working from\n<code>obfs(coord)</code> to <code>coord</code>, are implemented:</p>\n<ul>\n<li><em>Run it backwards</em>: <code>obfs(coord)</code> is never too far from <code>coord</code>, so just use\n\u00a0<code>obfs(obfs(coord)) - obfs(coord)</code> to estimate <code>obfs(coord) - coord</code>.</li>\n<li><em>Iterate a bit</em>: Get a rough <code>guess</code> somehow, and just use property 2 to estimate\nthe remaining error as <code>obfs(guess) - obfs(coord)</code> and correct the <code>guess</code>.</li>\n</ul>\n<p>You can read on the demo page about how well these methods work from the <code>\u0394Roundtrip</code>\nentry. Unless you are doing archival work, you generally don't have to iterate.</p>\n<h3>The \"in China\" sanity check</h3>\n<p>Typically PRCoords is only supposed to be ran on obfuscated input data, which\nare primarily Chinese coordinates. For this reason, initial implementations\ninclude this <a href=\"https://news.ycombinator.com/item?id=10965506\" rel=\"nofollow\">very very rough</a>\nsanity check that spans a rectangular region on a mercator-projected map.\nThis check can be overridden by passing a boolean value, or may be not at all\nimplemented in certain languages if I am not in the right mood for doing\nsilly things.</p>\n<p>There is an \"insane\" sanity check intended to approximate the range of Google\nand Baidu's distortion, intended for use by <a href=\"https://iitc.me\" rel=\"nofollow\">IITC</a>:\n<a href=\"https://github.com/Artoria2e5/PRCoords/blob/master/js/insane_is_in_china.js\" rel=\"nofollow\"><code>js/insane_is_in_china.js</code></a>.\nIt is basically a ray-casting polygon check with 70 vertices. You, as the\ncaller, should still be responsible for telling whether a point is part of the\ngov-screwed Chinese data.</p>\n<h2>Why another wheel?</h2>\n<ul>\n<li>Public Domain</li>\n<li>Clean API based on pairs of coordinates</li>\n<li>Need to find a place for this sarcastic name</li>\n</ul>\n<h2>Physical PRCoords</h2>\n<p>You can print out a minimal copy of PRCoords with <a href=\"https://commons.wikimedia.org/wiki/File:PRcoords_Cheatsheet.pdf\" rel=\"nofollow\">this PDF file</a>. I am working on some better options <a href=\"https://github.com/Artoria2e5/PRCoords/issues/2\" rel=\"nofollow\">in issue #2</a>. A fairly simple tote bag with an older version of the PDF is <a href=\"https://teespring.com/miniprcoords-tote-v1\" rel=\"nofollow\">available from Teespring</a>.</p>\n<p>Feel free to print and sell t-shirts with the PDF file! It is put in the Public Domain, so you don't have to pay me for that. You can always fund my subversive activities on <a href=\"https://www.patreon.com/artoria2e5\" rel=\"nofollow\">Patreon</a> though.</p>\n<h2>License</h2>\n<p>Unless otherwise mentioned, all files in this package, including this README file,\nare dual-licensed under:</p>\n<ul>\n<li><a href=\"https://creativecommons.org/publicdomain/zero/1.0/\" rel=\"nofollow\">CC0 1.0 Public Domain Dedication</a></li>\n<li><a href=\"https://gnu.org/licenses/gpl.html\" rel=\"nofollow\">GNU General Public License (version 3 or up)</a></li>\n</ul>\n<p>GPL is only included for fun here.</p>\n<h2>Sources</h2>\n<ul>\n<li><a href=\"https://archive.is/20130815104734/emq.googlecode.com/svn/emq/src/Algorithm/Coords/Converter.java\" rel=\"nofollow\">Algorithm.Coords.Converter</a> from <a href=\"https://code.google.com/archive/p/emq/\" rel=\"nofollow\">EMQ</a> (<a href=\"https://github.com/richardyu-au/emq\" rel=\"nofollow\">GitHub mirror</a>) is probably <em>the</em> GCJ leak. It is a JSP project \"for demonstrating GIS systems\", probably done by some government contractor.\n<ul>\n<li>There is some randomness in the GCJ deltas on both axes: one <code>sin</code> invocation and one LCG. Each add a maximum of 1 meter of error.</li>\n</ul>\n</li>\n<li><a href=\"https://archive.is/20150702191259/https://on4wp7.codeplex.com/SourceControl/changeset/view/21483%23353936\" rel=\"nofollow\">on4wp7</a> (2013) is the earliest rationalized GCJ (forward) implementation. No randomness is attempted.</li>\n<li><a href=\"https://gist.github.com/anonymous/e7c6f67555099180ce1ae8da4ba2c513\" rel=\"nofollow\">ChinaMapShift</a> (2014) figured out the quick iterative inverse for GCJ. I learned about it via geoChina first and generalized it here.</li>\n<li>BD-09 is not very well sourced, but <a href=\"https://github.com/zxteloiv/pycoordtrans\" rel=\"nofollow\">pycoordtrans</a> (2014) seems to have it.</li>\n</ul>\n<h2>See also</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Restrictions_on_geographic_data_in_China#Coordinate_systems\" rel=\"nofollow\">Restrictions on geographic data in China</a>: this Wikipedia article outlines impacts and the \"common secret\" deobfuscation approach.\n<ul>\n<li>Chinese readers: see <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E6%B5%8B%E7%BB%98%E9%99%90%E5%88%B6\" rel=\"nofollow\">\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u6d4b\u7ed8\u9650\u5236</a>.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/googollee/eviltransform\" rel=\"nofollow\">eviltransform</a> is among the most popular cross-language soltions to the problem. It borrows its name directly from <a href=\"https://github.com/Leask/EvilTransform/blob/master/EvilTransform.cs\" rel=\"nofollow\">EvilTransform.cs</a>, an early refactored version of a raw-flesh Java implementation found in \"<a href=\"https://code.google.com/archive/p/emq/\" rel=\"nofollow\">emq</a>\", some sort of government contractor GIS demo project.\n<ul>\n<li>Since June 2016, eviltransform contains numerous parameter errors that compromise its output, especially for BD-09. See googollee/eviltransform<a href=\"https://github.com/googollee/eviltransform/issues/43\" rel=\"nofollow\">#43</a>, <a href=\"https://github.com/googollee/eviltransform/pull/53\" rel=\"nofollow\">#53</a> and <a href=\"https://github.com/googollee/eviltransform/issues/44\" rel=\"nofollow\">#44</a> for corrections. As of June 2019 these problems are not fixed.</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/caijun/geoChina/blob/master/R/cst.R\" rel=\"nofollow\">geoChina</a> by caijun is a clear, concise implementation written in R. It features the iterative method from ChinaMapShift.</li>\n<li>I am planning on moving some of the comments on the algorithm found in <a href=\"https://zh.wikipedia.org/wiki/User:Artoria2e5/PRCoords.js\" rel=\"nofollow\">my initial JavaScript implementation</a> to the <a href=\"https://github.com/Artoria2e5/PRCoords/wiki\" rel=\"nofollow\">GitHub Wiki</a>. I don't think anyone is going to be interested in copying comments on these idiocy when translating my implementation to other languages.\n** If you are doing a translation, consider only using the comments from the PDF.</li>\n</ul>\n<p>Oh, and finally, here is an official <a href=\"https://archive.fo/20110804185923/http://cxzy.people.com.cn/GB/196034/14908095.html\" rel=\"nofollow\">news report</a> on that particular <em>[bleep]</em> who came up with GCJ-02.</p>\n<a href=\"https://artoria2e5.github.io/PRCoords/demo\" rel=\"nofollow\">\n  <img height=\"100\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c04c17a767711e968c480bc59d223795fe63496/68747470733a2f2f4172746f7269613265352e6769746875622e696f2f5052436f6f7264732f476c6f62652532435f646973746f727465645f4368696e612e737667\" width=\"100%\">\n</a>\n\n          </div>"}, "last_serial": 5690653, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f2bec7d0aa54fb5082ba608eaffe3d13", "sha256": "9375094d8b5056ed03b3b77029ae3c4f7fc91b69185933ef76726329876146a5"}, "downloads": -1, "filename": "prcoords-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "f2bec7d0aa54fb5082ba608eaffe3d13", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7777, "upload_time": "2019-06-28T02:11:37", "upload_time_iso_8601": "2019-06-28T02:11:37.984126Z", "url": "https://files.pythonhosted.org/packages/f6/5f/bee6731768340345ba4a56c0b6c7c06c02b5193c69c542f2bdb8c89b16dc/prcoords-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d33f7a3c72ac83ba716deef9ce434f58", "sha256": "7e59a9786c111f65c09c59a56f7f5a4ceb8f82cb1e068b868a820e9e56058bc7"}, "downloads": -1, "filename": "prcoords-1.0.0.tar.gz", "has_sig": false, "md5_digest": "d33f7a3c72ac83ba716deef9ce434f58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7358, "upload_time": "2019-06-28T02:11:40", "upload_time_iso_8601": "2019-06-28T02:11:40.030796Z", "url": "https://files.pythonhosted.org/packages/e5/60/7b484bee55a21a0ca6392eef3f75c28f11e682ba8731c6ea93764c24adba/prcoords-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "331689e70ff0912b372b422d708e4e78", "sha256": "94b868f690ef6bb12fade2f63b656b2915b3f3753abd88eb63d8023cc33a3909"}, "downloads": -1, "filename": "prcoords-1.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "331689e70ff0912b372b422d708e4e78", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 7797, "upload_time": "2019-08-17T01:35:00", "upload_time_iso_8601": "2019-08-17T01:35:00.515159Z", "url": "https://files.pythonhosted.org/packages/b3/4d/c2d0c0629c6cd45f24b8a28026f284cf5110af01f0a209c0af2bf5f36960/prcoords-1.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3819e5de8b28c9ce5942af64dd699e9b", "sha256": "888d7d23540a366fbf3c15ac8f8f61b2bd0d559bee9efac47bb3998c106f11f6"}, "downloads": -1, "filename": "prcoords-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3819e5de8b28c9ce5942af64dd699e9b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7768, "upload_time": "2019-08-17T01:35:02", "upload_time_iso_8601": "2019-08-17T01:35:02.346001Z", "url": "https://files.pythonhosted.org/packages/99/7c/3e46af73966831e95179435d9d23106765bf389f103b31af90371836ae65/prcoords-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "04b2b8558c9c609d021e73da522c07f7", "sha256": "fe89e46ade1cf84082864157a40430a420c8e69ed277eede0b43388c05ef0287"}, "downloads": -1, "filename": "prcoords-1.0.1.tar.gz", "has_sig": false, "md5_digest": "04b2b8558c9c609d021e73da522c07f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7458, "upload_time": "2019-08-17T01:35:04", "upload_time_iso_8601": "2019-08-17T01:35:04.068638Z", "url": "https://files.pythonhosted.org/packages/4c/21/31ef2a56b45740509baf5e6602b033f0b9da47808512a1f6aa6a2a3b1804/prcoords-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ef43904dd7bf8188101afb17c2295bf6", "sha256": "9d3bc12667b19dffac2769df17c735e6a6f91e154f8fbdddc95bd816def9fe3d"}, "downloads": -1, "filename": "prcoords-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ef43904dd7bf8188101afb17c2295bf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7429, "upload_time": "2019-08-17T05:35:37", "upload_time_iso_8601": "2019-08-17T05:35:37.733181Z", "url": "https://files.pythonhosted.org/packages/5d/4b/a77264c82300976f769fb2cbf3c466ddb8d07adea2c2c7bbabe95a41aff6/prcoords-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ef43904dd7bf8188101afb17c2295bf6", "sha256": "9d3bc12667b19dffac2769df17c735e6a6f91e154f8fbdddc95bd816def9fe3d"}, "downloads": -1, "filename": "prcoords-1.0.2.tar.gz", "has_sig": false, "md5_digest": "ef43904dd7bf8188101afb17c2295bf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7429, "upload_time": "2019-08-17T05:35:37", "upload_time_iso_8601": "2019-08-17T05:35:37.733181Z", "url": "https://files.pythonhosted.org/packages/5d/4b/a77264c82300976f769fb2cbf3c466ddb8d07adea2c2c7bbabe95a41aff6/prcoords-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:07 2020"}