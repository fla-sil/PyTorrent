{"info": {"author": "scaramallion", "author_email": "scaramallion@users.noreply.github.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Healthcare Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Medical Science Apps.", "Topic :: Software Development :: Libraries"], "description": "[![codecov](https://codecov.io/gh/pydicom/pylibjpeg/branch/master/graph/badge.svg)](https://codecov.io/gh/pydicom/pylibjpeg)\n[![Build Status](https://travis-ci.org/pydicom/pylibjpeg.svg?branch=master)](https://travis-ci.org/pydicom/pylibjpeg)\n\n## pylibjpeg\n\nA Python 3.6+ framework for decoding JPEG images, with a focus on providing JPEG support for [pydicom](https://github.com/pydicom/pydicom).\n\n\n### Installation\n#### Installing the current release\n\n```\npip install pylibjpeg\n```\n\n#### Installing the development version\n\nMake sure [Git](https://git-scm.com/) is installed, then\n```bash\ngit clone https://github.com/pydicom/pylibjpeg\npython -m pip install pylibjpeg\n```\n\n### Plugins\n\nBy itself *pylibjpeg* is unable to decode any JPEG images, which is where the\nplugins come in. To support a given JPEG format or DICOM Transfer Syntax\nyou first have to install the corresponding package:\n\n#### JPEG Format\n| Format | Decode? | Encode? | Plugin | Based on |\n|---|------|---|---|---|\n| JPEG, JPEG-LS and JPEG XT | Yes | No | [pylibjpeg-libjpeg][1] | [libjpeg][2] |\n\n#### Transfer Syntax\n\n| UID | Description | Plugin |\n|---|---|----|\n| 1.2.840.10008.1.2.4.50 | JPEG Baseline (Process 1) | [pylibjpeg-libjpeg][1] |\n| 1.2.840.10008.1.2.4.51 | JPEG Extended (Process 2 and 4) | [pylibjpeg-libjpeg][1]|\n| 1.2.840.10008.1.2.4.57 | JPEG Lossless, Non-Hierarchical (Process 14) | [pylibjpeg-libjpeg][1]|\n| 1.2.840.10008.1.2.4.70 | JPEG Lossless, Non-Hierarchical, First-Order Prediction</br>(Process 14, Selection Value 1) | [pylibjpeg-libjpeg][1]|\n| 1.2.840.10008.1.2.4.80 | JPEG-LS Lossless | [pylibjpeg-libjpeg][1]|\n| 1.2.840.10008.1.2.4.81 | JPEG-LS Lossy (Near-Lossless) Image Compression | [pylibjpeg-libjpeg][1]|\n| 1.2.840.10008.1.2.4.90 | JPEG 2000 Image Compression (Lossless Only) | Not yet supported |\n| 1.2.840.10008.1.2.4.91 | JPEG 2000 Image Compression | Not yet supported |\n\nIf you're not sure what the dataset's *Transfer Syntax UID* is, it can be\ndetermined with:\n```python\n>>> from pydicom import dcmread\n>>> ds = dcmread('path/to/dicom_file')\n>>> ds.file_meta.TransferSyntaxUID.name\n```\n\n[1]: https://github.com/pydicom/pylibjpeg-libjpeg\n[2]: https://github.com/thorfdbg/libjpeg\n\n\n### Usage\n#### With pydicom\nAssuming you already have *pydicom* installed:\n\n```python\nfrom pydicom import dcmread\nfrom pydicom.data import get_testdata_file\n\n# With the pylibjpeg-libjpeg plugin installed\nimport pylibjpeg\n\nds = dcmread(get_testdata_file('JPEG-LL.dcm'))\narr = ds.pixel_array\n```\n\nFor datasets with multiple frames you can reduce your memory usage by\nprocessing each frame separately using the ``generate_frames()`` generator\nfunction:\n```python\nfrom pydicom import dcmread\nfrom pydicom.data import get_testdata_file\n\nfrom pylibjpeg import generate_frames\n\nds = dcmread(get_testdata_file('color3d_jpeg_baseline.dcm'))\nframes = generate_frames(ds)\narr = next(frames)\n```\n\n#### Standalone JPEG decoding\nYou can also just use *pylibjpeg* to decode JPEG images to a [numpy ndarray](https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html), provided you have a suitable plugin installed:\n```python\nfrom pylibjpeg import decode\n\n# Can decode using the path to a JPG file as str or pathlike\narr = decode('filename.jpg')\n\n# Or a file-like...\nwith open('filename.jpg', 'rb') as f:\n    arr = decode(f)\n\n# Or bytes...\nwith open('filename.jpg', 'rb') as f:\n    arr  = decode(f.read())\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pydicom/pylibjpeg", "keywords": "dcm dicom pydicom python medicalimaging radiology radiotherapy oncology imaging jpg jpeg jpg-ls jpeg-ls libjpeg pylibjpeg", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pylibjpeg", "package_url": "https://pypi.org/project/pylibjpeg/", "platform": "", "project_url": "https://pypi.org/project/pylibjpeg/", "project_urls": {"Homepage": "https://github.com/pydicom/pylibjpeg"}, "release_url": "https://pypi.org/project/pylibjpeg/1.0.0/", "requires_dist": ["numpy"], "requires_python": ">=3.6", "summary": "A Python framework for decoding JPEG files, with a focus on supporting pydicom", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://codecov.io/gh/pydicom/pylibjpeg\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6b055cf4dfa9dc3c4f0ea9e88a265605c73681aa/68747470733a2f2f636f6465636f762e696f2f67682f70796469636f6d2f70796c69626a7065672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://travis-ci.org/pydicom/pylibjpeg\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d1bbb86bc61ac2429d5c6212393f74a09a3f113/68747470733a2f2f7472617669732d63692e6f72672f70796469636f6d2f70796c69626a7065672e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>pylibjpeg</h2>\n<p>A Python 3.6+ framework for decoding JPEG images, with a focus on providing JPEG support for <a href=\"https://github.com/pydicom/pydicom\" rel=\"nofollow\">pydicom</a>.</p>\n<h3>Installation</h3>\n<h4>Installing the current release</h4>\n<pre><code>pip install pylibjpeg\n</code></pre>\n<h4>Installing the development version</h4>\n<p>Make sure <a href=\"https://git-scm.com/\" rel=\"nofollow\">Git</a> is installed, then</p>\n<pre>git clone https://github.com/pydicom/pylibjpeg\npython -m pip install pylibjpeg\n</pre>\n<h3>Plugins</h3>\n<p>By itself <em>pylibjpeg</em> is unable to decode any JPEG images, which is where the\nplugins come in. To support a given JPEG format or DICOM Transfer Syntax\nyou first have to install the corresponding package:</p>\n<h4>JPEG Format</h4>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Decode?</th>\n<th>Encode?</th>\n<th>Plugin</th>\n<th>Based on</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JPEG, JPEG-LS and JPEG XT</td>\n<td>Yes</td>\n<td>No</td>\n<td><a href=\"https://github.com/pydicom/pylibjpeg-libjpeg\" rel=\"nofollow\">pylibjpeg-libjpeg</a></td>\n<td><a href=\"https://github.com/thorfdbg/libjpeg\" rel=\"nofollow\">libjpeg</a></td>\n</tr></tbody></table>\n<h4>Transfer Syntax</h4>\n<table>\n<thead>\n<tr>\n<th>UID</th>\n<th>Description</th>\n<th>Plugin</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.2.840.10008.1.2.4.50</td>\n<td>JPEG Baseline (Process 1)</td>\n<td><a href=\"https://github.com/pydicom/pylibjpeg-libjpeg\" rel=\"nofollow\">pylibjpeg-libjpeg</a></td>\n</tr>\n<tr>\n<td>1.2.840.10008.1.2.4.51</td>\n<td>JPEG Extended (Process 2 and 4)</td>\n<td><a href=\"https://github.com/pydicom/pylibjpeg-libjpeg\" rel=\"nofollow\">pylibjpeg-libjpeg</a></td>\n</tr>\n<tr>\n<td>1.2.840.10008.1.2.4.57</td>\n<td>JPEG Lossless, Non-Hierarchical (Process 14)</td>\n<td><a href=\"https://github.com/pydicom/pylibjpeg-libjpeg\" rel=\"nofollow\">pylibjpeg-libjpeg</a></td>\n</tr>\n<tr>\n<td>1.2.840.10008.1.2.4.70</td>\n<td>JPEG Lossless, Non-Hierarchical, First-Order Prediction<br>(Process 14, Selection Value 1)</td>\n<td><a href=\"https://github.com/pydicom/pylibjpeg-libjpeg\" rel=\"nofollow\">pylibjpeg-libjpeg</a></td>\n</tr>\n<tr>\n<td>1.2.840.10008.1.2.4.80</td>\n<td>JPEG-LS Lossless</td>\n<td><a href=\"https://github.com/pydicom/pylibjpeg-libjpeg\" rel=\"nofollow\">pylibjpeg-libjpeg</a></td>\n</tr>\n<tr>\n<td>1.2.840.10008.1.2.4.81</td>\n<td>JPEG-LS Lossy (Near-Lossless) Image Compression</td>\n<td><a href=\"https://github.com/pydicom/pylibjpeg-libjpeg\" rel=\"nofollow\">pylibjpeg-libjpeg</a></td>\n</tr>\n<tr>\n<td>1.2.840.10008.1.2.4.90</td>\n<td>JPEG 2000 Image Compression (Lossless Only)</td>\n<td>Not yet supported</td>\n</tr>\n<tr>\n<td>1.2.840.10008.1.2.4.91</td>\n<td>JPEG 2000 Image Compression</td>\n<td>Not yet supported</td>\n</tr></tbody></table>\n<p>If you're not sure what the dataset's <em>Transfer Syntax UID</em> is, it can be\ndetermined with:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pydicom</span> <span class=\"kn\">import</span> <span class=\"n\">dcmread</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">dcmread</span><span class=\"p\">(</span><span class=\"s1\">'path/to/dicom_file'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">file_meta</span><span class=\"o\">.</span><span class=\"n\">TransferSyntaxUID</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre>\n<h3>Usage</h3>\n<h4>With pydicom</h4>\n<p>Assuming you already have <em>pydicom</em> installed:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydicom</span> <span class=\"kn\">import</span> <span class=\"n\">dcmread</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydicom.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_testdata_file</span>\n\n<span class=\"c1\"># With the pylibjpeg-libjpeg plugin installed</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pylibjpeg</span>\n\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">dcmread</span><span class=\"p\">(</span><span class=\"n\">get_testdata_file</span><span class=\"p\">(</span><span class=\"s1\">'JPEG-LL.dcm'</span><span class=\"p\">))</span>\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">pixel_array</span>\n</pre>\n<p>For datasets with multiple frames you can reduce your memory usage by\nprocessing each frame separately using the <code>generate_frames()</code> generator\nfunction:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydicom</span> <span class=\"kn\">import</span> <span class=\"n\">dcmread</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydicom.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_testdata_file</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pylibjpeg</span> <span class=\"kn\">import</span> <span class=\"n\">generate_frames</span>\n\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">dcmread</span><span class=\"p\">(</span><span class=\"n\">get_testdata_file</span><span class=\"p\">(</span><span class=\"s1\">'color3d_jpeg_baseline.dcm'</span><span class=\"p\">))</span>\n<span class=\"n\">frames</span> <span class=\"o\">=</span> <span class=\"n\">generate_frames</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">frames</span><span class=\"p\">)</span>\n</pre>\n<h4>Standalone JPEG decoding</h4>\n<p>You can also just use <em>pylibjpeg</em> to decode JPEG images to a <a href=\"https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html\" rel=\"nofollow\">numpy ndarray</a>, provided you have a suitable plugin installed:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pylibjpeg</span> <span class=\"kn\">import</span> <span class=\"n\">decode</span>\n\n<span class=\"c1\"># Can decode using the path to a JPG file as str or pathlike</span>\n<span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'filename.jpg'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or a file-like...</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'filename.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or bytes...</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'filename.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">arr</span>  <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n\n          </div>"}, "last_serial": 6809974, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "63ac54af81807fd00e1c8e6750f5408c", "sha256": "c2009e77570d1eb60c63a43923f3632605aeb1c716f59c4b885830874992f97e"}, "downloads": -1, "filename": "pylibjpeg-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63ac54af81807fd00e1c8e6750f5408c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31475, "upload_time": "2020-03-14T02:46:13", "upload_time_iso_8601": "2020-03-14T02:46:13.239551Z", "url": "https://files.pythonhosted.org/packages/05/73/a2642b77626cdf43c7d45e91bd403349ada93c0700da461663cf84f4b99f/pylibjpeg-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c8062ae2ae6f659db5fdd9639589149", "sha256": "37f7385864d77f32d5dd5ef150bea09bf70fa28998a50bc43a10a2bdf2e49836"}, "downloads": -1, "filename": "pylibjpeg-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6c8062ae2ae6f659db5fdd9639589149", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25055, "upload_time": "2020-03-14T02:46:15", "upload_time_iso_8601": "2020-03-14T02:46:15.657125Z", "url": "https://files.pythonhosted.org/packages/70/6f/5ddbab7592c90faca9dfdf69f42926e7af3617523c145fed21363a471de6/pylibjpeg-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63ac54af81807fd00e1c8e6750f5408c", "sha256": "c2009e77570d1eb60c63a43923f3632605aeb1c716f59c4b885830874992f97e"}, "downloads": -1, "filename": "pylibjpeg-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "63ac54af81807fd00e1c8e6750f5408c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 31475, "upload_time": "2020-03-14T02:46:13", "upload_time_iso_8601": "2020-03-14T02:46:13.239551Z", "url": "https://files.pythonhosted.org/packages/05/73/a2642b77626cdf43c7d45e91bd403349ada93c0700da461663cf84f4b99f/pylibjpeg-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c8062ae2ae6f659db5fdd9639589149", "sha256": "37f7385864d77f32d5dd5ef150bea09bf70fa28998a50bc43a10a2bdf2e49836"}, "downloads": -1, "filename": "pylibjpeg-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6c8062ae2ae6f659db5fdd9639589149", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25055, "upload_time": "2020-03-14T02:46:15", "upload_time_iso_8601": "2020-03-14T02:46:15.657125Z", "url": "https://files.pythonhosted.org/packages/70/6f/5ddbab7592c90faca9dfdf69f42926e7af3617523c145fed21363a471de6/pylibjpeg-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:09 2020"}