{"info": {"author": "Brian Skinn", "author_email": "bskinn@alum.mit.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development"], "description": "tempvars: A context manager for handling temporary variables\n============================================================\n\n**Current Development Version:**\n\n.. image:: https://travis-ci.org/bskinn/tempvars.svg?branch=dev\n    :target: https://travis-ci.org/bskinn/tempvars\n\n.. image:: https://codecov.io/gh/bskinn/tempvars/branch/dev/graph/badge.svg\n    :target: https://codecov.io/gh/bskinn/tempvars\n\n**Most Recent Stable Release:**\n\n.. image:: https://img.shields.io/pypi/v/tempvars.svg\n    :target: https://pypi.org/project/tempvars\n\n.. image:: https://img.shields.io/pypi/pyversions/tempvars.svg\n\n**Info:**\n\n.. image:: https://img.shields.io/readthedocs/tempvars/v1.0.1.svg\n    :target: http://tempvars.readthedocs.io/en/v1.0.1/\n\n.. image:: https://img.shields.io/github/license/mashape/apistatus.svg\n    :target: https://github.com/bskinn/tempvars/blob/master/LICENSE.txt\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n----\n\n**Use Jupyter Notebook?**\n\n**Constantly run into problems from obsolete variables hanging around\nin the namespace?**\n\n``tempvars`` *can help.*\n\nDeveloping in Jupyter notebooks can sometimes be frustrating.\nFor example, it's aggravating to debug a worksheet for half an hour,\nonly to discover that a carried-over variable name was hanging around\nin the notebook namespace and causing problems.\nOr, to open a notebook that \"worked fine\" the last\ntime it was used, but only because of random, obsolete variables that happened\nto be lingering in the namespace.\nWrapping notebook code in functions/classes is an effective way of avoiding\nthese sorts of problems, but it's rarely effective or efficient to\ndo this in the initial exploratory phase of in-notebook development.\n\n``TempVars`` is a context manager that helps to avoid these pitfalls by\nclearing selected identifiers from the namespace for the duration of\nits scope, then restoring them afterwards (or not, if desired).\nFurther, any variables created within the managed context\nthat match the ``TempVars`` filtering criteria are removed from\nthe namespace upon exiting, ensuring these values do not spuriously\ncontribute to following code. For convenience, all variables\nremoved from the namespace at entry and exit\nare stored for later reference (see example code below).\n\nDue to the way Python handles non-global scopes, ``TempVars``\ncan only be used at the global scope. *Any attempt\nto use* ``TempVars`` *in non-global contexts will\nresult in a* ``RuntimeError``. Viable use-cases include Jupyter notebooks,\nthe IPython and basic Python REPLs, and the outermost scope of executed and\nimported modules. Preliminary testing indicates it also works with\n`cauldron-notebook <https://github.com/sernst/cauldron>`__, though\nit may be less helpful there due to its step-local scoping paradigm\n(shared values must be passed around via ``cauldron.shared``).\n\n----\n\nAfter installing with ``pip install tempvars``, import as:\n\n.. code:: python\n\n    >>> from tempvars import TempVars\n\nFor typical use in a Jupyter notebook cell, the recommended approach\nis to pick a marker to use on all variables that are to be temporary,\nand enclose the entire cell in a ``TempVars`` context. For example,\none could prefix all temporary variables with `t_` and make use\nof the `starts` argument:\n\n.. code:: python\n\n    >>> foo = 5\n    >>> with TempVars(starts=['t_']):\n    ...     print(foo)\n    ...     t_bar = 8\n    ...     print(foo + t_bar)\n    5\n    13\n    >>> print('t_bar' in dir())\n    False\n\nA similar effect can be achieved with a suffix such as `_t` and\nthe `ends` argument.\n\nTemporary variable masking can also be introduced to existing\ncode in a more selective fashion via the `names` argument:\n\n.. code:: python\n\n    >>> foo = 5\n    >>> bar = 7\n    >>> with TempVars(names=['bar']):\n    ...     print(foo)\n    ...     print('bar' in dir())\n    5\n    False\n    >>> print(foo * bar)\n    35\n\nSetting the `restore` argument to ``False`` instructs ``TempVars``\nnot to restore any masked variables to the namespace after its\ncontext exits. This is potentially useful to avoid carryover of\ncommon helper variables (`arr`, `df`, `i`, etc.) to downstream cells\nthat may have been created earlier in a notebook:\n\n.. code:: python\n\n    >>> for k in ['foo', 'bar']:\n    ...     pass\n    >>> print(k)\n    bar\n    >>> with TempVars(names=['k'], restore=False):\n    ...     print('k' in dir())\n    False\n    >>> print('k' in dir())\n    False\n\n``TempVars`` stores the values of variables it removes from the namespace,\nshould they need to be accessed. A bound `with`/`as` statement must be\nused in order to enable this:\n\n.. code:: python\n\n    >>> foo = 5\n    >>> with TempVars(names=['foo']) as tv:\n    ...     print('foo' in dir())\n    ...     print(tv.stored_nsvars['foo'])\n    ...     foo = 8\n    ...     print(foo)\n    False\n    5\n    8\n    >>> print(foo)\n    5\n    >>> print(tv.retained_tempvars['foo'])\n    8\n\n----\n\n\nAvailable on `PyPI <https://pypi.org/project/tempvars>`__: ``pip install tempvars``.\n\nFull documentation at\n`Read the Docs <http://tempvars.readthedocs.io/en/v1.0.1/>`__.\n\nSource on `GitHub <https://github.com/bskinn/tempvars>`__.\nBug reports and feature requests are welcomed at the\n`Issues <https://github.com/bskinn/tempvars/issues>`__ page there.\nIf you like the idea of an enhancement already in the Issues list,\nplease comment to say so; it'll help with prioritization.\n\nCopyright (c) Brian Skinn 2017-2018\n\nLicense: The MIT License. See `LICENSE.txt <https://github.com/bskinn/tempvars/blob/master/LICENSE.txt>`__\nfor full license terms.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.github.com/bskinn/tempvars", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "tempvars", "package_url": "https://pypi.org/project/tempvars/", "platform": "", "project_url": "https://pypi.org/project/tempvars/", "project_urls": {"Homepage": "https://www.github.com/bskinn/tempvars"}, "release_url": "https://pypi.org/project/tempvars/1.0.1/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Context manager for handling temporary variables in Jupyter Notebook, IPython, etc.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>Current Development Version:</strong></p>\n<a href=\"https://travis-ci.org/bskinn/tempvars\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/bskinn/tempvars.svg?branch=dev\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b3f41f98bfe3821e75471b5c4e4f1cd19a84451/68747470733a2f2f7472617669732d63692e6f72672f62736b696e6e2f74656d70766172732e7376673f6272616e63683d646576\"></a>\n<a href=\"https://codecov.io/gh/bskinn/tempvars\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/bskinn/tempvars/branch/dev/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f4a2cbd55b6d27e0f4b825ada25aa79792e61408/68747470733a2f2f636f6465636f762e696f2f67682f62736b696e6e2f74656d70766172732f6272616e63682f6465762f67726170682f62616467652e737667\"></a>\n<p><strong>Most Recent Stable Release:</strong></p>\n<a href=\"https://pypi.org/project/tempvars\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/tempvars.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6faecb971da41e45bf950648f720679c14e6aa57/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f74656d70766172732e737667\"></a>\n<img alt=\"https://img.shields.io/pypi/pyversions/tempvars.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb975a562dacbc87caa0ce698bc243361d51fee2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74656d70766172732e737667\">\n<p><strong>Info:</strong></p>\n<a href=\"http://tempvars.readthedocs.io/en/v1.0.1/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/readthedocs/tempvars/v1.0.1.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0379970ff44b5a4ca2b2ce357a4082b82676d94/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f74656d70766172732f76312e302e312e737667\"></a>\n<a href=\"https://github.com/bskinn/tempvars/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/license/mashape/apistatus.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36686084675cebbeff3809cb9d8291b8e6ebd672/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<hr class=\"docutils\">\n<p><strong>Use Jupyter Notebook?</strong></p>\n<p><strong>Constantly run into problems from obsolete variables hanging around\nin the namespace?</strong></p>\n<p><tt>tempvars</tt> <em>can help.</em></p>\n<p>Developing in Jupyter notebooks can sometimes be frustrating.\nFor example, it\u2019s aggravating to debug a worksheet for half an hour,\nonly to discover that a carried-over variable name was hanging around\nin the notebook namespace and causing problems.\nOr, to open a notebook that \u201cworked fine\u201d the last\ntime it was used, but only because of random, obsolete variables that happened\nto be lingering in the namespace.\nWrapping notebook code in functions/classes is an effective way of avoiding\nthese sorts of problems, but it\u2019s rarely effective or efficient to\ndo this in the initial exploratory phase of in-notebook development.</p>\n<p><tt>TempVars</tt> is a context manager that helps to avoid these pitfalls by\nclearing selected identifiers from the namespace for the duration of\nits scope, then restoring them afterwards (or not, if desired).\nFurther, any variables created within the managed context\nthat match the <tt>TempVars</tt> filtering criteria are removed from\nthe namespace upon exiting, ensuring these values do not spuriously\ncontribute to following code. For convenience, all variables\nremoved from the namespace at entry and exit\nare stored for later reference (see example code below).</p>\n<p>Due to the way Python handles non-global scopes, <tt>TempVars</tt>\ncan only be used at the global scope. <em>Any attempt\nto use</em> <tt>TempVars</tt> <em>in non-global contexts will\nresult in a</em> <tt>RuntimeError</tt>. Viable use-cases include Jupyter notebooks,\nthe IPython and basic Python REPLs, and the outermost scope of executed and\nimported modules. Preliminary testing indicates it also works with\n<a href=\"https://github.com/sernst/cauldron\" rel=\"nofollow\">cauldron-notebook</a>, though\nit may be less helpful there due to its step-local scoping paradigm\n(shared values must be passed around via <tt>cauldron.shared</tt>).</p>\n<hr class=\"docutils\">\n<p>After installing with <tt>pip install tempvars</tt>, import as:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">tempvars</span> <span class=\"kn\">import</span> <span class=\"n\">TempVars</span>\n</pre>\n<p>For typical use in a Jupyter notebook cell, the recommended approach\nis to pick a marker to use on all variables that are to be temporary,\nand enclose the entire cell in a <tt>TempVars</tt> context. For example,\none could prefix all temporary variables with <cite>t_</cite> and make use\nof the <cite>starts</cite> argument:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">TempVars</span><span class=\"p\">(</span><span class=\"n\">starts</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'t_'</span><span class=\"p\">]):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">t_bar</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"o\">+</span> <span class=\"n\">t_bar</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span>\n<span class=\"mi\">13</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'t_bar'</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">())</span>\n<span class=\"kc\">False</span>\n</pre>\n<p>A similar effect can be achieved with a suffix such as <cite>_t</cite> and\nthe <cite>ends</cite> argument.</p>\n<p>Temporary variable masking can also be introduced to existing\ncode in a more selective fashion via the <cite>names</cite> argument:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">TempVars</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'bar'</span><span class=\"p\">]):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">())</span>\n<span class=\"mi\">5</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span> <span class=\"o\">*</span> <span class=\"n\">bar</span><span class=\"p\">)</span>\n<span class=\"mi\">35</span>\n</pre>\n<p>Setting the <cite>restore</cite> argument to <tt>False</tt> instructs <tt>TempVars</tt>\nnot to restore any masked variables to the namespace after its\ncontext exits. This is potentially useful to avoid carryover of\ncommon helper variables (<cite>arr</cite>, <cite>df</cite>, <cite>i</cite>, etc.) to downstream cells\nthat may have been created earlier in a notebook:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">]:</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"n\">bar</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">TempVars</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'k'</span><span class=\"p\">],</span> <span class=\"n\">restore</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'k'</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">())</span>\n<span class=\"kc\">False</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'k'</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">())</span>\n<span class=\"kc\">False</span>\n</pre>\n<p><tt>TempVars</tt> stores the values of variables it removes from the namespace,\nshould they need to be accessed. A bound <cite>with</cite>/<cite>as</cite> statement must be\nused in order to enable this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">TempVars</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">])</span> <span class=\"k\">as</span> <span class=\"n\">tv</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">())</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tv</span><span class=\"o\">.</span><span class=\"n\">stored_nsvars</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>     <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"kc\">False</span>\n<span class=\"mi\">5</span>\n<span class=\"mi\">8</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n<span class=\"mi\">5</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tv</span><span class=\"o\">.</span><span class=\"n\">retained_tempvars</span><span class=\"p\">[</span><span class=\"s1\">'foo'</span><span class=\"p\">])</span>\n<span class=\"mi\">8</span>\n</pre>\n<hr class=\"docutils\">\n<p>Available on <a href=\"https://pypi.org/project/tempvars\" rel=\"nofollow\">PyPI</a>: <tt>pip install tempvars</tt>.</p>\n<p>Full documentation at\n<a href=\"http://tempvars.readthedocs.io/en/v1.0.1/\" rel=\"nofollow\">Read the Docs</a>.</p>\n<p>Source on <a href=\"https://github.com/bskinn/tempvars\" rel=\"nofollow\">GitHub</a>.\nBug reports and feature requests are welcomed at the\n<a href=\"https://github.com/bskinn/tempvars/issues\" rel=\"nofollow\">Issues</a> page there.\nIf you like the idea of an enhancement already in the Issues list,\nplease comment to say so; it\u2019ll help with prioritization.</p>\n<p>Copyright (c) Brian Skinn 2017-2018</p>\n<p>License: The MIT License. See <a href=\"https://github.com/bskinn/tempvars/blob/master/LICENSE.txt\" rel=\"nofollow\">LICENSE.txt</a>\nfor full license terms.</p>\n\n          </div>"}, "last_serial": 4486798, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "c2ed1403940e974d3c0350467b56ab88", "sha256": "6d5b053ce6237c2b3ab2a4d137e3b250244bcb11ab8588fc576de03ceb3ecb65"}, "downloads": -1, "filename": "tempvars-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c2ed1403940e974d3c0350467b56ab88", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9010, "upload_time": "2017-10-19T18:24:41", "upload_time_iso_8601": "2017-10-19T18:24:41.963382Z", "url": "https://files.pythonhosted.org/packages/a1/2a/12ea6dd1c2baf9f6432c476f68a493c1e13d53bb2850b88c01ea360ee9cc/tempvars-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c919a9ffdaf9d03217962ba68e77990", "sha256": "31e3992e41a75adc7a988872a96b57f7ba035c4b1ecfe35e8972853962d3bd75"}, "downloads": -1, "filename": "tempvars-1.0.tar.gz", "has_sig": false, "md5_digest": "9c919a9ffdaf9d03217962ba68e77990", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7793, "upload_time": "2017-10-19T18:24:23", "upload_time_iso_8601": "2017-10-19T18:24:23.221784Z", "url": "https://files.pythonhosted.org/packages/ec/f9/0f36ea55ffa182c3fd47ff96d40017a1c912645035f884f6585eb3c7f91a/tempvars-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5ce5cc0342b6c601d961e666766896c9", "sha256": "1ac7b3c2c6a77b57997c61a86b57a0acfbb68ce969a0187a020adbea8501ef58"}, "downloads": -1, "filename": "tempvars-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5ce5cc0342b6c601d961e666766896c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 7979, "upload_time": "2018-11-14T19:47:55", "upload_time_iso_8601": "2018-11-14T19:47:55.893474Z", "url": "https://files.pythonhosted.org/packages/f7/fd/c7bcf9e587fe2edf7df533f2c02df7a910f0a7f975aa90c15e6073a7a858/tempvars-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02f88fc3061a06d492d779d1bf0ea259", "sha256": "14ebf82073098134dfe870d86e547471e122f5eed238501f46d0c36f93040852"}, "downloads": -1, "filename": "tempvars-1.0.1.tar.gz", "has_sig": false, "md5_digest": "02f88fc3061a06d492d779d1bf0ea259", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 9077, "upload_time": "2018-11-14T19:47:45", "upload_time_iso_8601": "2018-11-14T19:47:45.975530Z", "url": "https://files.pythonhosted.org/packages/2d/44/32295c80c0d59ea11d82ca30ae40f5021551ed72eed7aa64c9a84b6235a0/tempvars-1.0.1.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "90a1619b1ad8b01f82e3d3de4b601bd1", "sha256": "1b5865421061d0624cbcd97108599e4b52c1ac528556fdd7c0b851a65aa1b20d"}, "downloads": -1, "filename": "tempvars-1.0b1-py3.5.egg", "has_sig": false, "md5_digest": "90a1619b1ad8b01f82e3d3de4b601bd1", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 7307, "upload_time": "2017-09-19T17:49:44", "upload_time_iso_8601": "2017-09-19T17:49:44.102473Z", "url": "https://files.pythonhosted.org/packages/89/7c/da9f031d111714f5889733ab4be9437642707429c4f982350969fcd42c6f/tempvars-1.0b1-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "32115712d278124d5ee73c97ff8fa1af", "sha256": "969a7202cad41b0b383ea70f71b7a5624d92f6e4efa27264a0b6a31095c6aff5"}, "downloads": -1, "filename": "tempvars-1.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "32115712d278124d5ee73c97ff8fa1af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7624, "upload_time": "2017-09-20T19:45:06", "upload_time_iso_8601": "2017-09-20T19:45:06.935798Z", "url": "https://files.pythonhosted.org/packages/ff/29/89675be8d99dde1577fac1a7aa3b8a17afc5bbaf588497de754bfe647f6e/tempvars-1.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "94081c59e82bbfe7305ddcc23411678c", "sha256": "ed8383ae182aaebcb2dd71967f83e7bde658251957375ec62a62a89da50799eb"}, "downloads": -1, "filename": "tempvars-1.0b1.tar.gz", "has_sig": false, "md5_digest": "94081c59e82bbfe7305ddcc23411678c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6047, "upload_time": "2017-09-19T17:46:31", "upload_time_iso_8601": "2017-09-19T17:46:31.843515Z", "url": "https://files.pythonhosted.org/packages/d8/ef/20d37a0c7d4597e184cc029d6c4cf07465ced0ff78c78dac4768456948ce/tempvars-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "371a37b622393a1498a50e5469a320e3", "sha256": "64b47fbc6b434105fdc33cdfbcf7865c8ff8169e352c02e48b729e126261f2de"}, "downloads": -1, "filename": "tempvars-1.0b2-py3-none-any.whl", "has_sig": false, "md5_digest": "371a37b622393a1498a50e5469a320e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8418, "upload_time": "2017-10-02T02:21:35", "upload_time_iso_8601": "2017-10-02T02:21:35.830910Z", "url": "https://files.pythonhosted.org/packages/d4/4f/f160cc438089844f92c30f74db8a2351c6bd7b5d20af3ddbe296e4deca15/tempvars-1.0b2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c07516b2a3ea881bc2949da1673a6ef", "sha256": "4b8513a734e33ce53c06442bb4a0cdb69547db6d3001fcac02ff29f64d8fcadb"}, "downloads": -1, "filename": "tempvars-1.0b2.tar.gz", "has_sig": false, "md5_digest": "9c07516b2a3ea881bc2949da1673a6ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6932, "upload_time": "2017-10-02T02:21:24", "upload_time_iso_8601": "2017-10-02T02:21:24.892284Z", "url": "https://files.pythonhosted.org/packages/94/ae/470b3a642f6f3bf6862b97b0a6e5869545c3088e46ef53a804fc6906d821/tempvars-1.0b2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5ce5cc0342b6c601d961e666766896c9", "sha256": "1ac7b3c2c6a77b57997c61a86b57a0acfbb68ce969a0187a020adbea8501ef58"}, "downloads": -1, "filename": "tempvars-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5ce5cc0342b6c601d961e666766896c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 7979, "upload_time": "2018-11-14T19:47:55", "upload_time_iso_8601": "2018-11-14T19:47:55.893474Z", "url": "https://files.pythonhosted.org/packages/f7/fd/c7bcf9e587fe2edf7df533f2c02df7a910f0a7f975aa90c15e6073a7a858/tempvars-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02f88fc3061a06d492d779d1bf0ea259", "sha256": "14ebf82073098134dfe870d86e547471e122f5eed238501f46d0c36f93040852"}, "downloads": -1, "filename": "tempvars-1.0.1.tar.gz", "has_sig": false, "md5_digest": "02f88fc3061a06d492d779d1bf0ea259", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 9077, "upload_time": "2018-11-14T19:47:45", "upload_time_iso_8601": "2018-11-14T19:47:45.975530Z", "url": "https://files.pythonhosted.org/packages/2d/44/32295c80c0d59ea11d82ca30ae40f5021551ed72eed7aa64c9a84b6235a0/tempvars-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:38 2020"}