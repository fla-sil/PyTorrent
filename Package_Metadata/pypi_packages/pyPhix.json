{"info": {"author": "Samuele Favazza", "author_email": "sfavazza.github@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering"], "description": "# pyPhix, the Python Fixed Point module\n\n**pyPhix** is a python package for fixed point number representation.\nIt is intended to support the implementation of digital signal processing systems.\nAs such only fix-point addition, subtraction and multiplication operations are implemented.\n\nYou can find more information about the module objects and functionalities at\n[readthedocs](https://pyphix.readthedocs.io/en/latest/) project page.\n\n## Features\n\n* virtually unlimited number length (depending on your RAM size)\n* based on NumPy\n* customizable rounding method (```SymInf```, ```SymZero```, ```NonSymPos```,\n```NonSymNeg```, ```ConvEven```, ```ConvOdd```, ```Floor```, ```Ceil```)\n* customizable wrapping method (```Sat```, ```Wrap```)\n* support various representation formats (```bin```, ```hex```, ```int```, ```float```)\n* perform single or array based operations with customizable output format (```+```, ```-```, ```*```)\n\n## License\n\n### pyPhix\npyPhix is an open source python module released under the terms of\n[Mozilla Public License Version 2.0](LICENSE.txt).\n\n### NumPy\n**NumPy** is the fundamental package needed for scientific computing with Python and it is released under these\n[terms](https://github.com/numpy/numpy/blob/master/LICENSE.txt \"Numpy license\").\n\n## Install\n\nThe **pyPhix** package is available on [pypi.org](https://pypi.org/project/pyPhix).\nYou can install it by running:\n\n```$ pip install pyphix```.\n\nAlternatively you can clone the **pyPhix** repository and from the folder containing the *setup.py* file run:\n\n```$ python setup install```\n\nThis package requires Python 3.6 to work.\n\nYou can also directly download the tar.gz archive from [pypi.org](https://pypi.org/project/pyPhix#files).\nThe archive can be easily verified by adding the gpg public key\n[1E948096166391C0](https://pgp.mit.edu/pks/lookup?op=vindex&search=0x1E948096166391C0)\nto your keyring.\n\n## Usage Examples\n\n### Fix Format\n\nThis object is used to indicate the number of bits the user wants to use for value reprensetation.\n\nCreate fix-point format objets:\n```\n>>> from pyphix import fix\n>>> fmt_a=fix.FixFmt(True, 2, 10)\n>>> fmt_b=fix.FixFmt(False, 0, 7)\n```\n\nPrint the maximum representable ranges and test if a value is included in the range:\n```\n>>> fmt_a.fixrange\n(-4.0, 3.9990234375)\n\n>>> fmt_b.fixrange\n(0.0, 0.9921875)\n\n>>> -10 in fmt_a\nFalse\n\n>>> 0 in fmt_b\nTrue\n```\n\nDifferent representations are available:\n```\n>>> fmt_a.tuplefmt\n(True, 2, 10)\n\n>>> fmt_b.listfmt\n[False, 0, 7]\n\n>>> print(fmt_b)\n(False, 0, 7)\n```\n\n### Fix Number\n\nThis object contain fix-point number represenation.\n\nRound methods comparison, assuming format *(True, 4, 5)*:\n\n| Round method  | Pos odd fraction | Pos even fraction | Neg odd fraction | Neg even fraction |\n|---------------|:----------------:|:-----------------:|:----------------:|:-----------------:|\n|**Real value** |7.296875          |2.325              |-1.078125         |-1.08125           |\n|**Mult by 2^5**|233.5             |74.4               |-34.5             |-34.6              |\n|```SymInf```   |7.3125            |2.3125             |-1.09375          |-1.09375           |\n|```SymZero```  |7.28125           |2.3125             |-1.0625           |-1.09375           |\n|```NonSymPos```|7.3125            |2.3125             |-1.0625           |-1.09375           |\n|```NonSymNeg```|7.28125           |2.3125             |-1.09375          |-1.09375           |\n|```ConvEven``` |7.3125            |2.3125             |-1.0625           |-1.09375           |\n|```ConvOdd```  |7.28125           |2.3125             |-1.09375          |-1.09375           |\n|```Floor```    |7.28125           |2.3125             |-1.09375          |-1.09375           |\n|```Ceil```     |7.3125            |2.34375            |-1.0625           |-1.0625            |\n\nA small usage example:\n```\n>>> from pyphix import fix\n>>> from pyphix.fix import ERoundMethod, EOverMethod\n>>> fmt = fix.FixFmt(True, 4, 5)\n>>> fix_vec = fix.FixNum(\n        [7.296875,  2.325   , -1.078125, -1.08125], fmt,\n        rnd=ERoundMethod.CONV_ODD, over=EOverMethod.WRAP)\n>>> fix_val = fix.FixNum(\n        1.16, fmt,\n        rnd=ERoundMethod.CONV_ODD, over=EOverMethod.WRAP)\n```\n\nPerform a full resolution addition:\n```\n>>> fix_vec + fix_val\n[8.4375  3.46875 0.0625  0.0625 ]\n\n  fmt: (True, 5, 5)\n  rnd: ERoundMethod.CONV_ODD\n  over: EOverMethod.WRAP\n```\n\nPerform a multiplication and cast result to a small format:\n```\n>>> fix_val.mult(\n        fix_vec, out_fmt=fix.FixFmt(False, 3, 2),\n        rnd=ERoundMethod.SYM_INF, over=EOverMethod.SAT)\n[7.75 2.75 0.   0.  ]\n\n  fmt: (False, 3, 2)\n  rnd: ERoundMethod.SYM_INF\n  over: EOverMethod.SAT\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sfavazza/pyphix", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyPhix", "package_url": "https://pypi.org/project/pyPhix/", "platform": "", "project_url": "https://pypi.org/project/pyPhix/", "project_urls": {"Homepage": "https://github.com/sfavazza/pyphix"}, "release_url": "https://pypi.org/project/pyPhix/0.1/", "requires_dist": ["numpy"], "requires_python": "", "summary": "The Python Fixed Point module", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyPhix, the Python Fixed Point module</h1>\n<p><strong>pyPhix</strong> is a python package for fixed point number representation.\nIt is intended to support the implementation of digital signal processing systems.\nAs such only fix-point addition, subtraction and multiplication operations are implemented.</p>\n<p>You can find more information about the module objects and functionalities at\n<a href=\"https://pyphix.readthedocs.io/en/latest/\" rel=\"nofollow\">readthedocs</a> project page.</p>\n<h2>Features</h2>\n<ul>\n<li>virtually unlimited number length (depending on your RAM size)</li>\n<li>based on NumPy</li>\n<li>customizable rounding method (<code>SymInf</code>, <code>SymZero</code>, <code>NonSymPos</code>,\n<code>NonSymNeg</code>, <code>ConvEven</code>, <code>ConvOdd</code>, <code>Floor</code>, <code>Ceil</code>)</li>\n<li>customizable wrapping method (<code>Sat</code>, <code>Wrap</code>)</li>\n<li>support various representation formats (<code>bin</code>, <code>hex</code>, <code>int</code>, <code>float</code>)</li>\n<li>perform single or array based operations with customizable output format (<code>+</code>, <code>-</code>, <code>*</code>)</li>\n</ul>\n<h2>License</h2>\n<h3>pyPhix</h3>\n<p>pyPhix is an open source python module released under the terms of\n<a href=\"LICENSE.txt\" rel=\"nofollow\">Mozilla Public License Version 2.0</a>.</p>\n<h3>NumPy</h3>\n<p><strong>NumPy</strong> is the fundamental package needed for scientific computing with Python and it is released under these\n<a href=\"https://github.com/numpy/numpy/blob/master/LICENSE.txt\" rel=\"nofollow\" title=\"Numpy license\">terms</a>.</p>\n<h2>Install</h2>\n<p>The <strong>pyPhix</strong> package is available on <a href=\"https://pypi.org/project/pyPhix\" rel=\"nofollow\">pypi.org</a>.\nYou can install it by running:</p>\n<p><code>$ pip install pyphix</code>.</p>\n<p>Alternatively you can clone the <strong>pyPhix</strong> repository and from the folder containing the <em>setup.py</em> file run:</p>\n<p><code>$ python setup install</code></p>\n<p>This package requires Python 3.6 to work.</p>\n<p>You can also directly download the tar.gz archive from <a href=\"https://pypi.org/project/pyPhix#files\" rel=\"nofollow\">pypi.org</a>.\nThe archive can be easily verified by adding the gpg public key\n<a href=\"https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0x1E948096166391C0\" rel=\"nofollow\">1E948096166391C0</a>\nto your keyring.</p>\n<h2>Usage Examples</h2>\n<h3>Fix Format</h3>\n<p>This object is used to indicate the number of bits the user wants to use for value reprensetation.</p>\n<p>Create fix-point format objets:</p>\n<pre><code>&gt;&gt;&gt; from pyphix import fix\n&gt;&gt;&gt; fmt_a=fix.FixFmt(True, 2, 10)\n&gt;&gt;&gt; fmt_b=fix.FixFmt(False, 0, 7)\n</code></pre>\n<p>Print the maximum representable ranges and test if a value is included in the range:</p>\n<pre><code>&gt;&gt;&gt; fmt_a.fixrange\n(-4.0, 3.9990234375)\n\n&gt;&gt;&gt; fmt_b.fixrange\n(0.0, 0.9921875)\n\n&gt;&gt;&gt; -10 in fmt_a\nFalse\n\n&gt;&gt;&gt; 0 in fmt_b\nTrue\n</code></pre>\n<p>Different representations are available:</p>\n<pre><code>&gt;&gt;&gt; fmt_a.tuplefmt\n(True, 2, 10)\n\n&gt;&gt;&gt; fmt_b.listfmt\n[False, 0, 7]\n\n&gt;&gt;&gt; print(fmt_b)\n(False, 0, 7)\n</code></pre>\n<h3>Fix Number</h3>\n<p>This object contain fix-point number represenation.</p>\n<p>Round methods comparison, assuming format <em>(True, 4, 5)</em>:</p>\n<table>\n<thead>\n<tr>\n<th>Round method</th>\n<th align=\"center\">Pos odd fraction</th>\n<th align=\"center\">Pos even fraction</th>\n<th align=\"center\">Neg odd fraction</th>\n<th align=\"center\">Neg even fraction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Real value</strong></td>\n<td align=\"center\">7.296875</td>\n<td align=\"center\">2.325</td>\n<td align=\"center\">-1.078125</td>\n<td align=\"center\">-1.08125</td>\n</tr>\n<tr>\n<td><strong>Mult by 2^5</strong></td>\n<td align=\"center\">233.5</td>\n<td align=\"center\">74.4</td>\n<td align=\"center\">-34.5</td>\n<td align=\"center\">-34.6</td>\n</tr>\n<tr>\n<td><code>SymInf</code></td>\n<td align=\"center\">7.3125</td>\n<td align=\"center\">2.3125</td>\n<td align=\"center\">-1.09375</td>\n<td align=\"center\">-1.09375</td>\n</tr>\n<tr>\n<td><code>SymZero</code></td>\n<td align=\"center\">7.28125</td>\n<td align=\"center\">2.3125</td>\n<td align=\"center\">-1.0625</td>\n<td align=\"center\">-1.09375</td>\n</tr>\n<tr>\n<td><code>NonSymPos</code></td>\n<td align=\"center\">7.3125</td>\n<td align=\"center\">2.3125</td>\n<td align=\"center\">-1.0625</td>\n<td align=\"center\">-1.09375</td>\n</tr>\n<tr>\n<td><code>NonSymNeg</code></td>\n<td align=\"center\">7.28125</td>\n<td align=\"center\">2.3125</td>\n<td align=\"center\">-1.09375</td>\n<td align=\"center\">-1.09375</td>\n</tr>\n<tr>\n<td><code>ConvEven</code></td>\n<td align=\"center\">7.3125</td>\n<td align=\"center\">2.3125</td>\n<td align=\"center\">-1.0625</td>\n<td align=\"center\">-1.09375</td>\n</tr>\n<tr>\n<td><code>ConvOdd</code></td>\n<td align=\"center\">7.28125</td>\n<td align=\"center\">2.3125</td>\n<td align=\"center\">-1.09375</td>\n<td align=\"center\">-1.09375</td>\n</tr>\n<tr>\n<td><code>Floor</code></td>\n<td align=\"center\">7.28125</td>\n<td align=\"center\">2.3125</td>\n<td align=\"center\">-1.09375</td>\n<td align=\"center\">-1.09375</td>\n</tr>\n<tr>\n<td><code>Ceil</code></td>\n<td align=\"center\">7.3125</td>\n<td align=\"center\">2.34375</td>\n<td align=\"center\">-1.0625</td>\n<td align=\"center\">-1.0625</td>\n</tr></tbody></table>\n<p>A small usage example:</p>\n<pre><code>&gt;&gt;&gt; from pyphix import fix\n&gt;&gt;&gt; from pyphix.fix import ERoundMethod, EOverMethod\n&gt;&gt;&gt; fmt = fix.FixFmt(True, 4, 5)\n&gt;&gt;&gt; fix_vec = fix.FixNum(\n        [7.296875,  2.325   , -1.078125, -1.08125], fmt,\n        rnd=ERoundMethod.CONV_ODD, over=EOverMethod.WRAP)\n&gt;&gt;&gt; fix_val = fix.FixNum(\n        1.16, fmt,\n        rnd=ERoundMethod.CONV_ODD, over=EOverMethod.WRAP)\n</code></pre>\n<p>Perform a full resolution addition:</p>\n<pre><code>&gt;&gt;&gt; fix_vec + fix_val\n[8.4375  3.46875 0.0625  0.0625 ]\n\n  fmt: (True, 5, 5)\n  rnd: ERoundMethod.CONV_ODD\n  over: EOverMethod.WRAP\n</code></pre>\n<p>Perform a multiplication and cast result to a small format:</p>\n<pre><code>&gt;&gt;&gt; fix_val.mult(\n        fix_vec, out_fmt=fix.FixFmt(False, 3, 2),\n        rnd=ERoundMethod.SYM_INF, over=EOverMethod.SAT)\n[7.75 2.75 0.   0.  ]\n\n  fmt: (False, 3, 2)\n  rnd: ERoundMethod.SYM_INF\n  over: EOverMethod.SAT\n</code></pre>\n\n          </div>"}, "last_serial": 4112301, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "b4b5da9203296efbe404c8576e61225b", "sha256": "f421cae379f0603178c4ffb01b069dbe1c9c2a6891498b728d9a7842b0bc5680"}, "downloads": -1, "filename": "pyPhix-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b4b5da9203296efbe404c8576e61225b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11951, "upload_time": "2018-07-28T20:38:59", "upload_time_iso_8601": "2018-07-28T20:38:59.379905Z", "url": "https://files.pythonhosted.org/packages/79/cb/5b89e63acddfeb8b33b75d70dcfe4c9f568ae4f11de6f8630093cbcd7655/pyPhix-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61e7078d05adc8c2836d4c0fb58111b6", "sha256": "8cb87ee23c280fb8a506904b9d7f8d80cd97cf89eea6fe4efe90857e3eb841cf"}, "downloads": -1, "filename": "pyPhix-0.1.tar.gz", "has_sig": true, "md5_digest": "61e7078d05adc8c2836d4c0fb58111b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11403, "upload_time": "2018-07-28T20:39:00", "upload_time_iso_8601": "2018-07-28T20:39:00.224650Z", "url": "https://files.pythonhosted.org/packages/e9/32/08bebf0e22dc65f5a7c72f4769ded3760a01eaeadd5b1a309592307ae65e/pyPhix-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b4b5da9203296efbe404c8576e61225b", "sha256": "f421cae379f0603178c4ffb01b069dbe1c9c2a6891498b728d9a7842b0bc5680"}, "downloads": -1, "filename": "pyPhix-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b4b5da9203296efbe404c8576e61225b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11951, "upload_time": "2018-07-28T20:38:59", "upload_time_iso_8601": "2018-07-28T20:38:59.379905Z", "url": "https://files.pythonhosted.org/packages/79/cb/5b89e63acddfeb8b33b75d70dcfe4c9f568ae4f11de6f8630093cbcd7655/pyPhix-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "61e7078d05adc8c2836d4c0fb58111b6", "sha256": "8cb87ee23c280fb8a506904b9d7f8d80cd97cf89eea6fe4efe90857e3eb841cf"}, "downloads": -1, "filename": "pyPhix-0.1.tar.gz", "has_sig": true, "md5_digest": "61e7078d05adc8c2836d4c0fb58111b6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11403, "upload_time": "2018-07-28T20:39:00", "upload_time_iso_8601": "2018-07-28T20:39:00.224650Z", "url": "https://files.pythonhosted.org/packages/e9/32/08bebf0e22dc65f5a7c72f4769ded3760a01eaeadd5b1a309592307ae65e/pyPhix-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:39 2020"}