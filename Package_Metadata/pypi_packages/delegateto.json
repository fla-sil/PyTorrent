{"info": {"author": "Daniel Hilst Selli", "author_email": "danielhilst@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "[![Build Status](https://travis-ci.org/dhilst/delegate.svg?branch=master)](https://travis-ci.org/dhilst/delegate)\n# Delegate methods made easy\n\nThis tiny library implements two simple ways of method or property delegators, by descriptors\nand by class decorators.\n\nFrom wikipedia, what is delegation:\n> In object-oriented programming, delegation refers to evaluating a member\n> (property or method) of one object (the receiver) in the context of another\n> original object (the sender). Delegation can be done explicitly, by passing\n> the sending object to the receiving object, which can be done in any\n> object-oriented language; or implicitly, by the member lookup rules of the\n> language, which requires language support for the feature.\n\n# Installation\n\nThis is python3 only, but it's very simple library with no dependences, it would not be hard to port it to python2, contributions are welcome!\n\n    pip install delegateto\n\n# Examples\n\nDelegateTo descriptor let you delegate method or property calls\n\nThe argument name is the name of the method or property that you want to\ndelegate, for example.\n\n    from delegateto import DelegateTo\n    class Foo:\n        upper = DelegateTo('v')\n        __len__ = DelegateTo('l')\n        __iter__ = DelegateTo('l')\n\n        def __init__(self, v, l):\n            self.v = v\n            self.l = l\n\n    foo = Foo('hello world', [1, 2, 3])\n\nTo call a method just call its delegator\n\n    foo.up() # => 'HELLO WORLD'\n\nMagic methods are supported\n\n    len(foo) # => 3\n    [x*2 for x in foo] # => [2, 4, 6]\n\n\nAt class parsing time is not possible for `DelegateTo` to know to what \nattribute you're assigning it to. For example `foo = DelegateTo('bar')` Pay \nattention that `DelegateTo` doesn't receive any information about `foo` \nattribute, but it will discover this latter.  The method name is discovered at \nthe first call. This is done by iterating over all the object's attributes. \nOnce found the method is cached and no search is performed in the subsequent \ncalls.\n\nStill, if you need to avoid this iteration you can initialize \nthe method name with the same name of the attribute name. \n\nFor example\n\n    class Foo:\n        upper = DelegateTo('v', 'upper')\n        def __init__(self, v):\n            self.v = v\n\n\nThis make possible the creation of aliases\n\n    class Foo:\n        up = DelegateTo('v', 'upper')\n        def __init__(self, v):\n            self.v = v\n\n    Foo('hello').upper() # => 'HELLO'\n\nIn this context 'self' has a special meaning of \ndelegating a method to another method in the same \nobject. For example \n\n    class Foo:\n        foo = DelegateTo('self', 'bar')\n        def bar(self):\n            return 'bar'\n\n    Foo().foo() # => 'bar'\n\n\nThere is another way of creating delegators with class decorators, here is how \n\n    from delegateto import delegate\n    @delegate('v', 'upper')\n    @delegate('v', 'lower')\n    @delegate('v', 'wrong_method')\n    @delegate('not_an_attribute', 'wrong_attribute')\n    class Foo:\n        def __init__(self, v):\n            self.v = v\n\n    Foo('foo').upper() # => 'FOO'\n    Foo('FOO').lower() # => 'foo'\n\n    Foo('foo').wrong_method() # => raises AttributeError: 'str' object has no attribute 'wrong_method'\n\n    Foo('foo').wrong_attribute() # => raises AttributeError: 'Foo' object has no attribute 'not_an_attribute'\n\nAs a shortcut you can use pass any number of methods or properties to delegate \n\n    @delegate('v', 'upper', 'lower')\n    class Foo:\n        def __init__(self, v):\n            self.v = v\n\nExample using properties instead of methods\n\n    class Bar:\n        def __init__(self):\n            self._param = 0\n        @property\n        def param(self):\n            return self._param\n        @param.setter\n        def param(self, param):\n            self_param = param\n\n    @delegate('v', 'param')\n    class Foo2:\n        def __init__(self):\n            self.v = Bar()\n\n    foo2 = Foo2()\n    foo2.param  # => 0\n\n    foo2.param = 2\n    foo2.param  # => 2\n\n\n# Running tests\n\nSimply run the module `python -m delegateto`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "delegateto", "package_url": "https://pypi.org/project/delegateto/", "platform": "", "project_url": "https://pypi.org/project/delegateto/", "project_urls": null, "release_url": "https://pypi.org/project/delegateto/1.3/", "requires_dist": null, "requires_python": ">=3", "summary": "", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/dhilst/delegate\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a47308075d97e47efb16261957c261af3783aa0/68747470733a2f2f7472617669732d63692e6f72672f6468696c73742f64656c65676174652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>Delegate methods made easy</h1>\n<p>This tiny library implements two simple ways of method or property delegators, by descriptors\nand by class decorators.</p>\n<p>From wikipedia, what is delegation:</p>\n<blockquote>\n<p>In object-oriented programming, delegation refers to evaluating a member\n(property or method) of one object (the receiver) in the context of another\noriginal object (the sender). Delegation can be done explicitly, by passing\nthe sending object to the receiving object, which can be done in any\nobject-oriented language; or implicitly, by the member lookup rules of the\nlanguage, which requires language support for the feature.</p>\n</blockquote>\n<h1>Installation</h1>\n<p>This is python3 only, but it's very simple library with no dependences, it would not be hard to port it to python2, contributions are welcome!</p>\n<pre><code>pip install delegateto\n</code></pre>\n<h1>Examples</h1>\n<p>DelegateTo descriptor let you delegate method or property calls</p>\n<p>The argument name is the name of the method or property that you want to\ndelegate, for example.</p>\n<pre><code>from delegateto import DelegateTo\nclass Foo:\n    upper = DelegateTo('v')\n    __len__ = DelegateTo('l')\n    __iter__ = DelegateTo('l')\n\n    def __init__(self, v, l):\n        self.v = v\n        self.l = l\n\nfoo = Foo('hello world', [1, 2, 3])\n</code></pre>\n<p>To call a method just call its delegator</p>\n<pre><code>foo.up() # =&gt; 'HELLO WORLD'\n</code></pre>\n<p>Magic methods are supported</p>\n<pre><code>len(foo) # =&gt; 3\n[x*2 for x in foo] # =&gt; [2, 4, 6]\n</code></pre>\n<p>At class parsing time is not possible for <code>DelegateTo</code> to know to what\nattribute you're assigning it to. For example <code>foo = DelegateTo('bar')</code> Pay\nattention that <code>DelegateTo</code> doesn't receive any information about <code>foo</code>\nattribute, but it will discover this latter.  The method name is discovered at\nthe first call. This is done by iterating over all the object's attributes.\nOnce found the method is cached and no search is performed in the subsequent\ncalls.</p>\n<p>Still, if you need to avoid this iteration you can initialize\nthe method name with the same name of the attribute name.</p>\n<p>For example</p>\n<pre><code>class Foo:\n    upper = DelegateTo('v', 'upper')\n    def __init__(self, v):\n        self.v = v\n</code></pre>\n<p>This make possible the creation of aliases</p>\n<pre><code>class Foo:\n    up = DelegateTo('v', 'upper')\n    def __init__(self, v):\n        self.v = v\n\nFoo('hello').upper() # =&gt; 'HELLO'\n</code></pre>\n<p>In this context 'self' has a special meaning of\ndelegating a method to another method in the same\nobject. For example</p>\n<pre><code>class Foo:\n    foo = DelegateTo('self', 'bar')\n    def bar(self):\n        return 'bar'\n\nFoo().foo() # =&gt; 'bar'\n</code></pre>\n<p>There is another way of creating delegators with class decorators, here is how</p>\n<pre><code>from delegateto import delegate\n@delegate('v', 'upper')\n@delegate('v', 'lower')\n@delegate('v', 'wrong_method')\n@delegate('not_an_attribute', 'wrong_attribute')\nclass Foo:\n    def __init__(self, v):\n        self.v = v\n\nFoo('foo').upper() # =&gt; 'FOO'\nFoo('FOO').lower() # =&gt; 'foo'\n\nFoo('foo').wrong_method() # =&gt; raises AttributeError: 'str' object has no attribute 'wrong_method'\n\nFoo('foo').wrong_attribute() # =&gt; raises AttributeError: 'Foo' object has no attribute 'not_an_attribute'\n</code></pre>\n<p>As a shortcut you can use pass any number of methods or properties to delegate</p>\n<pre><code>@delegate('v', 'upper', 'lower')\nclass Foo:\n    def __init__(self, v):\n        self.v = v\n</code></pre>\n<p>Example using properties instead of methods</p>\n<pre><code>class Bar:\n    def __init__(self):\n        self._param = 0\n    @property\n    def param(self):\n        return self._param\n    @param.setter\n    def param(self, param):\n        self_param = param\n\n@delegate('v', 'param')\nclass Foo2:\n    def __init__(self):\n        self.v = Bar()\n\nfoo2 = Foo2()\nfoo2.param  # =&gt; 0\n\nfoo2.param = 2\nfoo2.param  # =&gt; 2\n</code></pre>\n<h1>Running tests</h1>\n<p>Simply run the module <code>python -m delegateto</code></p>\n\n          </div>"}, "last_serial": 6484725, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b0698d073f8c7e3047c4f02b17fca6ad", "sha256": "fb6ca9f64c720e01275694bb438f10dd7d59fd0fc544714a9d2e91828b218dd7"}, "downloads": -1, "filename": "delegateto-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b0698d073f8c7e3047c4f02b17fca6ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4274, "upload_time": "2019-11-05T00:02:17", "upload_time_iso_8601": "2019-11-05T00:02:17.545568Z", "url": "https://files.pythonhosted.org/packages/bd/73/7e42e6963f01a00dbc8e5415bad4b8e5742ef93d6e71c6016f1069b88410/delegateto-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eca3f28dd4cc34d94acc45e473059362", "sha256": "63b33438cbb47c95c279b7a910b505f3f309c344aa0bc6e4094fcf800f86c55e"}, "downloads": -1, "filename": "delegateto-1.0.tar.gz", "has_sig": false, "md5_digest": "eca3f28dd4cc34d94acc45e473059362", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3284, "upload_time": "2019-11-05T00:02:19", "upload_time_iso_8601": "2019-11-05T00:02:19.933750Z", "url": "https://files.pythonhosted.org/packages/34/da/2e685ad5d3232c09cf1bacdc4a85b5119df3177dbaebafaaafd5148447f8/delegateto-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "1fe21263bf444209b68a24f24f8a4544", "sha256": "665f2ae27bbde05c008c178bdee3cbd22a9cccfae02230c90167cbe5dc9a3ee0"}, "downloads": -1, "filename": "delegateto-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1fe21263bf444209b68a24f24f8a4544", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4306, "upload_time": "2019-11-05T00:06:47", "upload_time_iso_8601": "2019-11-05T00:06:47.474961Z", "url": "https://files.pythonhosted.org/packages/62/31/db209893c23c5c9185a1ec9eb644650a9407b10fec621be1bd49a1f32a9b/delegateto-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a03c2e695b6989a817ba00728e9469ff", "sha256": "fc15c95db77651aadf92486f1f81785246d4b76ff4e05020711f88ff40bf01f0"}, "downloads": -1, "filename": "delegateto-1.1.tar.gz", "has_sig": false, "md5_digest": "a03c2e695b6989a817ba00728e9469ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3322, "upload_time": "2019-11-05T00:06:49", "upload_time_iso_8601": "2019-11-05T00:06:49.789412Z", "url": "https://files.pythonhosted.org/packages/6f/04/d3a95d701ae1e04437c2e7e295c2186721e03e5d689793cc11831967f162/delegateto-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "f1d5f14b2e45c3dba904a97ccbfda42c", "sha256": "3ca5fe7abeec1ba0d773dffda107fd6711414b4d2902aa1e510f5cc90e251070"}, "downloads": -1, "filename": "delegateto-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f1d5f14b2e45c3dba904a97ccbfda42c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4252, "upload_time": "2019-11-05T00:15:35", "upload_time_iso_8601": "2019-11-05T00:15:35.977571Z", "url": "https://files.pythonhosted.org/packages/94/23/b1ee5ceee0bb6e06cf9343d748c23e33fbac93793b489ec1d01d00777a27/delegateto-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "46848eb605a99af33f6f22260d924d06", "sha256": "a3cd626b8e9766d87089070ee08fe0bc833cdb472a34233858f17c411dad6d9c"}, "downloads": -1, "filename": "delegateto-1.2.tar.gz", "has_sig": false, "md5_digest": "46848eb605a99af33f6f22260d924d06", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3274, "upload_time": "2019-11-05T00:15:38", "upload_time_iso_8601": "2019-11-05T00:15:38.392629Z", "url": "https://files.pythonhosted.org/packages/9f/ce/147f5477eff8822aabc32761a054794a82671fbd52b34376cb906acf502d/delegateto-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "c0a3e6e4ed107794c0eb516c26e795b9", "sha256": "ec713c29f937a23cff3756bcbbd3159ea3138997becfe3b5a6182dbffef6ee36"}, "downloads": -1, "filename": "delegateto-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c0a3e6e4ed107794c0eb516c26e795b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4467, "upload_time": "2020-01-20T04:00:49", "upload_time_iso_8601": "2020-01-20T04:00:49.329713Z", "url": "https://files.pythonhosted.org/packages/2d/87/8f23b26da3b0beb9c2b7c18d3b2537f6f5fd61e0cb4141108de5e4a314f6/delegateto-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95b4558defea923b766473854dd7ca45", "sha256": "d5a38edc217dd66737ee23e36a9443564c06d93d1b75bce43b1969480223e1ee"}, "downloads": -1, "filename": "delegateto-1.3.tar.gz", "has_sig": false, "md5_digest": "95b4558defea923b766473854dd7ca45", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3729, "upload_time": "2020-01-20T04:00:52", "upload_time_iso_8601": "2020-01-20T04:00:52.849517Z", "url": "https://files.pythonhosted.org/packages/55/c2/560a70f33840e4ff3b9ce001aba3c6e88fcd42c71ad07121b9bc3dee788a/delegateto-1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c0a3e6e4ed107794c0eb516c26e795b9", "sha256": "ec713c29f937a23cff3756bcbbd3159ea3138997becfe3b5a6182dbffef6ee36"}, "downloads": -1, "filename": "delegateto-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "c0a3e6e4ed107794c0eb516c26e795b9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 4467, "upload_time": "2020-01-20T04:00:49", "upload_time_iso_8601": "2020-01-20T04:00:49.329713Z", "url": "https://files.pythonhosted.org/packages/2d/87/8f23b26da3b0beb9c2b7c18d3b2537f6f5fd61e0cb4141108de5e4a314f6/delegateto-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95b4558defea923b766473854dd7ca45", "sha256": "d5a38edc217dd66737ee23e36a9443564c06d93d1b75bce43b1969480223e1ee"}, "downloads": -1, "filename": "delegateto-1.3.tar.gz", "has_sig": false, "md5_digest": "95b4558defea923b766473854dd7ca45", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 3729, "upload_time": "2020-01-20T04:00:52", "upload_time_iso_8601": "2020-01-20T04:00:52.849517Z", "url": "https://files.pythonhosted.org/packages/55/c2/560a70f33840e4ff3b9ce001aba3c6e88fcd42c71ad07121b9bc3dee788a/delegateto-1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:12 2020"}