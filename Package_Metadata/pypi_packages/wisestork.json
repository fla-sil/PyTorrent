{"info": {"author": "Sander Bollen", "author_email": "sander@sndrtj.eu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "[![Build Status](https://travis-ci.org/sndrtj/wisestork.svg?branch=master)](https://travis-ci.org/sndrtj/wisestork) \n[![codecov](https://codecov.io/gh/sndrtj/wisestork/branch/master/graph/badge.svg)](https://codecov.io/gh/sndrtj/wisestork)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3245885.svg)](https://doi.org/10.5281/zenodo.3245885)\n\n\nWisestork\n=======\nThis is a complete re-implementation of the original \n[Wisecondor](https://github.com/VUmcCGP/wisecondor) program.\nIts original purpose was to detect trisomies and smaller CNVs in \nmaternal plasma samples using low-coverage WGS.\n\nWisestork adds practical support for small bin sizes,\nand is intended to be useful on regular WGS and Exome sequencing as well.\n\nFor a full overview of differences with the original Wisecondor, \nsee section Differences.\n\n## Installation\n\n### PyPI\n\nInstall wisestork from PyPI with a simple:\n\n```bash\npip install wisestork\n```\n\n### Manually (development versions)\n\nThe following system dependencies are required\n\n* Python 3.5+\n\nFurthermore, the following python packages are required:\n\n* numpy\n* matplotlib\n* biopython\n* statsmodels\n* sklearn\n* pysam\n* pyfaidx\n* click\n\nIt is recommended you use a virtualenv. \n\nTo install wisestork, create a virtualenv, install the python \nrequirements using `pip install -r requirements.txt` and then run\n`python setup.py develop`\n\n\n## Input \n\nWisestork takes BAM files as input. These BAM files _must_ be indexed.\n\nAdditionally, you must provide a reference Fasta file, which should\nlikewise be indexed with `samtools faidx <fasta>`.  \n\n## Running\n\nA typical workflow starts with BAM files. Those BAM files _must_ be\nsorted and indexed. \n\nThe first step in a Wisestork analysis is the `count` step. This \ngenerates read counts per bin, and writes this to a BED file. The \ncommand to do this, would look like the following:\n\n`wisestork count -I <input.bam> -R <fasta.fa> -O <out.bed> -B <binszise>`\n\nThe `-B` flag can be left out: Wisestork defaults to a binsize of 50kb.\nHowever, you will likely want a different binsize.\n\nOnce you have the count BED file, we have to correct for GC bias. The\ncommand to do this is:\n\n`wisestork gc-correct -I <input.bed> -R <fasta.fa> -O <out.gc.bed> -B <binsize>`\n\nFor the next step, we need the result bgzipped and tabixed, so you'll \nhave to execute `bgzip <out.gc.bed> && tabix -pbed <out.gc.bed.gz>`\n\nThe last step, the `zscore` step, calculates Z-scores for each bin.\nIt requires you to have generated a reference dictionary beforehand. \nThe command to create z-scores again looks pretty similar to the \nearlier two:\n\n`wisestork zscore -I <input.bed.gz> -R <fasta.fa> -O <out.z.bed> -D <dictionary.bed.gz> -B <binsize>`\n\n\n### User-supplied bins\n\nIn stead of supplying a bin _size_ for each step, you may also supply a \nbin _file_. This file should be a (preferably sorted) BED file with regions\nthat exist in the input BAM file. This option is primarily useful for \nWES analyses, where the bin file would correspond to a target/bait region\nfile. Please do note that contigs must be identical to those in the \ninput BAM file. \n\nYou can supply a bin file using the `-L` flag for any subcommand.\nThis will supersede any usage of the `-B` flag.\n\n### Creating reference dictionaries\n\nThe above assumes you have already created a reference dictionary. \nIf this is not the case, you will have to generate this file. \n\nTo create the reference dictionary you will need a set of gc-corrected\nBED files (from `wisestork gc-correct`) of normal samples, and feed those\nto `wisestork newref`. The rewref command will then find the nearest\nneighbours of every bin. Later on, in the zscore command, this\ninformation is used to get a set of \"reference bins\" from the query\nsample. \n\nCommand to be used:\n\n`wisestork newref -I <input.gz.bed> -I <input2.gz.bed> [...] -O <out.ref.bed> -R <fasta.fa> -B <binsize>`\n\nThe output of this _must_ be sorted with bedtools, and then bgzipped\nand tabixed. \n\n### Usage\n\n```\nUsage: wisestork [OPTIONS] COMMAND [ARGS]...\n\n  Discover CNVs from BAM files.\n\n  A typical workflow first extracts regions from a BAM file\n  The resulting BED tracks must then be GC-corrected.\n  Using a reference track of region similarity,\n  One can then calculate Z-scores for every region.\n\n  The following sub-commands are supported:\n   - count: count coverage per bin\n   - gc-correct: GC-correct bins\n   - zscore: calculate Z-scores\n   - newref: Generate a new reference dictionary of bin similarities\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  count       Count coverages\n  gc-correct  GC correct\n  newref      Create new reference\n  zscore      Calculate Z-scores\n```\n\nYou can additional help by typing `wisestork <command> --help`\n\n## Differences\n\nThere are several important differences between this re-implementation\nand the original wisecondor. \n\n* This re-implementation is organized as a regular python package, \n  while exposing several command-line tools. \n* Python 3 support. In fact, it's only tested on python 3.\n* All command-line tools now have UNIX-style argument parsing\n* Generating reference sets for small bin sizes is now possible in \n  much less time. \n* Pickle files are no longer used. The output format is now regular BED,\n  with a possible additional column. This means results can be used by \n  common downstream tools like Bedtools.\n* User supplied bin files in regular BED format. \n* The countgc step is now redundant. Its functionality is now integrated\n  in the gcc step. \n* The reference bin selection method was modified. The\n  original wisecondor calculated differences for every bin against every\n  bin of every sample, and then repeated this calculation for every \n  chromosome. As this is an exponential operation, this made \n  reference bin selection prohibitively slow and memory-consuming for \n  smaller bin size. In stead of calculating differences, the new method\n  applies a method (e.g. median) over the same bins of all samples, \n  and then _sorts_ the resulting list of bins. Similar bins can be\n  selected using regular list slicing. This means the time complexity \n  of creating a new reference set is now just loglinear. Additional \n  filterings were left the same. \n* Use of the `statsmodels` lowess function, rather than biopython's. \n  This results in a significant speed-up of the gc correction.\n\n## Naming\n\nWhy name this tool wisestork, you might think?\nWell, a _condor_ is a bird. As this is a re-implementation / fork of\nwisecondor, I figured another bird would be nice name. As I live in The Hague,\nand The Hague has a stork as a city symbol, I put one and one together.\nThus, _wisestork_ was born. \n\n## License\n\nGPLv3\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sndrtj/wisestork", "keywords": "", "license": "GPLv3+", "maintainer": "", "maintainer_email": "", "name": "wisestork", "package_url": "https://pypi.org/project/wisestork/", "platform": "", "project_url": "https://pypi.org/project/wisestork/", "project_urls": {"Homepage": "https://github.com/sndrtj/wisestork"}, "release_url": "https://pypi.org/project/wisestork/0.1.2/", "requires_dist": ["numpy", "matplotlib", "statsmodels", "pysam", "pyfaidx", "biopython", "scipy", "click", "progressbar2"], "requires_python": ">=3.5", "summary": "Within-sample CNV calling", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/sndrtj/wisestork\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5582c89e89c723288c787f6734083dfaa714694/68747470733a2f2f7472617669732d63692e6f72672f736e6472746a2f7769736573746f726b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/sndrtj/wisestork\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06f7d0116f64c952daba877d1becc2768f17fef9/68747470733a2f2f636f6465636f762e696f2f67682f736e6472746a2f7769736573746f726b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://doi.org/10.5281/zenodo.3245885\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc5adaebced46ba7d91f2e3549d20f54c021fbf0/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f444f492f31302e353238312f7a656e6f646f2e333234353838352e737667\"></a></p>\n<h1>Wisestork</h1>\n<p>This is a complete re-implementation of the original\n<a href=\"https://github.com/VUmcCGP/wisecondor\" rel=\"nofollow\">Wisecondor</a> program.\nIts original purpose was to detect trisomies and smaller CNVs in\nmaternal plasma samples using low-coverage WGS.</p>\n<p>Wisestork adds practical support for small bin sizes,\nand is intended to be useful on regular WGS and Exome sequencing as well.</p>\n<p>For a full overview of differences with the original Wisecondor,\nsee section Differences.</p>\n<h2>Installation</h2>\n<h3>PyPI</h3>\n<p>Install wisestork from PyPI with a simple:</p>\n<pre>pip install wisestork\n</pre>\n<h3>Manually (development versions)</h3>\n<p>The following system dependencies are required</p>\n<ul>\n<li>Python 3.5+</li>\n</ul>\n<p>Furthermore, the following python packages are required:</p>\n<ul>\n<li>numpy</li>\n<li>matplotlib</li>\n<li>biopython</li>\n<li>statsmodels</li>\n<li>sklearn</li>\n<li>pysam</li>\n<li>pyfaidx</li>\n<li>click</li>\n</ul>\n<p>It is recommended you use a virtualenv.</p>\n<p>To install wisestork, create a virtualenv, install the python\nrequirements using <code>pip install -r requirements.txt</code> and then run\n<code>python setup.py develop</code></p>\n<h2>Input</h2>\n<p>Wisestork takes BAM files as input. These BAM files <em>must</em> be indexed.</p>\n<p>Additionally, you must provide a reference Fasta file, which should\nlikewise be indexed with <code>samtools faidx &lt;fasta&gt;</code>.</p>\n<h2>Running</h2>\n<p>A typical workflow starts with BAM files. Those BAM files <em>must</em> be\nsorted and indexed.</p>\n<p>The first step in a Wisestork analysis is the <code>count</code> step. This\ngenerates read counts per bin, and writes this to a BED file. The\ncommand to do this, would look like the following:</p>\n<p><code>wisestork count -I &lt;input.bam&gt; -R &lt;fasta.fa&gt; -O &lt;out.bed&gt; -B &lt;binszise&gt;</code></p>\n<p>The <code>-B</code> flag can be left out: Wisestork defaults to a binsize of 50kb.\nHowever, you will likely want a different binsize.</p>\n<p>Once you have the count BED file, we have to correct for GC bias. The\ncommand to do this is:</p>\n<p><code>wisestork gc-correct -I &lt;input.bed&gt; -R &lt;fasta.fa&gt; -O &lt;out.gc.bed&gt; -B &lt;binsize&gt;</code></p>\n<p>For the next step, we need the result bgzipped and tabixed, so you'll\nhave to execute <code>bgzip &lt;out.gc.bed&gt; &amp;&amp; tabix -pbed &lt;out.gc.bed.gz&gt;</code></p>\n<p>The last step, the <code>zscore</code> step, calculates Z-scores for each bin.\nIt requires you to have generated a reference dictionary beforehand.\nThe command to create z-scores again looks pretty similar to the\nearlier two:</p>\n<p><code>wisestork zscore -I &lt;input.bed.gz&gt; -R &lt;fasta.fa&gt; -O &lt;out.z.bed&gt; -D &lt;dictionary.bed.gz&gt; -B &lt;binsize&gt;</code></p>\n<h3>User-supplied bins</h3>\n<p>In stead of supplying a bin <em>size</em> for each step, you may also supply a\nbin <em>file</em>. This file should be a (preferably sorted) BED file with regions\nthat exist in the input BAM file. This option is primarily useful for\nWES analyses, where the bin file would correspond to a target/bait region\nfile. Please do note that contigs must be identical to those in the\ninput BAM file.</p>\n<p>You can supply a bin file using the <code>-L</code> flag for any subcommand.\nThis will supersede any usage of the <code>-B</code> flag.</p>\n<h3>Creating reference dictionaries</h3>\n<p>The above assumes you have already created a reference dictionary.\nIf this is not the case, you will have to generate this file.</p>\n<p>To create the reference dictionary you will need a set of gc-corrected\nBED files (from <code>wisestork gc-correct</code>) of normal samples, and feed those\nto <code>wisestork newref</code>. The rewref command will then find the nearest\nneighbours of every bin. Later on, in the zscore command, this\ninformation is used to get a set of \"reference bins\" from the query\nsample.</p>\n<p>Command to be used:</p>\n<p><code>wisestork newref -I &lt;input.gz.bed&gt; -I &lt;input2.gz.bed&gt; [...] -O &lt;out.ref.bed&gt; -R &lt;fasta.fa&gt; -B &lt;binsize&gt;</code></p>\n<p>The output of this <em>must</em> be sorted with bedtools, and then bgzipped\nand tabixed.</p>\n<h3>Usage</h3>\n<pre><code>Usage: wisestork [OPTIONS] COMMAND [ARGS]...\n\n  Discover CNVs from BAM files.\n\n  A typical workflow first extracts regions from a BAM file\n  The resulting BED tracks must then be GC-corrected.\n  Using a reference track of region similarity,\n  One can then calculate Z-scores for every region.\n\n  The following sub-commands are supported:\n   - count: count coverage per bin\n   - gc-correct: GC-correct bins\n   - zscore: calculate Z-scores\n   - newref: Generate a new reference dictionary of bin similarities\n\nOptions:\n  --version  Show the version and exit.\n  --help     Show this message and exit.\n\nCommands:\n  count       Count coverages\n  gc-correct  GC correct\n  newref      Create new reference\n  zscore      Calculate Z-scores\n</code></pre>\n<p>You can additional help by typing <code>wisestork &lt;command&gt; --help</code></p>\n<h2>Differences</h2>\n<p>There are several important differences between this re-implementation\nand the original wisecondor.</p>\n<ul>\n<li>This re-implementation is organized as a regular python package,\nwhile exposing several command-line tools.</li>\n<li>Python 3 support. In fact, it's only tested on python 3.</li>\n<li>All command-line tools now have UNIX-style argument parsing</li>\n<li>Generating reference sets for small bin sizes is now possible in\nmuch less time.</li>\n<li>Pickle files are no longer used. The output format is now regular BED,\nwith a possible additional column. This means results can be used by\ncommon downstream tools like Bedtools.</li>\n<li>User supplied bin files in regular BED format.</li>\n<li>The countgc step is now redundant. Its functionality is now integrated\nin the gcc step.</li>\n<li>The reference bin selection method was modified. The\noriginal wisecondor calculated differences for every bin against every\nbin of every sample, and then repeated this calculation for every\nchromosome. As this is an exponential operation, this made\nreference bin selection prohibitively slow and memory-consuming for\nsmaller bin size. In stead of calculating differences, the new method\napplies a method (e.g. median) over the same bins of all samples,\nand then <em>sorts</em> the resulting list of bins. Similar bins can be\nselected using regular list slicing. This means the time complexity\nof creating a new reference set is now just loglinear. Additional\nfilterings were left the same.</li>\n<li>Use of the <code>statsmodels</code> lowess function, rather than biopython's.\nThis results in a significant speed-up of the gc correction.</li>\n</ul>\n<h2>Naming</h2>\n<p>Why name this tool wisestork, you might think?\nWell, a <em>condor</em> is a bird. As this is a re-implementation / fork of\nwisecondor, I figured another bird would be nice name. As I live in The Hague,\nand The Hague has a stork as a city symbol, I put one and one together.\nThus, <em>wisestork</em> was born.</p>\n<h2>License</h2>\n<p>GPLv3</p>\n\n          </div>"}, "last_serial": 5409029, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1c5d6c92e6ec379d1cead74791f02b87", "sha256": "d3ae4756605a45fd503ec5e32941bb3a22c1efd488197af1d9223e3299c60a99"}, "downloads": -1, "filename": "wisestork-0.1.0.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "1c5d6c92e6ec379d1cead74791f02b87", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 22265, "upload_time": "2019-06-13T14:46:20", "upload_time_iso_8601": "2019-06-13T14:46:20.400813Z", "url": "https://files.pythonhosted.org/packages/8d/40/8a725f3b4d271c332e0a1a986cf1cf811bca05c154e50c2ee5b1929cb2db/wisestork-0.1.0.linux-x86_64.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7b309ecaae60dcbaeb32523b13b05c6", "sha256": "4d45d980155d57ee789a96a11875e70ccc10489d4882d6283b0b27d5fc5d56c4"}, "downloads": -1, "filename": "wisestork-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a7b309ecaae60dcbaeb32523b13b05c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29548, "upload_time": "2019-06-13T14:46:17", "upload_time_iso_8601": "2019-06-13T14:46:17.874920Z", "url": "https://files.pythonhosted.org/packages/19/66/3dd0985ef115225de399bd171c6d48374fe13976635ee33e3b459af56a45/wisestork-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bd5011c80ed196e72ed69926b9e89a35", "sha256": "934ea8f400f8b4e448d651e2d3cfc9c06f1c5ab6e35aacba0950d9f29820f755"}, "downloads": -1, "filename": "wisestork-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bd5011c80ed196e72ed69926b9e89a35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29641, "upload_time": "2019-06-14T10:15:36", "upload_time_iso_8601": "2019-06-14T10:15:36.937157Z", "url": "https://files.pythonhosted.org/packages/b1/1b/0910dc33bdba86b91892d4e966fefb5758741a6355ab60694f9fa2ae0942/wisestork-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "225f4a94acce2e00ec524e6b1f177f7d", "sha256": "084278c791fd2406430ebe02783c4e0b9009219c5ed798458f1bfd0c1ebcfa09"}, "downloads": -1, "filename": "wisestork-0.1.1.tar.gz", "has_sig": false, "md5_digest": "225f4a94acce2e00ec524e6b1f177f7d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 19701, "upload_time": "2019-06-14T10:15:38", "upload_time_iso_8601": "2019-06-14T10:15:38.672666Z", "url": "https://files.pythonhosted.org/packages/24/4f/a922c0aabbd9a6ccce9c6074522f479218e565f4f9cd8373938fecde512d/wisestork-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "a4a94e8d14ce16468f440e294f64161c", "sha256": "31b99bc98b05ba8e5ee823dedebf1afe2a2e8f5ecd17ef9f4be6833c962e4375"}, "downloads": -1, "filename": "wisestork-0.1.2-py3.6.egg", "has_sig": false, "md5_digest": "a4a94e8d14ce16468f440e294f64161c", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.5", "size": 31323, "upload_time": "2019-06-17T08:14:06", "upload_time_iso_8601": "2019-06-17T08:14:06.852615Z", "url": "https://files.pythonhosted.org/packages/44/da/b3ded01e9b97aaf8461a8256e901212808196fe1bc8e9a1e8f18757e095e/wisestork-0.1.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad342696492fd5330b073b3a88d3ccc1", "sha256": "c62612bc8975c62dd1652a697cb69135b56b6e0e8f715fd212d73a32217ebe5c"}, "downloads": -1, "filename": "wisestork-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ad342696492fd5330b073b3a88d3ccc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29643, "upload_time": "2019-06-17T08:14:04", "upload_time_iso_8601": "2019-06-17T08:14:04.939750Z", "url": "https://files.pythonhosted.org/packages/91/b6/a2a9e542bcc4fac90bfb1a928f5bc129c3999086ba19fa7610cff4d7df3e/wisestork-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48c4eeafb453e96a70ab5b9055ca8b71", "sha256": "f363a5d794d6aa4c4b2305e6af976916909bfa6f058ddf9304ac6a71fa3013d1"}, "downloads": -1, "filename": "wisestork-0.1.2.tar.gz", "has_sig": false, "md5_digest": "48c4eeafb453e96a70ab5b9055ca8b71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26933, "upload_time": "2019-06-17T08:14:08", "upload_time_iso_8601": "2019-06-17T08:14:08.536580Z", "url": "https://files.pythonhosted.org/packages/f3/86/a0f61b9eca09470be959726b4c463ddbb5049a153f9d4a037c88b38727cf/wisestork-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a4a94e8d14ce16468f440e294f64161c", "sha256": "31b99bc98b05ba8e5ee823dedebf1afe2a2e8f5ecd17ef9f4be6833c962e4375"}, "downloads": -1, "filename": "wisestork-0.1.2-py3.6.egg", "has_sig": false, "md5_digest": "a4a94e8d14ce16468f440e294f64161c", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.5", "size": 31323, "upload_time": "2019-06-17T08:14:06", "upload_time_iso_8601": "2019-06-17T08:14:06.852615Z", "url": "https://files.pythonhosted.org/packages/44/da/b3ded01e9b97aaf8461a8256e901212808196fe1bc8e9a1e8f18757e095e/wisestork-0.1.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad342696492fd5330b073b3a88d3ccc1", "sha256": "c62612bc8975c62dd1652a697cb69135b56b6e0e8f715fd212d73a32217ebe5c"}, "downloads": -1, "filename": "wisestork-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ad342696492fd5330b073b3a88d3ccc1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 29643, "upload_time": "2019-06-17T08:14:04", "upload_time_iso_8601": "2019-06-17T08:14:04.939750Z", "url": "https://files.pythonhosted.org/packages/91/b6/a2a9e542bcc4fac90bfb1a928f5bc129c3999086ba19fa7610cff4d7df3e/wisestork-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "48c4eeafb453e96a70ab5b9055ca8b71", "sha256": "f363a5d794d6aa4c4b2305e6af976916909bfa6f058ddf9304ac6a71fa3013d1"}, "downloads": -1, "filename": "wisestork-0.1.2.tar.gz", "has_sig": false, "md5_digest": "48c4eeafb453e96a70ab5b9055ca8b71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26933, "upload_time": "2019-06-17T08:14:08", "upload_time_iso_8601": "2019-06-17T08:14:08.536580Z", "url": "https://files.pythonhosted.org/packages/f3/86/a0f61b9eca09470be959726b4c463ddbb5049a153f9d4a037c88b38727cf/wisestork-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:37 2020"}