{"info": {"author": "Andr\u00e9 Hollstein", "author_email": "andre@dr-hollstein.de", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8"], "description": "![image.png](https://github.com/hollstein/baobao/raw/dev/notebooks/baobao_logo.png)\n\nBaobao is a small library that attempts writing and maintaining data pipelines easier. It was written with Pandas in mind, but is not limited to it or even depends on it. It's AIP closely models Pandas pipe functionality.\n\nDesign principles are:\n- Simple in the core\n- Minimal dependencies\n- Additional functionality is optional\n\nInstall with pip: `pip install baobao`. Further documentation: https://hollstein.github.io/baobao/ \n\nPipelines can be build like this:\n\n\n```python\nimport pandas as pd\nfrom baobao import Pipeline  # To define pipelines\nfrom baobao import Step  # Pipelines are build from Steps which may contain Pipelines\n\n# some functions that return pd.Dataframes to play with\nfrom baobao.utils.examples import load_1, load_2, load_3\n\nPipeline(\n    root_node=load_1,  # We have to start somewhere, could be any object or callable\n    pipeline=(  # Pipelines are build from Steps\n        Step(\n            # Each Step is build from a function that takes \n            # the output of the previous Step as input in \n            # the first argument\n            func=pd.merge,\n            # Any argoments to [func] can be given\n            left_index=True, right_index=True,\n            right=Pipeline(load_2),  # including additional Pipelines\n        ),\n        Step(func=pd.merge, right=Pipeline(load_3), left_index=True, right_index=True),\n    )\n).run()  # Call the run method to actually run the pipeline, enjoy some logging out of the box\n```\n    INFO:root:Pipeline(root_node=load_1(),memory=None)\n    INFO:root:    Step(func=merge,args=(),left_index=True,right_index=True,right=Pipeline(root_node=l[...])\n    INFO:root:Pipeline(root_node=load_2(),memory=None)\n    Load 1\n    INFO:root:Complete pipeline after 3.02s\n    INFO:root:    Step(func=merge,args=(),right=Pipeline(root_node=l[...],left_index=True,right_index=True)\n    INFO:root:Pipeline(root_node=load_3(),memory=None)\n    Load 2\n    INFO:root:Complete pipeline after 3.02s\n    INFO:root:Complete pipeline after 9.06s\n    Load 3\n\n\n\nA neat way of speeding this up is caching results to disk:\n\n\n```python\n# Baobao doesn't depend on any caching but respects Joblibs \n# API in case you want to chose some other caching strategy  \nfrom joblib import Memory\n\n# Baobao options are separated into a dedicated object in\n# order to make it simple to push options down to Pipelines\n# included in Steps of the root Pipeline\nfrom baobao import PipelineOpts\n\n# Define the pipeline:\npipeline = Pipeline(\n    root_node=load_1,\n    opts=PipelineOpts(\n        memory=Memory(\"./cache\", verbose=0),\n        push_options=True  # Pushing options down to included Pipelines\n    ),\n    pipeline=(\n        Step(func=pd.merge, right=Pipeline(load_2), left_index=True, right_index=True),\n        Step(func=pd.merge, right=Pipeline(load_3), left_index=True, right_index=True),\n    )\n)\n# Run the pipeline:\npipeline.run()\n```\n\n    INFO:root:Pipeline(root_node=load_1(),memory=Memory(location=./cache/joblib))\n    INFO:root:    Step(func=merge,args=(),right=Pipeline(root_node=l[...],left_index=True,right_index=True)\n    INFO:root:    Pipeline(root_node=load_2(),memory=Memory(location=./cache/joblib))\n    INFO:root:    Complete pipeline after 0.00s\n    INFO:root:    Step(func=merge,args=(),right=Pipeline(root_node=l[...],left_index=True,right_index=True)\n    INFO:root:    Pipeline(root_node=load_3(),memory=Memory(location=./cache/joblib))\n    INFO:root:    Complete pipeline after 0.01s\n    INFO:root:Complete pipeline after 0.04s\n\nReasoning over pipelines might be simpler with this printing utility:\n\n\n```python\nfrom baobao.utils import print_pipeline\nprint_pipeline(pipeline)\n```\n\n    pipeline << load_1\n     \u2560\u2550\u2550 Step 0:merge\n     \u2551   \u2560\u2550\u2550 right = DataFrame shape:(10, 1), columns:['c2']\n     \u2551   \u2560\u2550\u2550 left_index = True\n     \u2551   \u255a\u2550\u2550 right_index = True\n     \u255a\u2550\u2550 Step 1:merge\n         \u2560\u2550\u2550 right = DataFrame shape:(10, 1), columns:['c3']\n         \u2560\u2550\u2550 left_index = True\n         \u255a\u2550\u2550 right_index = True\n\n\nPrinting can be adjusted using the multiple dispatch pattern:\n\n\n```python\nfrom baobao.pipeline import str_\n@str_.register\ndef _(inp: pd.DataFrame):\n    return f\"DataFrame(shape:{inp.shape})\"\n@str_.register\ndef _(inp: bool):\n    return f\"Bool:{inp}\"\n\nprint_pipeline(pipeline)\n```\n\n    pipeline << load_1\n     \u2560\u2550\u2550 Step 0:merge\n     \u2551   \u2560\u2550\u2550 right = DataFrame(shape:(10, 1))\n     \u2551   \u2560\u2550\u2550 left_index = Bool:True\n     \u2551   \u255a\u2550\u2550 right_index = Bool:True\n     \u255a\u2550\u2550 Step 1:merge\n         \u2560\u2550\u2550 right = DataFrame(shape:(10, 1))\n         \u2560\u2550\u2550 left_index = Bool:True\n         \u255a\u2550\u2550 right_index = Bool:True\n\n\nA little more depth added:\n\n\n```python\nfrom baobao.utils.examples import *  # Import more load_X functions\n\ndef mk_pipeline():  # get fresh pipeline each time we call this function\n    return Pipeline(\n        root_node=load_1,\n        opts=PipelineOpts(\n            memory=None,#Memory(\"./cache\", verbose=0),\n            push_options=True\n        ),\n        pipeline=(\n            Step(func=pd.merge, left_index=True, right_index=True, right=Pipeline(load_2)),\n            Step(func=pd.merge, left_index=True, right_index=True, right=Pipeline(\n                root_node=load_3,\n                pipeline=(\n                    Step(func=pd.merge, left_index=True, right_index=True, right=Pipeline(load_4)),\n                    Step(func=pd.merge, left_index=True, right_index=True, right=Pipeline(\n                        root_node=load_2,\n                        pipeline=(\n                            Step(func=pd.merge, left_index=True, right_index=True, right=Pipeline(load_5)),\n                            Step(func=pd.merge, left_index=True, right_index=True, right=Pipeline(load_6)),\n                        )\n                    )),\n                ))\n                ),\n            Step(func=pd.merge, left_index=True, right_index=True, right=Pipeline(load_5)),\n        )\n    )\n```\n\nLets print this one again:\n\n\n```python\nprint_pipeline(mk_pipeline())\n```\n\n    pipeline << load_1\n     \u2560\u2550\u2550 Step 0:merge\n     \u2551   \u2560\u2550\u2550 left_index = Bool:True\n     \u2551   \u2560\u2550\u2550 right_index = Bool:True\n     \u2551   \u255a\u2550\u2550 right\n     \u2551       \u255a\u2550\u2550 pipeline << load_2\n     \u2560\u2550\u2550 Step 1:merge\n     \u2551   \u2560\u2550\u2550 left_index = Bool:True\n     \u2551   \u2560\u2550\u2550 right_index = Bool:True\n     \u2551   \u255a\u2550\u2550 right\n     \u2551       \u255a\u2550\u2550 pipeline << load_3\n     \u2551           \u2560\u2550\u2550 Step 0:merge\n     \u2551           \u2551   \u2560\u2550\u2550 left_index = Bool:True\n     \u2551           \u2551   \u2560\u2550\u2550 right_index = Bool:True\n     \u2551           \u2551   \u255a\u2550\u2550 right\n     \u2551           \u2551       \u255a\u2550\u2550 pipeline << load_4\n     \u2551           \u255a\u2550\u2550 Step 1:merge\n     \u2551               \u2560\u2550\u2550 left_index = Bool:True\n     \u2551               \u2560\u2550\u2550 right_index = Bool:True\n     \u2551               \u255a\u2550\u2550 right\n     \u2551                   \u255a\u2550\u2550 pipeline << load_2\n     \u2551                       \u2560\u2550\u2550 Step 0:merge\n     \u2551                       \u2551   \u2560\u2550\u2550 left_index = Bool:True\n     \u2551                       \u2551   \u2560\u2550\u2550 right_index = Bool:True\n     \u2551                       \u2551   \u255a\u2550\u2550 right\n     \u2551                       \u2551       \u255a\u2550\u2550 pipeline << load_5\n     \u2551                       \u255a\u2550\u2550 Step 1:merge\n     \u2551                           \u2560\u2550\u2550 left_index = Bool:True\n     \u2551                           \u2560\u2550\u2550 right_index = Bool:True\n     \u2551                           \u255a\u2550\u2550 right\n     \u2551                               \u255a\u2550\u2550 pipeline << load_6\n     \u255a\u2550\u2550 Step 2:merge\n         \u2560\u2550\u2550 left_index = Bool:True\n         \u2560\u2550\u2550 right_index = Bool:True\n         \u255a\u2550\u2550 right\n             \u255a\u2550\u2550 pipeline << load_5\n\n\nand run it in a sequential manner:\n\n\n```python\nmk_pipeline().run()\n```\n    INFO:root:Pipeline(root_node=load_1(),memory=None)\n    INFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:    Pipeline(root_node=load_2(),memory=None)\n    Load 1\n    INFO:root:    Complete pipeline after 3.01s\n    INFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:    Pipeline(root_node=load_3(),memory=None)\n    Load 2\n    INFO:root:        Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:        Pipeline(root_node=load_4(),memory=None)\n    Load 3\n    INFO:root:        Complete pipeline after 3.02s\n    INFO:root:        Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:        Pipeline(root_node=load_2(),memory=None)\n    Load 4\n    INFO:root:            Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:            Pipeline(root_node=load_5(),memory=None)\n    Load 2\n    INFO:root:            Complete pipeline after 3.01s\n    INFO:root:            Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:            Pipeline(root_node=load_6(),memory=None)\n    Load 5\n    INFO:root:            Complete pipeline after 3.01s\n    INFO:root:        Complete pipeline after 9.05s\n    INFO:root:    Complete pipeline after 15.10s\n    INFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:    Pipeline(root_node=load_5(),memory=None)\n    Load 6\n    INFO:root:    Complete pipeline after 3.01s\n    INFO:root:Complete pipeline after 24.15s\n    Load 5\n\nWe can speed things up by submitting those pipelines that do not contain further pipelines to a multiprocess Pool and enjoy some nice speedups:\n\n\n```python\nfrom baobao.utils import run_parallel\n\nrun_parallel(mk_pipeline(), n_jobs=4)\n```\n\n    INFO:root:Submit: Pipeline(root_node=load_2(),memory=None) to: <multiprocessing.pool.Pool state=RUN pool_size=4>\n    INFO:root:Submit: Pipeline(root_node=load_4(),memory=None) to: <multiprocessing.pool.Pool state=RUN pool_size=4>\n    INFO:root:Submit: Pipeline(root_node=load_5(),memory=None) to: <multiprocessing.pool.Pool state=RUN pool_size=4>\n    INFO:root:Pipeline(root_node=load_2(),memory=None)\n    INFO:root:Submit: Pipeline(root_node=load_6(),memory=None) to: <multiprocessing.pool.Pool state=RUN pool_size=4>\n    INFO:root:Pipeline(root_node=load_4(),memory=None)\n    INFO:root:Submit: Pipeline(root_node=load_5(),memory=None) to: <multiprocessing.pool.Pool state=RUN pool_size=4>\n    INFO:root:Pipeline(root_node=load_1(),memory=None)\n    INFO:root:Pipeline(root_node=load_5(),memory=None)\n    INFO:root:Pipeline(root_node=load_6(),memory=None)\n    Load 4\n    Load 2\n    INFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=<multiprocessing.poo[...])\n    Load 6\n    INFO:root:Complete pipeline after 3.04s\n    Load 5\n    INFO:root:Pipeline(root_node=load_5(),memory=None)\n    INFO:root:Complete pipeline after 3.04s\n    INFO:root:Complete pipeline after 3.06s\n    INFO:root:Complete pipeline after 3.06s\n    INFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:    Pipeline(root_node=load_3(),memory=None)\n    Load 1\n    Load 5\n    INFO:root:Complete pipeline after 3.02s\n    INFO:root:        Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=<multiprocessing.poo[...])\n    INFO:root:        Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\n    INFO:root:        Pipeline(root_node=load_2(),memory=None)\n    Load 3\n    INFO:root:            Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=<multiprocessing.poo[...])\n    INFO:root:            Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=<multiprocessing.poo[...])\n    INFO:root:        Complete pipeline after 3.02s\n    INFO:root:    Complete pipeline after 6.04s\n    INFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=<multiprocessing.poo[...])\n    INFO:root:Complete pipeline after 9.15s\n    Load 2\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://hollstein.github.io/baobao/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "baobao", "package_url": "https://pypi.org/project/baobao/", "platform": "", "project_url": "https://pypi.org/project/baobao/", "project_urls": {"Documentation": "https://hollstein.github.io/baobao/", "Homepage": "https://hollstein.github.io/baobao/", "Repository": "https://github.com/hollstein/baobao"}, "release_url": "https://pypi.org/project/baobao/0.2.4/", "requires_dist": null, "requires_python": ">=3.8,<4.0", "summary": "", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"image.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3925b08eb7c40a79060d6bbc1b929e0967c50073/68747470733a2f2f6769746875622e636f6d2f686f6c6c737465696e2f62616f62616f2f7261772f6465762f6e6f7465626f6f6b732f62616f62616f5f6c6f676f2e706e67\"></p>\n<p>Baobao is a small library that attempts writing and maintaining data pipelines easier. It was written with Pandas in mind, but is not limited to it or even depends on it. It's AIP closely models Pandas pipe functionality.</p>\n<p>Design principles are:</p>\n<ul>\n<li>Simple in the core</li>\n<li>Minimal dependencies</li>\n<li>Additional functionality is optional</li>\n</ul>\n<p>Install with pip: <code>pip install baobao</code>. Further documentation: <a href=\"https://hollstein.github.io/baobao/\" rel=\"nofollow\">https://hollstein.github.io/baobao/</a></p>\n<p>Pipelines can be build like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">baobao</span> <span class=\"kn\">import</span> <span class=\"n\">Pipeline</span>  <span class=\"c1\"># To define pipelines</span>\n<span class=\"kn\">from</span> <span class=\"nn\">baobao</span> <span class=\"kn\">import</span> <span class=\"n\">Step</span>  <span class=\"c1\"># Pipelines are build from Steps which may contain Pipelines</span>\n\n<span class=\"c1\"># some functions that return pd.Dataframes to play with</span>\n<span class=\"kn\">from</span> <span class=\"nn\">baobao.utils.examples</span> <span class=\"kn\">import</span> <span class=\"n\">load_1</span><span class=\"p\">,</span> <span class=\"n\">load_2</span><span class=\"p\">,</span> <span class=\"n\">load_3</span>\n\n<span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n    <span class=\"n\">root_node</span><span class=\"o\">=</span><span class=\"n\">load_1</span><span class=\"p\">,</span>  <span class=\"c1\"># We have to start somewhere, could be any object or callable</span>\n    <span class=\"n\">pipeline</span><span class=\"o\">=</span><span class=\"p\">(</span>  <span class=\"c1\"># Pipelines are build from Steps</span>\n        <span class=\"n\">Step</span><span class=\"p\">(</span>\n            <span class=\"c1\"># Each Step is build from a function that takes </span>\n            <span class=\"c1\"># the output of the previous Step as input in </span>\n            <span class=\"c1\"># the first argument</span>\n            <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span>\n            <span class=\"c1\"># Any argoments to [func] can be given</span>\n            <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_2</span><span class=\"p\">),</span>  <span class=\"c1\"># including additional Pipelines</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_3</span><span class=\"p\">),</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>  <span class=\"c1\"># Call the run method to actually run the pipeline, enjoy some logging out of the box</span>\n</pre>\n<pre><code>INFO:root:Pipeline(root_node=load_1(),memory=None)\nINFO:root:    Step(func=merge,args=(),left_index=True,right_index=True,right=Pipeline(root_node=l[...])\nINFO:root:Pipeline(root_node=load_2(),memory=None)\nLoad 1\nINFO:root:Complete pipeline after 3.02s\nINFO:root:    Step(func=merge,args=(),right=Pipeline(root_node=l[...],left_index=True,right_index=True)\nINFO:root:Pipeline(root_node=load_3(),memory=None)\nLoad 2\nINFO:root:Complete pipeline after 3.02s\nINFO:root:Complete pipeline after 9.06s\nLoad 3\n</code></pre>\n<p>A neat way of speeding this up is caching results to disk:</p>\n<pre><span class=\"c1\"># Baobao doesn't depend on any caching but respects Joblibs </span>\n<span class=\"c1\"># API in case you want to chose some other caching strategy  </span>\n<span class=\"kn\">from</span> <span class=\"nn\">joblib</span> <span class=\"kn\">import</span> <span class=\"n\">Memory</span>\n\n<span class=\"c1\"># Baobao options are separated into a dedicated object in</span>\n<span class=\"c1\"># order to make it simple to push options down to Pipelines</span>\n<span class=\"c1\"># included in Steps of the root Pipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">baobao</span> <span class=\"kn\">import</span> <span class=\"n\">PipelineOpts</span>\n\n<span class=\"c1\"># Define the pipeline:</span>\n<span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n    <span class=\"n\">root_node</span><span class=\"o\">=</span><span class=\"n\">load_1</span><span class=\"p\">,</span>\n    <span class=\"n\">opts</span><span class=\"o\">=</span><span class=\"n\">PipelineOpts</span><span class=\"p\">(</span>\n        <span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"n\">Memory</span><span class=\"p\">(</span><span class=\"s2\">\"./cache\"</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n        <span class=\"n\">push_options</span><span class=\"o\">=</span><span class=\"kc\">True</span>  <span class=\"c1\"># Pushing options down to included Pipelines</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">pipeline</span><span class=\"o\">=</span><span class=\"p\">(</span>\n        <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_2</span><span class=\"p\">),</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n        <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_3</span><span class=\"p\">),</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Run the pipeline:</span>\n<span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<pre><code>INFO:root:Pipeline(root_node=load_1(),memory=Memory(location=./cache/joblib))\nINFO:root:    Step(func=merge,args=(),right=Pipeline(root_node=l[...],left_index=True,right_index=True)\nINFO:root:    Pipeline(root_node=load_2(),memory=Memory(location=./cache/joblib))\nINFO:root:    Complete pipeline after 0.00s\nINFO:root:    Step(func=merge,args=(),right=Pipeline(root_node=l[...],left_index=True,right_index=True)\nINFO:root:    Pipeline(root_node=load_3(),memory=Memory(location=./cache/joblib))\nINFO:root:    Complete pipeline after 0.01s\nINFO:root:Complete pipeline after 0.04s\n</code></pre>\n<p>Reasoning over pipelines might be simpler with this printing utility:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baobao.utils</span> <span class=\"kn\">import</span> <span class=\"n\">print_pipeline</span>\n<span class=\"n\">print_pipeline</span><span class=\"p\">(</span><span class=\"n\">pipeline</span><span class=\"p\">)</span>\n</pre>\n<pre><code>pipeline &lt;&lt; load_1\n \u2560\u2550\u2550 Step 0:merge\n \u2551   \u2560\u2550\u2550 right = DataFrame shape:(10, 1), columns:['c2']\n \u2551   \u2560\u2550\u2550 left_index = True\n \u2551   \u255a\u2550\u2550 right_index = True\n \u255a\u2550\u2550 Step 1:merge\n     \u2560\u2550\u2550 right = DataFrame shape:(10, 1), columns:['c3']\n     \u2560\u2550\u2550 left_index = True\n     \u255a\u2550\u2550 right_index = True\n</code></pre>\n<p>Printing can be adjusted using the multiple dispatch pattern:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baobao.pipeline</span> <span class=\"kn\">import</span> <span class=\"n\">str_</span>\n<span class=\"nd\">@str_</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">_</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"DataFrame(shape:</span><span class=\"si\">{</span><span class=\"n\">inp</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n<span class=\"nd\">@str_</span><span class=\"o\">.</span><span class=\"n\">register</span>\n<span class=\"k\">def</span> <span class=\"nf\">_</span><span class=\"p\">(</span><span class=\"n\">inp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"Bool:</span><span class=\"si\">{</span><span class=\"n\">inp</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">print_pipeline</span><span class=\"p\">(</span><span class=\"n\">pipeline</span><span class=\"p\">)</span>\n</pre>\n<pre><code>pipeline &lt;&lt; load_1\n \u2560\u2550\u2550 Step 0:merge\n \u2551   \u2560\u2550\u2550 right = DataFrame(shape:(10, 1))\n \u2551   \u2560\u2550\u2550 left_index = Bool:True\n \u2551   \u255a\u2550\u2550 right_index = Bool:True\n \u255a\u2550\u2550 Step 1:merge\n     \u2560\u2550\u2550 right = DataFrame(shape:(10, 1))\n     \u2560\u2550\u2550 left_index = Bool:True\n     \u255a\u2550\u2550 right_index = Bool:True\n</code></pre>\n<p>A little more depth added:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baobao.utils.examples</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>  <span class=\"c1\"># Import more load_X functions</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mk_pipeline</span><span class=\"p\">():</span>  <span class=\"c1\"># get fresh pipeline each time we call this function</span>\n    <span class=\"k\">return</span> <span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n        <span class=\"n\">root_node</span><span class=\"o\">=</span><span class=\"n\">load_1</span><span class=\"p\">,</span>\n        <span class=\"n\">opts</span><span class=\"o\">=</span><span class=\"n\">PipelineOpts</span><span class=\"p\">(</span>\n            <span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span><span class=\"c1\">#Memory(\"./cache\", verbose=0),</span>\n            <span class=\"n\">push_options</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">pipeline</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_2</span><span class=\"p\">)),</span>\n            <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n                <span class=\"n\">root_node</span><span class=\"o\">=</span><span class=\"n\">load_3</span><span class=\"p\">,</span>\n                <span class=\"n\">pipeline</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                    <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_4</span><span class=\"p\">)),</span>\n                    <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span>\n                        <span class=\"n\">root_node</span><span class=\"o\">=</span><span class=\"n\">load_2</span><span class=\"p\">,</span>\n                        <span class=\"n\">pipeline</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                            <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_5</span><span class=\"p\">)),</span>\n                            <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_6</span><span class=\"p\">)),</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)),</span>\n                <span class=\"p\">))</span>\n                <span class=\"p\">),</span>\n            <span class=\"n\">Step</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">,</span> <span class=\"n\">left_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Pipeline</span><span class=\"p\">(</span><span class=\"n\">load_5</span><span class=\"p\">)),</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Lets print this one again:</p>\n<pre><span class=\"n\">print_pipeline</span><span class=\"p\">(</span><span class=\"n\">mk_pipeline</span><span class=\"p\">())</span>\n</pre>\n<pre><code>pipeline &lt;&lt; load_1\n \u2560\u2550\u2550 Step 0:merge\n \u2551   \u2560\u2550\u2550 left_index = Bool:True\n \u2551   \u2560\u2550\u2550 right_index = Bool:True\n \u2551   \u255a\u2550\u2550 right\n \u2551       \u255a\u2550\u2550 pipeline &lt;&lt; load_2\n \u2560\u2550\u2550 Step 1:merge\n \u2551   \u2560\u2550\u2550 left_index = Bool:True\n \u2551   \u2560\u2550\u2550 right_index = Bool:True\n \u2551   \u255a\u2550\u2550 right\n \u2551       \u255a\u2550\u2550 pipeline &lt;&lt; load_3\n \u2551           \u2560\u2550\u2550 Step 0:merge\n \u2551           \u2551   \u2560\u2550\u2550 left_index = Bool:True\n \u2551           \u2551   \u2560\u2550\u2550 right_index = Bool:True\n \u2551           \u2551   \u255a\u2550\u2550 right\n \u2551           \u2551       \u255a\u2550\u2550 pipeline &lt;&lt; load_4\n \u2551           \u255a\u2550\u2550 Step 1:merge\n \u2551               \u2560\u2550\u2550 left_index = Bool:True\n \u2551               \u2560\u2550\u2550 right_index = Bool:True\n \u2551               \u255a\u2550\u2550 right\n \u2551                   \u255a\u2550\u2550 pipeline &lt;&lt; load_2\n \u2551                       \u2560\u2550\u2550 Step 0:merge\n \u2551                       \u2551   \u2560\u2550\u2550 left_index = Bool:True\n \u2551                       \u2551   \u2560\u2550\u2550 right_index = Bool:True\n \u2551                       \u2551   \u255a\u2550\u2550 right\n \u2551                       \u2551       \u255a\u2550\u2550 pipeline &lt;&lt; load_5\n \u2551                       \u255a\u2550\u2550 Step 1:merge\n \u2551                           \u2560\u2550\u2550 left_index = Bool:True\n \u2551                           \u2560\u2550\u2550 right_index = Bool:True\n \u2551                           \u255a\u2550\u2550 right\n \u2551                               \u255a\u2550\u2550 pipeline &lt;&lt; load_6\n \u255a\u2550\u2550 Step 2:merge\n     \u2560\u2550\u2550 left_index = Bool:True\n     \u2560\u2550\u2550 right_index = Bool:True\n     \u255a\u2550\u2550 right\n         \u255a\u2550\u2550 pipeline &lt;&lt; load_5\n</code></pre>\n<p>and run it in a sequential manner:</p>\n<pre><span class=\"n\">mk_pipeline</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n<pre><code>INFO:root:Pipeline(root_node=load_1(),memory=None)\nINFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:    Pipeline(root_node=load_2(),memory=None)\nLoad 1\nINFO:root:    Complete pipeline after 3.01s\nINFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:    Pipeline(root_node=load_3(),memory=None)\nLoad 2\nINFO:root:        Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:        Pipeline(root_node=load_4(),memory=None)\nLoad 3\nINFO:root:        Complete pipeline after 3.02s\nINFO:root:        Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:        Pipeline(root_node=load_2(),memory=None)\nLoad 4\nINFO:root:            Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:            Pipeline(root_node=load_5(),memory=None)\nLoad 2\nINFO:root:            Complete pipeline after 3.01s\nINFO:root:            Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:            Pipeline(root_node=load_6(),memory=None)\nLoad 5\nINFO:root:            Complete pipeline after 3.01s\nINFO:root:        Complete pipeline after 9.05s\nINFO:root:    Complete pipeline after 15.10s\nINFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:    Pipeline(root_node=load_5(),memory=None)\nLoad 6\nINFO:root:    Complete pipeline after 3.01s\nINFO:root:Complete pipeline after 24.15s\nLoad 5\n</code></pre>\n<p>We can speed things up by submitting those pipelines that do not contain further pipelines to a multiprocess Pool and enjoy some nice speedups:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">baobao.utils</span> <span class=\"kn\">import</span> <span class=\"n\">run_parallel</span>\n\n<span class=\"n\">run_parallel</span><span class=\"p\">(</span><span class=\"n\">mk_pipeline</span><span class=\"p\">(),</span> <span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<pre><code>INFO:root:Submit: Pipeline(root_node=load_2(),memory=None) to: &lt;multiprocessing.pool.Pool state=RUN pool_size=4&gt;\nINFO:root:Submit: Pipeline(root_node=load_4(),memory=None) to: &lt;multiprocessing.pool.Pool state=RUN pool_size=4&gt;\nINFO:root:Submit: Pipeline(root_node=load_5(),memory=None) to: &lt;multiprocessing.pool.Pool state=RUN pool_size=4&gt;\nINFO:root:Pipeline(root_node=load_2(),memory=None)\nINFO:root:Submit: Pipeline(root_node=load_6(),memory=None) to: &lt;multiprocessing.pool.Pool state=RUN pool_size=4&gt;\nINFO:root:Pipeline(root_node=load_4(),memory=None)\nINFO:root:Submit: Pipeline(root_node=load_5(),memory=None) to: &lt;multiprocessing.pool.Pool state=RUN pool_size=4&gt;\nINFO:root:Pipeline(root_node=load_1(),memory=None)\nINFO:root:Pipeline(root_node=load_5(),memory=None)\nINFO:root:Pipeline(root_node=load_6(),memory=None)\nLoad 4\nLoad 2\nINFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=&lt;multiprocessing.poo[...])\nLoad 6\nINFO:root:Complete pipeline after 3.04s\nLoad 5\nINFO:root:Pipeline(root_node=load_5(),memory=None)\nINFO:root:Complete pipeline after 3.04s\nINFO:root:Complete pipeline after 3.06s\nINFO:root:Complete pipeline after 3.06s\nINFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:    Pipeline(root_node=load_3(),memory=None)\nLoad 1\nLoad 5\nINFO:root:Complete pipeline after 3.02s\nINFO:root:        Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=&lt;multiprocessing.poo[...])\nINFO:root:        Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=Pipeline(root_node=l[...])\nINFO:root:        Pipeline(root_node=load_2(),memory=None)\nLoad 3\nINFO:root:            Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=&lt;multiprocessing.poo[...])\nINFO:root:            Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=&lt;multiprocessing.poo[...])\nINFO:root:        Complete pipeline after 3.02s\nINFO:root:    Complete pipeline after 6.04s\nINFO:root:    Step(func=merge,args=(),left_index=Bool:True,right_index=Bool:True,right=&lt;multiprocessing.poo[...])\nINFO:root:Complete pipeline after 9.15s\nLoad 2\n</code></pre>\n\n          </div>"}, "last_serial": 6956380, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1b63f1dfd831e9b2726bbd73e7799268", "sha256": "1b90cfd51ce288838954fb717a00d6f407cfb762f3a76efc7522c314f388da2b"}, "downloads": -1, "filename": "baobao-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1b63f1dfd831e9b2726bbd73e7799268", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 4526, "upload_time": "2020-04-03T18:33:36", "upload_time_iso_8601": "2020-04-03T18:33:36.019971Z", "url": "https://files.pythonhosted.org/packages/3e/47/e0ce29b0c9b2e887d64478ff1cbeb0ebfceee3dc2fc56b2cb944a1a792c7/baobao-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "912d90bd255b79c1fc489f11a8bdab3c", "sha256": "8adf460e09a030e3cc966ba3cdcdae01880d783c4c9251255341fe4fe775c2d1"}, "downloads": -1, "filename": "baobao-0.1.0.tar.gz", "has_sig": false, "md5_digest": "912d90bd255b79c1fc489f11a8bdab3c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 3352, "upload_time": "2020-04-03T18:33:38", "upload_time_iso_8601": "2020-04-03T18:33:38.093646Z", "url": "https://files.pythonhosted.org/packages/e8/11/789bb6739299fcbd04794e84594b1398d1f2b43ffba0cbcac2230b404a8f/baobao-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "61cbb196d6471c5a24a7a8e3f0498efd", "sha256": "0affc28c95c50b961c13af70547b613ea8336d8a534bc90968f90adec0bead07"}, "downloads": -1, "filename": "baobao-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "61cbb196d6471c5a24a7a8e3f0498efd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 5313, "upload_time": "2020-04-04T18:34:30", "upload_time_iso_8601": "2020-04-04T18:34:30.272098Z", "url": "https://files.pythonhosted.org/packages/7b/5c/7f51290ae17ddd206f297d406e72e4eafb3378103a9aea77dc97995a956e/baobao-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cf18d7520811d317d222d77bbadfc33", "sha256": "f83cb11a8a890318212ff82f3f519c9315f6cd918b2fb50edf070f3575926329"}, "downloads": -1, "filename": "baobao-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3cf18d7520811d317d222d77bbadfc33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 4056, "upload_time": "2020-04-04T18:34:31", "upload_time_iso_8601": "2020-04-04T18:34:31.182968Z", "url": "https://files.pythonhosted.org/packages/eb/da/014baf0289d655c770ede4c2b47fee7f7e4a660477356e777d38f505fed2/baobao-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "202a2918b5861962aa8807f518128780", "sha256": "a06cfad786e128f38654c9eec43722f31dc468b7b53a17fc19f23d79fdba16fa"}, "downloads": -1, "filename": "baobao-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "202a2918b5861962aa8807f518128780", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 7521, "upload_time": "2020-04-04T18:37:47", "upload_time_iso_8601": "2020-04-04T18:37:47.579258Z", "url": "https://files.pythonhosted.org/packages/11/b1/8e85aed310f581ca2b10ff412f94789d1d5e3f75c7053e2a1c957ab4e76f/baobao-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6f8f21f93895f0616c9abee2fa578fd", "sha256": "02031f5a9a3d11052a32027b43cfb2d78962f3aa3c1a5b0a8493000a210d3a62"}, "downloads": -1, "filename": "baobao-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a6f8f21f93895f0616c9abee2fa578fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 8898, "upload_time": "2020-04-04T18:37:48", "upload_time_iso_8601": "2020-04-04T18:37:48.814374Z", "url": "https://files.pythonhosted.org/packages/33/3f/45a9d4c919b5d00d0080fc8714c02a604f8f00a848bb58de5b67ee4a3d3f/baobao-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "9bab3f1919df6a6ac0ce6bb29338bfb2", "sha256": "6091eb3d5d2c6d9f894b51d5a3c02eaf2ef57b66073cabf89119d01397541dac"}, "downloads": -1, "filename": "baobao-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "9bab3f1919df6a6ac0ce6bb29338bfb2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 7565, "upload_time": "2020-04-04T19:40:09", "upload_time_iso_8601": "2020-04-04T19:40:09.178764Z", "url": "https://files.pythonhosted.org/packages/e3/bf/6b19c7e80fc237ba3bc73cf9b99cb8408276cf49cf65940e9265161c7d04/baobao-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a43d63eca2ac30f032f9df20f4bce8c3", "sha256": "bda234b0972aa5e77c1797063832e7c343dd4d74b2ab264a6f48f4fff3301266"}, "downloads": -1, "filename": "baobao-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a43d63eca2ac30f032f9df20f4bce8c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 8970, "upload_time": "2020-04-04T19:40:10", "upload_time_iso_8601": "2020-04-04T19:40:10.353109Z", "url": "https://files.pythonhosted.org/packages/2b/27/d9fdb6d538c2702def021a871415a1ce6748885fa22af40c6c3e7e3c4bb3/baobao-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "d3d82c6132bb74e01b35ffedaa6961e3", "sha256": "9875103d97e9fd2752bf814f6e6c513d29a9bc218eadb5cd85e16223c6db2648"}, "downloads": -1, "filename": "baobao-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d3d82c6132bb74e01b35ffedaa6961e3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 7580, "upload_time": "2020-04-05T08:33:37", "upload_time_iso_8601": "2020-04-05T08:33:37.983303Z", "url": "https://files.pythonhosted.org/packages/e1/78/c8ea815aa9bc9fb14de0db8fabcfbf122c58349df03e972a63f8e6d24fec/baobao-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82ae24edd668fb811ca7c74399018eb1", "sha256": "e423b6b9392857d2542fc7c7dfff89b064d2a63d681f1f2bd6d3d4d49a1955fc"}, "downloads": -1, "filename": "baobao-0.2.3.tar.gz", "has_sig": false, "md5_digest": "82ae24edd668fb811ca7c74399018eb1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 9018, "upload_time": "2020-04-05T08:33:39", "upload_time_iso_8601": "2020-04-05T08:33:39.420473Z", "url": "https://files.pythonhosted.org/packages/43/65/f8bdf694b9570a6febd3b6be1f475996b17e4f19efd3fb7f5948bcf8dfbf/baobao-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "18817c88c9b17208cc4a90d1246cd52c", "sha256": "4b30ad4a75e3d97f922b0f534fb34af02705e71baf7e4990f0b19760e36bc91f"}, "downloads": -1, "filename": "baobao-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "18817c88c9b17208cc4a90d1246cd52c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 7994, "upload_time": "2020-04-05T15:47:05", "upload_time_iso_8601": "2020-04-05T15:47:05.319494Z", "url": "https://files.pythonhosted.org/packages/ca/cd/a5e54913656046b4b79b8ff8c5025d34cc998a811860befbb6f7e3cce1e6/baobao-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d030a7a2f5e07521814dd829e2c79ab5", "sha256": "e47366be59f84a46c181d11926d94bb8885a146879b9161f4d5bc8399859f4c6"}, "downloads": -1, "filename": "baobao-0.2.4.tar.gz", "has_sig": false, "md5_digest": "d030a7a2f5e07521814dd829e2c79ab5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 9445, "upload_time": "2020-04-05T15:47:06", "upload_time_iso_8601": "2020-04-05T15:47:06.843169Z", "url": "https://files.pythonhosted.org/packages/11/9c/cfca5021ce077a78af75dad56867ae3a12a6514c00ff34c78a2676ea5b52/baobao-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "18817c88c9b17208cc4a90d1246cd52c", "sha256": "4b30ad4a75e3d97f922b0f534fb34af02705e71baf7e4990f0b19760e36bc91f"}, "downloads": -1, "filename": "baobao-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "18817c88c9b17208cc4a90d1246cd52c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8,<4.0", "size": 7994, "upload_time": "2020-04-05T15:47:05", "upload_time_iso_8601": "2020-04-05T15:47:05.319494Z", "url": "https://files.pythonhosted.org/packages/ca/cd/a5e54913656046b4b79b8ff8c5025d34cc998a811860befbb6f7e3cce1e6/baobao-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d030a7a2f5e07521814dd829e2c79ab5", "sha256": "e47366be59f84a46c181d11926d94bb8885a146879b9161f4d5bc8399859f4c6"}, "downloads": -1, "filename": "baobao-0.2.4.tar.gz", "has_sig": false, "md5_digest": "d030a7a2f5e07521814dd829e2c79ab5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8,<4.0", "size": 9445, "upload_time": "2020-04-05T15:47:06", "upload_time_iso_8601": "2020-04-05T15:47:06.843169Z", "url": "https://files.pythonhosted.org/packages/11/9c/cfca5021ce077a78af75dad56867ae3a12a6514c00ff34c78a2676ea5b52/baobao-0.2.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:14:54 2020"}