{"info": {"author": "Bruno Nicko", "author_email": "brunonicko@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7"], "description": "Slotted\n=======\nEnforces usage of ``__slots__`` for python classes and provides pickling capabilities.\n\nExamples\n--------\nWhen defining a ``Slotted`` class with no ``__slots__`` declaration, it assumes it has\nempty slots, which is equivalent of declaring ``__slots__ = ()``.\n\n.. code:: python\n\n    >>> from slotted import Slotted\n    >>> class Foo(Slotted):\n    ...     pass  # implicit declaration of __slots__ = ()\n    ...\n    >>> foo = Foo()\n    >>> foo.bar = 1\n    Traceback (most recent call last):\n    AttributeError: 'Foo' object has no attribute 'bar'\n\nSlotted classes have pickling support:\n\n.. code:: python\n\n    >>> from slotted import Slotted\n    >>> from pickle import dumps, loads\n    >>> class Foo(Slotted):\n    ...     __slots__ = (\"bar\", \"foobar\")\n    ...\n    >>> foo = Foo()\n    >>> foo.bar = 1\n    >>> foo.foobar = 2\n    >>> another_foo = loads(dumps(foo))\n    >>> print(another_foo.bar, another_foo.foobar)\n    (1, 2)\n\nSlotted classes can be mixed with regular classes as long as they and all of their bases\nimplement ``__slots__``.\n\n.. code:: python\n\n    >>> from slotted import Slotted\n    >>> class Bar(object):\n    ...     __slots__ = (\"bar\",)\n    >>> class Foo(Bar, Slotted):\n    ...     __slots__ = (\"foo\",)\n    ...\n    >>> foo = Foo()\n\nIf any non-``Slotted`` class anywhere in the chain does not implement ``__slots__``, a\n``TypeError`` exception is raised.\n\n.. code:: python\n\n    >>> from slotted import Slotted\n    >>> class Bar(object):\n    ...     pass\n    >>> class Foo(Bar, Slotted):\n    ...     __slots__ = (\"foo\",)\n    ...\n    TypeError: base 'Bar' does not enforce '__slots__'\n\n``Slotted`` behavior can also be achieved by using the ``SlottedMeta`` metaclass.\n\n.. code:: python\n\n    >>> from slotted import SlottedMeta\n    >>> from six import add_metaclass\n    >>> @add_metaclass(SlottedMeta)\n    ... class Foo(object):\n    ...     pass  # implicit declaration of __slots__ = ()\n    ...\n    >>> foo = Foo()\n    >>> foo.bar = 1\n    Traceback (most recent call last):\n    AttributeError: 'Foo' object has no attribute 'bar'\n\nIn Python 3, ``Slotted`` can be mixed with ``collections.abc`` classes without any\nissues. However, those classes do not define slots in Python 2. In order to work around\nthat limitation, you can utilize automatically converted ``SlottedABC`` classes like so:\n\n.. code:: python\n\n    >>> from collections import Mapping\n    >>> from slotted import SlottedMapping\n    >>> issubclass(SlottedMapping, Mapping)\n    True\n    >>> class FooMapping(SlottedMapping):\n    ...     __slots__ = (\"_d\",)\n    ...     def __init__(self):\n    ...         self._d = {\"a\": 1, \"b\": 2}\n    ...     def __getitem__(self, item):\n    ...         return self._d[item]\n    ...     def __iter__(self):\n    ...         for key in self._d:\n    ...             yield key\n    ...     def __len__(self):\n    ...         return len(self._d)\n    ...\n    >>> m = FooMapping()\n    >>> isinstance(m, Mapping)\n    True\n    >>> print(m[\"a\"])\n    1\n    >>> m.bar = \"foo\"\n    Traceback (most recent call last):\n    AttributeError: 'FooMapping' object has no attribute 'bar'", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brunonicko/slotted", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "slotted", "package_url": "https://pypi.org/project/slotted/", "platform": "", "project_url": "https://pypi.org/project/slotted/", "project_urls": {"Homepage": "https://github.com/brunonicko/slotted"}, "release_url": "https://pypi.org/project/slotted/0.0.3/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Enforces usage of '__slots__' for python classes", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Enforces usage of <tt>__slots__</tt> for python classes and provides pickling capabilities.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>When defining a <tt>Slotted</tt> class with no <tt>__slots__</tt> declaration, it assumes it has\nempty slots, which is equivalent of declaring <tt>__slots__ = ()</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">slotted</span> <span class=\"kn\">import</span> <span class=\"n\">Slotted</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">Slotted</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>  <span class=\"c1\"># implicit declaration of __slots__ = ()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">'Foo'</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">'bar'</span>\n</pre>\n<p>Slotted classes have pickling support:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">slotted</span> <span class=\"kn\">import</span> <span class=\"n\">Slotted</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pickle</span> <span class=\"kn\">import</span> <span class=\"n\">dumps</span><span class=\"p\">,</span> <span class=\"n\">loads</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">Slotted</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"bar\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">foobar</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">another_foo</span> <span class=\"o\">=</span> <span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">another_foo</span><span class=\"o\">.</span><span class=\"n\">bar</span><span class=\"p\">,</span> <span class=\"n\">another_foo</span><span class=\"o\">.</span><span class=\"n\">foobar</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>Slotted classes can be mixed with regular classes as long as they and all of their bases\nimplement <tt>__slots__</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">slotted</span> <span class=\"kn\">import</span> <span class=\"n\">Slotted</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"bar\"</span><span class=\"p\">,)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">,</span> <span class=\"n\">Slotted</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n</pre>\n<p>If any non-<tt>Slotted</tt> class anywhere in the chain does not implement <tt>__slots__</tt>, a\n<tt>TypeError</tt> exception is raised.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">slotted</span> <span class=\"kn\">import</span> <span class=\"n\">Slotted</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">Bar</span><span class=\"p\">,</span> <span class=\"n\">Slotted</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,)</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">base</span> <span class=\"s1\">'Bar'</span> <span class=\"n\">does</span> <span class=\"ow\">not</span> <span class=\"n\">enforce</span> <span class=\"s1\">'__slots__'</span>\n</pre>\n<p><tt>Slotted</tt> behavior can also be achieved by using the <tt>SlottedMeta</tt> metaclass.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">slotted</span> <span class=\"kn\">import</span> <span class=\"n\">SlottedMeta</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">six</span> <span class=\"kn\">import</span> <span class=\"n\">add_metaclass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@add_metaclass</span><span class=\"p\">(</span><span class=\"n\">SlottedMeta</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>  <span class=\"c1\"># implicit declaration of __slots__ = ()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">'Foo'</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">'bar'</span>\n</pre>\n<p>In Python 3, <tt>Slotted</tt> can be mixed with <tt>collections.abc</tt> classes without any\nissues. However, those classes do not define slots in Python 2. In order to work around\nthat limitation, you can utilize automatically converted <tt>SlottedABC</tt> classes like so:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">Mapping</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">slotted</span> <span class=\"kn\">import</span> <span class=\"n\">SlottedMapping</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">SlottedMapping</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">FooMapping</span><span class=\"p\">(</span><span class=\"n\">SlottedMapping</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"_d\"</span><span class=\"p\">,)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"a\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_d</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_d</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"k\">yield</span> <span class=\"n\">key</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_d</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">FooMapping</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">Mapping</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s2\">\"a\"</span><span class=\"p\">])</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"s2\">\"foo\"</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"ne\">AttributeError</span><span class=\"p\">:</span> <span class=\"s1\">'FooMapping'</span> <span class=\"nb\">object</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">attribute</span> <span class=\"s1\">'bar'</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6881414, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7508e36901a2075ed36c204267d8540a", "sha256": "213fa3fab12caca2c69327604c611b118b4796df86a5d8df8ad823b554911651"}, "downloads": -1, "filename": "slotted-0.0.1.tar.gz", "has_sig": false, "md5_digest": "7508e36901a2075ed36c204267d8540a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4499, "upload_time": "2020-03-23T17:39:16", "upload_time_iso_8601": "2020-03-23T17:39:16.678486Z", "url": "https://files.pythonhosted.org/packages/3b/36/64642ea0d9b6f5b5a9fdbdbdaa659da260ad475d68e056b0c09d87b09874/slotted-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "a8e1d96cfdf1a3a7f0b2efc5e0e55759", "sha256": "4efba609139d897c1433e662d7377b5406d9439441990c189cf14bd386cf0741"}, "downloads": -1, "filename": "slotted-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a8e1d96cfdf1a3a7f0b2efc5e0e55759", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4497, "upload_time": "2020-03-23T18:20:50", "upload_time_iso_8601": "2020-03-23T18:20:50.811910Z", "url": "https://files.pythonhosted.org/packages/12/15/4abf86da9987c32e121e4dd27b3ccc62dc84eb6dd35980d0af77674eab8c/slotted-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d489e94b7dfef0750407ce9dfe11bf66", "sha256": "15f333cf46dc761b5d30eeba65f7b985eb629c8cc110a9dcd2c1cb04b8fca46e"}, "downloads": -1, "filename": "slotted-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d489e94b7dfef0750407ce9dfe11bf66", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4667, "upload_time": "2020-03-25T15:17:01", "upload_time_iso_8601": "2020-03-25T15:17:01.962196Z", "url": "https://files.pythonhosted.org/packages/d2/25/146ce4119329321bcfa9d862bd487efca28b9c925a9f9f3dc3525afced06/slotted-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d489e94b7dfef0750407ce9dfe11bf66", "sha256": "15f333cf46dc761b5d30eeba65f7b985eb629c8cc110a9dcd2c1cb04b8fca46e"}, "downloads": -1, "filename": "slotted-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d489e94b7dfef0750407ce9dfe11bf66", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 4667, "upload_time": "2020-03-25T15:17:01", "upload_time_iso_8601": "2020-03-25T15:17:01.962196Z", "url": "https://files.pythonhosted.org/packages/d2/25/146ce4119329321bcfa9d862bd487efca28b9c925a9f9f3dc3525afced06/slotted-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:16 2020"}