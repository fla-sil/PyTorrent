{"info": {"author": "John Scrudato", "author_email": "john@thelegal.engineer", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "### What does it do?\n\nOCRUSREX is a simple, no-frills Python 3 library to take a PDF (either by path or as a file-like object), convert\nit to images, run it through Tesseract 4 and return it as a PDF.\n\n### Why Another OCR Library?\n\nThere are several excellent packages out there to OCR PDFs in Python, but their licensing can be problematic\nfor potential use in enterprise applications. Also, many of them had way more features than I needed or wanted.\nI just needed something to take a PDF, OCR it and give it back to me, without the overhead and potential licensing\nheadaches of other options out there.\n\n### Install\n\n`pip install ocrusrex`\n\nIn addition to installing the required python dependencies, you'll also need tesseract v4. You'll also want to install\nthe appropriate training data. OCRUSREX is configured to use the \"best\" english LSTM training dataset. You can change this\nconfig to use fast or standard quality by overriding the tesseract_config argument. Using best improves accuracy by about \n1 - 3 percentage points based on my benchmarking with a performance hit of ~ 20% more time per page. On a VirtualBox dev\nenvironment, that meant going from 2 seconds to 2.38 seconds per page when using byte obj input and out (string paths are\nmuch slower). I was willing to take that tradeoff as I hate having re-OCR things, but your mileage may vary.\n\nIf you want to use tesseract's \"best\" training sets, you will likely need to install it for your \nsystem. See a description of the different Tesseract models in the Tesseract Docs:\n\n* https://tesseract-ocr.github.io/tessdoc/Data-Files.html#updated-data-files-for-version-400-september-15-2017\n\n### Dependencies\n\n###### PRODUCTION\n\nOCRUSREX relies on four core libraries, all with MIT-like\nlicenses:\n\n1) pytesseract (MIT)\n2) PyPDF2 (MIT-like)\n3) Pillow (MIT-like)\n4) uqfoundation/multiprocess (MIT-like)\n\nObviously you will need to have already installed Tesseract 4. Please refer to the Tesseract documentation (or pytesseract docs).\n\n###### TESTS\n\nThe tests also rely on:\n\n1) python-levenshtein\n2) tika-python.\n\nNeither are required for the core library to work.\n\n### Usage\n\n###### Single Threaded\n\n    from OCRUSREX import ocrusrex\n    ocrusrex.OCRPDF(source=\"\", targetPath=None, page=None, nice=5, verbose=False, tesseract_config='--oem 1 -l eng -c preserve_interword_spaces=1 textonly_pdf=1')\n\n_RETURNS_: fasly if the task fails or truthy if it succeeds. If you specify a targetPath, returns True to indicate success\nor false to indicate failure. If you don't specify a targetPath, returns a bytes obj on success or None on failure. \n\n###### Multi Threaded\n\nOCRUSREX supports multithreaded execution via the core Python 3 multithreading library. Based on intial testing, this \nexecution mode enables you to divide OCR time per page vs singlethreaded by the number of threads you specify.\nFor example, assuming you have the requisite # of cores, running threads=4 will divide ocr time per page by 4, effectively\nreducing OCR time by 75%. Multithreading performance is almost identical to running seperate processes. This is likely due\nto OCRUSREX always calling separate instances of tesseract, so it's effectively callings separate processes whether you choose\nmultithreaded or multiprocessed execution.\n\n    from OCRUSREX import ocrusrex\n    ocrusrex.Multithreaded_OCRPDF(source=\"\", targetPath=None, processes=4, nice=5, verbose=False, tesseract_config='--oem 1 -l eng -c preserve_interword_spaces=1 textonly_pdf=1')\n\n_RETURNS_: fasly if the task fails or truthy if it succeeds. If you specify a targetPath, returns True to indicate success\nor false to indicate failure. If you don't specify a targetPath, returns a bytes obj on success or None on failure. \n\n###### Multi Processed\n\nOCRUSREX supports multiprocessed execution via the uqfoundation/multiprocess library. Based on intial testing, this \nexecution mode enables you to divide OCR time per page vs singlethreaded by the number of processes you specify.\nFor example, assuming you have the requisite # of cores, running processes=4 will divide ocr time per page by 4, effectively\nreducing OCR time by 75%. This method may be removed in the future as it appears to offer no real performance advantages\nover using multithreading, yet it comes at the expense of an additional dependency.\n\n    from OCRUSREX import ocrusrex\n    ocrusrex.Multiprocessed_OCRPDF(source=\"\", targetPath=None, threads=4, nice=5, verbose=False, tesseract_config='--oem 1 -l eng -c preserve_interword_spaces=1 textonly_pdf=1')\n\n_RETURNS_: fasly if the task fails or truthy if it succeeds. If you specify a targetPath, returns True to indicate success\nor false to indicate failure. If you don't specify a targetPath, returns a bytes obj on success or None on failure. \n\n##### OPTIONS:\n\n* **processes** = 4 [**_Multiprocessed Only_**]\n  * How many processes should be spawned at one time? Default is 4. Initial guidance is this should not be > your # of effective cores. \n\n* **threads** = 4 [**_Multithreaded Only_**]\n  * How many threads should be used at once. Default is 4. Because the threads spawn new tesseract instances, the multithreaded performance is quite similiar to multiprocessed.\n\n* **source** = \"\"\n  * What is the target PDF to be OCRed? This can be a String containing a valid path to a pdf or a file-like\nobject.\n\n* **targetPath** = None\n  * Where should the OCRed PDF be saved? If you don't provide a value, the pdf will be returned as a byte\n    object.\n\n* **page** = None [**_Singlethreaded Only_**]\n  * If you provide an integer value, only a single page will be OCRed and returned. If you leave this as None\n            the entire PDF will be OCRed. **PDF page starting index # is 1 NOT 0**.\n\n* **nice** = 5\n   * Sets the priority of the thread in Unix-like operating systems. 5 is slightly elevated.\n\n* **verbose** = False\n   * If this is set to True, show messages in the console.\n\n* **tesseract_config** = '--oem 1 --psm 6 -l best/eng -c preserve_interword_spaces=1'\n   * This will be passed to pytesseract as the config option. These are the command line arguments\n            you would pass directly to tesseract were you calling it directly. The defaults here are\n            optimized for accuracy but require you download an additional tesseract data file (the \"best\" one).\n            This comes at the expense of speed.\n\n* **tesseract_config** = 'print'\n   * Pass a method in for this argument to have verbose OCR message passed to this function as the first argument. \n   If you leave it as None, standard print() function is used.\n\n* **logger** = None\n   * If you want to pass a specific logger in to expose inner verbose messages (particularly for multithreaded and multiprocessed versions),\n   Pass the logger object in here. It must support .info and .error calls. If you leave this as None, verbose uses standard Python print() function.\n\n### FUTURE\n\nI am pretty happy with the baseline performance at this point. The tool can OCR PDFs at a rate of 1 page every 2 seconds.\n\nThe most important next feature is reducing the output file size. Output PDFs are currently substantially larger than the\nsource files. I need to do some experimentation to see if this can be done AFTER feeding the high-quality images to Tesseract.\n\nAfter that, it would be good to do some more error checking and other automated cleanup. Other libraries out there have\nsubstantial codebases dedicated just to these kinds of cleanup tasks. For now, I expect I'll add these types of features\norganically over time as I discover particularly hairy situations that need to be addressed or where I need some type of output\nfor myself. Contributions are welcome!\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/JSv4/OCRUSREX", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "OCRUSREX", "package_url": "https://pypi.org/project/OCRUSREX/", "platform": "", "project_url": "https://pypi.org/project/OCRUSREX/", "project_urls": {"Homepage": "https://github.com/JSv4/OCRUSREX"}, "release_url": "https://pypi.org/project/OCRUSREX/0.2.2/", "requires_dist": ["pillow", "pypdf2", "pdf2image", "pytesseract", "multiprocess", "python-Levenshtein", "tika"], "requires_python": ">=3.6", "summary": "OCRUSREX takes a PDF (either by path or as a file-like object) and makes it searchable using Tesseract 4. It has an enterprise-friendly license.", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h3>What does it do?</h3>\n<p>OCRUSREX is a simple, no-frills Python 3 library to take a PDF (either by path or as a file-like object), convert\nit to images, run it through Tesseract 4 and return it as a PDF.</p>\n<h3>Why Another OCR Library?</h3>\n<p>There are several excellent packages out there to OCR PDFs in Python, but their licensing can be problematic\nfor potential use in enterprise applications. Also, many of them had way more features than I needed or wanted.\nI just needed something to take a PDF, OCR it and give it back to me, without the overhead and potential licensing\nheadaches of other options out there.</p>\n<h3>Install</h3>\n<p><code>pip install ocrusrex</code></p>\n<p>In addition to installing the required python dependencies, you'll also need tesseract v4. You'll also want to install\nthe appropriate training data. OCRUSREX is configured to use the \"best\" english LSTM training dataset. You can change this\nconfig to use fast or standard quality by overriding the tesseract_config argument. Using best improves accuracy by about\n1 - 3 percentage points based on my benchmarking with a performance hit of ~ 20% more time per page. On a VirtualBox dev\nenvironment, that meant going from 2 seconds to 2.38 seconds per page when using byte obj input and out (string paths are\nmuch slower). I was willing to take that tradeoff as I hate having re-OCR things, but your mileage may vary.</p>\n<p>If you want to use tesseract's \"best\" training sets, you will likely need to install it for your\nsystem. See a description of the different Tesseract models in the Tesseract Docs:</p>\n<ul>\n<li><a href=\"https://tesseract-ocr.github.io/tessdoc/Data-Files.html#updated-data-files-for-version-400-september-15-2017\" rel=\"nofollow\">https://tesseract-ocr.github.io/tessdoc/Data-Files.html#updated-data-files-for-version-400-september-15-2017</a></li>\n</ul>\n<h3>Dependencies</h3>\n<h6>PRODUCTION</h6>\n<p>OCRUSREX relies on four core libraries, all with MIT-like\nlicenses:</p>\n<ol>\n<li>pytesseract (MIT)</li>\n<li>PyPDF2 (MIT-like)</li>\n<li>Pillow (MIT-like)</li>\n<li>uqfoundation/multiprocess (MIT-like)</li>\n</ol>\n<p>Obviously you will need to have already installed Tesseract 4. Please refer to the Tesseract documentation (or pytesseract docs).</p>\n<h6>TESTS</h6>\n<p>The tests also rely on:</p>\n<ol>\n<li>python-levenshtein</li>\n<li>tika-python.</li>\n</ol>\n<p>Neither are required for the core library to work.</p>\n<h3>Usage</h3>\n<h6>Single Threaded</h6>\n<pre><code>from OCRUSREX import ocrusrex\nocrusrex.OCRPDF(source=\"\", targetPath=None, page=None, nice=5, verbose=False, tesseract_config='--oem 1 -l eng -c preserve_interword_spaces=1 textonly_pdf=1')\n</code></pre>\n<p><em>RETURNS</em>: fasly if the task fails or truthy if it succeeds. If you specify a targetPath, returns True to indicate success\nor false to indicate failure. If you don't specify a targetPath, returns a bytes obj on success or None on failure.</p>\n<h6>Multi Threaded</h6>\n<p>OCRUSREX supports multithreaded execution via the core Python 3 multithreading library. Based on intial testing, this\nexecution mode enables you to divide OCR time per page vs singlethreaded by the number of threads you specify.\nFor example, assuming you have the requisite # of cores, running threads=4 will divide ocr time per page by 4, effectively\nreducing OCR time by 75%. Multithreading performance is almost identical to running seperate processes. This is likely due\nto OCRUSREX always calling separate instances of tesseract, so it's effectively callings separate processes whether you choose\nmultithreaded or multiprocessed execution.</p>\n<pre><code>from OCRUSREX import ocrusrex\nocrusrex.Multithreaded_OCRPDF(source=\"\", targetPath=None, processes=4, nice=5, verbose=False, tesseract_config='--oem 1 -l eng -c preserve_interword_spaces=1 textonly_pdf=1')\n</code></pre>\n<p><em>RETURNS</em>: fasly if the task fails or truthy if it succeeds. If you specify a targetPath, returns True to indicate success\nor false to indicate failure. If you don't specify a targetPath, returns a bytes obj on success or None on failure.</p>\n<h6>Multi Processed</h6>\n<p>OCRUSREX supports multiprocessed execution via the uqfoundation/multiprocess library. Based on intial testing, this\nexecution mode enables you to divide OCR time per page vs singlethreaded by the number of processes you specify.\nFor example, assuming you have the requisite # of cores, running processes=4 will divide ocr time per page by 4, effectively\nreducing OCR time by 75%. This method may be removed in the future as it appears to offer no real performance advantages\nover using multithreading, yet it comes at the expense of an additional dependency.</p>\n<pre><code>from OCRUSREX import ocrusrex\nocrusrex.Multiprocessed_OCRPDF(source=\"\", targetPath=None, threads=4, nice=5, verbose=False, tesseract_config='--oem 1 -l eng -c preserve_interword_spaces=1 textonly_pdf=1')\n</code></pre>\n<p><em>RETURNS</em>: fasly if the task fails or truthy if it succeeds. If you specify a targetPath, returns True to indicate success\nor false to indicate failure. If you don't specify a targetPath, returns a bytes obj on success or None on failure.</p>\n<h5>OPTIONS:</h5>\n<ul>\n<li>\n<p><strong>processes</strong> = 4 [<strong><em>Multiprocessed Only</em></strong>]</p>\n<ul>\n<li>How many processes should be spawned at one time? Default is 4. Initial guidance is this should not be &gt; your # of effective cores.</li>\n</ul>\n</li>\n<li>\n<p><strong>threads</strong> = 4 [<strong><em>Multithreaded Only</em></strong>]</p>\n<ul>\n<li>How many threads should be used at once. Default is 4. Because the threads spawn new tesseract instances, the multithreaded performance is quite similiar to multiprocessed.</li>\n</ul>\n</li>\n<li>\n<p><strong>source</strong> = \"\"</p>\n<ul>\n<li>What is the target PDF to be OCRed? This can be a String containing a valid path to a pdf or a file-like\nobject.</li>\n</ul>\n</li>\n<li>\n<p><strong>targetPath</strong> = None</p>\n<ul>\n<li>Where should the OCRed PDF be saved? If you don't provide a value, the pdf will be returned as a byte\nobject.</li>\n</ul>\n</li>\n<li>\n<p><strong>page</strong> = None [<strong><em>Singlethreaded Only</em></strong>]</p>\n<ul>\n<li>If you provide an integer value, only a single page will be OCRed and returned. If you leave this as None\nthe entire PDF will be OCRed. <strong>PDF page starting index # is 1 NOT 0</strong>.</li>\n</ul>\n</li>\n<li>\n<p><strong>nice</strong> = 5</p>\n<ul>\n<li>Sets the priority of the thread in Unix-like operating systems. 5 is slightly elevated.</li>\n</ul>\n</li>\n<li>\n<p><strong>verbose</strong> = False</p>\n<ul>\n<li>If this is set to True, show messages in the console.</li>\n</ul>\n</li>\n<li>\n<p><strong>tesseract_config</strong> = '--oem 1 --psm 6 -l best/eng -c preserve_interword_spaces=1'</p>\n<ul>\n<li>This will be passed to pytesseract as the config option. These are the command line arguments\nyou would pass directly to tesseract were you calling it directly. The defaults here are\noptimized for accuracy but require you download an additional tesseract data file (the \"best\" one).\nThis comes at the expense of speed.</li>\n</ul>\n</li>\n<li>\n<p><strong>tesseract_config</strong> = 'print'</p>\n<ul>\n<li>Pass a method in for this argument to have verbose OCR message passed to this function as the first argument.\nIf you leave it as None, standard print() function is used.</li>\n</ul>\n</li>\n<li>\n<p><strong>logger</strong> = None</p>\n<ul>\n<li>If you want to pass a specific logger in to expose inner verbose messages (particularly for multithreaded and multiprocessed versions),\nPass the logger object in here. It must support .info and .error calls. If you leave this as None, verbose uses standard Python print() function.</li>\n</ul>\n</li>\n</ul>\n<h3>FUTURE</h3>\n<p>I am pretty happy with the baseline performance at this point. The tool can OCR PDFs at a rate of 1 page every 2 seconds.</p>\n<p>The most important next feature is reducing the output file size. Output PDFs are currently substantially larger than the\nsource files. I need to do some experimentation to see if this can be done AFTER feeding the high-quality images to Tesseract.</p>\n<p>After that, it would be good to do some more error checking and other automated cleanup. Other libraries out there have\nsubstantial codebases dedicated just to these kinds of cleanup tasks. For now, I expect I'll add these types of features\norganically over time as I discover particularly hairy situations that need to be addressed or where I need some type of output\nfor myself. Contributions are welcome!</p>\n\n          </div>"}, "last_serial": 6954051, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "5341ef534f3df98e1fad6b639d32071b", "sha256": "edb313659d7a5b01b542ae8fbd235f605144652a60cae405fd5bfa8bc355f54d"}, "downloads": -1, "filename": "OCRUSREX-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5341ef534f3df98e1fad6b639d32071b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4556, "upload_time": "2020-03-27T04:29:00", "upload_time_iso_8601": "2020-03-27T04:29:00.202313Z", "url": "https://files.pythonhosted.org/packages/ac/f7/1b6d7ecab2c028c92d0c6de3544e1a1ac922ade25935f1f1dbead4b41b34/OCRUSREX-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "810e00b31d4ea815858280fdb2b47cd7", "sha256": "2201822c3c83f7631041dff51d23e7e5c7b986878bfd6c69f53d5cea2575791e"}, "downloads": -1, "filename": "OCRUSREX-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "810e00b31d4ea815858280fdb2b47cd7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6672, "upload_time": "2020-03-29T03:46:59", "upload_time_iso_8601": "2020-03-29T03:46:59.360876Z", "url": "https://files.pythonhosted.org/packages/6d/5a/ca4c406843d6006b42c438a240519e1acbd83b3140f3da9f8594d37b644b/OCRUSREX-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8572bfc623e8cb31f843be5c7864cec2", "sha256": "cc3743077eb887824befdd1ab8490d402e1b1a457bad993b60d5747a1d9dbc91"}, "downloads": -1, "filename": "OCRUSREX-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8572bfc623e8cb31f843be5c7864cec2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5641, "upload_time": "2020-03-29T03:47:00", "upload_time_iso_8601": "2020-03-29T03:47:00.142287Z", "url": "https://files.pythonhosted.org/packages/41/03/c0a89a05bccca9abb79b0e4dbfdfb51cf8e0b9f8d6a7bf956b3d324eed7f/OCRUSREX-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "1d7c3d2d6c7c6d5a3767e3496e85c8e8", "sha256": "a48745c992d41a913fcdf6147c00f3b15ee97d71a825ef5964a7333e3ecb1e0a"}, "downloads": -1, "filename": "OCRUSREX-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1d7c3d2d6c7c6d5a3767e3496e85c8e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6783, "upload_time": "2020-03-31T04:39:10", "upload_time_iso_8601": "2020-03-31T04:39:10.736738Z", "url": "https://files.pythonhosted.org/packages/4e/0a/25b48457f72038b754e6395740f106ef431e7c2326a26dd151ccfbdbc613/OCRUSREX-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6e8f71df2a8d2dc365ee97f873969552", "sha256": "44b07bc2aa24c3e84e30c355f16db892922befdef43e7766d56bc7bdc10e695c"}, "downloads": -1, "filename": "OCRUSREX-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6e8f71df2a8d2dc365ee97f873969552", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5761, "upload_time": "2020-03-31T04:39:12", "upload_time_iso_8601": "2020-03-31T04:39:12.310812Z", "url": "https://files.pythonhosted.org/packages/23/b9/a9d3ea13a5bd2c8b796c8a364c8b77a2fd87d27dcf29d8813ff0eac3bc8a/OCRUSREX-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "79426663573c046a1768437a13001c2f", "sha256": "4c2a3f9612784bb0408840673b0781045270ca299fcd2af72f833a6054e0f67f"}, "downloads": -1, "filename": "OCRUSREX-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "79426663573c046a1768437a13001c2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7412, "upload_time": "2020-04-05T05:22:09", "upload_time_iso_8601": "2020-04-05T05:22:09.542388Z", "url": "https://files.pythonhosted.org/packages/87/3a/5b86c53165a04f633a60624f4908ad028037fd59914bc5f6d471e3719704/OCRUSREX-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37edde43e672440ded6c9052269ef900", "sha256": "7105fc6add2023ced2f7723209d188f6929576ddf44aa78e8c797b5763c9356d"}, "downloads": -1, "filename": "OCRUSREX-0.2.2.tar.gz", "has_sig": false, "md5_digest": "37edde43e672440ded6c9052269ef900", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6478, "upload_time": "2020-04-05T05:22:11", "upload_time_iso_8601": "2020-04-05T05:22:11.019629Z", "url": "https://files.pythonhosted.org/packages/ad/74/63cd2d475fe6eb19799236b9535f919f71a17b224856f3ced2e72eed5cda/OCRUSREX-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "79426663573c046a1768437a13001c2f", "sha256": "4c2a3f9612784bb0408840673b0781045270ca299fcd2af72f833a6054e0f67f"}, "downloads": -1, "filename": "OCRUSREX-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "79426663573c046a1768437a13001c2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7412, "upload_time": "2020-04-05T05:22:09", "upload_time_iso_8601": "2020-04-05T05:22:09.542388Z", "url": "https://files.pythonhosted.org/packages/87/3a/5b86c53165a04f633a60624f4908ad028037fd59914bc5f6d471e3719704/OCRUSREX-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37edde43e672440ded6c9052269ef900", "sha256": "7105fc6add2023ced2f7723209d188f6929576ddf44aa78e8c797b5763c9356d"}, "downloads": -1, "filename": "OCRUSREX-0.2.2.tar.gz", "has_sig": false, "md5_digest": "37edde43e672440ded6c9052269ef900", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6478, "upload_time": "2020-04-05T05:22:11", "upload_time_iso_8601": "2020-04-05T05:22:11.019629Z", "url": "https://files.pythonhosted.org/packages/ad/74/63cd2d475fe6eb19799236b9535f919f71a17b224856f3ced2e72eed5cda/OCRUSREX-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:39 2020"}