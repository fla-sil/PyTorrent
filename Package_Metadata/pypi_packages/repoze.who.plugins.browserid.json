{"info": {"author": "Mozilla Services", "author_email": "services-dev@mozilla.org", "bugtrack_url": null, "classifiers": ["Programming Language :: Python"], "description": "============================\nrepoze.who.plugins.browserid\n============================\n\nThis is repoze.who plugin for authentication via Mozilla's Persona project,\na.k.a BrowserID:\n\n    https://persona.org/\n\nIt supports verification of BrowserID assertions using the PyBrowserID client\nlibrary.  Currently PyBrowserID defaults to verifying assertions by posting\nthem to the persona.org verifier servive, but it also has preliminary support\nfor verifying assertions locally.  As the protocol becomes more stable then\nlocal verification will become the default.\n\nConfiguration of the plugin can be done from the standard repoze.who config\nfile like so::\n\n    [plugin:browserid]\n    use = repoze.who.plugins.browserid:make_plugin\n    audiences = www.mysite.com\n    rememberer_name = authtkt\n\n    [plugin:authtkt]\n    use = repoze.who.plugins.auth_tkt:make_plugin\n    secret = My Special Secret\n\n    [identifiers]\n    plugins = authtkt browserid\n\n    [authenticators]\n    plugins = authtkt browserid\n\n    [challengers]\n    plugins = browserid\n    \nNote that we have paired the BrowserID plugin with the standard AuthTkt plugin\nso that it can remember the user's login across requests.\n\n\nCustomization\n=============\n\nThe following settings can be specified in the configuration file to customize\nthe behaviour of the plugin:\n\n  :audiences:   A space-separated list of acceptable hostnames or glob patterns\n                for the BrowserID assertion audience.  Any assertion whose\n                audience does not match an item in the list will be rejected.\n\n                You must specify a value for this setting, since it is integral\n                to the security of BrowserID.  See the Security Notes section\n                below for more details.\n\n  :rememberer_name:   The name of another repoze.who plugin which should be\n                      called to remember/forget the authentication.  This \n                      would typically be a signed-cookie implementation such\n                      as the built-in auth_tkt plugin.  If unspecificed or \n                      None then authentication will not be remembered.\n\n  :postback_url:   The URL to which BrowserID credentials should be sent\n                   for validation.  The default value is hopefully conflict\n                   free: /repoze.who.plugins.browserid.postback.\n\n  :assertion_field:   The name of the POST form field in which to find the\n                      BrowserID assertion.  The default value is \"assertion\".\n\n  :came_from_field:   The name of the POST form field in which to find the\n                      referring page, to which the user will be redirected\n                      after processing their login.  The default value is\n                      \"came_from\".\n\n  :csrf_field:   The name of the POST form field in which to find the CSRF\n                 protection token.  The default value is \"csrf_token\".  If\n                 set to the empty string then CSRF checking is disabled.\n\n  :csrf_cookie_name:   The name of the cookie in which to set and find the\n                       CSRF protection token.  The default cookie name is\n                       \"browserid_csrf_token\".  If set to the empty string\n                       then CSRF checking is disabled.\n\n  :challenge_body:   The location at which to find the HTML for the login\n                     page, either as a dotted python reference or a filename.\n                     The contained HTML may use python string interpolation\n                     syntax to include details of the challenge, e.g. use\n                     %(csrf_token)s to include the CSRF token.\n\n  :verifier:   The PyVEP Verifier object to use for checking assertions, or\n               the dotted python name of such an object.  The default value\n               is vep.RemoteVerifier() which should be suitable for most\n               purposes.\n\n  :check_https:   Boolean indicating whether to reject login attempts over\n                  enencrypted connections.  The default value is False.\n\n  :check_referer:   Boolean indicating whether to reject login attempts where\n                    the referer header does not match the expected audience.\n                    The default is to perform this check for secure connections\n                    only.\n\n\nSecurity Notes\n==============\n\nCSRF Protection\n---------------\n\nThis plugin attempts to provide some basic protection against login-CSRF \nattacks as described by Barth et. al. in \"Robust Defenses for Cross-Site\nRequest Forgery\":\n\n    http://seclab.stanford.edu/websec/csrf/csrf.pdf\n\nIn the terminology of the above paper, it combines a session-independent\nnonce with strict referer checking for secure connections.  You can tweak\nthe protection by adjusting the \"csrf_cookie_name\", \"check_referer\" and\n\"check_https\" settings.\n\n\nAudience Checking\n-----------------\n\nBrowserID uses the notion of an \"audience\" to protect against stolen logins.\nThe audience ties a BrowserID assertion to a specific host, so that an \nattacker can't collect assertions on one site and then use them to log in to\nanother.\n\nThis plugin performs strict audience checking by default.  You must provide\na list of acceptable audience string when creating the plugin, and they should\nbe specific to your application.  For example, if your application serves\nrequests on three different hostnames http://mysite.com, http://www.mysite.com\nand http://uploads.mysite.com, you might provide::\n\n    [plugin:browserid]\n    use = repoze.who.plugins.browserid:make_plugin\n    audiences = mysite.com *.mysite.com\n\nIf your application does strict checking of the HTTP Host header, then you can\ninstruct the plugin to use the Host header as the audience by leaving the list\nblank::\n\n    [plugin:browserid]\n    use = repoze.who.plugins.browserid:make_plugin\n    audiences =\n\nThis is not the default behaviour since it may be insecure on some systems.\n\n\n0.5.0 - 2012-09-11\n==================\n\n * Fix javascript to use navigator.id.get() instead of the deprecated\n   navigator.id.getVerifiedEmail.\n\n\n0.4.0 - 2012-07-17\n==================\n\n * Migrate from PyVEP to PyBrowserID.\n\n\n0.3.1 - 2012-01-30\n==================\n\n * Don't choke on unicode in challenge_body; thanks catlee.\n * Update license to MPL 2.0.\n\n\n0.3.0 - 2012-01-06\n==================\n\n * Update for API compatability with PyVEP>=0.3.0.\n\n\n0.2.1 - 2011-12-07\n==================\n\n * Update for API compatability with PyVEP>=0.2.0.\n\n\n0.2.0 - 2011-12-01\n==================\n\n * Refactor verification code into a standand-alone library named\n   \"PyVEP\", which is now a dependency.\n\n\n0.1.0 - 2011-11-15\n==================\n\n * Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mozilla-services/repoze.who.plugins.browserid", "keywords": "authentication repoze browserid", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "repoze.who.plugins.browserid", "package_url": "https://pypi.org/project/repoze.who.plugins.browserid/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/repoze.who.plugins.browserid/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/mozilla-services/repoze.who.plugins.browserid"}, "release_url": "https://pypi.org/project/repoze.who.plugins.browserid/0.5.0/", "requires_dist": null, "requires_python": null, "summary": "repoze.who.plugins.browserid", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is repoze.who plugin for authentication via Mozilla\u2019s Persona project,\na.k.a BrowserID:</p>\n<blockquote>\n<a href=\"https://persona.org/\" rel=\"nofollow\">https://persona.org/</a></blockquote>\n<p>It supports verification of BrowserID assertions using the PyBrowserID client\nlibrary.  Currently PyBrowserID defaults to verifying assertions by posting\nthem to the persona.org verifier servive, but it also has preliminary support\nfor verifying assertions locally.  As the protocol becomes more stable then\nlocal verification will become the default.</p>\n<p>Configuration of the plugin can be done from the standard repoze.who config\nfile like so:</p>\n<pre>[plugin:browserid]\nuse = repoze.who.plugins.browserid:make_plugin\naudiences = www.mysite.com\nrememberer_name = authtkt\n\n[plugin:authtkt]\nuse = repoze.who.plugins.auth_tkt:make_plugin\nsecret = My Special Secret\n\n[identifiers]\nplugins = authtkt browserid\n\n[authenticators]\nplugins = authtkt browserid\n\n[challengers]\nplugins = browserid\n</pre>\n<p>Note that we have paired the BrowserID plugin with the standard AuthTkt plugin\nso that it can remember the user\u2019s login across requests.</p>\n<div id=\"customization\">\n<h2>Customization</h2>\n<p>The following settings can be specified in the configuration file to customize\nthe behaviour of the plugin:</p>\n<blockquote>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>audiences:</th><td><p>A space-separated list of acceptable hostnames or glob patterns\nfor the BrowserID assertion audience.  Any assertion whose\naudience does not match an item in the list will be rejected.</p>\n<p>You must specify a value for this setting, since it is integral\nto the security of BrowserID.  See the Security Notes section\nbelow for more details.</p>\n</td>\n</tr>\n<tr><th>rememberer_name:</th></tr>\n<tr><td>\u00a0</td><td><p>The name of another repoze.who plugin which should be\ncalled to remember/forget the authentication.  This\nwould typically be a signed-cookie implementation such\nas the built-in auth_tkt plugin.  If unspecificed or\nNone then authentication will not be remembered.</p>\n</td>\n</tr>\n<tr><th>postback_url:</th><td><p>The URL to which BrowserID credentials should be sent\nfor validation.  The default value is hopefully conflict\nfree: /repoze.who.plugins.browserid.postback.</p>\n</td>\n</tr>\n<tr><th>assertion_field:</th></tr>\n<tr><td>\u00a0</td><td><p>The name of the POST form field in which to find the\nBrowserID assertion.  The default value is \u201cassertion\u201d.</p>\n</td>\n</tr>\n<tr><th>came_from_field:</th></tr>\n<tr><td>\u00a0</td><td><p>The name of the POST form field in which to find the\nreferring page, to which the user will be redirected\nafter processing their login.  The default value is\n\u201ccame_from\u201d.</p>\n</td>\n</tr>\n<tr><th>csrf_field:</th><td><p>The name of the POST form field in which to find the CSRF\nprotection token.  The default value is \u201ccsrf_token\u201d.  If\nset to the empty string then CSRF checking is disabled.</p>\n</td>\n</tr>\n<tr><th>csrf_cookie_name:</th></tr>\n<tr><td>\u00a0</td><td><p>The name of the cookie in which to set and find the\nCSRF protection token.  The default cookie name is\n\u201cbrowserid_csrf_token\u201d.  If set to the empty string\nthen CSRF checking is disabled.</p>\n</td>\n</tr>\n<tr><th>challenge_body:</th><td><p>The location at which to find the HTML for the login\npage, either as a dotted python reference or a filename.\nThe contained HTML may use python string interpolation\nsyntax to include details of the challenge, e.g. use\n%(csrf_token)s to include the CSRF token.</p>\n</td>\n</tr>\n<tr><th>verifier:</th><td><p>The PyVEP Verifier object to use for checking assertions, or\nthe dotted python name of such an object.  The default value\nis vep.RemoteVerifier() which should be suitable for most\npurposes.</p>\n</td>\n</tr>\n<tr><th>check_https:</th><td><p>Boolean indicating whether to reject login attempts over\nenencrypted connections.  The default value is False.</p>\n</td>\n</tr>\n<tr><th>check_referer:</th><td><p>Boolean indicating whether to reject login attempts where\nthe referer header does not match the expected audience.\nThe default is to perform this check for secure connections\nonly.</p>\n</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n</div>\n<div id=\"security-notes\">\n<h2>Security Notes</h2>\n<div id=\"csrf-protection\">\n<h3>CSRF Protection</h3>\n<p>This plugin attempts to provide some basic protection against login-CSRF\nattacks as described by Barth et. al. in \u201cRobust Defenses for Cross-Site\nRequest Forgery\u201d:</p>\n<blockquote>\n<a href=\"http://seclab.stanford.edu/websec/csrf/csrf.pdf\" rel=\"nofollow\">http://seclab.stanford.edu/websec/csrf/csrf.pdf</a></blockquote>\n<p>In the terminology of the above paper, it combines a session-independent\nnonce with strict referer checking for secure connections.  You can tweak\nthe protection by adjusting the \u201ccsrf_cookie_name\u201d, \u201ccheck_referer\u201d and\n\u201ccheck_https\u201d settings.</p>\n</div>\n<div id=\"audience-checking\">\n<h3>Audience Checking</h3>\n<p>BrowserID uses the notion of an \u201caudience\u201d to protect against stolen logins.\nThe audience ties a BrowserID assertion to a specific host, so that an\nattacker can\u2019t collect assertions on one site and then use them to log in to\nanother.</p>\n<p>This plugin performs strict audience checking by default.  You must provide\na list of acceptable audience string when creating the plugin, and they should\nbe specific to your application.  For example, if your application serves\nrequests on three different hostnames <a href=\"http://mysite.com\" rel=\"nofollow\">http://mysite.com</a>, <a href=\"http://www.mysite.com\" rel=\"nofollow\">http://www.mysite.com</a>\nand <a href=\"http://uploads.mysite.com\" rel=\"nofollow\">http://uploads.mysite.com</a>, you might provide:</p>\n<pre>[plugin:browserid]\nuse = repoze.who.plugins.browserid:make_plugin\naudiences = mysite.com *.mysite.com\n</pre>\n<p>If your application does strict checking of the HTTP Host header, then you can\ninstruct the plugin to use the Host header as the audience by leaving the list\nblank:</p>\n<pre>[plugin:browserid]\nuse = repoze.who.plugins.browserid:make_plugin\naudiences =\n</pre>\n<p>This is not the default behaviour since it may be insecure on some systems.</p>\n</div>\n</div>\n<div id=\"id1\">\n<h2>0.5.0 - 2012-09-11</h2>\n<blockquote>\n<ul>\n<li>Fix javascript to use navigator.id.get() instead of the deprecated\nnavigator.id.getVerifiedEmail.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id2\">\n<h2>0.4.0 - 2012-07-17</h2>\n<blockquote>\n<ul>\n<li>Migrate from PyVEP to PyBrowserID.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id3\">\n<h2>0.3.1 - 2012-01-30</h2>\n<blockquote>\n<ul>\n<li>Don\u2019t choke on unicode in challenge_body; thanks catlee.</li>\n<li>Update license to MPL 2.0.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id4\">\n<h2>0.3.0 - 2012-01-06</h2>\n<blockquote>\n<ul>\n<li>Update for API compatability with PyVEP&gt;=0.3.0.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id5\">\n<h2>0.2.1 - 2011-12-07</h2>\n<blockquote>\n<ul>\n<li>Update for API compatability with PyVEP&gt;=0.2.0.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id6\">\n<h2>0.2.0 - 2011-12-01</h2>\n<blockquote>\n<ul>\n<li>Refactor verification code into a standand-alone library named\n\u201cPyVEP\u201d, which is now a dependency.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"id7\">\n<h2>0.1.0 - 2011-11-15</h2>\n<blockquote>\n<ul>\n<li>Initial release.</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 798853, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "4520dd7677fba074ec1f8defc815294e", "sha256": "3203b88d99a7569a3609a17981744e09c79b193203eb24a5c6d8864a61b79bf2"}, "downloads": -1, "filename": "repoze.who.plugins.browserid-0.1.0.tar.gz", "has_sig": false, "md5_digest": "4520dd7677fba074ec1f8defc815294e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20473, "upload_time": "2011-11-22T10:50:52", "upload_time_iso_8601": "2011-11-22T10:50:52.137764Z", "url": "https://files.pythonhosted.org/packages/c3/a0/ad069b5fd492ecb3dec81c25fad278d8ad713f16a411522b151d1f5946f0/repoze.who.plugins.browserid-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9369932c42a4e863dfcdf61cb3a1cfb1", "sha256": "e39fab91b78fc33ea9391054e2926997d0bd3be2c04d3f448140166716a528d7"}, "downloads": -1, "filename": "repoze.who.plugins.browserid-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9369932c42a4e863dfcdf61cb3a1cfb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14975, "upload_time": "2011-12-02T05:36:19", "upload_time_iso_8601": "2011-12-02T05:36:19.879110Z", "url": "https://files.pythonhosted.org/packages/c7/00/06e1c3cd81234565a7a36369e5896e6b9579ffa9623dc6ffa4e3c5191e31/repoze.who.plugins.browserid-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "156f6b0f59a2507d2ef9cfa35c6d0aa0", "sha256": "cf0ec59cd25e4127fd06402da7d0e98c45465a55989ba84ad0096188e91252dd"}, "downloads": -1, "filename": "repoze.who.plugins.browserid-0.2.1.tar.gz", "has_sig": false, "md5_digest": "156f6b0f59a2507d2ef9cfa35c6d0aa0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15013, "upload_time": "2011-12-07T10:28:52", "upload_time_iso_8601": "2011-12-07T10:28:52.405592Z", "url": "https://files.pythonhosted.org/packages/cf/43/1be4e4427ef51063405753d8c051467f83b1abc7c0857fac6887168ea94d/repoze.who.plugins.browserid-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "ac0859b51f874d1e47b20c240052dfe6", "sha256": "dbfd4d4d1fc62921efcfb8c8b63664dfba76f2543cfea8d168df61ace32f58e4"}, "downloads": -1, "filename": "repoze.who.plugins.browserid-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ac0859b51f874d1e47b20c240052dfe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13565, "upload_time": "2012-01-30T00:25:01", "upload_time_iso_8601": "2012-01-30T00:25:01.122020Z", "url": "https://files.pythonhosted.org/packages/bb/13/cc71f457719a5ce447e7433896a8e1421b38b25e444c1e2d9530e9126c9b/repoze.who.plugins.browserid-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "8684e2e196cc8668200adb58cfd01066", "sha256": "14cd83287351676fe09a601751528aaa40409006ffae7b3cf7982d0b9e1e7276"}, "downloads": -1, "filename": "repoze.who.plugins.browserid-0.4.0.tar.gz", "has_sig": false, "md5_digest": "8684e2e196cc8668200adb58cfd01066", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12875, "upload_time": "2012-07-17T14:06:01", "upload_time_iso_8601": "2012-07-17T14:06:01.462393Z", "url": "https://files.pythonhosted.org/packages/c2/af/95cf619f1dc1962317f023ab98601bea4c69d3ac90e38ed0b1bf3e5e4ce9/repoze.who.plugins.browserid-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "0b70e754239062aeda754004b96f5625", "sha256": "f21f13665e1634919f317998c337a41bc289e12c02da8d9abbc3d7c6d95fcd78"}, "downloads": -1, "filename": "repoze.who.plugins.browserid-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0b70e754239062aeda754004b96f5625", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12928, "upload_time": "2012-09-11T04:31:22", "upload_time_iso_8601": "2012-09-11T04:31:22.331101Z", "url": "https://files.pythonhosted.org/packages/9f/ca/89757eb9b7d5bf2575a1a540224930becaecc70f5ad6785a5146ed2dfb8f/repoze.who.plugins.browserid-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0b70e754239062aeda754004b96f5625", "sha256": "f21f13665e1634919f317998c337a41bc289e12c02da8d9abbc3d7c6d95fcd78"}, "downloads": -1, "filename": "repoze.who.plugins.browserid-0.5.0.tar.gz", "has_sig": false, "md5_digest": "0b70e754239062aeda754004b96f5625", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12928, "upload_time": "2012-09-11T04:31:22", "upload_time_iso_8601": "2012-09-11T04:31:22.331101Z", "url": "https://files.pythonhosted.org/packages/9f/ca/89757eb9b7d5bf2575a1a540224930becaecc70f5ad6785a5146ed2dfb8f/repoze.who.plugins.browserid-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:22 2020"}